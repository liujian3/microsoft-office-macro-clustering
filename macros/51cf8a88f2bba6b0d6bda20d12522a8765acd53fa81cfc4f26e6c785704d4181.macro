Attribute VB_Name = "Ark1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Ark9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "CubeUpdate"
Sub Kubeprep()

Dim i, j, k, m, n As Integer
Dim ws As Worksheet
Dim ValueBox, LastColOffset As Integer


Application.ScreenUpdating = False
Application.Calculation = xlManual


'Establishes number of base currencies
Worksheets("Controle").Activate
With ActiveSheet
             NrOfBaseCurrencies = .Cells(.Rows.Count, "E").End(xlUp).Row - 19
             NrOfBetaTools = .Cells(.Rows.Count, "J").End(xlUp).Row - 19
             
End With

ReDim BaseCurrencyDates(NrOfBaseCurrencies, 2)
ReDim BetaToolsInfoAndValues(NrOfBetaTools, 14)

For i = 1 To NrOfBaseCurrencies
    BaseCurrencyDates(i, 1) = Cells(i + 19, 4)
    BaseCurrencyDates(i, 2) = Cells(i + 19, 5)
Next
    
For i = 1 To NrOfBetaTools
    For k = 1 To 14
        BetaToolsInfoAndValues(i, k) = Cells(i + 19, 8 + k)
    Next
Next




' Establishing number of BOs and loading them
Worksheets("Input").Activate
With ActiveSheet
    NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
    NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
End With


ReDim BOName(NrOfBOs)
For i = 0 To NrOfBOs
    BOName(i) = Cells(i + 3, 9)
Next


' Theoretically speaking, these crosses should be based on quotation currency on the employed futures. It is however found highly unlikly that the beneath crosses is not coverede by the crosses
ReDim HedgedCurrencies(NrOFHedgedCurrencies)
For i = 1 To NrOFHedgedCurrencies
    HedgedCurrencies(i) = Cells(i + 2, 11)
Next

NrOfCurrenCyCrosses = 0

For i = 1 To NrOfBaseCurrencies
    For k = 1 To NrOFHedgedCurrencies
        If BaseCurrencyDates(i, 1) <> HedgedCurrencies(k) Then
            NrOfCurrenCyCrosses = NrOfCurrenCyCrosses + 1
            Cells(NrOfCurrenCyCrosses + 2, 12) = BaseCurrencyDates(i, 1) & HedgedCurrencies(k) & " Curncy"
            Cells(NrOfCurrenCyCrosses + 2, 13).Formula = "=BDP(" & Cells(NrOfCurrenCyCrosses + 2, 12).Address & "," & Chr(34) & "px_last" & Chr(34) & ")"
        End If
    Next
Next




LastColOffset = NrOFHedgedCurrencies + 6

'establishes last col in a the first BO sheet. THis is enough given that they will all be the same

For Each ws In Worksheets
    For i = 0 To NrOfBOs
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
           NrOfHedgeLines = NrOfHedgeLines + Cells(4, 3) + Cells(5, 3)
           NrOfBetaLines = NrOfBetaLines + Cells(6, 12)
           Range(Cells(10, 1), Cells(250, 40)).Select
           Selection.Clear
           NrOfHedgeLines = NrOfHedgeLines + Cells(4, 3) + Cells(5, 3)
           NrOfBetaLines = NrOfBetaLines + Cells(6, 12)
           Cells(10, LastColOffset) = "PortfolioNameNum"
           Cells(10, LastColOffset + 1) = "Classification Level 4"
           Cells(10, LastColOffset + 2) = "Market Value"
           Cells(10, 2) = "PortfolioNameNum"
           Cells(10, 3) = "Classification Level 5"
           Cells(10, 4).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[Measures].[EOP MV in Client CCY]" & Chr(34) & ")"

           
           
                'writes currencies
                For n = 1 To NrOFHedgedCurrencies
                    Cells(10, 4 + n).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[Currency].[CurrencyCode].&[" & HedgedCurrencies(n) & "]" & Chr(34) & ")"
                    Cells(10, LastColOffset + 2 + n).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[Currency].[CurrencyCode].&[" & HedgedCurrencies(n) & "]" & Chr(34) & ")"
                    Cells(10, LastColOffset + 2 + n + NrOFHedgedCurrencies).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[Currency].[CurrencyCode].&[" & HedgedCurrencies(n) & "]" & Chr(34) & ")"
                Next
                
                For m = 1 To NrOfBetaTools
                    Cells(12 + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + m).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[ClientPortfolio].[BetaDerivative].&[" & BetaToolsInfoAndValues(m, 1) & "]" & Chr(34) & ")"
                    Cells(12 + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + m + NrOfBetaTools).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & "[ClientPortfolio].[BetaDerivative].&[" & BetaToolsInfoAndValues(m, 1) & "]" & Chr(34) & ")"
                Next
                    
                'loopes beneath writes cube/mdx code
                For j = 1 To Cells(4, 3)
                    Cells(10 + j, LastColOffset).Formula = "=CUBERANKEDMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(4, 2).Address & "," & "ROW(" & Cells(j, 1).Address & "))"
                    
                    Cells(10 + j, LastColOffset + 2).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(10, 4).Address & "," _
                    & Cells(10 + j, LastColOffset + 1).Address & "," & Cells(7, 11).Address & "," & Cells(4, 5).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    Cells(10 + j, LastColOffset + 1).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & _
                    "Filter([ClientPortfolio].[ClassificationLevel4].children" & "," & "([Measures].[EOP MV in Client CCY]" & "," & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" _
                    & Cells(2, 2).Address & "&" & Chr(34) & "]" & "," & "[ClientPortfolio].[PortFolioNameNum].[All].[" & Chr(34) & "&" & Cells(j + 10, LastColOffset).Address & "&" & Chr(34) & "]))" & Chr(34) & ")"
                    
                    
                    For n = 1 To NrOFHedgedCurrencies
                        Cells(10 + j, LastColOffset + 2 + n).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(7, 2).Address & "," _
                        & Cells(10 + j, LastColOffset).Address & "," & Cells(10, LastColOffset + 2 + n).Address & "," & Cells(4, 5).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                        
                         Cells(10 + j, LastColOffset + 2 + n + NrOFHedgedCurrencies).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(10, 4).Address & "," _
                        & Cells(10 + j, LastColOffset + 1).Address & "," & Cells(10, LastColOffset + 2 + n + NrOFHedgedCurrencies).Address & "," & Cells(7, 11).Address & "," & Cells(4, 5).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                        
                    Next
                    
                    Range(Cells(10 + j, LastColOffset + 2), Cells(10 + j, LastColOffset + 2 + NrOFHedgedCurrencies * 2)).NumberFormat = "#,##0.0"
                       
                Next
                
                
                For k = 1 To Cells(5, 3)
                    Cells(10 + k + Cells(4, 3), LastColOffset).Formula = "=CUBERANKEDMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(5, 2).Address & "," & "ROW(" & Cells(k, 1).Address & "))"
                    
                    Cells(10 + k + Cells(4, 3), LastColOffset + 2).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," _
                    & Cells(10, 4).Address & "," & Cells(10 + k + Cells(4, 3), LastColOffset + 1).Address & "," & Cells(4, 5).Address & "," & Cells(7, 11).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    Cells(10 + k + Cells(4, 3), LastColOffset + 1).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & _
                    "Filter([ClientPortfolio].[ClassificationLevel4].children" & "," & "([Measures].[EOP MV in Client CCY]" & "," & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" _
                    & Cells(2, 2).Address & "&" & Chr(34) & "]" & "," & "[ClientPortfolio].[PortFolioNameNum].[All].[" & Chr(34) & "&" & Cells(10 + k + Cells(4, 3), LastColOffset).Address & "&" & Chr(34) & "]))" & Chr(34) & ")"
                    
                    For n = 1 To NrOFHedgedCurrencies
                        Cells(10 + k + Cells(4, 3), LastColOffset + 2 + n).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(7, 2).Address & "," _
                        & Cells(10 + k + Cells(4, 3), LastColOffset).Address & "," & Cells(10, LastColOffset + 2 + n).Address & "," & Cells(4, 5).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                        
                        Cells(10 + k + Cells(4, 3), LastColOffset + 2 + n + NrOFHedgedCurrencies).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(10, 4).Address & "," _
                        & Cells(10 + k + Cells(4, 3), LastColOffset + 1).Address & "," & Cells(10, LastColOffset + 2 + n + NrOFHedgedCurrencies).Address & "," & Cells(4, 5).Address & "," & Cells(7, 11).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    Next
                    
                    Range(Cells(10 + k + Cells(4, 3), LastColOffset + 2), Cells(10 + k + Cells(4, 3), LastColOffset + 2 + NrOFHedgedCurrencies)).NumberFormat = "#,##0.0"
                    
                         
                Next
                
                
      
                For m = 1 To Cells(3, 3)
                    
                    Cells(10 + m, 2).Formula = "=CUBERANKEDMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(3, 2).Address & "," & "ROW(" & Cells(m, 1).Address & "))"
                    
                    Cells(10 + m, 4).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(10, 4).Address & "," _
                    & Cells(10 + m, 2).Address & "," & Cells(4, 5).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    Cells(10 + m, 3).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & _
                    "Filter([ClientPortfolio].[ClassificationLevel5].children" & "," & "([Measures].[EOP MV in Client CCY]" & "," & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" _
                    & Cells(2, 2).Address & "&" & Chr(34) & "]" & "," & "[ClientPortfolio].[PortFolioNameNum].[All].[" & Chr(34) & "&" & Cells(m + 10, 2).Address & "&" & Chr(34) & "]))" & Chr(34) & ")"
                    
                    For n = 1 To NrOFHedgedCurrencies
                        Cells(10 + m, 4 + n).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(10, 4).Address & "," _
                        & Cells(10 + m, 2).Address & "," & Cells(10, 4 + n).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    Next
                Next
                
                
                
                For n = 1 To Cells(6, 12)
                
                    Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset).Formula = "=CUBERANKEDMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Cells(6, 11).Address & "," & "ROW(" & Cells(n, 1).Address & "))"
                    
                    Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 1).Formula = "=CUBEMEMBER(" & Chr(34) & "NefoValidation" & Chr(34) & "," & Chr(34) & _
                    "Filter([ClientPortfolio].[ClassificationLevel4].children" & "," & "([Measures].[EOP MV in Client CCY]" & "," & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" _
                    & Cells(2, 2).Address & "&" & Chr(34) & "]" & "," & "[ClientPortfolio].[PortFolioNameNum].[All].[" & Chr(34) & "&" & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset).Address & "&" & Chr(34) & "]))" & Chr(34) & ")"
                    
                    Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 2).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," _
                    & Cells(10, 4).Address & "," & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 1).Address & "," & Cells(7, 11).Address & "," & Cells(4, 5).Address & _
                    "," & Cells(6, 2).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," _
                    & Cells(7, 2).Address & "," & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 1).Address & "," & Cells(7, 11).Address & "," & Cells(4, 5).Address & _
                    "," & Cells(6, 2).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    
                    For j = 1 To NrOfBetaTools
                        Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + j).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," _
                        & Cells(7, 2).Address & "," & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset).Address & "," & Cells(7, 11).Address & "," & Cells(12 + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + j).Address & "," & Cells(4, 5).Address & _
                        "," & Cells(6, 2).Address & "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                        
                        Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + j + NrOfBetaTools).Formula = "=CUBEVALUE(" & Chr(34) & "NefoValidation" & Chr(34) & "," _
                        & Cells(8, 2).Address & "," & Cells(7, 11).Address & "," & Cells(6, 2).Address & "," & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset).Address & "," & Cells(12 + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + j + NrOfBetaTools).Address & "," & Cells(4, 5).Address & _
                        "," & Chr(34) & "[Client].[ClientName].[ALL].[" & Chr(34) & "&" & Cells(2, 2).Address & "&" & Chr(34) & "]" & Chr(34) & ")"
                    Next
                        
                    Range(Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 2), Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + (NrOfBetaTools * 2))).NumberFormat = "#,##0.0"
                    
                    'Crude solution but only temporary calculation
                    'Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + NrOfBetaTools + 1) = Application.WorksheetFunction.Sum(Range(Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 4), Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + NrOfBetaTools))) / Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 2)
                    'Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 3 + NrOfBetaTools + 1).NumberFormat = "0.00%"
                Next
                
           NrOfPortFoliosToHedge = NrOfPortFoliosToHedge + Cells(3, 3)
        End If
    Next
Next



    
Worksheets("Controle").Activate
Cells(13, 14) = "SKAL OPDATERES"

Application.Calculation = xlAutomatic
Application.ScreenUpdating = True



End Sub

Public Sub KubeOpdatering()

Dim ws As Worksheet
Dim i As Integer

ValueBox = MsgBox("|fffd|nsker du at opdatere kubedata" & Chr(13) & Chr(13) & "OBS: Dette vil tage op mod 15 minutter", vbYesNo + vbExclamation, "ADVARSEL!!") ' If folder exists, user get option to exit run or rerun contents in existing folder
If ValueBox = vbYes Then

        ' Establishing number of BOs and loading them
            Worksheets("Input").Activate
            With ActiveSheet
                NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
                NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
            End With
            
            
            ReDim BOName(NrOfBOs)
            For i = 0 To NrOfBOs
                BOName(i) = Cells(i + 3, 9)
            Next
            
            
            
            
            
            For Each ws In Worksheets
                For i = 0 To NrOfBOs
                    If ws.Name = BOName(i) Then
                       Worksheets(BOName(i)).Activate
                       Range(Cells(10, 1), Cells(250, 40)).Select
                       Selection.Clear
                    End If
                Next
            Next
                       
        ActiveWorkbook.RefreshAll
    Else
        End
End If







Worksheets("Controle").Activate
Cells(13, 14) = "SKAL OPDATERES"



End Sub
Attribute VB_Name = "DataPrep"
Option Explicit

Sub DataControle()


Call BetaDataControle
Call CurrencyDataControle




End Sub


Sub BetaDataControle()

Dim i, j, k, l, m, n As Integer
Dim ValueBox As Integer

' Establishing number of BOs and loading them
Worksheets("Input").Activate
With ActiveSheet
    NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
End With

ReDim BOName(NrOfBOs)
For i = 0 To NrOfBOs
    BOName(i) = Cells(i + 3, 9)
Next

Worksheets("Controle").Activate
With ActiveSheet
             NrOfBaseCurrencies = .Cells(.Rows.Count, "E").End(xlUp).Row - 19
             NrOfBetaTools = .Cells(.Rows.Count, "I").End(xlUp).Row - 19
End With

ReDim BaseCurrencyDates(NrOfBaseCurrencies, 2)
ReDim BetaToolsInfoAndValues(NrOfBetaTools, 14)

For i = 1 To NrOfBaseCurrencies
    BaseCurrencyDates(i, 1) = Cells(i + 19, 4)
    BaseCurrencyDates(i, 2) = Cells(i + 19, 5)
Next
    
For i = 1 To NrOfBetaTools
    For k = 1 To 14
        BetaToolsInfoAndValues(i, k) = Cells(i + 19, 8 + k)
    Next
Next

NumberOfFixedBETACol = 7 ' simply the non-dynamic number of rows

LastColOffset = NrOfBetaTools + 6
NumberOfFixedBETACol = 7

For i = 1 To NrOfBetaTools
            'test i forhold til limits ark
        If Worksheets("BetaLimits").Cells(1, NumberOfFixedBETACol + i) <> BetaToolsInfoAndValues(i, 1) And Worksheets("BetaLimits").Cells(1, NumberOfFixedBETACol + i) <> "" Then
             ValueBox = MsgBox("Der synes at v|fffd|re foretaget sekvens/placerings |fffd|ndringer vedr. beta korrektioner" & Chr(13) & Chr(13) & "Dette skal h|fffd|ndteres manuelt og programmet afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
           End
           
        ElseIf Worksheets("BetaLimits").Cells(1, NumberOfFixedBETACol + i) <> BetaToolsInfoAndValues(i, 1) And Worksheets("BetaLimits").Cells(1, NumberOfFixedBETACol + i) = "" Then
            ValueBox = MsgBox("Bem|fffd|rk at der er tilf|fffd|jet et nyt index i BetaLimits-arket", vbOKOnly + vbExclamation, "ADVARSEL")
                Worksheets("BetaLimits").Cells(1, NumberOfFixedBETACol + i) = BetaToolsInfoAndValues(i, 1)
        End If
           
           
        'test i forhold til database ark
        If Worksheets("BetaDataBase").Cells(1, NumberOfFixedBETACol + i) <> BetaToolsInfoAndValues(i, 1) And Worksheets("BetaDataBase").Cells(1, NumberOfFixedBETACol + i) <> "" Then
             ValueBox = MsgBox("Der synes at v|fffd|re foretaget sekvens/placerings |fffd|ndringer vedr. beta korrektioner" & Chr(13) & Chr(13) & "Dette skal h|fffd|ndteres manuelt og programmet afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
           End
           
        ElseIf Worksheets("BetaDataBase").Cells(1, NumberOfFixedBETACol + i) <> BetaToolsInfoAndValues(i, 1) And Worksheets("BetaDataBase").Cells(1, NumberOfFixedBETACol + i) = "" Then
            ValueBox = MsgBox("Bem|fffd|rk at der er tilf|fffd|jet en nyt Instrument valuta i BetaDataBase-arket", vbOKOnly + vbExclamation, "ADVARSEL")
                Worksheets("BetaDataBase").Cells(1, NumberOfFixedBETACol + i) = BetaToolsInfoAndValues(i, 1)
        End If
Next
            









End Sub





Sub CurrencyDataControle()

Dim i, j, k, m, n As Integer
Dim ws As Worksheet
Dim PlacementCount, PlacementCountBeta As Integer
Dim SheetName As String
Dim ValueBox As Integer
Dim LimitsTest, DataBaseTest As String
Dim NrOfDeletedLiniesInLimits, Found  As Integer


Application.ScreenUpdating = False
'Application.Calculation = xlManual

NumberOfFixedCurrencyCol = 7 ' simply the non-dynamic number of rows
NumberOfFixedBETACol = 7 ' simply the non-dynamic number of rows

Worksheets("Controle").Activate
With ActiveSheet
             NrOfBaseCurrencies = .Cells(.Rows.Count, "E").End(xlUp).Row - 19
             NrOfBetaTools = .Cells(.Rows.Count, "J").End(xlUp).Row - 19
End With


' Establishing number of BOs and loading them
Worksheets("Input").Activate
With ActiveSheet
    NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
    NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
End With

ReDim BOName(NrOfBOs)
ReDim BaseCurrencies(NrOfBOs)
For i = 0 To NrOfBOs
    BOName(i) = Cells(i + 3, 9)
    BaseCurrencies(i) = Cells(i + 3, 10)
Next

' Used as colmun push
LastColOffset = NrOFHedgedCurrencies + 6

'Establishes whish currencies to hedge
ReDim HedgedCurrencies(NrOFHedgedCurrencies)
For i = 1 To NrOFHedgedCurrencies
    HedgedCurrencies(i) = Cells(i + 2, 11)
        
        'test i forhold til limits ark
        If Worksheets("Limits").Cells(1, NumberOfFixedCurrencyCol + i) <> HedgedCurrencies(i) And Worksheets("Limits").Cells(1, NumberOfFixedCurrencyCol + i) <> "" Then
             ValueBox = MsgBox("Der synes at v|fffd|re foretaget sekvens/placerings |fffd|ndringer vedr. valutaer" & Chr(13) & Chr(13) & "Dette skal h|fffd|ndteres manuelt og programmet afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
           End
           
        ElseIf Worksheets("Limits").Cells(1, NumberOfFixedCurrencyCol + i) <> HedgedCurrencies(i) And Worksheets("Limits").Cells(1, NumberOfFixedCurrencyCol + i) = "" Then
            ValueBox = MsgBox("Bem|fffd|rk at der er tilf|fffd|jet en ny valuta i Limits-arket", vbOKOnly + vbExclamation, "ADVARSEL")
                Worksheets("Limits").Cells(1, NumberOfFixedCurrencyCol + i) = HedgedCurrencies(i)
        End If
           
           
        'test i forhold til database ark
        If Worksheets("DataBase").Cells(1, NumberOfFixedCurrencyCol + i) <> HedgedCurrencies(i) And Worksheets("DataBase").Cells(1, NumberOfFixedCurrencyCol + i) <> "" Then
             ValueBox = MsgBox("Der synes at v|fffd|re foretaget sekvens/placerings |fffd|ndringer vedr. valutaer" & Chr(13) & Chr(13) & "Dette skal h|fffd|ndteres manuelt og programmet afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
           End
           
        ElseIf Worksheets("DataBase").Cells(1, NumberOfFixedCurrencyCol + i) <> HedgedCurrencies(i) And Worksheets("DataBase").Cells(1, NumberOfFixedCurrencyCol + i) = "" Then
            ValueBox = MsgBox("Bem|fffd|rk at der er tilf|fffd|jet en ny valuta i DataBase-arket", vbOKOnly + vbExclamation, "ADVARSEL")
                Worksheets("DataBase").Cells(1, NumberOfFixedCurrencyCol + i) = HedgedCurrencies(i)
        End If
            

        
Next





    
' Counts Lines needed for data storage in a single multidimentional array
NrOfHedgeLines = 0
NrOfPortFoliosToHedge = 0
NrOfBetaHedgedPortfolios = 0

For Each ws In Worksheets
    For i = 0 To NrOfBOs
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
           NrOfHedgeLines = NrOfHedgeLines + Cells(4, 3) + Cells(5, 3)
           NrOfPortFoliosToHedge = NrOfPortFoliosToHedge + Cells(3, 3)
           NrOfBetaHedgedPortfolios = NrOfBetaHedgedPortfolios + Cells(6, 12)
        End If
    Next
Next


ReDim DataForDataBase(NrOfHedgeLines, 4)
ReDim TestArray(NrOfHedgeLines)
ReDim DataForLimitsDeletion(NrOfHedgeLines, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies)

ReDim DataForDataBaseBETA(NrOfBetaHedgedPortfolios, 4)
ReDim TestArrayBeta(NrOfBetaHedgedPortfolios)
ReDim DataForLimitsDeletionBETA(NrOfBetaHedgedPortfolios, NumberOfFixedBETACol + NrOfBetaTools)



PlacementCount = 0
TestArray(0) = "SKIP" ' Done to avoid empty in row zero for later functions

For Each ws In Worksheets
    For i = 0 To NrOfBOs
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
                'Treatments of currency corrections
                For k = 1 To Cells(4, 3) + Cells(5, 3)
                    PlacementCount = PlacementCount + 1
                    DataForDataBase(PlacementCount, 1) = Cells(10 + k, LastColOffset)
                    DataForDataBase(PlacementCount, 2) = Cells(10 + k, LastColOffset + 1)
                    DataForDataBase(PlacementCount, 3) = Cells(2, 2)
                    DataForDataBase(PlacementCount, 4) = Cells(2, 2) & " - " & Cells(10 + k, LastColOffset)
                    TestArray(PlacementCount) = Cells(2, 2) & " - " & Cells(10 + k, LastColOffset)
                Next
                
                'Treatment of beta corrections
                For n = 1 To Cells(6, 12)
                    PlacementCountBeta = PlacementCountBeta + 1
                    DataForDataBaseBETA(PlacementCountBeta, 1) = Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset)
                    DataForDataBaseBETA(PlacementCountBeta, 2) = Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset + 1)
                    DataForDataBaseBETA(PlacementCountBeta, 3) = Cells(2, 2)
                    DataForDataBaseBETA(PlacementCountBeta, 4) = Cells(2, 2) & " - " & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset)
                    TestArrayBeta(PlacementCountBeta) = Cells(2, 2) & " - " & Cells(12 + n + Cells(4, 3) + Cells(5, 3), LastColOffset)
                Next
                
        End If
    Next
Next




'TREATMENT OF CURRENCY CORRECTION

'Following Section tests if all hedge accoutns are included in database
Worksheets("DataBase").Activate
With ActiveSheet
    LastRowInDatabase = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInDatabase = 0 Then
    LastRowInDatabase = 1
End If




ReDim TestArrayDataBase(LastRowInDatabase)
ReDim DataBase(LastRowInDatabase, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies)
ReDim DataForLimitsDeletion(NrOfHedgeLines, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies)


For i = 1 To LastRowInDatabase
    TestArrayDataBase(i) = Cells(i + 1, 5)
     For k = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
            DataBase(i, k) = Cells(i + 1, k)
     Next
Next

NrOfAccMissingInDatabase = 0

For i = 1 To NrOfHedgeLines
    TempString = TestArray(i)
        If IsInArray(TempString, TestArrayDataBase) Then
            'if Hedge Account is included nothing happens
            NrOfAccMissingInDatabase = NrOfAccMissingInDatabase + 0
            WhereInTestArray = WhereInArray(TestArrayDataBase, TempString)
            Cells(WhereInTestArray + 1, 3) = DataForDataBase(i, 2)
            Cells(WhereInTestArray + 1, 2) = DataForDataBase(i, 3)
            Cells(WhereInTestArray + 1, 4) = DataForDataBase(i, 1)
            
                  For k = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
                            DataForLimitsDeletion(i, k) = Cells(WhereInTestArray + 1, k)
                  Next
            
        Else
            NrOfAccMissingInDatabase = NrOfAccMissingInDatabase + 1
            'writes to last cell by updating counter
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 5) = TempString
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 3) = DataForDataBase(i, 2)
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 2) = DataForDataBase(i, 3)
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 4) = DataForDataBase(i, 1)
        End If
Next

'MsgBox NrOfAccMissingInDatabase
        
        
        
        
        
 'A crude but working solution. Could be made more elegant: _
 deletes rows from limits sheet if the account is no longer included
         
        
 Worksheets("Limits").Activate
With ActiveSheet
    LastRowInLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInLimits = 0 Then
   LastRowInLimits = 1
End If
       
NrOfDeletedLiniesInLimits = 0
        
For i = 1 To (LastRowInLimits - NrOfDeletedLiniesInLimits)
Found = 0
LimitsTest = Cells(i + 1, 2) & " - " & Cells(i + 1, 4)
    For k = 1 To NrOfHedgeLines
        DataBaseTest = DataForLimitsDeletion(k, 2) & " - " & DataForLimitsDeletion(k, 4)
            If LimitsTest = DataBaseTest Then
                Found = 1
            End If
    Next
    
    
    If Found = 0 Then
         ValueBox = MsgBox("OBS!" & Chr(13) & Chr(13) & LimitsTest & " Slettes!" & Chr(13) & Chr(13) & " |fffd|nsker du at forts|fffd|tte", vbYesNo + vbExclamation, "ADVARSEL")
            If ValueBox = 7 Then
                End
            Else
                NrOfDeletedLiniesInLimits = NrOfDeletedLiniesInLimits + 1
                ReDim Preserve LimitsRowsToDelete(NrOfDeletedLiniesInLimits)
                LimitsRowsToDelete(NrOfDeletedLiniesInLimits) = i + 1
            End If
    End If
Next




For i = 1 To NrOfDeletedLiniesInLimits
    Rows(1 + (LimitsRowsToDelete(i) - i)).Delete shift:=xlShiftUp
Next
        
        
        
'Following Section tests if all hedge accoutns are included in Limits Sheet
Worksheets("Limits").Activate
With ActiveSheet
    LastRowInLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInLimits = 0 Then
   LastRowInLimits = 1
End If




ReDim TestArrayLimits(LastRowInLimits)
ReDim LimitsData(LastRowInLimits, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies)
NrOfEmptyLimits = 0


For i = 1 To LastRowInLimits
    TestArrayLimits(i) = Cells(i + 1, 5)
        For k = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
            LimitsData(i, k) = Cells(i + 1, k)
                If LimitsData(i, k) = "" Then
                   NrOfEmptyLimits = NrOfEmptyLimits + 1
                End If
        Next
Next


NrOfAccMissingInLimits = 0
SheetName = "Input"



For i = 1 To NrOfHedgeLines
    TempString = TestArray(i)
        If IsInArray(TempString, TestArrayLimits) Then
            'if Hedge Account is included nothing happens
            NrOfAccMissingInLimits = NrOfAccMissingInLimits + 0
            WhereInTestArray = WhereInArray(TestArrayLimits, TempString)
            Cells(WhereInTestArray + 1, 3) = DataForDataBase(i, 2)
            Cells(WhereInTestArray + 1, 2) = DataForDataBase(i, 3)
            Cells(WhereInTestArray + 1, 4) = DataForDataBase(i, 1)
                For k = 0 To NrOfBOs
                    If BOName(k) = DataForDataBase(i, 3) Then
                            Cells(WhereInTestArray + 1, 6) = BaseCurrencies(k)
                    End If
                Next
        Else
            NrOfAccMissingInLimits = NrOfAccMissingInLimits + 1
            'writes to last cell by updating counter
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 5) = TempString
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 3) = DataForDataBase(i, 2)
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2) = DataForDataBase(i, 3)
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 4) = DataForDataBase(i, 1)
            'Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 6).Formula = "=VLOOKUP(" & Range(Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2), Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2)).Address & _
            ",Input!" & Range(Cells(3, 9), Cells(3 + NrOfBOs, 10)).Address & ",2,False)"
            NrOfEmptyLimits = NrOfEmptyLimits + NrOFHedgedCurrencies + 1 ' DOne this way since there is no loop to go across columns and test. I.e. it is assumed that nothing is filled in for the new columns. _
            needs a change when LO account number can be pulled from the cube
            
            For k = 0 To NrOfBOs
                If BOName(k) = DataForDataBase(i, 3) Then
                        Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 6) = BaseCurrencies(k)
                End If
            Next
        End If
Next




'Infoboxes for the user

If NrOfAccMissingInDatabase <> 0 Or NrOfAccMissingInLimits <> 0 Then
    ValueBox = MsgBox("Der er tilf|fffd|jet " & NrOfAccMissingInDatabase & " ny(e) relevante linjer i Databasen." & Chr(13) & Chr(13) & "Der er tilf|fffd|jet " & NrOfAccMissingInLimits & " ny(e) relevante linjer i Limits-arket.", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("Limits").Activate
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
End If


If NrOfEmptyLimits <> 0 Then
    ValueBox = MsgBox("Du har " & NrOfEmptyLimits & " celler i Limits-arket som ikke er udfyldt." & Chr(13) & "Tomme celler tillades ikke og programmet afsluttes." & Chr(13) & Chr(13) & "Udfyld venligst cellerne og genk|fffd|r herefter dataopdateringen", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
    Worksheets("Limits").Activate
    End
End If




'Checks if there is difference between database info and info in limit sheet and writes accordingly. IF theres is a new account it is added
NrOfChangedRows = 0
Worksheets("DataBase").Activate


For i = 1 To LastRowInDatabase
    For k = 1 To LastRowInLimits
        TempString = Cells(i + 1, 5)
        If TempString = TestArrayLimits(k) Then
            For m = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
                If DataBase(i, m) = "" Then
                    Cells(i + 1, m) = LimitsData(k, m)
                
                ElseIf Worksheets("Limits").Cells(k + 1, m) <> Cells(i + 1, m) And Cells(i + 1, m) <> "" Then
                    Cells(i + 1, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies + 1) = "|fffd|ndring"
                    NrOfChangedRows = NrOfChangedRows + 1
                        For n = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
                            Cells(i + 1, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies + 1 + n) = LimitsData(k, n)
                        Next
                    GoTo ChangeFound
                End If
            Next
ChangeFound:
        End If
    Next
Next

 Worksheets("DataBase").Activate
               
' Exits code adn forces user to deal with changes
If NrOfChangedRows <> 0 Then
    ValueBox = MsgBox("Der synes at v|fffd|re |fffd|ndringer i " & NrOfChangedRows & " linjer i DataBasen." & Chr(13) & Chr(13) & "Forhold dig venligst til |fffd|ndringerne i Database-arket", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("DataBase").Activate
    Worksheets("DataBase").Visible = True
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
    End
End If


If NrOfChangedRows = 0 Then
    Range(Cells(1, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies + 1), Cells(LastRowInDatabase + 1, (NumberOfFixedCurrencyCol + NrOFHedgedCurrencies + 1) * 2)).Select
    Selection.Clear
End If
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
'TREATMENT OF BETA CORRECTIONS
'Following Section tests if all beta correction accoutns are included in database
 Worksheets("BetaDataBase").Activate
With ActiveSheet
    LastRowInDatabase = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInDatabase = 0 Then
    LastRowInDatabase = 1
End If




ReDim TestArrayDataBase(LastRowInDatabase)
ReDim DataBase(LastRowInDatabase, NumberOfFixedBETACol + NrOfBetaTools)
ReDim DataForLimitsDeletionBETA(NrOfBetaHedgedPortfolios, NumberOfFixedBETACol + NrOfBetaTools)


For i = 1 To LastRowInDatabase
    TestArrayDataBase(i) = Cells(i + 1, 5)
     For k = 1 To NumberOfFixedBETACol + NrOfBetaTools
            DataBase(i, k) = Cells(i + 1, k)
     Next
Next

NrOfAccMissingInDatabase = 0

For i = 1 To NrOfBetaHedgedPortfolios
    TempString = TestArrayBeta(i)
        If IsInArray(TempString, TestArrayDataBase) Then
            'if Hedge Account is included nothing happens
            NrOfAccMissingInDatabase = NrOfAccMissingInDatabase + 0
            WhereInTestArray = WhereInArray(TestArrayDataBase, TempString)
            Cells(WhereInTestArray + 1, 3) = DataForDataBaseBETA(i, 2)
            Cells(WhereInTestArray + 1, 2) = DataForDataBaseBETA(i, 3)
            Cells(WhereInTestArray + 1, 4) = DataForDataBaseBETA(i, 1)
            
                  For k = 1 To NumberOfFixedBETACol + NrOfBetaTools
                            DataForLimitsDeletionBETA(i, k) = Cells(WhereInTestArray + 1, k)
                  Next
            
        Else
            NrOfAccMissingInDatabase = NrOfAccMissingInDatabase + 1
            'writes to last cell by updating counter
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 5) = TempString
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 3) = DataForDataBaseBETA(i, 2)
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 2) = DataForDataBaseBETA(i, 3)
            Cells(LastRowInDatabase + 1 + NrOfAccMissingInDatabase, 4) = DataForDataBaseBETA(i, 1)
        End If
Next
  
  
  
  
 'A crude but working solution. Could be made more elegant: _
 deletes rows from limits sheet if the account is no longer included
         
        
 Worksheets("BetaLimits").Activate
With ActiveSheet
    LastRowInLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInLimits = 0 Then
   LastRowInLimits = 1
End If
       
NrOfDeletedLiniesInLimits = 0
        
For i = 1 To (LastRowInLimits - NrOfDeletedLiniesInLimits)
Found = 0
LimitsTest = Cells(i + 1, 2) & " - " & Cells(i + 1, 4)
    For k = 1 To NrOfBetaHedgedPortfolios
        DataBaseTest = DataForLimitsDeletionBETA(k, 2) & " - " & DataForLimitsDeletionBETA(k, 4)
            If LimitsTest = DataBaseTest Then
                Found = 1
            End If
    Next
    
    
    If Found = 0 Then
         ValueBox = MsgBox("OBS!" & Chr(13) & Chr(13) & LimitsTest & " Slettes!" & Chr(13) & Chr(13) & " |fffd|nsker du at forts|fffd|tte", vbYesNo + vbExclamation, "ADVARSEL")
            If ValueBox = 7 Then
                End
            Else
                NrOfDeletedLiniesInLimits = NrOfDeletedLiniesInLimits + 1
                ReDim Preserve LimitsRowsToDelete(NrOfDeletedLiniesInLimits)
                LimitsRowsToDelete(NrOfDeletedLiniesInLimits) = i + 1
            End If
    End If
Next




For i = 1 To NrOfDeletedLiniesInLimits
    Rows(1 + (LimitsRowsToDelete(i) - i)).Delete shift:=xlShiftUp
Next
          
  
  
  
  
'Following Section tests if all hedge accoutns are included in Limits Sheet
Worksheets("BetaLimits").Activate
With ActiveSheet
    LastRowInLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInLimits = 0 Then
   LastRowInLimits = 1
End If




ReDim TestArrayLimits(LastRowInLimits)
ReDim LimitsDataBETA(LastRowInLimits, NumberOfFixedBETACol + NrOfBetaTools)
NrOfEmptyLimits = 0

For i = 1 To LastRowInLimits
    TestArrayLimits(i) = Cells(i + 1, 5)
        For k = 1 To NumberOfFixedBETACol + NrOfBetaTools
            LimitsDataBETA(i, k) = Cells(i + 1, k)
                If LimitsDataBETA(i, k) = "" Then
                   NrOfEmptyLimits = NrOfEmptyLimits + 1
                End If
        Next
Next


NrOfAccMissingInLimits = 0
SheetName = "Input"



For i = 1 To NrOfBetaHedgedPortfolios
    TempString = TestArrayBeta(i)
        If IsInArray(TempString, TestArrayLimits) Then
            'if Hedge Account is included nothing happens
            NrOfAccMissingInLimits = NrOfAccMissingInLimits + 0
            WhereInTestArray = WhereInArray(TestArrayLimits, TempString)
            Cells(WhereInTestArray + 1, 3) = DataForDataBaseBETA(i, 2)
            Cells(WhereInTestArray + 1, 2) = DataForDataBaseBETA(i, 3)
            Cells(WhereInTestArray + 1, 4) = DataForDataBaseBETA(i, 1)
        Else
            NrOfAccMissingInLimits = NrOfAccMissingInLimits + 1
            'writes to last cell by updating counter
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 5) = TempString
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 3) = DataForDataBaseBETA(i, 2)
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2) = DataForDataBaseBETA(i, 3)
            Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 4) = DataForDataBaseBETA(i, 1)
            'Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 6).Formula = "=VLOOKUP(" & Range(Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2), Cells(LastRowInLimits + 1 + NrOfAccMissingInLimits, 2)).Address & _
            ",Input!" & Range(Cells(3, 9), Cells(3 + NrOfBOs, 10)).Address & ",2,False)"
            NrOfEmptyLimits = NrOfEmptyLimits + NrOfBetaHedgedPortfolios + 1 ' DOne this way since there is no loop to go across columns and test. I.e. it is assumes that nothing is filled in for the new columns. _
            needs a change when LO account number can be pulled from the cube
        End If
Next
  
  
  
  
  
 
'Infoboxes for the user

If NrOfAccMissingInDatabase <> 0 Or NrOfAccMissingInLimits <> 0 Then
    ValueBox = MsgBox("Der er tilf|fffd|jet " & NrOfAccMissingInDatabase & " ny(e) relevante linjer i BetaDatabasen." & Chr(13) & Chr(13) & "Der er tilf|fffd|jet " & NrOfAccMissingInLimits & " ny(e) relevante linjer i BetaLimits-arket.", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("BetaLimits").Activate
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
End If


If NrOfEmptyLimits <> 0 Then
    ValueBox = MsgBox("Du har " & NrOfEmptyLimits & " celler i BetaLimits-arket som ikke er udfyldt." & Chr(13) & "Tomme celler tillades ikke og programmet afsluttes." & Chr(13) & Chr(13) & "Udfyld venligst cellerne og genk|fffd|r herefter dataopdateringen", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
    Worksheets("BetaLimits").Activate
    End
End If
 
  
  
'Checks if there is difference between Betadatabase info and info in limit sheet and writes accordingly. IF theres is a new account it is added
NrOfChangedRows = 0
Worksheets("BetaDataBase").Activate


For i = 1 To LastRowInDatabase
    For k = 1 To LastRowInLimits
        TempString = Cells(i + 1, 5)
        If TempString = TestArrayLimits(k) Then
            For m = 1 To NumberOfFixedBETACol + NrOfBetaTools
                If DataBase(i, m) = "" Then
                    Cells(i + 1, m) = LimitsDataBETA(k, m)
                
                ElseIf Worksheets("BetaLimits").Cells(k + 1, m) <> Cells(i + 1, m) And Cells(i + 1, m) <> "" Then
                    Cells(i + 1, NumberOfFixedBETACol + NrOfBetaTools + 1) = "|fffd|ndring"
                    NrOfChangedRows = NrOfChangedRows + 1
                        For n = 1 To NumberOfFixedBETACol + NrOfBetaTools
                            Cells(i + 1, NumberOfFixedBETACol + NrOfBetaTools + 1 + n) = LimitsDataBETA(k, n)
                        Next
                    GoTo BetaChangeFound
                End If
            Next
BetaChangeFound:
        End If
    Next
Next

 Worksheets("BetaDataBase").Activate
               
' Exits code adn forces user to deal with changes
If NrOfChangedRows <> 0 Then
    ValueBox = MsgBox("Der synes at v|fffd|re |fffd|ndringer i " & NrOfChangedRows & " linjer i BetaDataBasen." & Chr(13) & Chr(13) & "Forhold dig venligst til |fffd|ndringerne i BetaDatabase-arket", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("BetaDataBase").Activate
    Worksheets("BetaDataBase").Visible = True
    Worksheets("Controle").Cells(13, 14) = "SKAL OPDATERES"
    End
End If


If NrOfChangedRows = 0 Then
    Range(Cells(1, NumberOfFixedBETACol + NrOfBetaTools + 1), Cells(LastRowInDatabase + 1, (NumberOfFixedBETACol + NrOfBetaTools + 1) * 2)).Select
    Selection.Clear
End If
      
  
  
  
  
  
  
  
  
  
    
    
    
    
    
    


Worksheets("Controle").Activate
Cells(13, 14) = "KLAR"
            
            
    

    







End Sub
Attribute VB_Name = "Denne_projektmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)

  Worksheets("Controle").Activate
  Cells(13, 14) = "SKAL OPDATERES"

End Sub

Private Sub Workbook_Open()

  Worksheets("Controle").Activate
  Cells(13, 14) = "SKAL OPDATERES"


End Sub
Attribute VB_Name = "Functions"
Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean
    IsInArray = Not IsError(Application.Match(stringToBeFound, arr, 0))
End Function
Function WhereInArray(arr1 As Variant, vFind As Variant) As Variant

Dim i As Long
For i = LBound(arr1) To UBound(arr1)
    If arr1(i) = vFind Then
        WhereInArray = i
        Exit Function
    End If
Next i
WhereInArray = Null

End Function


Attribute VB_Name = "Globals"
Public Username As String
Public DagsDato As String
Public NrOfInstructing, NrOfHedgeLines, NrOfPortFoliosToHedge As Integer
Public NrOfApproving As Integer
Public NrOfCounterParties, NrOfBOs, NrOFHedgedCurrencies, ListCount As Integer
Public Instructing(), HedgedCurrencies() As String
Public Approving(), Email(), BOName(), TestArray(), PrintArray(), TestArrayDataBase(), TestArrayLimits() As String
Public CounterParties(), WorkbookPath, TempString As String
Public DataBase(), DataForDataBase(), LimitsData(), LimitsDataBETA() As Variant
Public LastRowInDatabase, LastRowInLimits, LastRowInBetaLimits, NrOfAccMissingInDatabase, NrOfAccMissingInLimits As Integer
Public NumberOfFixedCurrencyCol, NrOfEmptyLimits, NrOfChangedRows, NrOfSelectedBOs As Integer
Public NumberOfFixedBETACol, NrOfEmptyLimitsBETA, NrOfChangedRowsBETA As Integer
Public SelectedBO() As String
Public DataFormDetailed(), DataForMain() As Variant
Public DataFormDetailedCellCount, DataFormDetailedCellCount2, ListCountSelected() As Integer
Public WhereInTestArray, MainAccountSelectedDATA() As Variant
Public MainAccountSelected() As String
Public SubAccountsFound, SubAccountRowPlacement() As Integer
Public Trader, Controle, TradeDescription, ControlEmail, Broker As String
Public LastColBoSHeets, LastColOffset, Nr, NrOfMatchFound As Integer
Public DataForTradeCalValues(), DataForCurrTradeCalValues(), DataForTradeInstruction() As Variant ' done since the data contains lots of empty cells
Public DataForTradeCalStrings(), DataForCurrTradeCalStrings(), BaseCurrencies(), BaseCurrencyDates() As String
Public HedgeLinePlacementCount, NrOfIrrelevant, NrOfTradelines  As Integer
Public TempLimitValueArray(), TempLimitValue, TempContractValue, TempContSize, TempExchangeRate, TempCorrection, CurrencyTradeVariationCalArray(), CurrencyTradeVariationCalArray2(), AbsolutValueForTest(), AbsolutValueForTest2(), CurrencyTradeVariationCalArrayForTest(), CurrencyTradeVariationCalArrayForTest2() As Double
Public NrOfBaseCurrencies, NrOFVariations, NrOfDuplicates, NrOfBetaLines As Integer
Public TradeVariations(), VariationsTest() As String
Public TempCurrCal, BetaToolsInfoAndValues() As Variant
Public ValueDate(), BaseCurrForTrade(), VsCurrForTrade() As String
Public TradeValue() As Double
Public TradeType, VersionName, TradePath, DataDate, fPath, TradePlace, fName, MainBook, Name As String
Public NrOfBetaTools As Integer
Public FileCounter, LimitsRowsToDelete() As Integer
Public DataForLimitsDeletion(), DataForLimitsDeletionBETA()  As Variant
Public NrOfBetaHedgedPortfolios As Integer
Public DataForDataBaseBETA(), CurrencyCrosses() As Variant
Public TestArrayBeta() As String
Public SaveAndSendEmail, NrOfColumns, NrOfCurrenCyCrosses, ErrorCount, RollFound  As Integer
Public IsItAFuturesRoll, MarketsToBeRolled() As String
Public Ticker(), ShortName(), Operation(), TickerRoll(), ShortNameRoll(), OperationRoll() As String
Attribute VB_Name = "Module1"
Sub Makro1()
Attribute Makro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro1 Makro
'

'
    Columns("L:Q").Select
    Selection.NumberFormat = "#,##0"
End Sub
Attribute VB_Name = "Module2"
Sub Makro2()
Attribute Makro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro2 Makro
'

'
    Columns("L:V").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
End Sub
Sub Makro3()
Attribute Makro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro3 Makro
'

'
    Columns("J:J").Select
    Selection.NumberFormat = "@"
End Sub
Attribute VB_Name = "Module3"
Sub Makro4()
Attribute Makro4.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro4 Makro
'

'
    Range("D24:J24").Select
    With Selection.Font
        .Color = -16776961
        .TintAndShade = 0
    End With
End Sub
Sub Makro5()
Attribute Makro5.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro5 Makro
'

'
    Range("D23:G25").Select
    With Selection.Font
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
End Sub
Attribute VB_Name = "Module4"
Sub Makro6()
Attribute Makro6.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro6 Makro
'

'
    Range("T17").Select
    ActiveCell.FormulaR1C1 = "=ROUND(R[-12]C,0)"
    Range("L17").Select
    ChDir "C:\Users\mv\Desktop\Hemonto Power Solutions\Power Pivot"
    ActiveWorkbook.SaveAs Filename:= _
        "C:\Users\mv\Desktop\Hemonto Power Solutions\Power Pivot\Trading v.3.2.xlsm", _
        FileFormat:=xlOpenXMLWorkbookMacroEnabled, CreateBackup:=False
    Range("S18").Select
    Sheets("Controle").Select
    Range("L9").Select
    ActiveWorkbook.Save
    Range("I4").Select
End Sub
Attribute VB_Name = "Tools"
Option Explicit



Sub LaunchForm()


Dim ValueBox, i, k As Integer


Worksheets("Controle").Activate
With ActiveSheet
             NrOfBaseCurrencies = .Cells(.Rows.Count, "E").End(xlUp).Row - 19
End With

ReDim BaseCurrencyDates(NrOfBaseCurrencies, 2)

For i = 1 To NrOfBaseCurrencies
    BaseCurrencyDates(i, 1) = Cells(i + 19, 4)
    BaseCurrencyDates(i, 2) = Cells(i + 19, 5)
Next
    
NumberOfFixedCurrencyCol = 7
NumberOfFixedBETACol = 7

Application.ScreenUpdating = False


Worksheets("Input").Activate
With ActiveSheet
             NrOfInstructing = .Cells(.Rows.Count, "C").End(xlUp).Row - 3
             NrOfApproving = .Cells(.Rows.Count, "D").End(xlUp).Row - 3
             NrOfCounterParties = .Cells(.Rows.Count, "F").End(xlUp).Row - 3
             NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
             NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
             NrOfCurrenCyCrosses = .Cells(.Rows.Count, "L").End(xlUp).Row - 2
End With

'strictly not nessecary to make a loop for each of them, but it allows for more flexibility down the road
ReDim Instructing(NrOfInstructing, 2)
ReDim Initials(NrOfInstructing)
ReDim OrgPlace(NrOfInstructing)
ReDim HedgedCurrencies(NrOFHedgedCurrencies)

For i = 1 To NrOFHedgedCurrencies
    HedgedCurrencies(i) = Cells(i + 2, 11)
Next


For i = 0 To NrOfInstructing
    Instructing(i, 1) = Cells(i + 3, 3)
    Instructing(i, 2) = Cells(i + 3, 5)
    Initials(i) = Cells(i + 3, 7)
    OrgPlace(i) = Cells(i + 3, 8)
Next

ReDim Approving(NrOfApproving)
ReDim Email(NrOfApproving, 2)
For i = 0 To NrOfApproving
    Approving(i) = Cells(i + 3, 4)
    Email(i, 1) = Cells(i + 3, 5)
    Email(i, 2) = Cells(i + 3, 4)
Next
    
ReDim CounterParties(NrOfCounterParties)
For i = 0 To NrOfCounterParties
    CounterParties(i) = Cells(i + 3, 6)
Next


ReDim CurrencyCrosses(NrOfCurrenCyCrosses, 2)
For i = 1 To NrOfCurrenCyCrosses
    CurrencyCrosses(i, 1) = Left(Cells(i + 2, 12), 6)
    CurrencyCrosses(i, 2) = Cells(i + 2, 13)
Next



'+1 one is done to add an All (BO)
ReDim BOName(NrOfBOs + 1)

BOName(0) = "ALL (BO)"
For i = 1 To NrOfBOs + 1
    BOName(i) = Cells(i + 2, 9)
Next

'one is added here since it does not include 0, while the others does becuase they are for listboxes
ReDim BaseCurrencies(NrOfBOs + 1, 2)
For i = 1 To NrOfBOs + 1
    BaseCurrencies(i, 1) = Cells(i + 2, 9)
    BaseCurrencies(i, 2) = Cells(i + 2, 10)
Next



Worksheets("Controle").Activate
'Gathers beta tool and limits information
With ActiveSheet
             NrOfBetaTools = .Cells(.Rows.Count, "I").End(xlUp).Row - 19
End With
ReDim BetaToolsInfoAndValues(NrOfBetaTools, 14)
For i = 1 To NrOfBetaTools
    For k = 1 To 14
        BetaToolsInfoAndValues(i, k) = Cells(i + 19, 8 + k)
    Next
Next

Worksheets("BetaLimits").Activate
With ActiveSheet
    LastRowInBetaLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInBetaLimits = 0 Then
   LastRowInBetaLimits = 1
End If


ReDim LimitsDataBETA(LastRowInBetaLimits, NumberOfFixedBETACol + NrOfBetaTools)
For i = 1 To LastRowInBetaLimits
    For k = 1 To NumberOfFixedBETACol + NrOfBetaTools
        LimitsDataBETA(i, k) = Cells(i + 1, k)
    Next
Next
    





'used to get information from Limits sheet and store in array
Worksheets("Limits").Activate
With ActiveSheet
    LastRowInLimits = .Cells(.Rows.Count, "E").End(xlUp).Row - 1
End With

If LastRowInLimits = 0 Then
   LastRowInLimits = 1
End If

ReDim LimitsData(LastRowInLimits, NumberOfFixedCurrencyCol + NrOFHedgedCurrencies)
For i = 1 To LastRowInLimits
        For k = 1 To NumberOfFixedCurrencyCol + NrOFHedgedCurrencies
            LimitsData(i, k) = Cells(i + 1, k)
        Next
Next



If Worksheets("Controle").Cells(13, 14) <> "KLAR" Then
    ValueBox = MsgBox("Data er ikke godkendt til k|fffd|rsel." & Chr(13) & Chr(13) & "Opdater data og fors|fffd|g igen!", vbOKOnly + vbExclamation, "ADVARSEL!!") ' If folder exists, user get option to exit run or rerun contents in existing folder
    Worksheets("Controle").Activate
    End
End If








ValueBox = MsgBox("Har du husket at tjekke k|fffd|rsels datoen?" & Chr(13) & Chr(13) & "OBS: Der m|fffd| ALDRIG handles uden opdatering af data", vbYesNo + vbExclamation, "ADVARSEL!!") ' If folder exists, user get option to exit run or rerun contents in existing folder

If ValueBox = vbYes Then
        UserForm.Show
    Else
        End
End If




End Sub

Sub DoneWithListBoxSheet()

Worksheets("ListboxInput").Visible = xlVeryHidden
Worksheets("Controle").Activate

End Sub


Sub GenerateEmail()

Dim i, j, k, m, n As Integer
Dim xOutApp As Object
Dim xOutMail As Object
Dim xMailBody As String
Dim Signature As String
Dim WB As Workbook
Dim ValueBox As Integer
Dim ws As Worksheet


If SaveAndSendEmail = 0 Then
    Worksheets("Controle").Activate
    End
End If


Set WB = ActiveWorkbook
Application.DisplayAlerts = False
WB.Save
Application.DisplayAlerts = False

Checked:
DataDate = Date
DataDate = Format(Date, "dd.mm.yyyy")
MainBook = ActiveWorkbook.Name
ActiveWorkbook.Save

'VersionName set to "" by default to indiacate that it is the only run. This is only overwritten if an additional run is made
VersionName = ""

TradePath = "\" & TradeType & "\"



'directory components
WorkbookPath = Application.ActiveWorkbook.Path
fPath = WorkbookPath & TradePath & Broker & "\" & DataDate & "\"

If Dir(WorkbookPath & TradePath & Broker & "\" & DataDate, vbDirectory) = "" Then ' Checks if folder already exists, and if not, not it is created
    MkDir WorkbookPath & TradePath & Broker & "\" & DataDate
Else
    ValueBox = MsgBox("Mappen " & WorkbookPath & TradePath & TradePlace & "\" & DataDate & " synes allerede at eksistere." & Chr(13) & Chr(13) & "|fffd|nsker du at lave en yderligere k|fffd|rsel?", vbYesNo + vbExclamation, "ADVARSEL!!") ' If folder exists, user get option to exit run or rerun contents in existing folder
        If ValueBox = vbYes Then
            
            FileCounter = 0
            fName = Dir(fPath & "*.xlsx")
            Do While fName <> "" ' counts number of files in folder and use this to establish version number
                fName = Dir()
                FileCounter = FileCounter + 1
            Loop
            
            VersionName = " (V." & (FileCounter / 3) & ")"
            
            GoTo ContinueRun
            
            
        Else
            Exit Sub
        End If
End If

ContinueRun:



i = 0
Application.ScreenUpdating = False
For Each ws In ActiveWorkbook.Sheets
    i = i + 1
    Name = Workbooks(MainBook).Worksheets(i).Name
    Application.DisplayAlerts = False
        If TradeType = "Currency Spot and Forward Trading" Then
            If Name = "TradeCalculation" Or Name = "FXTradeInstruction" Or Name = "FXOrdersAllocation" Then
                Workbooks(MainBook).Worksheets(Name).Copy ' Smart method. Copies worksheet and generates new woorkbook with only this sheet
                'ActiveSheet.Protect "Risk", UserInterfaceOnly:=True ' Allows VBA to alter otherwise locked cells
                With ActiveSheet.UsedRange ' Ensures that the copied worksheet contains values and not functions while the formatting is kept
                    .Value = .Value
                End With
                ActiveWorkbook.SaveAs fPath & Name & VersionName & (".xlsx")
                ActiveWorkbook.Close
            End If
        End If
        
        If TradeType = "Futures and Options Trading" Then
            If Name = "BETATradeCalculation" Or Name = "FUTOrdersTrading" Or Name = "FUTOrdersAllocation" Then
                Workbooks(MainBook).Worksheets(Name).Copy ' Smart method. Copies worksheet and generates new woorkbook with only this sheet
                'ActiveSheet.Protect "Risk", UserInterfaceOnly:=True ' Allows VBA to alter otherwise locked cells
                With ActiveSheet.UsedRange ' Ensures that the copied worksheet contains values and not functions while the formatting is kept
                    .Value = .Value
                End With
                ActiveWorkbook.SaveAs fPath & Name & VersionName & (".xlsx")
                ActiveWorkbook.Close
            End If
        End If
        
        
        
        
Next


'Generates mails to broker
On Error Resume Next
Set xOutApp = CreateObject("Outlook.Application")
Set xOutMail = xOutApp.CreateItem(0)

With xOutMail
.display
End With
Signature = xOutMail.Body

If IsItAFuturesRoll <> "YES" Then
    xMailBody = "Dear All," & Chr(13) & Chr(13) & "Please find enclosed order(s) to be executed" & Chr(13) & Chr(13) & "Thank you in advance." & vbNewLine & Signature
                On Error Resume Next
Else
   xMailBody = "Dear All," & Chr(13) & Chr(13) & "Please find enclosed order(s) to be executed as spread trade" & Chr(13) & Chr(13) & "Thank you in advance." & vbNewLine & Signature
                On Error Resume Next
End If
                
fName = Dir(fPath & "*" & VersionName & ".xlsx")
With xOutMail
        .Importance = 2
        .CC = "nefo@lombardodier.com;rap@hemonto.com;trading@nefo.com"
        .Subject = TradeType
        .Body = xMailBody
        
        
        Do While fName <> ""
            If InStr(fName, "Allocation") Or InStr(fName, "Calculation") Then
            'If fName = "TradeCalculation" & VersionName & ".xlsx" Or fName = "FXOrdersAllocation" & VersionName & ".xlsx" Or "BETATradeCalculation" & VersionName & ".xlsx" Or fName = "FUTOrdersAllocation" & VersionName & ".xlsx" Then
                GoTo SkipAttachment
            End If
            .attachments.Add (fPath & fName)
SkipAttachment:
            fName = Dir()
        Loop

    If Broker = "Lombard Odier - Montreal" Then
            .To = "transec@lombardodier-transatlantic.com"
            fName = "FXOrdersAllocation" & VersionName & ".xlsx" ' adds allocation ark specifically for montreal
            .attachments.Add (fPath & fName)
            
            
    ElseIf Broker = "Lombard Odier - Geneve" Then
    
        If TradeType = "Currency Spot and Forward Trading" Then
            .To = "fxdesk@lombardodier.com;Forex-Advisory-Team@lombardodier.com"
        ElseIf TradeType = "Repo & T-Bills" Then
            .To = "tra-money-market@lombardodier.com"
        ElseIf TradeType = "Futures and Options Trading" Then
            .To = "frontofficederives@lombardodier.com"
        End If
        
    ElseIf Broker = "Lombard Odier - Singapore" Then
        .To = "???"
    ElseIf Broker = "Societe General - Z|fffd|rich" Then
        .To = "etdswiss@sgcib.com;tib.op.ias.derivatives@lombardodier.com"
    End If
        
    .display   'or use .Send
End With






'Generates mail to trading mailbox
On Error Resume Next
Set xOutApp = CreateObject("Outlook.Application")
Set xOutMail = xOutApp.CreateItem(0)

With xOutMail
.display
End With
Signature = xOutMail.Body


xMailBody = "Dear All," & Chr(13) & Chr(13) & "Please find enclosed order(s) to be booked " & Chr(13) & Chr(13) & vbNewLine & Signature
                On Error Resume Next
fName = Dir(fPath & "*" & VersionName & ".xlsx")
With xOutMail
        .Importance = 2
        .CC = "nefo@lombardodier.com;rap@hemonto.com"
        .Subject = TradeType
        .Body = xMailBody
        
        Do While fName <> ""
            If InStr(fName, "Calculation") Then
                GoTo SkipAttachment3
            End If
            .attachments.Add (fPath & fName)
SkipAttachment3:
            fName = Dir()
        Loop

        .To = "trading@nefo.com"
        .attachments.Add ActiveWorkbook.FullName
        
    .display   'or use .Send
End With








If Trader <> "Anders Nordb|fffd|k" And IsItAFuturesRoll <> "YES" Then
fName = Dir(fPath & "*" & VersionName & ".xlsx")
    
    'Generates mail to approving person
    On Error Resume Next
    Set xOutApp = CreateObject("Outlook.Application")
    Set xOutMail = xOutApp.CreateItem(0)
    
    With xOutMail
    .display
    End With
    Signature = xOutMail.Body
    
    
    xMailBody = "Hej " & Controle & Chr(13) & Chr(13) & "Jeg har en handel til din godkendelse " & Chr(13) & Chr(13) & vbNewLine & Signature
                    On Error Resume Next
    
    With xOutMail
            .Importance = 2
            .CC = "trading@nefo.com"
            .Subject = "GODKENDELSE: " & TradeType
            .Body = xMailBody
            
        Do While fName <> ""
            .attachments.Add (fPath & fName)
            fName = Dir()
        Loop
            
            
            .To = ControlEmail
        .display   'or use .Send
    End With

End If


    
    
On Error GoTo 0
Set xOutMail = Nothing
Set xOutApp = Nothing




End Sub


Sub HideBoSheets()

Dim i As Integer
Dim ws As Worksheet

Application.ScreenUpdating = False

' Establishing number of BOs and loading them
Worksheets("Input").Activate
With ActiveSheet
    NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 3
    NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
End With


ReDim BOName(NrOfBOs)
For i = 0 To NrOfBOs
    BOName(i) = Cells(i + 3, 9)
Next



For Each ws In Worksheets
    For i = 0 To NrOfBOs
        If ws.Name = BOName(i) Then
           If ws.Visible = True Then
                ws.Visible = xlSheetVeryHidden
           Else
               ws.Visible = True
           End If
        End If
    Next
Next

Worksheets("Controle").Activate

Application.ScreenUpdating = False

End Sub


Sub HideDataBaseSheets()

Application.ScreenUpdating = False

If Worksheets("DataBase").Visible = True Then
    Worksheets("DataBase").Visible = xlVeryHidden
Else
    Worksheets("DataBase").Visible = True
End If


If Worksheets("BetaDataBase").Visible = True Then
    Worksheets("BetaDataBase").Visible = xlVeryHidden
Else
    Worksheets("BetaDataBase").Visible = True
End If

Worksheets("Controle").Activate
Application.ScreenUpdating = True

End Sub




Public Sub SendTradingFile()



Dim i, j, k, m, n As Integer
Dim xOutApp As Object
Dim xOutMail As Object
Dim xMailBody As String
Dim Signature As String
Dim WB As Workbook
Dim ValueBox As Integer
Dim ws As Worksheet


On Error Resume Next
Set xOutApp = CreateObject("Outlook.Application")
Set xOutMail = xOutApp.CreateItem(0)

With xOutMail
.display
End With
Signature = xOutMail.Body


xMailBody = "Dear All," & Chr(13) & Chr(13) & "Hereby updated file" & Chr(13) & Chr(13) & vbNewLine & Signature
                On Error Resume Next
With xOutMail
        .Importance = 2
        .Subject = "Tradingprogram"
        .Body = xMailBody
        .SentOnBehalfOfName = "Trading@nefo.com"
        .To = "trading@nefo.com"
        .attachments.Add ActiveWorkbook.FullName
        
    .display   'or use .Send
End With


    
    
On Error GoTo 0
Set xOutMail = Nothing
Set xOutApp = Nothing


End Sub






Attribute VB_Name = "TradeCal"
Public Sub CalculateTrades()



Dim i, j, k, m, n, ValueBox, LastRow, c As Integer

SubAccountsFound = 0
Dim Found As Integer




For k = 0 To ListCount
    For i = 1 To DataFormDetailedCellCount + 1
        If MainAccountSelected(k) = Cells(i, 2) & Cells(i, 3) Then
            SubAccountsFound = SubAccountsFound + 1
            ReDim Preserve SubAccountRowPlacement(SubAccountsFound)
            SubAccountRowPlacement(SubAccountsFound) = i
        End If
    Next
Next




' Establishing number of BOs and loading them
Worksheets("Input").Activate
'With ActiveSheet
 '   NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 2
  '  NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
'End With

'ReDim BOName(NrOfBOs)
'For i = 0 To NrOfBOs
 '   BOName(i) = Cells(i + 3, 9)
'Next

' Used as colmun push
LastColOffset = NrOFHedgedCurrencies + 6

'Establishes whish currencies to hedge
ReDim HedgedCurrencies(NrOFHedgedCurrencies)
For i = 1 To NrOFHedgedCurrencies
    HedgedCurrencies(i) = Cells(i + 2, 11)
Next




' Counts Lines needed for data storage of portfolio values in multidimensional array
NrOfHedgeLines = 0
NrOfPortFoliosToHedge = 0

For Each ws In Worksheets
    For i = 0 To NrOfBOs + 1
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
           NrOfHedgeLines = NrOfHedgeLines + Cells(4, 3) + Cells(5, 3)
           NrOfPortFoliosToHedge = NrOfPortFoliosToHedge + Cells(3, 3)
        End If
    Next
Next


ReDim DataForTradeCalStrings(NrOfPortFoliosToHedge, 2)
ReDim DataForTradeCalValues(NrOfPortFoliosToHedge, NrOFHedgedCurrencies + 1)

ReDim DataForCurrTradeCalStrings(NrOfHedgeLines, 2)
ReDim DataForCurrTradeCalValues(NrOfHedgeLines, (NrOFHedgedCurrencies * 2) + 1)

PlacementCount = 0
HedgeLinePlacementCount = 0

For Each ws In Worksheets
    For i = 0 To NrOfBOs + 1
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
                'For k = 1 To Cells(3, 3)
                    'PlacementCount = PlacementCount + 1
                    'DataForTradeCalStrings(PlacementCount, 1) = Cells(2, 2) & Cells(10 + k, 3)
                    'DataForTradeCalStrings(PlacementCount, 2) = Cells(10 + k, 2)
                     '   For j = 1 To NrOFHedgedCurrencies + 1
                      '      DataForTradeCalValues(PlacementCount, j) = Cells(10 + k, 3 + j)
                       ' Next
               'Next
                
                For n = 1 To Cells(4, 3) + Cells(5, 3)
                    HedgeLinePlacementCount = HedgeLinePlacementCount + 1
                    DataForCurrTradeCalStrings(HedgeLinePlacementCount, 1) = Cells(2, 2) & Cells(10 + n, LastColOffset)
                    DataForCurrTradeCalStrings(HedgeLinePlacementCount, 2) = Cells(10 + n, LastColOffset)
                        For j = 1 To (NrOFHedgedCurrencies * 2) + 1
                            DataForCurrTradeCalValues(HedgeLinePlacementCount, j) = Cells(10 + n, LastColOffset + 2 + j)
                        Next
                    DataForCurrTradeCalValues(HedgeLinePlacementCount, 0) = Cells(10 + n, LastColOffset + 2)
                Next
        End If
    Next
Next



TempLimitValue = 0

NrOfMatchFound = 0
NrOfIrrelevant = 0

Worksheets("TradeCalculation").Activate
Cells.Clear

ReDim MainAccountSelectedDATA(SubAccountsFound, 4 + NrOFHedgedCurrencies)


For k = 1 To SubAccountsFound
        For j = 0 To (5 + NrOFHedgedCurrencies) - 1
            MainAccountSelectedDATA(k - 1, j) = Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), j + 1)
            Cells(k, j + 1) = MainAccountSelectedDATA(k - 1, j)
        Next
        

            Cells(k, 5).NumberFormat = "0.00%"
             Found = 0
             ErrorCount = 0
            
                'Finds portfolio exposure
                For m = 1 To NrOfHedgeLines
                    If DataForCurrTradeCalStrings(m, 1) = MainAccountSelectedDATA(k - 1, 1) & MainAccountSelectedDATA(k - 1, 3) Then
                
            
                    ReDim TempLimitValueArray(2)
                    For o = 1 To NrOFHedgedCurrencies
                            If IsNumeric(Cells(k, 5 + o)) Then
                                    Cells(k, LastColOffset + 1) = DataForCurrTradeCalValues(m, 0)
                                    Cells(k, LastColOffset + 4) = DataForCurrTradeCalValues(m, o + NrOFHedgedCurrencies)
                                    Cells(k, LastColOffset + 5) = DataForCurrTradeCalValues(m, o)
                                    Cells(k, LastColOffset + 3) = HedgedCurrencies(o)
                                    Cells(k, 5 + o).NumberFormat = "0.00%"
                                    TempLimitValue = Cells(k, 5 + o)
                                    
                                    Found = 1
                                        'Manuel EUR override of APEX for Mulle
                                        If MainAccountSelectedDATA(k - 1, 1) & MainAccountSelectedDATA(k - 1, 2) = "Mulle (BO)Apex" Then ' Manual override of apex for mulle. Converts entire exposure into EUR
                                            Cells(k, LastColOffset + 4) = DataForCurrTradeCalValues(m, 0)
                                        End If

                                    
                                         
                            End If
                    Next
                            
                            If k = 2 Then ' 2 since 1 will equal headers and therefor not be found, i.e. the code would not get to this point
                                'For n = 1 To NrOFHedgedCurrencies
                                 '   Cells(1, LastColOffset + n + 1) = HedgedCurrencies(n)
                                'Next
                                    Cells(1, LastColOffset + 1) = "Market Value (In BO Base Currency"
                                    Cells(1, LastColOffset + 2) = "Base Currency"
                                    Cells(1, LastColOffset + 3) = "Currency"
                                    Cells(1, LastColOffset + 4) = "Long Exposure By Relevant Curr"
                                    Cells(1, LastColOffset + 5) = "Short Exposure By Relevant Curr"
                                    Cells(1, LastColOffset + 6) = "Net Exposure"
                                    Cells(1, LastColOffset + 7) = "Net Exposure(%)"
                                    Cells(1, LastColOffset + 8) = "Neutral Exposure"
                                    Cells(1, LastColOffset + 9) = "Needed Change"
                                    Cells(1, LastColOffset + 10) = "New Short Exposure"
                                    Cells(1, LastColOffset + 11) = "New Net Exposure"
                                    
                            End If
                            
                            If Found = 0 Then ' skips all of the beneath if there is no active limits
                                Range(Cells(k, LastColOffset + 2), Cells(k, LastColOffset + 11)) = "N/A"
                                Cells(k, LastColOffset + 1) = "N/A"
                                NrOfIrrelevant = NrOfIrrelevant + 1
                                GoTo IrrelecantAccount
                            End If
                            
                            
                            For j = 1 To NrOfBOs + 1
                                If BaseCurrencies(j, 1) = Cells(k, 2) Then
                                      Cells(k, LastColOffset + 2) = BaseCurrencies(j, 2)
                                End If
                            Next
                            
                            
                    Cells(k, LastColOffset + 6) = Cells(k, LastColOffset + 4) + Cells(k, LastColOffset + 5)
                    If Cells(k, LastColOffset + 1) = 0 Or Cells(k, LastColOffset + 6) = "" Then
                                    ValueBox = MsgBox("Der synes ikke at v|fffd|re nogen v|fffd|rdi i: " & Chr(13) & (Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), 2) & " - " & Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), 4)) & Chr(13) & Chr(13) & "|fffd|nsker du er tvinge k|fffd|rslen igennem?", vbYesNo + vbExclamation, "ADVARSEL")
            
                                    If ValueBox = 7 Then
                                        End
                                    Else
                                        Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 11)) = "N/A"
                                        Range(Cells(k, 1), Cells(k, LastColOffset + 11)).Font.Color = -16776961
                                        NrOfIrrelevant = NrOfIrrelevant + 1
                                        GoTo IrrelecantAccount
                                    End If
                                                   
                    Else
                    Cells(k, LastColOffset + 7) = Cells(k, LastColOffset + 6) / Cells(k, LastColOffset + 4)
                    End If
                    
                    Cells(k, LastColOffset + 8) = (1 - Cells(k, 5)) * Cells(k, LastColOffset + 4)
                    TempLimitValueArray(1) = (TempLimitValue) + (1 - Cells(k, 5))
                    TempLimitValueArray(2) = (TempLimitValue * -1) + (1 - Cells(k, 5))
                    
                    If Cells(k, LastColOffset + 7) > TempLimitValueArray(1) Or Cells(k, LastColOffset + 7) < TempLimitValueArray(2) Then
                        Cells(k, LastColOffset + 9) = Application.WorksheetFunction.Round(Cells(k, LastColOffset + 8) - Cells(k, LastColOffset + 6), 0)
                    Else
                        Cells(k, LastColOffset + 9) = 0
                    End If
                    
                    Cells(k, LastColOffset + 10) = Cells(k, LastColOffset + 9) + Cells(k, LastColOffset + 5)
                    Cells(k, LastColOffset + 11) = Cells(k, LastColOffset + 9) + Cells(k, LastColOffset + 6)
                    Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 11)).NumberFormat = "#,##0.0"
                    Range(Cells(k, LastColOffset + 7), Cells(k, LastColOffset + 8)).NumberFormat = "0.00%"
                    Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 11)).HorizontalAlignment = xlCenter
                    Range(Cells(k, 1), Cells(k, LastColOffset + 11)).Font.ThemeColor = xlThemeColorLight1
                    
                    
                    
                    
                    
                    
                End If
    Next
IrrelecantAccount:
Next






End Sub

Public Sub BETACalculateTrades()


Dim i, j, k, m, n, ValueBox, LastRow, c As Integer

SubAccountsFound = 0
Dim Found, NrofCurrencyLinesToSkip As Integer




For k = 0 To ListCount
    For i = 1 To DataFormDetailedCellCount + 1
        If MainAccountSelected(k) = Cells(i, 2) & Cells(i, 3) Then
            SubAccountsFound = SubAccountsFound + 1
            ReDim Preserve SubAccountRowPlacement(SubAccountsFound)
            SubAccountRowPlacement(SubAccountsFound) = i
        End If
    Next
Next




' Establishing number of BOs and loading them
'Worksheets("Input").Activate
'With ActiveSheet
 '   NrOfBOs = .Cells(.Rows.Count, "I").End(xlUp).Row - 2
  '  NrOFHedgedCurrencies = .Cells(.Rows.Count, "K").End(xlUp).Row - 2
'End With

'ReDim BOName(NrOfBOs)
'For i = 0 To NrOfBOs
 '   BOName(i) = Cells(i + 3, 9)
'Next

' Used as colmun push
LastColOffset = NrOFHedgedCurrencies + 6 ' Note that this is nroffixed currencies. This is because it is in reference to placement in the BO Sheet

'Establishes whish currencies to hedge
'ReDim HedgedCurrencies(NrOFHedgedCurrencies)
'For i = 1 To NrOFHedgedCurrencies
 '   HedgedCurrencies(i) = Cells(i + 2, 11)
'Next




' Counts Lines needed for data storage of portfolio values in multidimensional array
NrOfHedgeLines = 0
NrOfPortFoliosToHedge = 0

For Each ws In Worksheets
    For i = 0 To NrOfBOs + 1
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
           NrOfHedgeLines = NrOfHedgeLines + Cells(6, 12)
           NrOfPortFoliosToHedge = NrOfPortFoliosToHedge + Cells(3, 3)
        End If
    Next
Next


ReDim DataForTradeCalStrings(NrOfPortFoliosToHedge, 2)
ReDim DataForTradeCalValues(NrOfPortFoliosToHedge, NrOfBetaTools + 1)

ReDim DataForCurrTradeCalStrings(NrOfHedgeLines, 2)
ReDim DataForCurrTradeCalValues(NrOfHedgeLines, (NrOfBetaTools * 2) + 2)

PlacementCount = 0
HedgeLinePlacementCount = 0

For Each ws In Worksheets
    For i = 0 To NrOfBOs + 1
        If ws.Name = BOName(i) Then
           Worksheets(BOName(i)).Activate
           NrofCurrencyLinesToSkip = Cells(4, 3) + Cells(5, 3) + 2
                'For k = 1 To Cells(3, 3)
                 '   PlacementCount = PlacementCount + 1
                  '  DataForTradeCalStrings(PlacementCount, 1) = Cells(2, 2) & Cells(10 + k, 3)
                   ' DataForTradeCalStrings(PlacementCount, 2) = Cells(10 + k, 2)
                    '    For j = 1 To NrOfBetaTools + 1
                     '       DataForTradeCalValues(PlacementCount, j) = Cells(10 + k, 3 + j)
                      '  Next
                'Next
                
                For n = 1 To Cells(6, 12)
                    HedgeLinePlacementCount = HedgeLinePlacementCount + 1
                    DataForCurrTradeCalStrings(HedgeLinePlacementCount, 1) = Cells(2, 2) & Cells(10 + NrofCurrencyLinesToSkip + n, LastColOffset)
                    DataForCurrTradeCalStrings(HedgeLinePlacementCount, 2) = Cells(10 + NrofCurrencyLinesToSkip + n, LastColOffset)
                        For j = 1 To (NrOfBetaTools * 2)
                            DataForCurrTradeCalValues(HedgeLinePlacementCount, j) = Cells(10 + NrofCurrencyLinesToSkip + n, LastColOffset + 3 + j)
                        Next
                    DataForCurrTradeCalValues(HedgeLinePlacementCount, 0) = Cells(10 + NrofCurrencyLinesToSkip + n, LastColOffset + 2)
                    DataForCurrTradeCalValues(HedgeLinePlacementCount, (NrOfBetaTools * 2) + 1) = Cells(10 + NrofCurrencyLinesToSkip + n, LastColOffset + 3)
                Next
        End If
    Next
Next



TempLimitValue = 0

NrOfMatchFound = 0
NrOfIrrelevant = 0

Worksheets("BETATradeCalculation").Activate
Cells.Clear


ReDim MainAccountSelectedDATA(SubAccountsFound, 4 + NrOfBetaTools)




If IsItAFuturesRoll <> "YES" Then
    For k = 1 To SubAccountsFound
    TempLimitValue = 0
    TempExchangeRate = 0
    TempCorrection = 0
    
        For j = 0 To (5 + NrOfBetaTools) - 1
            MainAccountSelectedDATA(k - 1, j) = Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), j + 1)
            Cells(k, j + 1) = MainAccountSelectedDATA(k - 1, j)
        Next
        

            Cells(k, 5).NumberFormat = "0.00%"
             Found = 0
            
                'Finds portfolio exposure
                For m = 1 To NrOfHedgeLines
                    If DataForCurrTradeCalStrings(m, 1) = MainAccountSelectedDATA(k - 1, 1) & MainAccountSelectedDATA(k - 1, 3) Then
                
            
                    ReDim TempLimitValueArray(2)
                    For o = 1 To NrOfBetaTools
                            If IsNumeric(Cells(k, 5 + o)) Then
                                    Cells(k, LastColOffset + 1) = DataForCurrTradeCalValues(m, 0)
                                    Cells(k, LastColOffset + 4) = DataForCurrTradeCalValues(m, 0)
                                    Cells(k, LastColOffset + 5) = DataForCurrTradeCalValues(m, o)
                                    Cells(k, LastColOffset + 6) = DataForCurrTradeCalValues(m, (NrOfBetaTools * 2) + 1)
                                    Cells(k, LastColOffset + 12) = BetaToolsInfoAndValues(o, 2)
                                    Cells(k, LastColOffset + 3) = BetaToolsInfoAndValues(o, 5)
                                    Cells(k, LastColOffset + 13) = BetaToolsInfoAndValues(o, 6)
                                    Cells(k, LastColOffset + 16) = BetaToolsInfoAndValues(o, 7)
                                    
                                    
                                    Cells(k, 5 + o).NumberFormat = "0.00%"
                                    TempLimitValue = Cells(k, 5 + o)
                                    TempContractValue = BetaToolsInfoAndValues(o, 4)
                                    TempExchangeRate = 1 ' It will be = 1 until otherwise proven
                                    
                                    Found = 1
                                         
                            End If
                    Next
        
                    If k = 2 Then ' 2 since 1 will equal headers and therefor not be found, i.e. the code would not get to this point
                                        'For n = 1 To NrOFHedgedCurrencies
                                         '   Cells(1, LastColOffset + n + 1) = HedgedCurrencies(n)
                                        'Next
                                            Cells(1, LastColOffset + 1) = "Market Value (In BO Base Currency"
                                            Cells(1, LastColOffset + 2) = "Base Currency"
                                            Cells(1, LastColOffset + 3) = "Currency"
                                            Cells(1, LastColOffset + 4) = "Long Exposure By Relevant Index"
                                            Cells(1, LastColOffset + 5) = "Short Exposure By Relevant Index"
                                            Cells(1, LastColOffset + 6) = "Net Exposure"
                                            Cells(1, LastColOffset + 7) = "Net Exposure(%)"
                                            Cells(1, LastColOffset + 8) = "Neutral Exposure"
                                            Cells(1, LastColOffset + 9) = "Needed Change (nr of contr.)"
                                            Cells(1, LastColOffset + 10) = "New Short Exposure"
                                            Cells(1, LastColOffset + 11) = "New Net Exposure"
                                            Cells(1, LastColOffset + 12) = "Ticker"
                                            Cells(1, LastColOffset + 13) = "Short Name"
                                            Cells(1, LastColOffset + 14) = "Quantity"
                                            Cells(1, LastColOffset + 15) = "Notional Amount (QC)"
                                            Cells(1, LastColOffset + 16) = "Contract Size"
                                            
                    End If
                    
                    
                    If Found = 0 And k <> 1 Then ' skips all of the beneath if there is no active limits
                            Range(Cells(k, LastColOffset + 2), Cells(k, LastColOffset + 16)) = "N/A"
                            Cells(k, LastColOffset + 1) = "N/A"
                            NrOfIrrelevant = NrOfIrrelevant + 1
                            GoTo IrrelecantAccount
                    End If
                    
                    For j = 1 To NrOfBOs + 1
                            If BaseCurrencies(j, 1) = Cells(k, 2) Then
                                    Cells(k, LastColOffset + 2) = BaseCurrencies(j, 2)
                            End If
                    Next
                    
                    If Cells(k, LastColOffset + 2) <> Cells(k, LastColOffset + 3) Then
                        For i = 1 To NrOfCurrenCyCrosses
                            If CurrencyCrosses(i, 1) = Cells(k, LastColOffset + 2) & Cells(k, LastColOffset + 3) Then
                                TempExchangeRate = CurrencyCrosses(i, 2)
                            End If
                        Next
                    End If
                        
                    
                    

                If Cells(k, LastColOffset + 1) = 0 Or Cells(k, LastColOffset + 6) = "" Then
                                ValueBox = MsgBox("Der synes ikke at v|fffd|re nogen v|fffd|rdi i: " & Chr(13) & (Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), 2) & " - " & Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), 4)) & Chr(13) & Chr(13) & "|fffd|nsker du er tvinge k|fffd|rslen igennem?", vbYesNo + vbExclamation, "ADVARSEL")
            
                        If ValueBox = 7 Then
                                End
                        Else
                                Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 16)) = "N/A"
                                Range(Cells(k, 1), Cells(k, LastColOffset + 16)).Font.Color = -16776961
                                NrOfIrrelevant = NrOfIrrelevant + 1
                                GoTo IrrelecantAccount
                        End If
                                                   
                Else
                    Cells(k, LastColOffset + 7) = Cells(k, LastColOffset + 6) / Cells(k, LastColOffset + 4)
                End If
                Cells(k, LastColOffset + 8) = (1 - Cells(k, 5)) * Cells(k, LastColOffset + 4)
                            
                TempLimitValueArray(1) = (TempLimitValue)
                TempLimitValueArray(2) = (TempLimitValue * -1)
                            
                If Cells(k, LastColOffset + 7) > TempLimitValueArray(1) Or Cells(k, LastColOffset + 7) < TempLimitValueArray(2) Then
                         TempCorrection = Application.WorksheetFunction.Round(Cells(k, LastColOffset + 8) - Cells(k, LastColOffset + 6), 0)
                         Cells(k, LastColOffset + 9) = Application.WorksheetFunction.Round(TempCorrection / (TempContractValue / TempExchangeRate), 0)
                         Cells(k, LastColOffset + 14) = Cells(k, LastColOffset + 9) * Cells(k, LastColOffset + 16)
                         Cells(k, LastColOffset + 15) = Application.WorksheetFunction.Round(Cells(k, LastColOffset + 9) * (TempContractValue), 0)
                Else
                         Cells(k, LastColOffset + 9) = 0
                         Cells(k, LastColOffset + 14) = "N/A"
                         Cells(k, LastColOffset + 15) = "N/A"
                End If
                            
                Cells(k, LastColOffset + 10) = (Cells(k, LastColOffset + 9) * (TempContractValue / TempExchangeRate)) + Cells(k, LastColOffset + 5)
                Cells(k, LastColOffset + 11) = (Cells(k, LastColOffset + 9) * (TempContractValue / TempExchangeRate)) + Cells(k, LastColOffset + 6)
                Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 16)).NumberFormat = "#,##0.0"
                Range(Cells(k, LastColOffset + 7), Cells(k, LastColOffset + 8)).NumberFormat = "0.00%"
                Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 16)).HorizontalAlignment = xlCenter
                Range(Cells(k, 1), Cells(k, LastColOffset + 16)).Font.ThemeColor = xlThemeColorLight1
                    
                    
                    
                End If
                Next
IrrelecantAccount:
    Next
Else ' futures roll
    'Establises which futures are to be rolled
    For i = 1 To NrOfBetaTools
        If BetaToolsInfoAndValues(i, 9) <> "" Then
            j = j + 1
            ReDim Preserve MarketsToBeRolled(j)
            MarketsToBeRolled(j) = BetaToolsInfoAndValues(i, 1)
        End If
    Next



    ' does the actual calculation
    For k = 1 To SubAccountsFound
    TempExchangeRate = 0
    TempCorrection = 0
    TempContSize = 1
    
        For j = 0 To (5 + NrOfBetaTools) - 1
            MainAccountSelectedDATA(k - 1, j) = Worksheets("ListboxInput").Cells(SubAccountRowPlacement(k), j + 1)
            Cells(k, j + 1) = MainAccountSelectedDATA(k - 1, j)
        Next
        
        Found = 0
        For o = 1 To NrOfBetaTools
                    If IsNumeric(Cells(k, 5 + o)) Then

                            TempString = BetaToolsInfoAndValues(o, 1)
                                If IsInArray(TempString, MarketsToBeRolled) Then
                                        
                                        TempContSize = BetaToolsInfoAndValues(o, 7)
                                        TempContractValue = BetaToolsInfoAndValues(o, 4)
                                        TempExchangeRate = 1 ' It will be = 1 until otherwise proven
                                        Cells(k, LastColOffset + 1) = BetaToolsInfoAndValues(o, 1)
                                        Cells(k, LastColOffset + 3) = BetaToolsInfoAndValues(o, 5)
                                        Cells(k, LastColOffset + 4) = BetaToolsInfoAndValues(o, 2)
                                        Cells(k, LastColOffset + 5) = BetaToolsInfoAndValues(o, 9)
                                        Cells(k, LastColOffset + 12) = BetaToolsInfoAndValues(o, 2)
                                        Cells(k, LastColOffset + 13) = BetaToolsInfoAndValues(o, 6)
                                        Cells(k, LastColOffset + 16) = BetaToolsInfoAndValues(o, 7)
                                        Cells(k, LastColOffset + 17) = BetaToolsInfoAndValues(o, 13)
                                        
                                        
                                        Found = 1
                                        
                                        
                                        For m = 1 To NrOfHedgeLines
                                            If DataForCurrTradeCalStrings(m, 1) = MainAccountSelectedDATA(k - 1, 1) & MainAccountSelectedDATA(k - 1, 3) Then
                                               Cells(k, LastColOffset + 6) = DataForCurrTradeCalValues(m, o + NrOfBetaTools) / TempContSize
                                               Cells(k, LastColOffset + 14) = DataForCurrTradeCalValues(m, o + NrOfBetaTools)
                                               Cells(k, LastColOffset + 15) = Application.WorksheetFunction.Round(BetaToolsInfoAndValues(o, 4) * Cells(k, LastColOffset + 6), 0)
                                            End If
                                        Next
                         
                                End If

                    End If
        Next
            
            
         If k = 2 Then ' 2 since 1 will equal headers and therefor not be found, i.e. the code would not get to this point
                        Cells(1, LastColOffset + 1) = "Market To Roll"
                        Cells(1, LastColOffset + 2) = "Base Currency"
                        Cells(1, LastColOffset + 3) = "Currency"
                        Cells(1, LastColOffset + 4) = "Current Ticker"
                        Cells(1, LastColOffset + 5) = "New Ticker"
                        Cells(1, LastColOffset + 6) = "NrOfContracts"
                        Cells(1, LastColOffset + 7) = "Net Exposure(%)"
                        Cells(1, LastColOffset + 8) = "Neutral Exposure"
                        Cells(1, LastColOffset + 9) = "Needed Change (nr of contr.)"
                        Cells(1, LastColOffset + 10) = "New Short Exposure"
                        Cells(1, LastColOffset + 11) = "New Net Exposure"
                        Cells(1, LastColOffset + 12) = "Ticker"
                        Cells(1, LastColOffset + 13) = "Short Name"
                        Cells(1, LastColOffset + 14) = "Quantity"
                        Cells(1, LastColOffset + 15) = "Notional Amount (QC)"
                        Cells(1, LastColOffset + 16) = "Contract Size"
                        Cells(1, LastColOffset + 17) = "New Short name"
         End If
            
            
         If Found = 0 And k <> 1 Then  ' skips all of the beneath if there is no active limits
                    Range(Cells(k, LastColOffset + 2), Cells(k, LastColOffset + 17)) = "N/A"
                    Cells(k, LastColOffset + 1) = "N/A"
                    NrOfIrrelevant = NrOfIrrelevant + 1
                    GoTo IrrelecantAccountRoll
         End If
            
         For j = 1 To NrOfBOs + 1
                If BaseCurrencies(j, 1) = Cells(k, 2) Then
                    Cells(k, LastColOffset + 2) = BaseCurrencies(j, 2)
                End If
         Next
        

                            
        If Cells(k, LastColOffset + 2) <> Cells(k, LastColOffset + 3) Then
                        For i = 1 To NrOfCurrenCyCrosses
                            If CurrencyCrosses(i, 1) = Cells(k, LastColOffset + 2) & Cells(k, LastColOffset + 3) Then
                                    TempExchangeRate = CurrencyCrosses(i, 2)
                            End If
                        Next
        End If
                                    
                                
        Cells(k, LastColOffset + 9) = 0 - Cells(k, LastColOffset + 6)
        Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 17)).NumberFormat = "#,##0.0"
        Range(Cells(k, LastColOffset + 7), Cells(k, LastColOffset + 8)).NumberFormat = "0.00%"
        Range(Cells(k, LastColOffset + 1), Cells(k, LastColOffset + 17)).HorizontalAlignment = xlCenter
        Range(Cells(k, 1), Cells(k, LastColOffset + 16)).Font.ThemeColor = xlThemeColorLight1
                                
    
IrrelecantAccountRoll:
    Next
End If


End Sub


Public Sub TradeInstruction()


Dim i, j, k, m, n, NrofTradesFound, ValueBox As Integer
Dim TempString As String
Dim USDDKKExchange As Double


With ActiveSheet
    LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
End With


NrOfTradelines = SubAccountsFound


ReDim DataForTradeInstruction(NrOfTradelines - NrOfIrrelevant, LastCol)

m = 0
For i = 1 To NrOfTradelines
    If Cells(i + 1, 7 + NrOFHedgedCurrencies) <> "N/A" Then
    m = m + 1
        For k = 1 To LastCol
            DataForTradeInstruction(m, k) = Cells(i + 1, k)
        Next
    End If
Next



Worksheets("FXOrdersAllocation").Activate
Cells.Clear

Cells(1, 1) = "Forex orders - NEFO - ALLOCATION"
Cells(3, 1) = "SWAP"
Cells(3, 2) = "SPOT"
Cells(3, 9) = "Forward"
Cells(4, 2) = "Nocli"
Cells(4, 3) = "NoDos"
Cells(4, 4) = "Operation"
Cells(4, 5) = "Currency"
Cells(4, 6) = "Amount"
Cells(4, 7) = "Vs Currency"
Cells(4, 8) = "Value date"
Cells(4, 9) = "Nocli"
Cells(4, 10) = "NoDos"
Cells(4, 11) = "Operation"
Cells(4, 12) = "Currency"
Cells(4, 13) = "Amount"
Cells(4, 14) = "Vs Currency"
Cells(4, 15) = "Value date"
Cells(4, 16) = "DKK Nominal"

NrofTradesFound = 0
NrOFVariations = 0
NrOfDuplicates = 0

ReDim TradeVariations(1)
ReDim ValueDate(1)
ReDim BaseCurrForTrade(1)
ReDim VsCurrForTrade(1)
ReDim VariationsTest(NrOfTradelines - NrOfIrrelevant, 4)
ReDim AbsolutValueForTest(NrOfTradelines - NrOfIrrelevant)

For m = 1 To NrOfCurrenCyCrosses
        If CurrencyCrosses(m, 1) = "USDDKK" Then
                   USDDKKExchange = CurrencyCrosses(m, 2)
        End If
Next


For i = 1 To NrOfTradelines - NrOfIrrelevant
'VariationsTest(i, 1) = Cells(4 + NrofTradesFound, 12) & Cells(4 + NrofTradesFound, 14) & Cells(4 + NrofTradesFound, 15)

    If DataForTradeInstruction(i, LastColOffset + 9) <> 0 Then
        NrofTradesFound = NrofTradesFound + 1
        Cells(4 + NrofTradesFound, 12) = DataForTradeInstruction(i, LastColOffset + 2)
        Cells(4 + NrofTradesFound, 13) = Abs(DataForTradeInstruction(i, LastColOffset + 9))
        Cells(4 + NrofTradesFound, 13).NumberFormat = "#,##0.0"
        Cells(4 + NrofTradesFound, 16).NumberFormat = "#,##0.0"
        Cells(4 + NrofTradesFound, 14) = DataForTradeInstruction(i, LastColOffset + 3)
        If DataForTradeInstruction(i, LastColOffset + 9) < 0 Then ' Buy and sell beneath might seem reversed, this however is because operation is made relative to base currency
            Cells(4 + NrofTradesFound, 11) = "BUY"
        Else
            Cells(4 + NrofTradesFound, 11) = "SELL"
        End If
        Cells(4 + NrofTradesFound, 9) = Left(DataForTradeInstruction(i, 1), 6)
        TempString = Right(DataForTradeInstruction(i, 1), 2)
        Cells(4 + NrofTradesFound, 10).NumberFormat = "@"
        Cells(4 + NrofTradesFound, 10) = TempString
        
        For k = 1 To NrOfBaseCurrencies
            If Cells(4 + NrofTradesFound, 12) = BaseCurrencyDates(k, 1) Then
            'Note the dateserial to secure correct representation of dates in Excel, when date is dim as string variable in VBA
                Cells(4 + NrofTradesFound, 15) = DateSerial(Year(BaseCurrencyDates(k, 2)), Month(BaseCurrencyDates(k, 2)), Day(BaseCurrencyDates(k, 2)))
                  If BaseCurrencyDates(k, 1) = "USD" Then
                      Cells(4 + NrofTradesFound, 16) = Abs(Cells(4 + NrofTradesFound, 13) * USDDKKExchange)
                  Else
                      Cells(4 + NrofTradesFound, 16) = Abs(Cells(4 + NrofTradesFound, 13))
                  End If
        
                  
            End If
        Next
        
         VariationsTest(i, 1) = Cells(4 + NrofTradesFound, 11) & Cells(4 + NrofTradesFound, 12) & Cells(4 + NrofTradesFound, 14) & Cells(4 + NrofTradesFound, 15)
         AbsolutValueForTest(i) = Abs(DataForTradeInstruction(i, LastColOffset + 9))
         'VariationsTest(NrofTradesFound, 2) = Cells(4 + NrofTradesFound, 12)
         'VariationsTest(NrofTradesFound, 3) = Cells(4 + NrofTradesFound, 14)
         'VariationsTest(NrofTradesFound, 4) = Cells(4 + NrofTradesFound, 15)
         
         TempString = Cells(4 + NrofTradesFound, 11) & Cells(4 + NrofTradesFound, 12) & Cells(4 + NrofTradesFound, 14) & Cells(4 + NrofTradesFound, 15)
         If IsInArray(TempString, TradeVariations) Then
            NrOfDuplicates = NrOfDuplicates + 1
         
         Else ' variation added if it does not exist
            NrOFVariations = NrOFVariations + 1
            ReDim Preserve TradeVariations(NrOFVariations)
            ReDim Preserve ValueDate(NrOFVariations)
            ReDim Preserve BaseCurrForTrade(NrOFVariations)
            ReDim Preserve VsCurrForTrade(NrOFVariations)
            TradeVariations(NrOFVariations) = TempString
            BaseCurrForTrade(NrOFVariations) = Cells(4 + NrofTradesFound, 12)
            VsCurrForTrade(NrOFVariations) = Cells(4 + NrofTradesFound, 14)
            ValueDate(NrOFVariations) = Cells(4 + NrofTradesFound, 15)
         End If
    
    Else
    
    VariationsTest(i, 1) = "N/A"
    AbsolutValueForTest(i) = 0
    End If
    
    
Next
  
If NrOFVariations = 0 Then
    ValueBox = MsgBox("Der skal ikke foretages justeringer! " & Chr(13) & Chr(13) & "Koden afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("Controle").Activate
    End
End If
    




Worksheets("FXTradeInstruction").Activate
Cells.Clear

'Builds sheet format
Cells(1, 2) = "Value Date"
Cells(2, 2) = "SPOT"
Cells(1, 10) = "Value Date"
Cells(2, 10) = "Term"
Cells(3, 1) = "SWAP"
Cells(3, 2) = "Operation"
Cells(3, 3) = "Currency"
Cells(3, 4) = "Amount"
Cells(3, 5) = "Vs Currency"
Cells(3, 6) = "Value date"
Cells(3, 7) = "Limit Price"
Cells(3, 8) = "Limit Date"
Cells(3, 10) = "Operation"
Cells(3, 11) = "Currency"
Cells(3, 12) = "Amount"
Cells(3, 13) = "Vs Currency"
Cells(3, 14) = "Value Date"
Cells(3, 15) = "Limit Price"
Cells(3, 16) = "Limit Date"

ReDim CurrencyTradeVariationCalArray(NrOfTradelines - NrOfIrrelevant, NrOFVariations - 1)
ReDim CurrencyTradeVariationCalArrayForTest(NrOfTradelines - NrOfIrrelevant, NrOFVariations - 1)

'note the minus 1 in number of iterations. This is done to allow for index pulling later
For i = 1 To NrOfTradelines - NrOfIrrelevant
    For k = 0 To NrOFVariations - 1
        If VariationsTest(i, 1) = TradeVariations(k + 1) <> 0 Then
            CurrencyTradeVariationCalArray(i, k) = DataForTradeInstruction(i, LastColOffset + 9)
            CurrencyTradeVariationCalArrayForTest(i, k) = Abs(DataForTradeInstruction(i, LastColOffset + 9))
        End If
    Next
Next


'MsgBox Application.WorksheetFunction.Sum(CurrencyTradeVariationCalArrayForTest)
'MsgBox Application.WorksheetFunction.Sum(AbsolutValueForTest)

If Application.WorksheetFunction.Sum(CurrencyTradeVariationCalArrayForTest) <> Application.WorksheetFunction.Sum(AbsolutValueForTest) Then
    ValueBox = MsgBox("Der synes at v|fffd|re uoverenstemmelse mellem de enkelte trades og det handlede bel|fffd|b" & Chr(13) & Chr(13) & "Koden afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
    End
End If





For i = 0 To NrOFVariations - 1
    TempCurrCal = Application.WorksheetFunction.Index(CurrencyTradeVariationCalArray, 0, i + 1)
    Cells(4 + i, 12) = Abs(Application.WorksheetFunction.Sum(TempCurrCal))
    Cells(4 + i, 12).NumberFormat = "#,##0.0"
    If Application.WorksheetFunction.Sum(TempCurrCal) < 0 Then ' Buy and sell beneath might seem reversed, this however is because operation is made relative to base currency
            Cells(4 + i, 10) = "BUY"
    Else
            Cells(4 + i, 10) = "SELL"
    End If
    Cells(i + 4, 11) = BaseCurrForTrade(i + 1)
    Cells(i + 4, 13) = VsCurrForTrade(i + 1)
    Cells(i + 4, 14) = ValueDate(i + 1)
Next


End Sub

Public Sub FutTradeInstruction()

Dim i, j, k, m, n, NrofTradesFound, ValueBox As Integer
Dim TempString As String
Dim OperationString, OpenVsCloseAsstring As String
Dim OperationStringRoll, OpenVsCloseAsstringRoll As String
Dim RelevantExchange, USDDKKExchange As Double

With ActiveSheet
    LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
End With


NrOfTradelines = SubAccountsFound


ReDim DataForTradeInstruction(NrOfTradelines - NrOfIrrelevant, LastCol)

m = 0
For i = 1 To NrOfTradelines
    If Cells(i + 1, 7 + NrOFHedgedCurrencies) <> "N/A" Then
    m = m + 1
        For k = 1 To LastCol
            DataForTradeInstruction(m, k) = Cells(i + 1, k)
        Next
    End If
Next


Worksheets("FUTOrdersAllocation").Activate
Cells.Clear

Cells(1, 1) = "Futures orders - NEFO - ALLOCATION"
Cells(3, 1) = "Nocli"
Cells(3, 2) = "NoDos"
Cells(3, 3) = "Operation"
Cells(3, 4) = "On Close/Open"
Cells(3, 5) = "Ticker"
Cells(3, 6) = "Quantity"
Cells(3, 7) = "NrOfContracts"
Cells(3, 8) = "Short Name"
Cells(3, 9) = "DKK Nominal"
'Cells(3, 9) = "Trade Set"

ReDim TradeVariations(1)
ReDim ShortName(1)
ReDim Operation(1)
ReDim Ticker(1)
ReDim ShortNameRoll(1)
ReDim OperationRoll(1)
ReDim TickerRoll(1)
ReDim VariationsTest(NrOfTradelines - NrOfIrrelevant, 4)
ReDim AbsolutValueForTest(NrOfTradelines - NrOfIrrelevant)

NrofTradesFound = 0
NrOFVariations = 0
NrOfDuplicates = 0


For m = 1 To NrOfCurrenCyCrosses
        If CurrencyCrosses(m, 1) = "USDDKK" Then
                   USDDKKExchange = CurrencyCrosses(m, 2)
        End If
Next


RollFound = 0

For i = 1 To NrOfTradelines - NrOfIrrelevant
'VariationsTest(i, 1) = Cells(3 + NrofTradesFound + RollFound, 3) & Cells(3 + NrofTradesFound + RollFound, 4) & Cells(3 + NrofTradesFound + RollFound, 5)

    If DataForTradeInstruction(i, LastColOffset + 9) <> 0 Then
        NrofTradesFound = NrofTradesFound + 1
        If DataForTradeInstruction(i, LastColOffset + 9) < 0 Then ' Buy and sell beneath might seem reversed, this however is because operation is made relative to base currency
            Cells(3 + NrofTradesFound + RollFound, 3) = "SELL"
            OperationString = "SELL"
            Cells(3 + NrofTradesFound + RollFound, 4) = "Open"
            OpenVsCloseAsstring = "Open"
        Else
            Cells(3 + NrofTradesFound + RollFound, 3) = "BUY"
            OperationString = "Buy"
            Cells(3 + NrofTradesFound + RollFound, 4) = "Close"
            OpenVsCloseAsstring = "Close"
        End If
        Cells(3 + NrofTradesFound + RollFound, 1) = Left(DataForTradeInstruction(i, 1), 6)
        TempString = Right(DataForTradeInstruction(i, 1), 2)
        Cells(3 + NrofTradesFound + RollFound, 2).NumberFormat = "@"
        Cells(3 + NrofTradesFound + RollFound, 2) = TempString
        Cells(3 + NrofTradesFound + RollFound, 6).NumberFormat = "#,##0.0"
        Cells(3 + NrofTradesFound + RollFound, 9).NumberFormat = "#,##0.0"
        
        For m = 1 To NrOfCurrenCyCrosses
            If CurrencyCrosses(m, 1) = DataForTradeInstruction(i, LastColOffset + 2) & DataForTradeInstruction(i, LastColOffset + 3) Then
                RelevantExchange = CurrencyCrosses(m, 2)
            End If
        Next
        
        If IsItAFuturesRoll <> "YES" Then ' Daily adjustment Strictly speaking this does not need to be in IF sentence if the if is inversed!
            Cells(3 + NrofTradesFound, 5) = DataForTradeInstruction(i, LastColOffset + 12)
            Cells(3 + NrofTradesFound, 6) = DataForTradeInstruction(i, LastColOffset + 14)
            Cells(3 + NrofTradesFound, 7) = DataForTradeInstruction(i, LastColOffset + 9)
            Cells(3 + NrofTradesFound, 8) = DataForTradeInstruction(i, LastColOffset + 13)
            
            
            If DataForTradeInstruction(i, LastColOffset + 2) <> DataForTradeInstruction(i, LastColOffset + 3) Then
                Cells(3 + NrofTradesFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15) / RelevantExchange)
            ElseIf DataForTradeInstruction(i, LastColOffset + 2) = "USD" Then
                Cells(3 + NrofTradesFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15) * USDDKKExchange)
            Else
                Cells(3 + NrofTradesFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15))
            End If
     
        Else 'Futures Roll
            Cells(3 + NrofTradesFound + RollFound, 5) = DataForTradeInstruction(i, LastColOffset + 12)
            Cells(3 + NrofTradesFound + RollFound, 6) = 0 - DataForTradeInstruction(i, LastColOffset + 14)
            Cells(3 + NrofTradesFound + RollFound, 7) = DataForTradeInstruction(i, LastColOffset + 9)
            Cells(3 + NrofTradesFound + RollFound, 8) = DataForTradeInstruction(i, LastColOffset + 13)
            Cells(4 + NrofTradesFound + RollFound, 1) = Left(DataForTradeInstruction(i, 1), 6)
            Cells(4 + NrofTradesFound + RollFound, 2).NumberFormat = "@"
            Cells(4 + NrofTradesFound + RollFound, 2) = TempString
            
            RollFound = RollFound + 1
            'Cells(2 + NrofTradesFound + RollFound, 9) = RollFound
            'Cells(3 + NrofTradesFound + RollFound, 9) = RollFound
            
            If DataForTradeInstruction(i, LastColOffset + 9) < 0 Then ' Buy and sell beneath might seem reversed, this however is because operation is made relative to base currency
                Cells(3 + NrofTradesFound + RollFound, 3) = "BUY"
                OperationStringRoll = "BUY"
                Cells(3 + NrofTradesFound + RollFound, 4) = "Close"
                OpenVsCloseAsstringRoll = "Close"
            Else
                Cells(3 + NrofTradesFound + RollFound, 3) = "SELL"
                OperationStringRoll = "SELL"
                Cells(3 + NrofTradesFound + RollFound, 4) = "Open"
                OpenVsCloseAsstringRoll = "Open"
            End If
             Cells(3 + NrofTradesFound + RollFound, 5) = DataForTradeInstruction(i, LastColOffset + 5)
             Cells(3 + NrofTradesFound + RollFound, 6) = DataForTradeInstruction(i, LastColOffset + 14)
             Cells(3 + NrofTradesFound + RollFound, 7) = DataForTradeInstruction(i, LastColOffset + 6)
             Cells(3 + NrofTradesFound + RollFound, 8) = DataForTradeInstruction(i, LastColOffset + 17)
             Cells(3 + NrofTradesFound + RollFound, 6).NumberFormat = "#,##0.0"
             Cells(3 + NrofTradesFound + RollFound, 9).NumberFormat = "#,##0.0"
            
            If DataForTradeInstruction(i, LastColOffset + 2) <> DataForTradeInstruction(i, LastColOffset + 3) Then
                Cells(2 + NrofTradesFound + RollFound, 9) = Abs((DataForTradeInstruction(i, LastColOffset + 15) / RelevantExchange))
                Cells(3 + NrofTradesFound + RollFound, 9) = Abs((DataForTradeInstruction(i, LastColOffset + 15) / RelevantExchange))
            ElseIf DataForTradeInstruction(i, LastColOffset + 2) = "USD" Then
                Cells(2 + NrofTradesFound + RollFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15) * USDDKKExchange)
                Cells(3 + NrofTradesFound + RollFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15) * USDDKKExchange)
            Else
                Cells(2 + NrofTradesFound + RollFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15))
                Cells(3 + NrofTradesFound + RollFound, 9) = Abs(DataForTradeInstruction(i, LastColOffset + 15))
            End If
            
            
        End If
        
    
         VariationsTest(i, 1) = OperationString & OpenVsCloseAsstring & DataForTradeInstruction(i, LastColOffset + 12)
         AbsolutValueForTest(i) = Abs(DataForTradeInstruction(i, LastColOffset + 9))
         'VariationsTest(NrofTradesFound, 2) = Cells(4 + NrofTradesFound, 12)
         'VariationsTest(NrofTradesFound, 3) = Cells(4 + NrofTradesFound, 14)
         'VariationsTest(NrofTradesFound, 4) = Cells(4 + NrofTradesFound, 15)
         
         TempString = OperationString & OpenVsCloseAsstring & DataForTradeInstruction(i, LastColOffset + 12)
         If IsInArray(TempString, TradeVariations) Then
            NrOfDuplicates = NrOfDuplicates + 1
         
         Else ' variation added if it does not exist
            NrOFVariations = NrOFVariations + 1
            ReDim Preserve TradeVariations(NrOFVariations)
            ReDim Preserve ShortName(NrOFVariations)
            ReDim Preserve Operation(NrOFVariations)
            ReDim Preserve Ticker(NrOFVariations)
            TradeVariations(NrOFVariations) = TempString
            ShortName(NrOFVariations) = DataForTradeInstruction(i, LastColOffset + 13)
            Operation(NrOFVariations) = OperationString
            Ticker(NrOFVariations) = DataForTradeInstruction(i, LastColOffset + 12)
            
                If IsItAFuturesRoll = "YES" Then
                    ReDim Preserve ShortNameRoll(NrOFVariations)
                    ReDim Preserve OperationRoll(NrOFVariations)
                    ReDim Preserve TickerRoll(NrOFVariations)
                    ShortNameRoll(NrOFVariations) = DataForTradeInstruction(i, LastColOffset + 17)
                    OperationRoll(NrOFVariations) = OperationStringRoll
                    TickerRoll(NrOFVariations) = DataForTradeInstruction(i, LastColOffset + 5)
                End If
            
         End If
    
    Else
    
    VariationsTest(i, 1) = "N/A"
    AbsolutValueForTest(i) = 0
    End If
    
    
Next
  
If NrOFVariations = 0 Then
    ValueBox = MsgBox("Der skal ikke foretages justeringer! " & Chr(13) & Chr(13) & "Koden afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
    Worksheets("Controle").Activate
    End
End If
    
    
    

Worksheets("FUTOrdersTrading").Activate
Cells.Clear

'Builds sheet format
Cells(1, 1) = "Operation"
Cells(1, 2) = "On Close / Open"
Cells(1, 3) = "Ticker Bloomberg"
Cells(1, 4) = "Short name"
Cells(1, 5) = "Number of Contracts"
Cells(1, 6) = "Quantity"
Cells(1, 7) = "Trade Set"


ReDim CurrencyTradeVariationCalArray(NrOfTradelines - NrOfIrrelevant, NrOFVariations - 1)
ReDim CurrencyTradeVariationCalArray2(NrOfTradelines - NrOfIrrelevant, NrOFVariations - 1)
ReDim CurrencyTradeVariationCalArrayForTest(NrOfTradelines - NrOfIrrelevant, NrOFVariations - 1)

'note the minus 1 in number of iterations. This is done to allow for index pulling later
For i = 1 To NrOfTradelines - NrOfIrrelevant
    For k = 0 To NrOFVariations - 1
        If VariationsTest(i, 1) = TradeVariations(k + 1) <> 0 Then
            CurrencyTradeVariationCalArray(i, k) = DataForTradeInstruction(i, LastColOffset + 9)
            CurrencyTradeVariationCalArray2(i, k) = DataForTradeInstruction(i, LastColOffset + 14)
            CurrencyTradeVariationCalArrayForTest(i, k) = Abs(DataForTradeInstruction(i, LastColOffset + 9))
                'If IsItAFuturesRoll = "YES" Then
                 '     CurrencyTradeVariationCalArray(i, k) = DataForTradeInstruction(i, LastColOffset + 9)
                'End If
        End If
    Next
Next


'MsgBox Application.WorksheetFunction.Sum(CurrencyTradeVariationCalArrayForTest)
'MsgBox Application.WorksheetFunction.Sum(AbsolutValueForTest)

If Application.WorksheetFunction.Sum(CurrencyTradeVariationCalArrayForTest) <> Application.WorksheetFunction.Sum(AbsolutValueForTest) Then
    ValueBox = MsgBox("Der synes at v|fffd|re uoverenstemmelse mellem de enkelte trades og det handlede bel|fffd|b" & Chr(13) & Chr(13) & "Koden afsluttes", vbOKOnly + vbExclamation, "ADVARSEL")
    End
End If

RollFound = 0



For i = 0 To NrOFVariations - 1
    TempCurrCal = Application.WorksheetFunction.Index(CurrencyTradeVariationCalArray, 0, i + 1)
    Cells(i + 2 + RollFound, 5) = Application.WorksheetFunction.Sum(TempCurrCal)
    Cells(i + 2 + RollFound, 5).NumberFormat = "#,##0.0"

    
    Cells(i + 2 + RollFound, 7) = "N/A"
    If Application.WorksheetFunction.Sum(TempCurrCal) > 0 Then ' Buy and sell beneath might seem reversed, this however is because operation is made relative to base currency
        Cells(i + 2 + RollFound, 1) = "BUY"
        Cells(i + 2 + RollFound, 2) = "Close"
    Else
        Cells(i + 2 + RollFound, 1) = "SELL"
        Cells(i + 2 + RollFound, 2) = "Open"
    End If
    Cells(i + 2 + RollFound, 4) = ShortName(i + 1)
    Cells(i + 2 + RollFound, 3) = Ticker(i + 1)
    
    
    
        If IsItAFuturesRoll = "YES" Then
        
            RollFound = RollFound + 1
            Cells(i + 1 + RollFound, 7) = RollFound
            Cells(i + 2 + RollFound, 7) = RollFound
            If Application.WorksheetFunction.Sum(TempCurrCal) < 0 Then '
                Cells(i + 2 + RollFound, 1) = "BUY"
                Cells(i + 2 + RollFound, 2) = "Close"
            Else
                Cells(i + 2 + RollFound, 1) = "SELL"
                Cells(i + 2 + RollFound, 2) = "Open"
            End If
           
            Cells(i + 2 + RollFound, 4) = ShortNameRoll(i + 1)
            Cells(i + 2 + RollFound, 3) = TickerRoll(i + 1)
            Cells(i + 2 + RollFound, 5) = Application.WorksheetFunction.Sum(TempCurrCal) * -1
            Cells(i + 2 + RollFound, 5).NumberFormat = "#,##0.0"
            
            
            For k = 1 To NrOfBetaTools
                If TickerRoll(i + 1) = BetaToolsInfoAndValues(k, 9) Then
                    Cells(i + 1 + RollFound, 6) = Cells(i + 1 + RollFound, 5) * BetaToolsInfoAndValues(k, 7)
                    Cells(i + 2 + RollFound, 6) = Cells(i + 2 + RollFound, 5) * BetaToolsInfoAndValues(k, 7)
                    Cells(i + 1 + RollFound, 6).NumberFormat = "#,##0.0"
                    Cells(i + 2 + RollFound, 6).NumberFormat = "#,##0.0"
                End If
            Next
        Else
        
        TempCurrCal = Application.WorksheetFunction.Index(CurrencyTradeVariationCalArray2, 0, i + 1)
        Cells(i + 2 + RollFound, 6) = Application.WorksheetFunction.Sum(TempCurrCal)
        Cells(i + 2 + RollFound, 6).NumberFormat = "#,##0.0"
            
        End If
        
Next











End Sub




Attribute VB_Name = "UserForm"
Attribute VB_Base = "0{0FEB6E97-908C-4DE9-90C2-BA996DAE96A4}{87E9114D-2B9E-4E01-A62C-8A05890D28AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
Worksheets("Controle").Activate
Unload UserForm
End Sub

Private Sub CommandButton2_Click()

    Trader = ComboBox1.Value
    Controle = ComboBox2.Value
    TradeDescription = TextBox2
    
    If OptionButtonCurrency.Value = True Then
        TradeType = "Currency Spot and Forward Trading"
    Else
        TradeType = "Futures and Options Trading"
    End If
    
    If CheckBox1.Value = True Then
        SaveAndSendEmail = 1
    Else
        SaveAndSendEmail = 0
    End If
    
    IsItAFuturesRoll = "NO" ' this is deafault choice
    
    
    'establishes email for chosen control
    For i = 1 To NrOfApproving
        If Email(i, 2) = Controle Then
        ControlEmail = Email(i, 1)
        End If
    Next
        
    'establishes the chosen broker
    For i = 0 To NrOfCounterParties
        If ListBox1.Selected(i) Then
            Broker = ListBox1.List(i)
        End If
    Next
    
    
    If Trader = "" Then
        MsgBox "Please select who Instructs"
        ComboBox1.SetFocus
        Exit Sub
    ElseIf Controle = "" Then
        MsgBox "Please select who Confirms"
        ComboBox2.SetFocus
        Exit Sub
    End If
    
    If Controle = Trader Then
        MsgBox "A trade cannot be instructed and approved by the same person"
        ComboBox2.SetFocus
        Exit Sub
    End If
        
    If Broker = "" Then
        MsgBox "Please select Broker"
        ListBox1.SetFocus
        Exit Sub
    End If
        

'This section tests what accounts to run program on
ReDim MainAccountSelected(ListCount)
'ReDim ListCountSelected(ListCount)

ListCount = 0

'determines which accounts to run analysis on
For i = 0 To ListBox2.ListCount - 1
    If ListBox2.Selected(i) = True Then
        ListCount = ListCount + 1
        ReDim Preserve MainAccountSelected(ListCount)
        'ReDim Preserve ListCountSelected(ListCount)
        MainAccountSelected(ListCount) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
            If MainAccountSelected(ListCount) = "ClientName" & "Hedged Account Name" Then
                GoTo SkipTheRest ' done since the choises are dealt with differently if the eading is included
            End If
    End If
Next

If ListCount <> 0 Then
    'done to force feed headers when accoutns are acctually chose
    ListCount = ListCount + 1
    ReDim Preserve MainAccountSelected(ListCount + 1)
    MainAccountSelected(0) = "ClientName" & "Hedged Account Name"
End If


SkipTheRest:

'If nothing or the header is selected all accounts are included
If ListCount = 0 Then
    ListCount = ListBox2.ListCount - 1
    ReDim MainAccountSelected(ListCount)
        For i = 0 To ListBox2.ListCount - 1
            MainAccountSelected(i) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
        Next
        MainAccountSelected(0) = "ClientName" & "Hedged Account Name"
ElseIf Not IsEmpty(MainAccountSelected(1)) Then
    If MainAccountSelected(1) = ListBox2.List(0, 0) & ListBox2.List(0, 1) Then
        ListCount = ListBox2.ListCount - 1
        ReDim MainAccountSelected(ListCount)
            For i = 0 To ListBox2.ListCount - 1
                MainAccountSelected(i) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
            Next
    End If
End If


If TradeType = "Currency Spot and Forward Trading" Then
    Call CalculateTrades
    Call TradeInstruction
Else
    For i = 1 To NrOfBetaTools
        If BetaToolsInfoAndValues(i, 9) <> "" Then
            ValueBox = MsgBox("Du fors|fffd|ger at rulle futures - bekr|fffd|ft venligst af dette er tilf|fffd|ldet (Ja)" & Chr(13) & Chr(13) & "|fffd|nskes daglig k|fffd|rsel trykkes (Nej)", vbYesNo + vbExclamation, "ADVARSEL")
            If ValueBox = 6 Then
                IsItAFuturesRoll = "YES"
            End If
            GoTo DecisionIsTaken
        End If
    Next
DecisionIsTaken:

    Call BETACalculateTrades
    Call FutTradeInstruction
End If

Call GenerateEmail

Unload UserForm





End Sub

Private Sub CommandButton3_Click()

ReDim MainAccountSelected(ListCount)
'ReDim ListCountSelected(ListCount)

If OptionButtonCurrency.Value = True Then
        NrOfColumns = NrOFHedgedCurrencies
Else
        NrOfColumns = NrOfBetaTools
End If
    

ListCount = 0

'determines which accounts to run analysis on
For i = 0 To ListBox2.ListCount - 1
    If ListBox2.Selected(i) = True Then
        ListCount = ListCount + 1
        ReDim Preserve MainAccountSelected(ListCount)
        'ReDim Preserve ListCountSelected(ListCount)
        MainAccountSelected(ListCount) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
            If MainAccountSelected(ListCount) = "ClientName" & "Hedged Account Name" Then
                GoTo SkipTheRest ' done since the choises are dealt with differently if the eading is included
            End If
    End If
Next

If ListCount <> 0 Then
    'done to force feed headers when accoutns are acctually chose
    ListCount = ListCount + 1
    ReDim Preserve MainAccountSelected(ListCount + 1)
    MainAccountSelected(0) = "ClientName" & "Hedged Account Name"
End If


SkipTheRest:

'If nothing or the header is selected all accounts are included
If ListCount = 0 Then
    ListCount = ListBox2.ListCount - 1
    ReDim MainAccountSelected(ListCount)
        For i = 0 To ListBox2.ListCount - 1
            MainAccountSelected(i) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
        Next
        MainAccountSelected(0) = "ClientName" & "Hedged Account Name"
ElseIf Not IsEmpty(MainAccountSelected(1)) Then
    If MainAccountSelected(1) = ListBox2.List(0, 0) & ListBox2.List(0, 1) Then
        ListCount = ListBox2.ListCount - 1
        ReDim MainAccountSelected(ListCount)
            For i = 0 To ListBox2.ListCount - 1
                MainAccountSelected(i) = ListBox2.List(i, 0) & ListBox2.List(i, 1)
            Next
    End If
End If



Userform1.Show


End Sub



Private Sub ListBox3_Change()


Dim i, k, m, n, LastCol, LastRow, ValueBox, ColumnCountNr As Integer

NrOfSelectedBOs = 0
ReDim SelectedBO(0)


For i = 0 To ListBox3.ListCount - 1
    If ListBox3.Selected(i) = True Then
        NrOfSelectedBOs = NrOfSelectedBOs + 1
        ReDim Preserve SelectedBO(NrOfSelectedBOs)
        SelectedBO(NrOfSelectedBOs) = ListBox3.List(i)
            If NrOfSelectedBOs > 1 Then ' done to avoid user selecting all BO in combination with underlying BO
                TempString = "ALL (BO)"
                If IsInArray(TempString, SelectedBO) Then
                    ValueBox = MsgBox("Valget af ALL (BO) kan ikke kombineres med andre BO'er ", vbOKOnly + vbExclamation, "ADVARSEL")
                    NrOfSelectedBOs = 1
                    ReDim SelectedBO(NrOfSelectedBOs)
                    SelectedBO(1) = "ALL (BO)"
                End If
            End If
    End If
Next i


If OptionButtonCurrency.Value = True Then ' Currency trade

    Worksheets("ListboxInput").Activate
    Cells.Clear
    
    For i = 1 To NrOFHedgedCurrencies
         Cells(1, i + 5) = HedgedCurrencies(i)
         'Cells(1, i + 6 + LastCol) = HedgedCurrencies(i)
    Next
    
    Cells(1, 1) = "Acc Number"
    Cells(1, 2) = "ClientName"
    Cells(1, 3) = "Hedged Account Name"
    Cells(1, 4) = "PortfolioNameNum"
    Cells(1, 5) = "HedgeRatio"
    
    
    With ActiveSheet
        LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
    End With
    
    LastCol = LastCol + 2
    
    For i = 1 To NrOFHedgedCurrencies
         Cells(1, i + 3 + LastCol) = HedgedCurrencies(i)
    Next
    
    Cells(1, 1 + LastCol) = "ClientName"
    Cells(1, 2 + LastCol) = "Hedged Account Name"
    Cells(1, 3 + LastCol) = "HedgeRatio"
    


    DataFormDetailedCellCount = 0
    DataFormDetailedCellCount2 = 0
    ColumnCountNr = NrOFHedgedCurrencies
    
    ReDim DataFormDetailed(LastRowInLimits, 5 + NrOFHedgedCurrencies, NrOfSelectedBOs)
    ReDim DataForMain(LastRowInLimits, 3 + NrOFHedgedCurrencies, NrOfSelectedBOs)
    
    ReDim TestArray(LastRowInLimits)
    ReDim PrintArray(LastRowInLimits)
    
    For i = 1 To NrOfSelectedBOs
    'ReDim TestArray(LastRowInLimits) ' done to enable the same manager to be incluede for two BO's
        For m = 1 To LastRowInLimits
            If SelectedBO(i) = LimitsData(m, 2) Or SelectedBO(i) = "ALL (BO)" Then
                DataFormDetailedCellCount = DataFormDetailedCellCount + 1
                DataFormDetailed(m, 1, i) = LimitsData(m, 1)
                DataFormDetailed(m, 2, i) = LimitsData(m, 2)
                DataFormDetailed(m, 3, i) = LimitsData(m, 3)
                DataFormDetailed(m, 4, i) = LimitsData(m, 4)
                DataFormDetailed(m, 5, i) = LimitsData(m, 7)
                
                Cells(DataFormDetailedCellCount + 1, 1) = DataFormDetailed(m, 1, i)
                Cells(DataFormDetailedCellCount + 1, 2) = DataFormDetailed(m, 2, i)
                Cells(DataFormDetailedCellCount + 1, 3) = DataFormDetailed(m, 3, i)
                Cells(DataFormDetailedCellCount + 1, 4) = DataFormDetailed(m, 4, i)
                Cells(DataFormDetailedCellCount + 1, 5) = DataFormDetailed(m, 5, i)
                Cells(DataFormDetailedCellCount + 1, 5).NumberFormat = "0.00%"
                    For n = 1 To NrOFHedgedCurrencies
                        Cells(DataFormDetailedCellCount + 1, 5 + n).NumberFormat = "0.00%"
                        DataFormDetailed(m, 5 + n, i) = LimitsData(m, NumberOfFixedCurrencyCol + n)
                        Cells(DataFormDetailedCellCount + 1, 5 + n) = DataFormDetailed(m, 5 + n, i)
                    Next
                   
                   
                   
                    TempString = LimitsData(m, 2) & LimitsData(m, 3)
                    If IsInArray(TempString, TestArray) Then
                        WhereInTestArray = WhereInArray(TestArray, TempString)
                        For n = 1 To NrOFHedgedCurrencies
                                If IsNumeric(DataFormDetailed(m, 5 + n, i)) = True Then
                                    Cells(WhereInTestArray + 1, 3 + LastCol + n) = DataFormDetailed(m, 5 + n, i)
                                    Cells(WhereInTestArray + 1, 3 + LastCol + n).NumberFormat = "0.00%"
                                    DataForMain(m, 3 + n, i) = Cells(WhereInTestArray + 1, 3 + LastCol + n)
                                End If
                        Next
                    Else
                        DataFormDetailedCellCount2 = DataFormDetailedCellCount2 + 1
                        TestArray(DataFormDetailedCellCount2) = LimitsData(m, 2) & LimitsData(m, 3)
                        
                        DataForMain(m, 1, i) = LimitsData(m, 2)
                        DataForMain(m, 2, i) = LimitsData(m, 3)
                        DataForMain(m, 3, i) = LimitsData(m, 7)
                        Cells(DataFormDetailedCellCount2 + 1, 1 + LastCol) = DataForMain(m, 1, i)
                        Cells(DataFormDetailedCellCount2 + 1, 2 + LastCol) = DataForMain(m, 2, i)
                        Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol) = DataForMain(m, 3, i)
                        Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol).NumberFormat = "0.00%"
                            For n = 1 To NrOFHedgedCurrencies
                                If IsNumeric(DataFormDetailed(m, 5 + n, i)) = True Then
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n) = DataFormDetailed(m, 5 + n, i)
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n).NumberFormat = "0.00%"
                                    DataForMain(m, 3 + n, i) = Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n)
                                    
                                Else
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n) = ""
                                End If
                            Next
                    End If
    
        
                        
            End If
        Next
                    
    Next

      

Else ' Futures Trade

    

    Worksheets("ListboxInput").Activate
    Cells.Clear
    
    For i = 1 To NrOfBetaTools
         Cells(1, i + 5) = BetaToolsInfoAndValues(i, 1)
         'Cells(1, i + 6 + LastCol) = HedgedCurrencies(i)
    Next
    
    Cells(1, 1) = "Acc Number"
    Cells(1, 2) = "ClientName"
    Cells(1, 3) = "Hedged Account Name"
    Cells(1, 4) = "PortfolioNameNum"
    Cells(1, 5) = "HedgeRatio"
    
    
    With ActiveSheet
        LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
    End With
    
    LastCol = LastCol + 2
    
    For i = 1 To NrOfBetaTools
         Cells(1, i + 3 + LastCol) = BetaToolsInfoAndValues(i, 1)
    Next
    
    Cells(1, 1 + LastCol) = "ClientName"
    Cells(1, 2 + LastCol) = "Hedged Account Name"
    Cells(1, 3 + LastCol) = "HedgeRatio"
    
    
    DataFormDetailedCellCount = 0
    DataFormDetailedCellCount2 = 0
    ColumnCountNr = NrOfBetaTools
    
    ReDim DataFormDetailed(LastRowInBetaLimits, 5 + NrOfBetaTools, NrOfSelectedBOs)
    ReDim DataForMain(LastRowInBetaLimits, 3 + NrOfBetaTools, NrOfSelectedBOs)
    
    ReDim TestArray(LastRowInBetaLimits)
    ReDim PrintArray(LastRowInBetaLimits)
    
    For i = 1 To NrOfSelectedBOs
    'ReDim TestArray(LastRowInLimits) ' done to enable the same manager to be incluede for two BO's
        For m = 1 To LastRowInBetaLimits
            If SelectedBO(i) = LimitsDataBETA(m, 2) Or SelectedBO(i) = "ALL (BO)" Then
                DataFormDetailedCellCount = DataFormDetailedCellCount + 1
                DataFormDetailed(m, 1, i) = LimitsDataBETA(m, 1)
                DataFormDetailed(m, 2, i) = LimitsDataBETA(m, 2)
                DataFormDetailed(m, 3, i) = LimitsDataBETA(m, 3)
                DataFormDetailed(m, 4, i) = LimitsDataBETA(m, 4)
                DataFormDetailed(m, 5, i) = LimitsDataBETA(m, 7)
                
                Cells(DataFormDetailedCellCount + 1, 1) = DataFormDetailed(m, 1, i)
                Cells(DataFormDetailedCellCount + 1, 2) = DataFormDetailed(m, 2, i)
                Cells(DataFormDetailedCellCount + 1, 3) = DataFormDetailed(m, 3, i)
                Cells(DataFormDetailedCellCount + 1, 4) = DataFormDetailed(m, 4, i)
                Cells(DataFormDetailedCellCount + 1, 5) = DataFormDetailed(m, 5, i)
                Cells(DataFormDetailedCellCount + 1, 5).NumberFormat = "0.00%"
                    For n = 1 To NrOfBetaTools
                        Cells(DataFormDetailedCellCount + 1, 5 + n).NumberFormat = "0.00%"
                        DataFormDetailed(m, 5 + n, i) = LimitsDataBETA(m, NumberOfFixedCurrencyCol + n)
                        Cells(DataFormDetailedCellCount + 1, 5 + n) = DataFormDetailed(m, 5 + n, i)
                    Next
                    
                    
                  TempString = LimitsDataBETA(m, 2) & LimitsDataBETA(m, 3)
                    If IsInArray(TempString, TestArray) Then
                        WhereInTestArray = WhereInArray(TestArray, TempString)
                        For n = 1 To NrOfBetaTools
                                If IsNumeric(DataFormDetailed(m, 5 + n, i)) = True Then
                                    Cells(WhereInTestArray + 1, 3 + LastCol + n) = DataFormDetailed(m, 5 + n, i)
                                    Cells(WhereInTestArray + 1, 3 + LastCol + n).NumberFormat = "0.00%"
                                    DataForMain(m, 3 + n, i) = Cells(WhereInTestArray + 1, 3 + LastCol + n)
                                End If
                        Next
                    Else
                        DataFormDetailedCellCount2 = DataFormDetailedCellCount2 + 1
                        TestArray(DataFormDetailedCellCount2) = LimitsDataBETA(m, 2) & LimitsDataBETA(m, 3)
                        
                        DataForMain(m, 1, i) = LimitsDataBETA(m, 2)
                        DataForMain(m, 2, i) = LimitsDataBETA(m, 3)
                        DataForMain(m, 3, i) = LimitsDataBETA(m, 7)
                        Cells(DataFormDetailedCellCount2 + 1, 1 + LastCol) = DataForMain(m, 1, i)
                        Cells(DataFormDetailedCellCount2 + 1, 2 + LastCol) = DataForMain(m, 2, i)
                        Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol) = DataForMain(m, 3, i)
                        Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol).NumberFormat = "0.00%"
                            For n = 1 To NrOfBetaTools
                                If IsNumeric(DataFormDetailed(m, 5 + n, i)) = True Then
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n) = DataFormDetailed(m, 5 + n, i)
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n).NumberFormat = "0.00%"
                                    DataForMain(m, 3 + n, i) = Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n)
                                    
                                Else
                                    Cells(DataFormDetailedCellCount2 + 1, 3 + LastCol + n) = ""
                                End If
                            Next
                    End If
    
        
                        
            End If
        Next
                    
    Next

  
End If







'Done to update listbox 2
With ActiveSheet
    LastRow = Cells(.Rows.Count, "N").End(xlUp).Row  ' OBS, KOLONNEN SKAL |fffd|NDRES S|fffd|FREMT DER TILF|fffd|JES MANGE VALUTER
End With

With ActiveSheet
    LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column - (2 + ColumnCountNr)
End With

With ListBox2
    .ColumnCount = 3 + ColumnCountNr ' If the number of fixed columns varies between currency and market hedge this on needs to test for the type of trade
    .RowSource = Range(Cells(1, LastCol), Cells(LastRow, LastCol + 2 + ColumnCountNr)).Address
    .ColumnWidths = "0.8 in;1.5 in;0.8 in;0.7 in;0.7 in;0.7 in;0.7 in;0.7 in;"
    '.ColumnWidths = "0.8 in;1.4 in;.5 in;.5 in;.5 in;.5 in;.5 in;"
End With



End Sub

Private Sub OptionButton1_Click()

ListBox3.Selected(0) = True ' used to trigger change event i listbox 3 code

End Sub

Private Sub OptionButtonCurrency_Click()

ListBox3.Selected(0) = True ' used to trigger change event i listbox 3 code

End Sub

Private Sub UserForm_Initialize()

Dim i, k, m, n, LastCol, ValueBox, c As Integer
Dim LastRow As Integer
Dim o As Long, j As Long
Dim sColWidths As String
Dim dMax As Double




Username = Application.Username
DagsDato = Format(Date, "dd-mm-yyyy")


'Done to update listbox 2
'Worksheets("ListboxInput").Activate
'With ActiveSheet
 '   LastRow = Cells(.Rows.Count, "L").End(xlUp).Row  ' OBS, KOLONNEN SKAL |fffd|NDRES S|fffd|FREMT DER TILF|fffd|JES MANGE VALUTER
'End With

'With ActiveSheet
 '   LastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column - (1 + NrOFHedgedCurrencies)
'End With




ComboBox1.Value = Username
ComboBox1.List = Instructing
ComboBox2.Value = ""
ComboBox2.List = Approving
ListBox3.List = BOName
ListBox3.Selected(0) = True
ListBox1.List = CounterParties
CheckBox1.Value = True


With ListBox2
    .ColumnCount = 3 + NumberOfFixedCurrencyCol
    .ColumnWidths = "0.8 in;1.5 in;0.8 in;0.7 in;0.7 in;0.7 in;0.7 in;0.7 in;"
End With

ComboBox1.BackColor = RGB(192, 192, 192)
WorkbookPath = Application.ActiveWorkbook.Path
Broker = ""




Application.ScreenUpdating = False







End Sub
Attribute VB_Name = "Userform1"
Attribute VB_Base = "0{C0D6FC79-D334-431A-A8E6-B36DD67816A5}{3B861BF4-FBE0-493C-BCD9-3292E8085328}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton3_Click()
Unload Userform1
End Sub

Private Sub CommandButton4_Click()


Unload Userform1
Unload UserForm

Worksheets("ListboxInput").Visible = True
Worksheets("ListboxInput").Activate

End Sub

Private Sub ListBoxForm2_Click()

End Sub

Private Sub UserForm_Initialize()

Dim i, j, k, m, n, ValueBox, LastRow, c As Integer
SubAccountsFound = 0

For k = 0 To ListCount
    For i = 1 To DataFormDetailedCellCount + 1
        If MainAccountSelected(k) = Cells(i, 2) & Cells(i, 3) Then
            SubAccountsFound = SubAccountsFound + 1
            ReDim Preserve SubAccountRowPlacement(SubAccountsFound)
            SubAccountRowPlacement(SubAccountsFound) = i
        End If
    Next
Next

    
    
    

ReDim MainAccountSelectedDATA(SubAccountsFound, 4 + NrOfColumns)

For k = 1 To SubAccountsFound
    For j = 0 To (5 + NrOfColumns) - 1
        MainAccountSelectedDATA(k - 1, j) = Cells(SubAccountRowPlacement(k), j + 1)
    Next
Next




With ListBoxForm2
    .ColumnCount = 5 + NrOfColumns
    .List = MainAccountSelectedDATA
    .ColumnWidths = "0.8 in;0.8 in;1.5 in;1.7 in;0.5 in;0.5 in;0.5 in;0.5 in;0.5 in;"
End With









End Sub

' InQuest injected base64 decoded content
' ,^t+
' {RzW
' ^"{-
' zw2N
' zw2N
' zw2N
' zw2.)

INQUEST-PP=macro
