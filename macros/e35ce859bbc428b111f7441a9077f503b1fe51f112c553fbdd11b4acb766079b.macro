Attribute VB_Name = "CBFM_Ranges"
Attribute VB_Base = "0{26ED6494-999F-42DE-9E39-B034A973FF4B}{F18E5DF9-9015-4505-B2EB-8B83C18E3223}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub bCancel_Click()
  Me.Hide
End Sub

Private Sub bNext_Click()
  n = 0
  For i = 0 To lbRanges.ListCount - 1
    n = n + IIf(lbRanges.Selected(i), 1, 0)
  Next i

  If n > 0 Then
    Me.Hide
    CBFM_Services.Show
  Else
    MsgBox "No range(s) selected.", vbCritical, "Error"
  End If
End Sub

Private Sub cbPrevious_Click()
  Me.Hide
  CBFM_Start.Show
End Sub

Private Sub UserForm_Activate()
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
  
  n = 0
  For i = 0 To lbRanges.ListCount - 1
    n = n + IIf(lbRanges.Selected(i), 1, 0)
  Next i

  If n = 0 Then
    lbRanges.Clear
    If CBFM_Start.oFirstTime Then
    
      rangerow = Range("IDM_IARGP").Row
      rangeCol = Range("IDM_IARGP").Column
  
      Do While Len(Sheets("Dual Message - Issuing").Cells(rangerow, rangeCol)) > 0
        r = Sheets("Dual Message - Issuing").Cells(rangerow, rangeCol)
        c = Application.VLookup(Right("000" & Application.HLookup(r, Sheets("Dual Message - Issuing").Range(Range("Issuing_Dual_Message_Account_Range").Row & ":" & Range("Issuing_Dual_Message_Account_Range").Row + 4), 4, False), 3), Range("CNTY_CONV"), 2, False)
        For i = 0 To lbRanges.ListCount - 1
          If lbRanges.Column(0, i) = r Then
            GoTo nextFTRange
          End If
        Next i
        If Application.CountIf(Sheets("Dual Message - Cross Border Fee").Range("B:B"), r) > 0 Then
          GoTo nextFTRange
        End If
        lbRanges.AddItem (r)
        lbRanges.List(lbRanges.ListCount - 1, 1) = c
nextFTRange:
        rangeCol = rangeCol + 2
      Loop
    Else
      rangerow = 9
      rangeCol = 2
      Do While Len(Sheets("Dual Message - Cross Border Fee").Cells(rangerow, rangeCol)) > 0
        r = Sheets("Dual Message - Cross Border Fee").Cells(rangerow, rangeCol)
        For i = 0 To lbRanges.ListCount - 1
          If lbRanges.Column(0, i) = r Then
            GoTo nextMRange
          End If
        Next i
        lbRanges.AddItem (r)
nextMRange:
        rangerow = rangerow + 1
      Loop
    End If
  End If
End Sub
Attribute VB_Name = "CBFM_Rates"
Attribute VB_Base = "0{FD1EFE94-2967-4C59-99D3-B4077E8FB251}{F2D4F7B9-A633-448D-B7F9-534B4A6DF811}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Const vbGrey = 10066329

Private Sub tbICBA_ATM_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_ATM_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_POS_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_POS_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_OCP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_OCP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_ATM_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_ATM_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_CNP_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_CNP_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_OCP_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_OCP_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_POS_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_POS_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_ATM_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_ATM_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_ATM_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_ATM_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_CNP_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_CNP_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_OCP_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_OCP_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_POS_Fixed_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_POS_Fixed_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_POS_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_POS_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_OCP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_OCP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_ATM_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_ATM_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_POS_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_POS_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_OCP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_OCP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_CNP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBA_CNP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_CNP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICCR_CNP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_CNP_Rate_Inter_Enter()
  Call formatTb(Me)
End Sub

Private Sub tbICBR_CNP_Rate_Intra_Enter()
  Call formatTb(Me)
End Sub

Private Sub bCancel_Click()
  Me.Hide
End Sub

Private Sub bNext_Click()
  Call formatTb(Me)
  Label44.Visible = True
  Me.Repaint
  Call loadCBFMData(CBFM_Ranges, CBFM_Services, CBFM_Rates)
  Me.Hide
End Sub

Private Sub cbPrevious_Click()
  Me.Hide
  CBFM_Services.Show
End Sub

Private Sub UserForm_Activate()
  Me.Label44.Visible = False
  Me.lblWarning.Visible = False
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
  
  cty = Sheets("Dual Message - Issuing").Range("D8").value
  region = Application.VLookup(cty, Sheets("Lookup").Range("C1:E261"), 3, False)
  If Not (IsError(region)) Then
    If Left(region, 1) <> "D" Then
      cbATM.value = False
      cbATM.Enabled = False
    End If
  End If

  For Each tb In Me.Controls
    If Left(tb.Name, 2) = "tb" Then
      Select Case Mid(tb.Name, 3, 4)
        Case "ICCR"
          tb.BackColor = IIf(CBFM_Services.cbECCR, vbWhite, vbGrey)
          tb.Enabled = CBFM_Services.cbECCR
        Case "ICBA"
          tb.BackColor = IIf(CBFM_Services.cbICBA, vbWhite, vbGrey)
          tb.Enabled = CBFM_Services.cbICBA
        Case "ICBR"
          tb.BackColor = IIf(CBFM_Services.cbICBR, vbWhite, vbGrey)
          tb.Enabled = CBFM_Services.cbICBR
      End Select
      tb.value = 0
      tb.value = Format(tb.value, "0.000000")
      If Not cbATM.Enabled Then
        If InStr(tb.Name, "_ATM_") > 0 Then
          tb.BackColor = vbGrey
          tb.Enabled = False
        End If
      End If
    End If
  Next tb
  
End Sub

Attribute VB_Name = "CBFM_Services"
Attribute VB_Base = "0{5FEFD003-55B3-4DCB-A9E2-9B368BA05E3E}{2DA617E3-D29F-419F-9A58-E57F37ABD211}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub bCancel_Click()
  Me.Hide
End Sub

Private Sub bNext_Click()
  If (Not cbECCR) And (Not cbICBA) And (Not cbICBR) Then
    MsgBox "At least one service should be selected", vbCritical
  Else
    Me.Hide
    CBFM_Rates.Show
  End If
End Sub

Private Sub cb_Click()
  MsgBox "Indicates whether the CBFM rate or amount will apply to DE04 of first chargeback or not (and if yes, should be backed out for the issuer)." & vbCrLf & vbCrLf & "If value is ""Yes"", CBFM amount in DE04 will be backed out when DE04 is passed to the Acquirer." & vbCrLf & "If value is ""No"", DE04 will be passed to Acquirer without a removal of the CBFM." & vbCrLf & vbCrLf & "Note: turning flag to ""Yes"" should be carefully evaluated per financial impact this could have as DE04 containing CBFM is not a standard practice.", vbInformation, "Chargeback"
End Sub

Private Sub cbcm_Click()
  MsgBox "Cross Border Cost Method", vbInformation, "CBCM"
End Sub

Private Sub cbECCR_Click()
  cbECCR_FPRC.Enabled = cbECCR
  cbECCR_FPRC.value = False
  cbECCR_C.Enabled = cbECCR
  cbECCR_C.value = False
End Sub

Private Sub cbfm_Click()
  MsgBox "Cross Border Flex Method", vbInformation, "CBFM"
End Sub

Private Sub cbICBA_Click()
  cbICBA_FPRC.Enabled = cbICBA
  cbICBA_FPRC.value = False
  cbICBA_C.Enabled = cbICBA
  cbICBA_C.value = False
End Sub

Private Sub CBICBR_CBF_Change()
  If CBICBR_CBF.value = "D" Then
    cty = Sheets("Dual Message - Issuing").Range("D8").value
    If Not (IsError(Application.VLookup(cty, Sheets("Lookup").Range("BT21:BT46"), 1, False))) Then
      MsgBox "CBFM without Currency conversion in not allowed in this country, value restored to N", vbCritical
      CBICBR_CBF.value = "N"
    Else
      MsgBox "CBFM without Currency Conversion is subject to legal approval, please contact the regional Product Owner:" & vbCrLf & vbCrLf & "Europe: Tamas Huszar" & vbCrLf & "NAM: David Hau" & vbCrLf & "AP: Vincent Bellis" & vbCrLf & "MEA: Frederico Gaglia", vbCritical
    End If
  End If
End Sub

Private Sub cbICBR_Click()
  cbICBR_FPRC.Enabled = cbICBR
  cbICBR_FPRC.value = False
  cbICBR_C.Enabled = cbICBR
  cbICBR_C.value = False
  CBICBR_CBF.Enabled = cbICBR
  CBICBR_CBF.value = "N"
End Sub

Private Sub cbPrevious_Click()
  Me.Hide
  CBFM_Ranges.Show
End Sub

Private Sub ccm_Click()
  MsgBox "Currency Conversion Method", vbInformation, "CCM"
End Sub

Private Sub dcc_Click()
  MsgBox "Indicate whether the CBFM rate or amount will apply to Cross Border transactions without currency conversion." & vbCrLf & vbCrLf & "If value is ""Y"", CBFM amount will apply to Cross Border transactions with and without currency conversion" & vbCrLf & "If value is ""N"", CBFM amount will only apply to Cross Border transactions without currency converions." & vbCrLf & "If value is ""D"", CBFM amount will only apply to Cross Border transactions with currency converions.", vbInformation, "Apply to DCC Transaction"
End Sub

Private Sub fprc_Click()
  MsgBox "Indicates whether the CBFM rate or amount should apply to First Presentment reversals and credit messages or not." & vbCrLf & vbCrLf & "If value is ""Yes"", CBFM amount will be displayed in DE06." & vbCrLf & "If value is ""No"", CBFM amount will not be displayed in DE06." & vbCrLf & vbCrLf & "Recommendation is to have the option set at ""Yes"" to have CBFM applied as are being done for all First Presentments", vbInformation, "First Presentment Reversal and credit"
End Sub

Private Sub UserForm_Activate()
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
  
  If CBFM_Start.oFirstTime Then
    cbECCR = False
    cbICBA = False
    cbICBR = False
  End If
  
  cty = Sheets("Dual Message - Issuing").Range("D8").value
  region = Application.VLookup(cty, Sheets("Lookup").Range("C1:E261"), 3, False)
  If Not (IsError(region)) Then
    If Left(region, 1) <> "D" Then
      cbICBA.Enabled = False
    End If
  End If
  
  CBICBR_CBF.Clear
  CBICBR_CBF.AddItem "Y"
  CBICBR_CBF.AddItem "N"
  CBICBR_CBF.AddItem "D"
  
End Sub



Attribute VB_Name = "CBFM_Start"
Attribute VB_Base = "0{869C5EF4-2FC0-4092-8B28-A27B3DA94455}{04E6D886-9D65-4C86-87BC-D5354FB18B2D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub bCancel_Click()
  Me.Hide
End Sub

Private Sub bNext_Click()
  If oFirstTime Then
    Me.Hide
    CBFM_Ranges.Show
  ElseIf oMaintenance Then
    Me.Hide
    MsgBox "Updating ranges already enrolled in the service should be maintained directly in the table.", vbInformation
  Else
    MsgBox "Please select one option before proceeding.", vbCritical
  End If
End Sub

Private Sub UserForm_Activate()
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub

Attribute VB_Name = "Module4"
#If VBA7 And Win64 Then
  Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#Else
  Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If

Public viewSet As Boolean
Public CBFMr As Integer

'Clicking the Approve APW button
'This will build an email on the user's PC to the CIS Project Manager, with a predefined subject and body.
'The user will have to send the email manually, it is just being prepared by the APW.
Sub Button1_Click()

    If Sheets("Change Management").Range("H1").value > 0 Then
      MsgBox "Changes have been applied to this document since it was sent by Mastercard." & vbCrLf & vbCrLf & "Please return the APW to your Mastercard Project Manager for review of the applied changes.", vbCritical
    Else
      mailAddress = Range("F6").value 'Replace(Trim(Range("E6").value), " ", "_") & "@mastercard.com"
      project = Range("E5")
      Call ShellExecute(hwnd, "open", "mailto:" & mailAddress & "?subject=" & project & " - Parameter Worksheet Approval&body=For project " & project & ", I approve the Parameter Worksheet with filename " & ActiveWorkbook.Name, vbNullString, vbNullString, SW_SHOWNORMAL)
    End If

End Sub

'Clicking the Define Category and Filter button or called when opening the APW for the first time
'This will set up the view on the APW by calling the filterInitialView function
Sub EditLinks()
    
   For Each ws In Worksheets
     If ws.Name <> "Brand_Product" And ws.Name <> "Lookup" And ws.Name <> "CTS Report" And ws.Name <> "Eform Data" And ws.Name <> "MDS Single Message - Stand-In" And ws.Name <> "Durbin_Eligible_Brand_Products" And ws.Name <> "Durbin_Eligible_Countries" Then
       ws.Visible = True
     End If
   Next
   
   Call filterInitialView
   cat = Int(Left(Sheets("Project Overview").Range("E3").value, 3))
   If cat = 203 Or cat = 205 Then
     Sheets("Project Overview").Range("PO_Conv").EntireRow.hidden = False
   End If
    
End Sub

'This function will prompt the user with the UserForm3 and store the values of the fields into the Lookup sheet
'The filterSheets function will be called for the platform, business type, region and subcategory to set the applicable view
Sub filterInitialView()

    UserForm3.Show
    region = Sheets("Lookup").Range("J1").value
    subcategory = Sheets("Lookup").Range("J2").value
    business = Sheets("Lookup").Range("J3").value
    platform = Sheets("Lookup").Range("J4").value

    Call filterSheets(CStr(platform))
    Call filterSheets(CStr(business))
    Call filterSheets(CStr(region))
    Call filterSheets(Left(subcategory, 3))
    
    Application.EnableEvents = False
    Sheets("Project Overview").Range("E3").value = subcategory
    Application.EnableEvents = True
    
    Sheets("Lookup").Visible = False
    
End Sub

'Based on the provided key, this will retrieve the sheets or sections of sheets that will have to be hidden and will hide these.
Sub filterSheets(key As String)

    On Error GoTo end_filter
    i = 2
    sheetName = Application.HLookup(key, Range("Lookup!L1:CN15"), i, False)
    Do While Len(sheetName) > 1
      If InStr(sheetName, "!") > 0 Then
        sheetInScope = Left(sheetName, InStr(sheetName, "!") - 1)
        rangeInScope = Right(sheetName, Len(sheetName) - InStr(sheetName, "!"))
        If Sheets(sheetInScope).Visible Then
          Sheets(sheetInScope).Range(rangeInScope).EntireRow.hidden = True
        End If
      ElseIf Sheets(sheetName).Visible Then
        Sheets(sheetName).Visible = False
      End If
      i = i + 1
      sheetName = Application.HLookup(key, Range("Lookup!L1:CN15"), i, False)
    Loop
end_filter:
End Sub

'Applying the Customer view onto the APW
'This will call the filterLines function to hide the lines to be hidden for the given region
'The Change Management History tab will be filtered to only show the Rejected changes
'The APW will be password protected to avoid to add or remove sheets, etc. This is a light password protection just aiming at avoiding accidents.
Sub filterCustomerView()

    Application.ScreenUpdating = False
    
    region = Sheets("Lookup").Range("J1").value
    
    Call filterLines(CStr(region), True)
    
    If Sheets("Lookup").Range("J3").value = "Acquiring only" Then
      Sheets("Dual Message - Acquiring").Select
      Range("A37:A73").EntireRow.hidden = True
    End If
    
    If Sheets("Dual Message - Issuing").Visible Then
      Sheets("Dual Message - Issuing").Select
      If Not (IsError(Application.HLookup("Yes", Range("76:76"), 1, False))) Then
        Range("76:76").EntireRow.hidden = False
      End If
      c = 4
      Do While Len(Cells(14, c).value) > 0
        Cells(24, c).Select
        Selection.Validation.Delete
        Selection.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0 - ACQUIRER ONLY - NO STAND-IN,1 - STAND-IN PARTICIPANT,2 - ALTERNATE ISSUER HOST PROCESSING,5 - EXTENDED STAND-IN PARTICIPANT,6 - CAPS PARTICIPANT"
        c = c + 2
      Loop
      Range("A1").Select
    End If
    
    Sheets("Change Management - History").Visible = True
    Sheets("Change Management - History").Select
    ActiveSheet.Range("$A$1:$I$6").AutoFilter Field:=3, Criteria1:="Reject"
    
    If Sheets("Lookup").Range("J1").value <> "EUROPE" Then
      For Each ws In ActiveWorkbook.Sheets
        If ws.Visible Then
          ws.Select
          ActiveWindow.DisplayHeadings = False
        End If
      Next ws
    End If
    Sheets("Project Overview").Select
    ActiveSheet.Shapes("Button 2").Visible = False
    ActiveSheet.Shapes("Button 4").Visible = False
    ActiveSheet.Shapes("Button 8").Visible = False
    ActiveWorkbook.Protect Password:="qzsedr23", Structure:=True, Windows:=False
    
    Application.ScreenUpdating = True

End Sub

'Applying the MasterCard view onto the APW
'The password protection on the APW will be removed
'This will call the filterLines function to unhide the hidden lines for the given region
'The Change Management History tab filter will be removed
Sub filterMasterCardView()

    Application.ScreenUpdating = False

    ActiveWorkbook.Unprotect Password:="qzsedr23"
    region = Sheets("Lookup").Range("J1").value
    
    For Each ws In ActiveWorkbook.Sheets
      If ws.Visible Then
        ws.Select
        ActiveWindow.DisplayHeadings = True
      End If
    Next ws
    
    Call filterLines(CStr(region), False)
    
    If Sheets("Lookup").Range("J3").value = "Acquiring only" Then
      Sheets("Dual Message - Acquiring").Select
      Range("A37:A73").EntireRow.hidden = False
    End If
    
    If Sheets("Dual Message - Issuing").Visible Then
      Sheets("Dual Message - Issuing").Select
      c = 4
      Do While Len(Cells(14, c).value) > 0
        Cells(24, c).Select
        Selection.Validation.Delete
        Selection.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="0 - ACQUIRER ONLY - NO STAND-IN,1 - STAND-IN PARTICIPANT,2 - ALTERNATE ISSUER HOST PROCESSING,3 - PRIMARY ROUTE ONLY - NO STAND-IN,5 - EXTENDED STAND-IN PARTICIPANT,6 - CAPS PARTICIPANT"
        c = c + 2
      Loop
      Range("A1").Select
    End If
    
    Sheets("Change Management - History").Visible = True
    Sheets("Change Management - History").Select
    ActiveSheet.Range("$A$1:$I$6").AutoFilter Field:=3
    Sheets("Project Overview").Select
    ActiveSheet.Shapes("Button 2").Visible = True
    ActiveSheet.Shapes("Button 4").Visible = True
    ActiveSheet.Shapes("Button 8").Visible = True
    
    Application.ScreenUpdating = True

End Sub

'For the provided key, the lines provided in the applicable section of the Lookup sheet will be hidden or unhidden, nased on the hidden parameter
Sub filterLines(key As String, hidden As Boolean)

    i = 2
    sheetName = Application.HLookup(key, Range("Lookup!AE21:AP100"), i, False)
    Do While Len(sheetName) > 1
        from = Application.HLookup(key & " - FROM", Range("Lookup!AE21:AP100"), i, False)
        through = Application.HLookup(key & " - THROUGH", Range("Lookup!AE21:AP100"), i, False)
        If IsEmpty(from) Then
          Sheets(sheetName).Visible = Not hidden
        ElseIf Sheets(sheetName).Visible Then
          Sheets(sheetName).Select
          Range("A" & from & ":A" & through).EntireRow.hidden = hidden
        End If
        i = i + 1
        sheetName = Application.HLookup(key, Range("Lookup!AE21:AP100"), i, False)
    Loop
    
End Sub

'Unhides all sheets in the spreadsheet
Sub UnhideAllSheets()
    Dim wsSheet As Worksheet

    For Each wsSheet In ActiveWorkbook.Worksheets
        wsSheet.Visible = xlSheetVisible
    Next wsSheet
End Sub

'Marks a tab as completed
'Not used
Sub tabCompleted(tabName As String, value As Integer)
  
  Sheets("CTS Report").Cells(Application.Match(tabName, Sheets("CTS Report").Range("B7:B14"), 0) + 6, 3) = value
    
End Sub

'Displayes the services
'Not used
Public Function FindServices(TRange As Range, MatchWith As String, col As Integer)

If Sheets("CTS Report").Visible Then
For Each cell In TRange
If cell.value = MatchWith Then
 Dim screenName As String
 rownum = cell.Row
 colnum = cell.Column
 Do While Len(TRange.Worksheet.Cells(rownum, 2)) = 0
  rownum = rownum - 1
 Loop
 screenName = TRange.Worksheet.Cells(rownum, 2).value
 X = X & screenName & " - " & cell.Offset(0, -1 * (col - 3)).value & Chr(10)
End If
Next cell

FindServices = Left(X, (Len(X) - 1))
Else
FindServices = ""
End If

End Function

'Formats the MDS processor IDs in scope of the request
'This was used along with the Lotus Notes E-forms and is no longer used
Public Function MDS()

  If Sheets("MDS Single Message").Visible = True Then
    If Sheets("Lookup").Range("J1") = "EUROPE" Then
      If Sheets("Dual Message - Issuing").Visible = True Then
        If Sheets("Dual Message - Acquiring").Visible = True Then
          MDS = " / MDS 752,764"
        Else
          MDS = " / MDS 764"
        End If
      Else
        If Sheets("Dual Message - Acquiring").Visible = True Then
          MDS = " / MDS 752"
        Else
          MDS = " / No MDS"
        End If
      End If
    Else
      Dim procs As Collection
      Set procs = New Collection
      
      idfStartRow = Range("IDF").Row + 21
      idfEndRow = Range("IDF").Row + 25
      idfStartCol = Range("IDF").Column + 1
      idfEndCol = idfStartCol + Range("IDF").Columns.Count - 1
      idfRange = Range(Sheets("MDS Single Message").Cells(idfStartRow, idfStartCol), Sheets("MDS Single Message").Cells(idfEndRow, idfEndCol))
      On Error Resume Next
      For Each proc In idfRange
        If CInt(proc) <> 0 Then
          procs.Add CStr(CInt(proc)), CStr(Int(proc))
        End If
      Next proc
      
      irtStartRow = Range("IRT").Row + 29
      irtEndRow = Range("IRT").Row + 36
      irtStartCol = Range("IRT").Column + 1
      irtEndCol = irtStartCol + Range("IRT").Columns.Count - 1
      irtRange = Range(Sheets("MDS Single Message").Cells(irtStartRow, irtStartCol), Sheets("MDS Single Message").Cells(irtEndRow, irtEndCol))
      On Error Resume Next
      For Each proc In irtRange
        If CInt(proc) <> 0 Then
          procs.Add CStr(CInt(proc)), CStr(Int(proc))
        End If
      Next proc
      
      result = " / MDS "
      For Each proc In procs
        result = result & proc & ", "
      Next proc
      MDS = Left(result, Len(result) - 2)
    End If
  Else
    MDS = " / No MDS"
  End If

End Function

'Returns Yes or No based on whether the provided sht sheet is visible or not.
Function changes(sht As String)
 
  If Sheets(sht).Visible Then
    changes = "Yes"
  Else
    changes = "No"
  End If

End Function

'Formats the NSIF numbers in scope of the request
'This was used along with the Lotus Notes E-forms and is no longer used
Function nsifs()

  setStart = Sheets("Settlement").Range("ICA_Options_Settlement_Info").Row + 2
  setEnd = setStart + Sheets("Settlement").Range("ICA_Options_Settlement_Info").Rows.Count - 4
  i = setStart
  result = ""
  Do While i <= setEnd
    If Len(Sheets("Settlement").Range("O" & i).value) > 0 Then
      result = result & Sheets("Settlement").Range("O" & i).value & ", "
    End If
    i = i + 1
  Loop
  If Len(result) > 0 Then
    nsifs = "Activities Due: NSIF Numbers: " & Left(result, Len(result) - 2)
  Else
    nsifs = "No Activities"
  End If

End Function

'Refreshes the services lines
Function refreshServices()
    Rows("20:520").EntireRow.AutoFit
End Function

'Called when a change is applied to a tab of the APW
'This will manage the tracking of the changes in the APW by building the log in the Change Management tab.
Function markCellAsUpdated(Target As Range)
    
 customerView = Sheets("Project Overview").Range("E4").value = "Customer"
 If Target.Row = 1 Then
   If Target.Rows.Count = ActiveSheet.Rows.Count Then
     If customerView Then
       Application.EnableEvents = False
       addr = Target.Address
       Application.Undo
       Set Target = Range(addr)
       Application.EnableEvents = True
       MsgBox "Adding/Removing a column is not allowed", vbOKOnly, "Stop"
     End If
     Exit Function
   End If
 End If
 If Target.Column = 1 Then
   If Target.Columns.Count = ActiveSheet.Columns.Count Then
     If customerView Then
       Application.EnableEvents = False
       addr = Target.Address
       Application.Undo
       Set Target = Application.Range(addr)
       Application.EnableEvents = True
       MsgBox "Adding/Removing a row is not allowed", vbOKOnly, "Stop"
     End If
     Exit Function
  End If
 End If
   
 If Sheets("Project Overview").Range("A2") = True Then
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
    
  If Target.Cells.Count > 1 Then 'And Not Len(Target.Cells.Item(1)) = 0 Then 'second part used to cover deleting multiple cells at once
  
    'If MsgBox("No entry in Change Management will be made. Do you want to color this cell in green?", vbYesNo) = vbYes Then
    '  Target.Interior.Color = 8647549
    'End If
    If Len(Target.Cells.Item(1)) = 0 Then
      If MsgBox("Do you want to keep the previous values but struck through?", vbYesNo) = vbYes Then
        Application.Undo
        For Each cl In Target.Cells
          cl.Font.Strikethrough = True
          cl.Font.Color = -16776961
        Next cl
      End If
    End If
    Index = Range("'Change Management'!H1").value + 2
    Range("'Change Management'!A" & Index) = Now()
    Range("'Change Management'!B" & Index) = Application.UserName
    Range("'Change Management'!C" & Index) = ActiveSheet.Name
    Range("'Change Management'!D" & Index) = Target.Address
    addr = "'Change Management'!D" & Index
    Range(addr).Hyperlinks.Add Anchor:=Range(addr), Address:="", SubAddress:=addr
 
 Else
    
    newValue = Target.Cells.Item(1).Text 'Added .Text to get displayed (formatted) value and not real value
    dest = ActiveCell.Address
    On Error GoTo unable_to_undo
  
    Application.Undo
    oldvalue = Target.value

    If Len(newValue) > 0 Then
      Target.value = "'" & newValue
    Else
      If MsgBox("Do you want to keep the previous value but struck through?", vbYesNo) = vbYes Then
        Target.Font.Strikethrough = True
        Target.Font.Color = -16776961
      Else
        Target.value = newValue
      End If
    End If
  
    Index = Range("'Change Management'!H1").value + 2
  
    Range("'Change Management'!A" & Index) = Now()
    Range("'Change Management'!B" & Index) = Application.UserName
    Range("'Change Management'!C" & Index) = ActiveSheet.Name
    Range("'Change Management'!D" & Index) = "=ADDRESS(ROW('" & ActiveSheet.Name & "'!" & Target.Address & "),COLUMN('" & ActiveSheet.Name & "'!" & Target.Address & "))"
    Range("'Change Management'!E" & Index) = "'" & oldvalue
    Range("'Change Management'!F" & Index) = "'" & newValue
  
    addr = "'Change Management'!C" & Index
    Range(addr).Hyperlinks.Add Anchor:=Range(addr), Address:="", SubAddress:=addr

    addr = "'Change Management'!D" & Index
    Range(addr).Hyperlinks.Add Anchor:=Range(addr), Address:="", SubAddress:=addr
    
    GoTo successful
  
unable_to_undo:
  
    Target.value = "'" & newValue
    'If MsgBox("Unable to retrieve previous value. Do you want to color this cell in green?", vbYesNo) = vbYes Then
    '  Target.Interior.Color = 8647549
    'End If
    Index = Range("'Change Management'!H1").value + 2
    Range("'Change Management'!A" & Index) = Now()
    Range("'Change Management'!B" & Index) = Application.UserName
    Range("'Change Management'!C" & Index) = ActiveSheet.Name
    Range("'Change Management'!D" & Index) = Target.Address
    Range("'Change Management'!E" & Index) = newValue
    Range("'Change Management'!F" & Index) = "Unknown"
    addr = "'Change Management'!D" & Index
    Range(addr).Hyperlinks.Add Anchor:=Range(addr), Address:="", SubAddress:=addr
    
successful:
    If Range(Target.Address).Comment Is Nothing Then
      If Not (IsError(oldvalue)) Then
        Range(Target.Address).AddComment "Original value was '" & oldvalue & "'"
      Else
        Range(Target.Address).AddComment "Original value was having an error"
      End If
    End If
    Range(dest).Select
    markCellAsUpdated = oldvalue
    
  End If
    
  Application.Calculation = xlCalculationAutomatic
  Call validateBusinessRules(Target)
  Application.EnableEvents = True
 
 End If
  
End Function

'This will add an entry to the Change Management History tab, based on the provided parameters.
Function addHistory(timestamp As Date, user As String, decision As String, origTimestamp As String, origUser As String, sheetName As String, cellAddr As String, previousValue As String, newValue As String)
  
  Index = Range("'Change Management - History'!K1").value + 2
  
  Range("'Change Management - History'!A" & Index) = timestamp
  Range("'Change Management - History'!B" & Index) = user
  Range("'Change Management - History'!C" & Index) = decision
  If decision = "Reject" Then
    reason = InputBox("Please provide a short description for the customer to understand why this update was not accepted", "Reason")
    If Len(reason) > 0 Then
      Range("'Change Management - History'!C" & Index).AddComment
      Range("'Change Management - History'!C" & Index).Comment.Text reason
    End If
  End If
  Range("'Change Management - History'!D" & Index) = origTimestamp
  Range("'Change Management - History'!E" & Index) = origUser
  Range("'Change Management - History'!F" & Index) = sheetName
  Range("'Change Management - History'!G" & Index).Formula = "=HYPERLINK(""#'" & sheetName & "'!""&" & Right(cellAddr, Len(cellAddr) - 1) & "," & Right(cellAddr, Len(cellAddr) - 1) & ")"
  Range("'Change Management - History'!H" & Index) = previousValue
  Range("'Change Management - History'!I" & Index) = newValue
  

End Function

'Applies the Freeze Panes structure to the agreed fields in the Dual Message Isuing and Stand-In tabs
Function freezePanesCTS()
  If Sheets("Dual Message - Issuing").Visible Then
    Sheets("Dual Message - Issuing").Select
    Range("D16").Select
    ActiveWindow.FreezePanes = True
    Range("A1:D1").Select
  End If
  If Sheets("Dual Message - Stand-In").Visible Then
    Sheets("Dual Message - Stand-In").Select
    Range("E20").Select
    ActiveWindow.FreezePanes = True
    Range("A1:M1").Select
  End If
  Sheets("Project Overview").Select
End Function

'Avoids any further updates to be made to the Dual Message and Single Message tabs to avoid accidental updates (e.g. by CCM)
Function protectFile()

  Application.Calculation = xlCalculationManual
  If Sheets("Dual Message - Acquiring").Visible Then
    Sheets("Dual Message - Acquiring").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    For Each curcell In Selection
      If curcell.Interior.Color = 10092543 Then
        curcell.Font.Color = 10092543
      End If
    Next curcell
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:G1").Select
  End If
  
  If Sheets("Dual Message - Stand-In").Visible Then
    Sheets("Dual Message - Stand-In").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    For Each curcell In Selection
      If curcell.Interior.Color = 10092543 Then
        curcell.Font.Color = 10092543
      End If
    Next curcell
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:M1").Select
  End If

  If Sheets("Dual Message - Issuing").Visible Then
    Sheets("Dual Message - Issuing").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    For Each curcell In Selection
      If curcell.Interior.Color = 10092543 Then
        curcell.Font.Color = 10092543
      End If
    Next curcell
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("D13").Select
    Range("A1:D1").Select
  End If

  If Sheets("Dual Message - ICA").Visible Then
    Sheets("Dual Message - ICA").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    For Each curcell In Selection
      If curcell.Interior.Color = 10092543 Then
        curcell.Font.Color = 10092543
      End If
    Next curcell
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:N1").Select
  End If

  If Sheets("Dual Message - Processor").Visible Then
    Sheets("Dual Message - Processor").Select
    If Cells(Range("P_IPLP").Row - 1, 2).value Then
      startrow = Range("P_IPLP").Row + 4
      endrow = Range("P_IPLP").Row + 10
      Rows(startrow & ":" & endrow).EntireRow.hidden = True
    End If
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    For Each curcell In Selection
      If curcell.Interior.Color = 10092543 Then
        curcell.Font.Color = 10092543
      End If
    Next curcell
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:L1").Select
  End If
  
  If Sheets("MDS Single Message").Visible Then
    Sheets("MDS Single Message").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:G1").Select
  End If
  
  If Sheets("MDS Single Message - Add Data").Visible Then
    Sheets("MDS Single Message - Add Data").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1:G1").Select
  End If
  
  Sheets("Project Overview").Select
    
  Application.Calculation = xlCalculationAutomatic
    
End Function

'Handles the change that is in scope by applying the applicable updates based on the provided answer
'Will also call the addHistory function.
Function applyCMUpdate(Target As Range, answer As VbMsgBoxResult)

  targetRow = Target.Row()
      
  Dim decision As String
  Dim origTimestamp As String
  Dim origUser As String
  Dim sheetName As String
  Dim cellAddr As String
  Dim previousValue As String
  Dim newValue As String
  
  origTimestamp = Range("A" & targetRow).value
  origUser = Range("B" & targetRow).value
  sheetName = Range("C" & targetRow).value
  cellAddr = Range("D" & targetRow).value
  On Error GoTo wrongValue
  previousValue = Range("E" & targetRow).value
  GoTo go_on
wrongValue:
  previousValue = "N/A"
go_on:
  newValue = Range("F" & targetRow).value
  
  Select Case answer
  
    Case vbYes
    
      Sheets(sheetName).Range(cellAddr).Interior.Color = 8647549
      If sheetName = "Dual Message - Issuing" Then
        Select Case Int(Right(cellAddr, Len(cellAddr) - InStrRev(cellAddr, "$")))
          Case 38
            Sheets(sheetName).Range(Replace(cellAddr, "38", "50")).Interior.Color = 8647549
          Case 127
            Sheets(sheetName).Range(Replace(cellAddr, "127", "147")).Interior.Color = 8647549
            Sheets(sheetName).Range(Replace(cellAddr, "127", "1490")).Interior.Color = 8647549
          Case 128
            Sheets(sheetName).Range(Replace(cellAddr, "128", "148")).Interior.Color = 8647549
            Sheets(sheetName).Range(Replace(cellAddr, "128", "150")).Interior.Color = 8647549
          Case 140
            Sheets(sheetName).Range(Replace(cellAddr, "140", "144")).Interior.Color = 8647549
          Case 141
            Sheets(sheetName).Range(Replace(cellAddr, "141", "145")).Interior.Color = 8647549
          Case 142
            Sheets(sheetName).Range(Replace(cellAddr, "142", "146")).Interior.Color = 8647549
          Case 129
            Sheets(sheetName).Range(Replace(cellAddr, "129", "151")).Interior.Color = 8647549
          Case 130
            Sheets(sheetName).Range(Replace(cellAddr, "130", "152")).Interior.Color = 8647549
          Case 135
            Sheets(sheetName).Range(Replace(cellAddr, "135", "158")).Interior.Color = 8647549
          Case 138
            Sheets(sheetName).Range(Replace(cellAddr, "138", "155")).Interior.Color = 8647549
          Case 139
            Sheets(sheetName).Range(Replace(cellAddr, "139", "156")).Interior.Color = 8647549
        End Select
      End If
      If sheetName = "Dual Message - Acquiring" And Right(cellAddr, 2) = "61" Then
        Sheets(sheetName).Range(Replace(cellAddr, "61", "72")).Interior.Color = 8647549
      End If
      decision = "Accept"
    
    Case vbNo
    
      Application.EnableEvents = False
      Sheets(sheetName).Range(cellAddr) = previousValue
      If Len(newValue) = 0 Then
        Sheets(sheetName).Range(cellAddr).Font.Strikethrough = False
      End If
      Application.EnableEvents = True
      decision = "Reject"
    
    Case vbCancel
    
      Sheets(sheetName).Range(cellAddr).Interior.Color = 10092543
      decision = "Cancel"
  
  End Select
  
  Call addHistory(Now(), Application.UserName, decision, origTimestamp, origUser, sheetName, Range("D" & targetRow).Formula, previousValue, newValue)
  Range("A" & targetRow).EntireRow.Delete

End Function

'Returns whether the provided range has a green background color.
Function isGreen(Target As Range)
  isGreen = Target.Interior.Color = 8647549
End Function

'Hitting the Change Values throughout document button
'This function will prompt the user for the current value and future value and then go through all sheets to make the change.
'Change tracking will be deactivated during this process.
Sub changeValues()
  
If MsgBox("This is a dangerous feature and will replace any instance of the value. Are you sure you want to proceed?", vbYesNo, "Warning") = vbYes Then
  On Error GoTo restoreTracking
  Range("A2") = False
  oldvalue = InputBox("Current value")
  If oldvalue <> "" Then
    newValue = InputBox("Future value")
    If newValue <> "" Then
      If Left(newValue, 1) <> "'" Then
        newValue = "'" & newValue
      End If
      Application.Calculation = xlCalculationManual
      Application.ReplaceFormat.Interior.Color = 8647549
      Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      If Sheets("Member Information").Visible Then
        Sheets("Member Information").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Mastercard Global Service").Visible Then
        Sheets("Mastercard Global Service").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("MasterCom").Visible Then
        Sheets("MasterCom").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Connectivity").Visible Then
        Sheets("Connectivity").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Billing Services").Visible Then
        Sheets("Billing Services").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("MDS Single Message").Visible Then
        Sheets("MDS Single Message").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("MDS Single Message - Add Data").Visible Then
        Sheets("MDS Single Message - Add Data").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("MDS Single Message - Stand-In").Visible Then
        Sheets("MDS Single Message - Stand-In").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Dual Message - Processor").Visible Then
        Sheets("Dual Message - Processor").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Dual Message - ICA").Visible Then
        Sheets("Dual Message - ICA").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Dual Message - Issuing").Visible Then
        Sheets("Dual Message - Issuing").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Dual Message - Stand-In").Visible Then
        Sheets("Dual Message - Stand-In").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      If Sheets("Dual Message - Acquiring").Visible Then
        Sheets("Dual Message - Acquiring").Select
        Cells.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
      End If
      Sheets("Project Overview").Select
    End If
  End If

restoreTracking:
  Range("A2") = True
  Application.Calculation = xlCalculationAutomatic
   
End If

End Sub

'Add a new column in the MIP section
Sub addMIP()
  Call addColumn("C_MIP_Build", 1)
End Sub

'Add a new column in the Endpoint section
Sub addEndpoint()
  Call addColumn("C_ENDPOINT", 3, 2)
End Sub

'Add a new column in the Member ID section
Sub addMemberID()
 Call addColumn("C_MEMBER_ID", 2, 2)
End Sub

'Add a new column in the MIP ID section
Sub addMIPID()
  Call addColumn("C_MIP_ID", 2, 2)
End Sub

'Add a new column in the Bulk Reroute section
Sub addBulkReroute()
  Call addColumn("C_REROUTE", 2, 2)
End Sub

'Adds the provided number of columns at the far right of the given named range
Sub addColumn(namedRange As String, numberOfColumns As Integer, Optional rowShift As Integer = 0)

  On Error GoTo reenable
  Application.EnableEvents = False
  col = Range(namedRange).Column
  startrow = Range(namedRange).Row
  endrow = Range(namedRange).Row + Range(namedRange).Rows.Count - 1
  Do While Len(Cells(startrow + rowShift, col + numberOfColumns)) > 0
    col = col + numberOfColumns
  Loop
  Range(Cells(startrow, col), Cells(endrow, col)).Select
  Selection.AutoFill Destination:=Range(Cells(startrow, col), Cells(endrow, col + (2 * numberOfColumns - 1))), Type:=xlFillCopy
  Range(Cells(startrow, col + numberOfColumns), Cells(endrow, col + (2 * numberOfColumns - 1))).Name = namedRange
  Cells(startrow, col + numberOfColumns).Select
reenable:
  Application.EnableEvents = True
  
End Sub

'Adds a line to the MIP configuration section
Sub addMIPLine()

  On Error GoTo reenable
  Application.EnableEvents = False
  Call addRangeLine("C_COMPTCPMA")
  Selection.value = Cells(Selection.Row - 1, Selection.Column).value + 1
  Call addRangeLine("C_TCP")
  Selection.value = Cells(Selection.Row - 1, Selection.Column).value + 1
  Call addRangeLine("C_OPT_PARM")
  Selection.value = Cells(Selection.Row - 1, Selection.Column).value + 1
  
  Cells(Range("C_COMPTCPMA").Row, Range("C_COMPTCPMA").Column + 1).Select
reenable:
  Application.EnableEvents = True

End Sub

'Adds a line at the far bottom of the provided named range.
Private Function addRangeLine(namedRange As String)

  startrow = Range(namedRange).Row
  startcol = Range(namedRange).Column
  endcol = Range(namedRange).Column + Range(namedRange).Columns.Count - 1
  Do While Not (Cells(startrow + 1, startcol).Interior.Color = 16777215)
    startrow = startrow + 1
  Loop
  Rows(startrow + 1).Select
  Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
  Range(Cells(startrow, startcol), Cells(startrow, endcol)).Select
  Selection.AutoFill Destination:=Range(Cells(startrow, startcol), Cells(startrow + 1, endcol)), Type:=xlFillCopy
  Cells(startrow + 1, startcol).Select
  'Range(Cells(startrow + 1, startcol), Cells(startrow + 1, endcol)).Name = namedRange

End Function

'Adds a line to the BIN section
Sub addBINLine()
   
   rownumber = Range("PO_BINS_1ST").Row
   Call addRangeLine("B" & rownumber & ":I" & rownumber)

End Sub

'Adds a line to the Other Reports section
Sub addReportLine()

   rownumber = Range("ICA_REP_OTHER").Row
   Call addRangeLine("C" & rownumber & ":F" & rownumber)

End Sub

'Imports the standard GFT Template into the GFT section
'If the scope includes Russia, the additional ROSS bulk types are loaded as well.
Sub importGFTTemplate()
    
On Error GoTo import_fail
    Application.EnableEvents = False
    startrow = Range("C_GFT").Row
    startcol = Range("C_GFT").Column
    Do While Not (Cells(startrow + 1, startcol).Interior.Color = 16777215)
      startrow = startrow + 1
    Loop
    i = 273
    Do While i < 301
      Cells(startrow + i - 273, 4).value = Sheets("Lookup").Range("G" & i).value
      Cells(startrow + i - 273, 6).value = Sheets("Lookup").Range("H" & i).value
      If Sheets("Project Overview").Range("I16").value = "643" Then
        Cells(startrow + i - 273, 16).value = Sheets("Lookup").Range("I" & i).value
      End If
      i = i + 1
      Call addGFTLine
    Loop
    If Sheets("Project Overview").Range("I16").value = "643" Then
      i = 302
      Do While i < 314
        Cells(startrow + i - 274, 4).value = Sheets("Lookup").Range("G" & i).value
        Cells(startrow + i - 274, 6).value = Sheets("Lookup").Range("H" & i).value
        Cells(startrow + i - 274, 16).value = Sheets("Lookup").Range("I" & i).value
        i = i + 1
        Call addGFTLine
      Loop
    End If
    Cells(startrow + i - 273, 4).value = ""
    Cells(startrow + i - 273, 6).value = ""
import_fail:
    Application.EnableEvents = True
    Application.Calculate

End Sub

'Adds a line to the GFT section
Sub addGFTLine()

   rownumber = Range("C_GFT").Row
   Call addRangeLine("C" & rownumber & ":O" & rownumber)

End Sub

'Adds a line to the EDS Emails section
Sub addEDSEmailLine()

   startrow = Range("EDS_EMAIL").Row
   Do While Len(Range("B" & startrow + 1)) > 0
     startrow = startrow + 1
   Loop
   Rows(startrow + 1).Select
   Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
   Range(Cells(startrow, 2), Cells(startrow, 3)).Select
   Selection.AutoFill Destination:=Range(Cells(startrow, 2), Cells(startrow + 1, 3)), Type:=xlFillCopy
   Cells(startrow + 1, 3).Select

End Sub

'Adds a line to the MGOS section
Sub addMGOSLine()

   rownumber = Range("C_MGOS").Row
   Call addRangeLine("C" & rownumber & ":G" & rownumber)
   
End Sub

'Adds a line to the RRVPN section
Sub addRRVPNLine()
   rownumber = Range("C_RRVPN").Row
   Call addRangeLine("C" & rownumber & ":H" & rownumber)
End Sub

'Adds a line to the Static Routes section
Sub addStaticRouteLine()
   rownumber = Range("C_SRT").Row
   Call addRangeLine("C" & rownumber & ":F" & rownumber)
End Sub

'Adds a line to the Group Address section
Sub addGroupAddressLine()
   rownumber = Range("C_GA").Row
   Call addRangeLine("C" & rownumber & ":E" & rownumber)
End Sub

'Adds a line to the MasterCard Global Service Emergency Services In Country section
Sub addESIn()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_ES_IN")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service Emergency Services Out of Country section
Sub addESOut()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_ES_OUT")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service MAC section
Sub addMAC()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_MAC")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service MAC Premium section
Sub addMACPrem()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_MAC_PREM")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service General Cardholder Requests In Country section
Sub addGCRIn()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_GCR_IN")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service General Cardholder Requests out of Country section
Sub addGCROut()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_GCR_OUT")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service Service Provider BIN section
Sub addSPBIN()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_SP_ICA_BIN")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Adds a line to the MasterCard Global Service ICA - BIN section
Sub addICABIN()
  On Error Resume Next
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  Call addRangeLine("MGS_ICA_BIN")
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
End Sub

'Retuns the row number of the first found Type of Change field going upwards from the provided range.
Function getTypeOfChangeRow(ByVal Target As Range, labelColumn As Integer)
  
  rownumber = Range(Target.Address).Row
  Do While (Trim(UCase(Cells(rownumber, labelColumn))) <> "TYPE OF CHANGE") Or (Cells(rownumber, labelColumn).EntireRow.hidden)
    rownumber = rownumber - 1
  Loop
  getTypeOfChangeRow = rownumber

End Function

'Formats the provided table in the Key Identifier sheet
Function formatKeyIdentifierTable(namedRange As String, delimiter As String, Optional removeDuplicates As Boolean = False, Optional numberOfLines As Integer = 1)
  
  i = Range(namedRange).Row
  col = Range(namedRange).Column
  endcol = col + Range(namedRange).Columns.Count - 1
  Do While Cells(i, col) <> delimiter
    Rows(i + numberOfLines & ":" & i + numberOfLines + numberOfLines - 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Range(Cells(i, col), Cells(i, endcol)).Select
    Selection.AutoFill Destination:=Range(Cells(i, col), Cells(i + numberOfLines + numberOfLines - 1, endcol)), Type:=xlFillDefault
    i = i + numberOfLines
  Loop
  If i > Range(namedRange).Row Then
    Rows(i & ":" & i + numberOfLines - 1).EntireRow.Delete
    i = i - numberOfLines
    If removeDuplicates Then 'And numberOfLines > 1 Then
      ActiveSheet.Range(Cells(Range(namedRange).Row, col), Cells(i, endcol)).removeDuplicates Columns:=1, Header:=xlNo
      Do While Len(Cells(i, col)) = 0
        Rows(i).EntireRow.Delete
        i = i - numberOfLines
      Loop
    End If
 End If
  
End Function

'Resets the tables in the Key Identifiers tab
Function resetTables()
  
  i = Range("GEN_BIN").Row + 1
  Do While (Range("GEN_SS").Row - Range("GEN_BIN").Row) > 3
    Rows(i).EntireRow.Delete
  Loop
  
  i = Range("GEN_SS").Row + 1
  Do While (Range("CONN_HOST").Row - Range("GEN_SS").Row) > 5
    Rows(i).EntireRow.Delete
  Loop
  
  i = Range("CONN_HOST").Row + 1
  Do While (Range("CONN_MIP").Row - Range("CONN_HOST").Row) > 3
    Rows(i).EntireRow.Delete
  Loop

  i = Range("CONN_MIP").Row + 1
  Do While (Range("SM_RT").Row - Range("CONN_MIP").Row) > 13
    Rows(i).EntireRow.Delete
  Loop
  
  i = Range("SM_RT").Row + 5
  Do While (Range("ROUT").Row - Range("SM_RT").Row) > 10
    Rows(i).EntireRow.Delete
  Loop
  
  i = Range("ROUT").Row + 1
  Do While IsError(Cells(i, 1))
    Rows(i).EntireRow.Delete
  Loop

End Function

'Formats the entire Key Identifiers table
Sub formatKeyIdentifiers()
 
 On Error GoTo failed
  Application.EnableEvents = False
  Call resetTables
  Call formatKeyIdentifierTable("GEN_BIN", "")
  Call formatKeyIdentifierTable("GEN_SS", "0", True)
  Call formatKeyIdentifierTable("CONN_HOST", "0", True)
  Call formatKeyIdentifierTable("CONN_MIP", "0")
  Call formatKeyIdentifierTable("SM_RT", "0", , 5)
  Call formatKeyIdentifierTable("ROUT", "0")
  
failed:
  Cells(1, 1).Select
  Application.EnableEvents = True
End Sub

'Prepares the Billing Services tab for printing
Sub printBillingServices()

  If InStr(ActiveWorkbook.Name, " - ") > 0 Then
    NewFile = ActiveWorkbook.Path & "\" & Left(ActiveWorkbook.Name, InStr(ActiveWorkbook.Name, " - ") - 1) & " - " & ActiveSheet.Name
  Else
    NewFile = ActiveWorkbook.Path & "\Billing - " & ActiveWorkbook.Name
  End If
  Range("$A$1:" & ActiveCell.SpecialCells(xlLastCell).Address).Select
  Selection.Copy
  Range("A1").Select
  Application.DisplayAlerts = False
  Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
  Application.DisplayAlerts = True
  Application.CutCopyMode = False
  Range("A1").Select
  ActiveSheet.Copy
  ActiveSheet.PageSetup.PrintArea = "$A$1:" & ActiveCell.SpecialCells(xlLastCell).Address
  ActiveSheet.Shapes("Button 1").Select
  Selection.Cut
  If ActiveSheet.Name = "Billing Services" Then
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:="AqSzEd"
    ActiveSheet.EnableSelection = xlLockedCells
  End If
  Range("A1").Select
  ActiveWorkbook.SaveAs NewFile, xlOpenXMLWorkbookMacroEnabled

End Sub

'Copies the reconciliation options set for endpoint 2075 from the Dual Message Processor tab onto the Dual Message ICA tab
Function copyReconOptions()

  currentSheet = ActiveSheet.Name
  'On Error Resume Next
  'i = 1
  'Do While Int(Sheets("Dual Message - Processor").Range("D" & i).value) <> 2075
  '  i = i + 1
  'Loop
  'Sheets("Dual Message - Processor").Select
  'Range("H" & i & ":K" & i + 9).Select
  'Selection.Copy
  'Sheets("Dual Message - ICA").Select
  'Range("H21:K30").Select
  Application.EnableEvents = False
  'ActiveSheet.Paste
  Range("H21") = "Y"
  Range("J21") = "Y"
  Range("H22") = "Y"
  Range("J22") = "Y"
  Range("H23") = "Y"
  Range("J23") = "Y"
  Range("H24") = "Y"
  Range("J24") = "Y"
  Range("H25") = "Y"
  Range("J25") = "Y"
  Range("H26") = "N"
  Range("J26") = "N"
  Range("H27") = "N"
  Range("J27") = "N"
  Range("H28") = "N"
  Range("J28") = "N"
  Range("H29") = "N"
  Range("J29") = "N"
  Range("H30") = "Y"
  Application.EnableEvents = True
  Sheets(currentSheet).Select
  MsgBox "Given that you migrated the account range(s) to endpoint 2075, the Endpoint Reconciliation Options have been copied into the ICA Reconciliation Options to ensure the correct processing of transactions.", vbOKOnly

End Function

'Adds a new Affiliate in the Billing Services tab.
Sub addAffiliate()
  
  Lines = Range("Billing_Svcs_Affiliates").Rows.Count
  
  srcstartrow = Range("Billing_svcs_Affiliates").Row
  srcendrow = Range("Billing_svcs_Affiliates").Row + Lines - 1
  
  srcInstance = Right(Range("C" & srcstartrow).value, Len(Range("C" & srcstartrow).value) - InStr(Range("C" & srcstartrow).value, "."))
  
  If srcInstance = 10 Then
    MsgBox "Maximum number of affiliates has been reached", vbOKOnly, "Warning"
    Exit Sub
  End If
  
  deststartrow = srcendrow + 2
  destendrow = deststartrow + Lines - 1
  
  Range("" & deststartrow & ":" & destendrow + 1 & "").EntireRow.Insert
  Range("" & srcstartrow & ":" & srcendrow & "").EntireRow.Select
  Selection.Copy
  Range("A" & deststartrow).Select
  ActiveSheet.Paste
  
  Application.CutCopyMode = False
  
  Range("c" & deststartrow).value = "Affiliate No." & srcInstance + 1
  
  Range("" & deststartrow & ":" & destendrow & "").EntireRow.Name = "Billing_Svcs_Affiliates"
  
  Range("B74").Select
  
End Sub

'Protects the APW to meet Audit requirements
Function protectAudit()
  On Error Resume Next
  Application.EnableEvents = False
  Range("E4").value = ""
  Application.EnableEvents = True
  ActiveWorkbook.Save
  Application.EnableEvents = False
  Range("E4").value = "Audit"
  Application.EnableEvents = True
  For Each ws In ActiveWorkbook.Sheets
    ws.Select
    Cells.Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True, Password:="audit"
    ActiveSheet.EnableSelection = xlLockedCells
    Range("A1").Select
  Next ws
  Sheets("Project Overview").Select
  ActiveWorkbook.Protect "audit", True, False
  ActiveWorkbook.SaveAs ActiveWorkbook.Path & "\Audit - " & ActiveWorkbook.Name
End Function

Function undoUpgrade2010()
Sheets("Auth_Account_Range_Enhanced_Se1").Name = "Auth_Account_Range_Enhanced_Ser"
Sheets("Auth_Account_Range_On_Behalf_S1").Name = "Auth_Account_Range_On_Behalf_Se"
Sheets("Auth_Account_Range_Optional_Se1").Name = "Auth_Account_Range_Optional_Ser"
Sheets("Auth_Account_Range_Processing_1").Name = "Auth_Account_Range_Processing_S"
Sheets("Auth_Acquirer_Processor_Progra1").Name = "Auth_Acquirer_Processor_Program"
Sheets("Banknet_Authorizations___Accou1").Name = "Banknet_Authorizations___Accoun"
Sheets("Banknet_Authorizations___Issue1").Name = "Banknet_Authorizations___Issuer"
Sheets("Clearing_Acquirer_Reference_Bu1").Name = "Clearing_Acquirer_Reference_Bus"
Sheets("Clearing_Issuer_Account_Range_2").Name = "Clearing_Issuer_Account_Range_B"
Sheets("Clearing_Issuer_Account_Range_1").Name = "Clearing_Issuer_Account_Range_C"
Sheets("Clearing_Issuer_Account_Range_3").Name = "Clearing_Issuer_Account_Range_S"
Sheets("Clearing_Processor_Endpoint___1").Name = "Clearing_Processor_Endpoint___C"
Sheets("Clearing_Processor_Endpoint___2").Name = "Clearing_Processor_Endpoint___E"
Sheets("Clearing_Processor_Endpoint___3").Name = "Clearing_Processor_Endpoint___F"
Sheets("GCMS___Acquiring_BIN_parameter1").Name = "GCMS___Acquiring_BIN_parameters"
Sheets("Issuer_Account_Range___GCMS_Pa1").Name = "Issuer_Account_Range___GCMS_par"
Sheets("MasterAssist___Emergency_Servic").Name = "MasterAssist___Emergency_Servi1"
Sheets("MasterAssist___Emergency_Servi3").Name = "MasterAssist___Emergency_Servi2"
Sheets("MasterAssist___General_Cardhold").Name = "MasterAssist___General_Cardhol1"
Sheets("MasterAssist___General_Cardhol3").Name = "MasterAssist___General_Cardhol2"
Sheets("MasterAssist___MAC_Administere1").Name = "MasterAssist___MAC_Administered"
Sheets("MasterAssist___Service_Provide1").Name = "MasterAssist___Service_Provider"
Sheets("MasterAssist___Transfer_All_Ca1").Name = "MasterAssist___Transfer_All_Cal"
Sheets("MasterCom___Chargeback_Default1").Name = "MasterCom___Chargeback_Default_"
Sheets("MasterCom___Receiver___Functio1").Name = "MasterCom___Receiver___Function"
Sheets("MasterCom___Receiver___PC_Rout1").Name = "MasterCom___Receiver___PC_Routi"
Sheets("MasterCom___Receiver___Reason_1").Name = "MasterCom___Receiver___Reason_C"
Sheets("MasterCom___Retrieval_Default_1").Name = "MasterCom___Retrieval_Default_R"
Sheets("MasterCom___Retrieval_Explicit1").Name = "MasterCom___Retrieval_Explicit_"
Sheets("MasterCom___Sender___Function_1").Name = "MasterCom___Sender___Function_C"
Sheets("MasterCom___Sender___PC_Routin1").Name = "MasterCom___Sender___PC_Routing"
Sheets("MasterCom___Sender___Reason_Co1").Name = "MasterCom___Sender___Reason_Cod"
Sheets("Processor_Info___Reconciliatio1").Name = "Processor_Info___Reconciliation"
Sheets("Stand_In_Dual_Message___Accum_2").Name = "Stand_In_Dual_Message___Accum__"
Sheets("Stand_In_Dual_Message___Accum_3").Name = "Stand_In_Dual_Message___Accum_1"
Sheets("Stand_In_Dual_Message___Holida3").Name = "Stand_In_Dual_Message___Holida1"
Sheets("Stand_In_Dual_Message___Holida2").Name = "Stand_In_Dual_Message___Holiday"
Sheets("Stand_In_Dual_Message___Hours_1").Name = "Stand_In_Dual_Message___Hours_o"
Sheets("Stand_In_Dual_Message___Parame3").Name = "Stand_In_Dual_Message___Paramet"
Sheets("Stand_In_Dual_Message___Parame4").Name = "Stand_In_Dual_Message___Parame1"
Sheets("Stand_In_Dual_Message___Parame5").Name = "Stand_In_Dual_Message___Parame2"
Sheets("Stand_In_Dual_Message___Range_1").Name = "Stand_In_Dual_Message___Range_B"
Sheets("Stand_In_Dual_Message___TCC___6").Name = "Stand_In_Dual_Message___TCC___C"
Sheets("Stand_In_Dual_Message___TCC___8").Name = "Stand_In_Dual_Message___TCC___4"
Sheets("Stand_In_Dual_Message___TCC___7").Name = "Stand_In_Dual_Message___TCC___5"
Sheets("Stand_In_Dual_Message___TCC___9").Name = "Stand_In_Dual_Message___TCC___E"
Sheets("Stand_In_Dual_Message___TCC__10").Name = "Stand_In_Dual_Message___TCC___3"
Sheets("Stand_In_Dual_Message___TCC__11").Name = "Stand_In_Dual_Message___TCC___2"
Sheets("Stand_In_Dual_Message___TCC__12").Name = "Stand_In_Dual_Message___TCC___G"
Sheets("Stand_In_Dual_Message___TCC__13").Name = "Stand_In_Dual_Message___TCC___1"
Sheets("Stand_In_Dual_Message___TCC__14").Name = "Stand_In_Dual_Message___TCC___L"
Sheets("Stand_In_Dual_Message___TCC__15").Name = "Stand_In_Dual_Message___TCC___P"

End Function

'Upgrades the sheet names for post Office 2010.
Function upgrade2010()

Sheets("Auth_Account_Range_Enhanced_Ser").Name = "Auth_Account_Range_Enhanced_Se1"
Sheets("Auth_Account_Range_On_Behalf_Se").Name = "Auth_Account_Range_On_Behalf_S1"
Sheets("Auth_Account_Range_Optional_Ser").Name = "Auth_Account_Range_Optional_Se1"
Sheets("Auth_Account_Range_Processing_S").Name = "Auth_Account_Range_Processing_1"
Sheets("Auth_Acquirer_Processor_Program").Name = "Auth_Acquirer_Processor_Progra1"
Sheets("Banknet_Authorizations___Accoun").Name = "Banknet_Authorizations___Accou1"
Sheets("Banknet_Authorizations___Issuer").Name = "Banknet_Authorizations___Issue1"
Sheets("Clearing_Acquirer_Reference_Bus").Name = "Clearing_Acquirer_Reference_Bu1"
Sheets("Clearing_Issuer_Account_Range_B").Name = "Clearing_Issuer_Account_Range_2"
Sheets("Clearing_Issuer_Account_Range_C").Name = "Clearing_Issuer_Account_Range_1"
Sheets("Clearing_Issuer_Account_Range_S").Name = "Clearing_Issuer_Account_Range_3"
Sheets("Clearing_Processor_Endpoint___C").Name = "Clearing_Processor_Endpoint___1"
Sheets("Clearing_Processor_Endpoint___E").Name = "Clearing_Processor_Endpoint___2"
Sheets("Clearing_Processor_Endpoint___F").Name = "Clearing_Processor_Endpoint___3"
Sheets("GCMS___Acquiring_BIN_parameters").Name = "GCMS___Acquiring_BIN_parameter1"
Sheets("Issuer_Account_Range___GCMS_par").Name = "Issuer_Account_Range___GCMS_Pa1"
Sheets("MasterAssist___Emergency_Servi1").Name = "MasterAssist___Emergency_Servic"
Sheets("MasterAssist___Emergency_Servi2").Name = "MasterAssist___Emergency_Servi3"
Sheets("MasterAssist___General_Cardhol1").Name = "MasterAssist___General_Cardhold"
Sheets("MasterAssist___General_Cardhol2").Name = "MasterAssist___General_Cardhol3"
Sheets("MasterAssist___MAC_Administered").Name = "MasterAssist___MAC_Administere1"
Sheets("MasterAssist___Service_Provider").Name = "MasterAssist___Service_Provide1"
Sheets("MasterAssist___Transfer_All_Cal").Name = "MasterAssist___Transfer_All_Ca1"
Sheets("MasterCom___Chargeback_Default_").Name = "MasterCom___Chargeback_Default1"
Sheets("MasterCom___Receiver___Function").Name = "MasterCom___Receiver___Functio1"
Sheets("MasterCom___Receiver___PC_Routi").Name = "MasterCom___Receiver___PC_Rout1"
Sheets("MasterCom___Receiver___Reason_C").Name = "MasterCom___Receiver___Reason_1"
Sheets("MasterCom___Retrieval_Default_R").Name = "MasterCom___Retrieval_Default_1"
Sheets("MasterCom___Retrieval_Explicit_").Name = "MasterCom___Retrieval_Explicit1"
Sheets("MasterCom___Sender___Function_C").Name = "MasterCom___Sender___Function_1"
Sheets("MasterCom___Sender___PC_Routing").Name = "MasterCom___Sender___PC_Routin1"
Sheets("MasterCom___Sender___Reason_Cod").Name = "MasterCom___Sender___Reason_Co1"
Sheets("Processor_Info___Reconciliation").Name = "Processor_Info___Reconciliatio1"
Sheets("Stand_In_Dual_Message___Accum__").Name = "Stand_In_Dual_Message___Accum_2"
Sheets("Stand_In_Dual_Message___Accum_1").Name = "Stand_In_Dual_Message___Accum_3"
Sheets("Stand_In_Dual_Message___Holida1").Name = "Stand_In_Dual_Message___Holida3"
Sheets("Stand_In_Dual_Message___Holiday").Name = "Stand_In_Dual_Message___Holida2"
Sheets("Stand_In_Dual_Message___Hours_o").Name = "Stand_In_Dual_Message___Hours_1"
Sheets("Stand_In_Dual_Message___Paramet").Name = "Stand_In_Dual_Message___Parame3"
Sheets("Stand_In_Dual_Message___Parame1").Name = "Stand_In_Dual_Message___Parame4"
Sheets("Stand_In_Dual_Message___Parame2").Name = "Stand_In_Dual_Message___Parame5"
Sheets("Stand_In_Dual_Message___Range_B").Name = "Stand_In_Dual_Message___Range_1"
Sheets("Stand_In_Dual_Message___TCC___C").Name = "Stand_In_Dual_Message___TCC___6"
Sheets("Stand_In_Dual_Message___TCC___4").Name = "Stand_In_Dual_Message___TCC___8"
Sheets("Stand_In_Dual_Message___TCC___5").Name = "Stand_In_Dual_Message___TCC___7"
Sheets("Stand_In_Dual_Message___TCC___E").Name = "Stand_In_Dual_Message___TCC___9"
Sheets("Stand_In_Dual_Message___TCC___3").Name = "Stand_In_Dual_Message___TCC__10"
Sheets("Stand_In_Dual_Message___TCC___2").Name = "Stand_In_Dual_Message___TCC__11"
Sheets("Stand_In_Dual_Message___TCC___G").Name = "Stand_In_Dual_Message___TCC__12"
Sheets("Stand_In_Dual_Message___TCC___1").Name = "Stand_In_Dual_Message___TCC__13"
Sheets("Stand_In_Dual_Message___TCC___L").Name = "Stand_In_Dual_Message___TCC__14"
Sheets("Stand_In_Dual_Message___TCC___P").Name = "Stand_In_Dual_Message___TCC__15"

End Function

'Activates the ROSS configurations on the Connectivity, Dual Message Processor, Issuing and Acquring tabs
Function activateROSS()
  'Sheets("Dual Message - Processor").Select
  'startrow = Range("PI_CC_LPRUS").Row - 4
  'endrow = Range("PI_CRM").Row - 4
  'Range(startrow & ":" & endrow).Rows.hidden = False
  If Sheets("Dual Message - Issuing").Visible Then
    Sheets("Dual Message - Issuing").Select
    startrow = Range("IDM_C").Row - 5
    endrow = Range("IDM_C").Row - 4
    Range(startrow & ":" & endrow).Rows.hidden = False
    Range(endrow & ":" & endrow).Replace what:="No", replacement:="Yes", MatchCase:=True
  End If
  If Sheets("Dual Message - Acquiring").Visible Then
    Sheets("Dual Message - Acquiring").Select
    Range("92:93").Rows.hidden = False
    Range("92:93").Replace what:="N", replacement:="Y", MatchCase:=True, lookat:=xlWhole
  End If
  If Sheets("Connectivity").Visible Then
    Sheets("Connectivity").Select
    i = Range("C_GFT").Row
    Do While Len(Range("F" & i).value) > 0
      Select Case Range("F" & i).value
        Case "R111", "R119", "RWF1", "RWF3"
          Range("P" & i).value = "Internal"
      End Select
      i = i + 1
    Loop
  End If
  
End Function

'Applies the Business Rule Validations and set the results in the Validations sheet
Function validateBusinessRules(Target As Range)
  
  'Durbin - compare against institution rate
  instRate = Sheets("Project Overview").Range("J12").value
  If IsError(instRate) Then
    instRate = ""
  End If
  cellValue = Cells(Target.Row, Target.Column).value
  If ((Target.Parent.Name = "MDS Single Message") And (Target.Row = 132) And (cellValue <> instRate) And (Len(cellValue) > 0)) _
  Or ((Target.Parent.Name = "Dual Message - Issuing") And (Target.Row = 188) And (Left(cellValue, 1) <> instRate)) Then
    If MsgBox("The indicator you provided is different than the regulatory status of your organization." & vbCrLf & vbCrLf & "Do you confirm this exception?", vbYesNo, "Durbin Validation") = vbYes Then
      commentText = Target.Comment.Text & vbCrLf & vbCrLf & "Customer approved exception."
      Target.Comment.Delete
      Target.AddComment commentText
    Else
      Application.EnableEvents = False
      updateRow = Int(Sheets("Change Management").Range("H1")) + 1
      Target.value = Sheets("Change Management").Range("E" & updateRow)
      Sheets("Change Management").Range("A" & updateRow).EntireRow.Delete
      Application.EnableEvents = True
    End If
  End If
  
  Sheets("Validations").Range("B5:J100").ClearContents
  errline = 5
  
  'Durbin - sync between Dual and Single Message
  If Sheets("MDS Single Message").Visible And Sheets("Dual Message - Issuing").Visible Then
    dmCol = 4
    If Not IsError(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_IARGP").Row, dmCol).Address)) Then
    Do While Len(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_IARGP").Row, dmCol).Address)) > 0
      arf = Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_IARGP").Row, dmCol).Address)
      art = Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_IARGP").Row + 1, dmCol).Address)
      dmd = Left(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_IARGP").Row + 4, dmCol).Address), 1)
      smCol = 4
      Do While Len(Sheets("MDS Single Message").Range(Cells(Application.Sheets("MDS Single Message").Range("MDS_IRT").Row, smCol).Address)) > 0
        bin = Trim(Sheets("MDS Single Message").Range(Cells(Application.Sheets("MDS Single Message").Range("MDS_IRT").Row, smCol).Address))
        rt = Sheets("MDS Single Message").Range(Cells(Application.Sheets("MDS Single Message").Range("MDS_IRT").Row + 1, smCol).Address)
        If Len(Sheets("MDS Single Message").Range(Cells(132, smCol).Address)) > 0 Then
          smd = Left(Sheets("MDS Single Message").Range(Cells(132, smCol).Address), 1)
        Else
          smd = Application.HLookup(rt, Sheets("MDS Single Message").Range(Application.Sheets("MDS Single Message").Range("MDS_IDF").Row & ":" & Application.Sheets("MDS Single Message").Range("MDS_IDF").Row + Application.Sheets("MDS Single Message").Range("MDS_IDF").Rows.Count), 38, False)
          If IsError(smd) Then
            smd = "Unknown"
          Else
            smd = Left(smd, 1)
          End If
        End If
        If (Left(arf, Len(bin)) <= bin) And (Left(art, Len(bin)) >= bin) And (smd <> dmd) Then
          Sheets("Validations").Range("B" & errline) = "'" & arf
          Sheets("Validations").Range("C" & errline) = dmd
          Sheets("Validations").Range("D" & errline) = bin
          Sheets("Validations").Range("E" & errline) = smd
          errline = errline + 1
        End If
        smCol = smCol + 2
      Loop
      dmCol = dmCol + 2
    Loop
    End If
  End If
  
  errline = 5
  'Product Code - sync between Dual Auth and Single Message
  If Sheets("MDS Single Message").Visible And Sheets("Dual Message - Issuing").Visible Then
    dmCol = 4
    If Not IsError(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row, dmCol).Address)) Then
    Do While Len(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row, dmCol).Address)) > 0
      arf = Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row, dmCol).Address)
      art = Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row + 1, dmCol).Address)
      dmcbc = CInt(Left(Sheets("Dual Message - Issuing").Range(Cells(Application.Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row + 5, dmCol).Address), 3))
      smCol = 4
      Do While Len(Sheets("MDS Single Message").Range(Cells(Application.Sheets("MDS Single Message").Range("MDS_IRT").Row, smCol).Address)) > 0
        bin = Trim(Sheets("MDS Single Message").Range(Cells(Application.Sheets("MDS Single Message").Range("MDS_IRT").Row, smCol).Address))
        smcbc = CInt(Left(Sheets("MDS Single Message").Range(Cells(79, smCol).Address), 3))
        If (Left(arf, Len(bin)) <= bin) And (Left(art, Len(bin)) >= bin) And (dmcbc <> smcbc) Then
          Sheets("Validations").Range("G" & errline) = "'" & arf
          Sheets("Validations").Range("H" & errline) = dmcbc
          Sheets("Validations").Range("I" & errline) = bin
          Sheets("Validations").Range("J" & errline) = smcbc
          errline = errline + 1
        End If
        smCol = smCol + 2
      Loop
      dmCol = dmCol + 2
    Loop
    End If
  End If
  
  'Russia - Ensure link with Processor ICA 4853 is established
  If Sheets("Dual Message - Acquiring").Visible Then
    If Int(Sheets("Dual Message - Acquiring").Range("E7")) = 643 Then
      If Sheets("Dual Message - Acquiring").Range("22:22").Find(4853, , , xlPart) Is Nothing Then
        MsgBox "This Russian ICA does not seem to be configured to be linked with the NSPK Processor ICA in the Dual Message - Acquiring tab, please add the link to the Processor ICA 4853.", vbCritical
      End If
    End If
  End If

End Function

'Creates an Audit version of the APW
Sub buildAuditView()
  Call protectAudit
End Sub

'Provides a warning message when ISIS is activiated on new BINs, R&Ts or Procs
Function warnISIS()
  MsgBox "Make sure to add the ICA and BIN in the clearing member and clearing acquirer reference BIN screens respectively in MPS. If there is no setup in MPS, the customer will not be able to receive the fee collection messages generated for Debit Intra-Currency transactions." & vbCrLf & vbCrLf & "Make sure to add the agreement Cxxx where xxx is the currency code of the agreement."
End Function

Sub generatePuttyLetter()
  UserForm5.Show
End Sub

Function getACHBankName(TransitNumber As String)

  On Error GoTo errorWebservice
  
  Dim xmlhtp As MSXML2.XMLHTTP
  Set xmlhtp = New MSXML2.XMLHTTP
  
  strXML = "<soap12:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap12=""http://www.w3.org/2003/05/soap-envelope"">" _
            & "<soap12:Body>" _
             & "<getACHByRoutingNumber xmlns=""http://www.webservicex.net/"">" _
              & "<RoutingNumber>" & TransitNumber & "</RoutingNumber>" _
             & "</getACHByRoutingNumber>" _
            & "</soap12:Body>" _
           & "</soap12:Envelope>"
  
  With xmlhtp
    .Open "POST", "http://www.webservicex.net/FedACH.asmx?WSDL", False
    .setRequestHeader "Host", "www.webservicex.net"
    .setRequestHeader "Content-Type", "application/soap+xml; charset=utf-8"
    .setRequestHeader "Content-Length", CStr(Len(strXML))
    .send strXML
    result = .responseText
  End With
  getACHBankName = Trim(Mid(result, InStr(result, "<Address>") + Len("<Address>"), InStr(result, "</Address>") - InStr(result, "<Address>") - Len("<Address>")))
  Exit Function
  
errorWebservice:
  If Err.Number < 0 Then
    getACHBankName = "0"
  ElseIf InStr(result, "<getACHByRoutingNumberResult>false") > 0 Then
    getACHBankName = ""
  Else
    getACHBankName = "0"
  End If
End Function

Function checkVAT(vat As String)
  
  On Error GoTo errorWebservice
  
  Dim xmlhtp As MSXML2.XMLHTTP
  Set xmlhtp = New MSXML2.XMLHTTP
  
  strXML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>" _
    & "<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:tns1=""urn:ec.europa.eu:taxud:vies:services:checkVat:types""" _
    & " xmlns:soapenc=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:impl=""urn:ec.europa.eu:taxud:vies:services:checkVat""" _
    & " xmlns:apachesoap=""http://xml.apache.org/xml-soap"" xmlns:wsdl=""http://schemas.xmlsoap.org/wsdl/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema""" _
    & " xmlns:wsdlsoap=""http://schemas.xmlsoap.org/wsdl/soap/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" >" _
        & "<SOAP-ENV:Body>" _
            & "<tns1:checkVat xmlns:tns1=""urn:ec.europa.eu:taxud:vies:services:checkVat:types"">" _
                & "<tns1:countryCode>" & Left(vat, 2) & "</tns1:countryCode>" _
                & "<tns1:vatNumber>" & Mid(vat, 3) & "</tns1:vatNumber>" _
            & "</tns1:checkVat>" _
        & "</SOAP-ENV:Body>" _
    & "</SOAP-ENV:Envelope>"
  
  xmlhtp.Open "POST", "http://ec.europa.eu/taxation_customs/vies/services/checkVatService", False
  xmlhtp.send strXML
  result = xmlhtp.responseText
  checkVAT = IIf(InStr(result, "<valid>true</valid>") > 0, "Valid for " & Mid(result, InStr(result, "<name>") + 6, InStr(result, "</name>") - InStr(result, "<name>") - 6) & ".", "Not Valid.")
  Exit Function
  
errorWebservice:
  checkVAT = "Unknown."
End Function

Function getProcIDDataMTF(procID As String, rng As Range, section As String)

  Dim conn As ADODB.Connection
  Dim rs As ADODB.Recordset
  
  Set conn = New ADODB.Connection
  Set rs = New ADODB.Recordset
  
  Select Case section
    Case "PDF"
      conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
      "Data Source=\\corp.mastercard.org\Brussels\ctos$\Tools\APW\NICS_PDF_MTF.xlsx;" & _
      "Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
  
      rs.Open "SELECT * FROM [A:IT] WHERE [MDS - PDF - Raw_Number] = """ & procID & """", conn, adOpenStatic, adLockReadOnly
      
      startrow = Range("MDS_PDF").Row - 1
      endrow = Range("MDS_PCN").Row - 1 + Range("MDS_PCN").Rows.Count
    Case "MCS"
      conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
      "Data Source=\\corp.mastercard.org\Brussels\ctos$\Tools\APW\NICS_MCS_MTF.xlsx;" & _
      "Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
  
      rs.Open "SELECT * FROM [A:W] WHERE [Number] = """ & procID & """", conn, adOpenStatic, adLockReadOnly
      startrow = Range("MDS_MCS").Row - 1
      endrow = startrow + Range("MDS_MCS").Rows.Count
  End Select
  
  Do While Not rs.EOF
    col = rng.Column
    cl = Cells(rng.Row, rng.Column).Address
    If Cells(startrow + 1, col) <> "" Then
      Range(Cells(startrow, col + 2), Cells(endrow, col + 3)).Select
      Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
      Range(Cells(startrow, col), Cells(endrow, col + 1)).Select
      Selection.Copy
      Cells(startrow, col + 2).Select
      ActiveSheet.Paste
      Application.CutCopyMode = False
      Set Target = Range(Cells(rng.Row, rng.Column + 2).Address)
      cl = Cells(rng.Row, rng.Column + 2).Address
    End If
    
    i = 0
    Application.EnableEvents = True
    Range(cl).value = "Add"
    Application.EnableEvents = False
    cl = Cells(Range(cl).Row + 1, Range(cl).Column).Address
    Do While i < rs.Fields.Count
      Do While Range(cl).Interior.Color = 16777215
        cl = Cells(Range(cl).Row + 1, Range(cl).Column).Address
        If Trim(Cells(Range(cl).Row, 3)) = "Type of Change" Then
          Application.EnableEvents = True
          Range(cl).value = "Add"
          Application.EnableEvents = False
        cl = Cells(Range(cl).Row + 1, Range(cl).Column).Address
      End If
      Loop
      Range(cl).value = rs.Fields(i)
      If Range(cl).Interior.Color = 10092543 Then
        Range(cl).Interior.Color = 8647549
      End If
      cl = Cells(Range(cl).Row + 1, Range(cl).Column).Address
      i = i + 1
    Loop
    rs.MoveNext
  Loop
  
End Function


Sub launchCBFMWizard()
  CBFM_Start.Show
End Sub

Function formatTb(frm As CBFM_Rates)
  frm.lblWarning.Visible = False
  For Each tb In frm.Controls
    If Left(tb.Name, 2) = "tb" Then
      tb.value = Format(tb.value, "0.000000")
      If tb.value > 10 Then
        tb.BackColor = RGB(255, 0, 0)
        frm.lblWarning.Visible = True
      Else
        tb.BackColor = RGB(255, 255, 255)
      End If
    End If
  Next tb
End Function

Function loadCBFMData(ranges As CBFM_Ranges, services As CBFM_Services, rates As CBFM_Rates)
  
  Application.EnableEvents = False
  CBFMr = Range("CBFM_ADD").Row
  Do While Len(Cells(CBFMr, 2).value) > 0
    CBFMr = CBFMr + 1
  Loop
  
  For i = 0 To ranges.lbRanges.ListCount - 1
    If ranges.lbRanges.Selected(i) Then
      
      If services.cbECCR Then
        Call loadCBFMDetail(ranges.lbRanges.List(i), "CCM", IIf(services.cbECCR_FPRC, "Y", "N"), IIf(services.cbECCR_C, "Y", "N"), "N", "tbICCR", rates, i Mod 2 > 0)
      End If
      If services.cbICBA Then
        Call loadCBFMDetail(ranges.lbRanges.List(i), "CBCM", IIf(services.cbICBA_FPRC, "Y", "N"), IIf(services.cbICBA_C, "Y", "N"), "N", "tbICBA", rates, i Mod 2 > 0)
      End If
      If services.cbICBR Then
        Call loadCBFMDetail(ranges.lbRanges.List(i), "CBFM", IIf(services.cbICBR_FPRC, "Y", "N"), IIf(services.cbICBR_C, "Y", "N"), services.CBICBR_CBF, "tbICBR", rates, i Mod 2 > 0)
      End If
      
    End If
  Next i
  Application.EnableEvents = True
  If Application.CountIf(Sheets("Dual Message - Cross Border Fee").Range("L:L"), "Error") > 0 Then
    MsgBox "Some rates were invalid and have to be looked into. Please see the entries with Error in the Percent column."
  End If
    
End Function

Function loadCBFMDetail(CBFMrange As String, CBFMtype As String, fprc As String, c As String, dcc As String, prefix As String, rates As CBFM_Rates, col As Boolean)
  Range(CBFMr + 1 & ":" & CBFMr + 12).EntireRow.Insert
  Range(Cells(CBFMr, 2), Cells(CBFMr, 13)).Select
  Selection.Copy
  Range(Cells(CBFMr + 1, 2), Cells(CBFMr + 12, 13)).PasteSpecial xlPasteFormats
  If col Then
    Range(Cells(CBFMr, 2), Cells(CBFMr + 11, 13)).Interior.Color = RGB(217, 217, 217)
  Else
    Range(Cells(CBFMr, 2), Cells(CBFMr + 11, 13)).Interior.Color = RGB(255, 255, 255)
  End If
  Cells(CBFMr, 2).Select
  Application.CutCopyMode = False
  
  For j = 0 To 11
    Cells(CBFMr, 2) = "'" & CBFMrange
    Cells(CBFMr, 3) = CBFMtype
    Cells(CBFMr, 4) = Sheets("Lookup").Cells(Range("CBFM_Template").Row + j, Range("CBFM_Template").Column)
    Cells(CBFMr, 5) = Sheets("Lookup").Cells(Range("CBFM_Template").Row + j, Range("CBFM_Template").Column + 1)
    Cells(CBFMr, 6) = Sheets("Lookup").Cells(Range("CBFM_Template").Row + j, Range("CBFM_Template").Column + 2)
    Cells(CBFMr, 7) = "Y"
    Cells(CBFMr, 8) = "N"
    Cells(CBFMr, 9) = fprc
    Cells(CBFMr, 10) = c
    Cells(CBFMr, 11) = dcc
    Cells(CBFMr, 12) = "'" & rates.Controls(prefix & Sheets("Lookup").Cells(Range("CBFM_Template").Row + j, Range("CBFM_Template").Column + 3)).value
    If CBFMtype <> "CBCM" Then
      Cells(CBFMr, 13) = rates.Controls(prefix & Sheets("Lookup").Cells(Range("CBFM_Template").Row + j, Range("CBFM_Template").Column + 4)).value
      'If CDbl(Cells(CBFMr, 12)) > 10 Then
      '  MsgBox "The rate of " & Cells(CBFMr, 12) & " for " & CBFMtype & " for " & CBFMrange & " might be too high, please crosscheck."
      'End If
    Else
      On Error GoTo noValidation
      cty = Application.VLookup(Right("000" & Application.HLookup(CBFMrange, Sheets("Dual Message - Issuing").Range("Issuing_Dual_Message_Account_Range"), 4, False), 3), Sheets("Lookup").Range("CNTY_CONV"), 2, False)
      ab = Application.VLookup(CStr(Application.HLookup(CBFMrange, Sheets("Dual Message - Issuing").Range("Issuing_Dual_Message_Account_Range"), 5, False)), Sheets("Brand_Product").Range("A:C"), 3, False)
      reg = IIf(Int(Left(Cells(CBFMr, Application.Match("Regional Differentiation", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)), 1)) > 1, "INTER", "INTRA")
      t = IIf(Left(Cells(CBFMr, Application.Match("ATM/POS", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)), 1) = "A", "ATM", "POS")
      key = Application.Match(ab & " " & reg & " " & t, Sheets("Lookup").Range(Sheets("Lookup").Range("CBCM_VAL").Row & ":" & Sheets("Lookup").Range("CBCM_VAL").Row), 0) - Sheets("Lookup").Range("CBCM_VAL").Column + 1
      maxVal = Application.VLookup(cty, Sheets("Lookup").Range("CBCM_VAL"), key, False) * 100
      If Round(CDbl(Cells(CBFMr, 12)), 4) > Round(CDbl(maxVal), 4) Then
        Cells(CBFMr, 12).value = "Error"
      End If
      Cells(CBFMr, 13) = "'0"
      GoTo okValidation
noValidation:
      Resume resumeValidation
resumeValidation:
okValidation:
    End If
          
    CBFMr = CBFMr + 1
  Next j
  
  linesRemoved = 0
  If Not (rates.cbPOS) Then
    Range(CBFMr - 12 & ":" & CBFMr - 10).EntireRow.Delete
    linesRemoved = linesRemoved + 3
  End If
  If Not (rates.cbATM) Then
    Range(CBFMr - 9 & ":" & CBFMr - 7).EntireRow.Delete
    linesRemoved = linesRemoved + 3
  End If
  If Not (rates.cbCP) Then
    Range(CBFMr - 6 & ":" & CBFMr - 4).EntireRow.Delete
    linesRemoved = linesRemoved + 3
  End If
  If Not (rates.cbCNP) Then
    Range(CBFMr - 3 & ":" & CBFMr - 1).EntireRow.Delete
    linesRemoved = linesRemoved + 3
  End If

  cty = Sheets("Dual Message - Issuing").Range("D8").value
  region = Application.VLookup(cty, Sheets("Lookup").Range("C1:E261"), 3, False)
  If Not (IsError(region)) Then
    If Left(region, 1) <> "D" Then
      For j = 0 To 11
        If Cells(CBFMr - j, 6).value = 3 Then
          Range(CBFMr - j & ":" & CBFMr - j).EntireRow.Delete
          linesRemoved = linesRemoved + 1
        End If
      Next j
    End If
  End If

  CBFMr = CBFMr - linesRemoved

End Function

Sub exportCBFMAdd()
  
  CBFMr = Range("CBFM_ADD").Row
  Do While Len(Cells(CBFMr, 2).value) > 0 And Cells(CBFMr, 2).value <> 0
    CBFMr = CBFMr + 1
  Loop
  
  Range(Cells(Range("CBFM_ADD").Row - 1, 2), Cells(CBFMr, 13)).Select
  Selection.Copy
  Cells(CBFMr - 1, 2).Select
  
  Dim wb As Excel.Workbook
  Set wb = Application.Workbooks.Add
  Cells(1, 1) = "Form:"
  Cells(1, 2) = "AccountRangeCrossBorderFeeManager"
  Cells(2, 1) = "Action:"
  Cells(2, 2) = "Add"
  
  Cells(3, 1).Select
  Selection.PasteSpecial Paste:=xlPasteValues
  Cells(1, 1).Select
  wb.SaveAs Application.GetSaveAsFilename("MPS Import.xlsx", "Excel file,*.xlsx")
  wb.Close
    
End Sub

Function isEligibleForMoneySend(bp As String, c As Integer)
  
  e = False
  
  Dim conn As ADODB.Connection
  Dim rs As ADODB.Recordset
  
  Set conn = New ADODB.Connection
  Set rs = New ADODB.Recordset
  
  conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
    "Data Source=\\corp.mastercard.org\Brussels\ctos$\Tools\APW\MoneySend Eligible Countries.xlsx;" & _
    "Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
  
  rs.Open "SELECT * FROM [A:A] WHERE Country = " & c, conn, adOpenStatic, adLockReadOnly
  
  If Not rs.EOF Then
    If Not (Application.IsNA(Application.VLookup(bp, Sheets("MoneySend_Eligible_Brand_Produc").Range("A:A"), 1, False))) Then
      e = True
    End If
  End If
  
  conn.Close
  Set conn = Nothing
  
  isEligibleForMoneySend = e
End Function
Attribute VB_Name = "MoneySendPrepaid"
Attribute VB_Base = "0{55A3B858-3393-4377-BCB2-35FA299292CD}{5EFD22ED-EC7C-4C2C-85C2-D4AD76E14F37}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub okButton_Click()
  On Error Resume Next
  Range(Selection.Address).Cells.Item(1).Comment.Delete
  Range(Selection.Address).Cells.Item(1).AddComment "Customer selected following options:" & vbCrLf & vbCrLf & "Anonymous: " & IIf(Me.A.value, "Yes", "No") & vbCrLf & "Non-Reloadable: " & IIf(Me.NR.value, "Yes", "No") & vbCrLf & "Single Source Funded: " & IIf(Me.SSF.value, "Yes", "No")
  Me.Hide
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered when anything changes on this sheet.
'Will take action based on the changing field.
Private Sub Worksheet_Change(ByVal Target As Range)

  If Target.Address <> "$A$2" And Target.Address <> "$E$4" Then
    Call markCellAsUpdated(Target)
  End If
  
  If Target.Address = "$C$16" Then
    If Range("G16") = "RUS" Then
      MsgBox "The ROSS related sections are going to be displayed and the file transfer section will be updated.", vbOKOnly
      Call activateROSS
      Sheets("Project Overview").Select
    End If
  End If
  
  If Target.Address = "$E$4" Then
    If Len(Target.value) > 0 Then
      If Target.value = "Customer" Then
        Call filterCustomerView
      ElseIf Target.value = "Mastercard" Then
        If Len(Range("E6").value) > 2 Then
          Dim ol As Object
          Set ol = GetObject(, "Outlook.Application")
          Dim orec As Object
          Set orec = ol.Session.CreateRecipient(Range("E6").value)
          orec.Resolve
          Application.EnableEvents = False
          If orec.Resolved Then
            Range("F6") = orec.AddressEntry.GetExchangeUser.PrimarySmtpAddress
          Else
            Range("F6") = InputBox("Please provide the email address for " & Range("E6"))
          End If
          Application.EnableEvents = True
        End If
        Call filterMasterCardView
      ElseIf Target.value = "Audit" Then
        Call protectAudit
      Else
        Call filterSheets(Target.value)
        If Target.value = "CTS/MDS" Then
          Call freezePanesCTS
          Call protectFile
          Sheets("CTS Report").Visible = True
        ElseIf Target.value = "Billing/Finance" Then
          Sheets("MDS Single Message").PageSetup.PrintArea = "$A$1:$I$52"
        End If
      End If
    End If
  End If

End Sub

'Clicking any hyperlink in the sheet triggers this function.
'The only hyperlink is on the Project Scope field and if the user follows it, the Project Scope section will be hidden.
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  If Target.Range.Address = "$B$8" Then
    Rows("8:10").EntireRow.hidden = True
    Cells(1, 1).Select
  End If
End Sub
Attribute VB_Name = "Sheet100"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

Private Sub Worksheet_Activate()
  If Sheets("Project Overview").Range("A2") = True And Application.Visible Then
    Application.EnableEvents = False
    If Cells(2, 6).value Then
      If Not (IsError(Application.HLookup("Yes", Range("115:115"), 1, False))) Or Not (IsError(Application.HLookup("Yes", Range("116:116"), 1, False))) Then
        msg = "Please note that at least one of the ranges in this APW is MDES Enabled. Please be careful in modifying the configurations and seek advice before continuing." & vbCrLf & vbCrLf
        msg = msg & "Do you want this message to appear again when you get to this tab?"
        Cells(2, 6).value = MsgBox(msg, vbYesNo) = vbYes
      End If
    End If
    If Cells(2, 7).value Then
      msg = "Since April 2017, following services became mandated in certain circumstances." & vbCrLf & vbCrLf
      msg = msg & "- The On-Behalf service ""010 - CVC1"" must be activated if the cards on that range will bear a magnetic stripe." & vbCrLf & vbCrLf
      msg = msg & "- The On-Behalf service ""016 - Paypass Dynamic CVC3 Validation in Stand-in"" must be activated if the cards on that range will support magnetic stripe contactless tranactions." & vbCrLf & vbCrLf
      msg = msg & "- The On-Behalf service ""006 - Mastercard Securecode Dynamic Verification Service In Stand-in"" must be activated if SecureCode will be supported on that range." & vbCrLf
      msg = msg & vbCrLf & "Note that there might be a need to exchange security keys to have these services activated." & vbCrLf & vbCrLf
      msg = msg & "Do you want this message to appear again when you get to this tab?"
      Cells(2, 7).value = MsgBox(msg, vbYesNo) = vbYes
    End If
    Application.EnableEvents = True
  End If
End Sub

'Triggered upon any change in the sheet
'Manages the Type of Change fields
Private Sub Worksheet_Change(ByVal Target As Range)
  previousValue = markCellAsUpdated(Target)
 If Sheets("Project Overview").Range("A2") = True Then
  Select Case Range(Target.Address).Row
    Case 5, 13, 183
      colNumber = Range(Target.Address).Column
      rownumber = Range(Target.Address).Row
      If Cells(rownumber, colNumber).value = "Live" Or Cells(rownumber, colNumber).value = "Add BIN" Or (Cells(rownumber, colNumber).value = "Transfer/Conversion/Live" And rownumber = 5) Then
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 10027007
          Cells(i, colNumber).Interior.Color = 8647549
          i = i + 1
        Loop
        Application.EnableEvents = False
        If isEligibleForMoneySend(Cells(182, Range(Target.Address).Column).value, CInt(Range("D8").value)) Then
          Cells(211, Range(Target.Address).Column).value = "Please select..."
          Cells(212, Range(Target.Address).Column).value = "Please select..."
        End If
        Application.EnableEvents = True
      ElseIf Cells(rownumber, colNumber).value = "Copy Column" Then
        Application.EnableEvents = False
        Range(Target.Address).value = previousValue
        startrow = rownumber - 2
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007
          i = i + 1
        Loop
        endrow = i - 1
        Range(Cells(startrow, colNumber + 2), Cells(endrow, colNumber + 3)).Select
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        Range(Cells(startrow, colNumber), Cells(endrow, colNumber + 1)).Select
        Selection.Copy
        Cells(startrow, colNumber + 2).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Target.Select
        Application.EnableEvents = True
        Select Case Range(Target.Address).Row
          Case 13
            sr = Range("Issuing_Dual_Message_Account_Range").Row
            sc = Range("Issuing_Dual_Message_Account_Range").Column
            er = sr + Range("Issuing_Dual_Message_Account_Range").Rows.Count - 1
            ec = sc + Range("Issuing_Dual_Message_Account_Range").Columns.Count - 1 + 2
            Range(Cells(sr, sc), Cells(er, ec)).Name = "Issuing_Dual_Message_Account_Range"
          Case 179
            sr = Range("Issuing_Dual_Message_GCMS").Row
            sc = Range("Issuing_Dual_Message_GCMS").Column
            er = sr + Range("Issuing_Dual_Message_GCMS").Rows.Count - 1
            ec = sc + Range("Issuing_Dual_Message_GCMS").Columns.Count - 1 + 2
            Range(Cells(sr, sc), Cells(er, ec)).Name = "Issuing_Dual_Message_GCMS"
        End Select
      ElseIf Cells(rownumber, colNumber).value = "Remove Column" Then
        Application.EnableEvents = False
        addr = Target.Address
        startrow = rownumber - 2
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007
          i = i + 1
        Loop
        endrow = i - 1
        If colNumber > 4 Then
          Range(Cells(startrow, colNumber), Cells(endrow, colNumber + 1)).Select
          Selection.Delete Shift:=xlToLeft
          Cells(startrow, colNumber).Select
        Else
          MsgBox "First column cannot be removed.", vbOKOnly
        End If
        Set Target = Range(addr)
        Application.EnableEvents = True
      Else
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 8647549
          Cells(i, colNumber).Interior.Color = 10092543
          i = i + 1
        Loop
      End If
      If Sheets("Lookup").Range("J1").value = "MEA" And Left(Cells(17, Range(Target.Address).Column).value, 3) = "MWE" Then
        If Cells(176, Range(Target.Address).Column).value = "No" Then
          Cells(176, Range(Target.Address).Column).value = "Yes"
        End If
        If Cells(177, Range(Target.Address).Column).value = "No" Then
          Cells(177, Range(Target.Address).Column).value = "Yes"
        End If
        If Cells(178, Range(Target.Address).Column).value = "No" Then
          Cells(178, Range(Target.Address).Column).value = "Yes"
        End If
      End If
      If InStr(Range(Target.Address).value, "Transfer") Or InStr(Range(Target.Address).value, "Add BIN") Or InStr(Range(Target.Address).value, "Live") Then
        If Application.Visible Then
          MsgBox "Please don't forget whether any update here impacts the Single Message configuration, and apply the appropriate action in the MDS Single Message tab.", vbInformation
        End If
      End If
    Case 37
      Application.EnableEvents = False
      cl = Cells(39, Range(Target.Address).Column).Address
      Range(Cells(52, Range(Target.Address).Column).Address) = "=IF(ISNA(HLOOKUP(INT(" & cl & "),INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE)),HLOOKUP(" & cl & ",INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE),HLOOKUP(INT(" & cl & "),INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE))"
     ' Range(Cells(41, Range(Target.Address).Column).Address) = "'" & Range(Cells(41, Range(Target.Address).Column).Address).value
      Application.EnableEvents = True
      If Sheets("Lookup").Range("J1").value <> "EUROPE" And Int(Cells(37, Range(Target.Address).Column).value) = 2202 And Cells(59, Range(Target.Address).Column).value <> "Yes" Then
        Cells(60, Range(Target.Address).Column).value = "Yes"
        MsgBox "The Optional Service 009 has been switched to Yes (mandate outside of Europe under GSI 02202)", vbOKOnly
      End If
    Case 17
      If Cells(17, Range(Target.Address).Column).value <> Cells(8, 4).value Then
        MsgBox "As per Mastercard Rules a customer must have a separate ICA and BIN range assigned to each country in which it is active and must use these only for its activity in that country. Different ranges within a BIN may be linked to ICAs assigned for different countries. If the customer wishes to use a single ICA and BIN in multiple countries, please ensure that the customer has previously been granted a variance and is aware of the local product requirements of each country. Reach out to your local Delivery Manager or Franchise team in case of any doubt.", vbOKOnly
      End If
      If (Left(Cells(17, Range(Target.Address).Column).value, 3) = "203") Or (Left(Cells(17, Range(Target.Address).Column).value, 3) = "348") Or (Left(Cells(17, Range(Target.Address).Column).value, 3) = "616") Then
        If Cells(104, Range(Target.Address).Column).value = "No" Then
          Cells(104, Range(Target.Address).Column).value = "Yes"
          MsgBox "Processing Service 054 has been set to Yes (mandatory in Hungary, Poland and Czech Republic)"
        End If
        Range("C104").Comment.Text Range("C104").Comment.Text & vbCrLf & "This flag is activated by default. No additional activities are required nor does it imply your participation in In Control service."
      Else
        Range("C104").Comment.Text Left(Range("C104").Comment.Text, 282)
      End If
    Case 18
      If Not (IsError(Application.Match(Cells(14, Range(Target.Address).Column).value, Sheets("Tokens").Range("D:D"), 0))) Then
        tokenrow = Application.Match(Cells(14, Range(Target.Address).Column).value, Sheets("Tokens").Range("D:D"), 0)
        If (Sheets("Tokens").Cells(tokenrow, 5) <> Sheets("Tokens").Cells(tokenrow, 10)) Or (Sheets("Tokens").Cells(tokenrow, 6) <> Sheets("Tokens").Cells(tokenrow, 11)) Or (Sheets("Tokens").Cells(tokenrow, 7) <> Sheets("Tokens").Cells(tokenrow, 12)) Then
          MsgBox "This product code change is not allowed, as the associated token range would change either acceptance brand, product type or product category, which is not allowed on this token range." & vbCrLf & vbCrLf & "The previous value will be restored.", vbCritical
          Application.EnableEvents = False
          Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = previousValue
          Application.EnableEvents = True
          Exit Sub
        End If
      End If
      If Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = "MRJ" Or Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = "MSJ" Or Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = "MPJ" Then
        'If Left(Cells(28, Range(Target.Address).Column).value, 1) <> "L" Then
        '  Application.EnableEvents = False
        '  Cells(28, Range(Target.Address).Column).value = "L - LOCAL TRAFFIC ONLY"
        '  MsgBox "Auth Control flag has been switched to L - Local Traffic Only, which is mandatory for this product code.", vbOKOnly
        '  Application.EnableEvents = True
        'End If
        If Cells(29, Range(Target.Address).Column).value <> "Y" Then
          Application.EnableEvents = False
          Cells(29, Range(Target.Address).Column).value = "Y"
          MsgBox "Local Use Only has been switched to Y, which is mandatory for this product code.", vbOKOnly
          Application.EnableEvents = True
        End If
      End If
      If Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = "MAP" Then
        If ((Left((Cells(17, Range(Target.Address).Column).value), 3) <> "826") Or (Left(Cells(17, Range(Target.Address).Column).value, 3) <> "528")) Then
          MsgBox "Product Code MAP is only allowed in United Kingdom and Netherlands", vbCritical
          Application.EnableEvents = False
          Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = previousValue
          Application.EnableEvents = True
          Exit Sub
        End If
      End If
      If InStr(Cells(5, Range(Target.Address).Column).value, "Live") = 0 And (Cells(5, Range(Target.Address).Column).value <> "Add BIN") Then
        If MsgBox("Does the product code match the 6 digit BIN on product category, acceptance brand and product type and is the selected product code available in the country selected (please check ICA and BIN request form)?", vbYesNo) = vbNo Then
          If MsgBox("Does the customer have a variance (please check with your local Customer Delivery or Franchise Team)?", vbYesNo) = vbNo Then
            MsgBox "Previous value is being reverted", vbCritical
            Application.EnableEvents = False
            Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = previousValue
            Application.EnableEvents = True
            Exit Sub
          End If
        End If
      End If
      If Left(Cells(17, Range(Target.Address).Column).value, 3) = "280" And Cells(93, Range(Target.Address).Column).value <> "Yes" Then
        Cells(93, Range(Target.Address).Column).value = "Yes"
        MsgBox "The Processing Service 002 has been switched to Yes (mandate in Germany)", vbOKOnly
      ElseIf Sheets("Lookup").Range("J1").value <> "EUROPE" And Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Brand_Product").Range("A:C"), 3, False) = "DMC" And Cells(93, Range(Target.Address).Column).value <> "Yes" Then
        Cells(91, Range(Target.Address).Column).value = "Yes"
        MsgBox "The Processing Service 002 has been switched to Yes (mandate outside of Europe under Acceptance Brand DMC)", vbOKOnly
      End If
      If Not (IsError(Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Lookup").Range("Q114:Q171"), 1, False))) And Cells(75, Range(Target.Address).Column).value <> "Yes" Then
        Cells(75, Range(Target.Address).Column).value = "Yes"
        MsgBox "The Optional Service 059 has been switched to Yes (mandate to remove EMS service results)", vbOKOnly
      ElseIf (Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Brand_Product").Range("A1:C999"), 3, False) = "DMC" Or Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Brand_Product").Range("A1:C999"), 3, False) = "MCC") And Cells(75, Range(Target.Address).Column).value <> "Yes" Then
        Cells(75, Range(Target.Address).Column).value = "Yes"
        Cells(83, Range(Target.Address).Column).value = "No"
        MsgBox "The Optional Service 059 has been switched to Yes (mandate to remove EMS service results)", vbOKOnly
      End If
    Case 39
      If Cells(17, Range(Target.Address).Column) = "566" Then
        If CInt(Cells(39, Range(Target.Address).Column)) = "2202" Then
          MsgBox "All Nigerian Account ranges being processed in Single Message and acquired on Banknet have to route to a different gateway GSI. The GSI value will be updated automatically to 32202.", vbOKOnly
          Application.EnableEvents = False
          Cells(39, Range(Target.Address).Column) = "32202"
          Application.EnableEvents = True
        End If
      End If
    Case 65
      If Cells(65, Range(Target.Address).Column) = "Yes" Then
        MsgBox "WARNING: By activating this service, all 0100 authorization messages will be automatically declined", vbCritical, "Warning"
      End If
    Case Range("IDM_ICA").Row
      If Cells(Range("IDM_ICA").Row - 1, Range(Target.Address).Column) <> "Live" And Cells(Range("IDM_ICA").Row - 1, Range(Target.Address).Column) <> "Transfer/Conversion/Live" Then
        If MsgBox("Please confirm that you are adding a new ICA.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("IDM_ICA").Row - 1, Range(Target.Address).Column).value = "Live"
          Cells(Range("IDM_ICA").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("IDM_ICA").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Application.EnableEvents = True
        End If
      End If
    Case 70, 71
      If Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = "Yes" And Cells(123, Range(Target.Address).Column).value = "No" Then
        Cells(123, Range(Target.Address).Column).value = "Yes"
        MsgBox "Based on the mandate that Chip Issuers must support Online CAM from April 17, 2015, the On-Behalf service 002 is being set to Yes."
      End If
    Case 83
      If Not (IsError(Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Lookup").Range("Q114:Q171"), 1, False))) And Cells(83, Range(Target.Address).Column).value <> "No" Then
        MsgBox "Service 099 cannot be switched on for Prepaid BINs", vbOKOnly
        Application.EnableEvents = False
        Cells(83, Range(Target.Address).Column).value = "No"
        Application.EnableEvents = True
      ElseIf Cells(83, Range(Target.Address).Column).value = "Yes" Then
        MsgBox "By changing the 099 Opt Out Service Flag from NO to YES, this indicates the customer has made the choice to opt out this particular Account Range from the Safety Net service either through the Add a Bin interview form, through Update a Product, or filled out the Form 1170.  The Add a Bin interview form, Update a Product form, or Form 1170 must accompany the eform where the 099 is being set to YES.", vbOKOnly
      End If
    Case Range("IDM_ARLP").Row
      If Cells(Range("IDM_ARLP").Row - 1, Range(Target.Address).Column) <> "Add BIN" Then
        If MsgBox("Please confirm that you are adding a new BIN.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("IDM_ARLP").Row - 1, Range(Target.Address).Column).value = "Add BIN"
          Cells(Range("IDM_ARLP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("IDM_ARLP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 8647549)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Application.EnableEvents = True
        End If
      End If
      If Sheets("Lookup").Range("J1").value <> "EUROPE" Then
        If Cells(64, Range(Target.Address).Column).value <> "Yes" Then
          Cells(64, Range(Target.Address).Column).value = "Yes"
          MsgBox "The Optional Service 028 has been switched to Yes (mandate outside of Europe)", vbOKOnly
        End If
        If Int(Cells(39, Range(Target.Address).Column).value) = 2202 And Cells(60, Range(Target.Address).Column).value <> "Yes" Then
          Cells(60, Range(Target.Address).Column).value = "Yes"
          MsgBox "The Optional Service 009 has been switched to Yes (mandate outside of Europe under GSI 02202)", vbOKOnly
        End If
        If Application.VLookup(Cells(18, Range(Target.Address).Column), Sheets("Brand_Product").Range("A:C"), 3, False) = "DMC" And Cells(93, Range(Target.Address).Column).value <> "Yes" Then
          Cells(93, Range(Target.Address).Column).value = "Yes"
          MsgBox "The Processing Service 002 has been switched to Yes (mandate outside of Europe under Acceptance Brand DMC)", vbOKOnly
        End If
      End If
      bp = Cells(18, Range(Target.Address).Column).value
      MsgBox "The mirror BIN had Brand Product " & bp & ". Please validate that your new BIN has the same Brand Product, otherwise please reflect the correct Brand Product below.", vbOKOnly
      onbehalf = Application.VLookup("Yes", Range(Cells(123, Range(Target.Address).Column), Cells(141, Range(Target.Address).Column)), 1, False)
      If Not (IsError(onbehalf)) Then
        MsgBox "The mirror BIN had at least one on-behalf service activated. Please validate that the new BIN needs to have the same on-behalf service(s) activated and ensure appropriate keys are exchanged prior to launching your E-form.", vbOKOnly
      End If
      ica = Cells(6, 4).value
      MsgBox "The mirror BIN was set up under ICA " & ica & ". Please validate that your new BIN is also to be set up under this ICA, if not, you should either update the ICA value throughout this document or use a different mirror BIN.", vbOKOnly
      gsi = Cells(39, Range(Target.Address).Column).value
      MsgBox "The mirror BIN was set up under GSI " & gsi & ". Please validate that your new BIN is also to be set up under this GSI, if not, you should either update the GSI value throughout this document or use a different mirror BIN.", vbOKOnly
      Application.EnableEvents = False
      Cells(164, Range(Target.Address).Column).value = "No"
      Cells(165, Range(Target.Address).Column).value = "No"
      Cells(166, Range(Target.Address).Column).value = "No"
      Application.EnableEvents = True
      MsgBox "The enhanced services 400, 401, and 402 have been set to No, which is the default for newly added BINs", vbOKOnly
      If Sheets("Lookup").Range("J1").value = "MEA" And Left(bp, 3) = "MWE" Then
        Application.EnableEvents = False
        Cells(176, Range(Target.Address).Column).value = "Yes"
        Cells(177, Range(Target.Address).Column).value = "Yes"
        Cells(178, Range(Target.Address).Column).value = "Yes"
        Application.EnableEvents = True
      End If
    Case Range("IDM_IARGP").Row
      If Cells(Range("IDM_IARGP").Row - 1, Range(Target.Address).Column) <> "Add BIN" Then
        If MsgBox("Please confirm that you are adding a new BIN.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("IDM_IARGP").Row - 1, Range(Target.Address).Column).value = "Add BIN"
          Cells(Range("IDM_IARGP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("IDM_IARGP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 8647549)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          If isEligibleForMoneySend(Cells(182, Range(Target.Address).Column).value, CInt(Range("D8").value)) Then
            Cells(211, Range(Target.Address).Column).value = "Please select..."
            Cells(212, Range(Target.Address).Column).value = "Please select..."
          End If
          Application.EnableEvents = True
        End If
      End If
    Case 186
      If Not (IsError(Application.Match(Cells(184, Range(Target.Address).Column).value, Sheets("Tokens").Range("D:D"), 0))) Then
        tokenrow = Application.Match(Cells(184, Range(Target.Address).Column).value, Sheets("Tokens").Range("D:D"), 0)
        If (Sheets("Tokens").Cells(tokenrow, 5) <> Sheets("Tokens").Cells(tokenrow, 14)) Or (Sheets("Tokens").Cells(tokenrow, 6) <> Sheets("Tokens").Cells(tokenrow, 15)) Or (Sheets("Tokens").Cells(tokenrow, 7) <> Sheets("Tokens").Cells(tokenrow, 16)) Then
          MsgBox "This product code change is not allowed, as the associated token range would change either acceptance brand, product type or product category, which is not allowed on this token range." & vbCrLf & vbCrLf & "The previous value will be restored.", vbCritical
          Application.EnableEvents = False
          Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = previousValue
          Application.EnableEvents = True
          Exit Sub
        End If
      End If
      If InStr(Cells(183, Range(Target.Address).Column).value, "Live") = 0 And (Cells(183, Range(Target.Address).Column).value <> "Add BIN") Then
        If MsgBox("Does the product code match the 6 digit BIN on product category, acceptance brand and product type and is the selected product code available in the country selected (please check ICA and BIN request form)?", vbYesNo) = vbNo Then
          If MsgBox("Does the customer have a variance (please check with your local Customer Delivery or Franchise Team)?", vbYesNo) = vbNo Then
            MsgBox "Previous value is being reverted", vbCritical
            Application.EnableEvents = False
            Cells(Range(Target.Address).Row, Range(Target.Address).Column).value = previousValue
            Application.EnableEvents = True
            Exit Sub
          End If
        End If
      End If
      If Left(Range(Target.Address).value, 3) = "MBS" Then
        MsgBox "Please ensure that the Account Range Processing Service 116 - B2B GLOBAL WHOLESALE is activated for this account range." & vbCrLf & vbCrLf & "Also please verify that this account range is participating in the 8/000900 Business Service.", vbCritical
      End If
    Case 187
      If Int(Range(Target.Address).value) = 2075 Then
        Call copyReconOptions
      End If
    Case 211
      If isEligibleForMoneySend(Cells(186, Range(Target.Address).Column), CInt(Range("D8").value)) And Range(Target.Address).value = "No" Then
        If Left(Application.VLookup(Cells(186, Range(Target.Address).Column), Sheets("Brand_Product").Range("A:H"), 8, False), 1) = "P" Then
          MoneySendPrepaid.Show
        ElseIf (CStr(Range("D8").value) = "840") And (Range(Target.Address).value = "Yes") Then
          MsgBox "To enable Cross Border MoneySend Payment Transactions, you must activate the service 105 and then submit the Form 1173 Mastercard MoneySend Issuer Transaction Controls Form. This flag will be set to ""No"".", vbCritical
          Application.EnableEvents = False
          Range(Target.Address).value = "No"
          Application.EnableEvents = True
        ElseIf CStr(Range("D8").value) <> "840" And CStr(Range("D8").value) <> "124" And Left(Application.VLookup(Format(CStr(Range("D8").value), "000"), Sheets("Lookup").Range("C:E"), 3, False), 1) <> "B" And (Range(Target.Address).value = "No") Then
          MsgBox "Either a variance approval response (as indicated in a returned Form 759) or initial submission of a Variance Request Form 759 (available on Mastercard Connect) will be required to deactivate this service.", vbCritical
        End If
        
        If (Range(Target.Address).value = "Yes") And (Cells(212, Range(Target.Address).Column) = "Yes") Then
          MsgBox "Services 104 and 105 cannot be activated at the same time, this service will be switched to ""No"".", vbCritical
          Application.EnableEvents = False
          Range(Target.Address).value = "No"
          Application.EnableEvents = True
        End If
      End If
    Case 212
      If isEligibleForMoneySend(Cells(186, Range(Target.Address).Column), CInt(Range("D8").value)) And Range(Target.Address).value = "No" Then
        If Left(Application.VLookup(Cells(186, Range(Target.Address).Column), Sheets("Brand_Product").Range("A:H"), 8, False), 1) = "P" Then
          MoneySendPrepaid.Show
        ElseIf CStr(Range("D8").value) <> "840" And CStr(Range("D8").value) <> "124" And Left(Application.VLookup(Format(CStr(Range("D8").value), "000"), Sheets("Lookup").Range("C:E"), 3, False), 1) <> "B" And (Range(Target.Address).value = "Yes") Then
          MsgBox "Either a variance approval response (as indicated in a returned Form 759) or initial submission of a Variance Request Form 759 (available on Mastercard Connect) will be required to deactivate this service.", vbCritical
        ElseIf (CStr(Range("D8").value) = "840") And (Range(Target.Address).value = "No") Then
          MsgBox "Either a variance approval response (as indicated in a returned Form 759) or initial submission of a Variance Request Form 759 (available on Mastercard Connect) will be required to deactivate this service.", vbCritical
        End If
        If (Range(Target.Address).value = "Yes") And (Cells(211, Range(Target.Address).Column) = "Yes") Then
          MsgBox "Services 104 and 105 cannot be activated at the same time, this service will be switched to ""No"".", vbCritical
          Application.EnableEvents = False
          Range(Target.Address).value = "No"
          Application.EnableEvents = True
        End If
      End If
  End Select
   
  Select Case Range(Target.Address).Row
    Case 7, 8, 39, 70, 71, 130, 131, 145, 146
      MsgBox "You updated a field that requires you to think whether there is any impact on the Single Message configuration." & vbCrLf & vbCrLf & "Please update any fields in the Single Message configuration that might be impacted by this flag change."
  End Select

  If Cells(126, Range(Target.Address).Column).value = "Yes" Then
    If Range(Target.Address).Row > 12 And Range(Target.Address).Row < 181 Then
      MsgBox "As you are making a change on a TSP tokenized range, you must ensure that the associated token range is also updated with the same change, as both ranges should remain in sync.", vbInformation
    End If
    If Cells(96, Range(Target.Address).Column).value = "No" Then
      If MsgBox("Account Ranges with Processing service 144 activated, should also have Processing Service 023 activated. Do you want to activate it now?", vbYesNo) = vbYes Then
        Application.EnableEvents = False
        Cells(96, Range(Target.Address).Column).value = "Yes"
        Application.EnableEvents = True
      End If
    End If
  End If
  
  If Range(Target.Address).Interior.Color = 10092543 Then
    tocfield = Cells(getTypeOfChangeRow(Target, 3), Range(Target.Address).Column).Address
    If (Range(tocfield).value = "No Change") Or (Range(tocfield).value = "Select") Then
      MsgBox "Please mark the Type of Change field to the correct action to be taken", vbOKOnly
      Range(tocfield).Select
    End If
  End If
 End If
End Sub

'Triggered when a hyperlink is clicked on the sheet
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

  If Target.Range.Address = "$A$3" Then
   ActiveSheet.Unprotect
   Rows("4:9").EntireRow.hidden = Not (Rows("4:9").EntireRow.hidden)
   ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
   ActiveSheet.EnableSelection = xlLockedCells
  Else
   oldvalue = InputBox("Old value")
   If oldvalue <> "" Then
     newValue = InputBox("New value")
     If newValue <> "" Then
       Application.EnableEvents = False
       Rows(Target.Range.Row).Select
       Application.ReplaceFormat.Interior.Color = 8647549
       Selection.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
       If Target.Range.Address = "$C$37" Then
         col = 4
         Do While Cells(39, col).value <> ""
          cl = Cells(39, col).Address
          Cells(52, col).Formula = "=IF(ISNA(HLOOKUP(INT(" & cl & "),INDIRECT(""'Connectivity'!31:32""),2,FALSE)),HLOOKUP(TEXT(" & cl & ",""00000""),INDIRECT(""'Connectivity'!31:32""),2,FALSE),HLOOKUP(INT(" & cl & "),INDIRECT(""'Connectivity'!31:32""),2,FALSE))"
          If CInt(Cells(39, col).value) = CInt(newValue) Then
            Cells(52, col).Interior.Color = 8647549
          End If
          col = col + 2
         Loop
       ElseIf Target.Range.Address = "$C$187" And Int(newValue) = 2075 Then
         Call copyReconOptions
       End If
       Target.Range.Select
       Application.EnableEvents = True
     End If
   End If
  End If
End Sub




Attribute VB_Name = "Sheet101"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered upon any change in the sheet
'Manages the markCellAsUpdated
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo error_section
  
  Call markCellAsUpdated(Target)
  
error_section:

End Sub
Attribute VB_Name = "Sheet105"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Called each time this sheet is selected
'It will format the Key Identifiers sheet and protect the structure afterwards so that no manual changes can be applied
'The Key Identifiers tab is a read-only tab that provides a summary view on the APW.
Private Sub Worksheet_Activate()
  
  If Application.Visible Then
    ActiveSheet.Unprotect
    Call formatKeyIdentifiers
    Range("A1:E1").Select
    Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
    Selection.Locked = True
    ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
        , AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True, AllowInsertingColumns:=True, AllowInsertingRows _
        :=True, AllowInsertingHyperlinks:=True, AllowDeletingColumns:=True, _
        AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
    Range("A1:E1").Select
  End If
  
End Sub

Attribute VB_Name = "Sheet106"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet116"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet118"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet119"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet120"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
  If Sheets("Dual Message - Issuing").Visible Then
    On Error GoTo endMonitoring
    Application.EnableEvents = False
    Range(Cells(6, 2), Cells(100, 6)).ClearContents
  
    col = 4
    arFromRow = Sheets("Dual Message - Issuing").Range("IDM_ARLP").Row
    bpRow = 18
    serv047Row = 101
    countryRow = 17
    pprow = 6
    snrow = 6
    
    Do While Len(Sheets("Dual Message - Issuing").Cells(arFromRow, col).value) > 0
      If Sheets("Dual Message - Issuing").Cells(serv047Row, col).value = "No" Then
        bp = Sheets("Dual Message - Issuing").Cells(bpRow, col).value
        pc = Application.VLookup(bp, Sheets("Brand_Product").Range("A:D"), 4, False)
        Select Case pc
          Case "P"
            Cells(pprow, 2).value = "'" & Sheets("Dual Message - Issuing").Cells(arFromRow, col).value
            Cells(pprow, 3).value = "'" & Sheets("Dual Message - Issuing").Cells(arFromRow + 1, col).value
            pprow = pprow + 1
          Case "C", "D"
            country = CStr(Sheets("Dual Message - Issuing").Cells(countryRow, col).value)
            If (country <> "840" And country <> "124") Or (Int(Year(Now) & Format(Month(Now), "00")) > 201508) Then
              Cells(snrow, 5).value = "'" & Sheets("Dual Message - Issuing").Cells(arFromRow, col).value
              Cells(snrow, 6).value = "'" & Sheets("Dual Message - Issuing").Cells(arFromRow + 1, col).value
              snrow = snrow + 1
            End If
        End Select
      End If
      col = col + 2
    Loop
    
  End If
    
endMonitoring:
    Application.EnableEvents = True
  
End Sub


Attribute VB_Name = "Sheet124"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet125"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
  If Sheets("Project Overview").Range("A2") = False Then
    Exit Sub
  End If
  Application.Cursor = xlWait
  Application.ScreenUpdating = False
  ActiveSheet.Unprotect
  If ActiveSheet.UsedRange.Rows.Count > 6 Then
    Rows("6:" & ActiveSheet.UsedRange.Rows.Count - 1).EntireRow.Delete
  End If
  i = 5
  Do While Len(Cells(i, 2)) > 0
    Rows(i + 1 & ":" & i + 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("B" & i & ":P" & i).Select
    Selection.AutoFill Destination:=Range("B" & i & ":P" & i + 1), Type:=xlFillDefault
    i = i + 1
  Loop
  Rows(i & ":" & i).EntireRow.Delete
  Range("B5").Select
  Range(Selection, ActiveCell.SpecialCells(xlLastCell)).Select
  Selection.Locked = True
  ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
        , AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True, AllowInsertingColumns:=True, AllowInsertingRows _
        :=True, AllowInsertingHyperlinks:=True, AllowDeletingColumns:=True, _
        AllowDeletingRows:=True, AllowSorting:=True, AllowFiltering:=True, _
        AllowUsingPivotTables:=True
  ActiveSheet.EnableSelection = xlNoRestrictions
  Range("B5").Select
  Application.ScreenUpdating = True
  Application.Cursor = xlDefault
End Sub

Attribute VB_Name = "Sheet127"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

  If Sheets("Project Overview").Range("A2") = True Then
    previousValue = markCellAsUpdated(Target)
    
    Select Case Range(Target.Address).Column
      Case Application.Match("Percent", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)
        Application.EnableEvents = False
        Range(Target.Address).value = "'" & Format(Range(Target.Address).value, "0.000000")
        Application.EnableEvents = True
        Select Case Cells(Range(Target.Address).Row, 3)
          Case "CBCM"
            r = Cells(Range(Target.Address).Row, 2)
            cty = Application.VLookup(CStr(Application.HLookup(r, Sheets("Dual Message - Issuing").Range("Issuing_Dual_Message_Account_Range"), 4, False)), Sheets("Lookup").Range("CNTY_CONV"), 2, False)
            ab = Application.VLookup(CStr(Application.HLookup(r, Sheets("Dual Message - Issuing").Range("Issuing_Dual_Message_Account_Range"), 5, False)), Sheets("Brand_Product").Range("A:C"), 3, False)
            reg = IIf(Int(Left(Cells(Range(Target.Address).Row, Application.Match("Regional Differentiation", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)), 1)) > 1, "INTER", "INTRA")
            t = IIf(Left(Cells(Range(Target.Address).Row, Application.Match("ATM/POS", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)), 1) = "A", "ATM", "POS")
            key = Application.Match(ab & " " & reg & " " & t, Sheets("Lookup").Range(Sheets("Lookup").Range("CBCM_VAL").Row & ":" & Sheets("Lookup").Range("CBCM_VAL").Row), 0) - Sheets("Lookup").Range("CBCM_VAL").Column + 1
            maxVal = Application.VLookup(cty, Sheets("Lookup").Range("CBCM_VAL"), key, False)
            If CDbl(Range(Target.Address).value) > CDbl(maxVal * 100) Then
              MsgBox "Value cannot exceed " & maxVal * 100 & "%, previous value is restored."
              Application.EnableEvents = False
              Range(Target.Address).value = "'" & Format(previousValue, "0.000000")
              Application.EnableEvents = True
            End If
          Case Else
            If CDbl(Range(Target.Address).value) > 10 Then
              MsgBox "Percentage should not exceed 10."
            End If
        End Select
      Case Application.Match("Amount", Range(Range("CBFM").Row - 1 & ":" & Range("CBFM").Row - 1), 0)
        Application.EnableEvents = False
        Range(Target.Address).value = "'" & Format(Range(Target.Address).value, "0.000000")
        Application.EnableEvents = True
        If CDbl(Range(Target.Address).value) > 10 Then
          MsgBox "Amount should not exceed 10."
        End If
    End Select
    
  End If
  
End Sub

Attribute VB_Name = "Sheet129"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
  If Sheets("Project Overview").Range("A2") = True Then
    Call markCellAsUpdated(Target)
    If Range(Target.Address).Address = "$C$12" Then
      lastrow = Range("EDS_Email").Row
      Do While Len(Range("B" & lastrow + 1)) > 0
        lastrow = lastrow + 1
      Loop
      If Range(Target.Address).value = "Yes" Then
        Range("13:" & lastrow).EntireRow.hidden = True
      Else
        Range("13:" & lastrow).EntireRow.hidden = False
      End If
    End If
  End If
End Sub


Attribute VB_Name = "Sheet130"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet131"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet132"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

Private Sub Worksheet_Activate()
  On Error GoTo noaccess:
  If Sheets("Project Overview").Range("A2") = True Then
    Dim conn As ADODB.Connection
    Dim rs As ADODB.Recordset
  
    Set conn = New ADODB.Connection
    Set rs = New ADODB.Recordset
  
    conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\corp.mastercard.org\Brussels\ctos$\Tools\APW\MDSAddData.xlsx;Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
        
    rs.Open "SELECT * FROM [A:C] WHERE Template > " & Int(Right(ActiveWorkbook.BuiltinDocumentProperties("Subject"), 8)), conn, adOpenStatic, adLockReadOnly
  
    If Not rs.EOF Then
      msg = "New fields have been added to the various MDS screens, which should be communicated as part of the GSM ticket to Debit Applications Support." & vbCrLf & vbCrLf & "Following fields are concerned:" & vbCrLf
      Do While Not rs.EOF
        msg = msg & vbCrLf & rs.Fields(1) & " - " & rs.Fields(2)
        rs.MoveNext
      Loop
      MsgBox msg, vbCritical
    End If
  End If
noaccess:
End Sub

'On double click on a date field, the calendar will pop up in UserForm1
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Select Case Target.Address
 Case "$D$5:$E$5"
  UserForm1.Show
  Cancel = True
End Select

End Sub

'Triggered upon any change in the sheet
'Manages the Type of Change fields
Private Sub Worksheet_Change(ByVal Target As Range)
  previousValue = markCellAsUpdated(Target)
  colNumber = Range(Target.Address).Column
  rownumber = Range(Target.Address).Row
 If Sheets("Project Overview").Range("A2") = True Then
  Select Case Range(Target.Address).Row
    Case 7, 34, 45, 56, 67, 86, 112, 134, 143, 182, 221, 280, 297, 309
      If Cells(rownumber, colNumber).value = "Add" Then
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543
          Cells(i, colNumber).Interior.Color = 8647549
          i = i + 1
          Do While Cells(i, colNumber).Interior.Color = 10855845
            i = i + 1
          Loop
        Loop
        If rownumber = Range("MDS_GSI").Row - 1 Then
          MsgBox "Ensure that Acquiring ICA doesn't already exist in GSI table in NICS and that is not tied to another GSI."
        End If
      ElseIf Cells(rownumber, colNumber).value = "Copy Column" Then
        Application.EnableEvents = False
        Range(Target.Address).value = previousValue
        Select Case Range(Target.Address).Row
          Case Range("MDS_MCS").Row - 1
            startrow = Range("MDS_MCS").Row - 1
            endrow = startrow + Range("MDS_MCS").Rows.Count
          Case Range("MDS_RIT").Row - 1
            startrow = Range("MDS_RIT").Row - 1
            endrow = startrow + Range("MDS_RIT").Rows.Count
          Case Range("MDS_IAT").Row - 1
            startrow = Range("MDS_IAT").Row - 1
            endrow = startrow + Range("MDS_IAT").Rows.Count
          Case Range("MDS_PDF").Row - 1
            startrow = Range("MDS_PDF").Row - 1
            endrow = startrow + Range("MDS_PDF").Rows.Count
          Case Range("MDS_PCN").Row - 1
            startrow = Range("MDS_PCN").Row - 1
            endrow = startrow + Range("MDS_PCN").Rows.Count
          Case Range("MDS_GSI").Row - 1
            startrow = Range("MDS_GSI").Row - 1
            endrow = startrow + Range("MDS_GSI").Rows.Count
          Case Range("MDS_UMI").Row - 1
            startrow = Range("MDS_UMI").Row - 1
            endrow = startrow + Range("MDS_UMI").Rows.Count
        End Select
        col = Range(Target.Address).Column
        Range(Cells(startrow, col + 2), Cells(endrow, col + 3)).Select
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        Range(Cells(startrow, col), Cells(endrow, col + 1)).Select
        Selection.Copy
        Cells(startrow, col + 2).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Target.Select
        Application.EnableEvents = True
      ElseIf Cells(rownumber, colNumber).value = "Import from MTF" Then
        Application.EnableEvents = False
        Range(Target.Address).value = previousValue
        Dim procID As String
        procID = Format(InputBox("MTF Proc ID", "Provide value"), "00000")
        Select Case Range(Target.Address).Row
          Case Range("MDS_MCS").Row - 1
            Call getProcIDDataMTF(procID, Target, "MCS")
          Case Range("MDS_PDF").Row - 1
            Call getProcIDDataMTF(procID, Target, "PDF")
        End Select
        Target.Select
        Application.EnableEvents = True
      ElseIf Cells(rownumber, colNumber).value = "Remove Column" Then
        Application.EnableEvents = False
        addr = Target.Address
        Select Case Range(Target.Address).Row
          Case Range("MDS_MCS").Row - 1
            startrow = Range("MDS_MCS").Row - 1
            endrow = startrow + Range("MDS_MCS").Rows.Count
          Case Range("MDS_RIT").Row - 1
            startrow = Range("MDS_RIT").Row - 1
            endrow = startrow + Range("MDS_RIT").Rows.Count
          Case Range("MDS_IAT").Row - 1
            startrow = Range("MDS_IAT").Row - 1
            endrow = startrow + Range("MDS_IAT").Rows.Count
          Case Range("MDS_PDF").Row - 1
            startrow = Range("MDS_PDF").Row - 1
            endrow = startrow + Range("MDS_PDF").Rows.Count
          Case Range("MDS_PCN").Row - 1
            startrow = Range("MDS_PCN").Row - 1
            endrow = startrow + Range("MDS_PCN").Rows.Count
          Case Range("MDS_GSI").Row - 1
            startrow = Range("MDS_GSI").Row - 1
            endrow = startrow + Range("MDS_GSI").Rows.Count
          Case Range("MDS_UMI").Row - 1
            startrow = Range("MDS_UMI").Row - 1
            endrow = startrow + Range("MDS_UMI").Rows.Count
        End Select
        col = Range(Target.Address).Column
        If col > 4 Then
          Range(Cells(startrow, col), Cells(endrow, col)).Select
          Selection.Delete Shift:=xlToLeft
          Cells(startrow, col).Select
        Else
          MsgBox "First column cannot be removed.", vbOKOnly
        End If
        Set Target = Range(addr)
        Application.EnableEvents = True
      Else
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 8647549
          Cells(i, colNumber).Interior.Color = 10092543
          i = i + 1
        Loop
      End If
    Case Range("MDS_PDF").Row
      If Cells(Range("MDS_PDF").Row - 1, Range(Target.Address).Column) <> "Add" Then
        If MsgBox("Please confirm that you are adding a new Proc ID.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("MDS_PDF").Row - 1, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PDF").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PDF").Row
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Cells(Range("MDS_PDF").Row + 10, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PDF").Row + 10, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PDF").Row + 11
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
          Loop
          Cells(Range("MDS_PDF").Row + 29, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PDF").Row + 29, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PDF").Row + 30
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
            Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10855845
              i = i + 1
            Loop
         Loop
          Cells(Range("MDS_PDF").Row + 55, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PDF").Row + 55, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PDF").Row + 56
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          If Cells(75, colNumber).value = "Y" Then
            Call warnISIS
          End If
          Application.EnableEvents = True
        End If
      End If
    Case 13
      If CStr(Cells(25, colNumber).value) = "7" Then
        If Cells(rownumber, colNumber).value <> "000" Then
          Application.EnableEvents = False
          Cells(rownumber, colNumber).value = "'000"
          Application.EnableEvents = True
          MsgBox "With the Settlement Type being set to 7, the Tran Curr Code cannot be different from 000. This field has been set again to 000.", vbOKOnly
        End If
      End If
    Case 25
      If CStr(Cells(rownumber, colNumber).value) = "7" Then
        If Cells(13, colNumber).value <> "000" Then
          Application.EnableEvents = False
          Cells(13, colNumber).value = "'000"
          Application.EnableEvents = True
          MsgBox "The Tran Curr Code field has been set to 000.", vbOKOnly
        End If
      End If
    Case 40, 46
      If Len(Cells(rownumber, colNumber).value) > 0 Then
        Call warnISIS
      End If
    Case 75
      If Cells(rownumber, colNumber).value = "Y" Then 'And Cells(Range("MDS_PDF").Row - 1, colnumber).value = "Add" Then
        Call warnISIS
      End If
    Case Range("MDS_PCN").Row
      If Cells(Range("MDS_PCN").Row - 1, Range(Target.Address).Column) <> "Add" Then
        If MsgBox("Please confirm that you are adding a new Proc ID.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("MDS_PCN").Row - 1, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PCN").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PCN").Row
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Cells(Range("MDS_PCN").Row + 8, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PCN").Row + 8, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PCN").Row + 9
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
          Loop
          Cells(Range("MDS_PCN").Row + 47, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PCN").Row + 47, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PCN").Row + 48
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
          Loop
          Cells(Range("MDS_PCN").Row + 86, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PCN").Row + 86, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_PCN").Row + 87
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
            Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10855845
              i = i + 1
            Loop
         Loop
          Cells(Range("MDS_PCN").Row + 145, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_PCN").Row + 145, Range(Target.Address).Column).Interior.Color = 8647549
          'i = Range("MDS_PCN").Row + 137
          'Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(293, Range(Target.Address).Column).Interior.Color = 8647549
          'i = i + 1
          'Loop
          Application.EnableEvents = True
        End If
      End If
  End Select
  
  Select Case Range(Target.Address).Row
    Case 77, 93
      MsgBox "You updated a field that requires you to think whether there is any impact on the Dual Message configuration." & vbCrLf & vbCrLf & "Please update any fields in the Dual Message configuration that might be impacted by this flag change."
  End Select

  If Range(Target.Address).Interior.Color = 10092543 Then
    tocfield = Cells(getTypeOfChangeRow(Target, 3), Range(Target.Address).Column).Address
    If (Range(tocfield).value = "No Change") Or (Range(tocfield).value = "Select") Then
      MsgBox "Please mark the Type of Change field to the correct action to be taken", vbOKOnly
      Range(tocfield).Select
    End If
  End If
End If
End Sub

Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
On Error GoTo end_sub
    countryName = Range("C16").value
    countryCode3 = Application.VLookup(countryName, Sheets("Lookup").Range("B1:D253"), 3, False)
    countryCode2 = Application.VLookup(countryCode3, Sheets("Lookup").Range("P18:Q47"), 2, False)
    If IsError(countryCode2) Then
      Range("17:17").EntireRow.hidden = True
      Application.EnableEvents = False
      Range("C17").value = ""
      Application.EnableEvents = True
    Else
      Range("17:17").EntireRow.hidden = False
      Application.EnableEvents = False
      Range("C17").value = countryCode2
      Application.EnableEvents = True
    End If
  If Not IsError(Range("E22").value) Then
    If Range("E22").value = "Europe_Profile" Then
      Range("C21").Validation.Delete
      Range("C21").Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "New ICA Setup,Change ICA Setup,New Principal,New Principal - switch to Transaction Based,New Processor ICA,Change Processor ICA,Add First Time Issuing,Add First Time Acquiring,Add Backup Site"
    ElseIf Range("E22").value = "NAM_Profile" Then
      Range("C21").Validation.Delete
      Range("C21").Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "New ICA Setup,Change ICA Setup,New Principal"
    Else
      Range("C21").Validation.Delete
      Range("C21").Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "New ICA Setup,Change ICA Setup,New Principal,New Processor ICA,Change Processor ICA,Add First Time Issuing,Add First Time Acquiring,Add Backup Site"
    End If
  End If
  If Range("D21") = "USA" Then
    Range("7:7").EntireRow.hidden = True
  Else
    Range("7:7").EntireRow.hidden = False
  End If
end_sub:
End Sub

'On double click on a date field, the calendar will pop up in UserForm1
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Select Case Target.Address
 Case "$C$6"
  UserForm1.Show
  Cancel = True
 Case "$C$7"
  UserForm1.Show
  Cancel = True
End Select

End Sub

'Triggered when anything changes on this sheet.
'Will trigger the markCellAsUpdated function and manage the displayed lines based on the user's input.
Private Sub Worksheet_Change(ByVal Target As Range)
  Call markCellAsUpdated(Target)
 If Sheets("Project Overview").Range("A2") = True Then
  On Error Resume Next
  If Not IsError(Range("E22").value) Then
    If Range("E22").value = "Europe_Profile" Then
      Range("C21").Validation.Delete
      Range("C21").Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "New ICA Setup,Change ICA Setup,New Principal,New Principal - switch to Transaction Based,New Processor ICA,Change Processor ICA,Add First Time Issuing,Add First Time Acquiring,Add Backup Site"
    Else
      Range("C21").Validation.Delete
      Range("C21").Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "New ICA Setup,Change ICA Setup,New Principal,New Processor ICA,Change Processor ICA,Add First Time Issuing,Add First Time Acquiring,Add Backup Site"
    End If
  End If
  If Target.Address = "$C$7" Then
    If Range("E22").value = "Europe_Profile" Then
      reqdate = IIf(Len(Range("C6").value) > 0, Range("C6").value, Now())
      If Application.NetworkDays(reqdate, Range("C7").value) < 5 Then
        MsgBox "Implementation Date should be at least 5 days in the future.", vbCritical
        Application.EnableEvents = False
        Range("C7").value = ""
        Application.EnableEvents = True
      Else
        MsgBox "This request must be submitted no later than " & Format(DateAdd("w", -5, Range("C7").value), "dddd dd/mmm/yyyy", vbMonday)
      End If
      Exit Sub
    End If
  ElseIf Target.Address = "$C$16" Then
    countryName = Range("C16").value
    countryCode3 = Application.VLookup(countryName, Sheets("Lookup").Range("B1:D253"), 3, False)
    countryCode2 = Application.VLookup(countryCode3, Sheets("Lookup").Range("P18:Q46"), 2, False)
    If IsError(countryCode2) Then
      Range("17:17").EntireRow.hidden = True
      Range("C17").value = ""
    Else
      Range("17:17").EntireRow.hidden = False
      Application.EnableEvents = False
      Range("C17").value = countryCode2
      Application.EnableEvents = True
    End If
  ElseIf Target.Address = "$C$17" Then
    If Len(Range("C17")) > 0 Then
      Range("D17").value = checkVAT(Range("C17").value)
    Else
      Range("D17").value = ""
    End If
  ElseIf Target.Address = "$C$21" Then
    If Target.value = "New Principal - switch to Transaction Based" Then
       Range("H21").value = "N"
       Range("23:24").EntireRow.hidden = True
       Range("27:28").EntireRow.hidden = True
       Range("30:30").EntireRow.hidden = False
       Range("D30").value = "Clearing collection |fffd| All fees collected from the settlement account"
       Range("31:37").EntireRow.hidden = True
       Range("D38").value = "N"
       Range("38:40").EntireRow.hidden = False
       Range("42:69").EntireRow.hidden = True
       Range("79:85").EntireRow.hidden = False '+37
       If Range("C82") = "Issuing" Or Range("C81") = "" Then
         Range("83:83").EntireRow.hidden = True
       End If
       Range("85:91").EntireRow.hidden = True
    ElseIf Range(Target.Address).value = "New Principal" Then
      Range("23:24").EntireRow.hidden = True
      Range("27:28").EntireRow.hidden = True
      Range("30:30").EntireRow.hidden = False
      Range("31:40").EntireRow.hidden = True
      Range("42:69").EntireRow.hidden = False
      Range("48:48").EntireRow.hidden = True
      Range("70:78").EntireRow.hidden = True
      Range("80:91").EntireRow.hidden = True
      If Range("E22").value = "Europe_Profile" Then
        Range("E21").Formula = "=B21"
        Range("F21").Formula = "=B21"
        Range("G21").Formula = "=B21"
        Range("E21:G21").Validation.Add xlValidateDecimal, xlValidAlertStop, xlLess, "0"
        Range("E21:G21").Validation.InputTitle = "Field not editable"
        Range("E21:G21").Validation.InputMessage = "This field must be the same as Activity ICA for new Principal"
        Range("D38").value = "Y"
        Range("D30").value = "Invoice (On Demand)"
        Range("38:40").EntireRow.hidden = False
        Range("42:69").EntireRow.hidden = True
      End If
    ElseIf Range(Target.Address).value = "New ICA Setup" Or Range(Target.Address).value = "Change ICA Setup" Then
      Range("23:24").EntireRow.hidden = (Range(Target.Address).value = "Change ICA Setup")
      Range("27:28").EntireRow.hidden = True
      Range("30:30").EntireRow.hidden = False
      Range("31:40").EntireRow.hidden = True
      Range("42:69").EntireRow.hidden = False
      Range("48:48").EntireRow.hidden = True
      Range("70:78").EntireRow.hidden = True
      Range("80:91").EntireRow.hidden = True
      If Range("E22").value = "Europe_Profile" Then
        Range("79:91").EntireRow.hidden = True
        Range("D38").value = "N"
        'Range("30:30").EntireRow.hidden = True
        Range("E21").Formula = ""
        Range("F21").Formula = ""
        Range("G21").Formula = ""
        Range("E21:G21").Validation.Delete
        Range("38:40").EntireRow.hidden = False
        Range("42:69").EntireRow.hidden = True
      End If
    ElseIf Target.value = "New Processor ICA" Or Target.value = "Change Processor ICA" Then
        Range("23:48").EntireRow.hidden = True
        Range("49:57").EntireRow.hidden = False
        Range("58:101").EntireRow.hidden = True
        If Range("E22").value = "Europe_Profile" Then
          Application.EnableEvents = False
          Range("D54:D56").Select
          Selection.Delete Shift:=xlToLeft
          Range("C55").value = ""
          Range("C56").value = ""
          Range("C21").Select
          Application.EnableEvents = True
        End If
    ElseIf Target.value = "Add First Time Issuing" Then
        Range("C83").value = ""
        Range("25:79").EntireRow.hidden = True
        Range("79:81").EntireRow.hidden = False
        Range("82:82").EntireRow.hidden = True
        Range("84:90").EntireRow.hidden = False
        Range("91:91").EntireRow.hidden = True
        Range("C82").value = "Issuing"
        Exit Sub
    ElseIf Target.value = "Add First Time Acquiring" Then
        Range("C84").value = ""
        Range("25:79").EntireRow.hidden = True
        Range("79:81").EntireRow.hidden = False
        Range("82:82").EntireRow.hidden = True
        Range("84:90").EntireRow.hidden = False
        Range("91:91").EntireRow.hidden = True
        Range("C82").value = "Acquiring"
        Exit Sub
    ElseIf Target.value = "Add Backup Site" Then
        Range("C82").value = ""
        Range("25:79").EntireRow.hidden = True
        Range("79:81").EntireRow.hidden = False
        Range("84:84").EntireRow.hidden = True
        Range("85:91").EntireRow.hidden = True
        Range("C84").value = "Y"
        Exit Sub
    End If
  ElseIf Target.Address = "$D$21" Then
    If Target.value = "BRA" Then
      Range("34:40").EntireRow.hidden = True
      Range("35:35").EntireRow.hidden = False
      Range("31:31").EntireRow.hidden = False
      Exit Sub
    ElseIf Target.value = "ARG" Then
      Range("34:40").EntireRow.hidden = True
      Range("34:35").EntireRow.hidden = False
      Range("31:31").EntireRow.hidden = False
      Exit Sub
    Else
      Range("31:31").EntireRow.hidden = True
    End If
    If Target.value = "USA" Then
      Range("7:7").EntireRow.hidden = True
    Else
      Range("7:7").EntireRow.hidden = False
    End If
  ElseIf Target.Address = "$H$21" Then
    If Target.value = "Y" Then
      MsgBox "Merchant Connect agreement should be obtained from the Customer Delivery Manager and sent to Billing Setup Europe in addition to the form."
      If Range("D30").value <> "Invoice (On Demand)" Then
        Range("79:91").EntireRow.hidden = False
      Else
        Range("79:91").EntireRow.hidden = True
      End If
    End If
  ElseIf Target.Address = "$D$23" Then
    If Range(Target.Address).value = "Yes" Then
      Range("27:27").EntireRow.hidden = False
      Range("28:40").EntireRow.hidden = True
    Else
      Range("27:27").EntireRow.hidden = True
      Range("28:40").EntireRow.hidden = False
      If Range("E22") = "Europe_Profile" Then
        Range("31:37").EntireRow.hidden = True
      End If
    End If
    Exit Sub
  ElseIf Target.Address = "$D$30" Then
    If Range("E22").value = "Europe_Profile" And Range("C21").value = "New Principal" And Range("D30").value <> "Invoice (On Demand)" Then
      If Application.Visible Then
        MsgBox "Invalid option selected. To change the Billing Collection Method to Clearing, please use the New Principal - Switch to Transaction Based action"
      End If
      Application.EnableEvents = False
      Range("D30").value = "Invoice (On Demand)"
      Application.EnableEvents = True
      Exit Sub
    End If
    Select Case Left(Target.value, 10)
      Case "Settlement"
        Range("32:33").EntireRow.hidden = False
        Range("34:40").EntireRow.hidden = True
        'MsgBox "Customers selecting this collection method must establish a nostro settlement account in the United States at a participant of the US Real Time Gross Settlement System (Fedwire system) and must participate to the default regional settlement service in USD. Customers must fund the account and authorize MasterCard to debit it via 1031 Fedwire drawdown message. Customers selecting this collection method should expect some fees to be collected before they are live in MasterCard processing systems.", vbOKOnly
      Case "DDA collec"
        Range("32:33").EntireRow.hidden = True
        Range("34:37").EntireRow.hidden = False
        Range("38:40").EntireRow.hidden = True
        MsgBox "Customers selecting this collection method must establish a single Demand Deposit Account in the US that receives items through the Automated Clearinghouse System (ACH). Customers must fund the account and authorize Mastercard to debit it via ACH drafts. ACH drafts initiated by Mastercard will be identified by company id 1222222220 (MEA and AP Regions) or 1952536378 (US, Canada and LAC Regions). Customers selecting this collection method should expect some fees to be collected before they are live in Mastercard processing systems.", vbOKOnly
      Case "Clearing c"
        Range("32:33").EntireRow.hidden = True
        Range("34:37").EntireRow.hidden = True
        If Range("E22").value = "Europe_Profile" Then
          Range("38:40").EntireRow.hidden = False
        Else
          Range("38:40").EntireRow.hidden = True
          MsgBox "Customers selecting this collection method must establish a nostro settlement account in their settlement currency at a participant to the local RTGS system." & vbCrLf & vbCrLf & "This collection method is not available to Single Message customers that will not have a connection to the Dual Message clearing system.", vbOKOnly
        End If
      Case "Clearing a"
        Range("32:37").EntireRow.hidden = False
        Range("38:40").EntireRow.hidden = True
        MsgBox "Customers selecting this collection method must establish a single Demand Deposit Account in the US that receives items through the Automated Clearinghouse System (ACH). Customers must fund the account and authorize Mastercard to debit it via ACH drafts. ACH drafts initiated by Mastercard will be identified by company id 1222222220 (AP and MEA Regions) or 1952536378 (US, Canada and LAC Regions)." & vbCrLf & vbCrLf & "Customers selecting this collection method must also establish a nostro settlement account in their settlement currency at a participant to the local RTGS system." _
           & vbCrLf & vbCrLf & "Customers selecting this collection method should expect some fees to be collected before they are live in Mastercard processing systems." & vbCrLf & vbCrLf & "This collection method is not available to Single Message customers that do not have a connection to the Dual Message clearing system.", vbOKOnly
      Case "Invoice (O"
        Range("32:37").EntireRow.hidden = True
        Range("38:40").EntireRow.hidden = False
    End Select
  ElseIf Target.Address = "$D$32" Then
    Select Case Left(Target.value, 10)
      Case "US00000001"
        MsgBox "Customers selecting this collection method must establish a nostro settlement account in the United States at a participant of the US Real Time Gross Settlement System (Fedwire system) and must participate to the default regional settlement service US00000001 in USD. Customers must fund the account and authorize Mastercard to debit it via 1031 Fedwire drawdown message. Customers selecting this collection method should expect some fees to be collected before they are live in Mastercard processing systems.", vbOKOnly
      Case "EU00000018"
        MsgBox "Customers selecting this collection method must participate to the default regional settlement service EU00000018 in USD which requires a special approval from the Mastercard Treasury Team. Customers who have been given this approval must establish a USD settlement account in or outside of the United States at a bank that can execute payments to JP Morgan NY within 2 business days. Customers are responsible for initiating wire transfers to Mastercard|fffd|s account at JP Morgan Chase NY. Customers selecting this collection method should expect some fees to be collected before they are live in Mastercard processing systems."
    End Select
  ElseIf Target.Address = "$D$35" Then
    Application.EnableEvents = False
    Target.value = Format(Target.value, "000000000")
    Application.EnableEvents = True
    bankName = getACHBankName(Target.value)
    If Len(bankName) > 1 Then
      Range("$D$36").value = bankName
    ElseIf Len(bankName) = 1 Then
      MsgBox "A technical problem with the Federal Reserve prevents us from checking the validity of the ACH routing number." & vbCrLf & vbCrLf & "Please try again later or provide manually the Bank name in the field below.", vbCritical, "Error"
    Else
      MsgBox "The provided Transit Routing Number could not be identified as a valid ACH routing number." & vbCrLf & vbCrLf & "Please check the provided number.", vbCritical, "Error"
    End If
  ElseIf Target.Address = "$B$47" Then
    If Left(Target.value, 4) = "Bulk" Or Left(Target.value, 4) = "Both" Then
      Range("48:48").EntireRow.hidden = False
    Else
      Range("48:48").EntireRow.hidden = True
    End If
  ElseIf Target.Address = "$C$48" Then
    If Len(Target.value) > 0 Then
      MsgBox "Please ensure the applicable Bulk IDs are selected in the Connectivity tab.", vbInformation
    End If
  ElseIf Target.Address = "$D$69" Then
    If Target.value = "No" Then
      endrow = Range("Billing_Svcs_Affiliates").Row + Range("Billing_Svcs_Affiliates").Rows.Count
      ActiveSheet.Shapes("Picture 2").Visible = False
    Else
      endrow = 75 'Range("Billing_Svcs_Affiliates").Row + Range("Billing_Svcs_Affiliates").Rows.Count
    End If
    Range("70:" & endrow).EntireRow.hidden = (Target.value = "No")
    'ActiveSheet.Shapes("Picture 2").Visible = (Target.value = "Yes")
  ElseIf Target.Address = "$D$74" Then
    endrow = Range("Billing_Svcs_Affiliates").Row + Range("Billing_Svcs_Affiliates").Rows.Count
    Range("76:" & endrow).EntireRow.hidden = (Target.value = "No")
    ActiveSheet.Shapes("Picture 2").Visible = (Target.value = "Yes")
  ElseIf Target.Address = "$C$82" Or Target.Address = "$C$83" Or Target.Address = "$C$84" Then
      If Range("C84") = "N" Then
        If Range("C82").value = "Issuing" Then
          Range("83:83").EntireRow.hidden = True
          Range("85:87").EntireRow.hidden = False
          Range("88:90").EntireRow.hidden = True
        ElseIf Range("C82").value = "Acquiring" Then
          Range("83:83").EntireRow.hidden = False
          Range("85:86").EntireRow.hidden = False
          Range("87:87").EntireRow.hidden = True
          Range("88:88").EntireRow.hidden = False
          Range("89:90").EntireRow.hidden = True
        ElseIf Range("C82").value = "Both" Then
          Range("83:83").EntireRow.hidden = False
          Range("85:88").EntireRow.hidden = False
          If Range("83") = "ATM" Then
            Range("88:88").EntireRow.hidden = True
          End If
          Range("89:90").EntireRow.hidden = True
        Else
          Range("83:83").EntireRow.hidden = True
          Range("85:90").EntireRow.hidden = True
        End If
      ElseIf Range("C84") = "Y" Then
        If Range("C82").value = "Issuing" Then
          Range("83:83").EntireRow.hidden = True
          Range("85:86").EntireRow.hidden = False
          Range("87:87").EntireRow.hidden = (Range("C21") = "Add Backup Site")
          Range("88:88").EntireRow.hidden = True
          Range("89:89").EntireRow.hidden = False
          Range("90:90").EntireRow.hidden = True
        ElseIf Range("C82").value = "Acquiring" Then
          Range("83:83").EntireRow.hidden = False
          Range("85:86").EntireRow.hidden = False
          Range("87:87").EntireRow.hidden = True
          Range("88:88").EntireRow.hidden = (Range("C21") = "Add Backup Site")
          Range("89:89").EntireRow.hidden = True
          Range("90:90").EntireRow.hidden = False
        ElseIf Range("C82").value = "Both" Then
          Range("83:83").EntireRow.hidden = False
          Range("85:86").EntireRow.hidden = False
          Range("87:88").EntireRow.hidden = (Range("C21") = "Add Backup Site")
          Range("89:90").EntireRow.hidden = False
          If Range("C83") = "ATM" Then
            Range("88:88").EntireRow.hidden = True
            Range("90:90").EntireRow.hidden = True
          End If
        Else
          Range("83:83").EntireRow.hidden = True
          Range("85:90").EntireRow.hidden = True
        End If
      Else
          If Range("C82") = "Both" Or Range("C82") = "Acquiring" Then
            Range("83:83").EntireRow.hidden = False
          Else
            Range("83:83").EntireRow.hidden = True
          End If
          Range("85:90").EntireRow.hidden = True
      End If
  End If
  If Range("E25") = "Other_Setup" Then
    Range("31:31").EntireRow.hidden = True
  Else
    Range("31:31").EntireRow.hidden = False
  End If
 End If
  'If Len(Range("D30").value) = 0 And Left(Range("D31").value, 6) <> "Brazil" And Range("D23").value <> "Yes" Then
  '  Range("32:39").EntireRow.hidden = False
  'End If
end_sub:
  Application.EnableEvents = True
End Sub
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered when anything changes on this sheet.
'Will trigger the markCellAsUpdated function.
Private Sub Worksheet_Change(ByVal Target As Range)
  Call markCellAsUpdated(Target)
End Sub

'Clicking any hyperlink in the sheet triggers this function.
'The hyperlinks allow copying the contents of the Official Street Address into the targeted contact.
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  Target.Range.Select
  Target.Range.Font.Color = RGB(0, 0, 255)
  
  Range("D9:D13").Copy
  Range("D" & Target.Range.Row).Select
  ActiveSheet.Paste
  Target.Range.Select
End Sub
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered when anything changes on this sheet.
'Will trigger the markCellAsUpdated function and manage the displayed lines based on the user's input.
Private Sub Worksheet_Change(ByVal Target As Range)
 If Sheets("Project Overview").Range("A2") = True Then
  Call markCellAsUpdated(Target)
  
  Select Case Target.Address
    Case "$D$34"
      If Range(Target.Address).value = "Current MasterCom Pro" Then
        'Range("36:36").EntireRow.hidden = False
      Else
        Range("36:36").EntireRow.hidden = True
      End If
    Case "$D$24"
      If Range(Target.Address).value = "Using Existing Hosted Configuration" Then
        Range("26:27").EntireRow.hidden = False
      Else
        Range("26:27").EntireRow.hidden = True
      End If
    Case Range("MC_Q_Type").Address
      Range("22:43").EntireRow.hidden = True
      Select Case Target.value
        Case "Mirror existing ICA/Proc ID"
          Range("MC_MH").EntireRow.hidden = False
        Case "Process disputes using MasterCom Pro"
          Range("MC_Own").EntireRow.hidden = False
          If Range("D28").value = "Current MasterCom Pro" Then
            'Range("36:36").EntireRow.hidden = False
          Else
            Range("36:36").EntireRow.hidden = True
          End If
        Case "Process disputes through a third party processor"
          Range("MC_TPP").EntireRow.hidden = False
        Case "Process disputes using MasterCom Hosted"
          Range("MC_Hosted").EntireRow.hidden = False
        Case ""
      End Select
      
    Case Range("MC_Q_Sender_MCNR").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_Sender_MCNR").EntireRow.hidden = False
        Case "No"
          Range("MC_Sender_MCNR").EntireRow.hidden = True
        Case ""
          Range("MC_Sender_MCNR").EntireRow.hidden = False
      End Select
  
    Case Range("MC_Q_Sender_MRCR").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_Sender_MRCR").EntireRow.hidden = False
        Case "No"
          Range("MC_Sender_MRCR").EntireRow.hidden = True
        Case ""
          Range("MC_Sender_MRCR").EntireRow.hidden = False
      End Select
  
     Case Range("MC_Q_Sender_FCR").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_Sender_FCR").EntireRow.hidden = False
        Case "No"
          Range("MC_Sender_FCR").EntireRow.hidden = True
        Case ""
          Range("MC_Sender_FCR").EntireRow.hidden = False
      End Select
 
    Case Range("MC_Q_Receiver_MRCR").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_Receiver_MRCR").EntireRow.hidden = False
        Case "No"
          Range("MC_Receiver_MRCR").EntireRow.hidden = True
        Case ""
          Range("MC_Receiver_MRCR").EntireRow.hidden = False
      End Select
  
     Case Range("MC_Q_Receiver_FCR").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_Receiver_FCR").EntireRow.hidden = False
        Case "No"
          Range("MC_Receiver_FCR").EntireRow.hidden = True
        Case ""
          Range("MC_Receiver_FCR").EntireRow.hidden = False
      End Select
 
      Case Range("MC_Q_BIN").Address
      Select Case Target.value
        Case "Yes"
          Range("MC_BIN").EntireRow.hidden = False
        Case "No"
          Range("MC_BIN").EntireRow.hidden = True
        Case ""
          Range("MC_BIN").EntireRow.hidden = False
      End Select
 
  End Select
 End If
End Sub
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered when anything changes on this sheet.
'Will trigger the markCellAsUpdated function and manage the displayed lines based on the user's input.
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo end_sub
  Call markCellAsUpdated(Target)
  
  Select Case Target.Address
    Case Range("C_Q_2nd_Eth").Address
      Select Case Target.value
        Case "Yes"
          Range("C_2nd_Eth").EntireRow.hidden = False
        Case "No"
          Range("C_2nd_Eth").EntireRow.hidden = True
        Case ""
          Range("C_2nd_Eth").EntireRow.hidden = False
      End Select
      
    Case Range("C_Q_NSP").Address
      Select Case Target.value
        Case "Yes"
          Range("C_NSP").EntireRow.hidden = False
        Case "No"
          Range("C_NSP").EntireRow.hidden = True
        Case ""
          Range("C_NSP").EntireRow.hidden = False
      End Select
      
    Case Range("C_Q_SR").Address
      Select Case Target.value
        Case "Yes"
          Range("C_SR").EntireRow.hidden = False
        Case "No"
          Range("C_SR").EntireRow.hidden = True
        Case ""
          Range("C_SR").EntireRow.hidden = False
      End Select
      
  End Select
  
  If (Range(Target.Address).Column = 6) And (Range(Target.Address).Row >= Range("C_GFT").Row) And (Range(Target.Address).Row <= Range("C_MGOS").Row) Then
    If Left(Target, 1) = "R" Then
      Cells(Range(Target.Address).Row, 12).value = "EBCDIC"
    Else
      Cells(Range(Target.Address).Row, 12).value = ""
    End If
  End If

end_sub:
End Sub

Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Triggered when anything changes on this sheet.
'Will trigger the markCellAsUpdated function.
Private Sub Worksheet_Change(ByVal Target As Range)
  Call markCellAsUpdated(Target)
  If Sheets("Project Overview").Range("A2") Then
    If (Target.Row = Range("MGS_SP").Row + 8) Then
      If Target.value = "N" Then
        MsgBox "Please provide another language in the cell below"
      End If
    End If
  End If
End Sub

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

'Triggered upon any change in the sheet
'Manages the Type of Change fields
Private Sub Worksheet_Change(ByVal Target As Range)
 If Sheets("Project Overview").Range("A2") = True Then
  Call markCellAsUpdated(Target)
  Select Case Range(Target.Address).Row
    Case 8
      If MsgBox("Providing an MKID on Acquirer ICA level is a special operation, and has only effect if the MKID on Acquirer Processor ICA is left blank. Use this feature only if the acquirer processor uses different keys for various Acquirer ICAs." & Chr(10) & "Are you sure you want to change this value?", vbYesNo, "Careful!") = vbNo Then
        Application.EnableEvents = False
        Application.Undo
        Application.EnableEvents = True
        Exit Sub
      End If
    Case 16
      If MsgBox("Changing the MKID on Acquirer Processor ICA might be a delicate operation and should be addressed with caution. Changing this value impacts all Acquirer ICAs processed by this Processor." & Chr(10) & "Are you sure you want to change this value?", vbYesNo, "Careful!") = vbNo Then
        Application.EnableEvents = False
        Application.Undo
        Application.EnableEvents = True
        Exit Sub
      End If
    Case 5, 14, 20, 40, 76, 84
      colNumber = Range(Target.Address).Column
      rownumber = Range(Target.Address).Row
      If Cells(rownumber, colNumber).value = "Add BIN" Or Cells(rownumber, colNumber).value = "Live" Or Cells(rownumber, colNumber).value = "Banknet Cutover Notice" Or (Cells(rownumber, colNumber).value = "Transfer/Conversion/Live" And rownumber = 6) Or (Cells(rownumber, colNumber).value = "Transfer/Conversion/Live" And rownumber = 76) Then
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 10027007
          Cells(i, colNumber).Interior.Color = 8647549
          i = i + 1
        Loop
      ElseIf Cells(rownumber, colNumber).value = "Copy Column" Then
        Application.EnableEvents = False
        'Application.Undo
        startrow = rownumber - 1
        i = rownumber + 1
        Do While Not (Cells(i, colNumber).MergeCells) And (Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007)
          i = i + 1
        Loop
        endrow = i - 1
        Range(Cells(startrow, colNumber + 1), Cells(endrow, colNumber + 1)).Select
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        Range(Cells(startrow, colNumber), Cells(endrow, colNumber)).Select
        Selection.Copy
        Cells(startrow, colNumber + 1).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Target.Select
        Application.EnableEvents = True
        Select Case Range(Target.Address).Row
          Case 14
            sr = Range("Acquiring_Dual_Message_Processor_Business_Partner").Row
            sc = Range("Acquiring_Dual_Message_Processor_Business_Partner").Column
            er = sr + Range("Acquiring_Dual_Message_Processor_Business_Partner").Rows.Count - 1
            ec = sc + Range("Acquiring_Dual_Message_Processor_Business_Partner").Columns.Count - 1 + 1
            Range(Cells(sr, sc), Cells(er, ec)).Name = "Acquiring_Dual_Message_Processor_Business_Partner"
          Case 20
            sr = Range("Acquiring_Dual_Message_Processor_Acquirer_Processor_Program").Row
            sc = Range("Acquiring_Dual_Message_Processor_Acquirer_Processor_Program").Column
            er = sr + Range("Acquiring_Dual_Message_Processor_Acquirer_Processor_Program").Rows.Count - 1
            ec = sc + Range("Acquiring_Dual_Message_Processor_Acquirer_Processor_Program").Columns.Count - 1 + 1
            Range(Cells(sr, sc), Cells(er, ec)).Name = "Acquiring_Dual_Message_Processor_Acquirer_Processor_Program"
          Case 84
            sr = Range("Acquiring_Dual_Message_BIN").Row
            sc = Range("Acquiring_Dual_Message_BIN").Column
            er = sr + Range("Acquiring_Dual_Message_BIN").Rows.Count - 1
            ec = sc + Range("Acquiring_Dual_Message_BIN").Columns.Count - 1 + 1
            Range(Cells(sr, sc), Cells(er, ec)).Name = "Acquiring_Dual_Message_BIN"
        End Select
        Exit Sub
      ElseIf Cells(rownumber, colNumber).value = "Remove Column" Then
        Application.EnableEvents = False
        addr = Target.Address
        startrow = rownumber - 1
        i = rownumber + 1
        Do While Not (Cells(i, colNumber).MergeCells) And (Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007)
          i = i + 1
        Loop
        endrow = i - 1
        If (rownumber = 14 And colNumber > 5) Or (rownumber = 20 And colNumber > 6) Or (rownumber = 40 And colNumber > 5) Or (rownumber = 84 And colNumber > 4) Then
          Range(Cells(startrow, colNumber), Cells(endrow, colNumber)).Select
          Selection.Delete Shift:=xlToLeft
          Cells(startrow, colNumber).Select
        Else
          MsgBox "First column cannot be removed.", vbOKOnly
        End If
        Set Target = Range(addr)
        Application.EnableEvents = True
        Exit Sub
      Else
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 8647549
          Cells(i, colNumber).Interior.Color = 10092543
          i = i + 1
        Loop
      End If
     Case Range("ADM_ICA").Row
      If Cells(Range("ADM_ICA").Row - 1, Range(Target.Address).Column) <> "Live" And Cells(Range("ADM_ICA").Row - 1, Range(Target.Address).Column) <> "Transfer/Conversion/Live" Then
        If MsgBox("Please confirm that you are adding a new ICA.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("ADM_ICA").Row - 1, Range(Target.Address).Column).value = "Live"
          Cells(Range("ADM_ICA").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_ICA").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Cells(Range("ADM_CA").Row - 1, Range(Target.Address).Column).value = "Live"
          Cells(Range("ADM_CA").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_CA").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Application.EnableEvents = True
        End If
      End If
      Exit Sub
     Case Range("ADM_APLP_BP").Row
      If Cells(Range("ADM_APLP_BP").Row - 1, Range(Target.Address).Column) <> "Banknet Cutover Notice" Then
        If MsgBox("Please confirm that you are adding a new Processor ICA.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("ADM_APLP_BP").Row - 1, Range(Target.Address).Column).value = "Banknet Cutover Notice"
          Cells(Range("ADM_APLP_BP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_APLP_BP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Application.EnableEvents = True
        End If
      End If
      Exit Sub
    Case Range("ADM_APLP_APP").Row, Range("ADM_APLP_APP").Row + 1
      If Cells(Range("ADM_APLP_APP").Row - 1, Range(Target.Address).Column) <> "Live" Then
        If MsgBox("Please confirm that you are adding a new Acquirer ICA - Processor ICA combination.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("ADM_APLP_APP").Row - 1, Range(Target.Address).Column).value = "Live"
          Cells(Range("ADM_APLP_APP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_APLP_APP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Application.EnableEvents = True
        End If
      End If
      Exit Sub
    Case Range("ADM_ARLP").Row
      If Cells(Range("ADM_ARLP").Row - 1, Range(Target.Address).Column) <> "Add BIN" Then
        If MsgBox("Please confirm that you are adding a new Acquirer BIN.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("ADM_ARLP").Row - 1, Range(Target.Address).Column).value = "Add BIN"
          Cells(Range("ADM_ARLP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_ARLP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          ica = Cells(6, 5).value
          MsgBox "The mirror BIN was set up under ICA " & ica & ". Please validate that your new BIN is also to be set up under this ICA, if not, you should either update the ICA value throughout this document or use a different mirror BIN.", vbOKOnly
          Application.EnableEvents = True
        End If
      End If
      Exit Sub
    Case Range("ADM_ABP").Row
      If Cells(Range("ADM_ABP").Row - 1, Range(Target.Address).Column) <> "Add BIN" Then
        If MsgBox("Please confirm that you are adding a new Acquirer BIN.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("ADM_ABP").Row - 1, Range(Target.Address).Column).value = "Add BIN"
          Cells(Range("ADM_ABP").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("ADM_ABP").Row
          Do While (Cells(i, Range(Target.Address).Column).Interior.Color = 10092543) Or (Cells(i, Range(Target.Address).Column).Interior.Color = 10027007)
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          If Sheets("Lookup").Range("J1").value = "EUROPE" Then
            Cells(Range("ADM_ABP").Row + 3, Range(Target.Address).Column).value = "Y"
            Cells(Range("ADM_ABP").Row + 4, Range(Target.Address).Column).value = "Y"
            Cells(Range("ADM_ABP").Row + 5, Range(Target.Address).Column).value = "Y"
            MsgBox "The UCAF, EMV ATM and EMV POS flags have been switched on to Yes.", vbOKOnly
          End If
          ica = Cells(6, 5).value
          MsgBox "The mirror BIN was set up under ICA " & ica & ". Please validate that your new BIN is also to be set up under this ICA, if not, you should either update the ICA value throughout this document or use a different mirror BIN.", vbOKOnly
          Application.EnableEvents = True
        End If
      End If
      Exit Sub
    Case 61
      Application.EnableEvents = False
      cl = Cells(61, Range(Target.Address).Column).Address
      Range(Cells(72, Range(Target.Address).Column).Address) = "=IF(ISNA(HLOOKUP(INT(" & cl & "),INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE)),HLOOKUP(" & cl & ",INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE),HLOOKUP(INT(" & cl & "),INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE))"
      Application.EnableEvents = True
    'Case 18
    '  Range(Cells(19, Range(Target.Address).Column).Address) = "=HLOOKUP(F18,INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)&"":""&ROW(P_IPLP)+9),8,FALSE)"
    '  Range(Cells(19, Range(Target.Address).Column).Address) = Range(Cells(19, Range(Target.Address).Column).Address).value
    '  Cells(11, 5).value = Range(Cells(18, Range(Target.Address).Column).Address).value
  End Select
    
  Select Case Range(Target.Address).Row
    Case 7, 23, 86
      MsgBox "You updated a field that requires you to think whether there is any impact on the Single Message configuration." & vbCrLf & vbCrLf & "Please update any fields in the Single Message configuration that might be impacted by this flag change."
  End Select

  If Range(Target.Address).Interior.Color = 10092543 Then
    tocfield = Cells(getTypeOfChangeRow(Target, 3), Range(Target.Address).Column).Address
    If (Range(tocfield).value = "No Change") Or (Range(tocfield).value = "Select") Or (Range(tocfield).value = "Reference") Then
      MsgBox "Please mark the Type of Change field to the correct action to be taken", vbOKOnly
      Range(tocfield).Select
    End If
  End If
 End If
End Sub

'Triggered when a hyperlink is clicked on the sheet
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)

   oldvalue = InputBox("Old value")
   If oldvalue <> "" Then
     newValue = InputBox("New value")
     If newValue <> "" Then
       Application.EnableEvents = False
       Rows(Target.Range.Row).Select
       Application.ReplaceFormat.Interior.Color = 8647549
       Selection.Replace what:=oldvalue, replacement:=newValue, lookat:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
       'Selection.Replace What:="*" & oldvalue, Replacement:="=HLOOKUP(D35,INDIRECT(""'Dual Message - Processor'!""&ROW(P_IPLP)+2&"":""&ROW(P_IPLP)+3),2,FALSE)", LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=True
       Target.Range.Select
       Application.EnableEvents = True
     End If
   End If

End Sub


Attribute VB_Name = "Sheet67"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

Private Sub Worksheet_Activate()
  On Error Resume Next
  If Not Sheets("Project Overview").Visible And Environ("userdomain") = "MASTERCARD" Then
    ActiveSheet.Shapes("Button 106").Visible = True
  Else
    ActiveSheet.Shapes("Button 106").Visible = False
  End If
End Sub

'On double click on a date field, the calendar will pop up in UserForm1
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Select Case Target.Address
 Case "$D$7:$E$7"
  UserForm1.Show
  Cancel = True
 Case "$D$54:$E$54"
  UserForm1.Show
  Cancel = True
 Case "$D$55:$E$55"
  UserForm1.Show
  Cancel = True
End Select

End Sub

'Triggered upon any change in the sheet
'Manages the Type of Change fields
Private Sub Worksheet_Change(ByVal Target As Range)
 On Error GoTo skip_change
If Sheets("Project Overview").Range("A2") = True Then
  
  If Range(Target.Address).Row = 25 Or Range(Target.Address).Row = 26 Or Range(Target.Address).Row = 27 Then
    Application.EnableEvents = False
    Range(Target.Address).value = "Y"
    Application.EnableEvents = True
    MsgBox "This value cannot be changed, must always be Y.", vbOKOnly, "Error"
    Exit Sub
  End If

  
  previousValue = markCellAsUpdated(Target)
  
  Select Case Range(Target.Address).Row
     Case Range("MDS_IDF").Row - 1, Range("MDS_IRT").Row - 1
      Select Case Target.value
        Case "Add"
          MsgBox "Mandatory approved Cirrus, Maestro and/or Mastercard License Agreements must be on file for this selection"
        Case "Modify"
          MsgBox "Only provide data that is being Modified. If name change- Mandatory Name Change agreement must be on file."
        Case "Transfer"
          MsgBox "Mandatory approved Change of Sponsorship agreements must be on file." & Chr(10) & "Mandatory signatures from current Principal Member"
        Case "Delete"
          MsgBox "Deletes are scheduled on Mondays' only. List all BINs associated with this R/T."
        Case "Copy Column"
          Application.EnableEvents = False
          Range(Target.Address).value = previousValue
          If Range(Target.Address).Row = Range("MDS_IRT").Row - 1 Then
            startrow = Range("MDS_IRT").Row - 1
            endrow = startrow + Range("MDS_IRT").Rows.Count + Range("MDS_Add_Services").Rows.Count + 4
          Else
            startrow = Range("MDS_IDF").Row - 1
            endrow = startrow + Range("MDS_IDF").Rows.Count
          End If
          col = Range(Target.Address).Column
          Range(Cells(startrow, col + 2), Cells(endrow, col + 3)).Select
          Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
          Range(Cells(startrow, col), Cells(endrow, col + 1)).Select
          Selection.Copy
          Cells(startrow, col + 2).Select
          ActiveSheet.Paste
          Application.CutCopyMode = False
          Target.Select
          Application.EnableEvents = True
        Case "Remove Column"
          Application.EnableEvents = False
          If Range(Target.Address).Row = Range("MDS_IRT").Row - 1 Then
            startrow = Range("MDS_IRT").Row - 1
            endrow = startrow + Range("MDS_IRT").Rows.Count + Range("MDS_Add_Services").Rows.Count + 4
          Else
            startrow = Range("MDS_IDF").Row - 1
            endrow = startrow + Range("MDS_IDF").Rows.Count
          End If
          col = Range(Target.Address).Column
          If col > 4 Then
            Range(Cells(startrow, col), Cells(endrow, col)).Select
            Selection.Delete Shift:=xlToLeft
            Cells(startrow, col).Select
          Else
            MsgBox "First column cannot be removed.", vbOKOnly
          End If
          Application.EnableEvents = True
      End Select
  End Select
  colNumber = Range(Target.Address).Column
  rownumber = Range(Target.Address).Row
  
  Select Case Range(Target.Address).Row
    Case 9, 23, 47, 65, 89, 95
      If (Range(Target.Address).Row < Range("MDS_IRT").Row - 2) And Cells(rownumber, colNumber).value = "Add" Then
        'Cells(Range("MDS_IDF").Row - 1, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IDF").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IDF").Row
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        'Cells(Range("MDS_IDF").Row + 13, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IDF").Row + 12, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IDF").Row + 13
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        'Cells(Range("MDS_IDF").Row + 32, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IDF").Row + 40, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IDF").Row + 41
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        If Cells(52, colNumber).value = "Y" Then
          Call warnISIS
        End If
        Application.EnableEvents = True
      ElseIf Cells(rownumber, colNumber).value = "Add" Then
        Application.EnableEvents = False
        Cells(Range("MDS_IRT").Row - 1, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IRT").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IRT").Row
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        i = Range("MDS_IRT").Row + 17
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        Cells(Range("MDS_IRT").Row + 24, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IRT").Row + 24, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IRT").Row + 25
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
        i = i + 1
        Loop
        Cells(Range("MDS_IRT").Row + 30, Range(Target.Address).Column).value = "Add"
        Cells(Range("MDS_IRT").Row + 30, Range(Target.Address).Column).Interior.Color = 8647549
        i = Range("MDS_IRT").Row + 31
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          Cells(i, Range(Target.Address).Column + 1).Interior.Color = 8647549
        i = i + 1
        Loop
        i = Range("MDS_IRT").Row + 39
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          Cells(i, Range(Target.Address).Column + 1).Interior.Color = 8647549
        i = i + 1
        Loop
        i = Range("MDS_Add_Services").Row
        Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
          Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10921638
            i = i + 1
          Loop
        Loop
        Cells(144, colNumber).value = "Please select..."
        Application.EnableEvents = True
        If Cells(83, colNumber).value = "Y" Then
          Call warnISIS
        End If
        If rownumber = 65 Then
          If MsgBox("It is recommended loading the default values for the Additional Services. Do you want to load these?", vbYesNo) = vbYes Then
            Cells(131, colNumber).value = "Defaults"
          End If
        End If
      End If
        
      'If Cells(rownumber, colnumber).value = "Add" Then
      '  i = rownumber + 1
      '  Do While Cells(i, colnumber).Interior.Color = 10092543
      '    Cells(i, colnumber).Interior.Color = 8647549
      '    i = i + 1
      '    Do While Cells(i, colnumber).Interior.Color = 10855845
      '      i = i + 1
      '    Loop
      '  Loop
      'Else
      '  i = rownumber + 1
      '  Do While Cells(i, colnumber).Interior.Color = 8647549
      '    Cells(i, colnumber).Interior.Color = 10092543
      '    i = i + 1
      '  Loop
      'End If
    Case Range("MDS_IDF").Row
      If Cells(Range("MDS_IDF").Row - 1, Range(Target.Address).Column) <> "Add" Then
        If MsgBox("Please confirm that you are adding a new R&T number.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("MDS_IDF").Row - 1, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IDF").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IDF").Row
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          'Cells(Range("MDS_IDF").Row + 12, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IDF").Row + 12, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IDF").Row + 13
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          'Cells(Range("MDS_IDF").Row + 39, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IDF").Row + 40, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IDF").Row + 41
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          If Cells(52, colNumber).value = "Y" Then
            Call warnISIS
          End If
          Application.EnableEvents = True
          If Sheets("Lookup").Range("J1") <> "EUROPE" And Range("D91") = "Issuer" Then
            MsgBox "Please validate the GSI value."
          End If
        End If
      End If
    Case Range("MDS_IRT").Row
      If Cells(Range("MDS_IRT").Row - 1, Range(Target.Address).Column) <> "Add" Then
        If MsgBox("Please confirm that you are adding a new BIN.", vbYesNo) = vbYes Then
          Application.EnableEvents = False
          Cells(Range("MDS_IRT").Row - 1, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IRT").Row - 1, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IRT").Row
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          i = Range("MDS_IRT").Row + 17
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Cells(Range("MDS_IRT").Row + 24, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IRT").Row + 24, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IRT").Row + 25
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
          i = i + 1
          Loop
          Cells(Range("MDS_IRT").Row + 30, Range(Target.Address).Column).value = "Add"
          Cells(Range("MDS_IRT").Row + 30, Range(Target.Address).Column).Interior.Color = 8647549
          i = Range("MDS_IRT").Row + 31
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            Cells(i, Range(Target.Address).Column + 1).Interior.Color = 8647549
          i = i + 1
          Loop
          i = Range("MDS_IRT").Row + 39
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            Cells(i, Range(Target.Address).Column + 1).Interior.Color = 8647549
          i = i + 1
          Loop
          i = Range("MDS_Add_Services").Row
          Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10092543
            Cells(i, Range(Target.Address).Column).Interior.Color = 8647549
            i = i + 1
            Do While Cells(i, Range(Target.Address).Column).Interior.Color = 10921638
              i = i + 1
            Loop
          Loop
          If Cells(83, colNumber).value = "Y" Then
            Call warnISIS
          End If
          Cells(144, colNumber).value = "Please select..."
          Application.EnableEvents = True
          If Sheets("Lookup").Range("J1") <> "EUROPE" And Range("D91") = "Issuer" Then
            MsgBox "Please validate the GSI value."
          End If
          If rownumber = 66 Then
            If MsgBox("It is recommended loading the default values for the Additional Services. Do you want to load these?", vbYesNo) = vbYes Then
              Cells(131, colNumber).value = "Defaults"
            End If
          End If
        End If
      End If
      MsgBox "Please ensure the following items are (still) correctly set up:" & Chr(10) & "- GSI" & Chr(10) & "- ISIS Flag" & Chr(10) & "- Routing Flags"
    Case 42
      If Cells(rownumber, colNumber).value = "Y" Then
        MsgBox "Activating the Acquirer MoneySend Participation might entail having to set following flags in the PCN screen for the applicable Proc ID(s)" & vbCrLf & " - Encryption = S" & vbCrLf & " - DSBL 08xx = Y" & vbCrLf & "Please ensure this configuration is in place, if required."
      End If
    Case 52
      If Cells(rownumber, colNumber).value = "Y" Then 'And Cells(Range("MDS_IDF").Row - 1, colnumber).value = "Add" Then
        Call warnISIS
      End If
    Case Range("MDS_IRT").Row + 1
      MsgBox "Please ensure the following items are (still) correctly set up:" & Chr(10) & "- GSI" & Chr(10) & "- ISIS Flag" & Chr(10) & "- Routing Flags"
    Case 71
      If Cells(71, Range(Target.Address).Column).value = "N" Then
        MsgBox "An Issuer Opt-Out Letter is required when selecting value N."
      End If
    Case 72
      If Cells(72, Range(Target.Address).Column).value = "N" Then
        MsgBox "An Issuer Opt-Out Letter is required when selecting value N."
      End If
    Case 77
      If Cells(77, Range(Target.Address).Column).value = "Y" Then
        MsgBox "An Issuer Approval Letter is required when selecting value Y."
      End If
    Case 83
      If Cells(rownumber, colNumber).value = "Y" Then 'And Cells(Range("MDS_IRT").Row - 1, colnumber).value = "Add" Then
        Call warnISIS
      End If
    Case 97
      If Cells(65, colNumber).value <> "Add" Then
        If MsgBox("Does the product code match the 6 digit BIN on product category, acceptance brand and product type?", vbYesNo) = vbNo Then
          If MsgBox("Does the customer have a variance (please check with your local Customer Delivery or Franchise Team)?", vbYesNo) = vbNo Then
            MsgBox "Previous value is being reverted", vbCritical
            Application.EnableEvents = False
            Cells(rownumber, colNumber).value = previousValue
            Application.EnableEvents = True
            Exit Sub
          End If
        End If
      End If

    Case 131
      If Cells(rownumber, colNumber).value = "Defaults" Then
        Dim conn As ADODB.Connection
        Dim rs As ADODB.Recordset
  
        Set conn = New ADODB.Connection
        Set rs = New ADODB.Recordset
  
        conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
        "Data Source=\\corp.mastercard.org\Brussels\ctos$\Tools\APW\Defaults.xlsx;" & _
        "Extended Properties=""Excel 12.0 Xml;HDR=Yes"";"
  
        rs.Open "SELECT Value FROM Defaults_P3", conn, adOpenStatic, adLockReadOnly
        rs.MoveLast
        rs.MoveFirst
      
        Application.EnableEvents = False
        Do While Not rs.EOF
          Cells(rownumber + rs.AbsolutePosition, colNumber).value = rs.Fields(0)
          If Cells(rownumber + rs.AbsolutePosition, colNumber).Interior.Color = 8647549 Then
            Cells(rownumber + rs.AbsolutePosition, colNumber).Interior.Color = 10092543
          End If
          rs.MoveNext
        Loop
        Application.EnableEvents = True
      End If
    
    Case 136
      If Cells(rownumber, colNumber).value <> "N" And Cells(rownumber, colNumber).value <> Cells(138, colNumber) Then
        Cells(138, colNumber).value = Cells(rownumber, colNumber).value
        MsgBox "Based on the mandate that Chip Issuers must support Online CAM from April 17, 2015, the value of OBS2 is set to the same value as OBS1."
      End If
    
    Case 144
      If isEligibleForMoneySend(Cells(97, colNumber), CInt(Cells(75, colNumber))) Then
        If Left(Application.VLookup(Cells(97, colNumber), Sheets("Brand_Product").Range("A:H"), 8, False), 1) = "P" And Cells(rownumber, colNumber).value = "N" Then
          MoneySendPrepaid.Show
        Else
          If Cells(rownumber, colNumber).value = "N" Then
            MsgBox "Either a variance approval response (as indicated in a returned Form 759) or initial submission of a Variance Request Form 759 (available on Mastercard Connect) will be required to deactivate this service.", vbCritical
          End If
          If CStr(Cells(75, colNumber).value) = "840" And Cells(rownumber, colNumber).value = "Y" Then
            MsgBox "To enable Cross Border MoneySend Payment Transactions, you must set this service to ""D"" and then submit the Form 1173 Mastercard MoneySend Issuer Transaction Controls Form. This flag will be set to ""D"".", vbCritical
            Application.EnableEvents = False
            Cells(rownumber, colNumber).value = "D"
            Application.EnableEvents = True
          End If
          If CStr(Cells(75, colNumber).value) <> "840" And CStr(Cells(75, colNumber).value) <> "124" And Left(Application.VLookup(Format(CStr(Cells(75, colNumber).value), "000"), Sheets("Lookup").Range("C:E"), 3, False), 1) <> "B" And Cells(rownumber, colNumber).value = "D" Then
            MsgBox "Either a variance approval response (as indicated in a returned Form 759) or initial submission of a Variance Request Form 759 (available on Mastercard Connect) will be required to deactivate this service.", vbCritical
          End If
        End If
      End If
  End Select
  
  Select Case Range(Target.Address).Row
    Case 15, 75, 93, 137, 138, 139, 170
      MsgBox "You updated a field that requires you to think whether there is any impact on the Dual Message configuration." & vbCrLf & vbCrLf & "Please update any fields in the Dual Message configuration that might be impacted by this flag change."
  End Select
  
  If Len(Cells(176, colNumber).value) > 0 And Application.Visible Then
    If rownumber > 64 Then
      Select Case Cells(175, colNumber).value
        Case "F"
          MsgBox "As this is a tokenized BIN, you must ensure the token BIN is kept in sync with this change.", vbInformation
        Case "D", "V", "T"
          MsgBox "As this is a token BIN, you must ensure the funding BIN is kept in sync with this change.", vbInformation
      End Select
    End If
  End If
  
  'Ensure correct coloring of ICCR related fields
  rownumber = 121
  Do While rownumber <= 123
    colNumber = 4
    Do While Len(Cells(rownumber, colNumber).value) > 0
      Cells(rownumber, colNumber + 1).Font.Color = Cells(rownumber, colNumber + 1).Interior.Color
      colNumber = colNumber + 2
    Loop
    rownumber = rownumber + 1
  Loop
  
  If Range(Target.Address).Interior.Color = 10092543 Then
    tocfield = Cells(getTypeOfChangeRow(Target, 3), Range(Target.Address).Column - (Range(Target.Address).Column Mod 2)).Address
    If (Range(tocfield).value = "No Change") Or (Range(tocfield).value = "Select") Or (Range(tocfield).value = "Defaults") Then
      MsgBox "Please mark the Type of Change field to the correct action to be taken", vbOKOnly
      Range(tocfield).Select
    End If
  End If
End If
skip_change:
Application.EnableEvents = True
End Sub
Attribute VB_Name = "Sheet68"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

'Triggered when something changes in the sheet
'Marks the cell as updated
'Displays the data based on the user's input
Private Sub Worksheet_Change(ByVal Target As Range)
  Call markCellAsUpdated(Target)
  
  Select Case Target.Address
     
      Case Range("SI_SM_Q_DEF").Address
      Select Case Target.value
        Case "Prefix (BIN)"
          Range("SI_SM_PN").EntireRow.hidden = True
          Range("SI_SM_BIN").EntireRow.hidden = False
        Case "Processor Number"
          Range("SI_SM_PN").EntireRow.hidden = False
          Range("SI_SM_BIN").EntireRow.hidden = True
        Case ""
        Case "Mixed (Both)"
          Range("SI_SM_PN").EntireRow.hidden = False
          Range("SI_SM_BIN").EntireRow.hidden = False
      End Select
      
  End Select
  
End Sub

Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

Private Sub Worksheet_Activate()
  If Sheets("Project Overview").Range("A2") = True And Application.Visible Then
    Application.EnableEvents = False
    If Cells(2, 16).value Then
      msg = "Please note that ABU is now mandated, so please ensure the ABU Configuration is correct and in place (see bottom of this tab)." & vbCrLf & vbCrLf
      msg = msg & "Do you want this message to appear again when you get to this tab?"
      Cells(2, 16).value = MsgBox(msg, vbYesNo) = vbYes
    End If
    Application.EnableEvents = True
  End If
End Sub

'Triggered when something changes in the sheet
'Marks the cell as updated
'Handles when a new ICA is provided
'Displays the data based on the user's input
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo error_section
  
  
  Select Case Target.Address
     
      Case Range("ICA_RM_FCS").Address
        If MsgBox("Are you adding a new ICA?", vbYesNo) = vbYes Then
          For Each cellICA In Range("A1", "P164")
            If (cellICA.Interior.Color = 10092543) Or (cellICA.Interior.Color = 10027007) Then
             cellICA.Interior.Color = 8647549
            End If
          Next cellICA
          Application.EnableEvents = False
          Range("ICA_RM_FPD").value = Range("ICA_RM_FCS").value
          Range("ICA_RM_FPD_C").value = Range("ICA_RM_FCS").value
          Range("ICA_RM_SPD").value = Range("ICA_RM_FCS").value
          Range("ICA_RM_SPD_C").value = Range("ICA_RM_FCS").value
          Range("ICA_CL").value = Range("ICA_RM_FCS").value
          Range("C60").value = Range("ICA_RM_FCS").value
          Range("ICA_ESERV").value = Range("ICA_RM_FCS").value
          Range("ICA_REP_REC").value = Range("ICA_RM_FCS").value
          Range("ICA_REP_OTH").value = Range("ICA_RM_FCS").value
          Range("ICA_REP_ONB").value = Range("ICA_RM_FCS").value
          Range("ICA_REP_AMS").value = Range("ICA_RM_FCS").value
          Range("ICA_REP_OPT").value = Range("ICA_RM_FCS").value
          Range("D143").value = Range("ICA_RM_FCS").value
          Range("H164").ClearContents
          Application.EnableEvents = True
          Exit Sub
        End If
      Case Range("ICA_Q_685_ACK").Address
      Select Case Target.value
        Case "Yes"
          Range("ICA_685").EntireRow.hidden = False
        Case "No"
          If Range("ICA_Q_685_NOT").value = "No" Then
            Range("ICA_685").EntireRow.hidden = True
          End If
        Case ""
          Range("ICA_685").EntireRow.hidden = False
      End Select
      
      Case Range("ICA_Q_685_NOT").Address
      Select Case Target.value
        Case "Yes"
          Range("ICA_685").EntireRow.hidden = False
        Case "No"
          If Range("ICA_Q_685_ACK").value = "No" Then
            Range("ICA_685").EntireRow.hidden = True
          End If
        Case ""
          Range("ICA_685").EntireRow.hidden = False
      End Select
      
      Case Range("ICA_Q_688").Address
      Select Case Target.value
        Case "Yes"
          Range("ICA_688").EntireRow.hidden = False
        Case "No"
          Range("ICA_688").EntireRow.hidden = True
        Case ""
          Range("ICA_688").EntireRow.hidden = False
      End Select
     
      Case Range("ICA_AMS_Q_DM").Address
      Select Case Target.value
        Case "Paper", "Online & Paper"
          Range("ICA_AMS_Address").EntireRow.hidden = False
        Case "Cartridge"
          Range("ICA_AMS_Address").EntireRow.hidden = False
        Case "Online"
          Range("ICA_AMS_Address").EntireRow.hidden = True
        Case ""
          Range("ICA_AMS_Address").EntireRow.hidden = False
      End Select
     
  End Select
  
  Call markCellAsUpdated(Target)
  
  If Range(Target.Address).Row > 144 And Range(Target.Address).Row < 158 Then
    endpoint = Format(Cells(Range(Target.Address).Row, 6), "0000000")
    bulk = Cells(Range(Target.Address).Row, 5)
    
    If CDbl(endpoint) > 0 And Len(bulk) > 0 Then
      i = Sheets("Connectivity").Range("C_GFT").Row
      found = False
      Do While Len(Sheets("Connectivity").Range("F" & i).value) > 0
        found = found Or (CDbl(Sheets("Connectivity").Range("E" & i).value) = endpoint And Sheets("Connectivity").Range("F" & i).value = bulk)
        i = i + 1
      Loop
      If Not found Then
        MsgBox "This Endpoint - Bulk Type configuration does not currently exist." & vbCrLf & vbCrLf & "Please ensure the bulk type gets added to the Connectivity sheet.", vbCritical
      End If
    End If
  End If
  
  Exit Sub
  
error_section:

Application.EnableEvents = True

End Sub
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

'Triggered when something changes in the sheet
'Marks the cell as updated
'Displays the data based on the user's input
Private Sub Worksheet_Change(ByVal Target As Range)
  
On Error GoTo error_section
  
 If Range(Target.Address).Row = Range("P_IPLP").Row - 1 Then
   rownumber = Range(Target.Address).Row
   colNumber = Range(Target.Address).Column
    If Cells(rownumber, colNumber).value = "Copy Column" Then
        Application.EnableEvents = False
        Application.Undo
        startrow = rownumber - 1
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007
          i = i + 1
        Loop
        endrow = i - 1
        Range(Cells(startrow, colNumber + 2), Cells(endrow, colNumber + 3)).Select
        Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        Range(Cells(startrow, colNumber), Cells(endrow, colNumber + 1)).Select
        Selection.Copy
        Cells(startrow, colNumber + 2).Select
        ActiveSheet.Paste
        Application.CutCopyMode = False
        Target.Select
        Application.EnableEvents = True
        sr = Range("Issuing_Dual_Message_Processor").Row
        sc = Range("Issuing_Dual_Message_Processor").Column
        er = sr + Range("Issuing_Dual_Message_Processor").Rows.Count - 1
        ec = sc + Range("Issuing_Dual_Message_Processor").Columns.Count - 1 + 2
        Range(Cells(sr, sc), Cells(er, ec)).Name = "Issuing_Dual_Message_Processor"
      ElseIf Cells(rownumber, colNumber).value = "Remove Column" Then
        Application.EnableEvents = False
        addr = Target.Address
        startrow = rownumber - 1
        i = rownumber + 1
        Do While Cells(i, colNumber).Interior.Color = 10092543 Or Cells(i, colNumber).Interior.Color = 8647549 Or Cells(i, colNumber).Interior.Color = 10027007
          i = i + 1
        Loop
        endrow = i - 1
        If colNumber > 5 Then
          Range(Cells(startrow, colNumber), Cells(endrow, colNumber + 1)).Select
          Selection.Delete Shift:=xlToLeft
          Cells(startrow, colNumber).Select
        Else
          MsgBox "First column cannot be removed.", vbOKOnly
        End If
        Set Target = Range(addr)
        Application.EnableEvents = True
    End If
  Else
    Call markCellAsUpdated(Target)
  End If
  
  Select Case Target.Address
    Case Range("P_Q_CCY").Address
      Select Case Target.value
        Case "Yes"
          Range("P_CCY").EntireRow.hidden = False
        Case "No"
          Range("P_CCY").EntireRow.hidden = True
        Case ""
          Range("P_CCY").EntireRow.hidden = False
      End Select
      
      Case Range("P_Q_685_ACK").Address
      Select Case Target.value
        Case "Yes"
          Range("P_685").EntireRow.hidden = False
        Case "No"
          If Range("P_Q_685_NOT").value = "No" Then
            Range("P_685").EntireRow.hidden = True
          End If
        Case ""
          Range("P_685").EntireRow.hidden = False
      End Select
      
      Case Range("P_Q_685_NOT").Address
      Select Case Target.value
        Case "Yes"
          Range("P_685").EntireRow.hidden = False
        Case "No"
          If Range("P_Q_685_ACK").value = "No" Then
            Range("P_685").EntireRow.hidden = True
          End If
        Case ""
          Range("P_685").EntireRow.hidden = False
      End Select
      
      'Case "$E$" & Range("P_IPLP").Row - 1
      '  rowstart = Range("P_IPLP").Row + 4
      '  rowend = Range("P_IPLP").Row + 10
      '  rowsiplp = rowstart & ":" & rowend
      '  Select Case Target.value
      '    Case "Current", "No Change"
      '      Rows(rowsiplp).EntireRow.hidden = True
      '    Case "New", "Change", "Delete"
      '      Rows(rowsiplp).EntireRow.hidden = False
      '  End Select
        
  End Select
  Exit Sub
  
error_section:
  
End Sub
Attribute VB_Name = "Sheet84"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
  If Sheets("Project Overview").Range("A2") = True Then
    Target.Interior.Color = 5287936
  End If
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking the Tab Completed checkbox
'Calls the tabCompleted function
'Not used
Private Sub CheckBox1_Click()
Call tabCompleted(ActiveSheet.Name, CheckBox1.value)
End Sub

'On double click on a date field, the calendar will pop up in UserForm1
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Select Case Target.Address
 Case "$D$75", "$D$76", "$D$77", "$D$78", "$D$79", "$D$80", "$D$81", "$D$82", "$D$83", "$D$84", "$D$85", "$D$86", "$D$87", "$D$88", "$D$89", "$D$90", "$D$91", "$D$92", "$D$93", "$D$94", "$D$95", "$D$96", "$D$97", "$D$98", "$D$99", "$D$100"
  UserForm1.Show
  Cancel = True
End Select

End Sub

'Triggered when a hyperlink is clicked on the sheet
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  Select Case Target.Range.Address
   Case "$A$3"
    'ActiveSheet.Unprotect
    Rows("5:10").EntireRow.hidden = Not (Rows("5:10").EntireRow.hidden)
    'ActiveSheet.Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
    'ActiveSheet.EnableSelection = xlLockedCells
   Case "$D$13"
    ActiveWindow.SmallScroll ToRight:=5
    'Target.Range.Font.Color = 16711680
   Case "$D$12"
    ActiveWindow.SmallScroll ToLeft:=5
    'Target.Range.Font.Color = 16711680
  End Select
  If Target.Range.value = "Copy Down" Then
    origStartRow = Target.Range.Row - 1
    origEndRow = Target.Range.Row
    Do While Len(Cells(origEndRow, 1).value) = 0
      origEndRow = origEndRow + 1
    Loop
    origEndRow = origEndRow - 1
    copyStartRow = origEndRow + 1
    copyEndRow = copyStartRow + origEndRow - origStartRow
    Rows(copyStartRow & ":" & copyEndRow).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Rows(origStartRow & ":" & origEndRow).Select
    Selection.Copy
    Cells(copyStartRow, 1).Select
    ActiveSheet.Paste
    Cells(copyStartRow, 1).Select
    Application.CutCopyMode = False
  End If
End Sub

Private Sub Worksheet_Activate()
  If Sheets("Project Overview").Range("A2") = True And Application.Visible Then
    MsgBox "Mastercard standard default values, for both TCC and Accumulative limits, will be applied to your account range.  To manage limits, review historical performance, configure a range block or author a custom rule, please access the Stand-In Application in MCConnect." & vbCrLf & vbCrLf & "The data in this tab is read only and informational only.", vbCritical
  End If
End Sub

'Triggered upon any change in the sheet
'Manages the Type of Change fields
Private Sub Worksheet_Change(ByVal Target As Range)
On Error GoTo end_of_sub
If Sheets("Project Overview").Range("A2") = True Then
  
If Range(Target.Address).Row = 15 Then
  colNumber = Range(Target.Address).Column
  rownumber = Range(Target.Address).Row
  If Cells(rownumber, colNumber).value = "Add BIN" Or Cells(rownumber, colNumber).value = "Live" Then
    i = Int(Range("SI_DM_AR").Cells(1, 1).Row)
    endrow = Int(i + Range("SI_DM_AR").Rows.Count - 1)
    Do While i <= endrow
      j = 0
      Do While j < 4
        If Cells(i, Target.Column + j).Interior.Color = 10092543 Or Cells(i, Target.Column + j).Interior.Color = 10027007 Then
          Cells(i, Target.Column + j).Interior.Color = 8647549
        End If
        j = j + 1
      Loop
      i = i + 1
    Loop
    i = colNumber
    Application.EnableEvents = False
    fromRange = Left(Cells(16, i), 6) & "-" & Mid(Cells(16, i), 7, 5)
    toRange = Left(Cells(17, i), 6) & "-" & Mid(Cells(17, i), 7, 5)
    Cells(Range("SI_DM_RB").Row + 9, i).value = "14 - Invalid card number"
    Cells(Range("SI_DM_RB").Row + 12, i).value = fromRange
    Cells(Range("SI_DM_RB").Row + 12, i + 1).value = toRange
    Cells(Range("SI_DM_RB").Row + 12, i + 2).value = "Block"
    Cells(Range("SI_DM_RB").Row + 13, i).value = ""
    Cells(Range("SI_DM_RB").Row + 13, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 13, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i + 2).value = ""
    Application.EnableEvents = True
  ElseIf Cells(rownumber, colNumber).value = "Copy Column" Then
      Application.EnableEvents = False
      'Application.Undo
      startrow = 2
      endrow = Range("SI_DM_AR").Row + Range("SI_DM_AR").Rows.Count
      colNumber = Target.Column
      Range(Cells(startrow, colNumber + 5), Cells(endrow, colNumber + 9)).Select
      Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
      Range(Cells(startrow, colNumber), Cells(endrow, colNumber + 4)).Select
      Selection.Copy
      Cells(startrow, colNumber + 5).Select
      ActiveSheet.Paste
      Application.CutCopyMode = False
      Target.Select
      Application.EnableEvents = True
  ElseIf Cells(rownumber, colNumber).value = "Remove Column" Then
      Application.EnableEvents = False
      addr = Target.Address
      startrow = 2
      endrow = Range("SI_DM_AR").Row + Range("SI_DM_AR").Rows.Count
      col = Target.Column
      If col > 5 Then
        Range(Cells(startrow, col), Cells(endrow, col + 4)).Select
        Selection.Delete Shift:=xlToLeft
        Cells(startrow, col).Select
      Else
        MsgBox "First column cannot be removed.", vbOKOnly
      End If
      Set Target = Range(addr)
      Application.EnableEvents = True
  Else
    Call markCellAsUpdated(Target)
  End If
ElseIf Range(Target.Address).Row = 18 Then
  Application.EnableEvents = False
  Cells(Range("SI_DM_DM").Row - 3, Range(Target.Address).Column + 3).value = "Yes"
  Cells(Range("SI_DM_TCC_Global").Row + 2, Range(Target.Address).Column + 3).value = "Yes"
  Cells(Range("SI_DM_AL").Row - 3, Range(Target.Address).Column + 3).value = "Yes"
  Application.EnableEvents = True
  Call markCellAsUpdated(Target)
  MsgBox "You updated the product code for this range. The values for the Decision Matrix, Transaction Category Code Limits - Global Parameters and Accumulative Limits have been marked as Default. Please update these values if required and if appropriate business cases have been accepted.", vbOKOnly
  If (Sheets("Lookup").Range("J1").value = "MEA") And Cells(18, Range(Target.Address).Column).value = "MWE" Then
    MsgBox "Please ensure you set VIP limits for MWE branded BINs."
  End If
ElseIf Range(Target.Address).Row - 1 = Range("SI_DM_AR").Row Then
  If Cells(Range("SI_DM_AR").Row, Range(Target.Address).Column) <> "Add BIN" Then
    If MsgBox("Please confirm that you are adding a new BIN in Stand-In.", vbYesNo) = vbYes Then
      Application.EnableEvents = False
      Cells(Range("SI_DM_AR").Row, Range(Target.Address).Column).value = "Add BIN"
      Cells(Range("SI_DM_AR").Row, Range(Target.Address).Column).Interior.Color = 8647549
      i = Int(Range("SI_DM_AR").Cells(1, 1).Row)
    endrow = Int(i + Range("SI_DM_AR").Rows.Count - 1)
    Do While i <= endrow
      j = 0
      Do While j < 4
        If Cells(i, Target.Column + j).Interior.Color = 10092543 Or Cells(i, Target.Column + j).Interior.Color = 10027007 Then
          Cells(i, Target.Column + j).Interior.Color = 8647549
        End If
        j = j + 1
      Loop
      i = i + 1
    Loop
    i = Target.Column
    fromRange = Left(Cells(16, i), 6) & "-" & Mid(Cells(16, i), 7, 5)
    toRange = Left(Cells(17, i), 6) & "-" & Mid(Cells(17, i), 7, 5)
    Cells(Range("SI_DM_RB").Row + 9, i).value = "14 - Invalid card number"
    Cells(Range("SI_DM_RB").Row + 12, i).value = fromRange
    Cells(Range("SI_DM_RB").Row + 12, i + 1).value = toRange
    Cells(Range("SI_DM_RB").Row + 12, i + 2).value = "Block"
    Cells(Range("SI_DM_RB").Row + 13, i).value = ""
    Cells(Range("SI_DM_RB").Row + 13, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 13, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 14, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 15, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 16, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 17, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 18, i + 2).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i + 1).value = ""
    Cells(Range("SI_DM_RB").Row + 19, i + 2).value = ""
    Application.EnableEvents = True
    End If
  End If
ElseIf (Range(Target.Address).Row >= Range("SI_DM_TCC").Row And Range(Target.Address).Row < Range("SI_DM_TCC").Row + Range("SI_DM_TCC").Rows.Count) Then
    Application.EnableEvents = False
    defaultrow = Range("SI_DM_TCC").Row - 3
    defaultCol = Range(Target.Address).Column
    Do While Len(Cells(defaultrow, defaultCol).value) = 0
      defaultCol = defaultCol + 1
    Loop
    Cells(defaultrow, defaultCol + 1).value = "No"
    Application.EnableEvents = True
    Call markCellAsUpdated(Target)
ElseIf (Range(Target.Address).Row >= Range("SI_DM_AL").Row And Range(Target.Address).Row < Range("SI_DM_AL").Row + Range("SI_DM_AL").Rows.Count) Then
    Application.EnableEvents = False
    defaultrow = Range("SI_DM_AL").Row - 3
    defaultCol = Range(Target.Address).Column
    Do While Len(Cells(defaultrow, defaultCol).value) = 0
      defaultCol = defaultCol + 1
    Loop
    Cells(defaultrow, defaultCol + 1).value = "No"
    Application.EnableEvents = True
    Call markCellAsUpdated(Target)
Else
    Call markCellAsUpdated(Target)
End If
  
  Select Case Target.Address
    Case Range("SI_DM_Q_LocalUse").Address 'Local Use Account Range
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_TCC_LocalUse").EntireRow.hidden = False
          Range("SI_DM_TCC_Global").EntireRow.hidden = True
        Case "No"
          Range("SI_DM_TCC_LocalUse").EntireRow.hidden = True
          Range("SI_DM_TCC_Global").EntireRow.hidden = False
      End Select
    Case Range("SI_DM_Q_PL").Address 'Premium Listings
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_PL").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_PL").EntireRow.hidden = True
      End Select
    Case Range("SI_DM_Q_EPC").Address 'Expanded Parameter Combinations
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_EPC").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_EPC").EntireRow.hidden = True
      End Select
    Case Range("SI_DM_Q_CSIP").Address 'CSI Parameters for Product Graduation
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_CSIP").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_CSIP").EntireRow.hidden = True
      End Select
    Case Range("SI_DM_Q_ACSIP").Address 'Accumulative CSI Parameters for Product Graduation
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_ACSIP").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_ACSIP").EntireRow.hidden = True
      End Select
    'Case Range("SI_DM_Q_SAF").Address 'SAF Parameters
    '  Select Case Target.value
    '    Case "Yes"
    '      Range("SI_DM_SAF").EntireRow.Hidden = False
    '    Case "No"
    '      Range("SI_DM_SAF").EntireRow.Hidden = True
    '  End Select
    Case Range("SI_DM_Q_RB").Address 'Range Blocking
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_RB").EntireRow.hidden = False
        Case "No"
          'Range("SI_DM_RB").EntireRow.Hidden = True
          i = 5
      Application.EnableEvents = False
          Do While Len(Cells(16, i)) > 0
            fromRange = Left(Cells(16, i), 6) & "-" & Mid(Cells(16, i), 7, 5)
            toRange = Left(Cells(17, i), 6) & "-" & Mid(Cells(17, i), 7, 5)
            Cells(Range("SI_DM_RB").Row + 9, i).value = ""
            Cells(Range("SI_DM_RB").Row + 9, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 12, i).value = fromRange
            Cells(Range("SI_DM_RB").Row + 12, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 12, i + 1).value = toRange
            Cells(Range("SI_DM_RB").Row + 12, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 12, i + 2).value = "Unblock"
            Cells(Range("SI_DM_RB").Row + 12, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 13, i).value = ""
            Cells(Range("SI_DM_RB").Row + 13, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 13, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 13, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 13, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 13, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 14, i).value = ""
            Cells(Range("SI_DM_RB").Row + 14, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 14, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 14, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 14, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 14, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 15, i).value = ""
            Cells(Range("SI_DM_RB").Row + 15, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 15, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 15, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 15, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 15, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 16, i).value = ""
            Cells(Range("SI_DM_RB").Row + 16, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 16, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 16, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 16, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 16, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 17, i).value = ""
            Cells(Range("SI_DM_RB").Row + 17, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 17, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 17, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 17, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 17, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 18, i).value = ""
            Cells(Range("SI_DM_RB").Row + 18, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 18, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 18, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 18, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 18, i + 2).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 19, i).value = ""
            Cells(Range("SI_DM_RB").Row + 19, i).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 19, i + 1).value = ""
            Cells(Range("SI_DM_RB").Row + 19, i + 1).Interior.Color = 8647549
            Cells(Range("SI_DM_RB").Row + 19, i + 2).value = ""
            Cells(Range("SI_DM_RB").Row + 19, i + 2).Interior.Color = 8647549
            i = i + 5
          Loop
      Application.EnableEvents = True
      End Select
    Case Range("SI_DM_Q_Holidays").Address 'Holidays
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_H").EntireRow.hidden = False
          Range("SI_DM_DST").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_H").EntireRow.hidden = True
          If Range("SI_DM_Q_Hours").value = "No" Then
            Range("SI_DM_DST").EntireRow.hidden = True
          End If
      End Select
    Case Range("SI_DM_Q_Hours").Address 'Hours
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_HS").EntireRow.hidden = True
          Range("SI_DM_DST_UTC").EntireRow.hidden = True
        Case "No"
          Range("SI_DM_HS").EntireRow.hidden = False
          If Range("SI_DM_Q_Holidays").value = "No" Then
            Range("SI_DM_DST_UTC").EntireRow.hidden = False
          End If
      End Select
    Case Range("SI_DM_Q_DST").Address 'DST
      Select Case Target.value
        Case "Yes"
          Range("SI_DM_DST").EntireRow.hidden = False
        Case "No"
          Range("SI_DM_DST").EntireRow.hidden = True
      End Select
    Case Range("SI_DM_Q_EPC_DEF").Address 'EPC Limits definition level
      Select Case Target.value
        Case "Transaction Category Code"
          Range("SI_DM_EPC_TCC").EntireRow.hidden = False
          Range("SI_DM_EPC_CAB").EntireRow.hidden = True
        Case "Card Acceptor Business Code"
          Range("SI_DM_EPC_TCC").EntireRow.hidden = True
          Range("SI_DM_EPC_CAB").EntireRow.hidden = False
        Case ""
          Range("SI_DM_EPC_TCC").EntireRow.hidden = False
          Range("SI_DM_EPC_CAB").EntireRow.hidden = False
      End Select
    Case Range("SI_DM_Q_CSI_DEF").Address 'CSI Limits definition level
      Select Case Target.value
        Case "Transaction Category Code"
          Range("SI_DM_CSI_TCC").EntireRow.hidden = False
          Range("SI_DM_CSI_CAB").EntireRow.hidden = True
        Case "Card Acceptor Business Code"
          Range("SI_DM_CSI_TCC").EntireRow.hidden = True
          Range("SI_DM_CSI_CAB").EntireRow.hidden = False
        Case ""
          Range("SI_DM_CSI_TCC").EntireRow.hidden = False
          Range("SI_DM_CSI_CAB").EntireRow.hidden = False
      End Select

  End Select
  
  If Range(Target.Address).Interior.Color = 10092543 Then
    rownumber = getTypeOfChangeRow(Target, 2)
    colNumber = Range(Target.Address).Column
    tocfield = Cells(rownumber, colNumber).Address
    Do While Len(Range(tocfield).value) = 0
      colNumber = colNumber - 1
      tocfield = Cells(rownumber, colNumber).Address
    Loop
    If (Range(tocfield).value = "No Change") Or (Range(tocfield).value = "Select") Then
      MsgBox "Please mark the Type of Change field to the correct action to be taken", vbOKOnly
      Range(tocfield).Select
    End If
  End If
End If
end_of_sub:
Application.EnableEvents = True
End Sub


Attribute VB_Name = "Sheet94"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet95"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet98"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Clicking a hyperlink on the sheet triggers this function
'This will handle the change by prompting the user how to act upon the change, implement that action and log the change in the History tab
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  
If Sheets("Project Overview").Range("E4").value = "Customer" Then
  Target.Range.Font.Color = 16711680
  MsgBox "You are not authorized to perform this action in Customer view", vbCritical
  Exit Sub
End If

On Error GoTo unableToHandle

Dim answer As VbMsgBoxResult

Target.Range.Font.Color = 16711680
Target.Range.Select
  
targetColumn = Target.Range.Column()
If targetColumn = 4 Then
  
  If InStr(Target.Range.value, ":") > 0 Then
    answer = MsgBox("This is a grouped change covering multiple cells. Previous values cannot be restored. What action do you want to apply?" & Chr(10) & "Select Yes to accept and highlight the change" & Chr(10) & "Select No to reject and PUT BLANK VALUES" & Chr(10) & "Select Cancel to accept the change without highlighting", vbYesNoCancel)
  ElseIf Range("F" & Target.Range.Column).value = "Unknown" Then
    answer = MsgBox("This is a change for which the previous value cannot be determined. What action do you want to apply?" & Chr(10) & "Select Yes to accept and highlight the change" & Chr(10) & "Select No to reject and ""Unknown"" instead" & Chr(10) & "Select Cancel to accept the change without highlighting", vbYesNoCancel)
  Else
    answer = MsgBox("Do you accept this Change?" & Chr(10) & "Select Yes to accept and highlight the change" & Chr(10) & "Select No to reject and restore the previous value" & Chr(10) & "Select Cancel to accept the change without highlighting", vbYesNoCancel)
  End If
  Application.Calculation = xlCalculationManual
  Call applyCMUpdate(Target.Range, answer)
  Application.Calculation = xlCalculationAutomatic
  
ElseIf targetColumn = 3 Then

  proceed = MsgBox("Are you sure you want to proceed with full sheet change acceptance?" & Chr(10) & "Requested action will be applied on all remaining lines for this Sheet.", vbYesNo)
  If proceed = vbYes Then
  
    answer = MsgBox("Do you accept these Changes?" & Chr(10) & "Select Yes to accept and highlight the changes" & Chr(10) & "Select No to reject and restore the previous value" & Chr(10) & "Select Cancel to accept the changes without highlighting", vbYesNoCancel)
        
    sheetName = Target.Range.value
    i = 2
    Do While i <= Range("H1").value + 2
    
      If Range("C" & i).value = sheetName And InStr(Range("D" & i).value, ":") = 0 And Range("F" & i).value <> "Unknown" Then
        
        Application.Calculation = xlCalculationManual
        Call applyCMUpdate(Range("D" & i), answer)
        Application.Calculation = xlCalculationAutomatic
      
      Else
        i = i + 1
      End If
 
    Loop
        
  End If

End If

Exit Sub

unableToHandle:
  
  Rows(Target.Range.Row()).EntireRow.Delete
  

End Sub

Attribute VB_Name = "Sheet99"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Actions taken when saving the APW
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
  On Error Resume Next
  Application.Calculate
  Sheets("Eform Data").Range("B18").Formula = Sheets("Eform Data").Range("B18").Formula
  Sheets("Eform Data").Range("B22").Formula = Sheets("Eform Data").Range("B22").Formula
  Sheets("Eform Data").Range("B23").Formula = Sheets("Eform Data").Range("B23").Formula
  Sheets("Eform Data").Range("B24").Formula = Sheets("Eform Data").Range("B24").Formula
  Sheets("Eform Data").Range("B25").Formula = Sheets("Eform Data").Range("B25").Formula
  
  If Environ("userdomain") = "MASTERCARD" And Sheets("Project Overview").Range("E4") <> "Mastercard" Then
    Sheets("Project Overview").Range("E4") = "Mastercard"
  End If
End Sub

'Actions taken when activating the APW (either at open time or when macro's are enabled)
'This function will a.o. manage the view to be set on the APW.
Private Sub Workbook_Activate()
On Error GoTo end_sub
If Not (viewSet) Then
pathToFile = Application.ActiveWorkbook.FullName
inEform = InStr(pathToFile, "notes") > 0
If Sheets("Project Overview").Range("A2") And Sheets("Project Overview").Visible Then
  If Sheets("Project Overview").Range("E4") = "Audit" Then
    Exit Sub
  End If
  If Environ("userdomain") = "MASTERCARD" Then
    If Sheets("Project Overview").Range("E4") <> "Mastercard" Then
      Sheets("Project Overview").Range("E4") = "Mastercard"
    End If
    Sheets("Project Overview").Range("E4").EntireRow.hidden = False
  ElseIf Sheets("Project Overview").Range("E4") <> "Customer" Then
    Sheets("Project Overview").Range("E4") = "Customer"
    Sheets("Project Overview").Range("E4").EntireRow.hidden = True
  Else
    Sheets("Project Overview").Range("E4").EntireRow.hidden = True
  End If
  If (Sheets("Project Overview").Range("E4") <> "Customer" And inEform) Then
    If Application.Visible Then
      Application.Visible = False
      UserForm2.Show
      Application.Visible = True
    End If
  ElseIf Left(Sheets("Project Overview").Range("E5"), 4) = "CIS-" And Len(Sheets("Lookup").Range("J1").value) = 0 Then
    Call EditLinks
  End If
  If CStr(Sheets("Project Overview").Range("J12")) = "0" And Not (Sheets("Project Overview").Range("K12")) Then
    MsgBox "This APW has been prepared for doing business in a Durbin eligible country, but the organization has not yet been registered for Durbin.", vbCritical
  End If
  viewSet = True
End If
End If
end_sub:
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{19429F0A-BA7B-4E51-9BE1-CAE6725DF060}{252105BB-5D9B-4F1B-A135-2BB6860FA962}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

'This code is
'Copyright (c) 2010, Jonathon English
'All rights reserved, under the terms of the "New BSD License."

Dim clsCal As clsCalendar

Private Sub UserForm_Initialize()
    Set clsCal = New clsCalendar
    Set clsCal.Form(Me.TextBoxDate) = Me
    clsCal.LoadView Date
    Me.FrameCalendar.Visible = True
End Sub

Private Sub LabelClickArea_Click()
    clsCal.CaptureClick
End Sub
Private Sub LabelClickArea_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    clsCal.CaptureClick
    Cancel = True
End Sub
Private Sub LabelClickArea_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    With clsCal
        .sngX = X
        .sngY = Y
    End With
End Sub

Private Sub ButtonCancel_Click()
    Unload Me
End Sub

Private Sub UserForm_Terminate()
    Dim selDate As Date
    On Error GoTo noDate
    selDate = Me.TextBoxDate.value
    Selection.value = Format(selDate, "dd mmm yyyy")
    Set clsCal = Nothing
    Exit Sub
noDate:
    MsgBox "No date selected", vbOKOnly, "Pick date"
    Set clsCal = Nothing
End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{E429B46E-7BFC-4A42-B73D-A77F6A0F0FE7}{E263BB38-9180-4425-A1A5-37C6C1E84CCE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Change()

End Sub

Private Sub CommandButton1_Click()
Sheets("Project Overview").Range("E4").value = Me.ComboBox1.value
Me.Hide
End Sub

Private Sub UserForm_Initialize()
Me.ComboBox1.AddItem "CTS/MDS"
Me.ComboBox1.AddItem "MasterCom"
Me.ComboBox1.AddItem "Lists"
Me.ComboBox1.AddItem "Cardholder Services"
Me.ComboBox1.AddItem "Billing/Finance"
Me.ComboBox1.AddItem "UTS"
End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{5BA91B1F-C0F4-4D6A-AA69-5D6FC4FCC532}{4471F26D-25B2-44B8-AF55-73270FEE3E7A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'Clicking the OK button
'This will ensure that all parameters are provided and will set them in the Lookup sheet.
Private Sub CommandButton1_Click()
If Len(Me.ComboBox1.value) > 0 And Len(Me.ComboBox1.value) > 0 Then
  Sheets("Lookup").Range("J1").value = Me.ComboBox3.value
  Sheets("Lookup").Range("J2").value = Me.ComboBox4.value
  Sheets("Lookup").Range("J3").value = Me.ComboBox1.value
  Sheets("Lookup").Range("J4").value = Me.ComboBox2.value
  Me.Hide
Else
  MsgBox "Please select a value on each drop down."
End If
End Sub

'Initializes the dropdowns on the form
Private Sub UserForm_Initialize()

  'MsgBox "This will take 30-60 secs, please wait for the window to pop-up", vbOKOnly
  
  Me.ComboBox1.AddItem "Acquiring Only"
  Me.ComboBox1.AddItem "Issuing Only"
  Me.ComboBox1.AddItem "Issuing and Acquiring"
  Me.ComboBox2.AddItem "Dual Message"
  Me.ComboBox2.AddItem "Single Message"
  Me.ComboBox2.AddItem "Single and Dual Message"
  Me.ComboBox3.AddItem "AMERICAS"
  Me.ComboBox3.AddItem "AP"
  Me.ComboBox3.AddItem "MEA"
  Me.ComboBox3.AddItem "EUROPE"
  
  'Dim ie As Object
  'Set ie = New InternetExplorerMedium
  'ie.Visible = False
  'ie.Navigate ("http://team.mastercard.com/sites/cusimpsergts/SitePages/default.aspx")
  'Do
  '  DoEvents
  'Loop Until ie.readyState = READYSTATE_COMPLETE
  'ie.Quit
    
  'Dim conn As ADODB.Connection
  'Dim rs As ADODB.Recordset

  'Set conn = New ADODB.Connection
  'Set rs = New ADODB.Recordset

  'conn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
  '    "Data Source=\\team.mastercard.com\sites\CusImpSerGTS\CIS%20Library%20Internal\Customer%20Implementation\4%20-%20Tools%20and%20Applications\CIS%20Changepoint\KB%20CIS%20Categories%20and%20Cycle%20Times.xlsx;" & _
  '    "Extended Properties=""Excel 12.0 Xml;HDR=No"";"
  
  'rs.Open "SELECT * FROM [B4:B999]", conn, adOpenStatic, adLockReadOnly
  
  'Do While Not rs.EOF
  '  If Not IsNull(rs.Fields(0)) Then
  '    Me.ComboBox4.AddItem Replace(rs.Fields(0), vbLf, "")
  '  End If
  '  rs.MoveNext
  'Loop
  
  i = 1
  Do While Len(Sheets("Lookup").Range("CO" & i).value) > 0
    Me.ComboBox4.AddItem Sheets("Lookup").Range("CO" & i).value
    i = i + 1
  Loop
End Sub

'Prevents the form to be closed without providing the values.
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  MsgBox "Please select a value on each drop down and click on OK to continue."
  Cancel = True
End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{5B5C5C16-AF9B-4C94-AF3F-34EFEA2298AB}{841D82EF-EF75-4B93-B1E9-360EDE3AC9A0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
If Len(Me.ComboBox1.value) > 0 Then
  Sheets("Lookup").Range("J4").value = Me.ComboBox1.value
  Me.Hide
Else
  MsgBox "Please select a value"
End If
End Sub

Private Sub UserForm_Initialize()
Me.ComboBox1.AddItem "Dual Message"
Me.ComboBox1.AddItem "Single Message"
Me.ComboBox1.AddItem "Single and Dual Message"
End Sub
Attribute VB_Name = "UserForm5"
Attribute VB_Base = "0{C7416E4A-0F7C-481C-9B84-036FC84F8510}{64529028-9F79-47B5-8E20-DF95550BE16A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CancelButton_Click()
  Me.Hide
End Sub

Private Sub okButton_Click()
  If Len(letterType.value) > 0 Then
    If Len(routeType.value) > 0 Then
        Application.ScreenUpdating = False
        NewFile = ActiveWorkbook.Path & "\" & Left(ActiveWorkbook.Name, InStr(ActiveWorkbook.Name, " - ") - 1) & " - Putty Letter"
        Sheets("Eform Data").Visible = True
        Sheets("Eform Data").Select
        i = 48
        Do While Len(Cells(i, 2)) > 0
          Rows("" & i + 1 & ":" & i + 1 & "").Select
          Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
          Range("A" & i & ":F" & i & "").Select
          Selection.AutoFill Destination:=Range("A" & i & ":F" & i + 1 & ""), Type:=xlFillDefault
          i = i + 1
        Loop
        If i > 48 Then
          Rows("" & i & ":" & i & "").EntireRow.Delete
          i = i - 1
        End If
        previousAVS = Sheets("Dual Message - Issuing").Range("D39").value
        On Error Resume Next
        previousAVS = CStr(CInt(Mid(Sheets("Dual Message - Issuing").Range("D39").Comment.Text, 21, 1)))
        Sheets("Eform Data").Range("E" & i + 7).value = previousAVS
        ActiveSheet.Cells.Copy
        Workbooks.Add
        ActiveCell.PasteSpecial xlPasteValues
        ActiveSheet.Name = "Putty Letter"
        Range("1:40").EntireRow.Delete
        Range("B1").value = letterType.value
        Columns("A:F").Select
        Selection.ColumnWidth = 27.86
        Columns("B:F").HorizontalAlignment = xlLeft
        If routeType.value = "P - PRIMARY" Then
          Range("C:C").EntireColumn.hidden = True
          Range("F:F").EntireColumn.hidden = True
        Else
          Range("B:B").EntireColumn.hidden = True
          Range("E:E").EntireColumn.hidden = True
        End If
        Range("A1").Select
        ActiveWorkbook.SaveAs NewFile, xlOpenXMLWorkbook
        ActiveWorkbook.Close
        Do While i > 48
          Rows("" & i & ":" & i & "").EntireRow.Delete
          i = i - 1
        Loop
        Sheets("Eform Data").Visible = False
        Sheets("Project Overview").Select
        MsgBox "Putty Letter is now available in the same folder as this APW.", vbOKOnly
        Application.ScreenUpdating = True
        Me.Hide
    Else
      MsgBox "No Route Type specified"
    End If
  Else
    MsgBox "No Letter Type specified"
  End If
End Sub

Private Sub UserForm_Initialize()
  letterType.AddItem "Conversion"
  letterType.AddItem "Transfer/Conversion"
  letterType.AddItem "Transfer/Conversion/Live"
  routeType.AddItem "P - PRIMARY"
  routeType.AddItem "S - SECONDARY"
End Sub
Attribute VB_Name = "clsCalendar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'This code is
'Copyright (c) 2010, Jonathon English
'All rights reserved, under the terms of the "New BSD License."

Private mDisplayMonth As Date
Private mStartDate As Date
Private mSelectedDate As Date
Public sngX As Single
Public sngY As Single
Dim mForm As Object
'VBA Bug: use "As Object" for late binding; "As MSForms.UserForm" won't work
Private mBoundControl As Object

Public Property Set Form(BoundControl As Object, myUserform As Object)   'tie the class to a specific form
'Check somehow to make sure the form has the required controls...
On Error GoTo Catch
    Dim mask As Integer
    Dim ctrl As Control
    For Each ctrl In myUserform.Controls
        If ctrl.Name = "FrameCalendar" Then
            mask = mask Or 1  '01
        ElseIf ctrl.Name = "LabelClickArea" Then
            mask = mask Or 2  '10 in binary
        End If
        If mask = 3 Then Exit For   'both bits set is 11, or 3 in non-binary
    Next
    If mask <> 3 Then Err.Raise vbObjectError, "clsCalendar > Property Set Form", _
        "'" & myUserform.Name & "' is missing required calendar controls."
'Form looks like it has the right controls, continue:
    Set mForm = myUserform
    Set mBoundControl = BoundControl
    With mForm
        With .LabelUpDown
            With .Font
                .Name = "Marlett"
                .Size = 11
                .Charset = 2
            End With
            .Caption = "v"
        End With
    End With
    
Finally:
    Exit Property
Catch:
    Stop
    Resume
End Property

Public Property Get SelectedDate() As Date
    SelectedDate = mSelectedDate
End Property

Sub CaptureClick()
Dim intRow As Integer, intCol As Integer

'Here we determine which area in the 9 x 7 grid was clicked:
intRow = sngY / 12 + 0.5
intCol = sngX / 12 + 0.5

'now determine what to do about it
Select Case intRow
    Case 1
        Select Case intCol
            Case 1   'go back one month
                mDisplayMonth = DateSerial(Year(mDisplayMonth), Month(mDisplayMonth) - 1, 1)
            Case 6
                'this is the tough one... was it up or down?
                Select Case sngY
                    Case Is <= 5 'go forward one year
                        mDisplayMonth = DateSerial(Year(mDisplayMonth) + 1, Month(mDisplayMonth), 1)
                    Case Else  'go back one year
                        mDisplayMonth = DateSerial(Year(mDisplayMonth) - 1, Month(mDisplayMonth), 1)
                End Select
            Case 7   'go forward one month
                mDisplayMonth = DateSerial(Year(mDisplayMonth), Month(mDisplayMonth) + 1, 1)
        End Select
    Case 3, 4, 5, 6, 7, 8
        'select days...
        mSelectedDate = mStartDate + (intRow - 3) * 7 + (intCol - 1)
        mBoundControl.value = Format(SelectedDate, "dd mmm yyyy")
        'mForm.FrameCalendar.Visible = False
        Exit Sub
    Case 9
        Select Case intCol
            Case 1, 2, 3, 4
                mDisplayMonth = Date
            Case 5, 6, 7
                'mForm.FrameCalendar.Visible = False
                Exit Sub
        End Select
End Select

LoadView mDisplayMonth

End Sub


Sub LoadView(dtDate As Date)

Dim frmForm As UserForm
Dim dtToday As Date
Dim lngInactiveTextColor As Long
Dim lngRegularTextColor As Long
Dim lngHighlightBackColor As Long
Dim lngRegularBackColor As Long
mDisplayMonth = dtDate
dtToday = Date
lngInactiveTextColor = &H80000010  'button shadow
lngRegularTextColor = &H80000012  'button text
lngHighlightBackColor = &H80000018  'Tooltip
lngRegularBackColor = &H80000014  'button highlight

'To find out where to start our calendar, I want to find the first
'Sunday BEFORE the start of the month...
If Weekday(dtDate) = 1 Then
    mStartDate = dtDate
Else
    mStartDate = dtDate - Day(dtDate) - Weekday(dtDate - Day(dtDate)) + 1
End If

With mForm
    .LabelMonth = Format(dtDate, "mmm")
    .LabelYear = Format(dtDate, "yyyy")
    With .Label1
        .Caption = Format(mStartDate, "d")
        If Day(mStartDate) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label2
        .Caption = Format(mStartDate + 1, "d")
        If Day(mStartDate + 1) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 1 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label3
        .Caption = Format(mStartDate + 2, "d")
        If Day(mStartDate + 2) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 2 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label4
        .Caption = Format(mStartDate + 3, "d")
        If Day(mStartDate + 3) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 3 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label5
        .Caption = Format(mStartDate + 4, "d")
        If Day(mStartDate + 4) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 4 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label6
        .Caption = Format(mStartDate + 5, "d")
        If Day(mStartDate + 5) > 7 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 5 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label7
        .Caption = Format(mStartDate + 6, "d")
        If mStartDate + 6 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label8
        .Caption = Format(mStartDate + 7, "d")
        If mStartDate + 7 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label9
        .Caption = Format(mStartDate + 8, "d")
        If mStartDate + 8 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label10
        .Caption = Format(mStartDate + 9, "d")
        If mStartDate + 9 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label11
        .Caption = Format(mStartDate + 10, "d")
        If mStartDate + 10 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label12
        .Caption = Format(mStartDate + 11, "d")
        If mStartDate + 11 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label13
        .Caption = Format(mStartDate + 12, "d")
        If mStartDate + 12 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label14
        .Caption = Format(mStartDate + 13, "d")
        If mStartDate + 13 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label15
        .Caption = Format(mStartDate + 14, "d")
        If mStartDate + 14 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label16
        .Caption = Format(mStartDate + 15, "d")
        If mStartDate + 15 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label17
        .Caption = Format(mStartDate + 16, "d")
        If mStartDate + 16 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label18
        .Caption = Format(mStartDate + 17, "d")
        If mStartDate + 17 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label19
        .Caption = Format(mStartDate + 18, "d")
        If mStartDate + 18 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label20
        .Caption = Format(mStartDate + 19, "d")
        If mStartDate + 19 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label21
        .Caption = Format(mStartDate + 20, "d")
        If mStartDate + 20 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label22
        .Caption = Format(mStartDate + 21, "d")
        If mStartDate + 21 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label23
        .Caption = Format(mStartDate + 22, "d")
        If mStartDate + 22 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label24
        .Caption = Format(mStartDate + 23, "d")
        If mStartDate + 23 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label25
        .Caption = Format(mStartDate + 24, "d")
        If mStartDate + 24 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label26
        .Caption = Format(mStartDate + 25, "d")
        If mStartDate + 25 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label27
        .Caption = Format(mStartDate + 26, "d")
        If mStartDate + 26 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label28
        .Caption = Format(mStartDate + 27, "d")
        If mStartDate + 27 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label29
        .Caption = Format(mStartDate + 28, "d")
        If Day(mStartDate + 28) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 28 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label30
        .Caption = Format(mStartDate + 29, "d")
        If Day(mStartDate + 29) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 29 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label31
        .Caption = Format(mStartDate + 30, "d")
        If Day(mStartDate + 30) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 30 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label32
        .Caption = Format(mStartDate + 31, "d")
        If Day(mStartDate + 31) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 31 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label33
        .Caption = Format(mStartDate + 32, "d")
        If Day(mStartDate + 32) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 32 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label34
        .Caption = Format(mStartDate + 33, "d")
        If Day(mStartDate + 33) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 33 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label35
        .Caption = Format(mStartDate + 34, "d")
        If Day(mStartDate + 34) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 34 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label36
        .Caption = Format(mStartDate + 35, "d")
        If Day(mStartDate + 35) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 35 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label37
        .Caption = Format(mStartDate + 36, "d")
        If Day(mStartDate + 36) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 36 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label38
        .Caption = Format(mStartDate + 37, "d")
        If Day(mStartDate + 37) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 37 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label39
        .Caption = Format(mStartDate + 38, "d")
        If Day(mStartDate + 38) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 38 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label40
        .Caption = Format(mStartDate + 39, "d")
        If Day(mStartDate + 39) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 39 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label41
        .Caption = Format(mStartDate + 40, "d")
        If Day(mStartDate + 40) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 40 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
    With .Label42
        .Caption = Format(mStartDate + 41, "d")
        If Day(mStartDate + 41) < 15 Then .ForeColor = lngInactiveTextColor Else .ForeColor = lngRegularTextColor
        If mStartDate + 41 = dtToday Then .BackColor = lngHighlightBackColor Else .BackColor = lngRegularBackColor
    End With
End With

End Sub




INQUEST-PP=macro
