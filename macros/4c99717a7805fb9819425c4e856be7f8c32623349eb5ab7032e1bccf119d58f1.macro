Attribute VB_Name = "Module1"
Private Sub AddLine()
   
    Sheets("Supplier to complete").Activate
    
    ActiveSheet.Unprotect "giles1"
    
    Num_of_sites = ActiveSheet.Range("L8")
      
    PasteRow = 23 + (Num_of_sites * 47)
   
    Rows("23:69").Select
    Selection.Copy
   
    Rows(PasteRow & ":" & PasteRow).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    

    'Increment number of sites counter
    Num_of_sites = Num_of_sites + 1

    'Put number of sites counter value into cell L8
    ActiveSheet.Range("L8") = Num_of_sites

    'Set the section headers to include the site counter
    ActiveSheet.Range("B" & PasteRow) = "Address " & Num_of_sites & " Details"
    ActiveSheet.Range("B" & PasteRow + 20) = "Site " & Num_of_sites & " Details (please refer to note 2 on the instructions sheet)"
    ActiveSheet.Range("B" & PasteRow + 31) = "Bank Account " & Num_of_sites & " Details for payments"

    'Clear the contents of the new sections
    ActiveSheet.Range("G" & PasteRow + 1 & ":G" & PasteRow + 11).ClearContents
    ActiveSheet.Range("G" & PasteRow + 13 & ":G" & PasteRow + 17).ClearContents
    ActiveSheet.Range("G" & PasteRow + 21 & ":G" & PasteRow + 28).ClearContents
    ActiveSheet.Range("G" & PasteRow + 32 & ":G" & PasteRow + 44).ClearContents

    'Set the value Please select in those fields that should have this as default value
    ActiveSheet.Range("G" & PasteRow + 22) = "Please select"
    ActiveSheet.Range("G" & PasteRow + 26) = "Please select"
    ActiveSheet.Range("G" & PasteRow + 28) = "=G51"
    
    'Make the first cell of the new site the active one
    ActiveSheet.Range("G" & PasteRow + 1).Select

    ActiveSheet.Protect "giles1"

End Sub


Attribute VB_Name = "Module2"
Private Sub DeleteLine()

    Application.ScreenUpdating = False
    
    Sheets("Supplier to complete").Activate
   
    ActiveSheet.Unprotect "giles1"
    
    Num_of_sites = ActiveSheet.Range("l7")
    
    If Num_of_sites < 2 Then
        MsgBox "You cannot delete a site where your request only has one site.", vbCritical, "Error - Delete Last Line"
        Exit Sub
    End If
    
    PasteRow = 23 + (Num_of_sites * 47) - 1
  
    ActiveSheet.Rows(PasteRow - 46 & ":" & PasteRow).Delete
 
    Num_of_sites = Num_of_sites - 1
       
    ActiveSheet.Range("L7") = Num_of_sites

    'Make the first cell of the previous site the active one
    ActiveSheet.Range("G" & PasteRow - 92).Select
    'Scroll to curent cell
    Application.GoTo ActiveCell.EntireRow, True
       
     ActiveSheet.Protect "giles1"

End Sub

Attribute VB_Name = "Module3"

Private Sub AddLine2()

     
    Sheets("Requestor to complete").Activate
    ActiveSheet.Unprotect "giles1"
    
    LineCount = ActiveSheet.Range("L8")
    lna = ActiveSheet.Range("L7")

    
    PasteRow = 33 + (LineCount * 6)
ActiveSheet.Range("B33") = "=+j31"

    Rows("33:38").Select
    Selection.Copy

'PasteRow = PasteRow + LineCount - lna
'Rows(PasteRow & ":" & PasteRow).Select
    Selection.Insert Shift:=xlDown
    Application.CutCopyMode = False
    

ActiveSheet.Range("b" & PasteRow) = "=+j31"
ActiveSheet.Range("b" & PasteRow).Select
ActiveSheet.Range("b" & PasteRow).Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
        
PasteRow = PasteRow + 2
ActiveSheet.Range("B33") = "Site 1 Details"
PasteRow = PasteRow + 1

'ActiveSheet.Range("G" & PasteRow + 1) = "=G32"
'PasteRow = PasteRow + 1

'ActiveSheet.Range("G" & PasteRow + 1) = "=G33"
'PasteRow = PasteRow + 1

ActiveSheet.Range("g" & PasteRow & ":g" & (PasteRow + 1)).ClearContents

'PasteRow = PasteRow + 13

'ActiveSheet.Range("g" & PasteRow & ":g" & (PasteRow + 5)).ClearContents

'PasteRow = PasteRow + 5

'ActiveSheet.Range("g" & PasteRow & ":g" & (PasteRow + 5)).ClearContents

'PasteRow = PasteRow + 8

'ActiveSheet.Range("G" & PasteRow) = "Please select"

'PasteRow = PasteRow + 1


'ActiveSheet.Range("g" & PasteRow & ":g" & (PasteRow + 1)).ClearContents

'PasteRow = PasteRow + 4


'ActiveSheet.Range("g" & PasteRow & ":g" & (PasteRow + 12)).ClearContents
        
ActiveSheet.Protect "giles1"

End Sub


Attribute VB_Name = "Module4"
Private Sub DeleteLine2()


Dim LineCount As Integer
Dim PasteRow

    Application.ScreenUpdating = False
    
    Sheets("Requestor to complete").Activate
    ActiveSheet.Unprotect "giles1"
    
    LineCount = ActiveSheet.Range("l8")
    
    If LineCount < 2 Then
        MsgBox "You cannot delete a site where your request only has one site.", vbCritical, "Error - Delete Last Line"
        Exit Sub
    End If
    
    PasteRow = 33 + ((LineCount - 1) * 6)
    
'    PasteRow = PasteRow + 1

    
    ActiveSheet.Rows(PasteRow & ":" & (PasteRow + 5)).Select
    
'    PasteRow = PasteRow + 61
    
'    Rows(PasteRow).Select
    Selection.Delete Shift:=xlUp
    
'    ActiveSheet.Rows(PasteRow & ":" & 1048576).Select
'    ActiveSheet.Rows(PasteRow & ":" & 1048576).EntireRow.Hidden = True

'PasteRow = PasteRow + 3
ActiveSheet.Range("G" & PasteRow).Select

       
       
    ActiveSheet.Protect "giles1"
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' modUnlockRoutines

'

' Module provides Excel workbook and sheet unlock routines. The algorithm

' relies on a backdoor password that can be 1 to 9 characters long where each

' character is either an "A" or "B" except the last which can be any character

' from ASCII code 32 to 255.

'

' Implemented as a regular module for use with any Excel VBA project.

'

' Dependencies:

'

'   None

'

' |fffd| 2007 Kevin M. Jones

 

Option Explicit

 

Private Sub DisplayStatus(ByVal PasswordsTried As Long)

 

' Display the status in the Excel status bar.

'

' Syntax

'

' DisplayStatus(PasswordsTried)

'

' PasswordsTried - The number of passwords tried thus far.

 

   Static LastStatus As String

 

   LastStatus = Format(PasswordsTried / 57120, "0%") & " of possible passwords tried."

   If Application.StatusBar <> LastStatus Then

      Application.StatusBar = LastStatus

      DoEvents

   End If

 

End Sub

 

Private Function TrySheetPasswordSize(ByVal Size As Long, ByRef PasswordsTried As Long, ByRef Password As String, Optional ByVal Base As String) As Boolean

 

' Try unlocking the sheet with all passwords of the specified size.

'

' TrySheetPasswordSize(Size, PasswordsTried, Password, [Base])

'

' Size - The size of the password to try.

'

' PasswordsTried - The cummulative number of passwords tried thus far.

'

' Password - The current password.

'

' Base - The base password from the calling routine.

  

   Dim Index As Long

  

   On Error Resume Next

   If IsMissing(Base) Then Base = vbNullString

   If Len(Base) < Size - 1 Then

      For Index = 65 To 66

         If TrySheetPasswordSize(Size, PasswordsTried, Password, Base & Chr(Index)) Then

            TrySheetPasswordSize = True

            Exit Function

         End If

      Next Index

   ElseIf Len(Base) < Size Then

      For Index = 32 To 255

         ActiveSheet.Unprotect Base & Chr(Index)

         If Not ActiveSheet.ProtectContents Then

            TrySheetPasswordSize = True

            Password = Base & Chr(Index)

            Exit Function

         End If

         PasswordsTried = PasswordsTried + 1

      Next Index

   End If

   On Error GoTo 0

  

   DisplayStatus PasswordsTried

 

End Function

 

Private Function TryWorkbookPasswordSize(ByVal Size As Long, ByRef PasswordsTried As Long, ByRef Password As String, Optional ByVal Base As String) As Boolean

  

' Try unlocking the workbook with all passwords of the specified size.

'

' TryWorkbookPasswordSize(Size, PasswordsTried, Password, [Base])

'

' Size - The size of the password to try.

'

' PasswordsTried - The cummulative number of passwords tried thus far.

'

' Password - The current password.

'

' Base - The base password from the calling routine.

  

   Dim Index As Long

  

   On Error Resume Next

   If IsMissing(Base) Then Base = vbNullString

   If Len(Base) < Size - 1 Then

      For Index = 65 To 66

         If TryWorkbookPasswordSize(Size, PasswordsTried, Password, Base & Chr(Index)) Then

            TryWorkbookPasswordSize = True

            Exit Function

         End If

      Next Index

   ElseIf Len(Base) < Size Then

      For Index = 32 To 255

         ActiveWorkbook.Unprotect Base & Chr(Index)

         If Not ActiveWorkbook.ProtectStructure And Not ActiveWorkbook.ProtectWindows Then

            TryWorkbookPasswordSize = True

            Password = Base & Chr(Index)

            Exit Function

         End If

         PasswordsTried = PasswordsTried + 1

      Next Index

   End If

   On Error GoTo 0

  

   DisplayStatus PasswordsTried

 

End Function




'Private Sub Worksheet_Activate()

'Rows("12:19").EntireRow.Hidden = True

'End Sub



Private Sub Worksheet_Change(ByVal Target As Range)



If Not Application.Intersect(Range("G11"), Range(Target.Address)) Is Nothing Then
  Select Case Target.Value
    Case Is = "Yes - Company":     ActiveSheet.Unprotect "giles1"
                                   Rows("12:16").EntireRow.Hidden = True
                                   Rows("17:19").EntireRow.Hidden = False
                                   ActiveSheet.Protect "giles1"
    Case Is = "Yes - Sole Trader": ActiveSheet.Unprotect "giles1"
                                   Rows("14:19").EntireRow.Hidden = True
                                   Rows("12:13").EntireRow.Hidden = False
                                   ActiveSheet.Protect "giles1"
    Case Is = "Yes - Partnership": ActiveSheet.Unprotect "giles1"
                                   Rows("12:13").EntireRow.Hidden = True
                                   Rows("17:19").EntireRow.Hidden = True
                                   Rows("14:16").EntireRow.Hidden = False
                                   ActiveSheet.Protect "giles1"
    Case Else:                     ActiveSheet.Unprotect "giles1"
                                   Rows("12:19").EntireRow.Hidden = True
                                   ActiveSheet.Protect "giles1"
  End Select
End If

End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' modUnlockRoutines

'

' Module provides Excel workbook and sheet unlock routines. The algorithm

' relies on a backdoor password that can be 1 to 9 characters long where each

' character is either an "A" or "B" except the last which can be any character

' from ASCII code 32 to 255.

'

' Implemented as a regular module for use with any Excel VBA project.

'

' Dependencies:

'

'   None

'

' |fffd| 2007 Kevin M. Jones

 

Option Explicit

 

Private Sub DisplayStatus(ByVal PasswordsTried As Long)

 

' Display the status in the Excel status bar.

'

' Syntax

'

' DisplayStatus(PasswordsTried)

'

' PasswordsTried - The number of passwords tried thus far.

 

   Static LastStatus As String

 

   LastStatus = Format(PasswordsTried / 57120, "0%") & " of possible passwords tried."

   If Application.StatusBar <> LastStatus Then

      Application.StatusBar = LastStatus

      DoEvents

   End If

 

End Sub

 

Private Function TrySheetPasswordSize(ByVal Size As Long, ByRef PasswordsTried As Long, ByRef Password As String, Optional ByVal Base As String) As Boolean

 

' Try unlocking the sheet with all passwords of the specified size.

'

' TrySheetPasswordSize(Size, PasswordsTried, Password, [Base])

'

' Size - The size of the password to try.

'

' PasswordsTried - The cummulative number of passwords tried thus far.

'

' Password - The current password.

'

' Base - The base password from the calling routine.

  

   Dim Index As Long

  

   On Error Resume Next

   If IsMissing(Base) Then Base = vbNullString

   If Len(Base) < Size - 1 Then

      For Index = 65 To 66

         If TrySheetPasswordSize(Size, PasswordsTried, Password, Base & Chr(Index)) Then

            TrySheetPasswordSize = True

            Exit Function

         End If

      Next Index

   ElseIf Len(Base) < Size Then

      For Index = 32 To 255

         ActiveSheet.Unprotect Base & Chr(Index)

         If Not ActiveSheet.ProtectContents Then

            TrySheetPasswordSize = True

            Password = Base & Chr(Index)

            Exit Function

         End If

         PasswordsTried = PasswordsTried + 1

      Next Index

   End If

   On Error GoTo 0

  

   DisplayStatus PasswordsTried

 

End Function

 

Private Function TryWorkbookPasswordSize(ByVal Size As Long, ByRef PasswordsTried As Long, ByRef Password As String, Optional ByVal Base As String) As Boolean

  

' Try unlocking the workbook with all passwords of the specified size.

'

' TryWorkbookPasswordSize(Size, PasswordsTried, Password, [Base])

'

' Size - The size of the password to try.

'

' PasswordsTried - The cummulative number of passwords tried thus far.

'

' Password - The current password.

'

' Base - The base password from the calling routine.

  

   Dim Index As Long

  

   On Error Resume Next

   If IsMissing(Base) Then Base = vbNullString

   If Len(Base) < Size - 1 Then

      For Index = 65 To 66

         If TryWorkbookPasswordSize(Size, PasswordsTried, Password, Base & Chr(Index)) Then

            TryWorkbookPasswordSize = True

            Exit Function

         End If

      Next Index

   ElseIf Len(Base) < Size Then

      For Index = 32 To 255

         ActiveWorkbook.Unprotect Base & Chr(Index)

         If Not ActiveWorkbook.ProtectStructure And Not ActiveWorkbook.ProtectWindows Then

            TryWorkbookPasswordSize = True

            Password = Base & Chr(Index)

            Exit Function

         End If

         PasswordsTried = PasswordsTried + 1

      Next Index

   End If

   On Error GoTo 0

  

   DisplayStatus PasswordsTried

 

End Function
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub AttachEmail()

Dim SubjectLine As String

Sheets("Requestor to complete").Activate
   If ActiveSheet.Range("g11").Value <> 0 Then
 MsgBox "You have stated that a Buyer in Commercial has approved this new supplier." & vbNewLine & " " & vbNewLine & "When submitting your request, please ensure you attach an email from the Buyer confirming that they approve this new supplier." & vbNewLine & " " & vbNewLine & "Failure to provide this approval will result in your request being rejected.", vbExclamation, "Email Request"

End If

If ActiveSheet.Range("AW1").Value <> 0 Then



End Sub



INQUEST-PP=macro
