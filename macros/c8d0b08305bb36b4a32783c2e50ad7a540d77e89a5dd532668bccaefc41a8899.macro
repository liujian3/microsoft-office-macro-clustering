Attribute VB_Name = "AccessoryForm"
Attribute VB_Base = "0{44D845EC-ED39-CC4E-B529-CD8116174B9A}{2578AC17-F586-1549-A6A3-A81395159C03}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "AccessoryStorage"
Option Explicit
Private Module

Public Const PrevCellAddressStorage As String = "A1"
Public Const LastUploadCounterIncrementDate As String = "A2"
Public Const UploadCounterCell As String = "A3"

Function GetCartPicture() As Picture
    Set GetCartPicture = Worksheets(YaConst.AccessorySheetName).Pictures(1)
End Function

Private Sub HideSheet()
    Sheets(YaConst.AccessorySheetName).Visible = xlSheetVeryHidden
End Sub

Sub StorePrevCellAddress(cellAddress)
    Sheets(YaConst.AccessorySheetName).Range(PrevCellAddressStorage).value = cellAddress
End Sub

Function PrevCellAddress() As String
    PrevCellAddress = Sheets(YaConst.AccessorySheetName).Range(PrevCellAddressStorage).value
End Function

Public Property Get UploadCounter() As String
    Dim sheet As Worksheet
    Set sheet = Sheets(YaConst.AccessorySheetName)
    
    InitializeUploadCounter
    
    If Date > DateValue(sheet.Range(LastUploadCounterIncrementDate).value) Then
        sheet.Range(UploadCounterCell).value = 1
    End If
    
    UploadCounter = sheet.Range(UploadCounterCell)
End Property

Private Sub InitializeUploadCounter()
    Dim sheet As Worksheet
    Set sheet = Sheets(YaConst.AccessorySheetName)
    
    If sheet.Range(LastUploadCounterIncrementDate).value = "" Then
        sheet.Range(LastUploadCounterIncrementDate).value = Date
    End If
    
    If sheet.Range(UploadCounterCell).value = "" Then
        sheet.Range(UploadCounterCell).value = 1
    End If
End Sub

Sub IncrementUploadCouner()
    Dim sheet As Worksheet
    Dim counter As String
    Dim lastUpload As String
    
    InitializeUploadCounter
    
    Set sheet = Sheets(YaConst.AccessorySheetName)
    lastUpload = sheet.Range(LastUploadCounterIncrementDate).value
    counter = sheet.Range(UploadCounterCell).value
    
    If sheet.Range(UploadCounterCell).value = YaConst.MaxUploadCouner Then
        sheet.Range(UploadCounterCell).value = 1
    Else
        sheet.Range(UploadCounterCell).value = CInt(counter) + 1
    End If
    
    sheet.Range(LastUploadCounterIncrementDate).value = Date
End Sub
Attribute VB_Name = "CellVaLidator"
Option Explicit
Option Private Module

Private pCell As Range
Private pError As String
Private pRegex As RegExp
Private pCities As Variant
Private pDuplicatesInColumn As Dictionary

Public Sub ClearModule()
    pCities = Empty
    Set pDuplicatesInColumn = Nothing
End Sub

Private Function GetDuplicatesFromCellColumn(cell As Range) As Dictionary
    If pDuplicatesInColumn Is Nothing Then
        Dim columnCell As Range
        Dim uniqValues As New Dictionary
        Dim duplValues As New Dictionary
        Dim usedRange As Range
        Dim sheet As Worksheet
        Dim columnRange As Range
        
        Set sheet = Worksheets(YaConst.SheetForValidationName)
        Set usedRange = Utils.GetUsedRange(sheet).cells
        Set columnRange = sheet.Range(sheet.cells(sheet.Range(YaConst.dataStartCell).Row, cell.column), sheet.cells(usedRange.Rows.Count, cell.column))
        
        
        For Each columnCell In columnRange
            Dim columnCellValue As String
            columnCellValue = CStr(columnCell.value)
            If uniqValues.Exists(columnCellValue) Then
                If Not duplValues.Exists(columnCellValue) Then
                    duplValues.Add columnCellValue, uniqValues(columnCellValue)
                End If
            Else
                uniqValues.Add columnCellValue, columnCell.Address
            End If
        Next

        Set pDuplicatesInColumn = duplValues
    End If
        
    
    Set GetDuplicatesFromCellColumn = pDuplicatesInColumn
End Function

Private Property Get Cities() As Variant
    If IsEmpty(pCities) Then
        pCities = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|-|fffd||548||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
                        "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    End If

    Cities = pCities
End Property

Public Property Let cell(cell As Range)
    pError = ""
    Set pCell = cell
End Property

Public Property Get error() As String
    error = pError
End Property


Private Function GetRegexInstance() As RegExp
    If pRegex Is Nothing Then
        Set pRegex = New RegExp
        With pRegex
            .Global = True
            .MultiLine = True
            .IgnoreCase = False
        End With
    End If

    Set GetRegexInstance = pRegex
End Function

Private Sub AppendToError(error As String)
    If pError <> Empty Then
        pError = pError & vbLf
    End If
    pError = pError & error
End Sub

Public Function MaxLength(max As Integer)
    If Len(pCell) > max Then
        AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| " & max & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End If
End Function

Public Function ValueIsLettersAndDigitsOnly()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[a-zA-Z0-9]+$"

        If Not regEx.Test(pCell.value) Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function UniqueInColumn() 'TODO
    If Not IsEmpty(pCell.value) Then
        If GetDuplicatesFromCellColumn(pCell).Exists(CStr(pCell.value)) Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function Required()
    If Application.CountA(pCell.EntireRow) > 0 And pCell.value = "" Then
        AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."
    End If
End Function

Public Function InList(list As Variant)
    If Not IsEmpty(pCell.value) Then
        If IsError(Application.Match(pCell.value, list, 0)) Then
            Dim errorText As String
            errorText = IIf(Application.CountA(list) > 1, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: ")
            AppendToError errorText & Join(list, "; ") & "."
        End If
    End If
End Function

Public Function GreaterThanValueInColumn(column As String)
    If Not IsEmpty(pCell.value) Then
        Dim cell As Range
        Set cell = Worksheets(YaConst.SheetForValidationName).Range(column & pCell.Row)
    
        If Not IsEmpty(cell.value) Then
            Dim regEx As RegExp
            Set regEx = GetRegexInstance
            
            regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
            If regEx.Test(pCell.value) And regEx.Test(cell.value) Then
                Dim price As Double
                Dim oldPrice As Double
                price = Replace(cell.value, ".", ",")
                oldPrice = Replace(pCell.value, ".", ",")
                    
                If Not IsEmpty(cell.value) And oldPrice <= price Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."
                End If
            End If
        End If
    End If
End Function

Public Function InPercentageRangeFromColumn(column As String, min As Integer, max As Integer)
    If Not IsEmpty(pCell.value) Then
        Dim cell As Range
        Set cell = Worksheets(YaConst.SheetForValidationName).Range(column & pCell.Row)
    
        If Not IsEmpty(cell.value) Then
            Dim regEx As RegExp
            Set regEx = GetRegexInstance
            
            regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
            If regEx.Test(pCell.value) And regEx.Test(cell.value) Then
                Dim value As Double
                Dim sourceValue As Double
                value = Replace(pCell.value, ".", ",")
                sourceValue = Replace(cell.value, ".", ",")
                
                Dim percent As Double
                
                percent = 100 - (value / sourceValue * 100)
                
                If percent < min Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & min & "%." _
                    & vbLf & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & min & "% |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & max & "%."
                ElseIf percent > max Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & max & "%." _
                    & vbLf & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & min & "% |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & max & "%."
                End If
            End If
        End If
    End If
End Function

Public Function IsPositiveNumber()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
        
        If Not regEx.Test(pCell.value) Or pCell.value < 0 Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function IsWholePositiveNumber()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[+]?\d+$"
        
        If Not regEx.Test(pCell.value) Or Not pCell.value > 0 Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function InCountriesList()
    If Not IsEmpty(pCell.value) Then
        If IsError(Application.Match(pCell.value, Cities, 0)) Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & vbLf & "http://partner.market.yandex.ru/pages/help/Countries.pdf."
        End If
    End If
End Function

Public Function MaxForCurrency(max As Double, currencyId As String, currencyColumn As String)
    If Not IsEmpty(pCell.value) Then
    
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
        
        If regEx.Test(pCell.value) Then
            Dim cell As Range
            Dim price As Double
            
            price = Replace(pCell.value, ".", ",")
            Set cell = Worksheets(YaConst.SheetForValidationName).Range(currencyColumn & pCell.Row)
            
            If cell.value = currencyId And price > max Then
                AppendToError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & max & "."
            End If
        End If
    End If
End Function

Function IsISBN()
    If Not IsEmpty(pCell.value) Then
        Dim numbers() As String
        Dim ISBN As Variant
        Dim numbersCount As Integer
        Dim ending As String
        
        numbers = Split(Replace(pCell.value, " ", ""), ",")
        numbersCount = UBound(numbers) - LBound(numbers) + 1
        ending = IIf(numbersCount > 1, "|fffd|", "|fffd|")
        For Each ISBN In numbers
            If Not CheckISBNPartsLengths(ISBN) Then
                AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & ending & " ISBN"
                Exit Function
            End If
            
            If Not CheckISBNChecksum(ISBN) Then
                AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & ending & " ISBN"
                Exit Function
            End If
        Next
    End If
End Function

Function IsYear()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^([0-9]{4})$"
        If Not regEx.Test(pCell.value) Or pCell.value < 1000 Or pCell.value > 9999 Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
        End If
    End If
End Function

Function CheckISBNChecksum(ByVal ISBN As String) As Boolean
    Dim iterator As Integer
    Dim checksum As Integer
    Dim checksumEven As Integer
    Dim checkDigit As String

    ISBN = Replace(ISBN, "-", "")
    Select Case Len(ISBN)
        Case 10
            For iterator = 1 To Len(ISBN) - 1
                checksum = checksum + (iterator * val(Mid(ISBN, iterator, 1)))
            Next
            If checksum Mod 11 = 10 Then
                checkDigit = "X"
            Else
                checkDigit = Trim(CStr(checksum Mod 11))
            End If
        Case 13
            For iterator = 1 To Len(ISBN) - 1
                If iterator Mod 2 = 1 Then
                    checksumEven = checksumEven + val(Mid(ISBN, iterator, 1))
                Else
                    checksum = checksum + val(Mid(ISBN, iterator, 1))
                End If
            Next
            checksum = (checksum * 3)
            checksum = checksum + checksumEven
            If (10 - (checksum Mod 10)) = 10 Then
                checkDigit = "0"
            Else
                checkDigit = Trim(CStr(10 - (checksum Mod 10)))
            End If
        Case Else
    End Select
    
   CheckISBNChecksum = (checkDigit = Right(ISBN, 1))
End Function

Function CheckISBNPartsLengths(ByVal ISBN As String) As Boolean
    Const maxPartsCount As Integer = 5

    Dim parts() As String
    Dim part As Variant
    Dim partsCount As Integer
    Dim i As Integer
    
    Dim partsLen As Variant
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ISBN
    partsLen = Array(Array(0, 3), Array(1, 5), Array(1, 7), Array(1, 7), Array(1, 1))
    parts = Split(ISBN, "-")
    partsCount = UBound(parts) - LBound(parts) + 1
    
    If partsCount <= 1 Then
        CheckISBNPartsLengths = True
        Exit Function
    End If
    
    If partsCount > maxPartsCount Then
        CheckISBNPartsLengths = False
        Exit Function
    End If
    
    If parts(0) <> "978" And parts(0) <> "979" Then
        CheckISBNPartsLengths = False
        Exit Function
    End If
    
    For i = 0 To partsCount - 1
        If Len(parts(i)) < partsLen(i)(0) _
        Or Len(parts(i)) > partsLen(i)(1) Then
            CheckISBNPartsLengths = False
            Exit Function
        End If
    Next
    
    CheckISBNPartsLengths = True
End Function

Public Function IsGtinCode(GTIN As String) As Boolean
    If Not IsEmpty(GTIN) Then
        Dim codeLen As Integer
        Dim checkDigitIsValid As Boolean
        Dim code As String
        Dim char As String
        Dim charPos As Integer
        Dim codeSum As Integer
        
        IsGtinCode = True
        
        codeLen = Len(GTIN)
        
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        code = GTIN
        codeSum = 0
        
        '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| 8, 12 |fffd||fffd||fffd| 13 |fffd||fffd||fffd||fffd|
        regEx.Pattern = "^([0-9]{8}|[0-9]{12}|[0-9]{13})$"
        
        ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If Not regEx.Test(GTIN) Then
            IsGtinCode = False
            Exit Function
        End If
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For charPos = 1 To codeLen
            char = Mid(code, codeLen - (charPos - 1), 1)
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
            If charPos Mod 2 = 0 Then
                codeSum = codeSum + char * 3
            Else:
                codeSum = codeSum + char
            End If
        Next
        
        If codeSum Mod 10 <> 0 Then
            IsGtinCode = False
        End If
        
    End If
End Function

Public Function GtinCodes()
    If Not IsEmpty(pCell.value) Then
        Dim barcodes() As String
        Dim barcode As Variant
        Dim withoutSpaces As String
        
        withoutSpaces = Replace(pCell.value, " ", "")
        withoutSpaces = Replace(withoutSpaces, vbLf, "")
        withoutSpaces = Replace(withoutSpaces, vbCr, "")

        barcodes = Split(withoutSpaces, ",")
        For Each barcode In barcodes
            If Not IsGtinCode(CStr(barcode)) Then
                AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & barcode & " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbLf & _
                              "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: EAN-13, EAN-8, UPC-A, UPC-E."
            End If
        Next
    End If
End Function

Public Function DeliveryTime()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        Dim isNumber As Boolean
        regEx.Pattern = "^\d+$"
        isNumber = regEx.Test(pCell.value)
        
        Dim isRange As Boolean
        regEx.Pattern = "^\d+\-\d+$"
        isRange = regEx.Test(pCell.value)
        
        If Not isNumber And Not isRange Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2|fffd|4)"
        End If
        
        If isRange Then
            Dim parts() As String
            parts = Split(pCell.value, "-")
            
            If Abs(parts(0) - parts(1)) > 2 Then
                AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|: 1|fffd|3, |fffd||fffd||fffd||fffd||fffd||fffd|: 1|fffd|4)"
            End If
        End If
    End If
End Function

Public Function IsVat()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
        
        If Not regEx.Test(pCell.value) Or pCell.value < 0 Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function OnlyDigits()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^\d+$"
        
        If Not regEx.Test(pCell.value) Or pCell.value < 0 Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function CellFormatIsNumeric()
    If pCell.NumberFormat <> "0.00" And pCell.NumberFormat <> "#,##0.00" Then
        AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    End If
End Function

Public Function IsDeliveryCost()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^[+]?\d+$"
        
        If Not regEx.Test(pCell.value) Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        End If
    End If
End Function

Public Function IsSku()
    If Not IsEmpty(pCell.value) Then
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        
        regEx.Pattern = "^([a-z]|[A-Z]|[|fffd|-|fffd|]|[|fffd|-|fffd|]|[0-9]|[\.\,\\\/\(\)\[\]\-\=])+$"
        
        If Not regEx.Test(pCell.value) Then
            AppendToError "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|:" & vbLf & _
                          "|fffd| |fffd||fffd||fffd||fffd|" & vbLf & _
                          "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & vbLf & _
                          "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd|)" & vbLf & _
                          "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| . , \ / ( ) [ ] - ="
        End If
    End If
End Function


Public Function OldSkuPrice(currentPriceColumn As String)
    If Not IsEmpty(pCell.value) Then
        Dim cell As Range
        Set cell = Worksheets(YaConst.SheetForValidationName).Range(currentPriceColumn & pCell.Row)
    
        If Not IsEmpty(cell.value) Then
            Dim regEx As RegExp
            Set regEx = GetRegexInstance
            
            regEx.Pattern = "^[+]?\d+([,]\d+|[.]\d+)?$"
            If regEx.Test(pCell.value) And regEx.Test(cell.value) Then
                Dim oldPrice As Double
                Dim currentPrice As Double
                Dim minDiscountPercent As Integer
                Dim maxDiscountPercent As Integer
                Dim delta As Double
                
                oldPrice = Replace(pCell.value, ".", ",")
                currentPrice = Replace(cell.value, ".", ",")
                minDiscountPercent = 5
                maxDiscountPercent = 95
                delta = Abs(oldPrice - currentPrice)
                Dim discountPercent As Double
                
                discountPercent = 100 - (currentPrice / oldPrice * 100)
                
                If discountPercent > maxDiscountPercent Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & maxDiscountPercent & "%." _
                    & vbLf & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & maxDiscountPercent & "%."
                ElseIf discountPercent < minDiscountPercent And delta < 500 Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 500 |fffd||fffd||fffd||fffd||fffd||fffd|."
                ElseIf discountPercent < minDiscountPercent And discountPercent < 1 Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1%."
                ElseIf discountPercent < minDiscountPercent Then
                    AppendToError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & minDiscountPercent & "%." _
                    & vbLf & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & minDiscountPercent & "%."
                End If

            End If
        End If
    End If
End Function

Public Function IsWeekdaysList()
    If Not IsEmpty(pCell.value) Then
        Dim days() As String
        Dim uniq As New Dictionary
        Dim barcode As Variant
        Dim normalized As String
        
        normalized = Replace(pCell.value, " ", "")
        normalized = Replace(normalized, vbLf, "")
        normalized = Replace(normalized, vbCr, "")
        normalized = Replace(normalized, vbCr, "")
        normalized = LCase$(normalized)
        
        days = Split(normalized, ",")
        
        Dim regEx As RegExp
        Set regEx = GetRegexInstance
        regEx.Pattern = "^(|fffd||fffd|||fffd||fffd|||fffd||fffd|||fffd||fffd|||fffd||fffd||1|2|3|4|5|6|7)$"
        
        Dim i As Long

        For i = LBound(days) To UBound(days)
            If regEx.Test(days(i)) Then
                If uniq.Exists(days(i)) Then
                    AppendToError days(i) & " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."
                Else
                    uniq.Add days(i), 1
                End If
            Else
                AppendToError days(i) & " - |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
            End If
        Next i
        
    End If
End Function
Attribute VB_Name = "Container"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pPassword As String

Public Property Let password(pass As String)
    pPassword = pass
End Property

Public Property Get password() As String
    password = pPassword
End Property
Attribute VB_Name = "ControlCreator"
Option Explicit

Dim controlsHandlers As New Collection

Sub CreateHelpLabel(targetLabel As MSForms.Label, helpText As String)
    Dim helpLabel As MSForms.Label
    Dim targetForm As UserForm
    
    Set targetForm = targetLabel.Parent
    Set helpLabel = targetForm.Controls.Add("Forms.Label.1")
    
    targetLabel.WordWrap = False
    targetLabel.AutoSize = True
    
    With helpLabel
        .Name = "Help" & targetLabel.Caption
        .Caption = "?"
        .Font.Size = 7
        .ForeColor = YaConst.LinkColor
        .Top = targetLabel.Top
        .Left = targetLabel.Left + targetLabel.Width
        .AutoSize = True
    End With
    
    Dim helpHandler As New ShowingHelpHandler
    helpHandler.SetHelp helpLabel, helpText
    
    controlsHandlers.Add helpHandler
End Sub
Attribute VB_Name = "CreatePasswordForm"
Attribute VB_Base = "0{287C1476-F7EE-0F40-A477-0CA7D08CD736}{EA212402-758B-144E-B4D6-1D0F98353B24}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private pContainer As Container

Public Sub ShowWithParam(cont As Container)
    Set pContainer = cont
    Me.Show
End Sub

Private Sub OkButton_Click()
    If Not PasswordIsValid(Me.PasswordBox.value) Then
        Exit Sub
    End If
    
    If Me.ConfirmPasswordBox.value <> Me.PasswordBox.value Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Sub
    End If
    
    pContainer.password = Me.PasswordBox.value
    Unload Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        pContainer.password = ""
    End If
End Sub


Private Sub ConfirmPasswordBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Me.ConfirmPasswordBox.PasswordChar = "*"
End Sub

Private Sub PasswordBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Me.PasswordBox.PasswordChar = "*"
End Sub


Private Function PasswordIsValid(pass As String) As Boolean
    Dim regEx As New RegExp
    
    PasswordIsValid = False
    
    regEx.Pattern = "^[A-Za-z0-9\s!@#$%^&*()_\+\=\-`~\\\]\[{}|';:/\.\,\?><]*$"
    If Not regEx.Test(pass) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    regEx.Pattern = "[A-Z]"
    If Not regEx.Test(pass) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    regEx.Pattern = "[a-z]"
    If Not regEx.Test(pass) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    regEx.Pattern = "[0-9]"
    If Not regEx.Test(pass) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    If Len(pass) < 6 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    If Len(pass) > 50 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 50 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    PasswordIsValid = True
End Function

Private Sub UserForm_Activate()
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
End Sub
Attribute VB_Name = "DataManager"
Option Explicit
Option Private Module

Enum CredentialTitle
    campaign
    Token
End Enum


Private Sub SaveCurrentWorkbookTemporarily()
    Application.ActiveWorkbook.SaveCopyAs GetPathToTmpFile
End Sub

Private Sub DeleteTemporaryWorkbook()
    With New FileSystemObject
        If .FileExists(GetPathToTmpFile) Then
            .DeleteFile GetPathToTmpFile
        End If
    End With
End Sub

Private Function GetPathToTmpFile() As String
    GetPathToTmpFile = IIf(Environ$("tmp") <> "", Environ$("tmp"), Environ$("temp")) & "\" & YaConst.TempFileName
End Function

Function GetCurrentWorkbookAsBytes()
    DoEvents
    SaveCurrentWorkbookTemporarily
    DoEvents
    
    Dim adoStream As New ADODB.Stream
    Dim bytFile
    
    adoStream.Type = adTypeBinary
    adoStream.Open
    adoStream.LoadFromFile GetPathToTmpFile
    
    GetCurrentWorkbookAsBytes = adoStream.Read
    
    adoStream.Close
    
    DoEvents
    DeleteTemporaryWorkbook
    DoEvents
End Function

Sub StoreData(key As String, value As String)
    Names.Add Name:=key, Visible:=False, RefersTo:=value
End Sub

Function GetData(key As String) As String
    Dim i As Integer

    For i = 1 To Names.Count
        On Error Resume Next
        GetData = Evaluate(Names.Item(key).value)
        On Error GoTo 0
    Next

End Function

Sub DeleteData(key As String)
    Dim i As Integer

    For i = 1 To Names.Count
        On Error Resume Next
        Names.Item(key).Delete
        On Error GoTo 0
    Next
    
End Sub

Private Function GetFileId() As String
    If GetData("fileId") = "" Then
        Dim crypto As New WinCryptoAPI
        StoreData "fileId", "Credentials" & crypto.MD5Hash(ThisTemplateType)
        Set crypto = Nothing
    End If
    GetFileId = GetData("fileId")
End Function

Public Function GetCredential(title As CredentialTitle, Optional pass As String)
    Dim fileId As String
    Dim encrypted As String
    Dim crypto As New WinCryptoAPI
    
    fileId = GetFileId
    encrypted = GetSetting(Application.Caption, fileId, title)
    GetCredential = encrypted
    If pass <> "" Then
        GetCredential = crypto.DecryptString(encrypted, pass)
    End If
    
    Set crypto = Nothing
End Function

Public Function SaveCredential(title As CredentialTitle, value As String, pass As String)
    Dim fileId As String
    Dim crypto As New WinCryptoAPI
    
    fileId = GetFileId
    value = crypto.EncryptString(value, pass)
    SaveSetting Application.Caption, GetFileId, title, value
    
    Set crypto = Nothing
End Function

Public Function DeleteCredentials()
    DeleteSetting Application.Caption, GetFileId
End Function

Public Function CredentialsIsSet() As Boolean
    CredentialsIsSet = GetCredential(Token) <> ""
End Function


Public Function CredentialsPasswordCorrect(password As String) As Boolean
    CredentialsPasswordCorrect = GetCredential(Token, password) <> ""
End Function
Attribute VB_Name = "Develop"
Option Explicit
Option Private Module

Sub FixHyperlinks()
    Dim h As Hyperlink
    For Each h In ActiveSheet.Hyperlinks
        h.Parent.Font.ColorIndex = 33
    Next
End Sub

Sub ToggleStorageSheetsVisible()
    If Sheets(YaConst.AccessorySheetName).Visible = xlSheetVisible Then
        Sheets(YaConst.ErrorsSheetName).Visible = xlSheetVeryHidden
        Sheets(YaConst.AccessorySheetName).Visible = xlSheetVeryHidden
    Else
        Sheets(YaConst.ErrorsSheetName).Visible = xlSheetVisible
        Sheets(YaConst.AccessorySheetName).Visible = xlSheetVisible
    End If
End Sub

Private Sub TogleHeaders()
    Dim dict As Dictionary
    If Len(Range("A2").value) = 2 Then
        Set dict = EnToRusHeaders
    Else:
        Set dict = RusToEnHeaders
    End If
    
    Dim cell As Range
    For Each cell In Worksheets(YaConst.SheetForValidationName).Range("A2:Z2").cells
        If dict.Exists(cell.value) Then
            Dim Position As Integer
            
            cell.value = dict.Item(cell.value)
            
            Position = InStr(cell.value, "*")
            If Position > 0 Then
                cell.Characters(Start:=Position, length:=1).Font.Color = YaConst.ErrorColor
            End If
        End If
    Next
End Sub

Private Function RusToEnHeaders() As Dictionary
    Dim dict As Dictionary
    Dim resultDict As New Dictionary
    Dim counter As Integer
    Dim varItem As Variant
    
    counter = 0
    Set dict = EnToRusHeaders
    
    For Each varItem In dict.Items
      resultDict.Add varItem, dict.Keys()(counter)
      counter = counter + 1
    Next
    Set RusToEnHeaders = resultDict
End Function

Private Function EnToRusHeaders() As Dictionary
    Dim dict As New Dictionary
    dict.Add "id", "id*"
    dict.Add "available", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "delivery", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "pickup", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "store", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "url", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|*"
    dict.Add "vendor", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "name", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
    dict.Add "category", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
    dict.Add "price", "|fffd||fffd||fffd||fffd|*"
    dict.Add "oldprice", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "currencyId", "|fffd||fffd||fffd||fffd||fffd||fffd|*"
    dict.Add "picture", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
    dict.Add "description", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "param", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*"
    dict.Add "sales_notes", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "manufacturer_warranty", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "country_of_origin", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "barcode", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "cpa", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    dict.Add "bid", "bid"
    dict.Add "cbid", "cbid"
    dict.Add "fee", "fee"
    Set EnToRusHeaders = dict
End Function

Private Function gen()
    Dim cell As Range
    For Each cell In Worksheets(YaConst.SheetForValidationName).Range(YaConst.HeadersRange).cells
        'Debug.Print "Public Const AAAAAAA As String = """ & cell.value & """"
        Debug.Print ".Add """ & cell.value & """, """ & cell.Address & """"
    Next
End Function

Private Function HeadersAddresses() As Dictionary
    Dim cell As Range
    For Each cell In ActiveSheet.Range("A3:AM4").cells
        Debug.Print ".Add """ & cell.Address & """, """ & cell.value & """"
    Next
End Function


Attribute VB_Name = "ErrorUploadForm"
Attribute VB_Base = "0{90862288-EE2B-3E47-9362-9A482B77E415}{0B7F3D2E-4CCE-E847-9EFC-AA19E79E5EA4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Sub PutError(description As String, errorText As String)
    Me.ErrorLabel = description & vbLf & errorText
    Me.ErrorLabel.AutoSize = True
    Me.height = Me.ErrorLabel.height + 50
    Me.Width = Me.ErrorLabel.Width + 50
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
    Me.Show
End Sub
Attribute VB_Name = "ErrorsStorage"
Option Explicit
Option Private Module

Sub SaveErrorForCell(error As String, cell As Range)
    Worksheets(YaConst.ErrorsSheetName).Range(cell.Address).Value2 = error
End Sub

Function GetErrorForCell(cell As Range) As String
    GetErrorForCell = Worksheets(YaConst.ErrorsSheetName).Range(cell.Address).Value2
End Function

Sub DeleteErrorForCell(cell As Range)
    Worksheets(YaConst.ErrorsSheetName).Range(cell.Address).ClearContents
End Sub

Function CellHasError(cell As Range) As Boolean
    CellHasError = Worksheets(YaConst.ErrorsSheetName).Range(cell.Address).Value2 <> ""
End Function

Private Sub HideSheet()
    Sheets(YaConst.ErrorsSheetName).Visible = xlSheetVeryHidden
End Sub

Sub DeleteAllErrors()
    Worksheets(YaConst.ErrorsSheetName).usedRange.ClearContents
End Sub

Function FindErrorAddress(startCell As Range, inRange As Range, direction As XlSearchDirection) As String
    Dim localizedStartCell As Range
    Dim cell As Range
    Dim sheet As Worksheet
    Dim findedCell As Range
    
    Set sheet = Worksheets(YaConst.ErrorsSheetName)
    Set localizedStartCell = sheet.Range(startCell.cells(1, 1).Address)
                  
    If Intersect(startCell, inRange) Is Nothing Then
        Set localizedStartCell = sheet.Range(inRange.Address).cells(1, 1)
    End If

    Set findedCell = sheet.Range(inRange.Address).Find(What:="*", After:=localizedStartCell, SearchDirection:=direction)
    If findedCell Is Nothing Then
        Exit Function
    End If

    FindErrorAddress = findedCell.Address
End Function
Attribute VB_Name = "Main"
Option Explicit
Option Private Module

Private pSuccefulValidate As Boolean
Private pAllValidated As Boolean
Private pRangeForValidation As Range
Private pFirstErrorTime As Single
Private pCellsWithErrors As Range
Private pLastCellWithErrors As Range

Private Property Let SuccefulValidate(bool As Boolean)
    If pSuccefulValidate And Not bool Then
        pFirstErrorTime = Timer
        Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Now
    End If
    pSuccefulValidate = bool
End Property

Public Property Let AllValidated(bool As Boolean)
    pAllValidated = bool
End Property

Private Sub AppendCellWithError(cell As Range)
    If pCellsWithErrors Is Nothing Then
        Set pCellsWithErrors = cell
    End If
    
    Set pLastCellWithErrors = cell
    Set pCellsWithErrors = Union(pCellsWithErrors, cell)
End Sub

Private Sub AutoSizeForAllComments() 'TODO
    Dim xComment As Comment
    For Each xComment In Application.ActiveSheet.Comments
        xComment.Shape.TextFrame.AutoSize = True
    Next
End Sub

Private Sub ShowValidationForm()
    Dim iTimer As Single

    Set pRangeForValidation = Utils.GetUsedRange(Worksheets(YaConst.SheetForValidationName)).cells
    
    iTimer = Timer
    
    Dim estimateTime As Single
    estimateTime = EstimateValidationTime(pRangeForValidation)
    
    ValidationForm.estimateTime estimateTime
    ValidationForm.Show
    
    If Not pSuccefulValidate Then
        Selection.Activate
    End If
    
End Sub

Private Sub UploadProductsToMarket()
    Dim iTimer As Single
    
    If pAllValidated Then
        Upload.Upload
        Exit Sub
    End If
    
    Set pRangeForValidation = Utils.GetUsedRange(Worksheets(YaConst.SheetForValidationName)).cells
    
    iTimer = Timer
    
    Dim estimateTime As Single
    estimateTime = EstimateValidationTime(pRangeForValidation)
    
    ValidationForm.estimateTime estimateTime
    ValidationForm.Show
    
    If Not pSuccefulValidate Then
        Selection.Activate
    End If
    
    If pSuccefulValidate Then
        pAllValidated = True
        Upload.Upload
    End If
End Sub

Public Sub ValidateChangedCells(cells As Range)
    Dim estimateTime As Single
    Dim usedRange As Range
    
    Set usedRange = Utils.GetUsedRange(Worksheets(YaConst.SheetForValidationName))
    
    Set cells = IntersectWithDataRange(cells)

    If cells Is Nothing Then
        Exit Sub
    End If
    
    If cells.Count = 1 Then
        ValidateSingleCell cells
    ElseIf cells.Count <= 500 Then
        Set pRangeForValidation = cells
        ValidationForm.Show
    Else
        If EstimateValidationTime(cells) <= YaConst.MaxEstimateTimeInSeconds Then
            ValidationForm.estimateTime
            Set pRangeForValidation = cells
            ValidationForm.Show
        End If
    End If
End Sub

Sub ValidateRange(Optional selectLastErroredCell As Boolean = True)
    Dim cell As Range
    Dim iTimer As Single
    Dim percentsCounter As Double

    iTimer = Timer
    percentsCounter = 0
    pFirstErrorTime = 0
    SuccefulValidate = True
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    CellVaLidator.ClearModule
    Set pCellsWithErrors = Nothing
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not AllHeadersValid Then
        percentsCounter = percentsCounter + 1 / pRangeForValidation.Count
        ValidationForm.UpdateProgressBar percentsCounter
        ValidationForm.ShowError (1)
        Exit Sub
    End If
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Now
    Debug.Print "Rows - " & pRangeForValidation.Rows.Count & " | Columns - " & pRangeForValidation.Columns.Count & " | Cells - " & pRangeForValidation.cells.Count
    For Each cell In pRangeForValidation
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        percentsCounter = percentsCounter + 1 / pRangeForValidation.Count
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
        If Timer - iTimer > 0.05 Then
            iTimer = Timer
            ValidationForm.UpdateProgressBar percentsCounter
        End If
        
        ValidateCellByColumn cell
        
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If pFirstErrorTime <> 0 And (pFirstErrorTime + YaConst.MaxValidateWithErrorsTimeInSeconds) < Timer Then Exit For
    Next
    ValidationForm.UpdateProgressBar percentsCounter

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If pSuccefulValidate Then
        ValidationForm.ShowSuccess
    Else:
        If selectLastErroredCell Then
            pLastCellWithErrors.Select
        End If
        MarkCellsWithErrors pCellsWithErrors
        ValidationForm.ShowError (pCellsWithErrors.Count)
    End If
    
    Debug.Print "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Now
End Sub

Private Function AllHeadersValid() As Boolean
    Dim cell As Range
    Dim inHeaderRange As Boolean
    Dim correctHeader As Boolean
    
    For Each cell In Worksheets(YaConst.SheetForValidationName).Range(YaConst.LockHeadersRange)
        Dim expectedHeader As String
        expectedHeader = YaConst.Headers.Item(cell.Address)
        Debug.Print expectedHeader
        Debug.Print cell.value
        correctHeader = expectedHeader = cell.value
        If Not correctHeader Then
            Dim columnLetter As String
            columnLetter = Utils.GetLetterByColumnIndex(Worksheets(YaConst.SheetForValidationName).Range(cell.Address).column)
            If YaConst.ThisTemplateType = YaConst.SkuTemplateType Or YaConst.ThisTemplateType = YaConst.StorageTemplateType Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Else
                MsgBox "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & columnLetter & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & expectedHeader, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
            Exit For
        End If
    Next
    AllHeadersValid = correctHeader
End Function

Public Sub ValidateCellByColumn(cell As Range)
    Dim dataStartRow As Integer
    
    dataStartRow = Worksheets(YaConst.SheetForValidationName).Range(YaConst.dataStartCell).Row
    If cell.Row >= dataStartRow Then
        ValidateDataCell cell
    End If
End Sub

Private Function GetCellColumnHeader(cell As Range) As String
    With Worksheets(YaConst.SheetForValidationName)
        GetCellColumnHeader = .cells(.Range(YaConst.HeadersRange).Row, cell.column).value
    End With
End Function


Private Function GetHeaderColumn(header As String) As String
    Dim columnIndex As Long
    columnIndex = Worksheets(YaConst.SheetForValidationName).Range(YaConst.HeadersAddresses.Item(header)).column
    GetHeaderColumn = Utils.GetLetterByColumnIndex(columnIndex)
End Function

Private Sub ValidateDataCell(cell As Range)
    CellVaLidator.cell = cell
    
    Select Case GetCellColumnHeader(cell)
    Case YaConst.IdH
        CellVaLidator.ValueIsLettersAndDigitsOnly
        CellVaLidator.MaxLength 20
        CellVaLidator.UniqueInColumn
        CellVaLidator.Required
        
    Case YaConst.StatusH
        CellVaLidator.InList Array("|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        
    Case YaConst.DeliveryH
        CellVaLidator.InList Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|")
        
    Case YaConst.DeliveryCostH
        CellVaLidator.IsDeliveryCost
        
    Case YaConst.DeliveryDaysH
        CellVaLidator.DeliveryTime
    
    Case YaConst.PickUpH
        CellVaLidator.InList Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|")
    
    Case YaConst.InStoreH
        CellVaLidator.InList Array("|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
    
    Case YaConst.UrlH
        CellVaLidator.MaxLength 512
        CellVaLidator.Required
        
    Case YaConst.SkuUrlH
        CellVaLidator.MaxLength 512
        CellVaLidator.Required
        
    Case YaConst.NameH
        CellVaLidator.MaxLength 120
        CellVaLidator.Required
        
    Case YaConst.CategoryH
        CellVaLidator.Required
        
    Case YaConst.PriceH
        CellVaLidator.Required
        CellVaLidator.IsPositiveNumber
        CellVaLidator.MaxForCurrency 500000000000#, "RUR", GetHeaderColumn(YaConst.CurrencyH)
        CellVaLidator.InPercentageRangeFromColumn GetHeaderColumn(YaConst.OldPriceH), 5, 95
        
    Case YaConst.OldPriceH
        If YaConst.ThisTemplateType = YaConst.SkuTemplateType Then
            CellVaLidator.OldSkuPrice "U"
        Else
            CellVaLidator.GreaterThanValueInColumn (GetHeaderColumn(YaConst.PriceH))
            CellVaLidator.IsPositiveNumber
        End If

    Case YaConst.CurrencyH
        CellVaLidator.InList Array("RUR", "USD", "EUR", "UAH", "KZT", "BYN")
        CellVaLidator.Required
        
    Case YaConst.PicUrlH
        CellVaLidator.MaxLength 512
        CellVaLidator.Required
        
    Case YaConst.DescriptionH
        CellVaLidator.MaxLength 3000
        
    Case YaConst.SalesNotesH
        CellVaLidator.MaxLength 50
        
    Case YaConst.VendorWarrantyH
        CellVaLidator.InList Array("|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|")
        
    Case YaConst.VendorCountryH
        CellVaLidator.InCountriesList
        
    Case YaConst.BarcodeH
        CellVaLidator.GtinCodes

    Case YaConst.BidH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.CbidH
        CellVaLidator.IsWholePositiveNumber

    Case YaConst.YearH
        CellVaLidator.IsYear
        
    Case YaConst.IsbnH
        CellVaLidator.Required
        CellVaLidator.IsISBN

    Case YaConst.TypeH
        CellVaLidator.Required
        If YaConst.ThisTemplateType = YaConst.BooksTemplateType Then
            CellVaLidator.InList Array("book")
        End If
        If YaConst.ThisTemplateType = YaConst.MusicTemplateType Then
            CellVaLidator.InList Array("artist.title")
        End If
        
    Case YaConst.ProductDescriptionH
        CellVaLidator.MaxLength 3000
        
    Case YaConst.SkuIdH
        CellVaLidator.Required
        CellVaLidator.UniqueInColumn
        CellVaLidator.MaxLength 80
        CellVaLidator.IsSku
        
    Case YaConst.SkuNameH
        CellVaLidator.Required
    
    Case YaConst.CategoryNameH
        CellVaLidator.Required
        
    Case YaConst.barcodesH
        CellVaLidator.GtinCodes
    
    Case YaConst.StorePriceH
        CellVaLidator.IsPositiveNumber
        CellVaLidator.CellFormatIsNumeric
    
    Case YaConst.NdsH
        CellVaLidator.InList Array("2", "5", "6", "7", "VAT_20", "VAT_10", "VAT_0", "NO_VAT")
        
    Case YaConst.RecommendedSkuIdH
        CellVaLidator.OnlyDigits
        
    Case YaConst.SkuIsRemoveH
        CellVaLidator.InList Array("|fffd||fffd|")

    Case YaConst.CountInPackH
        CellVaLidator.IsWholePositiveNumber

    Case YaConst.UnitPriceH
        CellVaLidator.IsPositiveNumber
        CellVaLidator.CellFormatIsNumeric

    Case YaConst.UnitSpaceH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.TradeMarkH
        CellVaLidator.Required
        
    Case YaConst.ManufacturerH
        CellVaLidator.Required
        
    Case YaConst.CountryOfOriginH
        CellVaLidator.Required
        
    Case YaConst.ValidityDaysH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.ServiceDaysH
        CellVaLidator.IsWholePositiveNumber

    Case YaConst.WarrantyDaysH
        CellVaLidator.IsWholePositiveNumber

    Case YaConst.TransportUnitH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.MinDeliveryPiecesH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.QuantumH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.LeadTimeH
        CellVaLidator.IsWholePositiveNumber
        
    Case YaConst.DeliveryWeekdaysH
        CellVaLidator.IsWeekdaysList
        
    End Select

    ClearCellError cell
    
    If CellVaLidator.error <> "" Then
        SuccefulValidate = False
        AppendCellWithError cell
        ErrorsStorage.SaveErrorForCell CellVaLidator.error, cell
    End If
End Sub

Private Sub ValidateHeaderCell(cell As Range)
    CellVaLidator.cell = cell
    'CellVaLidator.header
    
    ClearCellError cell
    If CellVaLidator.error <> "" Then
        SuccefulValidate = False
        AppendCellWithError cell
        ErrorsStorage.SaveErrorForCell CellVaLidator.error, cell
    End If
End Sub

Private Function EstimateValidationTime(cells As Range) As Single
    Dim cell As Range
    Dim validatedCellsCount As Integer
    Dim iTimer As Single
    
    iTimer = Timer
    validatedCellsCount = 0
    Application.screenUpdating = False
    
    For Each cell In cells
        ValidateCellByColumn cell
        
        validatedCellsCount = validatedCellsCount + 1
        If validatedCellsCount = YaConst.CellsCountForCalculateEstimateTime Then Exit For
    Next
    
    Application.screenUpdating = True
    EstimateValidationTime = cells.Count / validatedCellsCount * (Timer - iTimer)
    Debug.Print "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & EstimateValidationTime
End Function

Private Sub ClearCellError(cell As Range)
    ErrorsStorage.DeleteErrorForCell cell
    
    If YaConst.ThisTemplateType <> YaConst.SkuTemplateType And YaConst.ThisTemplateType <> YaConst.StorageTemplateType Then
        If cell.Borders.ColorIndex = YaConst.ErrorColorIndex Then
            'cell.Borders.LineStyle = xlLineStyleNone
            cell.Borders.ColorIndex = YaConst.CellBordersColor
            cell.Borders.Weight = 2
        End If
    Else
        cell.Borders(-4160).LineStyle = xlDot
        cell.Borders(-4107).LineStyle = xlDot
        cell.Borders(-4160).ColorIndex = 1
        cell.Borders(-4107).ColorIndex = 1
        cell.Borders(-4160).Weight = 1
        cell.Borders(-4107).Weight = 1
        
        
        cell.Borders(-4152).LineStyle = xlContinuous
        cell.Borders(-4131).LineStyle = xlContinuous
        cell.Borders(-4152).ColorIndex = 1
        cell.Borders(-4131).ColorIndex = 1
        cell.Borders(-4152).Weight = 2
        cell.Borders(-4131).Weight = 2
    End If
End Sub

Private Sub MarkCellsWithErrors(cells As Range)
    If YaConst.ThisTemplateType <> YaConst.SkuTemplateType And YaConst.ThisTemplateType <> YaConst.StorageTemplateType Then
        cells.Borders.ColorIndex = YaConst.ErrorColorIndex
        cells.Borders.Weight = 3
    Else
        cells.Borders.ColorIndex = YaConst.ErrorColorIndex
        cells.Borders.LineStyle = xlContinuous
        cells.Borders.Weight = 3
    End If
End Sub

Sub ShowErrors(cell As Range)
    Dim dataStartCell As Range
    Set dataStartCell = Range(YaConst.dataStartCell)
        
    Dim previousCellAddress As String
    previousCellAddress = AccessoryStorage.PrevCellAddress
    
    If previousCellAddress <> "" Then
        Dim prevCell As Range
        Set prevCell = Range(previousCellAddress)
        
        If prevCell.Row >= dataStartCell.Row Then
            If Not prevCell.Comment Is Nothing Then
                prevCell.Comment.Delete
            End If
        End If
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| cells.Count |fffd||fffd||fffd| Ctrl + A
    If cell.Rows.Count <> 1 Then
        Exit Sub
    End If
    
    If cell.Count = 1 Then
        If cell.Row >= dataStartCell.Row _
            And ErrorsStorage.CellHasError(cell) _
            And cell.Borders.ColorIndex = YaConst.ErrorColorIndex Then
            If Not cell.Comment Is Nothing Then
                cell.Comment.Delete
            End If
            
            cell.AddComment ErrorsStorage.GetErrorForCell(cell)
            cell.Comment.Shape.Line.ForeColor.RGB = YaConst.ErrorColorIndexEq
            
            ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| AutoSize |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            ' cell.Comment.Shape.TextFrame.AutoSize = True
            Dim linesCount As Integer
            linesCount = UBound(Split(cell.Comment.Text, vbLf)) + 1
            cell.Comment.Shape.Width = Utils.TextWidth(cell.Comment.Text) + 4.5
            cell.Comment.Shape.height = Utils.TextHeight(cell.Comment.Text) + 2.25 + (linesCount * 0.75)
            cell.Comment.Visible = True
            cell.Comment.Shape.TextFrame.AutoSize = True
        End If
        
        AccessoryStorage.StorePrevCellAddress cell.Address
        
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Not ValidationForm.Visible Then
            ThisWorkbook.Activate
        End If
    End If
End Sub

Private Sub ValidateSingleCell(cell As Range)
    Dim sheet As Worksheet
    Set sheet = Worksheets(YaConst.SheetForValidationName)
    
    Set pRangeForValidation = sheet.Range(sheet.cells(cell.Row, YaConst.FirstDataColumnIndex), _
        sheet.cells(cell.Row, Utils.GetUsedRange(sheet).Columns.Count))
    
    Application.screenUpdating = False
    Application.Cursor = xlNorthwestArrow
    ValidateRange False
    Application.screenUpdating = True
    Application.Cursor = xlDefault
End Sub

Private Sub SelectError(direction As XlSearchDirection)
    Dim selectedCell As Range
    Dim usedRange As Range
    Dim sheet As Worksheet
    Dim errorAddress As String
    
    Set sheet = Worksheets(YaConst.SheetForValidationName)
    sheet.Activate
    Set selectedCell = Selection
    Set usedRange = Utils.GetUsedRange(sheet)
    errorAddress = ErrorsStorage.FindErrorAddress(selectedCell, usedRange, direction)
    
    If errorAddress <> "" Then
        sheet.Range(errorAddress).Select
    Else
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End Sub

Sub SelectNextError()
    SelectError xlNext
End Sub

Sub SelectPrevError()
    SelectError xlPrevious
End Sub

Private Sub SwitchToTab(TabName As String)
    If Application.Version = "11.0" Then
        Exit Sub
    End If
    
    Dim RibbonTab   As IAccessible

    Set RibbonTab = winAPI.GetAccessible(CommandBars("Ribbon"), ROLE_SYSTEM_PAGETAB, TabName)

    If Not RibbonTab Is Nothing Then
        If ((RibbonTab.accState(CHILDID_SELF) _
        And (STATE_SYSTEM_UNAVAILABLE Or STATE_SYSTEM_INVISIBLE)) = 0) Then
            RibbonTab.accDoDefaultAction CHILDID_SELF
        End If
    End If
End Sub

Public Sub SwitchToAddinsTab()
    SwitchToTab "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Public Sub PasteCartIconToBar()
    Dim bar As CommandBar
    Set bar = Application.CommandBars(YaConst.CommandBarName)
    Dim control As CommandBarControl
    
    Set control = bar.Controls(1)
    AccessoryStorage.GetCartPicture.CopyPicture xlScreen, xlPicture
    
    On Error Resume Next
    control.PasteFace
    On Error GoTo 0

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| CopyPicture
    Dim oData   As New DataObject
    oData.SetText Text:=Empty
    oData.PutInClipboard
End Sub

Private Function IntersectWithDataRange(cells As Range) As Range
    Dim sheet As Worksheet
    Dim usedRange As Range
    Dim dataRange As Range
    
    Set sheet = Worksheets(YaConst.SheetForValidationName)
    Set usedRange = Utils.GetUsedRange(sheet)
    Set dataRange = usedRange.Resize(sheet.Rows.Count)
    
    Set IntersectWithDataRange = Intersect(dataRange, cells)
End Function

Attribute VB_Name = "PartnerDataForm"
Attribute VB_Base = "0{29444E1A-DBF5-8E41-80FC-F0B17FD4FE9C}{C267E290-56CE-9844-8E71-4A66ADCD0741}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private pContainer As Container

Public Sub ShowWithParam(cont As Container)
    Set pContainer = cont
    Me.Show
End Sub

Private Sub SaveButton_Click()
    If Not CampaignIsValid(Me.CampaignTextBox.value) Then
        Exit Sub
    End If

    If pContainer.password = "" Then
        CreatePasswordForm.ShowWithParam pContainer
    End If
    
    If pContainer.password <> "" Then
        DataManager.SaveCredential campaign, Me.CampaignTextBox.value, pContainer.password
        DataManager.SaveCredential Token, Me.TokenTextBox.value, pContainer.password
        Unload Me
    End If
End Sub

Private Function CampaignIsValid(campaignId As String) As Boolean
    Dim regEx As New RegExp
    
    CampaignIsValid = False
    
    regEx.Pattern = "^[0-9]+$"
    If Not regEx.Test(campaignId) Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Function
    End If
    
    CampaignIsValid = True
End Function

Private Sub UserForm_Activate()
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
    
    If DataManager.CredentialsIsSet Then
        FillFields
    Else
        Me.SaveButton.Enabled = False
    End If
    
    ControlCreator.CreateHelpLabel Me.CampaignLabel, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|."
    ControlCreator.CreateHelpLabel Me.TokenLabel, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|."
End Sub

Public Sub FillFields()
    If DataManager.CredentialsPasswordCorrect(pContainer.password) Then
        With Me
            .CampaignTextBox.value = DataManager.GetCredential(campaign, pContainer.password)
            .TokenTextBox.value = DataManager.GetCredential(Token, pContainer.password)
        End With
    Else
        Unload Me
    End If
End Sub
Private Sub TokenTextBox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If Me.CampaignTextBox.Text = "" _
    Or Me.TokenTextBox.Text = "" Then
        Me.SaveButton.Enabled = False
    Else
        Me.SaveButton.Enabled = True
    End If
End Sub
Private Sub CampaignTextBox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If Me.CampaignTextBox.Text = "" _
    Or Me.TokenTextBox.Text = "" Then
        Me.SaveButton.Enabled = False
    Else
        Me.SaveButton.Enabled = True
    End If
End Sub
Attribute VB_Name = "PasswordForm"
Attribute VB_Base = "0{6CDB3633-3A99-F94A-B478-2909DB2C249E}{34884EB1-8AE4-C640-8269-05CD07AA55E7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private pContainer As Container

Public Sub ShowWithParam(cont As Container)
    Set pContainer = cont
    Me.Show
End Sub

Private Sub ChangeCredentialsLabel_Click()
    If Me.PasswordTextBox.value = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
        Exit Sub
    End If
    
    pContainer.password = Me.PasswordTextBox.value
    PartnerDataForm.ShowWithParam pContainer
End Sub

Private Sub ForgotPassLabel_Click()
    Dim sure As Long
    Dim cautionText As String
    
    cautionText = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf _
                & "1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf _
                & "2. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf _
                & "3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf _
                & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?"
    
    sure = MsgBox(cautionText, vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")

    If sure = vbYes Then
         DataManager.DeleteCredentials
         Unload Me
    End If
End Sub

'Private Sub ChangeCredentialsLabel_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single) ' TODO
'    winAPI.SetPointerCursor
'End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        pContainer.password = ""
    End If
End Sub

Private Sub DeleteCredentialsLabel_Click()
    Dim sure As Long
    sure = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")

    If sure = vbYes Then
         DataManager.DeleteCredentials
         Unload Me
    End If
End Sub

Private Sub OkButton_Click()
    If DataManager.CredentialsPasswordCorrect(Me.PasswordTextBox.value) Then
        pContainer.password = Me.PasswordTextBox.value
        Unload Me
    End If
End Sub

Private Sub UserForm_Activate()
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
    Me.OkButton.Enabled = False
    
    Me.ChangeCredentialsLabel.Font.Underline = True
    Me.DeleteCredentialsLabel.Font.Underline = True
    Me.ForgotPassLabel.Font.Underline = True

    Me.ChangeCredentialsLabel.ForeColor = YaConst.LinkColor
    Me.DeleteCredentialsLabel.ForeColor = YaConst.LinkColor
    Me.ForgotPassLabel.ForeColor = YaConst.LinkColor
End Sub

Private Sub PasswordTextBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Me.PasswordTextBox.PasswordChar = "*"
End Sub

Private Sub PasswordTextBox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If Me.PasswordTextBox.Text = "" Then
        Me.OkButton.Enabled = False
    Else
        Me.OkButton.Enabled = True
    End If
End Sub


Attribute VB_Name = "ShowingHelpHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents pHelpControl As MSForms.Label
Attribute pHelpControl.VB_VarHelpID = -1
Private pHelpText As String

Private Sub pHelpControl_Click()
    MsgBox pHelpText, vbInformation
End Sub

Public Sub SetHelp(lbl As MSForms.Label, help As String)
    Set pHelpControl = lbl
    pHelpText = help
End Sub
Attribute VB_Name = "Upload"
Option Explicit
Option Private Module

Private pContainer As Container

Public Property Get Container() As String
    Container = pContainer
End Property

Sub Upload()
    Set pContainer = New Container
    
    If DataManager.CredentialsIsSet Then
        PasswordForm.ShowWithParam pContainer
    Else
        PartnerDataForm.ShowWithParam pContainer
    End If
    
    If DataManager.CredentialsIsSet And pContainer.password <> "" Then
        UploadForm.Show
    End If
End Sub

Sub SendFeedToMarket()
    Dim response As String
    Dim uploadId As String
    Dim validationId As String
    Dim validationResult As String
    Dim validationLog As String
    
    Dim i As Integer
    
    If Not winAPI.InternetIsConnected Then
        ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    
    UploadForm.UpdateProgressBar (0.01)
    response = UploadWorkbook
    If ResponseErrors(response) <> "" Then
         ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", ResponseErrors(response)
         Exit Sub
    End If
    uploadId = GetNodeValue(response, "upload-id")

    UploadForm.UpdateProgressBar (0.45)
    response = RunValidation(uploadId)
    If ResponseErrors(response) <> "" Then
         ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", ResponseErrors(response)
         Exit Sub
    End If
    validationId = GetNodeValue(response, "validation-id")
    
    UploadForm.UpdateProgressBar (0.5)
    For i = 1 To YaConst.MaxRequestsForValidationResult * YaConst.RequestDelayForValidationResult
        UploadForm.UpdateProgressBar (0.5 + i / (MaxRequestsForValidationResult * YaConst.RequestDelayForValidationResult))
        
        If i = 1 Or i Mod YaConst.RequestDelayForValidationResult = 0 Then
            response = GetValidationResult(validationId)
            If ResponseErrors(response) <> "" Then
                 ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", ResponseErrors(response)
                Exit Sub
            End If
            validationResult = GetNodeValue(response, "validation-result")
            
            If validationResult <> "UNKNOWN" Then
                Exit For
            End If
        End If
        DoEvents
        Application.Wait DateAdd("s", 1, Now)
    Next
    
    If validationResult = "UNKNOWN" Then
        ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
        Exit Sub
    ElseIf validationResult = "ERROR" Then
        validationLog = GetNodeValue(response, "validation-log")
        ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", ErrorsNumerationBugFix(validationLog)
        Exit Sub
    ElseIf validationResult = "WARNING" Then
        validationLog = GetNodeValue(response, "validation-log")
        ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", ErrorsNumerationBugFix(validationLog)
    End If
    
    UploadForm.UpdateProgressBar (0.9)
    response = ApplyFeed(validationId)
    If ResponseErrors(response) <> "" Then
         ErrorUploadForm.PutError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", ResponseErrors(response)
         Exit Sub
    End If
    
    UploadForm.UpdateProgressBar (1)
    
    AccessoryStorage.IncrementUploadCouner
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation
End Sub

Private Function UploadWorkbook() As String
    Dim request As New WinHttpRequest
    Dim formData() As Byte
    Dim url As String
    
    Dim urlParams As New Dictionary
    With urlParams
        .Add YaConst.CampaignMask, DataManager.GetCredential(campaign, pContainer.password)
        .Add YaConst.ClientIdMask, YaConst.ClientId
        .Add YaConst.TokenMask, DataManager.GetCredential(Token, pContainer.password)
    End With
    
    url = MaskReplacer(YaConst.FileUploadUrl, urlParams)
    
    DoEvents
    formData = BuildFormDataWithFile(GetCurrentWorkbookAsBytes, YaConst.TempFileName, YaConst.UploadFileField, YaConst.Boundary)
    DoEvents

    request.Open "POST", url, False
    request.SetRequestHeader "Content-Type", "multipart/form-data; boundary=" & YaConst.Boundary
    
    DoEvents
    CatchRequestErrors request, formData
    
    Dim progress As Single
    progress = 0.01
    Do While request.WaitForResponse(0) = False
        Application.Wait DateAdd("s", 1, Now)
        DoEvents
        If progress < 0.45 Then
            progress = progress + 0.01
            UploadForm.UpdateProgressBar (progress)
        End If
    Loop

    UploadWorkbook = request.ResponseText
End Function

Private Function RunValidation(uploadId As String) As String
    Dim request As New WinHttpRequest
    Dim url As String
    
    Dim urlParams As New Dictionary
    With urlParams
        .Add YaConst.CampaignMask, DataManager.GetCredential(campaign, pContainer.password)
        .Add YaConst.ClientIdMask, YaConst.ClientId
        .Add YaConst.TokenMask, DataManager.GetCredential(Token, pContainer.password)
        .Add YaConst.UploadIdMask, uploadId
    End With
    
    url = MaskReplacer(YaConst.FileValidationUrl, urlParams)
    request.Open "POST", url, False
    
    CatchRequestErrors request

    RunValidation = request.ResponseText
End Function

Private Function GetValidationResult(validationId As String) As String
    Dim request As New WinHttpRequest
    Dim url As String
    
    Dim urlParams As New Dictionary
    With urlParams
        .Add YaConst.CampaignMask, DataManager.GetCredential(campaign, pContainer.password)
        .Add YaConst.ClientIdMask, YaConst.ClientId
        .Add YaConst.TokenMask, DataManager.GetCredential(Token, pContainer.password)
        .Add YaConst.ValidationIdMask, validationId
    End With
    
    url = MaskReplacer(YaConst.ValidationResultUrl, urlParams)
    
    request.Open "GET", url, False
    
    CatchRequestErrors request
    
    GetValidationResult = VariantToTextWithCharset(request.ResponseBody, YaConst.ResponseCharset)
End Function

Private Function ApplyFeed(validationId As String) As String
    Dim request As New WinHttpRequest
    Dim url As String

    Dim urlParams As New Dictionary
    With urlParams
        .Add YaConst.CampaignMask, DataManager.GetCredential(campaign, pContainer.password)
        .Add YaConst.ClientIdMask, YaConst.ClientId
        .Add YaConst.TokenMask, DataManager.GetCredential(Token, pContainer.password)
        .Add YaConst.ValidationIdMask, validationId
        .Add YaConst.OsTypeMask, Application.OperatingSystem
        .Add YaConst.ExcelVersionMask, Application.Name & " " & Application.Version
    End With
 
    url = MaskReplacer(YaConst.ApplyFeedUrl, urlParams)
    request.Open "POST", url, False
    
    CatchRequestErrors request
    
    ApplyFeed = request.ResponseText
End Function

Function VariantToTextWithCharset(source As Variant, charset As String) As String
    Dim converter As New ADODB.Stream
    
    converter.Open
    converter.Type = adTypeBinary
    converter.Write source
    
    converter.Position = 0
    converter.Type = adTypeText
    converter.charset = charset

    VariantToTextWithCharset = converter.ReadText
    converter.Close
End Function

Private Function MaskReplacer(source As String, replaces As Dictionary) As String
    Dim key As Variant
    
    For Each key In replaces.Keys()
        source = Replace(source, key, replaces(key))
    Next
    
    MaskReplacer = source
End Function

Private Function GetNodeValue(xml As String, nodeName As String) As String
    Dim objXML As MSXML2.DOMDocument
    Set objXML = New MSXML2.DOMDocument
    
    If Not objXML.LoadXML(xml) Then
        Err.Raise objXML.parseError.ErrorCode, , objXML.parseError.reason
    End If

    GetNodeValue = objXML.getElementsByTagName(nodeName).Item(0).Text
End Function

Private Function ResponseErrors(xmlResponse As String) As String
    Dim error As String
    Dim objXML As MSXML2.DOMDocument
    Set objXML = New MSXML2.DOMDocument

    If Not objXML.LoadXML(xmlResponse) Then
        Err.Raise objXML.parseError.ErrorCode, , objXML.parseError.reason
    End If
    
    If objXML.getElementsByTagName("response").length = 0 Then
        error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        
    ElseIf objXML.getElementsByTagName("error").length <> 0 Then
        If objXML.getElementsByTagName("message").length <> 0 Then
            error = objXML.getElementsByTagName("message").Item(0).Text
        Else
            error = objXML.getElementsByTagName("error").Item(0).Attributes.getNamedItem("message").Text
        End If
        
    ElseIf objXML.getElementsByTagName("status").Item(0).Text <> "OK" Then
        error = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    ResponseErrors = TranslateError(error)
End Function

Private Function TranslateError(error As String) As String
    If error = "Client ID Is invalid" Then
        TranslateError = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf & _
                         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Exit Function
        
    ElseIf error = "Token is invalid" Then
        TranslateError = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbLf & _
                         "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Exit Function
        
    ElseIf error = "The request is too big" Then
        TranslateError = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & vbLf & _
                         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: 50 |fffd||fffd|."
        Exit Function
        
    ElseIf error = "Internal error while saving feed" Then
        TranslateError = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Exit Function
        
    ElseIf error = "Internal error while validating feed" Then
        TranslateError = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        Exit Function
    End If
    
    TranslateError = error
End Function

Private Function BuildFormDataWithFile(bytFile, filename, strFileField, Boundary) As Byte()
    Dim rs
    Dim lngCount
    Dim bytFormData, bytFormStart, bytFormEnd
    Dim strFormStart, strFormEnd, strDataPair
    
    Const adLongVarBinary = 205

    strFormEnd = vbCrLf & "--" & Boundary & "--" & vbCrLf
    strFormStart = ""

    strFormStart = strFormStart & "--" & Boundary & vbCrLf
    strFormStart = strFormStart & "Content-Disposition: form-data; "
    strFormStart = strFormStart & "name=""" & strFileField & """; "
    strFormStart = strFormStart & "filename=""" & filename & """"
    strFormStart = strFormStart & vbCrLf
    strFormStart = strFormStart & "Content-Type: application/upload"
    strFormStart = strFormStart & vbCrLf & vbCrLf

    Set rs = CreateObject("ADODB.Recordset")
    rs.Fields.Append "FormData", adLongVarBinary, Len(strFormStart) + LenB(bytFile) + Len(strFormEnd)
    rs.Open
    rs.AddNew

    For lngCount = 1 To Len(strFormStart)
    bytFormStart = bytFormStart & ChrB(Asc(Mid(strFormStart, lngCount, 1)))
    Next
    rs("FormData").AppendChunk bytFormStart & ChrB(0)
    bytFormStart = rs("formData").GetChunk(Len(strFormStart))
    rs("FormData") = ""

    For lngCount = 1 To Len(strFormEnd)
    bytFormEnd = bytFormEnd & ChrB(Asc(Mid(strFormEnd, lngCount, 1)))
    Next
    rs("FormData").AppendChunk bytFormEnd & ChrB(0)
    bytFormEnd = rs("formData").GetChunk(Len(strFormEnd))
    rs("FormData") = ""

    rs("FormData").AppendChunk bytFormStart
    rs("FormData").AppendChunk bytFile
    rs("FormData").AppendChunk bytFormEnd
    bytFormData = rs("FormData")
    rs.Close

    BuildFormDataWithFile = bytFormData
End Function

Private Function ErrorsNumerationBugFix(validationLog As String) As String
    Dim regEx As New RegExp
    Dim withoutColumn As String
    Dim rowIncrement As String
    
    regEx.MultiLine = True
    regEx.Global = True
    
    regEx.Pattern = ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0"
    withoutColumn = regEx.Replace(validationLog, "")
    
    regEx.Pattern = "|fffd||fffd||fffd||fffd||fffd||fffd| [0-9]+"
    Dim matches As IMatchCollection2
    Set matches = regEx.Execute(withoutColumn)
    
    regEx.Global = False

    If regEx.Test(withoutColumn) Then
        Dim rowNumber As Long
        rowIncrement = withoutColumn
        Dim i: For i = 0 To matches.Count - 1
            rowNumber = Replace(matches.Item(i), "|fffd||fffd||fffd||fffd||fffd||fffd| ", "")
            rowIncrement = regEx.Replace(rowIncrement, "AwordRowA " & rowNumber + 1)
        Next
    End If
    
    regEx.Global = True
    regEx.Pattern = "AwordRowA"
    ErrorsNumerationBugFix = regEx.Replace(rowIncrement, "|fffd||fffd||fffd||fffd||fffd||fffd|")
End Function

Private Sub CatchRequestErrors(ByRef request As WinHttpRequest, Optional data As Variant)
    On Error GoTo errorHandler
    
    If IsMissing(data) Then
        request.Send
    Else
        request.Send data
    End If
    
    On Error GoTo 0
SubExit:
  Exit Sub
    
errorHandler:
    Utils.ShowError "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Unload UploadForm
    End
End Sub
Attribute VB_Name = "UploadForm"
Attribute VB_Base = "0{D451C188-A6E7-294C-9330-7EAFAA43663F}{592D567C-CEFD-BC4E-9429-0C25F0E2FD1B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Activate()
    Application.screenUpdating = False
    Application.Cursor = xlNorthwestArrow
    
    Me.LabelProgress.Width = 0
    Me.LabelProgress.BackColor = YaConst.SuccessColor
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
    Upload.SendFeedToMarket
    Unload Me
End Sub

Sub UpdateProgressBar(PctDone As Single)
    With Me
        .FrameProgress.Caption = Format(PctDone, "0%")
        .LabelProgress.Width = PctDone * (.FrameProgress.Width - 15)
    End With
    DoEvents
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        End
    End If
End Sub

Private Sub UserForm_Terminate()
    Application.screenUpdating = True
    Application.Cursor = xlDefault
End Sub

Attribute VB_Name = "Utils"
Option Explicit
Option Private Module

Public Function NumeralEndind(number As Long, endings As Variant) As String
    Dim cases As Variant
    cases = Array(2, 0, 1, 1, 1, 2)
    NumeralEndind = endings(IIf(number Mod 100 > 4 And number Mod 100 < 20, 2, cases(Application.min(Array(number Mod 10, 5)))))
End Function

Public Function TextWidth(sString As String) As Single
    Unload AccessoryForm
    AccessoryForm.SizeLabel.Caption = sString
    TextWidth = AccessoryForm.SizeLabel.Width
End Function

Public Function TextHeight(sString As String) As Single
    Unload AccessoryForm
    AccessoryForm.SizeLabel.Caption = sString
    TextHeight = AccessoryForm.SizeLabel.height
End Function

Public Function GetLetterByColumnIndex(index As Long) As String
    GetLetterByColumnIndex = Split(cells(1, index).Address(True, False), "$")(0)
End Function

Public Sub ShowError(message As String)
    MsgBox message, vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Public Function ToHex(var() As Byte) As String
    Dim i: For i = 0 To UBound(var)
        ToHex = ToHex & Right("0" & VBA.Hex$(var(i)), 2)
    Next
End Function

Public Function GetUsedRange(sheet As Worksheet) As Range
    Dim firstCell As Range
    Dim lastCell As Range
    
    Set firstCell = sheet.usedRange.cells(1, 1)
    Set lastCell = sheet.usedRange.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious)
    
    Set GetUsedRange = sheet.Range(firstCell.Address, GetLetterByColumnIndex(sheet.Range(HeadersRange).Columns.Count) & lastCell.Row)
End Function

Public Function GetLastCellInRange(cells As Range) As Range
    Set GetLastCellInRange = cells.cells.SpecialCells(xlCellTypeLastCell)
End Function
Attribute VB_Name = "ValidationForm"
Attribute VB_Base = "0{9D23EA99-D6A5-B94A-B840-AEB821DC762A}{9D88D165-023C-3D4D-AC00-97C34878614A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private pValidationStartTime As Single
Private pLastEstimateUpdateTime As Single

Private Sub OkCommandButton_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    Application.screenUpdating = False
    Application.Cursor = xlNorthwestArrow
    
    Me.LabelProgress.Width = 0
    Me.LabelProgress.BackColor = YaConst.SuccessColor
    winAPI.SetFormIcon Me.Caption, AccessoryForm.CartIcon.Picture.handle
    SetHeight 129
    pValidationStartTime = Timer
    
    Main.ValidateRange
End Sub

Sub UpdateProgressBar(PctDone As Double)
    With Me
        .FrameProgress.Caption = Format(PctDone, "0%")
        .LabelProgress.Width = PctDone * (.FrameProgress.Width - 15)
    End With
    
    UpdateEstimateTime PctDone
    
    DoEvents
End Sub

Sub ShowError(errorsCount As Long)
    Dim msg As String
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Me.FrameProgress.Caption & ". " _
        & "|fffd||fffd||fffd||fffd||fffd||fffd|" & Utils.NumeralEndind(errorsCount, Array("|fffd| ", "|fffd| ", "|fffd| ")) & errorsCount _
        & " |fffd||fffd||fffd||fffd|" & Utils.NumeralEndind(errorsCount, Array("|fffd||fffd|.", "|fffd||fffd|.", "|fffd||fffd|.")) & vbLf _
        & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & Utils.NumeralEndind(errorsCount, Array("|fffd|", "|fffd|", "|fffd|")) & " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."

    Me.LabelProgress.BackColor = YaConst.ErrorColor
    Me.InfoLabel.Caption = msg
    Me.InfoFrame.Visible = True
    SetHeight 215
    Me.OkCommandButton.SetFocus
End Sub

Sub ShowSuccess()
    Dim msg As String
    msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|." _
        & vbLf _
        & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
        
    Me.InfoLabel.Caption = msg
    Me.InfoFrame.Visible = True
    SetHeight 215
    Me.OkCommandButton.SetFocus
End Sub

Sub UpdateEstimateTime(PctDone As Double)
    If Timer > pLastEstimateUpdateTime + 10 Then
        pLastEstimateUpdateTime = Timer
        estimateTime (Timer - pValidationStartTime) * (1 / PctDone)
    End If
End Sub

Sub estimateTime(Optional time As Single)
    Dim estimateMinutes As Long
    estimateMinutes = SecondsToMinutes(time)
    
    If time = 0 Then
        Me.EstimateTimeLabel.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: 3-5 |fffd||fffd||fffd||fffd||fffd|."
    ElseIf estimateMinutes = 0 Then
        Me.EstimateTimeLabel.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
    Else
        Me.EstimateTimeLabel.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & estimateMinutes & " |fffd||fffd||fffd||fffd||fffd|" & Utils.NumeralEndind(estimateMinutes, Array("|fffd|.", "|fffd|.", "."))
    End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Application.screenUpdating = True
    Application.Cursor = xlDefault
    
    If CloseMode = 0 Then
        End
    End If
End Sub


Private Function SecondsToMinutes(time As Single) As Integer
    SecondsToMinutes = time / 60
End Function

Private Sub SetHeight(height As Integer)
    Dim screenUpdating As Boolean
    screenUpdating = Application.screenUpdating
    Application.screenUpdating = True
    DoEvents
    Me.height = height
    Me.Repaint
    DoEvents
    Application.screenUpdating = screenUpdating
End Sub

Attribute VB_Name = "WinCryptoAPI"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If VBA7 Then
Private Const ALG_CLASS_ANY             As Long = 0
Private Const ALG_CLASS_SIGNATURE       As Long = (1 * 2 ^ 13)
Private Const ALG_CLASS_MSG_ENCRYPT     As Long = (2 * 2 ^ 13)
Private Const ALG_CLASS_DATA_ENCRYPT    As Long = (3 * 2 ^ 13)
Private Const ALG_CLASS_HASH            As Long = (4 * 2 ^ 13)
Private Const ALG_CLASS_KEY_EXCHANGE    As Long = (5 * 2 ^ 13)

Private Const ALG_TYPE_ANY              As Long = 0
Private Const ALG_TYPE_DSS              As Long = (1 * 2 ^ 9)
Private Const ALG_TYPE_RSA              As Long = (2 * 2 ^ 9)
Private Const ALG_TYPE_BLOCK            As Long = (3 * 2 ^ 9)
Private Const ALG_TYPE_STREAM           As Long = (4 * 2 ^ 9)
Private Const ALG_TYPE_DH               As Long = (5 * 2 ^ 9)
Private Const ALG_TYPE_SECURECHANNEL    As Long = (6 * 2 ^ 9)

Private Const ALG_SID_ANY               As Long = 0
Private Const ALG_SID_3DES              As Long = 3
Private Const ALG_SID_3DES_112          As Long = 9
Private Const ALG_SID_AGREED_KEY_ANY    As Long = 3
Private Const ALG_SID_CAST              As Long = 6
Private Const ALG_SID_CYLINK_MEK        As Long = 12
Private Const ALG_SID_DES               As Long = 1
Private Const ALG_SID_DESX              As Long = 4
Private Const ALG_SID_DH_EPHEM          As Long = 2
Private Const ALG_SID_DH_SANDF          As Long = 1
Private Const ALG_SID_DSS_ANY           As Long = 0
Private Const ALG_SID_DSS_DMS           As Long = 2
Private Const ALG_SID_DSS_PKCS          As Long = 1
Private Const ALG_SID_EXAMPLE           As Long = 80
Private Const ALG_SID_HMAC              As Long = 9
Private Const ALG_SID_IDEA              As Long = 5
Private Const ALG_SID_KEA               As Long = 4
Private Const ALG_SID_MAC               As Long = 5
Private Const ALG_SID_MD2               As Long = 1
Private Const ALG_SID_MD4               As Long = 2
Private Const ALG_SID_MD5               As Long = 3
Private Const ALG_SID_PCT1_MASTER       As Long = 4
Private Const ALG_SID_RC2               As Long = 2
Private Const ALG_SID_RC4               As Long = 1
Private Const ALG_SID_RC5               As Long = 13
Private Const ALG_SID_RIPEMD            As Long = 6
Private Const ALG_SID_RIPEMD160         As Long = 7
Private Const ALG_SID_RSA_ANY           As Long = 0
Private Const ALG_SID_RSA_ENTRUST       As Long = 3
Private Const ALG_SID_RSA_MSATWORK      As Long = 2
Private Const ALG_SID_RSA_PGP           As Long = 4
Private Const ALG_SID_SAFERSK128        As Long = 8
Private Const ALG_SID_SAFERSK64         As Long = 7
Private Const ALG_SID_SCHANNEL_ENC_KEY  As Long = 7
Private Const ALG_SID_SCHANNEL_MAC_KEY  As Long = 3
Private Const ALG_SID_SCHANNEL_MASTER_HASH As Long = 2
Private Const ALG_SID_SEAL              As Long = 2
Private Const ALG_SID_SHA               As Long = 4
Private Const ALG_SID_SHA1              As Long = 4
Private Const ALG_SID_SKIPJACK          As Long = 10
Private Const ALG_SID_SSL2_MASTER       As Long = 5
Private Const ALG_SID_SSL3_MASTER       As Long = 1
Private Const ALG_SID_SSL3SHAMD5        As Long = 8
Private Const ALG_SID_TEK               As Long = 11
Private Const ALG_SID_TLS1_MASTER       As Long = 6
Private Const ALG_SID_TLS1PRF           As Long = 10


Enum CALG_ID
    CALG_3DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
    CALG_3DES_112 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES_112)
    CALG_CYLINK_MEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_CYLINK_MEK)
    CALG_DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DES)
    CALG_DESX = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DESX)
    CALG_RC2 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC2)
    CALG_RC4 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_RC4)
    CALG_RC5 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC5)
    CALG_SEAL = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_SEAL)
    CALG_SKIPJACK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_SKIPJACK)
    CALG_TEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_TEK)
    
    CALG_AGREEDKEY_ANY = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_AGREED_KEY_ANY)
    CALG_DH_EPHEM = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_EPHEM)
    CALG_DH_SF = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_SANDF)
    CALG_HUGHES_MD5 = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_ANY Or ALG_SID_MD5)
    CALG_KEA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_KEA)
    CALG_RSA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
    
    CALG_DSS_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_DSS Or ALG_SID_DSS_ANY)
    CALG_RSA_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
    
    CALG_PCT1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_PCT1_MASTER)
    CALG_SCHANNEL_ENC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_ENC_KEY)
    CALG_SCHANNEL_MAC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MAC_KEY)
    CALG_SCHANNEL_MASTER_HASH = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MASTER_HASH)
    CALG_SSL2_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL2_MASTER)
    CALG_SSL3_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL3_MASTER)
    CALG_TLS1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_TLS1_MASTER)
    
    CALG_HMAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_HMAC)
    CALG_MAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MAC)
    CALG_MD2 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD2)
    CALG_MD4 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD4)
    CALG_MD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD5)
    CALG_SHA = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA)
    CALG_SHA1 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
    CALG_SSL3_SHAMD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SSL3SHAMD5)
    CALG_TLS1PRF = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_TLS1PRF)
End Enum

Private Declare PtrSafe Function CryptAcquireContext Lib "advapi32.dll" Alias "CryptAcquireContextA" (phProv As LongPtr, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As LongPtr, ByVal dwFlags As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptReleaseContext Lib "advapi32.dll" (hProv As LongPtr, dwFlags As LongPtr) As LongPtr
Private Const PROV_RSA_FULL         As LongPtr = 1
Private Const NTE_BAD_KEYSET        As LongPtr = &H80090016
Private Const CRYPT_NEWKEYSET       As LongPtr = &H8

Private Declare PtrSafe Function CryptCreateHash Lib "advapi32.dll" (ByVal hProv As LongPtr, ByVal algid As LongPtr, ByVal hKey As LongPtr, ByVal dwFlags As LongPtr, phHash As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptDestroyHash Lib "advapi32.dll" (hhash As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptHashData Lib "advapi32.dll" (ByVal hhash As LongPtr, ByVal pbData As Any, ByVal dwDataLen As LongPtr, ByVal dwFlags As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptGetHashParam Lib "advapi32.dll" (ByVal hhash As LongPtr, ByVal dwParam As LongPtr, pbyte As Any, pdwDataLen As LongPtr, ByVal dwFlags As LongPtr) As LongPtr
Private Const PP_NAME               As LongPtr = 4
Private Const PP_CONTAINER          As LongPtr = 6
Private Const HP_HASHSIZE           As LongPtr = &H4
Private Const HP_HASHVAL            As LongPtr = &H2

Private Declare PtrSafe Function CryptDeriveKey Lib "advapi32.dll" (ByVal hProv As LongPtr, ByVal algid As LongPtr, ByVal hBaseData As LongPtr, ByVal dwFlags As LongPtr, phKey As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptDestroyKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As LongPtr
Private Const CRYPT_EXPORTABLE      As LongPtr = &H1

Private Declare PtrSafe Function CryptEncrypt Lib "advapi32.dll" (ByVal hKey As LongPtr, ByVal hhash As LongPtr, ByVal Final As LongPtr, ByVal dwFlags As LongPtr, pbData As Any, pdwDataLen As LongPtr, ByVal dwBufLen As LongPtr) As LongPtr
Private Declare PtrSafe Function CryptDecrypt Lib "advapi32.dll" (ByVal hKey As LongPtr, ByVal hhash As LongPtr, ByVal Final As LongPtr, ByVal dwFlags As LongPtr, pbData As Any, pdwDataLen As LongPtr) As LongPtr

Private Declare PtrSafe Sub RtlMoveMemory Lib "kernel32.dll" (Destination As Any, source As Any, ByVal length As LongPtr)

Private providerHandle   As LongPtr
Private hashHandle   As LongPtr
Private keyHandle    As LongPtr
Const ProvType  As LongPtr = PROV_RSA_FULL

Private Sub Class_Initialize()
    If CryptAcquireContext(providerHandle, vbNullString, vbNullString, ProvType, 0&) = 0 Then
        If Err.LastDllError = NTE_BAD_KEYSET Then
            If CryptAcquireContext(providerHandle, vbNullString, vbNullString, ProvType, CRYPT_NEWKEYSET) = 0 Then
                Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        Else
            Utils.ShowError "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
End Sub

Private Sub Class_Terminate()
    If keyHandle <> 0 Then CryptDestroyKey keyHandle
    If hashHandle <> 0 Then CryptDestroyHash hashHandle
    If providerHandle <> 0 Then CryptReleaseContext providerHandle, 0&
End Sub

Public Function EncryptString(data As String, Optional pwd As String) As String
    If data = "" Or pwd = "" Then Exit Function
    EncryptString = EncryptDecryptString("Encrypt", CALG_3DES, data, pwd)
End Function

Public Function DecryptString(data As String, Optional pwd As String) As String
    If data = "" Or pwd = "" Then Exit Function
    DecryptString = EncryptDecryptString("Decrypt", CALG_3DES, data, pwd)
End Function

Private Function EncryptDecryptString(op As String, CALG As CALG_ID, data As String, pwd As String) As String
    Dim buffer() As Byte
    Dim dataLen As LongPtr
    Dim Bytes() As Byte
    
    CreateKey CALG, pwd
    Bytes = data
    dataLen = UBound(Bytes) + 1
    ReDim buffer(CVar(dataLen) * 2)
    
    RtlMoveMemory buffer(0), Bytes(0), dataLen
    If op = "Encrypt" Then
        If CryptEncrypt(keyHandle, 0&, 1&, 0&, buffer(0), dataLen, UBound(buffer) + 1) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        If CryptDecrypt(keyHandle, 0&, 1&, 0&, buffer(0), dataLen) = 0 Then
            Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
            Exit Function
        End If
    End If
    ReDim Preserve buffer(CVar(dataLen) - 1)
    
    EncryptDecryptString = CStr(buffer)
End Function

Private Function CreateKey(CALG As CALG_ID, pwd As String)
    MD5Hash pwd
    If CryptDeriveKey(providerHandle, CALG, hashHandle, CRYPT_EXPORTABLE, keyHandle) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
End Function

Private Function CreateHash(CALG As CALG_ID)
    If (CALG And ALG_CLASS_HASH) <> ALG_CLASS_HASH Then Utils.ShowError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If CryptCreateHash(providerHandle, CALG, 0&, 0&, hashHandle) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
End Function

Private Function GetHash() As Byte()
    Dim buffer() As Byte
    Dim dataLen As LongPtr
    
    If CryptGetHashParam(hashHandle, HP_HASHSIZE, dataLen, LenB(dataLen), 0) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    
    ReDim buffer(CVar(dataLen) - 1)
    If CryptGetHashParam(hashHandle, HP_HASHVAL, buffer(0), dataLen, 0) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
    
    GetHash = buffer
End Function

Public Function MD5Hash(data As String) As String
    Dim buffer As String
    buffer = data
    
    CreateHash CALG_MD5
    If CryptHashData(hashHandle, buffer, Len(buffer), 0&) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

    MD5Hash = Utils.ToHex(GetHash())
End Function
'============================ Legacy ============================
#Else


Private Const ALG_CLASS_ANY             As Long = 0
Private Const ALG_CLASS_SIGNATURE       As Long = (1 * 2 ^ 13)
Private Const ALG_CLASS_MSG_ENCRYPT     As Long = (2 * 2 ^ 13)
Private Const ALG_CLASS_DATA_ENCRYPT    As Long = (3 * 2 ^ 13)
Private Const ALG_CLASS_HASH            As Long = (4 * 2 ^ 13)
Private Const ALG_CLASS_KEY_EXCHANGE    As Long = (5 * 2 ^ 13)

Private Const ALG_TYPE_ANY              As Long = 0
Private Const ALG_TYPE_DSS              As Long = (1 * 2 ^ 9)
Private Const ALG_TYPE_RSA              As Long = (2 * 2 ^ 9)
Private Const ALG_TYPE_BLOCK            As Long = (3 * 2 ^ 9)
Private Const ALG_TYPE_STREAM           As Long = (4 * 2 ^ 9)
Private Const ALG_TYPE_DH               As Long = (5 * 2 ^ 9)
Private Const ALG_TYPE_SECURECHANNEL    As Long = (6 * 2 ^ 9)

Private Const ALG_SID_ANY               As Long = 0
Private Const ALG_SID_3DES              As Long = 3
Private Const ALG_SID_3DES_112          As Long = 9
Private Const ALG_SID_AGREED_KEY_ANY    As Long = 3
Private Const ALG_SID_CAST              As Long = 6
Private Const ALG_SID_CYLINK_MEK        As Long = 12
Private Const ALG_SID_DES               As Long = 1
Private Const ALG_SID_DESX              As Long = 4
Private Const ALG_SID_DH_EPHEM          As Long = 2
Private Const ALG_SID_DH_SANDF          As Long = 1
Private Const ALG_SID_DSS_ANY           As Long = 0
Private Const ALG_SID_DSS_DMS           As Long = 2
Private Const ALG_SID_DSS_PKCS          As Long = 1
Private Const ALG_SID_EXAMPLE           As Long = 80
Private Const ALG_SID_HMAC              As Long = 9
Private Const ALG_SID_IDEA              As Long = 5
Private Const ALG_SID_KEA               As Long = 4
Private Const ALG_SID_MAC               As Long = 5
Private Const ALG_SID_MD2               As Long = 1
Private Const ALG_SID_MD4               As Long = 2
Private Const ALG_SID_MD5               As Long = 3
Private Const ALG_SID_PCT1_MASTER       As Long = 4
Private Const ALG_SID_RC2               As Long = 2
Private Const ALG_SID_RC4               As Long = 1
Private Const ALG_SID_RC5               As Long = 13
Private Const ALG_SID_RIPEMD            As Long = 6
Private Const ALG_SID_RIPEMD160         As Long = 7
Private Const ALG_SID_RSA_ANY           As Long = 0
Private Const ALG_SID_RSA_ENTRUST       As Long = 3
Private Const ALG_SID_RSA_MSATWORK      As Long = 2
Private Const ALG_SID_RSA_PGP           As Long = 4
Private Const ALG_SID_SAFERSK128        As Long = 8
Private Const ALG_SID_SAFERSK64         As Long = 7
Private Const ALG_SID_SCHANNEL_ENC_KEY  As Long = 7
Private Const ALG_SID_SCHANNEL_MAC_KEY  As Long = 3
Private Const ALG_SID_SCHANNEL_MASTER_HASH As Long = 2
Private Const ALG_SID_SEAL              As Long = 2
Private Const ALG_SID_SHA               As Long = 4
Private Const ALG_SID_SHA1              As Long = 4
Private Const ALG_SID_SKIPJACK          As Long = 10
Private Const ALG_SID_SSL2_MASTER       As Long = 5
Private Const ALG_SID_SSL3_MASTER       As Long = 1
Private Const ALG_SID_SSL3SHAMD5        As Long = 8
Private Const ALG_SID_TEK               As Long = 11
Private Const ALG_SID_TLS1_MASTER       As Long = 6
Private Const ALG_SID_TLS1PRF           As Long = 10


Enum CALG_ID
    CALG_3DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
    CALG_3DES_112 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES_112)
    CALG_CYLINK_MEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_CYLINK_MEK)
    CALG_DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DES)
    CALG_DESX = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_DESX)
    CALG_RC2 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC2)
    CALG_RC4 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_RC4)
    CALG_RC5 = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_RC5)
    CALG_SEAL = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_STREAM Or ALG_SID_SEAL)
    CALG_SKIPJACK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_SKIPJACK)
    CALG_TEK = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_TEK)
    
    CALG_AGREEDKEY_ANY = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_AGREED_KEY_ANY)
    CALG_DH_EPHEM = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_EPHEM)
    CALG_DH_SF = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_DH_SANDF)
    CALG_HUGHES_MD5 = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_ANY Or ALG_SID_MD5)
    CALG_KEA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_DH Or ALG_SID_KEA)
    CALG_RSA_KEYX = (ALG_CLASS_KEY_EXCHANGE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
    
    CALG_DSS_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_DSS Or ALG_SID_DSS_ANY)
    CALG_RSA_SIGN = (ALG_CLASS_SIGNATURE Or ALG_TYPE_RSA Or ALG_SID_RSA_ANY)
    
    CALG_PCT1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_PCT1_MASTER)
    CALG_SCHANNEL_ENC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_ENC_KEY)
    CALG_SCHANNEL_MAC_KEY = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MAC_KEY)
    CALG_SCHANNEL_MASTER_HASH = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SCHANNEL_MASTER_HASH)
    CALG_SSL2_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL2_MASTER)
    CALG_SSL3_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_SSL3_MASTER)
    CALG_TLS1_MASTER = (ALG_CLASS_MSG_ENCRYPT Or ALG_TYPE_SECURECHANNEL Or ALG_SID_TLS1_MASTER)
    
    CALG_HMAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_HMAC)
    CALG_MAC = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MAC)
    CALG_MD2 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD2)
    CALG_MD4 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD4)
    CALG_MD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD5)
    CALG_SHA = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA)
    CALG_SHA1 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
    CALG_SSL3_SHAMD5 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SSL3SHAMD5)
    CALG_TLS1PRF = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_TLS1PRF)
End Enum

Private Declare Function CryptAcquireContext Lib "advapi32.dll" Alias "CryptAcquireContextA" (phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptReleaseContext Lib "advapi32.dll" (hProv As Long, dwFlags As Long) As Long
Private Const PROV_RSA_FULL         As Long = 1
Private Const NTE_BAD_KEYSET        As Long = &H80090016
Private Const CRYPT_NEWKEYSET       As Long = &H8

Private Declare Function CryptCreateHash Lib "advapi32.dll" (ByVal hProv As Long, ByVal algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, phHash As Long) As Long
Private Declare Function CryptDestroyHash Lib "advapi32.dll" (hhash As Long) As Long
Private Declare Function CryptHashData Lib "advapi32.dll" (ByVal hhash As Long, ByVal pbData As Any, ByVal dwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGetHashParam Lib "advapi32.dll" (ByVal hhash As Long, ByVal dwParam As Long, pbyte As Any, pdwDataLen As Long, ByVal dwFlags As Long) As Long
Private Const PP_NAME               As Long = 4
Private Const PP_CONTAINER          As Long = 6
Private Const HP_HASHSIZE           As Long = &H4
Private Const HP_HASHVAL            As Long = &H2

Private Declare Function CryptDeriveKey Lib "advapi32.dll" (ByVal hProv As Long, ByVal algid As Long, ByVal hBaseData As Long, ByVal dwFlags As Long, phKey As Long) As Long
Private Declare Function CryptDestroyKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Private Const CRYPT_EXPORTABLE      As Long = &H1

Private Declare Function CryptEncrypt Lib "advapi32.dll" (ByVal hKey As Long, ByVal hhash As Long, ByVal Final As Long, ByVal dwFlags As Long, pbData As Any, pdwDataLen As Long, ByVal dwBufLen As Long) As Long
Private Declare Function CryptDecrypt Lib "advapi32.dll" (ByVal hKey As Long, ByVal hhash As Long, ByVal Final As Long, ByVal dwFlags As Long, pbData As Any, pdwDataLen As Long) As Long

Private Declare Sub RtlMoveMemory Lib "kernel32.dll" (Destination As Any, source As Any, ByVal length As Long)

Private providerHandle   As Long
Private hashHandle   As Long
Private keyHandle    As Long
Const ProvType  As Long = PROV_RSA_FULL

Private Sub Class_Initialize()
    If CryptAcquireContext(providerHandle, vbNullString, vbNullString, ProvType, 0&) = 0 Then
        If Err.LastDllError = NTE_BAD_KEYSET Then
            If CryptAcquireContext(providerHandle, vbNullString, vbNullString, ProvType, CRYPT_NEWKEYSET) = 0 Then
                Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        Else
            Utils.ShowError "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
End Sub

Private Sub Class_Terminate()
    If keyHandle <> 0 Then CryptDestroyKey keyHandle
    If hashHandle <> 0 Then CryptDestroyHash hashHandle
    If providerHandle <> 0 Then CryptReleaseContext providerHandle, 0&
End Sub

Public Function EncryptString(data As String, Optional pwd As String) As String
    If data = "" Or pwd = "" Then Exit Function
    EncryptString = EncryptDecryptString("Encrypt", CALG_3DES, data, pwd)
End Function

Public Function DecryptString(data As String, Optional pwd As String) As String
    If data = "" Or pwd = "" Then Exit Function
    DecryptString = EncryptDecryptString("Decrypt", CALG_3DES, data, pwd)
End Function

Private Function EncryptDecryptString(op As String, CALG As CALG_ID, data As String, pwd As String) As String
    Dim buffer() As Byte
    Dim dataLen As Long
    Dim Bytes() As Byte
    
    CreateKey CALG, pwd
    Bytes = data
    dataLen = UBound(Bytes) + 1
    ReDim buffer(dataLen * 2)
    
    RtlMoveMemory buffer(0), Bytes(0), dataLen
    If op = "Encrypt" Then
        If CryptEncrypt(keyHandle, 0&, 1&, 0&, buffer(0), dataLen, UBound(buffer) + 1) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
        If CryptDecrypt(keyHandle, 0&, 1&, 0&, buffer(0), dataLen) = 0 Then
            Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
            Exit Function
        End If
    End If
    ReDim Preserve buffer(dataLen - 1)
    
    EncryptDecryptString = CStr(buffer)
End Function

Private Function CreateKey(CALG As CALG_ID, pwd As String)
    MD5Hash pwd
    If CryptDeriveKey(providerHandle, CALG, hashHandle, CRYPT_EXPORTABLE, keyHandle) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
End Function

Private Function CreateHash(CALG As CALG_ID)
    If (CALG And ALG_CLASS_HASH) <> ALG_CLASS_HASH Then Utils.ShowError "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    If CryptCreateHash(providerHandle, CALG, 0&, 0&, hashHandle) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
End Function

Private Function GetHash() As Byte()
    Dim buffer() As Byte
    Dim dataLen As Long
    
    If CryptGetHashParam(hashHandle, HP_HASHSIZE, dataLen, LenB(dataLen), 0) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    
    ReDim buffer(dataLen - 1)
    If CryptGetHashParam(hashHandle, HP_HASHVAL, buffer(0), dataLen, 0) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|"
    
    GetHash = buffer
End Function

Public Function MD5Hash(data As String) As String
    Dim buffer As String
    buffer = data
    
    CreateHash CALG_MD5
    If CryptHashData(hashHandle, buffer, Len(buffer), 0&) = 0 Then Utils.ShowError "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

    MD5Hash = Utils.ToHex(GetHash())
End Function

#End If
Attribute VB_Name = "YaConst"
Private pHeaders As Dictionary
Private pHeadersAddresses As Dictionary

'Compile constants
#Const CBooksTemplateType = 1
#Const CMusicTemplateType = 2
#Const CSimplifiedTemplateType = 3
#Const CSkuTemplateType = 4
#Const CStorageTemplateType = 5
#Const CThisTemplateType = CSkuTemplateType

' Templates types
Public Const BooksTemplateType As Integer = 1
Public Const MusicTemplateType As Integer = 2
Public Const SimplifiedTemplateType As Integer = 3
Public Const SkuTemplateType As Integer = 4
Public Const StorageTemplateType As Integer = 5

' General constaints
Public Const ErrorsSheetName As String = "ErrorsStorage"
Public Const AccessorySheetName As String = "AccessoryStorage"
Public Const ClientId As String = "5d982bbd1c9f46738ec3ec3fcd9c776f"
Public Const MaxRequestsForValidationResult As Integer = 30
Public Const RequestDelayForValidationResult As Integer = 10
Public Const CellsCountForCalculateEstimateTime As Integer = 500
Public Const MaxEstimateTimeInSeconds As Integer = 180
Public Const MaxValidateWithErrorsTimeInSeconds As Integer = 180
Public Const MaxUploadCouner As Integer = 999

' Colors
Public Const ErrorColor As Long = 4343797 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Const SuccessColor As Long = 2535523 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Const LinkColor As Long = 14175051 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Const ErrorColorIndex As Long = 3 ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public Const ErrorColorIndexEq As Long = 255 ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public Const CellBordersColor As Long = 15

' HTTP constaints
Public Const ResponseCharset As String = "Utf-8"
Public Const CampaignMask As String = "{campaignId}"
Public Const ClientIdMask As String = "{clientId}"
Public Const TokenMask As String = "{token}"
Public Const UploadIdMask As String = "{uploadId}"
Public Const ValidationIdMask As String = "{validationId}"
Public Const ExcelVersionMask As String = "{excelVersion}"
Public Const OsTypeMask As String = "{osType}"

Public Const Boundary As String = "YandexBoundaryQLdOmdiAgQMBpodknY"
Public Const UploadFileField As String = "file"

Public Const FileUploadUrl As String = "https://api.partner.market.yandex.ru/campaigns/" & CampaignMask & "/feeds/upload.xml?oauth_token=" & TokenMask & "&oauth_client_id=" & ClientIdMask
Public Const FileValidationUrl As String = "https://api.partner.market.yandex.ru/campaigns/" & CampaignMask & "/feeds/upload/" & UploadIdMask & "/validate.xml?oauth_token=" & TokenMask & "&oauth_client_id=" & ClientIdMask
Public Const ValidationResultUrl As String = "https://api.partner.market.yandex.ru/campaigns/" & CampaignMask & "/feeds/validation/" & ValidationIdMask & ".xml?oauth_token=" & TokenMask & "&oauth_client_id=" & ClientIdMask
Public Const ApplyFeedUrl As String = "https://api.partner.market.yandex.ru/campaigns/" & CampaignMask & "/feeds/" & ValidationIdMask & ".xml?oauth_token=" & TokenMask & "&oauth_client_id=" & ClientIdMask & "&osType=" & OsTypeMask & "&excelVersion=" & ExcelVersionMask

' Headers
Public Const IdH As String = "id*"
Public Const StatusH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const DeliveryH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const DeliveryCostH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const DeliveryDaysH As String = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const PickUpH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const InStoreH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const UrlH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const VendorH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const NameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const CategoryH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const PriceH As String = "|fffd||fffd||fffd||fffd|*"
Public Const OldPriceH As String = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CurrencyH As String = "|fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const PicUrlH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const DescriptionH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const ParamH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SalesNotesH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const VendorWarrantyH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const VendorCountryH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const BarcodeH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const BidH As String = "bid"
Public Const CbidH As String = "cbid"

' Additional books headers
Public Const AuthorH As String = "|fffd||fffd||fffd||fffd||fffd|"
Public Const PublisherH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SeriesH As String = "|fffd||fffd||fffd||fffd||fffd|"
Public Const YearH As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const IsbnH As String = "ISBN*"
Public Const VolumeH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Public Const PartH As String = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
Public Const LangH As String = "|fffd||fffd||fffd||fffd|"
Public Const ContentsH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const TypeH As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*"
Public Const PagesH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' Additional music headers
Public Const CountryH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const ArtistH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const StarringH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const OriginalNameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MediaH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const DirectorH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

' Additional sku headers
Public Const ProductDescriptionH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SkuIdH As String = "|fffd||fffd||fffd| SKU"
Public Const SkuNameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CategoryNameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SkuUrlH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const barcodesH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const StorePriceH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
Public Const NdsH As String = "|fffd||fffd||fffd|"
Public Const RecommendedSkuIdH As String = "SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const SkuIsRemoveH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Public Const CommentH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MarketModelNameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MarketCategoryNameH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MarketSkuIdH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MarketSkuLinkH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const RecommendedPriceH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"

Public Const TradeMarkH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Public Const ManufacturerH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CountryOfOriginH As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const ValidityDaysH As String = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const ServiceDaysH As String = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const WarrantyDaysH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| c|fffd||fffd||fffd|"
Public Const TransportUnitH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MinDeliveryPiecesH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const QuantumH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const DeliveryWeekdaysH As String = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const LeadTimeH As String = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const MaxOldPriceH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

' Additional store headers
Public Const CountInPackH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const UnitPriceH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|."
Public Const UnitSpaceH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
Public Const CommentForStoreH As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"

#If CThisTemplateType = CSimplifiedTemplateType Then
' General constaints
Public Const SheetForValidationName As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CommandBarName As String = "YaCommandBar"
Public Const ThisTemplateType As Integer = SimplifiedTemplateType

' Table map constaints
Public Const dataStartCell As String = "A3"
Public Const HeadersRange As String = "A2:W2"
Public Const LockHeadersRange As String = "A2:W2"
Public Const FirstDataColumnIndex As Integer = 1

Public Property Get Headers() As Dictionary
    If pHeaders Is Nothing Then
        Dim dict As New Dictionary
        With dict
            .Add "$A$2", "id*"
            .Add "$B$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$E$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$F$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$G$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$I$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$J$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$K$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$L$2", "|fffd||fffd||fffd||fffd|*"
            .Add "$M$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$N$2", "|fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$O$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$P$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Q$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$R$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$S$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$T$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$U$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$V$2", "bid"
            .Add "$W$2", "cbid"
        End With
        Set pHeaders = dict
    End If
    Set Headers = pHeaders
End Property

#ElseIf CThisTemplateType = CBooksTemplateType Then
' General constaints
Public Const SheetForValidationName As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CommandBarName As String = "BooksYaCommandBar"
Public Const ThisTemplateType As Integer = BooksTemplateType

' Table map constaints
Public Const dataStartCell As String = "A3"
Public Const HeadersRange As String = "A2:AG2"
Public Const LockHeadersRange As String = "A2:AG2"
Public Const FirstDataColumnIndex As Integer = 1

Public Property Get Headers() As Dictionary
    If pHeaders Is Nothing Then
        Dim dict As New Dictionary
        With dict
            .Add "$A$2", "id*"
            .Add "$B$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$E$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$F$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$G$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$I$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$J$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$K$2", "|fffd||fffd||fffd||fffd|*"
            .Add "$L$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$M$2", "|fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$N$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$O$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$P$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Q$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$R$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$S$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$T$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$U$2", "|fffd||fffd||fffd||fffd||fffd|"
            .Add "$V$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$W$2", "|fffd||fffd||fffd||fffd||fffd|"
            .Add "$X$2", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Y$2", "ISBN*"
            .Add "$Z$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AA$2", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$AB$2", "|fffd||fffd||fffd||fffd|"
            .Add "$AC$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AD$2", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$AE$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AF$2", "bid"
            .Add "$AG$2", "cbid"
        End With
        Set pHeaders = dict
    End If
    Set Headers = pHeaders
End Property
#ElseIf CThisTemplateType = CMusicTemplateType Then
' General constaints
Public Const SheetForValidationName As String = "|fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CommandBarName As String = "MusicYaCommandBar"
Public Const ThisTemplateType As Integer = MusicTemplateType

' Table map constaints
Public Const dataStartCell As String = "A3"
Public Const HeadersRange As String = "A2:AD2"
Public Const LockHeadersRange As String = "A2:AD2"
Public Const FirstDataColumnIndex As Integer = 1

Public Property Get Headers() As Dictionary
    If pHeaders Is Nothing Then
        Dim dict As New Dictionary
        With dict
            .Add "$A$2", "id*"
            .Add "$B$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$E$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$F$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$G$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$I$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$J$2", "|fffd||fffd||fffd||fffd|*"
            .Add "$K$2", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$L$2", "|fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$M$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$N$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$O$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$P$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Q$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$R$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$S$2", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$T$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$U$2", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$V$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$W$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$X$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|*"
            .Add "$Y$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Z$2", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AA$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AB$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AC$2", "bid"
            .Add "$AD$2", "cbid"
        End With
        Set pHeaders = dict
    End If
    Set Headers = pHeaders
End Property

#ElseIf CThisTemplateType = CSkuTemplateType Then
' General constaints
Public Const SheetForValidationName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CommandBarName As String = "SkuYaCommandBar"
Public Const ThisTemplateType As Integer = SkuTemplateType

' Table map constaints
Public Const dataStartCell As String = "A5"
Public Const HeadersRange As String = "A3:AM3"
Public Const LockHeadersRange As String = "A3:AM4"
Public Const FirstDataColumnIndex As Integer = 1
'====
Public Property Get Headers() As Dictionary
    If pHeaders Is Nothing Then
        Dim dict As New Dictionary
        With dict
            .Add "$A$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$B$3", "|fffd||fffd||fffd| SKU"
            .Add "$C$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$E$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$F$3", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$G$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$3", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$I$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$J$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$K$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$L$3", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$M$3", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$N$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$O$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$P$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Q$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$R$3", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$S$3", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$T$3", "SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$U$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$V$3", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
            .Add "$W$3", "|fffd||fffd||fffd|"
            .Add "$X$3", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$Y$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$Z$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$AA$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AB$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Add "$AC$3", "|fffd||fffd||fffd||fffd| |1cc||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AD$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |1cc||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AE$3", "|fffd||fffd||fffd||fffd| |1c1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AF$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |1c1||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AG$3", "|fffd||fffd||fffd||fffd| |1cc||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AH$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |1cc||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AI$3", "|fffd||fffd||fffd||fffd| |1d3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AJ$3", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AK$3", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AL$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |1d3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AM$3", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            '====
            .Add "$A$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$B$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$4", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$F$4", "URL-|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
            .Add "$G$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$I$4", "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$K$4", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 3000 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)."
            .Add "$L$4", "|fffd| |fffd||fffd||fffd||fffd|"
            .Add "$M$4", "|fffd| |fffd||fffd||fffd||fffd|"
            .Add "$N$4", "|fffd| |fffd||fffd||fffd||fffd|"
            .Add "$O$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$P$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$Q$4", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$R$4", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$S$4", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd|)"
            .Add "$T$4", "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbLf & _
                         "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|." & vbLf & _
                         "SKU |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SKU |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$U$4", "|fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)"
            .Add "$V$4", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.  |fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$X$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AA$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SKU |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AB$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AC$4", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AD$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AE$4", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AF$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AG$4", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AH$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AI$4", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$AL$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$AM$4", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."

            
        End With
        Set pHeaders = dict
    End If
    Set Headers = pHeaders
End Property
#ElseIf CThisTemplateType = CStorageTemplateType Then
' General constaints
Public Const SheetForValidationName As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Const CommandBarName As String = "StoreYaCommandBar"
Public Const ThisTemplateType As Integer = StorageTemplateType

' Table map constaints
Public Const dataStartCell As String = "A3"
Public Const HeadersRange As String = "A1:H1"
Public Const LockHeadersRange As String = "A1:H2"
Public Const FirstDataColumnIndex As Integer = 1

Public Property Get Headers() As Dictionary
    If pHeaders Is Nothing Then
        Dim dict As New Dictionary
        With dict
            .Add "$A$1", "|fffd||fffd||fffd| SKU"
            .Add "$B$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$E$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|."
            .Add "$F$1", "|fffd||fffd||fffd|"
            .Add "$G$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            .Add "$H$1", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$A$2", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$B$2", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd| + |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$C$2", "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Add "$D$2", ""
            .Add "$E$2", ""
            .Add "$F$2", ""
            .Add "$G$2", ""
            .Add "$H$2", ""
        End With
        Set pHeaders = dict
    End If
    Set Headers = pHeaders
End Property
#End If

Public Property Get TempFileName() As String
    Dim fso As New Scripting.FileSystemObject
    TempFileName = fso.GetBaseName(ActiveWorkbook.Name) _
                    & "-" & Date & "-" _
                    & AccessoryStorage.UploadCounter
End Property

Public Property Get HeadersAddresses() As Dictionary
    If pHeadersAddresses Is Nothing Then
        Dim dict As Dictionary
        Dim resultDict As New Dictionary
        Dim counter As Integer
        Dim varItem As Variant
        
        counter = 0
        Set dict = Headers
        
        For Each varItem In dict.Items
          resultDict.Add varItem, dict.Keys()(counter)
          counter = counter + 1
        Next
        Set pHeadersAddresses = resultDict
    End If
    Set HeadersAddresses = pHeadersAddresses
End Property
Attribute VB_Name = "winAPI"
Option Explicit
Option Private Module

#If VBA7 Then
Private Declare PtrSafe Function SetCursor Lib "user32" (ByVal hCursor As LongPtr) As LongPtr

Private Declare PtrSafe Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As LongPtr, ByVal lpCursorName As LongPtr) As LongPtr

Private Declare PtrSafe Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwFlags As LongPtr, ByVal dwReserved As LongPtr) As LongPtr
   
Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
 
Private Declare PtrSafe Function SendMessageA Lib "user32" (ByVal hwnd As LongPtr, ByVal wMsg As LongPtr, ByVal wParam As Integer, ByVal lParam As LongPtr) As LongPtr

Private Declare PtrSafe Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long

Private Const INTERNET_CONNECTION_MODEM As LongPtr = &H1
Private Const INTERNET_CONNECTION_LAN As LongPtr = &H2
Private Const INTERNET_CONNECTION_PROXY As LongPtr = &H4
Private Const INTERNET_CONNECTION_OFFLINE As LongPtr = &H20

Public Const CHILDID_SELF As Long = &H0&
Public Const STATE_SYSTEM_UNAVAILABLE As Long = &H1&
Public Const STATE_SYSTEM_INVISIBLE As Long = &H8000&
Public Const STATE_SYSTEM_SELECTED As Long = &H2&
Public Enum RoleNumber
    ROLE_SYSTEM_CLIENT = &HA&
    ROLE_SYSTEM_PANE = &H10&
    ROLE_SYSTEM_GROUPING = &H14&
    ROLE_SYSTEM_TOOLBAR = &H16&
    ROLE_SYSTEM_PAGETAB = &H25&
    ROLE_SYSTEM_PROPERTYPAGE = &H26&
    ROLE_SYSTEM_GRAPHIC = &H28&
    ROLE_SYSTEM_STATICTEXT = &H29&
    ROLE_SYSTEM_TEXT = &H2A&
    ROLE_SYSTEM_BUTTONDROPDOWNGRID = &H3A&
    ROLE_SYSTEM_PAGETABLIST = &H3C&
End Enum
Private Enum NavigationDirection
    NAVDIR_FIRSTCHILD = &H7&
End Enum

Function InternetIsConnected() As Boolean
    Dim l As LongPtr
    Dim r As LongPtr
    r = InternetGetConnectedState(l, 0&)
    If r = 0 Then
        InternetIsConnected = False
    Else
        If r <= 4 Then
            InternetIsConnected = True
        Else
            InternetIsConnected = False
        End If
    End If
End Function

Sub SetFormIcon(formCaption As String, handle As LongPtr)
    Dim uFile As String
    SendMessageA FindWindow(vbNullString, formCaption), &H80, False, handle
End Sub

Sub SetPointerCursor()
    SetCursor LoadCursor(0, 32649&)
End Sub

Public Function GetAccessible(Element As IAccessible, RoleWanted As RoleNumber, NameWanted As String, Optional GetClient As Boolean) As IAccessible
    Dim ChildrenArray()
    Dim Child               As IAccessible
    Dim ndxChild            As Long
    Dim ReturnElement       As IAccessible
    
    Dim NameComparand       As String
    Dim accName             As String
    Dim accValue            As String
    
    On Error Resume Next
        accValue = Element.accValue(CHILDID_SELF)
    On Error GoTo 0
    
    accName = Element.accName(CHILDID_SELF)
    
    Select Case accValue
        
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar"
            NameComparand = accValue
        
        Case "", "Ribbon Tab", "Group"
            NameComparand = accName
        
        Case Else
            NameComparand = accName
          
    End Select
    
    If Element.accRole(CHILDID_SELF) = RoleWanted _
    And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else
        ChildrenArray = GetChildren(Element)
        
        If (Not ChildrenArray) <> True Then
            
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                If TypeOf ChildrenArray(ndxChild) Is IAccessible Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, _
                                                      RoleWanted, _
                                                      NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If
            
            Next ndxChild
        
        End If
    
    End If

    If GetClient Then
        Set ReturnElement = ReturnElement.accNavigate(NAVDIR_FIRSTCHILD, _
                                                      CHILDID_SELF)
    End If
    
    Set GetAccessible = ReturnElement
End Function

Private Function GetChildren(Element As IAccessible) As Variant()
    Const FirstChild        As Long = 0&

    Dim NumChildren         As Long
    Dim NumReturned         As Long
    
    Dim ChildrenArray()

    NumChildren = Element.accChildCount

    If NumChildren > 0 Then
    
        ReDim ChildrenArray(NumChildren - 1)
        AccessibleChildren Element, FirstChild, NumChildren, _
                           ChildrenArray(0), NumReturned

    End If
    
    GetChildren = ChildrenArray
End Function
#Else
'============================ Legacy ============================

Private Declare Function SetCursor Lib "user32" (ByVal hCursor As Long) As Long

Private Declare Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long

Private Declare Function InternetGetConnectedState Lib "wininet.dll" (ByRef dwFlags As Long, ByVal dwReserved As Long) As Long
   
Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
 
Private Declare Function SendMessageA Lib "user32" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal lParam As Long) As Long

Private Declare Function AccessibleChildren Lib "oleacc.dll" (ByVal paccContainer As Object, ByVal iChildStart As Long, ByVal cChildren As Long, rgvarChildren As Variant, pcObtained As Long) As Long

Private Const INTERNET_CONNECTION_MODEM As Long = &H1
Private Const INTERNET_CONNECTION_LAN As Long = &H2
Private Const INTERNET_CONNECTION_PROXY As Long = &H4
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20

Public Const CHILDID_SELF                  As Long = &H0&
Public Const STATE_SYSTEM_UNAVAILABLE      As Long = &H1&
Public Const STATE_SYSTEM_INVISIBLE        As Long = &H8000&
Public Const STATE_SYSTEM_SELECTED         As Long = &H2&
Public Enum RoleNumber
    ROLE_SYSTEM_CLIENT = &HA&
    ROLE_SYSTEM_PANE = &H10&
    ROLE_SYSTEM_GROUPING = &H14&
    ROLE_SYSTEM_TOOLBAR = &H16&
    ROLE_SYSTEM_PAGETAB = &H25&
    ROLE_SYSTEM_PROPERTYPAGE = &H26&
    ROLE_SYSTEM_GRAPHIC = &H28&
    ROLE_SYSTEM_STATICTEXT = &H29&
    ROLE_SYSTEM_TEXT = &H2A&
    ROLE_SYSTEM_BUTTONDROPDOWNGRID = &H3A&
    ROLE_SYSTEM_PAGETABLIST = &H3C&
End Enum
Private Enum NavigationDirection
    NAVDIR_FIRSTCHILD = &H7&
End Enum

Function InternetIsConnected() As Boolean
    Dim l As Long
    Dim r As Long
    r = InternetGetConnectedState(l, 0&)
    If r = 0 Then
        InternetIsConnected = False
    Else
        If r <= 4 Then
            InternetIsConnected = True
        Else
            InternetIsConnected = False
        End If
    End If
End Function

Sub SetFormIcon(formCaption As String, handle As Long)
    Dim uFile As String
    SendMessageA FindWindow(vbNullString, formCaption), &H80, False, handle
End Sub

Sub SetPointerCursor()
    SetCursor LoadCursor(0, 32649&)
End Sub

Public Function GetAccessible(Element As IAccessible, RoleWanted As RoleNumber, NameWanted As String, Optional GetClient As Boolean) As IAccessible
    Dim ChildrenArray()
    Dim Child               As IAccessible
    Dim ndxChild            As Long
    Dim ReturnElement       As IAccessible
    
    Dim NameComparand       As String
    Dim accName             As String
    Dim accValue            As String
    
    On Error Resume Next
        accValue = Element.accValue(CHILDID_SELF)
    On Error GoTo 0
    
    accName = Element.accName(CHILDID_SELF)
    
    Select Case accValue
        
        Case "Ribbon", "Quick Access Toolbar", "Ribbon Tabs List", "Lower Ribbon", "Status Bar"
            NameComparand = accValue
        
        Case "", "Ribbon Tab", "Group"
            NameComparand = accName
        
        Case Else
            NameComparand = accName
          
    End Select
    
    If Element.accRole(CHILDID_SELF) = RoleWanted _
    And NameComparand = NameWanted Then
        Set ReturnElement = Element
    Else
        ChildrenArray = GetChildren(Element)
        
        If (Not ChildrenArray) <> True Then
            
            For ndxChild = LBound(ChildrenArray) To UBound(ChildrenArray)
                
                If TypeOf ChildrenArray(ndxChild) Is IAccessible Then
                    Set Child = ChildrenArray(ndxChild)
                    Set ReturnElement = GetAccessible(Child, _
                                                      RoleWanted, _
                                                      NameWanted)
                    If Not ReturnElement Is Nothing Then Exit For
                End If
            
            Next ndxChild
        
        End If
    
    End If

    If GetClient Then
        Set ReturnElement = ReturnElement.accNavigate(NAVDIR_FIRSTCHILD, _
                                                      CHILDID_SELF)
    End If
    
    Set GetAccessible = ReturnElement
End Function

Private Function GetChildren(Element As IAccessible) As Variant()
    Const FirstChild        As Long = 0&

    Dim NumChildren         As Long
    Dim NumReturned         As Long
    
    Dim ChildrenArray()

    NumChildren = Element.accChildCount

    If NumChildren > 0 Then
    
        ReDim ChildrenArray(NumChildren - 1)
        AccessibleChildren Element, FirstChild, NumChildren, _
                           ChildrenArray(0), NumReturned

    End If
    
    GetChildren = ChildrenArray
End Function

#End If


Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
   Main.AllValidated = False
   Main.ValidateChangedCells Target
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
   Main.ShowErrors Target
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Close()
    On Error Resume Next
    Application.CommandBars(YaConst.CommandBarName).Delete
    On Error GoTo 0
End Sub

Private Sub Workbook_Open()
    On Error Resume Next
    Application.CommandBars(YaConst.CommandBarName).Delete
    On Error GoTo 0
    
    Dim bar As CommandBar
    Set bar = Application.CommandBars.Add(YaConst.CommandBarName, temporary:=True)
    bar.Visible = True
    
    Dim control As CommandBarControl
    
    Set control = bar.Controls.Add()
    control.Style = msoButtonIcon
    control.Enabled = False
    
    Dim checkButtonName As String
    checkButtonName = IIf(YaConst.ThisTemplateType = YaConst.SkuTemplateType Or YaConst.ThisTemplateType = YaConst.StorageTemplateType, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    
    Set control = bar.Controls.Add(Type:=1)
    control.Caption = checkButtonName
    control.FaceId = 1087
    control.Style = 3
    control.OnAction = "Main.ShowValidationForm"
    
    If YaConst.ThisTemplateType <> YaConst.SkuTemplateType And YaConst.ThisTemplateType <> YaConst.StorageTemplateType Then
        Set control = bar.Controls.Add(Type:=1)
        control.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        control.FaceId = 1576
        control.Style = 3
        control.OnAction = "Main.UploadProductsToMarket"
        
        Set control = bar.Controls.Add(Type:=1)
        control.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        control.FaceId = 41
        control.Style = 3
        control.OnAction = "Main.SelectPrevError"
        
        Set control = bar.Controls.Add(Type:=1)
        control.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        control.FaceId = 39
        control.Style = 3
        control.OnAction = "Main.SelectNextError"
    End If
    
    Application.OnTime Now + TimeValue("00:00:01"), "Main.PasteCartIconToBar"
    Application.OnTime Now + TimeValue("00:00:01"), "Main.SwitchToAddinsTab"
End Sub
    
Private Sub Workbook_Activate()
    On Error Resume Next
    Application.CommandBars(YaConst.CommandBarName).Visible = True
    On Error GoTo 0
End Sub

Private Sub Workbook_Deactivate()
    On Error Resume Next
    Application.CommandBars(YaConst.CommandBarName).Visible = False
    On Error GoTo 0
End Sub


' InQuest injected base64 decoded content
' z{bj[
' y(^z
' yJ]j
' Szjej

INQUEST-PP=macro
