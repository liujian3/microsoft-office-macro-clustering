Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ThisWorkbook.Sheets(SHEET_START).Select
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim sAction As String
    Dim sWorksheet As String
    
    sWorksheet = ThisWorkbook.ActiveSheet.Name
    
    'Einige Standardwerte (Settings) setzen
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
    SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive True
    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
    SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
    
    'Startseite Standardsettings
    ThisWorkbook.Sheets(SHEET_START).Range("EC8:EC13") = "no"

    'Drop-Downs zur|fffd|ck setzen
    Drop_Options_MAIN_SetToAction
    Drop_Formulas_MAIN_SetToAction
    'Start_Drop_NEW_SetToAction
    'Start_Drop_SPECIAL_SetToAction
    Drop_Start_MAIN_SetToAction
    
    ThisWorkbook.Sheets(sWorksheet).Select

End Sub

'Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
'    Cancel = True
'End Sub

Private Sub Workbook_SheetCalculate(ByVal Sh As Object)
    On Error GoTo errhdl
    
    If Tool_IsSheetDatasheet(Sh.Name) = True Then
    
    'If CompareStrings(Sh.Name, SHEET_BALANCE) = True Or _
    '    CompareStrings(Sh.Name, SHEET_INCOME) = True Then
            AutoFilter_MarkSelections (Sh.Name)
    'End If
    
    End If

    Exit Sub
    
errhdl:
    WriteError "Workbook_SheetCalculate", Err.Description
    Resume Next
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    On Error GoTo errhdl
    Dim sDatasheet As String
    sDatasheet = Sh.Name

    If sDatasheet = SHEET_START Then
        Sheet_Change_Start Target
    ElseIf sDatasheet = SHEET_OPTIONS Then
        Sheet_Change_Options Target
    ElseIf sDatasheet = "Formulas" Then
        Sheet_Change_Formulas Target
    ElseIf Tool_IsSheetDatasheet(sDatasheet) = True Then
        Sheet_Change_Datasheet Target
'    ElseIf sDatasheet = "Infobox" Then
'        Sheet_Change_Infobox Target
    Else
        'Calculate (Hat Performance Probleme gemacht)
    End If
    Exit Sub
errhdl:
    WriteError "Workbook_SheetChange", Err.Description
    Resume Next
End Sub

Private Sub Workbook_Open()
    On Error GoTo errhdl
    
    Tool_InitAllDatasheets_FromLayout

    'Dieser Bereich aktiviert die Sperrung des Userinterface (noch ohne Passwort)
    ProtectSheets_byName
    
    'ThisWorkbook.Sheets(SHEET_START).Select
    Application.ScreenUpdating = False
    'Format_SelectedDatasheets
    Format_AllDatasheets
   ' ThisWorkbook.Sheets(SHEET_START).Select
    Application.ScreenUpdating = True

    
    'Hier wird die automatische Berechnung aktiviert (sonst k|fffd|nnen z.B. ICPs doppelt eingegeben werden)
    Application.Calculation = xlAutomatic
    Calculate

    Exit Sub
errhdl:
    WriteError "Workbook_Open", Err.Description
    Resume Next
End Sub

Private Sub ProtectAllSheets()
    On Error GoTo errhdl
    'sperrt alle Bl|fffd|tter

    Dim i As Long
    Dim sSheetName As String

    Layout_GetAllDatasheets aDatasheets_All
    
    For i = 1 To ThisWorkbook.Sheets.Count
    
        sSheetName = ""
        sSheetName = ThisWorkbook.Sheets(i).Name
        Debug.Print sSheetName
    
        If Not (InStr(1, sSheetName, "USER") > 0 Or InStr(1, sSheetName, "User") > 0) Then
        


            If GetArrayIndex(aDatasheets_All, sSheetName) > 0 Then
                'Datasheets
'                    ThisWorkbook.Sheets(i).Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
'                                , AllowFormattingCells:=True, AllowFormattingColumns:=True, _
'                                AllowFormattingRows:=True, AllowFiltering:=True, userinterfaceonly:=True
                
'                ThisWorkbook.Sheets(i).Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
'                            , AllowFormattingColumns:=True, AllowFormattingRows:=True, _
'                             AllowFiltering:=True, userinterfaceonly:=True
                        
                        
                ThisWorkbook.Sheets(i).Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
                            , AllowFormattingColumns:=True, AllowFiltering:=True, userinterfaceonly:=True, Password:="tk"
            Else
                 'Administration Sheets
                ThisWorkbook.Sheets(i).Protect userinterfaceonly:=True, Password:="tk"
            End If
                

            
            'mit Passwort
            'ThisWorkbook.Sheets(i).Protect userinterfaceonly:=True, Password:="tk"
            
            ThisWorkbook.Sheets(i).EnableOutlining = True     'f|fffd|r Gliederung
            ThisWorkbook.Sheets(i).EnableAutoFilter = True
 
        End If
        
    Next
        
    Exit Sub
errhdl:
    WriteError "ProtectAllSheets", Err.Description
    Resume Next
End Sub

Private Sub ProtectSheets_byName()
    On Error GoTo errhdl
    'Diese Funktion ist f|fffd|r Bl|fffd|tter erforderlich, in denen Gruppierung funktionieren soll, darum hier
    'beim |fffd|ffnen der Excel-Datei alle Dateneingabebl|fffd|tter durchlaufen und entsprechend sperren

    Dim i As Long
    Dim sSheetName As String

    Layout_GetAllDatasheets aDatasheets_All
    
    For i = LBound(aDatasheets_All) To UBound(aDatasheets_All)
    
        sSheetName = ""
        sSheetName = aDatasheets_All(i)
        If sSheetName <> "" Then
            Debug.Print sSheetName
    
            ThisWorkbook.Sheets(sSheetName).Protect DrawingObjects:=True, Contents:=True, Scenarios:=True _
                                , AllowFormattingColumns:=True, AllowFiltering:=True, userinterfaceonly:=True, Password:="tk"
    
            ThisWorkbook.Sheets(sSheetName).EnableOutlining = True     'f|fffd|r Gliederung
            ThisWorkbook.Sheets(sSheetName).EnableAutoFilter = True
        End If
        
    Next
    
        
    
    ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Options").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Start").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Layout").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Semantic").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Syntax").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Syntax_XLS").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Messages").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("ICPs").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Infobox").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("Formulas").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    ThisWorkbook.Sheets("daproh").Protect userinterfaceonly:=True, AllowFiltering:=True, Password:="tk"
    
'                 'Administration Sheets
'                ThisWorkbook.Sheets(i).Protect userinterfaceonly:=True, Password:="tk"
        
    Exit Sub
errhdl:
    WriteError "ProtectSheets_byName", Err.Description
    Resume Next
End Sub

Private Sub UnprotectAllSheets()
        On Error GoTo errhdl
        Dim sSheetName As String
    'entsperrt alle Bl|fffd|tter
    
    Dim i As Long
    For i = 1 To ThisWorkbook.Sheets.Count
        sSheetName = ""
        sSheetName = ThisWorkbook.Sheets(i).Name
        
        If Not InStr(1, ThisWorkbook.Sheets(i).Name, "USER") > 0 Then
            'ThisWorkbook.Sheets(i).Unprotect
            
            If GetArrayIndex(aDatasheets_All, sSheetName) > 0 Then
                ThisWorkbook.Sheets(i).Unprotect Password:="tk"
            Else
                ThisWorkbook.Sheets(i).Unprotect Password:="tk"
            End If
            
        End If
    Next
        
    Exit Sub
errhdl:
    WriteError "UnprotectAllSheets", Err.Description
    Resume Next
End Sub

Private Sub Workbook_WindowResize(ByVal Wn As Window)
    auto_open2
End Sub












Attribute VB_Name = "Modul1"
Option Explicit

'###################################################
 '#         KONSTANTEN und VARIABLEN               #
'###################################################


'------------------------------------------------------------------------------------------------------------
'--- Constants ---
'------------------------------------------------------------------------------------------------------------

'**************************      CHECKLISTE Konstanten       ************************************************


'Tool Version
'Obsolet, wird aus Dimenstion Settings gelesen
'Public Const CURRENT_TOOL_VERSION As String = "2018081"


'_____________________
'Set1_RunTimeSettings

'Start Filled Forms
Public Const SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ALL As Long = 44
Public Const SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ACT As Long = 45
Public Const SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_EXX As Long = 46
Public Const SET1_RunTimeSettings_FORMSFILLEDCHECK_COL As Long = 3

'Start Hidden Movements / Movemements with Data (always visible)
Public Const SET1_RunTimeSettings_HIDDENMOVEMENTS_ROW As Long = 41
Public Const SET1_RunTimeSettings_HIDDENMOVEMENTS_COL As Long = 3

'_____________________
'Set2_DimensionSettings

'Start Estimation Month
Public Const SET2_DimensionSettings_EstimationMonth_ROW As Long = 9
Public Const SET2_DimensionSettings_EstimationMonth_COL As Long = 14

'_____________________
'Start

'Start - Special Export
Public Const START_SPECIALEXPORT_COL As Long = 7
Public Const START_SPECIALEXPORT_ICM_ROW As Long = 18
Public Const START_SPECIALEXPORT_OIeS_ROW As Long = 19
Public Const START_SPECIALEXPORT_SHEETs_ROW As Long = 20
Public Const START_SPECIALEXPORT_REPORTINGPERIODs_ROW As Long = 21

'Start - Special Import
Public Const START_SPECIALIMPORT_COL As Long = 7
Public Const START_SPECIALIMPORT_REPORTINGPERIOD_ROW As Long = 24

'Opening Values Balancesheet filled
Public Const START_OPENINGVALUES_FILLED_ROW As Long = 14
Public Const START_OPENINGVALUES_FILLED_COL_ACT As Long = 17
Public Const START_OPENINGVALUES_FILLED_COL_Exx As Long = 18

'Start Special Business Cases
Public Const START_SPECIALCASES_COL As Long = 7
Public Const START_SPECIALCASES_OTHERCHANG69_ROW As Long = 32



'Start Message Box
Public Const START_MSGBOX_ROW As Long = 20
Public Const START_MSGBOX_COL As Long = 14

'ICP Block Box
Public Const START_ICPUNBLOCL_ROW As Long = 67
Public Const START_ICPUNBLOCK_COL As Long = 2


'Technical Settings

Public Const START_TECHNICAL_SETTINGS_COL As Long = 113
Public Const START_TECHNICAL_SETTINGS_PERFORMANCE_ROW As Long = 5
Public Const START_TECHNICAL_SETTINGS_DATAFORMAT_ROW As Long = 7


'Drop-Downs Start and Others
Public Const DROP_ACTION_GER = "---------------  Aktion auswaehlen  ----------------"
Public Const DROP_ACTION_ENG = "---------------  Choose Action  ----------------"

Public Const DROP_START_MAIN_ROW As Long = 14
Public Const DROP_START_MAIN_COL As Long = 3
Public Const DROP_FORMULAS_ROW As Long = 7
Public Const DROP_FORMULAS_COL As Long = 2
Public Const DROP_OPTIONS_ROW As Long = 3
Public Const DROP_OPTIONS_COL As Long = 18

Public Const IMPORTLINE_BeforeConversion_MANAGEMENTID_INDEX As Long = 13
Public Const IMPORTLINE_BeforeConversion_MANAGEMENTID_INDEX_inSpecialExcel As Long = 4
Public Const IMPORTLINE_BeforeConversion_MOVEMENT_INDEX As Long = 5
Public Const IMPORTLINE_BeforeConversion_VALUE_INDEX As Long = 10
Public Const IMPORTLINE_BeforeConversion_ACCOUNT_INDEX As Long = 4
Public Const IMPORTLINE_BeforeConversion_MAX_INDEX As Long = 14


'**************************      /CHECKLISTE Konstanten       ************************************************


Public Const DELIMITER As String = ";"
Public Const ALL As String = "*"

'Datasheet Rows and Cols

Public Const DATASHEET_COL_ACCOUNT As Long = 2
Public Const DATASHEET_COL_MovementRange As Long = 3
Public Const DATASHEET_COL_ICP As Long = 4
Public Const DATASHEET_COL_BreakdownRows As Long = 5
Public Const DATASHEET_COL_SHORTDESCRIPTION_GER As Long = 6
Public Const DATASHEET_COL_SHORTDESCRIPTION_ENG As Long = 7
Public Const DATASHEET_COL_SEARCHFIELD = 8
Public Const DATASHEET_COL_ISLEAVE = 9
Public Const DATASHEET_COL_ACCOUNT_INFO = 10                    'ICM
Public Const DATASHEET_COL_BLOCK_ICP As Long = 11
Public Const DATASHEET_COL_WITHDATA_PERFORMANCE_1 As Long = 12               'with Data
Public Const DATASHEET_COL_WITHDATA_PERFORMANCE_2 As Long = 13               'with Data, excl Opening Values
Public Const DATASHEET_COL_WITHDATA_USER As Long = 14          'with Data
Public Const DATASHEET_COL_RANGE_VISIBLE As Long = 15

Public Const DATASHEET_COL_MovementNumber_FIRST As Long = 16



Public Const DATASHEET_ROW_VERSION As Long = 2
Public Const DATASHEET_ROW_YEAR As Long = 3
Public Const DATASHEET_ROW_PERIOD As Long = 4
Public Const DATASHEET_ROW_BreakdownCols As Long = 5
Public Const DATASHEET_ROW_MovementNumber As Long = 6
Public Const DATASHEET_ROW_MovementNumberDESCRIPTION_GER As Long = 7
Public Const DATASHEET_ROW_MovementNumberDESCRIPTION_ENG As Long = 8
Public Const DATASHEET_ROW_FIRSTDATASET As Long = 10

'Export Rows (ToDo: Test ok?)

Public Const EXPORT_ROW_FIRST As Long = 9

'Worksheets

Public Const SHEET_BALANCE As String = "Balance"
Public Const SHEET_INCOME As String = "Income"
Public Const SHEET_400 As String = "400"
Public Const SHEET_400a As String = "400a"
Public Const SHEET_ICPs As String = "ICPs"
Public Const SHEET_ICPDETAILS As String = "ICP_Details"
Public Const SHEET_START As String = "Start"
Public Const SHEET_OPTIONS As String = "Options"
Public Const SHEET_SET1_RunTimeSettings As String = "SET1_RunTimeSettings"
Public Const SHEET_SET2_DimensionSettings As String = "SET2_DimensionSettings"
Public Const SHEET_ONLINE_VALUES As String = "Online_Values"
Public Const SHEET_ConversionNEW_Syntax_SAP As String = "Syntax"
Public Const SHEET_ConversionNEW_Semantic_SAP As String = "Semantic"
Public Const SHEET_ConversionNEW_Syntax_HFM As String = "Syntax_HFM"
Public Const SHEET_ConversionNEW_Syntax_XLS As String = "Syntax_XLS"
Public Const SHEET_ConversionNEW_Semantic_HFM_IMPORT As String = "Semantic_HFM_Import"
Public Const SHEET_ConversionNEW_Semantic_HFM_EXPORT As String = "Semantic_HFM_Export"
Public Const SHEET_LAYOUT As String = "Layout"
Public Const SHEET_CELLREFs As String = "CellRefs"
Public Const SHEET_NoINPUT As String = "NoInput"
Public Const SHEET_MakeINPUT As String = "MakeInput"

'Source Systems
Public Const SOURCE_SYSTEM_SAP As String = "SAP"
Public Const SOURCE_SYSTEM_HFM As String = "HFM"
Public Const SOURCE_SYSTEM_XLS As String = "XLS"

'Online Value Columns
'Public Const ONLINE_VALUES_POS_VERSION As Long = 1
'Public Const ONLINE_VALUES_POS_YEAR As Long = 2
'Public Const ONLINE_VALUES_POS_PERIOD As Long = 3
'Public Const ONLINE_VALUES_POS_FSITEM As Long = 4
'Public Const ONLINE_VALUES_POS_MOVEMENT_RANGE As Long = 5
'Public Const ONLINE_VALUES_POS_MOVEMENT_NUMBER As Long = 6
'Public Const ONLINE_VALUES_POS_PARTNER As Long = 7
'Public Const ONLINE_VALUES_POS_Breakdown_Rows As Long = 8
'Public Const ONLINE_VALUES_POS_Breakdown_Cols As Long = 9
'Public Const ONLINE_VALUES_POS_VALUE As Long = 10

'Calling Makros und Actions
Public Const CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES As String = "StandardImport_OpeningValues"
Public Const CALLINGMAKRO_STANDARDIMPORT_STATE As String = "StandardImport_State"
Public Const CALLINGMAKRO_STANDARDEXPORT As String = "StandardExport"
Public Const CALLINGMAKRO_STANDARDCLEAR_ICPBLOCK As String = "StandardClear_ICPBlock"

Public Const CALLINGMAKRO_OPTIONIMPORT = "OptionImport"
Public Const CALLINGMAKRO_OPTIONIMPORTACCUMULATE = "OptionImportAccumulate"
Public Const CALLINGMAKRO_OPTIONEXPORT As String = "OptionExport"
Public Const CALLINGMAKRO_OPTIONDELETE As String = "OptionDelete"
Public Const CALLINGMAKRO_OPTIONCLEAR_ALLDATACELLSITALIC As String = "OptionClear_AllDatacellsItalic"

Public Const CALLINGMAKRO_SPECIALIMPORT_EXCEL As String = "SpecialImport_Excel"
Public Const CALLINGMAKRO_SPECIALEXPORT_EXCEL As String = "SpecialExport_Excel"

Public Const CALLINGMAKRO_ALL As String = "ALL"

Public Const ACTION_IMPORT As String = "Import"
Public Const ACTION_EXPORT As String = "Export"
Public Const ACTION_CLEAR As String = "Clear"
Public Const ACTION_CLEAR_ICP_BLOCK As String = "Clear ICP Block"
Public Const ACTION_CLEAR_ALLDATACELLS_ITALIC As String = "Clear AllDataCells Italic"
Public Const ACTION_SPECIAL_CLEAR As String = "Special Clear"

'Mode
Public Const IMPORT_MODE_ACCUMULATE As String = "Accumulate"
Public Const IMPORT_MODE_MERGE As String = "Merge"


'Tool Reporting Period
Public Const TOOL_IDENTIFIER_PLx As String = "PLx"
Public Const TOOL_IDENTIFIER_PBM As String = "PBM"
Public Const TOOL_IDENTIFIER_ACT_Exx As String = "ACT_Exx"
Public Const TOOL_IDENTIFIER_ACT_Q4 As String = "ACT_Q4"


'Sprache
Public Const TOOL_LANGUAGE_GER As Long = 2
Public Const TOOL_LANGUAGE_ENG As Long = 1

'Excel
Public Const EXCEL_COLOUR_ADDICP As Long = 37                   '16764057
Public Const EXCEL_COLOUR_NONE As Long = xlNone
Public Const EXCEL_COLOUR_DATAENTRY As Long = 37                '16764057
Public Const EXCEL_COLOUR_CELLNOTVALID As Long = 15
                                                                                           
'Topmember
Public Const ACCOUNTS_TOPMEMBER_INCOME As String = "INCOMESTATEMENT"
Public Const ACCOUNTS_TOPMEMBER_BALANCE As String = "BS"
Public Const ACCOUNTS_TOPMEMBER_STATISTICS As String = "STATISTICS"

'Sonderfall TKE
Public Const ACCOUNTS_TOPMEMBER_TKE As String = "ELEVATOR"

'HFM

Public Const NONE As String = ""    '"[None]"
Public Const ACCOUNT_TYPE As String = "AccountType"
Public Const SWITCHSIGNFORFLOW As String = "SwitchSignForFlow"
Public Const ROOT As String = "#root"

Public Const ICP_BASE As String = "[ICP Base]"
Public Const ICP_NONE As String = ""
Public Const ICP_EXTERN As String = "0"
Public Const ICP_TOP As String = "[ICP Top]"

Public Const C1_000 As String = "000"
Public Const C4_HBII As String = "HBII"

Public Const MEMBER_ACCOUNT As String = "/B224/S_GT_TKAC"
Public Const MEMBER_BREAKDOWN1 As String = "/B224/S_GT_BRK1"
Public Const MEMBER_BREAKDOWN2 As String = "/B224/S_GT_BRK2"

Public Const BREAKDOWN_NONE As String = "BD_NONE"
Public Const BREAKDOWN_ROWS As String = "BD_ROWS"
Public Const BREAKDOWN_COLS As String = "BD_COLS"

'Progressbar

Public Const MaxWidthProgressBar As Long = 550

'Allgemein/Sonstige

Public Const ENDE_MARKE As String = ""
Public Const FOR_MAX As Long = 60000
Public Const FOR_MAX2 As Long = 1000


'------------------------------------------------------------------------------------------------------------
' --- Variables ---
'------------------------------------------------------------------------------------------------------------


Public EXIT_CURRENT_PROCEDURE As Boolean                                    'F|fffd|r Abbruch mitten in Lade/Export-Prozess

Public aDatasheets_All() As String                                          'Alle Datenbl|fffd|tter, Pflege in Blatt SET1_RunTimeSettings

Public lCriticalErrorsImport_POV_Management_ID As Long                             'Kritische Fehler
Public lCriticalErrorsImport_POV_ScenarioYearPeriod As Long
Public lCriticalErrorsImport_FileScan_DecimalCharacterError As Long
Public lCriticalErrorsImport_FileScan_FileNotFound As Long
Public sCriticalErrorsImport_FileNotFound_PositivList As String
Public lCriticalErrorsExport_ICPIsEmpty As Long

Public sCriticalErrorsExport_EmptyICPs As String
Public sCriticalErrorsExport_POV_Management_ID As String
Public sCriticalErrorsExport_POV_ScenarioYearPeriod As String

Public sCriticalErrors_ValueOnHiddenMovements As String
Public lCriticalErrors_ValueOnHiddenMovement As Long

'aus Setup from Metadata
Public sChartGroup As String                                                'Bilanz, GuV oder Statistics
Public sTopmember As String                                                 'Topmember bei GuV und Statistics
Public sDatasheet As String

Public sTimestamp_VeryShort As String
Public sTimestamp_Short As String
Public sTimestamp_Long As String

Public bImportExportPre_AlreadyRun2 As Boolean


'**************************      CHECKLISTE Funktionen       ************************************************

'**********************************************************************************************
' Start
'**********************************************************************************************

Public Function Start_OpeningValuesBalancesheet_Filled() As Boolean
    On Error Resume Next
    
    If IsNumeric(ThisWorkbook.Sheets(SHEET_START).Cells(START_OPENINGVALUES_FILLED_ROW, START_OPENINGVALUES_FILLED_COL_ACT)) = True Then
        Start_OpeningValuesBalancesheet_Filled = True
    Else
        Start_OpeningValuesBalancesheet_Filled = False
    End If
    
    Exit Function
errhdl:
    WriteError "Start_OpeningValuesBalancesheet_Filled", Err.Description
    Resume Next
End Function

'Special Export

Public Function Start_SpecialExport_GetICMOnly() As Boolean
    On Error Resume Next
    
    If ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_ICM_ROW, START_SPECIALEXPORT_COL) <> "yes" Then
        Start_SpecialExport_GetICMOnly = False
    Else
        Start_SpecialExport_GetICMOnly = True
    End If
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_GetICMOnly", Err.Description
    Resume Next
End Function

Public Sub Start_SpecialExport_SetICMOnlyNo()
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_ICM_ROW, START_SPECIALEXPORT_COL) = "no"
    Exit Sub
errhdl:
    WriteError "Start_SpecialExport_SetICMOnlyNo", Err.Description
    Resume Next
End Sub

Public Sub Start_SpecialExport_SetICMOnlyYes()
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_ICM_ROW, START_SPECIALEXPORT_COL) = "yes"
    Exit Sub
errhdl:
    WriteError "Start_SpecialExport_SetICMOnlyYes", Err.Description
    Resume Next
End Sub


Public Function Start_SpecialExport_GetSelectedSheets() As String
    On Error Resume Next
    
    Start_SpecialExport_GetSelectedSheets = ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_SHEETs_ROW, START_SPECIALEXPORT_COL)
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_GetSelectedSheets", Err.Description
    Resume Next
End Function

Public Function Start_SpecialExport_SetSelectedSheetsAll() As String
    On Error Resume Next
    
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_SHEETs_ROW, START_SPECIALEXPORT_COL) = "All(e)"
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_SetSelectedSheetsAll", Err.Description
    Resume Next
End Function

Public Function Start_SpecialExport_SetSelectedSheetsBalance() As String
    On Error Resume Next
    
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_SHEETs_ROW, START_SPECIALEXPORT_COL) = "Balance"
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_SetSelectedSheetsBalance", Err.Description
    Resume Next
End Function

Public Function Start_SpecialExport_GetSelectedReportingPeriods() As String
    On Error Resume Next
    
    Start_SpecialExport_GetSelectedReportingPeriods = ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_REPORTINGPERIODs_ROW, START_SPECIALEXPORT_COL)
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_GetSelectedReportingPeriods", Err.Description
    Resume Next
End Function

Public Function Start_SpecialExport_GetOrdEquSal() As Boolean
    On Error Resume Next
    
    If ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_OIeS_ROW, START_SPECIALEXPORT_COL) <> "yes" Then
        Start_SpecialExport_GetOrdEquSal = False
    Else
        Start_SpecialExport_GetOrdEquSal = True
    End If
    
    Exit Function
errhdl:
    WriteError "Start_SpecialExport_GetOrdEquSal", Err.Description
    Resume Next
End Function

Public Sub Start_SpecialExport_SetOrdEquSalNo()
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_OIeS_ROW, START_SPECIALEXPORT_COL) = "no"
    Exit Sub
errhdl:
    WriteError "Start_SpecialExport_SetOrdEquSalNo", Err.Description
    Resume Next
End Sub

Public Sub Start_SpecialExport_SetOrdEquSalYes()
    On Error Resume Next
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_OIeS_ROW, START_SPECIALEXPORT_COL) = "yes"
    Exit Sub
errhdl:
    WriteError "Start_SpecialExport_SetOrdEquSalNo", Err.Description
    Resume Next
End Sub

'Parameter

Public Function Start_GetVersion() As String
    On Error Resume Next
    
    Start_GetVersion = ThisWorkbook.Sheets(SHEET_START).Cells(5, 4)
    
    Exit Function
errhdl:
    WriteError "Start_GetVersion", Err.Description
    Resume Next
End Function

Public Function Start_GetYear() As String
    On Error Resume Next
    
    Start_GetYear = ThisWorkbook.Sheets(SHEET_START).Cells(6, 4)
    
    Exit Function
errhdl:
    WriteError "Start_GetYear", Err.Description
    Resume Next
End Function

Public Function Start_GetPeriod() As String
    On Error Resume Next
    
    Start_GetPeriod = ThisWorkbook.Sheets(SHEET_START).Cells(7, 4)
    
    Exit Function
errhdl:
    WriteError "Start_GetPeriod", Err.Description
    Resume Next
End Function

Public Function Start_GetManagementID() As String
    On Error Resume Next
    
    Start_GetManagementID = ThisWorkbook.Sheets(SHEET_START).Cells(7, 8)
    
    Exit Function
errhdl:
    WriteError "Start_GetManagementID", Err.Description
    Resume Next
End Function

'Public Function Start_GetCompany() As String
'    On Error Resume Next
'
'    If InStr(1, Start_GetManagementID, "-") > 0 Then
'        Start_GetCompany = Mid(Start_GetManagementID, 1, InStr(1, Start_GetManagementID, "-") - 1)
'    Else
'        Start_GetCompany = Start_GetManagementID
'    End If
'
'    Exit Function
'errhdl:
'    WriteError "Start_GetCompany", Err.Description
'    Resume Next
'End Function

Public Sub Start_SetManagementID(ByVal sManagementID As String)
    On Error Resume Next
    
    ThisWorkbook.Sheets(SHEET_START).Cells(7, 8) = sManagementID
    
    Exit Sub
errhdl:
    WriteError "Start_SetManagementID", Err.Description
    Resume Next
End Sub

Public Function Start_GetPOV() As String
    On Error Resume Next
    
    Start_GetPOV = Start_GetVersion & "_" & Start_GetYear & "_" & Start_GetPeriod & "_" & Start_GetManagementID
    
    Exit Function
errhdl:
    WriteError "Start_GetPOV", Err.Description
    Resume Next
End Function

'**********************************************************************************************
' Tool
'**********************************************************************************************

Public Function Tool_GetLanguage() As Long
    On Error GoTo errhdl
    
    Dim lLanguage As Long
    
    lLanguage = TOOL_LANGUAGE_ENG
    
    If CompareStrings("Deutsch", ThisWorkbook.Sheets(SHEET_START).Cells(5, 8).Value) = True Then
        lLanguage = TOOL_LANGUAGE_GER
    ElseIf CompareStrings("English", ThisWorkbook.Sheets(SHEET_START).Cells(5, 8).Value) = True Then
        lLanguage = TOOL_LANGUAGE_ENG
    End If
    
    Tool_GetLanguage = lLanguage
    
    Exit Function
errhdl:
    WriteError "Tool_GetLanguage", Err.Description
    Resume Next
End Function

'**************************      /CHECKLISTE Funktionen       ***********************************************

Public Function Tool_IsSheetDatasheet(ByVal sDatasheet As String) As Boolean
    On Error GoTo errhdl
    Dim bIsDatasheet As Boolean
    
    bIsDatasheet = False
    If GetArrayIndex(aDatasheets_All, sDatasheet) >= 0 Then
        bIsDatasheet = True
    End If
    
    Tool_IsSheetDatasheet = bIsDatasheet
    Exit Function
errhdl:
    WriteError "Tool_IsSheetDatasheet", Err.Description
    Resume Next
End Function

Public Sub Tool_InitAllDatasheets_FromLayout()
    On Error GoTo errhdl
    
    Dim i As Long
    Dim aTemp() As String
    Dim lDatasheets_All As Long
    
    lDatasheets_All = 0
    ReDim aDatasheets_All(0)
    
    Layout_GetAllDatasheets aTemp
    
    For i = LBound(aTemp) To UBound(aTemp)
        If aTemp(i) <> "" Then
            SimpleAppendToArray aDatasheets_All, lDatasheets_All, Trim(aTemp(i))
        End If
    Next

    Exit Sub
errhdl:
    WriteError "Tool_InitAllDatasheets_FromLayout", Err.Description
    Resume Next
End Sub

Public Function Tool_GetDimensionString_FromDimensions_InclValue( _
                        ByVal sVersion As String, _
                        ByVal sYear As String, _
                        ByVal sPeriod As String, _
                        ByVal sAccount As String, _
                        ByVal sMovementRange As String, _
                        ByVal sMovementNumber As String, _
                        ByVal sICP As String, _
                        ByVal sBreakdownRows As String, _
                        ByVal sBreakdownCols As String, _
                        ByVal sValue As String) As String
    
    On Error GoTo errhdl
    Dim sDimensions As String
    
    sDimensions = Tool_GetDimensionString_FromDimensions_ExclValue(sVersion, sYear, sPeriod, sAccount, sMovementRange, sMovementNumber, sICP, sBreakdownRows, sBreakdownCols) & DELIMITER & _
                Trim(sValue)
                
    Tool_GetDimensionString_FromDimensions_InclValue = sDimensions
    Exit Function

errhdl:
    WriteError "Tool_GetDimensionString_FromDimensions_InclValue", Err.Description
    Resume Next
End Function

Public Function Tool_GetDimensionString_FromDimensions_ExclValue( _
                        ByVal sVersion As String, _
                        ByVal sYear As String, _
                        ByVal sPeriod As String, _
                        ByVal sAccount As String, _
                        ByVal sMovementRange As String, _
                        ByVal sMovementNumber As String, _
                        ByVal sICP As String, _
                        ByVal sBreakdownRows As String, _
                        ByVal sBreakdownCols As String) As String
    
    On Error GoTo errhdl
    Dim sDimensions As String
    
    sDimensions = Trim(sVersion) & DELIMITER & _
                    Trim(sYear) & DELIMITER & _
                    Trim(sPeriod) & DELIMITER & _
                    Trim(sAccount) & DELIMITER & _
                    Trim(sMovementRange) & DELIMITER & _
                    Trim(sMovementNumber) & DELIMITER & _
                    Trim(sICP) & DELIMITER & _
                    Trim(sBreakdownRows) & DELIMITER & _
                    Trim(sBreakdownCols)
                   
                
    Tool_GetDimensionString_FromDimensions_ExclValue = sDimensions
    Exit Function

errhdl:
    WriteError "Tool_GetDimensionString_FromDimensions_ExclValue", Err.Description
    Resume Next
End Function

Public Sub Tool_GetDimensions_FromDimensionString(ByVal sDimensions As String, _
                        ByRef sVersion As String, _
                        ByRef sYear As String, _
                        ByRef sPeriod As String, _
                        ByRef sAccount As String, _
                        ByRef sMovementRange As String, _
                        ByRef sMovementNumber As String, _
                        ByRef sICP As String, _
                        ByRef sBreakdownRows As String, _
                        ByRef sBreakdownCols As String, _
                        Optional ByRef sValue As String)
    On Error GoTo errhdl
    Dim aDimensions() As String
    aDimensions = Split(sDimensions, DELIMITER)
    
    sVersion = ""
    sYear = ""
    sPeriod = ""
    sAccount = ""
    sICP = ""
    sMovementNumber = ""
    sMovementRange = ""
    sBreakdownRows = ""
    sBreakdownCols = ""
    sValue = ""
    
    If UBound(aDimensions) = 9 Or UBound(aDimensions) = 8 Then
        sVersion = aDimensions(0)
        sYear = aDimensions(1)
        sPeriod = aDimensions(2)
        sAccount = aDimensions(3)
        sMovementRange = aDimensions(4)
        sMovementNumber = aDimensions(5)
        sICP = aDimensions(6)
        sBreakdownRows = aDimensions(7)
        sBreakdownCols = aDimensions(8)
        
        If UBound(aDimensions) = 9 Then
            sValue = aDimensions(9)
        End If
    End If

    Exit Sub

errhdl:
    WriteError "Tool_GetDimensions_FromDimensionString", Err.Description
    Resume Next
End Sub


Public Sub Tool_MakeDataInputCell(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long)
    On Error GoTo errhdl

    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
    ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = False
    Exit Sub

errhdl:
    WriteError "Tool_MakeDataInputCell", Err.Description
    Resume Next
End Sub

Public Function Tool_IsDataInputCell(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long) As Boolean
    On Error GoTo errhdl

    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY And _
       ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = False Then
        Tool_IsDataInputCell = True
    Else
        Tool_IsDataInputCell = False
    End If
    Exit Function

errhdl:
    WriteError "Tool_IsDataInputCell", Err.Description
    Resume Next
End Function

Public Sub Tool_MakeNODataInputCell(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long)
    On Error GoTo errhdl
    'Debug.Print "NODATAINPUT: " & sDatasheet & ": " & ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, 2)

    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
    ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = True
    Exit Sub

errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub

Public Function Tool_IsNODataInputCell(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long) As Boolean
    On Error GoTo errhdl
    'Debug.Print "NODATAINPUT: " & sDatasheet & ": " & ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, 2)

    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID And _
     ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = True Then
        Tool_IsNODataInputCell = True
    Else
        Tool_IsNODataInputCell = False
    End If
    
    Exit Function

errhdl:
    WriteError "Tool_IsNODataInputCell", Err.Description
    Resume Next
End Function






















Attribute VB_Name = "Modul10"
Option Explicit

Public Const LINK_SHOW_ROW_OLD_FIRST As Long = 40
Public Const LINK_SHOW_ROR_DELTA As Long = 4
Public Const LINK_SHOW_MAX As Long = 10

Public Const LINKS_SHOW_COL As Long = 2

'daproh

Public Function daproh_Get_Row_MID(ByVal sMID As String) As Long
    On Error GoTo errhdl
    daproh_Get_Row_MID = -1
    daproh_Get_Row_MID = GetFirstOccurence("daproh", 1, Trim(sMID))
    
    Exit Function
errhdl:
    WriteError "SET3_DaprohSettings_GetCol_daprohNotLeading", Err.Description
    Resume Next
End Function


'Messages

Public Sub Messages_AppendToMessages(ByVal sMessage As String)
    On Error GoTo errhdl
    
    '1.Nachricht
    
    ThisWorkbook.Sheets("Messages").Rows("3:3").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
    
    ThisWorkbook.Sheets("Messages").Cells(3, 1) = GetTimestamp_UserFormat
    ThisWorkbook.Sheets("Messages").Cells(3, 1).NumberFormat = "@"
    
    ThisWorkbook.Sheets("Messages").Cells(3, 2) = SET1_RunTimeSettings_GetAction
    ThisWorkbook.Sheets("Messages").Cells(3, 3) = sMessage
    ThisWorkbook.Sheets("Messages").Cells(3, 4) = Start_SpecialExport_GetICMOnly
    ThisWorkbook.Sheets("Messages").Cells(3, 5) = Start_SpecialExport_GetOrdEquSal
    
    ThisWorkbook.Sheets("Messages").Cells(3, 6) = ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_Datasheets)
    ThisWorkbook.Sheets("Messages").Cells(3, 7) = ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2)
    ThisWorkbook.Sheets("Messages").Cells(3, 8) = ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementRanges)
    ThisWorkbook.Sheets("Messages").Cells(3, 9) = ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementNumbers)
    
    If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = True Then
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             ThisWorkbook.Sheets("Messages").Cells(3, 10) = "Special Feature: Formulas"
        Case Else
             ThisWorkbook.Sheets("Messages").Cells(3, 10) = "Spezialfall: Formeln"
        End Select
    End If
    
    If SET1_RunTimeSettings_Schalter_GetSourceSystem <> SOURCE_SYSTEM_SAP Then
        ThisWorkbook.Sheets("Messages").Cells(3, 11) = "Sourcesystem=" & SET1_RunTimeSettings_Schalter_GetSourceSystem
    End If
    Exit Sub
errhdl:
    WriteError "Messages_AppendToMessages", Err.Description
    Resume Next
End Sub

'Formulas'Formulas

Public Sub Tool_Links_ClearLinkInfo()
    On Error GoTo errhdl

    Dim i As Long

    'Formulas B53, immer + 4 10 mal
    
    'clear links
    For i = 1 To LINK_SHOW_MAX
        'old
        ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + (i - 1) * LINK_SHOW_ROR_DELTA, LINKS_SHOW_COL) = ""
        'new (+1)
        ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + ((i - 1) * LINK_SHOW_ROR_DELTA) + 1, LINKS_SHOW_COL) = ""
    Next
    Exit Sub
errhdl:
    WriteError "Tool_Links_ClearLinkInfo", Err.Description
    Resume Next
End Sub

Public Sub Tool_LinkChange()
    On Error GoTo errhdl
    
    Dim sNameold As String
    Dim sNamenew As String
    Dim sMsg As String
    
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sMsg = "Please select the currently linked file first!"
        Case Else
             sMsg = "Bitte w|fffd|hlen Sie jetzt die ALTE verkn|fffd|pfte Datei!"
    End Select
    
    MsgBox sMsg
    
    sNameold = File_Dialog_SingleFile
    
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sMsg = "Please select the destination linked file!"
        Case Else
             sMsg = "Bitte w|fffd|hlen Sie jetzt die NEUE verkn|fffd|pfte Datei!"
    End Select
    
    MsgBox sMsg
    
    sNamenew = File_Dialog_SingleFile
 
    ActiveWorkbook.ChangeLink Name:=sNameold, _
        NewName:=sNamenew _
        , Type:=xlExcelLinks
        
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sMsg = "Change Link was successfull!"
        Case Else
             sMsg = "Verknuepfungen aktualisieren war erfolgreich!"
    End Select
    MsgBox sMsg
        
    Exit Sub
errhdl:
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sMsg = "Change Link was not successfull, please try again!"
        Case Else
             sMsg = "Verknuepfungen aktualisieren war nicht erfolgreich, Bitte versuchen Sie es erneut!"
    End Select
    MsgBox sMsg
    Exit Sub
End Sub

Public Sub Tool_LinksShow()
    On Error GoTo errhdl
    
    Dim vLinks As Variant
    Dim i As Long
    Dim sMsgbox As String
    'Formulas B53, immer + 4 10 mal
    
    sMsgbox = ""
    
    'clear links
    Tool_Links_ClearLinkInfo
        
    vLinks = ActiveWorkbook.LinkSources(xlExcelLinks)
    
    If Not IsEmpty(vLinks) Then
        For i = 1 To UBound(vLinks)
            If i <= 10 Then
                ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + (i - 1) * LINK_SHOW_ROR_DELTA, LINKS_SHOW_COL) = vLinks(i)
                ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + ((i - 1) * LINK_SHOW_ROR_DELTA) + 1, LINKS_SHOW_COL) = vLinks(i)
            Else
                If sMsgbox <> "" Then sMsgbox = sMsgbox & vbNewLine
                sMsgbox = sMsgbox & "To many links in workbook, we support 10 links"
            End If
        Next
    End If
    
    If sMsgbox <> "" Then
        MsgBox sMsgbox
    End If
        
    Exit Sub
errhdl:
    If sMsgbox <> "" Then sMsgbox = sMsgbox & vbNewLine
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sMsgbox = "Show Links was not successfull, please try again!"
        Case Else
             sMsgbox = "Verknuepfungen anzeigen war nicht erfolgreich, Bitte versuchen Sie es erneut!"
    End Select

    Exit Sub
End Sub

Public Sub Tool_LinksChange()

    On Error GoTo errhdl
    
    Dim vLinks As Variant
    Dim i As Long
    Dim sMsgbox As String
    Dim sNameold As String
    Dim sNamenew As String
    Dim sError As String
    
    sError = ""
    
    'Formulas B53, immer + 4 10 mal
    
    For i = 1 To LINK_SHOW_MAX
    
        sNameold = ""
        sNamenew = ""
        sNameold = ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + (i - 1) * LINK_SHOW_ROR_DELTA, LINKS_SHOW_COL)
        sNamenew = ThisWorkbook.Sheets("Formulas").Cells(LINK_SHOW_ROW_OLD_FIRST + ((i - 1) * LINK_SHOW_ROR_DELTA) + 1, LINKS_SHOW_COL)
        
        If CompareStrings(sNameold, "") = False And CompareStrings(sNamenew, "") = False And _
           CompareStrings(sNameold, sNamenew) = False Then
           
            If File_DoesFileExist(sNameold) = True And File_DoesFileExist(sNamenew) = True Then
            
                   ActiveWorkbook.ChangeLink Name:=sNameold, _
                   NewName:=sNamenew _
                   , Type:=xlExcelLinks
            Else
                If sError <> "" Then sError = sError & vbNewLine
                If File_DoesFileExist(sNameold) = False Then
                    sError = sError & i & ". " & "FILE DOES NOT EXIST: " & sNameold & "!"
                End If
                If File_DoesFileExist(sNamenew) = False Then
                    sError = sError & i & ". " & "FILE DOES NOT EXIST: " & sNamenew & "!"
                End If
            End If
        End If
            
    Next
    
    Tool_LinksShow
    
    If sError <> "" Then
        MsgBox sError
    End If
        
    Exit Sub
errhdl:
    If sError <> "" Then sError = sError & vbNewLine
    
    Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
             sError = "Error occured:" & Err.Description
        Case Else
             sError = "Es ist ein Fehler aufgetreten:" & Err.Description
    End Select

    Exit Sub
End Sub











Attribute VB_Name = "Modul2"
'Option Explicit
'
''###################################################
''#          Allgmeine Funktionen                   #
''###################################################

Public Function ReplaceDoubleDelimiter(ByVal sSource As String) As String
    
    On Error GoTo errhdl
    Dim sDestination As String
    
    sDestination = sSource
    While InStr(1, sDestination, DELIMITER & DELIMITER) > 0
        sDestination = Replace(sDestination, DELIMITER & DELIMITER, DELIMITER)
    Wend
    
    ReplaceDoubleDelimiter = sDestination
    
    Exit Function
errhdl:
    WriteError "ReplaceDoubleDelimiter", Err.Description
    Resume Next
End Function


Public Function AppendToArray_Long(ByRef aMyArray() As Long, ByVal lMyValue As Long, Optional ByVal bNoDoubles As Boolean = True) As Boolean
    On Error GoTo Err_Exit
    Dim i As Long
    Dim bAppend As Boolean

    bAppend = True

    If IsArray(aMyArray) Then

         If bNoDoubles = True Then

            For i = LBound(aMyArray) To UBound(aMyArray)
                If aMyArray(i) = lMyValue Then
                    bAppend = False
                     Exit For
                End If
            Next
        End If

        If bAppend = True Then
            ReDim Preserve aMyArray(UBound(aMyArray) + 1)
            aMyArray(UBound(aMyArray)) = lMyValue
        End If
    Else
        GoTo Err_Exit
    End If

    AppendToArray_Long = bAppend

    Exit Function

Err_Exit:

    ReDim aMyArray(0)
    aMyArray(0) = lMyValue
    AppendToArray_Long = bAppend
    Exit Function

End Function

Public Function IsArrayEmpty(aMyArray() As String) As Boolean
    On Error GoTo errhdl

    Dim i As Long
    Dim bEmpty As Boolean


    bEmpty = True
    For i = LBound(aMyArray) To UBound(aMyArray)
        If aMyArray(i) <> "" Then
            bEmpty = False
        End If
    Next

    IsArrayEmpty = bEmpty
    Exit Function
errhdl:
    IsArrayEmpty = True
    Exit Function
    'WriteError "IsArrayEmpty", Err.Description
End Function

Public Function CompareStrings(ByVal strValue1 As String, ByVal strValue2 As String) As Boolean
    On Error GoTo errhdl
    If Trim(UCase(strValue1)) = Trim(UCase(strValue2)) Then
        CompareStrings = True
    Else
        CompareStrings = False
    End If
    Exit Function
errhdl:
    WriteError "CompareStrings", Err.Description
    Resume Next
End Function

Public Function GetColLetter2(ByVal lColIndex As Long) As String
    On Error GoTo errhdl
    'NEU
    '27: AA
    '28: AB

    '52: AZ
    '53: BA
    'letzte: IV

    'Formel

    'erster Buchstabe: Round( (lColIndex-1) / 26 )
    '0: leer

    'zweiter Buchstabe: lColIndex mod 26
    'Rest 0: Z
    'sonst: Chr(64 + lColIndex)
    Dim sL1 As String
    Dim sL2 As String

    Dim sTemp As String

    sL1 = ""
    sL2 = ""
    sTemp = ""

    If lColIndex <= 26 Then
        GetColLetter2 = Chr(64 + lColIndex)
    Else

        sTemp = CStr((lColIndex - 1) / 26)
        If InStr(1, sTemp, ",") > 0 Then
            sTemp = Mid(sTemp, 1, InStr(1, sTemp, ",") - 1)
        End If
        sL1 = Chr(64 + CInt(sTemp))

        If lColIndex Mod 26 = 0 Then
            sL2 = "Z"
        Else
            sL2 = Chr(64 + (lColIndex Mod 26))
        End If

        GetColLetter2 = sL1 & sL2
    End If

    Exit Function

errhdl:
    Debug.Print "ERR: " & Err.Description
    Resume Next

End Function

Public Function CopyArray(ByRef MyArray() As String, ByRef MyNewArray() As String)
    On Error GoTo errhdl
    Dim i As Long

    ReDim MyNewArray(UBound(MyArray))
    For i = LBound(MyArray) To UBound(MyArray)
        MyNewArray(i) = MyArray(i)
    Next

    Exit Function
errhdl:
    WriteError "CopyArray", Err.Description
    Resume Next
End Function

Public Function SimpleAppendToArray(ByRef MyArray() As String, ByRef lcounter As Long, ByVal MyValue As String)
    On Error GoTo errhdl

    lcounter = lcounter + 1
    ReDim Preserve MyArray(lcounter)

    MyArray(lcounter) = MyValue
    Exit Function
errhdl:
    WriteError "SimpleAppendToArray", Err.Description
    Resume Next
End Function

Public Function AppendToArray(ByRef aMyArray() As String, ByVal sMyValue As String, Optional ByVal bNoDoubles As Boolean = True) As Boolean
    On Error GoTo Err_Exit
    Dim i As Long
    Dim bAppend As Boolean

    bAppend = True

    If IsArray(aMyArray) Then

         If bNoDoubles = True Then

            For i = LBound(aMyArray) To UBound(aMyArray)
                If CompareStrings(aMyArray(i), sMyValue) = True Then
                    bAppend = False
                     Exit For
                End If
            Next
        End If

        If bAppend = True Then
            ReDim Preserve aMyArray(UBound(aMyArray) + 1)
            aMyArray(UBound(aMyArray)) = sMyValue
        End If
    Else
        GoTo Err_Exit
    End If

    AppendToArray = bAppend

    Exit Function

Err_Exit:

    ReDim aMyArray(0)
    aMyArray(0) = sMyValue
    AppendToArray = bAppend
    Exit Function

End Function

Public Function GetArrayIndex(aMyArray() As String, sMyValue As String)
    Dim lIndex As Long
    Dim i As Long

    On Error Resume Next
    lIndex = -1
    For i = 0 To UBound(aMyArray)
        If CompareStrings(aMyArray(i), sMyValue) = True Then
            lIndex = i
            Exit For
        End If
    Next

    GetArrayIndex = lIndex
End Function

Public Function GetTimestamp_VeryShortFormat()
    On Error GoTo errhdl
    GetTimestamp_VeryShortFormat = Format(Date, "mmdd" & Format(Time, "hh"))
Exit Function

errhdl:
    WriteError "GetTimestamp_VeryShortFormat", Err.Description
    Resume Next
End Function

Public Function GetTimestamp_ShortFormat()
    On Error GoTo errhdl
    GetTimestamp_ShortFormat = Format(Date, "yymmdd" & "_" & Format(Time, "hhmm"))
Exit Function

errhdl:
    WriteError "GetTimestamp_ShortFormat", Err.Description
    Resume Next
End Function

Public Function GetTimestamp_LongFormat()
    On Error GoTo errhdl
    GetTimestamp_LongFormat = Format(Date, "mmdd" & "_" & Format(Time, "hhmmss"))
    'GetTimestamp_LongFormat = Format(Date, "yyyymmdd" & "_" & Format(Time, "hhmmss"))
Exit Function

errhdl:
    WriteError "GetTimestamp_LongFormat", Err.Description
    Resume Next
End Function

Public Function GetTimestamp_UserFormat()
    On Error GoTo errhdl
    GetTimestamp_UserFormat = Date & " " & Time

Exit Function
errhdl:
    WriteError "GetTimestamp_UserFormat", Err.Description
    Resume Next
End Function



' *** FILE FUNCTIONS from Common Functions, append Error Handling ***

Public Function CreateFolderIfNotExists(ByVal strPath As String)
    On Error Resume Next
    Dim objFso As FileSystemObject
    
    Dim objFolder As Folder
    
    Set objFso = New FileSystemObject
    Set objFolder = objFso.GetFolder(strPath)
       
    If objFolder Is Nothing Then
        objFso.CreateFolder strPath
    End If
    
    Set objFso = Nothing
End Function

Public Function DoesFileExist(ByVal strPathName As String) As Boolean
    On Error Resume Next
    Dim objFso As FileSystemObject
    Dim objfile As File
    
    Set objFso = New FileSystemObject
    Set objfile = objFso.GetFile(strPathName)
    
    If objfile Is Nothing Then
        DoesFileExist = False
    Else
        DoesFileExist = True
    End If
    
    Set objfile = Nothing
    Set objFso = Nothing
End Function

Public Sub SaveToFile(ByVal strSourcePathName As String, ByVal strContent As String)
    On Error Resume Next
    
    Dim lngHandle As Long
    lngHandle = FreeFile
    Open strSourcePathName For Output Access Write As #lngHandle
    
    Print #lngHandle, strContent
 
    Close lngHandle
End Sub

Public Function ReadFromFile(ByVal strSourcePathName As String) As String
    On Error Resume Next
    
    Dim strContent As String
    Dim objfile As File
    Dim objStream As TextStream
    Dim objFso As New FileSystemObject
    
    On Error Resume Next
    Set objfile = objFso.GetFile(strSourcePathName)
    Set objStream = objfile.OpenAsTextStream(ForReading)
    
    ReadFromFile = objStream.ReadAll
          
    Set objfile = Nothing
    Set objStream = Nothing
    Set objFso = Nothing
End Function


Public Sub CopyStringArray(ByRef aArray1() As String, ByRef aArray2() As String)
    Dim i As Long
        
    ReDim aArray2(LBound(aArray1) To UBound(aArray1))
    For i = LBound(aArray1) To UBound(aArray1)
        aArray2(i) = aArray1(i)
    Next
    
End Sub

Function BubbleSortString(ByRef sMyString As String) As String
    Dim aMyArray() As String
    Dim i As Long
    Dim sout As String
    
    aMyArray = Split(sMyString, DELIMITER)
    
    BubbleSort aMyArray
    
    
    sout = DELIMITER
    For i = LBound(aMyArray) To UBound(aMyArray)
        If aMyArray(i) <> "" Then
            sout = sout & aMyArray(i) & DELIMITER
        End If
    Next
    
    BubbleSortString = sout
End Function
Function BubbleSort(TempArray As Variant)
    Dim Temp As Variant
    Dim i As Integer
    Dim NoExchanges As Integer

    ' Loop until no more "exchanges" are made.
    Do
        NoExchanges = True

        ' Loop through each element in the array.
        For i = 1 To UBound(TempArray) - 1

            ' If the element is greater than the element
            ' following it, exchange the two elements.
            If TempArray(i) > TempArray(i + 1) Then
                NoExchanges = False
                Temp = TempArray(i)
                TempArray(i) = TempArray(i + 1)
                TempArray(i + 1) = Temp
            End If
        Next i
    Loop While Not (NoExchanges)

End Function





Attribute VB_Name = "Modul3"
Option Explicit

'###################################################
'        Upload Funktionen
'
'           'SAP
'
'               - SAP_GetDatasheet_ByAccount (WICHTIG: Hier wird die allgemeine Namensgebung der Konten ausgwertet!)
'               - SAP_GetPOSTfixByStatisticTopAccount / SAP_GetStatisticTopAccountByPREfix
'
'           'Layout:
'
'               - Scenario, Year, Period und Custom1+Custom4 in welcher Spalte in welchem Blatt
'
'            'Start
'
'                - Get Scenario, Year, Period, ManagementID
'
'            'Texte
'
'            'Tool
'
'                - GetLanguage
'                - InitTopAccounts (Statistic)
'                - IsSheetDatasheet
'
'
'            'SettingsI und II
'
'                   - Action Options
'                   - Schalter
'                   - Calling Makro
'
'                   - (Reported-) Periods (Tool Verion, Online Values)
'                   - Opening Values
'                   - Naming Conventions

'
'            'Options

'###################################################

Public Const LAYOUT_COL_REPORTINGPERIOD_ID As Long = 1
Public Const LAYOUT_COL_VERSION As Long = 2
Public Const LAYOUT_COL_YEAR As Long = 3
Public Const LAYOUT_COL_PERIOD As Long = 4
Public Const LAYOUT_COL_MovementNumber As Long = 5
Public Const LAYOUT_COL_BreakdownCols As Long = 6

Public Const LAYOUT_COL_DATASHEETCATEGORY As Long = 8
Public Const LAYOUT_COL_DATASHEET As Long = 9
Public Const LAYOUT_COL_COLDATASHEET As Long = 10

Public Const LAYOUT_COL_SEARCHSTRING1 As Long = 12
Public Const LAYOUT_COL_SEARCHSTRING2 As Long = 13

Public Const LAYOUT_COL_FILENAME As Long = 16

'**********************************************************************************************
' SAP
'**********************************************************************************************

Public Sub SAP_GetDatasheetAndCol_ByAccountAndOtherParameters( _
                    ByVal sAccount As String, _
                    ByVal sVersion As String, _
                    ByVal sYear As String, _
                    ByVal sPeriod As String, _
                    ByVal sMovementNumber As String, _
                    ByVal sBreakdownCols As String, _
                    ByRef sDatasheet As String, _
                    ByRef lDatasheetCol As Long)
                                  
                                    
On Error GoTo errhdl
    
    sDatasheet = SAP_GetDatasheet_ByAccount(sAccount)
    lDatasheetCol = Layout_GetColIndex_ByDatasheet_AndOtherParameters(sDatasheet, sVersion, sYear, sPeriod, sMovementNumber, sBreakdownCols)
    
    Exit Sub

errhdl:
    WriteError "SAP_GetDatasheetAndCol_ByAccountAndOtherParameters", sAccount & " / " & Err.Description
    Resume Next
End Sub

Public Function SAP_GetDatasheet_ByAccount(ByVal sAccount As String) As String
                                                                  
On Error GoTo errhdl
  
    Dim sStatisticSheetName As String
    Dim sStatisticTopAccount As String
    Dim sPrefix As String
    Dim sDatasheet As String
    
    If IsNumeric(sAccount) = True Then

        Select Case Mid(Trim(sAccount), 1, 1)
        Case "1", "2"
            'BALANCE
            sDatasheet = SHEET_BALANCE

        Case "3", "4", "5", "6", "7", "8"
            'INCOME
            sDatasheet = SHEET_INCOME
        End Select

    Else 'not numeric

        Select Case UCase(sAccount)
        Case "ORDER_IN", "PENS_OPPAY", "ATZPSV_PAY", "PENS_OPEXP", "ATZ_PSV", "CETKVACOR", "MARGIN_ICP", "ALLOCPVOL", "TOOL_VERS"
                sDatasheet = SHEET_400

        Case "ORDER_HAND"
                sDatasheet = SHEET_400a
        Case "EXTCUST300"
                sDatasheet = "ACTEXT"
        Case "HBI1160500"
                'HBI Sonderfall wg gleiches Prefix in zwei Formularen
                sDatasheet = "804_HBI"
        Case "LFL7103300", "LFR7105300"
            sDatasheet = "710_MT"
        Case Else

            'If InStr(1, sAccount, "_") > 0 Then

                sPrefix = Mid(sAccount, 1, 3)
                
                'Sonderfall TKE
                If CompareStrings(sPrefix, "TKE") = True Then
                    sDatasheet = SHEET_TKE
                Else
                     'Sonderfall Remaining Terms#
                    If sPrefix = "RT_" Then
                        sPrefix = "RT"
                    End If
                    
                    sStatisticTopAccount = ""
                    sStatisticTopAccount = SAP_GetStatisticTopAccountByPREfix(sPrefix)
    
                    sStatisticSheetName = sStatisticTopAccount & "_" & SAP_GetPOSTfixByStatisticTopAccount(sStatisticTopAccount)
                    sDatasheet = sStatisticSheetName
                
                End If

            'End If

        End Select

    End If
    
    SAP_GetDatasheet_ByAccount = sDatasheet
    Exit Function

errhdl:
    WriteError "SAP_GetDatasheet_ByAccount", sAccount & " / " & Err.Description
    Resume Next
End Function

Public Function SAP_GetPOSTfixByStatisticTopAccount(ByVal sAccount As String)
    On Error GoTo errhdl
    Dim sPostfix As String
    
    '... Fkt bisher nur genutzt, um beim Aufbau der Metadaten das Blatt richtig zusammen zu setzen
    '... Sonderfall 800er (HBI) werden erstmal nicht automatisch erzeugt
    
    Select Case sAccount
    Case "600"
        sPostfix = "ALL"
    Case "700"
        sPostfix = "RDC"
    Case "701"
        sPostfix = "TRA"
    Case "702"
        sPostfix = "RT"
'    Case "703"
'        sPostfix = "RESTAT"
    Case "704"
        sPostfix = "REP"
    Case "705"
        sPostfix = "PRI"
    Case "851"
        sPostfix = "DUE"
    Case "708"
        sPostfix = "PAU"
    Case "709"
        sPostfix = "IPR"
        
    Case "710"
        sPostfix = "LAD"             'Achtung Sonderfall
        
    Case "711"
        sPostfix = "POC"
    Case "712"
        sPostfix = "INV"
        
    Case "714"
        sPostfix = "SIT"
    Case "715"
        sPostfix = "FEX"
    Case "716"
        sPostfix = "PRO"
    Case "717"
        sPostfix = "DER"
    Case "718"
        sPostfix = "GRA"
'    Case "719"
'        sPostfix = "IDC"
    Case "720"
        sPostfix = "COM"
    Case "721"
        sPostfix = "COL"
    Case "722"
        sPostfix = "DER"
    Case "723"
        sPostfix = "INT"
    Case "725"
        sPostfix = "AUD"
        
    Case "750"
        sPostfix = "REV"
        
    Case "803"
        sPostfix = "HBI"
    Case "804"
        sPostfix = "HBI"
        
    Case "850"
        sPostfix = "DCO"
        
        
    End Select
    
    SAP_GetPOSTfixByStatisticTopAccount = sPostfix
    
    Exit Function
    
errhdl:
    WriteError "SAP_GetPOSTfixByStatisticTopAccount", Err.Description
    Resume Next
End Function

Public Function SAP_GetStatisticTopAccountByPREfix(ByVal sPrefix As String)
    On Error GoTo errhdl
    Dim sAccount As String
    
    Select Case sPrefix
    
    Case "ALL"
        sAccount = "600"
    Case "RDC"
        sAccount = "700"
    Case "TRA"
        sAccount = "701"
    Case "RT"
        sAccount = "702"
'    Case "RESTAT"
'        sAccount = "703"
    Case "REP"
        sAccount = "704"
    Case "PRI"
        sAccount = "705"
    Case "DUE"
        sAccount = "851"
        
    Case "PAU"
        sAccount = "708"
    Case "PAG"
        sAccount = "708"
    
    Case "IPR"
        sAccount = "709"
        
    Case "LAD"
        sAccount = "710"
    Case "CAD"
        sAccount = "710"
    Case "LOT"
        sAccount = "710"
        

    Case "LFL"
        sAccount = "710"
    Case "LFR"
        sAccount = "710"
    Case "LOC"
        sAccount = "710"
    Case "LOL"
        sAccount = "710"
    Case "LOR"
        sAccount = "710"

        
    Case "POC"
        sAccount = "711"
    Case "INV"
        sAccount = "712"
        
    Case "SIT"
        sAccount = "714"
    Case "FEX"
        sAccount = "715"
    Case "PRO"
        sAccount = "716"
    Case "DER"
        sAccount = "717"
    Case "GRA"
        sAccount = "718"
'    Case "IDC"
'        sAccount = "719"
    Case "COM"
        sAccount = "720"
    Case "COL"
        sAccount = "721"
    Case "DER"
        sAccount = "722"
    Case "INT"
        sAccount = "723"
        
    Case "AUD"
        sAccount = "725"
        
    Case "REV"
        sAccount = "750"
        
    Case "HBI"
        sAccount = "803"
        
    Case "DCO"
        sAccount = "850"
        
    End Select
    
    SAP_GetStatisticTopAccountByPREfix = sAccount
    
    Exit Function
    
errhdl:
    WriteError "SAP_GetStatisticTopAccountByPREfix", Err.Description
    Resume Next
End Function

'**********************************************************************************************
' Layout:
'**********************************************************************************************

Public Sub Layout_GetAllDatasheets(ByRef aDatasheets_All() As String)
    On Error GoTo errhdl
    
'Layout
'Datasheet:10

    Dim i As Long
    Dim j As Long
    
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    
    ReDim aDatasheets_All(0)
    
    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout
        AppendToArray aDatasheets_All, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, 9), bNoDoubles:=True
    Next
    
    Exit Sub
    
errhdl:
    'WriteError "Layout_GetAllDatasheets", Err.Description
    Resume Next
End Sub

Public Sub Layout_GetDatasheetCols_Selected(ByVal sDatasheet As String, _
                                        ByRef aColsSelected() As Long, _
                                        ByRef aFilePathNamesByCols() As String)
    On Error GoTo errhdl


    Dim i As Long
    Dim j As Long
    
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    
    Dim bAppend As Boolean
    
    Dim sReportingPeriodID As String
    Dim sVersion As String
    Dim sYear As String
    Dim sPeriod As String
    Dim sMovementNumber As String
    Dim sBreakdownCol As String
    
    Dim sFile As String
    
    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    ReDim aColsSelected(0)
    ReDim aFilePathNamesByCols(0)
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout

        If CompareStrings(sDatasheet, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) = True Then
            bAppend = True
            
            sReportingPeriodID = ""
            sVersion = ""
            sYear = ""
            sPeriod = ""
            sMovementNumber = ""
            sBreakdownCol = ""
            sFile = ""
            
            sReportingPeriodID = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_REPORTINGPERIOD_ID)
            sVersion = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_VERSION)
            sYear = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_YEAR)
            sPeriod = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_PERIOD)
            sMovementNumber = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_MovementNumber)
            sBreakdownCol = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_BreakdownCols)
            
            If SET1_RunTimeSettings_IsMovementNumber_Selected(sMovementNumber) = False Then
                bAppend = False
            End If
            
            If SET1_RunTimeSettings_IsReportingPeriodSelected_ByVersionYearAndPeriod(sVersion, sYear, sPeriod) = False Then
                bAppend = False
            End If
            
            'Sonderfall ACTEXT
            If CompareStrings(sDatasheet, "ACTEXT") = True Then
                If Trim(sBreakdownCol) = "" Or CompareStrings(sBreakdownCol, "Laender Total") = True Or CompareStrings(sBreakdownCol, "Countries Total") = True Then
                    bAppend = False
                End If
            End If

            If bAppend = True Then
                sFile = ""
                sFile = Layout_GetExportFiles_byReportingPeriodIDsAndDatasheet(sReportingPeriodID, sDatasheet)
            
                If UBound(aColsSelected) = 0 And aColsSelected(0) = 0 Then
                    aColsSelected(0) = CLng(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_COLDATASHEET))
                    aFilePathNamesByCols(0) = sFile
                Else
                    AppendToArray_Long aColsSelected, CLng(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_COLDATASHEET)), bNoDoubles:=False
                    AppendToArray aFilePathNamesByCols, sFile, bNoDoubles:=False
                End If
            End If

        End If
    Next
    
    Exit Sub
    
errhdl:
    WriteError "Layout_GetDatasheetCols_Selected ", Err.Description
    Resume Next
End Sub

Public Sub Layout_GetDatasheetCols_All(ByVal sDatasheet As String, _
                                ByRef aColsToLoop() As Long)
    On Error GoTo errhdl


    Dim i As Long
    Dim j As Long
    
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    
    Dim bAppend As Boolean
    
    ReDim aColsToLoop(0)
    
    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout
    
        If CompareStrings(sDatasheet, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) = True Then

            AppendToArray_Long aColsToLoop, CLng(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_COLDATASHEET)), bNoDoubles:=False
        
        End If
    Next
    
    Exit Sub
    
errhdl:
    WriteError "Layout_GetDatasheetCols_All", Err.Description
    Resume Next
End Sub

Public Function Layout_GetColIndex_ByDatasheet_AndOtherParameters(ByVal sDatasheet As String, _
                                              ByVal sVersion As String, _
                                              ByVal sYear As String, _
                                              ByVal sPeriod As String, _
                                              ByVal sMovementNumber As String, _
                                              ByVal sBreakdownCols As String) As Long
    On Error GoTo errhdl

    Dim sSearchString As String
    Dim lRow As Long
    Dim lColIndex As Long
    
    lColIndex = 0
    sSearchString = Trim(sVersion) & "_" & _
                   Trim(sYear) & "_" & _
                   Trim(sPeriod) & "_" & _
                   Trim(sMovementNumber) & "_" & _
                   Trim(sBreakdownCols) & "_" & _
                   Trim(sDatasheet)
                   
    lRow = GetFirstOccurence(SHEET_LAYOUT, LAYOUT_COL_SEARCHSTRING1, sSearchString)
    
    If lRow > 0 Then
        lColIndex = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_COLDATASHEET)
    End If
    
    Layout_GetColIndex_ByDatasheet_AndOtherParameters = lColIndex

    Exit Function
    
errhdl:
    WriteError "Layout_GetColIndex_ByDatasheet_AndOtherParameters", sDatasheet & ", " & sMovementNumber & ", " & sBreakdownCols & " / " & Err.Description
    Resume Next
End Function

Public Function Layout_GetMaxColIndex_byDatasheet(ByVal sDatasheet As String) As Long
    On Error GoTo errhdl

    Dim i As Long
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    Dim lCol As Long
    Dim lColMax As Long
    
    lColMax = 0
    ReDim aMovementNumber(0)
    
    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout
    
        If CompareStrings(sDatasheet, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) = True Then
            'Debug.Print i
            lCol = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_COLDATASHEET)
            If lCol > lColMax Then
                lColMax = lCol
            End If
            
        End If
        
    Next
    
    Layout_GetMaxColIndex_byDatasheet = lColMax
    
    Exit Function
errhdl:
    WriteError "Layout_GetMaxColIndex_byDatasheet", Err.Description
    Resume Next
End Function

Public Sub Layout_GetMinMaxColIndex_byDatasheet(ByVal sDatasheet As String, ByRef lMin As Long, ByRef lMax As Long)
    On Error GoTo errhdl

    Dim i As Long
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    Dim lCol As Long
    
    Dim lColMax As Long
    Dim lColMin As Long
    
    lColMax = 0
    lColMin = 0
    ReDim aMovementNumber(0)
    
    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout
    
        If CompareStrings(sDatasheet, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) = True Then
            
            lCol = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_COLDATASHEET)
            
            If lColMin = 0 And lColMax = 0 Then
                lColMin = lCol
                lColMax = lCol
            End If
            
            If lCol > lColMax Then
                lColMax = lCol
            End If
            If lCol < lColMin Then
                lColMin = lCol
            End If
            
        End If
        
    Next
    
    lMin = lColMin
    lMax = lColMax
    
    Exit Sub
errhdl:
    WriteError "Layout_GetMinMaxColIndex_byDatasheet", Err.Description
    Resume Next
End Sub

Public Sub Layout_GetVersionYearPeriod_ByDatasheetAndCol(ByVal sDatasheet As String, _
                                            ByVal lCol As Long, _
                                            ByRef sVersion As String, _
                                            ByRef sYear As String, _
                                            ByRef sPeriod As String)
    On Error GoTo errhdl


    Dim sSearchString As String
    Dim lRow As Long
    Dim lColIndex As Long
    
    lColIndex = 0
    sSearchString = Trim(sDatasheet) & "_" & _
                   Trim(lCol)
                   
    lRow = GetFirstOccurence(SHEET_LAYOUT, LAYOUT_COL_SEARCHSTRING2, sSearchString)
    
    sVersion = ""
    sYear = ""
    sPeriod = ""
    
    If lRow > 0 Then
        sVersion = Trim(UCase(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_VERSION)))
        sYear = Trim(UCase(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_YEAR)))
        sPeriod = Trim(UCase(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_PERIOD)))
    End If

    Exit Sub
    
errhdl:
    WriteError "Layout_GetVersionYearPeriod_ByDatasheetAndCol", sDatasheet & ", " & lCol & " / " & Err.Description
    Resume Next
End Sub

Public Function Layout_GetBreakdownCols_ByDatasheetAndCol(ByVal sDatasheet As String, _
                                            ByVal lCol As Long) As String
    On Error GoTo errhdl

    Dim sSearchString As String
    Dim lRow As Long
    Dim lColIndex As Long
    
    lColIndex = 0
    sSearchString = Trim(sDatasheet) & "_" & _
                   Trim(lCol)
                   
    lRow = GetFirstOccurence(SHEET_LAYOUT, LAYOUT_COL_SEARCHSTRING2, sSearchString)
        
    If lRow > 0 Then
        Layout_GetBreakdownCols_ByDatasheetAndCol = Trim(UCase(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_BreakdownCols)))
    End If
    
    Exit Function
    
errhdl:
    Layout_GetBreakdownCols_ByDatasheetAndCol = ""
    WriteError "Layout_GetBreakdownCols_ByDatasheetAndCol", sDatasheet & ", " & lCol & " / " & Err.Description
    Resume Next
End Function

Public Function Layout_GetMovementNumber_ByDatasheetAndCol(ByVal sDatasheet As String, _
                                            ByVal lCol As Long) As String
    On Error GoTo errhdl

    Dim sSearchString As String
    Dim lRow As Long
    Dim lColIndex As Long
    
    lColIndex = 0
    sSearchString = Trim(sDatasheet) & "_" & _
                   Trim(lCol)
                   
    lRow = GetFirstOccurence(SHEET_LAYOUT, LAYOUT_COL_SEARCHSTRING2, sSearchString)
        
    If lRow > 0 Then
        Layout_GetMovementNumber_ByDatasheetAndCol = Trim(UCase(ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(lRow, LAYOUT_COL_MovementNumber)))
    End If
    
    Exit Function
    
errhdl:
    Layout_GetMovementNumber_ByDatasheetAndCol = ""
    WriteError "Layout_GetMovementNumber_ByDatasheetAndCol", sDatasheet & ", " & lCol & " / " & Err.Description
    Resume Next
End Function

Public Function Layout_GetExportFiles_PartofNames(ByVal sReportingPeriodIDs As String, Optional ByVal sDatasheet As String = "") As String
    On Error GoTo errhdl


    Dim i As Long
    Dim j As Long
    Dim lLboundLayout As Long
    Dim lUboundLayout As Long
    Dim aReportingPeriods() As String
    Dim aFileNames() As String
    Dim sFileNames As String
    Dim aSelectedDatasheets() As String
    

    lLboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 1)
    lUboundLayout = ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(2, 3)
    
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelectedDatasheets
    aReportingPeriods = Split(sReportingPeriodIDs, DELIMITER)
    
    ReDim aFileNames(0)
    sFileNames = ""
    
    'Layout durchlaufen
    For i = lLboundLayout To lUboundLayout
        If GetArrayIndex(aReportingPeriods, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_REPORTINGPERIOD_ID)) > -1 Then
            If sDatasheet = "" Or CompareStrings(sDatasheet, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) = True Then
            
                If GetArrayIndex(aSelectedDatasheets, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_DATASHEET)) >= 0 Then
                    If AppendToArray(aFileNames, ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_FILENAME), True) = True Then
                        If sFileNames <> "" Then sFileNames = sFileNames & DELIMITER
                        sFileNames = sFileNames & ThisWorkbook.Sheets(SHEET_LAYOUT).Cells(i, LAYOUT_COL_FILENAME)
                    End If
                End If
                
            End If
        End If
    Next
    
    Layout_GetExportFiles_PartofNames = sFileNames
    
    Exit Function
    
errhdl:
    WriteError "Layout_GetExportFiles_PartofNames", Err.Description
    Resume Next
End Function

Public Function Layout_GetExportFiles_byReportingPeriodIDsAndDatasheet(ByVal sReportingPeriodIDs As String, Optional ByVal sDatasheet As String = "") As String
    'Funktion gibt f|fffd|r die |fffd|bergebenen IDs die sich daraus ergebenden Dateien zur|fffd|ck.
    
    On Error GoTo errhdl
    
    Dim sFileName_Pre As String
    
    Dim sFileNamesByReportingPeriods As String
    Dim aFileNamesByReportingPeriods() As String

    Dim sFile As String
    Dim sFiles As String
    Dim aFiles() As String
    
    Dim sSpecialExportSelectedSheets As String

    Dim i As Long
    
    sSpecialExportSelectedSheets = ""
    sSpecialExportSelectedSheets = Start_SpecialExport_GetSelectedSheets

    sFileNamesByReportingPeriods = Layout_GetExportFiles_PartofNames(sReportingPeriodIDs, sDatasheet)
    aFileNamesByReportingPeriods = Split(sFileNamesByReportingPeriods, DELIMITER)
    
    
    '1. FILE NAME PRE
    sFileName_Pre = ""
    
    If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_SPECIALEXPORT_EXCEL Then
        If sFileName_Pre <> "" Then sFileName_Pre = sFileName_Pre & "_"
        sFileName_Pre = sFileName_Pre & "CARFC_EXPORT"
    End If
    
    If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = True Then
        If sFileName_Pre <> "" Then sFileName_Pre = sFileName_Pre & "_"
        sFileName_Pre = sFileName_Pre & "FORMULAS"
    End If
    
    If CompareStrings(sSpecialExportSelectedSheets, SHEET_BALANCE) = True Or _
        CompareStrings(sSpecialExportSelectedSheets, SHEET_INCOME) = True Or _
        CompareStrings(sSpecialExportSelectedSheets, "STATISTICS") Then
        If sFileName_Pre <> "" Then sFileName_Pre = sFileName_Pre & "_"
        sFileName_Pre = sFileName_Pre & Start_SpecialExport_GetSelectedSheets
    End If
    
    If Start_SpecialExport_GetICMOnly = True Then
        If sFileName_Pre <> "" Then sFileName_Pre = sFileName_Pre & "_"
        sFileName_Pre = sFileName_Pre & "ICM"
    End If
    
    sFiles = ""
    For i = LBound(aFileNamesByReportingPeriods) To UBound(aFileNamesByReportingPeriods)
        If aFileNamesByReportingPeriods(i) <> "" Then
        
            If sFileName_Pre <> "" Then
                sFile = sFileName_Pre & "_"
            Else
                sFile = ""
            End If
                
            sFile = sFile & aFileNamesByReportingPeriods(i)
            
            sFile = sFile & "_" & Replace(Start_GetManagementID, "-", "")

            sFile = sFile & "_" & sTimestamp_Long
            
            sFile = sFile & ".csv"
            
            sFile = File_GetNormalizedName(sFile)
               
            If AppendToArray(aFiles, sFile, bNoDoubles:=True) = True Then

                If sFiles <> "" Then sFiles = sFiles & ";"
                sFiles = sFiles & File_GetOnlyPath & sFile
                    
            End If

           
        End If
    Next
        
    Layout_GetExportFiles_byReportingPeriodIDsAndDatasheet = sFiles
        
    Exit Function
errhdl:
    WriteError "Layout_GetExportFiles", Err.Description
    Resume Next
End Function

'**********************************************************************************************
'SET1_RunTimeSettings
'**********************************************************************************************

'Settings

Public Function SET2_DimensionSettings_EstimationMonth() As Boolean
    On Error Resume Next
    
    If CompareStrings(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(SET2_DimensionSettings_EstimationMonth_ROW, SET2_DimensionSettings_EstimationMonth_COL), "x") = True Then
        SET2_DimensionSettings_EstimationMonth = True
    Else
        SET2_DimensionSettings_EstimationMonth = False
    End If
    
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_EstimationMonth", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_HIDDENMOVEMENTS_Get() As String
    On Error Resume Next
        
    SET1_RunTimeSettings_HIDDENMOVEMENTS_Get = ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_HIDDENMOVEMENTS_ROW, SET1_RunTimeSettings_HIDDENMOVEMENTS_COL)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_HIDDENMOVEMENTS_Get", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_HIDDENMOVEMENTS_IsMoveInList(ByVal sMove As String) As Boolean
    On Error Resume Next
    
    SET1_RunTimeSettings_HIDDENMOVEMENTS_IsMoveInList = SET1_RunTimeSettings_Help_IsValueSelectedInList(sMove, SET1_RunTimeSettings_HIDDENMOVEMENTS_Get)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_HIDDENMOVEMENTS_IsMoveInList", Err.Description
    Resume Next
End Function

Public Function Set1_RunTimeSettings_FormsFilled() As Boolean
    On Error Resume Next
    
    Dim sSpecialImportSetting As String
    sSpecialImportSetting = ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALIMPORT_REPORTINGPERIOD_ROW, START_SPECIALIMPORT_COL)
    
    If CompareStrings(sSpecialImportSetting, "All(e)") = True Then
        If ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ALL, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) <> 0 Then
            Set1_RunTimeSettings_FormsFilled = True
        Else
            Set1_RunTimeSettings_FormsFilled = False
        End If
    
    ElseIf CompareStrings(sSpecialImportSetting, "ACT") = True Or CompareStrings(sSpecialImportSetting, "FC") = True Then

        If ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ACT, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) <> 0 Then
            Set1_RunTimeSettings_FormsFilled = True
        Else
            Set1_RunTimeSettings_FormsFilled = False
        End If
    
    ElseIf CompareStrings(Mid(Trim(sSpecialImportSetting), 1, 1), "E") = True Or CompareStrings(Mid(Trim(sSpecialImportSetting), 1, 3), "PL6") = True Then
    
        If ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_EXX, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) <> 0 Then
            Set1_RunTimeSettings_FormsFilled = True
        Else
            Set1_RunTimeSettings_FormsFilled = False
        End If
    
    End If
    

    Exit Function
errhdl:
    WriteError "Set1_RunTimeSettings_FormsFilled", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_Help_IsValueSelectedInList(ByVal sValue As String, ByVal sList As String) As Boolean
    On Error GoTo errhdl
    
        Dim bSelected As Boolean
        
        bSelected = True
        If CompareStrings(sList, ALL) = False Then

            If CompareStrings(Mid(sList, 1, 1), ALL) = True Then
                'Liste startet mit *, d.h. alle g|fffd|ltig
                'pr|fffd|fe nach Ausnahmen
                If InStr(1, UCase(sList), DELIMITER & "-" & Trim(UCase(sValue)) & DELIMITER) > 0 Then
                    bSelected = False
                End If
            Else
                'Liste aller g|fffd|ltigen Werte, suche ob Value dort drin
                If Not InStr(1, UCase(sList), DELIMITER & Trim(UCase(sValue)) & DELIMITER) > 0 Then
                     bSelected = False
                End If
            End If
        End If

        SET1_RunTimeSettings_Help_IsValueSelectedInList = bSelected
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_Help_IsValueSelectedInList", Err.Description
    Resume Next
End Function

Private Function SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs() As String
    On Error GoTo errhdl
    Dim sReportingPeriods As String
        
    'ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(7, 5).Calculate
    SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs = Trim(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(7, 5).Value)

    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2() As String
    On Error GoTo errhdl
    Dim sReportingPeriods As String
    Dim i As Long
    
        
    sReportingPeriods = SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs
    
    If CompareStrings(ALL, sReportingPeriods) = True Then
        sReportingPeriods = ";"
        For i = 1 To SET2_DimensionSettings_GetNofPeriodsInSheet
            sReportingPeriods = sReportingPeriods & i & DELIMITER
        Next

    End If
    
    SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2 = sReportingPeriods

    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_IsReportingPeriodSelected_ByVersionYearAndPeriod(ByVal sVersion As String, ByVal sYear As String, ByVal sPeriod As String) As Boolean
    On Error GoTo errhdl
    
        Dim sReportingPeriodID As String
        sReportingPeriodID = SET2_DimensionSettings_GetReportingPeriodID_ByVersionYearAndPeriod(sVersion, sYear, sPeriod)
        SET1_RunTimeSettings_IsReportingPeriodSelected_ByVersionYearAndPeriod = SET1_RunTimeSettings_IsReportingPeriodSelected_ByID(sReportingPeriodID)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_IsReportingPeriodSelected_ByVersionYearAndPeriod", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_IsReportingPeriodSelected_ByID(ByVal sReportingPeriodID As String) As Boolean
    On Error GoTo errhdl

    SET1_RunTimeSettings_IsReportingPeriodSelected_ByID = SET1_RunTimeSettings_Help_IsValueSelectedInList(sReportingPeriodID, SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_IsReportingPeriodSelected_ByID", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_Datasheets() As String
    On Error GoTo errhdl
    Dim sDatasheets As String
        
    'ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(10, 5).Calculate
    SET1_RunTimeSettings_GetSELECTED_Datasheets = Trim(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(10, 5).Value)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_Datasheets", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_Datasheets2() As String
    On Error GoTo errhdl
    Dim sDatasheets As String
    Dim aDatasheets() As String
    Dim i As Long
    
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aDatasheets
    sDatasheets = DELIMITER
    For i = LBound(aDatasheets) To UBound(aDatasheets)
        If aDatasheets(i) <> "" Then
            sDatasheets = sDatasheets & aDatasheets(i) & DELIMITER
        End If
    Next
    
    SET1_RunTimeSettings_GetSELECTED_Datasheets2 = sDatasheets
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_Datasheets2", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_GetSELECTED_DatasheetsArray(ByRef aSelectedDatasheets() As String)
On Error GoTo errhdl
    
    Dim i As Long
    Dim sTemp As String
    Dim aTemp() As String
    Dim lSelectedDatasheets As Long

    lSelectedDatasheets = 0
    ReDim aSelected_Datasheets(0)
    
    sTemp = SET1_RunTimeSettings_GetSELECTED_Datasheets
    If CompareStrings(sTemp, ALL) = True Then
        Layout_GetAllDatasheets aTemp
    Else
        aTemp = Split(sTemp, DELIMITER)
    End If
    
    For i = LBound(aTemp) To UBound(aTemp)
        If aTemp(i) <> "" Then
            SimpleAppendToArray aSelectedDatasheets, lSelectedDatasheets, Trim(aTemp(i))
        End If
    Next
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_DatasheetsArray", Err.Description
    Resume Next
End Sub

Public Function SET1_RunTimeSettings_IsDatasheet_Selected(ByVal sDatasheet As String) As Boolean
    On Error GoTo errhdl

    SET1_RunTimeSettings_IsDatasheet_Selected = SET1_RunTimeSettings_Help_IsValueSelectedInList(sDatasheet, SET1_RunTimeSettings_GetSELECTED_Datasheets)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_IsDatasheet_Selected", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_MovementNumbers() As String
    On Error GoTo errhdl
    Dim sMovementNumber As String
        
    'ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(13, 5).Calculate
    SET1_RunTimeSettings_GetSELECTED_MovementNumbers = Trim(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(13, 5).Value)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_MovementNumbers", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_IsMovementNumber_Selected(ByVal sMovementNumber As String) As Boolean
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_IsMovementNumber_Selected = SET1_RunTimeSettings_Help_IsValueSelectedInList(sMovementNumber, SET1_RunTimeSettings_GetSELECTED_MovementNumbers)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_IsMovementNumber_Selected", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_MovementRanges() As String
    On Error GoTo errhdl
        
    SET1_RunTimeSettings_GetSELECTED_MovementRanges = Trim(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(16, 5).Value)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_MovementRanges", Err.Description
    Resume Next
End Function


Public Function SET1_RunTimeSettings_IsMovementRange_Selected(ByVal sMovementRange As String) As Boolean
    On Error GoTo errhdl
    
        SET1_RunTimeSettings_IsMovementRange_Selected = SET1_RunTimeSettings_Help_IsValueSelectedInList(sMovementRange, SET1_RunTimeSettings_GetSELECTED_MovementRanges)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_IsMovementRange_Selected", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_GetSELECTED_Mode() As String
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_GetSELECTED_Mode = Trim(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(19, 5).Value)
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetSELECTED_Mode", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_SetSELECTED_Mode(ByVal sMode As String)
    On Error GoTo errhdl

    ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(19, 5).Value = sMode
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_SetSELECTED_Mode", Err.Description
    Resume Next
End Sub

'Schalter

Public Function SET1_RunTimeSettings_Schalter_IsOpeningValueModificationWarningActive() As Boolean
    On Error GoTo errhdl
    Dim bActive As Boolean
       
    bActive = False
    If CompareStrings(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(29, 3), "x") = True Then
        bActive = True
    Else
        bActive = False
    End If
    
    SET1_RunTimeSettings_Schalter_IsOpeningValueModificationWarningActive = bActive
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_IsOpeningValueModificationWarningActive", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive(ByVal bActive As Boolean)
    On Error GoTo errhdl

        If bActive = True Then
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(29, 3) = "x"
    Else
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(29, 3) = ""
    End If
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive", Err.Description
    Resume Next
End Sub

Public Function SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive() As Boolean
    On Error GoTo errhdl
    Dim bActive As Boolean
    
    bActive = False
    If CompareStrings(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(30, 3), "x") = True Then
        bActive = True
    Else
        bActive = False
    End If
    
    SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive = bActive
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive(ByVal bInactive As Boolean)
    On Error GoTo errhdl
      
    If bInactive = True Then
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(30, 3) = "x"
    Else
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(30, 3) = ""
    End If
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive", Err.Description
    Resume Next
End Sub

Public Function SET1_RunTimeSettings_Schalter_GetSourceSystem() As String
    On Error GoTo errhdl

    If CompareStrings(SOURCE_SYSTEM_HFM, ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(32, 3)) = True Then
        SET1_RunTimeSettings_Schalter_GetSourceSystem = SOURCE_SYSTEM_HFM
    ElseIf CompareStrings(SOURCE_SYSTEM_SAP, ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(32, 3)) = True Then
        SET1_RunTimeSettings_Schalter_GetSourceSystem = SOURCE_SYSTEM_SAP
    Else
        SET1_RunTimeSettings_Schalter_GetSourceSystem = SOURCE_SYSTEM_XLS
    End If
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_GetSourceSystem", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_Schalter_SetSourceSystem(ByVal sSourceSystem As String)
    On Error GoTo errhdl

    ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(32, 3) = sSourceSystem
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_SetSourceSystem", Err.Description
    Resume Next
End Sub

Public Function SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive() As Boolean
    On Error GoTo errhdl
    Dim bActive As Boolean
    
    bActive = False
    If CompareStrings(ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(33, 3), "x") = True Then
        bActive = True
    Else
        bActive = False
    End If
    
    SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = bActive
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive(ByVal bActive As Boolean)
    On Error GoTo errhdl

    If bActive = True Then
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(33, 3) = "x"
    Else
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(33, 3) = ""
    End If
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive", Err.Description
    Resume Next
End Sub

Public Sub SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod(ByVal bActive As Boolean)
    On Error GoTo errhdl

    If bActive = True Then
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(34, 3) = "x"
    Else
        ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(34, 3) = ""
    End If
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod", Err.Description
    Resume Next
End Sub


'Calling Makro

Public Function SET1_RunTimeSettings_GetCallingMakro() As String
        On Error GoTo errhdl

    SET1_RunTimeSettings_GetCallingMakro = ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(22, 5).Value
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetCallingMakro", Err.Description
    Resume Next
End Function

Public Function SET1_RunTimeSettings_SetCallingMakro(ByVal sCallingMakro As String) As String
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(22, 5).Value = sCallingMakro
    Calculate
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_SetCallingMakro", Err.Description
    Resume Next
End Function

Public Sub SET1_RunTimeSettings_SetAction(ByVal sAction As String)
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(23, 5).Value = sAction
    Calculate
    
    Exit Sub
errhdl:
    WriteError "SET1_RunTimeSettings_SetAction", Err.Description
    Resume Next
End Sub

Public Function SET1_RunTimeSettings_GetAction() As String
    On Error GoTo errhdl

    SET1_RunTimeSettings_GetAction = ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(23, 5).Value
    
    Exit Function
errhdl:
    WriteError "SET1_RunTimeSettings_GetAction", Err.Description
    Resume Next
End Function

'**********************************************************************************************
'SET2_DimensionSettingsII
'**********************************************************************************************

'POV, Periods in Tool und weiter Einstellungen

Public Sub SET2_DimensionSettings_AddOneMillion_To_ToolVersion()
    On Error Resume Next
    If IsNumeric(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5)) = True Then
        ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5) = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5) + 1000000
    End If
End Sub

Public Function SET2_DimensionSettings_IsAccountInICMAccountList(ByVal sAccount As String) As Boolean
   On Error GoTo errhdl
   Dim i As Long
    Dim bResult As Boolean
    
    'Achtung Doppelung gew|fffd|nscht, hier Account in Tool Format (andere Fkt in 10-Stellen Format)

    bResult = False
    If InStr(1, UCase(SET2_DimensionSettings_GetICMAccountList), DELIMITER & Trim(UCase(sAccount)) & DELIMITER) > 0 Then
        bResult = True
    End If

    SET2_DimensionSettings_IsAccountInICMAccountList = bResult
    Exit Function
    
errhdl:
    WriteError "SET2_DimensionSettings_IsAccountInICMAccountList", Err.Description
    Resume Next
End Function

Public Sub SET2_DimensionSettings_GetVersionYearAndPeriodArrays_AllPeriods(ByRef aVersions() As String, _
                                                ByRef aYears() As String, _
                                                ByRef aPeriods() As String)
    On Error GoTo errhdl
    Dim lNofPeriods As Long
    Dim i As Long
      
    lNofPeriods = SET2_DimensionSettings_GetNofPeriodsInSheet
    
    ReDim aVersions(lNofPeriods)
    ReDim aYears(lNofPeriods)
    ReDim aPeriods(lNofPeriods)
   
    For i = 1 To lNofPeriods
    
        SET2_DimensionSettings_GetVersionYearPeriod_ByID i, aVersions(i), aYears(i), aPeriods(i)
    Next
    
    Exit Sub
errhdl:
    WriteError "SET2_DimensionSettings_GetVersionYearAndPeriodArrays_AllPeriods", Err.Description
    Resume Next
End Sub

Public Function SET2_DimensionSettings_GetNofPeriodsInSheet() As String
    On Error GoTo errhdl

    SET2_DimensionSettings_GetNofPeriodsInSheet = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(5, 3)
    
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_GetNofPeriodsInSheet", Err.Description
    Resume Next
End Function

Public Sub SET2_DimensionSettings_GetVersionYearPeriod_ByID(ByVal lID As Long, _
                                                  ByRef sVersion As String, _
                                                  ByRef sYear As String, _
                                                  ByRef sPeriod As String)
    On Error GoTo errhdl
    Dim lRow As Long
        
    sVersion = ""
    sYear = ""
    sPeriod = ""

    lRow = 6 + lID
    
    sVersion = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(lRow, 5)
    sYear = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(lRow, 6)
    sPeriod = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(lRow, 7)
    
    Exit Sub
errhdl:
    WriteError "SET2_DimensionSettings_GetVersionYearPeriod_ByID", Err.Description
    Resume Next
End Sub

Public Function SET2_DimensionSettings_GetReportingPeriodID_ByVersionYearAndPeriod(ByVal sVersion As String, ByVal sYear As String, ByVal sPeriod As String) As String
    On Error GoTo errhdl
    'chm: 16.5.2014 f|fffd|hrende 0en bei Period abgefangen
    
    Dim lNofPeriodsInSheet As Long
    Dim i As Long
    
    lNofPeriodsInSheet = SET2_DimensionSettings_GetNofPeriodsInSheet
    SET2_DimensionSettings_GetReportingPeriodID_ByVersionYearAndPeriod = ""
    
    For i = 1 To lNofPeriodsInSheet
        If CompareStrings(sVersion, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(6 + i, 5)) = True And _
           CompareStrings(sYear, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(6 + i, 6)) = True And _
           CompareStrings(sPeriod, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(6 + i, 7)) = True Then
                SET2_DimensionSettings_GetReportingPeriodID_ByVersionYearAndPeriod = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(6 + i, 3)
                Exit Function
        End If
    Next
        
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_GetReportingPeriodID_ByVersionYearAndPeriod", Err.Description
    Resume Next
End Function

Public Function SET2_DimensionSettings_GetToolIdentifier() As String
    On Error GoTo errhdl

    SET2_DimensionSettings_GetToolIdentifier = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(32, 5)
    
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_GetToolIdentifier", Err.Description
    Resume Next
End Function

'Vortraege und Namenskonventionen

Public Function SET2_DimensionSettings_GetICMAccountList() As String
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(54, 5).Calculate
    SET2_DimensionSettings_GetICMAccountList = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(54, 5)
    
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_GetICMAccountList", Err.Description
    Resume Next
End Function


Public Function SET2_DimensionSettings_GetICP0NotValid_AccountList() As String
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(52, 5).Calculate
    SET2_DimensionSettings_GetICP0NotValid_AccountList = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(52, 5)
    
    Exit Function
errhdl:
    WriteError "SET2_DimensionSettings_GetICP0NotValid_AccountList", Err.Description
    Resume Next
End Function

'Public Function SET2_DimensionSettings_GetID_ByVersionYearPeriod(ByVal sVersion As String, _
'                                                  ByVal sYear As String, _
'                                                  ByVal sPeriod As String) As String
'    On Error GoTo errhdl
'    Dim i As Long
'
'    SET2_DimensionSettings_GetID_ByVersionYearPeriod = 0
'
'    For i = 7 To 18
'        If CompareStrings(sVersion, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(i, 5)) = True And _
'           CompareStrings(sYear, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(i, 6)) = True And _
'           CompareStrings(sPeriod, ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(i, 7)) = True Then
'
'            SET2_DimensionSettings_GetID_ByVersionYearPeriod = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(i, 3)
'            Exit Function
'
'        End If
'    Next
'
'
'    Exit Function
'errhdl:
'    WriteError "SET2_DimensionSettings_GetID_ByVersionYearPeriod", Err.Description
'    Resume Next
'End Function

'Public Function SET2_DimensionSettings_GetRedAccountList() As String
'    On Error GoTo errhdl
'
'    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(46, 5).Calculate
'    SET2_DimensionSettings_GetRedAccountList = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(46, 5)
'
'    Exit Function
'errhdl:
'    WriteError "SET2_DimensionSettings_GetRedAccountList", Err.Description
'    Resume Next
'End Function

'Public Sub SET2_DimensionSettings_GetIncomeTopAccountsArray(ByRef aIncomeTopAccounts() As String)
'    On Error GoTo errhdl
'
'    Dim sIncomeTopAccounts As String
'    ReDim aIncomeTopAccounts(0)
'
'    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(48, 5).Calculate
'    sIncomeTopAccounts = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(48, 5)
'    aIncomeTopAccounts = Split(sIncomeTopAccounts, DELIMITER)
'
'    Exit Sub
'errhdl:
'    WriteError "SET2_DimensionSettings_GetIncomeTopAccountsArray", Err.Description
'    Resume Next
'End Sub

'Public Sub SET2_DimensionSettings_GetStatisticTopAccountsArray(ByRef aStatisticTopAccounts() As String)
'    On Error GoTo errhdl
'    Dim sStatisticTopAccounts As String
'    ReDim aStatisticTopAccounts(0)
'
'    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(50, 5).Calculate
'    sStatisticTopAccounts = ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(50, 5)
'    aStatisticTopAccounts = Split(sStatisticTopAccounts, DELIMITER)
'
'    Exit Sub
'errhdl:
'    WriteError "SET2_DimensionSettings_GetStatisticTopAccountsArray", Err.Description
'    Resume Next
'End Sub

'**********************************************************************************************




Attribute VB_Name = "Modul4"
Option Explicit

'###################################################
'#     Upload Funktionen         #

            'Error Handling
            'File
            'Progress
            'Panes
                
'#                                                 #
'###################################################

Dim ff_Act As Long
Dim ff_Est As Long

Public aFreeFile_FileNames() As String
Public aFreeFiles_FileHandles() As Long

Public sLogFileTemp As String
Public lLogFileTemp As Long
Public Const lLogFileMax As Long = 500

'------------------------------------------------------------------------------------------------------------
'### Error Handling ###
'------------------------------------------------------------------------------------------------------------

Public Sub WriteError(ByVal sErrFunction As String, ByVal sErrDescription As String)
    'Setting: If and where to log errors
    On Error Resume Next
    
     Debug.Print "#ERR in " & sErrFunction & " -> " & sErrDescription
    'Progress "#ERR in " & sErrFunction & " -> " & sErrDescription, 4

End Sub

'------------------------------------------------------------------------------------------------------------
'### File ###
'------------------------------------------------------------------------------------------------------------


' (3) Log Files

Public Function File_GetNameAndPath_ApplicationLOG()
    On Error GoTo errhdl
    File_GetNameAndPath_ApplicationLOG = File_GetOnlyPath & Excel_GetWorkbookName & "_LOG" & ".log"
    Exit Function

errhdl:
    WriteError "File_GetNameAndPath_ApplicationLOG", Err.Description
    Resume Next
End Function

Public Function File_GetNameAndPath_ImportLOG(ByVal sImportFilePathName As String)
    On Error GoTo errhdl
    Dim sLog As String
    Dim i, j As Long

    i = 1
    j = 1

    sLog = sImportFilePathName & ".log"

    While i > 0
        i = InStr(i + 1, sImportFilePathName, ".")
        If i = 0 Then
            sLog = Mid(sImportFilePathName, 1, j - 1) & "_LOG.csv"
        Else
            j = i
        End If
    Wend

    File_GetNameAndPath_ImportLOG = sLog
Exit Function

errhdl:
    WriteError "File_GetNameAndPath_ImportLOG", Err.Description
    Resume Next
End Function

Public Function File_DoesFileExist(ByVal sFile As String) As Boolean
    On Error GoTo errhdl

    If (Dir(sFile) > "") Then
        File_DoesFileExist = True
    Else
        File_DoesFileExist = False
    End If
 
    Exit Function
errhdl:
    WriteError "File_DoesFileExist", Err.Description
    Resume Next
End Function

Public Function File_GetOnlyPath() As String
    On Error GoTo errhdl

    File_GetOnlyPath = ThisWorkbook.Path & "\"
 
    Exit Function
errhdl:
    WriteError "File_GetOnlyPath", Err.Description
    Resume Next
End Function

Public Function File_GetOnlyName(ByVal sNameIn As String) As String
    On Error GoTo errhdl
    Dim sName As String
    Dim aName() As String
    
    If InStr(1, sNameIn, "\") <= 0 Then
        sName = sNameIn
    Else
        aName = Split(sNameIn, "\")
        sName = aName(UBound(aName))
    End If
    
    File_GetOnlyName = sName
 
    Exit Function
errhdl:
    WriteError "File_GetOnlyName", Err.Description
    Resume Next
End Function

Public Function File_GetNormalizedName(ByVal sNameIn As String) As String
    On Error GoTo errhdl
    Dim sName As String
    
    sName = Replace(sNameIn, "[", "")
    sName = Replace(sName, "]", "")
    File_GetNormalizedName = sName
 
    Exit Function
errhdl:
    WriteError "File_GetNormalizedName", Err.Description
    Resume Next
End Function

Public Function File_Dialog_SingleFile() As String

    On Error GoTo errhdl

    Dim sFileNameAndPath As String
    sFileNameAndPath = ""

    'File Dialog von Herrn L|fffd|ken
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

    fd.InitialFileName = ActiveWorkbook.Path
    fd.Filters.Add "Alle Dateien", "*.*"
    fd.FilterIndex = 1
    fd.AllowMultiSelect = False
    fd.Show
    On Error Resume Next
    sFileNameAndPath = fd.SelectedItems.Item(1)

    File_Dialog_SingleFile = sFileNameAndPath
    
    Exit Function
errhdl:
    WriteError "File_Dialog_SingleFile", Err.Description
    Resume Next
    
End Function

Public Function File_Dialog_MulitSelect() As String

    On Error GoTo errhdl

    Dim sFileNameAndPath As String
    Dim i As Long
    sFileNameAndPath = ""

    'File Dialog von Herrn L|fffd|ken
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

    fd.InitialFileName = ActiveWorkbook.Path
    fd.Filters.Add "Alle Dateien", "*.*"
    fd.FilterIndex = 1
    fd.AllowMultiSelect = True
    fd.Show
    On Error Resume Next
    For i = 1 To fd.SelectedItems.Count
        If sFileNameAndPath <> "" Then sFileNameAndPath = sFileNameAndPath & ";"
        sFileNameAndPath = sFileNameAndPath & fd.SelectedItems.Item(i)
    Next
    File_Dialog_MulitSelect = sFileNameAndPath
    
    Exit Function
errhdl:
    WriteError "File_Dialog_MulitSelect", Err.Description
    Resume Next
    
End Function

'File Access

Sub File_ScanInclGetMaxRow(ByVal sImportFilePathName As String, ByRef lMaxRow As Long, ByRef lNofErrors As Long)
    On Error GoTo errhdl
   
    Dim sThousandsSeparator As String
    Dim sDecimalSeparator As String
    
    Dim lImport_Row As Long

    Dim ff As Long
    Dim sLine As String
    Dim aLine() As String
    
    Dim sImport_Value As String
    
    lMaxRow = 0
    lNofErrors = 0

    'Alt Excel
'    sThousandsSeparator = Application.ThousandsSeparator
'    sDecimalSeparator = Application.DecimalSeparator

'Neu Betriebssystem

    Dim dblTest As Double
    Dim sTest As String
    
    dblTest = 1 / 2
    sTest = CStr(dblTest)
    
    If InStr(1, sTest, ".") > 0 Then
        sDecimalSeparator = "."
        sThousandsSeparator = ","
    Else
        sDecimalSeparator = ","
        sThousandsSeparator = "."
    End If
        
    
    ff = FreeFile
    
    sCriticalErrorsImport_FileNotFound_PositivList = sCriticalErrorsImport_FileNotFound_PositivList & "          " & File_GetOnlyName(sImportFilePathName) & ": "
    
    On Error GoTo Exxit
    Open sImportFilePathName For Input Access Read Shared As #ff
    On Error GoTo errhdl
    
    sCriticalErrorsImport_FileNotFound_PositivList = sCriticalErrorsImport_FileNotFound_PositivList & "OK" & vbNewLine
    
    Do While Not EOF(ff)
        'Max Row
        lMaxRow = lMaxRow + 1

        'Scan Value
        Line Input #ff, sLine
        aLine = Split(sLine, DELIMITER)
        sImport_Value = ""
        
        On Error Resume Next
        
        'Desription abfangen
        If InStr(1, aLine(12), """") > 0 Then
            sImport_Value = ""
        Else
            sImport_Value = Trim(aLine(12))
        End If
        
        On Error GoTo errhdl
        
        If sImport_Value <> "" Then

            If InStr(1, sImport_Value, sThousandsSeparator) > 0 Then
                lNofErrors = lNofErrors + 1
            End If
            
        End If
    Loop
    
    lCriticalErrorsImport_FileScan_DecimalCharacterError = lNofErrors

    Close #ff
    
    Exit Sub

Exxit:
    lCriticalErrorsImport_FileScan_FileNotFound = lCriticalErrorsImport_FileScan_FileNotFound + 1
    If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
        sCriticalErrorsImport_FileNotFound_PositivList = sCriticalErrorsImport_FileNotFound_PositivList & "-" & vbNewLine
    Else
        sCriticalErrorsImport_FileNotFound_PositivList = sCriticalErrorsImport_FileNotFound_PositivList & "-" & vbNewLine
    End If
    Exit Sub
    
errhdl:
    WriteError "File_ScanInclGetMaxRow", Err.Description
    Resume Next
End Sub

Public Function File_ReadFromFile(ByVal sFilePathName As String) As String
    On Error GoTo errhdl
    Dim sLine As String
    Dim sText As String
    sText = ""
    Dim ff As Long
    
    ff = FreeFile
    
    On Error GoTo FileNotFoundExit
    Open sFilePathName For Input Access Read Shared As #ff
    
    On Error GoTo errhdl
    Do While Not EOF(ff)
        sLine = ""
        Line Input #ff, sLine
        
        sText = sText & sLine & vbNewLine
    Loop

    Close #ff
    
FileNotFoundExit:
    File_ReadFromFile = sText
    Exit Function
    
errhdl:
    WriteError "File_ReadFromFile", Err.Description
    Resume Next
End Function

Public Function File_AppendToFile_old(ByVal sFilePathName As String, ByVal sContent As String)
    On Error GoTo errhdl
    Dim ff As Long
    
    ff = FreeFile
    Open sFilePathName For Append Access Write Shared As #ff
    
    Print #ff, sContent

    Close #ff
    
    Exit Function
    
errhdl:
    WriteError "File_AppendToFile_old", Err.Description
    Resume Next
End Function

Public Sub File_Open_ApplicationLog_INIT()
On Error GoTo errhdl
    ReDim aFreeFile_FileNames(0)
    ReDim aFreeFiles_FileHandles(0)

    'Application Log
    aFreeFiles_FileHandles(0) = FreeFile
    aFreeFile_FileNames(0) = File_GetNameAndPath_ApplicationLOG
    Open aFreeFile_FileNames(0) For Append Access Write Lock Write As #aFreeFiles_FileHandles(0)

    sLogFileTemp = ""
    lLogFileTemp = 0
Exit Sub

errhdl:
    WriteError "File_Open_ApplicationLog_INIT", Err.Description
    Resume Next
End Sub

Public Sub File_Open_ExportFiles(Optional ByVal sImportFilePathNames As String = "")
    On Error GoTo errhdl
    
    Dim sFilesArrayString  As String
    Dim aFilesArrayTemp() As String
    Dim i As Long
    Dim j As Long
    
    j = UBound(aFreeFiles_FileHandles) + 1
    
    'Export
    If SET1_RunTimeSettings_GetAction = ACTION_EXPORT Then
    
        sFilesArrayString = Layout_GetExportFiles_byReportingPeriodIDsAndDatasheet(SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2)

        aFilesArrayTemp = Split(sFilesArrayString, ";")
    
        ReDim Preserve aFreeFiles_FileHandles(j + UBound(aFilesArrayTemp))
        ReDim Preserve aFreeFile_FileNames(j + UBound(aFilesArrayTemp))
        
        For i = LBound(aFilesArrayTemp) To UBound(aFilesArrayTemp)
            aFreeFiles_FileHandles(j + i) = FreeFile
            aFreeFile_FileNames(j + i) = aFilesArrayTemp(i)
            Open aFreeFile_FileNames(j + i) For Append Access Write Lock Write As #aFreeFiles_FileHandles(j + i)
        Next
        
    End If
    
    Exit Sub
    
errhdl:
    WriteError "File_Open_ExportFiles", Err.Description
    Resume Next
End Sub
Public Function File_AppendToFile(ByVal sFilePathName As String, ByVal sContent As String, Optional ByVal ff As Long = -1)
    On Error GoTo errhdl
    
    Dim lIndex As Long

    If ff < 0 Then
        'Keine Handle |fffd|bergeben, dann ermittle Handle aus sFilePathName
        lIndex = GetArrayIndex(aFreeFile_FileNames, sFilePathName)
        ff = aFreeFiles_FileHandles(lIndex)
    End If
    
    Print #ff, sContent
  
    Exit Function
    
errhdl:
    WriteError "File_AppendToFile", Err.Description
    File_AppendToFile_old sFilePathName, sContent
    Resume Next
End Function

Public Sub File_AppendToFile_Post()
    On Error GoTo errhdl

    Dim i As Long
    
    For i = LBound(aFreeFiles_FileHandles) To UBound(aFreeFiles_FileHandles)
        Close aFreeFiles_FileHandles(i)
    Next

    Exit Sub
    
errhdl:
    WriteError "File_AppendToFile_Post", Err.Description
    Resume Next
End Sub

Public Function File_WriteToFile(ByVal sFilePathName As String, ByVal sContent As String)
    On Error GoTo errhdl
    Dim ff As Long
    
    ff = FreeFile
    Open sFilePathName For Output Access Write Shared As #ff
    
    Print #ff, sContent

    'Close File
    Close #ff
    Exit Function
        
errhdl:
    WriteError "File_WriteToFile", Err.Description
    Resume Next
End Function

Sub File_AppendToFile_Log(ByVal sFileName As String, ByVal sComment As String, Optional ByVal ff As Long = -1)
On Error GoTo errhdl

    
    If ff < 0 Then
        'Schreibe in Application Log wenn ff < 0
        File_AppendToFile File_GetNameAndPath_ApplicationLOG, sComment
    Else
    'Sonst schreibe in Datei mit Handle ff
    
      lLogFileTemp = lLogFileTemp + 1
      
      If lLogFileTemp > lLogFileMax Then

          lLogFileTemp = 0
          File_AppendToFile sFileName, sLogFileTemp & sComment, ff
          sLogFileTemp = ""
      
      Else
          sLogFileTemp = sLogFileTemp & sComment & vbNewLine
      End If
    
    End If
    
Exit Sub

errhdl:
    WriteError "File_AppendToFile_Log", Err.Description
    Resume Next
End Sub



'------------------------------------------------------------------------------------------------------------
'### Progress ###
'------------------------------------------------------------------------------------------------------------

Sub Progress(ByVal sText As String, ByVal lLevel As Long)
    On Error Resume Next
    
    'Settings: Progress window format dependant
    Select Case lLevel
    Case 1
        frmProgress.lblP1.Caption = sText
    Case 2
       frmProgress.lblP2.Caption = sText
    Case 3
        frmProgress.txtP3.Text = sText
    Case Else
        frmProgress.txtP4.Text = frmProgress.txtP4.Text & sText & vbNewLine
    End Select
    
End Sub

'Progressbar

Public Function Progressbar_GetRowStep(ByVal lMaxRow As Long) As Variant
    On Error GoTo errhdl
    Dim lRowStep As Variant
    lRowStep = 1

    lRowStep = MaxWidthProgressBar / lMaxRow

    Progressbar_GetRowStep = lRowStep
    Exit Function
errhdl:
    WriteError "", Err.Description
    Resume Next
End Function

Public Sub Progressbar_SetLength(ByVal lProgressLength As Variant, ByVal lImportRow As Long, lImportRowMax As Long)
    On Error GoTo errhdl
    
    Dim lImportRowTemp As Long
    If lImportRow >= lImportRowMax Then
        lImportRowTemp = lImportRowMax
    Else
        lImportRowTemp = lImportRow
    End If
    frmProgress.lblProgress1.Width = lProgressLength
    frmProgress.lblProgress2.Caption = Format(lImportRowTemp / lImportRowMax, "0 %")

    Exit Sub
errhdl:
    WriteError "Progressbar_SetLength", Err.Description
    Resume Next
End Sub

Sub Progress_Show()
    On Error Resume Next
    frmProgress.Show
End Sub

Sub Progress_Hide()
    On Error Resume Next
    frmProgress.Hide
End Sub

Sub Progress_Clear()
    On Error Resume Next
    frmProgress.Clear
End Sub

'   Panes chm_2012_04-0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0

Public Sub FreezePanes_ToFalse_InSelectedSheets()
    On Error GoTo errhdl
    
    Dim i As Long
    Dim sDatasheet As String
    
    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
    
    For i = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
        sDatasheet = aSelected_Datasheets(i)
        
        If sDatasheet <> "" Then
            ThisWorkbook.Sheets(sDatasheet).Activate
            ActiveWindow.FreezePanes = False
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_START).Activate
    
    Exit Sub
    
errhdl:
    WriteError "FreezePanes_ToFalse_InSelectedSheets", Err.Description
    Resume Next
End Sub

Public Sub FreezePanes_ToTrue_InSelectedSheets()
    On Error GoTo errhdl
    
    Dim i As Long
    Dim sDatasheet As String
    
    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
    
    For i = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
        sDatasheet = aSelected_Datasheets(i)
        
        If sDatasheet <> "" Then
            ThisWorkbook.Sheets(sDatasheet).Activate
            ThisWorkbook.Sheets(sDatasheet).Range(GetColLetter2(DATASHEET_COL_MovementNumber_FIRST) & DATASHEET_ROW_FIRSTDATASET).Select
            ActiveWindow.FreezePanes = True
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_START).Activate
    
    Exit Sub
    
errhdl:
    WriteError "FreezePanes_ToTrue_InSelectedSheets", Err.Description
    Resume Next
End Sub

Public Sub FreezePane_ToTrue_InCurrentSheets()
    On Error GoTo errhdl
    Dim sDatasheet As String

    sDatasheet = ActiveWindow.SelectedSheets.Item(1).Name
    
    If sDatasheet <> "" Then
        ActiveWindow.FreezePanes = True
    End If
    
    Exit Sub
    
errhdl:
    WriteError "FreezePane_ToTrue_InCurrentSheets", Err.Description
    Resume Next
End Sub

Public Sub FreezePane_ToFalse_InCurrentSheets()
    On Error GoTo errhdl
    Dim sDatasheet As String

    sDatasheet = ActiveWindow.SelectedSheets.Item(1).Name
    
    If sDatasheet <> "" Then
        ActiveWindow.FreezePanes = False
    End If
    
    Exit Sub
    
errhdl:
    WriteError "FreezePane_ToFalse_InCurrentSheets", Err.Description
    Resume Next
End Sub












Attribute VB_Name = "Modul5"
Option Explicit

'###################################################
'       Upload Funktionen (Sonstige)
'
'            'Account Search
'            'ICP Functions
'            'GetFirstOccurence
'
'            'Excel
'
'                - Locked
'                - Workbookname
'                - Outline
'                - allg. Formatierung
'
'
'###################################################

'------------------------------------------------------------------------------------------------------------
' Account Search
'------------------------------------------------------------------------------------------------------------

Public Sub AccountSearch(ByVal sDatasheet As String, ByVal sAccountToSearch As String)
    On Error GoTo errhdl

    'Funktion sucht Konto in angegebenem Sheet und blendet alle gefundenen Zeilen ein
    Dim j As Long
    Dim bHidden As Boolean
    Dim lFoundFirst As Long
    Dim lFoundLast As Long
    Dim bFound As Boolean
'    Dim lRowFound As Long
    
    If CompareStrings(sAccountToSearch, "RESET") = True Then
        Format_Datasheet sDatasheet
        Exit Sub
    ElseIf CompareStrings(sAccountToSearch, "RESETALL") = True Then
        Format_AllDatasheets
        Exit Sub
    End If
    
'    lRowFound = 0
    
    
    If Trim(sAccountToSearch) = "" Then
        Exit Sub
    End If
   bFound = False
   
    For j = DATASHEET_ROW_FIRSTDATASET To FOR_MAX
        
       
       If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(j, DATASHEET_COL_ACCOUNT).Text, sAccountToSearch) = True Then
            If bFound = False Then
                bFound = True
                lFoundFirst = j
                lFoundLast = j
            Else
                lFoundLast = j
            End If
            
            'alle Zeilen mit gesuchtem Konto aufklappen
            'ThisWorkbook.Sheets(sDatasheet).Rows(j).EntireRow.Hidden = False
            
'            lRowFound = j
        Else
            If bFound = True Then
                ThisWorkbook.Sheets(sDatasheet).Rows(lFoundFirst & ":" & lFoundLast).EntireRow.Hidden = False
                j = FOR_MAX
            End If
            
            If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(j, DATASHEET_COL_ACCOUNT), ENDE_MARKE) = True Then
                j = FOR_MAX
            End If
        End If
    Next
    
    If lFoundLast > 0 Then
        ThisWorkbook.Sheets(sDatasheet).Rows(lFoundLast).Activate
    Else
        Select Case Tool_GetLanguage
            Case TOOL_LANGUAGE_ENG
                 MsgBox "Account not found!", , "Account search:"
            Case Else
                 MsgBox "Konto nicht gefunden!", , "Kontensuche:"
        End Select
    End If
Exit Sub

errhdl:
    WriteError "AccountSearch", Err.Description
    Resume Next
End Sub
Public Sub AccountSearch_ClearSelected()
    On Error GoTo errhdl
    Dim sDatasheet As String
    Dim i As Long

    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
    
    For i = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
    
        sDatasheet = aSelected_Datasheets(i)
        If sDatasheet <> "" Then
            ThisWorkbook.Sheets(sDatasheet).Cells(3, 2).ClearContents
        End If
    Next
    Exit Sub
errhdl:
    WriteError "AccountSearch_ClearSelected", Err.Description
    Resume Next
End Sub

'------------------------------------------------------------------------------------------------------------
' ICP Functions
'------------------------------------------------------------------------------------------------------------

Public Sub ICP_AddICPDescription(ByVal sDatasheet As String, ByVal sICP As String, ByVal lRow As Long, _
                                 Optional ByVal bUseMsgBox As Boolean = False, _
                                 Optional ByVal bOnlyAppendToSingleDatasheet As Boolean = False, _
                                 Optional ByVal bCheckIfAlreadyExistsBefore As Boolean = False)
    On Error GoTo errhdl
    'Funktion f|fffd|gt ICP Description f|fffd|r angegebene ICP in angegebene Zeile ein im angegebenen Blatt
    
    Dim i As Long
    
    Dim sICPDescription As String
    Dim sICPDescriptionGer As String
    Dim sICPDescriptionEng As String
    
    Dim sSearchStringICP As String
    Dim sAccount As String
    Dim lOccurance As Long
    
    Dim sText As String
    
    Dim bSettingOnChangeInactive As Boolean
    Dim bScreen As Boolean
    
    'Dim aDatasheetsInCategory() As String
    Dim sDatasheetsInCategory As String
    sDatasheetsInCategory = sDatasheet
    
    Dim bSettingSearchFieldColHidden As Boolean

    sICP = ICP_GetManagementIDByHFMCompany(sICP)

    bSettingOnChangeInactive = SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True

    ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_ICP) = ""
    'Calculate
    
    'Schritt1: Gibt es ICP schon im Blatt?
    If bCheckIfAlreadyExistsBefore = True Then
    
            'Settings Zustand merken und setzen
            bSettingSearchFieldColHidden = ThisWorkbook.Sheets(sDatasheet).Columns(DATASHEET_COL_SEARCHFIELD).EntireColumn.Hidden
            bScreen = Application.ScreenUpdating
            
            Application.ScreenUpdating = False
            
            If ThisWorkbook.Sheets(sDatasheet).Columns(DATASHEET_COL_SEARCHFIELD).EntireColumn.Hidden = True Then
                ThisWorkbook.Sheets(sDatasheet).Columns(DATASHEET_COL_SEARCHFIELD).EntireColumn.Hidden = False
            End If
    
        sSearchStringICP = ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_ACCOUNT) & "_" & _
            ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_MovementRange) & "_" & _
            ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_BreakdownRows) & "_" & _
            sICP
        
        lOccurance = GetFirstOccurence(sDatasheet, DATASHEET_COL_SEARCHFIELD, sSearchStringICP)
        
            If Not ThisWorkbook.Sheets(sDatasheet).Columns(DATASHEET_COL_SEARCHFIELD).EntireColumn.Hidden = bSettingSearchFieldColHidden Then
                ThisWorkbook.Sheets(sDatasheet).Columns(DATASHEET_COL_SEARCHFIELD).EntireColumn.Hidden = bSettingSearchFieldColHidden
            End If
            
            Application.ScreenUpdating = bScreen
     End If
    
    If bCheckIfAlreadyExistsBefore = True And lOccurance > 0 Then
        If bUseMsgBox = True And sICP <> "" Then
            MsgBox "ICP does already exist for this account." + Chr(13) + Chr(13) + _
                   "ICP existiert bereits fuer dieses Konto."
            
            sICP = ""
            sICPDescriptionEng = ""
            sICPDescriptionGer = ""
        End If
        'ICP + Beschreibung leeren
    Else
        'ICP noch nicht im Blatt
        'NEW: TEMPOR|fffd|R
        
        sICPDescription = ICP_GetICPDescription(sICP)
        sICPDescriptionEng = sICPDescription
        sICPDescriptionGer = sICPDescription
        
        If sICPDescription <> "" Then

            'chm_2012_04
            If bUseMsgBox = True And ICP_GetNoICPText(sICP) <> "" Then
                MsgBox ICP_GetNoICPText(sICP)
            End If
            
            'Pr|fffd|fung Konto vs. 0 (verbundene Unternehmen)
            If CompareStrings(sICP, ICP_EXTERN) = True Then
                sAccount = ""
                sAccount = ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_ACCOUNT)
                
                If SET1_RunTimeSettings_Help_IsValueSelectedInList(sAccount, SET2_DimensionSettings_GetICP0NotValid_AccountList) = True Then
                
                    'Nur ausgeben, wenn OnChange Active, dann bei Makros inaktiv
                    If bUseMsgBox = True Then
                        Select Case Tool_GetLanguage
                            Case TOOL_LANGUAGE_ENG
                                MsgBox "Warning: " & sAccount & " does not allow the use of ICP=0 i.e. versus third parties (... with affiliated companies...)"
                                sICPDescriptionEng = "INVALID !!! " & sICPDescription
                            Case Else
                                MsgBox "Warnung: Bei " & sAccount & " ist die Eingabe ICP=0, also gegenueber fremden Dritten, nicht erlaubt (... mit verbundenen Unternehmen)"
                                sICPDescriptionGer = "INVALID !!! " & sICPDescription
                        End Select
                    End If
               End If
            End If
           
            
        Else
            'Schritt2: ICP Ung|fffd|ltig f|fffd|r alle Bl|fffd|tter schreiben
            sICPDescriptionGer = "ICP ungueltig???"
            sICPDescriptionEng = "ICP not valid???"
        End If
        
    End If
    
    'Schritt3: Schreiben in Datenblatt/bl|fffd|tter
    If bOnlyAppendToSingleDatasheet = True Then
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_ICP).Value = sICP
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_SHORTDESCRIPTION_GER).Value = sICPDescriptionGer
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_SHORTDESCRIPTION_ENG).Value = sICPDescriptionEng
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, DATASHEET_COL_SEARCHFIELD).Calculate
    Else
        bScreen = Application.ScreenUpdating
        Application.ScreenUpdating = False
        'Schreibe/Leere ICPs alle Bl|fffd|tter
        'For i = LBound(aDatasheetsInCategory) To UBound(aDatasheetsInCategory)
                                      
            'sDatasheetsInCategory = aDatasheetsInCategory(i)
            If sDatasheetsInCategory <> "" Then
    
                ThisWorkbook.Sheets(sDatasheetsInCategory).Cells(lRow, DATASHEET_COL_ICP).Value = sICP
                ThisWorkbook.Sheets(sDatasheetsInCategory).Cells(lRow, DATASHEET_COL_SHORTDESCRIPTION_GER).Value = sICPDescriptionGer
                ThisWorkbook.Sheets(sDatasheetsInCategory).Cells(lRow, DATASHEET_COL_SHORTDESCRIPTION_ENG).Value = sICPDescriptionEng
                ThisWorkbook.Sheets(sDatasheetsInCategory).Cells(lRow, DATASHEET_COL_SEARCHFIELD).Calculate
                
            End If
        'Next
        Application.ScreenUpdating = bScreen
    End If

    'Schalter zur|fffd|cksetzen
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive bSettingOnChangeInactive
    'Calculate
Exit Sub

errhdl:
    WriteError "ICP_AddICPDescriptions", Err.Description
    Resume Next
End Sub

Sub ICP_CopyHeaders(ByVal sDatasheet As String, ByVal lRowSource As Long, ByVal lRowDestination As Long)
On Error GoTo errhdl
    
    'Funktion kopiert die |fffd|berschriften der Quellzeile in die Zielzeile
    Dim i As Long
    
    For i = 2 To DATASHEET_COL_MovementNumber_FIRST - 1
        If i <> DATASHEET_COL_ICP And i <> DATASHEET_COL_SHORTDESCRIPTION_ENG And i <> DATASHEET_COL_SHORTDESCRIPTION_GER Then
            Select Case i
            Case DATASHEET_COL_SEARCHFIELD, DATASHEET_COL_WITHDATA_PERFORMANCE_1, DATASHEET_COL_WITHDATA_PERFORMANCE_2, DATASHEET_COL_WITHDATA_USER
                ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).FormulaR1C1 = ThisWorkbook.Sheets(sDatasheet).Cells(lRowSource, i).FormulaR1C1
            Case Else
                ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Value = ThisWorkbook.Sheets(sDatasheet).Cells(lRowSource, i).Value
            End Select
            
        ElseIf i = DATASHEET_COL_ICP Or i = DATASHEET_COL_SHORTDESCRIPTION_ENG Or i = DATASHEET_COL_SHORTDESCRIPTION_GER Then
        
            ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Locked = False
            ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
        
        End If
    Next
    
    ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, DATASHEET_COL_BLOCK_ICP) = ""
    
Exit Sub

errhdl:
    WriteError "ICP_CopyHeaders", Err.Description
    Resume Next
End Sub

Sub ICP_CopyDataArea_OnlyFormulas(ByVal sDatasheet As String, ByVal lRowSource As Long, ByVal lRowDestination As Long)
On Error GoTo errhdl
    
    'Funktion kopiert die Formeln der Quellzeile in die Zielzeile
    Dim i As Long
    Dim bExit As Boolean
    
    Dim sC4 As String
    Dim sPriorC4 As String

    bExit = False
    
    For i = DATASHEET_COL_MovementNumber_FIRST To Layout_GetMaxColIndex_byDatasheet(sDatasheet)

        ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Font.Italic = False
        If Mid(Trim(ThisWorkbook.Sheets(sDatasheet).Cells(lRowSource, i).FormulaR1C1), 1, 1) = "=" And ThisWorkbook.Sheets(sDatasheet).Cells(lRowSource, i).Locked = True Then
            ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).FormulaR1C1 = ThisWorkbook.Sheets(sDatasheet).Cells(lRowSource, i).FormulaR1C1
        Else
            ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i) = ""
        End If

    Next
    
Exit Sub

errhdl:
    WriteError "CopyData_OnlyFormulas", Err.Description
    Resume Next
End Sub

Sub ICP_CopyDataArea_OrangeCells_RemoveBlock(ByVal sDatasheet As String, ByVal lRowSource As Long, ByVal lRowDestination As Long)
On Error GoTo errhdl
    
    'Funktion kopiert die Formeln der Quellzeile in die Zielzeile
    Dim i As Long
    Dim bExit As Boolean
    
    Dim sC4 As String
    Dim sPriorC4 As String

    bExit = False
    
    For i = DATASHEET_COL_MovementNumber_FIRST To Layout_GetMaxColIndex_byDatasheet(sDatasheet)

        If ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Interior.Color = 13164796 And _
           ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Locked = True Then
          
          ThisWorkbook.Sheets(sDatasheet).Cells(lRowDestination, i).Locked = False
        End If

    Next
    
Exit Sub

errhdl:
    WriteError "ICP_CopyDataArea_OrangeCells_RemoveBlock", Err.Description
    Resume Next
End Sub

Sub ICP_CopyCompleteRow_Formulas(ByVal sDatasheet As String, ByVal lRowSource As Long, ByVal lRowDestination1 As Long, ByVal lRowDestination2 As Long)
On Error GoTo errhdl
    

'    Rows(lRowSource & ":" & lRowSource).Select
'    Selection.Copy
'    Rows(lRowDestination1 & ":" & lRowDestination2).Select
'    Selection.PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
'    SkipBlanks:=False, Transpose:=False
'    Selection.Font.Italic = False
    
    ThisWorkbook.Sheets(sDatasheet).Rows(lRowSource & ":" & lRowSource).Copy
    ThisWorkbook.Sheets(sDatasheet).Rows(lRowDestination1 & ":" & lRowDestination2).PasteSpecial Paste:=xlPasteFormulas, Operation:=xlNone, _
    SkipBlanks:=False, Transpose:=False
    Selection.Font.Italic = False
    
Exit Sub

errhdl:
    WriteError "ICP_CopyCompleteRow_Formulas", Err.Description
    Resume Next
End Sub

Function ICP_GetICPDescription(ByVal sICP As String) As String
On Error GoTo errhdl

    'Funktion gibt die ICP Description zu|fffd|ck (von Blatt ICPs)
    Dim lRow As Integer

    lRow = GetFirstOccurence(SHEET_ICPs, 2, sICP)
    
    If lRow > 0 Then
        ICP_GetICPDescription = ThisWorkbook.Sheets(SHEET_ICPs).Cells(lRow, 3)
    End If
        
Exit Function

errhdl:
    WriteError "ICP_GetICPDescription", Err.Description
    Resume Next
End Function

Function ICP_GetManagementIDByHFMCompany(ByVal sHFMCompany As String) As String
On Error GoTo errhdl

    'Funktion gibt die ICP Description zu|fffd|ck (von Blatt ICPs)
    Dim lRow As Integer

    lRow = GetFirstOccurence(SHEET_ICPs, 1, sHFMCompany)
    
    If lRow > 0 Then
        ICP_GetManagementIDByHFMCompany = ThisWorkbook.Sheets(SHEET_ICPs).Cells(lRow, 2)
    Else
        ICP_GetManagementIDByHFMCompany = Trim(sHFMCompany)
    End If
        
Exit Function

errhdl:
    WriteError "ICP_GetManagementIDByHFMCompany", Err.Description
    Resume Next
End Function

'chm_2012_04
Function ICP_GetNoICPText(ByVal sICP As String) As String
On Error GoTo errhdl

    'Funktion gibt die ICP Description zu|fffd|ck (von Blatt ICPs)
    Dim lRow As Integer

    lRow = GetFirstOccurence(SHEET_ICPs, 2, sICP)
    
    If lRow > 0 Then
        ICP_GetNoICPText = ThisWorkbook.Sheets(SHEET_ICPs).Cells(lRow, 4)
    End If
        
Exit Function

errhdl:
    WriteError "ICP_GetNoICPText", Err.Description
    Resume Next
End Function



'neu
Public Sub ICP_AppendICPRows(ByVal sDatasheet As String, ByVal lAppendICPAfterThisRow As Long, ByVal lNofICPRowsToAdd As Long)
    'Funktion h|fffd|ngt die angegebene Anzahl ICP Zeilen hinter angegebene Zeile
    'Chm: Zellen zur Eingabe freigeben
    
    'Manuelles Einf|fffd|gen - Automatisches Siehe Modul 6
    
    ' ----- A C H T U N G - funktioniert nicht f|fffd|r Datasheet Categories
    ' aber Funktion aus BnM funktioniert nicht richtig, wenn Filter gesetzt !!!
    On Error GoTo errhdl

    Dim i As Long
    Dim j As Long
    
    Dim lCalc As Long
    
    If sDatasheet = "ACTEXT" Then Exit Sub
     
    lCalc = Application.Calculation
    Application.Calculation = xlCalculationManual

    If lNofICPRowsToAdd > 0 And lNofICPRowsToAdd < 20 Then
        For i = 1 To lNofICPRowsToAdd

            If sDatasheet <> "" Then
            

                If i = 1 Or ThisWorkbook.Sheets(sDatasheet).AutoFilter.FilterMode = True Then
                    'chm: keine vordefinierten Zeilen verwenden, NofIcPRowsToAdd neue anlegen
                    ThisWorkbook.Sheets(sDatasheet).Rows(lAppendICPAfterThisRow + i).Insert Shift:=xlDown
        
                    ICP_CopyHeaders sDatasheet, lAppendICPAfterThisRow, lAppendICPAfterThisRow + i
                    ICP_CopyDataArea_OnlyFormulas sDatasheet, lAppendICPAfterThisRow, lAppendICPAfterThisRow + i
                    ThisWorkbook.Sheets(sDatasheet).Cells(lAppendICPAfterThisRow + i, DATASHEET_COL_ICP) = ""
                    If UCase(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(12, 14)) = "X" Then
                        ICP_CopyDataArea_OrangeCells_RemoveBlock sDatasheet, lAppendICPAfterThisRow, lAppendICPAfterThisRow + i
                    End If
                Else
                    ThisWorkbook.Sheets(sDatasheet).Rows(lAppendICPAfterThisRow + i - 1).Select
                    ThisWorkbook.Sheets(sDatasheet).Rows(lAppendICPAfterThisRow + i).Insert Shift:=xlDown
                    ICP_CopyCompleteRow_Formulas sDatasheet, lAppendICPAfterThisRow + i - 1, lAppendICPAfterThisRow + i, lAppendICPAfterThisRow + i
                    
                End If

            End If
            
         
        Next
    
        ThisWorkbook.Sheets(sDatasheet).Cells(lAppendICPAfterThisRow, 1).Value = ""
    Else
        MsgBox "Max 19"
        ThisWorkbook.Sheets(sDatasheet).Cells(lAppendICPAfterThisRow, 1).Value = ""
    End If

    Application.Calculation = lCalc
    Calculate
Exit Sub

errhdl:
    WriteError "ICP_AppendICPRows", Err.Description
    Resume Next
End Sub



'------------------------------------------------------------------------------------------------------------
' FirstOccurence in Excel
'------------------------------------------------------------------------------------------------------------

Public Function GetFirstOccurence(ByVal sDatasheet As String, ByVal lColumn As Long, ByVal sSearchString As String) As Long
On Error GoTo errhdl
    'Funktion gibt das erste Vorkommen eines Strings in der angegebenen Spalte des angegebenen Blatts zur|fffd|ck
    
    Dim oFindRange As Range
    Dim lRow As Integer
    
    Set oFindRange = ThisWorkbook.Worksheets(sDatasheet).Columns(lColumn).Find(Trim(sSearchString), LookIn:=xlValues, LookAt:=xlWhole)
                    
    If Err.Number <> 0 Then
        Err.Clear
        Set oFindRange = Nothing
    End If
    
    On Error GoTo 0
    
    lRow = 0
    If Not oFindRange Is Nothing Then
        lRow = oFindRange.row
    End If
    
    GetFirstOccurence = lRow
Exit Function

errhdl:
    WriteError "GetFirstOccurence", Err.Description
    Resume Next
End Function

Public Function GetFirstOccurence_WithoutTrim(ByVal sDatasheet As String, ByVal lColumn As Long, ByVal sSearchString As String) As Long
On Error GoTo errhdl
    'Funktion gibt das erste Vorkommen eines Strings in der angegebenen Spalte des angegebenen Blatts zur|fffd|ck
    
    Dim oFindRange As Range
    Dim lRow As Integer
    
    Set oFindRange = ThisWorkbook.Worksheets(sDatasheet).Columns(lColumn).Find(sSearchString, LookIn:=xlValues, LookAt:=xlWhole)
                    
    If Err.Number <> 0 Then
        Err.Clear
        Set oFindRange = Nothing
    End If
    
    On Error GoTo 0
    
    lRow = 0
    If Not oFindRange Is Nothing Then
        lRow = oFindRange.row
    End If
    
    GetFirstOccurence_WithoutTrim = lRow
Exit Function

errhdl:
    WriteError "GetFirstOccurence_WithoutTrim", Err.Description
    Resume Next
End Function

'------------------------------------------------------------------------------------------------------------
' Excel (Locked, Outline, Workbookname, Allg. Formatierung
'------------------------------------------------------------------------------------------------------------

'*** Excel: Locked ***

Public Sub Excel_SetLockedStatus(ByVal sDatasheet As String, _
                        ByVal lDatasheet_Row As Long, _
                        ByVal lDatasheet_Col As Long, _
                        ByVal bLocked As Boolean)
    On Error GoTo errhdl
                        
    ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = bLocked
    
Exit Sub

errhdl:
    WriteError "Excel_SetLockedStatus", Err.Description
    Resume Next

End Sub

Public Function Excel_GetLockedStatus(ByVal sDatasheet As String, _
                        ByVal lDatasheet_Row As Long, _
                        ByVal lDatasheet_Col As Long) As Boolean
    On Error GoTo errhdl
    Dim bLocked As Boolean
    
    bLocked = False
                        
    bLocked = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked
    
'    If bLocked = False Then
'        If ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.Color = 255 Then
'            bLocked = True
'        End If
'    End If
    
    Excel_GetLockedStatus = bLocked
    Exit Function

errhdl:
    WriteError "Excel_GetLockedStatus", Err.Description
    Resume Next

End Function



'*** Excel: Workbook ***

Public Function Excel_GetWorkbookName()
    On Error GoTo errhdl
    Dim sName As String
    Dim aName() As String
    
    sName = ThisWorkbook.Name
    aName = Split(sName, ".")
    sName = aName(0)
'    If Len(sName) > 4 Then
'        sName = Mid(sName, 1, Len(sName) - 4)
'    End If
    
    Excel_GetWorkbookName = sName
    Exit Function
errhdl:
    WriteError "Excel_GetWorkbookName", Err.Description
    Resume Next
End Function

'*** Excel: Outline Functions ***

Public Sub Excel_AllColumnsAndRowsVisible_ALLDatasheets()
    On Error GoTo errhdl
    Dim sDatasheet As String
    Dim i As Long

    For i = LBound(aDatasheets_All) To UBound(aDatasheets_All)
        sDatasheet = aDatasheets_All(i)
        
        If sDatasheet <> "" Then
            Excel_AllColumnsAndRowsVisible sDatasheet
        End If
    Next
    Exit Sub
errhdl:
    WriteError "Excel_AllColumnsAndRowsVisible_ALLDatasheets", Err.Description
    Resume Next
End Sub

Public Sub Excel_AllColumnsAndRowsVisible(ByVal sDatasheet As String)
    On Error GoTo errhdl
    Dim i As Long
    
    'ThisWorkbook.Sheets(sDatasheet).Activate

    ThisWorkbook.Sheets(sDatasheet).Cells.EntireColumn.Hidden = False
    ThisWorkbook.Sheets(sDatasheet).Cells.EntireRow.Hidden = False
    
    Exit Sub
errhdl:
    WriteError "Excel_AllColumnsAndRowsVisible", Err.Description
    Resume Next
End Sub

Public Sub Excel_AllColumnsVisible(ByVal sDatasheet As String)
    On Error GoTo errhdl
    Dim i As Long
    
    'ThisWorkbook.Sheets(sDatasheet).Activate
    ThisWorkbook.Sheets(sDatasheet).Cells.EntireColumn.Hidden = False
    
    Exit Sub
errhdl:
    WriteError "Excel_AllColumnsVisible", Err.Description
    Resume Next
End Sub

Public Sub Excel_OutlineShowMinLevel_All()
    On Error GoTo errhdl

    Excel_OutlineShowMinLevel SHEET_BALANCE
    Excel_OutlineShowMinLevel SHEET_INCOME
    
    Exit Sub
    
errhdl:
    WriteError "Excel_OutlineShowMinLevel_All", Err.Description
    Resume Next
End Sub

Public Sub Excel_OutlineShowMinLevel(ByVal sDatasheet As String)
    On Error Resume Next
    Dim i As Long
    Dim j As Long
    
    
    'Settings: Wenn Max Level > 7 erh|fffd|hen
    For i = 1 To 7
        j = 8 - i
        
        ThisWorkbook.Sheets(sDatasheet).Outline.ShowLevels RowLevels:=j
    Next
End Sub

' *** Excel:Allgemeine Formatierung ***

Public Sub Excel_HideColumn(ByVal sDatasheet As String, ByVal lCol As Long, ByVal bHide As Boolean)
    On Error GoTo errhdl
    If ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).EntireColumn.Hidden <> bHide Then
        ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).EntireColumn.Hidden = bHide
    End If
    Exit Sub
errhdl:
    WriteError "Excel_HideColumn", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_HideRow(ByVal sDatasheet As String, ByVal lRow As Long, ByVal bHide As Boolean)
    On Error GoTo errhdl
    If ThisWorkbook.Sheets(sDatasheet).Rows(lRow & ":" & lRow).EntireRow.Hidden <> bHide Then
        ThisWorkbook.Sheets(sDatasheet).Rows(lRow & ":" & lRow).EntireRow.Hidden = bHide
    End If
    Exit Sub
errhdl:
    WriteError "Excel_HideRow", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_ColumnSetMinimumWidth(ByVal sDatasheet As String, ByVal lCol As Long, ByVal lMinimumWidth As Long)
    On Error GoTo errhdl
    
    If ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth < lMinimumWidth Then
        ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth = lMinimumWidth
    End If
    
    Exit Sub
errhdl:
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth = 15
    
    WriteError "Excel_ColumnSetMinimumWidth", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_ColumnSetWidth(ByVal sDatasheet As String, ByVal lCol As Long, ByVal lWidth As Long)
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth = lWidth

    Exit Sub
errhdl:
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth = 15
    
    WriteError "Excel_ColumnSetWidth", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_ColumnSetAutoFit(ByVal sDatasheet As String, ByVal lCol As Long, ByVal lWidthBeforeAutoFit As Long)
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).ColumnWidth = lWidthBeforeAutoFit

    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).EntireColumn.AutoFit

    Exit Sub
errhdl:
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).EntireColumn.AutoFit
    
    WriteError "Excel_ColumnSetAutoFit", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_SetFontSize(ByVal sDatasheet As String, ByVal lCol As Long, ByVal lFontSize As Long)
    On Error GoTo errhdl
    If lFontSize = 0 Then lFontSize = 10
    
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).Font.Size = lFontSize

    Exit Sub
errhdl:
    ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(lCol) & ":" & GetColLetter2(lCol)).Font.Size = 10

    WriteError "Excel_SetFontSize ", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub Excel_BorderTopThin(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long)
On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).LineStyle = xlContinuous
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).Weight = xlThin
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).ColorIndex = xlAutomatic
    Exit Sub

errhdl:
    WriteError "Excel_BorderTopThin", Err.Description
    Resume Next
End Sub

Public Sub Excel_BorderBottomThin(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long)
On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).LineStyle = xlContinuous
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).Weight = xlThin
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).ColorIndex = xlAutomatic
    Exit Sub

errhdl:
    WriteError "Excel_BorderBottomThin", Err.Description
    Resume Next
End Sub

Public Sub Excel_BorderBottomDouble(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long)
    On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).LineStyle = xlDouble
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).Weight = xlThick
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).ColorIndex = xlAutomatic
    Exit Sub

errhdl:
    WriteError "Excel_BorderBottomDouble", Err.Description
    Resume Next
    
End Sub

Public Sub Excel_BorderTopHairline(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long)
    On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).LineStyle = xlContinuous
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).Weight = xlHairline
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlTop).ColorIndex = xlAutomatic
    Exit Sub

errhdl:
    WriteError "Excel_BorderTopHairline", Err.Description
    Resume Next
    
End Sub

Public Sub Excel_BorderBottomHairline(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long)
    On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).LineStyle = xlContinuous
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).Weight = xlHairline
    ThisWorkbook.Sheets(sDatasheet).Rows(lDatasheet_Row).Borders(xlBottom).ColorIndex = xlAutomatic
    Exit Sub

errhdl:
    WriteError "Excel_BorderBottomHairline", Err.Description
    Resume Next
    
End Sub

Public Sub Excel_SetRowColor(ByVal lRow As Long, ByVal lColorIndex As Long)
On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lRow & ":" & lRow).Interior.ColorIndex = lColorIndex
    Exit Sub
errhdl:
   WriteError "", Err.Description
   Resume Next
End Sub

Public Sub Excel_SetRowColor2(ByVal lRow As Long, ByVal lColorIndex As Long)
On Error GoTo errhdl
    Dim i As Long
    
    If Layout_GetMaxColIndex_byDatasheet(sDatasheet) <= 0 Then
        Excel_SetRowColor lRow, lColorIndex
        Exit Sub
    End If
    
    For i = 1 To Layout_GetMaxColIndex_byDatasheet(sDatasheet)
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, i).Interior.ColorIndex = lColorIndex
    Next
    Exit Sub
errhdl:

   WriteError "", Err.Description
   Resume Next
End Sub

Public Sub Excel_SetRowBold(ByVal lRow As Long)
On Error GoTo errhdl
    ThisWorkbook.Sheets(sDatasheet).Rows(lRow).Font.Bold = True
    Exit Sub
errhdl:
   'Progress Error Err.Description
   WriteError "", Err.Description
   Resume Next
End Sub

Public Sub Excel_SetIndentLevel(ByVal lRow As Long, ByVal lCol As Long, ByVal lLevel As Long)
On Error GoTo errhdl
    If lLevel > 1 Then
        ThisWorkbook.Sheets(sDatasheet).Cells(lRow, lCol).IndentLevel = lLevel - 1
    End If
    Exit Sub
errhdl:
   'Progress Error Err.Description
   WriteError "", Err.Description
   Resume Next
End Sub

Public Sub Excel_SetIndentLevel2(ByVal lRow As Long, ByVal lCol As Long, ByVal lLevel As Long)
On Error GoTo errhdl

    ThisWorkbook.Sheets(sDatasheet).Cells(lRow, lCol).IndentLevel = lLevel

    Exit Sub
errhdl:
   WriteError "Excel_SetIndentLevel2", Err.Description
   Resume Next
End Sub



















Attribute VB_Name = "Modul6"
Option Explicit

'###################################################
' #         IMPORT EXPORT CLEAR                    #
'###################################################

' Check Functions
' Import or Clear
' Export
' Conversion
' Online Values

Dim ConvLogIndent As Long
Public Const bConvLogActive As Boolean = False
'*****************************************************************************
'  Check Functions
'*****************************************************************************

Function CheckData_IsLeave(ByVal sWorksheet As String, ByVal lRow As Long) As Boolean
On Error GoTo errhdl

    If CompareStrings("Y", Mid(ThisWorkbook.Sheets(sWorksheet).Cells(lRow, DATASHEET_COL_ISLEAVE), 1, 1)) = True Then
        CheckData_IsLeave = True
    Else
        CheckData_IsLeave = False
    End If

    Exit Function

errhdl:
    WriteError "CheckData_IsLeave", Err.Description
    Resume Next
End Function

Function CheckData_IsLeave_WithData(ByVal sWorksheet As String, ByVal lRow As Long) As Boolean
On Error GoTo errhdl

    'Performance_Check only for sheet balance
    If CompareStrings(SHEET_BALANCE, sWorksheet) = True Then
    
        If CheckData_IsLeave(sWorksheet, lRow) = True And _
           CompareStrings("D", ThisWorkbook.Sheets(sWorksheet).Cells(lRow, DATASHEET_COL_WITHDATA_USER)) = True Then
            CheckData_IsLeave_WithData = True
        Else
            CheckData_IsLeave_WithData = False
        End If
        
    Else
        CheckData_IsLeave_WithData = CheckData_IsLeave(sWorksheet, lRow)
    End If

    Exit Function

errhdl:
    WriteError "CheckData_IsLeave_WithData", Err.Description
    Resume Next
End Function

Function CheckData_IsLeaveICP(ByVal sWorksheet As String, ByVal lRow As Long) As Boolean
On Error GoTo errhdl

    If CompareStrings("YY", Mid(ThisWorkbook.Sheets(sWorksheet).Cells(lRow, DATASHEET_COL_ISLEAVE), 1, 2)) = True Then
        CheckData_IsLeaveICP = True
    Else
        CheckData_IsLeaveICP = False
    End If

    Exit Function

errhdl:
    WriteError "CheckData_IsLeaveICP", Err.Description
    Resume Next
End Function

Function CheckData_IsICM(ByVal sWorksheet As String, ByVal lRow As Long) As Boolean
On Error GoTo errhdl

    If CompareStrings("ICM", Mid(ThisWorkbook.Sheets(sWorksheet).Cells(lRow, DATASHEET_COL_ACCOUNT_INFO), 1, 3)) = True Then
        CheckData_IsICM = True
    Else
        CheckData_IsICM = False
    End If

    Exit Function

errhdl:
    WriteError "CheckData_IsICM", Err.Description
    Resume Next
End Function
                                
Function Import_CheckLine_BeforeConversion(ByVal sLine As String, ByRef sLog As String) As Boolean
On Error GoTo errhdl

    'Erstes Vorsortieren von Zeilen vor Verarbeitung beim Import, Performanceverbesserung

    Dim sTemp As String

    sTemp = UCase(Replace(sLine, " ", ""))
    
    'ACT EXT L|fffd|nder anlegeny
    If Mid(Trim(sLine), 1, 9) = "#ACTEXT=+" Then
    
        If ThisWorkbook.Sheets("ACTEXT").Visible = True Then
        
            Dim aCountries() As String
            Dim lcounter1, lcounter2 As Long
            Dim bAlreadyInSheet As Boolean
            
            aCountries = Split(sLine, "+")
            For lcounter1 = LBound(aCountries) + 1 To UBound(aCountries)
                'R5 bis CM5, Spalten 18 bis 91
                bAlreadyInSheet = False
                For lcounter2 = 18 To 91
                    If CompareStrings(ThisWorkbook.Sheets("ACTEXT").Cells(5, lcounter2), aCountries(lcounter1)) = True Then
                        bAlreadyInSheet = True
                        Exit For
                    End If
                Next
                
                If bAlreadyInSheet = False Then
                    For lcounter2 = 18 To 91
                        If CompareStrings(ThisWorkbook.Sheets("ACTEXT").Cells(5, lcounter2), "") = True Then
                            If CompareStrings(aCountries(lcounter1), "DE") = False Then
                                ThisWorkbook.Sheets("ACTEXT").Cells(5, lcounter2) = Replace(aCountries(lcounter1), ";", "")
                            End If
                            Exit For
                        End If
                    Next
                End If
            Next
        
            Import_CheckLine_BeforeConversion = False
            sLog = "SKIP; Comment"
                       
            ThisWorkbook.Sheets("Layout").Cells.Calculate
            
            Exit Function
        End If
    End If
    
    'Kommentare
    If Mid(Trim(sLine), 1, 1) = "#" Then
        Import_CheckLine_BeforeConversion = False
        sLog = "SKIP; Comment"
        Exit Function
    End If
    

    If InStr(1, sTemp, "PREVSTEP") > 0 _
        Or InStr(1, sTemp, ";ICM") > 0 _
        Or CompareStrings(sLine, "A") = True _
        Or CompareStrings(Mid(Trim(sLine), 1, 2), "A;") = True Then
       
        'C1=900 nicht abfangen, wird f|fffd|r Vortr|fffd|ge aus Vorperiode Q4 ben|fffd|tigt
        Import_CheckLine_BeforeConversion = False
        sLog = "SKIP; Check Line"
    Else
        Import_CheckLine_BeforeConversion = True
    End If
    
    Exit Function

ExitFunction:
    Import_CheckLine_BeforeConversion = False
    Exit Function

errhdl:
    WriteError "Import_CheckLine_BeforeConversion", Err.Description
    Resume Next
End Function


Function Import_CheckData_AfterConversion(ByVal lImport_Row As Long, _
                        ByRef sImport_Version As String, _
                        ByRef sImport_Year As String, _
                        ByRef sImport_Period As String, _
                        ByRef sImport_Account As String, _
                        ByRef sImport_MovementRange As String, _
                        ByRef sImport_MovementNumber As String, _
                        ByRef sImport_ICP As String, _
                        ByRef sImport_BreakdownRows As String, _
                        ByRef sImport_BreakdownCols As String, _
                        ByRef sImport_Value As String, _
                        ByRef sLog As String) As Boolean
                        
    On Error GoTo errhdl
    Dim bValid As Boolean
    Dim lDatasheet_RowICP As Long
    Dim i As Long
    Dim sDatasheet As String
    
    Dim aVersion() As String
    Dim aYear() As String
    Dim aPeriod() As String

    bValid = True
    sLog = ""
    
    '*************** Calling Makro Openging Values ****************************
    'ICP Partner ohne Daten schreiben, danach alle ung|fffd|ltigen Datens|fffd|tze ablehnen
    
    'If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES Then
        'ICP Zeile anlegen
        If sImport_ICP <> "" Then
            sDatasheet = ""
            sDatasheet = SAP_GetDatasheet_ByAccount(sImport_Account)
            If sDatasheet <> "" Then
                Import_AppendNewICP_NewRowIfNecessary sDatasheet, sImport_Account, sImport_MovementRange, sImport_BreakdownRows, sImport_ICP, lDatasheet_RowICP, sLog, True
            Else
                'Wenn es kein Datenblatt f|fffd|r die angegebene Kombination aus Dimensionen gibt, kann der Datensatz hier bereits ohne weitere Pr|fffd|fungen abgelehnt werden!
                sLog = "SKIP; " & sImport_Account & ": No sheet connection"
                Import_CheckData_AfterConversion = False
                Exit Function
            End If
        End If
    'End If
    
    '*************** Version, Year and Period **********************************

    'Scenario, Year and Period = Reported Period
    If SET1_RunTimeSettings_IsReportingPeriodSelected_ByVersionYearAndPeriod(sImport_Version, sImport_Year, sImport_Period) = False Then
        sLog = "SKIP; Reporting Period ERR (" & sImport_Version & ", " & sImport_Year & ", " & sImport_Period & ")"
        lCriticalErrorsImport_POV_ScenarioYearPeriod = lCriticalErrorsImport_POV_ScenarioYearPeriod + 1
        
        If sCriticalErrorsExport_POV_ScenarioYearPeriod = "" Then
            sCriticalErrorsExport_POV_ScenarioYearPeriod = ";" & sImport_Version & "_" & sImport_Year & "_" & sImport_Period & ";"
        Else
            If Not InStr(1, sCriticalErrorsExport_POV_ScenarioYearPeriod, ";" & sImport_Version & "_" & sImport_Year & "_" & sImport_Period & ";") > 0 Then
                sCriticalErrorsExport_POV_ScenarioYearPeriod = sCriticalErrorsExport_POV_ScenarioYearPeriod & sImport_Version & "_" & sImport_Year & "_" & sImport_Period & ";"
            End If
        End If

        Import_CheckData_AfterConversion = False
        Exit Function
    End If
    
    
    'Estimation: Vortr|fffd|ge in erste Estimation Periode schreiben
    If CompareStrings("00", sImport_MovementNumber) = True Then
        If CompareStrings(SET2_DimensionSettings_GetToolIdentifier, TOOL_IDENTIFIER_ACT_Exx) = True Then
            If CompareStrings(Mid(Trim(sImport_Version), 1, 1), "E") = True Then
            
                If CompareStrings(sImport_Period, ThisWorkbook.Sheets("SET2_DimensionSettings").Cells(8, 7)) = False Then
                    sImport_Period = Replace(ThisWorkbook.Sheets("SET2_DimensionSettings").Cells(8, 7), "'", "")
                End If
               
            End If
        End If
    End If

    '*************** 2. Account and Other Parameters **********************************

    'SAP Movement Type 1
    If SET1_RunTimeSettings_IsMovementNumber_Selected(sImport_MovementNumber) = False Then
       If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES Then
        
            'Opening Values l|fffd|dt auch andere Bewegungsarten, setzt aber deren Wert hier auf 0
            If Not (CompareStrings(sImport_MovementNumber, "00") = True Or CompareStrings(sImport_MovementNumber, "01") = True) Then
                sImport_Value = "0"
            End If
       
       Else
            sLog = "SKIP; MovementNumber=" & sImport_MovementNumber
            Import_CheckData_AfterConversion = False
        
            Exit Function
        End If
    End If
    
    'SAP Movement Type 2
    If SET1_RunTimeSettings_IsMovementRange_Selected(sImport_MovementRange) = False Then
        sLog = "SKIP; MovementRange=" & sImport_MovementRange
        Import_CheckData_AfterConversion = False
        Exit Function
    End If

    '*************** 3. Value **********************************
    'Check: VALUE

    '0-VALUEe eleminieren
    Dim dblImport_Value As Double
    
'    If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = False Then
'
'        dblImport_Value = CDbl(sImport_Value)
'        If dblImport_Value = 0 Then
'            sLog = "SKIP; (Value=0)"
'            Import_CheckData_AfterConversion = False
'            Exit Function
'        End If
'
'        If Abs(dblImport_Value) < 0.005 Then
'            dblImport_Value = 0
'            sImport_Value = "0"
'            bValid = True
'        End If
'
'    End If

ExitFunction:
    Import_CheckData_AfterConversion = bValid
    Exit Function

errhdl:
    WriteError "Import_CheckData_AfterConversion_AccountAndOtherParameters", Err.Description
    Resume Next
End Function


Function Export_CheckValue(ByRef sValue As String) As Boolean
On Error GoTo errhdl
    Dim bExportDataSet As Boolean
    
    bExportDataSet = True

    If sValue = "" Then
       bExportDataSet = False
       GoTo ExitFunction
    Else
        'ChmMei:NULLEN in HFM
        If Abs(CDbl(sValue)) < 1 / 100 Then
            sValue = 0
            bExportDataSet = False
            GoTo ExitFunction
        End If
        '/ChmMei:NULLEN in HFM
    End If

ExitFunction:
    Export_CheckValue = bExportDataSet
    Exit Function

errhdl:
    WriteError "Export_CheckValue", Err.Description
    Resume Next
End Function

'**************************************************************************************
'* Pre and Post
'**************************************************************************************

Public Sub ImportExportClear_Pre1()
    On Error GoTo errhdl
    'L|fffd|uft immer bei Knopfdruck
    
    Dim i As Long
    
    Calculate
    Tool_InitAllDatasheets_FromLayout
    
    EXIT_CURRENT_PROCEDURE = False
    SET1_RunTimeSettings_SetCallingMakro ""
    
    SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive False
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
        
    lCriticalErrorsImport_FileScan_DecimalCharacterError = 0
    lCriticalErrorsImport_POV_Management_ID = 0
    lCriticalErrorsImport_POV_ScenarioYearPeriod = 0
    lCriticalErrorsImport_FileScan_FileNotFound = 0
    sCriticalErrorsImport_FileNotFound_PositivList = ""
    
    lCriticalErrorsExport_ICPIsEmpty = 0
    sCriticalErrorsExport_EmptyICPs = ""
    sCriticalErrorsExport_POV_Management_ID = ""
    sCriticalErrorsExport_POV_ScenarioYearPeriod = ""
    
    lCriticalErrors_ValueOnHiddenMovement = 0
    sCriticalErrors_ValueOnHiddenMovements = ""
    
    Application.ScreenUpdating = False
    
    Exit Sub
    
errhdl:
    WriteError "ImportExportClear_Pre1", Err.Description
    Resume Next
End Sub

Public Sub ImportExportClear_Pre2()
    On Error GoTo errhdl
    'L|fffd|uft nur, wenn bei vorheriger Abfrage nicht Abbrechen gedr|fffd|ckt wurde
    ' und wenn n|fffd|tig auch eine Ladedatei ausgew|fffd|hlt wurde, l|fffd|uft also nicht,
    ' wenn versehentlich ein Button gedr|fffd|ckt und die Aktion mit abbrechen gestoppt wurde.
    
    ' Alle Zeilen werden eingeblendet, sonst kein Import, Export oder Clear ausgeblendeter
    ' Zeilen m|fffd|glich!
    
    If SET1_RunTimeSettings_GetAction <> ACTION_EXPORT Then
        Excel_AllColumnsAndRowsVisible_ALLDatasheets
    End If
    AccountSearch_ClearSelected
    
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    
    Exit Sub
    
errhdl:
    WriteError "ImportExportClear_Pre2", Err.Description
    Resume Next
End Sub

Public Sub ImportExportClear_Post1()
On Error GoTo errhdl

    'L|fffd|uft immer bei Knopfdruck

    SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive True
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
    
    Application.Calculation = xlAutomatic
    'Application.ScreenUpdating = True
    Calculate
    
    Exit Sub
    
errhdl:
    WriteError "ImportExportClear_Post1", Err.Description
    Resume Next
End Sub

Public Sub ImportExportClear_Post2()
On Error GoTo errhdl

    'L|fffd|uft nur wenn auch Pre2 gelaufen ist
    ThisWorkbook.Sheets(SHEET_START).Select
     Application.ScreenUpdating = True
    ThisWorkbook.Sheets(SHEET_START).Cells(2, 10) = " > > > >   p l e a s e      w a i t . . . .      -      B i t t e     w a r t e n . . . .     -    p l e a s e     w a i t . . . .    < < < < <"
     Application.ScreenUpdating = False
    'Special: Show hidden movements, if movement contains data
    
    If lCriticalErrors_ValueOnHiddenMovement > 0 Then
        Dim aValuesOnHiddenMovements() As String
        Dim sHideForCase As String
        Dim i, j As Long
        
        aValuesOnHiddenMovements = Split(sCriticalErrors_ValueOnHiddenMovements, DELIMITER)
    
        'entsprechende F|fffd|lle auf yes setzen
        'F27 to F32 Movements
        'G27 to G32 YES/NO
        
        For i = 27 To 33
            sHideForCase = ""
            sHideForCase = Replace(DELIMITER & ThisWorkbook.Sheets(SHEET_START).Cells(i, 6) & DELIMITER, ";;", ";")
            
            For j = LBound(aValuesOnHiddenMovements) To UBound(aValuesOnHiddenMovements)
                If aValuesOnHiddenMovements(j) <> "" Then
                    If InStr(1, sHideForCase, Trim(aValuesOnHiddenMovements(j))) > 0 Then
                       ThisWorkbook.Sheets(SHEET_START).Cells(i, 7) = "yes"
                    End If
                End If
            Next
        Next
          
    End If
    
    '/Special: Show hidden movements, if movement contains data
    
    Format_AllDatasheets
    
    'Zuklappen nach Import, Export oder Clear
    If SET1_RunTimeSettings_GetAction <> ACTION_EXPORT Then
        Excel_OutlineShowMinLevel SHEET_BALANCE
        Excel_OutlineShowMinLevel SHEET_INCOME
    End If
    
    ThisWorkbook.Sheets(SHEET_START).Select
    ThisWorkbook.Sheets(SHEET_START).Cells(2, 10) = ""
    ThisWorkbook.Sheets(SHEET_START).Cells(1, 1) = ""

    Application.ScreenUpdating = True
    
    Dim sError As String
    Dim sMessageTextTemp As String
    Dim sMessageText As String
    Dim sMsg As String
    
    If lCriticalErrorsImport_FileScan_DecimalCharacterError + lCriticalErrorsImport_POV_Management_ID + lCriticalErrorsImport_POV_ScenarioYearPeriod + lCriticalErrorsExport_ICPIsEmpty > 0 Then
        'Decimal Character Error Vorbereitung (weil in Prozedur mehrer Male verwendet im Fehlerfall)
        Dim dblTest As Double
        Dim sTest As String
        Dim sErrorDecimal As String
        
        dblTest = 1 / 2
        sTest = CStr(dblTest)
        Dim sDecimalCharacter As String
        Dim sDecimalLongText As String
        Dim sThousandLongText As String
        
        If InStr(1, sTest, ".") > 0 Then
            sDecimalCharacter = "."
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                sDecimalLongText = "  <DOT>"
                sThousandLongText = "  <COMMA>"
            Else
                sDecimalLongText = "  <PUNKT>"
                sThousandLongText = "  <KOMMA>"
            End If
        Else
            sDecimalCharacter = ","
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                sDecimalLongText = "  <COMMA>"
                sThousandLongText = "  <DOT>"
            Else
                sDecimalLongText = "  <KOMMA>"
                sThousandLongText = "  <PUNKT>"
            End If
        End If
        
        Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG

                sErrorDecimal = "   Your Operating System setting for decimal character is " & sDecimalLongText & vbNewLine & _
                    "   Your Import File setting for decimal character is " & sThousandLongText & vbNewLine & vbNewLine & _
                    "The load file and your operation system need the same decimal and/or thousand separator character settings! " & _
                    "Please check and modify your SAP settings if necessary and export a new data extract from SAP."
    
         Case Else
         
                 sErrorDecimal = "   Ihre Betriebssystem-Einstellung fuer Dezimaltrennzeichen ist " & sDecimalLongText & vbNewLine & _
                     "   Ihre Ladedatai-Einstellung fuer Dezimaltrennzeichen ist " & sThousandLongText & vbNewLine & vbNewLine & _
                     "Die Lade-Datei und Ihr Betriebssystem benoetingen die selben Einstellungen fuer Dezimal- und/oder Tausendertrennzeichen. " & _
                     "Bitte pruefen und aendern Sie Ihre SAP-Einstellungen falls noetig und exportieren Sie einen neuen Datenextrakt aus SAP."
                 
        End Select
        '/Decimal Character Error Vorbereitung (weil in Prozedur mehrer Male verwendet im Fehlerfall)
    
        Select Case Tool_GetLanguage
        
        Case TOOL_LANGUAGE_ENG
        
            sError = ""
        
            'Decimal Characters
            If lCriticalErrorsImport_FileScan_DecimalCharacterError > 0 Then
            
                sError = sError & vbNewLine & "Decimal character Error: " & lCriticalErrorsImport_FileScan_DecimalCharacterError & vbNewLine & vbNewLine & _
                         sErrorDecimal & vbNewLine & vbNewLine
            End If
                       
            'ICP Emtpy
            If lCriticalErrorsExport_ICPIsEmpty > 0 Then
                sError = sError & vbNewLine & "ICP Empty Error: " & lCriticalErrorsExport_ICPIsEmpty & vbNewLine & vbNewLine
                sError = sError & "   In the tool data was entered without IC-Partner Information." & vbNewLine
                sError = sError & "   Please add IC-Partner for this data in column D." & vbNewLine
                sError = sError & "   You can check which accounts are affected in the log-file:" & vbNewLine & vbNewLine
                sError = sError & File_GetNameAndPath_ApplicationLOG & vbNewLine
            End If
            
        Case Else
            
                sError = ""
                
                'Decimal Characters
                If lCriticalErrorsImport_FileScan_DecimalCharacterError > 0 Then
                
                    sError = sError & vbNewLine & "Fehler - Dezimaltrennzeichen: " & lCriticalErrorsImport_FileScan_DecimalCharacterError & vbNewLine & vbNewLine & _
                             sErrorDecimal & vbNewLine & vbNewLine
                            
                End If
                
                'ICP Emtpy
                If lCriticalErrorsExport_ICPIsEmpty > 0 Then
                    sError = sError & vbNewLine & "Fehler - ICP leer: " & lCriticalErrorsExport_ICPIsEmpty & vbNewLine & vbNewLine
                    sError = sError & "   Es wurden im Tool Daten ohne IC-Partner erfasst." & vbNewLine
                    sError = sError & "   Bitte geben Sie in Spalte D f|fffd|r diese Daten einen IC-Partner ein." & vbNewLine
                    sError = sError & "   Um welche Konten es sich handelt k|fffd|nnen Sie in der Log-Datei nachsehen:" & vbNewLine & vbNewLine
                    sError = sError & File_GetNameAndPath_ApplicationLOG & vbNewLine
                End If
                
        End Select

        If sError <> "" Then
            MsgBox sError, , "Critical Error"
        End If
        
        'Startseite Message f|fffd|llen
        
        sMessageText = ""
        
        If lCriticalErrorsExport_ICPIsEmpty > 0 Then
        
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                sMessageTextTemp = "ERROR - No ICP selected for following accounts: "
            Else
                sMessageTextTemp = "FEHLER - Keine ICP ausgewaehlt fuer folgende Konten: "
            End If
            
            If sMessageText <> "" Then sMessageText = sMessageText & vbNewLine
            sMessageText = sMessageText & sMessageTextTemp & sCriticalErrorsExport_EmptyICPs
        
        End If
        
        If lCriticalErrorsImport_POV_Management_ID > 0 Then
        
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                sMessageTextTemp = "Information - further Entities found in LoadFile: "
            Else
                sMessageTextTemp = "Information - weitere in der Ladedatei enthaltene Gesellschaften: "
            End If
            
            If sMessageText <> "" Then sMessageText = sMessageText & vbNewLine
            sMessageText = sMessageText & sMessageTextTemp & Mid(sCriticalErrorsExport_POV_Management_ID, 2)
        
        End If
        
        If lCriticalErrorsImport_POV_ScenarioYearPeriod > 0 Then
        
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                sMessageTextTemp = "Information - Further Reporting Periods found in LoadFile: "
            Else
                sMessageTextTemp = "Information - Weitere in der Ladedatei enthaltene Berichtsperioden: "
            End If
            
            If sMessageText <> "" Then sMessageText = sMessageText & vbNewLine
            sMessageText = sMessageText & sMessageTextTemp & Mid(sCriticalErrorsExport_POV_ScenarioYearPeriod, 2)
        
        End If
   
    End If
    
    If sMessageText = "" Then
        sMessageText = "OK"
    End If
    
    ThisWorkbook.Sheets(SHEET_START).Cells(START_MSGBOX_ROW, START_MSGBOX_COL) = sMessageText
    Messages_AppendToMessages sMessageText
    
    sMsg = " > > > >   Fertig!  -  Completed!  -  Fertig!  -  Completed!  < < < <"
    
    'File not Found
    If lCriticalErrorsImport_FileScan_FileNotFound > 0 Then
        sMsg = sMsg & vbNewLine & vbNewLine
    
        Select Case Tool_GetLanguage
        Case TOOL_LANGUAGE_ENG
            sMsg = sMsg & sCriticalErrorsImport_FileNotFound_PositivList
        Case TOOL_LANGUAGE_GER
            sMsg = sMsg & sCriticalErrorsImport_FileNotFound_PositivList
        End Select
    End If
    
    MsgBox sMsg
     
    Exit Sub
    
errhdl:
    WriteError "ImportExportClear_Post2", Err.Description
    Resume Next
End Sub


'**************************************************************************************
'* Export or Clear Data
'**************************************************************************************

Public Sub EXPORTorCLEAR()
              
    On Error GoTo errhdl
    
    Dim i As Long

    Dim sDatasheet As String
    Dim lDatasheetCounter As Long
    Dim lDatasheet_Row As Long
    Dim lDatasheet_Col As Long

    Dim sDatasheet_Version As String
    Dim sDatasheet_Year As String
    Dim sDatasheet_Period As String
    Dim sDatasheet_Account As String
    Dim sDatasheet_ICP As String
    Dim sDatasheet_MovementNumber As String
    Dim sDatasheet_MovementRange As String
    Dim sDatasheet_BreakdownRows As String
    Dim sDatasheet_BreakdownCols As String
    Dim sDatasheet_Value As String
    Dim sDatasheet_Formula As String
    

    Dim sDimensions As String
    
    'Lines
    Dim sExportLine_Data As String
    Dim sExportLine_Formula As String
    
    Dim bExport_ClearDataset As Boolean
    
    Dim lcounter As Long
    Dim lcounter2 As Long
       
    'Loop only Selected Cols
    Dim aSelectedCols() As Long
    Dim aFileNamesAndPathsByCols() As String
    Dim lSelectedCols As Long

    Dim lExport_Row As Long
    Dim bExport_Successfull As Boolean

    'Log
    Dim sLog As String
    Dim sFilePathNameLog As String
    
    'Progress
    Dim sProgress As String
    Dim lProgressRowMax As Long
    Dim lProgressStep As Variant
    Dim lProgressLength As Variant
    
    Dim sErrorText As String
    Dim sErrorText2 As String
    
    Dim aSelected_Datasheets() As String
    
    'Files
    Dim sExportFilePathNameArray As String
    Dim aExportFilePathNames() As String
    Dim sExportFilePathName As String
    
    Dim sUnblockICPs As String
    
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
               
    'Export
    If SET1_RunTimeSettings_GetAction = ACTION_EXPORT Then
        
        
        sTimestamp_Short = GetTimestamp_ShortFormat
        sTimestamp_Long = GetTimestamp_LongFormat
        
        File_Open_ExportFiles
        
        '  Export Dateien f|fffd|r alle Selected Reporting Periods
        '  HEADER schreiben
        
        sExportFilePathNameArray = Layout_GetExportFiles_byReportingPeriodIDsAndDatasheet(SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2)
        aExportFilePathNames = Split(sExportFilePathNameArray, ";")
        
        For i = LBound(aExportFilePathNames) To UBound(aExportFilePathNames)
            sExportFilePathName = aExportFilePathNames(i)

            If sExportFilePathName <> "" Then
                File_AppendToFile sExportFilePathName, "#Structure"
                File_AppendToFile sExportFilePathName, "A"
                
'                If UCase(ThisWorkbook.Sheets("SET2_DimensionSettings").Cells(12, 14)) = "X" Then
'                    File_AppendToFile sExportFilePathName, "#R=700000101" & " (" & Date & " " & Time & ")"
'                Else
'                    File_AppendToFile sExportFilePathName, "#R=000000000" & " (" & Date & " " & Time & ")"
'                End If
                
                'ACTEXT
                If CompareStrings(ThisWorkbook.Sheets("SET2_DimensionSettings").Cells(16, 14), "X") = True Then
                    Dim sActExt As String
                    Dim lcounter3 As Long
                
                    sActExt = ""
    
                    For lcounter3 = 17 To 91
                        If CompareStrings(ThisWorkbook.Sheets("ACTEXT").Cells(5, lcounter3), "") = False Then
                            sActExt = sActExt & "+" & ThisWorkbook.Sheets("ACTEXT").Cells(5, lcounter3)
                        End If
                    Next
                    
                    If sActExt <> "" Then
                        File_AppendToFile sExportFilePathName, "#ACTEXT=" & sActExt & "+"
                    End If
                End If
                
                File_AppendToFile sExportFilePathName, "#" & ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5)
                
                If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = True Then
                    Select Case Tool_GetLanguage
                    Case TOOL_LANGUAGE_ENG
                        File_AppendToFile sExportFilePathName, "#Special Feature Formulas"
                    Case TOOL_LANGUAGE_GER
                        File_AppendToFile sExportFilePathName, "#Spezialfall Formeln"
                    End Select
                End If
                
                If Tool_GetLanguage = TOOL_LANGUAGE_GER Then
                    File_AppendToFile sExportFilePathName, "#Version;Gesch|fffd|ftsjahr;Buchungsperiode;Gesellschaft;Position;Bewegungsart;Partner-Gesellschaft;Aufriss 1;Aufriss 2;Bestimmungsland;Periodenwert HW;Mengeneinheit;Menge periodisch;Management ID;Partner Mgmt ID"
                Else
                    File_AppendToFile sExportFilePathName, "#Version;Fiscal year;Posting period;Company;FS Item;Movement Type;Partner Company;Breakdown 1;Breakdown 2;Country of destinati;Period Value LC;Unit of Measure;Periodic quantity;Management ID;Partner Mgmt ID"
                End If
                'Toolversion war hier
                
'                If InStr(1, File_GetOnlyName(sExportFilePathName), "E02_2019_") <= 0 And _
'                   Start_SpecialExport_GetICMOnly = False And _
'                   SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = False Then
'
'                    'Export the following datasheets
'                    If CompareStrings(ThisWorkbook.Sheets("Start").Cells(20, 7), "All(e)") = True Or _
'                       CompareStrings(ThisWorkbook.Sheets("Start").Cells(20, 7), "") = True Or _
'                       CompareStrings(ThisWorkbook.Sheets("Start").Cells(20, 7), SHEET_INCOME) = True Then
'
'                            'Export the following reporting periods
'                            If CompareStrings(ThisWorkbook.Sheets("Start").Cells(21, 7), "All(e)") = True Or _
'                            CompareStrings(ThisWorkbook.Sheets("Start").Cells(21, 7), "") = True Or _
'                            CompareStrings(ThisWorkbook.Sheets("Start").Cells(21, 7), "ACT") = True Then
'
'                            File_AppendToFile sExportFilePathName, "ACT;2019;02;" & ThisWorkbook.Sheets("Syntax").Cells(11, 1) & ";4302050;;" & ";;;;0;;;" & ThisWorkbook.Sheets("Syntax").Cells(12, 1) & ";"
'                            File_AppendToFile sExportFilePathName, "ACT;2019;02;" & ThisWorkbook.Sheets("Syntax").Cells(11, 1) & ";4302060;;" & ";;;;0;;;" & ThisWorkbook.Sheets("Syntax").Cells(12, 1) & ";"
'                            File_AppendToFile sExportFilePathName, "ACT;2019;02;" & ThisWorkbook.Sheets("Syntax").Cells(11, 1) & ";4582050;;" & ";;;;0;;;" & ThisWorkbook.Sheets("Syntax").Cells(12, 1) & ";"
'                            File_AppendToFile sExportFilePathName, "ACT;2019;02;" & ThisWorkbook.Sheets("Syntax").Cells(11, 1) & ";4582060;;" & ";;;;0;;;" & ThisWorkbook.Sheets("Syntax").Cells(12, 1) & ";"
'
'                        End If
'                    End If
'                End If
            End If
        Next
        
    ElseIf SET1_RunTimeSettings_GetAction = ACTION_CLEAR_ICP_BLOCK Then

        sUnblockICPs = ""
        sUnblockICPs = DELIMITER & ThisWorkbook.Sheets(SHEET_START).Cells(START_ICPUNBLOCL_ROW, START_ICPUNBLOCK_COL) & DELIMITER

        If sUnblockICPs = DELIMITER & DELIMITER Then
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                MsgBox "No ICPs Selected in Start row=" & START_ICPUNBLOCL_ROW & " and col=" & START_ICPUNBLOCK_COL & "!"
            Else
                MsgBox "Keine ICPs ausgewaehlt in Start Zeile=" & START_ICPUNBLOCL_ROW & " und Spalte=" & START_ICPUNBLOCK_COL & "!"
            End If
            Exit Sub
        End If
        
    End If
    
    lExport_Row = EXPORT_ROW_FIRST
    
    sProgress = SET1_RunTimeSettings_GetAction & " (" & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_Datasheets2) & ")"
    Progress sProgress, 1
     
    sFilePathNameLog = ""
    
    File_AppendToFile_Log sFilePathNameLog, vbNewLine & "--> " & SET1_RunTimeSettings_GetAction & sTimestamp_Long & vbNewLine
    File_AppendToFile_Log sFilePathNameLog, " Periods    = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2)
    File_AppendToFile_Log sFilePathNameLog, " Sheets     = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_Datasheets2)

    File_AppendToFile_Log sFilePathNameLog, " Ranges     = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementRanges)

    File_AppendToFile_Log sFilePathNameLog, " Flows      = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementNumbers)
    File_AppendToFile_Log sFilePathNameLog, " Source     = " & SET1_RunTimeSettings_Schalter_GetSourceSystem
    File_AppendToFile_Log sFilePathNameLog, " POV        = " & Start_GetPOV & vbNewLine
    

    'Step 1: Loop Selected Datasheets

    For lDatasheetCounter = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
        DoEvents
        
        'Get Sheet Name
        sDatasheet = ""
        sDatasheet = aSelected_Datasheets(lDatasheetCounter)
        
        'Step 2: Datasheet <> ""
        If sDatasheet <> "" Then

            'Get Selected Cols (Set1_RunTimeSettings)
            Layout_GetDatasheetCols_Selected sDatasheet, aSelectedCols, aFileNamesAndPathsByCols
            
            Progress sDatasheet, 2
            
            lProgressLength = 0
            lProgressRowMax = Datasheet_GetMaxRow(sDatasheet)
            lProgressStep = Progressbar_GetRowStep(lProgressRowMax)
         
            'Step 3: Loop Datasheet Rows
            For lDatasheet_Row = DATASHEET_ROW_FIRSTDATASET To FOR_MAX
                DoEvents
                   
                lProgressLength = lProgressLength + lProgressStep
                Progressbar_SetLength lProgressLength, lDatasheet_Row, lProgressRowMax
                
                If EXIT_CURRENT_PROCEDURE = True Then
                    Progress "PROCEDURE STOPPED!", 1
                    File_AppendToFile_Log sFilePathNameLog, "     Sheet=" & sDatasheet & ", Rows=" & lDatasheet_Row & ", EXIT"
                    GoTo Exxit
                End If
                DoEvents
                
                If CompareStrings(ENDE_MARKE, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)) = True Then
                    File_AppendToFile_Log sFilePathNameLog, "     Sheet=" & sDatasheet & ", Rows=" & lDatasheet_Row
                    lDatasheet_Row = FOR_MAX
                End If
                
                'Step 4: Leave
                If (SET1_RunTimeSettings_GetAction = ACTION_EXPORT And ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_PERFORMANCE_ROW, START_TECHNICAL_SETTINGS_COL) = "" And CheckData_IsLeave_WithData(sDatasheet, lDatasheet_Row) = True) Or _
                (SET1_RunTimeSettings_GetAction = ACTION_EXPORT And ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_PERFORMANCE_ROW, START_TECHNICAL_SETTINGS_COL) <> "" And CheckData_IsLeave(sDatasheet, lDatasheet_Row) = True) Or _
                (SET1_RunTimeSettings_GetAction <> ACTION_EXPORT And CheckData_IsLeave(sDatasheet, lDatasheet_Row) = True) _
                Then
                    
                    'Step 5: Loop Only Selected Cols
                    For lSelectedCols = LBound(aSelectedCols) To UBound(aSelectedCols)
                        DoEvents
                        
                        'Step 6: Col<> 0
                        If aSelectedCols(lSelectedCols) <> 0 Then
                            lDatasheet_Col = aSelectedCols(lSelectedCols)
                            
                            DoEvents
                            
                            sExportFilePathName = ""
                            sExportFilePathName = aFileNamesAndPathsByCols(lSelectedCols)
                        
                            If CompareStrings(ENDE_MARKE, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)) = True Then
                                 File_AppendToFile_Log sFilePathNameLog, "     Sheet=" & sDatasheet & ", Rows=" & lDatasheet_Row
                                 lDatasheet_Row = FOR_MAX
                            End If
                            
                            'Step 7: Locked
                             sDatasheet_Account = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT).Value

'                             'Chm: Special Case Orange cells active
'                                If Excel_GetLockedStatus(sDatasheet, lDatasheet_Row, lDatasheet_Col) = False _
'                                Or CompareStrings(sDatasheet_Account, "TOOL_VERS") = True Then
                             
                             If Excel_GetLockedStatus(sDatasheet, lDatasheet_Row, lDatasheet_Col) = False _
                                Or CompareStrings(sDatasheet_Account, "TOOL_VERS") = True _
                                Or (UCase(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(12, 14)) = "X" _
                                     And ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.Color = 13164796 _
                                     And SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_SPECIALEXPORT_EXCEL) Then
                                     
                                'Old Orange: 10079487
                                
                                'Read Dataset
                                Export_ReadDataFromDatasheet sDatasheet, lDatasheet_Row, lDatasheet_Col, sDatasheet_Version, sDatasheet_Year, sDatasheet_Period, sDatasheet_Account, sDatasheet_MovementRange, sDatasheet_MovementNumber, sDatasheet_ICP, sDatasheet_BreakdownRows, sDatasheet_BreakdownCols, sDatasheet_Value
                                Export_ReadFormulaFromDatasheet sDatasheet, lDatasheet_Row, lDatasheet_Col, sDatasheet_Formula
                                
                                If lDatasheet_Row Mod 100 = 0 Then
                                    Debug.Print lDatasheet_Row & "/" & lSelectedCols & ": " & lDatasheet_Col
                                End If
                                
                                If SET1_RunTimeSettings_IsMovementRange_Selected(sDatasheet_MovementRange) = True Then
                                
                                    sDimensions = ""
                                    sDimensions = Tool_GetDimensionString_FromDimensions_ExclValue(sDatasheet_Version, sDatasheet_Year, sDatasheet_Period, sDatasheet_Account, sDatasheet_MovementRange, sDatasheet_MovementNumber, sDatasheet_ICP, sDatasheet_BreakdownRows, sDatasheet_BreakdownCols)
                                
                                    'Step 9: Action
                                    If SET1_RunTimeSettings_GetAction = ACTION_CLEAR Or SET1_RunTimeSettings_GetAction = ACTION_SPECIAL_CLEAR Then
                                        
                '***************************************************************************
                'Clear
    '                                    'Workaround Read Only - blaue Zellen ausgrauen,
    '                                    'ACHTUNG: fkt nur wenn Periode nicht als Read Only markiert, weil Read Only nicht extrahiert und gel|fffd|scht werden kann
    '
    '                                    If ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY Then
    '                                        ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
    '                                    End If
    '
    '                                    '/Workaround Read Only - blaue Zellen ausgrauen

                                        ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).ClearContents
                                        
                                        'Ein Clear per Makro l|fffd|scht auch die Markierung, dass der Wert bereits belegt war.
                                        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = True Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = False
                
                '/Clear
                '***************************************************************************

                                     ElseIf SET1_RunTimeSettings_GetAction = ACTION_CLEAR_ICP_BLOCK Then
                '***************************************************************************
                'Clear ICP Block
                                        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) = "X" Then
                                             If InStr(1, sUnblockICPs, DELIMITER & sDatasheet_ICP & DELIMITER) > 0 Or CompareStrings(sUnblockICPs, DELIMITER & "*" & DELIMITER) = True Then
                                        
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) <> "" Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) = ""
                                                                                          
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = True Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = False
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex <> EXCEL_COLOUR_DATAENTRY Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
                                             
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = True Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = False
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex <> EXCEL_COLOUR_DATAENTRY Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
                                             
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = True Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = False
                                             If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex <> EXCEL_COLOUR_DATAENTRY Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
                                        End If
                                        
                                     End If
                                     
                                     
                '/Clear ICP Block
               '***************************************************************************
               
                                     ElseIf SET1_RunTimeSettings_GetAction = ACTION_CLEAR_ALLDATACELLS_ITALIC Then
                '***************************************************************************
                'Clear Italic
                                            
                                         If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = True Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = False
                               
                '/Clear Italic
               '***************************************************************************
                                        
                                    ElseIf SET1_RunTimeSettings_GetAction = ACTION_EXPORT Then
                                            
                '***************************************************************************
                'EXPORT
                                        Export_CheckValue sDatasheet_Value
                                        
                                        'ACHTUNG, keinen Eintrag in den Online Values f|fffd|r ICP-Konten mit leerer ICP
                                        If Start_SpecialExport_GetICMOnly = False Or CheckData_IsICM(sDatasheet, lDatasheet_Row) = True Then
 
                                            If sDatasheet_Value = "" And ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = True Then
                                                sDatasheet_Value = 0
                                            End If
 
                                            If sDatasheet_Value <> "" Then
                                        
                                             'NEU: Nur noch Warnung ausgeben, Wert trotzdem in Exportdatei schreiben
                                             If CompareStrings("", sDatasheet_ICP) = True And _
                                                    CheckData_IsLeaveICP(sDatasheet, lDatasheet_Row) = True Then

                                                     'Wert auf ICP-Konto ohne ICP
                                                     lCriticalErrorsExport_ICPIsEmpty = lCriticalErrorsExport_ICPIsEmpty + 1
                                                     sErrorText = ""
                                                     sErrorText = sDatasheet_Account
                                    
                                                    sErrorText2 = ""
                                                    
                                                    Select Case SET2_DimensionSettings_GetToolIdentifier
                                                    Case TOOL_IDENTIFIER_PLx
                                                       'MiFri Jahr anf|fffd|gen
                                                       sErrorText2 = sErrorText2 & "Y=" & sDatasheet_Year
                                                    Case TOOL_IDENTIFIER_PBM
                                                       'PBM + Exx Periode anf|fffd|gen
                                                       sErrorText2 = sErrorText2 & "P=" & sDatasheet_Period
                                                    End Select
                                                    
                                                    
                                                    If sDatasheet_MovementRange <> "" Or sDatasheet_MovementNumber <> "" Then
                                                       If sErrorText2 <> "" Then sErrorText2 = sErrorText2 & " "
                                                       
                                                       sErrorText2 = sErrorText2 & "Mvmt/BWA=" & sDatasheet_MovementRange & sDatasheet_MovementNumber
                                                    End If
                                                    
                                                    If sErrorText2 <> "" Then
                                                       sErrorText = sErrorText & " (" & sErrorText2 & ")"
                                                    End If
                                                     
                                                     sCriticalErrorsExport_EmptyICPs = sCriticalErrorsExport_EmptyICPs & sErrorText & ";"
                                                    
                                                     If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                                                        sErrorText = "    Error: No ICP selected for: " & sErrorText
                                                     Else
                                                        sErrorText = "    Fehler: Keine ICP ausgewaehlt f|fffd|r: " & sErrorText
                                                     End If
                                                    
                                                     File_AppendToFile_Log sFilePathNameLog, sErrorText

                                                End If

                                            '3. EXPORT und CONVERSION
                                                sExportLine_Data = sDimensions & DELIMITER & sDatasheet_Value
                                                sExportLine_Formula = sDimensions & DELIMITER & sDatasheet_Formula
                                                
                                                If CheckData_IsLeaveICP(sDatasheet, lDatasheet_Row) = False Or sDatasheet_ICP <> "" Then
                                                    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = True
                                                End If
                                                
                                                If CheckData_IsLeaveICP(sDatasheet, lDatasheet_Row) = True And CompareStrings("", sDatasheet_ICP) = False Then
                                                     
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) <> "X" Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) = "X"
                                                     
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = True
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
                                                     
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = True
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
                                                     
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = True
                                                     If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID

                                                End If
                                                
                                                If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = False Then
                                                    Export_ConversionAndSave sExportFilePathName, sExportLine_Data, sLog
                                                Else
                                                    If IsNumeric(Mid(sDatasheet_Formula, 2)) <> True Then
                                                        Export_ConversionAndSave sExportFilePathName, sExportLine_Formula, sLog
                                                    End If
                                                End If
                                            
                                            End If '/Datasheet_Value<>0
                                            
                                        End If '/ICM

                '/Export
                '***************************************************************************
                                            
                                    End If '/Step 9: Upload Action
                                End If
                            End If '/7 Locked
                        End If '/6 Col<> ""
                    Next '/Step 5: Loop Custom1/Custom4 (keine HBII)
                End If '/Step 4: Leave
            Next '/Step 3: Loop Datasheet Rows
                       
            Progressbar_SetLength MaxWidthProgressBar, lProgressRowMax, lProgressRowMax
        
        End If '/Step 2
     Next  '/Step 1: Loop Datasheets
     

Exxit:

    If SET1_RunTimeSettings_GetAction = ACTION_EXPORT Then
        Dim aExportFilePathNameArray() As String
        Dim sMsgboxSavedTo As String
        
        sMsgboxSavedTo = ""
        aExportFilePathNameArray = Split(sExportFilePathNameArray, DELIMITER)
        
        For i = LBound(aExportFilePathNameArray) To UBound(aExportFilePathNameArray)
            sMsgboxSavedTo = sMsgboxSavedTo & aExportFilePathNameArray(i)
            
            If Len(aExportFilePathNameArray(i)) > 124 Then
                sMsgboxSavedTo = sMsgboxSavedTo & " (>124!!!)"
            End If
            
            sMsgboxSavedTo = sMsgboxSavedTo & vbNewLine
        Next
        
        Select Case Tool_GetLanguage
            Case TOOL_LANGUAGE_ENG
                MsgBox "Export saved to: " & vbNewLine & vbNewLine & sMsgboxSavedTo
            Case Else
                MsgBox "Export gespeichert unter: " & vbNewLine & vbNewLine & sMsgboxSavedTo
        End Select
        
    End If

    File_AppendToFile_Log sFilePathNameLog, vbNewLine & "<-- " & SET1_RunTimeSettings_GetAction & " " & GetTimestamp_UserFormat

Exit Sub

errhdl:
    WriteError "EXPORTorCLEAR", Err.Description
    Resume Next
End Sub

Public Sub Export_ConversionAndSave(ByVal sExportFilePathName As String, _
                                    ByVal sConversionLine As String, _
                                    ByRef sLog As String)
              
    On Error GoTo errhdl
        
    'Export Conversion Semantik und Syntax
    Dim aConversion() As String
    Dim sConversionPart As String
    
    Dim sSheetSyntaxExport As String
    Dim sSheetSemanticExport As String
    
    Dim lcounter As Long
    Dim lcounter2 As Long
    
    '3a. Conversion Semantic und Syntax
    sSheetSyntaxExport = SHEET_ConversionNEW_Syntax_SAP
    sSheetSemanticExport = SHEET_ConversionNEW_Semantic_SAP
    
    If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_SPECIALEXPORT_EXCEL Then

        sSheetSyntaxExport = SHEET_ConversionNEW_Syntax_XLS
        sSheetSemanticExport = ""

    End If
         
    If sSheetSemanticExport <> "" Then
        sConversionLine = ConversionNEW_Semantic_Export(sConversionLine, sSheetSemanticExport, sLog)
    
        aConversion = Split(sConversionLine, "###")
        
        'Conversion Semantic kann mehrere Zeilen liefertn, hier zeilenweise ermitteln und schreiben; Achtung hier 10 verdrahtet
        For lcounter = LBound(aConversion) To UBound(aConversion)
            
            sConversionPart = aConversion(lcounter)
        
            If sConversionPart <> "" Then
                sConversionPart = ConversionNEW_Syntax_Export(sConversionPart, sSheetSyntaxExport, sLog)
                If sConversionPart <> "" Then
                
'                    If bConvLogActive = True Then File_AppendToFile File_GetOnlyPath & "Conversion_Log.csv", "Export;;" & sConversionPart & vbNewLine
                    
                    '3b. Datensatz schreiben
                    File_AppendToFile sExportFilePathName, sConversionPart
                    
                End If
            End If
    
        Next
        
    Else
    
        'Schreiben ohne Conversion Semantic (Syntax ist immer erforderlich, da internes Format <> Externe Formate)
        sConversionPart = ConversionNEW_Syntax_Export(sConversionLine, sSheetSyntaxExport, sLog)
        If sConversionPart <> "" Then
            File_AppendToFile sExportFilePathName, sConversionPart
        End If
        
    End If
                                                
Exit Sub

errhdl:
    WriteError "EXPORTorCLEAR", Err.Description
    Resume Next
End Sub

Sub Export_ReadDataFromDatasheet(ByVal sDatasheet As String, _
                        ByVal lDatasheet_Row As Long, _
                        ByVal lDatasheet_Col As Long, _
                        ByRef sDatasheet_Version As String, _
                        ByRef sDatasheet_Year As String, _
                        ByRef sDatasheet_Period As String, _
                        ByRef sDatasheet_Account As String, _
                        ByRef sDatasheet_MovementRange As String, _
                        ByRef sDatasheet_MovementNumber As String, _
                        ByRef sDatasheet_ICP As String, _
                        ByRef sDatasheet_BreakdownRows As String, _
                        ByRef sDatasheet_BreakdownCols As String, _
                        ByRef lDatasheet_Value As Variant)
                        On Error GoTo errhdl
                        
        
            sDatasheet_Version = ThisWorkbook.Worksheets(sDatasheet).Cells(DATASHEET_ROW_VERSION, lDatasheet_Col).Value
            sDatasheet_Year = ThisWorkbook.Worksheets(sDatasheet).Cells(DATASHEET_ROW_YEAR, lDatasheet_Col).Value
            sDatasheet_Period = ThisWorkbook.Worksheets(sDatasheet).Cells(DATASHEET_ROW_PERIOD, lDatasheet_Col).Value
            sDatasheet_Account = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT).Value
            sDatasheet_ICP = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Value
            sDatasheet_MovementNumber = ThisWorkbook.Worksheets(sDatasheet).Cells(DATASHEET_ROW_MovementNumber, lDatasheet_Col).Value
            sDatasheet_MovementRange = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_MovementRange).Value
            sDatasheet_BreakdownRows = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BreakdownRows).Value
            sDatasheet_BreakdownCols = ThisWorkbook.Worksheets(sDatasheet).Cells(DATASHEET_ROW_BreakdownCols, lDatasheet_Col).Value
            lDatasheet_Value = ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value

            Exit Sub

errhdl:
    WriteError "Export_ReadDataFromDatasheet", Err.Description
    Resume Next
End Sub

Sub Export_ReadFormulaFromDatasheet(ByVal sDatasheet As String, _
                        ByVal lDatasheet_Row As Long, _
                        ByVal lDatasheet_Col As Long, _
                        ByRef sDatasheet_Formula As Variant)
                        On Error GoTo errhdl
                        
        
    sDatasheet_Formula = "'" & ThisWorkbook.Worksheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Formula
    Exit Sub

errhdl:
    WriteError "Export_ReadFormulaFromDatasheet", Err.Description
    Resume Next
End Sub



'*****************************************************************************
'*
'* DATA IMPORT
'*
'*****************************************************************************

Public Sub Import(ByVal sImportFilePathName As String, _
                  ByVal lImportFileRowMax As Long)
                
    On Error GoTo errhdl
    
    '@chm: Prozess|fffd|nderung: pro Wert aus Importdatei wird genau auf einem Blatt "gesucht",
    '      dieses ergibt sich aus Version, Jahr, Periode, Konto, MovementNumber und BreakdownCols!
    '
    '      Konvertierung kann aus einer Zeile mehrere Zeilen zur|fffd|ckliefern!

    'Import File
    Dim sImport_Version As String
    Dim sImport_Year As String
    Dim sImport_Period As String
    Dim sImport_Account As String
    Dim sImport_ICP As String
    Dim sImport_MovementNumber As String
    Dim sImport_MovementRange As String
    Dim sImport_BreakdownRows As String
    Dim sImport_BreakdownCols As String
   
    Dim sImport_Value As String
    
    Dim lImport_Row As Long
    Dim sLine As String
    
    Dim sLineConversion As String
    Dim aLineConversion() As String
    Dim sLineConversionPart As String
    Dim lLineCounterConversion As Long
    Dim lAttributeCounterConversion As Long
    Dim sSheetConversionSyntax As String
    Dim sSheetConversionSemantic As String
    
    Dim ff As Long
    Dim ff_ImportLog As Long
       
    'Datasheet
    Dim sDatasheet As String
    Dim lDatasheet_Col As Long
    Dim lDatasheet_Row As Long
    Dim lDatasheet_RowICP As Long
    
    Dim lSearchStringFound As Long
    Dim sSearchString As String
    Dim sSearchStringICP As String

    Dim sProgress As String
    Dim lProgressRowMax As Long
    Dim lProgressStep As Variant
    Dim lProgressLength As Variant
    
    Dim i As Long
    Dim j As Long

    'Logging
    Dim sLog As String
    Dim bLog As Boolean
    
    Dim sFilePathNameImportLog As String
    Dim sFilePathNameApplicationLog As String
    
    Dim lLogOK As Long
    Dim lLogNotOK As Long
    Dim lLogNotOK_CheckLine As Long

    Dim bImport_Saved As Boolean
    Dim bAppend_NewICP As Boolean

    Progress "IMPORT", 1
    
    sTimestamp_VeryShort = GetTimestamp_VeryShortFormat
    sTimestamp_Short = GetTimestamp_ShortFormat
    sTimestamp_Long = GetTimestamp_LongFormat
    
    sFilePathNameImportLog = File_GetOnlyName(sImportFilePathName)
    sFilePathNameApplicationLog = ""
    
    lLogOK = 0
    lLogNotOK = 0
    lLogNotOK_CheckLine = 0

    File_AppendToFile_Log sFilePathNameApplicationLog, vbNewLine & "--> IMPORT " & GetTimestamp_UserFormat & vbNewLine
    
    File_AppendToFile_Log sFilePathNameApplicationLog, " Timestamp = " & sTimestamp_Long
    File_AppendToFile_Log sFilePathNameApplicationLog, " Periods   = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_ReportingPeriodIDs2)
    File_AppendToFile_Log sFilePathNameApplicationLog, " Sheets    = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_Datasheets2)


    File_AppendToFile_Log sFilePathNameApplicationLog, " Ranges    = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementRanges)

    
    File_AppendToFile_Log sFilePathNameApplicationLog, " Flows     = " & ReplaceDoubleDelimiter(SET1_RunTimeSettings_GetSELECTED_MovementNumbers)
    File_AppendToFile_Log sFilePathNameApplicationLog, " Source    = " & SET1_RunTimeSettings_Schalter_GetSourceSystem
    
    File_AppendToFile_Log sFilePathNameApplicationLog, " POV       = " & Start_GetPOV & vbNewLine

    
    If EXIT_CURRENT_PROCEDURE = True Then
        Progress "PROCEDURE STOPPED!", 1
        GoTo Exxit
    End If
    DoEvents
        
    sProgress = "IMPORT " & "(" & File_GetOnlyName(sImportFilePathName) & ")"
    Progress sProgress, 1

    lImport_Row = 0
    lProgressLength = 0
    lProgressRowMax = lImportFileRowMax
    lProgressStep = Progressbar_GetRowStep(lProgressRowMax)
    
    If EXIT_CURRENT_PROCEDURE = True Then
        Progress "PROCEDURE STOPPED!", 1
        GoTo Exxit
    End If

    On Error GoTo FileNotFoundExit
    
        ff = FreeFile
        Open sImportFilePathName For Input Access Read Shared As #ff

        ff_ImportLog = FreeFile
        Open File_GetNameAndPath_ImportLOG(sImportFilePathName) For Append Access Write Lock Write As #ff_ImportLog
    
    On Error GoTo errhdl
    
    '1: Loop Import File
    Do While Not EOF(ff)
    
        If EXIT_CURRENT_PROCEDURE = True Then
            Progress "PROCEDURE STOPPED!", 1
            GoTo Exxit
        End If
        DoEvents
        
        lProgressLength = lProgressLength + lProgressStep
        Progressbar_SetLength lProgressLength, lImport_Row, lProgressRowMax
        
        sLine = ""
        Line Input #ff, sLine
        lImport_Row = lImport_Row + 1
        Debug.Print lImport_Row
        
        sLog = ""
        bImport_Saved = False
        
        'SONDERFALL |fffd|bergang zu Mangement ID
        If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = True Or ThisWorkbook.Sheets(SHEET_START).Cells(1, 27) = "X" Or ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_DATAFORMAT_ROW, START_TECHNICAL_SETTINGS_COL) <> "" Then

            If InStr(1, sLine, DELIMITER) > 0 Then
                Dim aUebergangMangementID() As String
                Dim lUebergangMangementID As Long
                Dim sUebergangMangementIDGes As String
                Dim sUebergangMangementIDICP As String
                
                aUebergangMangementID = Split(sLine, DELIMITER)
                
                If UBound(aUebergangMangementID) = 14 Then
                    If aUebergangMangementID(13) = "" Then
                    
                        sUebergangMangementIDGes = ""
                        sUebergangMangementIDICP = ""
                        sLine = ""
                
                      For lUebergangMangementID = 0 To 14
                          If lUebergangMangementID = 3 Then
                              sUebergangMangementIDGes = ICP_GetManagementIDByHFMCompany(aUebergangMangementID(lUebergangMangementID))
                              sLine = sLine & DELIMITER
                          ElseIf lUebergangMangementID = 6 Then
                              sUebergangMangementIDICP = ICP_GetManagementIDByHFMCompany(aUebergangMangementID(lUebergangMangementID))
                              sLine = sLine & DELIMITER
                          ElseIf lUebergangMangementID = 13 Then
                              sLine = sLine & DELIMITER & sUebergangMangementIDGes
                          ElseIf lUebergangMangementID = 14 Then
                              sLine = sLine & DELIMITER & sUebergangMangementIDICP
                          Else
                              If lUebergangMangementID <= UBound(aUebergangMangementID) Then
                                  If sLine <> "" Then sLine = sLine & DELIMITER
                                  sLine = sLine & aUebergangMangementID(lUebergangMangementID)
                              Else
                                  sLine = sLine & DELIMITER
                              End If
                          End If
                      Next
                  End If
                End If
                
              
                
            End If '/Delimiter
        End If '/Formel
        
        '/Sonderfall Uebergang zu Management ID

       
        '2: Check Line (Performance)
        If Import_CheckLine_BeforeConversion(sLine, sLog) = True Then
            
            sSheetConversionSyntax = SHEET_ConversionNEW_Syntax_SAP
            sSheetConversionSemantic = SHEET_ConversionNEW_Semantic_SAP
            
            If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_SPECIALIMPORT_EXCEL Then
                sSheetConversionSyntax = SHEET_ConversionNEW_Syntax_XLS
                sSheetConversionSemantic = ""
            End If
            
            'Conversion Syntax
            sLineConversion = ConversionNEW_Syntax_Import(sLine, sSheetConversionSyntax, sLog)
            
            'Conversion Semantik
            If sLineConversion <> "" Then
                If sSheetConversionSemantic <> "" Then
                    sLineConversion = ConversionNEW_Semantic_Import(sLineConversion, sSheetConversionSemantic, sLog)
                End If
                If sLineConversion <> "" Then
                    aLineConversion = Split(sLineConversion, "###")
                End If
            End If
            
            '3: Konvertierung erfolgreich?
            If sLineConversion <> "" Then
            
                '4: Loop Conversion Lines (because of Conversion, Achtung 10 fest verdrahtet)
                For lLineCounterConversion = LBound(aLineConversion) To UBound(aLineConversion)
                    
                    'Zu|fffd|cksetzen vor jeder Konvertierungszeile
                    bImport_Saved = False
                    sLog = ""
                    sLineConversionPart = ""
                    '/Zu|fffd|cksetzen vor jeder Konvertierungszeile

                    sLineConversionPart = aLineConversion(lLineCounterConversion)
                    If sLineConversionPart <> "" Then
'
                    '5: Read Dataset from Import File (incl. Check sManagementID)
                    If Import_ReadData_FromLine_AfterConversion(lImport_Row, sImport_Version, sImport_Year, sImport_Period, sImport_Account, sImport_MovementRange, sImport_MovementNumber, sImport_ICP, sImport_BreakdownRows, sImport_BreakdownCols, sImport_Value, sLineConversionPart, sLog) = True Then
                        
                        '6 Check Data
                        If Import_CheckData_AfterConversion(lImport_Row, sImport_Version, sImport_Year, sImport_Period, sImport_Account, sImport_MovementRange, sImport_MovementNumber, sImport_ICP, sImport_BreakdownRows, sImport_BreakdownCols, sImport_Value, sLog) = True Then
                        
                            '7.Get Datasheet and Col
                             SAP_GetDatasheetAndCol_ByAccountAndOtherParameters sImport_Account, sImport_Version, sImport_Year, sImport_Period, sImport_MovementNumber, sImport_BreakdownCols, sDatasheet, lDatasheet_Col
                             
                             '8: sDatasheet <> ""
                             If sDatasheet <> "" And lDatasheet_Col <> 0 And SET1_RunTimeSettings_IsDatasheet_Selected(sDatasheet) = True Then
                                
                                  sSearchString = UCase(sImport_Account & "_" & sImport_MovementRange & "_" & sImport_BreakdownRows & "_")
                                  
                                 'Findet: vorhandene ICPs inkl. ICP-None eines ICP-Kontos und Konten ohne ICP Aufriss
                                  sSearchStringICP = sSearchString & UCase(sImport_ICP)
                                  lSearchStringFound = GetFirstOccurence(sDatasheet, DATASHEET_COL_SEARCHFIELD, sSearchStringICP)
                              
                                  '9. Gefunden: Konten ohne ICP Aufriss oder ICP bereits im Sheet
                                  If lSearchStringFound > 0 Then
                                  
                                        'Wert eintragen
                                        lDatasheet_Row = lSearchStringFound

                                        '10a. Value und Online Value schreiben wenn nicht locked
                                        If Excel_GetLockedStatus(sDatasheet, lDatasheet_Row, lDatasheet_Col) = False Then
                                            Import_SaveValueToDatasheet sDatasheet, lDatasheet_Row, lDatasheet_Col, sImport_Value, bImport_Saved, sLog
                                            If bImport_Saved = True Then
                                                sLog = "OK;"
                                            End If
                                        Else
                                            sLog = "SKIP; Locked"
                                        End If '/10a.
                                  
                                        'Else: ICPs wurden bereits vorher angelegt, das Anlegen neuer ICPs an dieser Stelle entf|fffd|llt.
                                   
                                  End If '9. Gefunden (ICP in sheet)
                                  
                                'Logging TODO: altes und neues Format anzeigen beim Logging !!!!
                                If bImport_Saved = True Then
                                    lLogOK = lLogOK + 1
                                    File_AppendToFile_Log sFilePathNameImportLog, sTimestamp_Long & DELIMITER & sLine & DELIMITER & sLog & DELIMITER & lLineCounterConversion + 1 & DELIMITER & sLineConversionPart, ff_ImportLog
                                End If
                                '/Logging
                                
                             Else
                                 
                                 'Wurde mindestens ein Sheet f|fffd|r den Account und |fffd|brige Parameter zur|fffd|ck gegeben?
                                 sLog = "SKIP; SHEET/COLUMN not found or Selected"
                            
                            End If '/8: sDatasheet <> ""
        
                        End If '6:CheckData
                    
                    End If '/5:Read Dataset from Import File
                    End If 'Conversion Part <> ""
                    
                    'Logging
                    If bImport_Saved = False Then
                        lLogNotOK = lLogNotOK + 1
                        File_AppendToFile_Log sFilePathNameImportLog, sTimestamp_Long & DELIMITER & sLine & DELIMITER & sLog & DELIMITER & lLineCounterConversion + 1 & DELIMITER & sLineConversionPart, ff_ImportLog
                    End If
                    '/Logging
                    
                Next '/4 Loop Lines (because of conversion)
                
            Else
                lLogNotOK = lLogNotOK + 1
                If sLog = "" Then sLog = "Conversion = 0"
                File_AppendToFile_Log sFilePathNameImportLog, sTimestamp_Long & DELIMITER & sLine & DELIMITER & sLog, ff_ImportLog
            End If '/3: Konvertierung erfolgreich?
        
        Else
            If CompareStrings(sLine, "A") = False Then
                lLogNotOK_CheckLine = lLogNotOK_CheckLine + 1
                File_AppendToFile_Log sFilePathNameImportLog, sTimestamp_Long & DELIMITER & sLine & DELIMITER & sLog, ff_ImportLog
            End If
        End If '/2:Import_CheckLine_BeforeConversion
        
        Progress sLog, 2

    Loop 'Step 1: Loop Import File

Exxit:

    Progressbar_SetLength MaxWidthProgressBar, MaxWidthProgressBar, MaxWidthProgressBar

    File_AppendToFile_Log sFilePathNameApplicationLog, ""
    File_AppendToFile_Log sFilePathNameApplicationLog, " OK         = " & lLogOK
    File_AppendToFile_Log sFilePathNameApplicationLog, " Skip 1     = " & lLogNotOK_CheckLine & " (C1=035, C2=909, C4=PrevStep, A=ICM...)"
    File_AppendToFile_Log sFilePathNameApplicationLog, " Skip 2     = " & lLogNotOK
    File_AppendToFile_Log sFilePathNameApplicationLog, " Rows       = " & lImport_Row
    File_AppendToFile_Log sFilePathNameApplicationLog, vbNewLine & "<-- IMPORT " & GetTimestamp_UserFormat

    lLogFileTemp = lLogFileMax
    File_AppendToFile_Log "", "", ff_ImportLog

    Close #ff
    Close #ff_ImportLog

Exit Sub

FileNotFoundExit:
    
    Progress "File Not Found", 2
    File_AppendToFile_Log sFilePathNameApplicationLog, "File not Found"
    EXIT_CURRENT_PROCEDURE = True
    Exit Sub

errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub

Private Function Import_AppendNewICP_NewRowIfNecessary(ByVal sDatasheet As String, _
                                ByVal sImport_Account As String, _
                                ByVal sImport_MovementRange As String, _
                                ByVal sImport_BreakdownRows As String, _
                                ByVal sImport_ICP As String, _
                                ByRef lDatasheet_RowICP As Long, _
                                ByRef sLog As String, _
                                Optional ByVal bCheckIfICPAlreadyExistsBeforeAppend As Boolean = True) As Boolean
    On Error GoTo errhdl
    
    Dim i As Long
    Dim bAppend As Boolean
    
    Dim sSearchString As String
    Dim sSearchStringICP As String
    Dim lSearchStringFound As Long

    Dim lDatasheet_Row_ICPTop As Long
    Dim lDatasheet_Row_ICPBase_New As Long
    Dim lDatasheet_Row_ICPBase_Last As Long
    
    Dim sDatasheetInCategory As String
'    Dim aDatasheetsInCategory() As String

    sDatasheetInCategory = sDatasheet
    
    bAppend = False
    lSearchStringFound = 0
    sSearchString = UCase(sImport_Account & "_" & sImport_MovementRange & "_" & sImport_BreakdownRows & "_")
    
    'Pr|fffd|fen, ob ICP nicht bereits existiert
    If bCheckIfICPAlreadyExistsBeforeAppend = True Then
        sSearchStringICP = sSearchString & UCase(sImport_ICP)
        lSearchStringFound = GetFirstOccurence(sDatasheet, DATASHEET_COL_SEARCHFIELD, sSearchStringICP)
    End If
    
    If Not lSearchStringFound > 0 Or bCheckIfICPAlreadyExistsBeforeAppend = False Then
        
        sSearchStringICP = sSearchString & UCase(ICP_TOP)
        lSearchStringFound = GetFirstOccurence(sDatasheet, DATASHEET_COL_SEARCHFIELD, sSearchStringICP)
        
        If lSearchStringFound > 0 Then
        
            lDatasheet_Row_ICPTop = lSearchStringFound
            lDatasheet_Row_ICPBase_Last = lSearchStringFound - 1
               
            If CompareStrings(sSearchString, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last, DATASHEET_COL_SEARCHFIELD)) = True And _
                CompareStrings(sSearchString, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last - 1, DATASHEET_COL_SEARCHFIELD)) = True Then
        
                If sDatasheetInCategory <> "" Then
                
                    'Erster ICP Eintrag
                    lDatasheet_RowICP = lDatasheet_Row_ICPBase_Last - 1
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_ICP).Value = Trim(sImport_ICP)
                    ICP_AddICPDescription sDatasheetInCategory, sImport_ICP, lDatasheet_RowICP, bUseMsgBox:=False, bOnlyAppendToSingleDatasheet:=False, bCheckIfAlreadyExistsBefore:=False
            
                    'Neu: Calculate
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_SEARCHFIELD).Calculate
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_MovementRange).Calculate
                End If
        
            ElseIf CompareStrings(sSearchString, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last, DATASHEET_COL_SEARCHFIELD)) = True Then
                
                If sDatasheetInCategory <> "" Then
                    
                    'Zweiter Eintrag
                    lDatasheet_RowICP = lDatasheet_Row_ICPBase_Last
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_ICP).Value = Trim(sImport_ICP)
                    ICP_AddICPDescription sDatasheetInCategory, sImport_ICP, lDatasheet_RowICP, bUseMsgBox:=False, bOnlyAppendToSingleDatasheet:=False, bCheckIfAlreadyExistsBefore:=False
                    
                    'Neu: Calculate
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_SEARCHFIELD).Calculate
                    ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_MovementRange).Calculate
                
                End If
                
            Else
            
                'VORSICHT: Abfangen, dass nur ICP Top im Tool, aber kein entsprechender Base Eintrag
                If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last, DATASHEET_COL_ACCOUNT), sImport_Account) = True And _
                    CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last, DATASHEET_COL_MovementRange), sImport_MovementRange) = True And _
                    CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row_ICPBase_Last, DATASHEET_COL_BreakdownRows), sImport_BreakdownRows) = True Then
                            
                           If sDatasheetInCategory <> "" Then
                           
                               'Manuelles Einf|fffd|gen von neuen ICP-Zeilen siehe Modul5
                               
                               ICP_AppendICPRows sDatasheetInCategory, lDatasheet_Row_ICPBase_Last - 1, 1
                               lDatasheet_Row_ICPBase_New = lDatasheet_Row_ICPBase_Last
               
'''                               'Einf|fffd|gen einer neuen Zeile (f|fffd|gt vor der angegebenen Zeile eine Kopie der Zeile ein)
'''                               ThisWorkbook.Sheets(sDatasheetInCategory).Rows(lDatasheet_Row_ICPBase_Last).Insert Shift:=xlDown
'''                               lDatasheet_Row_ICPBase_New = lDatasheet_Row_ICPBase_Last
'''                               lDatasheet_Row_ICPBase_Last = lDatasheet_Row_ICPBase_Last + 1
'''
'''                               '|fffd|berschriften kopieren
'''                               ICP_CopyHeaders sDatasheetInCategory, lDatasheet_Row_ICPBase_Last, lDatasheet_Row_ICPBase_New
'''
'''                               'Summenformeln kopieren
'''                               ICP_CopyDataArea_OnlyFormulas sDatasheetInCategory, lDatasheet_Row_ICPBase_Last, lDatasheet_Row_ICPBase_New
'''
'''                                'Chm: Special Case Orange cells active
'''                                If UCase(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(12, 14)) = "X" Then
'''                                      ICP_CopyDataArea_OrangeCells_RemoveBlock sDatasheetInCategory, lDatasheet_Row_ICPBase_Last, lDatasheet_Row_ICPBase_New
'''                                End If
'''                               '/Chm: Special Case Orange cells active
                               
                               lDatasheet_RowICP = lDatasheet_Row_ICPBase_New
                               
                               ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_ICP).Value = Trim(sImport_ICP)
                               
                               'Neu: Calculate
                               ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_SEARCHFIELD).Calculate
                               ThisWorkbook.Sheets(sDatasheetInCategory).Cells(lDatasheet_RowICP, DATASHEET_COL_MovementRange).Calculate
    
                               ICP_AddICPDescription sDatasheetInCategory, sImport_ICP, lDatasheet_RowICP, bUseMsgBox:=False, bOnlyAppendToSingleDatasheet:=True, bCheckIfAlreadyExistsBefore:=False
                               
                               'Zur|fffd|cksetzen von lDatasheet_Row_ICPBase_Last f|fffd|r n|fffd|chstes Sheet
                               lDatasheet_Row_ICPBase_Last = lDatasheet_Row_ICPBase_Last - 1
                           End If

                Else
                    lDatasheet_RowICP = 0
                End If
            End If
            
            If lDatasheet_RowICP > 0 Then
                bAppend = True
            Else
                sLog = "SKIP; (ICP TOP only)"
            End If
        
        Else
            'ICP Top nicht gefunden, Konto nicht ICP im Tool oder Konto gar nicht im Tool
            sLog = "SKIP; Account not ICP or not in Sheet"
        End If
        
    Else
        sLog = "SKIP; ICP already in Sheet"
    End If
    
    Import_AppendNewICP_NewRowIfNecessary = bAppend

    
    Exit Function

errhdl:
    WriteError "Import_AppendNewICP_NewRowIfNecessary", Err.Description
    Resume Next
End Function

Function Import_ReadData_FromLine_AfterConversion(ByVal lImport_Row As Long, _
                        ByRef sImport_Version As String, _
                        ByRef sImport_Year As String, _
                        ByRef sImport_Period As String, _
                        ByRef sImport_Account As String, _
                        ByRef sImport_MovementRange As String, _
                        ByRef sImport_MovementNumber As String, _
                        ByRef sImport_ICP As String, _
                        ByRef sImport_BreakdownRows As String, _
                        ByRef sImport_BreakdownCols As String, _
                        ByRef sImport_Value As String, _
                        ByVal sLine As String, _
                        ByRef sLog As String) As Boolean
    On Error GoTo errhdl
                  
    Dim aLine() As String
    Dim bValid As Boolean
    Dim sOnlineValuesDimensions As String

    sImport_Version = ""
    sImport_Year = ""
    sImport_Period = ""
    sImport_Account = ""
    sImport_ICP = ""
    sImport_MovementNumber = ""
    sImport_MovementRange = ""
    sImport_BreakdownRows = ""
    sImport_BreakdownCols = ""
    sImport_Value = ""
    
    bValid = False

    aLine = Split(sLine, DELIMITER)
    
    'Syntax Pr|fffd|fungen sind in Conversion Syntax |fffd|bernommen worden
    'Hier muss bereits klar sein, dass Source Array richtige Syntax hat

    sImport_Version = Trim(aLine(0))
    sImport_Year = Trim(aLine(1))
    sImport_Period = Trim(aLine(2))
    sImport_Account = Trim(aLine(3))
    sImport_MovementRange = Trim(aLine(4))
    sImport_MovementNumber = Trim(aLine(5))
    sImport_ICP = Trim(aLine(6))
    sImport_BreakdownRows = Trim(aLine(7))
    sImport_BreakdownCols = Trim(aLine(8))

    'Desription abfangen
'    If InStr(1, aLine(9), """") > 0 Then
'        bValid = False
'        sLog = "SKIP; !DESCRIPTION " & Trim(aLine(9))
'    Else
        'Vorher auf 0 setzen, damit bei Typfehler nicht vorheriger Wert importiert wird.
        sImport_Value = "0"
        
        If Trim(aLine(9)) = "" Then
            bValid = False
            sLog = "SKIP; Value=" & aLine(9)
        Else
            bValid = True
            sImport_Value = Trim(aLine(9))
        End If
'    End If
            
    Import_ReadData_FromLine_AfterConversion = bValid
            
Exit Function

errhdl:
    WriteError "Import_ReadData_FromLine_AfterConversion", Err.Description
    Resume Next
End Function

Sub Import_SaveValueToDatasheet(ByVal sDatasheet As String, _
                            ByRef lDatasheet_Row As Long, _
                            ByVal lDatasheet_Col As Long, _
                            ByVal lImport_Value As Variant, _
                            ByRef bSaved As Boolean, _
                            ByRef sLog As String)
                            On Error GoTo errhdl
    

    Dim sImportMode As String
    
    Dim sClearVortragswerteLine As String
    Dim sMovementNumber As String
    Dim sAccount As String
    
    'Wenn Nur ICM Konten = YES und Konto kein ICM Konto abweisen
    If Start_SpecialExport_GetICMOnly = True And CheckData_IsICM(sDatasheet, lDatasheet_Row) = False Then
        sLog = "No ICM Account"
        Exit Sub
    End If
    
    sMovementNumber = ""
    bSaved = False

    sImportMode = SET1_RunTimeSettings_GetSELECTED_Mode
        
    sMovementNumber = Layout_GetMovementNumber_ByDatasheetAndCol(sDatasheet, lDatasheet_Col)
    sAccount = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)
    
    'Special: Show hidden movements, if movement contains data
    If CompareStrings("", sMovementNumber) <> True Then
        
            If SET1_RunTimeSettings_HIDDENMOVEMENTS_IsMoveInList(sMovementNumber) = True Then
                lCriticalErrors_ValueOnHiddenMovement = lCriticalErrors_ValueOnHiddenMovement + 1
                If SET1_RunTimeSettings_Help_IsValueSelectedInList(sMovementNumber, sCriticalErrors_ValueOnHiddenMovements) = False Then
                    
                    If CompareStrings("ORDER_HAND", sAccount) = False And CompareStrings("TRA", Mid(sAccount, 1, 3)) = False Then
                        Debug.Print "*" & sAccount
                        
                        If sCriticalErrors_ValueOnHiddenMovements = "" Then
                            sCriticalErrors_ValueOnHiddenMovements = sCriticalErrors_ValueOnHiddenMovements & DELIMITER
                        End If
                        sCriticalErrors_ValueOnHiddenMovements = sCriticalErrors_ValueOnHiddenMovements & sMovementNumber & DELIMITER
                
                    End If
                    
                End If
            End If
       
    End If
    '/Special: Show hidden movements, if movement contains data
    
    'Special: Lock already exported Cells and ICPs
    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = True
    
    If CheckData_IsLeaveICP(sDatasheet, lDatasheet_Row) = True And ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) <> "" Then
        
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) <> "X" Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_BLOCK_ICP) = "X"
        
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Locked = True
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
        
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Locked = True
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
        
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = False Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Locked = True
        If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex <> EXCEL_COLOUR_CELLNOTVALID Then ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG).Interior.ColorIndex = EXCEL_COLOUR_CELLNOTVALID
    
    ElseIf CheckData_IsLeaveICP(sDatasheet, lDatasheet_Row) = True And ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) = "" Then
        
        ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Font.Italic = False
    
    End If
    '/Special: Lock already exported Cells and ICPs


    If SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive = False Then

        If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES And Not (CompareStrings(sMovementNumber, "00") = True Or CompareStrings(sMovementNumber, "01") = True) Then
                'Update: Standard Import Opening Values does not import any data than opening values

'                If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value = "" Then
'                    'Null nur schreiben, wenn kein Wert vorhanden
'                    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value = CDbl(lImport_Value)
'                End If
            sLog = "No Opening Value"
            Exit Sub
                
        Else
                   
            If CompareStrings(sImportMode, IMPORT_MODE_ACCUMULATE) = True Then
                ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value + CDbl(lImport_Value)
            Else
                ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Value = CDbl(lImport_Value)
            End If

        End If
        
    Else
        ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Formula = Mid(lImport_Value, 2)
    End If
    
    bSaved = True
    
    'Wenn 69 einblenden
    If CompareStrings(sDatasheet, SHEET_BALANCE) = True And CompareStrings(sMovementNumber, "69") = True Then
        ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALCASES_OTHERCHANG69_ROW, START_SPECIALCASES_COL) = "yes"
    End If
    
        
    'Chm: Special Case IFRS15
    
'*** Chm: Special Case Orange cells active
    If UCase(ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(12, 14)) = "X" Then
        
        ' Farbe f|fffd|r gesperrte Zellen, aber nicht gesperrt, aber nicht gesperrt
          If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.Color = 13164796 And _
            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = False Then
            
            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = True
          End If
        
    End If
'*** /Chm: Special Case Orange cells active

    'lDatasheet_Row = FOR_MAX

Exit Sub

errhdl:
    WriteError "Import_SaveValueToDatasheet", Err.Description
    Resume Next
End Sub

'**************************************************************************************
'* CONVERSION
'**************************************************************************************

'Syntax

Function ConversionNEW_Syntax_Import(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String) As String
    ConversionNEW_Syntax_Import = ConversionNEW_Syntax(sLine, sConversionSheet, sLog, True)
End Function

Function ConversionNEW_Syntax_Export(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String) As String
    ConversionNEW_Syntax_Export = ConversionNEW_Syntax(sLine, sConversionSheet, sLog, False)
End Function



Private Function ConversionNEW_Syntax(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String, ByVal bImport As Boolean) As String
    On Error GoTo errhdl
    
    'Diese Funktion konvertiert aus einem Quellformat in ein Zielformat (ohne Dopplung!)
    'mit der M|fffd|glichkeit einzelne Quellspalten in mehrere Zielspalten zu schreiben oder
    'in eine Zielspalte mehrere Quellspalten oder feste Werte hintereinander zu schreiben


    Dim lFirstRow As Long
    Dim lLastRow As Long
    Dim lRowCounter As Long
        
    Dim lUBOUND_LineInput As Long
    Dim lUBOUND_LineOutput As Long
    
    Dim aLine_Input() As String

    Dim aConditions() As String
    Dim aCondition_Single() As String
    
    Dim aDestinations() As String
    Dim aDestination_Single() As String
    
    Dim aLine_Output() As String
    Dim sLine_Output As String
    
    Dim sValueOrColumn As String
    Dim sExitOrResume As String
    Dim bConditionTrue As Boolean
    
    Dim lcounter As Long
    Dim lInputLineMangementID As Long
    
    lFirstRow = 0
    lLastRow = 0
    
    lUBOUND_LineInput = 0
    lUBOUND_LineOutput = 0
    
    If bImport = True Then
    
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(3, 1)) = True Then lFirstRow = ThisWorkbook.Sheets(sConversionSheet).Cells(3, 1)
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(3, 2)) = True Then lLastRow = ThisWorkbook.Sheets(sConversionSheet).Cells(3, 2)
        
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(8, 1)) = True Then lUBOUND_LineInput = ThisWorkbook.Sheets(sConversionSheet).Cells(8, 1) 'External
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(9, 1)) = True Then lUBOUND_LineOutput = ThisWorkbook.Sheets(sConversionSheet).Cells(9, 1) 'Internal
    
    Else
    
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(5, 1)) = True Then lFirstRow = ThisWorkbook.Sheets(sConversionSheet).Cells(5, 1)
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(5, 2)) = True Then lLastRow = ThisWorkbook.Sheets(sConversionSheet).Cells(5, 2)
            
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(8, 1)) = True Then lUBOUND_LineOutput = ThisWorkbook.Sheets(sConversionSheet).Cells(8, 1) 'Internal
        If IsNumeric(ThisWorkbook.Sheets(sConversionSheet).Cells(9, 1)) = True Then lUBOUND_LineInput = ThisWorkbook.Sheets(sConversionSheet).Cells(9, 1) 'External
    
    End If
    
    'Eingige Bedingungen f|fffd|r Line und gelesene Parameter pr|fffd|fen
    
    If Not InStr(1, sLine, DELIMITER) > 0 And Not (lFirstRow > 0 And lLastRow > 0 And lUBOUND_LineInput > 0 And lUBOUND_LineOutput > 0) Then
        sLog = "SKIP; Conversion Syntax Error (invalid common parameter): NO Conversion"
        ConversionNEW_Syntax = ""
        Exit Function
    End If
    
    aLine_Input = Split(sLine, DELIMITER)
    If Not UBound(aLine_Input) = lUBOUND_LineInput Then
        sLog = "SKIP; Conversion Syntax Error (invalid line format): NO Conversion"
        ConversionNEW_Syntax = ""
        Exit Function
    End If
    
    'Ausgabezeile initialisiern
    
    ReDim aLine_Output(lUBOUND_LineOutput)
    For lcounter = LBound(aLine_Output) To UBound(aLine_Output)
        aLine_Output(lcounter) = ""
    Next
    
    'Import Check Management ID
    If bImport = True Then
        lInputLineMangementID = 13
        If SET1_RunTimeSettings_GetCallingMakro = CALLINGMAKRO_SPECIALIMPORT_EXCEL Then
            lInputLineMangementID = 4
        End If
        If CompareStrings(aLine_Input(lInputLineMangementID), Start_GetManagementID) = False Then
            
            sLog = "SKIP; Management ID ( " & aLine_Input(lInputLineMangementID) & " <> " & Start_GetManagementID & ")"
            lCriticalErrorsImport_POV_Management_ID = lCriticalErrorsImport_POV_Management_ID + 1
            ConversionNEW_Syntax = ""
            
            If sCriticalErrorsExport_POV_Management_ID = "" Then
                sCriticalErrorsExport_POV_Management_ID = ";" & aLine_Input(lInputLineMangementID) & ";"
            Else
                If Not InStr(1, sCriticalErrorsExport_POV_Management_ID, ";" & aLine_Input(lInputLineMangementID) & ";") > 0 Then
                    sCriticalErrorsExport_POV_Management_ID = sCriticalErrorsExport_POV_Management_ID & aLine_Input(lInputLineMangementID) & ";"
                End If
            End If
            
            Exit Function
            
        End If
    End If
    
    'Conversion Syntax Sheet durchlaufen
    For lRowCounter = lFirstRow To lLastRow
    
        'Pr|fffd|fe ob Bedingung erf|fffd|llt pro Syntax Row
        bConditionTrue = True
        If ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 5) <> "" Then
            aConditions = Split(ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 5), DELIMITER)
            
            For lcounter = LBound(aConditions) To UBound(aConditions)
                If aConditions(lcounter) <> "" Then
                    aCondition_Single = Split(aConditions(lcounter), "=")
                    
                    If UBound(aCondition_Single) = 1 And IsNumeric(aCondition_Single(0)) = True Then
                        If ConversionNEW_CheckMatch(aCondition_Single(1), aLine_Input(aCondition_Single(0))) = False Then
                            bConditionTrue = False
                            Exit For
                        End If
                    Else
                        sLog = sLog & "Format Error in Conversion Syntax (Condition): " & aConditions(lcounter)
                        Debug.Print sLog
                        Debug.Assert True
                    End If
                End If
            Next

        End If
        '/Pr|fffd|fe ob Bedingung erf|fffd|llt pro Syntax Row
        
        'Schreibe in LineOutput pro Syntax row
        If bConditionTrue = True Then
           
            If ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 6) <> "" Then
                aDestinations = Split(ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 6), DELIMITER)
            
                sValueOrColumn = ""
                sExitOrResume = ""
                
                sValueOrColumn = ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 1)
                sExitOrResume = ThisWorkbook.Sheets(sConversionSheet).Cells(lRowCounter, 2)
                
                For lcounter = LBound(aDestinations) To UBound(aDestinations)
                    aDestination_Single = Split(aDestinations(lcounter), "=")
                    
                    If UBound(aDestination_Single) = 1 And IsNumeric(aDestination_Single(0)) = True Then
                        If CompareStrings(sValueOrColumn, "V") = True Then
                            aLine_Output(aDestination_Single(0)) = aLine_Output(aDestination_Single(0)) & aDestination_Single(1)
                        Else
                            If IsNumeric(aDestination_Single(1)) = True Then
                                aLine_Output(aDestination_Single(0)) = aLine_Output(aDestination_Single(0)) & aLine_Input(aDestination_Single(1))
                            End If
                        End If
                    Else
                    sLog = sLog & "Format Error in Conversion Syntax (Destination): " & aDestinations(lcounter)
                    Debug.Print sLog
                    Debug.Assert True
                    End If
                    
                Next
                
            End If
            
            If UCase(sExitOrResume) = "X" Then
                Exit For
            End If
        
        End If '/Schreibe in LineOutput pro Syntax row


        
    Next 'Loop Rows
    
    'NEW 2016: SONDERFALL UMWANDLUNG PARTNERMANAGMENT-ID in PARTNER COMPANY (6:PCompany; 14:PMID)
    If bImport = False And SET1_RunTimeSettings_GetCallingMakro <> CALLINGMAKRO_SPECIALEXPORT_EXCEL Then
        If InStr(1, aLine_Output(14), "-") > 0 Then
            aLine_Output(6) = Mid(aLine_Output(14), 1, InStr(1, aLine_Output(14), "-") - 1)
        End If
    End If
    

    For lcounter = LBound(aLine_Output) To UBound(aLine_Output)
        If lcounter <> UBound(aLine_Output) Then
            sLine_Output = sLine_Output & aLine_Output(lcounter) & DELIMITER
        Else
            sLine_Output = sLine_Output & aLine_Output(lcounter)
        End If
    Next
    
    ConversionNEW_Syntax = sLine_Output

    Exit Function

errhdl:
    WriteError "ConversionNEW_Syntax", Err.Description
    Resume Next
End Function


Function ConversionNEW_Semantic_Import(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String) As String
    ConversionNEW_Semantic_Import = ConversionNEW_Semantic(sLine, sConversionSheet, sLog, True)
End Function

Function ConversionNEW_Semantic_Export(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String) As String
    ConversionNEW_Semantic_Export = ConversionNEW_Semantic(sLine, sConversionSheet, sLog, False)
End Function

Private Function ConversionNEW_Semantic(ByVal sLine As String, ByVal sConversionSheet As String, ByRef sLog As String, ByVal bImport As Boolean) As String
                
    On Error GoTo errhdl
    Dim sFirstRow As String
    Dim sLastRow As String
    Dim sUBOUNDInternal As String
        
    If bImport = True Then
        sFirstRow = ThisWorkbook.Sheets(sConversionSheet).Cells(3, 1)
        sLastRow = ThisWorkbook.Sheets(sConversionSheet).Cells(3, 2)
    Else
        sFirstRow = ThisWorkbook.Sheets(sConversionSheet).Cells(5, 1)
        sLastRow = ThisWorkbook.Sheets(sConversionSheet).Cells(5, 2)
    End If
    sUBOUNDInternal = ThisWorkbook.Sheets(sConversionSheet).Cells(8, 1)

    
    If IsNumeric(sFirstRow) = True And IsNumeric(sLastRow) = True And IsNumeric(sUBOUNDInternal) = True Then
        
        'Semantik (Conversion)
        ConversionNEW_Semantic = ConversionNEW_Semantic_HandleMultipleSource( _
               sConversionSheet, _
            CLng(sFirstRow), _
            CLng(sLastRow), _
            sLine, _
            CLng(sUBOUNDInternal), _
            sLog)
    Else
      
        sLog = "No Conversion (Error in common Parameters)"
        ConversionNEW_Semantic = sLine
 
    End If

    Exit Function

errhdl:
    WriteError "ConversionNEW_Semantic", Err.Description
    Resume Next
End Function

Public Function ConversionNEW_Semantic_HandleMultipleSource(ByVal sConversionSheet As String, ByVal lCurrentRow As Long, ByVal lLastRow As Long, _
    ByVal sLine As String, ByVal lUBOUNDInternal As Long, ByRef sLog As String) As String
           
    On Error GoTo errhdl
    
    'Conversion Source kann hintereinander mehrere Datens|fffd|tze enthalten "Separator: ###"
   
   'die jeweils lNofAttributesPerDataset Merkmale enthalten
    'f|fffd|r jeden dieser Datens|fffd|tze wird dann die semantische Konvertierung durchgef|fffd|hrt
    'und alle Ergebnisse konkateniert
    
    Dim aLine_Input() As String
    Dim sLine_InputSingle As String
    
    Dim lLinesCounter As Long
    Dim sLine_Output As String
    
    sLine_Output = ""


    If InStr(1, sLine, "###") > 0 Then
        aLine_Input = Split(sLine, "###")
    Else
        ReDim aLine_Input(0)
        aLine_Input(0) = sLine
    End If
    
    For lLinesCounter = LBound(aLine_Input) To UBound(aLine_Input)
        sLine_InputSingle = aLine_Input(lLinesCounter)
        
        If InStr(1, sLine_InputSingle, DELIMITER) > 0 Then

            sLine_InputSingle = ConversionNEW_Semantic_HandleSingleSource(sConversionSheet, lCurrentRow, lLastRow, sLine_InputSingle, lUBOUNDInternal, sLog)
        
            If sLine_InputSingle <> "" Then
                If sLine_Output <> "" Then sLine_Output = sLine_Output & "###"
                sLine_Output = sLine_Output & sLine_InputSingle
            End If
            
        Else
            sLog = sLog & "ConversionNew Semantic Error"
            Exit For
        End If
        
    Next
   
    ConversionNEW_Semantic_HandleMultipleSource = sLine_Output
    
    
    Exit Function

errhdl:
    WriteError "ConversionNEW_Semantic_HandleMultipleSource", Err.Description
    Resume Next
End Function

Private Function ConversionNEW_Semantic_HandleSingleSource( _
                ByVal sConversionSheet As String, _
                ByVal lCurrentRow As Long, _
                ByVal lLastRow As Long, _
                ByRef sLine As String, _
                ByVal lUBOUNDInternal As Long, _
                ByRef sLog As String) As String

    On Error GoTo errhdl
    
    'sLine kann nur einen Datensatz enthalten, der nach den Regeln der Konvertierungstabelle des |fffd|bergebenen
    'Blattes abgearbeitet werden soll, hier f|fffd|r CurrentRow
    
    'auch wenn die Konvertierungssource nur einen Datensatz |fffd|bergibt, so kann das Ergebnis doch eine Vervielf|fffd|ltigung sein
    
    'Debug.Print lCurrentRow & ": " & sLine
    
    Dim lcounter As Long
    Dim lcounter2 As Long
    
    Dim sExitOrResume As String
    Dim lResumeAtLine As Long
    Dim lNofDestinations As Long
    Dim sValueOrCondition As String

    Dim bConditionTrue As Boolean
    
    Dim aLine_Input() As String
    
    Dim aConditions() As String
    Dim aCondition_Single() As String

    Dim aDestinations() As String
    Dim aDestination_Single() As String

    Dim sLine_Output As String
    Dim aLine_Output_Single() As String
    
    Dim sResult As String
    
    If lCurrentRow > lLastRow Then
        ConversionNEW_Semantic_HandleSingleSource = sLine
        Exit Function
    End If
    
    sResult = ""
    
    '1.allgemeine Werte der Zeile lesen
    lNofDestinations = 0
    sExitOrResume = ""
    sValueOrCondition = ""
    
    lNofDestinations = ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 1)
    sExitOrResume = ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 2)
    sValueOrCondition = ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 3)
    
    aLine_Input = Split(sLine, DELIMITER)
    If UBound(aLine_Input) <> lUBOUNDInternal Then
        sLog = "SKIP; Conversion Syntax Error"
        ConversionNEW_Semantic_HandleSingleSource = ""
        Exit Function
    End If

        
    '3.Conditions pr|fffd|fen
     If ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 5) = "" Then
         'Allgemeine Bdingung erf|fffd|llt
         bConditionTrue = True
     
        If ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 6) <> "" Then

             aConditions = Split(ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 6), DELIMITER)
    
             '3. Loop Conditions
             For lcounter = LBound(aConditions) To UBound(aConditions)
                 
                 aCondition_Single = Split(aConditions(lcounter), "=")
                 
                 If UBound(aCondition_Single) = 1 And IsNumeric(aCondition_Single(0)) = True Then
                     
                     If ConversionNEW_CheckMatch(aCondition_Single(1), aLine_Input(aCondition_Single(0))) = False Then
                         bConditionTrue = False
                         Exit For
                     End If
                         
                 Else
                     sLog = sLog & "  Conversion Syntax Error in ConversionNEW_Semantic_HandleSingleSource (Condition): " & aConditions(lcounter)
                     Debug.Print sLog
                     Debug.Assert True
    
    '                    ConversionNEW_Semantic_HandleSingleSource = ""
    '                    Exit Function
                 End If
             Next
        
        End If
        
     Else
     
        bConditionTrue = False
     
     End If '/Condition pr|fffd|fen
     
     
     '4. Destination schreiben, wenn Condition erf|fffd|llt
     If bConditionTrue = True Then
         
         sLine_Output = ""
         
         For lcounter = 1 To lNofDestinations
         
             aDestinations = Split(ThisWorkbook.Sheets(sConversionSheet).Cells(lCurrentRow, 6 + lcounter), DELIMITER)
             ReDim aLine_Output_Single(lUBOUNDInternal)
           
             'Output Line initialisiern mit Input Line
             For lcounter2 = 0 To lUBOUNDInternal
                 aLine_Output_Single(lcounter2) = aLine_Input(lcounter2)
             Next
           
             'Loop Destination
             For lcounter2 = LBound(aDestinations) To UBound(aDestinations)
                 aDestination_Single = Split(aDestinations(lcounter2), "=")
                 
                 If UBound(aDestination_Single) = 1 And IsNumeric(aDestination_Single(0)) = True Then
                     If UCase(sValueOrCondition) = "V" Then
                     
                         'RESULT oder VALUE RESULT
                         If aDestination_Single(0) = 9 Then
                             aLine_Output_Single(aDestination_Single(0)) = ConversionNEW_GetValueResult(aLine_Input(aDestination_Single(0)), aDestination_Single(1))
                         Else
                             aLine_Output_Single(aDestination_Single(0)) = ConversionNEW_GetResult(aLine_Input(aDestination_Single(0)), aDestination_Single(1))
                         End If
                         
                     Else
                     
                         If IsNumeric(aDestination_Single(1)) = True Then
                             aLine_Output_Single(aDestination_Single(0)) = aLine_Input(aDestination_Single(1))
                         End If
                     
                     End If
                 Else
                     sLog = sLog & "  Conversion Syntax Error in ConversionNEW_Semantic_HandleSingleSource (Destination): " & aDestinations(lcounter2)
                     Debug.Print sLog
                     Debug.Assert True
                 End If
             Next
           
             sLine_Output = ""
             For lcounter2 = 0 To lUBOUNDInternal
                 sLine_Output = sLine_Output & aLine_Output_Single(lcounter2)
                  If lcounter2 <> lUBOUNDInternal Then
                     sLine_Output = sLine_Output & DELIMITER
                 End If
             Next
             
         
             If CompareStrings(sExitOrResume, "X") = True Then
                 'nichts machen
             ElseIf CompareStrings(sExitOrResume, "RN") = True Or CompareStrings(sExitOrResume, "R") = True Then
                 'RESUME NEXT
                 sLine_Output = ConversionNEW_Semantic_HandleSingleSource(sConversionSheet, lCurrentRow + 1, lLastRow, sLine_Output, lUBOUNDInternal, sLog)
                 
             ElseIf CompareStrings("R", Mid(sExitOrResume, 1, 1)) = True Then
                     
               lResumeAtLine = lCurrentRow + 1
               If IsNumeric(Mid(sExitOrResume, 2)) = True Then
                   lResumeAtLine = CLng(Mid(sExitOrResume, 2))
                   If Not (lResumeAtLine > lCurrentRow And lResumeAtLine < lLastRow) Then
                       lResumeAtLine = lCurrentRow + 1
                   End If
               Else
                   lResumeAtLine = lCurrentRow + 1
               End If
     
               sLine_Output = ConversionNEW_Semantic_HandleSingleSource(sConversionSheet, lResumeAtLine, lLastRow, sLine_Output, lUBOUNDInternal, sLog)
           
             Else
                 sLine_Output = ConversionNEW_Semantic_HandleSingleSource(sConversionSheet, lCurrentRow + 1, lLastRow, sLine_Output, lUBOUNDInternal, sLog)
             End If
             
             If sLine_Output <> "" Then
                 If sResult <> "" Then
                     sResult = sResult & "###"
                 End If
                 sResult = sResult & sLine_Output
             End If

         
       Next 'Loop Nof Destinations
       
     Else
         sResult = ConversionNEW_Semantic_HandleSingleSource(sConversionSheet, lCurrentRow + 1, lLastRow, sLine, lUBOUNDInternal, sLog)
     End If 'Condition erf|fffd|llt

    ConversionNEW_Semantic_HandleSingleSource = sResult
    

    Exit Function

errhdl:
    WriteError "ConversionNEW_Semantic_HandleSingleSource", Err.Description
    Resume Next
End Function


Private Function ConversionNEW_CheckMatch(ByVal sPattern As String, ByVal sValue As String) As Boolean
    On Error GoTo errhdl
    
        Dim bMatch As Boolean
        Dim aMatch() As String
        
        Dim lInstrAll As Long
        Dim sInPatternBeforeAll As String
        Dim sInPatternAfterAll As String
        Dim sInPatternBeforeAllLength As Long
        Dim sInPatternAfterAllLength As Long
        
        Dim sValueBeginning As String
        Dim sValueEnd As String

        bMatch = False

        '* erlaubt in Muster, allerdings nur maximal einmal
            
        lInstrAll = InStr(1, sPattern, ALL)
        If lInstrAll > 0 Then
         

            'Ermittle im Muster die zwei konstanten Teile vor und nach * (und deren L|fffd|nge)
            aMatch = Split(sPattern, ALL)
            sInPatternBeforeAll = aMatch(LBound(aMatch))
            sInPatternAfterAll = aMatch(UBound(aMatch))
            
            If sInPatternBeforeAll = "" Then
                sInPatternBeforeAllLength = 0
            Else
                sInPatternBeforeAllLength = Len(sInPatternBeforeAll)
            End If
            
            If sInPatternAfterAll = "" Then
                sInPatternAfterAllLength = 0
            Else
                sInPatternAfterAllLength = Len(sInPatternAfterAll)
            End If
            
            'Ermittle im Wert den Anfang und das Ende (mit jeweils der L|fffd|nge des Parts im Muster, mit dem |fffd|bereinstimmung gew|fffd|nscht ist)
            sValueBeginning = Mid(sValue, 1, Len(sInPatternBeforeAll))
            
            If Len(sValue) >= sInPatternBeforeAllLength + sInPatternAfterAllLength Then
                sValueEnd = Mid(1, Len(sValue) - sInPatternAfterAllLength)
            End If
            
            If CompareStrings(sInPatternBeforeAll, sValueBeginning) = True And CompareStrings(sInPatternAfterAll, sValueEnd) = True Then
                bMatch = True
            End If
            
        ElseIf CompareStrings("+", sPattern) = True Then
        
            If IsNumeric(sValue) = True Then
                If CLng(sValue) >= 0 Then
                    bMatch = True
                Else
                    bMatch = False
                End If
            Else
                bMatch = False
            End If
            
        ElseIf CompareStrings("-", sPattern) = True Then
        
            If IsNumeric(sValue) = True Then
                If CLng(sValue) < 0 Then
                    bMatch = True
                Else
                    bMatch = False
                End If
            Else
                bMatch = False
            End If
            
        Else
        
            If CompareStrings(sValue, sPattern) = True Then
                bMatch = True
            End If
            
        End If

        ConversionNEW_CheckMatch = bMatch
    
    Exit Function
errhdl:
    WriteError "ConversionNEW_CheckMatch", Err.Description
    Resume Next
End Function

Private Function ConversionNEW_GetResult(ByVal sValueFromLineInput As String, ByVal sPatternFromDestination As String) As String
    On Error GoTo errhdl
    Dim sResult As String
    Dim aConversionTo() As String
    Dim sMidStart As String
    Dim sMidLegth As String
    
    sResult = sValueFromLineInput

    If InStr(sPatternFromDestination, ALL) > 0 Then
        'LEFT* und RIGHT*
        If Mid(Trim(sPatternFromDestination), 1, 5) = "MID*_" Then
            aConversionTo = Split(sPatternFromDestination, "_")
            
            If UBound(aConversionTo) = 2 Then
                sMidStart = aConversionTo(1)
                sMidLegth = aConversionTo(2)
                
                If IsNumeric(sMidStart) = True And IsNumeric(sMidLegth) Then
                    sResult = Mid(sValueFromLineInput, CLng(sMidStart), CLng(sMidLegth))
                End If
            End If
        ElseIf CompareStrings(sPatternFromDestination, "LINKS_VON_MINUS*") = True Then
            sResult = Mid(sValueFromLineInput, 1, InStr(1, sValueFromLineInput, "-") - 1)
        End If
    Else
        sResult = sPatternFromDestination
    End If

    
    ConversionNEW_GetResult = sResult
    
    Exit Function
errhdl:
    WriteError "ConversionNEW_GetResult", Err.Description
    Resume Next
End Function

Private Function ConversionNEW_GetValueResult(ByVal sValueFromLineInput As String, ByVal sPatternFromDestination As String) As String
    On Error GoTo errhdl
    Dim sResult As String
    
    sResult = sValueFromLineInput
    
    If CompareStrings(sPatternFromDestination, "+") Then
        sResult = sValueFromLineInput
    ElseIf CompareStrings(sPatternFromDestination, "-") Then
        If IsNumeric(sValueFromLineInput) = True Then
            sResult = CStr(-CDbl(sValueFromLineInput))
        End If
        
    ElseIf CompareStrings(sPatternFromDestination, "3/12*") = True Then
        sResult = CStr(3 / 12 * CDbl(sValueFromLineInput))
    ElseIf CompareStrings(sPatternFromDestination, "6/12*") = True Then
        sResult = CStr(6 / 12 * CDbl(sValueFromLineInput))
    ElseIf CompareStrings(sPatternFromDestination, "9/12*") = True Then
        sResult = CStr(9 / 12 * CDbl(sValueFromLineInput))
        
    Else
        sResult = sPatternFromDestination
    End If
    
    ConversionNEW_GetValueResult = sResult
    
    Exit Function
errhdl:
    WriteError "ConversionNEW_GetValueResult", Err.Description
    Resume Next
End Function

Private Function TempGetIndent() As String
Dim i As Long
Dim out As String
For i = 1 To ConvLogIndent
    out = out & ";"
Next

TempGetIndent = out
End Function

Public Function Datasheet_GetMaxRow(ByVal sDatasheet As String) As Long
    On Error GoTo errhdl
    
    Dim lDatasheet_Row As Long
    Dim lDatasheet_Col As Long
 
    Dim i As Long
    Dim sComment As String
    
    Dim lExport_Row As Long
    Dim lRowMax As Long
    
    For lDatasheet_Row = DATASHEET_ROW_FIRSTDATASET To FOR_MAX
        DoEvents
            
        If CompareStrings(ENDE_MARKE, ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)) = True Then
              lRowMax = lDatasheet_Row - 1
              GoTo Exxit
        End If
    Next
    
Exxit:
    Datasheet_GetMaxRow = lRowMax
    Exit Function
    
errhdl:
    WriteError "Datasheet_GetMaxRow", Err.Description
    Resume Next
End Function



















Attribute VB_Name = "Modul7"
Option Explicit

'###################################################
'#      AUFRUF von IMPORT EXPORT CLEAR             #
'###################################################


'*****************************************************************************
'* Import
'*****************************************************************************

Sub Call_StandardImport_OpeningValues()
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES
    
    Exit Sub
errhdl:
    WriteError "Call_StandardImport_OpeningValues", Err.Description
    Resume Next
End Sub

Sub Call_StandardImport_State()
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_STANDARDIMPORT_STATE
    
    Exit Sub
errhdl:
    WriteError "Call_StandardImport_State", Err.Description
    Resume Next
End Sub


Sub Call_SpecialImport_EXCEL()
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_XLS
    Call_Makro CALLINGMAKRO_SPECIALIMPORT_EXCEL
    
    Exit Sub
errhdl:
    WriteError "Call_SpecialImport_EXCEL", Err.Description
    Resume Next
End Sub

Sub Call_Option_Import()
    On Error GoTo errhdl
    
    ThisWorkbook.Sheets("SET1_RunTimeSettings").Cells(19, 15) = IMPORT_MODE_MERGE
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_OPTIONIMPORT
    Exit Sub
errhdl:
    WriteError "Call_Option_Import", Err.Description
    Resume Next
End Sub

Sub Call_Option_Import_Accumulate()
    On Error GoTo errhdl
    
    'Hier wird die Formel in Mode hart |fffd|berschrieben, danach funtkioniert Standard nicht mehr.
    ThisWorkbook.Sheets("SET1_RunTimeSettings").Cells(19, 15) = IMPORT_MODE_ACCUMULATE
    
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_OPTIONIMPORTACCUMULATE
    Exit Sub
errhdl:
    WriteError "Call_Option_Import_Accumulate", Err.Description
    Resume Next
End Sub

'*****************************************************************************
'* Export
'*****************************************************************************

Public Sub Call_StandardClear_ICPBlock()
    On Error GoTo errhdl

    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_STANDARDCLEAR_ICPBLOCK

    Exit Sub
errhdl:
    WriteError "Call_StandardClearICMBlock", Err.Description
    Resume Next
End Sub

Public Sub Call_StandardExport()
    On Error GoTo errhdl

    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_STANDARDEXPORT

    Exit Sub
errhdl:
    WriteError "Call_Export_Standard", Err.Description
    Resume Next
End Sub

Sub Call_SpecialExport_EXCEL()
    On Error GoTo errhdl
    
    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_XLS
    Call_Makro CALLINGMAKRO_SPECIALEXPORT_EXCEL
    
    Exit Sub
errhdl:
    WriteError "Call_SpecialExport_EXCEL", Err.Description
    Resume Next
End Sub

Public Sub Call_Option_Export()
    On Error GoTo errhdl

    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_OPTIONEXPORT

    Exit Sub
errhdl:
    WriteError "Call_Export", Err.Description
    Resume Next
End Sub

'*****************************************************************************
'* Clear
'*****************************************************************************

Public Sub Call_Option_Delete()
    On Error GoTo errhdl

    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_OPTIONDELETE

    Exit Sub
errhdl:
    WriteError "Call_Clear", Err.Description
    Resume Next
End Sub


Public Sub Call_Option_Clear_AllDatacells_Itallic()
    On Error GoTo errhdl

    SET1_RunTimeSettings_Schalter_SetSourceSystem SOURCE_SYSTEM_SAP
    Call_Makro CALLINGMAKRO_OPTIONCLEAR_ALLDATACELLSITALIC

    Exit Sub
errhdl:
    WriteError "Call_Clear", Err.Description
    Resume Next
End Sub

'*****************************************************************************
'* Call Makro
'*****************************************************************************

'Call_Makro (f|fffd|r alle Buttons gleich)
'
'   Datasheets Selected
'   Soll Makro wirklich laufen
'   Pre / Aufruf Makro / Post


'Run_Makro (spezifisch f|fffd|r jeden Button, aber immer nach dem gleichen Prinzip)
'
'   1. Settings (Standard Settings oder |fffd|bernahme der Settings aus den Options in Settings
'   2. Filehandling (Welche Dateien sollen geladen werden)
'   3. Action ausf|fffd|hren (Import / Export / Clear)

Sub Call_Makro(ByVal sCalling_Makro As String)
    On Error GoTo errhdl
    Dim lMsgboxOut As Long
    Dim sAction As String
        
    sAction = ""
    Select Case sCalling_Makro
    Case CALLINGMAKRO_OPTIONDELETE
        sAction = "Clear"
    Case CALLINGMAKRO_OPTIONEXPORT, CALLINGMAKRO_STANDARDEXPORT, CALLINGMAKRO_SPECIALEXPORT_EXCEL
        sAction = "Export"
    Case CALLINGMAKRO_STANDARDCLEAR_ICPBLOCK
        sAction = "Clear ICP Block"
    Case CALLINGMAKRO_OPTIONCLEAR_ALLDATACELLSITALIC
        sAction = "Clear AllDataCells Italic"
    Case Else
        sAction = "Import"
    End Select
    
    SET1_RunTimeSettings_SetAction sAction
    
    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets

    If IsArrayEmpty(aSelected_Datasheets) = True Then
        Select Case Tool_GetLanguage
            Case TOOL_LANGUAGE_ENG
                MsgBox "No worksheet selected!"
            Case Else
                MsgBox "Kein Arbeitsblatt ausgewaehlt!"
        End Select
        Exit Sub
    End If

    'Soll das Makro wirklich laufen
    'Solange Drop-Downs verwendet werden zweite Frage nicht notwendig
'    If Not InStr(1, sCalling_Makro, "Import") > 0 Then
'        Select Case Tool_GetLanguage
'            Case TOOL_LANGUAGE_ENG
'                lMsgboxOut = MsgBox("Run " & sAction & "?", vbYesNo)
'            Case Else
'                lMsgboxOut = MsgBox(sAction & " " & "starten" & "?", vbYesNo)
'        End Select
'    Else
'        lMsgboxOut = vbYes
'    End If
    
'    If lMsgboxOut = vbYes Then
    
        ImportExportClear_Pre1
        SET1_RunTimeSettings_SetCallingMakro sCalling_Makro
        bImportExportPre_AlreadyRun2 = False
        
        Progress_Show
        
        ImportExportClear_Post1
        If bImportExportPre_AlreadyRun2 = True Then
            'Nur ausf|fffd|hren, wenn auch Pre lief
            ImportExportClear_Post2
        End If
'    End If
    
    Exit Sub

errhdl:
    WriteError "Call_Makro", Err.Description
    Resume Next
End Sub

'*****************************************************************************
'* Run Makro
'*****************************************************************************

Public Sub Run_Makro(ByVal sCallingMakro As String)
    On Error GoTo errhdl
    
    Dim lMsgboxOut1 As Long
    Dim lMsgboxOut2 As Long
    Dim i As Long
    
    Dim sImportFile_PathName As String
    Dim aImportFile_PathNames() As String
    Dim sImportFile_PathNamesArray As String

    Dim lImportFile_MaxRow As Long
    Dim lImportFile_ScanErrors As Long
    
    Dim sMessageWithImportFiles As String
    
    Dim sImportMode As String
    
    Dim sPOVScenario As String
    Dim sPOVYear As String
    Dim sPOVPeriod As String
    
    Dim sSpecialImportSettingReportingPeriod As String
    
    'DEMOVERSION
'    MsgBox "THIS IS ONLY A DEMO VERSION, IMPORT and EXPORT WILL BE FIRST AVAILABLE in MAY!" & vbNewLine & vbNewLine & "DIES IST EINE DEMO VERSION, IMPORT und EXPORT von Daten aus SAP werden erst im Mai zur Verf|fffd|gung stehen!"
'    Exit Sub
 'Decimal Character Error Vorbereitung (weil in Prozedur mehrer Male verwendet im Fehlerfall)
    Dim dblTest As Double
    Dim sTest As String
    Dim sError As String
    
    dblTest = 1 / 2
    sTest = CStr(dblTest)
    Dim sDecimalCharacter As String
    Dim sDecimalLongText As String
    Dim sThousandLongText As String
    
    If InStr(1, sTest, ".") > 0 Then
        sDecimalCharacter = "."
        If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
            sDecimalLongText = "  <DOT>"
            sThousandLongText = "  <COMMA>"
        Else
            sDecimalLongText = "  <PUNKT>"
            sThousandLongText = "  <KOMMA>"
        End If
    Else
        sDecimalCharacter = ","
        If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
            sDecimalLongText = "  <COMMA>"
            sThousandLongText = "  <DOT>"
        Else
            sDecimalLongText = "  <KOMMA>"
            sThousandLongText = "  <PUNKT>"
        End If
    End If
    
    Select Case Tool_GetLanguage
    Case TOOL_LANGUAGE_ENG

            sError = "Scan Errors found, Run Import though?" & vbNewLine & vbNewLine & _
                    "   NO to Cancel (NO is Recommended!!!)," & vbNewLine & _
                    "   YES to Run Import!" & vbNewLine & vbNewLine & _
                    "Error Details: " & vbNewLine & vbNewLine & _
                    "   Your Operating System setting for decimal character is " & sDecimalLongText & vbNewLine & _
                    "   Your Import File setting for decimal character is " & sThousandLongText & vbNewLine & vbNewLine & _
                    "The load file and your operation system need the same decimal and/or thousand separator character settings! " & _
                    "Please check and modify your SAP settings if necessary and export a new data extract from SAP."
    
    Case Else
    
            sError = "Scan-Fehler gefunden, trotzdem importieren?" & vbNewLine & vbNewLine & _
                "   NEIN um abzubrechen, (NEIN empfohlen!!!)" & vbNewLine & _
                "   JA zum Importieren" & vbNewLine & vbNewLine & _
                "Fehler Details: " & vbNewLine & vbNewLine & _
                "   Ihre Betriebssystem-Einstellung fuer Dezimaltrennzeichen ist " & sDecimalLongText & vbNewLine & _
                "   Ihre Ladedatai-Einstellung fuer Dezimaltrennzeichen ist " & sThousandLongText & vbNewLine & vbNewLine & _
                "Die Lade-Datei und Ihr Betriebssystem benoetingen die selben Einstellungen fuer Dezimal- und/oder Tausendertrennzeichen. " & _
                "Bitte pruefen und aendern Sie Ihre SAP-Einstellungen falls noetig und exportieren Sie einen neuen Datenextrakt aus SAP."
            
   End Select
   '/Decimal Character Error Vorbereitung (weil in Prozedur mehrer Male verwendet im Fehlerfall)
                                                
   File_Open_ApplicationLog_INIT
'-----------------------------------------------------------------
'IMPORT STANDARD

    If CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDIMPORT_OPENINGVALUES) = True Then
            
            '0. LEEREN vor IMPORT (IMMER f|fffd|r Opening Values!)
            'Standard Import: Clear
            
            lMsgboxOut1 = vbNo
            
            If EXIT_CURRENT_PROCEDURE = False Then

                 If CompareStrings(SET2_DimensionSettings_GetToolIdentifier, TOOL_IDENTIFIER_PBM) = True Or CompareStrings(SET2_DimensionSettings_GetToolIdentifier, TOOL_IDENTIFIER_PLx) = True Then
                    If Start_OpeningValuesBalancesheet_Filled = True Then
                    
                        Select Case Tool_GetLanguage
                             Case TOOL_LANGUAGE_ENG
                                 lMsgboxOut1 = MsgBox("" & _
                                                      "    YES = Deletes Opening Values before loading new ones" & vbNewLine & _
                                                      "    NO  = Imports Opening Values without prior deletion (Caution!)" & "!" & vbNewLine & _
                                                      "    CANCEL  = Cancel Import (no deletion and no Import)" & "!" & vbNewLine & vbNewLine & _
                                                      "  Next step will be FILE SELECTION of load file!", vbYesNoCancel, "Delete OPENING VALUES (in this tool) before Import?     ")
                             Case Else
                                 lMsgboxOut1 = MsgBox("" & _
                                                      "    JA     = Loescht Vortraege vor dem Laden" & vbNewLine & _
                                                      "    NEIN = Laedt Vortraege ohne vorher zu loeschen (Vorsicht!)" & "!" & vbNewLine & _
                                                      "    ABBRECHEN = Import abbrechen (ohne Loeschen und ohne Laden)" & "!" & vbNewLine & vbNewLine & _
                                                      " Naechster Schritt wird die Dateiauswahl der Ladedatei sein!", vbYesNoCancel, "VORTRAEGE (in diesem Tool) loeschen vor dem Import?     ")
                        End Select
    
                        If lMsgboxOut1 = vbCancel Then
                            Exit Sub
                        End If
    
                        'Delete (s.u.)
                        
                   End If '/Filled
                End If '/Tool Identifier
                
            End If '/Exit Procedure
            
            '1. FILES
            sImportFile_PathName = ""
            sImportFile_PathName = File_Dialog_SingleFile
            
            'File_Open_ExportFiles sImportFile_PathName
            
            If sImportFile_PathName <> "" Then
            
                '--- Delete ---
                    If lMsgboxOut1 = vbYes Then
                        If bImportExportPre_AlreadyRun2 = False Then
                            ImportExportClear_Pre2
                            bImportExportPre_AlreadyRun2 = True
                        End If
                
                        SET1_RunTimeSettings_SetAction ACTION_CLEAR
                        EXPORTorCLEAR
                        SET1_RunTimeSettings_SetAction ACTION_IMPORT
                        
                        If EXIT_CURRENT_PROCEDURE = True Then
                            Exit Sub
                        End If
                        
                    End If
                    '--- / Delete ---
            
                'Standard Import: Scan File
                If sImportFile_PathName <> "" Then
                    File_ScanInclGetMaxRow sImportFile_PathName, lImportFile_MaxRow, lImportFile_ScanErrors
                End If
                
                If lImportFile_MaxRow > 0 Then
                
                    'Standard Import: Scan Errors
                    If lImportFile_ScanErrors > 0 Then
                        lMsgboxOut1 = MsgBox(sError, vbYesNo)
                    Else
                        lMsgboxOut1 = vbYes
                    End If
                    
                    If lMsgboxOut1 = vbYes Then
                    
                        '2. IMPORT (vor dem Laden von Vortr|fffd|gen immer Clear auf Vortr|fffd|ge)
                                              
                        'Standard Import: Import
                        If EXIT_CURRENT_PROCEDURE = False Then
                            If bImportExportPre_AlreadyRun2 = False Then
                                ImportExportClear_Pre2
                                bImportExportPre_AlreadyRun2 = True
                            End If
                            
                            Import sImportFile_PathName, _
                            lImportFile_MaxRow
                        End If
                
                    End If '/ lMsgboxOut1 = vbYes
                    
                Else
                
                    Progress "File error", 2
                    
                End If '/ lImportFile_MaxRow > 0
            End If
            
'-----------------------------------------------------------------
    ElseIf CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDIMPORT_STATE) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_SPECIALIMPORT_EXCEL) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONIMPORT) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONIMPORTACCUMULATE) = True Then
           
           sSpecialImportSettingReportingPeriod = ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALIMPORT_REPORTINGPERIOD_ROW, START_SPECIALIMPORT_COL)
            
            If CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONIMPORT) = True Or _
                CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONIMPORTACCUMULATE) = True Then
                
                '1a. Import: IMPORT MODE (nur OPTION IMPORT)
                
'                If CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONIMPORTACCUMULATE) = True Then
'                    SET1_RunTimeSettings_SetSELECTED_Mode IMPORT_MODE_ACCUMULATE
'                Else
'                    SET1_RunTimeSettings_SetSELECTED_Mode IMPORT_MODE_MERGE
'                End If
                
                lMsgboxOut1 = vbNo '(kein L|fffd|schen f|fffd|r Options)
                
            ElseIf CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDIMPORT_STATE) = True Then
                                
                '1.b LEEREN vor IMPORT (nur STANDARD IMPORT)
                lMsgboxOut1 = vbNo
                
                sSpecialImportSettingReportingPeriod = ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALIMPORT_REPORTINGPERIOD_ROW, START_SPECIALIMPORT_COL)
                
                If CompareStrings(SET2_DimensionSettings_GetToolIdentifier, TOOL_IDENTIFIER_ACT_Exx) = True Then
                    If CompareStrings(sSpecialImportSettingReportingPeriod, "All(e)") = True Or _
                       CompareStrings(sSpecialImportSettingReportingPeriod, "") = True Then
                    
                        lMsgboxOut1 = vbNo
                    
                    Else
                        If Set1_RunTimeSettings_FormsFilled = True Then
    
                            Select Case Tool_GetLanguage
                            
                                 Case TOOL_LANGUAGE_ENG
                                        If CompareStrings(Replace(sSpecialImportSettingReportingPeriod, "'", ""), "PL6 2016 > E08 Q4") = True Then
                                           sSpecialImportSettingReportingPeriod = "Q4"
                                        End If
                                     lMsgboxOut1 = MsgBox("" & _
                                                            "    YES = Deletes " & sSpecialImportSettingReportingPeriod & " in this tool before Import" & vbNewLine & _
                                                            "    NO = Imports without prior deletion of " & sSpecialImportSettingReportingPeriod & " in this tool (Caution!)" & "!!!" & vbNewLine & _
                                                            "    CANCEL  = Cancel Import (no deletion and no Import)" & "!" & vbNewLine & vbNewLine & _
                                                            "   Next step will be FILE SELECTION of load file!", vbYesNoCancel, "Delete " & sSpecialImportSettingReportingPeriod & " before Import?     ")
                                 Case Else
                                        If CompareStrings(Replace(sSpecialImportSettingReportingPeriod, "'", ""), "PL6 2016 > E08 Q4") = True Then
                                           sSpecialImportSettingReportingPeriod = "Q4"
                                        End If
                                     lMsgboxOut1 = MsgBox("" & _
                                                            "    JA     = Loescht " & sSpecialImportSettingReportingPeriod & " im Tool vor dem Laden" & vbNewLine & _
                                                            "    NEIN     = Laedt ohne " & sSpecialImportSettingReportingPeriod & " im Tool vorher zu loeschen (Vorsicht!!!)" & vbNewLine & _
                                                            "    ABBRECHEN = Import abbrechen (ohne Loeschen und ohne Laden)" & "!" & vbNewLine & vbNewLine & _
                                                            "   Naechster Schritt wird die Dateiauswahl der Ladedatei sein!", vbYesNoCancel, sSpecialImportSettingReportingPeriod & " loeschen vor dem Import?     ")
                            End Select
         
                        End If '/Filled
                    End If '/Tool Identifier
                End If
            End If

 
            If lMsgboxOut1 = vbCancel Then
                Exit Sub
            End If

            ' Delete (s.u.)
            
            If EXIT_CURRENT_PROCEDURE = True Then
                Exit Sub
            End If
                       
            '1. FILES
            
            'Selected Reporting Periods
            sImportFile_PathNamesArray = ""
            sImportFile_PathNamesArray = File_Dialog_MulitSelect
            
            'File_Open_ExportFiles sImportFile_PathNamesArray
            
            If sImportFile_PathNamesArray <> "" Then
            
                '--- Delete ---
                If lMsgboxOut1 = vbYes Then
                    If bImportExportPre_AlreadyRun2 = False Then
                        ImportExportClear_Pre2
                        bImportExportPre_AlreadyRun2 = True
                    End If
                     
                    SET1_RunTimeSettings_SetAction ACTION_CLEAR
                    EXPORTorCLEAR
                    SET1_RunTimeSettings_SetAction ACTION_IMPORT
                End If
                ' --- / Delete ---
            
                ReDim aImportFile_PathNames(0)
                aImportFile_PathNames = Split(sImportFile_PathNamesArray, ";")
          
                For i = LBound(aImportFile_PathNames) To UBound(aImportFile_PathNames)
                
                    sImportFile_PathName = aImportFile_PathNames(i)
                    
                    If Not InStr(1, sImportFile_PathName, "\") > 0 Then
                        sImportFile_PathName = File_GetOnlyPath & sImportFile_PathName
                    End If
                    
                    If sImportFile_PathName <> "" Then
    
                        File_ScanInclGetMaxRow sImportFile_PathName, lImportFile_MaxRow, lImportFile_ScanErrors
                        
                        If lImportFile_MaxRow > 0 Then
                        
                            If lImportFile_ScanErrors > 0 Then
                                lMsgboxOut1 = MsgBox(sError, vbYesNo)
                            Else
                                lMsgboxOut1 = vbYes
                            End If
                            
                            If lMsgboxOut1 = vbYes Then
                          
                                '3. IMPORT
                                
                                If EXIT_CURRENT_PROCEDURE = False Then
                                    If bImportExportPre_AlreadyRun2 = False Then
                                        ImportExportClear_Pre2
                                        bImportExportPre_AlreadyRun2 = True
                                    End If
                                    Import sImportFile_PathName, lImportFile_MaxRow
                                End If
                            
                            End If
                        Else
                            Progress "File error", 2
                        End If
                    
                End If
            Next
        End If

'-----------------------------------------------------------------
    ElseIf CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDEXPORT) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_SPECIALEXPORT_EXCEL) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONEXPORT) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDCLEAR_ICPBLOCK) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONCLEAR_ALLDATACELLSITALIC) = True Or _
           CompareStrings(sCallingMakro, CALLINGMAKRO_OPTIONDELETE) = True Then
           
            Dim sTechnicalSettingPerformanceTemp As String
           
            If CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDEXPORT) = False Then
                sTechnicalSettingPerformanceTemp = ""
                sTechnicalSettingPerformanceTemp = ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_PERFORMANCE_ROW, START_TECHNICAL_SETTINGS_COL).Value
                ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_PERFORMANCE_ROW, START_TECHNICAL_SETTINGS_COL).Value = "x"
            End If
            
            If bImportExportPre_AlreadyRun2 = False Then
                ImportExportClear_Pre2
                bImportExportPre_AlreadyRun2 = True
            End If
            EXPORTorCLEAR
            
            If CompareStrings(sCallingMakro, CALLINGMAKRO_STANDARDEXPORT) = False Then
                ThisWorkbook.Sheets(SHEET_START).Cells(START_TECHNICAL_SETTINGS_PERFORMANCE_ROW, START_TECHNICAL_SETTINGS_COL).Value = sTechnicalSettingPerformanceTemp
            End If

    End If
    
    File_AppendToFile_Post
    
Exxit:
   
    Exit Sub
errhdl:
    WriteError "Run_Makro", Err.Description
    Resume Next
       
End Sub


Public Sub Call_Setup_3_NoInputAndUnderline()
    On Error GoTo errhdl

    SET1_RunTimeSettings_SetCallingMakro ""

    SET1_RunTimeSettings_SetCallingMakro "Setup_3_NoInputAndUnderline"
    Progress_Show

    Exit Sub

errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub

'Public Sub Call_Setup_CreateTestData()
'    On Error GoTo errhdl
'
'    SET1_RunTimeSettings_SetCallingMakro ""

'    SET1_RunTimeSettings_SetCallingMakro "Setup_CreateTestData"
'    Progress_Show

'    Exit Sub
'
'errhdl:
'    WriteError "", Err.Description
'    Resume Next
'End Sub








Attribute VB_Name = "Modul8"
Option Explicit

'###################################################
'              FORMATIERUNG
'
'           - Datasheets Formatierung
'
'           - Navigator
'           - Language
'
'           - Datasheet_Change
'
'###################################################


'------------------------------------------------------------------------------------------------------------
'  Datasheet Format
'------------------------------------------------------------------------------------------------------------

Public Sub Format_AllDatasheets()
    On Error GoTo errhdl
    
    Dim sDatasheet As String
    Dim lDatasheetCounter As Long
    Dim bScreen As Boolean
    Dim sSheetTemp As String
    
    sSheetTemp = ThisWorkbook.ActiveSheet.Name
    bScreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    
    Tool_InitAllDatasheets_FromLayout
    
    For lDatasheetCounter = LBound(aDatasheets_All) To UBound(aDatasheets_All)
        sDatasheet = aDatasheets_All(lDatasheetCounter)
        Debug.Print sDatasheet
        
        If sDatasheet <> "" Then
            ThisWorkbook.Sheets(sDatasheet).Select
            Format_Datasheet sDatasheet
        End If
    Next
    
    Application.ScreenUpdating = bScreen
    ThisWorkbook.Sheets(sSheetTemp).Select
    
    Exit Sub

errhdl:
    WriteError "Format_AllDatasheets", Err.Description
    Resume Next
End Sub

Public Sub Format_CurrentDatasheet()
    On Error GoTo errhdl
    
    Dim sDatasheet As String

    sDatasheet = ThisWorkbook.ActiveSheet.Name
    
    If Tool_IsSheetDatasheet(sDatasheet) = True Then
        Format_Datasheet sDatasheet
    End If

    Exit Sub

errhdl:
    WriteError "Format_CurrentDatasheet", Err.Description
    Resume Next
End Sub

Public Sub Format_SelectedDatasheets()
    On Error GoTo errhdl
        
    Dim sDatasheet As String
    Dim lDatasheetCounter As Long
  Dim bScreen As Boolean
    Dim sSheetTemp As String
    
    sSheetTemp = ThisWorkbook.ActiveSheet.Name
    bScreen = Application.ScreenUpdating
    Application.ScreenUpdating = False

    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
    
    For lDatasheetCounter = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
        sDatasheet = aSelected_Datasheets(lDatasheetCounter)
        If sDatasheet <> "" Then
            ThisWorkbook.Sheets(sDatasheet).Select
            Format_Datasheet sDatasheet
        End If
    Next
    
    Application.ScreenUpdating = bScreen
    ThisWorkbook.Sheets(sSheetTemp).Select
    
    Exit Sub

errhdl:
    WriteError "Format_SelectedDatasheets", Err.Description
    Resume Next
End Sub

Public Sub SetLanguage_AllDatasheets()
    On Error GoTo errhdl
    
    Dim sDatasheet As String
    Dim lDatasheetCounter As Long
    
    Tool_InitAllDatasheets_FromLayout
    For lDatasheetCounter = LBound(aDatasheets_All) To UBound(aDatasheets_All)
        sDatasheet = aDatasheets_All(lDatasheetCounter)
        
        If sDatasheet <> "" Then
            SetLanguage_Datasheet sDatasheet
        End If
    Next
    
    Application.ScreenUpdating = False
    Drops_SetAllToAction
    ThisWorkbook.Sheets(SHEET_START).Select
    Application.ScreenUpdating = True
    
    Exit Sub

errhdl:
    WriteError "SetLanguage_AllDatasheets", Err.Description
    Resume Next
End Sub

Public Sub SetLanguage_SelectedDatasheets()
    On Error GoTo errhdl
        
    Dim sDatasheet As String
    Dim lDatasheetCounter As Long

    Dim aSelected_Datasheets() As String
    SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aSelected_Datasheets
    
    For lDatasheetCounter = LBound(aSelected_Datasheets) To UBound(aSelected_Datasheets)
        sDatasheet = aSelected_Datasheets(lDatasheetCounter)
        If sDatasheet <> "" Then
            SetLanguage_Datasheet sDatasheet
        End If
    Next
    
    Application.ScreenUpdating = False
    Drops_SetAllToAction
    ThisWorkbook.Sheets(SHEET_START).Select
    Application.ScreenUpdating = True
    
    Exit Sub

errhdl:
    WriteError "SetLanguage_SelectedDatasheets", Err.Description
    Resume Next
End Sub

 Sub Format_Datasheet(ByVal sDatasheet As String)
    On Error GoTo errhdl
    Dim sTemp As String
    Dim i As Long
    
    'Bei Formatierung des Arbeitsblattes bleibt der Zeilenzustand der Dateneingabezeilen erhalten
    'Nur bei Import, Export oder Clear werden alle Zeile eingeblendet
    Excel_AllColumnsVisible sDatasheet
    
    If CompareStrings(sDatasheet, SHEET_BALANCE) = True Or _
        CompareStrings(sDatasheet, SHEET_INCOME) = True Then
        AutoFilter_ClearAllFilters (sDatasheet)
    End If
    
    For i = 2 To 6
        sTemp = ""
        sTemp = ThisWorkbook.Sheets(sDatasheet).Cells(i, 4)
        
        If CompareStrings(sTemp, "All(e)") = False And CompareStrings(sTemp, "") = False Then
            ThisWorkbook.Sheets(sDatasheet).Cells(i, 4) = "All(e)"
        End If
     Next

    Format_Datasheet_Colums sDatasheet, bAdministration:=True
    Format_Datasheet_Rows sDatasheet
    Format_Datasheet_Cells sDatasheet
    SetLanguage_Datasheet sDatasheet

    'Zuklappen wird bei allgmeiner Formatierung nicht mehr gemacht, nur noch nach Import, Export, Clear (in _Post)
    
    ThisWorkbook.Sheets(sDatasheet).Select
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 1).Select
 

    Exit Sub
errhdl:
    WriteError "Format_Datasheet", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Private Sub Format_Datasheet_Colums(ByVal sDatasheet As String, Optional ByVal bAdministration As Boolean = False)
    On Error GoTo errhdl
    
    Dim lMaxCol As Long
    Dim i As Long
    
    Dim sColumnVersion As String
    Dim sColumnMovementNumber As String
    Dim bHideColumn As Boolean
    
    'from Navigator
        Dim sNavigatorVersion As String
    Dim sNavigatorYear As String
    Dim sNavigatorPeriod As String
    Dim sNavigatorBreakdownCols As String
    Dim sNavigatorMovementNumber As String
    
    Dim sColumnYear As String
    Dim sColumnPeriod As String
    Dim sColumnBreakdownCols As String
    
'    Dim bNavigatorHide As Boolean
    
    sNavigatorVersion = ThisWorkbook.Sheets(sDatasheet).Cells(2, 4).Text
    sNavigatorYear = ThisWorkbook.Sheets(sDatasheet).Cells(3, 4).Text
    sNavigatorPeriod = ThisWorkbook.Sheets(sDatasheet).Cells(4, 4).Text
    sNavigatorBreakdownCols = ThisWorkbook.Sheets(sDatasheet).Cells(5, 4).Text
    sNavigatorMovementNumber = ThisWorkbook.Sheets(sDatasheet).Cells(6, 4).Text
    '/from Navigator
    
    If bAdministration = True Then
            
        '1. ADMINISTRATION COLUMNS
       
        Excel_ColumnSetWidth sDatasheet, 1, 2               'Append New ICPs
        
        Excel_ColumnSetMinimumWidth sDatasheet, 2, 15       'Konto
        Excel_ColumnSetMinimumWidth sDatasheet, 4, 8        'ICP
        Excel_ColumnSetMinimumWidth sDatasheet, 6, 45       'Beschreibung
        Excel_ColumnSetMinimumWidth sDatasheet, 7, 45       'Beschreibung
       
        'MovementRange: C
        If ThisWorkbook.Sheets(sDatasheet).Columns("C:C").EntireColumn.Hidden = False Then ThisWorkbook.Sheets(sDatasheet).Columns("C:C").EntireColumn.Hidden = True
        
        'BreakdownRows: E (in ACTEXT product numbers)
        If CompareStrings(sDatasheet, "ACTEXT") = False Then
            If ThisWorkbook.Sheets(sDatasheet).Columns("E:E").EntireColumn.Hidden = False Then ThisWorkbook.Sheets(sDatasheet).Columns("E:E").EntireColumn.Hidden = True
        End If
    
        'H bis M ausblenden
        If ThisWorkbook.Sheets(sDatasheet).Columns("H:M").EntireColumn.Hidden = False Then ThisWorkbook.Sheets(sDatasheet).Columns("H:M").EntireColumn.Hidden = True
    
        'Spalte f|fffd|r ICM Konten einblenden: J wieder einblenden
        If CompareStrings(sDatasheet, SHEET_BALANCE) = True Or _
            CompareStrings(sDatasheet, SHEET_INCOME) = True Or _
            CompareStrings(sDatasheet, "600_ALL") = True Or _
            CompareStrings(sDatasheet, "717_DER") = True Or _
            CompareStrings(sDatasheet, "750_REV") = True Then
            
            If ThisWorkbook.Sheets(sDatasheet).Columns("J:J").EntireColumn.Hidden = True Then ThisWorkbook.Sheets(sDatasheet).Columns("J:J").EntireColumn.Hidden = False
        
        End If
    
        'Datenfilter immer einblenden
        If ThisWorkbook.Sheets(sDatasheet).Columns("N:N").EntireColumn.Hidden = True Then ThisWorkbook.Sheets(sDatasheet).Columns("N:N").EntireColumn.Hidden = False
    
        'Column O: Movement Range visible
        If CompareStrings(sDatasheet, SHEET_BALANCE) = True Or _
            CompareStrings(sDatasheet, "400a") = True Or _
            CompareStrings(sDatasheet, "701_TRA") = True Or _
            CompareStrings(sDatasheet, "850_DCO") = True Or _
            CompareStrings(sDatasheet, "717_DER") = True Then
    
            If ThisWorkbook.Sheets(sDatasheet).Columns("O:O").EntireColumn.Hidden = True Then ThisWorkbook.Sheets(sDatasheet).Columns("O:O").EntireColumn.Hidden = False
        Else
           
            If ThisWorkbook.Sheets(sDatasheet).Columns("O:O").EntireColumn.Hidden = False Then ThisWorkbook.Sheets(sDatasheet).Columns("O:O").EntireColumn.Hidden = True
        End If
        
        'Number Format Columns with Formulas
        ThisWorkbook.Sheets(sDatasheet).Columns("H:H").EntireColumn.NumberFormat = "General"
        ThisWorkbook.Sheets(sDatasheet).Columns("L:N").EntireColumn.NumberFormat = "General"
    
        'ACTEXT
        If CompareStrings(sDatasheet, "ACTEXT") = True Then
            'Produktnummern immer anzeigen
            If ThisWorkbook.Sheets(sDatasheet).Columns("E:E").EntireColumn.Hidden = True Then
                ThisWorkbook.Sheets(sDatasheet).Columns("E:E").EntireColumn.Hidden = False
            End If
        End If
        
    End If   'end of Administration
    
    '2. DATA COLUMNS
    lMaxCol = Layout_GetMaxColIndex_byDatasheet(sDatasheet)

    'Blatt Format
    For i = DATASHEET_COL_MovementNumber_FIRST To lMaxCol

        'Minimum Column Width setzen (damit keine Zellen ausgeblendet bleiben durch Breite minimal)
        Excel_ColumnSetMinimumWidth sDatasheet, i, 13

        ' NEU: 10.2019 Navigator in Format Columns included
        'from Navigator
        sColumnVersion = ""
        sColumnYear = ""
        sColumnPeriod = ""
        Layout_GetVersionYearPeriod_ByDatasheetAndCol sDatasheet, i, sColumnVersion, sColumnYear, sColumnPeriod
        '/from Navigator
        
        sColumnVersion = ""
        sColumnMovementNumber = ""

        sColumnVersion = ThisWorkbook.Sheets(sDatasheet).Cells(2, i).Text
        sColumnMovementNumber = ThisWorkbook.Sheets(sDatasheet).Cells(6, i).Text
        If CompareStrings(sColumnMovementNumber, Layout_GetMovementNumber_ByDatasheetAndCol(sDatasheet, i)) = False Then
            Debug.Print "LAYOUT ERROR: " & sDatasheet & ", " & i & ", "; sColumnMovementNumber & " <> " & Layout_GetMovementNumber_ByDatasheetAndCol(sDatasheet, i)
        End If
        sColumnBreakdownCols = Layout_GetBreakdownCols_ByDatasheetAndCol(sDatasheet, i)
        
        'Intial = false
        bHideColumn = False
        
        'from Navigator
         'Visible in Navigator
         If (CompareStrings(sNavigatorVersion, "All(e)") = True Or CompareStrings(sNavigatorVersion, "") = True Or CompareStrings(sNavigatorVersion, sColumnVersion) = True) And _
            (CompareStrings(sNavigatorYear, "All(e)") = True Or CompareStrings(sNavigatorYear, "") = True Or CompareStrings(sNavigatorYear, sColumnYear) = True) And _
            (CompareStrings(sNavigatorPeriod, "All(e)") = True Or CompareStrings(sNavigatorPeriod, "") = True Or CompareStrings(sNavigatorPeriod, sColumnPeriod) = True) And _
            (CompareStrings(sNavigatorBreakdownCols, "All(e)") = True Or CompareStrings(sNavigatorBreakdownCols, "") = True Or CompareStrings(sNavigatorBreakdownCols, sColumnBreakdownCols) = True) And _
            (CompareStrings(sNavigatorMovementNumber, "All(e)") = True Or CompareStrings(sNavigatorMovementNumber, "") = True Or CompareStrings(sNavigatorMovementNumber, sColumnMovementNumber) = True) Then
        
             bHideColumn = False
        Else
             bHideColumn = True
        End If
        '/from Navigator
        
        'Version=0 oder leer ausblenden
        If sColumnVersion = "" Or sColumnVersion = "0" Then
            bHideColumn = True
        End If

        'List immer ausgeblendeter Bewegungen
        If Not (CompareStrings(sDatasheet, "701_TRA") = True Or CompareStrings(sDatasheet, "400a") = True) Then
             If bHideColumn = False And SET1_RunTimeSettings_HIDDENMOVEMENTS_IsMoveInList(sColumnMovementNumber) = True Then
                bHideColumn = True
                
                'NEU 10.2019 from Navigator (explizit ausgew|fffd|hlte BWA im Navigator anzeigen, auch wenn sonst ausgeblendet
                 If CompareStrings(sNavigatorMovementNumber, sColumnMovementNumber) = True Then
                    bHideColumn = False
                End If
                '/from Navigator
                
            End If
        End If
               
        'Ein- und ausblenden
        If ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = True And bHideColumn = False Then
            'ColumnHidden=true, NavigatorHidden=false
            ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = False
        ElseIf ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = False And bHideColumn = True Then
            'ColumnHidden=false, NavigatorHidden=true
            ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = True
        End If
        
        'Special CASE ACTEXT, wenn ISOCODE leer ausblenden
        If CompareStrings(sDatasheet, "ACTEXT") = True Then
            If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(1, 4), "yes") = True Then
                If ThisWorkbook.Sheets(sDatasheet).Cells(5, i) = "" Then
                    If ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = False Then
                       ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = True
                    End If
                End If
            End If
        End If
        
'    'Special case 71  daproh
        If CompareStrings(sDatasheet, SHEET_BALANCE) = True Then
            If daproh_Get_Row_MID(ThisWorkbook.Sheets(SHEET_START).Cells(7, 8)) <= 0 Then
                If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(6, i), "71") = True Then
                    If ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = False Then
                        ThisWorkbook.Sheets(sDatasheet).Columns(GetColLetter2(i) & ":" & GetColLetter2(i)).EntireColumn.Hidden = True
                    End If
                End If
            End If
        End If
        
    Next
    
    'ACTEXT
    If CompareStrings(sDatasheet, "ACTEXT") = True Then
    
        'Summenspalte |fffd|ber alle L|fffd|nder immer einblenden
        If ThisWorkbook.Sheets(sDatasheet).Columns("P:P").EntireColumn.Hidden = True Then
            ThisWorkbook.Sheets(sDatasheet).Columns("P:P").EntireColumn.Hidden = False
        End If

    End If
    
   Exit Sub
errhdl:
    WriteError "Format_Datasheet_Columns", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Private Sub Format_Datasheet_Rows(ByVal sDatasheet As String)
    On Error GoTo errhdl

    'Row 2-8
    If CompareStrings(sDatasheet, "ACTEXT") <> True Then
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).NumberFormat = "@"
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).HorizontalAlignment = xlCenter
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).VerticalAlignment = xlCenter
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).MergeCells = False
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).ShrinkToFit = False
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).WrapText = True
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_VERSION & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).Orientation = 0
    Else
        ThisWorkbook.Sheets(sDatasheet).Rows(DATASHEET_ROW_MovementNumberDESCRIPTION_GER & ":" & DATASHEET_ROW_MovementNumberDESCRIPTION_ENG).RowHeight = 16
    End If

    Exit Sub
errhdl:
    WriteError "Format_Datasheet_Rows", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Private Sub Format_Datasheet_Cells(ByVal sDatasheet As String)
    On Error GoTo errhdl

    'Navigator
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 4).HorizontalAlignment = xlRight
    ThisWorkbook.Sheets(sDatasheet).Cells(3, 4).HorizontalAlignment = xlRight
    ThisWorkbook.Sheets(sDatasheet).Cells(4, 4).HorizontalAlignment = xlRight
    ThisWorkbook.Sheets(sDatasheet).Cells(5, 4).HorizontalAlignment = xlRight
    ThisWorkbook.Sheets(sDatasheet).Cells(6, 4).HorizontalAlignment = xlRight
    
    'Beschreibung Navigator
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 6).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(3, 6).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(4, 6).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(5, 6).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(6, 6).HorizontalAlignment = xlLeft
    
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 7).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(3, 7).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(4, 7).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(5, 7).HorizontalAlignment = xlLeft
    ThisWorkbook.Sheets(sDatasheet).Cells(6, 7).HorizontalAlignment = xlLeft
    
    'Link zur Startseite
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 2).VerticalAlignment = xlTop
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 2).HorizontalAlignment = xlLeft
    
    'Gesellschaft
    If sDatasheet <> "ACTEXT" Then
        ThisWorkbook.Sheets(sDatasheet).Cells(7, 2).HorizontalAlignment = xlLeft
        ThisWorkbook.Sheets(sDatasheet).Cells(7, 2).WrapText = False
        ThisWorkbook.Sheets(sDatasheet).Cells(7, 2).ShrinkToFit = False
        ThisWorkbook.Sheets(sDatasheet).Cells(7, 2).NumberFormat = "General"
        ThisWorkbook.Sheets(sDatasheet).Cells(7, 2).Locked = True
        ThisWorkbook.Sheets(sDatasheet).Cells(8, 2).HorizontalAlignment = xlLeft
        ThisWorkbook.Sheets(sDatasheet).Cells(8, 2).WrapText = False
        ThisWorkbook.Sheets(sDatasheet).Cells(8, 2).ShrinkToFit = False
        ThisWorkbook.Sheets(sDatasheet).Cells(8, 2).NumberFormat = "General"
        ThisWorkbook.Sheets(sDatasheet).Cells(8, 2).Locked = True
    End If
    
    'Summenformel |fffd|ber Blatt
    ThisWorkbook.Sheets(sDatasheet).Cells(1, 8).NumberFormat = "#,##0.00"
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 8).NumberFormat = "#,##0.00"

 
    Exit Sub
errhdl:
    WriteError "Format_Datasheet_Cells", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

Public Sub SetLanguage_Datasheet(ByVal sDatasheet As String)
    On Error GoTo errhdl
    Dim Language As Long
    Language = Tool_GetLanguage
    
    '### Column ###
    
    'Show Short Description (Hide = false or true from Ger Col)

    If Language = TOOL_LANGUAGE_ENG Then
        Excel_HideColumn sDatasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG, False
        Excel_HideColumn sDatasheet, DATASHEET_COL_SHORTDESCRIPTION_GER, True
    Else
        Excel_HideColumn sDatasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG, True
        Excel_HideColumn sDatasheet, DATASHEET_COL_SHORTDESCRIPTION_GER, False
    End If

    
    '### Row ###
    
    If Language = TOOL_LANGUAGE_ENG Then
        Excel_HideRow sDatasheet, DATASHEET_ROW_MovementNumberDESCRIPTION_ENG, False
        Excel_HideRow sDatasheet, DATASHEET_ROW_MovementNumberDESCRIPTION_GER, True
    Else
        Excel_HideRow sDatasheet, DATASHEET_ROW_MovementNumberDESCRIPTION_ENG, True
        Excel_HideRow sDatasheet, DATASHEET_ROW_MovementNumberDESCRIPTION_GER, False
    End If
    
    Infobox_Sprache_anpassen
    
    Exit Sub
errhdl:
    WriteError "SetLanguage_Datasheet", sDatasheet & ": " & Err.Description
    Resume Next
End Sub

'*****************************************************************************
'  Workbook onChange (kein Double Click)
'*****************************************************************************

Public Sub Sheet_Change_Start(ByVal Target As Range)
    On Error GoTo errhdl

    If SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive = True Then
        Exit Sub
    Else
        Application.Calculation = xlAutomatic
        Calculate
    End If

    
'*** Management ID Beschreibung ***

       If Target.Column = 8 And Target.row = 7 Then
        'NEW und tempor|fffd|r (Umwandlung alte Syntax HFM in neue Syntax SAP)
        
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
        ThisWorkbook.Sheets(SHEET_START).Cells(7, 8) = ICP_GetManagementIDByHFMCompany(ThisWorkbook.Sheets(SHEET_START).Cells(7, 8))
        
        Dim lRowAccount As Long
        lRowAccount = 797
        lRowAccount = GetFirstOccurence(SHEET_BALANCE, 2, "2994000")
        
        'Sonderfall Clearing Account daproh
        If daproh_Get_Row_MID(ThisWorkbook.Sheets(SHEET_START).Cells(7, 8)) > 0 Then
       
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 16
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 17
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 18
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 19
            'Ab 11.2018 BWA 70 eingabebereit f|fffd|r daproh Ges +71
            
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 40
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 41
            Tool_MakeDataInputCell SHEET_BALANCE, lRowAccount, 42
        
        Else
        
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 16
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 17
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 18
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 19
            'Ab 11.2018 BWA 70 eingabebereit f|fffd|r daproh Ges + 71
            
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 40
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 41
            Tool_MakeNODataInputCell SHEET_BALANCE, lRowAccount, 42
               
        End If
        
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        
        ThisWorkbook.Sheets(SHEET_START).Cells(8, 8) = ICP_GetICPDescription(ThisWorkbook.Sheets(SHEET_START).Cells(7, 8))
        Format_Datasheet_Colums SHEET_BALANCE, False
    End If

'*** Sprachschalter ***

    If Target.Column = 8 And Target.row = 5 Then
        SetLanguage_AllDatasheets
    End If
    
'*** Drop-Downs Start ***

    'Drop-Down Main
    Dim sAction As String
    Dim lMsgbox As Long
    
    Dim sActionAdditionalText As String
    
    If Target.Column = DROP_START_MAIN_COL And Target.row = DROP_START_MAIN_ROW Then
  
        sAction = Target.Text
        sActionAdditionalText = ""
        
        If CompareStrings(sAction, "Vortraege laden") = True Or CompareStrings(sAction, "Load Opening Values") Then
            
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Call_StandardImport_OpeningValues
            End If
            Drop_Start_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Stand / Vorschlagswerte laden  (inkl. Vortraege)") = True Or CompareStrings(sAction, "Load working status / proposed values  (incl. opening values)") Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Call_StandardImport_State
            End If
            Drop_Start_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Datenextrakt zum Upload nach SAP erzeugen") = True Or CompareStrings(sAction, "Create data file for upload to SAP") Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Call_StandardExport
            End If
            Drop_Start_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Anwenden") = True Or CompareStrings(sAction, "Apply") Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Drop_Start_MAIN_SetToAction
                Apply_Pressed
            Else
                Drop_Start_MAIN_SetToAction
            End If
            
        ElseIf CompareStrings(sAction, "Hilfe") = True Or CompareStrings(sAction, "Help") Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Drop_Start_MAIN_SetToAction
                ThisWorkbook.Sheets("Infobox").Cells(2, 36) = ThisWorkbook.Sheets("Infobox").Cells(1, 36)
                ThisWorkbook.Sheets("Infobox").Select
            Else
                Drop_Start_MAIN_SetToAction
            End If
            
        ElseIf CompareStrings(sAction, "ICP Sperre aufheben") = True Or CompareStrings(sAction, "Remove ICP Block") Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            If lMsgbox = vbYes Then
                Drop_Start_MAIN_SetToAction

                Call_StandardClear_ICPBlock
           
            Else
                Drop_Start_MAIN_SetToAction
            End If
                       
        ElseIf CompareStrings(sAction, "CAR-FC EXPORT") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            Drop_Start_MAIN_SetToAction
            If lMsgbox = vbYes Then
                Call_SpecialExport_EXCEL
            End If

            
        ElseIf CompareStrings(sAction, "CAR-FC IMPORT") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
            
            Drop_Start_MAIN_SetToAction
            If lMsgbox = vbYes Then
                Call_SpecialImport_EXCEL
            End If
             
        End If

        
    End If


     Exit Sub
errhdl:
    WriteError "Sheet_Change_Start", Err.Description
    Resume Next
End Sub

Public Sub Drop_Start_MAIN_SetToAction()
    On Error GoTo errhdl
    Dim bSchalter_SetDatasheetOnChangeInactive As Boolean
    bSchalter_SetDatasheetOnChangeInactive = SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive
    
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
    Dim sAction As String
    If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
        sAction = DROP_ACTION_ENG
    Else
        sAction = DROP_ACTION_GER
    End If
    
    ThisWorkbook.Sheets(SHEET_START).Cells(DROP_START_MAIN_ROW, DROP_START_MAIN_COL) = sAction
    
    'ICM only = No
    Start_SpecialExport_SetICMOnlyNo
     
    'Datasheets + Reporting Periods = All
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_SHEETs_ROW, START_SPECIALEXPORT_COL) = "All(e)"
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALEXPORT_REPORTINGPERIODs_ROW, START_SPECIALEXPORT_COL) = "All(e)"
    ThisWorkbook.Sheets(SHEET_START).Cells(START_SPECIALIMPORT_REPORTINGPERIOD_ROW, START_SPECIALIMPORT_COL) = "All(e)"
    
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive bSchalter_SetDatasheetOnChangeInactive
    Exit Sub
    
errhdl:
    WriteError "Drop_Start_MAIN_SetToAction", Err.Description
    Resume Next
End Sub

Public Sub Drops_SetAllToAction()
    Drop_Formulas_MAIN_SetToAction
    Drop_Start_MAIN_SetToAction
    Drop_Options_MAIN_SetToAction
End Sub

Public Sub Sheet_Change_Formulas(ByVal Target As Range)
    On Error GoTo errhdl

    If SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive = True Then
        Exit Sub
    Else
        Application.Calculation = xlAutomatic
        Calculate
    End If

'*** Drop Down ***

    If Target.Column = DROP_FORMULAS_COL And Target.row = DROP_FORMULAS_ROW Then
        Dim sAction As String
        Dim lMsgbox As Long
        
        sAction = Target.Text

        If CompareStrings(sAction, "Formula Export") = True Or CompareStrings(sAction, "Formeln exportieren") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
                SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
                Call_StandardExport
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
            End If
            Drop_Formulas_MAIN_SetToAction
        ElseIf CompareStrings(sAction, "Formula Import") = True Or CompareStrings(sAction, "Formeln importieren") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
                SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
                Call_StandardImport_State
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
            End If
            Drop_Formulas_MAIN_SetToAction

        ElseIf CompareStrings(sAction, "Change Links (new)") = True Or CompareStrings(sAction, "Verknuepfungen aendern (neu)") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Tool_LinksChange
            End If
            Drop_Formulas_MAIN_SetToAction
        ElseIf CompareStrings(sAction, "Show Links") = True Or CompareStrings(sAction, "Verknuepfungen anzeigen") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Tool_LinksShow
            End If
            Drop_Formulas_MAIN_SetToAction
        ElseIf CompareStrings(sAction, "Change Link") = True Or CompareStrings(sAction, "Verknuepfung aendern") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Tool_LinkChange
            End If
            Drop_Formulas_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Special case: Formula Export - Current Reporting Period") = True Or CompareStrings(sAction, "Sonderfall: Formeln exportieren (aktuelle Berichtsperiode)") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
                SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod True
                Call_StandardExport
                SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
                SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
            End If
            Drop_Formulas_MAIN_SetToAction
        End If

        'intitial setzen in BeforeSave
    End If


     Exit Sub
errhdl:
    WriteError "Sheet_Change_Formulas", Err.Description
    Resume Next
End Sub

Public Sub Drop_Formulas_MAIN_SetToAction()
    On Error GoTo errhdl
    Dim bSchalter_SetDatasheetOnChangeInactive As Boolean
    bSchalter_SetDatasheetOnChangeInactive = SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive
    
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
    Dim sAction As String
    If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
        sAction = DROP_ACTION_ENG
    Else
        sAction = DROP_ACTION_GER
    End If
    
    'Start_Main
    ThisWorkbook.Sheets("Formulas").Cells(DROP_FORMULAS_ROW, DROP_FORMULAS_COL) = sAction
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive bSchalter_SetDatasheetOnChangeInactive

    Exit Sub
errhdl:
    WriteError "Drop_Formulas_MAIN_SetToAction", Err.Description
    Resume Next
End Sub

Public Sub Sheet_Change_Options(ByVal Target As Range)
    On Error GoTo errhdl
    
    If SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive = True Then
        Exit Sub
    Else
        Application.Calculation = xlAutomatic
        Calculate
    End If

'*** Options: Selected Datasheets: (De-)select All ***

    If Target.Column = 9 And Target.row = 11 Then
    
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
            Options_Change_SelectAllReportingPeriods
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        
    ElseIf Target.Column = 17 And Target.row = 11 Then
    
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
            Options_Change_SelectAllDatasheets
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        
    ElseIf Target.Column = 25 And Target.row = 11 Then
    
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
            Options_Change_SelectAllMovementNumbers
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        
    ElseIf Target.Column = 33 And Target.row = 11 Then
    
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
            Options_Change_SelectAllMovementRanges
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        

    ElseIf Target.Column = DROP_OPTIONS_COL And Target.row = DROP_OPTIONS_ROW Then
        
        Dim sAction As String
        Dim lMsgbox As Long
        
        sAction = Target.Text

        If CompareStrings(sAction, "Import") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Call_Option_Import
            End If
            Drop_Options_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Export") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Call_Option_Export
            End If
            Drop_Options_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Delete") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Call_Option_Delete
            End If
            Drop_Options_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Import Accumulate") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Call_Option_Import_Accumulate
            End If
            Drop_Options_MAIN_SetToAction
            
        ElseIf CompareStrings(sAction, "Clear AllDataCells Italic") = True Then
            lMsgbox = MsgBox(sAction & "?", vbYesNo)
        
            If lMsgbox = vbYes Then
                Call_Option_Clear_AllDatacells_Itallic
            End If
            Drop_Options_MAIN_SetToAction
            
        End If

        'intitial setzen in BeforeSave
    End If
    
                        
'*** Settings werden erst nach Dr|fffd|cken der Option Button gesetzt

     Exit Sub
errhdl:
    WriteError "Sheet_Change_Options", Err.Description
    Resume Next
End Sub

Public Sub Drop_Options_MAIN_SetToAction()
    On Error GoTo errhdl
    Dim bSchalter_SetDatasheetOnChangeInactive As Boolean
    bSchalter_SetDatasheetOnChangeInactive = SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive
    
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
    Dim sAction As String
    If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
        sAction = DROP_ACTION_ENG
    Else
        sAction = DROP_ACTION_GER
    End If

    ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(DROP_OPTIONS_ROW, DROP_OPTIONS_COL) = sAction
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive bSchalter_SetDatasheetOnChangeInactive

    Exit Sub
errhdl:
    WriteError "Drop_Options_MAIN_SetToAction", Err.Description
    Resume Next
End Sub

Public Sub Sheet_Change_Datasheet(ByVal Target As Range)
    On Error GoTo errhdl
    
    Dim lNofICPRowsToAdd As Long
    Dim lRowCounter As Long
    Dim sDatasheet As String
    Dim bSettingSearchFieldColHidden As Boolean
    
    Dim i As Long
    Dim j As Long
    
    sDatasheet = Target.Worksheet.Name

    'Hier auf keinen Fall DoEvents (keine Benutzeraktivit|fffd|ten w|fffd|hrend des Makrolaufs zulassen!
    
    If SET1_RunTimeSettings_Schalter_IsDatasheetOnChangeInactive = True Then
        Exit Sub
    Else
        Application.Calculation = xlAutomatic
        'Calculate
    End If
    
    'Append 1000 to Toolversion if Datasheet is unprotected!
    If ThisWorkbook.Sheets(sDatasheet).ProtectContents = False Then
    
        If ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(27, 5) = "" Then
            ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(27, 5) = sDatasheet & " unprotected: " & GetTimestamp_LongFormat & " (" & ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5) & ")"
           
            SET2_DimensionSettings_AddOneMillion_To_ToolVersion
     
            If Tool_GetLanguage = TOOL_LANGUAGE_ENG Then
                 MsgBox "Warning! Datasheet Protection in this Tool is necessary to avoid inconsitency in the ODET. Please do not unprotect data entry sheets!"
            Else
                 MsgBox "Warnung! Der Blattschutz in diesem Tool ist notwendig um Inkonsistenzen im ODET zu vermeiden. Bitte entsch|fffd|tzen Sie keine Dateneingabebl|fffd|ttter!"
            End If
             
        End If
    End If
        
    If Target.Column = 4 And Target.row >= DATASHEET_ROW_FIRSTDATASET Then
        
'*** Datasheets: ICP-Description append, NEU f|fffd|r mehrere ICPs gleichzeitig ***
        
        If CompareStrings(sDatasheet, "SET1_RunTimeSettings") = False Then
        'Eigentlich nicht n|fffd|tig, aber falls es Probleme bei der Erkennung von Datasheets gibt dieses spezielle ausschlie|fffd|en wegen Deadlock
        
            Dim bScreen As Boolean
            bScreen = Application.ScreenUpdating
            Application.ScreenUpdating = False
            For i = 0 To Target.Rows.Count - 1
                For j = 0 To Target.Columns.Count - 1
                    If Target.Column + j = 4 And Target.row + i >= DATASHEET_ROW_FIRSTDATASET Then
                
                        ICP_AddICPDescription sDatasheet, ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value, Target.row + i, bUseMsgBox:=True, bOnlyAppendToSingleDatasheet:=False, bCheckIfAlreadyExistsBefore:=True
                    
                    End If
                Next
            Next
            Application.ScreenUpdating = bScreen
          
        End If

'*** Datasheets: Navigator ***

    ElseIf Target.Column = 4 And (Target.row >= 1 And Target.row <= 6) Then

        Navigator_Change sDatasheet
    
    End If
    
'*** Datasheets: Opening Value Warnings ***

    If SET1_RunTimeSettings_Schalter_IsOpeningValueModificationWarningActive = True Then
            
            'Hier abh|fffd|ngig von Berichtsperiode auch '01' anf|fffd|gen
            If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(DATASHEET_ROW_MovementNumber, Target.Column), "00") = True And Target.row >= DATASHEET_ROW_FIRSTDATASET Then
                         
                Select Case Tool_GetLanguage
                    Case TOOL_LANGUAGE_ENG
                        MsgBox "Attention: Opening Value Modification!!!"
                    Case Else
                        MsgBox "Achtung: Sie aendern Vortragswerte!!!"
                End Select
            End If
   
    End If
    

'*** Datasheets: Anhaengen von ICP Rows ***

    If ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).Locked = False Then
        If Target.Column = 1 And Target.row >= DATASHEET_ROW_FIRSTDATASET Then
            
            On Error Resume Next
            lNofICPRowsToAdd = 1
            If ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).Text <> "" Then
                lNofICPRowsToAdd = ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).Text
            End If
            lRowCounter = ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).row

            SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
            ICP_AppendICPRows sDatasheet, lRowCounter, lNofICPRowsToAdd
            SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False

        End If
    End If
    
'*** Datasheets: Kontensuche ****

    If Target.Column = 2 And Target.row = 6 Then
      
        Dim sAccountToSearch As String
        sAccountToSearch = ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).Text
        
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
        ThisWorkbook.Sheets(sDatasheet).Cells(Target.row, Target.Column).Value = ""
        SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive False
        
        AccountSearch sDatasheet, sAccountToSearch
        
    End If
    
'*** NEU: Explizite Null, wenn Datenzelle, die italic ist geleert wird
    
    For i = 0 To Target.Rows.Count - 1
        For j = 0 To Target.Columns.Count - 1
            If Target.Column + j >= DATASHEET_COL_MovementNumber_FIRST And Target.row + i >= DATASHEET_ROW_FIRSTDATASET Then
                
                If ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value <> "" And Trim(ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value) = "" Then
                    ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value = ""
                End If
                
                If ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Font.Italic = True And _
                    (ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value = "") Then
                    'Or ThisWorkbook.Sheets(sDatasheet).Cells(Target.Row + i, Target.Column + j).Value = " ") Then
                
                    ' Chm: 28.06.2016
                    ' Wenn noch kein Intercompany Partner im Feld ICP angegeben wurde,
                    ' dann soll Wert nicht explizit auf 0 gesetzt werden
'                    If Not (ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, DATASHEET_COL_ISLEAVE) = "YY" And _
'                       ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, DATASHEET_COL_ICP) = "") Then
                
                        ThisWorkbook.Sheets(sDatasheet).Cells(Target.row + i, Target.Column + j).Value = 0
                    
'                    End If
                
                End If
        
            End If
        Next
    Next

    Exit Sub
errhdl:
    WriteError "Datasheet_Change", Err.Description
    Resume Next
End Sub

Public Sub Options_Change_SelectAllDatasheets()
    On Error GoTo errhdl
    
    Dim k As Long

    For k = 13 To 44
        If Excel_GetLockedStatus(SHEET_OPTIONS, k, 17) = False Then
            ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(k, 17) = ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(11, 17)
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_OPTIONS).Calculate

    Exit Sub
    
errhdl:
    WriteError "Options_Change_SelectAllDatasheets", Err.Description
    Resume Next
End Sub

Public Sub Options_Change_SelectAllReportingPeriods()
    On Error GoTo errhdl
    
    Dim k As Long

    For k = 13 To 42
        If Excel_GetLockedStatus(SHEET_OPTIONS, k, 9) = False Then
            ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(k, 9) = ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(11, 9)
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_OPTIONS).Calculate

    Exit Sub
    
errhdl:
    WriteError "Options_Change_SelectAllReportingPeriods", Err.Description
    Resume Next
End Sub

Public Sub Options_Change_SelectAllMovementNumbers()
    On Error GoTo errhdl
    
    Dim k As Long

    For k = 13 To 45
        If Excel_GetLockedStatus(SHEET_OPTIONS, k, 25) = False Then
            ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(k, 25) = ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(11, 25)
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_OPTIONS).Calculate

    Exit Sub
    
errhdl:
    WriteError "Options_Change_SelectAllMovementNumbers", Err.Description
    Resume Next
End Sub

Public Sub Options_Change_SelectAllMovementRanges()
    On Error GoTo errhdl
    
    Dim k As Long

    For k = 13 To 42
        If Excel_GetLockedStatus(SHEET_OPTIONS, k, 33) = False Then
            ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(k, 33) = ThisWorkbook.Sheets(SHEET_OPTIONS).Cells(11, 33)
        End If
    Next
    
    ThisWorkbook.Sheets(SHEET_OPTIONS).Calculate

    Exit Sub
    
errhdl:
    WriteError "Options_Change_SelectAllMovementRanges", Err.Description
    Resume Next
End Sub

Public Sub Navigator_Change(ByVal sDatasheet As String)
    On Error GoTo errhdl

    Format_Datasheet_Colums sDatasheet
    Exit Sub

errhdl:
    WriteError "Navigator_Change", Err.Description
    Resume Next
End Sub

'FILTER

Sub AutoFilter_ClearAllFilters(ByVal sDatasheet As String)
   On Error GoTo errhdl
       
   If ThisWorkbook.Sheets(sDatasheet).AutoFilter.FilterMode = True Then
        ThisWorkbook.Sheets(sDatasheet).ShowAllData
        ThisWorkbook.Sheets(sDatasheet).Range("B7:L9").Interior.Color = xlNone
        
        'Funktion wird in Format_Datasheet aufgerufen, am Anfang,
        'danach laufen also noch alle Formatierungen, nicht allein aufrufen
    End If
    
    Exit Sub
errhdl:

WriteError "AutoFilter_ClearAllFilters", Err.Description
Resume Next
End Sub

Sub AutoFilter_MarkSelections(ByVal sDatasheet As String)
    On Error GoTo errhdl
 
    Dim i As Long
    
    
        If ThisWorkbook.Sheets(sDatasheet).AutoFilter.FilterMode = True Then
             For i = 1 To ThisWorkbook.Sheets(sDatasheet).AutoFilter.Filters.Count
                 If ThisWorkbook.Sheets(sDatasheet).AutoFilter.Filters(i).On = True Then
                    If CompareStrings(sDatasheet, "ACTEXT") = False Then
                        ThisWorkbook.Sheets(sDatasheet).Cells(7, i + 1).Interior.Color = 255
                        ThisWorkbook.Sheets(sDatasheet).Cells(8, i + 1).Interior.Color = 255
                     End If
                     ThisWorkbook.Sheets(sDatasheet).Cells(9, i + 1).Interior.Color = 255
                 Else
                    If CompareStrings(sDatasheet, "ACTEXT") = False Then
                        ThisWorkbook.Sheets(sDatasheet).Cells(7, i + 1).Interior.Color = xlNone
                        ThisWorkbook.Sheets(sDatasheet).Cells(8, i + 1).Interior.Color = xlNone
                    End If
                     ThisWorkbook.Sheets(sDatasheet).Cells(9, i + 1).Interior.Color = xlNone
                 End If
             Next
       Else
         For i = 1 To ThisWorkbook.Sheets(sDatasheet).AutoFilter.Filters.Count
             ThisWorkbook.Sheets(sDatasheet).Cells(7, i + 1).Interior.Color = xlNone
             ThisWorkbook.Sheets(sDatasheet).Cells(8, i + 1).Interior.Color = xlNone
             ThisWorkbook.Sheets(sDatasheet).Cells(9, i + 1).Interior.Color = xlNone
         Next
      
    End If
   
'   If CompareStrings(sDatasheet, "ACTEXT") = True Then
'     Tool_MakeDataInputCell sDatasheet, 8, 4
'     Tool_MakeDataInputCell sDatasheet, 7, 4
'   End If
    
    Exit Sub
errhdl:

'WriteError "AutoFilter_MarkSelections", Err.Description
Exit Sub
End Sub

Public Sub Apply_Pressed()
    Dim bScreen As Boolean
    bScreen = Application.ScreenUpdating
    Application.ScreenUpdating = False
    Format_AllDatasheets
    Application.ScreenUpdating = bScreen
    ThisWorkbook.Sheets(SHEET_BALANCE).Activate
End Sub

Private Sub Infobox_Sprache_anpassen()

    On Error GoTo errhdl

    Dim sOpeningValues As String
    Dim sStand As String
    Dim sGerman As String
    Dim sEnglish As String

    sOpeningValues = "8:33"
    sStand = "35:58"
    sGerman = "A:Q"
    sEnglish = "R:AG"

    If Tool_GetLanguage = TOOL_LANGUAGE_GER Then

        If ThisWorkbook.Sheets("Infobox").Columns(sGerman).EntireColumn.Hidden = True Then
            ThisWorkbook.Sheets("Infobox").Columns(sGerman).EntireColumn.Hidden = False
        End If


        If ThisWorkbook.Sheets("Infobox").Columns(sEnglish).EntireColumn.Hidden = False Then
            ThisWorkbook.Sheets("Infobox").Columns(sEnglish).EntireColumn.Hidden = True
        End If
    Else

        If ThisWorkbook.Sheets("Infobox").Columns(sEnglish).EntireColumn.Hidden = True Then
            ThisWorkbook.Sheets("Infobox").Columns(sEnglish).EntireColumn.Hidden = False
        End If

        If ThisWorkbook.Sheets("Infobox").Columns(sGerman).EntireColumn.Hidden = False Then
            ThisWorkbook.Sheets("Infobox").Columns(sGerman).EntireColumn.Hidden = True
        End If

    End If
    Exit Sub
errhdl:
    WriteError "Infobox:SHEET_Activate", Err.Description
    Resume Next
End Sub

















Attribute VB_Name = "Modul9"
Option Explicit

'###################################################
'#               Sprache und AutoOpen              #
'###################################################

Sub auto_open()

    On Error GoTo errhdl
    auto_open2
    ThisWorkbook.Sheets(SHEET_START).Select
    Range("A1").Select
    Exit Sub

errhdl:
    WriteError "auto_open", Err.Description
    Resume Next
End Sub

Sub auto_open2()

    On Error GoTo errhdl
    Dim spaltenzoom
    
    Dim strActiveSheetName As String
    strActiveSheetName = ActiveSheet.Name
    

'   Spalten
    ThisWorkbook.Sheets("Start").Select
    ThisWorkbook.Sheets("Start").Columns("A:U").Select
    ActiveWindow.Zoom = True
    If ActiveWindow.Zoom > 100 Then
        ActiveWindow.Zoom = 100
    End If
    spaltenzoom = ActiveWindow.Zoom

'   Zeilen
    ThisWorkbook.Sheets("Start").Select
    ThisWorkbook.Sheets("Start").Rows("1:50").Select


    ActiveWindow.Zoom = True
    If ActiveWindow.Zoom > 100 Then
        ActiveWindow.Zoom = 100
    End If
    If ActiveWindow.Zoom < spaltenzoom Then
    Else
        ActiveWindow.Zoom = spaltenzoom
    End If

    Range("A1").Select
    ThisWorkbook.Sheets(strActiveSheetName).Select
   
    Exit Sub

errhdl:
    WriteError "auto_open2", Err.Description
    Resume Next
End Sub




'Sub schalter_Start_Erweiterte()
'    On Error GoTo errhdl
'
'    Dim sText As String
'    Dim Sprache As Long
'    Dim info_start_erweitert As Long
'
'    Sprache = Tool_GetLanguage
'    sText = ""
'
'    Select Case Sprache
'        Case 1
'            sText = sText & "This Uploadtool offers additional enhanced processing options for advanced users." & Chr(13)
'            sText = sText & "All standard features (i.e. data entry in this uploadtool and creating a data extract for" & Chr(13)
'            sText = sText & "upload to SAP) are completely included in worksheet <Start>." & Chr(13) & Chr(13)
'            sText = sText & "Would you like to see the advanced users options, though?"
'            info_start_erweitert = MsgBox(sText, vbOKCancel, " Advanced User's options  /  Additional features")
'        Case 2
'            sText = sText & "Dieses Eingabetool bietet zusaetzlich noch erweiterte Bearbeitungsmoeglichkeiten fuer fort-" & Chr(13)
'            sText = sText & "geschrittene User. Alle Standardfunktionen (Datenerfassung im Eingabetool und Erstellung" & Chr(13)
'            sText = sText & "eines Datenextraktes fuer SAP) sind im Arbeitsblatt <Start> komplett enthalten." & Chr(13) & Chr(13)
'            sText = sText & "Moechten Sie die erweiterten Einsatzmoeglichkeiten trotzdem sehen?"
'            info_start_erweitert = MsgBox(sText, vbOKCancel, " Optionen fuer fortgeschrittene Anwender  /  Zusaetzliche Funktionen")
'    End Select
''
'    If info_start_erweitert = 2 Then
'    Else
'        ThisWorkbook.Sheets("Options").Select
'        Range("A1").Select
'    End If
'    Exit Sub
'
'errhdl:
'    WriteError "Schalter_Start_Erweiterte", Err.Description
'    Resume Next
'End Sub
'
'Sub schalter_zurueck_zu_start()
'    On Error GoTo errhdl
'    ThisWorkbook.Sheets("Start").Select
'    Range("A1").Select
'    Exit Sub
'
'errhdl:
'    WriteError "Schalter_zurueck_zu_start", Err.Description
'    Resume Next
'End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit






Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


'Private Sub Import_Options_Click()
'    Call_Option_Import
'End Sub
'
'Private Sub Import_Options_Accumulate_Click()
'    Call_Option_Import_Accumulate
'End Sub
'
'Private Sub Export_Options_Click()
'    Call_Option_Export
'End Sub
'
'Private Sub Delete_Options_Click()
'    Call_Option_Delete
'End Sub
'
'
'Private Sub GoTo_Start_Click()
'    schalter_zurueck_zu_start
'End Sub



Attribute VB_Name = "Tabelle16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



'
'
Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Private Sub cmdChangeLink_Click()
'    Tool_LinkChange
'End Sub
'
'Private Sub cmdExportFormulas_Click()
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
'    SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
'    Call_StandardExport
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
'End Sub
'
'Private Sub cmdImportFormulas_Click()
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
'    SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
'    Call_StandardImport_State
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
'End Sub
'
'Private Sub cmdExportFormulasCurrent_Click()
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
'    SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod True
'    Call_StandardExport
'    SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
'    SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
'End Sub



Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmProgress"
Attribute VB_Base = "0{4A31797D-B256-47FF-875D-A41E7813FF18}{F79D9B31-3F41-4C02-B65D-1E1563BE9139}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub UserForm_Activate()
    On Error GoTo errhdl
    Dim lMsgboxOut2 As Long
    
    Dim sImportFilePathName As String
    Dim lImportFileMaxRow As Long
    Dim lImportFileScanErrors As Long

    cmdClose.Enabled = False
    Clear
    Run_Makro SET1_RunTimeSettings_GetCallingMakro
    
Exxit:

    Me.Hide
    
    Exit Sub
errhdl:
    WriteError "UserForm_Activate", Err.Description
    Resume Next
       
End Sub

Public Sub Clear()
    On Error GoTo errhdl
    
    lblP1.Caption = ""
    lblP2.Caption = ""
    txtP3.Text = ""
    txtP4.Text = ""
    
    'Schrift
    lblProgress2.Caption = ""
    
    'Balkon
    lblProgress1.Width = 1
    
    'EXIT_CURRENT_PROCEDURE = False
    Exit Sub
errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub

Private Sub cmdClose_Click()
    On Error GoTo errhdl
    Application.Cursor = xlDefault
    Me.Hide
    Exit Sub
errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub

Private Sub cmdExitCurrentProcedure_Click()
    On Error GoTo errhdl
    EXIT_CURRENT_PROCEDURE = True
    cmdClose.Enabled = True
    Exit Sub
errhdl:
    WriteError "", Err.Description
    Resume Next
End Sub






Attribute VB_Name = "mdl_SetupFromMeta_1"
Option Explicit

Const cExcelColour_Level_ENTRYACCOUNTSUMM As Long = 34

'Excel: Farben aus Tool von Herrn Lange
Const cExcelColour_Level3 As Long = 45
Const cExcelColour_Level4 As Long = 36
Const cExcelColour_Level5 As Long = 43
Const cExcelColour_Level6 As Long = 35
Const cExcelColour_Level7 As Long = 40
Const cExcelColour_Level8 As Long = 39
Const cExcelColour_Level9 As Long = 42
Const cExcelColour_Level10 As Long = 38

Public Const SHEET_ACCLIST_BALANCE As String = "ACCLIST_BALANCE"
Public Const SHEET_ACCLIST_INCOME As String = "ACCLIST_INCOME"
Public Const SHEET_ACCLIST_STATISTICS As String = "ACCLIST_STATISTICS"
Public Const SHEET_ACCLIST_DESCRIPTIONS As String = "ACCLIST_DESCRIPTIONS"

'Sonderfall TKE
Public Const SHEET_ACCLIST_TKE As String = "ACCLIST_TKE"
Public Const SHEET_TKE As String = "TKE"

Public Const ACCLIST_COL_ACCOUNT As Long = 1
Public Const ACCLIST_COL_INDENTLEVEL As Long = 2

Public Const ACCLIST_COL_ICP_inROW As Long = 4                          'ICP

Public Const ACCLIST_COL_MovementRange As Long = 5               'CUSTOM2
Public Const ACCLIST_COL_MovementNumber As Long = 6               'Custom1

Public Const ACCLIST_COL_BreakdownRows As Long = 7
Public Const ACCLIST_COL_BreakdownCols As Long = 8

Public Const ACCLIST_COL_ACCisLEAVE As Long = 10
Public Const ACCLIST_COL_STATISTICTopMEMBER As Long = 11

Public Const ACCLIST_COL_MovementType_VALID As Long = 12
Public Const ACCLIST_COL_MovementType_INVALID As Long = 13

Public Const ACCLIST_COL_Description_DE As Long = 15
Public Const ACCLIST_COL_Description_EN As Long = 16

Const TEMP_COL_FOR_FORMULAS_LETTER As String = "IV"
Const TEMP_COL_FOR_FORMULAS_NUMBER As Long = 256

Dim lExcelRowCounter_Datasheet As Long
Dim lExcelRowCounter_AccList As Long
Dim lExcelColCounter As Long

Public sDatasheet_ACC As String

Public Function SAP_GetMemberDescription(ByVal strDimension As String, ByVal strLabel As String, ByVal bEnglish As Boolean, ByVal bGerman As Boolean, Optional ByVal sDelimiter As String = ";") As String
    On Error Resume Next
    Dim strDescription
    Dim strLanguage As String
    Dim lFirstOccurance As Long


    'Dim objNode As IXMLDOMNode

    If bEnglish = True Then
        strLanguage = ""
        strLanguage = "E"
        lFirstOccurance = 0
        lFirstOccurance = GetFirstOccurence("DESCRIPTION", 1, strLabel)
        'Set objNode = objXMLMetadata.selectSingleNode("/bcsmetadata/dimension[@name='" & strDimension & "']/members/member[@label='" & strLabel & "']/description[@language='" & strLanguage & "']")
        If lFirstOccurance > 0 Then

            strDescription = ThisWorkbook.Sheets("DESCRIPTION").Cells(lFirstOccurance, 3)
        Else
            strDescription = ""
        End If
    End If

    If bEnglish = True And bGerman = True Then
        strDescription = strDescription & sDelimiter
    End If

    If bGerman = True Then
        strLanguage = ""
        strLanguage = "D"
        lFirstOccurance = 0
        lFirstOccurance = GetFirstOccurence("DESCRIPTION", 1, strLabel)

        If lFirstOccurance > 0 Then
            strDescription = ThisWorkbook.Sheets("DESCRIPTION").Cells(lFirstOccurance, 2)
        Else
            strDescription = ""
        End If
    End If

    SAP_GetMemberDescription = strDescription
End Function

 Sub Setup_Test1()
    
    Dim sout As String
    Dim i As Long
    
    Dim lStartWith As Long
    
    lStartWith = 10
    
    i = 1
    
    sout = ""
    
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Visible = True
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Activate
    
    ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(7, 5).Select
    
    
        lStartWith = 1000
    
        sout = i & ": "
        i = i + 1
        sout = sout & "SET2_DIMENSIONSETTINGS: " & vbNewLine & vbNewLine & vbNewLine
        sout = sout & "E7:I21 immer hart eingeben" & vbNewLine & vbNewLine
        sout = sout & "orange (C5) = Anzahl Perioden im Tool" & vbNewLine & ActiveSheet.Cells(5, 3) & vbNewLine & vbNewLine
        sout = sout & "Alle Perioden in E27 bef|fffd|llen (Format ;1;2;etc.)" & vbNewLine & ActiveSheet.Cells(27, 5) & vbNewLine & vbNewLine
        sout = sout & "Tool Identifier ersetzen (Oct bis Aug: ACT_Exx)" & vbNewLine & ActiveSheet.Cells(32, 5) & vbNewLine & vbNewLine
        sout = sout & "Following Reporting Period (Formulas)" & vbNewLine & ActiveSheet.Cells(29, 7) & vbNewLine & vbNewLine
        sout = sout & "Following Reporting Period (Formulas)" & vbNewLine & ActiveSheet.Cells(30, 5) & vbNewLine & vbNewLine
        
        sout = sout & "Estimation anpassen, welche Perioden sind im grad behandelten Estimation g|fffd|ltig (R24)" & vbNewLine & ActiveSheet.Cells(24, 18) & vbNewLine & vbNewLine
        sout = sout & "Quartalsmonat? (N6)" & vbNewLine & ActiveSheet.Cells(6, 4) & vbNewLine & vbNewLine
        sout = sout & "Estimation Monat? (N9)" & vbNewLine & ActiveSheet.Cells(9, 14) & vbNewLine & vbNewLine
     
        
        sout = sout & " Estimation Monat? (N9) Konstantenpr|fffd|fen: " & vbNewLine
        sout = sout & GetColLetter2(SET2_DimensionSettings_EstimationMonth_COL) & SET2_DimensionSettings_EstimationMonth_ROW
    
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Visible = False

        
        ThisWorkbook.Sheets("Start").Activate
        ThisWorkbook.Sheets("Start").Cells(START_SPECIALEXPORT_ICM_ROW, START_SPECIALEXPORT_COL).Select
        
        sout = i & ": "
        i = i + 1
        sout = sout & "STARTSEITE LINKS: " & vbNewLine & vbNewLine
        
        sout = sout & GetColLetter2(DROP_START_MAIN_COL) & DROP_START_MAIN_ROW & " Aktions-Drop-Down" & vbNewLine & vbNewLine
        
        sout = sout & "Special Export: " & vbNewLine & vbNewLine
    
        sout = sout & "     " & GetColLetter2(START_SPECIALEXPORT_COL) & START_SPECIALEXPORT_ICM_ROW & " ICM" & vbNewLine
        sout = sout & "     " & GetColLetter2(START_SPECIALEXPORT_COL) & START_SPECIALEXPORT_OIeS_ROW & " Order Intake = Sales" & vbNewLine
        sout = sout & "     " & GetColLetter2(START_SPECIALEXPORT_COL) & START_SPECIALEXPORT_SHEETs_ROW & " Blaetter" & vbNewLine
        sout = sout & "     " & GetColLetter2(START_SPECIALEXPORT_COL) & START_SPECIALEXPORT_REPORTINGPERIODs_ROW & " Reporting Perioden" & vbNewLine & vbNewLine
        
        sout = sout & "Special Import: " & vbNewLine & vbNewLine
        
        sout = sout & GetColLetter2(START_SPECIALIMPORT_COL) & START_SPECIALIMPORT_REPORTINGPERIOD_ROW & "Special Import" & vbNewLine
        sout = sout & GetColLetter2(START_SPECIALCASES_COL) & START_SPECIALCASES_OTHERCHANG69_ROW & " Special Business Cases - 69" & vbNewLine & vbNewLine
        
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub

        
        ThisWorkbook.Sheets("Start").Activate
        ThisWorkbook.Sheets("Start").Cells(START_ICPUNBLOCL_ROW, START_ICPUNBLOCK_COL).Select
        
        sout = i & ": "
        i = i + 1
        sout = sout & "STARTSEITE UNTEN: " & vbNewLine & vbNewLine
        sout = sout & GetColLetter2(START_ICPUNBLOCK_COL) & START_ICPUNBLOCL_ROW & " ICP Unblock" & vbNewLine & vbNewLine
    
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        

        ThisWorkbook.Sheets("Start").Activate
        ThisWorkbook.Sheets("Start").Cells(START_MSGBOX_ROW, START_MSGBOX_COL).Select
        
        sout = i & ": "
        i = i + 1
        sout = sout & "STARTSEITE RECHTS: " & vbNewLine & vbNewLine
        
        sout = sout & GetColLetter2(START_MSGBOX_COL) & START_MSGBOX_ROW & " Nachrichten" & vbNewLine
        sout = sout & GetColLetter2(START_OPENINGVALUES_FILLED_COL_ACT) & START_OPENINGVALUES_FILLED_ROW & " Balance Sheet Differences - Opening Values filled" & vbNewLine & vbNewLine
       
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub

        
        sout = i & ": "
        i = i + 1
        sout = sout & "SET1_RunTimeSettings" & vbNewLine & vbNewLine
        ThisWorkbook.Sheets("SET1_RunTimeSettings").Visible = True
        ThisWorkbook.Sheets("SET1_RunTimeSettings").Activate
        ThisWorkbook.Sheets("SET1_RunTimeSettings").Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ALL, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL).Select
    
        sout = sout & GetColLetter2(SET1_RunTimeSettings_HIDDENMOVEMENTS_COL) & SET1_RunTimeSettings_HIDDENMOVEMENTS_ROW & " Hidden Movements von Special Business Cases" & vbNewLine & vbNewLine
        
        sout = sout & "Wurde bereits ein Formular ausgef|fffd|llt: " & vbNewLine & vbNewLine
        
        sout = sout & "     " & GetColLetter2(SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) & SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ALL & " Alle " & vbNewLine
        sout = sout & "     " & GetColLetter2(SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) & SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ACT & " ACT" & vbNewLine
        sout = sout & "     " & GetColLetter2(SET1_RunTimeSettings_FORMSFILLEDCHECK_COL) & SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_EXX & " EXX" & vbNewLine & vbNewLine
        
        sout = sout & "Formes Filles: sind Formeln richtig?" & vbNewLine & vbNewLine
        
        sout = sout & "     " & "Alle " & vbNewLine & vbNewLine & ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ALL, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL).Formula & vbNewLine & vbNewLine
        sout = sout & "     " & "ACT " & vbNewLine & vbNewLine & ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_ACT, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL).Formula & vbNewLine & vbNewLine
        sout = sout & "     " & "EXX " & vbNewLine & vbNewLine & ThisWorkbook.Sheets(SHEET_SET1_RunTimeSettings).Cells(SET1_RunTimeSettings_FORMSFILLEDCHECK_ROW_EXX, SET1_RunTimeSettings_FORMSFILLEDCHECK_COL).Formula & vbNewLine & vbNewLine
         
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        ThisWorkbook.Sheets("SET1_RunTimeSettings").Visible = False
        

       
        'Bl|fffd|tter pr|fffd|fen
        ThisWorkbook.Sheets("Income").Visible = True
        ThisWorkbook.Sheets("Income").Select
        ThisWorkbook.Sheets("Income").Range("A1").Select
        sout = i & ": "
        i = i + 1
        sout = sout & "Income" & vbNewLine & vbNewLine
        sout = sout & "> Bl|fffd|tter pr|fffd|fen" & vbNewLine
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        

        
        'Layout
        ThisWorkbook.Sheets("Layout").Visible = True
        ThisWorkbook.Sheets("Layout").Select
        ThisWorkbook.Sheets("Layout").Range("A" & ThisWorkbook.Sheets("Layout").Cells(2, 3)).Select
        sout = i & ": "
        i = i + 1
        sout = sout & "Layout" & vbNewLine & vbNewLine
        sout = sout & "Obergrenze:  " & ThisWorkbook.Sheets("Layout").Cells(2, 3) & vbNewLine
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        ThisWorkbook.Sheets("Layout").Visible = False
        
        
        'Syntax
        Start_SetManagementID "550000-03"
        Sheets("Syntax").Visible = True
        Sheets("Syntax").Activate
        Sheets("Syntax").Cells(11, 1).Select
        ThisWorkbook.Sheets("Syntax").Range("A1").Select
        sout = i & ": "
        i = i + 1
        sout = sout & "SYNTAX: Gesellschaft auf Startseite richtig verlinkt " & "550000-03" & "?" & vbNewLine & vbNewLine
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        Sheets("Syntax").Visible = False


        'Syntax_XLS
        Start_SetManagementID "550000-03"
        Sheets("Syntax_XLS").Visible = True
        Sheets("Syntax_XLS").Activate
        Sheets("Syntax_XLS").Cells(11, 1).Select
        ThisWorkbook.Sheets("Syntax_XLS").Range("A1").Select
    
        sout = i & ": "
        i = i + 1
        sout = sout & "Syntax_XLS: Gesellschaft auf Startseite richtig verlinkt" & "550000-03" & "?" & vbNewLine & vbNewLine
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        Sheets("Syntax_XLS").Visible = False
        Start_SetManagementID "150000-01"
        
        
        'Semantic
        Sheets("Semantic").Visible = True
        Sheets("Semantic").Activate
        Sheets("Semantic").Select
        ThisWorkbook.Sheets("Semantic").Range("A1").Select
        ActiveWindow.SmallScroll Down:=20
         
        sout = i & ": "
        i = i + 1
        sout = sout & "Semantic" & vbNewLine & vbNewLine
        Start_SpecialExport_SetOrdEquSalYes
        sout = sout & "> Export - Schalter f|fffd|r OrderEqualsSales=Yes"
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        
        sout = i & ": "
        i = i + 1
        sout = sout & "Semantic" & vbNewLine & vbNewLine
        Start_SpecialExport_SetOrdEquSalNo
        sout = sout & "> Export - Schalter f|fffd|r OrderEqualsSales=No"
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        
        'Semantic - Formulas aktivieren, naechste Periode
        SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive True
        SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
        
        sout = i & ": "
        i = i + 1
        sout = sout & "Semantic" & vbNewLine & vbNewLine
        sout = sout & "> Formulas aktiviert:" & SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive & vbNewLine
        sout = sout & "> Special Case: Formulas Current deaktiviert " & ThisWorkbook.Sheets("Set1_RunTimeSettings").Cells(34, 3) & vbNewLine
       
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        
        'Semantic - Formulas aktivieren, aktuelle Periode
        SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod True
        sout = i & ": "
        i = i + 1
        sout = sout & "Semantic" & vbNewLine & vbNewLine
        sout = sout & "> Formulas aktiviert:" & SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive & vbNewLine
        sout = sout & "> Special Case: Formulas Current aktiv " & ThisWorkbook.Sheets("Set1_RunTimeSettings").Cells(34, 3) & vbNewLine
        
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
     
        'Semantic - Formulas deaktiveren, naechste Periode
        SET1_RunTimeSettings_Schalter_SetFormulasIsteadOfDataActive False
        SET1_RunTimeSettings_Schalter_SetFormulasCurrentPeriod False
        sout = i & ": "
        i = i + 1
        sout = sout & "Semantic" & vbNewLine & vbNewLine
        sout = sout & "> Formula Export RunTimeSettings = false: " & SET1_RunTimeSettings_Schalter_IsFormulasIsteadOfDataActive & vbNewLine
        sout = sout & "> Formula Export Dimension Settings wg. Next Period = Next!"
    
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        
        'Import Vorperiode
        sout = i & ": "
        i = i + 1
        sout = sout & "SEMANTIC" & vbNewLine & vbNewLine
        sout = sout & "> Estimation! Und ACT der Vorperiode aktualisieren" & vbNewLine
        ActiveWindow.SmallScroll Down:=-20
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        Sheets("Semantic").Visible = False

        
        '400:Keyfigures
        sout = i & ": "
        i = i + 1
        sout = sout & "400: KEYFIGURES" & vbNewLine & vbNewLine
        sout = sout & "> Order_IN: " & ThisWorkbook.Sheets(SHEET_400).Cells(16, 7) & vbNewLine
        sout = sout & "> Start_SpecialExport_GetOrdEquSal: (" & GetColLetter2(START_SPECIALEXPORT_COL) & START_SPECIALEXPORT_OIeS_ROW & ") " & Start_SpecialExport_GetOrdEquSal & vbNewLine & vbNewLine
        ThisWorkbook.Sheets(SHEET_400).Select
        ThisWorkbook.Sheets(SHEET_400).Columns("B:B").Select
        sout = sout & "TOOLVERSION from Makro: " & ThisWorkbook.Sheets(SHEET_SET2_DimensionSettings).Cells(26, 5) & vbNewLine & vbNewLine
        sout = sout & "TOOLVERSION in SHEET 400: ACT + Exx Periode 12 pr|fffd|fen" & vbNewLine & vbNewLine
        sout = sout & "TOOLVERSION exportierbar ... Comment in allen leeren Feldern von Spalte B ... pr|fffd|fen!" & vbNewLine & vbNewLine
        sout = sout & "KONTO MARGIN_ICP in Quartalsmonat im Tool, Normalmonat nicht pr|fffd|fen!"
        
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        
        
        '400a:Auftragsbestand
        sout = i & ": "
        i = i + 1
        ThisWorkbook.Sheets(SHEET_400a).Select
        ThisWorkbook.Sheets(SHEET_400a).Activate
        ActiveSheet.Cells(11, 20).Select
        ActiveWindow.Zoom = 70
        sout = sout & "400a: AUFTRAGSBESTAND" & vbNewLine & vbNewLine
        sout = sout & "KEIN Navigator! " & vbNewLine & vbNewLine
        sout = sout & "Hinweise unter Bewegungen 20 und 41." & vbNewLine & vbNewLine
        sout = sout & "Summenformel enh|fffd|lt alle Spalten, Stichprobe."
            
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        ActiveWindow.Zoom = 100
        

        
        '718: GRA
        sout = i & ": "
        i = i + 1
        ThisWorkbook.Sheets("718_GRA").Select
        ThisWorkbook.Sheets("718_GRA").Activate
        sout = sout & "718_GRA" & vbNewLine & vbNewLine
        sout = sout & "Au|fffd|er im Jahresabschluss und im Abgangstool nur ein Konto!."
            
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        

        
        'Messages
        sout = i & ": "
        i = i + 1
        sout = sout & "MESSAGES" & vbNewLine & vbNewLine
        sout = sout & "> Messages leer?"
        ThisWorkbook.Sheets("Messages").Select
        ThisWorkbook.Sheets("Messages").Range("A1").Select
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        

        
        'SET3_Infobox
        Sheets("Infobox").Visible = True
        Sheets("Infobox").Select
        ThisWorkbook.Sheets("Infobox").Range("A1").Select
        sout = i & ": "
        i = i + 1
        sout = sout & "Infobox" & vbNewLine & vbNewLine
        sout = sout & ""
        If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Sub
        

End Sub

Public Sub Test2()
    Dim lDatasheets As Long
    Dim aDatasheets() As String
    Dim sDatasheet As String
    Dim bResume As Boolean
    
    Layout_GetAllDatasheets aDatasheets

    For lDatasheets = LBound(aDatasheets) To UBound(aDatasheets)
        sDatasheet = aDatasheets(lDatasheets)
        DoEvents
        
        If sDatasheet <> "" Then
            bResume = Test2_byDatasheet(sDatasheet)
            If bResume = False Then Exit Sub
        End If
    Next
End Sub

Public Sub Test2_OneDatasheet()
    Test2_byDatasheet "Balance"
End Sub

Public Function Test2_byDatasheet(ByVal sDatasheet As String) As Boolean

    Dim sout As String
    Dim aTemp() As String
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim lTemp As Long
    
    Test2_byDatasheet = False
    

     ThisWorkbook.Sheets(sDatasheet).Select
     ThisWorkbook.Sheets(sDatasheet).Activate
     
     '------>|fffd|berschrift
     sout = UCase(sDatasheet) & vbNewLine & vbNewLine
     ActiveSheet.Cells(1, 2).Select
     sout = sout & "|fffd|berschrift:     " & ActiveSheet.Cells(1, 2)
     If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Function
     
     '------>Kontenfinder
     sout = UCase(sDatasheet) & vbNewLine & vbNewLine
     ActiveSheet.Cells(5, 2).Select
     sout = sout & "Kontenfinder:     " & ActiveSheet.Cells(5, 2)
     If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Function

     '------>Print Area
     sout = UCase(sDatasheet) & vbNewLine & vbNewLine
     sout = sout & "Print Area: " & ActiveSheet.PageSetup.PrintArea
    
     sTemp1 = ""
     aTemp = Split(ActiveSheet.PageSetup.PrintArea, ":")
     
     On Error Resume Next
     ActiveSheet.Range(aTemp(1)).Select
     If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Function
     
     '------>Formel H1
     ActiveSheet.Cells(1, 8).Select
     sout = UCase(sDatasheet) & vbNewLine & vbNewLine
     sout = sout & "Formel in H1: " & ActiveSheet.Cells(1, 8).Formula & vbNewLine & vbNewLine
     sTemp1 = aTemp(1)
     sTemp2 = ""
     While Len(sTemp1) > 0
         DoEvents
         If IsNumeric(Left(sTemp1, 1)) = True Then
             sTemp2 = sTemp2 & Left(sTemp1, 1)
         End If
         sTemp1 = Mid(sTemp1, 2)
     Wend
     lTemp = sTemp2
     
     ActiveSheet.Columns("L:M").EntireColumn.Hidden = False
     ActiveSheet.Cells(lTemp, 12).Select
     
     If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Function
     
     '------>Formel H2
     ActiveSheet.Cells(1, 8).Select
     sout = UCase(sDatasheet) & vbNewLine & vbNewLine
     sout = sout & "Formel in H2: " & ActiveSheet.Cells(2, 8).Formula & vbNewLine & vbNewLine
     
     ActiveSheet.Cells(lTemp, 13).Select
     If MsgBox(sout, vbOKCancel) = vbCancel Then Exit Function
     
     ActiveSheet.Columns("L:M").EntireColumn.Hidden = True
     
     Test2_byDatasheet = True

End Function


Public Sub Setup_a_STEP_WriteExcel_FromAccountList()
        On Error GoTo errhdl
        
'        Application.ScreenUpdating = False
    
    'XML_LoadMetadata File_Dialog_SingleFile, objXMLMetadata
    
    SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive False
    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
    
    Dim lVBOK As Long
    Dim lEOF As Long
    Dim sPriorSheet As String
    
    lVBOK = MsgBox("BALANCE" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
    
    If lVBOK = vbYes Then
        lExcelRowCounter_Datasheet = DATASHEET_ROW_FIRSTDATASET
        sDatasheet = SHEET_BALANCE
        sChartGroup = ACCOUNTS_TOPMEMBER_BALANCE
        sDatasheet_ACC = SHEET_ACCLIST_BALANCE
        
        For lExcelRowCounter_AccList = 1 To FOR_MAX
            If ThisWorkbook.Sheets(SHEET_ACCLIST_BALANCE).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCOUNT) <> "" Then
                Setup_WriteExcel_FromAccountList_Help_HandleAccount
            Else 'Abbruch Durchlauf von ACCLIST_BALANCE
                lExcelRowCounter_AccList = FOR_MAX
            End If
        Next
        
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, 2) = "ENDOFFILE"
        Setup_WriteExcel_FromAccountList_Help_HandleSheet sDatasheet
       
    End If
    
'    Exit Sub
    
    lVBOK = MsgBox("INCOME" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
    
    If lVBOK = vbYes Then
        lExcelRowCounter_Datasheet = DATASHEET_ROW_FIRSTDATASET
        sDatasheet = SHEET_INCOME
        sDatasheet_ACC = SHEET_ACCLIST_INCOME
        sChartGroup = ACCOUNTS_TOPMEMBER_INCOME
        
        For lExcelRowCounter_AccList = 1 To FOR_MAX
            If ThisWorkbook.Sheets(SHEET_ACCLIST_INCOME).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCOUNT) <> "" Then
                Setup_WriteExcel_FromAccountList_Help_HandleAccount
            Else 'Abbruch Durchlauf von ACCLIST_BALANCE
                lExcelRowCounter_AccList = FOR_MAX
            End If
        Next
       
       ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, 2) = "ENDOFFILE"
       Setup_WriteExcel_FromAccountList_Help_HandleSheet sDatasheet
       
    End If
    
    lVBOK = MsgBox("STATISTICS" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
    
    If lVBOK = vbYes Then
        lExcelRowCounter_Datasheet = 1
        sDatasheet = "Statistics"
        sDatasheet_ACC = SHEET_ACCLIST_STATISTICS
        sChartGroup = ACCOUNTS_TOPMEMBER_STATISTICS
        
        For lExcelRowCounter_AccList = 1 To FOR_MAX
            If ThisWorkbook.Sheets(SHEET_ACCLIST_STATISTICS).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCOUNT) <> "" Then
                sDatasheet = ""
                sDatasheet = ThisWorkbook.Sheets(SHEET_ACCLIST_STATISTICS).Cells(lExcelRowCounter_AccList, ACCLIST_COL_STATISTICTopMEMBER)
                
                If ThisWorkbook.Sheets(sDatasheet).Cells(DATASHEET_ROW_FIRSTDATASET, DATASHEET_COL_ACCOUNT) = "" Then
                    'Prior Sheet
                    On Error Resume Next
                    sPriorSheet = ThisWorkbook.Sheets(SHEET_ACCLIST_STATISTICS).Cells(lExcelRowCounter_AccList - 1, ACCLIST_COL_STATISTICTopMEMBER)
                    On Error GoTo errhdl
                    If sPriorSheet <> "" Then
                        'lEOF = lExcelRowCounter_Datasheet
                        ThisWorkbook.Sheets(sPriorSheet).Cells(lExcelRowCounter_Datasheet, 2) = "ENDOFFILE"
                        Setup_WriteExcel_FromAccountList_Help_HandleSheet sPriorSheet
                    End If
                    
                    lExcelRowCounter_Datasheet = DATASHEET_ROW_FIRSTDATASET
                End If
                         
                Setup_WriteExcel_FromAccountList_Help_HandleAccount
            Else 'Abbruch Durchlauf von ACCLIST_BALANCE
                lExcelRowCounter_AccList = FOR_MAX
                'letztes Formula
                ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, 2) = "ENDOFFILE"
                Setup_WriteExcel_FromAccountList_Help_HandleSheet sDatasheet
            End If
        Next
       
    End If

'    Application.ScreenUpdating = True
    Exit Sub
errhdl:
   WriteError "Setup_a_STEP_WriteExcel_FromAccountList", Err.Description
   Resume Next
End Sub

Public Sub Setup_WriteExcel_FromAccountList_Help_HandleSheet(ByVal sDatasheet As String)
        
    Dim lMaxColIndex As Long
    Dim lMaxRow As Long
    
    Dim sRange As String
    
    Dim lCounterCols As Long
    Dim lCounterRows As Long


    lMaxColIndex = Layout_GetMaxColIndex_byDatasheet(sDatasheet)
    
    lMaxRow = 0
    lMaxRow = GetFirstOccurence(sDatasheet, 2, "ENDOFFILE") - 1
    If lMaxRow <= 0 Then lMaxRow = 10000
    
    '1. gesammtes TOOL
    
    ThisWorkbook.Sheets(sDatasheet).Cells.Font.Name = "Arial"
    ThisWorkbook.Sheets(sDatasheet).Cells.Font.Size = 8
    
    '2. ADMINISTRATIONS BEREICH
    
    'Zeilen und Spalten ADMIN
    ThisWorkbook.Sheets(sDatasheet).Rows("1:4").NumberFormat = "0"              'Zahl
    ThisWorkbook.Sheets(sDatasheet).Rows("5:9").NumberFormat = "@"              'Text
    
    ThisWorkbook.Sheets(sDatasheet).Columns("A:B").NumberFormat = "@"
    ThisWorkbook.Sheets(sDatasheet).Cells(1, 2).NumberFormat = "0"
    
    ThisWorkbook.Sheets(sDatasheet).Columns("C:C").NumberFormat = "0"
    ThisWorkbook.Sheets(sDatasheet).Columns("D:G").NumberFormat = "@"
    ThisWorkbook.Sheets(sDatasheet).Columns("H:H").NumberFormat = "0"
    ThisWorkbook.Sheets(sDatasheet).Columns("I:L").NumberFormat = "@"
    
    'Sonderfall 400
    If CompareStrings(sDatasheet, "400") = True Then
        ThisWorkbook.Sheets(sDatasheet).Columns("F:G").NumberFormat = "0"
    End If
    
    'Header ADMIN
    ThisWorkbook.Sheets(sDatasheet).Cells(1, 2).Font.Size = 10
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 2).Font.Size = 8
    
    ThisWorkbook.Sheets(sDatasheet).Range("A1:L9").Font.ColorIndex = xlAutomatic
    
    '|fffd|berschriften Navigator und Kontensuche blau
    ThisWorkbook.Sheets(sDatasheet).Cells(2, 2).Font.Color = -4144960
    ThisWorkbook.Sheets(sDatasheet).Cells(4, 2).Font.Color = -65536
    ThisWorkbook.Sheets(sDatasheet).Range("F1:G6").Font.Color = -65536
    
    ThisWorkbook.Sheets(sDatasheet).Cells(6, 2).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
    ThisWorkbook.Sheets(sDatasheet).Cells(lMaxRow + 1, 2) = "ENDOFFILE"
    ThisWorkbook.Sheets(sDatasheet).Cells(lMaxRow + 1, 2).Font.ColorIndex = 2

    '3. DATENBEREICH
    
    sRange = GetColLetter2(DATASHEET_COL_MovementNumber_FIRST) & DATASHEET_ROW_FIRSTDATASET & ":" & GetColLetter2(lMaxColIndex) & lMaxRow

    ThisWorkbook.Sheets(sDatasheet).Range(sRange).NumberFormat = "#,##0.00"
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).HorizontalAlignment = xlRight
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).VerticalAlignment = xlTop
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).IndentLevel = 0
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).MergeCells = False
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).ShrinkToFit = False
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).Font.Name = "Arial"
    ThisWorkbook.Sheets(sDatasheet).Range(sRange).Font.Size = 8
    
    Exit Sub
    
    For lCounterCols = DATASHEET_COL_MovementNumber_FIRST To lMaxColIndex
        For lCounterRows = DATASHEET_ROW_FIRSTDATASET To lMaxRow
            DoEvents
            Debug.Print lCounterCols & "_" & lCounterRows
            
            If ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, lCounterCols).Locked = False Then
                'Eingabezellen blau f|fffd|rben
                If ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, lCounterCols).Interior.ColorIndex <> EXCEL_COLOUR_DATAENTRY Then
                    ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, lCounterCols).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY
                End If
            Else
                'gesperrte Zellen, die blau gef|fffd|rbt sind, f|fffd|rben wie in Spalte 2
                If ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, lCounterCols).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY Then
                    ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, lCounterCols).Interior.ColorIndex = ThisWorkbook.Sheets(sDatasheet).Cells(lCounterRows, 2).Interior.ColorIndex
                End If
            End If
        Next
    Next
    
    On Error GoTo errhdl
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleSheet", Err.Description
   Resume Next
End Sub

Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount()

    On Error GoTo errhdl
    
    Dim sAccount As String
    Dim lLevel As String
    Dim bXML_IsMemberLeave As Boolean

    Dim bIsICP As Boolean
    Dim sICP As String
    Dim lICPCounter As Long
    Dim lICPUBound As Long
    
    Dim sMovementNumberTopmember As String
    Dim sMovementNumbers As String
    Dim aMovementNumber() As String
    
    Dim sMovementRangeTopmember As String
    Dim sMovementRanges As String
    Dim aMovementRange() As String
    Dim sMovementRange As String
    Dim lMovementRangeCounter As Long
    
    Dim sMovementTypesValid As String
    Dim sMovementTypesInvalid As String
    
    Dim sMovementRangeSimple As String
    Dim sMovementRangeDaproh As String
    
    Dim sBreakdownColsTopmember As String
    Dim sBreakdownColss As String
    Dim aBreakdownCols() As String
    Dim sBreakdownCols As String
    
    Dim sBreakdownRowsTopmember As String
    Dim sBreakdownRows As String
    Dim aBreakdownRows() As String
    Dim lUboundBreakdownRows As Long
    Dim lBreakdownRowsCounter As Long
    Dim sStatisticTopmember As String
     
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim lInStringDelimiter As Long
    
    Dim sTempString As String
    
    Dim lCase As Long
    Dim lSubcase As Long
    
    Dim lNofBreakdown_MovementRange_Rows As Long
    Dim lNofBreakdown_BreakdownRows_Rows As Long
    Dim lNofBreakdown_Move2AndSAPCust12_Rows As Long
    Dim lNofICPRows As Long
    Dim lNofAccountRows As Long
    
    Dim lGroupLevelTemp As Long
    Dim lGroupLevelCounter As Long
    Dim sGroupLevelTempAccount As String
    
    Dim sAccountSumm As String
    Dim lAccountSummCounter As Long
    
    DoEvents
    Debug.Print lExcelRowCounter_AccList
    
    'Anmerkungen:
    '   Topmember leer wird durch [None] aufgef|fffd|llt
    
' ------------------------------ *** Get Account Data *** ------------------------------
    
    sAccount = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCOUNT)
    lLevel = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_INDENTLEVEL)
                               
    'ICP
    sICP = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ICP_inROW)
    If CompareStrings(sICP, ICP_NONE) = True Then
        bIsICP = False
    Else
        bIsICP = True
    End If
    
    'MovementNumber (vorher Custom1)
    sMovementNumbers = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_MovementNumber)
    If CompareStrings(sMovementNumbers, "") = False Then
        lInStringDelimiter = InStr(1, sMovementNumbers, DELIMITER)
        sMovementNumberTopmember = Mid(sMovementNumbers, 1, lInStringDelimiter - 1)
        aMovementNumber = Split(Mid(sMovementNumbers, lInStringDelimiter + 1), ";")
    Else
        sMovementNumberTopmember = NONE
        ReDim aMovementNumber(0)
        aMovementNumber(0) = NONE
    End If
    
    'MovementRange (vorher Custom2)
    sMovementRanges = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_MovementRange)
    sMovementRangeDaproh = ""
    sMovementRangeSimple = ""
    
    If CompareStrings(sMovementRanges, "") = False Then
        lInStringDelimiter = InStr(1, sMovementRanges, DELIMITER)
        sMovementRangeTopmember = Mid(sMovementRanges, 1, lInStringDelimiter - 1)
        aMovementRange = Split(Mid(sMovementRanges, lInStringDelimiter + 1), ";")
    Else
        sMovementRangeTopmember = NONE
        ReDim aMovementRange(0)
        aMovementRange(0) = NONE
    End If
    
    sMovementTypesValid = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_MovementType_VALID)
    sMovementTypesInvalid = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_MovementType_INVALID)
    
    'Breakdown Rows
    sBreakdownRows = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_BreakdownRows)
    If CompareStrings(sBreakdownRows, "") = False Then
        lInStringDelimiter = InStr(1, sBreakdownRows, DELIMITER)
        sBreakdownRowsTopmember = Mid(sBreakdownRows, 1, lInStringDelimiter - 1)
        aBreakdownRows = Split(Mid(sBreakdownRows, lInStringDelimiter + 1), ";")
    Else
        sBreakdownRowsTopmember = NONE
        ReDim aBreakdownRows(0)
        aBreakdownRows(0) = NONE
    End If
    
    'Breakdown Cols
    sBreakdownCols = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_BreakdownCols)
    If CompareStrings(sBreakdownCols, "") = False Then
        lInStringDelimiter = InStr(1, sBreakdownCols, DELIMITER)
        sBreakdownColsTopmember = Mid(sBreakdownCols, 1, lInStringDelimiter - 1)
        aBreakdownCols = Split(Mid(sBreakdownCols, lInStringDelimiter + 1), ";")
    Else
        sBreakdownColsTopmember = NONE
        ReDim aBreakdownCols(0)
        aBreakdownCols(0) = NONE
    End If
    
    'column10
    If CompareStrings(ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCisLEAVE), "WAHR") = True Or CompareStrings(ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_ACCisLEAVE), "TRUE") = True Then
        bXML_IsMemberLeave = True
    Else
        bXML_IsMemberLeave = False
    End If
    
    'Column11: Statistic Topmember
    If sChartGroup = ACCOUNTS_TOPMEMBER_STATISTICS Then
        sStatisticTopmember = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_STATISTICTopMEMBER)
    End If
    
' ------------------------------ *** Write Excel Rows *** ------------------------------

'    'Cases / Subcases:
'
'    1. Summenkonto
'    2. ohne Aufriss / ohne ICP
'    3. ohne Aufriss / mit ICP
'
'       3a) ICP Eingabezeile
'       3b) ICP Summenzeile
'
'    4. mit Aufriss / ohne ICP
'
'       4a) Aufriss-Eingabezeile
'       4b) Kontensumme (keine Summe pro Aufriss)
'
'    5. mit Aufriss / mit ICP
'
'       5a) Aufriss-Eingabe und ICP-Eingabezeile
'       5b) Aufriss-Eingabe und ICP-Top
'       5c) Kontensumme (keine Summe pro Aufriss)
'
'    ACHTUNG NEU: Definiton von "ohne Aufriss" = entweder kein Movement Range und kein SAP Breakdown 12
'                oder nur genau ein Wert bei einem der beiden Merkmale (und darum kein
'                Aufriss erforderlich!
'
    
    
    '*** Case ermitteln und wesentliche Settings pro Case setzen ***
    
    lCase = 0
    lNofBreakdown_MovementRange_Rows = 0
    lNofBreakdown_BreakdownRows_Rows = 0
    lNofBreakdown_Move2AndSAPCust12_Rows = 0
    lNofICPRows = 0
    lNofAccountRows = 0
    
    If bXML_IsMemberLeave = False Then
        lCase = 1
        lNofBreakdown_MovementRange_Rows = 1
        lNofBreakdown_BreakdownRows_Rows = 1
        lNofBreakdown_Move2AndSAPCust12_Rows = 1
        lNofICPRows = 1
        lNofAccountRows = 1
    Else
        
        If UBound(aMovementRange) = 0 And UBound(aBreakdownRows) = 0 And (aBreakdownRows(0) = NONE Or aMovementRange(0) = NONE) Then
                          
            If bIsICP = False Then
                'ohne Aufriss / ohne ICP
                lCase = 2
                lNofICPRows = 1
            
            Else
                'ohne Aufriss / mit ICP
                lCase = 3
                lNofICPRows = 3
            End If
            
            lNofBreakdown_MovementRange_Rows = 1
            lNofBreakdown_BreakdownRows_Rows = 1
            lNofBreakdown_Move2AndSAPCust12_Rows = 1
            lNofAccountRows = lNofICPRows

        Else
            If bIsICP = False Then
                'mit Aufriss / ohne ICP
                lCase = 4
                lNofICPRows = 1
            Else
                'mit Auriss / mit ICP
                lCase = 5
                lNofICPRows = 3
            End If
            lNofBreakdown_MovementRange_Rows = UBound(aMovementRange) + 1
            lNofBreakdown_BreakdownRows_Rows = UBound(aBreakdownRows) + 1
            lNofBreakdown_Move2AndSAPCust12_Rows = lNofBreakdown_MovementRange_Rows * lNofBreakdown_BreakdownRows_Rows
            lNofAccountRows = lNofBreakdown_Move2AndSAPCust12_Rows * lNofICPRows + 1
        End If
        
    End If
       
    '*** Umsetzung nach Cases ***
        
'        If CompareStrings("1270500", sAccount) = True Then
'            Debug.Print ""
'        End If
    
'----------------------------------------------------------------------------------------------------------------------------------------------------
    
    If lCase = 1 Then
    '@CASE 1: SUMMENKONTO
        
        'I.ATTRIBUTE
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
        Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel
        
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, sMovementRange, sMovementRangeTopmember, sBreakdownRows, sBreakdownRowsTopmember, bIsICP
        
        'II.GRUPPIERUNG und III.SUMME
        sAccountSumm = ""
        sGroupLevelTempAccount = ""
               
        'SUMME
        For lGroupLevelCounter = lExcelRowCounter_Datasheet - 1 To DATASHEET_ROW_FIRSTDATASET - 1 Step -1
           If ThisWorkbook.Sheets(sDatasheet).Cells(lGroupLevelCounter, DATASHEET_COL_ACCOUNT).IndentLevel <= lLevel Or lGroupLevelCounter = DATASHEET_ROW_FIRSTDATASET - 1 Then
                'III.SUMME
'                ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet) = "EXCElWORKAROUND=SUMME(" & sAccountSumm & ")"

                    ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet) = "EXCElWORKAROUND=" & "SUMME(" & sAccountSumm & ")"
                Exit For
            Else
                'Summe |fffd|ber alle Konten mit Level = eigener Level + 1
                If ThisWorkbook.Sheets(sDatasheet).Cells(lGroupLevelCounter, DATASHEET_COL_ACCOUNT).IndentLevel = lLevel + 1 Then
                    'nur Kontensumme summieren, d.h. von unten gez|fffd|hlt immer nur erste Kontozeile
                    If CompareStrings(ThisWorkbook.Sheets(sDatasheet).Cells(lGroupLevelCounter, DATASHEET_COL_ACCOUNT), sGroupLevelTempAccount) = False Then
                
                        If sAccountSumm <> "" Then sAccountSumm = sAccountSumm & ";"
                        sAccountSumm = sAccountSumm & TEMP_COL_FOR_FORMULAS_LETTER & lGroupLevelCounter
                        sGroupLevelTempAccount = ThisWorkbook.Sheets(sDatasheet).Cells(lGroupLevelCounter, DATASHEET_COL_ACCOUNT)
                    
                    End If
                End If
                
            End If
        Next
        
        'GRUPPIERUNG
        If sChartGroup <> ACCOUNTS_TOPMEMBER_BALANCE Or lLevel >= 3 Then
        
            For lGroupLevelCounter = lExcelRowCounter_Datasheet - 1 To DATASHEET_ROW_FIRSTDATASET - 1 Step -1
               If ThisWorkbook.Sheets(sDatasheet).Cells(lGroupLevelCounter, DATASHEET_COL_ACCOUNT).IndentLevel <= lLevel Or lGroupLevelCounter = DATASHEET_ROW_FIRSTDATASET - 1 Then
                    'II.GRUPPIERUNG
                    ThisWorkbook.Sheets(sDatasheet).Rows(CLng(lGroupLevelCounter + 1) & ":" & CLng(lExcelRowCounter_Datasheet - 1)).Rows.Group
                    Exit For
                End If
            Next
            
        End If
        
        'IV.FORMATIERUNG
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
        
        'VI. DATA ENTRY COLS
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
        
        lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1
        
'----------------------------------------------------------------------------------------------------------------------------------------------------
    
    ElseIf lCase = 2 Then
    '@CASE 2: EINGABEKONTO ohne AUFRISS ohne ICP
    
        'I.ATTRIBUTE
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
        Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel

        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_RANGE_VISIBLE) = aMovementRange(0)
        
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = sICP
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_BreakdownRows) = aBreakdownRows(0)
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ISLEAVE) = "YN"
        
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, aMovementRange(0), sMovementRangeTopmember, aBreakdownRows(0), sBreakdownRowsTopmember, bIsICP
        
        'II.GRUPPIERUNG und III.SUMME
        
        'IV.FORMATIERUNG
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
        
        'V.ZWIEBEL
        
        'VI. DATA ENTRY COLS
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
        
        lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1

'----------------------------------------------------------------------------------------------------------------------------------------------------
    
    ElseIf lCase = 3 Then
    '@CASE 3: EINGABEKONTO ohne AUFRISS mit ICP
    

        For lICPCounter = 1 To 3
        
            'I.ATTRIBUTE
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
            Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel
            
           ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_RANGE_VISIBLE) = aMovementRange(0)
            
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_BreakdownRows) = aBreakdownRows(0)
            
            Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
            Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
            
            If lICPCounter <> 3 Then
            '@CASE 3a) ICP EINGABE
            
                 lSubcase = 1
                 ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = ""
                 ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ISLEAVE) = "YY"
                 
                'V.ZWIEBEL
               
                'VI. DATA ENTRY COLS
                Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                
                If lICPCounter = 1 Then
                    Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, 1
                End If
            Else
            '@CASE 3b) ICP SUMME
                
                lSubcase = 2
                
                'I.ATTRIBUTE
                ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = sICP
                Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, aMovementRange(0), aBreakdownRows(0), sBreakdownRows, sBreakdownRowsTopmember, bIsICP
                
                'II.GRUPPIERUNG
                ThisWorkbook.Sheets(sDatasheet).Rows(CLng(lExcelRowCounter_Datasheet - 2) & ":" & CLng(lExcelRowCounter_Datasheet - 1)).Rows.Group
                
                'III.SUMME
                 ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet).FormulaR1C1 = "=SUM(R[-2]C:R[-1]C)"
                 
                'VI. DATA ENTRY COLS
                Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                
            End If
            
            'IV.FORMATIERUNG
            Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
            lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1

            
        Next
        
'----------------------------------------------------------------------------------------------------------------------------------------------------
    
    ElseIf lCase = 4 Then
    '@CASE 4: EINGABEKONTO mit AUFRISS ohne ICP
        
        For lMovementRangeCounter = 0 To UBound(aMovementRange)
            If aMovementRange(lMovementRangeCounter) <> "" Or CompareStrings(sMovementRangeTopmember, NONE) = True Then
                sMovementRange = aMovementRange(lMovementRangeCounter)
                
                If sMovementRangeDaproh = "" Then
                    sMovementRangeSimple = sMovementRange
                End If
                
                For lBreakdownRowsCounter = 0 To UBound(aBreakdownRows)
                    If aBreakdownRows(lBreakdownRowsCounter) <> "" Or CompareStrings(sBreakdownRowsTopmember, NONE) = True Then
                    sBreakdownRows = aBreakdownRows(lBreakdownRowsCounter)
                    
                    '@CASE 4a) AUFRISS EINGABEZEILEN
                    
                        lSubcase = 1

                        'I.ATTRIBUTE
                        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
                        Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel
                        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ISLEAVE) = "YN"
                        
                        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_RANGE_VISIBLE) = sMovementRange

                        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = sICP
                        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_BreakdownRows) = sBreakdownRows
                        
                        Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
                        Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
                        Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, sMovementRange, sMovementRangeTopmember, sBreakdownRows, sBreakdownRowsTopmember, bIsICP
                        
                        'II.GRUPPIERUNG und III.SUMME
                        
                        'IV.FORMATIERUNG
                        Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
                        
                        'V.ZWIEBEL
                        
                        'VI. DATA ENTRY COLS
                        Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                        
                        lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1
   
                    End If
                Next
            End If
        Next
        
        '@CASE 4b) KONTENSUMME ... siehe auch unten
        
        lSubcase = 2
        
        'III.SUMME
        sAccountSumm = ""
        For lAccountSummCounter = lExcelRowCounter_Datasheet - 1 To lExcelRowCounter_Datasheet - lNofAccountRows + 1 Step -1
            If sAccountSumm <> "" Then sAccountSumm = sAccountSumm & ";"
            sAccountSumm = sAccountSumm & _
                            TEMP_COL_FOR_FORMULAS_LETTER & lAccountSummCounter
        Next
        
        ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet) = "EXCElWORKAROUND=SUMME(" & sAccountSumm & ")"
            
'----------------------------------------------------------------------------------------------------------------------------------------------------

    ElseIf lCase = 5 Then
    '@CASE 5: EINGABEKONTO  mit AUFRISS mit ICP

        For lMovementRangeCounter = 0 To UBound(aMovementRange)
           If aMovementRange(lMovementRangeCounter) <> "" Or CompareStrings(sMovementRangeTopmember, NONE) = True Then
                sMovementRange = aMovementRange(lMovementRangeCounter)
                
                If sMovementRangeDaproh = "" Then
                    sMovementRangeSimple = sMovementRange
                End If
                
                For lBreakdownRowsCounter = 0 To UBound(aBreakdownRows)
                    If aBreakdownRows(lBreakdownRowsCounter) <> "" Or CompareStrings(sBreakdownRowsTopmember, NONE) = True Then
                    sBreakdownRows = aBreakdownRows(lBreakdownRowsCounter)
                    
                        For lICPCounter = 1 To 3

                            'I.ATTRIBUTE (@CASE5a+b)
                            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
                            Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel
                            
                            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_RANGE_VISIBLE) = sMovementRange
                        
                            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_BreakdownRows) = sBreakdownRows
                            
                            Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
                            
                            If lICPCounter <> 3 Then
                            '@CASE 5a) ICP EINGABE (Aufriss Eingabe)
                                 
                                 lSubcase = 1
                                                                
                                 ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = ""
                                 ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ISLEAVE) = "YY"
                                 
                                'V.ZWIEBEL
                                Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
                              
                                
                                'VI. DATA ENTRY COLS
                                Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                                
                                
                                If lICPCounter = 1 Then
                                    Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, 1
                                End If
                            
                            Else
                            '@CASE 5b) ICP SUMME (Aufriss Eingabe)
                                
                                lSubcase = 2
                                
                                'I.ATTRIBUTE
                                ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ICP) = sICP
                                Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
                                Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, sMovementRange, sMovementRangeTopmember, sBreakdownRows, sBreakdownRowsTopmember, bIsICP
                            
                                'II.GRUPPIERUNG
                                ThisWorkbook.Sheets(sDatasheet).Rows(CLng(lExcelRowCounter_Datasheet - 2) & ":" & CLng(lExcelRowCounter_Datasheet - 1)).Rows.Group
                                
                                'III.SUMME
                                ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet).FormulaR1C1 = "=SUM(R[-2]C:R[-1]C)"
                                
                                'VI. DATA ENTRY COLS
                                Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                            End If
                            
                            'IV.FORMATIERUNG (@CASE5a+b)
                            Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
                            
                            lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1
                        Next
                    
                    End If
                Next
            End If
        Next
        
        '@CASE 5c) KONTENSUMME ... siehe auch unten
        lSubcase = 3
        
        'III.SUMME
        sAccountSumm = ""
        For lAccountSummCounter = lExcelRowCounter_Datasheet - 1 To lExcelRowCounter_Datasheet - lNofAccountRows + 1 Step -1
            'ToDo pr|fffd|fen, vorher "_"
            If CompareStrings(ICP_TOP, ThisWorkbook.Sheets(sDatasheet).Cells(lAccountSummCounter, DATASHEET_COL_ICP)) = True Then
                If sAccountSumm <> "" Then sAccountSumm = sAccountSumm & ";"
                sAccountSumm = sAccountSumm & TEMP_COL_FOR_FORMULAS_LETTER & lAccountSummCounter
            End If
        Next
        
        ThisWorkbook.Sheets(sDatasheet).Range(TEMP_COL_FOR_FORMULAS_LETTER & lExcelRowCounter_Datasheet) = "EXCElWORKAROUND=SUMME(" & sAccountSumm & ")"

'----------------------------------------------------------------------------------------------------------------------------------------------------
    End If
    
    If lCase = 4 Or lCase = 5 Then
        '@CASE 4b)=5c) KONTENSUMME
        
        'I.ATTRIBUTE
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT) = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
        Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT, lLevel
        
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo sAccount
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions lCase, lSubcase, sAccount, sMovementRange, sMovementRangeTopmember, sBreakdownRows, sBreakdownRowsTopmember, bIsICP
                
        'II.GRUPPIERUNG
        ThisWorkbook.Sheets(sDatasheet).Rows(CLng(lExcelRowCounter_Datasheet - lNofAccountRows + 1) & ":" & CLng(lExcelRowCounter_Datasheet - 1)).Rows.Group
        
        'IV.FORMATIERUNG
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung lCase, lSubcase
        
        'VI. DATA ENTRY COLS
        Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols lCase, lSubcase, sMovementNumbers, sMovementTypesValid, sMovementTypesInvalid, sBreakdownCols
                        
        lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1
    End If
   
        
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount", Err.Description
   Resume Next
End Sub

Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount_AccountInfo(ByVal sAccount As String)
    On Error GoTo errhdl
    
    If Setup_x_IsAccountInICMAccountList(sAccount) = True Then
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_ACCOUNT_INFO) = "ICM"
    End If
   
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount_ICM", Err.Description
   Resume Next
End Sub

Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields()
    On Error GoTo errhdl
    
    'Searchfield
    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SEARCHFIELD).NumberFormat = "0"
    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SEARCHFIELD).FormulaR1C1 = "=RC[-6]&""_""&RC[-5]&""_""&RC[-3]&""_""&RC[-4]"
    
    'Range Formula
    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_MovementRange).NumberFormat = "0"
    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_MovementRange).FormulaR1C1 = "=IF(R7C8=""x"",IF(RC[+8]="""","""",RC[+8]),IF(RC[+9]="""","""",RC[+9]))"
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount_FormulaFields", Err.Description
   Resume Next
End Sub


Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols(ByVal lCase As Long, _
        ByVal lSubcase As Long, _
        ByVal sMovementNumbers As String, _
        ByVal sMovementTypesValid As String, _
        ByVal sMovementTypesInvalid As String, _
        ByVal sBreakdownCols As String)
        
    On Error GoTo errhdl
    
    Dim i As Long
    Dim lMaxDataEntryCol As Long
    Dim lMinDataEntryCol As Long
    
    Dim sMovementRange As String
    Dim sMovementType As String
    
    Dim sTempMovementNumber As String
    Dim sTempBreakdownCol As String
    
    Dim bSummCopyAll As Boolean
    Dim bSummCopyValid As Boolean
    Dim bEntryCol As Boolean
    
    Layout_GetMinMaxColIndex_byDatasheet sDatasheet, lMinDataEntryCol, lMaxDataEntryCol

    If sMovementNumbers = "" Then
        'sMovementNumbers = NONE & DELIMITER & "+" & NONE & DELIMITER
        sMovementNumbers = DELIMITER & DELIMITER
    Else
        sMovementNumbers = sMovementNumbers & DELIMITER
    End If
    
    If sBreakdownCols = "" Then
        sBreakdownCols = DELIMITER & DELIMITER
    Else
        sBreakdownCols = sBreakdownCols & DELIMITER
    End If
    
    sMovementRange = ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_RANGE_VISIBLE)
    
    Select Case lCase
    
        Case 1
        
            '@CASE 1: SUMMENKONTO (Summe immer kopieren)
            For i = lMinDataEntryCol To lMaxDataEntryCol
                ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, i).NumberFormat = "#,##0.00"
                ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, i).FormulaR1C1 = Replace(ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER).FormulaR1C1, "IV", GetColLetter2(i))
            Next
            
        Case Else
        
                For i = lMinDataEntryCol To lMaxDataEntryCol
                  'Achtung nur bei g|fffd|ltigen Customs
                  
                  ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, i).NumberFormat = "#,##0.00"
    
                  sTempMovementNumber = ""
                  sTempMovementNumber = Layout_GetMovementNumber_ByDatasheetAndCol(sDatasheet, i)
                  
                  sTempBreakdownCol = ""
                  sTempBreakdownCol = Layout_GetBreakdownCols_ByDatasheetAndCol(sDatasheet, i)
                  
                  If InStr(1, UCase(sMovementNumbers), ";" & UCase(sTempMovementNumber) & ";") > 0 And InStr(1, UCase(sBreakdownCols), ";" & UCase(sTempBreakdownCol) & ";") > 0 Then
                  
                        If lCase = 2 Or (lSubcase = 1 And (lCase = 3 Or lCase = 4 Or lCase = 5)) Then
                        
                            'Combination of Range and Number valid?
                            sMovementType = ""
                            sMovementType = sMovementRange & sTempMovementNumber
                            
                            
                            If InStr(1, sMovementTypesValid, sMovementType) > 0 And (Not (InStr(1, sMovementTypesInvalid, sMovementType)) > 0 Or sMovementType = "") Then
                                'Eingabe
                                
                                Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, i
                            Else
                                'ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, i).Interior.ColorIndex = 45
                                Tool_MakeNODataInputCell sDatasheet, lExcelRowCounter_Datasheet, i
                            End If
                            
                         ElseIf lSubcase = 2 Or lSubcase = 3 Then
                         
                            'Summe kopieren
                            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, i).FormulaR1C1 = Replace(ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER).FormulaR1C1, "IV", GetColLetter2(i))
                        
                        End If
                      
                  Else
                  
                        If lCase = 2 Or (lSubcase = 1 And (lCase = 3 Or lCase = 4 Or lCase = 5)) Then
                            'Keine Eingabe
                            Tool_MakeNODataInputCell sDatasheet, lExcelRowCounter_Datasheet, i
                        End If
                  
                  End If
              Next
              
        End Select
    
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount_DataEntryCols", Err.Description
   Resume Next
End Sub

Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung(ByVal lCase As Long, ByVal lSubcase As Long)
    On Error GoTo errhdl
    
    'Summe von Eingabekonten immer gelb (wenn Aufriss und/oder ICP)
    'Summenkonten und Summe Eingabekonten (s.o.) immer fett
    'Markierung Eingabe YYY (C2 C3 ICP)
    
    Dim lTempLevel As Long

    If lCase = 1 Or _
        (lCase = 3 And lSubcase = 2) Or _
        (lCase = 4 And lSubcase = 2) Or _
        (lCase = 5 And lSubcase = 3) Or _
        (lCase = 5 And lSubcase = 2) Then
    
        lTempLevel = ThisWorkbook.Sheets(sDatasheet_ACC).Cells(lExcelRowCounter_AccList, ACCLIST_COL_INDENTLEVEL)
        
        If lCase = 5 And lSubcase = 2 Then lTempLevel = lTempLevel + 1
    
        If sChartGroup = ACCOUNTS_TOPMEMBER_BALANCE Then
            Select Case lTempLevel
            Case 2
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level3
            Case 3
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level4
            Case 4
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level5
            Case 5
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level6
            Case 6
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level7
            Case 7
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level8
            Case 8
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level9
            Case 9
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level10
            End Select
    
        Else
    
            Select Case lTempLevel
            Case 0
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level3
            Case 1
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level4
            Case 2
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level5
            Case 3
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level6
            Case 4
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level7
            Case 5
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level8
            Case 6
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level9
            Case 7
                Excel_SetRowColor2 lExcelRowCounter_Datasheet, cExcelColour_Level10
            End Select
    
        End If
        
    End If
        
    Select Case lCase
    
        Case 1
        '@CASE 1: SUMMENKONTO
 
           Excel_SetRowBold lExcelRowCounter_Datasheet
           
        Case 2
        '@CASE 2: EINGABEKONTO ohne AUFRISS ohne ICP

            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER
            Excel_BorderTopHairline sDatasheet, lExcelRowCounter_Datasheet
        
        Case 3
        '@CASE 3: EINGABEKONTO ohne AUFRISS mit ICP
        
            If lSubcase = 1 Then
            '@CASE 3a) ICP EINGABE

                Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER

                 Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_ICP
                 Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER
                 Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG
            
            ElseIf lSubcase = 2 Then
            '@CASE 3b) ICP SUMME
                
                Excel_SetRowBold lExcelRowCounter_Datasheet
                Excel_BorderBottomThin sDatasheet, lExcelRowCounter_Datasheet - 1
                Excel_BorderTopHairline sDatasheet, lExcelRowCounter_Datasheet - 2
                Excel_BorderTopHairline sDatasheet, lExcelRowCounter_Datasheet - 1
                Excel_BorderBottomHairline sDatasheet, lExcelRowCounter_Datasheet - 2
              
            
            End If
  
    Case 4
    '@CASE 4: EINGABEKONTO mit AUFRISS ohne ICP
    
        If lSubcase = 1 Then
        '@CASE 4a) AUFRISS EINGABE

            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER
        
        Else
        '@CASE 4b) Eingabekonto SUMME

            Excel_BorderBottomThin sDatasheet, lExcelRowCounter_Datasheet - 1
            
        End If

    
    Case 5
    '@CASE 5: EINGABEKONTO  mit AUFRISS mit ICP
    
        If lSubcase = 1 Then
        '@CASE 5a) ICP EINGABE (Aufriss Eingabe)
        
            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_ICP
            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER
            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG

            Tool_MakeDataInputCell sDatasheet, lExcelRowCounter_Datasheet, TEMP_COL_FOR_FORMULAS_NUMBER
        
        ElseIf lSubcase = 2 Then
        '@CASE 5b) ICP SUMME (AUfriss Eingabe)
        
            Excel_SetRowBold lExcelRowCounter_Datasheet
            Excel_BorderBottomThin sDatasheet, lExcelRowCounter_Datasheet - 1
            Excel_BorderTopHairline sDatasheet, lExcelRowCounter_Datasheet - 2
            Excel_BorderTopHairline sDatasheet, lExcelRowCounter_Datasheet - 1
            Excel_BorderBottomHairline sDatasheet, lExcelRowCounter_Datasheet - 2
          
        
        ElseIf lSubcase = 3 Then
        '@CASE 5c) Eingabekonto SUMME
        
            Excel_BorderBottomDouble sDatasheet, lExcelRowCounter_Datasheet - 1
            
        End If
        
    End Select
    
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount_Formatierung", Err.Description
   Resume Next
End Sub

Private Sub Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions(ByVal lCase As Long, ByVal lSubcase As Long, _
            ByVal sAccount As String, _
            ByVal sMovementRange As String, ByVal sMovementRangeTopmember As String, _
            ByVal sBreakdownRows As String, ByVal sBreakdownRowsTopmember As String, _
            ByVal bIsICP As Boolean)
            
    On Error GoTo errhdl
    
    Dim sTempString As String
    Dim sNormalizedAccount As String
    
    sNormalizedAccount = Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount)
    
    Select Case lCase
    
    Case 1, 2
        '@CASE 1: SUMMENKONTO und
        '@CASE 2: EINGABEKONTO ohne AUFRISS ohne ICP
        
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, False, True)
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, True, False)
    
    Case 3
    '@CASE 3: EINGABEKONTO ohne AUFRISS mit ICP
    
        If lSubcase = 2 Then
            '@CASE 3b) ICP SUMME
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, False, True)
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, True, False)
        Else
            Debug.Print ""
        End If
        
    Case 4
    '@CASE 4: EINGABEKONTO mit AUFRISS ohne ICP
    
        If lSubcase = 1 Then
        '@ CASE 4a) AUFRISS+ICP EINGABE
        
            'Description-German
            Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER, 2
            If CompareStrings(sMovementRange, NONE) = False And CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sTempString & sMovementRange & " / " & sBreakdownRows
            ElseIf CompareStrings(sMovementRange, NONE) = False Then
                sTempString = Setup_x_GetMemberDescription_DaprohRange(sMovementRange, False)
            ElseIf CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sTempString & sBreakdownRows & ": " & SAP_GetMemberDescription(Setup_x_GetBreakdown_ByAccount(sAccount), sBreakdownRows, False, True)
            Else
                sTempString = sMovementRange & ": " & Setup_x_GetMemberDescription_DaprohRange(sMovementRange, False)
            End If
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER) = sTempString
            'Description-English
             Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG, 2
            If CompareStrings(sMovementRange, NONE) = False And CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sMovementRange & "/" & sBreakdownRows
            ElseIf CompareStrings(sMovementRange, NONE) = False Then
                sTempString = Setup_x_GetMemberDescription_DaprohRange(sMovementRange, True)
            ElseIf CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sBreakdownRows & ": " & SAP_GetMemberDescription(Setup_x_GetBreakdown_ByAccount(sAccount), sBreakdownRows, True, False)
            Else
                sTempString = sMovementRange & ": " & Setup_x_GetMemberDescription_DaprohRange(sMovementRange, True)
            End If
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sTempString
            '/Description
        End If
        
        'lSubcase=2 s.u.
    
    Case 5
    '@CASE 5: EINGABEKONTO mit AUFRISS mit ICP
    
        If lSubcase = 2 Then
        '@CASE 2b) ICP TOP (Aufriss Eingabe)
            
            'Description-German
            Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER, 2
            If CompareStrings(sMovementRange, NONE) = False And CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sTempString & sMovementRange & " / " & sBreakdownRows
            ElseIf CompareStrings(sMovementRange, NONE) = False Then
                sTempString = Setup_x_GetMemberDescription_DaprohRange(sMovementRange, False)
            ElseIf CompareStrings(sBreakdownRows, NONE) = False Then
                'sTempString = sTempString & sBreakdownRows & ": " & SAP_GetMemberDescription(DIMENSION_CUSTOM3, sBreakdownRows, False, True)
                sTempString = sTempString & sBreakdownRows & ": " & SAP_GetMemberDescription(Setup_x_GetBreakdown_ByAccount(sAccount), sBreakdownRows, False, True)
            Else
                sTempString = sMovementRange & ": " & Setup_x_GetMemberDescription_DaprohRange(sMovementRange, False)
            End If

            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER) = sTempString
            sTempString = ""
            
            'Description-English
             Excel_SetIndentLevel2 lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG, 2
            If CompareStrings(sMovementRange, NONE) = False And CompareStrings(sBreakdownRows, NONE) = False Then
                sTempString = sTempString & sMovementRange & "/" & sBreakdownRows
            ElseIf CompareStrings(sMovementRange, NONE) = False Then
                sTempString = Setup_x_GetMemberDescription_DaprohRange(sMovementRange, True)
            ElseIf CompareStrings(sBreakdownRows, NONE) = False Then
                'sTempString = sTempString & sBreakdownRows & ": " & SAP_GetMemberDescription(DIMENSION_CUSTOM3, sBreakdownRows, True, False)
                sTempString = sTempString & sBreakdownRows & ": " & SAP_GetMemberDescription(Setup_x_GetBreakdown_ByAccount(sAccount), sBreakdownRows, True, False)
            Else
                sTempString = sMovementRange & ": " & Setup_x_GetMemberDescription_DaprohRange(sMovementRange, True)
            End If
            
            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sTempString
            
            '/Description
            
        End If
        
        'lsubcase=3 s.u.
        
    End Select
    
    If (lCase = 4 And lSubcase = 2) Or (lCase = 5 And lSubcase = 3) Then
    '@CASE 4b und 5c: EINGABEKONTO SUMME (mit Aufriss, mit+ohne ICP)
    
        If CompareStrings(sMovementRangeTopmember, NONE) = False Or CompareStrings(sBreakdownRowsTopmember, NONE) = False Then
            sTempString = ""
'            If CompareStrings(sMovementRangeTopmember, NONE) = False Then
'                sTempString = " [" & "NET" & "]"
'            End If
'            If CompareStrings(sBreakdownRowsTopmember, NONE) = False Then
'                If CompareStrings(sMovementRangeTopmember, NONE) = False Then
'                    sTempString = sTempString & "/"
'                End If
'                sTempString = sTempString & sBreakdownRowsTopmember
'            End If
'            If bIsICP = True Then
'                sTempString = sTempString & "/" & "TOP"
'            End If
            
        Else
            sTempString = ""
        End If
      
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_GER) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, False, True) & sTempString
        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sNormalizedAccount & ":" & SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, True, False) & sTempString

    End If
    
    Exit Sub
errhdl:
   WriteError "Setup_WriteExcel_FromAccountList_Help_HandleAccount_WriteShortDescriptions", Err.Description
   Resume Next
End Sub

'Public Sub Setup_a_STEP_GetAccountList_FromMetadata()
'    On Error GoTo errhdl
'
'    Dim lVBOK As Long
'    Dim i As Long
'    Dim sSet As String
'
'    'XML_LoadMetadata File_Dialog_SingleFile, objXMLMetadata
'    'File_WriteToFile "U:\CC-AR_Projekte\Upload_Tool\SAP\2015_01_Oct\SAP Metadaten +Compare Tool\Metadaten_2014_10_23\test.txt", objXMLMetadata.XML
'
'
'
'    SET1_RunTimeSettings_Schalter_SetOpeningValueModificationWarningActive False
'    SET1_RunTimeSettings_Schalter_SetDatasheetOnChangeInactive True
'
'''**********************************************************************************
'''   'Balance
'''**********************************************************************************
'
'
'    lVBOK = MsgBox("BALANCE" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
'
'    If lVBOK = vbYes Then
'
'        'Balance (Auswahl Set |fffd|ber Detail Accounts Liste)
'        sDatasheet = SHEET_ACCLIST_BALANCE
'        ThisWorkbook.Sheets(sDatasheet).Cells.ClearContents
'        ThisWorkbook.Sheets(sDatasheet).Cells.NumberFormat = "@"
'        sChartGroup = ACCOUNTS_TOPMEMBER_BALANCE
'        sTopmember = ACCOUNTS_TOPMEMBER_BALANCE
'
'        lExcelRowCounter_Datasheet = 1
'        Setup_GetAccountList_FromMetadata_Help_LoopAccounts sTopmember, 0
'
'    End If
'
'''**********************************************************************************
'''    'Income
'''**********************************************************************************
'
'    lVBOK = MsgBox("INCOME" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
'
'    If lVBOK = vbYes Then
'
'        sChartGroup = ACCOUNTS_TOPMEMBER_INCOME
'        lExcelRowCounter_Datasheet = 1
'
'        sDatasheet = SHEET_ACCLIST_INCOME
'        ThisWorkbook.Sheets(sDatasheet).Cells.ClearContents
'        ThisWorkbook.Sheets(sDatasheet).Cells.NumberFormat = "@"
'
'        Dim aIncomeTopAccounts() As String
'        SET2_DimensionSettings_GetIncomeTopAccountsArray aIncomeTopAccounts
'
'        For i = LBound(aIncomeTopAccounts) To UBound(aIncomeTopAccounts)
'            sTopmember = Setup_x_AccountFormat_AddLeftHandZeros(aIncomeTopAccounts(i))
'            If sTopmember <> "" And IsNumeric(Mid(sTopmember, 4, 1)) = True Then  'Achtung hier 4 durch 1 ersetzen
'                Setup_GetAccountList_FromMetadata_Help_LoopAccounts sTopmember, 0
'            End If
'        Next
'
'        Setup_GetAccountList_FromMetadata_Help_HandleAccount "0006500000", 0
'
'    End If
'
'''**********************************************************************************
''    'STATISTICs
'''**********************************************************************************
'
'    sSet = "_SET2"
'
'    lVBOK = MsgBox("STATISTICS" & " (" & sSet & ")" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
'
'    If lVBOK = vbYes Then
'
'        sChartGroup = ACCOUNTS_TOPMEMBER_STATISTICS
'        sDatasheet = SHEET_ACCLIST_STATISTICS
'        ThisWorkbook.Sheets(sDatasheet).Cells.ClearContents
'        ThisWorkbook.Sheets(sDatasheet).Cells.NumberFormat = "@"
'        lExcelRowCounter_Datasheet = 1
'
'        Dim aStatisticTopAccounts() As String
'        SET2_DimensionSettings_GetStatisticTopAccountsArray aStatisticTopAccounts
'
'        For i = LBound(aStatisticTopAccounts) To UBound(aStatisticTopAccounts)
'            sTopmember = aStatisticTopAccounts(i)
'            If sTopmember <> "" And IsNumeric(Mid(sTopmember, 1, 1)) = True Then
'
'                Setup_GetAccountList_FromMetadata_Help_LoopAccounts sTopmember, 0
''               Setup_GetAccountList_FromMetadata_Help_LoopAccounts sTopmember & sSet, 0
'
'            End If
'        Next
'    End If
'
''    lVBOK = MsgBox("Sonderfall TKE" & "     ....    OK?", Title:="Setup from Metadata", Buttons:=vbYesNo)
''
''    If lVBOK = vbYes Then
''
''        sChartGroup = ACCOUNTS_TOPMEMBER_TKE
''        lExcelRowCounter_Datasheet = 1
''
''        sDatasheet = SHEET_ACCLIST_TKE
''        ThisWorkbook.Sheets(sDatasheet).Cells.ClearContents
''        ThisWorkbook.Sheets(sDatasheet).Cells.NumberFormat = "@"
''
''        Setup_GetAccountList_FromMetadata_Help_LoopAccounts ACCOUNTS_TOPMEMBER_TKE, "", 0, ""
''
''    End If
'
''EXT
'
'
'        lExcelRowCounter_Datasheet = 1
'        Setup_GetAccountList_FromMetadata_Help_LoopAccounts sTopmember, 0
'
'
'
'    Exit Sub
'errhdl:
'   WriteError "Setup_a_STEP_GetAccountList_FromMetadata", Err.Description
'   Resume Next
'End Sub

'Private Sub Setup_GetAccountList_FromMetadata_Help_LoopAccounts(ByVal sTopAccount As String, ByVal lLevel As Long)
'On Error GoTo errhdl
'
'    'Reihenfolge der Konten festlegen
'    Dim objNodes As IXMLDOMSelection
'    Dim objNode As IXMLDOMNode
'
'    Dim sAccount As String
'    Dim bXML_IsMemberLeave As Boolean
'
'    bXML_IsMemberLeave = XML_IsMemberLeave(MEMBER_ACCOUNT, sTopAccount)
'
'    If bXML_IsMemberLeave = False Then
'        'Knoten
'        If Not objXMLMetadata Is Nothing Then
'
'            Set objNodes = objXMLMetadata.selectNodes("/bcsmetadata/dimension[@name='" & MEMBER_ACCOUNT & "']/hierarchy/node[@parent='" & sTopAccount & "']/@child")
'
'            If Not objNodes Is Nothing Then
'                 For Each objNode In objNodes
'                    sAccount = ""
'                    sAccount = objNode.Text
'                    Progress sAccount, 2
'
'                    If Setup_x_IsAccountInRedList(sAccount) = False Then
'                        Setup_GetAccountList_FromMetadata_Help_LoopAccounts sAccount, lLevel + 1
'                    End If
'
'                Next
'            End If
'        End If
'        Setup_GetAccountList_FromMetadata_Help_HandleAccount sTopAccount, lLevel
'    Else
'        'Leave
'        Setup_GetAccountList_FromMetadata_Help_HandleAccount sTopAccount, lLevel
'    End If
'
'    Exit Sub
'errhdl:
'   'Progress Error Err.Description
'   WriteError "", Err.Description
'   Resume Next
'End Sub

Private Function Setup_x_AccountFormat_RemoveLeftHandZeros(ByVal sSource As String) As String
    On Error GoTo errhdl
    
    Dim sout As String
    Dim i As Long
    
    sout = ""
    For i = 1 To Len(sSource)
        If Mid(sSource, i, 1) <> "0" Then
            sout = Mid(sSource, i)
            Exit For
        End If
    Next
    Setup_x_AccountFormat_RemoveLeftHandZeros = sout
    
    Exit Function
errhdl:
    WriteError "Setup_x_AccountFormat_RemoveLeftHandZeros", Err.Description
    Resume Next
End Function

Public Function Setup_x_AccountFormat_AddLeftHandZeros(ByVal sSource As String) As String
    On Error GoTo errhdl
    
    Dim sout As String
    Dim i As Long
    
    sout = ""
    If IsNumeric(Mid(sSource, 1, 1)) = True And InStr(1, sSource, "_") <= 0 Then
        For i = 1 To 10 - Len(sSource)
            sout = sout & "0"
        Next
    End If
    sout = sout & sSource

    Setup_x_AccountFormat_AddLeftHandZeros = sout
    
    Exit Function
errhdl:
    WriteError "Setup_x_AccountFormat_AddLeftHandZeros", Err.Description
    Resume Next
End Function

'Private Sub Setup_GetAccountList_FromMetadata_Help_HandleAccount(ByVal sAccount As String, ByVal lLevel As Long)
'
'    Debug.Print "handle account: " & sAccount
'
'    On Error GoTo errhdl
'
'    Dim bXML_IsMemberLeave As Boolean
'
'    Dim bIsICP As Boolean
'    Dim sICP As String
'    Dim lICPCounter As Long
'    Dim lICPUBound As Long
'
'    Dim sMovementNumberTopmember As String
'    Dim sMovementNumbers As String
'    Dim aMovementNumber() As String
'    Dim lMovementNumbers As Long
'
'    Dim sMovementRangeTopmember As String
'    Dim sMovementRanges As String
'    Dim aMovementRange() As String
'    Dim sMovementRange As String
'    Dim lMovementRanges As Long
'
'    Dim sBreakdownRowsTopmember As String
'    Dim sBreakdownRows As String
'    Dim aBreakdownRows() As String
'    Dim lBreakdownRows As Long
'
'    Dim sBreakdownColsTopmember As String
'    Dim aBreakdownCols() As String
'    Dim lBreakdownCols As Long
'
'    Dim sMovementTypes As String
'    Dim sMovementTypesUnvalid As String
'
'    Dim i As Long
'    Dim j As Long
'    Dim k As Long
'
'    If Setup_x_IsAccountInRedList(sAccount) = True Then
'        Exit Sub
'    End If
'
'    If sChartGroup = ACCOUNTS_TOPMEMBER_STATISTICS And CompareStrings(sTopmember, sAccount) = True Then
'        'Statistics Topmember soll nicht noch mal in letzte Zeile geschrieben werden
'        Exit Sub
'    End If
'
'    DoEvents
'
'    Setup_x_GetAccountAttributes sAccount, bIsICP, sICP, bXML_IsMemberLeave, sMovementNumberTopmember, aMovementNumber, sMovementRangeTopmember, aMovementRange, sBreakdownRowsTopmember, aBreakdownRows, sBreakdownColsTopmember, aBreakdownCols, sMovementTypes, sMovementTypesUnvalid
'    Debug.Print sAccount & "_" & sMovementNumberTopmember & "_" & sMovementRangeTopmember & "_" & sBreakdownRowsTopmember & "_" & sICP
'
'    'Column1=Account
'    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_ACCOUNT) = sAccount
'
'    'Column2=Indent/Level
'    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_INDENTLEVEL) = lLevel
'
'    If bXML_IsMemberLeave = True Then
'
'        'Column4=ICP
'        If bIsICP = True Then
'            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_ICP_inROW) = sICP
'        Else
'            'wegen vordefiniert ICP leer
'            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_ICP_inROW) = ICP_NONE
'        End If
'
'        'Column5=Custom1s->MovementNumber (CAO1)
'        If CompareStrings(sMovementNumberTopmember, "") = False Then
'          ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementNumber) = sMovementNumberTopmember
'
'          For lMovementNumbers = LBound(aMovementNumber) To UBound(aMovementNumber)
'              If aMovementNumber(lMovementNumbers) <> "" Then
'                    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementNumber) = ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementNumber) & ";" & aMovementNumber(lMovementNumbers)
'              End If
'          Next
'        End If
'
'        'Column6=Custom2s->MovementRange (RAO1)
'        If CompareStrings(sMovementRangeTopmember, "") = False Then
'            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementRange) = sMovementRangeTopmember
'
'            For lMovementRanges = LBound(aMovementRange) To UBound(aMovementRange)
'                If aMovementRange(lMovementRanges) <> "" Then
'                    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementRange) = ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementRange) & ";" & aMovementRange(lMovementRanges)
'                End If
'            Next
'        End If
'
'        'Column7=Breakdown_Rows
'        If CompareStrings(sBreakdownRowsTopmember, "") = False Then
'            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownRows) = sBreakdownRowsTopmember
'
'            For lBreakdownRows = LBound(aBreakdownRows) To UBound(aBreakdownRows)
'                If aBreakdownRows(lBreakdownRows) <> "" Then
'                    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownRows) = ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownRows) & ";" & aBreakdownRows(lBreakdownRows)
'                End If
'            Next
'        End If
'
'        'Column8=Breakdown_Cols
'        If CompareStrings(sBreakdownColsTopmember, "") = False Then
'            ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownCols) = sBreakdownColsTopmember
'
'            For lBreakdownCols = LBound(aBreakdownCols) To UBound(aBreakdownCols)
'                If aBreakdownCols(lBreakdownCols) <> "" Then
'                    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownCols) = ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_BreakdownCols) & ";" & aBreakdownCols(lBreakdownCols)
'                End If
'            Next
'        End If
'    End If
'
'
'    'Column10=Leave
'    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_ACCisLEAVE) = bXML_IsMemberLeave
'
'    'Column11=Statistic Topmember
'    If sChartGroup = ACCOUNTS_TOPMEMBER_STATISTICS Then
'        ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_STATISTICTopMEMBER) = sTopmember
'    End If
'
'    'Column12=MovementTypes
'    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementType_VALID) = sMovementTypes
'
'    'Column13=MoventTypes unvalid
'    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_MovementType_INVALID) = sMovementTypesUnvalid
'
''    'Column 15+16 Descriptions
''    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_Description_DE) = SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, bEnglish:=False, bGerman:=True)
''    ThisWorkbook.Sheets(sDatasheet).Cells(lExcelRowCounter_Datasheet, ACCLIST_COL_Description_EN) = SAP_GetMemberDescription(MEMBER_ACCOUNT, sAccount, bEnglish:=True, bGerman:=False)
'
'
'    lExcelRowCounter_Datasheet = lExcelRowCounter_Datasheet + 1
'
'    Exit Sub
'errhdl:
'   'Progress Error Err.Description
'   WriteError "Handle Account", Err.Description
'   Resume Next
'End Sub

'Public Sub Setup_x_GetAccountAttributes(ByVal sAccount As String, _
'                                ByRef bIsICP As Boolean, _
'                                ByRef sICP As String, _
'                                ByRef bXML_IsMemberLeave As Boolean, _
'                                ByRef sMovementNumberTopmember As String, _
'                                ByRef aMovementNumber() As String, _
'                                ByRef sMovementRangeTopmember As String, _
'                                ByRef aMovementRange() As String, _
'                                ByRef sBreakdownRowsTopmember As String, _
'                                ByRef aBreakdownRows() As String, _
'                                ByRef sBreakdownColsTopmember As String, _
'                                ByRef aBreakdownCols() As String, _
'                                ByRef sMovementTypes As String, _
'                                ByRef sMovementTypesUnvalid As String)
'
'    Dim sBreakdownCategory As String
'    Dim bMaxSel As Boolean
'    Dim sBreakdownAttribute As String
'    Dim objNode As IXMLDOMNode
'    Dim objNodes As IXMLDOMSelection
'    Dim i As Long
'    Dim j As Long
'
'    Dim sMovementTypeTemp As String
'    Dim sRangeTemp As String
'    Dim sNumberTemp As String
'
'
'    Dim sMovementRanges As String
'    Dim sMovementNumbers As String
'
'
'    Dim sBreakdown1 As String
'    Dim sBreakdown2 As String
'
'    sBreakdown1 = BREAKDOWN_NONE
'    sBreakdown2 = BREAKDOWN_NONE
'
'    'Is Member Leave
'    bXML_IsMemberLeave = XML_IsMemberLeave(MEMBER_ACCOUNT, sAccount)
'    sBreakdownCategory = XML_GetMemberAttribute(MEMBER_ACCOUNT, sAccount, "ITGRP")
'
'    'Partner Company
'    Set objNode = objXMLMetadata.selectSingleNode("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/1FB/PCOMPANY" & "']")
'
'    If objNode Is Nothing Then
'        bIsICP = False
'        sICP = ICP_NONE
'    Else
'        bIsICP = True
'        sICP = ICP_TOP
'    End If
'
'    '______________________________________________________________________________
'    'MovementTypes, Ranges and Numbers
'
'    bMaxSel = False
'
'    Set objNode = objXMLMetadata.selectSingleNode("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/1FB/MOVE_TYPE" & "']")
'    If objNode Is Nothing Then
'        sMovementNumbers = ""
'        sMovementRanges = ""
'        sMovementTypes = ";;"
'        sMovementTypesUnvalid = ""
'    Else
'        For i = 0 To objNode.Attributes.Length - 1
'            If objNode.Attributes.Item(i).nodeName = "maxsel" Then
'                If objNode.Attributes.Item(i).NodeValue = "X" Then
'                    bMaxSel = True
'                End If
'            ElseIf objNode.Attributes.Item(i).nodeName = "breakdown" Then
'                sBreakdownAttribute = objNode.Attributes.Item(i).NodeValue
'            End If
'        Next
'    End If
'
'    If bMaxSel = True Then
'
'        'MOVEMENT TYPE
'        Set objNodes = objXMLMetadata.selectNodes("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/1FB/MOVE_TYPE" & "']/members/member")
'
'        sMovementRanges = ";"
'        sMovementNumbers = ";"
'
'        For i = 0 To objNodes.Length - 1
'
'            sMovementTypeTemp = ""
'            sMovementTypeTemp = objNodes.Item(i).Attributes.Item(0).Text
'
'            sMovementTypes = sMovementTypes & DELIMITER & sMovementTypeTemp
'
'            sRangeTemp = ""
'            sRangeTemp = Mid(sMovementTypeTemp, 1, 1)
'
'            If InStr(1, sMovementRanges, DELIMITER & sRangeTemp & DELIMITER) <= 0 Then
'                sMovementRanges = sMovementRanges & sRangeTemp & DELIMITER
'                AppendToArray aMovementRange, sRangeTemp
'            End If
'
'            sNumberTemp = Mid(sMovementTypeTemp, 2, 2)
'            If InStr(1, sMovementNumbers, DELIMITER & sNumberTemp & DELIMITER) <= 0 Then
'                sMovementNumbers = sMovementNumbers & sNumberTemp & DELIMITER
'                AppendToArray aMovementNumber, sNumberTemp
'            End If
'
'        Next
'
'        'Liste der ung|fffd|ltigen Kombinationen aus Range und Number schreiben
'        For i = LBound(aMovementRange) To UBound(aMovementRange)
'            For j = LBound(aMovementNumber) To UBound(aMovementNumber)
'                If aMovementNumber(j) <> "" And aMovementRange(i) <> "" Then
'                    If InStr(1, sMovementTypes & DELIMITER, DELIMITER & aMovementRange(i) & aMovementNumber(j) & DELIMITER) <= 0 Then
'                        sMovementTypesUnvalid = sMovementTypesUnvalid & DELIMITER & aMovementRange(i) & aMovementNumber(j)
'                    End If
'                End If
'            Next
'        Next
'
'        sMovementNumberTopmember = sBreakdownCategory
'        sMovementRangeTopmember = sBreakdownCategory
'
'    End If
'
'    '______________________________________________________________________________
'    'BREAKDOWNs (1 oder 2)
'
'    'Check if Breakdown
'    If CompareStrings("RT", Mid(sAccount, 1, 2)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("FEX", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("DUE", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("EXT", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown1 = BREAKDOWN_ROWS
'    End If
'
'    If InStr(1, sAccount, "ADD") > 0 Then
'        sBreakdown1 = BREAKDOWN_COLS
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    'ACHTUNG: Siehe auch Setup_x_GetBreakdown_ByAccount
'
'    'Breakdown1
'    bMaxSel = False
'
'    If sBreakdown1 <> BREAKDOWN_NONE Then
'        Set objNode = objXMLMetadata.selectSingleNode("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/B224/S_GT_BRK1" & "']")
'        If objNode Is Nothing Then
'
'        Else
'            For i = 0 To objNode.Attributes.Length - 1
'                If objNode.Attributes.Item(i).nodeName = "maxsel" Then
'                    If objNode.Attributes.Item(i).NodeValue = "X" Then
'                        bMaxSel = True
'                    End If
'                ElseIf objNode.Attributes.Item(i).nodeName = "breakdown" Then
'                    sBreakdownAttribute = objNode.Attributes.Item(i).NodeValue
'                End If
'            Next
'        End If
'
'        If bMaxSel = True Then
'
'            'BREAKDOWN 1
'
'            Set objNodes = objXMLMetadata.selectNodes("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/B224/S_GT_BRK1" & "']/members/member")
'
'            For i = 0 To objNodes.Length - 1
'
'                If sBreakdown1 = BREAKDOWN_COLS Then
'                    AppendToArray aBreakdownCols, objNodes.Item(i).Attributes.Item(0).Text
'                    sBreakdownColsTopmember = "-"
'                Else
'                    AppendToArray aBreakdownRows, objNodes.Item(i).Attributes.Item(0).Text
'                    sBreakdownRowsTopmember = "-"
'                End If
'
'            Next
'
'        End If
'    End If
'
'    'Breakdown2
'    bMaxSel = False
'
'    If sBreakdown2 <> BREAKDOWN_NONE Then
'        Set objNode = objXMLMetadata.selectSingleNode("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/B224/S_GT_BRK2" & "']")
'        If objNode Is Nothing Then
'
'        Else
'            For i = 0 To objNode.Attributes.Length - 1
'                If objNode.Attributes.Item(i).nodeName = "maxsel" Then
'                    If objNode.Attributes.Item(i).NodeValue = "X" Then
'                        bMaxSel = True
'                    End If
'                ElseIf objNode.Attributes.Item(i).nodeName = "breakdown" Then
'                    sBreakdownAttribute = objNode.Attributes.Item(i).NodeValue
'                End If
'            Next
'        End If
'
'        If bMaxSel = True Then
'
'            'BREAKDOWN 2
'            '    "/bcsmetadata/dimension[@name='/B224/S_GT_BRK2']"
'            Set objNodes = objXMLMetadata.selectNodes("/bcsmetadata/itgrps/itgrp[@name='" & sBreakdownCategory & "']/dimension[@name='" & "/B224/S_GT_BRK2" & "']/members/member")
'
'            For i = 0 To objNodes.Length - 1
'                If sBreakdown2 = BREAKDOWN_COLS Then
'                    AppendToArray aBreakdownCols, objNodes.Item(i).Attributes.Item(0).Text
'                    sBreakdownColsTopmember = "-"
'                Else
'
'                    AppendToArray aBreakdownRows, objNodes.Item(i).Attributes.Item(0).Text
'                    sBreakdownRowsTopmember = "-"
'                End If
'            Next
'
'        End If
'    End If
'
'End Sub

'Public Function Setup_x_IsAccountInRedList(ByVal sAccount As String) As Boolean
'    Dim i As Long
'    Dim bResult As Boolean
'
'    bResult = False
'    If InStr(1, UCase(SET2_DimensionSettings_GetRedAccountList), DELIMITER & Trim(UCase(Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount))) & DELIMITER) > 0 Then
'        bResult = True
'    End If
'
'    Setup_x_IsAccountInRedList = bResult
'End Function

Public Function Setup_x_GetBreakdown_ByAccount(ByVal sAccount As String) As String
    On Error GoTo errhdl
    Dim sMyBreakdown As String

    sMyBreakdown = ""
    If CompareStrings("RT", Mid(sAccount, 1, 2)) = True Or _
       CompareStrings("FEX", Mid(sAccount, 1, 3)) = True Or _
       CompareStrings("DUE", Mid(sAccount, 1, 3)) = True Then
        sMyBreakdown = "/B224/S_GT_BRK2"
    ElseIf CompareStrings("EXT", Mid(sAccount, 1, 3)) = True Then
        sMyBreakdown = "/B224/S_GT_BRK1"

    End If
    
'        'Check if Breakdown
'    If CompareStrings("RT", Mid(sAccount, 1, 2)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("FEX", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("DUE", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If
'
'    If CompareStrings("EXT", Mid(sAccount, 1, 3)) = True Then
'        sBreakdown1 = BREAKDOWN_ROWS
'    End If
'
'    If InStr(1, sAccount, "ADD") > 0 Then
'        sBreakdown1 = BREAKDOWN_COLS
'        sBreakdown2 = BREAKDOWN_ROWS
'    End If

    Setup_x_GetBreakdown_ByAccount = sMyBreakdown
    Exit Function
errhdl:
   WriteError "Setup_x_GetBreakdown_ByAccount", Err.Description
   Resume Next
End Function

Public Function Setup_x_IsAccountInICMAccountList(ByVal sAccount As String) As Boolean
    Dim i As Long
    Dim bResult As Boolean

    bResult = False
    If InStr(1, UCase(SET2_DimensionSettings_GetICMAccountList), DELIMITER & Trim(UCase(Setup_x_AccountFormat_RemoveLeftHandZeros(sAccount))) & DELIMITER) > 0 Then
        bResult = True
    End If

    Setup_x_IsAccountInICMAccountList = bResult
End Function

Public Function Setup_x_GetMemberDescription_DaprohRange(ByVal sMovementRange As String, Optional ByVal bEnglish As Boolean = True) As String
    On Error GoTo errhdl
    Dim sDescription As String
    
    Select Case Trim(sMovementRange)
    Case "1"
        If bEnglish = True Then
            sDescription = "Gross value APC"
        Else
            sDescription = "Bruttowert AHK"
        End If
    Case "2"
        If bEnglish = True Then
            sDescription = "Sched.depreciat.PLD"
        Else
            sDescription = "Planm.Abschreib.PAB"
        End If
    Case "3"
        If bEnglish = True Then
            sDescription = "Impairment IMP"
        Else
            sDescription = "Impairments IMP"
        End If
    Case "4"
        If bEnglish = True Then
            sDescription = "Equity EQU"
        Else
            sDescription = "Eigenkapital EK"
        End If
    Case "5"
        If bEnglish = True Then
            sDescription = "Provisions PRV"
        Else
            sDescription = "R|fffd|ckstellungen RST"
        End If
    Case "6"
        If bEnglish = True Then
            sDescription = "Taxes (OCI) - ETX "
        Else
            sDescription = "Steuern (OCI) - ETX"
        End If
     Case "7"
        If bEnglish = True Then
'            sDescription = "Allowances ECL"
            sDescription = "Allowances expected credit loss (ECL)"
        Else
'            sDescription = "Wertberichtigung WBG"
            sDescription = "Wertberichtigung allg. Kreditrisiko (ECL)"
        End If
    Case "8"
        If bEnglish = True Then
            sDescription = "GrossVal.oth.ass/lia"
        Else
            sDescription = "Brutto sonst.VW/Verb"
        End If
    Case "9"
        If bEnglish = True Then
'            sDescription = "Allowances IAL"
            sDescription = "Allowances individual allowances (IAL)"
        Else
'            sDescription = "Wertberichtigung EWB"
            sDescription = "Wertberichtigung Einzelwertberichtigung (EWB)"
        End If

    End Select
    
    Setup_x_GetMemberDescription_DaprohRange = sDescription
    
    Exit Function
errhdl:
   WriteError "Setup_x_GetMemberDescription_DaprohRange", Err.Description
   Resume Next
End Function






Attribute VB_Name = "mdl_SetupFromMeta_3"

Option Explicit

'###################################################
' Preparation
'
' Alles was beim initialen Erstellen des Upload Tools hilfreich sein kann,
' kann danach gel|fffd|scht werden
'
'
'
'
' Setup_FillLayout: Layout Tabelle per Makro f|fffd|llen (testen!)
'
'###################################################

Public Sub Setup_a_STEP_CreateTestdata()
    'Selected Sheets from Options and All Cols
    
'    XML_LoadMetadata File_Dialog_SingleFile, objXMLMetadata
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    Setup_x_LoopCells_InDatasheets bSetTestdata:=True, bUpdate:=True, bLoopAllSheets:=True, bLoopAllColsInSheet:=True
    
    ImportExportClear_Post1
    ImportExportClear_Post2
End Sub

Public Sub Setup_a_STEP_CheckDescriptions()
    'XML_LoadMetadata File_Dialog_SingleFile, objXMLMetadata
    'Selected Sheets from Options and All Cols
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    
    Setup_x_LoopCells_InDatasheets bCheckDescriptions:=True, bUpdate:=True, bLoopAllSheets:=True, bLoopAllColsInSheet:=True
    
    ImportExportClear_Post1
    ImportExportClear_Post2
End Sub

Public Sub Setup_a_STEP_CheckMovementTypes()
'    XML_LoadMetadata File_Dialog_SingleFile, objXMLMetadata
    'Selected Sheets from Options and All Cols
    MsgBox "does not work without xml, please check first!"
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    Setup_x_LoopCells_InDatasheets bCheckMovementTypes:=True, bUpdate:=False, bLoopAllSheets:=True, bLoopAllColsInSheet:=True
    
    ImportExportClear_Post1
    ImportExportClear_Post2
End Sub

Public Sub Setup_a_STEP_NoInput()
    'Selected Sheets from Options and All Cols
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    Setup_x_LoopCells_InDatasheets bNoInput:=True, bUpdate:=True, bLoopAllSheets:=False, bLoopAllColsInSheet:=True
    
    ImportExportClear_Post1
    ImportExportClear_Post2
End Sub

Public Sub Setup_a_STEP_MakeInput()
    'Selected Sheets from Options and All Cols
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    Setup_x_LoopCells_InDatasheets bMakeInput:=True, bUpdate:=True, bLoopAllSheets:=False, bLoopAllColsInSheet:=True
    
    ImportExportClear_Post1
    ImportExportClear_Post2
End Sub

Public Sub Setup_x_LoopCells_InDatasheets(Optional ByVal bNoInput As Boolean = False, _
                                                           Optional ByVal bMakeInput As Boolean = False, _
                                                           Optional ByVal bSetTestdata As Boolean = False, _
                                                           Optional ByVal bCheckDescriptions As Boolean = False, _
                                                           Optional ByVal bCheckMovementTypes As Boolean = False, _
                                                           Optional ByVal bLoopAllSheets As Boolean = False, _
                                                           Optional ByVal bLoopAllColsInSheet As Boolean = False, _
                                                           Optional ByVal bUpdate As Boolean = False)
              
    On Error GoTo errhdl
    Dim i As Long

    Dim aDatasheets() As String
    Dim lDatasheetCounter As Long
    Dim sDatasheet As String
    Dim lDatasheet_Row As Long
    Dim lDatasheet_Col As Long

    Dim aColsToLoop() As Long
    Dim aPathsbyCols() As String
    Dim lColsToLoop As Long
    
    'TestData
    Dim lTestDataCounter As Long
    lTestDataCounter = 0
    
    'Check Description
    Dim sAccount As String
    Dim sDescDEInSheet As String
    Dim sDescENInSheet As String
    Dim sDescDEInMetadata As String
    Dim sDescENInMetadata As String
    Dim sDescDEandENInSheetPostfix As String
    
    'Check Else
    Dim bIsICP As Boolean
    Dim sICP As String
    Dim bXML_IsMemberLeave As Boolean
    Dim sMovementNumberTopmember As String
    Dim aMovementNumber() As String
    Dim sMovementRangeTopmember As String
    Dim aMovementRange() As String
    Dim sBreakdownRowsTopmember As String
    Dim aBreakdownRows() As String
    Dim sBreakdownColsTopmember As String
    Dim aBreakdownCols() As String
        
    Dim sMovementTypes As String
    Dim sMovementTypesUnvalid As String
    
    Dim sMovementNumberInSheet As String
    Dim sMovementRangeInSheet As String
    
    Dim sLogFile As String
    sLogFile = File_GetNameAndPath_ApplicationLOG

    'DATASHEETS - SELECTED OR ALL
    If bLoopAllSheets = False Then
        SET1_RunTimeSettings_SetCallingMakro CALLINGMAKRO_OPTIONEXPORT
        SET1_RunTimeSettings_GetSELECTED_DatasheetsArray aDatasheets
    Else
        Layout_GetAllDatasheets aDatasheets
    End If
    
    'Step 1: Loop Datasheets
    For lDatasheetCounter = LBound(aDatasheets) To UBound(aDatasheets)
        DoEvents
        sDatasheet = aDatasheets(lDatasheetCounter)
        
        'Step2: Datasheet<>""
        If sDatasheet <> "" Then

            'COLS - Selected or ALL
            If bLoopAllColsInSheet = False Then
                Layout_GetDatasheetCols_Selected sDatasheet, aColsToLoop, aPathsbyCols
            Else
                Layout_GetDatasheetCols_All sDatasheet, aColsToLoop
            End If
         
           'Step 3: Loop Datasheet Rows
           For lDatasheet_Row = DATASHEET_ROW_FIRSTDATASET To FOR_MAX
                DoEvents
                
                Debug.Print ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, 2)
                If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, 2) = "ENDOFFILE" Or ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, 2) = "" Then
                    Exit For
                End If
         
                'Step 4: Loop Cols
                For lColsToLoop = LBound(aColsToLoop) To UBound(aColsToLoop)
                    'DoEvents

                    
                    'Step 5: Col<> 0
                    If aColsToLoop(lColsToLoop) <> 0 Then
                        lDatasheet_Col = aColsToLoop(lColsToLoop)
                        Debug.Print lDatasheet_Row & "/" & lDatasheet_Col
                        DoEvents

            
'***************************************************************************
                        'Step6:
                        'TESTDATA
                        If bSetTestdata = True Then
                            If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = False Then
                            
                                '*** Chm: Special Case Orange Cells: Keine |fffd|nderungen in Restatement erlaubt
                                If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY Or _
                                   ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.Color = 13164796 Then
                           
                                    lTestDataCounter = lTestDataCounter + 1
                                    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Interior.Color = 13164796 Then
                                        ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col).Locked = True
                                    End If
                                    
                                    DoEvents
                                    
                                    'Einschub
'                                    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col) = "Excelworkaround=USER_FORMULAS!O" & lTestDataCounter  ' & ", " & sDatasheet & ", " & GetColLetter2(lDatasheet_Col) & lDatasheet_Row
'
'
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 1) = ThisWorkbook.Sheets(sDatasheet).Cells(2, lDatasheet_Col)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 2) = ThisWorkbook.Sheets(sDatasheet).Cells(3, lDatasheet_Col)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 3) = ThisWorkbook.Sheets(sDatasheet).Cells(4, lDatasheet_Col)
'
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 4) = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 5) = XML_GetMemberDescription(MEMBER_ACCOUNT, Setup_x_AccountFormat_AddLeftHandZeros(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)), False, True)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 6) = XML_GetMemberDescription(MEMBER_ACCOUNT, Setup_x_AccountFormat_AddLeftHandZeros(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)), True, False)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 7) = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_MovementRange)
'
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 8) = Setup_x_GetMemberDescription_DaprohRange(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_MovementRange), False)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 9) = Setup_x_GetMemberDescription_DaprohRange(ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_MovementRange), True)
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 10) = ThisWorkbook.Sheets(sDatasheet).Cells(6, lDatasheet_Col)
'
'                                    ThisWorkbook.Sheets("USER_FORMULAS").Cells(lTestDataCounter, 11) = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP)
                                    '/Einschub
                                    


                                    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, lDatasheet_Col) = "10" '                                    lTestDataCounter ' & ", " & sDatasheet & ", " & GetColLetter2(lDatasheet_Col) & lDatasheet_Row
                                    If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP).Interior.ColorIndex = EXCEL_COLOUR_DATAENTRY Then
                                        If bUpdate = True Then
                                            If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row + 1, DATASHEET_COL_ICP) = "" Then
                                                If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) = "" Then
                                                    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) = "150000-01" 'lTestDataCounter
                                                End If
                                            Else
                                                If ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) = "" Then
                                                    ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ICP) = "220920-01"
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        '/Testdata
                        
                        'NOINPUT und MakeInput
                        If bNoInput = True Then
                            If CheckData_IsLeave(sDatasheet, lDatasheet_Row) = True Then
                                Setup_x_NOInput_ByDatasheetRowAndCol sDatasheet, lDatasheet_Row, lDatasheet_Col, bUpdate
                            End If
                        End If
                        
                        If bMakeInput = True Then
                            If CheckData_IsLeave(sDatasheet, lDatasheet_Row) = True Then
                                Setup_x_MakeInput_ByDatasheetRowAndCol sDatasheet, lDatasheet_Row, lDatasheet_Col, bUpdate
                            End If
                        End If
                        '/NoInput und MakeInput
                        
                        'Check Descriptions
                        If bCheckDescriptions = True And aColsToLoop(lColsToLoop) = 16 Then

                            sAccount = ""
                            sDescDEInMetadata = ""
                            sDescDEInSheet = ""
                            sDescENInMetadata = ""
                            sDescENInSheet = ""
                            
                            sAccount = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)
                            sDescDEInSheet = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER)
                            sDescENInSheet = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG)
                            'sDescDEInMetadata = XML_GetMemberDescription(MEMBER_ACCOUNT, Setup_x_AccountFormat_AddLeftHandZeros(sAccount), bEnglish:=False, bGerman:=True)
                            'sDescENInMetadata = XML_GetMemberDescription(MEMBER_ACCOUNT, Setup_x_AccountFormat_AddLeftHandZeros(sAccount), bEnglish:=True, bGerman:=False)
                            
                            'Chm: Description aus Sheet nicht Metadata
                            Dim lFirstOcc As Long
                            lFirstOcc = -1
                            Debug.Print sDatasheet & ":" & sAccount
                            lFirstOcc = GetFirstOccurence("Description", 1, sAccount)
                            If lFirstOcc > 0 Then
                                sDescDEInMetadata = ThisWorkbook.Sheets("Description").Cells(lFirstOcc, 2)
                                sDescENInMetadata = ThisWorkbook.Sheets("Description").Cells(lFirstOcc, 3)
                            Else
                                sDescDEInMetadata = ""
                                sDescENInMetadata = ""
                            End If
                           
                           sDescDEandENInSheetPostfix = ""
                           
'                           'Chm: Description aus Sheet nicht Metadata
'                           If sDescDEInMetadata <> "" And sDescENInMetadata <> "" Then
                           
                                If InStr(1, sDescDEInSheet, sAccount) > 0 Then
    
'                                    If InStr(1, sDescDEInSheet, " [NET]") > 0 Then
'                                        sDescDEandENInSheetPostfix = " [NET]"
'                                    End If
'
'                                    If InStr(1, sDescDEInSheet, " [TOP]") > 0 Then
'                                        sDescDEandENInSheetPostfix = " [TOP]"
'                                        sDescDEandENInSheetPostfix = ""
'                                    End If
'
'                                    If InStr(1, sDescDEInSheet, " [NET/TOP]") > 0 Then
'                                        sDescDEandENInSheetPostfix = " [NET/TOP]"
'                                        sDescDEandENInSheetPostfix = " [NET]"
'                                    End If
'
'                                   If InStr(1, sDescDEInSheet, " [NET") > 0 Or _
'                                        InStr(1, Trim(sDescDEInSheet), "/NET") > 0 Then
'
'                                        If InStr(1, sDescDEInSheet, "NET]") > 0 Or _
'                                            InStr(1, Trim(sDescDEInSheet), "NET/") > 0 Then
'
'                                            sDescDEandENInSheetPostfix = " [NET]"
'
'                                        End If
'                                   End If
'                                   If sDescDEInSheet <> sAccount & ":" & sDescDEInMetadata & sDescDEandENInSheetPostfix Then

                                    If CompareStrings(sDescDEInSheet, sAccount & ":" & sDescDEInMetadata) = False Then
                                        
                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "DE" & DELIMITER & sAccount & ":" & sDescDEInMetadata & sDescDEandENInSheetPostfix
                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "DE" & DELIMITER & sDescDEInSheet & " (alt: " & sDatasheet & ":" & lDatasheet_Row & "/" & DATASHEET_COL_SHORTDESCRIPTION_GER & ")"
                                        If bUpdate = True Then
                                            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER) = sAccount & ":" & sDescDEInMetadata & sDescDEandENInSheetPostfix
                                        End If
                                    End If
                                    
'                                    If sDescENInSheet <> sAccount & ":" & sDescENInMetadata & sDescDEandENInSheetPostfix Then
                                    If CompareStrings(sDescENInSheet, sAccount & ":" & sDescENInMetadata) = False Then
                                        
                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "EN" & DELIMITER & sAccount & ":" & sDescENInMetadata & sDescDEandENInSheetPostfix
                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "EN" & DELIMITER & sDescENInSheet & " (alt: " & sDatasheet & ":" & lDatasheet_Row & "/" & DATASHEET_COL_SHORTDESCRIPTION_ENG & ")"
                                        If bUpdate = True Then
                                            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG) = sAccount & ":" & sDescENInMetadata & sDescDEandENInSheetPostfix
                                        End If
                                    End If
                                    
                                    
                                Else
                                
                                'Account is not in name

'                                    If InStr(1, sDescDEInSheet, " [TOP]") > 0 And InStr(1, sDescENInSheet, " [TOP]") > 0 Then
'
'                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "DE" & DELIMITER & Replace(sDescDEInSheet, " [TOP]", "")
'                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "DE" & DELIMITER & sDescDEInSheet & " (alt: " & sDatasheet & ":" & lDatasheet_Row & "/" & DATASHEET_COL_SHORTDESCRIPTION_GER & ")"
'                                        If bUpdate = True Then
'                                            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_GER) = Replace(sDescDEInSheet, " [TOP]", "")
'                                        End If
'
'                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "EN" & DELIMITER & Replace(sDescDEInSheet, " [TOP]", "")
'                                        File_AppendToFile_Log sLogFile, "DESCRIPTIION" & DELIMITER & "EN" & DELIMITER & sDescENInSheet & " (alt: " & sDatasheet & ":" & lDatasheet_Row & "/" & DATASHEET_COL_SHORTDESCRIPTION_ENG & ")"
'                                        If bUpdate = True Then
'                                            ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_SHORTDESCRIPTION_ENG) = Replace(sDescENInSheet, " [TOP]", "")
'                                        End If
'
'                                    End If
                                    
                                    
                                End If
                                
'                            End If
                            
                        End If
                        
                        If bCheckMovementTypes = True Then
'                            sAccount = ""
'                            sAccount = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_ACCOUNT)
'                             Setup_x_GetAccountAttributes Setup_x_AccountFormat_AddLeftHandZeros(sAccount), _
'                                bIsICP, _
'                                sICP, _
'                                bXML_IsMemberLeave, _
'                                sMovementNumberTopmember, _
'                                aMovementNumber(), _
'                                sMovementRangeTopmember, _
'                                aMovementRange(), _
'                                sBreakdownRowsTopmember, _
'                                aBreakdownRows(), _
'                                sBreakdownColsTopmember, _
'                                aBreakdownCols(), _
'                                sMovementTypes, _
'                                sMovementTypesUnvalid
'
'                                sMovementRangeInSheet = ThisWorkbook.Sheets(sDatasheet).Cells(lDatasheet_Row, DATASHEET_COL_MovementRange)
'                                sMovementNumberInSheet = ThisWorkbook.Sheets(sDatasheet).Cells(DATASHEET_ROW_MovementNumber, lDatasheet_Col)
                                
                                If CheckData_IsLeave(sDatasheet, lDatasheet_Row) = True Then
                                    If InStr(1, sMovementTypes, DELIMITER & sMovementRangeInSheet & sMovementNumberInSheet & DELIMITER) > 0 Then
                                        
                                        'Check if Data Input
                                        If Tool_IsDataInputCell(sDatasheet, lDatasheet_Row, lDatasheet_Col) = False Then
                                            If bUpdate = True Then
                                                Tool_MakeDataInputCell sDatasheet, lDatasheet_Row, lDatasheet_Col
                                            End If
                                            File_AppendToFile_Log sLogFile, "MOVEMENTTYPE" & DELIMITER & "MakeInput" & DELIMITER & sAccount & DELIMITER & sMovementRangeInSheet & sMovementNumberInSheet
                                        End If
                                        
                                    Else
                                        
                                        If Tool_IsNODataInputCell(sDatasheet, lDatasheet_Row, lDatasheet_Col) = False Then
                                           If bUpdate = True Then
                                                Tool_MakeNODataInputCell sDatasheet, lDatasheet_Row, lDatasheet_Col
                                           End If
                                           File_AppendToFile_Log sLogFile, "MOVEMENTTYPE" & DELIMITER & "MakeNoInput" & DELIMITER & sAccount & DELIMITER & sMovementRangeInSheet & sMovementNumberInSheet
                                        End If
                                
                                    End If
                                End If
                            End If
                        
                        '/Step6
        '**************************************************************************
                            
                    End If '/5 Col <> ""
                Next '/Step 4: Loop Cols
            Next '/Step 3: Loop Datasheet Rows
        End If '/Step 2
     Next  '/Step 1: Loop Datasheets

Exit Sub

errhdl:
    WriteError "Setup_x_LoopCells_InDatasheets", Err.Description
    Resume Next
End Sub
Public Sub Setup_x_MakeInput_ByDatasheetRowAndCol(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long, ByVal bUpdate As Boolean)
    On Error GoTo errhdl
    Dim sLog As String
    Dim i As Long

    Dim sDatasheet_Version As String
    Dim sDatasheet_Year As String
    Dim sDatasheet_Period As String
    Dim sDatasheet_Account As String
    Dim sDatasheet_ICP As String
    Dim sDatasheet_ICP_Description As String
    Dim sDatasheet_MovementNumber As String
    Dim sDatasheet_MovementRange As String
    Dim sDatasheet_Breakdown_Rows As String
    Dim sDatasheet_BreakdownCols As String
    Dim lDatasheet_Value As Variant
    Dim sDatasheet_View As String
    Dim sDatasheet_Value As String
    Dim sDatasheet_Entity As String
    
    'MakeInput
    Dim sMakeInput_Scenario As String
    Dim sMakeInput_Year As String
    Dim sMakeInput_Period As String
    Dim sMakeInput_Sheet As String
    Dim sMakeInput_Account As String
    Dim sMakeInput_ICP As String
    Dim sMakeInput_Custom1 As String
    Dim sMakeInput_MovementRange As String
    Dim sMakeInput_Breakdown_Rows As String
    Dim sMakeInput_Breakdown_Cols As String

    Dim MaxCellMakeInput As Long
    Dim MinCellMakeInput As Long
    
    Dim sLogFileMakeInput As String
    
    sLogFileMakeInput = File_GetNameAndPath_ApplicationLOG
    MinCellMakeInput = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(2, 1)
    MaxCellMakeInput = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(2, 3)
           
    Export_ReadDataFromDatasheet sDatasheet, lDatasheet_Row, lDatasheet_Col, sDatasheet_Version, sDatasheet_Year, sDatasheet_Period, sDatasheet_Account, sDatasheet_MovementRange, sDatasheet_MovementNumber, sDatasheet_ICP, sDatasheet_Breakdown_Rows, sDatasheet_BreakdownCols, lDatasheet_Value

    'Loop MakeInput Sheet
    For i = MinCellMakeInput To MaxCellMakeInput
        sMakeInput_Scenario = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 1)
        sMakeInput_Year = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 2)
        sMakeInput_Period = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 3)
        sMakeInput_Sheet = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 4)
        sMakeInput_Account = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 5)
        sMakeInput_Custom1 = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 6)
        sMakeInput_MovementRange = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 7)
        sMakeInput_Breakdown_Rows = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 8)
        sMakeInput_Breakdown_Cols = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 9)
        sMakeInput_ICP = ThisWorkbook.Sheets(SHEET_MakeINPUT).Cells(i, 10)
        
        If sMakeInput_Scenario & sMakeInput_Year & sMakeInput_Period & sMakeInput_Sheet & sMakeInput_Account & sMakeInput_Custom1 & sMakeInput_MovementRange & sMakeInput_Breakdown_Rows & sMakeInput_Breakdown_Cols & sMakeInput_ICP <> "" Then
                                            
            If CompareStrings(sMakeInput_Scenario, sDatasheet_Version) = True Or CompareStrings(sMakeInput_Scenario, ALL) = True Then
                If CompareStrings(sMakeInput_Year, sDatasheet_Year) = True Or CompareStrings(sMakeInput_Year, ALL) = True Then
                    If CompareStrings(sMakeInput_Period, sDatasheet_Period) = True Or CompareStrings(sMakeInput_Period, ALL) = True Then
                        
                        If CompareStrings(sMakeInput_Sheet, sDatasheet) = True Or CompareStrings(sMakeInput_Sheet, ALL) = True Then
                            If Setup_x_CompareAccounts(sMakeInput_Account, sDatasheet_Account) = True Or CompareStrings(sMakeInput_Account, ALL) = True Then
                                If CompareStrings(sMakeInput_Custom1, sDatasheet_MovementNumber) = True Or CompareStrings(sMakeInput_Custom1, ALL) = True Then
                                    If CompareStrings(sMakeInput_MovementRange, sDatasheet_MovementRange) = True Or CompareStrings(sMakeInput_MovementRange, ALL) = True Then
                                        If CompareStrings(sMakeInput_Breakdown_Rows, sDatasheet_Breakdown_Rows) = True Or CompareStrings(sMakeInput_Breakdown_Rows, ALL) = True Then
                                            If CompareStrings(sMakeInput_Breakdown_Cols, sDatasheet_BreakdownCols) = True Or CompareStrings(sMakeInput_Breakdown_Cols, ALL) = True Then
                                             
                                                If (CompareStrings(sMakeInput_ICP, "[ICP Base]") = True And (CompareStrings(ICP_NONE, sDatasheet_ICP) = True Or CompareStrings("", sDatasheet_ICP) = True)) _
                                                    Or CompareStrings(sMakeInput_ICP, sDatasheet_ICP) = True Or _
                                                    sMakeInput_ICP = "" Then
                                                
                                                    'sperren und loggen
                                                    sLog = "MAKEINPUT" & DELIMITER & sMakeInput_Scenario & ";" & sMakeInput_Year & ";" & sMakeInput_Period & ";" & sMakeInput_Sheet & ";" & sMakeInput_Account & ";" & sMakeInput_Custom1 & ";" & sMakeInput_MovementRange & ";" & sMakeInput_Breakdown_Rows & ";" & sMakeInput_Breakdown_Cols & ";" & sMakeInput_ICP & ";=;" & sDatasheet & ";" & lDatasheet_Row & ";" & GetColLetter2(lDatasheet_Col) & "(" & lDatasheet_Col & ")"
                                                    File_AppendToFile_old sLogFileMakeInput, sLog
                                                    
                                                    If bUpdate = True Then
                                                        Tool_MakeDataInputCell sDatasheet, lDatasheet_Row, lDatasheet_Col
                                                    End If
                                                
                                                    i = FOR_MAX
                                                
                                                End If
                                                
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        
                    End If
                End If
            End If
            
        End If
    
    Next

Exit Sub

errhdl:
    WriteError "Setup_x_MakeInput_ByDatasheetRowAndCol", Err.Description
    Resume Next
End Sub

Public Function Setup_x_CompareAccounts(ByVal sAccountPattern As String, ByVal sAccount As String) As Boolean
    On Error GoTo errhdl
    
    Dim bEqual As Boolean
    Dim lPosition As Long
    
    bEqual = False
    If CompareStrings(sAccount, sAccountPattern) = True Then
        bEqual = True
    Else
        If InStr(1, sAccountPattern, "*") > 0 Then
            lPosition = -1
            lPosition = InStr(1, sAccountPattern, "*")
            
            If Len(sAccount) >= lPosition Then
                If CompareStrings(Mid(sAccountPattern, 1, lPosition - 1), Mid(sAccount, 1, lPosition - 1)) = True Then
                    Setup_x_CompareAccounts = True
                    Exit Function
                Else
                    bEqual = False
                End If
            End If
        End If
    End If
    
    Setup_x_CompareAccounts = bEqual
    Exit Function
errhdl:
    Debug.Print Err.Description
    Resume Next
End Function


Public Sub Setup_x_NOInput_ByDatasheetRowAndCol(ByVal sDatasheet As String, ByVal lDatasheet_Row As Long, ByVal lDatasheet_Col As Long, ByVal bUpdate As Boolean)
    On Error GoTo errhdl
    Dim sLog As String
    Dim i As Long

    Dim sDatasheet_Version As String
    Dim sDatasheet_Year As String
    Dim sDatasheet_Period As String
    Dim sDatasheet_Account As String
    Dim sDatasheet_ICP As String
    Dim sDatasheet_ICP_Description As String
    Dim sDatasheet_MovementNumber As String
    Dim sDatasheet_MovementRange As String
    Dim sDatasheet_Breakdown_Rows As String
    Dim sDatasheet_Breakdown_Cols As String
    Dim lDatasheet_Value As Variant
    Dim sDatasheet_View As String
    Dim sDatasheet_Value As String
    Dim sDatasheet_Entity As String
    
    'NoInput
    Dim sNoInput_Scenario As String
    Dim sNoInput_Year As String
    Dim sNoInput_Period As String
    Dim sNoInput_Sheet As String
    Dim sNoInput_Account As String
    Dim sNoInput_ICP As String
    Dim sNoInput_MovementNumber As String
    Dim sNoInput_MovementRange As String
    Dim sNoInput_Breakdown_Rows As String
    Dim sNoInput_Breakdown_Cols As String

    Dim MaxCellNoInput As Long
    Dim MinCellNoInput As Long
    
    Dim sLogFileNoInput As String
    
    sLogFileNoInput = File_GetNameAndPath_ApplicationLOG
    MinCellNoInput = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(2, 1)
    MaxCellNoInput = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(2, 3)
           
    Export_ReadDataFromDatasheet sDatasheet, lDatasheet_Row, lDatasheet_Col, sDatasheet_Version, sDatasheet_Year, sDatasheet_Period, sDatasheet_Account, sDatasheet_MovementRange, sDatasheet_MovementNumber, sDatasheet_ICP, sDatasheet_Breakdown_Rows, sDatasheet_Breakdown_Cols, lDatasheet_Value

    'Loop NoInput Sheet
    For i = MinCellNoInput To MaxCellNoInput
        sNoInput_Scenario = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 1)
        sNoInput_Year = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 2)
        sNoInput_Period = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 3)
        sNoInput_Sheet = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 4)
        sNoInput_Account = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 5)
        sNoInput_MovementNumber = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 6)
        sNoInput_MovementRange = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 7)
        sNoInput_Breakdown_Rows = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 8)
        sNoInput_Breakdown_Cols = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 9)
        sNoInput_ICP = ThisWorkbook.Sheets(SHEET_NoINPUT).Cells(i, 10)
        
        If sNoInput_Scenario & sNoInput_Year & sNoInput_Period & sNoInput_Sheet & sNoInput_Account & sNoInput_MovementNumber & sNoInput_MovementRange & sNoInput_Breakdown_Rows & sNoInput_Breakdown_Cols & sNoInput_ICP <> "" Then
                                            
            If CompareStrings(sNoInput_Scenario, sDatasheet_Version) = True Or CompareStrings(sNoInput_Scenario, "") = True Then
                If CompareStrings(sNoInput_Year, sDatasheet_Year) = True Or CompareStrings(sNoInput_Year, "") = True Then
                    If CompareStrings(sNoInput_Period, sDatasheet_Period) = True Or CompareStrings(sNoInput_Period, "") = True Then
                        
                        If CompareStrings(sNoInput_Sheet, sDatasheet) = True Or CompareStrings(sNoInput_Sheet, "") = True Then
                            If Setup_x_CompareAccounts(sNoInput_Account, sDatasheet_Account) = True Or CompareStrings(sNoInput_Account, "") = True Then
                                If CompareStrings(sNoInput_MovementNumber, sDatasheet_MovementNumber) = True Or CompareStrings(sNoInput_MovementNumber, "") = True Then
                                    If CompareStrings(sNoInput_MovementRange, sDatasheet_MovementRange) = True Or CompareStrings(sNoInput_MovementRange, "") = True Then
                                        If CompareStrings(sNoInput_Breakdown_Rows, sDatasheet_Breakdown_Rows) = True Or CompareStrings(sNoInput_Breakdown_Rows, "") = True Then
                                            If CompareStrings(sNoInput_Breakdown_Cols, sDatasheet_Breakdown_Cols) = True Or CompareStrings(sNoInput_Breakdown_Cols, "") = True Then
                                             
                                                If (CompareStrings(sNoInput_ICP, "[ICP Base]") = True And (CompareStrings(ICP_NONE, sDatasheet_ICP) = True Or CompareStrings("", sDatasheet_ICP) = True)) _
                                                    Or CompareStrings(sNoInput_ICP, sDatasheet_ICP) = True Or _
                                                    sNoInput_ICP = "" Then
                                                
                                                    'sperren und loggen
                                                    sLog = "NOINPUT" & sNoInput_Scenario & ";" & sNoInput_Year & ";" & sNoInput_Period & ";" & sNoInput_Sheet & ";" & sNoInput_Account & ";" & sNoInput_MovementNumber & ";" & sNoInput_MovementRange & ";" & sNoInput_Breakdown_Rows & ";" & sNoInput_Breakdown_Cols & ";" & sNoInput_ICP & ";=;" & sDatasheet & ";" & lDatasheet_Row & ";" & GetColLetter2(lDatasheet_Col) & "(" & lDatasheet_Col & ")"
                                                    File_AppendToFile_old sLogFileNoInput, sLog
                                                    
                                                    If bUpdate = True Then
                                                        Tool_MakeNODataInputCell sDatasheet, lDatasheet_Row, lDatasheet_Col
                                                    End If
                                                
                                                    i = FOR_MAX
                                                
                                                End If
                                                
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        
                    End If
                End If
            End If
            
        End If
    
    Next

Exit Sub

errhdl:
    WriteError "Setup_NOInput_ByDatasheetRowAndCol", Err.Description
    Resume Next
End Sub


'------------------------------------------------------------------------------------------------------------
'### Cell References ###
'------------------------------------------------------------------------------------------------------------

'Zellreferenzen werden hier automatisch eingef|fffd|gt:

'Checker_Preparation Zielkonto und Quellkonten eingeben
'Row und Col Zielkonto wird ermittelt
'Verweis pro Quellkonto wird ermittelt
'Gesamtformel pro Zielkonto wird ermittelt
'Gesamtformel pro Zielkonto wird geschrieben

'Voraussetzung: Spalte BV:=B1& "_"& C1 & "_" & WENN(D1="...";"";D1) & "_"  &E1

'(ICP=... -> ICP leer, d.h. wenn kein ICP angegeben wird werden alle Konten ohne ICP oder Konten mit vordef. ICP '...' gefunden


Sub Setup_a_STEP_CellRefs_Vorbereitung()
    On Error GoTo errhdl

    'Addressierung der Scenarion (14 Perioden m|fffd|glich)
    '12 + (lScenarios - 1) * 2
    '12 + (lScenarios - 1) * 2 + 1
    '54 + (lScenarios - 1) * 2
    '54 + (lScenarios - 1) * 2 + 1
    
    SET1_RunTimeSettings_SetAction ACTION_IMPORT
    
    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    Dim lNofPeriods As Long
    Dim aScenario() As String
    Dim aYear() As String
    Dim aPeriod() As String
            
    Dim i As Long
    
    Dim lScenarios As Long
    Dim lMaxScenario As Long
    Dim lMinScenario As Long
    
    Dim sVersion1 As String
    Dim sVersion2 As String
    Dim sYear1 As String
    Dim sYear2 As String
    Dim sPeriod1 As String
    Dim sPeriod2 As String

    Dim sSheet As String
    Dim lRow As Long
    Dim lCol As Long
    
    Dim sRef As String
    Dim MinCellRefRow As Long
    Dim MaxCellRefRow As Long
    
    MaxCellRefRow = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(2, 3)
    MinCellRefRow = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(2, 1)
    
    ImportExportClear_Pre2
    
    lNofPeriods = SET2_DimensionSettings_GetNofPeriodsInSheet
    SET2_DimensionSettings_GetVersionYearAndPeriodArrays_AllPeriods aScenario, aYear, aPeriod
    
    'Loop Rows (First Loop)
    For i = MinCellRefRow To MaxCellRefRow

        DoEvents
        Debug.Print i
        
        'Scenario, Year und Period leer, links und rechts
        If ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 1) = "" And _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 2) = "" And _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 3) = "" And _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 43) = "" And _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 44) = "" And _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 45) = "" Then

                'alle Planperioden
                lMinScenario = 2
                lMaxScenario = lNofPeriods + 1

        Else
            'Scenario, Year, Periode in Formel
            lMinScenario = 1
            lMaxScenario = 1
        End If


        'Loop Scenarios
        For lScenarios = lMinScenario To lMaxScenario

            sVersion1 = ""
            sYear1 = ""
            sPeriod1 = ""
            sVersion2 = ""
            sYear2 = ""
            sPeriod2 = ""
            
            Select Case lScenarios
            Case 1
            
                sVersion1 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 1)
                sYear1 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 2)
                sPeriod1 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 3)

                sVersion2 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 43)
                sYear2 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 44)
                sPeriod2 = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 45)
            
            Case Else
                
                sVersion1 = aScenario(lScenarios - 1)
                sYear1 = aYear(lScenarios - 1)
                sPeriod1 = aPeriod(lScenarios - 1)
                
                sVersion2 = sVersion1
                sYear2 = sYear1
                sPeriod2 = sPeriod1
            
            End Select
             

            'Get Row and Coll for Cell Reference
            Setup_CellRef_Help_GetRowAndCol ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 4), _
            sVersion1, _
            sYear1, _
            sPeriod1, _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 5), _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 6), _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 7), _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 8), _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 9), _
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 10), _
            lRow, _
            lCol

            'Write Row and Coll for Cell Reference to Sheet
            If lRow <> 0 And lCol <> 0 Then
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2).Value = lRow
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2 + 1).Value = lCol
            End If

            'Get and Write Cell Reference (Rows) to Checker
            ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2).Value = _
                Setup_CellRef_Help_GetCellReference(ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 46), _
                sVersion2, _
                sYear2, _
                sPeriod2, _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 47), _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 48), _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 49), _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 50), _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 51), _
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 52))


        Next

    Next
        
    'Second Loop
    sRef = ""
    For lScenarios = lMinScenario To lMaxScenario
    
        For i = MinCellRefRow To MaxCellRefRow
        
            DoEvents
            Debug.Print i

            'Ziel=""
            If CompareStrings(ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 5), "") = True Then
                Debug.Print ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 53).Formula & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2).Formula
                sRef = sRef & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 53).Formula & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2).Formula
            Else
                sRef = sRef & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 53).Formula & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2).Formula
                ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2 + 1).Value = "'=" & sRef
    
                sRef = ""
            End If
            
        Next
        
    Next
        

    
    ImportExportClear_Post1
    ImportExportClear_Post2

    Exit Sub

errhdl:
    WriteError "Preparation_CellReferences1", Err.Description
    Resume Next
End Sub

Sub Setup_a_STEP_CellRefs_SchreibenInExcel()
    On Error GoTo errhdl
        
    Dim i As Long
    Dim j As Long

    Dim sSheet As String
    Dim lRow As Long
    Dim lCol As Long
    
    Dim sRef As String
    
    Dim MinCellRefRow As Long
    Dim MaxCellRefRow As Long
    
    Dim lScenarios As Long
    Dim lNofPeriods As Long
    
    lNofPeriods = SET2_DimensionSettings_GetNofPeriodsInSheet
    
    MaxCellRefRow = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(2, 3)
    MinCellRefRow = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(2, 1)
    
    SET1_RunTimeSettings_SetAction ACTION_IMPORT    'Bei Action Export werden nicht alle Bl|fffd|tter aufgeklappt

    ImportExportClear_Pre1
    ImportExportClear_Pre2
    
    'MsgBox "NofPeriods + 1 weiter testen!"
    For lScenarios = 1 To lNofPeriods + 1
        sRef = ""
        For i = MinCellRefRow To MaxCellRefRow
        DoEvents
      
            'Ziel=""
             If CompareStrings(ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 5), "") = True Then
               '...
             Else
                '...
                
                'Write Cell Reference to Datasheet
                If ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2) <> "" And ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2 + 1) <> "" Then
                    
                    If ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2 + 1).Value <> "" Then
                        
                        sSheet = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 4)
                        lRow = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2).Value
                        lCol = ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 12 + (lScenarios - 1) * 2 + 1).Value
                        Debug.Print ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2 + 1).Value
                        
                        ThisWorkbook.Sheets(sSheet).Cells(lRow, lCol).Value = "ExcelWorkaround" & ThisWorkbook.Sheets(SHEET_CELLREFs).Cells(i, 54 + (lScenarios - 1) * 2 + 1).Value
                        Tool_MakeNODataInputCell sSheet, lRow, lCol
                        'ThisWorkbook.Sheets(sSheet).Cells(lRow, lCol).Interior.ColorIndex = 7
                    
                    End If
                
                End If
            End If
        Next
    Next
    
    ImportExportClear_Post1
    ImportExportClear_Post2
    
    Exit Sub

errhdl:
    WriteError "Preparation_CellReferences2", Err.Description
    Resume Next
End Sub

Private Function Setup_CellRef_Help_GetCellReference(ByVal sWorksheet As String, _
                            ByVal sVersion As String, _
                            ByVal sYear As String, _
                            ByVal sPeriod As String, _
                            ByVal sAccount As String, _
                            ByVal sMovementNumber As String, _
                            ByVal sMovementRange As String, _
                            ByVal sBreakdownRows As String, _
                            ByVal sBreakdownCols As String, _
                            ByVal sICP As String) As String
On Error Resume Next
    'Funktion gibt das erste Vorkommen eines Strings in der angegebenen Spalte des angegebenen Blatts zur|fffd|ck
    
    Dim oFindRange As Range
    Dim lRow As Integer
    
    Dim sSearchString As String
    Dim sCellRef As String
    Dim sCol As String
    Dim sICPToFind As String
    
    sSearchString = ""
    sCellRef = ""
    sCol = ""
    
    If sICP = ICP_BASE Then
        sICPToFind = ""
    Else
        sICPToFind = sICP
    End If
     
    '1. Suche immer
    If CompareStrings(sMovementRange, NONE) = True And CompareStrings(sBreakdownRows, NONE) = True And CompareStrings(sICPToFind, ICP_NONE) = True Then
        sSearchString = Trim(sAccount)
    Else
        sSearchString = Trim(sAccount) & "_" & Trim(sMovementRange) & "_" & Trim(sBreakdownRows) & "_" & sICPToFind
    End If
    
    Set oFindRange = ThisWorkbook.Worksheets(sWorksheet).Columns("H:H").Find(Trim(sSearchString), LookIn:=xlValues, LookAt:=xlWhole)
                    
    If Err.Number <> 0 Then
        Err.Clear
        Set oFindRange = Nothing
    End If
    
    On Error GoTo 0
    
    lRow = 0
    If Not oFindRange Is Nothing Then
        lRow = oFindRange.row
    End If
    
    If lRow > 0 Then
        sCol = GetColLetter2(Layout_GetColIndex_ByDatasheet_AndOtherParameters(sWorksheet, sVersion, sYear, sPeriod, sMovementNumber, sBreakdownCols))
        
        If sCol <> "" Then
            sCellRef = "" & sWorksheet & "!" & sCol & lRow
        End If
    End If
    
    '2.Suche Sonderfall ICP=Base und noch keine CellRef gefunden
    If sICP = ICP_BASE And lRow <= 0 Then
        
        sICPToFind = ICP_NONE
        
        sSearchString = Trim(sAccount) & "_" & Trim(sMovementRange) & "_" & Trim(sBreakdownRows) & "_" & sICPToFind
        
        Set oFindRange = ThisWorkbook.Worksheets(sWorksheet).Columns("H:H").Find(Trim(sSearchString), LookIn:=xlValues, LookAt:=xlWhole)
                        
        If Err.Number <> 0 Then
            Err.Clear
            Set oFindRange = Nothing
        End If
        
        On Error GoTo 0
        
        lRow = 0
        If Not oFindRange Is Nothing Then
            lRow = oFindRange.row
        End If
        
        If lRow > 0 Then
            sCol = GetColLetter2(Layout_GetColIndex_ByDatasheet_AndOtherParameters(sWorksheet, sVersion, sYear, sPeriod, sMovementNumber, sBreakdownCols))
            
            If sCol <> "" Then
                sCellRef = "" & sWorksheet & "!" & sCol & lRow
            End If
        End If
    End If
    
    Setup_CellRef_Help_GetCellReference = sCellRef
Exit Function

errhdl:
    WriteError "Setup_CellRef_Help_GetCellReference", Err.Description
    Resume Next
End Function

Private Function Setup_CellRef_Help_GetRowAndCol(ByVal sWorksheet As String, _
                            ByVal sVersion As String, _
                            ByVal sYear As String, _
                            ByVal sPeriod As String, _
                            ByVal sAccount As String, _
                            ByVal sMovementNumber As String, _
                            ByVal sMovementRange As String, _
                            ByVal sBreakdownRows As String, _
                            ByVal sBreakdownCols As String, _
                            ByVal sICP As String, _
                            ByRef lRow As Long, _
                            ByRef lCol As Long)
    On Error Resume Next
    
    Dim oFindRange As Range
    Dim sSearchString As String
    Dim sCellRef As String
    Dim sICPToFind As String
    
    sSearchString = ""
    sCellRef = ""
    lCol = 0
    
    If sICP = ICP_BASE Then
        'Erstmal ICP=leer suchen
        sICPToFind = ""
    Else
         sICPToFind = sICP
    End If
    
    '1. Suche immer
    sSearchString = Trim(sAccount) & "_" & Trim(sMovementRange) & "_" & Trim(sBreakdownRows) & "_" & sICPToFind

    Set oFindRange = ThisWorkbook.Worksheets(sWorksheet).Columns("H:H").Find(Trim(sSearchString), LookIn:=xlValues, LookAt:=xlWhole)
                    
    If Err.Number <> 0 Then
        Err.Clear
        Set oFindRange = Nothing
    End If
    
    On Error GoTo 0
    
    lRow = 0
    If Not oFindRange Is Nothing Then
        lRow = oFindRange.row
    End If
    
    If lRow > 0 Then
        lCol = Layout_GetColIndex_ByDatasheet_AndOtherParameters(sWorksheet, sVersion, sYear, sPeriod, sMovementNumber, sBreakdownCols)
    End If
    
    '2. Suche Sonderfall ICP=Base
    If sICP = ICP_BASE And lRow <= 0 Then
        'ICP BASE (Suche nach ICP=leer nichts gefunden, jetzt Suche nach ICP=[ICP None])
        
        sICPToFind = ICP_NONE
        
        sSearchString = Trim(sAccount) & "_" & Trim(sMovementRange) & "_" & Trim(sBreakdownRows) & "_" & sICPToFind

        Set oFindRange = ThisWorkbook.Worksheets(sWorksheet).Columns("H:H").Find(Trim(sSearchString), LookIn:=xlValues, LookAt:=xlWhole)
                        
        If Err.Number <> 0 Then
            Err.Clear
            Set oFindRange = Nothing
        End If
        
        On Error GoTo 0
        
        lRow = 0
        If Not oFindRange Is Nothing Then
            lRow = oFindRange.row
        End If
        
        If lRow > 0 Then
            lCol = Layout_GetColIndex_ByDatasheet_AndOtherParameters(sWorksheet, sVersion, sYear, sPeriod, sMovementNumber, sBreakdownCols)
        End If
    End If

Exit Function

errhdl:
    WriteError "Setup_CellRef_Help_GetRowAndCol", Err.Description
    Resume Next
End Function















' InQuest injected base64 decoded content
' x)br
' &F(!
' bq:)
' *^r&
' izwS
' l(^rB
' bzWB
' izwH
' *'K)
' l(^rB
' Z+a"jh
' *^r&
' Szj@q

INQUEST-PP=macro
