Attribute VB_Name = "ADOConnection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Adatbazis kapcsolat letrehozasaert es lezarasaert felelos osztaly.
'
' @remarks  Reference needed: Microsoft ActiveX Data Objects X.X Library
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
'@Folder("Database")
'@PredeclaredId

''
' Osztaly mezok
'
' @param Connection     Adatbazis kapcsolat (ADODB.Connetion object)
' @param LastError      Hibauzenet
' @param Error          Hiba statusz: igaz, ha hiba tortent
Private Type TFields
    Connection  As ADODB.Connection
    LastError   As String
    Error       As Boolean
End Type
Private this    As TFields


'==================================================================================================================================================
'   PROPERTIES
'==================================================================================================================================================
 
Public Property Get Self() As ADOConnection
    Set Self = Me
End Property
 
''
' Kiolvassa az aktiv kapcsolatot.
'
' @return               aktiv kapcsolat
Public Property Get Connection() As ADODB.Connection
    Set Connection = this.Connection
End Property

''
' Beallitja az akt|fffd|v kapcsolatot.
'
' @param Value           akt|fffd|v kapcsolat
Public Property Set Connection(ByVal Value As ADODB.Connection)
    Set this.Connection = Value
End Property

''
' Kiolvassa a hibauzenetet.
'
' @return               hibauzenet szovege
Public Property Get LastError() As String
    LastError = this.LastError
End Property

''
' Beallitja a hibauzenetet.
'
' @param Value              hibauzenet szovege
Public Property Let LastError(ByVal Value As String)
    this.LastError = Value
End Property

''
' Kiolvassa a hiba statuszat.
'
' @return               hiba statusza (igaz ha hiba tortent)
Public Property Get Error() As Boolean
    Error = this.Error
End Property

''
' Beallitja a hiba statuszat.
'
' @param Value              hiba statusza (igaz/hamis)
Public Property Let Error(ByVal Value As Boolean)
    this.Error = Value
End Property

'==================================================================================================================================================
'   CLASS EVENTS
'==================================================================================================================================================

''
' Osztaly konstruktor. Letrehozza az adatbazis kapcsolatot, vagy hibat dob.
'
' @param CONNECTION_STRING  connection string
' @return                   osztaly instancia
Public Function Create(ByVal CONNECTION_STRING As String) As ADOConnection
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New ADOConnection
        Set .Connection = New ADODB.Connection
        OpenAdoConnection .Connection, CONNECTION_STRING, Error_, LastError_
        .Error = Error_
        .LastError = LastError_
        Set Create = .Self
    End With
End Function

''
' Osztaly destruktor. Lezarja az aktiv kapcsolatot.
Private Sub Class_Terminate()
    'close connection
    CloseAdoConnection
End Sub

'==================================================================================================================================================
'   METHODS
'==================================================================================================================================================
 
''
' Letrehozza az adatbazis kapcsolatot. Ha hiba tortent, hibauzenetet general.
'
' @param Connection         kapcsolat objektum
' @param CONNECTION_STRING  connection string
' @param Error_             hiba statusz (callback)
' @param LastError_         hibauzenet (callback)
Private Sub OpenAdoConnection(ByRef Conn As ADODB.Connection, ByVal CONNECTION_STRING As String, _
                              Optional ByRef Error_ As Boolean, Optional ByRef LastError_ As String)
    On Error GoTo AdoError
 
    Error_ = False
 
    '   Connection object
    Conn.Open CONNECTION_STRING
    Debug.Print Now & "  Connection state: " & Conn.State
 
CleanExit:
    Exit Sub
AdoError:
    Error_ = True
    Dim strErr As String

    ' VB |fffd|ltal gener|fffd|lt hiba|fffd|zenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API |fffd|ltal gener|fffd|lt hiba|fffd|zenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = Conn.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    LastError_ = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' Lezarja az aktiv kapcsolatot.
Private Sub CloseAdoConnection()
 
    If Not this.Connection Is Nothing Then
        If this.Connection.State = adStateOpen Then this.Connection.Close
        Debug.Print Now & "  Connection state: " & this.Connection.State
    End If
    Set this.Connection = Nothing
 
End Sub

''
' Vegrehajt egy SQL parancsot
'
' @param SQL_String     SQL parancs
Public Sub ExecuteSqlCommand(ByVal SQL_String As String)

    On Error GoTo AdoError
    
    With this.Connection
        Dim CurrentCommandTimeout As Long
        CurrentCommandTimeout = .CommandTimeout
        .CommandTimeout = 5
        
        .BeginTrans
        .Execute SQL_String, , adCmdText + adExecuteNoRecords + adAsyncExecute
        Dim hook As Date: hook = Now
        Do
            If Not CBool(.State And adStateExecuting) Then
                .CommitTrans
                Exit Do
            ElseIf Now > hook + TimeValue("0:00:05") Then
                .Cancel
                .RollbackTrans
                this.Error = True
                this.LastError = "Id|fffd|t|fffd|ll|fffd|p|fffd|s"
                Exit Do
            Else
                Application.Wait (Now + TimeValue("0:00:01"))
            End If
        Loop
    End With
    
'        Do Until .State = 0
'            If Now > hook + TimeValue("0:00:05") Then
'                this.Error = True
'                this.LastError = "Id|fffd|t|fffd|ll|fffd|p|fffd|s"
'                Exit Do
'            End If
'        Loop
    
    
    
'    Dim cmd As ADODB.Command
'    Set cmd = New ADODB.Command
'    With cmd
'        Set .ActiveConnection = this.Connection
'        .CommandType = adCmdText
'        .CommandText = SQL_String
'        .Execute
'        Do Until .State = 0 'ha elobb kilepunk, mint ahogy a cmd lezarul, akkor kifagy
'        Loop
'    End With

CleanExit:
    this.Connection.CommandTimeout = CurrentCommandTimeout
    Exit Sub
AdoError:
    this.Connection.Cancel
    this.Connection.RollbackTrans
    this.Error = True
    Dim strErr As String

    ' VB |fffd|ltal gener|fffd|lt hiba|fffd|zenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API |fffd|ltal gener|fffd|lt hiba|fffd|zenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = this.Connection.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    this.LastError = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' Ellenorzi, letezik-e a megadott tabla az adatbazisban
'
' @param TableName      keresett tabla neve
' @return               true/false
Public Function TableExists(ByVal TableName As String) As Boolean
'Excel eseteben TableName-et $-al kel megadni
    Dim rsSchema As ADODB.Recordset
    Set rsSchema = this.Connection.OpenSchema(adSchemaColumns, _
                        Array(Empty, Empty, TableName, Empty))
    TableExists = Not (rsSchema.BOF And rsSchema.EOF)
    rsSchema.Close
    Set rsSchema = Nothing
End Function

''
' Ellenorzi, letezik-e a megadott mezo a megadott tablaban
'
' @param TableName      tabla neve
' @param FieldName      keresett mezo neve
' @return               true/false
Public Function FieldExists(ByVal TableName As String, ByVal FieldName As String) As Boolean
'Excel eseteben TableName-et $-al kel megadni
    Dim rsSchema As ADODB.Recordset
    Set rsSchema = this.Connection.OpenSchema(adSchemaColumns, _
                        Array(Empty, Empty, TableName, FieldName))
    FieldExists = Not (rsSchema.BOF And rsSchema.EOF)
    rsSchema.Close
    Set rsSchema = Nothing
End Function

Attribute VB_Name = "AdoRecordset"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Recordset letrehozasaert es lezarasaert felelos osztaly.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
'@Folder("Database")
'@PredeclaredId

''
' Osztaly mezok
'
' @param Connection     Aktiv adatbazis kapcsolat (ADODB.Connetion object)
' @param Recordset      A lekerdezes eredmenyet tarolo Recordset (ADODB.Recordset object)
' @param LastError      Hibauzenet
' @param Error          Hiba statusz: igaz, ha hiba tortent
Private Type TAdoRecordset
    Connection As ADODB.Connection
    Recordset  As ADODB.Recordset
    LastError  As String
    Error      As Boolean
End Type
Private this As TAdoRecordset

Public Property Get Self() As AdoRecordset
    Set Self = Me
End Property

''
' Kiolvassa az aktiv kapcsolatot.
'
' @return               aktiv kapcsolat
Public Property Get Connection() As ADODB.Connection
    Set Connection = this.Connection
End Property

''
' Beallitja az akt|fffd|v kapcsolatot.
'
' @param Value          akt|fffd|v kapcsolat
Public Property Set Connection(ByRef Value As ADODB.Connection)
    Set this.Connection = Value
End Property

''
' Kiolvassa a recorset-et.
'
' @return               recordset
Public Property Get Recordset() As ADODB.Recordset
    Set Recordset = this.Recordset
End Property

''
' Beallitja a recordset-et.
'
' @param Value          recordset
Public Property Set Recordset(ByRef Value As ADODB.Recordset)
    Set this.Recordset = Value
End Property

''
' Kiolvassa a hibauzenetet.
'
' @return               hibauzenet szovege
Public Property Get LastError() As String
    LastError = this.LastError
End Property

''
' Beallitja a hibauzenetet.
'
' @param Value              hibauzenet szovege
Public Property Let LastError(ByVal Value As String)
    this.LastError = Value
End Property

''
' Kiolvassa a hiba statuszat.
'
' @return               hiba statusza (igaz ha hiba tortent)
Public Property Get Error() As Boolean
    Error = this.Error
End Property

''
' Beallitja a hiba statuszat.
'
' @param Value              hiba statusza (igaz/hamis)
Public Property Let Error(ByVal Value As Boolean)
    this.Error = Value
End Property

''
' Osztaly konstruktor. Vegrehajt egy SQL parancsot es eltarolja az eredmenyet recordset-kent, vagy hibat dob.
'
' @param Connection     aktiv adatbazis kapcsolat
' @param SQL_String     vegrehajtando SQL parancs
' @return               osztaly instancia
Public Function SQLtoRecordset(ByRef Conn As ADODB.Connection, ByVal SQL_String As String) As AdoRecordset
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New AdoRecordset
        If Not Conn Is Nothing Then
            If Conn.State = adStateOpen Then
                Set .Recordset = New ADODB.Recordset
                Set .Recordset.ActiveConnection = Conn
                If Not SQL_String = vbNullString Then
                    CreateRecordset .Recordset, SQL_String, ADODB.adCmdText, Error_, LastError_
                    .Error = Error_
                    .LastError = LastError_
                Else
                    .Error = True: .LastError = "Nincs SQL utas|fffd|t|fffd|s megadva"
                End If
            Else
                .Error = True: .LastError = "A kapcsolat nincs megnyitva"
            End If
        Else
            .Error = True: .LastError = "Nincs kapcsolat"
        End If
        Set SQLtoRecordset = .Self
    End With
End Function

''
' Osztaly konstruktor. Egy adatbazis tabla tartalmat eltarolja recordset-kent, vagy hibat dob.
'
' @param Connection     aktiv adatbazis kapcsolat
' @param TableName      tabla neve
' @return               osztaly instancia
Public Function OpenTableAsRecordSet(ByRef Conn As ADODB.Connection, ByVal TableName As String) As AdoRecordset
    Dim Error_ As Boolean
    Dim LastError_ As String
    With New AdoRecordset
        If Not Conn Is Nothing Then
            If Conn.State = adStateOpen Then
                Set .Recordset = New ADODB.Recordset
                Set .Recordset.ActiveConnection = Conn
                If Not TableName = vbNullString Then
                    CreateRecordset .Recordset, TableName, ADODB.adCmdTable, Error_, LastError_
                    .Error = Error_
                    .LastError = LastError_
                Else
                    .Error = True: .LastError = "Nincs t|fffd|bla n|fffd|v megadva"
                End If
            Else
                .Error = True: .LastError = "A kapcsolat nincs megnyitva"
            End If
        Else
            .Error = True: .LastError = "Nincs kapcsolat"
        End If
        Set OpenTableAsRecordSet = .Self
    End With
End Function

''
' Osztaly destruktor. Lezarja a recordset-et.
Private Sub Class_Terminate()
    CloseAdoRecordset
End Sub

''
' Letrehozza a recordset-et.
'
' @param rs             inicializalt, de meg ures (nem megnyitott) Recordset objektum
' @param Source         SQL utasitas vagy a tabla neve
' @param CommandType    lekerdezes tipusa: adCmdText ha SQL parancsot hajtunk vegre vagy adCmdTable ha egy tablat olvasunk be
' @param Error_         hiba statusz (callback)
' @param LastError_     hibauzenet (callback)
Private Sub CreateRecordset(ByRef rs As ADODB.Recordset, ByVal Source As String, ByVal CommandType As ADODB.CommandTypeEnum, _
                                ByRef Error_ As Boolean, ByRef LastError_ As String)

    On Error GoTo AdoError
    Error_ = False

    'kapcsolat letrehozasa
    With rs
        .Source = Source
        Select Case CommandType
            Case ADODB.adCmdText
                .CursorType = adOpenStatic
                .CursorLocation = adUseClient
                .LockType = adLockOptimistic
            Case ADODB.adCmdTable
                .CursorType = adOpenStatic
                .CursorLocation = adUseClient
                .LockType = adLockOptimistic
        End Select
        .Open Options:=CommandType
    End With

    'kapcsolat ellenorzese
    If Not rs.State = adStateOpen Then
        Error_ = True
        LastError_ = "A Recordset l|fffd|trehoz|fffd|sa nem siker|fffd|lt"
    Else
        Debug.Print "A Recordset l|fffd|trej|fffd|tt" ' tesztel|fffd|shez
    End If

CleanExit:
    Exit Sub
AdoError:
    Error_ = True
    Dim strErr As String

    ' VB altal generalt hibauzenet
    strErr = strErr & vbCrLf & _
            "VB Error # " & CStr(Err.Number) & vbCrLf & _
            "   Generated by " & Err.Source & vbCrLf & _
            "   Description  " & Err.Description
    
    ' ADO API altal generalt hibauzenetek
    Dim AdoErrors As ADODB.Errors
    Set AdoErrors = rs.ActiveConnection.Errors
    Dim AdoError  As ADODB.Error
    For Each AdoError In AdoErrors
        With AdoError
            strErr = strErr & vbCrLf & _
                "   ADO Error   #" & .Number & vbCrLf & _
                "   Description  " & .Description & vbCrLf & _
                "   Source       " & .Source
        End With
    Next AdoError
    LastError_ = strErr
    Err.Clear: Resume CleanExit
End Sub

''
' A recordset-et kiirja egy excel tartomanyba.
'
' @param StartCell      cel tartomany kezdo (bal felso) cellaja
Public Sub WriteRecordsetToRange(ByVal startCell As Range)
 
'   ha StartCell t|fffd|bb cellabol all, akkor a bal felsot hasznalja
    If startCell.Cells.Count > 1 Then startCell = startCell.Cells(1)
    
    If Not this.Recordset Is Nothing Then
        startCell.CopyFromRecordset this.Recordset
    Else
        Debug.Print "Nincs Recordset" 'tesztel|fffd|shez
    End If
 
End Sub

''
' A recordset fejlecet kiirja egy excel tartomanyba.
'
' @param StartCell      cel tartomany kezdo (bal felso) cellaja
Public Sub WriteHeaderToRange(ByVal startCell As Range)
  
'   ha StartCell t|fffd|bb cellabol all, akkor a bal felsot hasznalja
    If startCell.Cells.Count > 1 Then startCell = startCell.Cells(1)
    With this.Recordset
        Dim i As Long
        For i = 0 To .Fields.Count - 1
            'Mez|fffd|/oszlop n|fffd|v:
            startCell.Offset(0, i).Value = .Fields(i).Name
        Next i
    End With
    
End Sub

''
' Lezarja a recordset-et.
Private Sub CloseAdoRecordset()
    If Not this.Recordset Is Nothing Then
        If this.Recordset.State = adStateOpen Then this.Recordset.Close
        Debug.Print "A Recordsetet lez|fffd|rtuk" ' tesztel|fffd|shez
    Else
        Debug.Print "Nincs lez|fffd|rand|fffd| recordset" ' tesztel|fffd|shez
    End If
    Set this.Recordset = Nothing
End Sub
Attribute VB_Name = "Booster"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Futas gyorsitasaert felelos osztaly.
' Kikapcsolja a kepernyo frissitest, kalkulaciot, esemenykezelest.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit
 '@Folder("Application")
 
''
' Munkafuzet szamolasi beallitasanak (kezi/automatikus) eltarolasara szolgalo valtozo.
Private CalculationState As XlCalculationState

'==================================================================================================================================================
'   CLASS EVENTS
'==================================================================================================================================================
''
' Osztaly konstruktor. Lefuttatja a gyorsito eljarast.
Private Sub Class_Initialize()
    SpeedUp
End Sub
 
''
' Osztaly destruktor. Visszaallitja az eredeti beallitasokat.
Private Sub Class_Terminate()
    RestoreSpeed
End Sub
 
 
'==================================================================================================================================================
'   METHODS
'==================================================================================================================================================

''
' Lassito tenyezoket kikapcsolja.
Private Sub SpeedUp()
    CalculationState = Application.Calculation
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.EnableEvents = False
'    Application.DisplayAlerts = True
'    Application.DisplayStatusBar = True
End Sub

''
' Visszaallitja az eredeti beallitasokat.
Private Sub RestoreSpeed()
    On Error Resume Next
        Application.ScreenUpdating = True
        Application.Calculation = CalculationState
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Application.DisplayStatusBar = True
        Application.StatusBar = False
    On Error GoTo 0
End Sub
Attribute VB_Name = "CSHA256"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'@Folder("IRC_ExcelTemplate.Model")
'*******************************************************************************
' MODULE:       CSHA256
' FILENAME:     CSHA256.cls
' AUTHOR:       Phil Fresle
' CREATED:      10-Apr-2001
' COPYRIGHT:    Copyright 2001 Phil Fresle. All Rights Reserved.
'
' DESCRIPTION:
' This class is used to generate a SHA-256 'digest' or 'signature' of a string.
' The SHA-256 algorithm is one of the industry standard methods for generating
' digital signatures. It is generically known as a digest, digital signature,
' one-way encryption, hash or checksum algorithm. A common use for SHA-256 is
' for password encryption as it is one-way in nature, that does not mean that
' your passwords are not free from a dictionary attack. If you are using the
' routine for passwords, you can make it a little more secure by concatenating
' some known random characters to the password before you generate the signature
' and on subsequent tests, so even if a hacker knows you are using SHA-256 for
' your passwords, the random characters will make it harder to dictionary attack.
'
' *** CAUTION ***
' See the comment attached to the SHA256 method below regarding use on systems
' with different character sets.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk
'
' MODIFICATION HISTORY:
' 10-Apr-2001   Phil Fresle     Initial Version
'*******************************************************************************
Option Explicit


Private m_lOnBits(30)   As Long
Private m_l2Power(30)   As Long
Private K(63)           As Long


Private Const BITS_TO_A_BYTE  As Long = 8
Private Const BYTES_TO_A_WORD As Long = 4
Private Const BITS_TO_A_WORD  As Long = BYTES_TO_A_WORD * BITS_TO_A_BYTE


'*******************************************************************************
' Class_Initialize (SUB)
'*******************************************************************************
Private Sub Class_Initialize()
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111

    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000

    ' Just put together the K array once
    K(0) = &H428A2F98
    K(1) = &H71374491
    K(2) = &HB5C0FBCF
    K(3) = &HE9B5DBA5
    K(4) = &H3956C25B
    K(5) = &H59F111F1
    K(6) = &H923F82A4
    K(7) = &HAB1C5ED5
    K(8) = &HD807AA98
    K(9) = &H12835B01
    K(10) = &H243185BE
    K(11) = &H550C7DC3
    K(12) = &H72BE5D74
    K(13) = &H80DEB1FE
    K(14) = &H9BDC06A7
    K(15) = &HC19BF174
    K(16) = &HE49B69C1
    K(17) = &HEFBE4786
    K(18) = &HFC19DC6
    K(19) = &H240CA1CC
    K(20) = &H2DE92C6F
    K(21) = &H4A7484AA
    K(22) = &H5CB0A9DC
    K(23) = &H76F988DA
    K(24) = &H983E5152
    K(25) = &HA831C66D
    K(26) = &HB00327C8
    K(27) = &HBF597FC7
    K(28) = &HC6E00BF3
    K(29) = &HD5A79147
    K(30) = &H6CA6351
    K(31) = &H14292967
    K(32) = &H27B70A85
    K(33) = &H2E1B2138
    K(34) = &H4D2C6DFC
    K(35) = &H53380D13
    K(36) = &H650A7354
    K(37) = &H766A0ABB
    K(38) = &H81C2C92E
    K(39) = &H92722C85
    K(40) = &HA2BFE8A1
    K(41) = &HA81A664B
    K(42) = &HC24B8B70
    K(43) = &HC76C51A3
    K(44) = &HD192E819
    K(45) = &HD6990624
    K(46) = &HF40E3585
    K(47) = &H106AA070
    K(48) = &H19A4C116
    K(49) = &H1E376C08
    K(50) = &H2748774C
    K(51) = &H34B0BCB5
    K(52) = &H391C0CB3
    K(53) = &H4ED8AA4A
    K(54) = &H5B9CCA4F
    K(55) = &H682E6FF3
    K(56) = &H748F82EE
    K(57) = &H78A5636F
    K(58) = &H84C87814
    K(59) = &H8CC70208
    K(60) = &H90BEFFFA
    K(61) = &HA4506CEB
    K(62) = &HBEF9A3F7
    K(63) = &HC67178F2
End Sub


'*******************************************************************************
' LShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' A left shift takes all the set binary bits and moves them left, in-filling
' with zeros in the vacated bits on the right. This function is equivalent to
' the << operator in Java and C++
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all.
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function

    ' A shift of 31 will result in the right most bit becoming the left most
    ' bit and all other bits being cleared
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function

    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    ' If the left most bit that remains will end up in the negative bit
    ' position (&H80000000) we would end up with an overflow if we took the
    ' standard route. We need to strip the left most bit and add it back
    ' afterwards.
    If (lValue And m_l2Power(31 - iShiftBits)) Then

        ' (Value And OnBits(31 - (Shift + 1))) chops off the left most bits that
        ' we are shifting into, but also the left most bit we still want as this
        ' is going to end up in the negative bit marker position (&H80000000).
        ' After the multiplication/shift we Or the result with &H80000000 to
        ' turn the negative bit on.
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000

    Else

        ' (Value And OnBits(31-Shift)) chops off the left most bits that we are
        ' shifting into so we do not get an overflow error when we do the
        ' multiplication/shift
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))

    End If
End Function


'*******************************************************************************
' RShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' The right shift of an unsigned long integer involves shifting all the set bits
' to the right and in-filling on the left with zeros. This function is
' equivalent to the >>> operator in Java or the >> operator in C++ when used on
' an unsigned long.
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long

    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function

    ' A shift of 31 will clear all bits and move the left most bit to the right
    ' most bit position
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function

    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    ' We do not care about the top most bit or the final bit, the top most bit
    ' will be taken into account in the next stage, the final bit (whether it
    ' is an odd number or not) is being shifted into, so we do not give a jot
    ' about it
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)

    ' If the top most bit (&H80000000) was set we need to do things differently
    ' as in a normal VB signed long integer the top most bit is used to indicate
    ' the sign of the number, when it is set it is a negative number, so just
    ' deviding by a factor of 2 as above would not work.
    ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you could
    ' get a very marginal speed improvement by changing the test to (lValue < 0)
    If (lValue And &H80000000) Then
        ' We take the value computed so far, and then add the left most negative
        ' bit after it has been shifted to the right the appropriate number of
        ' places
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function


'*******************************************************************************
' AddUnsigned (FUNCTION)
'
' PARAMETERS:
' (In) - lX - Long - First value
' (In) - lY - Long - Second value
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Adds two potentially large unsigned numbers without overflowing
'*******************************************************************************
Private Function AddUnsigned(ByVal lX As Long, _
                             ByVal lY As Long) As Long
    Dim lX4     As Long
    Dim lY4     As Long
    Dim lX8     As Long
    Dim lY8     As Long
    Dim lResult As Long

    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000

    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function


'*******************************************************************************
' Ch (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Ch(ByVal x As Long, _
                    ByVal y As Long, _
                    ByVal z As Long) As Long
    Ch = ((x And y) Xor ((Not x) And z))
End Function


'*******************************************************************************
' Maj (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Maj(ByVal x As Long, _
                     ByVal y As Long, _
                     ByVal z As Long) As Long
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function


'*******************************************************************************
' S (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (rotate right)
'*******************************************************************************
Private Function S(ByVal x As Long, _
                   ByVal n As Long) As Long
    S = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And m_lOnBits(4)))))
End Function


'*******************************************************************************
' R (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (just a right shift)
'*******************************************************************************
Private Function R(ByVal x As Long, _
                   ByVal n As Long) As Long
    R = RShift(x, CInt(n And m_lOnBits(4)))
End Function


'*******************************************************************************
' Sigma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma0(ByVal x As Long) As Long
    Sigma0 = (S(x, 2) Xor S(x, 13) Xor S(x, 22))
End Function


'*******************************************************************************
' Sigma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma1(ByVal x As Long) As Long
    Sigma1 = (S(x, 6) Xor S(x, 11) Xor S(x, 25))
End Function


'*******************************************************************************
' Gamma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma0(ByVal x As Long) As Long
    Gamma0 = (S(x, 7) Xor S(x, 18) Xor R(x, 3))
End Function


'*******************************************************************************
' Gamma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma1(ByVal x As Long) As Long
    Gamma1 = (S(x, 17) Xor S(x, 19) Xor R(x, 10))
End Function


'*******************************************************************************
' ConvertToWordArray (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String message
'
' RETURN VALUE:
' Long() - Converted message as long array
'
' DESCRIPTION:
' Takes the string message and puts it in a long array with padding according to
' the SHA-256 rules (similar to MD5 routine).
'*******************************************************************************
Private Function ConvertToWordArray(sMessage As String) As Long()
    Dim lMessageLength  As Long
    Dim lNumberOfWords  As Long
    Dim lWordArray()    As Long
    Dim lBytePosition   As Long
    Dim lByteCount      As Long
    Dim lWordCount      As Long
    Dim lByte           As Long

    Const MODULUS_BITS      As Long = 512
    Const CONGRUENT_BITS    As Long = 448

    lMessageLength = Len(sMessage)

    ' Get padded number of words. Message needs to be congruent to 448 bits,
    ' modulo 512 bits. If it is exactly congruent to 448 bits, modulo 512 bits
    ' it must still have another 512 bits added. 512 bits = 64 bytes
    ' (or 16 * 4 byte words), 448 bits = 56 bytes. This means lNumberOfWords must
    ' be a multiple of 16 (i.e. 16 * 4 (bytes) * 8 (bits))
    lNumberOfWords = (((lMessageLength + _
        ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ _
        (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * _
        (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    ' Combine each block of 4 bytes (ascii code of character) into one long
    ' value and store in the message. The high-order (most significant) bit of
    ' each byte is listed first. However, unlike MD5 we put the high-order
    ' (most significant) byte first in each word.
    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        ' Each word is 4 bytes
        lWordCount = lByteCount \ BYTES_TO_A_WORD

        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

        ' NOTE: This is where we are using just the first byte of each unicode
        ' character, you may want to make the change here, or to the SHA256 method
        ' so it accepts a byte array.
        lByte = AscB(Mid(sMessage, lByteCount + 1, 1))

        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop


    ' Terminate according to SHA-256 rules with a 1 bit, zeros and the length in
    ' bits stored in the last two words
    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE


    ' Add a terminating 1 bit, all the rest of the bits to the end of the
    ' word array will default to zero
    lWordArray(lWordCount) = lWordArray(lWordCount) Or _
        LShift(&H80, lBytePosition)


    ' We put the length of the message in bits into the last two words, to get
    ' the length in bits we need to multiply by 8 (or left shift 3). This left
    ' shifted value is put in the last word. Any bits shifted off the left edge
    ' need to be put in the penultimate word, we can work out which bits by shifting
    ' right the length by 29 bits.
    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function


'*******************************************************************************
' SHA256 (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - Message to digest
'
' RETURN VALUE:
' String - The digest
'
' DESCRIPTION:
' Takes a string and uses the SHA-256 digest to produce a signature for it.
'
' NOTE: Due to the way in which the string is processed the routine assumes a
' single byte character set. VB passes unicode (2-byte) character strings, the
' ConvertToWordArray function uses on the first byte for each character. This
' has been done this way for ease of use, to make the routine truely portable
' you could accept a byte array instead, it would then be up to the calling
' routine to make sure that the byte array is generated from their string in
' a manner consistent with the string type.
'*******************************************************************************
Public Function SHA256(sMessage As String) As String
    Dim hash(7) As Long
    Dim M()     As Long
    Dim W(63)   As Long
    Dim a       As Long
    Dim b       As Long
    Dim c       As Long
    Dim d       As Long
    Dim e       As Long
    Dim f       As Long
    Dim g       As Long
    Dim h       As Long
    Dim i       As Long
    Dim j       As Long
    Dim T1      As Long
    Dim T2      As Long

    ' Initial hash values
    hash(0) = &H6A09E667
    hash(1) = &HBB67AE85
    hash(2) = &H3C6EF372
    hash(3) = &HA54FF53A
    hash(4) = &H510E527F
    hash(5) = &H9B05688C
    hash(6) = &H1F83D9AB
    hash(7) = &H5BE0CD19

    ' Preprocessing. Append padding bits and length and convert to words
    M = ConvertToWordArray(sMessage)

    ' Main loop
    For i = 0 To UBound(M) Step 16
        a = hash(0)
        b = hash(1)
        c = hash(2)
        d = hash(3)
        e = hash(4)
        f = hash(5)
        g = hash(6)
        h = hash(7)

        For j = 0 To 63
            If j < 16 Then
                W(j) = M(j + i)
            Else
                W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), _
                    W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
            End If

            T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), _
                Ch(e, f, g)), K(j)), W(j))
            T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))

            h = g
            g = f
            f = e
            e = AddUnsigned(d, T1)
            d = c
            c = b
            b = a
            a = AddUnsigned(T1, T2)
        Next

        hash(0) = AddUnsigned(a, hash(0))
        hash(1) = AddUnsigned(b, hash(1))
        hash(2) = AddUnsigned(c, hash(2))
        hash(3) = AddUnsigned(d, hash(3))
        hash(4) = AddUnsigned(e, hash(4))
        hash(5) = AddUnsigned(f, hash(5))
        hash(6) = AddUnsigned(g, hash(6))
        hash(7) = AddUnsigned(h, hash(7))
    Next

    ' Output the 256 bit digest
    SHA256 = LCase(Right("00000000" & Hex(hash(0)), 8) & _
        Right("00000000" & Hex(hash(1)), 8) & _
        Right("00000000" & Hex(hash(2)), 8) & _
        Right("00000000" & Hex(hash(3)), 8) & _
        Right("00000000" & Hex(hash(4)), 8) & _
        Right("00000000" & Hex(hash(5)), 8) & _
        Right("00000000" & Hex(hash(6)), 8) & _
        Right("00000000" & Hex(hash(7)), 8))
End Function

Attribute VB_Name = "Controller"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const TobbCellaError As String = "A makr|fffd| csak egy cella kijel|fffd|l|fffd|se eset|fffd|n m|fffd|k|fffd|dik"
Private Const NoRecordSelectedError As String = "Nincs t|fffd|tel kijel|fffd|lve"
Private Const NoFormError As String = "'%RelatedForm%' UserForm nem tal|fffd|lhat|fffd|"
Private Const UserFormNotDefinedError As String = "Nincs UserForm defini|fffd|lva"
Private Const DBTableNotDefinedError As String = "Nincs adatb|fffd|zis t|fffd|bla defini|fffd|lva"
Private Const Interruption As String = "Felhaszn|fffd|l|fffd|i megszak|fffd|t|fffd|s"

Private Const ERTEK As String = "e" 'ezzel jeloljuk, hogy keplet helyett ertek szukseges

Public Sub FormNyitas(ByRef sht As Object, ByRef sel As Range, ByVal UjTetel As Boolean)
'Form megnyitasa hivatkozott munkalap alapjan
    
    'check RelatedForm, RelatedTable
    If CheckRelatedForm(sht) = False Then
        MsgBox UserFormNotDefinedError
        GoTo CleanExit
    ElseIf CheckRelatedTable(sht) = False Then
        MsgBox DBTableNotDefinedError
        GoTo CleanExit
    End If
    
    Dim frm As Object
    Dim ID As Long
    Dim wsProxy As WorksheetProxy
    Set wsProxy = WorksheetProxy.Create(sht)
            
    If UjTetel Then

        Set frm = GetForm(wsProxy.RelatedForm)  'inicializalas megjelenites nelkul
        If frm Is Nothing Then GoTo NoFormExit
        
        Dim dbProxy As DatabaseProxy
        Dim Cancel As Boolean
        Set dbProxy = DatabaseProxy.Create(sht, Cancel)
        If Cancel = True Then GoTo CancelExit
        
        ID = dbProxy.GetNextID           'uj ID megkeresese
        frm.SetIDOnly ID                 'ID betoltese
        Set wsProxy = Nothing            'memoria tisztitas
        Set dbProxy = Nothing            'memoria tisztitas
        ShowForm frm                     'form megjelenitese
        
    Else
    
        If sel.Cells.Count = 1 Then
                        
            'egy cella van kijelolve
            'check, letezo rekord, vagy uj rekord
            ID = wsProxy.GetRowID(sel.Row)
            If ID <= 0 Then
                MsgBox NoRecordSelectedError
            ElseIf ID > 0 Then
                'ha rekord
                Set frm = GetForm(wsProxy.RelatedForm)  'inicializalas megjelenites nelkul
                If frm Is Nothing Then GoTo NoFormExit
                'adatokkal feltoltes
                Dim tetelData As Tetel
                Set tetelData = wsProxy.GetTetelData(ID) 'adatok beolvasasa munkalaprol
                If Not tetelData Is Nothing Then
                    frm.SetTetelData tetelData   'adatok betoltese form-ra
                    Set wsProxy = Nothing        'memoria tisztitas
                    Set dbProxy = Nothing        'memoria tisztitas
                    ShowForm frm                 'form megjelenitese
                Else
                    MsgBox NoRecordSelectedError
                End If
                
            End If
        Else
            'tobb cella van kijelolve
            MsgBox TobbCellaError
        End If
        
    End If
        
CleanExit:
    Set wsProxy = Nothing
    Set dbProxy = Nothing
    Exit Sub
NoFormExit:
    MsgBox Replace(NoFormError, "%RelatedForm%", wsProxy.RelatedForm, , , vbTextCompare)
    GoTo CleanExit
CancelExit:
    MsgBox Interruption
    GoTo CleanExit
End Sub

Public Sub FormRogzites(ByVal sht As Object, ByRef frm As Object, Optional ByVal CloseForm As Boolean = True)
'Form rogzitese hivatkozott munkalapra
    
    'check RelatedTable
    If CheckRelatedTable(sht) = False Then
        MsgBox DBTableNotDefinedError
        Exit Sub
    End If

    Dim boost As Booster: Set boost = New Booster
    

    Dim tetelData As Tetel
    Set tetelData = frm.GetTetelData()
    If CloseForm Then
        Unload frm
        Set frm = Nothing
    End If
    If Not tetelData Is Nothing Then
        '------------------------
        'ADATBAZIS frissitese
        '------------------------
        Dim dbProxy As DatabaseProxy
        Dim Cancel As Boolean
        Set dbProxy = DatabaseProxy.Create(sht, Cancel)
        If Cancel = True Then GoTo CancelExit
        With dbProxy
            .CheckAndCreateFields tetelData, Cancel     'mezok megletenek ellenorzese
            If Cancel = True Then GoTo CancelExit
            .TetelRogzites tetelData                    'tetel rogzitese adatbazisba
            'tetel visszaolvasasa adatbazisbol
            Dim ID As Long: ID = tetelData.Item(.IDREF)
            Set tetelData = .TetelBeolvasas(ID)          'tetel visszaolvasasa adatbazisbol
        End With
        '------------------------
        'VIEW frissitese
        '------------------------
        RefreshRecords sht, tetelData
    End If

CleanExit:
    Set dbProxy = Nothing
    Set boost = Nothing
    Exit Sub
CancelExit:
    MsgBox Interruption
    GoTo CleanExit
End Sub

Private Sub RefreshRecords(ByVal sht As Object, ByVal tetelData As Tetel)
    'alapeset: hivatkozott lap frissitese
    RefreshRecord sht, tetelData
    'kivetelek: kapcsolodo lapok frissitese
    Select Case sht.Name
        Case shtPUtetelek.Name 'KIADASOK lapot is frissiteni, ha a tetel KIADAS es lathato
            If StrComp(tetelData.Item("pufotipnev"), "KIAD|fffd|S", vbTextCompare) = 0 Then
                'ha kiadas
                If CsakSajatRekord And tetelData.Item("beoreklat") = 1 Then
                    'nem jelenitheto meg
                Else
                    RefreshRecord shtKIADASOK, tetelData
                End If
            End If
        Case shtKIADASOK.Name 'PU TETELEK lap frissitese
            RefreshRecord shtPUtetelek, tetelData
    End Select
End Sub

Private Sub RefreshRecord(ByVal sht As Object, ByVal tetelData As Tetel)
'egy rekordot frissit a munkalapon
    
    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim wsProxy As WorksheetProxy
    Set wsProxy = WorksheetProxy.Create(sht)
    With wsProxy
        'szurok torlese
        .ResetFilters sht.GetPropVal("DefaultSortOrder")
        .HandleColors
        'tetel rogzitese
        .TetelRogzites tetelData
    End With

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True

End Sub


Public Sub RefreshView(ByVal sht As Object, Optional ByVal SqlFilter As String = vbNullString, Optional ByRef ExistingBoost As Booster)
'Egesz munkalapot frissiti adatbazis alapjan

    'boost
    If ExistingBoost Is Nothing Then
        Dim boost As Booster: Set boost = New Booster
    End If

    'protection off
    sht.Unprotect INTERNAL_PWD
    
    Dim dbProxy As DatabaseProxy
    Dim Cancel As Boolean
    Set dbProxy = DatabaseProxy.Create(sht, Cancel)
    If Cancel = True Then GoTo CancelExit
    'DB tabla kiexportalasa Import lapra
    Dim imProxy As ImportProxy
    Set imProxy = New ImportProxy 'a konstruktor oldja fel az import lap vedelmet
    dbProxy.ExportTable SqlFilter
    imProxy.Refresh 'fejlec es range hivatkozasok frissitese

    Dim wsProxy As WorksheetProxy
    Set wsProxy = WorksheetProxy.Create(sht)
    With wsProxy
        'szurok torlese
        .ResetFilters sht.GetPropVal("DefaultSortOrder")
        .HandleColors
        'VIEW adatainak torlese
        If Not .DataRange Is Nothing Then .DataRange.ClearContents
    End With

    'Import laprol adatok atemelese
    GetImportData imProxy, wsProxy
    
    'Import lap torlese
    imProxy.ClearSheet

    'Egyeb oszlopokba kepletek masolasa
     CopyAllFormula imProxy, wsProxy

    'Calculate
    Application.Calculate
    Do While Application.CalculationState <> xlDone
        DoEvents
    Loop

    'kepletek rogzitese ahol szukseges
    PasteAllValues wsProxy

    'Formatumok masolasa
    CopyFormats wsProxy

    With wsProxy
        'sorbarendezes miatt
        .ResetFilters sht.GetPropVal("DefaultSortOrder")
        .HandleColors
    End With

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True

CleanExit:
    Set wsProxy = Nothing
    Set imProxy = Nothing
    If ExistingBoost Is Nothing Then Set boost = Nothing
    Exit Sub
CancelExit:
    MsgBox Interruption
    GoTo CleanExit
End Sub

Public Sub DoSort(ByVal Target As Range)
'lap sorbarendezese Target oszlopa alapjan

    Dim sht As Worksheet
    Set sht = Target.Parent

    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster

    With WorksheetProxy.Create(sht)
        .SortTable Target
        .HandleColors
    End With
    
    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True

End Sub

Public Sub DoFilter(ByVal Target As Range)
'lap szurese Target oszlopa alapjan

    Dim sht As Worksheet
    Set sht = Target.Parent

    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster
    
    With WorksheetProxy.Create(sht)
        .FilterTable Target
        .HandleColors
    End With

    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True

End Sub

Public Sub DoReset(ByVal sht As Object)
'minden szurot torol, ID szerint rakja sorba
    
    'protection off
    sht.Unprotect INTERNAL_PWD

    Dim boost As Booster: Set boost = New Booster

    With WorksheetProxy.Create(sht)
        .ResetFilters sht.GetPropVal("DefaultSortOrder")
        .HandleColors
    End With
    
    Set boost = Nothing

    'protection vissza
    sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    sht.EnableOutlining = True

End Sub

Private Function GetForm(ByVal FormName As String) As Object
'hiba eseten Nothing a visszateresi ertek --> hivo eljarasban kezelni
    On Error Resume Next
        Set GetForm = CallByName(New FormSpawner, "FormInstance_" & FormName, VbGet)
    On Error GoTo 0
End Function

Private Sub ShowForm(ByVal frm As Variant)
'Form megjelenitese
    frm.Show
End Sub

Private Function CheckRelatedForm(ByRef sht As Object) As Boolean
' Ellenorzi, hogy definialva van-e sht objektumban a RelatedForm property.
    On Error Resume Next
        Dim rf As String: rf = sht.GetPropVal("RelatedForm")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    CheckRelatedForm = Not (rf = vbNullString)
End Function

Private Function CheckRelatedTable(ByRef sht As Object) As Boolean
' Ellenorzi, hogy definialva van-e sht objektumban a RelatedTable property.
    On Error Resume Next
        Dim rt As String: rt = sht.GetPropVal("RelatedTable")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    CheckRelatedTable = Not (rt = vbNullString)
End Function

Private Sub GetImportData(ByRef imProxy As ImportProxy, ByRef wsProxy As WorksheetProxy)
'Import laprol adatok atemelese

    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        Dim CopyRange As Range
        Set CopyRange = imProxy.GetDataColumn(HdrAzon)
        If Not CopyRange Is Nothing Then
            Dim PasteRange As Range
            Set PasteRange = wsProxy.sht.Cells(wsProxy.HeaderRange.Row + 1, wsProxy.HeaderDict(HdrAzon))
            CopyImportColumn CopyRange, PasteRange
        End If
    Next HdrAzon
    
    wsProxy.Refresh 'LastRow ujraszamolasa
    
End Sub

Private Sub CopyImportColumn(ByVal CopyRange As Range, ByVal PasteRange As Range)
' Import lap egy oszlopanak ertekeit atmasolja (PasteValues) a megadott helyre
    CopyRange.Copy
    PasteRange.PasteSpecial xlPasteValues
    Application.CutCopyMode = False
End Sub

Private Sub CopyAllFormula(ByRef imProxy As ImportProxy, ByRef wsProxy As WorksheetProxy)
'Egyeb oszlopokba kepletek masolasa

    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        If Not imProxy.FieldExists(HdrAzon) Then
            'kepletet masolni kepletkent, hogy mindent kalkulaljon
            With wsProxy
                Dim CopyRange As Range
                Set CopyRange = .sht.Cells(.FormulaRowIndex, .HeaderDict(HdrAzon))
                Dim PasteRange As Range
                Set PasteRange = .sht.Range( _
                                        .sht.Cells(.HeaderRange.Row + 1, .HeaderDict(HdrAzon)), _
                                        .sht.Cells(.LastUsedRow, .HeaderDict(HdrAzon)) _
                                        )
                CopyFormula CopyRange, PasteRange
            End With
        End If
    Next HdrAzon

End Sub

Private Sub CopyFormula(ByVal CopyRange As Range, ByVal PasteRange As Range)
' Egy cella kepleteit atmasolja (PasteFormulasAndNumberFormats) a kijelolt range-be
    CopyRange.Copy
    PasteRange.PasteSpecial xlPasteFormulasAndNumberFormats
    Application.CutCopyMode = False
End Sub

Private Sub PasteAllValues(ByRef wsProxy As WorksheetProxy)
'Kepletek rogzitese, ahol szukseges

    Dim HdrAzon As Variant
    For Each HdrAzon In wsProxy.HeaderDict.Keys
        With wsProxy
            If StrComp(.ControlDict(HdrAzon), ERTEK, vbTextCompare) = 0 Then
                Dim PasteRange As Range
                Set PasteRange = .sht.Range( _
                                        .sht.Cells(.HeaderRange.Row + 1, .HeaderDict(HdrAzon)), _
                                        .sht.Cells(.LastUsedRow, .HeaderDict(HdrAzon)) _
                                        )
                PasteValues PasteRange
            End If
        End With
    Next HdrAzon
    
End Sub

Private Sub PasteValues(ByVal PasteRange As Range)
'A hivatkozott range ertekeit rogziti (Copy-PasteValues)
    PasteRange.Copy
    PasteRange.PasteSpecial xlPasteValues
    Application.CutCopyMode = False
End Sub

Private Sub CopyFormats(ByRef wsProxy As WorksheetProxy)
'Formatumok masolasa
    With wsProxy
        If Not .DataRange Is Nothing Then
            .HeaderRange.Offset(.FormulaRowIndex - .HeaderRange.Row).Copy
            .DataRange.PasteSpecial xlPasteFormats
        End If
    End With
    Application.CutCopyMode = False
End Sub

Attribute VB_Name = "DatabaseProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Adatbazis (excel fajl) egy tablajanak (munkalapjanak) proxy-ja.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12


Option Explicit
'@PredeclaredID

''
' Connection string template - placeholder-ekkel
Private Const CONN_STR_TEMPLATE As String = "Provider=Microsoft.ACE.OLEDB.12.0; Data Source=%DATASOURCE%;Extended Properties='Excel 12.0;HDR = YES'"

''
' Osztaly mezok.
'
' @param ADOConn        ADOConnection instancia
' @param RelatedTable   Adatbazis tabla (Excel lap) elnevezese
' @param IDREF          Elsodleges kulcsmezo elnevezese
Private Type TFields
    AdoConn As ADOConnection
    RelatedTable As String
    IDREF As String
End Type
Private this As TFields

Public Property Get Self() As DatabaseProxy
    Set Self = Me
End Property

''
' Megadja az elsodleges kulcsmezo elnevezeset.
'
' @return               elsodleges kulcsmezo elnevezese
Public Property Get IDREF() As String
    IDREF = this.IDREF
End Property

''
' Beallitja az elsodleges kulcsmezo elnevezeset.
'
' @param IDREF          elsodleges kulcsmezo elnevezese
Public Property Let IDREF(ByVal Value As String)
    this.IDREF = Value
End Property


''
' Megadja a connection string-et
'
' @return               connection string
Private Property Get ConnectionString() As String
    ConnectionString = Replace(CONN_STR_TEMPLATE, "%DATASOURCE%", DataSourceADO, , , vbTextCompare)
End Property

''
' Megadja a connection string-be beillesztendo adatforrast (=adatbazis eleresi utvonala).
'
' @return               adatbazis eleresi utvonala
' @remarks              mindenkepp .xlsb fajlt hoz letre, ha mas kiterjesztest adok, nem nyitja meg
Private Property Get DataSourceADO() As String
    With SetupProxy.Create(shtSetupSys)
        Dim fName As String
        fName = CStr(.SettingValue("ssnev", "ssdbf", "ssdata"))
        If fName = vbNullString Then fName = "DB_FILE.xlsb" 'default ertek
    End With
    DataSourceADO = ThisWorkbook.Path & "\" & fName
End Property

''
' Megadja a kapcsolodo adatbazis tabla nevet.
'
' @return               kapcsolodo adatbazis tabla neve
Public Property Get RelatedTable() As String
    RelatedTable = this.RelatedTable
End Property

''
' Beallitja a kapcsolodo adatbazis tabla nevet.
'
' @param RelatedTable   kapcsolodo adatbazis tabla neve
Public Property Let RelatedTable(ByVal Value As String)
    this.RelatedTable = Value
End Property

''
' Osztaly destruktor
Private Sub Class_Terminate()
    Set this.AdoConn = Nothing
End Sub

''
' Osztaly konstruktor
'
' @param sht            munkalap objektum
' @return               osztaly instancia
Public Function Create(ByVal sht As Object, Cancel As Boolean) As DatabaseProxy

    With New DatabaseProxy
        .IDREF = sht.GetPropVal("IDColumnHeader")
        .RelatedTable = sht.GetPropVal("RelatedTable")
        .CheckAndCreateDatabase Cancel
        Set Create = .Self
    End With
    
End Function

''
' Ellenorzi, letezik-e az adatbazis es a tabla. Ha nem: rakerdez, hogy letrehozza-e. Ha nem: Cancel=True
' Kapcsolodik is az adatbazishoz.
'
' @param Cancel         megszakitas statusz
Public Sub CheckAndCreateDatabase(Cancel As Boolean)
    
    If Not DatabaseExists Then
        Dim Res As VbMsgBoxResult
        Res = MsgBox("Az adatb|fffd|zis nem tal|fffd|lhat|fffd|. L|fffd|trehozzam?", vbOKCancel, "Adatb|fffd|zis hi|fffd|nyzik")
        Select Case Res
            Case VbMsgBoxResult.vbOK
                ConnectToDatabase Cancel
                If Cancel = True Then Exit Sub
            Case VbMsgBoxResult.vbCancel
                Cancel = True
                Exit Sub
        End Select
    Else
        ConnectToDatabase Cancel
        If Cancel = True Then Exit Sub
    End If
    
    If Not TableExists(this.RelatedTable) Then
        Res = MsgBox(this.RelatedTable & " t|fffd|bla nem tal|fffd|lhat|fffd| az adatb|fffd|zisban. L|fffd|trehozzam?", vbOKCancel, "T|fffd|bla hi|fffd|nyzik")
        Select Case Res
            Case VbMsgBoxResult.vbOK
                CreateTable this.RelatedTable, Cancel
                If Cancel = True Then Exit Sub
            Case VbMsgBoxResult.vbCancel
                Cancel = True
                Exit Sub
        End Select
    End If
    
End Sub

''
' Ellenorzi, leteznek-e a tetelben megadott mezok. Ha nem: rakerdez, hogy letrehozza-e. Ha nem: Cancel=True
'
' @param tetelData      Tetel objektum
' @param Cancel         megszakitas statusz
' @see                  Tetel
Public Sub CheckAndCreateFields(ByVal tetelData As Tetel, Cancel As Boolean)
    Dim Field As Variant
    For Each Field In tetelData.Fields
        Dim FieldName As String
        FieldName = CStr(Field)
        If Not FieldExists(this.RelatedTable, FieldName) Then
'            Dim Res As VbMsgBoxResult
'            Res = MsgBox(FieldName & " mez|fffd| nem tal|fffd|lhat|fffd| az " & this.RelatedTable & " t|fffd|bl|fffd|ban. L|fffd|trehozzam?", vbOKCancel, "Mez|fffd| hi|fffd|nyzik")
'            Select Case Res
'                Case VbMsgBoxResult.vbOK
'                    CreateField this.RelatedTable, FieldName, tetelData.SqlDataType(FieldName), Cancel
'                    If Cancel = True Then Exit Sub
'                Case VbMsgBoxResult.vbCancel
'                    Cancel = True
'                    Exit Sub
'            End Select
            '--> kerdes nelkul letrehozzuk
            CreateField this.RelatedTable, FieldName, tetelData.SqlDataType(FieldName), Cancel
            If Cancel = True Then Exit Sub
        End If
    Next Field
End Sub

''
' Ellenorzi, letezik-e az adatbazis fajl.
'
' @return               true/false
Private Function DatabaseExists() As Boolean
    DatabaseExists = FileExists(DataSourceADO)
End Function

''
' Kapcsolat letrehozasa (akor is, ha meg nem letezik a DB fajl).
'
' @param Cancel         megszakitas statusz
Private Sub ConnectToDatabase(Cancel As Boolean)
    Set this.AdoConn = ADOConnection.Create(ConnectionString)
    With this.AdoConn
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
            Cancel = True
        End If
    End With
End Sub

''
' Ellenorzi, letezik-e a megadott tabla az adatbazisban
'
' @param TableName      keresett tabla neve
' @return               true/false
Private Function TableExists(ByVal TableName As String) As Boolean
    TableExists = this.AdoConn.TableExists(TableName & "$")
End Function

''
' Letrehozza a hivatkozott adatbazis fajlt
'
' @param Cancel         megszakitas statusz
Private Sub CreateDatabase(Cancel As Boolean)

    On Error GoTo ErrHandler
   
    ' DB fajl megnyitasa
    Dim wb As Workbook
    Set wb = Workbooks.Add
    
    ' Elso sheet atnevezese "Open"-re
    wb.Worksheets(1).Name = "Open"
    
    'Mentes (.xlsb), kilepes
    wb.SaveAs DataSourceADO, 50
    wb.Close SaveChanges:=False
    
    ' kapcsolodas
    ConnectToDatabase Cancel
    If Cancel = True Then Exit Sub

' **************** Ez excel munkafuzetnel nem mukodik ********************************
'    Dim SQL_String As String
'    SQL_String = "CREATE TABLE [%TABLENAME%] ([%ID%] Int)"
'    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%ID%", this.IDREF, , , vbTextCompare)
'
'    With this.AdoConn
'        .ExecuteSqlCommand SQL_String
'        If .Error Then
'            MsgBox .LastError, vbCritical, "HIBA"
'            Cancel = True
'        End If
'    End With
' ************************************************************************************

CleanExit:
    Exit Sub
ErrHandler:
    MsgBox Err.Number & vbNewLine & Err.Description, vbCritical, "HIBA"
    Cancel = True
    Err.Clear: Resume CleanExit
End Sub

''
' Letrehozza a hivatkozott tablat az adatbazisban
'
' @param TableName      tabla neve
' @param Cancel         megszakitas statusz
Private Sub CreateTable(ByVal TableName As String, Cancel As Boolean)

    On Error GoTo ErrHandler
   
    'Connection lezarasa (kulonben csak read-only tudjuk megnyitni)
    Set this.AdoConn = Nothing
    
    ' DB fajl megnyitasa
    Dim wb As Workbook
    Set wb = Workbooks.Open(DataSourceADO, , False)
    
    ' Uj sheet hozzaadasa
    Dim sht As Worksheet
    Set sht = wb.Worksheets.Add
    sht.Name = TableName
    
    'Mentes, kilepes
    wb.Close SaveChanges:=True
    
    ' Ujra kapcsolodas
    ConnectToDatabase Cancel
    If Cancel = True Then Exit Sub

' **************** Ez excel munkafuzetnel nem mukodik ********************************
'    Dim SQL_String As String
'    SQL_String = "CREATE TABLE [%TABLENAME%] ([%ID%] Int)"
'    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%ID%", this.IDREF, , , vbTextCompare)
'
'    With this.AdoConn
'        .ExecuteSqlCommand SQL_String
'        If .Error Then
'            MsgBox .LastError, vbCritical, "HIBA"
'            Cancel = True
'        End If
'    End With
' ************************************************************************************

CleanExit:
    Exit Sub
ErrHandler:
    MsgBox Err.Number & vbNewLine & Err.Description, vbCritical, "HIBA"
    Cancel = True
    Err.Clear: Resume CleanExit
End Sub

''
' Ellenorzi, letezik-e a megadott mezo a megadott tablaban
'
' @param TableName      tabla neve
' @param FieldName      keresett mezo neve
' @return               true/false
Private Function FieldExists(ByVal TableName As String, ByVal FieldName As String) As Boolean
    FieldExists = this.AdoConn.FieldExists(TableName & "$", FieldName)
End Function

''
' Letrehozza a hivatkozott mezot a hivatkozott tablaban
'
' @param TableName      tabla neve
' @param FieldName      mezo neve
' @param DataType       adattipus
' @param Cancel         megszakitas statusz
Private Sub CreateField(ByVal TableName As String, ByVal FieldName As String, ByVal DataType As String, Cancel As Boolean)
   
    On Error GoTo ErrHandler
   
    'Connection lezarasa (kulonben csak read-only tudjuk megnyitni)
    Set this.AdoConn = Nothing
    
    ' DB fajl megnyitasa
    Dim wb As Workbook
    Set wb = Workbooks.Open(DataSourceADO, , False)
    Dim sht As Worksheet
    Set sht = wb.Worksheets(this.RelatedTable)
    
    ' Uj oszlop a vegere
    Dim cella As Range
    For Each cella In sht.Rows(1).Cells
        If IsEmpty(cella) Then
            cella.Value = FieldName
            Exit For
        End If
    Next cella
    
    'Mentes, kilepes
    wb.Close SaveChanges:=True
    
    ' Ujra kapcsolodas
    ConnectToDatabase Cancel
    If Cancel = True Then Exit Sub
              
' **************** Ez excel munkafuzetnel nem mukodik ********************************
'    Dim SQL_String As String
'    SQL_String = "ALTER TABLE [%TABLENAME%$] ADD COLUMN [%FIELDNAME%] %DATATYPE%"
'    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%FIELDNAME%", FieldName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%DATATYPE%", DataType, , , vbTextCompare)
'
'    With this.AdoConn
'        .ExecuteSqlCommand SQL_String
'        If .Error Then
'            MsgBox .LastError, vbCritical, "HIBA"
'            Cancel = True
'        End If
'    End With
' ************************************************************************************

CleanExit:
    Exit Sub
ErrHandler:
    MsgBox Err.Number & vbNewLine & Err.Description, vbCritical, "HIBA"
    Cancel = True
    Err.Clear: Resume CleanExit
End Sub

''
' Letezo rekord frissitese vagy uj rekord rogzitese az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Public Sub TetelRogzites(ByVal tetelData As Tetel)
    'ha letezo ID, akkor meglevo rekord UPDATE, ha nem letezo, akkor CreateNewRecord
    Dim IDNum As Long
    If tetelData.Exists(this.IDREF) Then
        IDNum = tetelData.Item(this.IDREF)
        If IDNum <= 0 Then
            MsgBox this.IDREF & " = " & IDNum, vbCritical, "HIBA"
            Exit Sub
        End If
    Else
        MsgBox this.IDREF & " NOT EXISTS IN tetelData", vbCritical, "HIBA"
        Exit Sub
    End If
    
    If IDExists(IDNum) Then
        UpdateExistingRecord tetelData
    ElseIf IDNum = 1 Then
        CreateFirstRecord tetelData
    Else
        CreateNewRecord tetelData
    End If
    
End Sub

''
' Egy rekord beolvasasa az adatbazisbol Tetel objektumba.
'
' @param ID             Tabla elsodleges azonosito erteke
' @see                  Tetel
Public Function TetelBeolvasas(ByVal ID As Long) As Tetel
    Dim tetelData As Tetel: Set tetelData = New Tetel
    If DatabaseExists And TableExists(this.RelatedTable) And FieldExists(this.RelatedTable, this.IDREF) Then
    
        Dim SQL_String As String
        SQL_String = "SELECT * FROM [%TABLENAME%$] WHERE %IDCOL% = %IDNUM%"
        SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDNUM%", ID, , , vbTextCompare)
        
        Dim AdoRs As AdoRecordset
        Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
        If AdoRs.Error Then
            MsgBox AdoRs.LastError, vbCritical, "HIBA"
            Exit Function
        End If
        
        With AdoRs.Recordset
            Dim fld As ADODB.Field
            For Each fld In .Fields
                tetelData.AddItem fld.Name, .Fields(fld.Name).Value
            Next fld
        End With
    End If
    Set TetelBeolvasas = tetelData
End Function

''
' Elso rekord letrehozasa.
' Mivel az elso rekord adja meg a szamformatumokat, ezt direkt modon rakjuk a fajlba, nem SQL-el,
' kulonben a szamokat is szovegkent tarolja az Excel.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub CreateFirstRecord(ByVal tetelData As Tetel)
    'Connection lezarasa (kulonben csak read-only tudjuk megnyitni)
    Set this.AdoConn = Nothing
    
    ' DB fajl megnyitasa
    Dim wb As Workbook
    Set wb = Workbooks.Open(DataSourceADO, , False)
    Dim sht As Worksheet
    Set sht = wb.Worksheets(this.RelatedTable)
    
    ' Adatok kiirasa
    Dim cella As Range
    For Each cella In sht.Rows(1).Cells
        If IsEmpty(cella) Then Exit For
        Dim hdr As String: hdr = cella.Value
        If tetelData.Exists(hdr) Then cella.Offset(1, 0).Value = tetelData.Item(hdr)
    Next cella
    
    'Mentes, kilepes
    wb.Close SaveChanges:=True
    
    ' Ujra kapcsolodas
    Dim Cancel As Boolean
    ConnectToDatabase Cancel
    If Cancel = True Then Exit Sub
        
End Sub

''
' Letezo rekord frissitese az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub UpdateExistingRecord(ByVal tetelData As Tetel)
    
    Dim SQL_String As String
    SQL_String = "UPDATE [%TABLENAME%$] SET %SPECIALLIST% WHERE %IDCOL% = %IDNUM%"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%SPECIALLIST%", Join(tetelData.SpecialList, ","), , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%IDNUM%", tetelData.Item(this.IDREF), , , vbTextCompare)

    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
        End If
    End With
    
End Sub

''
' Uj rekord letrehozasa az adatbazisban.
'
' @param tetelData      Tetel objektum
' @see                  Tetel
Private Sub CreateNewRecord(ByVal tetelData As Tetel)
' BUG:  a szamokat szovegkent rakja be a tablaba, kiveve ha van mar szamkent formazott adat benne.
'       ha zavaro: mezo letrehozasakor elso rekordot dummy adattal feltolteni, sima VBA-val (fajl megnyitas, stb)

    Dim SQL_String As String
    SQL_String = "INSERT INTO [%TABLENAME%$] (%FIELDS%) VALUES (%VALUES%)"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%FIELDS%", Join(tetelData.Fields, ","), , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%VALUES%", Join(tetelData.Values, ","), , , vbTextCompare)

    With this.AdoConn
        .ExecuteSqlCommand SQL_String
        If .Error Then
            MsgBox .LastError, vbCritical, "HIBA"
        End If
    End With
    
'    Dim SQL_String As String
'    SQL_String = "INSERT INTO [%TABLENAME%] (%FIELDS%) VALUES (?,?,?,?)"
'    SQL_String = Replace(SQL_String, "%TABLENAME%", TableName, , , vbTextCompare)
'    SQL_String = Replace(SQL_String, "%FIELDS%", Join(tetelData.Fields, ","), , , vbTextCompare)
'
'    With New ADODB.Command
'        .ActiveConnection = this.ADOConn.Connection
'        .CommandText = SQL_String
'        .Prepared = True
'        .Parameters.Append .CreateParameter("p1", adInteger, adParamInput, , CLng(tetelData.Values(0)))
'        .Parameters.Append .CreateParameter("p2", adDouble, adParamInput, , CDbl(tetelData.Values(1)))
'        .Parameters.Append .CreateParameter("p3", adDouble, adParamInput, , CDbl(tetelData.Values(2)))
'        .Parameters.Append .CreateParameter("p4", adDouble, adParamInput, , CDbl(tetelData.Values(3)))
'        .Execute
'    End With
    
End Sub

''
' Adatbazis tablat egyben kirakja 'import' lapra. Ha 'import' lap hianyzik, letrehozza.
'
Public Sub ExportTable(Optional ByVal sFilter As String = vbNullString)
    
    Dim FilterClause As String
    If Not sFilter = vbNullString Then
        FilterClause = "WHERE " & sFilter
    End If
    
    Dim SQL_String As String
    SQL_String = "SELECT * FROM [%TABLENAME%$] %FILTER%;"
    SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
    SQL_String = Replace(SQL_String, "%FILTER%", FilterClause, , , vbTextCompare)
    
    Dim AdoRs As AdoRecordset
    Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
    If AdoRs.Error Then
        MsgBox AdoRs.LastError, vbCritical, "HIBA"
        Exit Sub
    End If
    
    Dim shtImport As Worksheet
    Set shtImport = GetImportSheet()
    
    shtImport.Cells.ClearContents
    
    AdoRs.WriteHeaderToRange shtImport.Cells(1, 1)
    AdoRs.WriteRecordsetToRange shtImport.Cells(2, 1)
    
End Sub

''
' Ellenorzi, hogy a parameterkent megadott fajl letezik-e.
'
' @param FullName       fajl eleresi utvonala (FullName)
' @return               igaz/hamis
Private Function FileExists(ByVal FullName As String) As Boolean
    Dim objFSO As Object
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    FileExists = objFSO.FileExists(FullName)
    Set objFSO = Nothing
End Function

''
' Import lap hivatkozasat adja meg visszateresi ertekkent.
'
' @return               import lap hivatkozas (Worksheet obj)
Private Function GetImportSheet() As Worksheet
    Dim sht As Worksheet
    On Error Resume Next
        Set sht = ThisWorkbook.Worksheets("import")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    If sht Is Nothing Then
        Set sht = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        sht.Name = "import"
    End If
    Set GetImportSheet = sht
            
End Function

''
' Megadja a soron kovetkezo ID-t
'
' @return               kovetkezo szabad ID
Public Function GetNextID() As Long
    
    If DatabaseExists And TableExists(this.RelatedTable) And FieldExists(this.RelatedTable, this.IDREF) Then
    
        Dim SQL_String As String
        SQL_String = "SELECT Max(%IDCOL%) FROM [%TABLENAME%$]"
        SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
        
        Dim AdoRs As AdoRecordset
        Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
        If AdoRs.Error Then
            MsgBox AdoRs.LastError, vbCritical, "HIBA"
            Exit Function
        End If
        
        With AdoRs.Recordset
            If .RecordCount < 1 Then
                GetNextID = 1
            Else
                If IsNull(.Fields(0).Value) Then
                    GetNextID = 1
                Else
                    GetNextID = .Fields(0).Value + 1
                End If
            End If
        End With
    Else
        GetNextID = 1
    End If
    
End Function

''
' Validalja, hogy egy elsodleges kulcs letezik-e az adatbazis tablaban
'
' @param IDNum          elsodleges kulcs erteke
' @return               True/False
Private Function IDExists(ByVal IDNum As Long) As Boolean
    
    Dim SQL_String As String '0-t vagy 1-t ad eredmenyul
        SQL_String = "SELECT COUNT(1) FROM [%TABLENAME%$] WHERE %IDCOL% = %IDNUM%"
        SQL_String = Replace(SQL_String, "%TABLENAME%", this.RelatedTable, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDCOL%", this.IDREF, , , vbTextCompare)
        SQL_String = Replace(SQL_String, "%IDNUM%", IDNum, , , vbTextCompare)

        Dim AdoRs As AdoRecordset
        Set AdoRs = AdoRecordset.SQLtoRecordset(this.AdoConn.Connection, SQL_String)
        If AdoRs.Error Then
            MsgBox AdoRs.LastError, vbCritical, "HIBA"
            Exit Function
        End If

        IDExists = AdoRs.Recordset.Fields(0).Value > 0
        
End Function
Attribute VB_Name = "FormSpawner"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Itt kell definialni a formokat
'Public FormInstance_%FORMNAME% As New %FORMNAME%

Public FormInstance_frmPUTetelek As New frmPUTetelek
Public FormInstance_frmPuTipLista As New frmPuTipLista


Attribute VB_Name = "FormValidationMacros"
Option Explicit

'----------------------------------------------------------
' Datum validaciok
'----------------------------------------------------------

Public Sub DatumValidacio(ByRef EvBox As Object, _
                           ByRef HoBox As Object, _
                           ByRef NapBox As Object, _
                           Optional ByRef SetFocusTo As Object)

    If ValidateYear(EvBox.Value) = True Then
        MarkAsValid EvBox
        If ValidateMonth(HoBox.Value) = True Then
            MarkAsValid HoBox
            If ValidateDay(NapBox.Value, EvBox.Value, HoBox.Value) = True Then
                MarkAsValid NapBox
            Else
                MarkAsInvalid NapBox
                Set SetFocusTo = NapBox
            End If
        Else
            MarkAsInvalid HoBox
            Set SetFocusTo = HoBox
        End If
    Else
        MarkAsInvalid EvBox
        Set SetFocusTo = EvBox
    End If

End Sub

Private Function ValidateYear(ByVal entry As String) As Boolean
'ev validacio
    ValidateYear = False
    If Not IsNumeric(entry) Then Exit Function
    If CDbl(entry) < 1901 Or CDbl(entry) > 9999 Then Exit Function
    ValidateYear = True
End Function

Private Function ValidateMonth(ByVal entry As String) As Boolean
'honap validacio
    ValidateMonth = False
    If Not IsNumeric(entry) Then Exit Function
    If CDbl(entry) < 1 Or CDbl(entry) > 12 Then Exit Function
    ValidateMonth = True
End Function

Private Function ValidateDay(ByVal entry As String, ByVal eYear As Long, ByVal eMonth As Long) As Boolean
'nap validacio
    ValidateDay = False
    If Not IsNumeric(entry) Then Exit Function
    If Not IsDate(DateSerial(eYear, eMonth, entry)) Then Exit Function
    If Not Month(DateSerial(eYear, eMonth, entry)) = eMonth Then Exit Function
    ValidateDay = True
End Function

'----------------------------------------------------------
' Szam validaciok
'----------------------------------------------------------

Public Sub SzamValidacio(ByRef SzamBox As Object, Optional ByVal DefaultZero As Boolean = True)

    If DefaultZero And SzamBox.Value = vbNullString Then
        SzamBox.Value = 0
        MarkAsValid SzamBox
        Exit Sub
    ElseIf ValidateNumeric(SzamBox.Value) = True Then
        MarkAsValid SzamBox
    Else
        MarkAsInvalid SzamBox
    End If

End Sub

Public Sub BooleanValidacio(ByRef BlnBox As Object)
'TextBox erteke 0 vagy 1 lehet
    With BlnBox
        If Not (.Value = 1 Or .Value = 0) Then
            .Value = vbNullString
            .SetFocus
        End If
    End With
End Sub


Private Function ValidateNumeric(ByVal entry As String) As Boolean
'osszeg validacio
    ValidateNumeric = False
    If Not IsNumeric(entry) Then Exit Function
    ValidateNumeric = True
End Function


Private Sub MarkAsInvalid(ByRef Obj As Object)
    Obj.BackColor = RGB(255, 0, 0)
End Sub
Private Sub MarkAsValid(ByRef Obj As Object)
    Obj.BackColor = &H80000005
End Sub

'----------------------------------------------------------
' Adattisztitas
'----------------------------------------------------------

Public Function FloatToString(ByVal Value As Variant) As String
'tizedes szamkent tarolt erteket (mindig pont a tizedes elvalaszto) a megfelelo formatumra (vesszo) konvertalja
'Ha nem ertelmezheto szamkent, az eredeti erteket hagyja

    On Error GoTo ErrHandler
    
    If Not IsNumeric(Value) Then GoTo ZeroExit
    
    Dim SeparatorStr As String
    SeparatorStr = Application.International(xlDecimalSeparator)
    FloatToString = Replace(CStr(Value), ".", SeparatorStr, , , vbTextCompare)
    
CleanExit:
    Exit Function
ZeroExit:
    FloatToString = Value
    GoTo CleanExit
ErrHandler:
    FloatToString = Value
    Resume CleanExit
End Function

Public Function DateToString(ByVal Value As Variant) As String
'Datumkent vagy double-kent tarolt erteket datum stringge konvertal
    
    On Error GoTo ErrHandler
    
    If Not IsDate(Value) Then GoTo ZeroExit
    
    DateToString = CStr(Value)
    
CleanExit:
    Exit Function
ZeroExit:
    DateToString = Value
    GoTo CleanExit
ErrHandler:
    DateToString = Value
    Resume CleanExit
End Function

Public Function StringToFloat(ByVal Value As String) As Double
'szamnak latszo erteket szamma konvertal, fuggetlenul attol, hogy vesszovel vagy ponttal valasztottak el a tizedest
'Ellenorizz|fffd|k a tizedes elv|fffd|laszt|fffd|jelet, |fffd|s cser|fffd|lj|fffd|k, ha sz|fffd|ks|fffd|ges
'Ha nem ertelmezheto szamkent, nullat ad vissza
    
    On Error GoTo ErrHandler
    
    If Value = vbNullString Then GoTo ZeroExit
    
    Dim TempValueStr As String
    TempValueStr = CStr(Value)
    Dim TempValueDbl As Double
    TempValueDbl = 0
    Dim SeparatorStr As String
    SeparatorStr = Application.International(xlDecimalSeparator)
  
    Select Case SeparatorStr
        Case ","
            If InStr(1, TempValueStr, ".", vbTextCompare) > 0 Then
                TempValueStr = Replace(TempValueStr, ".", ",", , , vbTextCompare)
            End If
        Case "."
            If InStr(1, TempValueStr, ",", vbTextCompare) > 0 Then
                TempValueStr = Replace(TempValueStr, ",", ".", , , vbTextCompare)
            End If
        Case Else
            'nincs kezelve
    End Select
    TempValueDbl = CDbl(TempValueStr)
    TempValueDbl = Round(TempValueDbl, 2)
    'RETURN
    StringToFloat = TempValueDbl

CleanExit:
    Exit Function
ZeroExit:
    StringToFloat = 0
    GoTo CleanExit
ErrHandler:
    StringToFloat = 0
    Resume CleanExit
End Function

Public Function StringToInteger(ByVal Value As String) As Long
'szamnak latszo erteket szamma konvertal
'Ha nem ertelmezheto szamkent, nullat ad vissza
'vesszot-pontot nem ertelmez
    On Error GoTo ErrHandler
    If Value = vbNullString Or Not IsNumeric(Value) Then GoTo ZeroExit
    StringToInteger = CLng(Value)

CleanExit:
    Exit Function
ZeroExit:
    StringToInteger = 0
    GoTo CleanExit
ErrHandler:
    StringToInteger = 0
    Resume CleanExit
End Function

Public Function StringToDate(ByVal Value As String) As Double
'datumnak latszo erteket datumma konvertal
'Ha nem ertelmezheto datumkent, nullat ad vissza
    On Error GoTo ErrHandler
    If Value = vbNullString Or Not IsDate(Value) Then GoTo ZeroExit
    StringToDate = CDbl(CDate(Value))

CleanExit:
    Exit Function
ZeroExit:
    StringToDate = 0
    GoTo CleanExit
ErrHandler:
    StringToDate = 0
    Resume CleanExit
End Function
Attribute VB_Name = "ImportProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Type TFields
    sht As Worksheet
    HeaderRange As Range 'fejlec range
    LastUsedRow As Long 'utolso rekord sorszama
    HdrDict As Scripting.Dictionary 'fejlec ertekei szotarkent >> {MezoNeve:OszlopIndex}
End Type
Private this As TFields

''
' Osztaly konstruktor
Private Sub Class_Initialize()
    With this
        Set .sht = GetImportSheet()
        'Protection off
        .sht.Unprotect INTERNAL_PWD
    End With
End Sub

''
' Osztaly destruktor
Private Sub Class_Terminate()
    'protection vissza
    With this.sht
        .Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
        .EnableOutlining = True
    End With
End Sub

Public Sub ClearSheet()
    this.sht.Cells.Clear
End Sub

Public Sub Refresh()
    With this
        Set .HeaderRange = GetHeaderRange()
        .LastUsedRow = FindLastUsedRow()
        Set .HdrDict = GetHeaderDict(.HeaderRange)
    End With
End Sub

Public Function GetDataColumn(ByVal FieldName As String) As Range
'Egy adott mezohoz tartozo adatok range hivatkozasat adja meg.
    If this.HdrDict.Exists(FieldName) And this.LastUsedRow > 1 Then
        Dim col As Long: col = this.HdrDict(FieldName)
        With this.sht
            Set GetDataColumn = .Range(.Cells(2, col), .Cells(this.LastUsedRow, col))
        End With
    End If
End Function

Public Function FieldExists(ByVal FieldName As String) As Boolean
' Validalja, hogy egy mezo elnevezes letezik-e a lapon.
    FieldExists = this.HdrDict.Exists(FieldName)
End Function

''
' Import lap hivatkozasat adja meg visszateresi ertekkent. Ha nem letezik, letrehozza.
'
' @return               import lap hivatkozas (Worksheet obj)
Private Function GetImportSheet() As Worksheet
    Dim sht As Worksheet
    On Error Resume Next
        Set sht = ThisWorkbook.Worksheets("import")
        If Err.Number <> 0 Then Err.Clear
    On Error GoTo 0
    If sht Is Nothing Then
        Set sht = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        sht.Name = "import"
    End If
    Set GetImportSheet = sht
            
End Function

Private Function GetHeaderRange() As Range
'Fejlec range hivatkozasat adja meg
    With this.sht
        Dim lc As Long 'last column
        lc = FindLastColumnInRange(.Rows(1))
        If lc > 0 Then
            Set GetHeaderRange = .Range(.Cells(1, 1), .Cells(1, lc))
        End If
    End With
End Function

Private Function FindLastUsedRow() As Long
'megkeresi az utolso hasznalt sort (utolso rekord sorat)
    FindLastUsedRow = FindLastRowInRange(this.sht.Columns(1))
End Function

Private Function GetHeaderDict(ByVal hdr As Range) As Scripting.Dictionary
'Header-t betolti egy dictionarybe -> Key:=hdr felirat, Value:=oszlop sorszam
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr.Cells
        tempdict(CStr(c.Value)) = c.Column
    Next c
    Set GetHeaderDict = tempdict
End Function

Private Function FindLastRowInRange(ByVal rng As Range) As Long
'Description: finds the last row in a range
'Inputs:      Range
'Outputs:     Row number (long), zero if error occurs

'   check range
    If rng Is Nothing Then Exit Function

    On Error Resume Next
    FindLastRowInRange = Application.WorksheetFunction.Max( _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row, _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row)
    On Error GoTo 0

End Function

Private Function FindLastColumnInRange(ByVal rng As Range) As Long
'Description: finds the last column in a range
'Inputs:      Range
'Outputs:     column number (long), zero if error occured

'   check range
    If rng Is Nothing Then Exit Function

        On Error Resume Next
        FindLastColumnInRange = Application.WorksheetFunction.Max( _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column, _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column)
        On Error GoTo 0

End Function
Attribute VB_Name = "Munka3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "SpinButton1, 5, 0, MSForms, SpinButton"
Attribute VB_Name = "RegistryManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Gomb szovegek
Private Const NincsFelirat As String = "---"
Private Const txtTelepitve As String = "TELEP|fffd|TVE"
Private Const txtTelepites As String = "TELEP|fffd|T|fffd|S"
Private Const txtRegisztralva As String = "REGISZTR|fffd|LVA"
Private Const txtRegisztracio As String = "REGISZTR|fffd|CI|fffd|"
Private Const txtRegHiba As String = "REG HIBA"

'Uzenet szovegek
Private Const titleTelep As String = "Telep|fffd|t|fffd|s"
Private Const titleReg As String = "Regisztr|fffd|ci|fffd|"
Private Const titleCheckReg As String = "Regisztr|fffd|ci|fffd| ellen|fffd|rz|fffd|s"
Private Const msgTelepOK As String = "Sikeresen telep|fffd|tve."
Private Const msgRegOk As String = "Sikeresen regisztr|fffd|lva."
Private Const msgRegFail As String = "A regisztr|fffd|ci|fffd| sikertelen."
Private Const msgCheckRegFail As String = "A regisztr|fffd|ci|fffd| ellen|fffd|rz|fffd|s hib|fffd|t tal|fffd|lt. A program le|fffd|ll."
Private Const msgProbaidoFail As String = "A pr|fffd|baid|fffd| lej|fffd|rt. K|fffd|rem regisztr|fffd|lja a programot."

Private Type TFields
    telepkell As Boolean 'Kell-e telepiteni
    telepok As Boolean 'Telepitve
    regkell As Boolean 'Kell-e regisztr|fffd|lni
    regsikerok As Boolean 'Volt-e mar egyszer sikeresen regisztralva
    regcheckok As Boolean 'Regisztralt rendszer eseten a kovetkezo check eredmenye
    regpidokell As Boolean 'Van-e probaido
    regpidolejardatum As Long 'probaido lejarat utolso napja
End Type
Private this As TFields

Private Sub Class_Initialize()
    Refresh
End Sub

Private Sub Refresh()
    With SetupProxy.Create(shtSetupSys)
        this.telepkell = CBool(.SysSettingValue("telepkell"))
        this.telepok = CBool(.SysSettingValue("telepok"))
        this.regkell = CBool(.SysSettingValue("regkell"))
        this.regsikerok = CBool(.SysSettingValue("regsikerok"))
        this.regcheckok = CBool(.SysSettingValue("regcheckok"))
        this.regpidokell = CBool(.SysSettingValue("regpidokell"))
        this.regpidolejardatum = CLng(.SysSettingValue("regpidolejardatum"))
    End With
End Sub

Public Sub StartTelepites()
' telep|fffd|t|fffd|si folyamat ind|fffd|t|fffd|sa a TELEP|fffd|T|fffd|S gomb hat|fffd|s|fffd|ra
    If this.telepkell And Not this.telepok Then 'ha kell telepiteni es meg nincs telepitve
        If Telepites = True Then
            'sikeres telepites
            OnTelepitesOK
        Else
            'sikertelen telepites --> egyelore nincs ilyen
        End If
    End If
End Sub

Private Function Telepites() As Boolean
' a p|fffd|ld|fffd|ny telep|fffd|t|fffd|se
        Telepites = True 'Nincs semmi egyeb teendo
End Function

Private Sub OnTelepitesOK()
'sikeres telepites eseten
    'Setup status update
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "telepdatum", Date
        .UpdateSysSettingValue "telepok", 1
    End With
    'MsgBox
    MsgBox msgTelepOK, vbOKOnly, titleTelep
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub

Public Function StartRegisztracio() As Boolean
' a regisztr|fffd|ci|fffd|s folyamat ind|fffd|t|fffd|sa a REGISZTR|fffd|CI|fffd| gomb hat|fffd|s|fffd|ra vagy probaido lejartakor
    If this.telepok And this.regkell And Not this.regsikerok Then 'mar volt telepitve, kell regisztralni es meg nem volt regisztralva
        If Regisztracio = True Then
            'sikeres regisztracio
            OnRegisztracioOk
            StartRegisztracio = True
        Else
            'sikertelen regisztracio
            OnRegisztracioFail
            StartRegisztracio = False
        End If
    End If
End Function

Private Function Regisztracio() As Boolean
    If RegProcess = True Then
        GoTo ExitOK
    Else
        GoTo ExitFail
    End If
ExitFail:
    Regisztracio = False
    Exit Function
ExitOK:
    Regisztracio = True
    Exit Function
End Function

Private Sub OnRegisztracioOk()
    'Setup status update
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "regsikerdatum", Date
        .UpdateSysSettingValue "regsikerok", 1
        .UpdateSysSettingValue "regcheckok", 1
        .UpdateSysSettingValue "regpidokell", 0 'probaido kikapcsolasa
    End With
    'MsgBox
    MsgBox msgRegOk, vbOKOnly, titleReg
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub

Private Sub OnRegisztracioFail()
    'Setup status update --> NINCS
'    With SetupProxy.Create(shtSetupSys)
'        .UpdateSysSettingValue "...", ...
'    End With
    'MsgBox
    MsgBox msgRegFail, vbOKOnly, titleReg
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub

Public Function CheckRegistrationOnOpen() As Boolean
'Regisztracio ellenorzese fajl megnyitasakor
    If this.regsikerok = True Then 'ha nincs meg regisztralva, akkor passz
        If CheckRegistration = True Then
            'sikeres check
            OnCheckRegistrationOK
            CheckRegistrationOnOpen = True
        Else
            'hibas check
            OnCheckRegistrationFail
            CheckRegistrationOnOpen = False
        End If
    End If
End Function

Public Function CheckRegistration() As Boolean
    If CheckHash(GetHash) = False Then
        GoTo ExitFail
    Else
        GoTo ExitOK
    End If
ExitFail:
    CheckRegistration = False
    Exit Function
ExitOK:
    CheckRegistration = True
    Exit Function
End Function

Private Sub OnCheckRegistrationOK()
    'Setup status update
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "regcheckok", 1
    End With
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub

Private Sub OnCheckRegistrationFail()
    'Setup status update
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "regcheckok", 0
    End With
    'MsgBox
    MsgBox msgCheckRegFail, vbOKOnly, titleCheckReg
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub

Public Function CheckTrialPeriodOnOpen() As Boolean
'Probaido ellenorzese fajl megnyitasakor
    If this.telepok = True And this.regpidokell = True Then 'telepitve van es van probaido
        If CheckTrialPeriod = True Then
            'sikeres check
            OnCheckRegistrationOK
            CheckTrialPeriodOnOpen = True
        Else
            'hibas check
            OnCheckRegistrationFail
            CheckTrialPeriodOnOpen = False
        End If
    End If
End Function

Private Function CheckTrialPeriod() As Boolean
    If this.regpidolejardatum >= Date Then
        GoTo ExitOK
    Else
        GoTo ExitLejart
    End If
ExitLejart:
    CheckTrialPeriod = False
    Exit Function
ExitOK:
    CheckTrialPeriod = True
    Exit Function
End Function

Private Sub OnCheckTrialPeriodOK()
    'Pass
End Sub

Private Sub OnCheckTrialPeriodFail()
    'MsgBox
    MsgBox msgProbaidoFail, vbOKOnly, titleCheckReg
End Sub

Private Sub GombFeliratok()
    'TELEPITES gomb
    If this.telepkell Then                  'kell telepiteni?
        If this.telepok Then                'sikeresen telepitve?
            GombSzoveg "btnTelep", txtTelepitve, 10 'zold
        Else
            GombSzoveg "btnTelep", txtTelepites, 1 'fekete
        End If
    Else
        GombSzoveg "btnTelep", NincsFelirat, 16 'szurke
    End If
    'REGISZTRACIO gomb
    If this.regkell Then                    'kell regisztralni?
        If this.regsikerok Then             'volt sikeres elso regisztracio?
            If this.regcheckok Then         'regisztracio utani check ok?
                GombSzoveg "btnReg", txtRegisztralva, 10 'zold
            Else
                GombSzoveg "btnReg", txtRegHiba, 9 'bordo
            End If
        Else
            GombSzoveg "btnReg", txtRegisztracio, 1 'fekete
        End If
    Else
        GombSzoveg "btnReg", NincsFelirat, 16 'szurke
    End If
End Sub

Private Sub GombSzoveg(ByVal btn, btntxt, color)
' gombsz|fffd|veg |fffd|t|fffd|r|fffd|sa
    With shtStart.Shapes(btn).TextFrame.Characters
        .Text = btntxt
        .Font.ColorIndex = color
    End With
End Sub

Private Function CheckHash(ByVal hash As String) As Boolean
    CheckHash = (StrComp(GetSysIdHash, hash, vbTextCompare) = 0)
End Function

Private Function GetSysId() As String
    GetSysId = GetIdAsHex
End Function

Private Function GetSysIdHash() As String
    With New CSHA256
        Dim temp As String: temp = .SHA256(UCase(GetIdAsHex))
        'csak elso 16 karaktert hasznaljuk
        GetSysIdHash = UCase(Join(Array(Mid(temp, 1, 4), Mid(temp, 5, 4), Mid(temp, 9, 4), Mid(temp, 13, 4)), "-"))
    End With
End Function

Private Function RegProcess() As Boolean
    Dim BoxTitle As String: BoxTitle = Join(Array("Telep|fffd|t|fffd|si azonos|fffd|t|fffd|", GetSysId), " : ")
    Dim InputValue As String
    InputValue = InputBox("K|fffd|rj|fffd|k adja meg a fenti sz|fffd|mhoz kapott regisztr|fffd|ci|fffd|s k|fffd|dot", BoxTitle)
    If InputValue = vbNullString Then
        GoTo ExitFail
    Else
        If CheckHash(InputValue) = True Then
            SaveHash InputValue
            GoTo ExitOK
        Else
            GoTo ExitFail
        End If
    End If
ExitFail:
    RegProcess = False
    Exit Function
ExitOK:
    RegProcess = True
    Exit Function
End Function

Private Sub SaveHash(ByVal hash As String)
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "regregid", hash
    End With
End Sub

Private Function GetHash() As String
    With SetupProxy.Create(shtSetupSys)
        GetHash = .SysSettingValue("regregid")
    End With
End Function

Private Function GetIdAsHex() As String
    Dim fso As Object: Set fso = CreateObject("Scripting.FileSystemObject")
    Dim drv As Object: Set drv = fso.GetDrive("C")
    If drv.IsReady Then
        Dim DecimalSerial As Variant: DecimalSerial = drv.SerialNumber
        GetIdAsHex = CStr(Hex(DecimalSerial))
    End If
End Function

Public Sub Reset()
'regisztracios ertekek nullazasa
    'Setup status update
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "telepdatum", 0
        .UpdateSysSettingValue "telepok", 0
        .UpdateSysSettingValue "regkell", 0
        .UpdateSysSettingValue "regsikerok", 0
        .UpdateSysSettingValue "regcheckok", 0
        .UpdateSysSettingValue "regpidokell", 0
        .UpdateSysSettingValue "regregid", vbNullString
    End With
    'Osztaly mezok frissitese
    Refresh
    'StartLap gomb feliratok update
    GombFeliratok
End Sub
Attribute VB_Name = "SetupProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'@PredeclaredID

Private Const ERTEK As String = "e"         'ezzel jeloljuk, hogy keplet helyett ertek szukseges

Private Type TFields
    sht As Worksheet 'kapcsolodo munkalap hivatkozasa
    IDREF As String
    IDcell As Range 'ID cella fejlecben
    HeaderRange As Range 'fejlec range
    LastUsedRow As Long 'utolso rekord sorszama
    HdrDict As Scripting.Dictionary 'fejlec ertekei szotarkent >> {MezoNeve:OszlopIndex}
'    ControlDict As Scripting.Dictionary 'keplet/ertek szotar >> {MezoNeve:k/e}
    Protected As Boolean
    Props As Scripting.Dictionary
End Type
Private this As TFields

Private Const IDMissingError = "ID oszlopa nem tal|fffd|lhat|fffd|"
Private Const IDNotValidError = "ID nem |fffd|rtelmezhet|fffd|"
Private Const HeaderMissingError = "{HeaderMissing}"

Public Property Get Self() As SetupProxy
    Set Self = Me
End Property

Public Property Get sht() As Worksheet
    Set sht = this.sht
End Property
Public Property Set sht(ByVal Value As Worksheet)
    Set this.sht = Value
End Property

Public Property Get HeaderRange() As Range
    Set HeaderRange = this.HeaderRange
End Property
Public Property Set HeaderRange(ByVal Value As Range)
    Set this.HeaderRange = Value
End Property

Public Property Get DefaultSortOnColumn() As Long
    DefaultSortOnColumn = this.IDcell.Column
End Property

''
' Megadja az elsodleges kulcsmezo elnevezeset.
'
' @return               elsodleges kulcsmezo elnevezese
Public Property Get IDREF() As String
    IDREF = this.IDREF
End Property

''
' Beallitja az elsodleges kulcsmezo elnevezeset.
'
' @param IDREF          elsodleges kulcsmezo elnevezese
Public Property Let IDREF(ByVal Value As String)
    this.IDREF = Value
End Property

Public Property Get IDcell() As Range
    Set IDcell = this.IDcell
End Property
Public Property Set IDcell(ByVal Value As Range)
    Set this.IDcell = Value
End Property

Public Property Get LastUsedRow() As Long
    LastUsedRow = this.LastUsedRow
End Property
Public Property Let LastUsedRow(ByVal Value As Long)
    this.LastUsedRow = Value
End Property

Public Property Get HeaderDict() As Scripting.Dictionary
    Set HeaderDict = this.HdrDict
End Property
Public Property Set HeaderDict(ByVal Value As Scripting.Dictionary)
    Set this.HdrDict = Value
End Property

Public Property Get Protected() As Boolean
    Protected = this.Protected
End Property
Public Property Let Protected(ByVal Value As Boolean)
    this.Protected = Value
End Property

Public Property Get Props() As Scripting.Dictionary
    Set Props = this.Props
End Property
Public Property Set Props(ByVal Value As Scripting.Dictionary)
    Set this.Props = Value
End Property

'Public Property Get ControlDict() As Scripting.Dictionary
'    Set ControlDict = this.ControlDict
'End Property
'Public Property Set ControlDict(ByVal Value As Scripting.Dictionary)
'    Set this.ControlDict = Value
'End Property

Public Property Get DataRange() As Range
'Megadja az adatokat tartalmazo terulet (range) hivatkozasat.
    If this.LastUsedRow > this.HeaderRange.Row Then
        Set DataRange = this.HeaderRange.Offset(1).Resize(this.LastUsedRow - this.HeaderRange.Row)
    Else
        'nincs adat sor --> DataRange Is Nothing
    End If
End Property

Public Property Get SettingValue(ByVal SearchFieldName As String, ByVal SearchFieldValue As Variant, _
                                 ByVal ReturnFieldName As String) As Variant
    SettingValue = FindRecordField(SearchFieldName, SearchFieldValue, ReturnFieldName)
End Property
Public Sub UpdateSettingValue(ByVal SearchFieldName As String, ByVal SearchFieldValue As Variant, _
                                 ByVal ReturnFieldName As String, ByVal SetValue As Variant)
    SetRecordField SearchFieldName, SearchFieldValue, ReturnFieldName, SetValue
End Sub
Public Property Get SysSettingValue(ByVal SearchFieldValue As Variant) As Variant
    SysSettingValue = FindRecordField("ssnev", SearchFieldValue, "ssdata")
End Property
Public Sub UpdateSysSettingValue(ByVal SearchFieldValue As Variant, ByVal SetValue As Variant)
    SetRecordField "ssnev", SearchFieldValue, "ssdata", SetValue
End Sub


Public Function Create(ByVal sht As Object, Optional ByVal IDREF As String = vbNullString) As SetupProxy

    With New SetupProxy
        Set .sht = sht
        .IDREF = IIf(IDREF = vbNullString, sht.GetPropVal("IDColumnHeader"), IDREF)
        Set .IDcell = FindIDcell(.sht, .IDREF)
        Set .HeaderRange = GetHeaderRange(.IDcell)
        .LastUsedRow = FindLastUsedRow(.IDcell.EntireColumn)
        Set .HeaderDict = GetHeaderDict(.HeaderRange)
'        Set .ControlDict = GetControlDict(.HeaderRange)
'        .Protected = .sht.ProtectContents   'save protected status
'        .sht.Unprotect INTERNAL_PWD 'unprotect
        Set Create = .Self
    End With
    
End Function

'Private Sub Class_Terminate()
'    If this.Protected Then 'restore protected status
'        this.sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
'        this.sht.EnableOutlining = True
'    End If
'End Sub

Public Function GetPropVal(ByVal Key As String) As Variant
    If this.Props.Exists(Key) Then
        GetPropVal = Props(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:="WorksheetProxy " & sht.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function

'-----------------------------------------------------------------------------
' SZURES - RENDEZES
'-----------------------------------------------------------------------------

Public Sub ResetFilters(Optional ByVal SortOrder As XlSortOrder = xlAscending)
'minden szurot torol, ID szerint rakja sorba
    
    Dim sht As Worksheet:       Set sht = this.sht
    Dim HeaderRange As Range:   Set HeaderRange = this.HeaderRange
    Dim DefaultSortOnColumn As Long:    DefaultSortOnColumn = Me.DefaultSortOnColumn
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, DefaultSortOnColumn)
    
    '4. sor tisztitasa
    HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow")).ClearContents
    
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    'minden filter torlese
    If sht.FilterMode Then sht.ShowAllData

    With sht.AutoFilter.Sort.SortFields

        'Rendezes hozzaadasa
        .Clear
        .Add Key:=rng, SortOn:=xlSortOnValues, Order:=SortOrder

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
        .SortFields.Clear
    End With

End Sub

Public Sub SortTable(ByVal Target As Range)
'a Target oszlopat sorba rendezi, egyszer novekvo egyszer csokkeno sorrendben

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, Target.Column)

    Dim NewSortOrder As XlSortOrder

    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    With sht.AutoFilter.Sort.SortFields

        'check van-e mar sorbarendezes
        If .Count > 0 Then
            'van sorbarendezes
            'check ugyanaz az oszlop-e
            If Not Intersect(.Item(1).Key, Target.Columns(1).EntireColumn) Is Nothing Then
                'ugyanaz az oszlop
                'check irany
                If .Item(1).Order = xlAscending Then
                    'novekvo sorrend -> uj: csokkeno
                    NewSortOrder = xlDescending
                Else
                    'csokkeno sorrend -> uj: novekvo
                    NewSortOrder = xlAscending
                End If
            Else
                'masik oszlop -> novekvo sorrend
                NewSortOrder = xlAscending
            End If
        Else
            'nincs sorbarendezes -> novekvo sorrend
            NewSortOrder = xlAscending
        End If

        'Rendezes hozzaadasa
        .Clear
        .Add Key:=rng, SortOn:=xlSortOnValues, Order:=NewSortOrder

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
    End With

End Sub

Public Sub FilterTable(ByVal Target As Range)
'a Target oszlopat szuri, target erteke alapjan
'tobb cella is lehet egyszerre

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    Dim c As Range
    For Each c In Target
        'get field value
        Dim fld As Long
        fld = c.Column - HeaderRange.Cells(1).Column + 1
        'get criteria
        If c.Value = vbNullString Then
            'cellat toroltek --> filter torlese
            HeaderRange.AutoFilter Field:=fld
        ElseIf IsNumeric(c.Value) Then
            'numeric filter -> teljes egyezes
            Dim crit As String
            crit = DotSeparator(c.Value)
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        ElseIf IsDate(c.Value) Then
            'date filter -> teljes egyezes
            crit = CStr(CLng(c.Value))
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        Else
            'szoveges szuro -> reszleges egyezes
            crit = "*" & c.Value & "*"
            HeaderRange.AutoFilter Field:=fld, Criteria1:=crit
        End If
    Next c

End Sub

Public Sub HandleColors()
' kezeli a fejlec szineket (szures-rendezesnel)

    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange

    'alap szinek
    '3. sor
    ColorSortBase HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("SortRow"))
    '4. sor
    ColorFilterBase HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow"))

    Dim sht As Worksheet:   Set sht = this.sht
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

        'check van-e sorbarendezes
        If sht.AutoFilter.Sort.SortFields.Count > 0 Then
            'van sorbarendezes
            'egesz 3. sor szinezese elenk kekre
            ColorSortUsed HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("SortRow"))
        End If

        'check van-e filter
        If sht.AutoFilter.FilterMode = True Then
            'van szures
            'egesz 4. sor szinezese elenk sargara
            ColorFilterUsed HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow"))
        End If

        Dim c As Range
        For Each c In HeaderRange

                'check oszlop
                With sht.AutoFilter.Sort.SortFields
                    If .Count > 0 Then
                        If Not Intersect(sht.AutoFilter.Sort.SortFields.Item(1).Key, c) Is Nothing Then
                            'sort oszlop szinezese sotetkekre
                            ColorSortSorted c.Offset(-c.Row + Me.GetPropVal("SortRow"))
                        End If
                    End If
                End With
                If sht.AutoFilter.Filters(c.Column - sht.AutoFilter.Range.Column + 1).On Then
                    'filter oszlop szinezese narancssargara
                    ColorFilterFiltered c.Offset(-c.Row + Me.GetPropVal("FilterRow"))
                End If

        Next c

End Sub

Private Sub ColorFilterBase(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterBase")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterBase")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterBase")(2))
    End With
End Sub
Private Sub ColorFilterUsed(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterUsed")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterUsed")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterUsed")(2))
    End With
End Sub
Private Sub ColorFilterFiltered(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterFiltered")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterFiltered")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterFiltered")(2))
    End With
End Sub

Private Sub ColorSortBase(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortBase")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortBase")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortBase")(2))
    End With
End Sub
Private Sub ColorSortUsed(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortUsed")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortUsed")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortUsed")(2))
    End With
End Sub
Private Sub ColorSortSorted(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortSorted")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortSorted")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortSorted")(2))
    End With
End Sub


'-----------------------------------------------------------------------------
' EGYEB
'-----------------------------------------------------------------------------

'Public Sub Refresh()
''Frissiti az utolso sor elmentett erteket
'    this.LastUsedRow = FindLastUsedRow(this.IDcell.EntireColumn)
'End Sub

Private Function GetHeaderDict(ByVal hdr As Range) As Scripting.Dictionary
'Header-t betolti egy dictionarybe -> Key:=hdr felirat, Value:=oszlop sorszam
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr.Cells
        tempdict(CStr(c.Value)) = c.Column
    Next c
    Set GetHeaderDict = tempdict
End Function

'Private Function GetControlDict(ByVal hdr As Range) As Scripting.Dictionary
''Controlt (adott oszlop ertek vagy keplet) betolti dictionary-be -> Key:=hdr felirat, Value:=k/e
'    Dim c As Range
'    Dim tempdict As Scripting.Dictionary
'    Set tempdict = New Scripting.Dictionary
'    tempdict.CompareMode = TextCompare
'    For Each c In hdr
'        tempdict(CStr(c.Value)) = CStr(c.Offset(PASTECONTROLROW - hdr.Row).Value)
'    Next c
'    Set GetControlDict = tempdict
'End Function

Private Function FindIDcell(ByVal sht As Worksheet, ByVal IDREF As String) As Range
'Megkeresi a fejlec ID cellajat ID string alapjan
    Set FindIDcell = sht.Cells.Find(What:=IDREF, LookAt:=xlWhole)
End Function

Private Function GetHeaderRange(ByVal IDcell As Range) As Range
'megadja a fejlec hivatkozasat (Range)
    Dim sht As Worksheet: Set sht = IDcell.Parent
    Dim lc As Long 'last column
    lc = FindLastColumnInRange(IDcell.EntireRow)
    Set GetHeaderRange = sht.Range(IDcell, sht.Cells(IDcell.Row, lc))
End Function

Private Function FindLastUsedRow(ByVal IDColumn As Range) As Long
'megkeresi az utolso hasznalt sort (utolso rekord sorat)
    FindLastUsedRow = FindLastRowInRange(IDColumn)
End Function

Private Function FindLastColumnInRange(ByVal rng As Range) As Long
'Description: finds the last column in a range
'Inputs:      Range
'Outputs:     column number (long), zero if error occured

'   check range
    If rng Is Nothing Then Exit Function

        On Error Resume Next
        FindLastColumnInRange = Application.WorksheetFunction.Max( _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column, _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column)
        On Error GoTo 0

End Function

Private Function FindLastRowInRange(ByVal rng As Range) As Long
'Description: finds the last row in a range
'Inputs:      Range
'Outputs:     Row number (long), zero if error occurs

'   check range
    If rng Is Nothing Then Exit Function

    On Error Resume Next
    FindLastRowInRange = Application.WorksheetFunction.Max( _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row, _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row)
    On Error GoTo 0

End Function


'Public Function IDExists(ByVal IDDataRange As Range, ByVal ID As Long) As Boolean
''ellenorzi, hogy ID letezik-e az IDColumn oszlopban
'    Dim r As Range
'    Set r = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
'    IDExists = Not r Is Nothing
'End Function
'
'Private Function FindID(ByVal IDDataRange As Range, ByVal ID As Long) As Long
''megkeresi az ID erteket es visszaadja a sorszamat. Ha nem talalja, akkor 0-t ad.
'    Dim r As Range
'    Set r = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
'    If Not r Is Nothing Then
'        FindID = r.Row
'    Else
'        FindID = 0
'    End If
'End Function
'
'
'Public Function GetRowID(ByVal sor As Long) As Long
''adott sorhoz tartozo ID erteket adja meg
''ha nincs ertek, akkor 0-t ad
''ha nem adat sor, -1-et ad
'    If sor <= this.IDcell.Row Then
'        GetRowID = -1
'        Exit Function
'    End If
'    Dim tmpID As Variant
'    tmpID = GetRecordField(sor, this.IDREF)
'    If IsNumeric(tmpID) Then
'        GetRowID = CLng(tmpID)
'    Else
'        MsgBox "'" & tmpID & "' " & IDNotValidError
'        GetRowID = 0
'    End If
'End Function

Private Function GetRecordField(ByVal sor As Long, ByVal FieldName As String) As Variant
'Sor es fejlec felirat alapjan megkeresi egy cella erteket
    If this.HdrDict.Exists(FieldName) Then
        GetRecordField = sht.Cells(sor, this.HdrDict(FieldName)).Value
    Else
        GetRecordField = HeaderMissingError
    End If
End Function

Private Function FindRecordField(ByVal SearchFieldName As String, ByVal SearchFieldValue As Variant, _
                                 ByVal ReturnFieldName As String) As Variant
'Egy mezo erteke alapjan megkeres egy rekordot es visszaadja egy masik mezo erteket
'Ha tobb talalat lenne, az elsot adja vissza
    If Not SearchFieldValue = vbNullString Then
        If this.HdrDict.Exists(SearchFieldName) And this.HdrDict.Exists(ReturnFieldName) Then
            Dim R As Range
            Set R = GetFieldAsRange(SearchFieldName).Find(What:=SearchFieldValue, LookAt:=xlWhole, LookIn:=xlValues)
            If Not R Is Nothing Then
                FindRecordField = sht.Cells(R.Row, this.HdrDict(ReturnFieldName)).Value
            End If
        End If
    End If
End Function

Private Sub SetRecordField(ByVal SearchFieldName As String, ByVal SearchFieldValue As Variant, _
                           ByVal ReturnFieldName As String, ByVal SetValue As Variant)
'Egy mezo erteke alapjan megkeres egy rekordot es felulirja egy masik mezo erteket
'Ha tobb talalat lenne, az elsot adja vissza
    
    'protection ki
    With this.sht
        Dim Protected As Boolean: Protected = .ProtectContents
        .Unprotect INTERNAL_PWD
    End With
    
    If Not SearchFieldValue = vbNullString Then
        If this.HdrDict.Exists(SearchFieldName) And this.HdrDict.Exists(ReturnFieldName) Then
            Dim R As Range
            Set R = GetFieldAsRange(SearchFieldName).Find(What:=SearchFieldValue, LookAt:=xlWhole, LookIn:=xlValues)
            If Not R Is Nothing Then
                sht.Cells(R.Row, this.HdrDict(ReturnFieldName)).Value = SetValue
            End If
        End If
    End If
    
    'protection vissza
    With this.sht
        If Protected Then
            .Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
            .EnableOutlining = True
        End If
    End With

End Sub

'Public Function GetFilteredList(ByVal SearchDict As Scripting.Dictionary, ByVal ReturnFieldName As String, _
'                                Optional ByVal Distinct As Boolean = False, _
'                                Optional ByVal AllowEmpty As Boolean = False) As Variant
''dict {SearchFieldName:SearchFieldValue}
'    Dim arr As Variant: arr = DataRange.Value2
'    Dim SearchFieldName As Variant
'    For Each SearchFieldName In SearchDict.Keys
'        Dim SearchCol As Long:      SearchCol = this.HdrDict(SearchFieldName) - this.IDcell.Column + 1
'        Dim SearchFieldValue As Variant: SearchFieldValue = SearchDict(SearchFieldName)
'        arr = FilterArray(arr, SearchCol, SearchFieldValue)
'    Next SearchFieldName
'    If Not IsEmpty(arr) Then
'        arr = Application.Transpose(Application.Index(arr, , this.HdrDict(ReturnFieldName) - this.IDcell.Column + 1))
'        If Not AllowEmpty Then
'            arr = RemoveEmptyItems(arr)
'        End If
'        If Distinct Then
'            arr = KeepDistinctItems(arr)
'        End If
'    End If
'    GetFilteredList = arr
'End Function
'
'Public Function GetTetelData(ByVal ID As Long) As Tetel
''betolti a letezo rekord ertekeket 'Egyeb' objektumba
'    If IDExists(IDDataRange, ID) Then
'        Dim sor As Long
'        sor = FindID(IDDataRange, ID)
'        Set GetTetelData = GetExistingRecord(sor)
'    End If
'End Function
'
'Private Function GetExistingRecord(ByVal sor As Long) As Tetel
''adott sorbol beolvassa az ertekeket 'Tetel' objektumba
'
'    Dim tetelData As Tetel
'    Set tetelData = New Tetel
'
'    'Az osszes oszlopot beolvassuk a Tetelbe -> Majd a form kivalogatja, neki mi kell
'    Dim key As Variant
'    For Each key In this.HdrDict.Keys
'        tetelData.AddItem key, GetRecordField(sor, key)
'    Next key
'
'    'RETURN
'    Set GetExistingRecord = tetelData
'
'End Function
'
'Public Function GetIDs(Optional ByVal HeaderRef As String) As Object 'Scripting.Dictionary
'' szotarba gyujti a letezo ID szamokat
'
'    Dim href As String
'    href = IIf(HeaderRef = vbNullString, this.IDREF, HeaderRef)
'
'    Dim Pcol As Long
'    Pcol = this.HdrDict(href)
'
'    Dim tempdict As Object
'    Set tempdict = CreateObject("Scripting.Dictionary")
'    tempdict.CompareMode = 0 'binarycompare
'
'    If this.LastUsedRow > IDcell.Row Then 'van rekord
'        Dim rng As Range
'        Set rng = this.Sht.Range(this.Sht.Cells(IDcell.Row, Pcol), this.Sht.Cells(this.LastUsedRow, Pcol))
'        Dim c As Range
'        For Each c In rng
'            If IsNumeric(c.Value) Then
'                tempdict(CLng(c.Value)) = vbNullString
'            End If
'        Next c
'        'RETURN
'        Set GetIDs = tempdict
'    Else 'nincs rekord
'        'Pass
'    End If
'
'End Function

Public Function GetFieldAsRange(ByVal FieldName As String) As Range
'Fejlec felirat alapjan hivatkozast ad egy mezo adat tartomanyara
    If this.HdrDict.Exists(FieldName) Then
        Dim dr As Range
        Set dr = DataRange
        If Not dr Is Nothing Then
            Set GetFieldAsRange = Intersect(DataRange, sht.Columns(this.HdrDict(FieldName)).EntireColumn)
        End If
    End If
End Function

'Private Sub PasteValues(ByVal sor As Long)
''Copy-PasteValues
'
''*************** Ha direktben a tetel sorba irunk es azt rogzitjuk ***************
'    With this.HeaderRange
'        Dim HdrArr As Variant:      HdrArr = .Value2
'        Dim rng As Range:           Set rng = .Offset(-.Row + sor)
'    End With
'    Dim DataFormulaArr As Variant:  DataFormulaArr = rng.FormulaR1C1
'    Dim DataValueArr As Variant:    DataValueArr = rng.Value2
'    Dim ResultArr() As Variant
'    ReDim ResultArr(1 To 1, LBound(HdrArr, 2) To UBound(HdrArr, 2))
'
'    Dim i As Long
'    For i = LBound(HdrArr, 2) To UBound(HdrArr, 2)
'        Dim FieldName As String
'        FieldName = HdrArr(1, i)
'        If StrComp(ControlDict(FieldName), ERTEK, vbTextCompare) = 0 Then
'            ResultArr(1, i) = DataValueArr(1, i)
'        Else
'            ResultArr(1, i) = DataFormulaArr(1, i)
'        End If
'    Next i
'    rng.FormulaR1C1 = ResultArr
'
'
'    'Formatum masolasa
'    With this.HeaderRange
'        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + FORMULAROW)
'        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
'    End With
'
'    RngFormula.Copy
'    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
'    Application.CutCopyMode = False
'
''***********************************************************************************
'
''*************** Ha keplet sorba irunk es azt masoljuk ertekkent ***************
''    With this.HeaderRange
''        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + FORMULAROW)
''        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
''    End With
''
''    RngFormula.Copy
''    RngDestination.PasteSpecial xlPasteValues   'ertekek masolasa
''    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
''    Application.CutCopyMode = False
'
'End Sub
'
'Private Function FilterArray(ByVal SourceArray As Variant, ByVal FilterColumn As Long, ByVal SearchFieldValue As Variant) As Variant
'
'    Dim col_mask() As Variant
'    col_mask = Array()
'    Dim i As Long
'    For i = LBound(SourceArray, 2) To UBound(SourceArray, 2)
'        ReDim Preserve col_mask(LBound(col_mask) To UBound(col_mask) + 1)
'        col_mask(UBound(col_mask)) = i
'    Next i
'
'    Dim row_mask() As Variant
'    row_mask = Array()
'    For i = LBound(SourceArray, 1) To UBound(SourceArray, 1)
'        If SourceArray(i, FilterColumn) = SearchFieldValue Then
'            ReDim Preserve row_mask(LBound(row_mask) To UBound(row_mask) + 1)
'            row_mask(UBound(row_mask)) = i
'        End If
'    Next i
'
'    If UBound(row_mask) >= 0 And UBound(col_mask) >= 0 Then
'        FilterArray = Application.Index(SourceArray, Application.Transpose(row_mask), col_mask)
'    End If
'
'End Function
'
'Private Function RemoveEmptyItems(ByVal SourceArray As Variant) As Variant
'    Dim arr() As Variant
'    ReDim arr(LBound(SourceArray) To UBound(SourceArray))
'
'    Dim i As Long, j As Long
'    For i = LBound(SourceArray) To UBound(SourceArray)
'        If Not (SourceArray(i) = vbNullString Or IsEmpty(SourceArray(i))) Then
'            j = j + 1
'            arr(j) = SourceArray(i)
'        End If
'    Next i
'    ReDim Preserve arr(LBound(SourceArray) To j)
'    RemoveEmptyItems = arr
'
'End Function
'
'Private Function KeepDistinctItems(ByVal SourceArray As Variant) As Variant
'    Dim d As Scripting.Dictionary
'    Set d = New Scripting.Dictionary
'    d.CompareMode = TextCompare
'    Dim i As Variant
'    For Each i In SourceArray
'        d(i) = vbNullString
'    Next i
'    KeepDistinctItems = d.Keys
'End Function


Attribute VB_Name = "TemplateMacros"
Option Explicit
'Option Private Module

Public Const INTERNAL_PWD As String = "adam"
Private Const sModule As String = "TemplateMacros"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'       Entry points

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Public Sub AllowGrouping()
'grouping engedelyezese
'called by Workbook_Open()
    
'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "AllowGrouping"
'-------------------------------------------------
        
    Dim coll As Collection
    Set coll = New Collection
    With coll
        '.Add shtTetelek 'TODO
        '.Add shtNaptar 'TODO
    End With
    
    Dim sht As Variant
    For Each sht In coll
        'protection off
        sht.Unprotect INTERNAL_PWD
        'protection vissza
        sht.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
        sht.EnableOutlining = True
    Next sht
    
'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
    
End Sub

Public Sub ResetView()
'Fokusz: shtMain $A$1
'Called by: ThisWorkbook.Workbook_BeforeSave // ThisWorkbook.Workbook_Open

 'TODO
'    On Error Resume Next
'        With shtMain
'            .Activate
'            .Range("a1").Select
'        End With
'    On Error GoTo 0
    
End Sub

Public Sub FormNyitasMod()
'Tetel modositashoz Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
'Called by: munkalapon levo Button (macro assign)

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormNyitasMod"
'-------------------------------------------------

    Dim sel As Range:       Set sel = Selection
    Dim sht As Object:      Set sht = ActiveSheet
    
    With New Controller
        .FormNyitas sht, sel, False
    End With
    
    sht.Activate: sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
    
End Sub

Public Sub FormNyitasUj()
'Tetel modositashoz Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
'Called by: munkalapon levo Button (macro assign)

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormNyitasUj"
'-------------------------------------------------

    Dim sel As Range:       Set sel = Selection
    Dim sht As Object:      Set sht = ActiveSheet
    
    With New Controller
        .FormNyitas sht, sel, True
    End With
    
    sht.Activate: sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
    
End Sub

'Public Sub FormNyitas()
''Form nyitasa barmelyik munkalaprol, kijelolt cella figyelembevetelevel
''Called by: munkalapon levo Button (macro assign)
'
''--------- Error Handling Initialization -------
'    Select Case DebugMode
'        Case debugBypass
'        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
'        Case debugIgnore:               On Error GoTo IgnoreError
'    End Select
'    Dim sRoutine As String: sRoutine = "FormNyitas"
''-------------------------------------------------
'
'    Dim sel As Range:       Set sel = Selection
'    Dim sht As Object:      Set sht = ActiveSheet
'
'    With New Controller
'        .FormNyitas sht, sel
'    End With
'
'    sht.Activate: sel.Select
'
''******************************************************************************************
'ExitHere:
'    Exit Sub
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'IgnoreError:
'    Resume Next
'
''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
'ErrHandler:
'    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
'        Stop: Resume
'    Else
'    Err.Clear: Resume ExitHere
'    End If
'
'End Sub

Public Sub FormRogzites(ByRef sht As Object, ByVal frm As Object, Optional ByVal CloseForm As Boolean = True)
'Form tartalmanak rogzitese a megfelelo munkalapra
'Called by: Form 'OK' gombja

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormRogzites"
'-------------------------------------------------

    With New Controller
        .FormRogzites sht, frm, CloseForm
    End With
    Application.StatusBar = False

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub FormCancel(ByRef frm As UserForm)
'Form rogzites megszakitasa
'Called by: Form 'Megsem' gombja

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FormCancel"
'-------------------------------------------------

    Unload frm

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoSort(ByVal Target As Range)
'Tabla sorbarendezese a kijelolt cella alapjan
'Called by: Thisworkbook.Workbook_SheetBeforeDoubleClick

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoSort"
'-------------------------------------------------
 
    With New Controller
        .DoSort Target
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoFilter(ByVal Target As Range)
'Tabla szurese kijelolt cella alapjan
'Called by: ThisWorkbook.Workbook_SheetChange

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoFilter"
'-------------------------------------------------

    With New Controller
        .DoFilter Target
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

Public Sub DoReset(ByVal sht As Worksheet)
'Tabla szures / sorbarandezes visszaallitasa
'Called by: ThisWorkbook.ResetButton_Clicked

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "DoReset"
'-------------------------------------------------
    
    With New Controller
        .DoReset sht
    End With

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'       Public functions

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Public Function RangeExists(ByVal RangeName As String, ByVal WS As Worksheet) As Boolean
    Dim test As Range
    On Error Resume Next
        Set test = WS.Range(RangeName)
        RangeExists = Err.Number = 0
    On Error GoTo 0
End Function

Public Function DotSeparator(ByVal Value As Variant) As String
'szamnak latszo erteket tizedes pontot hasznalo szamma konvertal, stringkent visszaadva
'Mivel makron belul csak a pontot fogadja el tizedes elvalasztokent
'Ellen|fffd|rizz|fffd|k a tizedes elv|fffd|laszt|fffd|jelet, |fffd|s cser|fffd|lj|fffd|k, ha sz|fffd|ks|fffd|ges

    On Error GoTo ErrHandler

    If IsEmpty(Value) Or Value = vbNullString Then Exit Function
    
    Dim TempValueStr As String
    TempValueStr = CStr(Value)
    Dim DecimalSeparatorStr As String
    DecimalSeparatorStr = Application.International(xlDecimalSeparator)
    Dim ThousandsSeparatorStr As String
    ThousandsSeparatorStr = Application.International(xlThousandsSeparator)
    
    'Ezres elvalasztot mindenkepp toroljuk
    If InStr(1, TempValueStr, ThousandsSeparatorStr, vbTextCompare) > 0 Then
        TempValueStr = Replace(TempValueStr, ThousandsSeparatorStr, vbNullString, , , vbTextCompare)
    End If
    
    'tizedes elvalasztot csereljuk pontra
    If InStr(1, TempValueStr, DecimalSeparatorStr, vbTextCompare) > 0 Then
        TempValueStr = Replace(TempValueStr, DecimalSeparatorStr, ".", , , vbTextCompare)
    End If

    'RETURN
    DotSeparator = TempValueStr

CleanExit:
    Exit Function
ErrHandler:
    'eredeti erteket adjuk vissza
    DotSeparator = CStr(Value)
    Resume CleanExit

End Function

Public Sub RefreshAllViews()
'Frissiti az adatbazissal osszekotott lapokat
'Called by: SetupSys laprol gomb

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "RefreshAllViews"
'-------------------------------------------------
    
    Dim sel As Range
    If TypeName(Selection) = "Range" Then
        Set sel = Selection
    Else
        Set sel = ActiveSheet.Cells(1, 1)
    End If
    
    Dim coll As Collection: Set coll = New Collection
    With coll
        'itt felsorolni a frissitendo lapokat
        .Add shtPUtetelek
        .Add shtPuTipuslista
        .Add shtKIADASOK
    End With
    
    With New Controller
        Dim sht As Object
        For Each sht In coll
            .RefreshView sht, GetSqlFilter(sht)
        Next sht
    End With
    sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
End Sub

Public Sub RefreshView()
'Frissiti egy db adatbazissal osszekotott lapot
'Called by: Barmelyik munkalaprol gomb

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "RefreshView"
'-------------------------------------------------
    Dim sel As Range
    If TypeName(Selection) = "Range" Then
        Set sel = Selection
    Else
        Set sel = ActiveSheet.Cells(1, 1)
    End If
    With New Controller
        .RefreshView ActiveSheet, GetSqlFilter(ActiveSheet)
    End With
    sel.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If
End Sub

Private Function GetSqlFilter(ByVal sht As Object) As String
    'szurt nezet eseten van SQL filter
    Select Case sht.Name
        Case shtKIADASOK.Name 'KIADASOK lap
            If CsakSajatRekord Then
                GetSqlFilter = "pufotipnev='KIAD|fffd|S' AND beoreklat=0"
            Else
                GetSqlFilter = "pufotipnev='KIAD|fffd|S'"
            End If
    End Select
End Function

Public Function NumberOfArrayDimensions(Arr As Variant) As Integer
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' NumberOfArrayDimensions
' This function returns the number of dimensions of an array. An unallocated dynamic array
' has 0 dimensions. This condition can also be tested with IsArrayEmpty.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Dim Ndx As Integer
Dim Res As Integer
On Error Resume Next
' Loop, increasing the dimension index Ndx, until an error occurs.
' An error will occur when Ndx exceeds the number of dimension
' in the array. Return Ndx - 1.
Do
    Ndx = Ndx + 1
    Res = UBound(Arr, Ndx)
Loop Until Err.Number <> 0

NumberOfArrayDimensions = Ndx - 1

End Function



Sub test()
    Dim S As Worksheet
    For Each S In ThisWorkbook.Worksheets
        S.Visible = xlSheetVisible
    Next S
End Sub
Attribute VB_Name = "Tetel"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Egy barmilyen tetel tarolasara szolgalo osztaly. Az ertekeket szotarban tarolja: {FieldName:Value}.
'
' @remarks  None
' @author   kantor.adam@excel-automatizalas.hu
' @version  1.0
' @date     2019.09.12

Option Explicit

''
' Ertekek tarolasara szolgalo szotar {FieldName:Value}
Private valDict As Scripting.Dictionary

''
' SQL adattipusok tarolasara szolgalo szotar {FieldName:SqlDataType}
Private dTypeDict As Scripting.Dictionary

''
' Osztaly konstruktor. Inicializalja a szotarakat.
Private Sub Class_Initialize()
    Set valDict = New Scripting.Dictionary
    valDict.CompareMode = TextCompare
    Set dTypeDict = New Scripting.Dictionary
    dTypeDict.CompareMode = TextCompare
End Sub

''
' Uj tetel hozzaadasa.
'
' @param FieldName      mezo elnevezese
' @param Value          mezo erteke
' @param SqlDataType    mezo SQL adattipusa (default: 'VARCHAR')
Public Sub AddItem(ByVal FieldName As String, ByVal Value As Variant, Optional ByVal SqlDataType As String = "VARCHAR")
    valDict(FieldName) = Value
    dTypeDict(FieldName) = SqlDataType
End Sub

''
' Megadja egy tetel erteket.
'
' @param FieldName      mezo elnevezese
' @return               mezo erteke
Public Property Get Item(ByVal FieldName As String) As Variant
    If valDict.Exists(FieldName) Then
        Item = valDict(FieldName)
    Else
        Item = "{" & FieldName & " nem tal|fffd|lhat|fffd|}"
    End If
End Property

''
' Megadja egy tetel SQL adattipusat.
'
' @param FieldName      mezo elnevezese
' @return               mezo SQL adattipusa
Public Property Get SqlDataType(ByVal FieldName As String) As String
    If dTypeDict.Exists(FieldName) Then
        SqlDataType = dTypeDict(FieldName)
    Else
        'pass
    End If
End Property

''
' Validalja, hogy egy mezo elnevezes letezik-e a szotarban
'
' @param FieldName      mezo elnevezese
' @return               igaz/hamis
Public Function Exists(ByVal FieldName As String) As Boolean
    Exists = valDict.Exists(FieldName)
End Function

''
' Array-kent megadja az eltarolt mezo neveket.
'
' @return               mezo elnevezesek tombkent
Public Property Get Fields() As Variant
    Fields = valDict.Keys
End Property

''
' Array-kent megadja az eltarolt mezo ertekeket.
'
' @return               mezo ertekek tombkent
' @remarks              a string-eket idezojelbe is teszi, pl: [1, 'minta', 12345, 'valami']
Public Property Get Values() As Variant
    Dim Arr As Variant
    Arr = valDict.Items
    Dim i As Long
    For i = LBound(Arr) To UBound(Arr)
        If Not (IsNumeric(Arr(i)) Or IsDate(Arr(i))) Then
            Arr(i) = "'" & Arr(i) & "'"
        Else
            Arr(i) = Replace(Arr(i), ",", ".", , , vbTextCompare) 'vasszot cserel pontra + string-ge is konvertalja
        End If
    Next i
    Values = Arr
End Property

''
' Array-kent megadja MezoNev-Ertek parosokat, ahol array egy eleme: < Key=Value > vagy < Key='String' >
' Pl: [ID=1, anyag='minta', osszeg=123456, megjegyzes='valami']
'
' @return               'Key=Value' parosok tombkent
Public Property Get SpecialList() As Variant
    Dim list() As Variant
    ReDim list(1 To valDict.Count)
    Dim i As Long: i = 0
    
    Dim Key As Variant
    For Each Key In valDict.Keys
        i = i + 1
        Dim Value As Variant
        Value = valDict(Key)
        If IsNumeric(Value) Or IsDate(Value) Then
            list(i) = Key & "=" & Replace(Value, ",", ".", , , vbTextCompare)
        Else
            list(i) = Key & "='" & Value & "'"
        End If
    Next Key
    SpecialList = list
End Property
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
 Private sht As Worksheet
 Private rng As Range
 Private Visibilities() As Variant
 

Private Sub Workbook_AfterSave(ByVal Success As Boolean)
    On Error Resume Next
        RestoreVisibility Visibilities
        sht.Activate
        rng.Select
        Application.ScreenUpdating = True
        Application.DisplayAlerts = True
    On Error GoTo 0
    Set sht = Nothing
    Set rng = Nothing
    Erase Visibilities
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    On Error Resume Next
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
        Set sht = ActiveSheet
        Set rng = Selection
        Visibilities = SaveVisibility
        KezdoNezet
'        ResetView
    On Error GoTo 0
End Sub

Private Sub Workbook_Open()
    OnWorkbookOpen
End Sub

Private Sub OnWorkbookOpen()
    With New RegistryManager
        'Probaidoszak ellenorzese
        If .CheckTrialPeriodOnOpen = False Then
            'probaido lejart  --> regisztracios form feldobasa
            If .StartRegisztracio = False Then
                'regisztracio sikertelen --> program bezarasa
                GoTo ProceedToExit
            End If
        End If
        'normal registry check
        If .CheckRegistrationOnOpen = False Then
            'check sikertelen --> regisztracios form feldobasa
            If .StartRegisztracio = False Then
                'regisztracio sikertelen --> program bezarasa
                GoTo ProceedToExit
            End If
        End If
    End With
    
    KezdoNezet
    AllowGrouping

Exit Sub

ProceedToExit:
    Me.Close False
End Sub


Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    If RangeExists("rngSort", Sh) Then
        If Not Intersect(Sh.Range("rngSort"), Target) Is Nothing Then
            'sorbarendezes
            Dim sht As Worksheet: Set sht = Sh
            DoSort Target
            Cancel = True
        End If
    End If
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
    If RangeExists("rngFilter", Sh) Then
        If Not Intersect(Sh.Range("rngFilter"), Target) Is Nothing And Target.Rows.Count = 1 Then
            'szures
            DoFilter Target
        End If
    End If
    
 
        If RangeExists("rngBelepesiJelszo", Sh) Then
            If Not Intersect(Sh.Range("rngBelepesiJelszo"), Target) Is Nothing Then
               StartNewSession Sh.Range("rngBelepesiJelszo").Value
               Application.EnableEvents = False
                  Sh.Range("rngBelepesiJelszo").MergeArea.ClearContents
                Application.EnableEvents = True
            End If
        End If

End Sub

Private Sub ResetButton_Clicked()
    DoReset ActiveSheet
End Sub

Private Sub RefreshAllViewsButton_Clicked()
    RefreshAllViews
End Sub

Private Sub RefreshView_Clicked()
    RefreshView
End Sub

Private Sub ResetRegistry_Clicked()
    With New RegistryManager
        .Reset
    End With
End Sub
Attribute VB_Name = "WorksheetProxy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'@PredeclaredID

Private Const ERTEK As String = "e"         'ezzel jeloljuk, hogy keplet helyett ertek szukseges

Private Type TFields
    sht As Worksheet 'kapcsolodo munkalap hivatkozasa
    IDcell As Range 'ID cella fejlecben
    HeaderRange As Range 'fejlec range
    LastUsedRow As Long 'utolso rekord sorszama
    HdrDict As Scripting.Dictionary 'fejlec ertekei szotarkent >> {MezoNeve:OszlopIndex}
    ControlDict As Scripting.Dictionary 'keplet/ertek szotar >> {MezoNeve:k/e}
    Props As Scripting.Dictionary
End Type
Private this As TFields

Private Const IDMissingError = "ID oszlopa nem tal|fffd|lhat|fffd|"
Private Const IDNotValidError = "ID nem |fffd|rtelmezhet|fffd|"
Private Const HeaderMissingError = "{HeaderMissing}"

Public Property Get Self() As WorksheetProxy
    Set Self = Me
End Property

Public Property Get sht() As Worksheet
    Set sht = this.sht
End Property
Public Property Set sht(ByVal Value As Worksheet)
    Set this.sht = Value
End Property

Public Property Get HeaderRange() As Range
    Set HeaderRange = this.HeaderRange
End Property
Public Property Set HeaderRange(ByVal Value As Range)
    Set this.HeaderRange = Value
End Property

Public Property Get DefaultSortOnColumn() As Long
    DefaultSortOnColumn = this.IDcell.Column
End Property

Private Property Get IDDataRange() As Range
    Set IDDataRange = this.sht.Range(this.IDcell.Offset(1, 0), this.sht.Cells(this.LastUsedRow, this.IDcell.Column))
End Property

Public Property Get IDcell() As Range
    Set IDcell = this.IDcell
End Property
Public Property Set IDcell(ByVal Value As Range)
    Set this.IDcell = Value
End Property

Public Property Get LastUsedRow() As Long
    LastUsedRow = this.LastUsedRow
End Property
Public Property Let LastUsedRow(ByVal Value As Long)
    this.LastUsedRow = Value
End Property

Public Property Get HeaderDict() As Scripting.Dictionary
    Set HeaderDict = this.HdrDict
End Property
Public Property Set HeaderDict(ByVal Value As Scripting.Dictionary)
    Set this.HdrDict = Value
End Property

Public Property Get ControlDict() As Scripting.Dictionary
    Set ControlDict = this.ControlDict
End Property
Public Property Set ControlDict(ByVal Value As Scripting.Dictionary)
    Set this.ControlDict = Value
End Property

Public Property Get RelatedForm() As String
    RelatedForm = this.Props("RelatedForm")
End Property

Public Property Get Props() As Scripting.Dictionary
    Set Props = this.Props
End Property
Public Property Set Props(ByVal Value As Scripting.Dictionary)
    Set this.Props = Value
End Property

Public Property Get DataRange() As Range
'Megadja az adatokat tartalmazo terulet (range) hivatkozasat.
    If this.LastUsedRow > this.HeaderRange.Row Then
        Set DataRange = this.HeaderRange.Offset(1).Resize(this.LastUsedRow - this.HeaderRange.Row)
    Else
        'nincs adat sor --> DataRange Is Nothing
    End If
End Property

Public Property Get FormulaRowIndex() As Long
'Megadja a kepleteket es formatumokat tartalmazo sor indexet.
    FormulaRowIndex = this.Props("FormulaRow")
End Property


Public Function Create(ByVal sht As Object) As WorksheetProxy

    With New WorksheetProxy
        Set .sht = sht
        Set .IDcell = FindIDcell(.sht, sht.GetPropVal("IDColumnHeader"))
        Set .HeaderRange = GetHeaderRange(.IDcell)
        .LastUsedRow = FindLastUsedRow(.IDcell.EntireColumn)
        Set .HeaderDict = GetHeaderDict(.HeaderRange)
        Set .ControlDict = GetControlDict(.HeaderRange, sht.GetPropVal("PasteControlRow"))
        Set .Props = sht.Props
        Set Create = .Self
    End With
    
End Function

Public Function GetPropVal(ByVal Key As String) As Variant
    If this.Props.Exists(Key) Then
        GetPropVal = Props(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:="WorksheetProxy " & sht.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function

Public Sub Refresh()
'Frissiti az utolso sor elmentett erteket
    this.LastUsedRow = FindLastUsedRow(this.IDcell.EntireColumn)
End Sub

Private Function GetHeaderDict(ByVal hdr As Range) As Scripting.Dictionary
'Header-t betolti egy dictionarybe -> Key:=hdr felirat, Value:=oszlop sorszam
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In hdr.Cells
        tempdict(CStr(c.Value)) = c.Column
    Next c
    Set GetHeaderDict = tempdict
End Function

Private Function GetControlDict(ByVal HeaderRange As Range, ByVal ControlRow As Long) As Scripting.Dictionary
'Controlt (adott oszlop ertek vagy keplet) betolti dictionary-be -> Key:=hdr felirat, Value:=k/e
    Dim c As Range
    Dim tempdict As Scripting.Dictionary
    Set tempdict = New Scripting.Dictionary
    tempdict.CompareMode = TextCompare
    For Each c In HeaderRange
        tempdict(CStr(c.Value)) = CStr(c.Offset(ControlRow - HeaderRange.Row).Value)
    Next c
    Set GetControlDict = tempdict
End Function

Public Sub ResetFilters(Optional ByVal SortOrder As XlSortOrder = xlAscending)
'minden szurot torol, ID szerint rakja sorba
    
    Dim sht As Worksheet:       Set sht = this.sht
    Dim HeaderRange As Range:   Set HeaderRange = this.HeaderRange
    Dim DefaultSortOnColumn As Long:    DefaultSortOnColumn = Me.DefaultSortOnColumn
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, DefaultSortOnColumn)
    
    '4. sor tisztitasa
    HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow")).ClearContents
    
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    'minden filter torlese
    If sht.FilterMode Then sht.ShowAllData

    With sht.AutoFilter.Sort.SortFields

        'Rendezes hozzaadasa
        .Clear
        .Add Key:=rng, SortOn:=xlSortOnValues, Order:=SortOrder

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
        .SortFields.Clear
    End With

End Sub

Public Sub SortTable(ByVal Target As Range)
'a Target oszlopat sorba rendezi, egyszer novekvo egyszer csokkeno sorrendben

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    Dim rng As Range:       Set rng = sht.Cells(HeaderRange.Row, Target.Column)

    Dim NewSortOrder As XlSortOrder

    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    With sht.AutoFilter.Sort.SortFields

        'check van-e mar sorbarendezes
        If .Count > 0 Then
            'van sorbarendezes
            'check ugyanaz az oszlop-e
            If Not Intersect(.Item(1).Key, Target.Columns(1).EntireColumn) Is Nothing Then
                'ugyanaz az oszlop
                'check irany
                If .Item(1).Order = xlAscending Then
                    'novekvo sorrend -> uj: csokkeno
                    NewSortOrder = xlDescending
                Else
                    'csokkeno sorrend -> uj: novekvo
                    NewSortOrder = xlAscending
                End If
            Else
                'masik oszlop -> novekvo sorrend
                NewSortOrder = xlAscending
            End If
        Else
            'nincs sorbarendezes -> novekvo sorrend
            NewSortOrder = xlAscending
        End If

        'Rendezes hozzaadasa
        .Clear
        .Add Key:=rng, SortOn:=xlSortOnValues, Order:=NewSortOrder

    End With

    With sht.AutoFilter.Sort
        .Header = xlYes
        .Apply
    End With

End Sub

Public Sub FilterTable(ByVal Target As Range)
'a Target oszlopat szuri, target erteke alapjan
'tobb cella is lehet egyszerre

    Dim sht As Worksheet:   Set sht = this.sht
    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

    Dim c As Range
    For Each c In Target
        'get field value
        Dim fld As Long
        fld = c.Column - HeaderRange.Cells(1).Column + 1
        'get criteria
        If c.Value = vbNullString Then
            'cellat toroltek --> filter torlese
            HeaderRange.AutoFilter Field:=fld
        ElseIf IsNumeric(c.Value) Then
            'numeric filter -> teljes egyezes
            Dim crit As String
            crit = DotSeparator(c.Value)
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        ElseIf IsDate(c.Value) Then
            'date filter -> teljes egyezes
            crit = CStr(CLng(c.Value))
            HeaderRange.AutoFilter Field:=fld, Criteria1:=">=" & crit, Operator:=xlAnd, Criteria2:="<=" & crit
        Else
            'szoveges szuro -> reszleges egyezes
            crit = "*" & c.Value & "*"
            HeaderRange.AutoFilter Field:=fld, Criteria1:=crit
        End If
    Next c

End Sub

Public Sub HandleColors()
' kezeli a fejlec szineket (szures-rendezesnel)

    Dim HeaderRange As Range: Set HeaderRange = this.HeaderRange

    'alap szinek
    '3. sor
    ColorSortBase HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("SortRow"))
    '4. sor
    ColorFilterBase HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow"))

    Dim sht As Worksheet:   Set sht = this.sht
    If Not sht.AutoFilterMode Then HeaderRange.AutoFilter 'check van-e autofilter, ha nincs adjuk hozza

        'check van-e sorbarendezes
        If sht.AutoFilter.Sort.SortFields.Count > 0 Then
            'van sorbarendezes
            'egesz 3. sor szinezese elenk kekre
            ColorSortUsed HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("SortRow"))
        End If

        'check van-e filter
        If sht.AutoFilter.FilterMode = True Then
            'van szures
            'egesz 4. sor szinezese elenk sargara
            ColorFilterUsed HeaderRange.Offset(-HeaderRange.Row + Me.GetPropVal("FilterRow"))
        End If

        Dim c As Range
        For Each c In HeaderRange

                'check oszlop
                With sht.AutoFilter.Sort.SortFields
                    If .Count > 0 Then
                        If Not Intersect(sht.AutoFilter.Sort.SortFields.Item(1).Key, c) Is Nothing Then
                            'sort oszlop szinezese sotetkekre
                            ColorSortSorted c.Offset(-c.Row + Me.GetPropVal("SortRow"))
                        End If
                    End If
                End With
                If sht.AutoFilter.Filters(c.Column - sht.AutoFilter.Range.Column + 1).On Then
                    'filter oszlop szinezese narancssargara
                    ColorFilterFiltered c.Offset(-c.Row + Me.GetPropVal("FilterRow"))
                End If

        Next c

End Sub

Private Sub ColorFilterBase(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterBase")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterBase")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterBase")(2))
    End With
End Sub
Private Sub ColorFilterUsed(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterUsed")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterUsed")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterUsed")(2))
    End With
End Sub
Private Sub ColorFilterFiltered(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorFilterFiltered")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorFilterFiltered")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorFilterFiltered")(2))
    End With
End Sub

Private Sub ColorSortBase(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortBase")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortBase")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortBase")(2))
    End With
End Sub
Private Sub ColorSortUsed(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortUsed")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortUsed")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortUsed")(2))
    End With
End Sub
Private Sub ColorSortSorted(ByVal rng As Range)
    With rng.Interior
        .color = CDbl("&H" & Me.GetPropVal("ColorSortSorted")(0))
        .Pattern = CDbl(Me.GetPropVal("ColorSortSorted")(1))
        .PatternColor = CDbl("&H" & Me.GetPropVal("ColorSortSorted")(2))
    End With
End Sub

Private Function FindIDcell(ByVal sht As Worksheet, ByVal IDREF As String) As Range
'Megkeresi a fejlec ID cellajat ID string alapjan
    Set FindIDcell = sht.Cells.Find(What:=IDREF, LookAt:=xlWhole)
End Function

Private Function GetHeaderRange(ByVal IDcell As Range) As Range
'megadja a fejlec hivatkozasat (Range)
    Dim sht As Worksheet: Set sht = IDcell.Parent
    Dim lc As Long 'last column
    lc = FindLastColumnInRange(IDcell.EntireRow)
    Set GetHeaderRange = sht.Range(IDcell, sht.Cells(IDcell.Row, lc))
End Function

Private Function FindLastUsedRow(ByVal IDColumn As Range) As Long
'megkeresi az utolso hasznalt sort (utolso rekord sorat)
    FindLastUsedRow = FindLastRowInRange(IDColumn)
End Function

Private Function FindLastColumnInRange(ByVal rng As Range) As Long
'Description: finds the last column in a range
'Inputs:      Range
'Outputs:     column number (long), zero if error occured

'   check range
    If rng Is Nothing Then Exit Function

        On Error Resume Next
        FindLastColumnInRange = Application.WorksheetFunction.Max( _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column, _
                                rng.Find(What:="*", _
                                After:=rng.Cells(1), _
                                LookAt:=xlPart, _
                                LookIn:=xlFormulas, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column)
        On Error GoTo 0

End Function

Private Function FindLastRowInRange(ByVal rng As Range) As Long
'Description: finds the last row in a range
'Inputs:      Range
'Outputs:     Row number (long), zero if error occurs

'   check range
    If rng Is Nothing Then Exit Function

    On Error Resume Next
    FindLastRowInRange = Application.WorksheetFunction.Max( _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByColumns, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row, _
                            rng.Find(What:="*", _
                            After:=rng.Cells(1), _
                            LookAt:=xlPart, _
                            LookIn:=xlFormulas, _
                            SearchOrder:=xlByRows, _
                            SearchDirection:=xlPrevious, _
                            MatchCase:=False).Row)
    On Error GoTo 0

End Function


Public Function IDExists(ByVal IDDataRange As Range, ByVal ID As Long) As Boolean
'ellenorzi, hogy ID letezik-e az IDColumn oszlopban
    Dim R As Range
    Set R = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
    IDExists = Not R Is Nothing
End Function

Private Function FindID(ByVal IDDataRange As Range, ByVal ID As Long) As Long
'megkeresi az ID erteket es visszaadja a sorszamat. Ha nem talalja, akkor 0-t ad.
    Dim R As Range
    Set R = IDDataRange.Find(What:=ID, LookAt:=xlWhole)
    If Not R Is Nothing Then
        FindID = R.Row
    Else
        FindID = 0
    End If
End Function


Public Function GetRowID(ByVal sor As Long) As Long
'adott sorhoz tartozo ID erteket adja meg
'ha nincs ertek, akkor 0-t ad
'ha nem adat sor, -1-et ad
    If sor <= this.IDcell.Row Then
        GetRowID = -1
        Exit Function
    End If
    Dim tmpID As Variant
    tmpID = GetRecordField(sor, Me.GetPropVal("IDColumnHeader"))
    If IsNumeric(tmpID) Then
        GetRowID = CLng(tmpID)
    Else
        MsgBox "'" & tmpID & "' " & IDNotValidError
        GetRowID = 0
    End If
End Function

Private Function GetRecordField(ByVal sor As Long, ByVal FieldName As String) As Variant
'Sor es fejlec felirat alapjan megkeresi egy cella erteket
    If this.HdrDict.Exists(FieldName) Then
        GetRecordField = sht.Cells(sor, this.HdrDict(FieldName)).Value
    Else
        GetRecordField = HeaderMissingError
    End If
End Function

Public Function FindRecordField(ByVal SearchField As String, ByVal SearchValue As Variant, _
                                ByVal ReturnField As String) As Variant
'Egy mezo erteke alapjan megkeres egy rekordot es visszaadja egy masik mezo erteket
'Ha tobb talalat lenne, az elsot adja vissza
    If this.HdrDict.Exists(SearchField) And this.HdrDict.Exists(ReturnField) Then
        Dim R As Range
        Set R = GetFieldAsRange(SearchField).Find(What:=SearchValue, LookAt:=xlWhole, LookIn:=xlValues)
        If Not R Is Nothing Then
            FindRecordField = sht.Cells(R.Row, this.HdrDict(ReturnField)).Value
        End If
    End If
End Function

Public Function GetFilteredList(ByVal SearchDict As Scripting.Dictionary, ByVal ReturnField As String, _
                                Optional ByVal Distinct As Boolean = False, _
                                Optional ByVal AllowEmpty As Boolean = False) As Variant
'dict {SearchField:SearchValue}
    
    If DataRange Is Nothing Then Exit Function 'nincs meg adat
    
    Dim Arr As Variant: Arr = DataRange.Value2
    Dim SearchField As Variant
    For Each SearchField In SearchDict.Keys
        If IsEmpty(Arr) Then Exit For
        Dim SearchCol As Long:      SearchCol = this.HdrDict(SearchField) - this.IDcell.Column + 1
        Dim SearchValue As Variant: SearchValue = SearchDict(SearchField)
        Arr = FilterArray(Arr, SearchCol, SearchValue)
    Next SearchField
    If Not IsEmpty(Arr) Then
        Arr = Application.Transpose(Application.Index(Arr, , this.HdrDict(ReturnField) - this.IDcell.Column + 1))
        If Not AllowEmpty Then
            Arr = RemoveEmptyItems(Arr)
        End If
        If Distinct Then
            Arr = KeepDistinctItems(Arr)
        End If
    End If
    GetFilteredList = Arr
End Function

Public Function GetTetelData(ByVal ID As Long) As Tetel
'betolti a letezo rekord ertekeket 'Egyeb' objektumba
    If IDExists(IDDataRange, ID) Then
        Dim sor As Long
        sor = FindID(IDDataRange, ID)
        Set GetTetelData = GetExistingRecord(sor)
    End If
End Function

Private Function GetExistingRecord(ByVal sor As Long) As Tetel
'adott sorbol beolvassa az ertekeket 'Tetel' objektumba

    Dim tetelData As Tetel
    Set tetelData = New Tetel
    
    'Az osszes oszlopot beolvassuk a Tetelbe -> Majd a form kivalogatja, neki mi kell
    Dim Key As Variant
    For Each Key In this.HdrDict.Keys
        tetelData.AddItem Key, GetRecordField(sor, Key)
    Next Key

    'RETURN
    Set GetExistingRecord = tetelData

End Function

Public Function GetIDs(Optional ByVal HeaderRef As String) As Object 'Scripting.Dictionary
' szotarba gyujti a letezo ID szamokat
    
    Dim href As String
    href = IIf(HeaderRef = vbNullString, Me.GetPropVal("IDColumnHeader"), HeaderRef)
    
    Dim Pcol As Long
    Pcol = this.HdrDict(href)
    
    Dim tempdict As Object
    Set tempdict = CreateObject("Scripting.Dictionary")
    tempdict.CompareMode = 0 'binarycompare
    
    If this.LastUsedRow > IDcell.Row Then 'van rekord
        Dim rng As Range
        Set rng = this.sht.Range(this.sht.Cells(IDcell.Row, Pcol), this.sht.Cells(this.LastUsedRow, Pcol))
        Dim c As Range
        For Each c In rng
            If IsNumeric(c.Value) Then
                tempdict(CLng(c.Value)) = vbNullString
            End If
        Next c
        'RETURN
        Set GetIDs = tempdict
    Else 'nincs rekord
        'Pass
    End If

End Function

Public Function GetFieldAsRange(ByVal FieldName As String) As Range
'Fejlec felirat alapjan hivatkozast ad egy mezo adat tartomanyara
    If this.HdrDict.Exists(FieldName) Then
        Dim dr As Range
        Set dr = DataRange
        If Not dr Is Nothing Then
            Set GetFieldAsRange = Intersect(DataRange, sht.Columns(this.HdrDict(FieldName)).EntireColumn)
        End If
    End If
End Function

Private Sub PasteValues(ByVal sor As Long)
'Copy-PasteValues

'*************** Ha direktben a tetel sorba irunk es azt rogzitjuk ***************
    With this.HeaderRange
        Dim HdrArr As Variant:      HdrArr = .Value2
        Dim rng As Range:           Set rng = .Offset(-.Row + sor)
    End With
    Dim DataFormulaArr As Variant:  DataFormulaArr = rng.FormulaR1C1
    Dim DataValueArr As Variant:    DataValueArr = rng.Value2
    Dim ResultArr() As Variant
    ReDim ResultArr(1 To 1, LBound(HdrArr, 2) To UBound(HdrArr, 2))

    Dim i As Long
    For i = LBound(HdrArr, 2) To UBound(HdrArr, 2)
        Dim FieldName As String
        FieldName = HdrArr(1, i)
        If StrComp(this.ControlDict(FieldName), ERTEK, vbTextCompare) = 0 Then
            ResultArr(1, i) = DataValueArr(1, i)
        Else
            ResultArr(1, i) = DataFormulaArr(1, i)
        End If
    Next i
    rng.FormulaR1C1 = ResultArr


    'Formatum masolasa
    With this.HeaderRange
        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + Me.GetPropVal("FormulaRow"))
        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
    End With

    RngFormula.Copy
    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
    Application.CutCopyMode = False

'***********************************************************************************

'*************** Ha keplet sorba irunk es azt masoljuk ertekkent ***************
'    With this.HeaderRange
'        Dim RngFormula As Range:        Set RngFormula = .Offset(-.Row + FORMULAROW)
'        Dim RngDestination As Range:    Set RngDestination = .Offset(-.Row + sor)
'    End With
'
'    RngFormula.Copy
'    RngDestination.PasteSpecial xlPasteValues   'ertekek masolasa
'    RngDestination.PasteSpecial xlPasteFormats  'formatum masolasa
'    Application.CutCopyMode = False

End Sub

Private Function FilterArray(ByVal SourceArray As Variant, ByVal FilterColumn As Long, ByVal SearchValue As Variant) As Variant

    Dim col_mask() As Variant
    col_mask = Array()
    Dim row_mask() As Variant
    row_mask = Array()
    Dim i As Long
    Select Case NumberOfArrayDimensions(SourceArray)
        Case 1
            For i = LBound(SourceArray) To UBound(SourceArray)
                ReDim Preserve col_mask(LBound(col_mask) To UBound(col_mask) + 1)
                col_mask(UBound(col_mask)) = i
            Next i
            
            If SourceArray(FilterColumn) = SearchValue Then
                ReDim Preserve row_mask(LBound(row_mask) To UBound(row_mask) + 1)
                row_mask(UBound(row_mask)) = 1
            End If
            
        Case 2
            For i = LBound(SourceArray, 2) To UBound(SourceArray, 2)
                ReDim Preserve col_mask(LBound(col_mask) To UBound(col_mask) + 1)
                col_mask(UBound(col_mask)) = i
            Next i
        
            For i = LBound(SourceArray, 1) To UBound(SourceArray, 1)
                If SourceArray(i, FilterColumn) = SearchValue Then
                    ReDim Preserve row_mask(LBound(row_mask) To UBound(row_mask) + 1)
                    row_mask(UBound(row_mask)) = i
                End If
            Next i
            
    End Select
    
        If UBound(row_mask) >= 0 And UBound(col_mask) >= 0 Then
            FilterArray = Application.Index(SourceArray, Application.Transpose(row_mask), col_mask)
        End If
    
End Function

Private Function RemoveEmptyItems(ByVal SourceArray As Variant) As Variant
    Dim Arr() As Variant
    ReDim Arr(LBound(SourceArray) To UBound(SourceArray))
    
    Dim i As Long, j As Long
    For i = LBound(SourceArray) To UBound(SourceArray)
        If Not (SourceArray(i) = vbNullString Or IsEmpty(SourceArray(i))) Then
            j = j + 1
            Arr(j) = SourceArray(i)
        End If
    Next i
    If j >= LBound(SourceArray) Then
        ReDim Preserve Arr(LBound(SourceArray) To j)
        RemoveEmptyItems = Arr
    Else
        'csak ures teteleink vannak --> RemoveEmptyItems = Empty
    End If
    
End Function

Private Function KeepDistinctItems(ByVal SourceArray As Variant) As Variant
' Duplikaciok kiszurese

    If IsEmpty(SourceArray) Then Exit Function
    
    Dim d As Scripting.Dictionary
    Set d = New Scripting.Dictionary
    d.CompareMode = TextCompare
    Dim i As Variant
    For Each i In SourceArray
        d(i) = vbNullString
    Next i
    KeepDistinctItems = d.Keys
End Function

Public Sub TetelRogzites(ByVal tetelData As Tetel)
'Rogziti a tablaban a tetel ertekeket + kepletes sorokat

    'check
    Dim ID As Variant
    ID = tetelData.Item(Me.GetPropVal("IDColumnHeader"))
    If IsNumeric(ID) Then

        Dim sor As Long
        If IDExists(IDDataRange, CLng(ID)) Then
            'ha letezik a rekord azonosito, akkor megkeresni, melyik sorban es oda rogziteni a modositasokat
            sor = FindID(IDDataRange, CLng(ID))
        Else
            'ha nem letezik, akkor az elso ures sorba rogziteni
            sor = this.LastUsedRow + 1
        End If

        'kiiras
        RecordData sor, tetelData

        'Calculate
        Application.Calculate
        Do While Application.CalculationState <> xlDone
            DoEvents
        Loop

        'Paste Value
        PasteValues sor

    Else
        MsgBox IDNotValidError
    End If

End Sub

Private Sub RecordData(ByVal sor As Long, ByVal tetelData As Tetel)
'adott sorba betolti az ertekeket es kepletes mezokat

    Dim Arr() As Variant
    ReDim Arr(1 To this.HeaderRange.Columns.Count)

    '---- Fill array ----
    Dim Key As Variant
    Dim i As Long
    For Each Key In this.HdrDict.Keys
        i = this.HdrDict(Key) - this.HeaderRange.Column + 1
        Dim Formula As Variant
        If tetelData.Exists(Key) Then
            Formula = tetelData.Item(Key)
        Else
            'nincs ilyen property
            Formula = sht.Cells(Me.GetPropVal("FormulaRow"), this.HdrDict(Key)).FormulaR1C1
        End If
        Arr(i) = Formula
    Next Key

    ' --- write array to range ---
    '-->> ha tetel soraba irunk
    Dim rng As Range:   Set rng = this.HeaderRange.Offset(-this.HeaderRange.Row + sor) 'tetel sora
    rng.FormulaR1C1 = Arr

    '-->> ha keplet soraba irunk
'    Dim Rng2 As Range:  Set Rng2 = this.HeaderRange.Offset(-this.HeaderRange.Row + FORMULAROW) 'keplet sor
'    Rng2.FormulaR1C1 = arr

End Sub
Attribute VB_Name = "frmBizSorok"
Attribute VB_Base = "0{7111641A-30BC-47A1-B00D-64BAC82CF7C5}{BCD2C486-B24F-460C-ACF4-963E769FF0AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'Public Property Get RelatedSheet() As Worksheet
'    Set RelatedSheet = shtPUTetelek
'End Property

Private Sub UserForm_Initialize()
 'TODO
'
End Sub


Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'PUTetelek' objektumba
' BIZONYLATSOR FORM !!!

 'TODO
'    Dim tetelData As PUTetelek
'    Set tetelData = New PUTetelek
'
'    With Me
'        With .ID_bizsorkod:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":           End With
'        With .bizsornev:  tetelData.AddItem .Name, .Value, "CHAR":
'        With .bizbrutto:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
'        With .bizsornetto:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
'        With .bizsorafa:     tetelData.AddItem .Name, .Value, "INTEGER":                   End With
'        With .bizsorbrutto:     tetelData.AddItem .Name, .Value, "INTEGER":                   End With
'        With .bizsorokossznetto:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
'        With .bizsorokosszafa:     tetelData.AddItem .Name, .Value, "INTEGER":                   End With
'        With .bizsorokosszbrutto:     tetelData.AddItem .Name, .Value, "INTEGER":                   End With
'        With .pufotipnev: tetelData.AddItem .Name, .Value, "CHAR":                   End With
'        With .pualtipnev:    tetelData.AddItem .Name, .Value, "CHAR":           End With
'        With .ID_putipkod:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .projnev:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .projleir:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .ID_projkod:  tetelData.AddItem .Name, .Value, "INTEGER":                    End With
'        With .bizsoregyeb1:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .bizsoregyeb2:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .bizsoregyeb3:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        With .bizsormegj:  tetelData.AddItem .Name, .Value, "CHAR":                    End With
'
''        With .ID_xxx:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":           End With
''        With .xxx:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
''        With .xxx:     tetelData.AddItem .Name, .Value, "CHAR":                    End With
''        With .xxx:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
''        With .xxx:  tetelData.AddItem .Name, HandleSeparator(.Value), "FLOAT":  End With
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'PUTetelek' objektum adatainak betoltese a Form megfelelo mezoibe
' BIZONYLATSOR FORM !!!

'    With Me
'        With .ID_bizsorkod:       .Value = tetelData.Item(.Name): End With
'        With .bizsornev:      .Value = tetelData.Item(.Name): End With
'        With .bizbrutto:      .Value = tetelData.Item(.Name): End With
'        With .bizsornetto:      .Value = tetelData.Item(.Name): End With
'        With .bizsorafa:     .Value = tetelData.Item(.Name): End With
'        With .bizsorbrutto:     .Value = tetelData.Item(.Name): End With
'        With .bizsorokossznetto:     .Value = tetelData.Item(.Name): End With
'        With .bizsorokosszafa:  .Value = tetelData.Item(.Name): End With
'        With .bizsorokosszbrutto: .Value = tetelData.Item(.Name): End With
'        With .pufotipnev:    .Value = tetelData.Item(.Name): End With
'        With .pualtipnev:    .Value = tetelData.Item(.Name): End With
'        With .ID_putipkod:    .Value = tetelData.Item(.Name): End With
'        With .projleir:    .Value = tetelData.Item(.Name): End With
'        With .ID_projkod:    .Value = tetelData.Item(.Name): End With
'        With .bizsoregyeb1:      .Value = tetelData.Item(.Name): End With
'        With .bizsoregyeb2:     .Value = tetelData.Item(.Name): End With
'        With .bizsoregyeb3:     .Value = tetelData.Item(.Name): End With
'        With .bizsormegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub



Private Sub btnOK_Click()
    'FormRogzites Me.RelatedSheet, Me
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub


Attribute VB_Name = "frmE1Export"
Attribute VB_Base = "0{68B8DFA7-8029-4606-8AC2-4C546C605516}{8F236A4F-0C4D-4724-8375-773969B56B87}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'Public Property Get RelatedSheet() As Worksheet
'    Set RelatedSheet = shtE1Export
'End Property

Private Sub UserForm_Initialize()
 'TODO
'
End Sub

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'XXX' objektumba
'TODO
'    Dim tetelData As XXX
'    Set tetelData = New XXX
'
'    With Me
'            With .   ID_e1felkod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   felnev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_felkod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   mtnev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   mtkod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   feltenyev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   feltenyho:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   feltenynap:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   feltenydatum:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   unev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_ukod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1list1nev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_e1list1kod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1list2nev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_e1list2kod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1list3nev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_e1list3kod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1list4nev:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   ID_e1list4kod:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1db:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'            With .   e1megj:    tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'XXX' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'            With .   ID_e1felkod:   .Value = tetelData.Item(.Name): End With
'            With .   felnev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_felkod:   .Value = tetelData.Item(.Name): End With
'            With .   mtnev:   .Value = tetelData.Item(.Name): End With
'            With .   mtkod:   .Value = tetelData.Item(.Name): End With
'            With .   feltenyev:   .Value = tetelData.Item(.Name): End With
'            With .   feltenyho:   .Value = tetelData.Item(.Name): End With
'            With .   feltenynap:   .Value = tetelData.Item(.Name): End With
'            With .   feltenydatum:   .Value = tetelData.Item(.Name): End With
'            With .   unev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_ukod:   .Value = tetelData.Item(.Name): End With
'            With .   e1list1nev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_e1list1kod:   .Value = tetelData.Item(.Name): End With
'            With .   e1list2nev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_e1list2kod:   .Value = tetelData.Item(.Name): End With
'            With .   e1list3nev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_e1list3kod:   .Value = tetelData.Item(.Name): End With
'            With .   e1list4nev:   .Value = tetelData.Item(.Name): End With
'            With .   ID_e1list4kod:   .Value = tetelData.Item(.Name): End With
'            With .   e1db:   .Value = tetelData.Item(.Name): End With
'            With .   e1megj:   .Value = tetelData.Item(.Name): End With
'
'
''        With .ID_xxx:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":           End With
''        With .xxx:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
''        With .xxx:     tetelData.AddItem .Name, .Value, "CHAR":                    End With
''        With .xxx:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
''        With .xxx:  tetelData.AddItem .Name, HandleSeparator(.Value), "FLOAT":  End With

'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnOK_Click()
    'FormRogzites Me.RelatedSheet, Me
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub



Attribute VB_Name = "frmE1Monitoring"
Attribute VB_Base = "0{25BD6D5A-902C-4FB2-81C7-1D1BF01C6EEE}{BEF54851-DBBB-4A89-A3A6-518149317E23}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit
'
'Private TetelSorszam As Long
'Private RekordID As Long
'
'Public Property Get RelatedSheet() As Worksheet
'    Set RelatedSheet = shtE1Monitoring
'End Property
'
'Private Function GetNextTetelSorszam() As Long
'    TetelSorszam = TetelSorszam + 1
'    GetNextTetelSorszam = TetelSorszam
'End Function
'Private Function GetNextRekordID() As Long
'    RekordID = RekordID + 1
'    GetNextRekordID = RekordID
'End Function
'
'
''-------------------------------------------------------------
''       PUBLIC FUNCTIONS
''-------------------------------------------------------------
'
'Public Function GetTetelData() As Tetel
''Form adatainak betoltese 'Tetelek' objektumba
'
'    Dim tetelData As Tetel
'    Set tetelData = New Tetel
'
'    With Me
'         ' Osszegek
'        With .e1mondb:         tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
'         ' ID szamok, darabszamok, 1/0 ertekek
'        With .ID_monkod:        tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_felkod:        tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_feltipkod:     tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_ukod:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_e1tphkod:      tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_e1kartkod:     tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_e1hpkod:       tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .ID_e1csapdakod:   tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'         ' Datumok
'        With .e1monev:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .e1monho:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'        With .e1monnap:         tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
'         ' Szoveges mezok
'        With .felnevnev:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .feltipnev:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .mtnev:            tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .unev:             tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .urnev:            tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1tphnev:         tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1tphrnev:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1tphcim:         tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1tphmegj:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1kartnev:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1hpnev:          tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1csapdanev:      tetelData.AddItem .Name, .Value, "CHAR":    End With
'        With .e1monmegj:        tetelData.AddItem .Name, .Value, "CHAR":    End With
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
'
'End Function
'
'Public Sub SetTetelData(ByVal tetelData As Tetel)
''A 'Tetel' objektum adatainak betoltese a Form megfelelo mezoibe
'
'    'Elsodleges kulcs es bizonylat sorszam ertekenek mentese
'    RekordID = tetelData.Item("ID_putetelkod")
'    TetelSorszam = tetelData.Item("ID_bizsorkod")
'
'    With Me
'         'Osszegek
'        With .e1mondb:          .Value = FloatToString(tetelData.Item(.Name)): End With
'         ' ID szamok, darabszamok, 1/0 ertekek
'        With .ID_monkod:        .Value = tetelData.Item(.Name): End With
'        With .ID_felkod:        .Value = tetelData.Item(.Name): End With
'        With .ID_feltipkod:     .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:          .Value = tetelData.Item(.Name): End With
'        With .ID_e1tphkod:      .Value = tetelData.Item(.Name): End With
'        With .ID_e1kartkod:     .Value = tetelData.Item(.Name): End With
'        With .ID_e1hpkod:       .Value = tetelData.Item(.Name): End With
'        With .ID_e1csapdakod:   .Value = tetelData.Item(.Name): End With
'         ' Datumok
'        With .e1monev:          .Value = tetelData.Item(.Name): End With
'        With .e1monho:          .Value = tetelData.Item(.Name): End With
'        With .e1monnap:         .Value = tetelData.Item(.Name): End With
'         ' Szoveges mezok
'        With .felnevnev:        .Value = tetelData.Item(.Name): End With
'        With .feltipnev:        .Value = tetelData.Item(.Name): End With
'        With .mtnev:            .Value = tetelData.Item(.Name): End With
'        With .unev:             .Value = tetelData.Item(.Name): End With
'        With .urnev:            .Value = tetelData.Item(.Name): End With
'        With .e1tphnev:         .Value = tetelData.Item(.Name): End With
'        With .e1tphrnev:        .Value = tetelData.Item(.Name): End With
'        With .e1tphcim:         .Value = tetelData.Item(.Name): End With
'        With .e1tphmegj:        .Value = tetelData.Item(.Name): End With
'        With .e1kartnev:        .Value = tetelData.Item(.Name): End With
'        With .e1hpnev:          .Value = tetelData.Item(.Name): End With
'        With .e1csapdanev:      .Value = tetelData.Item(.Name): End With
'        With .e1monmegj:        .Value = tetelData.Item(.Name): End With
'
'        OsszegekFrissitese .ID_bizkod
'
'    End With
'
'End Sub
'
'Public Sub SetIDOnly(ByVal ID As Long)
''ID betoltese Form ID mezojebe, minden mas uresen marad
'    Me.ID_e1monkod.Value = ID
'    RekordID = ID 'Elsodleges kulcs ertekenek mentese
''    Me.ID_e1kartkod.Value = ID 'NOTE: a bizonylatkod megkapja az elso rogzitett rekord szamat, de ugyanaz marad a bizonylaton belul mindegyik sornal
''    Me.ID_e1hpkod = GetNextTetelSorszam
''    Me.ID_e1hpkod = GetNextTetelSorszam
''    Me.ID_e1csapdakod = GetNextTetelSorszam
'End Sub
'
'
''-------------------------------------------------------------
''       EVENTS
''-------------------------------------------------------------
'Private Sub unev_Change()
'    'Ugyfel kod frissites
'    With Me.ID_ukod
'        .Value = GetUgyfelKod(Me.unev.Value)
'    End With
'    'Projekt listak feltoltese
'    With Me.projnev
'        .Clear
'        .list = GetProjektNevLista(Me.ID_ukod.Value)
'    End With
'    With Me.ID_projkod
'        .Value = GetProjektKod(Me.projnev.Value)
'    End With
'End Sub
'
'Private Sub projnev_Change()
'
'    'Projekt kod kikeresese
'    With Me.ID_projkod
'        .Value = GetProjektKod(Me.projnev.Value)
'    End With
'
'End Sub
'
'
'Private Sub btnOK_Click()
'    'Tetel rogzitese
'    FormRogzites Me.RelatedSheet, Me, CloseForm:=False
'    ' "Uj tetel rogzitese?" form
'    Dim InputForm As frmUjSorVege: Set InputForm = New frmUjSorVege
'    InputForm.Show
'    Dim UjSor As Boolean: UjSor = InputForm.UjSor
'    Unload InputForm
'    Set InputForm = Nothing
'    If UjSor Then
'        OnUjTetelSor
'    Else
'        OnLezaras
'        FormCancel Me 'Form bezarasa
'    End If
'End Sub
'
'Private Sub btnCancel_Click()
'    OnLezaras True
'    FormCancel Me 'Form bezarasa
'End Sub
'
'
''-------------------------------------------------------------
''       VALID|fffd|CI|fffd|K
''-------------------------------------------------------------
'
'Private Sub e1monev_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1monev_Change()
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1monho_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1monho_Change()
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1monnap_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1monnap_Change()
'    DatumValidacio Me.e1monev, e1monho, e1monnap
'End Sub
'Private Sub e1mondb_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    SzamValidacio Me.e1mondb
'End Sub
'
''Private Sub beoreklat_Change()
''    BooleanValidacio Me.beoreklat
''End Sub
'
'
''-------------------------------------------------------------
''       PRIVATE FUNCTIONS
''-------------------------------------------------------------
'
''Private Sub OnUjTetelSor()
''    DisableFejadatok                    'Fej adatok disable
''    SetNextTetelSor GetNextRekordID, GetNextTetelSorszam    'Tetel adatok torles, uj sorszam adas
''End Sub
'
''Private Sub OnLezaras(Optional ByVal Cancel As Boolean = False)
'
''    If TetelSorszam > CLng(Me.bizsordb.Value) Then
''        'Uj tetel rogzitese
''        If Cancel = True And TetelSorszam = 1 Then
''            'megszakitas gombot nyomtak, es nem volt meg tetel rogzitve --> pass
''            Exit Sub
''        End If
''    Else
''        'Rogzitett tetel modositasa --> pass
''        Exit Sub
''    End If
'
''    'Tetel adatok torlese, sorszam=0
''    SetNextTetelSor GetNextRekordID, 0
''    '0-s tetelsor rogzites
''    FormRogzites Me.RelatedSheet, Me, CloseForm:=False
'
''
''Private Sub DisableFejadatok()
'''Fej adatok nem modosithatok
'
''    With Me
''        With .bizszlayn:            .Enabled = False: End With
''        With .ID_e1monkod:        .Enabled = False: End With
''        With .unev:                 .Enabled = False: End With
''        With .urnev:                 .Enabled = False: End With
''        With .ID_ukod:              .Enabled = False: End With
''        With .e1tphnev:               .Enabled = False: End With
''        With .ID_e1tphkod:              .Enabled = False: End With
''        With .ID_bizkod:            .Enabled = False: End With
'
''    End With
'
''End Sub
'
''Private Sub SetNextTetelSor(ByVal ID As Long, ByVal bizsorkod As Long)
''Tetel adatok torlese, bizsorszam beallitasa
'
''    With Me
''        ' szamlalok
''        With .ID_xxx:        .Value = ID:            End With
'
''        ' textboxok
''        With .xxx:            .Value = vbNullString:  End With
''        ' listboxok
''        With .xxx:           .Value = vbNullString:  End With ' .ListIndex = 0: .Enabled = (.ListCount > 1):  End With
''        ' linkelt mezok
''        With Me.ID_xxx:      .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value):      End With
'
''        OsszegekFrissitese .ID_bizkod
'
''
'e 'nd Sub
'
''Private Sub OsszegekFrissitese(Optional ID_bizkod As long = 0)
''    With Me
''        .bizsordb.Value = IIf(bizszam = vbNullString, 0, GetPUTetelSorDarab(ID_bizkod))
''        .bizsorokossznetto.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorNetto(ID_bizkod)))
''        .bizsorokosszafa.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorAfa(ID_bizkod)))
''        .bizsorokosszbrutto.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorBrutto(ID_bizkod)))
''    End With
''End Sub
'
'
Attribute VB_Name = "frmE1TphLista"
Attribute VB_Base = "0{E1F786F6-3190-4CA3-AFC8-D0BAA543F20D}{64C92D44-39F5-4358-9DB3-03DE39F384DB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
'Public Property Get RelatedSheet() As Worksheet
'    Set RelatedSheet = shtE1List14
'End Property

Private Sub UserForm_Initialize()
 'TODO
'
End Sub
Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'E1List14' objektumba
 'TODO
'    Dim tetelData As E1List14
'    Set tetelData = New E1List14
'
'    With Me
'
'        With .feltipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_feltipkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list1nev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_e1list1kod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list1ossz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list1eddig:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list2nev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_e1list2kod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list2ossz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list2eddig:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list3nev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_e1list3kod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list3ossz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list3eddig:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list4nev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_e1list4kod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list4ossz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1list4eddig:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1listossz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1listeddig:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .e1megj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'E1Monitoring' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .feltipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_feltipkod:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .e1list1nev:      .Value = tetelData.Item(.Name): End With
'        With .ID_e1list1kod:      .Value = tetelData.Item(.Name): End With
'        With .e1list1ossz:      .Value = tetelData.Item(.Name): End With
'        With .e1list1eddig:      .Value = tetelData.Item(.Name): End With
'        With .e1list2nev:      .Value = tetelData.Item(.Name): End With
'        With .ID_e1list2kod:      .Value = tetelData.Item(.Name): End With
'        With .e1list2ossz:      .Value = tetelData.Item(.Name): End With
'        With .e1list2eddig:      .Value = tetelData.Item(.Name): End With
'        With .e1list3nev:      .Value = tetelData.Item(.Name): End With
'        With .ID_e1list3kod:      .Value = tetelData.Item(.Name): End With
'        With .e1list3ossz:      .Value = tetelData.Item(.Name): End With
'        With .e1list3eddig:      .Value = tetelData.Item(.Name): End With
'        With .e1list4nev:      .Value = tetelData.Item(.Name): End With
'        With .ID_e1list4kod:      .Value = tetelData.Item(.Name): End With
'        With .e1list4ossz:      .Value = tetelData.Item(.Name): End With
'        With .e1list4eddig:      .Value = tetelData.Item(.Name): End With
'        With .e1listossz:      .Value = tetelData.Item(.Name): End With
'        With .e1listeddig:      .Value = tetelData.Item(.Name): End With
'        With .e1megj:      .Value = tetelData.Item(.Name): End With
'
'
'        With .umegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnOK_Click()
    'FormRogzites Me.RelatedSheet, Me
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Attribute VB_Name = "frmFeladatok"
Attribute VB_Base = "0{32171C46-5583-4090-A771-49430F80E326}{EF5BFB49-9E1C-467B-B934-F66B0EBD0BC8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtFeladatok
End Property


Private Sub UserForm_Initialize()
 'TODO
'    'P|fffd|nz|fffd|gyi t|fffd|pus listak feltoltese
'    With Me.pufotipnev
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'    With Me.pualtipnev
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'     With Me.ID_putipkod
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'
'   'Ugyfel listak feltoltese
'    With Me.unev
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'    With Me.ID_ukod
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'
'    '|fffd|GYF|fffd|L KAPCSOLAT ????
'
'   'Projekt listak feltoltese
'    With Me.projnev
'        .Clear
'        .list = GetProjektLista(.Name) 'in modListak
'    End With
'    With Me.ID_projkod
'        .Clear
'        .list = GetProjektLista(.Name) 'in modListak
'    End With
'
'   'Munkat|fffd|rs csoport listak feltoltese
'    With Me.mtcsopnev
'        .Clear
'        .list = GetMTCsoportLista(.Name) 'in modListak
'    End With
'    With Me.ID_mtcsopkod
'        .Clear
'        .list = GetMTCsoportLista(.Name) 'in modListak
'    End With
'
'   'Munkat|fffd|rs listak feltoltese
'    With Me.mtnev
'        .Clear
'        .list = GetMunkat|fffd|rsLista(.Name) 'in modListak
'    End With
'    With Me.ID_mtkod
'        .Clear
'        .list = GetMunkat|fffd|rsLista(.Name) 'in modListak
'    End With
'
'    'Feladat t|fffd|pus listak feltoltese
'    With Me.feltipnev
'        .Clear
'        .list = GetFelTipusLista(.Name) 'in modListak
'    End With
'    With Me.ID_feltipkod
'        .Clear
'        .list = GetFelTipusLista(.Name) 'in modListak
'    End With
'
'    'Feladat st|fffd|tusz listak feltoltese
'    With Me.felstatnev
'        .Clear
'        .list = GetFelStatuszLista(.Name) 'in modListak
'    End With
'    With Me.ID_felstatkod
'        .Clear
'        .list = GetFelStatuszLista(.Name) 'in modListak
'    End With
    
    
End Sub



Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Feladatok' objektumba
 'TODO
'    Dim tetelData As Feladatok
'    Set tetelData = New Feladatok
'
'    With Me
'        With .ID_felkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felaktiv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felkod_elozo:       tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":   End With
'        With .felkiadnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felkiadkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_feltipkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felleir:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke1:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .ukapcsnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukapcskod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_projkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mtcsopnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtcsopkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mtnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .ID_putetelkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .pufotipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_pufotipkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .pualtipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_pualtipkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkiadev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiadho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiadnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiaddatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezddatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervdatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenynap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenydatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felstatnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feleredmleir:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felstatkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkesz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervkts:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervbev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervhasz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenykts:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenybev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyhasz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .fellejartyn:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felmaiterv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felismyn:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkovdatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb3:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felmegj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'
'
' '       With .ID_ukod:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .uaktiv:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .umegj:       tetelData.AddItem .Name, "''" & .Value, "CHAR":             End With 'hogy a szamot is karakterkent rogzitse
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Feladatok' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .ID_felkod:      .Value = tetelData.Item(.Name): End With
'        With .felaktiv:      .Value = tetelData.Item(.Name): End With
'        With .ID_felkod_elozo:      .Value = tetelData.Item(.Name): End With
'        With .felkiadnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_felkiadkod:      .Value = tetelData.Item(.Name): End With
'        With .feltipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_feltipkod:      .Value = tetelData.Item(.Name): End With
'        With .felnev:      .Value = tetelData.Item(.Name): End With
'        With .felleir:      .Value = tetelData.Item(.Name): End With
'        With .felcimke1:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .ukapcsnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukapcskod:      .Value = tetelData.Item(.Name): End With
'        With .projnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_projkod:      .Value = tetelData.Item(.Name): End With
'        With .mtcsopnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtcsopkod:      .Value = tetelData.Item(.Name): End With
'        With .mtnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtkod:      .Value = tetelData.Item(.Name): End With
'        With .ID_putetelkod:      .Value = tetelData.Item(.Name): End With
'        With .pufotipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_pufotipkod:      .Value = tetelData.Item(.Name): End With
'        With .pualtipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_pualtipkod:      .Value = tetelData.Item(.Name): End With
'        With .felkiadev:      .Value = tetelData.Item(.Name): End With
'        With .felkiadho:      .Value = tetelData.Item(.Name): End With
'        With .felkiadnap:      .Value = tetelData.Item(.Name): End With
'        With .felkiaddatum:      .Value = tetelData.Item(.Name): End With
'        With .felkezdev:      .Value = tetelData.Item(.Name): End With
'        With .felkezdho:      .Value = tetelData.Item(.Name): End With
'        With .felkezdnap:      .Value = tetelData.Item(.Name): End With
'        With .felkezddatum:      .Value = tetelData.Item(.Name): End With
'        With .feltervev:      .Value = tetelData.Item(.Name): End With
'        With .feltervho:      .Value = tetelData.Item(.Name): End With
'        With .feltervnap:      .Value = tetelData.Item(.Name): End With
'        With .feltervdatum:      .Value = tetelData.Item(.Name): End With
'        With .feltenyev:      .Value = tetelData.Item(.Name): End With
'        With .feltenyho:      .Value = tetelData.Item(.Name): End With
'        With .feltenynap:      .Value = tetelData.Item(.Name): End With
'        With .feltenydatum:      .Value = tetelData.Item(.Name): End With
'        With .felnapelt:      .Value = tetelData.Item(.Name): End With
'        With .felstatnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_felstatkod:      .Value = tetelData.Item(.Name): End With
'        With .feleredmleir:      .Value = tetelData.Item(.Name): End With
'        With .felkesz:      .Value = tetelData.Item(.Name): End With
'        With .felcimke1:      .Value = tetelData.Item(.Name): End With
'        With .felcimke2:      .Value = tetelData.Item(.Name): End With
'        With .feltervkts:      .Value = tetelData.Item(.Name): End With
'        With .feltervbev:      .Value = tetelData.Item(.Name): End With
'        With .feltervhasz:      .Value = tetelData.Item(.Name): End With
'        With .feltenykts:      .Value = tetelData.Item(.Name): End With
'        With .feltenybev:      .Value = tetelData.Item(.Name): End With
'        With .feltenyhasz:      .Value = tetelData.Item(.Name): End With
'        With .fellejartyn:      .Value = tetelData.Item(.Name): End With
'        With .felmaiterv:      .Value = tetelData.Item(.Name): End With
'        With .felismyn:      .Value = tetelData.Item(.Name): End With
'        With .felkovdatum:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb2:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb3:      .Value = tetelData.Item(.Name): End With
'        With .felmegj:      .Value = tetelData.Item(.Name): End With
'
'
'        With .umegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub


Public Sub SetIDOnly(ByVal ID As Long)
 'TODO
'ID betoltese Form ID mezojebe, minden mas uresen marad
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "frmFoglalasok"
Attribute VB_Base = "0{A14553AA-4D52-4891-804D-07DED5A1DEDC}{79284553-5AC3-4228-9A8B-C13297B797AB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtFeladatok
End Property


Private Sub Label113_Click()

End Sub

Private Sub UserForm_Initialize()
 'TODO
'    'P|fffd|nz|fffd|gyi t|fffd|pus listak feltoltese
'    With Me.pufotipnev
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'    With Me.pualtipnev
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'     With Me.ID_putipkod
'        .Clear
'        .list = GetPuTipusLista() 'in modListak
'    End With
'
'   'Ugyfel listak feltoltese
'    With Me.unev
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'    With Me.ID_ukod
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'
'    '|fffd|GYF|fffd|L KAPCSOLAT ????
'
'   'Projekt listak feltoltese
'    With Me.projnev
'        .Clear
'        .list = GetProjektLista(.Name) 'in modListak
'    End With
'    With Me.ID_projkod
'        .Clear
'        .list = GetProjektLista(.Name) 'in modListak
'    End With
'
'   'Munkat|fffd|rs csoport listak feltoltese
'    With Me.mtcsopnev
'        .Clear
'        .list = GetMTCsoportLista(.Name) 'in modListak
'    End With
'    With Me.ID_mtcsopkod
'        .Clear
'        .list = GetMTCsoportLista(.Name) 'in modListak
'    End With
'
'   'Munkat|fffd|rs listak feltoltese
'    With Me.mtnev
'        .Clear
'        .list = GetMunkat|fffd|rsLista(.Name) 'in modListak
'    End With
'    With Me.ID_mtkod
'        .Clear
'        .list = GetMunkat|fffd|rsLista(.Name) 'in modListak
'    End With
'
'    'Feladat t|fffd|pus listak feltoltese
'    With Me.feltipnev
'        .Clear
'        .list = GetFelTipusLista(.Name) 'in modListak
'    End With
'    With Me.ID_feltipkod
'        .Clear
'        .list = GetFelTipusLista(.Name) 'in modListak
'    End With
'
'    'Feladat st|fffd|tusz listak feltoltese
'    With Me.felstatnev
'        .Clear
'        .list = GetFelStatuszLista(.Name) 'in modListak
'    End With
'    With Me.ID_felstatkod
'        .Clear
'        .list = GetFelStatuszLista(.Name) 'in modListak
'    End With
    
    
End Sub



Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Feladatok' objektumba
 'TODO
'    Dim tetelData As Feladatok
'    Set tetelData = New Feladatok
'
'    With Me
'        With .ID_felkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felaktiv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felkod_elozo:       tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":   End With
'        With .felkiadnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felkiadkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_feltipkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felleir:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke1:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .ukapcsnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukapcskod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_projkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mtcsopnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtcsopkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mtnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .ID_putetelkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .pufotipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_pufotipkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .pualtipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_pualtipkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkiadev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiadho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiadnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkiaddatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezdnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felkezddatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervdatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenynap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenydatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felstatnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feleredmleir:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_felstatkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkesz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felcimke2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervkts:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervbev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltervhasz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenykts:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenybev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .feltenyhasz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .fellejartyn:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felmaiterv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felismyn:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .felkovdatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felegyeb3:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .felmegj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'
'
' '       With .ID_ukod:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .uaktiv:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .umegj:       tetelData.AddItem .Name, "''" & .Value, "CHAR":             End With 'hogy a szamot is karakterkent rogzitse
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Feladatok' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .ID_felkod:      .Value = tetelData.Item(.Name): End With
'        With .felaktiv:      .Value = tetelData.Item(.Name): End With
'        With .ID_felkod_elozo:      .Value = tetelData.Item(.Name): End With
'        With .felkiadnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_felkiadkod:      .Value = tetelData.Item(.Name): End With
'        With .feltipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_feltipkod:      .Value = tetelData.Item(.Name): End With
'        With .felnev:      .Value = tetelData.Item(.Name): End With
'        With .felleir:      .Value = tetelData.Item(.Name): End With
'        With .felcimke1:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .ukapcsnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukapcskod:      .Value = tetelData.Item(.Name): End With
'        With .projnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_projkod:      .Value = tetelData.Item(.Name): End With
'        With .mtcsopnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtcsopkod:      .Value = tetelData.Item(.Name): End With
'        With .mtnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtkod:      .Value = tetelData.Item(.Name): End With
'        With .ID_putetelkod:      .Value = tetelData.Item(.Name): End With
'        With .pufotipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_pufotipkod:      .Value = tetelData.Item(.Name): End With
'        With .pualtipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_pualtipkod:      .Value = tetelData.Item(.Name): End With
'        With .felkiadev:      .Value = tetelData.Item(.Name): End With
'        With .felkiadho:      .Value = tetelData.Item(.Name): End With
'        With .felkiadnap:      .Value = tetelData.Item(.Name): End With
'        With .felkiaddatum:      .Value = tetelData.Item(.Name): End With
'        With .felkezdev:      .Value = tetelData.Item(.Name): End With
'        With .felkezdho:      .Value = tetelData.Item(.Name): End With
'        With .felkezdnap:      .Value = tetelData.Item(.Name): End With
'        With .felkezddatum:      .Value = tetelData.Item(.Name): End With
'        With .feltervev:      .Value = tetelData.Item(.Name): End With
'        With .feltervho:      .Value = tetelData.Item(.Name): End With
'        With .feltervnap:      .Value = tetelData.Item(.Name): End With
'        With .feltervdatum:      .Value = tetelData.Item(.Name): End With
'        With .feltenyev:      .Value = tetelData.Item(.Name): End With
'        With .feltenyho:      .Value = tetelData.Item(.Name): End With
'        With .feltenynap:      .Value = tetelData.Item(.Name): End With
'        With .feltenydatum:      .Value = tetelData.Item(.Name): End With
'        With .felnapelt:      .Value = tetelData.Item(.Name): End With
'        With .felstatnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_felstatkod:      .Value = tetelData.Item(.Name): End With
'        With .feleredmleir:      .Value = tetelData.Item(.Name): End With
'        With .felkesz:      .Value = tetelData.Item(.Name): End With
'        With .felcimke1:      .Value = tetelData.Item(.Name): End With
'        With .felcimke2:      .Value = tetelData.Item(.Name): End With
'        With .feltervkts:      .Value = tetelData.Item(.Name): End With
'        With .feltervbev:      .Value = tetelData.Item(.Name): End With
'        With .feltervhasz:      .Value = tetelData.Item(.Name): End With
'        With .feltenykts:      .Value = tetelData.Item(.Name): End With
'        With .feltenybev:      .Value = tetelData.Item(.Name): End With
'        With .feltenyhasz:      .Value = tetelData.Item(.Name): End With
'        With .fellejartyn:      .Value = tetelData.Item(.Name): End With
'        With .felmaiterv:      .Value = tetelData.Item(.Name): End With
'        With .felismyn:      .Value = tetelData.Item(.Name): End With
'        With .felkovdatum:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb2:      .Value = tetelData.Item(.Name): End With
'        With .felegyeb3:      .Value = tetelData.Item(.Name): End With
'        With .felmegj:      .Value = tetelData.Item(.Name): End With
'
'
'        With .umegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub


Public Sub SetIDOnly(ByVal ID As Long)
 'TODO
'ID betoltese Form ID mezojebe, minden mas uresen marad
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "frmIsmFelTerv"
Attribute VB_Base = "0{D17D9B73-B231-4B13-B735-EA1AF089E980}{F343358D-BB92-4F12-BFEE-A62711F0F394}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtFeladatok
End Property


Private Sub UserForm_Initialize()
    
 'TODO
'   'Ugyfel listak feltoltese
'    With Me.unev
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'    With Me.ID_ukod
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
    
    
End Sub


Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Feladatok' objektumba
'ISM|fffd|TL|fffd|D|fffd| FELADAT FORM !
 'TODO
'    Dim tetelData As Feladatok
'    Set tetelData = New Feladatok
'
'    With Me
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mostfeltervev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mostfeltervho:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mostfeltervnap:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .kovfelpluszho:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .kovfelplusznap:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .kovfeltervev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .kovfeltervho:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .kovfeltervnap:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .feltervkts:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .feltervbev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .feltenykts:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .feltenybev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'
'
' '       With .ID_ukod:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .uaktiv:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
' '       With .umegj:       tetelData.AddItem .Name, "''" & .Value, "CHAR":             End With 'hogy a szamot is karakterkent rogzitse
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Feladatok' objektum adatainak betoltese a Form megfelelo mezoibe
'ISM|fffd|TL|fffd|D|fffd| FELADAT FORM !
 'TODO
'    With Me
'
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .mostfeltervev:      .Value = tetelData.Item(.Name): End With
'        With .mostfeltervho:      .Value = tetelData.Item(.Name): End With
'        With .mostfeltervnap:      .Value = tetelData.Item(.Name): End With
'        With .kovfelpluszho:      .Value = tetelData.Item(.Name): End With
'        With .kovfelplusznap:      .Value = tetelData.Item(.Name): End With
'        With .kovfeltervev:      .Value = tetelData.Item(.Name): End With
'        With .kovfeltervho:      .Value = tetelData.Item(.Name): End With
'        With .kovfeltervnap:      .Value = tetelData.Item(.Name): End With
'        With .feltervkts:      .Value = tetelData.Item(.Name): End With
'        With .feltervbev:      .Value = tetelData.Item(.Name): End With
'        With .feltenykts:      .Value = tetelData.Item(.Name): End With
'        With .feltenybev:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub
Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "frmMenu"
Attribute VB_Base = "0{92F541E7-3DBD-42DA-BE35-F904FF2F88BD}{644285E2-5E77-49F1-82DF-B6B92F349377}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'Public Property Get RelatedSheet() As Worksheet
'    Set RelatedSheet = shtXXX
'End Property

Private Sub UserForm_Initialize()
 'TODO
'
End Sub

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'XXX' objektumba
'TODO
'    Dim tetelData As XXX
'    Set tetelData = New XXX
'
'    With Me
'
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'FelMonitoring' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'
''        With .ID_xxx:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":           End With
''        With .xxx:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
''        With .xxx:     tetelData.AddItem .Name, .Value, "CHAR":                    End With
''        With .xxx:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
''        With .xxx:  tetelData.AddItem .Name, HandleSeparator(.Value), "FLOAT":  End With

'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnOK_Click()
    'FormRogzites Me.RelatedSheet, Me
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub



Attribute VB_Name = "frmMunkaTarsak"
Attribute VB_Base = "0{6DA2DF0E-505D-4616-BC44-9A1121BE78CB}{CB8FC8B8-7972-41D9-845F-4E798576A2F3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtMunkatarsak
End Property
Private Sub UserForm_Initialize()
 'TODO
'    'Munkat|fffd|rs csoport listak feltoltese
'    With Me.mtcsopnev
'        .Clear
'        .list = GetMTCsoportLista() 'in modListak
'    End With
'    With Me.ID_mtcsopkod
'        .Clear
'        .list = GetMTCsoportLista() 'in modListak
'    End With
'
'   'Munkat|fffd|rs st|fffd|tusz listak feltoltese
'    With Me.mtstatnev
'        .Clear
'        .list = GetMTStatuszLista(.Name) 'in modListak
'    End With
'    With Me.ID_mtstatkod
'        .Clear
'        .list = GetMTStatuszLista(.Name) 'in modListak
'    End With
    
    
End Sub

    

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Munkatarsak' objektumba
 'TODO
'    Dim tetelData As Munkatars
'    Set tetelData = New Munkatars
'    With Me
'
'        With .ID_mtkod:       tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":   End With
'        With .mtaktiv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtvnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtknev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtpnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtffno:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtorsz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtorszkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtirsz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtvaros:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtcim:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtemail:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uweb:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mttelvez:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtmob:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtszuldatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtaneve:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtigszam:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtadoszam:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mttbszam:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtmkor:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtcsopnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtcsopkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtstatnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtstatkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtszerz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtegyeb1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtegyeb2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtegyeb3:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtmegj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Munkatarsak' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .ID_mtkod:      .Value = tetelData.Item(.Name): End With
'        With .mtaktiv:      .Value = tetelData.Item(.Name): End With
'        With .mtvnev:      .Value = tetelData.Item(.Name): End With
'        With .mtknev:      .Value = tetelData.Item(.Name): End With
'        With .mtnev:      .Value = tetelData.Item(.Name): End With
'        With .mtpnev:      .Value = tetelData.Item(.Name): End With
'        With .mtffno:      .Value = tetelData.Item(.Name): End With
'        With .mtorsz:      .Value = tetelData.Item(.Name): End With
'        With .mtorszkod:      .Value = tetelData.Item(.Name): End With
'        With .mtirsz:      .Value = tetelData.Item(.Name): End With
'        With .mtvaros:      .Value = tetelData.Item(.Name): End With
'        With .mtcim:      .Value = tetelData.Item(.Name): End With
'        With .mtemail:      .Value = tetelData.Item(.Name): End With
'        With .uweb:      .Value = tetelData.Item(.Name): End With
'        With .mttelvez:      .Value = tetelData.Item(.Name): End With
'        With .mtmob:      .Value = tetelData.Item(.Name): End With
'        With .mtszuldatum:      .Value = tetelData.Item(.Name): End With
'        With .mtaneve:      .Value = tetelData.Item(.Name): End With
'        With .mtigszam:      .Value = tetelData.Item(.Name): End With
'        With .mtadoszam:      .Value = tetelData.Item(.Name): End With
'        With .mttbszam:      .Value = tetelData.Item(.Name): End With
'        With .mtmkor:      .Value = tetelData.Item(.Name): End With
'        With .mtcsopnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtcsopkod:      .Value = tetelData.Item(.Name): End With
'        With .mtstatnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtstatkod:      .Value = tetelData.Item(.Name): End With
'        With .mtszerz:      .Value = tetelData.Item(.Name): End With
'        With .mtegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .mtegyeb2:      .Value = tetelData.Item(.Name): End With
'        With .mtegyeb3:      .Value = tetelData.Item(.Name): End With
'        With .mtmegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub


Attribute VB_Name = "frmPUTetelek"
Attribute VB_Base = "0{0102C953-8091-41CE-BBDF-EE6812C0F452}{71032A96-2CEF-4B19-9D31-06F034E9A253}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private TetelSorszam As Long
Private RekordID As Long

Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtPUtetelek
End Property

Private Function GetNextTetelSorszam() As Long
    TetelSorszam = TetelSorszam + 1
    GetNextTetelSorszam = TetelSorszam
End Function
Private Function GetNextRekordID() As Long
    RekordID = RekordID + 1
    GetNextRekordID = RekordID
End Function


Private Sub UserForm_Initialize()

    'Lathatosag ertek
    With Me.beoreklat
        If EgyJogVan Then 'be van kapcsolava a jogosultsagi rendszer
            .Value = Abs(CInt(GetFonokNezetErv())) 'in modSecurity
            .Locked = Not CBool(.Value)
            .BackColor = IIf(CBool(.Value), &H80000005, &H80000004)
        Else
            .Value = 1
            .Locked = True
            .Visible = False
            Me.beoreklat_label.Visible = False
        End If
    End With

    'Ugyfel listak feltoltese
    With Me.unev
        .Clear
        .list = GetUgyfelNevLista()
    End With
    With Me.ID_ukod
        .Value = GetUgyfelKod(Me.unev.Value)
    End With

    'P|fffd| tipus listak feltoltese
    With Me.pufotipnev
        .Clear
        .list = GetFotipusListaFromPUTIPUSLISTA()
    End With
    With Me.pualtipnev
        .Clear
        .list = GetAltipusListaFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pufotipkod
        .Value = GetPuFoTipusKodFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With
    With Me.ID_putipkod
        .Value = GetPuTipusKod(Me.pufotipnev.Value, Me.pualtipnev.Value)
    End With

    'Projekt listak feltoltese
    With Me.projnev
        .Clear
        .list = GetProjektNevLista(Me.ID_ukod.Value)
    End With
    With Me.ID_projkod
        .Value = GetProjektKod(Me.projnev.Value)
    End With
    
    'Kapcsolodo lista feltoltese
    With Me.kapcsmunkalap
        .Clear
        .list = GetKapcsolodoMunkalapok()
    End With
    
    'SorokOsszesen frissitese
    OsszegekFrissitese
    
    'Timestamp
    With Me.bizrogzdatum
        .Value = DateToString(Now)
    End With
        
End Sub


'-------------------------------------------------------------
'       PUBLIC FUNCTIONS
'-------------------------------------------------------------

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Tetelek' objektumba
 
    Dim tetelData As Tetel
    Set tetelData = New Tetel

    With Me
        ' Timestamp
        With .bizrogzdatum:     tetelData.AddItem .Name, StringToDate(.Value), "FLOAT":  End With
        ' ID szamok, darabszamok, 1/0 ertekek
        With .ID_putetelkod:    tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_ukod:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_bizsorkod:     tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_bizkod:        tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .bizszlayn:        tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_projkod:       tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_pufotipkod:    tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_pualtipkod:    tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_putipkod:      tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .beoreklat:        tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        ' Datumok
        With .bizev:            tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .bizho:            tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .biznap:           tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .bizfhev:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .bizfhho:          tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .bizfhnap:         tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        ' Osszegek
        With .biznetto:         tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        With .bizafa:           tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        With .bizbrutto:        tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        With .bizsornetto:      tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        With .bizsorafa:        tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        With .bizsorbrutto:     tetelData.AddItem .Name, StringToFloat(.Value), "FLOAT":  End With
        ' Szoveges mezok
        With .bizsornev:    tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .unev:         tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .biznev:       tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizszam:      tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizsorszam:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .pufotipnev:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .pualtipnev:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .projnev:      tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizsoregyeb1: tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizsoregyeb2: tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizsoregyeb3: tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizsormegj:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizegyeb1:    tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizegyeb2:    tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizegyeb3:    tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .bizmegj:      tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .kapcsmunkalap: tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .kapcsckod:    tetelData.AddItem .Name, .Value, "CHAR":    End With
    End With

    'RETURN
    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Tetel' objektum adatainak betoltese a Form megfelelo mezoibe

    'Elsodleges kulcs es bizonylat sorszam ertekenek mentese
    RekordID = tetelData.Item("ID_putetelkod")
    TetelSorszam = tetelData.Item("ID_bizsorkod")

    With Me
        'Timestamp
        With .bizrogzdatum:         .Value = DateToString(tetelData.Item(.Name)):  End With
        'Osszegek
        With .biznetto:             .Value = FloatToString(tetelData.Item(.Name)): End With
        With .bizafa:               .Value = FloatToString(tetelData.Item(.Name)): End With
        With .bizbrutto:            .Value = FloatToString(tetelData.Item(.Name)): End With
        With .bizsornetto:          .Value = FloatToString(tetelData.Item(.Name)): End With
        With .bizsorafa:            .Value = FloatToString(tetelData.Item(.Name)): End With
        With .bizsorbrutto:         .Value = FloatToString(tetelData.Item(.Name)): End With
        ' Egyeb
        With .bizszlayn:            .Value = tetelData.Item(.Name): End With
        With .ID_putetelkod:        .Value = tetelData.Item(.Name): End With
        With .unev:                 .Value = tetelData.Item(.Name): End With
        With .ID_ukod:              .Value = tetelData.Item(.Name): End With
        With .biznev:               .Value = tetelData.Item(.Name): End With
        With .bizszam:              .Value = tetelData.Item(.Name): End With
        With .ID_bizkod:            .Value = tetelData.Item(.Name): End With
        With .bizev:                .Value = tetelData.Item(.Name): End With
        With .bizho:                .Value = tetelData.Item(.Name): End With
        With .biznap:               .Value = tetelData.Item(.Name): End With
        With .bizfhev:              .Value = tetelData.Item(.Name): End With
        With .bizfhho:              .Value = tetelData.Item(.Name): End With
        With .bizfhnap:             .Value = tetelData.Item(.Name): End With
        With .pufotipnev:           .Value = tetelData.Item(.Name): End With
        With .ID_pufotipkod:        .Value = tetelData.Item(.Name): End With
        With .bizegyeb1:            .Value = tetelData.Item(.Name): End With
        With .bizegyeb2:            .Value = tetelData.Item(.Name): End With
        With .bizegyeb3:            .Value = tetelData.Item(.Name): End With
        With .bizmegj:              .Value = tetelData.Item(.Name): End With
        With .beoreklat:            .Value = tetelData.Item(.Name): End With
        With .kapcsmunkalap:        .Value = tetelData.Item(.Name): End With
        With .kapcsckod:            .Value = tetelData.Item(.Name): End With
        
        With .bizsorszam:           .Value = tetelData.Item(.Name): End With
        With .ID_bizsorkod:         .Value = tetelData.Item(.Name): End With
        With .bizsornev:            .Value = tetelData.Item(.Name): End With
        With .pualtipnev:           .Value = tetelData.Item(.Name): End With
        With .ID_putipkod:          .Value = tetelData.Item(.Name): End With
        With .ID_pualtipkod:        .Value = tetelData.Item(.Name): End With
        With .projnev:              .Value = tetelData.Item(.Name): End With
        With .ID_projkod:           .Value = tetelData.Item(.Name): End With
        With .bizsoregyeb1:         .Value = tetelData.Item(.Name): End With
        With .bizsoregyeb2:         .Value = tetelData.Item(.Name): End With
        With .bizsoregyeb3:         .Value = tetelData.Item(.Name): End With
        With .bizsormegj:           .Value = tetelData.Item(.Name): End With
        
        OsszegekFrissitese .ID_bizkod
        
    End With
    
End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
    Me.ID_putetelkod.Value = ID
    RekordID = ID 'Elsodleges kulcs ertekenek mentese
    Me.ID_bizkod.Value = ID 'NOTE: a bizonylatkod megkapja az elso rogzitett rekord szamat, de ugyanaz marad a bizonylaton belul mindegyik sornal
    Me.ID_bizsorkod = GetNextTetelSorszam
End Sub


'-------------------------------------------------------------
'       EVENTS
'-------------------------------------------------------------

Private Sub unev_Change()
    'Ugyfel kod frissites
    With Me.ID_ukod
        .Value = GetUgyfelKod(Me.unev.Value)
    End With
    'Projekt listak feltoltese
    With Me.projnev
        .Clear
        .list = GetProjektNevLista(Me.ID_ukod.Value)
    End With
    With Me.ID_projkod
        .Value = GetProjektKod(Me.projnev.Value)
    End With
End Sub

Private Sub pufotipnev_Change()

    'AlTipus lista feltoltese
    With Me.pualtipnev
        .Clear
        .list = GetAltipusListaFromPUTIPUSLISTA(Me.pufotipnev.Value)
        '.ListIndex = 0                           'elso tetel kivalasztasa
        'Ha nincs altipus, akkor combobox inaktivalasa
        .Enabled = (.ListCount > 1)
    End With
    'Tipus kodok kikeresese
    With Me.ID_pufotipkod
        .Value = GetPuFoTipusKodFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With
    With Me.ID_putipkod
        .Value = GetPuTipusKod(Me.pufotipnev.Value, Me.pualtipnev.Value)
    End With

End Sub

Private Sub pualtipnev_Change()

    'Tipus kodok kikeresese
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With
    With Me.ID_putipkod
        .Value = GetPuTipusKod(Me.pufotipnev.Value, Me.pualtipnev.Value)
    End With
    
End Sub

Private Sub projnev_Change()

    'Projekt kod kikeresese
    With Me.ID_projkod
        .Value = GetProjektKod(Me.projnev.Value)
    End With

End Sub

Private Sub btnOK_Click()
    'Tetel rogzitese
    FormRogzites Me.RelatedSheet, Me, CloseForm:=False
    ' "Uj tetel rogzitese?" form
    Dim InputForm As frmUjSorVege: Set InputForm = New frmUjSorVege
    InputForm.Show
    Dim UjSor As Boolean: UjSor = InputForm.UjSor
    Unload InputForm
    Set InputForm = Nothing
    If UjSor Then
        OnUjTetelSor
    Else
        OnLezaras
        FormCancel Me 'Form bezarasa
    End If
End Sub

Private Sub btnCancel_Click()
    OnLezaras True
    FormCancel Me 'Form bezarasa
End Sub


'-------------------------------------------------------------
'       VALID|fffd|CI|fffd|K
'-------------------------------------------------------------

Private Sub bizev_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub bizev_Change()
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub bizho_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub bizho_Change()
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub biznap_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub biznap_Change()
    DatumValidacio Me.bizev, Me.bizho, Me.biznap
End Sub
Private Sub bizfhev_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub
Private Sub bizfhev_Change()
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub
Private Sub bizfhho_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub
Private Sub bizfhho_Change()
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub
Private Sub bizfhnap_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub
Private Sub bizfhnap_Change()
    DatumValidacio Me.bizfhev, Me.bizfhho, Me.bizfhnap
End Sub

Private Sub biznetto_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.biznetto
End Sub
Private Sub biznetto_Change()
    SzamValidacio Me.biznetto
End Sub
Private Sub bizafa_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.bizafa
End Sub
Private Sub bizafa_Change()
    SzamValidacio Me.bizafa
End Sub
Private Sub bizbrutto_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.bizbrutto
End Sub
Private Sub bizbrutto_Change()
    SzamValidacio Me.bizbrutto
End Sub
Private Sub bizsornetto_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.bizsornetto
End Sub
Private Sub bizsornetto_Change()
    SzamValidacio Me.bizsornetto
End Sub
Private Sub bizsorafa_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.bizsorafa
End Sub
Private Sub bizsorafa_Change()
    SzamValidacio Me.bizsorafa
End Sub
Private Sub bizsorbrutto_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    SzamValidacio Me.bizsorbrutto
End Sub
Private Sub bizsorbrutto_Change()
    SzamValidacio Me.bizsorbrutto
End Sub

Private Sub bizszlayn_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    BooleanValidacio Me.bizszlayn
End Sub
Private Sub bizszlayn_Change()
    BooleanValidacio Me.bizszlayn
End Sub
Private Sub beoreklat_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    BooleanValidacio Me.beoreklat
End Sub
Private Sub beoreklat_Change()
    BooleanValidacio Me.beoreklat
End Sub


'-------------------------------------------------------------
'       PRIVATE FUNCTIONS
'-------------------------------------------------------------

Private Sub OnUjTetelSor()
    DisableFejadatok                    'Fej adatok disable
    SetNextTetelSor GetNextRekordID, GetNextTetelSorszam    'Tetel adatok torles, uj sorszam adas
End Sub

Private Sub OnLezaras(Optional ByVal Cancel As Boolean = False)

    If TetelSorszam > CLng(Me.bizsordb.Value) Then
        'Uj tetel rogzitese
        If Cancel = True And TetelSorszam = 1 Then
            'megszakitas gombot nyomtak, es nem volt meg tetel rogzitve --> pass
            Exit Sub
        End If
    Else
        'Rogzitett tetel modositasa --> pass
        Exit Sub
    End If
    
    'Tetel adatok torlese, sorszam=0
    SetNextTetelSor GetNextRekordID, 0
    '0-s tetelsor rogzites
    FormRogzites Me.RelatedSheet, Me, CloseForm:=False

End Sub

Private Sub DisableFejadatok()
'Fej adatok nem modosithatok

    With Me
        With .bizszlayn:            .Enabled = False: End With
        With .ID_putetelkod:        .Enabled = False: End With
        With .unev:                 .Enabled = False: End With
        With .ID_ukod:              .Enabled = False: End With
        With .biznev:               .Enabled = False: End With
        With .bizszam:              .Enabled = False: End With
        With .ID_bizkod:            .Enabled = False: End With
        With .bizev:                .Enabled = False: End With
        With .bizho:                .Enabled = False: End With
        With .biznap:               .Enabled = False: End With
        With .bizfhev:              .Enabled = False: End With
        With .bizfhho:              .Enabled = False: End With
        With .bizfhnap:             .Enabled = False: End With
        With .biznetto:             .Enabled = False: End With
        With .bizafa:               .Enabled = False: End With
        With .bizbrutto:            .Enabled = False: End With
        With .pufotipnev:           .Enabled = False: End With
        With .bizegyeb1:            .Enabled = False: End With
        With .bizegyeb2:            .Enabled = False: End With
        With .bizegyeb3:            .Enabled = False: End With
        With .bizmegj:              .Enabled = False: End With
        With .kapcsmunkalap:        .Enabled = False: End With
        With .kapcsckod:            .Enabled = False: End With
        
    End With

End Sub

Private Sub SetNextTetelSor(ByVal ID As Long, ByVal bizsorkod As Long)
'Tetel adatok torlese, bizsorszam beallitasa
    
    With Me
        ' szamlalok
        With .ID_putetelkod:        .Value = ID:            End With
        With .ID_bizsorkod:         .Value = bizsorkod:    End With
        
        ' textboxok
        With .bizsornev:            .Value = vbNullString:  End With
        With .bizsorszam:           .Value = vbNullString:  End With
        With .bizsornetto:          .Value = vbNullString:  End With
        With .bizsorafa:            .Value = vbNullString:  End With
        With .bizsorbrutto:         .Value = vbNullString:  End With
        With .bizsoregyeb1:         .Value = vbNullString:  End With
        With .bizsoregyeb2:         .Value = vbNullString:  End With
        With .bizsoregyeb3:         .Value = vbNullString:  End With
        With .bizsormegj:           .Value = vbNullString:  End With
        With .kapcsckod:            .Value = vbNullString:  End With
        ' listboxok
        With .pualtipnev:           .Value = vbNullString:  End With ' .ListIndex = 0: .Enabled = (.ListCount > 1):  End With
        With .projnev:              .Value = vbNullString:  End With ' .ListIndex = 0: .Enabled = (.ListCount > 1):  End With
        With .kapcsmunkalap:        .Value = vbNullString:  End With ' .ListIndex = 0: .Enabled = (.ListCount > 1):  End With
        ' linkelt mezok
        With Me.ID_pualtipkod:      .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value):      End With
        With Me.ID_putipkod:        .Value = GetPuTipusKod(Me.pufotipnev.Value, Me.pualtipnev.Value):   End With
        With Me.ID_projkod:         .Value = GetProjektKod(Me.projnev.Value):                           End With

        OsszegekFrissitese .ID_bizkod
        
    End With
    
End Sub

Private Sub OsszegekFrissitese(Optional ID_bizkod As Long = 0)
    With Me
        .bizsordb.Value = IIf(bizszam = vbNullString, 0, GetPUTetelSorDarab(ID_bizkod))
        .bizsorokossznetto.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorNetto(ID_bizkod)))
        .bizsorokosszafa.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorAfa(ID_bizkod)))
        .bizsorokosszbrutto.Value = FloatToString(IIf(bizszam = vbNullString, 0, GetPUTetelSorBrutto(ID_bizkod)))
    End With
End Sub

Attribute VB_Name = "frmProjektek"
Attribute VB_Base = "0{D8B61181-4EA9-4D71-B853-58F11C27BD3E}{4C2146BC-256D-4DD9-A7AA-A60326BD25AF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtProjektek
End Property
Private Sub UserForm_Initialize()
 'TODO
'    '|fffd|gyf|fffd|l listak feltoltese
'    With Me.unev
'        .Clear
'        .list = GetUgyfelLista() 'in modListak
'    End With
'    With Me.ID_ukod
'        .Clear
'        .list = GetUgyfelLista() 'in modListak
'    End With
'
'    'Munkat|fffd|rs listak feltoltese
'    With Me.mtnev
'        .Clear
'        .list = GetMunkat|fffd|rsLista() 'in modListak
'    End With
'    With Me.ID_mtkod
'        .Clear
'        .list = GetMunkat|fffd|rsLista() 'in modListak
'    End With
'
'    'Munkat|fffd|rs csoport listak feltoltese
'    With Me.mtcsopnev
'        .Clear
'        .list = GetMTCsoportLista() 'in modListak
'    End With
'    With Me.ID_mtcsopkod
'        .Clear
'        .list = GetMTCsoportLista() 'in modListak
'    End With
'
'    'Projekt t|fffd|pus listak feltoltese
'    With Me.projtipnev
'        .Clear
'        .list = GetProjTipusLista() 'in modListak
'    End With
'    With Me.ID_projtipkod
'        .Clear
'        .list = GetProjTipusLista() 'in modListak
'    End With
'
'    'Projekt st|fffd|tusz listak feltoltese
'    With Me.projstatnev
'        .Clear
'        .list = GetProjStatuszLista() 'in modListak
'    End With
'    With Me.ID_projstatkod
'        .Clear
'        .list = GetProjStatuszLista() 'in modListak
'    End With
       
End Sub
    

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Projektek' objektumba
 'TODO
'    Dim tetelData As Projekt
'    Set tetelData = New Projekt
'    With Me
'
'        With .ID_projkod:       tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER":   End With
'        With .projaktiv:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .mtcsopnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtcsopkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .mtnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_mtkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projkezdoev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projkezdoho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projkezdonap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projkezdodatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .protervev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtervho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtervnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtervdeatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtenyev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtenyho:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtenynap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtenydatum:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projnapelt:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projleir:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projtipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_projtipkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projstatnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_projstatkod:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projcimkeyn:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projtervkts:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projtervbev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projtenykts:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projtenybev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .projegyeb1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projegyeb2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .projegyeb3:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'With .projmegj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Projektek' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .ID_projkod:      .Value = tetelData.Item(.Name): End With
'        With .projaktiv:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .mtcsopnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtcsopkod:      .Value = tetelData.Item(.Name): End With
'        With .mtnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_mtkod:      .Value = tetelData.Item(.Name): End With
'        With .projkezdoev:      .Value = tetelData.Item(.Name): End With
'        With .projkezdoho:      .Value = tetelData.Item(.Name): End With
'        With .projkezdonap:      .Value = tetelData.Item(.Name): End With
'        With .projkezdodatum:      .Value = tetelData.Item(.Name): End With
'        With .protervev:      .Value = tetelData.Item(.Name): End With
'        With .projtervho:      .Value = tetelData.Item(.Name): End With
'        With .projtervnap:      .Value = tetelData.Item(.Name): End With
'        With .projtervdeatum:      .Value = tetelData.Item(.Name): End With
'        With .projtenyev:      .Value = tetelData.Item(.Name): End With
'        With .projtenyho:      .Value = tetelData.Item(.Name): End With
'        With .projtenynap:      .Value = tetelData.Item(.Name): End With
'        With .projtenydatum:      .Value = tetelData.Item(.Name): End With
'        With .projnapelt:      .Value = tetelData.Item(.Name): End With
'        With .projnev:      .Value = tetelData.Item(.Name): End With
'        With .projleir:      .Value = tetelData.Item(.Name): End With
'        With .projtipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_projtipkod:      .Value = tetelData.Item(.Name): End With
'        With .projstatnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_projstatkod:      .Value = tetelData.Item(.Name): End With
'        With .projcimkeyn:      .Value = tetelData.Item(.Name): End With
'        With .projtervkts:      .Value = tetelData.Item(.Name): End With
'        With .projtervbev:      .Value = tetelData.Item(.Name): End With
'        With .projtenykts:      .Value = tetelData.Item(.Name): End With
'        With .projtenybev:      .Value = tetelData.Item(.Name): End With
'        With .projegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .projegyeb2:      .Value = tetelData.Item(.Name): End With
'        With .projegyeb3:      .Value = tetelData.Item(.Name): End With
'With .projmegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "frmPuTipLista"
Attribute VB_Base = "0{8B9EBDEE-4272-488E-B654-46EA0854599F}{9D9067DF-7CD8-410E-B8DD-AAE92429E30B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private RekordID As Long

Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtPuTipuslista
End Property

Private Function GetNextRekordID() As Long
    RekordID = RekordID + 1
    GetNextRekordID = RekordID
End Function


Private Sub UserForm_Initialize()

    'P|fffd| tipus listak feltoltese
    With Me.pufotipnev
        .Clear
        .list = GetFotipusListaFromPUTIPUSLISTA()
    End With
    With Me.pualtipnev
        .Clear
        .list = GetAltipusListaFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pufotipkod
        .Value = GetPuFoTipusKodFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With
    '|fffd|rv|fffd|nyess|fffd|g default=1
    With Me.putiperv
        .Value = 1
    End With

End Sub


'-------------------------------------------------------------
'       PUBLIC FUNCTIONS
'-------------------------------------------------------------

Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Tetelek' objektumba

    Dim tetelData As Tetel
    Set tetelData = New Tetel

    With Me
        ' ID szamok, darabszamok, 1/0 ertekek
        With .ID_pufotipkod:    tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_pualtipkod:    tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .ID_putipkod:      tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        With .putiperv:         tetelData.AddItem .Name, StringToInteger(.Value), "INTEGER": End With
        ' Szoveges mezok
        With .pufotipnev:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .pualtipnev:   tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .putipkvadat:  tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .putipkvleir:  tetelData.AddItem .Name, .Value, "CHAR":    End With
        With .putipmegj:    tetelData.AddItem .Name, .Value, "CHAR":    End With
    End With

    'RETURN
    Set GetTetelData = tetelData

End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A 'Tetel' objektum adatainak betoltese a Form megfelelo mezoibe

    'Elsodleges kulcs es bizonylat sorszam ertekenek mentese
    RekordID = tetelData.Item("ID_putipkod")

    With Me
        ' Egyeb
        With .putiperv:         .Value = tetelData.Item(.Name): End With
        With .ID_pufotipkod:    .Value = tetelData.Item(.Name): End With
        With .ID_pualtipkod:    .Value = tetelData.Item(.Name): End With
        With .ID_putipkod:      .Value = tetelData.Item(.Name): End With
        With .pufotipnev:       .Value = tetelData.Item(.Name): End With
        With .pualtipnev:       .Value = tetelData.Item(.Name): End With
        With .putipkvadat:      .Value = tetelData.Item(.Name): End With
        With .putipkvleir:      .Value = tetelData.Item(.Name): End With
        With .putipmegj:        .Value = tetelData.Item(.Name): End With
    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
    Me.ID_putipkod.Value = ID
    RekordID = ID
End Sub


'-------------------------------------------------------------
'       EVENTS
'-------------------------------------------------------------

Private Sub pufotipnev_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    'AlTipus lista feltoltese
    With Me.pualtipnev
        .Clear
        .list = GetAltipusListaFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    'Tipus kodok kikeresese
    With Me.ID_pufotipkod
        .Value = GetPuFoTipusKodFromPUTIPUSLISTA(Me.pufotipnev.Value)
    End With
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With

End Sub

Private Sub pualtipnev_Exit(ByVal Cancel As MSForms.ReturnBoolean)

    'Tipus kodok kikeresese
    With Me.ID_pualtipkod
        .Value = GetPuAlTipusKodFromPUTIPUSLISTA(Me.pualtipnev.Value)
    End With

End Sub

Private Sub btnOK_Click()
    'Tetel rogzitese
    FormRogzites Me.RelatedSheet, Me, CloseForm:=False
    ' "Uj sor rogzitese?" form
    Dim InputForm As frmUjSorVege: Set InputForm = New frmUjSorVege
    InputForm.Show
    Dim UjSor As Boolean: UjSor = InputForm.UjSor
    Unload InputForm
    Set InputForm = Nothing
    If UjSor Then
        OnUjTetelSor
    Else
        OnLezaras
        FormCancel Me 'Form bezarasa
    End If
End Sub

Private Sub btnCancel_Click()
    OnLezaras
    FormCancel Me 'Form bezarasa
End Sub

Private Sub OnUjTetelSor()
    SetNextTetelSor GetNextRekordID    'Tetel adatok torles, uj sorszam adas
End Sub

Private Sub OnLezaras()
'pass
End Sub


'-------------------------------------------------------------
'       VALID|fffd|CI|fffd|K
'-------------------------------------------------------------

Private Sub putiperv_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    BooleanValidacio Me.putiperv
End Sub
Private Sub putiperv_Change()
    BooleanValidacio Me.putiperv
End Sub


'-------------------------------------------------------------
'       PRIVATE FUNCTIONS
'-------------------------------------------------------------

Private Sub SetNextTetelSor(ByVal ID As Long)
'Tetel adatok torlese, bizsorszam beallitasa

    With Me
        With .ID_putipkod:          .Value = ID:            End With

        With .putiperv:             .Value = 1:             End With
        
        With .pufotipnev:           .Value = vbNullString:  End With
        With .ID_pufotipkod:        .Value = vbNullString:  End With
        With .pualtipnev:           .Value = vbNullString:  End With
        With .ID_pualtipkod:        .Value = vbNullString:  End With
        With .putipkvadat:          .Value = vbNullString:  End With
        With .putipkvleir:          .Value = vbNullString:  End With
        With .putipmegj:            .Value = vbNullString:  End With
    End With

End Sub
Attribute VB_Name = "frmUgyfelek"
Attribute VB_Base = "0{0C9F3C2D-DA08-47E1-93E6-205F62A806E9}{5831E673-465F-4CCB-A49F-E041CBCB24DF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtUgyfelek
End Property


Private Sub UserForm_Initialize()
 'TODO
'   'Ugyfel csoport listak feltoltese
'    With Me.ucsopnev
'        .Clear
'        '.list = GetUgyfelCsoportLista(.Name) 'in modListak
'    End With
'    With Me.ID_ucsopkod
'        .Clear
'        .list = GetUgyfelCsoportLista(.Name) 'in modListak
'    End With
'
'    'Ugyfel st|fffd|tusz listak feltoltese
'    With Me.ustatnev
'        .Clear
'        .list = GetUgyfelStatuszCsoportLista(.Name) 'in modListak
'    End With
'    With Me.ID_ustatkod
'        .Clear
'        .list = GetUgyfelStatuszLista(.Name) 'in modListak
'    End With
'
'    ' |fffd|GYF|fffd|L KAPCSOLAT LISTA ????
'
'    'Feladat t|fffd|pus listak feltoltese
'    With Me.feltipnev
'        .Clear
'        .list = GetFeladatTipusLista(.Name) 'in modListak
'    End With
'    With Me.ID_feltipkod
'        .Clear
'        .list = GetFeladatTipusLista(.Name) 'in modListak
'    End With
    
        
End Sub



Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Ugyfelek' objektumba

 'TODO
'    Dim tetelData As Ugyfel
'    Set tetelData = New Ugyfel
'
'    With Me
'
'        With .ID_ukod:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
'        With .uaktiv:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
'        With .uvnev:     tetelData.AddItem .Name, .Value, "CHAR":     End With
'        With .uknev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .unevp:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ucmffno:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .urnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uorsz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uorszkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uirsz:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uvaros:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ucim:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uemail1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uweb:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .utelvez:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .umob1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uadoszam:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ubeoszt:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uszlacim:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ucsopnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ucsopkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ustatnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ustatkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ukapcslista:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukapcslistakod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ufeltipnev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ufeltipkod:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uismfelnap:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uismfelkts:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .uismfelbev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .uegyeb1:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uegyeb2:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .uegyeb3:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .umegj:       tetelData.AddItem .Name, "''" & .Value, "CHAR":             End With 'hogy a szamot is karakterkent rogzitse
'
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'A '|fffd|gyfelek' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .uaktiv:      .Value = tetelData.Item(.Name): End With
'        With .uvnev:      .Value = tetelData.Item(.Name): End With
'        With .uknev:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .upnev:      .Value = tetelData.Item(.Name): End With
'        With .ucmffno:      .Value = tetelData.Item(.Name): End With
'        With .urnev:      .Value = tetelData.Item(.Name): End With
'        With .uorsz:      .Value = tetelData.Item(.Name): End With
'        With .uorszkod:      .Value = tetelData.Item(.Name): End With
'        With .uirsz:      .Value = tetelData.Item(.Name): End With
'        With .uvaros:      .Value = tetelData.Item(.Name): End With
'        With .ucim:      .Value = tetelData.Item(.Name): End With
'        With .uemail1:      .Value = tetelData.Item(.Name): End With
'        With .uweb:      .Value = tetelData.Item(.Name): End With
'        With .utelvez:      .Value = tetelData.Item(.Name): End With
'        With .umob1:      .Value = tetelData.Item(.Name): End With
'        With .uadoszam:      .Value = tetelData.Item(.Name): End With
'        With .ubeoszt:      .Value = tetelData.Item(.Name): End With
'        With .uszlacim:      .Value = tetelData.Item(.Name): End With
'        With .ucsopnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ucsopkod:      .Value = tetelData.Item(.Name): End With
'        With .ustatnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ustatkod:      .Value = tetelData.Item(.Name): End With
'        With .ukapcslista:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukapcslistakod:      .Value = tetelData.Item(.Name): End With
'        With .feltipnev:      .Value = tetelData.Item(.Name): End With
'        With .ID_feltipkod:      .Value = tetelData.Item(.Name): End With
'        With .uismfelnap:      .Value = tetelData.Item(.Name): End With
'        With .uismfelkts:      .Value = tetelData.Item(.Name): End With
'        With .uismfelbev:      .Value = tetelData.Item(.Name): End With
'        With .uegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .uegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .uegyeb1:      .Value = tetelData.Item(.Name): End With
'        With .umegj:      .Value = tetelData.Item(.Name): End With
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub

Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "frmUjSorVege"
Attribute VB_Base = "0{4B4A9205-1E93-4323-B165-C2E2B8B334E8}{4D391FD7-1238-4DD4-AC1D-CE3E344B9CF4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Type TFields
    UjSor As Boolean
End Type
Private this As TFields

Public Property Get UjSor() As Boolean
    UjSor = this.UjSor
End Property

Private Sub btnUjsor_Click()
    this.UjSor = True
    Me.Hide
End Sub

Private Sub btnVege_Click()
    this.UjSor = False
    Me.Hide
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
        Cancel = True
        MsgBox "K|fffd|rem, haszn|fffd|lja az |fffd|rlapon tal|fffd|lhat|fffd| gombokat", vbCritical
    End If
End Sub
Attribute VB_Name = "frmUtalasok"
Attribute VB_Base = "0{9B96122A-E226-45D8-B155-92D90E8E1BD6}{C1E98FAF-E9EC-4A45-8882-54A7C130F3F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Property Get RelatedSheet() As Worksheet
    Set RelatedSheet = shtUtalasok
End Property




Private Sub UserForm_Initialize()
    'TODO
'    'Ugyfel listak feltoltese
'    With Me.unev
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'    With Me.ID_ukod
'        .Clear
'        .list = GetUgyfelLista(.Name) 'in modListak
'    End With
'
'    'PUTetel listak feltoltese
'    With Me.biznev
'        .Clear
'        .list = GetPUtetelLista(.Name) 'in modListak
'    End With
'    With Me.ID_bizkod
'        .Clear
'        .list = GetPUtetelLista(.Name) 'in modListak
'    End With
      
    
End Sub




Public Function GetTetelData() As Tetel
'Form adatainak betoltese 'Utalasok' objektumba
 'TODO
'    Dim tetelData As Utalas
'    Set tetelData = New Utalas
'
'    With Me
'
'        With .ID_utalkod:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":   End With
'        With .utalev:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .utalho:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .utalnap:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .unev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .ID_ukod:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":   End With
'        With .ID_bizkod:       tetelData.AddItem .Name, CLng(.Value), "INTEGER":   End With
'        With .biznev:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .bizszam:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        With .bizbrutto:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .utalosszeg:       tetelData.AddItem .Name, .Value, "INTEGER":   End With
'        With .bizegy:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'        'bizujegy   |fffd|J EGYENLEG K|fffd|PZ|fffd|S ???
'        With .utalmegj:       tetelData.AddItem .Name, .Value, "CHAR":   End With
'
'        'With .szlakeltev:      tetelData.AddItem .Name, .Value, "INTEGER":                 End With
'        'With .unev:     tetelData.AddItem .Name, .Value, "CHAR":                    End With
'        'With .ID_ukod:     tetelData.AddItem .Name, IIf(.TextLength = 0, 0, .Value), "INTEGER": End With
'        'With .tosszeg:  tetelData.AddItem .Name, HandleSeparator(.Value), "FLOAT":  End With
'    End With
'
'    'RETURN
'    Set GetTetelData = tetelData
    
End Function

Public Sub SetTetelData(ByVal tetelData As Tetel)
'Az 'Utalasok' objektum adatainak betoltese a Form megfelelo mezoibe
 'TODO
'    With Me
'        With .ID_utalkod:      .Value = tetelData.Item(.Name): End With
'        With .utalev:      .Value = tetelData.Item(.Name): End With
'        With .utalho:      .Value = tetelData.Item(.Name): End With
'        With .utalnap:      .Value = tetelData.Item(.Name): End With
'        With .unev:      .Value = tetelData.Item(.Name): End With
'        With .ID_ukod:      .Value = tetelData.Item(.Name): End With
'        With .ID_szlakod:      .Value = tetelData.Item(.Name): End With
'        With .biznev:      .Value = tetelData.Item(.Name): End With
'        With .bizszam:      .Value = tetelData.Item(.Name): End With
'        With .bizbrutto:      .Value = tetelData.Item(.Name): End With
'        With .utalosszeg:      .Value = tetelData.Item(.Name): End With
'        With .bizegy:      .Value = tetelData.Item(.Name): End With
'        'bizujegy   |fffd|J EGYENLEG K|fffd|PZ|fffd|S ???
'        With .utalmegj:      .Value = tetelData.Item(.Name): End With
'
'
'    End With

End Sub

Public Sub SetIDOnly(ByVal ID As Long)
'ID betoltese Form ID mezojebe, minden mas uresen marad
'TODO
'    Me.ID_XXX.Value = XXX
End Sub
Private Sub btnCancel_Click()
    FormCancel Me
End Sub

Private Sub btnOK_Click()
    FormRogzites Me.RelatedSheet, Me
End Sub



Attribute VB_Name = "modErrorHandling"
Option Explicit
Option Private Module

'
' Description:  This module contains the central error
'               handler and related constant declarations.
'
' Authors:      Stephen Bullen, www.oaltd.co.uk
'               Rob Bovey, www.appspro.com
'
' Chapter Change Overview
' Ch#   Comment
' --------------------------------------------------------------
' 12    Initial version
'


' **************************************************************
' Global Constant Declarations Follow
' **************************************************************
Public Const glHANDLED_ERROR As Long = 9999     ' Run-time error number for our custom errors.
Public Const glUSER_CANCEL As Long = 18         ' The error number generated when the user cancels program execution.
Public Const gsAPPNAME As String = "ErrorHandler"

Public gbDebugMode As Boolean

Public Enum DebugModeEnum
    debugBypass 'VBE debugging, nincs k|fffd|l|fffd|n elj|fffd|r|fffd|s
    debugAdmin  'ErrorHandling, enged|fffd|lyezett a VBE-be bel|fffd|p|fffd|s
    debugClient 'ErrorHandling, NEM enged|fffd|lyezett a VBE-be bel|fffd|p|fffd|s
    debugIgnore 'Resume Next mindenhol, hogy ne legyen hiba|fffd|zenet
End Enum

Public Const DebugMode = debugClient 'debugBypass debugAdmin debugClient debugIgnore


' **************************************************************
' Module Constant Declarations Follow
' **************************************************************
Private Const msSILENT_ERROR As String = "UserCancel"   ' Used by the central error handler to bail out silently on user cancel.
Private Const msFILE_ERROR_LOG As String = "Error.log"  ' The name of the file where error messages will be logged to.


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Comments: This is the central error handling procedure for the
'           program. It logs and displays any run-time errors
'           that occur during program execution.
'
' Arguments:    sModule         The module in which the error occured.
'               sProc           The procedure in which the error occured.
'               sFile           (Optional) For multiple-workbook
'                               projects this is the name of the
'                               workbook in which the error occured.
'               bEntryPoint     (Optional) True if this call is
'                               being made from an entry point
'                               procedure. If so, an error message
'                               will be displayed to the user.
'
' Returns:      Boolean         True if the program is in debug
'                               mode, False if it is not.
'
' Date          Developer       Chap    Action
' --------------------------------------------------------------
' 28 May 04     Rob Bovey       Ch12    Initial version
' 05 Jun 04     Stephen Bullen  Ch12    Modified to demonstrate the re-throw method
'
Public Function bCentralErrorHandler( _
                                     ByVal sModule As String, _
                                     ByVal sProc As String, _
                                     Optional ByVal sFile As String, _
                                     Optional ByVal bEntryPoint As Boolean = False, _
                                     Optional ByVal bReThrow As Boolean = True) As Boolean

    Static sErrMsg As String

    Dim iFile As Integer
    Dim lErrNum As Long
    Dim sFullSource As String
    Dim sPath As String
    Dim sLogText As String
    
    'Handle SpeedUp
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    On Error Resume Next
        Application.Calculation = xlCalculationAutomatic
    On Error GoTo 0
    
    If DebugMode = debugBypass Or DebugMode = debugAdmin Then
        gbDebugMode = True
    Else
        gbDebugMode = False
    End If
    
    
    ' Grab the error info before it's cleared by
    ' On Error Resume Next below.
    lErrNum = Err.Number

    ' If this is a user cancel, set the silent error flag
    ' message. This will cause the error to be ignored.
    If lErrNum = glUSER_CANCEL Then sErrMsg = msSILENT_ERROR

    ' If this is the originating error, the static error
    ' message variable will be empty. In that case, store
    ' the originating error message in the static variable.
    If Len(sErrMsg) = 0 Then sErrMsg = Err.Description

    ' We cannot allow errors in the central error handler.
    On Error Resume Next

    ' Load the default filename if required.
    If Len(sFile) = 0 Then sFile = ThisWorkbook.Name

    ' Get the application directory.
    sPath = ThisWorkbook.Path
    If Right$(sPath, 1) <> "\" Then sPath = sPath & "\"

    ' Construct the fully-qualified error source name.
    sFullSource = "[" & sFile & "]" & sModule & "." & sProc

    ' Create the error text to be logged.
    sLogText = "  " & sFullSource & ", Error " & _
               CStr(lErrNum) & ": " & sErrMsg

    ' Open the log file, write out the error information and
    ' close the log file.
    iFile = FreeFile()
    Open sPath & ThisWorkbook.Name & "_" & msFILE_ERROR_LOG For Append As #iFile
    Print #iFile, Format$(Now(), "yyyy.mm.dd hh:mm:ss"), sLogText
    If bEntryPoint Or Not bReThrow Then Print #iFile,
    Close #iFile

    ' Do not display or debug silent errors.
    If sErrMsg <> msSILENT_ERROR Then

        ' Show the error message when we reach the entry point
        ' procedure or immediately if we are in debug mode.
        If bEntryPoint Or gbDebugMode Then
            Application.ScreenUpdating = True
            MsgBox sErrMsg, vbCritical, gsAPPNAME
            ' Clear the static error message variable once
            ' we've reached the entry point so that we're ready
            ' to handle the next error.
            sErrMsg = vbNullString
        End If

        ' The return vale is the debug mode status.
        bCentralErrorHandler = gbDebugMode

    Else
        ' If this is a silent error, clear the static error
        ' message variable when we reach the entry point.
        If bEntryPoint Then sErrMsg = vbNullString
        bCentralErrorHandler = False
    End If

    'SB 05 Jun 04: Extra code for re-throw method
    'If we're using re-throw error handling (the default for this project),
    'this is not the entry point and we're not debugging,
    're-raise the error, to be caught in the next procedure
    'up the call stack.
    'Procedures that handle their own errors can call the central error
    'handler with bReThrow:=False to log the error, but not re-raise it.
    If bReThrow Then
        If Not bEntryPoint And Not gbDebugMode Then
            On Error GoTo 0
            Err.Raise lErrNum, sFullSource, sErrMsg
        End If
    Else
        'Error is being logged and handled,
        'so clear the static error message variable
        sErrMsg = vbNullString
    End If

End Function

Attribute VB_Name = "modListak"
Option Explicit
Option Base 1

' ***** Listak form controlokhoz *****
'
'

Public Function GetUgyfelNevLista() As Variant
'Ugyfel lista UGYFELEK laprol
    Const ReturnField As String = "unev"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    'NINCS SZURO
    
    GetUgyfelNevLista = GetFilteredList(shtUgyfelek, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
        
End Function

Public Function GetUgyfelKod(ByVal unev As String) As Variant
'Ugyfelnev alapjan kikeresi a hozza tartozo ugyfel kodot.
    Const ReturnField As String = "ID_ukod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "unev", unev
    
    GetUgyfelKod = GetFilteredValue(shtUgyfelek, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
    
End Function

Public Function GetFotipusListaFromPUTIPUSLISTA() As Variant
'Fotipus lista PUTIPUSLISTA laprol
    Const ReturnField As String = "pufotipnev"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "putiperv", 1
    
    GetFotipusListaFromPUTIPUSLISTA = GetFilteredList(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetFotipusListaFromSETUP() As Variant
'Fotipus lista SETUP-FELH laprol
    Const ReturnField As String = "spufotipnev"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "spufotiperv", 1
    
    GetFotipusListaFromSETUP = GetFilteredList(shtSetupFelh, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetAltipusListaFromPUTIPUSLISTA(ByVal pufotipnev As String) As Variant
'Altipus lista PUTIPUSLISTA laprol, fotipusra szurve
    Const ReturnField As String = "pualtipnev"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "pufotipnev", pufotipnev
    dFilter.Add "putiperv", 1
    
    GetAltipusListaFromPUTIPUSLISTA = GetFilteredList(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
    
End Function

Public Function GetAltipusListaFromSETUP(ByVal pufotipnev As String) As Variant
'Altipus lista SETUP-FELH laprol, fotipusra szurve
    Const ReturnField As String = "spualtipnev"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "spualtiperv", 1
    
    GetAltipusListaFromSETUP = GetFilteredList(shtSetupFelh, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
    
End Function

Public Function GetPuFoTipusKodFromPUTIPUSLISTA(ByVal pufotipnev As String) As Variant
'Fotipus kod PUTIPUSLISTA laprol, fotipus nev alapjan
'Ha veletlenul tobb tetelt adna eredmenyul, az elsot adja vissza.
    
    If pufotipnev = vbNullString Then GetPuFoTipusKodFromPUTIPUSLISTA = 0: Exit Function
    
    Const ReturnField As String = "ID_pufotipkod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "pufotipnev", pufotipnev
    dFilter.Add "putiperv", 1
    
    Dim tempKod As Variant
    tempKod = GetFilteredValue(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
    'Ha nincs tempKod, akkor uj fotipust vittek be, kap uj sorszamot
    If IsEmpty(tempKod) Or tempKod = vbNullString Then
        dFilter.RemoveAll
        tempKod = CountElementsOfArray(GetFilteredList(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)) + 1
    End If
    GetPuFoTipusKodFromPUTIPUSLISTA = tempKod
    
End Function

Public Function GetPuFoTipusKodFromSETUP(ByVal pufotipnev As String) As Variant
'Fotipus kod SETUP-FELH laprol, fotipus nev alapjan
'Ha veletlenul tobb tetelt adna eredmenyul, az elsot adja vissza.
    Const ReturnField As String = "ID_spufotipkod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "spufotipnev", pufotipnev
    dFilter.Add "spufotiperv", 1
    
    GetPuFoTipusKodFromSETUP = GetFilteredValue(shtSetupFelh, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetPuAlTipusKodFromPUTIPUSLISTA(ByVal pualtipnev As String) As Variant
'Altipus kod PUTIPUSLISTA laprol, altipus nev alapjan
'Ha veletlenul tobb tetelt adna eredmenyul, az elsot adja vissza.
    
    If pualtipnev = vbNullString Then GetPuAlTipusKodFromPUTIPUSLISTA = 0: Exit Function
    
    Const ReturnField As String = "ID_pualtipkod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "pualtipnev", pualtipnev
    dFilter.Add "putiperv", 1
    
    Dim tempKod As Variant
    tempKod = GetFilteredValue(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)
    If IsEmpty(tempKod) Or tempKod = vbNullString Then
        dFilter.RemoveAll
        tempKod = CountNonZeroNumericElementsOfArray(GetFilteredList(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)) + 1
    End If

    GetPuAlTipusKodFromPUTIPUSLISTA = tempKod

End Function

Public Function GetPuAlTipusKodFromSETUP(ByVal pualtipnev As String) As Variant
'Altipus kod SETUP-FELH laprol, altipus nev alapjan
'Ha veletlenul tobb tetelt adna eredmenyul, az elsot adja vissza.
    Const ReturnField As String = "ID_spualtipkod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "spualtipnev", pualtipnev
    dFilter.Add "spualtiperv", 1
    
    GetPuAlTipusKodFromSETUP = GetFilteredValue(shtSetupFelh, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetPuTipusKod(ByVal pufotipnev As String, ByVal pualtipnev As String) As Variant
'Pu Tipus kod PUTIPUSLISTA laprol, fotipusra |fffd|s altipusra szurve.
'Ha veletlenul tobb tetelt adna eredmenyul, az elsot adja vissza.
    Const ReturnField As String = "ID_putipkod"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "pufotipnev", pufotipnev
    dFilter.Add "pualtipnev", pualtipnev
    dFilter.Add "putiperv", 1
    
    GetPuTipusKod = GetFilteredValue(shtPuTipuslista, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetProjektNevLista(ByVal strID_ukod As String) As Variant
'Projekt nevek lista PROJEKTEK laprol
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    Dim ID_ukod As Long
    If strID_ukod = vbNullString Then
        ID_ukod = 0
    Else
        ID_ukod = CLng(strID_ukod)
    End If
    dFilter.Add "ID_ukod", ID_ukod
    
    GetProjektNevLista = GetFilteredList(shtProjektek, dFilter, "projnev", Distinct:=True, AllowEmpty:=False)
    
End Function

Public Function GetKapcsolodoMunkalapok() As Variant
'Kapcsolodo munkalapok lista a PU TETELEK laprol
    Const ReturnField As String = "kapcsmunkalap"
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    'dFilter.Add "...", ...
    
    GetKapcsolodoMunkalapok = GetFilteredList(shtPUtetelek, dFilter, ReturnField, Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetProjektKod(ByVal projnev As String) As Variant
'Projektnev alapjan kikeresi a hozza tartozo projekt kodot.
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "projnev", projnev
    
    GetProjektKod = GetFilteredValue(shtProjektek, dFilter, "ID_projkod", Distinct:=True, AllowEmpty:=False)

End Function

Public Function GetPUTetelSorDarab(ByVal ID_bizkod As Long) As Double
'Bizonylatszam alapjan megszamolja a hozza tartozo tetelek szamat, ahol biz.sorsz nem nulla
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "ID_bizkod", ID_bizkod
    
    Dim Arr As Variant
    Arr = GetFilteredList(shtPUtetelek, dFilter, "ID_bizsorkod", Distinct:=False, AllowEmpty:=True)
    GetPUTetelSorDarab = CountNonZeroNumericElementsOfArray(Arr)

End Function

Public Function GetPUTetelSorNetto(ByVal ID_bizkod As Long) As Double
'Bizonylatszam alapjan osszeadja a hozza tartozo tetelek osszeget
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "ID_bizkod", ID_bizkod
    
    Dim Arr As Variant
    Arr = GetFilteredList(shtPUtetelek, dFilter, "bizsornetto", Distinct:=False, AllowEmpty:=True)
    GetPUTetelSorNetto = GetSubtotalOfArray(Arr)

End Function

Public Function GetPUTetelSorAfa(ByVal ID_bizkod As Long) As Double
'Bizonylatszam alapjan osszeadja a hozza tartozo tetelek osszeget
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "ID_bizkod", ID_bizkod
    
    Dim Arr As Variant
    Arr = GetFilteredList(shtPUtetelek, dFilter, "bizsorafa", Distinct:=False, AllowEmpty:=True)
    GetPUTetelSorAfa = GetSubtotalOfArray(Arr)

End Function

Public Function GetPUTetelSorBrutto(ByVal ID_bizkod As Long) As Double
'Bizonylatszam alapjan osszeadja a hozza tartozo tetelek osszeget
    Dim dFilter As Scripting.Dictionary: Set dFilter = New Scripting.Dictionary: dFilter.CompareMode = TextCompare
    ' SZUROK HOZZAADASA
    dFilter.Add "ID_bizkod", ID_bizkod
    
    Dim Arr As Variant
    Arr = GetFilteredList(shtPUtetelek, dFilter, "bizsorbrutto", Distinct:=False, AllowEmpty:=True)
    GetPUTetelSorBrutto = GetSubtotalOfArray(Arr)

End Function

Public Function GetOKLista() As Variant
'I/N lista >> Array
    GetOKLista = Array("I", "N")
End Function

Public Function GetSetupLista(ByVal rng As Range, _
                              Optional ByVal BoolMask As Range, _
                              Optional ByVal Distinct As Boolean = False, _
                              Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array
    Dim Arr As Variant
    If Distinct Then
        Arr = DistinctListFromRange(rng, BoolMask:=BoolMask, AllowEmpty:=AllowEmpty)
    Else
        Arr = ListFromRange(rng, BoolMask:=BoolMask, AllowEmpty:=AllowEmpty)
    End If
    If IsArray(Arr) Then
        GetSetupLista = Arr
    Else
        GetSetupLista = Array(vbNullString)
    End If
End Function

Public Function NamedRangeToRange(ByVal RangeName As String, ByVal WS As Worksheet) As Range
    If RangeExists(RangeName, WS) Then
        Set NamedRangeToRange = WS.Range(RangeName)
    End If
End Function

Private Function GetFilteredList(ByRef sht As Object, ByVal dFilter As Scripting.Dictionary, ReturnField As String, _
                                 Optional ByVal Distinct As Boolean = False, _
                                 Optional ByVal AllowEmpty As Boolean = False) As Variant
    
    With WorksheetProxy.Create(sht)
        GetFilteredList = .GetFilteredList(dFilter, ReturnField, Distinct:=Distinct, AllowEmpty:=AllowEmpty)
        If IsEmpty(GetFilteredList) Then GetFilteredList = Array(vbNullString)
    End With
    
End Function

Private Function GetFilteredValue(sht As Object, dFilter As Scripting.Dictionary, ReturnField As String, _
                                  Optional ByVal Distinct As Boolean = False, _
                                  Optional ByVal AllowEmpty As Boolean = False) As Variant
    Dim Arr As Variant: Arr = GetFilteredList(sht, dFilter, ReturnField, Distinct, AllowEmpty)
    GetFilteredValue = Arr(LBound(Arr))
End Function



Private Function ListFromRange(ByVal rng As Range, _
                               Optional ByVal BoolMask As Range, _
                               Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array
    If Not rng Is Nothing Then
        Dim Arr() As Variant
        Dim i As Long 'array counter
        Dim c As Long 'range counter
        For c = 1 To rng.Cells.Count
            Dim cella As Range
            Set cella = rng.Cells(c)
            Dim include As Boolean
            If Not BoolMask Is Nothing Then
                include = CBool(BoolMask.Cells(c).Value)
            Else
                include = True
            End If
            If include Then
                If Not IsEmpty(cella) Or AllowEmpty Then
                    i = i + 1
                    ReDim Preserve Arr(1 To i)
                    Arr(i) = CStr(cella.Value)
                End If
            End If
        Next c
        ListFromRange = Arr
    End If
End Function

Private Function DistinctListFromRange(ByVal rng As Range, _
                                       Optional ByVal BoolMask As Range, _
                                       Optional ByVal AllowEmpty As Boolean = False) As Variant
'Range >> Array, ismetlodesek es ures cellak nelkul
    If Not rng Is Nothing Then
        Dim tempdFilter As Object
        Set tempdFilter = CreateObject("Scripting.Dictionary")
        tempdFilter.CompareMode = 0 'binarycompare
        Dim c As Long
        For c = 1 To rng.Cells.Count
            Dim cella As Range
            Set cella = rng.Cells(c)
            Dim include As Boolean
            If Not BoolMask Is Nothing Then
                include = CBool(BoolMask.Cells(c).Value)
            Else
                include = True
            End If
            If include Then
                If Not IsEmpty(cella) Or AllowEmpty Then
                    tempdFilter(CStr(cella.Value)) = vbNullString
                End If
            End If
        Next c
        DistinctListFromRange = tempdFilter.Keys
    End If
End Function

Private Function GetSubtotalOfArray(ByVal ArrayToSum As Variant) As Double
'Osszeadja egy tomb elemeit
    GetSubtotalOfArray = Application.WorksheetFunction.Sum(ArrayToSum)
End Function

Private Function CountNonZeroNumericElementsOfArray(ByVal ArrayToCount As Variant) As Long
    Dim e As Variant
    For Each e In ArrayToCount
        If IsNumeric(e) Then
            If e > 0 Then CountNonZeroNumericElementsOfArray = CountNonZeroNumericElementsOfArray + 1
        End If
    Next e
End Function

Private Function CountElementsOfArray(ByVal ArrayToCount As Variant) As Long
    Dim e As Variant
    For Each e In ArrayToCount
        CountElementsOfArray = CountElementsOfArray + 1
    Next e
End Function
Attribute VB_Name = "modMunkalapok"
' itt vannak felsorolva a munkalapok, hogy akt|fffd|v vagy nem,
'sz|fffd|mol|fffd|dik vagy nem,
'l|fffd|that|fffd| vagy nem
'stb

Attribute VB_Name = "modNaptarFrissites"
Option Explicit

Private Const sModule As String = "modNaptarFrissites"

Public Sub NaptarFrissites()

    Const DataRangeName     As String = "rngNaptarAdatTart"         'Named range
    Const FormulaRangeName  As String = "rngNaptarKepletek"         'Named range
    Const ErvRangeName      As String = "rngNaptarErv"              'Named range
    Dim NaptarSheet As Worksheet: Set NaptarSheet = shtNaptar   'naptar munkalap CodeName

    'ActiveSheet mentese
    Dim ActSht As Worksheet: Set ActSht = ActiveSheet

    'protection off
    NaptarSheet.Unprotect INTERNAL_PWD

    Dim NaptarRange As Range
    If RangeExists(DataRangeName, NaptarSheet) And _
       RangeExists(FormulaRangeName, NaptarSheet) And _
       RangeExists(ErvRangeName, NaptarSheet) Then
        
        Dim boost As Booster: Set boost = New Booster
        
        Set NaptarRange = shtNaptar.Range(DataRangeName)
        
        Dim ErvRng As Range
        Set ErvRng = Intersect(shtNaptar.Range(ErvRangeName).EntireColumn, NaptarRange.EntireRow)
        Dim FormulaRng As Range
        'Const FormulaRange As String = "X1"            'ebben az oszlopban van a masolando keplet
        'Set FormulaRng = shtNaptar.Range(FormulaRange) ' Ha egy cellaban van a keplet
        Set FormulaRng = Intersect(shtNaptar.Range(FormulaRangeName).EntireColumn, NaptarRange.EntireRow)
        
        Dim c As Range
        For Each c In FormulaRng
            Dim sor As Long: sor = c.Row
            Dim erv As Boolean: erv = CBool(Intersect(ErvRng.EntireColumn, shtNaptar.Rows(sor).EntireRow).Value)
            If erv Then
                Dim PasteRange As Range: Set PasteRange = Intersect(NaptarRange, shtNaptar.Rows(sor).EntireRow)
                'copy-paste
                c.Copy
                PasteRange.PasteSpecial xlPasteFormulas
                'Calculate
                Application.Calculate
                Do While Application.CalculationState <> xlDone
                    DoEvents
                Loop
                PasteRange.Copy
                PasteRange.PasteSpecial xlPasteValues
                Application.CutCopyMode = False
            End If
        Next c
        
    Else
        Exit Sub
    End If

    NaptarSheet.Activate
    NaptarRange.Cells(1).Select 'hogy ne az egesz lap legyen kijelolve

    'protection vissza
    NaptarSheet.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    NaptarSheet.EnableOutlining = True

    'Ugras kezdo nezetre
    ActSht.Activate

    Set boost = Nothing

End Sub

Public Sub FilterTetelByDate(ByVal datum As Long)

'--------- Error Handling Initialization -------
    Select Case DebugMode
        Case debugBypass
        Case debugAdmin, debugClient:   On Error GoTo ErrHandler
        Case debugIgnore:               On Error GoTo IgnoreError
    End Select
    Dim sRoutine As String: sRoutine = "FilterTetelByDate"
'-------------------------------------------------
    
    Dim Target As Range
    Set Target = shtPUtetelek.Range("R4")
    Target.Value = datum 'ez automatikusan inditja a Sheet_Change event-et
    Target.Parent.Activate
    Target.Select

'******************************************************************************************
ExitHere:
    Exit Sub

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
IgnoreError:
    Resume Next

'$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ErrHandler:
    If bCentralErrorHandler(sModule, sRoutine, ThisWorkbook.FullName, True) Then
        Stop: Resume
    Else
    Err.Clear: Resume ExitHere
    End If

End Sub
Attribute VB_Name = "modOthers"
Option Explicit
Option Private Module
Dim mlapnev As String



Public Sub UgrasMunkalapra(ByVal mlapnev As String)
Attribute UgrasMunkalapra.VB_ProcData.VB_Invoke_Func = " \n14"
' UgrasMunkalapra Makr|fffd|
    
    Dim shtcel As Worksheet
    Dim shtnev As String
    'Dim mlapnev As String
    shtnev = Join(Array("sht" & mlapnev))

    Set shtcel = Worksheets("shtnev")
    Worksheets("shtnev").Select
    
    shtcel.Activate
    shtcel.Select
    Range("a1").Select
        
End Sub



Attribute VB_Name = "modRegistry"
Option Explicit
Option Private Module

Private Sub btnTelep_Click()
    With New RegistryManager
        .StartTelepites
    End With
End Sub

Private Sub btnReg_Click()
    With New RegistryManager
        .StartRegisztracio
    End With
End Sub



'
''Uzenet/Gomb szovegek
'
'
'
'
'Private Function telepkell() As Boolean
'    With SetupProxy.Create(shtSetupSys)
'        telepkell = (.SysSettingValue("telepkell"))
'    End With
'End Function
'
'
'
'Private Sub btnTelep_Click()
'    ' telep|fffd|t|fffd|si folyamat ind|fffd|t|fffd|sa a TELEP|fffd|T|fffd|S gomb hat|fffd|s|fffd|ra
'    Dim sht As Worksheet
'    Dim syssht As Worksheet
'    Set sht = shtStart
'    Set syssht = shtSetupSys
'    Dim msgtxt As String
'    Dim btntxt As String
'    Dim color As Integer
'    Dim btn As String
'
'    If syssht.Range("rngTelepKell").Value = 1 And syssht.Range("rngTelepOk").Value = 0 Then
'        Telepites
'    End If
'
'End Sub
'
'Private Sub btnTR_alaphelyzet()
'
'    Dim sht As Worksheet
'    Dim shtsys As Worksheet
'    Dim msgtxt As String
'    Dim btntxt As String
'    Dim color As Integer
'    Dim btn As String
'
'    Set shtsys = shtSetupSys
'    Set sht = shtStart
'    sht.Activate
'
'With shtsys
'    .Range("rngTelepOk") = 0
'    .Range("rngTelepDatum") = 0
'    .Range("rngRegPcID") = 0
'    .Range("rngRegRegID") = 0
'    .Range("rngRegCheckPcID") = 0
'    .Range("rngRegSikerOk") = 0
'    .Range("rngRegSikerDatum") = 0
'    .Range("rngRegCheckOk") = 0
'
'End With
'
'    btn = "btnTelep"
'     btntxt = Range("rngTGtxtTelep").Value
'     color = 1
'     Call GombSzoveg(btn, btntxt, color)
'     msgtxt = "telep gomb alap"
'     MsgBox (msgtxt)
'
'    btn = "btnReg"
'     btntxt = Range("rngRGtxtReg").Value
'     color = 1
'     Call GombSzoveg(btn, btntxt, color)
'     msgtxt = "reg gomb alap"
'     MsgBox (msgtxt)
'
'    Range("a1").Select
'
'End Sub
'
'Private Sub Telepites()
'' a p|fffd|ld|fffd|ny telep|fffd|t|fffd|se
'
'    Dim msgtxt As String
'    Dim color As Integer
'
'    Dim sht As Worksheet
'    Dim syssht As Worksheet
'    Set sht = shtStart
'    Set syssht = shtSetupSys
'    sht.Activate
'
'    Dim btntxt As String
'    Dim btn As String
'    btn = "btnTelep"
'
'
'
'    If syssht.Range("rngTelepKell").Value = 1 And syssht.Range("rngTelepOk").Value = 0 Then
'        syssht.Range("rngTelepDatum").Value = Date
'        syssht.Range("rngTelepOk").Value = 1
'
'        msgtxt = Range("rngTelepOkTxt").Value
'        MsgBox (msgtxt)
'
'        btntxt = Range("rngTGtxtTelepOk").Value
'        color = 10
'        Call GombSzoveg(btn, btntxt, color)
'
'    Else
'
'        If syssht.Range("rngTelepKell").Value = 0 Then
'        btntxt = Range("rngTRGtxtNotxt").Value
'        color = 16
'        Call GombSzoveg(btn, btntxt, color)
'        End If
'
'        If syssht.Range("rngTelepOk").Value = 1 Then
'        btntxt = Range("rngTGtxtTelepOk").Value
'        color = 16
'        Call GombSzoveg(btn, btntxt, color)
'        End If
'
'    End If
'
'    Range("c18").Select
'
'End Sub
'
'Private Sub btnReg_Click()
'    ' a regisztr|fffd|ci|fffd|s folyamat ind|fffd|t|fffd|sa a REGISZTR|fffd|CI|fffd| gomb hat|fffd|s|fffd|ra
'    Dim sht As Worksheet
'    Dim syssht As Worksheet
'    Set sht = shtStart
'    Set syssht = shtSetupSys
'    Dim msgtxt As String
'
'    If Range("rngRegKell").Value = 1 And Range("rngTelepOk") = 1 And Range("rngRegSikerOk").Value = 0 Then
'        Regisztracio
'    End If
'    If Range("rngRegKell").Value = 1 And Range("rngTelepOk") = 1 And Range("rngRegSikerOk").Value = 1 And Range("rngRegCheckOk").Value = 0 Then
'        Regisztracio
'    End If
'
'End Sub
'
'
'Private Sub Regisztracio()
'' a p|fffd|ld|fffd|ny regisztr|fffd|ci|fffd|ja, PC DRV ID meg|fffd|llap|fffd|t|fffd|sa, |fffd|s a REG ID bek|fffd|r|fffd|se alapj|fffd|n
''CreateObject("Scripting.FileSystemObject").GetDrive("C:\").SerialNumber
'
'    Dim sht As Worksheet
'    Set sht = shtStart
'    Dim shtsys As Worksheet
'    Set shtsys = shtSetupSys
'    sht.Activate
'
'    Dim pcid As String
'    Dim regid As String
'    Dim drvid As String
'    Dim msgtxt As String
'    Dim idtxt As String
'    Dim color As Integer
'    Dim regokcell As Range
'    Dim btntxt As String
'    Dim btn As String
'    btn = "btnReg"
'
'
'        pcid = xpcid
'
'        shtsys.Range("rngRegPcID").Value = pcid
'        idtxt = Join(Array("Telep|fffd|t|fffd|si azonos|fffd|t|fffd|", pcid), " : ")
'        regid = InputBox("k|fffd|rj|fffd|k adja meg a fenti sz|fffd|mhoz kapott regisztr|fffd|ci|fffd|s k|fffd|dot", idtxt)
'        If regid = shtsys.Range("rngRegPcID").Value Then
'
'            shtsys.Range("rngRegPcID").Value = pcid
'            shtsys.Range("rngRegRegID").Value = regid
'            shtsys.Range("rngRegSikerOk").Value = 1
'            shtsys.Range("rngRegSikerDatum").Value = Date
'            shtsys.Range("rngRegCheckOk").Value = 1
'            shtsys.Range("rngRegCheckPcID").Value = pcid
'
'            msgtxt = Range("rngRegOkTxt").Value
'            MsgBox (msgtxt)
'
'            btntxt = Range("rngRGtxtRegOk").Value
'            color = 10
'            Call GombSzoveg(btn, btntxt, color)
'        Else
'            msgtxt = Range("rngRegHibaTxt").Value
'            MsgBox (msgtxt)
'
'            btntxt = Range("rngRGtxtRegHiba")
'            color = 9
'            Call GombSzoveg(btn, btntxt, color)
'        End If
'
'        Range("c18").Select
'End Sub
'
'Private Sub RegCheck()
'' a regisztr|fffd|ci|fffd|s k|fffd|d ellenorz|fffd|se indul|fffd|skor, mindig havonta elsej|fffd|n
'' drvid = CreateObject("Scripting.FileSystemObject").GetDrive("C:\").SerialNumber
'    Dim sht As Worksheet
'    Set sht = shtStart
'    Dim shtsys As Worksheet
'    Set shtsys = shtSetupSys
'    sht.Activate
'
'    Dim pcid As String
'    Dim regid As String
'    Dim drvid As String
'    Dim msgtxt As String
'    Dim color As Integer
'    Dim regokcell As Range
'    Dim btntxt As String
'    Dim btn As String
'    btn = "btnReg"
'
'    'If shtsys.Range("rngRegCheckKell").Value = 1 Then
'    If shtsys.Range("rngTelepKell").Value = 1 And shtsys.Range("rngTelepOk").Value = 1 And shtsys.Range("rngRegKell").Value = 1 And shtsys.Range("rngRegSikerOk").Value = 1 Then
'
'        pcid = xpcid
'
'        If pcid = shtsys.Range("rngRegRegId") Then
'            shtsys.Range("rngRegCheckOk").Value = 1
'            shtsys.Range("rngRegCheckPcID").Value = pcid
'        Else
'            shtsys.Range("rngRegCheckOk").Value = 0
'            shtsys.Range("rngRegCheckPcID").Value = pcid
'
'            'KezdoNezet
'            msgtxt = Range("rngRegCheckHibaTxt").Value
'            MsgBox (msgtxt)
'
'            btntxt = Range("rngRGtxtRegHiba").Value
'            color = 31
'            GombSzoveg btn, btntxt, color
'
'        End If
'    End If
'    'End If
'
'
'End Sub
'
'
'Private Sub GombSzoveg(ByVal btn, btntxt, color)
'' gombsz|fffd|veg |fffd|t|fffd|r|fffd|sa
'
' ActiveSheet.Shapes.Range(Array(btn)).Select
'    Selection.Characters.Text = btntxt
'    Selection.Characters().Font.ColorIndex = color
'    'End With
'
'End Sub
'
'Private Function xpcid() As String
'    Dim drvid As String
'    Dim pcid As String
'    'Dim xpcid As String
'    Dim xxx As String
'
'    MsgBox CreateObject("Scripting.FileSystemObject").GetDrive("C:\").SerialNumber
'    'CreateObject("Scripting.FileSystemObject").GetDrive("C:\").SerialNumber
'
'    drvid = CreateObject("Scripting.FileSystemObject").GetDrive("C:\").SerialNumber
'
'    xpcid = drvid
'
'End Function
'
'

Attribute VB_Name = "modSecurity"
Option Explicit
Option Private Module


Public Sub StartNewSession(ByVal Jelszo As String)
    With SetupProxy.Create(shtSetupSys)
        If CBool(.SysSettingValue("egyjogvan")) Then
        
            If StrComp(Jelszo, .SysSettingValue("jelszofonok"), vbBinaryCompare) = 0 Then
                FonokNezet
            ElseIf StrComp(Jelszo, .SysSettingValue("jelszobeo"), vbBinaryCompare) = 0 Then
                BeoNezet
            Else
                KezdoNezet
                'name manager lathatosag
                HideAllNames
                'Setup lap ertekeinek beallitasa
                SetFonokNezetErv False
                SetBeoNezetErv False
            End If
            
        End If
    End With
End Sub

Public Sub KezdoNezet()
' csak a Start lap lathato
    'Dim rngVanEgyJog As Range
    'Dim rngErvHasznOk As Range
    
    With SetupProxy.Create(shtSetupSys)
        'If CBool(.SysSettingValue("egyjogvan")) Then
            'minden lap elrejtese, kiveve kezdolap
            Dim sht As Worksheet
            For Each sht In ThisWorkbook.Worksheets
                If Not sht.Name = shtStart.Name Then
                    sht.Visible = xlSheetVeryHidden
                End If
            Next sht
        'End If
    End With

End Sub


Public Sub FonokNezet()
' minden lap lathato kiveve a kivetelek
    
    Dim boost As Booster: Set boost = New Booster
        
    'kivetelek
    Dim kivetelek As Collection: Set kivetelek = New Collection
    With kivetelek
        '.Add [munkalap].Name
    End With
    
    'munkalap lathatosag
    Dim sheetVisibility As Integer
    Dim sht As Worksheet
    Dim kivetel As Variant
    For Each sht In ThisWorkbook.Worksheets
        sheetVisibility = xlSheetVisible
        For Each kivetel In kivetelek
            If sht.Name = kivetel Then sheetVisibility = xlSheetVeryHidden
        Next kivetel
        sht.Visible = sheetVisibility
    Next sht
    'name manager lathatosag
    UnhideAllNames
    'Setup lap ertekeinek beallitasa
    SetFonokNezetErv True
    SetBeoNezetErv False
    
    Set boost = Nothing
End Sub

Public Sub BeoNezet()
' Csak a felsorolt lapok lathatok
    
    Dim boost As Booster: Set boost = New Booster
    
    'lista
    Dim lathatoLapok As Collection: Set lathatoLapok = New Collection
    With lathatoLapok
        .Add shtStart.Name
        .Add shtKezeles.Name
        .Add shtKIADASOK.Name
        '.Add [munkalap].Name
    End With
    
    'munkalap lathatosag
    Dim sheetVisibility As Integer
    Dim sht As Worksheet
    Dim lathatoLap As Variant
    For Each sht In ThisWorkbook.Worksheets
        sheetVisibility = xlSheetVeryHidden
        For Each lathatoLap In lathatoLapok
            If sht.Name = lathatoLap Then sheetVisibility = xlSheetVisible
        Next lathatoLap
        sht.Visible = sheetVisibility
    Next sht
    'name manager lathatosag
    HideAllNames
    'Setup lap ertekeinek beallitasa
    SetFonokNezetErv False
    SetBeoNezetErv True
    
    Set boost = Nothing
End Sub

Public Function SaveVisibility() As Variant
    With ThisWorkbook.Worksheets
        Dim Arr As Variant
        ReDim Arr(1 To .Count)
        Dim i As Long
        For i = 1 To .Count
            Arr(i) = .Item(i).Visible
        Next i
    End With
    'RETURN
    SaveVisibility = Arr
End Function

Public Sub RestoreVisibility(ByVal Visibilities As Variant)
    With ThisWorkbook.Worksheets
        Dim i As Long
        For i = 1 To .Count
            .Item(i).Visible = Visibilities(i)
        Next i
    End With
End Sub

Sub UnhideAllNames()
    Dim n As Name
    For Each n In Names
        n.Visible = True
    Next n
End Sub

Sub HideAllNames()
    Dim n As Name
    For Each n In Names
        n.Visible = False
    Next n
End Sub

Public Function EgyJogVan() As Boolean
'igaz ha jogosultsagi rendszer be van kapcsolva
    With SetupProxy.Create(shtSetupSys)
        EgyJogVan = CBool(.SysSettingValue("egyjogvan")) 'CBool(Empty) = False
    End With
End Function
Public Function CsakSajatRekord() As Boolean
'igaz ha jogosultsagi rendszer be van kapcsolva |fffd|S csaksajatrekord = true
    With SetupProxy.Create(shtSetupSys)
        CsakSajatRekord = CBool(.SysSettingValue("egyjogvan")) And CBool(.SysSettingValue("csaksajatrekord")) 'CBool(Empty) = False
    End With
End Function
Public Function GetFonokNezetErv() As Boolean
'igaz ha (jogosultsagi rendszer ki van kapcsolva) VAGY (jogosultsagi rendszer be van kapcsolva ES fonoknezeterv = true)
    With SetupProxy.Create(shtSetupSys)
        GetFonokNezetErv = Not CBool(.SysSettingValue("egyjogvan")) Or CBool(.SysSettingValue("fonoknezeterv")) 'CBool(Empty) = False
    End With
End Function
Public Sub SetFonokNezetErv(ByVal Value As Boolean)
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "fonoknezeterv", Abs(CInt(Value))
    End With
End Sub
Public Function GetBeoNezetErv() As Boolean
'igaz ha jogosultsagi rendszer be van kapcsolva |fffd|S beonezeterv = true
    With SetupProxy.Create(shtSetupSys)
        GetBeoNezetErv = CBool(.SysSettingValue("egyjogvan")) And CBool(.SysSettingValue("beonezeterv")) 'CBool(Empty) = False
    End With
End Function
Public Sub SetBeoNezetErv(ByVal Value As Boolean)
    With SetupProxy.Create(shtSetupSys)
        .UpdateSysSettingValue "beonezeterv", Abs(CInt(Value))
    End With
End Sub

Attribute VB_Name = "shtE1Export"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_e1felkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmE1Export"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblE1Export"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtE1Exportok"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Option Explicit
'
'Private Const IDREF As String = "ID_e1expkod"                'elsodleges kulcsmezo neve
'Private Const MyForm As String = "frmE1Exportok"       'kapcsolodo UserForm neve, vbNullString, ha nincs
'Private Const MyTable As String = "tblE1Exportok"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
'Private dictProps As Scripting.Dictionary                   'kwargs
'
'Public Sub UpdateProps()
'    Set dictProps = New Scripting.Dictionary
'    dictProps.CompareMode = TextCompare
'    With SetupProxy.Create(shtSetupSys)
'        dictProps.Add "IDColumnHeader", IDREF
'        dictProps.Add "RelatedForm", MyForm
'        dictProps.Add "RelatedTable", MyTable
'        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
'        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
'        dictProps.Add "FilterRow", .SysSettingValue("szursor")
'        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
'        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
'        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
'    End With
'End Sub
'
'Public Property Get Props() As Scripting.Dictionary
'    If dictProps Is Nothing Then UpdateProps
'    Set Props = dictProps
'End Property
'
'Public Function GetPropVal(ByVal Key As String) As Variant
'    If Me.Props.Exists(Key) Then
'        GetPropVal = dictProps(Key)
'    Else
'        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
'                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
'    End If
'End Function
'
'
'
'
Attribute VB_Name = "shtE1Kimutatas"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "shtE1Monitoring"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_e1monkod"             'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmE1Monitoring"             'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblE1Monitoring"            'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtE1TphLista"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_e1tphlistakod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmE1TphLista"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblE1TphLista"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtE2Foglalasok"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_szfkod"             'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmFoglalasok"             'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblFoglalasok"            'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtE2Szobak"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_e2szbkod"              'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmE2Szobak"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblE2Szobak"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtE2szobakatar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_e2szbkatartipkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmE2SzobaKatAr"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblE2SzobaKatAr"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtFeladatok"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_felkod"              'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmFeladatok"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblFeladatok"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtImport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtKIADASOK"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_putetelkod"             'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmPUTetelek"             'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblPUTetelek"            'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function

Attribute VB_Name = "shtKezeles"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtKimutatas"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtMunkatarsak"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_mtkod"              'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmMunkatarsak"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblMunkatarsak"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtNaptar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Enum DataColumnWidthEnum
    Undefined = 0
    Normal
    Narrow
End Enum

Private DataColumnWidth As DataColumnWidthEnum

Private Property Get NormalColumnWidth() As Double
    With SetupProxy.Create(shtSetupSys)
        NormalColumnWidth = .SysSettingValue("naptnezetmax")
    End With
End Property

Private Property Get NarrowColumnWidth() As Double
    With SetupProxy.Create(shtSetupSys)
        NarrowColumnWidth = .SysSettingValue("naptnezetmin")
    End With
End Property

Private Property Get Datumok() As Range
    If RangeExists("rngNaptarDatumok", Me) Then
        Set Datumok = Me.Range("rngNaptarDatumok")
    End If
End Property

Private Property Get NaptarData() As Range
    If RangeExists("rngNaptarAdatTart", Me) Then
        Set NaptarData = Me.Range("rngNaptarAdatTart")
    End If
End Property

Private Property Get FirstVisibleDate() As Long
    If Not Datumok Is Nothing Then
        Dim rng As Range
        Set rng = Intersect(ActiveWindow.VisibleRange.Cells(1).EntireColumn, Datumok)
        If Not rng Is Nothing Then FirstVisibleDate = rng.Value
    End If
End Property

Private Function FindDateColumn(ByVal datum As Long) As Long
    Dim rng As Range: Set rng = Datumok
    If Not rng Is Nothing Then
        Dim c As Range
        For Each c In rng.Cells
            FindDateColumn = c.Column
            If CLng(c.Value) >= datum Then
                Exit For
            End If
        Next c
    End If
End Function

Public Sub HonapElore()
    'Csak akkor mukodik szepen, ha FreezePanes be van kapcsolva
    '(enelkul is mukodik, csak eltunnek a gombok, mert a kijelolest mindig a bal felso sarokba teszi)
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    'jelenlegi bal szelso datum
    Dim CurrentDate As Long
    CurrentDate = FirstVisibleDate
    'cel datum
    Dim TargetDate As Long
    TargetDate = DateSerial(Year(CurrentDate), Month(CurrentDate) + 1, 1)
    'ugras cel datumra
    JumpToDate TargetDate
End Sub

Public Sub HonapHatra()
    'Csak akkor mukodik szepen, ha FreezePanes be van kapcsolva
    '(enelkul is mukodik, csak eltunnek a gombok, mert a kijelolest mindig a bal felso sarokba teszi)
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    'jelenlegi bal szelso datum
    Dim CurrentDate As Long
    CurrentDate = FirstVisibleDate
    'cel datum
    Dim TargetDate As Long
    TargetDate = DateSerial(Year(CurrentDate - 1), Month(CurrentDate - 1), 1)
    'ugras cel datumra
    JumpToDate TargetDate
End Sub

Public Sub MaiNapra()
    'Csak akkor mukodik, ha AA8-nal FreezePanes be van kapcsolva
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    CenterOnDate Date
    'HighlightDay Date
End Sub
Public Sub Minuszra()
    'Csak akkor mukodik, ha AA8-nal FreezePanes be van kapcsolva
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    Dim datum As Long
    datum = Me.Range("v7")
    CenterOnDate datum
    'HighlightDay datum
End Sub

Public Sub Helyzetre()
    'Csak akkor mukodik, ha AA8-nal FreezePanes be van kapcsolva
    If Not ActiveWindow.FreezePanes Then Exit Sub
    
    Dim datum As Long
    datum = Me.Range("t7")
    CenterOnDate datum
    'HighlightDay datum
End Sub

Private Sub JumpToDate(ByVal datum As Long)
'A datumot helyezi a bal szelre
    Application.ScreenUpdating = False
    
    Dim TopLeftCell As Range
    Set TopLeftCell = ActiveWindow.VisibleRange.Cells(1)
    
    Dim SelectedCell As Range
    Set SelectedCell = IIf(TypeName(Selection) = "Range", Selection, Me.Cells(5, TopLeftCell.Column))
    
    Dim GoToCell As Range
    Set GoToCell = Me.Cells(TopLeftCell.Row, FindDateColumn(datum))
    
    Application.GoTo GoToCell, True
    
    Me.Cells(SelectedCell.Row, GoToCell.Column).Select
    
    Application.ScreenUpdating = True
End Sub

Private Sub CenterOnDate(ByVal datum As Long)
'A datumot helyezi kozepre
    Application.ScreenUpdating = False
    
    Dim TopLeftCell As Range
    Set TopLeftCell = ActiveWindow.VisibleRange.Cells(1)
    
    Dim SelectedCell As Range
    Set SelectedCell = IIf(TypeName(Selection) = "Range", Selection, Me.Cells(5, TopLeftCell.Column))
    
    Dim CenterOnCell As Range
    Set CenterOnCell = Me.Cells(TopLeftCell.Row, FindDateColumn(datum))
    
    With ActiveWindow.VisibleRange
        Dim VisRows As Integer: VisRows = .Rows.Count
        Dim VisCols As Integer: VisCols = .Columns.Count
    End With
    
    With Application.WorksheetFunction
        Dim GoToCell As Range
        Set GoToCell = Me.Cells( _
                TopLeftCell.Row, _
                .Max(1, CenterOnCell.Column + (CenterOnCell.Columns.Count / 4) - .RoundDown((VisCols / 4), 0)) _
                )
    End With
    
    Application.GoTo GoToCell, True
    
    Me.Cells(SelectedCell.Row, CenterOnCell.Column).Select
    
    Application.ScreenUpdating = True
End Sub

Private Sub HighlightDay(ByVal datum As Long)
    If Not NaptarData Is Nothing Then
        Dim col As Long: col = FindDateColumn(datum)
        If col > 0 Then
            Dim rng As Range
            Set rng = Intersect(NaptarData, Me.Columns(col))
            rng.Interior.color = RGB(255, 242, 204)
        End If
    End If

End Sub

Public Sub NezetValtas()
    
    'protection off
    Me.Unprotect INTERNAL_PWD
    
    Select Case DataColumnWidth
        Case DataColumnWidthEnum.Undefined
            SetColumnWidth NarrowColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Narrow
        Case DataColumnWidthEnum.Normal
            SetColumnWidth NarrowColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Narrow
        Case DataColumnWidthEnum.Narrow
            SetColumnWidth NormalColumnWidth
            DataColumnWidth = DataColumnWidthEnum.Normal
    End Select
    
    'protection vissza
    Me.Protect Password:=INTERNAL_PWD, AllowFiltering:=True, UserInterfaceOnly:=True
    Me.EnableOutlining = True
    
End Sub

Private Sub SetColumnWidth(ByVal ColW As Double)
    If Not NaptarData Is Nothing Then
        NaptarData.EntireColumn.ColumnWidth = ColW
    End If
End Sub

Public Sub TetelSzuresNaptarbol()
    If TypeName(Selection) = "Range" Then
        If Not Datumok Is Nothing Then
            If Not Intersect(Selection.EntireColumn, Datumok) Is Nothing Then
                Dim datum As Long
                datum = Intersect(Selection.EntireColumn, Datumok).Value
                FilterTetelByDate datum 'in modNaptarFrissites
            End If
        End If
    End If
End Sub
Attribute VB_Name = "shtPUtetelek"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_putetelkod"             'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmPUTetelek"             'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblPUTetelek"            'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function


Attribute VB_Name = "shtProjektek"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_projkod"              'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmProjektek"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblProjektek"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtPuGrafikon"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shtPuTipuslista"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_putipkod"               'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmPuTipLista"            'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblPuTipLista"           'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function
Attribute VB_Name = "shtSetupE1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupe1kod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupE1"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtSetupE2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupe2kod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupE2"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtSetupFelh"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupfelhkod"           'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"               'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupFelh"             'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtSetupJog"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupjogkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupJog"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function




Attribute VB_Name = "shtSetupJogCsop"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupjogcsopkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupJogCsop"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen

Public Property Get IDColumnHeader() As String
    IDColumnHeader = IDREF
End Property

Public Property Get RelatedForm() As String
    'RelatedForm = MyForm 'TODO
End Property

Public Property Get RelatedTable() As String
    RelatedTable = MyTable
End Property

Public Property Get DefaultSortOrder() As XlSortOrder
    DefaultSortOrder = MyDefaultSortOrder
End Property

Attribute VB_Name = "shtSetupPw"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Private Const IDREF As String = "ID_setuppwkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupPw"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen

Public Property Get IDColumnHeader() As String
    IDColumnHeader = IDREF
End Property

Public Property Get RelatedForm() As String
    'RelatedForm = MyForm 'TODO
End Property

Public Property Get RelatedTable() As String
    RelatedTable = MyTable
End Property

Public Property Get DefaultSortOrder() As XlSortOrder
    DefaultSortOrder = MyDefaultSortOrder
End Property

Attribute VB_Name = "shtSetupSys"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_setupsyskod"            'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"               'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblSetupSys"             'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    
    dictProps.Add "IDColumnHeader", IDREF
    dictProps.Add "RelatedForm", MyForm
    dictProps.Add "RelatedTable", MyTable
    dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
    'ezek NEM SETTINGSBOL, mert korkoros hivatkozas lenne
    dictProps.Add "SortRow", 3
    dictProps.Add "FilterRow", 4
    dictProps.Add "FormulaRow", 8
    dictProps.Add "PasteControlRow", 12
    dictProps.Add "ColorFilterBase", Split("FFFFFF;15;D9D9D9", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    dictProps.Add "ColorFilterUsed", Split("00FFFF;1;0", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    dictProps.Add "ColorFilterFiltered", Split("00C0FF;1;0", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    dictProps.Add "ColorSortBase", Split("FFFFFF;15;D9D9D9", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    dictProps.Add "ColorSortUsed", Split("FF0000;1;0", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    dictProps.Add "ColorSortSorted", Split("602000;1;0", ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]

End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    If dictProps.Count = 0 Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function
Attribute VB_Name = "shtStart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' A RENDSZER m|fffd|k|fffd|d|fffd|s|fffd|nek, makr|fffd|inak r|fffd|szletes le|fffd|r|fffd|sa
'
'
'....
'....
'....

'
'
'


Attribute VB_Name = "shtUgyfelek"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_ukod"                   'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmUgyfelek"              'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblUgyfelek"             'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending   'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function

Attribute VB_Name = "shtUtalasok"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_utalkod"                'elsodleges kulcsmezo neve
Private Const MyForm As String = "frmUtalasok"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "tblUtalasok"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs

Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function



Attribute VB_Name = "shtXFejlec"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Const IDREF As String = "ID_xxx"              'elsodleges kulcsmezo neve
Private Const MyForm As String = "vbNullString"       'kapcsolodo UserForm neve, vbNullString, ha nincs
Private Const MyTable As String = "vbNullString"      'kapcsolodo adatbazis tabla nev, vbNullString, ha nincs
Private Const MyDefaultSortOrder As Integer = xlAscending 'Alaphelyzenel novekvo vagy csokkeno legyen
Private dictProps As Scripting.Dictionary                   'kwargs


Public Sub UpdateProps()
    Set dictProps = New Scripting.Dictionary
    dictProps.CompareMode = TextCompare
    With SetupProxy.Create(shtSetupSys)
        dictProps.Add "IDColumnHeader", IDREF
        dictProps.Add "RelatedForm", MyForm
        dictProps.Add "RelatedTable", MyTable
        dictProps.Add "DefaultSortOrder", MyDefaultSortOrder
        dictProps.Add "SortRow", .SysSettingValue("rendezsor")
        dictProps.Add "FilterRow", .SysSettingValue("szursor")
        dictProps.Add "FormulaRow", .SysSettingValue("copysor")
        dictProps.Add "PasteControlRow", .SysSettingValue("eksor")
        dictProps.Add "ColorFilterBase", Split(.SysSettingValue("szursorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterUsed", Split(.SysSettingValue("szursorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorFilterFiltered", Split(.SysSettingValue("szursorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortBase", Split(.SysSettingValue("rendezsorszin_kikapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortUsed", Split(.SysSettingValue("rendezsorszin_bekapcs"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
        dictProps.Add "ColorSortSorted", Split(.SysSettingValue("rendezsorszin_aktivcella"), ";", , vbTextCompare) 'returns array [Color(hex),Pattern(k|fffd|d),PatternColor(hex)]
    End With
End Sub

Public Property Get Props() As Scripting.Dictionary
    If dictProps Is Nothing Then UpdateProps
    Set Props = dictProps
End Property

Public Function GetPropVal(ByVal Key As String) As Variant
    If Me.Props.Exists(Key) Then
        GetPropVal = dictProps(Key)
    Else
        Err.Raise Number:=vbObjectError + 1024, Source:=Me.Name, _
                  Description:="Props keres|fffd|kulcs nem tal|fffd|lhat|fffd|"
    End If
End Function



Attribute VB_Name = "xxx_test"
Option Explicit

Sub test_FindRecordField()
    With WorksheetProxy.Create(shtUgyfelek)
        Debug.Print CLng(.FindRecordField("unev", "abcd", "ID_ukod"))
    End With
End Sub

Sub test_GetFilteredList()
    Dim dict As Scripting.Dictionary: Set dict = New Scripting.Dictionary: dict.CompareMode = TextCompare
    dict.Add "pufotipnev", "Bev|fffd|tel"
    
    With WorksheetProxy.Create(shtPuTipuslista)
        Debug.Print Join(.GetFilteredList(dict, "pualtipnev", True, False), ", ")
    End With
    
End Sub

Sub test_GetFilteredList_nofilter()
    Dim dict As Scripting.Dictionary: Set dict = New Scripting.Dictionary: dict.CompareMode = TextCompare
    
    With WorksheetProxy.Create(shtPuTipuslista)
        Debug.Print Join(.GetFilteredList(dict, "pufotipnev", True, False), ", ")
    End With
    
End Sub

Sub test_GetFilteredList_noresult()
    Dim dict As Scripting.Dictionary: Set dict = New Scripting.Dictionary: dict.CompareMode = TextCompare
    dict.Add "pufotipnev", "Ak|fffd|rmi"
    
    With WorksheetProxy.Create(shtPuTipuslista)
        Debug.Print IsEmpty(.GetFilteredList(dict, "pufotipnev", True, False))
    End With
 
End Sub

Sub test_GetFotipusListaFromPUTIPUSLISTA()
    Debug.Print Join(GetFotipusListaFromPUTIPUSLISTA, ", ")
End Sub

Sub test_GetAltipusListaFromPUTIPUSLISTA()
    Debug.Print Join(GetAltipusListaFromPUTIPUSLISTA("Bev|fffd|tel"), ", ")
End Sub

Sub test_GetPuTipusKod()
    Debug.Print GetPuTipusKod("Bev|fffd|tel", "Egyedi")
End Sub

Sub test_GetUgyfelNevLista()
    Debug.Print Join(GetUgyfelNevLista, ", ")
End Sub

Sub test_GetUgyfelKod()
    Debug.Print GetUgyfelKod("Lidl rt")
End Sub

Sub test_GetProjektNevLista()
    Debug.Print Join(GetProjektNevLista("1"), ", ")
End Sub

Sub test_GetProjektKod()
    Debug.Print GetProjektKod("Projekt2")
End Sub

Sub test_GetPUTetelSorDarab()
    Debug.Print GetPUTetelSorDarab("szla1")
End Sub

Sub test_SetupProxy()
    Dim proxy As SetupProxy
    Set proxy = SetupProxy.Create(shtSetupSys)
    Debug.Print proxy.SettingValue("ssnev", "ssdbf", "ssdata")
    Set proxy = Nothing
End Sub

Sub test_GetPuFoTipusKodFromPUTIPUSLISTA()
    Debug.Print GetPuFoTipusKodFromPUTIPUSLISTA("K|fffd|lts|fffd|g")
End Sub

Sub test_GetPuAlTipusKodFromPUTIPUSLISTA()
    Debug.Print GetPuAlTipusKodFromPUTIPUSLISTA("Rendszeres")
End Sub

Sub test_TetelBeolvasas()
    Dim Cancel As Boolean
    With DatabaseProxy.Create(shtPUtetelek, Cancel)
        .TetelBeolvasas 19
    End With
End Sub

' InQuest injected base64 decoded content
' x)br

INQUEST-PP=macro
