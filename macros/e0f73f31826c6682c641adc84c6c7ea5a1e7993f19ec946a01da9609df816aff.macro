Attribute VB_Name = "Num2String"
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'
Option Explicit
Const sSpace As String = " "
Const sOne As Byte = 1
Const sMany1 As Byte = 2
Const sMany2 As Byte = 3
Const Male As Byte = 1
Const Female As Byte = 0
Const Middle As Byte = 2
Type decl
    sOne As String
    sMany1 As String
    sMany2 As String
    isMale As Byte
End Type
Public DecStr(3) As decl
Public sPost() As decl

Sub fInp(fName As String)
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           fName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
    Dim declTmp As decl
    Dim i As Integer, recNum As Integer
    Dim sTmp As String, isOpen As Boolean
    
    ChDir Application.ActiveWorkbook.Path
    ChDrive Application.ActiveWorkbook.Path
    isOpen = False
    On Error GoTo err1
    Open fName For Input Lock Write As #1
    isOpen = True
    recNum = 1
    Do While Not EOF(1)
        Input #1, declTmp.sOne, declTmp.sMany1, declTmp.sMany2, sTmp
        recNum = recNum + 1
    Loop
    recNum = (recNum - 1) / 2
    ReDim sPost(1 To recNum, 1 To 2)
    Seek #1, 1
    For i = 1 To recNum
        Input #1, sPost(i, 1).sOne, sPost(i, 1).sMany1, sPost(i, 1).sMany2, sTmp
        sPost(i, 1).isMale = CByte(sTmp)
        Input #1, sPost(i, 2).sOne, sPost(i, 2).sMany1, sPost(i, 2).sMany2, sTmp
        sPost(i, 2).isMale = CByte(sTmp)
    Next i
    Close #1
    isOpen = False
    Exit Sub
err1:
    If isOpen Then
        Close #1
    End If
    init False, ""
End Sub
Private Sub init(ReadData As Boolean, sPostfFName As String)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           ReadData - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'           sPostfFName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    Dim i As Integer, dataRows As Long
    On Error GoTo err2
    DecStr(0).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(0).sMany1 = "|fffd||fffd||fffd||fffd||fffd|"
    DecStr(0).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(0).isMale = Female
    
    DecStr(1).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(1).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(1).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(1).isMale = Male
    
    DecStr(2).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(2).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(2).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(2).isMale = Male
    
    DecStr(3).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(3).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(3).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    DecStr(3).isMale = Male
    If ReadData Then
        If sPostfFName = "" Then
            init False, ""
        Else
        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            fInp sPostfFName
        End If
    Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ReDim sPost(0 To 3, 1 To 2)
        sPost(0, 1).sOne = ""
        sPost(0, 1).sMany1 = ""
        sPost(0, 1).sMany2 = ""
        sPost(0, 1).isMale = Male
        
        sPost(0, 2).sOne = ""
        sPost(0, 2).sMany1 = ""
        sPost(0, 2).sMany2 = ""
        sPost(0, 2).isMale = Male
        
        sPost(1, 1).sOne = "|fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 1).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 1).sMany2 = "|fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 1).isMale = Male
        
        sPost(1, 2).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 2).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 2).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(1, 2).isMale = Male
        
        sPost(2, 1).sOne = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(2, 1).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(2, 1).sMany2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(2, 1).isMale = Male
        
        sPost(2, 2).sOne = "|fffd||fffd||fffd||fffd|"
        sPost(2, 2).sMany1 = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        sPost(2, 2).sMany2 = "|fffd||fffd||fffd||fffd||fffd|"
        sPost(2, 2).isMale = Male
        
        sPost(3, 1).sOne = "|fffd||fffd||fffd|."
        sPost(3, 1).sMany1 = "|fffd||fffd||fffd|."
        sPost(3, 1).sMany2 = "|fffd||fffd||fffd|."
        sPost(3, 1).isMale = Male
        
        sPost(3, 2).sOne = "|fffd||fffd||fffd|."
        sPost(3, 2).sMany1 = "|fffd||fffd||fffd|."
        sPost(3, 2).sMany2 = "|fffd||fffd||fffd|."
        sPost(3, 2).isMale = Female
    End If
    Exit Sub
err2:
    init False, ""
End Sub
Private Function firstCaps(str As String) As String
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           str - |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    firstCaps = UCase(Left(str, 1)) & Right(str, Len(str) - 1)
End Function
Private Function Postfix(ByRef Postf As decl, OMstate As Byte) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           Postf - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           OMstate - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Select Case OMstate
    Case sOne
        Postfix = Postf.sOne
    Case sMany1
        Postfix = Postf.sMany1
    Case sMany2
        Postfix = Postf.sMany2
    End Select
End Function
Public Function Num2Str(num As Variant, Optional isFirstCaps As Boolean = False, Optional isInt As Boolean = False, _
        Optional FrASString As Boolean = True, Optional pGroup As Byte = 1, Optional ReadData As Boolean = False, _
        Optional sPostfFName As String = "") As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           num - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           isFirstCaps - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| False, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           isInt - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| False, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           FrASString - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           pGroup - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 (|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           ReadData - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| False, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           sPostfFName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'
    Dim curNum As Currency
    Dim sInt As String, sFract As String, sTmp As String, sTmp2 As String
    Dim OMstate As Byte
    On Error GoTo Err03
    init ReadData, sPostfFName
    curNum = CCur(num)
    separateValue curNum, sInt, sFract
    If isInt Then   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If CByte(Left(sFract, 1)) >= 5 Then
            curNum = Int(curNum) + 1
        Else
            curNum = Int(curNum)
        End If
        separateValue curNum, sInt, sFract
    End If
    sTmp = num2s(sInt, OMstate, pGroup)
    If Right(sTmp, 1) <> " " Then sTmp = sTmp & sSpace
    sTmp = sTmp & Postfix(sPost(pGroup, 1), OMstate)
    If Not isInt Then
        sTmp = sTmp & sSpace
        If FrASString Then
            If sFract = "00" Then
                sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
                OMstate = sMany1
            Else
                sTmp = sTmp & nHundr2str(sFract, sPost(pGroup, 2).isMale, OMstate)
            End If
        Else
            sTmp2 = nHundr2str(sFract, , OMstate)   '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| OMstate
            sTmp = sTmp & sFract
        End If
        sTmp = sTmp & sSpace
        sTmp = sTmp & Postfix(sPost(pGroup, 2), OMstate)
    End If
    If isFirstCaps Then sTmp = firstCaps(sTmp)
    Num2Str = sTmp
    Exit Function
Err03:
    Num2Str = "#|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Public Sub separateValue(val As Currency, ByRef sInt As String, sFract As String)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           val - |fffd||fffd||fffd||fffd||fffd|
'           sInt - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|
'           sFract - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|
'


    Dim sTmp As String
    sTmp = Format(val, "###0.00")
    sFract = Right(sTmp, 2)
    sInt = Left(sTmp, Len(sTmp) - 3)
End Sub
Private Function num2s(sNum As String, ByRef OMstate As Byte, Optional pGroup As Byte = Male) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           sNum - |fffd||fffd||fffd||fffd||fffd|
'           OMstate - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'           pGroup - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Dim iSl As Byte, ic As Byte, iRazr As Byte, iGr As Byte
    Dim sTmp As String, sTmp2 As String
    sTmp = ""
    iSl = Len(sNum)
    If sNum = "0" Then
        num2s = "|fffd||fffd||fffd||fffd|"
        OMstate = sMany1
        Exit Function
    End If
    iGr = ((iSl - 1) \ 3) * 3
    If iSl > 3 Then
        iRazr = CByte(iGr / 3 - 1)
        sTmp = nHundr2str(Left(sNum, iSl - iGr), DecStr(iRazr).isMale, OMstate)
        If sTmp <> "" Then
            sTmp = sTmp & sSpace
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTmp = sTmp & Postfix(DecStr(iRazr), OMstate)
            sTmp = sTmp & sSpace
        End If

        sTmp = sTmp & num2s(Right(sNum, iGr), OMstate, pGroup) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| num2s
    Else
        sTmp = nHundr2str(Left(sNum, iSl - iGr), sPost(pGroup, 1).isMale, OMstate)
    End If
    num2s = sTmp
End Function

Private Function nHundr2str(sNum As String, Optional isMale As Byte = Male, Optional ByRef OMstate As Byte) As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 999 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Copyright (c) 1998 Igor Ulyanchenko
'e-mail: igorul@aha.ru
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'           sNum - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'           isMale - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'           OMstate - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    Static sL, sM, sr, sTmp As String
    OMstate = sMany1
    sTmp = ""
    Select Case Len(sNum)
    Case 3
        sL = Left(sNum, 1)
        sM = Mid(sNum, 2, 1)
    Case 2
        sL = "0"
        sM = Left(sNum, 1)
    Case 1
        sL = "0"
        sM = "0"
    End Select
    sr = Right(sNum, 1)
    
    Select Case sL
    Case "1"
        sTmp = "|fffd||fffd||fffd|"
    Case "2"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "3"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "4"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "5"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "6"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "7"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "8"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "9"
        sTmp = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    If sL <> "0" Then sTmp = sTmp & sSpace
    Select Case sM
    Case "1"
        Select Case sr
        Case "0"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "1"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "2"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "3"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "4"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "5"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "6"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "7"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "8"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "9"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End Select
    Case "2"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "3"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "4"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd|"
    Case "5"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "6"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "7"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "8"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case "9"
        sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
    If sM <> "0" Then sTmp = sTmp & sSpace
    If sM <> "1" Then
        Select Case sr
        Case "1"
            Select Case isMale
            Case Male
                sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
            Case Female
                sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
            Case Middle
                sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
            End Select
            OMstate = sOne
        Case "2"
            If isMale = Female Then sTmp = sTmp & "|fffd||fffd||fffd|" Else sTmp = sTmp & "|fffd||fffd||fffd|"
            OMstate = sMany2
        Case "3"
            sTmp = sTmp & "|fffd||fffd||fffd|"
            OMstate = sMany2
        Case "4"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd|"
            OMstate = sMany2
        Case "5"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
        Case "6"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd|"
        Case "7"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd|"
        Case "8"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Case "9"
            sTmp = sTmp & "|fffd||fffd||fffd||fffd||fffd||fffd|"
        End Select
    End If
    nHundr2str = sTmp
End Function




Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
