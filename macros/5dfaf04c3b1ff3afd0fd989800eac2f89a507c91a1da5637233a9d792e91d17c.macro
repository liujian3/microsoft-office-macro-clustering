Attribute VB_Name = "Module1"
Option Explicit
Option Private Module

'Font and Cell colors
Public Const iRed As Long = -16776961
Public Const iBlack As Long = 0
Public Const iDGray As Long = -8355712
Public Const iWhite As Long = 16777215
Public Const iGray As Long = 12632256
Public Const iPink As Long = 13421823
Public Const iYellow As Long = 13434879
Public Const iGreen As Long = 13434828
Public Const iBlue As Long = 16772300
Public Const iDBlue As Long = 16763955
Public Const iOrange As Long = 10079487
Public Const iViolet As Long = 16764108
'if libraries are not referenced
Public Const NODE_ELEMENT As Integer = 1
Public Const msoTriStateMixed As Integer = -2

'Public bMsgDisplayed As Boolean
Public iDispMsg As Integer
Public Enum eMsgType
    eMsgXmpn7b = &H1 'Exemption 7(b) lead in solder
    eMsgXmpnExp = &H2 'Exemption Expired
    eMsgXmpnNIPL = &H4 'Exemption Not In Pick List
End Enum


Sub FormatComment(MyComment As Excel.Comment)
Dim lArea As Long
With MyComment
    .Shape.TextFrame.AutoSize = True
    If .Shape.Width > 300 Then
        lArea = .Shape.Width * .Shape.Height
        .Shape.Width = 200
        .Shape.Height = (lArea / 200) * 1.2
    End If
    .Shape.TextFrame.Characters.Font.Bold = False
    .Shape.Top = .Parent.Top - 7.5
    .Shape.Left = .Parent.Offset(0, 1).Left + 7.5
End With
End Sub

Function LogError(Optional iSeverity As Integer, Optional vLocation As Variant, Optional sDescription As String, Optional bPopUp As Boolean) As Integer
On Error GoTo 0

Dim iRowL As Long
Dim iCount As Integer ' generic integer
iRowL = wsLog.Range("A:C").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1

If sDescription = "" Then
    Select Case iSeverity
    Case -1 'clear error log
        wsLog.Range("A2:C2").AutoFilter
        wsLog.Range("A2:C2").AutoFilter
        Range(wsLog.Cells(3, 1), wsLog.Cells(iRowL, 1)).EntireRow.Delete
        iCount = Application.ActiveSheet.Index
        On Error Resume Next
        wsLog.Activate
        wsLog.Cells(3, 1).Activate
        ActiveWindow.ScrollRow = 1
        ActiveWindow.ScrollColumn = 1
        Sheets(iCount).Activate
        On Error GoTo 0
        'TODO: reapply conditional formatting
        Exit Function
    Case 0 'display error log
        On Error Resume Next
        wsLog.Activate
        wsLog.Cells(iRowL - 1, 3).Activate
        On Error GoTo 0
        Exit Function
    'count errors in error log
    Case 1
        LogError = Application.WorksheetFunction.CountIf(wsLog.Columns(1), "Info")
    Case 2
        LogError = Application.WorksheetFunction.CountIf(wsLog.Columns(1), "Warning")
    Case 3
        LogError = Application.WorksheetFunction.CountIf(wsLog.Columns(1), "Error")
    Case Else
        GoTo Quit
    End Select
    
ElseIf bPopUp Then 'display error in popup window
    If (TypeName(vLocation) = "Range") And iSeverity = 3 Then
        vLocation.Font.Color = iRed
    End If
    Select Case iSeverity
    Case 1
        MsgBox sDescription, vbInformation, "Info"
    Case 2
        MsgBox sDescription, vbExclamation, "Warning"
    Case 3
        MsgBox sDescription, vbCritical, "Error"
    Case Else
        GoTo Quit
    End Select
    
Else 'write error to error log
    Select Case iSeverity
    Case 1
        wsLog.Cells(iRowL, 1).Value = "Info"
    Case 2
        wsLog.Cells(iRowL, 1).Value = "Warning"
    Case 3
        wsLog.Cells(iRowL, 1).Value = "Error"
    Case Else
        GoTo Quit
    End Select
    
    Select Case TypeName(vLocation)
    Case "Range"
        wsLog.Cells(iRowL, 2).Value = vLocation.Worksheet.Name & "!" & vLocation.Address
    Case "IXMLDOMElement"
        wsLog.Cells(iRowL, 2).Value = Left(vLocation.XML, InStr(1, vLocation.XML, ">"))
    Case "String"
        wsLog.Cells(iRowL, 2).Value = vLocation
    End Select
    
    wsLog.Cells(iRowL, 3).Value = sDescription
    
    On Error Resume Next
    Application.StatusBar = Left(sDescription, 255)
    On Error GoTo 0
End If

Quit:
End Function


Function UnZip(vZIP As Variant) As Variant
'File variables
Dim oShell As Object 'Shell
Set oShell = CreateObject("Shell.Application") 'New Shell
Dim oFile As Object

Dim oFS As Object
Set oFS = CreateObject("Scripting.FileSystemObject")
Dim oFSFolder As Object

Dim sTemp As String 'path to temp folder
Dim iCount As Integer
Dim sFiles() As String 'paths to extracted files
ReDim sFiles(0)
Dim dStart As Date
Dim iSize As Long

'Setup Temp folder
sTemp = Environ("temp")
If Right(sTemp, 1) <> "\" Then
    sTemp = sTemp & "\"
End If

'Extract ZIP files
If LCase(Right(vZIP, 3)) = "zip" Then
    LogError 1, , "Extracting archive: " & vZIP
    
    'find longest file name in zip
    iCount = 0
    For Each oFile In oShell.Namespace(vZIP).items
        If Len(oFile.Name) > iCount Then iCount = Len(oFile.Name)
    Next oFile
    
    'create folder to extract zip file to
    If Len(sTemp & oShell.Namespace(vZIP).Title) + 1 + iCount < 260 And _
            Not oFS.FolderExists(sTemp & oShell.Namespace(vZIP).Title) Then
        Set oFSFolder = oFS.CreateFolder(sTemp & oShell.Namespace(vZIP).Title)
    ElseIf Len(sTemp) + 13 + iCount < 260 Then
        Set oFSFolder = oFS.CreateFolder(sTemp & oFS.GetTempName)
    Else
        LogError 3, , "Paths to files in archive are too long. Try extracting the file manually."
    End If
    
    'extract files
'    If bDev Then
'        iCount = 0
'    Else
        iCount = 4 + 8 + 16 'no progress box, rename duplicates, yes to all
'    End If
    oShell.Namespace(oFSFolder.path & "\").copyhere oShell.Namespace(vZIP).items, iCount
    
    'wait till all files are extracted
    Do  'oShell.Namespace(oFSFolder.Path & "\").Items.Count >= iCount
        iSize = oFSFolder.Size
        Application.Wait Now() + TimeValue("0:0:01")
    Loop Until oFSFolder.Size = iSize
    
    'get paths to extracted files
    iCount = UBound(sFiles)
    Call AllFilePaths(oFSFolder, sFiles)
    LogError 1, , UBound(sFiles) - iCount & " file(s) extracted from ZIP archive."
   
Else
    LogError 2, , "Skipping non ZIP file: " & vZIP
End If

'remove unused zeroth element
If sFiles(0) = "" And UBound(sFiles) > 0 Then
    For iCount = 0 To UBound(sFiles) - 1
        sFiles(iCount) = sFiles(iCount + 1)
    Next iCount
    ReDim Preserve sFiles(UBound(sFiles) - 1)
End If
UnZip = sFiles

Quit:
If Err.Number <> 0 Then LogError 3, "UnZip()", "Run time error: " & Err.Description & "."
Set oShell = Nothing
Set oFS = Nothing
Set oFSFolder = Nothing
End Function

Sub AllFilePaths(oFolder As Object, ByRef sPaths() As String)
Dim oFile As Object 'As Scripting.File
Dim oSub As Object ' As Scripting.Folder
Dim iPath As Integer 'index into sPaths array

iPath = UBound(sPaths) 'last path in sPaths
ReDim Preserve sPaths(iPath + oFolder.Files.Count)
'get path to each file
For Each oFile In oFolder.Files
    iPath = iPath + 1
    sPaths(iPath) = oFile.path
Next oFile

'get paths to files in each subfolder
For Each oSub In oFolder.SubFolders
    Call AllFilePaths(oSub, sPaths)
Next oSub

Set oFile = Nothing
Set oSub = Nothing
End Sub

Function ChkCAS(sCAS As String) As Boolean
Dim iPos As Integer
Dim iMult As Integer
Dim iSum As Integer
Dim iCheck As Integer

Dim oRegEx As Object
Set oRegEx = CreateObject("VBScript.RegExp")

oRegEx.Pattern = "^[1-9]\d{1,6}-\d{2}-\d$" 'CAS
If oRegEx.Test(sCAS) Then
    iMult = 1
    iSum = 0
    For iPos = Len(sCAS) - 1 To 1 Step -1
        If Mid(sCAS, iPos, 1) <> "-" Then
            iSum = iSum + Val(Mid(sCAS, iPos, 1)) * iMult
            iMult = iMult + 1
        End If
    Next iPos
    iCheck = Val(Right(sCAS, 1))
    ChkCAS = (iSum Mod 10 = iCheck)
ElseIf sCAS = "-" Or UCase(sCAS) = "SYSTEM" Then
    ChkCAS = True
Else
    ChkCAS = False
End If
End Function

Function ColLtr(ColNum As Integer) As String
If ColNum > 26 Then
    ColLtr = Chr(Int((ColNum - 1) / 26) + 64) & Chr(((ColNum - 1) Mod 26) + 65)
Else
    ColLtr = Chr(ColNum + 64)
End If
End Function

Function NumRng(R1 As Integer, C1 As Integer, R2 As Integer, C2 As Integer) As String
NumRng = ColLtr(C1) & R1 & ":" & ColLtr(C2) & R2
End Function

Function SortRemDup(Ary As Variant) As Variant
Dim i As Integer
Dim j As Integer
Dim m As Integer
Dim n As Integer
Dim tmp As Variant

m = LBound(Ary)
n = UBound(Ary)
i = m
Do While i < n
    j = i + 1
    Do While j < n + 1
        If Ary(j) < Ary(i) Then
            tmp = Ary(i)
            Ary(i) = Ary(j)
            Ary(j) = tmp
        ElseIf Ary(j) = Ary(i) Then
            Ary(j) = Ary(n)
            n = n - 1
            j = j - 1
        End If
    j = j + 1
    Loop
i = i + 1
Loop
ReDim Preserve Ary(m To n)
SortRemDup = Ary
End Function


Sub StdUnitMass(ByRef fMass() As Double, ByRef sUnit As String, Optional sUnit2 As String)
Dim rnCell As Object 'Excel.Range

Set rnCell = wsList.Range("L_UOM").Find(sUnit) 'find unit in lookup table
If rnCell Is Nothing Then
    LogError 2, , "Mass unit '" & sUnit & "' is not recognized."
ElseIf LBound(fMass) = UBound(fMass) Then 'top level part
    If rnCell.Offset(0, 2).Value Then 'relative unit
        LogError 2, , "relative Mass unit '" & sUnit & "' is not allowed for top level item"
    Else 'absolute unit
        fMass(UBound(fMass)) = fMass(UBound(fMass)) * rnCell.Offset(0, 1).Value
        sUnit = "g"
    End If
Else 'lower level item in part
    fMass(UBound(fMass)) = fMass(UBound(fMass)) * rnCell.Offset(0, 1).Value * fMass(UBound(fMass) - 1) ^ rnCell.Offset(0, 2).Value
    sUnit = "g"
End If
If sUnit2 <> "" Then 'optional output unit
    Set rnCell = wsList.Range("L_UOM").Find(sUnit2) 'find unit in lookup table
    If rnCell Is Nothing Then
        LogError 2, , "Mass unit '" & sUnit2 & "' is not recognized."
    ElseIf LBound(fMass) = UBound(fMass) Then 'top level part
        If rnCell.Offset(0, 2).Value Then 'relative unit
            LogError 2, , "relative Mass unit '" & sUnit2 & "' is not allowed for top level item"
        Else 'absolute unit
            fMass(UBound(fMass)) = fMass(UBound(fMass)) / rnCell.Offset(0, 1).Value
            sUnit = sUnit2
        End If
    ElseIf fMass(UBound(fMass) - 1) = 0 And rnCell.Offset(0, 2).Value = 1 Then
        LogError 2, , "can not convert lower level item mass to relative units if upper level item mass is zero"
    Else 'lower level item in part
        fMass(UBound(fMass)) = fMass(UBound(fMass)) / rnCell.Offset(0, 1).Value / fMass(UBound(fMass) - 1) ^ rnCell.Offset(0, 2).Value
        sUnit = sUnit2
    End If
End If
End Sub

Function AllColumnsHidden(rnCols As Range) As Boolean
Dim rnCol As Range
AllColumnsHidden = True
For Each rnCol In rnCols.Columns
    If rnCol.EntireColumn.Hidden = False Then
        AllColumnsHidden = False
        Exit Function
    End If
Next rnCol
End Function

Function ListLookup(sReturn, sWhere, sCriteria)
    On Error Resume Next
    ListLookup = Application.WorksheetFunction.Index(wsList.Range(sReturn), _
                  Application.WorksheetFunction.Match(sCriteria, wsList.Range(sWhere), 0))
End Function

Sub Btn_Xmpn()

Application.EnableEvents = False
Application.CutCopyMode = False
wsC.Range("C_Xmpn").Columns(wsC.Range("C_Xmpn").Columns.Count).Insert
Application.EnableEvents = True

End Sub

Sub Btn_ROHS()
    fAddNewSubstance.obtnRoHS.Value = True
    fAddNewSubstance.Show
End Sub

Sub Btn_SVHC()
    fAddNewSubstance.obtnSVHC.Value = True
    fAddNewSubstance.Show
End Sub

Sub Btn_XVII()
    fAddNewSubstance.obtnXVII.Value = True
    fAddNewSubstance.Show
End Sub

Sub Btn_P65()
    fAddNewSubstance.obtnProp65.Value = True
    fAddNewSubstance.Show
End Sub

Sub Btn_Ins_Row()
Dim rnCell As Object 'Excel.Range
If Selection.Worksheet.Index = wsD.Index And Range("G_Sup_Lock").Value = False Then
    wsD.Unprotect
    Application.EnableEvents = False
    Application.CutCopyMode = False
    For Each rnCell In Selection.Areas
        If rnCell.Row > Range("D_Headings").Row + Range("D_Headings").Rows.Count - 1 Then
            rnCell.EntireRow.Insert
            Call OnInput(rnCell.Offset(rnCell.Rows.Count * -1, 0).EntireRow.Columns(Range("D_Type").Column))
        End If
    Next rnCell
    Call ProtectSheets(True)
End If
End Sub

Sub Btn_Del_Row()
If Selection.Worksheet.Index = wsD.Index And Range("D_Num").Rows(Selection.Row).Locked = False Then
    Application.EnableEvents = False
    Selection.EntireRow.Delete
    Application.EnableEvents = True
End If
End Sub

Sub ProtectSheets(Optional bLock As Integer = -1)
Dim oSheet As Object 'Excel.Worksheet
Set oSheet = Application.ActiveSheet

Select Case bLock
Case 0 'False
    'prep application for major read/write operations
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Cursor = xlWait
    'disable protection
    wsGen.Unprotect
    wsC.Unprotect
    wsD.Unprotect
    wsList.Unprotect
    wsLog.Unprotect
    'reset autofilters
    wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter
    wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter
    wsD.Range("D_Lvl", "D_Note").Rows(wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count - 1).AutoFilter
    wsD.Range("D_Lvl", "D_Note").Rows(wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count - 1).AutoFilter
    wsList.ListObjects("tSubst").HeaderRowRange.AutoFilter
    wsList.ListObjects("tSubst").HeaderRowRange.AutoFilter
    wsList.ListObjects("tXmpn").HeaderRowRange.AutoFilter
    wsList.ListObjects("tXmpn").HeaderRowRange.AutoFilter
    'wsList.Range("L_Subst_ID", "L_Subst_names").Rows(1).AutoFilter
    'wsList.Range("L_Subst_ID", "L_Subst_names").Rows(1).AutoFilter
'    Application.Cursor = xlDefault

Case -2 'msoTriStateMixed
    'prep application for minor read/write operations
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Cursor = xlWait
    'disable protection
    wsGen.Unprotect
    wsC.Unprotect
    wsD.Unprotect

Case -1 'True
    'clean up application after major operations
    'enable protection
    If Val(Application.Version) < 11 Then 'Excel XP/2002 or below
        wsGen.Protect UserInterfaceOnly:=True
        wsC.Protect UserInterfaceOnly:=True
        wsD.Protect UserInterfaceOnly:=True
        wsList.Protect UserInterfaceOnly:=True
        wsLog.Protect UserInterfaceOnly:=True
    Else
        wsGen.Protect UserInterfaceOnly:=True
        wsC.Protect UserInterfaceOnly:=True, AllowFiltering:=True
        wsD.Protect UserInterfaceOnly:=True, AllowFiltering:=True, AllowInsertingRows:=True, AllowDeletingRows:=True
        wsList.Protect UserInterfaceOnly:=True, AllowFiltering:=True
        wsLog.Protect UserInterfaceOnly:=True, AllowFiltering:=True
    End If
    'return application to normal status
    On Error Resume Next
    Application.StatusBar = False
    On Error GoTo 0

    Application.Cursor = xlDefault
    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Select

If Not oSheet Is Nothing Then
    oSheet.Activate
End If
Quit:
End Sub

Sub Btn_LockR()
On Error GoTo 0

Dim iRow As Long

Call ProtectSheets(False)
LogError -1 'clear error log

If MsgBox("Are you sure you want to lock all Requestor fields?", vbYesNo + vbQuestion) = vbYes Then
    LogError 1, , "Attempting to lock Requestor Fields."
    
    'Check General Fields
    If wsGen.Range("G_Req_ID").EntireRow.Hidden = False Then
        If wsGen.Range("G_Req_ID").Value = "" Then
            LogError 2, wsGen.Range("G_Req_ID"), "[Request ID] is blank."
        End If
    End If
    
    If wsGen.Range("G_Req_Co").Value = "" Then
        LogError 2, wsGen.Range("G_Req_Co"), "[Request Company] can not be blank. 'Caterpillar Inc.' entered automatically."
        wsGen.Range("G_Req_Co").Value = "Caterpillar Inc."
    End If
    
    If Not IsDate(wsGen.Range("G_Req_Date")) Then
        LogError 2, wsGen.Range("G_Req_Date"), "[Rquest Date] not recognized. Today entered automatically."
        wsGen.Range("G_Req_Date").Value = Date
        wsGen.Range("G_Req_Date").Font.Color = iBlack
    End If
    
    If wsGen.Range("G_Req_By").EntireRow.Hidden = False Then
        If Not IsDate(wsGen.Range("G_Req_By")) Then
            LogError 2, wsGen.Range("G_Req_By"), "[Respond by Date] not recognized. 45 days entered automatically."
            wsGen.Range("G_Req_By").Value = Date + 45 ' days from now
            wsGen.Range("G_Req_By").Font.Color = iBlack
        End If
    End If
    
    If wsGen.Range("G_Req_Name").Value = "" Then
        LogError 3, wsGen.Range("G_Req_Name"), "[Requestor Name] can not be blank."
    End If
    
    If wsGen.Range("G_Req_Title").Value = "" Then
        LogError 3, wsGen.Range("G_Req_Title"), "[Requestor Title] is blank."
    End If
    
    If wsGen.Range("G_Req_Phone").Value = "" Then
        LogError 3, wsGen.Range("G_Req_Phone"), "[Requestor Phone] can not be blank."
    End If
    
    If wsGen.Range("G_Req_Email").Value = "" Then
        LogError 3, wsGen.Range("G_Req_Email"), "[Requestor Email] can not be blank."
    End If
    
    If wsGen.Range("G_Sup_Co").Value = "" Then
        LogError 3, wsGen.Range("G_Sup_Co"), "[Supplier Company] can not be blank."
    End If
    
    If wsGen.Range("G_Sup_CoID").Value = "" Then
        LogError 3, wsGen.Range("G_Sup_CoID"), "[Supplier Company ID] can not be blank."
    ElseIf InStr(1, wsGen.Range("G_Sup_CoID").Value, "_") = 0 Then
        LogError 2, wsGen.Range("G_Sup_CoID"), "[Supplier Company ID] should end with underscore dataset facility code, such as xxxxxxx_Z1 for Lognet codes."
    End If
    
     If wsGen.Range("G_Dec_Type").Value = "" Then
        LogError 2, wsGen.Range("G_Dec_Type"), "[Legal Declaration Type] can not be blank. 'Standard' entered automatically."
        wsGen.Range("G_Dec_Type").Value = "Standard"
        Call OnInput(wsGen.Range("G_Dec_Type"))
    End If
   
    'Check ClassC filds
    For iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count To wsC.Range("C_RNum", "C_SName").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
        If wsC.Range("C_RNum").EntireColumn.Hidden = False Then
            If wsC.Range("C_RNum").Rows(iRow).Value = "" Then
                LogError 3, wsC.Range("C_RNum").Rows(iRow), "[Requestor Part Number] can not be blank."
            End If
        End If
        
        If wsC.Range("C_RName").EntireColumn.Hidden = False Then
            If wsC.Range("C_RName").Rows(iRow).Value = "" Then
                LogError 3, wsC.Range("C_RName").Rows(iRow), "[Requestor Part Name] can not be blank."
            End If
        End If
        
        If wsC.Range("C_SNum").EntireColumn.Hidden = False Then
            If wsC.Range("C_SNum").Rows(iRow).Value = "" Then
                LogError 2, wsC.Range("C_SNum").Rows(iRow), "[Supplier Part Number] is blank."
            End If
        End If
        
        If wsC.Range("C_SName").EntireColumn.Hidden = False Then
            If wsC.Range("C_SName").Rows(iRow).Value = "" Then
                LogError 2, wsC.Range("C_SName").Rows(iRow), "[Supplier Part Name] is blank."
            End If
        End If
        
        If wsC.Range("C_SupCoID").EntireColumn.Hidden = False Then
            If wsC.Range("C_SupCoID").Rows(iRow).Value = "" Then
                LogError 2, wsC.Range("C_SupCoID").Rows(iRow), "[Supplier Company ID] is blank."
            ElseIf InStr(1, wsC.Range("C_SupCoID").Rows(iRow).Value, "_") = 0 Then
                LogError 2, wsC.Range("C_SupCoID").Rows(iRow), "[Supplier Company ID] should end with underscore dataset facility code, such as xxxxxxx_Z1 for Lognet codes."
            End If
        End If

    Next iRow
    
    'Check ClassD fields
    For iRow = wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count To wsD.Range("D_Lvl", "D_Note").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
        Select Case wsD.Range("D_Type").Rows(iRow).Value
        Case "CatPart", "Supplier", "SupplierPart"
            If wsD.Range("D_Num").Rows(iRow).Value = "" Then
                LogError 3, wsD.Range("D_Num").Rows(iRow), " [Number] for " & wsD.Range("D_Type").Rows(iRow).Value & " can not be blank."
            ElseIf wsD.Range("D_Type").Rows(iRow).Value = "Supplier" And InStr(1, wsD.Range("D_Num").Rows(iRow).Value, "_") = 0 Then
                LogError 2, wsD.Range("D_Num").Rows(iRow), "[Number] for " & wsD.Range("D_Type").Rows(iRow).Value & " should end with underscore dataset facility code, such as xxxxxxx_Z1 for Lognet codes."
            End If
            
            If wsD.Range("D_Name").Rows(iRow).Value = "" Then
                LogError 3, wsD.Range("D_Name").Rows(iRow), " [Name] for " & wsD.Range("D_Type").Rows(iRow).Value & " can not be blank."
            End If
        End Select
    Next iRow
    
    'Lock fields
    If LogError(3) = 0 Then 'no errors
        'check if alternate SupID is used
        If wsC.Range("C_SupCoID").EntireColumn.Hidden = False Then
            If Application.WorksheetFunction.CountA(wsC.Range("C_SupCoID")) <= 2 Then
                LogError 1, wsC.Range("C_SupCoID", "C_SupCo"), "No alternate Supplier codes in Class C tab. Hiding fields."
                wsC.Range("C_SupCoID", "C_SupCo").EntireColumn.Hidden = True
            End If
        End If
        wsGen.Range("G_Req_Lock").Value = True
        Call UpdateLock
        LogError 1, , "Requestor Fields locked successfully."
    Else
        LogError 1, , "Errors found. Requestor Fields not locked."
        LogError 'go to error log
    End If
End If

Quit:
If Err.Number <> 0 Then LogError 3, "Btn_LockR()", "Run time error: " & Err.Description & "."
Call ProtectSheets(True)
End Sub

Sub Btn_LockS()
On Error GoTo 0
Dim bError As Boolean

Call ProtectSheets(False)
LogError -1 'clear error log

Select Case wsGen.Range("G_Sup_Lock").Value
Case False
    LogError 1, , "Attempting to lock Supplier Fields."
    
    LogError 1, wsGen.Range("G_Sup_Date"), "[Response Data] updated to today's date."
    wsGen.Range("G_Sup_Date").Value = Date
    
    Select Case Mid(wsGen.Range("G_Dec_Class").Value, 7, 1)
    Case "A"
        Call ConstructIPC
        If LogError(3) = 0 Then
            If vbYes = MsgBox("Are you ready to complete the Class C declaration now?", vbYesNo + vbQuestion, "Class C") Then
                wsGen.Range("G_Dec_Class").Value = "C"
                Call OnInput(wsGen.Range("G_Dec_Class"), True) 'calls FillZero
                bError = True
            End If
        End If
    Case "C"
        If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*targeted*") > 0 Then
            Call ConstructIPC
        ElseIf vbOK = MsgBox("Your declaration includes all values entered by you manually, as well as those set to zero automatically when a value is not manually entered.", _
                        vbExclamation + vbOKCancel, "Comfirmation of Intent") Then
            Call ConstructIPC
        Else
            bError = True
        End If
    Case "D"
        If vbYes = MsgBox("Have you entered all applicable RoHS Exemptions and REACH Safe Use Instructions, if your parts contain any RoHS or REACH substances above applicable thresholds?", _
                        vbQuestion + vbYesNo, "Exemptions and Safe Use") Then
            Call ConstructIPC
        Else
            bError = True
        End If
    Case Else
        Call ConstructIPC
    End Select
    
    If bError = False Then
        If LogError(3) = 0 Then
            wsGen.Range("G_Sup_Lock").Value = True
            Call UpdateLock
            LogError 1, , "Supplier Fields locked successfully."
        Else
            LogError 1, , "Errors found. Supplier Fields not locked."
            LogError 'go to error log
        End If
    End If
    
Case True
    wsGen.Range("G_Sup_Lock").Value = False
    Call UpdateLock
    
End Select

Quit:
If Err.Number <> 0 Then LogError 3, "Btn_LockS()", "Run time error: " & Err.Description & "."
Call ProtectSheets(True)
End Sub

Sub UpdateLock()
'Debug.Print "UpdateLock"

Dim iRow As Long
'Dim sUnit As String 'units row address
Dim sData As String 'data rows address
Dim bLock As Boolean
Dim iColor As Long
Dim iPattern As Long
Dim rnCell As Object 'Excel.Range

'find units row
iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count 'first data row
'sUnit = iRow - 1 & ":" & iRow - 1
'find data rows
Set rnCell = wsC.Range("C_RNum:C_PROP65_Subs").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious) 'last row with data
If rnCell.Row < iRow Then 'no data
    sData = iRow & ":" & iRow
Else
    sData = iRow & ":" & rnCell.Row
End If

'Form Mode
Select Case wsGen.Range("G_Form_Mode").Value
Case "Request/Reply"
    bLock = (wsGen.Range("G_Req_Lock").Value = True)
Case "Distribute", "NewPart"
    bLock = (wsGen.Range("G_Sup_Lock").Value = True)
End Select
If bLock Then
    iColor = iGray
    iPattern = xlPatternGray50
Else
    iColor = iWhite
    iPattern = xlPatternSolid
End If
With wsGen.Range("G_Form_Mode")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With

'Requestor fields
Select Case wsGen.Range("G_Form_Mode").Value
Case "Request/Reply"
    bLock = (wsGen.Range("G_Req_Lock").Value = True)
Case "Distribute", "NewPart"
    bLock = True
End Select
If bLock Then
    iColor = iGray
    iPattern = xlPatternGray50
Else
    iColor = iWhite
    iPattern = xlPatternSolid
End If
wsGen.Range("G_Req_Btn").EntireRow.Hidden = bLock
wsGen.Range("G_Req_Inst").EntireRow.Hidden = bLock
wsGen.Shapes("Btn_Import").Visible = Not bLock
wsGen.Shapes("Btn_LockR").Visible = Not bLock
wsGen.Shapes("Btn_Import").Height = 20.25
wsGen.Shapes("Btn_LockR").Height = 20.25
wsGen.Shapes("Btn_Import").Width = 108
wsGen.Shapes("Btn_LockR").Width = 108
wsGen.Shapes("Btn_Import").Top = 448.5
wsGen.Shapes("Btn_LockR").Top = 448.5
wsGen.Shapes("Btn_Import").Left = 51.75
wsGen.Shapes("Btn_LockR").Left = 205.5
With wsGen.Range("G_Req_ID:G_Req_By,G_Req_Name:G_Req_Email")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With

'Cat Part fields
Select Case wsGen.Range("G_Form_Mode").Value
Case "Request/Reply"
    bLock = (wsGen.Range("G_Req_Lock").Value = True)
Case "Distribute"
    bLock = True
Case "NewPart"
    bLock = (wsGen.Range("G_Sup_Lock").Value = True)
End Select
If bLock Then
    iColor = iGray
    iPattern = xlPatternGray50
Else
    iColor = iWhite
    iPattern = xlPatternSolid
End If
With wsC.Range("C_RNum:C_RName " & sData)
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With

'Requestor/Supplier fields
Select Case wsGen.Range("G_Form_Mode").Value
Case "Request/Reply"
    bLock = (wsGen.Range("G_Req_Lock").Value = True)
Case "Distribute", "NewPart"
    bLock = (wsGen.Range("G_Sup_Lock").Value = True)
End Select
If bLock Then
    iColor = iGray
    iPattern = xlPatternGray50
Else
    iColor = iWhite
    iPattern = xlPatternSolid
End If
With wsGen.Range("G_Sup_Co:G_Sup_CoID,G_Dec_Type")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With
With wsC.Range("(C_RoHS,C_SVHC,C_XVII,C_PROP65) C_Head_Unit")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With
With wsC.Range("C_SupCoID:C_SupCo " & sData)
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With

'Supplier Instructions
bLock = (wsGen.Range("G_Req_Lock").Value = False) Or (wsGen.Range("G_Sup_Lock").Value = True)
wsGen.Range("G_Sup_Inst").EntireRow.Hidden = bLock

'Supplier Fields
bLock = (wsGen.Range("G_Sup_Lock").Value = True)
If bLock Then
    iColor = iGray
    iPattern = xlPatternGray50
    wsGen.Buttons("Btn_LockS").Caption = "Unlock Supplier Data"
    wsGen.Buttons("Btn_Export").Caption = "Export XML"
Else
    iColor = iWhite
    iPattern = xlPatternSolid
    wsGen.Buttons("Btn_LockS").Caption = "Lock Supplier Data"
    wsGen.Buttons("Btn_Export").Caption = "Check Data"
End If
With wsGen.Range("G_Sup_Date:G_Sup_Note, G_Auth_Name:G_Auth_Email, G_Sup_Name:G_Sup_Email, G_Dec_Class:G_Regulations, G_Dec_Acpt")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With
With wsGen.Range("G_Dec_Legal")
    If wsGen.Range("G_Dec_Type").Value = "Custom" Then
        .MergeArea.Locked = bLock
        .Interior.PatternColor = iColor
        .Interior.Pattern = iPattern
    Else
        .MergeArea.Locked = True
        .Interior.PatternColor = iGray
        .Interior.Pattern = xlPatternGray50
    
    End If
End With

wsC.Shapes("btnSPnum").Visible = Not bLock
wsC.Shapes("btnROHS").Visible = False
wsC.Shapes("btnSVHC").Visible = False
wsC.Shapes("btnXVII").Visible = False
wsC.Shapes("btnPROP65").Visible = False
wsC.Shapes("btnXmpn").Visible = False
'With wsC.Range("(C_PMass,C_RoHS,C_SVHC,C_XVII,C_PROP65,C_RoHS_Subs,C_SVHC_Subs) C_Head_Unit") ' " & sUnit)
With wsC.Range("(C_PMass,C_RoHS_Subs,C_SVHC_Subs) C_Head_Unit")
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With
With wsC.Range("(C_RoHS_Other,C_SVHC_Other) C_Head_Unit")
    .Locked = True
    .Interior.PatternColor = iGray
    .Interior.Pattern = xlPatternGray50
End With
With wsC.Range("(C_XVII_Subs,C_PROP65_Subs) C_Head_Unit")
    .Locked = True
'    .Interior.PatternColor = iGray
'    .Interior.Pattern = xlPatternGray50
End With
With wsC.Range("C_SNum:C_PROP65_Subs " & sData)
    .Locked = bLock
    .Interior.PatternColor = iColor
    .Interior.Pattern = iPattern
End With
If Not bLock Then
    Call OnInput(wsC.Range("C_RoHS " & sData)) 'locking for Exemptions, SUI, default Substances, Obsolete/Unknown parts
    Call OnInput(wsGen.Range("G_Regulations").Rows(1)) 'visibility for Add Substance/Exemption buttons, also resets selected substance categories
End If

'Class D Fields
bLock = (wsGen.Range("G_Sup_Lock").Value = True)
wsD.Shapes("Btn_InsRow").Visible = Not bLock
wsD.Shapes("Btn_DelRow").Visible = Not bLock
wsD.Range("D_Lvl:D_Note").Locked = bLock
wsD.Range("D_Headings").Locked = True

If wsGen.Range("G_Form_Mode").Value = "Request/Reply" Then
    bLock = (wsGen.Range("G_Req_Lock").Value = True)
End If
For iRow = wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count To _
            wsD.Range("D_Type").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
    Select Case wsD.Range("D_Type").Rows(iRow).Value
    Case "CatPart"
        wsD.Range("D_Lvl:D_Name").Rows(iRow).Locked = bLock
        'wsD.Range("D_Qty").Rows(iRow).Locked = True
    Case "Supplier", "SupplierPart"
        wsD.Range("D_Lvl:D_Name").Rows(iRow).Locked = bLock
        wsD.Range("D_Mass:D_Xmpn").Rows(iRow).Locked = True
    Case "SubPart"
    Case "Material"
        wsD.Range("D_Qty:D_Xmpn").Rows(iRow).Locked = True
    Case "Substance"
        wsD.Range("D_Qty").Rows(iRow).Locked = True
    Case "SafeUse"
        If wsD.Range("D_Num").Rows(iRow).Value = wsList.Range("L_SUI").Cells(1, 1).Value Then
            wsD.Range("D_Name:D_Note").Rows(iRow).Locked = True
        End If
    End Select
    For Each rnCell In wsD.Range("D_Lvl:D_Note").Rows(iRow).Cells
        If rnCell.Locked Then
            rnCell.Interior.Pattern = xlPatternGray50
            rnCell.Interior.PatternColor = iGray
        Else
            rnCell.Interior.Pattern = xlPatternSolid
        End If
    Next rnCell
Next iRow

If wsGen.Range("G_Form_Mode").Value = "Distribute" Then
        ActiveWorkbook.Names("L_Node_Type").RefersTo = ActiveWorkbook.Names("L_Node_Type_Dist").RefersTo
Else
    Select Case wsGen.Range("G_Req_Lock").Value
    Case True
        ActiveWorkbook.Names("L_Node_Type").RefersTo = ActiveWorkbook.Names("L_Node_Type_Sup").RefersTo
    Case False
        ActiveWorkbook.Names("L_Node_Type").RefersTo = ActiveWorkbook.Names("L_Node_Type_Req").RefersTo
    End Select
End If

'move cursor
If (wsGen.Range("G_Req_Lock").Value = True) And (wsGen.Range("G_Sup_Lock").Value = True) Then
    On Error Resume Next
    wsGen.Activate
    wsGen.Range("G_Dec_Legal").Activate
    On Error GoTo 0
End If

End Sub


Sub FillZeros()
Dim iRow As Long
Dim iCol As Long

'loop through all rows with data
For iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count To _
    wsC.Range("C_RNum", "C_SName").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
        
        'loop through all substance columns
        For iCol = wsC.Range("C_RoHS_Subs").Column To _
            wsC.Range("C_PROP65_Subs").Column + wsC.Range("C_PROP65_Subs").Columns.Count
            
                If wsC.Cells(iRow, iCol).Value = "" Then 'only fill if blank
                    Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
                    Case "Mass", "Max PPM"
                        wsC.Cells(iRow, iCol).Value = 0
                    Case "Exposure"
                        wsC.Cells(iRow, iCol).Value = False
                    End Select
                End If
        Next iCol
Next iRow

End Sub

Sub RePaste(rnTarget As Range)
Dim oCtrl As Object
Dim sPaste As String

Set oCtrl = Application.CommandBars.FindControl(13, 6002)  'paste
If oCtrl Is Nothing Then Exit Sub
sPaste = Replace(oCtrl.Caption, "&", "")

Set oCtrl = Application.CommandBars.FindControl(6, 128) 'undo
If oCtrl Is Nothing Then Exit Sub
If oCtrl.Enabled Then
    If oCtrl.List(1) = sPaste Then
        Application.Undo
        Select Case Application.CutCopyMode
        Case xlCopy
            rnTarget.PasteSpecial xlPasteValues
        Case xlCut
        Case False
            Select Case Application.ClipboardFormats(1)
            Case 0
                rnTarget.Select
                rnTarget.Worksheet.PasteSpecial "Text"
            Case 50
                rnTarget.Select
                rnTarget.Worksheet.PasteSpecial "HTML", , , , , , True
            End Select
        End Select
    End If
End If

End Sub

Sub OnInput(rnTargets As Range, Optional bEvent As Boolean = False)
On Error GoTo 0
'Debug.Print "OnInput " & rnTargets.Worksheet.Name & "!" & rnTargets.Address

Dim rnTarget As Object 'Excel.Range
Dim rnCell As Object 'Excel.Range
Dim rnData As Object 'Excel.Range

Dim iRow As Long
Dim iCol As Integer
Dim fThresh As Double
Dim fPPM As Double
Dim fMass() As Double
Dim sUnit As String
Dim iRoHS As Integer
Dim sXmpn As String
Dim dDay As Date
Dim sWord As String
Dim bError As Boolean
Dim sRegs(0 To 3) As String
sRegs(0) = "ROHS"
sRegs(1) = "SVHC"
sRegs(2) = "XVII"
sRegs(3) = "PROP65"
Dim iReg As Integer
Dim iCount As Integer
Dim iSearch As Integer

Dim oRegEx As Object
Set oRegEx = CreateObject("VBScript.RegExp")
Dim oREMS As Object 'RegEx Matches

If rnTargets.Address = rnTargets.EntireColumn.Address Then GoTo Quit
If rnTargets.Address = rnTargets.EntireRow.Address Then GoTo Quit

For Each rnTarget In rnTargets.Cells
    'remove error formulas
    If TypeName(rnTarget.Value) = "Error" Then
        rnTarget.Value = ""
    'trim strings
    ElseIf TypeName(rnTarget.Value) = "String" Then
        If rnTarget.HasFormula = False And rnTarget.Value <> Trim(rnTarget.Value) Then
            rnTarget.Value = Trim(rnTarget.Value)
        End If
    Else
    End If
    
    'find which cell has been changed and then process accordingly
    Select Case rnTarget.Worksheet.Index
    'General Tab
    Case wsGen.Index
        ' multi cell ranges
        'Regulations included in form
        If Not Application.Intersect(rnTarget, wsGen.Range("G_Regulations")) Is Nothing Then
            wsC.Range("C_RoHS:C_PROP65_Subs").EntireColumn.Hidden = True
            wsC.Shapes("btnXmpn").Visible = False
            wsC.Shapes("btnROHS").Visible = False
            wsC.Shapes("btnSVHC").Visible = False
            wsC.Shapes("btnXVII").Visible = False
            wsC.Shapes("btnPROP65").Visible = False
            wsC.Shapes("linkROHS").Visible = False
            wsC.Shapes("linkSVHC").Visible = False
            wsC.Shapes("linkXVII").Visible = False
            wsC.Shapes("linkPROP65").Visible = False
            bError = (Mid(wsGen.Range("G_Dec_Class").Value, 7, 1) = "C")
            Set rnCell = wsC.Range("C_RNum:C_PROP65_Subs").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious) 'last row with data
            sWord = "C_Head_Unit:(" & rnCell.Row & ":" & rnCell.Row & ") " 'unit plus data range
            
            For Each rnCell In wsGen.Range("G_Regulations")
                If rnCell.Value Like "*RoHS*" Then
                    wsC.Range("C_RoHS:C_Xmpn").EntireColumn.Hidden = False
                    wsC.Shapes("btnXmpn").Visible = True
                    wsC.Shapes("btnROHS").Visible = bError
                    wsC.Shapes("linkROHS").Visible = True
                    Call OnInput(wsC.Range(sWord & "C_RoHS"))
                    
                ElseIf rnCell.Value Like "*SVHC*" Then
                    wsC.Range("C_SVHC").EntireColumn.Hidden = False
                    If WorksheetFunction.CountIf(wsC.Range("C_SVHC").EntireColumn, "3*") > 0 Then
                        wsC.Range("C_SUI").EntireColumn.Hidden = False
                    End If
                    wsC.Shapes("btnSVHC").Visible = bError
                    wsC.Shapes("linkSVHC").Visible = True
                    Call OnInput(wsC.Range(sWord & "C_SVHC"))
                    
                ElseIf rnCell.Value Like "*XVII*target*" Then
                    wsGen.Range("G_Dec_Class").Value = wsList.Range("L_DecClass").Cells(2, 1).Value
                    'dont show dec col, button, or link in targeted config
                    Call OnInput(wsC.Range(sWord & "C_XVII"))
                    ActiveWorkbook.Names("L_XVII_S_Dec_EX").RefersTo = ActiveWorkbook.Names("L_XVII_S_Dec_6").RefersTo
                    ActiveWorkbook.Names("L_XVII_S_Dec_NX").RefersTo = ActiveWorkbook.Names("L_XVII_S_Dec_5").RefersTo
                    
                ElseIf rnCell.Value Like "*XVII*" Then
                    wsC.Range("C_XVII").EntireColumn.Hidden = False
                    wsC.Shapes("btnXVII").Visible = bError
                    wsC.Shapes("linkXVII").Visible = True
                    Call OnInput(wsC.Range(sWord & "C_XVII"))
                    ActiveWorkbook.Names("L_XVII_S_Dec_EX").RefersTo = ActiveWorkbook.Names("L_XVII_S_Dec_3").RefersTo
                    ActiveWorkbook.Names("L_XVII_S_Dec_NX").RefersTo = ActiveWorkbook.Names("L_XVII_S_Dec_2").RefersTo
                   
                ElseIf rnCell.Value Like "*Prop*65*" Then
                    wsC.Range("C_Prop65").EntireColumn.Hidden = False
                    wsC.Shapes("btnPROP65").Visible = bError
                    wsC.Shapes("linkPROP65").Visible = True
                    Call OnInput(wsC.Range(sWord & "C_PROP65"))
                    
                End If
            Next rnCell
        End If
        
        ' single cell ranges
        Select Case rnTarget.Address
        'Declaration Class
        Case wsGen.Range("G_Dec_Class").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            If Len(rnTarget.Value) = 1 Then
                For Each rnCell In wsList.Range("L_DecClass").Cells
                    If rnCell.Value Like "Class " & UCase(rnTarget.Value) & "*" And Not rnCell.Value Like "*Only" Then
                        rnTarget.Value = rnCell.Value
                    End If
                Next rnCell
            End If
            Select Case Mid(rnTarget.Value, 7, 1)
            Case "A"
                wsC.Name = "ClassA"
                wsC.Visible = True
                wsD.Visible = False
                ActiveWorkbook.Names("L_Prop65_Dec").RefersTo = ActiveWorkbook.Names("L_Prop65_Dec_A").RefersTo
                Call OnInput(wsGen.Range("G_Regulations").Rows(1))
                
            Case "C"
                If bEvent Then 'display instructional popup
                    sWord = "Choose the appropriate Decalration for each regulation for each part listed in this form. " & vbNewLine & vbNewLine
                    sWord = sWord & "If you choose a declaration indicating a regulated substance is present, then it will be displayed in bold. " '& vbNewLine & vbNewLine
                    sWord = sWord & "Click the [Add Substance] button for that regulation and select all substances that are present in any of the parts. " & vbNewLine & vbNewLine
                    If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*RoHS*") + _
                       WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*SVHC*") > 0 Then
                        sWord = sWord & "For each RoHS and REACH Article 33 substance, enter the total [Mass] and [Max PPM] (highest concentration) of that substances in the part. "
                        sWord = sWord & "For RoHS, the [Max PPM] is at the homogeneous material level; and for REACH Article 33, it is at the individual article level. "
                    End If
                    If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*XVII*") > 0 Then
                        sWord = sWord & "For each REACH Annex XVII (Restriction) Entry, choose the appopriate decalration indicating if the part meets the requirements of that entry. "
                        sWord = sWord & "Not all Entries are currently available in this form. "
                    End If
                    If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*Prop*65*") > 0 Then
                        sWord = sWord & "For each Prop 65 substance, choose 'TRUE' or 'FALSE' indicating if the part can expose a user to that substance. "
                    End If
                    sWord = sWord & "ALL visible substance fields must be filled in. "
                    If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*RoHS*") + _
                       WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*SVHC*") > 0 Then
                        sWord = sWord & "Enter '0' if the substance is not present in the part."
                        sWord = sWord & vbNewLine & vbNewLine & "NOTE: If you do not select a substance you are declaring that it is not present in any of the parts!"
                    End If
                    If WorksheetFunction.CountIf(wsGen.Range("G_Regulations"), "*Prop*65*") > 0 Then
                        sWord = sWord & vbNewLine & vbNewLine & "NOTE: If you do not select a substance you are declaring that none of the parts have an exposure risk for that substance!"
                    End If
                    MsgBox sWord, vbInformation, "Completing Class C"
                End If
                Call FillZeros
                
                wsC.Name = "ClassC"
                wsC.Visible = True
                wsD.Visible = False
                ActiveWorkbook.Names("L_Prop65_Dec").RefersTo = ActiveWorkbook.Names("L_Prop65_Dec_C").RefersTo
                Call OnInput(wsGen.Range("G_Regulations").Rows(1))
                
            Case "D"
                If bEvent Then 'display instructional popup
                    sWord = "Click the [Insert Row] button to add each SubPart, Material, and Substance in each of your Parts listed in this form. Enter the [Mass] at each level, or the concentration relative to the next higher level. " & vbNewLine & vbNewLine
                    sWord = sWord & "If you wish to include your internal part number (in addition to Caterpillar's part number) insert a SupplierPart row directly below the CatPart row. " & vbNewLine & vbNewLine
                    sWord = sWord & "If your part contains a RoHS Substance that is covered by an Exemption then enter the Exemption ID on the same row as the Substance. " & vbNewLine & vbNewLine
                    sWord = sWord & "If any article(s) in your part contain any SVHCs covered by REACH Article 33, insert a SafeUse row below the CatPart row and enter any instructions for safe use of the article(s) there. " & vbNewLine
                    sWord = sWord & "NOTE: If you do not add a SafeUse row you are certifying that there are no specific safe use instructions required for the article(s), other than following standard hygiene practices and dispose of the article(s) in accordance with applicable waste law(s). "
                    MsgBox sWord, vbInformation, "Completing Class D"
                End If
                wsC.Visible = False
                wsD.Visible = True
                
            Case Else
                '''alternate'''
                wsC.Name = "ClassA"
                wsC.Visible = True
                '''   '''
                'wsC.Visible = False
                wsD.Visible = False
                LogError 3, rnTarget, "[Declaration Class] is not recognized.", bEvent
            End Select
            
            
        'Form Mode
        Case wsGen.Range("G_Form_Mode").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            Select Case rnTarget.Value
            Case "Request/Reply"
                wsGen.Range("G_Title_Block").Interior.Color = iGreen
                wsGen.Range("G_NewPart_Inst").EntireRow.Hidden = True
                wsGen.Range("G_Request").EntireRow.Hidden = False
                wsGen.Range("G_Req_Lock").EntireRow.Hidden = True
                wsC.Range("C_RNum,C_RName").EntireColumn.Hidden = False
                wsC.Range("C_Rev,C_SupCoID:C_SName").EntireColumn.Hidden = True
                wsC.Shapes("btnSPNum").Visible = True
                wsGen.Range("G_Req_Lock").Value = False
            Case "Distribute"
                wsGen.Range("G_Title_Block").Interior.Color = iGreen
                wsGen.Range("G_NewPart_Inst").EntireRow.Hidden = True
                wsGen.Range("G_Request").EntireRow.Hidden = True
                wsC.Range("C_RNum:C_SupCo").EntireColumn.Hidden = True
                wsC.Range("C_SNum:C_SName").EntireColumn.Hidden = False
                wsC.Shapes("btnSPNum").Visible = False
                wsGen.Range("G_Req_Lock").Value = True
            Case "NewPart"
                wsGen.Range("G_Title_Block").Interior.Color = iBlue
                wsGen.Range("G_NewPart_Inst").EntireRow.Hidden = False
                wsGen.Range("G_Request").EntireRow.Hidden = False
                wsGen.Range("G_Req_Inst").EntireRow.Hidden = True
                wsGen.Range("G_Req_Lock:G_Req_ID,G_Req_Date:G_Req_By,G_Req_Title:G_Req_Phone").EntireRow.Hidden = True
                wsGen.Range("G_Req_ID").Value = "0000"
                wsGen.Range("G_Req_Co").Value = "Caterpillar Inc."
                wsGen.Range("G_Req_Name").Value = "RR Regulations Compliance Team"
                wsGen.Range("G_Req_Title").Value = "RR Regulations Compliance"
                wsGen.Range("G_Req_Phone").Value = "309-000-0000"
                wsGen.Range("G_Req_Email").Value = "RRRegulationsCompliance@cat.com"
                wsC.Range("C_RNum:C_RName").EntireColumn.Hidden = False
                wsC.Range("C_SupCoID:C_SName").EntireColumn.Hidden = True
                wsC.Shapes("btnSPNum").Visible = True
                wsGen.Range("G_Req_Lock").Value = True
            Case Else
                LogError 3, rnTarget, "[Form Type] is not recognized.", bEvent
            End Select
            'unhide populated optional fields
            If WorksheetFunction.CountA(wsC.Range("C_SupCoID:C_SupCo")) > 4 Then '!!!update hardcoded threshold if headings ever change!!!
                wsC.Range("C_SupCoID:C_SupCo").EntireColumn.Hidden = False
            End If
            If WorksheetFunction.CountA(wsC.Range("C_SNum")) > 2 Then '!!!update hardcoded threshold if headings ever change!!!
                wsC.Range("C_SNum").EntireColumn.Hidden = False
            End If
            If bEvent Then
                Call UpdateLock '++++++ Requires Unprotect ++++++
            End If
            
        'Requestor or Supplier field lock
        Case wsGen.Range("G_Req_Lock").Address, wsGen.Range("G_Sup_Lock").Address
            If bEvent Then
                Call UpdateLock '++++++ Requires Unprotect ++++++
            End If
            
        'Supplier Acceptance of Legal Declaration
        Case wsGen.Range("G_Dec_Acpt").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            Select Case LCase(Left(rnTarget.Value, 1))
            Case "a", "t", "y"
                rnTarget.Value = "Accepted"
            Case Else
                rnTarget.Value = "Not accepted"
            End Select
            If rnTarget.Value <> "Accepted" Then
                If bEvent Then
                    LogError 3, rnTarget, "Supplier must accept [Legal Declaration].", True 'why is this True and not bEvent?
                End If
            End If
            
        'Type of Legal Declaration
        Case wsGen.Range("G_Dec_Type").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            Set rnCell = wsList.Range("L_LegalType").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
            If rnCell Is Nothing Then
                wsGen.Range("G_Dec_Legal").Value = ""
            Else
                wsGen.Range("G_Dec_Legal").Value = rnCell.Offset(0, 1).Value
            End If
            Call OnInput(wsGen.Range("G_Dec_Legal")) 'to adjust cell height
            If bEvent Then
                Call UpdateLock 'to lock/unlock custom text
            End If
            
        'Legal Declaration Text
        Case wsGen.Range("G_Dec_Legal").Address
            wsGen.Range("G_Dec_Legal").RowHeight = Len(wsGen.Range("G_Dec_Legal").Value) * 0.09 + 15
            
        'any Date field
        Case wsGen.Range("G_Req_Date").Address, wsGen.Range("G_Req_By").Address, wsGen.Range("G_Sup_Date").Address
            bError = False
            rnTarget.NumberFormat = "m/d/yyyy"
            Select Case TypeName(rnTarget.Value)
            Case "Empty"
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
            Case "Date"
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
            Case "String"
                If rnTarget.Value Like "##.##.####" Then 'DE,NO etc.
                    dDay = DateSerial(Mid(rnTarget.Value, 7, 4), Mid(rnTarget.Value, 4, 2), Mid(rnTarget.Value, 1, 2))
                ElseIf rnTarget.Value Like "####-##-##*" Then 'xml,ISO,etc.
                    dDay = DateSerial(Mid(rnTarget.Value, 1, 4), Mid(rnTarget.Value, 6, 2), Mid(rnTarget.Value, 9, 2))
                Else
                    bError = True
                End If
                If bError = False Then
                    rnTarget.Value = dDay
                End If
            Case Else
                bError = True
            End Select
            If bError Then
                LogError 3, rnTarget, "Date format '" & rnTarget.Value & "' is not recognized. Note: dates can't start with a  '  character.", bEvent
            End If
                        
        'Supplier Note
        Case wsGen.Range("G_Sup_Note").Address
            If Len(rnTarget.Value) > 90 Then
                rnTarget.Font.Size = 8
            Else
                rnTarget.Font.Size = 11
            End If
            
        'any person Name field
        Case wsGen.Range("G_Req_Name").Address, wsGen.Range("G_Auth_Name").Address, wsGen.Range("G_Sup_Name").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            If rnTarget.Value <> "" And InStr(1, rnTarget.Value, " ") = 0 Then
                LogError 2, rnTarget, "Please include First Name and Last Name separated by a space.", bEvent
            End If
            
        'any Email Address field
        Case wsGen.Range("G_Req_Email").Address, wsGen.Range("G_Auth_Email").Address, wsGen.Range("G_Sup_Email").Address
            rnTarget.Font.Color = iBlack 'remove previous error highlighting
            If rnTarget.Value <> "" Then
                oRegEx.Pattern = "^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}(?=\.nomail$|$)"
                oRegEx.IgnoreCase = True
                Set oREMS = oRegEx.Execute(rnTarget.Value)
                If oREMS.Count > 0 Then
                    rnTarget.Value = oREMS.Item(0).Value
                Else
                    LogError 3, rnTarget, "[Email address] '" & rnTarget.Value & "' does not appear to be valid.", bEvent
                End If
            End If
    
        End Select
        
    'ClassC tab
    Case wsC.Index
        'Units row
        If rnTarget.Row = wsC.Range("C_Head_Unit").Row Then
            
            Select Case wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value
            Case "Mass", "Max PPM", "Exposure" 'Unit for any Mass or PPM column
                'set default value if blank
                If rnTarget.Value = "" Then
                    Select Case wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value 'rnTarget.Offset(-1, 0).Value
                    Case "Mass"
                        rnTarget.Value = "g"
                    Case "Max PPM"
                        rnTarget.Value = "ppm"
                    End Select
                End If
                'recheck all data rows
                Set rnCell = rnTarget.EntireColumn.Cells.Find("*", , xlValues, xlWhole, xlByRows, xlPrevious)
                If Not rnCell Is Nothing Then
                    If rnCell.Row > rnTarget.Row Then
                        Call OnInput(Range(rnTarget.Offset(1, 0), rnCell))
                    End If
                End If
            
            Case Else 'Version of any regulated substance list
                iReg = -1
                Select Case rnTarget.Column
                Case wsC.Range("C_ROHS").Column
                    iReg = 0
                Case wsC.Range("C_SVHC").Column
                    iReg = 1
                Case wsC.Range("C_XVII").Column
                    iReg = 2
                Case wsC.Range("C_PROP65").Column
                    iReg = 3
                End Select
                If iReg > -1 Then
                    'default to newest list in form if blank
                    If rnTarget.Value = "" Then
                        sWord = "L_" & sRegs(iReg) & "_List_Name" 'range name for list of regulation versions
                        rnTarget.Value = wsList.Range(sWord).Rows(wsList.Range(sWord).Rows.Count).Value
                    End If
                    If Mid(wsGen.Range("G_Dec_Class").Value, 7, 1) <> "C" Then
                        wsC.Range("C_" & sRegs(iReg) & "_Subs").EntireColumn.Hidden = True
                    Else
                        'find date part of string
                        sWord = Mid(rnTarget.Value, InStr(1, rnTarget.Value, "(") + 1)
                        sWord = Left(sWord, Len(sWord) - 1)
                        'convert to serial date
                        dDay = CDate(sWord)
                        'get first of next month
                        dDay = DateSerial(Year(dDay), Month(dDay) + 1, 1)
                        
                        'find all rows with data
                        Set rnData = wsC.Range("C_RNum:C_PROP65_Subs").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious)
                        If rnData.Row < wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count Then
                            Set rnData = rnData.Offset(1, 0)
                        End If
                        Set rnData = Range(rnData, wsC.Rows(wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count)).EntireRow
                        
                        'check for regulation targeted version
                        bError = False
                        For iCount = 1 To wsGen.Range("G_Regulations").Rows.Count
                            If wsGen.Range("G_Regulations").Cells(iCount, 1).Value Like "*target*" Then
                                bError = True
                            End If
                        Next iCount
                        
                        'hide all substace columns except _OTHER
                        sWord = "C_" & sRegs(iReg) & "_Subs" 'range name for regulated substance data columns
                        wsC.Range("C_" & sRegs(iReg) & "_Subs").EntireColumn.Hidden = True
                        
                        'unhide default (All Other) substnace
                        If bError = False Then
                            wsC.Range("C_" & sRegs(iReg) & "_Other").EntireColumn.Hidden = False
                        End If
                        
                        iCount = 0
                        For iCol = wsC.Range("C_" & sRegs(iReg) & "_Subs").Column + wsC.Range("C_" & sRegs(iReg) & "_Subs").Columns.Count - 1 _
                                To wsC.Range("C_" & sRegs(iReg) & "_Subs").Column + 1 Step -1
                            
                            'check if substance is present in any part (add all numeric data plus count of over/under threshold flags)
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), ">0")
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), "=>")
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), "=<")
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), "2 - *")
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), "3 - *")
                            iCount = iCount + WorksheetFunction.CountIf(rnData.Columns(iCol), "TRUE")
                            
                            sWord = Trim(wsC.Range("C_Head_ID").Columns(iCol).Value) 'substance ID
                            If sWord <> "" And (iCount > 0 Or (iReg = 2 And bError = True)) Then 'only first column for each substance, and some parts have data
                                
                                'find date SVHC was added
                                If ListLookup("L_Subst_date", "L_Subst_ID", sWord) < dDay Then 'substance added before selected list version
                                    'unhide all columns for that substance
                                    wsC.Columns(iCol).Hidden = False
                                    For iSearch = iCol + 1 To iCol + 2
                                        If Trim(wsC.Range("C_Headings").Cells(1, iSearch).Value) <> "" Then
                                            Exit For
                                        End If
                                        wsC.Columns(iSearch).Hidden = False
                                    Next iSearch
                                End If
                                iCount = 0 'reset parts with data count
                            End If
                            
                        Next iCol
                    End If
                End If
            End Select
            
        'Data rows
        ElseIf rnTarget.Row >= wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count Then
            
            'for any part number/name addition or change
            If rnTarget.Column <= wsC.Range("C_SNum").Column Then
                
                'Setup validation rules     ++++++ Requires Unprotect ++++++
                wsC.Range("C_PPer:C_Prop65").Rows(rnTarget.Row).Validation.Delete
                wsC.Range("C_PPer").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_UnitType"
                wsC.Range("C_PPer").Rows(rnTarget.Row).Validation.ShowError = False
                wsC.Range("C_RoHS").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_RoHS_Dec"
                wsC.Range("C_RoHS").Rows(rnTarget.Row).Validation.ShowError = False
                wsC.Range("C_SVHC").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_SVHC_Dec"
                wsC.Range("C_SVHC").Rows(rnTarget.Row).Validation.ShowError = False
                wsC.Range("C_XVII").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_XVII_Dec"
                wsC.Range("C_XVII").Rows(rnTarget.Row).Validation.ShowError = False
                wsC.Range("C_PROP65").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_PROP65_Dec"
                wsC.Range("C_PROP65").Rows(rnTarget.Row).Validation.ShowError = False
                wsC.Range("C_XVII_Subs").Rows(rnTarget.Row).Validation.Delete
                For iCol = 1 To wsC.Range("C_XVII_Subs").Columns.Count
                    With wsC.Range("C_XVII_Subs").Cells(rnTarget.Row, iCol)
                        Select Case wsC.Range("C_XVII_Subs C_Head_Lbl").Columns(iCol).Value
                        Case "Restriction Entry - Declaration"
                            If ListLookup("L_Subst_scope", "L_Subst_ID", wsC.Range("C_XVII_Subs C_Head_ID").Cells(1, iCol).Value) = "" Then
                                .Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_XVII_S_Dec_NX"
                            Else
                                .Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_XVII_S_Dec_EX"
                            End If
                            .Validation.ShowError = False
    '                    Case "Mass", "Max PPM"
    '                        .Validation.Delete
                        End Select
                    End With
                Next iCol
                wsC.Range("C_Prop65_Subs").Rows(rnTarget.Row).Validation.Delete
                wsC.Range("C_Prop65_Subs").Rows(rnTarget.Row).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "TRUE,FALSE"
                wsC.Range("C_Prop65_Subs").Rows(rnTarget.Row).Validation.ShowError = False
                
                'Setup default (All Other) substance data
                For Each rnCell In wsC.Range(rnTarget.Row & ":" & rnTarget.Row & " (C_ROHS_Other,C_SVHC_Other,C_XVII_Other,C_PROP65_Other)").Cells
                    Select Case wsC.Range("C_Head_Lbl").Columns(rnCell.Column).Value
                    Case "Mass", "Max PPM"
                        rnCell.Value = 0
                    Case "Exposure"
                        rnCell.Value = False
                    Case "Restriction Entry - Declaration"
                        rnCell.Value = wsList.Range("L_XVII_S_Dec_6").Rows(1).Value
                    End Select
                    rnCell.Locked = True
                    rnCell.Interior.Pattern = xlPatternGray50
                    rnCell.Interior.PatternColor = iGray
                Next rnCell
            End If
            
            Select Case rnTarget.Column 'single columns
            'Adjust column width
            Case wsC.Range("C_RNum").Column, wsC.Range("C_SNum").Column, wsC.Range("C_SupCoID").Column
                If rnTarget.EntireColumn.Hidden = False Then
                    rnTarget.EntireColumn.AutoFit
                    If rnTarget.ColumnWidth < 10 Then
                        rnTarget.ColumnWidth = 10
                    ElseIf rnTarget.ColumnWidth > 20 Then
                        rnTarget.ColumnWidth = 20
                    End If
                End If
                
            Case wsC.Range("C_RName").Column, wsC.Range("C_SName").Column
                If rnTarget.EntireColumn.Hidden = False Then
                    rnTarget.EntireColumn.AutoFit
                    If rnTarget.ColumnWidth < 12 Then
                        rnTarget.ColumnWidth = 12
                    ElseIf rnTarget.ColumnWidth > 24 Then
                        rnTarget.ColumnWidth = 24
                    End If
                End If
                
            Case wsC.Range("C_SupCo").Column
                If rnTarget.EntireColumn.Hidden = False Then
                    rnTarget.EntireColumn.AutoFit
                    If rnTarget.ColumnWidth < 12 Then
                        rnTarget.ColumnWidth = 12
                    ElseIf rnTarget.ColumnWidth > 30 Then
                        rnTarget.ColumnWidth = 30
                    End If
                End If
                
            Case wsC.Range("C_Note").Column
                If rnTarget.EntireColumn.Hidden = False Then
                    rnTarget.EntireColumn.AutoFit
                    If rnTarget.ColumnWidth < 8 Then
                        rnTarget.ColumnWidth = 8
                    ElseIf rnTarget.ColumnWidth > 60 Then
                        rnTarget.ColumnWidth = 60
                    End If
                End If
                
            Case wsC.Range("C_SUI").Column
                rnTarget.Font.Color = iBlack
                If Len(rnTarget.Value) > 4000 Then
                    LogError 3, rnTarget, "[Safe Use Instruction] must be less than 4000 characters.", bEvent
                End If
                
            'validate list data for...
            'Quantity Unit
            Case wsC.Range("C_PPer").Column
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                If rnTarget.Value <> "" Then
                    Set rnCell = wsList.Range("L_UnitType").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
                    If rnCell Is Nothing Then
                        LogError 3, rnTarget, "Part Mass [Per] unit '" & rnTarget.Value & "' is not recognized.", bEvent
                    End If
                End If
                
            'validate list data AND highlight pass/fail for ...
            'RoHS Declaration
            Case wsC.Range("C_RoHS").Column
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                If rnTarget.Value = "" Then
                    iRoHS = 0
                Else
                    'validate entry
                    iRoHS = Val(Left(rnTarget.Value, 1))
                    Select Case iRoHS
                    Case 1, 2, 4, 5, 6, 7
                        If Not rnTarget.HasFormula Then
                            rnTarget.Value = wsList.Range("L_RoHS_Dec").Find(iRoHS & " -*").Value
                        End If
                    Case 3
                        LogError 2, rnTarget, "Be advised, RoHS Declaration '3' and Exemption '7(b)' are not applicable for ANY Caterpillar applications.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", (bEvent And iDispMsg And eMsgXmpn7b)
                        iDispMsg = iDispMsg And Not eMsgXmpn7b
                    Case Else
                        LogError 3, rnTarget, "[RoHS - Declaration] '" & rnTarget.Value & "' is not recognized.", bEvent
                    End Select
                End If
                'highlight Pass/Fail
                If iRoHS = 2 Or iRoHS = 3 Then 'Or iRoHS = 5 Or iRoHS = 6 Then
                    rnTarget.Font.Bold = True
                Else
                    rnTarget.Font.Bold = False
                End If
                'clear exemptions
                Select Case iRoHS
                Case 1, 2, 5, 6, 7
                    wsC.Range("C_Xmpn").Rows(rnTarget.Row).ClearContents
                    wsC.Range("C_Xmpn").Rows(rnTarget.Row).ClearComments
                End Select
                Call OnInput(wsC.Range("C_RNum").Rows(rnTarget.Row)) 'to reset default (All Other) substances
                
            'Exemptions
            Case wsC.Range("C_Xmpn").Column To wsC.Range("C_Xmpn").Column + wsC.Range("C_Xmpn").Columns.Count - 1
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                rnTarget.Font.Bold = False 'remove previous expiration highlighting
                rnTarget.ClearComments
                If rnTarget.Value <> "" Then
                    iRoHS = Val(Left(wsC.Range("C_RoHS").Rows(rnTarget.Row).Value, 1))
                    If iRoHS = 3 Or iRoHS = 4 Then 'Exemptions allowed
                        Call ValidateXmpn(rnTarget, bEvent)
'                        If InStr(1, rnTarget.Value, Chr(169)) Then
'                            rnTarget.Value = Replace(rnTarget.Value, Chr(169), "(c)") 'M$ Office likes to turn this string into a copyright sign
'                        End If
'                        Set rnCell = wsList.Range("L_Xmpn_ID").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
'                        If rnCell Is Nothing Then
'                            LogError 3, rnTarget, "RoHS [Exemption] '" & rnTarget.Value & "' is not recognized.", bEvent
'                        Else
'                            rnTarget.AddComment '++++++ Requires Unprotect ++++++
'                            rnTarget.Comment.Text wsList.Range("L_Xmpn_desc").Rows(rnCell.Row).Value
'                            Call FormatComment(rnTarget.Comment)
'                            If rnTarget.Value = "7(b)" Then
'                                LogError 2, rnTarget, "Be advised, RoHS Declaration '3' and Exemption '7(b)' are not applicable for ANY Caterpillar applications.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", (bEvent And Not bMsgDisplayed)
'                                bMsgDisplayed = True
'                                rnTarget.Font.Bold = True
'                            ElseIf wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value <> "" And _
'                                   wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value < Date Then 'expired
'                                LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' has expired.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", bEvent
'                                bMsgDisplayed = True
'                                rnTarget.Font.Bold = True
'                            Else
'                                Set rnCell = wsInst.Range("I_Xmpn_ID").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
'                                If rnCell Is Nothing Then
'                                    LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' is not typically used in Caterpillar applications. You may be contacted for additional information, or your part may be considered Non-Compliant.", bEvent
'                                    bMsgDisplayed = True
'                                    rnTarget.Font.Bold = True
'                                End If
'                            End If
'                        End If
                    Else 'Exemptions not allowed
                        If bEvent Then rnTarget.ClearContents
                        LogError 2, rnTarget, "RoHS [Exemption] not allowed unless [RoHS - Declaration] = '3' or '4'.", bEvent
                    End If
                End If
                
            'REACH Candidate Declaration
            Case wsC.Range("C_SVHC").Column
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                'validate list data AND highlight pass/fail
                Select Case Left(rnTarget.Value, 1)
                Case ""
                    rnTarget.Font.Bold = False
                Case "1"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(1).Value
                    rnTarget.Font.Bold = False
                Case "2"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(2).Value
                    rnTarget.Font.Bold = True
                Case "3"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(3).Value
                    rnTarget.Font.Bold = True
                Case "5"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(4).Value
                    rnTarget.Font.Bold = False
                Case "6"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(5).Value
                    rnTarget.Font.Bold = False
                Case "7"
                    rnTarget.Value = wsList.Range("L_SVHC_Dec").Rows(6).Value
                    rnTarget.Font.Bold = False
                Case Else
                    rnTarget.Font.Bold = True
                    LogError 3, rnTarget, "REACH [Article 33 - Declaration] '" & rnTarget.Value & "' is not recognized.", bEvent
                End Select
                
                'show/hide Safe Use Instruction entry
                If rnTarget.EntireColumn.Hidden = True Then
                    wsC.Range("C_SUI").EntireColumn.Hidden = True
                ElseIf WorksheetFunction.CountIf(rnTarget.EntireColumn, "3*") = 0 Then
                    wsC.Range("C_SUI").EntireColumn.Hidden = True
                Else
                    wsC.Range("C_SUI").EntireColumn.Hidden = False
                End If
                
            'REACH Restriction Declaration
            Case wsC.Range("C_XVII").Column
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                Select Case Left(rnTarget.Value, 1)
                Case ""
                    rnTarget.Font.Bold = False
                Case "1"
                    rnTarget.Value = wsList.Range("L_XVII_Dec").Rows(1).Value
                    rnTarget.Font.Bold = False
                Case "2"
                    rnTarget.Value = wsList.Range("L_XVII_Dec").Rows(2).Value
                    rnTarget.Font.Bold = True
                Case "5"
                    rnTarget.Value = wsList.Range("L_XVII_Dec").Rows(3).Value
                    rnTarget.Font.Bold = False
                Case "6"
                    rnTarget.Value = wsList.Range("L_XVII_Dec").Rows(4).Value
                    rnTarget.Font.Bold = False
                Case "7"
                    rnTarget.Value = wsList.Range("L_XVII_Dec").Rows(5).Value
                    rnTarget.Font.Bold = False
                Case Else
                    rnTarget.Font.Bold = True
                    LogError 3, rnTarget, "REACH [Restriction - Declaration] '" & rnTarget.Value & "' is not recognized.", bEvent
                End Select
                
            'Prop 65 Declaration
            Case wsC.Range("C_PROP65").Column
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                If rnTarget.Value <> "" Then
                    iRoHS = Val(Left(rnTarget.Value, 1))
                    If iRoHS = 0 Then
                        For iRow = 1 To wsList.Range("L_Prop65_Query").Rows.Count
                            If rnTarget.Value = wsList.Range("L_Prop65_Query").Rows(iRow).Value Then
                                iRoHS = iRow
                            End If
                        Next iRow
                    End If
                    Select Case iRoHS
                    Case 1, 5, 6, 7
                        rnTarget.Value = wsList.Range("L_PROP65_Dec").Rows(iRoHS).Value
                        rnTarget.Font.Bold = False
                    Case 2, 3, 4
                        rnTarget.Value = wsList.Range("L_PROP65_Dec").Rows(iRoHS).Value
                        rnTarget.Font.Bold = True
                    Case Else
                        rnTarget.Font.Bold = True
                        LogError 3, rnTarget, "[Prop 65 - Declaration] '" & rnTarget.Value & "' is not recognized.", bEvent
                    End Select
                End If
                
            End Select
            
            Select Case rnTarget.Column 'multi columns
            
            'block all other data entry for obsolete/unknown parts
            Case wsC.Range("C_ROHS").Column, _
                 wsC.Range("C_SVHC").Column, _
                 wsC.Range("C_XVII").Column, _
                 wsC.Range("C_PROP65").Column, _
                 wsC.Range("C_XVII_Subs").Column To wsC.Range("C_XVII_Subs").Column + wsC.Range("C_XVII_Subs").Columns.Count - 1
                
                'check if part declared obs/unk under any reg
                bError = False
'                iReg = -1
                For iCount = 0 To 3
                    If Val(Left(wsC.Range("C_" & sRegs(iCount)).Rows(rnTarget.Row).Value, 1)) >= 5 Then
                        bError = True 'any reg has obs dec
                        iReg = iCount 'find reg with obs dec
                    End If
                Next iCount
                For iCount = 1 To wsC.Range("C_XVII_Subs").Columns.Count
                    If Val(Left(wsC.Range("C_XVII_Subs").Cells(rnTarget.Row, iCount).Value, 1)) >= 5 Then
                        bError = True 'any subst has obs dec
                        iReg = iCount * -1 'find subst with obs dec
                    End If
                Next iCount
                
                'lock cells
                With wsC.Range("C_ROHS:C_PROP65_Subs").Rows(rnTarget.Row).Cells
                    If wsGen.Range("G_Sup_Lock").Value = True Then
                        .Locked = True
                        .Interior.Pattern = xlPatternGray50
                        .Interior.PatternColor = iGray
                    ElseIf bError = True Then 'obsolete
                        .Locked = True
                        .Interior.Pattern = xlPatternGray50
                        .Interior.PatternColor = iGray
                        'unlock obs dec
                        If iReg > -1 Then
                            With wsC.Range("C_" & sRegs(iReg)).Rows(rnTarget.Row)
                                .Locked = False
                                .Interior.Pattern = xlPatternSolid
                            End With
                        Else
                            With wsC.Range("C_XVII_Subs").Cells(rnTarget.Row, iReg * -1)
                                .Locked = False
                                .Interior.Pattern = xlPatternSolid
                            End With
                        End If
                    Else
                        .Locked = False
                        .Interior.Pattern = xlPatternSolid
                        'relock Other substances
                        For iCount = 0 To 3
                            With wsC.Range("C_" & sRegs(iCount) & "_Other").Rows(rnTarget.Row).Cells
                                .Locked = True
                                .Interior.Pattern = xlPatternGray50
                                .Interior.PatternColor = iGray
                            End With
                        Next iCount
                        'relock xmpn and sui if needed
                        With wsC.Range("C_XMPN").Rows(rnTarget.Row).Cells
                            .Validation.Delete
                            If Val(Left(wsC.Range("C_ROHS").Rows(rnTarget.Row).Value, 1)) = 3 Or _
                               Val(Left(wsC.Range("C_ROHS").Rows(rnTarget.Row).Value, 1)) = 4 Then
                                .Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=I_Xmpn_ID" '++++++ Requires Unprotect ++++++
                                .Validation.ShowError = False
                            Else
                                .Locked = True
                                .Interior.Pattern = xlPatternGray50
                                .Interior.PatternColor = iGray
                            End If
                        End With
                        With wsC.Range("C_SUI").Rows(rnTarget.Row).Cells
                            If Val(Left(wsC.Range("C_SVHC").Rows(rnTarget.Row).Value, 1)) <> 3 Then
                                .Locked = True
                                .Interior.Pattern = xlPatternGray50
                                .Interior.PatternColor = iGray
                            End If
                        End With
                    End If
                End With
                
                'clear contents
                If bError = True Then 'obsolete
                    For iCount = 0 To 3
                        If iCount <> iReg Then
                            wsC.Range("C_" & sRegs(iCount)).Rows(rnTarget.Row).ClearContents
                        End If
                    Next iCount
                    wsC.Range("C_Xmpn").Rows(rnTarget.Row).ClearComments
                    wsC.Range("C_Xmpn").Rows(rnTarget.Row).ClearContents
                    wsC.Range("C_SUI").Rows(rnTarget.Row).ClearContents
'                    wsC.Range("C_ROHS_Subs:C_SVHC_Subs,C_PROP65_Subs").Rows(rnTarget.Row).ClearContents
                    For iCount = 0 To 3 'each Reg
                        For iSearch = wsC.Range("C_" & sRegs(iCount) & "_Other").Columns.Count + 1 To wsC.Range("C_" & sRegs(iCount) & "_Subs").Columns.Count 'each Subst after Other
                            If iSearch <> iReg * -1 Or iCount <> 2 Then 'not Obs Subst in XVII or not XVII at all
                                wsC.Range("C_" & sRegs(iCount) & "_Subs").Cells(rnTarget.Row, iSearch).ClearContents
                            End If
                        Next iSearch
                    Next iCount
                End If
                
            End Select
            
            Select Case rnTarget.Column
            
            'Highlight Pass/Fail
            Case wsC.Range("C_RoHS_Subs").Column To wsC.Range("C_PROP65_Subs").Column + wsC.Range("C_PROP65_Subs").Columns.Count - 1
                
                Select Case wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value
                'RoHS & SVHC Substances
                Case "Mass", "Max PPM"
                    'lookup threshold
                    fThresh = 1000000 'default to no threshold
                    For iCol = rnTarget.Column To rnTarget.Column - 2 Step -1
                        sWord = wsC.Range("C_Head_ID").Columns(iCol).Value
                        If sWord <> "" Then Exit For
                    Next iCol
                    If sWord <> "" Then
                        Set rnCell = wsList.Range("L_Subst_ID").Find(sWord, , xlValues, xlWhole)
                        If Not rnCell Is Nothing Then
                            sWord = wsList.Range("L_Subst_thresh").Rows(rnCell.Row).Value
                            fThresh = Val(sWord)
                            If sWord Like "*PPB" Then
                                fThresh = fThresh / 1000
                            End If
                        End If
                    End If
                    
                    'get Part Mass
                    ReDim fMass(0)
                    fMass(0) = Val(wsC.Range("C_PMass").Rows(rnTarget.Row).Value)
                    sUnit = wsC.Range("C_Head_Unit C_PMass").Value
                    StdUnitMass fMass, sUnit 'convert to g
                    
                    'get Substance Mass/Concentration
                    ReDim Preserve fMass(1)
                    fMass(1) = Val(rnTarget.Value)
                    sUnit = wsC.Range("C_Head_Unit").Columns(rnTarget.Column).Value
                    StdUnitMass fMass, sUnit, "ppm" 'convert to PPM
                    
                    'highlight noncompliance
                    If fMass(1) > fThresh Then
                        rnTarget.Font.Bold = True
                    Else
                        rnTarget.Font.Bold = False
                    End If
                    
                    'copy Phalate data between REACH and RoHS
                    If bEvent And rnTarget.Value <> "" Then
                        If wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value = "Mass" Then
                            If wsC.Range("C_Headings").Cells(1, rnTarget.Column).Value Like "*phthalate*" Or _
                                wsC.Range("C_Headings").Cells(1, rnTarget.Column - 1).Value Like "*phthalate*" Then
                                    Call ShareDuplicatedSubstances(rnTarget)
                            End If
                        End If
                    End If
                    
                'REACH Restriction Substances
                Case "Restriction Entry - Declaration"
                    rnTarget.Font.Color = iBlack 'remove previous error highlighting
                    rnTarget.Font.Bold = False
                    Select Case Left(rnTarget.Value, 1)
                    Case ""
                    Case "1"
                        rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(1).Value
                    Case "2"
                        rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(2).Value
                        rnTarget.Font.Bold = True
                    Case "3"
                        If ListLookup("L_Subst_scope", "L_Subst_ID", wsC.Range("C_Head_ID").Cells(1, rnTarget.Column).Value) = "" Then
                            rnTarget.Font.Bold = True
                            LogError 3, rnTarget, "REACH [Restriction Entry - Declaration] = '3' is not applicable to  '" & wsC.Range("C_Headings").Cells(1, rnTarget.Column).Value & "' .", bEvent
                        Else
                            rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(3).Value
                        End If
                    Case "5"
                        rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(4).Value
                    Case "6"
                        rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(5).Value
                    Case "7"
                        rnTarget.Value = wsList.Range("L_XVII_S_Dec_6").Rows(6).Value
                    Case Else
                        rnTarget.Font.Bold = True
                        LogError 3, rnTarget, "REACH [Restriction Entry - Declaration] '" & rnTarget.Value & "' is not recognized.", bEvent
                    End Select
                    
                'Prop 65 Substances
                Case "Exposure"
                    rnTarget.Font.Color = iBlack 'remove previous error highlighting
                    Select Case UCase(Left(rnTarget.Value, 1))
                    Case ""
                        rnTarget.Font.Bold = False
                    Case "F", "0"
                        rnTarget = False
                        rnTarget.Font.Bold = False
                    Case "T", "1"
                        rnTarget = True
                        rnTarget.Font.Bold = True
                    Case Else
                        rnTarget.Font.Bold = False
                        LogError 3, rnTarget, "Prop 65 [Exposure] must be TRUE or FALSE.", bEvent
                    End Select
                End Select
            End Select
            
            
            'Validate numeric data
            Select Case wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value
            Case "Mass", "Max PPM"
                rnTarget.Font.Color = iBlack 'remove previous error highlighting
                rnTarget.Font.Size = 11
                If rnTarget.Value <> "" Then
                    On Error Resume Next
                    rnTarget.Value = CDbl(rnTarget.Value)
                    If Err.Number = 13 Then 'type mismatch
                        'non-numeric value
                        rnTarget.Font.Size = 13
                        If rnTarget.Value = "<" Then
                            rnTarget.Font.Bold = False
                        ElseIf rnTarget.Value = ">" Then
                            rnTarget.Font.Bold = True
                        Else
                            If bEvent Then rnTarget.Value = ""
                            LogError 3, rnTarget, "[" & wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value & "] must be a numeric value.", bEvent
                        End If
                    'negative number
                    ElseIf rnTarget.Value < 0 Then
                        LogError 3, rnTarget, "[" & wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value & "] must be a positive number.", bEvent
                    'part mass zero
                    ElseIf rnTarget.Column = wsC.Range("C_PMass").Column Then
                        If rnTarget.Value = 0 Then
                            LogError 3, rnTarget, "[Mass] for Part must be more then '0'.", bEvent
                        End If
                    'percent overflow
                    ElseIf wsC.Range("C_Head_Unit").Columns(rnTarget.Column).Value = "%" Then
                        If rnTarget.Value > 100 Then
                            LogError 3, rnTarget, "[" & wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value & "] can't be more then '100' if [Unit] is '%'.", bEvent
                        End If
                    'ppm overflow
                    ElseIf wsC.Range("C_Head_Unit").Columns(rnTarget.Column).Value = "ppm" Then
                        If rnTarget.Value > 1000000 Then
                            LogError 3, rnTarget, "[" & wsC.Range("C_Head_Lbl").Columns(rnTarget.Column).Value & "] can't be more then '1,000,000' if [Unit] is 'ppm'.", bEvent
                        End If
                    End If
                    On Error GoTo 0
                End If
            End Select
        End If
        
    'ClassD tab
    Case wsD.Index
        If rnTarget.Row >= wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count And rnTarget.Column <= wsD.Range("D_Note").Column Then
        
            Select Case rnTarget.Column
            Case wsD.Range("D_Lvl").Column
                If rnTarget.Value = "" Then
                    rnTarget.IndentLevel = 0
                Else
                    If IsNumeric(rnTarget.Value) Then
                        rnTarget.Value = Abs(Round(rnTarget.Value))
                        If rnTarget.Value < 5 Then
                            rnTarget.IndentLevel = rnTarget.Value
                        Else
                            rnTarget.IndentLevel = 5
                        End If
                    Else
                        rnTarget.Value = ""
                        rnTarget.IndentLevel = 0
                    End If
                End If
                
            Case wsD.Range("D_Type").Column
                wsD.Range("D_Num").Rows(rnTarget.Row).Font.Color = iBlack 'in case of invalid cas
                
                'cleanup in case of SUI
                If rnTarget.Value <> "SafeUse" Then
                    wsD.Range("D_Num").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).UnMerge
                    wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).WrapText = False
                    wsD.Range("D_Mass,D_Qty").Rows(rnTarget.Row).NumberFormat = "General"
                    wsD.Range("D_Unit,D_Xmpn,D_Note").Rows(rnTarget.Row).NumberFormat = "@"
                    wsD.Range("D_Unit,D_Xmpn").Rows(rnTarget.Row).HorizontalAlignment = xlCenter
                    With wsD.Range("D_Name:D_Note").Rows(rnTarget.Row)
                        .Borders(xlEdgeTop).LineStyle = xlContinuous
                        .Borders(xlEdgeBottom).LineStyle = xlContinuous
                        .Borders(xlEdgeLeft).LineStyle = xlContinuous
                        .Borders(xlEdgeRight).LineStyle = xlContinuous
                        .Borders(xlInsideVertical).LineStyle = xlContinuous
                        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
                        .Borders(xlEdgeTop).Weight = xlThin
                        .Borders(xlEdgeBottom).Weight = xlThin
                        .Borders(xlEdgeLeft).Weight = xlThin
                        .Borders(xlEdgeRight).Weight = xlThin
                        .Borders(xlInsideVertical).Weight = xlThin
                        .Borders(xlInsideHorizontal).Weight = xlThin
                    End With
                    rnTarget.EntireRow.AutoFit
                End If
                
                If rnTarget.Value <> "Substance" Then
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).ClearComments
                End If
                
                Select Case rnTarget.Value
                Case "CatPart"
                    rnTarget.IndentLevel = 0
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iPink
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
    '                If wsGen.Range("G_Form_Mode").Value = "Request/Reply" Then
    '                    wsD.Range("D_Lvl", "D_Name").Rows(rnTarget.Row).Locked = wsGen.Range("G_Req_Lock").Value
    '                End If
                    wsD.Range("D_Lvl").Rows(rnTarget.Row).Value = 0
'                    wsD.Range("D_Qty").Rows(rnTarget.Row).Locked = True
'                    wsD.Range("D_Qty").Rows(rnTarget.Row).ClearContents
                    wsD.Range("D_Qty").Rows(rnTarget.Row).NumberFormat = "@"
                    wsD.Range("D_Qty").Rows(rnTarget.Row).HorizontalAlignment = xlLeft
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UOMabs"
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.ShowError = False
                    If bEvent And wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Value = False Then
                        wsD.Range("D_Unit").Rows(rnTarget.Row).ClearContents
                    End If
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UnitType"
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.ShowError = False
                    If bEvent And wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Value = False Then
                        wsD.Range("D_Xmpn").Rows(rnTarget.Row).ClearContents
                    End If
                
                Case "SupplierPart"
                    wsD.Range("D_Lvl").Rows(rnTarget.Row).Value = 0
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iPink
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                    If wsGen.Range("G_Form_Mode").Value = "Distribute" Then
                        rnTarget.IndentLevel = 0
                        wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UOMabs"
                        wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.ShowError = False
                        wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UnitType"
                        wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.ShowError = False
                    Else
                        rnTarget.IndentLevel = 1
                        wsD.Range("D_Mass:D_Xmpn").Rows(rnTarget.Row).Locked = True
                        wsD.Range("D_Mass:D_Xmpn").Rows(rnTarget.Row).ClearContents
                    End If
                
                Case "Supplier"
                    rnTarget.IndentLevel = 1
                    wsD.Range("D_Lvl").Rows(rnTarget.Row).Value = 0
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iPink
                    wsD.Range("D_Lvl:D_Name").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Mass:D_Xmpn").Rows(rnTarget.Row).Locked = True
                    wsD.Range("D_Mass:D_Xmpn").Rows(rnTarget.Row).ClearContents
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                
                Case "SafeUse"
                    rnTarget.IndentLevel = 1
                    wsD.Range("D_Lvl").Rows(rnTarget.Row).Value = 0
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iPink
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Merge
'                    wsD.Range("D_Mass:D_Note").Rows(rnTarget.Row).ClearContents
                    wsD.Range("D_Num").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Num").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_SUI"
                    wsD.Range("D_Num").Rows(rnTarget.Row).Validation.ShowError = False
                    wsD.Range("D_Num").Rows(rnTarget.Row).Validation.IgnoreBlank = False
                    If bEvent And wsD.Range("D_Num").Rows(rnTarget.Row).Validation.Value = False Then 'TODO: do I need bEvent
                        wsD.Range("D_Num").Rows(rnTarget.Row).Value = wsList.Range("L_SUI").Rows(1).Value
                    End If
                    Call OnInput(wsD.Range("D_Num").Rows(rnTarget.Row))
                    wsD.Range("D_Name").Rows(rnTarget.Row).WrapText = True
                    
                    
                Case "SubPart"
                    rnTarget.IndentLevel = 1
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iYellow
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UOM"
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.ShowError = False
                    wsD.Range("D_Qty").Rows(rnTarget.Row).NumberFormat = "General"
                    wsD.Range("D_Qty").Rows(rnTarget.Row).HorizontalAlignment = xlRight
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UnitType"
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.ShowError = False
                    If bEvent And wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Value = False Then
                        wsD.Range("D_Xmpn").Rows(rnTarget.Row).ClearContents
                    End If
                
                Case "Material"
                    rnTarget.IndentLevel = 2
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iGreen
                    wsD.Range("D_Lvl:D_Unit,D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Qty:D_Xmpn").Rows(rnTarget.Row).Locked = True
                    wsD.Range("D_Qty").Rows(rnTarget.Row).ClearContents
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UOM"
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.ShowError = False
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).ClearContents
                
                Case "Substance"
                    rnTarget.IndentLevel = 3
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Interior.Color = iBlue
                    If Not ChkCAS(wsD.Range("D_Num").Rows(rnTarget.Row).Value) Then
                        wsD.Range("D_Num").Rows(rnTarget.Row).Font.Color = iRed
                    End If
                    wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Locked = wsGen.Range("G_Sup_Lock").Value
                    wsD.Range("D_Qty").Rows(rnTarget.Row).Locked = True
                    wsD.Range("D_Qty").Rows(rnTarget.Row).ClearContents
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_UOM"
                    wsD.Range("D_Unit").Rows(rnTarget.Row).Validation.ShowError = False
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Delete
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=I_Xmpn_ID"
                    wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.ShowError = False
                    If bEvent And wsD.Range("D_Xmpn").Rows(rnTarget.Row).Validation.Value = False Then
                        wsD.Range("D_Xmpn").Rows(rnTarget.Row).ClearContents
                    End If
                
                    
                Case ""
                    rnTarget.IndentLevel = 0
                    With wsD.Range("D_Lvl", "D_Note").Rows(rnTarget.Row)
                        .Interior.ColorIndex = xlAutomatic 'white
                        .Locked = False
                        .Validation.Delete
                        .ClearContents
                    End With
                End Select
                
                For Each rnCell In wsD.Range("D_Lvl:D_Note").Rows(rnTarget.Row).Cells
                    If rnCell.Locked Then
                        rnCell.Interior.Pattern = xlPatternGray50
                        rnCell.Interior.PatternColor = iGray
                    Else
                        rnCell.Interior.Pattern = xlPatternSolid
                    End If
                Next rnCell
                
                rnTarget.Validation.Delete
                rnTarget.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=L_Node_Type" '++++++ Requires Unprotect ++++++
                
            Case wsD.Range("D_Num").Column
                rnTarget.Font.Color = iBlack
                Select Case wsD.Range("D_Type").Rows(rnTarget.Row).Value
                Case "SafeUse"
                    If rnTarget.Value = wsList.Range("L_SUI").Rows(1).Value Then
                        wsD.Range("D_Name").Rows(rnTarget.Row).Value = wsList.Range("L_SUI_text").Value
                        wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Locked = True
                        wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Interior.Pattern = xlPatternGray50
                        wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Interior.PatternColor = iGray
                    Else
                        wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Locked = False
                        wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).Interior.Pattern = xlPatternSolid
                    End If
                    Call OnInput(wsD.Range("D_Name").Rows(rnTarget.Row))
                Case "Substance"
                    If rnTarget.Value <> "" Then
                        If ChkCAS(rnTarget.Value) = False Then
                            LogError 3, rnTarget, "[CAS number] '" & rnTarget.Value & "' is not valid.", bEvent
                        End If
                    End If
                End Select
            
            Case wsD.Range("D_Name").Column
                If wsD.Range("D_Type").Rows(rnTarget.Row).Value = "SafeUse" Then
                    rnTarget.Font.Color = iBlack
                    If Len(rnTarget.Value) > 4000 Then
                        LogError 3, rnTarget, "[Safe Use Instruction] must be less than 4000 characters.", bEvent
                    End If
'                    wsD.Range("D_Name:D_Note").Rows(rnTarget.Row).UnMerge
'                    wsD.Range("D_Name").EntireColumn.AutoFit
                    iCount = 15 * (Int(Len(rnTarget.Value) / 125) + 1) 'TODO: fix hard coded denominator
                    If iCount > 409 Then iCount = 409
                    rnTarget.EntireRow.RowHeight = iCount
                Else
                    wsD.Range("D_Name").EntireColumn.AutoFit
                    If wsD.Range("D_Name").ColumnWidth < 35 Then
                        wsD.Range("D_Name").ColumnWidth = 35
                    ElseIf wsD.Range("D_Name").ColumnWidth > 75 Then
                        wsD.Range("D_Name").ColumnWidth = 75
                    End If
                End If
                
            Case wsD.Range("D_Mass").Column
                rnTarget.Font.Color = iBlack
                If rnTarget.Value <> "" Then
                    On Error Resume Next
                    rnTarget.Value = CDbl(rnTarget.Value)
                    If Err.Number = 13 Then 'type mismatch (not numeric)
                        On Error GoTo 0
                        If bEvent Then rnTarget.Value = ""
                        LogError 3, rnTarget, "[Mass] must be a number greater than '0'.", bEvent
                    Else
                        On Error GoTo 0
                        'check mass is in valid range
                        If rnTarget.Value <= 0 Then
                            LogError 3, rnTarget, "[Mass] must be a number greater than '0'.", bEvent
                        Else
                            Select Case wsD.Range("D_Unit").Rows(rnTarget.Row).Value
                            Case "ppm"
                                If rnTarget.Value > 1000000 Then
                                    LogError 3, rnTarget, "[Mass/Portion] must be less than '1,000,000' ppm.", bEvent
                                End If
                            Case "%"
                                If rnTarget.Value > 100 Then
                                    LogError 3, rnTarget, "[Mass/Portion] must be less than '100' %.", bEvent
                                End If
                            End Select
                        End If
                    End If
                End If
                
            Case wsD.Range("D_Unit").Column
                rnTarget.Font.Color = iBlack
                If rnTarget.Value <> "" Then
                    If rnTarget.Value = "massPercent" Then rnTarget.Value = "%"
                    Set rnCell = wsList.Range("L_UOM").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
                    If rnCell Is Nothing Then
                        LogError 3, rnTarget, "[Mass Unit] '" & rnTarget.Value & "' is not recognized.", bEvent
                    ElseIf wsD.Range("D_Type").Rows(rnTarget.Row).Value = "CatPart" Then
                        If rnTarget.Value = "%" Or rnTarget.Value = "ppm" Then
                            LogError 3, rnTarget, "[Mass Unit] '" & rnTarget.Value & "' is not valid for Parts.", bEvent
                        End If
                    End If
                End If
                
            Case wsD.Range("D_Qty").Column
                rnTarget.Font.Color = iBlack
                If rnTarget.Value <> "" Then
                    Select Case wsD.Range("D_Type").Rows(rnTarget.Row).Value
                    Case "CatPart"
                        
                    Case "SubPart"
                        On Error Resume Next
                        rnTarget.Value = CDbl(rnTarget.Value)
                        If Err.Number = 13 Then 'type mismatch (not numeric)
                            If bEvent Then rnTarget.Value = ""
                            LogError 3, rnTarget, "[Quantity] must be a number greater than '0'.", bEvent
                        ElseIf rnTarget.Value <= 0 Then
                            LogError 3, rnTarget, "[Quantity] must be a number greater than '0'.", bEvent
                        End If
                        On Error GoTo 0
                    Case Else
                        rnTarget.Value = ""
                    End Select
                End If
                
            Case wsD.Range("D_Xmpn").Column
                rnTarget.Font.Color = iBlack
                rnTarget.Font.Bold = False
                rnTarget.ClearComments
                If rnTarget.Value <> "" Then
                    Select Case wsD.Range("D_Type").Rows(rnTarget.Row).Value
                    Case "Substance"
                        Call ValidateXmpn(rnTarget, bEvent)
'                        If InStr(1, rnTarget.Value, Chr(169)) Then
'                            rnTarget.Value = Replace(rnTarget.Value, Chr(169), "(c)")
'                        End If
'                        Set rnCell = wsList.Range("L_Xmpn_ID").Find(Left(rnTarget.Value, 254) & "*", , xlValues, xlWhole, xlByRows, xlNext)
'                        If rnCell Is Nothing Then
'                            LogError 3, rnTarget, "RoHS [Exemption '" & rnTarget.Value & "' is not recognized.", bEvent
'                        Else
'                            rnTarget.AddComment '++++++ Requires Unprotect ++++++
'                            rnTarget.Comment.Text wsList.Range("L_Xmpn_desc").Rows(rnCell.Row).Value
'                            Call FormatComment(rnTarget.Comment)
'                            If rnTarget.Value = "7(b)" Then
'                                LogError 2, rnTarget, "Be advised, RoHS Declaration '3' and Exemption '7(b)' are not applicable for ANY Caterpillar applications.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", (bEvent And Not bMsgDisplayed)
'                                bMsgDisplayed = True
'                                rnTarget.Font.Bold = True
'                            ElseIf wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value <> "" And _
'                               wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value < Date Then 'expired
'                                LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' has expired.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", bEvent
'                                bMsgDisplayed = True
'                                rnTarget.Font.Bold = True
'                            Else
'                                Set rnCell = wsInst.Range("I_Xmpn_ID").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
'                                If rnCell Is Nothing Then
'                                    LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' is not typically used in Caterpillar applications. You may be contacted for additional information, or your part may be considered Non-Compliant.", bEvent
'                                    bMsgDisplayed = True
'                                    rnTarget.Font.Bold = True
'                                End If
'                            End If
'                        End If
                    Case "CatPart", "SupplierPart", "SubPart"
                        If wsD.Range("D_Type").Rows(rnTarget.Row).Value = "SupplierPart" And wsGen.Range("G_Form_Mode").Value <> "Distribute" Then
                            rnTarget.Value = ""
                        Else
                            Set rnCell = wsList.Range("L_UnitType").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
                            If rnCell Is Nothing Then
                                LogError 3, rnTarget, "[Qty Unit] '" & rnTarget.Value & "' is not recognized.", bEvent
                            End If
                        End If
                    Case Else
                        rnTarget.Value = ""
                    End Select
                End If
                
            Case wsD.Range("D_Note").Column
                wsD.Range("D_Note").EntireColumn.AutoFit
                If wsD.Range("D_Note").ColumnWidth < 8 Then
                    wsD.Range("D_Note").ColumnWidth = 8
                ElseIf wsD.Range("D_Note").ColumnWidth > 40 Then
                    wsD.Range("D_Note").ColumnWidth = 40
                End If
                
            End Select
        End If
    
    End Select
Next rnTarget

Quit:
If Err.Number <> 0 Then LogError 3, "OnInput()", "Run time error: " & Err.Description & ".", bEvent
End Sub

Sub ValidateXmpn(rnTarget As Range, bEvent As Boolean)
    Dim rnCell As Object 'Excel.Range
    If InStr(1, rnTarget.Value, Chr(169)) Then
        rnTarget.Value = Replace(rnTarget.Value, Chr(169), "(c)") 'M$ Office likes to turn this string into a copyright symbol
    End If
    Set rnCell = wsList.Range("L_Xmpn_ID").Find(Left(rnTarget.Value, 254), , xlValues, xlWhole, xlByRows, xlNext)
    If rnCell Is Nothing Then
        LogError 3, rnTarget, "RoHS [Exemption] '" & rnTarget.Value & "' is not recognized.", bEvent
    Else
        rnTarget.AddComment '++++++ Requires Unprotect ++++++
        rnTarget.Comment.Text wsList.Range("L_Xmpn_desc").Rows(rnCell.Row).Value
        Call FormatComment(rnTarget.Comment)
        If rnTarget.Value = "7(b)" Then
            LogError 2, rnTarget, "Be advised, RoHS Declaration '3' and Exemption '7(b)' are not applicable for ANY Caterpillar applications.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", (bEvent And iDispMsg And eMsgXmpn7b)
            iDispMsg = iDispMsg And Not eMsgXmpn7b
            rnTarget.Font.Bold = True
        ElseIf wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value <> "" And _
               wsList.Range("L_Xmpn_expir").Rows(rnCell.Row).Value < Date Then 'expired
            LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' has expired.   Your part will be considered Non-Compliant, regardless of any other Exemptions selected.", (bEvent And iDispMsg And eMsgXmpnExp)
            iDispMsg = iDispMsg And Not eMsgXmpnExp
            rnTarget.Font.Bold = True
        Else
            Set rnCell = wsInst.Range("I_Xmpn_ID").Find(rnTarget.Value, , xlValues, xlWhole, xlByRows, xlNext)
            If rnCell Is Nothing Then
                LogError 2, rnTarget, "Be advised, RoHS Exemption '" & rnTarget.Value & "' is not typically used in Caterpillar applications. You may be contacted for additional information, or your part may be considered Non-Compliant.", (bEvent And iDispMsg And eMsgXmpnNIPL)
                iDispMsg = iDispMsg And Not eMsgXmpnNIPL
                rnTarget.Font.Bold = True
            End If
        End If
    End If
End Sub

Sub Btn_ImportXML()
On Error GoTo 0

Dim iSearch As Integer 'generic counter
Dim vPaths As Variant

Call ProtectSheets(False)
LogError -1 'clear error log

'clear data in form
Select Case MsgBox("Do you want to erase all existing data in this form before importing XML files?" & vbNewLine & "YES: erase all data." & vbNewLine & "NO: attempt to merge data.", vbYesNoCancel + vbQuestion + vbDefaultButton2, "Clear Form")
Case vbCancel
    GoTo Quit
Case vbYes
    Call ClearForm
End Select

'browse for files
Application.Cursor = xlDefault
vPaths = Application.GetOpenFilename("IPC-1752A files (*.xml; *.zip), *.xml; *.zip", , "Import IPC-1752A xml", "Import", True)
Application.Cursor = xlWait
If Not IsArray(vPaths) Then GoTo Quit

wsC.Range("C_RoHS_Subs", "C_SVHC_Subs").EntireColumn.Hidden = False
Call OpenFiles(vPaths)

'reset view
On Error Resume Next
wsC.Activate
wsC.Range("C_RNum").Rows(wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count).Activate
ActiveWindow.ScrollRow = 1
ActiveWindow.ScrollColumn = 1
wsD.Activate
wsD.Range("D_Lvl").Rows(wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count).Activate
ActiveWindow.ScrollRow = 1
ActiveWindow.ScrollColumn = 1
wsGen.Activate
On Error GoTo 0

Quit:
Call UpdateLock
'Call OnInput(Union(wsC.Range("C_RoHS").Rows(4), wsC.Range("C_SVHC").Rows(4)))
Call OnInput(wsC.Range("C_Head_Unit (C_RoHS,C_SVHC,C_PROP65)"))
If Err.Number <> 0 Then LogError 3, "Btn_ImportXML()", "Run time error: " & Err.Description & "."
Call ProtectSheets(True)
End Sub

Sub ClearForm()

'Excel variables
Dim iRow As Long 'row counter
Dim iCol As Integer 'column counter
Dim rnCell As Object 'Excel.Range 'object for any single cell

LogError 1, , "Removing all data in form."

'General
wsGen.Range("G_Form_Mode").Value = "Request/Reply"
wsGen.Range("G_Dec_Class").ClearContents 'Value = "Class C - Substance Category Level"
wsGen.Range("G_Req_ID").ClearContents
wsGen.Range("G_Req_Date").ClearContents
wsGen.Range("G_Req_By").ClearContents
wsGen.Range("G_Req_Lock").Value = False
wsGen.Range("G_Req_Co").ClearContents
wsGen.Range("G_Req_Name").ClearContents
wsGen.Range("G_Req_Title").ClearContents
wsGen.Range("G_Req_Phone").ClearContents
wsGen.Range("G_Req_Email").ClearContents
wsGen.Range("G_Sup_Date").ClearContents
wsGen.Range("G_Sup_Lock").Value = False
wsGen.Range("G_Sup_Co").ClearContents
wsGen.Range("G_Sup_CoID").ClearContents
wsGen.Range("G_Sup_Note").ClearContents
wsGen.Range("G_Auth_Name").ClearContents
wsGen.Range("G_Auth_Title").ClearContents
wsGen.Range("G_Auth_Phone").ClearContents
wsGen.Range("G_Auth_Email").ClearContents
wsGen.Range("G_Sup_Name").ClearContents
wsGen.Range("G_Sup_Title").ClearContents
wsGen.Range("G_Sup_Phone").ClearContents
wsGen.Range("G_Sup_Email").ClearContents
wsGen.Range("G_Dec_Acpt").ClearContents 'Value = "Not accepted"
wsGen.Range("G_Dec_Type").ClearContents 'Value = "Standard"

'Do While wsGen.Range("G_Regulations").Rows.Count < wsList.Range("L_Regulations").Rows.Count
'    wsGen.Range("G_Regulations").Rows(wsGen.Range("G_Regulations").Rows.Count).EntireRow.Insert
'Loop
'For iRow = 1 To wsList.Range("L_Regulations").Rows.Count
'    wsGen.Range("G_Regulations").Rows(iRow).Value = wsList.Range("L_Regulations").Rows(iRow).Value
'Next iRow

'ClassC
wsC.Name = "ClassA"
wsC.Range("C_RoHS:C_Prop65_Subs").EntireColumn.Hidden = False

iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count 'first data row
Set rnCell = wsC.Range("C_RNum", "C_Prop65_Subs").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious) 'find last row with data
If rnCell.Row < iRow Then 'no rows have data
    Set rnCell = wsC.Cells(iRow, 1)
End If
Range(wsC.Cells(iRow, 1), rnCell).EntireRow.Delete

wsC.Range("C_Rev,C_SupCoID:C_SName").EntireColumn.Hidden = True

For iCol = wsC.Range("C_PMass").Column To wsC.Range("C_SVHC_Subs").Column + wsC.Range("C_SVHC_Subs").Columns.Count - 1
    Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
    Case "Mass"
        wsC.Range("C_Head_Unit").Columns(iCol).Value = "g"
    Case "Max PPM"
        wsC.Range("C_Head_Unit").Columns(iCol).Value = "ppm"
    End Select
Next iCol
wsC.Range("C_Head_Unit C_RoHS").Value = wsList.Range("L_RoHS_List_Name").Rows(wsList.Range("L_RoHS_List_Name").Rows.Count).Value
wsC.Range("C_Head_Unit C_SVHC").Value = wsList.Range("L_SVHC_List_Name").Rows(wsList.Range("L_SVHC_List_Name").Rows.Count).Value
wsC.Range("C_Head_Unit C_XVII").Value = wsList.Range("L_XVII_List_Name").Rows(wsList.Range("L_XVII_List_Name").Rows.Count).Value
wsC.Range("C_Head_Unit C_Prop65").Value = wsList.Range("L_Prop65_List_Name").Rows(wsList.Range("L_Prop65_List_Name").Rows.Count).Value
Call OnInput(wsGen.Range("G_Regulations").Rows(1))

'ClassD
iRow = wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count
Set rnCell = wsD.Range("D_Lvl", "D_Note").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious)
If rnCell.Row < iRow Then
    Set rnCell = wsD.Cells(iRow, 1)
End If
Range(wsD.Cells(iRow, 1), rnCell).EntireRow.Delete
Call OnInput(Range(wsD.Range("D_Type").Rows(iRow), wsD.Range("D_Type").Rows(iRow + 20)))

End Sub

Sub OpenFiles(vPaths As Variant)
Dim vPath As Variant
Dim vZIPs As Variant
'Dim xmlDoc As MSXML2.DOMDocument60
'Dim oFS As New Scripting.FileSystemObject
Dim xmlDoc As Object
Dim oFS As Object


For Each vPath In vPaths
    Select Case LCase(Right(vPath, 3))
    Case "zip" 'Unzip file
        vZIPs = UnZip(vPath)
        Call OpenFiles(vZIPs)
        'clean up temp files
        Set oFS = CreateObject("Scripting.FileSystemObject")
        oFS.DeleteFolder (Left(vZIPs(0), InStr(Len(Environ("Temp")) + 2, vZIPs(0), "\") - 1))
        
    Case "xml" 'Open XML file
        LogError 1, , "Opening XML file: " & vPath
        'Set xmlDoc = New DOMDocument60
        Set xmlDoc = CreateObject("MSxml2.DOMDocument.6.0")
        xmlDoc.Load (vPath)
        
        If xmlDoc.parseError <> 0 Then
            LogError 3, xmlDoc.parseError.srcText, "XML error at line " & xmlDoc.parseError.Line & ": " & Application.WorksheetFunction.Clean(xmlDoc.parseError.reason)
            
        Else
            Select Case xmlDoc.DocumentElement.BaseName
            Case "MainDeclaration"
                Call ParseIPC(xmlDoc)
            Case "candidate-list", "candidate-list-of-svhc-for-authorisation", "restriction-list--annex-xvii-"
                If vbOK = MsgBox("XML file appears to contain list of REACH substances from ECHA." & vbNewLine & "Import missing substances to RAPID?", vbOKCancel + vbQuestion) Then
                    ''''link to find this file: http://echa.europa.eu/web/guest/candidate-list-table
                    Call ParseECHA(xmlDoc)
                End If
            Case "ruleset"
                If vbOK = MsgBox("XML file appears to be a TcSC regulation descriptor file." & vbNewLine & "Import missing substances to RAPID?", vbOKCancel + vbQuestion) Then
                    Call ParseDescriptor(xmlDoc)
                End If
            Case "SubstanceCategoryList"
                ''''???????
                If vbOK = MsgBox("XML file appears to contain a Substance Category List from IPC." & vbNewLine & "Import missing substances to RAPID?", vbOKCancel + vbQuestion) Then
                    Call ParseSubstCatList(xmlDoc)
                End If
            Case Else
                LogError 2, , "XML file format not recognized."
            End Select
        End If
        
    Case Else 'Skip file
        LogError 1, , "Ignoring unknown filetype: " & vPath
    End Select
Next vPath
End Sub

Sub ParseIPC(xmlDoc As Object, Optional bSilent As Boolean = True)
On Error GoTo 0

'Excel variables
Dim rnCell As Object 'Excel.Range 'object for any single cell
Dim iCol As Integer 'column counter
Dim iRow As Integer
Dim iRowC As Long
Dim iRowD As Long

Dim bMultSup As Boolean
bMultSup = False
Dim bImpReq As Boolean
Dim bImpSupC As Boolean
Dim bImpSupD As Boolean
Dim bQuickImp As Boolean
bQuickImp = wsList.Range("L_Quick_Import").Value


'XML variables - 1751
Dim elMainDec As Object 'MSXML2.IXMLDOMElement 'xml object for root element "MainDeclaration"
Const sNS As String = "http://webstds.ipc.org/175x/2.0" 'xml namespace
Dim elCo As Object 'MSXML2.IXMLDOMElement
Dim elCoID As Object 'MSXML2.IXMLDOMElement
'
Dim elProd As Object 'MSXML2.IXMLDOMElement 'xml object for any Product
Dim elPID As Object 'MSXML2.IXMLDOMElement 'xml object for any Product ID
Dim nlPID As Object 'MSXML2.IXMLDOMNodeList
Dim sPNum As String
Dim sPName As String
Dim elSubProd As Object 'MSXML2.IXMLDOMElement 'xml object for any SubProduct
Dim nlSubProd As Object 'MSXML2.IXMLDOMNodeList
Dim elSpID As Object 'MSXML2.IXMLDOMElement 'xml object for SubProduct ID
Dim iLvl As Integer 'bom level for SubProduct
Dim elMass As Object 'MSXML2.IXMLDOMElement 'xml object for mass of a Product, SubProd, Mat, or Substance
Dim fPMass As Double 'mass of any Product
Dim fSMass As Double 'mass of any Substance
Dim sUnit As String 'unit for any Mass value

'XML variables - 1752 class A
Dim elQueryList As Object 'MSXML2.IXMLDOMElement 'xml object for RoHS or REACH query
Dim nlQueryList As Object 'MSXML2.IXMLDOMNodeList
Dim elQuery As Object 'MSXML2.IXMLDOMElement 'xml object for query answer
Dim elXmpn As Object 'MSXML2.IXMLDOMElement 'xml object for RoHS exemption
Dim nlXmpn As Object 'MSXML2.IXMLDOMNodeList

'XML variables - 1752 class C & D
Dim elMat As Object 'MSXML2.IXMLDOMElement 'xml object for any Homogeneous Material in a Product or SubP
Dim nlMat As Object 'MSXML2.IXMLDOMNodeList
Dim elSubCat As Object 'MSXML2.IXMLDOMElement 'xml object for a Substance Category
Dim nlSubCat As Object 'MSXML2.IXMLDOMNodeList
Dim elSubst As Object 'MSXML2.IXMLDOMElement 'xml object for any Substance in a Homogeneous Material
Dim nlSubst As Object 'MSXML2.IXMLDOMNodeList
Dim elSubstID As Object 'MSXML2.IXMLDOMElement
Dim elConc As Object 'MSXML2.IXMLDOMElement 'xml object for Concentration of a Substance in a Homogeneous Material
Dim fPPM As Double

Dim nlTemp As Object 'MSXML2.IXMLDOMNodeList
Dim elTemp As Object 'MSXML2.IXMLDOMElement
Dim atTemp As Object 'MSXML2.IXMLDOMAttribute
Dim cmtTemp As Object 'MSXML2.IXMLDOMComment
'''

'Misc variables
Dim bError As Boolean 'generic error flag
Dim iSearch As Integer 'generic counter
Dim sWord As String 'generic string
Dim sID As String 'unique ID
Dim sReg As String 'regulation
Dim bRegs(0 To 4) As Boolean 'has each Reg been imported for at least one part (uses different index than other Regs arrays)

xmlDoc.setProperty "SelectionNamespaces", "xmlns:ipc='http://webstds.ipc.org/175x/2.0'"
Set elMainDec = xmlDoc.DocumentElement

'Check if file contains IPC declaration
If elMainDec.BaseName <> "MainDeclaration" Then
    LogError 3, , "XML error: File does not contain IPC-1752A declaration."
    GoTo Quit
End If
If elMainDec.NamespaceURI <> sNS Then
    LogError 3, , "XML error: File does not use IPC-1752A namespace."
    GoTo Quit
End If

'    'Remove blank attributes
'    Set nlTemp = xmlDoc.SelectNodes("//@*[.='']")
'    For Each atTemp In nlTemp
'        atTemp.ParentNode.RemoveChild atTemp
'    Next atTemp

'Check if Supplier Company IDs match
Set elCo = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:SupplyCompany")
If Not elCo Is Nothing Then
    Set elCoID = elCo.SelectSingleNode("ipc:CompanyID")
    If Not elCoID Is Nothing Then
        If wsGen.Range("G_Sup_CoID").Value = "" Then
            wsGen.Range("G_Sup_CoID").Value = elCoID.getAttribute("identity") & ""
            wsGen.Range("G_Sup_Co").Value = elCo.getAttribute("name") & ""
        ElseIf elCoID.getAttribute("identity") & "" = wsGen.Range("G_Sup_CoID").Value Then
            'do nothing
        ElseIf bSilent Then
            bMultSup = True
        ElseIf MsgBox("<CompanyID> in XML does not match [SupplierID] already in XLS." & vbNewLine & _
                "XLS: " & wsGen.Range("G_Sup_CoID").Value & " - " & wsGen.Range("G_Sup_Co").Value & vbNewLine & _
                "XML: " & elCoID.getAttribute("identity") & " - " & elCo.getAttribute("name") & vbNewLine & _
                "Continue importing XML file?", vbQuestion + vbYesNo) = vbYes Then
            bMultSup = True
        Else
            LogError 3, wsGen.Range("G_Sup_CoID"), "XML <Response><CompanyID identity=""" & elCoID.getAttribute("identity") & """> does not match Supplier [Company ID] in XLS."
            GoTo Quit
        End If
        If bMultSup = True Then
            wsC.Range("C_SupCoID", "C_SupCo").EntireColumn.Hidden = False
            Set rnCell = wsC.Range("C_RNum", "C_SName").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious)
            iRowC = rnCell.Row
            Do While iRowC >= wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count
                If wsC.Range("C_SupCoID").Rows(iRowC).Value = "" Then
                    wsC.Range("C_SupCoID").Rows(iRowC).Value = wsGen.Range("G_Sup_CoID").Value
                End If
                If wsC.Range("C_SupCo").Rows(iRowC).Value = "" Then
                    wsC.Range("C_SupCo").Rows(iRowC).Value = wsGen.Range("G_Sup_Co").Value
                End If
                iRowC = iRowC - 1
            Loop
            ''''''''''''''''''temporary code addition
            'wsC.ShowAllData
            wsC.Range("C_Head_Unit C_RNum:C_SVHC_Subs").AutoFilter 3, elCoID.getAttribute("identity")
'            If wsC.Range("C_SupCoID").Find(elCoID.getAttribute("identity"), , xlValues, xlWhole, xlByRows, xlPrevious) Is Nothing Then
'                LogError 1, "xml", "Supplier " & elCoID.getAttribute("identity") & " - " & elCo.getAttribute("name") & " not fund in XSL."
'            End If
            ''''''''''''''''''end temp
        End If
    End If
End If

Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/@mode")
If Not atTemp Is Nothing Then
    wsGen.Range("G_Form_Mode").Value = atTemp.NodeValue
    Call OnInput(wsGen.Range("G_Form_Mode"))
End If


'Request fields
If wsGen.Range("G_Req_Lock").Value = False Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/@fieldLock")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_Lock").Value = atTemp.NodeValue
        End If
    
    If wsGen.Range("G_Req_ID").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/@docID")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_ID").Value = atTemp.NodeValue
        End If
    End If
    
    If wsGen.Range("G_Req_Date").Value = "" Then 'may need to check if request dates match
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/@date")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_Date").Value = atTemp.NodeValue
        End If
    End If
    
    If wsGen.Range("G_Req_By").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/@respondByDate")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_By").Value = atTemp.NodeValue
        End If
        wsGen.Range("G_Req_By").EntireRow.Hidden = Not IsDate(wsGen.Range("G_Req_By").Value)
    End If
    
    
    If wsGen.Range("G_Req_Co").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/ipc:RequestCompany/@name")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_Co").Value = atTemp.NodeValue
        End If
    End If
    
    'Requester Contact
    If wsGen.Range("G_Req_Name").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/ipc:Contact/@name")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Req_Name").Value = atTemp.NodeValue
        End If
        
        If wsGen.Range("G_Req_Title").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/ipc:Contact/@title")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Req_Title").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Req_Phone").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/ipc:Contact/ipc:Phone/@number")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Req_Phone").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Req_Email").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Request/ipc:Contact/ipc:Email/@address")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Req_Email").Value = atTemp.NodeValue
            End If
        End If
    End If
    
    'check Request fields
    Call OnInput(wsGen.Range("G_Req_Co", "G_Req_Email"))
End If

'Response fields
If wsGen.Range("G_Sup_Lock").Value = False Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/@fieldLock")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Sup_Lock").Value = atTemp.NodeValue
        End If
    
    If wsGen.Range("G_Sup_Date").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/@date")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Sup_Date").Value = atTemp.NodeValue
        End If
    End If
    
    If wsGen.Range("G_Sup_Note").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/@comment")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Sup_Note").Value = atTemp.NodeValue
        End If
    End If
    
    'Supplier Authorizer
    If wsGen.Range("G_Auth_Name").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Authorizer/@name")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Auth_Name").Value = atTemp.NodeValue
        End If
        
        If wsGen.Range("G_Auth_Title").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Authorizer/@title")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Auth_Title").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Auth_Phone").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Authorizer/ipc:Phone/@number")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Auth_Phone").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Auth_Email").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Authorizer/ipc:Email/@address")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Auth_Email").Value = atTemp.NodeValue
            End If
        End If
    End If
    
    'Supplier Contact
    If wsGen.Range("G_Sup_Name").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Contact/@name")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Sup_Name").Value = atTemp.NodeValue
        End If
        
        If wsGen.Range("G_Sup_Title").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Contact/@title")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Sup_Title").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Sup_Phone").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Contact/ipc:Phone/@number")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Sup_Phone").Value = atTemp.NodeValue
            End If
        End If
        
        If wsGen.Range("G_Sup_Email").Value = "" Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Response/ipc:Contact/ipc:Email/@address")
            If Not atTemp Is Nothing Then
                wsGen.Range("G_Sup_Email").Value = atTemp.NodeValue
            End If
        End If
    End If
    
    'check Response fields
    Call OnInput(wsGen.Range("G_Sup_Date", "G_Sup_Email"))
    
    'Declaration fields
    If wsGen.Range("G_Dec_Acpt").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Declaration/@supplierAcceptance")
        If atTemp Is Nothing Then
            wsGen.Range("G_Dec_Acpt").Value = "Not accepted"
        Else
            If LCase(atTemp.NodeValue) = "true" Then
                wsGen.Range("G_Dec_Acpt").Value = "Accepted"
            Else
                wsGen.Range("G_Dec_Acpt").Value = "Not accepted"
            End If
        End If
        Call OnInput(wsGen.Range("G_Dec_Acpt"))
    End If
    
    If wsGen.Range("G_Dec_Type").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Declaration/@legalType")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Dec_Type").Value = atTemp.NodeValue
            Call OnInput(wsGen.Range("G_Dec_Type"))
        End If
    End If
    
    If wsGen.Range("G_Dec_Legal").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:BusinessInfo/ipc:Declaration/@legalDef")
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Dec_Type").Value = "Custom"
            wsGen.Range("G_Dec_Legal").Value = atTemp.NodeValue
'            Call OnInput(wsGen.Range("G_Dec_Type"))
        End If
    End If
    
    If wsGen.Range("G_Dec_Class").Value = "" Then
        Set atTemp = elMainDec.SelectSingleNode("ipc:Include/ipc:Sectional[@name='MaterialInfo']/ipc:SubSectional/@name[. != 'A']")
        If atTemp Is Nothing Then
            Set atTemp = elMainDec.SelectSingleNode("ipc:Include/ipc:Sectional[@name='MaterialInfo']/ipc:SubSectional/@name")
        End If
        If Not atTemp Is Nothing Then
            wsGen.Range("G_Dec_Class").Value = atTemp.NodeValue
            Call OnInput(wsGen.Range("G_Dec_Class")) 'moved to end
        End If
    End If
End If

Set nlPID = elMainDec.SelectNodes("ipc:Product/ipc:ProductID")
'--set units for class c here--
For Each elPID In nlPID
    bImpReq = True
    bImpSupC = True
    bImpSupD = True
    
    On Error Resume Next
    Application.StatusBar = "Importing part number " & sPNum
    On Error GoTo 0
    
    'XML - read part name and number
    sPNum = elPID.getAttribute("requesterItemNumber") & ""
'    If sPNum = "" Then sPNum = elPID.getAttribute("itemNumber") & ""
    sPName = elPID.getAttribute("requesterItemName") & ""
'    If sPName = "" Then sPName = elPID.getAttribute("itemName") & ""
    
    'ClassC - check if part number already exists
    Set rnCell = Nothing
    If wsC.Range("C_RNum").EntireColumn.Hidden = False Then
        Set rnCell = wsC.Range("C_RNum").Find(sPNum, , xlValues, xlWhole, xlByRows)
    End If
'    If rnCell Is Nothing And wsC.Range("C_SNum").EntireColumn.Hidden = False Then
'        Set rnCell = wsC.Range("C_SNum").Find(sPNum, , xlValues, xlWhole, xlByRows)
'    End If
    If Not rnCell Is Nothing Then 'existing part
        iRowC = rnCell.Row
        If wsGen.Range("G_Sup_Lock").Value Then
            bImpSupC = False
            LogError 3, , "Part number " & sPNum & " already exists in ClassC, and will not be updated."
        Else
            LogError 1, , "Part number " & sPNum & " already exists in ClassC."
        End If
    Else 'new part
            LogError 1, , "Part number " & sPNum & " not found in ClassC."
            iRowC = wsC.Range("C_RNum", "C_SVHC_Subs").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
            Do
                iRowC = iRowC + 1
            Loop Until wsC.Rows(iRowC).EntireRow.Hidden = False
            
            'ClassC - write part name and number
            If wsC.Range("C_RNum").EntireColumn.Hidden = False Then
                wsC.Range("C_RNum").Rows(iRowC).Value = sPNum
            End If
            If wsC.Range("C_RName").EntireColumn.Hidden = False Then
                wsC.Range("C_RName").Rows(iRowC).Value = sPName
            End If
            
            'ClassC - write supplier name and id
            If wsC.Range("C_SupCoID").EntireColumn.Hidden = False Or wsC.Range("C_SupCo").EntireColumn.Hidden = False Then
                wsC.Range("C_SupCoID").Rows(iRowC).Value = elCoID.getAttribute("identity")
                wsC.Range("C_SupCo").Rows(iRowC).Value = elCo.getAttribute("name")
            End If
            Call OnInput(wsC.Range("C_RNum").Rows(iRowC))
'        End If
    End If
    
    'ClassD - check if part number already exists
    iSearch = wsD.Range("D_Lvl", "D_Note").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
    Do While True
        'look for number
        Set rnCell = Range(wsD.Range("D_Num").Rows(1), wsD.Range("D_Num").Rows(iSearch)).Find(sPNum, , xlValues, xlWhole, xlByRows, xlPrevious)
        
        If rnCell Is Nothing Then 'new part
                iRowD = wsD.Range("D_Lvl", "D_Note").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1
                'ClassD - write part name and number
                wsD.Range("D_Lvl").Rows(iRowD).Value = 0
                If wsGen.Range("G_Form_Mode").Value = "Distribute" Then
                    wsD.Range("D_Type").Rows(iRowD).Value = "SupplierPart"
                Else
                    wsD.Range("D_Type").Rows(iRowD).Value = "CatPart"
                End If
                wsD.Range("D_Num").Rows(iRowD).Value = sPNum
                wsD.Range("D_Name").Rows(iRowD).Value = sPName
                sWord = elPID.getAttribute("version") & ""
                If sWord <> "" Then
                    wsD.Range("D_Qty").Rows(iRowD).NumberFormat = "@"
                    wsD.Range("D_Qty").Rows(iRowD).Value = sWord
                End If
'            End If
            Exit Do
            
        ElseIf wsD.Range("D_Type").Rows(rnCell.Row).Value = "CatPart" Then 'existing part
            iRowD = rnCell.Row
            bImpReq = False
            If wsGen.Range("G_Sup_Lock").Value Then
                bImpSupD = False
                LogError 3, , "Part number " & sPNum & " already exists in ClassD, and will not be updated."
            End If
            Exit Do
            
        Else 'number found but not a Part
            iSearch = rnCell.Row - 1 'keep looking
        End If
    Loop
    
    'XML - read part mass
    fPMass = 0
    Set elMass = elPID.SelectSingleNode("ipc:Amount")
    If Not elMass Is Nothing Then
        sUnit = elMass.getAttribute("UOM") & ""
        If bImpSupD Then 'write unit Class D
            wsD.Range("D_Unit").Rows(iRowD).Value = sUnit
        End If
        
        If IsNumeric(elMass.getAttribute("value")) Then
            fPMass = elMass.getAttribute("value")
            If bImpSupD Then 'write part mass Class D
                wsD.Range("D_Mass").Rows(iRowD).Value = fPMass
            End If
            
            'adjust value for units in xml
            Select Case sUnit '== REPLACE WITH Sub StdUnitMass() ==
            Case "g"
            Case "kg"
                fPMass = fPMass * 1000
            Case "mg"
                fPMass = fPMass / 1000
            Case Else
                LogError 2, , "XML <ProductID><Amount UOM= > for Product '" & sPNum & "' is not recognized."
            End Select
            
            If bImpSupC Then 'write part mass Class C
                'find UOM from xls in lookup table
                Set rnCell = wsList.Range("L_UOM").Find(wsC.Range("C_Head_Unit C_PMass").Value, , xlValues, xlWhole)
                If rnCell Is Nothing Then
                    LogError 3, wsC.Range("C_Head_Unit C_PMass"), "UOM not recognized."
                Else 'write mass in xls units
                    wsC.Range("C_PMass").Rows(iRowC).Value = fPMass / rnCell.Offset(0, 1).Value
                End If
            End If
            
        Else
            LogError 3, , "XML <ProductID><Amount value= > for Product '" & sPNum & "' must be a number."
        End If
    End If
    
    Set elProd = elPID.ParentNode
    If Not elProd Is Nothing Then
        If bImpSupC Then
            wsC.Range("C_PPer").Rows(iRowC).Value = elProd.getAttribute("unitType") & ""
            wsC.Range("C_Note").Rows(iRowC).Value = elProd.getAttribute("comment") & ""
        End If
        If bImpSupD Then
            wsD.Range("D_Xmpn").Rows(iRowD).Value = elProd.getAttribute("unitType") & ""
            wsD.Range("D_Note").Rows(iRowD).Value = elProd.getAttribute("comment") & ""
        End If
    End If
    
    If bImpReq Or bImpSupD Then
        Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
    End If
    
    'ClassD - delete part data
    If bImpSupD Then
        'check if xml contains Class D data
        Set elMat = elProd.SelectSingleNode(".//ipc:HomogeneousMaterial")
        If Not elMat Is Nothing Then
            'find next Part
            If wsGen.Range("G_Form_Mode").Value = "Distribute" Then
                sWord = "SupplierPart"
            Else
                sWord = "CatPart"
            End If
            Set rnCell = wsD.Range("D_Type").Find(sWord, wsD.Range("D_Type").Rows(iRowD), xlValues, xlWhole, xlByRows, xlNext)
            If rnCell.Row <= iRowD Then 'no next Part
                'find last row
                Set rnCell = wsD.Range("D_Lvl", "D_Note").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious)
                If rnCell.Row = iRowD Then 'Part is last row
                    Set rnCell = rnCell.Offset(1, 0) 'first blank row
                End If
            End If
            'don't delete Supplier or SupplierPart
            iSearch = iRowD + 1
            Do While wsD.Range("D_Type").Rows(iSearch).Value = "Supplier" Or wsD.Range("D_Type").Rows(iSearch).Value = "SupplierPart"
                iSearch = iSearch + 1
            Loop
            'delete iSearch through rnCell-1
            If rnCell.Row - 1 > iSearch Then
                Range(wsD.Cells(iSearch, 1), rnCell.Offset(-1, 0)).EntireRow.Delete
            End If
        End If
    End If
    
    'ClassD - write supplier name and id
    If bMultSup And bImpReq Then
        If wsD.Range("D_Type").Rows(iRowD + 1).Value <> "Supplier" Then
            wsD.Rows(iRowD + 1).Insert
        End If
        iRowD = iRowD + 1
        wsD.Range("D_Lvl").Rows(iRowD).Value = 0
        wsD.Range("D_Type").Rows(iRowD).Value = "Supplier"
        wsD.Range("D_Num").Rows(iRowD).Value = elCoID.getAttribute("identity")
        wsD.Range("D_Name").Rows(iRowD).Value = elCo.getAttribute("name")
        Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
    End If
    
    'ClassD - write supplier part
    If bImpReq And (elPID.getAttribute("itemNumber") <> sPNum Or elPID.getAttribute("itemName") <> sPName) And wsC.Range("C_SNum").EntireColumn.Hidden = False Then
        If wsD.Range("D_Type").Rows(iRowD + 1).Value <> "SupplierPart" Then
            wsD.Rows(iRowD + 1).Insert
        End If
        iRowD = iRowD + 1
        wsD.Range("D_Lvl").Rows(iRowD).Value = 0
        wsD.Range("D_Type").Rows(iRowD).Value = "SupplierPart"
        If elPID.getAttribute("itemNumber") & "" = "" Then
            wsD.Range("D_Num").Rows(iRowD).Value = elPID.getAttribute("requesterItemNumber")
        Else
            wsD.Range("D_Num").Rows(iRowD).Value = elPID.getAttribute("itemNumber")
        End If
        If elPID.getAttribute("itemName") & "" = "" Then
            wsD.Range("D_Name").Rows(iRowD).Value = elPID.getAttribute("requesterItemName")
        Else
            wsD.Range("D_Name").Rows(iRowD).Value = elPID.getAttribute("itemName")
        End If
        Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
    End If
    
    If bImpSupC Then
        'ClassC - write revision
        If elPID.getAttribute("version") & "" <> "" Then
            wsC.Range("C_Rev").EntireColumn.Hidden = False
            wsC.Range("C_Rev").Rows(iRowC).Value = elPID.getAttribute("version")
        End If
        
        'ClassC - write supplier part
        If wsC.Range("C_SNum").EntireColumn.Hidden = False And wsC.Range("C_SName").EntireColumn.Hidden = False Then
            If elPID.getAttribute("itemNumber") & "" <> "" Then
                wsC.Range("C_SNum").Rows(iRowC).Value = elPID.getAttribute("itemNumber")
            End If
            If elPID.getAttribute("itemName") & "" <> "" Then
                wsC.Range("C_SName").Rows(iRowC).Value = elPID.getAttribute("itemName")
            End If
        ElseIf elPID.getAttribute("itemNumber") & "" <> "" And elPID.getAttribute("itemNumber") & "" <> sPNum Then
            wsC.Range("C_SNum").EntireColumn.Hidden = False
            wsC.Range("C_SNum").Rows(iRowC).Value = elPID.getAttribute("itemNumber")
        End If
        
        
        'ClassC - Queries
        Set nlQueryList = elProd.SelectNodes("ipc:MaterialInfo/ipc:QueryList")
        For Each elQueryList In nlQueryList
            sWord = UCase(elQueryList.getAttribute("identity"))
            Select Case True
            Case sWord Like "ROHS*", sWord Like "EUROHS*"
                bRegs(0) = True
                sWord = Right(sWord, 4)
                If sWord = "0615" Then sWord = "1506" 'in case file has ListID with MM and YY reversed
                sWord = "*" & sWord
                Set rnCell = wsList.Range("L_RoHS_List_ID").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
                If Not rnCell Is Nothing Then
                    wsC.Range("C_Head_Unit C_RoHS").Value = rnCell.Offset(0, 1)
                End If
                Set elQuery = elQueryList.SelectSingleNode("ipc:Query[@response = 'true']")
                If Not elQuery Is Nothing Then
                    wsC.Range("C_RoHS").Rows(iRowC).Value = elQuery.getAttribute("statement") & ""
                    Call OnInput(wsC.Range("C_RoHS").Rows(iRowC))
                End If
            Case sWord Like "*REACH*ARTICLE67*"
                bRegs(2) = True
                Set elQuery = elQueryList.SelectSingleNode("ipc:Query")
                If Not elQuery Is Nothing Then
                    Select Case LCase(elQuery.getAttribute("response"))
                    Case "true"
                        wsC.Range("C_XVII").Rows(iRowC).Value = wsList.Range("L_XVII_Dec").Cells(1, 1).Value
                    Case "false"
                        wsC.Range("C_XVII").Rows(iRowC).Value = wsList.Range("L_XVII_Dec").Cells(2, 1).Value
'                    Case Else
'                        wsC.Range("C_XVII").Rows(iRowC).Value = wsList.Range("L_XVII_Dec").Cells(3, 1).Value
                    End Select
                    Call OnInput(wsC.Range("C_XVII").Rows(iRowC))
                End If
            Case sWord Like "REACH*", sWord Like "EUREACH*"
                bRegs(1) = True
                sWord = Right(sWord, 4)
                sWord = "*" & sWord
                Set rnCell = wsList.Range("L_SVHC_List_ID").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
                If Not rnCell Is Nothing Then
                    wsC.Range("C_Head_Unit C_SVHC").Value = rnCell.Offset(0, 1)
                End If
                Set elQuery = elQueryList.SelectSingleNode("ipc:Query")
                If Not elQuery Is Nothing Then
                    Select Case LCase(elQuery.getAttribute("response"))
                    Case "true"
                        wsC.Range("C_SVHC").Rows(iRowC).Value = wsList.Range("L_SVHC_Dec").Cells(1, 1).Value
                    Case "false"
                        Set elTemp = elProd.SelectSingleNode("ipc:MaterialInfo/SUD")
                        If elTemp Is Nothing Then
                            Set elTemp = elQuery.SelectSingleNode("SUD")
                        End If
                        If elTemp Is Nothing Then
                            wsC.Range("C_SVHC").Rows(iRowC).Value = wsList.Range("L_SVHC_Dec").Cells(3, 1).Value
                        Else
                            sWord = elTemp.getAttribute("instruction")
                            If sWord Like "*no specific*instruction*" Then
                                wsC.Range("C_SVHC").Rows(iRowC).Value = wsList.Range("L_SVHC_Dec").Cells(2, 1).Value
                            Else
                                wsC.Range("C_SVHC").Rows(iRowC).Value = wsList.Range("L_SVHC_Dec").Cells(3, 1).Value
                                wsC.Range("C_SUI").Rows(iRowC).Value = sWord
                            End If
                        End If
                    End Select
                    Call OnInput(wsC.Range("C_SVHC").Rows(iRowC))
                End If
            Case sWord Like "PROP65*", sWord Like "CALPROP65*"
                bRegs(4) = True 'use index 4 instead of 3 to make room from XVII Targeted
                sWord = Right(sWord, 4)
                sWord = "*" & sWord
                Set rnCell = wsList.Range("L_PROP65_List_ID").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
                If Not rnCell Is Nothing Then
                    wsC.Range("C_Head_Unit C_PROP65").Value = rnCell.Offset(0, 1)
                End If
                Set elQuery = elQueryList.SelectSingleNode("ipc:Query[@response = 'true']")
                If Not elQuery Is Nothing Then
                    wsC.Range("C_Prop65").Rows(iRowC).Value = elQuery.getAttribute("statement") & ""
                    Call OnInput(wsC.Range("C_PROP65").Rows(iRowC))
                End If
            End Select
        Next elQueryList
        
        'ClassC - RoHS exemptions
        Set nlXmpn = elProd.SelectNodes("ipc:MaterialInfo/ipc:ExemptionList/ipc:Exemption")
        If nlXmpn.Length > wsC.Range("C_Xmpn").Columns.Count Then 'insert columns
            For iSearch = 1 To nlXmpn.Length - wsC.Range("C_Xmpn").Columns.Count
                wsC.Range("C_Xmpn").Columns(wsC.Range("C_Xmpn").Columns.Count).Insert
            Next iSearch
        End If
        If nlXmpn.Length > 0 Then
            wsC.Range("C_Xmpn").Rows(iRowC).ClearContents
        End If
        iSearch = 1
        For Each elXmpn In nlXmpn 'add exemptions
            sWord = ""
            Set atTemp = elXmpn.ParentNode.SelectSingleNode("ipc:ExemptionListID/@identity")
            If Not atTemp Is Nothing Then sWord = atTemp.NodeValue
            If InStr(1, sWord, "ANNEX_IV") Then
                wsC.Range("C_Xmpn").Cells(iRowC, iSearch).Value = "IV-" & elXmpn.getAttribute("identity")
            Else
                wsC.Range("C_Xmpn").Cells(iRowC, iSearch).Value = elXmpn.getAttribute("identity")
            End If
            iSearch = iSearch + 1
        Next elXmpn
        
        'ClassC - SubstanceCategories
        Set nlSubCat = elProd.SelectNodes("ipc:MaterialInfo/ipc:SubstanceCategoryList/ipc:SubstanceCategory|ipc:MaterialInfo/ipc:NotToLoad/ipc:SubstanceCategoryList/ipc:SubstanceCategory")
        For Each elSubCat In nlSubCat
            'get regulation  'added by ryan r on 6/11/2015
            sReg = UCase(elSubCat.ParentNode.SelectSingleNode("ipc:SubstanceCategoryListID/@identity").nodeTypedValue)
            If sReg Like "*REACH*ARTICLE67*" Then
                sReg = "XVII"
                If bRegs(2) = False Then
                    bRegs(3) = True 'use index 3 instead of 2 for Targeted
                End If
            ElseIf sReg Like "*REACH*" Then
                sReg = "SVHC"
                bRegs(1) = True
            ElseIf sReg Like "*ROHS*" Then
                sReg = "RoHS"
                bRegs(0) = True
            ElseIf sReg Like "*PROP65*" Then
                sReg = "Prop65"
                bRegs(4) = True
            End If
            
            sID = ""
            'check if xml uses new SubstCatIDs
            Set elTemp = elSubCat.SelectSingleNode("ipc:SubstanceCategoryID[@authority='CAT']")
            If Not elTemp Is Nothing Then
                sID = elTemp.getAttribute("identity")
                
            Else 'otherwise look up ID in wsList
                'get SubstCat name
                sWord = elSubCat.getAttribute("name") & ""
                If Len(sWord) > 255 Then
                    sWord = Left(sWord, 254) & "*"
                End If
                sWord = Replace(sWord, "[", "[[]")
                sWord = Replace(sWord, "]", "[]]")
                sWord = Replace(sWord, "[[[]]", "[[]") 'undo double replacement
                
                'search in wsList
                bError = False
                For iCol = 1 To wsList.Range("L_Subst_names").Columns.Count
                    iRow = 2
                    Do Until wsList.Range("L_Subst_spec").Rows(iRow).Value = ""
                        If wsList.Range("L_Subst_spec").Rows(iRow).Value = sReg Then
                            bError = True 'specified regulation found
                            If wsList.Range("L_Subst_names").Cells(iRow, iCol).Value Like sWord Then
                                sID = wsList.Range("L_Subst_ID").Rows(iRow).Value
                                Exit For 'stop searching when SubstCat is found
                            End If
                        ElseIf bError = True Then 'go to next column at end of specified regulation, even if there are more rows
                            Exit Do
                        End If
                        iRow = iRow + 1
                    Loop
                Next iCol
            End If 'done looking up ID in wsList
            
            If sID <> "" Then 'valid SubstCat
                'search for SubstCat in wsC
                iCol = 0
                For iSearch = wsC.Range("C_" & sReg & "_Subs").Column To wsC.Range("C_" & sReg & "_Subs").Column + wsC.Range("C_" & sReg & "_Subs").Columns.Count - 1
                    If wsC.Range("C_Head_ID").Columns(iSearch).Value = sID Then
                        iCol = iSearch
                        Exit For
                    End If
                Next iSearch
                'import mass/conc/exposure
                If iCol <> 0 Then
                    For iCol = iCol To iCol + 1
                        Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
                        Case "Mass"
                            fSMass = 0
                            Set elMass = elSubCat.SelectSingleNode("ipc:Amount")
                            If Not elMass Is Nothing Then
                                If IsNumeric(elMass.getAttribute("value")) Then
                                    fSMass = elMass.getAttribute("value")
                                    'adjust value for units in xml
                                    Select Case elMass.getAttribute("UOM") '== REPLACE WITH Sub StdUnitMass() ==
                                    Case "kg"
                                        fSMass = fSMass * 1000
                                    Case "mg"
                                        fSMass = fSMass / 1000
                                    Case "massPercent"
                                        fSMass = fSMass * fPMass / 100
                                    End Select
                                    
                                    'find UOM from xls in lookup table
                                    Set rnCell = wsList.Range("L_UOM").Find(wsC.Range("C_Head_Unit").Columns(iCol).Value, , xlValues, xlWhole)
                                    If rnCell Is Nothing Then
                                        LogError 3, wsC.Range("C_Head_Unit").Columns(iCol), "UOM not recognized."
                                    Else 'write mass, in xls units
                                        wsC.Cells(iRowC, iCol).Value = (fSMass / rnCell.Offset(0, 1).Value) / (fPMass ^ rnCell.Offset(0, 2).Value)
                                    End If
                                End If
                            Else
                                Set elTemp = elSubCat.SelectSingleNode("ipc:Threshold")
                                If Not elTemp Is Nothing Then
                                    If LCase(elTemp.getAttribute("overThreshold")) = "true" Then
                                        wsC.Cells(iRowC, iCol).Value = ">"
                                    ElseIf LCase(elTemp.getAttribute("overThreshold")) = "false" Then
                                        wsC.Cells(iRowC, iCol).Value = "<"
                                    End If
                                End If
                            End If
                        Case "Max PPM"
                            fPPM = 0
                            Set elConc = elSubCat.SelectSingleNode("ipc:Concentration")
                            If Not elConc Is Nothing Then
                                If IsNumeric(elConc.getAttribute("value")) Then
                                    fPPM = elConc.getAttribute("value")
                                    'adjust value for units in xml
                                    Set nlTemp = elConc.SelectNodes("comment()")
                                    bError = True 'reset error flag
                                    For Each cmtTemp In nlTemp
                                        If InStr(1, UCase(cmtTemp.NodeValue), "PPM") Then bError = False
                                    Next cmtTemp
                                    If bError Then fPPM = fPPM * 10000
                                    'adjust value for units in xls
                                    Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
                                    Case "%"
                                        fPPM = fPPM / 10000
                                    End Select
                                    wsC.Cells(iRowC, iCol).Value = fPPM
                                End If
                            Else
                                Set elTemp = elSubCat.SelectSingleNode("ipc:Threshold")
                                If Not elTemp Is Nothing Then
                                    If LCase(elTemp.getAttribute("overThreshold")) = "true" Then
                                        wsC.Cells(iRowC, iCol).Value = ">"
                                    ElseIf LCase(elTemp.getAttribute("overThreshold")) = "false" Then
                                        wsC.Cells(iRowC, iCol).Value = "<"
                                    End If
                                End If
                            End If
                        Case "Exposure"
                                Set elTemp = elSubCat.SelectSingleNode("ipc:Threshold")
                                If Not elTemp Is Nothing Then
                                    If LCase(elTemp.getAttribute("overThreshold")) = "true" Then
                                        wsC.Cells(iRowC, iCol).Value = True
                                    ElseIf LCase(elTemp.getAttribute("overThreshold")) = "false" Then
                                        wsC.Cells(iRowC, iCol).Value = False
                                    End If
                                End If
                        Case "Restriction Entry - Declaration"
                                Set elTemp = elSubCat.SelectSingleNode("ipc:Threshold")
                                If Not elTemp Is Nothing Then
                                    If LCase(elTemp.getAttribute("overThreshold")) = "false" Then
                                        wsC.Cells(iRowC, iCol).Value = wsList.Range("L_XVII_S_Dec_6").Rows(1).Value
                                    ElseIf LCase(elTemp.getAttribute("overThreshold")) = "true" Then
                                        If elSubCat.SelectNodes("ipc:SubstanceCatExemptionList/ipc:Exemption").Length = 0 Then
                                            wsC.Cells(iRowC, iCol).Value = wsList.Range("L_XVII_S_Dec_6").Rows(2).Value
                                        Else
                                            wsC.Cells(iRowC, iCol).Value = wsList.Range("L_XVII_S_Dec_6").Rows(3).Value
                                        End If
                                    Else
                                    End If
                                End If
                        End Select
                    Next iCol 'last SubstCat column
                End If 'done importing mass/conc/exposure
            End If 'end valid SubstCat
        Next elSubCat
'        Call OnInput(wsC.Range("C_RNum", "C_SVHC_Subs").Rows(iRowC))
    End If
    
    If bImpSupD Then
        'ClassD - SubProducts
        Set nlSubProd = elProd.SelectNodes(".|.//ipc:SubProduct") 'self or SubProd decendants
        For Each elSubProd In nlSubProd
            'find SubProd level
            iLvl = 0
            Set elTemp = elSubProd
            Do Until elTemp.BaseName = "Product"
                iLvl = iLvl + 1
                Set elTemp = elTemp.ParentNode
            Loop
            
            If iLvl > 0 Then
                iRowD = iRowD + 1
                wsD.Rows(iRowD).Insert
                wsD.Range("D_Lvl").Rows(iRowD).Value = iLvl
                wsD.Range("D_Type").Rows(iRowD).Value = "SubPart"
                wsD.Range("D_Qty").Rows(iRowD).Value = elSubProd.getAttribute("numberOfInstances")
                wsD.Range("D_Xmpn").Rows(iRowD).Value = elSubProd.getAttribute("unitType")
                wsD.Range("D_Note").Rows(iRowD).Value = elSubProd.getAttribute("comment")
                Set elSpID = elSubProd.SelectSingleNode("ipc:ProductID")
                If Not elSpID Is Nothing Then
                    wsD.Range("D_Num").Rows(iRowD).Value = elSpID.getAttribute("itemNumber")
                    wsD.Range("D_Name").Rows(iRowD).Value = elSpID.getAttribute("itemName")
                    Set elMass = elSpID.SelectSingleNode("ipc:Amount")
                    If Not elMass Is Nothing Then
                        wsD.Range("D_Mass").Rows(iRowD).Value = elMass.getAttribute("value")
                        wsD.Range("D_Unit").Rows(iRowD).Value = elMass.getAttribute("UOM")
                    End If
                End If
            End If
            Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
            
            'ClassD - Materials
            Set nlMat = elSubProd.SelectNodes("ipc:MaterialInfo/ipc:HomogeneousMaterialList/ipc:HomogeneousMaterial")
            For Each elMat In nlMat
                iRowD = iRowD + 1
                wsD.Rows(iRowD).Insert
                wsD.Range("D_Lvl").Rows(iRowD).Value = iLvl + 1
                wsD.Range("D_Type").Rows(iRowD).Value = "Material"
                wsD.Range("D_Name").Rows(iRowD).Value = elMat.getAttribute("name")
                wsD.Range("D_Note").Rows(iRowD).Value = elMat.getAttribute("comment")
                Set elMass = elMat.SelectSingleNode("ipc:Amount")
                If Not elMass Is Nothing Then
                    wsD.Range("D_Mass").Rows(iRowD).Value = elMass.getAttribute("value")
                    wsD.Range("D_Unit").Rows(iRowD).Value = elMass.getAttribute("UOM")
                End If
                Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
                
                'ClassD - Substances
                Set nlSubst = elMat.SelectNodes("ipc:SubstanceCategoryList/ipc:SubstanceCategory/ipc:Substance")
                For Each elSubst In nlSubst
                    iRowD = iRowD + 1
                    wsD.Rows(iRowD).Insert
                    wsD.Range("D_Lvl").Rows(iRowD).Value = iLvl + 2
                    wsD.Range("D_Type").Rows(iRowD).Value = "Substance"
                    wsD.Range("D_Name").Rows(iRowD).Value = elSubst.getAttribute("name")
                    wsD.Range("D_Note").Rows(iRowD).Value = elSubst.getAttribute("comment")
                    Set elSubstID = elSubst.SelectSingleNode("ipc:SubstanceID[@authority = 'CAS' or @authority = 'cas']")
                    If elSubstID Is Nothing Then
                        Set elSubstID = elSubst.SelectSingleNode("ipc:SubstanceID[@authority = 'EC' or @authority = 'ec']")
                    End If
                    If elSubstID Is Nothing Then
                        Set elSubstID = elSubst.SelectSingleNode("ipc:SubstanceID[@authority = 'IMDS' or @authority = 'imds']")
                    End If
                    If elSubstID Is Nothing Then
                        Set elSubstID = elSubst.SelectSingleNode("ipc:SubstanceID")
                    End If
                    If Not elSubstID Is Nothing Then
                            wsD.Range("D_Num").Rows(iRowD).Value = elSubstID.getAttribute("identity")
                    End If
                    Set elConc = elSubst.SelectSingleNode("ipc:Concentration")
                    If Not elConc Is Nothing Then
                        wsD.Range("D_Mass").Rows(iRowD).Value = elConc.getAttribute("value")
                        wsD.Range("D_Unit").Rows(iRowD).Value = "%"
                        'adjust value for units in xml
                        bError = False 'reset error flag
                        Set nlTemp = elConc.SelectNodes("comment()")
                        For Each cmtTemp In nlTemp
                            If InStr(1, UCase(cmtTemp.NodeValue), "PPM") Then bError = True
                        Next cmtTemp
                        If bError Then
                            wsD.Range("D_Mass").Rows(iRowD).Value = elConc.getAttribute("value") / 10000
                        End If
                    End If
                    Set elMass = elSubst.SelectSingleNode("ipc:Amount")
                    If Not elMass Is Nothing Then
                        wsD.Range("D_Mass").Rows(iRowD).Value = elMass.getAttribute("value")
                        wsD.Range("D_Unit").Rows(iRowD).Value = elMass.getAttribute("UOM")
                    End If
                    Set elXmpn = elSubst.SelectSingleNode("ipc:SubstanceExemption")
                    If Not elXmpn Is Nothing Then
                        wsD.Range("D_Xmpn").Rows(iRowD).Value = elXmpn.getAttribute("identity")
                    End If
                    Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
                    
                    'ClassD - SUD
                    Set elTemp = elSubst.SelectSingleNode("SUD")
                    If Not elTemp Is Nothing Then
                        iRowD = iRowD + 1
                        wsD.Rows(iRowD).Insert
                        wsD.Range("D_Lvl").Rows(iRowD).Value = iLvl + 2
                        wsD.Range("D_Type").Rows(iRowD).Value = "SafeUse"
                        sWord = elTemp.getAttribute("instruction")
                        If sWord Like "*no specific*instruction*" Then
                            wsD.Range("D_Num").Rows(iRowD).Value = wsList.Range("L_SUI").Cells(1, 1).Value
                            wsD.Range("D_Name").Rows(iRowD).Value = wsList.Range("L_SUI_text").Value
                        Else
                            wsD.Range("D_Num").Rows(iRowD).Value = wsList.Range("L_SUI").Cells(2, 1).Value
                            wsD.Range("D_Name").Rows(iRowD).Value = sWord
                        End If
                        Call OnInput(wsD.Range("D_Lvl", "D_Note").Rows(iRowD))
                    End If

                Next elSubst
            Next elMat
        Next elSubProd
    End If
    
Next elPID

'preserve current Regulation config
For Each rnCell In wsGen.Range("G_Regulations")
    If rnCell.Value Like "*RoHS*" Then
        bRegs(0) = True
    ElseIf rnCell.Value Like "*SVHC*" Then
        bRegs(1) = True
    ElseIf rnCell.Value Like "*XVII*target*" Then
        bRegs(3) = True
    ElseIf rnCell.Value Like "*XVII*" Then
        bRegs(2) = True
    ElseIf rnCell.Value Like "*Prop*65*" Then
        bRegs(4) = True
    End If
Next rnCell
'reset Reg config
wsGen.Range("G_Regulations").ClearContents
iRow = 1
For iSearch = 0 To 4
    If bRegs(iSearch) = True Then
        wsGen.Range("G_Regulations").Cells(iRow, 1).Value = wsList.Range("L_Regulations").Cells(iSearch + 1, 1).Value
        iRow = iRow + 1
    End If
Next iSearch

Call OnInput(wsGen.Range("G_Dec_Class"))
'Call OnInput(wsC.Range("C_Head_Unit C_RoHS"))
'Call OnInput(wsC.Range("C_Head_Unit C_SVHC"))
Call OnInput(wsC.Range("C_Head_Unit (C_RoHS,C_SVHC,C_XVII,C_Prop65,C_RoHS_Subs:C_Prop65_Subs)"))
Call OnInput(wsC.Range("C_RNum:C_SName").Rows(wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count))

LogError 1, , "IPC-1752A data imported for " & nlPID.Length & " Part(s)."
wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter
wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter
'wsC.ShowAllData ''''''''''''''''''temporary code addition

Quit:
If Err.Number <> 0 Then LogError 3, "ParseIPC()", "Run time error: " & Err.Description & "."
End Sub


Sub Btn_ExportXML()
On Error GoTo 0

Dim iStart As Single

Dim oFD As FileDialog
Dim xmlDoc As Object 'MSXML2.DOMDocument60 'xml document object
Dim sGenPath As String 'path to xml file
Dim sUnqPath As String
Dim iSearch As Integer 'generic counter
Dim sWord As String 'generic string


Call ProtectSheets(False)
LogError -1 'clear error log

If wsGen.Range("G_Sup_Lock").Value = True Then
    sWord = ThisWorkbook.Name
    If sWord Like "*.xl??" Then
        sWord = Left(sWord, Len(sWord) - 5)
    ElseIf sWord Like "*.xl?" Then
        sWord = Left(sWord, Len(sWord) - 4)
    End If 'else RAPID not saved and no file ext
    sWord = Replace(sWord, ".", "_")
    
    If ThisWorkbook.path Like "?:\*" Then 'drive letter path
        ChDrive Left(ThisWorkbook.path, 1)
        ChDir ThisWorkbook.path
        sGenPath = Application.GetSaveAsFilename(sWord, "IPC-1751A files (*.xml),*.xml", 1, , "Export")
        If sGenPath = "False" Then GoTo Quit
    Else 'UNC path
        Set oFD = Application.FileDialog(msoFileDialogSaveAs)
        oFD.InitialFileName = ThisWorkbook.path & "\" & sWord & ".xml"
        If oFD.Show = False Then GoTo Quit
        sGenPath = oFD.SelectedItems(1)
    End If
    sGenPath = Left(sGenPath, InStrRev(sGenPath, ".") - 1)

'    sGenPath = ahtCommonFileOpenSave( _
'                OpenFile:=False, _
'                DialogTitle:="Export XML", _
'                FILTER:="IPC1752A Files (*.xml)" & vbNullChar & "*.xml" & vbNullChar, _
'                FilterIndex:=1, _
'                InitialDir:=ThisWorkbook.path, _
'                fileName:=sWord, _
'                DefaultExt:=".xml")
'    If sGenPath = "" Then GoTo Quit

    For Each xmlDoc In ConstructIPC
        If xmlDoc.SelectNodes("ipc:MainDeclaration/ipc:Product").Length = 0 Then
            LogError 2, , "There is no data to export to XML file.", True
        Else
            sWord = xmlDoc.SelectSingleNode("ipc:MainDeclaration/ipc:BusinessInfo/ipc:Response/ipc:SupplyCompany/ipc:CompanyID/@identity").NodeValue
            If sGenPath Like "*" & sWord & "*" Then
                sUnqPath = sGenPath
            Else
                sUnqPath = sGenPath & " " & sWord
            End If
            sUnqPath = sUnqPath & ".xml"
            LogError 1, , "Exporting data to XML file: " & sUnqPath
            xmlDoc.Save sUnqPath
    
            If Now() - FileDateTime(sUnqPath) < TimeValue("0:0:01") Then
                LogError 1, , "XML file saved successfully."
            End If
        End If
    Next xmlDoc
    
Else
    iStart = Timer
    Call ConstructIPC
    If LogError(3) + LogError(2) > 0 Then LogError 'goto ErrorLog
    Debug.Print Timer - iStart
End If

Quit:
If Err.Number <> 0 Then LogError 3, "Btn_ExportXML()", "Run time error: " & Err.Description & "."
Call ProtectSheets(True)
End Sub

Function ConstructIPC() As Object

'Excel variables
Dim iRow As Long 'row counter
Dim iCol As Integer 'column counter
Dim iEnd As Long 'loop termination condition
Dim rnCell As Object 'Excel.Range 'object for any single cell
Dim rnCell2 As Object 'Excel.Range

'XML variables - 1751
Dim sXpath As String
Dim xmlDoc As Object 'MSXML2.DOMDocument60 'xml document object
Dim xmlDocs() As Object 'MSXML2.DOMDocument60
ReDim xmlDocs(0)
Dim cXmlDocs As Object
Dim elMainDec As Object 'MSXML2.IXMLDOMElement 'xml object for root element "MainDeclaration"
Const sNS As String = "http://webstds.ipc.org/175x/2.0" 'xml namespace
Dim elBusInfo As Object 'MSXML2.IXMLDOMElement
Dim elReq As Object 'MSXML2.IXMLDOMElement 'xml object for Request
Dim elResp As Object 'MSXML2.IXMLDOMElement 'xml object for Response
Dim elCo As Object 'MSXML2.IXMLDOMElement 'xml object for any Company
Dim sCoIDs() As String
ReDim sCoIDs(0)
Dim elName As Object 'MSXML2.IXMLDOMElement 'xml object for any contact person
Dim elPhone As Object 'MSXML2.IXMLDOMElement
Dim elEmail As Object 'MSXML2.IXMLDOMElement
Dim elInc As Object 'MSXML2.IXMLDOMElement
Dim sClass As String 'declaration class

Dim elProd As Object 'MSXML2.IXMLDOMElement 'xml object for any Product
Dim elSubProds() As Object 'MSXML2.IXMLDOMElement
Dim iLvl As Integer 'index into SubProduct array
Dim iLvlSP As Integer 'index for previous Prod/SubProd
Dim elPID As Object 'MSXML2.IXMLDOMElement 'xml object for any Product ID
Dim elMass As Object 'MSXML2.IXMLDOMElement 'xml object for mass of a Product, SubProd, Mat, or Substance
Dim fMass() As Double 'Mass array by level
Dim fTMass() As Double 'running total of Masses by level
Dim sUnit As String 'unit for any Mass value
Dim fQty As Double 'quantity of SubProducts in next level

'XML variables - 1752 class A
Dim elMatInfo As Object 'MSXML2.IXMLDOMElement
Dim elQueryList As Object 'MSXML2.IXMLDOMElement 'xml object for any list of queries
Dim elQueryListTemps(0 To 3) As Object 'MSXML2.IXMLDOMElement 'xml object for each list of queries
Dim elQuery As Object 'MSXML2.IXMLDOMElement 'xml object for query answer
'Dim sList As String
Dim iReg As Integer 'counter/array index
Dim sRegs(0 To 3) As String
sRegs(0) = "ROHS"
sRegs(1) = "SVHC"
sRegs(2) = "XVII"
sRegs(3) = "PROP65"
Dim dRegs(0 To 3) As Date 'date of selected version of each regulation
Dim iDecs(0 To 3) As Integer 'selected declaration code for each regulation
Dim bObs As Boolean 'inicates if part is declared obsolete or unknown
'Dim elXmpnListIII As Object 'MSXML2.IXMLDOMElement 'xml object for list of RoHS exemptions
'Dim elXmpnListIV As Object 'MSXML2.IXMLDOMElement 'xml object for list of RoHS exemptions
Dim elXmpnLists(0 To 1) 'xml object for each RoHS exemption list
Dim elXmpn As Object 'MSXML2.IXMLDOMElement 'xml object for RoHS exemption
'Dim iRoHS As Integer
Dim sXmpn() As String
ReDim sXmpn(0)
Dim vXmpns As Variant
Dim iRowX As Long
Dim bNoXmpnError As Boolean
Dim bXmpnMaxThreshError As Boolean
Dim iXmpnMaxThreshErrors() As Long 'Excel.Range

'XML variables - 1752 class C & D
Dim elHML As Object 'MSXML2.IXMLDOMElement 'xml object for the HomogeneousMaterialList
Dim elMat As Object 'MSXML2.IXMLDOMElement 'xml object for any Homogeneous Material in a Product or SubP
Dim elSubCatList As Object 'MSXML2.IXMLDOMElement 'xml object for any list of Substance Categories
Dim elSubCatLists(0 To 3) As Object 'MSXML2.IXMLDOMElement 'xml object for each list of Substance Categories
Dim elSubCatListTemps(0 To 3) As Object 'MSXML2.IXMLDOMElement 'xml object for each list of Substance Categories
Dim bSubCats(0 To 3) As Boolean 'indicates if substance categories need to be exported for each regulation
Dim elSubCat As Object 'MSXML2.IXMLDOMElement 'xml object for Substance Category
Dim cElSubCat As Collection
Dim elSubCatTemp(0 To 3) As Object 'MSXML2.IXMLDOMElement 'xml object for template Substance Category
Dim elSubst As Object 'MSXML2.IXMLDOMElement 'xml object for any Substance in a Homogeneous Material
Dim elConc As Object 'MSXML2.IXMLDOMElement 'xml object for Concentration of a Substance in a Homogeneous Material
Dim fPPM As Double
Dim fAvgPPM As Double
Dim elThresh As Object 'MSXML2.IXMLDOMElement
Dim fThresh As Double
Dim iThresh As Integer 'over threshold flag for any substance
Dim bThresh As Boolean 'over threshold flag for any substance
Dim bThreshs(0 To 3) 'over threshold flag for each regulation

Dim elID As Object 'MSXML2.IXMLDOMElement
Dim nlTemp As Object 'MSXML2.IXMLDOMNodeList
Dim nlTemp2 As Object 'MSXML2.IXMLDOMNodeList
Dim nlTemp3 As Object 'MSXML2.IXMLDOMNodeList
Dim elTemp As Object 'MSXML2.IXMLDOMElement
Dim elTemp2 As Object 'MSXML2.IXMLDOMElement
Dim elTemp3 As Object 'MSXML2.IXMLDOMElement
'''

'Misc variables
Dim sWord As String
Dim bError As Boolean 'generic error flag
'Dim bError2 As Boolean
Dim iSearch As Integer 'generic counter
Dim iCount As Integer 'generic counter
Dim oRegEx As Object
Set oRegEx = CreateObject("VBScript.RegExp")

LogError 1, , "Verifying data in form."

'create xml file
Set xmlDoc = CreateObject("MSXML2.DOMDocument.6.0")
Set xmlDocs(0) = xmlDoc
Set cXmlDocs = New Collection
xmlDoc.setProperty "SelectionNamespaces", "xmlns:ipc='" & sNS & "'"
xmlDoc.appendChild xmlDoc.createProcessingInstruction("xml", "version=""1.0"" encoding=""UTF-8""")
xmlDoc.appendChild xmlDoc.createComment("This file was created by 'RAPID " & wsGen.Range("G_Version").Value & "' on " & Date)

'MainDeclaration
Set elMainDec = xmlDoc.createNode(NODE_ELEMENT, "MainDeclaration", sNS)
xmlDoc.appendChild elMainDec
elMainDec.setAttribute "version", "2.0"

'MainDeclaration/BusinessInfo
Set elBusInfo = xmlDoc.createNode(NODE_ELEMENT, "BusinessInfo", sNS)
elMainDec.appendChild elBusInfo
elBusInfo.setAttribute "mode", wsGen.Range("G_Form_Mode").Value

'MainDeclaration/BusinessInfo/Request
If wsGen.Range("G_Form_Mode") = "Request/Reply" Then
    Set elReq = xmlDoc.createNode(NODE_ELEMENT, "Request", sNS)
    elBusInfo.appendChild elReq
    elReq.setAttribute "docID", wsGen.Range("G_Req_ID").Value
    elReq.setAttribute "date", Format(wsGen.Range("G_Req_Date").Value, "yyyy-mm-dd")
    elReq.setAttribute "respondByDate", Format(wsGen.Range("G_Req_By").Value, "yyyy-mm-dd")
'    elReq.setAttribute "internalSupplierID", wsGen.Range("G_Sup_CoID").Value
    elReq.setAttribute "fieldLock", IIf(wsGen.Range("G_Req_Lock").Value, "true", "false")
    
    'MainDeclaration/BusinessInfo/Request/RequestCompany
    Set elCo = xmlDoc.createNode(NODE_ELEMENT, "RequestCompany", sNS)
    elReq.appendChild elCo
    elCo.setAttribute "name", wsGen.Range("G_Req_Co").Value
    
    Set elID = xmlDoc.createNode(NODE_ELEMENT, "CompanyID", sNS)
    elCo.appendChild elID
    elID.setAttribute "identity", "CAT"
    elID.setAttribute "authority", "CAT"
    Set elID = Nothing
    
    'MainDeclaration/BusinessInfo/Request/Contact
    Set elName = xmlDoc.createNode(NODE_ELEMENT, "Contact", sNS)
    elReq.appendChild elName
    elName.setAttribute "name", wsGen.Range("G_Req_Name").Value
    If wsGen.Range("G_Req_Title").Value <> "" Then
        elName.setAttribute "title", wsGen.Range("G_Req_Title").Value
    End If
    
    Set elPhone = xmlDoc.createNode(NODE_ELEMENT, "Phone", sNS)
    elName.appendChild elPhone
    elPhone.setAttribute "number", wsGen.Range("G_Req_Phone").Value
    
    Set elEmail = xmlDoc.createNode(NODE_ELEMENT, "Email", sNS)
    elName.appendChild elEmail
    elEmail.setAttribute "address", wsGen.Range("G_Req_Email").Value
    
End If

'MainDeclaration/BusinessInfo/Response
Set elResp = xmlDoc.createNode(NODE_ELEMENT, "Response", sNS)
elBusInfo.appendChild elResp
Call OnInput(wsGen.Range("G_Sup_Date"))
elResp.setAttribute "date", Format(wsGen.Range("G_Sup_Date").Value, "yyyy-mm-dd")
elResp.setAttribute "fieldLock", IIf(wsGen.Range("G_Sup_Lock").Value, "true", "false")
If wsGen.Range("G_Sup_Note").Value <> "" Then
    elResp.setAttribute "comment", wsGen.Range("G_Sup_Note").Value
End If

'MainDeclaration/BusinessInfo/Response/SupplyCompany
Set elCo = xmlDoc.createNode(NODE_ELEMENT, "SupplyCompany", sNS)
elResp.appendChild elCo
If wsGen.Range("G_Sup_Co").Value = "" Then
    LogError 3, wsGen.Range("G_Sup_Co"), "[Supplier Company] can not be blank."
Else
    elCo.setAttribute "name", wsGen.Range("G_Sup_Co").Value
End If

'MainDeclaration/BusinessInfo/Response/SupplyCompany/CompanyID
Set elID = xmlDoc.createNode(NODE_ELEMENT, "CompanyID", sNS)
elCo.appendChild elID
If wsGen.Range("G_Sup_CoID").Value = "" Then
    LogError 3, wsGen.Range("G_Sup_CoID"), "[Supplier Company ID] can not be blank."
    cXmlDocs.Add xmlDoc, "-"
Else
    elID.setAttribute "identity", wsGen.Range("G_Sup_CoID").Value
    sCoIDs(0) = wsGen.Range("G_Sup_CoID").Value
    cXmlDocs.Add xmlDoc, wsGen.Range("G_Sup_CoID").Value
End If
Set elID = Nothing

'MainDeclaration/BusinessInfo/Response/Authorizer
If wsGen.Range("G_Auth_Name").Value = "" Then
    LogError 3, wsGen.Range("G_Auth_Name"), "[Authorizer Name] can not be blank."
Else
    Call OnInput(wsGen.Range("G_Auth_Name"))
    Set elName = xmlDoc.createNode(NODE_ELEMENT, "Authorizer", sNS)
    elResp.appendChild elName
    elName.setAttribute "name", wsGen.Range("G_Auth_Name").Value
    
    If wsGen.Range("G_Auth_Title").Value = "" Then
        LogError 2, wsGen.Range("G_Auth_Title"), "[Authorizer Title] is blank."
    Else
        elName.setAttribute "title", wsGen.Range("G_Auth_Title").Value
    End If
    
    If wsGen.Range("G_Auth_Phone").Value = "" Then
        LogError 3, wsGen.Range("G_Auth_Phone"), "[Authorizer Phone] can not be blank."
    Else
        Set elPhone = xmlDoc.createNode(NODE_ELEMENT, "Phone", sNS)
        elName.appendChild elPhone
        elPhone.setAttribute "number", wsGen.Range("G_Auth_Phone").Value
    End If
    
    If wsGen.Range("G_Auth_Email").Value = "" Then
        LogError 3, wsGen.Range("G_Auth_Email"), "[Authorizer Email] can not be blank."
    Else
        Call OnInput(wsGen.Range("G_Auth_Email"))
        Set elEmail = xmlDoc.createNode(NODE_ELEMENT, "Email", sNS)
        elName.appendChild elEmail
        elEmail.setAttribute "address", wsGen.Range("G_Auth_Email").Value
    End If
End If

'MainDeclaration/BusinessInfo/Response/Contact
If wsGen.Range("G_Sup_Name").Value = "" Then
    LogError 2, wsGen.Range("G_Sup_Name"), "[Supplier Contact] is blank."
Else
    Call OnInput(wsGen.Range("G_Sup_Name"))
    Set elName = xmlDoc.createNode(NODE_ELEMENT, "Contact", sNS)
    elResp.appendChild elName
    elName.setAttribute "name", wsGen.Range("G_Sup_Name").Value
    
    If wsGen.Range("G_Sup_Title").Value = "" Then
        LogError 2, wsGen.Range("G_Sup_Title"), "[Supplier Contact Title] is blank."
    Else
        elName.setAttribute "title", wsGen.Range("G_Sup_Title").Value
    End If
    
    If wsGen.Range("G_Sup_Phone").Value = "" Then
        LogError 3, wsGen.Range("G_Sup_Phone"), "[Supplier Contact Phone] can not be blank."
    Else
        Set elPhone = xmlDoc.createNode(NODE_ELEMENT, "Phone", sNS)
        elName.appendChild elPhone
        elPhone.setAttribute "number", wsGen.Range("G_Sup_Phone").Value
    End If
    
    If wsGen.Range("G_Sup_Email").Value = "" Then
        LogError 3, wsGen.Range("G_Sup_Email"), "[Supplier Contact Email] can not be blank."
    Else
        Call OnInput(wsGen.Range("G_Sup_Email"))
        Set elEmail = xmlDoc.createNode(NODE_ELEMENT, "Email", sNS)
        elName.appendChild elEmail
        elEmail.setAttribute "address", wsGen.Range("G_Sup_Email").Value
    End If
End If

'MainDeclaration/BusinessInfo/Declaration
Set elTemp = xmlDoc.createNode(NODE_ELEMENT, "Declaration", sNS)
elBusInfo.appendChild elTemp
elTemp.setAttribute "supplierAcceptance", IIf(wsGen.Range("G_Dec_Acpt").Value = "Accepted", "true", "false")
elTemp.setAttribute "legalType", wsGen.Range("G_Dec_Type").Value
elTemp.setAttribute "legalDef", wsGen.Range("G_Dec_Legal").Value
If wsGen.Range("G_Dec_Acpt").Value <> "Accepted" Then
    LogError 3, wsGen.Range("G_Dec_Acpt"), "Supplier must accept [Legal Declaration]."
End If
Set elTemp = Nothing

'MainDeclaration/Include
Set elInc = xmlDoc.createNode(NODE_ELEMENT, "Include", sNS)
elMainDec.appendChild elInc

'MainDeclaration/Include/Sectional
Set elTemp2 = xmlDoc.createNode(NODE_ELEMENT, "Sectional", sNS)
elInc.appendChild elTemp2
elTemp2.setAttribute "name", "MaterialInfo"
Set elTemp = Nothing

sClass = Mid(wsGen.Range("G_Dec_Class").Value, 7, 1)
Select Case sClass
Case "A", "C" 'class A or C
    If AllColumnsHidden(wsC.Range("C_ROHS,C_SVHC,C_XVII,C_PROP65")) = False Then
        'MainDeclaration/Include/Sectional/SubSectional
        Set elTemp3 = xmlDoc.createNode(NODE_ELEMENT, "SubSectional", sNS)
        elTemp2.appendChild elTemp3
        elTemp3.setAttribute "name", "A"
    End If
    
    If sClass = "C" Then
        If AllColumnsHidden(wsC.Range("C_ROHS_Subs,C_SVHC_Subs,C_XVII_Subs,C_PROP65_Subs")) = False Then
            'MainDeclaration/Include/Sectional/SubSectional
            Set elTemp3 = xmlDoc.createNode(NODE_ELEMENT, "SubSectional", sNS)
            elTemp2.appendChild elTemp3
            elTemp3.setAttribute "name", "C"
        End If
    End If
    
    Set elTemp2 = Nothing
    Set elTemp3 = Nothing
    
    '--setup templates for all Query and Substance Category Lists --
    For iReg = 0 To 3
        'MainDeclaration/Product/MaterialInfo/QueryList
        Set elQueryListTemps(iReg) = xmlDoc.createNode(NODE_ELEMENT, "QueryList", sNS)
        
        'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList
        Set elSubCatListTemps(iReg) = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryList", sNS)
        
        'lookup ListID
        Set rnCell = wsList.Range("L_" & sRegs(iReg) & "_List_Name").Find(wsC.Range("C_Head_Unit C_" & sRegs(iReg)).Value, , xlValues, xlWhole, xlByRows, xlNext)
        If rnCell Is Nothing Then 'list version not recognized
            If iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count Then 'only write error for first row
                LogError 3, wsC.Range("C_Head_Unit C_" & sRegs(iReg)), "Version of [" & sRegs(iReg) & " list] '" & wsC.Range("C_Head_Unit C_" & sRegs(iReg)).Value & "' is not recognized."
            End If
            dRegs(iReg) = #1/1/1900#
        Else
            If rnCell.Row <> wsList.Range("L_" & sRegs(iReg) & "_List_Name").Row + wsList.Range("L_" & sRegs(iReg) & "_List_Name").Rows.Count - 1 Then 'list version not latest
                If iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count Then 'only write warning for first row
                    LogError 2, wsC.Range("C_Head_Unit C_" & sRegs(iReg)), "Selected [" & sRegs(iReg) & " List] '" & wsC.Range("C_Head_Unit C_" & sRegs(iReg)).Value & "' is out of date."
                End If
            End If
            'MainDeclaration/Product/MaterialInfo/QueryList
            elQueryListTemps(iReg).setAttribute "identity", rnCell.Offset(0, -1).Value
            'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategoryListID
            Set elID = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryListID", sNS)
            elSubCatListTemps(iReg).appendChild elID
            elID.setAttribute "identity", rnCell.Offset(0, -1).Value
            Select Case iReg
            Case 0, 1
                elID.setAttribute "authority", "IPC"
            Case 2, 3
                elID.setAttribute "authority", "CAT"
            End Select
            Set elID = Nothing
            'get date from ListID
            dRegs(iReg) = rnCell.Offset(0, 1).Value
        End If
    Next iReg 'done setting up Query and SubstCat List templates
    
    
    'loop through all rows with part number
    For iRow = wsC.Range("C_Headings").Row + wsC.Range("C_Headings").Rows.Count To wsC.Range("C_RNum", "C_SName").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
        
        'reset flags and counters
        ReDim fMass(0)
        ReDim fTMass(0)
        Set cElSubCat = New Collection
        Set elSubCatLists(0) = Nothing
        Set elSubCatLists(1) = Nothing
        Set elSubCatLists(2) = Nothing
        Set elSubCatLists(3) = Nothing
        iDecs(0) = 0
        iDecs(1) = 0
        iDecs(2) = 0
        iDecs(3) = 0
        bObs = False
        
        
        'read selected Declaration for each Regulation
        For iReg = 0 To 3
            If wsC.Range("C_" & sRegs(iReg)).EntireColumn.Hidden = False Then
                Call OnInput(wsC.Range("C_" & sRegs(iReg)).Rows(iRow))
                iDecs(iReg) = Val(Left(wsC.Range("C_" & sRegs(iReg)).Rows(iRow).Value, 1)) 'read selected declaration
            Else
                iDecs(iReg) = -1
            End If
        Next iReg
        If iDecs(2) = -1 Then 'Targeted
            For iSearch = 1 To wsC.Range("C_XVII_Subs").Columns.Count
                If wsC.Range("C_XVII_Subs").Columns(iSearch).EntireColumn.Hidden = False Then
                    iCount = Val(Left(wsC.Range("C_XVII_Subs").Cells(iRow, iSearch).Value, 1))
                    If iCount > 4 Then
                        iDecs(2) = iCount
                    End If
                End If
            Next iSearch
        End If
        'check for obsolete/unkown part
        If WorksheetFunction.Max(iDecs) > 4 Then
            bObs = True
        End If
        
        

        'check for blank cells
        If bObs = False Then 'don't check obsolete or unknown parts
            For iCol = 1 To wsC.Range("C_Prop65_Subs").Column + wsC.Range("C_Prop65_Subs").Columns.Count - 1
                iSearch = 3 'default error level is Error
                'skip columns if they dont need to be validated in this configuration
                If wsGen.Range("G_Form_Mode").Value = "Distribute" Then 'dont check these cols at all
                    If iCol = wsC.Range("C_RNum").Column Then iCol = iCol + wsC.Range("C_RNum").Columns.Count
                    If iCol = wsC.Range("C_RName").Column Then iCol = iCol + wsC.Range("C_RName").Columns.Count
                End If
                'lower error level to Warning for optional columns
                If iCol = wsC.Range("C_Rev").Column Then iSearch = 2 'warning only
                If iCol = wsC.Range("C_SupCoID").Column Then iSearch = 2 'warning only
                If iCol = wsC.Range("C_SupCo").Column Then iSearch = 2 'warning only
                If wsGen.Range("G_Form_Mode").Value <> "Distribute" Then
                    If iCol = wsC.Range("C_SNum").Column Then iSearch = 2 'warning only
                    If iCol = wsC.Range("C_SName").Column Then iSearch = 2 'warning only
                End If
                'skip columns that can be blank or are validated elsewhere
                If iCol = wsC.Range("C_PMass").Column Then iCol = iCol + wsC.Range("C_PMass").Columns.Count 'checked later
                If iCol = wsC.Range("C_Note").Column Then iCol = iCol + wsC.Range("C_Note").Columns.Count 'dont check
                If iCol = wsC.Range("C_Xmpn").Column Then iCol = iCol + wsC.Range("C_Xmpn").Columns.Count 'checked later
                If iCol = wsC.Range("C_SUI").Column Then iCol = iCol + wsC.Range("C_SUI").Columns.Count 'checked later
                'actually do the check for blank, but only if column is visible
                If wsC.Cells(iRow, iCol).Value = "" And wsC.Columns(iCol).EntireColumn.Hidden = False Then
                    LogError iSearch, wsC.Cells(iRow, iCol), "[" & wsC.Range("C_Head_Lbl").Columns(iCol).Value & "] is blank."
                End If
            Next iCol
        End If
        
        'check for alternate Supplier ID
        If wsC.Range("C_SupCoID").EntireColumn.Hidden = False Then
            If wsC.Range("C_SupCoID").Rows(iRow).Value = "" Then
                Set xmlDoc = cXmlDocs(1) 'use original xml doc
'                Set xmlDoc = xmlDocs(0) 'use original xml doc
            Else
                On Error Resume Next
                Set xmlDoc = cXmlDocs(wsC.Range("C_SupCoID").Rows(iRow).Value)
                If Err.Number <> 0 Then
                    On Error GoTo 0
                    Set xmlDoc = CreateObject("MSxml2.DOMDocument.6.0")
                    cXmlDocs.Add xmlDoc, wsC.Range("C_SupCoID").Rows(iRow).Value
                    xmlDoc.setProperty "SelectionNamespaces", "xmlns:ipc='" & sNS & "'"
                    xmlDoc.appendChild xmlDoc.createProcessingInstruction("xml", "version=""1.0"" encoding=""UTF-8""")
                    xmlDoc.appendChild xmlDoc.createComment("This file was created by 'RAPID " & wsGen.Range("G_Version").Value & "' on " & Date)
                    xmlDoc.appendChild cXmlDocs(1).DocumentElement.CloneNode(False)
                    xmlDoc.DocumentElement.appendChild elBusInfo.CloneNode(True)
                    xmlDoc.DocumentElement.appendChild elInc.CloneNode(True)
                    Set elTemp = xmlDoc.SelectSingleNode("ipc:MainDeclaration/ipc:BusinessInfo/ipc:Response/ipc:SupplyCompany")
                    If Not elTemp Is Nothing Then
                        If wsC.Range("C_SupCo").Rows(iRow).Value <> "" And wsC.Range("C_SupCo").EntireColumn.Hidden = False Then
                            elTemp.setAttribute "name", wsC.Range("C_SupCo").Rows(iRow).Value
                        End If
                        Set elTemp2 = elTemp.SelectSingleNode("ipc:CompanyID")
                        If Not elTemp2 Is Nothing Then
                            elTemp2.setAttribute "identity", wsC.Range("C_SupCoID").Rows(iRow).Value
                        End If
                    End If
                End If
                On Error GoTo 0
            End If
        End If
        
        'MainDeclaration/Product
        Set elProd = xmlDoc.createNode(NODE_ELEMENT, "Product", sNS)
        xmlDoc.DocumentElement.appendChild elProd

        If wsC.Range("C_PPer").EntireColumn.Hidden = False Then
            Call OnInput(wsC.Range("C_PPer").Rows(iRow))
            elProd.setAttribute "unitType", wsC.Range("C_PPer").Rows(iRow).Value
        Else
            elProd.setAttribute "unitType", "Each"
        End If
        If wsC.Range("C_Note").Rows(iRow).Value <> "" Then
            elProd.setAttribute "comment", wsC.Range("C_Note").Rows(iRow).Value
        End If
        
        'MainDeclaration/Product/ProductID
        Set elPID = xmlDoc.createNode(NODE_ELEMENT, "ProductID", sNS)
        elProd.appendChild elPID
        If wsC.Range("C_RNum").EntireColumn.Hidden = False Then
            If Len(wsC.Range("C_RNum").Rows(iRow).Value) > 0 Then
                elPID.setAttribute "requesterItemNumber", wsC.Range("C_RNum").Rows(iRow).Value
            End If
        End If
        If wsC.Range("C_RName").EntireColumn.Hidden = False Then
            If Len(wsC.Range("C_RName").Rows(iRow).Value) > 0 Then
                elPID.setAttribute "requesterItemName", wsC.Range("C_RName").Rows(iRow).Value
            End If
        End If
        If wsC.Range("C_SNum").EntireColumn.Hidden = False Then
            If Len(wsC.Range("C_SNum").Rows(iRow).Value) > 0 Then
                elPID.setAttribute "itemNumber", wsC.Range("C_SNum").Rows(iRow).Value
            End If
        End If
        If wsC.Range("C_SName").EntireColumn.Hidden = False Then
            If Len(wsC.Range("C_SName").Rows(iRow).Value) > 0 Then
                elPID.setAttribute "itemName", wsC.Range("C_SName").Rows(iRow).Value
            End If
        End If
        If wsC.Range("C_Rev").EntireColumn.Hidden = False Then
            If Len(wsC.Range("C_Rev").Rows(iRow).Value) > 0 Then
                elPID.setAttribute "version", wsC.Range("C_Rev").Rows(iRow).Value
            End If
        End If
        
        'MainDeclaration/Product/ProductID/Amount
        If wsC.Range("C_PMass").EntireColumn.Hidden = False Then
            bError = False
            fMass(0) = 0
            
            If wsC.Range("C_PMass").Rows(iRow).Value = "" Then
                If bObs = False Then bError = True 'Error if not Obsolete or Unknown
            ElseIf IsNumeric(wsC.Range("C_PMass").Rows(iRow).Value) And wsC.Range("C_PMass").Rows(iRow).Value > 0 Then
                fMass(0) = wsC.Range("C_PMass").Rows(iRow).Value
                sUnit = wsC.Range("C_Head_Unit C_PMass").Value
                If sUnit <> "mg" And sUnit <> "g" And sUnit <> "kg" Then
                    Call StdUnitMass(fMass, sUnit)
                End If
                Set elMass = xmlDoc.createNode(NODE_ELEMENT, "Amount", sNS)
                elPID.appendChild elMass
                elMass.setAttribute "value", fMass(0)
                elMass.setAttribute "UOM", sUnit
                Call StdUnitMass(fMass, sUnit)
            Else
                bError = True 'zero mass
            End If
            
            If bError Then
                LogError 3, wsC.Range("C_PMass").Rows(iRow), "[Part Mass] must be a number greater than '0'."
            End If
        Else
            fMass(0) = 0
        End If
        
        'MainDeclaration/Product/MaterialInfo
        Set elMatInfo = xmlDoc.createNode(NODE_ELEMENT, "MaterialInfo", sNS)
        elProd.appendChild elMatInfo
        
        '--copy Query Lists and add Queries--
        For iReg = 0 To 3
            If iDecs(iReg) > 0 Then
                'MainDeclaration/Product/MaterialInfo/QueryList
                Set elQueryList = elQueryListTemps(iReg).CloneNode(True)
                elMatInfo.appendChild elQueryList
                'MainDeclaration/Product/MaterialInfo/QueryList/Query
                For iSearch = 1 To wsList.Range("L_" & sRegs(iReg) & "_Query").Rows.Count
                    If wsList.Range("L_" & sRegs(iReg) & "_Query").Rows(iSearch).Value <> "" Then
                        Set elQuery = xmlDoc.createNode(NODE_ELEMENT, "Query", sNS)
                        elQueryList.appendChild elQuery
                        elQuery.setAttribute "response", IIf(iSearch = iDecs(iReg), "true", "false") 'assumes dec=1 -> true for single query regs
                        elQuery.setAttribute "statement", wsList.Range("L_" & sRegs(iReg) & "_Query").Rows(iSearch).Value
                    End If
                Next iSearch
            
                Select Case iReg 'regulation specific additions
                Case 1 'SVHC
                    'MainDeclaration/Product/MaterialInfo/SUD
                    If iDecs(1) <> 1 Then
                        Set elTemp = xmlDoc.createNode(NODE_ELEMENT, "SUD", "")
                        elMatInfo.appendChild elTemp
                        If iDecs(1) = 2 Then 'NoSpecific
                            elTemp.setAttribute "type", wsList.Range("L_SUI").Rows(1).Value
                            elTemp.setAttribute "instruction", wsList.Range("L_SUI_text").Value
                        ElseIf iDecs(1) = 3 Then 'Custom
                            elTemp.setAttribute "type", wsList.Range("L_SUI").Rows(2).Value
                            If wsC.Range("C_SUI").Rows(iRow).Value = "" Then
                                LogError 3, wsC.Range("C_SUI").Rows(iRow), "REACH [Safe Use Instruction] can't be blank when [Article 33 Declaration] is set to '3...'"
                            Else
                                elTemp.setAttribute "instruction", wsC.Range("C_SUI").Rows(iRow).Value
                            End If
                        End If
                    End If
                    
                Case 0 'ROHS
                    'RoHS Exemptions
                    Select Case iDecs(0)
                    Case 3, 4
                        Call OnInput(wsC.Range("C_Xmpn").Rows(iRow))
                        'load exemption array
                        If iDecs(0) = 3 Then
                            ReDim sXmpn(1)
                            sXmpn(1) = "7(b)"
                        Else
                            ReDim sXmpn(0)
                        End If
                        For iCol = 1 To wsC.Range("C_Xmpn").Columns.Count
                            If wsC.Range("C_Xmpn").Cells(iRow, iCol).Value <> "" Then
                                ReDim Preserve sXmpn(UBound(sXmpn) + 1)
                                sXmpn(UBound(sXmpn)) = wsC.Range("C_Xmpn").Cells(iRow, iCol).Value
                            End If
                        Next iCol
                        sXmpn = SortRemDup(sXmpn)
    '                    'experiment: test reading range directly to array
    '                    vXmpns = wsC.Range("C_Xmpn").Rows(iRow).Value
    '                    If iDecs(0) = 3 Then
    '                        ReDim Preserve vXmpns(1 To 1, 1 To UBound(vXmpns, 2) + 1)
    '                        vXmpns(1, UBound(vXmpns, 2)) = "7(b)"
    '                    End If
    '                    vXmpns = vXmpns(1)
    '                    vXmpns = SortRemDup(vXmpns)
                        
                        'check for status exempt but no exemptions
                        If UBound(sXmpn) < 1 Then
                            LogError 3, wsC.Range("C_Xmpn").Cells(iRow, 1), "At least one [RoHS Exemption] is required when [RoHS Compliance Declaration] is set to '" & iDecs(0) & "...'"
                        End If
                        
                        'setup Exemption Lists
                        For iSearch = 0 To 1
                            'MainDeclaration/Product/MaterialInfo/ExemptionList
                            Set elXmpnLists(iSearch) = xmlDoc.createNode(NODE_ELEMENT, "ExemptionList", sNS)
                            
                            'MainDeclaration/Product/MaterialInfo/ExemptionList/ExemptionListID
                            Set elID = xmlDoc.createNode(NODE_ELEMENT, "ExemptionListID", sNS)
                            elXmpnLists(iSearch).appendChild elID
                            elID.setAttribute "authority", "IPC"
                            If iSearch = 0 Then
                                elID.setAttribute "identity", wsList.Range("L_Xmpn_List_III").Value
                            ElseIf iSearch = 1 Then
                                elID.setAttribute "identity", wsList.Range("L_Xmpn_List_IV").Value
                            End If
                        Next iSearch
                        Set elID = Nothing
                                            
                        'MainDeclaration/Product/MaterialInfo/ExemptionList/Exemption
                        For iSearch = 1 To UBound(sXmpn)
                            Set rnCell = wsList.Range("L_Xmpn_ID").Find(sXmpn(iSearch), , xlValues, xlWhole, xlByRows, xlNext)
                            If rnCell Is Nothing Then 'exemptions validated by OnInput
                            Else
                                Set elXmpn = xmlDoc.createNode(NODE_ELEMENT, "Exemption", sNS)
                                If Left(sXmpn(iSearch), 2) = "IV" Then
                                    elXmpnLists(1).appendChild elXmpn
                                    elXmpn.setAttribute "identity", Mid(sXmpn(iSearch), 4)
                                Else
                                    elXmpnLists(0).appendChild elXmpn
                                    elXmpn.setAttribute "identity", sXmpn(iSearch)
                                End If
                                elXmpn.setAttribute "description", wsList.Range("L_Xmpn_desc").Rows(rnCell.Row).Value
                            End If
                        Next iSearch
                        
                        'append lists if Xmpn present
                        For iSearch = 0 To 1
                            If elXmpnLists(iSearch).ChildNodes.Length > 1 Then
                                elMatInfo.appendChild elXmpnLists(iSearch)
                            End If
                        Next iSearch
                        
                    Case Else 'not 3 or 4
                        'check for exemptions with status not exempt
                        For Each rnCell In wsC.Range("C_Xmpn").Rows(iRow).Cells
                            If rnCell.Value <> "" Then
                                LogError 3, rnCell, "[RoHS Exemption] must be blank when [RoHS Compliance Declaration] is set to '" & iDecs(0) & "...'"
                            End If
                        Next rnCell
                        
                        ReDim sXmpn(0) 'clear exemption array from last product
                    End Select
                End Select 'end reg specific
            End If 'done exporting query list for this reg
        Next iReg 'done exporting all query lists
        
        
        'class C
        If sClass = "C" And bObs = False Then 'skip rest of row if part is obsolete or unknown
            
            'copy Substance Category List from template for each regulation
            For iReg = 0 To 3
                If AllColumnsHidden(wsC.Range("C_" & sRegs(iReg) & "_subs")) = True Then
                    bSubCats(iReg) = False
                ElseIf iDecs(iReg) = 0 Then
                    'skip regulation with no declaration
                    bSubCats(iReg) = False
                Else
                    bSubCats(iReg) = True
                    'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList
                    Set elSubCatLists(iReg) = elSubCatListTemps(iReg).CloneNode(True)
                    elMatInfo.appendChild elSubCatLists(iReg)
                    
                    'create a template Substance Category for each regulation
                    'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory
                    Set elSubCatTemp(iReg) = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategory", sNS)
                    'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/SubstanceCategoryID
                    Set elID = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryID", sNS)
                    elSubCatTemp(iReg).appendChild elID
                    elID.setAttribute "authority", "CAT"
                    'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Threshold
                    Set elThresh = xmlDoc.createNode(NODE_ELEMENT, "Threshold", sNS)
                    elSubCatTemp(iReg).appendChild elThresh
                    elThresh.setAttribute "overThreshold", "false"
                    'read default mass & ppm from 'all other'
                    For iCol = wsC.Range("C_" & sRegs(iReg) & "_Other").Column To _
                               wsC.Range("C_" & sRegs(iReg) & "_Other").Column + wsC.Range("C_" & sRegs(iReg) & "_Other").Columns.Count - 1
                        Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
                        Case "Mass"
                            'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Amount
                            Set elMass = xmlDoc.createNode(NODE_ELEMENT, "Amount", sNS)
                            elSubCatTemp(iReg).appendChild elMass
                            elMass.setAttribute "value", wsC.Cells(iRow, iCol).Value
                            sUnit = wsC.Range("C_Head_Unit").Columns(iCol).Value
                            If sUnit <> "mg" And sUnit <> "g" And sUnit <> "kg" Then
                                LogError 3, wsC.Range("C_Head_Unit").Columns(iCol), "Mass Unit for 'All Other substances' must be 'g', 'mg', or 'kg'."
                            End If
                            elMass.setAttribute "UOM", sUnit
                        Case "Max PPM"
                            'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Concentration
                            Set elConc = xmlDoc.createNode(NODE_ELEMENT, "Concentration", sNS)
                            elSubCatTemp(iReg).appendChild elConc
                            elConc.setAttribute "value", wsC.Cells(iRow, iCol).Value
                        Case "Exposure"
                            elThresh.setAttribute "overThreshold", IIf(wsC.Cells(iRow, iCol).Value, "true", "false")
                        Case "Restriction Entry - Declaration"
                            If Left(wsC.Cells(iRow, iCol).Value, 1) <> 1 Then
                                elThresh.setAttribute "overThreshold", "true"
                            End If
                        End Select
                        
                    Next iCol 'done reading all other
                End If
            Next iReg 'done creating SubstCat template for each Reg
            
            'copy template Substance Category for each Substance Category in wsList
            iSearch = 2
            Do While wsList.Range("L_Subst_spec").Rows(iSearch).Value <> ""
                Select Case wsList.Range("L_Subst_spec").Rows(iSearch).Value 'identify reg
                    Case sRegs(0): iReg = 0
                    Case sRegs(1): iReg = 1
                    Case sRegs(2): iReg = 2
                    Case sRegs(3): iReg = 3
                End Select
                'check if Substance Categories for Regulation need to be exported
                If bSubCats(iReg) Then
                    'is publication date earlier than date of selected regulation version
                    If wsList.Range("L_Subst_date").Rows(iSearch).Value < dRegs(iReg) Then
                        'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory
                        Set elSubCat = elSubCatTemp(iReg).CloneNode(True)
                        elSubCatLists(iReg).appendChild elSubCat
                        sWord = wsList.Range("L_Subst_IPC").Rows(iSearch).Value
                        If sWord = "" Then
                            sWord = wsList.Range("L_Subst_ECHA").Rows(iSearch).Value
                        End If
                        elSubCat.setAttribute "name", sWord
                        Set elID = elSubCat.SelectSingleNode("ipc:SubstanceCategoryID")
                        sWord = wsList.Range("L_Subst_ID").Rows(iSearch).Value
                        elID.setAttribute "identity", sWord
                        Set elThresh = elSubCat.SelectSingleNode("ipc:Threshold")
                        elThresh.setAttribute "threshold", wsList.Range("L_Subst_thresh").Rows(iSearch).Value
                        cElSubCat.Add elSubCat, sWord
                    End If
                End If
                iSearch = iSearch + 1
            Loop
                            
            'initialize flags and counters for loop
            fTMass(0) = 0 'reset running total of substance masses
            bThreshs(0) = False
            bThreshs(1) = False
            bThreshs(2) = False
            bThreshs(3) = False
            ReDim Preserve fMass(1)
            fMass(1) = -1 'null equiv
            sUnit = ""
            fPPM = -1
            fAvgPPM = -1
            bThresh = False
            iThresh = 1
            
            'Loop backwards through all visible substance category columns in wsC
            iCol = wsC.Range("C_PROP65_Subs").Column + wsC.Range("C_PROP65_Subs").Columns.Count - 1
            Do While iCol >= wsC.Range("C_RoHS_Subs").Column
                If wsC.Columns(iCol).EntireColumn.Hidden = False Then 'skip hidden columns
                
                    'read data from column
                    Call OnInput(wsC.Cells(iRow, iCol))
                    If wsC.Cells(iRow, iCol).Value = "" Then
                        'NOTE: IsNumeric and =0 will both be true for a blank cell
                    ElseIf IsNumeric(wsC.Cells(iRow, iCol).Value) And _
                            wsC.Cells(iRow, iCol).Value >= 0 Then
                        
                        Select Case wsC.Range("C_Head_Lbl").Columns(iCol).Value
                        Case "Max PPM"
                            fPPM = wsC.Cells(iRow, iCol).Value
                            'check for incorrect number format
                            If InStr(1, wsC.Cells(iRow, iCol).NumberFormat, "%") Then
                                fPPM = fPPM * 1000000
                            'adjust value for units
                            ElseIf wsC.Range("C_Head_Unit").Columns(iCol).Value = "%" Then
                                fPPM = fPPM * 10000
                            End If
                            
                        Case "Mass"
                            fMass(1) = wsC.Cells(iRow, iCol).Value
                            sUnit = wsC.Range("C_Head_Unit").Columns(iCol).Value
                            'check for incorrect number format
                            If InStr(1, wsC.Cells(iRow, iCol).NumberFormat, "%") Then
                                fMass(1) = fMass(1) * 100
                                sUnit = "%"
                            End If
                            
                        End Select
                        
                    ElseIf wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Max PPM" Then
                        If wsC.Cells(iRow, iCol).Value = "<" Then
                            iThresh = False 'under threshold
                        ElseIf wsC.Cells(iRow, iCol).Value = ">" Then
                            iThresh = True 'over threshold
                        End If
                        
                    ElseIf wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Exposure" Then
                        On Error Resume Next
                        iThresh = CBool(wsC.Cells(iRow, iCol).Value)
                        If Err.Number = 13 Then
                            iThresh = 1
                        End If
                        On Error GoTo 0
                        'xxxx  = 1 :null
                        'false = 0 :under threshold
                        'true  =-1 :over threshold
                        
                    ElseIf wsC.Range("C_Head_Lbl").Columns(iCol).Value Like "*Declaration" Then
                        iThresh = -1 * Val(Left(wsC.Cells(iRow, iCol).Value, 1)) + 1
                        'xxxx   :  -(0) + 1 =  1 = null
                        '1-Pass :  -(1) + 1 =  0 = under threshold
                        '2-Fail :  -(2) + 1 = -1 = over threshold
                        '3-Xmpt :  -(3) + 1 = -2 = out of scope
                    End If
                    
                    'process only for main (first) column for each Substnace Category, also skip template Substance Categories
                    sWord = Trim(wsC.Range("C_Head_ID").Columns(iCol).Value)
                    If sWord <> "" Then
                        Select Case True 'choose regulation for substance category by ID
                        Case sWord Like "CALPROP65-*"
                            iReg = 3
                        Case sWord Like "EUREACH-XVII-*"
                            iReg = 2
                        Case sWord Like "EUREACH-*"
                            iReg = 1
                        Case sWord Like "EUROHS-*"
                            iReg = 0
                        End Select
                        If sWord Like "*-other" Then
                            'skip processing Substance Category template (_other) columns
                        ElseIf bSubCats(iReg) = False Then
                            'skip processing Regulations without Declarations
                        Else
                            'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory
                            On Error Resume Next
                            Set elSubCat = cElSubCat(sWord)
                            If Err.Number <> 0 Then
                                On Error GoTo 0
'                                    LogError 2, wsC.Range("C_Headings").Cells(1, iCol), "Substance Categroy '" & wsC.Range("C_Headings").Cells(1, iCol).Value & "' is not being exported."
                                
                            Else 'write data to xml
                                On Error GoTo 0
                                If fMass(1) = -1 And fPPM = -1 And iThresh = 1 Then 'no declaration
                                    elSubCat.ParentNode.RemoveChild elSubCat
                                End If
                                
                                'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Amount
                                Set elMass = elSubCat.SelectSingleNode("ipc:Amount")
                                Select Case fMass(1)
                                Case Is >= 0
                                    If elMass Is Nothing Then 'extra data beyond whats in All Other template
                                        Set elMass = xmlDoc.createNode(NODE_ELEMENT, "Amount", sNS)
                                        elSubCat.appendChild elMass
                                    End If
                                    
                                    'check if unit is supported in IPC standard or needs to be converted
                                    If sUnit <> "mg" And sUnit <> "g" And sUnit <> "kg" Then
                                        Call StdUnitMass(fMass, sUnit)
                                    End If
                                    elMass.setAttribute "value", fMass(1)
                                    elMass.setAttribute "UOM", sUnit
                                    
                                    'change substance mass to base units
                                    Call StdUnitMass(fMass, sUnit)
                                    
                                    'add substance mass to running total
                                    fTMass(0) = fTMass(0) + fMass(1)
                                    
                                    'calculate average concentration
                                    If fMass(0) <> 0 Then
                                        fAvgPPM = fMass(1) / fMass(0) * 1000000
                                    End If
                                Case -1 'blank
                                    If Not elMass Is Nothing Then
                                        elMass.ParentNode.RemoveChild elMass
                                    End If
                                End Select
                                
                                'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Concentration
                                Set elConc = elSubCat.SelectSingleNode("ipc:Concentration")
                                Select Case fPPM
                                Case Is >= 0
                                    If elConc Is Nothing Then 'extra data beyond whats in All Other template
                                        Set elConc = xmlDoc.createNode(NODE_ELEMENT, "Concentration", sNS)
                                        elSubCat.appendChild elConc
                                    End If
                                    
                                    elConc.setAttribute "value", fPPM / 10000
                                    
                                    'check max ppm vs avg ppm
                                    If fPPM < fAvgPPM * 0.99 Then ' maxPPM < avgPPM
                                        LogError 3, wsC.Cells(iRow, iCol), "[Max PPM] for Substance '" & elSubCat.getAttribute("name") & _
                                                                            "' is less than the average concentration based on [Substance Mass]/[Part Mass]."
                                    ElseIf fPPM > 0 Then
                                        If fPPM <= fAvgPPM Then ' 0 < maxPPM <= avgPPM
                                            LogError 2, wsC.Cells(iRow, iCol), "[Max PPM] for Substance '" & elSubCat.getAttribute("name") & _
                                                                                "' is equal to the average concentration based on [Substance Mass]/[Part Mass]." ' This is only valid if the part is made of a SINGLE homogeneous material."
                                        ElseIf fAvgPPM = 0 Then ' maxPPM > 0, avgPPM = 0
                                            LogError 3, wsC.Cells(iRow, iCol), "[Mass] for Substance '" & elSubCat.getAttribute("name") & _
                                                                                "' is zero but [Max PPM] is greater than zero."
                                        End If
                                    End If
                                Case Is < 0 'blank or over/under
                                    If Not elConc Is Nothing Then
                                        elConc.ParentNode.RemoveChild elConc
                                    End If
                                End Select
                                
                                'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/Threshold
                                Set elThresh = elSubCat.SelectSingleNode("ipc:Threshold")
                                If Application.Max(fPPM, fAvgPPM) > -1 Then 'mass or concentration provided
                                    oRegEx.Pattern = "\d*\.?\d*"
                                    sWord = elThresh.getAttribute("threshold")
                                    fThresh = Val(oRegEx.Execute(sWord).Item(0).Value)
                                    bThresh = Application.Max(fPPM, fAvgPPM) > fThresh
                                    'test mass/conc vs threshold dec
                                    If iThresh < 1 Then
                                        If bThresh <> CBool(iThresh) Then
                                            LogError 3, wsC.Cells(iRow, iCol), "Substance Category declaration does not match mass/concentration"
                                        End If
                                    End If
                                End If
                                If iThresh < 1 Then 'threshold declaration provided
                                    bThresh = iThresh
                                End If
                                elThresh.setAttribute "overThreshold", IIf(bThresh, "true", "false")
                                
                                'MainDeclaration/Product/MaterialInfo/SubstanceCategoryList/SubstanceCategory/SubstanceCatExemptionList
                                If iReg = 2 And iThresh = -2 Then
                                    Set elTemp = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCatExemptionList", sNS)
                                    elSubCat.appendChild elTemp
                                    Set elID = xmlDoc.createNode(NODE_ELEMENT, "ExemptionListID", sNS)
                                    elTemp.appendChild elID
                                    elID.setAttribute "authority", "CAT"
                                    elID.setAttribute "identity", "EL-XVII"
                                    Set elXmpn = xmlDoc.createNode(NODE_ELEMENT, "Exemption", sNS)
                                    elTemp.appendChild elXmpn
                                    elXmpn.setAttribute "identity", "Scope"
                                    '!!!!!!!! configuration change: based on text of classA declartion !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                    '!!!!!!!! applicable for meets/not meets, not applicable for over/under threshold!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                    bThresh = False 'for validation
                                    '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                End If
                                'finished writing SubstCat data to xml
                                
                                'regulation specific error checking
                                If bThresh Then 'this subst over threshold
                                    bThreshs(iReg) = True 'set flag: any substance for current reg over threshhold
                                    
                                    'check for compliant but over threshold (false pass)
                                    If iDecs(iReg) = 1 Then 'assumes dec=1 is Pass for all regs
                                        sWord = "[" & wsC.Range("C_" & sRegs(iReg) & " C_Head_Lbl").Value
                                        sWord = sWord & "] can not be '1...' if [Substance] '"
                                        sWord = sWord & elSubCat.getAttribute("name")
                                        If iReg = 3 Then
                                            sWord = sWord & "' has an exposure risk."
                                        Else
                                            sWord = sWord & "' is above threshold."
                                        End If
                                        LogError 3, wsC.Range("C_" & sRegs(iReg)).Rows(iRow), sWord
                                    End If
                                    
                                    Select Case iReg
                                    Case 0 'RoHS
                                        Select Case iDecs(0)
                                        Case 3, 4
                                            'check for substance over threshold without exemption
                                            bNoXmpnError = True 'reset exemption flag
                                            bXmpnMaxThreshError = True
                '                            Set rnXmpnMaxThreshErrors = Nothing
                                            ReDim iXmpnMaxThreshErrors(0)
                                            For iSearch = 1 To UBound(sXmpn) 'each exemption
                                                Set rnCell = wsList.Range("L_Xmpn_ID").Find(sXmpn(iSearch), , xlValues, xlWhole, xlByRows, xlNext)
                                                If Not rnCell Is Nothing Then
                                                    iRowX = rnCell.Row
                                                    If InStr(1, wsList.Range("L_Xmpn_subst").Rows(iRowX).Value, elSubCat.getAttribute("name")) Then
                                                        bNoXmpnError = False 'an exemption applies to substance
                                                        
                                                        'check substance vs exemption threshold
                                                        sUnit = wsList.Range("L_Xmpn_unit").Rows(iRowX).Value
                                                        If sUnit <> "" Then
                                                            Set rnCell2 = wsList.Range("L_UOM").Find(sUnit)
                                                            If Not rnCell2 Is Nothing Then
                                                                                                                        
                                                                'check exemption lower threshold
                                                                fThresh = wsList.Range("L_Xmpn_min").Rows(iRowX).Value
                                                                If fThresh <> 0 Then
                                                                    bError = False
                                                                    fThresh = fThresh * 0.999999 'subtract rounding error tolerance
                                                                    fThresh = fThresh * rnCell2.Offset(0, 1) 'convert to base unit
                                                                    If rnCell2.Offset(0, 2) Then 'threshold uom is relative
                                                                        fThresh = fThresh * 1000000 'convert to ppm
                                                                        If fPPM < fThresh Then
                                                                            bError = True 'throw error
                                                                        End If
                                                                    Else 'threshold uom is absolute
                                                                        If fMass(1) > fThresh Then
                                                                            bError = True 'throw error
                                                                        End If
                                                                    End If
                                                                    If bError Then 'write error message
                                                                        LogError 3, wsC.Range("C_XMPN").Rows(iRow), "[Exemption] '" & wsList.Range("L_Xmpn_ID").Rows(iRowX).Value & _
                                                                                                                    "' is not valid if [Substance] '" & elSubCat.getAttribute("name") & _
                                                                                                                    "' is below " & wsList.Range("L_Xmpn_min").Rows(iRowX).Value & _
                                                                                                                    wsList.Range("L_Xmpn_unit").Rows(iRowX).Value & "."
                                                                    End If
                                                                End If
                                                                
                                                                'check exemption upper threshold (new version)
                                                                fThresh = wsList.Range("L_Xmpn_max").Rows(iRowX).Value
                                                                If fThresh = 0 Then
                                                                    bXmpnMaxThreshError = False 'dont throw error
                                                                Else
                                                                    bError = False
                                                                    fThresh = fThresh * 1.000001 'add rounding error tolerance
                                                                    fThresh = fThresh * rnCell2.Offset(0, 1) 'convert to base unit
                                                                    If rnCell2.Offset(0, 2) Then 'threshold uom is relative
                                                                        fThresh = fThresh * 1000000 'convert to ppm
                                                                        If fPPM > fThresh Then
                                                                            bError = True 'flag xmpn for error
                                                                        End If
                                                                    Else 'threshold uom is absolute
                                                                        If fMass(1) > fThresh Then
                                                                            bError = True 'flag xmpn for error
                                                                        End If
                                                                    End If
                                                                    If bError Then 'save xmpn to error list
                                                                        ReDim Preserve iXmpnMaxThreshErrors(UBound(iXmpnMaxThreshErrors) + 1)
                                                                        iXmpnMaxThreshErrors(UBound(iXmpnMaxThreshErrors)) = iRowX
                                                                    Else 'dont throw error
                                                                        bXmpnMaxThreshError = False
                                                                    End If
                                                                End If
                                                            End If
                                                        Else 'no unit
                                                            bXmpnMaxThreshError = False 'dont throw error
                                                        End If
                                                    End If
                                                End If
                                            Next iSearch 'finish looping through exemptions
                                            
                                            If bNoXmpnError Then 'over threshold and no exemption
                                                LogError 3, wsC.Cells(iRow, iCol + 1), "[Substance] '" & elSubCat.getAttribute("name") & _
                                                                                        "' is above threshold without a valid [RoHS Exemption]."
                                            End If
                                            
                                            If bXmpnMaxThreshError Then 'over exemption threshold
                                                For iSearch = 1 To UBound(iXmpnMaxThreshErrors)
                                                    LogError 3, wsC.Range("C_XMPN").Rows(iRow), "[Exemption] '" & wsList.Range("L_Xmpn_ID").Rows(iXmpnMaxThreshErrors(iSearch)).Value & _
                                                                                                "' is not valid if [Substance] '" & elSubCat.getAttribute("name") & _
                                                                                                "' is above " & wsList.Range("L_Xmpn_max").Rows(iXmpnMaxThreshErrors(iSearch)).Value & _
                                                                                                wsList.Range("L_Xmpn_unit").Rows(iXmpnMaxThreshErrors(iSearch)).Value & "."
                                                Next iSearch
                                            End If
                                        End Select
                                        
                                    End Select
                                End If 'finish regulation specific error check
                            End If 'end if elSubCat found
                        End If 'end skip template column
                        
                       'reset counters
                        fMass(1) = -1
                        sUnit = ""
                        fPPM = -1
                        fAvgPPM = -1
                        bThresh = False
                        iThresh = 1
                    End If 'end processing first column for Substnace Category(writing to xml)
                End If 'end skipping hidden columns
                iCol = iCol - 1
            Loop 'finish looping through substance category columns
            
            'check for non-compliant but all under threshold (false fail)
            For iReg = 0 To 3
                '!!!!!!!!!!! configuration change: based on completeness of substance category list !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                '!!!!!!!!!!! applicable if some XVII entries are excluded from rapid !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                If iReg = 2 Then iReg = 3 'skip XVII becasue we have excluded some entries from classC
                '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                If iDecs(iReg) > 1 And bThreshs(iReg) = False Then 'assumes dec=1 is Pass for all regs
                    sWord = "[" & wsC.Range("C_" & sRegs(iReg) & " C_Head_Lbl").Value
                    sWord = sWord & "] can not be '" & iDecs(iReg)
                    If iReg = 3 Then
                        sWord = sWord & "...' if no Substances have exposure risk."
                    Else
                        sWord = sWord & "...' if all Substances are below threshold."
                    End If
                    LogError 3, wsC.Range("C_" & sRegs(iReg)).Rows(iRow), sWord
                End If
            Next iReg
             
            'check for RoHS exempt but under threshold (unnecessary exemption)
            If Not elSubCatLists(0) Is Nothing Then
                Set nlTemp = elSubCatLists(0).SelectNodes("ipc:SubstanceCategory[ipc:Threshold/@overThreshold='true']")
                For iSearch = 1 To UBound(sXmpn) 'each exemption
                    bError = True
                    Set rnCell = wsList.Range("L_Xmpn_ID").Find(sXmpn(iSearch), , xlValues, xlWhole, xlByRows, xlNext)
                    If Not rnCell Is Nothing Then
                        For Each elSubCat In nlTemp
                            If InStr(1, wsList.Range("L_Xmpn_subst").Rows(rnCell.Row).Value, elSubCat.getAttribute("name")) Then 'substance covered by that exemption
                                bError = False
                            End If
                        Next elSubCat
                        If bError Then 'all substance under threshold
                            LogError 3, wsC.Range("C_Xmpn").Rows(iRow), "[RoHS Exemption] '" & sXmpn(iSearch) & "' is not applicable if Substance '" & _
                                                                        Replace(wsList.Range("L_Xmpn_subst").Rows(rnCell.Row).Value, Chr(10), ", ") & _
                                                                        "' is below threshold."
                        End If
                    End If
                Next iSearch
            End If
            
            'check for substance mass over product mass
            If fTMass(0) > fMass(0) And fMass(0) > 0 Then
                LogError 3, wsC.Range("C_PMass").Rows(iRow), "The sum of the [Substance Mass] values reported for all Substances can not exceed the [Part Mass]."
            End If
        End If 'end Class C and not obsolete or unknown
    Next iRow
    
Case "D" 'class D
    'MainDeclaration/Include/Sectional/SubSectional
    Set elTemp3 = xmlDoc.createNode(NODE_ELEMENT, "SubSectional", sNS)
    elTemp2.appendChild elTemp3
    elTemp3.setAttribute "name", "D"
    Set elTemp2 = Nothing
    Set elTemp3 = Nothing
    
    'initialize mass counters
    ReDim fMass(0)
    ReDim fTMass(0)
    
    
    'delete blank rows
    For iRow = wsD.Range("D_Lvl", "D_Xmpn").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row To wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count Step -1
        If "" = wsD.Range("D_Lvl").Rows(iRow).Value & _
                wsD.Range("D_Type").Rows(iRow).Value & _
                wsD.Range("D_Num").Rows(iRow).Value & _
                wsD.Range("D_Name").Rows(iRow).Value & _
                wsD.Range("D_Mass").Rows(iRow).Value & _
                wsD.Range("D_Unit").Rows(iRow).Value & _
                wsD.Range("D_Qty").Rows(iRow).Value & _
                wsD.Range("D_Xmpn").Rows(iRow).Value & _
                wsD.Range("D_Note").Rows(iRow).Value Then
            wsD.Rows(iRow).EntireRow.Delete
        End If
    Next iRow
    
    'loop through all rows with data
    For iRow = wsD.Range("D_Headings").Row + wsD.Range("D_Headings").Rows.Count To wsD.Range("D_Lvl", "D_Xmpn").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1 'first blank row
        
        'validate level for current row
        Select Case wsD.Range("D_Type").Rows(iRow).Value
        Case "CatPart", "Supplier", "SupplierPart", "SafeUse"
            iLvl = 0
            iLvlSP = 0
            
        Case "SubPart", "Material"
            'validate level
            If wsD.Range("D_Lvl").Rows(iRow).Value <> "" Then
                If IsNumeric(wsD.Range("D_Lvl").Rows(iRow).Value) Then
                    Select Case wsD.Range("D_Lvl").Rows(iRow).Value
                    Case Is < 1
                        wsD.Range("D_Lvl").Rows(iRow).Value = ""
                        LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must be at least 1."
                        
                    Case Is = iLvlSP 'same lvl as previous Part/SubPart/compound Material
                        If Not wsD.Range("D_Type").Rows(iRow - 1).Value Like "Substance" Then 'no Material/Substances in previous Part/SubPart/compoundMaterial
                            wsD.Range("D_Lvl").Rows(iRow).Value = ""
                            LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be the same as the [Level] of the previous SubPart if pervious SubPart does not contain Materials and Substances."
                        End If
                        If wsD.Range("D_Type").Rows(iRow).Value = "Material" Then
                            iLvlSP = iLvlSP - 1
                        End If
                        
                    Case Is = iLvlSP + 1 'inside previous Part/SubPart/Material
'                        If InStr(1, wsD.Range("D_Type").Rows(iRow - 1).Value, "Part") = 0 And InStr(1, wsD.Range("D_Type").Rows(iRow - 1).Value, "Supplier") = 0 Then 'pervious row not Part/SubPart/Supplier/SupplierPart
'                            wsD.Range("D_Lvl").Rows(iRow).Value = ""
'                            LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for SubPart '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be more than the [Level] of the previous SubPart if pervious SubPart contains Materials and Substances."
'                        End If
                    
                    Case Is > iLvlSP + 1 'missing lvl between rows
                        wsD.Range("D_Lvl").Rows(iRow).Value = ""
                        LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be more than 1 greater than the [Level] of the previous row."
                        
                    End Select
                Else 'not numeric
                    wsD.Range("D_Lvl").Rows(iRow).Value = ""
                    LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must be a whole number."
                End If
            End If
            
            'reset level for current row
            If wsD.Range("D_Lvl").Rows(iRow).Value = "" Then
                Select Case wsD.Range("D_Type").Rows(iRow - 1).Value
                Case "CatPart", "SubPart", "Supplier", "SupplierPart", "SafeUse"
                    iLvl = iLvlSP + 1 'assume child
                Case Else '"Material", "Substance"
                    Select Case wsD.Range("D_Type").Rows(iRow).Value
                    Case "Material"
                        iLvl = iLvlSP + 1 'assume child of pervious subpart
                    Case "SubPart"
                        iLvl = iLvlSP 'assume sibling of pervious subpart
                    End Select
                End Select
                LogError 2, wsD.Range("D_Lvl").Rows(iRow), "[Level] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' estimated based on order."
            Else
                iLvl = wsD.Range("D_Lvl").Rows(iRow).Value
            End If
            
            'define SubPart level
            If wsD.Range("D_Type").Rows(iRow).Value = "SubPart" Then 'any SubPart
                iLvlSP = iLvl
'            ElseIf wsD.Range("D_Type").Rows(iRow + 1).Value = "Material" Then 'compound Material
'                iLvlSP = iLvl
            End If
            
        Case "Substance"
            iLvl = iLvlSP + 2
        Case Else
            iLvl = 0
        End Select
        
        'validate mass rollup
        'compare sum of item masses to parent item mass (for each newly completed parent)
        iSearch = UBound(fTMass) - 1
        Do While iSearch >= iLvl
            If fMass(iSearch) Then 'avoid divide by zero
                fAvgPPM = fTMass(iSearch + 1) / fMass(iSearch)
                If fAvgPPM < 0.99 Or fAvgPPM > 1.01 Then 'warning threshold (+/-1%)
                    'find row for parent obj
                    Set rnCell = wsD.Range("D_Lvl").Find(iSearch, wsD.Range("D_Lvl").Rows(iRow), xlValues, xlWhole, xlByRows, xlPrevious)
                    If iLvl = 0 Then 'walk through safeuse, supplierpart, supplier to part level
                        Do While rnCell.Offset(-1, 0).Value = 0
                            Set rnCell = rnCell.Offset(-1, 0)
                        Loop
                    End If
                    If Not rnCell Is Nothing Then 'build error message
                        sWord = "The sum of the [Mass] values for each " & wsD.Range("D_Type").Rows(rnCell.Row + 1).Value
                        sWord = sWord & " in " & wsD.Range("D_Type").Rows(rnCell.Row).Value & " '" & wsD.Range("D_Name").Rows(rnCell.Row).Value
                        sWord = sWord & "' is " & IIf(fAvgPPM > 1, "greater", "less") & " (" & Format(fAvgPPM * 100, "0") & "%) than its total [Mass] value."
                        If fAvgPPM < 0.9 Or fAvgPPM > 1.02 Then 'error threshold (+2/-10%)
                            LogError 3, wsD.Range("D_Mass").Rows(rnCell.Row), sWord
                        Else
                            LogError 2, wsD.Range("D_Mass").Rows(rnCell.Row), sWord
                        End If
                    End If
                End If
            End If
            iSearch = iSearch - 1
        Loop
        
        'exit main loop after validation after last row
        If "" = wsD.Range("D_Lvl").Rows(iRow).Value & _
                wsD.Range("D_Type").Rows(iRow).Value & _
                wsD.Range("D_Num").Rows(iRow).Value & _
                wsD.Range("D_Name").Rows(iRow).Value & _
                wsD.Range("D_Mass").Rows(iRow).Value & _
                wsD.Range("D_Unit").Rows(iRow).Value & _
                wsD.Range("D_Qty").Rows(iRow).Value & _
                wsD.Range("D_Xmpn").Rows(iRow).Value & _
                wsD.Range("D_Note").Rows(iRow).Value Then
            GoTo SkipRowD
        End If
        
        'write corrected level
        wsD.Range("D_Lvl").Rows(iRow).Value = iLvl
        Call OnInput(wsD.Range("D_Lvl").Rows(iRow))
        
        'build main xml structure for row
            'build Product or SubProduct node
        If wsD.Range("D_Type").Rows(iRow).Value = "Part" Or _
            wsD.Range("D_Type").Rows(iRow).Value = "CatPart" Or _
            wsD.Range("D_Type").Rows(iRow).Value = "SubPart" Or _
            wsD.Range("D_Type").Rows(iRow).Value = "SupplierPart" And _
                (wsGen.Range("G_Form_Mode").Value = "Distribute" Or _
                    (wsD.Range("D_Type").Rows(iRow - 1).Value <> "CatPart" And _
                    wsD.Range("D_Type").Rows(iRow - 1).Value <> "Supplier")) Then
                    
            ReDim Preserve elSubProds(0 To iLvl)
            If iLvl = 0 Then 'anything other than a SubPart
                'skip part with Note but no other data
                If "" = wsD.Range("D_Mass").Rows(iRow).Value & _
                        wsD.Range("D_Unit").Rows(iRow).Value & _
                        wsD.Range("D_Xmpn").Rows(iRow).Value And "" <> wsD.Range("D_Note").Rows(iRow).Value Then
                    Select Case wsD.Range("D_Type").Rows(iRow + 1).Value
                    Case "CatPart", ""
                        LogError 1, wsD.Range("D_Num").Rows(iRow), "Skipping Part with [Note] but no other data."
                        ReDim fTMass(0 To 0)
                        GoTo SkipRowD
                    End Select
                End If
                
                'check for alternate Supplier ID
                    If wsD.Range("D_Type").Rows(iRow + 1).Value <> "Supplier" Then
                        Set xmlDoc = cXmlDocs(1) 'use original xml doc
'                        Set xmlDoc = xmlDocs(0) 'use original xml doc
                    ElseIf wsD.Range("D_Num").Rows(iRow + 1).Value = "" Then
                        LogError 3, wsD.Range("D_Num").Rows(iRow + 1), "[Number] for Supplier '" & wsD.Range("D_Name").Rows(iRow + 1).Value & "' can not be blank."
                        Set xmlDoc = cXmlDocs(1) 'use original xml doc
                    Else
                        On Error Resume Next
                        Set xmlDoc = cXmlDocs(wsD.Range("D_Num").Rows(iRow + 1).Value)
                        If Err.Number <> 0 Then
                            On Error GoTo 0
                            Set xmlDoc = CreateObject("MSxml2.DOMDocument.6.0")
                            cXmlDocs.Add xmlDoc, wsD.Range("D_Num").Rows(iRow + 1).Value
                            xmlDoc.setProperty "SelectionNamespaces", "xmlns:ipc='" & sNS & "'"
                            xmlDoc.appendChild xmlDoc.createProcessingInstruction("xml", "version=""1.0"" encoding=""UTF-8""")
                            xmlDoc.appendChild xmlDoc.createComment("This file was created by 'RAPID " & wsGen.Range("G_Version").Value & "' on " & Date)
                            xmlDoc.appendChild cXmlDocs(1).DocumentElement.CloneNode(False)
                            xmlDoc.DocumentElement.appendChild elBusInfo.CloneNode(True)
                            xmlDoc.DocumentElement.appendChild elInc.CloneNode(True)
                            Set elTemp = xmlDoc.SelectSingleNode("ipc:MainDeclaration/ipc:BusinessInfo/ipc:Response/ipc:SupplyCompany")
                            If Not elTemp Is Nothing Then
                                If wsD.Range("D_Name").Rows(iRow + 1).Value <> "" Then
                                    elTemp.setAttribute "name", wsD.Range("D_Name").Rows(iRow + 1).Value
                                End If
                                Set elTemp2 = elTemp.SelectSingleNode("ipc:CompanyID")
                                If Not elTemp2 Is Nothing Then
                                    elTemp2.setAttribute "identity", wsD.Range("D_Num").Rows(iRow + 1).Value
                                End If
                            End If
                        End If
                        On Error GoTo 0
                    End If
                
                './Product
                Set elSubProds(iLvl) = xmlDoc.createNode(NODE_ELEMENT, "Product", sNS)
                xmlDoc.DocumentElement.appendChild elSubProds(iLvl)
            Else
                './SubProduct
                Set elSubProds(iLvl) = xmlDoc.createNode(NODE_ELEMENT, "SubProduct", sNS)
                elSubProds(iLvl - 1).appendChild elSubProds(iLvl)
                './SubProduct/@numberOfInstances
                If wsD.Range("D_Qty").Rows(iRow).Value = "" Then
                    LogError 2, wsD.Range("D_Qty").Rows(iRow), "[Quantity] for SubPart '" & wsD.Range("D_Name").Rows(iRow).Value & "' is blank, assumed to be '1'."
                    fQty = 1
                ElseIf IsNumeric(wsD.Range("D_Qty").Rows(iRow).Value) Then
                    fQty = wsD.Range("D_Qty").Rows(iRow).Value
                    If fQty < 0 Then
                        fQty = fQty * -1
                    End If
                Else
                    LogError 2, wsD.Range("D_Qty").Rows(iRow), "[Quantity] for SubPart '" & wsD.Range("D_Name").Rows(iRow).Value & "' is not a number, assumed to be '1'."
                    fQty = 1
                End If
                elSubProds(iLvl).setAttribute "numberOfInstances", fQty
            End If
            './Product|SubProduct/@unitType
            If wsD.Range("D_Xmpn").Rows(iRow).Value = "" Then
                LogError 2, wsD.Range("D_Xmpn").Rows(iRow), "[Qty Unit] is blank, assumed to be 'Each'."
                elSubProds(iLvl).setAttribute "unitType", "Each"
            Else
                elSubProds(iLvl).setAttribute "unitType", wsD.Range("D_Xmpn").Rows(iRow).Value
            End If
            './Product|SubProduct/@comment
            If wsD.Range("D_Note").Rows(iRow).Value <> "" Then
                elSubProds(iLvl).setAttribute "comment", Trim(wsD.Range("D_Note").Rows(iRow).Value)
            End If
                
            './Product|SubProduct/ProductID
            Set elPID = xmlDoc.createNode(NODE_ELEMENT, "ProductID", sNS)
            elSubProds(iLvl).appendChild elPID
            
            Set elMatInfo = Nothing
            Set elHML = Nothing
            
            'check Type of next line
            iSearch = iRow
            Do
                iSearch = iSearch + 1
                bError = False
                
                Select Case wsD.Range("D_Type").Rows(iSearch).Value
                Case "SafeUse"
'                    './Product/MaterialInfo
'                    If elMatInfo Is Nothing Then
'                        Set elMatInfo = xmlDoc.createNode(NODE_ELEMENT, "MaterialInfo", sNS)
'                        elSubProds(iLvl).appendChild elMatInfo
'                    End If
                    bError = True 'keep looping
                    
                Case "Material"
                    './Product|SubProduct/MaterialInfo
'                    If elMatInfo Is Nothing Then
'                        Set elMatInfo = xmlDoc.createNode(NODE_ELEMENT, "MaterialInfo", sNS)
'                        elSubProds(iLvl).appendChild elMatInfo
'                    End If
'
'                    './Product|SubProduct/MaterialInfo/HomogeneousMaterialList
'                    Set elHML = xmlDoc.createNode(NODE_ELEMENT, "HomogeneousMaterialList", sNS)
'                    elMatInfo.appendChild elHML
                
                Case "SubPart"
                    'dont add MatInfo
                    If wsD.Range("D_Lvl").Rows(iSearch) <= wsD.Range("D_Lvl").Rows(iRow) Then
                        LogError 3, wsD.Range("D_Type").Rows(iRow), wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must contain at least one SubPart or Material."
                    End If
                
                Case "Supplier", "SupplierPart"
                    bError = True 'keep looping
                    
                Case Else '"CatPart", "Substance", ""
                    LogError 3, wsD.Range("D_Type").Rows(iRow), wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must contain at least one SubPart or Material."
                End Select
            Loop While bError
        End If
        
        Select Case wsD.Range("D_Type").Rows(iRow).Value
        Case "CatPart"
            './Product|SubProduct/ProductID
            If wsD.Range("D_Num").Rows(iRow).Value <> "" Then
                elPID.setAttribute "requesterItemNumber", Trim(wsD.Range("D_Num").Rows(iRow).Value)
            Else
                LogError 3, wsD.Range("D_Num").Rows(iRow), "[Number] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be blank."
            End If
            If wsD.Range("D_Name").Rows(iRow).Value <> "" Then
                elPID.setAttribute "requesterItemName", Trim(wsD.Range("D_Name").Rows(iRow).Value)
            Else
                LogError 3, wsD.Range("D_Name").Rows(iRow), "[Name] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Num").Rows(iRow).Value & "' can not be blank."
            End If
            If wsD.Range("D_Qty").Rows(iRow).Value <> "" Then
                elPID.setAttribute "version", Trim(wsD.Range("D_Qty").Rows(iRow).Value)
            End If
        
        Case "SupplierPart", "SubPart"
           './Product|SubProduct/ProductID
           If wsD.Range("D_Num").Rows(iRow).Value <> "" Then
               elPID.setAttribute "itemNumber", Trim(wsD.Range("D_Num").Rows(iRow).Value)
           Else 'Error if level 1 otherwise Warning
               LogError IIf(iLvl = 0, 3, 2), wsD.Range("D_Num").Rows(iRow), "[Number] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be blank."
           End If
           If wsD.Range("D_Name").Rows(iRow).Value <> "" Then
               elPID.setAttribute "itemName", Trim(wsD.Range("D_Name").Rows(iRow).Value)
           Else
               LogError 3, wsD.Range("D_Name").Rows(iRow), "[Name] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Num").Rows(iRow).Value & "' can not be blank."
           End If
           'check Type of previous line
           If wsD.Range("D_Type").Rows(iRow).Value = "SupplierPart" Then
                If wsGen.Range("G_Form_Mode").Value <> "Distribute" Then
                    Select Case wsD.Range("D_Type").Rows(iRow - 1).Value
                    Case "CatPart", "Supplier"
                    Case Else
                        LogError 3, wsD.Range("D_Type").Rows(iRow), "SupplierPart row must be directly below the CatPart row (or the Supplier row if present)."
                    End Select
                    GoTo SkipRowD
                End If
           End If
            
        Case "Supplier"
            'check Type of previous line
            If wsD.Range("D_Type").Rows(iRow - 1).Value <> "CatPart" Then
                LogError 3, wsD.Range("D_Type").Rows(iRow), "Supplier row must be directly below the CatPart row."
            End If
            GoTo SkipRowD
        
        Case "Material"
            './Product|SubProduct/MaterialInfo
            If elMatInfo Is Nothing Then
                Set elMatInfo = xmlDoc.createNode(NODE_ELEMENT, "MaterialInfo", sNS)
                elSubProds(iLvlSP).appendChild elMatInfo
            End If
            
            './Product|SubProduct/MaterialInfo/HomogeneousMaterialList
            If elHML Is Nothing Then
                Set elHML = xmlDoc.createNode(NODE_ELEMENT, "HomogeneousMaterialList", sNS)
                elMatInfo.appendChild elHML
            End If
            
            'check for duplicate Material
            Set nlTemp = elHML.SelectNodes("ipc:HomogeneousMaterial[@name='" & wsD.Range("D_Name").Rows(iRow).Value & "']")
            If nlTemp.Length > 0 Then
                LogError 2, wsD.Range("D_Name").Rows(iRow), "Part '" & elHML.SelectSingleNode("../../ipc:ProductID/@itemName|../../ipc:ProductID/@requesterItemName|../../@name").NodeValue & _
                                                            "' contains multiple Materials named '" & wsD.Range("D_Name").Rows(iRow).Value & "'."
            End If
            
            './Product|SubProduct/MaterialInfo/HomogeneousMaterialList/HomogeneousMaterial
            Set elMat = xmlDoc.createNode(NODE_ELEMENT, "HomogeneousMaterial", sNS)
            elHML.appendChild elMat
            If wsD.Range("D_Name").Rows(iRow).Value <> "" Then
                elMat.setAttribute "name", Trim(wsD.Range("D_Name").Rows(iRow).Value)
            Else
                LogError 3, wsD.Range("D_Name").Rows(iRow), "[Name] of Material can not be blank."
            End If
            If wsD.Range("D_Note").Rows(iRow).Value <> "" Then
                elMat.setAttribute "comment", Trim(wsD.Range("D_Note").Rows(iRow).Value)
            End If
        
            'check class of next line
            Select Case wsD.Range("D_Type").Rows(iRow + 1).Value
            Case "Substance"
                './HomogeneousMaterial/SubstanceCategoryList
                Set elSubCatList = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryList", sNS)
                elMat.appendChild elSubCatList
                
                './HomogeneousMaterial/SubstanceCategoryList/SubstanceCategoryListID
                Set elID = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryListID", sNS)
                elSubCatList.appendChild elID
                elID.setAttribute "identity", "Supplier"
                Set elID = Nothing
                
                './HomogeneousMaterial/SubstanceCategoryList/SubstanceCategory
                Set elSubCat = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategory", sNS)
                elSubCatList.appendChild elSubCat
                elSubCat.setAttribute "name", "none"
                
            Case "Material" 'temporarily treat Material like a SubPart
                LogError 2, wsD.Range("D_Type").Rows(iRow), "Material '" & wsD.Range("D_Name").Rows(iRow).Value & "' contains sub-Materials. These will be treated as a single homogeneous material. If the sub-Materials are not homogeneous please replace the upper level Material with a SubPart."
                iLvlSP = iLvl
                ReDim Preserve elSubProds(0 To iLvl)
                Set elSubProds(iLvl) = elMat
                Set elMatInfo = Nothing
                Set elHML = Nothing
                
            Case Else
                LogError 3, wsD.Range("D_Type").Rows(iRow), "Material '" & wsD.Range("D_Name").Rows(iRow).Value & "' must contain at least one Substance."
            End Select
            
            fQty = 1
            
        Case "Substance"
            'check for duplicate Substance
            sWord = UCase(wsD.Range("D_Num").Rows(iRow).Value)
            Select Case sWord
            Case "SYSTEM", "-"
                sXpath = Trim(UCase(wsD.Range("D_Name").Rows(iRow).Value))
                If sXpath Like "*'*" Then
                    sXpath = """" & sXpath & """"
                Else
                    sXpath = "'" & sXpath & "'"
                End If
                sXpath = "ipc:Substance[translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')=" & sXpath
                sXpath = sXpath & " and ipc:SubstanceID/@identity='-']"
                'Set nlTemp = elSubCat.SelectNodes("ipc:Substance[translate(@name,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')='" & Trim(UCase(wsD.Range("D_Name").Rows(iRow).Value)) & "' and ipc:SubstanceID/@identity='-']")
            Case Else
                sXpath = "ipc:Substance[ipc:SubstanceID/@identity='" & sWord & "']"
                'Set nlTemp = elSubCat.SelectNodes("ipc:Substance[ipc:SubstanceID/@identity='" & wsD.Range("D_Num").Rows(iRow).Value & "']")
            End Select
            Set nlTemp = elSubCat.SelectNodes(sXpath)
            If nlTemp.Length > 0 Then
                LogError 3, wsD.Range("D_Name").Rows(iRow), "Material '" & elSubCat.SelectSingleNode("../../@name").NodeValue & "' can not contain duplicate copy of Substance '" & wsD.Range("D_Name").Rows(iRow).Value & "'."
            End If
            
            './HomogeneousMaterial/SubstanceCategoryList/SubstanceCategory/Substance
            Set elSubst = xmlDoc.createNode(NODE_ELEMENT, "Substance", sNS)
            elSubCat.appendChild elSubst
            If wsD.Range("D_Name").Rows(iRow).Value <> "" Then
                elSubst.setAttribute "name", Trim(wsD.Range("D_Name").Rows(iRow).Value)
            Else
                LogError 3, wsD.Range("D_Name").Rows(iRow), "[Name] of Substance '" & wsD.Range("D_Num").Rows(iRow).Value & "' can not be blank."
            End If
            If wsD.Range("D_Note").Rows(iRow).Value <> "" Then
                elSubst.setAttribute "comment", Trim(wsD.Range("D_Note").Rows(iRow).Value)
            End If
            
            './Substance/SubstanceID
            Set elID = xmlDoc.createNode(NODE_ELEMENT, "SubstanceID", sNS)
            elSubst.appendChild elID
            elID.setAttribute "authority", "CAS"
            If wsD.Range("D_Num").Rows(iRow).Value <> "" Then
                Call OnInput(wsD.Range("D_Num").Rows(iRow))
                elID.setAttribute "identity", UCase(wsD.Range("D_Num").Rows(iRow).Value)
            Else
                LogError 3, wsD.Range("D_Num").Rows(iRow), "[Number] for Substance '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be blank."
            End If
            Set elID = Nothing
            
            './Substance/SubstanceExemption
            If wsD.Range("D_Xmpn").Rows(iRow).Value <> "" Then
                Set elXmpn = xmlDoc.createNode(NODE_ELEMENT, "SubstanceExemption", sNS)
                elSubst.appendChild elXmpn
                elXmpn.setAttribute "identity", wsD.Range("D_Xmpn").Rows(iRow).Value
            End If
            
            fQty = 1
        
        Case "SafeUse"
            'check Type of previous line
            Select Case wsD.Range("D_Type").Rows(iRow - 1).Value
            Case "CatPart", "Supplier", "SupplierPart"
            
                './Product/MaterialInfo
                If elMatInfo Is Nothing Then
                    Set elMatInfo = xmlDoc.createNode(NODE_ELEMENT, "MaterialInfo", sNS)
                    elSubProds(iLvl).appendChild elMatInfo
                End If
                
                './Product/MaterialInfo/SUD
                Set elTemp = xmlDoc.createNode(NODE_ELEMENT, "SUD", "")
                elMatInfo.appendChild elTemp
                If wsD.Range("D_Num").Rows(iRow).Value <> "" Then
                    elTemp.setAttribute "type", wsD.Range("D_Num").Rows(iRow).Value
                End If
                If wsD.Range("D_Name").Rows(iRow).Value = "" Then
                    LogError 3, wsD.Range("D_Name").Rows(iRow), "[Description] of Safe Use Instruction can't be blank."
                Else
                    elTemp.setAttribute "instruction", wsD.Range("D_Name").Rows(iRow).Value
                End If
                
            Case Else
                LogError 3, wsD.Range("D_Type").Rows(iRow), "SafeUse row must be directly below a CatPart, Supplier, or SupplierPart row."
            End Select
            GoTo SkipRowD
            
        Case Else
            LogError 3, wsD.Range("D_Type").Rows(iRow), "[Type] can not be blank."
            
        End Select 'finish building main xml structure for row
        
        'add mass information
        sUnit = wsD.Range("D_Unit").Rows(iRow).Value 'read unit, validate unit after reading mass
        ReDim Preserve fMass(0 To iLvl)
        If wsD.Range("D_Mass").Rows(iRow).Value = "" Then
            fMass(iLvl) = 0
            LogError 3, wsD.Range("D_Mass").Rows(iRow), "[Mass] of " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be blank."
        ElseIf IsNumeric(wsD.Range("D_Mass").Rows(iRow).Value) Then
            fMass(iLvl) = wsD.Range("D_Mass").Rows(iRow).Value
            If InStr(1, wsD.Range("D_Mass").Rows(iRow).NumberFormat, "%") Then
                fMass(iLvl) = fMass(iLvl) * 100
                sUnit = "%"
            End If
            Select Case fMass(iLvl)
            Case Is < 0
                LogError 2, wsD.Range("D_Mass").Rows(iRow), "[Mass] of " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must be a number greater than zero."
                fMass(iLvl) = fMass(iLvl) * -1
            Case Is = 0
                LogError 3, wsD.Range("D_Mass").Rows(iRow), "[Mass] of " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must be a number greater than zero."
            End Select
        Else
            fMass(iLvl) = 0
            LogError 3, wsD.Range("D_Mass").Rows(iRow), "[Mass] of " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' must be a number."
        End If
        If sUnit = "" Then
            LogError 3, wsD.Range("D_Unit").Rows(iRow), "[Mass Unit] for " & wsD.Range("D_Type").Rows(iRow).Value & " '" & wsD.Range("D_Name").Rows(iRow).Value & "' can not be blank."
        End If
        
        Set elMass = xmlDoc.createNode(NODE_ELEMENT, "Amount", sNS)
        Select Case wsD.Range("D_Type").Rows(iRow).Value
        Case "CatPart", "SubPart"
            './Product|SubProduct/ProductID/Amount
            elPID.appendChild elMass
        Case "Material"
            './HomogeneousMaterial/Amount
            elMat.InsertBefore elMass, elMat.FirstChild
        Case "Substance"
            If sUnit = "%" Then
                './Substance/Concentration
                Set elConc = xmlDoc.createNode(NODE_ELEMENT, "Concentration", sNS)
                elSubst.appendChild elConc
                elConc.setAttribute "value", fMass(iLvl)
            ElseIf sUnit = "ppm" Then
                './Substance/Concentration
                Set elConc = xmlDoc.createNode(NODE_ELEMENT, "Concentration", sNS)
                elSubst.appendChild elConc
                elConc.setAttribute "value", fMass(iLvl) / 10000
            Else
                './Substance/Amount
                elSubst.appendChild elMass
            End If
        End Select
        
        'change mass from (lb, oz, %, ppm) to g
        If sUnit <> "mg" And sUnit <> "g" And sUnit <> "kg" Then
            Call StdUnitMass(fMass, sUnit)
        End If
        
        './Amount/@value
        If fMass(iLvl) > 0 Then
            elMass.setAttribute "value", fMass(iLvl)
        End If
        './Amount/@UOM
        If sUnit <> "" Then
            elMass.setAttribute "UOM", sUnit
        End If
        
        'change mass (mg, kg) to g
        Call StdUnitMass(fMass, sUnit)
        
        'add mass to running total or clear counter
        ReDim Preserve fTMass(0 To iLvl)
        If iLvl > 0 Then
            fTMass(iLvl) = fTMass(iLvl) + fMass(iLvl) * fQty
        End If
SkipRowD:
    Next iRow
    
    'find compound Materials that need to be flattened
    Set nlTemp = xmlDoc.SelectNodes("//ipc:HomogeneousMaterial[ipc:MaterialInfo/ipc:HomogeneousMaterialList/ipc:HomogeneousMaterial/ipc:SubstanceCategoryList/ipc:SubstanceCategory/ipc:Substance]")
    For Each elTemp In nlTemp
        'read compound Material mass
        ReDim fMass(0)
        Set elMass = elTemp.SelectSingleNode("ipc:Amount")
        fMass(0) = Val(elMass.getAttribute("value") & "")
        sUnit = elMass.getAttribute("UOM") & ""
        Call StdUnitMass(fMass, sUnit)
        
        If fMass(0) > 0 Then 'test parent mass to avoid runtime error
            'setup compound Material to receive Substances
            Set elSubCatList = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryList", sNS)
            elTemp.appendChild elSubCatList
            Set elID = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategoryListID", sNS)
            elSubCatList.appendChild elID
            elID.setAttribute "identity", "Supplier"
            Set elSubCat = xmlDoc.createNode(NODE_ELEMENT, "SubstanceCategory", sNS)
            elSubCatList.appendChild elSubCat
            elSubCat.setAttribute "name", "none"
            
            'find sub Materials
            Set nlTemp2 = elTemp.SelectNodes("ipc:MaterialInfo/ipc:HomogeneousMaterialList/ipc:HomogeneousMaterial")
            For Each elMat In nlTemp2
                'read sub Material mass
                ReDim Preserve fMass(0 To 1)
                Set elMass = elMat.SelectSingleNode("ipc:Amount")
                fMass(1) = Val(elMass.getAttribute("value") & "")
                sUnit = elMass.getAttribute("UOM") & ""
                Call StdUnitMass(fMass, sUnit)
    
                'find Substances
                Set nlTemp3 = elMat.SelectNodes("ipc:SubstanceCategoryList/ipc:SubstanceCategory/ipc:Substance")
                For Each elSubst In nlTemp3
                    'read Substance mass
                    ReDim Preserve fMass(0 To 2)
                    Set elMass = elSubst.SelectSingleNode("ipc:Amount")
                    If elMass Is Nothing Then
                        Set elMass = elSubst.SelectSingleNode("ipc:Concentration")
                        sUnit = "%"
                    Else
                        sUnit = elMass.getAttribute("UOM") & ""
                    End If
                    fMass(2) = Val(elMass.getAttribute("value") & "")
                    Call StdUnitMass(fMass, sUnit)
    
                    'move Substance from subMaterial to compound Material
                    elSubCat.appendChild elSubst
    
                    'write Substance concentration
                    elSubst.RemoveChild elMass
                    Set elMass = xmlDoc.createNode(NODE_ELEMENT, "Concentration", sNS)
                    elSubst.appendChild elMass
                    elMass.setAttribute "value", fMass(2) / fMass(0) * 100
    
                Next elSubst
            Next elMat
            
            'remove all sub Materials
            elTemp.RemoveChild elTemp.SelectSingleNode("ipc:MaterialInfo")
        End If
    Next elTemp
    
Case Else 'not Class C or Class D
    LogError 3, wsGen.Range("G_Dec_Class"), "[Declaration Class] can not be blank."
End Select

LogError 1, , "Data verification complete."
Set ConstructIPC = cXmlDocs

End Function


Sub ParseECHA(xmlDoc As Object)
On Error GoTo 0

'Excel variables
Dim iRow As Long 'row counter
Dim rnCell As Object 'Excel.Range 'object for any single cell
Dim iRowNext As Long 'next available row

'XML variables
Dim elSubst As Object 'MSXML2.IXMLDOMElement
Dim nlSubst As Object 'MSXML2.IXMLDOMNodeList
Dim elTemp As Object 'MSXML2.IXMLDOMElement
Dim nlTemp As Object 'MSXML2.IXMLDOMNodeList

Dim sReg As String

Dim sWord As String 'generic string
Dim dDay As Date 'generic date
Dim iCount As Integer

Dim oRegEx As Object
Set oRegEx = CreateObject("VBScript.RegExp")
Dim oREMS As Object
oRegEx.Global = True
oRegEx.IgnoreCase = False

LogError 1, , "Importing ECHA Substances to RAPID form."

Select Case xmlDoc.DocumentElement.BaseName
Case "candidate-list", "candidate-list-of-svhc-for-authorisation"
    sReg = "SVHC"
Case "restriction-list--annex-xvii-"
    sReg = "XVII"
Case Else
    GoTo Quit
End Select

'find next blank row in Lists
iRowNext = wsList.Range("L_Subst_ID:L_Subst_cross").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1

'filter table for REACH only
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2, Criteria1:=sReg

'import substances to List
Set nlSubst = xmlDoc.SelectNodes("//results/result")
For Each elSubst In nlSubst

    'check if substance already exists in List
    'results/result/decision
    'results/result/conditions
    Set nlTemp = elSubst.SelectNodes("decision|conditions")
    For Each elTemp In nlTemp
        sWord = Trim(elTemp.nodeTypedValue)
        Set rnCell = wsList.Range("L_Subst_decision").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
        If Not rnCell Is Nothing Then
            LogError 1, , "record found by decision"
            Exit For
        End If
    Next elTemp
    'results/result/substance-name
    If rnCell Is Nothing Then
        Set elTemp = elSubst.SelectSingleNode("substance-name")
        sWord = Trim(elTemp.nodeTypedValue)
        If Len(sWord) > 255 Then
            sWord = Left(sWord, 254) & "*"
        End If
        Set rnCell = wsList.Range("L_Subst_ECHA").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
        If Not rnCell Is Nothing Then
            If rnCell.Value <> sWord Then
                If vbNo = MsgBox(rnCell.Value & vbNewLine & vbNewLine & sWord, vbYesNo) Then GoTo Quit '!!!!!!!!!!!!!!!!!!!!!
            End If
            LogError 1, , "record found by name"
        End If
    End If
    
    
    If rnCell Is Nothing Then 'new substance
        iRow = iRowNext
        iRowNext = iRowNext + 1
        LogError 1, wsList.Range("L_Subst_ECHA").Rows(iRow), "adding new SubstCat: " & sWord
        wsList.Range("L_Subst_spec").Rows(iRow).Value = sReg
        If sReg = "SVHC" Then
            wsList.Range("L_Subst_thresh").Rows(iRow).Value = "1000 PPM"
        End If
    Else 'existing substance
        iRow = rnCell.Row
    End If
    
    
    If wsList.Range("L_Subst_ECHA").Rows(iRow).Value = "" Then
        'results/result/substance-name
        Set elTemp = elSubst.SelectSingleNode("substance-name")
        If Not elTemp Is Nothing Then
            'remove bold and italic text
            oRegEx.Pattern = "<(em|i)>.*?</\1>|</?\w*?\s?/?>" 'all tags and anything inside of italics or emphasis tags
            sWord = oRegEx.Replace(elTemp.nodeTypedValue, "")
            sWord = Trim(sWord)
            wsList.Range("L_Subst_ECHA").Rows(iRow).Value = sWord
        End If
    End If
    
    'results/result/decision
    'results/result/conditions
    Set elTemp = elSubst.SelectSingleNode("decision|conditions")
    If Not elTemp Is Nothing Then
        wsList.Range("L_Subst_decision").Rows(iRow).Value = Trim(elTemp.nodeTypedValue)
    End If
    
    'results/result/date-of-inclusion
    Set elTemp = elSubst.SelectSingleNode("date-of-inclusion")
    If Not elTemp Is Nothing Then
        oRegEx.Pattern = "^(\d{1,2})/(\d{1,2})/(\d{4})$"
        Set oREMS = oRegEx.Execute(elTemp.nodeTypedValue)
        wsList.Range("L_Subst_date").Rows(iRow).Value = DateSerial(oREMS(0).SubMatches(2), oREMS(0).SubMatches(1), oREMS(0).SubMatches(0))
    End If
    
    'results/result/entry-no.
    Set elTemp = elSubst.SelectSingleNode("entry-no.")
    If Not elTemp Is Nothing Then
        If wsList.Range("L_Subst_ID").Rows(iRow).Value = "" Then
            wsList.Range("L_Subst_ID").Rows(iRow).Value = "EUREACH-XVII-" & elTemp.nodeTypedValue
        End If
    End If

    'results/result/cas-no.
    sWord = wsList.Range("L_Subst_CAS").Rows(iRow).Value
    oRegEx.Pattern = "\d{1,7}-\d{2}-\d"
    Set nlTemp = elSubst.SelectNodes("cas-no.")
    For Each elTemp In nlTemp
        Set oREMS = oRegEx.Execute(elTemp.nodeTypedValue)
        For iCount = 0 To oREMS.Count - 1
            If InStr(1, sWord, oREMS.Item(iCount)) = 0 Then
                If Len(sWord) > 0 Then
                    sWord = sWord & ", "
                End If
                sWord = sWord & oREMS.Item(iCount)
            End If
        Next iCount
    Next elTemp
    If Len(sWord) > 0 Then
        wsList.Range("L_Subst_CAS").Rows(iRow).Value = sWord
    End If

    'results/result/ec-no.
    sWord = wsList.Range("L_Subst_EC").Rows(iRow).Value
    oRegEx.Pattern = "\d{3}-\d{3}-\d"
    Set nlTemp = elSubst.SelectNodes("ec-no.")
    For Each elTemp In nlTemp
        Set oREMS = oRegEx.Execute(elTemp.nodeTypedValue)
        For iCount = 0 To oREMS.Count - 1
            If InStr(1, sWord, oREMS.Item(iCount)) = 0 Then
                If Len(sWord) > 0 Then
                    sWord = sWord & ", "
                End If
                sWord = sWord & oREMS.Item(iCount)
            End If
        Next iCount
    Next elTemp
    If Len(sWord) > 0 Then
        wsList.Range("L_Subst_EC").Rows(iRow).Value = sWord
    End If
    
Next elSubst

'unfilter substance list
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2

'sort substances in Lists
With wsList.ListObjects("tSubst").Sort
    .SortFields.Clear
    .SortFields.Add Key:=wsList.Range("L_Subst_spec"), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
    .SortFields.Add Key:=wsList.Range("L_Subst_date"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    .SortFields.Add Key:=wsList.Range("L_Subst_ID"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    .SortFields.Add Key:=wsList.Range("L_Subst_ECHA"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With

If sReg = "SVHC" Then
    'add ID to each substance category if missing
    Call AddSubstCatID
    
    'add new entery to SVHC list rev list
    dDay = Application.WorksheetFunction.MaxIfs(wsList.Range("L_Subst_date"), wsList.Range("L_Subst_spec"), "SVHC")
    sWord = wsList.Range("L_SVHC_List_Name").Cells(wsList.Range("L_SVHC_List_Name").Rows.Count, 1).Value
    sWord = Right(sWord, 9) 'Mmm-YYYY)
    sWord = Left(sWord, 8) 'Mmm-YYYY
    If DateSerial(Year(dDay), Month(dDay), 1) > CDate(sWord) Then 'newest SVHC greater then last list entry
        wsList.ListObjects("tSVHClist").ListRows.Add
        sWord = "EUREACH-" & Format(dDay, "MMYY")
        wsList.Range("L_SVHC_List_ID").Cells(wsList.Range("L_SVHC_List_ID").Rows.Count, 1).Value = sWord
        sWord = "EU REACH - " & Application.WorksheetFunction.CountIf(wsList.Range("L_Subst_spec"), "SVHC") & " SVHCs (" & Format(dDay, "mmm-YYYY") & ")"
        wsList.Range("L_SVHC_List_Name").Cells(wsList.Range("L_SVHC_List_Name").Rows.Count, 1).Value = sWord
    End If
End If

            GoTo Quit '########## for testing ##########

Call UpdateSubstCatClsC

wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter
wsC.Range("C_Headings").Rows(wsC.Range("C_Headings").Rows.Count).AutoFilter


Quit:
LogError 1, , "Finished importing REACH Subsances."
End Sub

Sub ParseSubstCatList(xmlDoc As Object)
On Error GoTo 0

'Excel variables
Dim rnCell As Object 'Excel.Range 'object for any single cell
Dim iRow As Long 'row counter
Dim iRowNext As Long 'next available row

'XML variables
Dim nlTemp As Object
Dim atTemp As Object

Dim sReg As String
Dim sWord As String
Dim iLookAt As Integer

Set atTemp = xmlDoc.SelectSingleNode("SubstanceCategoryList/SubstanceCategoryListID[@authority='IPC']/@identity")
If atTemp Is Nothing Then
    GoTo Quit
ElseIf atTemp.NodeValue Like "EUREACH-ARTICLE67-*" Then
    sReg = "XVII"
ElseIf atTemp.NodeValue Like "EUREACH-*" Then
    sReg = "REACH"
Else
    GoTo Quit
End If

LogError 1, , "Importing IPC SubstanceCategoryList to RAPID form."


'find next blank row in Lists
iRowNext = wsList.Range("L_Subst_ID:L_Subst_cross").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1

'filter table for REACH only
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2, Criteria1:=sReg

'import substances to List
Set nlTemp = xmlDoc.SelectNodes("SubstanceCategoryList/SubstanceCategory/@name")
For Each atTemp In nlTemp
    sWord = Trim(atTemp.NodeValue & "")
    If Len(sWord) > 255 Then
        sWord = Left(sWord, 254) & "*"
    End If
    
    Set rnCell = wsList.Range("L_Subst_IPC").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
    If rnCell Is Nothing Then
    
        Set rnCell = wsList.Range("L_Subst_names").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
        If rnCell Is Nothing Then 'new subst
            LogError 1, , "Adding new substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(iRowNext).Value = Trim(atTemp.NodeValue & "")
            wsList.Range("L_Subst_spec").Rows(iRowNext).Value = sReg
            iRowNext = iRowNext + 1
            
        ElseIf wsList.Range("L_Subst_IPC").Rows(rnCell.Row).Value = "" Then 'match found
            LogError 1, , "Adding IPC name for existing substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(rnCell.Row).Value = Trim(atTemp.NodeValue & "")
            
        Else 'ipc name conflict
            LogError 1, , "Adding new substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(iRowNext).Value = Trim(atTemp.NodeValue & "")
            wsList.Range("L_Subst_spec").Rows(iRowNext).Value = sReg
            iRowNext = iRowNext + 1
            
        End If
    End If
    
Next atTemp

'unfilter substance list
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2

LogError 1, , "Finished importing Substance Categories."

Quit:
End Sub

Sub ParseDescriptor(xmlDoc As msxml2.DOMDocument60) 'Object)
On Error GoTo 0

'Excel variables
Dim rnCell As Object 'Excel.Range 'object for any single cell
'Dim iRow As Long 'row counter
Dim iRowNext As Long 'next available row

'XML variables
Const sNS1 As String = "http://pe-international.com/cpm/ruleset.export"
Const sNS3 As String = "http://pe-international.com/cpm/declaration.export"
Dim nlTemp As Object
Dim elTemp As Object
Dim atTemp As Object

Dim sReg As String
Dim sWord As String
Dim iLookAt As Integer

xmlDoc.setProperty "SelectionNamespaces", "xmlns:ns1='" & sNS1 & "' xmlns:ns3='" & sNS3 & "'"

If xmlDoc.DocumentElement.NamespaceURI = sNS1 Then
    LogError 1, , "Importing Descriptor data to RAPID form."
Else
    LogError 3, , "wrong xml schema for descriptor file."
    GoTo Quit
End If

'find regulation
Select Case xmlDoc.DocumentElement.getAttribute("ns1:name")
Case "RoHS EU"
    sReg = "RoHS"
Case "REACH Candidate EU"
    sReg = "SVHC"
Case "Prop65 Cal"
    sReg = "Prop65"
Case Else
    LogError 3, , "Regulation name not recognized"
    GoTo Quit
End Select


'find next blank row in Lists
iRowNext = wsList.Range("L_Subst_ID:L_Subst_cross").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row + 1

'filter table for applicable regulation only
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2, Criteria1:=sReg

'import substances to List
Set nlTemp = xmlDoc.SelectNodes("ns1:ruleset/ns1:substanceChecks/ns1:substanceCheck/ns1:substanceCategory/@ns1:name")
For Each atTemp In nlTemp
    sWord = Trim(atTemp.NodeValue & "")
    If Len(sWord) > 255 Then
        sWord = Left(sWord, 254) & "*"
    End If
    
    Set rnCell = wsList.Range("L_Subst_IPC").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
    If rnCell Is Nothing Then
        Set rnCell = wsList.Range("L_Subst_names").Find(sWord, , xlValues, xlWhole, xlByRows, xlNext)
        If rnCell Is Nothing Then
            LogError 1, , "Adding new substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(iRowNext).Value = Trim(atTemp.NodeValue & "")
            wsList.Range("L_Subst_spec").Rows(iRowNext).Value = sReg
            iRowNext = iRowNext + 1
        ElseIf wsList.Range("L_Subst_IPC").Rows(rnCell.Row).Value = "" Then
            LogError 1, , "Adding IPC name for substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(rnCell.Row).Value = Trim(atTemp.NodeValue & "")
        Else
            LogError 1, , "Adding new substance '" & sWord & "'"
            wsList.Range("L_Subst_IPC").Rows(iRowNext).Value = Trim(atTemp.NodeValue & "")
            wsList.Range("L_Subst_spec").Rows(iRowNext).Value = sReg
            iRowNext = iRowNext + 1
        End If
    End If
    
Next atTemp

'unfilter substance list
wsList.ListObjects("tSubst").Range.AutoFilter Field:=2


LogError 1, , "Finished importing Substance Categories."

Quit:
End Sub

Sub AddSubstCatID()
Dim iRow As Long
Dim iCount As Long
Dim sReg  As String
Dim sFmt    As String

For iRow = 2 To wsList.Range("L_Subst_ID:L_Subst_cross").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
    Select Case wsList.Range("L_Subst_spec").Rows(iRow).Value
    Case "RoHS"
        sReg = "EUROHS-"
        sFmt = "YYMM"
    Case "SVHC"
        sReg = "EUREACH-"
        sFmt = "MMYY"
    Case "Prop65"
        sReg = "CALPROP65-"
        sFmt = "YYMM"
    End Select
    
    If wsList.Range("L_Subst_date").Rows(iRow).Value <> wsList.Range("L_Subst_date").Rows(iRow - 1).Value Then
        iCount = 1
    Else
        iCount = iCount + 1
    End If
    
    If wsList.Range("L_Subst_ID").Rows(iRow).Value = "" Then
        wsList.Range("L_Subst_ID").Rows(iRow).Value = sReg & Format(wsList.Range("L_Subst_date").Rows(iRow).Value, sFmt) & "-" & Format(iCount, "00")
    End If
    
Next iRow
End Sub


Sub UpdateSubstCatClsC()

Dim iCol As Integer
Dim iRow As Integer
Dim sWord As String
Dim rnCell As Object 'Excel.Range
Dim iReg As Integer
Dim sReg As String
Dim sCrng As String
Dim sLrng As String
Dim sCmt As String
Dim iSearch As Integer

wsC.Range("C_RoHS_Subs, C_SVHC_Subs, C_XVII_Subs, C_PROP65_Subs").EntireColumn.Hidden = False
wsC.Range("C_Head_ID").EntireRow.Hidden = False

'loop through entire SubstCat table
iRow = 2
Do Until wsList.Range("L_Subst_ID").Rows(iRow).Value = ""
    'check regulation
    sReg = wsList.Range("L_Subst_spec").Rows(iRow).Value
    Select Case sReg
    Case "SVHC"
        sCrng = "C_SVHC_Subs"
    Case "ROHS"
        sCrng = "C_RoHS_Subs"
    Case "PROP65"
        sCrng = "C_PROP65_Subs"
    Case "XVII"
        sCrng = "C_XVII_Subs"
    End Select
    
    'search for SubstCat in ClassC by ID
    sWord = wsList.Range("L_Subst_ID").Rows(iRow).Value
    Set rnCell = wsC.Range(sCrng & " C_Head_ID").Find(sWord, , xlValues, xlWhole, xlByColumns, xlNext)
    
    If rnCell Is Nothing Then 'not found
        'search for SubstCat in ClassC by Name
        sWord = wsList.Range("L_Subst_ECHA").Rows(iRow).Value
        If Len(sWord) > 255 Then
            sWord = Left(sWord, 254) & "*"
        End If
        Set rnCell = wsC.Range(sCrng & " C_Headings").Rows(1).Find(sWord, , xlValues, xlWhole, xlByColumns, xlNext)
        
        If Not rnCell Is Nothing Then
            LogError 1, rnCell, "Existing Substance Category found by name: " & sWord
        End If
    End If
    
    If rnCell Is Nothing Then 'not found
        LogError 1, "wsC", "Copying Substance Category "
        iCol = wsC.Range(sCrng).Column + wsC.Range(sCrng).Columns.Count
        wsC.Columns(iCol).Insert
        Application.Names(sCrng).RefersTo = wsC.Range(sCrng, wsC.Cells(1, iCol)).EntireColumn
    Else
        iCol = rnCell.Column
    End If
    
    'write data to wsC'
    '-ID
    wsC.Range("C_Head_ID").Columns(iCol).Value = wsList.Range("L_Subst_ID").Rows(iRow).Value
    
    '-Substance Category name
    If wsList.Range("L_Subst_scope").Rows(iRow).Value = "" Then
        wsC.Range("C_Headings").Cells(1, iCol).Value = wsList.Range("L_Subst_ECHA").Rows(iRow).Value
    Else
        wsC.Range("C_Headings").Cells(1, iCol).Value = wsList.Range("L_Subst_ECHA").Rows(iRow).Value & Chr(10) & "(" & wsList.Range("L_Subst_scope").Rows(iRow).Value & ")"
    End If
    
    '-CAS number
    If wsList.Range("L_Subst_CAS").Rows(iRow).Value = "" Then
    ElseIf wsList.Range("L_Subst_CAS").Rows(iRow).Value Like "*,*" Then 'multiple
        wsC.Range("C_Head_CAS").Columns(iCol).Value = "Multiple CAS"
        If Not wsC.Range("C_Head_CAS").Columns(iCol).Comment Is Nothing Then
            wsC.Range("C_Head_CAS").Columns(iCol).Comment.Delete
        End If
        wsC.Range("C_Head_CAS").Columns(iCol).AddComment wsList.Range("L_Subst_CAS").Rows(iRow).Value
    Else 'single
        wsC.Range("C_Head_CAS").Columns(iCol).Value = wsList.Range("L_Subst_CAS").Rows(iRow).Value
    End If
    
    If sReg = "ROHS" Or sReg = "SVHC" Then
        'Mass'
        'data label row
        wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Mass"
        If Not wsC.Range("C_Head_Lbl").Columns(iCol).Comment Is Nothing Then
            wsC.Range("C_Head_Lbl").Columns(iCol).Comment.Delete
        End If
        wsC.Range("C_Head_Lbl").Columns(iCol).AddComment "Total Mass of the substance in the entire Part"
        'data unit row
        wsC.Range("C_Head_Unit").Columns(iCol).Value = "g"
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Delete
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_UOM"
        
        'MaxPPM'
        If wsC.Range("C_Headings").Cells(1, iCol + 1).Value <> " " Then
            wsC.Columns(iCol + 1).Insert
            Application.Names(sCrng).RefersTo = wsC.Range(sCrng, wsC.Cells(1, iCol + 1)).EntireColumn
            wsC.Range("C_Headings").Cells(1, iCol + 1).Value = " "
        End If
        Range(wsC.Range("C_Head_CAS").Columns(iCol), wsC.Range("C_Head_CAS").Columns(iCol + 1)).Merge 'CAS
        iCol = iCol + 1
        
        'data label row
        wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Max PPM"
        If Not wsC.Range("C_Head_Lbl").Columns(iCol).Comment Is Nothing Then
            wsC.Range("C_Head_Lbl").Columns(iCol).Comment.Delete
        End If
        If sReg = "RoHS" Then
            wsC.Range("C_Head_Lbl").Columns(iCol).AddComment "Concentration of the substance in the single homogeneous material with the highest concentration within the part"
        ElseIf sReg = "REACH" Then
            wsC.Range("C_Head_Lbl").Columns(iCol).AddComment "Concentration of the substance in the single article with the highest concentration within the part"
        End If
        'data unit row
        wsC.Range("C_Head_Unit").Columns(iCol).Value = "ppm"
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Delete
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=L_UOMrel"
        
    ElseIf sReg = "XVII" Then
        'cas row (Entry number)
        wsC.Hyperlinks.Add wsC.Range("C_Head_CAS").Columns(iCol), wsList.Range("L_Subst_decision").Rows(iRow).Value, , , "REACH Annex XVII - Entry " & Mid(wsList.Range("L_Subst_ID").Rows(iRow).Value, 14)
        wsC.Range("C_Head_CAS").Columns(iCol).Value = "Entry " & Mid(wsList.Range("L_Subst_ID").Rows(iRow).Value, 14)
        'data label row
        wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Restriction Entry - Declaration"
        If Not wsC.Range("C_Head_Lbl").Columns(iCol).Comment Is Nothing Then
            wsC.Range("C_Head_Lbl").Columns(iCol).Comment.Delete
        End If
        wsC.Range("C_Head_Lbl").Columns(iCol).AddComment "Does the Product meet this REACH Annex XVII entry's requirements?"
        'data unit row
        wsC.Range("C_Head_Unit").Columns(iCol).Value = ""
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Delete
        
        
    ElseIf sReg = "PROP65" Then
        'data label row
        wsC.Range("C_Head_Lbl").Columns(iCol).Value = "Exposure"
        If Not wsC.Range("C_Head_Lbl").Columns(iCol).Comment Is Nothing Then
            wsC.Range("C_Head_Lbl").Columns(iCol).Comment.Delete
        End If
        wsC.Range("C_Head_Lbl").Columns(iCol).AddComment "Does the Part have an exposure risk for this subtance"
        'data unit row
        wsC.Range("C_Head_Unit").Columns(iCol).Value = "T/F"
        wsC.Range("C_Head_Unit").Columns(iCol).Validation.Delete
    End If

    iRow = iRow + 1
Loop


'add basic borders to all cells
With wsC.Range("C_RoHS_Subs, C_SVHC_Subs, C_XVII_Subs, C_PROP65_Subs")
    .Borders(xlEdgeTop).LineStyle = xlContinuous
    .Borders(xlEdgeBottom).LineStyle = xlContinuous
    .Borders(xlEdgeLeft).LineStyle = xlContinuous
    .Borders(xlEdgeRight).LineStyle = xlContinuous
    .Borders(xlInsideVertical).LineStyle = xlContinuous
    .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    .Borders(xlEdgeTop).Weight = xlThin
    .Borders(xlEdgeBottom).Weight = xlThin
    .Borders(xlEdgeLeft).Weight = xlThin
    .Borders(xlEdgeRight).Weight = xlThin
    .Borders(xlInsideVertical).Weight = xlThin
    .Borders(xlInsideHorizontal).Weight = xlThin
End With

'set backgroud color for heading rows
wsC.Range("C_Headings C_RoHS_Subs").Interior.Color = iGreen
wsC.Range("C_Headings C_SVHC_Subs").Interior.Color = iOrange
wsC.Range("C_Headings C_XVII_Subs").Interior.Color = iOrange
wsC.Range("C_Headings C_PROP65_Subs").Interior.Color = iViolet

'set text properties for each heading row
'names
With wsC.Range("C_Headings C_RoHS_Subs:C_PROP65_Subs").Rows(1)
    .HorizontalAlignment = xlLeft
    .VerticalAlignment = xlBottom
    .WrapText = False
    .Orientation = 15
    .Font.Name = "Calibri"
    .Font.FontStyle = "Bold Italic"
    .Font.Size = 11
End With
For iCol = wsC.Range("C_XVII_Subs").Column To wsC.Range("C_XVII_Subs").Column + wsC.Range("C_XVII_Subs").Columns.Count
    iSearch = InStr(1, wsC.Range("C_Headings").Cells(1, iCol).Value, Chr(10))
    If iSearch Then
        With wsC.Range("C_Headings").Cells(1, iCol)
            .WrapText = True
            .Font.FontStyle = "Italic"
            .Characters(1, iSearch).Font.FontStyle = "Bold Italic"
        End With
    End If
Next iCol


'cas
With wsC.Range("C_Head_CAS C_RoHS_Subs:C_PROP65_Subs")
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    .WrapText = False
    .NumberFormat = "@"
    .Font.Name = "Calibri"
    .Font.FontStyle = "Bold"
    .Font.Size = 11
End With
'label
With wsC.Range("C_Head_Lbl C_RoHS_Subs:C_PROP65_Subs")
    .HorizontalAlignment = xlLeft 'xlRight
    .VerticalAlignment = xlCenter
    .WrapText = False
    .Font.Name = "Calibri"
    .Font.FontStyle = "Bold"
    .Font.Size = 11
End With
'wsC.Range("C_Head_Lbl C_PROP65_Subs").HorizontalAlignment = xlCenter
'unit
With wsC.Range("C_Head_Unit C_RoHS_Subs:C_PROP65_Subs")
    .HorizontalAlignment = xlCenter 'xlRight
    .VerticalAlignment = xlCenter
    .WrapText = False
    .NumberFormat = ";;;\(@\)"
    .Font.Name = "Arial"
    .Font.FontStyle = "Bold"
    .Font.Size = 11
    .IndentLevel = 0 '2
End With
wsC.Range("C_Head_Unit C_RoHS_Subs:C_SVHC_Subs").Interior.ColorIndex = xlNone

'set thick boarders between substance columns
For iCol = wsC.Range("C_RoHS_Subs").Column To wsC.Range("C_SVHC_Subs").Column + wsC.Range("C_SVHC_Subs").Columns.Count Step 2
    wsC.Columns(iCol).Borders(xlEdgeLeft).Weight = xlMedium
    wsC.Range("C_Headings").Cells(1, iCol).Borders(xlEdgeRight).LineStyle = xlNone
Next iCol
With wsC.Range("C_XVII_Subs:C_PROP65_Subs")
    .Borders(xlEdgeLeft).Weight = xlMedium
    .Borders(xlEdgeRight).Weight = xlMedium
    .Borders(xlInsideVertical).Weight = xlMedium
End With

'wsC.Range("C_RoHS_Subs, C_SVHC_Subs").EntireColumn.AutoFit

End Sub




Sub ShareDuplicatedSubstances(rnTarget As Range)
Dim sRegs As String
Dim sRegD As String
Dim rnCell As Object 'Excel.Range
Dim sWord As String
Dim fMass(0 To 1) As Double
'ReDim fMass(0)
Dim sUnit As String
Dim sUnit2 As String

Set rnCell = wsList.Range("L_Subst_ID").Find(wsC.Range("C_Head_ID").Columns(rnTarget.Column), , xlValues, xlWhole, xlByRows, xlNext)
If Not rnCell Is Nothing Then
    Set rnCell = wsC.Range("C_Head_ID").Find(wsList.Range("L_Subst_cross").Rows(rnCell.Row).Value, , xlValues, xlWhole, xlByColumns, xlNext)
    If Not rnCell Is Nothing Then
        Set rnCell = wsC.Cells(rnTarget.Row, rnCell.Column)
        fMass(0) = wsC.Range("C_PMass").Rows(rnTarget.Row).Value
        sUnit = wsC.Range("C_Head_Unit C_PMass").Value
        StdUnitMass fMass, sUnit
        fMass(1) = rnTarget.Value
        sUnit = wsC.Range("C_Head_Unit").Columns(rnTarget.Column).Value
        sUnit2 = wsC.Range("C_Head_Unit").Columns(rnCell.Column).Value
        StdUnitMass fMass, sUnit, sUnit2
        rnCell.Value = fMass(1)
    End If
End If
End Sub



Attribute VB_Name = "Module2"
Option Explicit
'available through Macros menue in Excel

Sub UnlockRequestor()
On Error GoTo 0

Call ProtectSheets(False)

Range("G_Req_Lock").Value = False
Call UpdateLock

Quit:
'If Err.Number <> 0 Then Debug.Print "Error"; Err.Number; Err.Description
If Err.Number <> 0 Then LogError 3, "UnlockRequestor()", "Run time error: " & Err.Description & "."
Call ProtectSheets(True)

End Sub

Sub ShowHideSupPN()

Call ProtectSheets(False)

If wsC.Range("C_SNum").EntireColumn.Hidden Then
    wsC.Range("C_SNum").EntireColumn.Hidden = False
Else
    wsC.Range("C_SNum", "C_SName").EntireColumn.Hidden = True
End If

Call ProtectSheets(True)
End Sub

Sub ImportXML()
Call Btn_ImportXML
End Sub

Sub LoopBack()
Dim xmlDocs() As Object 'As MSXML2.DOMDocument60
Dim iCount As Integer

Call ProtectSheets(False)
LogError -1

xmlDocs = ConstructIPC()
Call ClearForm

For iCount = 0 To UBound(xmlDocs)
    ParseIPC xmlDocs(iCount), True
Next iCount

Call ProtectSheets(True)
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_Open()

'Dim wsGen As Excel.Worksheet
'Set wsGen = Sheet1 'ThisWorkbook.Worksheets("General")
'Dim wsC As Excel.Worksheet
'Set wsC = Sheet2 'ThisWorkbook.Worksheets("ClassC")
'Dim wsD As Excel.Worksheet
'Set wsD = Sheet3 'ThisWorkbook.Worksheets("ClassD")
Dim oComment As Object 'Excel.Comment

iDispMsg = True

Call ProtectSheets(False)

wsGen.Range("G_Macro_Inst").EntireRow.Hidden = True
wsGen.Range("G_Gen_Inst").EntireRow.Hidden = False

For Each oComment In wsGen.Comments
    Call FormatComment(oComment)
Next oComment
For Each oComment In wsC.Comments
    Call FormatComment(oComment)
Next oComment
For Each oComment In wsD.Comments
    Call FormatComment(oComment)
Next oComment

Call ProtectSheets(True)
wsList.Visible = False
wsInst.Protect

On Error Resume Next
wsGen.Activate
wsGen.Range("G_Gen_Inst").Activate
On Error GoTo 0

End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
If SaveAsUI Then
    Dim sPath As String
    Cancel = True
    sPath = Application.GetSaveAsFilename(ThisWorkbook.Name, "Excel Macro-Enabled Workbook (*.xlsm),*.xlsm,Excel Binary Workbook (*.xlsb),*.xlsb,Excel Workbook (*.xlsx),*.xlsx", 1)
    If sPath <> "False" Then
        Select Case Right(sPath, 4)
        Case "xlsm"
            ThisWorkbook.SaveAs sPath, 52
        Case "xlsb"
            ThisWorkbook.SaveAs sPath, 50
        Case "xlsx"
            If vbOK = MsgBox("You are saving RAPID in format which does not support macros." & vbNewLine & "This will prevent RAPID from working correctly and is not reversible." & vbNewLine & "Are you sure want to continue?", vbCritical + vbOKCancel + vbDefaultButton2, "Incompatible File Format") Then
                ThisWorkbook.SaveAs sPath, 51
            End If
        End Select
    End If
    
End If
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
wsGen.Range("G_Gen_Inst").EntireRow.Hidden = True
wsGen.Range("G_Macro_Inst").EntireRow.Hidden = False
On Error Resume Next
wsGen.Activate
wsGen.Range("G_Macro_Inst").Activate
On Error GoTo 0
End Sub


Attribute VB_Name = "fAddNewSubstance"
Attribute VB_Base = "0{D906C9E3-F7F9-434C-A2AD-672F6A6EAEA1}{6C22F7C9-AE90-49FA-A517-39094E8AB5DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub obtnRoHS_Click()
    Call UPDATE_FORM_GUI
End Sub
Private Sub obtnSVHC_Click()
    Call UPDATE_FORM_GUI
End Sub
Private Sub obtnXVII_Click()
    Call UPDATE_FORM_GUI
End Sub
Private Sub obtnProp65_Click()
    Call UPDATE_FORM_GUI
End Sub

Private Sub cbxSubstanceNm_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        Call UPDATE_FORM_GUI
    End If
End Sub
Private Sub cbxCasNumber_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        Call UPDATE_FORM_GUI
    End If
End Sub

Private Sub btnSEARCH_Click()
    Call UPDATE_FORM_GUI
End Sub

Private Sub btnCLEAR_Click()
    Me.cbxSubstanceNm.Value = ""
    Me.cbxCasNumber.Value = ""
End Sub


Public Sub UPDATE_FORM_GUI(Optional sReg As String)
Dim sWord As String
Dim sWords() As String
Dim dDay As Date
Dim rnCell As Object 'Excel.Range
Dim iRow As Long
Dim iSearch As Long
Dim sName As String
Dim sCAS As String
Dim bFound As Boolean

bFound = False

sName = Me.cbxSubstanceNm.Value
If sName = "" Then
    sName = "*"
Else
    'Changed 2016-07-07 to handle ECHA substance names that contain right and/or left bracket characters
    'These are special characters in VBA and break LIKE and FIND if not replaced
    sName = "*" & UCase(sName) & "*"
    sName = Replace(sName, "[", "?")
    sName = Replace(sName, "]", "?")
End If
sCAS = Me.cbxCasNumber.Value
If sCAS = "" Then
    sCAS = "*"
Else
    sCAS = "*" & UCase(sCAS) & "*"
End If

'find regulation
If Me.obtnRoHS.Value = True Then
    sReg = "ROHS"
ElseIf Me.obtnSVHC.Value = True Then
    sReg = "SVHC"
ElseIf Me.obtnXVII.Value = True Then
    sReg = "XVII"
ElseIf Me.obtnProp65.Value = True Then
    sReg = "PROP65"
Else
    sReg = ""
End If
 
If sReg <> "" Then
    ''find regulation version(date)''
    sWord = wsC.Range("C_Head_Unit C_" & sReg).Value
    'find date part of string
    sWord = Mid(sWord, InStr(1, sWord, "(") + 1)
    sWord = Left(sWord, Len(sWord) - 1)
    'convert to serial date
    dDay = CDate(sWord)
    'get first of next month
    dDay = DateSerial(Year(dDay), Month(dDay) + 1, 1)
    
    ''clear search and result boxes''
    For iSearch = cbxSubstanceNm.ListCount - 1 To 0 Step -1
        cbxSubstanceNm.RemoveItem iSearch
    Next
    For iSearch = cbxCasNumber.ListCount - 1 To 0 Step -1
        cbxCasNumber.RemoveItem iSearch
    Next
    For iSearch = lstbxSubstances.ListCount - 1 To 0 Step -1
        If Me.lstbxSubstances.Selected(iSearch) = False Then
            lstbxSubstances.RemoveItem iSearch
        End If
    Next
    
    iRow = wsList.Range("L_Subst_ECHA").Find("*", , xlValues, xlWhole, xlByRows, xlPrevious).Row
    Do 'loop through all subst cats
        If wsList.Range("L_Subst_spec").Rows(iRow).Value = sReg And _
           wsList.Range("L_Subst_date").Rows(iRow).Value < dDay Then 'subst matches high level criteria
            
            'repopulate search boxs
            Me.cbxSubstanceNm.AddItem wsList.Range("L_Subst_ECHA").Rows(iRow).Value
            If wsList.Range("L_Subst_CAS").Rows(iRow).Value <> "" Then
                sWords = Split(wsList.Range("L_Subst_CAS").Rows(iRow).Value, ",")
                For iSearch = LBound(sWords) To UBound(sWords)
                    sWord = Trim(sWords(iSearch))
                    If sWord <> "" Then
                        Me.cbxCasNumber.AddItem sWord
                    End If
                Next iSearch
'                Me.cbxCasNumber.AddItem wsList.Range("L_Subst_CAS").Rows(iRow).Value
            End If
                
            If UCase(wsList.Range("L_Subst_ECHA").Rows(iRow).Value) Like sName And _
               UCase(wsList.Range("L_Subst_CAS").Rows(iRow).Value) Like sCAS Then 'subst matches user search criteria
                
                bFound = True
                If Not SubstanceExists(wsList.Range("L_Subst_ECHA").Rows(iRow).Value) Then 'not already in search results
                    
                    'check if subst is already visible in ClassC
                    Set rnCell = wsC.Range("C_Head_ID").Find(wsList.Range("L_Subst_ID").Rows(iRow).Value, , xlValues, xlWhole, xlByColumns, xlNext)
                    If rnCell Is Nothing Then
                        With Me.lstbxSubstances
'                            .AddItem wsList.Range("L_Subst_ECHA").Rows(iRow).Value
                            .AddItem
                            .List(.ListCount - 1, 0) = wsList.Range("L_Subst_ID").Rows(iRow).Value
                            .List(.ListCount - 1, 1) = wsList.Range("L_Subst_ECHA").Rows(iRow).Value
                        End With
                    End If
                End If
            End If
        End If
        iRow = iRow - 1
    Loop Until iRow = 1
End If

Me.lblRECORD_COUNT.Caption = "RESULTS: " & lstbxSubstances.ListCount

If bFound = False Then
    MsgBox ("NOTHING FOUND")
End If

End Sub

Private Sub lstbxSubstances_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        Call btnAddSubstances_Click
    End If
End Sub
Private Sub btnAddSubstances_Click()
Dim bError As Boolean
Dim bFound As Boolean
Dim sRng As String
Dim iCount As Long
Dim iCol As Long
bError = True
ProtectSheets msoTriStateMixed

For iCount = 0 To lstbxSubstances.ListCount - 1
    If lstbxSubstances.Selected(iCount) = True Then
        bError = False 'substance selected in listbox
        If Me.obtnRoHS.Value = True Then
            sRng = "C_RoHS_Subs"
        ElseIf Me.obtnSVHC.Value = True Then
            sRng = "C_SVHC_Subs"
        ElseIf Me.obtnXVII.Value = True Then
            sRng = "C_XVII_Subs"
        ElseIf Me.obtnProp65.Value = True Then
            sRng = "C_PROP65_Subs"
        End If
        bFound = False 'reset
        For iCol = wsC.Range(sRng).Column To wsC.Range(sRng).Column + wsC.Range(sRng).Columns.Count
            If bFound = False Then
                If wsC.Range("C_Head_ID").Columns(iCol).Value = lstbxSubstances.List(iCount) Then 'reached first col for substance
                    bFound = True
                    wsC.Columns(iCol).Hidden = False
                End If
            ElseIf wsC.Range("C_Head_ID").Columns(iCol).Value = "" Then 'still in the same substance
                wsC.Columns(iCol).Hidden = False
            Else 'reached next substance
                Exit For
            End If
        Next iCol
    End If
Next iCount
If bError Then
    Application.Cursor = xlDefault
    MsgBox ("Please select a substance to add!")
Else
    Unload fAddNewSubstance
End If
ProtectSheets True
End Sub



Public Function SubstanceExists(sName As String) As Boolean
Dim i As Long

SubstanceExists = False

For i = lstbxSubstances.ListCount - 1 To 0 Step -1
    If lstbxSubstances.List(i) = sName Then
        SubstanceExists = True
    End If
Next

End Function

Attribute VB_Name = "wsC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal rnTargets As Range)
Call ProtectSheets(msoTriStateMixed)
Call RePaste(rnTargets)
'Call ProtectSheets(False)
Call OnInput(rnTargets, True)
Call ProtectSheets(True)
End Sub

Attribute VB_Name = "wsD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal rnTargets As Range)
Call ProtectSheets(msoTriStateMixed)
Call RePaste(rnTargets)
'Call ProtectSheets(False)
Call OnInput(rnTargets, True)
Call ProtectSheets(True)
End Sub



Attribute VB_Name = "wsGen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal rnTarget As Range, bCancel As Boolean)

Select Case rnTarget.Address
Case Range("G_Req_Email").Address
    ThisWorkbook.FollowHyperlink "mailto:" & rnTarget.Value & "?subject=Material%20Declaration%20for%20CAT%20-%20" & wsGen.Range("G_Sup_Co").Value & "%20" & wsGen.Range("G_Sup_CoID").Value
Case Range("G_Req_Lock").Address
    Range("G_Req_Lock").Value = Not Range("G_Req_Lock").Value
Case Range("G_Sup_Lock").Address
    Range("G_Sup_Lock").Value = Not Range("G_Sup_Lock").Value
End Select

End Sub

Private Sub Worksheet_Change(ByVal rnTargets As Range)
Call ProtectSheets(msoTriStateMixed)
Call RePaste(rnTargets)
'Call ProtectSheets(False)
Call OnInput(rnTargets, True)
Call ProtectSheets(True)
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "wsInst"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "wsList"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "wsLog"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal rnTarget As Range, bCancel As Boolean)
On Error Resume Next

Dim wsDest As Object 'Excel.Worksheet
Dim rnDest As Object 'Excel.Range
Dim oRegEx As Object
Dim oREMS As Object 'RegEx Matches

Set oRegEx = CreateObject("VBScript.RegExp")
oRegEx.IgnoreCase = False

oRegEx.Pattern = "^(\w{4,15})!(\$?[A-Z]{1,3}\$?\d{1,7},?:?\$?[A-Z]{0,3}\$?\d{0,7})$"
Set oREMS = oRegEx.Execute(wsLog.Cells(rnTarget.Row, 2).Value)
If oREMS.Count > 0 Then
    Set wsDest = Worksheets(oREMS(0).SubMatches(0))
    If Not wsDest Is Nothing Then
        wsDest.Activate
        Set rnDest = wsDest.Range(oREMS(0).SubMatches(1))
        If Not rnDest Is Nothing Then
            rnDest.Activate
        End If
    End If
End If

End Sub


' InQuest injected base64 decoded content
' .+- 
' *'.+- 
' .+- 

INQUEST-PP=macro
