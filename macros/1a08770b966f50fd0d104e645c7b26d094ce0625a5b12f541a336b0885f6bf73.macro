Attribute VB_Name = "ExcelToCAD"
Public acad As Object
Public mspace As Object
Public excel As Object
Public AcadRunning As Integer
Public excelSheet As Object


Sub HelpExcelToCAD()

    Dim ieApp As Object
    Set ieApp = CreateObject("InternetExplorer.Application")
    ieApp.Visible = True
    strArgument$ = "http://myhome.naver.com/cg125/Help/ExcelToCAD-R2004-1-5-5.html"
    ieApp.Navigate strArgument$


End Sub


Sub VBExcelToCAD()
Attribute VBExcelToCAD.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim sheet As Object
    Dim shapes As Object
    Dim elem As Object
    Dim excel As Object
    Dim Max As Integer
    Dim Min As Integer
    Dim NoOfIndices As Integer
    Dim excelSheet As Object
    Dim RowNum As Integer
    Dim Array1 As Variant
    Dim Count As Integer
    
    Dim HLength As Double
    Dim VLength As Double
    
    Dim SHLength As String
    Dim SVLength As String
    
     
    Set excel = GetObject(, "Excel.Application")
    
    Dim ExcelFileName As String
    Dim ExcelSheetName As String
    Dim ExcelSheetIndex As Integer
    Dim CellRangeStr As String
    Dim CellRangeNum As String
    Dim CellRangeInt As Integer
    Dim i As Integer
    
    Dim doc As Object
    
    
    
    CellRangeStr = Application.Selection.Address
    CellRangeInt = Application.Selection.Count
    CellRangeNum = CStr(CellRangeInt)
    
    Dim WCount As Integer
    
    HLength = 0#
    VLength = 0#
    
    With Selection
        For i = 1 To .Columns.Count
            HLength = HLength + .Columns(i).ColumnWidth
        Next i
        For j = 1 To .Rows.Count
            VLength = VLength + .Rows(j).RowHeight
        Next j
    End With


    SHLength = CStr(HLength)
    SVLength = CStr(VLength)
    


    WCount = Application.ActiveWorkbook.Worksheets.Count
    ExcelSheetName = Application.ActiveSheet.Name
   
    ExcelSheetIndex = 0
    
    
    For i = 1 To WCount
        If Sheets(i).Name = ExcelSheetName Then
            ExcelSheetIndex = i
        End If
        
    Next i
  
    ExcelFileName = Application.ActiveWorkbook.FullName
 
    Set acad = Nothing
    On Error Resume Next
    Set acad = GetObject(, "AutoCAD.Application")
    If Err <> 0 Then
        MsgBox "AutoCAD|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2be||4bd||fffd||fffd||3f4||fffd|!   "
        Exit Sub
    Else
        Set doc = acad.ActiveDocument
        Set mspace = doc.ModelSpac


        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "VBCheck", 1)
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "ExcelFile", ExcelFileName)
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "CellRangeNum", CellRangeNum)
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "CellRangeStr", CellRangeStr)
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "SheetIndex", CStr(ExcelSheetIndex))
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "LengthH", SHLength)
        Call WriteRegistry(HKEY_CURRENT_USER, "SOFTWARE\Lisp-Project\ExcelToCAD", "LengthV", SVLength)
        
        
        

        'Office 2002(XP) = 10.0
        'Office 2000 = 9.0
        'Office 97 = 8.0

        If excel.Version = 10# Then
            AppActivate acad.Caption                    '|133||fffd||5e26| |230||fffd||fffd||22d|
            doc.SendCommand ("LispExcelToCAD2002" & vbCr)
            
        ElseIf excel.Version = 9# Then
            AppActivate acad.Caption                    '|133||fffd||5e26| |230||fffd||fffd||22d|
            doc.SendCommand ("LispExcelToCAD2000" & vbCr)
        ElseIf excel.Version = 8# Then
            AppActivate acad.Caption                    '|133||fffd||5e26| |230||fffd||fffd||22d|
            doc.SendCommand ("LispExcelToCAD97" & vbCr)
        Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||2b4||fffd| Excel |fffd||fffd||fffd||fffd||fffd||534||3f4||fffd|!   "
        End If
    End If
    Set acad = Nothing
End Sub


Private Sub Auto_Close()
    Set excelSheet = Nothing
End Sub

Attribute VB_Name = "Korean_length"
Public Function HLeft(myString As String, intLen As Integer) As String
   '|fffd||471||fffd||fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd||5fe1||fffd||fffd| Left |fffd||53c||fffd| |fffd||fffd||fffd||fffd|
HLeft = StrConv(LeftB(StrConv(myString, vbFromUnicode), intLen), vbUnicode)

End Function

Public Function HRight(myString As String, intLen As Integer) As String
'|fffd||471||fffd||fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd||5fe1||fffd||fffd| Right |fffd||53c||fffd| |fffd||fffd||fffd||fffd|
HRight = StrConv(RightB(StrConv(myString, vbFromUnicode), intLen), vbUnicode)

End Function
Public Function HMid(myString As String, intStr As Integer, intLen As Integer) As String
'|fffd||471||fffd||fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd||5fe1||fffd||fffd| Mid |fffd||53c||fffd| |fffd||fffd||fffd||fffd|
HMid = StrConv(MidB(StrConv(myString, vbFromUnicode), intStr, intLen), vbUnicode)

End Function

Public Function HLen(myString As String) As Integer
'|fffd||471||fffd||fffd||fffd||fffd||535||fffd| |fffd||fffd||fffd||5fe1||fffd||fffd| Len |fffd||53c||fffd| |fffd||fffd||fffd||fffd|
HLen = LenB(StrConv(myString, vbFromUnicode))
End Function

Attribute VB_Name = "RegKey_Func"
Option Explicit

Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Public Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long
Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Declare Function RegSetValueEx Lib "advapi32" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal szData As String, ByVal cbData As Long) As Long
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long

Type SECURITY_ATTRIBUTES
    nLength As Long
    lpSecurityDescriptor As Long
    bInheritHandle As Boolean
End Type

Type SECURITY_DESCRIPTOR
    Revision As Byte
    Sbz1 As Byte
    Control As Long
    Owner As Long
    Group As Long
End Type

 

Public Const ERROR_SUCCESS = 0&

 

Public Const HKEY_CURRENT_USER = &H80000001

 

Public Const STANDARD_RIGHTS_ALL = &H1F0000

Public Const KEY_QUERY_VALUE = &H1

Public Const KEY_SET_VALUE = &H2

Public Const KEY_CREATE_SUB_KEY = &H4

Public Const KEY_CREATE_LINK = &H20

Public Const KEY_ENUMERATE_SUB_KEYS = &H8

Public Const KEY_NOTIFY = &H10

Public Const SYNCHRONIZE = &H100000

Public Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

Public Const REG_OPTION_NON_VOLATILE = 0       ' Key is preserved when system is rebooted
Public Const REG_SZ = (1)                      ' Unicode nul terminated string
 

Private Const LB_ITEMFROMPOINT = &H1A9

 

 

' Get the key/subkey value.

Public Function GetKeyValue(ByVal selected_hkey As Long, ByVal key As String, ByVal SubKey As String) As String

Dim hKey As Long

Dim value As String

Dim length As Long

Dim value_type As Long

Dim k As Long

Dim bit_Array() As Byte

Dim strTemp As String

 

    ' Open the key.

    If RegOpenKeyEx(selected_hkey, key, 0&, KEY_ALL_ACCESS, hKey) <> ERROR_SUCCESS Then

        GetKeyValue = "Error opening key."

        Exit Function

    End If

 

    ' Get the subkey's value.

    length = 256
    ''length = 1024

    value = Space$(length)
    If RegQueryValueEx(hKey, SubKey, 0&, value_type, ByVal value, length) <> ERROR_SUCCESS Then
        GetKeyValue = "Error getting subkey value."
    Else
        ' Remove the trailing null character.
        GetKeyValue = Left$(value, length - 1)
        GetKeyValue = LeftH(GetKeyValue, length - 1)
    End If

    

    ' Close the key.

    RegCloseKey hKey

End Function


Sub WriteRegistry(hKey As Long, SubKey As String, ValueName As String, vNewValue As String)
    Dim Result As Long, RetVal As Long
    Dim PathLength As Integer
    PathLength = LenB(StrConv(vNewValue, vbFromUnicode))
    RetVal = RegOpenKeyEx(hKey, SubKey, 0, KEY_ALL_ACCESS, Result)
    RetVal = RegSetValueEx(Result, ValueName, 0, REG_SZ, vNewValue, PathLength)
    RegCloseKey hKey
    RegCloseKey Result
End Sub


Public Function LenH(ByVal strString As String) As Long
   LenH = LenB(StrConv(strString, vbFromUnicode))
End Function
 

Public Function LeftH(ByVal strString As String, ByVal lngLength As Long) As String
   LeftH = StrConv(LeftB(StrConv(strString, vbFromUnicode), lngLength), vbUnicode)
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
