Attribute VB_Name = "Chart1"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Attribute VB_Name = "Module2"
Sub Decimals()
Attribute Decimals.VB_ProcData.VB_Invoke_Func = "P\n14"
'
' Decimals Macro
'
' Keyboard Shortcut: Ctrl+Shift+P
'
    Selection.Style = "Comma"
    Selection.NumberFormat = "_ * #,##0.000_ ;_ * -#,##0.000_ ;_ * ""-""??_ ;_ @_ "
    Selection.NumberFormat = _
        "_ * #,##0.0000_ ;_ * -#,##0.0000_ ;_ * ""-""??_ ;_ @_ "
    Selection.NumberFormat = _
        "_ * #,##0.00000_ ;_ * -#,##0.00000_ ;_ * ""-""??_ ;_ @_ "
End Sub
Attribute VB_Name = "Module3"
Sub Colour1()
Attribute Colour1.VB_ProcData.VB_Invoke_Func = "F\n14"
'
' Colour1 Macro
'
' Keyboard Shortcut: Ctrl+Shift+F
'
    Cells.Select
    Range("A4").Activate
    Selection.SpecialCells(xlCellTypeConstants, 21).Select
    With Selection.Interior
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 13434879
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub
Attribute VB_Name = "Module4"
Sub Debtsizing()
Attribute Debtsizing.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Debtsizing Macro
'

'
    Range("C28").GoalSeek Goal:=0, ChangingCell:=Range("C13")
End Sub
Sub Circular()
Attribute Circular.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Circular Macro
'
While Range("M19") <> 0
'
    Range("H17:K17").Select
    Selection.Copy
    Range("H18").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
Wend
End Sub


Sub table()

current_sheet = ActiveSheet.Name

model_sheet = Range("model_sheet")

Sheets(model_sheet).Select

For Row = Range("row_start") To Range("row_end")

col = Range("col_sens")


Range("sale_date") = Cells(Row, col)

Cells(Row, col + 1) = Range("proj_irr")

Cells(Row, col + 2) = Range("eq_irr")


Next Row


Sheets(current_sheet).Select


End Sub
Attribute VB_Name = "Module5"
Option Base 1
Sub trueswitch()
Attribute trueswitch.VB_ProcData.VB_Invoke_Func = "T\n14"
'
' trueswitch Macro
'
' Keyboard Shortcut: Ctrl+Shift+T
'
    Selection.FormatConditions.Add Type:=xlTextString, String:="T", _
        TextOperator:=xlContains
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Borders(xlLeft)
        .LineStyle = xlContinuous
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.FormatConditions(1).Borders(xlRight)
        .LineStyle = xlContinuous
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.FormatConditions(1).Borders(xlTop)
        .LineStyle = xlContinuous
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.FormatConditions(1).Borders(xlBottom)
        .LineStyle = xlContinuous
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 5287936
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
End Sub
Sub pctdec()
Attribute pctdec.VB_ProcData.VB_Invoke_Func = "D\n14"
'
' pctdec Macro
'
' Keyboard Shortcut: Ctrl+Shift+D
'
    Selection.NumberFormat = "0.00%"
End Sub
Sub CheckBox1_Click()
Attribute CheckBox1_Click.VB_ProcData.VB_Invoke_Func = " \n14"
'
' CheckBox1_Click Macro
'

'
If Range("comment") Then
    Application.DisplayCommentIndicator = xlCommentAndIndicator
Else
    Application.DisplayCommentIndicator = xlNoIndicator
End If


End Sub

Sub debt_functions()

End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub Describe_Debt_Reslove()

   Dim ArgDesc(1 To 20) As String

   FuncName = "Debt_Resolve"
   FuncDesc = "  This Function Computes Debt Level, IDC, Fees and DSRA to Resolve Circular References" & Chr(13) & Chr(13) & "To use it you should set up the model with a sources and uses map.  This is an Array Function and you must use SHIFT, CNTL ENTER.  Make sure you press the arrow down."
   Category = 3 'Text category
   ArgDesc(1) = "Swithch that allows you to turn off the function: When TRUE the Function is turned OFF"
   ArgDesc(2) = "Gearing Flag -- Set to TRUE if the gearing ratio is used to size debt; set to FALSE if the DSCR is used to size the debt"
   ArgDesc(3) = "Repay Code -- This is the code number for debt repayment. 1 - Equal Installments (Flat Repayment); 2 - Annuity (Flat Debt Service); 3 -- Sculpting (Flat DSCR)"
   ArgDesc(4) = "Target DSCR: This is used when the debt is sized from cash flow and the DSCR.  It is not used and can be left as zero when the gearing method is used"
   ArgDesc(5) = "EBITDA Array: This is the period by period EBITDA.  Begin entering the array at the start of the construction period"
   ArgDesc(6) = "Interest Rate Array:  This must be the PERIODIC RATE that covers both the construction period and the operation period"
   ArgDesc(7) = "Construction Expenditure Array:  This should be the periodic construction that includes funded development costs and fees"
   ArgDesc(8) = "Repayment Switch:  A true and false switch when the repayment is in place"
   ArgDesc(9) = "Construction Switch:  This is a switch that is TRUE when the construction funding occures (does not include the development period)"


   Application.MacroOptions _
      Macro:=FuncName, _
      Description:=FuncDesc, _
      Category:=Category, _
      ArgumentDescriptions:=ArgDesc
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Debt_Resolve(Off_Switch, _
               Gearing_Flag, _
               Repay_Code, _
               Debt_Ratio, _
               DSCR, _
               EBITDA_Ar, _
               int_rate_ar, _
               Constr_Ar, _
               Repay_Switch, _
               Constr_Switch, _
               Tax_Rate, _
               Dep_Exp_Ar, _
               Optional up_front_fee, _
               Optional Commit_Fee, _
               Optional Cap_Flag, _
               Optional Fee_Am_Yr, _
               Optional Draw_Code, _
               Optional DSRA_Months, _
               Optional Mnths_Per, _
               Optional Inc_Rate, _
               Optional Tenor, _
               Optional O_Int, _
               Optional O_Mat, _
               Optional Sub_Int, _
               Optional O_Ded) As Variant

debug1 = 0

If Off_Switch = True Then Exit Function

If IsMissing(up_front_fee) Then up_front_fee = 0
If IsMissing(Commit_Fee) Then Commit_Fee = 0
If IsMissing(Capitalise_Switch) Then Capitalise_Switch = False
If IsMissing(Fee_Amort_Period) Then Fee_Amort_Period = 1
If IsMissing(Draw_Code) Then Draw_Code = 1
If IsMissing(months_in_period) Then months_in_period = 1

If IsMissing(DSRA_Input) Then DSRA_Input = 0
If IsMissing(Int_Inc_Rate) Then Int_Inc_Rate = 0
If IsMissing(Oth_Int) Then Oth_Int = 0
If IsMissing(Oth_Mat) Then Oth_Mat = 0
If IsMissing(Sub_Int) Then Sub_Int = 0
If IsMissing(Oth_Ded) Then Oth_Ded = 0
If IsMissing(Tenor) Then Tenor = 10

'
'  Dimension of variables
'
num_periods = int_rate_ar.Count

ReDim amort_rate(num_periods)
ReDim construction_percent(num_periods)
ReDim Repayment_Array(2, num_periods)
ReDim constr_funding(5)

Dim output(3, 3)

'
' Define periods and find the start of the construction period and start of repayement etc.
'

 start_construction = timing(Constr_Switch, Repay_Switch, num_periods, 1)
 end_construction = timing(Constr_Switch, Repay_Switch, num_periods, 2)
 start_repay = timing(Constr_Switch, Repay_Switch, num_periods, 3)
 end_repay = timing(Constr_Switch, Repay_Switch, num_periods, 4)

'
'  Total plant cost for depreciaion
'
  plant_cost = WorksheetFunction.Sum(Constr_Ar)
  dep_base = WorksheetFunction.Sum(Dep_Exp_Ar)


  For i = 1 To num_periods
    construction_percent(i) = Constr_Ar(i) / plant_cost
  Next i
 
  amort_rate = amort_calc(Mnths_Per, Fee_Am_Yr, start_repay, end_repay, num_periods)

'
'  Make iteration to resolve IDC, fee amortisation and NOL
'

DSRA_fac = dsra_factor(Mnths_Per, Tenor, DSRA_Months, int_rate_ar, Repay_Code, end_construction, debug1)

If Gearing_Flag = False Then     ' When size the debt according to the DSCR
   Select Case Repay_Code        ' call different functions according to the type of debt sizing
        
        Case 1: commitment = Level_Debt(plant_cost * Debt_Ratio, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                        Tax_Rate, Dep_Exp_Ar, 0, 0, DSCR, plant_cost, debug1)                                    ' don't knkow last debt, IDC or Fees
                         
        Case 2: commitment = Annuity_Debt(plant_coct * Debt_Ratio, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                        Tax_Rate, Dep_Exp_Ar, 0, 0, DSCR, plant_cost, debug1)                                    ' don't knkow last debt, IDC or Fees
        
        Case 3: commitment = initial_sculpt(start_repay, end_repay, int_rate_ar, EBITDA_Ar, Tax_Rate, Dep_Exp_Ar, DSCR)
   End Select
End If
 
'
' Iterate around to correct for taxes, DSRA interest and repayment
'

For iter = 1 To 20

Opening_Debt_Balance = commitment

'
'  Iterate to compute the level of debt using alternative methods that depends on cash flow and taxes
'

If Gearing_Flag = False Then
   Select Case Repay_Code
        
        Case 1: commitment = Level_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                          Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)   ' Re-do with different Debt, IDC, Fees
        
        Case 2: commitment = Annuity_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                                          Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)  ' Re-do with different Debt, IDC, Fees

        Case 3: commitment = _
                           sculpt_debt(Opening_Debt_Balance, start_repay, end_repay, int_rate_ar, EBITDA_Ar, _
                                          Tax_Rate, Dep_Exp_Ar, DSCR, dep_base, Accumulated_IDC, Accumulated_Fees, _
                                          amort_rate, Inc_Rate, debug1, num_periods)
   End Select
End If

'
'  Comtpute the debt funding and equity commitment for debt draws
'

Total_Cost = plant_cost + Total_IDC_and_Fees + DSRA  ' Total project cost includes adders

If Gearing_Flag = True Then commitment = Total_Cost * Debt_Ratio

Funding_Commitment = commitment - capitalised_Interest_Fees     ' Funding commitment is debt less capitalisation
Equity_Commitment = Total_Cost - commitment

'
'  Use the for IDC and fees from last iteration and then re-set
'

 constr_funding = Construction_Funding(commitment, Equity_Commitment, Funding_Commitment, start_construction, end_construction, up_front_fee, Commit_Fee, _
                                int_rate_ar, Cap_Flag, Constr_Ar, construction_percent, Draw_Code, DSRA)

 last_adders = Total_IDC_and_Fees

 Total_IDC_and_Fees = constr_funding(1)
 capitalised_Interest_Fees = constr_funding(2)
 Accumulated_IDC = constr_funding(3)
 Accumulated_Fees = constr_funding(4)

'
'   DSRA for Sculpting; can only compute after the debt balance is established
'
   Select Case Repay_Code
        Case 1, 2: DSRA = commitment * DSRA_fac
        Case 3:
            DSRA = dsra_sculpt(commitment, Mnths_Per, Fee_Am_yrs, Dep_Exp_Ar, DSRA_Months, int_rate_ar, dep_base, Accumulated_IDC, Accumulated_Fees, _
                 Tax_Rate, Int_Inc_Rate, EBITDA_Ar, DSCR, debug1, amort_rate, end_construction, iter)

    End Select

    output(1, 1) = commitment

    output(3, 1) = DSRA
    output(1, 3) = DSRA
    output(2, 1) = Total_IDC_and_Fees + DSRA


difference = last_adders - Total_IDC_and_Fees
If difference < 0 Then difference = 0 - difference

If difference < 0.000001 Then Exit For

Next iter

Debt_Resolve = output

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function timing(Constr_Switch, Repay_Switch, num_periods, code)

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        start_construction = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Constr_Switch(i) = True Then
        end_construction = i
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Repay_Switch(i) = True Then
        end_repay = i
    End If
Next i

If code = 1 Then timing = start_construction
If code = 2 Then timing = end_construction
If code = 3 Then timing = start_repay
If code = 4 Then timing = end_repay


End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function amort_calc(Mnths_Per, Fee_Am_Yr, start_repay, end_repay, num_periods) As Variant

ReDim amort_rate(num_periods)

accum_amort_rate = 0

If Mnths_Per > 0 Then periods_in_year = 12 / Mnths_Per
Fee_Amort_Period = Fee_Am_Yr * periods_in_year

For i = start_repay To end_repay
        amort_rate(i) = 1 / Fee_Amort_Period
        net_amort = 1 - accum_amort_rate
        amort_rate(i) = WorksheetFunction.Min(amort_rate(i), net_amort)
        accum_amort_rate = accum_amort_rate + amort_rate(i)

Next i

amort_calc = amort_rate

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function initial_sculpt(start_repay, end_repay, int_rate_ar, EBITDA_Ar, Tax_Rate, Dep_Exp_Ar, DSCR)

 
'
'  Set variables to zero before the iteration; these variables are changed as the level of debt changes
'

Accumulated_IDC = 0
Accumulated_Fees = 0
capitalised_Interest_Fees = 0
Total_IDC_and_Fees = 0

Discount_Rate_Index = 1
PV_Debt_Service = 0

'
' Preliminary Calculation with no taxes
'

For i = start_repay To end_repay Step 1

    Int_Rate = int_rate_ar(i)

    cfads = EBITDA_Ar(i) * (1 - Tax_Rate) + Dep_Exp_Ar(i) * Tax_Rate

    required_DS = cfads / DSCR
        
    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

Next i

initial_sculpt = PV_Debt_Service


End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function sculpt_debt(Opening_Debt_Balance, start_repay, end_repay, int_rate_ar, EBITDA_Ar, _
                       Tax_Rate, Dep_Exp_Ar, DSCR, plant_cost, Accumulated_IDC, _
                       Accumulated_Fees, amort_rate, Inc_Rate, debug1, num_periods)

                                          
ReDim Repayment_Array(2, num_periods)
                                          
Discount_Rate_Index = 1
PV_Debt_Service = 0
NOL_Balance = 0

'
' Define Abbreviated Variables
'
    irate = Inc_Rate
    oi = O_Int
    OM = O_Mat
    SI = Sub_Int
    OD = O_Ded
    t = Tax_Rate

For i = start_repay To end_repay Step 1

    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_depreciation_Expense - Interest_Expense + interest_income
    
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_Paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_Paid + interest_income
    required_DS = cfads / DSCR

    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    If Discount_Rate_Index > 0 Then PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

    Repayment_Array(1, i) = required_DS - Interest_Expense

    Opening_Debt_Balance = Opening_Debt_Balance - Repayment_Array(1, i)

    If debug1 = 2 Then
       MsgBox " CFADS " & cfads & " Disc Rate Index " & Discount_Rate_Index & _
            Chr(13) & Chr(13) & _
            " Required DS " & required_DS & " Interest " & Interest_Expense & _
            Chr(13) & Chr(13) & _
            " Opening Debt Balance " & Opening_Debt_Balance & " Repayment " & Repayment_Array(1, i)
    End If
Next i

sculpt_debt = PV_Debt_Service

End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function Construction_Funding(commitment, Equity_Commitment, Funding_Commitment, start_construction, end_construction, up_front_fee, Commit_Fee, _
                                int_rate_ar, Cap_Flag, Constr_Ar, construction_percent, Draw_Code, DSRA) As Variant
                                

Dim output(6)
                    
total_up_front_cap = 0
total_commitment_cap = 0
total_interest_cap = 0
total_up_front = 0
total_commitment = 0
total_interest = 0

Construction_Debt = 0
Accumulated_IDC = 0
Accumulated_Fees = 0
opening_equity_balance = 0
debt_balance = 0

'
'  Loop to find new IDC and fees from new go around of the sculpting
'

For i = start_construction To end_construction Step 1

'
'  Compute up front fee from debt commitment
'
    If i = start_construction Then
        up_front_fee_amount = commitment * up_front_fee
    Else
        up_front_fee_amount = 0
    End If

'
'  Compute commitment fee from undrawn balance
'

undrawn_debt = commitment - Construction_Debt
commitment_fee = undrawn_debt * Commit_Fee

'
'  Interest During Construction
'

Interest_Accrued = Construction_Debt * int_rate_ar(i)

'
' Compute interest and fee paid depending on the interest capitalised switch
'

If Cap_Flag Then
    up_front_fee_capitalised = up_front_fee_amount
    up_front_fee_paid = 0
    
    commitment_fee_capitalised = commitment_fee
    commitment_fee_paid = 0
    
    interest_capitalised = Interest_Accrued
    interest_paid = 0
Else
    up_front_fee_capitalised = 0
    up_front_fee_paid = up_front_fee_amount
    
    commitment_fee_capitalised = 0
    commitment_fee_paid = commitment_fee
    
    interest_capitalised = 0
    interest_paid = Interest_Accrued
End If

'
'  Funding Needs
'
    DSRA_paid = 0
    If i = end_construction Then DSRA_paid = DSRA
                
    funding_needs = Constr_Ar(i) + up_front_fee_paid + _
                    commitment_fee_paid + interest_paid + DSRA_paid

'
'  Pro Rata Funding
'
If Draw_Code = 1 Then
    debt_draws = Funding_Commitment * construction_percent(i)
'
' Equity First
'
ElseIf Draw_Code = 2 Then
    remaining_equity = Equity_Commitment - opening_equity_balance
    equity_funding = WorksheetFunction.Min(remaining_equity, funding_needs)
        
    closing_equity_balance = opening_equity_balance + equity_funding
    debt_draws = funding_needs - equity_funding
'
'  Debt First
'
ElseIf Draw_Code = 3 Then
    remaining_debt = Funding_Commitment - debt_balance
    debt_draws = WorksheetFunction.Min(remaining_debt, funding_needs)
    debt_balance = debt_balance + debt_draws
End If
                
Construction_Debt = Construction_Debt + debt_draws + up_front_fee_capitalised _
                    + interest_capitalised + commitment_fee_capitalised

Accumulated_IDC = Accumulated_IDC + Interest_Accrued
Accumulated_Fees = Accumulated_Fees + commitment_fee + up_front_fee_amount

If debug1 = 1 Then
 MsgBox " Period " & i & "Interest " & Interest_Accrued & " Rate " & int_rate_ar(i) & _
 Chr(13) & Chr(13) & " Accumulated_IDC " & Accumulated_IDC & " Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " funding needs " & funding_needs & " Constr " & Constr_Ar(i) & _
 Chr(13) & Chr(13) & " Equity Commitmnet " & Equity_Commitment & " remaining " & remaining_equity & _
 Chr(13) & Chr(13) & " total debt draws " & total_draws & " Constr Debt " & Construction_Debt & _
 Chr(13) & Chr(13) & " opening equity balance " & opening_equity_balance & " Closing Equity Balance " & closing_equity_balance & _
 Chr(13) & Chr(13) & " Debt Draws " & debt_draws & " Equity Funding " & equity_funding

End If

'
'  Accumulate Items for total project cost
'

total_up_front_cap = total_up_front_cap + up_front_fee_capitalised
total_commitment_cap = total_commitment_cap + commitment_fee_capitalised
total_interest_cap = total_interest_cap + interest_capitalised

total_up_front = total_up_front + up_front_fee_amount
total_commitment = total_commitment + commitment_fee
total_interest = total_interest + Interest_Accrued
    
opening_equity_balance = closing_equity_balance
           
Next i

Total_IDC_and_Fees = total_up_front + _
                     total_commitment + total_interest

capitalised_Interest_Fees = total_up_front_cap + _
                    total_commitment_cap + total_interest_cap

output(1) = Total_IDC_and_Fees
output(2) = capitalised_Interest_Fees
output(3) = Accumulated_IDC
output(4) = Accumulated_Fees

Construction_Funding = output

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function dsra_sculpt(commitment, Mnths_Per, Fee_Am_yrs, Dep_Exp_Ar, DSRA_Months, int_rate_ar, plant_cost, total_interest, total_fees, _
             Tax_Rate, Int_Inc_Rate, EBITDA_Ar, DSCR, debug1, amort_rate, end_construction, iter)

    debt_bal = commitment

    tot_interest = 0
    tot_repayment = 0
    NOL_Balance = 0
    total_periods = 1

'
' Compute the DSRA factor
'

If Mnths_Per > 0 Then periods_in_year = 12 / Mnths_Per
Fee_amortisation_period = Fee_Am_yrs * periods_in_year

If Mnths_Per <> 0 Then total_periods = DSRA_Months / Mnths_Per

    For i = 1 To total_periods
                                
        Int_Rate = int_rate_ar(i + end_construction)
                                                                                                                                                  
        If plant_cost > 0 Then depreciation_rate = Dep_Exp_Ar(i + end_construction) / plant_cost
                         
        idc_depreciation = total_interest * depreciation_rate
                        
        fee_amortisation = (total_fees) * amort_rate(i + end_construction)
        
        EBIT = EBITDA_Ar(i + end_construction) - Dep_Exp_Ar(i + end_construction) - idc_depreciation - fee_amortisation
        
        interest1 = debt_bal * Int_Rate
                          
        EBT = EBIT - interest1
        
        NOL_created = 0
        NOL_Used = 0
        
        If EBT < 0 Then
            NOL_created = 0 - EBT
            NOL_Balance = NOL_Balance + NOL_created
        End If
                
        If EBT > 0 Then
            NOL_Used = WorksheetFunction.Min(NOL_Balance, EBT)
            NOL_Balance = NOL_Balance - NOL_Used
        End If
                
        Adjusted_EBT = EBT + NOL_created - NOL_Used
        
        tax = Adjusted_EBT * Tax_Rate
                                
'        int_income = DSRA_bal * Int_Inc_Rate
        
        int_income = 0
        
        cfads = EBITDA_Ar(i + end_construction) - tax + int_income
                                
        required_DS = cfads / DSCR
                                
        interest1 = debt_bal * Int_Rate
        repay1 = required_DS - interest1
        
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest1
        tot_repayment = tot_repayment + repay1
                                
        If iter = 100 Then MsgBox "EBITDA " & Format(EBITDA_Ar(i + end_construction), "##.00") & " tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " Interest " & Format(interest1, "##.00") & " repay " & Format(repay1, "##.00") & Chr(13) & Chr(13) & _
                    " NOL Balance " & Format(NOL_Balance, "##.00") & " Adjusted_EBT " & Format(Adjusted_EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Depreciation " & Format(Dep_Exp_Ar(i + end_construction), "##.00") & " EBT " & Format(EBT, "##.00")

    Next i

    If debt_bal > 0 Then DSRA_fac = (tot_repayment + tot_interest) / debt_bal

    If debug1 = 4 Then
            MsgBox "DSRA factor " & Format(DSRA_fac, "##.000%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "##.000%") & Chr(13) & Chr(13) & _
                    " CFADS " & Format(cfads, "00.00") & Chr(13) & Chr(13) & _
                    " Required_DS " & Format(required_DS, "00.00") & Chr(13) & Chr(13) & _
                    " Starting Debt " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                    " Tax " & Format(tax, "##.00") & Chr(13) & Chr(13) & _
                    " EBIT " & Format(EBT, "##.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(total_interest, "00.00") & Chr(13) & Chr(13) & _
                    " IDC Depreciation " & Format(idc_depreciation, "00.00") & Chr(13) & Chr(13) & _
                    " Fee Amoritsation " & Format(fee_amortisation, "##.0000") & Chr(13) & Chr(13) & _
                    " Fee Amort Rate " & Format(amort_rate(100), "##.0000") & Chr(13) & Chr(13) & _
                    " total_fees " & Format(total_fees, "##.0000") & Chr(13) & Chr(13) & _
                    " DSRA Amount " & Format(tot_interest + tot_repayment, "### ###.00") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00") & Chr(13) & Chr(13)

    End If

    DSRA = tot_repayment + tot_interest

    dsra_sculpt = DSRA

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function dsra_factor(months_in_period, debt_tenor, DSRA_Months, interest_rate, repayment_code, construction_periods, debug1)

tot_interest = 0
tot_repayment = 0
debt_bal = 1
total_periods = 1

periods_in_year = 12 / months_in_period
debt_tenor_periods = debt_tenor * periods_in_year

If months_in_period <> 0 Then total_periods = DSRA_Months / months_in_period

    For i = 1 To total_periods
        Int_Rate = interest_rate(i + construction_periods)
        
        If repayment_code = 1 Then
            repay1 = 1 / debt_tenor_periods
        End If
    
        If repayment_code = 2 Then
            repay1 = WorksheetFunction.PPmt(Int_Rate, i, debt_tenor_periods, -1)
        End If
                
        interest = debt_bal * Int_Rate
        debt_bal = debt_bal - repay1
        
        tot_interest = tot_interest + interest
        tot_repayment = tot_repayment + repay1
    Next i

    dsra_factor = (tot_interest + tot_repayment)

    If debug1 = 1 Then
            MsgBox "DSRA factor " & Format(dsra_factor, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Months " & Format(total_months, "00.00") & Chr(13) & Chr(13) & _
                    " Interest Rate " & Format(Int_Rate, "00.00") & Chr(13) & Chr(13) & _
                    " Debt Tenor " & Format(debt_tenor_periods, "00.00") & Chr(13) & Chr(13) & _
                    " Total Interest " & Format(tot_interest, "00.00%") & Chr(13) & Chr(13) & _
                    " Total Repayment " & Format(tot_repayment, "00.00%") & Chr(13) & Chr(13)

    End If

End Function

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function Level_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                         Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)

Base_Debt_Balance = Opening_Debt_Balance

term = end_repay - start_repay + 1

min_DSCR = 100000000

NOL_Balance = 0
Period = 0

For i = start_repay To end_repay Step 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate
    interest_income = 0

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_Paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_Paid + interest_income
    
    Level_Repay = Base_Debt_Balance / term
        
    Debt_Service = Interest_Expense + Level_Repay
    
    If (Debt_Service > 0) Then
        If Debt_Service > 0 Then DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = Period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Level_Repay

    If debug1 = 5 And i = 100 Then
         MsgBox " CFADS " & Format(cfads, "##.00") & " Level Repay " & Format(Level_Repay, "##.00") & _
                 Chr(13) & Chr(13) & _
                " DSCR " & Format(DSCR, "##.00") & " Interest " & Format(Interest_Expense, "##.00") & _
                Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Format(Opening_Debt_Balance, "##.00") & " Min DSCR " & Format(min_DSCR, "##.00")
    End If

Next i    ' Finish of loop around the years


factor1 = min_CFADS / DSCR
factor2 = (int_rate_min * (term - min_yr + 1) + 1) / term

factor = factor1 / factor2

debt_balance = factor

Level_Debt = debt_balance

End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Function Annuity_Debt(Opening_Debt_Balance, int_rate_ar, start_repay, end_repay, EBITDA_Ar, amort_rate, _
                            Tax_Rate, Dep_Exp_Ar, Accumulated_IDC, Accumulated_Fees, DSCR, plant_cost, debug1)

commitment = Opening_Debt_Balance

NOL_Balance = 0
Period = start_repay

min_DSCR = 100000000

term = end_repay - start_repay + 1

For i = start_repay To end_repay Step 1

    time_period = i - start_repay + 1

    Period = Period + 1
    
    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate
'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_depreciation_Expense = Dep_Exp_Ar(i)
    dep_rate = Current_depreciation_Expense / plant_cost
    IDC_dep = Accumulated_IDC * dep_rate
    Fee_Amort = amort_rate(i) * Accumulated_Fees
    Current_depreciation_Expense = Dep_Exp_Ar(i) + IDC_dep + Fee_Amort

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_depreciation_Expense - Interest_Expense + interest_income
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_Paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_Paid + interest_income
        
    
'    If (Period < term) Then Annuity_Repay = WorksheetFunction.PPmt(Int_Rate, time_period, term, -commitment)
                
'    Debt_Service = Interest_Expense + Annuity_Repay
    
    If (i < term) Then Debt_Service = WorksheetFunction.Pmt(Int_Rate, term, -commitment)
    
    Annuity_Repay = Debt_Service - Interest_Expense
    
    If (Debt_Service > 0) Then
        DSCR_Period = cfads / Debt_Service
    Else: DSCR_Period = 10
    End If
    
    If DSCR_Period < min_DSCR Then
        min_DSCR = DSCR_Period
        min_yr = time_period
        min_CFADS = cfads
        int_rate_min = Int_Rate
    End If
        
    Opening_Debt_Balance = Opening_Debt_Balance - Annuity_Repay

    If debug1 = 5 And min_DSCR = DSCR_Period Then
         test = MsgBox( _
                " Period " & Period & " DSCR Period " & Format(DSCR_Period, "##.00") & Chr(13) & Chr(13) & _
                " CFADS " & Format(cfads, "00.000") & " Annuity Repay " & Format(Annuity_Repay, "##.00") & Chr(13) & Chr(13) & _
                " Target DSCR " & Format(DSCR, "##.00") & " Debt Service " & Format(Debt_Service, "##.00") & Chr(13) & Chr(13) & _
                " Adjusted EBT " & Format(EBT, "##.00") & " Interest " & Format(Interest_Expense, "##.00") & Chr(13) & Chr(13) & _
                " Dep 1 " & Format(Current_depreciation_Expense, "##.00") & " Commitment " & Format(commitment, "##.00") & Chr(13) & Chr(13) & _
                " EBITDA " & Format(EBITDA, "##.00") & " Taxes " & Format(Taxes_Paid, "##.00") & Chr(13) & Chr(13) & _
                " Opening Debt Balance " & Format(Opening_Debt_Balance, "##.00") & " Min DSCR " & Format(min_DSCR, "##.00"), vbAbortRetryIgnore)
                
                                
'        MsgBox "test " & test
                                
        If test = 3 Then debug1 = 0
                        
    End If

Next i    ' Finish of loop around the years

factor1 = min_CFADS / DSCR
factor2 = WorksheetFunction.Pmt(int_rate_min, term, -1)

If factor2 > 0 Then factor = factor1 / factor2

debt_balance = factor

Annuity_Debt = debt_balance

End Function

Sub refinancing()

End Sub

Function sheet_name(cell)

sheet_name = cell.Parent.Name


End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Function sculpt_debt_refinance(Refinance_Switch, int_rate_ar, EBITDA_Ar, _
                       Tax_Rate, Dep_Exp_Ar, DSCR, interest_income_percent, opening_nol)

Opening_Debt_Balance = 0


num_periods = int_rate_ar.Count

For i = 1 To num_periods
    If Refinance_Switch(i) = True Then
        start_repay = i
        Exit For
    End If
Next i

For i = 1 To num_periods
    If Refinance_Switch(i) = True Then
        end_repay = i
    End If
Next i
                                          
ReDim Repayment_Array(2, num_periods)
                                          
                                          
For iter = 1 To 10
                                          
Last_Debt_Balance = Opening_Debt_Balance
Discount_Rate_Index = 1
PV_Debt_Service = 0
NOL_Balance = opening_nol

For i = start_repay To end_repay Step 1

    EBITDA = EBITDA_Ar(i)
    Int_Rate = int_rate_ar(i)

    Interest_Expense = Opening_Debt_Balance * Int_Rate

'
'  Adjust for IDC depreciation (cause of big problems)
'
    Current_depreciation_Expense = Dep_Exp_Ar(i)

'
'  Compute taxes in first round and then iterate for interest expense and interest income
'
    EBT = EBITDA - Current_depreciation_Expense - Interest_Expense
    
'
' Recompute the tax rate if there are negative taxes
'
    Tax_loss = 0
    NOL_Used = 0

    If (EBT <= 0) Then
        Tax_loss = 0 - EBT
        NOL_Balance = NOL_Balance + Tax_loss
    End If
    
    If (EBT >= 0) Then
        NOL_Used = WorksheetFunction.Min(EBT, NOL_Balance)
        NOL_Balance = NOL_Balance - NOL_Used
    End If
        
    Adjusted_EBT = EBT + Tax_loss - NOL_Used
    
    Taxes_Paid = Adjusted_EBT * Tax_Rate
'
' re-compute Adjusted EBT and Effective tax Ra
'
    cfads = EBITDA - Taxes_Paid
    required_DS = cfads / DSCR

    Discount_Rate_Index = Discount_Rate_Index * (1 + Int_Rate)

    If Discount_Rate_Index > 0 Then PV_Debt_Service = PV_Debt_Service + required_DS / Discount_Rate_Index

    Repayment_Array(1, i) = required_DS - Interest_Expense

    Opening_Debt_Balance = Opening_Debt_Balance - Repayment_Array(1, i)

    If iter = 100 Then
       MsgBox " CFADS " & cfads & " Disc Rate Index " & Discount_Rate_Index & _
            Chr(13) & Chr(13) & _
            " Required DS " & required_DS & " Interest " & Interest_Expense & _
            Chr(13) & Chr(13) & _
            " Depreciation " & Current_depreciation_Expense & " Taxes " & Taxes_Paid & _
            Chr(13) & Chr(13) & _
            " Opening Debt Balance " & Opening_Debt_Balance & " Repayment " & Repayment_Array(1, i)
    End If
Next i

Opening_Debt_Balance = PV_Debt_Service

difference = Last_Debt_Balance - Opening_Debt_Balance

' MsgBox "Ba;ance " & Opening_Debt_Balance & " Difference " & difference

Next iter

sculpt_debt_refinance = PV_Debt_Service

End Function


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Function xmirr(cash_flow, dates, borrow_rate, finance_rate)

num = cash_flow.Count

daily_borrow = (1 + borrow_rate) ^ (1 / 365) - 1
daily_finance = (1 + finance_rate) ^ (1 / 365) - 1

' MsgBox daily_borrow, daily_finance

p_v = 0
f_v = 0

For i = 1 To num

days_count = dates(i) - dates(1)
days_count1 = dates(num) - dates(i)

borrow_factor = 1 / (1 + daily_borrow) ^ days_count
refinance_factor = (1 + daily_finance) ^ days_count1

If cash_flow(i) <= 0 Then p_v = p_v + borrow_factor * cash_flow(i)
If cash_flow(i) > 0 Then f_v = f_v + refinance_factor * cash_flow(i)

Next i

years = days_count / 365

xmirr = (f_v / -p_v) ^ (1 / years) - 1


End Function

Attribute VB_Name = "Module6"
Sub sensitivity()
Attribute sensitivity.VB_ProcData.VB_Invoke_Func = " \n14"
'
' sensitivity Macro
'
   Application.ScreenUpdating = False
   
   If Range("scenario") > 3 Then Exit Sub

   current_sheet = ActiveSheet.Name
   
   scenario_sheet = Range("scenario_sheet")
   
   Sheets(scenario_sheet).Select
   
    Select Case Range("scenario")
    
'
    Case 1:
    Range("base_case").Select
    
    Case 2:
    Range("low_case").Select
    
    Case 3:
    Range("high_case").Select
    
    End Select
    
    Selection.Copy
    Range("sensitivity1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Application.CutCopyMode = False
    
    Sheets(current_sheet).Select
End Sub
Sub fix_debt()
Attribute fix_debt.VB_ProcData.VB_Invoke_Func = " \n14"
'
' fix_debt Macro
'

    Range("function").Select
    Selection.Copy
    Range("fixed").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("structured_repayment").Select
    Selection.Copy
    Range("fixed_repayment").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("base_periods").Select
    Selection.Copy
    Range("fixed_periods").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Application.CutCopyMode = False

'
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
