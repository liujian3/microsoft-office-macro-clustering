Attribute VB_Name = "AutoFiter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0

Private Storage As Collection
Private RowsHeights As Collection

Private Sub Class_Initialize()
    Set Storage = New Collection
    Set RowsHeights = New Collection
End Sub

Private Sub Class_Terminate()
    Set Storage = Nothing
    Set RowsHeights = Nothing
End Sub

Public Sub AddCoords(r As range)
    If r.MergeCells Then
      If Not IsInAreas(r.MergeArea) Then
         Storage.Add Item:=r.MergeArea
      End If
    End If
End Sub

Private Function IsInAreas(aRange As range) As Boolean
  Dim Arr() As Long
  Dim i As Long
  Dim r As range
  IsInAreas = False
  
  For i = Storage.Count To 1 Step -1
    Set r = Storage.Item(i)
    If aRange.Row >= r.Row And aRange.Row <= r.Rows(r.Rows.Count).Row _
      And aRange.Column >= r.Column And aRange.Column <= r.Columns(r.Columns.Count).Column Then
        IsInAreas = True
        Exit For
    End If
  Next i

End Function

Public Sub clearRowsHeights()
  ClearCollection RowsHeights
End Sub

Public Sub ClearAll()
  ClearCollection Storage
End Sub


Private Sub ClearCollection(coll As Collection)
  While coll.Count > 0
    coll.Remove (1)
  Wend
End Sub


Private Sub RealAutoFit(Area As range, TmpSheet As Worksheet)
  Dim i As Long, cnt As Long
  Dim w As Variant, ww As Double, h As Variant
  Dim kf As Double
    
  w = 0
  ww = 0
  For i = 1 To Area.Columns.Count
    w = w + Area.Columns(i).ColumnWidth
    ww = ww + Area.Columns(i).Width        ' |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Next i
  h = GetAutoFitRowHeight(w, ww, Area, TmpSheet)
  cnt = Area.Row + Area.Rows.Count - 1
  kf = h / Area.Rows.Count
  For i = Area.Row To cnt
    MaxRowHeight = GetMaxRowHeight(i)
    If IsEmpty(MaxRowHeight) Then
      setRowHeight Area, i, kf
      RowsHeights.Add Item:=CVar(kf), Key:=CStr(i)
    Else
      If MaxRowHeight < kf Then
        RowsHeights.Remove (CStr(i))
        RowsHeights.Add Item:=CVar(kf), Key:=CStr(i)
        setRowHeight Area, i, kf
      End If
    End If
  
  Next i
End Sub

Public Function GetMaxRowHeight(rowNumber As Long) As Variant
  On Error GoTo ErrorHandler
  GetMaxRowHeight = RowsHeights.Item(CStr(rowNumber))
  Exit Function
ErrorHandler:
  GetMaxRowHeight = Empty
End Function

Private Sub setRowHeight(Area As range, rowNumber As Long, h As Variant)
  Dim tmp As Long
  tmp = rowNumber - Area.Row + 1
  If Area.Rows(tmp).RowHeight < h Then
    If h > 409 Then h = 409
    Area.Rows(tmp).RowHeight = h
  End If
End Sub

Private Function GetAutoFitRowHeight(w As Variant, ww As Double, Area As range, TmpSheet As Worksheet) As Single
  Dim r As range
  Dim koef As Double
  Dim i As Long

  
  Set r = range(TmpSheet.Cells(1, 1), TmpSheet.Cells(1, 1))
  If (w > 255) Then ' |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!
    w = 255
    r.ColumnWidth = w
  Else
    r.ColumnWidth = w
    If (ww <> 0) Then
      koef = r.Width / ww '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      r.ColumnWidth = w / koef
    End If
  End If
  Area.Copy r

  r.UnMerge
  r.Rows.autoFit
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If (w > 110) Then
    GetAutoFitRowHeight = r.RowHeight * 1.05
  Else
    GetAutoFitRowHeight = r.RowHeight
  End If
  
  With TmpSheet
      .Cells.ClearFormats
      .Cells.ClearContents
  End With
  
End Function

Private Function GetSignAutoFitRowHeight(w As Variant, value As String, TmpSheet As Worksheet, _
Optional isBold As Boolean, Optional fontName As String, Optional fonSize As Variant) As Variant
  Dim r As range
  
  Set r = TmpSheet.Cells(1, 1)
  If (w > 255) Then ' |fffd|.|fffd|. |fffd||fffd||fffd||fffd| ...|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 255 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!
    w = 255
  End If
  r.ColumnWidth = w
  r.WrapText = True
  If Len(value) > 255 Then
    r.NumberFormat = "?"
  Else
    r.NumberFormat = "@"
  End If
  
  r.value = value
  
  With r.Font
    If (Not IsNull(isBold)) Then
      .Bold = isBold
    End If
    If (Not IsNull(fontName)) Then
      .name = fontName
    End If
    If (Not IsNull(fonSize)) Then
      .Size = fonSize
    End If
  End With
  
  r.Rows.autoFit
    GetSignAutoFitRowHeight = r.RowHeight
  
End Function

Private Sub ProcessAutoFit(aTmpSheet As Worksheet)
  Dim r As range
  For i = 1 To Storage.Count
    Set r = Storage.Item(i)
    RealAutoFit r, aTmpSheet
  Next i
End Sub

Public Function DoRange(aTmpSheet As Worksheet) As Boolean
  Dim i As Long
  Dim r As range
  Dim Arr() As Long
  
  On Error GoTo ErrorHandler
  
  ProcessAutoFit aTmpSheet
  DoRange = True
  Exit Function
ErrorHandler:
  DoRange = False
  '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Function

Public Function GetSignShapeHeight(w As Long, value As String, aTmpSheet As Worksheet, _
                  fontBold As Boolean, fontName As String, fontSize As Variant) As Single
  
  On Error GoTo ErrorHandler
  ' |fffd||fffd||fffd||fffd||fffd| 5.5 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  GetSignShapeHeight = CSng(GetSignAutoFitRowHeight(Round(w / 5.5), value, aTmpSheet, fontBold, fontName, fontSize))
  Exit Function
    
ErrorHandler:
  GetSignShapeHeight = 40 '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

End Function
Attribute VB_Name = "Base64Tools"
Option Explicit

Private Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

Public Function Base64Array_Encode(ByteArray() As Byte) As Byte()
    Dim OutStream() As Byte
    Dim OutPos As Long
    Dim InpPos As Long
    Dim c1, c2, c3 As Long
    ReDim OutStream(0)
    InpPos = 0
    OutPos = 0
    Do While InpPos <= UBound(ByteArray)
        c1 = ReadValue(ByteArray, InpPos)
        c2 = ReadValue(ByteArray, InpPos)
        c3 = ReadValue(ByteArray, InpPos)
        Call AddValueToStream(OutStream, OutPos, mimeencode(Int(c1 / 4)))
        Call AddValueToStream(OutStream, OutPos, mimeencode((c1 And 3) * 16 + Int(c2 / 16)))
        If InpPos - 2 <= UBound(ByteArray) Then
            Call AddValueToStream(OutStream, OutPos, mimeencode((c2 And 15) * 4 + Int(c3 / 64)))
        End If
        If InpPos - 1 <= UBound(ByteArray) Then
            Call AddValueToStream(OutStream, OutPos, mimeencode(c3 And 63))
        End If
    Loop
    Base64Array_Encode = OutStream
End Function

Public Function Base64Array_Decode(ByteArray() As Byte) As Byte()
    Dim OutStream() As Byte
    Dim OutPos As Long
    Dim InpPos As Long
    Dim w1, w2, w3, w4 As Long
    ReDim OutStream(0)
    InpPos = 0
    OutPos = 0
    Do While InpPos < UBound(ByteArray)
        w1 = mimedecode(ReadBase64ValidValue(ByteArray, InpPos))
        w2 = mimedecode(ReadBase64ValidValue(ByteArray, InpPos))
        w3 = mimedecode(ReadBase64ValidValue(ByteArray, InpPos))
        w4 = mimedecode(ReadBase64ValidValue(ByteArray, InpPos))
        If w2 >= 0 Then Call AddValueToStream(OutStream, OutPos, (w1 * 4 + Int(w2 / 16)) And 255)
        If w3 >= 0 Then Call AddValueToStream(OutStream, OutPos, (w2 * 16 + Int(w3 / 4)) And 255)
        If w4 >= 0 Then Call AddValueToStream(OutStream, OutPos, (w3 * 64 + w4) And 255)
    Loop
    Base64Array_Decode = OutStream
End Function

Private Function mimeencode(w As Long) As Byte
   If w >= 0 Then mimeencode = Asc(Mid$(Base64, w + 1, 1)) Else mimeencode = 0
End Function

Private Function mimedecode(A As Long) As Long
   If A = 0 Then mimedecode = -1: Exit Function
   mimedecode = InStr(Base64, Chr(A)) - 1
End Function

'|fffd|.|fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Function ReadBase64ValidValue(FromArray() As Byte, FromPos As Long) As Long
  Dim tmp As Long
  Do
    tmp = ReadValue(FromArray, FromPos)
  Loop Until Not ((tmp <> 0) And (InStr(Base64, Chr(tmp)) = 0))
  ReadBase64ValidValue = tmp
End Function

Private Function ReadValue(FromArray() As Byte, FromPos As Long) As Long
    If FromPos <= UBound(FromArray) Then
        ReadValue = FromArray(FromPos)
    Else
        ReadValue = 0
    End If
    FromPos = FromPos + 1
End Function

Private Sub AddValueToStream(ToStream() As Byte, ToPos As Long, Number As Byte)
    ReDim Preserve ToStream(ToPos)
    ToStream(ToPos) = Number
    ToPos = ToPos + 1
End Sub



Attribute VB_Name = "CellMerger"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0

Private Storage As Collection

Private Sub Class_Initialize()
    Set Storage = New Collection
End Sub

Private Sub Class_Terminate()
    Set Storage = Nothing
End Sub

Public Sub Add(ByVal ID As String, ByVal x As Long, ByVal y As Long)
    Dim cellsArray() As Variant
    On Error GoTo ErrorHandler
    cellsArray = Storage.Item(ID)
    On Error GoTo 0
    addCellToArray ID, x, y, cellsArray
    Exit Sub
ErrorHandler:
    ReDim cellsArray(0)
    Storage.Add Item:=cellsArray, Key:=ID
    addCellToArray ID, x, y, cellsArray
End Sub

Private Sub addCellToArray(ByVal ID As String, ByVal x As Long, ByVal y As Long, ByRef cellsArray() As Variant)
  Dim singleCell(2) As Long
  singleCell(0) = x
  singleCell(1) = y
  ReDim Preserve cellsArray(UBound(cellsArray) + 1)
  cellsArray(UBound(cellsArray) - 1) = singleCell
  Storage.Remove ID
  Storage.Add Item:=cellsArray, Key:=ID
End Sub

Public Sub MergeAll(ws As Worksheet)
    Dim cellsArray() As Variant
    Dim i As Long
    On Error Resume Next
    For i = 1 To Storage.Count
      cellsArray = Storage.Item(i)
      MergeGroup ws, cellsArray
    Next i
    On Error GoTo 0
End Sub

Private Sub MergeGroup(ws As Worksheet, ByRef cellsArray() As Variant)
  Dim Top, Left, Bottom, Right, i, currX, CurrY As Long
  Dim currentCell() As Long
  Dim b As Boolean
      
  b = True
  For i = 0 To UBound(cellsArray) - 1
    currentCell = cellsArray(i)
    currX = currentCell(0)
    CurrY = currentCell(1)
    If b Then
      Top = currX
      Bottom = currX
      Left = CurrY
      Right = CurrY
      b = False
    End If
    If currX > Bottom Then
      Bottom = currX
    End If
    If currX < Top Then
      Top = currX
    End If
    If CurrY > Right Then
      Right = CurrY
    End If
    If CurrY < Left Then
      Left = CurrY
    End If
  Next i
  If validate(Left, Top, Bottom, Right, cellsArray) Then
    ws.range(ws.Cells(Top, Left), ws.Cells(Bottom, Right)).Merge
  End If
ErrorHandler:
End Sub

Private Function validate(ByVal Left, ByVal Top, ByVal Bottom, ByVal Right As Long, _
ByRef cellsArray() As Variant) As Boolean
  Dim i, k As Long
  
  For i = Top To Bottom
    For k = Left To Right
      If Not cellExistsInGroup(i, k, cellsArray) Then
        validate = False
        Exit Function
      End If
    Next k
  Next i
  validate = True
End Function

Private Function cellExistsInGroup(ByVal x, ByVal y As Long, ByRef cellsArray() As Variant) As Boolean
  Dim i, currX, CurrY As Long
  
  For i = 0 To UBound(cellsArray) - 1
    currentCell = cellsArray(i)
    currX = currentCell(0)
    CurrY = currentCell(1)
    If currX = x And CurrY = y Then
      cellExistsInGroup = True
      Exit Function
    End If
  Next i
  cellExistsInGroup = False
End Function

Public Sub ClearAll()
    Dim i As Long
    For i = 1 To Storage.Count
      Storage.Remove (1)
    Next i
End Sub



Attribute VB_Name = "ChartValuesMap"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0
Private Storage As Collection
Private Keys As Sett

Private Sub Class_Initialize()
  Set Storage = New Collection
  Set Keys = New Sett
End Sub

Private Sub Class_Terminate()
  ClearAll
  Set Storage = Nothing
  Set Keys = Nothing
End Sub

Public Sub Add(ID As String, aSheetName As String, aRow As Long, aCol As Long)
  Dim acoll As Collection
  Dim aCoords() As Variant
  Dim passed As Boolean
  
  Keys.Add ID
  
  On Error GoTo ErrorHandler
  Set acoll = Storage.Item(ID)
  passed = False
  
  If acoll.Count > 0 Then
    aCoords = acoll.Item(acoll.Count)
    If (aCoords(4) = aSheetName) Then
      If (aCoords(0) = aCoords(2)) And (aCoords(0) = aRow) Then
        If (aCoords(1) = aCoords(3)) And (aCoords(1) = aCol) Then
          passed = True
        ElseIf (aCoords(1) - 1 = aCol) Then
          aCoords(1) = aCol
          passed = True
        ElseIf (aCoords(3) + 1 = aCol) Then
          aCoords(3) = aCol
          passed = True
        End If
      ElseIf (aCoords(1) = aCoords(3)) And (aCoords(1) = aCol) Then
        If (aCoords(0) = aCoords(2)) And (aCoords(0) = aRow) Then
          passed = True
        ElseIf (aCoords(0) - 1 = aRow) Then
          aCoords(0) = aRow
          passed = True
        ElseIf (aCoords(2) + 1 = aRow) Then
          aCoords(2) = aRow
          passed = True
        End If
      End If
    End If
  End If
    
  If passed Then
    acoll.Remove (acoll.Count)
  Else
    ReDim aCoords(4) As Variant
    aCoords(0) = aRow
    aCoords(1) = aCol
    aCoords(2) = aRow
    aCoords(3) = aCol
    aCoords(4) = aSheetName
  End If
  acoll.Add Item:=aCoords
  Exit Sub
ErrorHandler:
  Storage.Add Item:=New Collection, Key:=ID
  Resume
End Sub

Private Function getMergedCoords(r1, c1, r2, c2, sheetName As Variant) As Variant()
  Dim mergedCoords() As Variant
  ReDim mergedCoords(5)

  mergedCoords(0) = r1
  mergedCoords(1) = c1
  mergedCoords(2) = r2
  mergedCoords(3) = c2
  mergedCoords(4) = sheetName
  
  getMergedCoords = mergedCoords
End Function

Private Function mergeOneItem(ByRef acoll As Collection, _
       ByRef aCoords() As Variant) As Collection
  Dim i As Long
  Dim tempCoords() As Variant
  Dim Crds() As Variant
  Dim result As Collection
  Dim merged As Boolean
  
  Set result = New Collection
  
  For i = 1 To acoll.Count
    tempCoords = acoll.Item(i)
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If Not ((tempCoords(0) = aCoords(0)) And (tempCoords(1) = aCoords(1)) _
            And (tempCoords(2) = aCoords(2)) And (tempCoords(3) = aCoords(3))) Then
          '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If ((tempCoords(0) = aCoords(0)) And (tempCoords(2) = aCoords(2))) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If (aCoords(3) + 1 = tempCoords(1)) Then
              merged = True
              result.Add (getMergedCoords(aCoords(0), aCoords(1), aCoords(2), tempCoords(3), tempCoords(4)))
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            ElseIf (tempCoords(3) + 1 = aCoords(1)) Then
              merged = True
              result.Add (getMergedCoords(aCoords(0), tempCoords(1), aCoords(2), aCoords(3), tempCoords(4)))
            End If
          '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          ElseIf ((tempCoords(1) = aCoords(1)) And (tempCoords(3) = aCoords(3))) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            If (aCoords(2) + 1 = tempCoords(0)) Then
              merged = True
              result.Add (getMergedCoords(aCoords(0), aCoords(1), tempCoords(2), aCoords(3), tempCoords(4)))
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            ElseIf (tempCoords(2) + 1 = aCoords(0)) Then
              merged = True
              result.Add (getMergedCoords(tempCoords(0), aCoords(1), aCoords(2), aCoords(3), tempCoords(4)))
            End If
          End If
    End If
    If merged Then
      Exit For
    End If
  Next i
  If merged Then
    For i = acoll.Count To 1 Step -1 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Crds = acoll.Item(i)
      If Not (((Crds(0) = aCoords(0)) And (Crds(1) = aCoords(1)) _
              And (Crds(2) = aCoords(2)) And (Crds(3) = aCoords(3))) _
              Or ((Crds(0) = tempCoords(0)) And (Crds(1) = tempCoords(1)) _
              And (Crds(2) = tempCoords(2)) And (Crds(3) = tempCoords(3)))) Then
        result.Add Crds, , 1 ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)
      End If
    Next i
    Set mergeOneItem = result
  Else
    Set mergeOneItem = Nothing
  End If
End Function


Private Function mergeAreas(ByRef acoll As Collection) As Collection
  Dim tempCol As Collection
  Dim aCoords() As Variant
  Dim i As Long
  
  Set tempCols = Nothing
  
  For i = 1 To acoll.Count
    aCoords = acoll.Item(i)
    Set tempCol = mergeOneItem(acoll, aCoords)
    If Not tempCol Is Nothing Then
      Set acoll = tempCol
      Exit For
    End If
  Next i
  
  If Not tempCol Is Nothing Then
    Set mergeAreas = mergeAreas(acoll)
  End If
  Set tempCol = Nothing
  Set mergeAreas = acoll
End Function

Public Function GetValue(ID As String)
  Dim acoll As Collection
  On Error GoTo ErrorHandler
  
  'Set acoll = Storage.Item(ID)
  Set acoll = mergeAreas(Storage.Item(ID))
  
  Dim i As Long
  Dim aCoords() As Variant
  Dim aR1C1 As String
  For i = 1 To acoll.Count
    aCoords = acoll.Item(i)
    If (aCoords(0) = aCoords(2)) And (aCoords(1) = aCoords(3)) Then
      aR1C1 = "R" & CStr(aCoords(0)) & "C" & CStr(aCoords(1))
    Else
      aR1C1 = "R" & CStr(aCoords(0)) & "C" & CStr(aCoords(1)) & ":" & _
              "R" & CStr(aCoords(2)) & "C" & CStr(aCoords(3))
    End If
    
    GetValue = GetValue & "'" & CStr(aCoords(4)) & "'!" & aR1C1
    
    If (i <> acoll.Count) Then
      GetValue = GetValue & ","
    Else
      GetValue = "=(" & GetValue & ")"
    End If
  Next i
  
  Exit Function
ErrorHandler:
  GetValue = Empty
End Function

Public Function Count() As Long
  Count = Keys.Count
End Function

Public Function GetKey(index As Long) As String
  GetKey = Keys.Item(index)
End Function

Public Sub ClearAll()
  Dim i As Long
  Dim obj
  For i = 1 To Storage.Count
    Set obj = Storage.Item(1)
    Set obj = Nothing
    Storage.Remove (1)
  Next i
  
  Keys.ClearAll
End Sub






Attribute VB_Name = "ENGINE"
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (AMG) ver 3.4.2
'16.09.2004 (AMG) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'28.01.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 120 |fffd||fffd||fffd||fffd||fffd||fffd|
'18.02.2005 (AMG) XML |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'19.02.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
'06.05.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'11.06.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Merge
'17.08.2005 (AMG) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Integer |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Long (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Integer |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'05.12.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'05.12.2005 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'27.12.2005 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'20.01.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'23.01.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'01.02.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'15.02.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'27.02.2006 (AMG) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 2.12#408 - |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'16.03.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'04.03.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'03.05.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'05.05.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'12.05.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'22.05.2006 (AMG) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'23.05.2006 (LARGO) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'14.06.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Range, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Range
'21.06.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'10.08.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'11.08.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'18.08.2006 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| X, |fffd||fffd||fffd| Y
'                   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'09.02.2007 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'23.05.2007 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'23.05.2007 (LARGO) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
'15.04.2009 (Sergej) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'04.05.2009 (Sergej) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'18.06.2009 (Sergej) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'24.08.2009 (chernushin) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| RANGE
'29.06.2010 (chernushin) |fffd||fffd||fffd| RANGE |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| UpperCase |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (width, height, offsetX, offsetY)

Option Explicit

Option Base 0

Private Type Rect
  Top As Long
  Left As Long
  Bottom As Long
  Right As Long
End Type

Private Type POINTAPI
   x As Long
   y As Long
End Type

Private Const _
      sheetTag = "SHEET", formatTag = "FORMAT", offsetTag = "OFFT", pageBreakTag = "B", headerTag = "HDR", footerTag = "FTR", dirAtr = "DIR", _
      TEMPLATESHEETATR = "TEMPLATE", tmpSheetAtr = "TMPSHEET", formatAtr = "SFORMAT", PARAMTAG = "PARAM", _
      defaultSheetAttr = "DEFAULT_SHEET", adjustTitlePageAttr = "ADJUST_TITLE_PAGE", _
      alignAtr = "ALIGN", vertAlignAtr = "VERTALIGN", widthAtr = "W", pixelWidthAtr = "PW", heightAtr = "H", newSheetAtr = "NEWSHEET", markAtr = "id", _
      rangeOffsetTag = "RANGEOFFSET", offsetXatr = "X", offsetYatr = "Y", nameAttr = "NAME", _
      cellTag = "CELL", itemClearTag = "IC", exportTag = "EXPORT", _
      setWidthTag = "SW", setHeightTag = "SH", metaTag = "METADATA", rangeCountAtr = "RANGECOUNT", orientAtr = "ORIENT", _
      signTag = "SIGN", extSignTag = "EXTSIGN", textBoxTag = "TB", MERGE_TAG = "MERGE", CELLNAME_TAG = "CELLNAME", MACRO_TAG = "MACRO", _
      MESSAGE_TAG = "MESSAGE", MESSAGE_TEXT_ATTR = "MESSAGE_TEXT", CELLFORMAT_TAG = "CELLFORMAT", GROUPINDEX_TAG = "GROUPINDEX", KINDATR = "KIND", _
      CELLALIGN_TAG = "CELLALIGN", OUTLINE_SUMROWATR = "OUTLINE_SUMROW", BFT_PRINT_TITLES_NAME = "BFT_Print_Titles", _
      CUSTOM_VALUES_TAG = "CUSTOM_VALUES", formatRangeTag = "FORMATRANGE", boldAttr = "BOLD", upperCaseRangeTag = "UC", _
      FONT_TAG = "FONT", fontNameAttr = "FN", fontSizeAttr = "FSIZE", fontColorAttr = "FC", fontColorIndexAttr = "FCI", fontStyleAttr = "FST", _
      fontStyleBoldAttr = "FST_BOLD", fontStyleItalicAttr = "FST_ITALIC", fontUnderLineAttr = "FUL", fontStrikethroughAttr = "FSTRTHR", FONT_AMPLIFIER = "FNT_AMPL", _
      colWidthAttr = "COLWIDTH", borderTag = "BORDER", borderEdgeTopTag = "BORDEREDGETOP", _
      borderEdgeBottomTag = "BORDEREDGEBOTTOM", borderEdgeLeftTag = "BORDEREDGELEFT", _
      borderEdgeRightTag = "BORDEREDGERIGHT", borderInsudeVerticalTag = "BORDERINSIDEVERTICAL", _
      borderInsideHorisontalTag = "BORDERINSIDEHORIZONTAL", borderDiagonalUpTag = "BORDERDIAGONALUP", _
      borderDiagonalDownTag = "BORDERDIAGONALDOWN", borderLineStyleAttr = "LINESTYLE", _
      borderWeightAttr = "BORDERWEIGHT", borderColorIndexAttr = "BORDERCOLORINDEX", _
      CELLTEXTFORMAT_TAG = "CTF", chrStartAttr = "CS", chrLengthAttr = "CL", _
      CELL_MERGE_TAG = "CELL_MERGE", USE_XLA_TAG = "USE_XLA", SHEET_NUMBERING_TAG = "SHEET_NUMBERING", _
      printTitleRowsTag = "PT_ROWS", printTitleRowBeginAttr = "PT_ROW_BEGIN", printTitleRowEndAttr = "PT_ROW_END", _
      freezePaneRowsTag = "FP", freezePaneRowAttr = "FP_R", freezePaneColAttr = "FP_C", _
      interiorColorIndexAttr = "ICI", interiorPatternColorIndexAttr = "IPCI", interiorPatternAttr = "IP"

Private Const _
      PAGEMARGIN_TAG = "PAGEMARGIN", PAGETOPMARGIN_ATTR = "TOP", PAGERIGHTMARGIN_ATTR = "RIGHT", _
      PAGEBOTTOMMARGIN_ATTR = "BOTTOM", _
      PAGELEFTMARGIN_ATTR = "LEFT", PAGEHEADERMARGIN_ATTR = "HEADER", PAGEFOOTERMARGIN_ATTR = "FOOTER"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Const _
      CHART_TAG = "CHART", CHART_NAME_ATTR = "CHART_NAME", CHART_TYPE_TAG = "CHART_TYPE", _
      CHART_CAPTION_TAG = "CHART_CAPTION", CHART_X_ASIX_CAPTION_TAG = "CHART_X_ASIX_CAPTION", _
      CHART_Y_ASIX_CAPTION_TAG = "CHART_Y_ASIX_CAPTION", CHART_LEGEND_PLACE_TAG = "CHART_LEGEND_PLACE", _
      CHART_IS_LINES_BEAR_TAG = "CHART_IS_LINES_BEAR", CHART_DATA_LABELS_TAG = "CHART_DATA_LABELS", _
      CHART_SHOW_SERIES_NAME_ATTR = "SHOW_SERIES_NAME", CHART_SHOW_CATEGORY_NAME_ATTR = "SHOW_CATEGORY_NAME", _
      CHART_SHOW_VALUE_ATTR = "SHOW_VALUE", CHART_SHOW_PERCENTAGE_ATTR = "SHOW_PERCENTAGE", _
      CHART_LEGEND_KEY_ATTR = "LEGEND_KEY", CHART_SEPARATOR_ATTR = "SEPARATOR", _
      CHART_HAS_LEADER_LINES_ATTR = "HAS_LEADER_LINES", _
      packetBodyTag = "PACKETBODY", packetTag = "PACKET"


Private Const KEEP_TMP_HEIGHTS = "KH", AUTO_WIDTH_ATR = "AW", LINK_ATR = "L"
      
Private PacketMap As Map

Private itemTag As String
Private rangeTag As String
Private valueAtr As String
Private refAtr As String
Private autoFitAtr As String
Private rowHeightAtr As String
Private RANGENAMED_TAG As String

Private autoFitDefault As String

Private Const CHART_VALUE_ATR = "CHART_VALUE"
Private Const CHART_XVALUE_ATR = "CHART_XVALUE"
     
Private Const CHART_VALUE = 0
Private Const CHART_XVALUE = 1

Private Const KIND_GROUP_BEGIN = "B"
Private Const KIND_GROUP_END = "E"

Private rangeCount As Long
Private newLinesCount As Long
Private passedRanges As Long
Private startDate As Date
Private dateRemainsPrev As Date

Private BookPath As String
Private BookName As String
Private MergerObj As Merger
Private CellMergerObj As CellMerger
Private GrouperObj As Grouper
Private NamesCoords As Collection
Private CustomValues As Map
Private LocalCustomValues As Map
Private ChartValues As ChartValuesMap
Private ChartXValues As ChartValuesMap
Private RealSheetNames As Map
Private RealCellValues As Map
Private usedTmpShts As Map
Private Charts As Map
Private AutoFitRanges As Collection
Private AutoWidthCells As Collection
Private RowsHeights As Collection
Private ColumnsWidths As Collection
Private TextBoxes As Collection
Private MacroTasks As Collection
Private LinksRange As Collection
Private LinksValue As Collection

Dim StartX As Long, StartY As Long, EndX As Long, EndY As Long, MaxX As Long, tmpSheetsCount As Long, _
    repBook As Workbook, tmpBook As Workbook, TmpSheet As Worksheet, curSheet As Worksheet

Dim LastRangeTop As Long, LastRangeLeft As Long, _
    LastRangeBottom As Long, LastRangeRight As Long

Dim defaultSheetName As String
    
Private AutoFitTmpSheet As Worksheet
Private Fiter As AutoFiter
Private NeedPrintTitles As Boolean
Private RowBeginPrintTitles As Long
Private RowEndPrintTitles As Long
Private StoredRowBeginPrintTitles As Long
Private StoredRowEndPrintTitles As Long
Private SetStoredPrintTitles As Boolean
Private SetStoredFreezePane As Boolean
Private StoredRowFreezePane As Long
Private StoredColFreezePane As Long
Private reportTask As Boolean

'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| 64-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| PtrSafe
'|fffd||fffd||fffd||fffd||fffd||fffd| VBA |fffd||fffd||fffd||fffd| VBA7 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| PtrSafe
#If Win64 Or VBA7 Then
  Private Declare PtrSafe Function GetTextExtentPoint32 Lib "gdi32" Alias "GetTextExtentPoint32A" (ByVal hdc As Long, ByVal lpsz As String, ByVal cbString As Long, lpSize As POINTAPI) As LongPtr
  Private Declare PtrSafe Function GetWindowDC Lib "user32" (ByVal hwnd As Long) As LongPtr
#Else
  Private Declare Function GetTextExtentPoint32 Lib "gdi32" Alias "GetTextExtentPoint32A" (ByVal hdc As Long, ByVal lpsz As String, ByVal cbString As Long, lpSize As POINTAPI) As Long
  Private Declare Function GetWindowDC Lib "user32" (ByVal hwnd As Long) As Long
#End If

Private isHeader As Boolean
Private headerAlign As String
Private headerValue As String

Private isFooter As Boolean
Private footerAlign As String
Private footerValue As String

Private offsetValue As Long

Private isPageMargin As Boolean
Private FirstPageNumber As Long
Private pageMarginTop As String
Private pageMarginBottom As String
Private pageMarginLeft As String
Private pageMarginRight As String
Private pageMarginHeader As String
Private pageMarginFooter As String

Private PagesWide As Long
Private PagesScale As Long
Private Orient As String
Private ProcAutoFitSht As Boolean
Private fontAmplifier As Double

Private Sub SetRangeAligment(r As range, Elem As MSXML2.IXMLDOMElement)
  Dim valign As String, halign As String

  If Not IsNull(Elem.getAttribute(alignAtr)) Then
    halign = Elem.getAttribute(alignAtr)
    If halign <> "" Then
      With r
        Select Case halign
          Case "R"
            .HorizontalAlignment = xlRight
          Case "C"
            .HorizontalAlignment = xlCenter
          Case "L"
            .HorizontalAlignment = xlLeft
          Case "G"
            .HorizontalAlignment = xlGeneral
          Case "J"
            .HorizontalAlignment = xlJustify
          Case "F"
            .HorizontalAlignment = xlFill
        End Select
      End With
    End If
  End If
  If Not IsNull(Elem.getAttribute(vertAlignAtr)) Then
    valign = Elem.getAttribute(vertAlignAtr)
    If valign <> "" Then
      With r
        Select Case valign
          Case "T"
            .VerticalAlignment = xlTop
          Case "C"
            .VerticalAlignment = xlCenter
          Case "B"
            .VerticalAlignment = xlBottom
          Case "J"
            .VerticalAlignment = xlJustify
        End Select
      End With
    End If
  End If
End Sub

Private Sub InitReport()
    If MergerObj Is Nothing Then
      Set MergerObj = New Merger
    Else
      MergerObj.ClearAll
    End If
    
    If CellMergerObj Is Nothing Then
      Set CellMergerObj = New CellMerger
    Else
      CellMergerObj.ClearAll
    End If
    
    If GrouperObj Is Nothing Then
      Set GrouperObj = New Grouper
    Else
      GrouperObj.ClearAll
    End If
    
    If CustomValues Is Nothing Then
      Set CustomValues = New Map
    Else
      CustomValues.ClearAll
    End If
    
    If LocalCustomValues Is Nothing Then
      Set LocalCustomValues = New Map
    Else
      LocalCustomValues.ClearAll
    End If
    
    If ChartValues Is Nothing Then
      Set ChartValues = New ChartValuesMap
    Else
      ChartValues.ClearAll
    End If
    
    If ChartXValues Is Nothing Then
      Set ChartXValues = New ChartValuesMap
    Else
      ChartXValues.ClearAll
    End If
    
    If RealSheetNames Is Nothing Then
      Set RealSheetNames = New Map
    Else
      RealSheetNames.ClearAll
    End If
    
    If Charts Is Nothing Then
      Set Charts = New Map
    Else
      Charts.ClearAll
    End If
    
    If RowsHeights Is Nothing Then
      Set RowsHeights = New Collection
    Else
      ClearCollection RowsHeights
    End If
    
    If ColumnsWidths Is Nothing Then
      Set ColumnsWidths = New Collection
    Else
      ClearCollection ColumnsWidths
    End If
    
    If TextBoxes Is Nothing Then
      Set TextBoxes = New Collection
    Else
      ClearCollection TextBoxes
    End If
    
    If MacroTasks Is Nothing Then
      Set MacroTasks = New Collection
    Else
      ClearCollection MacroTasks
    End If
      
    If LinksRange Is Nothing Then
      Set LinksRange = New Collection
      Set LinksValue = New Collection
    Else
      ClearCollection LinksRange
      ClearCollection LinksValue
    End If
    
    If AutoFitRanges Is Nothing Then
      Set AutoFitRanges = New Collection
    Else
      ClearCollection AutoFitRanges
    End If
    
    If AutoWidthCells Is Nothing Then
      Set AutoWidthCells = New Collection
    Else
      ClearCollection AutoWidthCells
    End If
    
    If RealCellValues Is Nothing Then
      Set RealCellValues = New Map
    Else
      RealCellValues.ClearAll
    End If
    
    If usedTmpShts Is Nothing Then
      Set usedTmpShts = New Map
    Else
      usedTmpShts.ClearAll
    End If
    
    If Fiter Is Nothing Then Set Fiter = New AutoFiter
    
    With Application
      .Interactive = False ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
      .ScreenUpdating = False
      .DisplayAlerts = False
      '.Visible = True
      .StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      .EnableCancelKey = xlErrorHandler
    End With
End Sub

Private Sub InitPrintTitles()
    NeedPrintTitles = False
    SetStoredPrintTitles = False
    SetStoredFreezePane = False
    RowBeginPrintTitles = 0
    RowEndPrintTitles = 0
    StoredRowBeginPrintTitles = 0
    StoredRowEndPrintTitles = 0
    StoredRowFreezePane = 0
    StoredColFreezePane = 0

    NeedPrintTitles = CheckName(TmpSheet, BFT_PRINT_TITLES_NAME, False)
    If NeedPrintTitles Then
        With TmpSheet.range(BFT_PRINT_TITLES_NAME)
            RowBeginPrintTitles = .Rows(1).Row
            RowEndPrintTitles = .Rows(.Rows.Count).Row
        End With
    End If
    'CheckName RepSheet, PRINT_TITLES_NAME, False
End Sub

Private Function CheckName(ByRef sh As Worksheet, name As String, Delete As Boolean) As Boolean
    Dim i As Long
    CheckName = False
    With sh.Names
      For i = 1 To .Count
        If (.Item(i).name = "'" + sh.name + "'!" + name) Or (.Item(i).name = sh.name + "!" + name) Then
          If Delete Then
              .Item(i).Delete
          End If
          CheckName = True
          Exit For
        End If
      Next i
    End With
End Function

Private Function GetAttributeSafe(Elem As MSXML2.IXMLDOMElement, AttrName As String, _
Optional DefaultValue As String) As String
  GetAttributeSafe = ""
  On Error Resume Next
  GetAttributeSafe = Elem.getAttribute(AttrName)
  On Error GoTo 0
  If (GetAttributeSafe = "") And (Not IsEmpty(DefaultValue)) Then GetAttributeSafe = DefaultValue
End Function

Private Function GetBoolean(Elem As MSXML2.IXMLDOMElement, AttrName As String)
    If Elem.getAttribute(AttrName) = "TRUE" Then
      GetBoolean = True
    Else
      GetBoolean = False
    End If
End Function

Private Function MyReplace(Expr As String, Fnd As String, Rpl As String) As String
Dim result As String, pos As Long
  pos = InStr(Expr, Fnd)
  If pos <> 0 Then
    result = Left(Expr, pos - 1) + Rpl + Right(Expr, Len(Expr) - pos)
  Else
    result = Expr
  End If
  MyReplace = result
End Function

Private Function StrToBool(ByVal value As String) As Boolean
    StrToBool = False
    On Error Resume Next
    If value = "1" Or UCase(value) = "TRUE" Then
      StrToBool = True
    End If
End Function

Function StrToDbl(ByVal value As String) As Double
Dim ds As String
    
    ds = Application.International(xlDecimalSeparator)
    If ds <> "." Then
      value = MyReplace(value, ".", ds)
    End If
      
    StrToDbl = CDbl(value)
End Function

Private Sub EndReport()
    Dim dateDiff As Date
    Dim i As Long
    Dim pos As Long
    Dim r As range
    Dim addr As String, shname As String
    Dim ws As Worksheet
    
    Reset
    DeleteTmpSheets
        
    For i = 1 To LinksRange.Count
      Set r = LinksRange.Item(i)
      addr = LinksValue.Item(i)
      pos = InStr(addr, "!")
      If pos <> 0 Then
        shname = Mid(addr, 2, pos - 3)
        For Each ws In Worksheets
          If ws.name = shname Then
            r.Worksheet.Hyperlinks.Add Anchor:=r, Address:="", SubAddress:=addr
            Exit For
          End If
        Next ws
      End If
    Next i
    
    ClearCollection LinksRange
    ClearCollection LinksValue
    Set LinksRange = Nothing
    Set LinksValue = Nothing
    
    dateDiff = Now - startDate
    With Application
       .ScreenUpdating = True
       .Interactive = True
       .DisplayAlerts = True
    End With
    Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(dateDiff) + ". |fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(passedRanges)
    Set repBook = Nothing
    Set TmpSheet = Nothing
    Set curSheet = Nothing
    Set AutoFitTmpSheet = Nothing
    Set MergerObj = Nothing
    Set CellMergerObj = Nothing
    Set GrouperObj = Nothing
    Set NamesCoords = Nothing
    Set CustomValues = Nothing
    Set LocalCustomValues = Nothing
    Set ChartValues = Nothing
    Set ChartXValues = Nothing
    Set RealSheetNames = Nothing
    Set RealCellValues = Nothing
    Set usedTmpShts = Nothing
    Set Charts = Nothing
    Set AutoFitRanges = Nothing
    Set AutoWidthCells = Nothing
    Set RowsHeights = Nothing
    Set ColumnsWidths = Nothing
    Set TextBoxes = Nothing
    Set MacroTasks = Nothing
End Sub

Private Sub ShowError()
  Dim msg As String
  Dim SrcErrNumber As Long
  Dim SrcErrSource As String
  Dim SrcErrDescription As String
  
  SrcErrNumber = Err.Number
  SrcErrSource = Err.Source
  SrcErrDescription = Err.Description
  
  EndReport
  
  On Error GoTo ErrHandler
  
  If Err.Number <> SrcErrNumber Then _
    Err.Raise SrcErrNumber, SrcErrSource, SrcErrDescription
  
ErrHandler:
  If Err.Number = 18 Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
  End If
  If Err.Number <> 0 Then
    msg = "Error # " & str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
    MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
  End If
End Sub

Private Sub Reset()
    Dim i As Long
    
    If Not curSheet Is Nothing Then
      SetPrintTitles StoredRowBeginPrintTitles, StoredRowEndPrintTitles
      SetFreezePane StoredRowFreezePane, StoredColFreezePane
      
      MergerObj.MergeAll curSheet
      MergerObj.ClearAll
      
      CellMergerObj.MergeAll curSheet
      CellMergerObj.ClearAll
      
      GrouperObj.GroupAll curSheet
      GrouperObj.ClearAll
      
      SetWidths
      ClearCollection ColumnsWidths
      
      AutoWidthReportCells
      ClearCollection AutoWidthCells
      
      AutoFitReportRanges
      ClearCollection AutoFitRanges
      Fiter.clearRowsHeights
      
      SetHeights
      ClearCollection RowsHeights
      
      SetTextBoxes
      ClearCollection TextBoxes
      
      For i = 1 To MacroTasks.Count
        RunMacro MacroTasks.Item(i)
      Next i
      ClearCollection MacroTasks
        
      ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If isHeader Or isFooter Then
        curSheet.PageSetup.FirstPageNumber = FirstPageNumber
      End If
      
      If isHeader Then
        ProcessHeader headerAlign, headerValue
        isHeader = False
      End If
      
      If isFooter Then
        ProcessFooter footerAlign, footerValue
        isFooter = False
      End If
      
      If isPageMargin Then
        ProcessPageMargin pageMarginTop, pageMarginLeft, pageMarginBottom, pageMarginRight, pageMarginHeader, pageMarginFooter
        isPageMargin = False
      End If
      
      curSheet.Cells(1, 1).Select
      On Error Resume Next
      Application.GoTo Reference:=Worksheets(curSheet.name).range("A1"), scroll:=True
      On Error GoTo 0
    End If
    
    StartY = 1
    EndY = 0
    StartX = 1
    EndX = 0
    'RowCount = 0
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
                         '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                         
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Orient = "PORTRAIT" Then
      curSheet.PageSetup.Orientation = xlPortrait
    ElseIf Orient = "LANDSCAPE" Then
      curSheet.PageSetup.Orientation = xlLandscape
    End If
    
    If PagesWide > 0 Then
      With curSheet.PageSetup
        .FitToPagesWide = PagesWide
        .FitToPagesTall = False
        .Zoom = False
      End With
    End If

    If PagesScale > 0 Then
      With curSheet.PageSetup
        .FitToPagesWide = False
        .FitToPagesTall = False
        .Zoom = PagesScale
      End With
    End If

    offsetValue = 0
    
    If Not tmpBook Is Nothing Then
      tmpBook.Close
      Set tmpBook = Nothing
    End If

    On Error GoTo 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
End Sub

Private Sub MySplit(str As String, splitter As String, ByRef tmpArray() As String)
Const delta = 3 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
Dim pos, beg, spCount As Long, _
    ArrCount As Long
    

   ReDim tmpArray(0)
   If (str = "") Or (splitter = "") Then
      Exit Sub
   End If
   
   spCount = Len(splitter)
   beg = 1
   ArrCount = -1
   
   Do
      pos = InStr(beg, str, splitter)
      If pos <> 0 Then
         ArrCount = ArrCount + 1
         If UBound(tmpArray) < ArrCount Then
            ReDim Preserve tmpArray(UBound(tmpArray) + delta)
         End If
         tmpArray(ArrCount) = Mid(str, beg, pos - beg)
         beg = pos + spCount
      Else
         ReDim Preserve tmpArray(ArrCount + 1)
         tmpArray(ArrCount + 1) = Mid(str, beg)
         Exit Do
      End If
   Loop

End Sub


Private Function GetRandomName() As String
Dim RndValue1, RndValue2, RndValue3 As Long
  
    Randomize
    RndValue1 = Int((100000 - 10000 + 1) * Rnd + 10000)
    RndValue2 = Int((100000 - 10000 + 1) * Rnd + 10000)
    RndValue3 = Int((100000 - 10000 + 1) * Rnd + 10000)
  
    GetRandomName = CStr(RndValue1) + "-AZK-" + CStr(RndValue2) + "-AMG-" + CStr(RndValue3)

End Function

'Sub setXML(XML As String, mode As Long)
'  intXML = XML
'  dataMode = mode
'End Sub

'Function getExternalXML() As String
'    Dim Data As Object
        
'    Set Data = CreateObject("AZK2.Data")
    
    'Code = Data.GetCode
'    getExternalXML = Data.GetXML
'    Set Data = Nothing

'End Function

'return file data as string
Function readFile(FileName As String) As String
  Dim aFileSystem As FileSystemObject
  Dim aTextFile   As Object
  
  Set aFileSystem = New Scripting.FileSystemObject
  Set aTextFile = _
    aFileSystem.OpenTextFile(FileName, IOMode.ForReading, Tristate.TristateFalse)
    
  readFile = aTextFile.readAll
  
  aTextFile.Close
  
  aFileSystem.DeleteFile (FileName)
End Function

Sub CreateReportFromPackets(TemplatePath As String, TemplateName As String, XML As String)
    Dim doc As New MSXML2.DOMDocument
    Dim dataElem As MSXML2.IXMLDOMElement
    Dim childElem As MSXML2.IXMLDOMElement
    Dim i As Long
    Dim reportFileName As String
    
    If PacketMap Is Nothing Then
      Set PacketMap = New Map
    Else
      PacketMap.ClearAll
    End If
        
    doc.loadXML XML
    
    Set dataElem = doc.documentElement
    
    reportFileName = dataElem.getAttribute("filename")
    
    For i = 0 To dataElem.childNodes.length - 1
        Set childElem = dataElem.childNodes.Item(i)
        PacketMap.Add childElem.getAttribute("id"), childElem.getAttribute("filename")
    Next i
    
    CreateReportMain TemplatePath, TemplateName, 0, readFile(reportFileName), False, ""
    
    Set PacketMap = Nothing
End Sub

Sub CreateReportExt(TemplatePath As String, TemplateName As String, XML As String)
    CreateReportMain TemplatePath, TemplateName, 0, XML, False, ""
End Sub

Sub CreateReport(TemplatePath As String, TemplateName As String, XML As String, isSave As Boolean, SaveName As String)
    CreateReportMain TemplatePath, TemplateName, 0, XML, isSave, SaveName
End Sub

Private Function OpenBook(TemplatePath As String, TemplateName As String) As Workbook
Dim extPos As Long
Dim ext, useExt As String
    On Error GoTo Err:
    Set OpenBook = Application.Workbooks.Open(TemplatePath + TemplateName)
    Exit Function
Err:
    extPos = InStrRev(TemplateName, ".")
    ext = Mid(TemplateName, extPos + 1, Len(TemplateName) - extPos)
    If UCase(ext) = "XLT" Then
      useExt = "XLTX"
    Else
      useExt = "XLT"
    End If
    Set OpenBook = Application.Workbooks.Open(TemplatePath + Mid(TemplateName, 1, extPos - 1) + "." + useExt)
End Function

Private Function OpenRepBook(TemplatePath As String, TemplateName As String) As Workbook
    Set repBook = OpenBook(TemplatePath, TemplateName)
    OpenAutoFitTmpSheet
    tmpSheetsCount = repBook.Worksheets.Count
    Set OpenRepBook = repBook
End Function

Private Sub SmartOpenXLA(TemplatePath As String, xlaName As String)
    Dim Wb As Workbook
    On Error GoTo Err
    Set Wb = Workbooks.Item(xlaName)
    Set Wb = Nothing
    Exit Sub
Err:
    Application.Workbooks.Open (TemplatePath + xlaName)
End Sub

Private Sub InitXMLTags(Elem As IXMLDOMElement)
  Dim list As MSXML2.IXMLDOMNodeList
  Dim paramElem As MSXML2.IXMLDOMElement
  Dim i As Long
  Dim value As Variant
  Dim ver As String
        
  ver = ""
  
  Set list = Elem.getElementsByTagName(PARAMTAG)
  For i = 0 To list.length - 1
    Set paramElem = list.Item(i)
    ver = GetAttributeSafe(paramElem, "ver")
  Next i
  
  If ver = "2.0" Then
    itemTag = "I"
    rangeTag = "R"
    valueAtr = "V"
    refAtr = "R"
    autoFitAtr = "AF"
    rowHeightAtr = "RH"
    RANGENAMED_TAG = "RN"
    autoFitDefault = "1"
  Else
    itemTag = "ITEM"
    rangeTag = "RANGE"
    valueAtr = "VALUE"
    refAtr = "REF"
    autoFitAtr = "AUTOFIT"
    rowHeightAtr = "ROWHEIGHT"
    RANGENAMED_TAG = "RANGE_N"
    autoFitDefault = ""
  End If
End Sub

Sub CreateReportMain(TemplatePath As String, TemplateName As String, dataMode As Long, InXML As String, isSave As Boolean, SaveName As String)
    Dim book As Workbook
    
    On Error GoTo ErrorHandler
    
    reportTask = False
    
    InitReport
    
    Dim loaded As Boolean
    Dim doc As New MSXML2.DOMDocument
    Dim dataElem As IXMLDOMElement
    Dim nlist As IXMLDOMNodeList
    Dim plainTextElem As IXMLDOMElement
    Dim s As String
    Dim fName As String
    
    loaded = doc.loadXML(InXML)

    BookPath = TemplatePath
    BookName = TemplateName

    If loaded Then
      reportTask = doc.documentElement.nodeName = "REPORT_TASK"
      
      Set nlist = doc.getElementsByTagName("PLAIN_TEXT")
      If nlist.length > 0 Then
        Set plainTextElem = nlist.Item(0)
        s = plainTextElem.Text
        fName = plainTextElem.getAttribute("FILE_NAME")
        fName = InputBox("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", fName)
        If fName <> "" Then
          s = Replace(s, Chr(10), (Chr(13) + Chr(10)))
          SaveToFile fName, s
          doc.documentElement.removeChild plainTextElem
'          InXML = doc.XML
        Else
          EndReport
          Exit Sub
        End If
      End If
      
      Set nlist = doc.getElementsByTagName("DATASET")
      If nlist.length > 0 Then
        'MsgBox "?????? ????? ???????"
        SmartOpenXLA TemplatePath, "cons.xla"
        SmartOpenXLA TemplatePath, "tools.xla"
        Set dataElem = nlist(0)
        Application.Run "cons.xla!loadXML", TemplatePath + TemplateName, dataElem.getAttribute("REPTYPE"), InXML
        EndReport
        Exit Sub
      End If
    End If
    
    If UCase(TemplateName) = "MONTHREPORT.XLT" Then
      Dim xlt As Workbook
      
      SmartOpenXLA TemplatePath, "MonthReport.xla"
      Set xlt = Application.Workbooks.Open(TemplatePath + TemplateName)
      

      Application.Run "MonthReport.xla!RunReport", xlt, InXML
      
      Set xlt = Nothing
      
      EndReport
      Exit Sub
    End If
    
    Set book = OpenRepBook(BookPath, BookName)
    
    If CSng(val(Application.Version)) > 13 Then
      Dim wnd As Window
      Set wnd = Application.ActiveWindow
      wnd.Visible = False
      wnd.Visible = True
    End If

    Application.WindowState = xlMaximized

    If InStr(book.name, ".") <> 0 Then Exit Sub   '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If loaded Then FillReport book, doc
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| 128-|fffd| |fffd||fffd||fffd||fffd||fffd|"
    If loaded Then
      If doc.getElementsByTagName("MONTH_REPORT_REFERENCE").length > 0 Then
        SmartOpenXLA TemplatePath, "MonthReport.xla"
        Application.Run "MonthReport.xla!RunReport", book, _
             doc.getElementsByTagName("MONTH_REPORT_REFERENCE").Item(0).XML
      End If
    End If
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| 128-|fffd| |fffd||fffd||fffd||fffd||fffd|
    
    EndReport

    If defaultSheetName <> "" Then
        Sheets(defaultSheetName).Select
        defaultSheetName = ""
    End If
    
    If isSave Then
        book.SaveAs FileName:=SaveName
    End If
    
    Set book = Nothing
    
    Exit Sub
ErrorHandler:
    ShowError
End Sub

Private Sub AdjustTitlePage(ByRef sheet As Worksheet)
  Dim BrAuto, BrM As HPageBreak
  Dim i, n, HAuto, HM As Long
  n = sheet.HPageBreaks.Count
  If n > 0 Then
    Set BrAuto = sheet.HPageBreaks(1)
    If BrAuto.Type = xlPageBreakAutomatic Then
      HAuto = sheet.Rows("1:" + CStr(BrAuto.Location.Row - 1)).Height
      For i = 1 To n
        Set BrM = sheet.HPageBreaks(i)
        If BrM.Type = xlPageBreakManual Then
          HM = sheet.Rows("1:" + CStr(BrM.Location.Row - 1)).Height
          sheet.PageSetup.Zoom = sheet.PageSetup.Zoom * HAuto / HM - 1
          Exit For
        End If
      Next i
    End If
  End If
End Sub

Private Sub AutoWidthReportCells()
Dim i As Long
Dim unionRange As range
  If AutoWidthCells.Count > 0 Then
    Set unionRange = AutoWidthCells.Item(1)
    For i = 2 To AutoWidthCells.Count
      Set unionRange = Union(unionRange, AutoWidthCells.Item(i))
    Next
    unionRange.Columns.autoFit
  End If
End Sub

Private Sub AutoFitReportRanges()
  Dim r As range, unionRange As range, c As range
  Dim i As Long, k As Long, j As Long, cntI As Long, rowL As Long
  Dim tmp As String, firstAddress As String
  
  
  cntI = AutoFitRanges.Count
  With Application
    tmp = .StatusBar
    .StatusBar = Application.StatusBar + ", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(cntI) + " |fffd||fffd||fffd||fffd||fffd||fffd|..."
  End With

  Fiter.ClearAll
  Set unionRange = Nothing
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 1 To cntI
    Set r = AutoFitRanges.Item(i)
    For k = 1 To r.Rows.Count
      rowL = r.Rows(k).Row
      
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Range |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|.|fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| autofit |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      '(|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Range |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If unionRange Is Nothing Then
        Set unionRange = curSheet.Cells(rowL, 1)
      Else
        Set unionRange = Union(unionRange, curSheet.Cells(rowL, 1))
      End If
      
      For j = r.Column To r.Columns(r.Columns.Count).Column
        Fiter.AddCoords r.Worksheet.Cells(rowL, j)
      Next j
    Next k
  Next i
  
  If Not unionRange Is Nothing Then
    unionRange.Rows.autoFit
  End If

  If OpenAutoFitTmpSheet() Then _
    Fiter.DoRange AutoFitTmpSheet

  Application.StatusBar = tmp
End Sub

Private Sub ClearCollection(coll As Collection)
  While coll.Count > 0
    coll.Remove (1)
  Wend
End Sub

Private Function GetRangeCountValue(Elem As MSXML2.IXMLDOMElement) As Long
    Dim list As MSXML2.IXMLDOMNodeList
    Dim metaElem As MSXML2.IXMLDOMElement
    Dim i As Long
    Dim value As Variant
    Dim linesCntVal As Variant
        
    GetRangeCountValue = 0
    
    Set list = Elem.getElementsByTagName(metaTag)
    For i = 0 To list.length - 1
        Set metaElem = list.Item(i)
        value = metaElem.getAttribute(rangeCountAtr)
        If Not IsNull(value) Then
          GetRangeCountValue = GetRangeCountValue + CLng(value)
        End If
        linesCntVal = metaElem.getAttribute("L_CNT")
        If Not IsNull(linesCntVal) Then
          newLinesCount = CLng(linesCntVal)
        Else
          newLinesCount = 0
        End If
        
    Next i
'    Set list = Nothing
End Function

Private Sub PasteExportValues(MapObj As Map)
    Dim i As Long
    Dim Key As String
    Dim val As Variant
    Dim paramsheet As Worksheet
    Dim noSheetCreated As Boolean
    noSheetCreated = True
    For i = 1 To MapObj.KeySet.Count
      Key = MapObj.KeySet.Item(i)
      If InStr(Key, "EXPORT") > 0 Then
        val = MapObj.GetValue(Key)
        
        If noSheetCreated Then
          repBook.Sheets.Add after:=repBook.Worksheets(repBook.Worksheets.Count)
          Set paramsheet = repBook.ActiveSheet
          paramsheet.name = "ExportParams"
          noSheetCreated = False
          paramsheet.Visible = False
        End If
        
        paramsheet.Cells(i, 1).value = Key
        paramsheet.Cells(i, 2).NumberFormat = "@"
        paramsheet.Cells(i, 2).value = val
        Names.Add name:=Key, RefersTo:=paramsheet.Cells(i, 2)
      End If
    Next i
End Sub

Private Sub FillReport(rb As Workbook, doc As MSXML2.DOMDocument)
    
    Set repBook = rb

    'MsgBox (XML)
  
    'XML = "<DOCUMENT><SHEET TMPSHEET='Sheet1' NEWSHEET='|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|'><RANGE REF='1,1,2,2'><ITEM REF='1,1' VALUE='GGGGG'/></RANGE></SHEET></DOCUMENT>"
'    If doc.loadXML(XML) Then
       Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
       rangeCount = GetRangeCountValue(doc.documentElement)
       passedRanges = 0
       InitXMLTags doc.documentElement
       startDate = Now
       dateRemainsPrev = DateSerial(9999, 12, 31)
       FillCustomValuesMap doc.documentElement, CustomValues
       ParseNodes doc.documentElement
'    End If
       
  '     Set Book = Application.Workbooks(xltName)
'       tmpAmount = rb.Worksheets.Count
  
'       Set NodeList = Doc.getElementsByTagName(SheetTag)
'       If NodeList.Length > 0 Then
'          For i = 0 To NodeList.Length - 1
'             Application.StatusBar = "|fffd||fffd||fffd||fffd| " + CStr(i + 1) + " |fffd||fffd| " + CStr(NodeList.Length)
'             DoSheet repBook, NodeList.Item(i)
'          Next i
          
'       End If
     
       
'     hCount = 1
'     History(hCount) = node.parentNode.childNodes.Length
     
'     While hCount > 0
'       While History(hCount) > 0
         
'         Set Elem = node.parentNode.childNodes.Item(node.parentNode.childNodes.Length - History(hCount))
'         History(hCount) = History(hCount) - 1
         'MsgBox Elem.tagName + "  " + CStr(hCount)
         
'         Select Case Elem.tagName
'         Case "SHEET"
'              tmpSheetName = Elem.getAttribute("TMP_NAME")
'              NewSheetIdx = CreateNewSheet(Application.Workbooks(xltName), tmpSheetName, Elem.getAttribute("NEW_NAME"))
'         Case "RD"
'              flag = RANGE(Book, tmpSheetName, NewSheetIdx, Elem, "D")
'         Case "RR"
'              flag = RANGE(Book, tmpSheetName, NewSheetIdx, Elem, "R")
              
'         End Select
         
         
'         If Elem.hasChildNodes Then
'            Set node = Elem.firstChild
'            hCount = hCount + 1
'            History(hCount) = node.parentNode.childNodes.Length
'         End If
         
'       Wend 'History(hCount)
       
'       Set node = node.parentNode
'       hCount = hCount - 1
'     Wend 'hCount
   
'     flag = DeleteTmpSheets(Book, tmpAmount)
  
  If Not curSheet Is Nothing Then curSheet.Cells(1, 1).Select
  PasteExportValues CustomValues
End Sub

Private Sub SaveToFile(FileName As String, value As String)
    Dim fs, A
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set A = fs.CreateTextFile(FileName, True)
    A.WriteLine (value)
    A.Close
End Sub

Private Sub SaveByteArrToFile(FileName As String, ByteArray() As Byte)
  Dim nf As Long
  nf = FreeFile()
  Open FileName For Binary Access Write Lock Read As nf
    Put nf, , ByteArray()
  Close nf
End Sub

Private Function GetExpString(value As String) As String
    Dim i As Long
    Dim Res As String
    Dim s As String
          
    For i = 1 To Len(value)
        s = Mid(value, i, 1)
        If s = Chr(10) Then
            Res = Res + Chr(13) + s
        Else
          Res = Res + s
        End If
    Next i
    GetExpString = Res
End Function

Private Sub Export(Elem As MSXML2.IXMLDOMElement)
    Dim FileName As String
    Dim S_Data As Variant
    Dim B_data() As Byte
    Dim isNeedBase64Decode As Boolean
    Dim i As Long
    Dim cdataElem As MSXML2.IXMLDOMCDATASection
        
    FileName = Elem.getAttribute("FILE_NAME")
    If dir(FileName) <> "" Then
        Kill (FileName)
    End If
    If GetAttributeSafe(Elem, "FORCE_DIR", "0") <> "0" Then
      ForceDirectories (GetFileDirectory(FileName))
    End If
    isNeedBase64Decode = StrToBool(GetAttributeSafe(Elem, "NEED_BASE64_DECODE", "0"))
        
    For i = 0 To Elem.childNodes.length - 1
        If Elem.childNodes.Item(i).nodeType = MSXML2.NODE_CDATA_SECTION Then
            Set cdataElem = Elem.childNodes.Item(i)
            If (isNeedBase64Decode) Then
              B_data = Base64Array_Decode(StrConv(cdataElem.data, vbFromUnicode))
            Else
              S_Data = cdataElem.data
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Left(S_Data, 19) = "tatAccStatementExp1" Then
                S_Data = Chr(12) + S_Data
                S_Data = Replace(S_Data, "tatAccStatementExp1", "|12||1b|x0|1b|3|18||1b|g")
                S_Data = ConvANSItoOEM(S_Data)
                  S_Data = Replace(S_Data, Chr(10), (Chr(13) + Chr(10)))
            End If
              B_data = StrConv(S_Data, vbFromUnicode)
            End If
        End If
    Next i
    SaveByteArrToFile FileName, B_data
End Sub

Private Function GetFileDirectory(ByVal FileName As String) As String
  Dim i As Long
  i = InStrRev(FileName, "\") - 1
  If i = -1 Then
    GetFileDirectory = ""
  Else
    GetFileDirectory = Left$(FileName, i)
  End If
End Function

Private Sub ForceDirectories(ByVal Path As String)
  Dim i As Long
  Dim newPath As String
  Dim f As Variant
  f = Split(Path, "\")
  newPath = ""
  On Error Resume Next
  For i = 0 To UBound(f)
    If i > 0 Then newPath = newPath & "\"
    newPath = newPath & f(i)
    If dir(newPath, vbDirectory) = "" Then MkDir newPath
  Next
End Sub

Private Function ConvANSItoOEM(strText) As Variant
    Dim Arr() As Byte
    Dim i As Long
    Dim strOut As String
    Dim intLB As Long
    Dim intUB As Long
    If (strText = "") Or (IsNull(strText) = True) Then
        ConvANSItoOEM = ""
        Exit Function
    End If
    Arr() = StrConv(strText, vbFromUnicode)
    intLB = LBound(Arr)
    intUB = UBound(Arr)
    For i = intLB To intUB
        Select Case Arr(i)
            Case Is < 161
            Case 192 To 239
                Arr(i) = Arr(i) - 64
            Case 240 To 255
                Arr(i) = Arr(i) - 16
            Case 168 ' &#168;
                Arr(i) = 240
            Case 184 ' &#184;
                Arr(i) = 241
            Case 178 ' &#178;
                Arr(i) = 73
            Case 179 ' &#179;
                Arr(i) = 105
            Case 170 ' &#170;
                Arr(i) = 242
            Case 185 ' &#185;
                Arr(i) = 252
            Case 186 ' &#186;
                Arr(i) = 243
            Case 175 ' &#175;
                Arr(i) = 244
            Case 191 ' &#191;
                Arr(i) = 245
            Case 161 ' &#161;
                Arr(i) = 246
            Case 162 ' &#162;
                Arr(i) = 247
        End Select
    Next i
    ConvANSItoOEM = StrConv(Arr(), vbUnicode)
End Function


Private Sub showProgress()
    Dim percent As Long
    
    Dim mess As String
    Dim currentDate As Date
    Dim dateDiff As Date
    
    If rangeCount > 0 Then
      percent = (passedRanges) / rangeCount * 100
      If percent Mod 5 = 0 Then
        currentDate = Now
        dateDiff = currentDate - startDate
        Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + CStr(percent) + "% " _
             + CStr(passedRanges) + " |fffd||fffd| " + CStr(rangeCount) + ". |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(dateDiff)
      End If
    Else
      Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + CStr(passedRanges) + " |fffd||fffd||fffd||fffd||fffd||fffd|)"
    End If
End Sub

Private Sub ParseNodes(Elem As MSXML2.IXMLDOMElement)
Dim i As Long, j As Long, childElem As MSXML2.IXMLDOMElement, enterChild As Boolean
Dim packetDoc As MSXML2.DOMDocument
Dim cnt As Long

   enterChild = True
   isHeader = False
   isFooter = False
   isPageMargin = False
   
   cnt = Elem.childNodes.length - 1
   For i = 0 To cnt
'      If Elem.childNodes.Item(i).nodeType = MSXML2.NODE_ELEMENT Then
          Set childElem = Elem.childNodes.Item(i)
          'MsgBox child.nodeName
          Select Case childElem.tagName
             Case sheetTag
                  
                  FillCustomValuesMap childElem, LocalCustomValues
                  
                  enterChild = True
                  FirstPageNumber = CLng(GetAttributeSafe(childElem, "FIRSTPAGENUMBER", "0"))
                  fontAmplifier = StrToDbl(GetAttributeSafe(childElem, FONT_AMPLIFIER, "1"))
                  NewSheet _
                    childElem.getAttribute(TEMPLATESHEETATR), _
                    childElem.getAttribute(tmpSheetAtr), _
                    childElem.getAttribute(newSheetAtr), _
                    GetBoolean(childElem, "CLEAR"), _
                    childElem.getAttribute(orientAtr), _
                    GetAttributeSafe(childElem, OUTLINE_SUMROWATR, "0"), _
                    CLng(GetAttributeSafe(childElem, "PAGES_WIDE", "0")), _
                    CLng(GetAttributeSafe(childElem, "SC", "0")), _
                    StrToBool(GetAttributeSafe(childElem, "PRC_AF", "1"))
             
             Case PARAMTAG
                  enterChild = False
                  defaultSheetName = GetAttributeSafe(childElem, defaultSheetAttr)
             Case CUSTOM_VALUES_TAG
                  enterChild = False
                  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
             Case rangeTag
                  enterChild = False
                  range childElem, False
             Case RANGENAMED_TAG
                  enterChild = False
                  range childElem, True
             Case rangeOffsetTag
                  enterChild = False
                  RangeOffset childElem
             Case pageBreakTag
                  enterChild = False
                  ProcessPageBreak
             Case headerTag
                  enterChild = False
                  isHeader = True
                  headerAlign = GetAttributeSafe(childElem, alignAtr)
                  headerValue = GetAttributeSafe(childElem, valueAtr)
                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Reset
             Case footerTag
                  enterChild = False
                  isFooter = True
                  footerAlign = GetAttributeSafe(childElem, alignAtr)
                  footerValue = GetAttributeSafe(childElem, valueAtr)
                  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Reset
             Case formatTag
                  enterChild = False
                  Format childElem
             Case cellTag
                  enterChild = False
                  CellValue childElem
             Case exportTag
                  enterChild = False
                  Export childElem
             Case setWidthTag
                  enterChild = False
                  AddElem childElem, ColumnsWidths
             Case setHeightTag
                  enterChild = False
                  AddElem childElem, RowsHeights
             Case signTag
                  enterChild = False
                  ProcessSigns childElem
             Case extSignTag
                  enterChild = False
                  ProcessExtSigns childElem
             Case textBoxTag
                  enterChild = False
                  AddElem childElem, TextBoxes
             Case CHART_TAG
                  enterChild = False
                  AddChartProperties childElem
             Case MACRO_TAG
                  enterChild = False
                  AddElem childElem, MacroTasks
             Case MESSAGE_TAG
                  enterChild = False
                  ShowMessage childElem
             Case USE_XLA_TAG
                  enterChild = False
                  UseXla childElem
             Case packetTag
                  Dim s1 As String, s2 As String, s3 As String
                  enterChild = False
                  Set packetDoc = New MSXML2.DOMDocument
                  s1 = childElem.getAttribute("id")
                  s2 = PacketMap.GetValue(s1)
                  s3 = readFile(s2)
                  packetDoc.loadXML (s3)
                  ParseNodes packetDoc.documentElement
             Case offsetTag
                  offsetValue = childElem.getAttribute("SHEET_OFFSET")
             Case PAGEMARGIN_TAG
                  enterChild = False
                  isPageMargin = True
                  pageMarginTop = GetAttributeSafe(childElem, PAGETOPMARGIN_ATTR)
                  pageMarginBottom = GetAttributeSafe(childElem, PAGEBOTTOMMARGIN_ATTR)
                  pageMarginLeft = GetAttributeSafe(childElem, PAGELEFTMARGIN_ATTR)
                  pageMarginRight = GetAttributeSafe(childElem, PAGERIGHTMARGIN_ATTR)
                  pageMarginHeader = GetAttributeSafe(childElem, PAGEHEADERMARGIN_ATTR)
                  pageMarginFooter = GetAttributeSafe(childElem, PAGEFOOTERMARGIN_ATTR)
                  ShowMessage childElem
          End Select
      
          If enterChild And childElem.hasChildNodes Then
             ParseNodes childElem
             If childElem.tagName = sheetTag And GetAttributeSafe(childElem, adjustTitlePageAttr, "0") = "1" Then
               Call AdjustTitlePage(curSheet)
             End If
          End If
'      End If
   
   Next i

End Sub

Private Sub AddElem(Elem As MSXML2.IXMLDOMElement, coll As Collection)
  coll.Add Elem
End Sub

Private Sub ShowMessage(Elem As MSXML2.IXMLDOMElement)
  Dim messageText As String
  messageText = GetAttributeSafe(Elem, MESSAGE_TEXT_ATTR)
  If Len(messageText) > 0 Then
    MsgBox messageText
  End If
End Sub

Private Sub UseXla(Elem As MSXML2.IXMLDOMElement)
  Dim xlaName As String
  xlaName = GetAttributeSafe(Elem, nameAttr)
  If Len(xlaName) > 0 Then
    SmartOpenXLA BookPath, xlaName
  End If
End Sub

Private Sub SetPrintTitles(aTop As Long, aBottom As Long)
    If SetStoredPrintTitles Then
        curSheet.PageSetup.PrintTitleRows = "$" & CStr(aTop) & ":$" & CStr(aBottom)
    End If
End Sub

Private Sub SetFreezePane(aRow As Long, aCol As Long)
    If SetStoredFreezePane Then
        curSheet.Cells(aRow + 1, aCol + 1).Select
        curSheet.Activate
        ActiveWindow.FreezePanes = True
    End If
End Sub

Private Function GetPureName(name As String) As String
  Dim p As Long
  p = InStr(name, "!")
  If p > 0 Then _
    GetPureName = Mid(name, p + 1) _
  Else _
    GetPureName = name
End Function

Private Sub ScanNamedRanges(ws As Worksheet)
  Dim r As range
  Dim n As name
  Dim name As String

  Set NamesCoords = New Collection
  For Each n In ws.Names
    On Error GoTo Err
    Set r = n.RefersToRange
    Dim NewCoords(3) As Long
    NewCoords(0) = r.Rows(1).Row
    NewCoords(1) = r.Columns(1).Column
    NewCoords(2) = r.Rows(r.Rows.Count).Row
    NewCoords(3) = r.Columns(r.Columns.Count).Column
    
    name = GetPureName(n.name)
    
    NamesCoords.Add Item:=NewCoords, Key:=name
Err:
  Next
  
  ScanCells ws
  If IsEmpty(usedTmpShts.GetValue(ws.name)) Then usedTmpShts.Add ws.name, ws.name
End Sub

Private Sub ScanCells(ws As Worksheet)
  Dim r As range, c As range
  Dim i As Long, k As Long
  Dim j As Long
  Dim Count As Long
  Dim val As Variant
  Dim isFontAmplifier As Boolean
      
  On Error GoTo Err
  
  Set r = ws.UsedRange

  isFontAmplifier = (fontAmplifier <> 1) And (IsEmpty(usedTmpShts.GetValue(ws.name)) Or reportTask)
  
  For i = 1 To r.Rows.Count
    For j = 1 To r.Columns.Count
    Set c = r.Cells(i, j)
      val = c.value
      If Not IsEmpty(val) Then
        If isFontAmplifier Then
          For k = 1 To CDec(Len(c.value))
            With c.Characters(Start:=k, length:=1).Font
                 .Size = .Size * fontAmplifier
            End With
          Next k
        End If
        If Left(CStr(val), 1) = "!" Then
          RealCellValues.Add r.Cells(i, j).Address(), val
          r.Cells(i, j).value = ReplaceConst(Mid(CStr(val), 2), LocalCustomValues, CustomValues)
        End If
      Else
        If isFontAmplifier Then
          With c.Font
           .Size = .Size * fontAmplifier
          End With
        End If
      End If
    Next j
  Next i

Err:
End Sub

Private Sub RestoreRealCellValues(ws As Worksheet)
  Dim i As Long
  Dim CellSet As Sett
  Dim Cell As String
  
  Set CellSet = RealCellValues.KeySet
  For i = 1 To CellSet.Count
    Cell = CellSet.Item(i)
    ws.range(Cell).value = RealCellValues.GetValue(Cell)
  Next i
  RealCellValues.ClearAll
End Sub

Private Function GetCoordsByName(name As String, Coords() As Long) As Boolean
  Dim ExistingCoords() As Long
  On Error GoTo ErrorHandler
  ExistingCoords = NamesCoords.Item(name)
  
  Coords(0) = ExistingCoords(0)
  Coords(1) = ExistingCoords(1)
  Coords(2) = ExistingCoords(2)
  Coords(3) = ExistingCoords(3)
  GetCoordsByName = True
  Exit Function
ErrorHandler:
  Coords(0) = 0
  Coords(1) = 0
  Coords(2) = 0
  Coords(3) = 0
  GetCoordsByName = False
End Function

Private Sub NewSheet(Template As Variant, Source As Variant, NewName As Variant, ClearContents As Boolean, OrientStr As String, _
  OutLineSumPos As String, PagesWideLong As Long, ScaleLong As Long, ProcAutoFit As Boolean)

Const shnCount = 31
Dim i, rndValue As Long, tmp As String, SourceName As String, sheetName As String
Dim SrcNewName As String
Dim book As Workbook

    Fiter.clearRowsHeights
    
    SrcNewName = NewName
    
    Orient = OrientStr
    PagesWide = PagesWideLong
    PagesScale = ScaleLong
    ProcAutoFitSht = ProcAutoFit
    
    If Not TmpSheet Is Nothing Then
      RestoreRealCellValues TmpSheet
    End If
    
    Reset
    MaxX = 1
    
    If repBook.Worksheets.Count > 120 Then
       DeleteTmpSheets
       OpenRepBook BookPath, BookName
       usedTmpShts.ClearAll
    End If
    
    NewName = Trim(NewName)
    
    If IsNull(Source) Then SourceName = "" Else SourceName = CStr(Source)
    If IsNull(NewName) Then sheetName = "" Else sheetName = CStr(NewName)
    
    If IsNull(Template) Then
      Set book = repBook
    Else
      Set tmpBook = GetObject(BookPath + CStr(Template))
      Set book = tmpBook
    End If
    
    If SourceName <> "" Then
       On Error GoTo ErrHandler
       Set TmpSheet = book.Worksheets(SourceName)
       On Error GoTo 0
    Else
       Set TmpSheet = book.Worksheets(1)
    End If
    
    ScanNamedRanges TmpSheet
    
    '---------------
    
    TmpSheet.Copy after:=repBook.Worksheets(repBook.Worksheets.Count)
    Set curSheet = repBook.Worksheets(repBook.Worksheets.Count)
    
    If sheetName <> "" Then
       If Len(sheetName) > shnCount Then
          sheetName = Left(sheetName, shnCount)
       End If
       
       Randomize
       For i = 1 To repBook.Worksheets.Count - 1
          If UCase(repBook.Worksheets(i).name) = UCase(sheetName) Then
             rndValue = Int((9999 * Rnd) + 1)
             tmp = " (" + CStr(rndValue) + ")"
             sheetName = Left(sheetName, shnCount - Len(tmp)) + tmp
          End If
       Next i
       curSheet.name = sheetName
       RealSheetNames.Add SrcNewName, curSheet.name
    End If
    
    If ClearContents Then
      With curSheet
         .Cells.ClearFormats
         .Cells.ClearContents
      End With
    End If
    
    On Error Resume Next
    
    If OutLineSumPos = "1" Then
      curSheet.Outline.SummaryRow = xlSummaryAbove
    ElseIf OutLineSumPos = "2" Then
      curSheet.Outline.SummaryRow = xlSummaryBelow
    End If
    
    InitPrintTitles
    On Error GoTo 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Exit Sub
    
ErrHandler:
  If Err.Number = 9 Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " + SourceName + " |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Exit Sub
  End If
End Sub

Private Sub CellValue(cellElem As MSXML2.IXMLDOMElement)
    Dim CellName As String
    Dim value As String
        
    CellName = cellElem.getAttribute(nameAttr)
    value = cellElem.getAttribute(valueAtr)
    On Error GoTo ErrorHandler
    TmpSheet.range(CellName).Copy
    curSheet.range(CellName).PasteSpecial Paste:=xlAll
ErrorHandler:
    On Error Resume Next
    curSheet.range(CellName).value = value
End Sub

Private Function InRect(RectRange As Rect, x As Long, y As Long) As Boolean
  If (RectRange.Top <= x) And (RectRange.Bottom >= x) And _
     (RectRange.Left <= y) And (RectRange.Right >= y) Then
    InRect = True
  Else
    InRect = False
  End If
End Function

Private Sub ProcessItem(rangeelem As MSXML2.IXMLDOMElement, isNamed As Boolean, _
aRangeRect As Rect, OffsetX As Long, OffsetY As Long)

  Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, _
  Ref As String, value As String, Row As Long, _
  refArr() As String, Col As Long
  Dim Coords(3) As Long
  Dim r As range
  
  For i = 0 To rangeelem.childNodes.length - 1
    Set ItemElem = rangeelem.childNodes.Item(i)
    If ItemElem.tagName = itemTag Or ItemElem.tagName = itemClearTag Then
      If isNamed Then
        Ref = ItemElem.getAttribute(nameAttr)
          
        If GetCoordsByName(Ref, Coords) Then
          Row = Coords(0)
          Col = Coords(1)
        Else
          Exit Sub
        End If
      Else
        Ref = ItemElem.getAttribute(refAtr)
        MySplit Ref, ",", refArr
        Row = refArr(0)
        Col = refArr(1)
      End If
        
      If ItemElem.tagName = itemTag Then
        value = ItemElem.getAttribute(valueAtr)
        On Error GoTo ErrorInsertValueHandler
        curSheet.Cells(Row + OffsetY, Col + OffsetX).value = value
        On Error GoTo 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      
        If ItemElem.getAttribute(AUTO_WIDTH_ATR) = "1" Then
          AutoWidthCells.Add curSheet.Cells(Row + OffsetY, Col + OffsetX)
        End If
      
        If Not IsNull(ItemElem.getAttribute(LINK_ATR)) Then
          LinksRange.Add curSheet.Cells(Row + OffsetY, Col + OffsetX)
          LinksValue.Add CStr(ItemElem.getAttribute(LINK_ATR))
        End If
        
        If InRect(aRangeRect, Row, Col) Then
          Dim NextRow As Long
          Dim NextCol As Long
        
          NextRow = Row + OffsetY
          NextCol = Col + OffsetX
        
          If Not AddToChartValue(ItemElem, CHART_VALUE_ATR, ChartValues, NextRow, NextCol) Then _
            AddToChartValue ItemElem, CHART_XVALUE_ATR, ChartXValues, NextRow, NextCol
        End If

      Else
        On Error GoTo ErrorInsertValueHandler
        curSheet.Cells(Row + OffsetY, Col + OffsetX).value = Null
        On Error GoTo 0 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      End If
    End If
  Next i
  
  Exit Sub
  
ErrorInsertValueHandler:
  MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" + Chr(13) + Chr(10) + _
         "---------------------------------------------------" + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Row - aRangeRect.Top + LastRangeTop) + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + CStr(Col - aRangeRect.Left + LastRangeLeft) + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + value + Chr(13) + Chr(10) + _
         "---------------------------------------------------" + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd||fffd|: " + Err.Description + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: (" + CStr(Err.Number) + ")" + Chr(13) + Chr(10) + _
         "==========================" + Chr(13) + Chr(10) + _
         "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !!!"
  End Sub

Private Function AddToChartValue(Elem As MSXML2.IXMLDOMElement, _
atrName As String, aChartValues As ChartValuesMap, _
aRow As Long, aCol As Long) As Boolean
  Dim chartName As String
  Dim Arr() As String
  Dim i As Long
  
  AddToChartValue = False
  chartName = GetAttributeSafe(Elem, atrName)
  If Len(chartName) > 0 Then
    MySplit chartName, "*", Arr
    For i = LBound(Arr) To UBound(Arr)
      aChartValues.Add Arr(i), curSheet.name, aRow, aCol
      AddToChartValue = True
    Next i
  End If
End Function

Private Sub ProcessCellNameItem(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeLeft As Long)
Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, Ref As String, value As String, Row As Long, _
    refArr() As String, Col As Long

Dim Nodelist As MSXML2.IXMLDOMNodeList
    
    Set Nodelist = rangeelem.getElementsByTagName(CELLNAME_TAG)
    For i = 0 To Nodelist.length - 1
      Set ItemElem = Nodelist.Item(i)
        Ref = ItemElem.getAttribute(refAtr)
        value = ItemElem.getAttribute(valueAtr)
        MySplit Ref, ",", refArr
        Row = LastRangeTop + (refArr(0) - TmpRangeTop)
        Col = LastRangeLeft + (refArr(1) - TmpRangeLeft)
        If (Row >= LastRangeTop And Row <= LastRangeBottom) And _
           (Col >= LastRangeLeft And Col <= LastRangeRight) _
        Then
          curSheet.Names.Add _
            name:=value, _
            RefersToR1C1:="='" & curSheet.name & "'!R" & CStr(Row) & "C" & CStr(Col)
        End If
    Next i

End Sub

Private Sub ProcessCellFormatItem(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeLeft As Long, isNamed As Boolean)
Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, Ref As String, value As String, Row As Long, _
    refArr() As String, Col As Long, name As String

Dim Nodelist As MSXML2.IXMLDOMNodeList
    
    Set Nodelist = rangeelem.getElementsByTagName(CELLFORMAT_TAG)
    For i = 0 To Nodelist.length - 1
      Set ItemElem = Nodelist.Item(i)
        
        value = ItemElem.getAttribute(formatAtr)
        
        If (isNamed) Then
          name = ItemElem.getAttribute(nameAttr)
          Row = NamesCoords.Item(name)(0)
          Col = NamesCoords.Item(name)(1)
        Else
          Ref = ItemElem.getAttribute(refAtr)
          MySplit Ref, ",", refArr
          Row = LastRangeTop + (refArr(0) - TmpRangeTop)
          Col = LastRangeLeft + (refArr(1) - TmpRangeLeft)
        End If
        
        If (Row >= LastRangeTop And Row <= LastRangeBottom) And _
           (Col >= LastRangeLeft And Col <= LastRangeRight) _
        Then
          curSheet.Cells(Row, Col).NumberFormat = value
          'Name:=Value, _
          '  RefersToR1C1:="=" & curSheet.Name & "!R" & CStr(Row) & "C" & CStr(Col)
        End If
    Next i

End Sub

Private Sub ProcessCellAlignItem(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeLeft As Long, isNamed As Boolean)
Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, Ref As String, Row As Long, _
    refArr() As String, Col As Long, name As String

Dim Nodelist As MSXML2.IXMLDOMNodeList
    
    Set Nodelist = rangeelem.getElementsByTagName(CELLALIGN_TAG)
    For i = 0 To Nodelist.length - 1
      Set ItemElem = Nodelist.Item(i)
                
        If (isNamed) Then
          name = ItemElem.getAttribute(nameAttr)
          Row = NamesCoords.Item(name)(0)
          Col = NamesCoords.Item(name)(1)
        Else
          Ref = ItemElem.getAttribute(refAtr)
          MySplit Ref, ",", refArr
          Row = LastRangeTop + (refArr(0) - TmpRangeTop)
          Col = LastRangeLeft + (refArr(1) - TmpRangeLeft)
        End If
        
        If (Row >= LastRangeTop And Row <= LastRangeBottom) And _
           (Col >= LastRangeLeft And Col <= LastRangeRight) _
        Then
          SetRangeAligment curSheet.Cells(Row, Col), ItemElem
        End If
    Next i

End Sub

Private Sub ProcessGroupItem(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeBottom As Long)
Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, name As String, xOffset As Long, _
    Kind As String

Dim Nodelist As MSXML2.IXMLDOMNodeList
    
    Set Nodelist = rangeelem.getElementsByTagName(GROUPINDEX_TAG)
    For i = 0 To Nodelist.length - 1
      Set ItemElem = Nodelist.Item(i)
      xOffset = CLng(ItemElem.getAttribute(offsetXatr))
      name = ItemElem.getAttribute(nameAttr)
      Kind = CStr(ItemElem.getAttribute(KINDATR))
        
      If (xOffset <= TmpRangeBottom - TmpRangeTop) Then
        If Kind = KIND_GROUP_BEGIN Then
          GrouperObj.AddBeginRowIndex name, LastRangeTop + xOffset
        Else
          GrouperObj.AddEndRowIndex name, LastRangeTop + xOffset
        End If
      End If
    Next i
End Sub

Private Sub ProcessMerges(rangeelem As MSXML2.IXMLDOMElement)
Dim Elem As MSXML2.IXMLDOMElement, i As Long, list As MSXML2.IXMLDOMNodeList, name As String

Dim Width As Long, Height As Long, OffsetX As Long, OffsetY As Long


    Set list = rangeelem.getElementsByTagName(MERGE_TAG)
    
    For i = 0 To list.length - 1
      Set Elem = list.Item(i)
      
      name = Elem.getAttribute(nameAttr)
      
      Width = CLng(Elem.getAttribute(widthAtr))
      Height = CLng(Elem.getAttribute(heightAtr))
      
      OffsetX = CLng(Elem.getAttribute(offsetXatr))
      OffsetY = CLng(Elem.getAttribute(offsetYatr))
      
      If (name <> "") And (Width > 0) And (Height > 0) And (OffsetX >= 0) And (OffsetY >= 0) Then
        MergerObj.Add name, LastRangeTop + OffsetX, LastRangeLeft + OffsetY, _
          LastRangeTop + OffsetX + Height - 1, LastRangeLeft + OffsetY + Width - 1
      End If
    
    Next i

End Sub

Private Sub ProcessMergesCells(rangeelem As MSXML2.IXMLDOMElement)
Dim Elem As MSXML2.IXMLDOMElement, i As Long, list As MSXML2.IXMLDOMNodeList, name As String

Dim OffsetX As Long, OffsetY As Long


    Set list = rangeelem.getElementsByTagName(CELL_MERGE_TAG)
    
    For i = 0 To list.length - 1
      Set Elem = list.Item(i)
      
      name = Elem.getAttribute(nameAttr)
      
      OffsetX = CLng(Elem.getAttribute(offsetXatr))
      OffsetY = CLng(Elem.getAttribute(offsetYatr))
      
      If (name <> "") And (OffsetX >= 0) And (OffsetY >= 0) Then
        CellMergerObj.Add name, LastRangeTop + OffsetX, LastRangeLeft + OffsetY
      End If
    
    Next i

End Sub

Private Sub ProcessFormatRange(rangeelem As MSXML2.IXMLDOMElement, arect As Rect)
  Dim Elem As MSXML2.IXMLDOMElement, i As Long, k As Long, list As MSXML2.IXMLDOMNodeList
  Dim Width As Long, Height As Long, OffsetX As Long, OffsetY As Long
  Dim sFormat As String
  Dim subRange As range

  Set list = rangeelem.getElementsByTagName(formatRangeTag)
    
  For i = 0 To list.length - 1
    Set Elem = list.Item(i)
    Width = CLng(Elem.getAttribute(widthAtr))
    Height = CLng(Elem.getAttribute(heightAtr))
    OffsetX = CLng(Elem.getAttribute(offsetXatr))
    OffsetY = CLng(Elem.getAttribute(offsetYatr))
    sFormat = Elem.getAttribute(formatAtr)
  
    If (Width > 0) And (Height > 0) And (OffsetX >= 0) And (OffsetY >= 0) Then
      Set subRange = TmpSheet.range(TmpSheet.Cells(arect.Top + OffsetX, arect.Left + OffsetY), _
           TmpSheet.Cells(arect.Top + OffsetX + Height - 1, arect.Left + OffsetY + Width - 1))
      If Len(sFormat) > 0 Then
          subRange.NumberFormat = sFormat
      End If
      SetRangeAligment subRange, Elem
      FormatText Elem, subRange
      SetRangeInteriorProperties Elem, subRange.interior
      
      If Elem.getElementsByTagName(borderTag).length > 0 Then
        ProcessBorder subRange, Elem.getElementsByTagName(borderTag).Item(0)
    End If
  End If
  Next i
  
End Sub

Private Sub ProcessBorder(range As range, BorderElem As MSXML2.IXMLDOMElement)
  setBorderProperties range.Borders(xlEdgeTop), BorderElem.getElementsByTagName(borderEdgeTopTag).Item(0)
  setBorderProperties range.Borders(xlEdgeBottom), BorderElem.getElementsByTagName(borderEdgeBottomTag).Item(0)
  setBorderProperties range.Borders(xlEdgeLeft), BorderElem.getElementsByTagName(borderEdgeLeftTag).Item(0)
  setBorderProperties range.Borders(xlEdgeRight), BorderElem.getElementsByTagName(borderEdgeRightTag).Item(0)
  setBorderProperties range.Borders(xlInsideVertical), BorderElem.getElementsByTagName(borderInsudeVerticalTag).Item(0)
  setBorderProperties range.Borders(xlInsideHorizontal), BorderElem.getElementsByTagName(borderInsideHorisontalTag).Item(0)
  setBorderProperties range.Borders(xlDiagonalUp), BorderElem.getElementsByTagName(borderDiagonalUpTag).Item(0)
  setBorderProperties range.Borders(xlDiagonalDown), BorderElem.getElementsByTagName(borderDiagonalDownTag).Item(0)
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| obj. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Range, Cells(x,y), Characters(x,y) (|fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Private Sub FormatText(Elem As MSXML2.IXMLDOMElement, obj As Object)
  Dim isBold As Boolean
  Dim fName As String
  Dim fSize As Double
  Dim fColorIndex As Long
  Dim fColor As Long
  Dim fStyle As String
  Dim fisUnderLine As Boolean
  Dim fisStrikethrough As Boolean
  
    isBold = StrToBool(GetAttributeSafe(Elem, boldAttr, "0"))
    fName = GetAttributeSafe(Elem, fontNameAttr)
    fSize = StrToDbl(GetAttributeSafe(Elem, fontSizeAttr, "0"))
    fColorIndex = CLng(GetAttributeSafe(Elem, fontColorIndexAttr, "-1"))
    fColor = CLng(GetAttributeSafe(Elem, fontColorAttr, "-1"))
    fStyle = GetAttributeSafe(Elem, fontStyleAttr)
    fisUnderLine = StrToBool(GetAttributeSafe(Elem, fontUnderLineAttr, "0"))
    fisStrikethrough = StrToBool(GetAttributeSafe(Elem, fontStrikethroughAttr, "0"))
  With obj
        If isBold Then
          .Font.Bold = True
        End If
        If fName <> "" Then
          .Font.name = fName
        End If
        If fSize > 0 Then
          .Font.Size = fSize
        End If
        If fColor > -1 Then
          .Font.Color = fColor
        End If
        If fColorIndex > -1 Then
          .Font.ColorIndex = fColorIndex
        End If
        If fStyle <> "" Then
          If (Application.International(xlCountryCode) = 7) Then
            If fStyle = "Common" Or fStyle = "Regular" Then
              .Font.fontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            ElseIf fStyle = "Bold" Then
              .Font.fontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            ElseIf fStyle = "Italic" Then
              .Font.fontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
            ElseIf fStyle = "Bold Italic" Then
              .Font.fontStyle = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
          Else
            .Font.fontStyle = fStyle
          End If
        End If
      If fisUnderLine Then
        .Font.Underline = xlUnderlineStyleSingle
      Else
        .Font.Underline = xlUnderlineStyleNone
      End If
      .Font.Strikethrough = fisStrikethrough
  End With
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub SetRangeInteriorProperties(Elem As MSXML2.IXMLDOMElement, interior As interior)
  Dim fColorIndex As Long
  Dim fPatternColorIndex As Long
  Dim fPattern As String
    fColorIndex = CLng(GetAttributeSafe(Elem, interiorColorIndexAttr, "-1"))
    fPatternColorIndex = CLng(GetAttributeSafe(Elem, interiorPatternColorIndexAttr, "-1"))
    fPattern = GetAttributeSafe(Elem, interiorPatternAttr)
  With interior
        If fColorIndex > -1 Then
          .ColorIndex = fColorIndex
        End If
        If fPatternColorIndex > -1 Then
          .PatternColorIndex = fPatternColorIndex
        End If
        If fPattern <> "" Then
           If fPattern = "xlPatternSolid" Then
             .Pattern = xlPatternSolid
           ElseIf fPattern = "xlPatternGray75" Then
             .Pattern = xlPatternGray75
           ElseIf fPattern = "xlPatternGray50" Then
             .Pattern = xlPatternGray50
           ElseIf fPattern = "xlPatternGray25" Then
             .Pattern = xlPatternGray25
           ElseIf fPattern = "xlPatternGray16" Then
             .Pattern = xlPatternGray16
           ElseIf fPattern = "xlPatternGray8" Then
             .Pattern = xlPatternGray8
           ElseIf fPattern = "xlPatternHorizontal" Then
             .Pattern = xlPatternHorizontal
           ElseIf fPattern = "xlPatternVertical" Then
             .Pattern = xlPatternVertical
           ElseIf fPattern = "xlPatternDown" Then
             .Pattern = xlPatternDown
           ElseIf fPattern = "xlPatternUp" Then
             .Pattern = xlPatternUp
           ElseIf fPattern = "xlPatternChecker" Then
             .Pattern = xlPatternChecker
           ElseIf fPattern = "xlPatternSemiGray75" Then
             .Pattern = xlPatternSemiGray75
           ElseIf fPattern = "xlPatternLightHorizontal" Then
             .Pattern = xlPatternLightHorizontal
           ElseIf fPattern = "xlPatternLightVertical" Then
             .Pattern = xlPatternLightVertical
           ElseIf fPattern = "xlPatternLightDown" Then
             .Pattern = xlPatternLightDown
           ElseIf fPattern = "xlPatternLightUp" Then
             .Pattern = xlPatternLightUp
           ElseIf fPattern = "xlPatternGrid" Then
             .Pattern = xlPatternGrid
           ElseIf fPattern = "xlPatternCrissCross" Then
             .Pattern = xlPatternCrissCross
           Else
             .Pattern = xlPatternNone
           End If
        End If
  End With
End Sub

Private Sub setBorderProperties(border As border, propElem As MSXML2.IXMLDOMElement)
  Dim attrValue As String
  
  On Error Resume Next
  With border
     attrValue = propElem.getAttribute(borderLineStyleAttr)
     If attrValue = "xlContinuous" Then
       .LineStyle = xlContinuous
     ElseIf attrValue = "xlDash" Then
       .LineStyle = xlDash
     ElseIf attrValue = "xlDashDot" Then
       .LineStyle = xlDashDot
     ElseIf attrValue = "xlDashDotDot" Then
       .LineStyle = xlDashDotDot
     ElseIf attrValue = "xlDot" Then
        .LineStyle = xlDot
     ElseIf attrValue = "xlDouble" Then
        .LineStyle = xlDouble
     ElseIf attrValue = "xlSlantDashDot" Then
        .LineStyle = xlSlantDashDot
     ElseIf attrValue = "xlLineStyleNone" Then
        .LineStyle = xlLineStyleNone
     End If
     
     attrValue = propElem.getAttribute(borderWeightAttr)
     If attrValue = "xlHairline" Then
        .Weight = xlHairline
     ElseIf attrValue = "xlThin" Then
        .Weight = xlThin
     ElseIf attrValue = "xlMedium" Then
        .Weight = xlMedium
     ElseIf attrValue = "xlThick" Then
        .Weight = xlThick
     End If
     
     attrValue = propElem.getAttribute(borderColorIndexAttr)
     If attrValue = "xlAutomatic" Then
        .ColorIndex = xlAutomatic
     ElseIf attrValue = "xlColorIndexNone" Then
        .ColorIndex = xlColorIndexNone
     ElseIf attrValue <> "" Then
        .Color = CLng(attrValue)
     End If
  End With
  On Error GoTo 0
End Sub

Private Sub AddChartProperties(Elem As MSXML2.IXMLDOMElement)
  Charts.Add GetAttributeSafe(Elem, CHART_NAME_ATTR), Elem.XML
End Sub

Private Sub ProcessPageBreak()
  curSheet.HPageBreaks.Add Before:=Cells(EndY + 1, 1)
End Sub

Private Sub ProcessHeader(align As String, value As String)
  If Len(value) > 200 Then
    value = Mid(value, 1, 200)
  End If
  
  If align = "L" Then
      curSheet.PageSetup.LeftHeader = value
  ElseIf align = "C" Then
      curSheet.PageSetup.CenterHeader = value
  Else
      curSheet.PageSetup.RightHeader = value
  End If
End Sub

Private Sub ProcessFooter(align As String, value As String)
  If Len(value) > 200 Then
    value = Mid(value, 1, 200)
  End If
  
  If align = "L" Then
      curSheet.PageSetup.LeftFooter = value
  ElseIf align = "C" Then
      curSheet.PageSetup.CenterFooter = value
  Else
      curSheet.PageSetup.RightFooter = value
  End If
End Sub

Private Sub ProcessPageMargin(Top As String, Left As String, Bottom As String, Right As String, header As String, footer As String)
    If Not curSheet Is Nothing Then
        If Top <> "" Then
            curSheet.PageSetup.TopMargin = Application.InchesToPoints(StrToDbl(Top) / 2.54)
        End If
        If Left <> "" Then
            curSheet.PageSetup.LeftMargin = Application.InchesToPoints(StrToDbl(Left) / 2.54)
        End If
        If Bottom <> "" Then
            curSheet.PageSetup.BottomMargin = Application.InchesToPoints(StrToDbl(Bottom) / 2.54)
        End If
        If Right <> "" Then
            curSheet.PageSetup.RightMargin = Application.InchesToPoints(StrToDbl(Right) / 2.54)
        End If
        If header <> "" Then
            curSheet.PageSetup.HeaderMargin = Application.InchesToPoints(StrToDbl(header) / 2.54)
        End If
        If footer <> "" Then
            curSheet.PageSetup.FooterMargin = Application.InchesToPoints(StrToDbl(footer) / 2.54)
        End If
    End If
End Sub

Private Sub ProcessRange(arect As Rect, dir As String, _
autoFit As Boolean, RowHeight As Double, _
Optional rangeelem As MSXML2.IXMLDOMElement, Optional isNamed As Boolean)
  
  Dim x As Long, y As Long, i As Long, curColY As Long, tmpColY As Long, OffsetY As Long, OffsetX As Long
  Dim r As range
  Dim KeepTmpHeights As Boolean '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd| false -- |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
      
  If Not rangeelem Is Nothing Then _
    ProcessUpperCaseRange rangeelem, arect.Top, arect.Left, isNamed
    
    If dir = "D" Then
       x = EndY + 1
       y = 1
       EndY = EndY + arect.Bottom - arect.Top + 1
       StartY = EndY - (arect.Bottom - arect.Top)
       EndX = arect.Right - arect.Left + 1
     
    ElseIf dir = "R" Then
       x = StartY
       y = EndX + 1
       EndY = StartY + arect.Bottom - arect.Top
       EndX = EndX + arect.Right - arect.Left + 1
    
       For i = 0 To arect.Right - arect.Left
         curColY = y + i
         tmpColY = arect.Left + i
         If curSheet.Columns(curColY).ColumnWidth <> TmpSheet.Columns(tmpColY).ColumnWidth Then
           curSheet.Columns(curColY).ColumnWidth = TmpSheet.Columns(tmpColY).ColumnWidth
         End If
       Next i
    End If
    
    If (MaxX < EndX) Then MaxX = EndX
    
    LastRangeTop = x
    LastRangeLeft = y
    LastRangeBottom = x + arect.Bottom - arect.Top
    LastRangeRight = y + arect.Right - arect.Left
    
    OffsetY = x - arect.Top
    OffsetX = y - arect.Left
    
    KeepTmpHeights = CInt(GetAttributeSafe(rangeelem, KEEP_TMP_HEIGHTS, 1))
    On Error Resume Next
    For i = 0 To arect.Bottom - arect.Top
        If RowHeight < 0 Then
          If KeepTmpHeights Then
          curSheet.Rows(x + i).RowHeight = TmpSheet.Rows(arect.Top + i).RowHeight
          End If
        Else
          curSheet.Rows(x + i).RowHeight = RowHeight
        End If
    Next i
    On Error GoTo 0
  
    With TmpSheet
         .range(.Cells(arect.Top, arect.Left), .Cells(arect.Bottom, arect.Right)).Copy
'         Destination:=curSheet.Cells(x, y)
         curSheet.Cells(x, y).PasteSpecial Paste:=xlAll
    End With
    
    If Not rangeelem Is Nothing Then
      ProcessItem rangeelem, isNamed, arect, OffsetX, OffsetY
    End If
    
If ProcAutoFitSht Then
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If NeedPrintTitles And (arect.Top <= RowBeginPrintTitles) And _
       (arect.Bottom >= RowEndPrintTitles) Then
      StoredRowBeginPrintTitles = x + RowBeginPrintTitles - arect.Top
      StoredRowEndPrintTitles = x + RowEndPrintTitles - arect.Top
      SetStoredPrintTitles = True
      NeedPrintTitles = False
    ElseIf (Not SetStoredPrintTitles) Then
      ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
      Dim ptElNList As MSXML2.IXMLDOMNodeList
      Dim ptEl As MSXML2.IXMLDOMElement
      
      If Not rangeelem Is Nothing Then
        Set ptElNList = rangeelem.getElementsByTagName(printTitleRowsTag)
      End If
      If Not ptElNList Is Nothing Then
        Set ptEl = ptElNList.Item(0)
      End If
      If Not ptEl Is Nothing Then
        If GetAttributeSafe(ptEl, printTitleRowBeginAttr, "0") <> "0" Then
            StoredRowBeginPrintTitles = x + CInt(GetAttributeSafe(ptEl, printTitleRowBeginAttr, CStr(arect.Top))) - arect.Top
        End If
        If GetAttributeSafe(ptEl, printTitleRowEndAttr, "0") <> "0" Then
            StoredRowEndPrintTitles = x + CInt(GetAttributeSafe(ptEl, printTitleRowEndAttr, CStr(arect.Bottom))) - arect.Top
        End If
        If (StoredRowBeginPrintTitles > 0 And StoredRowEndPrintTitles > 0) Then
            SetStoredPrintTitles = True
        End If
      End If
    End If

    If (Not SetStoredFreezePane) Then
      ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Dim ftElNList As MSXML2.IXMLDOMNodeList
      Dim ftEl As MSXML2.IXMLDOMElement
      
      If Not rangeelem Is Nothing Then
        Set ftElNList = rangeelem.getElementsByTagName(freezePaneRowsTag)
      End If
      If Not ftElNList Is Nothing Then
        Set ftEl = ftElNList.Item(0)
      End If
      If Not ftEl Is Nothing Then
        If GetAttributeSafe(ftEl, freezePaneRowAttr, "0") <> "0" Then
            StoredRowFreezePane = x + CInt(GetAttributeSafe(ftEl, freezePaneRowAttr, CStr(arect.Top))) - arect.Top
        End If
        If GetAttributeSafe(ftEl, freezePaneColAttr, "0") <> "0" Then
            StoredColFreezePane = y + CInt(GetAttributeSafe(ftEl, freezePaneColAttr, CStr(arect.Left))) - arect.Left
        End If
        If (StoredRowFreezePane > 0 And StoredColFreezePane > 0) Then
            SetStoredFreezePane = True
        End If
      End If
    End If
    
    If (autoFit And RowHeight < 0) Then
      With curSheet
        Set r = .range( _
          .Cells(LastRangeTop, LastRangeLeft), _
          .Cells(LastRangeBottom, LastRangeRight))
      End With
      AutoFitRanges.Add r
    End If
End If
End Sub

Private Sub range(rangeelem As MSXML2.IXMLDOMElement, isNamed As Boolean)

  Dim dir As String
  'Dim Top As Long, Left As Long, Right As Long, Bottom As Long
  Dim v As Variant, refArr() As String, _
  RowHeight As Variant, autoFit As Boolean, Height As Double
  
  Dim Coords(3) As Long
  Dim arect As Rect
  showProgress
  If isNamed Then
    v = rangeelem.getAttribute(nameAttr)
    If IsNull(v) Then Exit Sub
      
    If GetCoordsByName(CStr(v), Coords) Then
      arect.Top = Coords(0)
      arect.Left = Coords(1)
      arect.Bottom = Coords(2)
      arect.Right = Coords(3)
    Else
      Exit Sub
    End If
      
  Else
    v = rangeelem.getAttribute(refAtr)
    If IsNull(v) Then Exit Sub
  
    MySplit CStr(v), ",", refArr
    arect.Top = refArr(0)
    arect.Left = refArr(1)
    arect.Bottom = refArr(2)
    arect.Right = refArr(3)
  End If
   
  v = rangeelem.getAttribute(dirAtr)
  If IsNull(v) Or (v = "D") Then dir = "D" Else If v = "R" Then dir = "R"
    
  RowHeight = rangeelem.getAttribute(rowHeightAtr)
  If IsNull(RowHeight) Then RowHeight = ""
  If Len(RowHeight) <= 0 Then
    Height = -1
  Else
    Height = StrToDbl(RowHeight)
  End If
    
  autoFit = StrToBool(GetAttributeSafe(rangeelem, autoFitAtr, autoFitDefault))
    
  ProcessFormatRange rangeelem, arect
  ProcessRange arect, dir, autoFit, Height, rangeelem, isNamed
  ProcessCellNameItem rangeelem, arect.Top, arect.Left
  ProcessCellFormatItem rangeelem, arect.Top, arect.Left, isNamed
  ProcessCellAlignItem rangeelem, arect.Top, arect.Left, isNamed
  ProcessCellTextFormatItem rangeelem, arect.Top, arect.Left, isNamed
  ProcessMerges rangeelem
  ProcessMergesCells rangeelem
  ProcessGroupItem rangeelem, arect.Top, arect.Bottom
  ProcessRangeRowHeight rangeelem
  passedRanges = passedRanges + 1
End Sub

Private Sub ProcessUpperCaseRange(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeLeft As Long, Optional isNamed As Boolean)
    Dim UpperElem As MSXML2.IXMLDOMElement, ItemElem As MSXML2.IXMLDOMElement
    Dim Upperlist As MSXML2.IXMLDOMNodeList, ItemList As MSXML2.IXMLDOMNodeList
    Dim i As Long, k As Long, Row As Long, Col As Long
    Dim Width As Long, Height As Long, OffsetX As Long, OffsetY As Long
    Dim Ref As String, value As String, refArr() As String
    Dim Coords(3) As Long
    
    Set Upperlist = rangeelem.getElementsByTagName(upperCaseRangeTag)
    If (Upperlist Is Nothing) Then
        Exit Sub
    End If
    
    For i = 0 To Upperlist.length - 1
        Set UpperElem = Upperlist.Item(i)
        Width = CLng(UpperElem.getAttribute(widthAtr))
        Height = CLng(UpperElem.getAttribute(heightAtr))
        OffsetX = CLng(UpperElem.getAttribute(offsetXatr))
        OffsetY = CLng(UpperElem.getAttribute(offsetYatr))
        
        If (Width > 0) And (Height > 0) And (OffsetX >= 0) And (OffsetY >= 0) Then
                
            Set ItemList = rangeelem.getElementsByTagName(itemTag)
            For k = 0 To ItemList.length - 1
                Set ItemElem = ItemList.Item(k)
            
                If isNamed Then
                    Ref = ItemElem.getAttribute(nameAttr)
                    If GetCoordsByName(Ref, Coords) Then
                        Row = Coords(0)
                        Col = Coords(1)
                    Else
                        Exit Sub
                    End If
                Else
                    Ref = ItemElem.getAttribute(refAtr)
                    MySplit Ref, ",", refArr
                    Row = refArr(0)
                    Col = refArr(1)
                End If
                 
                If (Col >= (OffsetX + TmpRangeLeft) And Col <= (TmpRangeLeft + Width) And _
                    Row >= (OffsetY + TmpRangeTop) And Row <= (TmpRangeTop + Height)) Then
                    value = ItemElem.getAttribute(valueAtr)
                    ItemElem.setAttribute valueAtr, UCase(value)
                End If
            Next k
        End If
    Next i
    
End Sub

Private Sub ProcessRangeRowHeight(rangeelem As MSXML2.IXMLDOMElement)
  Dim Nodelist As MSXML2.IXMLDOMNodeList
  Dim ItemElem As MSXML2.IXMLDOMElement
  Dim offset As Long
  Dim i As Long
    
  Set Nodelist = rangeelem.getElementsByTagName(setHeightTag)
  For i = 0 To Nodelist.length - 1
    Set ItemElem = Nodelist.Item(i)
    offset = CLng(ItemElem.getAttribute(offsetXatr))
    ItemElem.setAttribute refAtr, CStr(offset + LastRangeTop)
    AddElem ItemElem, RowsHeights
    Next i
End Sub

Private Sub ProcessCellTextFormatItem(rangeelem As MSXML2.IXMLDOMElement, TmpRangeTop As Long, TmpRangeLeft As Long, isNamed As Boolean)
  Dim ItemElem As MSXML2.IXMLDOMElement, i As Long, Ref As String, value As String, Row As Long, _
    refArr() As String, Col As Long, name As String
  Dim Nodelist As MSXML2.IXMLDOMNodeList
  Dim ChrStart As Long, ChrLength As Long
  Dim obj As Object
  
    Set Nodelist = rangeelem.getElementsByTagName(CELLTEXTFORMAT_TAG)
    For i = 0 To Nodelist.length - 1
      Set ItemElem = Nodelist.Item(i)
        ChrStart = StrToDbl(GetAttributeSafe(ItemElem, chrStartAttr, "0"))
        ChrLength = StrToDbl(GetAttributeSafe(ItemElem, chrLengthAttr, "0"))
        
        If (isNamed) Then
          name = ItemElem.getAttribute(nameAttr)
          Row = NamesCoords.Item(name)(0)
          Col = NamesCoords.Item(name)(1)
        Else
          Ref = ItemElem.getAttribute(refAtr)
          MySplit Ref, ",", refArr
          Row = LastRangeTop + (refArr(0) - TmpRangeTop)
          Col = LastRangeLeft + (refArr(1) - TmpRangeLeft)
        End If
        
        If (Row >= LastRangeTop And Row <= LastRangeBottom) And _
           (Col >= LastRangeLeft And Col <= LastRangeRight) _
        Then
          Set obj = curSheet.Cells(Row, Col).Characters(ChrStart, ChrLength)
          FormatText ItemElem, obj
        End If
    Next i
End Sub


Private Sub RangeOffset(rangeelem As MSXML2.IXMLDOMElement)
Dim i As Long
Dim OffsetX As Long, OffsetY As Long, v As Variant, refArr() As String, autoFit As Boolean
', Top As Long, Left As Long, Right As Long, Bottom As Long
Dim arect As Rect
    
    v = rangeelem.getAttribute(refAtr)
    If IsNull(v) Then Exit Sub
  
    MySplit CStr(v), ",", refArr
    arect.Top = refArr(0)
    arect.Left = refArr(1)
    arect.Bottom = refArr(2)
    arect.Right = refArr(3)
  
    v = rangeelem.getAttribute(offsetXatr)
    OffsetX = CLng(v)
    
    v = rangeelem.getAttribute(offsetYatr)
    OffsetY = CLng(v)
    
    autoFit = StrToBool(GetAttributeSafe(rangeelem, autoFitAtr, autoFitDefault))
    
    If OffsetX <> 0 Then
      For i = 0 To arect.Bottom - arect.Top
        curSheet.Rows(arect.Top + OffsetX + i).RowHeight = TmpSheet.Rows(arect.Top + i).RowHeight
      Next i
    End If
    
    If OffsetY <> 0 Then
       For i = 0 To arect.Right - arect.Left
         curSheet.Columns(arect.Left + OffsetY + i).ColumnWidth = _
           TmpSheet.Columns(arect.Left + i).ColumnWidth
       Next i
    End If
    
    With TmpSheet
         .range(.Cells(arect.Top, arect.Left), .Cells(arect.Bottom, arect.Right)).Copy
'         Destination:=curSheet.Cells(x, y)
         curSheet.Cells(arect.Top + OffsetX, arect.Left + OffsetY).PasteSpecial Paste:=xlAll
    End With
    
    ProcessItem rangeelem, False, arect, OffsetX, OffsetY
    
    If autoFit Then
        curSheet.Cells(arect.Top + OffsetX, arect.Left + OffsetY).Rows.autoFit
    End If
End Sub

Private Function PixelsToPoints(Pixels As Double) As Double
   Dim TextSize As POINTAPI
   GetTextExtentPoint32 GetWindowDC(Application.hwnd), "0000000000", 10, TextSize
   If Pixels > 7 Then
     PixelsToPoints = 10 * (Pixels - 7) / TextSize.x
   Else
     PixelsToPoints = 10 * Pixels / TextSize.x
   End If
End Function

Private Sub SetWidths()
    Dim Col As String, Width As Double, i As Long
    Dim Elem As MSXML2.IXMLDOMElement
    Dim colMap As Map
    Dim mapSet As Sett
    Set colMap = New Map
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
      
    For i = 1 To ColumnsWidths.Count
      Set Elem = ColumnsWidths.Item(i)
      Col = CStr(Elem.getAttribute(refAtr))
      If Not IsNull(Elem.getAttribute(widthAtr)) Then
      Width = StrToDbl(CStr(Elem.getAttribute(widthAtr)))
      ElseIf Not IsNull(Elem.getAttribute(pixelWidthAtr)) Then
        Width = PixelsToPoints(StrToDbl(CStr(Elem.getAttribute(pixelWidthAtr))))
      End If
      colMap.Add Col, Width
    Next i
    
    Set mapSet = colMap.KeySet
    For i = 1 To mapSet.Count
      Col = mapSet.Item(CInt(i))
      Width = CDbl(colMap.GetValue(Col))
      curSheet.Columns(CLng(Col)).ColumnWidth = Width
    Next i
        
    Set mapSet = Nothing
    Set colMap = Nothing
End Sub

Private Sub SetTextBoxes()
    Dim i As Long
    Dim Elem As MSXML2.IXMLDOMElement
    
    For i = 1 To TextBoxes.Count
      Set Elem = TextBoxes.Item(i)
      ProcessTextBox Elem
    Next i
End Sub

Private Sub SetHeights()
    Dim Row As Long, Height As Double, i As Long
    Dim Elem As MSXML2.IXMLDOMElement
    
    For i = 1 To RowsHeights.Count
      Set Elem = RowsHeights.Item(i)
      Row = CLng(Elem.getAttribute(refAtr))
      Height = StrToDbl(CStr(Elem.getAttribute(heightAtr)))
      curSheet.Rows(Row).RowHeight = Height
    Next i
    
End Sub

Private Sub Format(formatElem As MSXML2.IXMLDOMElement)
'Sub Format(Row As Long, Col As Long, Kind As Long, W As Double, Align As String, Value As Variant)
Dim Ref As String, sFormat As String, w As Double, _
value As String, Row As Long, refArr() As String, Col As Long, v As Variant

    Dim sW As String
    Ref = formatElem.getAttribute(refAtr)
    value = formatElem.getAttribute(valueAtr)
        
    MySplit Ref, ",", refArr
    Row = refArr(0)
    Col = refArr(1)

    sFormat = formatElem.getAttribute(formatAtr)
    sW = CStr(formatElem.getAttribute(widthAtr))
    If sW <> "" Then
      w = StrToDbl(sW)
      If w >= 0 Then curSheet.Columns(Col).ColumnWidth = w
    End If
    
    
    With TmpSheet.Cells(Row, Col)
      .value = value
      .NumberFormat = sFormat

      SetRangeAligment TmpSheet.Cells(Row, Col), formatElem
    End With
    
    
End Sub

Private Sub DeleteTmpSheets()
  Dim i As Long

  If Not repBook Is Nothing Then
    Set TmpSheet = Nothing
    Set curSheet = Nothing
    Set AutoFitTmpSheet = Nothing
    
    For i = 1 To tmpSheetsCount
      If repBook.Worksheets.Count > 1 Then
        repBook.Worksheets(1).Delete
      End If
    Next i
    
    SetCharDataSource ChartValues, CHART_VALUE
    SetCharDataSource ChartXValues, CHART_XVALUE
    SetChartProperties
    
  End If
End Sub

Private Sub SetCharDataSource(aChartValues As ChartValuesMap, chartField As Long)
  Dim i As Long
  Dim sh As Worksheet
  Dim ch As Chart
  Dim ser As Series
  Dim Key As String
  Dim NamesArr() As String
  Dim value As String

  If Not repBook Is Nothing Then
    On Error Resume Next
    For i = 1 To aChartValues.Count
      Key = aChartValues.GetKey(i)
      value = aChartValues.GetValue(Key)
      If Len(value) > 0 Then
        MySplit Key, "/", NamesArr
      
        Set sh = repBook.Worksheets(RealSheetNames.GetValue(NamesArr(0)))
        Set ch = sh.ChartObjects(NamesArr(1)).Chart

        If chartField = CHART_VALUE Then
          Set ser = ch.SeriesCollection(GetChartDataSeriesIndex(ch, NamesArr(2)))
          ser.Values = value
        ElseIf chartField = CHART_XVALUE Then
          If ch.SeriesCollection.Count > 0 Then
            Set ser = ch.SeriesCollection(1)
            ser.XValues = value
          End If
        End If
ErrH:
      End If
    Next
'    On Error GoTo 0
  
  End If
End Sub


Private Function GetChartDataSeriesIndex(ch As Chart, seriesName As String) As Long
  Dim ser As Series
  Dim i, k As Long
    
  k = 0
  For i = 1 To ch.SeriesCollection.Count
    k = k + 1
    If ch.SeriesCollection(i).name = seriesName Then
      Set ser = ch.SeriesCollection(i)
      Exit For
    End If
  Next i

  If ser Is Nothing Then
    Set ser = ch.SeriesCollection.NewSeries
    ser.name = seriesName
    k = k + 1
  End If
  
  GetChartDataSeriesIndex = k
End Function


'Private Static Function repBook(Optional rb As Workbook) As Workbook
'Dim wb As Workbook
'    If Not rb Is Nothing Then
'       Set wb = rb
'    End If
'    Set repBook = wb
'End Function

Private Function GetRangeByName(ByRef sh As Worksheet, ByVal name As String, _
  Optional ByRef Top As Long, Optional ByRef Left As Long, _
  Optional ByRef Bottom As Long, Optional ByRef Right As Long) As Boolean
  
  Dim arect As Rect
  
  GetRangeByName = GetRectByName(sh, name, arect)
  Top = arect.Top
  Bottom = arect.Bottom
  Left = arect.Left
  Right = arect.Right
  
End Function


Private Function GetRectByName(ByRef sh As Worksheet, ByVal name As String, _
ByRef arect As Rect) As Boolean
    
  Dim i As Long
  
  GetRectByName = False
    
  arect.Top = 0
  arect.Bottom = 0
  arect.Left = 0
  arect.Right = 0
    
    With sh.Names
      For i = 1 To .Count
        If (.Item(i).name = "'" + sh.name + "'!" + name) Or (.Item(i).name = sh.name + "!" + name) Then
          With sh.range(name)
            arect.Left = .Columns(1).Column
            arect.Right = .Columns(.Columns.Count).Column
            arect.Top = .Rows(1).Row
            arect.Bottom = .Rows(.Rows.Count).Row
          End With
          GetRectByName = True
          Exit For
        End If
      Next i
    End With
End Function


Private Sub ProcessSigns(Elem As MSXML2.IXMLDOMElement)
  Dim SignRangeName As String, ApptValue As String, FIOValue As String, PhoneValue As String, _
      sheetName As String

  'Dim Top As Long, Bottom  As Long, Left  As Long, Right  As Long
  Dim x As Long, y As Long, X_FIO As Long, Y_FIO As Long
  Dim viewFio As Boolean
  Dim arect As Rect

    sheetName = Elem.getAttribute("SHEET")
    If sheetName = "" Or UCase(sheetName) = UCase(TmpSheet.name) Then
      SignRangeName = Elem.getAttribute("RANGE_NAME")
      ApptValue = Elem.getAttribute("APPT")
      FIOValue = Elem.getAttribute("FIO")
      PhoneValue = Elem.getAttribute("PHONE")
      If Not IsNull(PhoneValue) Then
        If PhoneValue <> "" Then ApptValue = ApptValue + Chr(10) + "|fffd||fffd||fffd|. " + PhoneValue
      End If
      viewFio = StrToBool(GetAttributeSafe(Elem, "VIEW_FIO", "1"))
      
      If viewFio Then
        If GetRectByName(TmpSheet, SignRangeName, arect) Then
          ProcessRange arect, "D", False, -1
          If GetRangeByName(TmpSheet, "APPT", x, y) Then
            curSheet.Cells(EndY - arect.Bottom + x, y).value = ApptValue
          End If
          If GetRangeByName(TmpSheet, "FIO", x, y) Then
            curSheet.Cells(EndY - arect.Bottom + x, y).value = FIOValue
          End If
        End If
      Else
        If GetRectByName(TmpSheet, "APPT", arect) Then
          ProcessRange arect, "D", False, -1
            curSheet.Cells(EndY - arect.Bottom + arect.Top, arect.Left).value = ApptValue
        End If
      End If
    End If
End Sub

Private Sub RedimArray(Arr() As Variant)
  On Error GoTo Err
  ReDim Preserve Arr(UBound(Arr) + 1)
  Exit Sub
Err:
  ReDim Arr(0)
End Sub

Private Sub AddExtSignShape(InitPos As Long, Left As Single, Top As Single, Width As Single, _
  Height As Single, IsRect As Boolean, IsVisibleLine As MsoTriState, _
  Text As String, HorAl As XlHAlign, VertAl As XlHAlign, ByRef ShapesList() As Variant, _
  Optional fontBold As Boolean, Optional fontItalic As Boolean, Optional fontUnderline As Boolean, _
  Optional fontName As String, Optional fontSize As Variant)
  
  Dim ShapeNumber As Long
    RedimArray ShapesList
    ShapeNumber = UBound(ShapesList)
    
    If IsRect Then
      curSheet.Shapes.AddShape(msoShapeRectangle, Left, Top + InitPos, Width, Height).Select
      With Selection
        .name = CStr(ShapeNumber + InitPos)
        .Characters.Text = Text
        If Not IsMissing(fontSize) Then
          .Characters.Font.Size = fontSize
        End If
        If fontName <> "" Then
          .Characters.Font.name = fontName
        End If
        .Characters.Font.Color = RGB(0, 0, 0)
        .Characters.Font.Bold = fontBold
        .Characters.Font.Italic = fontItalic
        .Characters.Font.Underline = IIf(fontUnderline, xlUnderlineStyleSingle, xlUnderlineStyleNone)
        .HorizontalAlignment = HorAl
        .VerticalAlignment = VertAl
      End With
      Selection.ShapeRange.TextFrame.MarginBottom = 0
      Selection.ShapeRange.TextFrame.MarginTop = 0
      Selection.ShapeRange.TextFrame.MarginLeft = 0
      Selection.ShapeRange.TextFrame.MarginRight = 0
    Else
      curSheet.Shapes.AddLine(Left, Top + InitPos, Left + Width, Top + InitPos).Select
      Selection.border.Color = RGB(0, 0, 0)
      Selection.name = CStr(ShapeNumber + InitPos)
    End If
    
    ShapesList(UBound(ShapesList)) = Selection.name
    Selection.ShapeRange.Line.Visible = IsVisibleLine
    Selection.ShapeRange.Fill.Visible = msoFalse
End Sub

Private Sub ProcessExtSigns(Elem As MSXML2.IXMLDOMElement)
    Dim InitPos As Long
    Dim seqOrder As Long
    Dim apptFIOCount As Long
    Dim signPhoneCount As Long
    Dim spaceCount As Long
    Dim shapesHeight As Single
    Dim tmpShapesHeight As Single
    Dim Left As Single
    Dim dPageWidth As Double
    Dim k As Double
    Dim sheetName As String
    Dim PhoneValue As String
    Dim ApptValue As String
    Dim TitleValue As String
    Dim FIOValue As String
'    Dim tempWidth As Double
    Dim viewFio As Boolean
    Dim ShapesList() As Variant
    Dim viewApptTitle As Boolean
    Dim viewApptData As Boolean
    Dim viewFioTitle As Boolean
    Dim viewFioData As Boolean
    Dim viewSignatureTitle As Boolean
    Dim arect As Rect
    Dim ApptFIOPartWidth As Single
    Dim SignPhonePartWidth As Single
    Dim SpacePartWidth As Single
    Dim outPhone As Boolean
    Dim outTitle As Boolean
    Dim fontBold As Boolean
    Dim fontBoldTitle As Boolean
    Dim fontItalic As Boolean
    Dim fontItalicTitle As Boolean
    Dim fontUnderline As Boolean
    Dim fontUnderlineTitle As Boolean
    Dim fontName As String
    Dim fontNameTitle As String
    Dim fontSize As Variant
    Dim fontSizeTitle As Variant
    Dim defFontBold As Boolean
    Dim defFontItalic As Boolean
    Dim defFontUnderline As Boolean
    Dim defFontName As String
    Dim defFontSize As String
    
    sheetName = Elem.getAttribute("SHEET")
    If sheetName = "" Or UCase(sheetName) = UCase(TmpSheet.name) Then
      
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|4 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (21 |fffd||fffd|)
      dPageWidth = Application.CentimetersToPoints(21)

      ApptValue = Elem.getAttribute("APPT")
      TitleValue = GetAttributeSafe(Elem, "TITLE", "")
      PhoneValue = Elem.getAttribute("PHONE")
      FIOValue = Elem.getAttribute("FIO")
      viewApptTitle = StrToBool(GetAttributeSafe(Elem, "APPT_TITLE", "1"))
      viewApptData = StrToBool(GetAttributeSafe(Elem, "APPT_DATA", "1"))
      viewFioTitle = StrToBool(GetAttributeSafe(Elem, "FIO_TITLE", "1"))
      viewFioData = StrToBool(GetAttributeSafe(Elem, "FIO_DATA", "1"))
      viewSignatureTitle = StrToBool(GetAttributeSafe(Elem, "SIGNATURE_TITLE", "1"))
      
      
      defFontBold = False
      defFontItalic = False
      defFontUnderline = False
      defFontName = "MS Sans Serif"
      defFontSize = "8"
      
      fontBold = StrToBool(GetAttributeSafe(Elem, "FONT_BOLD", "0"))
      fontItalic = StrToBool(GetAttributeSafe(Elem, "FONT_ITALIC", "0"))
      fontUnderline = StrToBool(GetAttributeSafe(Elem, "FONT_UNDERLINE", "0"))
      fontName = GetAttributeSafe(Elem, "FONT_NAME", defFontName)
      fontSize = GetAttributeSafe(Elem, "FONT_SIZE", defFontSize)
      fontBoldTitle = StrToBool(GetAttributeSafe(Elem, "TITLE_FONT_BOLD", "0"))
      fontItalicTitle = StrToBool(GetAttributeSafe(Elem, "TITLE_FONT_ITALIC", "0"))
      fontUnderlineTitle = StrToBool(GetAttributeSafe(Elem, "TITLE_FONT_UNDERLINE", "0"))
      fontNameTitle = GetAttributeSafe(Elem, "TITLE_FONT_NAME", defFontName)
      fontSizeTitle = GetAttributeSafe(Elem, "TITLE_FONT_SIZE", defFontSize)
      seqOrder = StrToDbl(GetAttributeSafe(Elem, "SEQORDER", "0"))
      
      viewFio = StrToBool(GetAttributeSafe(Elem, "VIEW_FIO", "1"))
      outPhone = Not IsNull(PhoneValue) And PhoneValue <> ""
      outTitle = Not IsNull(TitleValue) And TitleValue <> ""
      
      If Not viewFio Then
        viewFio = viewFioTitle Or viewSignatureTitle Or viewFioData Or viewApptData
      ' Else
      '  viewFioTitle = True
      '  viewFioData = True
      '  viewSignatureTitle = True
      '  viewApptData = True
      End If

      dPageWidth = (dPageWidth - (curSheet.PageSetup.LeftMargin + curSheet.PageSetup.RightMargin)) * 0.85

      'sign + space + appt
      ApptFIOPartWidth = dPageWidth * 0.61
      SignPhonePartWidth = dPageWidth * 0.29
      SpacePartWidth = dPageWidth * 0.1
      
      apptFIOCount = 1
      signPhoneCount = 1
      spaceCount = 1
      If viewApptData Then
        apptFIOCount = apptFIOCount + 1
        spaceCount = spaceCount + 1
      End If
      If outPhone Then
        spaceCount = spaceCount + 1
        signPhoneCount = signPhoneCount + 1
      End If
      If outTitle Then
        apptFIOCount = apptFIOCount + 1
        spaceCount = spaceCount + 1
      End If

      If apptFIOCount > 1 Or signPhoneCount > 1 Or spaceCount > 1 Then
        k = (ApptFIOPartWidth * apptFIOCount + SpacePartWidth * spaceCount + SignPhonePartWidth * signPhoneCount) / dPageWidth
        ApptFIOPartWidth = ApptFIOPartWidth / k
        SignPhonePartWidth = SignPhonePartWidth / k
        SpacePartWidth = SpacePartWidth / k
      End If
      
      If OpenAutoFitTmpSheet() Then
        shapesHeight = Fiter.GetSignShapeHeight(Round(ApptFIOPartWidth), ApptValue, AutoFitTmpSheet, _
                              fontBold, fontName, fontSize)
        If viewFio Then
          tmpShapesHeight = Fiter.GetSignShapeHeight(Round(ApptFIOPartWidth), FIOValue, AutoFitTmpSheet, _
                                    fontBold, fontName, fontSize)
          If tmpShapesHeight > shapesHeight Then
            shapesHeight = tmpShapesHeight
          End If
        End If
        If outPhone Then
          tmpShapesHeight = Fiter.GetSignShapeHeight(Round(SignPhonePartWidth), PhoneValue, AutoFitTmpSheet, _
                                                       fontBold, fontName, fontSize)
          If tmpShapesHeight > shapesHeight Then
            shapesHeight = tmpShapesHeight
          End If
        End If
        If outTitle Then
          tmpShapesHeight = Fiter.GetSignShapeHeight(Round(ApptFIOPartWidth), TitleValue, AutoFitTmpSheet, _
                                                       fontBold, fontName, fontSize)
          If tmpShapesHeight > shapesHeight Then
            shapesHeight = tmpShapesHeight
          End If
        End If
      Else
        shapesHeight = 40
      End If
      
      arect.Top = 10000
      arect.Left = 1
      arect.Bottom = 10000
      arect.Right = 1
      
      If offsetValue > shapesHeight Then
        InitPos = curSheet.Cells(EndY, 1).Top + 18 - offsetValue
        offsetValue = offsetValue - (30 + shapesHeight)
      Else
        ProcessRange arect, "D", False, (30 + shapesHeight)
        InitPos = curSheet.Cells(EndY, 1).Top + 18
      End If
      
      Left = 1
      If outTitle Then
        AddExtSignShape InitPos, Round(Left), 1, Round(ApptFIOPartWidth), _
          shapesHeight, True, msoFalse, TitleValue, xlLeft, xlBottom, ShapesList, _
          fontBold, fontItalic, fontUnderline, fontName, fontSize
          Left = Left + ApptFIOPartWidth + SpacePartWidth
      End If
      
      If viewApptData Then
        AddExtSignShape InitPos, Round(Left), 1, Round(ApptFIOPartWidth), _
          shapesHeight, True, msoFalse, ApptValue, xlLeft, xlBottom, ShapesList, _
          fontBold, fontItalic, fontUnderline, fontName, fontSize
        If viewApptTitle Then
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(ApptFIOPartWidth), _
            12, True, msoFalse, "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", xlCenter, xlTop, ShapesList, _
            fontBoldTitle, fontItalicTitle, fontUnderlineTitle, fontNameTitle, fontSizeTitle
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), _
            Round(ApptFIOPartWidth), 0, False, msoTrue, "", 0, 0, ShapesList
        End If
        Left = Left + ApptFIOPartWidth + SpacePartWidth
      End If
      
      If viewFio Then
        If viewSignatureTitle Then
          AddExtSignShape InitPos, Round(Left), 1, Round(SignPhonePartWidth), _
            shapesHeight, True, msoFalse, "", xlLeft, xlBottom, ShapesList
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(SignPhonePartWidth), _
            12, True, msoFalse, "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", xlCenter, xlTop, ShapesList, _
            fontBoldTitle, fontItalicTitle, fontUnderlineTitle, fontNameTitle, fontSizeTitle
          AddExtSignShape InitPos, Left, _
            (shapesHeight + 1), Round(SignPhonePartWidth), 0, False, msoTrue, "", 0, 0, ShapesList
          Left = Left + SignPhonePartWidth + SpacePartWidth
        End If
        
        If viewFioData Then
          AddExtSignShape InitPos, Round(Left), 1, ApptFIOPartWidth, _
            shapesHeight, True, msoFalse, FIOValue, xlCenter, xlBottom, ShapesList, _
            fontBold, fontItalic, fontUnderline, fontName, fontSize
        End If
        If viewFioTitle Then
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(ApptFIOPartWidth), _
            12, True, msoFalse, "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", xlCenter, xlTop, ShapesList, _
            fontBoldTitle, fontItalicTitle, fontUnderlineTitle, fontNameTitle, fontSizeTitle
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(ApptFIOPartWidth), _
            0, False, msoTrue, "", 0, 0, ShapesList
        End If
        
        If viewFioData Or viewFioTitle Then
          Left = Left + ApptFIOPartWidth + SpacePartWidth
        End If
        
        If outPhone Then
          AddExtSignShape InitPos, Round(Left), 1, Round(SignPhonePartWidth), _
            shapesHeight, True, msoFalse, PhoneValue, xlCenter, xlBottom, ShapesList, _
            fontBold, fontItalic, fontUnderline, fontName, fontSize
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(SignPhonePartWidth), _
            12, True, msoFalse, "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", xlCenter, xlTop, ShapesList, _
            fontBoldTitle, fontItalicTitle, fontUnderlineTitle, fontNameTitle, fontSizeTitle
          AddExtSignShape InitPos, Round(Left), (shapesHeight + 1), Round(SignPhonePartWidth), _
            0, False, msoTrue, "", 0, 0, ShapesList
        End If
      End If

      If viewFio Or viewApptTitle Or viewApptData Or outTitle Then
        If UBound(ShapesList) > 0 Then
          curSheet.Shapes.range(ShapesList).Group.Placement = xlMove
        End If
      End If
    End If
End Sub

Private Sub ProcessTextBox(Elem As MSXML2.IXMLDOMElement)
  Dim Text As String
  Dim w As Single, h As Single
  Dim box As Shape
  Dim r As range
  Text = GetAttributeSafe(Elem, valueAtr, "")
  w = StrToDbl(GetAttributeSafe(Elem, widthAtr, "0")) / 1.275
  h = StrToDbl(GetAttributeSafe(Elem, heightAtr, "0")) / 1.355
  Set r = curSheet.Cells(EndY + 2, MaxX)
  Set box = curSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, r.Left - w, r.Top, w, h)
  box.Select
  With Selection
    .Characters.Text = Text
    .HorizontalAlignment = xlCenter
    .Characters.Font.Color = RGB(0, 0, 0)
    .Characters.Font.Bold = True
    .Characters.Font.Size = 9
    .border.Color = RGB(0, 0, 0)
    .border.Weight = xlThin
    .interior.Color = RGB(255, 255, 255)
    .ShapeRange.TextFrame.MarginBottom = 0
    .ShapeRange.TextFrame.MarginTop = 0
    .ShapeRange.TextFrame.MarginLeft = 0
    .ShapeRange.TextFrame.MarginRight = 0
  End With
End Sub

Sub RunMacro(Elem As MSXML2.IXMLDOMElement)
  Dim MacroName As String
  Dim ParentElem As MSXML2.IXMLDOMElement
  
  On Error GoTo Err
  MacroName = Elem.getAttribute(nameAttr)
  If MacroName <> "" Then
    Set ParentElem = Elem.parentNode
    If Elem.parentNode.nodeType = NODE_ELEMENT And Elem.parentNode.nodeName = sheetTag Then
      MacroName = curSheet.CodeName & "." & MacroName
    End If
    MacroName = repBook.name & "!" & MacroName
    Application.Run MacroName
  End If
  Exit Sub
Err:

End Sub

Private Function OpenAutoFitTmpSheet() As Boolean
  On Error GoTo ErrorHandler
  If AutoFitTmpSheet Is Nothing Then
    repBook.Sheets.Add after:=repBook.Worksheets(repBook.Worksheets.Count)
    Set AutoFitTmpSheet = repBook.ActiveSheet
  End If
  OpenAutoFitTmpSheet = True
  Exit Function
ErrorHandler:
  OpenAutoFitTmpSheet = False
End Function

Private Sub FillCustomValuesMap(Elem As MSXML2.IXMLDOMElement, MapObj As Map)
  Dim i As Long
  Dim ValuesElem As MSXML2.IXMLDOMElement
  Dim ItemElem As MSXML2.IXMLDOMElement
  Dim RealElem As MSXML2.IXMLDOMElement
  
  If (Elem.nodeName = "TASK") Then
    Set RealElem = Elem.FirstChild
  Else
    Set RealElem = Elem
  End If
  
  
  MapObj.ClearAll
  
  On Error GoTo Err
  
  Set ValuesElem = RealElem.selectSingleNode("./" & CUSTOM_VALUES_TAG)
  
  If Not ValuesElem Is Nothing Then
    For i = 0 To ValuesElem.childNodes.length - 1
      Set ItemElem = ValuesElem.childNodes.Item(i)
      If ItemElem.tagName = itemTag Then _
        MapObj.Add ItemElem.getAttribute(nameAttr), ItemElem.getAttribute(valueAtr)
    Next i
  End If
Err:
End Sub

Private Function ReplaceConst(value As String, StorageFirst As Map, StorageSecond As Map) As String
  Dim beginPos As Long
  Dim endPos As Long
  Dim length As Long
  Dim newValue As Variant
  Dim Key As String
  
  ReplaceConst = value
  
  On Error GoTo Err
  
  beginPos = 1
  Do
    length = Len(ReplaceConst)
    beginPos = InStr(beginPos, ReplaceConst, "%")
    If beginPos > 0 And length > beginPos Then
      endPos = InStr(beginPos + 1, ReplaceConst, "%")
      If endPos > 0 Then
        If endPos - beginPos > 1 Then
          Key = Mid(ReplaceConst, beginPos + 1, endPos - beginPos - 1)
          newValue = StorageFirst.GetValue(Key)
          If IsEmpty(newValue) Then _
            newValue = StorageSecond.GetValue(Key)
        End If
        ReplaceConst = _
          Left(ReplaceConst, beginPos - 1) & _
          newValue & _
          Mid(ReplaceConst, endPos + 1)
        beginPos = beginPos + Len(newValue)
      Else
        Exit Do
      End If
    Else
      Exit Do
    End If
  Loop Until False
  
Err:
End Function

Private Sub SetChartXValues(chartName As String, seriesName As String, aValue As String)
  Dim ch As Chart, s As Series
    
  If (Len(aValue) > 0) Then
    Set ch = curSheet.ChartObjects(chartName).Chart
    Set s = ch.SeriesCollection(seriesName)
    
    'ch.SeriesCollection.Add Source:=.Range(.Cells(top, left), .Cells(bottom, right))
    s.XValues = aValue
  End If
End Sub

Private Sub SetChartValues(chartName As String, seriesName As String, aValue As String)
  Dim ch As Chart, s As Series
    
  If (Len(aValue) > 0) Then
    Set ch = curSheet.ChartObjects(chartName).Chart
    Set s = ch.SeriesCollection(seriesName)
    
    'ch.SeriesCollection.Add Source:=.Range(.Cells(top, left), .Cells(bottom, right))
    s.Values = aValue
  End If
End Sub

Private Sub SetChartProperties()
  Dim sh As Worksheet
  Dim ch As Chart
  Dim i As Long
  Dim NamesArr() As String
  Dim Key As String
  Dim doc As DOMDocument

  For i = 1 To Charts.KeySet.Count
    Key = Charts.KeySet.Item(i)
    MySplit Key, "/", NamesArr
    Set sh = repBook.Worksheets(RealSheetNames.GetValue(NamesArr(0)))
    Set ch = sh.ChartObjects(NamesArr(1)).Chart
    If ch.SeriesCollection.Count > 0 Then
      Set doc = New DOMDocument
      doc.loadXML (Charts.GetValue(Key))
      SetSingleChartProperties ch, doc.documentElement
    End If
  Next i

End Sub

Private Sub SetChartParamFontSettings(fontSet As Font, Elem As IXMLDOMElement)
     Const fsBold = 1, fsItalic = 2, fsUnderline = 4, fsStrikeOut = 8
     
     Dim fontElem As IXMLDOMElement
     Dim fontStyle As Long
     
     If Not (Elem Is Nothing) Then
        Set fontElem = Elem.getElementsByTagName(FONT_TAG).Item(0)
        If Not (fontElem Is Nothing) Then
            fontSet.name = GetAttributeSafe(fontElem, fontNameAttr, fontSet.name)
            fontSet.Size = GetAttributeSafe(fontElem, fontSizeAttr, fontSet.Size)
            fontSet.Color = GetAttributeSafe(fontElem, fontColorAttr, fontSet.Color)
            fontStyle = GetAttributeSafe(fontElem, fontStyleAttr, "0")
            fontSet.Bold = fontStyle And fsBold
            fontSet.Italic = fontStyle And fsItalic
            If (fontStyle And fsUnderline) Then
                fontSet.Underline = xlUnderlineStyleSingle
            End If
            fontSet.Strikethrough = fontStyle And fsStrikeOut
        End If
     End If
End Sub

Private Sub SetSingleChartProperties(ch As Chart, Elem As IXMLDOMElement)
  Const attrValue = "VALUE"
  
  Dim chartName, chartType, chartCaption, chartXAsixCaption, chartYAsixCaption, chartLegendPlace, chartSeparator As String
  Dim showChartDataLabelsSeries, showChartDataLabelsValues As Boolean
  Dim isSeriesName, isCategoryName, isValue, isPercentAge, isLegendKey, isLeaderLines As Boolean
  Dim tempElem As IXMLDOMElement
  Dim tagName As String
  Dim i As Long

  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For i = 0 To (Elem.childNodes.length - 1) Step 1
    Set tempElem = Elem.childNodes.Item(i)
    If Not (tempElem Is Nothing) Then
        ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        tagName = tempElem.tagName
        If tagName = CHART_TYPE_TAG Then
            chartType = GetAttributeSafe(tempElem, attrValue)
            setChartType (chartType), ch
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf (tagName = CHART_LEGEND_PLACE_TAG) Then
            chartLegendPlace = GetAttributeSafe(tempElem, attrValue)
            setChartLegendPlace (chartLegendPlace), ch
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf (tagName = CHART_CAPTION_TAG) Then
            chartCaption = GetAttributeSafe(tempElem, attrValue, "")
            If chartCaption <> "" Then
                ch.HasTitle = True
                ch.ChartTitle.Characters.Text = chartCaption
                SetChartParamFontSettings ch.ChartTitle.Font, tempElem
            End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|
        ElseIf (tagName = CHART_X_ASIX_CAPTION_TAG) Then
            chartXAsixCaption = GetAttributeSafe(tempElem, attrValue, "")
            If chartXAsixCaption <> "" Then
                ch.Axes(xlCategory, xlPrimary).HasTitle = True
                ch.Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = chartXAsixCaption
                SetChartParamFontSettings ch.Axes(xlCategory, xlPrimary).AxisTitle.Font, tempElem
            End If
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Y
        ElseIf (tagName = CHART_Y_ASIX_CAPTION_TAG) Then
            chartYAsixCaption = GetAttributeSafe(tempElem, attrValue, "")
            If chartYAsixCaption <> "" Then
                ch.Axes(xlValue, xlPrimary).HasTitle = True
                ch.Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = chartYAsixCaption
                SetChartParamFontSettings ch.Axes(xlValue, xlPrimary).AxisTitle.Font, tempElem
            End If
        ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ElseIf (tagName = CHART_DATA_LABELS_TAG) Then
            isSeriesName = GetAttributeSafe(tempElem, CHART_SHOW_SERIES_NAME_ATTR, "0") = "1"
            isCategoryName = GetAttributeSafe(tempElem, CHART_SHOW_CATEGORY_NAME_ATTR, "0") = "1"
            isValue = GetAttributeSafe(tempElem, CHART_SHOW_VALUE_ATTR, "0") = "1"
            isPercentAge = GetAttributeSafe(tempElem, CHART_SHOW_PERCENTAGE_ATTR, "0") = "1"
            isLegendKey = GetAttributeSafe(tempElem, CHART_LEGEND_KEY_ATTR, "0") = "1"
            isLeaderLines = GetAttributeSafe(tempElem, CHART_HAS_LEADER_LINES_ATTR, "0") = "1"
            chartSeparator = GetAttributeSafe(tempElem, CHART_SEPARATOR_ATTR, "")
            ch.ApplyDataLabels AutoText:=True, showSeriesName:=isSeriesName, showCategoryName:=isCategoryName, _
                               showValue:=isValue, showPercentAge:=isPercentAge, HasLeaderLines:=isLeaderLines, _
                               legendKey:=isLegendKey, Separator:=chartSeparator
            ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Dim SerX As Series
            For Each SerX In ch.SeriesCollection
                On Error Resume Next
                If (SerX.HasDataLabels) Then
                    SetChartParamFontSettings SerX.DataLabels.Font, tempElem
                End If
                On Error GoTo 0
            Next
        End If
    End If
  Next i
End Sub

Private Sub setChartLegendPlace(chartLegendPlace As String, ch_ As Chart)
    If (Not ch_.HasLegend) Then
        Exit Sub
    End If
    
    If chartLegendPlace = "xlTop" Then
        ch_.Legend.Position = xlTop
    ElseIf chartLegendPlace = "xlBottom" Then
        ch_.Legend.Position = xlBottom
    ElseIf chartLegendPlace = "xlRight" Then
        ch_.Legend.Position = xlRight
    ElseIf chartLegendPlace = "xlLeft" Then
        ch_.Legend.Position = xlLeft
    ElseIf chartLegendPlace = "xlCorner" Then
        ch_.Legend.Position = xlCorner
    End If
End Sub

Private Sub setChartType(chartType As String, ch_ As Chart)
 If (InStr(chartType, "xlBuiltIn") = 0) Then
  If chartType = "xlColumnClustered" Then
       ch_.chartType = xlColumnClustered
    ElseIf chartType = "xlColumnStacked" Then
       ch_.chartType = xlColumnStacked
    ElseIf chartType = "xlColumnStacked100" Then
       ch_.chartType = xlColumnStacked100
    ElseIf chartType = "xl3DColumnClustered" Then
       ch_.chartType = xl3DColumnClustered
    ElseIf chartType = "xl3DColumnStacked" Then
       ch_.chartType = xl3DColumnStacked
    ElseIf chartType = "xl3DColumnStacked100" Then
       ch_.chartType = xl3DColumnStacked100
    ElseIf chartType = "xl3DColumn" Then
       ch_.chartType = xl3DColumn
    ElseIf chartType = "xlBarClustered" Then
       ch_.chartType = xlBarClustered
    ElseIf chartType = "xlBarStacked" Then
       ch_.chartType = xlBarStacked
    ElseIf chartType = "xlBarStacked100" Then
       ch_.chartType = xlBarStacked100
    ElseIf chartType = "xl3DBarClustered" Then
       ch_.chartType = xl3DBarClustered
    ElseIf chartType = "xl3DBarStacked" Then
       ch_.chartType = xl3DBarStacked
    ElseIf chartType = "xl3DBarStacked100" Then
       ch_.chartType = xl3DBarStacked100
    ElseIf chartType = "xl3DBarStacked100" Then
       ch_.chartType = xl3DBarStacked100
    ElseIf chartType = "xlPie" Then
       ch_.chartType = xlPie
    ElseIf chartType = "xl3DPie" Then
       ch_.chartType = xl3DPie
    ElseIf chartType = "xlPieOfPie" Then
       ch_.chartType = xlPieOfPie
    ElseIf chartType = "xlPieExploded" Then
       ch_.chartType = xlPieExploded
    ElseIf chartType = "xl3DPieExploded" Then
       ch_.chartType = xl3DPieExploded
    ElseIf chartType = "xlBarOfPie" Then
       ch_.chartType = xlBarOfPie
    ElseIf chartType = "xlLine" Then
       ch_.chartType = xlLine
    ElseIf chartType = "xlLineStacked" Then
       ch_.chartType = xlLineStacked
    ElseIf chartType = "xlLineStacked100" Then
       ch_.chartType = xlLineStacked100
    ElseIf chartType = "xlLineMarkers" Then
       ch_.chartType = xlLineMarkers
    ElseIf chartType = "xlLineMarkersStacked" Then
       ch_.chartType = xlLineMarkersStacked
    ElseIf chartType = "xlLineMarkersStacked100" Then
       ch_.chartType = xlLineMarkersStacked100
    ElseIf chartType = "xl3DLine" Then
       ch_.chartType = xl3DLine
    ElseIf chartType = "xlArea" Then
       ch_.chartType = xlArea
    ElseIf chartType = "xlAreaStacked" Then
       ch_.chartType = xlAreaStacked
    ElseIf chartType = "xlAreaStacked100" Then
       ch_.chartType = xlAreaStacked100
    ElseIf chartType = "xl3DArea" Then
       ch_.chartType = xl3DArea
    ElseIf chartType = "xl3DAreaStacked" Then
       ch_.chartType = xl3DAreaStacked
    ElseIf chartType = "xl3DAreaStacked100" Then
       ch_.chartType = xl3DAreaStacked100
    ElseIf chartType = "xlPyramidColClustered" Then
       ch_.chartType = xlPyramidColClustered
    ElseIf chartType = "xlPyramidColStacked" Then
       ch_.chartType = xlPyramidColStacked
    ElseIf chartType = "xlPyramidColStacked100" Then
       ch_.chartType = xlPyramidColStacked100
    ElseIf chartType = "xlPyramidBarClustered" Then
       ch_.chartType = xlPyramidBarClustered
    ElseIf chartType = "xlPyramidBarStacked" Then
       ch_.chartType = xlPyramidBarStacked
    ElseIf chartType = "xlPyramidBarStacked100" Then
       ch_.chartType = xlPyramidBarStacked100
    ElseIf chartType = "xlPyramidCol" Then
       ch_.chartType = xlPyramidCol
    ElseIf chartType = "xlCylinderColClustered" Then
       ch_.chartType = xlCylinderColClustered
    ElseIf chartType = "xlCylinderColStacked" Then
       ch_.chartType = xlCylinderColStacked
    ElseIf chartType = "xlCylinderColStacked100" Then
       ch_.chartType = xlCylinderColStacked100
    ElseIf chartType = "xlCylinderBarClustered" Then
       ch_.chartType = xlCylinderBarClustered
    ElseIf chartType = "xlCylinderBarStacked" Then
       ch_.chartType = xlCylinderBarStacked
    ElseIf chartType = "xlCylinderBarStacked100" Then
       ch_.chartType = xlCylinderBarStacked100
    ElseIf chartType = "xlCylinderCol" Then
       ch_.chartType = xlCylinderCol
    ElseIf chartType = "xlConeColClustered" Then
       ch_.chartType = xlConeColClustered
    ElseIf chartType = "xlConeColStacked" Then
       ch_.chartType = xlConeColStacked
    ElseIf chartType = "xlConeColStacked100" Then
       ch_.chartType = xlConeColStacked100
    ElseIf chartType = "xlConeBarClustered" Then
       ch_.chartType = xlConeBarClustered
    ElseIf chartType = "xlConeBarStacked" Then
       ch_.chartType = xlConeBarStacked
    ElseIf chartType = "xlConeBarStacked100" Then
       ch_.chartType = xlConeBarStacked100
    ElseIf chartType = "xlConeCol" Then
       ch_.chartType = xlConeCol
    ElseIf chartType = "xlDoughnut" Then
       ch_.chartType = xlDoughnut
    ElseIf chartType = "xlDoughnutExploded" Then
       ch_.chartType = xlDoughnutExploded
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
    '|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    On Error Resume Next
       ch_.ApplyCustomType chartType:=xlBuiltIn, TypeName:=chartType
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo 0
  Else
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| Excel - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| BuiltIn |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim isEng As Boolean
    isEng = (Application.International(xlCountryCode) = 1)
    
    If (InStr(chartType, "xlBuiltIn1")) Then
        chartType = IIf(isEng, "Column - Area", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    ElseIf (InStr(chartType, "xlBuiltIn2")) Then
        chartType = IIf(isEng, "Colored Lines", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    ElseIf (InStr(chartType, "xlBuiltIn3")) Then
        chartType = IIf(isEng, "Line - Column", "|fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    ElseIf (InStr(chartType, "xlBuiltIn4")) Then
        chartType = IIf(isEng, "Line - Column on 2 Axes", "|fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2")
    ElseIf (InStr(chartType, "xlBuiltIn5")) Then
        chartType = IIf(isEng, "Cones", "|fffd||fffd||fffd||fffd||fffd||fffd|")
    ElseIf (InStr(chartType, "xlBuiltIn6")) Then
        chartType = IIf(isEng, "Pie Explosion", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    ElseIf (InStr(chartType, "xlBuiltIn7")) Then
        chartType = IIf(isEng, "Blue Pie", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    End If
    ch_.ApplyCustomType chartType:=xlBuiltIn, TypeName:=chartType
  End If
End Sub


Attribute VB_Name = "Grouper"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0

Private Const BEGIN_INDEX_POS = 0
Private Const END_INDEX_POS = 1

Private Storage As Collection

Private Sub Class_Initialize()
    Set Storage = New Collection
End Sub

Private Sub Class_Terminate()
    Set Storage = Nothing
End Sub

Public Sub AddBeginRowIndex(ByVal ID As String, ByVal index As Long)
    Dim ExistingCoords() As Long
    Dim EndIndex As Long
    
    EndIndex = 0
    On Error GoTo ErrorHandler
    ExistingCoords = Storage.Item(ID)
    On Error GoTo 0
    EndIndex = ExistingCoords(END_INDEX_POS)
    Storage.Remove (ID)
ErrorHandler:
    Dim NewCoords(2) As Long
    NewCoords(BEGIN_INDEX_POS) = index
    NewCoords(END_INDEX_POS) = EndIndex
    Storage.Add Item:=NewCoords, Key:=ID
End Sub

Public Sub AddEndRowIndex(ByVal ID As String, ByVal index As Long)
    Dim ExistingCoords() As Long
    Dim BeginIndex As Long
    
    BeginIndex = 0
    On Error GoTo ErrorHandler
    ExistingCoords = Storage.Item(ID)
    On Error GoTo 0
    BeginIndex = ExistingCoords(BEGIN_INDEX_POS)
    Storage.Remove (ID)
ErrorHandler:
    Dim NewCoords(2) As Long
    NewCoords(END_INDEX_POS) = index
    NewCoords(BEGIN_INDEX_POS) = BeginIndex
    Storage.Add Item:=NewCoords, Key:=ID
End Sub

Public Sub GroupAll(ws As Worksheet)
    Dim Coords() As Long
    Dim i As Long
    
    On Error Resume Next
    
    For i = 1 To Storage.Count
      Coords = Storage.Item(i)
      If (Coords(BEGIN_INDEX_POS) > 0) And (Coords(END_INDEX_POS) > 0) Then _
        ws.range(ws.Rows(Coords(BEGIN_INDEX_POS)), ws.Rows(Coords(END_INDEX_POS))).Group
    Next i
    
End Sub

Public Sub ClearAll()
    Dim i As Long
    For i = 1 To Storage.Count
      Storage.Remove (1)
    Next i
End Sub



Attribute VB_Name = "Map"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Storage As Collection
Private Keys As Sett

Private Sub Class_Initialize()
  Set Storage = New Collection
  Set Keys = New Sett
End Sub

Private Sub Class_Terminate()
  Set Storage = Nothing
End Sub

Public Sub Add(ID As String, value)
  On Error GoTo ErrorHandler
  Storage.Add Item:=value, Key:=ID
  Keys.Add ID
  Exit Sub
ErrorHandler:
  Storage.Remove (ID)
  Resume
  'Storage.Add Item:=Value, key:=ID
End Sub

Public Function GetValue(ID As String)
  On Error GoTo ErrorHandler
  GetValue = Storage.Item(ID)
  Exit Function
ErrorHandler:
  GetValue = Empty
End Function

Private Sub ClearColl(acoll As Collection)
  Dim i As Long
  If Not acoll Is Nothing Then
    For i = 1 To acoll.Count
      acoll.Remove (1)
  Next i
  End If
End Sub

Public Function KeySet() As Sett
  Set KeySet = Keys
End Function

Public Sub ClearAll()
  ClearColl Storage
  Keys.ClearAll
End Sub



Attribute VB_Name = "Merger"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 0

Private Storage As Collection

Private Sub Class_Initialize()
    Set Storage = New Collection
End Sub

Private Sub Class_Terminate()
    Set Storage = Nothing
End Sub

Public Sub Add(ByVal ID As String, ByVal Top As Long, ByVal Left As Long, _
ByVal Bottom As Long, ByVal Right As Long)
    Dim ExistingCoords() As Long
    On Error GoTo ErrorHandler
    ExistingCoords = Storage.Item(ID)
    On Error GoTo 0
    
    If (Top = ExistingCoords(0)) And (Bottom = ExistingCoords(2)) Then
      If ExistingCoords(3) + 1 = Left Then
        Left = ExistingCoords(1)
      End If
    ElseIf (Left = ExistingCoords(1)) And (Right = ExistingCoords(3)) Then
      If ExistingCoords(2) + 1 = Top Then
        Top = ExistingCoords(0)
      End If
    End If
    Storage.Remove (ID)
ErrorHandler:
    Dim NewCoords(4) As Long
    NewCoords(0) = Top
    NewCoords(1) = Left
    NewCoords(2) = Bottom
    NewCoords(3) = Right
    Storage.Add Item:=NewCoords, Key:=ID
End Sub

Public Function GetCoords(ByVal ID As String) As Long
    Dim value() As Long
    On Error GoTo ErrorHandler
    value = Storage.Item(ID)
    GetValue = value(0)
    Exit Function
ErrorHandler:
    GetValue = -1
End Function

Public Sub MergeAll(ws As Worksheet)
    Dim Coords() As Long
    Dim i As Long
    
    On Error Resume Next
    
    For i = 1 To Storage.Count
      Coords = Storage.Item(i)
      ws.range(ws.Cells(Coords(0), Coords(1)), ws.Cells(Coords(2), Coords(3))).Merge
    Next i
    On Error GoTo 0
End Sub

Public Sub Merge(ws As Worksheet, ID As String)
    Dim Coords() As Long
    
    On Error GoTo ErrorHandler
    Coords = Storage.Item(ID)
    ws.range(ws.Cells(Coords(0), Coords(1)), ws.Cells(Coords(2), Coords(3))).Merge
    Exit Sub
ErrorHandler:
'ToDo
End Sub

Public Sub ClearAll()
    Dim i As Long
    For i = 1 To Storage.Count
      Storage.Remove (1)
    Next i
End Sub

Attribute VB_Name = "Sett"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Storage As Collection
Private Elements As Collection

Private Sub Class_Initialize()
  Set Storage = New Collection
  Set Elements = New Collection
End Sub

Private Sub Class_Terminate()
  Set Storage = Nothing
  Set Elements = Nothing
End Sub

Public Sub Add(ByVal Key As String)
  On Error GoTo ExitHandler
  Storage.Add "@", Key
  Elements.Add Key
ExitHandler:
End Sub

Public Function Count() As Long
  Count = Elements.Count
End Function

Public Function Item(index As Long)
  Item = Elements.Item(index)
End Function

Private Sub ClearColl(acoll As Collection)
  Dim i As Long
  If Not acoll Is Nothing Then
    For i = 1 To acoll.Count
      acoll.Remove (1)
    Next i
  End If
End Sub

Public Sub ClearAll()
  ClearColl Storage
  ClearColl Elements
End Sub

Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' )^J)
' x%x(Z
' +ZrG
' t*%J
' +ZrG
' +ZrG

INQUEST-PP=macro
