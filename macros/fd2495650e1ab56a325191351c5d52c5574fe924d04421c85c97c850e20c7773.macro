Attribute VB_Name = "AIRLINEModel"
Attribute VB_Base = "0{C4A12B56-8BB3-4BCE-857B-9445B7F02C98}{CD88B794-5910-457F-B63F-80895034F61A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: AIRLINEModel.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/AIRLINEModel.frm $
'
Private Const msMODULE As String = "USERFORM:IRLINEModel"
Private Const zenSlugId As String = "articles/216472803"

Private callValidateForm As Boolean
Private userOptions As AIRLINEModelUO

' Apparantly, the _Exit event no longer works. See:
' http://answers.google.com/answers/threadview?id=133291
' Not sure how to get around this. If we put it in _Change,
' then it will run every time the user types a character,
' which is a problem, especially when they try to enter "10"
'Private Sub SOrder_Exit_M(ByVal Cancel As MSForms.ReturnBoolean)
'  Const sSOURCE As String = "SOrder_Exit_M"
  
'  If IsNumeric(SOrder.value) Then
'    If (SOrder.value <= 1) Then
'      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_PERIOD_NUMBER_ERROR) ' "S must be at least 2."

'      SOrder.value = vbNullString
'    End If
'  Else
'    If SOrder.value <> vbNullString And _
'      SOrder.value <> "-" Then
'      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."

'      SOrder.value = vbNullString
'    End If
'  End If

'  If callValidateForm Then
'    Call validateForm
'  End If
'End Sub




Private Sub optCalibrateParams_Click()
  userOptions.GuessParameters = optGuessParams.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optGuessParams_Click()
  userOptions.GuessParameters = optGuessParams.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub SOrder_Change()
  
  If IsNumeric(SOrder.value) Then
    userOptions.S = SOrder.value
  Else
    userOptions.S = 0
  End If

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim NA As Boolean

  ' (1) Read the model coefficient
  userOptions.S = SOrder

  On Error GoTo ErrorHandler
  Call Utilities.OptimizeCode_Begin
  
  'Set inRange = Range(RefInputArray)
  If Not isTimeSeriesValid(Range(RefInputArray)) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
  
  ' Set the output range now
  If (Range(RefOutputRange) Is Nothing) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 50% are allowed"
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If

  'Make sure we have a valid model order
  If Not userOptions.isValidModel() Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_AIRLINE_INVALID_MODEL_ERROR_MSG) ' "The model order is not valid."
    Exit Sub
  End If


  Call userOptions.printAIRLINEModelOutput(Range(RefOutputRange))
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkGuessParams_Click()
  userOptions.GuessParameters = chkGuessParams.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefInputArray_Change()
  On Error Resume Next
  
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtMaxIter_Change()
  userOptions.MAX_ITERATIONS = txtMaxIter.value

  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_AIRLINE_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  ModelSpecFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL)
  ModelSpecFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_SPEC_FRAME_HELPTIP)
  
  SOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_AIRLINE_MODEL_SPERIOD_LABEL)
  SOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_AIRLINE_MODEL_SPERIOD_HELPTIP)
  SOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_AIRLINE_MODEL_SPERIOD_HELPTIP)
    
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)
  
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  'OutputRangeFrameLabel
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  Set userOptions = New AIRLINEModelUO

  If Not (userOptions Is Nothing) Then
    callValidateForm = False

    chkAscending.value = userOptions.ASCENDING
    SOrder.value = userOptions.S
    optGuessParams.value = userOptions.GuessParameters
    optCalibrateParams.value = Not userOptions.GuessParameters
    txtMaxIter.value = userOptions.MAX_ITERATIONS
    chkGoodness.value = userOptions.includeGoodnessOfFit
    ChkDiagnosis.value = userOptions.includeResidualDiagnosis
    RefEditSignificanceLevel.value = userOptions.significance
    RefOutputRange.value = userOptions.OUTPUT_RANGE
    
  End If
  callValidateForm = True
  Call validateForm
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean

  On Error Resume Next
  
  inputDataReady = Len(RefInputArray.value) > 0 And Utilities.isCellRangeValid(RefInputArray.value)
  validAlpha = isAlphaValid(RefEditSignificanceLevel.value)

  chkAscending.enabled = inputDataReady
  SOrder.enabled = inputDataReady

  If SOrder.enabled Then
    validModel = userOptions.isValidModel()
  Else
    validModel = False
  End If

  optGuessParams.enabled = inputDataReady And validModel
  optCalibrateParams.enabled = inputDataReady And validModel
  txtMaxIter.enabled = inputDataReady And validModel And optCalibrateParams.value
  
  chkGoodness.enabled = inputDataReady And validModel

  RefEditSignificanceLevel.enabled = inputDataReady And validModel And userOptions.includeResidualDiagnosis

  ChkDiagnosis.enabled = inputDataReady And validModel

  RefOutputRange.enabled = inputDataReady And validModel

  ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)
  
  btnOK.enabled = ready
  
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub
Attribute VB_Name = "AIRLINEModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: AIRLINEModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/AIRLINEModelUO.cls $
'

Private Const msMODULE As String = "CLASS:AirLineModelUO"

Private myInputData As String
Private myAscending As Boolean
Private myOutputRange As String
Private mySignificanceLevel As String
Private myS As Integer
Private myGuessParams As Boolean
Private myGoodnessFit As Boolean
Private myMaxIteration As Long
Private myResidDiagnosis As Boolean

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property

Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get S() As Integer
  S = myS
End Property

Public Property Let S(ByVal vNewValue As Integer)
  myS = vNewValue
End Property

Public Property Get MAX_ITERATIONS() As Long
  MAX_ITERATIONS = myMaxIteration
End Property

Public Property Let MAX_ITERATIONS(ByVal vNewValue As Long)
  myMaxIteration = vNewValue
End Property


Public Property Get GuessParameters() As Boolean
  GuessParameters = myGuessParams
End Property

Public Property Let GuessParameters(ByVal vNewValue As Boolean)
  myGuessParams = vNewValue
End Property

Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property

Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property

Private Sub Class_Initialize()
  myInputData = ""
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myAscending = True

  myResidDiagnosis = True
  myGoodnessFit = True
  myGuessParams = True

  MAX_ITERATIONS = 100
  myS = 2
End Sub

Public Function isValidModel()
  isValidModel = (S > 1)
End Function



' Print the Parameters for the model
Public Sub PrintAIRLINECoefficients(myRange As Range, S As Integer)
  Const sSOURCE As String = "PrintAIRLINECoefficients"
  
  Dim start As Long
  Dim theta1 As String
  Dim theta2 As String
  Dim mean As String
  Dim sigma As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
    myRange.Cells(1, 1).Select
    With Selection
        .HorizontalAlignment = xlLeft
        .Font.Bold = True
        .value = "AIRLINE(" & S & ")"
    End With

    ' Set the borderline
    Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With

    myRange.Cells(2, 2).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"

    myRange.Cells(2, 3).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"

    Dim ParamLabels(1 To 5, 3) As String
    ParamLabels(1, 1) = ChrW$(&H3BC&) ' little mu
    ParamLabels(1, 2) = "0"
    ParamLabels(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE
    
    ParamLabels(2, 1) = ChrW$(&H3B8&) ' little theta
    ParamLabels(2, 2) = "0"
    ParamLabels(2, 3) = MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_NON_SEASONAL_THETA_PARAM_NOTE) ' AIRLINE_NON_SEASONAL_THETA_PARAM_NOTE
    
    ParamLabels(3, 1) = ChrW$(&H398&) ' big theta
    ParamLabels(3, 2) = "0"
    ParamLabels(3, 3) = MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_SEASONAL_THETA_PARAM_NOTE) ' AIRLINE_SEASONAL_THETA_PARAM_NOTE
    
    ParamLabels(4, 1) = ChrW$(&H3C3&) ' little sigma
    ParamLabels(4, 2) = "1"
    ParamLabels(4, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
    
    
    ParamLabels(5, 1) = "s"
    ParamLabels(5, 2) = Me.S
    ParamLabels(5, 3) = MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_SEASON_LENGTH_PARAM_NOTE) ' AIRLINE_SEASON_LENGTH_PARAM_NOTE
    
    
    start = 3
    mean = myRange.Cells(start, 3).Address(True, True)
    start = start + 1
    theta1 = myRange.Cells(start, 3).Address(True, True)
    start = start + 1
    theta2 = myRange.Cells(start, 3).Address(True, True)
    start = start + 1
    sigma = myRange.Cells(start, 3).Address(True, True)
    
    
    Dim i As Long
    For i = 1 To 4
        myRange.Cells(i + 2, 2).Select
        With Selection
            .ClearComments
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = ParamLabels(i, 1)
            If .Comment Is Nothing Then
              .AddComment ParamLabels(i, 3)
            Else
              .Comment.Text Text:=ParamLabels(i, 3)
            End If
            .Comment.visible = False
        End With
        
        myRange.Cells(i + 2, 3).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = ParamLabels(i, 2)
            .NumberFormat = "0.00"
        End With
    Next i

    myRange.Cells(8, 2).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = ParamLabels(5, 1)
      If .Comment Is Nothing Then
        .AddComment ParamLabels(5, 3)
      Else
        .Comment.Text Text:=ParamLabels(5, 3)
      End If
      .Comment.visible = False
    End With
    
    myRange.Cells(8, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = ParamLabels(5, 2)
      .NumberFormat = "0"
    End With
    
    ' Update the formula now
  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=AIRLINE(" & mean & "," & sigma & "," & Me.S & "," & theta1 & "," & theta2 & ")")
  End With
End Sub
' Print the model initial parameters
Public Sub PrintAIRLINEInitialParameter(InputRange As String, ASCENDING As Boolean, S As Integer, parameters As Range)
    Range(parameters.Cells(1, 1), parameters.Cells(4, 1)) = vb_AIRLINEGUESS(InputRange, ASCENDING, S)
End Sub

Public Sub PrintAIRLINECalibratedParameter(InputRange As String, ASCENDING As Boolean, ByVal mean As Double, ByVal sigma As Double, ByVal S As Integer, ByVal argsmallTheta As String, ByVal argTheta As String, ByVal maxIter As Long, parameters As Range)
    Range(parameters.Cells(1, 1), parameters.Cells(4, 1)) = vb_AIRLINECALIBRATE(InputRange, ASCENDING, mean, sigma, S, argsmallTheta, argTheta, maxIter)
End Sub




' Print the Goodness of fit function list
Public Sub PrintAIRLINEGoodnessOfFit(myRange As Range, S As Integer, parameters As Range, InputRange As String, ASCENDING As Boolean)
  Const sSOURCE As String = "PrintAIRLINEGoodnessOfFit"
  Dim szFormula As String
  Dim nAscending As Integer

  On Error GoTo ErrorHnadler
  
  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If

  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If

  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  myRange.Cells(2, 1).Select
  With Selection
    .ClearComments
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
    End If
    .Comment.visible = False
  End With

  
  szFormula = "=AIRLINE_LLF(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                    parameters.Cells(4, 1).Address(True, True) & "," & _
                                    parameters.Cells(6, 1).Address(True, True) & "," & _
                                    parameters.Cells(2, 1).Address(True, True) & "," & _
                                    parameters.Cells(3, 1).Address(True, True) & ")"

  myRange.Cells(3, 1).Select
  Selection.formula = szFormula
  Selection.NumberFormat = "0.00"

  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)  ' GOF_AIC_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(3, 2).Select
  Selection.formula = "=AIRLINE_AIC(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                    parameters.Cells(4, 1).Address(True, True) & "," & _
                                    parameters.Cells(6, 1).Address(True, True) & "," & _
                                    parameters.Cells(2, 1).Address(True, True) & "," & _
                                    parameters.Cells(3, 1).Address(True, True) & ")"
  ' Excel accepts only US-based notation, it will convert impliciely
  Selection.NumberFormat = "0.00"

  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_CHECK_NOTE) ' ARMA_CHECK_GOF_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_CHECK_NOTE)  ' ARMA_CHECK_GOF_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(3, 3).Select
  Selection.formula = "=AIRLINE_CHECK(" & parameters.Cells(1, 1).Address(True, True) & "," & _
                                      parameters.Cells(4, 1).Address(True, True) & "," & _
                                      parameters.Cells(6, 1).Address(True, True) & "," & _
                                      parameters.Cells(2, 1).Address(True, True) & "," & _
                                      parameters.Cells(3, 1).Address(True, True) & ")"

  Selection.NumberFormat = "0"
  Selection.HorizontalAlignment = xlCenter
Cleanup:
  
  Exit Sub
ErrorHnadler:
    Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
    ' "Error occured while preparing the model"
    MsgBox MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Resume Cleanup
End Sub

' Print the Residual Diagnosis tests
Public Sub PrintAIRLINEResidualDiagnosis(InputRange As String, ASCENDING As Boolean, S As Integer, parameters As Range, significanceLevel As String, myRange As Range)
  Const sSOURCE As String = "PrintAIRLINEResidualDiagnosis"
  
  Dim ResidualsEqn As String
  Dim XKURT As String
  Dim nAscending As Integer

  On Error GoTo ErrorHnadler

  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If

  XKURT = "0"
  ResidualsEqn = "RMNA(AIRLINE_RESID(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                      parameters.Cells(4, 1).Address(True, True) & "," & _
                                      parameters.Cells(6, 1).Address(True, True) & "," & _
                                      parameters.Cells(2, 1).Address(True, True) & "," & _
                                      parameters.Cells(3, 1).Address(True, True) & "))"

  Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, 0, 0, parameters, significanceLevel, XKURT, myRange)
Cleanup:
  
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub




Public Sub printAIRLINEModelOutput(myRange As Range)
  Const sSOURCE As String = "printAIRLINEModelOutput"
  
  Dim parameters As Object
  
  On Error GoTo ErrorHnadler
  
  ' (2) Print the model Coefficient
  Call PrintAIRLINECoefficients(myRange, Me.S)

  ' (3) Print the goodness of fit analytics
  Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(6, 3))
  
  ' (3.5) Print the default model coefficient
  If Me.GuessParameters Then
    Call PrintAIRLINEInitialParameter(myInputData, Me.ASCENDING, Me.S, parameters)
  Else
    Call PrintAIRLINECalibratedParameter(myInputData, Me.ASCENDING, 0#, 1#, Me.S, 0#, 0#, Me.MAX_ITERATIONS, parameters.Cells(1, 1))
  End If

  ' (4) Print the goodness of fit function
  If Me.includeGoodnessOfFit Then
    Call PrintAIRLINEGoodnessOfFit(myRange.Cells(1, 5), Me.S, parameters, myInputData, Me.ASCENDING)
  End If

  ' (5) Print the residual diagnosis test
  If Me.includeResidualDiagnosis Then
    If Me.includeGoodnessOfFit Then
      Call PrintAIRLINEResidualDiagnosis(myInputData, Me.ASCENDING, Me.S, parameters, Me.significance, myRange.Cells(1, 9))
    Else
      Call PrintAIRLINEResidualDiagnosis(myInputData, Me.ASCENDING, Me.S, parameters, Me.significance, myRange.Cells(1, 5))
    End If
  End If

Cleanup:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_AIRLINE_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Attribute VB_Name = "ARCHModel"
Attribute VB_Base = "0{DE345124-08F8-4B0F-A029-1C0477871B95}{E1F67069-07DD-41E9-8E43-FF14DCBCD98D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARCHModel.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARCHModel.frm $
'
Private Const msMODULE As String = "USERFORM:ARCHModel"
Private Const zenSlugId As String = "articles/216476263"

Private callValidateForm As Boolean
Private userOptions As ARCHModelUO

Private Sub ARCHOrder_Change()
  Const sSOURCE As String = "ARCHOrder_Change"
  
  If IsNumeric(ARCHOrder.value) Then
    If ARCHOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      ARCHOrder.value = vbNullString
    Else
        userOptions.P = ARCHOrder.value
    End If
  Else
      If ARCHOrder.value <> vbNullString And _
          ARCHOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        ARCHOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
   
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
    
  ' (1) Read the model coefficient
  userOptions.P = ARCHOrder
  userOptions.Q = GARCHOrder
    

  Dim myRange As Object
  Dim inRange As Object

  If Not isTimeSeriesValid(Range(RefInputArray)) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
  
  ' Set the output range now
  Set myRange = Range(RefOutputRange)
  If (myRange Is Nothing) Then
    ' MsgBox "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
      
  Call userOptions.printARCHModelOutput(myRange)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' MsgBox "Error occured while preparing the ARCH model", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value
End Sub


Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value
End Sub

Private Sub cmbxModel_Change()
    userOptions.ARCHModel = cmbxModel.ListIndex + 1
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub GARCHOrder_Change()
  Const sSOURCE As String = "GARCHOrder_Change"
  
  If IsNumeric(GARCHOrder.value) Then
    If GARCHOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      GARCHOrder.value = vbNullString
    Else
        userOptions.Q = GARCHOrder.value
    End If
  Else
      If GARCHOrder.value <> vbNullString And _
          GARCHOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        GARCHOrder.value = vbNullString
      End If
  End If
        
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub optCalibrateParams_Click()
  userOptions.GuessParameters = Not optCalibrateParams.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optGED_Click()
    userOptions.Innovation = InnovationType.GED
End Sub

Private Sub optGuessParams_Click()
  userOptions.GuessParameters = optGuessParams.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optNormal_Click()
    userOptions.Innovation = InnovationType.Gaussian
End Sub


Private Sub optStudent_Click()
    userOptions.Innovation = InnovationType.Student
End Sub

Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  ModelSpecFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL)
  ModelSpecFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_SPEC_FRAME_HELPTIP)
  
  SelectGARCHModelLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_SELECT_MODEL_LABEL)
  SelectGARCHModelLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_SELECT_MODEL_HELPTIP)
  cmbxModel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_SELECT_MODEL_HELPTIP)
  
  ARCHOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_ARCH_ORDER_LABEL)
  ARCHOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_ARCH_ORDER_HELPTIP)
  ARCHOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_ARCH_ORDER_HELPTIP)
  
  GARCHOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_GARCH_ORDER_LABEL)
  GARCHOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_GARCH_ORDER_HELPTIP)
  GARCHOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_GARCH_ORDER_HELPTIP)
  
  
  ' Option Group
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)
  
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  'InnovationsFrame
  InnovationsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_FRAME_LABEL)
  InnovationsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_FRAME_HELPTIP)

  optNormal.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_NORMAL_LABEL)
  optNormal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_NORMAL_HELPTIP)
  
  optStudent.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_TSTUDENT_LABEL)
  optStudent.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_TSTUDENT_HELPTIP)
  
  optGED.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_GED_LABEL)
  optGED.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_MODEL_INNOVATIONS_GED_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  ' Free any object referenced earlier
  Set userOptions = Nothing
  
  Set userOptions = New ARCHModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    ' Insert the available models in the add-ins
    With cmbxModel
        .Clear
        .AddItem "GARCH"
        .AddItem "EGARCH"
        .AddItem "GARCH-M"
        .ListIndex = (userOptions.ARCHModel - 1)
    End With
    
    ' Select the radio button for the Innovations
    optNormal.value = userOptions.Innovation
    
    ARCHOrder.value = userOptions.P
    
    GARCHOrder.value = userOptions.Q
    
    ' chkGuessParams.value = userOptions.GuessParameters
    optGuessParams.value = userOptions.GuessParameters
    optCalibrateParams.value = Not userOptions.GuessParameters
    txtMaxIter.value = 100
    
    ChkDiagnosis.value = userOptions.includeResidualDiagnosis
    chkGoodness.value = userOptions.includeGoodnessOfFit
    chkAscending.value = userOptions.ASCENDING
    
    RefOutputRange.value = userOptions.OUTPUT_RANGE
    RefEditSignificanceLevel.value = userOptions.significance
  End If
    
  callValidateForm = True
  Call validateForm
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDateReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
  
  
  inputDateReady = Utilities.isCellRangeValid(RefInputArray.value)
  validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
  
  validModel = userOptions.isValidModel()
  
  chkAscending.enabled = inputDateReady
  GARCHOrder.enabled = inputDateReady
  ARCHOrder.enabled = inputDateReady
  cmbxModel.enabled = inputDateReady And validModel
  RefEditSignificanceLevel.enabled = inputDateReady And validModel
  
  ChkDiagnosis.enabled = inputDateReady And validModel And _
                          RefEditSignificanceLevel.enabled And _
                          validAlpha
  
  chkGoodness.enabled = inputDateReady And validModel
  
  'chkGuessParams.enabled = inputDateReady And validModel
  optGuessParams.enabled = inputDateReady And validModel
  optCalibrateParams.enabled = inputDateReady And validModel
  maxIterTxtLabel.enabled = optCalibrateParams.enabled And optCalibrateParams.value
  txtMaxIter.enabled = optCalibrateParams.enabled And optCalibrateParams.value
  
  
  optNormal.enabled = inputDateReady And validModel
  optStudent.enabled = inputDateReady And validModel
  optGED.enabled = inputDateReady And validModel

  RefOutputRange.enabled = inputDateReady And validModel
  
  ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)

  btnOK.enabled = ready
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "ARCHModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARCHModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARCHModelUO.cls $
'
Private Const msMODULE As String = "CLASS:ARCHModelUO"

Private myInputData As String
Private myAscending As Boolean
Private myOutputRange As String
Private mySignificanceLevel As String

Private myP As Integer
Private myQ As Integer
Private myInnovationsType As InnovationType
Private myModelSelected As ARCHModelType
Private myGuessParams As Boolean
Private myGoodnessFit As Boolean
Private myResidDiagnosis As Boolean


Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property
Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get P() As Integer
  P = myP
End Property

Public Property Let P(ByVal vNewValue As Integer)
  myP = vNewValue
End Property

Public Property Get Q() As Integer
  Q = myQ
End Property

Public Property Let Q(ByVal vNewValue As Integer)
  myQ = vNewValue
End Property

Public Property Get GuessParameters() As Boolean
  GuessParameters = myGuessParams
End Property

Public Property Let GuessParameters(ByVal vNewValue As Boolean)
  myGuessParams = vNewValue
End Property

Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property



Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property

Public Property Get Innovation() As InnovationType
  Innovation = myInnovationsType
End Property

Public Property Let Innovation(ByVal vNewValue As InnovationType)
  myInnovationsType = vNewValue
End Property

Public Property Get ARCHModel() As ARCHModelType
  ARCHModel = myModelSelected
End Property

Public Property Let ARCHModel(ByVal vNewValue As ARCHModelType)
  myModelSelected = vNewValue
End Property

Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  myInputData = ""
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  mySignificanceLevel = CStr(0.05)                ' This will adapt to regional setting
  myAscending = True
  
  
  myResidDiagnosis = True
  myGoodnessFit = True
  myGuessParams = True

  myP = 1
  myQ = 1
  
  myInnovationsType = Gaussian
  myModelSelected = GARCH
End Sub


Public Function isValidModel()
  isValidModel = P >= 0 And Q >= 0 And (P + Q) > 0
End Function


' Print the Parameters for the GARCH model
Public Sub PrintGARCHCoefficients(myRange As Range, P As Integer, Q As Integer, Innovation As Integer)
  Const sSOURCE As String = "PrintGARCHCoefficients"
  
  Dim mean As String
  Dim alphas As String
  Dim betas As String
  Dim nu As String
  Dim start As Long
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "GARCH(" & P & "," & Q & ")"
  End With

  If Innovation > 1 Then
    If Innovation = 2 Then
        Selection.value = Selection.value & " & t-dist(" & ChrW$(&H3BD&) & ")"
    Else
        Selection.value = Selection.value & " & GED(" & ChrW$(&H3BD&) & ")"
    End If
  End If

    ' Set the borderline
    Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With

    myRange.Cells(2, 2).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
    
    myRange.Cells(2, 3).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    
    ' TODO: we need to get initial values for the model
    Dim Params, i As Long
    
    Params = 2 + P + Q
    
    If Innovation > 1 Then
        Params = Params + 1
    End If
   
    ' (1) Display the Basic Statistics
    ReDim S(1 To Params, 3)
    
    start = 2
    mean = myRange.Cells(start + 1, 3).Address(True, True)
    start = start + 1
    
    S(1, 1) = ChrW$(&HB5&)
    S(1, 2) = "0"
    S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_MEAN_PARAM_NOTE) ' GARCH_MEAN_PARAM_NOTE
    
    
    For i = 0 To P
      If i = 0 Then
        S(2 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
        S(2 + i, 2) = "1"
        S(2 + i, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_CONST_PARAM_NOTE) ' GARCH_CONST_PARAM_NOTE
      Else
        S(2 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
        S(2 + i, 2) = "0"
        S(2 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_ARCH_PARAM_NOTE) ' GARCH_ARCH_PARAM_NOTE
      End If
    Next i

    alphas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + P + 1, 3)).Address(True, True)
    start = start + P + 1

    For i = 1 To Q
        S(2 + P + i, 1) = ChrW$(&H3B2&) & "[" & i & "]"
        S(2 + P + i, 2) = "0"
        S(2 + P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_GARCH_PARAM_NOTE) ' GARCH_GARCH_PARAM_NOTE
    Next i
    
    betas = ""
    If Q > 0 Then
      betas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + Q, 3)).Address(True, True)
      start = start + Q
    End If
    
    nu = ""
    If Innovation > 1 Then
        S(Params, 1) = ChrW$(&H3BD&)
        S(Params, 2) = "5"
        S(Params, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_DF_PARAM_NOTE) ' GARCH_DF_PARAM_NOTE
        
        nu = myRange.Cells(start + 1, 3).Address(True, True)
    End If
    
    For i = 1 To Params
        ' Set tmpRange = Nothing
        myRange.Cells(i + 2, 2).Select
        With Selection
            .ClearComments
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = S(i, 1)
            If .Comment Is Nothing Then
              .AddComment S(i, 3)
            Else
              .Comment.Text Text:=S(i, 3)
            End If
            .Comment.visible = False
        End With
        Call Super_Sub
        
        myRange.Cells(i + 2, 3).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = False
            .formula = S(i, 2)
            .NumberFormat = "0.00"
        End With
    Next i

  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=GARCH(" & mean & "," & alphas & "," & betas & "," & Innovation & "," & nu & ")")
  End With

End Sub
' Print the model initial parameters
Public Sub PrintGARCHInitialParameter(InputRange As String, ASCENDING As Boolean, P As Integer, Q As Integer, model As Integer, Innovation As Integer, myRange As Range)
  Const sSOURCE As String = "PrintGARCHInitialParameter"
  
  Dim size As Long
  If Innovation > 1 Then
      size = 1
  Else
      size = 0
  End If
  
  If model = 1 Then
      size = size + P + Q + 2
      Range(myRange.Cells(1, 1), myRange.Cells(size, 1)) = vb_GARCHGUESS(InputRange, ASCENDING, P, Q, Innovation)
  Else
      If model = 2 Then
          size = size + 2 * P + Q + 2
          Range(myRange.Cells(1, 1), myRange.Cells(size, 1)) = vb_EGARCHGUESS(InputRange, ASCENDING, P, Q, Innovation)
      Else
          size = size + P + Q + 3
          Range(myRange.Cells(1, 1), myRange.Cells(size, 1)) = vb_GARCHMGUESS(InputRange, ASCENDING, P, Q, Innovation)
      End If
  End If
End Sub

' Print the model coefficients for GARCH-M model
Public Sub PrintGARCHMCoefficients(myRange As Range, P As Integer, Q As Integer, Innovation As Integer)
  Const sSOURCE As String = "PrintGARCHMCoefficients"
  
  Dim mean As String
  Dim alphas As String
  Dim betas As String
  Dim lambda
  Dim nu As String
  Dim start As Long
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
    myRange.Cells(1, 1).Select
    With Selection
        .HorizontalAlignment = xlLeft
        .Font.Bold = True
        .value = "GARCH-M(" & P & "," & Q & ")"
    End With

    If Innovation > 1 Then
        If Innovation = 2 Then
            Selection.value = Selection.value & " & t-dist(" & ChrW$(&H3BD&) & ")"
        Else
            Selection.value = Selection.value & " & GED(" & ChrW$(&H3BD&) & ")"
        End If
    End If


    ' Set the borderline
    Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With

    myRange.Cells(2, 2).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
    
    myRange.Cells(2, 3).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"

    start = 2
    mean = myRange.Cells(start + 1, 3).Address(True, True)
    start = start + 1
    lambda = myRange.Cells(start + 1, 3).Address(True, True)
    start = start + 1
    
    ' TODO: we need to get initial values for the model
    
    Dim Params As Long
    Dim i As Long
    
    Params = 3 + P + Q
    
    If Innovation > 1 Then
        Params = Params + 1
    End If
    
    ' TODO: we need to get good initial values
    
    ' (1) Display the Basic Statistics
    ReDim S(1 To Params, 3)
    S(1, 1) = ChrW$(&HB5&)
    S(1, 2) = "0"
    S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_MEAN_PARAM_NOTE) ' GARCH_MEAN_PARAM_NOTE
    
    ' Lambda
    S(2, 1) = ChrW$(&H3BB&)
    S(2, 2) = "1"
    S(2, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_LAMBDA_PARAM_NOTE) ' GARCH_LAMBDA_PARAM_NOTE
    
    
    ' Alphas
    For i = 0 To P
      If i = 0 Then
        S(3 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
        S(3 + i, 2) = "1"
        S(3 + i, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_CONST_PARAM_NOTE) ' GARCH_CONST_PARAM_NOTE
      Else
        S(3 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
        S(3 + i, 2) = "0"
        S(3 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_ARCH_PARAM_NOTE) ' GARCH_ARCH_PARAM_NOTE
      End If
    Next i

    alphas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + P + 1, 3)).Address(True, True)
    start = start + P + 1


    ' betas
    For i = 1 To Q
        S(3 + P + i, 1) = ChrW$(&H3B2&) & "[" & i & "]"
        S(3 + P + i, 2) = "0"
        S(3 + P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_GARCH_PARAM_NOTE) ' GARCH_GARCH_PARAM_NOTE
    Next i
    
    betas = ""
    If Q > 0 Then
      betas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + Q, 3)).Address(True, True)
      start = start + Q
    End If
    
    nu = ""
    If Innovation > 1 Then
        S(Params, 1) = ChrW$(&H3BD&)
        S(Params, 2) = "5"
        S(Params, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_DF_PARAM_NOTE) ' GARCH_DF_PARAM_NOTE
        
        nu = myRange.Cells(start + 1, 3).Address(True, True)
    End If
    
    For i = 1 To Params
        ' Set tmpRange = Nothing
        myRange.Cells(i + 2, 2).Select
        With Selection
            .ClearComments
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = S(i, 1)
            If .Comment Is Nothing Then
              .AddComment S(i, 3)
            Else
              .Comment.Text Text:=S(i, 3)
            End If
            .Comment.visible = False
        End With
        Call Super_Sub
        
        myRange.Cells(i + 2, 3).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = False
            .formula = S(i, 2)
            .NumberFormat = "0.00"
        End With
    Next i
    
  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=GARCHM(" & mean & "," & lambda & "," & alphas & "," & betas & "," & Innovation & "," & nu & ")")
  End With

End Sub



' Print the Parameters for the GARCH model
Public Sub PrintEGARCHCoefficients(myRange As Range, P As Integer, Q As Integer, Innovation As Integer)
  Const sSOURCE As String = "PrintEGARCHCoefficients"
  
  Dim mean As String
  Dim alphas As String
  Dim betas As String
  Dim gammas As String
  Dim nu As String
  Dim start As Long
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = "EGARCH(" & P & "," & Q & ")"
  End With

  If Innovation > 1 Then
    If Innovation = 2 Then
      Selection.value = Selection.value & " & t-dist(" & ChrW$(&H3BD&) & ")"
    Else
      Selection.value = Selection.value & " & GED(" & ChrW$(&H3BD&) & ")"
    End If
  End If

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
    With .Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
  
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
  
  Dim Params As Long
  Dim i As Long
  
  Params = 2 + 2 * P + Q
  
  If Innovation > 1 Then
      Params = Params + 1
  End If
  
  start = 2
  mean = myRange.Cells(start + 1, 3).Address(True, True)
  start = start + 1
  
  ' (1) Display the mu
  ReDim S(1 To Params, 3)
  S(1, 1) = ChrW$(&HB5&)
  S(1, 2) = "0"
  S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_MEAN_PARAM_NOTE) ' GARCH_MEAN_PARAM_NOTE
  
  For i = 0 To P
    If i = 0 Then
      S(2 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
      S(2 + i, 2) = "1"
      S(2 + i, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_CONST_PARAM_NOTE) ' GARCH_CONST_PARAM_NOTE
    Else
      S(2 + i, 1) = ChrW$(&H3B1&) & "[" & i & "]"
      S(2 + i, 2) = "0"
      S(2 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_ARCH_PARAM_NOTE) ' GARCH_ARCH_PARAM_NOTE
    End If
  Next i

  alphas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + P + 1, 3)).Address(True, True)
  start = start + P + 1

  For i = 1 To P
    S(P + 2 + i, 1) = ChrW$(&H3B3&) & "[" & i & "]"
    S(P + 2 + i, 2) = "0"
    S(P + 2 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_LEVERAGE_PARAM_NOTE) ' GARCH_LEVERAGE_PARAM_NOTE
  Next i

  gammas = ""
  If P > 0 Then
    gammas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + P, 3)).Address(True, True)
    start = start + P
  End If

  betas = ""
  For i = 1 To Q
    S(2 + 2 * P + i, 1) = ChrW$(&H3B2&) & "[" & i & "]"
    S(2 + 2 * P + i, 2) = "0"
    S(2 + 2 * P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_GARCH_PARAM_NOTE) ' GARCH_GARCH_PARAM_NOTE
  Next i
    
  If Q > 0 Then
    betas = Range(myRange.Cells(start + 1, 3), myRange.Cells(start + Q, 3)).Address(True, True)
    start = start + Q
  End If
    
  nu = ""
  If Innovation > 1 Then
    S(Params, 1) = ChrW$(&H3BD&)
    S(Params, 2) = "5"
    S(Params, 3) = MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_DF_PARAM_NOTE) ' GARCH_DF_PARAM_NOTE
    
    nu = myRange.Cells(start + 1, 3).Address(True, True)
  End If
    
  For i = 1 To Params
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = S(i, 1)
      If .Comment Is Nothing Then
        .AddComment S(i, 3)
      Else
        .Comment.Text Text:=S(i, 3)
      End If
      .Comment.visible = False
    End With
    Call Super_Sub
    
    myRange.Cells(i + 2, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = S(i, 2)
      .NumberFormat = "0.00"
    End With
  Next i
    
  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=EGARCH(" & mean & "," & alphas & "," & gammas & "," & betas & "," & Innovation & "," & nu & ")")
  End With
End Sub



' Print the Goodness of fit function list
Public Sub PrintARCHGoodnessOfFit(InputRange As String, isAscending As Integer, model As Integer, P As Integer, Q As Integer, InnovationsType As Integer, parameters As Range, myRange As Range)
  Const sSOURCE As String = "PrintARCHGoodnessOfFit"
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
    myRange.Cells(1, 1).Select
    With Selection
        .HorizontalAlignment = xlLeft
        .Font.Bold = True
        .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
    End With

    ' Set the borderline
    Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With

    Dim mu As String
    Dim alphas As String
    Dim betas As String
    Dim gammas As String
    Dim lambda As String
    
    Dim modelParams As String
    Dim modelPrefix As String
    
    Dim LastIndex As Long
    
    
    mu = parameters.Cells(1, 1).Address(True, True)
    
    modelPrefix = "GARCH"
    
    modelParams = mu
    LastIndex = 1
    If model = 3 Then
        lambda = parameters.Cells(2, 1).Address(True, True)
        
        modelParams = modelParams & "," & lambda
        LastIndex = 2
        modelPrefix = "GARCHM"
    End If
    
    alphas = vbNullString
    If P > 0 Then
       alphas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + P + 1, 1)).Address(True, True)
       LastIndex = LastIndex + P + 1
    End If
    modelParams = modelParams & "," & alphas
    
    If model = 2 Then
        modelPrefix = "EGARCH"
        gammas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + P, 1)).Address(True, True)
        LastIndex = LastIndex + P
        modelParams = modelParams & "," & gammas
    End If
    
    betas = vbNullString
    If Q > 0 Then
       betas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + Q, 1)).Address(True, True)
       LastIndex = LastIndex + Q
    End If
    modelParams = modelParams & "," & betas
    
    If InnovationsType > 1 Then
        modelParams = modelParams & "," & InnovationsType
        modelParams = modelParams & "," & parameters.Cells(LastIndex + 1, 1).Address(True, True)
    End If
   
    myRange.Cells(2, 1).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) '"LLF"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
      End If
    End With
    
    myRange.Cells(3, 1).Select
    Selection.formula = "=" & modelPrefix & "_LLF(" & InputRange & "," & isAscending & "," & modelParams & ")"
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 2).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)  ' GOF_AIC_NOTE
      End If
      .Comment.visible = False
    End With
    
    myRange.Cells(3, 2).Select
    Selection.formula = "=" & modelPrefix & "_AIC(" & InputRange & "," & isAscending & "," & modelParams & ")"
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 3).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) '"CHECK"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_CHECK_NOTE) ' ARMA_CHECK_GOF_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARCH_OUTPUT_CHECK_NOTE)  ' ARMA_CHECK_GOF_NOTE
      End If
      .NumberFormat = "0"
      .Comment.visible = False
    End With
    
    myRange.Cells(3, 3).Select
    Selection.formula = "=" & modelPrefix & "_CHECK(" & modelParams & ")"

End Sub


' Print the Residual Diagnosis tests
Public Sub PrintARCHResidualDiagnosis(InputRange As String, isAscending As Integer, model As Integer, P As Integer, Q As Integer, InnovationsType As Integer, parameters As Range, significanceLevel As String, myRange As Range)
  Const sSOURCE As String = "PrintARCHResidualDiagnosis"
  
    Dim ResidualsEqn As String
    Dim XKURT As String
    Dim argList As String
    
    Dim modelPrefix As String
        
    argList = BuildARCHArgument(model, P, Q, parameters)
    modelPrefix = ARCHModelPrefix(model)
    
    XKURT = "0"
    If InnovationsType = 2 Then
        XKURT = "=TDIST_XKURT(" & parameters.End(xlDown).Address(True, True) & ")"
    End If
    
    If InnovationsType = 3 Then
        XKURT = "=GED_XKURT(" & parameters.End(xlDown).Address(True, True) & ")"
    End If
    
    ResidualsEqn = "RMNA(" & modelPrefix & "_RESID(" & InputRange & "," & isAscending & "," & argList & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, isAscending, P, Q, parameters, significanceLevel, XKURT, myRange)
End Sub


' Print the Goodness of fit function list
Private Function BuildARCHArgument(model As Integer, P As Integer, Q As Integer, parameters As Range)
  Const sSOURCE As String = "BuildARCHArgument"
  
    Dim mu As String
    Dim alphas As String
    Dim betas As String
    Dim lambda As String
    Dim gammas As String
    
    Dim modelParams As String
    
    modelParams = vbNullString
    
    Dim LastIndex As Long
    
    mu = parameters.Cells(1, 1).Address(True, True)
    
    modelParams = mu
    LastIndex = 1
    If model = 3 Then
        lambda = parameters.Cells(2, 1).Address(True, True)
        
        modelParams = modelParams & "," & lambda
        LastIndex = 2
    End If
    
    alphas = vbNullString
    If P > 0 Then
       alphas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + P + 1, 1)).Address(True, True)
       LastIndex = LastIndex + P + 1
    End If
    modelParams = modelParams & "," & alphas
    
    If model = 2 Then
        gammas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + P, 1)).Address(True, True)
        LastIndex = LastIndex + P
        modelParams = modelParams & "," & gammas
    End If
    
    betas = vbNullString
    If Q > 0 Then
       betas = Range(parameters.Cells(LastIndex + 1, 1), parameters.Cells(LastIndex + Q, 1)).Address(True, True)
       LastIndex = LastIndex + Q
    End If
    modelParams = modelParams & "," & betas
   
    BuildARCHArgument = modelParams
End Function


' Print the Goodness of fit function list
Private Function ARCHModelPrefix(model As Integer)
  Const sSOURCE As String = "ARCHModelPrefix"
  
    Dim modelPrefix As String
    
    modelPrefix = vbNullString
    
    modelPrefix = "GARCH"
    If model = 3 Then
        modelPrefix = "GARCHM"
    End If
    If model = 2 Then
        modelPrefix = "EGARCH"
    End If
   
    ARCHModelPrefix = modelPrefix
End Function


Public Sub printARCHModelOutput(myRange As Range)
  Const sSOURCE As String = "printARCHModelOutput"
  
  Dim numArgs As Long
  
  On Error GoTo ErrorHnadler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) Print the model Coefficient
  If Me.ARCHModel = ARCHModelType.GARCH Then
      Call PrintGARCHCoefficients(myRange, Me.P, Me.Q, Me.Innovation)
      numArgs = 2 + Me.P + Me.Q
  Else
      If Me.ARCHModel = ARCHModelType.EGARCH Then
          Call PrintEGARCHCoefficients(myRange, Me.P, Me.Q, Me.Innovation)
          numArgs = 2 + 2 * Me.P + Me.Q
      Else
          Call PrintGARCHMCoefficients(myRange, Me.P, Me.Q, Me.Innovation)
          numArgs = 3 + Me.P + Me.Q
      End If
  End If
  
  ' (2) Print the default values now
  If Me.GuessParameters Then
    Call PrintGARCHInitialParameter(myInputData, Me.ASCENDING, Me.P, Me.Q, Me.ARCHModel, Me.Innovation, myRange.Cells(3, 3))
  End If

  If Me.Innovation > InnovationType.Gaussian Then
     numArgs = numArgs + 1
  End If
  
  ' (3) Print the Goodness of fit to the mode
   Dim parameters As Object
   Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(3 + numArgs, 3))
    
  ' PrintARCHGoodnessOfFit(
  Dim nAscending As Integer
    
  nAscending = 1
  If Me.ASCENDING = False Then
    nAscending = 0
  End If
    
  ' Print the Goodness of fit
  If Me.includeGoodnessOfFit Then
    Call PrintARCHGoodnessOfFit(myInputData, nAscending, Me.ARCHModel, Me.P, Me.Q, Me.Innovation, parameters, myRange.Cells(1, 5))
  End If
  
  'Print the Residual Diagnosis test
  If Me.includeResidualDiagnosis Then
    If Me.includeGoodnessOfFit Then
      Call PrintARCHResidualDiagnosis(myInputData, nAscending, Me.ARCHModel, Me.P, Me.Q, Me.Innovation, parameters, Me.significance, myRange.Cells(1, 9))
    Else
      Call PrintARCHResidualDiagnosis(myInputData, nAscending, Me.ARCHModel, Me.P, Me.Q, Me.Innovation, parameters, Me.significance, myRange.Cells(1, 5))
    End If
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub
  
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "Error occured while preparing the ARCH model", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Attribute VB_Name = "ARCHTestFrm"
Attribute VB_Base = "0{36318A51-1B5D-4F6B-996B-5D761782B5C4}{421CD353-E542-4675-9334-1A8D878C093E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARCHTestFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARCHTestFrm.frm $
'
Private Const msMODULE As String = "USERFORM:ARCHTestFrm"
Private Const zenSlugId As String = "articles/216469823"

Private userOptions As ARCHTestUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub chkAscending_Click()
  myGeneralUO.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
  If callValidateForm = True Then
    Call validateForm
    txtEndLag.value = userOptions.MAX_LAG_ORDER
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtEndLag_Change()
  userOptions.MAX_LAG_ORDER = txtEndLag.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtStartLag_Change()
  userOptions.MAX_LAG_ORDER = txtStartLag.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub



Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_PG_OPTIONS_HELPTIP)
  
  LagOrderFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_LABEL)
  LagOrderFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_HELPTIP)
  
  startLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_LABEL)
  startLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_HELPTIP)
  txtStartLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_HELPTIP)
  
  maxLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_LABEL)
  maxLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_HELPTIP)
  txtEndLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New ARCHTestUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
    
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  ' Override the default treatment
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW
  
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  chkAscending.value = myGeneralUO.ASCENDING
  RefEditSignificanceLevel.value = myGeneralUO.significance
  txtStartLag.value = userOptions.MIN_LAG_ORDER
  txtEndLag.value = userOptions.MAX_LAG_ORDER
  
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = Utilities.isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  MVReplaceFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  MVINTERPOLATEFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
  
  RefEditSignificanceLevel.enabled = dataAvailable
  chkAscending.enabled = dataAvailable
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        If userOptions.MIN_LAG_ORDER <= userOptions.MAX_LAG_ORDER Then
          ready = valid_alpha
        End If
      End If
  End If
    
  cmdOK.enabled = ready
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)

End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR) ' "The time series range should be one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) ' "The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefOutput)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) '"Enter a valid output range."
          Exit Sub
        Else
          If RefEditSignificanceLevel.enabled Then
            If Not isAlphaValid(RefEditSignificanceLevel.value) Then
              MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) '"Only numbers between 0 and 50% are allowed."
              RefEditSignificanceLevel.value = vbNullString
              Exit Sub
            End If
          End If
          
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_STATUSBAR_CALCULATION_MSG) ' "ARCH Effect Test Calculation"
          
          Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "An error occured"
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "ARCHTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit

'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARCHTestUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARCHTestUO.cls $
'
Private Const msMODULE As String = "CLASS:ARCHTestUO"

Private myMinLags As Long
Private myMaxLags As Long


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

'ResetToDefault
Public Sub ResetToDefault()
  
  myMinLags = 1
  myMaxLags = 1
End Sub

Public Property Get MIN_LAG_ORDER() As Long
    MIN_LAG_ORDER = myMinLags
End Property

Public Property Let MIN_LAG_ORDER(ByVal vNewValue As Long)
  myMinLags = vNewValue
End Property

Public Property Get MAX_LAG_ORDER() As Long
    MAX_LAG_ORDER = myMaxLags
End Property

Public Property Let MAX_LAG_ORDER(ByVal vNewValue As Long)
  myMaxLags = vNewValue
End Property


Public Function calcMaxLags(ByRef inputData As GeneralUO) As Long
  Const sSOURCE As String = "calcMaxLags"
  
  Dim rng As Object
  If Len(inputData.INPUT_RANGE) > 0 Then
    Set rng = Range(inputData.INPUT_RANGE)
    
    calcMaxLags = CLng(Log(rng.Cells.count)) + 1
  End If
End Function



' Print the White-noise test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printNormalityTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim row As Long
  Dim szTemp As String
  
  ' Watch out for Locality differences
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_OUTPUT_TABLE_HEADER) ' "ARCH Effect Test"
  End With

  myRange.Cells(2, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_HEADER) ' "Lag"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE)
    End If
    .Comment.visible = False
  End With
  
  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER) ' "Score"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE)  ' HYPOTHESIS_TEST_SCORE_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) ' "C.V."
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE)  ' HYPOTHESIS_TEST_CV_NOTE
    End If
    .Comment.visible = False
  End With
  
  myRange.Cells(2, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE) ' HYPOTHESIS_TEST_PV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)  ' HYPOTHESIS_TEST_PV_NOTE
    End If
    .Comment.visible = False
  End With


  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PRESENT_HEADER) ' "Present?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_OUTPUT_PRESENT_TEST_NOTE) ' ARCH_TEST_PASS_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_OUTPUT_PRESENT_TEST_NOTE)  ' ARCH_TEST_PASS_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(2, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)
    End If
    .Comment.visible = False
  End With


  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With


  
  ' Iterate over the lags
  For i = Me.MIN_LAG_ORDER To Me.MAX_LAG_ORDER
    row = 3 + i - Me.MIN_LAG_ORDER
    myRange.Cells(row, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = i
    End With
  
    myRange.Cells(row, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=ARCHTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",2)"
      .NumberFormat = "#0.00"
    End With
  
  
    myRange.Cells(row, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=ARCHTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",3," & myRange.Cells(2, 6).Address() & ")"
      .NumberFormat = "#0.00"
    End With
  
  
    myRange.Cells(row, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=ARCHTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",1)"
      .NumberFormat = "#0.0%"
    End With
  
  
    szTemp = "=IF(" & myRange.Cells(row, 4).Address(RowAbsolute:=False) & "<" & myRange.Cells(2, 6).Address() & ", TRUE, FALSE)"
    
    myRange.Cells(row, 5).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTemp
    End With
  Next i

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "ARIMAMODEL"
Attribute VB_Base = "0{82E22AA3-1739-4FD1-9DF2-72F397A08243}{77E3E722-40BE-40A0-B30E-23247192D406}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARIMAMODEL.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARIMAMODEL.frm $
'
Private Const msMODULE As String = "USERFORM:ARIMAModel"
Private Const zenSlugId As String = "articles/216473443"

Private callValidateForm As Boolean
Private userOptions As ARIMAModelUO

Private Sub AROrder_Change()
  Const sSOURCE As String = "AROrder_Change"
  
  If IsNumeric(AROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      AROrder.value = vbNullString
    Else
        userOptions.P = AROrder.value
    End If
  Else
      If AROrder.value <> vbNullString And _
          AROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) '"Only numbers allowed."
        
        AROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub


Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim inRange As Object
  Dim NA As Boolean
  
  
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
  
  ' (1) Read the model coefficient
  userOptions.P = AROrder
  userOptions.Q = MAOrder
  userOptions.Integral = IntegralOrder
  
  Set inRange = Range(RefInputArray)
  If Not isTimeSeriesValid(inRange) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
    
  ' Set the output range now
  Set myRange = Range(RefOutputRange)
  If (myRange Is Nothing) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 50% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If

  'Make sure we have a valid model order
  If Not userOptions.isValidModel() Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_INVALID_ERROR) ' "Invalid model order."
      Exit Sub
  End If
      
  Call userOptions.printARIMAModelOutput(myRange)
    
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub IntegralOrder_Change()
  userOptions.Integral = IntegralOrder.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub



Private Sub optCalibrateParams_Click()
  userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optGuessParams_Click()
  userOptions.MODEL_PARAM_STATE = COEFF_GUESS
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
    
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGuessParams_Click()
  userOptions.GuessParameters = chkGuessParams.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub MAOrder_Change()
  Const sSOURCE As String = "MAOrder_Change"
  
  If IsNumeric(MAOrder.value) Then
    If MAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      MAOrder.value = vbNullString
    Else
        userOptions.Q = MAOrder.value
    End If
  Else
      If MAOrder.value <> vbNullString And _
          MAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        MAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub
Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub txtMaxIter_Change()
  userOptions.MAX_ITERATIONS = txtMaxIter.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_ARIMA_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  ModelSpecFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL)
  ModelSpecFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_SPEC_FRAME_HELPTIP)
  
  AROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_LABEL)
  AROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  AROrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  
  MAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_LABEL)
  MAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  MAOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  
  'IntegralOrderLabel
  IntegralOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_LABEL)
  IntegralOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  IntegralOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  
    
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  'OutputRangeFrameLabel
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  Set userOptions = New ARIMAModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    chkAscending.value = userOptions.ASCENDING
    AROrder.value = userOptions.P
    MAOrder.value = userOptions.Q
    
    optGuessParams.value = userOptions.MODEL_PARAM_STATE = COEFF_GUESS
    optCalibrateParams.value = userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
    txtMaxIter.value = userOptions.MAX_ITERATIONS
    IntegralOrder.value = userOptions.Integral
    
    chkGoodness.value = userOptions.includeGoodnessOfFit
    ChkDiagnosis.value = userOptions.includeResidualDiagnosis
    RefEditSignificanceLevel.value = userOptions.significance
    RefOutputRange.value = userOptions.OUTPUT_RANGE
  End If
  callValidateForm = True
  Call validateForm
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
    
    
    inputDataReady = Utilities.isCellRangeValid(RefInputArray.value)
    validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
        
    chkAscending.enabled = inputDataReady
    AROrder.enabled = inputDataReady
    MAOrder.enabled = inputDataReady
    IntegralOrder.enabled = inputDataReady
    
    If AROrder.enabled Then
      validModel = userOptions.isValidModel()
    Else
      validModel = False
    End If
    
    'chkGuessParams.Enabled = inputDataReady And validModel
    chkGoodness.enabled = inputDataReady And validModel
    
    
    optGuessParams.enabled = inputDataReady And validModel
    optCalibrateParams.enabled = inputDataReady And validModel
    
    txtMaxIter.enabled = inputDataReady And optCalibrateParams.enabled And optCalibrateParams.value
    maxIterTxtLabel.enabled = txtMaxIter.enabled
    
    RefEditSignificanceLevel.enabled = inputDataReady And validModel And userOptions.includeResidualDiagnosis
    
    ChkDiagnosis.enabled = inputDataReady And validModel
    
    RefOutputRange.enabled = inputDataReady And validModel
    
    ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)

    btnOK.enabled = ready
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "ARIMAModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit

'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARIMAModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARIMAModelUO.cls $
'
Private Const msMODULE As String = "CLASS:ARIMAModelUO"

Private myInputData As String
Private myAscending As Boolean
Private myOutputRange As String
Private mySignificanceLevel As String
Private myIntegral As Integer
Private myP As Integer
Private myQ As Integer
Private myModelParamsAction As MODEL_COEFF_STATE_TYPE
Private myMaxIteration As Long
Private myGoodnessFit As Boolean
Private myResidDiagnosis As Boolean

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property
Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get MODEL_PARAM_STATE() As MODEL_COEFF_STATE_TYPE
  MODEL_PARAM_STATE = myModelParamsAction
End Property

Public Property Let MODEL_PARAM_STATE(ByVal vNewValue As MODEL_COEFF_STATE_TYPE)
  myModelParamsAction = vNewValue
End Property

Public Property Get MAX_ITERATIONS() As Long
  MAX_ITERATIONS = myMaxIteration
End Property

Public Property Let MAX_ITERATIONS(ByVal vNewValue As Long)
  myMaxIteration = vNewValue
End Property

Public Property Get P() As Integer
  P = myP
End Property

Public Property Let P(ByVal vNewValue As Integer)
  myP = vNewValue
End Property

Public Property Get Q() As Integer
  Q = myQ
End Property

Public Property Let Q(ByVal vNewValue As Integer)
  myQ = vNewValue
End Property

'myIntegral
Public Property Get Integral() As Integer
  Integral = myIntegral
End Property

Public Property Let Integral(ByVal vNewValue As Integer)
  myIntegral = vNewValue
End Property


Public Property Get GuessParameters() As Boolean
  GuessParameters = myGuessParams
End Property

Public Property Let GuessParameters(ByVal vNewValue As Boolean)
  myGuessParams = vNewValue
End Property

Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property



Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property



Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  myInputData = ""
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myAscending = True
  
  myResidDiagnosis = True
  myGoodnessFit = True

  myModelParamsAction = COEFF_GUESS
  myMaxIteration = 100
  myIntegral = 1

  myP = 1
  myQ = 1
End Sub

Public Function isValidModel()
  isValidModel = (P >= 0 Or Q >= 0) And ((P + Q) > 0)
End Function


' Print the Parameters for the model
Public Sub PrintARIMACoefficients(myRange As Range, P As Integer, Q As Integer)
  Const sSOURCE As String = "PrintARMACoefficients"
  
  Dim start As Long
  Dim phis As String
  Dim thetas As String
  Dim mean As String
  Dim sigma As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "ARIMA(" & P & "," & myIntegral & "," & Q & ")"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
  
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
 
  start = 3
  mean = myRange.Cells(start, 3).Address(True, True)
  start = start + 1
  If P > 0 Then
    phis = Range(myRange.Cells(start, 3), myRange(start + P - 1, 3)).Address(True, True)
    start = start + P
  Else
    phis = ""
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start, 3), myRange(start + Q - 1, 3)).Address(True, True)
    start = start + Q
  Else
    thetas = ""
  End If
  
  sigma = myRange(start, 3).Address(True, True)
 
 
  ' (1) Display the Basic Statistics
  ReDim S(1 To (2 + P + Q), 3)
  S(1, 1) = ChrW$(&H3BC&)
  S(1, 2) = "0"
  S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE
  
  Dim i As Long
  
  For i = 1 To P
      S(1 + i, 1) = ChrW$(&H3C6&) & "[" & i & "]"
      S(1 + i, 2) = "0"
      S(1 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_AR_PARAM_NOTE) ' ARMA_AR_PARAM_NOTE
  Next i

  For i = 1 To Q
      S(1 + P + i, 1) = ChrW$(&H3B8&) & "[" & i & "]"
      S(1 + P + i, 2) = "0"
      S(1 + P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MA_PARAM_NOTE) ' ARMA_MA_PARAM_NOTE
  Next i
  
  ' Sigma of the model
  S(2 + P + Q, 1) = ChrW$(&H3C3&)
  S(2 + P + Q, 2) = "1"
  S(2 + P + Q, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
  
  For i = 1 To (2 + P + Q)
      ' Set tmpRange = Nothing
      myRange.Cells(i + 2, 2).Select
      With Selection
          .ClearComments
          .HorizontalAlignment = xlCenter
          .Font.Bold = True
          .value = S(i, 1)
          If .Comment Is Nothing Then
            .AddComment S(i, 3)
          Else
            .Comment.Text Text:=S(i, 3)
          End If
      End With
      Call Super_Sub
      
      myRange.Cells(i + 2, 3).Select
      With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = S(i, 2)
          .NumberFormat = "0.00"
      End With
  Next i
  
  ' leave a blank line, then print the integration order
  myRange.Cells(P + Q + 6, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "d"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE) ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE)  ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      End If
  End With
  Call Super_Sub
  
  myRange.Cells(P + Q + 6, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = myIntegral
      .NumberFormat = "0"
  End With
  
  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=ARIMA(" & myIntegral & "," & mean & "," & sigma & "," & phis & "," & thetas & ")")
  End With
End Sub

' Print the model initial parameters
Public Sub PrintARIMAInitialParameter(InputRange As String, ASCENDING As Boolean, ByVal d As Double, phis As String, thetas As String, myRange As Range)
    Range(myRange.Cells(1, 1), myRange.Cells(2 + P + Q, 1)) = vb_ARIMAGUESS(InputRange, ASCENDING, d, phis, thetas)
End Sub

Public Sub PrintARIMACalibratedParameter(InputRange As String, ASCENDING As Boolean, ByVal mean As Double, ByVal sigma As Double, ByVal d As Integer, phis As String, thetas As String, maxIter As Long, myRange As Range)
    Range(myRange.Cells(1, 1), myRange.Cells(2 + P + Q, 1)) = vb_ARIMACALIBRATE(InputRange, ASCENDING, mean, sigma, d, phis, thetas, maxIter)
End Sub

' Print the Goodness of fit function list
Public Sub PrintARIMAGoodnessOfFit(myRange As Range, P As Integer, Q As Integer, parameters As Range, InputRange As String, ASCENDING As Boolean)
  Const sSOURCE As String = "PrintARIMAGoodnessOfFit"
  
  Dim nAscending As Integer

  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  Dim phis As String
  Dim thetas As String
    
    phis = vbNullString
    If P > 0 Then
      phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    Else
      phis = ""
    End If
    
    thetas = vbNullString
    If Q > 0 Then
      thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    Else
      thetas = ""
    End If
    
    
    myRange.Cells(2, 1).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) '"LLF"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
      End If
      .Comment.visible = False
    End With
   
    myRange.Cells(3, 1).Select
    Selection.formula = "=ARIMA_GOF(" & InputRange & "," & _
                                        nAscending & "," & _
                                        parameters.Cells(4 + P + Q, 1).Address(True, True) & "," & _
                                        parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(P + Q + 2, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        1 & ")"
                                        
                                        
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 2).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
      End If
      .Comment.visible = False
    End With
    
    myRange.Cells(3, 2).Select
    Selection.formula = "=ARIMA_GOF(" & InputRange & "," & _
                                        nAscending & "," & _
                                        parameters.Cells(4 + P + Q, 1).Address(True, True) & "," & _
                                        parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(P + Q + 2, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        2 & ")"
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 3).Select
    With Selection
      .ClearComments
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) '"CHECK"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE)  ' ARMA_CHECK_GOF_NOTE
      End If
      .Comment.visible = False
    End With
    
    myRange.Cells(3, 3).Select
    Selection.formula = "=ARIMA_CHECK(" & _
                                        parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(P + Q + 2, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"

    Selection.NumberFormat = "0"
End Sub

' Print the Residual Diagnosis tests
Public Sub PrintARIMAResidualDiagnosis(InputRange As String, ASCENDING As Boolean, P As Integer, Q As Integer, parameters As Range, significanceLevel As String, myRange As Range)
  Const sSOURCE As String = "PrintARMAResidualDiagnosis"
  
    Dim ResidualsEqn As String
    Dim XKURT As String
    Dim phis As String
    Dim thetas As String
    Dim nAscending As Integer
    
    
    phis = vbNullString
    If P > 0 Then
      phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    Else
      phis = ""
    End If
    
    thetas = vbNullString
    If Q > 0 Then
      thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    Else
      thetas = ""
    End If
    
    nAscending = 0
    If ASCENDING = True Then
       nAscending = 1
    End If
    
    XKURT = "0"
    ResidualsEqn = "RMNA(ARIMA_FIT(" & InputRange & "," & nAscending & "," & _
                                        parameters.Cells(4 + P + Q, 1).Address(True, True) & "," & _
                                        parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(P + Q + 2, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        FIT_STD_RESID & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, significanceLevel, XKURT, myRange)
End Sub


Public Sub printARIMAModelOutput(myRange As Range)
  Const sSOURCE As String = "printARIMAModelOutput"
  
  Dim parameters As Object
  Dim phis As String
  Dim thetas As String
  
  On Error GoTo ErrorHnadler
  
  ' (2) Print the model Coefficient
  Call PrintARIMACoefficients(myRange, myP, myQ)

  
  ' (3) Print the goodness of fit analytics
  If myP > 0 Then
    phis = Range(myRange.Cells(3, 3), myRange.Cells(2 + myP, 3)).Address(True, True)
  Else
    phis = ""
  End If
  
  If myQ > 0 Then
    thetas = Range(myRange.Cells(4 + myP, 3), myRange.Cells(3 + myP + myQ, 3)).Address(True, True)
  Else
    thetas = ""
  End If
  
  Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(3 + (myP + myQ + 2), 3))
  
  ' (3.5) Print the default model coefficient
  If myModelParamsAction = COEFF_GUESS Then
    Call PrintARIMAInitialParameter(myInputData, myAscending, Integral, phis, thetas, parameters.Cells(1, 1))
  Else
    Call PrintARIMACalibratedParameter(myInputData, myAscending, 0#, 1#, Integral, phis, thetas, MAX_ITERATIONS, parameters.Cells(1, 1))
  End If


  ' (4) Print the goodness of fit function
  If Me.includeGoodnessOfFit Then
    Call PrintARIMAGoodnessOfFit(myRange.Cells(1, 5), myP, myQ, parameters, myInputData, myAscending)
  End If


  ' (5) Print the residual diagnosis test
  If Me.includeResidualDiagnosis Then
    If Me.includeGoodnessOfFit Then
      Call PrintARIMAResidualDiagnosis(myInputData, Me.ASCENDING, Me.P, Me.Q, parameters, Me.significance, myRange.Cells(1, 9))
    Else
      Call PrintARIMAResidualDiagnosis(myInputData, Me.ASCENDING, Me.P, Me.Q, parameters, Me.significance, myRange.Cells(1, 5))
    End If
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the ARIMA model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub
Attribute VB_Name = "ARMAMODEL"
Attribute VB_Base = "0{998E16ED-4F54-4CA7-8B4B-9B24A32A58F4}{43928A86-2C91-4943-8D26-9F4A45EBD02C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARMAMODEL.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARMAMODEL.frm $
'
Private Const msMODULE As String = "USERFORM:ARMAModel"
Private Const zenSlugId As String = "articles/216474003"

Private callValidateForm As Boolean
Private userOptions As ARMAModelUO

Private Sub AROrder_Change()
  Const sSOURCE As String = "AROrder_Change"
  
  If IsNumeric(AROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      AROrder.value = vbNullString
    Else
        userOptions.P = AROrder.value
    End If
  Else
      If AROrder.value <> vbNullString And _
          AROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        AROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim inRange As Object
  Dim NA As Boolean
  
  
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
  
  ' (1) Read the model coefficient
  userOptions.P = AROrder
  userOptions.Q = MAOrder
    
  Set inRange = Range(RefInputArray)
  If Not isTimeSeriesValid(inRange) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
    
  ' Set the output range now
  Set myRange = Range(RefOutputRange)
  If (myRange Is Nothing) Then
    'MsgBox "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If

  'Make sure we have a valid model order
  If Not userOptions.isValidModel() Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_INVALID_ERROR) ' "Invalid model order."
      Exit Sub
  End If
      
  Call userOptions.printARMAModelOutput(myRange)
    
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
    
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGuessParams_Click()
  userOptions.GuessParameters = chkGuessParams.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub MAOrder_Change()
  Const sSOURCE As String = "MAOrder_Change"
  
  If IsNumeric(MAOrder.value) Then
    If MAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      MAOrder.value = vbNullString
    Else
        userOptions.Q = MAOrder.value
    End If
  Else
      If MAOrder.value <> vbNullString And _
          MAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        MAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub
Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  ModelSpecFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL)
  ModelSpecFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_SPEC_FRAME_HELPTIP)
  
  AROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_LABEL)
  AROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  
  MAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_LABEL)
  MAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)

  chkGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  chkGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  Set userOptions = New ARMAModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    chkAscending.value = userOptions.ASCENDING
    AROrder.value = userOptions.P
    MAOrder.value = userOptions.Q
    chkGuessParams.value = userOptions.GuessParameters
    chkGoodness.value = userOptions.includeGoodnessOfFit
    ChkDiagnosis.value = userOptions.includeResidualDiagnosis
    RefEditSignificanceLevel.value = userOptions.significance
    RefOutputRange.value = userOptions.OUTPUT_RANGE
  End If
  callValidateForm = True
  Call validateForm
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
    
    
    inputDataReady = Utilities.isCellRangeValid(RefInputArray.value)
    validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
        
    chkAscending.enabled = inputDataReady
    AROrder.enabled = inputDataReady
    MAOrder.enabled = inputDataReady
    
    If AROrder.enabled Then
      validModel = userOptions.isValidModel()
    Else
      validModel = False
    End If
    
    chkGuessParams.enabled = inputDataReady And validModel
    chkGoodness.enabled = inputDataReady And validModel
    
    RefEditSignificanceLevel.enabled = inputDataReady And validModel And userOptions.includeResidualDiagnosis
    
    ChkDiagnosis.enabled = inputDataReady And validModel
    
    RefOutputRange.enabled = inputDataReady And validModel
    
    ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)

    btnOK.enabled = ready
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "ARMAModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARMAModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARMAModelUO.cls $
'
Private Const msMODULE As String = "CLASS:ARMAModelUO"

Private myInputData As String
Private myAscending As Boolean
Private myOutputRange As String
Private mySignificanceLevel As String
Private myP As Integer
Private myQ As Integer
Private myGuessParams As Boolean
Private myGoodnessFit As Boolean
Private myResidDiagnosis As Boolean

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property
Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property



Public Property Get P() As Integer
  P = myP
End Property

Public Property Let P(ByVal vNewValue As Integer)
  myP = vNewValue
End Property

Public Property Get Q() As Integer
  Q = myQ
End Property

Public Property Let Q(ByVal vNewValue As Integer)
  myQ = vNewValue
End Property

Public Property Get GuessParameters() As Boolean
  GuessParameters = myGuessParams
End Property

Public Property Let GuessParameters(ByVal vNewValue As Boolean)
  myGuessParams = vNewValue
End Property

Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property



Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property



Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  myInputData = ""
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myAscending = True
  
  myResidDiagnosis = True
  myGoodnessFit = True
  myGuessParams = True

  myP = 1
  myQ = 1
End Sub

Public Function isValidModel()
  isValidModel = (P >= 0 Or Q >= 0) And ((P + Q) > 0)
End Function


' Print the Parameters for the model
Public Sub PrintARMACoefficients(myRange As Range, P As Integer, Q As Integer)
  Const sSOURCE As String = "PrintARMACoefficients"
  
  Dim start As Long
  Dim phis As String
  Dim thetas As String
  Dim mean As String
  Dim sigma As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "ARMA(" & P & "," & Q & ")"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
  
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    
    
  ' (1) Display the Basic Statistics
  ReDim S(1 To (2 + P + Q), 3)
  S(1, 1) = ChrW$(&H3BC&)
  S(1, 2) = "0"
  S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE
  
  Dim i As Long
  
  For i = 1 To P
      S(1 + i, 1) = ChrW$(&H3C6&) & "[" & i & "]"
      S(1 + i, 2) = "0"
      S(1 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_AR_PARAM_NOTE) ' ARMA_AR_PARAM_NOTE
  Next i

  For i = 1 To Q
      S(1 + P + i, 1) = ChrW$(&H3B8&) & "[" & i & "]"
      S(1 + P + i, 2) = "0"
      S(1 + P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MA_PARAM_NOTE) ' ARMA_AR_PARAM_NOTE
  Next i
  
  ' Sigma of the model
  S(2 + P + Q, 1) = ChrW$(&H3C3&)
  S(2 + P + Q, 2) = "1"
  S(2 + P + Q, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
  
  start = 3
  mean = myRange.Cells(start, 3).Address(True, True)
  start = start + 1
  If P > 0 Then
    phis = Range(myRange.Cells(start, 3), myRange(start + P - 1, 3)).Address(True, True)
    start = start + P
  Else
    phis = ""
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start, 3), myRange(start + Q - 1, 3)).Address(True, True)
    start = start + Q
  Else
    thetas = ""
  End If
  
  sigma = myRange(start, 3).Address(True, True)
  
  For i = 1 To (2 + P + Q)
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = S(i, 1)
        If .Comment Is Nothing Then
          .AddComment S(i, 3)
        Else
          .Comment.Text Text:=S(i, 3)
        End If
        .Comment.visible = False
    End With
    Call Super_Sub
    
    myRange.Cells(i + 2, 3).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = S(i, 2)
        .NumberFormat = "0.00"
    End With
  Next i
  
  myRange.Cells(1, 1).Select
  With Selection
      .formula = ("=ARMA(" & mean & "," & sigma & "," & phis & "," & thetas & ")")
  End With
  
  
End Sub

' Print the model initial parameters
Public Sub PrintARMAInitialParameter(InputRange As String, ASCENDING As Boolean, P As Integer, Q As Integer, myRange As Range)
    
    Range(myRange.Cells(1, 1), myRange.Cells(2 + P + Q, 1)) = vb_ARMAGUESS(InputRange, ASCENDING, P, Q)
End Sub



' Print the Goodness of fit function list
Public Sub PrintARMAGoodnessOfFit(myRange As Range, P As Integer, Q As Integer, parameters As Range, InputRange As String, ASCENDING As Boolean)
  Const sSOURCE As String = "PrintARMAGoodnessOfFit"
  
  Dim nAscending As Integer

  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  Dim phis As String
  Dim thetas As String
    
    phis = vbNullString
    If P > 0 Then
       phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    End If
    
    thetas = vbNullString
    If Q > 0 Then
       thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    End If
    
    
    myRange.Cells(2, 1).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
    Selection.ClearComments
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
    End If
    Selection.Comment.visible = False
   
    myRange.Cells(3, 1).Select
    Selection.formula = "=ARMA_LLF(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
                                        
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 2).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
    Selection.ClearComments
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)  ' GOF_AIC_NOTE
    End If
    Selection.Comment.visible = False
    
    
    myRange.Cells(3, 2).Select
    Selection.formula = "=ARMA_AIC(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 3).Select
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
    Selection.ClearComments
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE)  ' ARMA_CHECK_GOF_NOTE
    End If
    Selection.Comment.visible = False
    
    
    myRange.Cells(3, 3).Select
    Selection.formula = "=ARMA_CHECK(" & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
    Selection.NumberFormat = "0."
End Sub

' Print the Residual Diagnosis tests
Public Sub PrintARMAResidualDiagnosis(InputRange As String, ASCENDING As Boolean, P As Integer, Q As Integer, parameters As Range, significanceLevel As String, myRange As Range)
  Const sSOURCE As String = "PrintARMAResidualDiagnosis"
  
    Dim ResidualsEqn As String
    Dim XKURT As String
    Dim phis As String
    Dim thetas As String
    Dim nAscending As Integer
    
    
    phis = vbNullString
    If P > 0 Then
       phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    End If
    
    thetas = vbNullString
    If Q > 0 Then
       thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    End If
    
    nAscending = 0
    If ASCENDING = True Then
       nAscending = 1
    End If
    
    XKURT = "0"
    ResidualsEqn = "RMNA(ARMA_RESID(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, significanceLevel, XKURT, myRange)
End Sub


Public Sub printARMAModelOutput(myRange As Range)
  Const sSOURCE As String = "printARMAModelOutput"
  
  Dim parameters As Object
  
  On Error GoTo ErrorHnadler
  
  ' (2) Print the model Coefficient
  Call PrintARMACoefficients(myRange, myP, myQ)

  ' (3) Print the goodness of fit analytics
  Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(3 + (myP + myQ + 2), 3))
  
  ' (3.5) Print the default model coefficient
  If Me.GuessParameters Then
    Call PrintARMAInitialParameter(myInputData, myAscending, myP, myQ, parameters.Cells(1, 1))
  End If

  ' (4) Print the goodness of fit function
  If Me.includeGoodnessOfFit Then
    Call PrintARMAGoodnessOfFit(myRange.Cells(1, 5), myP, myQ, parameters, myInputData, myAscending)
  End If

  ' (5) Print the residual diagnosis test
  If Me.includeResidualDiagnosis Then
    If Me.includeGoodnessOfFit Then
      Call PrintARMAResidualDiagnosis(myInputData, Me.ASCENDING, Me.P, Me.Q, parameters, Me.significance, myRange.Cells(1, 9))
    Else
      Call PrintARMAResidualDiagnosis(myInputData, Me.ASCENDING, Me.P, Me.Q, parameters, Me.significance, myRange.Cells(1, 5))
    End If
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub
Attribute VB_Name = "ARMAXMODEL"
Attribute VB_Base = "0{FC51A08C-1488-4717-A1D3-DEEE81B9FF47}{3D7DF7EB-EFEB-49EF-8FE9-9C0DAC0068BE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARMAXMODEL.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARMAXMODEL.frm $
'
Private Const msMODULE As String = "USERFORM:ARMAX"
Private Const zenSlugId As String = "articles/215105966"

Private callValidateForm As Boolean
Private userOptions As ARMAXModelUO



Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
 
  Me.MultiPage1.Pages("GeneralPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("GeneralPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMAX_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  InputFactorsDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUT_FACTORS_DATA_LABEL_CAPTION)
  InputFactorsDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUT_FACTORS_DATA_LABEL_HELPTIP)
  RefFactors.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUT_FACTORS_DATA_LABEL_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Model Tab
  Me.MultiPage1.Pages("ModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_PAGE_CAPTION)
  Me.MultiPage1.Pages("ModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMAX_MODEL_PAGE_HELPTIP)
  
  NonseasonalHeaderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_LABEL)
  NonseasonalHeaderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_HELPTIP)
  
  AROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_LABEL)
  AROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  AROrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  
  MAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_LABEL)
  MAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  MAOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  
  'IntegralOrderLabel
  IntegralOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_LABEL)
  IntegralOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  IntOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  
  chkSeasonal.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_LABEL)
  chkSeasonal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_HELPTIP)
  
  SPeriodLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_LABEL)
  SPeriodLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_HELPTIP)
  SPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_HELPTIP)
  
  SIntegralOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_LABEL)
  SIntegralOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_HELPTIP)
  SIntOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_HELPTIP)
  
  SAROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_LABEL)
  SAROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
  SAROrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
  
  SMAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_MA_LABEL)
  SMAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_MA_HELPTIP)
  SMAOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_MA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARCH_TEST_PG_OPTIONS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  Set userOptions = New ARMAXModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    ' Page 1: General
    chkAscending.value = userOptions.mySARIMAModel.ASCENDING
    RefOutput.value = userOptions.mySARIMAModel.OUTPUT_RANGE
    
    ' Page 2: Model
    chkSeasonal.value = userOptions.Seasonal
    
    AROrder.value = userOptions.mySARIMAModel.P
    MAOrder.value = userOptions.mySARIMAModel.Q
    IntOrder.value = userOptions.mySARIMAModel.Integral
    
    SPeriod.value = userOptions.mySARIMAModel.SPeriod
    SAROrder.value = userOptions.mySARIMAModel.SP
    SMAOrder.value = userOptions.mySARIMAModel.SQ
    SIntOrder.value = userOptions.mySARIMAModel.SIntegral
    
    ' Page 3: Options
    RefEditSignificanceLevel.value = userOptions.mySARIMAModel.significance
    
    optGuessParams.value = userOptions.mySARIMAModel.MODEL_PARAM_STATE = COEFF_GUESS
    optCalibrateParams.value = userOptions.mySARIMAModel.MODEL_PARAM_STATE = COEFF_CALIBRATE
    txtMaxIter.value = userOptions.mySARIMAModel.MAX_ITERATIONS
    
    chkGoodness.value = userOptions.mySARIMAModel.includeGoodnessOfFit
    ChkDiagnosis.value = userOptions.mySARIMAModel.includeResidualDiagnosis
    
  End If
  callValidateForm = True
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  RefInputArray.SetFocus
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
  Dim validAlpha As Boolean

  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value) And _
                  Utilities.isCellRangeValid(RefFactors.value)
  
  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("ModelPg").enabled = dataAvailable
  
  chkAscending.enabled = dataAvailable
  chkSeasonal.enabled = dataAvailable
  
  AROrder.enabled = dataAvailable
  MAOrder.enabled = dataAvailable
  IntOrder.enabled = dataAvailable
    
  SAROrder.enabled = dataAvailable And userOptions.Seasonal
  SMAOrder.enabled = dataAvailable And userOptions.Seasonal
  SIntOrder.enabled = dataAvailable And userOptions.Seasonal
  SPeriod.enabled = dataAvailable And userOptions.Seasonal
  
    
  validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
  chkGoodness.enabled = dataAvailable
    
  optGuessParams.enabled = dataAvailable
  optCalibrateParams.enabled = dataAvailable
    
  txtMaxIter.enabled = dataAvailable And optCalibrateParams.enabled And optCalibrateParams.value
  maxIterTxtLabel.enabled = txtMaxIter.enabled
    
  RefEditSignificanceLevel.enabled = dataAvailable And userOptions.mySARIMAModel.includeResidualDiagnosis
  ChkDiagnosis.enabled = dataAvailable
  RefOutput.enabled = dataAvailable
    
  btnOK.enabled = RefOutput.enabled And Utilities.isCellRangeValid(RefOutput.value)
End Sub


Private Sub chkAscending_Click()
    userOptions.mySARIMAModel.ASCENDING = chkAscending.value
    
End Sub

Private Sub chkSeasonal_Click()
  userOptions.Seasonal = chkSeasonal.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub ChkDiagnosis_Click()
  userOptions.mySARIMAModel.includeResidualDiagnosis = ChkDiagnosis.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGoodness_Click()
  userOptions.mySARIMAModel.includeGoodnessOfFit = chkGoodness.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub optGuessParams_Click()
  userOptions.mySARIMAModel.GuessParameters = optGuessParams.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub optCalibrateParams_Click()
  userOptions.mySARIMAModel.MODEL_PARAM_STATE = COEFF_CALIBRATE
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub


Private Sub AROrder_Change()
  Const sSOURCE As String = "AROrder_Change"
  
  If IsNumeric(AROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      AROrder.value = vbNullString
    Else
        userOptions.mySARIMAModel.P = AROrder.value
    End If
  Else
      If AROrder.value <> vbNullString And _
          AROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        AROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub

Private Sub IntOrder_Change()
  userOptions.mySARIMAModel.Integral = IntOrder.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub SIntOrder_Change()
  userOptions.mySARIMAModel.SIntegral = SIntOrder.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub SPeriod_Change()
  userOptions.mySARIMAModel.SPeriod = SPeriod.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub SAROrder_Change()
  Const sSOURCE As String = "SAROrder_Change"
  
  If IsNumeric(SAROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      SAROrder.value = vbNullString
    Else
        userOptions.mySARIMAModel.SP = SAROrder.value
    End If
  Else
      If SAROrder.value <> vbNullString And _
          SAROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        SAROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub


Private Sub MAOrder_Change()
  Const sSOURCE As String = "MAOrder_Change"
  
  If IsNumeric(MAOrder.value) Then
    If MAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      MAOrder.value = vbNullString
    Else
        userOptions.mySARIMAModel.Q = MAOrder.value
    End If
  Else
      If MAOrder.value <> vbNullString And _
          MAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        MAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub SMAOrder_Change()
  Const sSOURCE As String = "SMAOrder_Change"
  
  If IsNumeric(SMAOrder.value) Then
    If SMAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      SMAOrder.value = vbNullString
    Else
        userOptions.mySARIMAModel.Q = SMAOrder.value
    End If
  Else
      If SMAOrder.value <> vbNullString And _
          SMAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        SMAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub RefInputArray_Change()
  userOptions.mySARIMAModel.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefFactors_Change()
  userOptions.FACTORS_RANGE = Utilities.procInputCellsRange(RefFactors.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub



Private Sub RefOutput_Change()
  userOptions.mySARIMAModel.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub
Private Sub RefEditSignificanceLevel_Change()
  userOptions.mySARIMAModel.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub txtMaxIter_Change()
  userOptions.mySARIMAModel.MAX_ITERATIONS = txtMaxIter.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim inRange As Object
  
  Dim myXRange  As Object
  Dim myYRange  As Object
  Dim NA As Boolean
  
  
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
  
    ' Basic check for X1 range
  Set myXRange = Range(RefFactors)
  If myXRange Is Nothing Then
    ' MsgBox "Invalid/Missing cells range for the explanatory variables (X)"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INVALID_FACTORS_RANGE_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    
    Exit Sub
  End If
    
  If myXRange.columns.count < 1 Then
    ' MsgBox "Invalid  cells range for the explanatory variables (X)\n The X-range must have one or more variables"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    
    Exit Sub
  End If
  
  If myXRange.columns.count >= myXRange.rows.count Then
    ' MsgBox "Invalid  cells range for the explanatory variables (X).\ The number of rows (observations) must be greater than number of columns (variables)"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_OBS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    ' MsgBox "Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_NOT_NUMBERS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If


  Set myYRange = Range(RefInputArray)
  If myYRange Is Nothing Then
    ' MsgBox "Invalid/missing cells range for the dependent/response variable (Y)."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_MISSING_INVALID_RANGE_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If
  
  If myYRange.columns.count > 1 Then
    ' MsgBox "Invalid cells range for the dependent/response variable(Y).\n The range should have only one column."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_ONE_COLUMN_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If
  
  If myYRange.rows.count <> myXRange.rows.count Then
    ' MsgBox "Invalid  cells range for the dependent/response variable (Y).\n The number of observation in Y must match number of observations in X."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_DEPENDENT_ROWS_MISMATCH_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    
    Exit Sub
  End If
  
  If Not isTimeSeriesValid(myYRange) Then
    ' MsgBox "Invalid cells range for the dependent/response variable (Y).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_NOT_NUMBERS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myYRange, NA) Then
    ' MsgBox "Invalid cells range for the response time series variable (Y).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_NOT_NUMBERS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If
    
  ' Set the output range now
  Set myRange = Range(RefOutput)
  If (myRange Is Nothing) Then
    ' MsgBox "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      ' MsgBox "Only numbers between 0 and 50% are allowed."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR), vbOKOnly + vbCritical, _
             MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
      
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
      
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_ARMAX_STATUSBAR_CALCULATION_MSG) ' "ARMAX/SARIMAX Modeling..."
      
      
  Call userOptions.printModelOutput(myRange)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' MsgBox "Error occured while preparing the model", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARMAX_OUTPUT_ERROR_MSG), vbOKOnly + vbCritical, _
         MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
  Resume Cleanup
End Sub



Private Sub btnCancel_Click()
  Unload Me
End Sub


Attribute VB_Name = "ARMAXModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ARMAXModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ARMAXModelUO.cls $
'
Private Const msMODULE As String = "CLASS:ARMAXModelUO"

Private myIncludeSeasonal As Boolean
Private myFactorsData As String

Private mySeasonality As Boolean
Public mySARIMAModel As SARIMAModelUO


Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  Set mySARIMAModel = New SARIMAModelUO
  
  mySARIMAModel.P = 1
  mySARIMAModel.Integral = 0
  mySARIMAModel.Q = 1
  
  myIncludeSeasonal = False
  myFactorsData = vbNullString
End Sub

Private Sub Class_Terminate()
  Set mySARIMAModel = Nothing
End Sub

Public Property Get Seasonal() As Boolean
  Seasonal = myIncludeSeasonal
End Property

Public Property Let Seasonal(ByVal vNewValue As Boolean)
  myIncludeSeasonal = vNewValue
End Property

Public Property Get FACTORS_RANGE() As String
  FACTORS_RANGE = myFactorsData
End Property

Public Property Let FACTORS_RANGE(ByVal vNewValue As String)
  myFactorsData = vNewValue
End Property

Public Property Get P() As Integer
  P = mySARIMAModel.P
End Property

Public Property Let P(ByVal vNewValue As Integer)
  mySARIMAModel.P = vNewValue
End Property

Public Property Get SP() As Integer
  SP = mySARIMAModel.SP
End Property

Public Property Let SP(ByVal vNewValue As Integer)
  mySARIMAModel.SP = vNewValue
End Property


Public Property Get Q() As Integer
  Q = mySARIMAModel.Q
End Property

Public Property Let Q(ByVal vNewValue As Integer)
  mySARIMAModel.Q = vNewValue
End Property

Public Property Get SQ() As Integer
  SQ = mySARIMAModel.SQ
End Property

Public Property Let SQ(ByVal vNewValue As Integer)
  mySARIMAModel.SQ = vNewValue
End Property


Public Property Get Integral() As Integer
  Integral = mySARIMAModel.Integral
End Property

Public Property Let Integral(ByVal vNewValue As Integer)
  mySARIMAModel.Integral = vNewValue
End Property

Public Property Get SIntegral() As Integer
  SIntegral = mySARIMAModel.SIntegral
End Property

Public Property Let SIntegral(ByVal vNewValue As Integer)
  mySARIMAModel.SIntegral = vNewValue
End Property

Public Property Get SPeriod() As Integer
  SPeriod = mySARIMAModel.SPeriod
End Property

Public Property Let SPeriod(ByVal vNewValue As Integer)
  mySARIMAModel.SPeriod = vNewValue
End Property


Public Sub printModelOutput(myRange As Range)
  Const sSOURCE As String = "printModelOutput"
  
  Dim parameters As Object
  Dim myXRange As Object
  Dim paramLen As Long
  Dim numXVars As Long
  
  On Error GoTo ErrorHnadler
  
  paramLen = 0
  
  Set myXRange = Range(Me.FACTORS_RANGE)
  If myXRange Is Nothing Then
    'MsgBox "Invalid/Missing cells range for the explanatory variables (X)"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INVALID_FACTORS_RANGE_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    
    Exit Sub
  End If
    
  numXVars = myXRange.columns.count
  
  If numXVars < 1 Then
    ' MsgBox "Invalid  cells range for the explanatory variables (X)\n The X-range must have one or more variables"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_ERROR_MSG), vbOKOnly + vbCritical, _
           MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
    Exit Sub
  Else
    paramLen = paramLen + numXVars
  End If

  ' Now, do we have ARMA or SARIMA ?
  If Me.Seasonal And Me.mySARIMAModel.SPeriod > 0 And Me.mySARIMAModel.SIntegral > 0 Then
    paramLen = paramLen + 1     ' For the mean
    
    paramLen = paramLen + Me.mySARIMAModel.SP + Me.mySARIMAModel.SQ
  End If
  
  paramLen = paramLen + Me.mySARIMAModel.P + Me.mySARIMAModel.Q
  paramLen = paramLen + 1     ' For the standard deviation
  
  ' (2) Print the model Coefficient
  If Seasonal Then
    Call PrintSARIMAXCoefficients(myRange, numXVars)
  Else
    Call PrintARMAXCoefficients(myRange, numXVars)
  End If

  ' (3) Print the goodness of fit analytics
  Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(3 + paramLen, 3))

  Dim mode As MODEL_COEFF_STATE_TYPE
  
  mode = mySARIMAModel.MODEL_PARAM_STATE
  
  ' (3.5) Print the default model coefficient
  If Seasonal Then
    Call PrintSARIMAXInitialParameter(parameters.Cells(1, 1), numXVars, mode)
  Else
    Call PrintARMAXInitialParameter(parameters.Cells(1, 1), numXVars, mode)
  End If


  ' (4) Print the goodness of fit function
  If Me.mySARIMAModel.includeGoodnessOfFit Then
    If Me.Seasonal Then
      Call PrintSARIMAXGoodnessOfFit(parameters, numXVars, myRange.Cells(1, 5))
    Else
      Call PrintARMAXGoodnessOfFit(parameters, numXVars, myRange.Cells(1, 5))
    End If
  End If
 
  ' (5) Print the residual diagnosis test
  If Me.mySARIMAModel.includeResidualDiagnosis Then
    If Seasonal Then
      Call PrintSARIMAXResidualDiagnosis(parameters, numXVars, IIf(Me.mySARIMAModel.includeGoodnessOfFit, myRange.Cells(1, 9), myRange.Cells(1, 5)))
    Else
      Call PrintARMAXResidualDiagnosis(parameters, numXVars, IIf(Me.mySARIMAModel.includeGoodnessOfFit, myRange.Cells(1, 9), myRange.Cells(1, 5)))
    End If
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' MsgBox "Error occured while preparing the ARMA model", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_ARMAX_OUTPUT_ERROR_MSG), vbOKOnly + vbCritical, _
         MSGAPI.getLocaleString(IDS_UI_ARMAX_FRM_CAPTION)
  
  Resume Cleanup
End Sub

 
Private Sub PrintARMAXCoefficients(myRange As Range, ByVal numXVars As Long)
  Const sSOURCE As String = "PrintARMAXCoefficients"
  
  Dim start As Long
  Dim i As Long
  
  Dim lbetas As String
  Dim lphis As String
  Dim lthetas As String
  Dim lmean As String
  Dim lsigma As String
  
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "ARMAX(" & P & "," & Q & ")"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
    
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    
  start = 3
  lmean = myRange.Cells(start, 3).Address(True, True)
  start = start + 1
  If numXVars > 0 Then
    lbetas = Range(myRange.Cells(start, 3), myRange(start + numXVars - 1, 3)).Address(True, True)
    start = start + numXVars
  Else
    lbetas = ""
  End If
  
  If P > 0 Then
    lphis = Range(myRange.Cells(start, 3), myRange(start + P - 1, 3)).Address(True, True)
    start = start + P
  Else
    lphis = ""
  End If
  
  If Q > 0 Then
    lthetas = Range(myRange.Cells(start, 3), myRange(start + Q - 1, 3)).Address(True, True)
    start = start + Q
  Else
    lthetas = ""
  End If
  
  lsigma = myRange(start, 3).Address(True, True)


  ' (1) Display the Basic Statistics
  ReDim S(1 To (2 + P + Q + numXVars), 3)
  S(1, 1) = ChrW$(&H3BC&)
  S(1, 2) = "0"
  S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE


  start = 1
  For i = 1 To numXVars
      S(start + i, 1) = ChrW$(&H3B2&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMAX_OUTPUT_EXOGENOUS_BETAS_PARAM_NOTE) ' ARMAX_EXOGENOUS_BETAS_PARAM_NOTE
  Next i
  
  start = start + numXVars
  For i = 1 To P
      S(start + i, 1) = ChrW$(&H3C6&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_AR_PARAM_NOTE) ' ARMA_AR_PARAM_NOTE
  Next i

  start = start + P
  For i = 1 To Q
      S(start + i, 1) = ChrW$(&H3B8&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MA_PARAM_NOTE) ' ARMA_MA_PARAM_NOTE
  Next i
  
  start = start + Q
  
  ' Sigma of the model
  S(start + 1, 1) = ChrW$(&H3C3&)
  S(start + 1, 2) = "1"
  S(start + 1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
  
  
  For i = 1 To (2 + P + Q + numXVars)
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = S(i, 1)
        If .Comment Is Nothing Then
          .AddComment S(i, 3)
        Else
          .Comment.Text Text:=S(i, 3)
        End If
        .Comment.visible = False
    End With
    Call Super_Sub
    
    myRange.Cells(i + 2, 3).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = S(i, 2)
        .NumberFormat = "0.00"
    End With
  Next i
  
  'Update the model formula now
  myRange.Cells(1, 1).Select
  With Selection
    .formula = ("=ARMAX(" & lbetas & "," & lmean & "," & lsigma & "," & lphis & "," & lthetas & ")")
  End With
End Sub


Private Sub PrintSARIMAXCoefficients(myRange As Range, ByVal numXVars As Long)
  Const sSOURCE As String = "PrintCoefficients"
  
  Dim start As Long
  Dim lbetas As String
  Dim lphis As String
  Dim lthetas As String
  Dim lsPhis As String
  Dim lsThetas As String
  Dim lmean As String
  Dim lsigma As String
  
  
  Dim i As Long
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "SARIMAX(" & P & "," & Integral & "," & Q & ")(" & SP & "," & Integral & "," & SQ & ")" & SPeriod
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER)  ' "Param"
    
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    
  start = 3
  If numXVars > 0 Then
    lbetas = Range(myRange.Cells(start, 3), myRange(start + numXVars - 1, 3)).Address(True, True)
    start = start + numXVars
  Else
    lbetas = ""
  End If
  
  lmean = myRange.Cells(start, 3).Address(True, True)
  start = start + 1
  
  If P > 0 Then
    lphis = Range(myRange.Cells(start, 3), myRange(start + P - 1, 3)).Address(True, True)
    start = start + P
  Else
    lphis = ""
  End If
  
  If Q > 0 Then
    lthetas = Range(myRange.Cells(start, 3), myRange(start + Q - 1, 3)).Address(True, True)
    start = start + Q
  Else
    lthetas = ""
  End If
  
  If SP > 0 Then
    lsPhis = Range(myRange.Cells(start, 3), myRange(start + SP - 1, 3)).Address(True, True)
    start = start + SP
  Else
    lsPhis = ""
  End If
  
  If SQ > 0 Then
    lsThetas = Range(myRange.Cells(start, 3), myRange(start + SQ - 1, 3)).Address(True, True)
    start = start + SQ
  Else
    lsThetas = ""
  End If
  
  lsigma = myRange(start, 3).Address(True, True)
    
  ' (1) Display the Basic Statistics
  ReDim S(1 To (2 + P + Q + SP + SQ + numXVars), 3)
  
  start = 0
  For i = 1 To numXVars
      S(start + i, 1) = ChrW$(&H3B2&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_ARMAX_OUTPUT_EXOGENOUS_BETAS_PARAM_NOTE) ' ARMAX_EXOGENOUS_BETAS_PARAM_NOTE
  Next i
  
  start = start + numXVars
  'SARIMA mean
  S(start + 1, 1) = ChrW$(&H3BC&)
  S(start + 1, 2) = "0"
  S(start + 1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE
  
  start = start + 1
  For i = 1 To P
      S(start + i, 1) = ChrW$(&H3C6&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_AR_PARAM_NOTE) ' SARIMA_NON_SEASONAL_AR_PARAM_NOTE
  Next i

  start = start + P
  For i = 1 To Q
      S(start + i, 1) = ChrW$(&H3B8&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_MA_PARAM_NOTE) ' SARIMA_NON_SEASONAL_MA_PARAM_NOTE
  Next i
  
  start = start + Q
  For i = 1 To SP
      S(start + i, 1) = ChrW$(&H3A6&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_AR_PARAM_NOTE) ' SARIMA_SEASONAL_AR_PARAM_NOTE
  Next i
  
  start = start + SP
  For i = 1 To SQ
      S(start + i, 1) = ChrW$(&H398&) & "[" & i & "]"
      S(start + i, 2) = "0"
      S(start + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_MA_PARAM_NOTE) ' SARIMA_SEASONAL_MA_PARAM_NOTE
  Next i
  
  start = start + SQ
  ' Sigma of the model
  S(start + 1, 1) = ChrW$(&H3C3&)
  S(start + 1, 2) = "1"
  S(start + 1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
  
  start = start + 1
  For i = 1 To start
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = S(i, 1)
        If .Comment Is Nothing Then
          .AddComment S(i, 3)
        Else
          .Comment.Text Text:=S(i, 3)
        End If
        .Comment.visible = False
    End With
    Call Super_Sub
    
    myRange.Cells(i + 2, 3).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = S(i, 2)
        .NumberFormat = "0.00"
    End With
  Next i
  
  ' leave a blank line, then print the integration order
  myRange.Cells(start + 4, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "d"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE) ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE)  ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      End If
      .Comment.visible = False
  End With
  Call Super_Sub
  
  myRange.Cells(start + 4, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = Me.Integral
      .NumberFormat = "0"
  End With
  
  ' Write down the Period
  myRange.Cells(start + 5, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "s"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_LENGTH_PARAM_NOTE) ' AIRLINE_SEASON_LENGTH_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_LENGTH_PARAM_NOTE)  ' AIRLINE_SEASON_LENGTH_PARAM_NOTE
      End If
      .Comment.visible = False
  End With
  Call Super_Sub
  
  myRange.Cells(start + 5, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = Me.SPeriod
      .NumberFormat = "0"
  End With
  
  ' Write down the seasonal component integration order
  myRange.Cells(start + 6, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "D"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE) ' SARIMA_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE)  ' SARIMA_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE
      End If
      .Comment.visible = False
  End With
  Call Super_Sub
  
  myRange.Cells(start + 6, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = Me.SIntegral
      .NumberFormat = "0"
  End With
  
  'Update the model formula now
  myRange.Cells(1, 1).Select
  With Selection
    .formula = ("=SARIMAX(" & lbetas & "," & lmean & "," & lsigma & "," & Me.mySARIMAModel.Integral & "," & lphis & "," & lthetas & "," & Me.mySARIMAModel.SPeriod & "," & Me.mySARIMAModel.SIntegral & "," & lsPhis & "," & lsThetas & ")")
  End With

End Sub

' Print the model initial parameters
Public Sub PrintSARIMAXInitialParameter(myRange As Range, numXVars As Long, ByVal calibrate As MODEL_COEFF_STATE_TYPE)
  
  Dim mean As String
  Dim sigma As String
  
  Dim betas As String
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim start As Long
  Dim nAscending As Integer
  
  If Me.mySARIMAModel.ASCENDING Then
    nAscending = 1
  Else
    nAscending = 0
  End If
  
  start = 0
  
  If numXVars > 0 Then
    betas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
  
  ' skip the mean
  mean = myRange.Cells(start + 1, 1).Address(True, True)
  start = start + 1
  
  If P > 0 Then
    phis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + SP, 1)).Address(True, True)
    start = start + SP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + SQ, 1)).Address(True, True)
    start = start + SQ
  Else
    sThetas = vbNullString
  End If
  sigma = myRange.Cells(start + 1, 1).Address(True, True)


  Range(myRange.Cells(1, 1), myRange.Cells(start + 1, 1)) = vb_SARIMAXPARAM(Me.mySARIMAModel.INPUT_RANGE, myFactorsData, nAscending, _
                                                                                        betas, _
                                                                                        mean, sigma, _
                                                                                        phis, _
                                                                                        thetas, _
                                                                                        mySARIMAModel.Integral, _
                                                                                        sPhis, _
                                                                                        sThetas, _
                                                                                        mySARIMAModel.SIntegral, _
                                                                                        mySARIMAModel.SPeriod, _
                                                                                        calibrate, _
                                                                                        mySARIMAModel.MAX_ITERATIONS)
End Sub


' Print the model initial parameters
Public Sub PrintARMAXInitialParameter(myRange As Range, numXVars As Long, ByVal calibrate As MODEL_COEFF_STATE_TYPE)
  
  Dim mean As String
  Dim sigma As String
  Dim betas As String
  
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim start As Long
  Dim nAscending As Integer
  
  If Me.mySARIMAModel.ASCENDING Then
    nAscending = 1
  Else
    nAscending = 0
  End If
  
  ' skip the mean
  start = 1
  mean = myRange.Cells(start, 1).Address(True, True)
  
  If numXVars > 0 Then
    betas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
  
  If P > 0 Then
    phis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
  sigma = myRange.Cells(start + 1, 1).Address(True, True)

  Range(myRange.Cells(1, 1), myRange.Cells(start + 1, 1)) = vb_ARMAXPARAM(Me.mySARIMAModel.INPUT_RANGE, myFactorsData, nAscending, _
                                                                                        betas, _
                                                                                        mean, sigma, _
                                                                                        phis, _
                                                                                        thetas, _
                                                                                        calibrate, _
                                                                                        mySARIMAModel.MAX_ITERATIONS)
End Sub



' Print the Goodness of fit function list
Public Sub PrintARMAXGoodnessOfFit(parameters As Range, ByVal numXVars As Long, myRange As Range)
  Const sSOURCE As String = "PrintARMAXGoodnessOfFit"
  
  Dim phis As String
  Dim thetas As String
  Dim betas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  nAscending = 0
  If Me.mySARIMAModel.ASCENDING = True Then
      nAscending = 1
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  start = 1
  mean = Range(parameters.Cells(1, 1), parameters.Cells(1, 1)).Address(True, True)
    
  If numXVars > 0 Then
    betas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
    
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Me.P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Me.Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
    
  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
  
  
  myRange.Cells(2, 1).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
  Selection.ClearComments
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
  End If
  
  Selection.Comment.visible = False
   
  myRange.Cells(3, 1).Select
  Selection.formula = "=ARMAX_GOF(" & mySARIMAModel.INPUT_RANGE & "," & _
                                      Me.FACTORS_RANGE & "," & _
                                      nAscending & "," & _
                                      betas & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      "1)"
                                        
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 2).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)  ' GOF_AIC_NOTE
  End If
  
  Selection.Comment.visible = False
  
  myRange.Cells(3, 2).Select
  Selection.formula = "=ARMAX_GOF(" & mySARIMAModel.INPUT_RANGE & "," & _
                                      Me.FACTORS_RANGE & "," & _
                                      nAscending & "," & _
                                      betas & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      "2)"
  
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 3).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE)  ' ARMA_CHECK_GOF_NOTE
  End If
  Selection.Comment.visible = False
  
  myRange.Cells(3, 3).Select
  Selection.formula = "=ARMAX_CHECK(" & _
                                      mean & "," & _
                                      sigma & "," & _
                                      phis & "," & _
                                      thetas & ")"
    
  Selection.NumberFormat = "0"
End Sub

' Print the Goodness of fit function list
Public Sub PrintSARIMAXGoodnessOfFit(parameters As Range, ByVal numXVars As Long, myRange As Range)
  Const sSOURCE As String = "PrintSARIMAXGoodnessOfFit"
  
  Dim betas As String
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  
  nAscending = 0
  If Me.mySARIMAModel.ASCENDING = True Then
      nAscending = 1
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  start = 0
  If numXVars > 0 Then
    betas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
  
  mean = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
  start = start + 1
  
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + SP, 1)).Address(True, True)
    start = start + SP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + SQ, 1)).Address(True, True)
    start = start + SQ
  Else
    sThetas = vbNullString
  End If

  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
    
  myRange.Cells(2, 1).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)  ' GOF_LLF_NOTE
  End If
  Selection.Comment.visible = False
   
  myRange.Cells(3, 1).Select
  Selection.formula = "=SARIMAX_GOF(" & Me.mySARIMAModel.INPUT_RANGE & "," & _
                                        Me.FACTORS_RANGE & "," & _
                                        nAscending & "," & _
                                        betas & "," & _
                                        mean & "," & _
                                        sigma & "," & _
                                        Integral & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        SPeriod & "," & _
                                        SIntegral & "," & _
                                        sPhis & "," & _
                                        sThetas & "," & _
                                        "1)"
                                        
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 2).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)  ' GOF_AIC_NOTE
  End If
  Selection.Comment.visible = False
  
  myRange.Cells(3, 2).Select
  Selection.formula = "=SARIMAX_GOF(" & Me.mySARIMAModel.INPUT_RANGE & "," & _
                                        Me.FACTORS_RANGE & "," & _
                                        nAscending & "," & _
                                        betas & "," & _
                                        mean & "," & _
                                        sigma & "," & _
                                        Integral & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        SPeriod & "," & _
                                        SIntegral & "," & _
                                        sPhis & "," & _
                                        sThetas & "," & _
                                        "2)"
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 3).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
  End If
  Selection.Comment.visible = False
  
  myRange.Cells(3, 3).Select
  Selection.formula = "=SARIMAX_CHECK(" & _
                                      mean & "," & _
                                      sigma & "," & _
                                      Integral & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      SPeriod & "," & _
                                      SIntegral & "," & _
                                      sPhis & "," & _
                                      sThetas & _
                                      ")"
    
  Selection.NumberFormat = "0"
End Sub




' Print the Residual Diagnosis tests
Public Sub PrintARMAXResidualDiagnosis(parameters As Range, ByVal numXVars As Long, myRange As Range)
  Const sSOURCE As String = "PrintResidualDiagnosis"
  
  Dim ResidualsEqn As String
  Dim XKURT As String
    
  Dim phis As String
  Dim thetas As String
  Dim betas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  nAscending = 0
  If Me.mySARIMAModel.ASCENDING = True Then
      nAscending = 1
  End If
  
  start = 1
  mean = Range(parameters.Cells(1, 1), parameters.Cells(1, 1)).Address(True, True)
    
  If numXVars > 0 Then
    betas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
    
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Me.P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Me.Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
    
  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
    
    
  XKURT = "0"
  
  ResidualsEqn = "RMNA(ARMAX_FIT(" & _
                                      Me.mySARIMAModel.INPUT_RANGE & "," & _
                                      Me.FACTORS_RANGE & "," & _
                                      nAscending & "," & _
                                      betas & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      FIT_STD_RESID & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, Me.mySARIMAModel.significance, XKURT, myRange)
End Sub


' Print the Residual Diagnosis tests
Public Sub PrintSARIMAXResidualDiagnosis(parameters As Range, ByVal numXVars As Long, myRange As Range)
  Const sSOURCE As String = "PrintResidualDiagnosis"
  
  Dim ResidualsEqn As String
  Dim XKURT As String
    
    
  Dim betas As String
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  nAscending = 0
  If Me.mySARIMAModel.ASCENDING = True Then
      nAscending = 1
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  start = 0
  If numXVars > 0 Then
    betas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + numXVars, 1)).Address(True, True)
    start = start + numXVars
  Else
    betas = vbNullString
  End If
  
  mean = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
  start = start + 1
  
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + P, 1)).Address(True, True)
    start = start + P
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + Q, 1)).Address(True, True)
    start = start + Q
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + SP, 1)).Address(True, True)
    start = start + SP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + SQ, 1)).Address(True, True)
    start = start + SQ
  Else
    sThetas = vbNullString
  End If

  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
    
  XKURT = "0"
  
  ResidualsEqn = "RMNA(SARIMAX_FIT(" & Me.mySARIMAModel.INPUT_RANGE & "," & _
                                        Me.FACTORS_RANGE & "," & _
                                        nAscending & "," & _
                                        betas & "," & _
                                        mean & "," & _
                                        sigma & "," & _
                                        Integral & "," & _
                                        phis & "," & _
                                        thetas & "," & _
                                        SPeriod & "," & _
                                        SIntegral & "," & _
                                        sPhis & "," & _
                                        sThetas & "," & _
                                        "" & FIT_STD_RESID & "))"
  
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, Me.mySARIMAModel.significance, XKURT, myRange)
End Sub



Attribute VB_Name = "About"
Attribute VB_Base = "0{55470EFC-C5E6-4817-889A-6896773F1B9A}{185672A3-A70F-4B4E-A201-2D8DC05F7CAB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: About.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/About.frm $
'
Private Const msMODULE As String = "USERFORM:About"
Private Const zenSlugId As String = "categories/201878926"

' Private userOptions As UserInformationUO

Private Sub btnOK_Click()
    
  Unload Me
End Sub

Private Sub cmdBtnActivateNow_Click()
  Const sSOURCE As String = "cmdBtnActivateNow_Click"
  Dim szFilePath As String
  Dim bRet As Boolean
  
  If vb_RegistryKeyExists(HKCU_UNINSTALL_REG_PATH) Then
    szFilePath = vb_ReadRegistryKey(HKCU_UNINSTALL_REG_PATH)
  Else
    If vb_RegistryKeyExists(HKLM_UNINSTALL_REG_PATH) Then
      szFilePath = vb_ReadRegistryKey(HKLM_UNINSTALL_REG_PATH)
    Else
      ' default to the XLL location
      szFilePath = vb_getInstallationPath()
    End If
  End If


  ' Add the License manager name
  If Len(szFilePath) > 0 Then
    szFilePath = szFilePath & "\" & LICENSEMGR_FILENAME
    bRet = vb_OpenEXE(szFilePath)
    If bRet = False Then
      ' MsgBox "Failed to launch License manager! Click on the License Manager shortcut in the start menu.", vbExclamation Or vbOKOnly, PRODUCT_MEDIUMNAME
      MsgBox MSGAPI.getLocaleString(IDS_UI_ABOUT_FAILED_LUC), vbExclamation Or vbOKOnly, PRODUCT_MEDIUMNAME
    End If
  Else
    ' MsgBox "The Registry settings are corrupted or missing. This can be due to improper installation.! Click on the License Manager shortcut in the start menu.", vbExclamation Or vbOKOnly, PRODUCT_MEDIUMNAME
    MsgBox MSGAPI.getLocaleString(IDS_UI_ABOUT_FAILED_REGISTRY), vbExclamation Or vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
  Unload Me
End Sub

Private Sub cmdBtnBuyNow_Click()
  Call vb_OpenURL(BUY_URL)
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub cmdBtnTechSupport_Click()
  Call vb_OpenURL(BASE_SUPPORT_URL)
End Sub

Private Sub CreditsCmd_Click()
  
  'Open the 3rd Party credits
  CreditsFrm.Show

End Sub

Private Sub EULATextLabel_Click()
  Call vb_OpenURL(EULA_URL)
  Unload Me
End Sub


Private Sub ReleaseNotesTextLabel_Click()
  Call vb_OpenURL(REALEASENOTES_URL)
  Unload Me
End Sub

Private Sub txtUpdateAvailable_Click()
  Call vb_OpenURL(LUCAPI.Get_newVersionDownloadURL)
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  Dim szTemp As String
  
  'Set the control captions
  About.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_CAPTION)
  
  copyrighttxtlabel.Caption = MSGAPI.getLocaleString(IDS_UI_COPYRIGHT_HEADER_CAPTION)
  copyrighttxtlabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COPYRIGHT_HEADER_HELPTIP)
  
  COPYRIGHT_WARNING_LABEL.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_COPYRIGHTMSG_WARNING_CAPTION)
  COPYRIGHT_WARNING_LABEL.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_COPYRIGHTMSG_WARNING_HELPTIP)
  
  EULAURLTextLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_EULA_URL_CAPTION)
  EULAURLTextLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_EULA_URL_HELPTIP)
  
  ReleaseNotesURLTextLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_RELEASENOTES_URL_CAPTION)
  ReleaseNotesURLTextLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_RELEASENOTES_URL_HELPTIP)
  
  cmdBtnTechSupport.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_TECHSUPPORT_CAPTION)
  cmdBtnTechSupport.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_TECHSUPPORT_HELPTIP)
  
  CreditsCmd.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_CREDITS_CAPTION)
  CreditsCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_CREDITS_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  cmdBtnActivateNow.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_ACTIVATENOW_CAPTION)
  cmdBtnActivateNow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_ACTIVATENOW_HELPTIP)
  
  cmdBtnBuyNow.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_BUYNOW_CAPTION)
  cmdBtnBuyNow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_BUYNOW_HELPTIP)
  
  CompanyTextLabel.Caption = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_COMPANY)
  CompanyTextLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_USERCOMPANY_HELPTIP)
  
  UserNameTexLabel.Caption = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_NAME)
  UserNameTexLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_USERNAME_HELPTIP)
  
  ProductIDTextLabel.Caption = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_LICENSEKEY)
  ProductIDTextLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_PRODUCTID_HELPTIP)
  
  UserInfoFrame.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_USERINFOFRAME_CAPTION)
  UserInfoFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_USERINFOFRAME_HELPTIP)
  
  
  SupportValidThruLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_CAPTION)
  SupportValidThruLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_HELPTIP)
  txtServiceExpiryDate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_HELPTIP)
  
  ' Set userOptions = vb_getUserOptionsObj() ' New UserInformationUO
  NumXLBuildTextLable.Caption = LUCAPI.Get_Product & " " & LUCAPI.Get_ProductVersion & " (" & LUCAPI.Get_ProductRelease & ")"
  NumXLBuildTextLable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_BUILDTXTLABEL_HELPTIP)

  ' Get first string in our resource
  szTemp = MSGAPI.getLocaleString(IDS_XLL_RELEASE_NAME)
  
  TrialModeFrame.Caption = MSGAPI.getLocaleString(IDS_UI_LITEMODE) ' "Lite Mode"
  TrialModeFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_TRIALMODEFRAME_HELPTIP) ' "Lite Mode"
  
  TrialModeFrame.visible = True
  cmdBtnActivateNow.visible = False
  cmdBtnBuyNow.visible = True

  If (LUCAPI.Get_LicenseLevel > LITE_MODE) Then
    Dim expiryDays As Long
    expiryDays = Int(LUCAPI.Get_expiryDate) - CLng(Date)

    If (LUCAPI.Get_LicenseLevel > PRO_MODE) Then
      TrialModeFrame.Caption = MSGAPI.getLocaleString(IDS_UI_SUBSCRIPTIONMODE) ' "Subscription Mode"
    Else
      TrialModeFrame.Caption = MSGAPI.getLocaleString(IDS_UI_TRIALMODE) ' "Trial Mode"
    End If

    If (expiryDays > 90) Then
      TrialModeFrame.visible = False
    ElseIf (expiryDays > 1) Then
      ExpiryDateTextLabel = MSGAPI.getLocaleString(IDS_UI_LICENSEEXPIRES_ON) & " " & _
                            CDate(LUCAPI.Get_expiryDate) & "."    ' "License expires on " & CDate(LUCAPI.Get_expiryDate) & "."
    Else
      ExpiryDateTextLabel = MSGAPI.getLocaleString(IDS_UI_LICENSEEXPIRES_ONEDAY)   ' "License will expire in 1 day."
    End If
  ElseIf (LUCAPI.Get_expiryDate = DateSerial(1970, 1, 1)) Then
    ExpiryDateTextLabel = MSGAPI.getLocaleString(IDS_UI_LICENSE_NOT_ACTIVATED) ' "License is not activated."
    cmdBtnActivateNow.visible = True
    cmdBtnBuyNow.visible = False
  Else
    ExpiryDateTextLabel = MSGAPI.getLocaleString(IDS_UI_LICENSE_EXPIRED_ON) & " " & CDate(LUCAPI.Get_expiryDate) & "." ' "License expired on "
  End If

  UserNameTexLabel = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_NAME) & " " & LUCAPI.Get_CustomerName  ' "Name: "
  CompanyTextLabel = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_COMPANY) & " " & LUCAPI.Get_Company     ' "Company: "
  ProductIDTextLabel = MSGAPI.getLocaleString(IDS_UI_CUSTOMER_LICENSEKEY) & " " & LUCAPI.Get_ProductKey  ' "License Key: "
  
  
  txtServiceExpiryDate = Format(LUCAPI.Get_serviceExpiryDate, "mmmm dd, yyyy")
End Sub

Private Sub UserForm_Terminate()
  ' Set userOptions = Nothing
End Sub

Attribute VB_Name = "AddEventUserForm"
Attribute VB_Base = "0{D9CB8441-1068-41A6-9F12-3A13A5818B74}{3FE73F1C-88D5-4467-B42F-421903E02FB5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub CheckBox3_Click()

End Sub
Attribute VB_Name = "CheckUpdateForm"
Attribute VB_Base = "0{E1C977C3-8878-403D-ABC3-9EB8B4F46C2D}{1CF25813-8858-48D4-BCF6-8F820DBDC5AC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: CheckUpdateForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/CheckUpdateForm.frm $
'
Private Const msMODULE As String = "USERFORM:CheckForUpdate"
Private Const zenSlugId As String = "articles/216534603"

Private Sub Check4UpdateCmd_Click()
  Dim nRetVal As Integer
  
  ' (1) Run the Query over the network
  nRetVal = LUCAPI.Check4Update
  
  If nRetVal >= NDK_SUCCESS Then
    ServiceExpiryTxt = Format(LUCAPI.Get_serviceExpiryDate, "mmmm dd, yyyy")
    newVersionTxt = LUCAPI.Get_newVersion
    If LUCAPI.Get_newVersion <> LUCAPI.Get_ProductVersion Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_CHECK4UPATE_FOUND) & LUCAPI.Get_newVersion, vbInformation, PRODUCT_MEDIUMNAME
      
      downloadCmd.enabled = True
      whatsnewCmd.enabled = True
    Else
      newVersionTxt = MSGAPI.getLocaleString(IDS_UI_CHECK4UPATE_UP2DATE)
      downloadCmd.enabled = False
      whatsnewCmd.enabled = False
    End If
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbInformation, PRODUCT_MEDIUMNAME
  End If
End Sub

Private Sub downloadCmd_Click()
    Call vb_OpenURL(LUCAPI.Get_newVersionDownloadURL)
End Sub

Private Sub Label1_Click()

End Sub

Private Sub OKCmd_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  ' Intialize the control labels
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_FRM_CAPTION)
  LicenseKeyLabelTxt.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LICENSEKEY_LABEL_CAPTION)
  LicenseKeyLabelTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LICENSEKEY_LABEL_HELPTIP)
  
  LicenseKeyTxt.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NA)
  LicenseKeyTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LICENSEKEY_LABEL_HELPTIP)
  
  MachineIDLabelTxt.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_MACHINEID_LABEL_CAPTION)
  MachineIDLabelTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_MACHINEID_LABEL_HELPTIP)
  
  MachineIDTxt.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NA)
  MachineIDTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_MACHINEID_LABEL_HELPTIP)
  
  currentVersionLabelTxt.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CURRENTVERSION_LABEL_CAPTION)
  currentVersionLabelTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CURRENTVERSION_LABEL_HELPTIP)
  currentVersionTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CURRENTVERSION_LABEL_HELPTIP)
  
  newVersionLabelTxt.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LATESTVERSION_LABEL_CAPTION)
  newVersionLabelTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LATESTVERSION_LABEL_HELPTIP)
  newVersionTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_LATESTVERSION_LABEL_HELPTIP)
  
  PREMIER_DATE_LabelTxt.Caption = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_CAPTION)
  PREMIER_DATE_LabelTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_HELPTIP)
  ServiceExpiryTxt.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NA)
  ServiceExpiryTxt.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ABOUT_SEVICEDATE_LABEL_HELPTIP)
  
  downloadCmd.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_DOWNLOAD_BTN_CAPTION)
  downloadCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_DOWNLOAD_BTN_HELPTIP)
  
  whatsnewCmd.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CHANGELOG_BTN_CAPTION)
  whatsnewCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CHANGELOG_BTN_HELPTIP)
  
  Check4UpdateCmd.Caption = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CHECK_BTN_CAPTION)
  Check4UpdateCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CHECK4UPDATE_CHECK_BTN_HELPTIP)
  
  OKCmd.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  OKCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  currentVersionTxt = LUCAPI.Get_ProductVersion
  newVersionTxt = ""
      
  LicenseKeyTxt = LUCAPI.Get_ProductKey
  MachineIDTxt = LUCAPI.Get_HostId
  
  ServiceExpiryTxt = Format(LUCAPI.Get_serviceExpiryDate, "mmmm dd, yyyy")
  
  newVersionTxt = LUCAPI.Get_newVersion
  If LUCAPI.Get_newVersion <> LUCAPI.Get_ProductVersion And _
     Len(LUCAPI.Get_newVersion) > 0 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_CHECK4UPATE_FOUND) & LUCAPI.Get_newVersion, vbInformation, PRODUCT_MEDIUMNAME
    
    downloadCmd.enabled = True
    whatsnewCmd.enabled = True
  Else
    If LUCAPI.Get_newVersion = LUCAPI.Get_ProductVersion Then
      newVersionTxt = MSGAPI.getLocaleString(IDS_UI_CHECK4UPATE_UP2DATE)
    Else
      newVersionTxt = "N/A"
    End If
    downloadCmd.enabled = False
    whatsnewCmd.enabled = False
  End If
End Sub

Private Sub whatsnewCmd_Click()
  Call vb_OpenURL(LUCAPI.Get_newVersionDownloadURL)
End Sub
Attribute VB_Name = "CollinearityTestFrm"
Attribute VB_Base = "0{F1B5FD52-9A5F-408E-983D-30034D50DD4D}{3EBE25CE-AFB7-4ABB-BDE0-7FF9463053AF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: CollinearityTestFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/CollinearityTestFrm.frm $
'
Private Const msMODULE As String = "USERFORM:CollinearityTest"
Private Const zenSlugId As String = "articles/216445563"

Private userOptions As CollinearityTestUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  GroupByTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_CAPTION)
  GroupByTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_HELPTIP)

  optGroupByColumns.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_CAPTION)
  optGroupByColumns.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_HELPTIP)
  
  optGroupByRows.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_CAPTION)
  optGroupByRows.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_HELPTIP)
  
  MaskTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION)
  MaskTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_PG_OPTIONS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  CollinearityTestMethodFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_METHODS_FRAME_CAPTION)
  CollinearityTestMethodFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_METHODS_FRAME_HELPTIP)
  
  chkOptionVIF.Caption = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_VIF_CAPTION)
  chkOptionVIF.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_VIF_HELPTIP)
  
  chkOptionCN.Caption = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_CONDITION_NUMBER_CAPTION)
  chkOptionCN.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_CONDITION_NUMBER_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New CollinearityTestUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  RefMaskArray.value = myGeneralUO.INPUT_MASK
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  RefEditSignificanceLevel.value = myGeneralUO.significance
  
  chkOptionVIF.value = userOptions.VIF
  chkOptionCN.value = userOptions.CN
  
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optGroupByColumns.value = myGeneralUO.GROUPBY_COLUMNS
  optGroupByRows.value = Not optGroupByColumns.value
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optGroupByRows.enabled = dataAvailable
  optGroupByColumns.enabled = dataAvailable
  RefMaskArray.enabled = dataAvailable
  RefOutput.enabled = dataAvailable
  
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  RefEditSignificanceLevel.enabled = False
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
  ready = False
  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        ready = valid_alpha
      End If
  End If
    
  cmdOK.enabled = ready And (userOptions.CN Or userOptions.VIF) And myMissingValueUO.isInputValid(RefInputArray.value)
End Sub

Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim revInputDataRng As String
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  ' Get the input range (net of labels)
  revInputDataRng = myGeneralUO.INPUT_DATA_NO_LABELS
  Set inRange = Range(revInputDataRng)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_2DINPUT_ERROR) ' "Enter a valid 2D data range."
    Exit Sub
  End If

  If myGeneralUO.GROUPBY_COLUMNS Then
    If inRange.columns.count < 2 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_MULTICOLS_ONEROW_INPUT_ERROR) '"The time series range should have at least two columns and one row."
      Exit Sub
    End If
    
    If inRange.rows.count <= inRange.columns.count Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INSUFFICIENT_OBS_VARS_ERROR) '"The number of observations must be greater than number of variables"
      Exit Sub
    End If
    
    
  Else
    If inRange.rows.count < 2 And inRange.columns.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_MULTIROWS_ONECOL_INPUT_ERROR) '"The time series range should have at least two rows and one column."
      Exit Sub
    End If
  
    If inRange.columns.count <= inRange.rows.count Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INSUFFICIENT_OBS_VARS_ERROR) ' "The number of observations must be greater than number of variables"
      Exit Sub
    End If
  End If
  
  ' Check if all the values in the input Series are Numaric or #N/A
  If Not vb_IsNum(inRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) '"The input data range should be only numbers, space or #N/A. No text is allowed"
    Exit Sub
  End If
        
  ' Check if all the values in the input Series are Numaric or #N/A
      
  Set myRange = Range(RefOutput)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) '"Enter a valid output range."
    Exit Sub
  End If
      
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_STATUSBAR_CALCULATION_MSG)
  
  ' Ready for printing the output
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
      
  mbOK = True
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub



Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID, zenSlugId)
End Sub



Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


' RefMaskArray
Private Sub RefMaskArray_Change()
  myGeneralUO.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionCN_Click()
  userOptions.CN = chkOptionCN.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionVIF_Click()
  userOptions.VIF = chkOptionVIF.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optGroupByColumns_Click()
  myGeneralUO.GROUPBY_COLUMNS = optGroupByColumns.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optGroupByRows_Click()
  myGeneralUO.GROUPBY_COLUMNS = Not optGroupByRows.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Attribute VB_Name = "CollinearityTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16099 $
'  $Date: 2017-01-06 09:18:14 -0600 (Fri, 06 Jan 2017) $
'  $Author: mohamad $
'  $Id: CollinearityTestUO.cls 16099 2017-01-06 15:18:14Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/CollinearityTestUO.cls $
'
Private Const msMODULE As String = "CLASS:CollinearityTestUO"
  

Private myVIF As Boolean
Private myCN As Boolean

Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

Public Property Get VIF() As Boolean
    VIF = myVIF
End Property

Public Property Let VIF(ByVal vNewValue As Boolean)
  myVIF = vNewValue
End Property

Public Property Get CN() As Boolean
    CN = myCN
End Property

Public Property Let CN(ByVal vNewValue As Boolean)
  myCN = vNewValue
End Property


'ResetToDefault
Public Sub ResetToDefault()
  myVIF = True
  myCN = True
End Sub



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As STATIONARY_TEST_SCENARIO
  Dim row As Long
  Dim szTemp As String
  
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_HEADER) '"Multicollinearity test"
  End With

  If Me.CN Then
    myRange.Cells(1, 5).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_CN_CAPTION) '"Condition Number"
      
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_CN_NOTE) ' COLLINEAITY_TEST_CN_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_CN_NOTE)  ' COLLINEAITY_TEST_CN_NOTE
      End If
      .Comment.visible = False
    End With
    
    myRange.Cells(1, 6).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .Font.Italic = False
      .formula = "=CollinearityTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & ",1,)"
      .NumberFormat = "#0.00"
      .Interior.Color = RGB(200, 160, 35)
    End With
  End If
  
  If Me.VIF Then
    myRange.Cells(2, 1).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VARIABLE_CAPTION) '"Variable"
      
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VARIABLE_NOTE) ' "Explanator Variable"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VARIABLE_NOTE)  ' "Explanator Variable"
      End If
      
      .Comment.visible = False
    End With
    
    myRange.Cells(2, 2).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_TOL_CAPTION) '"Tol."
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_TOL_NOTE) ' "detection-tolerance"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_TOL_NOTE)  ' "detection-tolerance"
      End If
      .Comment.visible = False
    End With
  
    myRange.Cells(2, 3).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_RSQ_CAPTION) ' "R^2"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_RSQ_NOTE) ' "Coefficient of Determination of a regression of one explanator (e.g. j) on all the other explanators."
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_RSQ_NOTE)  ' "Coefficient of Determination of a regression of one explanator (e.g. j) on all the other explanators."
      End If
      .Comment.visible = False
    End With
  
    myRange.Cells(2, 4).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VIF_CAPTION) '"VIF"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VIF_NOTE) ' "Variance Inflation Factor (VIF)"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VIF_NOTE)  ' "Variance Inflation Factor (VIF)"
      End If

      .Comment.visible = False
    End With
    
    myRange.Cells(2, 5).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PRESENT_HEADER) '"Present?"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_PRESENT_TEST_NOTE) '"multicollinearity problem is present?"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MCOLINEARITY_TEST_OUTPUT_PRESENT_TEST_NOTE)  '"multicollinearity problem is present?"
      End If
      .Comment.visible = False
    End With
  End If
  
  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With

  If Me.VIF Then
    row = 2
    For i = 1 To myGeneralUO.columns
        row = row + 1
        myRange.Cells(row, 1).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .Font.Italic = True
          .value = i
        End With
        
        'VIF
        myRange.Cells(row, 4).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = "=CollinearityTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & ",2," & myRange.Cells(row, 1).Address(RowAbsolute:=False) & ")"
          .NumberFormat = "#0.00"
        End With
        
        szTemp = "=(" & myRange.Cells(row, 4).Address(RowAbsolute:=False) & "> 5)"
        myRange.Cells(row, 5).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp
        End With
        
        szTemp = "=1/" & myRange.Cells(row, 4).Address(RowAbsolute:=False)
        myRange.Cells(row, 2).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp
          .NumberFormat = "#0.0%"
        End With
        
        szTemp = "=1 - " & myRange.Cells(row, 2).Address(RowAbsolute:=False)
        myRange.Cells(row, 3).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp
          .NumberFormat = "#0.0%"
        End With
    Next i
  End If

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "Correlogram"
Attribute VB_Base = "0{FDD8248D-D554-42A6-82BB-8E9D90EAF65A}{043F74D1-38FB-41BC-AB9F-6550C3B89689}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: Correlogram.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/Correlogram.frm $
'
Private Const msMODULE As String = "USERFORM:Correlogram"
Private Const zenSlugId As String = "articles/216477663"

Private Const MINACFORDER As Integer = 2

Private userOptions As CorrelogramUO
Private callValidateForm As Boolean
Private mbOK As Boolean

Public Property Get OK() As Boolean
  OK = mbOK
End Property

Private Sub ACFMethodComboBox_Change()
  userOptions.ACF_CALC_METHOD = ACFMethodComboBox.ListIndex
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub btnCancel_Click()
  mbOK = False
  ' Me.Hide
  Unload Me
End Sub


Private Sub MaxACFLagSpinButton_Spindown()
  Const sSOURCE As String = "MaxACFLagSpinButton_Spindown"

  If userOptions.MaxACFLags > MINACFORDER Then
    userOptions.MaxACFLags = userOptions.MaxACFLags - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxACFLag.value = userOptions.MaxACFLags
      callValidateForm = True
    Else
      txtMaxACFLag.value = userOptions.MaxACFLags
    End If
  End If

  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

' Handling Spin Up/Down to MaxPACF control
Private Sub MaxACFLagSpinButton_Spinup()
  Const sSOURCE As String = "MaxACFLagSpinButton_Spindown"

  userOptions.MaxACFLags = userOptions.MaxACFLags + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxACFLag.value = userOptions.MaxACFLags
    callValidateForm = True
  Else
    txtMaxACFLag.value = userOptions.MaxACFLags
  End If

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub MaxPACFLagSpinButton_Spindown()
  Const sSOURCE As String = "MaxPACFLagSpinButton_Spindown"

  If userOptions.MaxPACFLags > MINACFORDER Then
    userOptions.MaxPACFLags = userOptions.MaxPACFLags - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxPACFLag.value = userOptions.MaxPACFLags
      callValidateForm = True
    Else
      txtMaxPACFLag.value = userOptions.MaxPACFLags
    End If
  End If

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub MaxPACFLagSpinButton_Spinup()
  Const sSOURCE As String = "MaxPACFLagSpinButton_Spinup"

  userOptions.MaxPACFLags = userOptions.MaxPACFLags + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxPACFLag.value = userOptions.MaxPACFLags
    callValidateForm = True
  Else
    txtMaxPACFLag.value = userOptions.MaxPACFLags
  End If

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub UserForm_Activate()
  Const sSOURCE As String = "UserForm_Activate"
  Dim szTmp As String
  
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = True
    Me.btnCancel = True
  End If
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  Dim myRange As Object
  Dim OGRange As Object
  Dim inRange As Object
  Dim plotArea As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
    
  Set inRange = Range(RefInputArray)
  If Not isTimeSeriesValid(inRange) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
  
  ' Look at the output range now
  Set myRange = Range(RefEditOutputTable)
  Set OGRange = Range(RefEditOutputGraph)
  
  If (myRange Is Nothing) Or (OGRange Is Nothing) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_INVALID_ALPHA_VALUE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
    
  ' check the value of the lag for ACF
  If (userOptions.IncludeACF And userOptions.PlotACF And userOptions.MaxACFLags < MINACFORDER) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_MAX_LAGS_ERROR) ' "Only numbers greater than 1 allowed for ACF Max Lags."
    txtMaxACFLag.value = vbNullString
    Exit Sub
  End If
    
  ' check the value of the lag for PACF
  If (userOptions.IncludePACF And userOptions.PlotPACF And userOptions.MaxPACFLags < MINACFORDER) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_MAX_LAGS_ERROR) ' "Only numbers greater than 1 allowed for PACF Max Lags."
    txtMaxPACFLag.value = vbNullString
    Exit Sub
  End If
    
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_STATUSBAR_CALCULATION_MSG) '"Correlogram Analysis"
  
  Call userOptions.printCorrelogramOutput(myRange)
    
  mbOK = True
  ' Me.Hide
Cleanup:
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
    
End Sub

Private Sub chkACFPlot_Click()
    userOptions.PlotACF = chkACFPlot.value

  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
    
End Sub

Private Sub chkIncludeACF_Click()
  userOptions.IncludeACF = chkIncludeACF.value
    
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkIncludeACFLLUL_Click()
  userOptions.IncludeACFBounds = chkIncludeACFLLUL.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkIncludePACF_Click()
    userOptions.IncludePACF = chkIncludePACF.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkIncludePACFLLUL_Click()
    userOptions.IncludePACFBounds = chkIncludePACFLLUL.value
    
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkPACFPlot_Click()
    userOptions.PlotPACF = chkPACFPlot.value
    
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefEditOutputGraph_Change()
  userOptions.OUTPUT_GRAPH = Utilities.procInputCellsRange(RefEditOutputGraph.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditOutputTable_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefEditOutputTable.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Function chkSignificanceLevel(alpha As String) As Boolean
  chkSignificanceLevel = isAlphaValid(alpha)
End Function


Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub txtMaxACFLag_Change()
  Const sSOURCE As String = "txtMaxACFLag_Change"
  
  If IsNumeric(txtMaxACFLag.value) Then
    userOptions.MaxACFLags = txtMaxACFLag.value
  Else
      If txtMaxACFLag.value <> vbNullString And _
          txtMaxACFLag.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        txtMaxACFLag.value = vbNullString
      End If
  End If
    
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub txtMaxPACFLag_Change()
  Const sSOURCE As String = "txtMaxPACFLag_Change"
  
  If IsNumeric(txtMaxPACFLag.value) Then
    userOptions.MaxPACFLags = txtMaxPACFLag.value
  Else
      If txtMaxPACFLag.value <> vbNullString And _
          txtMaxPACFLag.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        txtMaxPACFLag.value = vbNullString
      End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_FRM_CAPTION)
  
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  
  ACFFrame.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_FRAME_LABEL)
  ACFFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_FRAME_HELPTIP)
  
  chkIncludeACF.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_CALC_ACF_LABEL)
  chkIncludeACF.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_CALC_ACF_HELPTIP)
  
  maxACFLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_MAX_LAG_LABEL)
  maxACFLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_MAX_LAG_HELPTIP)
  txtMaxACFLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_MAX_LAG_HELPTIP)
  
  chkIncludeACFLLUL.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_UL_LL_LABEL)
  chkIncludeACFLLUL.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_UL_LL_HELPTIP)
  
  chkACFPlot.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_PLOT_LABEL)
  chkACFPlot.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_PLOT_HELPTIP)
  
  PACFFrame.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_FRAME_LABEL)
  PACFFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_FRAME_HELPTIP)
  
  chkIncludePACF.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_CALC_PACF_LABEL)
  chkIncludePACF.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_CALC_PACF_HELPTIP)
  
  maxLagPACFOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_MAX_LAG_LABEL)
  maxLagPACFOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_MAX_LAG_HELPTIP)
  txtMaxPACFLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_MAX_LAG_HELPTIP)
  
  ACFMethodLabel.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_METHOD_LABEL)
  ACFMethodLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_METHOD_HELPTIP)
  ACFMethodComboBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_ACF_METHOD_HELPTIP)
  
  ACFMethodComboBox.AddItem MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_SAMPLE_ACF_METHOD), 0
  ACFMethodComboBox.AddItem MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_SAMPLE_PERIODOGRAM_METHOD), 1
  ACFMethodComboBox.AddItem MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_SAMPLE_XCF_METHOD), 2
  
  chkIncludePACFLLUL.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_UL_LL_LABEL)
  chkIncludePACFLLUL.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_UL_LL_HELPTIP)
  
  chkPACFPlot.Caption = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_PLOT_LABEL)
  chkPACFPlot.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_PACF_PLOT_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)
  
  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  RefEditOutputTable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
    
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OK_BTN_HELPTIP)
  
  Set userOptions = New CorrelogramUO
  
  callValidateForm = False
    
  If Not (userOptions Is Nothing) Then
    chkAscending.value = userOptions.ASCENDING
    RefEditSignificanceLevel.value = userOptions.significance
    chkIncludeACF.value = userOptions.IncludeACF
    chkIncludePACF.value = userOptions.IncludePACF
    txtMaxACFLag.value = userOptions.MaxACFLags
    txtMaxPACFLag.value = userOptions.MaxPACFLags
    chkIncludeACFLLUL.value = userOptions.IncludeACFBounds
    chkIncludePACFLLUL.value = userOptions.IncludePACFBounds
    chkACFPlot.value = userOptions.PlotACF
    chkPACFPlot.value = userOptions.PlotPACF
    
    ACFMethodComboBox.ListIndex = userOptions.ACF_CALC_METHOD
    
    ' Initialize the table output to current cell
    RefEditOutputTable.value = userOptions.OUTPUT_RANGE
    RefEditOutputGraph.value = userOptions.OUTPUT_GRAPH
  End If
  
  callValidateForm = True
  Call validateForm
End Sub


' This routine control the states of each ui elements on it
Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
    
  Dim ready As Boolean
  
  Dim inputDataReady As Boolean
  Dim significanceLevelReady As Boolean
  
  inputDataReady = Utilities.isCellRangeValid(RefInputArray.value)
  significanceLevelReady = isAlphaValid(RefEditSignificanceLevel.value)
  
  ACFFrame.enabled = inputDataReady
  PACFFrame.enabled = inputDataReady
  
  chkIncludeACF.enabled = inputDataReady
  chkIncludePACF.enabled = inputDataReady
  chkAscending.enabled = inputDataReady
  
  SignificanceLevelTxtLabel.enabled = inputDataReady And (userOptions.IncludeACFBounds Or userOptions.IncludePACFBounds)
  RefEditSignificanceLevel.enabled = inputDataReady And (userOptions.IncludeACFBounds Or userOptions.IncludePACFBounds)
  
  chkIncludeACFLLUL.enabled = inputDataReady And significanceLevelReady And (chkIncludeACF.value = True)
  chkIncludePACFLLUL.enabled = inputDataReady And significanceLevelReady And (chkIncludePACF.value = True)
  
  maxACFLagOrderLabel.enabled = inputDataReady And userOptions.IncludeACF
  txtMaxACFLag.enabled = inputDataReady And userOptions.IncludeACF
  
  maxLagPACFOrderLabel.enabled = inputDataReady And userOptions.IncludePACF
  txtMaxPACFLag.enabled = inputDataReady And userOptions.IncludePACF

  ACFMethodLabel.enabled = inputDataReady And userOptions.IncludeACF
  ACFMethodComboBox.enabled = inputDataReady And userOptions.IncludeACF

  chkACFPlot.enabled = inputDataReady And userOptions.IncludeACF And userOptions.IncludeACFBounds
  chkPACFPlot.enabled = inputDataReady And userOptions.IncludePACF And userOptions.IncludePACFBounds
  
  OutputRangeFrameLabel.enabled = inputDataReady And (userOptions.IncludeACF Or userOptions.IncludePACF)
  
  RefEditOutputTable.enabled = inputDataReady And (userOptions.IncludeACF Or userOptions.IncludePACF)
  OutputTableRangeLabel.enabled = RefEditOutputTable.enabled
  RefEditOutputGraph.enabled = inputDataReady And ((userOptions.IncludeACF And userOptions.PlotACF) Or (userOptions.IncludePACF And userOptions.PlotPACF)) And RefEditSignificanceLevel.enabled
  OutputGraphRangeLabel.enabled = RefEditOutputGraph.enabled
  
  ready = RefEditOutputTable.enabled And isCellRangeValid(RefEditOutputTable.value)
  
  btnOK.enabled = ready
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "CorrelogramUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: CorrelogramUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/CorrelogramUO.cls $
'
Private Const msMODULE As String = "CLASS:CorrelogramUO"

Enum ACF_METHOD
  SAMPLE_ACF = 0
  PERIODOGRAM_ACF = 1
  SAMPLE_XCF = 2
End Enum

Private myInputData As String
Private myOutputRange As String
Private myOutputGraph As String
Private mySignificanceLevel As String
Private myAscending As Boolean
Private incACF As Boolean
Private incPACF As Boolean
Private nMaxACFLags As Long
Private nMaxPACFLags As Long
Private bACFLimits As Boolean
Private bPACFLimits As Boolean
Private bACFGraph As Boolean
Private bPACFGraph As Boolean
Private nACFCalcMethod As ACF_METHOD


Public Property Get ACF_CALC_METHOD() As ACF_METHOD
  ACF_CALC_METHOD = nACFCalcMethod
End Property

Public Property Let ACF_CALC_METHOD(ByVal vNewValue As ACF_METHOD)
  nACFCalcMethod = vNewValue
End Property



Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraph
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraph = vNewValue
End Property


Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get IncludeACF() As Boolean
  IncludeACF = incACF
End Property

Public Property Let IncludeACF(ByVal vNewValue As Boolean)
  incACF = vNewValue
End Property

Public Property Get IncludePACF() As Boolean
  IncludePACF = incPACF
End Property

Public Property Let IncludePACF(ByVal vNewValue As Boolean)
  incPACF = vNewValue
End Property

Public Property Get MaxACFLags() As Long
  MaxACFLags = nMaxACFLags
End Property

Public Property Let MaxACFLags(ByVal vNewValue As Long)
  nMaxACFLags = vNewValue
End Property


Public Property Get MaxPACFLags() As Variant
  MaxPACFLags = nMaxPACFLags
End Property

Public Property Let MaxPACFLags(ByVal vNewValue As Variant)
  nMaxPACFLags = vNewValue
End Property

Public Property Get IncludeACFBounds() As Boolean
  IncludeACFBounds = bACFLimits
End Property

Public Property Let IncludeACFBounds(ByVal vNewValue As Boolean)
  bACFLimits = vNewValue
End Property

Public Property Get IncludePACFBounds() As Boolean
  IncludePACFBounds = bPACFLimits
End Property

Public Property Let IncludePACFBounds(ByVal vNewValue As Boolean)
  bPACFLimits = vNewValue
End Property

Public Property Get PlotACF() As Boolean
  PlotACF = bACFGraph
End Property

Public Property Let PlotACF(ByVal vNewValue As Boolean)
  bACFGraph = vNewValue
End Property

Public Property Get PlotPACF() As Boolean
  PlotPACF = bPACFGraph
End Property

Public Property Let PlotPACF(ByVal vNewValue As Boolean)
  bPACFGraph = vNewValue
End Property

Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  myInputData = ""
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  myOutputGraph = Utilities.formatCellsRange(ActiveCell.offset(0, 8).Address(True, True))
  
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myAscending = True
  incACF = True
  incPACF = True
  nMaxACFLags = 10
  nMaxPACFLags = 10
  bACFLimits = True
  bPACFLimits = True
  bACFGraph = True
  bPACFGraph = True
  nACFCalcMethod = SAMPLE_ACF
End Sub


' Print the ACF & PACF table
Public Sub PrintACFPACFTable(myRange As Range)
  Const sSOURCE As String = "PrintACFPACFTable"

  
  Dim ACFflag, PACFflag As Boolean
  Dim nCol As Long
  Dim Labels(1 To 7) As String
  Dim Notes(1 To 7) As String
  Dim myFormulas(1 To 4) As String
  Dim i, j As Long
  Dim maxVal As Long
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
  
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) Print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_TABLE_HEADER) '"Correlogram Analysis"
  End With
  
  
  If incPACF And incACF Then
    nCol = 7
  Else
    nCol = 4
  End If
  
  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, nCol)).Select
  With Selection
    With .Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  i = 2
  Labels(1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_HEADER) '"Lag"
  Notes(1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE)
  If incACF Then
    Labels(i) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_ACF_HEADER) ' "ACF"
    Notes(i) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_ACF_NOTE)
    
    Labels(i + 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_HEADER) ' "UL"
    Notes(i + 1) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_ACF_UL_NOTE) ' "UL"
    
    Labels(i + 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_HEADER) ' "LL"
    Notes(i + 2) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_ACF_LL_NOTE) ' "LL"
    
    myFormulas(1) = "=ACF(" & myInputData & "," & IIf(myAscending, 1, 0) & ","
    myFormulas(2) = "=ACFCI(" & myInputData & "," & IIf(myAscending, 1, 0) & ","
    i = i + 3
  End If
  
  If incPACF Then
    Labels(i) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_PACF_HEADER) ' "PACF"
    Notes(i) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_PACF_NOTE) ' "PACF"
    
    Labels(i + 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_HEADER) ' "UL"
    Notes(i + 1) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_PACF_UL_NOTE) ' "UL"
    
    Labels(i + 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_HEADER) ' "LL"
    Notes(i + 2) = MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_PACF_LL_NOTE) ' "LL"
    
    myFormulas(3) = "=PACF(" & myInputData & "," & IIf(myAscending, 1, 0) & ","
    myFormulas(4) = "=PACFCI(" & myInputData & "," & IIf(myAscending, 1, 0) & ","
    i = i + 2
  End If
  
  j = IIf(i = 7, 7, 4)
  

  If bACFLimits And bPACFLimits Then
    maxVal = IIf(nMaxACFLags >= nMaxPACFLags, nMaxACFLags, nMaxPACFLags)
  Else
    maxVal = IIf(bACFLimits And (Not bPACFLimits), nMaxACFLags, nMaxPACFLags)
  End If
  
  For i = 1 To j
    myRange.Cells(2, i).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = Labels(i)
      If .Comment Is Nothing Then
        .AddComment Notes(i)
      Else
        .Comment.Text Text:=Notes(i)
      End If
    End With
  Next i
  
  Dim pcfCol As Long
  pcfCol = IIf(incACF, 5, 2)
       
  For i = 1 To maxVal
    myRange.Cells(2 + i, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = i
    End With
      
    ' Convert mySignificanceLevel to US number format
    alphaLevel = getAlphaValue(mySignificanceLevel)
    alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)
      
    If incACF And i <= nMaxACFLags Then
      myRange.Cells(2 + i, 2).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(1) & myRange.Cells(2 + i, 1).Address(False, True) & "," & CStr(ACF_CALC_METHOD) & ")"
      End With
      
      myRange.Cells(2 + i, 3).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(2) & myRange.Cells(2 + i, 1).Address(False, True) & "," & CStr(ACF_CALC_METHOD) & "," & alphaUSLevel & ",1)"
      End With
      
      myRange.Cells(2 + i, 4).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(2) & myRange.Cells(2 + i, 1).Address(False, True) & "," & CStr(ACF_CALC_METHOD) & "," & alphaUSLevel & ",0)"
      End With
    End If
    If incPACF And i <= nMaxPACFLags Then
      myRange.Cells(2 + i, pcfCol).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(3) & myRange.Cells(2 + i, 1).Address(False, True) & ")"
      End With
      
      
      myRange.Cells(2 + i, pcfCol + 1).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(4) & myRange.Cells(2 + i, 1).Address(False, True) & "," & alphaUSLevel & ",1)"
      End With
      
      myRange.Cells(2 + i, pcfCol + 2).Select
      With Selection
        .NumberFormat = "0.00%"
        .formula = myFormulas(4) & myRange.Cells(2 + i, 1).Address(False, True) & "," & alphaUSLevel & ",0)"
      End With
    End If
  Next i
End Sub


' Plot the ACF/PACF here
Public Sub PlotCorrelogram(Data As Range, ACFPlotRange As Range)
  Const sSOURCE As String = "PlotCorrelogram"
  
  Dim Labels(1 To 3) As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> ACFPlotRange.Worksheet.Name Then
    Sheets(ACFPlotRange.Worksheet.Name).Activate
  End If
  
  ' Select a range for the output chart
  ' Range(Data.Cells(1, 1), Data.End(xlDown)).Select
  ACFPlotRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=ACFPlotRange.Left, Width:=ACFPlotRange.Width, Top:=ACFPlotRange.Top, Height:=ACFPlotRange.Height)
    .Chart.ChartType = xlColumnClustered
    .Chart.SetSourceData source:=Range(Data.Cells(1, 1), Data.Cells(1, 1).End(xlDown)), PlotBy:=xlColumns
    
    .Chart.HasTitle = True
    .Chart.ChartTitle.Characters.Text = Data.Cells(1, 1).value

    With .Chart.Axes(xlValue)
      .HasMajorGridlines = False
  
      With .TickLabels
        .Font.Bold = True
        .NumberFormat = "0%"
      End With
    End With

    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False

    With .Chart.SeriesCollection.NewSeries
      .Name = Data.Cells(1, 2).value
      .Values = Range(Data.Cells(2, 2), Data.Cells(2, 2).End(xlDown))
      .ChartType = xlLine
    End With

    With .Chart.SeriesCollection.NewSeries
      .Name = Data.Cells(1, 3).value
      .Values = Range(Data.Cells(2, 3), Data.Cells(2, 3).End(xlDown))
      .ChartType = xlLine
    End With
  End With
End Sub


Public Sub printCorrelogramOutput(myRange As Range)
  Const sSOURCE As String = "printCorrelogramOutput"
  
  Dim plotArea As Object
  Dim lastRow, pcfCol As Long
  
  On Error GoTo ErrorHnadler
  
  ' (1) Print the table
  Call PrintACFPACFTable(myRange.Cells(1, 1))
      
  ' (3) Print the Graphs
  bACFGraph = True
  bPACFGraph = True
  
  
  If (incACF And bACFGraph) Or (incPACF And bPACFGraph) Then
    Set plotArea = Range(myOutputGraph)
    
    lastRow = 1
    If incPACF And bACFGraph Then
      Call PlotCorrelogram(Range(myRange.Cells(2, 2), myRange.Cells(2, 4).End(xlDown)), Range(plotArea.Cells(1, 1), plotArea.Cells(8, 12)))
      lastRow = 9
    End If
  
    If (incPACF And bPACFGraph) Then
      ' Do we have an ACF output?
      ' TODO: How about the UL/LL of ACF, they are optional
      pcfCol = IIf(incACF, 5, 2)
      Call PlotCorrelogram(Range(myRange.Cells(2, pcfCol), myRange.Cells(2, pcfCol + 2).End(xlDown)), Range(plotArea.Cells(lastRow, 1), plotArea.Cells(lastRow + 8, 12)))
    End If
  End If

Cleanup:
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If

  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_CORRELOGRAM_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Attribute VB_Name = "CreditsFrm"
Attribute VB_Base = "0{A386202C-15FF-4D55-B860-A52F1078F767}{2A2B2D1A-EDFD-4B16-8310-407E1894ADBA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: CreditsFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/CreditsFrm.frm $
'
Private Const msMODULE As String = "USERFORM:CreditsFrm"
Private Const zenSlugId As String = "articles/216534603"

Private Sub OKCmd_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  
  CreditsFrm.Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_CAPTION)
  
  ' OK button
  OKCmd.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  OKCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  'GNUPG
  Me.MultiPage1.Pages("GNUPG").Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_GNU_CAPTION)
  Me.MultiPage1.Pages("GNUPG").ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_GNU_HELPTIP)
  
  GNUPG_INTROMSG.Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_GNU_INTROMSG_CAPTION)
  GNUPG_INTROMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_GNU_INTROMSG_HELPTIP)
  GNUPG_EULAMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_GNU_EULABODY_HELPTIP)
  
  'X12PG
  Me.MultiPage1.Pages("X12PG").Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_X12_CAPTION)
  Me.MultiPage1.Pages("X12PG").ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_X12_HELPTIP)
  
  X12ARIMAPG_INTROMSG.Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_X12_INTROMSG_CAPTION)
  X12ARIMAPG_INTROMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_X12_INTROMSG_HELPTIP)
  
  'XLWPG
  Me.MultiPage1.Pages("XLWPG").Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_XLW_CAPTION)
  Me.MultiPage1.Pages("XLWPG").ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_XLW_HELPTIP)
  
  XLWPG_EULAMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_XLW_EULABODY_HELPTIP)
  
  'BoostPG
  Me.MultiPage1.Pages("BoostPG").Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_BOOST_CAPTION)
  Me.MultiPage1.Pages("BoostPG").ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_PG_BOOST_HELPTIP)
  
  BOOSTPG_INTROMSG.Caption = MSGAPI.getLocaleString(IDS_UI_CREDITS_BOOST_INTROMSG_CAPTION)
  BOOSTPG_INTROMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_BOOST_INTROMSG_HELPTIP)
  
  BOOSTPG_EULAMSG.ControlTipText = MSGAPI.getLocaleString(IDS_UI_CREDITS_BOOST_EULABODY_HELPTIP)
  
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
End Sub

Attribute VB_Name = "DBMAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15315 $
'  $Date: 2016-05-06 16:25:07 -0500 (Fri, 06 May 2016) $
'
Private Const msMODULE As String = "SFDBMPI"

#If VBA7 Then
  ' Public Declare PtrSafe Function SFLOG_GETLEVEL Lib "SFDBM.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
#Else
  ' Public Declare Function SFLOG_GETLEVEL Lib "SFDBM.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
#End If



Attribute VB_Name = "DFTForm"
Attribute VB_Base = "0{787A89FC-F017-42A3-B3F4-128D9D51CC12}{57E79783-8888-47D7-98D0-0FE00537DBE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: DFTForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/DFTForm.frm $
'
Private Const msMODULE As String = "USERFORM:DFT"
Private Const zenSlugId As String = "articles/215107846"


'PrincipalComponentUI
Private userOptions As DFTPlotUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub chkFREQOutput_Click()
  Dim oldCallValidateForm As Boolean
  
  userOptions.FRQUENCY_OUTPUT = chkFREQOutput.value

  If userOptions.FRQUENCY_OUTPUT = True And _
     userOptions.FREQUENCY_MAX_COMP = -1 Then
    oldCallValidateForm = callValidateForm
    callValidateForm = False
    
    userOptions.FREQUENCY_MAX_COMP = 1
    txtMaxFreqComp.value = userOptions.FREQUENCY_MAX_COMP
    callValidateForm = oldCallValidateForm
  End If

  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionAmplitude_Click()
  userOptions.AMPLITUDE_OUTPUT = chkOptionAmplitude.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionPhase_Click()
  userOptions.PHASE_OUTPUT = chkOptionPhase.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkVarOutput_Click()
  Dim oldCallValidateForm As Boolean
  userOptions.INPUT_VARIABLE_OUTPUT = chkVarOutput.value

  If userOptions.INPUT_VARIABLE_OUTPUT = False And _
     userOptions.INPUT_VARIABLE_MAX_COMP = -1 Then
   oldCallValidateForm = callValidateForm
   callValidateForm = False
   
   userOptions.INPUT_VARIABLE_MAX_COMP = 1
   txtMaxFreqInputVar.value = userOptions.INPUT_VARIABLE_MAX_COMP
   callValidateForm = oldCallValidateForm
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub



Private Sub txtMaxFreqComp_Change()
  If Len(txtMaxFreqComp.value) > 0 Then
    userOptions.FREQUENCY_MAX_COMP = txtMaxFreqComp.value
  Else
    userOptions.FREQUENCY_MAX_COMP = -1
  End If
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub SpinButtonMaxFreqComp_Spinup()

  userOptions.FREQUENCY_MAX_COMP = userOptions.FREQUENCY_MAX_COMP + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxFreqComp.value = userOptions.FREQUENCY_MAX_COMP
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxFreqComp_Spindown()

  If userOptions.FREQUENCY_MAX_COMP > 1 Then
    userOptions.FREQUENCY_MAX_COMP = userOptions.FREQUENCY_MAX_COMP - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxFreqComp.value = userOptions.FREQUENCY_MAX_COMP
      callValidateForm = True
    Else
      txtMaxFreqComp.value = userOptions.FREQUENCY_MAX_COMP
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

'SpinButtonMaxInputVarComp

Private Sub SpinButtonMaxInputVarComp_Spinup()

  userOptions.INPUT_VARIABLE_MAX_COMP = userOptions.INPUT_VARIABLE_MAX_COMP + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxFreqInputVar.value = userOptions.INPUT_VARIABLE_MAX_COMP
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxInputVarComp_Spindown()

  If userOptions.INPUT_VARIABLE_MAX_COMP > 1 Then
    userOptions.INPUT_VARIABLE_MAX_COMP = userOptions.INPUT_VARIABLE_MAX_COMP - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxFreqInputVar.value = userOptions.INPUT_VARIABLE_MAX_COMP
      callValidateForm = True
    Else
      txtMaxFreqInputVar.value = userOptions.INPUT_VARIABLE_MAX_COMP
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub




Private Sub txtMaxFreqInputVar_Change()
  If Len(txtMaxFreqInputVar.value) > 0 Then
    userOptions.INPUT_VARIABLE_MAX_COMP = txtMaxFreqInputVar.value
  Else
    userOptions.INPUT_VARIABLE_MAX_COMP = -1
  End If
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
    
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_PG_OPTIONS_HELPTIP)
    
  FrequencyFrame.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_FRAME_CAPTION)
  FrequencyFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_FRAME_HELPTIP)
  
  chkFREQOutput.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_SELECT_CAPTION)
  chkFREQOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_SELECT_HELPTIP)
  
  chkOptionAmplitude.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_AMP_SELECT_CAPTION)
  chkOptionAmplitude.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_AMP_SELECT_HELPTIP)
    
  chkOptionPhase.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_PHASE_SELECT_CAPTION)
  chkOptionPhase.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_PHASE_SELECT_HELPTIP)
    
  NoOfComponentLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_COMPONENT_NUMBER_LABEL_CAPTION)
  NoOfComponentLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_COMPONENT_NUMBER_LABEL_HELPTIP)
  txtMaxFreqComp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_FREQUENCY_COMPONENT_NUMBER_LABEL_HELPTIP)
 
  InputVariableFrame.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_FRAME_CAPTION)
  InputVariableFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_FRAME_HELPTIP)
  
  chkVarOutput.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_SELECT_CAPTION)
  chkVarOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_SELECT_HELPTIP)
    
  NoComponentIncLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_COMP_NUM_LABEL_CAPTION)
  NoComponentIncLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_COMP_NUM_LABEL_HELPTIP)
  txtMaxFreqInputVar.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DFT_OPTIONS_INPUT_VAR_COMP_NUM_LABEL_HELPTIP)
    
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
    
    
  ' Select the first Item as the default
  Set userOptions = New DFTPlotUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  ' Override the default
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = userOptions.OUTPUT_TABLE
  
  'Missing Values section
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)
  
  chkFREQOutput.value = userOptions.FRQUENCY_OUTPUT
  chkOptionAmplitude.value = userOptions.AMPLITUDE_OUTPUT
  chkOptionPhase.value = userOptions.PHASE_OUTPUT
  txtMaxFreqComp.value = userOptions.FREQUENCY_MAX_COMP
  
  chkVarOutput.value = userOptions.INPUT_VARIABLE_OUTPUT
  txtMaxFreqInputVar.value = userOptions.INPUT_VARIABLE_MAX_COMP
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  MVINTERPOLATEFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
  dataAvailable = dataAvailable And _
                  Utilities.isCellRangeValid(RefOutput.value)

  chkOptionAmplitude.enabled = chkFREQOutput.value
  chkOptionPhase.enabled = chkFREQOutput.value
  txtMaxFreqComp.enabled = chkFREQOutput.value And (chkOptionPhase.value Or chkOptionAmplitude.value)
  SpinButtonMaxFreqComp.enabled = chkFREQOutput.value And (chkOptionPhase.value Or chkOptionAmplitude.value)
  
  txtMaxFreqInputVar.enabled = chkVarOutput.value
  SpinButtonMaxInputVarComp.enabled = chkVarOutput.value


  cmdOK.enabled = dataAvailable And (chkFREQOutput.value Or chkVarOutput.value) And _
                  Len(txtMaxFreqComp.value) > 0 And Len(txtMaxFreqInputVar.value) > 0
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutput_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefOutput.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkAscending_Click()
  myGeneralUO.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  Dim myRange As Object
  Dim myXRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
    ' Basic check for X1 range
  Set myXRange = Range(myGeneralUO.INPUT_DATA_NO_LABELS)
  If myXRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    ' MsgBox "Invalid cells range for the input variable (X).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Exit Sub
  End If
    
  Set myRange = Range(userOptions.OUTPUT_TABLE)
  If myRange Is Nothing Then
    ' MsgBox "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Exit Sub
  End If
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_STATUSBAR_CALCULATION_MSG)
  
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
  
  mbOK = True
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_DFT_PREPARE_ERROR_MSG), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Attribute VB_Name = "DFTPlotUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16769 $
'  $Date: 2019-10-07 18:27:44 -0500 (Mon, 07 Oct 2019) $
'  $Author: mohamad $
'  $Id: DFTPlotUO.cls 16769 2019-10-07 23:27:44Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/DFTPlotUO.cls $
'
Private Const msMODULE As String = "CLASS:DFTPlotUO"

Private myFrequencyComponentOutput As Boolean
Private myAmplitudeOutput As Boolean
Private myPhaseOutput As Boolean
Private myFrequencyMaxComponents As Long

Private myInputVariableOutput As Boolean
Private myInputVariableMaxComponents As Long



Private myOutputRange As String

'ResetToDefault
Public Sub ResetToDefault()
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))

  myFrequencyComponentOutput = True
  myAmplitudeOutput = True
  myPhaseOutput = True
  myFrequencyMaxComponents = 1
  
  myInputVariableOutput = False
  myInputVariableMaxComponents = 1
End Sub


Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get FRQUENCY_OUTPUT() As Boolean
  FRQUENCY_OUTPUT = myFrequencyComponentOutput
End Property

Public Property Let FRQUENCY_OUTPUT(ByVal vNewValue As Boolean)
  myFrequencyComponentOutput = vNewValue
End Property

Public Property Get AMPLITUDE_OUTPUT() As Boolean
  AMPLITUDE_OUTPUT = myAmplitudeOutput
End Property

Public Property Let AMPLITUDE_OUTPUT(ByVal vNewValue As Boolean)
  myAmplitudeOutput = vNewValue
End Property

Public Property Get PHASE_OUTPUT() As Boolean
  PHASE_OUTPUT = myPhaseOutput
End Property

Public Property Let PHASE_OUTPUT(ByVal vNewValue As Boolean)
  myPhaseOutput = vNewValue
End Property

Public Property Get FREQUENCY_MAX_COMP() As Long
  FREQUENCY_MAX_COMP = myFrequencyMaxComponents
End Property

Public Property Let FREQUENCY_MAX_COMP(ByVal vNewValue As Long)
  myFrequencyMaxComponents = vNewValue
End Property

Public Property Get INPUT_VARIABLE_OUTPUT() As Boolean
  INPUT_VARIABLE_OUTPUT = myInputVariableOutput
End Property

Public Property Let INPUT_VARIABLE_OUTPUT(ByVal vNewValue As Boolean)
  myInputVariableOutput = vNewValue
End Property

Public Property Get INPUT_VARIABLE_MAX_COMP() As Long
  INPUT_VARIABLE_MAX_COMP = myInputVariableMaxComponents
End Property

Public Property Let INPUT_VARIABLE_MAX_COMP(ByVal vNewValue As Long)
  myInputVariableMaxComponents = vNewValue
End Property



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"
  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim Labels(1 To 5) As String
  Dim LabelComments(1 To 5) As String
  Dim i As Long
  Dim xVars As Long
  Dim rows As Long
  Dim column As Long
  Dim szTemp As String
  
  oldSignificancelevel = myGeneralUO.significance
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
 
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_HEADER) ' "Discrete Fourier Transform (DFT)"
  End With

  ' Draw a Borders
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With

  column = 1
  If Me.FRQUENCY_OUTPUT Then
  
    Labels(1) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_COMP_CAPTION) ' "Comp"
    LabelComments(1) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_COMP_NOTE) ' "Comp"
    Labels(2) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_AMP_CAPTION) ' "Amp"
    LabelComments(2) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_AMP_NOTE) ' "Amp"
    Labels(3) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_PHASE_CAPTION) ' "Phase"
    LabelComments(3) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_FREQ_PHASE_NOTE) ' "Phase"
  
    ' print the labels now
    For i = 1 To 3
      myRange.Cells(2, i).Select
      With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = Labels(i)
        If .Comment Is Nothing Then
          .AddComment LabelComments(i)
        Else
          .Comment.Text Text:=LabelComments(i)
        End If
      End With
    Next i
    
    szTemp = "=DFT(" & myGeneralUO.INPUT_DATA_NO_LABELS & "," & myGeneralUO.DATA_ORDER & ","
    For i = 0 To Me.FREQUENCY_MAX_COMP
      myRange.Cells(3 + i, 1).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = i
      End With
      
      column = 2
      If Me.AMPLITUDE_OUTPUT Then
        myRange.Cells(3 + i, column).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp & myRange.Cells(3 + i, 1).Address(False, True) & ",1)"
          .NumberFormat = "#0.00"
        End With
        
        column = 3
      End If
      
      If Me.PHASE_OUTPUT Then
        myRange.Cells(3 + i, column).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp & myRange.Cells(3 + i, 1).Address(False, True) & ",2)"
          .NumberFormat = "#0.00"
        End With
      End If
    Next i
    
    column = 5
  End If
  
  If Me.INPUT_VARIABLE_OUTPUT Then
    Labels(1) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_OBS_CAPTION) ' "Obs."
    LabelComments(1) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_OBS_NOTE) ' "Obs."
    
    Labels(2) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_FITTED_CAPTION) ' "Fitted"
    LabelComments(2) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_FITTED_NOTE) ' "Fitted"
    
    Labels(3) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_MAX_COMP_CAPTION)  ' "Max Comp"
    LabelComments(3) = MSGAPI.getLocaleString(IDS_UI_DFT_OUTPUT_INPUT_VAR_MAX_COMP_NOTE)  ' "Max Comp"
  
    Range(myRange.Cells(2, column), myRange.Cells(2, column + 2)).Select
    With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
  
  
    ' print the labels now
    For i = 1 To 3
      myRange.Cells(2, column + i - 1).Select
      With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = Labels(i)
        If .Comment Is Nothing Then
          .AddComment LabelComments(i)
        Else
          .Comment.Text Text:=LabelComments(i)
        End If
      End With
    Next i
  
  
    'Print the observations
    rows = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
    For i = 1 To rows
      myRange.Cells(2 + i, column).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = i
      End With
    Next i
    
    myRange.Cells(3, column + 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = Me.INPUT_VARIABLE_MAX_COMP
    End With
    
    '[NUM-402] A workaround for long worksheet names and formula Array (limit of 255)
    ' X_X_X() is a placeholder for myGeneralUO.INPUT_DATA_NO_LABELS
    szTemp = "DFT(" & "_XYZ_" & "," & myGeneralUO.DATA_ORDER & ",-1,"
    szTemp = "=IDFT( NxSubset(" & szTemp & "1),1," & myRange.Cells(3, column + 2).Address & ")," & _
                    "NxSubset(" & szTemp & "2),1," & myRange.Cells(3, column + 2).Address & ")," & _
                    "COUNT(RMNA(" & "_XYZ_" & ")))"

    If Len(szTemp) > 255 Then
      MsgBox "Error, worksheet name is too long"
      Err.Raise 514, "VBAProject", "Worksheet name is too long, IDFT array formula > 255"
    End If
    
    ' MFE: using NumXL Replace Regex function to replace the token with the range.
    szTemp = vb_REPLACE(szTemp, "_XYZ_", myGeneralUO.INPUT_DATA_NO_LABELS)
    
    Range(myRange.Cells(3, column + 1), myRange.Cells(3 + rows - 1, column + 1)).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .FormulaArray = szTemp
'     .Replace What:="_XYZ_", Replacement:=myGeneralUO.INPUT_DATA_NO_LABELS, LookAt:=xlPart, MatchByte:=False, MatchCase:=False
      .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
    End With
  
  End If
  
  

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Attribute VB_Name = "DesStats"
Attribute VB_Base = "0{85152060-5BB1-4591-A65D-D9148EA5104C}{1867C641-0867-4627-8C05-35C0F223D713}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: DesStats.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/DesStats.frm $
'
Private Const msMODULE As String = "USERFORM:DescStats"
Private Const zenSlugId As String = "articles/216477823"

Private userOptions As DescStatUO
Private callValidateForm As Boolean
Private mbOK As Boolean

Public Property Get OK() As Boolean
  OK = mbOK
End Property
Private Sub btnCancel_Click()
  mbOK = False
  ' Me.Hide
  Unload Me
End Sub


Private Sub OldUserForm_Activate()
  Const sSOURCE As String = "UserForm_Activate"
  
  Dim szTmp As String
  
  ' Check if the active cell corresponds to the output range
  If Len(userOptions.OUTPUT_RANGE) > 0 Then
    szTmp = ActiveCell.Address(True, True)
    If Not (szTmp = userOptions.OUTPUT_RANGE) Then
      Call ResetToDefault
    End If
  Else
    Call ResetToDefault
  End If


End Sub

Private Sub OldUserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = vbFormControlMenu Then
    Cancel = True
    Me.btnCancel = True
    ' Call btnCancel_Click
  End If
End Sub


' Generate the output cells with formula in the target cell-area
Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR) ' "The time series range should be one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) ' "The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefOutputRange)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
          Exit Sub
        Else
          If RefEditSignificanceLevel.enabled Then
            If Not chkSignificanceLevel(RefEditSignificanceLevel.value) Then
              MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
              RefEditSignificanceLevel.value = vbNullString
              Exit Sub
            End If
          End If
          
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATUS_COMPLETE) ' "Calculated Summary Statistics"
          
          Call userOptions.printSummaryStatisticsOutput(myRange)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If

Cleanup:
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub



Private Sub chkARCHTest_Click()
  userOptions.ARCH_TEST = chkARCHTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkAscending_Click()
   userOptions.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkbxAverage_Change()
  userOptions.mean = chkbxAverage.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub chkkSkew_Change()
  userOptions.SKEW = chkkSkew.value
  
  If Not userOptions.SKEW Then
    chkSkewTest.value = False
  End If

  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkKurtosis_Change()
  userOptions.XKURT = chkKurtosis.value
  
  If Not userOptions.XKURT Then
    chkKurtosis.value = False
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub chkMaximum_Change()
  userOptions.MAX = chkMaximum.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkMedian_Change()
  userOptions.MEDIAN = chkMedian.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub ChkMinimum_Change()
  userOptions.MIN = ChkMinimum.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkNormalityTest_Click()
  userOptions.NORMAL_TEST = chkNormalityTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkQuartile_Change()
  userOptions.Q1 = chkQuartile.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkQuartile3_Change()
  userOptions.Q3 = chkQuartile3.value
  
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkSTDEV_Change()
  userOptions.STDEV = chkSTDEV.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub ChkWhiteNoise_Click()
  userOptions.WN_TEST = ChkWhiteNoise.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkMeanTest_Change()
  userOptions.MEAN_TEST = chkMeanTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkSkewTest_Change()
  userOptions.SKEW_TEST = chkSkewTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkKurtTest_Change()
  userOptions.XKURT_TEST = chkKurtTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub RefInputArray_Change()
    userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
    userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Prepare the form with proper
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_FRM_CAPTION)
  
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  TimeSeriesLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  TimeSeriesLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  StatisticsFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_FRAME_CAPTION)
  StatisticsFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_FRAME_HELPTIP)
  
  StatisticalTestingFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_FRAME_CAPTION)
  StatisticalTestingFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_FRAME_HELPTIP)
  
  chkbxAverage.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_AVG_CHKBX_CAPTION)
  chkbxAverage.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_AVG_CHKBX_HELPTIP)
  
  chkSTDEV.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_STD_CHKBX_CAPTION)
  chkSTDEV.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_STD_CHKBX_HELPTIP)
  
  chkkSkew.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_SKEW_CHKBX_CAPTION)
  chkkSkew.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_SKEW_CHKBX_HELPTIP)
  
  chkKurtosis.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_XKURT_CHKBX_CAPTION)
  chkKurtosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_XKURT_CHKBX_HELPTIP)
  
  chkMedian.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MEDIAN_CHKBX_CAPTION)
  chkMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MEDIAN_CHKBX_HELPTIP)
  
  ChkMinimum.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MIN_CHKBX_CAPTION)
  ChkMinimum.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MIN_CHKBX_HELPTIP)
  
  chkMaximum.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MAX_CHKBX_CAPTION)
  chkMaximum.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MAX_CHKBX_HELPTIP)
  
  chkQuartile.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q1_CHKBX_CAPTION)
  chkQuartile.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q1_CHKBX_HELPTIP)
  
  chkQuartile3.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q3_CHKBX_CAPTION)
  chkQuartile3.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q3_CHKBX_HELPTIP)
  
  chkMeanTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_MEAN_CHKBX_CAPTION)
  chkMeanTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_MEAN_CHKBX_HELPTIP)
  
  chkSkewTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_SKEW_CHKBX_CAPTION)
  chkSkewTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_SKEW_CHKBX_HELPTIP)
  
  chkKurtTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_XKURT_CHKBX_CAPTION)
  chkKurtTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_XKURT_CHKBX_HELPTIP)
  
  ChkWhiteNoise.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_WNTEST_CHKBX_CAPTION)
  ChkWhiteNoise.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_WNTEST_CHKBX_HELPTIP)
  
  chkNormalityTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_NORMAL_CHKBX_CAPTION)
  chkNormalityTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_NORMAL_CHKBX_HELPTIP)
  
  chkARCHTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_CAPTION)
  chkARCHTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_HELPTIP)
  
  chkARCHTest.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_CAPTION)
  chkARCHTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_EDITAREA_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_HELP_BTN_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OK_BTN_HELPTIP)
  
  
  On Error GoTo ErrHdler
    
    ' Select the first Item as the default
    Set userOptions = New DescStatUO
    
    Call ResetToDefault
    
    Call validateForm
ErrHdler:
    Exit Sub
End Sub

Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = userOptions.INPUT_RANGE
  Call userOptions.ResetToDefault
  userOptions.INPUT_RANGE = szInput
  
  chkbxAverage.value = userOptions.mean
  chkSTDEV.value = userOptions.STDEV
  chkkSkew.value = userOptions.SKEW
  chkKurtosis.value = userOptions.XKURT
  chkMedian.value = userOptions.MEDIAN
  chkQuartile.value = userOptions.Q1
  chkQuartile3.value = userOptions.Q3
  ChkMinimum.value = userOptions.MIN
  chkMaximum.value = userOptions.MAX
  chkMeanTest.value = userOptions.MEAN_TEST
  chkSkewTest.value = userOptions.SKEW_TEST
  chkKurtTest.value = userOptions.XKURT_TEST
  ChkWhiteNoise.value = userOptions.WN_TEST
  chkNormalityTest.value = userOptions.NORMAL_TEST
  chkARCHTest.value = userOptions.ARCH_TEST
  chkAscending.value = userOptions.ASCENDING
  RefEditSignificanceLevel.value = userOptions.significance
  RefOutputRange.value = userOptions.OUTPUT_RANGE
  RefInputArray.value = userOptions.INPUT_RANGE
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim st_sel As Boolean
  
  ' Do we have input data
  Dim dataAvailable As Boolean
  
  ' Do we have a valid alpha
  Dim valid_alpha As Boolean
  
  valid_alpha = chkSignificanceLevel(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' No alpha, no test
  If Not valid_alpha Then
    chkMeanTest.enabled = False
    chkSkewTest.enabled = False
    chkKurtTest.enabled = False
    ChkWhiteNoise.enabled = False
    chkNormalityTest.enabled = False
    chkARCHTest.enabled = False
  Else
    chkMeanTest.enabled = (chkbxAverage.value And chkbxAverage.enabled) And dataAvailable
    chkSkewTest.enabled = (chkkSkew.value And chkkSkew.enabled) And dataAvailable
    chkKurtTest.enabled = (chkKurtosis.value And chkKurtosis.enabled) And dataAvailable
    ChkWhiteNoise.enabled = dataAvailable
    chkNormalityTest.enabled = dataAvailable
    chkARCHTest.enabled = dataAvailable
  End If
  
  chkbxAverage.enabled = dataAvailable
  chkkSkew.enabled = dataAvailable
  chkKurtosis.enabled = dataAvailable
  chkMaximum.enabled = dataAvailable
  ChkMinimum.enabled = dataAvailable
  chkQuartile.enabled = dataAvailable
  chkSTDEV.enabled = dataAvailable
  chkQuartile3.enabled = dataAvailable
  chkMedian.enabled = dataAvailable
  RefEditSignificanceLevel.enabled = dataAvailable And _
                                     (chkMeanTest.value Or _
                                      chkSkewTest.value Or _
                                      chkKurtTest.value Or _
                                      ChkWhiteNoise.value Or _
                                      chkNormalityTest.value _
                                      Or chkARCHTest.value)
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
  
  st_sel = chkbxAverage.value Or chkkSkew.value Or chkKurtosis.value Or chkMaximum.value Or chkMedian.value
  st_sel = st_sel Or ChkMinimum.value Or chkQuartile.value Or chkSTDEV.value Or chkQuartile3
  
  ready = False
  
  If st_sel Then
      If Utilities.isCellRangeValid(RefOutputRange.value) Then
          If Utilities.isCellRangeValid(RefInputArray.value) Then
              ready = True
          End If
      End If
  End If

  ' Alpha must be correct as well
  If st_sel Then
    st_sel = valid_alpha
  End If


  btnOK.enabled = ready
  btnOK.Default = ready
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub


Private Function chkSignificanceLevel(alpha As String) As Boolean
  chkSignificanceLevel = isAlphaValid(alpha)
End Function
Attribute VB_Name = "DescStatUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16099 $
'  $Date: 2017-01-06 09:18:14 -0600 (Fri, 06 Jan 2017) $
'  $Author: mohamad $
'  $Id: DescStatUO.cls 16099 2017-01-06 15:18:14Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/DescStatUO.cls $
'
Private Const msMODULE As String = "CLASS:DescStatUO"

Private myAverage As Boolean
Private myStdev As Boolean
Private mySKew As Boolean
Private myXKurt As Boolean
Private myMedian As Boolean
Private myMin As Boolean
Private myMax As Boolean
Private myQ1 As Boolean
Private myQ3 As Boolean
Private myTestMean As Boolean
Private myTestSkew As Boolean
Private myTestXkurt As Boolean
Private myWNTest As Boolean
Private myARCHTest As Boolean
Private myNormalityTest As Boolean
Private myAscending As Boolean

Private myInputData As String
Private myOutputRange As String
Private mySignificanceLevel As String

Public Property Get mean() As Boolean
    mean = myAverage
End Property
Public Property Let mean(value As Boolean)
    myAverage = value
End Property


Public Property Get STDEV() As Boolean
    STDEV = myStdev
End Property
Public Property Let STDEV(value As Boolean)
    myStdev = value
End Property

Public Property Get SKEW() As Boolean
    SKEW = mySKew
End Property
Public Property Let SKEW(value As Boolean)
    mySKew = value
End Property


Public Property Get XKURT() As Boolean
    XKURT = myXKurt
End Property
Public Property Let XKURT(value As Boolean)
    myXKurt = value
End Property

Public Property Get MEDIAN() As Boolean
    MEDIAN = myMedian
End Property
Public Property Let MEDIAN(value As Boolean)
    myMedian = value
End Property

Public Property Get MIN() As Boolean
    MIN = myMin
End Property
Public Property Let MIN(value As Boolean)
    myMin = value
End Property

Public Property Get MAX() As Boolean
    MAX = myMax
End Property
Public Property Let MAX(value As Boolean)
    myMax = value
End Property

Public Property Get Q1() As Boolean
    Q1 = myQ1
End Property
Public Property Let Q1(value As Boolean)
    myQ1 = value
End Property

Public Property Get Q3() As Boolean
    Q3 = myQ3
End Property
Public Property Let Q3(value As Boolean)
    myQ3 = value
End Property


Public Property Get MEAN_TEST() As Boolean
    MEAN_TEST = myTestMean
End Property
Public Property Let MEAN_TEST(value As Boolean)
    myTestMean = value
End Property

Public Property Get SKEW_TEST() As Boolean
    SKEW_TEST = myTestSkew
End Property
Public Property Let SKEW_TEST(value As Boolean)
    myTestSkew = value
End Property

Public Property Get XKURT_TEST() As Boolean
    XKURT_TEST = myTestXkurt
End Property
Public Property Let XKURT_TEST(value As Boolean)
    myTestSkew = value
End Property


Public Property Get WN_TEST() As Boolean
    WN_TEST = myWNTest
End Property
Public Property Let WN_TEST(value As Boolean)
    myWNTest = value
End Property

Public Property Get ARCH_TEST() As Boolean
    ARCH_TEST = myARCHTest
End Property
Public Property Let ARCH_TEST(value As Boolean)
    myARCHTest = value
End Property

Public Property Get NORMAL_TEST() As Boolean
    NORMAL_TEST = myNormalityTest
End Property
Public Property Let NORMAL_TEST(value As Boolean)
    myNormalityTest = value
End Property


Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
    significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

Public Sub ResetToDefault()
  myAverage = True
  myStdev = True
  mySKew = True
  myXKurt = True
  myMedian = True
  myMin = True
  myMax = True
  myQ1 = True
  myQ3 = True
  myTestMean = True
  myTestSkew = True
  myTestXkurt = True
  myWNTest = True
  myARCHTest = True
  myNormalityTest = True
  myAscending = True
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  myInputData = ""
End Sub


Public Sub PrintBasicStatistics(myRange As Range)
  Const sSOURCE As String = "PrintBasicStatistics"
  
  Dim S(1 To 10, 1 To 2) As String    ' (1) Display the Basic Statistics
  Dim i As Long
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  
  On Error GoTo ErrorHdler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_FRM_CAPTION) ' "Descriptive Statistics"
  End With
  
  ' Set the borderline
  Range(myRange.Cells(1, 1), myRange.Cells(1, 3)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  i = 1
  If myAverage Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_AVG_CHKBX_CAPTION) & ": " ' "AVERAGE:"
    S(i, 2) = "=AVERAGE(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  If myStdev Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_STD_CHKBX_CAPTION) & ": "  '"STD DEV:"
    S(i, 2) = "=STDEV(RMNA(" & myInputData & "))"
    i = i + 1
  ElseIf (mySKew Or myXKurt) Then
    S(i, 1) = ""
    S(i, 2) = ""
    i = i + 1
  End If
    
  If mySKew Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_SKEW_CHKBX_CAPTION) & ": "  ' "SKEW:"
    S(i, 2) = "=SKEW(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  If myXKurt Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_XKURT_CHKBX_CAPTION) & ": " ' "EXCESS-KURTOSIS:"
    S(i, 2) = "=KURT(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  S(i, 1) = vbNullString
  S(i, 2) = vbNullString
  i = i + 1
    
  If myMedian Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MEDIAN_CHKBX_CAPTION) & ": " '"MEDIAN:"
    S(i, 2) = "=MEDIAN(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  If myMin Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MIN_CHKBX_CAPTION) & ": " ' "MIN:"
    S(i, 2) = "=MIN(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  If myMax Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_MAX_CHKBX_CAPTION) & ": " '"MAX:"
    S(i, 2) = "=MAX(RMNA(" & myInputData & "))"
    i = i + 1
  End If
    
  If myQ1 Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q1_CHKBX_CAPTION) & ": "  '"Q 1:"
    S(i, 2) = "=Quartile(RMNA(" & myInputData & "),1)"
    i = i + 1
  End If
    
  If myQ3 Then
    S(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_STATISTICS_Q3_CHKBX_CAPTION) & ": "  '"Q 3:"
    S(i, 2) = "=Quartile(RMNA(" & myInputData & "),3)"
    i = i + 1
  End If
    
    
  For i = 1 To 10
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
        .HorizontalAlignment = xlRight
        .Font.Bold = True
        .value = S(i, 1)
    End With
    
    myRange.Cells(i + 2, 3).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = S(i, 2)
        If i <> 3 And i <> 4 Then
            ' Set all statistics to have the same number format as original data
            .NumberFormat = Range(myInputData).NumberFormat
        Else
            .NumberFormat = "0.00"
        End If
    End With
  Next i
  
  Exit Sub
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Exit Sub
End Sub

' Print a decorated cell to designated the statistical significance level
Public Sub PrintSignificanceLevel(myRange As Range)
  Const sSOURCE As String = "PrintSignificanceLevel"
  
  
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
    
  alphaLevel = getAlphaValue(mySignificanceLevel)
  alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .formula = "=" & alphaUSLevel
      .NumberFormat = "0.00%"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE)  'HYPOTHESIS_TEST_ALPHA_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE)  'HYPOTHESIS_TEST_ALPHA_NOTE
      End If
      .Comment.visible = False
  
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      
      With .Interior
          .Pattern = xlSolid
          .PatternColorIndex = xlAutomatic
          .Color = vbYellow
      End With
      With .Borders(xlEdgeRight)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeLeft)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
End Sub

Public Sub PrintSignificanceTest(myRange As Range)
  Const sSOURCE As String = "PrintSignificanceTest"
  
  Dim SkewTest As Boolean, MeanTest As Boolean, KurtTest As Boolean
  Dim i, j As Long
  Dim StatTest(1 To 4, 1 To 3) As String
  
  MeanTest = Len(mySignificanceLevel) > 0 And myTestMean
  SkewTest = Len(mySignificanceLevel) > 0 And myTestSkew
  KurtTest = Len(mySignificanceLevel) > 0 And myTestXkurt
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
    
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_SIGNIFICANCE_TEST_HEADER)  '"Significance Test"
  End With
    
  ' Set the borderline
  Range(myRange.Cells(1, 1), myRange.Cells(1, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
            
  Dim Labels(1 To 3, 2) As String
  Labels(1, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TARGET_HEADER)  ' "Target"
  Labels(1, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE)  ' RESID_DIAG_TARGET_NOTE
  Labels(2, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
  Labels(2, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_PV_NOTE) 'HYPOTHESIS_TEST_PV_NOTE
  Labels(3, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER)  ' "SIG?"
  Labels(3, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_RESID_DIAG_SIG_NOTE) ' RESID_DIAG_SIG_NOTE
    
  For i = 1 To 3
    myRange.Cells(2, i).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = Labels(i, 1)
      If .Comment Is Nothing Then
        .AddComment Labels(i, 2)
      Else
        .Comment.Text Text:=Labels(i, 2)
      End If
      .Comment.visible = False
    End With
  Next i
  
  i = 1
  If MeanTest Then
    StatTest(i, 1) = FormatNumber(0#, 2, True, True)
    StatTest(i, 2) = "=TEST_MEAN(" & myInputData & "," & myRange.Cells(3, 1).Address(False, True) & ")"
    StatTest(i, 3) = "=IF(" & myRange.Cells(3, 2).Address(False, True) & " > " & mySignificanceLevel & "/2, FALSE, TRUE)"
    i = i + 1
  ElseIf myAverage Then
    i = i + 1
  End If
    
    StatTest(i, 1) = vbNullString
    StatTest(i, 2) = vbNullString
    StatTest(i, 3) = vbNullString
    i = i + 1
    
    If SkewTest Then
      StatTest(i, 1) = FormatNumber(0#, 2, True, True)
      StatTest(i, 2) = "=TEST_SKEW(" & myInputData & ")"
      StatTest(i, 3) = "=IF(" & myRange.Cells(5, 2).Address(False, True) & " > " & mySignificanceLevel & "/2, FALSE, TRUE)"
      i = i + 1
    ElseIf mySKew Then
      i = i + 1
    End If
    
    
    If KurtTest Then
      StatTest(i, 1) = FormatNumber(0#, 2, True, True)
      StatTest(i, 2) = "=TEST_XKURT(" & myInputData & ")"
      StatTest(i, 3) = "=IF(" & myRange.Cells(6, 2).Address(False, True) & " > " & mySignificanceLevel & "/2, FALSE, TRUE)"
      i = i + 1
    ElseIf myXKurt Then
      i = i + 1
    End If
    
    
    For i = 1 To 4
        For j = 1 To 3
            myRange.Cells(2 + i, j).Select
            With Selection
                .HorizontalAlignment = xlCenter
                .Font.Bold = False
                .NumberFormat = "0.000"
                .formula = StatTest(i, j)
            End With
            If j = 2 Then
                Selection.NumberFormat = "0.00%"
            End If
        Next j
    Next i
End Sub


' Print out the White-noise, Normality and ARCH effect test
Public Sub PrintMiscTest(myRange As Range)
  Const sSOURCE As String = "PrintMiscTest"
  
  Dim DistTestlabels(1 To 3, 2) As String         ' Perform the rest of the statistical test
  Dim TestDetails(1 To 3, 1 To 4) As String     ' Perform the rest of the statistical test
  Dim i, j As Long

  If Len(mySignificanceLevel) = 0 Or Not (myWNTest Or myARCHTest Or myNormalityTest) Then
    ' No test to do, exit
    Exit Sub
  End If
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  DistTestlabels(1, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TEST_HEADER)  '"Test"
  DistTestlabels(1, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_STATISTICAL_TEST_HEADER) ' "Statistical Test"
  
  DistTestlabels(2, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) '"p-value"
  DistTestlabels(2, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_PV_NOTE) ' HYPOTHESIS_TEST_PV_NOTE
  
  DistTestlabels(3, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
  DistTestlabels(3, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PASS_TEST_HEADER)  '"Pass the test?"
        
  For i = 1 To 3
    myRange.Cells(1, i).Select
    
    With Selection
      If DistTestlabels(i, 1) <> vbNullString Then
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = DistTestlabels(i, 1)
        If .Comment Is Nothing Then
          .AddComment DistTestlabels(i, 2)
        Else
          .Comment.Text Text:=DistTestlabels(i, 2)
        End If
        .Comment.visible = False
       
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
      End If
    End With
  Next i
    
  
  i = 1
  If DesStats.ChkWhiteNoise.value Then
    TestDetails(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_WNTEST_ROW_HEADER)
    TestDetails(i, 2) = "=WNTest(" & myInputData & ", " & IIf(myAscending, 1, 0) & ")"
    TestDetails(i, 3) = "=IF(" & myRange.Cells(2, 2).Address(False, True) & " > " & mySignificanceLevel & ", TRUE, FALSE)"
    TestDetails(i, 4) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_WNTEST_CHKBX_HELPTIP)
    i = i + 1
  End If
  
  If DesStats.chkNormalityTest.value Then
    TestDetails(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_NORMALTEST_ROW_HEADER)
    TestDetails(i, 2) = "=NormalityTest(" & myInputData & ", 1)"
    TestDetails(i, 3) = "=IF(" & myRange.Cells(3, 2).Address(False, True) & " > " & mySignificanceLevel & ", TRUE, FALSE)"
    TestDetails(i, 4) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_NORMAL_CHKBX_HELPTIP)
    i = i + 1
  End If
    
  If DesStats.chkARCHTest.value Then
    TestDetails(i, 1) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_ARCHTEST_ROW_HEADER)
    TestDetails(i, 2) = "=ArchTest(" & myInputData & "," & IIf(myAscending, 1, 0) & ")"
    TestDetails(i, 3) = "=IF(" & myRange.Cells(4, 2).Address(False, True) & " < " & mySignificanceLevel & ", TRUE, FALSE)"
    TestDetails(i, 4) = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_HELPTIP)
    i = i + 1
  End If
    
  For i = 1 To 3
    myRange.Cells(i + 1, 1).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = TestDetails(i, 1)
      If .Comment Is Nothing Then
        .AddComment TestDetails(i, 4)
      Else
        .Comment.Text Text:=TestDetails(i, 4)
      End If
    End With
    
    For j = 2 To 3
       myRange.Cells(i + 1, j).Select
  
       With Selection
           .HorizontalAlignment = xlCenter
           .NumberFormat = "0.000"
           .Font.Bold = False
           .formula = TestDetails(i, j)
       End With
       
       If j = 2 Then
           Selection.NumberFormat = "0.00%"
       End If
    Next j
  Next i
End Sub


' Master routine that generate all output
Public Sub printSummaryStatisticsOutput(myRange As Range)
  Const sSOURCE As String = "printSummaryStatisticsOutput"
  
  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
    
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = mySignificanceLevel
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) Print summary Statistics (starting at row=1, column=1 - relative)
  PrintBasicStatistics (myRange.Cells(1, 1))
          
  ' (2) Set the significance Level cell (at row 1 and column 8 - relative)
  If myTestSkew Or myTestMean Or myTestXkurt Then
    Call PrintSignificanceLevel(myRange.Cells(1, 8))

    Me.significance = myRange.Cells(1, 8).Address(True, True)
    
    PrintSignificanceTest (myRange.Cells(1, 5))
  End If
              
  ' (4) Print the white-noise, Normality and ARCH effect Test starting at row 1 and column 10
    PrintMiscTest (myRange.Cells(1, 10))
  
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  mySignificanceLevel = oldSignificancelevel
  Exit Sub

ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub
Attribute VB_Name = "EDFForm"
Attribute VB_Base = "0{215A67DA-8077-4824-994D-8942B635CF72}{13B20F7A-9E7C-4EF7-AB4D-7667531B7866}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: EDFForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/EDFForm.frm $
'
Private Const msMODULE As String = "USERFORM:EDF"
Private Const zenSlugId As String = "articles/215108206"

'PrincipalComponentUI
Private userOptions As EDFPlotUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub


Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_EDF_FRM_CAPTION)
  
  Me.MultiPage1.Pages("GeneralPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("GeneralPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_HELPTIP)
  
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)
  
  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  RefEditOutputTable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_HELPTIP)
  
  chkOverlayNormal.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_CAPTION)
  chkOverlayNormal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_HELPTIP)

  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  
  ' Select the first Item as the default
  Set userOptions = New EDFPlotUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  ' Override the default
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  RefEditOutputTable.value = userOptions.OUTPUT_TABLE
  RefEditOutputGraph.value = userOptions.OUTPUT_GRAPH
  
  'Missing Values section
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  chkOverlayNormal.value = userOptions.NORMAL_OVERLAY
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
    
  dataAvailable = dataAvailable And _
                  Utilities.isCellRangeValid(RefEditOutputTable.value)

  cmdOK.enabled = dataAvailable
End Sub


Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditOutputTable_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefEditOutputTable.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefEditOutputGraph_Change()
  userOptions.OUTPUT_GRAPH = Utilities.procInputCellsRange(RefEditOutputGraph.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkOverlayNormal_Click()
  userOptions.NORMAL_OVERLAY = chkOverlayNormal.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


' We are done, let's print and plot the graph
Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim myXRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  ' Basic check for X1 range
  Set myXRange = Range(myGeneralUO.INPUT_DATA_NO_LABELS)
  If myXRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Invalid/Missing cells range for the explanatory variables (X)"
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) ' "Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    Exit Sub
  End If
    
  Set myRange = Range(userOptions.OUTPUT_TABLE)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_EDF_STATUSBAR_PLOT_CALCULATION_MSG)  '"Empirical Distribution Function (EDF) Calculation"
  
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
  
  mbOK = True
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "EDFPlotUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: EDFPlotUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/EDFPlotUO.cls $
'
Private Const msMODULE As String = "CLASS:EDFPlotUO"


Private myOverlayNormal As Boolean
Private myOutputTableRange As String
Private myOutputGraphRange As String


'ResetToDefault
Public Sub ResetToDefault()
  myOutputTableRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  myOutputGraphRange = Utilities.formatCellsRange(ActiveCell.offset(0, 7).Address(True, True))
  
  myOverlayNormal = True
End Sub


Public Property Get NORMAL_OVERLAY() As Boolean
    NORMAL_OVERLAY = myOverlayNormal
End Property

Public Property Let NORMAL_OVERLAY(ByVal vNewValue As Boolean)
  myOverlayNormal = vNewValue
End Property

Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputTableRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputTableRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"
  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim Labels(1 To 5) As String
  Dim i As Long
  Dim xVars As Long
  Dim rows As Long
  Dim columns As Long
  Dim szTemp As String
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
 
  ' print the dataset mean and stdev
  myRange.Cells(1, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MEAN_HEADER)  '"Mean"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MEAN_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MEAN_NOTE)
    End If
  End With
  
  myRange.Cells(1, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_HEADER) '"STEDEV"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_NOTE)
    End If
  End With
  
  ' Draw a Borders
  Range(myRange.Cells(1, 4), myRange.Cells(1, 5)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  myRange.Cells(2, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=Average(RMNA(" & myGeneralUO.GET_INPUT_DATA_RNG & "))"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
    
  myRange.Cells(2, 5).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=STDEV(RMNA(" & myGeneralUO.GET_INPUT_DATA_RNG & "))"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
  
  ' print the table header
  myRange.Cells(3, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_EDF_OUTPUT_TABLE_HEADER) '"Empirical Distribution Function (EDF)"
  End With

  ' Draw a Borders
  Range(myRange.Cells(4, 1), myRange.Cells(4, 5)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With

  Labels(1) = myGeneralUO.GET_INPUT_DATA_LABEL(1)
  Labels(2) = MSGAPI.getLocaleString(IDS_UI_EDF_OUTPUT_TABLE_EDF_FIELD_HEADER) '"EDF"
  Labels(3) = MSGAPI.getLocaleString(IDS_UI_EDF_OUTPUT_TABLE_XBAR_FIELD_HEADER) '"X-Bar"
  Labels(4) = MSGAPI.getLocaleString(IDS_UI_EDF_OUTPUT_TABLE_YBAR_FIELD_HEADER) '"Y-Bar"
  Labels(5) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_HEADER) '"Normal"

  ' print the labels now
  For i = 1 To 5
    myRange.Cells(4, i).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .value = Labels(i)
    End With
  Next i

  ' print the X-value (sorted)
  rows = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
  Range(myRange.Cells(5, 1), myRange.Cells(4 + rows, 1)).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .FormulaArray = "=NxSort(" & myGeneralUO.GET_INPUT_DATA_RNG & ",1,2)"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
  
  ' Compute the EDF value now
  For i = 1 To rows
    myRange.Cells(4 + i, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=EDF(" & myGeneralUO.GET_INPUT_DATA_RNG & "," & myRange.Cells(4 + i, 1).Address(False, True) & ",1)"
      .NumberFormat = "#0.00"
    End With
    
    ' Compute the X-Bar
    If i <> rows Then
      myRange.Cells(4 + i, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=" & myRange.Cells(5 + i, 1).Address(False, True) & "-" & myRange.Cells(4 + i, 1).Address(False, True)
        .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
      End With
    End If
    
    ' Compute Y-Bar
    If i <> 1 Then
      myRange.Cells(4 + i, 4).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=" & myRange.Cells(4 + i, 2).Address(False, True) & "-" & myRange.Cells(3 + i, 2).Address(False, True)
        .NumberFormat = "#0.00"
      End With
    End If
    
    If Me.NORMAL_OVERLAY Then
      myRange.Cells(4 + i, 5).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NORMDIST(" & myRange.Cells(4 + i, 1).Address(False, True) & "," & myRange.Cells(2, 4).Address & "," & myRange.Cells(2, 5).Address & ",1)"
        .NumberFormat = "#0.00"
      End With
    End If
  Next i


GraphHere:
  
  ' Now, Let's create the scatter plot
  Dim EDFPlotRange As Object
  Set EDFPlotRange = Range(Range(Me.OUTPUT_GRAPH).Cells(1, 1), Range(Me.OUTPUT_GRAPH).Cells(14, 7))
  
  rows = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
  
  'Range(myRange.Cells(5, 1), myRange.Cells(4 + rows, 2)).Select
  If ActiveSheet.Name <> EDFPlotRange.Worksheet.Name Then
    Sheets(EDFPlotRange.Worksheet.Name).Activate
  End If
  
  
  EDFPlotRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=EDFPlotRange.Left, Width:=EDFPlotRange.Width, Top:=EDFPlotRange.Top, Height:=EDFPlotRange.Height)
    .Chart.ChartType = xlXYScatterLinesNoMarkers
    .Chart.SetSourceData source:=Range(myRange.Cells(5, 1), myRange.Cells(4 + rows, 2))
    .Chart.HasTitle = True
  
    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False
    .Chart.ChartTitle.Text = MSGAPI.getLocaleString(IDS_UI_EDF_OUTPUT_TABLE_HEADER) ' "Empirical Distribution Function (EDF)"
  
    With .Chart.plotArea
      With .Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
      End With
      .Interior.ColorIndex = xlNone
    End With
      
    ' (2) Formate the Series collection using error bars
    If Me.NORMAL_OVERLAY Then
      .Chart.plotArea.Select
      .Chart.SeriesCollection.NewSeries
      With .Chart.SeriesCollection(2)
        .Name = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_HEADER)  '"Normal"
        .XValues = Range(myRange.Cells(5, 1), myRange.Cells(4 + rows, 1))
        .Values = Range(myRange.Cells(5, 5), myRange.Cells(4 + rows, 5))
      End With
    End If
      
      
    '.Chart.FullSeriesCollection(1).Select
    .Chart.SeriesCollection(1).Select
    .Chart.SetElement (msoElementErrorBarStandardError)
    With .Chart.SeriesCollection(1)
      .Name = myGeneralUO.GET_INPUT_DATA_LABEL(1)
      
      With .Format.Line
        .visible = msoFalse
      End With
      
      .ErrorBars.Select
      .ErrorBar Direction:=xlX, Include:=xlPlusValues, Type:=xlCustom, Amount:=Range(myRange.Cells(5, 3), myRange.Cells(4 + rows, 3))
      .ErrorBars.Select
      .ErrorBars.EndStyle = xlNoCap
      .ErrorBars.Select
      .ErrorBar Direction:=xlY, Include:=xlMinusValues, Type:=xlCustom, Amount:=0, MinusValues:=Range(myRange.Cells(5, 4), myRange.Cells(4 + rows, 4))
      .ErrorBars.Select
      .ErrorBars.EndStyle = xlNoCap
    End With
      
    ' Make the X-axis writing below axis
    .Chart.Axes(xlCategory).Select
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    
    ' Make the Y-axis writing on the left
    .Chart.Axes(xlValue).Select
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    Selection.MaximumScale = 1#
      
      
    ' Remove the legends
    .Chart.Legend.Select
    Selection.Delete
    
    ' Remove Major Gridlines
    .Chart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete
    
    End With


SubExit:
  ' Reset the current cell selection to the myRange
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Public Sub printPCAOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim i As Long
  Dim j As Long
  Dim row As Long
  Dim columns As Long

SubExit:
  ' Reset the current cell selection to the myRange
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  Exit Sub
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "ErrorHandling"
Option Explicit
Option Private Module
Option Compare Text

'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16038 $
'  $Date: 2016-11-28 20:47:52 -0600 (Mon, 28 Nov 2016) $
'  $Author: mohamad $
'  $Id: ErrorHandling.bas 16038 2016-11-29 02:47:52Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ErrorHandling.bas $
'
Private Const msMODULE As String = "ErrorHandling"

Enum ERROR_HANDLE_ACTION_Type
  RESUME_STATEMENT = 0
  RESUME_NEXT = 1
  UNRECOVERABLE = 2
  UNRECOGNIZED = 3
End Enum

Enum FILE_ERRORCODE_Type
  ERR_OVERFLOW = 6              'Overflow
  ERR_OUTOFMEMORY = 7           'Out of memory
  ERR_OUTOFRANGE = 9            'Subscript out of range
  ERR_DIV0 = 11                 'Division by zero
  ERR_TYPEMISMATCH = 13         'Type mismatch
  ERR_OUTSTRINGSPACE = 14       'Out of string space
  ERR_USERINTERUPT = 18         'User interrupt occurred
  ERR_STACKSPACE = 28           'Out of stack space
  ERR_TOOMANYDLL = 47           'Too many DLL application clients (version 97)
  ERR_LOADDLL = 48              'Error in loading DLL
  ERR_DLLCONV = 49              'Bad DLL calling convention
  ERR_INTERNAL = 51             'Internal error
  ERR_DISKFULL = 61             'Disk full
  ERR_PERMISSION = 70           'Permission denied
  ERR_DEVICEUNAVAILABLE = 68
  ERR_BADFILENAMEORNUMBER = 52
  ERR_ACESSERRO = 75            'Path/File access error
  ERR_OBJECTNOTSET = 91         'Object variable or With block variable not set
  ERR_CLASSMETHFAILED = 1004    'Methodname method of classname class failed
  ERR_PATHDOESNOTEXIST = 76
  ERR_BADFILEMODE = 54
  
  
End Enum

' LOG LEVELS: TRACE=1, DEBUG=2, INFO=3, WARN=4, ERROR=5, FATAL=6
Enum LOG_LEVEL_Type
  LOG_LEVEL_TRACE = 1
  LOG_LEVEL_DEBUG = 2
  LOG_LEVEL_INFO = 3
  LOG_LEVEL_WARN = 4
  LOG_LEVEL_ERROR = 5
  LOG_LEVEL_FATAL = 6
End Enum

Private Sub LOG_LEVEL(ByVal nLevel As LOG_LEVEL_Type, ByVal moduleName As String, ByVal sourceName As String, ByVal nLine As Long, ByVal szMsg As String)
  Dim funcName As String
  
  On Error GoTo LOG_ERRHDLR
  funcName = moduleName & ":" & sourceName & "(" & nLine & "):"
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) And Len(szMsg) > 0 Then
      ' Call xlVBALogMessage(nLevel, funcName, nLine, szMsg)
      Call SFLOG_LogMsg(nLevel, moduleName, sourceName, sourceName, nLine, StrPtr(szMsg))
  End If
ExitPt:
    Exit Sub
    ' This can't use the centralized error handling
LOG_ERRHDLR:
    Resume ExitPt
End Sub

Public Sub LOG_ERROR(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_ERROR, moduleName, szFunc, nLine, szMsg)
End Sub
Public Sub LOG_WARN(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_WARN, moduleName, szFunc, nLine, szMsg)
End Sub
Public Sub LOG_INFO(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_INFO, moduleName, szFunc, nLine, szMsg)
End Sub
Public Sub LOG_TRACE(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_TRACE, moduleName, szFunc, nLine, szMsg)
End Sub
Public Sub LOG_DEBUG(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_DEBUG, moduleName, szFunc, nLine, szMsg)
End Sub
Public Sub LOG_FATAL(ByVal moduleName As String, ByVal szFunc As String, ByVal nLine As Long, ByVal szMsg As String)
  Call LOG_LEVEL(LOG_LEVEL_FATAL, moduleName, szFunc, nLine, szMsg)
End Sub


Public Function SFCErrorHandler(ByVal moduleName As String, ByVal funcName As String, ByVal nLine As Long, ByVal ErrorValue As Integer) As ERROR_HANDLE_ACTION_Type
  Dim Result As Integer
  Dim ErrMsg As String
  Dim Choices As Integer

  Select Case ErrorValue
     Case ERR_DEVICEUNAVAILABLE:     ' Device  not available.
       ErrMsg = "The device you are trying to access is either not online or does not exist. Retry?"  '
       Call LOG_DEBUG(moduleName, funcName, nLine, ErrMsg)
       Choices = vbOKCancel
     
     Case ERR_ACESSERRO:     ' Path/File access error.
       ErrMsg = "There is an error accessing the path and/or file specified. Retry?"
       Call LOG_DEBUG(moduleName, funcName, nLine, ErrMsg)
       Choices = vbOKCancel
     
     Case ERR_PATHDOESNOTEXIST:     ' Path not found.
        ErrMsg = "The path and/or file specified was not found. Retry?"
        Call LOG_DEBUG(moduleName, funcName, nLine, ErrMsg)
        Choices = vbOKCancel
     'Case
     Case Else:   'An error other than 68, 75 or 76 has occurred
       ' catch all mismatching errors and log them (under debug)
       ErrMsg = Error(ErrorValue)
       Call LOG_ERROR(moduleName, funcName, nLine, ErrMsg)
       SFCErrorHandler = UNRECOVERABLE
       Exit Function
  End Select

   ' Display the error message.
   Result = MsgBox(ErrMsg, Choices)

   ' Determine the ReturnValue based on the user's choice from MsgBox.
   If Result = vbOK Then
      SFCErrorHandler = RESUME_NEXT
   Else
      SFCErrorHandler = UNRECOVERABLE
   End If
End Function


Attribute VB_Name = "FilterUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16038 $
'  $Date: 2016-11-28 20:47:52 -0600 (Mon, 28 Nov 2016) $
'  $Author: mohamad $
'  $Id: FilterUO.cls 16038 2016-11-29 02:47:52Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/FilterUO.cls $
'
Private Const msMODULE As String = "CLASS:FiltersUO"


Public Enum FILTERS_TYPE
  LOWPASS = 1
  BANDPASS = 2
  HIGHPASS = 3
End Enum

Public Enum HP_FILTERS
  HP_NONE = -1
  HODRICK_PRESCOTT = 1
End Enum

Public Enum BP_FILTERS
  BP_NONE = -1
  BAXTER_LONG = 1
End Enum

Public Enum LP_FILTERS
  LP_NONE = -1
End Enum

Private myFilterType As FILTERS_TYPE
Private myHPFilter As HP_FILTERS
Private myBPFilter As BP_FILTERS
Private myLPFilter As LP_FILTERS

Private myLOWperiod As Long
Private myHIGHperiod As Long

Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()
  myFilterType = HIGHPASS
  myHPFilter = HODRICK_PRESCOTT
  myBPFilter = BP_NONE
  myLPFilter = LP_NONE
  
  myLOWperiod = 0
  myHIGHperiod = 0
End Sub


Public Property Get FILTER() As FILTERS_TYPE
  FILTER = myFilterType
End Property

Public Property Let FILTER(ByVal vNewValue As FILTERS_TYPE)
  myFilterType = vNewValue
End Property


Attribute VB_Name = "ForecastDlg"
Attribute VB_Base = "0{0AC83D02-7959-48E4-917E-42B460844CE9}{5ECE22B6-1477-4122-BFA4-E47906A725B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ForecastDlg.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ForecastDlg.frm $
'
Private Const msMODULE As String = "USERFORM:ForecastDlg"
Private Const zenSlugId As String = "articles/215108386"

Private userOptions As ForecastStatUO
Private callValidateForm As Boolean

Private Sub btnCancel_Click()
  Unload Me
End Sub

' Process the forecast command now
Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"

  ' RefOutputRange
  Dim myRange As Object
  ' Dim tmpRange As Range
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
    
  Set inRange = Range(RefEditObs)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG) ' "Enter a valid time series range."
    Exit Sub
  End If
  
  If inRange.columns.count > 1 And inRange.rows.count > 1 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG) ' "The time series range should be one column or one row."
    Exit Sub
  End If
  
  ' Check if all the values in the input Series are Numaric or #N/A
  If Not vb_IsNum(inRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG) ' "The time series values should be numbers and without any spaces."
    Exit Sub
  End If
  
  Set myRange = Range(RefOutputRange)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR)   ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
            
  ' Call PrintBasicStatistics(myRange.Cells(1, 1), RefInputArray.Value)
  Call userOptions.printForecastOutput(myRange)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_FORECAST_PREPARE_ERROR_MSG), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub chkIncludeLimits_Change()
  userOptions.INC_LIMITS = chkIncludeLimits.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkIncludeTermStruct_Change()
  userOptions.INC_TERMSTRUCT = chkIncludeTermStruct.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub chkAscending_Change()
  userOptions.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefEditObs_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefEditObs.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub RefEditObsVol_Change()
  userOptions.INPUT_VOL_RANGE = Utilities.procInputCellsRange(RefEditObsVol.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

'
Private Sub RefEditObsFactors_Change()
  userOptions.INPUT_X_RANGE = Utilities.procInputCellsRange(RefEditObsFactors.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefEditSignificanceLevel_Change()
    userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefModel_Change()
    userOptions.MODEL_INPUT = Utilities.procInputCellsRange(RefModel.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtMaxLag_Change()
   On Error GoTo ErrorHandler
    userOptions.MAX_LAG = txtMaxLag.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
  
  Exit Sub
ErrorHandler:
   ' Insert code to handle the error here
   Resume Next
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  Dim isScreenUpdate As Boolean
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_FRM_CAPTION)
  
  ModelSelectFrame.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_CAPTION)
  ModelSelectFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_HELPTIP)
  
  ModelSelectLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_CAPTION)
  ModelSelectLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  RefModel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  
  LatestObsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FRAME_CAPTION)
  LatestObsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FRAME_HELPTIP)
  
  LatestObsValuesLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_CAPTION)
  LatestObsValuesLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_HELPTIP)
  RefEditObs.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  labelFactors.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FACTORS_LABEL_CAPTION)
  labelFactors.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)
  RefEditObsFactors.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)
  
  labelRealizedVol.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_CAPTION)
  labelRealizedVol.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_HELPTIP)
  RefEditObsVol.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_HELPTIP)
  
  ' Option
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputOptionFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_OPTIONS_FRAME_HELPTIP)
  
  txtMaxLagLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_CAPTION)
  txtMaxLagLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_HELPTIP)
  txtMaxLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  chkIncludeLimits.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_LIMITS_LABEL_CAPTION)
  chkIncludeLimits.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_LIMITS_LABEL_HELPTIP)
  
  chkIncludeTermStruct.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_TERM_STRUCT_LABEL_CAPTION)
  chkIncludeTermStruct.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_TERM_STRUCT_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  On Error GoTo ErrorHandler
  ' (1) Disable the screen updating, and auto-calculation
  isScreenUpdate = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
   
  If isActiveCellAtTBOM() Then
    Set userOptions = New ForecastStatUO
  
    callValidateForm = False
    
    If Not (userOptions Is Nothing) Then
      RefModel.value = userOptions.MODEL_INPUT
      chkAscending.value = userOptions.ASCENDING
      RefEditSignificanceLevel.value = userOptions.significance
      chkIncludeLimits.value = userOptions.INC_LIMITS
      chkIncludeTermStruct.value = userOptions.INC_TERMSTRUCT
      txtMaxLag.value = userOptions.MAX_LAG
      
      ' Initialize the table output to current cell
      RefOutputRange.value = userOptions.OUTPUT_RANGE
    End If
    
    callValidateForm = True
    Call validateForm
  Else
      ' "Select the header cell describing your model (eg,  ARMA, GARCH(1,1), etc.) before you use this function."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_FORECAST_INVALID_ACTIVE_CELL_MSG), _
              vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Application.ScreenUpdating = isScreenUpdate
      Unload Me
      Exit Sub
  End If
    
Cleanup:
  ' (1) Re-store screen and autoCalc as earlier update now
  Application.ScreenUpdating = isScreenUpdate
  Exit Sub
  
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

' This routine control the states of each ui elements on it
Private Sub validateForm()
    btnOK.enabled = userOptions.isReady
    chkIncludeTermStruct.visible = userOptions.isGARCH
    RefEditObsVol.visible = userOptions.isGARCH
    RefEditObsFactors.visible = userOptions.INCLUDE_XVARS
    labelFactors.visible = userOptions.INCLUDE_XVARS
    labelRealizedVol.visible = userOptions.isGARCH
End Sub


Private Sub UserForm_Terminate()
 Set userOptions = Nothing
End Sub

Attribute VB_Name = "ForecastStatUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ForecastStatUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ForecastStatUO.cls $
'
' Include RMNA in the formulas

Private Const msMODULE As String = "CLASS:ForecastStatUO"

Private myModelInput As String
Private myAscending As Boolean
Private myInputData As String
Private myInputVolData As String
Private myInputXData As String

Private myIncludeLimits As Boolean
Private myIncludeTermStructure As Boolean
Private myIncludeForecastGraph As Boolean
Private myIncludeVolatilityGraph As Boolean
Private myIncludefactors As Boolean

Private myOutputRange As String
Private myMaxLag As Long
Private mySignificanceLevel As String

Public Property Get FORECAST_GRAPH() As Boolean
    FORECAST_GRAPH = myIncludeForecastGraph
End Property

Public Property Let FORECAST_GRAPH(value As Boolean)
    myIncludeForecastGraph = value
End Property

Public Property Get VOLATILITY_GRAPH() As Boolean
    VOLATILITY_GRAPH = myIncludeVolatilityGraph
End Property

Public Property Let VOLATILITY_GRAPH(value As Boolean)
    myIncludeVolatilityGraph = value
End Property

Public Property Get INCLUDE_XVARS() As Boolean
  INCLUDE_XVARS = myIncludefactors
End Property


Public Property Get MAX_LAG() As Long
    MAX_LAG = myMaxLag
End Property
Public Property Let MAX_LAG(value As Long)
    myMaxLag = value
End Property


Public Property Get INC_TERMSTRUCT() As Boolean
    INC_TERMSTRUCT = myIncludeTermStructure
End Property
Public Property Let INC_TERMSTRUCT(value As Boolean)
    myIncludeTermStructure = value
End Property


Public Property Get INC_LIMITS() As Boolean
    INC_LIMITS = myIncludeLimits
End Property
Public Property Let INC_LIMITS(value As Boolean)
    myIncludeLimits = value
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get MODEL_INPUT() As String
  MODEL_INPUT = myModelInput
End Property

Public Property Let MODEL_INPUT(ByVal vNewValue As String)
  myModelInput = vNewValue
End Property


Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get INPUT_VOL_RANGE() As String
  INPUT_VOL_RANGE = myInputVolData
End Property

Public Property Let INPUT_VOL_RANGE(ByVal vNewValue As String)
  myInputVolData = vNewValue
End Property

Public Property Get INPUT_X_RANGE() As String
  INPUT_X_RANGE = myInputXData
End Property

Public Property Let INPUT_X_RANGE(ByVal vNewValue As String)
  myInputXData = vNewValue
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Private Sub Class_Initialize()
  Dim model As String

  myAscending = True
  myIncludeLimits = True
  myIncludeForecastGraph = False
  mySignificanceLevel = CStr(0.05)                ' This will adapt to regional setting
  myModelInput = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  
  model = UCase(Me.crackModel())
  If model = "ARMAX" Or model = "SARIMAX" Then
    myIncludefactors = True
  Else
    myIncludefactors = False
  End If
      
  If (InStr(model, "ARCH") > 0) Then
    myIncludeTermStructure = True
    myIncludeVolatilityGraph = True
  Else
    myIncludeTermStructure = False
    myIncludeVolatilityGraph = False
  End If
  
  myOutputRange = ""
  myInputData = ""
  myInputVolData = ""
  myInputXData = ""
    
  myMaxLag = 5
End Sub

Public Function isReady() As Boolean
    
    isReady = Utilities.isCellRangeValid(myInputData) And _
              isAlphaValid(mySignificanceLevel) And _
              Utilities.isCellRangeValid(myOutputRange) And _
              myMaxLag >= 1
End Function



Public Function isGARCH() As Boolean
  isGARCH = InStr(UCase(ActiveCell.value), "GARCH") > 0
End Function

Public Function crackModel() As String
  Const sSOURCE As String = "crackModel"
  
  Dim model As Object
  Dim formula As String
  Dim start As Long
  Dim finish As Long
  
  ' Get the Model paramters
  Set model = Range(myModelInput)
  
  ' Get the cell formula
  formula = model.value
  
  ' Find the 1st (
  start = 1
  finish = InStr(formula, "(")
  
  If start <> 1 Or finish = 0 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_UNSUPPORTED_MODEL_ACTIVE_CELL_MSG) ' "The active cell does not correspond to a supported model"
    Exit Function
  End If
    
  ' Copy the model prefix from the formula & append _SIM
  crackModel = Mid(formula, start, finish - start)
  
  If InStr(model.formula, crackModel) = 0 Then
    crackModel = ""
    
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_UNSUPPORTED_MODEL_ACTIVE_CELL_MSG)
    Exit Function
  End If
End Function


Public Function crackResidualDistribution() As Long
  Const sSOURCE As String = "crackResidualDistribution"
  
  'Get the underlying text
  If (InStr(UCase(Range(myModelInput)), "ARMA") > 0) Then
    crackResidualDistribution = 1
  Else
    If (InStr(UCase(Range(myModelInput)), "T-DIST") > 0) Then
      crackResidualDistribution = 2
    Else
      If (InStr(UCase(Range(myModelInput)), "GED") > 0) Then
        crackResidualDistribution = 3
      Else
        crackResidualDistribution = 1
      End If
    End If
  End If
End Function

' Return the Model name
Public Function getModelP(Index As Integer) As Integer
  Const sSOURCE As String = "getModelP"
  
  Dim modelSel As String
  Dim buffer As String
  Dim P, M, Q As Integer
  Dim offset As Long
  
  
  modelSel = UCase(Range(myModelInput))
  
  'Get the underlying text
  If (InStr(modelSel, "ARMA") > 0) Then
    buffer = Right(modelSel, Len(modelSel) - 4)
  Else
    If (InStr(modelSel, "EGARCH") > 0) Then
      buffer = Right(modelSel, Len(modelSel) - 6)
    Else
      If (InStr(modelSel, "GARCH-M") > 0) Then
        buffer = Right(modelSel, Len(modelSel) - 7)
      Else
        If (InStr(modelSel, "GARCH") > 0) Then
          buffer = Right(modelSel, Len(modelSel) - 5)
        Else
          If (InStr(modelSel, "AIRLINE") > 0) Then
            buffer = Right(modelSel, Len(modelSel) - 7)
          Else
            If (InStr(modelSel, "ARIMA") > 0) Then
              buffer = Right(modelSel, Len(modelSel) - 5)
            End If
          End If
        End If
      End If
    End If
  End If
  
  ' remove the residual distribution
  offset = InStr(buffer, "&")
  If offset > 1 Then
    buffer = Left(buffer, offset - 1)
  End If
  
  ' remove surrounding braces
  buffer = Trim(buffer)
  buffer = Trim(Mid(buffer, 2, Len(buffer) - 2))
  
  P = -1
  M = -1
  Q = -1
  
  offset = InStr(buffer, ",")
  If offset <= 0 Then
    offset = Len(buffer)
    P = buffer
  Else
    P = Left(buffer, offset - 1)
  End If
  
  If offset < Len(buffer) Then
    buffer = Mid(buffer, offset + 1)
    offset = InStr(buffer, ",")
    If offset <= 0 Then
      offset = Len(buffer)
      M = buffer
    Else
      M = Left(buffer, offset - 1)
    End If
    
    
    
    If offset < Len(buffer) Then
      buffer = Mid(buffer, offset + 1)
      offset = InStr(buffer, ",")
      If offset <= 0 Then
        offset = Len(buffer)
      End If
    End If
  End If
  
  If Index = 1 Then
    getModelP = P
  Else
    If Index = 2 Then
      getModelP = M
    Else
      getModelP = Q
    End If
  End If
End Function


' Return the Model name
Public Function getModelParameters(skipdist As Boolean) As String
  Const sSOURCE As String = "getModelParameters"
  
  Dim model As Object
  Dim formula As String
  Dim start As Long
  Dim Eqn As String
  Dim myRange As Object
  
  Dim rng As Object
  Dim P As Integer
  Dim residType As Integer
  Dim nu As String
  
  Set rng = Range(myInputData)
  
  ' Activate the sheet now
  If ActiveSheet.Name <> rng.Worksheet.Name Then
    Sheets(rng.Worksheet.Name).Activate
  End If
  
  ' Get the Model paramters
  Set model = Range(myModelInput)
  
  ' Get the cell formula
  formula = model.formula
  
  ' Find the 1st (
  start = InStr(formula, "(")
  
  If start = 0 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_MISSING_FORMULA_ACTIVE_CELL_MSG)  ' "The model cell does not contain formula"
    Exit Function
  End If
    
  ' Copy the model prefix from the formula & append _SIM
  Eqn = Left(formula, start - 1) & "_SIM("
  
  ' Extract the model parameters
  getModelParameters = Mid(formula, start + 1, Len(formula) - start - 1)
End Function

' Return the Model name
Public Function getInputDataSeries(skipVol As Boolean) As String
  Const sSOURCE As String = "getInputDataSeries"
  
  Dim rng As Object
  Dim model As String
  
  model = crackModel()
  
  Set rng = Range(myInputData)
  getInputDataSeries = myInputData & ","
    
  If InStr(model, "GARCH") > 0 And Not skipVol Then
    If Len(myInputVolData) > 0 Then
      getInputDataSeries = getInputDataSeries & myInputVolData & ","
    Else
      getInputDataSeries = getInputDataSeries & ","
    End If
  End If
  
  'Support for ARMAX & SARIMAX
  If InStr(model, "MAX") > 0 Then
    If Len(myInputXData) > 0 Then
      getInputDataSeries = getInputDataSeries & myInputXData & ","
    Else
      getInputDataSeries = getInputDataSeries & ","
    End If
  End If
  
  If myAscending = True Then
    getInputDataSeries = getInputDataSeries & "1"
  Else
    getInputDataSeries = getInputDataSeries & "0"
  End If
End Function


Public Function getForecastFormula(T As Range, myType As FORECAST_RETVAL_FUNC) As String
  Const sSOURCE As String = "getForecastMean"
  
  Dim buffer As String

  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
  alphaLevel = getAlphaValue(mySignificanceLevel)
  alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)

  buffer = "=" & crackModel()
  If Len(buffer) > 0 Then
    buffer = buffer & "_FORE("
    buffer = buffer & getInputDataSeries(False) & ","
    
    ' Add model's parameters
    buffer = buffer & getModelParameters(True) & ","
    
    ' Add step
    buffer = buffer & T.Address(RowAbsolute:=False, ColumnAbsolute:=True)
    
    ' Add forecast type
    buffer = buffer & "," & myType
    
    ' Add significance level
    buffer = buffer & "," & alphaUSLevel
    
    getForecastFormula = buffer & ")"
  End If

End Function

Public Function getForecastSTD(T As Range, localized As Boolean) As String
  Const sSOURCE As String = "getForecastSTD"
  
  Dim buffer As String
  Dim model As String
  
  model = crackModel()
  
  buffer = "=" & model
  If Len(buffer) > 0 Then
    
    If crackModel() = "ARIMA" Then
      buffer = buffer & "_FORE("
    Else
      buffer = buffer & "_FORESD("
    End If
    
    buffer = buffer & getInputDataSeries(False) & ","
    
    If model = "EGARCH" Then
        buffer = buffer & getModelParameters(False) & ","
    Else
        buffer = buffer & getModelParameters(True) & ","
    End If
    
    buffer = buffer & T.Address(RowAbsolute:=False, ColumnAbsolute:=True)
    If crackModel() = "ARIMA" Then
      buffer = buffer & "," & "," & FORECAST_STDEV
    Else
      If InStr(model, "GARCH") > 0 Then
        If localized = True Then
          buffer = buffer & ",1"
        Else
          buffer = buffer & ",0"
        End If
      End If
    End If
    
    getForecastSTD = buffer & ")"
  
  Else
    ' Un supported model
  End If

End Function

Public Function getForecastUNLL(T As Range, UL As Boolean) As String
  Const sSOURCE As String = "getForecastUNLL"
  
  Dim buffer, ULbuffer, LLbuffer As String
  Dim model As String

  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
  alphaLevel = getAlphaValue(mySignificanceLevel)
  alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)


  model = crackModel()
  buffer = "=" & model
  If Len(buffer) > 0 Then
    If crackModel() = "ARIMA" Then
      buffer = buffer & "_FORE("
    Else
      buffer = buffer & "_FORECI("
    End If
    
    If InStr(model, "GARCH") > 0 Then
        buffer = buffer & getInputDataSeries(False) & ","
        buffer = buffer & getModelParameters(False) & ","
    Else
        buffer = buffer & getInputDataSeries(True) & ","
        buffer = buffer & getModelParameters(True) & ","
    End If

    buffer = buffer & T.Address(RowAbsolute:=False, ColumnAbsolute:=True) & ","
    buffer = buffer & alphaUSLevel & ","
    
    If crackModel() = "ARIMA" Then
      If UL = True Then
        getForecastUNLL = buffer & FORECAST_UL & ")"
      Else
        getForecastUNLL = buffer & FORECAST_LL & ")"
      End If
    Else
      If UL = True Then
        getForecastUNLL = buffer & 1 & ")"
      Else
        getForecastUNLL = buffer & 0 & ")"
      End If
    End If
  Else
    ' Un supported model
  End If
End Function

Public Sub printForecastMean()
  Const sSOURCE As String = "printForecastMean"
  
  Dim rng As Object
  Dim i As Long
  Dim buffer As String
  Dim szFormat As String
  
  szFormat = Range(myInputData).NumberFormat
  Set rng = Range(myOutputRange)
  ' rng.Select
  
  For i = 1 To myMaxLag
    buffer = getForecastFormula(rng.offset(i), FORECAST_MEAN)
    rng.offset(i, 1).formula = buffer
    rng.offset(i, 1).NumberFormat = szFormat
    rng.offset(i, 1).HorizontalAlignment = xlCenter
  Next i
  
End Sub

Public Sub printForecastSTD()
  Const sSOURCE As String = "printForecastSTD"
  
  Dim rng As Object
  Dim i As Long
  Dim buffer As String
  Dim szFormat As String
  
  szFormat = Range(myInputData).NumberFormat
  Set rng = Range(myOutputRange)
  ' rng.Select
  
  For i = 1 To myMaxLag
    buffer = getForecastFormula(rng.offset(i), FORECAST_STDEV)
    rng.offset(i, 2).formula = buffer
    rng.offset(i, 2).NumberFormat = szFormat
    rng.offset(i, 2).HorizontalAlignment = xlCenter
  Next i
End Sub

Public Sub printForecastTSD(offset As Long)
  Const sSOURCE As String = "printForecastTSD"
  
  Dim rng As Object
  Dim i As Long
  Dim buffer As String
  Dim szFormat As String
  
  Set rng = Range(myOutputRange)
  szFormat = Range(myInputData).NumberFormat
  ' rng.Select
  
  For i = 1 To myMaxLag
    buffer = getForecastFormula(rng.offset(i), FORECAST_TS_STDEV)
    rng.offset(i, offset).formula = buffer
    rng.offset(i, offset).NumberFormat = szFormat
    rng.offset(i, offset).HorizontalAlignment = xlCenter
  Next i
End Sub


Public Sub printForecastUNLL(offset As Long)
  Const sSOURCE As String = "printForecastUNLL"
  
  Dim rng As Object
  Dim i As Long
  Dim buffer As String
  Dim szFormat As String
  
  szFormat = Range(myInputData).NumberFormat
  Set rng = Range(myOutputRange)
  ' rng.Select
  
  For i = 1 To myMaxLag
    buffer = getForecastFormula(rng.offset(i), FORECAST_UL)
    rng.offset(i, offset).formula = buffer
    rng.offset(i, offset).NumberFormat = szFormat
    rng.offset(i, offset).HorizontalAlignment = xlCenter
    
    buffer = getForecastFormula(rng.offset(i), FORECAST_LL)
    rng.offset(i, offset + 1).formula = buffer
    rng.offset(i, offset + 1).NumberFormat = szFormat
    rng.offset(i, offset + 1).HorizontalAlignment = xlCenter
  Next i
End Sub


Public Sub PrintForecastStatistics()
  Const sSOURCE As String = "PrintForecastStatistics"
  
    ' Set the borderline
    ' Find the output range
    Dim Labels() As String  ' declares a dynamic array variable
    Dim myRange As Object
    Dim myNumFields As Long
    Dim count As Long
    
    Set myRange = Range(myOutputRange)
    
    ' Activate the sheet now
    If ActiveSheet.Name <> myRange.Worksheet.Name Then
      Sheets(myRange.Worksheet.Name).Activate
    End If
    
    'How many columns to print
    myNumFields = countTableFields()
    
    Range(myRange.Cells(1, 1), myRange.Cells(1, myNumFields)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With
    
    ' Resize the arrary to proper size
    ReDim Labels(1 To myNumFields)

    
    Labels(1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_STEP_HEADER) ' "Step"
    Labels(2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MEAN_HEADER) ' "Mean"
    Labels(3) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_STD_HEADER) ' "STD"
    count = 3
    If myIncludeTermStructure = True Then
      Labels(count + 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TS_HEADER) ' "TS"
      count = count + 1
    End If
    
    If myIncludeLimits = True Then
      Labels(count + 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_HEADER)  ' "UL"
      Labels(count + 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_HEADER)  ' "LL"
      count = count + 2
      If myIncludeForecastGraph = True Then
        Labels(count + 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_RANGE_HEADER)  ' "Range"
        count = count + 1
      End If
    End If
     
    Dim i, j As Long
    For i = 1 To myNumFields
        myRange.Cells(1, i).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = Labels(i)
        End With
    Next i
    
    ' Add the steps
    For i = 1 To myMaxLag
        myRange.Cells(i + 1, 1).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = i
        End With
    Next i
End Sub

Public Function countTableFields() As Long
  Const sSOURCE As String = "countTableFields"
  
  countTableFields = 3
  If myIncludeTermStructure = True Then
    countTableFields = countTableFields + 1
  End If
  
  If myIncludeLimits = True Then
    countTableFields = countTableFields + 2
    If myIncludeForecastGraph = True Then
      countTableFields = countTableFields + 1
    End If
  End If
End Function


Public Sub printForecastOutput(myRange As Range)
  Const sSOURCE As String = "printForecastOutput"
  
  Dim offset As Long
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  
  On Error GoTo ErrorHdler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) print the Header title
  Call PrintForecastStatistics
  
  Call printForecastMean
  
  Call printForecastSTD
  offset = 3
  
  If Me.INC_TERMSTRUCT = True Then
    Call Me.printForecastTSD(offset)
    offset = offset + 1
  End If
  
  If Me.INC_LIMITS = True Then
    Call Me.printForecastUNLL(offset)
  End If
  
  ' Reset the current cell selection to the myRange
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  myRange.Cells(1, 1).Select

Cleanup:
  Exit Sub

ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub
Attribute VB_Name = "FormLauncher"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: FormLauncher.bas 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/FormLauncher.bas $
'
Private Const msMODULE As String = "FORMLauncher"

Public Sub LaunchDescStatForm()
  Const sSOURCE As String = "LaunchDescStatForm"
  ' Static frmDesStats As DesStats
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    'If frmDesStats Is Nothing Then
    '  ' Set frmDesStats = New DesStats
    '  DesStats.Show
    'End If
    
    ' frmDesStats.Show
    DesStats.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchCorrelogramForm()
  Const sSOURCE As String = "LaunchCorrelogramForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    Correlogram.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchARMAForm()
  Const sSOURCE As String = "LaunchARMAForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ARMAMODEL.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchARIMAForm()
  Const sSOURCE As String = "LaunchARIMAForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ARIMAMODEL.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchX12ARIMAForm()
  Const sSOURCE As String = "LaunchX12ARIMAForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    X12ARIMAModel.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchX13ARIMASEATSForm()
  Const sSOURCE As String = "LaunchX13ARIMASEATSForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    X13ARIMASEATSFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchSARIMAForm()
  Const sSOURCE As String = "LaunchSARIMAForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    SARIMAMODEL.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Public Sub LaunchARMAXForm()
  Const sSOURCE As String = "LaunchARMAXForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ARMAXMODEL.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Public Sub LaunchAirLineForm()
  Const sSOURCE As String = "LaunchAirLineForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    AIRLINEModel.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchARCHForm()
  Const sSOURCE As String = "LaunchARCHForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ARCHModel.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchGLMForm()
  Const sSOURCE As String = "LaunchGLMForm"
  Const zMinLevel As Integer = PRO_FULL_MODE
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ' We need to check for the License Level here too
    GLMMODEL.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchAboutForm()
  Const sSOURCE As String = "LaunchAboutForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    About.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchCheckUpdateForm()
  Const sSOURCE As String = "LaunchCheckUpdateForm"
  
  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ' launch the check update dialog
    
    
    CheckUpdateForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchCalibrationForm()
  Const sSOURCE As String = "LaunchCalibrationForm"
  
  'Dim myRange As Range
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    myAddress = ActiveCell.Address

    Set myRange = Range(ActiveCell.Address(True, True))

    Call InitSolver(myRange)
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchModelIdentificationForm()
  Const sSOURCE As String = "LaunchModelIdentificationForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ModelIdentificationFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchModelDiagnosisForm()
  Const sSOURCE As String = "LaunchModelDiagnosisForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ModelDiagnosisFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Public Sub LaunchForecastForm()
  Const sSOURCE As String = "LaunchForecastForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    If InStr(UCase(Selection.value), "GLM(") > 0 Then
      ' GLMForecastDlg.Show
      MsgBox MSGAPI.getLocaleString(IDS_UI_FORECAST_ERR_NO_SUPPORT_MODEL_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
    Else
      ForecastDlg.Show
    End If
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchNormalityTestForm()
  Const sSOURCE As String = "LaunchNormalityTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    NormalityTestFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchWNTestForm()
  Const sSOURCE As String = "LaunchWNTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    WNTestFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchARCHTestForm()
  Const sSOURCE As String = "LaunchARCHTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ARCHTestFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchANOVAForm()
  Const sSOURCE As String = "LaunchANOVAForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    MsgBox "Function is not currently supported"
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchStationarityTestForm()
  Const sSOURCE As String = "LaunchStationarityTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    StationaryTestFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

'
Public Sub LaunchHurstExponentForm()
  Const sSOURCE As String = "LaunchHurstExponentForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    HurstExponentForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchHistogramForm()
  Const sSOURCE As String = "LaunchHistogramForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    HistogramFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchQQPlotForm()
  Const sSOURCE As String = "LaunchHistogramForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    QQPlotFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchEDFForm()
  Const sSOURCE As String = "LaunchEDFForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    EDFForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchKDEForm()
  Const sSOURCE As String = "LaunchKDEForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    KDEForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchHomogeneityTestForm()
  Const sSOURCE As String = "LaunchHomogeneityTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    HomogeneityFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchCointegrationTestForm()
  Const sSOURCE As String = "LaunchCointegrationTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    cointegrationFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchResampleForm()
  Const sSOURCE As String = "LaunchResampleForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    ResampleFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Public Sub LaunchPCAPCRForm()
  Const sSOURCE As String = "LaunchPCAPCRForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    PCAForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Public Sub LaunchRegressionForm()
  Const sSOURCE As String = "LaunchRegressionForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    RegressionFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchCollinearityTestForm()
  Const sSOURCE As String = "LaunchCollinearityTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    CollinearityTestFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchRegressionStabilityTestForm()
  Const sSOURCE As String = "LaunchRegressionStabilityTestForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    RegressionStabilityFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchDFTForm()
  Const sSOURCE As String = "LaunchDFTForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    DFTForm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchFiltersForm()
  Const sSOURCE As String = "LaunchFiltersForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    SpectralFiltersFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If
  
Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Public Sub LaunchMCSimulationForm()
  Const sSOURCE As String = "LaunchMCSimulationForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    MCSimulateFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Public Sub LaunchSimulationForm()
  Const sSOURCE As String = "LaunchMCSimulationForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    If InStr(UCase(Selection.value), "GLM(") > 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_SIMULATE_ERR_NO_SUPPORT_MODEL_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
    Else
      SimulateFrm.Show
    End If
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub




Public Sub LaunchPeriodgramForm()
  Const sSOURCE As String = "LaunchMCSimulationForm"
  
  Dim myRange As Object
  Dim myAddress As String

  On Error GoTo ErrorHandler
  ' Check if NumXL.xll is installed, and uninstall NumXLUI.xlam if it isn't
  Call checkNumXLXllInstalled

  If Workbooks.count <> 0 Then
    PeriodgramFrm.Show
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  End If

Cleanup:
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Attribute VB_Name = "GLMForecastDlg"
Attribute VB_Base = "0{D864445F-7964-4928-9EFC-829E993FE673}{39E1E5A9-B5B5-45FF-A301-87C32D5FE7DB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: GLMForecastDlg.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/GLMForecastDlg.frm $
'
Private Const msMODULE As String = "USERFORM:ForecastDlg"
Private Const zenSlugId As String = "articles/215108386"

Private userOptions As ForecastStatUO
Private callValidateForm As Boolean

Private Sub btnCancel_Click()
  Unload Me
End Sub

' Process the forecast command now
Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"

  ' RefOutputRange
  Dim myRange As Object
  ' Dim tmpRange As Range
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
    
  Set inRange = Range(RefEditObs)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG) ' "Enter a valid time series range."
    Exit Sub
  End If
  
  If inRange.columns.count > 1 And inRange.rows.count > 1 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG)  ' "The time series range should be one column or one row."
    Exit Sub
  End If
  
  ' Check if all the values in the input Series are Numaric or #N/A
  If Not vb_IsNum(inRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG)   ' "The time series values should be numbers and without any spaces."
    Exit Sub
  End If
  
  Set myRange = Range(RefOutputRange)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR)  ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
            
  ' Call PrintBasicStatistics(myRange.Cells(1, 1), RefInputArray.Value)
  Call userOptions.printForecastOutput(myRange)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_FORECAST_PREPARE_ERROR_MSG), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub chkIncludeLimits_Change()
  userOptions.INC_LIMITS = chkIncludeLimits.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub


Private Sub RefEditObs_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefEditObs.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub RefEditSignificanceLevel_Change()
    userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefModel_Change()
    userOptions.MODEL_INPUT = Utilities.procInputCellsRange(RefModel.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  Dim isScreenUpdate As Boolean
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_FRM_CAPTION)
  
  ModelSelectFrame.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_CAPTION)
  ModelSelectFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_HELPTIP)
  
  ModelSelectLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_CAPTION)
  ModelSelectLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  RefModel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputXForecastDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_GLM_INPUTDATA_FACTORS_LABEL_CAPTION)
  InputXForecastDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)
  RefEditObs.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)

  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_OPTIONS_FRAME_HELPTIP)

  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  chkIncludeLimits.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_LIMITS_LABEL_CAPTION)
  chkIncludeLimits.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_LIMITS_LABEL_HELPTIP)

  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  
  
  chkIncludeGraph.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_GRAPH_LABEL_CAPTION)
  chkIncludeGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_INC_GRAPH_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)

  
  On Error GoTo ErrorHandler
  ' (1) Disable the screen updating, and auto-calculation
  isScreenUpdate = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
   
  If isActiveCellAtTBOM() Then
    Set userOptions = New ForecastStatUO
  
    callValidateForm = False
    
    If Not (userOptions Is Nothing) Then
       RefModel.value = userOptions.MODEL_INPUT
      RefEditSignificanceLevel.value = userOptions.significance
      chkIncludeLimits.value = userOptions.INC_LIMITS
      
      ' Initialize the table output to current cell
      RefOutputRange.value = userOptions.OUTPUT_RANGE
    End If
    
    callValidateForm = True
    Call validateForm
  Else
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_FORECAST_GLM_INVALID_ACTIVE_CELL_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Application.ScreenUpdating = isScreenUpdate
      Unload Me
      Exit Sub
  End If
    
Cleanup:
  ' (1) Re-store screen and autoCalc as earlier update now
  Application.ScreenUpdating = isScreenUpdate
  Exit Sub
  
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

' This routine control the states of each ui elements on it
Private Sub validateForm()
    btnOK.enabled = userOptions.isReady
End Sub


Private Sub UserForm_Terminate()
 Set userOptions = Nothing
End Sub

Attribute VB_Name = "GLMMODEL"
Attribute VB_Base = "0{07FD8BC3-F754-44B6-98A7-6BEDA561F854}{154367DE-A48C-4618-A97B-B51B65E5E7BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: GLMMODEL.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/GLMMODEL.frm $
'
Private Const msMODULE As String = "USERFORM:GLMModel"
Private Const zenSlugId As String = "articles/216476383"

Private callValidateForm As Boolean
Private userOptions As GLMModelUO

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim response As Object
  Dim vars As Object
  Dim myRange As Object
  Dim NA As Boolean
  
  
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
  
  ' (1) Read the model coefficient
  Set response = Range(RefInputResponseArray.value)
  If Not (response Is Nothing) Then
    Set vars = Range(RefInputVariablesArray.value)
    If Not (vars Is Nothing) Then
      If Not (response.rows.count = vars.rows.count) Then
        ' "The number of rows of the response variable is different from rows of the explantaroy variables."
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_DEPENDENT_ROWS_MISMATCH_ERROR_MSG)
        Set vars = Nothing
        Set response = Nothing
        Exit Sub
      End If
      Set vars = Nothing
    End If
    Set response = Nothing
  End If
  
    
  ' Set the output range now
  Set myRange = Range(RefOutputRange)
  If (myRange Is Nothing) Then
    ' "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      ' MsgBox "Only numbers between 0 and 100% are allowed."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR)
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If

  'Make sure we have a valid model order
  If Not userOptions.isValidModel() Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_INVALID_ORDER_MSG) ' "Invalid model order."
      Exit Sub
  End If
      
  Call userOptions.printGLMModelOutput(myRange)
    
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  '"Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub optCalibrateParams_Click()
  userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optGuessParams_Click()
  userOptions.MODEL_PARAM_STATE = COEFF_GUESS
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLvkIdentity_Click()
  userOptions.LINKFUNC = GLM_IDENTITY
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLvkLog_Click()
  userOptions.LINKFUNC = GLM_LOG
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLvkLogit_Click()
  userOptions.LINKFUNC = GLM_LOGIT
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLvkLoglog_Click()
  userOptions.LINKFUNC = GLM_LOGLOG
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLvkProbit_Click()
  userOptions.LINKFUNC = GLM_PROBIT
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefInputResponseArray_Change()
  userOptions.INPUT_RESPONSE_RANGE = Utilities.procInputCellsRange(RefInputResponseArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefInputVariablesArray_Change()
  userOptions.INPUT_VARIABLES_RANGE = Utilities.procInputCellsRange(Me.RefInputVariablesArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub
Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub txtBatchSize_Change()
  If txtBatchSize.enabled Then
    If Len(txtBatchSize.value) > 0 Then
      If Int(txtBatchSize.value) < 2 Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_INVALID_BATCH_SIZE_MSG) ' "Invalid Batch size, batch size should not be greater than on"
        Exit Sub
      End If
      
      userOptions.BATCH_SIZE = txtBatchSize.value
      If callValidateForm Then
        Call validateForm
      End If
    End If
  End If
End Sub

Private Sub txtMaxIter_Change()
  userOptions.MAX_ITERATIONS = txtMaxIter.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputYDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_Y_CAPTION)
  InputYDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_Y_HELPTIP)
  RefInputResponseArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_Y_HELPTIP)
  
  varTxtLabels.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_X_CAPTION)
  varTxtLabels.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_X_HELPTIP)
  RefInputVariablesArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_INPUT_X_HELPTIP)
  
  LinkFunctionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_FRAME_CAPTION)
  LinkFunctionFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_FRAME_HELPTIP)
  
  optLvkIdentity.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_IDENTITY_CAPTION)
  optLvkIdentity.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_IDENTITY_HELPTIP)
  
  optLvkLog.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_LOG_CAPTION)
  optLvkLog.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_LOG_HELPTIP)
  
  optLvkLogit.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_LOGIT_CAPTION)
  optLvkLogit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_LOGIT_HELPTIP)
  
  optLvkProbit.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_PROBIT_CAPTION)
  optLvkProbit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_PROBIT_HELPTIP)
  
  optLvkLoglog.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_CLOLOG_CAPTION)
  optLvkLoglog.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_CLOGLOG_HELPTIP)
  
  
  BatchSizeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_BATCHSIZE_CAPTION)
  BatchSizeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_BATCHSIZE_HELPTIP)
  txtBatchSize.ControlTipText = MSGAPI.getLocaleString(IDS_UI_GLM_LINK_FNC_BATCHSIZE_HELPTIP)
  
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)
  
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  significanceTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  significanceTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  Set userOptions = New GLMModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    RefInputResponseArray.value = userOptions.INPUT_RESPONSE_RANGE
    RefInputVariablesArray.value = userOptions.INPUT_VARIABLES_RANGE
    
    optLvkIdentity.value = userOptions.LINKFUNC = GLM_IDENTITY
    optLvkLogit.value = userOptions.LINKFUNC = GLM_LOGIT
    optLvkLog.value = userOptions.LINKFUNC = GLM_LOG
    optLvkProbit.value = userOptions.LINKFUNC = GLM_PROBIT
    optLvkLoglog.value = userOptions.LINKFUNC = GLM_LOGLOG
    txtBatchSize.value = userOptions.BATCH_SIZE
    
    optGuessParams = userOptions.MODEL_PARAM_STATE = COEFF_GUESS
    optCalibrateParams = userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
    txtMaxIter = userOptions.MAX_ITERATIONS
    
    chkGoodness = userOptions.includeGoodnessOfFit
    ChkDiagnosis = userOptions.includeResidualDiagnosis
    
    RefEditSignificanceLevel = userOptions.significance
    RefOutputRange = userOptions.OUTPUT_RANGE
  End If
  callValidateForm = True
  Call validateForm
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
 
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
    
  On Error GoTo ErrorHandler
  
  inputDataReady = Utilities.isCellRangeValid(RefInputResponseArray.value) And _
                   Utilities.isCellRangeValid(RefInputVariablesArray.value)
  ' count number of columns
  Dim response As Object
  Dim vars As Object
  
  If inputDataReady Then
    inputDataReady = False
    
    Set response = Range(RefInputResponseArray.value)
    If Not (response Is Nothing) Then
      Set vars = Range(RefInputVariablesArray.value)
      If Not (vars Is Nothing) Then
        inputDataReady = response.rows.count = vars.rows.count
        Set vars = Nothing
      End If
      Set response = Nothing
    End If
  End If
  RefInputVariablesArray.enabled = Len(RefInputResponseArray.value) > 0
  varTxtLabels.enabled = RefInputVariablesArray.enabled
  
  validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
        
  optLvkIdentity.enabled = inputDataReady
  optLvkLogit.enabled = inputDataReady
  optLvkLog.enabled = inputDataReady
  optLvkProbit.enabled = inputDataReady
  optLvkLoglog.enabled = inputDataReady

  txtBatchSize.enabled = inputDataReady And (userOptions.LINKFUNC > GLM_LOG)

  If inputDataReady Then
    validModel = userOptions.isValidModel()
  Else
    validModel = False
  End If
  
  optGuessParams.enabled = inputDataReady And validModel
  optCalibrateParams.enabled = inputDataReady And validModel
  
  txtMaxIter.enabled = inputDataReady And optCalibrateParams.enabled And optCalibrateParams.value
  maxIterTxtLabel.enabled = txtMaxIter.enabled
  
  chkGoodness.enabled = inputDataReady And validModel
  ChkDiagnosis.enabled = inputDataReady And validModel
  
  RefEditSignificanceLevel.enabled = inputDataReady And ChkDiagnosis.enabled And ChkDiagnosis.value
  significanceTxtLabel.enabled = RefEditSignificanceLevel.enabled
  
  RefOutputRange.enabled = inputDataReady And validModel
  OutputTxtLabel.enabled = RefOutputRange.enabled
  
  ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)

  btnOK.enabled = ready
Cleanup:
  ' (1) Re-store screen and autoCalc as earlier update now
  Exit Sub
  
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "GLMModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: GLMModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/GLMModelUO.cls $
'
Private Const msMODULE As String = "CLASS:GLMModelUO"



Private myInputResponseData As String
Private myInputVariableData As String
Private myOutputRange As String
Private myLinkFunction As GLM_LINKFUNC_TYPE
Private mySignificanceLevel As String
Private myModelParamsAction As MODEL_COEFF_STATE_TYPE
Private myMaxIteration As Long
Private myGoodnessFit As Boolean
Private myResidDiagnosis As Boolean
Private mybatchSize As Long

Public Property Get DISPERSION_PARAM() As Double
  Select Case myLinkFunction
    Case GLM_IDENTITY
      DISPERSION_PARAM = 1#
    Case GLM_LOG
      DISPERSION_PARAM = 1#
    Case Else
      DISPERSION_PARAM = 1# / mybatchSize
  End Select
End Property



Public Property Get INPUT_RESPONSE_RANGE() As String
  INPUT_RESPONSE_RANGE = myInputResponseData
End Property

Public Property Let INPUT_RESPONSE_RANGE(ByVal vNewValue As String)
  myInputResponseData = vNewValue
End Property

Public Property Get INPUT_VARIABLES_RANGE() As String
  INPUT_VARIABLES_RANGE = myInputVariableData
End Property

Public Property Let INPUT_VARIABLES_RANGE(ByVal vNewValue As String)
  myInputVariableData = vNewValue
End Property

Public Property Get LINKFUNC() As GLM_LINKFUNC_TYPE
  LINKFUNC = myLinkFunction
End Property

Public Property Let LINKFUNC(ByVal vNewValue As GLM_LINKFUNC_TYPE)
  myLinkFunction = vNewValue
End Property


Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get BATCH_SIZE() As Long
  BATCH_SIZE = mybatchSize
End Property

Public Property Let BATCH_SIZE(ByVal vNewValue As Long)
  mybatchSize = vNewValue
End Property


Public Property Get MODEL_PARAM_STATE() As MODEL_COEFF_STATE_TYPE
  MODEL_PARAM_STATE = myModelParamsAction
End Property

Public Property Let MODEL_PARAM_STATE(ByVal vNewValue As MODEL_COEFF_STATE_TYPE)
  myModelParamsAction = vNewValue
End Property

Public Property Get MAX_ITERATIONS() As Long
  MAX_ITERATIONS = myMaxIteration
End Property

Public Property Let MAX_ITERATIONS(ByVal vNewValue As Long)
  myMaxIteration = vNewValue
End Property


Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property

Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property


Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  myInputResponseData = ""
  myInputVariableData = ""
  myOutputRange = Utilities.AddressEx(ActiveCell)
  myModelParamsAction = COEFF_GUESS
  myMaxIteration = 100
  myLinkFunction = GLM_IDENTITY
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myResidDiagnosis = True
  myGoodnessFit = True
  mybatchSize = 5
End Sub

Public Function isValidModel()
  Dim myRange As Object
  
  isValidModel = True
  If Me.MODEL_PARAM_STATE = COEFF_CALIBRATE Then
    isValidModel = isValidModel And (Me.MAX_ITERATIONS > 1)
  End If
  
  If Len(Me.INPUT_RESPONSE_RANGE) > 0 Then
    Set myRange = Range(Me.INPUT_RESPONSE_RANGE)
  End If
  
  ' Make sure Poisson has only positive numbers
  If Me.LINKFUNC = GLM_LOG Then
    If Not (myRange Is Nothing) Then
      ' Get the Max value
      isValidModel = isValidModel And (WorksheetFunction.MIN(myRange) >= 0#)
    End If
  End If
  
  
  ' Do we have a binomial (0,1)
  If Me.LINKFUNC > GLM_LOG Then
    isValidModel = isValidModel And (Me.BATCH_SIZE > 1)
    If Not (myRange Is Nothing) Then
      ' Get the Max value
      isValidModel = isValidModel And (WorksheetFunction.MAX(myRange) <= 1#) And (WorksheetFunction.MIN(myRange) >= 0#)
    End If
  End If
End Function


' Print the Goodness of fit function list
Public Sub PrintARMAGoodnessOfFit(myRange As Range, P As Integer, Q As Integer, parameters As Range, InputRange As String, ASCENDING As Boolean)
  Const sSOURCE As String = "PrintARMAGoodnessOfFit"
  
  Dim nAscending As Integer

  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  Dim phis As String
  Dim thetas As String
    
    phis = vbNullString
    If P > 0 Then
       phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    End If
    
    thetas = vbNullString
    If Q > 0 Then
       thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    End If
    
    
    myRange.Cells(2, 1).Select
    Selection.ClearComments
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' "LLF"
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' "LLF"
    End If
   
    myRange.Cells(3, 1).Select
    Selection.formula = "=ARMA_LLF(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
                                        
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 2).Select
    Selection.ClearComments
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' "AIC"
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' "AIC"
    End If
    myRange.Cells(3, 2).Select
    Selection.formula = "=ARMA_AIC(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
    Selection.NumberFormat = "0.00"
    
    myRange.Cells(2, 3).Select
    Selection.ClearComments
    Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
    If Selection.Comment Is Nothing Then
      Selection.AddComment MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_GOF_CHECK_NOTE) ' "CHECK"
    Else
      Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_GOF_CHECK_NOTE) ' "CHECK"
    End If
    
    myRange.Cells(3, 3).Select
    Selection.formula = "=ARMA_CHECK(" & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & ")"
    Selection.NumberFormat = "0."
End Sub

' Print the Residual Diagnosis tests
Public Sub PrintARMAResidualDiagnosis(InputRange As String, ASCENDING As Boolean, P As Integer, Q As Integer, parameters As Range, significanceLevel As String, myRange As Range)
  Const sSOURCE As String = "PrintARMAResidualDiagnosis"
  
    Dim ResidualsEqn As String
    Dim XKURT As String
    Dim phis As String
    Dim thetas As String
    Dim nAscending As Integer
    
    
    phis = vbNullString
    If P > 0 Then
       phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
    End If
    
    thetas = vbNullString
    If Q > 0 Then
       thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
    End If
    
    nAscending = 0
    If ASCENDING = True Then
       nAscending = 1
    End If
    
    XKURT = "0"
    ResidualsEqn = "RMNA(ARMA_RESID(" & InputRange & "," & nAscending & "," & parameters.Cells(1, 1).Address(True, True) & "," & _
                                        parameters.Cells(2 + P + Q, 1).Address(True, True) & "," & _
                                        phis & "," & _
                                        thetas & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, significanceLevel, XKURT, myRange)
End Sub


Public Sub printGLMModelOutput(myRange As Range)
  Const sSOURCE As String = "printGLMModelOutput"
  
  Dim parameters As Object
  Dim Index As Long
  Dim alphaStat As String
  
  
  On Error GoTo ErrorHnadler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) Print the GLM Coefficient
  Call PrintGLMCoefficients(myRange)

  ' (2) Initialize the parameters
  Set parameters = myRange.offset(2, 2)
  Call printParametersValues(parameters)
  
  Index = 4
  If Me.includeGoodnessOfFit Then
    Call PrintGLMGoodnessOfFit(myRange.offset(0, Index), myRange.offset(2, 2))
    
    Index = Index + 4
  End If
  
  If Me.includeGoodnessOfFit Then
    
    Call PrintSignificanceLevel(myRange.offset(0, Index + 5))
    alphaStat = myRange.offset(0, Index + 5).Address(True, True)
    
    Call PrintGLMResidualDiagnosis(myRange.offset(0, Index), myRange.offset(2, 2), alphaStat)
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub

' Print a decorated cell to designated the statistical significance level
Private Sub PrintSignificanceLevel(myRange As Range)
  Const sSOURCE As String = "PrintSignificanceLevel"
  
  
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
    
  alphaLevel = getAlphaValue(mySignificanceLevel)
  alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .formula = "=" & alphaUSLevel
      .NumberFormat = "0.00%"
  
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      
      With .Interior
          .Pattern = xlSolid
          .PatternColorIndex = xlAutomatic
          .Color = vbYellow
      End With
      With .Borders(xlEdgeRight)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeLeft)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
End Sub



Private Sub PrintGLMGoodnessOfFit(myRange As Range, myBetasRange As Range)
  Const sSOURCE As String = "PrintGLMGoodnessOfFit"
  
  Dim parameters As Object
  Dim P As Integer
  Dim betas As String
  Dim phi As String
  Dim Lvk As String
  
  
  On Error GoTo ErrorHnadler
  
  Set parameters = Range(Me.INPUT_VARIABLES_RANGE)
  If parameters Is Nothing Then
    Exit Sub
  End If
  
  P = parameters.columns.count
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

   If P > 0 Then
      betas = Range(myBetasRange.Cells(1, 1), myBetasRange.offset(P, 0)).Address(True, True)
      phi = myBetasRange.offset(P + 1, 0).Address(True, True)
      Lvk = myBetasRange.offset(P + 2, 0).Address(True, True)
   End If
   
   
  myRange.Cells(2, 1).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' "LLF"
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' "LLF"
  End If
  
  
   myRange.Cells(3, 1).Select
   Selection.formula = "=GLM_LLF(" & Me.INPUT_RESPONSE_RANGE & "," & Me.INPUT_VARIABLES_RANGE & "," & _
                                       betas & "," & _
                                       phi & "," & _
                                       Lvk & ")"
                                       
   Selection.NumberFormat = "0.00"
   
   myRange.Cells(2, 2).Select
   Selection.ClearComments
   Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
   If Selection.Comment Is Nothing Then
     Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' "LLF"
   Else
     Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' "LLF"
   End If
   
   myRange.Cells(3, 2).Select
   Selection.formula = "=GLM_AIC(" & Me.INPUT_RESPONSE_RANGE & "," & Me.INPUT_VARIABLES_RANGE & "," & _
                                       betas & "," & _
                                       phi & "," & _
                                       Lvk & ")"
   Selection.NumberFormat = "0.00"
   
   myRange.Cells(2, 3).Select
   Selection.ClearComments
   Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
   If Selection.Comment Is Nothing Then
     Selection.AddComment MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_GOF_CHECK_NOTE) ' "CHECK"
   Else
     Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_GOF_CHECK_NOTE) ' "CHECK"
   End If
   
   myRange.Cells(3, 3).Select
   Selection.formula = "=GLM_CHECK(" & betas & "," & _
                                       phi & "," & _
                                       Lvk & ")"
   Selection.NumberFormat = "0."
Cleanup:
  myRange.Cells(1, 1).Select
  
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "Error occured while preparing the ARMA model", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub

Private Sub PrintGLMResidualDiagnosis(myRange As Range, myBetasRange As Range, ByVal alphaStat As String)
  Const sSOURCE As String = "PrintGLMResidualDiagnosis"
  
  Dim parameters As Object
  Dim P As Integer
  Dim betas As String
  Dim phi As String
  Dim Lvk As String
  
  Dim ResidualsEqn As String
  Dim XKURT As String
  
  On Error GoTo ErrorHnadler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  Set parameters = Range(Me.INPUT_VARIABLES_RANGE)
  If parameters Is Nothing Then
    Exit Sub
  End If
  
  P = parameters.columns.count
  
  If P > 0 Then
     betas = Range(myBetasRange.Cells(1, 1), myBetasRange.offset(P, 0)).Address(True, True)
     phi = myBetasRange.offset(P + 1, 0).Address(True, True)
     Lvk = myBetasRange.offset(P + 2, 0).Address(True, True)
  End If
  
  XKURT = "0"
  ResidualsEqn = "RMNA(GLM_RESID(" & Me.INPUT_RESPONSE_RANGE & "," & Me.INPUT_VARIABLES_RANGE & "," & _
                                      betas & "," & _
                                      phi & "," & _
                                      Lvk & "))"
    
  
  myRange.Cells(1, 2).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_HEADER) ' "Residuals (standardized) Analysis"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 2), myRange.Cells(2, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With

  myRange.Cells(4, 1).Select
  With Selection
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TARGET_HEADER) ' "Target"
  End With
    
  myRange.Cells(5, 1).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_RESID_DIAG_SIG_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_RESID_DIAG_SIG_NOTE)
      End If
  End With
    
    
  Dim Labels(1 To 7) As String
  Labels(1) = "AVG"
  Labels(2) = "STDEV"
  Labels(3) = "SKEW"
  Labels(4) = "KURTOSIS"
  Labels(5) = "Normal?"
    
  Dim i As Long
  
  For i = 1 To 5
      myRange.Cells(2, 1 + i).Select
      With Selection
          .value = Labels(i)
          .Font.Bold = True
          .HorizontalAlignment = xlCenter
      End With
  Next i

  Dim Formulas(1 To 5) As String
                                        
  ' Convert mySignificanceLevel to US number format
  Formulas(1) = "=AVERAGE(" & ResidualsEqn & ")"
  Formulas(2) = "=STDEV(" & ResidualsEqn & ")"
  Formulas(3) = "=SKEW(" & ResidualsEqn & ")"
  Formulas(4) = "=KURT(" & ResidualsEqn & ")"
  Formulas(5) = "=IF(NormalityTest(" & ResidualsEqn & ",1) >" & alphaStat & ", TRUE, FALSE)"
    
  For i = 1 To 5
    myRange.Cells(3, 1 + i).Select
    With Selection
      .formula = Formulas(i)
      .NumberFormat = "0.00"
      .HorizontalAlignment = xlCenter
    End With
  Next i
    
    
  Dim TargetVals(1 To 4) As String
  TargetVals(1) = "0"
  TargetVals(2) = "1.0"
  TargetVals(3) = "0.0"
  TargetVals(4) = "0.0"
    
  Dim TestResults(1 To 4) As String
  TestResults(1) = "=IF( TEST_MEAN(" & ResidualsEqn & "," & myRange.Cells(4, 2).Address(False, False) & ") >" & alphaStat & "/2, FALSE, TRUE)"
  TestResults(2) = "=IF( TEST_STDEV(" & ResidualsEqn & "," & myRange.Cells(4, 3).Address(False, False) & ") >" & alphaStat & ", FALSE, TRUE)"
  TestResults(3) = "=IF( TEST_SKEW(" & ResidualsEqn & ") >" & alphaStat & "/2, FALSE, TRUE)"
  TestResults(4) = "=IF( TEST_XKURT(" & ResidualsEqn & ") >" & alphaStat & "/2, FALSE, TRUE)"
    
  For i = 1 To 4
    myRange.Cells(4, 1 + i).Select
    With Selection
      .formula = TargetVals(i)
      .NumberFormat = "0.00"
      .HorizontalAlignment = xlCenter
    End With
    
    myRange.Cells(5, 1 + i).Select
    With Selection
      .formula = TestResults(i)
      .HorizontalAlignment = xlCenter
    End With
  Next i

Cleanup:
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub


Private Sub PrintGLMCoefficients(myRange As Range)
  Const sSOURCE As String = "PrintGLMCoefficients"
  
  Dim parameters As Object
  Dim P As Integer
  Dim i As Long
  
  On Error GoTo ErrorHnadler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  Set parameters = Range(Me.INPUT_VARIABLES_RANGE)
  If parameters Is Nothing Then
    Exit Sub
  End If
  
  P = parameters.columns.count


  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "GLM(" & P & "," & Me.LINKFUNC & ")"
      If Me.LINKFUNC > GLM_LOG Then
        .value = "GLM(" & P & "," & Me.LINKFUNC & "," & Me.BATCH_SIZE & ")"
      End If
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
  
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
  
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
  
  ReDim S(1 To P + 3, 2)
  For i = 0 To P + 1
    S(i + 1, 1) = ChrW$(&H3B2&) & "[" & i & "]"
    S(i + 1, 2) = "0"
  Next i
  
  S(P + 2, 1) = ChrW$(&H3C6&)
  S(P + 2, 2) = "0"
  
  
  S(P + 3, 1) = "Lvk"
  S(P + 3, 2) = Me.LINKFUNC

  For i = 1 To P + 3
      ' Set tmpRange = Nothing
      myRange.Cells(i + 2, 2).Select
      With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = True
          .value = S(i, 1)
      End With
      Call Super_Sub
      
      myRange.Cells(i + 2, 3).Select
      With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = S(i, 2)
          .NumberFormat = "0.00"
      End With
  Next i

Cleanup:
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub

Private Sub guessInitialParameters(ByRef inputs As Range)
  Const sSOURCE As String = "guessInitialParameters"
  
  Dim parameters As Object
  Dim P As Integer
  Dim i As Long
  
  On Error GoTo ErrorHnadler
  
  Set parameters = Range(Me.INPUT_VARIABLES_RANGE)
  If parameters Is Nothing Then
    Exit Sub
  End If
  
  P = parameters.columns.count
  
  Range(inputs.Cells(1, 1), inputs.offset(P + 1, 0)) = vb_GLM_GUESS(Me.INPUT_RESPONSE_RANGE, Me.INPUT_VARIABLES_RANGE, Me.DISPERSION_PARAM(), Me.LINKFUNC)

Cleanup:
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub

Private Sub calibrateParameters(ByRef inputs As Range)
  Const sSOURCE As String = "guessInitialParameters"
  
  Dim parameters As Object
  Dim P As Integer
  Dim i As Long
  
  On Error GoTo ErrorHnadler
  
  Set parameters = Range(Me.INPUT_VARIABLES_RANGE)
  If parameters Is Nothing Then
    Exit Sub
  End If
  
  P = parameters.columns.count
  
  Range(inputs.Cells(1, 1), inputs.offset(P + 1, 0)) = vb_GLM_CALIBRATE(Me.INPUT_RESPONSE_RANGE, Me.INPUT_VARIABLES_RANGE, Me.DISPERSION_PARAM(), Me.LINKFUNC, Me.MAX_ITERATIONS)
Cleanup:
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub

Private Sub printParametersValues(ByRef Params As Range)
  
  '(1) Print the default model coefficient
  If Me.MODEL_PARAM_STATE = COEFF_GUESS Then
    Call guessInitialParameters(Params)
  Else
    Call calibrateParameters(Params)
  End If
End Sub



Attribute VB_Name = "GLOBAL_DEF"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16769 $
'  $Date: 2019-10-07 18:27:44 -0500 (Mon, 07 Oct 2019) $
'  $Author: mohamad $
'  $Id: GLOBAL_DEF.bas 16769 2019-10-07 23:27:44Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/GLOBAL_DEF.bas $
'
Private Const msMODULE As String = "GLOBAL_DEF"

Public Const PRODUCT_NAME As String = "NumXL"
Public Const PRODUCT_VERSION As String = "1.66"
Public Const PRODUCT_RELEASE As String = "PARSON"
Public Const PRODUCT_MEDIUMNAME As String = PRODUCT_NAME & " " & PRODUCT_VERSION
Public Const PRODUCT_FULLNAME As String = PRODUCT_MEDIUMNAME & "(" & PRODUCT_RELEASE & ")"

Public Const PRODUCT_UI_NAME As String = PRODUCT_NAME & "UI"
Public Const HELP_FILENAME As String = PRODUCT_NAME & ".chm"
Public Const LICENSEMGR_FILENAME As String = "LicenseManager.exe"

' This is the function we call to collect installation information
Public Const PRODUCT_ADDIN_INFO_API As String = "NUMXL_INFO"

' Uninstall Registry Path
Public Const REGISTRY_HKCU As String = "HKEY_CURRENT_USER"
Public Const REGISTRY_HKLM As String = "HKEY_LOCAL_MACHINE"

Public Const REGISTRY_UNINSTALL_PATH As String = "Software\Microsoft\Windows\CurrentVersion\Uninstall\" & PRODUCT_NAME & "\UninstallPath"
Public Const HKCU_UNINSTALL_REG_PATH As String = REGISTRY_HKCU & "\" & REGISTRY_UNINSTALL_PATH    ' key = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\NumXL\UninstallPath"
Public Const HKLM_UNINSTALL_REG_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_UNINSTALL_PATH    ' key = "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\NumXL\UninstallPath"

' Product Registry Path
Public Const REGISTRY_PRODUCT_COMMON_PATH As String = "SOFTWARE\Spider Financial\NumXL"

Public Const REGISTRY_CUSTOMER_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\CUSTOMER"
Public Const REGISTRY_HKCU_CUSTOMER_PATH As String = REGISTRY_HKCU & "\" & REGISTRY_CUSTOMER_PATH
Public Const REGISTRY_HKLM_CUSTOMER_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_CUSTOMER_PATH

Public Const REGISTRY_EMAIL_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\EMAIL"
Public Const REGISTRY_HKCU_EMAIL_PATH As String = REGISTRY_HKCU & "\" & REGISTRY_EMAIL_PATH
Public Const REGISTRY_HKLM_EMAIL_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_EMAIL_PATH

Public Const REGISTRY_ORGANIZATION_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\ORGANIZATION"
Public Const REGISTRY_HKCU_ORGANIZATION_PATH As String = REGISTRY_HKCU & "\" & REGISTRY_ORGANIZATION_PATH
Public Const REGISTRY_HKLM_ORGANIZATION_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_ORGANIZATION_PATH

Public Const REGISTRY_BUILDDATE_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\BUILD"
Public Const REGISTRY_HKCU_BUILDDATE_PATH As String = REGISTRY_HKCU & "\" & REGISTRY_BUILDDATE_PATH
Public Const REGISTRY_HKLM_BUILDDATE_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_BUILDDATE_PATH

' Service date
Public Const REGISTRY_SERVICEDATE_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\SERVICE"
Public Const REGISTRY_HKLM_SERVICEDATE_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_SERVICEDATE_PATH

Public Const REGISTRY_NEWVERSION_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\NEWVERSION"
Public Const REGISTRY_HKLM_NEWVERSION_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_NEWVERSION_PATH

Public Const REGISTRY_UPDATEURL_PATH As String = REGISTRY_PRODUCT_COMMON_PATH & "\UPDATEURL"
Public Const REGISTRY_HKLM_UPDATEURL_PATH As String = REGISTRY_HKLM & "\" & REGISTRY_UPDATEURL_PATH


' URL and links
Public Const BASE_URL As String = "https://www.numxl.com"
Public Const BASE_SUPPORT_URL As String = "https://support.numxl.com"
Public Const PRODUCT_URL As String = BASE_URL & "/products/numxl"
Public Const BUY_URL As String = BASE_URL & "/products/numxl"

' Public Const EULA_URL As String = BASE_URL & "/support/documentation/numxl/license-agreement/end-user-license-agreement-eula"
Public Const EULA_URL As String = BASE_SUPPORT_URL & "hc/articles/218142803"

'Public Const USERGUIDE_URL As String = BASE_URL & "/support/documentation/numxl/users-guide"
Public Const USERGUIDE_URL As String = BASE_SUPPORT_URL & "/hc/categories/201878926"

' Public Const GETTINGSTARTED_URL As String = BASE_URL & "/support/documentation/numxl/getting-started"
Public Const GETTINGSTARTED_URL As String = BASE_SUPPORT_URL & "/hc/sections/203146523"

Public Const CONTACTUS_URL As String = BASE_URL & "/about-us/contact-us"
Public Const COMMUNITY_URL As String = BASE_SUPPORT_URL & "/hc/communities/public/topics"

Public Const REALEASENOTES_URL As String = BASE_SUPPORT_URL & "/hc/articles/207842203"

' Supported model names
Public Const ARMA_MODEL_NAME As String = "ARMA"
Public Const AIRLINE_MODEL_NAME As String = "AirLine"
Public Const GARCH_MODEL_NAME As String = "GARCH"
Public Const EGARCH_MODEL_NAME As String = "E-GARCH"
Public Const GARCHM_MODEL_NAME As String = "GARCH-M"

' We need to initialize this array (upon add-in start)
' TODO: (MFE)
Public MODELS_NAME_ARRAY(1 To 7) As String


' Solver Section
Public Const US_MSSOLVER_LISTNAME As String = "Solver Add-In"
Public Const UN_MSSOLVER_LISTNAME As String = "Solver"

' Define constant for MSO object library (removed reference)
Public Const msoLanguageIDUI As Long = 2
Public Const msoElementErrorBarStandardError As Long = 701
Public Const msoFalse As Long = 0
Public Const msoTrue As Long = -1
Public Const msoGradientHorizontal As Long = 1
Public Const msoThemeColorAccent1 As Long = 5
Public Const msoThemeColorText2 As Long = 15
Public Const msoTextDirectionLeftToRight As Long = 1
Public Const msoAlignCenter As Long = 1
Public Const msoNoUnderline As Long = 0
Public Const msoNoStrike As Long = 0



Attribute VB_Name = "GeneralUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: GeneralUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/GeneralUO.cls $
'
Private Const msMODULE As String = "CLASS:GeneralUO"

Private myInputData As String
Private myInputDataMask As String

Private myStockData As Boolean
Private myAscending As Boolean

Private myDependentData As String
Private myGroupByColumns As Boolean

Private myOutputRange As String
Private myOutputGraphRange As String

Private mySignificanceLevel As String

Private myDependentMinVal As Double
Private myDependentMaxVal As Double


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myOutputRange = Utilities.formatCellsRange(ActiveCell.Address(True, True))
  myInputDataMask = ""
  myInputData = ""
  myDependentData = ""
  myAscending = True
  myStockData = False
  myGroupByColumns = True
  
  myDependentMinVal = QNaN
  myDependentMaxVal = QNaN
End Sub

Public Property Get DEPENDENT_MINVAL() As Double
  DEPENDENT_MINVAL = myDependentMinVal
End Property

Public Property Get DEPENDENT_MAXVAL() As Double
  DEPENDENT_MAXVAL = myDependentMaxVal
End Property

Public Sub UpdateDependentMinMaxVals()
  Dim zRange As String
  Dim rng As Object
  
  If Len(myDependentData) > 0 Then
    zRange = DEPENDENT_DATA_NO_LABELS
    Set rng = Range(zRange)
    ' Invalid Address
    If rng Is Nothing Then
      myDependentMinVal = QNaN
      myDependentMaxVal = QNaN
      Exit Sub
    End If
    ' Empty range
    If rng.rows.count < 1 Or rng.columns.count < 1 Then
      myDependentMinVal = QNaN
      myDependentMaxVal = QNaN
      Exit Sub
    End If
    
    myDependentMinVal = Application.WorksheetFunction.MIN(rng)
    myDependentMaxVal = Application.WorksheetFunction.MAX(rng)
    
    Set rng = Nothing
  End If
End Sub


Public Property Get GROUPBY_COLUMNS() As Boolean
  GROUPBY_COLUMNS = myGroupByColumns
End Property

Public Property Let GROUPBY_COLUMNS(ByVal vNewValue As Boolean)
  myGroupByColumns = vNewValue
End Property


Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get INPUT_MASK() As String
  INPUT_MASK = myInputDataMask
End Property

Public Property Let INPUT_MASK(ByVal vNewValue As String)
  myInputDataMask = vNewValue
End Property



'myDependentData
Public Property Get DEPENDENT_RANGE() As String
  DEPENDENT_RANGE = myDependentData
End Property

Public Property Let DEPENDENT_RANGE(ByVal vNewValue As String)
  myDependentData = vNewValue
End Property


Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH_RANGE() As String
  OUTPUT_GRAPH_RANGE = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH_RANGE(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property

Public Property Get significance() As String
    significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property

Public Property Let ASCENDING(ByVal vNewValue As Boolean)
  myAscending = vNewValue
End Property

Public Property Get DATA_ORDER() As Integer
    DATA_ORDER = 1
    If myAscending = False Then
      DATA_ORDER = 0
    End If
End Property

Public Property Get STOCK_DATA() As Boolean
  STOCK_DATA = myStockData
End Property

Public Property Let STOCK_DATA(ByVal vNewValue As Boolean)
  myStockData = vNewValue
End Property


Public Function LocalFreeSignificane() As String
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  
  alphaLevel = getAlphaValue(mySignificanceLevel)
  LocalFreeSignificane = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)
End Function

Public Function columns() As Long
  columns = Range(myInputData).columns.count
End Function

Public Function INPUT_RANGE_NAN(ByRef myMissingValueUO As MissingValueUO) As String
  Const sSOURCE As String = "procInputRange"
  If Len(myInputData) > 0 Then
    INPUT_RANGE_NAN = myMissingValueUO.procInputRange(myInputData, myAscending)
  Else
    INPUT_RANGE_NAN = myInputData
  End If
End Function

Public Function GET_INPUT_DATA_LABEL(ByVal Index As Long) As String
  Dim rng As Object
  Dim rowIndex As Long
  Dim ColIndex As Long
  
  GET_INPUT_DATA_LABEL = "Error"
  If Me.HAS_LABELS() Then
    Set rng = Range(INPUT_RANGE)
    If rng Is Nothing Then
      Exit Function
    End If
    
    If Me.GROUPBY_COLUMNS Then
      rowIndex = 1
      ColIndex = Index
      If Index > rng.columns.count Then
        Exit Function
      End If
    Else
      ColIndex = 1
      rowIndex = Index
      If Index > rng.rows.count Then
        Exit Function
      End If
    End If
    
    GET_INPUT_DATA_LABEL = rng.Cells(rowIndex, ColIndex)
  Else
     GET_INPUT_DATA_LABEL = "X(" & Index & ")"
  End If
End Function

Public Function INPUT_DATA_NO_LABELS() As String
  Const sSOURCE As String = "INPUT_DATA_NO_LABELS"
  Dim rng As Object
  Dim rng2 As Object
  Dim rows As Long
  Dim cols As Long
  Dim szWkshtName As String
  
  szWkshtName = Utilities.getCellsRangeWksht(Me.INPUT_RANGE)
  INPUT_DATA_NO_LABELS = Me.INPUT_RANGE
  If Me.HAS_LABELS Then
    Set rng = Range(Me.INPUT_RANGE)
    
    rows = rng.rows.count
    cols = rng.columns.count
    If Me.GROUPBY_COLUMNS Then
      ' skip first row
      Set rng2 = Range(rng.Cells(2, 1), rng.Cells(rows, cols))
    Else
      ' skip first row
      Set rng2 = Range(rng.Cells(1, 2), rng.Cells(rows, cols))
    End If
    INPUT_DATA_NO_LABELS = Utilities.formatSubCellsRange(rng2.Address(), szWkshtName)
    
  End If
End Function

Public Function DEPENDENT_DATA_NO_LABELS() As String
  Const sSOURCE As String = "INPUT_DATA_NO_LABELS"
  Dim rng As Object
  Dim rng2 As Object
  Dim rows As Long
  Dim cols As Long
  Dim szWkshtName As String
  
  szWkshtName = Utilities.getCellsRangeWksht(Me.DEPENDENT_RANGE)
  DEPENDENT_DATA_NO_LABELS = Me.DEPENDENT_RANGE
  If Me.DEPENDENT_HAS_LABELS Then
    Set rng = Range(Me.DEPENDENT_RANGE)
    
    rows = rng.rows.count
    cols = rng.columns.count
    
    ' Support single row or single column
    If rows > cols Then
      ' skip first row
      Set rng2 = Range(rng.Cells(2, 1), rng.Cells(rows, cols))
      
      DEPENDENT_DATA_NO_LABELS = rng2.Address()
    Else
      ' skip first row
      Set rng2 = Range(rng.Cells(1, 2), rng.Cells(rows, cols))
      
      DEPENDENT_DATA_NO_LABELS = rng2.Address()
    End If
    DEPENDENT_DATA_NO_LABELS = Utilities.formatSubCellsRange(rng2.Address(), szWkshtName)
  End If
End Function



Public Function GET_INPUT_DATA_RNG() As String
  Const sSOURCE As String = "GET_INPUT_DATA_RNG"
  Dim rng As Object
  Dim rng2 As Object
  Dim rows As Long
  Dim cols As Long
  Dim szWkshtName As String
  
  szWkshtName = Utilities.getCellsRangeWksht(Me.INPUT_RANGE)
  GET_INPUT_DATA_RNG = Me.INPUT_RANGE
  If Me.HAS_LABELS Then
    Set rng = Range(Me.INPUT_RANGE)
    
    rows = rng.rows.count
    cols = rng.columns.count
    If Me.GROUPBY_COLUMNS Then
      ' skip first row
      Set rng2 = Range(rng.Cells(2, 1), rng.Cells(rows, cols))
      
      GET_INPUT_DATA_RNG = rng2.Address()
    Else
      ' skip first row
      Set rng2 = Range(rng.Cells(1, 2), rng.Cells(rows, cols))
      
      GET_INPUT_DATA_RNG = rng2.Address()
    End If
    GET_INPUT_DATA_RNG = Utilities.formatSubCellsRange(rng2.Address(), szWkshtName)
    
  End If
  
  ' Now, Let's check the Grouping
  If Not Me.GROUPBY_COLUMNS Then
    GET_INPUT_DATA_RNG = "NxTranspose(" & GET_INPUT_DATA_RNG & ")"
  End If
  
End Function


Public Function HAS_LABELS() As Boolean
  
  Const sSOURCE As String = "HAS_LABELS"
  Dim myValue As Variant
  Dim rng As Object
  
  On Error GoTo ErrorHdler
  
  HAS_LABELS = False
  
  ' Check if we have input range
  If Len(Me.INPUT_RANGE) = 0 Then
    Exit Function
  End If
  
  Set rng = Range(Me.INPUT_RANGE)
    
  If rng Is Nothing Then
    Exit Function
  End If

  ' Check the upper left cell for string-type
  myValue = rng.Cells(1, 1)
  Select Case VarType(myValue)
    Case vbString
      HAS_LABELS = True
  Case Else
    HAS_LABELS = False
  End Select

finish:
  Exit Function
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  
  Resume finish
End Function
  
Public Function DEPENDENT_HAS_LABELS() As Boolean
  
  Const sSOURCE As String = "HAS_LABELS"
  Dim myValue As Variant
  Dim rng As Object
  
  On Error GoTo ErrorHdler
  
  DEPENDENT_HAS_LABELS = False
  
  ' Check if we have input range
  If Len(Me.DEPENDENT_RANGE) = 0 Then
    Exit Function
  End If
  
  Set rng = Range(Me.DEPENDENT_RANGE)
    
  If rng Is Nothing Then
    Exit Function
  End If

  ' Check the upper left cell for string-type
  myValue = rng.Cells(1, 1)
  Select Case VarType(myValue)
    Case vbString
      DEPENDENT_HAS_LABELS = True
  Case Else
    DEPENDENT_HAS_LABELS = False
  End Select

finish:
  Exit Function
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  
  Resume finish
End Function


Attribute VB_Name = "HistogramFrm"
Attribute VB_Base = "0{94A858C9-6721-4481-AC25-85FC43E175FC}{A1176412-4F68-48A1-AC7B-2294A0684687}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: HistogramFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/HistogramFrm.frm $
'
Private Const msMODULE As String = "USERFORM:Histogram"
Private Const zenSlugId As String = "articles/216478663"

Private userOptions As HistogramUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub chkCumulative_Click()
  userOptions.HIST_CUM = chkCumulative.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOverlayNormal_Click()
  userOptions.NORMAL_OVERLAY = chkOverlayNormal.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmbBinsAlgo_Change()
  
  Dim oldVal As HISTOGRAM_BINS_ALGO
  
  oldVal = userOptions.BINS_ALGO

  If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_MANUAL) Then
    userOptions.BINS_ALGO = HIST_BINS_MANUAL_CHOICE
  Else
    If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_STURGES) Then
      userOptions.BINS_ALGO = HIST_BINS_STURGES
    Else
      If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SQUAREROOT) Then
        userOptions.BINS_ALGO = HIST_BINS_SQUARE_ROOT
      Else
        If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SCOTT) Then
          userOptions.BINS_ALGO = HIST_BINS_SCOTT_CHOICE
        Else
          If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_FREEDMAN) Then
            userOptions.BINS_ALGO = HIST_BINS_FREEDMAN_DIACONIS_CHOICE
          Else
            If cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_LOSSFUNC) Then
              userOptions.BINS_ALGO = HIST_BINS_LOSS_OPTIMAL
            End If
          End If
        End If
      End If
    End If
  End If

  ' Has the value changed
  If oldVal <> userOptions.BINS_ALGO Then
    Call userOptions.updateBins
    If callValidateForm = True Then
      Call validateForm
      
      txtBinsManual.value = userOptions.BINS_MANUAL
    End If
  End If
  
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  ' Update the calculated bins
  Call userOptions.updateBins
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR) ' "The time series range should be one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) ' "The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefEditOutputTable)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)  ' "Enter a valid output range."
          Exit Sub
        Else
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_STATUSBAR_PLOT_CALCULATION_MSG) ' "Histogram Plot Calculation"
          
          Call userOptions.printOutput(myRange)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Private Sub RefEditOutputGraph_Change()
  userOptions.OUTPUT_GRAPH = Utilities.procInputCellsRange(RefEditOutputGraph.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditOutputTable_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefEditOutputTable.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
    
    txtBinsManual.value = userOptions.BINS_MANUAL
  End If

End Sub

Private Sub txtBinsManual_Change()
  If Len(txtBinsManual.value) > 0 Then
    If IsNumeric(txtBinsManual.value) And txtBinsManual.value > 0 Then
      userOptions.BINS_MANUAL = txtBinsManual.value
    
      If callValidateForm = True Then
        Call validateForm
      End If
    End If
  End If
End Sub

Private Sub MultiPage1_Click(ByVal Index As Long)
  Select Case MultiPage1.SelectedItem.Name
    Case "optionsPg":
      Call userOptions.updateBins
      txtBinsManual.value = userOptions.BINS_MANUAL
  End Select

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Prepare the form with proper locale labels
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_FRM_CAPTION)
    
  Me.MultiPage1.Pages("GeneralPg").Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_PG_GNRL_CAPTION)
  Me.MultiPage1.Pages("GeneralPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_PG_GNRL_HELPTIP)
    
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_FRAME_HELPTIP)
  
  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_HELPTIP)
  RefEditOutputTable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("optionsPg").Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_PG_OPTIONS_CAPTION)
  Me.MultiPage1.Pages("optionsPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_PG_OPTIONS_HELPTIP)
  
  BinsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_FRAME_CAPTION)
  BinsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_FRAME_HELPTIP)
  
  BinsAlgoLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_CAPTION)
  BinsAlgoLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_HELPTIP)
  cmbBinsAlgo.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_HELPTIP)
  
  LabelManualBins.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_CAPTION)
  LabelManualBins.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_CAPTION)
  txtBinsManual.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_CAPTION)
  
  'OptionsFrame
  OptionsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_FRAME_CAPTION)
  OptionsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_FRAME_HELPTIP)
  
  chkCumulative.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_CUMULATIVE_CHKBX_CAPTION)
  chkCumulative.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_CUMULATIVE_CHKBX_HELPTIP)
  
  chkOverlayNormal.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_NORMALOVERLAY_CHKBX_CAPTION)
  chkOverlayNormal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OPTIONS_NORMALOVERLAY_CHKBX_HELPTIP)
    
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OK_BTN_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New HistogramUO
    
  ' Initialize the combo box
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_MANUAL) '"Manual"
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_STURGES) ' "Sturges's Formula"
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SQUAREROOT) ' "Square-root Choice"
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SCOTT) '  "Scott's Choice"
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_FREEDMAN) ' "Freedman-Diaconis choice"
  cmbBinsAlgo.AddItem MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_LOSSFUNC) ' "Loss-Function Optimal"
    
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub



Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = userOptions.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  userOptions.INPUT_RANGE = szInput
  
  'cmbBinsAlgo.Value = userOptions.BINS_ALGO
  RefEditOutputTable.value = userOptions.OUTPUT_TABLE
  RefEditOutputGraph.value = userOptions.OUTPUT_GRAPH
  
  Select Case userOptions.BINS_ALGO
    Case HIST_BINS_MANUAL_CHOICE
       cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_MANUAL) ' "Manual"
    Case HIST_BINS_STURGES
      cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_STURGES) ' "Sturges's Formula"
    Case HIST_BINS_SQUARE_ROOT
      cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SQUAREROOT) ' "Square-root Choice"
    Case HIST_BINS_SCOTT_CHOICE
      cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SCOTT) ' "Scott's Choice"
    Case HIST_BINS_FREEDMAN_DIACONIS_CHOICE
      cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_FREEDMAN) ' "Freedman-Diaconis choice"
    Case HIST_BINS_LOSS_OPTIMAL
      cmbBinsAlgo.value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_LOSSFUNC) ' "Loss-Function Optimal"
  End Select
  
  txtBinsManual.value = userOptions.BINS_MANUAL
  
  chkCumulative.value = userOptions.HIST_CUM
  chkOverlayNormal.value = userOptions.NORMAL_OVERLAY
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  BinsAlgoLabel.enabled = dataAvailable
  cmbBinsAlgo.enabled = dataAvailable
  chkCumulative.enabled = dataAvailable
  chkOverlayNormal.enabled = dataAvailable
  
  Me.MultiPage1.Pages("optionsPg").enabled = dataAvailable
  
  
  ' Check the bins algo selection
  txtBinsManual.enabled = (userOptions.BINS_ALGO = HIST_BINS_MANUAL_CHOICE) And dataAvailable
  LabelManualBins.enabled = txtBinsManual.enabled
  
    
  cmdOK.enabled = dataAvailable
End Sub



Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "HistogramUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: HistogramUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/HistogramUO.cls $
'
Private Const msMODULE As String = "CLASS:HistogramUO"


Public Enum HISTOGRAM_BINS_ALGO
  'Sturges's Formula
  HIST_BINS_STURGES = 1
  'Square-root Choice
  HIST_BINS_SQUARE_ROOT = 2
  'Scott's Choice
  HIST_BINS_SCOTT_CHOICE = 3
  'Freedman-Diaconis choice
  HIST_BINS_FREEDMAN_DIACONIS_CHOICE = 4
  ' Manual
  HIST_BINS_MANUAL_CHOICE = 5
  ' LOSS-FUNCTION Optimal
  HIST_BINS_LOSS_OPTIMAL = 6
End Enum


Private myInputData As String
Private myOutputTableRange As String
Private myOutputGraphRange As String
Private myBinsAlgo As HISTOGRAM_BINS_ALGO
Private myBinsManualNo As Long

Private myHistogramCumulative As Boolean
Private myNormalOverlay As Boolean


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


Public Sub ResetToDefault()
  myOutputTableRange = Utilities.AddressEx(ActiveCell)
  myOutputGraphRange = Utilities.AddressEx(ActiveCell.offset(0, 10))
  myInputData = ""
  
  myBinsAlgo = HIST_BINS_FREEDMAN_DIACONIS_CHOICE
  myBinsManualNo = 2
  
  myHistogramCumulative = True
  myNormalOverlay = True
End Sub



Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property


Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputTableRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputTableRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property

Public Property Get BINS_ALGO() As HISTOGRAM_BINS_ALGO
  BINS_ALGO = myBinsAlgo
End Property

Public Property Let BINS_ALGO(ByVal vNewValue As HISTOGRAM_BINS_ALGO)
  myBinsAlgo = vNewValue
End Property

Public Property Get BINS_MANUAL() As Long
  BINS_MANUAL = myBinsManualNo
End Property

Public Property Let BINS_MANUAL(ByVal vNewValue As Long)
  myBinsManualNo = vNewValue
End Property


Public Property Get HIST_CUM() As Boolean
    HIST_CUM = myHistogramCumulative
End Property

Public Property Let HIST_CUM(ByVal vNewValue As Boolean)
  myHistogramCumulative = vNewValue
End Property

Public Property Get NORMAL_OVERLAY() As Boolean
    NORMAL_OVERLAY = myNormalOverlay
End Property

Public Property Let NORMAL_OVERLAY(ByVal vNewValue As Boolean)
  myNormalOverlay = vNewValue
End Property

' Print the Normality Table below
Public Sub printOutput(myRange As Range)
  Const sSOURCE As String = "printOutput"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim szTemp As String
  
  'Next, let's compute number of bins
  Dim nBins As Long


  nBins = myBinsManualNo
  
  ' Print the table header
  Call printTableHeaders(myRange, nBins)
  
  ' Print the table content
  Call printTableContents(myRange(3, 1), nBins, myRange(1, 3), myRange(1, 5))
  
  'Plot the graph now
  Call plotHistogram(myRange(3, 1), Range(Me.OUTPUT_GRAPH), nBins)
  

End Sub



Public Sub printTableHeaders(myRange As Range, ByVal nBins As Long)
  Const sSOURCE As String = "printTableHeaders"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim szTemp As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlRight
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_HEADER) ' "Histogram Table"
  End With

  myRange.Cells(1, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = nBins
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_NUM_BINS_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_NUM_BINS_NOTE)
    End If
    .NumberFormat = "0"
  End With


  myRange.Cells(2, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_BIN_HEADER) ' "Bin"
  End With

  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_LL_HEADER) ' "LL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LL_NOTE)
    End If
  End With

  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_UL_HEADER) ' "UL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_UL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_UL_NOTE)
    End If
  End With

  ' Compute the Average of the numbers
  myRange.Cells(1, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=average(RMNA(" & Me.INPUT_RANGE & "))"
    .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_AVERAGE_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_AVERAGE_NOTE)
    End If
  End With


  myRange.Cells(2, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_CENTER_HEADER) ' "Center"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_CENTER_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_CENTER_NOTE)
    End If
  End With

  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_FREQ_HEADER) '"Freq"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_FREQ_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_FREQ_NOTE)
    End If
  End With

  ' Compute the STDEV
  myRange.Cells(1, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=stdev(RMNA(" & Me.INPUT_RANGE & "))"
    .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_STDEV_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_STDEV_NOTE)
    End If
  End With

  i = 6
  If Me.HIST_CUM Then
    myRange.Cells(2, i).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_CUMFREQ_HEADER) ' "Cum. Freq"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_CUMFREQ_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_CUMFREQ_NOTE)
      End If
    End With
    i = i + 1
  End If
  
  If Me.NORMAL_OVERLAY Then
    myRange.Cells(2, i).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_NORMAL_HEADER) ' "Normal"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_NORMAL_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_NORMAL_NOTE)
      End If
    End With
  End If
  
  
  ' Now draw the Borders
  Range(myRange.Cells(2, 1), myRange.Cells(2, i)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
End Sub

Public Sub printTableContents(myRange As Range, myBins As Long, myAvg As Range, myStdev As Range)
  Const sSOURCE As String = "printTableContents"
  
  Dim i As Long
  Dim j As Long
  Dim szFormula As String
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  szFormula = "=HISTBIN(" & Me.INPUT_RANGE & "," & myBins & ","
  
  For i = 1 To myBins
    myRange.Cells(i, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = i
      .NumberFormat = "0"
    End With
  
    myRange.Cells(i, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szFormula & myRange.Cells(i, 1).Address(False, True) & ",0)"
      .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
    End With
  
    ' Upper Limit
    myRange.Cells(i, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szFormula & myRange.Cells(i, 1).Address(False, True) & ",1)"
      .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
    End With
  
    ' Center
    myRange.Cells(i, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szFormula & myRange.Cells(i, 1).Address(False, True) & ",2)"
      .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
    End With
  
    ' Center
    myRange.Cells(i, 5).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=NxHistogram(" & Me.INPUT_RANGE & "," & myBins & "," & myRange.Cells(i, 1).Address(False, True) & ",0)"
      .NumberFormat = "#0.0%"
    End With
  
    j = 6
    If Me.HIST_CUM Then
      myRange.Cells(i, j).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NxHistogram(" & Me.INPUT_RANGE & "," & myBins & "," & myRange.Cells(i, 1).Address(False, True) & ",1)"
        .NumberFormat = "#0.0%"
      End With
      
      j = j + 1
    End If
    
    If Me.NORMAL_OVERLAY Then
      myRange.Cells(i, j).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NORMDIST(" & myRange.Cells(i, 3).Address(False, True) & "," & myAvg.Cells(1, 1).Address(True, True) & "," & myStdev.Cells(1, 1).Address(True, True) & ",TRUE)" & _
                   "-NORMDIST(" & myRange.Cells(i, 2).Address(False, True) & "," & myAvg.Cells(1, 1).Address(True, True) & "," & myStdev.Cells(1, 1).Address(True, True) & ",TRUE)"
        
        .NumberFormat = "#0.0%"
      End With
      
      j = j + 1
    End If
    
  Next i
End Sub


Public Sub plotHistogram(Data As Range, myGraphRange As Range, nBins As Long)
  Const sSOURCE As String = "plotHistogram"
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  
  On Error GoTo ErrorHandler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myGraphRange.Worksheet.Name Then
    Sheets(myGraphRange.Worksheet.Name).Activate
  End If
  
  ' Plot the Histogram First
  Dim nNormalCol As Long
  
  Dim HistPlotRange As Object
  Set HistPlotRange = Range(myGraphRange.Cells(1, 1), myGraphRange.Cells(14, 7))
  
  
  ' Select a range for the output chart
  ' Range(Data.Cells(1, 5), Data.Cells(nBins, 5)).Select
  myGraphRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=HistPlotRange.Left, Width:=HistPlotRange.Width, Top:=HistPlotRange.Top, Height:=HistPlotRange.Height)
    .Chart.ChartType = xlColumnClustered
    .Chart.SetSourceData source:=Range(Data.Cells(1, 5), Data.Cells(nBins, 5)), PlotBy:=xlColumns
    .Chart.HasTitle = True
    .Chart.ChartTitle.Characters.Text = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_PLOT_HEADER) ' "Histogram Plot"

    With .Chart.Axes(xlValue)
      .HasMajorGridlines = False
  
      With .TickLabels
        .Font.Bold = True
        .NumberFormat = "0%"
      End With
    End With
    
    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False
    
    'Remove the Gaps between columns
    .Chart.ChartGroups(1).GapWidth = 12
    ' Format the Fill
    
    .Chart.SeriesCollection(1).Name = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_PLOT_FREQUENCY_HEADER) ' "Frequency"
    .Chart.SeriesCollection(1).XValues = Range(Data.Cells(1, 4), Data.Cells(nBins, 4))
    
    'Check if we need to overlay Normal distribution as well
    If Me.NORMAL_OVERLAY Then
      nNormalCol = 6
      If Me.HIST_CUM Then
        nNormalCol = 7
      End If
      
      With .Chart.SeriesCollection.NewSeries
        .Name = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_NORMAL_HEADER) ' "Normal"
        .Values = Range(Data.Cells(1, nNormalCol), Data.Cells(nBins, nNormalCol))
        .ChartType = xlLine
        .Smooth = True
      End With
    End If
    
    With .Chart.SeriesCollection(1).Format.Fill
      .visible = msoTrue
      .OneColorGradient Style:=msoGradientHorizontal, Variant:=1, Degree:=0.968612191958495
      .ForeColor.ObjectThemeColor = msoThemeColorAccent1
      .ForeColor.TintAndShade = 0.3399999738
      .ForeColor.Brightness = 0
      .BackColor.ObjectThemeColor = msoThemeColorAccent1
      .BackColor.TintAndShade = 0.7649999857
      .BackColor.Brightness = 0
      .TwoColorGradient msoGradientHorizontal, 1
    End With
  End With
Cleanup:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub


Public Function calcBins(inputRng As String) As Long
  Const sSOURCE As String = "calcBins"
  
  calcBins = 2

  If myBinsAlgo = HIST_BINS_MANUAL_CHOICE Then
    calcBins = myBinsManualNo
  Else
    If Len(myInputData) > 0 Then
      calcBins = vb_HISTBINS(myInputData, myBinsAlgo)
    Else
      calcBins = 2
    End If
  End If
End Function


Public Sub updateBins()
  Const sSOURCE As String = "updateBins"

  On Error GoTo ErrorHdler
  If myBinsAlgo <> HIST_BINS_MANUAL_CHOICE Then
    If Len(myInputData) > 0 Then
      myBinsManualNo = vb_HISTBINS(myInputData, myBinsAlgo)
    Else
      myBinsManualNo = 2
    End If
  End If
Cleanup:
  Exit Sub

ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Function GetActiveCellAddress() As String
   GetActiveCellAddress = ActiveSheet.Name & "!" & ActiveCell.Address(True, True)
End Function
Attribute VB_Name = "HomogeneityFrm"
Attribute VB_Base = "0{0022873F-34CD-4DE4-9422-044DDDFDA206}{C70936BE-189D-456D-8C85-B7832EA4A8AA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: HomogeneityFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/HomogeneityFrm.frm $
'
Private Const msMODULE As String = "USERFORM:HomogeneityFrm"
Private Const zenSlugId As String = "articles/216534603"

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID)
End Sub

Private Sub cmdOK_Click()
  Unload Me
End Sub
Attribute VB_Name = "HurstExponentForm"
Attribute VB_Base = "0{9CC1E86F-7291-4AF9-B3E3-00EDDD090910}{A3F03866-B03C-4BE5-A40E-338F2171200B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: HurstExponentForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/HurstExponentForm.frm $
'
Private Const msMODULE As String = "USERFORM:HurstExponentForm"
Private Const zenSlugId As String = "articles/216534603"


Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID)
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub
Attribute VB_Name = "HurstTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15701 $
'  $Date: 2016-08-04 13:29:50 -0500 (Thu, 04 Aug 2016) $
'  $Author: mohamad $
'  $Id: HurstTestUO.cls 15701 2016-08-04 18:29:50Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/HurstTestUO.cls $
'
Private Const msMODULE As String = "CLASS:HurstTestUO"




Attribute VB_Name = "IEEE_DEF"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15701 $
'  $Date: 2016-08-04 13:29:50 -0500 (Thu, 04 Aug 2016) $
'  $Author: mohamad $
'  $Id: IEEE_DEF.bas 15701 2016-08-04 18:29:50Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/IEEE_DEF.bas $
'
Private Const msMODULE As String = "IEEE_DEF"


#If VBA7 Then
  Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (destination As Any, source As Any, ByVal length As Long)
#Else
  Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (destination As Any, source As Any, ByVal length As Long)
#End If


Public Function QNaN() As Double
    Dim Oput As Double
    Dim l(1 To 2) As Long
    l(1) = &H7FFFFFFF
    l(2) = &HFFFFFFFF
    CopyMemory Oput, l(1), 8
    QNaN = Oput
End Function

Public Function IsOverflow(Val As Double) As Boolean
    'This function returns true for doubles that VBA recognises as
    '<overflow>
    'it returns false for any other doubles
    'Doubles represented by <overflow> in VBA are more commonly known
    'as signalling NaNs

    Dim l(1 To 2) As Double

    'eliminate the positive and negative infinity
    If IsPosInfinity(Val) Then Exit Function
    If IsNegInfinity(Val) Then Exit Function

    'Convert the 64 bit double to 2 longs represented as doubles
    DeconstructDouble l, Val

    'test for positive overflow
    If l(2) >= USig(&H7FF00000) And l(2) <= USig(&H7FF7FFFF) Then
        IsOverflow = True
    ElseIf l(2) >= USig(&HFFF00000) And l(2) <= USig(&HFFF7FFFF) Then
        'test for negative overflow
        IsOverflow = True
    End If
End Function

Public Function IsQNaN(Val As Double) As Boolean
  IsQNaN = (IsPosQNaN(Val) Or IsNegQNaN(Val))
End Function


Public Function IsPosQNaN(Val As Double) As Boolean
    'This function returns true for doubles that VBA recognises as
    '1.#QNAN (quiet not a number)
    'it returns false for any other doubles
    Dim l(1 To 2) As Double
    'Convert the 64 bit double to 2 longs represented as doubles
    DeconstructDouble l, Val
    'test for positive QNaN
    IsPosQNaN = (l(2) >= USig(&H7FF80000)) And (l(2) <= USig(&H7FFFFFFF))
End Function

Public Function IsNegQNaN(Val As Double) As Boolean
    'This function returns true for doubles that VBA recognises as
    '-1.#QNAN (negative quiet not a number)
    'it returns false for any other doubles
    Dim l(1 To 2) As Double
    'Convert the 64 bit double to 2 longs represented as doubles
    DeconstructDouble l, Val
    'test for negative QNaN
    IsNegQNaN = (l(2) >= USig(&HFFF80000)) And (l(1) <> 0)
End Function

Public Function IsIndetermiate(Val As Double) As Boolean
    'This function returns true for doubles that VBA recognises as
    ' -1.#IND (indeterminate)
    'it returns false for any other doubles
    Dim l(1 To 2) As Long
    'Convert the 64 bit double to 2 longs
    CopyMemory l(1), Val, 8
    'test for indeterminate
    IsIndetermiate = (l(2) = &HFFF80000) And ((l(1) = 0))
End Function

Public Function IsPosInfinity(Val As Double) As Boolean
    'returns true if and only if Val is recognised by VBA as 1.#INF
    Dim l(1 To 2) As Long
    'Convert the 64 bit double to 2 longs
    CopyMemory l(1), Val, 8
    'Check for negative infinity
    IsPosInfinity = (l(1) = 0) And (l(2) = &H7FF00000)
End Function

Public Function IsNegInfinity(Val As Double) As Boolean
    'returns true if and only if Val is recognised by VBA as -1.#INF
    Dim l(1 To 2) As Long
    'Convert the 64 bit double to 2 longs
    CopyMemory l(1), Val, 8
    'Check for negative infinity
    IsNegInfinity = (l(1) = 0) And (l(2) = &HFFF00000)
End Function

Public Function IsSpecial(Val As Double) As Boolean
    'returns true if Val is represented by VBA as any of
    '1.#INF,-1.#INF,-1.#IND,-1.#QNAN,1.#QNAN,<overflow>
    'ie returns true if and only if any of the other functions return true
    Dim l(1 To 2) As Double
    'Convert the 64 bit double to 2 longs represented as doubles
    DeconstructDouble l, Val
    IsSpecial = ((l(2) >= USig(&H7FF00000)) And (l(2) < USig(&H80000000))) Or l(2) >= USig(&HFFF00000)
End Function

'****************************************************
'Utility Functions
'****************************************************

Private Sub DoubleFromHex(Part1 As Long, Part2 As Long, Oput As Double)
    'convert a hex representation of a double into a double
    'can be used to generate doubles otherwise inaccessible by vba
    Dim l(1 To 2) As Long
    l(1) = Part2
    l(2) = Part1
    CopyMemory Oput, l(1), 8
End Sub

Private Function USig(l As Long) As Double
    'returns an unsigned value of a long as as double
    If l < 0 Then
        USig = 4294967296# + l
    Else
        USig = l
    End If
End Function

Private Sub DeconstructDouble(Oput() As Double, Iput As Double)
    'Splits the double's binary representation into 2 unsigned longs represented as doubles
    Dim l(1 To 2) As Long
    CopyMemory l(1), Iput, 8
    Oput(1) = USig(l(1))
    Oput(2) = USig(l(2))
End Sub


Attribute VB_Name = "International"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15701 $
'  $Date: 2016-08-04 13:29:50 -0500 (Thu, 04 Aug 2016) $
'  $Author: mohamad $
'  $Id: International.bas 15701 2016-08-04 18:29:50Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/International.bas $
'
Private Const msMODULE As String = "INTERNATIONAL"

Public Enum EXCEL_VERSION_Type
  VERSION_Excel_97 = 8
  VERSION_Excel_2000 = 9
  VERSION_Excel_2002 = 10
  VERSION_Excel_2003 = 11
  VERSION_Excel_2007 = 12
  VERSION_Excel_2010 = 14
  VERSION_Excel_2013 = 15
  VERSION_Excel_2016 = 16
End Enum

Public Enum EXCEL_COUNTRY_Type
   LANG_Arabic = 966                     '(Saudi Arabia)
   LANG_Czech = 42                       '(Czech Republic)
   LANG_Danish = 45                      '(Denmark)
   LANG_Dutch = 31                       '(The Netherlands)
   LANG_English = 1                      '(The United States of America)
   LANG_Farsi = 98                       '(Iran)
   LANG_Finnish = 358                    '(Finland)
   LANG_French = 33                      '(France)
   LANG_German = 49                      '(Germany)
   LANG_Greek = 30                       '(Greece)
   LANG_Hebrew = 972                     '(Israel)
   LANG_Hungarian = 36                   '(Hungary)
   LANG_Indian = 91                      '(India)
   LANG_Italian = 39                     '(Italy)
   LANG_Japanese = 81                    '(Japan)
   LANG_Korean = 82                      '(Korea)
   LANG_Norwegian = 47                   '(Norway)
   LANG_Polish = 48                      '(Poland)
   LANG_Portuguese_Brazil = 55           '(Brazil)
   LANG_Portuguese = 351                 '(Portugal)
   LANG_Russian = 7                      '(Russian Federation)
   LANG_Simplified_Chinese = 86          '(People's Republic of China)
   LANG_Spanish = 34                     '(Spain)
   LANG_Swedish = 46                     '(Sweden)
   LANG_Thai = 66                        '(Thailand)
   LANG_Traditional_Chinese = 886        '(Taiwan)
   LANG_Turkish = 90                     '(Turkey)
   LANG_Urdu = 92                        '(Pakistan)
   LANG_Vietnamese = 84                  '(Vietnam)
End Enum

' Get Excel active language pack
Public Function getExcelVersion() As EXCEL_VERSION_Type
  getExcelVersion = Val(Application.Version)
End Function

' Get Excel active language pack
Public Function getExcellanguage() As EXCEL_COUNTRY_Type
  ' getExcelVersion = val(Application.International(xlCountryCode))
  getExcellanguage = LANG_English
End Function


' Display decimal figures according to local setting


' Display Date according to local setting



Function sNumToUS(vValue As Variant, Optional bUseDATEFunction) As String
' *****************************************************
' *
' * Function Name: sNumToUS
' *
' * Input:    vValue - a variant containing the number to convert.
' *              Can be:
' *              a number  - to be converted to a string with US formats
' *              a date    - to be converted to a string in mm/dd/yyyy format
' *              a Boolean |fffd| converted to the strings "True" or "False"
' *
' *           bUseDATEFunction - an optional Boolean for handling dates
' *           False (or missing) - returns a date string in mm/dd/yyyy format
' *           True               - returns a date as DATE(yyyy,mm,dd)
' *
' * Output:   The input as a string in US regional format
' *
' * Purpose:  Explicitly converts an item to a string in US regional formats
' *
' *****************************************************
  Const sSOURCE As String = "sNumToUS"
  Dim sTmp As String

   'Don't accept strings or arrays as input
   If TypeName(vValue) = "String" Then Exit Function
   If Right(TypeName(vValue), 2) = "()" Then Exit Function
   If IsMissing(bUseDATEFunction) Then bUseDATEFunction = False
   
   'Do we want it returned as Excel's DATE() function
   '(which we can't do with strings)?
   If bUseDATEFunction Then
      'We do, so build the Excel DATE() function string
      sTmp = "DATE(" & Year(vValue) & "," & Month(vValue) & "," & _
         Day(vValue) & ")"
   Else
      'Is it a date type?
      If TypeName(vValue) = "Date" Then
         sTmp = Format(vValue, "mm""/""dd""/""yyyy")
      Else
         'Convert number to string in US format and remove leading space
         sTmp = Trim(Str(vValue))

         'If we have fractions, we don't get a leading zero, so add one.
         If Left(sTmp, 1) = "." Then sTmp = "0" & sTmp
         If Left(sTmp, 2) = "-." Then sTmp = "-0" & Mid(sTmp, 2)
      End If
   End If

  'Return the US formatted string
   sNumToUS = sTmp
End Function


Function IsDateUS(sDate As String) As Boolean
' *****************************************************
' *
' * Function Name:   IsDateUS
' *
' * Input:           sDate - a string containing a US-formatted date
' *
' * Output:          Returns True if the string contains a valid US date,
' *                     False if not
' *
' * Purpose:         Checks if a given string can be recognised as a date
' *                     according to US formats
' *
' *****************************************************
   IsDateUS = Not IsError(Application.Evaluate("DATEVALUE(""" & sDate & """)"))
End Function


Function DateValueUS(sDate As String) As Variant
' *****************************************************
' *
' * Function Name:   DateValueUS
' *
' * Input:           sDate - a string containing a US-formatted date
' *
' * Output:          Returns the date value of the given string, in a Variant
' *
' * Purpose:         Converts a US-formatted date string to a date number
' *
' *****************************************************
   DateValueUS = Application.Evaluate("DATEVALUE(""" & sDate & """)")
End Function


Attribute VB_Name = "JohansenUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: JohansenUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/JohansenUO.cls $
'
Private Const msMODULE As String = "CLASS:JOHANSENTESTUO"


Public Enum JOHANSEN_TESTS
  TRACE_TEST = 1
  EIGNVALUE_TEST = 2
End Enum

Public Enum JOHANSEN_TEST_SCENARIO
  JOHANSEN_NO_CONST = 1
  JOHANSEN_CONST = 2
  JOHANSEN_CONST_TREND = 3
End Enum


Private myMaxLagOrder As Long
Private myNoRelationships As Long

Private myTests(1 To 2) As Boolean
Private myTestScenario(1 To 3) As Boolean

Private STAT_STATIONARY_TEST_SCENARIO_LABELS(1 To 3) As String
Private STAT_STATIONARY_TEST_SCENARIO_NOTES(1 To 3) As String



Private Sub Class_Initialize()
  STAT_STATIONARY_TEST_SCENARIO_LABELS(1) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_BRIEF) ' "No Const"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(2) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_BRIEF) ' "Const-Only"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(3) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_BRIEF) ' "Const + Trend"
  
  
  STAT_STATIONARY_TEST_SCENARIO_NOTES(1) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_NOTE) ' "No Const"
  STAT_STATIONARY_TEST_SCENARIO_NOTES(2) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_NOTE) ' "No Const"
  STAT_STATIONARY_TEST_SCENARIO_NOTES(3) = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_NOTE) ' "No Const"

  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()

  myTests(1) = True
  myTests(2) = True
  
  myTestScenario(1) = True
  myTestScenario(2) = True
  myTestScenario(3) = True
  
  myMaxLagOrder = 1
  myNoRelationships = 0
End Sub


Public Property Get SELECTED_TEST(Index As JOHANSEN_TESTS) As Boolean
  SELECTED_TEST = myTests(Index)
End Property

Public Property Let SELECTED_TEST(Index As JOHANSEN_TESTS, ByVal vNewValue As Boolean)
  myTests(Index) = vNewValue
End Property


Public Property Get SELECTED_TEST_SCENARIO(Index As JOHANSEN_TEST_SCENARIO) As Boolean
  SELECTED_TEST_SCENARIO = myTestScenario(Index)
End Property

Public Property Let SELECTED_TEST_SCENARIO(Index As JOHANSEN_TEST_SCENARIO, ByVal vNewValue As Boolean)
  myTestScenario(Index) = vNewValue
End Property

Public Property Get MAX_LAG_ORDER() As Long
  MAX_LAG_ORDER = myMaxLagOrder
End Property

Public Property Let MAX_LAG_ORDER(ByVal vNewValue As Long)
  myMaxLagOrder = vNewValue
End Property

Public Property Get NUMBER_RELATIONSHIPS() As Long
  NUMBER_RELATIONSHIPS = myNoRelationships
End Property

Public Property Let NUMBER_RELATIONSHIPS(ByVal vNewValue As Long)
  myNoRelationships = vNewValue
End Property


' Add specific routines for White-noise test (reference other classes if needed)
Public Function calcMaxLags(ByRef inputData As GeneralUO) As Long
  Const sSOURCE As String = "calcMaxLags"
  
  Dim rng As Object
  If Len(inputData.INPUT_RANGE) > 0 Then
    Set rng = Range(inputData.INPUT_RANGE)
    
    calcMaxLags = Int((rng.rows.count) ^ (1 / 3)) + 1
  End If
End Function



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printNormalityTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As JOHANSEN_TEST_SCENARIO
  Dim row As Long
  Dim number As Long
  Dim szTemp As String
  
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_OUTPUT_TABLE_HEADER) '"Johansen Test"
  End With

  myRange.Cells(2, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TEST_HEADER) ' "Test"
  End With
  
  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER) ' "Stat"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) ' "C.V."
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(2, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PASS_HEADER) ' "Passed?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_OUTPUT_PASS_TEST_NOTE) ' JOHANSEN_TEST_PASS_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_OUTPUT_PASS_TEST_NOTE) ' JOHANSEN_TEST_PASS_NOTE
    End If
    .Comment.visible = False
  End With

  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE) 'HYPOTHESIS_TEST_ALPHA_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE) 'HYPOTHESIS_TEST_ALPHA_NOTE
    End If
    .Comment.visible = False
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 5)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With

  'Trace Test
  row = 3
  If Me.SELECTED_TEST(TRACE_TEST) Then
    myRange.Cells(row, 1).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H0_LABEL) ' "Trace Test (r=0)"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H0_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H0_NOTE)
      End If
    End With
    
    myRange.Cells(row, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = 0
    End With
    
    myRange.Cells(row, 4).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H1_LABEL) ' "r>0"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H1_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_H1_NOTE)
      End If
      .Interior.Color = RGB(255, 255, 0)
    End With
    
    For i = JOHANSEN_NO_CONST To JOHANSEN_CONST_TREND
      If Me.SELECTED_TEST_SCENARIO(i) Then
        row = row + 1
        myRange.Cells(row, 1).Select
        With Selection
          .ClearComments
          .HorizontalAlignment = xlRight
          .Font.Bold = False
          .Font.Italic = True
          .value = STAT_STATIONARY_TEST_SCENARIO_LABELS(i)
          If .Comment Is Nothing Then
            .AddComment STAT_STATIONARY_TEST_SCENARIO_NOTES(i)
          Else
            .Comment.Text Text:=STAT_STATIONARY_TEST_SCENARIO_NOTES(i)
          End If
        End With
    
        'Z-score
        myRange.Cells(row, 2).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = "=JohansenTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.DATA_ORDER & "," & myGeneralUO.INPUT_MASK & "," & _
                       myMaxLagOrder & "," & (i - 2) & "," & 0 & ",0," & myRange.Cells(2, 5).Address() & ",1)"
          .NumberFormat = "#0.0"
        End With
    
        myRange.Cells(row, 3).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = "=JohansenTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.DATA_ORDER & "," & myGeneralUO.INPUT_MASK & "," & _
                       myMaxLagOrder & "," & (i - 2) & "," & 0 & ",0," & myRange.Cells(2, 5).Address() & ",2)"
          .NumberFormat = "#0.0"
        End With
        
        szTemp = "=IF(" & myRange.Cells(row, 2).Address(RowAbsolute:=False) & ">" & myRange.Cells(row, 3).Address(RowAbsolute:=False) & ", TRUE, FALSE)"
        myRange.Cells(row, 4).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp
        End With
      End If
    Next i
    row = row + 1
    
    ' Set the borderline
    Range(myRange.Cells(row, 2), myRange.Cells(row, 4)).Select
    With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
    row = row + 1
  End If

  
  
  'Maximum Eigenvalue Test
  If Me.SELECTED_TEST(EIGNVALUE_TEST) Then
    number = Range(myGeneralUO.INPUT_RANGE).columns.count - 1
    ' "Maximum Eigenvalue Test(r=" & number & ")"
    szTemp = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H1_LABEL) & number & ")"
    myRange.Cells(row, 1).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = szTemp
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H1_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H1_NOTE)
      End If
    End With
    
    myRange.Cells(row, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = number
    End With
    
    myRange.Cells(row, 4).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H0_LABEL) & (number + 1)
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H0_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H0_NOTE)
      End If
      .Interior.Color = RGB(255, 255, 0)
    End With
    
    For i = JOHANSEN_NO_CONST To JOHANSEN_CONST_TREND
      If Me.SELECTED_TEST_SCENARIO(i) Then
        row = row + 1
        myRange.Cells(row, 1).Select
        With Selection
          .ClearComments
          .HorizontalAlignment = xlRight
          .Font.Bold = False
          .Font.Italic = True
          .value = STAT_STATIONARY_TEST_SCENARIO_LABELS(i)
          If .Comment Is Nothing Then
            .AddComment STAT_STATIONARY_TEST_SCENARIO_NOTES(i)
          Else
            .Comment.Text Text:=STAT_STATIONARY_TEST_SCENARIO_NOTES(i)
          End If
        End With
    
        'Z-score
        myRange.Cells(row, 2).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = "=JohansenTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.DATA_ORDER & "," & myGeneralUO.INPUT_MASK & "," & _
                       myMaxLagOrder & "," & (i - 2) & "," & 1 & "," & number & "," & myRange.Cells(2, 5).Address() & ",1)"
          .NumberFormat = "#0.0"
        End With
    
        myRange.Cells(row, 3).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = "=JohansenTest(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.DATA_ORDER & "," & myGeneralUO.INPUT_MASK & "," & _
                       myMaxLagOrder & "," & (i - 2) & "," & 1 & "," & number & "," & myRange.Cells(2, 5).Address() & ",2)"
          .NumberFormat = "#0.0"
        End With
        
        szTemp = "=IF(" & myRange.Cells(row, 2).Address(RowAbsolute:=False) & ">" & myRange.Cells(row, 3).Address(RowAbsolute:=False) & ", TRUE, FALSE)"
        myRange.Cells(row, 4).Select
        With Selection
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .formula = szTemp
        End With
      End If
    Next i
  End If
  

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Attribute VB_Name = "KDEForm"
Attribute VB_Base = "0{11D45D98-E8AE-43E7-B3F1-E54C1D9D3716}{64C8F24D-7702-4D01-BBB1-8570B60E35C2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: KDEForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/KDEForm.frm $
'
Private Const msMODULE As String = "USERFORM:KDE"
Private Const zenSlugId As String = "articles/216478703"

'PrincipalComponentUI
Private userOptions As KDEPlotUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub chkOptionOptimal_Click()
  userOptions.OPTIMAL_BANDWIDTH = chkOptionOptimal.value
  
  If userOptions.OPTIMAL_BANDWIDTH = True And IEEE_DEF.IsQNaN(userOptions.BANDWIDTH) Then
    callValidateForm = False
      userOptions.BANDWIDTH = 1
      txtBandwith.value = userOptions.BANDWIDTH
    callValidateForm = True
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmbxKernels_Change()
  Dim oldVal As KERNEL_FUNCTIONS_ENUM
  
  oldVal = userOptions.KERNEL_FUNCTION

  If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_GAUSSIAN) Then
    userOptions.KERNEL_FUNCTION = GAUSSIAN_KERNEL
  Else
    If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_UNIFORM) Then
      userOptions.KERNEL_FUNCTION = UNIFORM_KERNEL
    Else
      If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIANGULAR) Then
        userOptions.KERNEL_FUNCTION = TRIANGULAR_KERNEL
      Else
        If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_QUATRIC) Then
          userOptions.KERNEL_FUNCTION = QUADRATIC_KERNEL
        Else
          If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIWEIGHT) Then
            userOptions.KERNEL_FUNCTION = TRIWEIGHT_KERNEL
          Else
            If cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_EPANECHNIKOV) Then
              userOptions.KERNEL_FUNCTION = EPANECHNIKOV_KERNEL
            End If
          End If
        End If
      End If
    End If
  End If

  ' Has the value changed
  If oldVal <> userOptions.KERNEL_FUNCTION Then
    Call userOptions.updateBandwidth(myGeneralUO)
    
    If callValidateForm = True Then
      Call validateForm
      
      txtBandwith.value = userOptions.BANDWIDTH
    End If
  End If
  
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub



Private Sub txtBandwith_Change()
  If Len(txtBandwith.value) > 0 Then
    userOptions.BANDWIDTH = txtBandwith.value
  Else
    userOptions.BANDWIDTH = IEEE_DEF.QNaN()
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
  
End Sub

Private Sub txtTableRows_Change()
  If Len(txtTableRows.value) > 0 Then
    userOptions.OUTPUT_TABLE_SIZE = txtTableRows.value
  Else
    userOptions.OUTPUT_TABLE_SIZE = -1
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_KDE_FRM_CAPTION)
  
  Me.MultiPage1.Pages("GeneralPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("GeneralPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_HELPTIP)
  
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)
  
  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  RefEditOutputTable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_HELPTIP)
  
  KernelTypeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_LABEL_CAPTION)
  KernelTypeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_LABEL_HELPTIP)
  cmbxKernels.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_LABEL_HELPTIP)
  
  chkOptionOptimal.Caption = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_OPTIMAL_BW_CHKBX_CAPTION)
  chkOptionOptimal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_OPTIMAL_BW_CHKBX_HELPTIP)
  
  KernelBandwidthLabel.Caption = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_MANUAL_BW_LABEL_CAPTION)
  KernelBandwidthLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_MANUAL_BW_LABEL_HELPTIP)
  txtBandwith.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_KERNEL_MANUAL_BW_LABEL_HELPTIP)
  
  OutputTableSizeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_OUTPUT_TABLESIZE_LABEL_CAPTION)
  OutputTableSizeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_OUTPUT_TABLESIZE_LABEL_HELPTIP)
  txtTableRows.ControlTipText = MSGAPI.getLocaleString(IDS_UI_KDE_OPTIONPG_OUTPUT_TABLESIZE_LABEL_HELPTIP)
  
  chkOverlayNormal.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_CAPTION)
  chkOverlayNormal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_HELPTIP)

  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New KDEPlotUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  ' Initialize the combo box
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_GAUSSIAN)      ' "Gaussian Kernel"
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_UNIFORM)       ' "Uniform Kernel"
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIANGULAR)    ' "Triangular Kernel"
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_QUATRIC)       ' "Quatric Kernel"
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIWEIGHT)     ' "Triweight Kernel"
  cmbxKernels.AddItem MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_EPANECHNIKOV)  ' "Epanechnikov kernel"
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  ' Override the default
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  RefEditOutputTable.value = userOptions.OUTPUT_TABLE
  RefEditOutputGraph.value = userOptions.OUTPUT_GRAPH
  
  'Missing Values section
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  
  Select Case userOptions.KERNEL_FUNCTION
    Case GAUSSIAN_KERNEL
       cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_GAUSSIAN) '"Gaussian Kernel"
    Case UNIFORM_KERNEL
      cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_UNIFORM) ' "Uniform Kernel"
    Case TRIANGULAR_KERNEL
      cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIANGULAR) ' "Triangular Kernel"
    Case QUADRATIC_KERNEL
      cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_QUATRIC) ' "Quatric Kernel"
    Case TRIWEIGHT_KERNEL
      cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIWEIGHT) '"Triweight Kernel"
    Case EPANECHNIKOV_KERNEL
      cmbxKernels.value = MSGAPI.getLocaleString(IDS_UI_KDE_KERNEL_FUNCTION_ITEM_EPANECHNIKOV) '"Epanechnikov kernel"
  End Select
  
  chkOptionOptimal.value = userOptions.OPTIMAL_BANDWIDTH
  txtBandwith.value = userOptions.BANDWIDTH
  txtTableRows.value = userOptions.OUTPUT_TABLE_SIZE
  
  chkOverlayNormal.value = userOptions.NORMAL_OVERLAY
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  txtBandwith.enabled = Not userOptions.OPTIMAL_BANDWIDTH
    
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
    
  dataAvailable = dataAvailable And _
                  Utilities.isCellRangeValid(RefEditOutputTable.value) And _
                  Len(txtBandwith.value) > 0 And _
                  txtBandwith.value > 0 And _
                  Len(txtTableRows.value) > 0

  cmdOK.enabled = dataAvailable
End Sub


Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditOutputTable_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefEditOutputTable.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefEditOutputGraph_Change()
  userOptions.OUTPUT_GRAPH = Utilities.procInputCellsRange(RefEditOutputGraph.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkOverlayNormal_Click()
  userOptions.NORMAL_OVERLAY = chkOverlayNormal.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

' We are done, let's print and plot the graph
Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  Dim myRange As Object
  Dim myXRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  ' Basic check for X1 range
  Set myXRange = Range(myGeneralUO.INPUT_DATA_NO_LABELS)
  If myXRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) '"Invalid/Missing cells range for the explanatory variables (X)"
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) ' "Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    Exit Sub
  End If
    
  Set myRange = Range(userOptions.OUTPUT_TABLE)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_KDE_STATUSBAR_CALCULATION_MSG) ' "Calculating kernel density estimate (KDE) values"
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
  
  mbOK = True
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub







Attribute VB_Name = "KDEPlotUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: KDEPlotUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/KDEPlotUO.cls $
'
Private Const msMODULE As String = "CLASS:KDEPlotUO"

Public Enum KERNEL_FUNCTIONS_ENUM
  GAUSSIAN_KERNEL = 1
  UNIFORM_KERNEL = 2
  TRIANGULAR_KERNEL = 3
  QUADRATIC_KERNEL = 4
  TRIWEIGHT_KERNEL = 5
  EPANECHNIKOV_KERNEL = 6
End Enum



Private myOverlayNormal As Boolean
Private myOutputTableRange As String
Private myOutputGraphRange As String
Private myOptimalBandwidth As Boolean
Private myBandwidth As Double
Private myTableSize As Long
Private myKernel As KERNEL_FUNCTIONS_ENUM

'ResetToDefault
Public Sub ResetToDefault()
  myOutputTableRange = Utilities.AddressEx(ActiveCell)
  myOutputGraphRange = Utilities.AddressEx(ActiveCell.offset(0, 7))
  
  myOverlayNormal = True
  myKernel = GAUSSIAN_KERNEL
  myOptimalBandwidth = True
  myBandwidth = 1
  myTableSize = 5
End Sub


Public Property Get KERNEL_FUNCTION() As KERNEL_FUNCTIONS_ENUM
    KERNEL_FUNCTION = myKernel
End Property

Public Property Let KERNEL_FUNCTION(ByVal vNewValue As KERNEL_FUNCTIONS_ENUM)
  myKernel = vNewValue
End Property


Public Property Get OPTIMAL_BANDWIDTH() As Boolean
    OPTIMAL_BANDWIDTH = myOptimalBandwidth
End Property

Public Property Let OPTIMAL_BANDWIDTH(ByVal vNewValue As Boolean)
  myOptimalBandwidth = vNewValue
End Property

Public Property Get BANDWIDTH() As Double
    BANDWIDTH = myBandwidth
End Property

Public Property Let BANDWIDTH(ByVal vNewValue As Double)
  myBandwidth = vNewValue
End Property

Public Property Get OUTPUT_TABLE_SIZE() As Long
    OUTPUT_TABLE_SIZE = myTableSize
End Property

Public Property Let OUTPUT_TABLE_SIZE(ByVal vNewValue As Long)
  myTableSize = vNewValue
End Property

Public Property Get NORMAL_OVERLAY() As Boolean
    NORMAL_OVERLAY = myOverlayNormal
End Property

Public Property Let NORMAL_OVERLAY(ByVal vNewValue As Boolean)
  myOverlayNormal = vNewValue
End Property

Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputTableRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputTableRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property


Public Sub updateBandwidth(ByRef myGeneralUO As GeneralUO)
  Const sSOURCE As String = "updateBandwidth"
  Dim var_stdev As Double
  Dim var_count As Double

  On Error GoTo ErrorHdler
  If myOptimalBandwidth Then
    If myKernel = GAUSSIAN_KERNEL Then
      If Range(myGeneralUO.INPUT_DATA_NO_LABELS).count > 0 Then
        var_stdev = Application.WorksheetFunction.STDEV(Range(myGeneralUO.INPUT_DATA_NO_LABELS))
        var_count = Application.WorksheetFunction.count(Range(myGeneralUO.INPUT_DATA_NO_LABELS))
        var_count = Application.WorksheetFunction.Power(var_count, 0.2)
        
        myBandwidth = 1.06 * var_stdev / var_count
        myBandwidth = myBandwidth
      End If
    End If
  End If
Cleanup:
  Exit Sub

ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"
  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim Labels(1 To 5) As String
  Dim i As Long
  Dim xVars As Long
  Dim rows As Long
  Dim columns As Long
  Dim szTemp As String
  
  oldSignificancelevel = myGeneralUO.significance
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
 
  ' print the dataset mean and stdev
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MIN_HEADER) ' "Min"
  End With
  
  myRange.Cells(1, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_RANGE_HEADER) ' "Range"
  End With
  
  myRange.Cells(1, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_MEAN_HEADER) ' "Mean"
  End With

  myRange.Cells(1, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_HEADER) ' "STDEV"
  End With
  
  ' Draw a Borders
  Range(myRange.Cells(1, 1), myRange.Cells(1, 4)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  myRange.Cells(2, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=MIN(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & ")"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
  
  myRange.Cells(2, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=MAX(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & ") - " & myRange.Cells(2, 1).Address
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
  
  myRange.Cells(2, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=Average(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & ")"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
    
  myRange.Cells(2, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=STDEV(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & ")"
    .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
  End With
  
  ' print the table header
  myRange.Cells(3, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_KDE_OUTPUT_TABLE_HEADER) ' "Kernel Density Estimation (KDE)"
  End With

  ' Draw a Borders
  Range(myRange.Cells(4, 1), myRange.Cells(4, 4)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With

  Labels(1) = myGeneralUO.GET_INPUT_DATA_LABEL(1)
  Labels(2) = MSGAPI.getLocaleString(IDS_UI_KDE_OUTPUT_TABLE_KDE_COL_HEADER) ' "KDE"
  Labels(3) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_GAUSSIAN_HEADER) ' "Gaussian"
  Labels(4) = MSGAPI.getLocaleString(IDS_UI_KDE_OUTPUT_TABLE_SIZE_COL_HEADER) ' "Size"

  ' print the labels now
  For i = 1 To 4
    myRange.Cells(4, i).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = Labels(i)
    End With
  Next i

  myRange.Cells(5, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = Me.OUTPUT_TABLE_SIZE
    .NumberFormat = "#0"
  End With

  ' print the X-value (sorted)
  For i = 1 To Me.OUTPUT_TABLE_SIZE
    myRange.Cells(4 + i, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      If i > 1 Then
        .formula = "=" & myRange.Cells(3 + i, 1).Address(False, True) & " + " & myRange.Cells(2, 2).Address & "/" & myRange.Cells(5, 4).Address
      Else
        .formula = "=" & myRange.Cells(2, 1).Address
      End If
      .NumberFormat = Range(myGeneralUO.INPUT_DATA_NO_LABELS).NumberFormat
    End With
  
    szTemp = "=KDE(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & ", " & myRange.Cells(4 + i, 1).Address(False, True) & ","
    If Me.OPTIMAL_BANDWIDTH Then
      szTemp = szTemp & ","
    Else
      szTemp = szTemp & International.sNumToUS(Me.BANDWIDTH) & ","
    End If
    
    szTemp = szTemp & CInt(Me.KERNEL_FUNCTION) & ")"
    
    myRange.Cells(4 + i, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTemp
      .NumberFormat = "#0.00%"
    End With
  
    myRange.Cells(4 + i, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=NORMDIST(" & myRange.Cells(4 + i, 1).Address(False, True) & "," & myRange.Cells(2, 3).Address & "," & myRange.Cells(2, 4).Address & ",False)"
      .NumberFormat = "#0.00%"
    End With
  Next i

GraphHere:
  ' Now, Let's create the scatter plot
  Dim KDEPlotRange As Object
  Set KDEPlotRange = Range(Range(Me.OUTPUT_GRAPH).Cells(1, 1), Range(Me.OUTPUT_GRAPH).Cells(14, 7))
  
  ' Activate the sheet now
  If ActiveSheet.Name <> KDEPlotRange.Worksheet.Name Then
    Sheets(KDEPlotRange.Worksheet.Name).Activate
  End If
  
  KDEPlotRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=KDEPlotRange.Left, Width:=KDEPlotRange.Width, Top:=KDEPlotRange.Top, Height:=KDEPlotRange.Height)
    .Chart.ChartType = xlXYScatterLinesNoMarkers
    .Chart.SetSourceData source:=Range(myRange.Cells(5, 1), myRange.Cells(4 + Me.OUTPUT_TABLE_SIZE, 2))
    .Chart.HasTitle = True
          
    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False
    
    .Chart.ChartTitle.Select
    With Selection
      .Text = MSGAPI.getLocaleString(IDS_UI_KDE_OUTPUT_TABLE_HEADER) ' "Kernel Density Estimation (KDE)"
      With Selection.Format.TextFrame2.TextRange.Font
        .BaselineOffset = 0
        .size = 12
      End With
    End With

    With .Chart.plotArea
      With .Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
      End With
      .Interior.ColorIndex = xlNone
    End With

    .Chart.SeriesCollection(1).Select
    With Selection
      .Smooth = True
      With Selection.Format.Line
        .visible = msoTrue
        .Weight = 1.5
      End With
    End With

    If Me.NORMAL_OVERLAY Then
      .Chart.plotArea.Select
      .Chart.SeriesCollection.NewSeries
      .Chart.SeriesCollection(2).Select
      With Selection
        .Name = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_HEADER) ' "Normal"
        .Smooth = True
        .XValues = Range(myRange.Cells(5, 1), myRange.Cells(4 + Me.OUTPUT_TABLE_SIZE, 1))
        .Values = Range(myRange.Cells(5, 3), myRange.Cells(4 + Me.OUTPUT_TABLE_SIZE, 3))
        
        With Selection.Format.Line
          .visible = msoTrue
          .Weight = 1.5
        End With
      
      End With
    End If
    
    ' Make the X-axis writing below axis
    .Chart.Axes(xlCategory).Select
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    
    ' Make the Y-axis writing on the left
    .Chart.Axes(xlValue).Select
    Selection.TickLabels.NumberFormat = "0.0%"
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    
    ' Remove the legends
    .Chart.Legend.Select
    Selection.Delete
    
    ' Remove Major Gridlines
    .Chart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete
  End With

SubExit:
  ' Reset the current cell selection to the myRange
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "LOGAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16004 $
'  $Date: 2016-11-11 11:24:24 -0600 (Fri, 11 Nov 2016) $
'
Private Const msMODULE As String = "LOGAPI"


#If VBA7 Then
    Public Declare PtrSafe Function SFLOG_GETLEVEL Lib "SFLog.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLOG_SETLEVEL Lib "SFLog.DLL" Alias "#120" (ByVal nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLOG_LogMsg Lib "SFLog.DLL" Alias "#110" (ByVal nLevel As Integer, ByVal szFilename As String, _
                                                                               ByVal szFuncName As String, ByVal szFuncSig As String, _
                                                                               ByVal nLineNo As Integer, ByVal szMsg As LongPtr) As Integer
#Else
    Public Declare Function SFLOG_GETLEVEL Lib "SFLog.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
    Public Declare Function SFLOG_SETLEVEL Lib "SFLog.DLL" Alias "#120" (ByVal nLevel As Integer) As Integer
    Public Declare Function SFLOG_LogMsg Lib "SFLog.DLL" Alias "#110" (ByVal nLevel As Integer, ByVal szFilenameas As String, _
                                                                               ByVal szFuncName As String, ByVal szFuncSig As String, _
                                                                               ByVal nLineNo As Integer, ByVal szMsg As Long) As Integer
#End If

Attribute VB_Name = "LUCAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'    Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'
Private Const msMODULE As String = "LUCAPI"

Private myCustomerName As String
Private myCompany As String
Private myEmailAddress As String
Private myInstallationPath As String
Private myDataPath As String
Private myBuildDate As String
Private myProductKey As String
Private myProductVersion As String
Private myProductRelease As String
Private myProductNewVersion As String
Private myNewVersionURL As String
Private myHostId As String
Private myExpiryDate As Date
Private myServiceExpiryDate As Date
Private myLicenseLevel As LICENSE_LEVEL_TYPE
Private myExcelVersion As EXCEL_VERSION_Type
Private myExcelCountryCode As EXCEL_COUNTRY_Type


Public Enum LICENSE_LEVEL_TYPE
  EXPERT_MODE = 0
  PRO_MODE = 1
  CORE_MODE = 2
  LITE_MODE = 15
End Enum


' Are we running Excel 2010/2013 ?
#If VBA7 Then
    Public Declare PtrSafe Function SFLUC_LICENSE_LEVEL Lib "SFLUC.DLL" Alias "#205" (ByRef nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLUC_MACHINEID Lib "SFLUC.DLL" Alias "#300" (ByVal szBuffer As LongPtr, ByRef nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLUC_LICENSE_KEY Lib "SFLUC.DLL" Alias "#305" (ByVal szBuffer As LongPtr, ByRef nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLUC_ACTIVATION_CODE Lib "SFLUC.DLL" Alias "#315" (ByVal szBuffer As LongPtr, ByRef nLevel As Integer) As Integer
    Public Declare PtrSafe Function SFLUC_LICENSE_KEY_EXPIRY Lib "SFLUC.DLL" Alias "#310" (ByRef szBuffer As Long) As Integer
    Public Declare PtrSafe Function SFLUC_LICENSE_STATUS Lib "SFLUC.DLL" Alias "#210" () As Integer
    Public Declare PtrSafe Function SFLUC_SERVICEDATE Lib "SFLUC.DLL" Alias "#220" (ByVal szLicenseKey As LongPtr, ByRef serviceDate As Long) As Integer
    Public Declare PtrSafe Function SFLUC_UPDATEVERSION Lib "SFLUC.DLL" Alias "#225" (ByVal szLicenseKey As LongPtr, _
                                                                                            ByVal szFileVersion As LongPtr, _
                                                                                            ByVal newVersion As LongPtr, ByRef dwSize As Long, _
                                                                                            ByVal downloadURL As LongPtr, ByRef dwSize2 As Long) As Integer
#Else
    ' Excel 2007 (32-bit)
    ' Long = 4 bytes
    ' Integer = 2 bytes
    Public Declare Function SFLUC_LICENSE_LEVEL Lib "SFLUC.DLL" Alias "#205" (ByRef nLevel As Long) As Integer
    Public Declare Function SFLUC_MACHINEID Lib "SFLUC.DLL" Alias "#300" (ByVal szBuffer As Long, ByRef nLevel As Long) As Integer
    Public Declare Function SFLUC_LICENSE_KEY Lib "SFLUC.DLL" Alias "#305" (ByVal szBuffer As Long, ByRef nLevel As Long) As Integer
    Public Declare Function SFLUC_ACTIVATION_CODE Lib "SFLUC.DLL" Alias "#315" (ByVal szBuffer As Long, ByRef nLevel As Long) As Integer
    Public Declare Function SFLUC_LICENSE_KEY_EXPIRY Lib "SFLUC.DLL" Alias "#310" (ByVal szBuffer As Long) As Integer
    Public Declare Function SFLUC_LICENSE_STATUS Lib "SFLUC.DLL" Alias "#210" () As Integer
    Public Declare Function SFLUC_SERVICEDATE Lib "SFLUC.DLL" Alias "#220" (ByVal szLicenseKey As Long, ByRef serviceDate As Long) As Integer
    Public Declare Function SFLUC_UPDATEVERSION Lib "SFLUC.DLL" Alias "#225" (ByVal szLicenseKey As Long, _
                                                                                            ByVal szFileVersion As Long, _
                                                                                            ByVal newVersion As Long, ByRef dwSize As Long, _
                                                                                            ByVal downloadURL As Long, ByRef dwSize2 As Long) As Integer
#End If


Public Function Get_CustomerName() As String
  Call InitModParameters
  
  Get_CustomerName = myCustomerName
End Function

Public Function Let_CustomerName(ByVal vNewValue As String)
  Call InitModParameters
  
  myCustomerName = vNewValue
End Function

Public Function Get_Company() As String
  Call InitModParameters
  
  Get_Company = myCompany
End Function

Public Function Let_Company(ByVal vNewValue As String)
  Call InitModParameters
  
  myCompany = vNewValue
End Function

Public Function Get_EMAIL() As String
  Call InitModParameters
  
  Get_EMAIL = myEmailAddress
End Function

Public Function Let_EMAIL(ByVal vNewValue As String)
  Call InitModParameters
  
  myEmailAddress = vNewValue
End Function

Public Function Get_InstallPath() As String
  Call InitModParameters
  
  Get_InstallPath = myInstallationPath
End Function

Public Function Let_InstallPath(ByVal vNewValue As String)
  Call InitModParameters
  
  myInstallationPath = vNewValue
End Function

Public Function Get_Product() As String
  Get_Product = PRODUCT_NAME
End Function

Public Function Get_BUILDDATE() As String
  Call InitModParameters
  
  Get_BUILDDATE = myBuildDate
End Function

Public Function Let_BUILDDATE(ByVal vNewValue As String)
  Call InitModParameters
  
  myBuildDate = vNewValue
End Function

Public Function Get_ProductKey() As String
  Call InitModParameters
  
  Get_ProductKey = myProductKey
End Function

Public Function Let_ProductKey(ByVal vNewValue As String)
  Call InitModParameters
  myProductKey = vNewValue
End Function

Public Function Get_ProductVersion() As Variant
  Call InitModParameters
  Get_ProductVersion = myProductVersion
End Function

Public Function Let_ProductVersion(ByVal vNewValue As Variant)
  Call InitModParameters
  myProductVersion = vNewValue
End Function

Public Function Get_ProductRelease() As String
  Call InitModParameters
  Get_ProductRelease = myProductRelease
End Function

Public Function Let_ProductRelease(ByVal vNewValue As String)
  Call InitModParameters
  myProductRelease = vNewValue
End Function

Public Function Get_HostId() As String
  Call InitModParameters
  Get_HostId = myHostId
End Function

Public Function Let_HostId(ByVal vNewValue As String)
  Call InitModParameters
  myHostId = vNewValue
End Function


Public Function Get_expiryDate() As Date
  Call InitModParameters
  Get_expiryDate = myExpiryDate
End Function

Public Function Let_expiryDate(ByVal vNewValue As Date)
  Call InitModParameters
  myExpiryDate = vNewValue
End Function

Public Function Get_serviceExpiryDate() As Date
  Call InitModParameters
  Get_serviceExpiryDate = myServiceExpiryDate
End Function

Public Function Let_serviceExpiryDate(ByVal vNewValue As Date)
  Call InitModParameters
  myServiceExpiryDate = vNewValue
End Function

Public Function Get_newVersion() As String
  Call InitModParameters
  
  Get_newVersion = myProductNewVersion
End Function

Public Function Let_newVersion(ByVal vNewValue As String)
  Call InitModParameters
  
  myProductNewVersion = vNewValue
End Function


Public Function Get_newVersionDownloadURL() As String
  Call InitModParameters
  
  Get_newVersionDownloadURL = myNewVersionURL
End Function

Public Function Let_newVersionDownloadURL(ByVal vNewValue As String)
  Call InitModParameters
  
  myNewVersionURL = vNewValue
End Function


Public Function Get_LicenseLevel() As LICENSE_LEVEL_TYPE
  Call InitModParameters
  
  Get_LicenseLevel = myLicenseLevel
End Function

Public Function Let_LicenseLevel(ByVal vNewValue As LICENSE_LEVEL_TYPE)
  Call InitModParameters
  
  myLicenseLevel = vNewValue
End Function

Public Function Get_InstallationPath() As String
  Call InitModParameters
  
  Get_InstallationPath = myInstallationPath
End Function

Public Function Let_InstallationPath(ByVal vNewValue As String)
  Call InitModParameters
  
  myInstallationPath = vNewValue
End Function

Public Function Get_DataPath() As String
  Call InitModParameters
  
  Get_DataPath = myDataPath
End Function

Public Function Let_DataPath(ByVal vNewValue As String)
  Call InitModParameters
  
  myDataPath = vNewValue
End Function

' Initialize the input parameters
Private Sub InitModParameters()
  Static myModInitialized As Boolean
  
  Dim dt As Date
  
  If myModInitialized = True Then
    Exit Sub
  End If
  
  ' Watch out for messed up registry settings
  On Error GoTo ErrorHandler
  myCustomerName = vb_getCustomerName()
  myCompany = vb_getOrganization()
  myEmailAddress = vb_getCustomerEmail()
  myInstallationPath = vb_getInstallationPath()
  myBuildDate = vb_getBuildDate()
  myDataPath = vb_getDataPath()
  myHostId = vb_getHostId()
  myProductKey = vb_getLicenseKey()
  myProductVersion = vb_getVERSION()
  myProductRelease = vb_getReleaseName()
  myExpiryDate = vb_getExpiryDate()
  myLicenseLevel = vb_getLicenseLevel()
  
  myServiceExpiryDate = vb_getServiceExpiryDate()
  myProductNewVersion = vb_getLatestVersion()
  myNewVersionURL = vb_getLatestVersionURL()
  
  ' Replace date with a serial number
  myBuildDate = getDateSerialNo(myBuildDate)

  ' Initialize subscription and update information (from registry)
  myServiceExpiryDate = vb_getServiceExpiryDate()
  myProductNewVersion = vb_getLatestVersion()
  myNewVersionURL = vb_getLatestVersionURL()


  ' Query for International setting
  myExcelVersion = getExcelVersion()
  myExcelCountryCode = getExcellanguage()

  ' designate the object as initialized
  myModInitialized = True
ExitPt:
  Exit Sub

ErrorHandler:
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_INVALID_REGISTRY_MSG), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume ExitPt
End Sub

Private Function vb_getCustomerName() As String
  Const sSOURCE As String = "vb_getCustomerName"
  
  If vb_RegistryKeyExists(REGISTRY_HKCU_CUSTOMER_PATH) Then
    vb_getCustomerName = vb_ReadRegistryKey(REGISTRY_HKCU_CUSTOMER_PATH)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_CUSTOMER_PATH) Then
      vb_getCustomerName = vb_ReadRegistryKey(REGISTRY_HKLM_CUSTOMER_PATH)
    Else
      vb_getCustomerName = MSGAPI.getLocaleString(IDS_UI_COMMON_DEFAULT_CUSTOMER_NAME) ' "John Doe"
    End If
  End If
End Function

Private Function vb_getCustomerEmail() As String
  Const sSOURCE As String = "vb_getCustomerEmail"
  Dim szHostRegPath As String
  
  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\CUSTOMER"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getCustomerEmail = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKCU_EMAIL_PATH) Then
      vb_getCustomerEmail = vb_ReadRegistryKey(REGISTRY_HKCU_EMAIL_PATH)
    Else
      If vb_RegistryKeyExists(REGISTRY_HKLM_EMAIL_PATH) Then
        vb_getCustomerEmail = vb_ReadRegistryKey(REGISTRY_HKLM_EMAIL_PATH)
      Else
        vb_getCustomerEmail = MSGAPI.getLocaleString(IDS_UI_COMMON_DEFAULT_CUSTOMER_EMAIL) ' "abc@xyz.com"
      End If
    End If
  End If
  
End Function



Private Function vb_getOrganization() As String
  Const sSOURCE As String = "vb_getOrganization"

  If vb_RegistryKeyExists(REGISTRY_HKCU_ORGANIZATION_PATH) Then
    vb_getOrganization = vb_ReadRegistryKey(REGISTRY_HKCU_ORGANIZATION_PATH)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_ORGANIZATION_PATH) Then
      vb_getOrganization = vb_ReadRegistryKey(REGISTRY_HKLM_ORGANIZATION_PATH)
    Else
      vb_getOrganization = MSGAPI.getLocaleString(IDS_UI_COMMON_DEFAULT_CUSTOMER_COMPANY) ' "XYZ Inc"
    End If
  End If
End Function


Private Function vb_getBuildDate() As String
  Const sSOURCE As String = "vb_getBuildDate"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\BUILD"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getBuildDate = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKCU_BUILDDATE_PATH) Then
      vb_getBuildDate = vb_ReadRegistryKey(REGISTRY_HKCU_BUILDDATE_PATH)
    Else
      If vb_RegistryKeyExists(REGISTRY_HKLM_BUILDDATE_PATH) Then
        vb_getBuildDate = vb_ReadRegistryKey(REGISTRY_HKLM_BUILDDATE_PATH)
      Else
        vb_getBuildDate = MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_UNKNOWN_BUILD_MSG) ' "UNKNOWN"
      End If
    End If
  End If
End Function


' Read Service date from the registry if available
Private Function vb_getServiceExpiryDate() As String
  Const sSOURCE As String = "vb_getServiceExpiryDate"
  Dim szHostRegPath As String

  Dim nRetVal As Integer
  Dim nSerialDate As Long

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\SERVICE"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getServiceExpiryDate = vb_ReadRegistryKey(szHostRegPath)
  Else
    ' Revert to license expiration date
    vb_getServiceExpiryDate = vb_getExpiryDate()
  End If
End Function

Private Sub vb_setServiceExpiryDate(zdate As Date)
  Const sSOURCE As String = "vb_setServiceExpiryDate"
  Dim szHostRegPath As String
  Dim nRetVal As Integer
  Dim nSerialDate As Long

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\SERVICE"
  If vb_RegistryKeyExists(szHostRegPath) Then
    'Try to write the registry here
    Call vb_WriteRegistryKey(szHostRegPath, Int(CDbl(zdate)), "REG_DWORD")
  End If
End Sub



Private Function vb_getLatestVersion() As String
  Const sSOURCE As String = "vb_getLatestVersion"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\NEWVERSION"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getLatestVersion = vb_ReadRegistryKey(szHostRegPath)
  Else
    ' Revert to current product version
    vb_getLatestVersion = myProductVersion
  End If
End Function

Private Sub vb_setLatestVersion(ver As String)
  Const sSOURCE As String = "vb_setLatestVersion"
  Dim szHostRegPath As String
  Dim nRetVal As Integer
  Dim nSerialDate As Long

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\NEWVERSION"
  If vb_RegistryKeyExists(szHostRegPath) Then
    'Try to write the registry here
    Call vb_WriteRegistryKey(szHostRegPath, ver, "REG_SZ")
  End If
End Sub



Private Function vb_getLatestVersionURL() As String
  Const sSOURCE As String = "vb_getLatestVersion"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\UPDATEURL"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getLatestVersionURL = vb_ReadRegistryKey(szHostRegPath)
  Else
    vb_getLatestVersionURL = REALEASENOTES_URL
  End If
End Function

Private Sub vb_setLatestVersionURL(url As String)
  Const sSOURCE As String = "vb_setLatestVersionURL"
  Dim szHostRegPath As String
  Dim nRetVal As Integer
  Dim nSerialDate As Long

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\UPDATEURL"
  If vb_RegistryKeyExists(szHostRegPath) Then
    'Try to write the registry here
    Call vb_WriteRegistryKey(szHostRegPath, url, "REG_SZ")
  End If
End Sub



Public Function vb_getUserOptionsObj() As UserInformationUO
  
  If userOptions Is Nothing Then
    Set userOptions = New UserInformationUO
  End If

  Set vb_getUserOptionsObj = userOptions
End Function



Public Function vb_getExpiryDate() As Date
  Const sSOURCE As String = "vb_getExpiryDate"
    
  Dim szVal As String

  On Error GoTo NUMXL_ERRHDLR
  
  ' Use 1970/12/1 as the default return date
  vb_getExpiryDate = DateSerial(1970, 1, 1)
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    szVal = Application.Run(PRODUCT_ADDIN_INFO_API, LicenseExpiryDateN)
    If Len(szVal) > 0 Then
      ' Convert to numeric value first
      vb_getExpiryDate = Val(szVal)
    End If
  End If
    
NUMXL_ERRHDLR:
    Exit Function
End Function

Public Function vb_getLicenseLevel() As LICENSE_LEVEL_TYPE
  Const sSOURCE As String = "vb_getLicenseLevel"
  
  On Error GoTo NUMXL_ERRHDLR
  ' Use as the default return date
  vb_getLicenseLevel = LITE_MODE
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_getLicenseLevel = Application.Run(PRODUCT_ADDIN_INFO_API, LicenseLevelN)
  End If
  Exit Function
  
NUMXL_ERRHDLR:
  vb_getLicenseLevel = LITE_MODE
  Exit Function
End Function

Public Function vb_getLicenseKey() As String
  Const sSOURCE As String = "vb_getLicenseKey"
  
    On Error GoTo NUMXL_ERRHDLR
    
    ' Use as the default return date
    vb_getLicenseKey = ""
    ' Check if NumXL is installed and loaded
    If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
      vb_getLicenseKey = Application.Run(PRODUCT_ADDIN_INFO_API, LicenseKeyN)
    End If

NUMXL_ERRHDLR:
    Exit Function
End Function


Public Function vb_getVERSION() As String
  Const sSOURCE As String = "vb_getVERSION"
  
  On Error GoTo NUMXL_ERRHDLR
  
  ' Use as the default return date
  vb_getVERSION = ""
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_getVERSION = Application.Run(PRODUCT_ADDIN_INFO_API, VersionNumberN)
  End If

NUMXL_ERRHDLR:
    Exit Function
End Function

Public Function vb_getReleaseName() As String
  Const sSOURCE As String = "vb_getReleaseName"
  
  On Error GoTo NUMXL_ERRHDLR
  
  ' Use as the default return date
  vb_getReleaseName = ""
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_getReleaseName = Application.Run(PRODUCT_ADDIN_INFO_API, ReleaseN)
  End If

NUMXL_ERRHDLR:
  Exit Function
End Function

Public Function vb_getHostId() As String
  Const sSOURCE As String = "vb_getHostId"
  
  On Error GoTo NUMXL_ERRHDLR
  
  ' Use as the default return date
  vb_getHostId = ""
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_getHostId = Application.Run(PRODUCT_ADDIN_INFO_API, LocalHostId)
  End If

NUMXL_ERRHDLR:
  Exit Function
End Function



Public Function Check4Update() As Integer
  ' We are ready to query the backend service for updates
  Dim newVersion As String
  Dim newVersionURL As String
  
  Dim newVersionBufferSize As Long
  Dim newVersionURLBufferSize As Long

  Dim nRetVal As Integer
  Dim nSerialDate As Long
  
  On Error GoTo NUMXL_ERRHDLR
  
  nRetVal = SFLUC_SERVICEDATE(StrPtr(LUCAPI.Get_ProductKey), nSerialDate)
  If nRetVal >= NDK_SUCCESS Then
    Let_serviceExpiryDate nSerialDate

    Call vb_setServiceExpiryDate(LUCAPI.Get_serviceExpiryDate)
    
    ' Next, let's query for available update
    newVersionBufferSize = 16
    newVersionURLBufferSize = 512
    ' (1) Allocate space in the string
    newVersion = Space$(newVersionBufferSize)
    newVersionURL = Space$(newVersionURLBufferSize)
    
    nRetVal = SFLUC_UPDATEVERSION(StrPtr(LUCAPI.Get_ProductKey), StrPtr(LUCAPI.Get_ProductVersion), _
                                  StrPtr(newVersion), newVersionBufferSize, _
                                  StrPtr(newVersionURL), newVersionURLBufferSize)
    If nRetVal >= NDK_SUCCESS Then
      LUCAPI.Let_newVersion Left(newVersion, newVersionBufferSize)
      If Left(newVersion, newVersionBufferSize) <> LUCAPI.Get_ProductVersion Then
        ' Update the registry
        Call vb_setLatestVersion(LUCAPI.Get_newVersion)
        ' Update the registry
        LUCAPI.Let_newVersionDownloadURL Left(newVersionURL, newVersionURLBufferSize)
        Call vb_setLatestVersionURL(LUCAPI.Get_newVersionDownloadURL)
      Else
        LUCAPI.Let_newVersionDownloadURL REALEASENOTES_URL
        Call vb_setLatestVersionURL(REALEASENOTES_URL)
      End If
    End If
  End If
  
  Check4Update = nRetVal
  Exit Function
NUMXL_ERRHDLR:
  ' An error occured here
  Check4Update = -1
 
  Exit Function
End Function



Attribute VB_Name = "MCSimulateFrm"
Attribute VB_Base = "0{8F4312AC-8BFC-41D5-82AB-359F4AF1DA8F}{2BBE72DD-9B5B-42FA-89F1-76D4E5C9E01E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: MCSimulateFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/MCSimulateFrm.frm $
'
Private Const msMODULE As String = "USERFORM:MCSIM"
Private Const zenSlugId As String = "articles/216534383"

Private userOptions As MCSimulationUO
Private myGeneralUO As GeneralUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub OptionButtonWorkbook_Click()
  userOptions.CALC_RANGE_OPTION = MCCALC_WORKBOOK
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub OptionButtonWorksheet_Click()
  userOptions.CALC_RANGE_OPTION = MCCALC_WORKSHEET
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub OptionButtonRange_Click()
  userOptions.CALC_RANGE_OPTION = MCCALC_RANGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

' RefEditCellsRange
Private Sub RefEditCellsRange_Change()
  userOptions.CALC_CELLS_RANGE = Utilities.procAlphaInputVal(RefEditCellsRange.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefInputArray_Change()
  userOptions.TARGET_CELL = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procAlphaInputVal(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonSimulation_Spinup()

  userOptions.SIMULATIONS = userOptions.SIMULATIONS + 10
  
  If callValidateForm = True Then
    callValidateForm = False
    TxtSimulations.value = userOptions.SIMULATIONS
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonSimulation_Spindown()

  If userOptions.SIMULATIONS > 10 Then
    userOptions.SIMULATIONS = userOptions.SIMULATIONS - 10
    
    If callValidateForm = True Then
      callValidateForm = False
      TxtSimulations.value = userOptions.SIMULATIONS
      callValidateForm = True
    Else
      TxtSimulations.value = userOptions.SIMULATIONS
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub TxtSimulations_Change()
  If IsNumeric(TxtSimulations.value) = True And _
     TxtSimulations.value >= 1 Then
    userOptions.SIMULATIONS = TxtSimulations.value
    
    If callValidateForm = True Then
      Call validateForm
    End If
  Else
    MsgBox "Number of simulations must be a positive integer", vbOKOnly, PRODUCT_MEDIUMNAME
    TxtSimulations.value = userOptions.SIMULATIONS
  End If
End Sub
Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_FRM_CAPTION)
    
  targetCellLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_TARGET_CELL_LABEL_CAPTION)
  targetCellLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_TARGET_CELL_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_TARGET_CELL_LABEL_HELPTIP)
    
  CalculationRangeFrame.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RANGE_FRAME_CAPTION)
  CalculationRangeFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RANGE_FRAME_HELPTIP)
    
  OptionButtonWorkbook.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_WKBK_LABEL_CAPTION)
  OptionButtonWorkbook.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_WKBK_LABEL_HELPTIP)

  OptionButtonWorksheet.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_WKSHT_LABEL_CAPTION)
  OptionButtonWorksheet.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_WKSHT_LABEL_HELPTIP)
    
  OptionButtonRange.Caption = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_CUSTOM_LABEL_CAPTION)
  OptionButtonRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_CUSTOM_LABEL_HELPTIP)
  RefEditCellsRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MCSIMULATE_CALC_RNG_CUSTOM_LABEL_HELPTIP)
    
  NoSimulationLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_CAPTION)
  NoSimulationLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_HELPTIP)
  TxtSimulations.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_HELPTIP)
    
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New MCSimulationUO
  Set myGeneralUO = New GeneralUO
  
  Call ResetToDefault
  
  Call validateForm
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub
Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDateReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
  
  inputDateReady = Utilities.isCellRangeValid(RefInputArray.value)
  
  OptionButtonWorkbook.enabled = inputDateReady
  OptionButtonWorksheet.enabled = inputDateReady
  OptionButtonRange.enabled = inputDateReady
  RefEditCellsRange.enabled = inputDateReady And OptionButtonRange.value
  
  TxtSimulations.enabled = inputDateReady
  RefOutput.enabled = inputDateReady
  
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        If OptionButtonRange.value Then
          ready = Utilities.isCellRangeValid(RefEditCellsRange.value)
        Else
          ready = True
        End If
      End If
  End If
    
  cmdOK.enabled = ready
End Sub

Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  
  OptionButtonWorkbook.value = (userOptions.CALC_RANGE_OPTION = MCCALC_WORKBOOK)
  OptionButtonWorksheet.value = (userOptions.CALC_RANGE_OPTION = MCCALC_WORKSHEET)
  OptionButtonRange.value = (userOptions.CALC_RANGE_OPTION = MCCALC_RANGE)
  RefEditCellsRange.value = userOptions.CALC_CELLS_RANGE
  
  TxtSimulations.value = userOptions.SIMULATIONS
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim isScreenUpdate As Boolean
  Dim statusBarUpdate As Boolean
  Dim autoCalcSetup As Integer
    
  Dim myRange As Object
    
  On Error GoTo ErrorHdler
  Application.EnableCancelKey = xlErrorHandler
  Call Utilities.OptimizeCode_Begin
  
  ' Force the recalculation of the target cell (i.e. range)
  Dim outCells As Object
  
  Set outCells = Range(RefOutput.value)
  
  Call userOptions.printSimulationOutput(outCells)

Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  If Err = 18 Then
    Resume Cleanup      ' cancelled
  End If
  
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_SIMULATE_PREPARE_ERROR_MSG), vbOKOnly Or vbCritical, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub
Attribute VB_Name = "MCSimulationUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: MCSimulationUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/MCSimulationUO.cls $
'
Private Const msMODULE As String = "CLASS:MCSimulationUO"


Public Enum MCCALC_RANGE_OPTION
  MCCALC_WORKBOOK = 1
  MCCALC_WORKSHEET = 2
  MCCALC_RANGE = 3
End Enum


Private myMCCalcOption As MCCALC_RANGE_OPTION
Private myTargetCell As String
Private myUpdateCellsRange As String
Private mySimulationCount As Long


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()
  myMCCalcOption = MCCALC_WORKBOOK
  myTargetCell = ""
  myUpdateCellsRange = ""
  mySimulationCount = 100
End Sub

Public Property Get CALC_RANGE_OPTION() As MCCALC_RANGE_OPTION
    CALC_RANGE_OPTION = myMCCalcOption
End Property

Public Property Let CALC_RANGE_OPTION(ByVal vNewValue As MCCALC_RANGE_OPTION)
  myMCCalcOption = vNewValue
End Property

Public Property Get SIMULATIONS() As Long
    SIMULATIONS = mySimulationCount
End Property

Public Property Let SIMULATIONS(ByVal vNewValue As Long)
  mySimulationCount = vNewValue
End Property

Public Property Get TARGET_CELL() As String
    TARGET_CELL = myTargetCell
End Property

Public Property Let TARGET_CELL(ByVal vNewValue As String)
  myTargetCell = vNewValue
End Property

Public Property Get CALC_CELLS_RANGE() As String
    CALC_CELLS_RANGE = myUpdateCellsRange
End Property

Public Property Let CALC_CELLS_RANGE(ByVal vNewValue As String)
  myUpdateCellsRange = vNewValue
End Property

Public Sub printSimulationOutput(ByRef myRange As Range)
 Const sSOURCE As String = "printSimulationOutput"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim j As Long
  Dim k As Long
  Dim szOldCurrentSheet As String
  Dim targetCell As Object
  Dim updateRange As Object
  Dim szTemp As String
  Dim cols As Long
  Dim rows As Long
  Dim count As Long
  
  
  On Error GoTo ErrorHdler
  Application.EnableCancelKey = xlErrorHandler
  
  Set targetCell = Range(Me.TARGET_CELL)
  
  cols = targetCell.columns.count
  rows = targetCell.rows.count
  count = cols * rows
  
  szOldCurrentSheet = ActiveSheet.Name
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  With Range(myRange.Cells(1, 1), myRange.Cells(1, count))
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With

  myRange.Cells(1, 1).value = MSGAPI.getLocaleString(IDS_UI_SIMULATE_OUTPUT_SIMULATION_HEADER) ' "Simulation"
  ' Restore the active sheet
  If ActiveSheet.Name <> szOldCurrentSheet Then
    Sheets(szOldCurrentSheet).Activate
  End If


  If Me.CALC_RANGE_OPTION = MCCALC_RANGE Then
    Set updateRange = Range(Me.CALC_CELLS_RANGE)
    ' Repeat N times
    For i = 1 To Me.SIMULATIONS
      ' Simulation #10
      Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_SIMULATE_OUTPUT_SIMULATION_NO_HEADER) & i
      
      If count = 1 Then
        myRange.Cells(i + 1, 1) = targetCell.value
        myRange.Cells(i + 1, 1).NumberFormat = targetCell.NumberFormat
      Else
        For j = 1 To rows
          For k = 1 To cols
            myRange.Cells(i + 1, (j - 1) * cols + k) = targetCell.Cells(j, k).value
            myRange.Cells(i + 1, (j - 1) * cols + k).NumberFormat = targetCell.Cells(j, k).NumberFormat
          Next k
          
          ' Add a vertical line to separate rows
          With myRange.Cells(i + 1, j * cols).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlThin         'Use xlThin for smaller border
          End With
        Next j
      End If
      
      updateRange.Calculate
      targetCell.Calculate
    Next i
  ElseIf Me.CALC_RANGE_OPTION = MCCALC_WORKSHEET Then
    For i = 1 To Me.SIMULATIONS
      Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_SIMULATE_OUTPUT_SIMULATION_NO_HEADER) & i
      
      ' Read the value of the taget cell
      ' myRange.Cells(i + 1, 1) = targetCell.value
      If count = 1 Then
        myRange.Cells(i + 1, 1) = targetCell.value
        myRange.Cells(i + 1, 1).NumberFormat = targetCell.NumberFormat
      Else
        For j = 1 To rows
          For k = 1 To cols
            myRange.Cells(i + 1, (j - 1) * cols + k) = targetCell.Cells(j, k).value
            myRange.Cells(i + 1, (j - 1) * cols + k).NumberFormat = targetCell.Cells(j, k).NumberFormat
          Next k
          
          ' Add a vertical line to separate rows
          With myRange.Cells(i + 1, j * cols).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlThin         'Use xlThin for smaller border
          End With
        Next j
      End If
      ' Force calculation ( is the output or the input?)
      Application.Calculate     ' Similar to SHIFT+F9
    Next i
  Else
    For i = 1 To Me.SIMULATIONS
      Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_SIMULATE_OUTPUT_SIMULATION_NO_HEADER) & i
      
      ' Read the value of the taget cell
      ' myRange.Cells(i + 1, 1) = targetCell.value
      If count = 1 Then
        myRange.Cells(i + 1, 1) = targetCell.value
        myRange.Cells(i + 1, 1).NumberFormat = targetCell.NumberFormat
      Else
        For j = 1 To rows
          For k = 1 To cols
            myRange.Cells(i + 1, (j - 1) * cols + k).value = targetCell.Cells(j, k).value
            myRange.Cells(i + 1, (j - 1) * cols + k).NumberFormat = targetCell.Cells(j, k).NumberFormat
          Next k
          
          ' Add a vertical line to separate rows
          With myRange.Cells(i + 1, j * cols).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlThin         'Use xlThin for smaller border
          End With
        Next j
      End If
      
      
      
      
      ' Force calculation ( is the output or the input?)
      Application.CalculateFull ' For the whole workbook
    Next i
  End If

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  Exit Sub
  
ErrorHdler:
  If Err = 18 Then
    Resume SubExit      ' cancelled
  End If

  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub

Attribute VB_Name = "MSGAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'    Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'
Private Const msMODULE As String = "MSGAPI"
Private libraryHandle As Long

#If VBA7 Then
  ' Excel 2010 + (32/64-bit)
  ' LongPtr = 4/8 bytes = C-size_t
    Private Declare PtrSafe Function SFMSG_Init Lib "SFMSG.DLL" Alias "#100" (ByVal szAppName As LongPtr, ByVal lcid As Long) As Long
    Private Declare PtrSafe Function SFMSG_Shutdown Lib "SFMSG.DLL" Alias "#110" () As Long
    Private Declare PtrSafe Function SFMSG_LCID Lib "SFMSG.DLL" Alias "#105" (ByRef lcid As Long) As Long
    Private Declare PtrSafe Function SFMSG_MSG Lib "SFMSG.DLL" Alias "#120" (ByVal nResId As Long, ByVal zMsg As LongPtr, ByRef nSize As LongPtr) As Long
    Private Declare PtrSafe Function SFMSG_RESET Lib "SFMSG.DLL" Alias "#115" (ByVal lcid As Long) As Long
    Private Declare PtrSafe Function SFMSG_NEUTRAL_LCID Lib "SFMSG.DLL" Alias "#108" (ByRef lcid As Long) As Long
    Private Declare PtrSafe Function SFMSG_LCID_SUPPORTED Lib "SFMSG.DLL" Alias "#107" (ByVal lcid As Long, ByRef bExist As Boolean) As Long
#Else
    ' Excel 2007 (32-bit)
    ' Long = 4-bytes = DWORD = C-Integer
    ' integer = 2 bytes = WORD = C-Short
    Private Declare Function SFMSG_Init Lib "SFMSG.DLL" Alias "#100" (ByVal szAppName As Long, ByVal lcid As Long) As Long
    Private Declare Function SFMSG_Shutdown Lib "SFMSG.DLL" Alias "#110" () As Long
    Private Declare Function SFMSG_LCID Lib "SFMSG.DLL" Alias "#105" (ByRef lcid As Long) As Long
    Private Declare Function SFMSG_MSG Lib "SFMSG.DLL" Alias "#120" (ByVal nResId As Long, ByVal zMsg As Long, ByRef nSize As Long) As Long
    Private Declare Function SFMSG_RESET Lib "SFMSG.DLL" Alias "#115" (ByVal lcid As Long) As Long
    Private Declare Function SFMSG_NEUTRAL_LCID Lib "SFMSG.DLL" Alias "#108" (ByRef lcid As Long) As Long
    Private Declare Function SFMSG_LCID_SUPPORTED Lib "SFMSG.DLL" Alias "#107" (ByVal lcid As Long, ByRef bExist As Boolean) As Long
#End If

Public Function msg_init(ByVal wkbkPath As String) As Integer
  Const sSOURCE As String = "msg_init"
  
  Dim nRet As Long
  Dim dwLCID As Long
  Dim handle As Long
  Dim path As String
  Dim oldPath As String
  
  On Error GoTo ErrorHnadler
  
  ' Change directory
  oldPath = CurDir()
  ChDir wkbkPath
  
  path = "SFMSG.dll"
  handle = GetModuleHandle(StrPtr(path))
  If handle = 0 Then
    path = wkbkPath & "\SFMSG.dll"
    libraryHandle = LoadLibrary(StrPtr(path))
  Else
    libraryHandle = handle
  End If
  
  dwLCID = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
  
  msg_init = SFMSG_Init(StrPtr("NumXL"), dwLCID)
Cleanup:
  ' Restore original working directory
  ChDir oldPath
  Exit Function
  
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
#If DEBUGGING = 1 Then
  MsgBox "Error occured switching locality setting", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
#End If
  
  Resume Cleanup
End Function

Public Function msg_shutdown() As Integer
  Const sSOURCE As String = "msg_shutdown"
  
  Dim nRet As Integer
  On Error GoTo ErrorHnadler
  
  msg_shutdown = SFMSG_Shutdown()
  
  If libraryHandle = 0 Then
    Exit Function
  End If
  
  FreeLibrary (libraryHandle)
  libraryHandle = 0
Cleanup:
  Exit Function
  
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)

#If DEBUGGING = 1 Then
  MsgBox "Error occured switching locality setting", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
#End If
  Resume Cleanup
End Function


Public Function getLocalityId() As Integer
  Const sSOURCE As String = "getLocalityId"

  Dim nRet As Long
  Dim dwLCID As Long
  
  nRet = SFMSG_LCID(dwLCID)
  getLocalityId = dwLCID

End Function


Public Function resetLocality() As Boolean
  Const sSOURCE As String = "getLocaleString"
  
  Dim dwLCID As Long
  Dim nRet As Long
  Dim bSupported As Boolean
  
  On Error GoTo ErrorHnadler

  dwLCID = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
  
  'get corresponding neutral lcid
  nRet = SFMSG_NEUTRAL_LCID(dwLCID)
  
  If dwLCID <> getLocalityId() Then
    ' Is the locality supported
     nRet = SFMSG_LCID_SUPPORTED(dwLCID, bSupported)
     If nRet >= NDK_SUCCESS And _
        bSupported = True Then
      nRet = SFMSG_RESET(dwLCID)
      resetLocality = (nRet >= NDK_SUCCESS)
     Else
      resetLocality = False
     End If
  Else
    resetLocality = True
  End If
Cleanup:
  Exit Function

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)

#If DEBUGGING = 1 Then
  MsgBox "Error occured switching locality setting", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
#End If
  Resume Cleanup
End Function


' Define a function to interface with the API
Public Function getLocaleString(ByVal dwResId As Integer) As String
  Const sSOURCE As String = "getLocaleString"
  
  Dim nRet As Long
#If VBA7 Then
  Dim nSize As LongPtr
#Else
  Dim nSize As Long
#End If

  On Error GoTo ErrorHnadler
  
  ' Set the locality Id
  resetLocality
  
  ' Allocate enough storage
  nSize = 1024
  getLocaleString = String(CLng(nSize), 0)
  
  nRet = SFMSG_MSG(dwResId, StrPtr(getLocaleString), nSize)
  If nRet >= NDK_SUCCESS Then
    ' trim all character past the last null
    getLocaleString = Left(getLocaleString, InStr(getLocaleString, Chr(0)) - 1)
  Else
    getLocaleString = ""
  End If

Cleanup:
  Exit Function

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)

#If DEBUGGING = 1 Then
  MsgBox "Error occured querying a locale-specific text", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
#Else
'  'Do Nothing
#End If
  
  Resume Cleanup
End Function

Attribute VB_Name = "Main"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: Main.bas 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/Excel2007/Main.bas $
'
Private Const msMODULE As String = "MAIN"

'public variable for our ribbon (for the callbacks)
'Public pub_myRibbon As IRibbonUI
Public pub_myRibbon As Object


#If VBA7 Then
  Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (destination As Any, source As Any, ByVal length As Long)
#Else
  Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (destination As Any, source As Any, ByVal length As Long)
#End If



Public Const solverxla As String = "Solver.xlam"

' Descriptive statistics Dialog Box
Public Sub DesStatsAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchDescStatForm
End Sub

Public Sub StatTestingAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchDescStatForm
End Sub

'
Public Sub COINTEGRATIONTESTAPI(control As Object)
  Call LaunchCointegrationTestForm
End Sub


Public Sub HISTOGRAMAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchHistogramForm
End Sub


Public Sub QQPLOTAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchQQPlotForm
End Sub

Public Sub EDFPLOTAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchEDFForm
End Sub

Public Sub KDEPLOTAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchKDEForm
End Sub


Public Sub ANOVAAPI(control As Object)
  
  ' Invoke the function in module Launch Form
  Call LaunchANOVAForm
End Sub


Public Sub CorrelogramAPI(control As Object)
  ' Invoke the Correlogram Dialog
  Call LaunchCorrelogramForm
End Sub

Public Sub ARMAModelAPI(control As Object)
  ' Launch ARMA model Form
  Call LaunchARMAForm
End Sub

Public Sub ARMAXModelAPI(control As Object)
  ' Launch ARMA model Form
  Call LaunchARMAXForm
End Sub

Public Sub X12ARIMAModelAPI(control As Object)
  ' Launch X12-ARIMA model Form
  Call LaunchX12ARIMAForm
End Sub

Public Sub X13ARIMASEATSModelAPI(control As Object)
  ' Launch X12-ARIMA model Form
  Call LaunchX13ARIMASEATSForm
End Sub


Public Sub ARIMAModelAPI(control As Object)
  ' Launch ARMA model Form
  Call LaunchARIMAForm
End Sub

Public Sub SARIMAModelAPI(control As Object)
  ' Launch ARMA model Form
  Call LaunchSARIMAForm
End Sub


Public Sub AIRLINEModelAPI(control As Object)
  ' Launch AirLine model
  Call LaunchAirLineForm
End Sub

Public Sub ARCHModelAPI(control As Object)
  ' Launch ARCH Model
  Call LaunchARCHForm
End Sub

Public Sub COMBOAPI(control As Object)
  ' Launch ARCH Model
  Call LaunchARCHForm
End Sub



Public Sub GLMModelAPI(control As Object)
  ' Launch ARCH Model
  Call LaunchGLMForm
End Sub


Public Sub AboutAPI(control As Object)
  ' Launch the About Box
  Call LaunchAboutForm
End Sub

Public Sub HelpAPI(control As Object)
  ' Launch the About Box
  Call LaunchAboutForm
End Sub

'LaunchCheckUpdateForm
Public Sub CHECKUPDATEAPI(control As Object)
  ' Launch the About Box
  Call LaunchCheckUpdateForm
End Sub

Sub CalibrationAPI(control As Object)
  Const sSOURCE As String = "CalibrationAPI"
  
  'Dim iRibbon As IRibbonUI
  Dim iRibbon As Object
  
  On Error GoTo ErrorHnadler
  ' Launch Calibration Form
  Call LaunchCalibrationForm
  
  ' Refresh the toolbar (workaround, when the toolbar just disappears)
  Set iRibbon = myRibbon()
  Call iRibbon.Invalidate
Cleanup:
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_INVOKE_SOLVER_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Sub IdentificationAPI(control As Object)
  ' Launch Model Identification Wizard
  Call LaunchModelIdentificationForm
End Sub

Sub DiagnosisAPI(control As Object)
  ' Launch Model Diagnosis Wizard
  Call LaunchModelDiagnosisForm
End Sub


Sub BacktestingAPI(control As Object)
  ' Launch Calibration Form
  Call LaunchCalibrationForm
End Sub


Sub ForecastAPI(control As Object)
  'Launch Forecast Form
  Call LaunchForecastForm
End Sub

Sub NORMALTESTAPI(control As Object)
  'Launch the Normality Test Form
  Call LaunchNormalityTestForm

End Sub


Sub WNTESTAPI(control As Object)
  'Launch the Normality Test Form
  Call LaunchWNTestForm
End Sub


'LaunchHurstExponentForm
Sub HURSTAPI(control As Object)
  'Launch the Normality Test Form
  Call LaunchHurstExponentForm
End Sub



Sub ARCHTESTAPI(control As Object)
  'Launch the Normality Test Form
  Call LaunchARCHTestForm
End Sub


Sub StationaryTestAPI(control As Object)
  'Launch the Normality Test Form
  Call LaunchStationarityTestForm
End Sub


Sub USERGUIDEAPI(control As Object)
  Call vb_OpenURL(USERGUIDE_URL, 1121)
End Sub

Sub CONTACTUSAPI(control As Object)
  Call vb_OpenURL(CONTACTUS_URL, 1101)
End Sub

Sub NUMXLCOMMUNITYAPI(control As Object)
  Call vb_OpenURL(COMMUNITY_URL, 1019)
End Sub

Sub QuickStartAPI(control As Object)
  Call vb_OpenURL(GETTINGSTARTED_URL, 1111)
End Sub

Sub HomogeneityTestAPI(control As Object)
 Call LaunchHomogeneityTestForm
End Sub

Sub RESAMPLEAPI(control As Object)
  Call LaunchResampleForm
End Sub



Sub PCAPCRAPI(control As Object)
  Call LaunchPCAPCRForm
End Sub

Sub REGRESSIONAPI(control As Object)
  Call LaunchRegressionForm
End Sub


Sub COLLINEARITYTESTAPI(control As Object)
  Call LaunchCollinearityTestForm
End Sub



Sub REGRESSTABILITYTESTAPI(control As Object)
  Call LaunchRegressionStabilityTestForm
End Sub


Sub FOURIERAPI(control As Object)
  Call LaunchDFTForm
End Sub

Sub FILTERAPI(control As Object)
  Call LaunchFiltersForm
End Sub

'LaunchMCSimulationForm
Sub SIMULATIONAPI(control As Object)
  Call LaunchSimulationForm
End Sub

Sub MCSIMULATIONAPI(control As Object)
  Call LaunchMCSimulationForm
End Sub

Sub PERIODGRAMAPI(control As Object)
  Call LaunchPeriodgramForm
End Sub

Public Sub Auto_Remove()
' IMPORTANT: Something needs to be in this function or else Excel won't call Auto_Remove properly
' Comments seem to work to fill the function....


End Sub

Public Sub OnMainLoad(ribbon As Object)
  'handles the OnLoad callback of the customUI element
  'and saves the IRibbonUI object reference to m_ribbon
  Set pub_myRibbon = ribbon
End Sub


Public Sub onLoadRibbon(ribbon As Object)
  Const sSOURCE As String = "onLoadRibbon"
  Dim nRet As Integer
  
#If VBA7 Then
  Dim lRibbonPointer As LongPtr
#Else
  Dim lRibbonPointer As Long
#End If
  On Error GoTo ErrorHnadler
  
  Debug.Print "onLoadRibbon(ribbon As IRibbonUI)"
  
  'load our public variable
  Set pub_myRibbon = ribbon
  
  '*** Store a memory reference to our ribbon object, in case the VDE loses scope
  'get our long pointer reference, using the objptr function
  lRibbonPointer = ObjPtr(ribbon)
  
  'put in the header, so we can store notes in the main body of the project
  ThisWorkbook.Sheets("Sheet1").Range("A1") = CStr(lRibbonPointer)

  'mark this document as saved, so this never triggers a "do you want to save this project?"
  ThisWorkbook.Saved = True
  
  ' Initialize the locality library
  ' nRet = MSGAPI.msg_init(ThisWorkbook.path)
Cleanup:
  Exit Sub
  
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
#If DEBUGGING = 1 Then
  MsgBox "Error occured switching locality setting", vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
#End If
  Resume Cleanup
End Sub

'Public Function myRibbon() As IRibbonUI
Public Function myRibbon() As Object
  Dim oRibbon As Object
#If VBA7 Then
  Dim lRibbonPointer As LongPtr
#Else
  Dim lRibbonPointer As Long
#End If
  
  
  If pub_myRibbon Is Nothing Then
    'get our pointer
    If Len(ThisWorkbook.Sheets("Sheet1").Range("A1").value) > 0 Then
#If VBA7 Then
      lRibbonPointer = CLngPtr(ThisWorkbook.Sheets("Sheet1").Range("A1").value)
      CopyMemory oRibbon, lRibbonPointer, 8
#Else
      lRibbonPointer = CLng(ThisWorkbook.Sheets("Sheet1").Range("A1").value)
      CopyMemory oRibbon, lRibbonPointer, 4
#End If
      Set pub_myRibbon = oRibbon
    End If
  End If
  
  'return our value
  Set myRibbon = pub_myRibbon
End Function

Public Sub ribbon_invalidate()
  If Not (pub_myRibbon Is Nothing) Then
    Call pub_myRibbon.Invalidate
  End If
End Sub
Attribute VB_Name = "MissingValueUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: MissingValueUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/MissingValueUO.cls $
'
Private Const msMODULE As String = "CLASS:MissingValueUO"


Public Enum STAT_MISSING_VALUES_TREATMENT
  MV_DONT_ALLOW = 1
  MV_REMOVE = 2
  MV_REPLACE = 3
  MV_INTERPOLATE = 4
  MV_SMOOTH = 5
End Enum


Public Enum STAT_MISSING_VALUES_REPLACE
  MV_REPLACE_AVERAGE = 1
  MV_REPLACE_MEDIAN = 2
  MV_REPLACE_OTHER = 3
End Enum

Public Enum STAT_MISSING_VALUES_INTERPOLATE
  MV_INTERPOLATE_FORWARD_FLAT = 1
  MV_INTERPOLATE_BACKWARD_FLAT = 2
  MV_INTERPOLATE_LINEAR = 3
  MV_INTERPOLATE_CUBIC_SPLINE = 4
End Enum


Public Enum STAT_MISSING_VALUES_SMOOTH
  MV_SMOOTH_WMA = 1
  MV_SMOOTH_EXPON = 2
  MV_BROWN_BRIDGE = 3
End Enum


Private myMissingValues As STAT_MISSING_VALUES_TREATMENT
Private myMVReplace As STAT_MISSING_VALUES_REPLACE
Private myMVInterpolate As STAT_MISSING_VALUES_INTERPOLATE
Private myMVSmooth As STAT_MISSING_VALUES_SMOOTH

Private myConstValue As Double


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()
  myConstValue = 0#
  myMissingValues = MV_DONT_ALLOW
  myMVReplace = MV_REPLACE_AVERAGE
  myMVInterpolate = MV_INTERPOLATE_FORWARD_FLAT
End Sub

Public Property Get MISSING_VALUES_TREATMENT() As STAT_MISSING_VALUES_TREATMENT
    MISSING_VALUES_TREATMENT = myMissingValues
End Property

Public Property Let MISSING_VALUES_TREATMENT(ByVal vNewValue As STAT_MISSING_VALUES_TREATMENT)
  myMissingValues = vNewValue
End Property

Public Property Get MISSING_VALUES_REPLACEMENT() As STAT_MISSING_VALUES_REPLACE
    MISSING_VALUES_REPLACEMENT = myMVReplace
End Property

Public Property Let MISSING_VALUES_REPLACEMENT(ByVal vNewValue As STAT_MISSING_VALUES_REPLACE)
  myMVReplace = vNewValue
End Property

Public Property Get MISSING_VALUES_INTERPOLATION() As STAT_MISSING_VALUES_INTERPOLATE
    MISSING_VALUES_INTERPOLATION = myMVInterpolate
End Property

Public Property Let MISSING_VALUES_INTERPOLATION(ByVal vNewValue As STAT_MISSING_VALUES_INTERPOLATE)
  myMVInterpolate = vNewValue
End Property


Public Property Get MISSING_VALUES_SMOOTH() As STAT_MISSING_VALUES_SMOOTH
    MISSING_VALUES_SMOOTH = myMVSmooth
End Property

Public Property Let MISSING_VALUES_SMOOTH(ByVal vNewValue As STAT_MISSING_VALUES_SMOOTH)
  myMVSmooth = vNewValue
End Property


Public Function isInputValid(ByVal inputData As String) As Boolean
  Const sSOURCE As String = "isInputValid"
  
  Dim NA As Boolean
  Dim inRange As Object
  
  isInputValid = Utilities.isCellRangeValid(inputData)
  If isInputValid = False Then
    Exit Function
  End If

  ' Return
  If Me.MISSING_VALUES_TREATMENT <> MV_DONT_ALLOW Then
    isInputValid = True
    Exit Function
  End If
  
  NA = False
  Set inRange = Range(inputData)
  isInputValid = vb_IsNum(inRange, NA)
  If isInputValid Then
    isInputValid = Not NA
  End If
  
End Function

Public Function procStatInputRange(ByVal inputData As String) As String
  Const sSOURCE As String = "procInputRange"
  Dim order As Integer
  
  order = 1
  
  Select Case Me.MISSING_VALUES_TREATMENT
    Case MV_DONT_ALLOW
      procStatInputRange = inputData
    Case MV_REMOVE
      procStatInputRange = inputData
    Case MV_REPLACE
      Select Case Me.MISSING_VALUES_REPLACEMENT
        Case MV_REPLACE_AVERAGE
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 1,0)"
        Case MV_REPLACE_MEDIAN
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 2,0)"
        Case MV_REPLACE_OTHER
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 3," & myConstValue & ")"
      End Select
    Case MV_INTERPOLATE
      Select Case Me.MISSING_VALUES_INTERPOLATION
        Case MV_INTERPOLATE_FORWARD_FLAT
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 4,0)"
        Case MV_INTERPOLATE_BACKWARD_FLAT
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 5,0)"
        Case MV_INTERPOLATE_LINEAR
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 6,0)"
        Case MV_INTERPOLATE_CUBIC_SPLINE
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 7,0)"
      End Select
    ' Not supported yet
    Case MV_SMOOTH
      Select Case Me.MISSING_VALUES_SMOOTH
        Case MV_SMOOTH_WMA
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 8," & myConstValue & ")"
        Case MV_SMOOTH_EXPON
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 9," & myConstValue & ")"
        Case MV_BROWN_BRIDGE
          procStatInputRange = "SUBNA(" & inputData & "," & order & ", 10," & myConstValue & ")"
      End Select
    End Select
End Function




' Replace the input range address with a call to SUBNA
Public Function procInputRange(ByVal inputData As String, ByVal myAscending As Boolean) As String
  Const sSOURCE As String = "procInputRange"
  Dim order As Integer
  
  If myAscending = True Then
    order = 1
  Else
    order = 0
  End If
  
  
  Select Case Me.MISSING_VALUES_TREATMENT
    Case MV_DONT_ALLOW
        procInputRange = inputData
    Case MV_REMOVE
        procInputRange = "RMNA(" & inputData & ")"
    Case MV_REPLACE
      Select Case Me.MISSING_VALUES_REPLACEMENT
        Case MV_REPLACE_AVERAGE
          procInputRange = "SUBNA(" & inputData & "," & order & ", 1,0)"
        Case MV_REPLACE_MEDIAN
          procInputRange = "SUBNA(" & inputData & "," & order & ", 2,0)"
        Case MV_REPLACE_OTHER
          procInputRange = "SUBNA(" & inputData & "," & order & ", 3," & myConstValue & ")"
      End Select
    Case MV_INTERPOLATE
      Select Case Me.MISSING_VALUES_INTERPOLATION
        Case MV_INTERPOLATE_FORWARD_FLAT
          procInputRange = "SUBNA(" & inputData & "," & order & ", 4,0)"
        Case MV_INTERPOLATE_BACKWARD_FLAT
          procInputRange = "SUBNA(" & inputData & "," & order & ", 5,0)"
        Case MV_INTERPOLATE_LINEAR
          procInputRange = "SUBNA(" & inputData & "," & order & ", 6,0)"
        Case MV_INTERPOLATE_CUBIC_SPLINE
          procInputRange = "SUBNA(" & inputData & "," & order & ", 7,0)"
      End Select
    ' Not supported yet
    Case MV_SMOOTH
      Select Case Me.MISSING_VALUES_SMOOTH
        Case MV_SMOOTH_WMA
          procInputRange = "SUBNA(" & inputData & "," & order & ", 8," & myConstValue & ")"
        Case MV_SMOOTH_EXPON
          procInputRange = "SUBNA(" & inputData & "," & order & ", 9," & myConstValue & ")"
        Case MV_BROWN_BRIDGE
          procInputRange = "SUBNA(" & inputData & "," & order & ", 10," & myConstValue & ")"
      End Select
    End Select
End Function


Attribute VB_Name = "ModelDiagnosisFrm"
Attribute VB_Base = "0{99CD64DA-C42C-4B1B-80B9-755D015199ED}{08F0119B-1B16-4955-9154-BD50942B12A0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ModelDiagnosisFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ModelDiagnosisFrm.frm $
'
Private Const msMODULE As String = "USERFORM:ModelDiagnosis"
Private Const zenSlugId As String = "articles/216534603"

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID)
End Sub
Attribute VB_Name = "ModelIdentificationFrm"
Attribute VB_Base = "0{DFA594A4-973C-4FEB-930F-ADBC31551A06}{A64975CA-09A0-4E24-B11B-B44835430F82}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ModelIdentificationFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ModelIdentificationFrm.frm $
'
Private Const msMODULE As String = "USERFORM:ModelIdentification"
Private Const zenSlugId As String = "articles/216534603"

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID)
End Sub
Attribute VB_Name = "NUMXLAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'    Proprietary and confidential
'
'  $Revision: 16769 $
'  $Date: 2019-10-07 18:27:44 -0500 (Mon, 07 Oct 2019) $
'  $Author: mohamad $
'  $Id: NUMXLAPI.bas 16769 2019-10-07 23:27:44Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/NUMXLAPI.bas $
'
Private Const msMODULE As String = "NUMXLAPI"


'Important: Must flip this one off (i.e. false, before release)
' #Const Debugging = True

Public Enum VersionInfoN
  VersionNumberN = 1
  ReleaseN = 2
  LicenseKeyN = 3
  LicenseLevelN = 4
  LicenseExpiryDateN = 5
  InstallationPathN = 6
  LogFilePathN = 7
  LocalHostId = 8
End Enum

' Switch teh calling DLL based on debug/release mode
#If VBA7 Then
  ' SFSDK API (X-12 ARIMA)
  Public Declare PtrSafe Function NDK_X12_OUT_FILE Lib "SFSDK.DLL" Alias "#5030" (ByVal zModelCode As LongPtr, ByVal retType As Long, ByVal pData As LongPtr, ByRef nLen As Long, ByVal openFile As Integer) As Integer
  Public Declare PtrSafe Function NDK_X12_RUN_SCENARIO Lib "SFSDK.DLL" Alias "#5022" (ByVal zModelCode As LongPtr, ByRef status As Integer) As Integer
                                                                             
  ' X13ARIMA-SEATS Model
  Public Declare PtrSafe Function NDK_X13AS_OUT_FILE Lib "SFSDK.DLL" Alias "#5127" (ByVal zModelCode As LongPtr, ByVal retType As Integer, ByVal pData As LongPtr, ByRef nLen As Long, ByVal openFile As Integer) As Integer
  Public Declare PtrSafe Function NDK_X13_RUN_SPC_FILE Lib "SFSDK.DLL" Alias "#5126" (ByVal zModelCode As LongPtr, ByRef status As Integer) As Integer
  
#Else
  ' SFSDK API (X-12 ARIMA)
  Public Declare Function NDK_X12_OUT_FILE Lib "SFSDK.DLL" Alias "#5030" (ByVal zModelCode As Long, ByVal retType As Long, ByVal pData As Long, ByRef nLen As Long, ByVal openFile As Long) As Integer
  Public Declare Function NDK_X12_RUN_SCENARIO Lib "SFSDK.DLL" Alias "#5022" (ByVal zModelCode As Long, ByRef status As Long) As Integer

  ' X13ARIMA-SEATS Model
  Public Declare Function NDK_X13AS_OUT_FILE Lib "SFSDK.DLL" Alias "#5127" (ByVal zModelCode As Long, ByVal retType As Long, ByVal pData As Long, ByRef nLen As Long, ByVal openFile As Long) As Integer
  Public Declare Function NDK_X13_RUN_SPC_FILE Lib "SFSDK.DLL" Alias "#5026" (ByVal zModelCode As Long, ByRef status As Long) As Integer
#End If

' Declare the different models
Public Enum ARCHModelType
  GARCH = 1
  EGARCH = 2
  GARCHM = 3
End Enum

Public Enum InnovationType
  Gaussian = 1
  Student = 2
  GED = 3
End Enum

Public Enum GLM_LINKFUNC_TYPE
  GLM_IDENTITY = 1
  GLM_LOG = 2
  GLM_LOGIT = 3
  GLM_PROBIT = 4
  GLM_LOGLOG = 5
End Enum

Public Enum MODEL_COEFF_STATE_TYPE
  COEFF_GUESS = 1
  COEFF_CALIBRATE = 2
End Enum

Public Enum FIT_RETVAL_FUNC
  FIT_MEAN = 1
  FIT_STDEV = 2
  FIT_RESID = 3
  FIT_STD_RESID = 4
End Enum

Public Enum FORECAST_RETVAL_FUNC
  FORECAST_MEAN = 1
  FORECAST_STDEV = 2
  FORECAST_TS_STDEV = 3
  FORECAST_LL = 4
  FORECAST_UL = 5
End Enum

Public Function vb_HISTBINS(ByVal Data As String, ByVal method As HISTOGRAM_BINS_ALGO) As Integer
  Const sSOURCE As String = "vb_HISTBINS"
  
  Dim nMethod As Integer
  
  On Error GoTo ErrorHandler
  
  ' This is the default
  nMethod = 3
  Select Case (method)
    Case HIST_BINS_STURGES
      nMethod = 0
    Case HIST_BINS_SQUARE_ROOT
      nMethod = 1
    Case HIST_BINS_SCOTT_CHOICE
      nMethod = 2
    Case HIST_BINS_FREEDMAN_DIACONIS_CHOICE
      nMethod = 3
    Case HIST_BINS_LOSS_OPTIMAL
      nMethod = 4
  End Select
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_HISTBINS = Application.Run("HISTBINS", Range(Data), nMethod)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function



'
'   Returns an array of coefficients for ARMA Model.
'
Public Function vb_ARMAGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal P As Integer, ByVal Q As Integer)
  Const sSOURCE As String = "vb_ARMAGUESS"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_ARMAGUESS = Application.Run("ARMA_GUESS", Range(Data), nAscending, P, Q)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

'
'   Returns an array of coefficients for ARIMA Model.
'
Public Function vb_ARIMAGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal d As Double, ByVal phis As String, ByVal thetas As String)
  Const sSOURCE As String = "vb_ARIMAGUESS"
  Dim nAscending As Integer
  
  ' Use Any object to support zero order P and Q
  Dim phis_arg As Variant
  Dim thetas_arg As Variant
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  Set phis_arg = Nothing
  If Len(phis) > 0 Then
    Set phis_arg = Range(phis)
  Else
    phis_arg = Null
  End If
  
  
  If Len(thetas) > 0 Then
    Set thetas_arg = Range(thetas)
  Else
    thetas_arg = Null
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_ARIMAGUESS = Application.Run("ARIMA_PARAM", Range(Data), nAscending, d, 0#, 1#, phis_arg, thetas_arg, COEFF_GUESS, 100)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function


'
'   Returns an array of coefficients for ARIMA Model.
'
Public Function vb_ARIMACALIBRATE(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal mean As Double, ByVal sigma As Double, ByVal d As Integer, ByVal argPhis As String, ByVal argThetas As String, ByVal maxIter As Long)
  Const sSOURCE As String = "vb_ARIMACALIBRATE"
  Dim nAscending As Integer
  
  Dim phis As Variant
  Dim thetas As Variant
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  
  If argPhis <> vbNullString Then
    Set phis = Range(argPhis)
  Else
    phis = Null
  End If
  
  If argThetas <> vbNullString Then
    Set thetas = Range(argThetas)
  Else
    thetas = Null
  End If
  
  
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_ARIMACALIBRATE = Application.Run("ARIMA_PARAM", Range(Data), nAscending, d, mean, sigma, phis, thetas, COEFF_CALIBRATE, maxIter)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function


'
'   Returns an array of coefficients for SARIMA Model.
'
Public Function vb_SARIMAGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal argPhis As String, ByVal argThetas As String, ByVal d As Integer, ByVal argSPhis As String, ByVal argSThetas As String, ByVal SD As Integer, ByVal S As Integer)
  Const sSOURCE As String = "vb_SARIMAGUESS"
  
  Dim phis As Variant
  Dim thetas As Variant
  Dim sPhis As Variant
  Dim sThetas As Variant
  
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  If argPhis <> vbNullString Then
    Set phis = Range(argPhis)
  Else
    phis = Null
  End If
  
  If argSPhis <> vbNullString Then
    Set sPhis = Range(argSPhis)
  Else
    sPhis = Null
  End If
  
  
  If argThetas <> vbNullString Then
    Set thetas = Range(argThetas)
  Else
    thetas = Null
  End If
  
  If argSThetas <> vbNullString Then
    Set sThetas = Range(argSThetas)
  Else
    sThetas = Null
  End If
  
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_SARIMAGUESS = Application.Run("SARIMA_PARAM", _
                                      Range(Data), nAscending, _
                                      0, 1#, d, _
                                      phis, _
                                      thetas, _
                                      S, SD, _
                                      sPhis, _
                                      sThetas, _
                                      COEFF_GUESS, 100)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

'
'   Returns an array of coefficients for SARIMA Model.
'
Public Function vb_SARIMACALIBRATE(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal mean As Double, ByVal sigma As Double, ByVal argPhis As String, ByVal argThetas As String, ByVal d As Integer, ByVal argSPhis As String, ByVal argSThetas As String, ByVal SD As Integer, ByVal S As Integer, ByVal maxIter As Integer)
  Const sSOURCE As String = "vb_SARIMAGUESS"
  Dim nAscending As Integer
  
  Dim phis As Variant
  Dim thetas As Variant
  Dim sPhis As Variant
  Dim sThetas As Variant
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  If argPhis <> vbNullString Then
    Set phis = Range(argPhis)
  Else
    phis = Null
  End If
  
  If argSPhis <> vbNullString Then
    Set sPhis = Range(argSPhis)
  Else
    sPhis = Null
  End If
  
  
  If argThetas <> vbNullString Then
    Set thetas = Range(argThetas)
  Else
    thetas = Null
  End If
  
  If argSThetas <> vbNullString Then
    Set sThetas = Range(argSThetas)
  Else
    sThetas = Null
  End If
  
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_SARIMACALIBRATE = Application.Run("SARIMA_PARAM", Range(Data), nAscending, mean, sigma, d, phis, thetas, S, SD, sPhis, sThetas, COEFF_CALIBRATE, maxIter)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function



Public Function vb_SARIMAXPARAM(ByVal Data As String, ByVal Factors As String, ByVal ASCENDING As Boolean, _
                                ByVal argBetas As String, _
                                ByVal argMean As String, ByVal argSigma As String, _
                                ByVal argPhis As String, ByVal argThetas As String, _
                                ByVal d As Integer, _
                                ByVal argSPhis As String, ByVal argSThetas As String, _
                                ByVal SD As Integer, _
                                ByVal S As Integer, _
                                ByVal calibrate As MODEL_COEFF_STATE_TYPE, ByVal iterations As Integer)
  
  Const sSOURCE As String = "vb_SARIMAXPARAM"
  
  Dim mean As Variant
  Dim sigma As Variant
  
  Dim betas As Variant
  Dim phis As Variant
  Dim thetas As Variant
  Dim sPhis As Variant
  Dim sThetas As Variant

  
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  If argMean <> vbNullString Then
    Set mean = Range(argMean)
  Else
    mean = Null
  End If
  
  Set sigma = Range(argSigma)
  
  If argBetas <> vbNullString Then
    Set betas = Range(argBetas)
  Else
    betas = Null
  End If
  
  If argPhis <> vbNullString Then
    Set phis = Range(argPhis)
  Else
    phis = Null
  End If
  
  If argSPhis <> vbNullString Then
    Set sPhis = Range(argSPhis)
  Else
    sPhis = Null
  End If
  
  If argThetas <> vbNullString Then
    Set thetas = Range(argThetas)
  Else
    thetas = Null
  End If
  
  If argSThetas <> vbNullString Then
    Set sThetas = Range(argSThetas)
  Else
    sThetas = Null
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_SARIMAXPARAM = Application.Run("SARIMAX_PARAM", _
                                      Range(Data), Range(Factors), nAscending, _
                                      betas, _
                                      mean, sigma, d, _
                                      phis, _
                                      thetas, _
                                      S, SD, _
                                      sPhis, _
                                      sThetas, _
                                      calibrate, _
                                      iterations)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function


Public Function vb_ARMAXPARAM(ByVal Data As String, ByVal Factors As String, ByVal ASCENDING As Boolean, _
                                ByVal argBetas As String, ByVal argMean As String, ByVal argSigma As String, _
                                ByVal argPhis As String, ByVal argThetas As String, ByVal calibrate As MODEL_COEFF_STATE_TYPE, ByVal iterations As Integer)
  
  Const sSOURCE As String = "vb_ARMAXPARAM"
  
  Dim mean As Variant
  Dim sigma As Variant
  Dim betas As Variant
  Dim phis As Variant
  Dim thetas As Variant

  
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  If argMean <> vbNullString Then
    Set mean = Range(argMean)
  Else
    mean = Null
  End If
  
  sigma = Range(argSigma)
  
  If argBetas <> vbNullString Then
    Set betas = Range(argBetas)
  Else
    betas = Null
  End If
  
  If argPhis <> vbNullString Then
    Set phis = Range(argPhis)
  Else
    phis = Null
  End If
  
  If argThetas <> vbNullString Then
    Set thetas = Range(argThetas)
  Else
    thetas = Null
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_ARMAXPARAM = Application.Run("ARMAX_PARAM", _
                                      Range(Data), Range(Factors), nAscending, _
                                      betas, _
                                      mean, sigma, _
                                      phis, _
                                      thetas, _
                                      calibrate, _
                                      iterations)
  End If
Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function




' Returns an array of coefficients for the AIRLINE Model
Public Function vb_AIRLINEGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal S As Integer)
  Const sSOURCE As String = "vb_AIRLINEGUESS"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_AIRLINEGUESS = Application.Run("AIRLINE_GUESS", Range(Data), nAscending, S)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

Public Function vb_AIRLINECALIBRATE(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal mean As Double, ByVal sigma As Double, ByVal S As Integer, ByVal argsmallTheta As Double, ByVal argTheta As Double, ByVal maxIter As Long)
  Const sSOURCE As String = "vb_AIRLINECALIBRATE"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_AIRLINECALIBRATE = Application.Run("AIRLINE_PARAM", Range(Data), nAscending, mean, sigma, S, argsmallTheta, argTheta, COEFF_CALIBRATE, maxIter)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function




Public Function vb_GARCHGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal P As Integer, ByVal Q As Integer, ByVal nInnovationType)
  Const sSOURCE As String = "vb_GARCHGUESS"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_GARCHGUESS = Application.Run("GARCH_GUESS", Range(Data), nAscending, P, Q, nInnovationType)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

'Return the default values of the mode
Public Function vb_EGARCHGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal P As Integer, ByVal Q As Integer, ByVal nInnovationType)
  Const sSOURCE As String = "vb_EGARCHGUESS"
  Dim nAscending As Integer
    
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_EGARCHGUESS = Application.Run("EGARCH_GUESS", Range(Data), nAscending, P, Q, nInnovationType)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

' Return default values of the model
Public Function vb_GARCHMGUESS(ByVal Data As String, ByVal ASCENDING As Boolean, ByVal P As Integer, ByVal Q As Integer, ByVal nInnovationType)
  Const sSOURCE As String = "vb_GARCHMGUESS"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_GARCHMGUESS = Application.Run("GARCHM_GUESS", Range(Data), nAscending, P, Q, nInnovationType)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

' Return default values of the model
Public Function vb_GLM_GUESS(ByVal response As String, ByVal vars As String, ByVal phi As Double, ByVal Lvk As GLM_LINKFUNC_TYPE)
  Const sSOURCE As String = "vb_GLM_GUESS"
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_GLM_GUESS = Application.Run("GLM_GUESS", Range(response), Range(vars), phi, Lvk)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

' Return default values of the model
Public Function vb_GLM_CALIBRATE(ByVal response As String, ByVal vars As String, ByVal phi As Double, ByVal Lvk As GLM_LINKFUNC_TYPE, ByVal maxIter As Integer)
  Const sSOURCE As String = "vb_GLM_CALIBRATE"
  Dim initials()  As Double
  Dim i As Integer
  Dim nxVars As Integer
  Dim nAscending As Integer
  
  On Error GoTo ErrorHandler
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    nxVars = Range(vars).columns.count
  
    ReDim initials(1 To nxVars + 1)
    
    initials(1) = 0#
    For i = 1 To nxVars
      initials(i + 1) = 0#
    Next i
  
    vb_GLM_CALIBRATE = Application.Run("GLM_CALIBRATE", Range(response), Range(vars), initials, phi, Lvk, maxIter)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  
  Resume Cleanup
End Function


Public Function vb_getInstallationPath() As String
  Const sSOURCE As String = "vb_getInstallationPath"
  
    On Error GoTo NUMXL_ERRHDLR
    ' Use as the default return date
    vb_getInstallationPath = ""
    ' Check if NumXL is installed and loaded
    If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
        vb_getInstallationPath = Application.Run(PRODUCT_ADDIN_INFO_API, InstallationPathN)
    End If
    
NUMXL_ERRHDLR:
    Exit Function

End Function

' Returns an array of coefficients for the AIRLINE Model
Public Function vb_getDataPath() As String
  Const sSOURCE As String = "vb_getReleaseName"
  
    On Error GoTo NUMXL_ERRHDLR
    
    ' Use as the default return date
    vb_getDataPath = ""
    ' Check if NumXL is installed and loaded
    If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
      vb_getDataPath = Application.Run(PRODUCT_ADDIN_INFO_API, LogFilePathN)
    End If

NUMXL_ERRHDLR:
    Exit Function
End Function


' Returns an array of coefficients for the AIRLINE Model
Public Function vb_X11COMP(modelname As String, comp As Integer, nStep As Integer)
  Const sSOURCE As String = "vb_X11COMP"

  
  On Error GoTo ErrorHandler
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_X11COMP = Application.Run("X11COMP", modelname, comp, nStep)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function



' Returns an array of coefficients for the AIRLINE Model
Public Function vb_X12ARIMA_PROP(modelname As String, propId As Integer)
  Const sSOURCE As String = "vb_X12ARIMA_PROP"

  
  On Error GoTo ErrorHandler
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_X12ARIMA_PROP = Application.Run("X12ARIMA_PROP", modelname, propId)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function



'Return the default values of the mode
Public Function vb_REPLACE(ByVal Str As String, ByVal Token As String, ByVal zValue As String, Optional ByVal isGlobal As Boolean = True, Optional ByVal IgnoreCase As Boolean = True) As String
  Const sSOURCE As String = "vb_REPLACE"
  Dim nGlobal As Integer
  Dim nIgnoreCase As Integer
  
  On Error GoTo ErrorHandler
  
  nGlobal = 1
  If isGlobal = False Then
     nGlobal = 0
  End If
  
  nIgnoreCase = 1
  If IgnoreCase = False Then
     nIgnoreCase = 0
  End If
  
  
  ' Check if NumXL is installed and loaded
  If isAddinInstalled(PRODUCT_NAME, PRODUCT_UI_NAME) Then
    vb_REPLACE = Application.Run("NxReplace", Str, Token, zValue, nIgnoreCase, nGlobal)
  End If
Cleanup:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function


Attribute VB_Name = "NormalityTestFrm"
Attribute VB_Base = "0{8E99F5FD-A208-4BC3-A260-9B00BB77B22B}{CBF01F72-270E-4A98-9CDE-34A2B75E245D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: NormalityTestFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/NormalityTestFrm.frm $
'
Private Const msMODULE As String = "USERFORM:NormalityTest"
Private Const zenSlugId As String = "articles/215071646"

Private userOptions As NormalityTestUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID, zenSlugId)
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    '"Enter a valid time series range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
  
  ' Check if all the values in the input Series are Numaric or #N/A
  If Not vb_IsNum(inRange, NA) Then
    '"The times series values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR)
    Exit Sub
  End If
  
  Set myRange = Range(RefOutput)
  If myRange Is Nothing Then
    '"Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)
    Exit Sub
  End If
  
  If Not chkSignificanceLevel(RefEditSignificanceLevel.value) Then
    '"Only numbers between 0 and 100% are allowed."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_INVALID_ALPHA_VALUE_ERROR)
    RefEditSignificanceLevel.value = vbNullString
    Exit Sub
  End If
  
  
  If Not RefEditSignificanceLevel.enabled Then
    Exit Sub
  End If
  
  '"Normality Test Calculation"
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_STATUSBAR_CALCULATION_MSG)
  
  Call userOptions.printNormalityTestOutput(myRange, myGeneralUO, myMissingValueUO)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  
  RefEditSignificanceLevel.value = myGeneralUO.significance
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  
  chkOptionJarqueBera.value = userOptions.JB
  chkOptionShapiroWilk.value = userOptions.ShapiroWilk
  chkOptionDoornick.value = userOptions.Doornick
  
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Function chkSignificanceLevel(alpha As String) As Boolean
  chkSignificanceLevel = isAlphaValid(alpha)
End Function


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim st_sel As Boolean
  
  ' Do we have input data
  Dim dataAvailable As Boolean
  
  ' Do we have a valid alpha
  Dim valid_alpha As Boolean
  
  valid_alpha = chkSignificanceLevel(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Tab controls
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable

  ' No alpha, no test
  If Not valid_alpha Then
    optMissingRemove.enabled = False
    optMissingEstimate.enabled = False
    chkOptionJarqueBera.enabled = False
    chkOptionShapiroWilk.enabled = False
    chkOptionDoornick.enabled = False
  Else
    optMissingRemove.enabled = dataAvailable
    optMissingEstimate.enabled = dataAvailable
    chkOptionJarqueBera.enabled = dataAvailable
    chkOptionShapiroWilk.enabled = dataAvailable
    chkOptionDoornick.enabled = dataAvailable
  End If
  
  ' Enable or disable the missing values estimation method
  optMSEstimateAvg.enabled = optMissingEstimate.enabled And optMissingEstimate.value = True
  optMSEstimateMedian.enabled = optMSEstimateAvg.enabled
  
  
  st_sel = True
  
  RefEditSignificanceLevel.enabled = dataAvailable
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
  
 
  ready = False
  
  If st_sel Then
      If Utilities.isCellRangeValid(RefOutput.value) Then
          If Utilities.isCellRangeValid(RefInputArray.value) Then
            If chkOptionJarqueBera.value Or chkOptionShapiroWilk.value Or chkOptionDoornick.value Then
              ready = True
            End If
          End If
      End If
  End If

  ' Alpha must be correct as well
  If st_sel Then
    st_sel = valid_alpha
  End If


  cmdOK.enabled = ready
End Sub


Private Sub chkOptionDoornick_Click()
  userOptions.Doornick = chkOptionDoornick.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionJarqueBera_Click()
  userOptions.JB = chkOptionJarqueBera.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionShapiroWilk_Click()
  userOptions.ShapiroWilk = chkOptionShapiroWilk.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Activate()
  Const sSOURCE As String = "UserForm_Activate"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_PG_OPTIONS_HELPTIP)
  
  chkOptionJarqueBera.Caption = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_JARQUE_BERRA_CAPTION)
  chkOptionJarqueBera.ControlTipText = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_JARQUE_BERRA_HELPTIP)

  chkOptionShapiroWilk.Caption = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_CAPTION)
  chkOptionShapiroWilk.ControlTipText = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_HELPTIP)

  chkOptionDoornick.Caption = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_DOORNICK_CHI_CAPTION)
  chkOptionDoornick.ControlTipText = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_DOORNICK_CHI_HELPTIP)

  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  ' ResetToDefault
  Me.MultiPage1.Pages.Item("MainPg").enabled = 1

End Sub

Private Sub UserForm_Initialize()
  
  On Error GoTo ErrHdler
    
    ' Select the first Item as the default
    Set userOptions = New NormalityTestUO
    Set myGeneralUO = New GeneralUO
    Set myMissingValueUO = New MissingValueUO
    
    Call ResetToDefault
    Call validateForm
    
    'set focus to 1st tab
    Me.MultiPage1.value = 0
    RefInputArray.SetFocus
    
ErrHdler:
    Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub
Attribute VB_Name = "NormalityTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16099 $
'  $Date: 2017-01-06 09:18:14 -0600 (Fri, 06 Jan 2017) $
'  $Author: mohamad $
'  $Id: NormalityTestUO.cls 16099 2017-01-06 15:18:14Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/NormalityTestUO.cls $
'
Private Const msMODULE As String = "CLASS:NormalityTestUO"
  

Private myJarqueBerra As Boolean
Private myShapiroWilk As Boolean
Private mySDoornickChiSquared As Boolean

Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

Public Property Get JB() As Boolean
    JB = myJarqueBerra
End Property

Public Property Let JB(ByVal vNewValue As Boolean)
  myJarqueBerra = vNewValue
End Property

Public Property Get ShapiroWilk() As Boolean
    ShapiroWilk = myShapiroWilk
End Property

Public Property Let ShapiroWilk(ByVal vNewValue As Boolean)
  myShapiroWilk = vNewValue
End Property

Public Property Get Doornick() As Boolean
    Doornick = mySDoornickChiSquared
End Property

Public Property Let Doornick(ByVal vNewValue As Boolean)
  mySDoornickChiSquared = vNewValue
End Property



'ResetToDefault

Public Sub ResetToDefault()
  myJarqueBerra = True
  myShapiroWilk = True
  mySDoornickChiSquared = True
End Sub


' Print the Normality Table below
Public Sub printNormalityTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printNormalityTestOutput"

  Dim oldSignificancelevel As String
  Dim worksheetname As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim szTemp As String
  
  
  ' Watch out for Locality differences
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlRight
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_OUTPUT_TABLE_HEADER)
  End With

  myRange.Cells(1, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER) '"Score"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) 'HYPOTHESIS_TEST_SCORE_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) 'HYPOTHESIS_TEST_SCORE_NOTE
    End If
  End With


  myRange.Cells(1, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) ' "C.V."
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    End If
  End With
  
  myRange.Cells(1, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE) ' HYPOTHESIS_TEST_PV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE) ' HYPOTHESIS_TEST_PV_NOTE
    End If
  End With

  myRange.Cells(1, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PASS_HEADER) ' "Pass?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_OUTPUT_PASS_TEST_NOTE) ' NORMALITY_TEST_PASS_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_OUTPUT_PASS_TEST_NOTE) ' NORMALITY_TEST_PASS_NOTE
    End If
  End With

  myRange.Cells(1, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE) ' HYPOTHESIS_TEST_ALPHA_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE) ' HYPOTHESIS_TEST_ALPHA_NOTE
    End If
  End With


  ' Set the borderline
  Range(myRange.Cells(1, 1), myRange.Cells(1, 5)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With


  i = 1
  If Me.JB = True Then
      myRange.Cells(1 + i, 1).Select
      With Selection
        .HorizontalAlignment = xlRight
        .Font.Bold = True
        .value = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_JARQUE_BERRA_BRIEF) '"Jarque-Bera"
      End With

      myRange.Cells(1 + i, 2).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 1, 2)"
        .NumberFormat = "#0.00"
      End With
      
      myRange.Cells(1 + i, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 1, 3," & myRange.Cells(1, 6).Address() & ")"
        .NumberFormat = "#0.00"
      End With
      
      
      myRange.Cells(1 + i, 4).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 1)"
        .NumberFormat = "#0.0%"
      End With
      
      
      
      szTemp = "=IF(" & myRange.Cells(1 + i, 4).Address(RowAbsolute:=False) & ">" & myRange.Cells(1, 6).Address() & ", TRUE, FALSE)"
      
      myRange.Cells(1 + i, 5).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = szTemp
      End With

    i = i + 1
  End If


  If Me.ShapiroWilk = True Then
      myRange.Cells(1 + i, 1).Select
      With Selection
        .HorizontalAlignment = xlRight
        .Font.Bold = True
        .value = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_BRIEF) '"Shapiro-Wilk"
      End With

      myRange.Cells(1 + i, 2).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 2, 2)"
        .NumberFormat = "#0.00"
      End With


      myRange.Cells(1 + i, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 2, 3," & myRange.Cells(1, 6).Address() & ")"
        .NumberFormat = "#0.00"
      End With
      
      myRange.Cells(1 + i, 4).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 2, 1)"
        .NumberFormat = "#0.0%"
      End With



      szTemp = "=IF(" & myRange.Cells(1 + i, 4).Address(RowAbsolute:=False) & ">" & myRange.Cells(1, 6).Address() & ", TRUE, FALSE)"

      myRange.Cells(1 + i, 5).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = szTemp
      End With
      i = i + 1
  End If

  
  If Me.Doornick = True Then
      myRange.Cells(1 + i, 1).Select
      With Selection
        .HorizontalAlignment = xlRight
        .Font.Bold = True
        .value = MSGAPI.getLocaleString(IDS_UI_NORMALITY_TEST_DOORNICK_CHI_BRIEF) ' "Doornick Chi-Square"
      End With

      myRange.Cells(1 + i, 2).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 3, 2)"
        .NumberFormat = "#0.00"
      End With


      myRange.Cells(1 + i, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 3, 3," & myRange.Cells(1, 6).Address() & ")"
        .NumberFormat = "#0.00"
      End With
      
      
      myRange.Cells(1 + i, 4).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NormalityTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & ", 3, 1)"
        .NumberFormat = "#0.0%"
      End With

      szTemp = "=IF(" & myRange.Cells(1 + i, 4).Address(RowAbsolute:=False) & ">" & myRange.Cells(1, 6).Address() & ", TRUE, FALSE)"

      myRange.Cells(1 + i, 5).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = szTemp
      End With

    i = i + 1
  End If


SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub

Attribute VB_Name = "PCAForm"
Attribute VB_Base = "0{E6E294C8-3B96-4502-BB96-2A0B8151043A}{6DB42D77-023C-46FB-92EC-1840BA3B1BF7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: PCAForm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/PCAForm.frm $
'
Private Const msMODULE As String = "USERFORM:PCA"
Private Const zenSlugId As String = "articles/216532603"

'PrincipalComponentUI
Private userOptions As PrincipalComponentUI
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub chkOptionPCALoading_Click()
  userOptions.PCA_LOADING = chkOptionPCALoading.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionPCAPropotion_Click()
  userOptions.PCA_PROPOTION = chkOptionPCAPropotion.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionPCAValues_Click()
  userOptions.PCA_VALUES = chkOptionPCAValues.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionPCAVariance_Click()
  userOptions.PCA_VARIANCE = chkOptionPCAVariance.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionStandardize_Click()
  userOptions.STANDARDIZED = chkOptionStandardize.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionsVarValues_Click()
  userOptions.VAR_VALUES = chkOptionsVarValues.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkPCAOutput_Click()
  userOptions.PCA_OUTPUT = chkPCAOutput.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkVarOutput_Click()
  userOptions.VAR_OUTPUT = chkVarOutput.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxPCS_Spinup()

  userOptions.VAR_MAXPCS = userOptions.VAR_MAXPCS + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxPCS.value = userOptions.VAR_MAXPCS
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxPCS_Spindown()

  If userOptions.VAR_MAXPCS > 1 Then
    userOptions.VAR_MAXPCS = userOptions.VAR_MAXPCS - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxPCS.value = userOptions.VAR_MAXPCS
      callValidateForm = True
    Else
      txtMaxPCS.value = userOptions.VAR_MAXPCS
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub txtMaxPCS_Change()
  If IsNumeric(txtMaxPCS.value) And txtMaxPCS.value > 0 Then
    userOptions.VAR_MAXPCS = txtMaxPCS.value
  Else
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxPCS.value = userOptions.VAR_MAXPCS
      callValidateForm = True
    Else
      txtMaxPCS.value = userOptions.VAR_MAXPCS
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PG_GNRL_HELPTIP)
    
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  GroupByTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_CAPTION)
  GroupByTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_HELPTIP)

  optGroupByColumns.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_CAPTION)
  optGroupByColumns.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_HELPTIP)
  
  optGroupByRows.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_CAPTION)
  optGroupByRows.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_HELPTIP)
  
  MaskTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION)
  MaskTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  RefMaskArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PG_OPTIONS_HELPTIP)
    
  chkOptionStandardize.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_STANDARDIZE_INPUT_LABEL_CAPTION)
  chkOptionStandardize.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_STANDARDIZE_INPUT_LABEL_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  PrincialComponentOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PRINCIPAL_COMPONENT_LABEL_CAPTION)
  PrincialComponentOptionFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PRINCIPAL_COMPONENT_LABEL_HELPTIP)
  
  chkPCAOutput.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PC_SELECTION_LABEL_CAPTION)
  chkPCAOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PC_SELECTION_LABEL_HELPTIP)
  
  chkOptionPCAVariance.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VARIANCE_LABEL_CAPTION)
  chkOptionPCAVariance.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VARIANCE_LABEL_HELPTIP)
  
  chkOptionPCAPropotion.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VARIANCE_PCT_LABEL_CAPTION)
  chkOptionPCAPropotion.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VARIANCE_PCT_LABEL_HELPTIP)
  
  chkOptionPCALoading.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PC_LOADING_LABEL_CAPTION)
  chkOptionPCALoading.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PC_LOADING_LABEL_HELPTIP)
  
  chkOptionPCAValues.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VALUES_LABEL_CAPTION)
  chkOptionPCAValues.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VALUES_LABEL_HELPTIP)
    
  InputVariablesFrame.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FRAME_LABEL_CAPTION)
  InputVariablesFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FRAME_LABEL_HELPTIP)

  chkVarOutput.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_SELECTION_LABEL_CAPTION)
  chkVarOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_SELECTION_LABEL_HELPTIP)
  
  NumberOfPCIncludedLabel.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_NUM_PCS_LABEL_CAPTION)
  NumberOfPCIncludedLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_NUM_PCS_LABEL_HELPTIP)
  txtMaxPCS.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_NUM_PCS_LABEL_HELPTIP)
  
  chkOptionFinalCommunality.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_CAPTION)
  chkOptionFinalCommunality.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_HELPTIP)

  chkOptionVarLoadings.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_LOADING_LABEL_CAPTION)
  chkOptionVarLoadings.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_LOADING_LABEL_HELPTIP)

  chkOptionsVarValues.Caption = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_VALUES_LABEL_CAPTION)
  chkOptionsVarValues.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_VALUES_LABEL_HELPTIP)
    
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
    
  ' Select the first Item as the default
  Set userOptions = New PrincipalComponentUI
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
    
  Call ResetToDefault
  
  Call validateForm
    
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  RefEditSignificanceLevel.value = myGeneralUO.significance
  RefMaskArray.value = myGeneralUO.INPUT_MASK
  
  'Standardize Input data
  chkOptionStandardize.value = userOptions.STANDARDIZED
  
  'Missing Values section
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  ' Options Section
  chkPCAOutput.value = userOptions.PCA_OUTPUT
  chkOptionPCAVariance.value = userOptions.PCA_VARIANCE
  chkOptionPCAPropotion.value = userOptions.PCA_PROPOTION
  chkOptionPCALoading.value = userOptions.PCA_LOADING
  chkOptionPCAValues.value = userOptions.PCA_VALUES
  
  
  chkVarOutput.value = userOptions.VAR_OUTPUT
  txtMaxPCS.value = userOptions.VAR_MAXPCS
  chkOptionFinalCommunality.value = userOptions.VAR_COMMUNALITY
  chkOptionVarLoadings.value = userOptions.VAR_LOADING
  chkOptionsVarValues.value = userOptions.VAR_VALUES
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  chkOptionStandardize.enabled = dataAvailable

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  RefEditSignificanceLevel.enabled = False
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
  chkOptionPCAVariance.enabled = userOptions.PCA_OUTPUT
  chkOptionPCAPropotion.enabled = userOptions.PCA_OUTPUT
  chkOptionPCALoading.enabled = userOptions.PCA_OUTPUT
  chkOptionPCAValues.enabled = userOptions.PCA_OUTPUT
    
  SpinButtonMaxPCS.enabled = userOptions.VAR_OUTPUT
  txtMaxPCS.enabled = userOptions.VAR_OUTPUT
  chkOptionFinalCommunality.enabled = userOptions.VAR_OUTPUT
  chkOptionVarLoadings.enabled = userOptions.VAR_OUTPUT
  chkOptionsVarValues.enabled = userOptions.VAR_OUTPUT
    
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        ready = valid_alpha
      End If
  End If
    
  cmdOK.enabled = ready And (userOptions.VAR_OUTPUT Or userOptions.PCA_OUTPUT) And myMissingValueUO.isInputValid(RefInputArray.value)
  
  
End Sub


Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

'
Private Sub RefMaskArray_Change()
  myGeneralUO.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim myXRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
    ' Basic check for X1 range
  Set myXRange = Range(myGeneralUO.INPUT_DATA_NO_LABELS)
  If myXRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INVALID_FACTORS_RANGE_ERROR_MSG) ' "Invalid/Missing cells range for the explanatory variables (X)"
    Exit Sub
  End If
  
  If myGeneralUO.GROUPBY_COLUMNS Then
    If myXRange.columns.count < 2 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_2MORE_ERROR_MSG) ' "Invalid  cells range for the explanatory variables (X)\n The X-range must have two or more variables"
      Exit Sub
    End If
    
    If myXRange.columns.count >= myXRange.rows.count Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_OBS_ERROR_MSG) ' "Invalid  cells range for the explanatory variables (X).\ The number of rows (observations) must be greater than number of columns (variables)"
      Exit Sub
    End If
  Else
    If myXRange.rows.count < 2 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_2MORE_ERROR_MSG) ' "Invalid  cells range for the explanatory variables (X)\n The X-range must have two or more variables"
      Exit Sub
    End If
    
    If myXRange.rows.count >= myXRange.columns.count Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X_COL_OBS_LESS_VAR_INPUT_ERROR) ' "Invalid  cells range for the explanatory variables (X).\ The number of columns (observations) must be greater than number of rows (variables)"
      Exit Sub
    End If
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_NOT_NUMBERS_ERROR_MSG) ' "Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    Exit Sub
  End If
    
  Set myRange = Range(RefOutput)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_INVALID_ALPHA_VALUE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_PCA_STATUSBAR_CALCULATION_MSG) ' "Principal Component Analysis (PCA) Calculation"
  
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
  mbOK = True
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Attribute VB_Name = "PeriodgramFrm"
Attribute VB_Base = "0{E5A2DF1B-FEC9-4988-9370-C0C22F1D307B}{8C21C44E-9B5B-4617-9D4D-AC3E9D5099CE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: PeriodgramFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/PeriodgramFrm.frm $
'
Private Const msMODULE As String = "USERFORM:Periodgram"
Private Const zenSlugId As String = "articles/207842593"

Private userOptions As PeriodogramUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub chkPlotPeriodogram_Click()
  userOptions.PLOT_ENABLED = chkPlotPeriodogram.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPreProcAuto_Click()
  userOptions.PREPROC_SELECT = PREPROC_AUTO
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub optPreProcDetrend_Click()
  userOptions.PREPROC_SELECT = PREPROC_DETREND
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPreProcDifference_Click()
  userOptions.PREPROC_SELECT = PREPROC_DIFFERENCE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPreProcNone_Click()
  userOptions.PREPROC_SELECT = PREPROC_NONE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = RefEditSignificanceLevel.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub




Private Sub txtMaxComps_Change()
  userOptions.MAX_COMPONENTS = txtMaxComps.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxComp_Spinup()

  userOptions.MAX_COMPONENTS = userOptions.MAX_COMPONENTS + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxComps.value = userOptions.MAX_COMPONENTS
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxComp_Spindown()

  If userOptions.MAX_COMPONENTS > 1 Then
    userOptions.MAX_COMPONENTS = userOptions.MAX_COMPONENTS - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxComps.value = userOptions.MAX_COMPONENTS
      callValidateForm = True
    Else
      txtMaxComps.value = userOptions.MAX_COMPONENTS
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
      'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)

  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_PG_OPTIONS_HELPTIP)
    
  DataTreatmentFrame.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_FRAME_CAPTION)
  DataTreatmentFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_FRAME_HELPTIP)
    
  optPreProcAuto.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_AUTO_CAPTION)
  optPreProcAuto.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_AUTO_HELPTIP)

  optPreProcDetrend.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DETREND_CAPTION)
  optPreProcDetrend.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DETREND_HELPTIP)

  optPreProcDifference.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DIFFERENCE_CAPTION)
  optPreProcDifference.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DIFFERENCE_HELPTIP)

  optPreProcNone.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_CAPTION)
  optPreProcNone.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_HELPTIP)

  optPreProcNone.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_CAPTION)
  optPreProcNone.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_HELPTIP)

  LabelSignificanceLevel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  LabelSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  chkPlotPeriodogram.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_PLOT_PERIODOGRAM_CAPTION)
  chkPlotPeriodogram.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_PLOT_PERIODOGRAM_HELPTIP)
  
  MaxComponentOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_MAX_COMPONENTS_LABEL_CAPTION)
  MaxComponentOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_MAX_COMPONENTS_LABEL_HELPTIP)
  txtMaxComps.ControlTipText = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OPTIONS_MAX_COMPONENTS_LABEL_HELPTIP)

  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)


    
  ' Select the first Item as the default
  Set userOptions = New PeriodogramUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myMissingValueUO = Nothing
  
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Keep the input data range
  szInput = userOptions.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  userOptions.INPUT_RANGE = szInput
  
  'cmbBinsAlgo.Value = userOptions.BINS_ALGO
  RefOutput.value = userOptions.OUTPUT_TABLE

  chkAscending.value = userOptions.ASCENDING
  
  optPreProcNone.value = (userOptions.PREPROC_SELECT = PREPROC_NONE)
  optPreProcAuto.value = (userOptions.PREPROC_SELECT = PREPROC_AUTO)
  optPreProcDetrend.value = (userOptions.PREPROC_SELECT = PREPROC_DETREND)
  optPreProcDifference.value = (userOptions.PREPROC_SELECT = PREPROC_DIFFERENCE)
  RefEditSignificanceLevel.value = userOptions.significance
  chkPlotPeriodogram.value = userOptions.PLOT_ENABLED
  txtMaxComps.value = userOptions.MAX_COMPONENTS
  
  
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)

  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  RefOutput.enabled = dataAvailable
    
  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  RefEditSignificanceLevel.enabled = (userOptions.PREPROC_SELECT = PREPROC_AUTO)
  LabelSignificanceLevel.enabled = (userOptions.PREPROC_SELECT = PREPROC_AUTO)
    
  MVReplaceFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  MVINTERPOLATEFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
    
  cmdOK.enabled = dataAvailable And Utilities.isCellRangeValid(RefOutput.value)
End Sub

Private Sub chkAscending_Click()
  userOptions.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  
  If callValidateForm = True Then
    If Utilities.isCellRangeValid(RefInputArray.value) Then
      ' Update the default Max Components
      callValidateForm = False
      userOptions.MAX_COMPONENTS = Range(RefInputArray.value).rows.count * Range(RefInputArray.value).columns.count / 2
      txtMaxComps.value = userOptions.MAX_COMPONENTS
      callValidateForm = True
    End If
    
    Call validateForm
  Else
    txtMaxComps.value = userOptions.MAX_COMPONENTS
  End If
End Sub

Private Sub RefOutput_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefOutput.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
        Exit Sub
      Else
        Set myRange = Range(RefOutput)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
          Exit Sub
        Else
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_STATUSBAR_CALCULATION_MSG)
          
          Call userOptions.printOutput(myRange, myMissingValueUO)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_PERIODGRM_PREPARE_ERROR_MSG), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "PeriodogramUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: PeriodogramUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/PeriodogramUO.cls $
'
Private Const msMODULE As String = "CLASS:PeriodogramUO"

Public Enum PREPROCESS_TRANSFORM_TYPE
  PREPROC_NONE = 1
  PREPROC_DETREND = 2
  PREPROC_DIFFERENCE = 3
  PREPROC_AUTO = 4
End Enum


Private myInputData As String
Private myAscending As Boolean
Private myOutputTableRange As String
Private myOutputGraphRange As String
Private myPreprocSelection As PREPROCESS_TRANSFORM_TYPE
Private mySignificanceLevel As String
Private myPlotSelected As Boolean
Private myMaxComponents As Long


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


Public Sub ResetToDefault()
  myOutputTableRange = Utilities.AddressEx(ActiveCell)
  myOutputGraphRange = Utilities.AddressEx(ActiveCell.offset(0, 4))
  
  myInputData = ""
  myAscending = True
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  
  myPreprocSelection = PREPROC_AUTO
  myPlotSelected = True
  myMaxComponents = 10
End Sub

Public Property Get PREPROC_SELECT() As PREPROCESS_TRANSFORM_TYPE
  PREPROC_SELECT = myPreprocSelection
End Property

Public Property Let PREPROC_SELECT(ByVal vNewValue As PREPROCESS_TRANSFORM_TYPE)
  myPreprocSelection = vNewValue
End Property

Public Property Get significance() As String
    significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Function LocalFreeSignificane() As String
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  
  alphaLevel = getAlphaValue(mySignificanceLevel)
  LocalFreeSignificane = IIf(alphaLevel > 0, sNumToUS(alphaLevel), mySignificanceLevel)
End Function


Public Property Get PLOT_ENABLED() As Boolean
  PLOT_ENABLED = myPlotSelected
End Property

Public Property Let PLOT_ENABLED(ByVal vNewValue As Boolean)
  myPlotSelected = vNewValue
End Property

Public Property Get MAX_COMPONENTS() As Long
  MAX_COMPONENTS = myMaxComponents
End Property

Public Property Let MAX_COMPONENTS(ByVal vNewValue As Long)
  myMaxComponents = vNewValue
End Property

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property

Public Property Let ASCENDING(ByVal vNewValue As Boolean)
  myAscending = vNewValue
End Property

Public Function INPUT_RANGE_NAN(ByRef myMissingValueUO As MissingValueUO) As String
  Const sSOURCE As String = "procInputRange"
  If Len(myInputData) > 0 Then
    INPUT_RANGE_NAN = myMissingValueUO.procInputRange(myInputData, myAscending)
  Else
    INPUT_RANGE_NAN = myInputData
  End If
End Function

Public Property Get DATA_ORDER() As Integer
    DATA_ORDER = 1
    If myAscending = False Then
      DATA_ORDER = 0
    End If
End Property

Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputTableRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputTableRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property



Public Sub printOutput(ByRef myRange As Range, ByRef myMissingValueUO As MissingValueUO)
  Const sSOURCE As String = "printOutput"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim oldSignificancelevel As String
  Dim Labels(1 To 5) As String
  Dim CommentLabels(1 To 5) As String
  Dim szTemp As String
  Dim i As Long
  
  oldSignificancelevel = LocalFreeSignificane
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_TBL_HEADER) '  "Periodogram Table"
  End With
  
  ' Draw a Borders
  Range(myRange.Cells(2, 1), myRange.Cells(2, 2)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
  
  Labels(1) = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_TBL_COMP_CAPTION) ' "Comp"
  CommentLabels(1) = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_TBL_COMP_NOTE)
  
  Labels(2) = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_TBL_VALUE_CAPTION) ' "Value"
  CommentLabels(2) = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_TBL_VALUE_NOTE)
  
  ' print the labels now
  For i = 1 To 2
    myRange.Cells(2, i).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .value = Labels(i)
      If .Comment Is Nothing Then
        .AddComment CommentLabels(i)
      Else
        .Comment.Text Text:=CommentLabels(i)
      End If
    End With
  Next i


  szTemp = "=Periodogram(" & INPUT_RANGE_NAN(myMissingValueUO) & "," & DATA_ORDER & "," & Me.PREPROC_SELECT & "," & oldSignificancelevel & ")"
  For i = 0 To Me.MAX_COMPONENTS
    myRange.Cells(3 + i, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .value = i
    End With
  Next i

  With Range(myRange(3, 2), myRange(3 + Me.MAX_COMPONENTS, 2))
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .FormulaArray = szTemp
    .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
  End With

GraphHere:
  If Not Me.PLOT_ENABLED Then
    GoTo SubExit
  End If
  
  ' Now, Let's create the scatter plot
  Dim KDEPlotRange As Object
  
  Set KDEPlotRange = Range(Range(Me.OUTPUT_GRAPH).Cells(1, 1), Range(Me.OUTPUT_GRAPH).Cells(14, 7))
  
  
  ' Plot the Periodogram here
  KDEPlotRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=KDEPlotRange.Left, Width:=KDEPlotRange.Width, Top:=KDEPlotRange.Top, Height:=KDEPlotRange.Height)
    .Chart.ChartType = xlXYScatterLines
    .Chart.SetSourceData source:=Range(myRange.Cells(3, 1), myRange.Cells(3 + Me.MAX_COMPONENTS, 2))
    .Chart.HasTitle = True
          
    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False
    
    .Chart.ChartTitle.Select
    With Selection
      .Text = MSGAPI.getLocaleString(IDS_UI_PERIODGRM_OUTPUT_PLOT_HEADER) ' "Periodogram"
      With Selection.Format.TextFrame2.TextRange.Font
        .BaselineOffset = 0
        .size = 12
      End With
    End With

    With .Chart.plotArea
      With .Border
        .ColorIndex = 16
        .Weight = xlThin
        .LineStyle = xlContinuous
      End With
      .Interior.ColorIndex = xlNone
    End With

    .Chart.SeriesCollection(1).Select
    With Selection
      ' .Smooth = True
      With Selection.Format.Line
        .visible = msoTrue
        .Weight = 1.5
      End With
    End With
    
    ' Make the X-axis writing below axis
    .Chart.Axes(xlCategory).Select
    Selection.MinimumScale = 0#
    Selection.MaximumScale = Me.MAX_COMPONENTS
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    
    ' Make the Y-axis writing on the left
    .Chart.Axes(xlValue).Select
    Selection.MinimumScale = 0#
    Selection.TickLabels.NumberFormat = myRange.Cells(3, 1).NumberFormat
    Selection.TickLabelPosition = xlLow
    Selection.Border.LineStyle = xlNone
    
    ' Remove the legends
    .Chart.Legend.Select
    Selection.Delete
    
    ' Remove Major Gridlines
    .Chart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete
  End With

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  Exit Sub
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub

Attribute VB_Name = "PrincipalComponentUI"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16099 $
'  $Date: 2017-01-06 09:18:14 -0600 (Fri, 06 Jan 2017) $
'  $Author: mohamad $
'  $Id: PrincipalComponentUI.cls 16099 2017-01-06 15:18:14Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/PrincipalComponentUI.cls $
'
Private Const msMODULE As String = "CLASS:PrincipalComponentUI"
  
Private myInputStandardized As Boolean

Private myPCSOutput As Boolean
Private myPCSVariance As Boolean
Private myPCSProportion As Boolean
Private myPCSLoading As Boolean
Private myPCSValues As Boolean

Private myVarOutput As Boolean
Private myVarMaxPCS As Long
Private myVarFinalCommunality As Boolean
Private myVarLoading As Boolean
Private myVarValues As Boolean

Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()
  myInputStandardized = True
  
  myPCSOutput = True
  myPCSVariance = True
  myPCSProportion = True
  myPCSLoading = True
  myPCSValues = False
  
  ' fitted variable estimation
  myVarOutput = False
  myVarMaxPCS = 1
  myVarFinalCommunality = True
  myVarLoading = True
  myVarValues = False
End Sub

Public Property Get STANDARDIZED() As Boolean
    STANDARDIZED = myInputStandardized
End Property

Public Property Let STANDARDIZED(ByVal vNewValue As Boolean)
  myInputStandardized = vNewValue
End Property



Public Property Get VAR_OUTPUT() As Boolean
    VAR_OUTPUT = myVarOutput
End Property

Public Property Let VAR_OUTPUT(ByVal vNewValue As Boolean)
  myVarOutput = vNewValue
End Property

Public Property Get VAR_MAXPCS() As Long
    VAR_MAXPCS = myVarMaxPCS
End Property

Public Property Let VAR_MAXPCS(ByVal vNewValue As Long)
  myVarMaxPCS = vNewValue
End Property

Public Property Get VAR_COMMUNALITY() As Boolean
    VAR_COMMUNALITY = myVarFinalCommunality
End Property

Public Property Let VAR_COMMUNALITY(ByVal vNewValue As Boolean)
  myVarFinalCommunality = vNewValue
End Property

Public Property Get VAR_LOADING() As Boolean
    VAR_LOADING = myVarLoading
End Property

Public Property Let VAR_LOADING(ByVal vNewValue As Boolean)
  myVarLoading = vNewValue
End Property

Public Property Get VAR_VALUES() As Boolean
    VAR_VALUES = myVarValues
End Property

Public Property Let VAR_VALUES(ByVal vNewValue As Boolean)
  myVarValues = vNewValue
End Property


Public Property Get PCA_OUTPUT() As Boolean
    PCA_OUTPUT = myPCSOutput
End Property

Public Property Let PCA_OUTPUT(ByVal vNewValue As Boolean)
  myPCSOutput = vNewValue
End Property

Public Property Get PCA_VARIANCE() As Boolean
    PCA_VARIANCE = myPCSVariance
End Property

Public Property Let PCA_VARIANCE(ByVal vNewValue As Boolean)
  myPCSVariance = vNewValue
End Property

Public Property Get PCA_PROPOTION() As Boolean
    PCA_PROPOTION = myPCSProportion
End Property

Public Property Let PCA_PROPOTION(ByVal vNewValue As Boolean)
  myPCSProportion = vNewValue
End Property

Public Property Get PCA_LOADING() As Boolean
    PCA_LOADING = myPCSLoading
End Property

Public Property Let PCA_LOADING(ByVal vNewValue As Boolean)
  myPCSLoading = vNewValue
End Property

Public Property Get PCA_VALUES() As Boolean
    PCA_VALUES = myPCSValues
End Property

Public Property Let PCA_VALUES(ByVal vNewValue As Boolean)
  myPCSValues = vNewValue
End Property


' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim row As Long
  Dim columns As Long
  Dim szTemp As String
  
  
  oldSignificancelevel = myGeneralUO.significance
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_PCA_FRM_CAPTION) ' "Principal component analysis"
  End With

  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count

  columns = 1
  ' print the PCA outputs
  If Me.PCA_OUTPUT Then
    columns = columns + xVars + 2
    Call printPCAOutput(myRange.Cells(2, 1), myGeneralUO, myMissingValueUO)
  End If

  If Me.VAR_OUTPUT Then
    Call printPCAVAROutput(myRange.Cells(2, columns), myGeneralUO, myMissingValueUO)
  End If


SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Public Sub printPCAOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim i As Long
  Dim j As Long
  Dim row As Long
  Dim columns As Long
  Dim szTemp As String
  Dim szLabel As String
  Dim xActualOutputVars As Long
  Dim DataRange As Variant
  
  oldSignificancelevel = myGeneralUO.significance
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_DATA_NO_LABELS).columns.count
  If Not myGeneralUO.GROUPBY_COLUMNS Then
    xVars = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
  End If
  
  xActualOutputVars = WorksheetFunction.MIN(xVars, 50)
  ' Draw a Borders
  ' Range(myRange.Cells(1, 1), myRange.Cells(1, xActualOutputVars + 1)).Select
  With Range(myRange.Cells(1, 1), myRange.Cells(1, xActualOutputVars + 1))
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
  
  
  DataRange = Range(myRange.Cells(1, 2), myRange.Cells(1, xActualOutputVars + 1)).value
  For i = 1 To xActualOutputVars
    DataRange(1, i) = "PC(" & i & ")"
  Next i
  
  With Range(myRange.Cells(1, 2), myRange.Cells(1, xActualOutputVars + 1))
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .value = DataRange
  End With
  
  
  'Next Let's print the Variance
  row = 1
  If Me.PCA_VARIANCE Then
    row = row + 1
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VARIANCE_LABEL_CAPTION) ' "Variance"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_VARIANCE_NOTE) ' "Variance"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_VARIANCE_NOTE) ' "Variance"
      End If
    End With
    
    szTemp = "=PCA_COMP(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & _
              myGeneralUO.INPUT_MASK & ","
    
    If Me.STANDARDIZED Then
      szTemp = szTemp & "1,"
    Else
      szTemp = szTemp & "2,"
    End If
    
    DataRange = Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1)).formula
    For i = 1 To xActualOutputVars
      DataRange(1, i) = szTemp & i & ",2)"
    Next i
    
    With Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1))
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .NumberFormat = "#0.00"
      .formula = DataRange
    End With
  End If


  If Me.PCA_PROPOTION Then
    row = row + 1
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_PROPOTION_MSG) ' "Proportion"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_PROPOTION_NOTE) ' "Proportion"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_PROPOTION_NOTE) ' "Proportion"
      End If
    End With
    
    DataRange = Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1)).formula
    For i = 1 To xActualOutputVars
      DataRange(1, i) = szTemp & i & ",1)"
    Next i
    
    With Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1))
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .NumberFormat = "#0.00"
      .formula = DataRange
    End With
    
    ' print cumulative propotions
    row = row + 1
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_CUM_PROPOTION_MSG) ' "Cum. Proportion"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_CUM_PROPOTION_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_CUM_PROPOTION_NOTE)
      End If
    End With
    
    
    DataRange = Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1)).formula
    DataRange(1, 1) = "=" & myRange.Cells(row - 1, 2).Address()
    
    For i = 2 To xActualOutputVars
      DataRange(1, i) = "=" & myRange.Cells(row - 1, i + 1).Address() & "+" & myRange.Cells(row, i).Address()
    Next i
    
    With Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1))
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .NumberFormat = "#0.0%"
      .formula = DataRange
    End With
  End If
  
  
  If Me.PCA_LOADING Then
    ' Leave an empty line
    row = row + 2
    
    ' myRange.Cells(row, 1).Select
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_LOADING_MSG) ' "Loadings"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_LOADING_NOTE) ' "Loadings"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_LOADING_NOTE) ' "Loadings"
      End If
    End With
  
  
    DataRange = Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1)).value
    
    For i = 1 To xActualOutputVars
      DataRange(1, i) = "PC(" & i & ")"
    Next i
  
    ' myRange.Cells(row, i + 1).Select
    With Range(myRange.Cells(row, 2), myRange.Cells(row, xActualOutputVars + 1))
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .value = DataRange
    End With
  
    ' Add a border to the cells
    ' Range(myRange.Cells(row, 1), myRange.Cells(row, xActualOutputVars + 1)).Select
    With Range(myRange.Cells(row, 1), myRange.Cells(row, xActualOutputVars + 1))
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
    
    ' Add the variable weights
    row = row + 1
    
    
    DataRange = Range(myRange.Cells(row, 1), myRange.Cells(row + xVars - 1, 1)).value
    For i = 1 To xVars
      If myGeneralUO.HAS_LABELS Then
        DataRange(i, 1) = myGeneralUO.GET_INPUT_DATA_LABEL(i)
      Else
        DataRange(i, 1) = "X" & i
      End If
    Next i
    
    With Range(myRange.Cells(row, 1), myRange.Cells(row + xVars - 1, 1))
      .HorizontalAlignment = xlRight
      .Font.Bold = False
      .value = DataRange
    End With
    
    For i = 1 To xVars
      If i <= xActualOutputVars Then
        With Range(myRange.Cells(row, i + 1), myRange.Cells(row + xVars - 1, i + 1))
          .HorizontalAlignment = xlCenter
          .Font.Bold = False
          .FormulaArray = szTemp & i & ",4)"
          .NumberFormat = "#0.000"
        End With
      End If
    Next i
    row = row + xVars - 1
  End If

  ' Add the PCA values
  If Me.PCA_VALUES Then
    ' Leave an empty line
    row = row + 2
    
    ' myRange.Cells(row, 1).Select
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_PC_VALUES_LABEL_CAPTION) '  "Values"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_VALUES_NOTE) '  "Values"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_PC_VALUES_NOTE) '  "Values"
      End If
    End With
  
    For i = 1 To xActualOutputVars
      ' myRange.Cells(row, i + 1).Select
      With myRange.Cells(row, i + 1)
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = "PC(" & i & ")"
      End With
    Next i
  
    ' Add a border to the cells
    ' Range(myRange.Cells(row, 1), myRange.Cells(row, xActualOutputVars + 1)).Select
    With Range(myRange.Cells(row, 1), myRange.Cells(row, xActualOutputVars + 1))
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
    
    ' Add the PC values
    j = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
    If Not myGeneralUO.GROUPBY_COLUMNS Then
      j = Range(myGeneralUO.INPUT_DATA_NO_LABELS).columns.count
    End If
    
    row = row + 1
    For i = 1 To xActualOutputVars
      With Range(myRange.Cells(row, i + 1), myRange.Cells(row + j - 1, i + 1))
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .FormulaArray = szTemp & i & ",5)"
        .NumberFormat = "#0.000"
      End With
    Next i
  End If

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Public Sub printPCAVAROutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim i As Long
  Dim j As Long
  Dim row As Long
  Dim columns As Long
  Dim szTemp As String
  Dim szLabel As String
  
  
  oldSignificancelevel = myGeneralUO.significance
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_DATA_NO_LABELS).columns.count
  If Not myGeneralUO.GROUPBY_COLUMNS Then
    xVars = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
  End If
  
  ' Draw a Borders
  With Range(myRange.Cells(1, 1), myRange.Cells(1, xVars + 1))
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
  
  For i = 1 To xVars
  
    If myGeneralUO.HAS_LABELS Then
      szLabel = myGeneralUO.GET_INPUT_DATA_LABEL(i)
    Else
      szLabel = "X" & i
    End If

    With myRange.Cells(1, i + 1)
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .value = szLabel
    End With
  Next i

  'Type the number of Max PC
  With myRange.Cells(1, xVars + 2)
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & Me.VAR_MAXPCS
    .NumberFormat = "#0"
    .Interior.Color = RGB(200, 160, 35)
  End With

  'Next Let's print Final Communality
  row = 1
  If Me.VAR_COMMUNALITY Then
    row = row + 1
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_CAPTION) ' "Final Communality"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_HELPTIP) ' "Final Communality"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_HELPTIP) ' "Final Communality"
      End If
    End With
    
    szTemp = "=PCA_VAR(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & _
              myGeneralUO.INPUT_MASK & ","
    
    If Me.STANDARDIZED Then
      szTemp = szTemp & "1,"
    Else
      szTemp = szTemp & "2,"
    End If
    
    
    
    For i = 1 To xVars
      With myRange.Cells(row, i + 1)
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = szTemp & i & "," & myRange.Cells(1, xVars + 2).Address() & ",1)"
        .NumberFormat = "#0.0%"
      End With
    Next i
  End If
  
  If Me.VAR_LOADING Then
    ' Leave an empty line
    row = row + 2
    
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_VAR_LOADING_MSG) ' "Loadings"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_VAR_LOADING_NOTE) ' "Loadings"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_VAR_LOADING_NOTE) ' "Loadings"
      End If
    End With
  
    For i = 1 To xVars
      
      If myGeneralUO.HAS_LABELS Then
        szLabel = myGeneralUO.GET_INPUT_DATA_LABEL(i)
      Else
        szLabel = "X" & i
      End If

      With myRange.Cells(row, i + 1)
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = szLabel
      End With
    Next i
  
    ' Add a border to the cells
    With Range(myRange.Cells(row, 1), myRange.Cells(row, xVars + 1))
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
    
    ' Add the variable weights
    row = row + 1
    For i = 1 To xVars
      With myRange.Cells(row + i - 1, 1)
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = "PC(" & i & ")"
      End With
      
      With Range(myRange.Cells(row, i + 1), myRange.Cells(row + xVars - 1, i + 1))
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .FormulaArray = szTemp & i & "," & myRange.Cells(1, xVars + 2).Address() & ",2)"
        .NumberFormat = "#0.00"
      End With
      
    Next i
    row = row + xVars - 1
  End If
  
  
  ' Add the PCA values
  If Me.VAR_VALUES Then
    ' Leave an empty line
    row = row + 2
    
    With myRange.Cells(row, 1)
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_PCA_VARS_VALUES_LABEL_CAPTION) ' "Values"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_VARS_VALUES_NOTE) ' "Values"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_PCA_OUTPUT_VARS_VALUES_NOTE) ' "Values"
      End If
    End With
  
    For i = 1 To xVars
      If myGeneralUO.HAS_LABELS Then
        szLabel = myGeneralUO.GET_INPUT_DATA_LABEL(i)
      Else
        szLabel = "X" & i
      End If
    
      myRange.Cells(row, i + 1).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .value = szLabel
      End With
    Next i
  
    ' Add a border to the cells
    With Range(myRange.Cells(row, 1), myRange.Cells(row, xVars + 1))
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlThin         'Use xlThin for smaller border
      End With
    End With
    
    ' Add the PC values
    j = Range(myGeneralUO.INPUT_DATA_NO_LABELS).rows.count
    If Not myGeneralUO.GROUPBY_COLUMNS Then
      j = Range(myGeneralUO.INPUT_DATA_NO_LABELS).columns.count
    End If
    
    row = row + 1
    For i = 1 To xVars
      With Range(myRange.Cells(row, i + 1), myRange.Cells(row + j - 1, i + 1))
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .FormulaArray = szTemp & i & "," & myRange.Cells(1, xVars + 2).Address() & ",3)"
        .NumberFormat = "#0.00"
      End With
    Next i
  End If

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "QQPlotFrm"
Attribute VB_Base = "0{7646D865-63E9-4061-985F-2597A9B8765A}{B71F1781-7D46-4FA2-BA28-E416A2B374AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: QQPlotFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/QQPlotFrm.frm $
'
Private Const msMODULE As String = "USERFORM:QQPlot"
Private Const zenSlugId As String = "articles/216534483"

Private userOptions As QQPlotUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefEditOutputGraph_Change()
  userOptions.OUTPUT_GRAPH = Utilities.procInputCellsRange(RefEditOutputGraph.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditOutputTable_Change()
  userOptions.OUTPUT_TABLE = Utilities.procInputCellsRange(RefEditOutputTable.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub txtQuantiles_Change()
  userOptions.NUM_QUNTILES = txtQuantiles.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Prepare the form with proper locale labels
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_QQPLOT_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_DESCSTAT_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_INPUTDATA_LABEL_HELPTIP)
  
  NumberOfQuantilesLabel.Caption = MSGAPI.getLocaleString(IDS_UI_QQPLOT_NUMQUANTILES_LABEL_CAPTION)
  NumberOfQuantilesLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_NUMQUANTILES_LABEL_HELPTIP)
  txtQuantiles.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_NUMQUANTILES_LABEL_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_FRAME_HELPTIP)
  
  OutputTableRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_CAPTION)
  OutputTableRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_LABEL_HELPTIP)
  RefEditOutputTable.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_LABEL_HELPTIP)
  
  OutputGraphRangeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_CAPTION)
  OutputGraphRangeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_GRAPH_LABEL_HELPTIP)
  RefEditOutputGraph.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_GRAPH_LABEL_HELPTIP)
    
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OK_BTN_HELPTIP)
    
    
    
    
  ' Select the first Item as the default
  Set userOptions = New QQPlotUO
  
  Call ResetToDefault
  
  Call validateForm
ErrHdler:
    Exit Sub
End Sub
Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub



Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = userOptions.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  userOptions.INPUT_RANGE = szInput
  
  'cmbBinsAlgo.Value = userOptions.BINS_ALGO
  RefEditOutputTable.value = userOptions.OUTPUT_TABLE
  RefEditOutputGraph.value = userOptions.OUTPUT_GRAPH
  
  txtQuantiles.value = userOptions.NUM_QUNTILES
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  txtQuantiles.enabled = dataAvailable
  RefEditOutputTable.enabled = dataAvailable
  RefEditOutputGraph.enabled = dataAvailable
    
  cmdOK.enabled = dataAvailable And Utilities.isCellRangeValid(RefEditOutputTable.value)
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR) ' "The time series range should be one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) '"The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefEditOutputTable)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) '"Enter a valid output range."
          Exit Sub
        Else
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_QQPLOT_STATUSBAR_PLOT_CALCULATION_MSG) ' "Q-Q Plot Calculation"
          
          Call userOptions.printOutput(myRange)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub




Attribute VB_Name = "QQPlotUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: QQPlotUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/QQPlotUO.cls $
'
Private Const msMODULE As String = "CLASS:QQPlotUO"

Private myInputData As String
Private myOutputTableRange As String
Private myOutputGraphRange As String
Private myNumQuantiles As Long



Private Sub Class_Initialize()
  Call ResetToDefault
End Sub


Public Sub ResetToDefault()
  myOutputTableRange = Utilities.AddressEx(ActiveCell)
  myOutputGraphRange = Utilities.AddressEx(ActiveCell.offset(0, 4))
  myInputData = ""
  
  myNumQuantiles = 10
  
End Sub


Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property


Public Property Get OUTPUT_TABLE() As String
  OUTPUT_TABLE = myOutputTableRange
End Property

Public Property Let OUTPUT_TABLE(ByVal vNewValue As String)
  myOutputTableRange = vNewValue
End Property

Public Property Get OUTPUT_GRAPH() As String
  OUTPUT_GRAPH = myOutputGraphRange
End Property

Public Property Let OUTPUT_GRAPH(ByVal vNewValue As String)
  myOutputGraphRange = vNewValue
End Property


Public Property Get NUM_QUNTILES() As Long
  NUM_QUNTILES = myNumQuantiles
End Property

Public Property Let NUM_QUNTILES(ByVal vNewValue As Long)
  myNumQuantiles = vNewValue
End Property


' Print the Normality Table below
Public Sub printOutput(myRange As Range)
  Const sSOURCE As String = "printOutput"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim szTemp As String
  
  On Error GoTo ErrorHandler
  
  ' Print the table header
  Call printTableHeaders(myRange)
  
  ' Print the table content
  Call printTableContents(myRange(4, 1), myRange(2, 2), myRange(2, 3))
  
  'Plot the graph now
  Call plotQQPlot(myRange(4, 1), Range(Me.OUTPUT_GRAPH))
Cleanup:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub


Public Sub printTableHeaders(myRange As Range)
  Const sSOURCE As String = "printTableHeaders"
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  On Error GoTo ErrorHandler
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_MEAN_HEADER) '"Mean"
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  myRange.Cells(1, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_STDEV_HEADER) '"STDEV"
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  myRange.Cells(2, 1).Select
  With Selection
    .HorizontalAlignment = xlRight
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_QQPLOT_HEADER)  ' "QQ-Plot"
  End With
  
  myRange.Cells(2, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=Average(RMNA(" & Me.INPUT_RANGE & "))"
    .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
  End With

  myRange.Cells(2, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=STDEV(RMNA(" & Me.INPUT_RANGE & "))"
    .NumberFormat = Range(Me.INPUT_RANGE).NumberFormat
  End With
  
  myRange.Cells(3, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_Q_HEADER) ' "Q"
  End With

  myRange.Cells(3, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_NORMAL_HEADER) '"Normal"
  End With

  myRange.Cells(3, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_TABLE_EMPIRICAL_HEADER) ' "Empirical"
  End With


  ' Now draw the Borders
  Range(myRange.Cells(3, 1), myRange.Cells(3, 3)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
Cleanup:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub


Public Sub printTableContents(myRange As Range, myAvgRange As Range, myStdevRange As Range)
  Const sSOURCE As String = "printTableContents"
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  On Error GoTo ErrorHandler
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  Dim k As Long
  Dim Q As Double
  
  For k = 1 To Me.NUM_QUNTILES
      Q = k / (1 + Me.NUM_QUNTILES)
      
      myRange.Cells(k, 1).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = Q
        .NumberFormat = "#0.0%"
      End With
  
      myRange.Cells(k, 2).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=NORMSINV(" & myRange.Cells(k, 1).Address(False, True) & ")"
        .NumberFormat = "0.0"
      End With
      
      myRange.Cells(k, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=(Quantile(" & Me.INPUT_RANGE & "," & myRange.Cells(k, 1).Address(False, True) & ") -" & _
                      myAvgRange.Cells(1, 1).Address(True, True) & ")/" & myStdevRange.Cells(1, 1).Address(True, True)
        .NumberFormat = "0.0"
      End With
  Next k
  
Cleanup:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
  
End Sub


Public Sub plotQQPlot(Data As Range, myGraphRange As Range)
  Const sSOURCE As String = "plotQQPlot"
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  On Error GoTo ErrorHandler
  
  If ActiveSheet.Name <> myGraphRange.Worksheet.Name Then
    Sheets(myGraphRange.Worksheet.Name).Activate
  End If
  
  Dim QQPlotRange As Object
  Set QQPlotRange = Range(myGraphRange.Cells(1, 1), myGraphRange.Cells(12, 6))
  
  ' Range(Data.Cells(1, 2), Data.Cells(Me.NUM_QUNTILES, 3)).Select
  myGraphRange.Select
  With ActiveSheet.ChartObjects.Add(Left:=QQPlotRange.Left, Width:=QQPlotRange.Width, Top:=QQPlotRange.Top, Height:=QQPlotRange.Height)
    .Chart.ChartType = xlXYScatter
    .Chart.SetSourceData source:=Range(Data.Cells(1, 2), Data.Cells(Me.NUM_QUNTILES, 3))
    .Chart.HasTitle = True
    
    
    ' test for Excel 2007/2010
    'Remove the legend
    .Chart.Legend.Select
    Selection.Delete
    
    ' Remove Major Gridlines
    .Chart.Axes(xlValue).MajorGridlines.Select
    Selection.Delete
    
    
    ' Apply Layout 3
    .Chart.ApplyLayout (3)
    
    'Remove the legend (again)
    .Chart.Legend.Select
    Selection.Delete
    
    
    ' Remove the trend line
    .Chart.SeriesCollection(1).Trendlines(1).Select
    Selection.Delete

    ' Format the markers
    With .Chart.SeriesCollection(1)
        .MarkerStyle = 2
        .MarkerSize = 7
        
        With .Format.Fill
          .visible = msoTrue
          .ForeColor.ObjectThemeColor = msoThemeColorText2
          .ForeColor.TintAndShade = 0
          .Transparency = 0
          .Solid
        End With
    End With

    .Chart.plotArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Border.LineStyle = xlNone
    .Chart.ChartArea.Fill.visible = False
    .Chart.plotArea.Fill.visible = False

    ' Make the X-axis writing below axis
    .Chart.Axes(xlCategory).Select
    Selection.TickLabelPosition = xlLow
    
    ' Make the Y-axis writing on the left
    .Chart.Axes(xlValue).Select
    Selection.TickLabelPosition = xlLow
    
    ' X-axis label
    .Chart.Axes(xlCategory).AxisTitle.Select
    .Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_PLOT_THEORETICAL_DIST_HEADER) ' "Theoretical Distribution"
    Selection.Format.TextFrame2.TextRange.Characters.Text = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_PLOT_THEORETICAL_DIST_HEADER) ' "Theoretical Distribution"
    With Selection.Format.TextFrame2.TextRange.ParagraphFormat
      .TextDirection = msoTextDirectionLeftToRight
      .Alignment = msoAlignCenter
    End With
    
    With Selection.Format.TextFrame2.TextRange.Font
      .BaselineOffset = 0
      .Bold = msoTrue
      .NameComplexScript = "+mn-cs"
      .NameFarEast = "+mn-ea"
      .Fill.visible = msoTrue
      .Fill.ForeColor.RGB = RGB(0, 0, 0)
      .Fill.Transparency = 0
      .Fill.Solid
      .size = 10
      .Italic = msoFalse
      .Kerning = 12
      .Name = "+mn-lt"
      .UnderlineStyle = msoNoUnderline
      .Strike = msoNoStrike
    End With
    
    ' Y-axis label
    .Chart.Axes(xlValue).AxisTitle.Select
    .Chart.Axes(xlValue, xlPrimary).AxisTitle.Text = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_PLOT_EMPIRICALL_DIST_HEADER) '"Empirical Distribution"
    Selection.Format.TextFrame2.TextRange.Characters.Text = MSGAPI.getLocaleString(IDS_UI_QQPLOT_OUTPUT_PLOT_EMPIRICALL_DIST_HEADER) '"Empirical Distribution"
    With Selection.Format.TextFrame2.TextRange.ParagraphFormat
      .TextDirection = msoTextDirectionLeftToRight
      .Alignment = msoAlignCenter
    End With
    With Selection.Format.TextFrame2.TextRange.Font
      .BaselineOffset = 0
      .Bold = msoTrue
      .NameComplexScript = "+mn-cs"
      .NameFarEast = "+mn-ea"
      .Fill.visible = msoTrue
      .Fill.ForeColor.RGB = RGB(0, 0, 0)
      .Fill.Transparency = 0
      .Fill.Solid
      .size = 10
      .Italic = msoFalse
      .Kerning = 12
      .Name = "+mn-lt"
      .UnderlineStyle = msoNoUnderline
      .Strike = msoNoStrike
    End With
    
    
    ' Add a diagonal line
    With .Chart.SeriesCollection.NewSeries
      .XValues = Range(Data.Cells(1, 2), Data.Cells(Me.NUM_QUNTILES, 2))
      .Values = Range(Data.Cells(1, 2), Data.Cells(Me.NUM_QUNTILES, 2))
      .ChartType = xlXYScatterSmoothNoMarkers
      .Smooth = True
    End With
  
  End With
Cleanup:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub
  

Attribute VB_Name = "RegressionFrm"
Attribute VB_Base = "0{94125C66-A704-4E64-AE1E-3762BAA9C096}{05EFF005-FA8F-42D8-9EFC-64E7267C6341}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: RegressionFRM.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/RegressionFRM.frm $
'
Private Const msMODULE As String = "USERFORM:Regression"
Private Const zenSlugId As String = "articles/215178786"

'
Private userOptions As RegressionUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub chkOptionANOVA_Click()
  userOptions.ANOVA = chkOptionANOVA.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub chkOptionBidirectional_Click()
  userOptions.STEPWISE_BIDIRECTIONAL = chkOptionBidirectional.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub optGroupByColumns_Click()
  myGeneralUO.GROUPBY_COLUMNS = optGroupByColumns.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optGroupByRows_Click()
  myGeneralUO.GROUPBY_COLUMNS = Not optGroupByRows.value

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub
Private Sub chOptionForward_Click()
  userOptions.STEPWISE_FWD = chOptionForward.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionBackward_Click()
  userOptions.STEPWISE_BKWD = chkOptionBackward.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionConfidence_Click()
  userOptions.PARAMCI = chkOptionConfidence.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chkOptionInfluenceData_Click()
  userOptions.INFLUENCE_DIAGNOSIS = chkOptionInfluenceData.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionResidualDiagnosis_Click()
  userOptions.RESID_DIAGNOSIS = chkOptionResidualDiagnosis.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkOptionStepWiseRegression_Click()
  userOptions.STEPWISE_REG = chkOptionStepWiseRegression.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_PG_GNRL_HELPTIP)
    
  InputXDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_CAPTION)
  InputXDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_HELPTIP)
  RefXInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_HELPTIP)
  
  InputYDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_Y_CAPTION)
  InputYDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_Y_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_Y_HELPTIP)
    
  GroupByTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_CAPTION)
  GroupByTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_HELPTIP)
    
  optGroupByColumns.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_CAPTION)
  optGroupByColumns.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_HELPTIP)
  
  optGroupByRows.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_CAPTION)
  optGroupByRows.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_HELPTIP)
    
  MaskTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION)
  MaskTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  RefMaskArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_PG_OPTIONS_HELPTIP)
  
  InterceptTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_INTERCEPT_CAPTION)
  InterceptTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INTERCEPT_HELPTIP)
  RefIntercept.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INTERCEPT_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkOptionGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_REGRESS_STATS_CAPTION)
  chkOptionGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_REGRESS_STATS_HELPTIP)
  
  chkOptionANOVA.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_ANOVA_CAPTION)
  chkOptionANOVA.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_ANOVA_HELPTIP)
  
  chkOptionConfidence.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_COEFF_STAT_CAPTION)
  chkOptionConfidence.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_COEFF_STAT_HELPTIP)
  
  chkOptionResidualDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_RESIDUALS_DIAGNOSIS_CAPTION)
  chkOptionResidualDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_RESIDUALS_DIAGNOSIS_HELPTIP)
  
  AutoModelingFrame.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_FRAME_CAPTION)
  AutoModelingFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_FRAME_HELPTIP)
  
  chkOptionStepWiseRegression.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_CAPTION)
  chkOptionStepWiseRegression.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_HELPTIP)
  
  chkOptionForward.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_CAPTION)
  chkOptionForward.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_HELPTIP)
  
  chkOptionBackward.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_CAPTION)
  chkOptionBackward.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_HELPTIP)
  
  chkOptionBidirectional.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_CAPTION)
  chkOptionBidirectional.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_HELPTIP)
  
  ' Forecast Tab
  Me.MultiPage1.Pages("ForecastPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_PG_FORECAST_CAPTION)
  Me.MultiPage1.Pages("ForecastPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_PG_FORECAST_CAPTION)
  
  InputXForecastDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_CAPTION)
  InputXForecastDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_FORECAST_HELPTIP)
  RefEditForecastInput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_MLR_INPUT_X_FORECAST_HELPTIP)
  
    
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New RegressionUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
    
  Call ResetToDefault
  
  Call validateForm
    
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub

Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  RefEditSignificanceLevel.value = myGeneralUO.significance
  
  'Missing Values section
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  ' Options Section
  chkOptionGoodness.value = userOptions.GOF
  chkOptionANOVA.value = userOptions.ANOVA
  chkOptionConfidence.value = userOptions.PARAMCI
  chkOptionResidualDiagnosis.value = userOptions.RESID_DIAGNOSIS
  
  chkOptionStepWiseRegression.value = userOptions.STEPWISE_REG
  chkOptionForward.value = userOptions.STEPWISE_FWD
  chkOptionBackward.value = userOptions.STEPWISE_BKWD
  chkOptionBidirectional.value = userOptions.STEPWISE_BIDIRECTIONAL
  
  RefEditForecastInput.value = userOptions.FORECAST_INPUT
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value) And _
                  Utilities.isCellRangeValid(RefXInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
  Me.MultiPage1.Pages("ForecastPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  RefEditSignificanceLevel.enabled = True
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        ready = valid_alpha
      End If
  End If
    
  chkOptionForward.enabled = userOptions.STEPWISE_REG And chkOptionStepWiseRegression.enabled
  chkOptionBackward.enabled = userOptions.STEPWISE_REG And chkOptionStepWiseRegression.enabled
  chkOptionBidirectional.enabled = userOptions.STEPWISE_REG And chkOptionStepWiseRegression.enabled
    
  cmdOK.enabled = ready
End Sub


Private Sub cmdCancel_Click()
  Unload Me
End Sub


Private Sub cmdHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID, zenSlugId)
End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = RefEditSignificanceLevel.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefMaskArray_Change()
  myGeneralUO.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefInputArray_Change()
  myGeneralUO.DEPENDENT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefXInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefXInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditForecastInput_Change()
  userOptions.FORECAST_INPUT = Utilities.procInputCellsRange(RefEditForecastInput.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

'RefIntercept
Private Sub RefIntercept_Change()
  
  userOptions.INTERCEPT_NAN = (Len(RefIntercept.value) = 0)
  
  If Len(RefIntercept.value) > 0 Then
    userOptions.INTERCEPT_VALUE = RefIntercept.value
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub chkOptionGoodness_Click()
  userOptions.GOF = chkOptionGoodness.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  Dim myXRange  As Object
  Dim myYRange  As Object
  Dim myXForecastRange As Object
  
  Dim myRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  
    ' Basic check for X1 range
  Set myXRange = Range(RefXInputArray)
  If myXRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INVALID_FACTORS_RANGE_ERROR_MSG) ' "Invalid/Missing cells range for the explanatory variables (X)"
    Exit Sub
  End If
    
  If myXRange.columns.count < 1 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_ERROR_MSG) ' "Invalid  cells range for the explanatory variables (X)\n The X-range must have one or more variables"
    Exit Sub
  End If
  
  If myXRange.columns.count >= myXRange.rows.count Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_OBS_ERROR_MSG) ' "Invalid  cells range for the explanatory variables (X).\ The number of rows (observations) must be greater than number of columns (variables)"
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myXRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_NOT_NUMBERS_ERROR_MSG) ' "Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    Exit Sub
  End If

  Set myYRange = Range(RefInputArray)
  If myYRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_MISSING_INVALID_RANGE_ERROR_MSG) ' "Invalid/missing cells range for the dependent variable (Y)."
    Exit Sub
  End If
  
  If myYRange.columns.count > 1 Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_ONE_COLUMN_ERROR_MSG) ' "Invalid cells range for the dependent variable(Y).\n The range should have only one column."
    Exit Sub
  End If
  
  If myYRange.rows.count <> myXRange.rows.count Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_DEPENDENT_ROWS_MISMATCH_ERROR_MSG) ' "Invalid  cells range for the dependent variable (Y).\n The number of observation in Y must match number of observations in X."
    Exit Sub
  End If
  
  NA = True
  If Not vb_IsNum(myYRange, NA) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_RESPONSE_NOT_NUMBERS_ERROR_MSG) ' "Invalid cells range for the dependent variable (Y).\n The data values should be numbers and without any spaces."
    Exit Sub
  End If
  
  'Check the Forecast range
  If Len(Me.RefEditForecastInput.value) > 0 Then
    Set myXForecastRange = Range(RefEditForecastInput.value)
  
    If myXForecastRange Is Nothing Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INVALID_FACTORS_FORECAST_RANGE_ERROR_MSG) ' "Invalid/Missing cells range for the forecast explanatory variables (X)"
      Exit Sub
    End If
    
    If myXForecastRange.columns.count <> myXRange.columns.count Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_FORECAST_ERROR_MSG) ' "Invalid  cells range for the forecast explanatory variables (X)\n The number of columns must match number of explanatory variables"
      Exit Sub
    End If
    
    NA = True
    If Not vb_IsNum(myXForecastRange, NA) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_FACTORS_FORECAST_NOT_NUMBERS_ERROR_MSG) ' "Invalid cells range for the forecast explanatory variable (X).\n The data values should be numbers and without any spaces."
      Exit Sub
    End If
  End If
  
  
  Set myRange = Range(RefOutput)
  If myRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If
  
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
  
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_MLR_STATUSBAR_CALCULATION_MSG) ' "Multiple Linear Regression Analysis (MLR)"
  
  Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
  mbOK = True
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_ERROR_MSG), vbCritical Or vbOKOnly, _
         PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "RegressionStabilityFrm"
Attribute VB_Base = "0{C4F72247-3DAD-4B13-861C-7E6970BFE821}{C436A1FC-55AD-4E51-8B99-1AF8801CC289}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: RegressionStabilityFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/RegressionStabilityFrm.frm $
'
Private Const msMODULE As String = "USERFORM:RegressionStability"
Private Const zenSlugId As String = "articles/216454563"


Private userOptions As RegressionStabilityTestUO
Private myDataset1 As GeneralUO
Private myDataset2 As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub chkOptionChowtest_Click()
  userOptions.CHOWTEST = chkOptionChowtest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub optGroupByColumns_Click()
  myDataset1.GROUPBY_COLUMNS = optGroupByColumns.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optGroupByRows_Click()
  myDataset1.GROUPBY_COLUMNS = optGroupByColumns.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myDataset1.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefX1InputArray_Change()
  myDataset1.INPUT_RANGE = Utilities.procInputCellsRange(RefX1InputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

'
Private Sub RefMaskArray_Change()
  myDataset1.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  myDataset2.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub RefX2InputArray_Change()
  myDataset2.INPUT_RANGE = Utilities.procInputCellsRange(RefX2InputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub RefY1InputArray_Change()
  myDataset1.DEPENDENT_RANGE = Utilities.procInputCellsRange(RefY1InputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub RefY2InputArray_Change()
  myDataset2.DEPENDENT_RANGE = Utilities.procInputCellsRange(RefY2InputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub RefIntercept_Change()
  If Len(RefIntercept.value) > 0 Then
    userOptions.INTERCEPTNAN = False
    userOptions.intercept = RefIntercept.value
  Else
    userOptions.INTERCEPTNAN = True
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_PG_GNRL_HELPTIP)
  
  DataSet1Frame.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_DATASET_ONE_FRAME_CAPTION)
  DataSet1Frame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_DATASET_ONE_FRAME_HELPTIP)
  
  InputX1DataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X1_CAPTION)
  InputX1DataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X1_HELPTIP)
  RefX1InputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X1_HELPTIP)
  
  InputY1DataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y1_CAPTION)
  InputY1DataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y1_HELPTIP)
  RefY1InputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y1_HELPTIP)
  
  DataSet2Frame.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_DATASET_TWO_FRAME_CAPTION)
  DataSet2Frame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_DATASET_TWO_FRAME_HELPTIP)
  
  InputX2DataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X2_CAPTION)
  InputX2DataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X2_HELPTIP)
  RefX2InputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_X2_HELPTIP)
  
  InputY2DataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y2_CAPTION)
  InputY2DataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y2_HELPTIP)
  RefY2InputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y2_HELPTIP)
  
  GroupByTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_CAPTION)
  GroupByTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_LABEL_HELPTIP)
  
  optGroupByColumns.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_CAPTION)
  optGroupByColumns.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_COL_LABEL_HELPTIP)
  
  optGroupByRows.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_CAPTION)
  optGroupByRows.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_GROUPBY_ROW_LABEL_HELPTIP)
  
  MaskTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION)
  MaskTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_PG_OPTIONS_HELPTIP)
  
  InterceptTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INTERCEPT_CAPTION)
  InterceptTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INTERCEPT_HELPTIP)
  RefIntercept.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_INTERCEPT_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  
  RegressionStabilityTestMethodFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_METHODS_FRAME_CAPTION)
  RegressionStabilityTestMethodFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_METHODS_FRAME_HELPTIP)
  
  chkOptionChowtest.Caption = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_CHOW_TEST_CAPTION)
  chkOptionChowtest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_CHOW_TEST_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optDontAllow.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optDontAllow.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
    
  ' Select the first Item as the default
  Set userOptions = New RegressionStabilityTestUO
  Set myDataset1 = New GeneralUO
  Set myDataset2 = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  DataSet1Frame.SetFocus
  RefX1InputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myDataset1 = Nothing
  Set myDataset2 = Nothing
  Set myMissingValueUO = Nothing
End Sub

Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If myDataset1 Is Nothing Or _
      myDataset2 Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  szInput = myDataset1.INPUT_RANGE
  
  Call myDataset1.ResetToDefault
  Call myDataset2.ResetToDefault
  Call userOptions.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE
  
  myDataset1.INPUT_RANGE = szInput
  RefOutput.value = myDataset1.OUTPUT_RANGE
  RefMaskArray.value = myDataset1.INPUT_MASK
  
  RefEditSignificanceLevel.value = myDataset1.significance
  chkOptionChowtest.value = userOptions.CHOWTEST

  
  optDontAllow.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  If userOptions.INTERCEPTNAN Then
    RefIntercept.value = ""
  Else
    RefIntercept.value = userOptions.intercept
  End If
  
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefX1InputArray.value) And _
                  Utilities.isCellRangeValid(RefY1InputArray.value) And _
                  Utilities.isCellRangeValid(RefX2InputArray.value) And _
                  Utilities.isCellRangeValid(RefY2InputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  RefEditSignificanceLevel.enabled = True
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefX1InputArray.value) And _
          Utilities.isCellRangeValid(RefY1InputArray.value) And _
          Utilities.isCellRangeValid(RefX2InputArray.value) And _
          Utilities.isCellRangeValid(RefY2InputArray.value) Then
        ready = valid_alpha
      End If
  End If
    
  cmdOK.enabled = ready And (userOptions.CHOWTEST) And myMissingValueUO.isInputValid(RefX1InputArray.value) _
                                                   And myMissingValueUO.isInputValid(RefY1InputArray.value) _
                                                   And myMissingValueUO.isInputValid(RefX2InputArray.value) _
                                                   And myMissingValueUO.isInputValid(RefY2InputArray.value)
  
  
End Sub


Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID, zenSlugId)
End Sub

Private Sub RefOutput_Change()
  myDataset1.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REMOVE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optDontAllow_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myX1Range As Object
  Dim myY1Range As Object
  Dim myX2Range As Object
  Dim myY2Range As Object
  Dim outRange As Object
  Dim NA As Boolean
  
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  ' Basic check for X1 range
  Set myX1Range = Range(myDataset1.INPUT_DATA_NO_LABELS)
  If myX1Range Is Nothing Then
    '"Data set 1: Invalid/Missing cells range for the explanatory variables (X1)"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X1_INPUT_ERROR)
    Exit Sub
  End If
  
  If myDataset1.GROUPBY_COLUMNS Then
    If myX1Range.columns.count < 1 Then
      ' "Data set 1: Invalid  cells range for the explanatory variables (X1)\n The X-range must have one or more variables"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X1_ONEVAR_INPUT_ERROR)
      Exit Sub
    End If
    
    If myX1Range.columns.count >= myX1Range.rows.count Then
      ' "Data set 1: Invalid  cells range for the explanatory variables (X1).\ The number of rows (observations) must be greater than number of columns (variables)"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X1_ROW_OBS_LESS_VAR_INPUT_ERROR)
      Exit Sub
    End If
    
  Else
    If myX1Range.rows.count < 1 Then
      ' MsgBox "Data set 1: Invalid  cells range for the explanatory variables (X1)\n The X-range must have one or more variables"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X1_ONEVAR_INPUT_ERROR)
      Exit Sub
    End If
    
    If myX1Range.rows.count >= myX1Range.columns.count Then
      ' "Data set 1: Invalid  cells range for the explanatory variables (X1).\ The number of columns (observations) must be greater than number of rows (variables)"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X1_COL_OBS_LESS_VAR_INPUT_ERROR)
      Exit Sub
    End If
  End If
  
        
  NA = True
  If Not vb_IsNum(myX1Range, NA) Then
    '"Data set 2: Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_NOTNUMBER_X1_INPUT_ERROR)
    Exit Sub
  End If
  
  Set myY1Range = Range(myDataset1.DEPENDENT_DATA_NO_LABELS)
  If myY1Range Is Nothing Then
    '"Data set 1: Invalid/missing cells range for the dependent variable (Y1)."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_Y1_INPUT_ERROR)
    Exit Sub
  End If
    
  If myY1Range.columns.count > 1 And _
      myY1Range.rows.count > 1 Then
    ' "Data set 1: Invalid cells range for the dependent variable(Y1).\n The range should have only one column or one row."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_ONEROWCOL_Y1_INPUT_ERROR)
    Exit Sub
  End If
      
  If myDataset1.GROUPBY_COLUMNS Then
    If (myY1Range.rows.count <> myX1Range.rows.count) And (myY1Range.columns.count <> myX1Range.rows.count) Then
      ' "Data set 1: Invalid  cells range for the dependent variable (Y1).\n The number of observation in Y1 must match number of observations in X1."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X1_Y1_INPUT_ERROR)
      Exit Sub
    End If
  Else
    If (myY1Range.columns.count <> myX1Range.columns.count) And (myY1Range.rows.count <> myX1Range.columns.count) Then
      ' "Data set 1: Invalid  cells range for the dependent variable (Y1).\n The number of observation in Y1 must match number of observations in X1."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X1_Y1_INPUT_ERROR)
      Exit Sub
    End If
  End If
  
  NA = True
  If Not vb_IsNum(myY1Range, NA) Then
    ' "Data set 1: Invalid cells range for the dependent variable (Y1).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_NOTNUMBER_Y1_INPUT_ERROR)
    Exit Sub
  End If
    
  Set myX2Range = Range(myDataset2.INPUT_DATA_NO_LABELS)
  If myX2Range Is Nothing Then
    '"Data set 2: Invalid/Missing cells range for the explanatory variables (X2)"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X2_INPUT_ERROR)
    Exit Sub
  End If
  
  
  If myX2Range.columns.count < 1 Or myX2Range.rows.count < 1 Then
    ' "Data set 2: Invalid  cells range for the explanatory variables (X2)\n The X-range must have one or more variables"
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X2_ONEVAR_INPUT_ERROR)
    Exit Sub
  End If
  
  If myDataset1.GROUPBY_COLUMNS Then
    If myX2Range.columns.count >= myX2Range.rows.count Then
      ' "Data set 2: Invalid  cells range for the explanatory variables (X2).\ The number of rows (observations) must be greater than number of columns (variables)"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X2_ROW_OBS_LESS_VAR_INPUT_ERROR)
      Exit Sub
    End If
    
    If myX2Range.columns.count <> myX1Range.columns.count Then
      ' "The number of explanatory variables (columns) in X1 and X2 range are different"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X1_X2_INPUT_ERROR)
      Exit Sub
    End If
    
  Else
    If myX2Range.rows.count >= myX2Range.columns.count Then
      ' "Data set 2: Invalid  cells range for the explanatory variables (X2).\ The number of columns (observations) must be greater than number of rows (variables)"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_X2_COL_OBS_LESS_VAR_INPUT_ERROR)
      Exit Sub
    End If
    
    If myX2Range.rows.count <> myX1Range.rows.count Then
      '"The number of explanatory variables (columns) in X1 and X2 range are different"
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X1_X2_INPUT_ERROR)
      Exit Sub
    End If
    
  End If
  NA = True
  
  If Not vb_IsNum(myX2Range, NA) Then
    '"Data set 2: Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_NOTNUMBER_X2_INPUT_ERROR)
    Exit Sub
  End If
    
  ' Match the number of columns in both sets
  
  Set myY2Range = Range(myDataset2.DEPENDENT_DATA_NO_LABELS)
  If myY2Range Is Nothing Then
    ' "Data set 2: Invalid/missing cells range for the dependent variable (Y2)."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_INVALID_Y2_INPUT_ERROR)
    Exit Sub
  End If
  
  If myY2Range.columns.count > 1 And myY2Range.rows.count > 1 Then
    ' "Data set 2: Invalid cells range for the dependent variable(Y2).\n The range should have only one column/row."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_ONEROWCOL_Y2_INPUT_ERROR)
    Exit Sub
  End If
  
  If myDataset1.GROUPBY_COLUMNS Then
    If (myY2Range.rows.count <> myX2Range.rows.count) And (myY2Range.columns.count <> myX2Range.rows.count) Then
      ' "Data set 2: Invalid  cells range for the dependent variable (Y2).\n The number of observation in Y2 must match number of observations in X2."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X2_Y2_INPUT_ERROR)
      Exit Sub
    End If
  Else
    If (myY2Range.rows.count <> myX2Range.columns.count) And (myY2Range.columns.count <> myX2Range.columns.count) Then
      ' "Data set 2: Invalid  cells range for the dependent variable (Y2).\n The number of observation in Y2 must match number of observations in X2."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_MISMATCH_X2_Y2_INPUT_ERROR)
      Exit Sub
    End If
  End If
  ' Allow #N/A and spaces
  NA = True
  
  If Not vb_IsNum(myY2Range, NA) Then
    '"Data set 2: Invalid cells range for the dependent variable (Y2).\n The data values should be numbers and without any spaces."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_REGRESS_NOTNUMBER_Y2_INPUT_ERROR)
    Exit Sub
  End If
  
  ' Check the output range
  Set outRange = Range(RefOutput)
  If outRange Is Nothing Then
    ' TODO: Check for existing output and chance to overwrite?
    MsgBox "Enter a valid output range."
    Exit Sub
  End If
  
  ' Check the Alpha level
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If
  
  
  Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_STATUSBAR_CALCULATION_MSG)
  
  Call userOptions.printTestOutput(outRange, myDataset1, myDataset2, myMissingValueUO)
  mbOK = True
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "RegressionStabilityTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16099 $
'  $Date: 2017-01-06 09:18:14 -0600 (Fri, 06 Jan 2017) $
'  $Author: mohamad $
'  $Id: RegressionStabilityTestUO.cls 16099 2017-01-06 15:18:14Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/RegressionStabilityTestUO.cls $
'
Private Const msMODULE As String = "CLASS:RegressionStabilityTestUO"
  

Private myChowTest As Boolean
Private myIntercept As Double
Private myInterceptIsNan As Boolean


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

Public Property Get CHOWTEST() As Boolean
    CHOWTEST = myChowTest
End Property

Public Property Let CHOWTEST(ByVal vNewValue As Boolean)
  myChowTest = vNewValue
End Property

Public Property Get INTERCEPTNAN() As Boolean
    INTERCEPTNAN = myInterceptIsNan
End Property

Public Property Let INTERCEPTNAN(ByVal vNewValue As Boolean)
  myInterceptIsNan = vNewValue
End Property

Public Property Get intercept() As Double
    intercept = myIntercept
End Property

Public Property Let intercept(ByVal vNewValue As Double)
  myIntercept = vNewValue
End Property



'ResetToDefault

Public Sub ResetToDefault()
  myChowTest = True
  myInterceptIsNan = True
  myIntercept = 0#
End Sub



' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myDataset1 As GeneralUO, ByRef myDataset2 As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As STATIONARY_TEST_SCENARIO
  Dim row As Long
  Dim szTemp As String
  
  
  oldSignificancelevel = myDataset1.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_OUTPUT_TABLE_HEADER) '"Regression stability test (Chow test)"
  End With

  
    myRange.Cells(2, 1).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER)  '"Score"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE)
      End If
    End With
    
    myRange.Cells(2, 2).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) '"C.V."
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE)
      End If
    End With
  
    myRange.Cells(2, 3).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) '"P-Value"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
      End If
    End With
  
    myRange.Cells(2, 4).Select
    With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_STABLE_HEADER) ' "Stable?"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_OUTPUT_STABLE_NOTE)
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_REGRESS_STABILITY_TEST_OUTPUT_STABLE_NOTE)
      End If
      
    End With
    
  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)
    End If
  End With
    
  
  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 5)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With

  ' Now, let's create the formulas
  ' =ChowTest($F$3:$F$7,$B$3:$E$7,$F$8:$F$12,$B$8:$E$12,,2)
  szTemp = "=ChowTest(" & myMissingValueUO.procStatInputRange(myDataset1.DEPENDENT_DATA_NO_LABELS) & _
                      "," & myMissingValueUO.procStatInputRange(myDataset1.GET_INPUT_DATA_RNG) & "," & _
                      myMissingValueUO.procStatInputRange(myDataset2.DEPENDENT_DATA_NO_LABELS) & "," & _
                      myMissingValueUO.procStatInputRange(myDataset2.GET_INPUT_DATA_RNG) & "," & _
                      myDataset1.INPUT_MASK & ","
                      
  If Not myInterceptIsNan Then
    szTemp = szTemp & CStr(myIntercept)
  End If
  szTemp = szTemp & ","
  
  myRange.Cells(3, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .formula = szTemp & "2)"
    .NumberFormat = "#0.000"
  End With
  
  myRange.Cells(3, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .formula = "=FINV(" & myRange.Cells(2, 5).Address() & "," & Range(myDataset1.GET_INPUT_DATA_RNG).columns.count & "," & (Range(myDataset1.GET_INPUT_DATA_RNG).rows.count + Range(myDataset2.GET_INPUT_DATA_RNG).rows.count - 2 * Range(myDataset1.GET_INPUT_DATA_RNG).columns.count) & ")"
    .NumberFormat = "#0.000"
  End With
  
  
  myRange.Cells(3, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .formula = szTemp & "1)"
    .NumberFormat = "#0.00%"
  End With

  szTemp = "=IF(" & myRange.Cells(3, 3).Address(RowAbsolute:=False) & ">" & myRange.Cells(2, 5).Address() & ", TRUE, FALSE)"
  myRange.Cells(3, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp
  End With

SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myDataset1.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Attribute VB_Name = "RegressionUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: RegressionUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/RegressionUO.cls $
'
Private Const msMODULE As String = "CLASS:RegressionUO"

Private myIntercept As String
Private myInterceptIsNan As Boolean

' Output Options
Private myGOFOutput As Boolean
Private myANOVAOutput As Boolean
Private myParamCIOutput As Boolean
Private myResidualDiagnosis As Boolean

'Automodel option
Private myStepwiseRegression As Boolean
Private myForwardStepwiseRegression As Boolean
Private myBacwardStepwiseRegression As Boolean
Private myBidirectionalStepwiseRegression As Boolean

'Forecast Range
Private myForecastInputRng As String


Public Property Get INTERCEPT_VALUE() As String
    INTERCEPT_VALUE = myIntercept
End Property

Public Property Let INTERCEPT_VALUE(ByVal vNewValue As String)
  myIntercept = vNewValue
End Property

Public Function LocalFreeIntercept() As String
  ' Convert mySignificanceLevel to US number format
  Dim intercept As Double
  
  intercept = getAlphaValue(myIntercept)
  LocalFreeIntercept = IIf(IsNumeric(intercept), sNumToUS(intercept), myIntercept)
End Function

Public Property Get INTERCEPT_NAN() As Boolean
    INTERCEPT_NAN = myInterceptIsNan
End Property

Public Property Let INTERCEPT_NAN(ByVal vNewValue As Boolean)
  myInterceptIsNan = vNewValue
End Property

Public Property Get FORECAST_INPUT() As String
    FORECAST_INPUT = myForecastInputRng
End Property

Public Property Let FORECAST_INPUT(ByVal vNewValue As String)
  myForecastInputRng = vNewValue
End Property

Public Property Get RESID_DIAGNOSIS() As Boolean
    RESID_DIAGNOSIS = myResidualDiagnosis
End Property

Public Property Let RESID_DIAGNOSIS(ByVal vNewValue As Boolean)
  myResidualDiagnosis = vNewValue
End Property


Public Property Get STEPWISE_BKWD() As Boolean
    STEPWISE_BKWD = myBacwardStepwiseRegression
End Property

Public Property Let STEPWISE_BKWD(ByVal vNewValue As Boolean)
  myBacwardStepwiseRegression = vNewValue
End Property


Public Property Get STEPWISE_FWD() As Boolean
    STEPWISE_FWD = myForwardStepwiseRegression
End Property

Public Property Let STEPWISE_FWD(ByVal vNewValue As Boolean)
  myForwardStepwiseRegression = vNewValue
End Property


Public Property Get STEPWISE_BIDIRECTIONAL() As Boolean
    STEPWISE_BIDIRECTIONAL = myBidirectionalStepwiseRegression
End Property

Public Property Let STEPWISE_BIDIRECTIONAL(ByVal vNewValue As Boolean)
  myBidirectionalStepwiseRegression = vNewValue
End Property


Public Property Get STEPWISE_REG() As Boolean
    STEPWISE_REG = myStepwiseRegression
End Property

Public Property Let STEPWISE_REG(ByVal vNewValue As Boolean)
  myStepwiseRegression = vNewValue
End Property

Public Property Get PARAMCI() As Boolean
    PARAMCI = myParamCIOutput
End Property

Public Property Let PARAMCI(ByVal vNewValue As Boolean)
  myParamCIOutput = vNewValue
End Property


Public Property Get ANOVA() As Boolean
    ANOVA = myANOVAOutput
End Property

Public Property Let ANOVA(ByVal vNewValue As Boolean)
  myANOVAOutput = vNewValue
End Property


Public Property Get GOF() As Boolean
    GOF = myGOFOutput
End Property

Public Property Let GOF(ByVal vNewValue As Boolean)
  myGOFOutput = vNewValue
End Property


Public Sub ResetToDefault()
' Initialize the values
  myInterceptIsNan = True
  myIntercept = 0
  
  myGOFOutput = True
  myANOVAOutput = True
  myParamCIOutput = True
  myResidualDiagnosis = True
  
  myStepwiseRegression = False
  myForwardStepwiseRegression = True
  myBacwardStepwiseRegression = True
  myBidirectionalStepwiseRegression = True
  
  myForecastInputRng = ""
End Sub


' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim row As Long
  Dim column As Long
  Dim myCollinearity As CollinearityTestUO
  
  On Error GoTo ErrorHdler
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  If Not myGeneralUO.GROUPBY_COLUMNS Then
    xVars = Range(myGeneralUO.INPUT_RANGE).rows.count
  End If
  
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_LINEAR_REGRESSION_HEADER) ' "Linear Regression Analysis"
  End With

  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count

  row = 1
  column = 1

  ' Regression Test (Y/N)
  row = 3
  If Me.GOF Then
    Call printRegressionStatistics(myRange.Cells(row, 1), myGeneralUO, myMissingValueUO)
    row = row + 9
  End If

  If Me.ANOVA Then
    Call printANOVATable(myRange.Cells(row, 1), myGeneralUO, myMissingValueUO)
    
    If Not Me.RESID_DIAGNOSIS Then
      row = row + 7
    End If
  End If

  If Me.RESID_DIAGNOSIS Then
    column = 1
    If Me.ANOVA Then
      column = 9
    End If
    Call Me.printResidualsDiagnosisTable(myRange.Cells(row, column), myGeneralUO, myMissingValueUO)
    
    row = row + 7
    column = 1
  End If

  column = 1
  If Me.PARAMCI Then
    Call printRarametersTable(myRange.Cells(row, 1), myGeneralUO, myMissingValueUO)
    If Not Me.STEPWISE_REG Then
      row = row + xVars + 4
    End If
    column = 10
  End If
  
  If Me.STEPWISE_REG Then
    Call printStepwiseTable(myRange.Cells(row, column), myGeneralUO, myMissingValueUO)
    
    row = row + xVars + 7
  End If
  column = 1

  If Len(Me.FORECAST_INPUT) > 0 Then
    Call printForecastTable(myRange.Cells(row, column), myGeneralUO, myMissingValueUO)
  End If
  
  
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Public Sub printRegressionStatistics(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim row As Long
  Dim column As Long
  Dim szTemp As String
  
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  
  
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STAT_MSG) ' "Regression Statistics"
  End With
  
  ' Draw a Borders
  Range(myRange.Cells(1, 1), myRange.Cells(1, 2)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  row = 2
  myRange.Cells(2, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_MSG) ' "R Square"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_NOTE)
    End If
  End With
    
    
  szTemp = "=MLR_GOF(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    szTemp = szTemp & ",,"
  Else
    szTemp = szTemp & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If

  myRange.Cells(2, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp & "1)"
    .NumberFormat = "#0.0%"
  End With
    
    
  row = 3
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_ARSQ_MSG) ' "Adjusted R Square"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_ARSQ_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_ARSQ_NOTE)
    End If
  End With
    
  myRange.Cells(row, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp & "2)"
    .NumberFormat = "#0.0%"
  End With
    
  row = 4
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_MSG) ' "Standard Error"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_NOTE)
    End If
  End With
    
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp & "3)"
    .NumberFormat = "#0.00"
  End With
    
    
  row = 5
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER)  ' "LLF"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE)
    End If
  End With
    
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp & "4)"
    .NumberFormat = "#0.00"
  End With
    
  row = 6
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)
    End If
  End With
    
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    ' =MLR_GOF($B$2:$C$21,$D$2:$D$21,,2)
    .formula = szTemp & "5)"
    .NumberFormat = "#0.00"
  End With
    
  row = 7
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_SBIC_HEADER) ' "SBIC"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_SBIC_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_SBIC_NOTE)
    End If
  End With
    
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = szTemp & "6)"
    .NumberFormat = "#0.00"
  End With
    
  row = 8
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_NUM_OBS_HEADER) '  "Observations"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_NUM_OBS_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_NUM_OBS_NOTE)
    End If
  End With
    

  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .formula = "=MV_OBS(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS) & ")"
    .NumberFormat = "#0"
  End With
    
  ' Draw a Borders
  Range(myRange.Cells(row, 1), myRange.Cells(1, 2)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
    
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Public Sub printANOVATable(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printANOVATable"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim nObservations As Long
  Dim row As Long
  Dim column As Long
  Dim szTmp As String
  
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  nObservations = Range(myGeneralUO.DEPENDENT_RANGE).rows.count
  
  row = 1
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = "ANOVA"
  End With
  
  myRange.Cells(row, 7).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
  End With
  
  row = 2
  ' Draw a Borders
  Range(myRange.Cells(row, 1), myRange.Cells(row, 7)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  ' Print the labels
  myRange.Cells(row, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_DF_MSG)  ' "df"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_DF_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_DF_NOTE)
    End If
  End With
  
  myRange.Cells(row, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_SS_MSG) ' "SS"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_SS_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_SS_NOTE)
    End If
  End With
  
  myRange.Cells(row, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_MS_MSG) '  "MS"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_MS_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_MS_NOTE)
    End If
  End With
  
  myRange.Cells(row, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_F_MSG) '  "F"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_F_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_F_NOTE)
    End If
  End With
  
  myRange.Cells(row, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
    End If
  End With
    
  myRange.Cells(row, 7).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_SIG_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_SIG_NOTE)
    End If
  End With
    
    
    
  row = 3
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_HEADER_MSG) ' "Regression"
  End With
    
  myRange.Cells(row + 1, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_RESIDUALS_HEADER_MSG) ' "Residuals"
  End With
    
  myRange.Cells(row + 2, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_TOTAL_HEADER_MSG) '  "Total"
  End With
    
    
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=MV_VARS(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & ")"
  End With
    
  
  myRange.Cells(row + 2, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=MV_OBS(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS) & ") - 1"
  End With
  
  myRange.Cells(row + 1, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=" & myRange.Cells(row + 2, 2).Address() & "-" & myRange.Cells(row, 2).Address()
  End With
    
    
    
  szTmp = "=MLR_ANOVA(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    szTmp = szTmp & ",,"
  Else
    szTmp = szTmp & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If

  myRange.Cells(row, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "1)"
    .NumberFormat = "#0"
  End With
    
  myRange.Cells(row + 1, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "2)"
    .NumberFormat = "#0"
  End With
    
  myRange.Cells(row + 2, 3).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "3)"
    .NumberFormat = "#0"
  End With
    
    
    
  myRange.Cells(row, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "4)"
    .NumberFormat = "#0.0"
  End With
    
  myRange.Cells(row + 1, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "5)"
    .NumberFormat = "#0.0"
  End With
  
  
  
  myRange.Cells(row, 5).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=" & myRange.Cells(row, 4).Address() & "/" & myRange.Cells(row + 1, 4).Address()
    .NumberFormat = "#0.00"
  End With
    
  myRange.Cells(row, 6).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=FDIST(" & myRange.Cells(row, 5).Address() & "," & myRange.Cells(row, 2).Address() & "," & myRange.Cells(row + 1, 2).Address() & ")"
    .NumberFormat = "#0.0%"
  End With
    
  myRange.Cells(row, 7).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = "=(" & myRange.Cells(row, 6).Address() & "<" & myRange.Cells(1, 7).Address() & ")"
  End With
    
  Range(myRange.Cells(row + 2, 1), myRange.Cells(row + 2, 8)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
    
    
    
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Public Sub printRarametersTable(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printANOVATable"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim nObservations As Long
  Dim DF As Long
  Dim i As Long
  Dim row As Long
  Dim oldRow As Long
  Dim column As Long
  Dim szTmp As String
  
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  nObservations = Range(myGeneralUO.DEPENDENT_RANGE).rows.count
  DF = nObservations - xVars - 1
  
  row = 1
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_HEADER_MSG) ' "Regression Coefficients"
  End With
  
  myRange.Cells(row, 8).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
  End With
  
  
  
  row = 2
  ' Draw a Borders
  Range(myRange.Cells(row, 1), myRange.Cells(row, 8)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  ' Print the labels
  myRange.Cells(row, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TABLE_VALUE_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TABLE_VALUE_NOTE)
    End If
  End With
  
  myRange.Cells(row, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_ABREV_MSG) ' "std. Error"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_STDERR_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_STDERR_NOTE)
    End If
  End With
  
  myRange.Cells(row, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_TSTAT_MSG) ' "t-stat"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_TSTAT_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_TSTAT_NOTE)
    End If
  End With
  
  myRange.Cells(row, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)
    End If
  End With
  
  myRange.Cells(row, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_HEADER) ' "LL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_NOTE)
    End If
  End With
    
  myRange.Cells(row, 7).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_HEADER) ' "UL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_NOTE)
    End If
  End With
    
  myRange.Cells(row, 8).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_COEFF_SIG_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_COEFF_SIG_NOTE)
    End If
  End With
    
    
  oldRow = row
  

  For i = 1 To xVars + 1
    If myGeneralUO.HAS_LABELS And _
      i > 1 Then
      szTmp = myGeneralUO.GET_INPUT_DATA_LABEL(i - 1)
    Else
      szTmp = "X" & (i - 1)
    End If
  
    If i = 1 Then
      szTmp = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_INTERCEPT_CAPTION)  ' "Intercept"
    End If
    
    row = row + 1
    myRange.Cells(row, 1).Select
    With Selection
      .HorizontalAlignment = xlRight
      .Font.Italic = True
      .Font.Bold = False
      .value = szTmp
    End With
    
    ' print the value
    szTmp = "=MLR_PARAM(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
    If Me.INTERCEPT_NAN Then
      szTmp = szTmp & ",,"
    Else
      szTmp = szTmp & "," & CStr(Me.INTERCEPT_VALUE) & ","
    End If
    
    myRange.Cells(row, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTmp & "1," & (i - 1) & ")"
      .NumberFormat = "#0.00"
    End With
    
    ' print the error
    myRange.Cells(row, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTmp & "2," & (i - 1) & ")"
      .NumberFormat = "#0.00"
    End With
    
    ' print the t-stat
    myRange.Cells(row, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      '=MLR_PARAM($B$2:$C$21,$D$2:$D$21,,1,0)
      .formula = szTmp & "3," & (i - 1) & ")"
      .NumberFormat = "#0.00"
    End With
    
    ' print the p-value
    myRange.Cells(row, 5).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=TDIST(abs(" & myRange.Cells(row, 4).Address() & ")," & DF & ",1)"
      .NumberFormat = "#0.0%"
    End With
  
  
    ' print the lower value
    myRange.Cells(row, 6).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTmp & "6," & (i - 1) & "," & myRange.Cells(1, 8).Address() & ")"
      .NumberFormat = "#0.00"
    End With
  
    ' print the upper value
    myRange.Cells(row, 7).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTmp & "5," & (i - 1) & "," & myRange.Cells(1, 8).Address() & ")"
      .NumberFormat = "#0.00"
    End With
  
    ' print Significant Issue
    myRange.Cells(row, 8).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=" & myRange.Cells(row, 5).Address() & "<" & "(" & myRange.Cells(1, 8).Address() & "/2)"
    End With
  Next i
    
  Range(myRange.Cells(row, 1), myRange.Cells(row, 8)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
    
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Public Sub printResidualsDiagnosisTable(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
  Const sSOURCE As String = "printResidualsDiagnosisTable"
 
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim ResidualsEqn As String
  Dim oldSignificancelevel As String
  Dim XKURT As String
  Dim row As Long
  Dim i As Long
  Dim Labels(1 To 5) As String
  Dim Formulas(1 To 5) As String
  Dim TargetVals(1 To 4) As Double
  Dim TestResults(1 To 4) As String
  
  On Error GoTo ErrorHdler
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  Labels(1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_AVG_HEADER) ' "AVG"
  Labels(2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_HEADER) ' "STDEV"
  Labels(3) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_SKEW_HEADER) ' "SKEW"
  Labels(4) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_KURTOSIS_HEADER)  ' "KURTOSIS"
  Labels(5) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_Q_HEADER) ' "Normal?"
  
  TargetVals(1) = 0
  TargetVals(2) = 1
  TargetVals(3) = 0
  TargetVals(4) = 0
  
  ResidualsEqn = "RMNA(MLR_FITTED(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    ResidualsEqn = ResidualsEqn & ",,"
  Else
    ResidualsEqn = ResidualsEqn & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If
  ResidualsEqn = ResidualsEqn & "3))"
  
  row = 1
  myRange.Cells(row, 2).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_HEADER) ' "Residuals (standardized) Analysis"
  End With

  myRange.Cells(row, 6).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
  End With

  Formulas(1) = "=AVERAGE(" & ResidualsEqn & ")"
  Formulas(2) = "=STDEV(" & ResidualsEqn & ")"
  Formulas(3) = "=SKEW(" & ResidualsEqn & ")"
  Formulas(4) = "=KURT(" & ResidualsEqn & ")"
  Formulas(5) = "=IF(NormalityTest(" & ResidualsEqn & ",1) >" & myRange.Cells(row, 6).Address() & ", TRUE, FALSE)"

  ' Set the borderline
  row = 2
  Range(myRange.Cells(row, 2), myRange.Cells(row, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  For i = 1 To 5
      myRange.Cells(row, 1 + i).Select
      With Selection
          .value = Labels(i)
          .Font.Bold = True
          .HorizontalAlignment = xlCenter
      End With
  Next i
    
  row = 3
  For i = 1 To 5
    myRange.Cells(row, 1 + i).Select
    With Selection
      .formula = Formulas(i)
      .NumberFormat = "#0.00"
      .HorizontalAlignment = xlCenter
    End With
  Next i
  
  row = 4
  myRange.Cells(4, 1).Select
  With Selection
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TARGET_HEADER) ' "Target"
  End With
    
  TestResults(1) = "=IF( TEST_MEAN(" & ResidualsEqn & "," & myRange.Cells(4, 2).Address(False, False) & ") >" & myRange.Cells(1, 6).Address() & "/2, FALSE, TRUE)"
  TestResults(2) = "=IF( TEST_STDEV(" & ResidualsEqn & "," & myRange.Cells(4, 3).Address(False, False) & ") >" & myRange.Cells(1, 6).Address() & ", FALSE, TRUE)"
  TestResults(3) = "=IF( TEST_SKEW(" & ResidualsEqn & ") >" & myRange.Cells(1, 6).Address() & "/2, FALSE, TRUE)"
  TestResults(4) = "=IF( TEST_XKURT(" & ResidualsEqn & ") >" & myRange.Cells(1, 6).Address() & "/2, FALSE, TRUE)"
  
  For i = 1 To 4
    myRange.Cells(row, 1 + i).Select
    With Selection
      .formula = TargetVals(i)
      .NumberFormat = "#0.00"
      .HorizontalAlignment = xlCenter
    End With
  Next i
    
  row = 5
  myRange.Cells(row, 1).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_SIGNIFICANCE_TEST_HEADER) ' "SIG?"
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_DESCSTAT_OUTPUT_SIGNIFICANCE_TEST_HEADER)  ' "SIG?"
      End If
  End With
    
  For i = 1 To 4
    myRange.Cells(row, 1 + i).Select
    With Selection
      .formula = TestResults(i)
      .HorizontalAlignment = xlCenter
    End With
  Next i

Cleanup:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub



Public Sub printStepwiseTable(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printStepwiseTable"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim i As Long
  Dim row As Long
  Dim oldRow As Long
  Dim column As Long
  Dim szTmp As String
  
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  If Not myGeneralUO.GROUPBY_COLUMNS Then
    xVars = Range(myGeneralUO.INPUT_RANGE).rows.count
  End If
  
  row = 1
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_HEADER_MSG) '  "Stepwise Regression"
  End With
  
  myRange.Cells(row, 4).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
  End With
  
  
  row = 2
  ' Draw a Borders
  Range(myRange.Cells(row, 1), myRange.Cells(row, 4)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
    
  ' Print the labels
  myRange.Cells(row, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_FWD_HEADER_MSG) ' "FWD"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_CAPTION) ' "Foreward Selection"
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_CAPTION) ' "Foreward Selection"
    End If
  End With
  
  myRange.Cells(row, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_BKWD_HEADER_MSG) ' "BKWD"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_CAPTION)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_CAPTION)
    End If
  End With
  
  myRange.Cells(row, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_BIDI_HEADER_MSG) '  "BIDI"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_CAPTION)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_CAPTION)
    End If
    
  End With
    
  oldRow = row
  For i = 1 To xVars + 1
    If myGeneralUO.HAS_LABELS And _
      i > 1 Then
      szTmp = myGeneralUO.GET_INPUT_DATA_LABEL(i - 1)
    Else
      szTmp = "X" & (i - 1)
    End If
  
    If i = 1 Then
      szTmp = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_INTERCEPT_CAPTION) ' "Intercept"
    End If
    
    row = row + 1
    myRange.Cells(row, 1).Select
    With Selection
      .HorizontalAlignment = xlRight
      .Font.Italic = True
      .Font.Bold = False
      .value = szTmp
    End With
  Next i
  
  oldRow = oldRow + 1
  szTmp = "=MLR_STEPWISE(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & myGeneralUO.INPUT_MASK & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    szTmp = szTmp & ",,"
  Else
    szTmp = szTmp & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If
  
  ' Now create the array formula
  ' Forward
  
  If Me.INTERCEPT_NAN Then
    myRange.Cells(oldRow, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 1
      .NumberFormat = "#0"
    End With
  Else
    myRange.Cells(oldRow, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 0
      .NumberFormat = "#0"
    End With
  End If
  
  
  Range(myRange.Cells(oldRow + 1, 2), myRange.Cells(oldRow + xVars, 2)).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Italic = False
    .Font.Bold = False
    .FormulaArray = szTmp & "1)"
    .NumberFormat = "#0"
  End With
  
  ' Backward
  If Me.INTERCEPT_NAN Then
    myRange.Cells(oldRow, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 1
      .NumberFormat = "#0"
    End With
  Else
    myRange.Cells(oldRow, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 0
      .NumberFormat = "#0"
    End With
  End If
  
  Range(myRange.Cells(oldRow + 1, 3), myRange.Cells(oldRow + xVars, 3)).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Italic = False
    .Font.Bold = False
    .FormulaArray = szTmp & "2)"
    .NumberFormat = "#0"
  End With
  
  ' Bi-directional
  If Me.INTERCEPT_NAN Then
    myRange.Cells(oldRow, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 1
      .NumberFormat = "#0"
    End With
  Else
    myRange.Cells(oldRow, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Italic = False
      .Font.Bold = False
      .value = 0
      .NumberFormat = "#0"
    End With
  End If
  
  Range(myRange.Cells(oldRow + 1, 4), myRange.Cells(oldRow + xVars, 4)).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Italic = False
    .Font.Bold = False
    .FormulaArray = szTmp & "3)"
    .NumberFormat = "#0"
  End With
  
  Range(myRange.Cells(row, 1), myRange.Cells(row, 4)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
  End With
    
  ' Here we need to compute some measure of goodness of fit
  szTmp = "=MLR_GOF(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & _
            Range(myRange.Cells(oldRow + 1, 2), myRange.Cells(oldRow + xVars, 2)).Address(True, False) & "," & myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    szTmp = szTmp & ",,"
  Else
    szTmp = szTmp & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If
  
  row = row + 1
  myRange.Cells(row, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_MSG) ' "R Square"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_NOTE)
    End If
  End With
  
  myRange.Cells(row, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "1)"
    .NumberFormat = "#0.0%"
  End With
  

  myRange.Cells(row + 1, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_MSG) ' "Standard Error"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_NOTE)
    End If
  End With
  
  myRange.Cells(row + 1, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "3)"
    .NumberFormat = "#0.0"
  End With
  
  myRange.Cells(row + 2, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlRight
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE)
    End If
  End With
  
  myRange.Cells(row + 2, 2).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = False
    .formula = szTmp & "5)"
    .NumberFormat = "#0.0"
  End With
    
  ' Now copy cells to the right (formulas)
  Range(myRange.Cells(row, 2), myRange.Cells(row + 2, 2)).Copy Range(myRange.Cells(row, 3), myRange.Cells(row + 2, 3))
  Range(myRange.Cells(row, 2), myRange.Cells(row + 2, 2)).Copy Range(myRange.Cells(row, 4), myRange.Cells(row + 2, 4))
    
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub



Public Sub printForecastTable(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
  Const sSOURCE As String = "printResidualsDiagnosisTable"
  
  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim xVars As Long
  Dim i As Long
  Dim j As Long
  Dim row As Long
  Dim oldRow As Long
  Dim column As Long
  Dim szTmp As String
  Dim szEqn As String
  Dim szFormat As String
  Dim fcstObj As GeneralUO
  Dim rng As Object
  Dim rng2 As Object
  Dim nCount As Long
  
  
  On Error GoTo ErrorHdler
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' get the input data
  ' get the input data
  xVars = Range(myGeneralUO.INPUT_RANGE).columns.count
  If Not myGeneralUO.GROUPBY_COLUMNS Then
    xVars = Range(myGeneralUO.INPUT_RANGE).rows.count
  End If
  
  row = 1
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_FORECAST_HEADER_MSG) ' "Forecast Table"
  End With
  
  myRange.Cells(row, 5 + xVars).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
  End With
  oldRow = row
  
  row = 2
  ' Draw a Borders
  Range(myRange.Cells(row, 1), myRange.Cells(row, 5 + xVars)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With
  
  
  ' Print the labels
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_NUM_OBS_ABBREV_HEADER) '  "Obs"
  End With
  
  
  For i = 1 To xVars
    If myGeneralUO.HAS_LABELS Then
      szTmp = myGeneralUO.GET_INPUT_DATA_LABEL(i)
    Else
      szTmp = "X" & i
    End If
    
    myRange.Cells(row, i + 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .value = szTmp
    End With
  Next i
  
  
  ' Do we have a label for the output
  If myGeneralUO.DEPENDENT_HAS_LABELS Then
    szTmp = Range(myGeneralUO.DEPENDENT_RANGE).Cells(1, 1).value
  Else
    szTmp = "Y"
  End If
  
  myRange.Cells(row, 2 + xVars).Select
  With Selection
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = szTmp
  End With
  
  
  myRange.Cells(row, 3 + xVars).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_ABREV_MSG) ' "Std. Error"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_FORECAST_STDERR_NOTE) ' "Std. Error"
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_MLR_OUTPUT_TBL_REGRESSION_FORECAST_STDERR_NOTE) ' "Std. Error"
    End If
  End With
  
  
  myRange.Cells(row, 4 + xVars).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_HEADER) ' "LL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_LL_NOTE)
    End If
  End With
  
  myRange.Cells(row, 5 + xVars).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = False
    .Font.Italic = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_HEADER) ' "UL"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_UL_NOTE)
    End If
  End With
  
  ' Dim fcstObj As GeneralUO
  Set fcstObj = New GeneralUO
    
  fcstObj.INPUT_RANGE = Me.FORECAST_INPUT
  fcstObj.INPUT_MASK = myGeneralUO.INPUT_MASK
  fcstObj.GROUPBY_COLUMNS = myGeneralUO.GROUPBY_COLUMNS
  
  Set rng = Range(fcstObj.INPUT_DATA_NO_LABELS)
  
  szFormat = Range(myGeneralUO.DEPENDENT_DATA_NO_LABELS).Cells(1, 1).NumberFormat
  
  ' Special case for one obs
  If xVars > 1 Then
    If fcstObj.GROUPBY_COLUMNS Then
      nCount = rng.rows.count
    Else
      nCount = rng.columns.count
    End If
  Else
    nCount = rng.Cells.count
  End If
  
  szEqn = "=MLR_FORE(" & myMissingValueUO.procStatInputRange(myGeneralUO.GET_INPUT_DATA_RNG) & "," & _
             myGeneralUO.INPUT_MASK & "," & _
             myMissingValueUO.procStatInputRange(myGeneralUO.DEPENDENT_DATA_NO_LABELS)
  If Me.INTERCEPT_NAN Then
    szEqn = szEqn & ",,"
  Else
    szEqn = szEqn & "," & CStr(Me.INTERCEPT_VALUE) & ","
  End If
  
  
  For i = 1 To nCount
    myRange.Cells(row + i, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .value = i
    End With
    
    If xVars > 1 Then
      If fcstObj.GROUPBY_COLUMNS Then
        Set rng2 = Range(rng.Cells(i, 1), rng.Cells(i, xVars))
      Else
        Set rng2 = Range(rng.Cells(1, i), rng.Cells(xVars, i))
      End If
    Else
     If rng.columns.count = 1 Then
      Set rng2 = Range(rng.Cells(i, 1), rng.Cells(i, 1))
     Else
      Set rng2 = Range(rng.Cells(1, i), rng.Cells(1, i))
     End If
    End If

    For j = 1 To xVars
      If rng2.rows.count > rng2.columns.count Then
        szTmp = rng2.Cells(j, 1).value
        szFormat = rng2.Cells(j, 1).NumberFormat
      Else
        szTmp = rng2.Cells(1, j).value
        szFormat = rng2.Cells(1, j).NumberFormat
      End If
    
      myRange.Cells(row + i, j + 1).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .Font.Italic = True
        .value = szTmp
        .NumberFormat = szFormat
      End With
    Next j
    
    szTmp = szEqn & Range(myRange.Cells(row + i, 2), myRange.Cells(row + i, xVars + 1)).Address(False, True) & ","
    
    'Forecast Value
    myRange.Cells(row + i, xVars + 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .formula = szTmp & "1," & myRange.Cells(oldRow, 5 + xVars).Address() & ")"
      .NumberFormat = Range(myGeneralUO.DEPENDENT_DATA_NO_LABELS).Cells(1, 1).NumberFormat
    End With
    
    'Forecast error
    myRange.Cells(row + i, xVars + 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .formula = szTmp & "2," & myRange.Cells(oldRow, 5 + xVars).Address() & ")"
      .NumberFormat = Range(myGeneralUO.DEPENDENT_DATA_NO_LABELS).Cells(1, 1).NumberFormat
    End With
    
    'LL
    myRange.Cells(row + i, xVars + 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .formula = szTmp & "4," & myRange.Cells(oldRow, 5 + xVars).Address() & ")"
      .NumberFormat = Range(myGeneralUO.DEPENDENT_DATA_NO_LABELS).Cells(1, 1).NumberFormat
    End With
    
    'UL
    myRange.Cells(row + i, xVars + 5).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .Font.Italic = True
      .formula = szTmp & "3," & myRange.Cells(oldRow, 5 + xVars).Address() & ")"
      .NumberFormat = Range(myGeneralUO.DEPENDENT_DATA_NO_LABELS).Cells(1, 1).NumberFormat
    End With
  Next i
    
SubExit:
  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
  
  Set fcstObj = Nothing
  
  ' Restore old Value
  ' myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "ResampleFrm"
Attribute VB_Base = "0{83F1EEA9-9E43-4393-A53C-3A8C61195B62}{E23A79D2-2645-4F01-90A5-70D70EF6B244}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: ResampleFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/ResampleFrm.frm $
'
Private Const msMODULE As String = "USERFORM:ResampleFrm"
Private Const zenSlugId As String = "articles/216454563"

Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdHelp.HelpContextID)
End Sub
Attribute VB_Name = "SARIMAMODEL"
Attribute VB_Base = "0{4191D4B8-7320-4A05-ACA2-4B7013DA6170}{AB227587-24C0-4215-BFB9-BF529E9707DB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SARIMAMODEL.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SARIMAMODEL.frm $
'
Private Const msMODULE As String = "USERFORM:ARMAModel"
Private Const zenSlugId As String = "articles/216534503"

Private callValidateForm As Boolean
Private userOptions As SARIMAModelUO

Private Sub AROrder_Change()
  Const sSOURCE As String = "AROrder_Change"
  
  If IsNumeric(AROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      AROrder.value = vbNullString
    Else
        userOptions.P = AROrder.value
    End If
  Else
      If AROrder.value <> vbNullString And _
          AROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        AROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub


Private Sub IntOrder_Change()
  userOptions.Integral = IntOrder.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub SIntOrder_Change()
  userOptions.SIntegral = SIntOrder.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub SPeriod_Change()
  userOptions.SPeriod = SPeriod.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub SAROrder_Change()
  Const sSOURCE As String = "SAROrder_Change"
  
  If IsNumeric(SAROrder.value) Then
    If AROrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers allowed."
      
      SAROrder.value = vbNullString
    Else
        userOptions.SP = SAROrder.value
    End If
  Else
      If SAROrder.value <> vbNullString And _
          SAROrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        SAROrder.value = vbNullString
      End If
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
    
End Sub



Private Sub btnCancel_Click()
  Unload Me
End Sub

Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim myRange As Object
  Dim inRange As Object
  Dim NA As Boolean
  
  
  On Error GoTo ErrorHnadler
  Call Utilities.OptimizeCode_Begin
  
  ' (1) Read the model coefficient
  userOptions.P = AROrder
  userOptions.Q = MAOrder
  userOptions.Integral = IntOrder
  
  userOptions.SP = SAROrder
  userOptions.SQ = SMAOrder
  userOptions.SIntegral = SIntOrder
  userOptions.SPeriod = SPeriod
    
  Set inRange = Range(RefInputArray)
  If Not isTimeSeriesValid(inRange) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  End If
    
  ' Set the output range now
  Set myRange = Range(RefOutputRange)
  If (myRange Is Nothing) Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
    Exit Sub
  End If

  ' check the value of the significanceLevel
  If RefEditSignificanceLevel.enabled Then
    If Not isAlphaValid(RefEditSignificanceLevel.value) Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
      RefEditSignificanceLevel.value = vbNullString
      Exit Sub
    End If
  End If

  'Make sure we have a valid model order
  If Not userOptions.isValidModel() Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_INVALID_ERROR) ' "Invalid model order."
      Exit Sub
  End If
      
  Call userOptions.printModelOutput(myRange)
    
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub


Private Sub chkAscending_Click()
    userOptions.ASCENDING = chkAscending.value
    
End Sub

Private Sub ChkDiagnosis_Click()
  userOptions.includeResidualDiagnosis = ChkDiagnosis.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGoodness_Click()
  userOptions.includeGoodnessOfFit = chkGoodness.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub


Private Sub chkGuessParams_Click()
  userOptions.GuessParameters = chkGuessParams.value
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub optCalibrateParams_Click()
  userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub MAOrder_Change()
  Const sSOURCE As String = "MAOrder_Change"
  
  If IsNumeric(MAOrder.value) Then
    If MAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      MAOrder.value = vbNullString
    Else
        userOptions.Q = MAOrder.value
    End If
  Else
      If MAOrder.value <> vbNullString And _
          MAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        MAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub SMAOrder_Change()
  Const sSOURCE As String = "SMAOrder_Change"
  
  If IsNumeric(SMAOrder.value) Then
    If SMAOrder.value < 0 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR) ' "Only zero and positive numbers are allowed."
      
      SMAOrder.value = vbNullString
    Else
        userOptions.Q = SMAOrder.value
    End If
  Else
      If SMAOrder.value <> vbNullString And _
          SMAOrder.value <> "-" Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR) ' "Only numbers allowed."
        
        SMAOrder.value = vbNullString
      End If
  End If
    
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub RefInputArray_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub
Private Sub RefEditSignificanceLevel_Change()
  userOptions.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm Then
    Call validateForm
  End If

End Sub

Private Sub txtMaxIter_Change()
  userOptions.MAX_ITERATIONS = txtMaxIter.value
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  ModelSpecFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL)
  ModelSpecFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_SPEC_FRAME_HELPTIP)
  
  NonseasonalHeaderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_LABEL)
  NonseasonalHeaderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_HELPTIP)
  
  AROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_LABEL)
  AROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  AROrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_AR_HELPTIP)
  
  MAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_LABEL)
  MAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  MAOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARMA_MODEL_MA_HELPTIP)
  
  'IntegralOrderLabel
  IntegralOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_LABEL)
  IntegralOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  IntOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP)
  
  
  ' Seasonal Component
  SeasonalHeaderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_LABEL)
  SeasonalHeaderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_HELPTIP)
  
  SPeriodLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_LABEL)
  SPeriodLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_HELPTIP)
  SPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SPERIOD_HELPTIP)
  
  SIntegralOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_LABEL)
  SIntegralOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_HELPTIP)
  SIntOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_HELPTIP)
  
  SAROrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_LABEL)
  SAROrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
  SAROrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
  
  SMAOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_LABEL)
  SMAOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
  SMAOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP)
    
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL)
  optGuessParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION)
  optGuessParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP)
  
  optCalibrateParams.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION)
  optCalibrateParams.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP)
  
  maxIterTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION)
  maxIterTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  txtMaxIter.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP)
  
  'OutputRangeFrameLabel
  OutputRangeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputRangeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP)

  chkGoodness.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION)
  chkGoodness.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP)
  
  ChkDiagnosis.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION)
  ChkDiagnosis.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  
  
  Set userOptions = New SARIMAModelUO
  
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    chkAscending.value = userOptions.ASCENDING
    AROrder.value = userOptions.P
    MAOrder.value = userOptions.Q
    IntOrder.value = userOptions.Integral
    
    SAROrder.value = userOptions.SP
    SMAOrder.value = userOptions.SQ
    SIntOrder.value = userOptions.SIntegral
    SPeriod.value = userOptions.SPeriod
    
    optGuessParams.value = userOptions.MODEL_PARAM_STATE = COEFF_GUESS
    optCalibrateParams.value = userOptions.MODEL_PARAM_STATE = COEFF_CALIBRATE
    txtMaxIter.value = userOptions.MAX_ITERATIONS
    
    chkGoodness.value = userOptions.includeGoodnessOfFit
    ChkDiagnosis.value = userOptions.includeResidualDiagnosis
    
    RefEditSignificanceLevel.value = userOptions.significance
    RefOutputRange.value = userOptions.OUTPUT_RANGE
  End If
  callValidateForm = True
  Call validateForm
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
  Dim validAlpha As Boolean
    
    inputDataReady = Utilities.isCellRangeValid(RefInputArray.value)
    validAlpha = isAlphaValid(RefEditSignificanceLevel.value)
        
    chkAscending.enabled = inputDataReady
    AROrder.enabled = inputDataReady
    MAOrder.enabled = inputDataReady
    IntOrder.enabled = inputDataReady
    
    SAROrder.enabled = inputDataReady
    SMAOrder.enabled = inputDataReady
    SIntOrder.enabled = inputDataReady
    SPeriod.enabled = inputDataReady
    
    
    If AROrder.enabled Then
      validModel = userOptions.isValidModel()
    Else
      validModel = False
    End If
    
    'chkGuessParams.Enabled = inputDataReady And validModel
    chkGoodness.enabled = inputDataReady And validModel
    
    optGuessParams.enabled = inputDataReady And validModel
    optCalibrateParams.enabled = inputDataReady And validModel
    
    txtMaxIter.enabled = inputDataReady And optCalibrateParams.enabled And optCalibrateParams.value
    maxIterTxtLabel.enabled = txtMaxIter.enabled
    
    RefEditSignificanceLevel.enabled = inputDataReady And validModel And userOptions.includeResidualDiagnosis
    
    ChkDiagnosis.enabled = inputDataReady And validModel And validAlpha
    
    RefOutputRange.enabled = inputDataReady And validModel
    
    ready = RefOutputRange.enabled And Utilities.isCellRangeValid(RefOutputRange.value)

    btnOK.enabled = ready
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub

Attribute VB_Name = "SARIMAModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SARIMAModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SARIMAModelUO.cls $
'
Private Const msMODULE As String = "CLASS:ARMAModelUO"

Private myInputData As String
Private myAscending As Boolean
Private myOutputRange As String
Private mySignificanceLevel As String
Private myP As Integer
Private myQ As Integer
Private myIntegral As Integer

Private mySP As Integer
Private mySQ As Integer
Private mySIntegral As Integer
Private mySPeriod As Integer

Private myModelParamsAction As MODEL_COEFF_STATE_TYPE
Private myMaxIteration As Long

Private myGuessParams As Boolean
Private myGoodnessFit As Boolean
Private myResidDiagnosis As Boolean

Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property
Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property

Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property

Public Property Get significance() As String
  significance = mySignificanceLevel
End Property

Public Property Let significance(ByVal vNewValue As String)
  mySignificanceLevel = vNewValue
End Property

Public Property Get MODEL_PARAM_STATE() As MODEL_COEFF_STATE_TYPE
  MODEL_PARAM_STATE = myModelParamsAction
End Property

Public Property Let MODEL_PARAM_STATE(ByVal vNewValue As MODEL_COEFF_STATE_TYPE)
  myModelParamsAction = vNewValue
End Property

Public Property Get MAX_ITERATIONS() As Long
  MAX_ITERATIONS = myMaxIteration
End Property

Public Property Let MAX_ITERATIONS(ByVal vNewValue As Long)
  myMaxIteration = vNewValue
End Property


Public Property Get P() As Integer
  P = myP
End Property

Public Property Let P(ByVal vNewValue As Integer)
  myP = vNewValue
End Property

Public Property Get SP() As Integer
  SP = mySP
End Property

Public Property Let SP(ByVal vNewValue As Integer)
  mySP = vNewValue
End Property


Public Property Get Q() As Integer
  Q = myQ
End Property

Public Property Let Q(ByVal vNewValue As Integer)
  myQ = vNewValue
End Property

Public Property Get SQ() As Integer
  SQ = mySQ
End Property

Public Property Let SQ(ByVal vNewValue As Integer)
  mySQ = vNewValue
End Property


Public Property Get Integral() As Integer
  Integral = myIntegral
End Property

Public Property Let Integral(ByVal vNewValue As Integer)
  myIntegral = vNewValue
End Property

Public Property Get SIntegral() As Integer
  SIntegral = mySIntegral
End Property

Public Property Let SIntegral(ByVal vNewValue As Integer)
  mySIntegral = vNewValue
End Property

Public Property Get SPeriod() As Integer
  SPeriod = mySPeriod
End Property

Public Property Let SPeriod(ByVal vNewValue As Integer)
  mySPeriod = vNewValue
End Property

Public Property Get GuessParameters() As Boolean
  GuessParameters = myGuessParams
End Property

Public Property Let GuessParameters(ByVal vNewValue As Boolean)
  myGuessParams = vNewValue
End Property

Public Property Get includeGoodnessOfFit() As Boolean
  includeGoodnessOfFit = myGoodnessFit
End Property

Public Property Let includeGoodnessOfFit(ByVal vNewValue As Boolean)
  myGoodnessFit = vNewValue
End Property

Public Property Get includeResidualDiagnosis() As Boolean
  includeResidualDiagnosis = myResidDiagnosis
End Property

Public Property Let includeResidualDiagnosis(ByVal vNewValue As Boolean)
  myResidDiagnosis = vNewValue
End Property



Private Sub Class_Initialize()
  Const sSOURCE As String = "Class_Initialize"
  
  myInputData = ""
  myOutputRange = Utilities.AddressEx(ActiveCell)
  mySignificanceLevel = CStr(0.05)    ' This will adapt to regional setting
  myAscending = True
  
  myResidDiagnosis = True
  myGoodnessFit = True
  myGuessParams = True

  ' Defaul to airline model
  myP = 0
  myQ = 1
  myIntegral = 1
  
  mySP = 0
  mySQ = 1
  mySIntegral = 1
  mySPeriod = 12
  
  myMaxIteration = 100
  myModelParamsAction = COEFF_GUESS
  
End Sub

Public Function isValidModel()
  isValidModel = (P >= 0 Or Q >= 0) And ((P + Q) > 0)
End Function


' Print the Parameters for the model
Public Sub PrintCoefficients(myRange As Range)
  Const sSOURCE As String = "PrintCoefficients"
  
  Dim start As Long
  Dim lphis As String
  Dim lthetas As String
  Dim lsPhis As String
  Dim lsThetas As String
  Dim lmean As String
  Dim lsigma As String
  
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = "SARIMA(" & P & "," & Integral & "," & Q & ")(" & SP & "," & Integral & "," & SQ & ")" & SPeriod
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With
    
  myRange.Cells(2, 2).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER) ' "Param"
    
  myRange.Cells(2, 3).Select
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER) ' "Value"
    
  start = 3
  lmean = myRange.Cells(start, 3).Address(True, True)
  start = start + 1
  If P > 0 Then
    lphis = Range(myRange.Cells(start, 3), myRange(start + P - 1, 3)).Address(True, True)
    start = start + P
  Else
    lphis = ""
  End If
  
  If Q > 0 Then
    lthetas = Range(myRange.Cells(start, 3), myRange(start + Q - 1, 3)).Address(True, True)
    start = start + Q
  Else
    lthetas = ""
  End If
  
  If SP > 0 Then
    lsPhis = Range(myRange.Cells(start, 3), myRange(start + SP - 1, 3)).Address(True, True)
    start = start + SP
  Else
    lsPhis = ""
  End If
  
  If SQ > 0 Then
    lsThetas = Range(myRange.Cells(start, 3), myRange(start + SQ - 1, 3)).Address(True, True)
    start = start + SQ
  Else
    lsThetas = ""
  End If
  
  lsigma = myRange(start, 3).Address(True, True)
    
    
    
  ' (1) Display the Basic Statistics
  ReDim S(1 To (2 + P + Q + SP + SQ), 3)
  S(1, 1) = ChrW$(&H3BC&)
  S(1, 2) = "0"
  S(1, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE) ' ARMA_MEAN_PARAM_NOTE
  
  Dim i As Long
  For i = 1 To P
      S(1 + i, 1) = ChrW$(&H3C6&) & "[" & i & "]"
      S(1 + i, 2) = "0"
      S(1 + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_AR_PARAM_NOTE) ' SARIMA_NON_SEASONAL_AR_PARAM_NOTE
  Next i

  For i = 1 To Q
      S(1 + P + i, 1) = ChrW$(&H3B8&) & "[" & i & "]"
      S(1 + P + i, 2) = "0"
      S(1 + P + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_MA_PARAM_NOTE) ' SARIMA_NON_SEASONAL_MA_PARAM_NOTE
  Next i
  
  For i = 1 To SP
      S(1 + P + Q + i, 1) = ChrW$(&H3A6&) & "[" & i & "]"
      S(1 + P + Q + i, 2) = "0"
      S(1 + P + Q + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_AR_PARAM_NOTE) ' SARIMA_SEASONAL_AR_PARAM_NOTE
  Next i
  
  For i = 1 To SQ
      S(1 + P + Q + SP + i, 1) = ChrW$(&H398&) & "[" & i & "]"
      S(1 + P + Q + SP + i, 2) = "0"
      S(1 + P + Q + SP + i, 3) = i & txtOrder(i) & " " & MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_MA_PARAM_NOTE) ' SARIMA_SEASONAL_MA_PARAM_NOTE
  Next i
  
  ' Sigma of the model
  S(2 + P + Q + SP + SQ, 1) = ChrW$(&H3C3&)
  S(2 + P + Q + SP + SQ, 2) = "1"
  S(2 + P + Q + SP + SQ, 3) = MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE) ' ARMA_SIGMA_PARAM_NOTE
  
  
  For i = 1 To (2 + P + Q + SP + SQ)
    ' Set tmpRange = Nothing
    myRange.Cells(i + 2, 2).Select
    With Selection
        .ClearComments
        .HorizontalAlignment = xlCenter
        .Font.Bold = True
        .value = S(i, 1)
        If .Comment Is Nothing Then
          .AddComment S(i, 3)
        Else
          .Comment.Text Text:=S(i, 3)
        End If
    End With
    Call Super_Sub
    
    myRange.Cells(i + 2, 3).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = S(i, 2)
        .NumberFormat = "0.00"
    End With
  Next i
  
  ' leave a blank line, then print the integration order
  myRange.Cells(P + Q + SP + SQ + 6, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "d"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE) ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE) ' ARIMA_INTEGRATION_ORDER_PARAM_NOTE
      End If
  End With
  Call Super_Sub
  
  myRange.Cells(P + Q + SP + SQ + 6, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = myIntegral
      .NumberFormat = "0"
  End With
  
  ' Write down the Period
  myRange.Cells(P + Q + SP + SQ + 7, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "s"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_LENGTH_PARAM_NOTE)  ' AIRLINE_SEASON_LENGTH_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_LENGTH_PARAM_NOTE)  ' AIRLINE_SEASON_LENGTH_PARAM_NOTE
      End If
  End With
  Call Super_Sub
  
  myRange.Cells(P + Q + SP + SQ + 7, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = mySPeriod
      .NumberFormat = "0"
  End With
  
  ' Write down the seasonal component integration order
  myRange.Cells(P + Q + SP + SQ + 8, 2).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = "D"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE) ' SARIMA_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE) ' SARIMA_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE
      End If
  End With
  Call Super_Sub
  
  myRange.Cells(P + Q + SP + SQ + 8, 3).Select
  With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = mySIntegral
      .NumberFormat = "0"
  End With
  
  'Update the model formula now
  myRange.Cells(1, 1).Select
  With Selection
    .formula = ("=SARIMA(" & lmean & "," & lsigma & "," & myIntegral & "," & lphis & "," & lthetas & "," & mySPeriod & "," & mySIntegral & "," & lsPhis & "," & lsThetas & ")")
  End With
  
  
  
End Sub

' Print the model initial parameters
Public Sub PrintInitialParameter(myRange As Range)
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim start As Long
  Dim nAscending As Integer
  
  If myAscending Then
    nAscending = 1
  Else
    nAscending = 0
  End If
  
  start = 1
  If P > 0 Then
    phis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + myP, 1)).Address(True, True)
    start = start + myP
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + myQ, 1)).Address(True, True)
    start = start + myQ
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + mySP, 1)).Address(True, True)
    start = start + mySP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + mySQ, 1)).Address(True, True)
    start = start + mySQ
  Else
    sThetas = vbNullString
  End If

  Range(myRange.Cells(1, 1), myRange.Cells(start + 1, 1)) = vb_SARIMAGUESS(myInputData, nAscending, _
                                                                                        phis, _
                                                                                        thetas, _
                                                                                        myIntegral, _
                                                                                        sPhis, _
                                                                                        sThetas, _
                                                                                        mySIntegral, _
                                                                                        mySPeriod)
End Sub

' PrintCalibratedParameter
Public Sub PrintCalibratedParameter(myRange As Range)
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim mean As Object
  Dim sigma As Object
  Dim start As Long
  
  Dim nAscending As Integer
  
  If myAscending Then
    nAscending = 1
  Else
    nAscending = 0
  End If
  
  start = 1
  Set mean = Range(myRange.Cells(1, 1), myRange.Cells(1, 1))
  
  If P > 0 Then
    phis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + myP, 1)).Address(True, True)
    start = start + myP
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + myQ, 1)).Address(True, True)
    start = start + myQ
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + mySP, 1)).Address(True, True)
    start = start + mySP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + mySQ, 1)).Address(True, True)
    start = start + mySQ
  Else
    sThetas = vbNullString
  End If

  Set sigma = Range(myRange.Cells(start + 1, 1), myRange.Cells(start + 1, 1))

  Range(myRange.Cells(1, 1), myRange.Cells(start + 1, 1)) = vb_SARIMACALIBRATE(myInputData, nAscending, mean, sigma, _
                                                                    phis, _
                                                                    thetas, _
                                                                    myIntegral, _
                                                                    sPhis, _
                                                                    sThetas, _
                                                                    mySIntegral, _
                                                                    mySPeriod, _
                                                                    myMaxIteration)
End Sub


' Print the Goodness of fit function list
Public Sub PrintGoodnessOfFit(parameters As Range, myRange As Range)
  Const sSOURCE As String = "PrintGoodnessOfFit"
  
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  
  nAscending = 0
  If ASCENDING = True Then
      nAscending = 1
  End If
  
  myRange.Cells(1, 1).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER) ' "Goodness-of-fit"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 3)).Select
  With Selection
      With .Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
      With .Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .ColorIndex = 0
          .Weight = xlMedium         'Use xlThin for smaller border
      End With
  End With

  start = 1
  mean = Range(parameters.Cells(1, 1), parameters.Cells(1, 1)).Address(True, True)
  
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + myP, 1)).Address(True, True)
    start = start + myP
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + myQ, 1)).Address(True, True)
    start = start + myQ
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + mySP, 1)).Address(True, True)
    start = start + mySP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + mySQ, 1)).Address(True, True)
    start = start + mySQ
  Else
    sThetas = vbNullString
  End If

  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
    
  myRange.Cells(2, 1).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER) ' "LLF"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE) ' GOF_LLF_NOTE
  End If
  
   
  myRange.Cells(3, 1).Select
  Selection.formula = "=SARIMA_GOF(" & myInputData & "," & nAscending & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      myIntegral & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      mySPeriod & "," & _
                                      mySIntegral & "," & _
                                      sPhis & "," & _
                                      sThetas & "," & _
                                      "1)"
                                        
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 2).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER) ' "AIC"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE) ' GOF_AIC_NOTE
  End If
  
  myRange.Cells(3, 2).Select
  Selection.formula = "=SARIMA_GOF(" & myInputData & "," & nAscending & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      myIntegral & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      mySPeriod & "," & _
                                      mySIntegral & "," & _
                                      sPhis & "," & _
                                      sThetas & "," & _
                                      "2)"
  Selection.NumberFormat = "0.00"
  
  myRange.Cells(2, 3).Select
  Selection.ClearComments
  Selection.value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER) ' "CHECK"
  If Selection.Comment Is Nothing Then
    Selection.AddComment MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
  Else
    Selection.Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE) ' ARMA_CHECK_GOF_NOTE
  End If
  
  myRange.Cells(3, 3).Select
  Selection.formula = "=SARIMA_CHECK(" & _
                                      mean & "," & _
                                      sigma & "," & _
                                      myIntegral & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      mySPeriod & "," & _
                                      mySIntegral & "," & _
                                      sPhis & "," & _
                                      sThetas & _
                                      ")"
    
  Selection.NumberFormat = "0"
End Sub

' Print the Residual Diagnosis tests
Public Sub PrintResidualDiagnosis(parameters As Range, myRange As Range)
  Const sSOURCE As String = "PrintResidualDiagnosis"
  
  Dim phis As String
  Dim thetas As String
  Dim sPhis As String
  Dim sThetas As String
  Dim nAscending As Integer
  Dim start As Long
  Dim mean As String
  Dim sigma As String
  
  Dim ResidualsEqn As String
  Dim XKURT As String
    
  start = 1
  mean = Range(parameters.Cells(1, 1), parameters.Cells(1, 1)).Address(True, True)
  
  If P > 0 Then
    phis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + myP, 1)).Address(True, True)
    start = start + myP
  Else
    phis = vbNullString
  End If
  
  If Q > 0 Then
    thetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + myQ, 1)).Address(True, True)
    start = start + myQ
  Else
    thetas = vbNullString
  End If
  
  If SP > 0 Then
    sPhis = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + mySP, 1)).Address(True, True)
    start = start + mySP
  Else
    sPhis = vbNullString
  End If

  If SQ > 0 Then
    sThetas = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + mySQ, 1)).Address(True, True)
    start = start + mySQ
  Else
    sThetas = vbNullString
  End If

  sigma = Range(parameters.Cells(start + 1, 1), parameters.Cells(start + 1, 1)).Address(True, True)
    
  nAscending = 0
  If ASCENDING = True Then
     nAscending = 1
  End If
    
  XKURT = "0"
  
  ResidualsEqn = "RMNA(SARIMA_FIT(" & _
                                      myInputData & "," & nAscending & "," & _
                                      mean & "," & _
                                      sigma & "," & _
                                      myIntegral & "," & _
                                      phis & "," & _
                                      thetas & "," & _
                                      mySPeriod & "," & _
                                      mySIntegral & "," & _
                                      sPhis & "," & _
                                      sThetas & "," & FIT_STD_RESID & "))"
    
    Call PrintStandardizedResidualDiagnosis(ResidualsEqn, nAscending, P, Q, parameters, Me.significance, XKURT, myRange)
End Sub


Public Sub printModelOutput(myRange As Range)
  Const sSOURCE As String = "printModelOutput"
  
  Dim parameters As Object
  
  On Error GoTo ErrorHnadler
  
  ' (2) Print the model Coefficient
  Call PrintCoefficients(myRange)
  
  ' (3) Print the goodness of fit analytics
  Set parameters = Range(myRange.Cells(3, 3), myRange.Cells(3 + (myP + myQ + mySP + mySQ + 2), 3))

  ' (3.5) Print the default model coefficient
  If myModelParamsAction = COEFF_GUESS Then
    Call PrintInitialParameter(parameters.Cells(1, 1))
  Else
    Call PrintCalibratedParameter(parameters.Cells(1, 1))
  End If
  
  ' (4) Print the goodness of fit function
  If Me.includeGoodnessOfFit Then
    Call PrintGoodnessOfFit(parameters, myRange.Cells(1, 5))
  End If
 
  ' (5) Print the residual diagnosis test
  If Me.includeResidualDiagnosis Then
    If Me.includeGoodnessOfFit Then
      Call PrintResidualDiagnosis(parameters, myRange.Cells(1, 9))
    Else
      Call PrintResidualDiagnosis(parameters, myRange.Cells(1, 5))
    End If
  End If

Cleanup:
  myRange.Cells(1, 1).Select
  Exit Sub

ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "Error occured while preparing the ARMA model"
  MsgBox MSGAPI.getLocaleString(IDS_UI_SARIMA_OUTPUT_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  
  Resume Cleanup
End Sub
Attribute VB_Name = "SDKAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15315 $
'  $Date: 2016-05-06 16:25:07 -0500 (Fri, 06 May 2016) $
'
Private Const msMODULE As String = "SFSDKPI"

#If VBA7 Then
  ' Public Declare PtrSafe Function SFLOG_GETLEVEL Lib "SFSDK.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
#Else
  ' Public Declare Function SFLOG_GETLEVEL Lib "SFSDK.DLL" Alias "#115" (ByRef nLevel As Integer) As Integer
#End If




Attribute VB_Name = "SFMacros"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15701 $
'  $Date: 2016-08-04 13:29:50 -0500 (Thu, 04 Aug 2016) $
'
Private Const msMODULE As String = "SFMacros"

Public Enum NDK_RETURN_TYPE
  NDK_SUCCESS = 0                ' SUCCESS
  
  ' Error Codes
  NDK_FAILED = -1                ' FAILED: Internal error occured
  NDK_SDK_UNINITIALIZED = -2     ' FAILED: The API NDK_INIT has not yet been called
  NDK_LOW_LICENSE_LEVEL = -3     ' FAILED: The required license level is not met by current license
  NDK_UNSUPPORTED = -4           ' FAILED: The required operation is not currently supported
  NDK_INVALID_ARG = -5           ' FAILED: an input argument with unexpected or invalid value.
  NDK_LENGTH_ERROR = -6          ' FAILED: The user's buffer is not big enough or Insufficient input data
  NDK_INVALID_VALUE = -7         ' FAILED: Invalid value of an argument
  NDK_MISSING_CONF = -8          ' FAILED: The configuration file is missing
  NDK_CONF_DATAPATH_INVALID = -9 ' FAILED: Invalid datapath value in the configuration file
  NDK_CONF_PRODID_INVALID = -10  ' FAILED: Invalid value for [GLOBALS][PRODUCTID] entry in the conf file
  NDK_MISSING_LICENSE_KEY = -11  ' FAILED: The product license ket is invalid
  NDK_INVALID_LICENSE_KEY = -12  ' FAILED: The product license ket is invalid
  NDK_INACTIVE_LICENSE_KEY = -13 ' FAILED: The license key has yet to be activated
  NDK_INVALID_KEY_CODE = -14     ' FAILED: The license key and code are not valid
  NDK_EXPIRED_LICENSE_KEY = -15  ' FAILED: The license key has expired
  NDK_LOG_INIT_FAILED = -16      ' FAILED: The logging system failed during initialization, check the configuration settings
  NDK_EMPTY_TIME_SERIES = -17    ' FAILED: number of non-missing values is zero
  NDK_ZERO_INVALID_VARIANCE = -18 ' FAILED: number of non-missing values is zero
  NDK_CALIBRATION_ERROR = -19    ' FAILED: The optimizer failed to converge to a unique solution.
  NDK_INVALID_MODEL = -20        ' FAILED: The model's parameters values did not pass the stability test.

  'Warnings
  NDK_SKIP_INIT = 105             ' WARNING: The DLL is already initialize, skipping !
  NDK_RET_NAN = 100               ' WARNING: The function returns an invalid (i.e. missing) value
End Enum

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SimulateFrm"
Attribute VB_Base = "0{93E87703-4B38-480D-B025-49A657AB3EBE}{34EFD711-DF69-4D94-8984-6A722C6C65FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SimulateFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SimulateFrm.frm $
'
Private Const msMODULE As String = "USERFORM:Simulate"
Private Const zenSlugId As String = "articles/216534383"

Private userOptions As SimulationUO
Private callValidateForm As Boolean


Private Sub btnCancel_Click()
  Unload Me
End Sub


Private Sub UserForm_Initialize()
  Const sSOURCE As String = "UserForm_Initialize"
  Dim isScreenUpdate As Boolean
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_SIMULATE_FRM_CAPTION)
  
  ModelSelectFrame.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_CAPTION)
  ModelSelectFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_FRAME_HELPTIP)
  
  ModelSelectLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_CAPTION)
  ModelSelectLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  RefModel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP)
  
  LatestObsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FRAME_CAPTION)
  LatestObsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FRAME_HELPTIP)
  
  LatestObsValuesLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_CAPTION)
  LatestObsValuesLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_HELPTIP)
  RefEditObs.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  labelFactors.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_OBS_FACTORS_LABEL_CAPTION)
  labelFactors.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)
  RefEditObsFactors.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP)
  
  LabelVols.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_CAPTION)
  LabelVols.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_HELPTIP)
  RefEditObsVol.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_HELPTIP)
  
  ' Option
  OutputOptionFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_FRAME_CAPTION)
  OutputOptionFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MODEL_OPTIONS_FRAME_HELPTIP)
  
  txtMaxLagLabel.Caption = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_CAPTION)
  txtMaxLagLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_HELPTIP)
  txtHorizon.ControlTipText = MSGAPI.getLocaleString(IDS_UI_FORECAST_MAX_LAGS_LABEL_HELPTIP)
  
  txtSimPathsLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_CAPTION)
  txtSimPathsLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_HELPTIP)
  TxtSimulations.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_HELPTIP)
  
  txtSeedLabel.Caption = MSGAPI.getLocaleString(IDS_UI_SIMULATE_SEED_LABEL_CAPTION)
  txtSeedLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_SEED_LABEL_HELPTIP)
  TxtSeed.ControlTipText = MSGAPI.getLocaleString(IDS_UI_SIMULATE_SEED_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  btnCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  btnCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  btnOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  btnOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  On Error GoTo ErrorHandler
  ' (1) Disable the screen updating, and auto-calculation
  isScreenUpdate = Application.ScreenUpdating
  
  Application.ScreenUpdating = False
   
  If isActiveCellAtTBOM() Then
    Set userOptions = New SimulationUO
  
    callValidateForm = False
    
    If Not (userOptions Is Nothing) Then
      RefModel.value = userOptions.MODEL_INPUT
      chkAscending.value = userOptions.ASCENDING
      txtHorizon.value = userOptions.HORIZON
      TxtSimulations.value = userOptions.SIMULATION_PATHS
      TxtSeed.value = userOptions.SEED
      
      ' Initialize the table output to current cell
      RefOutputRange.value = userOptions.OUTPUT_RANGE
    End If
    
    callValidateForm = True
    Call validateForm
    RefEditObs.SetFocus
  Else
      ' "Select the header cell describing your model (eg,  ARMA, GARCH(1,1), etc.) before you use this function."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_FORECAST_INVALID_ACTIVE_CELL_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Application.ScreenUpdating = isScreenUpdate
      Unload Me
      Exit Sub
  End If
  
Cleanup:
  ' (1) Re-store screen and autoCalc as earlier update now
  Application.ScreenUpdating = isScreenUpdate
  Exit Sub
  
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


' This routine control the states of each ui elements on it
Private Sub validateForm()
  btnOK.enabled = userOptions.isReady
    
  ' Show or Hide Realized Volatility
  RefEditObsVol.enabled = userOptions.INCLUDE_REALIZED_VOL
  LabelVols.enabled = userOptions.INCLUDE_REALIZED_VOL
  If Not userOptions.INCLUDE_REALIZED_VOL Then
    RefEditObsVol.BackColor = &H8000000F
  Else
    RefEditObsVol.BackColor = &H80000005
  End If
  
  ' Show or Hide Exognous factors
  RefEditObsFactors.enabled = userOptions.INCLUDE_XVARS
  labelFactors.enabled = userOptions.INCLUDE_XVARS
  If Not userOptions.INCLUDE_XVARS Then
    RefEditObsFactors.BackColor = &H8000000F
  Else
    RefEditObsFactors.BackColor = &H80000005
  End If
    
  
End Sub


Private Sub RefEditObs_Change()
  userOptions.INPUT_RANGE = Utilities.procInputCellsRange(RefEditObs.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

' RefEditObsFactors
Private Sub RefEditObsFactors_Change()
  userOptions.INPUT_X_RANGE = Utilities.procInputCellsRange(RefEditObsFactors.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


' RefEditObsVol
Private Sub RefEditObsVol_Change()
  userOptions.INPUT_VOL_RANGE = Utilities.procInputCellsRange(RefEditObsVol.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub



Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub chkAscending_Change()
  userOptions.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub RefModel_Change()
    userOptions.MODEL_INPUT = Utilities.procInputCellsRange(RefModel.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutputRange_Change()
  userOptions.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutputRange.value)
    
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub txtHorizon_Change()
   On Error GoTo ErrorHandler
    userOptions.HORIZON = txtHorizon.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
  
  Exit Sub
ErrorHandler:
   ' Insert code to handle the error here
   Resume Next
End Sub

' TxtSimulations
Private Sub TxtSimulations_Change()
   On Error GoTo ErrorHandler
    userOptions.SIMULATION_PATHS = TxtSimulations.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
  
  Exit Sub
ErrorHandler:
   ' Insert code to handle the error here
   Resume Next
End Sub



'
Private Sub TxtSeed_Change()
   On Error GoTo ErrorHandler
    userOptions.SEED = TxtSeed.value
    
  If callValidateForm = True Then
    Call validateForm
  End If
  
  Exit Sub
ErrorHandler:
   ' Insert code to handle the error here
   Resume Next
End Sub


Private Sub SpinButtonSimulations_Spinup()

  userOptions.SIMULATION_PATHS = userOptions.SIMULATION_PATHS + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    TxtSimulations.value = userOptions.SIMULATION_PATHS
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonSimulations_Spindown()

  If userOptions.SIMULATION_PATHS > 1 Then
    userOptions.SIMULATION_PATHS = userOptions.SIMULATION_PATHS - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      TxtSimulations.value = userOptions.SIMULATION_PATHS
      callValidateForm = True
    Else
      TxtSimulations.value = userOptions.SIMULATION_PATHS
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Terminate()
 Set userOptions = Nothing
End Sub


' Process the forecast command now
Private Sub btnOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  ' RefOutputRange
  Dim myRange As Object
  
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
    
  If Len(RefEditObs) > 0 Then
    Set inRange = Range(RefEditObs)
    If inRange Is Nothing Then
      ' "Enter a valid time series range."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Exit Sub
    End If
    
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      ' MsgBox "The time series range should be one column or one row."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Exit Sub
    End If
    
    ' Check if all the values in the input Series are Numaric or #N/A
    If Not vb_IsNum(inRange, NA) Then
      ' MsgBox "The time series values should be numbers and without any spaces."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Exit Sub
    End If
  End If
  
  
  Set myRange = Range(RefOutputRange)
  If myRange Is Nothing Then
    ' MsgBox "Enter a valid output range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    Exit Sub
  End If
           
            
  ' Call PrintBasicStatistics(myRange.Cells(1, 1), RefInputArray.Value)
  Call userOptions.printOutput(myRange)
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox MSGAPI.getLocaleString(IDS_UI_SIMULATE_PREPARE_ERROR_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "SimulationUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SimulationUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SimulationUO.cls $
'
Private Const msMODULE As String = "CLASS:SimulationUO"

Private myModelInput As String
Private myAscending As Boolean
Private myInputData As String
Private myInputVolData As String
Private myInputXData As String
Private myOutputRange As String
Private myHorizon As Long
Private myNoSimulations As Long
Private mySeed As Long

Private myIncludeRealizedVol As Boolean
Private myIncludefactors As Boolean

Private Sub Class_Initialize()
  Dim model As String
  
  myAscending = True
  myModelInput = ActiveCell.Address(True, True)
  
  model = Me.crackModel
  If model = "ARMAX" Or model = "SARIMAX" Then
    myIncludefactors = True
  Else
    myIncludefactors = False
  End If
      
  If (InStr(UCase(crackModel()), "ARCH") > 0) Then
    myIncludeRealizedVol = True
  Else
    myIncludeRealizedVol = False
  End If
  
  myOutputRange = ""
  myInputData = ""
  myInputVolData = ""
  myInputXData = ""
  
  myHorizon = 5
  mySeed = 100
  myNoSimulations = 1
End Sub

Private Sub Class_Terminate()
  ' Do Nothing for now
End Sub

Public Property Get INCLUDE_REALIZED_VOL() As Boolean
  INCLUDE_REALIZED_VOL = myIncludeRealizedVol
End Property

Public Property Get INCLUDE_XVARS() As Boolean
  INCLUDE_XVARS = myIncludefactors
End Property

' mySeed
Public Property Get SEED() As Long
    SEED = mySeed
End Property
Public Property Let SEED(value As Long)
    mySeed = value
End Property

Public Property Get SIMULATION_PATHS() As Long
    SIMULATION_PATHS = myNoSimulations
End Property
Public Property Let SIMULATION_PATHS(value As Long)
    myNoSimulations = value
End Property

Public Property Get HORIZON() As Long
    HORIZON = myHorizon
End Property
Public Property Let HORIZON(value As Long)
    myHorizon = value
End Property

Public Property Get ASCENDING() As Boolean
    ASCENDING = myAscending
End Property
Public Property Let ASCENDING(value As Boolean)
    myAscending = value
End Property


Public Property Get MODEL_INPUT() As String
  MODEL_INPUT = myModelInput
End Property

Public Property Let MODEL_INPUT(ByVal vNewValue As String)
  myModelInput = vNewValue
End Property


Public Property Get INPUT_RANGE() As String
  INPUT_RANGE = myInputData
End Property

Public Property Let INPUT_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

Public Property Get INPUT_VOL_RANGE() As String
  INPUT_VOL_RANGE = myInputVolData
End Property

Public Property Let INPUT_VOL_RANGE(ByVal vNewValue As String)
  myInputVolData = vNewValue
End Property

Public Property Get INPUT_X_RANGE() As String
  INPUT_X_RANGE = myInputXData
End Property

Public Property Let INPUT_X_RANGE(ByVal vNewValue As String)
  myInputXData = vNewValue
End Property


Public Property Get OUTPUT_RANGE() As String
  OUTPUT_RANGE = myOutputRange
End Property

Public Property Let OUTPUT_RANGE(ByVal vNewValue As String)
  myOutputRange = vNewValue
End Property


Public Function isReady() As Boolean
    isReady = Len(myOutputRange) > 0 And _
              HORIZON() >= 1
End Function


' Return the Model name
Public Function crackModel() As String
  Const sSOURCE As String = "crackModel"
  
  Dim model As Object
  Dim formula As String
  Dim start As Long
  Dim finish As Long
  
  ' Get the Model paramters
  Set model = Range(myModelInput)
  
  ' Get the cell formula
  formula = model.value
  
  ' Find the 1st (
  start = 1
  finish = InStr(formula, "(")
  
  If start <> 1 Or finish = 0 Then
    ' MsgBox "The active cell does not correspond to a supported model"
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_UNSUPPORTED_MODEL_ACTIVE_CELL_MSG), vbOKOnly + vbExclamation, PRODUCT_MEDIUMNAME
    Exit Function
  End If
    
  ' Copy the model prefix from the formula & append _SIM
  crackModel = Mid(formula, start, finish - start)
  
  If InStr(model.formula, crackModel) = 0 Then
    crackModel = ""
    
    ' MsgBox "The active cell does not correspond to a supported model"
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_UNSUPPORTED_MODEL_ACTIVE_CELL_MSG), vbOKOnly + vbExclamation, PRODUCT_MEDIUMNAME
    Exit Function
  End If
End Function

' Create the simulation path now
Public Sub printOutput(myRange As Range)
  Const sSOURCE As String = "printOutput"
  
  Dim offset As Long
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  
  On Error GoTo ErrorHdler
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' (1) print the Header title
  Call PrintOutptHeaders
  
  ' (2) print the Simulation Formulas
  Call PrintOutputFormulas
  
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  myRange.Cells(1, 1).Select
  
Cleanup:
  Exit Sub

ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub

Public Sub PrintOutptHeaders()
  Const sSOURCE As String = "PrintOutptHeaders"
  
    ' Set the borderline
    ' Find the output range
    Dim Labels() As String  ' declares a dynamic array variable
    Dim myRange As Object
    Dim myNumFields As Long
    Dim count As Long
    
    Set myRange = Range(myOutputRange)
    
    ' Activate the sheet now
    If ActiveSheet.Name <> myRange.Worksheet.Name Then
      Sheets(myRange.Worksheet.Name).Activate
    End If
    
    'How many columns to print
    myNumFields = Me.SIMULATION_PATHS + 1
    
    Range(myRange.Cells(1, 1), myRange.Cells(1, myNumFields)).Select
    With Selection
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .Weight = xlMedium         'Use xlThin for smaller border
        End With
    End With
    
    ' Resize the arrary to proper size
    ReDim Labels(1 To myNumFields)

    
    Labels(1) = "Step"
    Dim i, j As Long
    For i = 1 To myNumFields
        If i > 1 Then
          Labels(i) = "S[" & (i - 1) & "]"
        End If
    
        myRange.Cells(1, i).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = Labels(i)
        End With
    Next i
    
    ' Add the steps
    For i = 1 To Me.HORIZON
        myRange.Cells(i + 1, 1).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .Font.Bold = True
            .value = i
        End With
    Next i
End Sub

Public Sub PrintOutputFormulas()
  Const sSOURCE As String = "PrintOutptHeaders"
  
  ' Set the borderline
  Dim model As Object
  Dim formula As String
  Dim start As Long
  Dim Eqn As String
  Dim i As Long
  
  ' Find the output range
  Dim myRange As Object
  
  Set myRange = Range(myOutputRange)
  
  ' Activate the sheet now
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' Get the Model paramters
  Set model = Range(myModelInput)
  
  ' Get the cell formula
  formula = model.formula
  
  ' Find the 1st (
  start = InStr(formula, "(")
  
  If start = 0 Then
    MsgBox "The model cell does not contain formula"
    Exit Sub
  End If
    
  ' Copy the model prefix from the formula & append _SIM
  Eqn = Left(formula, start - 1) & "_SIM("
  
  ' Extract the model parameters
  formula = Mid(formula, start + 1, Len(formula) - start - 1)
  
  ' Do we have realized observations?
  If Len(myInputData) > 0 Then
    Eqn = Eqn & myInputData
  End If
  Eqn = Eqn & ","
  
  ' Do we have a realized volatility
  If myIncludeRealizedVol Then
    Eqn = Eqn & myInputVolData & ","
  Else
    If InStr(UCase(Eqn), "ARCH") > 0 Then
      Eqn = Eqn & ","
    End If
  End If
  
  ' Do we have realized exognenous factors
  If myIncludefactors Then
    Eqn = Eqn & myInputXData & ","
  Else
    ' ARMAX/SARIMAX
    If InStr(UCase(model.formula), "MAX(") > 0 Then
      Eqn = Eqn & ","
    End If
  End If
  Eqn = Eqn & IIf(myAscending, 1, 0) & ","
  Eqn = Eqn & formula & ","
  
  ' Now add the horizon
  Eqn = Eqn & myHorizon & ","
  
  For i = 1 To Me.SIMULATION_PATHS
    Range(myRange.Cells(2, i + 1), myRange.Cells(2 + myHorizon - 1, i + 1)).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .FormulaArray = Eqn & (SEED() + i - 1) & ")"
      .NumberFormat = IIf(Len(myInputData) > 0, Range(myInputData).Cells(1, 1).NumberFormat, "#0.000")
    End With
  Next i
End Sub



Attribute VB_Name = "SolverAPI"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SolverAPI.bas 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SolverAPI.bas $
'
Private Const msMODULE As String = "SolverAPI"


Private Const MaxTime As Integer = 100
Private Const iterations As Integer = 100
Private Const Precision As Double = 0.000001
Private Const AssumeLinear As Boolean = False
Private Const StepThru As Boolean = False
Private Const Estimates As Integer = 1        ' 1=Tangent, 2= Quadratic
Private Const Derivatives As Integer = 1      ' 1 represents forward differencing, and 2 represents central differencing
Private Const SearchOption As Integer = 1     ' 1 represents the Newton search method, and 2 represents the conjugate search method.
Private Const IntTolerance As Double = 5      ' A decimal number between 0 (zero) and 100 that specifies the Integer Optimality percentage tolerance.
Private Const Scaling As Boolean = True       ' If the objective or constraints differ by several orders of magnitude
Private Const Convergence As Double = 0.0001  'A number between 0 (zero) and 1 that specifies the convergence tolerance for the GRG Nonlinear Solving and Evolutionary Solving methods.
Private Const AssumeNonNeg As Boolean = False 'True to have Solver assume a lower limit of 0 (zero) for all decision variable cells that do not have explicit lower limits in the Constraint list box (the cells must contain nonnegative values)
'                   Const PopulationSize,
    '               Const RandomSeed,
    '               Const MultiStart,
    '               Const RequireBounds,
Private Const MutationRate As Integer = 100 ' A number between 0 (zero) and 1 that specifies the rate at which the Evolutionary Solving method will make "mutations" to existing population members.
Private Const MaxSubproblems As Integer = 100 ' The maximum number of subproblems Solver will explore in problems with integer constraints, and problems solved via the Evolutionary Solving method.
Private Const MaxIntegerSols As Integer = 100 'The maximum number of feasible (or integer feasible) solutions Solver will consider in problems with integer constraints
Private Const SolveWithout As Boolean = True ' True to have Solver ignore any integer constraints and solve the "relaxation" of the problem.
Private Const MaxTimeNoImp As Integer = 100 ' When the Evolutionary Solving method is used, the maximum amount of time (in seconds) Solver will continue solving without finding significantly improved solutions


'The Solver Add-in is listed differently on non-US machine
Private Function getSolverAddin() As AddIn
  Const sSOURCE As String = "getSolverAddin"
  
  'Dim ain As AddIn
  Dim ain As Object
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim szKey As String

  On Error GoTo ErrorHandler
  Set getSolverAddin = Nothing
  
  ' UN_MSSOLVER_LISTNAME (General Case)
  szKey = UCase(Trim(UN_MSSOLVER_LISTNAME))
  
  For Each ain In AddIns
    ' The .Name (filename, e.g. Solver.xla or Solver.xlam) -- more reliable
    ' The Title (as listed in the Add-in manager): Solver (non en-us)  or "Solver Add-in"
    If UCase(Trim(ain.Name)) = UCase(Trim(solverxla)) Then
        Set getSolverAddin = ain
        Exit For
    End If
  Next

Cleanup:
  Exit Function

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Function


Private Sub vb_SolverReset()
  Const sSOURCE As String = "vb_SolverReset"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  ' Call the solver function
  ' Todo: we need to verify that solver add-in installed and activated
  Dim method As String
  
  On Error GoTo ErrorHandler
  
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverReset"
    Application.Run method
  End If
    
  Set solverObj = Nothing

Cleanup:
  Exit Sub

ErrorHandler:
  ' MsgBox "Error: Resetting Solver failed", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_RESET_SOLVER_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub


Private Sub vb_SolverOptions()
  Const sSOURCE As String = "vb_SolverOptions"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  
  ' Call the solver function
  ' Todo: we need to verify that solver add-in installed and activated
  Dim method As String
  
  On Error GoTo ErrorHandler
  
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    
    method = solverxla & "!" & "VBA_Functions.SolverOptions"
    
    ' Don't call this method for Excel 2003 and below
    If UCase(solverxla) <> "SOLVER.XLA" Then
      Application.Run method, MaxTime, iterations, Precision, AssumeLinear, StepThru, Estimates, Derivatives, SearchOption, IntTolerance, Scaling, Convergence, AssumeNonNeg
    End If
  End If
    
  Set solverObj = Nothing

Cleanup:
  Exit Sub

ErrorHandler:
  ' MsgBox "Error: Resetting Solver failed", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_RESET_SOLVER_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub



' Add a constraint to the solver
Private Sub vb_SolverAdd(myRange As Range, relation As Integer, formulaText As String)
  Const sSOURCE As String = "vb_SolverAdd"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  Dim method As String
  Dim ret As Variant
  
  On Error GoTo ErrorHandler
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverAdd"
    
    myRange.Select
    If Application.International(xlDecimalSeparator) <> "." Then
      ' Work-around for solver and non-english and non-decimal point settings
      myRange.offset(1, 0).value = formulaText
      myRange.offset(1, 0).Font.Color = myRange.offset(1, 0).Font.Background
      ret = Application.Run(method, myRange.Address(True, True), relation, myRange.offset(1, 0).Address(True, True))
    Else
      ret = Application.Run(method, myRange.Address(True, True), relation, formulaText)
    End If
  End If
  
Cleanup:
  Set solverObj = Nothing
  Exit Sub

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_ADD_CONSTRAINT_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Sub

' Designate the target cell (Utility Function) and the changing cells (input parameters)
Private Sub vb_SolverOkDialog(szCellAddress As String, MaxMinVal As Integer, ValueOf As Integer, ByChange As String)
  Const sSOURCE As String = "vb_SolverOkDialog"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  Dim method As String
  
  On Error GoTo ErrorHandler
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverOkDialog"
    Application.Run method, szCellAddress, MaxMinVal, ValueOf, ByChange
  End If
  
Cleanup:
  Set solverObj = Nothing
  Exit Sub

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_LAUNCH_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub


' Designate the target cell (Utility Function) and the changing cells (input parameters)
Private Sub vb_SolverOk(szCellAddress As String, MaxMinVal As Integer, ValueOf As Integer, ByChange As String)
  Const sSOURCE As String = "vb_SolverOkDialog"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  Dim method As String
  
  On Error GoTo ErrorHandler
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverOk"
    Application.Run method, szCellAddress, MaxMinVal, ValueOf, ByChange
  End If
  
Cleanup:
  Set solverObj = Nothing
  Exit Sub

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)

  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_CLOSE_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub

' 0 Solver found a solution. All constraints and optimality conditions are satisfied.
' 1 Solver has converged to the current solution. All constraints are satisfied.
' 2 Solver cannot improve the current solution. All constraints are satisfied.
' 3 Stop chosen when the maximum iteration limit was reached.
' 4 The Objective Cell values do not converge.
' 5 Solver could not find a feasible solution.
' 6 Solver stopped at user|fffd|s request.
' 7 The linearity conditions required by this LP Solver are not satisfied.
' 8 The problem is too large for Solver to handle.
' 9 Solver encountered an error value in a target or constraint cell.
' 10  Stop chosen when the maximum time limit was reached.
' 11  There is not enough memory available to solve the problem.
' 13  Error in model. Please verify that all cells and constraints are valid.
' 14  Solver found an integer solution within tolerance. All constraints are satisfied.
' 15  Stop chosen when the maximum number of feasible [integer] solutions was reached.
' 16  Stop chosen when the maximum number of feasible [integer] subproblems was reached.
' 17  Solver converged in probability to a global solution.
' 18  All variables must have both upper and lower bounds.
' 19  Variable bounds conflict in binary or alldifferent constraint.
' 20  Lower and upper bounds on variables allow no feasible solution.
Private Function vb_SolverSolve(UserFinish As Boolean, Optional ByVal ShowRef As String) As Integer
  Const sSOURCE As String = "vb_SolverOkDialog"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  Dim method As String
  
  On Error GoTo ErrorHandler
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverSolve"
    vb_SolverSolve = Application.Run(method, UserFinish, ShowRef)
  End If
  
Cleanup:
  Set solverObj = Nothing
  Exit Function

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)

  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_START_OPTIMIZATION_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Function

Private Sub vb_SolverFinish(KeepResults As Boolean)
  Const sSOURCE As String = "vb_SolverOkDialog"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  'Dim solverObj As AddIn
  Dim solverObj As Object
  Dim method As String
  
  On Error GoTo ErrorHandler
  Set solverObj = getSolverAddin
  If Not (solverObj Is Nothing) And _
          solverObj.Installed Then
    method = solverxla & "!" & "VBA_Functions.SolverFinish"
    
    Application.Run method, KeepResults
  End If
  
Cleanup:
  Set solverObj = Nothing
  Exit Sub

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_CLOSE_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume Cleanup
End Sub



'' Adjusted for Application.Run() to avoid Reference problems with Solver
'' Peltier Technical Services, Inc., Copyright |fffd| 2007. All rights reserved.
'' Returns True if Solver can be used, False if not.
Private Function CheckSolver() As Boolean
  Const sSOURCE As String = "CheckSolver"

  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim bSolverInstalled As Boolean
  ' Dim solverObj As AddIn
  Dim solverObj As Object
  Dim szErrMsg As String
  Dim method As String

  '' Assume true unless otherwise
  CheckSolver = True

  ' The following may generate an error
  ' On Error GoTo Next
  On Error Resume Next

  ' check whether Solver is installed
  Set solverObj = getSolverAddin()
  If Not (solverObj Is Nothing) Then
    bSolverInstalled = solverObj.Installed
  Else
    ' Don't continue, exit the routine
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_NOT_INSTALLED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
    Exit Function
  End If

  Err.Clear
  'AlreadyChecked4SolverInstallation = True
  'If AlreadyChecked4SolverInstallation = False Then
  '  If bSolverInstalled Then
  '    ' uninstall temporarily
  '    solverObj.Installed = False
  '    ' check whether Solver is installed (should be false)
  '    bSolverInstalled = solverObj.Installed
  '  End If
  
  '  ' Check again
  '  If Not bSolverInstalled Then
  '    ' (re)install Solver
  '    solverObj.Installed = True
  '    ' check whether Solver is installed (should be true)
  '    bSolverInstalled = solverObj.Installed
  '  End If
  '
  '  If Not bSolverInstalled Then
  '    szErrMsg = "Solver not found. This workbook will not work."
  '    Call LOG_ERROR(msMODULE, sSOURCE, 191, szErrMsg)
  '
  '    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_NOT_FOUND_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
  '    CheckSolver = False
  '  End If
  ' End If

  If CheckSolver Then
    ' initialize Solver
    ' Mohamad (09/28/2009) - Make the name of the add-in dynamic
    method = solverxla & "!" & "Solver.Solver2.Auto_open"
    Application.Run method
  End If

Cleanup:
  ' Free the solver object
  Set solverObj = Nothing
  Exit Function

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ' This error may occur in the process
  If Err.number = ERR_CLASSMETHFAILED Then
    Resume Next
  End If
  
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  Resume Cleanup
End Function

'
' Common subroutine to launches MS Excel Solver
'
Sub InitSolver(ByRef myRange As Range)
  Const sSOURCE As String = "InitSolver"
  
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Static isInitialized As Boolean
  'Dim changeCells As Range
  Dim changeCells As Object
  'Dim glmCells As Range
  Dim glmCells As Object
  Dim nRows As Integer
  ' Dim solverObj As AddIn
  Dim solverObj As Object
  
  Dim isScreenUpdate As Boolean
  Dim statusBarUpdate As Boolean
  Dim autoCalcSetup As Integer
  Dim solverRetCode As Integer
  
  On Error GoTo ErrorHandler
  
  ' Check whetehr the selected cell is valid
  myRange.Cells(1, 1).Select
  If Not isActiveCellAtTBOM() Then
    ' MsgBox "Select the header cell describing your model (eg,  ARMA, GARCH(1,1), etc.) before you use this function.", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_INVALID_ACTIVE_CELL_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
    
    Exit Sub
  End If
  
  If (InStr(1, myRange.offset(2, 4).formula, "LLF", vbTextCompare) = 0 And _
      InStr(1, myRange.offset(2, 4).formula, "GOF", vbTextCompare) = 0) Or _
      InStr(1, myRange.offset(2, 6).formula, "CHECK", vbTextCompare) = 0 Then
    ' MsgBox "The Calibration wizard can't find the cells with goodness-of-fit calculation (e.g. LLF, AIC, etc.).", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_CALIBRATION_GOF_NOT_FOUND_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
    Exit Sub
  End If
  
  
  Set solverObj = getSolverAddin()
  
  ' (1) Disable the screen updating, and auto-calculation
  isScreenUpdate = Application.ScreenUpdating
  statusBarUpdate = Application.StatusBar
  autoCalcSetup = Application.Calculation
  
  Application.ScreenUpdating = False
  Application.StatusBar = False
  Application.Calculation = xlCalculationManual
  
  ' Initialize Solver, if it has not been done yet
  If Not isInitialized Or _
     Not solverObj.Installed Then
    
    isInitialized = CheckSolver
    If isInitialized Then
      ' Activate the worksheet now (it would have been lost as we removed and added Add-in)
      myRange.Worksheet.Activate
    Else
      ' Don't continue, exit the routine
      ' MsgBox "Error: Failed to initialize/Load Solver add-in", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_INIT_LOAD_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
      Exit Sub
    End If
  End If
    
  ' Set solverObj = getSolverAddin()
  If Not (solverObj Is Nothing) Then
    myRange.Cells(1, 1).Select
    If isActiveCellAtTBOM() Then
      myRange.Activate
      
      ' Reset the Solver
      Call vb_SolverReset
     
      ' Set the option (allow negative values)
      Call vb_SolverOptions
      
      ' Add the constraint
      Call vb_SolverAdd(myRange.offset(2, 6), 3, "0.99999")
      
      'Select the changing cells
      myRange.Cells(1, 1).Select
      If (InStr(UCase(Selection.value), "AIRLINE") > 0) Then
        Range(myRange.offset(2, 2), myRange.offset(5, 2)).Select
      Else
        If (InStr(UCase(Selection.value), "GLM") > 0) Then
          Set glmCells = Range(myRange.offset(2, 2), myRange.offset(2, 2).End(xlDown))
          nRows = glmCells.rows.count
          If Int(myRange.offset(2, 2).End(xlDown).value) = GLM_IDENTITY Then
            nRows = nRows - 1
          Else
            nRows = nRows - 2
          End If
          Range(myRange.offset(2, 2), myRange.offset(1 + nRows, 2)).Select
        Else
          Range(myRange.offset(2, 2), myRange.offset(2, 2).End(xlDown)).Select
        End If
      End If
      
      ' Launch the Solver Dialog
      Call vb_SolverOkDialog(myRange.offset(2, 4).Address(True, True), 1, 0, Selection.Address)
      
      ' solverRetCode = vb_SolverSolve(False)
      
      ' If solverRetCode < 3 Then
      '  Call vb_SolverFinish(True)
      ' Else
      '  Call vb_SolverFinish(False)
      ' End If
       
      ' Reset the selection to initial
      myRange.Cells(1, 1).Select
    Else
      ' MsgBox "Select the header cell describing your model (eg,  ARMA, GARCH(1,1), etc.) before you use this function.", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_INVALID_ACTIVE_CELL_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
    End If
  End If
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Application.ScreenUpdating = isScreenUpdate
  Application.StatusBar = statusBarUpdate
  Application.Calculation = autoCalcSetup
  
  Set solverObj = Nothing
  Exit Sub

ErrorHandler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  
  ' MsgBox "Error: Initializing Solver for calibration", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
  MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_ERR_SOLVER_INIT_FAILED_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  ' Re-store screen and autoCalc as earlier update now
  Resume Cleanup
End Sub

Attribute VB_Name = "SpectralFiltersFrm"
Attribute VB_Base = "0{C3A053EA-496F-4A7A-97CB-190649DF33F7}{2AA5134B-57FB-47CE-B665-25476F38E385}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: SpectralFiltersFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/SpectralFiltersFrm.frm $
'
Private Const msMODULE As String = "USERFORM:FILTERS"
Private Const zenSlugId As String = "articles/216534383"

Private userOptions As FilterUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean


Private Sub cmdBtnHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdOK_Click()
  Unload Me
End Sub


Attribute VB_Name = "StationaryTestFrm"
Attribute VB_Base = "0{582C24A4-45DF-490F-8E4D-75CF9921CFCB}{50B626C6-9BF8-4D5B-9A67-4A98387C198F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: StationaryTestFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/StationaryTestFrm.frm $
'
Private Const msMODULE As String = "USERFORM:StationaryTestFrm"
Private Const zenSlugId As String = "articles/216471363"

Private userOptions As StationaryTestUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub chkADFTest_Click()
  userOptions.SELECTED_TEST(ADF_TEST) = chkADFTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkConstant_Click()
  userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST) = chkConstant.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkConstantAndTrend_Click()
  userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST_TREND) = chkConstantAndTrend.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkConstTrendTrendSquared_Click()
  userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST_TREND_TREND_SQUARED) = chkConstTrendTrendSquared.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkKPSSTest_Click()
  userOptions.SELECTED_TEST(KPSS_TEST) = chkKPSSTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub chkNoConstant_Click()
  userOptions.SELECTED_TEST_SCENARIO(STATIONARY_NO_CONST) = chkNoConstant.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub ChkTestDown_Click()
  userOptions.TEST_DOWN = ChkTestDown.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdHelp_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdHelp.HelpContextID, zenSlugId)
End Sub

Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
    
    userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
    txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtMaxLagOrder_Change()
  If IsNumeric(txtMaxLagOrder.value) = True And _
     txtMaxLagOrder.value >= 0 Then
    userOptions.MAX_LAG_ORDER = txtMaxLagOrder.value
    
    If callValidateForm = True Then
      Call validateForm
    End If
  Else
    MsgBox "Max Lag Order must be a positive integer", vbOKOnly, PRODUCT_MEDIUMNAME
    txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  End If
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_PG_OPTIONS_HELPTIP)
  
  StationaryTestMethodFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_METHODS_FRAME_LABEL)
  StationaryTestMethodFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_METHODS_FRAME_HELPTIP)
  
  chkADFTest.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_ADF_METHOD_LABEL)
  chkADFTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_ADF_METHOD_HELPTIP)
  
  'ChkTestDown
  chkKPSSTest.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_KPSS_METHOD_LABEL)
  chkKPSSTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_KPSS_METHOD_HELPTIP)
  
  ChkTestDown.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_DOWN_LABEL)
  ChkTestDown.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_DOWN_HELPTIP)
  
  maxLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_MAX_LAG_LABEL)
  maxLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_MAX_LAG_HELPTIP)
  txtMaxLagOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_MAX_LAG_HELPTIP)
  
  ScenarioFrame.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIOS_FRAME_LABEL)
  ScenarioFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIOS_FRAME_HELPTIP)
  
  chkNoConstant.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_LABEL)
  chkNoConstant.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_HELPTIP)
  
  chkConstant.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_LABEL)
  chkConstant.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_HELPTIP)
  
  chkConstantAndTrend.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_LABEL)
  chkConstantAndTrend.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_HELPTIP)
  
  chkConstTrendTrendSquared.Caption = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_LABEL)
  chkConstTrendTrendSquared.ControlTipText = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New StationaryTestUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
  
  chkADFTest.enabled = dataAvailable
  chkKPSSTest.enabled = dataAvailable
  
  chkNoConstant.enabled = dataAvailable And (userOptions.SELECTED_TEST(ADF_TEST) Or userOptions.SELECTED_TEST(KPSS_TEST))
    
  chkConstant.enabled = chkNoConstant.enabled
  chkConstantAndTrend.enabled = chkNoConstant.enabled
  chkConstTrendTrendSquared.enabled = chkNoConstant.enabled
  ChkTestDown.enabled = chkNoConstant.enabled
  txtMaxLagOrder.enabled = chkNoConstant.enabled
  
  RefEditSignificanceLevel.enabled = dataAvailable
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        ready = valid_alpha
      End If
  End If
    
  cmdOK.enabled = ready
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  RefEditSignificanceLevel.value = myGeneralUO.significance
  
  chkADFTest.value = userOptions.SELECTED_TEST(ADF_TEST)
  chkKPSSTest.value = userOptions.SELECTED_TEST(KPSS_TEST)
  
  chkNoConstant.value = userOptions.SELECTED_TEST_SCENARIO(STATIONARY_NO_CONST)
  chkConstant.value = userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST)
  chkConstantAndTrend.value = userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST_TREND)
  chkConstTrendTrendSquared.value = userOptions.SELECTED_TEST_SCENARIO(STATIONARY_CONST_TREND_TREND_SQUARED)
  ChkTestDown.value = userOptions.TEST_DOWN
  
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  
  userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
  txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    ' "Enter a valid time series range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR)
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      '"The time series range should be one column or one row."
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR)
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        '"The times series values should be numbers and without any spaces."
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR)
        Exit Sub
      Else
        Set myRange = Range(RefOutput)
        If myRange Is Nothing Then
          '"Enter a valid output range."
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR)
          Exit Sub
        Else
          If RefEditSignificanceLevel.enabled Then
            If Not isAlphaValid(RefEditSignificanceLevel.value) Then
              '"Only numbers between 0 and 100% are allowed."
              MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR)
              RefEditSignificanceLevel.value = vbNullString
              Exit Sub
            End If
          End If
          
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_STATUSBAR_CALCULATION_MSG)
          
          Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
  
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "StationaryTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: StationaryTestUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/StationaryTestUO.cls $
'
Private Const msMODULE As String = "CLASS:StationaryTestUO"

Public Enum STATIONARY_TEST_SCENARIO
  STATIONARY_NO_CONST = 1
  STATIONARY_CONST = 2
  STATIONARY_TREND = 3
  STATIONARY_CONST_TREND = 4
  STATIONARY_CONST_TREND_TREND_SQUARED = 5
End Enum

Public Enum STATIONARY_TESTS
  ADF_TEST = 1
  KPSS_TEST = 2
End Enum

Private myTests(1 To 2) As Boolean
Private myTestScenario(1 To 5) As Boolean
Private myMaxLagOrder As Long
Private myTestDown As Boolean

Private STAT_STATIONARY_TEST_SCENARIO_LABELS(1 To 5) As String



Private Sub Class_Initialize()
  STAT_STATIONARY_TEST_SCENARIO_LABELS(1) = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_BRIEF) ' "No Const"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(2) = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_BRIEF) ' "Const-Only"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(3) = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_TREND_ONLY_BRIEF) ' "Trend-Only"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(4) = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_BRIEF) ' "Const + Trend"
  STAT_STATIONARY_TEST_SCENARIO_LABELS(5) = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_BRIEF) ' "Const+Trend+Trend^2"
  
  Call ResetToDefault
End Sub


'ResetToDefault
Public Sub ResetToDefault()

  myTests(1) = True
  myTests(2) = True
  myTestScenario(1) = True
  myTestScenario(2) = True
  myTestScenario(3) = False
  myTestScenario(4) = True
  myTestScenario(5) = True
  
  myTestDown = True
  myMaxLagOrder = 1
End Sub

Public Property Get SELECTED_TEST(Index As STATIONARY_TESTS) As Boolean
  SELECTED_TEST = myTests(Index)
End Property

Public Property Let SELECTED_TEST(Index As STATIONARY_TESTS, ByVal vNewValue As Boolean)
  myTests(Index) = vNewValue
End Property


Public Property Get SELECTED_TEST_SCENARIO(Index As STATIONARY_TEST_SCENARIO) As Boolean
  SELECTED_TEST_SCENARIO = myTestScenario(Index)
End Property

Public Property Let SELECTED_TEST_SCENARIO(Index As STATIONARY_TEST_SCENARIO, ByVal vNewValue As Boolean)
  myTestScenario(Index) = vNewValue
End Property

Public Property Get TEST_DOWN() As Boolean
  TEST_DOWN = myTestDown
End Property

Public Property Let TEST_DOWN(ByVal vNewValue As Boolean)
  myTestDown = vNewValue
End Property

Public Property Get MAX_LAG_ORDER() As Long
  MAX_LAG_ORDER = myMaxLagOrder
End Property

Public Property Let MAX_LAG_ORDER(ByVal vNewValue As Long)
  myMaxLagOrder = vNewValue
End Property


' Add specific routines for White-noise test (reference other classes if needed)
Public Function calcMaxLags(ByRef inputData As GeneralUO) As Long
  Const sSOURCE As String = "calcMaxLags"
  
  Dim rng As Object
  If Len(inputData.INPUT_RANGE) > 0 Then
    Set rng = Range(inputData.INPUT_RANGE)
    
    calcMaxLags = Int((rng.Cells.count) ^ (1 / 3)) + 1
  End If
End Function




' Print the Stationary test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printNormalityTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As STATIONARY_TEST_SCENARIO
  Dim row As Long
  Dim szTemp As String
  Dim testdown As Integer
  
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_OUTPUT_TABLE_HEADER) '"Stationary Test"
  End With

  myRange.Cells(2, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TEST_HEADER) ' "Test"
  End With
  
  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER) '"Stat"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE)  ' HYPOTHESIS_TEST_SCORE_NOTE
    End If
  End With

  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) '"P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE) 'HYPOTHESIS_TEST_PV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)  'HYPOTHESIS_TEST_PV_NOTE
    End If
  End With

  myRange.Cells(2, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) ' "C.V."
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE)  ' HYPOTHESIS_TEST_CV_NOTE
    End If
  End With

  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_OUTPUT_PASS_TEST_LABEL) ' "Stationary?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_OUTPUT_PASS_TEST_NOTE) ' STATIONARY_TEST_PASS_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_OUTPUT_PASS_TEST_NOTE)  ' STATIONARY_TEST_PASS_NOTE
    End If
  End With

  myRange.Cells(2, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE) ' HYPOTHESIS_TEST_ALPHA_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)  ' HYPOTHESIS_TEST_ALPHA_NOTE
    End If
  End With


  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With


  'Let's do the ADF Test
  row = 3
  myRange.Cells(row, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_STATIONARY_TEST_ADF_METHOD_BRIEF) ' "ADF"
  End With
  
  testdown = 0
  If myTestDown = True Then
   testdown = 1
  End If
  
  For i = STATIONARY_NO_CONST To STATIONARY_CONST_TREND_TREND_SQUARED
    If SELECTED_TEST_SCENARIO(i) = True Then
      row = row + 1
      
      myRange.Cells(row, 1).Select
      With Selection
        .HorizontalAlignment = xlRight
        .Font.Bold = False
        .Font.Italic = True
        .value = STAT_STATIONARY_TEST_SCENARIO_LABELS(i)
      End With
      
      'Z-score
      myRange.Cells(row, 2).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=ADFTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & _
                     myMaxLagOrder & "," & i & "," & testdown & ",2)"
        .NumberFormat = "#0.0"
      End With
      
      'P-Value
      myRange.Cells(row, 3).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=ADFTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & _
                     myMaxLagOrder & "," & i & "," & testdown & ",1)"
        .NumberFormat = "#0.0%"
      End With
      
      'C.V
      myRange.Cells(row, 4).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = "=ADFTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & _
                     myMaxLagOrder & "," & i & "," & testdown & ",3," & myRange.Cells(2, 6).Address() & ")"
        .NumberFormat = "#0.0"
      End With
      
      szTemp = "=IF(" & myRange.Cells(row, 3).Address(RowAbsolute:=False) & "<" & myRange.Cells(2, 6).Address() & ", TRUE, FALSE)"
      myRange.Cells(row, 5).Select
      With Selection
        .HorizontalAlignment = xlCenter
        .Font.Bold = False
        .formula = szTemp
      End With
    End If
    
  Next i

  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select

SubExit:
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16770 $
'  $Date: 2019-10-08 14:33:55 -0500 (Tue, 08 Oct 2019) $
'  $Author: builder $
'  $Id: ThisWorkbook.cls 16770 2019-10-08 19:33:55Z builder $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/Excel2007/ThisWorkbook.cls $
'
Private Const msMODULE As String = "EXCEL:ThisWorkBook"


Private Sub Workbook_Close()
  Const sSOURCE As String = "Workbook_Close"
  
  Dim nRet As Integer
  On Error GoTo ErrorHnadler
  
    nRet = MSGAPI.msg_shutdown()
Cleanup:
  Exit Sub
  
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)

#If DEBUGGING Then
  MsgBox "Error occured switching locality setting", vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
#End If

  Resume Cleanup
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Const sSOURCE As String = "Workbook_BeforeClose"
  
  Dim nRet As Integer
  On Error GoTo ErrorHnadler
  
  If Cancel = False Then
    nRet = MSGAPI.msg_shutdown()
  End If
  
  Exit Sub
ErrorHnadler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)

End Sub

Private Sub Workbook_Open()
  Dim nRet As Integer
  
  nRet = MSGAPI.msg_init(Me.path)
End Sub
Attribute VB_Name = "Toolbar"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: Toolbar.bas 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/Excel2007/Toolbar.bas $
'
Private Const msMODULE As String = "Toolbar"

' Define Toolbar Ids
' Descriptive Statistics
Private Const GRP_SUMMARY_STAT As String = "GRP_SUMMARY_STAT"
' Summary statistics
Private Const GAL_SUMSTAT_DESCSTAT As String = "GAL_SUMSTAT_DESCSTAT"
Private Const BTN_SUMSTAT_DESCSTAT_SUMSTAT = "BTN_SUMSTAT_DESCSTAT_SUMSTAT"
Private Const BTN_SUMSTAT_DESCSTAT_HISTOGRAM = "BTN_SUMSTAT_DESCSTAT_HISTOGRAM"
Private Const BTN_SUMSTAT_DESCSTAT_QQPLOT = "BTN_SUMSTAT_DESCSTAT_QQPLOT"
Private Const BTN_SUMSTAT_DESCSTAT_EDF = "BTN_SUMSTAT_DESCSTAT_EDF"
Private Const BTN_SUMSTAT_DESCSTAT_KDE = "BTN_SUMSTAT_DESCSTAT_KDE"
' Statistical testing
Private Const GAL_SUMSTAT_STATTEST As String = "GAL_SUMSTAT_STATTEST"
Private Const BTN_SUMSTAT_STATTEST_NORMALITY As String = "BTN_SUMSTAT_STATTEST_NORMALITY"
Private Const BTN_SUMSTAT_STATTEST_ANOVA As String = "BTN_SUMSTAT_STATTEST_ANOVA"
Private Const BTN_SUMSTAT_STATTEST_COLLINEARITY As String = "BTN_SUMSTAT_STATTEST_COLLINEARITY"
Private Const BTN_SUMSTAT_STATTEST_REGRESSSTABILITY As String = "BTN_SUMSTAT_STATTEST_REGRESSSTABILITY"
Private Const BTN_SUMSTAT_STATTEST_WHITENOISE As String = "BTN_SUMSTAT_STATTEST_WHITENOISE"
Private Const BTN_SUMSTAT_STATTEST_ARCHTEST As String = "BTN_SUMSTAT_STATTEST_ARCHTEST"
Private Const BTN_SUMSTAT_STATTEST_STATIONARY As String = "BTN_SUMSTAT_STATTEST_STATIONARY"
Private Const BTN_SUMSTAT_STATTEST_HOMOGENEITY As String = "BTN_SUMSTAT_STATTEST_HOMOGENEITY"
Private Const BTN_SUMSTAT_STATTEST_COINTEGRATION As String = "BTN_SUMSTAT_STATTEST_COINTEGRATION"

Private Const BTN_SUMSTAT_CORRELOGRAM As String = "BTN_SUMSTAT_CORRELOGRAM"
Private Const GRP_DATA_PREP As String = "GRP_DATA_PREP"

Private Const BTN_DATAPREP_TRANSFORM As String = "BTN_DATAPREP_TRANSFORM"
Private Const BTN_DATAPREP_OUTLIER As String = "BTN_DATAPREP_OUTLIER"
Private Const BTN_DATAPREP_RESAMPLE As String = "BTN_DATAPREP_RESAMPLE"

Private Const GRP_MODELING As String = "GRP_MODELING"
Private Const GAL_MODELING_ARMA As String = "GAL_MODELING_ARMA"
Private Const BTN_MODELING_ARMA_ARMA As String = "BTN_MODELING_ARMA_ARMA"
Private Const BTN_MODELING_ARMA_ARIMA As String = "BTN_MODELING_ARMA_ARIMA"
Private Const BTN_MODELING_ARMA_FARIMA As String = "BTN_MODELING_ARMA_FARIMA"
Private Const BTN_MODELING_ARMA_SARIMA As String = "BTN_MODELING_ARMA_SARIMA"
Private Const BTN_MODELING_ARMA_AIRLINE As String = "BTN_MODELING_ARMA_AIRLINE"
Private Const BTN_MODELING_ARMA_X12ARIMA As String = "BTN_MODELING_ARMA_X12ARIMA"
Private Const BTN_MODELING_ARMA_X13ARIMASEATS As String = "BTN_MODELING_ARMA_X13ARIMASEATS"

Private Const BTN_MODELING_ARMAX As String = "BTN_MODELING_ARMAX"
Private Const BTN_MODELING_GARCH As String = "BTN_MODELING_GARCH"
Private Const BTN_MODELING_COMBO As String = "BTN_MODELING_COMBO"

Private Const GRP_FACTOR_ANALYSIS As String = "GRP_FACTOR_ANALYSIS"
Private Const BTN_FACTOR_ANALYSIS_REGRESSION As String = "BTN_FACTOR_ANALYSIS_REGRESSION"
Private Const BTN_FACTOR_ANALYSIS_PCA As String = "BTN_FACTOR_ANALYSIS_PCA"
Private Const BTN_FACTOR_ANALYSIS_GLM As String = "BTN_FACTOR_ANALYSIS_GLM"

Private Const GRP_POWER_TOOLS As String = "GRP_POWER_TOOLS"
Private Const BTN_POWERTOOLS_MODEL_DETECT As String = "BTN_POWERTOOLS_MODEL_DETECT"
Private Const BTN_POWERTOOLS_DIAGNOSIS As String = "BTN_POWERTOOLS_DIAGNOSIS"
Private Const BTN_POWERTOOLS_CALIBRATION As String = "BTN_POWERTOOLS_CALIBRATION"
Private Const BTN_POWERTOOLS_FORECAST As String = "BTN_POWERTOOLS_FORECAST"
Private Const BTN_POWERTOOLS_SIMULATE As String = "BTN_POWERTOOLS_SIMULATE"
Private Const BTN_POWERTOOLS_MCSIMULATE As String = "BTN_POWERTOOLS_MCSIMULATE"

Private Const GRP_SPECTRAL_ANALYSIS As String = "GRP_SPECTRAL_ANALYSIS"
Private Const BTN_SPECTRAL_ANALYSIS_FOURIER As String = "BTN_SPECTRAL_ANALYSIS_FOURIER"
Private Const BTN_SPECTRAL_ANALYSIS_PERIODOGRAM As String = "BTN_SPECTRAL_ANALYSIS_PERIODOGRAM"
Private Const GAL_SPECTRAL_ANALYSIS_FILTERS As String = "GAL_SPECTRAL_ANALYSIS_FILTERS"
Private Const BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT As String = "BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT"
Private Const BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING As String = "BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING"

Private Const GRP_SUPPORT As String = "GRP_SUPPORT"
Private Const BTN_SUPPORT_GETTINGSTARTED As String = "BTN_SUPPORT_GETTINGSTARTED"
Private Const GAL_SUPPORT_NUMXLINFO As String = "GAL_SUPPORT_NUMXLINFO"
Private Const BTN_SUPPORT_NUMXLINFO_USERGUIDE As String = "BTN_SUPPORT_NUMXLINFO_USERGUIDE"
Private Const BTN_SUPPORT_NUMXLINFO_CONTACTUS As String = "BTN_SUPPORT_NUMXLINFO_CONTACTUS"
Private Const BTN_SUPPORT_NUMXLINFO_COMMUNITY As String = "BTN_SUPPORT_NUMXLINFO_COMMUNITY"
Private Const BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL As String = "BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL"
Private Const BTN_SUPPORT_NUMXLINFO_CHECKUPDATES As String = "BTN_SUPPORT_NUMXLINFO_CHECKUPDATES"



' Set the summary statistics label dynamically
Sub GetLabel(control As Object, ByRef returnedVal)
  Select Case control.ID
    Case GRP_SUMMARY_STAT
      returnedVal = getLocaleString(IDS_GRP_SUMMARY_STAT_LABEL)
    Case GAL_SUMSTAT_DESCSTAT
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_DESCSTAT_LABEL)
    Case BTN_SUMSTAT_DESCSTAT_SUMSTAT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_LABEL)
    Case BTN_SUMSTAT_DESCSTAT_HISTOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_LABEL)
    Case BTN_SUMSTAT_DESCSTAT_QQPLOT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_LABEL)
    Case BTN_SUMSTAT_DESCSTAT_EDF
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_EDF_LABEL)
    Case BTN_SUMSTAT_DESCSTAT_KDE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_KDE_LABEL)
    Case GAL_SUMSTAT_STATTEST
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_STATTEST_lABEL)
    Case BTN_SUMSTAT_STATTEST_NORMALITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_NORMALITY_LABEL)
    Case BTN_SUMSTAT_STATTEST_ANOVA
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ANOVA_LABEL)
    Case BTN_SUMSTAT_STATTEST_COLLINEARITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_LABEL)
    Case BTN_SUMSTAT_STATTEST_REGRESSSTABILITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_LABEL)
    Case BTN_SUMSTAT_STATTEST_WHITENOISE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_LABEL)
    Case BTN_SUMSTAT_STATTEST_ARCHTEST
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_LABEL)
    Case BTN_SUMSTAT_STATTEST_STATIONARY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_STATIONARY_LABEL)
    Case BTN_SUMSTAT_STATTEST_HOMOGENEITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_LABEL)
    Case BTN_SUMSTAT_STATTEST_COINTEGRATION
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_LABEL)
    Case BTN_SUMSTAT_CORRELOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_CORRELOGRAM_LABEL)
    Case GRP_DATA_PREP
      returnedVal = getLocaleString(IDS_GRP_DATA_PREP_LABEL)
    Case BTN_DATAPREP_TRANSFORM
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_TRANSFORM_LABEL)
    Case BTN_DATAPREP_OUTLIER
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_OUTLIER_LABEL)
    Case BTN_DATAPREP_RESAMPLE
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_RESAMPLE_LABEL)
    Case GRP_MODELING
      returnedVal = getLocaleString(IDS_GRP_MODELING_LABEL)
    Case GAL_MODELING_ARMA
      returnedVal = getLocaleString(IDS_GAL_MODELING_ARMA_LABEL)
    Case BTN_MODELING_ARMA_ARMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARMA_LABEL)
    Case BTN_MODELING_ARMA_ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARIMA_LABEL)
    Case BTN_MODELING_ARMA_FARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_FARIMA_LABEL)
    Case BTN_MODELING_ARMA_SARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_SARIMA_LABEL)
    Case BTN_MODELING_ARMA_AIRLINE
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_AIRLINE_LABEL)
    Case BTN_MODELING_ARMA_X12ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X12ARIMA_LABEL)
    Case BTN_MODELING_ARMA_X13ARIMASEATS
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X13ARIMASEATS_LABEL)
    Case BTN_MODELING_ARMAX
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMAX_LABEL)
    Case BTN_MODELING_GARCH
      returnedVal = getLocaleString(IDS_BTN_MODELING_GARCH_LABEL)
    Case BTN_MODELING_COMBO
      returnedVal = getLocaleString(IDS_BTN_MODELING_COMBO_LABEL)
    Case GRP_FACTOR_ANALYSIS
      returnedVal = getLocaleString(IDS_GRP_FACTOR_ANALYSIS_LABEL)
    Case BTN_FACTOR_ANALYSIS_REGRESSION
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_REGRESSION_LABEL)
    Case BTN_FACTOR_ANALYSIS_PCA
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_PCA_LABEL)
    Case BTN_FACTOR_ANALYSIS_GLM
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_GLM_LABEL)
    Case GRP_POWER_TOOLS
      returnedVal = getLocaleString(IDS_GRP_POWER_TOOLS_LABEL)
    Case BTN_POWERTOOLS_MODEL_DETECT
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MODEL_DETECT_LABEL)
    Case BTN_POWERTOOLS_DIAGNOSIS
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_DIAGNOSIS_LABEL)
    Case BTN_POWERTOOLS_CALIBRATION
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_CALIBRATION_LABEL)
    Case BTN_POWERTOOLS_FORECAST
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_FORECAST_LABEL)
    Case BTN_POWERTOOLS_SIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_SIMULATE_LABEL)
    Case BTN_POWERTOOLS_MCSIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MCSIMULATE_LABEL)
    Case GRP_SPECTRAL_ANALYSIS
      returnedVal = getLocaleString(IDS_GRP_SPECTRAL_ANALYSIS_LABEL)
    Case BTN_SPECTRAL_ANALYSIS_FOURIER
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_LABEL)
    Case BTN_SPECTRAL_ANALYSIS_PERIODOGRAM
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_LABEL)
    Case GAL_SPECTRAL_ANALYSIS_FILTERS
      returnedVal = getLocaleString(IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_LABEL)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_LABEL)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_LABEL)
    Case GRP_SUPPORT
      returnedVal = getLocaleString(IDS_GRP_SUPPORT_LABEL)
    Case BTN_SUPPORT_GETTINGSTARTED
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_GETTINGSTARTED_LABEL)
    Case GAL_SUPPORT_NUMXLINFO
      returnedVal = getLocaleString(IDS_GAL_SUPPORT_NUMXLINFO_LABEL)
    Case BTN_SUPPORT_NUMXLINFO_USERGUIDE
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_LABEL)
    Case BTN_SUPPORT_NUMXLINFO_CONTACTUS
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_LABEL)
    Case BTN_SUPPORT_NUMXLINFO_COMMUNITY
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_LABEL)
    Case BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_LABEL)
    Case BTN_SUPPORT_NUMXLINFO_CHECKUPDATES
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_LABEL)
    Case Else
      returnedVal = "N/A"
  End Select
End Sub

' Set the screen tip dynamically
Sub GetScreentip(control As Object, ByRef returnedVal)
  
  Select Case control.ID
    Case GAL_SUMSTAT_DESCSTAT
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_DESCSTAT_SCREENTIP)
    Case BTN_SUMSTAT_DESCSTAT_SUMSTAT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_SCREENTIP)
    Case BTN_SUMSTAT_DESCSTAT_HISTOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_SCREENTIP)
    Case BTN_SUMSTAT_DESCSTAT_QQPLOT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_SCREENTIP)
    Case BTN_SUMSTAT_DESCSTAT_EDF
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_EDF_SCREENTIP)
    Case BTN_SUMSTAT_DESCSTAT_KDE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_KDE_SCREENTIP)
    Case GAL_SUMSTAT_STATTEST
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_STATTEST_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_NORMALITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_NORMALITY_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_ANOVA
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ANOVA_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_COLLINEARITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_REGRESSSTABILITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_WHITENOISE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_ARCHTEST
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_STATIONARY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_STATIONARY_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_HOMOGENEITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_SCREENTIP)
    Case BTN_SUMSTAT_STATTEST_COINTEGRATION
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_SCREENTIP)
    Case BTN_SUMSTAT_CORRELOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_CORRELOGRAM_SCREENTIP)
    Case BTN_DATAPREP_TRANSFORM
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_TRANSFORM_SCREENTIP)
    Case BTN_DATAPREP_OUTLIER
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_OUTLIER_SCREENTIP)
    Case BTN_DATAPREP_RESAMPLE
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_RESAMPLE_SCREENTIP)
    Case GAL_MODELING_ARMA
      returnedVal = getLocaleString(IDS_GAL_MODELING_ARMA_SCREENTIP)
    Case BTN_MODELING_ARMA_ARMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARMA_SCREENTIP)
    Case BTN_MODELING_ARMA_ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARIMA_SCREENTIP)
    Case BTN_MODELING_ARMA_FARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_FARIMA_SCREENTIP)
    Case BTN_MODELING_ARMA_SARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_SARIMA_SCREENTIP)
    Case BTN_MODELING_ARMA_AIRLINE
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_AIRLINE_SCREENTIP)
    Case BTN_MODELING_ARMA_X12ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X12ARIMA_SCREENTIP)
    Case BTN_MODELING_ARMA_X13ARIMASEATS
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X13ARIMASEATS_SCREENTIP)
    Case BTN_MODELING_ARMAX
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMAX_SCREENTIP)
    Case BTN_MODELING_GARCH
      returnedVal = getLocaleString(IDS_BTN_MODELING_GARCH_SCREENTIP)
    Case BTN_MODELING_COMBO
      returnedVal = getLocaleString(IDS_BTN_MODELING_COMBO_SCREENTIP)
    Case BTN_FACTOR_ANALYSIS_REGRESSION
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_REGRESSION_SCREENTIP)
    Case BTN_FACTOR_ANALYSIS_PCA
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_PCA_SCREENTIP)
    Case BTN_FACTOR_ANALYSIS_GLM
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_GLM_SCREENTIP)
    Case BTN_POWERTOOLS_MODEL_DETECT
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MODEL_DETECT_SCREENTIP)
    Case BTN_POWERTOOLS_DIAGNOSIS
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_DIAGNOSIS_SCREENTIP)
    Case BTN_POWERTOOLS_CALIBRATION
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_CALIBRATION_SCREENTIP)
    Case BTN_POWERTOOLS_FORECAST
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_FORECAST_SCREENTIP)
    Case BTN_POWERTOOLS_SIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_SIMULATE_SCREENTIP)
    Case BTN_POWERTOOLS_MCSIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MCSIMULATE_SCREENTIP)
    Case BTN_SPECTRAL_ANALYSIS_FOURIER
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_SCREENTIP)
    Case BTN_SPECTRAL_ANALYSIS_PERIODOGRAM
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_SCREENTIP)
    Case GAL_SPECTRAL_ANALYSIS_FILTERS
      returnedVal = getLocaleString(IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_SCREENTIP)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_SCREENTIP)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_SCREENTIP)
    Case BTN_SUPPORT_GETTINGSTARTED
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_GETTINGSTARTED_SCREENTIP)
    Case GAL_SUPPORT_NUMXLINFO
      returnedVal = getLocaleString(IDS_GAL_SUPPORT_NUMXLINFO_SCREENTIP)
    Case BTN_SUPPORT_NUMXLINFO_USERGUIDE
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_SCREENTIP)
    Case BTN_SUPPORT_NUMXLINFO_CONTACTUS
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_SCREENTIP)
    Case BTN_SUPPORT_NUMXLINFO_COMMUNITY
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_SCREENTIP)
    Case BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_SCREENTIP)
    Case BTN_SUPPORT_NUMXLINFO_CHECKUPDATES
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_SCREENTIP)
    Case Else
      returnedVal = "N/A"
  End Select



End Sub

' Set the super tip dynamically
Sub GetSupertip(control As Object, ByRef returnedVal)
  Select Case control.ID
    Case GAL_SUMSTAT_DESCSTAT
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_DESCSTAT_SUPERTIP)
    Case BTN_SUMSTAT_DESCSTAT_SUMSTAT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_SUPERTIP)
    Case BTN_SUMSTAT_DESCSTAT_HISTOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_SUPERTIP)
    Case BTN_SUMSTAT_DESCSTAT_QQPLOT
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_SUPERTIP)
    Case BTN_SUMSTAT_DESCSTAT_EDF
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_EDF_SUPERTIP)
    Case BTN_SUMSTAT_DESCSTAT_KDE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_DESCSTAT_KDE_SUPERTIP)
    Case GAL_SUMSTAT_STATTEST
      returnedVal = getLocaleString(IDS_GAL_SUMSTAT_STATTEST_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_NORMALITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_NORMALITY_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_ANOVA
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ANOVA_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_COLLINEARITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_REGRESSSTABILITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_WHITENOISE
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_ARCHTEST
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_STATIONARY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_STATIONARY_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_HOMOGENEITY
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_SUPERTIP)
    Case BTN_SUMSTAT_STATTEST_COINTEGRATION
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_SUPERTIP)
    Case BTN_SUMSTAT_CORRELOGRAM
      returnedVal = getLocaleString(IDS_BTN_SUMSTAT_CORRELOGRAM_SUPERTIP)
    Case BTN_DATAPREP_TRANSFORM
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_TRANSFORM_SUPERTIP)
    Case BTN_DATAPREP_OUTLIER
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_OUTLIER_SUPERTIP)
    Case BTN_DATAPREP_RESAMPLE
      returnedVal = getLocaleString(IDS_BTN_DATAPREP_RESAMPLE_SUPERTIP)
    Case GAL_MODELING_ARMA
      returnedVal = getLocaleString(IDS_GAL_MODELING_ARMA_SUPERTIP)
    Case BTN_MODELING_ARMA_ARMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARMA_SUPERTIP)
    Case BTN_MODELING_ARMA_ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_ARIMA_SUPERTIP)
    Case BTN_MODELING_ARMA_FARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_FARIMA_SUPERTIP)
    Case BTN_MODELING_ARMA_SARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_SARIMA_SUPERTIP)
    Case BTN_MODELING_ARMA_AIRLINE
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_AIRLINE_SUPERTIP)
    Case BTN_MODELING_ARMA_X12ARIMA
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X12ARIMA_SUPERTIP)
    Case BTN_MODELING_ARMA_X13ARIMASEATS
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMA_X13ARIMASEATS_SUPERTIP)
    Case BTN_MODELING_ARMAX
      returnedVal = getLocaleString(IDS_BTN_MODELING_ARMAX_SUPERTIP)
    Case BTN_MODELING_GARCH
      returnedVal = getLocaleString(IDS_BTN_MODELING_GARCH_SUPERTIP)
    Case BTN_MODELING_COMBO
      returnedVal = getLocaleString(IDS_BTN_MODELING_COMBO_SUPERTIP)
    Case BTN_FACTOR_ANALYSIS_REGRESSION
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_REGRESSION_SUPERTIP)
    Case BTN_FACTOR_ANALYSIS_PCA
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_PCA_SUPERTIP)
    Case BTN_FACTOR_ANALYSIS_GLM
      returnedVal = getLocaleString(IDS_BTN_FACTOR_ANALYSIS_GLM_SUPERTIP)
    Case BTN_POWERTOOLS_MODEL_DETECT
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MODEL_DETECT_SUPERTIP)
    Case BTN_POWERTOOLS_DIAGNOSIS
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_DIAGNOSIS_SUPERTIP)
    Case BTN_POWERTOOLS_CALIBRATION
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_CALIBRATION_SUPERTIP)
    Case BTN_POWERTOOLS_FORECAST
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_FORECAST_SUPERTIP)
    Case BTN_POWERTOOLS_SIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_SIMULATE_SUPERTIP)
    Case BTN_POWERTOOLS_MCSIMULATE
      returnedVal = getLocaleString(IDS_BTN_POWERTOOLS_MCSIMULATE_SUPERTIP)
    Case BTN_SPECTRAL_ANALYSIS_FOURIER
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_SUPERTIP)
    Case BTN_SPECTRAL_ANALYSIS_PERIODOGRAM
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_SUPERTIP)
    Case GAL_SPECTRAL_ANALYSIS_FILTERS
      returnedVal = getLocaleString(IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_SUPERTIP)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_SUPERTIP)
    Case BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING
      returnedVal = getLocaleString(IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_SUPERTIP)
    Case BTN_SUPPORT_GETTINGSTARTED
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_GETTINGSTARTED_SUPERTIP)
    Case GAL_SUPPORT_NUMXLINFO
      returnedVal = getLocaleString(IDS_GAL_SUPPORT_NUMXLINFO_SUPERTIP)
    Case BTN_SUPPORT_NUMXLINFO_USERGUIDE
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_SUPERTIP)
    Case BTN_SUPPORT_NUMXLINFO_CONTACTUS
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_SUPERTIP)
    Case BTN_SUPPORT_NUMXLINFO_COMMUNITY
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_SUPERTIP)
    Case BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_SUPERTIP)
    Case BTN_SUPPORT_NUMXLINFO_CHECKUPDATES
      returnedVal = getLocaleString(IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_SUPERTIP)
    Case Else
      returnedVal = "N/A"
  End Select
End Sub

' Set the Enabled state dynamically
Public Sub GetEnabled(control As Object, ByRef enabled)
  Dim status As LICENSE_LEVEL_TYPE
  
  status = LUCAPI.vb_getLicenseLevel()
  
  Select Case control.Tag
    Case "disabled"
      enabled = False
    Case Else
      Select Case control.ID
        Case GRP_SUMMARY_STAT
            enabled = (status <= IDL_GRP_SUMMARY_STAT)
        Case GAL_SUMSTAT_DESCSTAT
            enabled = (status <= IDL_GAL_SUMSTAT_DESCSTAT)
        Case BTN_SUMSTAT_DESCSTAT_SUMSTAT
        enabled = (status <= IDL_BTN_SUMSTAT_DESCSTAT_SUMSTAT)
        Case BTN_SUMSTAT_DESCSTAT_HISTOGRAM
        enabled = (status <= IDL_BTN_SUMSTAT_DESCSTAT_HISTOGRAM)
        Case BTN_SUMSTAT_DESCSTAT_QQPLOT
        enabled = (status <= IDL_BTN_SUMSTAT_DESCSTAT_QQPLOT)
        Case BTN_SUMSTAT_DESCSTAT_EDF
        enabled = (status <= IDL_BTN_SUMSTAT_DESCSTAT_EDF)
        Case BTN_SUMSTAT_DESCSTAT_KDE
        enabled = (status <= IDL_BTN_SUMSTAT_DESCSTAT_KDE)
        Case BTN_SUMSTAT_CORRELOGRAM
        enabled = (status <= IDL_BTN_SUMSTAT_CORRELOGRAM)
        Case GAL_SUMSTAT_STATTEST
        enabled = (status <= IDL_GAL_SUMSTAT_STATTEST)
        Case BTN_SUMSTAT_STATTEST_NORMALITY
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_NORMALITY)
        Case BTN_SUMSTAT_STATTEST_ANOVA
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_ANOVA)
        Case BTN_SUMSTAT_STATTEST_COLLINEARITY
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_COLLINEARITY)
        Case BTN_SUMSTAT_STATTEST_REGRESSSTABILITY
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY)
        Case BTN_SUMSTAT_STATTEST_WHITENOISE
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_WHITENOISE)
        Case BTN_SUMSTAT_STATTEST_ARCHTEST
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_ARCHTEST)
        Case BTN_SUMSTAT_STATTEST_STATIONARY
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_STATIONARY)
        Case BTN_SUMSTAT_STATTEST_HOMOGENEITY
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_HOMOGENEITY)
        Case BTN_SUMSTAT_STATTEST_COINTEGRATION
        enabled = (status <= IDL_BTN_SUMSTAT_STATTEST_COINTEGRATION)
        Case GRP_DATA_PREP
        enabled = (status <= IDL_GRP_DATA_PREP)
        Case BTN_DATAPREP_TRANSFORM
        enabled = (status <= IDL_BTN_DATAPREP_TRANSFORM)
        Case BTN_DATAPREP_OUTLIER
        enabled = (status <= IDL_BTN_DATAPREP_OUTLIER)
        Case BTN_DATAPREP_RESAMPLE
        enabled = (status <= IDL_BTN_DATAPREP_RESAMPLE)
        Case GRP_MODELING
        enabled = (status <= IDL_GRP_MODELING)
        Case GAL_MODELING_ARMA
        enabled = (status <= IDL_GAL_MODELING_ARMA)
        Case BTN_MODELING_ARMA_ARMA
        enabled = (status <= IDL_BTN_MODELING_ARMA_ARMA)
        Case BTN_MODELING_ARMA_ARIMA
        enabled = (status <= IDL_BTN_MODELING_ARMA_ARIMA)
        Case BTN_MODELING_ARMA_FARIMA
        enabled = (status <= IDL_BTN_MODELING_ARMA_FARIMA)
        Case BTN_MODELING_ARMA_SARIMA
        enabled = (status <= IDL_BTN_MODELING_ARMA_SARIMA)
        Case BTN_MODELING_ARMA_AIRLINE
        enabled = (status <= IDL_BTN_MODELING_ARMA_AIRLINE)
        Case BTN_MODELING_ARMA_X12ARIMA
        enabled = (status <= IDL_BTN_MODELING_ARMA_X12ARIMA)
        Case BTN_MODELING_ARMA_X13ARIMASEATS
        enabled = (status <= IDL_BTN_MODELING_ARMA_X13ARIMASEATS)
        Case BTN_MODELING_ARMAX
        enabled = (status <= IDL_BTN_MODELING_ARMAX)
        Case BTN_MODELING_GARCH
        enabled = (status <= IDL_BTN_MODELING_GARCH)
        Case BTN_MODELING_COMBO
        enabled = (status <= IDL_BTN_MODELING_COMBO)
        Case GRP_FACTOR_ANALYSIS
        enabled = (status <= IDL_GRP_FACTOR_ANALYSIS)
        Case BTN_FACTOR_ANALYSIS_REGRESSION
        enabled = (status <= IDL_BTN_FACTOR_ANALYSIS_REGRESSION)
        Case BTN_FACTOR_ANALYSIS_PCA
        enabled = (status <= IDL_BTN_FACTOR_ANALYSIS_PCA)
        Case BTN_FACTOR_ANALYSIS_GLM
        enabled = (status <= IDL_BTN_FACTOR_ANALYSIS_GLM)
        Case GRP_POWER_TOOLS
        enabled = (status <= IDL_GRP_POWER_TOOLS)
        Case BTN_POWERTOOLS_MODEL_DETECT
        enabled = (status <= IDL_BTN_POWERTOOLS_MODEL_DETECT)
        Case BTN_POWERTOOLS_DIAGNOSIS
        enabled = (status <= IDL_BTN_POWERTOOLS_DIAGNOSIS)
        Case BTN_POWERTOOLS_CALIBRATION
        enabled = (status <= IDL_BTN_POWERTOOLS_CALIBRATION)
        Case BTN_POWERTOOLS_FORECAST
        enabled = (status <= IDL_BTN_POWERTOOLS_FORECAST)
        Case BTN_POWERTOOLS_SIMULATE
        enabled = (status <= IDL_BTN_POWERTOOLS_SIMULATE)
        Case BTN_POWERTOOLS_MCSIMULATE
        enabled = (status <= IDL_BTN_POWERTOOLS_MCSIMULATE)
        Case GRP_SPECTRAL_ANALYSIS
        enabled = (status <= IDL_GRP_SPECTRAL_ANALYSIS)
        Case BTN_SPECTRAL_ANALYSIS_FOURIER
        enabled = (status <= IDL_BTN_SPECTRAL_ANALYSIS_FOURIER)
        Case BTN_SPECTRAL_ANALYSIS_PERIODOGRAM
        enabled = (status <= IDL_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM)
        Case GAL_SPECTRAL_ANALYSIS_FILTERS
        enabled = (status <= IDL_GAL_SPECTRAL_ANALYSIS_FILTERS)
        Case BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT
        enabled = (status <= IDL_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT)
        Case BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING
        enabled = (status <= IDL_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING)
        Case Else
          enabled = True
      End Select
  End Select
End Sub

' Set the show/hide state dynamically
Public Sub GetVisible(control As Object, ByRef visible)
  visible = True
End Sub


Attribute VB_Name = "UserInformationUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15701 $
'  $Date: 2016-08-04 13:29:50 -0500 (Thu, 04 Aug 2016) $
'  $Author: mohamad $
'  $Id: UserInformationUO.cls 15701 2016-08-04 18:29:50Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/UserInformationUO.cls $
'
Private Const msMODULE As String = "CLASS:UserInformationUO"

Private myCustomerName As String
Private myCompany As String
Private myEmailAddress As String
Private myInstallationPath As String
Private myDataPath As String
Private myBuildDate As String
Private myProductKey As String
Private myProductVersion As String
Private myProductRelease As String
Private myProductNewVersion As String
Private myNewVersionURL As String
Private myHostId As String
Private myExpiryDate As Date
Private myServiceExpiryDate As Date
Private myLicenseLevel As LICENSE_LEVEL_TYPE
Private myExcelVersion As EXCEL_VERSION_Type
Private myExcelCountryCode As EXCEL_COUNTRY_Type


Public Property Get CustomerName() As String
  CustomerName = myCustomerName
End Property

Public Property Let CustomerName(ByVal vNewValue As String)
  myCustomerName = vNewValue
End Property

Public Property Get Company() As String
  Company = myCompany
End Property

Public Property Let Company(ByVal vNewValue As String)
  myCompany = vNewValue
End Property

Public Property Get EMAIL() As String
  EMAIL = myEmailAddress
End Property

Public Property Let EMAIL(ByVal vNewValue As String)
  myEmailAddress = vNewValue
End Property

Public Property Get InstallPath() As String
  InstallPath = myInstallationPath
End Property

Public Property Let InstallPath(ByVal vNewValue As String)
  myInstallationPath = vNewValue
End Property

Public Property Get Product() As String
  Product = PRODUCT_NAME
End Property

Public Property Get BUILDDATE() As String
  BUILDDATE = myBuildDate
End Property

Public Property Let BUILDDATE(ByVal vNewValue As String)
  myBuildDate = vNewValue
End Property

Public Property Get ProductKey() As String
  ProductKey = myProductKey
End Property

Public Property Let ProductKey(ByVal vNewValue As String)
  myProductKey = vNewValue
End Property

Public Property Get ProductVersion() As Variant
  ProductVersion = myProductVersion
End Property

Public Property Let ProductVersion(ByVal vNewValue As Variant)
  myProductVersion = vNewValue
End Property

Public Property Get ProductRelease() As String
  ProductRelease = myProductRelease
End Property

Public Property Let ProductRelease(ByVal vNewValue As String)
  myProductRelease = vNewValue
End Property

Public Property Get HostId() As String
  HostId = myHostId
End Property

Public Property Let HostId(ByVal vNewValue As String)
  myHostId = vNewValue
End Property


Public Property Get expiryDate() As Date
  expiryDate = myExpiryDate
End Property

Public Property Let expiryDate(ByVal vNewValue As Date)
  myExpiryDate = vNewValue
End Property

Public Property Get serviceExpiryDate() As Date
  serviceExpiryDate = myServiceExpiryDate
End Property

Public Property Let serviceExpiryDate(ByVal vNewValue As Date)
  myServiceExpiryDate = vNewValue
End Property

Public Property Get newVersion() As String
  newVersion = myProductNewVersion
End Property

Public Property Let newVersion(ByVal vNewValue As String)
  myProductNewVersion = vNewValue
End Property


Public Property Get newVersionDownloadURL() As String
  newVersionDownloadURL = myNewVersionURL
End Property

Public Property Let newVersionDownloadURL(ByVal vNewValue As String)
  myNewVersionURL = vNewValue
End Property


Public Property Get LicenseLevel() As LICENSE_LEVEL_TYPE
  LicenseLevel = myLicenseLevel
End Property

Public Property Let LicenseLevel(ByVal vNewValue As LICENSE_LEVEL_TYPE)
  myLicenseLevel = vNewValue
End Property

Public Property Get InstallationPath() As String
  InstallationPath = myInstallationPath
End Property

Public Property Let InstallationPath(ByVal vNewValue As String)
  myInstallationPath = vNewValue
End Property

Public Property Get DataPath() As String
  DataPath = myDataPath
End Property

Public Property Let DataPath(ByVal vNewValue As String)
  myDataPath = vNewValue
End Property

' Initialize the member variables from the registry
Private Sub Class_Initialize()
  ' Hardcoded for now
  ' myProduct = PRODUCT_NAME

  Call InitParameters
End Sub

' Initialize the input parameters
Public Sub InitParameters()
  Dim dt As Date
  
  ' Watch out for messed up registry settings
  On Error GoTo ErrorHandler
  myCustomerName = vb_getCustomerName()
  myCompany = vb_getOrganization()
  myEmailAddress = vb_getCustomerEmail()
  myInstallationPath = vb_getInstallationPath()
  myBuildDate = vb_getBuildDate()
  myDataPath = vb_getDataPath()
  myHostId = vb_getHostId()
  myProductKey = vb_getLicenseKey()
  myProductVersion = vb_getVERSION()
  myProductRelease = vb_getReleaseName()
  myExpiryDate = vb_getExpiryDate()
  myLicenseLevel = vb_getLicenseLevel()
  
  myServiceExpiryDate = vb_getServiceExpiryDate()
  myProductNewVersion = vb_getLatestVersion()
  newVersionDownloadURL = vb_getLatestVersionURL()
  
  ' Replace date with a serial number
  myBuildDate = getDateSerialNo(myBuildDate)

  ' Query for International setting
  myExcelVersion = getExcelVersion()
  myExcelCountryCode = getExcellanguage()

ExitPt:
  Exit Sub

ErrorHandler:
  MsgBox "Invalid regsitry information", vbCritical Or vbOKOnly, PRODUCT_NAME
  Resume ExitPt
End Sub

Private Function vb_getCustomerName() As String
  Const sSOURCE As String = "vb_getCustomerName"
  
  If vb_RegistryKeyExists(REGISTRY_HKCU_CUSTOMER_PATH) Then
    vb_getCustomerName = vb_ReadRegistryKey(REGISTRY_HKCU_CUSTOMER_PATH)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_CUSTOMER_PATH) Then
      vb_getCustomerName = vb_ReadRegistryKey(REGISTRY_HKLM_CUSTOMER_PATH)
    Else
      vb_getCustomerName = "John Doe"
    End If
  End If
End Function

Private Function vb_getCustomerEmail() As String
  Const sSOURCE As String = "vb_getCustomerEmail"
  Dim szHostRegPath As String
  
  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\CUSTOMER"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getCustomerEmail = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKCU_EMAIL_PATH) Then
      vb_getCustomerEmail = vb_ReadRegistryKey(REGISTRY_HKCU_EMAIL_PATH)
    Else
      If vb_RegistryKeyExists(REGISTRY_HKLM_EMAIL_PATH) Then
        vb_getCustomerEmail = vb_ReadRegistryKey(REGISTRY_HKLM_EMAIL_PATH)
      Else
        vb_getCustomerEmail = "abc@xyz.com"
      End If
    End If
  End If
  
End Function



Private Function vb_getOrganization() As String
  Const sSOURCE As String = "vb_getOrganization"

  If vb_RegistryKeyExists(REGISTRY_HKCU_ORGANIZATION_PATH) Then
    vb_getOrganization = vb_ReadRegistryKey(REGISTRY_HKCU_ORGANIZATION_PATH)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_ORGANIZATION_PATH) Then
      vb_getOrganization = vb_ReadRegistryKey(REGISTRY_HKLM_ORGANIZATION_PATH)
    Else
      vb_getOrganization = "XYZ Inc"
    End If
  End If
End Function


Private Function vb_getBuildDate() As String
  Const sSOURCE As String = "vb_getBuildDate"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\BUILD"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getBuildDate = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKCU_BUILDDATE_PATH) Then
      vb_getBuildDate = vb_ReadRegistryKey(REGISTRY_HKCU_BUILDDATE_PATH)
    Else
      If vb_RegistryKeyExists(REGISTRY_HKLM_BUILDDATE_PATH) Then
        vb_getBuildDate = vb_ReadRegistryKey(REGISTRY_HKLM_BUILDDATE_PATH)
      Else
        vb_getBuildDate = "UNKNOWN"
      End If
    End If
  End If
End Function


' Read Service date from the registry if available
Private Function vb_getServiceExpiryDate() As String
  Const sSOURCE As String = "vb_getServiceExpiryDate"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\SERVICE"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getServiceExpiryDate = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_SERVICEDATE_PATH) Then
      vb_getServiceExpiryDate = vb_ReadRegistryKey(REGISTRY_HKLM_SERVICEDATE_PATH)
    Else
      vb_getServiceExpiryDate = vb_getExpiryDate()
    End If
  End If
End Function


Private Function vb_getLatestVersion() As String
  Const sSOURCE As String = "vb_getLatestVersion"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\NEWVERSION"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getLatestVersion = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_NEWVERSION_PATH) Then
      vb_getLatestVersion = vb_ReadRegistryKey(REGISTRY_HKLM_NEWVERSION_PATH)
    Else
      vb_getLatestVersion = myProductVersion
    End If
  End If
End Function


Private Function vb_getLatestVersionURL() As String
  Const sSOURCE As String = "vb_getLatestVersion"
  Dim szHostRegPath As String

  szHostRegPath = REGISTRY_HKCU & "\" & REGISTRY_PRODUCT_COMMON_PATH & "\" & myHostId & "\UPDATEURL"
  If vb_RegistryKeyExists(szHostRegPath) Then
    vb_getLatestVersionURL = vb_ReadRegistryKey(szHostRegPath)
  Else
    If vb_RegistryKeyExists(REGISTRY_HKLM_UPDATEURL_PATH) Then
      vb_getLatestVersionURL = vb_ReadRegistryKey(REGISTRY_HKLM_UPDATEURL_PATH)
    Else
      vb_getLatestVersionURL = REALEASENORES_URL
    End If
  End If
End Function


Attribute VB_Name = "Utilities"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: Utilities.bas 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/Utilities.bas $
'
Private Const msMODULE As String = "Utilities"

Dim oldStatusBar As Boolean
Dim oldPageBreakState As Boolean
Dim oldCalcSetup As Integer

Const SW_SHOWNORMAL = 1
Const VB_TAB = 9
Const KEYEVENTF_KEYUP = &H2

#If VBA7 Then
  ' Excel 2010 + (32/64-bit)
  ' LongPtr = 4/8 bytes = C-size_t
  Private Declare PtrSafe Function FindWindow Lib "user32" _
      Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
   
  Private Declare PtrSafe Function GetWindowLong Lib "user32" _
      Alias "GetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As Long
   
  Private Declare PtrSafe Function SetWindowLong Lib "user32" _
      Alias "SetWindowLongA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
      
  Private Declare PtrSafe Function DrawMenuBar Lib "user32" (ByVal hwnd As LongPtr) As Long
  
  'Returns the Window Handle of the Window that is accepting User input.
  Private Declare PtrSafe Function GetForegroundWindow Lib "user32" () As LongPtr
  
  Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" _
      Alias "ShellExecuteW" (ByVal hwnd As LongPtr, _
      ByVal lpOperation As LongPtr, ByVal lpFile As LongPtr, _
      ByVal lpParameters As LongPtr, ByVal lpDirectory As LongPtr, _
      ByVal nShowCmd As Long) As LongPtr
      
  Public Declare PtrSafe Function LoadLibrary Lib "kernel32" Alias "LoadLibraryW" ( _
      ByVal lpLibFileName As LongPtr) As Long
      
  Public Declare PtrSafe Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleW" ( _
      ByVal lpModuleName As LongPtr) As Long
      
  Public Declare PtrSafe Function FreeLibrary Lib "kernel32" _
      (ByVal hLibModule As Long) As Long
      
  Public Declare PtrSafe Sub keybd_event Lib "user32.dll" _
    (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
    
' Code for checking the internet connectivity status
' http://stackoverflow.com/questions/35222503/check-internet-connection-from-excel-vba
  Public Flg As LongPtr
  Public Declare PtrSafe Function InternetGetConnectedState _
          Lib "wininet.dll" (lpdwFlags As LongPtr, _
          ByVal dwReserved As Long) As Boolean
#Else
  ' Excel 2007 (32-bit)
  ' Long = 4-bytes = DWORD = C-Integer
  ' integer = 2 bytes = WORD = C-Short
  Private Declare Function FindWindow Lib "user32" _
    Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
   
  Private Declare Function GetWindowLong Lib "user32" _
    Alias "GetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
   
  Private Declare Function SetWindowLong Lib "user32" _
      Alias "SetWindowLongA" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
   
  Private Declare Function DrawMenuBar Lib "user32" (ByVal hwnd As Long) As Long
  
  'Returns the Window Handle of the Window that is accepting User input.
  Private Declare Function GetForegroundWindow Lib "user32.dll" () As Long
  
  Private Declare Function ShellExecute Lib "shell32.dll" _
          Alias "ShellExecuteW" ( _
                            ByVal hwnd As Long, _
                            ByVal lpOperation As Long, _
                            ByVal lpFile As Long, _
                            ByVal lpParameters As Long, _
                            ByVal lpDirectory As Long, _
                            ByVal nShowCmd As Long) _
                            As Long
  
  Public Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryW" ( _
      ByVal lpLibFileName As Long) As Long
      
  Public Declare Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleW" ( _
      ByVal lpModuleName As Long) As Long
      
  Public Declare Function FreeLibrary Lib "kernel32" Alias _
      "FreeLibrary" (ByVal hLibModule As Long) As Long
      
  Public Declare Sub keybd_event Lib "user32.dll" _
    (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
    
  Public Declare Function InternetGetConnectedState _
          Lib "wininet.dll" (lpdwFlags As Long, _
          ByVal dwReserved As Long) As Boolean
  Public Flg As Long
#End If


' Constant definition for internet connection status
Private Const INTERNET_CONNECTION_MODEM As Long = &H1
Private Const INTERNET_CONNECTION_LAN As Long = &H2
Private Const INTERNET_CONNECTION_PROXY As Long = &H4
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20


Public Sub Super_Sub()
  Const sSOURCE As String = "Super_Sub"
  
  Dim NumSub
  Dim NumSuper
  Dim SubL
  Dim SubR
  Dim SuperL
  Dim SuperR
  Dim CheckSub
  Dim CounterSub
  Dim CheckSuper
  Dim CounterSuper
  Dim Cell
    '
  CheckSub = True
  CounterSub = 0
  CheckSuper = True
  CounterSuper = 0
  Cell = ActiveCell
    
  '
  NumSub = Len(Cell) - Len(Application.WorksheetFunction.Substitute(Cell, "[", ""))
  NumSuper = Len(Cell) - Len(Application.WorksheetFunction.Substitute(Cell, "{", ""))
  '
  If Len(Cell) = 0 Then Exit Sub
  
  If IsError(Application.Find("[", ActiveCell, 1)) = False Then
    Do
      Do While CounterSub <= 1000
        SubL = Application.Find("[", ActiveCell, 1)
        SubR = Application.Find("]", ActiveCell, 1)
        ActiveCell.Characters(SubL, 1).Delete
        ActiveCell.Characters(SubR - 1, 1).Delete
        ActiveCell.Characters(SubL, SubR - SubL - 1).Font.Subscript = True
        CounterSub = CounterSub + 1
        If CounterSub = NumSub Then
            CheckSub = False
            Exit Do
        End If
      Loop
    Loop Until CheckSub = False
  End If
  '
  '
  If IsError(Application.Find("{", ActiveCell, 1)) = False Then
    Do
      Do While CounterSuper <= 1000
        SuperL = Application.Find("{", ActiveCell, 1)
        SuperR = Application.Find("}", ActiveCell, 1)
        ActiveCell.Characters(SuperL, 1).Delete
        ActiveCell.Characters(SuperR - 1, 1).Delete
        ActiveCell.Characters(SuperL, SuperR - SuperL - 1).Font.Superscript = True
        CounterSuper = CounterSuper + 1
        If CounterSuper = NumSuper Then
          CheckSuper = False
          Exit Do
        End If
      Loop
    Loop Until CheckSuper = False
  End If
End Sub

' This is a generic routine to be used by all models
' Print the Residual Diagnosis tests
'
Public Sub PrintStandardizedResidualDiagnosis(InputRange As String, ASCENDING As Integer, P As Integer, Q As Integer, parameters As Range, significanceLevel As String, XKURT As String, myRange As Range)
  Const sSOURCE As String = "PrintStandardizedResidualDiagnosis"
    
  Call LOG_INFO(msMODULE, sSOURCE, 108, "Begin")

  myRange.Cells(1, 2).Select
  With Selection
      .HorizontalAlignment = xlLeft
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_HEADER) ' "Residuals (standardized) Analysis"
  End With

  ' Set the borderline
  Range(myRange.Cells(2, 2), myRange.Cells(2, 8)).Select
  With Selection
    With .Borders(xlEdgeBottom)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
      .LineStyle = xlContinuous
      .ColorIndex = 0
      .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With

  Dim phis As String
  Dim thetas As String
    
  phis = vbNullString
  If P > 0 Then
     phis = Range(parameters.Cells(2, 1), parameters.Cells(1 + P, 1)).Address(True, True)
  End If
    
  thetas = vbNullString
  If Q > 0 Then
     thetas = Range(parameters.Cells(P + 2, 1), parameters.Cells(P + Q + 1, 1)).Address(True, True)
  End If
    
    
  myRange.Cells(4, 1).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TARGET_HEADER) ' "Target"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_TARGET_NOTE) ' RESID_DIAG_TARGET_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_TARGET_NOTE)  ' RESID_DIAG_TARGET_NOTE
      End If
      .Comment.visible = False
  End With
    
  myRange.Cells(5, 1).Select
  With Selection
      .ClearComments
      .HorizontalAlignment = xlRight
      .Font.Bold = True
      .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SIG_HEADER) ' "SIG?"
      If .Comment Is Nothing Then
        .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_SIG_NOTE) ' RESID_DIAG_SIG_NOTE
      Else
        .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_SIG_NOTE) ' RESID_DIAG_SIG_NOTE
      End If
      .Comment.visible = False
  End With
    
    
  Dim Labels(1 To 7, 1 To 2) As String
  Labels(1, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_AVG_HEADER) ' "AVG"
  Labels(1, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_AVG_NOTE) ' RESID_DIAG_AVG_NOTE
  Labels(2, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_HEADER) ' "STDEV"
  Labels(2, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_STDEV_NOTE) ' RESID_DIAG_STD_NOTE
  Labels(3, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_SKEW_HEADER) ' "SKEW"
  Labels(3, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_SKEW_NOTE) ' RESID_DIAG_SKEW_NOTE
  Labels(4, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_KURTOSIS_HEADER) ' "KURTOSIS"
  Labels(4, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_KURT_NOTE) ' RESID_DIAG_KURT_NOTE
  Labels(5, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_NOISE_Q_HEADER) ' "Noise?"
  Labels(5, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_WNTEST_NOTE) ' RESID_DIAG_WNTEST_NOTE
  Labels(6, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_Q_HEADER) ' "Normal?"
  Labels(6, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_NORMALITY_NOTE) ' RESID_DIAG_NORMALITY_NOTE
  Labels(7, 1) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_ARCH_Q_HEADER) ' "ARCH?"
  Labels(7, 2) = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_RESID_DIAG_ARCH_NOTE)  'RESID_DIAG_ARCH_NOTE
    
  Dim i As Integer
  
  For i = 1 To 7
      myRange.Cells(2, 1 + i).Select
      With Selection
          .ClearComments
          .value = Labels(i, 1)
          .Font.Bold = True
          .HorizontalAlignment = xlCenter
          If .Comment Is Nothing Then
            .AddComment Labels(i, 2)
          Else
            .Comment.Text Text:=Labels(i, 2)
          End If
          .Comment.visible = False
      End With
  Next i

  Dim Formulas(1 To 7) As String
  Dim ResidEqn As String
    
  ResidEqn = InputRange
                                        
  ' Convert mySignificanceLevel to US number format
  Dim alphaLevel As Double
  Dim alphaUSLevel As String
  alphaLevel = getAlphaValue(significanceLevel)
  alphaUSLevel = IIf(alphaLevel > 0, sNumToUS(alphaLevel), significanceLevel)
                                        
    
  Formulas(1) = "=AVERAGE(" & ResidEqn & ")"
  Formulas(2) = "=STDEV(" & ResidEqn & ")"
  Formulas(3) = "=SKEW(" & ResidEqn & ")"
  Formulas(4) = "=KURT(" & ResidEqn & ")"
  Formulas(5) = "=IF(WNTest(" & ResidEqn & "," & ASCENDING & ") >" & alphaUSLevel & ", TRUE, FALSE)"
  Formulas(6) = "=IF(NormalityTest(" & ResidEqn & ",1) >" & alphaUSLevel & ", TRUE, FALSE)"
  Formulas(7) = "=IF(ARCHTest(" & ResidEqn & "," & ASCENDING & ") <" & alphaUSLevel & ", TRUE, FALSE)"
    
  For i = 1 To 7
    myRange.Cells(3, 1 + i).Select
    With Selection
      .formula = Formulas(i)
      .NumberFormat = "0.00"
      .HorizontalAlignment = xlCenter
    End With
  Next i
    
    
  Dim TargetVals(1 To 4) As String
  TargetVals(1) = "0"
  TargetVals(2) = "1.0"
  TargetVals(3) = "0.0"
  TargetVals(4) = XKURT
    
  Dim TestResults(1 To 4) As String
  TestResults(1) = "=IF( TEST_MEAN(" & ResidEqn & "," & myRange.Cells(4, 2).Address(False, False) & ") >" & alphaUSLevel & "/2, FALSE, TRUE)"
  TestResults(2) = "=IF( TEST_STDEV(" & ResidEqn & "," & myRange.Cells(4, 3).Address(False, False) & ") >" & alphaUSLevel & ", FALSE, TRUE)"
  TestResults(3) = "=IF( TEST_SKEW(" & ResidEqn & ") >" & alphaUSLevel & "/2, FALSE, TRUE)"
  TestResults(4) = "=IF( TEST_XKURT(" & ResidEqn & ") >" & alphaUSLevel & "/2, FALSE, TRUE)"
    
    
  For i = 1 To 4
    myRange.Cells(4, 1 + i).Select
    With Selection
      .formula = TargetVals(i)
      .NumberFormat = "0.00"
      .HorizontalAlignment = xlCenter
    End With
    
    myRange.Cells(5, 1 + i).Select
    With Selection
      .formula = TestResults(i)
      .HorizontalAlignment = xlCenter
    End With
  Next i
End Sub


Sub OpenHelp(ByVal HelpFile As String, ByVal ContextId As Long, ByVal SlugSuffix As String)
  ' Check for internet connection before we open the helpfile
  If IsInternetConnected Then
    Call vb_OpenURL(BASE_SUPPORT_URL & "/hc/" & SlugSuffix)
  Else
    Application.Help LUCAPI.Get_InstallationPath & "\" & HelpFile, ContextId
  End If
End Sub

Sub vb_OpenURL(ByVal szURL As String, Optional ByVal ContextId As Long)
  If IsInternetConnected Then
    ShellExecute 0&, StrPtr("open"), StrPtr(szURL), StrPtr(vbNullString), StrPtr(vbNullString), SW_SHOWNORMAL
  Else
    Application.Help LUCAPI.Get_InstallationPath & "\" & MSGAPI.getLocalityId() & "/" & HELP_FILENAME, ContextId
  End If
End Sub

Function vb_OpenEXE(ByVal szEXE As String) As Boolean
  Const sSOURCE As String = "vb_OpenEXE"
  
  Dim retVal As Variant
  
  On Error GoTo ErrorHandler
  
  If (szEXE = "") Then
    MsgBox "Invalid executable filename"
  Else
    ' MFE: Trying to invoke License manager from VBA
    ' runas option is a hack to request an elevated permission to run.
    ' open option to open the file in user-mode persmission
    Call ShellExecute(0, StrPtr("open"), StrPtr(szEXE), StrPtr(vbNullString), StrPtr(vbNullString), SW_SHOWNORMAL)
    
    vb_OpenEXE = True
  End If
ExitPt:
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  vb_OpenEXE = False
  Resume ExitPt
End Function

Function vb_IsNum(rng As Range, ByRef NA As Boolean) As Boolean
  Const sSOURCE As String = "vb_IsNum"
  Dim myValue As Variant
  Dim i As Long
  Dim j As Long

  On Error GoTo ErrorHdler
  vb_IsNum = True
  NA = False
  For i = 1 To rng.rows.count
    For j = 1 To rng.columns.count
      myValue = rng.Cells(i, j)
      
      Select Case VarType(myValue)
      Case vbInteger, vbLong, vbSingle, vbDouble, vbCurrency, vbDate, vbDecimal
          vb_IsNum = True
      Case vbError:
        NA = (myValue = CVErr(xlErrNA))
        vb_IsNum = True
      Case vbEmpty:
        vb_IsNum = True
      Case Else
        vb_IsNum = False
      End Select
      
      If Not vb_IsNum Then
        Exit Function
      End If
    Next j
  Next i
finish:
  Exit Function
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  
  Resume finish
End Function



Public Function vb_ReadRegistryKey(key As String) As String
  Const sSOURCE As String = "vb_ReadRegistryKey"
  
  Dim myWS As Object

  On Error Resume Next
  
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  
  'read key from registry
  vb_ReadRegistryKey = myWS.RegRead(key)
  
  ' Release this object
  Set myWS = Nothing
  
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  'key was not found
  vb_ReadRegistryKey = "Not Found"
  Resume Next
End Function

Public Sub vb_WriteRegistryKey(key As String, value As String, i_type As String)
  Const sSOURCE As String = "vb_WriteRegistryKey"

  Dim myWS As Object

  On Error GoTo ErrorHandler
  
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  
  'write key from registry
  myWS.RegWrite key, value, i_type

ExitPt:
  ' Release this object
  Set myWS = Nothing
  
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  'key was not found
  Resume ExitPt
End Sub



'returns True if the registry key i_RegKey was found
'and False if not
Function vb_RegistryKeyExists(i_RegKey As String) As Boolean
  Const sSOURCE As String = "vb_RegistryKeyExists"
  
  Dim myWS As Object

  On Error GoTo ErrorHandler
  
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  
  'try to read the registry key
  myWS.RegRead i_RegKey
  'key was found
  vb_RegistryKeyExists = True
ExitPt:
  ' Release this object
  Set myWS = Nothing

  Exit Function
  
ErrorHandler:
  ' This is not an error as we expect the key not to exist in some cases.
  Call LOG_DEBUG(msMODULE, sSOURCE, Erl, Err.Description)
  'key was not found
  vb_RegistryKeyExists = False
  Resume ExitPt
End Function




Private Function IsPercent(myVal As String) As Boolean
  Const sSOURCE As String = "IsPercent"
  
  Dim number As String
  
  ' Convert to US
  If Len(myVal) > 0 Then
    If Right$(myVal, 1) = "%" Then
      number = Left(myVal, Len(myVal) - 1)
      IsPercent = IsNumeric(number)
      Exit Function
    End If
  End If
  IsPercent = False
  
End Function

Public Function getDateSerialNo(myVal As String) As String
  Const sSOURCE As String = "getDateSerialNo"
  
  Dim dt As Date
  
  On Error GoTo ErrorHdlr
  If IsDate(myVal) Then
    dt = DateValue(myVal)
    
    ' Subtract date from the beginning (international support
    getDateSerialNo = CStr(Int(dt - DateSerial(1899, 12, 31)))
  Else
    getDateSerialNo = "Invalid input date"
  End If
  
Cleanup:
  Exit Function
ErrorHdlr:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

' Examine the significance level (alpha) string (value or reference)
Public Function isAlphaValid(sigLevel As String) As Boolean
  Const sSOURCE As String = "isAlphaValid"
  
  Dim szTmpVal As Double
  Dim szTmpStr As String
  
  On Error GoTo ErrHdler
  isAlphaValid = False
  
  If Len(sigLevel) > 0 And sigLevel <> vbNullString Then
    If IsPercent(sigLevel) Then
      szTmpStr = Left(sigLevel, Len(sigLevel) - 1)
      
      ' Convert to US-notation
      szTmpVal = CDbl(szTmpStr) / 100
      
    Else
      If IsNumeric(sigLevel) Then
        szTmpVal = CDbl(sigLevel)
      Else
        szTmpStr = Range(sigLevel).Cells(1, 1).value
        
        If IsPercent(szTmpStr) Then
          szTmpStr = Left(szTmpStr, Len(szTmpStr) - 1)
        
          ' Convert to US-notation
          szTmpVal = CDbl(szTmpStr) / 100
        Else
          If IsNumeric(szTmpStr) Then
            szTmpVal = CDbl(szTmpStr)
          End If
        End If
      End If
    End If
    
    If szTmpVal > 0 And szTmpVal < 0.5 Then
      isAlphaValid = True
    End If
  End If
  Exit Function

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Exit Function
End Function

Public Function getAlphaValue(sigLevel As String) As Double
  Const sSOURCE As String = "getAlphaValue"
  Dim szTmpStr As String
  
  On Error GoTo ErrHdler
  getAlphaValue = -1#
  If Len(sigLevel) > 0 And sigLevel <> vbNullString Then
    If IsPercent(sigLevel) Then
      szTmpStr = Left(sigLevel, Len(sigLevel) - 1)
      
      ' Convert to US-notation
      getAlphaValue = CDbl(szTmpStr) / 100
      
    Else
      If IsNumeric(sigLevel) Then
        getAlphaValue = CDbl(sigLevel)
      End If
    End If
  End If
Cleanup:
  Exit Function

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Function

' Process the input value that user passed to VBA
Public Function procAlphaInputVal(ByVal szValue As String) As String
  
  If Utilities.isAlphaValid(szValue) Then
    ' Is the input a value or a cell-address
    If IsNumeric(szValue) Then
      procAlphaInputVal = szValue
    Else
      procAlphaInputVal = Utilities.formatCellsRange(szValue)
    End If
  Else
    procAlphaInputVal = vbNullString
  End If
End Function

' Remove Title bar from a user form
Sub RemoveCaption(objForm As Object)
  Const sSOURCE As String = "RemoveCaption"
  
  Dim lStyle          As Long
  Dim hMenu           As Long
  
  #If VBA7 Then
    Dim mhWndForm       As LongLong
  #Else
    Dim mhWndForm       As Long
  #End If
  
     
  Const GWL_STYLE As Long = (-16)
  Const WS_DLGFRAME As Long = &H400000
     
  If Val(Application.Version) < 9 Then
      mhWndForm = FindWindow("ThunderXFrame", objForm.Caption) 'XL97
  Else
      mhWndForm = FindWindow("ThunderDFrame", objForm.Caption) 'XL2000+
  End If
    
  lStyle = GetWindowLong(mhWndForm, GWL_STYLE)
  lStyle = lStyle And (Not WS_DLGFRAME)
    
  SetWindowLong mhWndForm, GWL_STYLE, lStyle
  DrawMenuBar mhWndForm
End Sub
'
' This function returns address of a cells range starting with a worksheet name.
' Reference: http://stackoverflow.com/questions/131121/how-do-i-get-a-ranges-address-including-the-worksheet-name-but-not-the-workboo
'
Public Function AddressEx(rng As Range) As String
  Dim strTmp As String
  
  strTmp = Evaluate("ADDRESS(" & rng.row & "," & rng.column & ",1,1,""" & rng.Worksheet.Name & """)")
  If (rng.count > 1) Then
      strTmp = strTmp & ":" & rng.Cells(rng.count).Address(RowAbsolute:=True, ColumnAbsolute:=True)
  End If
  AddressEx = strTmp
End Function

' Reference: NUM-255 Issue: Stationary test breaks locking Excel when user enters cells address manually
Public Function isCellRangeValid(ByVal szValue As String) As Boolean
  'Dim userRange As Range
  Dim userRange As Object

  If IsNull(szValue) Or Len(szValue) < 1 Then
    isCellRangeValid = False
    Exit Function
  End If
  
  On Error Resume Next
  szValue = EcapeSpecialCharacterFromRange(szValue)
  Set userRange = Range(szValue)
  If Err.number <> 0 Then
    isCellRangeValid = False
  Else
    isCellRangeValid = True
  End If
  
End Function

' Reference: NUM-255 Issue: Stationary test breaks locking Excel when user enters cells address manually
Public Function formatCellsRange(ByVal szValue As String) As String
  'Dim userRange As Range
  Dim userRange As Object

  On Error Resume Next
  If IsNull(szValue) Or Len(szValue) < 1 Then
    formatCellsRange = ""
  Else
    szValue = EcapeSpecialCharacterFromRange(szValue)
    Set userRange = Range(szValue)
    If Err.number < 1 Then
      If InStr(1, szValue, "!") < 1 Then
        formatCellsRange = RemoveEnclosingSingleQuoteChar(ActiveSheet.Name) & "!" & userRange.Address(True, True)
        formatCellsRange = EcapeSpecialCharacterFromRange(formatCellsRange)
      Else
        formatCellsRange = szValue
      End If
    Else
      formatCellsRange = ""
    End If
  End If
End Function

Public Function getCellsRangeWksht(ByVal szValue As String) As String
  'Dim userRange As Range
  Dim userRange As Object
  Dim pos As Long
  
  On Error Resume Next
  If IsNull(szValue) Or Len(szValue) < 1 Then
    getCellsRangeWksht = vbNullString
  Else
    szValue = EcapeSpecialCharacterFromRange(szValue)
    Set userRange = Range(szValue)
    If Err.number < 1 Then
      'pos = InStr(1, szValue, "!")
      pos = LastPosition(szValue, "!")
      If pos < 1 Then
        getCellsRangeWksht = ActiveSheet.Name
      Else
        ' getCellsRangeWksht = Left(szValue, pos - 1)
        getCellsRangeWksht = RemoveEnclosingSingleQuoteChar(Left(szValue, pos - 1))
      End If
    Else
      getCellsRangeWksht = vbNullString
    End If
  End If
End Function

'NXL-209 MLR generate empty output table when worksheet has blank
Public Function RemoveEnclosingSingleQuoteChar(ByVal RemFstChar As String) As String
  Dim TempString As String
    
  TempString = Trim(RemFstChar)
  If Left(RemFstChar, 1) = "'" Then
    If Len(RemFstChar) > 1 Then
        TempString = Right(RemFstChar, Len(RemFstChar) - 1)
    End If
    
    RemFstChar = TempString
    If Right(RemFstChar, 1) = "'" Then
      If Len(RemFstChar) > 1 Then
        TempString = Left(RemFstChar, Len(RemFstChar) - 1)
      End If
    End If
  End If
  
  
  ' Pre-caution - in case of the quote are already escaped, then undo them
  TempString = Replace(TempString, "''", "'")
  
  ' Escape any quotes in the string
  TempString = Replace(TempString, "'", "''")
  
  RemoveEnclosingSingleQuoteChar = TempString
End Function

'NXL-209 MLR
'Return a valid Range address (with worksheet name) and escape the single quote properly
Public Function EcapeSpecialCharacterFromRange(ByVal szValue As String) As String
  Dim pos As Long
  Dim wkshtName As String
  Dim rngAddress As String
  
  szValue = Trim(szValue)
  
  ' get last '!' position
  pos = LastPosition(szValue, "!")
  If pos < 1 Then
    wkshtName = ActiveSheet.Name
    EcapeSpecialCharacterFromRange = szValue
    Exit Function
  Else
  ' strip encolosing quote (and escape intermediate single quote)
    wkshtName = RemoveEnclosingSingleQuoteChar(Left(szValue, pos - 1))
    rngAddress = Right(szValue, Len(szValue) - pos)
  End If

  ' put them together now
  EcapeSpecialCharacterFromRange = "'" & wkshtName & "'!" & rngAddress
End Function

' Utility function to return
Private Function LastPosition(ByVal szValue As String, rChar As String) As Integer
  Dim rLen As Integer
  Dim i As Integer

  rLen = Len(szValue)
  For i = rLen To 2 Step -1
    If Mid(szValue, i - 1, 1) = rChar Then
      LastPosition = i - 1
      Exit Function
    End If
  Next i
End Function



' NUM-265 Issue: MLR Wizard triggers a VBA Error in hidden module utilities
Public Function formatSubCellsRange(ByVal szValue As String, szParentWksht As String) As String
  'Dim userRange As Range
  Dim userRange As Object

  On Error Resume Next
  If IsNull(szValue) Or Len(szValue) < 1 Then
    formatSubCellsRange = ""
  Else
    szValue = EcapeSpecialCharacterFromRange(szValue)
    Set userRange = Range(szValue)
    If Err.number < 1 Then
      If InStr(1, szValue, "!") < 1 Then
        formatSubCellsRange = RemoveEnclosingSingleQuoteChar(szParentWksht) & "!" & userRange.Address(True, True)
        formatSubCellsRange = EcapeSpecialCharacterFromRange(formatSubCellsRange)
      Else
        ' Worksheet name is not included in the szValue
        formatSubCellsRange = szValue
      End If
    Else
      formatSubCellsRange = ""
    End If
  End If
End Function



' Examine the input string to be a valid range, and if so, formatted with a worksheet name and absolute reference
' NUM-255 Issue: Stationary test breaks locking Excel when user enters cells address manually
Public Function procInputCellsRange(ByVal szValue As String) As String
  If isCellRangeValid(szValue) = True Then
    procInputCellsRange = Utilities.formatCellsRange(szValue)
  Else
    procInputCellsRange = ""
  End If
End Function


Public Function isTimeSeriesValid(ByRef inRange As Range) As Boolean
  Const sSOURCE As String = "isTimeSeriesValid"
  
  isTimeSeriesValid = False
  
  If inRange Is Nothing Then
    ' MsgBox "Enter a valid time series range."
    MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
    
    Exit Function
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      ' MsgBox "The time series range should be one column or one row."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
      Exit Function
    End If
  
    ' Check if all the values in the input Series are Numaric or #N/A
    Dim NA As Boolean
    If Not vb_IsNum(inRange, NA) Then
      ' MsgBox "The time series values should be numbers and without any spaces."
      MsgBox MSGAPI.getLocaleString(IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG), vbExclamation + vbOKOnly, PRODUCT_MEDIUMNAME
      Exit Function
    End If
  End If
  isTimeSeriesValid = True
End Function

Public Sub refEditCtrl_RegistryHack()
  Const sSOURCE As String = "refEditCtrl_RegistryHack"
  
  Dim key As String

  'Is Excel 8.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\8.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\8.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
        'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
  'Is Excel 9.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\9.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\9.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
        'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
  
  'Is Excel 10.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\10.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\10.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
       'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
  
  'Is Excel 11.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\11.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\11.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
        'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
  
  'Is Excel 12.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\12.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\12.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
        'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
  'Is Excel 14.0 Installed
  key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\14.0\Excel\Options\"
  If vb_RegistryKeyExists(key) Then
      key = "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Office\14.0\Excel\Options\QFE_Richmond"
      If Not vb_RegistryKeyExists(key) Then
        'Only write to registry if you have to
        Call vb_WriteRegistryKey(key, "1", "REG_DWORD")
      End If
  End If
  
ExitPt:
  Exit Sub

ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume ExitPt
End Sub




Public Sub checkNumXLXllInstalled()
  Const sSOURCE As String = "checkNumXLXllInstalled"
  
  On Error GoTo ErrorHandler

  ' Check if NumXL.xll is installed
  ' Dim ain As AddIn
  Dim ain As Object
  Dim NumXLXllInstalled As Boolean
  ' Dim w As Workbook
  Dim w As Object
  
  NumXLXllInstalled = False
  For Each ain In AddIns
    If (ain.Installed And InStr(1, ain.Name, "NumXL", vbTextCompare) And (InStr(1, ain.Name, "UI", vbTextCompare) = 0)) Then
      NumXLXllInstalled = True
      Exit For
    End If
  Next

  ' If NumXL.xll isn't installed, uninstall NumXLUI.xlam
  ' TODO: Is there a 'this' object or something similar that corresponds to this AddIn?
  ' If so, use that instead of searching for a match here
  If (NumXLXllInstalled = False) Then
    'Launch the Add-ins manager
    AddIns("numxl").Installed = True
    
    Call ribbon_invalidate
  End If
  
  Exit Sub
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  
  ' An error occured while examining NumXL.xll
  MsgBox MSGAPI.getLocaleString(IDS_UI_NUMXL_XLL_ERR_NOT_ENABLED_MSG), vbCritical + vbOKOnly, PRODUCT_MEDIUMNAME
End Sub

Public Function isActiveCellAtTBOM() As Boolean
  ' TODO: (MFE) we need to iterate over the supported models
  isActiveCellAtTBOM = InStr(UCase(Selection.value), "ARMA(") > 0 Or _
                       InStr(UCase(Selection.value), "ARMAX(") > 0 Or _
                       InStr(UCase(Selection.value), "SARIMAX(") > 0 Or _
                       InStr(UCase(Selection.value), "ARIMA(") > 0 Or _
                       InStr(UCase(Selection.value), "GARCH") > 0 Or _
                       InStr(UCase(Selection.value), "AIRLINE(") > 0 Or _
                       InStr(UCase(Selection.value), "GLM(") > 0 Or _
                       InStr(UCase(Selection.value), "ARIMA(") > 0
                      
End Function

Public Function isAddinInstalled(ByVal prodName As String, ByVal excludeName As String) As Boolean
  Const sSOURCE As String = "isAddinInstalled"

  'Dim ain As AddIn
  Dim ain As Object
  Dim szKey As String
  Dim szUIKey As String
  
  ' If we encounter any error, Just exit the function
  On Error GoTo ErrorHandler
  
  ' Initialize the function to return false
  isAddinInstalled = False
  
  szKey = UCase(Trim(prodName))
  szUIKey = UCase(Trim(excludeName))
  ' Check if NumXL.xll is installed
  If Len(szKey) > 0 Then
    ' Loop over all available Add-ins
    For Each ain In AddIns
      ' Test for the name
      If (ain.Installed And InStr(1, UCase(ain.Name), szKey, vbTextCompare) <> 0) Then
        ' Do we have a UI add-in to exclude
        If Len(szUIKey) > 0 Then
          ' Is this the UI add-in?
          If InStr(1, UCase(ain.Name), szUIKey, vbTextCompare) = 0 Then
            isAddinInstalled = True
            Exit For
          End If
        Else
          isAddinInstalled = True
          Exit For
        End If
      End If
    Next
  End If
  Exit Function
  
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
End Function

' Deactivate the current add-in
Public Function deactivateAddin() As Boolean
  Const sSOURCE As String = "deactivateAddin"
  
  ' Dim ain As AddIn
  Dim ain As Object
  Dim szKey As String
  
  ' If we encounter any error, Just exit the function
  On Error GoTo ErrorHandler
  
  deactivateAddin = False
  ' Query the workbook to ensure we are an add-in
  If ThisWorkbook.IsAddin = True Then
    szKey = UCase(Trim(ThisWorkbook.Name))
    For Each ain In AddIns
      If (InStr(1, UCase(Trim(ain.Name)), UCase(Trim(ThisWorkbook.Name)), vbTextCompare)) Then
        ' Found it
        ain.Installed = False
        deactivateAddin = True
        Exit For
      End If
    Next
  End If
  Exit Function
ErrorHandler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
End Function

Public Function procFormula(szFormula As String, ByVal nIndex As Integer) As String
  
  'Find the 1st bracket
  Dim pos As Long
  Dim lastpos As Long
  Dim italicBraces As Boolean
  Dim doubleQuotation As Boolean
  Dim count As Long
  
  
  pos = InStr(1, szFormula, "(", vbTextCompare)
  If pos > 0 Then
    szFormula = Mid(szFormula, pos + 1)
    
    italicBraces = False
    doubleQuotation = False
    count = 0
    lastpos = 0
    For pos = 1 To Len(szFormula)
      If Mid(szFormula, pos, 1) = "{" Then
        italicBraces = True
      End If
      
      If Mid(szFormula, pos, 1) = "}" Then
        italicBraces = False
      End If
      
      If Mid(szFormula, pos, 1) = """" Then
        doubleQuotation = Not doubleQuotation
      End If
      
      If (Mid(szFormula, pos, 1) = "," Or Mid(szFormula, pos, 1) = ")") And Not italicBraces And Not doubleQuotation Then
        count = count + 1
        If count = nIndex Then
          procFormula = Trim(Mid(szFormula, lastpos + 1, pos - lastpos - 1))
          Exit For
        End If
        lastpos = pos
      End If
    Next pos
  End If
End Function



Public Function procArgument(ByVal szArgument As String, ByVal nIndex As Long) As String
  
  'Find the 1st bracket
  Dim pos As Long
  Dim lastpos As Long
  Dim doubleQuotation As Boolean
  Dim count As Long
  
  pos = InStr(1, szArgument, "{", vbTextCompare)
  If pos > 0 Then
    szArgument = Mid(szArgument, pos + 1)
  End If

  doubleQuotation = False
  count = 0
  lastpos = 0
  For pos = 1 To Len(szArgument)
    If Mid(szArgument, pos, 1) = """" Then
      doubleQuotation = Not doubleQuotation
    End If
      
    If (Mid(szArgument, pos, 1) = "," Or Mid(szArgument, pos, 1) = "}") And Not doubleQuotation Then
      count = count + 1
      If count = nIndex Then
        procArgument = Mid(szArgument, lastpos + 1, pos - lastpos - 1)
        Exit For
      End If
      lastpos = pos
    End If
  Next pos
End Function


Public Function txtOrder(ByVal i As Integer) As String

' IF(AND(i>=10,i<=14),"th",CHOOSE(MOD(i,10)+1,"th","st","nd","rd","th","th","th","th","th","th"))
  If i >= 10 And i <= 14 Then
    txtOrder = MSGAPI.getLocaleString(IDS_UI_COMMON_OTHER_ORDER_SUFFIX_ABBREVIATION) ' "th"
  Else
    ' txtOrder = Choose(((i Mod 10) + 1), "th", "st", "nd", "rd", "th", "th", "th", "th", "th", "th")
    txtOrder = Choose(((i Mod 10) + 1), "th", MSGAPI.getLocaleString(IDS_UI_COMMON_FIRST_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_SECOND_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_THIRD_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_FOURTH_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_FIFTH_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_SIXTH_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_SEVENTH_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_EIGTH_ORDER_SUFFIX_ABBREVIATION), _
                                              MSGAPI.getLocaleString(IDS_UI_COMMON_NINETH_ORDER_SUFFIX_ABBREVIATION))
  End If
End Function

' Emulate user enter a tab button
Public Sub PressTab()
  keybd_event VB_TAB, 0, 0, 0
  keybd_event VB_TAB, 0, KEYEVENTF_KEYUP, 0
End Sub

' Optimization routine
' Call this Function before you start printing out the report
Sub OptimizeCode_Begin()
  
  oldStatusBar = Application.DisplayStatusBar
  oldPageBreakState = ActiveSheet.DisplayPageBreaks
  oldCalcSetup = Application.Calculation
  Application.DisplayStatusBar = True

  Application.EnableEvents = False
  Application.ScreenUpdating = False
  ActiveSheet.DisplayPageBreaks = False
  Application.Calculation = xlCalculationManual
End Sub



'Call this method, at the end of the report, and make sure you resume the error to this block.
Sub OptimizeCode_End()
  Application.Calculation = oldCalcSetup
  ActiveSheet.DisplayPageBreaks = oldPageBreakState
  Application.EnableEvents = True
  Application.ScreenUpdating = True
  Application.StatusBar = False
  Application.DisplayStatusBar = oldStatusBar
End Sub


' Check whether user has an active internet connection now
' http://stackoverflow.com/questions/35222503/check-internet-connection-from-excel-vba
Function IsInternetConnected() As Boolean
  Dim R As Long
  
  R = InternetGetConnectedState(Flg, 0&)
  
  If Flg >= INTERNET_CONNECTION_OFFLINE Then
      Debug.Print "INTERNET_CONNECTION_OFFLINE"
  End If
  
  If CBool(R) Then
      IsInternetConnected = True
  Else
      IsInternetConnected = False
  End If
End Function
Attribute VB_Name = "WNTestFrm"
Attribute VB_Base = "0{BA79F89D-D599-4731-B9FB-8B1F5D594AAE}{2FEEA0F6-4A45-4550-A22F-9A3672AAEAA0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: WNTestFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/WNTestFrm.frm $
'
Private Const msMODULE As String = "USERFORM:WNTestFrm"
Private Const zenSlugId As String = "articles/215089706"

' User options support for this form
Private userOptions As WNTestUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub chkAscending_Click()
  myGeneralUO.ASCENDING = chkAscending.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
  If callValidateForm = True Then
    Call validateForm
    
    txtEndLag.value = userOptions.MAX_LAG_ORDER
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtEndLag_Change()
  userOptions.MAX_LAG_ORDER = txtEndLag.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtStartLag_Change()
  userOptions.MAX_LAG_ORDER = txtStartLag.value
  
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_PG_OPTIONS_HELPTIP)
  
  LagOrderFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_LABEL)
  LagOrderFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_HELPTIP)
  
  startLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_LABEL)
  startLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_HELPTIP)
  txtStartLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_START_LAG_HELPTIP)
  
  maxLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_LABEL)
  maxLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_HELPTIP)
  txtEndLag.ControlTipText = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_MAX_LAG_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New WNTestUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
    Exit Sub
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub



Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  ' Keep the input data range
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  ' Override the default
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW
  
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  chkAscending.value = myGeneralUO.ASCENDING
  RefEditSignificanceLevel.value = myGeneralUO.significance
  txtStartLag.value = userOptions.MIN_LAG_ORDER
  txtEndLag.value = userOptions.MAX_LAG_ORDER
  
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  MVReplaceFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  MVINTERPOLATEFrame.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
  
  RefEditSignificanceLevel.enabled = dataAvailable
  chkAscending.enabled = dataAvailable
  
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If
    
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        If userOptions.MIN_LAG_ORDER <= userOptions.MAX_LAG_ORDER Then
          ready = valid_alpha
        End If
      End If
  End If
    
  cmdOK.enabled = ready
End Sub


Private Sub cmdBtnHelp_Click()
   ' the paths need to change to be a relative path(Done)
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)

End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  Dim isScreenUpdate As Boolean
  Dim statusBarUpdate As Boolean
  Dim autoCalcSetup As Integer
    
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  
  isScreenUpdate = Application.ScreenUpdating
  statusBarUpdate = Application.StatusBar
  autoCalcSetup = Application.Calculation
  
  Application.ScreenUpdating = False
  Application.StatusBar = False
  Application.Calculation = xlCalculationManual
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) '"Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count > 1 And inRange.rows.count > 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR) ' "The time series range should be one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) '"The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefOutput)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) '"Enter a valid output range."
          Exit Sub
        Else
          If RefEditSignificanceLevel.enabled Then
            If Not isAlphaValid(RefEditSignificanceLevel.value) Then
              MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
              RefEditSignificanceLevel.value = vbNullString
              Exit Sub
            End If
          End If
          
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_STATUSBAR_CALCULATION_MSG) '"White-noise Test Calculation"
          Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
  
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Application.ScreenUpdating = isScreenUpdate
  Application.StatusBar = statusBarUpdate
  Application.Calculation = autoCalcSetup
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  ' "An error occured"
  MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_ERROR), vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "WNTestUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: WNTestUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/WNTestUO.cls $
'
Private Const msMODULE As String = "CLASS:WNTestUO"

Private myMinLags As Long
Private myMaxLags As Long


Private Sub Class_Initialize()
  Call ResetToDefault
End Sub

'ResetToDefault
Public Sub ResetToDefault()
  myMinLags = 1
  myMaxLags = 1
End Sub

Public Property Get MIN_LAG_ORDER() As Long
    MIN_LAG_ORDER = myMinLags
End Property

Public Property Let MIN_LAG_ORDER(ByVal vNewValue As Long)
  myMinLags = vNewValue
End Property


Public Property Get MAX_LAG_ORDER() As Long
    MAX_LAG_ORDER = myMaxLags
End Property

Public Property Let MAX_LAG_ORDER(ByVal vNewValue As Long)
  myMaxLags = vNewValue
End Property


' Add specific routines for White-noise test (reference other classes if needed)
Public Function calcMaxLags(ByRef inputData As GeneralUO) As Long
  Const sSOURCE As String = "calcMaxLags"
  
  Dim rng As Object
  If Len(inputData.INPUT_RANGE) > 0 Then
    Set rng = Range(inputData.INPUT_RANGE)
    
    calcMaxLags = CLng(Log(rng.Cells.count)) + 1
  End If
End Function




' Print the White-noise test Table below
Public Sub printTestOutput(ByRef myRange As Range, ByRef myGeneralUO As GeneralUO, ByRef myMissingValueUO As MissingValueUO)
 Const sSOURCE As String = "printNormalityTestOutput"

  Dim oldSignificancelevel As String
  Dim ReturnValue As ERROR_HANDLE_ACTION_Type
  Dim i As Long
  Dim row As Long
  Dim szTemp As String
  
  ' Watch out for Locality differences
  oldSignificancelevel = myGeneralUO.LocalFreeSignificane
  
  If ActiveSheet.Name <> myRange.Worksheet.Name Then
    Sheets(myRange.Worksheet.Name).Activate
  End If
  
  ' print the table header
  myRange.Cells(1, 1).Select
  With Selection
    .HorizontalAlignment = xlLeft
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_OUTPUT_TABLE_HEADER) ' "White-noise Test"
  End With

  myRange.Cells(2, 1).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_HEADER) ' "Lag"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE)
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE)
    End If
  End With
  
  
  myRange.Cells(2, 2).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_HEADER) ' "Score"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_SCORE_NOTE) ' HYPOTHESIS_TEST_SCORE_NOTE
    End If
  End With


  myRange.Cells(2, 3).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_HEADER) '"C.V."
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE) ' HYPOTHESIS_TEST_CV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_CV_NOTE)  ' HYPOTHESIS_TEST_CV_NOTE
    End If
  End With

  myRange.Cells(2, 4).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_HEADER) ' "P-Value"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE) ' HYPOTHESIS_TEST_PV_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PVALUE_NOTE)  ' HYPOTHESIS_TEST_PV_NOTE
    End If
  End With


  myRange.Cells(2, 5).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .value = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_PASS_HEADER) ' "Pass?"
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_OUTPUT_PASS_TEST_NOTE)  'WNTEST_TEST_PASS_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_WHITE_NOISE_TEST_OUTPUT_PASS_TEST_NOTE)   'WNTEST_TEST_PASS_NOTE
    End If
  End With

  myRange.Cells(2, 6).Select
  With Selection
    .ClearComments
    .HorizontalAlignment = xlCenter
    .Font.Bold = True
    .formula = "=" & oldSignificancelevel
    .NumberFormat = "#0.0%"
    .Interior.Color = RGB(200, 160, 35)
    If .Comment Is Nothing Then
      .AddComment MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE) ' HYPOTHESIS_TEST_ALPHA_NOTE
    Else
      .Comment.Text Text:=MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPUT_ALPHA_NOTE)  ' HYPOTHESIS_TEST_ALPHA_NOTE
    End If
  End With


  ' Set the borderline
  Range(myRange.Cells(2, 1), myRange.Cells(2, 6)).Select
  With Selection
    With .Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
    With .Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlMedium         'Use xlThin for smaller border
    End With
  End With


  
  ' Iterate over the lags
  For i = Me.MIN_LAG_ORDER To Me.MAX_LAG_ORDER
    row = 3 + i - Me.MIN_LAG_ORDER
    myRange.Cells(row, 1).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = True
      .value = i
    End With
  
    myRange.Cells(row, 2).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=WNTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",2)"
      .NumberFormat = "#0.00"
    End With
  
    myRange.Cells(row, 3).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=WNTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",3," & myRange.Cells(2, 6).Address() & ")"
      .NumberFormat = "#0.00"
    End With
  
    
    myRange.Cells(row, 4).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = "=WNTest(" & myGeneralUO.INPUT_RANGE_NAN(myMissingValueUO) & "," & myGeneralUO.DATA_ORDER & "," & myRange.Cells(row, 1).Address(False, True) & ",1)"
      .NumberFormat = "#0.0%"
    End With
  
    
    szTemp = "=IF(" & myRange.Cells(row, 4).Address(RowAbsolute:=False) & ">" & myRange.Cells(2, 6).Address() & ", TRUE, FALSE)"
    myRange.Cells(row, 5).Select
    With Selection
      .HorizontalAlignment = xlCenter
      .Font.Bold = False
      .formula = szTemp
    End With
  Next i

  ' Reset the current cell selection to the myRange
  myRange.Cells(1, 1).Select
SubExit:
  
  ' Restore old Value
  myGeneralUO.significance = oldSignificancelevel
  Exit Sub
  
ErrorHdler:
  ReturnValue = RESUME_NEXT
  ReturnValue = SFCErrorHandler(msMODULE, sSOURCE, Erl, Err.number)
  If ReturnValue = RESUME_NEXT Then
    Resume Next
  End If
  
  Resume SubExit
End Sub

Attribute VB_Name = "X12ARIMAModel"
Attribute VB_Base = "0{328744C0-DF94-49A2-9B2C-D4DBB2BC198D}{85A5929D-FB0C-4F97-94D0-680AED92E96B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'    Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: X12ARIMAModel.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/X12ARIMAModel.frm $
'
Private Const msMODULE As String = "USERFORM:X12ARIMAModel"
Private Const zenSlugId As String = "articles/216534603"

Private strModelStr As String
Private callValidateForm As Boolean
Private isDirty As Boolean
Private userOptions As X12ARIMAModelUO

Private Sub applyCmd_Click()
  'Write the options to the spc file
  Dim retVal As Integer
  
  'Update the active cell formula
  ActiveCell.formula = userOptions.X12AFormula
  
  ' Now, force the recalculation of the cell
  ActiveCell.Calculate
  If Not IsError(ActiveCell.value) Then
    userOptions.X12AMODEL_NAME = ActiveCell.value
  
    isDirty = False
    ' retVal = xlVBAWriteX12SpecFile(userOptions.X12AMODEL_NAME)
    'If retVal = 1 Then
    '  isDirty = False
    ' End If
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_CAPTION), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If
  
  ' Reset the dirty flag
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cancelCmd_Click()
  Unload Me
End Sub



Private Sub chkAOTestOutliers_Click()
  userOptions.PRIOR_AO_OUTLIERTEST = chkAOTestOutliers.value
  
  isDirty = True
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub chkConstantPrioRegression_Click()
  userOptions.PRIOR_REGRESS_CONSTANT = chkConstantPrioRegression.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkEasterAIC_Click()
  userOptions.PRIOR_AIC_EASTER = chkTDAIC.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkLSTestOutliers_Click()
  userOptions.PRIOR_LS_OUTLIERTEST = chkLSTestOutliers.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkOtherPrioRegression_Click()
  userOptions.PRIOR_REGRESS_OTHERS = chkOtherPrioRegression.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub chkRasterPrioRegression_Click()
  userOptions.PRIOR_REGRESS_EASTER = chkRasterPrioRegression.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkStabilityDiagnosis_Click()
  userOptions.ARIMA_STABILITY_DIAGNOSIS = chkStabilityDiagnosis.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkStabilitySlidingSpans_Click()
  userOptions.ARIMA_STABILITY_DIAG_SLIDINGSPANS = chkStabilitySlidingSpans.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub ChkStockDataSeries_Click()
  userOptions.IS_STOCK_DATA = ChkStockDataSeries.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkTCTestOutliers_Click()
  userOptions.PRIOR_TC_OUTLIERTEST = chkTCTestOutliers.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub chkTDAIC_Click()
  userOptions.PRIOR_AIC_TD = chkTDAIC.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub chkTDPrioRegression_Click()
  userOptions.PRIOR_REGRESS_TD = chkTDPrioRegression.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmbX11FilterOptions_Change()
  userOptions.SEASONAL_ADJUST_X11OPTION = cmbX11FilterOptions.ListIndex + 1
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub cmbX11Mode_Change()
  userOptions.SEASONAL_ADJUST_X11MODE = cmbX11Mode.ListIndex + 1
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmdHelpBtn_Click()
   ' the paths need to change to be a relative path(Done)
   Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdHelpBtn.HelpContextID, zenSlugId)
End Sub

Private Sub OKCmd_Click()
  Unload Me
End Sub

Private Sub OpenErrorCmd_Click()
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
    
  'Get the model descriptor
  modelSpec = ActiveCell.value
    
  filepathlen = 260
  retVal = NDK_X12_OUT_FILE(StrPtr(modelSpec), 3, StrPtr(vbNullString), filepathlen, 1)
    
  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OUTPUT_ERROR_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If
End Sub

Private Sub OpenLogCmd_Click()
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
    
  'Get the model descriptor
  modelSpec = ActiveCell.value
    
  filepathlen = 260
  retVal = NDK_X12_OUT_FILE(StrPtr(modelSpec), 1, StrPtr(vbNullString), filepathlen, 1)
    
  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OUTPUT_LOG_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If

End Sub

Private Sub openOutputCmd_Click()
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
    
  'Get the model descriptor
  modelSpec = ActiveCell.value
    
  filepathlen = 260
  retVal = NDK_X12_OUT_FILE(StrPtr(modelSpec), 2, StrPtr(vbNullString), filepathlen, 1)

  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OUTPUT_OUTPUT_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If

End Sub

Private Sub OpenSpcFileCmd_Click()
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
  
  'Get the model descriptor
  modelSpec = ActiveCell.value

  filepathlen = 260
  retVal = NDK_X12_OUT_FILE(StrPtr(modelSpec), 0, StrPtr(vbNullString), filepathlen, 1)

  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OUTPUT_SPC_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If
End Sub

Private Sub optARIMAAutoSelect_Click()
  userOptions.ARIMA_AUTOSELECT = True
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optARIMASpecifyOrder_Click()
  userOptions.ARIMA_AUTOSELECT = False
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optAutoTransform_Click()
  userOptions.PRIOR_TRANSFORM = X12A_AUTO
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optLogTransform_Click()
  userOptions.PRIOR_TRANSFORM = X12A_LOG
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optNoSeasonalAdjust_Click()
  userOptions.SEASONAL_ADJUST_TYPE = X12A_ADJUST_NONE
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optNoTransform_Click()
  userOptions.PRIOR_TRANSFORM = X12A_TRANSFORM_NONE
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optPrioAjustfactorOffset_Click()
  userOptions.PRIOR_ADJUST_FACTOR_TYPE = X12A_ADJUST_OFFSEt
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optPrioAjustfactorRatio_Click()
  userOptions.PRIOR_ADJUST_FACTOR_TYPE = X12A_ADJUST_RATIO
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optSEATSeasonalAdjust_Click()
  userOptions.SEASONAL_ADJUST_TYPE = X12A_SEATS
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optTDHLDYSeasonalAdjustment_Click()
  userOptions.SEASONAL_ADJUST_TYPE = X12A_TDHLDY
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optX11SeasonalAdj_Click()
  userOptions.SEASONAL_ADJUST_TYPE = X12A_X11
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefEditExtRegressionVars_Change()
  userOptions.REGRESSION_FACTOR_DATA = RefEditExtRegressionVars.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub



Private Sub RefEditExtRegressionVarsLabels_Change()
  userOptions.REGRESSION_FACTOR_LABELS = RefEditExtRegressionVarsLabels

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefEditPrioRegressionFactors_Change()
  userOptions.PRIOR_REGRESS_OTHERS_DATA = RefEditPrioRegressionFactors.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub RefEditUserAdjustmentFactors_Change()
  userOptions.PRIOR_ADJUST_FACTOR_DATA = RefEditUserAdjustmentFactors.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub



Private Sub RefEditTrendOutput_Change()
  userOptions.OUTPUT_TREND_RANGE = RefEditTrendOutput.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSeasonalOutput_Change()
  userOptions.OUTPUT_SEASON_RANGE = RefEditSeasonalOutput.value

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub RefInputArray_Change()
  userOptions.INPUT_DATA_RANGE = Utilities.procInputCellsRange(RefInputArray.value)

  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub RefStartDateEdit_Change()
  
  userOptions.START_DATE = Utilities.procInputCellsRange(RefStartDateEdit.value)
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmbxPeriod_Change()
  Const sSOURCE As String = "cmbxPeriod_Change"
  
  If cmbxPeriod.ListIndex = 0 Then
    userOptions.DATA_PERIOD = 12
  Else
    userOptions.DATA_PERIOD = 4
  End If
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmForecastYears_Change()
  Const sSOURCE As String = "cmForecastYears_Change"
  
  userOptions.ARIMA_FORECAST = cmForecastYears.ListIndex + 1
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub




Private Sub RunSpecCmd_Click()
  Dim retVal As Integer
  
  Dim modelSpec As String
#If VBA7 Then
  Dim status As Integer
#Else
  Dim status As Long
#End If
  
  'Get the model descriptor
  modelSpec = ActiveCell.value
  
  retVal = NDK_X12_RUN_SCENARIO(StrPtr(modelSpec), status)  ' xlVBARunX12SpecFile(modelSpec, 1)
  If retVal >= NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OUTPUT_SUCCESS_MSG), vbOKOnly + vbInformation, PRODUCT_MEDIUMNAME
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub TestTab2Cmd_Click()
  MsgBox "hello"
  
End Sub

Private Sub txtARIMAOrderd_Change()
  userOptions.ARIMA_MANUALORDER_D = txtARIMAOrderd.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtARIMAOrderdd_Change()
  userOptions.ARIMA_MANUALORDER_DD = txtARIMAOrderdd.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtARIMAOrderp_Change()
  userOptions.ARIMA_MANUALORDER_P = txtARIMAOrderp.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtARIMAOrderpp_Change()
  userOptions.ARIMA_MANUALORDER_PP = txtARIMAOrderpp.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtARIMAOrderq_Change()
  userOptions.ARIMA_MANUALORDER_Q = txtARIMAOrderq.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtARIMAOrderqq_Change()
  userOptions.ARIMA_MANUALORDER_QQ = txtARIMAOrderqq.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub txtLSRun_Change()
  
  If Val(txtLSRun.value) <= 7 Then
    userOptions.PRIOR_LSRUN_OUTLIERTEST = txtLSRun.value
  
    isDirty = True
    If callValidateForm Then
      Call validateForm
    End If
  Else
    ' MsgBox "LS run must be between 1 and 7"
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_BAD_LS_VALUE_ERROR_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
    
    ' Restore old value
    txtLSRun.value = userOptions.PRIOR_LSRUN_OUTLIERTEST
  End If
End Sub

Private Sub UserForm_Initialize()
  Dim myRange As Object
  Dim sztext As String
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_FRM_CAPTION)
  InputDatasetFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION)
  InputDatasetFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  LabelStartDate.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_START_DATE_LABEL_CAPTION)
  LabelStartDate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_START_DATE_LABEL_HELPTIP)
  RefStartDateEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_START_DATE_LABEL_HELPTIP)
  
  LabelPeriod.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PERIOD_LABEL_CAPTION)
  LabelPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PERIOD_LABEL_HELPTIP)
  cmbxPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PERIOD_LABEL_HELPTIP)
  
  PriorAdjustmentFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_LABEL_CAPTION)
  PriorAdjustmentFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_LABEL_HELPTIP)
  
  TransformFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_CAPTION)
  TransformFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_HELPTIP)
  
  optLogTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LOG_LABEL_CAPTION)
  optLogTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LOG_LABEL_HELPTIP)
  
  optAutoTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_AUTO_LABEL_CAPTION)
  optAutoTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_AUTO_LABEL_HELPTIP)
  
  optNoTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_NONE_LABEL_CAPTION)
  optNoTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_NONE_LABEL_HELPTIP)
  
  RegressionFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_LABEL_CAPTION)
  RegressionFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_LABEL_HELPTIP)
  
  RegressionVariablesFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_VARIABLES_LABEL_CAPTION)
  RegressionVariablesFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_VARIABLES_LABEL_HELPTIP)
  
  chkTDPrioRegression.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_TRADING_DAYS_LABEL_CAPTION)
  chkTDPrioRegression.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_TRADING_DAYS_LABEL_HELPTIP)
  
  chkRasterPrioRegression.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_EASTER_LABEL_CAPTION)
  chkRasterPrioRegression.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_EASTER_LABEL_HELPTIP)
  
  chkConstantPrioRegression.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_CONSTANT_LABEL_CAPTION)
  chkConstantPrioRegression.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_CONSTANT_LABEL_HELPTIP)
  
  OutliersTypeFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LABEL_CAPTION)
  OutliersTypeFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LABEL_HELPTIP)
  
  
  chkAOTestOutliers.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_AO_LABEL_CAPTION)
  chkAOTestOutliers.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_AO_LABEL_HELPTIP)
  
  chkLSTestOutliers.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_CAPTION)
  chkLSTestOutliers.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_HELPTIP)
  
  chkLSTestOutliers.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_CAPTION)
  chkLSTestOutliers.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_HELPTIP)
  
  chkTCTestOutliers.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_TC_LABEL_CAPTION)
  chkTCTestOutliers.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_TC_LABEL_HELPTIP)
  
  LSRunOutliersLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LEVEL_SHIFT_RUN_LABEL_CAPTION)
  LSRunOutliersLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LEVEL_SHIFT_RUN_LABEL_HELPTIP)
  txtLSRun.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LEVEL_SHIFT_RUN_LABEL_HELPTIP)
  
  
  SeasonalAdjustmentFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_LABEL_CAPTION)
  SeasonalAdjustmentFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_LABEL_HELPTIP)
  
  optX11SeasonalAdj.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_LABEL_CAPTION)
  optX11SeasonalAdj.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_LABEL_HELPTIP)
  
  optTDHLDYSeasonalAdjustment.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_TRADING_N_HOLIDAYS_LABEL_CAPTION)
  optTDHLDYSeasonalAdjustment.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_TRADING_N_HOLIDAYS_LABEL_HELPTIP)
  
  optNoSeasonalAdjust.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_NONE_LABEL_CAPTION)
  optNoSeasonalAdjust.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_NONE_LABEL_HELPTIP)
  
  Label1X11Options.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_LABEL_CAPTION)
  Label1X11Options.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_LABEL_HELPTIP)
  cmbX11FilterOptions.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_LABEL_HELPTIP)
  
  Label1X11Mode.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LABEL_CAPTION)
  Label1X11Mode.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LABEL_HELPTIP)
  cmbX11Mode.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LABEL_HELPTIP)
  
  ARIMAFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_LABEL_CAPTION)
  ARIMAFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_LABEL_HELPTIP)
  
  ARIMAORDERSFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_LABEL_CAPTION)
  ARIMAORDERSFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_LABEL_HELPTIP)
  
  optARIMAAutoSelect.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_AUTO_LABEL_CAPTION)
  optARIMAAutoSelect.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_AUTO_LABEL_HELPTIP)
  
  optARIMASpecifyOrder.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_LABEL_CAPTION)
  optARIMASpecifyOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_LABEL_HELPTIP)
  
  txtARIMAOrderp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_P_HELPTIP)
  labelP.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_P_HELPTIP)
  
  txtARIMAOrderd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_D_HELPTIP)
  LabelD.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_D_HELPTIP)
  
  txtARIMAOrderq.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_Q_HELPTIP)
  LabelQ.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_Q_HELPTIP)
  
  txtARIMAOrderpp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SP_HELPTIP)
  LabelPP.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SP_HELPTIP)
  
  txtARIMAOrderdd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SD_HELPTIP)
  LabelDD.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SD_HELPTIP)
  
  txtARIMAOrderqq.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SQ_HELPTIP)
  LabelQQ.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SQ_HELPTIP)
  
  ForecastFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_LABEL_CAPTION)
  ForecastFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_LABEL_HELPTIP)
  
  LabelForecast.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_LABEL_CAPTION)
  LabelForecast.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_LABEL_HELPTIP)
  cmForecastYears.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_LABEL_HELPTIP)
  
  openOutputCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_OUTPUT_FILE_LABEL_CAPTION)
  openOutputCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_OUTPUT_FILE_LABEL_HELPTIP)
  
  OpenLogCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_LOG_FILE_LABEL_CAPTION)
  OpenLogCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_LOG_FILE_LABEL_HELPTIP)
  
  OpenSpcFileCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_SPC_FILE_LABEL_CAPTION)
  OpenSpcFileCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_SPC_FILE_LABEL_HELPTIP)
  
  OpenErrorCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_ERROR_FILE_LABEL_CAPTION)
  OpenErrorCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_OPEN_ERROR_FILE_LABEL_HELPTIP)
  
  cmdHelpBtn.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelpBtn.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  RunSpecCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_RUN_CAPTION)
  RunSpecCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_RUN_HELPTIP)
  
  applyCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_APPLY_CAPTION)
  applyCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X12ARIMA_APPLY_HELPTIP)
  
  OKCmd.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  OKCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
  
  Set userOptions = New X12ARIMAModelUO
  If Not (userOptions Is Nothing) Then
    callValidateForm = False
    
    
    ' set the dirty flag to false
    isDirty = False
    
    ' Initialize the combobox
    cmbxPeriod.Clear
    cmbxPeriod.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PERIOD_MONTHLY_LABEL_CAPTION)   '("Monthly")
    cmbxPeriod.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PERIOD_QUARTERLY_LABEL_CAPTION)   '("Quarterly")
    If userOptions.DATA_PERIOD = 12 Then
      cmbxPeriod.ListIndex = 0
    Else
      cmbxPeriod.ListIndex = 1
    End If
    
    cmForecastYears.Clear
    cmForecastYears.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_ONE_YEAR_LABEL_CAPTION)   ' "1 year"
    cmForecastYears.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_TWO_YEAR_LABEL_CAPTION)   ' "2 years"
    cmForecastYears.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_THREE_YEAR_LABEL_CAPTION) ' "3 years"
    cmForecastYears.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_FOUR_YEAR_LABEL_CAPTION)  ' "4 years"
    cmForecastYears.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_FIVE_YEAR_LABEL_CAPTION)  ' "5 years"
    cmForecastYears.ListIndex = 0
    
    cmbX11FilterOptions.Clear
    
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_DEFAULT_LABEL_CAPTION) ' "DEFAULT"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x1_LABEL_CAPTION) ' "3x1"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x3_LABEL_CAPTION) ' "3x3"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x5_LABEL_CAPTION) ' "3x5"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x9_LABEL_CAPTION) ' "3x9"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x15_LABEL_CAPTION) ' "3x15"
    cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_STABLE_LABEL_CAPTION) ' "STABLE"
    cmbX11FilterOptions.ListIndex = 0
    
    
    cmbX11Mode.Clear
    cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_MULT_LABEL_CAPTION)  ' "mult"
    cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_ADD_LABEL_CAPTION)   ' "add"
    cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_PSEUDOADD_LABEL_CAPTION)   ' "pseudoadd"
    cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LOGADD_LABEL_CAPTION)   ' "logadd"
    
    
    ' Parse the formula if any
    If Len(ActiveCell.formula) > 0 Then
      If Len(ActiveCell.formula) > 8 And Left(ActiveCell.formula, 9) = "=X12ARIMA" Then
        strModelStr = ActiveCell.value
        
        ' Initialize the name of the model
        userOptions.X12AMODEL_NAME = strModelStr
        ' force calculation to update the add-in
        ActiveCell.Calculate
        
        ' Crack the formula to initialize the object
        userOptions.FromX12Formula (ActiveCell.formula)
        
        ' get the properties from the add-in (if possible)
        ' userOptions.FromX12Modelidentifier (ActiveCell.Value)
      Else
        ' "The formula in the active cell is not empty, and it is not a formula generated by an X-12 Model, please select another cell before you use this function."
        MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LOGADD_LABEL_CAPTION), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
        Unload Me
        Exit Sub
      End If
    Else
      strModelStr = ""
    End If
    
    'Initialize the input data
    RefInputArray.value = userOptions.INPUT_DATA_RANGE
    RefStartDateEdit.value = userOptions.START_DATE
    If userOptions.DATA_PERIOD = 12 Then
      cmbxPeriod.ListIndex = 0  'Monthly
    Else
      cmbxPeriod.ListIndex = 1  'Quarter
    End If
      
    
    
    ' Initialzie the controls
    optLogTransform.value = (userOptions.PRIOR_TRANSFORM = X12A_LOG)
    optAutoTransform.value = (userOptions.PRIOR_TRANSFORM = X12A_AUTO)
    optNoTransform.value = (userOptions.PRIOR_TRANSFORM = X12A_TRANSFORM_NONE)
    
    chkTDPrioRegression.value = userOptions.PRIOR_REGRESS_TD
    chkRasterPrioRegression.value = userOptions.PRIOR_REGRESS_EASTER
    chkConstantPrioRegression.value = userOptions.PRIOR_REGRESS_CONSTANT
    ' chkOtherPrioRegression.Value = userOptions.PRIOR_REGRESS_OTHERS
    ' RefEditPrioRegressionFactors.Value = userOptions.PRIOR_REGRESS_OTHERS_DATA
    
    chkAOTestOutliers.value = userOptions.PRIOR_AO_OUTLIERTEST
    chkLSTestOutliers.value = userOptions.PRIOR_LS_OUTLIERTEST
    txtLSRun.value = userOptions.PRIOR_LSRUN_OUTLIERTEST
    chkTCTestOutliers.value = userOptions.PRIOR_TC_OUTLIERTEST
    
    optARIMAAutoSelect.value = userOptions.ARIMA_AUTOSELECT
    optARIMASpecifyOrder.value = Not userOptions.ARIMA_AUTOSELECT
    txtARIMAOrderp.value = userOptions.ARIMA_MANUALORDER_P
    txtARIMAOrderd.value = userOptions.ARIMA_MANUALORDER_D
    txtARIMAOrderq.value = userOptions.ARIMA_MANUALORDER_Q
    txtARIMAOrderpp.value = userOptions.ARIMA_MANUALORDER_PP
    txtARIMAOrderdd.value = userOptions.ARIMA_MANUALORDER_DD
    txtARIMAOrderqq.value = userOptions.ARIMA_MANUALORDER_QQ
    
    cmForecastYears.ListIndex = userOptions.ARIMA_FORECAST - 1
    
    'RefEditExtRegressionVars.Value = userOptions.REGRESSION_FACTOR_DATA
    'RefEditExtRegressionVarsLabels.Value = userOptions.REGRESSION_FACTOR_LABELS
    
    optX11SeasonalAdj.value = userOptions.SEASONAL_ADJUST_TYPE = X12A_X11
    optTDHLDYSeasonalAdjustment.value = userOptions.SEASONAL_ADJUST_TYPE = X12A_TDHLDY
    optNoSeasonalAdjust.value = userOptions.SEASONAL_ADJUST_TYPE = X12A_ADJUST_NONE
    
    
    cmbX11FilterOptions.ListIndex = userOptions.SEASONAL_ADJUST_X11OPTION - 1
    cmbX11Mode.ListIndex = userOptions.SEASONAL_ADJUST_X11MODE - 1
    
    Set myRange = Range(ActiveCell.Address(True, True))
    
    callValidateForm = True
    Call validateForm
  Else
    Unload Me
  End If
End Sub

Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
  Dim ready As Boolean
  Dim inputDataReady As Boolean
  Dim validModel As Boolean
    
  ready = False
  inputDataReady = Utilities.isCellRangeValid(RefInputArray.value)
  'We need to check if there is actually numbers there
      
  RefStartDateEdit.enabled = inputDataReady
  LabelStartDate.enabled = inputDataReady
  
  cmbxPeriod.enabled = inputDataReady And Utilities.isCellRangeValid(userOptions.START_DATE)
  LabelPeriod.enabled = cmbxPeriod.enabled
  
  ' Now, let's check the prior adjustment
  inputDataReady = cmbxPeriod.enabled
  
  'Transform operator
  optLogTransform.enabled = inputDataReady
  optAutoTransform.enabled = inputDataReady
  optNoTransform.enabled = inputDataReady
  
  'Regression (prior adjustment)
  ' regression
  chkTDPrioRegression.enabled = inputDataReady
  chkRasterPrioRegression.enabled = inputDataReady
  chkConstantPrioRegression.enabled = inputDataReady
  
  'Outlier types test
  chkAOTestOutliers.enabled = inputDataReady
  chkTCTestOutliers.enabled = inputDataReady
  chkLSTestOutliers.enabled = inputDataReady
  LSRunOutliersLabel.enabled = inputDataReady And userOptions.PRIOR_LS_OUTLIERTEST
  txtLSRun.enabled = inputDataReady And userOptions.PRIOR_LS_OUTLIERTEST
  
  ' ARIMA Model
  optARIMAAutoSelect.enabled = inputDataReady
  optARIMASpecifyOrder.enabled = inputDataReady
  txtARIMAOrderp.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  txtARIMAOrderd.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  txtARIMAOrderq.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  txtARIMAOrderpp.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  txtARIMAOrderdd.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  txtARIMAOrderqq.enabled = inputDataReady And Not userOptions.ARIMA_AUTOSELECT
  labelP.enabled = txtARIMAOrderp.enabled
  LabelD.enabled = txtARIMAOrderp.enabled
  LabelQ.enabled = txtARIMAOrderp.enabled
  LabelPP.enabled = txtARIMAOrderp.enabled
  LabelDD.enabled = txtARIMAOrderp.enabled
  LabelQQ.enabled = txtARIMAOrderp.enabled
  
  ' Forecast
  LabelForecast.enabled = inputDataReady
  cmForecastYears.enabled = inputDataReady
  
  'Seasonal adjustment
  optX11SeasonalAdj.enabled = inputDataReady
  optTDHLDYSeasonalAdjustment.enabled = inputDataReady And userOptions.IS_STOCK_DATA
  optNoSeasonalAdjust.enabled = inputDataReady
  
  Label1X11Options.enabled = inputDataReady And userOptions.SEASONAL_ADJUST_TYPE = X12A_X11
  cmbX11FilterOptions.enabled = inputDataReady And userOptions.SEASONAL_ADJUST_TYPE = X12A_X11
  
  Label1X11Mode.enabled = inputDataReady And userOptions.SEASONAL_ADJUST_TYPE = X12A_X11
  cmbX11Mode.enabled = inputDataReady And userOptions.SEASONAL_ADJUST_TYPE = X12A_X11


  'Update button
  applyCmd.enabled = isDirty And inputDataReady
  
  ' Open File buttons
  OpenSpcFileCmd.enabled = NDK_X12_OUT_FILE(StrPtr(userOptions.X12AMODEL_NAME), 0, StrPtr(vbNullString), 0, 0) >= NDK_SUCCESS
  ' xlVBAFindX12File(userOptions.X12AMODEL_NAME, 0)
  
  openOutputCmd.enabled = NDK_X12_OUT_FILE(StrPtr(userOptions.X12AMODEL_NAME), 2, StrPtr(vbNullString), 0, 0) >= NDK_SUCCESS
  ' xlVBAFindX12File(userOptions.X12AMODEL_NAME, 2)
  OpenLogCmd.enabled = NDK_X12_OUT_FILE(StrPtr(userOptions.X12AMODEL_NAME), 1, StrPtr(vbNullString), 0, 0) >= NDK_SUCCESS
  ' xlVBAFindX12File(userOptions.X12AMODEL_NAME, 1)
  OpenErrorCmd.enabled = NDK_X12_OUT_FILE(StrPtr(userOptions.X12AMODEL_NAME), 3, StrPtr(vbNullString), 0, 0) >= NDK_SUCCESS
  ' xlVBAFindX12File(userOptions.X12AMODEL_NAME, 3)
  RunSpecCmd.enabled = OpenSpcFileCmd.enabled

  'OK button
  OKCmd.enabled = True
End Sub


Private Sub UserForm_Terminate()
  Set userOptions = Nothing
End Sub


Attribute VB_Name = "X12ARIMAModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: X12ARIMAModelUO.cls 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/X12ARIMAModelUO.cls $
'
Private Const msMODULE As String = "CLASS:X12ARIMAModelUO"

Public Enum X12A_TRANSFORM_TYPE
  X12A_LOG = 1
  X12A_AUTO = 2
  X12A_TRANSFORM_NONE = 3
End Enum

Public Enum X12A_USER_ADJUSTFACTOR_TYPE
  X12A_ADJUST_RATIO = 1
  X12A_ADJUST_OFFSEt = 2
End Enum

Public Enum X12A_SEASONAL_ADJUST_TYPE
  X12A_X11 = 1
  X12A_TDHLDY = 2
  X12A_ADJUST_NONE = 4
End Enum


Public Enum X12A_X11_FILTER_TYPE
  X12A_X11_DEFAULT = 1
  X12A_X11_3X1 = 2
  X12A_X11_3X3 = 3
  X12A_X11_3X5 = 4
  X12A_X11_3X9 = 5
  X12A_X11_3X15 = 6
  X12A_X11_STABLE = 7
End Enum


Public Enum X12A_X11_MODE_TYPE
  X12A_X11_MULT = 1
  X12A_X11_ADD = 2
  X12A_X11_PSEUDOADD = 3
  X12A_X11_LOGADD = 4
End Enum



' A unique identifier for the model
Private myModelName As String


Private myOutputTrend As String
Private myOutputSeason As String


Private myInputData As String
Private myStartDate As String
Private myPeriod As Integer

' Transform
Private myTransform As X12A_TRANSFORM_TYPE
Private myDataStockSeries As Boolean

' AIC test
Private myAICTD As Boolean
Private myAICEaster As Boolean
Private myAICHardCode As Boolean

' Prior regression data
Private myPriorRegressTD As Boolean
Private myPriorRegressEaster As Boolean
Private myPriorRegressConstant As Boolean
Private myPriorRegressOther As Boolean
Private myPriorRegressOtherData As String

' Outliers test
Private myAOOutlierTypeTest As Boolean
Private myLSOutlierTypeTest As Boolean
Private myTCOutlierTypeTest As Boolean
Private mySOOutlierTypeTest As Boolean
Private myHardCodeOutlierTypeTest As Boolean
Private myLSRunOutlierTypeTest As Integer

' User's adjustment factors
Private myPriorAdjustmentFactorsData As String
Private mypriorAdjustmentFactorType As X12A_USER_ADJUSTFACTOR_TYPE

' ARIMA Model options
Private myARIMAAutoSelectOrder As Boolean
Private myARIMAAutomodelhardCode As Boolean
Private myARIMAOrderP As Integer
Private myARIMAOrderD As Integer
Private myARIMAOrderQ As Integer
Private myARIMAOrderPP As Integer
Private myARIMAOrderDD As Integer
Private myARIMAOrderQQ As Integer

'ARIMA Forecast
Private myARIMAForecastYears As Integer

'Stability Diagnosis
Private myARIMAStabilityDiagnosis As Boolean
Private myARIMASlidingSpans As Boolean

'Regression
Private myRegressionData As String
Private myRegressionDataLabels As String

' Seasonal adjustmnet
Private mySeasonalAdjustType As X12A_SEASONAL_ADJUST_TYPE
Private myX11FilterOption As X12A_X11_FILTER_TYPE
Private myX11FilterMode As X12A_X11_MODE_TYPE




Public Property Get X12AMODEL_NAME() As String
  X12AMODEL_NAME = myModelName
End Property

Public Property Let X12AMODEL_NAME(ByVal vNewValue As String)
  myModelName = vNewValue
End Property



' The cell range to use for input data
Public Property Get OUTPUT_TREND_RANGE() As String
  OUTPUT_TREND_RANGE = myOutputTrend
End Property

Public Property Let OUTPUT_TREND_RANGE(ByVal vNewValue As String)
  myOutputTrend = vNewValue
End Property

' The cell range to use for input data
Public Property Get OUTPUT_SEASON_RANGE() As String
  OUTPUT_SEASON_RANGE = myOutputSeason
End Property

Public Property Let OUTPUT_SEASON_RANGE(ByVal vNewValue As String)
  myOutputSeason = vNewValue
End Property





' The cell range to use for input data
Public Property Get INPUT_DATA_RANGE() As String
  INPUT_DATA_RANGE = myInputData
End Property

Public Property Let INPUT_DATA_RANGE(ByVal vNewValue As String)
  myInputData = vNewValue
End Property

' The date that first data point belong to
Public Property Get START_DATE() As String
  START_DATE = myStartDate
End Property

Public Property Let START_DATE(ByVal vNewValue As String)
  myStartDate = vNewValue
End Property

' The frequency of data (monthly = 12 , Quartely=4)
Public Property Get DATA_PERIOD() As Integer
  DATA_PERIOD = myPeriod
End Property

Public Property Let DATA_PERIOD(ByVal vNewValue As Integer)
  myPeriod = vNewValue
End Property


Public Property Get PRIOR_TRANSFORM() As X12A_TRANSFORM_TYPE
  PRIOR_TRANSFORM = myTransform
End Property

Public Property Let PRIOR_TRANSFORM(ByVal vNewValue As X12A_TRANSFORM_TYPE)
  myTransform = vNewValue
End Property

Public Property Get IS_STOCK_DATA() As Boolean
  IS_STOCK_DATA = myDataStockSeries
End Property

Public Property Let IS_STOCK_DATA(ByVal vNewValue As Boolean)
  myDataStockSeries = vNewValue
End Property


Public Property Get PRIOR_AIC_TD() As Boolean
  PRIOR_AIC_TD = myAICTD
End Property

Public Property Let PRIOR_AIC_TD(ByVal vNewValue As Boolean)
  myAICTD = vNewValue
End Property


Public Property Get PRIOR_AIC_EASTER() As Boolean
  PRIOR_AIC_TD = myAICEaster
End Property

Public Property Let PRIOR_AIC_EASTER(ByVal vNewValue As Boolean)
  myAICEaster = vNewValue
End Property


Public Property Get PRIOR_AIC_HARDCODE() As Boolean
  PRIOR_AIC_HARDCODE = myAICHardCode
End Property

Public Property Let PRIOR_AIC_HARDCODE(ByVal vNewValue As Boolean)
  myAICHardCode = vNewValue
End Property


Public Property Get PRIOR_REGRESS_TD() As Boolean
  PRIOR_REGRESS_TD = myPriorRegressTD
End Property

Public Property Let PRIOR_REGRESS_TD(ByVal vNewValue As Boolean)
  myPriorRegressTD = vNewValue
End Property

Public Property Get PRIOR_REGRESS_EASTER() As Boolean
  PRIOR_REGRESS_EASTER = myPriorRegressEaster
End Property

Public Property Let PRIOR_REGRESS_EASTER(ByVal vNewValue As Boolean)
  myPriorRegressEaster = vNewValue
End Property

Public Property Get PRIOR_REGRESS_CONSTANT() As Boolean
  PRIOR_REGRESS_CONSTANT = myPriorRegressConstant
End Property

Public Property Let PRIOR_REGRESS_CONSTANT(ByVal vNewValue As Boolean)
  myPriorRegressConstant = vNewValue
End Property

Public Property Get PRIOR_REGRESS_OTHERS() As Boolean
  PRIOR_REGRESS_OTHERS = myPriorRegressOther
End Property

Public Property Let PRIOR_REGRESS_OTHERS(ByVal vNewValue As Boolean)
  myPriorRegressOther = vNewValue
End Property


Public Property Get PRIOR_REGRESS_OTHERS_DATA() As String
  PRIOR_REGRESS_OTHERS_DATA = myPriorRegressOtherData
End Property

Public Property Let PRIOR_REGRESS_OTHERS_DATA(ByVal vNewValue As String)
  myPriorRegressOtherData = vNewValue
End Property

Public Property Get PRIOR_AO_OUTLIERTEST() As Boolean
  PRIOR_AO_OUTLIERTEST = myAOOutlierTypeTest
End Property

Public Property Let PRIOR_AO_OUTLIERTEST(ByVal vNewValue As Boolean)
  myAOOutlierTypeTest = vNewValue
End Property

Public Property Get PRIOR_LS_OUTLIERTEST() As Boolean
  PRIOR_LS_OUTLIERTEST = myLSOutlierTypeTest
End Property

Public Property Let PRIOR_LS_OUTLIERTEST(ByVal vNewValue As Boolean)
  myLSOutlierTypeTest = vNewValue
End Property

Public Property Get PRIOR_TC_OUTLIERTEST() As Boolean
  PRIOR_TC_OUTLIERTEST = myTCOutlierTypeTest
End Property

Public Property Let PRIOR_TC_OUTLIERTEST(ByVal vNewValue As Boolean)
  myTCOutlierTypeTest = vNewValue
End Property

Public Property Get PRIOR_SO_OUTLIERTEST() As Boolean
  PRIOR_SO_OUTLIERTEST = mySOOutlierTypeTest
End Property

Public Property Let PRIOR_SO_OUTLIERTEST(ByVal vNewValue As Boolean)
  mySOOutlierTypeTest = vNewValue
End Property

Public Property Get PRIOR_HARDCODE_OUTLIERTEST() As Boolean
  PRIOR_HARDCODE_OUTLIERTEST = myHardCodeOutlierTypeTest
End Property

Public Property Let PRIOR_HARDCODE_OUTLIERTEST(ByVal vNewValue As Boolean)
  myHardCodeOutlierTypeTest = vNewValue
End Property


Public Property Get PRIOR_LSRUN_OUTLIERTEST() As Integer
  PRIOR_LSRUN_OUTLIERTEST = myLSRunOutlierTypeTest
End Property

Public Property Let PRIOR_LSRUN_OUTLIERTEST(ByVal vNewValue As Integer)
  myLSRunOutlierTypeTest = vNewValue
End Property



Public Property Get PRIOR_ADJUST_FACTOR_DATA() As String
  PRIOR_ADJUST_FACTOR_DATA = myPriorAdjustmentFactorsData
End Property

Public Property Let PRIOR_ADJUST_FACTOR_DATA(ByVal vNewValue As String)
  myPriorAdjustmentFactorsData = vNewValue
End Property



Public Property Get PRIOR_ADJUST_FACTOR_TYPE() As X12A_USER_ADJUSTFACTOR_TYPE
  PRIOR_ADJUST_FACTOR_TYPE = mypriorAdjustmentFactorType
End Property

Public Property Let PRIOR_ADJUST_FACTOR_TYPE(ByVal vNewValue As X12A_USER_ADJUSTFACTOR_TYPE)
  mypriorAdjustmentFactorType = vNewValue
End Property





Public Property Get ARIMA_AUTOSELECT() As Boolean
  ARIMA_AUTOSELECT = myARIMAAutoSelectOrder
End Property

Public Property Let ARIMA_AUTOSELECT(ByVal vNewValue As Boolean)
  myARIMAAutoSelectOrder = vNewValue
End Property

Public Property Get ARIMA_AUTOSELECT_HARDCODE() As Boolean
  ARIMA_AUTOSELECT_HARDCODE = myARIMAAutomodelhardCode
End Property

Public Property Let ARIMA_AUTOSELECT_HARDCODE(ByVal vNewValue As Boolean)
  myARIMAAutomodelhardCode = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_P() As Integer
  ARIMA_MANUALORDER_P = myARIMAOrderP
End Property

Public Property Let ARIMA_MANUALORDER_P(ByVal vNewValue As Integer)
  myARIMAOrderP = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_D() As Integer
  ARIMA_MANUALORDER_D = myARIMAOrderD
End Property

Public Property Let ARIMA_MANUALORDER_D(ByVal vNewValue As Integer)
  myARIMAOrderD = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_Q() As Integer
  ARIMA_MANUALORDER_Q = myARIMAOrderQ
End Property

Public Property Let ARIMA_MANUALORDER_Q(ByVal vNewValue As Integer)
  myARIMAOrderQ = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_PP() As Integer
  ARIMA_MANUALORDER_PP = myARIMAOrderPP
End Property

Public Property Let ARIMA_MANUALORDER_PP(ByVal vNewValue As Integer)
  myARIMAOrderPP = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_DD() As Integer
  ARIMA_MANUALORDER_DD = myARIMAOrderDD
End Property

Public Property Let ARIMA_MANUALORDER_DD(ByVal vNewValue As Integer)
  myARIMAOrderDD = vNewValue
End Property

Public Property Get ARIMA_MANUALORDER_QQ() As Integer
  ARIMA_MANUALORDER_QQ = myARIMAOrderQQ
End Property

Public Property Let ARIMA_MANUALORDER_QQ(ByVal vNewValue As Integer)
  myARIMAOrderQQ = vNewValue
End Property


'ARIMA Forecast
Public Property Get ARIMA_FORECAST() As Integer
  ARIMA_FORECAST = myARIMAForecastYears
End Property

Public Property Let ARIMA_FORECAST(ByVal vNewValue As Integer)
  myARIMAForecastYears = vNewValue
End Property


'Stability Diagnosis
Public Property Get ARIMA_STABILITY_DIAGNOSIS() As Boolean
  ARIMA_STABILITY_DIAGNOSIS = myARIMAStabilityDiagnosis
End Property

Public Property Let ARIMA_STABILITY_DIAGNOSIS(ByVal vNewValue As Boolean)
  myARIMAStabilityDiagnosis = vNewValue
End Property

Public Property Get ARIMA_STABILITY_DIAG_SLIDINGSPANS() As Boolean
  ARIMA_STABILITY_DIAG_SLIDINGSPANS = myARIMASlidingSpans
End Property

Public Property Let ARIMA_STABILITY_DIAG_SLIDINGSPANS(ByVal vNewValue As Boolean)
  myARIMASlidingSpans = vNewValue
End Property


'Regression
Public Property Get REGRESSION_FACTOR_DATA() As String
  REGRESSION_FACTOR_DATA = myRegressionData
End Property

Public Property Let REGRESSION_FACTOR_DATA(ByVal vNewValue As String)
  myRegressionData = vNewValue
End Property

Public Property Get REGRESSION_FACTOR_LABELS() As String
  REGRESSION_FACTOR_LABELS = myRegressionDataLabels
End Property

Public Property Let REGRESSION_FACTOR_LABELS(ByVal vNewValue As String)
  myRegressionDataLabels = vNewValue
End Property


' Seasonal adjustmnet
Public Property Get SEASONAL_ADJUST_TYPE() As X12A_SEASONAL_ADJUST_TYPE
  SEASONAL_ADJUST_TYPE = mySeasonalAdjustType
End Property

Public Property Let SEASONAL_ADJUST_TYPE(ByVal vNewValue As X12A_SEASONAL_ADJUST_TYPE)
  mySeasonalAdjustType = vNewValue
End Property


Public Property Get SEASONAL_ADJUST_X11OPTION() As X12A_X11_FILTER_TYPE
  SEASONAL_ADJUST_X11OPTION = myX11FilterOption
End Property

Public Property Let SEASONAL_ADJUST_X11OPTION(ByVal vNewValue As X12A_X11_FILTER_TYPE)
  myX11FilterOption = vNewValue
End Property



Public Property Get SEASONAL_ADJUST_X11MODE() As X12A_X11_MODE_TYPE
  SEASONAL_ADJUST_X11MODE = myX11FilterMode
End Property

Public Property Let SEASONAL_ADJUST_X11MODE(ByVal vNewValue As X12A_X11_MODE_TYPE)
  myX11FilterMode = vNewValue
End Property


Public Sub FromX12Formula(fmula As String)
  Dim pos As Long
  Dim buffer As String

  fmula = Trim(fmula)
  If Len(fmula) > 0 Then
    fmula = UCase(fmula)
    
    ' Expect to be X12ARIMA function
    If Left(fmula, 10) = "=X12ARIMA(" Then
      ' Parse the formula, get input data range
      myInputData = procFormula(ActiveCell.formula, 1)

      ' Parse the formula, get start date
      myStartDate = procFormula(ActiveCell.formula, 2)

      ' Parse the formula, get data frequency
      myPeriod = procFormula(ActiveCell.formula, 3)

      'get the transform
      myTransform = procFormula(ActiveCell.formula, 4)
      
      ' get the prior regression
      buffer = procFormula(ActiveCell.formula, 5)
      
      'get the TD regression
      myPriorRegressTD = Val(procArgument(buffer, 1))
      myPriorRegressEaster = Val(procArgument(buffer, 2))
      myPriorRegressConstant = Val(procArgument(buffer, 3))
      
     
      'Outliers
      buffer = procFormula(ActiveCell.formula, 6)
       
      'Outliers (data)
      myAOOutlierTypeTest = Val(procArgument(buffer, 1))
      myLSRunOutlierTypeTest = Val(procArgument(buffer, 2))
      myLSOutlierTypeTest = myLSRunOutlierTypeTest > 0
      myTCOutlierTypeTest = Val(procArgument(buffer, 3))
       
      ' ARIMA Model
      buffer = procFormula(ActiveCell.formula, 7)
      
      myARIMAOrderP = Val(procArgument(buffer, 1))
      myARIMAOrderD = Val(procArgument(buffer, 2))
      myARIMAOrderQ = Val(procArgument(buffer, 3))
      myARIMAOrderPP = Val(procArgument(buffer, 4))
      myARIMAOrderDD = Val(procArgument(buffer, 5))
      myARIMAOrderQQ = Val(procArgument(buffer, 6))
      
      myARIMAAutoSelectOrder = Not (myARIMAOrderP > 0 Or _
                               myARIMAOrderD > 0 Or _
                               myARIMAOrderQ > 0 Or _
                               myARIMAOrderPP > 0 Or _
                               myARIMAOrderDD > 0 Or _
                               myARIMAOrderQQ > 0)

      
      myARIMAForecastYears = Val(procFormula(ActiveCell.formula, 8))
      
      mySeasonalAdjustType = Val(procFormula(ActiveCell.formula, 9))
      myX11FilterOption = Val(procFormula(ActiveCell.formula, 10))
      myX11FilterMode = Val(procFormula(ActiveCell.formula, 11))
    End If
  End If
End Sub


Public Sub FromX12Modelidentifier(modelId As String)

  ' Get the start date
  myTransform = vb_X12ARIMA_PROP(modelId, 1)
  myPriorRegressTD = vb_X12ARIMA_PROP(modelId, 2)
  myPriorRegressEaster = vb_X12ARIMA_PROP(modelId, 3)
  myPriorRegressConstant = vb_X12ARIMA_PROP(modelId, 4)
  myPriorRegressOther = vb_X12ARIMA_PROP(modelId, 5)

  'get Outliers settings
  myAOOutlierTypeTest = vb_X12ARIMA_PROP(modelId, 6)
  myLSOutlierTypeTest = vb_X12ARIMA_PROP(modelId, 7)
  myTCOutlierTypeTest = vb_X12ARIMA_PROP(modelId, 8)
  myLSRunOutlierTypeTest = vb_X12ARIMA_PROP(modelId, 9)
  
  mySeasonalAdjustType = vb_X12ARIMA_PROP(modelId, 10)
  myX11FilterOption = vb_X12ARIMA_PROP(modelId, 11)
  myX11FilterMode = vb_X12ARIMA_PROP(modelId, 12)
  
  'Forecast settings
  myARIMAForecastYears = vb_X12ARIMA_PROP(modelId, 20)
  
  'ARIMA Modeling settings
  myARIMAAutoSelectOrder = vb_X12ARIMA_PROP(modelId, 13)
  myARIMAOrderP = vb_X12ARIMA_PROP(modelId, 14)
  myARIMAOrderD = vb_X12ARIMA_PROP(modelId, 15)
  myARIMAOrderQ = vb_X12ARIMA_PROP(modelId, 16)
  myARIMAOrderPP = vb_X12ARIMA_PROP(modelId, 17)
  myARIMAOrderDD = vb_X12ARIMA_PROP(modelId, 18)
  myARIMAOrderQQ = vb_X12ARIMA_PROP(modelId, 19)

End Sub


Public Function X12AFormula() As String

  X12AFormula = "=X12ARIMA("
  X12AFormula = X12AFormula + myInputData + ","
  X12AFormula = X12AFormula + myStartDate + ","
  X12AFormula = X12AFormula + CStr(myPeriod) + ","
  X12AFormula = X12AFormula + CStr(myTransform) + ","
  
  'Prio_Reg
  X12AFormula = X12AFormula + "{"
  If myPriorRegressTD Then
    X12AFormula = X12AFormula + CStr(1) + ","
  Else
    X12AFormula = X12AFormula + CStr(0) + ","
  End If
  
  If myPriorRegressEaster Then
    X12AFormula = X12AFormula + CStr(1) + ","
  Else
    X12AFormula = X12AFormula + CStr(0) + ","
  End If
  
  If myPriorRegressConstant Then
    X12AFormula = X12AFormula + CStr(1)
  Else
    X12AFormula = X12AFormula + CStr(0)
  End If
  X12AFormula = X12AFormula + "}, "
  
  'Outliers
  X12AFormula = X12AFormula + "{"
  If myAOOutlierTypeTest Then
    X12AFormula = X12AFormula + CStr(1) + ","
  Else
    X12AFormula = X12AFormula + CStr(0) + ","
  End If
  
  If myLSOutlierTypeTest Then
    X12AFormula = X12AFormula + CStr(myLSRunOutlierTypeTest) + ","
  Else
    X12AFormula = X12AFormula + CStr(0) + ","
  End If
  
  If myTCOutlierTypeTest Then
    X12AFormula = X12AFormula + CStr(1)
  Else
    X12AFormula = X12AFormula + CStr(0)
  End If
  X12AFormula = X12AFormula + "}, "
  
  'ARIMA Model
  X12AFormula = X12AFormula + "{"
  If myARIMAAutoSelectOrder Then
    X12AFormula = X12AFormula + "0,0,0,0,0,0"
  Else
    X12AFormula = X12AFormula + CStr(myARIMAOrderP) + ","
    X12AFormula = X12AFormula + CStr(myARIMAOrderD) + ","
    X12AFormula = X12AFormula + CStr(myARIMAOrderQ) + ","
    X12AFormula = X12AFormula + CStr(myARIMAOrderPP) + ","
    X12AFormula = X12AFormula + CStr(myARIMAOrderDD) + ","
    X12AFormula = X12AFormula + CStr(myARIMAOrderQQ)
  End If
  X12AFormula = X12AFormula + "}, "
  
  'Forecast
   X12AFormula = X12AFormula + CStr(myARIMAForecastYears) + ","
   
  'Seasonal Adjustment
  X12AFormula = X12AFormula + CStr(mySeasonalAdjustType) + ","
  
  ' myX11FilterOption
  X12AFormula = X12AFormula + CStr(myX11FilterOption) + ","
  
  ' myX11FilterMode
  X12AFormula = X12AFormula + CStr(myX11FilterMode)

  X12AFormula = X12AFormula + ")"
End Function


' Functions the we need to use to create the spec and run the file.

Private Sub Class_Initialize()
  ' Initialize the values of the class members
  Const sSOURCE As String = "Class_Initialize"
  
  
  ' Initialzie the model name
  myModelName = "TEST001"
  
  ' Input data
  myInputData = ""
  myStartDate = ""
  myPeriod = 12
  
  ' Prior adjustment
  ' 1- Transform
  myTransform = X12A_LOG
  myDataStockSeries = False


  ' AIC test
  myAICTD = True
  myAICEaster = True
  myAICHardCode = True

  ' Prior regression data
  myPriorRegressTD = True
  myPriorRegressEaster = True
  myPriorRegressConstant = True
  myPriorRegressOther = False
  myPriorRegressOtherData = ""

  ' Outliers test
  myAOOutlierTypeTest = False
  myLSOutlierTypeTest = False
  myTCOutlierTypeTest = False
  mySOOutlierTypeTest = False
  myHardCodeOutlierTypeTest = False
  myLSRunOutlierTypeTest = 1

  ' User's adjustment factors
  myPriorAdjustmentFactorsData = ""
  mypriorAdjustmentFactorType = X12A_ADJUST_RATIO

  ' ARIMA Model options
  myARIMAAutoSelectOrder = True
  myARIMAAutomodelhardCode = True
  myARIMAOrderP = 0
  myARIMAOrderD = 1
  myARIMAOrderQ = 1
  myARIMAOrderPP = 0
  myARIMAOrderDD = 1
  myARIMAOrderQQ = 1

  'ARIMA Forecast
  myARIMAForecastYears = 1

  'Stability Diagnosis
  myARIMAStabilityDiagnosis = True
  myARIMASlidingSpans = True

  'Regression
  myRegressionData = ""
  myRegressionDataLabels = ""

  ' Seasonal adjustmnet
  mySeasonalAdjustType = X12A_X11
  myX11FilterOption = X12A_X11_DEFAULT
  myX11FilterMode = X12A_X11_MULT
End Sub



Public Sub X12AOutputSA()
  Dim outRange As Object
  Dim vals As Variant
  
  If mySeasonalAdjustType = X12A_X11 Then
    If Len(myOutputTrend) > 0 And Len(myModelName) > 0 Then
      Set outRange = Range(myOutputTrend)
      If (outRange Is Nothing) Then
        ' "Enter a valid output range."
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly + vbCritical, _
               MSGAPI.getLocaleString(IDS_UI_X12ARIMA_FRM_CAPTION)
        Exit Sub
      End If
      vals = vb_X11COMP(myModelName, 1, 1)
      Range(outRange.Cells(1, 1), outRange.Cells(UBound(vals), 1)) = vals
    End If
    
    
    If Len(myOutputSeason) > 0 And Len(myModelName) > 0 Then
      Set outRange = Range(myOutputSeason)
      If (outRange Is Nothing) Then
        ' MsgBox "Enter a valid output range."
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR), vbOKOnly + vbCritical, _
               MSGAPI.getLocaleString(IDS_UI_X12ARIMA_FRM_CAPTION)
        Exit Sub
      End If
      vals = vb_X11COMP(myModelName, 2, 1)
      Range(outRange.Cells(1, 1), outRange.Cells(UBound(vals), 1)) = vals
    End If
  End If


End Sub


Attribute VB_Name = "X13ARIMASEATSFrm"
Attribute VB_Base = "0{7633FA52-6BE1-45B1-89AF-3EE3E01A31D0}{BBEEE276-042A-424A-A610-973E83BB02CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Compare Text
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: X13ARIMASEATSFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/X13ARIMASEATSFrm.frm $
'
Private Const msMODULE As String = "USERFORM:X12ARIMAModel"

Private strModelStr As String

Private myGeneralUO As GeneralUO
Private userOptions As X13ARIMASEATSModelUO
Private myMissingValueUO As MissingValueUO

Private isDirty As Boolean
Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub AddCustomVariableCommandButton_Click()
  AddEventUserForm.Show
End Sub

Private Sub applyCmd_Click()
  'Write the options to the spc file
  Dim retVal As Integer
  
  'Update the active cell formula
  ActiveCell.formula = userOptions.X13ASFormula(myGeneralUO)
  
  ' Now, force the recalculation of the cell
  ActiveCell.Calculate
  If Not IsError(ActiveCell.value) Then
    userOptions.X13AMODEL_NAME = ActiveCell.value
  
    isDirty = False
  Else
    MsgBox MSGAPI.getLocaleString(IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_CAPTION), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If
  
  ' Reset the dirty flag
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub BoxCoxPowerParamTextBox_Change()
  If Len(BoxCoxPowerParamTextBox.value) > 0 Then
    userOptions.POWER_PARAM = Me.BoxCoxPowerParamTextBox.value
  Else
    userOptions.POWER_PARAM = QNaN
  End If
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub CheckBox1_Click()

End Sub

Private Sub chkHendersonMAAutoSelect_Click()
  userOptions.X11_TRENDMA_AUTO = Me.chkHendersonMAAutoSelect.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkSEATSHPCycle_Click()
  userOptions.SEATS_CALC_HPCYCLE = Me.chkSEATSHPCycle.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkSEATSStationarySeasonal_Click()
  userOptions.SEATS_ACCEPT_SEASONAL_STATIONARY = chkSEATSStationarySeasonal.value
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub CloseCmd_Click()
  Unload Me
End Sub

Private Sub cmbX11FilterOptions_Change()
  userOptions.X11_SEASONALMA = cmbX11FilterOptions.ListIndex
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmbX11Mode_Change()
  userOptions.X11_MODE = cmbX11Mode.ListIndex
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmdHelpBtn_Click()
  Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, Me.cmdHelpBtn.HelpContextID)
End Sub

Private Sub DecomposalApproxCheckBox_Click()
  userOptions.SEATS_ADMISSABLE_APPROX = Me.DecomposalApproxCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub finiteFilterCheckBox_Click()
  userOptions.SEATS_FINITE_SAMPLE_FILTERS = Me.finiteFilterCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub LEAPYRCheckBox_Click()
  userOptions.LPYR_PRIOR_ADJ = Me.LEAPYRCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub LOMCheckBox_Click()
  userOptions.LOM_PRIOR_ADJ = Me.LOMCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub LOQCheckBox_Click()
  userOptions.LOQ_PRIOR_ADJ = Me.LOQCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub OpenErrorCmd_Click()
  ' Show the SPC file in a notepad
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
  
  'Get the model descriptor
  modelSpec = ActiveCell.value

  filepathlen = 260
  retVal = NDK_X13AS_OUT_FILE(StrPtr(modelSpec), 3, StrPtr(vbNullString), filepathlen, 1)

  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_OUTPUT_ERR_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If

End Sub

Private Sub OpenLogCmd_Click()
  ' Show the SPC file in a notepad
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
  
  'Get the model descriptor
  modelSpec = ActiveCell.value

  filepathlen = 260
  retVal = NDK_X13AS_OUT_FILE(StrPtr(modelSpec), 1, StrPtr(vbNullString), filepathlen, 1)

  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_OUTPUT_LOG_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If

End Sub

Private Sub OpenSpcFileCmd_Click()
  ' Show the SPC file in a notepad
  Dim retVal As Integer
  Dim modelSpec As String
  Dim filepathlen As Long
  
  'Get the model descriptor
  modelSpec = ActiveCell.value

  filepathlen = 260
  retVal = NDK_X13AS_OUT_FILE(StrPtr(modelSpec), 0, StrPtr(vbNullString), filepathlen, 1)

  If retVal < NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_OUTPUT_SPC_FILE_NOT_FOUND_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
  End If

End Sub

Private Sub optAutoTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_AUTO
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub optBoxCoxTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optInverseTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_INV
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub


Private Sub optLogisticTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_LOGIST
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub optLogTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_LOG
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optNoSeasonalAdjust_Click()
  userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_NONE
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optNoTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_NONE
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPermCustomAdjustDiff_Click()
  userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPermCustomAdjustPct_Click()
  userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optPermCustomAdjustRatio_Click()
  userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optSEATS_Click()
  userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_SEATS
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optSqrtTransform_Click()
  userOptions.TRANFORM_TYPE = X13TRANSFOR_SQRT
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If

End Sub

Private Sub optTempCustomAdjustDiff_Click()
  userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optTempCustomAdjustPct_Click()
  userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optTempCustomAdjustRatio_Click()
  userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optX11SeasonalAdj_Click()
  userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_X11
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub PermUDPrioAdjustCheckBox_Click()
  userOptions.PERM_PRIOR_ENABLED = Me.PermUDPrioAdjustCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub PermUserAdjustmentRefEdit_Change()
  userOptions.PERM_PRIOR_DATA = Me.PermUserAdjustmentRefEdit.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RunSpecCmd_Click()
  Dim retVal As Integer
  
  Dim modelSpec As String
  Dim status As Integer

  modelSpec = ActiveCell.value
  
  retVal = NDK_X13_RUN_SPC_FILE(StrPtr(modelSpec), status)
  If retVal >= NDK_SUCCESS Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_OUTPUT_RUN_STATUS_SUCCESS_MSG), vbOKOnly + vbInformation, PRODUCT_MEDIUMNAME
  End If
  
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonHedersonMA_SpinUp()
  If userOptions.X11_TRENDMA < 101 Then
    txtHendersonMA.value = userOptions.X11_TRENDMA + 2
  End If
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonHedersonMA_SpinDown()
  If userOptions.X11_TRENDMA > 4 Then
    txtHendersonMA.value = userOptions.X11_TRENDMA - 2
  End If
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub



Private Sub TempUDPrioAdjustCheckBox_Click()
  userOptions.TEMP_PRIOR_ENABLED = Me.TempUDPrioAdjustCheckBox.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub TempUserAdjustmentRefEdit_Change()
  userOptions.TEMP_PRIOR_DATA = Me.TempUserAdjustmentRefEdit.value
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtHendersonMA_Change()
  Dim callValidOld As Boolean
  
  If Len(txtHendersonMA.value) > 0 Then
    If txtHendersonMA.value > 1 And txtHendersonMA.value <= 101 And (txtHendersonMA.value Mod 2) Then
      userOptions.X11_TRENDMA = Me.txtHendersonMA.value
    Else
      callValidOld = callValidateForm
      callValidateForm = False
      txtHendersonMA.value = userOptions.X11_TRENDMA
      callValidateForm = callValidOld
    End If
  Else
      callValidOld = callValidateForm
      callValidateForm = False
      txtHendersonMA.value = userOptions.X11_TRENDMA
      callValidateForm = callValidOld
  End If
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub txtSEATSMaxLBQStat_Change()
  Dim callValidStatus As Boolean
  If Len(Me.txtSEATSMaxLBQStat.value) > 0 Then
    If IsNumeric(Me.txtSEATSMaxLBQStat.value) And _
       Me.txtSEATSMaxLBQStat.value > 0 Then
      
      userOptions.SEATS_MAX_LJB_QSTAT = Me.txtSEATSMaxLBQStat.value
    Else
      callValidStatus = callValidateForm
      callValidateForm = False
      Me.txtSEATSMaxLBQStat.value = userOptions.SEATS_MAX_LJB_QSTAT
      callValidateForm = callValidStatus
    End If
    
    isDirty = True
    If callValidateForm = True Then
      Call validateForm
    End If
  End If
End Sub

Private Sub txtX11SigmaLLimit_Change()
  If Len(txtX11SigmaLLimit.value) > 0 Then
    userOptions.X11_OUTLIER_SIGMA_LL = txtX11SigmaLLimit.value
    
    isDirty = True
    If callValidateForm = True Then
      Call validateForm
    End If
  End If
End Sub

Private Sub txtX11SigmaULimit_Change()
  If Len(txtX11SigmaULimit.value) > 0 Then
    userOptions.X11_OUTLIER_SIGMA_UL = txtX11SigmaULimit.value
    
    isDirty = True
    If callValidateForm = True Then
      Call validateForm
    End If
  End If
End Sub


Private Sub UserdefinedCheckBox_Click()
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub UserForm_Initialize()
  Dim myRange As Object
  Dim sztext As String
  
  On Error GoTo ErrHdler
    
  Set userOptions = New X13ARIMASEATSModelUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_FRM_CAPTION)
  
  Me.MultiPage1.Pages("InputPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUT_PAGE_CAPTION)
  Me.MultiPage1.Pages("InputPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUT_PAGE_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  LabelStartDate.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_START_DATE_LABEL_CAPTION)
  LabelStartDate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_START_DATE_LABEL_HELPTIP)
  RefStartDateEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_START_DATE_LABEL_HELPTIP)
  
  LabelPeriod.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PERIOD_LABEL_CAPTION)
  LabelPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PERIOD_LABEL_HELPTIP)
  cmbxPeriod.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PERIOD_LABEL_HELPTIP)
  
  chnbxStockData.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_STOCKDATA_LABEL_CAPTION)
  chnbxStockData.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_STOCKDATA_LABEL_HELPTIP)
  
  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutputRange.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  Me.MultiPage1.Pages("TransformPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_TRANSFORM_PAGE_CAPTION)
  Me.MultiPage1.Pages("TransformPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_PAGE_HELPTIP)
  
  TransformFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_FRAME_CAPTION)
  TransformFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_FRAME_HELPTIP)
  
  optNoTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_NONE_CAPTION)
  optNoTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_NONE_HELPTIP)
  
  optAutoTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_AUTO_CAPTION)
  optAutoTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_AUTO_HELPTIP)
  
  optLogTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_LOG_CAPTION)
  optLogTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_LOG_HELPTIP)
  
  optSqrtTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_SQRT_CAPTION)
  optSqrtTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_SQRT_HELPTIP)
  
  optInverseTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_INV_CAPTION)
  optInverseTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_INV_HELPTIP)
  
  optLogisticTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_LOGIST_CAPTION)
  optLogisticTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_LOGIST_HELPTIP)
  
  optBoxCoxTransform.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_BOXCOX_CAPTION)
  optBoxCoxTransform.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_BOXCOX_HELPTIP)
  ' Txt Field
  BoxCoxPowerParamTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_TRANSFORM_POWER_PARAM_LABEL_HELPTIP)
  
  PriorAdjustmentFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_FRAME_CAPTION)
  PriorAdjustmentFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_FRAME_HELPTIP)
  
  LOMCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LOM_CAPTION)
  LOMCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LOM_HELPTIP)
  
  LOQCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LOQ_CAPTION)
  LOQCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LOQ_HELPTIP)
  
  LEAPYRCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LEAPYR_CAPTION)
  LEAPYRCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_LEAPYR_HELPTIP)
  
  UserdefinedCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_CAPTION)
  UserdefinedCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_HELPTIP)
  
  UserdefinedPriorAdjustFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_CUSTOM_PRIOR_ADJUST_FRAME_CAPTION)
  UserdefinedPriorAdjustFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_CUSTOM_PRIOR_ADJUST_FRAME_HELPTIP)
  
  TempUDPrioAdjustCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_TEMP_CAPTION)
  TempUDPrioAdjustCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_TEMP_HELPTIP)
  TempUserAdjustmentRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_TEMP_HELPTIP)
  
  optTempCustomAdjustRatio.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_CAPTION)
  optTempCustomAdjustRatio.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_HELPTIP)

  optTempCustomAdjustPct.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_CAPTION)
  optTempCustomAdjustPct.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_HELPTIP)
  
  optTempCustomAdjustDiff.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_CAPTION)
  optTempCustomAdjustDiff.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_HELPTIP)
  
  PermUDPrioAdjustCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PERM_CAPTION)
  PermUDPrioAdjustCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PERM_HELPTIP)
  PermUserAdjustmentRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PERM_HELPTIP)

  optPermCustomAdjustRatio.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_CAPTION)
  optPermCustomAdjustRatio.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_HELPTIP)

  optPermCustomAdjustPct.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_CAPTION)
  optPermCustomAdjustPct.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_HELPTIP)
  
  optPermCustomAdjustDiff.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_CAPTION)
  optPermCustomAdjustDiff.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_HELPTIP)
  
  ' Seasonal Adjustment Page
  ' SAPg
  Me.MultiPage1.Pages("SAPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_PAGE_CAPTION)
  Me.MultiPage1.Pages("SAPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_PAGE_HELPTIP)
  
  ' Seasonal Adjustment Page
  optNoSeasonalAdjust.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_NONE_LABEL)
  optNoSeasonalAdjust.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_NONE_HELPTIP)
  
  optX11SeasonalAdj.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_LABEL)
  optX11SeasonalAdj.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HELPTIP)
  
  ' X11 Seasonal Adjustment Tab
  Me.MultiPage3.Pages("x11SAPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_LABEL)
  Me.MultiPage3.Pages("x11SAPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HELPTIP)
  
  Label1X11Options.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_LABEL)
  Label1X11Options.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_HELPTIP)
  
  ' X11 Filter options and mode
  cmbX11FilterOptions.Clear
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x1_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x3_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x5_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x9_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x15_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_STABLE_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_DEFAULT_ITEM)
  cmbX11FilterOptions.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_MSR_ITEM)
  cmbX11FilterOptions.ListIndex = 0
  
  LabelX11Mode.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_CAPTION)
  LabelX11Mode.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_HELPTIP)
  cmbX11Mode.Clear
  cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_MULT_ITEM) ' "mult"
  cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_ADD_ITEM)
  cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_PSEUDOADD_ITEM)
  cmbX11Mode.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_MODE_LOGADD_ITEM)
  cmbX11Mode.ListIndex = 0
  
  FrameHenderson.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_FRAME)
  FrameHenderson.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_FRAME_HELPTIP)
  
  chkHendersonMAAutoSelect.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_AUTO_LABEL)
  chkHendersonMAAutoSelect.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_AUTO_HELPTIP)
  
  LabelHendersonMA.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_LABEL)
  LabelHendersonMA.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_HELPTIP)
  txtHendersonMA.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_HELPTIP)
  SpinButtonHedersonMA.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_HELPTIP)
  
  X11ExtremeValuesFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_LIMITS_FRAME)
  X11ExtremeValuesFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_LIMITS_FRAME)
  X11SigmaLLimitLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_LLIMIT_LABEL)
  X11SigmaLLimitLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_LLIMIT_HELPTIP)
  txtX11SigmaLLimit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_LLIMIT_HELPTIP)
  
  X11SigmaULimitLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_ULIMIT_LABEL)
  X11SigmaULimitLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_ULIMIT_HELPTIP)
  txtX11SigmaULimit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_ULIMIT_HELPTIP)
  
  ' SEATS Seasonal Adjustment Tab
  Me.MultiPage3.Pages("seatsSAPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_LABEL)
  Me.MultiPage3.Pages("seatsSAPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_HELPTIP)
  
  optSEATS.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_LABEL)
  optSEATS.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_HELPTIP)
  
  chkSEATSHPCycle.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_HPCYCLE_LABEL)
  chkSEATSHPCycle.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_HPCYCLE_HELPTIP)
  DecomposalApproxCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_DECOMPOSE_APPROX_LABEL)
  DecomposalApproxCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_DECOMPOSE_APPROX_HELPTIP)
  chkSEATSStationarySeasonal.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_ACCEPT_STATIONARY_LABEL)
  chkSEATSStationarySeasonal.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_ACCEPT_STATIONARY_HELPTIP)
  
  LabelLBQStat.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_LIMIT_LJQSTAT_LABEL)
  LabelLBQStat.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_LIMIT_LJQSTAT_HELPTIP)
  txtSEATSMaxLBQStat.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_LIMIT_LJQSTAT_HELPTIP)
  
  finiteFilterCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_FINITE_FILTER_LABEL)
  finiteFilterCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_SEATS_FINITE_FILTER_HELPTIP)
  
  ' X11 Regression setting in the Seasonal Adjustment Tab
  Me.MultiPage3.Pages("regSAPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_PAGE)
  Me.MultiPage3.Pages("regSAPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_PAGE_HELPTIP)
  
  SAdjX11RegPredefFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_PRIOR_PREDEFINED_FRAME)
  SAdjX11RegPredefFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_PRIOR_PREDEFINED_FRAME_HELPTIP)
  
  SAdjX11RegTradingFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_FRAME)
  SAdjX11RegTradingFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_FRAME_HELPTIP)
  
  'SAdjRegTradingDaysChkbx
  SAdjX11RegTradingDayOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_LABEL)
  SAdjX11RegTradingDayOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_HELPTIP)
  
  SAdjX11RegTradingDaysCoefOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_COEFF_LABEL)
  SAdjX11RegTradingDaysCoefOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_COEFF_HELPTIP)
  
  SAdjX11RegStockDayOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_LABEL)
  SAdjX11RegStockDayOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_HELPTIP)
  
  SAdjX11RegOneCoefStockDayOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_ONE_COEF_STOCK_DAY_LABEL)
  SAdjX11RegOneCoefStockDayOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_ONE_COEF_STOCK_DAY_HELPTIP)
  
  SAdjX11RegStockDayTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_VALUE_HELPTIP)
  SAdjX11RegStockDaySpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_VALUE_SPIN_HELPTIP)
  
  SAdjX11RegDailyWeightsLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_WGHT_LABEL)
  SAdjX11RegDailyWeightsLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_WGHT_HELPTIP)
  SAdjX11RegDailyWeightRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_WGHT_HELPTIP)
  
  ' Easter Holiday
  SAdjX11RegEasterFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_EASTER_FRAME)
  SAdjX11RegEasterFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_REGRESSION_EASTER_FRAME_HELPTIP)
  
  SAdjX11RegEasterCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_LABEL)
  SAdjX11RegEasterCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_HELPTIP)
  
  SAdjX11RegEasterDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  SAdjX11RegEasterDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_DAYS_HELPTIP)
  SAdjX11RegEasterDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_DAYS_HELPTIP)
  SAdjX11RegEasterDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_DAYS_HELPTIP)
  
  SAdjX11RegEasterCanadaCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_LABEL)
  SAdjX11RegEasterCanadaCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_HELPTIP)
  
  SAdjX11RegEasterCanadaDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  SAdjX11RegEasterCanadaDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_DAYS_HELPTIP)
  SAdjX11RegEasterCanadaDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_DAYS_HELPTIP)
  SAdjRegEasterCanadaDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_DAYS_HELPTIP)
  
  SAdjX11RegLaborCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_LABOR_DAY_LABEL)
  SAdjX11RegLaborCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_LABOR_DAY_HELPTIP)
  
  SAdjX11RegLaborDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  SAdjX11RegLaborDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_LABORDAY_DAYS_HELPTIP)
  SAdjX11RegLaborDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_LABORDAY_DAYS_HELPTIP)
  SAdjX11RegLaborDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_LABORDAY_DAYS_HELPTIP)
  
  SAdX11RegThanksgivingCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_LABEL)
  SAdX11RegThanksgivingCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_HELPTIP)
  SAdjX11RegThanksgivingDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  SAdjX11RegThanksgivingDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  SAdjX11RegThanksgivingDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  SAdjX11RegThanksgivingDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  
  SAdjX11RegAdditiveOutlierCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_AOUTLIERS_LABEL)
  SAdjX11RegAdditiveOutlierCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_AOUTLIERS_HELPTIP)
  SAdjX11RegAdditiveOutlierRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_AOUTLIERS_HELPTIP)
  
  ' X11 Seasonal Adjustment Tab
  Me.MultiPage3.Pages("userdefSAPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_PAGE)
  Me.MultiPage3.Pages("userdefSAPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_PAGE_HELPTIP)
  
  SAdjUDEventsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_FRAME_LABEL)
  SAdjUDEventsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_FRAME_HELPTIP)
  
  SAdjUDAddEventVariableCommandButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_ADD_LABEL)
  SAdjUDAddEventVariableCommandButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_ADD_HELPTIP)
  
  SAdjUDRemoveEventVariableCommandButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_RMV_LABEL)
  SAdjUDRemoveEventVariableCommandButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_RMV_HELPTIP)
  
  SAdjUDEventVariablesListBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_LIST_HELPTIP)
  
  SAdjUDCustomVariableLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_CUSTOM_LABEL)
  SAdjUDCustomVariableLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_CUSTOM_HELPTIP)
  SAdjUDCustomVariableRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_UDVAR_CUSTOM_HELPTIP)
  
  
  ' ARIMA Tab
  Me.MultiPage1.Pages("ModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_PAGE_CAPTION)
  Me.MultiPage1.Pages("ModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_PAGE_HELPTIP)
  
  optModelNone.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_NONE_CAPTION)
  optModelNone.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_NONE_HELPTIP)
  
  optARIMASpecifyOrder.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_MANUAL_CAPTION)
  optARIMASpecifyOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_MANUAL_HELPTIP)
  
  optARIMAAutoSelect.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_AUTO_CAPTION)
  optARIMAAutoSelect.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MODEL_AUTO_HELPTIP)
  
  ' Auto sub-page
  Me.MultiPage2.Pages("AutoModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_PAGE)
  Me.MultiPage2.Pages("AutoModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_PAGE_HELPTIP)
  
  ARIMAAutoX11OptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_LABEL)
  ARIMAAutoX11OptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_HELPTIP)
  
  ARIMAAutoX11OutOfSampleErrorCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_OUTSAMPLE_LABEL)
  ARIMAAutoX11OutOfSampleErrorCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_OUTSAMPLE_HELPTIP)
  
  ARIMAAutoX11ModeLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_MODE_LABEL)
  ARIMAAutoX11ModeLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_MODE_HELPTIP)
  ARIMAAutoX11ModeComboBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_MODE_HELPTIP)
  
  ARIMAAutoX11MethodLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_METHOD_LABEL)
  ARIMAAutoX11MethodLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_METHOD_HELPTIP)
  ARIMAAutoX11MethodComboBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_METHOD_HELPTIP)
  
  ARIMAAutoX11ThresholdLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_THRESHOLD_LABEL)
  ARIMAAutoX11ThresholdLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_THRESHOLD_HELPTIP)
  ARIMAAutoX11ThresholdTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_THRESHOLD_HELPTIP)
  
  ARIMAAutoTRAMOOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_LABEL)
  ARIMAAutoTRAMOOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_HELPTIP)
  
  ARIMAAutoTRAMOConstantTermCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_CONSTANT_LABEL)
  ARIMAAutoTRAMOConstantTermCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_CONSTANT_HELPTIP)
  
  ARIMAAutoTRAMOMixedModelsCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_MIXED_LABEL)
  ARIMAAutoTRAMOMixedModelsCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_MIXED_HELPTIP)
  
  ARIMAAutoTRAMOFixDifferenceOrdersCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_LABEL)
  ARIMAAutoTRAMOFixDifferenceOrdersCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_HELPTIP)
  
  ARIMAAutoTRAMORegularDifferenceLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_REG_LABEL)
  ARIMAAutoTRAMORegularDifferenceLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_REG_HELPTIP)
  ARIMAAutoTRAMORegularDifferenceTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_REG_HELPTIP)
  
  ARIMAAutoTRAMOSeasonalDifferenceLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_SEASONAL_LABEL)
  ARIMAAutoTRAMOSeasonalDifferenceLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_SEASONAL_HELPTIP)
  ARIMAAutoTRAMOSeasonalDifferenceTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_SEASONAL_HELPTIP)
  
  ' Auto sub-page
  Me.MultiPage2.Pages("ManualModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_PAGE)
  Me.MultiPage2.Pages("ManualModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_PAGE_HELPTIP)
  
  labelP.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_P_LABEL)
  labelP.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_P_HELPTIP)
  txtARIMAOrderp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_P_HELPTIP)
  
  LabelD.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_D_LABEL)
  LabelD.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_D_HELPTIP)
  txtARIMAOrderd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_D_HELPTIP)
  
  LabelQ.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_Q_LABEL)
  LabelQ.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_Q_HELPTIP)
  txtARIMAOrderq.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_Q_HELPTIP)
  
  LabelPP.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_PP_LABEL)
  LabelPP.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_PP_HELPTIP)
  txtARIMAOrderpp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_PP_HELPTIP)
  
  LabelDD.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_DD_LABEL)
  LabelDD.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_DD_HELPTIP)
  txtARIMAOrderdd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_DD_HELPTIP)
  
  LabelQQ.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_QQ_LABEL)
  LabelQQ.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_QQ_HELPTIP)
  txtARIMAOrderqq.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_QQ_HELPTIP)
  
  ARIMAManualNonSeasonalLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_NONSEASONAL_LABEL)
  ARIMAManualNonSeasonalLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_NONSEASONAL_HELPTIP)
  
  ARIMAManualSeasonalLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_SEASONAL_LABEL)
  ARIMAManualSeasonalLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_SEASONAL_HELPTIP)
  
  ARIMAManualInitialValuesCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INITIALIZE_VALUES_LABEL)
  ARIMAManualInitialValuesCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INITIALIZE_VALUES_HELPTIP)
  
  ARIMAManualNonSeasonalARLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_AR_VALUES_LABEL)
  ARIMAManualNonSeasonalARLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_AR_VALUES_HELPTIP)
  ARIMAManualNonSeasonalARRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_AR_VALUES_HELPTIP)
  
  ARIMAManualNonSeasonalMALabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_MA_VALUES_LABEL)
  ARIMAManualNonSeasonalMALabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_MA_VALUES_HELPTIP)
  ARIMAManualNonSeasonalMARefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_MA_VALUES_HELPTIP)
  
  ARIMAManualSeasonalARLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_AR_VALUES_LABEL)
  ARIMAManualSeasonalARLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_AR_VALUES_HELPTIP)
  ARIMAManualSeasonalARRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_AR_VALUES_HELPTIP)
  
  ARIMAManualSeasonalMALabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_MA_VALUES_LABEL)
  ARIMAManualSeasonalMALabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_MA_VALUES_HELPTIP)
  ARIMAManualSeasonalMARefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_MA_VALUES_HELPTIP)
  
  ' Auto sub-page
  Me.MultiPage2.Pages("RegModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_PAGE)
  Me.MultiPage2.Pages("RegModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_PAGE_HELPTIP)
  
  ARIMARegressionConstantTrendCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_CONST_TREND_LABEL)
  ARIMARegressionConstantTrendCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_CONST_TREND_HELPTIP)
  
  ARIMARegressionSeasonalCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SEASONAL_LABEL)
  ARIMARegressionSeasonalCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SEASONAL_HELPTIP)
  
  ARIMARegressionSeasonalFixedOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_FIXED_SEASONAL_LABEL)
  ARIMARegressionSeasonalFixedOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_FIXED_SEASONAL_HELPTIP)
  
  ARIMARegressionSeasonalTrigeometryOptionButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SINCOS_SEASONAL_LABEL)
  ARIMARegressionSeasonalTrigeometryOptionButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SINCOS_SEASONAL_HELPTIP)
  
  ARIMARegressionLOMCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LOM_LABEL)
  ARIMARegressionLOMCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LOM_HELPTIP)
  
  ARIMARegressionLOQCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LOQ_LABEL)
  ARIMARegressionLOQCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LOQ_HELPTIP)
  
  ARIMARegressionLPYRCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LPYR_LABEL)
  ARIMARegressionLPYRCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LPYR_HELPTIP)
  
  ARIMARegressionTradingDayFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LABEL)
  ARIMARegressionTradingDayFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_HELPTIP)
  
  ARIMARegressionTradingDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LABEL)
  ARIMARegressionTradingDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_HELPTIP)
  
  ARIMARegressionOneCoefTradingDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_ONECOEF_LABEL)
  ARIMARegressionOneCoefTradingDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_ONECOEF_HELPTIP)
  
  ARIMARegressionLPYRTradingDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LPYR_LABEL)
  ARIMARegressionLPYRTradingDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LPYR_HELPTIP)
  
  ARIMARegressionStockDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_LABEL)
  ARIMARegressionStockDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_HELPTIP)
  
  ARIMARegressionOneCoefStockDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_ONECOEF_LABEL)
  ARIMARegressionOneCoefStockDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_ONECOEF_HELPTIP)
  
  ARIMARegressionStockDayLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_LABEL)
  ARIMARegressionStockDayLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_HELPTIP)
  ARIMARegressionStockDayTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_HELPTIP)
  ARIMARegressionStockDaySpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_HELPTIP)
  
  ARIMARegressionEasterFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_FRAME)
  ARIMARegressionEasterFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_FRAME_HELPTIP)
  
  ARIMARegressionEasterCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_LABEL)
  ARIMARegressionEasterCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_HELPTIP)
  
  ARIMARegressionEasterDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  ARIMARegressionEasterDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_DAYS_HELPTIP)
  ARIMARegressionEasterDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_DAYS_HELPTIP)
  ARIMARegressionEasterDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_DAYS_HELPTIP)
  
  ARIMARegressionCanadaEasterDaysCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_LABEL)
  ARIMARegressionCanadaEasterDaysCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_HELPTIP)
  
  ARIMARegressionCanadaEasterDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  ARIMARegressionCanadaEasterDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_DAYS_HELPTIP)
  ARIMARegressionCanadaEasterDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_DAYS_HELPTIP)
  ARIMARegressionCanadaEasterDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_DAYS_HELPTIP)

  ARIMARegressionLaborDayCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_LABEL)
  ARIMARegressionLaborDayCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_HELPTIP)
  
  ARIMARegressionLaborDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  ARIMARegressionLaborDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_DAYS_HELPTIP)
  ARIMARegressionLaborDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_DAYS_HELPTIP)
  ARIMARegressionLaborDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_DAYS_HELPTIP)
  
  
  ARIMARegressionThanksgivingCheckBox.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_LABEL)
  ARIMARegressionThanksgivingCheckBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_HELPTIP)
  ARIMARegressionThanksgivingDaysLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL)
  ARIMARegressionThanksgivingDaysLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  ARIMARegressionThanksgivingDaysTextBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  ARIMARegressionThanksgivingDaysSpinButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_DAYS_HELPTIP)
  
  ' User Variables
  Me.MultiPage2.Pages("userVarModelPg").Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_PAGE)
  Me.MultiPage2.Pages("userVarModelPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_PAGE_HELPTIP)
  
  ARIMAUserVarEventsFrame.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_FRAME)
  ARIMAUserVarEventsFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_FRAME_HELPTIP)
  
  ARIMAUserVarAddEventCommandButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_ADD_LABEL)
  ARIMAUserVarAddEventCommandButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_ADD_HELPTIP)
  
  ARIMAUserVarRemoveEventCommandButton.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_RMV_LABEL)
  ARIMAUserVarRemoveEventCommandButton.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_RMV_HELPTIP)
  
  ARIMAUserVarEventsListBox.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_LIST_HELPTIP)
  
  ARIMAUserVarCustomVarsLabel.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_CUSTOM_LABEL)
  ARIMAUserVarCustomVarsLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_CUSTOM_HELPTIP)
  ARIMAUserVarCustomVarsRefEdit.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_ARIMA_UDVARS_CUSTOM_HELPTIP)
  
  
  
  
  
  '''''''''''''''''''''
  cmdHelpBtn.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdHelpBtn.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  RunSpecCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X1AS_RUN_CAPTION)
  RunSpecCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X1AS_RUN_HELPTIP)
  
  applyCmd.Caption = MSGAPI.getLocaleString(IDS_UI_X13AS_APPLY_CAPTION)
  applyCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_X13AS_APPLY_HELPTIP)
  
  CloseCmd.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CLOSE_CAPTION)
  CloseCmd.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CLOSE_HELPTIP)
  
  
  callValidateForm = False
  
  ' set the dirty flag to false
  isDirty = False
    
  ' Initialize the combobox
  cmbxPeriod.Clear
  cmbxPeriod.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_PERIOD_MONTHLY_LABEL_CAPTION)   '("Monthly")
  cmbxPeriod.AddItem MSGAPI.getLocaleString(IDS_UI_X13AS_PERIOD_QUARTERLY_LABEL_CAPTION)   '("Quarterly")
  If userOptions.DATA_PERIOD = 12 Then
    cmbxPeriod.ListIndex = 0
  Else
    cmbxPeriod.ListIndex = 1
  End If
  
  
  ' Fill the forecast years
  cmForecastYears.Clear
  cmForecastYears.AddItem "1 year"
  cmForecastYears.AddItem "2 years"
  cmForecastYears.AddItem "3 years"
  cmForecastYears.AddItem "4 years"
  cmForecastYears.AddItem "5 years"
  cmForecastYears.ListIndex = 0
  
  
  
  Call ResetToDefault
  Call validateForm
  
  ' Parse the formula if any
  If Len(ActiveCell.formula) > 0 Then
    If Len(ActiveCell.formula) > 8 And Left(ActiveCell.formula, 6) = "=X13AS" Then
      strModelStr = ActiveCell.value
      
      ' Initialize the name of the model
      userOptions.X13AMODEL_NAME = strModelStr
      ' force calculation to update the add-in
      ActiveCell.Calculate
      
      ' Crack the formula to initialize the object
      Call userOptions.FromX13Formula(myGeneralUO, myMissingValueUO, ActiveCell.formula)
    Else
      ' "The formula in the active cell is not empty, and it is not a formula generated by an X-12 Model, please select another cell before you use this function."
      MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_INVALID_FORMULA_MSG), vbOKOnly Or vbExclamation, PRODUCT_MEDIUMNAME
      Unload Me
      Exit Sub
    End If
  Else
    strModelStr = ""
  End If
  
  'Initialize the input data
  RefInputArray.value = myGeneralUO.DEPENDENT_RANGE
  chkAscending.value = myGeneralUO.ASCENDING
  chnbxStockData.value = myGeneralUO.STOCK_DATA
  RefStartDateEdit.value = userOptions.START_DATE
  
  If userOptions.DATA_PERIOD = 12 Then
    cmbxPeriod.ListIndex = 0  'Monthly
  Else
    cmbxPeriod.ListIndex = 1  'Quarter
  End If
  
  optNoTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_NONE)
  optAutoTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_AUTO)
  optLogTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_LOG)
  optSqrtTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_SQRT)
  optInverseTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_INV)
  optLogisticTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_LOGIST)
  optBoxCoxTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX)
  
  If userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX Then
    If Not IsQNaN(userOptions.POWER_PARAM) Then
      BoxCoxPowerParamTextBox.value = userOptions.POWER_PARAM
    Else
      BoxCoxPowerParamTextBox.value = ""
    End If
  End If
  
  LOMCheckBox.value = userOptions.LOM_PRIOR_ADJ
  LOQCheckBox.value = userOptions.LOQ_PRIOR_ADJ
  LEAPYRCheckBox.value = userOptions.LPYR_PRIOR_ADJ
  
  TempUDPrioAdjustCheckBox.value = userOptions.TEMP_PRIOR_ENABLED
  TempUserAdjustmentRefEdit.value = userOptions.TEMP_PRIOR_DATA
  optTempCustomAdjustRatio.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO)
  optTempCustomAdjustPct.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT)
  optTempCustomAdjustDiff.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF)
  
  PermUDPrioAdjustCheckBox.value = userOptions.PERM_PRIOR_ENABLED
  PermUserAdjustmentRefEdit.value = userOptions.PERM_PRIOR_DATA
  optPermCustomAdjustRatio.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO)
  optPermCustomAdjustPct.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT)
  optPermCustomAdjustDiff.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF)
  
  UserdefinedCheckBox.value = userOptions.TEMP_PRIOR_ENABLED Or userOptions.PERM_PRIOR_ENABLED
  
  ' Populate the Seasonal adjustment page
  optNoSeasonalAdjust.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_NONE)
  optX11SeasonalAdj.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_X11)
  
  cmbX11FilterOptions.ListIndex = userOptions.X11_SEASONALMA
  cmbX11Mode.ListIndex = userOptions.X11_MODE
  
  If userOptions.X11_TRENDMA > 0 And userOptions.X11_TRENDMA <= 101 Then
    txtHendersonMA.value = userOptions.X11_TRENDMA
  Else
    txtHendersonMA.value = ""
  End If
  
  chkHendersonMAAutoSelect = userOptions.X11_TRENDMA_AUTO
  
  If Not IsQNaN(userOptions.X11_OUTLIER_SIGMA_LL) Then
    txtX11SigmaLLimit.value = userOptions.X11_OUTLIER_SIGMA_LL
  Else
    txtX11SigmaLLimit.value = ""
  End If
  
  If Not IsQNaN(userOptions.X11_OUTLIER_SIGMA_UL) Then
    txtX11SigmaULimit.value = userOptions.X11_OUTLIER_SIGMA_UL
  Else
    txtX11SigmaULimit.value = ""
  End If
  
  optSEATS.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_SEATS)
  
  chkSEATSHPCycle.value = userOptions.SEATS_CALC_HPCYCLE
  DecomposalApproxCheckBox.value = userOptions.SEATS_ADMISSABLE_APPROX
  chkSEATSStationarySeasonal.value = userOptions.SEATS_ACCEPT_SEASONAL_STATIONARY
  txtSEATSMaxLBQStat.value = userOptions.SEATS_MAX_LJB_QSTAT
  finiteFilterCheckBox.value = userOptions.SEATS_FINITE_SAMPLE_FILTERS
  
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus

ErrHdler:
    Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myMissingValueUO = Nothing
  Set myGeneralUO = Nothing
End Sub


Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Keep the input data range
  szInput = myGeneralUO.DEPENDENT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myGeneralUO.DEPENDENT_RANGE = szInput
  
  RefOutputRange.value = myGeneralUO.OUTPUT_RANGE
  chkAscending.value = myGeneralUO.ASCENDING
  chnbxStockData.value = myGeneralUO.STOCK_DATA
  
  ' Transform Tab
  optNoTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_NONE)
  optAutoTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_AUTO)
  optLogTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_LOG)
  optSqrtTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_SQRT)
  optInverseTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_INV)
  optLogisticTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_LOGIST)
  optBoxCoxTransform.value = (userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX)
  
  If userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX And _
     Not IsQNaN(userOptions.POWER_PARAM) Then
    BoxCoxPowerParamTextBox.value = userOptions.POWER_PARAM
  Else
    BoxCoxPowerParamTextBox.value = ""
  End If
  
  LOMCheckBox.value = userOptions.LOM_PRIOR_ADJ
  LOQCheckBox.value = userOptions.LOQ_PRIOR_ADJ
  LEAPYRCheckBox.value = userOptions.LPYR_PRIOR_ADJ
  
  TempUDPrioAdjustCheckBox.value = userOptions.TEMP_PRIOR_ENABLED
  TempUserAdjustmentRefEdit.value = userOptions.TEMP_PRIOR_DATA
  optTempCustomAdjustRatio.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO)
  optTempCustomAdjustPct.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT)
  optTempCustomAdjustDiff.value = (userOptions.TEMP_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF)
  
  PermUDPrioAdjustCheckBox.value = userOptions.PERM_PRIOR_ENABLED
  PermUserAdjustmentRefEdit.value = userOptions.PERM_PRIOR_DATA
  optPermCustomAdjustRatio.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_RATIO)
  optPermCustomAdjustPct.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_PCT)
  optPermCustomAdjustDiff.value = (userOptions.PERM_PRIOR_TYPE = X13UDPRIOR_ADJ_DIFF)
  
  UserdefinedCheckBox.value = userOptions.TEMP_PRIOR_ENABLED Or userOptions.PERM_PRIOR_ENABLED
  
  
  ' Populate the Seasonal adjustment page
  optNoSeasonalAdjust.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_NONE)
  optX11SeasonalAdj.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_X11)
  
  cmbX11Mode.ListIndex = userOptions.X11_MODE
  cmbX11FilterOptions.ListIndex = userOptions.X11_SEASONALMA
  
  If IsQNaN(userOptions.X11_TRENDMA) Then
    chkHendersonMAAutoSelect.value = True
  Else
    chkHendersonMAAutoSelect = False
    txtHendersonMA.value = userOptions.X11_TRENDMA
  End If
  
  If Not IsQNaN(userOptions.X11_OUTLIER_SIGMA_LL) Then
    txtX11SigmaLLimit.value = userOptions.X11_OUTLIER_SIGMA_LL
  Else
    txtX11SigmaLLimit.value = ""
  End If
  
  If Not IsQNaN(userOptions.X11_OUTLIER_SIGMA_UL) Then
    txtX11SigmaULimit.value = userOptions.X11_OUTLIER_SIGMA_UL
  Else
    txtX11SigmaULimit.value = ""
  End If
  
  optSEATS.value = (userOptions.X13AS_SEASONAL_ADJUST = X13AS_SA_SEATS)
  
  chkSEATSHPCycle.value = userOptions.SEATS_CALC_HPCYCLE
  DecomposalApproxCheckBox.value = userOptions.SEATS_ADMISSABLE_APPROX
  chkSEATSStationarySeasonal.value = userOptions.SEATS_ACCEPT_SEASONAL_STATIONARY
  txtSEATSMaxLBQStat.value = userOptions.SEATS_MAX_LJB_QSTAT
  finiteFilterCheckBox.value = userOptions.SEATS_FINITE_SAMPLE_FILTERS
  
Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub


Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
  
  On Error GoTo ErrHdler
  ' (1) Page Input
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)
  chkAscending.enabled = dataAvailable
  chnbxStockData.enabled = dataAvailable
  
  LabelStartDate.enabled = dataAvailable
  RefStartDateEdit.enabled = dataAvailable
  
  LabelPeriod.enabled = dataAvailable
  cmbxPeriod.enabled = dataAvailable
  
  OutputRangeTxtLabel.enabled = dataAvailable
  RefOutputRange.enabled = dataAvailable

  ' (2) For other purposes, let's define dataAvailable
  dataAvailable = dataAvailable And Utilities.isCellRangeValid(RefStartDateEdit)

  ' Check the bins algo selection
  Me.MultiPage1.Pages("TransformPg").enabled = dataAvailable
  TransformFrame.enabled = dataAvailable
  
  ' TODO: disable all if leap year adjustment is chosen
  ' TODO: Check the range of values for the input data
  optNoTransform.enabled = dataAvailable
  If Not (IsQNaN(myGeneralUO.DEPENDENT_MINVAL) Or IsQNaN(myGeneralUO.DEPENDENT_MAXVAL)) Then
    optAutoTransform.enabled = dataAvailable And (myGeneralUO.DEPENDENT_MINVAL > 0)
    optLogTransform.enabled = dataAvailable And (myGeneralUO.DEPENDENT_MINVAL > 0)
    optSqrtTransform.enabled = dataAvailable And (myGeneralUO.DEPENDENT_MINVAL >= 0)
    optInverseTransform.enabled = dataAvailable And (myGeneralUO.DEPENDENT_MINVAL * myGeneralUO.DEPENDENT_MAXVAL > 0)
    optLogisticTransform.enabled = dataAvailable And (myGeneralUO.DEPENDENT_MINVAL > 0) And (myGeneralUO.DEPENDENT_MAXVAL < 1)
    optBoxCoxTransform.enabled = dataAvailable
    
    If dataAvailable And (userOptions.TRANFORM_TYPE = X13TRANSFOR_BOXCOX) Then
      'BoxCoxPowerParamLabel.enabled = True
      BoxCoxPowerParamTextBox.enabled = True
      BoxCoxPowerParamTextBox.Locked = False
      BoxCoxPowerParamTextBox.BackColor = vbWhite
      BoxCoxPowerParamTextBox.ForeColor = optBoxCoxTransform.ForeColor
    Else
      'BoxCoxPowerParamLabel.enabled = False
      BoxCoxPowerParamTextBox.Locked = True
      BoxCoxPowerParamTextBox.enabled = False
      BoxCoxPowerParamTextBox.BackColor = vbButtonFace
      BoxCoxPowerParamTextBox.ForeColor = vbRed
    End If
  End If
  
  LOMCheckBox.enabled = (userOptions.DATA_PERIOD = 12)
  LOQCheckBox.enabled = (userOptions.DATA_PERIOD = 4)
  LEAPYRCheckBox.enabled = (userOptions.TRANFORM_TYPE = X13TRANSFOR_LOG)
  
  UserdefinedPriorAdjustFrame.enabled = UserdefinedCheckBox.value
  TempUserdefinedPriorAdjustFrame.enabled = UserdefinedPriorAdjustFrame.enabled
  PermUserdefinedPriorAdjustFrame.enabled = UserdefinedPriorAdjustFrame.enabled
  
  TempUDPrioAdjustCheckBox.enabled = TempUserdefinedPriorAdjustFrame.enabled
  TempUserAdjustmentRefEdit.enabled = (TempUDPrioAdjustCheckBox.value)
  TempUDTypePrioAdjustFrame.enabled = TempUserAdjustmentRefEdit.enabled
  optTempCustomAdjustRatio.enabled = TempUserAdjustmentRefEdit.enabled
  optTempCustomAdjustPct.enabled = TempUserAdjustmentRefEdit.enabled
  optTempCustomAdjustDiff.enabled = TempUserAdjustmentRefEdit.enabled
  
  PermUDPrioAdjustCheckBox.enabled = PermUserdefinedPriorAdjustFrame.enabled
  PermUserAdjustmentRefEdit.enabled = (PermUDPrioAdjustCheckBox.value)
  PermUDTypePrioAdjustFrame.enabled = PermUserAdjustmentRefEdit.enabled
  optPermCustomAdjustRatio.enabled = PermUserAdjustmentRefEdit.enabled
  optPermCustomAdjustPct.enabled = PermUserAdjustmentRefEdit.enabled
  optPermCustomAdjustDiff.enabled = PermUserAdjustmentRefEdit.enabled
  
  Me.MultiPage1.Pages("SAPg").enabled = dataAvailable
  optNoSeasonalAdjust.enabled = dataAvailable
  optX11SeasonalAdj.enabled = dataAvailable
  
  optSEATS.enabled = dataAvailable
  Me.MultiPage3.Pages("seatsSAPg").enabled = optSEATS.enabled And optSEATS.value
  chkSEATSHPCycle.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled
  DecomposalApproxCheckBox.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled
  chkSEATSStationarySeasonal.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled
  finiteFilterCheckBox.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled
  LabelLBQStat.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled
  txtSEATSMaxLBQStat.enabled = Me.MultiPage3.Pages("seatsSAPg").enabled

  Me.MultiPage3.Pages("x11SAPg").enabled = optX11SeasonalAdj.enabled And optX11SeasonalAdj.value
  Label1X11Options.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  cmbX11FilterOptions.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  LabelX11Mode.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  cmbX11Mode.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  FrameHenderson.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  chkHendersonMAAutoSelect.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  LabelHendersonMA.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  X11ExtremeValuesFrame.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  X11SigmaLLimitLabel.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  txtX11SigmaLLimit.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  X11SigmaULimitLabel.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  txtX11SigmaULimit.enabled = Me.MultiPage3.Pages("x11SAPg").enabled
  
  Me.MultiPage3.Pages("regSAPg").enabled = dataAvailable
  SAdjX11RegPredefFrame.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  SAdjX11RegTradingFrame.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  
  SAdjX11RegTradingDayOptionButton.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  SAdjX11RegTradingDaysCoefOptionButton.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  SAdjX11RegStockDayOptionButton.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  SAdjX11RegOneCoefStockDayOptionButton.enabled = Me.MultiPage3.Pages("regSAPg").enabled
  
  
  
  ' Model (ARIMA) Page
  Me.MultiPage1.Pages("ModelPg").enabled = dataAvailable
  
  
  
  
  Me.MultiPage1.Pages("RegressionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("ModelPg").enabled = dataAvailable
  Me.MultiPage1.Pages("OutliersPg").enabled = dataAvailable
  Me.MultiPage1.Pages("OptionsPg").enabled = dataAvailable
  Me.MultiPage1.Pages("DiagnosisPg").enabled = dataAvailable
  
  ' Do we have an output range specified
  dataAvailable = dataAvailable And _
                  Utilities.isCellRangeValid(RefOutputRange.value)
                  
  applyCmd.enabled = dataAvailable
  RunSpecCmd.enabled = dataAvailable
  openOutputCmd.enabled = dataAvailable
  OpenLogCmd.enabled = dataAvailable
  OpenErrorCmd.enabled = dataAvailable
  OpenSpcFileCmd.enabled = dataAvailable

Cleanup:
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Private Sub RefInputArray_Change()
  myGeneralUO.DEPENDENT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  myGeneralUO.UpdateDependentMinMaxVals

  ' Set the input set to dirty (regenerate the inputs)
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub


Private Sub chkAscending_Click()
  myGeneralUO.ASCENDING = CBool(chkAscending.value)
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub chnbxStockData_Click()
  myGeneralUO.STOCK_DATA = CBool(chnbxStockData.value)
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefStartDateEdit_Change()
  userOptions.START_DATE = Utilities.procInputCellsRange(RefStartDateEdit.value)
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub cmbxPeriod_Change()
  Const sSOURCE As String = "cmbxPeriod_Change"
  
  If cmbxPeriod.ListIndex = 0 Then
    userOptions.DATA_PERIOD = 12
  Else
    userOptions.DATA_PERIOD = 4
  End If
  
  isDirty = True
  If callValidateForm Then
    Call validateForm
  End If
End Sub

Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  isDirty = True
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Attribute VB_Name = "X13ARIMASEATSModelUO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 15913 $
'  $Date: 2016-09-16 21:08:34 -0500 (Fri, 16 Sep 2016) $
'  $Author: mohamad $
'  $Id: X13ARIMASEATSModelUO.cls 15913 2016-09-17 02:08:34Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/X13ARIMASEATSModelUO.cls $
'
Private Const msMODULE As String = "CLASS:X13ARIMASEATSModelUO"

Public Enum X13TRANSFORM_METHOD
    X13TRANSFOR_NONE = 0
    X13TRANSFOR_AUTO = 1
    X13TRANSFOR_LOG = 2
    X13TRANSFOR_SQRT = 3
    X13TRANSFOR_INV = 4
    X13TRANSFOR_LOGIST = 5
    X13TRANSFOR_BOXCOX = 6
End Enum

Public Enum X13UDPRIOR_ADJ_TYPE
    X13UDPRIOR_ADJ_RATIO = 0
    X13UDPRIOR_ADJ_PCT = 1
    X13UDPRIOR_ADJ_DIFF = 2
End Enum

Public Enum X13AS_SA_TYPE
  X13AS_SA_NONE = 0
  X13AS_SA_X11 = 1
  X13AS_SA_SEATS = 2
End Enum

Public Enum X11_MODE_TYPE
    X11_MODE_MULT = 0
    X11_MODE_ADD = 1
    X11_MODE_PSEUDOADD = 2
    X11_MODE_LOGADD = 3
End Enum

Public Enum X11_SEASONALMA_TYPE
    X11_SEASONALMA_3x1 = 0
    X11_SEASONALMA_3x3 = 1
    X11_SEASONALMA_3x5 = 2
    X11_SEASONALMA_3x9 = 3
    X11_SEASONALMA_3x15 = 4
    X11_SEASONALMA_STABLE = 5
    X11_SEASONALMA_DEFAULT = 6
    X11_SEASONALMA_MSR = 7
End Enum


' A unique identifier for the model
Private myModelName As String

' Data File
Private myStartDate As String
Private myPeriod As Integer
Private myTransform As X13TRANSFORM_METHOD
Private myTransofrmPowerParam As Double
Private myLOMCalAdj As Boolean
Private myLOQCalAdj As Boolean
Private myLPYRCalAdj As Boolean

Private myTempUDAdjSel As Boolean
Private myTempUDAdj As String
Private myTempUDAdjType As X13UDPRIOR_ADJ_TYPE

Private myPermUDAdjSel As Boolean
Private myPermUDAdj As String
Private myPermUDAdjType As X13UDPRIOR_ADJ_TYPE

Private mySeasonalAdjustType As X13AS_SA_TYPE
Private myX11Mode As X11_MODE_TYPE
Private mySeasonalMA As X11_SEASONALMA_TYPE
Private myAutoTrendMA As Boolean
Private myTrendMA As Integer
Private mySigmaLL As Double
Private mySigmaUL As Double
Private myHPCycle As Boolean
Private myFiniteSampleFilter As Boolean
Private myDecomposeableApprox As Boolean
Private myAcceptSeasonalStationary As Boolean
Private myMaxLJBOXQStat As Double



Private Sub Class_Initialize()
  ' Initialize the values of the class members
  Const sSOURCE As String = "Class_Initialize"
  
  Call ResetToDefault
End Sub

Public Sub ResetToDefault()

  myModelName = "TEST001"
  
  myStartDate = ""
  myPeriod = 12
  myTransform = X13TRANSFOR_NONE
  myTransofrmPowerParam = QNaN

  myLOMCalAdj = False
  myLOQCalAdj = False
  myLPYRCalAdj = False
  myTempUDAdjSel = False
  myTempUDAdj = ""
  myTempUDAdjType = X13UDPRIOR_ADJ_RATIO
  myPermUDAdjSel = False
  myPermUDAdj = ""
  myPermUDAdjType = X13UDPRIOR_ADJ_RATIO
  
  mySeasonalAdjustType = X13AS_SA_NONE
  myX11Mode = X11_MODE_ADD
  mySeasonalMA = X11_SEASONALMA_DEFAULT
  myAutoTrendMA = True
  myTrendMA = 13
  mySigmaLL = 1.5
  mySigmaUL = 2.5
  
  myHPCycle = True
  myFiniteSampleFilter = False
  myDecomposeableApprox = True
  myAcceptSeasonalStationary = True
  myMaxLJBOXQStat = 50
  
End Sub

Public Property Get X13AMODEL_NAME() As String
  X13AMODEL_NAME = myModelName
End Property

Public Property Let X13AMODEL_NAME(ByVal vNewValue As String)
  myModelName = vNewValue
End Property


' The date that first data point belong to
Public Property Get START_DATE() As String
  START_DATE = myStartDate
End Property

Public Property Let START_DATE(ByVal vNewValue As String)
  myStartDate = vNewValue
End Property

' The frequency of data (monthly = 12 , Quartely=4)
Public Property Get DATA_PERIOD() As Integer
  DATA_PERIOD = myPeriod
End Property

Public Property Let DATA_PERIOD(ByVal vNewValue As Integer)
  myPeriod = vNewValue
End Property

Public Property Get TRANFORM_TYPE() As X13TRANSFORM_METHOD
  TRANFORM_TYPE = myTransform
End Property

Public Property Let TRANFORM_TYPE(ByVal vNewValue As X13TRANSFORM_METHOD)
  myTransform = vNewValue
End Property

Public Property Get POWER_PARAM() As Double
  POWER_PARAM = myTransofrmPowerParam
End Property

Public Property Let POWER_PARAM(ByVal vNewValue As Double)
  myTransofrmPowerParam = vNewValue
End Property

Public Property Get LOM_PRIOR_ADJ() As Boolean
  LOM_PRIOR_ADJ = myLOMCalAdj
End Property

Public Property Let LOM_PRIOR_ADJ(ByVal vNewVal As Boolean)
  myLOMCalAdj = vNewVal
End Property

Public Property Get LOQ_PRIOR_ADJ() As Boolean
  LOQ_PRIOR_ADJ = myLOQCalAdj
End Property

Public Property Let LOQ_PRIOR_ADJ(ByVal vNewVal As Boolean)
  myLOQCalAdj = vNewVal
End Property

Public Property Get LPYR_PRIOR_ADJ() As Boolean
  LPYR_PRIOR_ADJ = myLPYRCalAdj
End Property

Public Property Let LPYR_PRIOR_ADJ(ByVal vNewVal As Boolean)
  myLPYRCalAdj = vNewVal
End Property

Public Property Get TEMP_PRIOR_ENABLED() As Boolean
  TEMP_PRIOR_ENABLED = myTempUDAdjSel
End Property

Public Property Let TEMP_PRIOR_ENABLED(ByVal vNewValue As Boolean)
  myTempUDAdjSel = vNewValue
End Property

Public Property Get TEMP_PRIOR_DATA() As String
  TEMP_PRIOR_DATA = myTempUDAdj
End Property

Public Property Let TEMP_PRIOR_DATA(ByVal vNewValue As String)
  myTempUDAdj = vNewValue
End Property

Public Property Get TEMP_PRIOR_TYPE() As X13UDPRIOR_ADJ_TYPE
  TEMP_PRIOR_TYPE = myTempUDAdjType
End Property

Public Property Let TEMP_PRIOR_TYPE(ByVal vNewVal As X13UDPRIOR_ADJ_TYPE)
  myTempUDAdjType = vNewVal
End Property

Public Property Get PERM_PRIOR_ENABLED() As Boolean
  PERM_PRIOR_ENABLED = myPermUDAdjSel
End Property

Public Property Let PERM_PRIOR_ENABLED(ByVal vNewValue As Boolean)
  myPermUDAdjSel = vNewValue
End Property


Public Property Get PERM_PRIOR_DATA() As String
  PERM_PRIOR_DATA = myPermUDAdj
End Property

Public Property Let PERM_PRIOR_DATA(ByVal vNewValue As String)
  myPermUDAdj = vNewValue
End Property

Public Property Get PERM_PRIOR_TYPE() As X13UDPRIOR_ADJ_TYPE
  PERM_PRIOR_TYPE = myPermUDAdjType
End Property

Public Property Let PERM_PRIOR_TYPE(ByVal vNewVal As X13UDPRIOR_ADJ_TYPE)
  myPermUDAdjType = vNewVal
End Property

Public Property Get X11_MODE() As X11_MODE_TYPE
  X11_MODE = myX11Mode
End Property

Public Property Let X11_MODE(ByVal vNewVal As X11_MODE_TYPE)
  myX11Mode = vNewVal
End Property

Public Property Get X11_SEASONALMA() As X11_SEASONALMA_TYPE
  X11_SEASONALMA = mySeasonalMA
End Property

Public Property Let X11_SEASONALMA(ByVal vNewVal As X11_SEASONALMA_TYPE)
  mySeasonalMA = vNewVal
End Property

Public Property Get X11_TRENDMA() As Integer
  X11_TRENDMA = myTrendMA
End Property

Public Property Let X11_TRENDMA(ByVal vNewVal As Integer)
  myTrendMA = vNewVal
End Property

Public Property Get X11_OUTLIER_SIGMA_LL() As Double
  X11_OUTLIER_SIGMA_LL = mySigmaLL
End Property

Public Property Let X11_OUTLIER_SIGMA_LL(ByVal vNewVal As Double)
  mySigmaLL = vNewVal
End Property

Public Property Get X11_OUTLIER_SIGMA_UL() As Double
  X11_OUTLIER_SIGMA_UL = mySigmaUL
End Property

Public Property Let X11_OUTLIER_SIGMA_UL(ByVal vNewVal As Double)
  mySigmaUL = vNewVal
End Property

' Private mySeasonalAdjustType As X13AS_SA_TYPE
Public Property Get X13AS_SEASONAL_ADJUST() As X13AS_SA_TYPE
  X13AS_SEASONAL_ADJUST = mySeasonalAdjustType
End Property

Public Property Let X13AS_SEASONAL_ADJUST(ByVal vNewVal As X13AS_SA_TYPE)
  mySeasonalAdjustType = vNewVal
End Property

Public Property Get X11_TRENDMA_AUTO() As Boolean
  X11_TRENDMA_AUTO = myAutoTrendMA
End Property

Public Property Let X11_TRENDMA_AUTO(ByVal vNewVal As Boolean)
  myAutoTrendMA = vNewVal
End Property

Public Property Get SEATS_ADMISSABLE_APPROX() As Boolean
  SEATS_ADMISSABLE_APPROX = myDecomposeableApprox
End Property

Public Property Let SEATS_ADMISSABLE_APPROX(ByVal vNewVal As Boolean)
  myDecomposeableApprox = vNewVal
End Property

Public Property Get SEATS_CALC_HPCYCLE() As Boolean
  SEATS_CALC_HPCYCLE = myHPCycle
End Property

Public Property Let SEATS_CALC_HPCYCLE(ByVal vNewVal As Boolean)
  myHPCycle = vNewVal
End Property

Public Property Get SEATS_ACCEPT_SEASONAL_STATIONARY() As Boolean
  SEATS_ACCEPT_SEASONAL_STATIONARY = myAcceptSeasonalStationary
End Property

Public Property Let SEATS_ACCEPT_SEASONAL_STATIONARY(ByVal vNewVal As Boolean)
  myAcceptSeasonalStationary = vNewVal
End Property

Public Property Get SEATS_MAX_LJB_QSTAT() As Double
  SEATS_MAX_LJB_QSTAT = myMaxLJBOXQStat
End Property

Public Property Let SEATS_MAX_LJB_QSTAT(ByVal vNewVal As Double)
  myMaxLJBOXQStat = vNewVal
End Property

'myFiniteSampleFilter
Public Property Get SEATS_FINITE_SAMPLE_FILTERS() As Boolean
  SEATS_FINITE_SAMPLE_FILTERS = myFiniteSampleFilter
End Property

Public Property Let SEATS_FINITE_SAMPLE_FILTERS(ByVal vNewVal As Boolean)
  myFiniteSampleFilter = vNewVal
End Property



Public Function X13ASFormula(ByRef obj As GeneralUO) As String
  X13ASFormula = "=X13AS("
  X13ASFormula = X13ASFormula + obj.DEPENDENT_DATA_NO_LABELS + ","
  X13ASFormula = X13ASFormula + CStr(obj.ASCENDING) + ","
  X13ASFormula = X13ASFormula + myStartDate + ","
  X13ASFormula = X13ASFormula + CStr(myPeriod) + ","
  X13ASFormula = X13ASFormula + CStr(obj.STOCK_DATA) + ","
  
  X13ASFormula = X13ASFormula + "{" + CStr(Me.TRANFORM_TYPE)
  If Me.TRANFORM_TYPE = X13TRANSFOR_BOXCOX Then
    X13ASFormula = X13ASFormula + "," + CStr(Me.POWER_PARAM)
  Else
      X13ASFormula = X13ASFormula + ", 0"
  End If
  X13ASFormula = X13ASFormula + "}"
  
  'Calendar prior adjustment
  X13ASFormula = X13ASFormula + ", {"
  
  If Me.LOM_PRIOR_ADJ Then
    X13ASFormula = X13ASFormula + " 1"
  Else
    X13ASFormula = X13ASFormula + " 0"
  End If
  X13ASFormula = X13ASFormula + ","
  
  If Me.LOQ_PRIOR_ADJ Then
    X13ASFormula = X13ASFormula + " 1"
  Else
    X13ASFormula = X13ASFormula + " 0"
  End If
  X13ASFormula = X13ASFormula + ","

  If Me.LPYR_PRIOR_ADJ Then
    X13ASFormula = X13ASFormula + " 1"
  Else
    X13ASFormula = X13ASFormula + " 0"
  End If
  X13ASFormula = X13ASFormula + "}"
  
  'UD temp prior adjustment
  X13ASFormula = X13ASFormula + ","
  If Len(Me.TEMP_PRIOR_DATA) > 0 And Me.TEMP_PRIOR_ENABLED Then
    X13ASFormula = X13ASFormula + Me.TEMP_PRIOR_DATA
    X13ASFormula = X13ASFormula + ","
    X13ASFormula = X13ASFormula + CStr(Me.TEMP_PRIOR_TYPE)
  Else
    X13ASFormula = X13ASFormula + ",0"
  End If
  
  X13ASFormula = X13ASFormula + ","
  If Len(Me.PERM_PRIOR_DATA) > 0 And Me.PERM_PRIOR_ENABLED Then
    X13ASFormula = X13ASFormula + Me.PERM_PRIOR_DATA
    X13ASFormula = X13ASFormula + ","
    X13ASFormula = X13ASFormula + CStr(Me.PERM_PRIOR_TYPE)
  Else
    X13ASFormula = X13ASFormula + ",0"
  End If
  
  ' Add X11 setting
  X13ASFormula = X13ASFormula + ","
  X13ASFormula = X13ASFormula + "{"
  X13ASFormula = X13ASFormula + CStr(Me.X13AS_SEASONAL_ADJUST)
  
  If Me.X13AS_SEASONAL_ADJUST = X13AS_SA_X11 Then
    X13ASFormula = X13ASFormula + ","
    
    ' Add mode
    X13ASFormula = X13ASFormula + CStr(Me.X11_MODE) + ","
    
    ' Add Seasonal MA
    X13ASFormula = X13ASFormula + CStr(Me.X11_SEASONALMA) + ","
    
    ' Add Trend MA (henderson filter parameter)
    If Not Me.X11_TRENDMA_AUTO Then
      If Not IsQNaN(Me.X11_TRENDMA) Then
        X13ASFormula = X13ASFormula + CStr(Me.X11_TRENDMA)
      Else
        X13ASFormula = X13ASFormula + "0"
      End If
    Else
      X13ASFormula = X13ASFormula + "0"
    End If
    X13ASFormula = X13ASFormula + ","
    
    ' Add Sigma LL
    If Not IsQNaN(Me.X11_OUTLIER_SIGMA_LL) Then
      X13ASFormula = X13ASFormula + CStr(Me.X11_OUTLIER_SIGMA_LL)
    Else
      X13ASFormula = X13ASFormula + "1.5"
    End If
    X13ASFormula = X13ASFormula + ","
    
    ' Add Sigma UL
    If Not IsQNaN(Me.X11_OUTLIER_SIGMA_UL) Then
      X13ASFormula = X13ASFormula + CStr(Me.X11_OUTLIER_SIGMA_UL)
    Else
      X13ASFormula = X13ASFormula + "2.5"
    End If
  End If
  
  If Me.X13AS_SEASONAL_ADJUST = X13AS_SA_SEATS Then
    X13ASFormula = X13ASFormula + ","
    
    'Add hpcycle
    X13ASFormula = X13ASFormula + CStr(Me.SEATS_CALC_HPCYCLE) + ","
    X13ASFormula = X13ASFormula + CStr(Me.SEATS_FINITE_SAMPLE_FILTERS) + ","
    X13ASFormula = X13ASFormula + CStr(Me.SEATS_ADMISSABLE_APPROX) + ","
    X13ASFormula = X13ASFormula + CStr(Me.SEATS_ACCEPT_SEASONAL_STATIONARY) + ","
    
    If Not IsQNaN(Me.SEATS_MAX_LJB_QSTAT) Then
      X13ASFormula = X13ASFormula + CStr(Me.SEATS_MAX_LJB_QSTAT)
    Else
      X13ASFormula = X13ASFormula + "0"
    End If
  End If
  
  
  X13ASFormula = X13ASFormula + "}"
  
  
  X13ASFormula = X13ASFormula + ")"
End Function


Public Sub FromX13Formula(ByRef Data As GeneralUO, ByRef missing As MissingValueUO, ByVal fmula As String)
  Dim pos As Integer
  Dim buffer As String

  fmula = Trim(fmula)
  If Len(fmula) > 0 Then
    fmula = UCase(fmula)
    
    ' Expect to be X12ARIMA function
    If Left(fmula, 7) = "=X13AS(" Then
      
      ' Parse the formula, get input data range
      Data.DEPENDENT_RANGE = procFormula(ActiveCell.formula, 1)
      Data.ASCENDING = CBool(procFormula(ActiveCell.formula, 2))
      
      ' Parse the formula, get start date
      myStartDate = procFormula(ActiveCell.formula, 3)

      ' Parse the formula, get data frequency
      myPeriod = Val(procFormula(ActiveCell.formula, 4))

      Data.STOCK_DATA = CBool(procFormula(ActiveCell.formula, 5))
      
      ' Add transformation selection
      buffer = procFormula(ActiveCell.formula, 6)
      Me.TRANFORM_TYPE = Val(procArgument(buffer, 1))
      
      If Me.TRANFORM_TYPE = X13TRANSFOR_BOXCOX Then
        Me.POWER_PARAM = Val(procArgument(buffer, 2))
      Else
        Me.POWER_PARAM = QNaN
      End If
      
      ' Get the calendar prior adjustment
      buffer = procFormula(ActiveCell.formula, 7)
      If Len(buffer) > 0 Then
        Me.LOM_PRIOR_ADJ = Val(procArgument(buffer, 1))
        Me.LOQ_PRIOR_ADJ = Val(procArgument(buffer, 2))
        Me.LPYR_PRIOR_ADJ = Val(procArgument(buffer, 3))
      Else
        Me.LOM_PRIOR_ADJ = False
        Me.LOQ_PRIOR_ADJ = False
        Me.LPYR_PRIOR_ADJ = False
      End If
      
      'Get the UD prior adjustment
      Me.TEMP_PRIOR_DATA = procFormula(ActiveCell.formula, 8)
      Me.TEMP_PRIOR_TYPE = Val(procFormula(ActiveCell.formula, 9))
      Me.TEMP_PRIOR_ENABLED = (Len(Me.TEMP_PRIOR_DATA) > 0)
      
      Me.PERM_PRIOR_DATA = procFormula(ActiveCell.formula, 10)
      Me.PERM_PRIOR_TYPE = Val(procFormula(ActiveCell.formula, 11))
      Me.PERM_PRIOR_ENABLED = (Len(Me.PERM_PRIOR_DATA) > 0)
      
      
      Me.X11_MODE = X11_MODE_ADD
      Me.X11_SEASONALMA = X11_SEASONALMA_MSR
      Me.X11_TRENDMA_AUTO = True
      Me.X11_TRENDMA = 13
      Me.X11_OUTLIER_SIGMA_LL = 1.5
      Me.X11_OUTLIER_SIGMA_UL = 2.5
      
      Me.SEATS_CALC_HPCYCLE = True
      Me.SEATS_ACCEPT_SEASONAL_STATIONARY = True
      Me.SEATS_ADMISSABLE_APPROX = True
      Me.SEATS_FINITE_SAMPLE_FILTERS = False
      Me.SEATS_MAX_LJB_QSTAT = 50
      
      buffer = procFormula(ActiveCell.formula, 12)
      If Len(buffer) > 0 Then
        Me.X13AS_SEASONAL_ADJUST = Val(procArgument(buffer, 1))
        If Me.X13AS_SEASONAL_ADJUST = X13AS_SA_X11 Then
          Me.X11_MODE = Val(procArgument(buffer, 2))
          Me.X11_SEASONALMA = Val(procArgument(buffer, 3))
        
          If Len(procArgument(buffer, 4)) > 0 Then
            If Val(procArgument(buffer, 4)) > 0 Then
              Me.X11_TRENDMA = Val(procArgument(buffer, 4))
              Me.X11_TRENDMA_AUTO = False
            Else
              Me.X11_TRENDMA_AUTO = True
            End If
          Else
            Me.X11_TRENDMA_AUTO = True
          End If
        
          If Len(procArgument(buffer, 5)) > 0 Then
            Me.X11_OUTLIER_SIGMA_LL = Val(procArgument(buffer, 5))
          Else
            Me.X11_OUTLIER_SIGMA_LL = QNaN
          End If
        
          If Len(procArgument(buffer, 6)) > 0 Then
            Me.X11_OUTLIER_SIGMA_UL = Val(procArgument(buffer, 6))
          Else
            Me.X11_OUTLIER_SIGMA_UL = QNaN
          End If
        End If
        
        If Me.X13AS_SEASONAL_ADJUST = X13AS_SA_SEATS Then
          Me.SEATS_CALC_HPCYCLE = CBool(procArgument(buffer, 2))
          Me.SEATS_FINITE_SAMPLE_FILTERS = CBool(procArgument(buffer, 3))
          Me.SEATS_ADMISSABLE_APPROX = CBool(procArgument(buffer, 4))
          Me.SEATS_ACCEPT_SEASONAL_STATIONARY = CBool(procArgument(buffer, 5))
          Me.SEATS_MAX_LJB_QSTAT = Val(procArgument(buffer, 6))
        End If
      Else
        ' TODO
        MsgBox MSGAPI.getLocaleString(IDS_UI_X13AS_INVALID_MODEL_ARGUMENT_MSG), vbOKOnly + vbCritical, PRODUCT_MEDIUMNAME
        Exit Sub
      End If
    End If
  End If
End Sub

Attribute VB_Name = "cointegrationFrm"
Attribute VB_Base = "0{C13306F7-C806-4CCB-B377-1CC76FB3DAB2}{DD2D15FE-E91B-444B-AB6A-FCE5C3D012E0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Compare Text
Option Explicit
'
'  Copyright |fffd| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16760 $
'  $Date: 2019-10-02 21:51:12 -0500 (Wed, 02 Oct 2019) $
'  $Author: mohamad $
'  $Id: cointegrationFrm.frm 16760 2019-10-03 02:51:12Z mohamad $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/cointegrationFrm.frm $
'
Private Const msMODULE As String = "USERFORM:COINTEGRATION"
Private Const zenSlugId As String = "articles/216471103"

Private userOptions As JohansenUO
Private myGeneralUO As GeneralUO
Private myMissingValueUO As MissingValueUO

Private mbOK As Boolean
Private callValidateForm As Boolean

Private Sub chkConstant_Click()
  userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_CONST) = chkConstant.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkConstantAndTrend_Click()
  userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_CONST_TREND) = chkConstantAndTrend.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkMaximalEignvalueTest_Click()
  userOptions.SELECTED_TEST(EIGNVALUE_TEST) = chkMaximalEignvalueTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkNoConstant_Click()
  userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_NO_CONST) = chkNoConstant.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub chkTraceTest_Click()
  userOptions.SELECTED_TEST(TRACE_TEST) = chkTraceTest.value
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub cmdBtnHelp_Click()
    Call OpenHelp(MSGAPI.getLocalityId() & "/" & HELP_FILENAME, cmdBtnHelp.HelpContextID, zenSlugId)
End Sub

Private Sub UserForm_Initialize()
  On Error GoTo ErrHdler
    
  'Initialize the form labels and helptips accoording to the locality
  Me.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_FRM_CAPTION)
  
  Me.MultiPage1.Pages("MainPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_GNRL_PAGE_CAPTION)
  Me.MultiPage1.Pages("MainPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_PG_GNRL_HELPTIP)
  
  InputDataLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION)
  InputDataLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP)
  RefInputArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP)
  
  chkAscending.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION)
  chkAscending.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP)
  
  MaskTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION)
  MaskTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  RefMaskArray.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP)
  
  SignificanceLevelTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_CAPTION)
  SignificanceLevelTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)
  RefEditSignificanceLevel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_ALPHA_LABEL_HELPTIP)

  OutputRangeTxtLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION)
  OutputRangeTxtLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP)
  RefOutput.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP)
  
  ' Options Tab
  Me.MultiPage1.Pages("OptionPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OPTIONS_PAGE_CAPTION)
  Me.MultiPage1.Pages("OptionPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_PG_OPTIONS_HELPTIP)
  
  TestMethodFrameLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_METHODS_FRAME_LABEL)
  TestMethodFrameLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_METHODS_FRAME_HELPTIP)
  
  chkTraceTest.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_METHOD_LABEL)
  chkTraceTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_TRACE_METHOD_HELPTIP)
  
  chkMaximalEignvalueTest.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_METHOD_LABEL)
  chkMaximalEignvalueTest.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_METHOD_HELPTIP)
  
  maxLagOrderLabel.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_LAG_LABEL)
  maxLagOrderLabel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_LAG_HELPTIP)
  txtMaxLagOrder.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_MAX_LAG_HELPTIP)
  
  ScenarioFrame.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIOS_FRAME_LABEL)
  ScenarioFrame.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIOS_FRAME_HELPTIP)
  
  chkNoConstant.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_LABEL)
  chkNoConstant.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_HELPTIP)
  
  chkConstant.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_LABEL)
  chkConstant.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_HELPTIP)
  
  chkConstantAndTrend.Caption = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_LABEL)
  chkConstantAndTrend.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_HELPTIP)
  
  ' Missing Values Tab
  Me.MultiPage1.Pages("MissingPg").Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION)
  Me.MultiPage1.Pages("MissingPg").ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP)
  
  optMissingRemove.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION)
  optMissingRemove.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP)
  
  optMissingEstimate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION)
  optMissingEstimate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP)
  
  optMSEstimateAvg.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION)
  optMSEstimateAvg.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP)
  
  optMSEstimateMedian.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION)
  optMSEstimateMedian.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP)
 
  optMissingInterpolate.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION)
  optMissingInterpolate.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP)
  
  optFlatForwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION)
  optFlatForwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP)
  
  optFlatBackwardInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION)
  optFlatBackwardInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP)
  
  optLinearInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION)
  optLinearInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP)
  
  optFlatCubicSplineInterp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION)
  optFlatCubicSplineInterp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP)
 
  cmdBtnHelp.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_CAPTION)
  cmdBtnHelp.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_HELP_HELPTIP)
  
  cmdCancel.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_CAPTION)
  cmdCancel.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_CANCEL_HELPTIP)
  
  cmdOK.Caption = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_CAPTION)
  cmdOK.ControlTipText = MSGAPI.getLocaleString(IDS_UI_COMMON_OK_HELPTIP)
    
  ' Select the first Item as the default
  Set userOptions = New JohansenUO
  Set myGeneralUO = New GeneralUO
  Set myMissingValueUO = New MissingValueUO
  
  Call ResetToDefault
  
  Call validateForm
  'set focus to 1st tab
  Me.MultiPage1.value = 0
  
  RefInputArray.SetFocus
ErrHdler:
  Exit Sub
End Sub

Private Sub UserForm_Terminate()
  Set userOptions = Nothing
  Set myGeneralUO = Nothing
  Set myMissingValueUO = Nothing
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub




Private Sub ResetToDefault()
  Const sSOURCE As String = "ResetToDefault"
  
  Dim szInput As String
  
  On Error GoTo ErrHdler
  
  If userOptions Is Nothing Then
    Exit Sub
  End If
  
  'Deactivate form validation
  callValidateForm = False
  
  ' Reset to default
  szInput = myGeneralUO.INPUT_RANGE
  
  Call userOptions.ResetToDefault
  Call myGeneralUO.ResetToDefault
  Call myMissingValueUO.ResetToDefault
  
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW
  
  myGeneralUO.INPUT_RANGE = szInput
  RefOutput.value = myGeneralUO.OUTPUT_RANGE
  RefEditSignificanceLevel.value = myGeneralUO.significance
  RefMaskArray.value = myGeneralUO.INPUT_MASK
  
  'Missing Values section
  optMissingRemove.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW)
  
  optMissingEstimate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateAvg.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE)
  optMSEstimateMedian.value = (myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN)
  
  optMissingInterpolate.value = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatForwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT)
  optFlatBackwardInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT)
  optLinearInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR)
  optFlatCubicSplineInterp.value = (myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE)
  
  ' Option tab
  chkTraceTest.value = userOptions.SELECTED_TEST(TRACE_TEST)
  chkMaximalEignvalueTest.value = userOptions.SELECTED_TEST(EIGNVALUE_TEST)
  
  userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
  txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  
  chkNoConstant.value = userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_NO_CONST)
  chkConstant.value = userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_CONST)
  chkConstantAndTrend.value = userOptions.SELECTED_TEST_SCENARIO(JOHANSEN_CONST_TREND)

Cleanup:
  callValidateForm = True
  Exit Sub

ErrHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  Resume Cleanup
End Sub



Private Sub validateForm()
  Const sSOURCE As String = "validateForm"
  
    ' Do we have input data
  Dim dataAvailable As Boolean
 
  Dim ready As Boolean
  Dim valid_alpha As Boolean
 
  valid_alpha = isAlphaValid(RefEditSignificanceLevel.value)
  dataAvailable = Utilities.isCellRangeValid(RefInputArray.value)

  RefEditSignificanceLevel.enabled = True
  If Not valid_alpha Then
    RefEditSignificanceLevel.BorderColor = RGB(255, 0, 0)
  Else
    RefEditSignificanceLevel.BorderColor = RGB(0, 0, 0)
  End If


  ' Check the bins algo selection
  Me.MultiPage1.Pages("OptionPg").enabled = dataAvailable
  Me.MultiPage1.Pages("MissingPg").enabled = dataAvailable
    
  ' Missing Value Tab
  optMSEstimateAvg.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  optMSEstimateMedian.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE)
  
  optFlatForwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatBackwardInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optLinearInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
  optFlatCubicSplineInterp.enabled = (myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE)
    
  ' Option Tab
  chkTraceTest.enabled = dataAvailable
  chkMaximalEignvalueTest.enabled = dataAvailable
  
  chkNoConstant.enabled = dataAvailable And (userOptions.SELECTED_TEST(TRACE_TEST) Or userOptions.SELECTED_TEST(EIGNVALUE_TEST))
  chkConstant.enabled = chkNoConstant.enabled
  chkConstantAndTrend.enabled = chkNoConstant.enabled
  
 
  txtMaxLagOrder.enabled = chkNoConstant.enabled
  SpinButtonMaxLagOrder.enabled = chkNoConstant.enabled
  
    
  ready = False

  If Utilities.isCellRangeValid(RefOutput.value) Then
      If Utilities.isCellRangeValid(RefInputArray.value) Then
        ready = valid_alpha And chkNoConstant.enabled And (chkNoConstant.value Or chkConstant.value Or chkConstantAndTrend.value)
      End If
  End If
    
  cmdOK.enabled = ready
End Sub

Private Sub RefInputArray_Change()
  myGeneralUO.INPUT_RANGE = Utilities.procInputCellsRange(RefInputArray.value)
  
  If callValidateForm = True Then
    Call validateForm
    
    userOptions.MAX_LAG_ORDER = userOptions.calcMaxLags(myGeneralUO)
    txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  End If

End Sub


Private Sub RefOutput_Change()
  myGeneralUO.OUTPUT_RANGE = Utilities.procInputCellsRange(RefOutput.value)

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub RefEditSignificanceLevel_Change()
  myGeneralUO.significance = Utilities.procAlphaInputVal(RefEditSignificanceLevel.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

' RefMaskArray
Private Sub RefMaskArray_Change()
  myGeneralUO.INPUT_MASK = Utilities.procInputCellsRange(RefMaskArray.value)
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatBackwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_BACKWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatCubicSplineInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_CUBIC_SPLINE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optFlatForwardInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_FORWARD_FLAT
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optLinearInterp_Click()
  myMissingValueUO.MISSING_VALUES_INTERPOLATION = MV_INTERPOLATE_LINEAR
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingEstimate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_REPLACE

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingInterpolate_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_INTERPOLATE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMissingRemove_Click()
  myMissingValueUO.MISSING_VALUES_TREATMENT = MV_DONT_ALLOW

  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateAvg_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_AVERAGE
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub optMSEstimateMedian_Click()
  myMissingValueUO.MISSING_VALUES_REPLACEMENT = MV_REPLACE_MEDIAN
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxLagOrder_Spinup()

  userOptions.MAX_LAG_ORDER = userOptions.MAX_LAG_ORDER + 1
  
  If callValidateForm = True Then
    callValidateForm = False
    txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
    
    callValidateForm = True
    Call validateForm
  End If
End Sub

Private Sub SpinButtonMaxLagOrder_Spindown()

  If userOptions.MAX_LAG_ORDER > 1 Then
    userOptions.MAX_LAG_ORDER = userOptions.MAX_LAG_ORDER - 1
    
    If callValidateForm = True Then
      callValidateForm = False
      txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
      callValidateForm = True
    Else
      txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
    End If
  End If
  
  If callValidateForm = True Then
    Call validateForm
  End If
End Sub


Private Sub txtMaxLagOrder_Change()
  If IsNumeric(txtMaxLagOrder.value) = True And _
     txtMaxLagOrder.value >= 0 Then
    userOptions.MAX_LAG_ORDER = txtMaxLagOrder.value
    
    If callValidateForm = True Then
      Call validateForm
    End If
  Else
    MsgBox "Max Lag Order must be a positive integer", vbOKOnly, PRODUCT_MEDIUMNAME
    txtMaxLagOrder.value = userOptions.MAX_LAG_ORDER
  End If
End Sub


Private Sub cmdOK_Click()
  Const sSOURCE As String = "btnOK_Click"
  
  ' RefOutputRange
  Dim myRange As Object
  Dim tmpRange As Object
  Dim inRange As Object
  Dim NA As Boolean
    
  On Error GoTo ErrorHdler
  Call Utilities.OptimizeCode_Begin
  
  Set inRange = Range(RefInputArray)
  If inRange Is Nothing Then
    MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR) ' "Enter a valid time series range."
    Exit Sub
  Else
    If inRange.columns.count = 1 And inRange.rows.count = 1 Then
      MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_2DINPUT_ERROR) '"The time series range should more than one column or one row."
      Exit Sub
    Else
      ' Check if all the values in the input Series are Numaric or #N/A
      If Not vb_IsNum(inRange, NA) Then
        MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR) '"The times series values should be numbers and without any spaces."
        Exit Sub
      Else
        Set myRange = Range(RefOutput)
        If myRange Is Nothing Then
          MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR) ' "Enter a valid output range."
          Exit Sub
        Else
          If RefEditSignificanceLevel.enabled Then
            If Not isAlphaValid(RefEditSignificanceLevel.value) Then
              MsgBox MSGAPI.getLocaleString(IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR) ' "Only numbers between 0 and 100% are allowed."
              RefEditSignificanceLevel.value = vbNullString
              Exit Sub
            End If
          End If
          
          Application.StatusBar = MSGAPI.getLocaleString(IDS_UI_COINTEGRATION_TEST_STATUSBAR_CALCULATION_MSG) ' "Johansen Cointegration Test Calculation"
          
          Call userOptions.printTestOutput(myRange, myGeneralUO, myMissingValueUO)
          
          mbOK = True
          'Me.Hide
        End If
      End If
    End If
  End If
  
  
Cleanup:
  ' Re-store screen and autoCalc as earlier update now
  Call Utilities.OptimizeCode_End
  
  Unload Me
  Exit Sub
ErrorHdler:
  Call LOG_ERROR(msMODULE, sSOURCE, Erl, Err.Description)
  MsgBox "An error occured", vbCritical Or vbOKOnly, PRODUCT_MEDIUMNAME
  Resume Cleanup
End Sub

Attribute VB_Name = "numxl_license_macros"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |a9| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16521 $
'  $Date: 2017-11-20 20:09:41 -0600 (Mon, 20 Nov 2017) $
'
Private Const msMODULE As String = "numxl_license_macros"

Public Const IDL_GRP_SUMMARY_STAT As Integer = 14
Public Const IDL_GAL_SUMSTAT_DESCSTAT As Integer = 14
Public Const IDL_BTN_SUMSTAT_DESCSTAT_SUMSTAT As Integer = 14
Public Const IDL_BTN_SUMSTAT_DESCSTAT_HISTOGRAM As Integer = 14
Public Const IDL_BTN_SUMSTAT_DESCSTAT_QQPLOT As Integer = 14
Public Const IDL_BTN_SUMSTAT_DESCSTAT_EDF As Integer = 14
Public Const IDL_BTN_SUMSTAT_DESCSTAT_KDE As Integer = 14
Public Const IDL_BTN_SUMSTAT_CORRELOGRAM As Integer = 14
Public Const IDL_GAL_SUMSTAT_STATTEST As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_NORMALITY As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_ANOVA As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_COLLINEARITY As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_WHITENOISE As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_ARCHTEST As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_STATIONARY As Integer = 14
Public Const IDL_BTN_SUMSTAT_STATTEST_HOMOGENEITY As Integer = -1
Public Const IDL_BTN_SUMSTAT_STATTEST_COINTEGRATION As Integer = 14
Public Const IDL_GRP_DATA_PREP As Integer = -1
Public Const IDL_BTN_DATAPREP_TRANSFORM As Integer = -1
Public Const IDL_BTN_DATAPREP_OUTLIER As Integer = -1
Public Const IDL_BTN_DATAPREP_RESAMPLE As Integer = -1
Public Const IDL_GRP_MODELING As Integer = 8
Public Const IDL_GAL_MODELING_ARMA As Integer = 8
Public Const IDL_BTN_MODELING_ARMA_ARMA As Integer = 8
Public Const IDL_BTN_MODELING_ARMA_ARIMA As Integer = 8
Public Const IDL_BTN_MODELING_ARMA_FARIMA As Integer = -1
Public Const IDL_BTN_MODELING_ARMA_SARIMA As Integer = 8
Public Const IDL_BTN_MODELING_ARMA_AIRLINE As Integer = 8
Public Const IDL_BTN_MODELING_ARMA_X12ARIMA As Integer = 0
Public Const IDL_BTN_MODELING_ARMA_X13ARIMASEATS As Integer = 0
Public Const IDL_BTN_MODELING_ARMAX As Integer = 8
Public Const IDL_BTN_MODELING_GARCH As Integer = 8
Public Const IDL_BTN_MODELING_COMBO As Integer = -1
Public Const IDL_GRP_FACTOR_ANALYSIS As Integer = 8
Public Const IDL_BTN_FACTOR_ANALYSIS_REGRESSION As Integer = 8
Public Const IDL_BTN_FACTOR_ANALYSIS_PCA As Integer = 8
Public Const IDL_BTN_FACTOR_ANALYSIS_GLM As Integer = 8
Public Const IDL_GRP_POWER_TOOLS As Integer = 8
Public Const IDL_BTN_POWERTOOLS_MODEL_DETECT As Integer = -1
Public Const IDL_BTN_POWERTOOLS_DIAGNOSIS As Integer = -1
Public Const IDL_BTN_POWERTOOLS_CALIBRATION As Integer = 8
Public Const IDL_BTN_POWERTOOLS_FORECAST As Integer = 8
Public Const IDL_BTN_POWERTOOLS_SIMULATE As Integer = 0
Public Const IDL_BTN_POWERTOOLS_MCSIMULATE As Integer = 0
Public Const IDL_GRP_SPECTRAL_ANALYSIS As Integer = 0
Public Const IDL_BTN_SPECTRAL_ANALYSIS_FOURIER As Integer = 0
Public Const IDL_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM As Integer = 0
Public Const IDL_GAL_SPECTRAL_ANALYSIS_FILTERS As Integer = -1
Public Const IDL_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT As Integer = -1
Public Const IDL_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING As Integer = -1

Attribute VB_Name = "numxl_locale_macros"
Option Explicit
Option Private Module
Option Compare Text
'
'  Copyright |c2||a9| Spider Financial Corp - All rights reserved.
'  Unauthorized copying of this file, via any medium is strictly prohibited
'   Proprietary and confidential
'
'  $Revision: 16771 $
'  $Date: 2019-10-09 10:05:12 -0500 (Wed, 09 Oct 2019) $
'  $Author: builder $
'  $Id: numxl_locale_macros.bas 16771 2019-10-09 15:05:12Z builder $
'  $HeadURL: https://secure.svnrepository.com/s_oliver/spiderxl/Branches/PARSON/products/NumXLUI/numxl_locale_macros.bas $
'

Private Const msMODULE As String = "numxl_locale_macros"




'  about_frm_def
Public Const IDS_UI_LITEMODE As Integer = 31
Public Const IDS_UI_TRIALMODE As Integer = 32
Public Const IDS_UI_SUBSCRIPTIONMODE As Integer = 33
Public Const IDS_UI_LICENSEEXPIRES_ON As Integer = 34
Public Const IDS_UI_LICENSEEXPIRES_ONEDAY As Integer = 35
Public Const IDS_UI_LICENSE_NOT_ACTIVATED As Integer = 36
Public Const IDS_UI_LICENSE_EXPIRED_ON As Integer = 37
Public Const IDS_UI_CUSTOMER_NAME As Integer = 38
Public Const IDS_UI_CUSTOMER_COMPANY As Integer = 39
Public Const IDS_UI_CUSTOMER_LICENSEKEY As Integer = 40
Public Const IDS_UI_ABOUT_FAILED_LUC As Integer = 41
Public Const IDS_UI_ABOUT_FAILED_REGISTRY As Integer = 42
Public Const IDS_UI_ABOUT_CAPTION As Integer = 43
Public Const IDS_UI_ABOUT_BUILDTXTLABEL_CAPTION As Integer = 44
Public Const IDS_UI_ABOUT_BUILDTXTLABEL_HELPTIP As Integer = 45
Public Const IDS_UI_ABOUT_USERINFOFRAME_CAPTION As Integer = 46
Public Const IDS_UI_ABOUT_USERINFOFRAME_HELPTIP As Integer = 47
Public Const IDS_UI_ABOUT_USERNAME_CAPTION As Integer = 48
Public Const IDS_UI_ABOUT_USERNAME_HELPTIP As Integer = 49
Public Const IDS_UI_ABOUT_USERCOMPANY_CAPTION As Integer = 50
Public Const IDS_UI_ABOUT_USERCOMPANY_HELPTIP As Integer = 51
Public Const IDS_UI_ABOUT_PRODUCTID_CAPTION As Integer = 52
Public Const IDS_UI_ABOUT_PRODUCTID_HELPTIP As Integer = 53
Public Const IDS_UI_ABOUT_SEVICEDATE_LABEL_CAPTION As Integer = 54
Public Const IDS_UI_ABOUT_SEVICEDATE_LABEL_HELPTIP As Integer = 55
Public Const IDS_UI_ABOUT_SEVICEDATE_HELPTIP As Integer = 56
Public Const IDS_UI_ABOUT_TRIALMODEFRAME_CAPTION As Integer = 57
Public Const IDS_UI_ABOUT_TRIALMODEFRAME_HELPTIP As Integer = 58
Public Const IDS_UI_ABOUT_TRIALLICENSESTATUS_CAPTION As Integer = 59
Public Const IDS_UI_ABOUT_TRIALLICENSESTATUS_HELPTIP As Integer = 60
Public Const IDS_UI_ABOUT_EULA_URL_CAPTION As Integer = 61
Public Const IDS_UI_ABOUT_EULA_URL_HELPTIP As Integer = 62
Public Const IDS_UI_ABOUT_RELEASENOTES_URL_CAPTION As Integer = 63
Public Const IDS_UI_ABOUT_RELEASENOTES_URL_HELPTIP As Integer = 64
Public Const IDS_UI_ABOUT_COPYRIGHTMSG_WARNING_CAPTION As Integer = 65
Public Const IDS_UI_ABOUT_COPYRIGHTMSG_WARNING_HELPTIP As Integer = 66
Public Const IDS_UI_ABOUT_TECHSUPPORT_CAPTION As Integer = 67
Public Const IDS_UI_ABOUT_TECHSUPPORT_HELPTIP As Integer = 68
Public Const IDS_UI_ABOUT_CREDITS_CAPTION As Integer = 69
Public Const IDS_UI_ABOUT_CREDITS_HELPTIP As Integer = 70
Public Const IDS_UI_ABOUT_ACTIVATENOW_CAPTION As Integer = 77
Public Const IDS_UI_ABOUT_ACTIVATENOW_HELPTIP As Integer = 78
Public Const IDS_UI_ABOUT_BUYNOW_CAPTION As Integer = 79
Public Const IDS_UI_ABOUT_BUYNOW_HELPTIP As Integer = 80
Public Const IDS_UI_COPYRIGHT_HEADER_CAPTION As Integer = 81
Public Const IDS_UI_COPYRIGHT_HEADER_HELPTIP As Integer = 82

'  airline_frm_def
Public Const IDS_UI_AIRLINE_FRM_CAPTION As Integer = 836
Public Const IDS_UI_AIRLINE_MODEL_SPERIOD_LABEL As Integer = 837
Public Const IDS_UI_AIRLINE_MODEL_SPERIOD_HELPTIP As Integer = 838
Public Const IDS_UI_AIRLINE_OUTPUT_ERROR_MSG As Integer = 840
Public Const IDS_UI_AIRLINE_INVALID_MODEL_ERROR_MSG As Integer = 841
Public Const IDS_UI_AIRLINE_OUTPUT_NON_SEASONAL_THETA_PARAM_NOTE As Integer = 842
Public Const IDS_UI_AIRLINE_OUTPUT_SEASONAL_THETA_PARAM_NOTE As Integer = 843
Public Const IDS_UI_AIRLINE_OUTPUT_SEASON_LENGTH_PARAM_NOTE As Integer = 844
Public Const IDS_UI_AIRLINE_OUTPUT_CHECK_NOTE As Integer = 845

'  arch_frm_def
Public Const IDS_UI_ARCH_FRM_CAPTION As Integer = 971
Public Const IDS_UI_ARCH_MODEL_SPEC_FRAME_HELPTIP As Integer = 972
Public Const IDS_UI_ARCH_MODEL_SELECT_MODEL_LABEL As Integer = 973
Public Const IDS_UI_ARCH_MODEL_SELECT_MODEL_HELPTIP As Integer = 974
Public Const IDS_UI_ARCH_MODEL_ARCH_ORDER_LABEL As Integer = 975
Public Const IDS_UI_ARCH_MODEL_ARCH_ORDER_HELPTIP As Integer = 976
Public Const IDS_UI_ARCH_MODEL_GARCH_ORDER_LABEL As Integer = 977
Public Const IDS_UI_ARCH_MODEL_GARCH_ORDER_HELPTIP As Integer = 978
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_FRAME_LABEL As Integer = 979
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_FRAME_HELPTIP As Integer = 980
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_NORMAL_LABEL As Integer = 981
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_NORMAL_HELPTIP As Integer = 982
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_TSTUDENT_HELPTIP As Integer = 983
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_TSTUDENT_LABEL As Integer = 984
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_GED_LABEL As Integer = 985
Public Const IDS_UI_ARCH_MODEL_INNOVATIONS_GED_HELPTIP As Integer = 986
Public Const IDS_UI_ARCH_OUTPUT_ERROR_MSG As Integer = 987
Public Const IDS_UI_ARCH_OUTPUT_MEAN_PARAM_NOTE As Integer = 988
Public Const IDS_UI_ARCH_OUTPUT_LAMBDA_PARAM_NOTE As Integer = 989
Public Const IDS_UI_ARCH_OUTPUT_CONST_PARAM_NOTE As Integer = 990
Public Const IDS_UI_ARCH_OUTPUT_ARCH_PARAM_NOTE As Integer = 991
Public Const IDS_UI_ARCH_OUTPUT_GARCH_PARAM_NOTE As Integer = 992
Public Const IDS_UI_ARCH_OUTPUT_LEVERAGE_PARAM_NOTE As Integer = 994
Public Const IDS_UI_ARCH_OUTPUT_DF_PARAM_NOTE As Integer = 995
Public Const IDS_UI_ARCH_OUTPUT_CHECK_NOTE As Integer = 996

'  arch_test_frm_def
Public Const IDS_UI_ARCH_TEST_FRM_CAPTION As Integer = 565
Public Const IDS_UI_ARCH_TEST_PG_GNRL_HELPTIP As Integer = 566
Public Const IDS_UI_ARCH_TEST_PG_OPTIONS_HELPTIP As Integer = 567
Public Const IDS_UI_ARCH_TEST_STATUSBAR_CALCULATION_MSG As Integer = 568
Public Const IDS_UI_ARCH_TEST_OUTPUT_TABLE_HEADER As Integer = 569
Public Const IDS_UI_ARCH_TEST_OUTPUT_PRESENT_TEST_NOTE As Integer = 571

'  arima_frm_def
Public Const IDS_UI_ARIMA_FRM_CAPTION As Integer = 806
Public Const IDS_UI_ARIMA_MODEL_INTEGRAL_LABEL As Integer = 807
Public Const IDS_UI_ARIMA_MODEL_INTEGRAL_HELPTIP As Integer = 808
Public Const IDS_UI_ARIMA_OUTPUT_INTEGRATION_ORDER_PARAM_NOTE As Integer = 813
Public Const IDS_UI_ARIMA_OUTPUT_ERROR_MSG As Integer = 814

'  armax_frm_def
Public Const IDS_UI_ARMAX_FRM_CAPTION As Integer = 949
Public Const IDS_UI_ARMAX_PG_GNRL_HELPTIP As Integer = 952
Public Const IDS_UI_ARMAX_MODEL_PAGE_HELPTIP As Integer = 954
Public Const IDS_UI_ARMAX_PG_OPTIONS_HELPTIP As Integer = 955
Public Const IDS_UI_ARMAX_OUTPUT_ERROR_MSG As Integer = 968
Public Const IDS_UI_ARMAX_STATUSBAR_CALCULATION_MSG As Integer = 969
Public Const IDS_UI_ARMAX_OUTPUT_EXOGENOUS_BETAS_PARAM_NOTE As Integer = 970

'  arma_frm_def
Public Const IDS_UI_ARMA_OUTPUT_MEAN_PARAM_NOTE As Integer = 787
Public Const IDS_UI_ARMA_OUTPUT_SIGMA_PARAM_NOTE As Integer = 788
Public Const IDS_UI_ARMA_OUTPUT_CHECK_GOF_NOTE As Integer = 789
Public Const IDS_UI_ARMA_OUTPUT_AR_PARAM_NOTE As Integer = 790
Public Const IDS_UI_ARMA_OUTPUT_MA_PARAM_NOTE As Integer = 791
Public Const IDS_UI_COMMON_OUTPUT_TABLE_PARAM_HEADER As Integer = 792
Public Const IDS_UI_ARMA_MODEL_OPTIONS_FRAME_HELPTIP As Integer = 805
Public Const IDS_UI_ARMA_FRM_CAPTION As Integer = 765
Public Const IDS_UI_ARMA_MODEL_SPEC_FRAME_HELPTIP As Integer = 767
Public Const IDS_UI_ARMA_MODEL_AR_LABEL As Integer = 768
Public Const IDS_UI_ARMA_MODEL_AR_HELPTIP As Integer = 769
Public Const IDS_UI_ARMA_MODEL_MA_LABEL As Integer = 770
Public Const IDS_UI_ARMA_MODEL_MA_HELPTIP As Integer = 771
Public Const IDS_UI_ARMA_OUTPUT_ERROR_MSG As Integer = 775

'  check4update_frm_def
Public Const IDS_UI_CHECK4UPATE_FOUND As Integer = 162
Public Const IDS_UI_CHECK4UPATE_UP2DATE As Integer = 163
Public Const IDS_UI_CHECK4UPDATE_FRM_CAPTION As Integer = 164
Public Const IDS_UI_CHECK4UPDATE_LICENSEKEY_LABEL_CAPTION As Integer = 165
Public Const IDS_UI_CHECK4UPDATE_LICENSEKEY_LABEL_HELPTIP As Integer = 166
Public Const IDS_UI_CHECK4UPDATE_MACHINEID_LABEL_CAPTION As Integer = 167
Public Const IDS_UI_CHECK4UPDATE_MACHINEID_LABEL_HELPTIP As Integer = 168
Public Const IDS_UI_CHECK4UPDATE_CURRENTVERSION_LABEL_CAPTION As Integer = 169
Public Const IDS_UI_CHECK4UPDATE_CURRENTVERSION_LABEL_HELPTIP As Integer = 170
Public Const IDS_UI_CHECK4UPDATE_LATESTVERSION_LABEL_CAPTION As Integer = 171
Public Const IDS_UI_CHECK4UPDATE_LATESTVERSION_LABEL_HELPTIP As Integer = 172
Public Const IDS_UI_CHECK4UPDATE_DOWNLOAD_BTN_CAPTION As Integer = 173
Public Const IDS_UI_CHECK4UPDATE_DOWNLOAD_BTN_HELPTIP As Integer = 174
Public Const IDS_UI_CHECK4UPDATE_CHANGELOG_BTN_CAPTION As Integer = 175
Public Const IDS_UI_CHECK4UPDATE_CHANGELOG_BTN_HELPTIP As Integer = 176
Public Const IDS_UI_CHECK4UPDATE_CHECK_BTN_CAPTION As Integer = 177
Public Const IDS_UI_CHECK4UPDATE_CHECK_BTN_HELPTIP As Integer = 178

'  cointegration_test_frm_def
Public Const IDS_UI_COINTEGRATION_TEST_FRM_CAPTION As Integer = 686
Public Const IDS_UI_COINTEGRATION_TEST_PG_GNRL_HELPTIP As Integer = 687
Public Const IDS_UI_COINTEGRATION_TEST_PG_OPTIONS_HELPTIP As Integer = 688
Public Const IDS_UI_COINTEGRATION_TEST_METHODS_FRAME_LABEL As Integer = 689
Public Const IDS_UI_COINTEGRATION_TEST_METHODS_FRAME_HELPTIP As Integer = 690
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_METHOD_LABEL As Integer = 691
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_METHOD_BRIEF As Integer = 692
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_METHOD_HELPTIP As Integer = 693
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_METHOD_LABEL As Integer = 694
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_METHOD_BRIEF As Integer = 695
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_METHOD_HELPTIP As Integer = 696
Public Const IDS_UI_COINTEGRATION_TEST_MAX_LAG_LABEL As Integer = 697
Public Const IDS_UI_COINTEGRATION_TEST_MAX_LAG_HELPTIP As Integer = 698
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIOS_FRAME_LABEL As Integer = 699
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIOS_FRAME_HELPTIP As Integer = 700
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_LABEL As Integer = 701
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_BRIEF As Integer = 702
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_HELPTIP As Integer = 703
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_LABEL As Integer = 704
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_BRIEF As Integer = 705
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_HELPTIP As Integer = 706
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_TREND_ONLY_BRIEF As Integer = 707
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_LABEL As Integer = 708
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_BRIEF As Integer = 709
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_HELPTIP As Integer = 710
Public Const IDS_UI_COINTEGRATION_TEST_STATUSBAR_CALCULATION_MSG As Integer = 711
Public Const IDS_UI_COINTEGRATION_TEST_OUTPUT_TABLE_HEADER As Integer = 712
Public Const IDS_UI_COINTEGRATION_TEST_OUTPUT_PASS_TEST_NOTE As Integer = 713
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_H0_LABEL As Integer = 714
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_H1_LABEL As Integer = 715
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H1_LABEL As Integer = 716
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H0_LABEL As Integer = 717
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_NO_DETERMINISTIC_TERMS_NOTE As Integer = 1299
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_ONLY_CONST_NOTE As Integer = 1300
Public Const IDS_UI_COINTEGRATION_TEST_SCENARIO_CONST_TREND_NOTE As Integer = 1301
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_H0_NOTE As Integer = 1302
Public Const IDS_UI_COINTEGRATION_TEST_TRACE_H1_NOTE As Integer = 1303
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H0_NOTE As Integer = 1304
Public Const IDS_UI_COINTEGRATION_TEST_MAX_EIGNVAL_H1_NOTE As Integer = 1305

'  colinearity_test_frm_def
Public Const IDS_UI_MCOLINEARITY_TEST_FRM_CAPTION As Integer = 572
Public Const IDS_UI_MCOLINEARITY_TEST_PG_GNRL_HELPTIP As Integer = 573
Public Const IDS_UI_MCOLINEARITY_TEST_PG_OPTIONS_HELPTIP As Integer = 574
Public Const IDS_UI_MCOLINEARITY_TEST_METHODS_FRAME_CAPTION As Integer = 583
Public Const IDS_UI_MCOLINEARITY_TEST_METHODS_FRAME_HELPTIP As Integer = 584
Public Const IDS_UI_MCOLINEARITY_TEST_VIF_CAPTION As Integer = 585
Public Const IDS_UI_MCOLINEARITY_TEST_VIF_HELPTIP As Integer = 586
Public Const IDS_UI_MCOLINEARITY_TEST_CONDITION_NUMBER_CAPTION As Integer = 587
Public Const IDS_UI_MCOLINEARITY_TEST_CONDITION_NUMBER_HELPTIP As Integer = 588
Public Const IDS_UI_MCOLINEARITY_TEST_STATUSBAR_CALCULATION_MSG As Integer = 589
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_HEADER As Integer = 590
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_CN_CAPTION As Integer = 595
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_CN_NOTE As Integer = 596
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VARIABLE_CAPTION As Integer = 597
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VARIABLE_NOTE As Integer = 598
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_TOL_CAPTION As Integer = 599
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_TOL_NOTE As Integer = 600
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_RSQ_CAPTION As Integer = 601
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_RSQ_NOTE As Integer = 602
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VIF_CAPTION As Integer = 603
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_TABLE_VIF_NOTE As Integer = 604
Public Const IDS_UI_MCOLINEARITY_TEST_OUTPUT_PRESENT_TEST_NOTE As Integer = 605

'  common_frm_def
Public Const IDS_UI_COMMON_HELP_CAPTION As Integer = 71
Public Const IDS_UI_COMMON_HELP_HELPTIP As Integer = 72
Public Const IDS_UI_COMMON_OK_CAPTION As Integer = 73
Public Const IDS_UI_COMMON_OK_HELPTIP As Integer = 74
Public Const IDS_UI_COMMON_CANCEL_CAPTION As Integer = 75
Public Const IDS_UI_COMMON_CANCEL_HELPTIP As Integer = 76
Public Const IDS_UI_COMMON_GENERAL_ERROR As Integer = 83
Public Const IDS_UI_COMMON_GENERAL_NA As Integer = 84
Public Const IDS_UI_COMMON_INPUTDATA_TS_LABEL_CAPTION As Integer = 85
Public Const IDS_UI_COMMON_INPUTDATA_TS_LABEL_HELPTIP As Integer = 86
Public Const IDS_UI_COMMON_INPUTDATA_EDITAREA_HELPTIP As Integer = 87
Public Const IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_CAPTION As Integer = 88
Public Const IDS_UI_COMMON_INPUTDATA_CHRONICLE_ORDER_CHKBX_HELPTIP As Integer = 89
Public Const IDS_UI_COMMON_OUTPURRANGE_LABEL_CAPTION As Integer = 90
Public Const IDS_UI_COMMON_OUTPURRANGE_LABEL_HELPTIP As Integer = 91
Public Const IDS_UI_COMMON_OUTPURRANGE_EDITAREA_HELPTIP As Integer = 92
Public Const IDS_UI_COMMON_ALPHA_LABEL_CAPTION As Integer = 93
Public Const IDS_UI_COMMON_ALPHA_LABEL_HELPTIP As Integer = 94
Public Const IDS_UI_COMMON_ALPHA_EDITAREA_HELPTIP As Integer = 95
Public Const IDS_UI_COMMON_GENERAL_INVALID_INPUT_ERROR As Integer = 96
Public Const IDS_UI_COMMON_GENERAL_ONEROWCOL_INPUT_ERROR As Integer = 97
Public Const IDS_UI_COMMON_GENERAL_NOTNUMBERS_INPUT_ERROR As Integer = 98
Public Const IDS_UI_COMMON_GENERAL_INVALID_OUTPUT_ERROR As Integer = 99
Public Const IDS_UI_COMMON_GENERAL_INVALID_ALPHA_RANGE_ERROR As Integer = 100
Public Const IDS_UI_COMMON_OUTPUT_TARGET_HEADER As Integer = 101
Public Const IDS_UI_COMMON_OUTPUT_PVALUE_HEADER As Integer = 102
Public Const IDS_UI_COMMON_OUTPUT_SIG_HEADER As Integer = 103
Public Const IDS_UI_COMMON_OUTPUT_TEST_HEADER As Integer = 104
Public Const IDS_UI_COMMON_OUTPUT_PASS_TEST_HEADER As Integer = 105
Public Const IDS_UI_COMMON_OUTPUT_STATISTICAL_TEST_HEADER As Integer = 106
Public Const IDS_UI_COMMON_HYPOTHESIS_TEST_ALPHA_NOTE As Integer = 107
Public Const IDS_UI_COMMON_RESID_DIAG_TARGET_NOTE As Integer = 108
Public Const IDS_UI_COMMON_HYPOTHESIS_TEST_PV_NOTE As Integer = 109
Public Const IDS_UI_COMMON_RESID_DIAG_SIG_NOTE As Integer = 110
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_CAPTION As Integer = 455
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_HELPTIP As Integer = 456
Public Const IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_HELPTIP As Integer = 457
Public Const IDS_UI_COMMON_OPTIONS_NORMALOVERLAY_CHKBX_CAPTION As Integer = 458
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_CAPTION As Integer = 459
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_DONTACCEPT_SERIES_HELPTIP As Integer = 460
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_CAPTION As Integer = 461
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_OBS_HELPTIP As Integer = 462
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_CAPTION As Integer = 463
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_HELPTIP As Integer = 464
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_CAPTION As Integer = 465
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEAN_HELPTIP As Integer = 466
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_CAPTION As Integer = 467
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_ESTIMATE_OBS_MEDIAN_HELPTIP As Integer = 468
Public Const IDS_UI_COMMON_INPUTDATA_LABEL_CAPTION As Integer = 469
Public Const IDS_UI_COMMON_INPUTDATA_LABEL_HELPTIP As Integer = 470
Public Const IDS_UI_COMMON_GNRL_PAGE_CAPTION As Integer = 471
Public Const IDS_UI_COMMON_GNRL_PAGE_HELPTIP As Integer = 472
Public Const IDS_UI_COMMON_INPUTDATA_FRAME_CAPTION As Integer = 473
Public Const IDS_UI_COMMON_INPUTDATA_FRAME_HELPTIP As Integer = 474
Public Const IDS_UI_COMMON_OUTPUT_FRAME_CAPTION As Integer = 475
Public Const IDS_UI_COMMON_OUTPUT_FRAME_HELPTIP As Integer = 476
Public Const IDS_UI_COMMON_OUTPUT_TABLE_LABEL_CAPTION As Integer = 477
Public Const IDS_UI_COMMONM_OUTPUT_TABLE_LABEL_HELPTIP As Integer = 478
Public Const IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_CAPTION As Integer = 479
Public Const IDS_UI_COMMON_OUTPUT_GRAPH_LABEL_HELPTIP As Integer = 480
Public Const IDS_UI_COMMON_OPTIONS_PAGE_CAPTION As Integer = 481
Public Const IDS_UI_COMMON_OPTIONS_PAGE_HELPTIP As Integer = 482
Public Const IDS_UI_COMMON_OUTPUT_TABLE_MEAN_HEADER As Integer = 484
Public Const IDS_UI_COMMON_OUTPUT_TABLE_STDEV_HEADER As Integer = 485
Public Const IDS_UI_COMMON_OUTPUT_TABLE_MEAN_NOTE As Integer = 486
Public Const IDS_UI_COMMON_OUTPUT_TABLE_STDEV_NOTE As Integer = 487
Public Const IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_HEADER As Integer = 492
Public Const IDS_UI_COMMON_OUTPUT_TABLE_MIN_HEADER As Integer = 508
Public Const IDS_UI_COMMON_OUTPUT_TABLE_RANGE_HEADER As Integer = 509
Public Const IDS_UI_COMMON_OUTPUT_TABLE_GAUSSIAN_HEADER As Integer = 512
Public Const IDS_UI_COMMON_INVALID_ALPHA_VALUE_ERROR As Integer = 524
Public Const IDS_UI_COMMON_OUTPUT_SCORE_HEADER As Integer = 527
Public Const IDS_UI_COMMON_OUTPUT_SCORE_NOTE As Integer = 528
Public Const IDS_UI_COMMON_OUTPUT_CV_HEADER As Integer = 529
Public Const IDS_UI_COMMON_OUTPUT_CV_NOTE As Integer = 530
Public Const IDS_UI_COMMON_OUTPUT_PVALUE_NOTE As Integer = 531
Public Const IDS_UI_COMMON_OUTPUT_ALPHA_NOTE As Integer = 533
Public Const IDS_UI_COMMON_OUTPUT_PASS_HEADER As Integer = 537
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CAPTION As Integer = 547
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_HELPTIP As Integer = 548
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_CAPTION As Integer = 549
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_FWD_HELPTIP As Integer = 550
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_CAPTION As Integer = 551
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_FLAT_BACKWD_HELPTIP As Integer = 552
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_CAPTION As Integer = 553
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_LINEAR_HELPTIP As Integer = 554
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_CAPTION As Integer = 555
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_INTERPOLATE_OBS_CSPLINE_HELPTIP As Integer = 556
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REPLACE_WITH_OBS_CAPTION As Integer = 557
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REPLACE_WITH_OBS_HELPTIP As Integer = 558
Public Const IDS_UI_COMMON_OUTPUT_TABLE_LAG_HEADER As Integer = 562
Public Const IDS_UI_COMMON_OUTPUT_TABLE_LAG_NOTE As Integer = 563
Public Const IDS_UI_COMMON_OUTPUT_PRESENT_HEADER As Integer = 570
Public Const IDS_UI_COMMON_GROUPBY_LABEL_CAPTION As Integer = 575
Public Const IDS_UI_COMMON_GROUPBY_LABEL_HELPTIP As Integer = 576
Public Const IDS_UI_COMMON_GROUPBY_COL_LABEL_CAPTION As Integer = 577
Public Const IDS_UI_COMMON_GROUPBY_COL_LABEL_HELPTIP As Integer = 578
Public Const IDS_UI_COMMON_GROUPBY_ROW_LABEL_CAPTION As Integer = 579
Public Const IDS_UI_COMMON_GROUPBY_ROW_LABEL_HELPTIP As Integer = 580
Public Const IDS_UI_COMMON_VARIABLES_MASK_LABEL_CAPTION As Integer = 581
Public Const IDS_UI_COMMON_VARIABLES_MASK_LABEL_HELPTIP As Integer = 582
Public Const IDS_UI_COMMON_GENERAL_INVALID_2DINPUT_ERROR As Integer = 591
Public Const IDS_UI_COMMON_GENERAL_MULTICOLS_ONEROW_INPUT_ERROR As Integer = 592
Public Const IDS_UI_COMMON_GENERAL_INSUFFICIENT_OBS_VARS_ERROR As Integer = 593
Public Const IDS_UI_COMMON_GENERAL_MULTIROWS_ONECOL_INPUT_ERROR As Integer = 594
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_CAPTION As Integer = 627
Public Const IDS_UI_COMMON_MISSING_VALUES_PAGE_REMOVE_XY_OBS_HELPTIP As Integer = 628
Public Const IDS_UI_COMMON_REGRESS_INVALID_X1_INPUT_ERROR As Integer = 629
Public Const IDS_UI_COMMON_REGRESS_INVALID_X1_ONEVAR_INPUT_ERROR As Integer = 630
Public Const IDS_UI_COMMON_REGRESS_INVALID_X1_ROW_OBS_LESS_VAR_INPUT_ERROR As Integer = 631
Public Const IDS_UI_COMMON_REGRESS_INVALID_X1_COL_OBS_LESS_VAR_INPUT_ERROR As Integer = 632
Public Const IDS_UI_COMMON_REGRESS_NOTNUMBER_X1_INPUT_ERROR As Integer = 633
Public Const IDS_UI_COMMON_REGRESS_INVALID_Y1_INPUT_ERROR As Integer = 634
Public Const IDS_UI_COMMON_REGRESS_ONEROWCOL_Y1_INPUT_ERROR As Integer = 635
Public Const IDS_UI_COMMON_REGRESS_MISMATCH_X1_Y1_INPUT_ERROR As Integer = 636
Public Const IDS_UI_COMMON_REGRESS_NOTNUMBER_Y1_INPUT_ERROR As Integer = 637
Public Const IDS_UI_COMMON_REGRESS_INVALID_X2_INPUT_ERROR As Integer = 638
Public Const IDS_UI_COMMON_REGRESS_INVALID_X2_ONEVAR_INPUT_ERROR As Integer = 639
Public Const IDS_UI_COMMON_REGRESS_INVALID_X2_ROW_OBS_LESS_VAR_INPUT_ERROR As Integer = 640
Public Const IDS_UI_COMMON_REGRESS_INVALID_X2_COL_OBS_LESS_VAR_INPUT_ERROR As Integer = 641
Public Const IDS_UI_COMMON_REGRESS_NOTNUMBER_X2_INPUT_ERROR As Integer = 642
Public Const IDS_UI_COMMON_REGRESS_INVALID_Y2_INPUT_ERROR As Integer = 643
Public Const IDS_UI_COMMON_REGRESS_ONEROWCOL_Y2_INPUT_ERROR As Integer = 644
Public Const IDS_UI_COMMON_REGRESS_MISMATCH_X2_Y2_INPUT_ERROR As Integer = 645
Public Const IDS_UI_COMMON_REGRESS_NOTNUMBER_Y2_INPUT_ERROR As Integer = 646
Public Const IDS_UI_COMMON_REGRESS_MISMATCH_X1_X2_INPUT_ERROR As Integer = 647
Public Const IDS_UI_COMMON_OUTPUT_STABLE_HEADER As Integer = 649
Public Const IDS_UI_COMMON_OPTIONS_MAX_LAG_LABEL As Integer = 738
Public Const IDS_UI_COMMON_GENERAL_INPUT_ERROR As Integer = 741
Public Const IDS_UI_COMMON_GENERAL_INPUT_NUMBER_ERROR As Integer = 742
Public Const IDS_UI_COMMON_OUTPUT_LAG_HEADER As Integer = 744
Public Const IDS_UI_COMMON_OUTPUT_LAG_NOTE As Integer = 745
Public Const IDS_UI_COMMON_OUTPUT_UL_HEADER As Integer = 746
Public Const IDS_UI_COMMON_OUTPUT_UL_NOTE As Integer = 747
Public Const IDS_UI_COMMON_OUTPUT_LL_HEADER As Integer = 748
Public Const IDS_UI_COMMON_OUTPUT_LL_NOTE As Integer = 749
Public Const IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_CAPTION As Integer = 759
Public Const IDS_UI_COMMON_MODEL_OPTION_GUESS_PARAMETER_HELPTIP As Integer = 760
Public Const IDS_UI_COMMON_MODEL_OPTION_GOF_CAPTION As Integer = 761
Public Const IDS_UI_COMMON_MODEL_OPTION_GOF_HELPTIP As Integer = 762
Public Const IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_CAPTION As Integer = 763
Public Const IDS_UI_COMMON_MODEL_OPTION_RESID_DIAGNOSIS_HELPTIP As Integer = 764
Public Const IDS_UI_COMMON_MODEL_SPEC_FRAME_LABEL As Integer = 766
Public Const IDS_UI_COMMON_MODEL_OPTIONS_FRAME_LABEL As Integer = 772
Public Const IDS_UI_COMMON_GENERAL_NON_NGATIVE_NUMBER_ERROR As Integer = 773
Public Const IDS_UI_COMMON_MODEL_INVALID_ERROR As Integer = 774
Public Const IDS_UI_COMMON_OUTPUT_GOF_LLF_NOTE As Integer = 776
Public Const IDS_UI_COMMON_OUTPUT_GOF_AIC_NOTE As Integer = 777
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_AVG_NOTE As Integer = 778
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_STD_NOTE As Integer = 779
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_SKEW_NOTE As Integer = 780
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_KURT_NOTE As Integer = 781
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_WNTEST_NOTE As Integer = 782
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_NORMALITY_NOTE As Integer = 783
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_ARCH_NOTE As Integer = 784
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_TARGET_NOTE As Integer = 785
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_SIG_NOTE As Integer = 786
Public Const IDS_UI_COMMON_OUTPUT_TABLE_VALUE_HEADER As Integer = 793
Public Const IDS_UI_COMMON_OUTPUT_GOF_TBL_HEADER As Integer = 794
Public Const IDS_UI_COMMON_OUTPUT_GOF_LLF_HEADER As Integer = 795
Public Const IDS_UI_COMMON_OUTPUT_GOF_AIC_HEADER As Integer = 796
Public Const IDS_UI_COMMON_OUTPUT_RESID_DIAG_HEADER As Integer = 797
Public Const IDS_UI_COMMON_OUTPUT_AVG_HEADER As Integer = 798
Public Const IDS_UI_COMMON_OUTPUT_TABLE_SKEW_HEADER As Integer = 799
Public Const IDS_UI_COMMON_OUTPUT_TABLE_KURTOSIS_HEADER As Integer = 800
Public Const IDS_UI_COMMON_OUTPUT_NOISE_Q_HEADER As Integer = 801
Public Const IDS_UI_COMMON_OUTPUT_TABLE_NORMAL_Q_HEADER As Integer = 802
Public Const IDS_UI_COMMON_OUTPUT_TABLE_ARCH_Q_HEADER As Integer = 803
Public Const IDS_UI_COMMON_OUTPUT_GOF_CHECK_HEADER As Integer = 804
Public Const IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_CAPTION As Integer = 809
Public Const IDS_UI_COMMON_MODEL_OPTION_CALIBRATE_PARAMETER_HELPTIP As Integer = 810
Public Const IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_CAPTION As Integer = 811
Public Const IDS_UI_COMMON_MODEL_OPTION_MAX_ITERATION_HELPTIP As Integer = 812
Public Const IDS_UI_COMMON_GENERAL_INPUT_PERIOD_NUMBER_ERROR As Integer = 839
Public Const IDS_UI_COMMON_INPUT_FACTORS_DATA_LABEL_CAPTION As Integer = 950
Public Const IDS_UI_COMMON_INPUT_FACTORS_DATA_LABEL_HELPTIP As Integer = 951
Public Const IDS_UI_COMMON_MODEL_PAGE_CAPTION As Integer = 953
Public Const IDS_UI_COMMON_FACTORS_INVALID_FACTORS_RANGE_ERROR_MSG As Integer = 960
Public Const IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_ERROR_MSG As Integer = 961
Public Const IDS_UI_COMMON_FACTORS_INSFFICIENT_OBS_ERROR_MSG As Integer = 962
Public Const IDS_UI_COMMON_FACTORS_NOT_NUMBERS_ERROR_MSG As Integer = 963
Public Const IDS_UI_COMMON_RESPONSE_MISSING_INVALID_RANGE_ERROR_MSG As Integer = 964
Public Const IDS_UI_COMMON_RESPONSE_ONE_COLUMN_ERROR_MSG As Integer = 965
Public Const IDS_UI_COMMON_FACTORS_DEPENDENT_ROWS_MISMATCH_ERROR_MSG As Integer = 966
Public Const IDS_UI_COMMON_RESPONSE_NOT_NUMBERS_ERROR_MSG As Integer = 967
Public Const IDS_UI_COMMON_FIRST_ORDER_SUFFIX_ABBREVIATION As Integer = 997
Public Const IDS_UI_COMMON_SECOND_ORDER_SUFFIX_ABBREVIATION As Integer = 998
Public Const IDS_UI_COMMON_THIRD_ORDER_SUFFIX_ABBREVIATION As Integer = 999
Public Const IDS_UI_COMMON_FOURTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1000
Public Const IDS_UI_COMMON_FIFTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1001
Public Const IDS_UI_COMMON_SIXTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1002
Public Const IDS_UI_COMMON_SEVENTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1003
Public Const IDS_UI_COMMON_EIGTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1004
Public Const IDS_UI_COMMON_NINETH_ORDER_SUFFIX_ABBREVIATION As Integer = 1005
Public Const IDS_UI_COMMON_TENTH_ORDER_SUFFIX_ABBREVIATION As Integer = 1006
Public Const IDS_UI_COMMON_OTHER_ORDER_SUFFIX_ABBREVIATION As Integer = 1007
Public Const IDS_UI_COMMON_FIRST_ORDER_PREFIX_ABBREVIATION As Integer = 1008
Public Const IDS_UI_COMMON_SECOND_ORDER_PREFIX_ABBREVIATION As Integer = 1009
Public Const IDS_UI_COMMON_THIRD_ORDER_PREFIX_ABBREVIATION As Integer = 1010
Public Const IDS_UI_COMMON_FOUTH_ORDER_PREFIX_ABBREVIATION As Integer = 1011
Public Const IDS_UI_COMMON_FIFTH_ORDER_PREFIX_ABBREVIATION As Integer = 1012
Public Const IDS_UI_COMMON_SIXTH_ORDER_PREFIX_ABBREVIATION As Integer = 1013
Public Const IDS_UI_COMMON_SEVENTH_ORDER_PREFIX_ABBREVIATION As Integer = 1014
Public Const IDS_UI_COMMON_EIGTH_ORDER_PREFIX_ABBREVIATION As Integer = 1015
Public Const IDS_UI_COMMON_NINETH_ORDER_PREFIX_ABBREVIATION As Integer = 1016
Public Const IDS_UI_COMMON_TENTH_ORDER_PREFIX_ABBREVIATION As Integer = 1017
Public Const IDS_UI_COMMON_OTHER_ORDER_PREFIX_ABBREVIATION As Integer = 1018
Public Const IDS_UI_COMMON_PG_FORECAST_CAPTION As Integer = 1047
Public Const IDS_UI_COMMON_FACTORS_INVALID_FACTORS_FORECAST_RANGE_ERROR_MSG As Integer = 1051
Public Const IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_FORECAST_ERROR_MSG As Integer = 1053
Public Const IDS_UI_COMMON_FACTORS_FORECAST_NOT_NUMBERS_ERROR_MSG As Integer = 1054
Public Const IDS_UI_COMMON_OUTPUT_GOF_SBIC_HEADER As Integer = 1061
Public Const IDS_UI_COMMON_OUTPUT_NUM_OBS_HEADER As Integer = 1062
Public Const IDS_UI_COMMON_OUTPUT_INTERCEPT_CAPTION As Integer = 1078
Public Const IDS_UI_COMMON_OUTPUT_NUM_OBS_ABBREV_HEADER As Integer = 1080
Public Const IDS_UI_COMMON_OUTPUT_GOF_SBIC_NOTE As Integer = 1087
Public Const IDS_UI_COMMON_OUTPUT_NUM_OBS_NOTE As Integer = 1088
Public Const IDS_UI_COMMON_FACTORS_INSFFICIENT_FACTORS_2MORE_ERROR_MSG As Integer = 1129
Public Const IDS_UI_COMMON_REGRESS_INVALID_X_COL_OBS_LESS_VAR_INPUT_ERROR As Integer = 1130
Public Const IDS_UI_COMMON_DEFAULT_CUSTOMER_NAME As Integer = 1168
Public Const IDS_UI_COMMON_DEFAULT_CUSTOMER_EMAIL As Integer = 1169
Public Const IDS_UI_COMMON_DEFAULT_CUSTOMER_COMPANY As Integer = 1170
Public Const IDS_UI_COMMON_OUTPUT_STEP_HEADER As Integer = 1215
Public Const IDS_UI_COMMON_OUTPUT_STD_HEADER As Integer = 1217
Public Const IDS_UI_COMMON_OUTPUT_TS_HEADER As Integer = 1218
Public Const IDS_UI_COMMON_INPUT_PAGE_CAPTION As Integer = 1320
Public Const IDS_UI_COMMON_INPUT_PAGE_HELPTIP As Integer = 1321
Public Const IDS_UI_COMMON_TRANSFORM_PAGE_CAPTION As Integer = 1322
Public Const IDS_UI_COMMON_CLOSE_CAPTION As Integer = 1368
Public Const IDS_UI_COMMON_CLOSE_HELPTIP As Integer = 1369

'  correlogram_frm_def
Public Const IDS_UI_CORRELOGRAM_ACF_METHOD_LABEL As Integer = 1434
Public Const IDS_UI_CORRELOGRAM_ACF_METHOD_HELPTIP As Integer = 1435
Public Const IDS_UI_CORRELOGRAM_SAMPLE_ACF_METHOD As Integer = 1436
Public Const IDS_UI_CORRELOGRAM_SAMPLE_PERIODOGRAM_METHOD As Integer = 1437
Public Const IDS_UI_CORRELOGRAM_SAMPLE_XCF_METHOD As Integer = 1438
Public Const IDS_UI_CORRELOGRAM_FRM_CAPTION As Integer = 718
Public Const IDS_UI_CORRELOGRAM_ACF_FRAME_LABEL As Integer = 719
Public Const IDS_UI_CORRELOGRAM_ACF_FRAME_HELPTIP As Integer = 720
Public Const IDS_UI_CORRELOGRAM_CALC_ACF_LABEL As Integer = 721
Public Const IDS_UI_CORRELOGRAM_CALC_ACF_HELPTIP As Integer = 722
Public Const IDS_UI_CORRELOGRAM_ACF_MAX_LAG_HELPTIP As Integer = 723
Public Const IDS_UI_CORRELOGRAM_ACF_UL_LL_LABEL As Integer = 724
Public Const IDS_UI_CORRELOGRAM_ACF_UL_LL_HELPTIP As Integer = 725
Public Const IDS_UI_CORRELOGRAM_ACF_PLOT_LABEL As Integer = 726
Public Const IDS_UI_CORRELOGRAM_ACF_PLOT_HELPTIP As Integer = 727
Public Const IDS_UI_CORRELOGRAM_PACF_FRAME_LABEL As Integer = 728
Public Const IDS_UI_CORRELOGRAM_PACF_FRAME_HELPTIP As Integer = 729
Public Const IDS_UI_CORRELOGRAM_CALC_PACF_LABEL As Integer = 730
Public Const IDS_UI_CORRELOGRAM_CALC_PACF_HELPTIP As Integer = 731
Public Const IDS_UI_CORRELOGRAM_PACF_MAX_LAG_HELPTIP As Integer = 732
Public Const IDS_UI_CORRELOGRAM_PACF_UL_LL_LABEL As Integer = 733
Public Const IDS_UI_CORRELOGRAM_PACF_UL_LL_HELPTIP As Integer = 734
Public Const IDS_UI_CORRELOGRAM_PACF_PLOT_LABEL As Integer = 735
Public Const IDS_UI_CORRELOGRAM_PACF_PLOT_HELPTIP As Integer = 736
Public Const IDS_UI_CORRELOGRAM_STATUSBAR_CALCULATION_MSG As Integer = 737
Public Const IDS_UI_CORRELOGRAM_ACF_MAX_LAGS_ERROR As Integer = 739
Public Const IDS_UI_CORRELOGRAM_PACF_MAX_LAGS_ERROR As Integer = 740
Public Const IDS_UI_CORRELOGRAM_OUTPUT_TABLE_HEADER As Integer = 743
Public Const IDS_UI_CORRELOGRAM_OUTPUT_ACF_HEADER As Integer = 750
Public Const IDS_UI_CORRELOGRAM_OUTPUT_ACF_NOTE As Integer = 751
Public Const IDS_UI_CORRELOGRAM_OUTPUT_PACF_HEADER As Integer = 752
Public Const IDS_UI_CORRELOGRAM_OUTPUT_PACF_NOTE As Integer = 753
Public Const IDS_UI_CORRELOGRAM_OUTPUT_ERROR_MSG As Integer = 754
Public Const IDS_UI_CORRELOGRAM_OUTPUT_ACF_UL_NOTE As Integer = 755
Public Const IDS_UI_CORRELOGRAM_OUTPUT_ACF_LL_NOTE As Integer = 756
Public Const IDS_UI_CORRELOGRAM_OUTPUT_PACF_UL_NOTE As Integer = 757
Public Const IDS_UI_CORRELOGRAM_OUTPUT_PACF_LL_NOTE As Integer = 758

'  credits_frm_def
Public Const IDS_UI_CREDITS_CAPTION As Integer = 111
Public Const IDS_UI_CREDITS_PG_GNU_CAPTION As Integer = 112
Public Const IDS_UI_CREDITS_PG_GNU_HELPTIP As Integer = 113
Public Const IDS_UI_CREDITS_GNU_INTROMSG_CAPTION As Integer = 114
Public Const IDS_UI_CREDITS_GNU_INTROMSG_HELPTIP As Integer = 115
Public Const IDS_UI_CREDITS_GNU_EULABODY_HELPTIP As Integer = 116
Public Const IDS_UI_CREDITS_PG_X12_CAPTION As Integer = 117
Public Const IDS_UI_CREDITS_PG_X12_HELPTIP As Integer = 118
Public Const IDS_UI_CREDITS_X12_INTROMSG_CAPTION As Integer = 119
Public Const IDS_UI_CREDITS_X12_INTROMSG_HELPTIP As Integer = 120
Public Const IDS_UI_CREDITS_X12_EULABODY_HELPTIP As Integer = 121
Public Const IDS_UI_CREDITS_PG_XLW_CAPTION As Integer = 122
Public Const IDS_UI_CREDITS_PG_XLW_HELPTIP As Integer = 123
Public Const IDS_UI_CREDITS_XLW_INTROMSG_CAPTION As Integer = 124
Public Const IDS_UI_CREDITS_XLW_INTROMSG_HELPTIP As Integer = 125
Public Const IDS_UI_CREDITS_XLW_EULABODY_HELPTIP As Integer = 126
Public Const IDS_UI_CREDITS_PG_ICU_CAPTION As Integer = 127
Public Const IDS_UI_CREDITS_PG_ICU_HELPTIP As Integer = 128
Public Const IDS_UI_CREDITS_ICU_INTROMSG_CAPTION As Integer = 129
Public Const IDS_UI_CREDITS_ICU_INTROMSG_HELPTIP As Integer = 130
Public Const IDS_UI_CREDITS_ICU_EULABODY_HELPTIP As Integer = 131
Public Const IDS_UI_CREDITS_PG_APR_CAPTION As Integer = 132
Public Const IDS_UI_CREDITS_PG_APR_HELPTIP As Integer = 133
Public Const IDS_UI_CREDITS_APR_INTROMSG_CAPTION As Integer = 134
Public Const IDS_UI_CREDITS_APR_INTROMSG_HELPTIP As Integer = 135
Public Const IDS_UI_CREDITS_APR_EULABODY_HELPTIP As Integer = 136
Public Const IDS_UI_CREDITS_PG_MKL_CAPTION As Integer = 137
Public Const IDS_UI_CREDITS_PG_MKL_HELPTIP As Integer = 138
Public Const IDS_UI_CREDITS_MKL_INTROMSG_CAPTION As Integer = 139
Public Const IDS_UI_CREDITS_MKL_INTROMSG_HELPTIP As Integer = 140
Public Const IDS_UI_CREDITS_MKL_EULABODY_HELPTIP As Integer = 141
Public Const IDS_UI_CREDITS_PG_BOOST_CAPTION As Integer = 142
Public Const IDS_UI_CREDITS_PG_BOOST_HELPTIP As Integer = 143
Public Const IDS_UI_CREDITS_BOOST_INTROMSG_CAPTION As Integer = 144
Public Const IDS_UI_CREDITS_BOOST_INTROMSG_HELPTIP As Integer = 145
Public Const IDS_UI_CREDITS_BOOST_EULABODY_HELPTIP As Integer = 146
Public Const IDS_UI_CREDITS_PG_SQLITE_CAPTION As Integer = 147
Public Const IDS_UI_CREDITS_PG_SQLITE_HELPTIP As Integer = 148
Public Const IDS_UI_CREDITS_SQLITE_INTROMSG_CAPTION As Integer = 149
Public Const IDS_UI_CREDITS_SQLITE_INTROMSG_HELPTIP As Integer = 150
Public Const IDS_UI_CREDITS_SQLITE_EULABODY_HELPTIP As Integer = 151
Public Const IDS_UI_CREDITS_PG_QL_CAPTION As Integer = 152
Public Const IDS_UI_CREDITS_PG_QL_HELPTIP As Integer = 153
Public Const IDS_UI_CREDITS_QL_INTROMSG_CAPTION As Integer = 154
Public Const IDS_UI_CREDITS_QL_INTROMSG_HELPTIP As Integer = 155
Public Const IDS_UI_CREDITS_QL_EULABODY_HELPTIP As Integer = 156
Public Const IDS_UI_CREDITS_PG_CLIPS_CAPTION As Integer = 157
Public Const IDS_UI_CREDITS_PG_CLIPS_HELPTIP As Integer = 158
Public Const IDS_UI_CREDITS_CLIPS_INTROMSG_CAPTION As Integer = 159
Public Const IDS_UI_CREDITS_CLIPS_INTROMSG_HELPTIP As Integer = 160
Public Const IDS_UI_CREDITS_CLIPS_EULABODY_HELPTIP As Integer = 161

'  descstat_frm_def
Public Const IDS_UI_DESCSTAT_FRM_CAPTION As Integer = 179
Public Const IDS_UI_DESCSTAT_INPUTDATA_FRAME_CAPTION As Integer = 180
Public Const IDS_UI_DESCSTAT_INPUTDATA_FRAME_HELPTIP As Integer = 181
Public Const IDS_UI_DESCSTAT_STATISTICS_FRAME_CAPTION As Integer = 182
Public Const IDS_UI_DESCSTAT_STATISTICS_FRAME_HELPTIP As Integer = 183
Public Const IDS_UI_DESCSTAT_TESTING_FRAME_CAPTION As Integer = 184
Public Const IDS_UI_DESCSTAT_TESTING_FRAME_HELPTIP As Integer = 185
Public Const IDS_UI_DESCSTAT_STATISTICS_AVG_CHKBX_CAPTION As Integer = 186
Public Const IDS_UI_DESCSTAT_STATISTICS_AVG_CHKBX_HELPTIP As Integer = 187
Public Const IDS_UI_DESCSTAT_STATISTICS_STD_CHKBX_CAPTION As Integer = 188
Public Const IDS_UI_DESCSTAT_STATISTICS_STD_CHKBX_HELPTIP As Integer = 189
Public Const IDS_UI_DESCSTAT_STATISTICS_SKEW_CHKBX_CAPTION As Integer = 190
Public Const IDS_UI_DESCSTAT_STATISTICS_SKEW_CHKBX_HELPTIP As Integer = 191
Public Const IDS_UI_DESCSTAT_STATISTICS_XKURT_CHKBX_CAPTION As Integer = 192
Public Const IDS_UI_DESCSTAT_STATISTICS_XKURT_CHKBX_HELPTIP As Integer = 193
Public Const IDS_UI_DESCSTAT_STATISTICS_MEDIAN_CHKBX_CAPTION As Integer = 194
Public Const IDS_UI_DESCSTAT_STATISTICS_MEDIAN_CHKBX_HELPTIP As Integer = 195
Public Const IDS_UI_DESCSTAT_STATISTICS_MIN_CHKBX_CAPTION As Integer = 196
Public Const IDS_UI_DESCSTAT_STATISTICS_MIN_CHKBX_HELPTIP As Integer = 197
Public Const IDS_UI_DESCSTAT_STATISTICS_MAX_CHKBX_CAPTION As Integer = 198
Public Const IDS_UI_DESCSTAT_STATISTICS_MAX_CHKBX_HELPTIP As Integer = 199
Public Const IDS_UI_DESCSTAT_STATISTICS_Q1_CHKBX_CAPTION As Integer = 200
Public Const IDS_UI_DESCSTAT_STATISTICS_Q1_CHKBX_HELPTIP As Integer = 201
Public Const IDS_UI_DESCSTAT_STATISTICS_Q3_CHKBX_CAPTION As Integer = 202
Public Const IDS_UI_DESCSTAT_STATISTICS_Q3_CHKBX_HELPTIP As Integer = 203
Public Const IDS_UI_DESCSTAT_TESTING_MEAN_CHKBX_CAPTION As Integer = 204
Public Const IDS_UI_DESCSTAT_TESTING_MEAN_CHKBX_HELPTIP As Integer = 205
Public Const IDS_UI_DESCSTAT_TESTING_SKEW_CHKBX_CAPTION As Integer = 206
Public Const IDS_UI_DESCSTAT_TESTING_SKEW_CHKBX_HELPTIP As Integer = 207
Public Const IDS_UI_DESCSTAT_TESTING_XKURT_CHKBX_CAPTION As Integer = 208
Public Const IDS_UI_DESCSTAT_TESTING_XKURT_CHKBX_HELPTIP As Integer = 209
Public Const IDS_UI_DESCSTAT_TESTING_WNTEST_CHKBX_CAPTION As Integer = 210
Public Const IDS_UI_DESCSTAT_TESTING_WNTEST_CHKBX_HELPTIP As Integer = 211
Public Const IDS_UI_DESCSTAT_TESTING_NORMAL_CHKBX_CAPTION As Integer = 212
Public Const IDS_UI_DESCSTAT_TESTING_NORMAL_CHKBX_HELPTIP As Integer = 213
Public Const IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_CAPTION As Integer = 214
Public Const IDS_UI_DESCSTAT_TESTING_ARCH_CHKBX_HELPTIP As Integer = 215
Public Const IDS_UI_DESCSTAT_HELP_BTN_HELPTIP As Integer = 216
Public Const IDS_UI_DESCSTAT_OK_BTN_HELPTIP As Integer = 217
Public Const IDS_UI_DESCSTAT_STATUS_COMPLETE As Integer = 218
Public Const IDS_UI_DESCSTAT_OUTPUT_SIGNIFICANCE_TEST_HEADER As Integer = 219
Public Const IDS_UI_DESCSTAT_OUTPUT_WNTEST_ROW_HEADER As Integer = 400
Public Const IDS_UI_DESCSTAT_OUTPUT_NORMALTEST_ROW_HEADER As Integer = 401
Public Const IDS_UI_DESCSTAT_OUTPUT_ARCHTEST_ROW_HEADER As Integer = 402

'  dft_frm_def
Public Const IDS_UI_DFT_FRM_CAPTION As Integer = 1238
Public Const IDS_UI_DFT_PG_GNRL_HELPTIP As Integer = 1239
Public Const IDS_UI_DFT_PG_OPTIONS_HELPTIP As Integer = 1240
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_FRAME_CAPTION As Integer = 1241
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_FRAME_HELPTIP As Integer = 1242
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_SELECT_CAPTION As Integer = 1243
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_SELECT_HELPTIP As Integer = 1244
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_AMP_SELECT_CAPTION As Integer = 1245
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_AMP_SELECT_HELPTIP As Integer = 1246
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_PHASE_SELECT_CAPTION As Integer = 1247
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_PHASE_SELECT_HELPTIP As Integer = 1248
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_COMPONENT_NUMBER_LABEL_CAPTION As Integer = 1249
Public Const IDS_UI_DFT_OPTIONS_FREQUENCY_COMPONENT_NUMBER_LABEL_HELPTIP As Integer = 1250
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_FRAME_CAPTION As Integer = 1251
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_FRAME_HELPTIP As Integer = 1252
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_SELECT_CAPTION As Integer = 1253
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_SELECT_HELPTIP As Integer = 1254
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_COMP_NUM_LABEL_CAPTION As Integer = 1255
Public Const IDS_UI_DFT_OPTIONS_INPUT_VAR_COMP_NUM_LABEL_HELPTIP As Integer = 1256
Public Const IDS_UI_DFT_OUTPUT_STATUSBAR_CALCULATION_MSG As Integer = 1257
Public Const IDS_UI_DFT_PREPARE_ERROR_MSG As Integer = 1258
Public Const IDS_UI_DFT_OUTPUT_HEADER As Integer = 1259
Public Const IDS_UI_DFT_OUTPUT_FREQ_COMP_CAPTION As Integer = 1260
Public Const IDS_UI_DFT_OUTPUT_FREQ_COMP_NOTE As Integer = 1261
Public Const IDS_UI_DFT_OUTPUT_FREQ_AMP_CAPTION As Integer = 1263
Public Const IDS_UI_DFT_OUTPUT_FREQ_AMP_NOTE As Integer = 1264
Public Const IDS_UI_DFT_OUTPUT_FREQ_PHASE_CAPTION As Integer = 1265
Public Const IDS_UI_DFT_OUTPUT_FREQ_PHASE_NOTE As Integer = 1266
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_OBS_CAPTION As Integer = 1267
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_OBS_NOTE As Integer = 1268
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_FITTED_CAPTION As Integer = 1269
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_FITTED_NOTE As Integer = 1270
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_MAX_COMP_CAPTION As Integer = 1271
Public Const IDS_UI_DFT_OUTPUT_INPUT_VAR_MAX_COMP_NOTE As Integer = 1272

'  edf_frm_def
Public Const IDS_UI_EDF_FRM_CAPTION As Integer = 452
Public Const IDS_UI_EDF_PG_GNRL_HELPTIP As Integer = 453
Public Const IDS_UI_EDF_PG_OPTIONS_HELPTIP As Integer = 454
Public Const IDS_UI_EDF_STATUSBAR_PLOT_CALCULATION_MSG As Integer = 483
Public Const IDS_UI_EDF_OUTPUT_TABLE_HEADER As Integer = 488
Public Const IDS_UI_EDF_OUTPUT_TABLE_EDF_FIELD_HEADER As Integer = 489
Public Const IDS_UI_EDF_OUTPUT_TABLE_XBAR_FIELD_HEADER As Integer = 490
Public Const IDS_UI_EDF_OUTPUT_TABLE_YBAR_FIELD_HEADER As Integer = 491

'  error_msg_def
Public Const IDS_UI_OUTPUT_ERR_NO_ACTIVE_DOC_MSG As Integer = 1166
Public Const IDS_UI_OUTPUT_ERR_INVALID_REGISTRY_MSG As Integer = 1167
Public Const IDS_UI_OUTPUT_ERR_UNKNOWN_BUILD_MSG As Integer = 1171
Public Const IDS_UI_OUTPUT_ERR_INVOKE_SOLVER_FAILED_MSG As Integer = 1172
Public Const IDS_UI_OUTPUT_ERR_RESET_SOLVER_FAILED_MSG As Integer = 1173
Public Const IDS_UI_OUTPUT_ERR_SOLVER_ADD_CONSTRAINT_FAILED_MSG As Integer = 1174
Public Const IDS_UI_OUTPUT_ERR_SOLVER_LAUNCH_FAILED_MSG As Integer = 1175
Public Const IDS_UI_OUTPUT_ERR_SOLVER_CLOSE_FAILED_MSG As Integer = 1176
Public Const IDS_UI_OUTPUT_ERR_SOLVER_START_OPTIMIZATION_FAILED_MSG As Integer = 1177
Public Const IDS_UI_OUTPUT_ERR_SOLVER_NOT_INSTALLED_MSG As Integer = 1178
Public Const IDS_UI_OUTPUT_ERR_SOLVER_NOT_FOUND_MSG As Integer = 1179
Public Const IDS_UI_OUTPUT_ERR_SOLVER_INVALID_ACTIVE_CELL_MSG As Integer = 1180
Public Const IDS_UI_OUTPUT_ERR_CALIBRATION_GOF_NOT_FOUND_MSG As Integer = 1181
Public Const IDS_UI_OUTPUT_ERR_SOLVER_INIT_LOAD_FAILED_MSG As Integer = 1182
Public Const IDS_UI_OUTPUT_ERR_SOLVER_INIT_FAILED_MSG As Integer = 1183
Public Const IDS_UI_OUTPUT_INVALID_TIME_SERIES_MSG As Integer = 1184
Public Const IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_MSG As Integer = 1185
Public Const IDS_UI_OUTPUT_INVALID_UNIVARIATE_TIME_SERIES_VALUES_MSG As Integer = 1186
Public Const IDS_UI_OUTPUT_ERR_FORECAST_INVALID_ACTIVE_CELL_MSG As Integer = 1211
Public Const IDS_UI_OUTPUT_ERR_FORECAST_GLM_INVALID_ACTIVE_CELL_MSG As Integer = 1212
Public Const IDS_UI_OUTPUT_UNSUPPORTED_MODEL_ACTIVE_CELL_MSG As Integer = 1213
Public Const IDS_UI_OUTPUT_MISSING_FORMULA_ACTIVE_CELL_MSG As Integer = 1214
Public Const IDS_UI_NUMXL_XLL_ERR_NOT_ENABLED_MSG As Integer = 1298

'  forecast_frm_def
Public Const IDS_UI_FORECAST_FRM_CAPTION As Integer = 1187
Public Const IDS_UI_FORECAST_MODEL_FRAME_CAPTION As Integer = 1188
Public Const IDS_UI_FORECAST_MODEL_FRAME_HELPTIP As Integer = 1189
Public Const IDS_UI_FORECAST_MODEL_SELECT_LABEL_CAPTION As Integer = 1190
Public Const IDS_UI_FORECAST_MODEL_SELECT_LABEL_HELPTIP As Integer = 1191
Public Const IDS_UI_FORECAST_LATEST_OBS_FRAME_CAPTION As Integer = 1192
Public Const IDS_UI_FORECAST_LATEST_OBS_FRAME_HELPTIP As Integer = 1193
Public Const IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_CAPTION As Integer = 1194
Public Const IDS_UI_FORECAST_LATEST_OBS_VALUES_LABEL_HELPTIP As Integer = 1195
Public Const IDS_UI_FORECAST_LATEST_OBS_FACTORS_LABEL_CAPTION As Integer = 1196
Public Const IDS_UI_FORECAST_LATEST_FACTORS_VALUES_LABEL_HELPTIP As Integer = 1197
Public Const IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_CAPTION As Integer = 1198
Public Const IDS_UI_FORECAST_LATEST_VOL_VALUES_LABEL_HELPTIP As Integer = 1199
Public Const IDS_UI_FORECAST_MODEL_OPTIONS_FRAME_HELPTIP As Integer = 1200
Public Const IDS_UI_FORECAST_MAX_LAGS_LABEL_CAPTION As Integer = 1201
Public Const IDS_UI_FORECAST_MAX_LAGS_LABEL_HELPTIP As Integer = 1202
Public Const IDS_UI_FORECAST_INC_LIMITS_LABEL_CAPTION As Integer = 1203
Public Const IDS_UI_FORECAST_INC_LIMITS_LABEL_HELPTIP As Integer = 1204
Public Const IDS_UI_FORECAST_INC_TERM_STRUCT_LABEL_CAPTION As Integer = 1205
Public Const IDS_UI_FORECAST_INC_TERM_STRUCT_LABEL_HELPTIP As Integer = 1206
Public Const IDS_UI_FORECAST_GLM_INPUTDATA_FACTORS_LABEL_CAPTION As Integer = 1207
Public Const IDS_UI_FORECAST_INC_GRAPH_LABEL_CAPTION As Integer = 1208
Public Const IDS_UI_FORECAST_INC_GRAPH_LABEL_HELPTIP As Integer = 1209
Public Const IDS_UI_FORECAST_PREPARE_ERROR_MSG As Integer = 1210
Public Const IDS_UI_FORECAST_OUTPUT_STEP_HELPTIP As Integer = 1216
Public Const IDS_UI_FORECAST_ERR_NO_SUPPORT_MODEL_MSG As Integer = 1605

'  glm_frm_def
Public Const IDS_UI_GLM_FRM_CAPTION As Integer = 1143
Public Const IDS_UI_GLM_INPUT_Y_CAPTION As Integer = 1144
Public Const IDS_UI_GLM_INPUT_Y_HELPTIP As Integer = 1145
Public Const IDS_UI_GLM_INPUT_X_CAPTION As Integer = 1146
Public Const IDS_UI_GLM_INPUT_X_HELPTIP As Integer = 1147
Public Const IDS_UI_GLM_LINK_FNC_FRAME_CAPTION As Integer = 1148
Public Const IDS_UI_GLM_LINK_FNC_FRAME_HELPTIP As Integer = 1149
Public Const IDS_UI_GLM_LINK_FNC_IDENTITY_CAPTION As Integer = 1150
Public Const IDS_UI_GLM_LINK_FNC_IDENTITY_HELPTIP As Integer = 1151
Public Const IDS_UI_GLM_LINK_FNC_LOG_CAPTION As Integer = 1152
Public Const IDS_UI_GLM_LINK_FNC_LOG_HELPTIP As Integer = 1153
Public Const IDS_UI_GLM_LINK_FNC_LOGIT_CAPTION As Integer = 1154
Public Const IDS_UI_GLM_LINK_FNC_LOGIT_HELPTIP As Integer = 1155
Public Const IDS_UI_GLM_LINK_FNC_PROBIT_CAPTION As Integer = 1156
Public Const IDS_UI_GLM_LINK_FNC_PROBIT_HELPTIP As Integer = 1157
Public Const IDS_UI_GLM_LINK_FNC_CLOLOG_CAPTION As Integer = 1158
Public Const IDS_UI_GLM_LINK_FNC_CLOGLOG_HELPTIP As Integer = 1159
Public Const IDS_UI_GLM_LINK_FNC_BATCHSIZE_CAPTION As Integer = 1160
Public Const IDS_UI_GLM_LINK_FNC_BATCHSIZE_HELPTIP As Integer = 1161
Public Const IDS_UI_GLM_OUTPUT_INVALID_ORDER_MSG As Integer = 1162
Public Const IDS_UI_GLM_OUTPUT_PREPARE_ERROR_MSG As Integer = 1163
Public Const IDS_UI_GLM_OUTPUT_INVALID_BATCH_SIZE_MSG As Integer = 1164
Public Const IDS_UI_GLM_OUTPUT_GOF_CHECK_NOTE As Integer = 1165

'  histogram_frm_def
Public Const IDS_UI_HISTOGRAM_FRM_CAPTION As Integer = 383
Public Const IDS_UI_HISTOGRAM_PG_GNRL_CAPTION As Integer = 384
Public Const IDS_UI_HISTOGRAM_PG_GNRL_HELPTIP As Integer = 385
Public Const IDS_UI_HISTOGRAM_PG_OPTIONS_CAPTION As Integer = 386
Public Const IDS_UI_HISTOGRAM_PG_OPTIONS_HELPTIP As Integer = 387
Public Const IDS_UI_HISTOGRAM_OUTPUT_FRAME_CAPTION As Integer = 388
Public Const IDS_UI_HISTOGRAM_OUTPUT_FRAME_HELPTIP As Integer = 389
Public Const IDS_UI_HISTOGRAM_INPUTDATA_LABEL_CAPTION As Integer = 390
Public Const IDS_UI_HISTOGRAM_INPUTDATA_LABEL_HELPTIP As Integer = 391
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_CAPTION As Integer = 392
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_LABEL_HELPTIP As Integer = 393
Public Const IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_CAPTION As Integer = 394
Public Const IDS_UI_HISTOGRAM_OUTPUT_GRAPH_LABEL_HELPTIP As Integer = 395
Public Const IDS_UI_HISTOGRAM_BINS_FRAME_CAPTION As Integer = 396
Public Const IDS_UI_HISTOGRAM_BINS_FRAME_HELPTIP As Integer = 397
Public Const IDS_UI_HISTOGRAM_OPTIONS_FRAME_CAPTION As Integer = 398
Public Const IDS_UI_HISTOGRAM_OPTIONS_FRAME_HELPTIP As Integer = 399
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_CAPTION As Integer = 403
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_LABEL_HELPTIP As Integer = 404
Public Const IDS_UI_HISTOGRAM_BINS_MANUAL_LABEL_CAPTION As Integer = 405
Public Const IDS_UI_HISTOGRAM_BINS_MANUAL_LABEL_HELPTIP As Integer = 406
Public Const IDS_UI_HISTOGRAM_OPTIONS_CUMULATIVE_CHKBX_CAPTION As Integer = 407
Public Const IDS_UI_HISTOGRAM_OPTIONS_CUMULATIVE_CHKBX_HELPTIP As Integer = 408
Public Const IDS_UI_HISTOGRAM_OPTIONS_NORMALOVERLAY_CHKBX_CAPTION As Integer = 409
Public Const IDS_UI_HISTOGRAM_OPTIONS_NORMALOVERLAY_CHKBX_HELPTIP As Integer = 410
Public Const IDS_UI_HISTOGRAM_OK_BTN_HELPTIP As Integer = 411
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_MANUAL As Integer = 412
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_STURGES As Integer = 413
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SQUAREROOT As Integer = 414
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_SCOTT As Integer = 415
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_FREEDMAN As Integer = 416
Public Const IDS_UI_HISTOGRAM_BINS_ALGO_ITEM_LOSSFUNC As Integer = 417
Public Const IDS_UI_HISTOGRAM_STATUSBAR_PLOT_CALCULATION_MSG As Integer = 418
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_HEADER As Integer = 419
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_BIN_HEADER As Integer = 420
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_LL_HEADER As Integer = 421
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_UL_HEADER As Integer = 422
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_CENTER_HEADER As Integer = 423
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_FREQ_HEADER As Integer = 424
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_CUMFREQ_HEADER As Integer = 425
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_TABLE_NORMAL_HEADER As Integer = 426
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_PLOT_FREQUENCY_HEADER As Integer = 427
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_NUM_BINS_NOTE As Integer = 428
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_AVERAGE_NOTE As Integer = 429
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_STDEV_NOTE As Integer = 430
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_FREQ_NOTE As Integer = 431
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_UL_NOTE As Integer = 432
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_LL_NOTE As Integer = 433
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_CENTER_NOTE As Integer = 434
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_NORMAL_NOTE As Integer = 435
Public Const IDS_UI_HISTOGRAM_OUTPUT_TABLE_CUMFREQ_NOTE As Integer = 436
Public Const IDS_UI_HISTOGRAM_OUTPUT_HISTOGRAM_PLOT_HEADER As Integer = 514

'  kde_frm_def
Public Const IDS_UI_KDE_FRM_CAPTION As Integer = 451
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_LABEL_CAPTION As Integer = 493
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_LABEL_HELPTIP As Integer = 494
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_OPTIMAL_BW_CHKBX_CAPTION As Integer = 495
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_OPTIMAL_BW_CHKBX_HELPTIP As Integer = 496
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_MANUAL_BW_LABEL_CAPTION As Integer = 497
Public Const IDS_UI_KDE_OPTIONPG_KERNEL_MANUAL_BW_LABEL_HELPTIP As Integer = 498
Public Const IDS_UI_KDE_OPTIONPG_OUTPUT_TABLESIZE_LABEL_CAPTION As Integer = 499
Public Const IDS_UI_KDE_OPTIONPG_OUTPUT_TABLESIZE_LABEL_HELPTIP As Integer = 500
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_GAUSSIAN As Integer = 501
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_UNIFORM As Integer = 502
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIANGULAR As Integer = 503
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_QUATRIC As Integer = 504
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_TRIWEIGHT As Integer = 505
Public Const IDS_UI_KDE_KERNEL_FUNCTION_ITEM_EPANECHNIKOV As Integer = 506
Public Const IDS_UI_KDE_STATUSBAR_CALCULATION_MSG As Integer = 507
Public Const IDS_UI_KDE_OUTPUT_TABLE_HEADER As Integer = 510
Public Const IDS_UI_KDE_OUTPUT_TABLE_KDE_COL_HEADER As Integer = 511
Public Const IDS_UI_KDE_OUTPUT_TABLE_SIZE_COL_HEADER As Integer = 513

'  mlr_frm_def
Public Const IDS_UI_MLR_FRM_CAPTION As Integer = 1019
Public Const IDS_UI_MLR_PG_GNRL_HELPTIP As Integer = 1020
Public Const IDS_UI_MLR_INPUT_X_CAPTION As Integer = 1021
Public Const IDS_UI_MLR_INPUT_X_HELPTIP As Integer = 1022
Public Const IDS_UI_MLR_INPUT_Y_CAPTION As Integer = 1023
Public Const IDS_UI_MLR_INPUT_Y_HELPTIP As Integer = 1024
Public Const IDS_UI_MLR_PG_OPTIONS_HELPTIP As Integer = 1025
Public Const IDS_UI_MLR_INTERCEPT_CAPTION As Integer = 1026
Public Const IDS_UI_MLR_INTERCEPT_HELPTIP As Integer = 1027
Public Const IDS_UI_MLR_OUTPUT_REGRESS_STATS_CAPTION As Integer = 1028
Public Const IDS_UI_MLR_OUTPUT_REGRESS_STATS_HELPTIP As Integer = 1029
Public Const IDS_UI_MLR_OUTPUT_ANOVA_CAPTION As Integer = 1030
Public Const IDS_UI_MLR_OUTPUT_ANOVA_HELPTIP As Integer = 1031
Public Const IDS_UI_MLR_OUTPUT_COEFF_STAT_CAPTION As Integer = 1032
Public Const IDS_UI_MLR_OUTPUT_COEFF_STAT_HELPTIP As Integer = 1033
Public Const IDS_UI_MLR_OUTPUT_RESIDUALS_DIAGNOSIS_CAPTION As Integer = 1034
Public Const IDS_UI_MLR_OUTPUT_RESIDUALS_DIAGNOSIS_HELPTIP As Integer = 1035
Public Const IDS_UI_MLR_AUTOMODEL_FRAME_CAPTION As Integer = 1036
Public Const IDS_UI_MLR_AUTOMODEL_FRAME_HELPTIP As Integer = 1037
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_CAPTION As Integer = 1038
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_HELPTIP As Integer = 1039
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_CAPTION As Integer = 1040
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_FWD_HELPTIP As Integer = 1041
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_CAPTION As Integer = 1042
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_BKWD_HELPTIP As Integer = 1044
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_CAPTION As Integer = 1045
Public Const IDS_UI_MLR_AUTOMODEL_STEPWISE_BIDI_HELPTIP As Integer = 1046
Public Const IDS_UI_MLR_PG_FORECAST_CAPTION As Integer = 1048
Public Const IDS_UI_MLR_INPUT_X_FORECAST_HELPTIP As Integer = 1049
Public Const IDS_UI_MLR_STATUSBAR_CALCULATION_MSG As Integer = 1055
Public Const IDS_UI_MLR_OUTPUT_ERROR_MSG As Integer = 1056
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STAT_MSG As Integer = 1057
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_MSG As Integer = 1058
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_ARSQ_MSG As Integer = 1059
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_MSG As Integer = 1060
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_DF_MSG As Integer = 1063
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_SS_MSG As Integer = 1064
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_MS_MSG As Integer = 1065
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_F_MSG As Integer = 1066
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_HEADER_MSG As Integer = 1067
Public Const IDS_UI_MLR_OUTPUT_TBL_RESIDUALS_HEADER_MSG As Integer = 1068
Public Const IDS_UI_MLR_OUTPUT_TBL_TOTAL_HEADER_MSG As Integer = 1069
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_HEADER_MSG As Integer = 1070
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_ABREV_MSG As Integer = 1071
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_TSTAT_MSG As Integer = 1072
Public Const IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_HEADER_MSG As Integer = 1074
Public Const IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_FWD_HEADER_MSG As Integer = 1075
Public Const IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_BKWD_HEADER_MSG As Integer = 1076
Public Const IDS_UI_MLR_OUTPUT_TBL_STEPWISE_REGRESSION_BIDI_HEADER_MSG As Integer = 1077
Public Const IDS_UI_MLR_OUTPUT_TBL_FORECAST_HEADER_MSG As Integer = 1079
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_RSQ_NOTE As Integer = 1081
Public Const IDS_UI_MLR_OUTPUT_LINEAR_REGRESSION_HEADER As Integer = 1082
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_ARSQ_NOTE As Integer = 1084
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_STDERR_NOTE As Integer = 1085
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_DF_NOTE As Integer = 1089
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_SS_NOTE As Integer = 1090
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_MS_NOTE As Integer = 1091
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_F_NOTE As Integer = 1092
Public Const IDS_UI_MLR_OUTPUT_TBL_SIG_NOTE As Integer = 1093
Public Const IDS_UI_MLR_OUTPUT_TABLE_VALUE_NOTE As Integer = 1094
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_STDERR_NOTE As Integer = 1096
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_COEFF_TSTAT_NOTE As Integer = 1097
Public Const IDS_UI_MLR_OUTPUT_COEFF_SIG_NOTE As Integer = 1098
Public Const IDS_UI_MLR_OUTPUT_TBL_REGRESSION_FORECAST_STDERR_NOTE As Integer = 1099

'  normality_test_frm_def
Public Const IDS_UI_NORMALITY_TEST_FRM_CAPTION As Integer = 515
Public Const IDS_UI_NORMALITY_TEST_PG_GNRL_HELPTIP As Integer = 516
Public Const IDS_UI_NORMALITY_TEST_PG_OPTIONS_HELPTIP As Integer = 517
Public Const IDS_UI_NORMALITY_TEST_JARQUE_BERRA_CAPTION As Integer = 518
Public Const IDS_UI_NORMALITY_TEST_JARQUE_BERRA_HELPTIP As Integer = 519
Public Const IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_CAPTION As Integer = 520
Public Const IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_HELPTIP As Integer = 521
Public Const IDS_UI_NORMALITY_TEST_DOORNICK_CHI_CAPTION As Integer = 522
Public Const IDS_UI_NORMALITY_TEST_DOORNICK_CHI_HELPTIP As Integer = 523
Public Const IDS_UI_NORMALITY_TEST_STATUSBAR_CALCULATION_MSG As Integer = 525
Public Const IDS_UI_NORMALITY_TEST_OUTPUT_TABLE_HEADER As Integer = 526
Public Const IDS_UI_NORMALITY_TEST_OUTPUT_PASS_TEST_NOTE As Integer = 532
Public Const IDS_UI_NORMALITY_TEST_JARQUE_BERRA_BRIEF As Integer = 534
Public Const IDS_UI_NORMALITY_TEST_SHAPIRO_WILK_BRIEF As Integer = 535
Public Const IDS_UI_NORMALITY_TEST_DOORNICK_CHI_BRIEF As Integer = 536

'  numxll_def
Public Const IDS_XLL_PRODUCT_NAME As Integer = 1
Public Const IDS_XLL_RELEASE_NAME As Integer = 2
Public Const IDS_XLL_REGISTER_STARTED As Integer = 3
Public Const IDS_XLL_REGISTER_FINISHED_SUCCESS As Integer = 4
Public Const IDS_XLL_LICENSE_INVALID_OR_MISSING As Integer = 5
Public Const IDS_XLL_LICENSE_INACTIVE_KEY As Integer = 6
Public Const IDS_XLL_LICENSE_INVALID_LICENSE As Integer = 7
Public Const IDS_XLL_LICENSE_TRIAL_DAYS_INFO As Integer = 8
Public Const IDS_XLL_LICENSE_TRIAL_EXPIRED_INFO As Integer = 9
Public Const IDS_XLL_LICENSE_MISSING_EMPTY_KEY As Integer = 10
Public Const IDS_XLL_LOG_INIT_FAILED_FILE As Integer = 11
Public Const IDS_XLL_NAG_PERM_ACTIVATE As Integer = 12
Public Const IDS_XLL_FUNCTIONS_XML_FILENAME As Integer = 13
Public Const IDS_XLL_FUNCTIONXML_INVALID_OR_MISSING As Integer = 14
Public Const IDS_XLL_INVALID_OR_MISSING_CONF_FILE As Integer = 15
Public Const IDS_XLL_LICENSE_GRACEPERIOD_DAYS_INFO As Integer = 16
Public Const IDS_XLL_DISABLING_ADDIN_STARTED As Integer = 17
Public Const IDS_XLL_DISABLED_ADDIN_COMPLETE As Integer = 18
Public Const IDS_XLL_ADDIN_IS_DISABLED As Integer = 19
Public Const IDS_XLL_ADDIN_LOADED_THANKYOU As Integer = 20
Public Const IDS_XLL_NAG_BTN_UNLOCK_CAPTION As Integer = 21
Public Const IDS_XLL_NAG_BTN_UNLOCK_HELPTIP As Integer = 22
Public Const IDS_XLL_NAG_BTN_BUY_CAPTION As Integer = 23
Public Const IDS_XLL_NAG_BTN_BUY_HELPTIP As Integer = 24
Public Const IDS_XLL_NAG_BTN_CONTINUE_CAPTION As Integer = 25
Public Const IDS_XLL_NAG_BTN_CONTINUE_HELPTIP As Integer = 26
Public Const IDS_XLL_NAG_BTN_ACTIVATE_CAPTION As Integer = 27
Public Const IDS_XLL_NAG_BTN_ACTIVATE_HELPTIP As Integer = 28
Public Const IDS_XLL_NAG_BTN_ENTERLICENSE_CAPTION As Integer = 29
Public Const IDS_XLL_NAG_BTN_ENTERLICENSE_HELPTIP As Integer = 30
Public Const IDS_XLL_UPDATE_FOUND_ONLINE_MSG As Integer = 1306
Public Const IDS_XLL_SUBSCRIPTION_UPDATE_FOUND_MSG As Integer = 1307

'  pca_frm_def
Public Const IDS_UI_PCA_FRM_CAPTION As Integer = 1100
Public Const IDS_UI_PCA_PG_GNRL_HELPTIP As Integer = 1101
Public Const IDS_UI_PCA_PG_OPTIONS_HELPTIP As Integer = 1102
Public Const IDS_UI_PCA_STANDARDIZE_INPUT_LABEL_CAPTION As Integer = 1103
Public Const IDS_UI_PCA_STANDARDIZE_INPUT_LABEL_HELPTIP As Integer = 1104
Public Const IDS_UI_PCA_PRINCIPAL_COMPONENT_LABEL_CAPTION As Integer = 1105
Public Const IDS_UI_PCA_PRINCIPAL_COMPONENT_LABEL_HELPTIP As Integer = 1106
Public Const IDS_UI_PCA_PC_SELECTION_LABEL_CAPTION As Integer = 1107
Public Const IDS_UI_PCA_PC_SELECTION_LABEL_HELPTIP As Integer = 1108
Public Const IDS_UI_PCA_PC_VARIANCE_LABEL_CAPTION As Integer = 1109
Public Const IDS_UI_PCA_PC_VARIANCE_LABEL_HELPTIP As Integer = 1110
Public Const IDS_UI_PCA_PC_VARIANCE_PCT_LABEL_CAPTION As Integer = 1111
Public Const IDS_UI_PCA_PC_VARIANCE_PCT_LABEL_HELPTIP As Integer = 1112
Public Const IDS_UI_PCA_PC_LOADING_LABEL_CAPTION As Integer = 1113
Public Const IDS_UI_PCA_PC_LOADING_LABEL_HELPTIP As Integer = 1114
Public Const IDS_UI_PCA_PC_VALUES_LABEL_CAPTION As Integer = 1115
Public Const IDS_UI_PCA_PC_VALUES_LABEL_HELPTIP As Integer = 1116
Public Const IDS_UI_PCA_VARS_FRAME_LABEL_CAPTION As Integer = 1117
Public Const IDS_UI_PCA_VARS_FRAME_LABEL_HELPTIP As Integer = 1118
Public Const IDS_UI_PCA_VARS_SELECTION_LABEL_CAPTION As Integer = 1119
Public Const IDS_UI_PCA_VARS_SELECTION_LABEL_HELPTIP As Integer = 1120
Public Const IDS_UI_PCA_VARS_NUM_PCS_LABEL_CAPTION As Integer = 1121
Public Const IDS_UI_PCA_VARS_NUM_PCS_LABEL_HELPTIP As Integer = 1122
Public Const IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_CAPTION As Integer = 1123
Public Const IDS_UI_PCA_VARS_FINAL_COMMUNALITY_LABEL_HELPTIP As Integer = 1124
Public Const IDS_UI_PCA_VARS_LOADING_LABEL_CAPTION As Integer = 1125
Public Const IDS_UI_PCA_VARS_LOADING_LABEL_HELPTIP As Integer = 1126
Public Const IDS_UI_PCA_VARS_VALUES_LABEL_CAPTION As Integer = 1127
Public Const IDS_UI_PCA_VARS_VALUES_LABEL_HELPTIP As Integer = 1128
Public Const IDS_UI_PCA_STATUSBAR_CALCULATION_MSG As Integer = 1131
Public Const IDS_UI_PCA_OUTPUT_PC_PROPOTION_MSG As Integer = 1132
Public Const IDS_UI_PCA_OUTPUT_PC_PROPOTION_NOTE As Integer = 1133
Public Const IDS_UI_PCA_OUTPUT_PC_CUM_PROPOTION_MSG As Integer = 1134
Public Const IDS_UI_PCA_OUTPUT_PC_CUM_PROPOTION_NOTE As Integer = 1135
Public Const IDS_UI_PCA_OUTPUT_PC_LOADING_NOTE As Integer = 1136
Public Const IDS_UI_PCA_OUTPUT_VARS_VALUES_NOTE As Integer = 1137
Public Const IDS_UI_PCA_OUTPUT_VAR_LOADING_NOTE As Integer = 1138
Public Const IDS_UI_PCA_OUTPUT_PC_VALUES_NOTE As Integer = 1139
Public Const IDS_UI_PCA_OUTPUT_PC_VARIANCE_NOTE As Integer = 1140
Public Const IDS_UI_PCA_OUTPUT_PC_LOADING_MSG As Integer = 1141
Public Const IDS_UI_PCA_OUTPUT_VAR_LOADING_MSG As Integer = 1142

'  periodogram_frm_def
Public Const IDS_UI_PERIODGRM_FRM_CAPTION As Integer = 1273
Public Const IDS_UI_PERIODGRM_PG_GNRL_HELPTIP As Integer = 1274
Public Const IDS_UI_PERIODGRM_PG_OPTIONS_HELPTIP As Integer = 1275
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_FRAME_CAPTION As Integer = 1276
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_FRAME_HELPTIP As Integer = 1277
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_AUTO_CAPTION As Integer = 1278
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_AUTO_HELPTIP As Integer = 1279
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DETREND_CAPTION As Integer = 1280
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DETREND_HELPTIP As Integer = 1281
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DIFFERENCE_CAPTION As Integer = 1282
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_DIFFERENCE_HELPTIP As Integer = 1283
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_CAPTION As Integer = 1284
Public Const IDS_UI_PERIODGRM_OPTIONS_DATA_TEATMENT_NONE_HELPTIP As Integer = 1285
Public Const IDS_UI_PERIODGRM_OPTIONS_PLOT_PERIODOGRAM_CAPTION As Integer = 1286
Public Const IDS_UI_PERIODGRM_OPTIONS_PLOT_PERIODOGRAM_HELPTIP As Integer = 1287
Public Const IDS_UI_PERIODGRM_OPTIONS_MAX_COMPONENTS_LABEL_CAPTION As Integer = 1288
Public Const IDS_UI_PERIODGRM_OPTIONS_MAX_COMPONENTS_LABEL_HELPTIP As Integer = 1289
Public Const IDS_UI_PERIODGRM_OUTPUT_STATUSBAR_CALCULATION_MSG As Integer = 1290
Public Const IDS_UI_PERIODGRM_PREPARE_ERROR_MSG As Integer = 1291
Public Const IDS_UI_PERIODGRM_OUTPUT_TBL_HEADER As Integer = 1292
Public Const IDS_UI_PERIODGRM_OUTPUT_TBL_COMP_CAPTION As Integer = 1293
Public Const IDS_UI_PERIODGRM_OUTPUT_TBL_COMP_NOTE As Integer = 1294
Public Const IDS_UI_PERIODGRM_OUTPUT_TBL_VALUE_CAPTION As Integer = 1295
Public Const IDS_UI_PERIODGRM_OUTPUT_TBL_VALUE_NOTE As Integer = 1296
Public Const IDS_UI_PERIODGRM_OUTPUT_PLOT_HEADER As Integer = 1297

'  qqplot_frm_def
Public Const IDS_UI_QQPLOT_FRM_CAPTION As Integer = 437
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_LABEL_HELPTIP As Integer = 438
Public Const IDS_UI_QQPLOT_OUTPUT_GRAPH_LABEL_HELPTIP As Integer = 439
Public Const IDS_UI_QQPLOT_OK_BTN_HELPTIP As Integer = 440
Public Const IDS_UI_QQPLOT_NUMQUANTILES_LABEL_CAPTION As Integer = 441
Public Const IDS_UI_QQPLOT_NUMQUANTILES_LABEL_HELPTIP As Integer = 442
Public Const IDS_UI_QQPLOT_STATUSBAR_PLOT_CALCULATION_MSG As Integer = 443
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_MEAN_HEADER As Integer = 444
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_STDEV_HEADER As Integer = 445
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_QQPLOT_HEADER As Integer = 446
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_EMPIRICAL_HEADER As Integer = 447
Public Const IDS_UI_QQPLOT_OUTPUT_TABLE_Q_HEADER As Integer = 448
Public Const IDS_UI_QQPLOT_OUTPUT_PLOT_THEORETICAL_DIST_HEADER As Integer = 449
Public Const IDS_UI_QQPLOT_OUTPUT_PLOT_EMPIRICALL_DIST_HEADER As Integer = 450

'  regression_stability_test_frm_def
Public Const IDS_UI_REGRESS_STABILITY_TEST_FRM_CAPTION As Integer = 606
Public Const IDS_UI_REGRESS_STABILITY_TEST_PG_GNRL_HELPTIP As Integer = 607
Public Const IDS_UI_REGRESS_STABILITY_TEST_PG_OPTIONS_HELPTIP As Integer = 608
Public Const IDS_UI_REGRESS_STABILITY_TEST_DATASET_ONE_FRAME_CAPTION As Integer = 609
Public Const IDS_UI_REGRESS_STABILITY_TEST_DATASET_ONE_FRAME_HELPTIP As Integer = 610
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_X1_CAPTION As Integer = 611
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_X1_HELPTIP As Integer = 612
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y1_CAPTION As Integer = 613
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y1_HELPTIP As Integer = 614
Public Const IDS_UI_REGRESS_STABILITY_TEST_DATASET_TWO_FRAME_CAPTION As Integer = 615
Public Const IDS_UI_REGRESS_STABILITY_TEST_DATASET_TWO_FRAME_HELPTIP As Integer = 616
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_X2_CAPTION As Integer = 617
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_X2_HELPTIP As Integer = 618
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y2_CAPTION As Integer = 619
Public Const IDS_UI_REGRESS_STABILITY_TEST_INPUT_Y2_HELPTIP As Integer = 620
Public Const IDS_UI_REGRESS_STABILITY_TEST_INTERCEPT_CAPTION As Integer = 621
Public Const IDS_UI_REGRESS_STABILITY_TEST_INTERCEPT_HELPTIP As Integer = 622
Public Const IDS_UI_REGRESS_STABILITY_TEST_METHODS_FRAME_CAPTION As Integer = 623
Public Const IDS_UI_REGRESS_STABILITY_TEST_METHODS_FRAME_HELPTIP As Integer = 624
Public Const IDS_UI_REGRESS_STABILITY_TEST_CHOW_TEST_CAPTION As Integer = 625
Public Const IDS_UI_REGRESS_STABILITY_TEST_CHOW_TEST_HELPTIP As Integer = 626
Public Const IDS_UI_REGRESS_STABILITY_TEST_STATUSBAR_CALCULATION_MSG As Integer = 648
Public Const IDS_UI_REGRESS_STABILITY_TEST_OUTPUT_STABLE_NOTE As Integer = 650
Public Const IDS_UI_REGRESS_STABILITY_TEST_OUTPUT_TABLE_HEADER As Integer = 651

'  sarima_frm_def
Public Const IDS_UI_SARIMA_FRM_CAPTION As Integer = 815
Public Const IDS_UI_SARIMA_MODEL_SPERIOD_LABEL As Integer = 816
Public Const IDS_UI_SARIMA_MODEL_SPERIOD_HELPTIP As Integer = 817
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_AR_LABEL As Integer = 818
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_AR_HELPTIP As Integer = 819
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_MA_LABEL As Integer = 820
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_MA_HELPTIP As Integer = 821
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_LABEL As Integer = 822
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_INTEGRAL_HELPTIP As Integer = 823
Public Const IDS_UI_SARIMA_OUTPUT_ERROR_MSG As Integer = 824
Public Const IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_AR_PARAM_NOTE As Integer = 825
Public Const IDS_UI_SARIMA_OUTPUT_NON_SEASONAL_MA_PARAM_NOTE As Integer = 826
Public Const IDS_UI_SARIMA_OUTPUT_SEASONAL_AR_PARAM_NOTE As Integer = 828
Public Const IDS_UI_SARIMA_OUTPUT_SEASONAL_MA_PARAM_NOTE As Integer = 829
Public Const IDS_UI_SARIMA_OUTPUT_SEASONAL_INTEGRATION_ORDER_PARAM_NOTE As Integer = 830
Public Const IDS_UI_SARIMA_OUTPUT_SEASONAL_LENGTH_PARAM_NOTE As Integer = 831
Public Const IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_LABEL As Integer = 832
Public Const IDS_UI_SARIMA_MODEL_NON_SEASONAL_HEADER_HELPTIP As Integer = 833
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_LABEL As Integer = 834
Public Const IDS_UI_SARIMA_MODEL_SEASONAL_HEADER_HELPTIP As Integer = 835

'  simulate_frm_def
Public Const IDS_UI_MCSIMULATE_FRM_CAPTION As Integer = 1219
Public Const IDS_UI_SIMULATE_FRM_CAPTION As Integer = 1220
Public Const IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_CAPTION As Integer = 1221
Public Const IDS_UI_SIMULATE_NUMBER_PATHS_LABEL_HELPTIP As Integer = 1222
Public Const IDS_UI_SIMULATE_SEED_LABEL_CAPTION As Integer = 1223
Public Const IDS_UI_SIMULATE_SEED_LABEL_HELPTIP As Integer = 1224
Public Const IDS_UI_SIMULATE_PREPARE_ERROR_MSG As Integer = 1225
Public Const IDS_UI_MCSIMULATE_TARGET_CELL_LABEL_CAPTION As Integer = 1226
Public Const IDS_UI_MCSIMULATE_TARGET_CELL_LABEL_HELPTIP As Integer = 1227
Public Const IDS_UI_MCSIMULATE_CALC_RANGE_FRAME_CAPTION As Integer = 1228
Public Const IDS_UI_MCSIMULATE_CALC_RANGE_FRAME_HELPTIP As Integer = 1229
Public Const IDS_UI_MCSIMULATE_CALC_RNG_WKBK_LABEL_CAPTION As Integer = 1230
Public Const IDS_UI_MCSIMULATE_CALC_RNG_WKBK_LABEL_HELPTIP As Integer = 1231
Public Const IDS_UI_MCSIMULATE_CALC_RNG_WKSHT_LABEL_CAPTION As Integer = 1232
Public Const IDS_UI_MCSIMULATE_CALC_RNG_WKSHT_LABEL_HELPTIP As Integer = 1233
Public Const IDS_UI_MCSIMULATE_CALC_RNG_CUSTOM_LABEL_CAPTION As Integer = 1234
Public Const IDS_UI_MCSIMULATE_CALC_RNG_CUSTOM_LABEL_HELPTIP As Integer = 1235
Public Const IDS_UI_SIMULATE_OUTPUT_SIMULATION_HEADER As Integer = 1236
Public Const IDS_UI_SIMULATE_OUTPUT_SIMULATION_NO_HEADER As Integer = 1237
Public Const IDS_UI_SIMULATE_ERR_NO_SUPPORT_MODEL_MSG As Integer = 1604

'  stationary_test_frm_def
Public Const IDS_UI_STATIONARY_TEST_FRM_CAPTION As Integer = 652
Public Const IDS_UI_STATIONARY_TEST_PG_GNRL_HELPTIP As Integer = 653
Public Const IDS_UI_STATIONARY_TEST_PG_OPTIONS_HELPTIP As Integer = 654
Public Const IDS_UI_STATIONARY_TEST_METHODS_FRAME_LABEL As Integer = 655
Public Const IDS_UI_STATIONARY_TEST_METHODS_FRAME_HELPTIP As Integer = 656
Public Const IDS_UI_STATIONARY_TEST_ADF_METHOD_LABEL As Integer = 657
Public Const IDS_UI_STATIONARY_TEST_ADF_METHOD_HELPTIP As Integer = 658
Public Const IDS_UI_STATIONARY_TEST_KPSS_METHOD_LABEL As Integer = 659
Public Const IDS_UI_STATIONARY_TEST_KPSS_METHOD_HELPTIP As Integer = 660
Public Const IDS_UI_STATIONARY_TEST_DOWN_LABEL As Integer = 661
Public Const IDS_UI_STATIONARY_TEST_DOWN_HELPTIP As Integer = 662
Public Const IDS_UI_STATIONARY_TEST_MAX_LAG_LABEL As Integer = 663
Public Const IDS_UI_STATIONARY_TEST_MAX_LAG_HELPTIP As Integer = 664
Public Const IDS_UI_STATIONARY_TEST_SCENARIOS_FRAME_LABEL As Integer = 665
Public Const IDS_UI_STATIONARY_TEST_SCENARIOS_FRAME_HELPTIP As Integer = 666
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_LABEL As Integer = 667
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_HELPTIP As Integer = 668
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_LABEL As Integer = 669
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_HELPTIP As Integer = 670
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_LABEL As Integer = 671
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_HELPTIP As Integer = 672
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_LABEL As Integer = 673
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_HELPTIP As Integer = 674
Public Const IDS_UI_STATIONARY_TEST_STATUSBAR_CALCULATION_MSG As Integer = 675
Public Const IDS_UI_STATIONARY_TEST_OUTPUT_TABLE_HEADER As Integer = 676
Public Const IDS_UI_STATIONARY_TEST_OUTPUT_PASS_TEST_NOTE As Integer = 677
Public Const IDS_UI_STATIONARY_TEST_OUTPUT_PASS_TEST_LABEL As Integer = 678
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_NO_CONST_BRIEF As Integer = 679
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_ONLY_CONST_BRIEF As Integer = 680
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_TREND_ONLY_BRIEF As Integer = 681
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_BRIEF As Integer = 682
Public Const IDS_UI_STATIONARY_TEST_SCENARIO_CONST_TREND_SQUARED_BRIEF As Integer = 683
Public Const IDS_UI_STATIONARY_TEST_ADF_METHOD_BRIEF As Integer = 684
Public Const IDS_UI_STATIONARY_TEST_KPSS_METHOD_BRIEF As Integer = 685

'  toolbar_def
Public Const IDS_GRP_SUMMARY_STAT_LABEL As Integer = 220
Public Const IDS_GAL_SUMSTAT_DESCSTAT_LABEL As Integer = 221
Public Const IDS_GAL_SUMSTAT_DESCSTAT_SCREENTIP As Integer = 222
Public Const IDS_GAL_SUMSTAT_DESCSTAT_SUPERTIP As Integer = 223
Public Const IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_LABEL As Integer = 224
Public Const IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_SCREENTIP As Integer = 225
Public Const IDS_BTN_SUMSTAT_DESCSTAT_SUMSTAT_SUPERTIP As Integer = 226
Public Const IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_LABEL As Integer = 227
Public Const IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_SCREENTIP As Integer = 228
Public Const IDS_BTN_SUMSTAT_DESCSTAT_HISTOGRAM_SUPERTIP As Integer = 229
Public Const IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_LABEL As Integer = 230
Public Const IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_SCREENTIP As Integer = 231
Public Const IDS_BTN_SUMSTAT_DESCSTAT_QQPLOT_SUPERTIP As Integer = 232
Public Const IDS_BTN_SUMSTAT_DESCSTAT_EDF_LABEL As Integer = 233
Public Const IDS_BTN_SUMSTAT_DESCSTAT_EDF_SCREENTIP As Integer = 234
Public Const IDS_BTN_SUMSTAT_DESCSTAT_EDF_SUPERTIP As Integer = 235
Public Const IDS_BTN_SUMSTAT_DESCSTAT_KDE_LABEL As Integer = 236
Public Const IDS_BTN_SUMSTAT_DESCSTAT_KDE_SCREENTIP As Integer = 237
Public Const IDS_BTN_SUMSTAT_DESCSTAT_KDE_SUPERTIP As Integer = 238
Public Const IDS_GAL_SUMSTAT_STATTEST_lABEL As Integer = 239
Public Const IDS_GAL_SUMSTAT_STATTEST_SCREENTIP As Integer = 240
Public Const IDS_GAL_SUMSTAT_STATTEST_SUPERTIP As Integer = 241
Public Const IDS_BTN_SUMSTAT_STATTEST_NORMALITY_LABEL As Integer = 242
Public Const IDS_BTN_SUMSTAT_STATTEST_NORMALITY_SCREENTIP As Integer = 243
Public Const IDS_BTN_SUMSTAT_STATTEST_NORMALITY_SUPERTIP As Integer = 244
Public Const IDS_BTN_SUMSTAT_STATTEST_ANOVA_LABEL As Integer = 245
Public Const IDS_BTN_SUMSTAT_STATTEST_ANOVA_SCREENTIP As Integer = 246
Public Const IDS_BTN_SUMSTAT_STATTEST_ANOVA_SUPERTIP As Integer = 247
Public Const IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_LABEL As Integer = 248
Public Const IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_SCREENTIP As Integer = 249
Public Const IDS_BTN_SUMSTAT_STATTEST_COLLINEARITY_SUPERTIP As Integer = 250
Public Const IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_LABEL As Integer = 251
Public Const IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_SCREENTIP As Integer = 252
Public Const IDS_BTN_SUMSTAT_STATTEST_REGRESSSTABILITY_SUPERTIP As Integer = 253
Public Const IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_LABEL As Integer = 254
Public Const IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_SCREENTIP As Integer = 255
Public Const IDS_BTN_SUMSTAT_STATTEST_WHITENOISE_SUPERTIP As Integer = 256
Public Const IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_LABEL As Integer = 257
Public Const IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_SCREENTIP As Integer = 258
Public Const IDS_BTN_SUMSTAT_STATTEST_ARCHTEST_SUPERTIP As Integer = 259
Public Const IDS_BTN_SUMSTAT_STATTEST_STATIONARY_LABEL As Integer = 260
Public Const IDS_BTN_SUMSTAT_STATTEST_STATIONARY_SCREENTIP As Integer = 261
Public Const IDS_BTN_SUMSTAT_STATTEST_STATIONARY_SUPERTIP As Integer = 262
Public Const IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_LABEL As Integer = 263
Public Const IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_SCREENTIP As Integer = 264
Public Const IDS_BTN_SUMSTAT_STATTEST_HOMOGENEITY_SUPERTIP As Integer = 265
Public Const IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_LABEL As Integer = 266
Public Const IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_SCREENTIP As Integer = 267
Public Const IDS_BTN_SUMSTAT_STATTEST_COINTEGRATION_SUPERTIP As Integer = 268
Public Const IDS_BTN_SUMSTAT_CORRELOGRAM_LABEL As Integer = 269
Public Const IDS_BTN_SUMSTAT_CORRELOGRAM_SCREENTIP As Integer = 270
Public Const IDS_BTN_SUMSTAT_CORRELOGRAM_SUPERTIP As Integer = 271
Public Const IDS_GRP_DATA_PREP_LABEL As Integer = 272
Public Const IDS_BTN_DATAPREP_TRANSFORM_LABEL As Integer = 273
Public Const IDS_BTN_DATAPREP_TRANSFORM_SCREENTIP As Integer = 274
Public Const IDS_BTN_DATAPREP_TRANSFORM_SUPERTIP As Integer = 275
Public Const IDS_BTN_DATAPREP_OUTLIER_LABEL As Integer = 276
Public Const IDS_BTN_DATAPREP_OUTLIER_SCREENTIP As Integer = 277
Public Const IDS_BTN_DATAPREP_OUTLIER_SUPERTIP As Integer = 278
Public Const IDS_BTN_DATAPREP_RESAMPLE_LABEL As Integer = 279
Public Const IDS_BTN_DATAPREP_RESAMPLE_SCREENTIP As Integer = 280
Public Const IDS_BTN_DATAPREP_RESAMPLE_SUPERTIP As Integer = 281
Public Const IDS_GRP_MODELING_LABEL As Integer = 282
Public Const IDS_GAL_MODELING_ARMA_LABEL As Integer = 283
Public Const IDS_GAL_MODELING_ARMA_SCREENTIP As Integer = 284
Public Const IDS_GAL_MODELING_ARMA_SUPERTIP As Integer = 285
Public Const IDS_BTN_MODELING_ARMA_ARMA_LABEL As Integer = 286
Public Const IDS_BTN_MODELING_ARMA_ARMA_SCREENTIP As Integer = 287
Public Const IDS_BTN_MODELING_ARMA_ARMA_SUPERTIP As Integer = 288
Public Const IDS_BTN_MODELING_ARMA_ARIMA_LABEL As Integer = 289
Public Const IDS_BTN_MODELING_ARMA_ARIMA_SCREENTIP As Integer = 290
Public Const IDS_BTN_MODELING_ARMA_ARIMA_SUPERTIP As Integer = 291
Public Const IDS_BTN_MODELING_ARMA_FARIMA_LABEL As Integer = 292
Public Const IDS_BTN_MODELING_ARMA_FARIMA_SCREENTIP As Integer = 293
Public Const IDS_BTN_MODELING_ARMA_FARIMA_SUPERTIP As Integer = 294
Public Const IDS_BTN_MODELING_ARMA_SARIMA_LABEL As Integer = 295
Public Const IDS_BTN_MODELING_ARMA_SARIMA_SCREENTIP As Integer = 296
Public Const IDS_BTN_MODELING_ARMA_SARIMA_SUPERTIP As Integer = 297
Public Const IDS_BTN_MODELING_ARMA_AIRLINE_LABEL As Integer = 298
Public Const IDS_BTN_MODELING_ARMA_AIRLINE_SCREENTIP As Integer = 299
Public Const IDS_BTN_MODELING_ARMA_AIRLINE_SUPERTIP As Integer = 300
Public Const IDS_BTN_MODELING_ARMA_X12ARIMA_LABEL As Integer = 301
Public Const IDS_BTN_MODELING_ARMA_X12ARIMA_SCREENTIP As Integer = 302
Public Const IDS_BTN_MODELING_ARMA_X12ARIMA_SUPERTIP As Integer = 303
Public Const IDS_BTN_MODELING_ARMA_X13ARIMASEATS_LABEL As Integer = 304
Public Const IDS_BTN_MODELING_ARMA_X13ARIMASEATS_SCREENTIP As Integer = 305
Public Const IDS_BTN_MODELING_ARMA_X13ARIMASEATS_SUPERTIP As Integer = 306
Public Const IDS_BTN_MODELING_ARMAX_LABEL As Integer = 307
Public Const IDS_BTN_MODELING_ARMAX_SCREENTIP As Integer = 308
Public Const IDS_BTN_MODELING_ARMAX_SUPERTIP As Integer = 309
Public Const IDS_BTN_MODELING_GARCH_LABEL As Integer = 310
Public Const IDS_BTN_MODELING_GARCH_SCREENTIP As Integer = 311
Public Const IDS_BTN_MODELING_GARCH_SUPERTIP As Integer = 312
Public Const IDS_BTN_MODELING_COMBO_LABEL As Integer = 313
Public Const IDS_BTN_MODELING_COMBO_SCREENTIP As Integer = 314
Public Const IDS_BTN_MODELING_COMBO_SUPERTIP As Integer = 315
Public Const IDS_GRP_FACTOR_ANALYSIS_LABEL As Integer = 316
Public Const IDS_BTN_FACTOR_ANALYSIS_REGRESSION_LABEL As Integer = 317
Public Const IDS_BTN_FACTOR_ANALYSIS_REGRESSION_SCREENTIP As Integer = 318
Public Const IDS_BTN_FACTOR_ANALYSIS_REGRESSION_SUPERTIP As Integer = 319
Public Const IDS_BTN_FACTOR_ANALYSIS_PCA_LABEL As Integer = 320
Public Const IDS_BTN_FACTOR_ANALYSIS_PCA_SCREENTIP As Integer = 321
Public Const IDS_BTN_FACTOR_ANALYSIS_PCA_SUPERTIP As Integer = 322
Public Const IDS_BTN_FACTOR_ANALYSIS_GLM_LABEL As Integer = 323
Public Const IDS_BTN_FACTOR_ANALYSIS_GLM_SCREENTIP As Integer = 324
Public Const IDS_BTN_FACTOR_ANALYSIS_GLM_SUPERTIP As Integer = 325
Public Const IDS_GRP_POWER_TOOLS_LABEL As Integer = 326
Public Const IDS_BTN_POWERTOOLS_MODEL_DETECT_LABEL As Integer = 327
Public Const IDS_BTN_POWERTOOLS_MODEL_DETECT_SCREENTIP As Integer = 328
Public Const IDS_BTN_POWERTOOLS_MODEL_DETECT_SUPERTIP As Integer = 329
Public Const IDS_BTN_POWERTOOLS_DIAGNOSIS_LABEL As Integer = 330
Public Const IDS_BTN_POWERTOOLS_DIAGNOSIS_SCREENTIP As Integer = 331
Public Const IDS_BTN_POWERTOOLS_DIAGNOSIS_SUPERTIP As Integer = 332
Public Const IDS_BTN_POWERTOOLS_CALIBRATION_LABEL As Integer = 333
Public Const IDS_BTN_POWERTOOLS_CALIBRATION_SCREENTIP As Integer = 334
Public Const IDS_BTN_POWERTOOLS_CALIBRATION_SUPERTIP As Integer = 335
Public Const IDS_BTN_POWERTOOLS_FORECAST_LABEL As Integer = 336
Public Const IDS_BTN_POWERTOOLS_FORECAST_SCREENTIP As Integer = 337
Public Const IDS_BTN_POWERTOOLS_FORECAST_SUPERTIP As Integer = 338
Public Const IDS_BTN_POWERTOOLS_SIMULATE_LABEL As Integer = 339
Public Const IDS_BTN_POWERTOOLS_SIMULATE_SCREENTIP As Integer = 340
Public Const IDS_BTN_POWERTOOLS_SIMULATE_SUPERTIP As Integer = 341
Public Const IDS_BTN_POWERTOOLS_MCSIMULATE_LABEL As Integer = 342
Public Const IDS_BTN_POWERTOOLS_MCSIMULATE_SCREENTIP As Integer = 343
Public Const IDS_BTN_POWERTOOLS_MCSIMULATE_SUPERTIP As Integer = 344
Public Const IDS_GRP_SPECTRAL_ANALYSIS_LABEL As Integer = 345
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_LABEL As Integer = 346
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_SCREENTIP As Integer = 347
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FOURIER_SUPERTIP As Integer = 348
Public Const IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_LABEL As Integer = 349
Public Const IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_SCREENTIP As Integer = 350
Public Const IDS_BTN_SPECTRAL_ANALYSIS_PERIODOGRAM_SUPERTIP As Integer = 351
Public Const IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_LABEL As Integer = 352
Public Const IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_SCREENTIP As Integer = 353
Public Const IDS_GAL_SPECTRAL_ANALYSIS_FILTERS_SUPERTIP As Integer = 354
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_LABEL As Integer = 355
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_SCREENTIP As Integer = 356
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_HODRICKPRESCOT_SUPERTIP As Integer = 357
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_LABEL As Integer = 358
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_SCREENTIP As Integer = 359
Public Const IDS_BTN_SPECTRAL_ANALYSIS_FILTERS_BAXTERKING_SUPERTIP As Integer = 360
Public Const IDS_GRP_SUPPORT_LABEL As Integer = 361
Public Const IDS_BTN_SUPPORT_GETTINGSTARTED_LABEL As Integer = 362
Public Const IDS_BTN_SUPPORT_GETTINGSTARTED_SCREENTIP As Integer = 363
Public Const IDS_BTN_SUPPORT_GETTINGSTARTED_SUPERTIP As Integer = 364
Public Const IDS_GAL_SUPPORT_NUMXLINFO_LABEL As Integer = 365
Public Const IDS_GAL_SUPPORT_NUMXLINFO_SCREENTIP As Integer = 366
Public Const IDS_GAL_SUPPORT_NUMXLINFO_SUPERTIP As Integer = 367
Public Const IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_LABEL As Integer = 368
Public Const IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_SCREENTIP As Integer = 369
Public Const IDS_BTN_SUPPORT_NUMXLINFO_USERGUIDE_SUPERTIP As Integer = 370
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_LABEL As Integer = 371
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_SCREENTIP As Integer = 372
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CONTACTUS_SUPERTIP As Integer = 373
Public Const IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_LABEL As Integer = 374
Public Const IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_SCREENTIP As Integer = 375
Public Const IDS_BTN_SUPPORT_NUMXLINFO_COMMUNITY_SUPERTIP As Integer = 376
Public Const IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_LABEL As Integer = 377
Public Const IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_SCREENTIP As Integer = 378
Public Const IDS_BTN_SUPPORT_NUMXLINFO_ABOUTNUMXL_SUPERTIP As Integer = 379
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_LABEL As Integer = 380
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_SCREENTIP As Integer = 381
Public Const IDS_BTN_SUPPORT_NUMXLINFO_CHECKUPDATES_SUPERTIP As Integer = 382

'  white_noise_test_frm_def
Public Const IDS_UI_WHITE_NOISE_TEST_FRM_CAPTION As Integer = 538
Public Const IDS_UI_WHITE_NOISE_TEST_PG_GNRL_HELPTIP As Integer = 539
Public Const IDS_UI_WHITE_NOISE_TEST_PG_OPTIONS_HELPTIP As Integer = 540
Public Const IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_LABEL As Integer = 541
Public Const IDS_UI_WHITE_NOISE_TEST_LAG_ORDER_FRAME_HELPTIP As Integer = 542
Public Const IDS_UI_WHITE_NOISE_TEST_START_LAG_LABEL As Integer = 543
Public Const IDS_UI_WHITE_NOISE_TEST_START_LAG_HELPTIP As Integer = 544
Public Const IDS_UI_WHITE_NOISE_TEST_MAX_LAG_LABEL As Integer = 545
Public Const IDS_UI_WHITE_NOISE_TEST_MAX_LAG_HELPTIP As Integer = 546
Public Const IDS_UI_WHITE_NOISE_TEST_STATUSBAR_CALCULATION_MSG As Integer = 560
Public Const IDS_UI_WHITE_NOISE_TEST_OUTPUT_TABLE_HEADER As Integer = 561
Public Const IDS_UI_WHITE_NOISE_TEST_OUTPUT_PASS_TEST_NOTE As Integer = 564

'  x12arima_frm_def
Public Const IDS_UI_X12ARIMA_FRM_CAPTION As Integer = 846
Public Const IDS_UI_X12ARIMA_START_DATE_LABEL_CAPTION As Integer = 847
Public Const IDS_UI_X12ARIMA_START_DATE_LABEL_HELPTIP As Integer = 848
Public Const IDS_UI_X12ARIMA_PERIOD_LABEL_CAPTION As Integer = 849
Public Const IDS_UI_X12ARIMA_PERIOD_LABEL_HELPTIP As Integer = 850
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_LABEL_CAPTION As Integer = 851
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_LABEL_HELPTIP As Integer = 852
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_CAPTION As Integer = 853
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LABEL_HELPTIP As Integer = 854
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_LABEL_CAPTION As Integer = 855
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_LABEL_HELPTIP As Integer = 856
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LABEL_CAPTION As Integer = 857
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LABEL_HELPTIP As Integer = 858
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LEVEL_SHIFT_RUN_LABEL_CAPTION As Integer = 859
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LEVEL_SHIFT_RUN_LABEL_HELPTIP As Integer = 860
Public Const IDS_UI_X12ARIMA_MODEL_LABEL_CAPTION As Integer = 861
Public Const IDS_UI_X12ARIMA_MODEL_LABEL_HELPTIP As Integer = 862
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_LABEL_CAPTION As Integer = 863
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_LABEL_HELPTIP As Integer = 864
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_LABEL_CAPTION As Integer = 865
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_LABEL_HELPTIP As Integer = 866
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_LABEL_CAPTION As Integer = 867
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_LABEL_HELPTIP As Integer = 868
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_LABEL_CAPTION As Integer = 869
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_LABEL_HELPTIP As Integer = 870
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_LABEL_CAPTION As Integer = 871
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_LABEL_HELPTIP As Integer = 872
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LABEL_CAPTION As Integer = 873
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LABEL_HELPTIP As Integer = 874
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LOG_LABEL_CAPTION As Integer = 875
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_LOG_LABEL_HELPTIP As Integer = 876
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_AUTO_LABEL_CAPTION As Integer = 877
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_AUTO_LABEL_HELPTIP As Integer = 878
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_NONE_LABEL_CAPTION As Integer = 879
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_TRANSFORM_NONE_LABEL_HELPTIP As Integer = 880
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_TRADING_DAYS_LABEL_CAPTION As Integer = 881
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_TRADING_DAYS_LABEL_HELPTIP As Integer = 882
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_EASTER_LABEL_CAPTION As Integer = 883
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_EASTER_LABEL_HELPTIP As Integer = 884
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_CONSTANT_LABEL_CAPTION As Integer = 885
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_CONSTANT_LABEL_HELPTIP As Integer = 886
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_AO_LABEL_CAPTION As Integer = 887
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_AO_LABEL_HELPTIP As Integer = 888
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_CAPTION As Integer = 889
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_LS_LABEL_HELPTIP As Integer = 890
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_TC_LABEL_CAPTION As Integer = 891
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_OUTLIERS_TC_LABEL_HELPTIP As Integer = 892
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_AUTO_LABEL_CAPTION As Integer = 893
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_AUTO_LABEL_HELPTIP As Integer = 894
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_LABEL_CAPTION As Integer = 895
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_LABEL_HELPTIP As Integer = 896
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_LABEL_CAPTION As Integer = 897
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_LABEL_HELPTIP As Integer = 898
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_TRADING_N_HOLIDAYS_LABEL_CAPTION As Integer = 899
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_TRADING_N_HOLIDAYS_LABEL_HELPTIP As Integer = 900
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_NONE_LABEL_CAPTION As Integer = 901
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_NONE_LABEL_HELPTIP As Integer = 903
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_ONE_YEAR_LABEL_CAPTION As Integer = 904
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_TWO_YEAR_LABEL_CAPTION As Integer = 905
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_THREE_YEAR_LABEL_CAPTION As Integer = 906
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_FOUR_YEAR_LABEL_CAPTION As Integer = 907
Public Const IDS_UI_X12ARIMA_MODEL_FORECAST_HORIZON_FIVE_YEAR_LABEL_CAPTION As Integer = 908
Public Const IDS_UI_X12ARIMA_PERIOD_MONTHLY_LABEL_CAPTION As Integer = 909
Public Const IDS_UI_X12ARIMA_PERIOD_QUARTERLY_LABEL_CAPTION As Integer = 910
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_DEFAULT_LABEL_CAPTION As Integer = 911
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x1_LABEL_CAPTION As Integer = 912
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x3_LABEL_CAPTION As Integer = 913
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x5_LABEL_CAPTION As Integer = 915
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x9_LABEL_CAPTION As Integer = 916
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_3x15_LABEL_CAPTION As Integer = 917
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_OPTIONS_STABLE_LABEL_CAPTION As Integer = 918
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_MULT_LABEL_CAPTION As Integer = 919
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_ADD_LABEL_CAPTION As Integer = 920
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_PSEUDOADD_LABEL_CAPTION As Integer = 921
Public Const IDS_UI_X12ARIMA_SEASONAL_ADJUSTMENT_X11_MODE_LOGADD_LABEL_CAPTION As Integer = 922
Public Const IDS_UI_X12ARIMA_CELL_INVALID_FORMULA_ERROR_MSG As Integer = 923
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_VARIABLES_LABEL_CAPTION As Integer = 924
Public Const IDS_UI_X12ARIMA_PRIOR_ADJUSTMENT_REGRESSION_VARIABLES_LABEL_HELPTIP As Integer = 925
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_P_HELPTIP As Integer = 926
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_D_HELPTIP As Integer = 927
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_Q_HELPTIP As Integer = 928
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SP_HELPTIP As Integer = 929
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SD_HELPTIP As Integer = 930
Public Const IDS_UI_X12ARIMA_MODEL_ORDERS_MANUAL_SQ_HELPTIP As Integer = 932
Public Const IDS_UI_X12ARIMA_OPEN_OUTPUT_FILE_LABEL_CAPTION As Integer = 933
Public Const IDS_UI_X12ARIMA_OPEN_OUTPUT_FILE_LABEL_HELPTIP As Integer = 934
Public Const IDS_UI_X12ARIMA_OPEN_LOG_FILE_LABEL_CAPTION As Integer = 935
Public Const IDS_UI_X12ARIMA_OPEN_LOG_FILE_LABEL_HELPTIP As Integer = 936
Public Const IDS_UI_X12ARIMA_OPEN_SPC_FILE_LABEL_CAPTION As Integer = 937
Public Const IDS_UI_X12ARIMA_OPEN_SPC_FILE_LABEL_HELPTIP As Integer = 938
Public Const IDS_UI_X12ARIMA_OPEN_ERROR_FILE_LABEL_CAPTION As Integer = 939
Public Const IDS_UI_X12ARIMA_OPEN_ERROR_FILE_LABEL_HELPTIP As Integer = 940
Public Const IDS_UI_X12ARIMA_OUTPUT_INTERNAL_ERROR_MSG As Integer = 941
Public Const IDS_UI_X12ARIMA_OUTPUT_ERROR_FILE_NOT_FOUND_MSG As Integer = 942
Public Const IDS_UI_X12ARIMA_OUTPUT_LOG_FILE_NOT_FOUND_MSG As Integer = 944
Public Const IDS_UI_X12ARIMA_OUTPUT_OUTPUT_FILE_NOT_FOUND_MSG As Integer = 945
Public Const IDS_UI_X12ARIMA_OUTPUT_SPC_FILE_NOT_FOUND_MSG As Integer = 946
Public Const IDS_UI_X12ARIMA_OUTPUT_SUCCESS_MSG As Integer = 947
Public Const IDS_UI_X12ARIMA_BAD_LS_VALUE_ERROR_MSG As Integer = 948
Public Const IDS_UI_X12ARIMA_RUN_CAPTION As Integer = 956
Public Const IDS_UI_X12ARIMA_RUN_HELPTIP As Integer = 957
Public Const IDS_UI_X12ARIMA_APPLY_CAPTION As Integer = 958
Public Const IDS_UI_X12ARIMA_APPLY_HELPTIP As Integer = 959

'  x13as_frm_def
Public Const IDS_UI_X13AS_FRM_CAPTION As Integer = 1308
Public Const IDS_UI_X13AS_START_DATE_LABEL_CAPTION As Integer = 1309
Public Const IDS_UI_X13AS_START_DATE_LABEL_HELPTIP As Integer = 1310
Public Const IDS_UI_X13AS_PERIOD_LABEL_CAPTION As Integer = 1311
Public Const IDS_UI_X13AS_PERIOD_LABEL_HELPTIP As Integer = 1312
Public Const IDS_UI_X13AS_STOCKDATA_LABEL_CAPTION As Integer = 1313
Public Const IDS_UI_X13AS_STOCKDATA_LABEL_HELPTIP As Integer = 1314
Public Const IDS_UI_X1AS_RUN_CAPTION As Integer = 1316
Public Const IDS_UI_X1AS_RUN_HELPTIP As Integer = 1317
Public Const IDS_UI_X13AS_APPLY_CAPTION As Integer = 1318
Public Const IDS_UI_X13AS_APPLY_HELPTIP As Integer = 1319
Public Const IDS_UI_X13AS_TRANSFORM_PAGE_HELPTIP As Integer = 1323
Public Const IDS_UI_X13AS_TRANSFORM_FRAME_CAPTION As Integer = 1324
Public Const IDS_UI_X13AS_TRANSFORM_FRAME_HELPTIP As Integer = 1325
Public Const IDS_UI_X13AS_TRANSFORM_NONE_CAPTION As Integer = 1326
Public Const IDS_UI_X13AS_TRANSFORM_NONE_HELPTIP As Integer = 1327
Public Const IDS_UI_X13AS_TRANSFORM_AUTO_CAPTION As Integer = 1328
Public Const IDS_UI_X13AS_TRANSFORM_AUTO_HELPTIP As Integer = 1329
Public Const IDS_UI_X13AS_TRANSFORM_LOG_CAPTION As Integer = 1330
Public Const IDS_UI_X13AS_TRANSFORM_LOG_HELPTIP As Integer = 1331
Public Const IDS_UI_X13AS_TRANSFORM_SQRT_CAPTION As Integer = 1332
Public Const IDS_UI_X13AS_TRANSFORM_SQRT_HELPTIP As Integer = 1333
Public Const IDS_UI_X13AS_TRANSFORM_INV_CAPTION As Integer = 1334
Public Const IDS_UI_X13AS_TRANSFORM_INV_HELPTIP As Integer = 1335
Public Const IDS_UI_X13AS_TRANSFORM_LOGIST_CAPTION As Integer = 1336
Public Const IDS_UI_X13AS_TRANSFORM_LOGIST_HELPTIP As Integer = 1337
Public Const IDS_UI_X13AS_TRANSFORM_BOXCOX_CAPTION As Integer = 1338
Public Const IDS_UI_X13AS_TRANSFORM_BOXCOX_HELPTIP As Integer = 1339
Public Const IDS_UI_X13AS_TRANSFORM_POWER_PARAM_LABEL_CAPTION As Integer = 1340
Public Const IDS_UI_X13AS_TRANSFORM_POWER_PARAM_LABEL_HELPTIP As Integer = 1342
Public Const IDS_UI_X13AS_PRIOR_ADJUST_FRAME_CAPTION As Integer = 1343
Public Const IDS_UI_X13AS_PRIOR_ADJUST_FRAME_HELPTIP As Integer = 1344
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LOM_CAPTION As Integer = 1345
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LOM_HELPTIP As Integer = 1346
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LOQ_CAPTION As Integer = 1347
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LOQ_HELPTIP As Integer = 1348
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LEAPYR_CAPTION As Integer = 1349
Public Const IDS_UI_X13AS_PRIOR_ADJUST_LEAPYR_HELPTIP As Integer = 1350
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_CAPTION As Integer = 1351
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_HELPTIP As Integer = 1352
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_CAPTION As Integer = 1353
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_RATIO_HELPTIP As Integer = 1354
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_CAPTION As Integer = 1355
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PCT_HELPTIP As Integer = 1356
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_CAPTION As Integer = 1357
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_DIFF_HELPTIP As Integer = 1358
Public Const IDS_UI_X13AS_PERIOD_MONTHLY_LABEL_CAPTION As Integer = 1359
Public Const IDS_UI_X13AS_PERIOD_QUARTERLY_LABEL_CAPTION As Integer = 1360
Public Const IDS_UI_X13AS_INVALID_FORMULA_MSG As Integer = 1361
Public Const IDS_UI_X13AS_CUSTOM_PRIOR_ADJUST_FRAME_CAPTION As Integer = 1362
Public Const IDS_UI_X13AS_CUSTOM_PRIOR_ADJUST_FRAME_HELPTIP As Integer = 1363
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_TEMP_CAPTION As Integer = 1364
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_TEMP_HELPTIP As Integer = 1365
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PERM_CAPTION As Integer = 1366
Public Const IDS_UI_X13AS_PRIOR_ADJUST_CUSTOM_PERM_HELPTIP As Integer = 1367
Public Const IDS_UI_X13AS_SADJUST_NONE_LABEL As Integer = 1370
Public Const IDS_UI_X13AS_SADJUST_NONE_HELPTIP As Integer = 1371
Public Const IDS_UI_X13AS_SADJUST_X11_LABEL As Integer = 1372
Public Const IDS_UI_X13AS_SADJUST_X11_HELPTIP As Integer = 1373
Public Const IDS_UI_X13AS_SADJUST_SEATS_LABEL As Integer = 1374
Public Const IDS_UI_X13AS_SADJUST_SEATS_HELPTIP As Integer = 1375
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_LABEL As Integer = 1376
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_HELPTIP As Integer = 1377
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_HELPTIP As Integer = 1378
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_CAPTION As Integer = 1379
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_DEFAULT_ITEM As Integer = 1380
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_DEFAULT_HELPTIP As Integer = 1381
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x1_ITEM As Integer = 1382
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x1_HELPTIP As Integer = 1383
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x3_ITEM As Integer = 1384
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x3_HELPTIP As Integer = 1385
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x5_ITEM As Integer = 1387
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x5_HELPTIP As Integer = 1388
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x9_ITEM As Integer = 1390
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x9_HELPTIP As Integer = 1391
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x15_ITEM As Integer = 1392
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_3x15_HELPTIP As Integer = 1393
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_STABLE_ITEM As Integer = 1394
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_STABLE_HELPTIP As Integer = 1395
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_MSR_ITEM As Integer = 1396
Public Const IDS_UI_X13AS_SADJUST_X11_FILTER_OPTION_MSR_HELPTIP As Integer = 1397
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_MULT_ITEM As Integer = 1398
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_MULT_HELPTIP As Integer = 1399
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_ADD_ITEM As Integer = 1401
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_ADD_HELPTIP As Integer = 1402
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_PSEUDOADD_ITEM As Integer = 1403
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_PSEUDOADD_HELPTIP As Integer = 1404
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_LOGADD_ITEM As Integer = 1405
Public Const IDS_UI_X13AS_SADJUST_X11_MODE_LOGADD_HELPTIP As Integer = 1406
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_FRAME As Integer = 1407
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_AUTO_LABEL As Integer = 1408
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_AUTO_HELPTIP As Integer = 1409
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_FRAME_HELPTIP As Integer = 1410
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_HELPTIP As Integer = 1411
Public Const IDS_UI_X13AS_SADJUST_X11_HENDERSON_MANUAL_LABEL As Integer = 1412
Public Const IDS_UI_X13AS_SADJUST_X11_EXTREME_LIMITS_FRAME As Integer = 1413
Public Const IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_LLIMIT_LABEL As Integer = 1414
Public Const IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_LLIMIT_HELPTIP As Integer = 1415
Public Const IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_ULIMIT_LABEL As Integer = 1416
Public Const IDS_UI_X13AS_SADJUST_X11_EXTREME_SIGMA_ULIMIT_HELPTIP As Integer = 1417
Public Const IDS_UI_X13AS_SADJUST_SEATS_HPCYCLE_LABEL As Integer = 1418
Public Const IDS_UI_X13AS_SADJUST_SEATS_HPCYCLE_HELPTIP As Integer = 1419
Public Const IDS_UI_X13AS_SADJUST_SEATS_DECOMPOSE_APPROX_LABEL As Integer = 1420
Public Const IDS_UI_X13AS_SADJUST_SEATS_DECOMPOSE_APPROX_HELPTIP As Integer = 1421
Public Const IDS_UI_X13AS_SADJUST_SEATS_ACCEPT_STATIONARY_LABEL As Integer = 1422
Public Const IDS_UI_X13AS_SADJUST_SEATS_ACCEPT_STATIONARY_HELPTIP As Integer = 1423
Public Const IDS_UI_X13AS_SADJUST_SEATS_LIMIT_LJQSTAT_LABEL As Integer = 1425
Public Const IDS_UI_X13AS_SADJUST_SEATS_LIMIT_LJQSTAT_HELPTIP As Integer = 1426
Public Const IDS_UI_X13AS_SADJUST_SEATS_FINITE_FILTER_LABEL As Integer = 1427
Public Const IDS_UI_X13AS_SADJUST_SEATS_FINITE_FILTER_HELPTIP As Integer = 1428
Public Const IDS_UI_X13AS_INVALID_MODEL_ARGUMENT_MSG As Integer = 1429
Public Const IDS_UI_X13AS_OUTPUT_SPC_FILE_NOT_FOUND_MSG As Integer = 1430
Public Const IDS_UI_X13AS_OUTPUT_RUN_STATUS_SUCCESS_MSG As Integer = 1431
Public Const IDS_UI_X13AS_OUTPUT_ERR_FILE_NOT_FOUND_MSG As Integer = 1432
Public Const IDS_UI_X13AS_OUTPUT_LOG_FILE_NOT_FOUND_MSG As Integer = 1433
Public Const IDS_UI_X13AS_SADJUST_PAGE_CAPTION As Integer = 1439
Public Const IDS_UI_X13AS_SADJUST_PAGE_HELPTIP As Integer = 1440
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_PAGE_HELPTIP As Integer = 1444
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_PAGE As Integer = 1445
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_PRIOR_PREDEFINED_FRAME As Integer = 1446
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_PRIOR_PREDEFINED_FRAME_HELPTIP As Integer = 1447
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_FRAME As Integer = 1448
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_FRAME_HELPTIP As Integer = 1449
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_LABEL As Integer = 1450
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_HELPTIP As Integer = 1451
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_COEFF_LABEL As Integer = 1452
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_COEFF_HELPTIP As Integer = 1453
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_WGHT_LABEL As Integer = 1454
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_TRADING_DAY_WGHT_HELPTIP As Integer = 1455
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_LABEL As Integer = 1456
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_HELPTIP As Integer = 1457
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_ONE_COEF_STOCK_DAY_LABEL As Integer = 1458
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_ONE_COEF_STOCK_DAY_HELPTIP As Integer = 1459
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_VALUE_HELPTIP As Integer = 1460
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_STOCK_DAY_VALUE_SPIN_HELPTIP As Integer = 1461
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_EASTER_FRAME As Integer = 1462
Public Const IDS_UI_X13AS_SADJUST_REGRESSION_EASTER_FRAME_HELPTIP As Integer = 1463
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_LABEL As Integer = 1464
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_HELPTIP As Integer = 1465
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_DAYS_LABEL As Integer = 1466
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_EASTER_DAYS_HELPTIP As Integer = 1467
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_LABEL As Integer = 1468
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_HELPTIP As Integer = 1469
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_STAT_CANADA_EASTER_DAYS_HELPTIP As Integer = 1470
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_LABOR_DAY_LABEL As Integer = 1471
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_LABOR_DAY_HELPTIP As Integer = 1472
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_LABORDAY_DAYS_HELPTIP As Integer = 1473
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_LABEL As Integer = 1474
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_HELPTIP As Integer = 1475
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_THANKSGIVING_DAYS_HELPTIP As Integer = 1476
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_AOUTLIERS_LABEL As Integer = 1477
Public Const IDS_UI_X13AS_SADJUST_X11REGRESSION_AOUTLIERS_HELPTIP As Integer = 1478
Public Const IDS_UI_X13AS_SADJUST_UDVAR_PAGE As Integer = 1479
Public Const IDS_UI_X13AS_SADJUST_UDVAR_PAGE_HELPTIP As Integer = 1480
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_FRAME_LABEL As Integer = 1481
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_FRAME_HELPTIP As Integer = 1482
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_ADD_LABEL As Integer = 1483
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_ADD_HELPTIP As Integer = 1484
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_RMV_LABEL As Integer = 1485
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_RMV_HELPTIP As Integer = 1486
Public Const IDS_UI_X13AS_SADJUST_UDVAR_EVENTS_LIST_HELPTIP As Integer = 1487
Public Const IDS_UI_X13AS_SADJUST_UDVAR_CUSTOM_LABEL As Integer = 1488
Public Const IDS_UI_X13AS_SADJUST_UDVAR_CUSTOM_HELPTIP As Integer = 1489
Public Const IDS_UI_X13AS_ARIMA_PAGE_CAPTION As Integer = 1490
Public Const IDS_UI_X13AS_ARIMA_PAGE_HELPTIP As Integer = 1491
Public Const IDS_UI_X13AS_ARIMA_MODEL_NONE_CAPTION As Integer = 1492
Public Const IDS_UI_X13AS_ARIMA_MODEL_NONE_HELPTIP As Integer = 1493
Public Const IDS_UI_X13AS_ARIMA_MODEL_MANUAL_CAPTION As Integer = 1494
Public Const IDS_UI_X13AS_ARIMA_MODEL_MANUAL_HELPTIP As Integer = 1495
Public Const IDS_UI_X13AS_ARIMA_MODEL_AUTO_CAPTION As Integer = 1496
Public Const IDS_UI_X13AS_ARIMA_MODEL_AUTO_HELPTIP As Integer = 1497
Public Const IDS_UI_X13AS_ARIMA_AUTO_PAGE As Integer = 1498
Public Const IDS_UI_X13AS_ARIMA_AUTO_PAGE_HELPTIP As Integer = 1499
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_LABEL As Integer = 1500
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_HELPTIP As Integer = 1501
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_OUTSAMPLE_LABEL As Integer = 1502
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_OUTSAMPLE_HELPTIP As Integer = 1503
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_MODE_LABEL As Integer = 1504
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_MODE_HELPTIP As Integer = 1505
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_METHOD_LABEL As Integer = 1506
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_METHOD_HELPTIP As Integer = 1507
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_THRESHOLD_LABEL As Integer = 1508
Public Const IDS_UI_X13AS_ARIMA_AUTO_ARIMA88_THRESHOLD_HELPTIP As Integer = 1509
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_LABEL As Integer = 1510
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_HELPTIP As Integer = 1511
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_CONSTANT_LABEL As Integer = 1512
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_CONSTANT_HELPTIP As Integer = 1513
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_MIXED_LABEL As Integer = 1514
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_MIXED_HELPTIP As Integer = 1515
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_LABEL As Integer = 1516
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_HELPTIP As Integer = 1517
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_REG_LABEL As Integer = 1518
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_REG_HELPTIP As Integer = 1519
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_SEASONAL_LABEL As Integer = 1520
Public Const IDS_UI_X13AS_ARIMA_AUTO_TRAMO_FIXED_SEASONAL_HELPTIP As Integer = 1521
Public Const IDS_UI_X13AS_ARIMA_MANUAL_PAGE As Integer = 1522
Public Const IDS_UI_X13AS_ARIMA_MANUAL_PAGE_HELPTIP As Integer = 1523
Public Const IDS_UI_X13AS_ARIMA_MANUAL_P_LABEL As Integer = 1525
Public Const IDS_UI_X13AS_ARIMA_MANUAL_P_HELPTIP As Integer = 1526
Public Const IDS_UI_X13AS_ARIMA_MANUAL_D_LABEL As Integer = 1527
Public Const IDS_UI_X13AS_ARIMA_MANUAL_D_HELPTIP As Integer = 1528
Public Const IDS_UI_X13AS_ARIMA_MANUAL_Q_LABEL As Integer = 1529
Public Const IDS_UI_X13AS_ARIMA_MANUAL_Q_HELPTIP As Integer = 1530
Public Const IDS_UI_X13AS_ARIMA_MANUAL_PP_LABEL As Integer = 1531
Public Const IDS_UI_X13AS_ARIMA_MANUAL_PP_HELPTIP As Integer = 1532
Public Const IDS_UI_X13AS_ARIMA_MANUAL_DD_LABEL As Integer = 1533
Public Const IDS_UI_X13AS_ARIMA_MANUAL_DD_HELPTIP As Integer = 1534
Public Const IDS_UI_X13AS_ARIMA_MANUAL_QQ_LABEL As Integer = 1535
Public Const IDS_UI_X13AS_ARIMA_MANUAL_QQ_HELPTIP As Integer = 1536
Public Const IDS_UI_X13AS_ARIMA_MANUAL_NONSEASONAL_LABEL As Integer = 1537
Public Const IDS_UI_X13AS_ARIMA_MANUAL_NONSEASONAL_HELPTIP As Integer = 1538
Public Const IDS_UI_X13AS_ARIMA_MANUAL_SEASONAL_LABEL As Integer = 1539
Public Const IDS_UI_X13AS_ARIMA_MANUAL_SEASONAL_HELPTIP As Integer = 1540
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INITIALIZE_VALUES_LABEL As Integer = 1541
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INITIALIZE_VALUES_HELPTIP As Integer = 1542
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_AR_VALUES_LABEL As Integer = 1543
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_AR_VALUES_HELPTIP As Integer = 1544
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_MA_VALUES_LABEL As Integer = 1545
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_REG_MA_VALUES_HELPTIP As Integer = 1546
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_AR_VALUES_LABEL As Integer = 1547
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_AR_VALUES_HELPTIP As Integer = 1548
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_MA_VALUES_LABEL As Integer = 1549
Public Const IDS_UI_X13AS_ARIMA_MANUAL_INIT_SEASONAL_MA_VALUES_HELPTIP As Integer = 1550
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_PAGE As Integer = 1551
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_PAGE_HELPTIP As Integer = 1552
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_CONST_TREND_LABEL As Integer = 1553
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_CONST_TREND_HELPTIP As Integer = 1554
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_FIXED_SEASONAL_LABEL As Integer = 1555
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_FIXED_SEASONAL_HELPTIP As Integer = 1556
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SINCOS_SEASONAL_LABEL As Integer = 1557
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SINCOS_SEASONAL_HELPTIP As Integer = 1558
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SEASONAL_LABEL As Integer = 1559
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SEASONAL_HELPTIP As Integer = 1560
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LOM_LABEL As Integer = 1561
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LOM_HELPTIP As Integer = 1562
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LOQ_LABEL As Integer = 1563
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LOQ_HELPTIP As Integer = 1564
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LPYR_LABEL As Integer = 1565
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LPYR_HELPTIP As Integer = 1566
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LABEL As Integer = 1567
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_HELPTIP As Integer = 1568
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_ONECOEF_LABEL As Integer = 1569
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_ONECOEF_HELPTIP As Integer = 1570
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LPYR_LABEL As Integer = 1571
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_TRADINGDAY_LPYR_HELPTIP As Integer = 1572
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_LABEL As Integer = 1573
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_HELPTIP As Integer = 1574
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_ONECOEF_LABEL As Integer = 1575
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_ONECOEF_HELPTIP As Integer = 1576
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_LABEL As Integer = 1577
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_STOCKDAY_DIM_HELPTIP As Integer = 1578
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_FRAME As Integer = 1579
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_FRAME_HELPTIP As Integer = 1580
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_LABEL As Integer = 1581
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_HELPTIP As Integer = 1582
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_EASTER_DAYS_HELPTIP As Integer = 1583
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_LABEL As Integer = 1584
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_HELPTIP As Integer = 1585
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_SCANADA_EASTER_DAYS_HELPTIP As Integer = 1586
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_LABEL As Integer = 1587
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_HELPTIP As Integer = 1588
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_LABORDAY_DAYS_HELPTIP As Integer = 1589
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_LABEL As Integer = 1590
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_HELPTIP As Integer = 1591
Public Const IDS_UI_X13AS_ARIMA_REGRESSION_THANKSGIVING_DAYS_HELPTIP As Integer = 1592
Public Const IDS_UI_X13AS_ARIMA_UDVARS_PAGE As Integer = 1593
Public Const IDS_UI_X13AS_ARIMA_UDVARS_PAGE_HELPTIP As Integer = 1594
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_FRAME As Integer = 1595
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_FRAME_HELPTIP As Integer = 1596
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_ADD_LABEL As Integer = 1597
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_ADD_HELPTIP As Integer = 1598
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_RMV_LABEL As Integer = 1599
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_RMV_HELPTIP As Integer = 1600
Public Const IDS_UI_X13AS_ARIMA_UDVARS_ENENTS_LIST_HELPTIP As Integer = 1601
Public Const IDS_UI_X13AS_ARIMA_UDVARS_CUSTOM_LABEL As Integer = 1602
Public Const IDS_UI_X13AS_ARIMA_UDVARS_CUSTOM_HELPTIP As Integer = 1603

' InQuest injected base64 decoded content
' j{0z
' ~'"z{l
' j(vw
' 'njP
' j(vw
' ~'"z{l
' 'njP
' (^rE)u
' z{Uz
' 1S>Z-P
' 'z{l
' 'z{l
' >Z-P
' "'r[
' "'r[
' xZ+y
' "'r[
' yZ%j
' 'z{E
' >Z-P
' L\z]
' z{b~'
' <"'r[
' jjexZ
' L\z]
' L\z]
' y*^r&
' 'rZ,
' +rJX
' ,jP)
' SzjB
' SzjB
' SzjB
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' c_]Qz
' cP4^
' cP1/z{Uj
' +bjUZ
' {-j{S
' /z{B

INQUEST-PP=macro
