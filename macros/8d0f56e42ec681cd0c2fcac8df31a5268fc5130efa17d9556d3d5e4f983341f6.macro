Attribute VB_Name = "ANSIWert"
Sub ANSIValue()
Attribute ANSIValue.VB_Description = "Displays the ANSI value of the selected character"
Attribute ANSIValue.VB_ProcData.VB_Invoke_Func = "TemplateProject.ANSIValue.ANSIValue"
S1$ = "Da der markierte Text"
S2$ = " Zeichen beinhaltet, werden nicht alle ANSI-Werte angezeigt."
S3$ = "ANSI-Wert ("
S4$ = " Zeichen markiert)"
S5$ = " Zeichen markiert)"
S6$ = "Sie m|fffd|ssen Text markieren, bevor das Makros ausgef|fffd|hrt wird."
S7$ = "ANSI-Wert"
Dim strSel, strNums, LastFourChar As String
Dim iPos As Integer
strSel = Selection.Text
If Len(strSel) > 0 Then
    For i = 1 To Len(strSel)
        strNums = strNums + Str(Asc(Mid(strSel, i)))
    Next i
    strNums = LTrim(strNums)
    If Len(strNums) > 255 Then
        LastFourChar = Mid(strNums, 252, 4)
        strNums = Left(strNums, 251) + Left(LastFourChar, 4 - InStr(" ", LastFourChar))
        MsgBox S1$ + Str(Len(strSel)) + S2$
    End If
    If Len(strSel) = 1 Then S4$ = S5$
    MsgBox strNums, 0, S3$ + LTrim(Str(Len(strSel))) + S4$
Else
    MsgBox S6$, 0, S7$
End If
End Sub

Attribute VB_Name = "AutoCorrect"
Attribute VB_Base = "0{CFB1309D-5451-11D0-B5E8-00AA00BBB76C}{CFB13056-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

' START LOCALIZATION'
 Const StatMsg1 = "AutoKorrektur-Eintrag hinzuf|fffd|gen: "
 Const StatMsg2 = " von "
 Const StatMsg3 = "Formatieren..."
 Const StatMsg4 = "Speichern..."
 Const TagText = "AutoKorrektur Sicherungsdatei"
 Const szAppName = "AutoKorrektur"
 Const szErrorMsg = "Es ist ein Fehler aufgetreten. M|fffd|chten Sie es nochmal probieren?"
 Const szACEntriesErrorMsg = "Es ist ein Fehler aufgetreten. Das Dokument hat das falsche Format."
 Const szWarnMsg = "Der folgende Vorgang wird ALLE AutoKorrektur-Eintr|fffd|ge, die den gleichen Namen haben wie Eintr|fffd|ge in der Sicherungsdatei, durch die Eintr|fffd|ge aus der Sicherungsdate |fffd|berschreiben. M|fffd|chten Sie fortfahren?"
 Const szFormatIncorrect = "Dieses Dokument ist nicht im richtigen Format f|fffd|r eine AutoKorrektur Sicherungsdatei."
 Const szRestoreCompletemsg = "Wiederherstellen komplett."
' END LOCALIZATION'

'***********   btnBackup_Click() ******************
'
' Hides the form, creates a new Word document, calls GetAutoCorrectEntries(),
' adds the text "AutoCorrect Backup Document" at the top of the document,
' and saves the document by calling SaveACDoc.
'
' Uses valuable y that doesn't do anything.

Private Sub btnBackup_Click()
Dim Y As Integer

AutoCorrect.Hide
Application.ScreenUpdating = False

'create new document
Application.Documents.Add
   
 ' call GetAutoCorrectEntries() user defined
  Y = GetAutoCorrectEntries()
  
' add Text to top of document
 With Selection
    .SplitTable
    .TypeText Text:=TagText
    .TypeParagraph
  End With
  
'add some formatting
  With ActiveDocument.Sentences(1)
    .Bold = True
    .Font.Size = 14
  End With

' Save the Document,call SaveACDoc() user defined, close if successful
Application.StatusBar = StatMsg4
If SaveACDoc = True Then
 ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
End If
Application.ScreenUpdating = True
AutoCorrect.Show
End Sub

Private Sub btnClose_Click()
AutoCorrect.Hide
End Sub

'************* btnRestore_Click() **************
'
' First warns the user that this will replace their existing entries.
' If they answer no it jumps to the end of the function.  Then displays
' the FileOpen dialog box to get the name of an existing AutoCorrect backup
' document (creating using the Backup button.)  Next calls OpenACDoc() to open
' the file. If successful it calls RestoreACEntries(). Finally, it closes the document.
'
'
'
Private Sub btnRestore_Click()
Dim ACFileName, Title As String
Dim Style, Response, X As Integer

AutoCorrect.Hide

' warn users about replaced entries...
Style = vbYesNo + vbInformation + vbDefaultButton2 ' Define buttons.
Title = szAppName
Response = MsgBox(szWarnMsg, Style, Title)
If Response = vbNo Then
   'exit
    GoTo bye:
End If

' bring up fileopen and get a name
With Dialogs(wdDialogFileOpen)
    .Display
    ACFileName = .Name
End With

' Open a Document,call OpenACDoc() user defined
If OpenACDoc(ACFileName) = True Then 'error
    ' Restore Entries, call RestoreACEntries() user defined
    X = RestoreACEntries()
    ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    End If

bye:
AutoCorrect.Show
End Sub

Function RestoreACEntries()
Dim i, NumRows As Integer
Dim oDoc, oACorrect, oTable As Object

Dim szName As String
Dim szValue As String
Dim szRTF As String

Err.Clear
On Error GoTo RestoreACEntriesErrors:

    ' check for correct format
    If ActiveDocument.Words(1) = "AutoKorrektur " Then
    Application.ScreenUpdating = False
        
    Set oDoc = ActiveDocument
    Set oTable = oDoc.Tables(1)
    Set oACorrect = Application.AutoCorrect.Entries

    NumRows = ActiveDocument.Tables(1).Rows.Count
    Selection.GoTo What:=wdGoToTable, Which:=wdGoToFirst
    Selection.MoveRight Unit:=wdCell, Count:=3
    
    For i = 2 To NumRows
         szName = Selection.Text
         
         Selection.MoveRight Unit:=wdCell
         szValue = Selection.Text
         
         Selection.MoveRight Unit:=wdCell
         szRTF = Selection.Text
         
         If szRTF = "False" Then
           Application.StatusBar = StatMsg1 & szName
           oACorrect.Add Name:=szName, Value:=szValue
         Else
           Application.StatusBar = StatMsg1 & szName
                                 
           Selection.MoveLeft Unit:=wdCell
           oACorrect.AddRichText szName, Selection.Range
           Selection.MoveRight Unit:=wdCell
         End If
       Selection.MoveRight Unit:=wdCell
    Next i
    Application.ScreenUpdating = True
    MsgBox szRestoreCompletemsg
    Else
    MsgBox szFormatIncorrect
    End If
    
    
RestoreACEntriesErrors:
Select Case Err.Number
    Case 0:
    ' no error
    Case Else
      MsgBox (szACEntriesErrorMsg & vbCr & Err.Number & "  " & Err.Description & " " & szName)
End Select
  
    
End Function

'****** GetAutoCorrectEntries() ******
'
' Inserts each AutoCorrect entry into a Word document including the Value and whether
' or not it is to include formatting.  Name is the current name of the entry,
' Value is the text value of the entry, and RTF is a Boolean that is True if the entry
' has "formatted text" checked.  Then converts the text into a table and adds a heading row to the table.
'
' x is used to loop through the AutoCorrect entries.
' TotalACEntries is the number of AC entries.

Private Function GetAutoCorrectEntries()
Dim X As Integer
Dim TotalACEntries As Integer

TotalACEntries = Application.AutoCorrect.Entries.Count
For X = 1 To TotalACEntries
    With Selection
         .TypeText Text:=Application.AutoCorrect.Entries.Item(X).Name
         .TypeText vbTab
           
          'check for formatting and insert RTF text if necessary
          If Application.AutoCorrect.Entries.Item(X).RichText = True Then
               Application.AutoCorrect.Entries(X).Apply Range:=Selection.Range
          Else
             .TypeText Text:=Application.AutoCorrect.Entries.Item(X).Value
          End If
           
          .TypeText vbTab
           .TypeText Text:=Application.AutoCorrect.Entries.Item(X).RichText
          .TypeParagraph
    End With
    
    'update status bar
    Application.StatusBar = StatMsg1 & X & StatMsg2 & TotalACEntries
Next X


' convert to table
Application.StatusBar = StatMsg3
Selection.HomeKey Unit:=wdStory, Extend:=wdExtend

Selection.ConvertToTable Separator:=wdSeparateByTabs, Format:=wdTableFormatSimple1, _
  ApplyBorders:=False, ApplyShading:=False, ApplyFont:=False, ApplyColor:=False, _
  ApplyHeadingRows:=False, ApplyLastRow:=False, ApplyFirstColumn:=False, ApplyLastColumn:=False, _
  AutoFit:=True

' add row heading
With Selection
    .MoveUp Unit:=wdLine, Count:=1
    .InsertRows 1
    .TypeText Text:="Name"
    .MoveRight Unit:=wdCell
    .TypeText Text:="Value"
    .MoveRight Unit:=wdCell
    .TypeText Text:="RTF"
    .HomeKey Unit:=wdStory
End With
    
 'Selection.GoTo What:=wdGoToPage, Which:=wdGoToNext
 'Selection.InsertBreak Type:=wdPageBreak
    
End Function

Public Function SaveACDoc()
Dim Style, Response As Integer
Dim Title As String

SaveACDoc = True
Err.Clear
On Error GoTo SaveACDocErrors

ActiveDocument.Save

SaveACDocErrors:
Select Case Err.Number
    Case 0:
    ' no error
    Case 4198:
    ' cancel
    SaveACDoc = False
    Case Else
      Style = vbYesNo + vbCritical + vbDefaultButton2 ' Define buttons.
      
      ' put error number and description in title of the message box
      Title = Err.Number & "  " & Err.Description
        
      Response = MsgBox(szErrorMsg, Style, Title)
      If Response = vbYes Then
          Resume 'bring up SaveAs again
      Else    ' User choose No.
          SaveACDoc = False
      End If
End Select

End Function


Public Function OpenACDoc(ByVal ACFileOpenName As String) As Boolean

Dim Style As Integer

OpenACDoc = True
Err.Clear
On Error GoTo OpenACDocErrors

Documents.Open FileName:=ACFileOpenName

OpenACDocErrors:
If Err.Number <> 0 Then
   OpenACDoc = False
End If

End Function

Attribute VB_Name = "AutoKorrekturStart"

Sub AutoCorrectUtil()
Attribute AutoCorrectUtil.VB_Description = "Create a backup copy of all AutoCorrect entries"
Attribute AutoCorrectUtil.VB_ProcData.VB_Invoke_Func = "TemplateProject.AutoCorrectStart.AutoCorrectUtil"
AutoCorrect.Show
End Sub


Attribute VB_Name = "DokStatistik"
Option Explicit

Sub SuperDocStatistics()
Attribute SuperDocStatistics.VB_Description = "Display formatting and section information for the current document"
Attribute SuperDocStatistics.VB_ProcData.VB_Invoke_Func = "TemplateProject.SuperDoc.SuperDocStatistics"
SuperDocMain.Show
End Sub
Attribute VB_Name = "FindSymbol97"
Attribute VB_Base = "0{CFB130A5-5451-11D0-B5E8-00AA00BBB76C}{CFB1305E-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Dim NRMText As String
Dim SearchingNormal As String
Dim SearchingSpecChar As String
Dim RepSpecChar As String
Dim FSSel As String
Dim FSDoc As String
Dim SNF As String
Dim TheFORMName As String
Dim FW As String
Dim RW As String
Dim SYM As String
Dim aSYM As String
Dim RSYM As String
Dim aRSYM As String
Dim FNT As String
Dim CHRTR As String
Dim DOC As String
Dim aDOC As String
Dim SEL As String
Dim aSEL As String
Dim oRWT As String
Dim aoRWT As String
Dim REP As String
Dim aREP As String
Dim REPA As String
Dim aREPA As String
Dim CANC As String
Dim aCANC As String
Dim FINDN As String
Dim aFINDN As String
Dim SRCH As String
Dim WholeDoc As Integer
Dim XVar As String
Dim Done As Integer
Dim GoodFind As Integer
Dim NotFoundMsg As Integer
Dim SinglePHolder As Variant
Dim ToggleReplaceFind As Variant
Dim vlblFindFontText As Variant
Dim vlblFindCharacterText As Variant
Dim vlblReplaceFontText As Variant
Dim vlblReplaceCharacterText As Variant

Sub Localization()
'***BEGIN LOCALIZATION***
'***ATTN LOCALIZATION!!!:  This "(normal text)" below should be
'***(please                the FIRST font option in Word's
'*** delete these          InsertSymbol dialog in the respective
'*** 4 lines)              localized version.
'DEFINE MESSAGES
    NRMText = "(normaler Text)"
    SearchingNormal = "Verwenden Sie Bearbeiten Suchen/Ersetzen f|fffd|r normalen Text."
    SearchingSpecChar = "Verwenden Sie Bearbeiten Suchen/Ersetzen um nach Sonderzeichen zu suchen"
    RepSpecChar = "Verwenden Sie ""(normalen Text)"" um Text durch Sonderzeichen zu ersetzen."
    FSSel = "Die Markierung wurde durchsucht."
    FSDoc = "Das Dokument wurde durchsucht."
    SNF = "Sonderzeichen nicht gefunden."
'DEFINE FORM CAPTIONS AND ACCELERATOR KEYS
    TheFORMName = "Sonderzeichen suchen"
    FW = "Suchen:"
    RW = "Ersetzen durch:"
    SRCH = "Suchen:"
    FNT = "Schriftart:"
    CHRTR = "Zeichen:"
    SYM = "Sonderzeichen"
    aSYM = "s"
    RSYM = "Sonderzeichen"
    aRSYM = "o"
    DOC = "Gesamtes Dokument"
    aDOC = "D"
    SEL = "Markierung"
    aSEL = "M"
    REP = "Ersetzen"
    aREP = "E"
    REPA = "Alle Ersetzen"
    aREPA = "A"
    CANC = "Abbrechen"
    aCANC = "A"
    FINDN = "Weitersuchen"
    aFINDN = "W"
    oRWT = " Text:"
    aoRWT = "T"
'***END LOCALIZATION***
End Sub


Private Sub UserForm_Activate()
'SET FORM CAPTIONS AND ACCELERATOR KEYS
    FindSymbol97.Caption = TheFORMName
    cmdCancelButton.Caption = CANC
    cmdCancelButton.Accelerator = aCANC
    cmdFindNextButton.Caption = FINDN
    cmdFindNextButton.Accelerator = aFINDN
    cmdReplaceButton.Caption = REP
    cmdReplaceButton.Accelerator = aREP
    cmdReplaceAllButton.Caption = REPA
    cmdReplaceAllButton.Accelerator = aREPA
    cmdFindSymbolDialogButton.Caption = SYM
    cmdFindSymbolDialogButton.Accelerator = aSYM
    cmdReplaceSymbolDialogButton.Caption = RSYM
    cmdReplaceSymbolDialogButton.Accelerator = aRSYM
    lblFindCharacter.Caption = CHRTR
    lblFindFont.Caption = FNT
    lblReplaceCharacter.Caption = CHRTR
    lblReplaceFont.Caption = FNT
    optSearchDoc.Caption = DOC
    optSearchDoc.Accelerator = aDOC
    optSearchSel.Caption = SEL
    optSearchSel.Accelerator = aSEL
    optReplaceWithText.Caption = oRWT
    optReplaceWithText.Accelerator = aoRWT
    lblFW.Caption = FW
    lblRW.Caption = RW
    lblSD.Caption = SRCH
End Sub

Private Sub UserForm_Initialize()
    Localization
    Set SinglePHolder = ActiveDocument.Range(0, 0)
'PREPARE INITIAL FORM
    cmdReplaceSymbolDialogButton.Enabled = True
    cmdFindNextButton.Enabled = False
    cmdFindSymbolDialogButton.SetFocus
    cmdReplaceButton.Enabled = False
    cmdReplaceAllButton.Enabled = False
    
    txtReplaceTextBox.Enabled = False
    
    If Application.Selection.Start = Application.Selection.End Then
        optSearchSel.Enabled = False
        optSearchDoc.Value = 1
    Else
        optSearchSel.Value = 1
        optSearchDoc.Value = 0
    End If
End Sub


Private Sub cmdCancelButton_Click()
'CANCEL AND DELETES BOOKMARK IF EXISTS
    If ActiveDocument.Bookmarks.Exists("PHolder") = True Then
        ActiveDocument.Bookmarks("PHolder").Delete
    End If
    Unload FindSymbol97
End Sub


Private Sub cmdFindSymbolDialogButton_Click()
'DISPLAY SYMBOL DIALOG TO SELECT SYMBOL TO FIND
    Done = 0
    ToggleReplaceFind = 0
    GoodFind = 0
    XVar = 0
    NotFoundMsg = 0
    Set dlg = Dialogs(wdDialogInsertSymbol)
    dlg.Tab = 0
         
    If dlg.Display() <> -2 Then
        lblFindFontText = dlg.Font
        lblFindCharacterText = dlg.charnum
    Else
        lblFindFontText = ""
        lblFindCharacterText = ""
    End If
    
    If lblFindFontText = NRMText Then
        MsgBox SearchingNormal, vbInformation
        lblFindFontText = ""
        lblFindFontText.Enabled = True
        lblFindCharacterText = ""
        lblFindCharacterText.Enabled = True
    End If
    
    If dlg.Tab = 1 Then
        MsgBox SearchingSpecChar, vbInformation
        lblFindFontText = ""
        lblFindFontText.Enabled = True
        lblFindCharacterText = ""
        lblFindCharacterText.Enabled = True
    End If
    
    vlblFindFontText = lblFindFontText
    vlblFindCharacterText = lblFindCharacterText
    
    If ActiveDocument.Bookmarks.Exists("PHolder") = True Then
        ActiveDocument.Bookmarks("PHolder").Select
    End If
    
    If optSearchDoc.Value Then
        ActiveDocument.Content.Select
    End If
    ButtonHandler
End Sub



Private Sub cmdReplaceSymbolDialogButton_Click()
'DISPLAY SYMBOL DIALOG TO SELECT SYMBOL TO REPLACE
    optReplaceWithSymbol.Value = 1
    Set dlg = Dialogs(wdDialogInsertSymbol)
    dlg.Tab = 0
        
    If dlg.Display() <> -2 Then
        lblReplaceFontText = dlg.Font
        lblReplaceCharacterText = dlg.charnum
    Else
        lblReplaceFontText = ""
        lblReplaceCharacterText = ""
    End If
    
    If dlg.Tab = 1 Then
        MsgBox RepSpecChar, vbInformation
        lblReplaceFontText = ""
        lblReplaceFontText.Enabled = True
        lblReplaceCharacterText = ""
        lblReplaceCharacterText.Enabled = True
    End If
    ButtonHandler
End Sub



Private Sub cmdFindNextButton_Click()
'FIND NEXT ITERATION OF SYMBOL TO FIND
    ToggleReplaceFind = 1
    FindSymbolRoutine
End Sub



Private Sub cmdReplaceButton_Click()
    If ToggleReplaceFind = 0 Then
        ToggleReplaceFind = 1
    ElseIf ToggleReplaceFind = 1 Then
        ToggleReplaceFind = 0
    End If
    
'IF FIND WAS NOT PRESSED ALREADY, THEN FIND
    If ToggleReplaceFind = 1 Then FindSymbolRoutine

'IF FIND WAS PRESSED ALREADY, THEN REPLACE
    vlblReplaceFontText = lblReplaceFontText
    vlblReplaceCharacterText = lblReplaceCharacterText

    If ToggleReplaceFind = 0 And NotFoundMsg <> 1 Then
        ReplaceRoutine
        ToggleReplaceFind = 1
        FindSymbolRoutine
    End If
End Sub



Private Sub cmdReplaceAllButton_Click()
'TURN SCREEN UPDATING OFF
    Application.ScreenUpdating = False
    vlblReplaceFontText = lblReplaceFontText
    vlblReplaceCharacterText = lblReplaceCharacterText

'IF FIND HAD BEEN PRESSED ALREADY, REPLACE ONCE
    If ToggleReplaceFind = 1 Then
        ReplaceRoutine
    End If
    
'SUBSEQUENT FIND/REPLACEMENTS
    NotFoundMsg = 0
    While NotFoundMsg <> 1
        FindSymbolRoutine
        If NotFoundMsg <> 1 Then
            ReplaceRoutine
        End If
    Wend
    NotFoundMsg = 0
'TURN SCREEN UPDATING ON
    Application.ScreenUpdating = True
    Application.ScreenRefresh
End Sub



Private Sub optReplaceWithSymbol_Click()
'CHANGE TO REPLACING WITH SYMBOL
    lblReplaceFont.Enabled = True
    lblReplaceCharacter.Enabled = True
    lblReplaceFontText.Enabled = True
    lblReplaceCharacterText.Enabled = True
    txtReplaceTextBox.Enabled = False
    ButtonHandler
End Sub


Private Sub optReplaceWithText_Click()
'CHANGE TO REPLACING WITH TEXT
    cmdReplaceButton.Enabled = True
    cmdReplaceAllButton.Enabled = True
    lblReplaceFont.Enabled = False
    lblReplaceCharacter.Enabled = False
    lblReplaceFontText.Enabled = False
    lblReplaceCharacterText.Enabled = False
    txtReplaceTextBox.Enabled = True
    txtReplaceTextBox.SetFocus
    ButtonHandler
End Sub


Private Sub optSearchDoc_Click()
'CHANGE TO SEARCH ENTIRE DOCUMENT
    optSearchSel.Value = 0
    optSearchDoc.Value = 1
    If ActiveDocument.Bookmarks.Exists("PHolder") = True Then
        ActiveDocument.Bookmarks("PHolder").Select
        ActiveDocument.Bookmarks("PHolder").Delete
        ToggleReplaceFind = 0
    End If
    WholeDoc = 1
End Sub


Private Sub optSearchSel_Click()
'CHANGE TO SEARCH SELECTION
    optSearchDoc.Value = 0
    optSearchSel.Value = 1
    WholeDoc = 0
End Sub


Private Function ButtonHandler()
'ENABLES/DISABLES APPROPRIATE DIALOG COMMANDS
    If lblFindFontText <> "" Then
        cmdFindNextButton.Enabled = True
        If optReplaceWithSymbol.Value = True Then
            If lblFindFontText <> "" Then
                If lblReplaceFontText <> "" Then
                    cmdReplaceButton.Enabled = True
                    cmdReplaceAllButton.Enabled = True
                Else
                    cmdReplaceButton.Enabled = False
                    cmdReplaceAllButton.Enabled = False
                End If
            End If
        Else
            If txtReplaceTextBox.Enabled = True Then
                If lblFindFontText <> "" Then
                    cmdReplaceButton.Enabled = True
                    cmdReplaceAllButton.Enabled = True
                Else
                    cmdReplaceButton.Enabled = False
                    cmdReplaceAllButton.Enabled = False
                End If
            End If
        End If
    Else
        cmdFindNextButton.Enabled = False
        cmdReplaceButton.Enabled = False
        cmdReplaceAllButton.Enabled = False
    End If
End Function


Private Function ReplaceRoutine()
'REPLACES WITH EITHER SELECTED TEXT OR SYMBOL
    If optReplaceWithSymbol Then
        Selection.Collapse
        Selection.InsertSymbol Font:=vlblReplaceFontText, characternumber:=vlblReplaceCharacterText, _
                unicode:=True
        Selection.Delete Unit:=wdCharacter, Count:=1
    Else
        Selection.Collapse
        Selection.InsertBefore txtReplaceTextBox
        Selection.MoveRight Unit:=wdCharacter, Count:=1
        Selection.Delete Unit:=wdCharacter, Count:=1
    End If
    Selection.Collapse
End Function



Private Function FoundFontName()
'GET NAME OF FONT FOR FOUND CHARACTER
    If lblFindCharacterText > 0 Then
        FoundFontName = Selection.Font.Name
    Else
        Set dlg = Dialogs(wdDialogInsertSymbol)
        FoundFontName = dlg.Font
    End If
End Function


Private Function FindSymbolRoutine()
'FIND NEXT SYMBOL
    If WholeDoc = 1 Then
        ActiveDocument.Content.Select
        If ActiveDocument.Bookmarks.Exists("PHolder") Then
            ActiveDocument.Bookmarks("PHolder").Delete
        End If
        Set PHolder = ActiveDocument.Bookmarks.Add("Pholder")
        WholeDoc = 0
    End If

    If ActiveDocument.Bookmarks.Exists("PHolder") = False Then
        If optSearchSel.Value Then
            Set PHolder = Selection.Bookmarks.Add("PHolder")
        Else
            ActiveDocument.Content.Select
            Set PHolder = Selection.Bookmarks.Add("PHolder")
        End If
        GoodFind = 0
    End If

    If optSearchDoc.Value = True Then
        optSearchSel.Enabled = False
    End If
    
    If Done = 1 Then
        NotFoundMsg = 0
        If optSearchDoc.Value = True Then
            ActiveDocument.Content.Select
        Else
            ActiveDocument.Bookmarks("PHolder").Select
        End If
    End If
    
    Done = 0
    XVar = 0
    
    While XVar <> lblFindFontText And Done <> 1
        If lblFindCharacterText < 0 Then
            unichar = lblFindCharacterText + 65536
        Else
            unichar = lblFindCharacterText
        End If
        
        With Selection.Find
            .ClearFormatting
            .Text = ChrW(unichar)
            .Forward = True
            .MatchCase = False
            .MatchWholeWord = False
            .MatchAllWordForms = False
            .MatchWildcards = False
            .Wrap = 0
            .Execute
        End With
    
        XVar = FoundFontName()
    
        If XVar = lblFindFontText And Selection.Find.Found = True Then GoodFind = 1

'DISPLAY APPROPRIATE MESSAGE WHEN DONE/SYMBOL NOT FOUND
        If Selection.Range.End > ActiveDocument.Bookmarks("PHolder").End Or _
                Selection.Range.Start < ActiveDocument.Bookmarks("pholder").Start Or _
                (Selection.Range.Start = SinglePHolder.Start And _
                Selection.Range.End = SinglePHolder.End) Then
            Selection.Collapse
            If GoodFind = 1 Then
                If optSearchSel.Value = True Then
                    MsgBox FSSel, vbInformation
                    ActiveDocument.Bookmarks("PHolder").Select
                Else
                    MsgBox FSDoc, vbInformation
                    ActiveDocument.Content.Select
                End If
                NotFoundMsg = 1
            Else
                MsgBox SNF, vbInformation
                NotFoundMsg = 1
                ActiveDocument.Bookmarks("PHolder").Select
            End If
            Done = 1
            ToggleReplaceFind = 0
        Else
            If Selection.Find.Found = False And GoodFind = 1 And NotFoundMsg <> 1 Then
                If optSearchSel.Value = True Then
                    MsgBox FSSel, vbInformation
                Else
                    MsgBox FSDoc, vbInformation
                End If
                ActiveDocument.Bookmarks("PHolder").Select
                NotFoundMsg = 1
                Done = 1
                ToggleReplaceFind = 0
            End If
            If Selection.Find.Found = False And GoodFind = 0 And NotFoundMsg <> 1 Then
                MsgBox SNF, vbInformation
                NotFoundMsg = 1
                ActiveDocument.Bookmarks("PHolder").Select
                Done = 1
                ToggleReplaceFind = 0
            End If
        End If
        Set SinglePHolder = Selection.Range
    Wend
End Function

Attribute VB_Name = "Fu|fffd|notenAssistentStart"
Public FlagBlank As Boolean
Public AssistInst As Boolean

Sub InsertFootnote()
Attribute InsertFootnote.VB_Description = "Insert footnotes formatted for the Chicago Manual of Style or MLA specifications."
Attribute InsertFootnote.VB_ProcData.VB_Invoke_Func = "TemplateProject.StartFootnoteWizard.InsertFootnote"
On Error GoTo Blowup                'Error routine in case assistant is not installed
    If Dialogs(wdDialogInsertFootnote).Show = -1 Then   'Show Insert Footnote dialog
        If Assistant.Visible Then   'Check to see if assistant is installed
        End If
        AssistInst = True
        frmFootNoteWiz.Show
    Else
        End
    End If
    
    
Blowup:
    AssistInst = False
    frmFootNoteWiz.Show

End Sub

Attribute VB_Name = "NVHF"
Attribute VB_Base = "0{CFB13091-5451-11D0-B5E8-00AA00BBB76C}{CFB13066-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
'************************************************
'*                                              *
'*              BEGIN DECLARATIONS              *
'*                                              *
'************************************************
Dim InitL As Boolean    'Sets whether to initalize or not
Dim FrmCapt As String   'Form Caption
Dim HdrTxt As String    'Header text in listbox
Dim FtrTxt As String    'Footer text in listbox
Dim OddHTxt As String   'Odd Header text in listbox
Dim OddFTxt As String   'Odd Footer text in listbox
Dim EvHTxt As String    'Even Header text in listbox
Dim EvFTxt As String    'Even Footer text in listbox
Dim FPHdrTxt As String  'First Page Header text in listbox
Dim FPFtrTxt As String  'First Page Footer text in listbox
Dim OKTxt As String     'Caption for OK button
Dim CanTxt As String    'Caption for Cancel Button
Dim PgNTxt As String    'Caption for Page Number Button
Dim ChkOEPTxt As String 'Caption for DifferentOdd/Even CheckBox
Dim ChkDFPTxt As String 'Caption for DifferentFirstPage CheckBox
Dim LblDistH As String  'Header distance text caption
Dim LblDistF As String  'Footer distance text caption
Dim Measure As Long     'Stores the current measurement type
Dim FramTxt As String   'Stores the title for the frame
Dim Max As Integer      'Stores the maximum header/footer distance
Dim Min As Integer      'Stores the minimum header/footer distance
Dim UDiv As Integer     'Stores the unit divisor
Dim Unit As String      'Stores the sufix measurement type
Dim Pnt As String       'Stores the measurement character for points
Dim Inch As String      'Stores the measurement character for inches
Dim Pica As String      'Stores the measurement character for picas
Dim Cent As String      'Stores the measurement character for centimeters
Dim BadNumTxt As String 'Stores the bad number range message text
Dim BadValTxt As String 'Stores the invalid number message text
Sub ConvertToPoints(HeadFoot As Integer, CurVal As String)
Dim Points As Integer   'Stores the header/footer distance in points
Select Case Measure
    Case 0
        Points = InchesToPoints(Val(CurVal))
    Case 1
        Points = CentimetersToPoints(Val(CurVal))
   Case 4
        Points = PicasToPoints(Val(CurVal))
   Case Else
        Points = Val(CurVal)
End Select

If HeadFoot = 0 Then
    Selection.Sections(1).PageSetup.HeaderDistance = Points
Else
    Selection.Sections(1).PageSetup.FooterDistance = Points
End If
End Sub



'************************************************
'*                                              *
'*              BEGIN DEFINITIONS               *
'*                                              *
'************************************************

Sub Init()
FrmCapt = "Normalansicht Kopf-/Fu|fffd|zeilen"
HdrTxt = "Kopfzeilen"
FtrTxt = "Fuzeilen"
OddHTxt = "Ungerade Kopfzeilen"
OddFTxt = "Ungerade Fu|fffd|zeilen"
EvHTxt = "Gerade Kopfzeilen"
EvFTxt = "Gerade Fu|fffd|zeilen"
FPHdrTxt = "Erste Kopfzeile"
FPFtrTxt = "Erste Fu|fffd|zeiel"
OKTxt = "OK"
CanTxt = "Abbrechen"
PgNTxt = "Seitennummern..."
ChkOEPTxt = "Gerade/ungerade anders"
ChkDFPTxt = "Erste Seite anders"
LblDistH = "Kopfzeile:"
LblDistF = "Fu|fffd|zeile:"
FramTxt = "Abstand vom Seitenrand"
Inch = Chr(34)
Pica = "pi"
Cent = " cm"
Pnt = "pt"
'*********************************************
'*     Populate Form and Control Captions    *
'*********************************************

Me.Caption = FrmCapt
btn_OK.Caption = OKTxt
btn_Cancel.Caption = CanTxt
btn_PgNum.Caption = PgNTxt
chk_Diff.Caption = ChkDFPTxt
chk_Odd.Caption = ChkOEPTxt
lbl_H.Caption = LblDistH
lbl_F.Caption = LblDistF
fram_FE.Caption = FramTxt
With Selection.Sections(1).PageSetup
    chk_Diff.Value = Abs(.DifferentFirstPageHeaderFooter)
    chk_Odd.Value = Abs(.OddAndEvenPagesHeaderFooter)
End With
txt_DistHead.Text = SetMeasurement(0)
txt_DistFoot.Text = SetMeasurement(1)
InitL = False
BadNumTxt = "Sie m|fffd|ssen eine Zahl zwischen" & Min & Unit & " und " & (Max / UDiv) & Unit & " eingeben."
BadValTxt = "Ung|fffd|ltiges Ma|fffd|."
End Sub
Function UpdateDistance(CurVal As String, Measure As Long, Unit As String, SPN As Control) As String
Dim Result As Boolean   'Stores the True/False value if measurement is within range
Result = (Val(CurVal) >= Min) And (Val(CurVal) <= Max / UDiv)
If Result Then
    Select Case Measure
    Case 0
        CurVal = Format(LTrim(Str(SPN.Value / UDiv)), "##.#")
    Case 1
        CurVal = Format(LTrim(Str(SPN.Value) / UDiv), "#0.00")
    Case Else
        CurVal = Format(LTrim(Str(SPN.Value)), "##0")
    End Select
    If Measure < 2 Then
        If Left(LTrim(CurVal), 1) = "." Then CurVal = "0" & LTrim(CurVal)
        If Right(LTrim(CurVal), 2) = ".0" Then CurVal = LTrim(CurVal) - Right(LTrim(CurVal), 2)
    End If
    UpdateDistance = CurVal & Unit
Else
    MsgBox BadNumTxt
End If
End Function

Function SetMeasurement(HeadFoot As Integer) As String
Dim Data As Single      'Stores the distance in points

If HeadFoot = 0 Then
    Data = Selection.Sections(1).PageSetup.HeaderDistance
Else
    Data = Selection.Sections(1).PageSetup.FooterDistance
End If
Measure = Application.Options.MeasurementUnit
UDiv = 1
Max = 1584  'points
Min = 0
Select Case Measure
    Case 0
        Max = 220
        UDiv = 10
        spn_H.Max = 220
        spn_F.Max = 220
        spn_H.Value = PointsToInches(Data) * UDiv
        spn_F.Value = PointsToInches(Data) * UDiv
        Unit = Inch
        SetMeasurement = Format(Str(PointsToInches(Data)), "#0.0") & Unit
    Case 1
        Max = 2835
        UDiv = 100
        spn_H.Max = 2835
        spn_F.Max = 2835
        spn_H.SmallChange = 10
        spn_F.SmallChange = 10
        spn_H.Value = PointsToCentimeters(Data) * UDiv
        spn_F.Value = PointsToCentimeters(Data) * UDiv
        Unit = Cent
        SetMeasurement = Format(PointsToCentimeters(Data), "0.00") & Unit
   Case 4
        Max = 132
        spn_H.Max = 132
        spn_F.Max = 132
        spn_H.Value = PointsToPicas(Data)
        spn_F.Value = PointsToPicas(Data)
        Unit = Pica
        SetMeasurement = Format(Str(PointsToPicas(Data)), "##0") & Unit
   Case Else
        spn_H.Max = Max
        spn_F.Max = Max
        spn_H.Value = Data
        spn_F.Value = Data
        Unit = Pnt
        SetMeasurement = Format(Str(Data), "##0") & Unit
End Select
End Function
Sub UpdateList()
lst_HdrFtr.Clear
lst_HdrFtr.AddItem HdrTxt
lst_HdrFtr.AddItem FtrTxt
If chk_Odd.Value = True Then
    lst_HdrFtr.Clear
    If chk_Diff.Value = True Then
        lst_HdrFtr.AddItem FPHdrTxt
        lst_HdrFtr.AddItem FPFtrTxt
    End If
    lst_HdrFtr.AddItem EvHTxt
    lst_HdrFtr.AddItem EvFTxt
    lst_HdrFtr.AddItem OddHTxt
    lst_HdrFtr.AddItem OddFTxt
Else
    If chk_Diff.Value = True Then
        lst_HdrFtr.AddItem FPHdrTxt
        lst_HdrFtr.AddItem FPFtrTxt
    End If
End If
lst_HdrFtr.ListIndex = 0
End Sub

Function GoodNum(txt As Control, Cntrl As Control) As Boolean
Dim XYZ As String
GoodNum = True
 If InStr(txt.Text, Unit) <> 0 Then
    XYZ = Left(txt.Text, InStr(1, txt.Text, Unit) - 1)
 Else
    XYZ = txt.Text
 End If
 
 If Not IsNumeric(XYZ) Then
    If Cntrl.Name <> "txt_DistHead" And Cntrl.Name <> "txt_DistFoot" Then
        MsgBox BadValTxt
        txt.SetFocus
        txt.SelStart = 0
        txt.SelLength = Len(txt.Text)
    End If
        GoodNum = False
  Else
      Dim Result As Boolean
      Result = (Val(XYZ) >= Min) And (Val(XYZ) <= Max / UDiv)
        If Not Result Then
         If Cntrl.Name <> "txt_DistHead" And Cntrl.Name <> "txt_DistFoot" Then
            MsgBox BadNumTxt
            txt.SetFocus
            txt.SelStart = 0
            txt.SelLength = Len(txt.Text)
         End If
            GoodNum = False
        End If
  End If

End Function

Private Sub btn_OK_Click()
With Selection.Sections(1).PageSetup
    .DifferentFirstPageHeaderFooter = chk_Diff.Value
    .OddAndEvenPagesHeaderFooter = chk_Odd.Value
    If Not GoodNum(txt_DistHead, btn_OK) Then Exit Sub
    ConvertToPoints 0, LTrim(txt_DistHead)
    If Not GoodNum(txt_DistFoot, btn_OK) Then Exit Sub
    ConvertToPoints 1, LTrim(txt_DistFoot.Text)
End With
With ActiveDocument.ActiveWindow.View
    If lst_HdrFtr.ListIndex < 0 Then
        lst_HdrFtr.ListIndex = 0
    End If
    Select Case lst_HdrFtr.list(lst_HdrFtr.ListIndex)
        Case HdrTxt
           .SplitSpecial = wdPanePrimaryHeader
        Case FtrTxt
            .SplitSpecial = wdPanePrimaryFooter
        Case EvHTxt
            .SplitSpecial = wdPaneEvenPagesHeader
        Case EvFTxt
            .SplitSpecial = wdPaneEvenPagesFooter
        Case OddHTxt
            .SplitSpecial = wdPanePrimaryHeader
        Case OddFTxt
            .SplitSpecial = wdPanePrimaryFooter
        Case FPFtrTxt
             .SplitSpecial = wdPaneFirstPageFooter
        Case Else
             .SplitSpecial = wdPaneFirstPageHeader
    End Select
bye:
End With
End
End Sub

Private Sub btn_Cancel_Click()
End
End Sub

Private Sub btn_PgNum_Click()
Dialogs(wdDialogInsertPageNumbers).Show
btn_OK.SetFocus
End Sub

Private Sub chk_Diff_Click()
If Not InitL Then UpdateList
End Sub

Private Sub chk_Odd_Click()
If Not InitL Then UpdateList
End Sub

Private Sub lst_HdrFtr_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    btn_OK_Click
End Sub

Private Sub spn_F_Change()
If Not InitL Then
    If Not GoodNum(txt_DistFoot, spn_F) Then Exit Sub
        txt_DistFoot = UpdateDistance(txt_DistFoot, Measure, Unit, spn_F)
End If
End Sub

Private Sub spn_H_Change()
If Not InitL Then
    If Not GoodNum(txt_DistHead, spn_H) Then Exit Sub
        txt_DistHead = UpdateDistance(txt_DistHead, Measure, Unit, spn_H)
    End If
End Sub
Private Sub txt_DistFoot_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim n
    If Not GoodNum(txt_DistFoot, txt_DistFoot) Then Exit Sub
        If Not InStr(txt_DistFoot, ".") Then
            n = InStr(txt_DistFoot, ",")
            If n Then txt_DistFoot = Left$(txt_DistFoot, n - 1) & "." & Mid$(txt_DistFoot, n + 1)
            spn_F.Value = Val(txt_DistFoot.Text) * UDiv
            spn_F_Change
        Else
            spn_F.Value = Val(txt_DistFoot.Text) * UDiv
        End If
End Sub
Private Sub txt_DistHead_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Dim n
    If Not GoodNum(txt_DistHead, txt_DistHead) Then Exit Sub
        If Not InStr(txt_DistHead, ".") Then
            n = InStr(txt_DistHead, ",")
            If n Then txt_DistHead = Left$(txt_DistHead, n - 1) & "." & Mid$(txt_DistHead, n + 1)
            spn_H.Value = Val(txt_DistHead.Text) * UDiv
            spn_H_Change
        Else
            spn_H.Value = Val(txt_DistHead.Text) * UDiv
        End If
End Sub

Private Sub UserForm_Initialize()
With ActiveWindow.View
    If Not .SplitSpecial Then
            InitL = True
            Init
            UpdateList
            Me.Show
    End If
End With
End Sub
Attribute VB_Name = "NewMacros"




Attribute VB_Name = "NormalAnsichtKopfFu|fffd|zeile"
Sub NormalViewHeaderFooter()
Attribute NormalViewHeaderFooter.VB_Description = "View a document Header/Footer pane while in Normal View"
Attribute NormalViewHeaderFooter.VB_ProcData.VB_Invoke_Func = "TemplateProject.NormViewHeaderFooter.NormalViewHeaderFooter"
NVHF.Show
End Sub
Attribute VB_Name = "Sammlung"
' Multiselect (Spike) macro for Word 97

Public Response As Variant
Public wantnewspike As Variant
'
' messages
'
Public Const SpikeCleared As String = "Der Inhalt des AutoText Sammlung wurde gel|fffd|scht..."
Public Const Title      As String = "Mehrfach-Markierung (Sammlung)"
Public Const Spike      As String = "Sammlung"
Public Const NoSpike        As String = "Der AutoText ""Sammlung"" ist nicht in der ""Normal.DOT"" enthalten."
Public Const SpikeCreated       As String = "Der AutoText ""Sammlung"" wurde f|fffd|r Sie in der ""Normal.DOT"" generiert..."
Public Const NewSpikeCreated        As String = "Der AutoText ""Sammlung"" extistierte nicht in der ""Normal.DOT"". Der AutoText wurde neu erstellt."
Public Const SpikeInserted      As String = "Der Inhalt des AutoText ""Sammlung"" wurde an der aktuellen Einf|fffd|geposition eingef|fffd|gt..."
Public Const NoDoc      As String = "Sie m|fffd|ssen ein Dokument ge|fffd|ffnet haben, um diesen Befehl durchzuf|fffd|hreh. M|fffd|chten Sie ein neues, leeres Dokument erstellen?"
Public Const NoSpikeQuestion        As String = "In der ""Normal.DOT"" ist kein AutoText ""Sammlung"" enthalten. M|fffd|chten Sie diesen AutoText jetzt erstellen?"
Public Const NeedaDoc       As String = "Es mu|fffd| ein Dokument ge|fffd|ffnet sein, um diesen Befehl durchzuf|fffd|hren."
Public Const SelectSomeText     As String = "Es ist kein Text markiert. Sie m|fffd|ssen Text markieren, bevor Sie diesen Befehl aufrufen."
Public Const SelectionAdded     As String = "Der Inhalt der Markierung wurde an den AutoText ""Sammlung"" angf|fffd|gt."
Public Const GeneralError       As String = "Es ist ein Fehler aufgetreten. Bitte versuchen Sie den Vorgang erneut..."
Sub previewspike()
Attribute previewspike.VB_Description = "Component of CopySpike"
Attribute previewspike.VB_ProcData.VB_Invoke_Func = "TemplateProject.Spike.previewspike"
StatusBar = Title
Set normaldot = Application.NormalTemplate
For Each entry In normaldot.AutoTextEntries
   If entry.Name = Spike Then GoTo present
Next entry
MsgBox NoSpike, vbInformation, Title
Exit Sub
present:
Load frmpreview
frmpreview.Show
End Sub
Sub ClearSpikeEntries()
Attribute ClearSpikeEntries.VB_Description = "Component of CopySpike"
Attribute ClearSpikeEntries.VB_ProcData.VB_Invoke_Func = "TemplateProject.Spike.ClearSpikeEntries"
StatusBar = Title
Set normaldot = Application.NormalTemplate
For Each entry In normaldot.AutoTextEntries
   If entry.Name = Spike Then GoTo present
Next entry
If Application.Documents.Count = 0 Then
wantnewspike = MsgBox(NoSpikeQuestion, 36, Title)
    If wantnewspike = vbYes Then
    Response = MsgBox(NoDoc, 36, Title)
            If Response = vbYes Then Application.Documents.Add
            If Response = vbNo Then Exit Sub
    normaldot.AutoTextEntries.Add Name:=Spike, Range:=Selection.Range
    MsgBox SpikeCreated, vbInformation, Title
    MsgBox SpikeCleared, vbInformation, Title
    Exit Sub
    If wantnewspike = vbNo Then Exit Sub
    End If
End If
Selection.HomeKey Unit:=wdStory
normaldot.AutoTextEntries.Add Name:=Spike, Range:=Selection.Range
MsgBox NewSpikeCreated, vbInformation, Title
Exit Sub
present:
normaldot.AutoTextEntries.Item(Spike).Value = ""
MsgBox SpikeCleared, vbInformation, Title
End Sub
Sub AddSelectionToSpike()
Attribute AddSelectionToSpike.VB_Description = "Component of CopySpike"
Attribute AddSelectionToSpike.VB_ProcData.VB_Invoke_Func = "TemplateProject.Spike.AddSelectionToSpike"
StatusBar = Title
On Error GoTo handler
Set normaldot = Application.NormalTemplate
If Application.Documents.Count = 0 Then
    MsgBox NeedaDoc, vbInformation, Title
    Exit Sub
End If
For Each entry In normaldot.AutoTextEntries
   If entry.Name = Spike Then GoTo present
Next entry
If Selection.Range = "" Then
    MsgBox SelectSomeText, vbInformation, Title
    Exit Sub
End If
normaldot.AutoTextEntries.Add Name:=Spike, Range:=Selection.Range
MsgBox NewSpikeCreated, vbInformation, Title
StatusBar = SelectionAdded$
Exit Sub
present:
If Selection.Range = "" Then
  MsgBox SelectSomeText$, vbInformation, Title
  Exit Sub
End If
With normaldot.AutoTextEntries
     .AppendToSpike Range:=Selection.Range
End With
StatusBar = SelectionAdded
ActiveDocument.Undo
Exit Sub
handler:
MsgBox GeneralError, vbCritical, Title
End Sub
Sub InsertSpikeContents()
Attribute InsertSpikeContents.VB_Description = "Component of CopySpike"
Attribute InsertSpikeContents.VB_ProcData.VB_Invoke_Func = "TemplateProject.Spike.InsertSpikeContents"
StatusBar = Title
On Error GoTo handler
Set normaldot = Application.NormalTemplate
For Each entry In normaldot.AutoTextEntries
   If entry.Name = Spike Then GoTo present
Next entry
MsgBox NoSpike, vbInformation, Title
Exit Sub
present:
If Application.Documents.Count = 0 Then
    Response = MsgBox(NoDoc, 36, Title)
    If Response = vbYes Then Documents.Add
    If Response = vbNo Then Exit Sub
End If
With normaldot.AutoTextEntries.Item(Spike)
    .Insert where:=Selection.Range, RichText:=True
End With
StatusBar = SpikeInserted
Exit Sub
handler:
MsgBox GeneralError, vbCritical, Title
End Sub
Attribute VB_Name = "SonderzeichenSuchenStart"
Sub FindSymbol()
Attribute FindSymbol.VB_Description = "Finds and Replaces Symbol characters"
Attribute FindSymbol.VB_ProcData.VB_Invoke_Func = "TemplateProject.FindSymbolsStart.FindSymbol"
'
' FindSymbol Macro
'
Load FindSymbol97
FindSymbol97.Show
End Sub
Attribute VB_Name = "SuperDocMain"
Attribute VB_Base = "0{CFB130EB-5451-11D0-B5E8-00AA00BBB76C}{CFB13068-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private DocProp(30) As String
Private aFonts() As String
Private aFontsPS() As String
Private aStyles() As String
Private aSections() As String
Private aTabChosen(6) As Boolean
Private aTabHasItems(6) As Boolean
Private aNumItems(6) As Integer
Private aTabName(6) As String
Private StatusMsg(6) As String
Private aReportDone(6) As Boolean
Private aReportCols(6) As Integer
Private aShowReportButton(6) As Boolean
Private aAllowGoTo(6) As Boolean
Private aLastLoc(6, 1) As Integer
Private bReportCreated As Boolean
Private strFN As String 'Filename
Private oTable As Object
Private oCell As Object
Private oRow As Object
Public oDoc As Object
Private oRDoc As Object
Private iTabNum As Integer
Private sMacroName As String
Private iCount As Integer
Private i As Integer
Private Q$
Private strFontSampleText As String
Private Const revmess As String = "In diesem Dokument sind unbest|fffd|tigte |fffd|berarbeitungen enthalten. Der Makro wird falsche Werte anzeigen bis alle |fffd|berarbeitungen akzeptiert sind..."
Const S1 = "Super Dokumentstatistik f|fffd|r Word 97"
Const S2 = "Allgemein"
Const S3 = "Schrift"
Const S4 = "Formatvorlagen"
Const S5 = "Abschnitte"
Const S6 = "Hyperlink"
Const S7 = "Tabellen"
Const S8 = "Felder"
Const S9 = "Klicken Sie auf den Namen einer Schrift, um ein Beispiel zu sehen, oder das erste Vorkommen im Dokument zu suchen."
Const S10 = "Klicken Sie auf eine Formatvorlage um deren Informaionen anzuzeigen."
Const S11 = "Klicken Sie auf eine Abschnittsnummer, um Informationen zu diesem Abschnitt zu erhalten."
Const S12 = "Klicken Sie auf einen Hyperlink um im Dokument auf den Hyperlink zu springen."
Const S13 = "Klicken Sie auf die Nummer einer Tabelle um zur Tabelle zu springen."
Const S14 = "Klicken Sie auf ein Feld, um den Feldinhalt zu sehen, oder zum Feld zu springen."
Const S15 = "SuperDokumentstatistik" 'bookmark name
Const S16 = "Franz jagt im komplett verwahrlosten Taxi quer durch Bayern. 0123456789"
Const S17 = "Suche Schriftart "
Const S18 = " von "
Const S19 = " Systemschriftarten..."
Const S20 = "Informationen zur Schrift laden"
Const S21 = " Schriftarten gefunden..."
Const S22 = "Suche nach Formatvorlage"
Const S23 = "N/A"
Const S24 = "Lese Abschnitt"
Const S25 = "Hochformat"
Const S26 = "Querformat"
Const S27 = "sonstige"
Const S28 = "Fortlaufend"
Const S29 = "<Keine Hyperlinks gefunden>"
Const S30 = "<Keine>"
Const S31 = "<Keine Felder gefunden>"
Const S32 = "Unerwarteter Fehler"
Const S33 = "Erstelle "
Const S34 = " Bericht..."
Const S35 = " Bericht an "
Const S36 = "|fffd|berschrift 1" 'Has to match stylename
Const S37 = "Dateiname"
Const S38 = "Speicherplatz"
Const S39 = "Autor"
Const S40 = "Zuletzt gespeichert von"
Const S41 = "Erstellt am"
Const S42 = "Ge|fffd|ndert am"
Const S43 = "Gedruckt am"
Const S44 = "Verbundene Dokumentvorlage"
Const S45 = "Version"
Const S46 = "Gesamte Bearbeitungszeit"
Const S47 = "Seiten"
Const S48 = "Titel"
Const S49 = "Thema"
Const S50 = "Kategorie"
Const S51 = "Stichw|fffd|rter"
Const S52 = "Kommentar"
Const S53 = "W|fffd|rter"
Const S54 = "Zeichen"
Const S55 = "Abs|fffd|tze"
Const S56 = "S|fffd|tze"
Const S57 = "Passive S|fffd|tze"
Const S58 = "S|fffd|tze pro Absatz"
Const S59 = "W|fffd|rter pro Satz"
Const S60 = "Zeichen pro Wort"
Const S61 = "Flesch Lesbarkeit"
Const S62 = "Flesch-Kincaid Grade Level"
Const S63 = "Value"
Const S64 = "S."
Const S65 = "Ab"
Const S66 = "Beispiel"
Const S67 = "Typ"
Const S68 = "Basiert auf"
Const S69 = "N|fffd|chster"          '"Next Paragraph" is the text
Const S70 = "Absatz"
Const S71 = "Auto-"         '"Auto-Update" is the text
Const S72 = "Update"
Const S73 = "Beschreibung"
Const S74 = "Oberer Seitenrand"
Const S75 = "Unterer Seitenrand"
Const S76 = "Linker Seitenrand"
Const S77 = "Rechter Seitenrand"
Const S78 = "Bundsteg"
Const S79 = "Abstand Kpfzeile"
Const S80 = "Abstand Fu|fffd|zeile"
Const S81 = "Gegen|fffd|berliegende Seiten?"
Const S82 = "Seitenbreite"
Const S83 = "Seitenh|fffd|he"
Const S84 = "Ausrichtung"
Const S85 = "Papierzufuhr erste Seite"
Const S86 = "Papierzufuhr |fffd|brige Seiten"
Const S87 = "Abschnittsbeginn"
Const S88 = "Gerade/ungerade Kopf-/Fu|fffd|zeilen anders"
Const S89 = "Erste seite andere Kopf-/Fu|fffd|ezeile"
Const S90 = "Vertikale Ausrichtung"
Const S91 = "Zeilennummern"
Const S92 = "  Beginnen mit Nr."           ' note the 2 spaces
Const S93 = "  Abstand zum Text"           ' note the 2 spaces
Const S94 = "  Z|fffd|hlintervall"              ' note the 2 spaces
Const S95 = "Format der Seitenzahlen"
Const S96 = "Seitennummern beginnen mit"
Const S97 = "Kapitelnummer einbeziehen"
Const S98 = "  Beginnen mit Formatvorlage"    ' note the 2 spaces
Const S99 = " von "                     ' shortest way to say "number of..."
Const S100 = "Zeilen"
Const S101 = "Spalten"
Const S102 = "Uniform" 'Rainera: ??
Const S103 = "Autoformat"
Const S104 = "Erste Zeile Ausrichtung"
Const S105 = "Erste Zeile linker Einzug"
Const S106 = "Erste Zeile |fffd|berschrift"
Const S107 = "Erste Zeile Seitenwechsel in der Zeile zulassen"
Const S108 = "Inhalt erste Zelle"
Const S109 = "Feldfunktiion"
Const S110 = "Feldergebnis"
Const S111 = "-Bericht erstellt."
Const S112 = "Dieser Bericht wurd bereits erstellt. Der Bericht wird nicht neu erstellt."
Const S113 = "Dieser Makro findet nur Elemente im Haupdokument, nicht aber Elemente in Kopf-/Fu|fffd|zeilen, Textfeldern, etc."
Const S114 = "Der Makro zeigt nur Schriften an, die in Ihrem System installiert sind. Wenn im Dokument Schriften verwendet werden, die nicht in Ihrem System installiert isnd, werden diese nicht angezeigt."
Const S119 = "Alle Felder im Dokument werden angezeigt. Felder, die in Kopf-/Fu|fffd|zeilen oder Textfeldern plaziert sind werden nicht angezeigt."
Const S120 = "Ja"
Const S121 = "Nein"
Const S122 = "Vielleicht"
Const S123 = "Zeichen"
Const S124 = "Unbekannt"
Const S125 = "Standardschacht"    'S125-S140 are VBA constants from the type library
Const S126 = "Oberer Schacht"
Const S127 = "Unterer Schacht"
Const S128 = "Mittlerer Schact"
Const S129 = "Manueller Einzug"
Const S130 = "Umschlagschacht"
Const S131 = "Manueller Umschlageinzug"
Const S132 = "Automatischer Einzelblatteinzug"
Const S133 = "Endlospapier"
Const S134 = "Schacht f|fffd|r kleine Formate"
Const S135 = "Schacht f|fffd|r gro|fffd|e Formate"
Const S136 = "Gro|fffd|raumschacht"
Const S137 = ""                   ' left intentionally blank
Const S138 = ""                   ' left intentionally blank
Const S139 = "Papierkasette"
Const S140 = "Formulareinzug"
Const S141 = "Fortlaufend"
Const S142 = "Neue Spalte"
Const S143 = "Neue Seite"
Const S144 = "Gerade Seite"
Const S145 = "Ungerade Seite"
Const S146 = "Oben"
Const S147 = "Zentriert"
Const S148 = "Blocksatz"
Const S149 = "1, 2, 3, ..."
Const S150 = "a, b, c, ..."
Const S151 = "A, B, C, ..."
Const S152 = "i, ii, iii, ..."
Const S153 = "I, II, III, ..."
Const S154 = "Einfach"
Const S155 = "Standard"
Const S156 = "Farbig"
Const S157 = "Spalten"
Const S158 = "Gitternetz"
Const S159 = "Liste"
Const S160 = "3D-Effekt"
Const s160a = "Spezial"
Const S161 = "Aktuell"
Const S162 = "Elegant"
Const S163 = "Professionell"
Const S164 = "Undetermined"
Const S165 = "Links"
Const S166 = "Rechts"
Const S167 = "Fehler: Unbekannte Ausrichtung"
Const S168 = "Gr|fffd||fffd|e"
Const S169 = "Suche Tabelle"
Const S170 = "pt"       'Points
Const S171 = "cm"       'Centimeters
Const S172 = "pi"       'Picas
Private S173            'Inches"
Dim DefaultMeasure
'Localizer: Please EditFind "Private Function PluralFix"
'This may or may not be a nightmare, but it's a function that handles plurals by tacking
'  on a 's' if a number is <> 1. Not sure if this concept will work in other languages.

Private Sub UserForm_Activate()
  Application.ScreenUpdating = False
  DoEvents
  System.Cursor = wdCursorWait
  sMacroName = S1
  Q$ = Chr(34)
  DefaultMeasure = Application.Options.MeasurementUnit
  S173 = Chr$(34)
  
  bReportCreated = False
  
  aTabName(0) = S2
  aReportCols(0) = 2
  aShowReportButton(0) = True
  aAllowGoTo(0) = False
  StatusMsg(0) = ""
  
  aTabName(1) = S3
  aReportCols(1) = 4
  aShowReportButton(1) = True
  aAllowGoTo(1) = True
  StatusMsg(1) = S9
  
  aTabName(2) = S4
  aReportCols(2) = 8
  aShowReportButton(2) = True
  aAllowGoTo(2) = True
  StatusMsg(2) = S10
  
  aTabName(3) = S5
  aShowReportButton(3) = True
  aAllowGoTo(3) = True
  StatusMsg(3) = S11
  
  aTabName(4) = S6
  aReportCols(4) = 3
  aShowReportButton(4) = False
  aAllowGoTo(4) = False
  StatusMsg(4) = S12
  
  aTabName(5) = S7
  aReportCols(5) = 12
  aShowReportButton(5) = False
  aAllowGoTo(5) = False
  StatusMsg(5) = S13
  
  aTabName(6) = S8
  aReportCols(6) = 4
  aShowReportButton(6) = False
  aAllowGoTo(6) = False
  StatusMsg(6) = S14
  Set oDoc = ActiveDocument
  oDoc.Bookmarks.Add Name:=S15, Range:=Selection.Range
  strFN = ActiveDocument.Name             'filename of doc to be analyzed
  cmdReport.Enabled = True      'enable the Report button
  MultiPage1.Value = 0          'set the first tab as default
  aNumItems(0) = 26             'hard-code the number of General items
  strFontSampleText = S16
  i = 0
  On Error Resume Next
  For Each prop In oDoc.BuiltInDocumentProperties
    i = i + 1
    DocProp(i) = prop.Value
  Next
  lblFileName.Caption = strFN
  lblLocation.Caption = ActiveDocument.Path
  lblAuthor.Caption = DocProp(3)
  lblLastAuthor = DocProp(7)
  lblDateCreated = DocProp(11)
  lblDateLastSaved = DocProp(12)
  lblDateLastPrinted = DocProp(10)
  lblSize.Caption = DocProp(22)
  lblAttachedTemplate = DocProp(6)
  lblRevision.Caption = DocProp(8)
  lblEditingTime.Caption = DocProp(13)
  lblPages.Caption = DocProp(14)
  lblTitle = DocProp(1)
  lblSubject = DocProp(2)
  lblCategory = DocProp(18)
  lblKeywords = DocProp(4)
  lblComments = DocProp(5)
'  For Each rs In Selection.Range.ReadabilityStatistics
'      'MsgBox rs.Name
'      '& " - " & rs.Value
'  Next rs
  lblStatus.Caption = ""
  System.Cursor = wdCursorNormal
  DoEvents
  On Error GoTo 0
Application.ScreenUpdating = True
End Sub

Private Sub MultiPage1_Change()
Application.ScreenUpdating = False
System.Cursor = wdCursorWait
iTabNum = MultiPage1.Value
If aTabChosen(iTabNum) = False Then 'have to initialize the tab
  lblPage.Caption = ""
  lblSection.Caption = ""
  DoEvents
  aTabChosen(iTabNum) = True      'mark as alreadly built
  System.Cursor = wdCursorWait
  oDoc.Activate
  Select Case iTabNum             'which tab?
    Case 0  'General
    Case 1  'Fonts
      If revexist Then Exit Sub
      aTabHasItems(iTabNum) = True
      NumSysFonts = Application.FontNames.Count
      CurFontNum = 0
      NumFontsFound = 0
      ReDim aFonts(NumSysFonts - 1)
      For Each strFont In FontNames
        CurFontNum = CurFontNum + 1
        lblStatus.Caption = S17$ + Str(CurFontNum) + S18 + Str(NumSysFonts) + S19
        DoEvents
        Selection.HomeKey Unit:=wdStory
        With Selection.Find
          .Forward = True
          .ClearFormatting
          .Font.Name = strFont
          .Wrap = wdFindContinue
          .Execute FindText:=""
          If .Found Then
            NumFontsFound = NumFontsFound + 1
            aFonts(NumFontsFound - 1) = strFont
          End If
        End With
      Next strFont
      ReDim aFontsPS(NumFontsFound - 1, 2)
      For i = 0 To NumFontsFound - 1
        lblStatus.Caption = S20 + Str(i + 1) + S18 + Str(NumFontsFound) + S21
        DoEvents
        Selection.HomeKey Unit:=wdStory
        With Selection.Find
          .Forward = True
          .ClearFormatting
          .Font.Name = aFonts(i)
          .Wrap = wdFindContinue
          .Execute FindText:=""
        End With
        aFontsPS(i, 0) = aFonts(i)
        aFontsPS(i, 1) = Selection.Information(wdActiveEndPageNumber)
        aFontsPS(i, 2) = Selection.Information(wdActiveEndSectionNumber)
      Next i
      ReDim aFonts(0) 'free up mem
      If NumFontsFound > 1 Then WordBasic.SortArray aFontsPS()
      For i = 0 To NumFontsFound - 1
        lbFonts.AddItem aFontsPS(i, 0) 'build the listbox
      Next i
      aNumItems(iTabNum) = NumFontsFound
      lblFontsInDoc.Caption = PluralFix(NumFontsFound, S3)
      lblFontSample.Font = lbFonts.list(0)
   
    Case 2  'Styles
      If revexist Then Exit Sub
      aTabHasItems(iTabNum) = True
      NumAvailableStyles = oDoc.Styles.Count
      ReDim aStyles(NumAvailableStyles)
      CurStyleNum = 0
      NumStylesFound = 0
      For Each sty In oDoc.Styles
        CurStyleNum = CurStyleNum + 1
        lblStatus.Caption = S22 + Str(CurStyleNum) + S18 + Str(NumAvailableStyles) + "..."
        DoEvents
        If FindStyle(sty) Then
          NumStylesFound = NumStylesFound + 1
          lbStyles.AddItem sty
          aStyles(NumStylesFound) = sty
        End If
      Next sty
      aNumItems(iTabNum) = NumStylesFound
      lblStyleType = StyleType(oDoc.Styles(aStyles(1)).Type)
      lblStyleBasedOn = oDoc.Styles(aStyles(1)).BaseStyle
      lblStyleNextParagraph = oDoc.Styles(aStyles(1)).NextParagraphStyle
      If oDoc.Styles(aStyles(1)).Type = "" Then
        lblStyleAutoUpdate = BoolStr(oDoc.Styles(aStyles(1)).AutomaticallyUpdate)
      Else
        lblStyleAutoUpdate = S23
      End If
      lblStyleDescription = oDoc.Styles(aStyles(1)).Description
      lblStyles.Caption = PluralFix(NumStylesFound, S4)
      n = FindStyle(lbStyles.list(0))
      
    Case 3  'Sections
      NumSections = ActiveDocument.Sections.Count
      aReportCols(iTabNum) = NumSections + 1
      aNumItems(iTabNum) = 25
      ReDim aSections(NumSections, 25)
      For i = 1 To NumSections
        lblStatus.Caption = S24 + Str(i) + S18 + Str(oDoc.Sections.Count) + "..."
        DoEvents
        lbSections.AddItem LTrim(RTrim(Str(i)))
        Selection.GoTo What:=wdGoToSection, Which:=1, Count:=1, Name:=""
        With oDoc.Sections(i).PageSetup
        

        
          aSections(i, 1) = ConvertMeasurement$(.TopMargin, wdPoints, DefaultMeasure)
          aSections(i, 2) = ConvertMeasurement$(.BottomMargin, wdPoints, DefaultMeasure)
          aSections(i, 3) = ConvertMeasurement$(.LeftMargin, wdPoints, DefaultMeasure)
          aSections(i, 4) = ConvertMeasurement$(.RightMargin, wdPoints, DefaultMeasure)
          aSections(i, 5) = ConvertMeasurement$(.Gutter, wdPoints, DefaultMeasure)
          aSections(i, 6) = ConvertMeasurement$(.HeaderDistance, wdPoints, DefaultMeasure)
          aSections(i, 7) = ConvertMeasurement$(.FooterDistance, wdPoints, DefaultMeasure)
          aSections(i, 8) = BoolStr(.MirrorMargins)
          aSections(i, 9) = ConvertMeasurement$(.PageWidth, wdPoints, DefaultMeasure)
          aSections(i, 10) = ConvertMeasurement$(.PageHeight, wdPoints, DefaultMeasure)
          aSections(i, 11) = FillText(.Orientation, S25, S26, S27)
          aSections(i, 12) = Tray(.FirstPageTray)
          aSections(i, 13) = Tray(.OtherPagesTray)
          aSections(i, 14) = SectionStartText(.SectionStart)
          aSections(i, 15) = BoolStr(.DifferentFirstPageHeaderFooter)
          aSections(i, 16) = BoolStr(.OddAndEvenPagesHeaderFooter)
          aSections(i, 17) = VerticalAlignmentText(.VerticalAlignment)
          aSections(i, 18) = BoolStr(.LineNumbering.Active)
          If .LineNumbering.Active Then
            aSections(i, 19) = .LineNumbering.StartingNumber
            aSections(i, 20) = .LineNumbering.CountBy
            aSections(i, 21) = ConvertMeasurement$(.LineNumbering.DistanceFromText, wdPoints, DefaultMeasure)
          End If
        End With
        With oDoc.Sections(1).Footers(1).PageNumbers
          aSections(i, 22) = .NumberStyle
          aSections(i, 23) = .StartingNumber
          If aSections(i, 23) = 0 Then aSections(i, 23) = S28
          aSections(i, 24) = BoolStr(.IncludeChapterNumber)
          If .IncludeChapterNumber Then
            aSections(i, 25) = .HeadingLevelForChapter
          Else
            aSections(i, 25) = S23
          End If
        End With
      Next i
      lbSections.ListIndex = 0 ' simulate click on first section
      Selection.HomeKey Unit:=wdStory
      
    Case 4  'Hyperlinks
      aNumItems(iTabNum) = oDoc.Hyperlinks.Count
      For Each Hyperlink In oDoc.Hyperlinks
        lbHyperlinks.AddItem Hyperlink.Address
      Next
      If aNumItems(iTabNum) > 0 Then
        aTabHasItems(iTabNum) = True
        aAllowGoTo(iTabNum) = True
        aShowReportButton(iTabNum) = True
        cmdReport.Enabled = True
        lblHyperlinks.Caption = PluralFix(aNumItems(iTabNum), S6)
        lblBaseHyperlink.Caption = oDoc.BuiltInDocumentProperties(29).Value
      Else
        lbHyperlinks.AddItem S29
        lblStatus.Caption = ""
      End If
      
    Case 5  'Tables
      aNumItems(iTabNum) = oDoc.Tables.Count
      If aNumItems(iTabNum) > 0 Then
        For i = 1 To aNumItems(iTabNum)
          lbTables.AddItem Str(i)
        Next i
        aTabHasItems(iTabNum) = True
        aShowReportButton(iTabNum) = True
        cmdReport.Enabled = True
        aAllowGoTo(iTabNum) = True
        lbTables.ListIndex = 0 'simulate click on first table
      Else
        lbTables.AddItem S30
        lblStatus.Caption = ""
      End If
    
    Case 6  'Fields
      aNumItems(iTabNum) = 0
      For Each Field In oDoc.Fields
        lbFields.AddItem Field.Code
        aNumItems(iTabNum) = aNumItems(iTabNum) + 1
      Next
      If aNumItems(iTabNum) > 0 Then
        aTabHasItems(iTabNum) = True
        aShowReportButton(iTabNum) = True
        cmdReport.Enabled = True
        oDoc.Fields(1).Select
        tbFieldResult.Text = ClnStr(oDoc.Fields(1).Result, 65000)
        lblFieldsInDoc.Caption = PluralFix(aNumItems(iTabNum), S8)
        aAllowGoTo(iTabNum) = True
      Else
        lbFields.AddItem S31
        cmdReport.Enabled = False
        lblStatus.Caption = ""
      End If
    
    Case Else
      MsgBox S32, 0, sMacroName
  End Select
  System.Cursor = wdCursorNormal
End If
DisplayGoTo aAllowGoTo(iTabNum)
cmdReport.Enabled = aShowReportButton(iTabNum)
If aAllowGoTo(iTabNum) Then
  Select Case iTabNum
    Case 1
      If revexist Then Exit Sub
      If lbFonts.ListIndex = -1 Then i = 0 Else i = lbFonts.ListIndex
      lblPage.Caption = aFontsPS(i, 1)
      lblSection.Caption = aFontsPS(i, 2)
      aLastLoc(iTabNum, 0) = aFontsPS(i, 1)
      aLastLoc(iTabNum, 1) = aFontsPS(i, 2)
    Case 2
      If revexist Then Exit Sub
      If aLastLoc(iTabNum, 1) = 0 Then 'first time through
        With Selection
          lblPage.Caption = .Information(wdActiveEndPageNumber)
          lblSection.Caption = .Information(wdActiveEndSectionNumber)
          aLastLoc(iTabNum, 0) = .Information(wdActiveEndPageNumber)
          aLastLoc(iTabNum, 1) = .Information(wdActiveEndSectionNumber)
        End With
      Else 'second+ time through, use the last
        lblPage.Caption = aLastLoc(iTabNum, 0)
        lblSection.Caption = aLastLoc(iTabNum, 1)
      End If
    Case 3, 4, 5, 6
        If aLastLoc(iTabNum, 1) = 0 Then 'first time through
            With Selection
             lblPage.Caption = .Information(wdActiveEndPageNumber)
            lblSection.Caption = .Information(wdActiveEndSectionNumber)
            aLastLoc(iTabNum, 0) = .Information(wdActiveEndPageNumber)
            aLastLoc(iTabNum, 1) = .Information(wdActiveEndSectionNumber)
            End With
        Else 'second+ time through, use the last
            lblPage.Caption = aLastLoc(iTabNum, 0)
            lblSection.Caption = aLastLoc(iTabNum, 1)
        End If
  End Select
End If
If aNumItems(iTabNum) > 0 Then
  lblStatus.Caption = StatusMsg(iTabNum)
Else
  lblStatus.Caption = ""
End If
System.Cursor = wdCursorNormal
Application.ScreenUpdating = True
End Sub
Private Sub cmdReport_Click()
Application.ScreenUpdating = False
System.Cursor = wdCursorWait
If bReportCreated = False Then
  bReportCreated = True
  Documents.Add
  Set oRDoc = ActiveDocument
  With oRDoc.Sections(1).PageSetup
    .TopMargin = 72
    .BottomMargin = 72
    .LeftMargin = 36
    .RightMargin = 36
  End With
End If
If aReportDone(iTabNum) = False Then 'have to do the report
  aReportDone(iTabNum) = True        'mark as reported
  lblStatus.Caption = S33 + aTabName(iTabNum) + S34
  DoEvents
  oRDoc.Activate
  With Selection
    .TypeText Text:=aTabName(iTabNum) + S35 + strFN
    .Range.Style = oRDoc.Styles(S36)
    .TypeParagraph
    oRDoc.Tables.Add Range:=.Range, NumRows:=aNumItems(iTabNum), NumColumns:=aReportCols(iTabNum)
    .Tables(1).Select
    Set oTable = .Tables(1)
    .MoveLeft Unit:=wdCharacter, Count:=1
  End With
  iCount = 0
  Select Case iTabNum            'which tab?
    Case 0  'General
      With Selection
        .TypeText Text:=S37
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblFileName.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S38
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblLocation.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S39
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblAuthor.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S40
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblLastAuthor.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S41
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblDateCreated.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S42
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblDateLastSaved.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S43
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblDateLastPrinted.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S168
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblSize.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S44
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblAttachedTemplate.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S45
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRevision.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S46
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblEditingTime.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S47
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblPages.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S48
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblTitle.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S49
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblSubject.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S50
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblCategory.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S51
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblKeywords.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S52
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblComments.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S53
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSWords.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S54
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSCharacters.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S55
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSParagraphs.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S56
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSSentences.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S57
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSPassiveSentences.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S58
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSSentPerPara.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S59
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSWordsPerSent.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S60
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSCharsPerWord.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S61
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSReadingEase.Caption
        .MoveRight Unit:=wdCell
        .TypeText Text:=S62
        .MoveRight Unit:=wdCell
        .TypeText Text:=lblRSGradeLevel.Caption
        
        oTable.Rows(1).Select
        .InsertRows 1
        .TypeText Text:=S50
        .MoveRight Unit:=wdCell
        .TypeText Text:=S51
      End With
    
    Case 1  'Fonts
      For i = 0 To aNumItems(iTabNum) - 1
        With Selection
          .TypeText Text:=aFontsPS(i, 1)
          .MoveRight Unit:=wdCell
          .TypeText Text:=aFontsPS(i, 2)
          .MoveRight Unit:=wdCell
          .TypeText Text:=aFontsPS(i, 0)
          .MoveRight Unit:=wdCell
          .TypeText Text:=strFontSampleText
          .MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
          .Font.Name = aFontsPS(i, 0)
          .MoveRight Unit:=wdCell
        End With
      Next i
      With oTable
        .Rows(aNumItems(iTabNum) + 1).Delete
        .Rows(1).Select
      End With
      With Selection
        .InsertRows 1
        .TypeText Text:=S64
        .MoveRight Unit:=wdCell
        .TypeText Text:=S65
        .MoveRight Unit:=wdCell
        .TypeText Text:=S3
        .MoveRight Unit:=wdCell
        .TypeText Text:=S66
        .MoveRight Unit:=wdCell
      End With
    
    Case 2  'Styles
      For i = 1 To aNumItems(iTabNum)
        oDoc.Activate
        With Selection
          .HomeKey Unit:=wdStory
          With .Find
            .Forward = True
            .ClearFormatting
            .Style = lbStyles.list(i - 1)
            .Wrap = wdFindContinue
            .Execute FindText:=""
          End With
          Page = .Information(wdActiveEndPageNumber)
          Section = .Information(wdActiveEndSectionNumber)
        End With
        oRDoc.Activate
        With Selection
          .TypeText Text:=Page
          .MoveRight Unit:=wdCell
          .TypeText Text:=Section
          .MoveRight Unit:=wdCell
          .TypeText Text:=aStyles(i)
          .MoveRight Unit:=wdCell
          .TypeText Text:=StyleType(oDoc.Styles(aStyles(i)).Type)
          .MoveRight Unit:=wdCell
          .TypeText Text:=oDoc.Styles(aStyles(i)).BaseStyle
          .MoveRight Unit:=wdCell
          .TypeText Text:=oDoc.Styles(aStyles(i)).NextParagraphStyle
          .MoveRight Unit:=wdCell
          If oDoc.Styles(aStyles(i)).Type = 4 Then
            .TypeText Text:=BoolStr(oDoc.Styles(aStyles(i)).AutomaticallyUpdate)
          Else
            .TypeText Text:=S23
          End If
          .MoveRight Unit:=wdCell
          .TypeText Text:=oDoc.Styles(aStyles(i)).Description
          .MoveRight Unit:=wdCell
        End With
      Next i
      oTable.Rows(aNumItems(iTabNum) + 1).Delete
      oTable.Rows(1).Select
      With Selection
        .InsertRows 1
        .TypeText Text:=S64
        .MoveRight Unit:=wdCell
        .TypeText Text:=S65
        .MoveRight Unit:=wdCell
        .TypeText Text:=S4
        .MoveRight Unit:=wdCell
        .TypeText Text:=S67
        .MoveRight Unit:=wdCell
        .TypeText Text:=S68
        .MoveRight Unit:=wdCell
        .TypeText Text:=S69 + Chr(11) + S70
        .MoveRight Unit:=wdCell
        .TypeText Text:=S71 + Chr(11) + S72
        .MoveRight Unit:=wdCell
        .TypeText Text:=S73
      End With
          
    Case 3  'Sections
      With Selection
        .TypeText Text:=S74
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S75
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S76
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S77
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S78
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S79
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S80
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S81
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S82
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S83
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S84
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S85
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S86
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S87
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S88
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S89
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S90
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S91
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S92
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S93
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S94
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S95
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S96
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S97
        .MoveDown Unit:=wdLine, Count:=1
        .TypeText Text:=S98
      End With
      For i = 2 To aReportCols(iTabNum)
        oTable.Columns(i).Select
        With Selection
          .MoveLeft Unit:=wdCharacter, Count:=1
          For J = 1 To aNumItems(iTabNum)
            .TypeText Text:=aSections(i - 1, J)
            .MoveDown Unit:=wdLine, Count:=1
          Next J
          .MoveUp Unit:=wdLine, Count:=1
        End With
      Next i
      oTable.Rows(1).Select
      With Selection
        .InsertRows 1
        .TypeText Text:=S5 & ":"
        For i = 2 To aReportCols(iTabNum)
          .MoveRight Unit:=wdCell
          .TypeText Text:=Str(i - 1)
        Next i
      End With
    
    Case 4  'Hyperlinks
      i = 0
      For Each oHL In oDoc.Hyperlinks
        i = i + 1
        oDoc.Hyperlinks(i).Range.Select
        With oTable.Rows(i)
          .Cells(1) = Selection.Information(wdActiveEndPageNumber)
          .Cells(2) = Selection.Information(wdActiveEndSectionNumber)
          .Cells(3) = oHL.Address
        End With
      Next
      oTable.Rows(1).Select
      With Selection
        .InsertRows 1
        .TypeText Text:=S64
        .MoveRight Unit:=wdCell
        .TypeText Text:=S65
        .MoveRight Unit:=wdCell
        .TypeText Text:=S6
      End With
    
    Case 5  'Tables
      iCount = 0
      For Each oRow In oTable.Range.Rows
        iCount = iCount + 1
        With oDoc.Tables(iCount)
          .Select
          oRow.Cells(1) = Str(iCount)
          oRow.Cells(2) = Selection.Information(wdActiveEndPageNumber)
          oRow.Cells(3) = Selection.Information(wdActiveEndSectionNumber)
          oRow.Cells(4) = .Rows.Count
          oRow.Cells(5) = .Columns.Count
          oRow.Cells(6) = .Uniform
          oRow.Cells(7) = TAFText(.AutoFormatType)
          With .Rows(1)
            oRow.Cells(8) = TAText(.Alignment)
            oRow.Cells(9) = LTrim(Str(.LeftIndent / 72)) + Q$
            oRow.Cells(10) = BoolStr(.HeadingFormat)
            oRow.Cells(11) = BoolStr(.AllowBreakAcrossPages)
            .Cells(1).Select
            oRow.Cells(12) = ClnStr(Selection.Text, 100)
          End With
        End With
      Next oRow
      oTable.Rows(1).Select
      With Selection
        .InsertRows 1
        .TypeText Text:=S99
        .MoveRight Unit:=wdCell
        .TypeText Text:=S64
        .MoveRight Unit:=wdCell
        .TypeText Text:=S65
        .MoveRight Unit:=wdCell
        .TypeText Text:=S100
        .MoveRight Unit:=wdCell
        .TypeText Text:=S101
        .MoveRight Unit:=wdCell
        .TypeText Text:=S102
        .MoveRight Unit:=wdCell
        .TypeText Text:=S103
        .MoveRight Unit:=wdCell
        .TypeText Text:=S104
        .MoveRight Unit:=wdCell
        .TypeText Text:=S105
        .MoveRight Unit:=wdCell
        .TypeText Text:=S106
        .MoveRight Unit:=wdCell
        .TypeText Text:=S107
        .MoveRight Unit:=wdCell
        .TypeText Text:=S108
      End With
    
    Case 6  'Fields
      For Each oRow In oTable.Range.Rows
        iCount = iCount + 1
        oDoc.Fields(iCount).Select
        With oRow
          .Cells(1) = Selection.Information(wdActiveEndPageNumber)
          .Cells(2) = Selection.Information(wdActiveEndSectionNumber)
          lbFields.ListIndex = iCount - 1
          .Cells(3) = lbFields.Text
          .Cells(4) = ClnStr(oDoc.Fields(iCount).Result, 1000)
        End With
      Next oRow
      lbFields.ListIndex = 0 'reset the listbox
      oTable.Rows(1).Select
      With Selection
        .InsertRows 1
        .TypeText Text:=S64
        .MoveRight Unit:=wdCell
        .TypeText Text:=S65
        .MoveRight Unit:=wdCell
        .TypeText Text:=S109
        .MoveRight Unit:=wdCell
        .TypeText Text:=S110
      End With
      
    Case Else
      MsgBox S32, 0, sMacroName
  End Select
  oTable.Rows(1).Select
  With Selection
    .Font.Reset
    .Rows.HeadingFormat = wdToggle
    .Cells.VerticalAlignment = wdCellAlignVerticalBottom
  End With
  oTable.AutoFormat AutoFit:=True, Format:=wdTableFormatProfessional
  With Selection
    .EndKey Unit:=wdStory
    .InsertBreak Type:=wdPageBreak
  End With
  lblStatus.Caption = aTabName(iTabNum) + S111
Else
  MsgBox S112, 0, sMacroName
End If
System.Cursor = wdCursorNormal
Application.ScreenUpdating = True
End Sub
Private Sub cmdGoTo_Click()
System.Cursor = wdCursorWait
Select Case iTabNum
  Case 1 'Fonts
    Selection.HomeKey Unit:=wdStory
    With Selection.Find
      .Forward = True
      .ClearFormatting
      .Font.Name = lbFonts.list(lbFonts.ListIndex)
      .Wrap = wdFindContinue
      .Execute FindText:=""
    End With
  Case 2 'Styles
    Selection.HomeKey Unit:=wdStory
    With Selection.Find
      .Forward = True
      .ClearFormatting
      .Style = lbStyles.list(lbStyles.ListIndex)
      .Wrap = wdFindContinue
      .Execute FindText:=""
    End With
  Case 3 'Sections
    Selection.GoTo What:=wdGoToSection, Which:=wdGoToFirst, Count:=lbSections.ListIndex + 1, Name:=""
  Case 4 'Hyperlinks
    oDoc.Hyperlinks(lbHyperlinks.ListIndex + 1).Follow
  Case 5 'Tables
    oDoc.Tables(lbTables.ListIndex + 1).Select
  Case 6 'Fields
    oDoc.Fields(lbFields.ListIndex + 1).Select
End Select
Selection.Collapse
AdjustReport
End
End Sub

Private Sub lbFonts_Change()
Application.ScreenUpdating = False
  lblFontSample.Font = aFontsPS(lbFonts.ListIndex, 0)
  UpdateGoToInfo aFontsPS(lbFonts.ListIndex, 1), aFontsPS(lbFonts.ListIndex, 2)
Application.ScreenUpdating = True
End Sub

Private Sub lbStyles_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  oDoc.Activate
  i = lbStyles.ListIndex + 1
  n = FindStyle(lbStyles.list(i - 1))
  With oDoc.Styles(aStyles(i))
    lblStyleType = StyleType(.Type)
    lblStyleBasedOn = .BaseStyle
    lblStyleNextParagraph = .NextParagraphStyle
    If .Type = 4 Then
      lblStyleAutoUpdate = BoolStr(.AutomaticallyUpdate)
    Else
      lblStyleAutoUpdate = S23
    End If
    lblStyleDescription = .Description
  End With
  With Selection
    UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
  End With
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub

Private Sub lbSections_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  SecNum = lbSections.ListIndex + 1
  UpdateSectionInfo
  With Selection
    .GoTo What:=wdGoToSection, Which:=wdGoToFirst, Count:=SecNum, Name:=""
    UpdateGoToInfo .Information(wdActiveEndPageNumber), LTrim(Str(SecNum))
  End With
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub

Private Sub lbHyperlinks_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  If aNumItems(iTabNum) > 0 Then
    oDoc.Hyperlinks(lbHyperlinks.ListIndex + 1).Range.Select
    With Selection
      UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
    End With
  End If
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub

Private Sub lbTables_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  If aNumItems(iTabNum) > 0 Then
    TableNum = lbTables.ListIndex + 1
    lblStatus.Caption = S169 + Str(TableNum) + "..."
    DoEvents
    UpdateTableInfo
    With Selection
      UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
    End With
  End If
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub

Private Sub lbFields_Change()
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  If aNumItems(iTabNum) > 0 Then
    oDoc.Fields(lbFields.ListIndex + 1).Select
    tbFieldResult.Text = ClnStr(oDoc.Fields(lbFields.ListIndex + 1).Result, 65000)
    tbFieldResult.SetFocus
    tbFieldResult.SelStart = 0
    With Selection
      UpdateGoToInfo .Information(wdActiveEndPageNumber), .Information(wdActiveEndSectionNumber)
    End With
    lblStatus.Caption = S13
    DoEvents
  End If
  System.Cursor = wdCursorNormal
  Application.ScreenUpdating = True
End Sub

Private Sub UpdateSectionInfo()
  lblSectionMarginsTop = aSections(lbSections.Value, 1)
  lblSectionMarginsBottom = aSections(lbSections.Value, 2)
  lblSectionMarginsLeft = aSections(lbSections.Value, 3)
  lblSectionMarginsRight = aSections(lbSections.Value, 4)
  lblSectionMarginsGutter = aSections(lbSections.Value, 5)
  lblSectionMarginsHeader = aSections(lbSections.Value, 6)
  lblSectionMarginsFooter = aSections(lbSections.Value, 7)
  lblSectionMarginsMirrored = aSections(lbSections.Value, 8)
  lblSectionPageWidth = aSections(lbSections.Value, 9)
  lblSectionPageHeight = aSections(lbSections.Value, 10)
  lblSectionOrientation = aSections(lbSections.Value, 11)
  lblSectionFirstPage = aSections(lbSections.Value, 12)
  lblSectionOtherPages = aSections(lbSections.Value, 13)
  lblSectionSectionStart = aSections(lbSections.Value, 14)
  lblSectionOddEven = aSections(lbSections.Value, 15)
  lblSectionDiffFirstPage = aSections(lbSections.Value, 16)
  lblSectionVerticalAlignment = aSections(lbSections.Value, 17)
  lblSectionLineNumbers = aSections(lbSections.Value, 18)
  lblSectionLNStartAt = aSections(lbSections.Value, 19)
  lblSectionLNFromText = aSections(lbSections.Value, 20)
  lblSectionLNCountBy = aSections(lbSections.Value, 21)
  lblSectionPageNumberFormat = aSections(lbSections.Value, 22)
  lblSectionPageNumberStartAt = aSections(lbSections.Value, 23)
  lblSectionChapterNumbers = aSections(lbSections.Value, 24)
  lblSectionChapStartStyle = aSections(lbSections.Value, 25)
End Sub

Private Sub UpdateTableInfo()
Application.ScreenUpdating = False
  i = lbTables.ListIndex + 1
  With oDoc.Tables(i)
    .Select
    lblTableRows = .Rows.Count
    lblTableColumns = .Columns.Count
    lblTableUniform = .Uniform
    lblTableAutoFormat = TAFText(.AutoFormatType)
    .Rows(1).Cells(1).Select
    tbTableContents.Text = ClnStr(Selection.Text, 100)
  End With
  With oDoc.Tables(i).Rows(1)
    lblTableAlignment = TAText(.Alignment)
    lblTableLeftIndent = ConvertMeasurement$(.LeftIndent, wdPoints, DefaultMeasure)
    lblTableHeading = BoolStr(.HeadingFormat)
    lblTableAllowBreak = BoolStr(.AllowBreakAcrossPages)
  End With
Application.ScreenUpdating = True
End Sub

Private Sub AdjustReport()
If bReportCreated Then
  oRDoc.Activate
  Selection.TypeBackspace
End If
End Sub

Private Sub UpdateGoToInfo(P, S)
  lblPage.Caption = P
  lblSection.Caption = S
  aLastLoc(iTabNum, 0) = P
  aLastLoc(iTabNum, 1) = S
End Sub

Function ClnStr(Z$, Max)       ' Cleans out lower ascii codes for text display in  the dialog box
  n = InStr(Z$, Chr$(19))     'Check for left field code bracket
  While n <> 0
      Z$ = Left$(Z$, n - 1) + "{" + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(19))
  Wend
  n = InStr(Z$, Chr$(21))     'Check for right field code bracket
  While n <> 0
      Z$ = Left$(Z$, n - 1) + "}" + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(21))
  Wend
  n = InStr(Z$, Chr$(12))     'Check for section breaks
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S4$ + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(12))
  Wend
  n = InStr(Z$, Chr$(1))      'Check for graphics
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S5$ + Right$(Z$, Len(Z$) - n)
      n = InStr(Z$, Chr$(1))
  Wend
  n = InStr(Z$, Chr$(13) + Chr$(7) + Chr$(13) + Chr$(7))      'Check for tables
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S7$ + Right$(Z$, Len(Z$) - n - 3)
      n = InStr(Z$, Chr$(13) + Chr$(7) + Chr$(13) + Chr$(7))
  Wend
  n = InStr(Z$, Chr$(13) + Chr$(7))       'Check for tables
  While n <> 0
      Z$ = Left$(Z$, n - 1) + S8$ + Right$(Z$, Len(Z$) - n - 1)
      n = InStr(Z$, Chr$(13) + Chr$(7))
  Wend
  If Len(Z$) > Max - 3 Then Z$ = Left$(Z$, Max - 3) + "..."
  ClnStr = Z$
End Function

Private Function PluralFix(n, S$)
  If n = 1 Then
      Select Case S$
        Case "Schrift"                 'font
          strSingular$ = "Schrift"      'singular form of font
        Case "Formatvorlagen"          'style
          strSingular$ = "Formatvorlage" 'singular form of style
        Case "Abschnitte"              'section
          strSingular$ = "Abschnitt"    'singular form of section
        Case "Hyperlink"               'hyperlink
          strSingular$ = "Hyperlink"    'singular form of hyperlink
        Case "Tabellen"                'table
          strSingular$ = "Tabelle"      'singular form of table
        Case "Felder"                  'field
          strSingular$ = "Feld"         'singular form of field
      End Select
    PluralFix = Str(n) + " " + strSingular$ + " i " + strFN + ":"
  Else
      Select Case S$
        Case "Schrift"           'font
          PluralS$ = "Schriften"  'plural form of font
        Case "Formatvorlagen"            'style
          PluralS$ = "Formatvorlagen"  'plural form of style
        Case "Abschnitte"              'section
          PluralS$ = "Abschnitte"    'plural form of section
        Case "Hyperlink"            'hyperlink
          PluralS$ = "Hyperlinks"   'plural form of hyperlink
        Case "Tabellen"                'table
          PluralS$ = "Tabellen"     'plural form of table
        Case "Felder"                 'field
          PluralS$ = "Felder"       'plural form of field
      End Select
      PluralFix = Str$(n) + " " + PluralS$ + " i " + strFN + ":"
  End If
End Function

Private Function BoolStr(n)
  Select Case n
    Case -1: BoolStr = S120
    Case 0: BoolStr = S121
    Case Else: BoolStr = S122
  End Select
End Function

Private Function FillText(n, a, b, c)
  Select Case n
    Case 0: FillText = a
    Case 1: FillText = b
    Case Else: FillText = c
  End Select
End Function

Private Function StyleType(n)
  Select Case n
    Case 1: StyleType = S123
    Case 4: StyleType = S70
    Case Else: StyleType = S124
  End Select
End Function

Private Function Tray(n)
  Select Case n
    Case 0: Tray = S125
    Case 1: Tray = S126
    Case 2: Tray = S127
    Case 3: Tray = S128
    Case 4: Tray = S129
    Case 5: Tray = S130
    Case 6: Tray = S131
    Case 7: Tray = S132
    Case 8: Tray = S133
    Case 9: Tray = S134
    Case 10: Tray = S135
    Case 11: Tray = S136
    Case 12: Tray = S137
    Case 13: Tray = S138
    Case 14: Tray = S139
    Case 15: Tray = S140
    Case Else: Tray = S124
  End Select
End Function

Private Function SectionStartText(n)
  Select Case n
    Case 0: SectionStartText = S141
    Case 1: SectionStartText = S142
    Case 2: SectionStartText = S143
    Case 3: SectionStartText = S144
    Case 4: SectionStartText = S145
    Case Else: SectionStartText = S124
  End Select
End Function

Private Function VerticalAlignmentText(n)
  Select Case n
    Case 0: VerticalAlignmentText = S146
    Case 1: VerticalAlignmentText = S147
    Case 2: VerticalAlignmentText = S148
    Case Else: VerticalAlignmentText = ""
  End Select
End Function


Private Function PageNumberStyleText(n)
  Select Case n
    Case 0: PageNumberStyleText = S149
    Case 1: PageNumberStyleText = S150
    Case 2: PageNumberStyleText = S151
    Case 3: PageNumberStyleText = S152
    Case 4: PageNumberStyleText = S153
    Case Else: PageNumberStyleText = S124
  End Select
End Function

Private Function TAFText(n)
  Select Case n
    Case 0: TAFText = S30                       'None
    Case 1 To 3: TAFText = S154 + Str(n - 0)     'Simple
    Case 4 To 7: TAFText = S155 + Str(n - 3)     'Classic
    Case 8 To 10: TAFText = S156 + Str(n - 7)    'Colorful
    Case 11 To 15: TAFText = S157 + Str(n - 10)  'Columns
    Case 16 To 23: TAFText = S158 + Str(n - 15)  'Grid
    Case 24 To 31: TAFText = S159 + Str(n - 23)  'List
    Case 32 To 34: TAFText = S160 + Str(n - 31)  '3D Effects
    Case 35: TAFText = S161
    Case 36: TAFText = S162
    Case 37: TAFText = S163
    Case 38 To 39: TAFText = s160a + Str(n - 37)  'Subtle
    Case Else: TAFText = S164
  End Select
End Function

Private Function TAText(n As Integer)
  Select Case n
    Case 0: TAText = S165
    Case 1: TAText = S147
    Case 2: TAText = S166
    Case Else: TAText = S167
  End Select
End Function

Private Sub DisplayGoTo(n As Boolean)
  With SuperDocMain
    .lblPage1.Visible = n
    .lblPage.Visible = n
    .lblSection1.Visible = n
    .lblSection.Visible = n
    .cmdGoTo.Visible = n
  End With
End Sub

Private Function FindStyle(strSty)
  Selection.HomeKey Unit:=wdStory
  Selection.Find.ClearFormatting
  Selection.Find.Style = oDoc.Styles(strSty)
  With Selection.Find
    .Text = ""
    .Replacement.Text = ""
    .Forward = True
    .Wrap = wdFindContinue
    .Format = True
    .MatchCase = False
    .MatchWholeWord = False
    .MatchWildcards = False
    .MatchSoundsLike = False
    .MatchAllWordForms = False
  End With
  Selection.Find.Execute
  FindStyle = Selection.Find.Found
End Function

Private Sub cmdClose_Click()
oDoc.Activate
Selection.GoTo What:=wdGoToBookmark, Name:=S15
oDoc.Bookmarks(S15).Delete
AdjustReport
Unload Me
End Sub

Function revexist()
If ActiveDocument.revisions.Count > 0 Then
revexist = 1
SuperDocMain.cmdReport.Enabled = False
MsgBox revmess, vbInformation, S1
End If
Exit Function
End Function


Private Sub UserForm_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Application.ScreenRefresh

End Sub

Function ConvertMeasurement$(CurrVal, ConvFrom, ConvTo)
    'First Convert everything to points
    Dim Points
    
    Select Case ConvFrom
    Case wdInches
        Points = InchesToPoints(CurrVal)
    Case wdCentimeters
        Points = CentimetersToPoints(CurrVal)
    Case wdPicas
        Points = PicasToPoints(CurrVal)
    Case Else 'wdpoints
        Points = CurrVal
    End Select
    'Now convert it back to the desination unit
    Select Case ConvTo
    Case wdInches
        ConvertMeasurement$ = Format(PointsToInches(Points), "0.00") & S173
    Case wdCentimeters
        ConvertMeasurement$ = Format(PointsToCentimeters(Points), "0.00") & S171
    Case wdPicas
        ConvertMeasurement$ = Format(PointsToPicas(Points), "0.0") & S172
    Case Else 'wdpoints
        ConvertMeasurement$ = Str$(Points) & S170
    End Select

End Function
Attribute VB_Name = "TabellenInfo"
Sub TabellenInfo()
Attribute TabellenInfo.VB_Description = "Display the Row and Column reference of the current table cell"
Attribute TabellenInfo.VB_ProcData.VB_Invoke_Func = "TemplateProject.TableCellHelper.TableCellHelper"
'************************************
'*           Declarations           *
'*              Section             *
'************************************

Dim TC%, TR%, FC%, LC%, FR%, LR%, dummy%, Row%, Col%
Dim FTC&, LCT&
Dim Q1Dbl$, Q2Dbl$
Dim Msg1$, Msg2$, Msg3$, Msg4$, Msg5$, Msg6$, Title$

'************************************
'*          Initialization          *
'*              Section             *
'************************************

Msg3$ = "Die gesamte Markierung mu|fffd| sich innerhalb einer Tabelle befinden."
Msg6$ = "Word kann die Gesamtanzahl von Zeilen oder Spalten nicht anzeigen, da einige Zellen geteilt oder verbunden sind."
Title$ = "TabellenInfo"

If Application.Documents.Count Then
    If Selection.Information(wdWithInTable) Then
        Col = Selection.Information(wdMaximumNumberOfColumns)
        Row = Selection.Information(wdMaximumNumberOfRows)
        FC = Selection.Information(wdStartOfRangeColumnNumber)
        LC = Selection.Information(wdEndOfRangeColumnNumber)
        FR = Selection.Information(wdStartOfRangeRowNumber)
        LR = Selection.Information(wdEndOfRangeRowNumber)
        FCT = FC / 26
        Select Case FCT
            Case 0 To 1
                Q1Dbl = ""
            Case Is <= 2
                Q1Dbl = "A"
                FC = FC - 26
            Case Else
                Q1Dbl = "B"
                FC = FC - 52
        End Select
        LCT = LC / 26
        Select Case LCT
            Case 0 To 1
                Q2Dbl = ""
            Case Is <= 2
                Q2Dbl = "A"
                LC = LC - 26
            Case Else
                Q2Dbl = "B"
                LC = LC - 52
        End Select
        Msg1$ = "In Zelle " & Q1Dbl & Chr$(Val(FC) + 64) & ":" & LR & "."
        Msg2$ = "Markierter Bereich ist " & Q1Dbl & Chr$(Val(FC) + 64) & FR & ":" & Q2Dbl & Chr$(Val(LC) + 64) & LR & "."
        Msg5$ = "Es gibt insgesamt " & Col & " Spalten und " & Row & " Zeilen in dieser Tabelle."
        If FC = LC And FR = LR Then
            dummy = MsgBox(Msg1$ & " " & Msg5$, vbOKOnly, Title$)
        Else
            dummy = MsgBox(Msg2$ & " " & Msg5$, vbOKOnly, Title$)
        End If
    Else
        dummy = MsgBox(Msg3$, vbOKOnly, Title$)
    End If
    On Error GoTo TError
End If
Exit Sub

TError:
If Err = 5992 Then
    dummy = MsgBox(Msg6$, vbOKOnly, Title$)
End If
Resume Next
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmFootNoteWiz"
Attribute VB_Base = "0{CFB1308B-5451-11D0-B5E8-00AA00BBB76C}{CFB13060-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Public HelpBalloon As Object    'Assistant object
Dim list(3) As String           'Array for Non-Print media list
Dim RefFlag As Integer          'Flag for identifying where the focus is
Dim RefReference As Integer     'Flag for identifying which reference is selected
Dim HelpText(100) As String     'Array for Help Text
Dim PanelCount As Integer       'Flag for identifying which panel is displaying
Dim lblarry As String           'Fake array for labels
Dim txtarry As String           'Fake array for text boxes
Dim DontShow As Boolean         'Flag to determine whether to show Incomplete dialog

'Look for all other LOCALIZATION information in the UserForm_Initialize sub-routine

'LOCALIZATION Constants
Const HelpOn As String = "Hilfe"      'Help button text
Const HelpOnTip As String = "Klicken Sie hier f|fffd|r Hilfe."
Const HelpOff As String = "Schlie|fffd|en" 'Help button text
Const HelpOffTip As String = "Klicken Sie hier, um die Hilfe zu schlie|fffd|en"
Const BegHelpHead As String = "Fu|fffd|noten-Assistent-Hilfe"    'Beginning Help heading string
Const BegHelpText As String = "Klicken Sie auf das Element zu dem Sie Hilfe anfordern m|fffd|chten. Klicken Sie dann auf die Schaltfl|fffd|che Hilfe." 'Beginning help string

Sub UpdateHelp()
'This sub-routine updates the help information based on which control was last clicked
If AssistInst = True Then
    If tglHelp.Value = True Then
    Select Case Assistant.Visible
        Case True
            If RefFlag >= 70 Then   'If the selection was one of the option buttons
                With HelpBalloon
                    .Close                              'Close Assistant
                    .Heading = HelpText(RefFlag + 10)   'Change Heading text
                    .Text = HelpText(RefFlag)           'Change Help text
                    .Show                               'Show Assistant
                End With
            Else                    'If the selection was one of the text boxes
                lblarry = "lblText" & Format$(RefFlag)
                With HelpBalloon
                    .Close                              'Close Assistant
                    .Heading = Me(lblarry)              'Change Heading text
                    .Text = HelpText(RefFlag)           'Change Help text
                    .Show                               'Show Assistant
                End With
            End If
        Case False
    End Select
    End If
End If
End Sub
Sub PreviewChange()
HidePreview                 'This hides all the preview display panels
Select Case RefReference    'This will make visible the display panel that corresponds to the kind of footnote reference
    Case 1
        imgBookMLA.Visible = True
        imgBookCMS.Visible = True
    Case 2
        imgRefBookMLA.Visible = True
        imgRefBookCMS.Visible = True
    Case 3
        imgNewsPaprMLA.Visible = True
        imgNewsPaprCMS.Visible = True
    Case 4
        imgMagMLA.Visible = True
        imgMagCMS.Visible = True
    Case 5
        imgJournMLA.Visible = True
        imgJournCMS.Visible = True
    Case 6
        imgPubDissMLA.Visible = True
        imgPubDissCMS.Visible = True
    Case 7
        imgLectrMLA.Visible = True
        imgLectrCMS.Visible = True
    Case 8
        imgFilmMLA.Visible = True
        imgFilmCMS.Visible = True
    Case 9
        imgSlideMLA.Visible = True
        imgSlideCMS.Visible = True
    Case 10
        imgTvMLA.Visible = True
        imgTvCMS.Visible = True
End Select
End Sub
Sub HidePreview()
imgBookMLA.Visible = False
imgBookCMS.Visible = False
imgRefBookMLA.Visible = False
imgRefBookCMS.Visible = False
imgNewsPaprMLA.Visible = False
imgNewsPaprCMS.Visible = False
imgMagMLA.Visible = False
imgMagCMS.Visible = False
imgJournMLA.Visible = False
imgJournCMS.Visible = False
imgPubDissMLA.Visible = False
imgPubDissCMS.Visible = False
imgLectrMLA.Visible = False
imgLectrCMS.Visible = False
imgFilmMLA.Visible = False
imgFilmCMS.Visible = False
imgSlideMLA.Visible = False
imgSlideCMS.Visible = False
imgTvMLA.Visible = False
imgTvCMS.Visible = False
End Sub
Sub HideFrame(X As Integer)
'This sub-routine hides the currently displayed input panel
If X = 0 Then cbNonPrntMed.Enabled = False  'If the input panel is not a Non-Print Media disable the list box
    Select Case RefReference    'Find out which input panel is being displayed
        Case 1
            fraBook.Visible = False         'Book
        Case 2
            fraRefBook.Visible = False      'Reference Book
        Case 3
            fraNewsPapr.Visible = False     'News Paper
        Case 4
            fraMag.Visible = False          'Magazine
        Case 5
            fraJourn.Visible = False        'Journal
        Case 6
            fraPubDiss.Visible = False      'Publised Dissertation
        Case 7
            fraLectr.Visible = False        'Lecture
        Case 8
            fraFilm.Visible = False         'Film
        Case 9
            fraSlide.Visible = False        'Slideshow
        Case 10
            fraTvRad.Visible = False        'Television, Radio
        Case Else
    End Select
End Sub


Private Sub cbNonPrntMed_Click()
'This sub-routine displays one of the Non-Print media input panels
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
Select Case cbNonPrntMed.ListIndex
Case 0
   HideFrame 1
   RefReference = 7
   fraLectr.Visible = True
Case 1
   HideFrame 1
   RefReference = 8
   fraFilm.Visible = True
Case 2
   HideFrame 1
   RefReference = 9
   fraSlide.Visible = True
Case 3
   HideFrame 1
   RefReference = 10
   fraTvRad.Visible = True
Case Else
End Select
End Sub
Private Sub chkPlaceHold_Enter()
RefFlag = 79
UpdateHelp
End Sub

Private Sub cmdBack_Click()
'This controls which panel is displayed when the Back button is clicked
PanelCount = PanelCount - 1 'Identifies which panel is being displayed
Select Case PanelCount
    Case 0
        fraSelectScreen.Visible = False
        fraFootStyle.Visible = False
        fraStartScreen.Visible = True
        cmdBack.Enabled = False
        cmdOK.Enabled = False
        tglHelp.Enabled = False
        
    Case 1
        fraFootStyle.Visible = False
        fraSelectScreen.Visible = True
        cmdNext.Enabled = True
    Case Else
End Select
End Sub

Private Sub cmdCancel_Click()
'This is run when Cancel is clicked
If AssistInst = True Then
    If tglHelp.Value = True Then
    If Assistant.Visible Then   'If the Assistant is open, close it
        HelpBalloon.Close
        Assistant.Visible = False
    End If
    End If
End If
frmFootNoteWiz.Hide         'Close and end Footnote Wizard
End
End Sub

Private Sub cmdNext_Click()
'This controls which panel is displayed when the Next button is clicked
PanelCount = PanelCount + 1 'Identifies which panel is being displayed
Select Case PanelCount
    Case 1
        fraFootStyle.Visible = False
        fraStartScreen.Visible = False
        fraSelectScreen.Visible = True
        cmdBack.Enabled = True
        cmdOK.Enabled = True
        If AssistInst = False Then
            tglHelp.Enabled = AssistInst
        Else
            tglHelp.Enabled = True
        End If
    Case 2
        fraSelectScreen.Visible = False
        fraFootStyle.Visible = True
        cmdNext.Enabled = False
        PreviewChange
    Case Else
End Select

End Sub
Sub Insert_PlaceHold()
Dim Start As Integer, Finish As Integer, i As Integer
    Select Case RefReference 'Identify which input panel is being displayed then setup the control references
    Case 1
        Start = 1
        Finish = 11
    Case 2
        Start = 12
        Finish = 16
    Case 3
        Start = 17
        Finish = 23
    Case 4
        Start = 24
        Finish = 28
    Case 5
        Start = 29
        Finish = 34
    Case 6
        Start = 35
        Finish = 42
    Case 7
        Start = 43
        Finish = 48
    Case 8
        Start = 49
        Finish = 55
    Case 9
        Start = 56
        Finish = 62
    Case 10
        Start = 63
        Finish = 69
    End Select
    For i = Start To Finish
    lblarry = "lblText" & Format$(i)    'Fake array for labels
    txtarry = "txtInfo" & Format$(i)    'Fake array for text boxes
    If Me(txtarry) = "" Then
        If chkPlaceHold.Value Then  'Check state of Placeholder checkbox
            Me(txtarry) = "[" & Me(lblarry) & "]"   'Take labels and make them the text
            FlagBlank = False           'Set FlagBlank to false since all fields are filled in
        Else
            FlagBlank = True            'Sets FlagBlank to true if there are empty fields
        End If
    End If
    Next i
    If DontShow <> True Then
        If FlagBlank Then
            frmIncomplete.chkDontShow.Value = DontShow
            frmIncomplete.Show    'Show incomplete fields dialog
        End If
    Else
        FlagBlank = False
    End If
End Sub

Sub Insert_Book(S As Integer)
'Insert footnote for Book
'insert_placehold    'Check to see if Placeholders are to be inserted

    With Selection
        If txtInfo2 <> "" Then .TypeText Text:=txtInfo2 & ","               'Author
        If txtInfo5 <> "" Then
            .TypeText Text:=" " & Chr(34) & txtInfo5 & "," & Chr(34)        'Part of Book
        End If
        If txtInfo1 <> "" Then
            If S = 1 Then       'MLA
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo1                                     'Title of Book
                .Font.Underline = False
                .TypeText Text:=","
            Else                'CMS
                .TypeText Text:=" in "
                .Font.Italic = True
                .TypeText Text:=txtInfo1                                     'Title of Book
                .Font.Italic = False
            End If
        End If
        If txtInfo7 <> "" Then .TypeText Text:=" " & txtInfo7 & ","         'Editor/Translator
        If txtInfo10 <> "" Then .TypeText Text:=" " & txtInfo10 & " ed.,"   'Edition
        If txtInfo9 <> "" Then .TypeText Text:=" vol. " & txtInfo9          'Volume
        If txtInfo11 <> "" Or txtInfo6 <> "" Or txtInfo4 <> "" Or txtInfo8 <> "" Then
            .TypeText Text:=" ("
        End If
        If txtInfo11 <> "" Then .TypeText Text:=txtInfo11 & "; "            'Date
        If txtInfo6 <> "" Then
            If S = 2 Then .TypeText Text:="reprint, "   'CMS
            .TypeText Text:=txtInfo6 & ": "             'MLA                'City of Publication
        End If
        If txtInfo4 <> "" Then .TypeText Text:=txtInfo4 & ", "              'Publisher
        If txtInfo8 <> "" Then .TypeText Text:=txtInfo8                     'Publication Year
        If txtInfo11 <> "" Or txtInfo6 <> "" Or txtInfo4 <> "" Or txtInfo8 <> "" Then
            .TypeText Text:=")"                 'MLA
            If S = 2 Then .TypeText Text:=","   'CMS
        End If
        If txtInfo3 <> "" Then .TypeText Text:=" " & txtInfo3 & "."         'Page
    End With
End Sub
Sub Insert_RefBook(S As Integer)
'Insert footnote for Reference Book
'insert_placehold    'Check to see if Placeholders are to be inserted

    With Selection
        If txtInfo13 <> "" Then .TypeText Text:=txtInfo13 & ","             'Author
        If S = 1 Then   'MLA
            If txtInfo15 <> "" Then
                .TypeText Text:=" " & Chr(34) & txtInfo15 & "," & Chr(34)   'Title of Entry
            End If
            If txtInfo12 <> "" Then
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo12                                   'Title of Reference Book
                .Font.Underline = False
                .TypeText Text:=","
            End If
            If txtInfo16 <> "" Then .TypeText Text:=" " & txtInfo16 & " ed.,"        'Edition
        Else            'CMS
            If txtInfo12 <> "" Then
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo12                                   'Title of Reference Book
                .Font.Italic = False
                .TypeText Text:=","
            End If
            If txtInfo16 <> "" Then .TypeText Text:=" " & txtInfo16 & " ed.,"        'Edition
            If txtInfo15 <> "" Then
                .TypeText Text:=" s.v. " & Chr(34) & txtInfo15 & "," & Chr(34)   'Title of Entry
            End If
        End If
        If txtInfo14 <> "" Then
            If S = 1 Then
                .TypeText Text:=": " & txtInfo14 & "."            'Page
            Else
                .TypeText Text:=" " & txtInfo14 & "."             'Page
            End If
        End If
    End With


End Sub
Sub Insert_NewsPapr(S As Integer)
'Insert footnote for NewsPaper
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo20 <> "" Then .TypeText Text:=txtInfo20 & ","             'Author
        If txtInfo17 <> "" Then
            .TypeText Text:=" " & Chr(34) & txtInfo17 & "," & Chr(34)       'Title of Article
        End If
        If S = 1 Then       'MLA
            If txtInfo18 <> "" Then
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo18                                       'Newspaper
                .Font.Underline = False
            End If
        Else                'CMS
            If txtInfo18 <> "" Then
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo18                                       'Newspaper
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo22 <> "" Then .TypeText Text:=" " & txtInfo22 & ","       'Date of Publication
        If txtInfo21 <> "" Then
            .TypeText Text:=" " & txtInfo21    'Edition
            If S = 1 Then
                .TypeText Text:=" ed.,"
            Else
                .TypeText Text:=" edition,"
            End If
        End If
        If txtInfo23 <> "" Then .TypeText Text:=" sec. " & txtInfo23        'Section
        If txtInfo19 <> "" Then
            If S = 1 Then   'MLA
                .TypeText Text:=": "
            Else            'CMS
                .TypeText Text:=", "
            End If
            .TypeText Text:=txtInfo19 & "."       'Page
        End If
    End With

End Sub
Sub Insert_Mag(S As Integer)
'Insert footnote for Magazine
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo27 <> "" Then .TypeText Text:=txtInfo27 & ","             'Author
        If txtInfo24 <> "" Then
            .TypeText Text:=" " & Chr(34) & txtInfo24 & "," & Chr(34)       'Title of Article
        End If
        If txtInfo25 <> "" Then
            If S = 1 Then   'MLA
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo25                                    'Name of Magazine
                .Font.Underline = False
            Else            'CMS
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo25                                    'Name of Magazine
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo28 <> "" Then .TypeText Text:=" " & txtInfo28             'Date of Publication
        If txtInfo26 <> "" Then
            If S = 1 Then   'MLA
                .TypeText Text:=": "
            Else            'CMS
                .TypeText Text:=", "
            End If
            .TypeText Text:=txtInfo26 & "."      'Page
        End If
    End With
    

End Sub
Sub Insert_Journ(S As Integer)
'Insert footnote for Journal
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo32 <> "" Then .TypeText Text:=txtInfo32 & ","             'Author
        If txtInfo29 <> "" Then
            .TypeText Text:=" " & Chr(34) & txtInfo29 & "," & Chr(34)       'Title of Article
        End If
        If txtInfo30 <> "" Then
            If S = 1 Then       'MLA
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo30                                       'Name of Journal
                .Font.Underline = False
            Else                'CMS
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo30                                       'Name of Journal
                .Font.Italic = False
            End If
        End If
        If txtInfo34 <> "" Then .TypeText Text:=" " & txtInfo34             'Volume/Issue number
        If txtInfo33 <> "" Then .TypeText Text:=" (" & txtInfo33 & ")"      'Date of Publication
        If txtInfo31 <> "" Then .TypeText Text:=": " & txtInfo31 & "."      'Page
    End With
    
End Sub
Sub Insert_PubDiss(S As Integer)
'Insert footnote for Published Dissertation
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo36 <> "" Then .TypeText Text:=txtInfo36 & ","             'Author
        If txtInfo35 <> "" Then
            If S = 1 Then   'MLA
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo35                                   'Title of Published Dissertation
                .Font.Underline = False
                .TypeText Text:=", diss.,"
            Else            'CMS
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo35                                   'Title of Published Dissertation
                .Font.Italic = False
            End If
        End If
        If txtInfo39 <> "" Then .TypeText Text:=" " & txtInfo39 & ","       'Name of University
        If txtInfo41 <> "" Then .TypeText Text:=" " & txtInfo41             'Year Degree Granted
        If txtInfo40 <> "" Or txtInfo38 <> "" Or txtInfo42 <> "" Then
            .TypeText Text:=" ("
        End If
        If txtInfo40 <> "" Then .TypeText Text:=txtInfo40 & ": "            'City of Publication
        If txtInfo38 <> "" Then .TypeText Text:=txtInfo38 & ", "            'Publisher
        If txtInfo42 <> "" Then .TypeText Text:=txtInfo42                   'Publication Year
        If txtInfo40 <> "" Or txtInfo38 <> "" Or txtInfo42 <> "" Then
            .TypeText Text:=")"
        End If
        If txtInfo37 <> "" Then
            If S = 1 Then       'MLA
                .TypeText Text:=" "
            Else                'CMS
                .TypeText Text:=", "
            End If
            .TypeText Text:=txtInfo37 & "."        'Page
        End If
    End With
    

End Sub
Sub Insert_Lectr(S As Integer)
'Insert footnote for Lecture, Speech
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo44 <> "" Then .TypeText Text:=txtInfo44 & ","            'Speaker
        If txtInfo43 <> "" Then
            If S = 1 Then       'MLA
                .TypeText Text:=" " & Chr(34) & txtInfo43 & "," & Chr(34)      'Lecture,Speech
            Else                'CMS
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo43                                      'Lecture,Speech
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo45 <> "" Then .TypeText Text:=" " & txtInfo45 & ","      'Meeting
        If txtInfo46 <> "" Then .TypeText Text:=" " & txtInfo46 & ","      'Sponsoring Org
        If txtInfo47 <> "" Then .TypeText Text:=" " & txtInfo47 & ","      'Location
        If txtInfo48 <> "" Then .TypeText Text:=" " & txtInfo48 & "."      'Date
    End With
    
End Sub
Sub Insert_Film(S As Integer)
'Insert footnote for Film
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo49 <> "" Then
            If S = 1 Then       'MLA
                .Font.Underline = True
                .TypeText Text:=txtInfo49                                   'Title of Film
                .Font.Underline = False
                .TypeText Text:=","
            Else                'CMS
                .Font.Italic = True
                .TypeText Text:=txtInfo49                                   'Title of Film
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo50 <> "" Then .TypeText Text:=" dir. " & txtInfo50 & ","  'Director
        If txtInfo52 <> "" Then .TypeText Text:=" " & txtInfo52 & ","       'Contributor
        If txtInfo51 <> "" Then .TypeText Text:=" " & txtInfo51 & ","       'Distributor
        If txtInfo53 <> "" Then .TypeText Text:=" " & txtInfo53 & ","       'Year
        If txtInfo54 <> "" Then .TypeText Text:=" " & txtInfo54 & ","       'Size
        If txtInfo55 <> "" Then .TypeText Text:=" " & txtInfo55 & "."       'Duration
    End With
    

End Sub
Sub Insert_Slide(S As Integer)
'Insert footnote for Slideshow,Videotape
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo56 <> "" Then
            If S = 1 Then       'MLA
                .Font.Underline = True
                .TypeText Text:=txtInfo56                                   'Title of Filmstrip
                .Font.Underline = False
                .TypeText Text:=","
            Else                'CMS
                .Font.Italic = True
                .TypeText Text:=txtInfo56                                   'Title of Filmstrip
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo58 <> "" Then .TypeText Text:=" " & txtInfo58 & ","       'Medium
        If txtInfo57 <> "" Then .TypeText Text:=" " & txtInfo57 & ","       'Contributor
        If txtInfo59 <> "" Then .TypeText Text:=" " & txtInfo59 & ","       'Distributor
        If txtInfo60 <> "" Then .TypeText Text:=" " & txtInfo60 & " "       'Year
        If txtInfo61 <> "" Or txtInfo62 <> "" Then
            .TypeText Text:="("
        End If
        If txtInfo61 <> "" Then .TypeText Text:=txtInfo61 & ","             'Size
        If txtInfo62 <> "" Then .TypeText Text:=" " & txtInfo62             'Duration
        If txtInfo61 <> "" Or txtInfo62 <> "" Then
            .TypeText Text:=")."
        End If
    End With
    

End Sub
Sub Insert_TvRad(S As Integer)
'Insert footnote for Television/Radio program
'insert_placehold    'Check to see if Placeholders are to be inserted
    
    With Selection
        If txtInfo64 <> "" Then
            .TypeText Text:=Chr(34) & txtInfo64 & "," & Chr(34)        'Title of Episode
        End If
        If txtInfo65 <> "" Then .TypeText Text:=" " & txtInfo65 & ","       'Performer
        If txtInfo63 <> "" Then
            If S = 1 Then       'MLA
                .TypeText Text:=" "
                .Font.Underline = True
                .TypeText Text:=txtInfo63                                    'Television Program
                .Font.Underline = False
                .TypeText Text:=","
            Else                'CMS
                .TypeText Text:=" "
                .Font.Italic = True
                .TypeText Text:=txtInfo63                                    'Television Program
                .Font.Italic = False
                .TypeText Text:=","
            End If
        End If
        If txtInfo66 <> "" Then .TypeText Text:=" " & txtInfo66 & ","         'Network
        If txtInfo67 <> "" Then .TypeText Text:=" " & txtInfo67 & ","         'Local Station
        If txtInfo68 <> "" Then .TypeText Text:=" " & txtInfo68 & ","         'City
        If txtInfo69 <> "" Then .TypeText Text:=" " & txtInfo69 & "."         'Broadcast Date
    End With
    

End Sub
Private Sub cmdOK_Click()
'This selects which footnote reference is to be inserted, when OK is clicked
'S is being used to determine which style of footnote, either MLA or CMS
Dim S As Integer
If obMLA.Value = True Then
    S = 1
Else
    S = 2
End If
Insert_PlaceHold
If FlagBlank = False Then
    Select Case RefReference    'Identify which input panel is selected
        Case 1
            Insert_Book S
        Case 2
            Insert_RefBook S
        Case 3
            Insert_NewsPapr S
        Case 4
            Insert_Mag S
        Case 5
            Insert_Journ S
        Case 6
            Insert_PubDiss S
        Case 7
            Insert_Lectr S
        Case 8
            Insert_Film S
        Case 9
            Insert_Slide S
        Case 10
            Insert_TvRad S
        Case Else
    End Select
    If AssistInst = True Then
        If tglHelp.Value = True Then
        If Assistant.Visible Then   'If Assistant is open, close it
            HelpBalloon.Close
            Assistant.Visible = False
        End If
        End If
    End If

    SaveSetting "Word 8.0", "Footnote Wizard", "Reference", Str$(RefReference)
    SaveSetting "Word 8.0", "Footnote Wizard", "List", Str$(cbNonPrntMed.ListIndex)
    SaveSetting "Word 8.0", "Footnote Wizard", "PlaceHolder", Str$(Abs(chkPlaceHold.Value))
    SaveSetting "Word 8.0", "Footnote Wizard", "Style", Str$(Abs(obMLA.Value))

    frmFootNoteWiz.Hide     'Close and end Footnote wizard
    End
Else
End If
End Sub

Private Sub obBook_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obBook.Value = True
HideFrame 0
RefReference = 1
fraBook.Visible = True
End Sub

Private Sub obBook_Enter()
RefFlag = 70
UpdateHelp

End Sub
Private Sub obCMS_Enter()
RefFlag = 78
UpdateHelp
End Sub

Private Sub obJourn_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obJourn.Value = True
HideFrame 0
RefReference = 5
fraJourn.Visible = True
End Sub

Private Sub obJourn_Enter()
RefFlag = 74
UpdateHelp
End Sub
Private Sub obMag_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obMag.Value = True
HideFrame 0
RefReference = 4
fraMag.Visible = True
End Sub

Private Sub obMag_Enter()
RefFlag = 73
UpdateHelp

End Sub

Private Sub obMLA_Enter()
RefFlag = 77
UpdateHelp
End Sub

Private Sub obNewsPaper_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obNewsPaper.Value = True
HideFrame 0
RefReference = 3
fraNewsPapr.Visible = True
End Sub
Private Sub obNewsPaper_Enter()
RefFlag = 72
UpdateHelp
End Sub
Private Sub obNonPrntMed_Click()
'When the Non-Print Media option is clicked, runs routine for the list box
obNonPrntMed.Value = True
cbNonPrntMed.Enabled = True
cbNonPrntMed_Click
RefFlag = 76
UpdateHelp
End Sub

Private Sub obPubDiss_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obPubDiss.Value = True
HideFrame 0
RefReference = 6
fraPubDiss.Visible = True
End Sub

Private Sub obPubDiss_Enter()
RefFlag = 75
UpdateHelp
End Sub


Private Sub obRefBook_Click()
'HideFrame is being called to hide whatever input panel is currently up
'RefReference is a flag to identify the input panel
obRefBook.Value = True
HideFrame 0
RefReference = 2
fraRefBook.Visible = True
End Sub


Private Sub obRefBook_Enter()
RefFlag = 71
UpdateHelp

End Sub


Private Sub tglHelp_Click()
'This sub-rountine runs when the Help button is clicked
Select Case tglHelp.Value   'Find the value of the Help button
Case True   'Turn on and initialize, then show the Assistant
  tglHelp.Caption = HelpOff  'Change text of Help Button
  tglHelp.ControlTipText = HelpOffTip  'Change text of Control tip
    Set HelpBalloon = Assistant.NewBalloon
        With HelpBalloon
            .Animation = msoAnimationGestureUp                  'Assistant points up to help balloon
            .Button = msoButtonSetNone                          'No buttons in balloon
            .Heading = BegHelpHead                              'Heading of balloon
            .Mode = msoModeModeless                             'Make balloon modeless
            .Text = BegHelpText                                 'Balloon help text
            .Show                                               'Show Assistant
        End With
        Assistant.Visible = tglHelp.Value                       'Make visible = true
Case False  'Turn off and close Assistant
  tglHelp.Caption = HelpOn                  'Change text of Help Button
  tglHelp.ControlTipText = HelpOnTip        'Change text of Control tip
  HelpBalloon.Close                         'Close the Help Balloon
  Assistant.Visible = tglHelp.Value         'Close the Assistant
End Select
End Sub

Private Sub txtInfo1_Enter()
RefFlag = 1
UpdateHelp
End Sub

Private Sub txtInfo10_Enter()
RefFlag = 10
UpdateHelp

End Sub

Private Sub txtInfo11_Enter()
RefFlag = 11
UpdateHelp
End Sub
Private Sub txtInfo12_Enter()
RefFlag = 12
UpdateHelp
End Sub
Private Sub txtInfo13_Enter()
RefFlag = 13
UpdateHelp
End Sub
Private Sub txtInfo14_Enter()
RefFlag = 14
UpdateHelp
End Sub
Private Sub txtInfo15_Enter()
RefFlag = 15
UpdateHelp
End Sub
Private Sub txtInfo16_Enter()
RefFlag = 16
UpdateHelp
End Sub
Private Sub txtInfo17_Enter()
RefFlag = 17
UpdateHelp
End Sub
Private Sub txtInfo18_Enter()
RefFlag = 18
UpdateHelp
End Sub
Private Sub txtInfo19_Enter()
RefFlag = 19
UpdateHelp
End Sub
Private Sub txtInfo20_Enter()
RefFlag = 20
UpdateHelp
End Sub
Private Sub txtInfo21_Enter()
RefFlag = 21
UpdateHelp
End Sub
Private Sub txtInfo22_Enter()
RefFlag = 22
UpdateHelp
End Sub
Private Sub txtInfo23_Enter()
RefFlag = 23
UpdateHelp
End Sub
Private Sub txtInfo24_Enter()
RefFlag = 24
UpdateHelp
End Sub
Private Sub txtInfo25_Enter()
RefFlag = 25
UpdateHelp
End Sub
Private Sub txtInfo26_Enter()
RefFlag = 26
UpdateHelp
End Sub
Private Sub txtInfo27_Enter()
RefFlag = 27
UpdateHelp
End Sub
Private Sub txtInfo28_Enter()
RefFlag = 28
UpdateHelp
End Sub
Private Sub txtInfo29_Enter()
RefFlag = 29
UpdateHelp
End Sub
Private Sub txtInfo30_Enter()
RefFlag = 30
UpdateHelp
End Sub
Private Sub txtInfo31_Enter()
RefFlag = 31
UpdateHelp
End Sub
Private Sub txtInfo32_Enter()
RefFlag = 32
UpdateHelp
End Sub
Private Sub txtInfo33_Enter()
RefFlag = 33
UpdateHelp
End Sub
Private Sub txtInfo34_Enter()
RefFlag = 34
UpdateHelp
End Sub
Private Sub txtInfo35_Enter()
RefFlag = 35
UpdateHelp
End Sub
Private Sub txtInfo36_Enter()
RefFlag = 36
UpdateHelp
End Sub
Private Sub txtInfo37_Enter()
RefFlag = 37
UpdateHelp
End Sub
Private Sub txtInfo38_Enter()
RefFlag = 38
UpdateHelp
End Sub
Private Sub txtInfo39_Enter()
RefFlag = 39
UpdateHelp
End Sub
Private Sub txtInfo40_Enter()
RefFlag = 40
UpdateHelp
End Sub
Private Sub txtInfo41_Enter()
RefFlag = 41
UpdateHelp
End Sub
Private Sub txtInfo42_Enter()
RefFlag = 42
UpdateHelp
End Sub
Private Sub txtInfo43_Enter()
RefFlag = 43
UpdateHelp
End Sub
Private Sub txtInfo44_Enter()
RefFlag = 44
UpdateHelp
End Sub
Private Sub txtInfo45_Enter()
RefFlag = 45
UpdateHelp
End Sub
Private Sub txtInfo46_Enter()
RefFlag = 46
UpdateHelp
End Sub
Private Sub txtInfo47_Enter()
RefFlag = 47
UpdateHelp
End Sub
Private Sub txtInfo48_Enter()
RefFlag = 48
UpdateHelp
End Sub
Private Sub txtInfo49_Enter()
RefFlag = 49
UpdateHelp
End Sub
Private Sub txtInfo50_Enter()
RefFlag = 50
UpdateHelp
End Sub
Private Sub txtInfo51_Enter()
RefFlag = 51
UpdateHelp
End Sub
Private Sub txtInfo52_Enter()
RefFlag = 52
UpdateHelp
End Sub
Private Sub txtInfo53_Enter()
RefFlag = 53
UpdateHelp
End Sub
Private Sub txtInfo54_Enter()
RefFlag = 54
UpdateHelp
End Sub
Private Sub txtInfo55_Enter()
RefFlag = 55
UpdateHelp
End Sub
Private Sub txtInfo56_Enter()
RefFlag = 56
UpdateHelp
End Sub
Private Sub txtInfo57_Enter()
RefFlag = 57
UpdateHelp
End Sub
Private Sub txtInfo58_Enter()
RefFlag = 58
UpdateHelp
End Sub
Private Sub txtInfo59_Enter()
RefFlag = 59
UpdateHelp
End Sub
Private Sub txtInfo60_Enter()
RefFlag = 60
UpdateHelp
End Sub
Private Sub txtInfo61_Enter()
RefFlag = 61
UpdateHelp
End Sub
Private Sub txtInfo62_Enter()
RefFlag = 62
UpdateHelp
End Sub
Private Sub txtInfo63_Enter()
RefFlag = 63
UpdateHelp
End Sub
Private Sub txtInfo64_Enter()
RefFlag = 64
UpdateHelp
End Sub
Private Sub txtInfo65_Enter()
RefFlag = 65
UpdateHelp
End Sub
Private Sub txtInfo66_Enter()
RefFlag = 66
UpdateHelp
End Sub
Private Sub txtInfo67_Enter()
RefFlag = 67
UpdateHelp
End Sub
Private Sub txtInfo68_Enter()
RefFlag = 68
UpdateHelp
End Sub
Private Sub txtInfo69_Enter()
RefFlag = 69
UpdateHelp
End Sub
Private Sub txtInfo2_Enter()
RefFlag = 2
UpdateHelp
End Sub

Private Sub txtInfo3_Enter()
RefFlag = 3
UpdateHelp
End Sub

Private Sub txtInfo4_Enter()
RefFlag = 4
UpdateHelp

End Sub

Private Sub txtInfo5_Enter()
RefFlag = 5
UpdateHelp
End Sub

Private Sub txtInfo6_Enter()
RefFlag = 6
UpdateHelp
End Sub

Private Sub txtInfo7_Enter()
RefFlag = 7
UpdateHelp

End Sub

Private Sub txtInfo8_Enter()
RefFlag = 8
UpdateHelp
End Sub

Private Sub txtInfo9_Enter()
RefFlag = 9
UpdateHelp
End Sub


Private Sub UserForm_Initialize()
'This sub-routine is run before the form is displayed
Dim n As Integer
fraStartScreen.Visible = True       'Show start screen
fraSelectScreen.Visible = False     'Hide selection screen
fraFootStyle.Visible = False        'Hide Footnote style screen
tglHelp.Enabled = False             'Disable help button
cmdBack.Enabled = False             'Disable back button
cmdOK.Enabled = False
cbNonPrntMed.Enabled = False        'Disable list box
list(0) = "Vorlesung, Ansprache..."           'list(x) is the text for the list box selections
list(1) = "Film"
list(2) = "Diashow/Video..."
list(3) = "Fernseh-/Radioprogramm"
For n = 0 To 3
    cbNonPrntMed.AddItem list(n), n     'Adding the list(x) items into the listbox
Next n
cbNonPrntMed.ListIndex = 0              'Select the first entry in the list box
Dim X As Integer
For X = 1 To 10
    RefReference = X
    HideFrame 0
Next X
RefReference = CInt(GetSetting("Word 8.0", "Footnote Wizard", "Reference", "1"))
Select Case RefReference
    Case 1
        obBook_Click
    Case 2
        obRefBook_Click
    Case 3
        obNewsPaper_Click
    Case 4
        obMag_Click
    Case 5
        obJourn_Click
    Case 6
        obPubDiss_Click
    Case 7 To 10
        obNonPrntMed_Click
        cbNonPrntMed.ListIndex = CInt(GetSetting("Word 8.0", "Footnote Wizard", "List", "0"))
        cbNonPrntMed_Click
End Select
chkPlaceHold.Value = GetSetting("Word 8.0", "Footnote Wizard", "PlaceHolder", "1")
obMLA.Value = GetSetting("Word 8.0", "Footnote Wizard", "Style", "1")
If obMLA.Value <> True Then obCMS.Value = True
DontShow = GetSetting("Word 8.0", "Footnote Wizard", "DontShow", "0")
frmIncomplete.chkDontShow.Value = DontShow
FlagBlank = False




'==================================
'START LOCALIZATION
'==================================

'Start Screen labels =====================================================
cmdCancel.Caption = "Abbrechen"
cmdCancel.ControlTipText = "Hier klicken um den Assistenten zu schlie|fffd|en."
cmdBack.Caption = "<Zur|fffd|ck"
cmdBack.ControlTipText = "Weiter zum n|fffd|chten Schritt."
cmdNext.Caption = "Weiter>"
cmdBack.ControlTipText = "Zur|fffd|ck zum vorherigen Schritt."
cmdOK.Caption = "OK"
cmdOK.ControlTipText = "Die Fu|fffd|note einf|fffd|gen."
lblTextWelcm.Caption = "Willkommen beim Fu|fffd|noten-Assistenten"
lblTextDescrp.Caption = "Dieser Assistent hilft Ihnen, Fu|fffd|noten zu Erstellen, die den folgenden Richtlinien entsprechen:"
lblTextMLA.Caption = "Modern Language Association"
lblTextCMS.Caption = "Chicago Manual of Style"
lblTextCancel.Caption = "Wenn Sie den Fu|fffd|noten-Assistent nicht verwenden m|fffd|chten, klicken Sie auf ""Abbrechen""."
lblTextNext.Caption = "Klicken Sie auf "">Weiter"" um zum n|fffd|chsten Schritt zu gelangen."


'Selection screen frame labels ===========================================
fraSelectScreen.Caption = "Willkommen bei Fu|fffd|noten-Assistenten"
lblChoose.Caption = "W|fffd|hlen Sie die Art der Quelle, die Sie zitieren m|fffd|chten:"
obBook.Caption = "Buch"
obRefBook.Caption = "Nachschlagewerk"
obNewsPaper.Caption = "Zeitung"
obMag.Caption = "Zeitschrift"
obJourn.Caption = "Fachzeitschrift"
obPubDiss.Caption = "Publizierte Dissertation"
obNonPrntMed.Caption = "Nicht gedruckte Medien"

'Book frame labels
fraBook.Caption = "Geben Sie hier die Informationen ein. Der Assistent erledigt den Rest."
lblText1.Caption = "Buchtitel"
lblText2.Caption = "Autor(en)"
lblText3.Caption = "Seiten"
lblText4.Caption = "Herausgeber"
lblText5.Caption = "Teil des Buches - optional"
lblText6.Caption = "Ort der Ver|fffd|ffentlichung"
lblText7.Caption = "Editor/|fffd|bersetzer - optional"
lblText8.Caption = "Ver|fffd|ffentlichungsjahr"
lblText9.Caption = "Auflage"
lblText10.Caption = "Ausgabe"
lblText11.Caption = "Originalausgabe-Datum"
'Reference Book frame labels
fraRefBook.Caption = fraBook.Caption
lblText12.Caption = "Titel des Buches auf das verwiesen wird"
lblText13.Caption = lblText2.Caption
lblText14.Caption = lblText3.Caption
lblText15.Caption = "Titel des Eintrages"
lblText16.Caption = lblText10.Caption
'Newspaper frame labels
fraNewsPapr.Caption = fraBook.Caption
lblText17.Caption = "Titel des Artikels"
lblText18.Caption = "Zeitung"
lblText19.Caption = lblText3.Caption
lblText20.Caption = lblText2.Caption
lblText21.Caption = "Ausgabe - optional"
lblText22.Caption = "Datum der Ver|fffd|ffentlichung"
lblText23.Caption = "Abschnitt - optional"
'Magazine frame labels
fraMag.Caption = fraBook.Caption
lblText24.Caption = lblText17.Caption
lblText25.Caption = "Name der Zeitschrift"
lblText26.Caption = lblText3.Caption
lblText27.Caption = lblText2.Caption
lblText28.Caption = lblText22.Caption
'Journal frame labels
fraJourn.Caption = fraBook.Caption
lblText29.Caption = lblText17.Caption
lblText30.Caption = "Name der Fachzeitschrift"
lblText31.Caption = lblText3.Caption
lblText32.Caption = lblText2.Caption
lblText33.Caption = lblText22.Caption
lblText34.Caption = "Auflage/Ausgabenummer"
'Published Dissertation frame labels
fraPubDiss.Caption = fraBook.Caption
lblText35.Caption = "Titel der Dissertation"
lblText36.Caption = lblText2.Caption
lblText37.Caption = lblText3.Caption
lblText38.Caption = lblText4.Caption
lblText39.Caption = "Name der Universit|fffd|t"
lblText40.Caption = lblText6.Caption
lblText41.Caption = "Jahr/Titel"
lblText42.Caption = lblText8.Caption
'Lecture frame labels
fraLectr.Caption = fraBook.Caption
lblText43.Caption = "Vortrag, Rede oder Ansprache"
lblText44.Caption = "Sprecher"
lblText45.Caption = "Veranstaltung"
lblText46.Caption = "Sponsor - optional"
lblText47.Caption = "Ort"
lblText48.Caption = "Datum"
'Film frame labels
fraFilm.Caption = fraBook.Caption
lblText49.Caption = "Titel des Films"
lblText50.Caption = "Regisseur"
lblText51.Caption = "Verleiher"
lblText52.Caption = "Beitragende(r) - optional"
lblText53.Caption = "Jahr"
lblText54.Caption = "Format - optional"
lblText55.Caption = "Dauer"
'Slide frame labels
fraSlide.Caption = fraBook.Caption
lblText56.Caption = "Film, Diashow oder Video"
lblText57.Caption = "Beitragende(r)"
lblText58.Caption = "Medium"
lblText59.Caption = "Verleiher - optional"
lblText60.Caption = lblText53.Caption
lblText61.Caption = "Umfang - optional"
lblText62.Caption = lblText55.Caption
'Television frame labels
fraTvRad.Caption = fraBook.Caption
lblText63.Caption = "Fernseh- oder Radioprogramm"
lblText64.Caption = "Titel of Episode"
lblText65.Caption = "Darsteller(in)"
lblText66.Caption = "Fernsehanstalt"
lblText67.Caption = "Lokalstation"
lblText68.Caption = "Ort"
lblText69.Caption = "Sendedatum"

'Footnote style selection screen labels =======================================
fraFootStyle.Caption = "W|fffd|hlen Sie einen der beiden Stile:"
obMLA.Caption = lblTextMLA.Caption
obCMS.Caption = lblTextCMS.Caption
chkPlaceHold.Caption = "Platzhalter f|fffd|r fehlende Daten einf|fffd|gen?"

'Incomplete Form labels
frmIncomplete.Caption = "Fu|fffd|noten-Assistent - Fehlende Daten"
frmIncomplete.lblIncomplete.Caption = "Sie haben nicht alle Felder ausgef|fffd|llt:"
frmIncomplete.lblGoBack.Caption = "Zur|fffd|ckgehen und Text f|fffd|r die Platzhalter eingeben."
frmIncomplete.lblContinue.Caption = "Wenn Sie Weiter klicken, wird der Fu|fffd|noten-Assistent eine Fu|fffd|note einf|fffd|gen. Sie m|fffd|ssen aber fehlende Angabe noch manuell erg|fffd|nzen."
frmIncomplete.cmdGoBack.Caption = "Zur|fffd|ck"
frmIncomplete.cmdContinue.Caption = "Weiter"
frmIncomplete.chkDontShow = "Diesen Dialog nicht mehr anzeigen."

'Array for the built-in help text
HelpText(70) = "B|fffd|cher oder Handb|fffd|cher, einschl. Bedienungsanleitungen."
HelpText(71) = "Lexika oder W|fffd|rterb|fffd|cher."
HelpText(72) = "Beispiel: The New York Times"
HelpText(73) = "Beispiel: Sports Illustrated"
HelpText(74) = "Beispiel: Journal of the American Medical Association"
HelpText(75) = "Eine lange, formelle Wissenschaftliche Abhandlung, insbesondere Doktorabeiten oder Dissertationen."
HelpText(76) = "Nicht gedruckte Medien, einschlie|fffd|lich:" & Chr(13) & "1.Vortrag, Rede oder Ansprache" & Chr(13) & "2.Film" & Chr(13) & "3.Firlm, Diashow oder Video" & Chr(13) & "4.Fernseh- oder Radioprogramm"
HelpText(77) = "Unterhalb dieses Textes finden Sie ein Beispiel f|fffd|r eine Fu|fffd|note nach ""Modern Language Association"" stil."
HelpText(78) = "Unterhalb dieses Textes finden Sie ein Beispiel f|fffd|r eine Fu|fffd|note nach ""Chicago Manual of Style""."
HelpText(79) = "Wenn dieses Kontrollk|fffd|stchen angekreuzt is, werden an Stelle von fehlenden Informationen Platzhalter eingef|fffd|gt, die die Art der Information, die hier eingegeben werden sollte, in eckigen Klammern einschlie|fffd|en."
'If checked, will add placeholder text where there was missing information, surrounded by [] brackets."
HelpText(80) = "Buch"
HelpText(81) = "Nachschlagewerk"
HelpText(82) = "Zeitung"
HelpText(83) = "Zeitschrift"
HelpText(84) = "Fachzeitschrift"
HelpText(85) = "Publizierte Dissertation"
HelpText(86) = "Nicht gedruckte Medien"
HelpText(87) = "Modern Language Association"
HelpText(88) = "Chicago Manual of Style"
HelpText(89) = "Platzhalter"


HelpText(1) = "Trennen Sie Titel und Untertitel durch einen Doppelpunkt." & Chr(13) & "Beispiel: Middlemarch: A Story of a Provincial Town." & Chr(13) & "If Anthology, enter its title." & Chr(13) & "Example: The Norton Anthology of Poetry"
HelpText(2) = "Geben Sie zuerst den Vornamen, dann den Nachnamen ein." & Chr(13) & "Bei drei oder mehr Autoren verweden Sie " & Chr(34) & "et al." & Chr(34) & Chr(13) & "Example: Shelly Brewen, Andy Pullen, Veronica Picard, et. al." & Chr(13) & "Wenn ein K|fffd|nstlername oder eine Organisation verwendet wird, verwenden Sie diese."
HelpText(3) = "Trennen Sie mehrere Seiten durch Bindestriche zwischen der dersten und letzten Seitennummer, auf die verwiesen wird." & Chr(13) & "Beispiel: 75-85"
HelpText(4) = "Es wird oft akzeptiert, wenn abgek|fffd|rzte Formen verwendet werden." & Chr(13) & "Beispiel: Verwenden Sie ""Harcourt"" f|fffd|r ""Harcourt Brace Jovanovich, Inc.""" & Chr(13) & "Kl|fffd|ren Sie aber vorher ab, welche Abk|fffd|rzungen akzeptiert werden."
HelpText(5) = "Kennzeichnet den Teil des Buches, auf ds verwiesen wird."
HelpText(6) = "Wenn mehrere Orte aufgef|fffd|hrt sind, verwenden Sie nur den ersten Ort. Wenn der Ort nicht allgemein bekannt ist, schlei|fffd|en Sie weitere Informationen ein." & Chr(13) & "Example: Wontassa, IL."
HelpText(7) = "Geben Sie " & Chr(34) & "ed." & Chr(34) & " vor dem Namen des Editors, " & Chr(34) & "trans." & Chr(34) & " vor den Namen des |fffd|bersetzers, " & Chr(34) & "comp." & Chr(34) & " Vor dem Namen des Kompilators ein." & Chr(13) & "Example: ed. Kelly Holliday und trans. Enrico Gonzalez."
HelpText(8) = "Entspricht oft dem Copyright-Datum. Wenn kein genaues Datum bekannt ist, geben Sie ""n. d."" f|fffd|r no date ein."
HelpText(9) = "Beispiel: 19"
HelpText(10) = "Kann i.d.R. der Copyright-Seite entnommen werden. Enth|fffd|lt die Version, die zitiert wird." & Chr(13) & "Beispieleintr|fffd|ge: 2nd or rev."
HelpText(11) = "Datum der ersten Ver|fffd|ffentlichung."
HelpText(12) = HelpText(1)
HelpText(13) = HelpText(2)
HelpText(14) = HelpText(3)
HelpText(15) = "Schreiben Sie das erste Zeichen als Gro|fffd|buchstaben." & Chr(13) & "Beispiel: Hummingbirds" & Chr(13) & "Note: If using the Chicago Manual of Style footnote convention, this wizard inserts " & Chr(34) & "s.v." & Chr(34) & " (" & Chr(34) & "sub verbo" & Chr(34) & " which means under the word)."
HelpText(16) = HelpText(10)
HelpText(17) = "Verwenden Sie ""Zeitschrift"", wenn Sie eine Zeitungsbeilage, wie ""The New York Times Magazine"" zitieren. Wenn der Artikel Anf|fffd|hrungszeichen enth|fffd|lt, verwenden Sie statt dieser einfache Anf|fffd|hrungszeichen." & Chr(13) & "Beispiel: 'Fools Gold' Soldout."
HelpText(18) = "Wenn der Name der Zeitung mit einem Artikel beginnt, lassen Sie diesen weg. Beispiel, statt ""The New York Times"" geben Sie ""New York Times"" ein."
HelpText(19) = "Wenn der Teil der Zeitung mit angegeben ist, f|fffd|gen Sie diesen ebenfalls ein. Geben Sie nur die erste Seite des Artikels ein. Wird der Artikel auf einer Folgeseit fortgesetzt, f|fffd|gen Sie ein Plus-Zeichen ein." & Chr(13) & "Beispiel: C1+"
HelpText(20) = "Wenn der Artikel von einem Nachristenservice kommt, geben Sie diesen mit ein." & Chr(13) & "Beispiel: API Wireservice" & Chr(13) & "If it is a letter to the editor, enter Everett Tsang, letter."
HelpText(21) = "Verwenden Sie dies f|fffd|r Artikel, die nicht in jeder Ausgabe enthalten sind." & Chr(13) & "Beispiele: Western or Sunrise."
HelpText(22) = "Geben Sie zuerst den Tag, dann den Monat und zuletzt das Jahr ein. " & Chr(13) & "Beispiel: 19 July 1995.  Kie k|fffd|nnen den Monat abk|fffd|rzen."
HelpText(23) = "Verwenden Sie diesen Eintrag nur, wenn der Abschnitt nicht schon in der Seitennummer enthalten ist." & Chr(13) & "Beispiel: 2nd or Business."
HelpText(24) = "Wenn der Artikel Anf|fffd|hrungszeichen enth|fffd|lt, verwenden Sie statt desse einfache Anf|fffd|hrungszeichen" & Chr(13) & "Beispiel: 'Fools Gold' Soldout"
HelpText(25) = "Wenn der Namen der Zeitschrift mit ienem Artikel beginnt, lassen Sie diesen weg." & Chr(13) & "Beispiel: f|fffd|r ""The New Yorker"", geben Sie ""New Yorker"" ein."
HelpText(26) = HelpText(3) & " Wenn der Artikel nicht auf der n|fffd|chsten Seite fortgesetzt wird, geben Sie  ein Plus-Zeichen ein." & Chr(13) & "Beispiel: 16+"""
HelpText(27) = HelpText(2)
HelpText(28) = "Bei Zeitschriften, die w|fffd|chtentlich oder monatlich erscheinen, geben Sie Tag Monat und Jahr ein. Bei Zeitschriften, die alle zwei Monate erscheinen, geben Sie die Monatsnamen und das Jahr ein. Monatsnamen k|fffd|nnen abgek|fffd|rzt werden."
HelpText(29) = HelpText(24)
HelpText(30) = "Der Name kann abgek|fffd|rzt werden, wenn er h|fffd|ufig verwendet wird. Einleitende Artikel k|fffd|nnen weggelassen werden." & Chr(13) & "Beispiel: F|fffd|r ""The Computer Users Journal"" geben Sie ""Computer Users Journal"" ein."
HelpText(31) = HelpText(26)
HelpText(32) = HelpText(2)
HelpText(33) = HelpText(28)
HelpText(34) = "Wenn die Ausgabe mit Seite 1 beginnt, geben Sie die Nummer der Ausgabe vor der Seitennummer ein." & Chr(13) & "Beispiel: 14.134.  Wird die Numerierung |fffd|ber mehrere Ausgaben fortgef|fffd|hrt, geben Sie nur die Seitennummer ein. Verwenden Sie keine r|fffd|mischen Zahlen."
HelpText(35) = HelpText(1)
HelpText(36) = HelpText(2)
HelpText(37) = HelpText(3) & " Wenn die Dissertation |fffd|ber University Microfilms International (UMI) ver|fffd|ffentlicht wurde, geben Sie die Bestellnummer ein. Beispiel : 9307865"
HelpText(38) = HelpText(4)
HelpText(39) = "Geben Sie den Namen der Universit|fffd|t an, an der die Dissertation geschrieben wurde."
HelpText(40) = HelpText(6)
HelpText(41) = "Jahr der Dissertation und Titel der von der Universit|fffd|t verliehen wurde."
HelpText(42) = "Entspricht oft dem Copyright-Datum."
HelpText(43) = "Wenn der Vortrag keinen Titel hat, lassen Sie das Feld leer."
HelpText(44) = "Geben Sie den Vornamen, dann den Nachnamen ein. Wenn der Vortrag keinen Titel hat, geben Sie eine kurze Beschreibung ein." & Chr(13) & "Beispiel: Paula Manar, keynote speech."
HelpText(45) = "Wenn dei Rede bei einer Veranstaltung gehalten wurde, geben Sie den Namen der Veranstaltung ein." & Chr(13) & "Beispiel: Plenary Session."
HelpText(46) = "Geben Sie den Namen der Organisationen ein, die die Veranstaltung unterst|fffd|tzen." & Chr(13) & "Beispiel: The National Humanitites Conference."
HelpText(47) = HelpText(6)
HelpText(48) = HelpText(22)
HelpText(49) = "Beispiel: Casablanca"
HelpText(50) = "Geben Sie Vor- und Nachnamen des Regisseurs ein."
HelpText(51) = "Beispiel: Orion"
HelpText(52) = "F|fffd|hren Sie hier Personen auf, die besonders hervorgehoben werden sollen, die Drehbuchautor, Produzent, Schauspieler, Komponist, etc. Geben Sie den abgek|fffd|rzten Titel vor den Namen ein." & Chr(13) & "Beispiel: writ. Julius & Philip Epstein und Howard Koch, mit Humphrey Bogart, Ingrid Bergman."
HelpText(53) = "Beispiel: 1942"
HelpText(54) = "Wird in Millimetern eingegeben: 70mm."
HelpText(55) = "Wird in Minuten eingegeben: 102 min."
HelpText(56) = "Beispiel: The 1960's Legacy"
HelpText(57) = "Geben Sie die abgek|fffd|rzten Titel vor den Namen ein." & Chr(13) & "Bespiel: writ. und prod. Kevin Belton."
HelpText(58) = "Beispiel: Diashow"
HelpText(59) = HelpText(51)
HelpText(60) = HelpText(53)
HelpText(61) = "Beispiel: 234 Dias"
HelpText(62) = HelpText(55)
HelpText(63) = "Beispiel: Star Trek: The Next Generation"
HelpText(64) = "Beispiel: For all good things..."
HelpText(65) = "Beispiel: Special guest Corbin Bernsen. F|fffd|hren Sie hier auch Personen auf, die besonders hervorgewhoben werden sollen, wie Drehbuchautor, Produzent, Schuspieler, Komponist, etc." & Chr(13) & "Beispiel: dir. David Lipsomb, writ. und prod. Kevin Belton, mit Simon Wigton."
HelpText(66) = "Beispiel: ARD"
HelpText(67) = "Beispiel: M|fffd|nchen"
HelpText(68) = HelpText(6)
HelpText(69) = HelpText(22)

'======================================
'END LOCALIZATION
'======================================
End Sub


Attribute VB_Name = "frmIncomplete"
Attribute VB_Base = "0{CFB130A1-5451-11D0-B5E8-00AA00BBB76C}{CFB13062-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False









Option Explicit

Private Sub cmdContinue_Click()
SaveSetting "Word 8.0", "Footnote Wizard", "DontShow", Str$(Abs(chkDontShow.Value))
FlagBlank = False
frmIncomplete.Hide
End Sub

Private Sub cmdGoBack_Click()
frmIncomplete.Hide
End Sub
Attribute VB_Name = "frmpreview"
Attribute VB_Base = "0{CFB130A9-5451-11D0-B5E8-00AA00BBB76C}{CFB13064-5451-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit

Private Sub CommandButton1_Click()
Unload Me
End Sub

Sub UserForm_Initialize()
TextBox1.WordWrap = True
TextBox1.MultiLine = True
TextBox1.Text = Application.NormalTemplate.AutoTextEntries.Item("Sammlung")
End Sub

' InQuest injected base64 decoded content
' rgQz
' jZ "{
' jUb{

INQUEST-PP=macro
