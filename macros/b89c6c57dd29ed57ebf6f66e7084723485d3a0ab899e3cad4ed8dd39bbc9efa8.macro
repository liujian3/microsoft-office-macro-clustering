Attribute VB_Name = "CommonDlg"
Option Explicit
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    FormatReport
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "seamTemplate"
Option Explicit
Dim orgCells As Range, targetCells As Range, textCells As Range

Dim tempCells As Range, iRowGraph As Integer
Dim fResizeChart As Boolean
Dim fEliminateUnaccaptable As Boolean

Sub CopyCell(dest As Range, iDestRow As Integer, iDestCol As Integer, src As Range, iRow As Integer, iCol As Integer, Optional fPropertiesToo As Boolean, Optional fFormat As Boolean)
    ' copy the item and the formatting of the item!
    If fFormat Then
       dest(iDestRow, iDestCol).NumberFormat = textCells(31, 2).Value ' "0.00"
    End If
    dest(iDestRow, iDestCol).Value = src(iRow, iCol).Value
    If fPropertiesToo Then
        dest(iDestRow, iDestCol).Font.Bold = src(iRow, iCol).Font.Bold
        dest(iDestRow, iDestCol).Font.Italic = src(iRow, iCol).Font.Italic
    End If
End Sub
' draw a line underneath the selected range
Public Sub DrawLine(dest As Range)
    ' draw a line.
    With dest
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlNone
        .Borders(xlEdgeTop).LineStyle = xlNone
    End With
    With dest.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    dest.Borders(xlEdgeRight).LineStyle = xlNone
    dest.Borders(xlInsideVertical).LineStyle = xlNone
End Sub

Sub PlaceHeadlines(targetCells As Range)
    
    DrawLine targetCells.Range("A17:Q17")
    
    Dim i As Integer, j As Integer
    For i = 1 To 17
        For j = 0 To 2
            targetCells(19 + j, i).Value = textCells(j + 1, i).Value
        Next
    Next
    
    DrawLine targetCells.Range("A22:Q22")
    
    targetCells(23, 1).Value = textCells(5, 1).Value '"Unacceptable minimum"
    targetCells(24, 1).Value = textCells(6, 1).Value  '"Minimum"
    targetCells(25, 1).Value = textCells(7, 1).Value  '"Nominal"
    targetCells(26, 1).Value = textCells(8, 1).Value  '"Maximum"
    targetCells(27, 1).Value = textCells(9, 1).Value  '"Unacceptable maximum"
    
    targetCells(11, 1).Value = textCells(10, 1).Value  '"Report ID:"
    targetCells(11, 8).Value = textCells(11, 1).Value  '"Last calibration date:"
    targetCells(12, 1).Value = textCells(12, 1).Value  '"Can Spec:"
    targetCells(13, 1).Value = textCells(13, 1).Value  '"Line:"
    targetCells(14, 1).Value = textCells(14, 1).Value  '"Number of Heads:"
    targetCells(15, 1).Value = textCells(15, 1).Value  '"Measurement per Head:"
End Sub

' create the entire header section
Private Sub CreateHeaderInformation()
    ' first, copy headline headers information!
    targetCells(2, 3).Value = orgCells(21, 1).Value
    targetCells(4, 4).Value = orgCells(22, 1).Value
    targetCells(5, 4).Value = orgCells(23, 1).Value
    targetCells(6, 4).Value = orgCells(24, 1).Value
    targetCells(7, 4).Value = orgCells(25, 1).Value
    targetCells(4, 8).Value = orgCells(26, 1).Value
    targetCells(5, 8).Value = orgCells(27, 1).Value
    targetCells(6, 8).Value = orgCells(28, 1).Value
    targetCells(7, 8).Value = orgCells(29, 1).Value
    targetCells(9, 3).Value = orgCells(30, 1).Value
    
    ' copy the head information
    Dim iRowHead As Integer, iSrcRowHead As Integer
    iSrcRowHead = 13
    iRowHead = 4
    Dim i As Integer
    For i = 1 To 4
        targetCells(iRowHead, 6).Value = CStr(orgCells(iSrcRowHead, 1).Value)
        targetCells(iRowHead, 10).Value = CStr(orgCells(iSrcRowHead + 4, 1).Value)
        
        iRowHead = iRowHead + 1
        iSrcRowHead = iSrcRowHead + 1
    Next
    
    ' report information.
    targetCells(11, 4).Value = orgCells(6, 1).Value
    targetCells(12, 4).Value = orgCells(8, 1).Value
    targetCells(13, 4).Value = orgCells(9, 1).Value
    targetCells(14, 4).Value = orgCells(10, 1).Value
    targetCells(15, 4).Value = orgCells(11, 1).Value
    targetCells(11, 10).NumberFormat = CStr(textCells(25, 2).Value) ' "dd/mm/yy"
    targetCells(11, 10).Value = Format$(CStr(orgCells(12, 1).Value), targetCells(11, 10).NumberFormat)
    
    ' number of heads & sections
    PlaceHeadlines targetCells
    
    ' copy standards!
    Dim iRowStd As Integer, iColStd As Integer, iSrcRowStd As Integer
    iSrcRowStd = 1
    iRowStd = 23
    Dim iStd As Integer
    
    For iStd = 1 To 5
        'copy Body, Cover, Thickness standards
        For iColStd = 4 To 6
            ' numeric field
            CopyCell targetCells, iRowStd, iColStd, orgCells, iSrcRowStd, iColStd, , True
            targetCells(iRowStd, iColStd).NumberFormat = textCells(31, 2).Value & "0" '"0.000"
        Next
        
        'copy Length, Counter standards
        For iColStd = 6 To 7
            ' numeric field
            CopyCell targetCells, iRowStd, iColStd + 1, orgCells, iSrcRowStd, iColStd + 4, , True
            targetCells(iRowStd, iColStd).NumberFormat = textCells(31, 2).Value  '"0.00"
        Next
        
    
        'copy Body, Cover Hook standards
        CopyCell targetCells, iRowStd, 9, orgCells, iSrcRowStd, 9, , True
        targetCells(iRowStd, 9).NumberFormat = textCells(31, 2).Value  '"0.00"
        CopyCell targetCells, iRowStd, 10, orgCells, iSrcRowStd, 8, , True
        targetCells(iRowStd, 10).NumberFormat = textCells(31, 2).Value  '"0.00"
     
        'copy Overlap standards
        CopyCell targetCells, iRowStd, 11, orgCells, iSrcRowStd, 7, , True
        targetCells(iRowStd, iColStd).NumberFormat = textCells(31, 2).Value  '"0.00"
        
        'copy Body Hook Butt, %Overlap
        For iColStd = 13 To 14
            CopyCell targetCells, iRowStd, iColStd - 1, orgCells, iSrcRowStd, iColStd, , True
            targetCells(iRowStd, iColStd - 1).NumberFormat = "0.0"
        Next
        
        'copy Seam Gap
        CopyCell targetCells, iRowStd, 14, orgCells, iSrcRowStd, 12, , True
        targetCells(iRowStd, 14).NumberFormat = textCells(31, 2).Value  '"0.00"
        
        'copy Free Space
        CopyCell targetCells, iRowStd, 15, orgCells, iSrcRowStd, 15, , True
        targetCells(iRowStd, 15).NumberFormat = textCells(31, 2).Value & "0" '"0.000"
        
        CopyCell targetCells, iRowStd, 16, orgCells, iSrcRowStd, 16, , True
        targetCells(iRowStd, 16).NumberFormat = "0"
        
        'copy CHButt
        CopyCell targetCells, iRowStd, 17, orgCells, iSrcRowStd, 17, , True
        targetCells(iRowStd, 17).NumberFormat = "0"
        
        iRowStd = iRowStd + 1
        iSrcRowStd = iSrcRowStd + 1
    Next
    DrawLine targetCells.Range("A28:Q28")
    
End Sub

' copies at least one column of results
Sub CopySectionResults(nHeads As Integer, nSections As Integer, nItems As Integer, offset As Integer, targetOff As Integer, ColForm As Integer)
    'copy Body, Cover, Thickness results
    Dim iRow As Integer, iCol As Integer
    Dim iSrcRow As Integer, iSrcRowStd As Integer
    Dim iHead As Integer, iSection As Integer
    
    iSrcRow = 6
    iRow = 29
    iSrcRowStd = 1
    For iHead = 1 To nHeads
        For iSection = 1 To nSections
            For iCol = 0 To nItems - 1
                If (CStr(orgCells(iSrcRow, iCol + offset)) = "") Then
                    targetCells(iRow, iCol + targetOff).Value = ""
                Else
                    targetCells(iRow, iCol + targetOff).Value = CheckStandard(Format$(orgCells(iSrcRow, iCol + offset), GetFormat(ColForm)), _
                                        Format$(orgCells(iSrcRowStd + 1, iCol + offset - 1), GetFormat(ColForm)), Format$(orgCells(iSrcRowStd + 3, iCol + offset - 1), GetFormat(ColForm)), _
                                        Format$(orgCells(iSrcRowStd + 4, iCol + offset - 1), GetFormat(ColForm)), Format$(orgCells(iSrcRowStd, iCol + offset - 1), GetFormat(ColForm)))
                End If
                If ((iCol + targetOff) = 12 Or (iCol + targetOff) = 13) Then
                   targetCells(iRow, iCol + targetOff).NumberFormat = "0.0"
                Else
                   targetCells(iRow, iCol + targetOff).NumberFormat = textCells(31, 2).Value '"0.00"
                End If
                If ((iCol + targetOff) = 15) Then
                   targetCells(iRow, iCol + targetOff).NumberFormat = textCells(31, 2).Value & "0" '"0.000"
                End If
            Next
            iRow = iRow + 1
            iSrcRow = iSrcRow + 1
        Next
    Next
End Sub
'Sub CopyResultsToGrid(nHeads As Integer, nSections As Integer, nItems As Integer, offset As Integer, targetOff As Integer)
Sub CopyResultsToGrid(nHeads As Integer, nSections As Integer, offset As Integer, targetOff As Integer, ColForm As Integer, orgTarget As Integer)
    Dim iRow As Integer, iCol As Integer
    Dim iSrcRow As Integer, iSrcRowStd As Integer
    Dim iHead As Integer, iSection As Integer
    Dim iColTemp As Integer, tempOff As Integer
    Dim iPos As Integer
    
    iPos = 1
    
    iSrcRow = 6
    iRow = 1
    iSrcRowStd = 1
    iColTemp = 0
    tempOff = targetOff
    For iHead = 1 To nHeads
        For iCol = 0 To nSections - 1
            ' check both source and target if they're empty!
            If (CStr(orgCells(iSrcRow, iColTemp + offset)) = "") Or (CStr(targetCells(29 + iRow - 1, iColTemp + orgTarget).Value) = "") Then
'            If (CStr(orgCells(iSrcRow, iColTemp + offset)) = "") Then
                tempCells(iRow, iColTemp + tempOff - 1).Value = iPos
                tempCells(iRow, iColTemp + tempOff).Value = ""
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 1, iColTemp + offset - 1).Value
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 2, iColTemp + offset - 1).Value
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 3, iColTemp + offset - 1).Value
            Else
                tempCells(iRow, iColTemp + tempOff - 1).Value = iPos
                tempCells(iRow, iColTemp + tempOff).Value = Format$(orgCells(iSrcRow, iColTemp + offset).Value, GetFormat(ColForm))
                tempCells(iRow, iColTemp + tempOff).NumberFormat = GetFormat(ColForm)
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 1, iColTemp + offset - 1).Value
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 2, iColTemp + offset - 1).Value
                tempOff = tempOff + 1
                tempCells(iRow, iColTemp + tempOff).Value = orgCells(iSrcRowStd + 3, iColTemp + offset - 1).Value
            End If
            tempOff = targetOff
            iRow = iRow + 1
            iSrcRow = iSrcRow + 1
            iPos = iPos + 1
         Next
    Next
End Sub
' copy the heads & secontion numbers (and date & time as well)
Sub CopyHeadsAndSections(nHeads As Integer, nSections As Integer)
    Dim iRow As Integer, iCol As Integer
    Dim iSrcRow As Integer, iSrcRowStd As Integer
    
    iSrcRow = 6
    iRow = 29
    Dim iHead As Integer, iSection As Integer

    For iHead = 1 To nHeads
        For iSection = 1 To nSections
            For iCol = 1 To 2
                CopyCell targetCells, iRow, iCol + 1, orgCells, iSrcRow, iCol + 1
            Next
            ' date & time.
            targetCells(iRow, 1).Value = CStr(orgCells(iSrcRow, 4).Value)
            iRow = iRow + 1
            iSrcRow = iSrcRow + 1
        Next
    Next
End Sub

' put asterisks if needed (if beyond the standard range).
Function CheckStandard(src, stdMin, stdMax, stdUMax, stdUMin) As String
    Dim dUMax As Double, dUMin As Double, dMax As Double, dMin As Double
    
    If Not IsNumeric(stdMin) Then
        dMin = 0
    Else
        dMin = CDbl(stdMin)
    End If
    
    If Not IsNumeric(stdMax) Then
        dMax = 0
    Else
        dMax = CDbl(stdMax)
    End If

    If Not IsNumeric(stdUMin) Then
        dUMin = 0
    Else
        dUMin = CDbl(stdUMin)
    End If
    
    If Not IsNumeric(stdUMax) Then
        dUMax = 0
    Else
        dUMax = CDbl(stdUMax)
    End If
    
    If ((CDbl(src) > dUMax) And dUMax <> 0) Or ((CDbl(src) < dUMin) And dUMin <> 0) Then
        If fEliminateUnaccaptable Then
            CheckStandard = ""
        Else
            CheckStandard = "*" + CStr(src) + "*"
        End If
    ElseIf ((CDbl(src) > dMax) And dMax <> 0) Or ((CDbl(src) < dMin) And dMin <> 0) Then
        CheckStandard = CStr(src) + "*"
    Else
        CheckStandard = CStr(src)
    End If
    
End Function

' get the numeric value of an asterisked value.
Function GetNumeric(sText As String) As String
    Dim sOut As String
    sOut = sText
    If left$(sOut, 1) = "*" Then
        sOut = Mid$(sOut, 2)
    End If
    If Right$(sOut, 1) = "*" Then
        sOut = left$(sOut, Len(sOut) - 1)
    End If
    GetNumeric = sOut
End Function

' create the entire min/max section.
Function DoMinMax(nHeads As Integer, nSections As Integer) As Integer
    Dim iHead As Integer, iSection As Integer, iCol As Integer
    Dim dMax As Single, dMin As Single, dAvg As Single, nAvg As Integer
    Dim i As Integer, iColFormat As Integer
    Dim iRow As Integer, iTargetRow As Integer
    iTargetRow = 29 + (nHeads * nSections)
    
    '!!!!
    targetCells(iTargetRow + 1, 1).Value = textCells(16, 1).Value   '"Results max"
    targetCells(iTargetRow, 1).Value = textCells(17, 1).Value       '"Results min"
    targetCells(iTargetRow + 2, 1).Value = textCells(18, 1).Value   '"Results range"
    
    targetCells.Range("A" + CStr(iTargetRow) + ":Q" + CStr(iTargetRow + 2)).BorderAround xlContinuous, xlThick, xlColorIndexAutomatic
    targetCells.Range("A" + CStr(iTargetRow) + ":Q" + CStr(iTargetRow + 2)).Borders(xlInsideVertical).LineStyle = xlContinuous
    targetCells.Range("A" + CStr(iTargetRow) + ":Q" + CStr(iTargetRow + 2)).Borders(xlInsideHorizontal).LineStyle = xlContinuous
            
    For iCol = 4 To 17
        
        iColFormat = iCol
        iRow = 29
        nAvg = 0
        For i = 1 To nHeads * nSections
            Dim sValue As String, dValue As Single
            sValue = GetNumeric(targetCells(iRow, iCol).Value)
            If IsNumeric(sValue) Then
                dValue = CSng(sValue)
                If (nAvg = 0) Then
                    dMax = dValue
                    dMin = dValue
                End If
                            
                nAvg = nAvg + 1
                If dValue > dMax Then
                    dMax = dValue
                End If
                If dValue < dMin Then
                    dMin = dValue
                End If
            End If
            iRow = iRow + 1
         Next
                      
         If (nAvg > 0) Then
             If (iCol = 13) Then
               iColFormat = 12
             End If
             If (iCol = 15) Then
               iColFormat = 4
             End If
             targetCells(iTargetRow + 1, iCol).Value = Format$(Abs(dMax), GetFormat(iColFormat))
             targetCells(iTargetRow + 1, iCol).NumberFormat = GetFormat(iColFormat)
             targetCells(iTargetRow, iCol).Value = Format$(Abs(dMin), GetFormat(iColFormat))
             targetCells(iTargetRow, iCol).NumberFormat = GetFormat(iColFormat)
             If (iCol = 13) Then
               iColFormat = 12
             End If
             If (iCol = 15) Then
               iColFormat = 4
             End If
             targetCells(iTargetRow + 2, iCol).Value = Format$(Abs(dMin - dMax), GetFormat(iColFormat))
             targetCells(iTargetRow + 2, iCol).NumberFormat = GetFormat(iColFormat)
         Else
             targetCells(iTargetRow, iCol).Value = ""
             targetCells(iTargetRow + 1, iCol).Value = ""
             targetCells(iTargetRow + 2, iCol).Value = ""
         End If
         
    Next
    DoMinMax = iTargetRow + 3
End Function

' create the entire avg/stddev section.
Function AvgStdDev(iStartRow As Integer, nHeads As Integer, nSections As Integer) As Integer

    ' go over the columns and determine if they all comply
    Dim iCol As Integer, iRow As Integer
    Dim dAvg As Single, nAvg As Integer, dAvgStdDev As Single
    Dim i As Integer, iRowOld As Integer
    Dim sValue As String, dValue As Single
    Dim iColFormat As Integer, n As Single
    
    iRow = iStartRow
    '!!!!!!!
    targetCells(iStartRow, 1).Value = textCells(19, 1).Value     '"Results avg"
    targetCells(iStartRow + 1, 1).Value = textCells(20, 1).Value '"Results stddev"
    targetCells.Range("A" + CStr(iStartRow) + ":Q" + CStr(iStartRow + 1)).BorderAround xlContinuous, xlThick, xlColorIndexAutomatic
    targetCells.Range("A" + CStr(iStartRow) + ":Q" + CStr(iStartRow + 1)).Borders(xlInsideVertical).LineStyle = xlContinuous
    targetCells.Range("A" + CStr(iStartRow) + ":Q" + CStr(iStartRow + 1)).Borders(xlInsideHorizontal).LineStyle = xlContinuous
    
    For iCol = 4 To 17
       Dim iTargetRow As Integer
       iTargetRow = iRow
       iRowOld = 29
       dAvg = 0
       nAvg = 0
       dAvgStdDev = 0
       iColFormat = iCol
       'loop avg
       For i = 1 To nHeads * nSections
           sValue = GetNumeric(targetCells(iRowOld, iCol).Value)
           If IsNumeric(sValue) Then
              dValue = CSng(sValue)
              dAvg = dAvg + dValue
              nAvg = nAvg + 1
           End If
           iRowOld = iRowOld + 1
       Next
            
       'loop stddev
       iRowOld = 29
       For i = 1 To nHeads * nSections
           sValue = GetNumeric(targetCells(iRowOld, iCol).Value)
           If IsNumeric(sValue) Then
              dValue = CSng(sValue)
              dAvgStdDev = dAvgStdDev + (dAvg / nAvg - dValue) ^ 2
           End If
           iRowOld = iRowOld + 1
       Next
            
       If (nAvg > 0) Then
          If (iCol = 13) Then
            iColFormat = 12
          End If
          If (iCol = 15) Then
            iColFormat = 4
          End If
          targetCells(iTargetRow, iCol).Value = Format$(dAvg / nAvg, GetFormat(iColFormat))
          targetCells(iTargetRow, iCol).NumberFormat = GetFormat(iColFormat)
          If (iCol = 4) Or (iCol = 5) Then
             targetCells(iTargetRow + 1, iCol).Value = Format$(Sqr(dAvgStdDev / nAvg), GetFormat(iColFormat))
             targetCells(iTargetRow + 1, iCol).NumberFormat = GetFormat(iColFormat)
          End If
          If iCol > 5 Then
             n = nAvg - 1
             If n > 0 Then
                targetCells(iTargetRow + 1, iCol).Value = Format$(Sqr(dAvgStdDev / n), GetFormat(iColFormat))
                targetCells(iTargetRow + 1, iCol).NumberFormat = GetFormat(iColFormat)
             End If
          End If
       Else
          targetCells(iTargetRow, iCol).Value = ""
          targetCells(iTargetRow + 1, iCol).Value = ""
       End If
                     
    Next
    AvgStdDev = iTargetRow + 5
End Function

' get the format string for values.
Function GetFormat(iCol As Integer) As String
    ' this assumes inches are in use.
    Select Case iCol
        Case 4 To 5:
            GetFormat = textCells(31, 2).Value & "0" '"0.000"
        Case 12:
            GetFormat = "0.0"
        Case Else:
            GetFormat = textCells(31, 2).Value '"0.00"
    End Select
End Function

Sub FormatReport()
    Static fReentrant As Boolean
    If fReentrant Then Exit Sub
    fReentrant = True
    
    Dim i As Integer
    Dim book As Workbook
    Set book = Excel.ActiveWorkbook
    
    ' set the target and source cells.
    Set orgCells = book.Worksheets("data").Cells
    Set targetCells = book.Worksheets("report").Cells
    Set tempCells = book.Worksheets("grid").Cells
    Set textCells = book.Worksheets("text").Cells
            
    ' no report number, don't do a thing
    If (orgCells(6, 1) = "") Then
        Set orgCells = Nothing
        Set targetCells = Nothing
        Set tempCells = Nothing
        fReentrant = False
        Exit Sub
    End If
    ' already filled, don't do a thing!
    If (targetCells(2, 3) <> "") Then
        Set orgCells = Nothing
        Set targetCells = Nothing
        Set tempCells = Nothing
        fReentrant = False
        Exit Sub
    End If
    
    targetCells.Clear
    tempCells.Clear
    
    ' figure out the number of heads & sections.
    Dim nHeads As Integer, nSections As Integer
    nHeads = CInt(orgCells(10, 1).Value)
    nSections = CInt(orgCells(11, 1).Value)
    fEliminateUnaccaptable = CBool(textCells(30, 2))
           
    ' do the entire header information thing
    CreateHeaderInformation
    CopyHeadsAndSections nHeads, nSections
    
    With targetCells.Range("A29:Q" + CStr(28 + (nHeads * nSections)))
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .BorderAround xlContinuous, xlThick
    End With
    
    targetCells.Range("D18:Q28").Borders(xlInsideVertical).LineStyle = xlContinuous
    targetCells.Range("A18:Q28").BorderAround xlContinuous, xlThick
    
    ' body & cover  & thickness
    CopySectionResults nHeads, nSections, 2, 5, 4, 4
    CopySectionResults nHeads, nSections, 1, 7, 6, 7
    
    CopyResultsToGrid nHeads, nSections, 5, 2, 4, 4   ' body thickness to grid
    CopyResultsToGrid nHeads, nSections, 6, 7, 4, 5 ' cover thickness to grid
    CopyResultsToGrid nHeads, nSections, 7, 12, 7, 6 ' thickness
    
    'Length & Counter
    CopySectionResults nHeads, nSections, 2, 11, 7, 7
    
    CopyResultsToGrid nHeads, nSections, 11, 17, 7, 7 'Length to grid
    CopyResultsToGrid nHeads, nSections, 12, 22, 7, 8 'Counter to grid
    
    ' cover hook
    CopySectionResults nHeads, nSections, 1, 10, 9, 7
    
    CopyResultsToGrid nHeads, nSections, 10, 27, 7, 9 'cover hook to grid
    
    'Body hook
    CopySectionResults nHeads, nSections, 1, 9, 10, 7
    CopyResultsToGrid nHeads, nSections, 9, 32, 7, 10 'Body hook to grid
    
    ' overlap
    CopySectionResults nHeads, nSections, 1, 8, 11, 7
    'overlap to grid
    CopyResultsToGrid nHeads, nSections, 8, 37, 7, 11
    
    ' %overlap
    CopySectionResults nHeads, nSections, 1, 14, 12, 12
    '%overlap to grid
    CopyResultsToGrid nHeads, nSections, 14, 42, 12, 12
    
    ' BHButting
    CopySectionResults nHeads, nSections, 1, 15, 13, 12
    'BHButting to grid
    CopyResultsToGrid nHeads, nSections, 15, 47, 12, 13
    
    ' seam gap
    CopySectionResults nHeads, nSections, 1, 13, 14, 7
    'seam gap to grid
    CopyResultsToGrid nHeads, nSections, 13, 52, 7, 14
    
    ' FreeSpace, tightness, CHButt
    CopySectionResults nHeads, nSections, 3, 16, 15, 4
        
    ' do minimum, maximum & avg
    Dim iRow As Integer
    
    iRow = DoMinMax(nHeads, nSections)
    
    ' avg & std dev
    iRowGraph = AvgStdDev(iRow, nHeads, nSections)
    targetCells.Range("B:P").HorizontalAlignment = xlCenter
    With targetCells.Range("B:P").Font
        .Size = textCells(27, 2).Value ' 11
        .Name = textCells(26, 2).Value  ' Arial
    End With
    
    targetCells.Range("A1:P9").HorizontalAlignment = xlLeft

    With targetCells.Range("C2").Font
        .Name = "Courier New"
        .Size = 14
        .Bold = True
    End With
    With targetCells.Range("C9").Font
        .Name = "Courier New"
        .Size = 14
        .Bold = True
    End With
    
    If textCells(28, 2).Value = True Then
        Application.DisplayAlerts = False
        CreateGraph (nHeads * nSections)
        Application.DisplayAlerts = True
    End If
    
    
    Worksheets("data").Visible = False
    Worksheets("Text").Visible = False
    Worksheets("report").Range("A1:A1").Select
    
    Set orgCells = Nothing
    Set book = Nothing
    fReentrant = False
End Sub


Sub SizeGraph(left As Integer, top As Integer)
    If (ActiveChart Is Nothing Or Not fResizeChart) Then
        Exit Sub
    End If
    ActiveChart.Parent.top = top
    ActiveChart.Parent.left = left
    ActiveChart.Parent.Width = 150
    ActiveChart.Parent.Height = 120
    
    ActiveChart.ChartTitle.Font.Name = textCells(26, 2).Value
    ActiveChart.ChartTitle.Font.Size = textCells(27, 2).Value
End Sub
Sub CreateGraph(nItems As Integer)
    Dim Object As Integer, fOneResizeChart As Boolean
    Dim tCells As Range
    Set tCells = targetCells
            
    Dim sStdMin As String, sStdNom As String, sStdMax As String
    sStdMin = textCells(5, 5).Value
    sStdNom = textCells(6, 5).Value
    sStdMax = textCells(6, 5).Value
    
    'body thickness
    Object = 1
    DrawChart Sheets("Grid").Range("A1:E" + CStr(nItems)), textCells(4, 4).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph 10, ActiveSheet.Rows(iRowGraph).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'cover thickness
    DrawChart Sheets("Grid").Range("F1:J" + CStr(nItems)), textCells(4, 5).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(5).left, ActiveSheet.Rows(iRowGraph).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'seam thickness
    DrawChart Sheets("Grid").Range("K1:O" + CStr(nItems)), textCells(4, 6).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(9).left, ActiveSheet.Rows(iRowGraph).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'seam length
    DrawChart Sheets("Grid").Range("P1:T" + CStr(nItems)), textCells(4, 7).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(13).left, ActiveSheet.Rows(iRowGraph).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'counter
    DrawChart Sheets("Grid").Range("U1:Y" + CStr(nItems)), textCells(4, 8).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph 10, ActiveSheet.Rows(iRowGraph + 11).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    
    'cover hook
    DrawChart Sheets("Grid").Range("Z1:AD" + CStr(nItems)), textCells(4, 9).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(5).left, ActiveSheet.Rows(iRowGraph + 11).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
       
    'body hook
    DrawChart Sheets("Grid").Range("AE1:AI" + CStr(nItems)), textCells(4, 10).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(9).left, ActiveSheet.Rows(iRowGraph + 11).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'overlap
    DrawChart Sheets("Grid").Range("AJ1:AN" + CStr(nItems)), textCells(4, 11).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(13).left, ActiveSheet.Rows(iRowGraph + 11).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'overlap %
    DrawChart Sheets("Grid").Range("AO1:AS" + CStr(nItems)), textCells(4, 12).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph 10, ActiveSheet.Rows(iRowGraph + 22).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
    
    'BHButt
    DrawChart Sheets("Grid").Range("AT1:AX" + CStr(nItems)), textCells(4, 13).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(5).left, ActiveSheet.Rows(iRowGraph + 22).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
   
    'SEAM gap
    DrawChart Sheets("Grid").Range("AY1:BC" + CStr(nItems)), textCells(4, 14).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(9).left, ActiveSheet.Rows(iRowGraph + 22).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
   
    'Free Space
    DrawChart Sheets("Grid").Range("BD1:BH" + CStr(nItems)), textCells(4, 15).Value, sStdMin, sStdNom, sStdMax, nItems
    SizeGraph ActiveSheet.Columns(13).left, ActiveSheet.Rows(iRowGraph + 22).top
    fOneResizeChart = fOneResizeChart Or fResizeChart
   
    ' only if there are truly any charts there...
    
    If (fOneResizeChart) Then
        If textCells(29, 2).Value Then
            tCells(iRowGraph, 1).Select
            ActiveSheet.HPageBreaks.Add Before:=ActiveCell
        End If
    End If
   
    Dim a As Worksheet
On Error Resume Next
    Set a = ActiveSheet
    a.Visible = False
    a.Visible = xlSheetVisible
    a.Activate
    
End Sub
Sub DrawChart(myRange As Range, ByVal strName1 As String, ByVal strName2 As String, ByVal strName3 As String, ByVal strName4 As String, ByVal nItems As Integer)
    Dim i As Integer, fFoundOne As Boolean
    fFoundOne = False
    For i = 1 To nItems
        If (myRange(i, 2).Value <> "") Then
            fFoundOne = True
            Exit For
        End If
    Next
    
    If Not fFoundOne Then
        fResizeChart = False
        Exit Sub
    End If
    
    Charts.Add
    Dim c As Chart
    Set c = ActiveChart
    
    c.Visible = False
    c.ChartType = xlXYScatter
    c.SetSourceData Source:=myRange, PlotBy:=xlColumns
    c.SeriesCollection(1).Name = "=""" + strName1 + """"
    c.SeriesCollection(2).Name = "=""" + strName2 + """"
    c.SeriesCollection(3).Name = "=""" + strName3 + """"
    c.SeriesCollection(4).Name = "=""" + strName4 + """"
    If (c.SeriesCollection.Count = 5) Then
        c.Delete
        fResizeChart = False
        Exit Sub
    End If
        
    With c
        .PlotArea.Interior.ColorIndex = 2
        .HasTitle = True
        .ChartTitle.Text = strName1
'        .ChartTitle.Font.Size = 15
        .Axes(xlCategory, xlPrimary).HasTitle = False
        .Axes(xlValue, xlPrimary).HasTitle = False
    End With
    
    c.HasDataTable = False
    With c.Axes(xlCategory)
        .HasMajorGridlines = False
        .MaximumScale = nItems + 1
        .MajorTickMark = xlTickMarkNone
        .TickLabelPosition = xlTickLabelPositionNone
        .HasMinorGridlines = False
    End With
    With c.Axes(xlValue)
        .HasMajorGridlines = False
        .HasMinorGridlines = False
        If (.MinimumScale < 0) Then
            .MinimumScale = 0
        End If
    End With
    
    With c.SeriesCollection(4)
        .MarkerStyle = xlMarkerStyleNone
        .Border.ColorIndex = 46
        .Border.Weight = xlThin
        .Border.LineStyle = xlContinuous
    End With
    With c.SeriesCollection(3)
        .MarkerStyle = xlMarkerStyleNone
        .Border.ColorIndex = 5
        .Border.Weight = xlThin
        .Border.LineStyle = xlContinuous
    End With
    With c.SeriesCollection(2)
        .MarkerStyle = xlMarkerStyleNone
        .Border.ColorIndex = 46
        .Border.Weight = xlThin
        .Border.LineStyle = xlContinuous
    End With
    c.SeriesCollection(1).MarkerForegroundColorIndex = 4
    
    c.HasLegend = False
    c.Location Where:=xlLocationAsObject, Name:="report"
    ActiveSheet.Shapes(ActiveChart.Parent.Name).ScaleWidth 0.64, msoFalse, msoScaleFromTopLeft
    fResizeChart = True
End Sub



INQUEST-PP=macro
