Attribute VB_Name = "Ex_Menu"
Attribute VB_Base = "0{7730790E-996A-4B6B-9B46-883712CD2E62}{A372D1B5-CF46-4BD3-AC18-C26AD6B5777E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

' ==================|fffd|=|fffd|=|fffd|=====================
' |     |fffd||fffd||fffd||fffd||fffd|:  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |     |fffd||fffd||fffd||fffd|:   06 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2018
' |     e-mail: excelius@mail.ru
' |     |fffd||fffd||fffd|.:   8-909-662-9270
' |     skype:  |fffd||fffd||fffd||fffd||fffd| (Excelius)
' ============================================

Const DEBUG_MODE = False
Const RESTRICTED = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

Dim cRow As Integer

'============================
Private Sub UserForm_Initialize()
'============================
Dim sh As Worksheet
Dim shName As String
'----------------------------
    
    Me.ComboBox1.Clear
    For Each sh In Sheets
        shName = sh.Name
        If InStr(shName, RESTRICTED) <> 1 Then Me.ComboBox1.AddItem (sh.Name)
    Next sh
    
    Me.ComboBox1.Value = ActiveSheet.Name
    Me.ToggleButton1.Value = False
    ToggleButton1_Click

End Sub ' UserForm_Initialize

'============================
Private Sub UserForm_Terminate()
'============================
Dim sh As Worksheet
Dim updStatus As Boolean
'----------------------------

    With Application: updStatus = .ScreenUpdating: .ScreenUpdating = False: End With
    For Each sh In Sheets
        If InStr(sh.Name, RESTRICTED) = 0 Then sh.Visible = True
    Next sh
    Application.ScreenUpdating = updStatus

End Sub ' UserForm_Terminate

'============================
Private Sub Label1_Click()
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|.
'----------------------------
Const URL = "http://timura.ru"  ' [|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|] |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Const TEMP_URL_CELL = "A2"      ' [|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|] |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Dim h As Hyperlink
Dim found As Boolean
Dim scrUpdStatus As Boolean
'----------------------------

    With Application: scrUpdStatus = .ScreenUpdating: .ScreenUpdating = False: End With
    
    For Each h In ActiveSheet.Hyperlinks
        If InStr(h.Name, URL) <> 0 Then found = True
    Next
    
    If Not found Then Set h = ActiveSheet.Hyperlinks.Add(Anchor:=Range(TEMP_URL_CELL), _
                                                         Address:=URL, _
                                                         ScreenTip:="", _
                                                         TextToDisplay:="")

    h.Follow
    
    If Not found Then Range(TEMP_URL_CELL).Clear
    
    Application.ScreenUpdating = scrUpdStatus
    
End Sub ' Label1_Click

'============================
Private Sub Sheet_Navigate(ByVal shName As String)
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'I: shName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd|)
'----------------------------
Dim sh As Worksheet, tgtSh As Worksheet
Dim scrUpdStatus As Boolean
'----------------------------

    With Application: scrUpdStatus = .ScreenUpdating: .ScreenUpdating = False: End With
    
    On Error Resume Next
    Set tgtSh = Sheets(shName)
    
    If tgtSh Is Nothing Then
        MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| """ + shName + """"
        Exit Sub
    End If
    
    tgtSh.Visible = True
    
    For Each sh In Sheets
        If Not sh Is tgtSh Then sh.Visible = False
    Next sh
    
    Application.ScreenUpdating = scrUpdStatus
    
End Sub ' Sheet_Navigate

'============================
Private Sub CommandButton1_Click()
'============================
Dim rw As Variant
Dim rng_name As String
Dim mR As Range
Dim fRow As Integer
Dim fCol As Integer
Dim lRow As Long
Dim lCol As Integer
Dim msg As String
Dim i As Integer, x As Integer
Dim cCol As Integer
Dim blockType As Integer
Dim updStatus As Boolean
'----------------------------
    
    With Application: updStatus = .ScreenUpdating: .ScreenUpdating = False: End With

    For Each rw In Range("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Rows
        If rw.Columns(1).Value = Me.ComboBox1.Value Then
            rng_name = rw.Columns(2).Value
            Exit For
        End If
    Next rw
    
    On Error Resume Next
    Set mR = Range(rng_name)
    If mR Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" + Chr(10) + _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", 0, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Me.ToggleButton1 = False
        ToggleButton1_Click
        Exit Sub
    End If
    
    blockType = IIf(Cells(mR.Row - 1, mR.Column + mR.Columns.Count + 1).Value = "|fffd||fffd||fffd||fffd|", 2, 1)

    fRow = mR.Row + mR.Rows.Count + 1
    fCol = mR.Column
    lRow = Cells(Rows.Count, fCol).End(xlUp).Row
    lCol = mR.Column + mR.Columns.Count - 1
       
    For rw = fRow To lRow
        msg = Cells(rw, fCol).Value
    
        cCol = fCol
        i = 0
        While i < 1 And cCol < lCol
            If Cells(mR.Row - 1, cCol).Value <> "" Then i = InStr(msg, Cells(mR.Row - 1, cCol).Value)
            cCol = cCol + 1
        Wend
        msg = Right(msg, Len(msg) - i + 1)
        For x = 1 To mR.Columns.Count / (3 - blockType) ' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            i = InStr(i + 1, msg, Chr(10))
        Next x
        msg = Left(msg, i - 1)
        
        Cells(rw, fCol).Value = IIf(Me.TextBox1.Value = "", "", Me.TextBox1.Value + Chr(10)) + _
                                    msg + _
                                    IIf(Me.TextBox2.Value = "", "", Chr(10) + Me.TextBox2.Value)
    Next rw
    
    Me.ToggleButton1 = False
    ToggleButton1_Click
    
    Application.ScreenUpdating = updStatus
    
End Sub ' CommandButton1_Click

'============================
Private Sub Shuffle()
'============================
'P: ---
'I: void
'----------------------------
Dim rng_name As String
Dim rw As Variant
Dim fCol As Integer
Dim lCol As Integer
Dim fRow As Integer
Dim lRow As Long
Dim mR() As Variant
Dim indx As Integer
Dim updStatus As Boolean
'----------------------------

    With Application: updStatus = .ScreenUpdating: .ScreenUpdating = False: End With

    For Each rw In Range("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Rows
        If rw.Columns(1).Value = Me.ComboBox1.Value Then
            rng_name = rw.Columns(2).Value
            Exit For
        End If
    Next rw
    
    If rng_name = "" Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" + Chr(10) + _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", 0, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Exit Sub
    End If
    
    fCol = Range(rng_name).Column
    lCol = fCol + Range(rng_name).Columns.Count - 1
    fRow = Range(rng_name).Row + Range(rng_name).Rows.Count + 1
    lRow = Cells(Rows.Count, fCol).End(xlUp).Row
    
    If Not lRow > fRow Then Exit Sub
    
    mR = Range(Cells(fRow, fCol), Cells(lRow, lCol)).Value
    For indx = 1 To UBound(mR)
        Swap_Two mR, indx, Int(Rnd * UBound(mR, 1)) + 1
    Next indx
    Range(Cells(fRow, fCol), Cells(lRow, lCol)).Value = mR
    
    Application.ScreenUpdating = updStatus
    
End Sub ' Shuffle

'============================
Private Sub Swap_Two(ByRef myArr, initPos, swapPos)
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'I: myArr   - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'   initPos - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'   swapPos - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'----------------------------
Dim inArr(1) As Variant
Dim x As Integer
'----------------------------

    If initPos > UBound(myArr, 1) Or swapPos > UBound(myArr, 1) Then Exit Sub
    For x = 1 To UBound(myArr, 2)
        inArr(1) = myArr(swapPos, x)
        myArr(swapPos, x) = myArr(initPos, x)
        myArr(initPos, x) = inArr(1)
    Next x
    
End Sub ' Swap_Two

'============================
Private Sub CommandButton5_Click()
'============================
Dim fCol As Integer
Dim lCol As Integer
Dim fRow As Integer
Dim lRow As Long
Dim rng_name As String
Dim rw As Variant
Dim mR As Range
Dim msg As String
Dim blockType As Integer
Dim myTitles() As String
Dim measSgns() As String
Dim cCol As Integer
Dim i As Integer
Dim myPrice As Double
Dim updStatus As Boolean
'----------------------------
    
    With Application: updStatus = .ScreenUpdating: .ScreenUpdating = False: End With
    
    For Each rw In Range("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Rows
        If rw.Columns(1).Value = Me.ComboBox1.Value Then
            rng_name = rw.Columns(2).Value
            Exit For
        End If
    Next rw
    
    On Error Resume Next
    Set mR = Range(rng_name)
    If mR Is Nothing Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" + Chr(10) + _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", 0, "|fffd||fffd||fffd||fffd||fffd||fffd|"
        Me.ToggleButton1 = False
        ToggleButton1_Click
        Exit Sub
    End If
    
    blockType = IIf(Cells(mR.Row - 1, mR.Column + mR.Columns.Count + 1).Value = "|fffd||fffd||fffd||fffd|", 2, 1)
    If blockType = 2 Then myPrice# = Cells(mR.Row, mR.Column + mR.Columns.Count + 1).Value
    
    fCol = mR.Column
    fRow = mR.Row + mR.Rows.Count + 1
    lCol = fCol + mR.Columns.Count - 1
    lRow = Cells(Rows.Count, fCol).End(xlUp).Row
      
    ReDim myTitles(1 To mR.Columns.Count / (3 - blockType))  ' "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 2, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!
    
    If blockType = 1 Then
        ReDim measSgns(1 To UBound(myTitles))
    Else
        ReDim measSgns(1)
        measSgns(1) = Cells(mR.Row - 3, fCol).Value
    End If
    
    i = 1
    For cCol = fCol To lCol Step (3 - blockType)            ' |fffd||fffd| |fffd||fffd|
        myTitles(i) = Cells(mR.Row - 1, cCol).Value
        If blockType = 1 Then measSgns(i) = Cells(mR.Row - 3, cCol).Value
        i = i + 1
    Next cCol
    
    If lRow > fRow Then Range(Cells(fRow, fCol), Cells(lRow, lCol)).ClearContents
    
    cRow = fRow ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !
    
    If blockType = 1 Then
        CalcCell1 "", mR, myTitles, measSgns
    ElseIf blockType = 2 Then
        CalcCell2 "", mR, myTitles, measSgns, myPrice
    Else
        MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    
    Application.ScreenUpdating = updStatus
    
End Sub ' CommandButton5_Click

'============================
Private Sub CalcCell1(ByVal myVal As String, ByVal myRng As Range, ByRef myTitles() As String, ByRef measSgns() As String)
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'I: myVal    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'   myRng    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'   myTitles - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
'   measSgns - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
'----------------------------
Dim rw As Variant
Dim str1 As String
Dim str2 As String
Dim ownVal As String
'----------------------------
    
    For Each rw In myRng.Rows
        str1$ = rw.Columns(1).Value
        If str1 <> "" Then
            str2$ = rw.Columns(2).Value
            ownVal = myVal + " " + str1 + "__" + str2
        
            If myRng.Columns.Count > 2 Then
                CalcCell1 ownVal, Range(Cells(myRng.Row, myRng.Column + 2), Cells(myRng.Row + myRng.Rows.Count - 1, myRng.Column + myRng.Columns.Count - 1)), myTitles, measSgns
            Else
                CellWrite ownVal, myTitles, measSgns
            End If
        End If
    Next rw
    
End Sub ' CalcCell1

'============================
Private Sub CalcCell2(ByVal myVal As String, ByVal myRng As Range, ByRef myTitles() As String, ByRef measSgns() As String, ByVal myPrice As Double)
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'I: myVal    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'   myRng    - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'   myTitles - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
'   measSgns - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)
'   myPrice  - |fffd||fffd||fffd||fffd|
'----------------------------
Dim rw As Variant
Dim str1 As String
Dim ownVal As String
'----------------------------
    
    For Each rw In myRng.Rows
        str1$ = rw.Columns(1).Value
        If str1 <> "" Then
            ownVal = myVal + " " + str1
            If myRng.Columns.Count > 1 Then
                CalcCell2 ownVal, Range(Cells(myRng.Row, myRng.Column + 1), Cells(myRng.Row + myRng.Rows.Count - 1, myRng.Column + myRng.Columns.Count - 1)), myTitles, measSgns, myPrice
            Else
                CellWrite2 ownVal, myTitles, measSgns, myPrice
            End If
        End If
    Next rw
    
End Sub ' CalcCell2

Private Sub CellWrite(ByVal myVal As String, ByRef myTitles() As String, ByRef measSgns() As String)
    
Dim i As Integer
Dim parseVal() As String
Dim parseMsg() As String
Dim msg As String
Dim mathOpt As Boolean: mathOpt = Cells(1, 2).Value
Dim ownVal As Double: ownVal = IIf(mathOpt, 0, 1)
    
    If Me.TextBox1.Value <> "" Then AddText msg, Me.TextBox1.Value
    
    parseVal = Split(myVal)
    
    For i = 1 To UBound(parseVal)
                           
        If msg <> "" Then AddText msg, Chr(10)
                           
        AddText msg, myTitles(i) + ": "
        
        parseMsg = Split(parseVal(i), "__")
        AddText msg, parseMsg(0)
        If parseMsg(1) = "" Then parseMsg(1) = "0"
        ownVal = IIf(mathOpt, ownVal + parseMsg(1), ownVal * parseMsg(1))
        
        If measSgns(i) <> "" Then AddText msg, " " + measSgns(i)
        
    Next i
    
    If Me.TextBox2.Value <> "" Then AddText msg, Chr(10) + Me.TextBox2.Value
    
    Cells(cRow, 2).Value = msg
    Cells(cRow, 3).Value = ownVal
    Range(Cells(cRow, 2), Cells(cRow, 3)).VerticalAlignment = xlCenter
    Cells(cRow, 2).HorizontalAlignment = xlLeft
    Cells(cRow, 3).HorizontalAlignment = xlCenter
    cRow = cRow + 1
    
End Sub ' CellWrite

Private Sub CellWrite2(ByVal myVal As String, ByRef myTitles() As String, ByRef measSgns() As String, ByVal myPrice As Double)
    
Dim i As Integer
Dim parseVal() As String
Dim parseMsg() As String
Dim msg As String
Dim mathOpt As Boolean: mathOpt = Cells(1, 2).Value
Dim ownVal As Double: ownVal = IIf(mathOpt, 0, 1)
    
    If Me.TextBox1.Value <> "" Then AddText msg, Me.TextBox1.Value
    
    parseVal = Split(myVal)
    
    For i = 1 To UBound(parseVal)
                           
        If msg <> "" Then AddText msg, Chr(10)
                           
        AddText msg, myTitles(i) + ": "
        
        AddText msg, parseVal(i)
        If parseVal(i) = "" Then parseVal(i) = "0"
        ownVal = ownVal * parseVal(i)
        
        If measSgns(1) <> "" Then AddText msg, " " + measSgns(1)
        
    Next i
    
    If Me.TextBox2.Value <> "" Then AddText msg, Chr(10) + Me.TextBox2.Value
    
    Cells(cRow, 2).Value = msg
    Cells(cRow, 3).Value = ownVal * myPrice
    Range(Cells(cRow, 2), Cells(cRow, 3)).VerticalAlignment = xlCenter
    Cells(cRow, 2).HorizontalAlignment = xlLeft
    Cells(cRow, 3).HorizontalAlignment = xlCenter
    cRow = cRow + 1
    
End Sub ' CellWrite2
Private Sub AddText(ByRef msg As String, ByVal tgtText As String): msg = msg + tgtText: End Sub
Private Sub CommandButton2_Click(): Me.TextBox1.Value = "": End Sub
Private Sub CommandButton3_Click(): Me.TextBox2.Value = "": End Sub
Private Sub CommandButton4_Click(): Shuffle: End Sub
Private Sub ComboBox1_Change(): Sheet_Navigate Me.ComboBox1.Value: End Sub
Private Sub ToggleButton1_Click(): Me.Height = IIf(Me.ToggleButton1.Value = True, 285, 140): End Sub
Attribute VB_Name = "Excelius"
Option Explicit
Option Base 1

' ==================|fffd|=|fffd|=|fffd|=====================
' |     |fffd||fffd||fffd||fffd||fffd|:  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |     |fffd||fffd||fffd||fffd|:   03 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2018
' |     e-mail: excelius@mail.ru
' |     |fffd||fffd||fffd|.:   8-909-662-9270
' |     skype:  |fffd||fffd||fffd||fffd||fffd| (Excelius)
' ============================================

'============================
Public Sub Calculate_block1()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|1"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String
Dim i As Long, j As Long, rw As Long: rw = fRow + 1
'----------------------------
   
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            firstStr$ = Cells(i, fCol).Value
            secondStr$ = Cells(j, fCol + 2).Value
            If firstStr <> "" And secondStr <> "" Then
                Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                        title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                        title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + _
                                        IIf(textAft = "", "", Chr(10) + textAft)
                Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                    Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value, _
                                                    Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value)))
                Cells(rw, fCol).HorizontalAlignment = xlLeft
                Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                rw = rw + 1
            End If
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block1

'============================
Public Sub Shuffle_Block1()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|1"

Dim fCol As Integer: fCol = Range(rng_name).Column
Dim lCol As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim fRow As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count + 1
Dim lRow As Long: lRow = Cells(Rows.Count, fCol).End(xlUp).Row
Dim mR() As Variant
Dim indx As Integer
'----------------------------
    
    If Not lRow > fRow Then Exit Sub
    mR = Range(Cells(fRow, fCol), Cells(lRow, lCol)).Value
    For indx = 1 To UBound(mR)
        Swap_Two mR, indx, Int(Rnd * UBound(mR, 1)) + 1
    Next indx
    Range(Cells(fRow, fCol), Cells(lRow, lCol)).Value = mR
    
End Sub ' Shuffle_Block1

'============================
Private Sub Swap_Two(ByRef myArr, initPos, swapPos)
'============================
'P: |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'I: myArr   - |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'   initPos - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'   swapPos - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'----------------------------
Dim inArr(1) As Variant
Dim x As Integer
'----------------------------

    If initPos > UBound(myArr, 1) Or swapPos > UBound(myArr, 1) Then Exit Sub
    For x = 1 To UBound(myArr, 2)
        inArr(1) = myArr(swapPos, x)
        myArr(swapPos, x) = myArr(initPos, x)
        myArr(initPos, x) = inArr(1)
    Next x
    
End Sub ' Swap_Two


'============================
Public Sub Calculate_block2()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|2"

Dim fRow    As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol    As Integer: fCol = Range(rng_name).Column
Dim lCol    As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1  As String: title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2  As String: title2 = Cells(Range(rng_name).Row - 1, fCol + 1).Value
Dim title3  As String: title3 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim i As Long, j As Long, z As Long, rw As Long: rw = fRow + 1
Dim myPrice As Double: myPrice = Range("_b2PRICE").Value
Dim measPts As String: measPts = Cells(Range(rng_name).Row - 3, fCol).Value
Dim textBef As String: textBef$ = Cells(1, lCol + 2).Value
Dim textAft As String: textAft$ = Cells(1, lCol + 4).Value
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                If Cells(i, fCol).Value <> "" And Cells(j, fCol + 1).Value <> "" And Cells(z, fCol + 2).Value <> "" Then
                    Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                            title1 + ":" + Str(Cells(i, fCol).Value) + IIf(measPts = "", "", " " + measPts) + Chr(10) + _
                                            title2 + ":" + Str(Cells(j, fCol + 1).Value) + IIf(measPts = "", "", " " + measPts) + Chr(10) + _
                                            title3 + ":" + Str(Cells(z, fCol + 2).Value) + IIf(measPts = "", "", " " + measPts) + _
                                            IIf(textAft = "", "", Chr(10) + textAft)
                    Cells(rw, fCol + 1).Value = Trim(Str(Cells(i, fCol).Value * Cells(j, fCol + 1).Value * Cells(z, fCol + 2).Value * myPrice))
                    Cells(rw, fCol).HorizontalAlignment = xlLeft
                    Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                    Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                    rw = rw + 1
                End If
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block2

'============================
Public Sub Calculate_block3()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|3"

Dim fRow    As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol    As Integer: fCol = Range(rng_name).Column
Dim lCol    As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1 As String: title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2  As String: title2 = Cells(Range(rng_name).Row - 1, fCol + 1).Value
Dim i As Long, j As Long, rw As Long: rw = fRow + 1
Dim myPrice As Double: myPrice = Range("_b2PRICE").Value
Dim measPts As String: measPts = Cells(Range(rng_name).Row - 3, fCol).Value
Dim textBef As String: textBef$ = Cells(1, lCol + 2).Value
Dim textAft As String: textAft$ = Cells(1, lCol + 4).Value
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            If Cells(i, fCol).Value <> "" And Cells(j, fCol + 1).Value <> "" Then
                Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                        title1 + ":" + Str(Cells(i, fCol).Value) + IIf(measPts = "", "", " " + measPts) + Chr(10) + _
                                        title2 + ":" + Str(Cells(j, fCol + 1).Value) + IIf(measPts = "", "", " " + measPts) + _
                                        IIf(textAft = "", "", Chr(10) + textAft)
                Cells(rw, fCol + 1).Value = Trim(Str(Cells(i, fCol).Value * Cells(j, fCol + 1).Value * myPrice))
                Cells(rw, fCol).HorizontalAlignment = xlLeft
                Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                rw = rw + 1
            End If
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block3

Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|()
Attribute |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|.VB_ProcData.VB_Invoke_Func = "j\n14"
    Ex_Menu.Show 0
End Sub


'============================
Public Sub Calculate_block4()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|4"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String
Dim i As Long, j As Long, z As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                firstStr$ = Cells(i, fCol).Value
                secondStr$ = Cells(j, fCol + 2).Value
                thirdStr$ = Cells(z, fCol + 4).Value
                If firstStr <> "" And secondStr <> "" And thirdStr <> "" Then
                    Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                            title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                            title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                            title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + _
                                            IIf(textAft = "", "", Chr(10) + textAft)
                    Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                        Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value, _
                                                        Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value)))
                    Cells(rw, fCol).HorizontalAlignment = xlLeft
                    Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                    Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                    rw = rw + 1
                End If
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block4

'============================
Public Sub Calculate_block14()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|14"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim title4      As String:  title4 = Cells(Range(rng_name).Row - 1, fCol + 6).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim measPts4    As String:  measPts4 = Cells(Range(rng_name).Row - 3, fCol + 6).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String, fourthStr As String
Dim i As Long, j As Long, z As Long, e As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                For e = Range(rng_name).Row To fRow - 1
                    firstStr$ = Cells(i, fCol).Value
                    secondStr$ = Cells(j, fCol + 2).Value
                    thirdStr$ = Cells(z, fCol + 4).Value
                    fourthStr$ = Cells(e, fCol + 6).Value
                    If firstStr <> "" And secondStr <> "" And thirdStr <> "" And fourthStr <> "" Then
                        Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                                title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                                title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                                title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + Chr(10) + _
                                                title4 + ": " + fourthStr + IIf(measPts4 = "", "", " " + measPts4) + _
                                                IIf(textAft = "", "", Chr(10) + textAft)
                        Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                    Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value + Cells(e, fCol + 7).Value, _
                                                    Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value * Cells(e, fCol + 7).Value)))
                        Cells(rw, fCol).HorizontalAlignment = xlLeft
                        Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                        Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                        rw = rw + 1
                    End If
                Next e
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block14

'============================
Public Sub Calculate_block15()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|15"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim title4      As String:  title4 = Cells(Range(rng_name).Row - 1, fCol + 6).Value
Dim title5      As String:  title5 = Cells(Range(rng_name).Row - 1, fCol + 8).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim measPts4    As String:  measPts4 = Cells(Range(rng_name).Row - 3, fCol + 6).Value
Dim measPts5    As String:  measPts5 = Cells(Range(rng_name).Row - 3, fCol + 8).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String, fourthStr As String, fifthStr As String
Dim i As Long, j As Long, z As Long, e As Long, r As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                For e = Range(rng_name).Row To fRow - 1
                    For r = Range(rng_name).Row To fRow - 1
                        firstStr$ = Cells(i, fCol).Value
                        secondStr$ = Cells(j, fCol + 2).Value
                        thirdStr$ = Cells(z, fCol + 4).Value
                        fourthStr$ = Cells(e, fCol + 6).Value
                        fifthStr$ = Cells(r, fCol + 8).Value
                        If firstStr <> "" And secondStr <> "" And thirdStr <> "" And fourthStr <> "" And fifthStr <> "" Then
                            Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                                    title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                                    title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                                    title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + Chr(10) + _
                                                    title4 + ": " + fourthStr + IIf(measPts4 = "", "", " " + measPts4) + Chr(10) + _
                                                    title5 + ": " + fifthStr + IIf(measPts5 = "", "", " " + measPts5) + _
                                                    IIf(textAft = "", "", Chr(10) + textAft)
                            Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                        Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value + Cells(e, fCol + 7).Value + Cells(r, fCol + 9).Value, _
                                                        Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value * Cells(e, fCol + 7).Value * Cells(r, fCol + 9).Value)))
                            Cells(rw, fCol).HorizontalAlignment = xlLeft
                            Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                            Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                            rw = rw + 1
                        End If
                    Next r
                Next e
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block15

'============================
Public Sub Calculate_block16()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|16"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim title4      As String:  title4 = Cells(Range(rng_name).Row - 1, fCol + 6).Value
Dim title5      As String:  title5 = Cells(Range(rng_name).Row - 1, fCol + 8).Value
Dim title6      As String:  title6 = Cells(Range(rng_name).Row - 1, fCol + 10).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim measPts4    As String:  measPts4 = Cells(Range(rng_name).Row - 3, fCol + 6).Value
Dim measPts5    As String:  measPts5 = Cells(Range(rng_name).Row - 3, fCol + 8).Value
Dim measPts6    As String:  measPts6 = Cells(Range(rng_name).Row - 3, fCol + 10).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String, fourthStr As String, fifthStr As String, sixthStr As String
Dim i As Long, j As Long, z As Long, e As Long, r As Long, t As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                For e = Range(rng_name).Row To fRow - 1
                    For r = Range(rng_name).Row To fRow - 1
                        For t = Range(rng_name).Row To fRow - 1
                            firstStr$ = Cells(i, fCol).Value
                            secondStr$ = Cells(j, fCol + 2).Value
                            thirdStr$ = Cells(z, fCol + 4).Value
                            fourthStr$ = Cells(e, fCol + 6).Value
                            fifthStr$ = Cells(r, fCol + 8).Value
                            sixthStr$ = Cells(t, fCol + 10).Value
                            If firstStr <> "" And secondStr <> "" And thirdStr <> "" And fourthStr <> "" And fifthStr <> "" And sixthStr <> "" Then
                                Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                                        title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                                        title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                                        title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + Chr(10) + _
                                                        title4 + ": " + fourthStr + IIf(measPts4 = "", "", " " + measPts4) + Chr(10) + _
                                                        title5 + ": " + fifthStr + IIf(measPts5 = "", "", " " + measPts5) + Chr(10) + _
                                                        title6 + ": " + sixthStr + IIf(measPts6 = "", "", " " + measPts6) + _
                                                        IIf(textAft = "", "", Chr(10) + textAft)
                                Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                            Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value + Cells(e, fCol + 7).Value + Cells(r, fCol + 9).Value + Cells(t, fCol + 11).Value, _
                                                            Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value * Cells(e, fCol + 7).Value * Cells(r, fCol + 9).Value * Cells(t, fCol + 11).Value)))
                                Cells(rw, fCol).HorizontalAlignment = xlLeft
                                Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                                Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                                rw = rw + 1
                            End If
                        Next t
                    Next r
                Next e
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block16

'============================
Public Sub Calculate_block17()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|17"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim title4      As String:  title4 = Cells(Range(rng_name).Row - 1, fCol + 6).Value
Dim title5      As String:  title5 = Cells(Range(rng_name).Row - 1, fCol + 8).Value
Dim title6      As String:  title6 = Cells(Range(rng_name).Row - 1, fCol + 10).Value
Dim title7      As String:  title7 = Cells(Range(rng_name).Row - 1, fCol + 12).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim measPts4    As String:  measPts4 = Cells(Range(rng_name).Row - 3, fCol + 6).Value
Dim measPts5    As String:  measPts5 = Cells(Range(rng_name).Row - 3, fCol + 8).Value
Dim measPts6    As String:  measPts6 = Cells(Range(rng_name).Row - 3, fCol + 10).Value
Dim measPts7    As String:  measPts7 = Cells(Range(rng_name).Row - 3, fCol + 12).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String, fourthStr As String, fifthStr As String, sixthStr As String, seventhStr As String
Dim i As Long, j As Long, z As Long, e As Long, r As Long, t As Long, y As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                For e = Range(rng_name).Row To fRow - 1
                    For r = Range(rng_name).Row To fRow - 1
                        For t = Range(rng_name).Row To fRow - 1
                            For y = Range(rng_name).Row To fRow - 1
                                firstStr$ = Cells(i, fCol).Value
                                secondStr$ = Cells(j, fCol + 2).Value
                                thirdStr$ = Cells(z, fCol + 4).Value
                                fourthStr$ = Cells(e, fCol + 6).Value
                                fifthStr$ = Cells(r, fCol + 8).Value
                                sixthStr$ = Cells(t, fCol + 10).Value
                                seventhStr$ = Cells(y, fCol + 12).Value
                                If firstStr <> "" And secondStr <> "" And thirdStr <> "" And fourthStr <> "" And fifthStr <> "" And sixthStr <> "" And seventhStr <> "" Then
                                    Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                                            title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                                            title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                                            title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + Chr(10) + _
                                                            title4 + ": " + fourthStr + IIf(measPts4 = "", "", " " + measPts4) + Chr(10) + _
                                                            title5 + ": " + fifthStr + IIf(measPts5 = "", "", " " + measPts5) + Chr(10) + _
                                                            title6 + ": " + sixthStr + IIf(measPts6 = "", "", " " + measPts6) + Chr(10) + _
                                                            title7 + ": " + seventhStr + IIf(measPts7 = "", "", " " + measPts7) + _
                                                            IIf(textAft = "", "", Chr(10) + textAft)
                                    Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                                Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value + Cells(e, fCol + 7).Value + Cells(r, fCol + 9).Value + Cells(t, fCol + 11).Value + Cells(y, fCol + 13).Value, _
                                                                Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value * Cells(e, fCol + 7).Value * Cells(r, fCol + 9).Value * Cells(t, fCol + 11).Value * Cells(y, fCol + 13).Value)))
                                    Cells(rw, fCol).HorizontalAlignment = xlLeft
                                    Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                                    Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                                    rw = rw + 1
                                End If
                            Next y
                        Next t
                    Next r
                Next e
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block17

'============================
Public Sub Calculate_block18()
'============================
'P: ---
'I: void
'----------------------------
Const rng_name = "|fffd||fffd||fffd||fffd|18"

Dim fRow        As Integer: fRow = Range(rng_name).Row + Range(rng_name).Rows.Count
Dim fCol        As Integer: fCol = Range(rng_name).Column
Dim lCol        As Integer: lCol = fCol + Range(rng_name).Columns.Count - 1
Dim title1      As String:  title1 = Cells(Range(rng_name).Row - 1, fCol).Value
Dim title2      As String:  title2 = Cells(Range(rng_name).Row - 1, fCol + 2).Value
Dim title3      As String:  title3 = Cells(Range(rng_name).Row - 1, fCol + 4).Value
Dim title4      As String:  title4 = Cells(Range(rng_name).Row - 1, fCol + 6).Value
Dim title5      As String:  title5 = Cells(Range(rng_name).Row - 1, fCol + 8).Value
Dim title6      As String:  title6 = Cells(Range(rng_name).Row - 1, fCol + 10).Value
Dim title7      As String:  title7 = Cells(Range(rng_name).Row - 1, fCol + 12).Value
Dim title8      As String:  title8 = Cells(Range(rng_name).Row - 1, fCol + 14).Value
Dim mathOpt     As Boolean: mathOpt = Cells(1, fCol).Value
Dim measPts1    As String:  measPts1 = Cells(Range(rng_name).Row - 3, fCol).Value
Dim measPts2    As String:  measPts2 = Cells(Range(rng_name).Row - 3, fCol + 2).Value
Dim measPts3    As String:  measPts3 = Cells(Range(rng_name).Row - 3, fCol + 4).Value
Dim measPts4    As String:  measPts4 = Cells(Range(rng_name).Row - 3, fCol + 6).Value
Dim measPts5    As String:  measPts5 = Cells(Range(rng_name).Row - 3, fCol + 8).Value
Dim measPts6    As String:  measPts6 = Cells(Range(rng_name).Row - 3, fCol + 10).Value
Dim measPts7    As String:  measPts7 = Cells(Range(rng_name).Row - 3, fCol + 12).Value
Dim measPts8    As String:  measPts8 = Cells(Range(rng_name).Row - 3, fCol + 14).Value
Dim textBef     As String:  textBef$ = Cells(1, lCol + 2).Value
Dim textAft     As String:  textAft$ = Cells(1, lCol + 4).Value
Dim firstStr    As String, secondStr As String, thirdStr As String, fourthStr As String, fifthStr As String, sixthStr As String, seventhStr As String, eighthStr As String
Dim i As Long, j As Long, z As Long, e As Long, r As Long, t As Long, y As Long, u As Long, rw As Long: rw = fRow + 1
'----------------------------
    
    Range(Cells(fRow, fCol), Cells(Rows.Count, lCol)).ClearContents
    For i = Range(rng_name).Row To fRow - 1
        For j = Range(rng_name).Row To fRow - 1
            For z = Range(rng_name).Row To fRow - 1
                For e = Range(rng_name).Row To fRow - 1
                    For r = Range(rng_name).Row To fRow - 1
                        For t = Range(rng_name).Row To fRow - 1
                            For y = Range(rng_name).Row To fRow - 1
                                For u = Range(rng_name).Row To fRow - 1
                                    firstStr$ = Cells(i, fCol).Value
                                    secondStr$ = Cells(j, fCol + 2).Value
                                    thirdStr$ = Cells(z, fCol + 4).Value
                                    fourthStr$ = Cells(e, fCol + 6).Value
                                    fifthStr$ = Cells(r, fCol + 8).Value
                                    sixthStr$ = Cells(t, fCol + 10).Value
                                    seventhStr$ = Cells(y, fCol + 12).Value
                                    eighthStr$ = Cells(u, fCol + 14).Value
                                    If firstStr <> "" And secondStr <> "" And thirdStr <> "" And fourthStr <> "" And fifthStr <> "" And sixthStr <> "" And seventhStr <> "" And eighthStr <> "" Then
                                        Cells(rw, fCol).Value = IIf(textBef = "", "", textBef + Chr(10)) + _
                                                                title1 + ": " + firstStr + IIf(measPts1 = "", "", " " + measPts1) + Chr(10) + _
                                                                title2 + ": " + secondStr + IIf(measPts2 = "", "", " " + measPts2) + Chr(10) + _
                                                                title3 + ": " + thirdStr + IIf(measPts3 = "", "", " " + measPts3) + Chr(10) + _
                                                                title4 + ": " + fourthStr + IIf(measPts4 = "", "", " " + measPts4) + Chr(10) + _
                                                                title5 + ": " + fifthStr + IIf(measPts5 = "", "", " " + measPts5) + Chr(10) + _
                                                                title6 + ": " + sixthStr + IIf(measPts6 = "", "", " " + measPts6) + Chr(10) + _
                                                                title7 + ": " + seventhStr + IIf(measPts7 = "", "", " " + measPts7) + Chr(10) + _
                                                                title8 + ": " + eighthStr + IIf(measPts8 = "", "", " " + measPts8) + _
                                                                IIf(textAft = "", "", Chr(10) + textAft)
                                        Cells(rw, fCol + 1).Value = Trim(Str(IIf(mathOpt, _
                                                                    Cells(i, fCol + 1).Value + Cells(j, fCol + 3).Value + Cells(z, fCol + 5).Value + Cells(e, fCol + 7).Value + Cells(r, fCol + 9).Value + Cells(t, fCol + 11).Value + Cells(y, fCol + 13).Value + Cells(u, fCol + 15).Value, _
                                                                    Cells(i, fCol + 1).Value * Cells(j, fCol + 3).Value * Cells(z, fCol + 5).Value * Cells(e, fCol + 7).Value * Cells(r, fCol + 9).Value * Cells(t, fCol + 11).Value * Cells(y, fCol + 13).Value * Cells(u, fCol + 15).Value)))
                                        Cells(rw, fCol).HorizontalAlignment = xlLeft
                                        Cells(rw, fCol + 1).HorizontalAlignment = xlCenter
                                        Range(Cells(rw, fCol), Cells(rw, fCol + 1)).VerticalAlignment = xlCenter
                                        rw = rw + 1
                                    End If
                                Next u
                            Next y
                        Next t
                    Next r
                Next e
            Next z
        Next j
    Next i
    
    With Range("_rwHeights")
        If .Value = "" Then
        ElseIf .Value = 0 Then
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).AutoFit
        Else
            Rows(Trim(Str(fRow)) + ":" + Trim(Str(Rows.Count))).RowHeight = .Value
        End If
    End With
    
End Sub ' Calculate_block18

' |fffd||fffd||fffd||fffd| |fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.

Sub |fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|()
    Ex_Menu.Show 0
    Ex_Menu.ComboBox1.ListIndex = 0
End Sub
Attribute VB_Name = "Module1"

Attribute VB_Name = "|fffd||fffd||fffd||fffd|10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_open()
    Ex_Menu.Show 0
End Sub


INQUEST-PP=macro
