Attribute VB_Name = "Arkusz35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ReadList"
Sub Tekla_translate()

'open file
    Dim fd As Office.FileDialog
    Dim txtfilename As String
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

   With fd

      .AllowMultiSelect = False

      ' Set the title of the dialog box.
      .Title = "Please select the file."
      ' Set default folder
      'fd.InitialFileName = "\\10.3.11.114\Tekla"
      ' Clear out the current filters, and add our own.
      .Filters.Clear
      '.Filters.Add "Excel 2003", "*.xls"
      .Filters.Add ".csv Tekla reports", "*.csv"

      ' Show the dialog box. If the .Show method returns True, the
      ' user picked at least one file. If the .Show method returns
      ' False, the user clicked Cancel.
      If .Show = True Then
        txtfilename = .SelectedItems(1) 'replace txtFileName with your textbox

      End If
   End With

If txtfilename = "" Then
    MsgBox ("Please select .csv file")
    interrupted = True
    Exit Sub
End If

If Right(txtfilename, 3) <> "csv" Then
    MsgBox ("Please select .csv file")
    interrupted = True
Exit Sub
End If

Application.ScreenUpdating = False
'Gather material list size from Tekla


Dim tk As Workbook
Dim w As Worksheet
Set w = ActiveWorkbook.Sheets(1)
Dim t As Worksheet
Workbooks.OpenText Filename:=txtfilename, local:=True, DataType:=xlDelimited, Semicolon:=True
Set t = ActiveWorkbook.Sheets(1)
Set tk = ActiveWorkbook
Dim ws As Worksheet
Dim x, y As Integer
x = 4
y = 0
Do Until IsEmpty(t.Cells(x, 1)) = True
    y = y + 1
    x = x + 1
Loop



'clear table
w.Range(w.Cells(9, 1), w.Cells(w.Rows.Count, 19)).Clear

'copy table to new sheet
w.Activate
Set ws = ActiveWorkbook.Sheets.Add(after:=ActiveWorkbook.Sheets(ActiveWorkbook.Sheets.Count))
t.Range(t.Cells(4, 1), t.Cells(3 + y, 16)).Copy ws.Range("A1")
tk.Close

Dim material As String
Dim weightsum As Double
Dim areasum As Double
Dim assqty As Integer
weightsum = 0
areasum = 0
assqty = 0
For Z = 1 To y
    r = 8 + Z
    If InStr(ws.Cells(Z, 1), "A") <> 0 Then
        'Assembly
        'Assembly position
        w.Cells(r, 3) = Trim(ws.Cells(Z, 2))
        'qty
        w.Cells(r, 7) = ws.Cells(Z, 3)
        'main part profile
        w.Cells(r, 8) = Trim(ws.Cells(Z, 4))
        'height
        'w.Cells(r, 9) = ws.Cells(Z, 5)
        'width
        'w.Cells(r, 10) = ws.Cells(Z, 6)
        'length
        'w.Cells(r, 13) = ws.Cells(Z, 7)
        'main part material
        w.Cells(r, 11) = Trim(ws.Cells(Z, 8))
        'weight
        w.Cells(r, 14) = Replace(Trim(ws.Cells(Z, 9)), ".", ",")
        w.Cells(r, 14).NumberFormat = "0.0"
        w.Cells(r, 14).Value = CDec(w.Cells(r, 14).Value)
        'weight total
        w.Cells(r, 16) = Replace(Trim(ws.Cells(Z, 10)), ".", ",")
        w.Cells(r, 16).NumberFormat = "0.0"
        w.Cells(r, 16).Value = CDec(w.Cells(r, 16).Value)
        'area
        'w.Cells(r, 16) = Replace(Trim(ws.Cells(Z, 11)), ".", ",")
        'w.Cells(r, 16).NumberFormat = "0.0"
        'w.Cells(r, 16).Value = CDec(w.Cells(r, 16).Value)
        'area total
        'w.Cells(r, 17) = Replace(Trim(ws.Cells(Z, 12)), ".", ",")
        'w.Cells(r, 17).NumberFormat = "0.0"
        'w.Cells(r, 17).Value = CDec(w.Cells(r, 17).Value)
        'drawing number
        'w.Cells(r, 18) = Trim(ws.Cells(Z, 13))
        'name
        w.Cells(r, 5) = Trim(ws.Cells(Z, 14))
        assqty = assqty + w.Cells(r, 7)
        weightsum = weightsum + w.Cells(r, 16)
        'areasum = areasum + w.Cells(r, 17)
    Else
        'Part
        'Part position
        w.Cells(r, 5) = Trim(ws.Cells(Z, 2))
        'qty
        w.Cells(r, 7) = ws.Cells(Z, 3)
        'Name
        'w.Cells(r, 6) = Trim(ws.Cells(Z, 4))
        'profile
        w.Cells(r, 8) = Trim(ws.Cells(Z, 5))
        'Comment
        w.Cells(r, 18) = Trim(ws.Cells(Z, 6))
        'height
        'w.Cells(r, 9) = ws.Cells(Z, 7)
        'width
        'w.Cells(r, 10) = ws.Cells(Z, 8)
        'length
        w.Cells(r, 13) = ws.Cells(Z, 9)
        'material
        w.Cells(r, 11) = Trim(ws.Cells(Z, 10))
        'weight
        w.Cells(r, 14) = Replace(Trim(ws.Cells(Z, 11)), ".", ",")
        w.Cells(r, 14).NumberFormat = "0.0"
        w.Cells(r, 14).Value = CDec(w.Cells(r, 14).Value)
        'weight total
        w.Cells(r, 16) = Replace(Trim(ws.Cells(Z, 12)), ".", ",")
        w.Cells(r, 16).NumberFormat = "0.0"
        w.Cells(r, 16).Value = CDec(w.Cells(r, 16).Value)
        'area
        'w.Cells(r, 16) = Replace(Trim(ws.Cells(Z, 13)), ".", ",")
        'w.Cells(r, 16).NumberFormat = "0.0"
        'w.Cells(r, 16).Value = CDec(w.Cells(r, 16).Value)
        'area total
        'w.Cells(r, 17) = Replace(Trim(ws.Cells(Z, 14)), ".", ",")
        'w.Cells(r, 17).NumberFormat = "0.0"
        'w.Cells(r, 17).Value = CDec(w.Cells(r, 17).Value)
        'drawing number
        'w.Cells(r, 18) = Trim(ws.Cells(Z, 15))
    End If
    

    'merging
    w.Range(w.Cells(Z + 8, 5), w.Cells(Z + 8, 6)).Merge
    w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 4)).Merge
    w.Range(w.Cells(Z + 8, 8), w.Cells(Z + 8, 10)).Merge
    w.Range(w.Cells(Z + 8, 11), w.Cells(Z + 8, 12)).Merge
    w.Range(w.Cells(Z + 8, 14), w.Cells(Z + 8, 15)).Merge
    w.Range(w.Cells(Z + 8, 16), w.Cells(Z + 8, 17)).Merge
    w.Range(w.Cells(Z + 8, 18), w.Cells(Z + 8, 19)).Merge

'formatting
w.Rows(Z + 8).RowHeight = 17
If InStr(ws.Cells(Z, 1), "A") <> 0 Then
    'assembly
    With w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 19))
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideVertical).Weight = 1
        .WrapText = False
        .ShrinkToFit = True
        .Font.Bold = True
    End With
    w.Range(w.Cells(Z + 8, 4), w.Cells(Z + 8, 19)).HorizontalAlignment = xlCenter
    w.Cells(Z + 8, 3).HorizontalAlignment = xlCenter
    w.Cells(Z + 8, 3).Borders(xlEdgeLeft).Weight = 2
    w.Cells(Z + 8, 19).Borders(xlEdgeRight).Weight = 2
    
    w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 19)).Interior.Color = RGB(222, 222, 222)

Else
    'Part
    With w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 19))
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlContinous
        .WrapText = False
        .ShrinkToFit = True
        .Font.Bold = False
        .Borders(xlInsideVertical).Weight = 1
    End With
    w.Range(w.Cells(Z + 8, 4), w.Cells(Z + 8, 19)).HorizontalAlignment = xlCenter
    'w.Cells(Z + 8, 6).HorizontalAlignment = xlLeft
    w.Cells(Z + 8, 3).Borders(xlEdgeLeft).Weight = 2
    w.Cells(Z + 8, 19).Borders(xlEdgeRight).Weight = 2

If InStr(ws.Cells(Z, 1), "A") <> 0 Then
    With w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 19))
        .Borders(xlEdgeTop).LineStyle = xlContinous
        .Borders(xlEdgeTop).Weight = 1
    End With
End If

If InStr(ws.Cells(Z, 1), "A") <> 0 Then
    With w.Range(w.Cells(Z + 8, 3), w.Cells(Z + 8, 19))
        .Borders(xlEdgeBottom).LineStyle = xlContinous
        .Borders(xlEdgeBottom).Weight = 2
    End With
End If

End If

If Z Mod 42 = 0 Then
    w.Range(w.Cells(Z + 7 - v, 3), w.Cells(Z + 7 - v, 19)).Borders(xlEdgeBottom).LineStyle = xlContinous
    w.Range(w.Cells(Z + 7 - v, 3), w.Cells(Z + 7 - v, 19)).Borders(xlEdgeBottom).Weight = 2
    v = v + 1
End If

Next Z

    With w.Range(w.Cells(r + 1, 3), w.Cells(r + 1, 19))
        .Borders(xlEdgeTop).LineStyle = xlNone
        .Borders(xlEdgeBottom).LineStyle = xlNone
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlNone
        .Borders(xlInsideVertical).LineStyle = xlContinous
        .WrapText = False
        .ShrinkToFit = True
        .Font.Bold = False
        .Borders(xlInsideVertical).Weight = 1
    End With
    w.Range(w.Cells(r + 1, 3), w.Cells(r + 1, 19)).HorizontalAlignment = xlCenter

'assembly quantity
w.Cells(r + 1, 3) = "Total assembly quantity:"
w.Range(w.Cells(r + 1, 3), w.Cells(r + 1, 6)).Merge
w.Cells(r + 1, 3).HorizontalAlignment = xlRight
w.Cells(r + 1, 7) = assqty
w.Cells(r + 1, 7).Font.Bold = True

'total weight
w.Cells(r + 1, 8) = "Total weight:"
w.Range(w.Cells(r + 1, 8), w.Cells(r + 1, 15)).Merge
w.Cells(r + 1, 8).HorizontalAlignment = xlRight
w.Cells(r + 1, 16) = weightsum
w.Cells(r + 1, 16).Font.Bold = True
w.Range(w.Cells(r + 1, 16), w.Cells(r + 1, 17)).Merge
w.Range(w.Cells(r + 1, 18), w.Cells(r + 1, 19)).Merge
w.Range(w.Cells(r + 1, 3), w.Cells(r + 1, 19)).Interior.Color = RGB(222, 222, 222)

With w.Range(w.Cells(r + 1, 3), w.Cells(r + 1, 19))
    .Borders(xlEdgeBottom).LineStyle = xlContinous
    .Borders(xlEdgeBottom).Weight = 2
    .Borders(xlEdgeTop).LineStyle = xlContinous
    .Borders(xlEdgeTop).Weight = 2
    .Borders(xlEdgeLeft).LineStyle = xlContinous
    .Borders(xlEdgeLeft).Weight = 2
    .Borders(xlEdgeRight).LineStyle = xlContinous
    .Borders(xlEdgeRight).Weight = 2
End With

Application.DisplayAlerts = False
ws.Delete
Application.DisplayAlerts = True
Application.ScreenUpdating = True

'Set print area
w.PageSetup.PrintArea = w.Range(w.Cells(1, 3), w.Cells(r + 1, 19)).Address
'set date of creation
w.Range("R3") = Date

w.Activate

End Sub

Attribute VB_Name = "Revision"
Public interrupted As Boolean
Sub Revision()
interrupted = False
'define sheets
Dim w As Worksheet
Dim wold As Worksheet
Set w = ActiveWorkbook.Sheets(1)

'Revision mark
Dim revmark As String
revmark = InputBox("Please enter revision mark")
If revmark = "" Then
    MsgBox ("Please provide revision mark")
    Exit Sub
End If


'Get old revision table size
Dim x As Integer
x = 0

Do Until IsEmpty(w.Range("G9").Offset(x)) = True
    x = x + 1
Loop

w.Copy after:=ActiveWorkbook.Sheets(ActiveWorkbook.Sheets.Count)
Set wold = ActiveSheet
Dim revsheet As String
revsheet = w.Range("R4")
If w.Name = "Rev. " + revsheet + "(" + Str(ActiveWorkbook.Sheets.Count) + ")" Then
    wold.Name = "Rev. " + revsheet + "(" + Str(ActiveWorkbook.Sheets.Count + 1) + ")"
Else
    wold.Name = "Rev. " + revsheet + "(" + Str(ActiveWorkbook.Sheets.Count) + ")"
End If

Call ReadList.Tekla_translate

If interrupted = True Then
    Application.DisplayAlerts = False
    wold.Delete
    Application.DisplayAlerts = True
    Exit Sub
End If

'Get new revision table size
Dim y As Integer
y = 0

Do Until IsEmpty(w.Range("G9").Offset(y)) = True
    y = y + 1
Loop

'get number of assemblies and parts
Dim ass_no_new As Integer
Dim ass_no_old As Integer
Dim part_no_new As Integer
Dim part_no_old As Integer
ass_no_new = 0
ass_no_old = 0
part_no_new = 0
part_no_old = 0

For a = 1 To y - 1
    If IsEmpty(w.Range("C9").Offset(a - 1)) = False Then
        ass_no_new = ass_no_new + 1
    End If
Next a

For a = 1 To x - 1
    If IsEmpty(wold.Range("C9").Offset(a - 1)) = False Then
        ass_no_old = ass_no_old + 1
    End If
Next a

Dim c As Integer

'loop for new part
c = 0

Dim part_no_new_cand As Integer

For b = 1 To ass_no_new
    part_no_new_cand = 0
    c = c + 1
        Do Until IsEmpty(w.Range("C9").Offset(c)) = False
            c = c + 1
            part_no_new_cand = part_no_new_cand + 1
        Loop
    If part_no_new_cand > part_no_new Then
        part_no_new = part_no_new_cand
    End If

Next b

'loop for old part
c = 0

Dim part_no_old_cand As Integer

For b = 1 To ass_no_old
    part_no_old_cand = 0
    c = c + 1
        Do Until IsEmpty(wold.Range("C9").Offset(c)) = False
            c = c + 1
            part_no_old_cand = part_no_old_cand + 1
        Loop
    If part_no_old_cand > part_no_old Then
        part_no_old = part_no_old_cand
    End If

Next b


'Define multi dimensional tables containing information about new and old revision

Dim newrev() As String
Dim oldrev() As String
ReDim newrev(ass_no_new, part_no_new, 1)
ReDim oldrev(ass_no_old, part_no_old, 1)

'input data to tables
Dim nac As Integer
Dim npc As Integer
Dim ass_cell As Range
Dim part_cell As Range
nac = -1
npc = 0

For b = 1 To y
    Set ass_cell = w.Range("C9").Offset(b - 1)
    Set part_cell = w.Range("E9").Offset(b - 1)
    If IsEmpty(ass_cell) = False Then
        'Assembly
        nac = nac + 1
        newrev(nac, 0, 0) = ass_cell
        newrev(nac, 0, 1) = ass_cell.Row
        npc = 1
    Else
        'Part
        newrev(nac, npc, 0) = part_cell
        newrev(nac, npc, 1) = part_cell.Row
        npc = npc + 1
    End If
Next b

Dim oac As Integer
Dim opc As Integer
oac = -1
opc = 0

For b = 1 To x
    Set ass_cell = wold.Range("C9").Offset(b - 1)
    Set part_cell = wold.Range("E9").Offset(b - 1)
    If IsEmpty(ass_cell) = False Then
        'Assembly
        oac = oac + 1
        oldrev(oac, 0, 0) = ass_cell
        oldrev(oac, 0, 1) = ass_cell.Row
        opc = 1
    Else
        'Part
        oldrev(oac, opc, 0) = part_cell
        oldrev(oac, opc, 1) = part_cell.Row
        opc = opc + 1
    End If
Next b

Dim ass_pos As Range
Dim part_pos As Range
Dim revcom As String
Dim ass_exists As Boolean
Dim part_exists As Boolean
'compare new table with the old one
For a = 1 To y - 1
    Set ass_pos = w.Cells(9, 3).Offset(a - 1)
    'check if assembly present
    If IsEmpty(ass_pos) = False Then
        'Assembly
        'Check if exists in old revision
        ass_exists = False
        For b = 0 To UBound(oldrev, 1)
            If ass_pos = oldrev(b, 0, 0) Then
                'assembly exists in old rev, compare each value
                ass_exists = True
                ass_tab = b
                'ass name
                If ass_pos.Offset(0, 1) <> wold.Cells(oldrev(b, 0, 1), 5) Then
                    ass_pos.Offset(0, 1).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 5)
                    ass_pos.Offset(0, 1).AddComment revcom
                End If
                'qty
                If ass_pos.Offset(0, 3) <> wold.Cells(oldrev(b, 0, 1), 7) Then
                    ass_pos.Offset(0, 3).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 7)
                    ass_pos.Offset(0, 3).AddComment revcom
                End If
                'profile
                If ass_pos.Offset(0, 4) <> wold.Cells(oldrev(b, 0, 1), 8) Then
                    ass_pos.Offset(0, 4).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 8)
                    ass_pos.Offset(0, 4).AddComment revcom
                End If
                'material
                If ass_pos.Offset(0, 7) <> wold.Cells(oldrev(b, 0, 1), 11) Then
                    ass_pos.Offset(0, 7).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 11)
                    ass_pos.Offset(0, 7).AddComment revcom
                End If
                'length
                If ass_pos.Offset(0, 9) <> wold.Cells(oldrev(b, 0, 1), 13) Then
                    ass_pos.Offset(0, 9).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 13)
                    ass_pos.Offset(0, 9).AddComment revcom
                End If
                'weight
                If ass_pos.Offset(0, 10) <> wold.Cells(oldrev(b, 0, 1), 14) Then
                    ass_pos.Offset(0, 10).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 14)
                    ass_pos.Offset(0, 10).AddComment revcom
                End If
                'weight sum
                If ass_pos.Offset(0, 12) <> wold.Cells(oldrev(b, 0, 1), 16) Then
                    ass_pos.Offset(0, 12).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 16)
                    ass_pos.Offset(0, 12).AddComment revcom
                End If
                'comment
                If ass_pos.Offset(0, 14) <> wold.Cells(oldrev(b, 0, 1), 18) Then
                    ass_pos.Offset(0, 14).Interior.Color = vbYellow
                    revcom = wold.Cells(oldrev(b, 0, 1), 18)
                    ass_pos.Offset(0, 14).AddComment revcom
                End If
            End If

        Next b
        If ass_exists = False Then
            'New assembly, mark with color
            w.Range(w.Cells(9, 3).Offset(a - 1), w.Cells(9, 19).Offset(a - 1)).Interior.Color = RGB(252, 234, 4)
        End If
        q = 1
        'Part check
        Do Until IsEmpty(ass_pos.Offset(q)) = False
            Set part_pos = w.Cells(9, 5).Offset(a - 1 + q)
            If ass_exists = True Then
                part_exists = False
                For b = 1 To UBound(oldrev, 2)
                    If part_pos = oldrev(ass_tab, b, 0) Then
                        'part exists in old rev, compare each value
                        part_exists = True
                        'qty
                        If part_pos.Offset(0, 1) <> wold.Cells(oldrev(ass_tab, b, 1), 7) Then
                            part_pos.Offset(0, 1).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 7)
                            part_pos.Offset(0, 1).AddComment revcom
                        End If
                        'profile
                        If part_pos.Offset(0, 2) <> wold.Cells(oldrev(ass_tab, b, 1), 8) Then
                            part_pos.Offset(0, 2).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 8)
                            part_pos.Offset(0, 2).AddComment revcom
                        End If
                        'material
                        If part_pos.Offset(0, 5) <> wold.Cells(oldrev(ass_tab, b, 1), 11) Then
                            part_pos.Offset(0, 5).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 11)
                            part_pos.Offset(0, 5).AddComment revcom
                        End If
                        'Length
                        If part_pos.Offset(0, 7) <> wold.Cells(oldrev(ass_tab, b, 1), 13) Then
                            part_pos.Offset(0, 7).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 13)
                            part_pos.Offset(0, 7).AddComment revcom
                        End If
                        'Weight
                        If part_pos.Offset(0, 8) <> wold.Cells(oldrev(ass_tab, b, 1), 14) Then
                            part_pos.Offset(0, 8).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 14)
                            part_pos.Offset(0, 8).AddComment revcom
                        End If
                        'Weight sum
                        If part_pos.Offset(0, 10) <> wold.Cells(oldrev(ass_tab, b, 1), 16) Then
                            part_pos.Offset(0, 10).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 16)
                            part_pos.Offset(0, 10).AddComment revcom
                        End If
                        'comment
                        If part_pos.Offset(0, 12) <> wold.Cells(oldrev(ass_tab, b, 1), 18) Then
                            part_pos.Offset(0, 12).Interior.Color = vbYellow
                            revcom = wold.Cells(oldrev(ass_tab, b, 1), 18)
                            part_pos.Offset(0, 12).AddComment revcom
                        End If
                    End If
                Next b
                If part_exists = False Then
                    'Part is new, mark with color
                    w.Range(w.Cells(9, 3).Offset(a - 1 + q), w.Cells(9, 19).Offset(a - 1 + q)).Interior.Color = vbYellow
                End If
            Else
                'Assembly doesnt exist, mark parts with color
                w.Range(w.Cells(9, 3).Offset(a - 1 + q), w.Cells(9, 19).Offset(a - 1 + q)).Interior.Color = vbYellow
            End If
            
            q = q + 1
        Loop
        
    End If
Next a

'Total ass quantity comparison
If w.Cells(y + 8, 7) <> wold.Cells(x + 8, 7) Then
    w.Cells(y + 8, 7).Interior.Color = vbYellow
    revcom = wold.Cells(x + 8, 7)
    w.Cells(y + 8, 7).AddComment revcom
End If

'Total weight comparison
If w.Cells(y + 8, 16) <> wold.Cells(x + 8, 16) Then
    w.Cells(y + 8, 16).Interior.Color = vbYellow
    revcom = wold.Cells(x + 8, 16)
    w.Cells(y + 8, 16).AddComment revcom
End If

w.Activate
w.Range("R4") = revmark


End Sub
Attribute VB_Name = "Saveasmodule"
Sub saveasnormal()

Dim a As Workbook
Dim b As Workbook

Set a = ActiveWorkbook
Set b = Workbooks.Add
a.Sheets(1).Copy Before:=b.Sheets(1)
b.Sheets(1).Buttons.Delete

'a.Sheets(1).Columns("A:S").Copy b.Sheets(1).Range("A1")
infname = a.Sheets(1).Range("P7")
fname = Application.GetSaveAsFilename(InitialFileName:=infname)
If fname = "False" Then
    Application.DisplayAlerts = False
    b.Close
    Application.DisplayAlerts = True
    Exit Sub
End If
fname2 = fname & "xlsx"
fname3 = fname & "pdf"
Application.DisplayAlerts = False
b.Sheets(2).Delete
Application.DisplayAlerts = True
b.SaveAs Filename:=fname2
b.Sheets(1).Range("P7").Calculate
b.ExportAsFixedFormat Type:=xlTypePDF, Filename:=fname3
b.Save
b.Close
a.Sheets(1).Range("P7").Calculate

fname4 = """" & fname3 & """"


End Sub

Attribute VB_Name = "ScreenUpdate"
Sub display()

Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Ten_skoroszyt"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
