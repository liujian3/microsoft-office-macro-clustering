Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Option Explicit

Dim Cancelled As Boolean, MyRange As Range, _
        CorrectedError As String, oDoc As Document
Sub PassVars(ByRef stAgency, ByRef stDivision, ByRef stAnalyst, ByRef stPhone, _
        ByRef stApproval, ByRef stFNote, ByRef stBill, ByRef stEmail, ByRef stDate)

    With ActiveDocument
    On Error Resume Next
    
    
        .FormFields("bmAgency").Result = stAgency
        .FormFields("bmDivision").Result = stDivision
        .FormFields("bmAnalyst").Result = stAnalyst
        .FormFields("bmPhone").Result = stPhone
        .FormFields("bmApproval").Result = stApproval
        .FormFields("bmFNote").Result = stFNote
        .FormFields("bmBill").Result = stBill
        .FormFields("bmEmail").Result = stEmail
        .FormFields("bmDate").Result = stDate
        .ActiveWindow.View.TableGridlines = False
    End With
    
End Sub
Sub Followlink()
'
' Followlink Macro
' Macro created 09/10/2002 by Patricia J. Roe
'
    Selection.Hyperlinks(1).Follow
    
End Sub



Private Sub CheckProtectedSection(oSection As Section)

Dim FmFld As FormField, FmFldCount As Long, Pos As Long

'check only the text formfields,
'don't check listboxes and checkboxes - this speeds up the code
Application.ScreenUpdating = False
For Each FmFld In oSection.Range.FormFields
    'Check to see if the field is a text formfield
    If FmFld.Type = wdFieldFormTextInput Then
        'Check if the field is a 'real' text field (no date, formula etc);
        'and that it is enabled for text input
        If FmFld.TextInput.Type = wdRegularText And FmFld.Enabled Then
            'The following subroutine won't be called if Word 97 is in use
            If Not Left$(Application.Version, 1) = "8" Then
                Call TurnNoProofingOff(FmFld)
            End If
            FmFld.Range.SpellingChecked = False

            'Change the language constant in the following line if necessary;
            'when you type the = sign, a list of all supported language
            'constants will appear, and you can choose one from the list.
            FmFld.Range.LanguageID = wdEnglishUS
            'Or whichever language is appropriate for you

            'If the current form field contains errors, spellcheck the text in it
            If FmFld.Range.SpellingErrors.Count > 0 Then
                'The following condition is to allow for a Word 97 bug, which
                'was fixed in 2000; (and in the latest Word 97 patches). If
                'the formfield is in a table and contains more than one
                'paragraph, then spellchecking it will crash Word 97
                If Left$(Application.Version, 1) = "8" _
                          And FmFld.Range.Paragraphs.Count > 1 _
                          And FmFld.Range.Tables.Count > 0 Then
                    Call Word97TableBugWorkaround(FmFld)
                    If Cancelled Then Exit Sub
                Else
                    'Set a range to the formfield's range in case the user
                    'accidentally destroys the formfield by overtyping its entire
                    'contents
                    Set MyRange = FmFld.Range
                    FmFldCount = oSection.Range.FormFields.Count
                    Application.ScreenUpdating = True

                    FmFld.Range.CheckSpelling

                    If IsObjectValid(FmFld) Then
                        If FmFld.Range.SpellingErrors.Count > 0 Then
                            'User pressed Cancel button. (Pressing Ignore
                            'reduces the count, pressing Cancel doesn't)
                            Cancelled = True
                            Exit Sub
                        End If
                    Else
                        'If formfield was destroyed because user overtyped its
                        'entire contents
                        CorrectedError = MyRange.Text
                        If Len(CorrectedError) = 0 Then
                            CorrectedError = MyRange.Words(1).Text
                        End If

                        'Formfields should really NEVER be preceded by a tab;
                        'design your forms so that each formfield is in its own
                        'table cell (removing borders as necessary). However, to
                        'cater for any legacy forms you may have, the following
                        'loop works around the possibility that it might be
                        'preceded by a tab
                        Pos = InStr(CorrectedError, vbTab)
                        Do While Pos > 0
                            CorrectedError = Mid$(CorrectedError, Pos + 1)
                            Pos = InStr(CorrectedError, vbTab)
                        Loop

                        'If formfield was destroyed when the user corrected the
                        'spelling, reinstate it, and put the user's correction into its
                        'result. Note that although Undo reinstates the Formfield
                        'itself, if the Formfield is preceded by a tab, It doesn't
                        'reinstate the FmFld object, hence the need to do a count
                        '(although, as previously stated, in a well-designed form,
                        'formfields should never be preceded by a tab, as it's
                        'better use table cells (removing borders as necessary).
                        Do While Not FmFldCount = _
                                oSection.Range.FormFields.Count
                            oDoc.Undo
                        Loop

                        'Also due to a Word bug, if the formfield is preceded by a
                        'tab, the text within the formfield may now be selected
                        'without the formfield itself being selected!
                        'Hence the following convoluted workaround
                        If Selection.FormFields.Count = 0 Then
                            Selection.MoveRight unit:=wdCharacter
                            Selection.MoveLeft unit:=wdCharacter, Extend:=True
                        End If
                        If Not IsObjectValid(FmFld) Then
                            Set FmFld = Selection.FormFields(1)
                        End If
                        FmFld.Result = CorrectedError
                    End If
                End If
                Application.ScreenUpdating = False
            End If
        End If
    End If
Next FmFld

End Sub


Private Sub TurnNoProofingOff(FmFld As FormField)
    'This subroutine is called only in Word 2000 and above
    FmFld.Range.NoProofing = False
End Sub



Private Sub Word97TableBugWorkaround(FmFld As FormField)

'Unlink formfield (convert to text)
Set MyRange = FmFld.Range
FmFld.Range.Fields(1).Unlink
Application.ScreenUpdating = True
MyRange.CheckSpelling
If MyRange.SpellingErrors.Count > 0 Then
    'User pressed Cancel button
    '(Pressing Ignore reduces the count, pressing Cancel doesn't)
    Cancelled = True
End If
CorrectedError = MyRange.Text
'Undo to reinstate the formfield
Do While Not IsObjectValid(FmFld)
    oDoc.Undo
Loop
FmFld.Range.Fields(1).Result.Text = CorrectedError
Application.ScreenUpdating = False

End Sub

Private Sub CheckBox1_Click()

End Sub


INQUEST-PP=macro
