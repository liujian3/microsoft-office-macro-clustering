Attribute VB_Name = "CmcCreateFax"
Dim rselection
Dim useActiveItem As Boolean
Public Category$
Public cr$
Public crlf$

Public Sub Main(printfax As Integer)
Attribute Main.VB_Description = "Create a letter using values from Commence"
Attribute Main.VB_ProcData.VB_Invoke_Func = "TemplateProject.JJCreateFax.MAIN"
Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg4$
Dim gMsg5$
Dim gMsg6$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim qcq$
Dim c
Dim version$
Dim NameSize
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim nNext
Dim Name_$
Dim PlainName$
Dim Namefld$
Dim i
Dim J
Dim FaxNumberField$
Dim gMsg1_
Dim gMSWord_
Dim Value$
Dim Req$
Dim Cname$
Dim FC$
Dim O
Dim K
Dim tmp$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamelist$
Dim Cnamefld$
Dim Iloop
Dim CNameP$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim MyDoc As Document
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean

'Copyright 1992-95 Jensen-Jones Inc.
' Commence letter template expansion macro
' This macro creates a letter (fax) using values from the letter view info item in Commence
' The macro sets up WinFax Pro as the printer, sends it the name and number of the recipient
' and then lets the user review the letter and fax it manuallly (using File-Print)
'  Note: the macro leaves the printer selected as WinFax, unlike FaxLetter and FaxAll
'  Revisions for 1.00a (10/92)"
'  Prints values from all connected items (this was distributed to some users prior  to 1.00a)
'  Support for clarify fields so we can deal with items with calrified identical names
'  Gets the actual name fields (don't assume they are always called "Name")
'  Gets rid of Tr$ subroutine so we can handle "~" in field codes

' Revisions for 3.0 (4/4/95)
' Support for 50 character item names, Commence 1.0a or later required

' Literal Text strings ; START TRANSLATION .

gMSWord$ = "Microsoft Word"
gWinFax$ = "WinFax"

gFax1$ = "Fax"
gFax2$ = "FAX"
gMsg1$ = "CmcFaxLetter could not find the fax number field for this category."
gBadDDE$ = "??BAD DDE??"
gMsg2$ = "CmcCreateFax could not get the fax number: "
gForItem$ = " for this item: "
gMsg4$ = "CmcCreateFax has sent the fax number: "
gMsg5$ = " to WinFax and selected WinFax as your printer.  When you are ready to fax, just select File-Print "
gMsg6$ = "CmcCreateFax got a null fax number: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcCreateFax macro exiting.  Macro error number: "

' END OF TRANSLATION.

gDelim$ = "|fffd|"       ' delimits information received via DDE."
q$ = Chr(34)        'Make a string with a single " for use in constructing DDE messages
qcq$ = q$ + "," + q$    ' Make a string with "," for use in constructing DDE messages
cr$ = Chr(13)
crlf$ = Chr(13) + Chr(10)
NameSize = 50
Set MyDoc = ActiveDocument
SearchedHeader = False
SearchedFooter = False
SearchedMain = False
AskedNext = False


'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject = "Commence.DB"
AppName$ = "Commence"

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not GetVersion(CmcObject, AppName) Then GoTo Normalx

Set cmcobj = CreateObject(CmcObject$)
Set c = cmcobj.GetConversation(AppName$, "GetData")


' Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

' Ask Commence what is currently in the letter view
' Parse the return string, which is of the form:
Call GetCategoryandPlainName(c, Category$, Name_$, PlainName$, View$, useActiveItem, True)

'Get the name of the name field
Namefld$ = GetNameField(c)

'Mark the ActiveItem
If useActiveItem Then
    Temp$ = c.Request("[MarkActiveItem]")
End If

'Find the Fax number field
s$ = c.Request("[GetFieldNames(" + q$ + Category$ + q$ + "," + gDelim$ + ")]")

' look for gFax1 first
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    J = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, J - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    J = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, J - i)
Else
    MsgBox gMsg1, 16, "CmcCreateFax"
    Err.Number = 9999
    GoTo Normalx
End If

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

Search:
Value$ = ""
Req$ = ""
Cname$ = ""

If SearchedHeader = False Then
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.View.Type = wdPageView
        Else
            ActiveWindow.ActivePane.View.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.View.Type = wdPageView
        Else
            ActiveWindow.ActivePane.View.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo Normalx
FC$ = Selection.Text


'Strip off the leading and trailing marks: (% and %)
K = Len(FC$)
tmp$ = Mid(FC$, 3, K - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       MyDoc.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Bye
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If Value$ = "??BAD DDE??" Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    InsertText (Value$)
    GoTo FindAnother:
End If

'Check to see if this is an indirect field: it is if it contains a %%
i = InStr(tmp$, "%%")
If i <> 0 Then GoTo Indirect        'We have an indirect field
    'Other wise we have a direct field
    'First check to see if this is just the name field
    If ((tmp$ = Namefld$) Or (tmp$ = UCase(Namefld$)) Or (tmp$ = LCase(Namefld$))) Then
        'Get the reversed version from Commence
        Req$ = "[GetReverseName(" + q$ + PlainName$ + q$ + ")]"
    
    'This is not the name field, we need to get it from Commence
    ElseIf useActiveItem Then
        Req$ = "[GetField(,," + q$ + tmp$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + Category$ + qcq$ + dq$(Name_$) + qcq$ + tmp$ + q$ + ")]"
    End If
        On Error GoTo -1: On Error GoTo BD1
        Value$ = c.Request(Req$)
        'This is the new error handling
BD1:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done

        InsertText (Value$)

    'End If
'Go back And look For more field codes
GoTo FindAnother:

Indirect:   'This is an indirect field, parse it to get the values we neeed
'Stop
    Conn$ = Left(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    'Build the DDE command
    If useActiveItem Then
        Req$ = "[GetConnectedItemCount(,," + q$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    Else
        Req$ = "[GetConnectedItemCount(" + q$ + Category$
        Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD2
        CCount$ = c.Request(Req$)
BD2:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    Icount = Val(CCount$)
    
    If Icount = 0 Then
        Value$ = ""
        InsertText (Value$)
    ElseIf useActiveItem Then
            Req$ = "[GetConnectedItemNames(,,""" + dq$(Conn$) + qcq$ + cat$ + """,|fffd|)]"
        Else
            Req$ = "[GetConnectedItemNames(" + q$ + Category$
            Req$ = Req$ + qcq$ + dq$(Name_$) + qcq$ + Conn$ + qcq$ + cat$ + q$ + ",|fffd|)]"
        End If

        On Error GoTo -1: On Error GoTo BD21
        Cnamelist$ = c.Request(Req$)
BD21:
        If Err.Number = 3 Or Err.Number = 2 Then
            Value$ = gBadDDE$
            Err.Number = 0
            GoTo Insert2    'Skip down to the insertion of the value
        ElseIf Err.Number <> 0 Then
            GoTo Done
        End If
        
        On Error GoTo -1: On Error GoTo Done

    'Get the name of the name field for the connected category
    s$ = c.Request("[GetFieldNames(" + q$ + cat$ + q$ + ",|fffd|)]")
    nStart = 1
    nEnd = InStr(nStart, s$, "|fffd|")
    If nEnd <> 0 Then
        Cnamefld$ = Mid(s$, nStart, nEnd - nStart)
    Else
        Cnamefld$ = s$
    End If
    'Now loop through items from the list
        nStart = 1
        Value$ = ""
        For Iloop = 1 To Icount
            nEnd = InStr(nStart, Cnamelist$, "|fffd|")
            If nEnd = 0 Then
                Cname$ = Mid(Cnamelist$, nStart)
            Else
                Cname$ = Mid(Cnamelist$, nStart, nEnd - nStart)
                nStart = nEnd + 1
            End If
        
        'Now we have a Cname to use to get the desired field
'Stop
        'Check to see if we are looking for the Cname, if so we already have it
        If Field_$ = Cnamefld$ Then
            If Len(Cname$) > NameSize Then
                'Get the name without the clarify data
                CNameP$ = Trim(Mid(Cname$, 1, NameSize))
            Else
                CNameP$ = Trim(Cname$)
            End If
            'Get the reversed version from Commence
            Req$ = "[GetReverseName(" + q$ + dq$(CNameP$) + q$ + ")]"
            On Error GoTo -1: On Error GoTo BD9
            Value$ = c.Request(Req$)
            'This is the new error handling
BD9:
            If Err.Number = 3 Then
                Value$ = gBadDDE$
                Err.Number = 0
            ElseIf Err.Number <> 0 Then
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done

        Else
        Req$ = "[GetField(" + q$ + cat$ + qcq$ + dq$(Cname$) + qcq$ + Field_$ + q$ + ")]"
          On Error GoTo -1: On Error GoTo BD3
          Value$ = c.Request(Req$)
BD3:
          If Err.Number = 3 Then
            Value$ = gBadDDE$
            Err.Number = 0
          ElseIf Err.Number <> 0 Then
            GoTo Done
          End If
        
          On Error GoTo -1: On Error GoTo Done
        End If
    
    If Iloop = 1 Then
        InsertText (Value$)
    Else
        AddText (Value$)
    End If

    Next Iloop

    'End If  'End of Icount = 0 If
    GoTo FindAnother:
Insert2:
    InsertText (Value$)
'Go back and look for more field codes
GoTo FindAnother:


Done:
StatusBar = ErrorMsg$ + Str(Err.Number) + Err.Description
a = MsgBox(ExitMsg$ + Str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Letter Macro")

Normalx:

If Err.Number = 0 Then
    'Stop
    ActiveDocument.Save
    'Now get the fax number for the item
    If useActiveItem Then
        Req$ = "[GetField(,," + q$ + FaxNumberField$ + q$ + ")]"
    Else
        Req$ = "[GetField(" + q$ + Category$ + qcq$ + Name_$ + qcq$ + FaxNumberField$ + q$ + ")]"
    End If
    On Error GoTo -1: On Error GoTo BD8
    FaxNumber$ = c.Request(Req$)
        'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + Name_$, 16, "CmcCreateFax"
        GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done
'Stop
FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
    Call CmcFaxLib.SendFax(PlainName$, FaxNum$, gWinFax$, printfax)
    FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
    If printfax = 0 Then
        MsgBox gMsg4$ + FaxNum$ + gMsg5$, 48, "CmcCreateFax"
    Else
        ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    End If
Else
    FocusNewDocument (MyDoc)
    Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1
    MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + Name_$, 16, "CmcCreateFax"
End If
    

End If
Bye:
Set c = Nothing
Set cmcobj = Nothing
Options.ReplaceSelection = rselection

End Sub

Public Sub InsertText(Value$)
Dim cr$
Dim Line1$
Dim Lines2$
Dim Test$
'Inserts data, checking to see if blank lines are created and handling the case of BAD DDE values
cr$ = Chr(13)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$

If Value$ = "" Then
    'Clear out the code, we got a null value back
    Selection.Delete
    'Check to see if we are creating a blank line
    Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
    Selection.MoveRight Unit:=wdCharacter, count:=2, Extend:=wdExtend
    Test$ = Selection.Text
    If Test$ = Lines2$ Then 'Have a blank, remove one line
        Selection.Collapse Direction:=wdCollapseEnd
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdExtend
        Selection.Delete
        If Selection.Text = " " Then
            Selection.Delete
        End If
    Else
        Selection.Collapse Direction:=wdCollapseEnd
        Selection.MoveLeft Unit:=wdCharacter, count:=1, Extend:=wdMove
        'Selection.MoveRight Unit:=wdCharacter, count:=1, Extend:=wdExtend
    End If

ElseIf Value$ = "??BAD DDE??" Then
    'Move the insertion point and leave the field code
    Selection.Collapse Direction:=wdCollapseEnd

Else
    'Replace the field code with the value
    Selection.TypeText Text:=Value$
End If

End Sub

Public Sub AddText(Value$)
Dim cr$
'Adds text from connected items, with cr after each item
cr$ = Chr(13)

If Value$ = "" Then
    'Just skip a line
    'ActiveDocument.Content.InsertAfter Text:=vbCr
    Selection.TypeText Text:=" "
    Selection.Collapse Direction:=wdCollapseEnd
ElseIf Value$ = "??BAD DDE??" Then
    'Do nothing
Else
    'Insert a cr followed by the new value
    'ActiveDocument.Content.InsertAfter Text:=vbCr
    Selection.TypeText Text:=" "
    Selection.TypeText Text:=Value$
End If

End Sub


Public Function dq$(s$)
Dim q$
Dim nLen
Dim tmp$
Dim i
Dim p$
'doubles quotes in strings for transmission to Commence

q$ = Chr(34)        ' The double-quote character

' Quick check for the expected (typical) case
If InStr(1, s$, q$) = 0 Then
    dq$ = s$
Else
    nLen = Len(s$)
    tmp$ = ""
    For i = 1 To nLen
        p$ = Mid(s$, i, 1)
        If p$ = q$ Then
            tmp$ = tmp$ + p$ + q$
        Else
            tmp$ = tmp$ + p$
        End If
    Next i
    dq$ = tmp$
End If

End Function

Public Sub GetCategoryandPlainName(ch, cat$, Name_$, pname$, viewname$, useActiveItem As Boolean, SingleLetter As Boolean)

useActiveItem = True

If SingleLetter Then
    useActiveItem = True

    On Error Resume Next
    s$ = ch.Request("[GetActiveViewInfo(|fffd|)]")
    'MsgBox Err.Description + Err.Number

    If (Err.Number = 3) Or (Err.Number = 121) Then 'add item is the active view, bad!
        Err.Clear   ' Clear Err object fields
        t$ = ch.Request("[GetLetterViewInfo(|fffd|)]")
        s$ = t$
        useActiveItem = False
    End If
Else
    s$ = ch.Request("[GetLetterViewInfo(|fffd|)]")
End If

On Error GoTo 0

ParseViewInfo s, cat$, pname$, Name_$, viewname$


End Sub
Public Sub ParseViewInfo(viewinfo$, cat$, pname$, Name_$, viewname$)

'viewinfo is a string either received from GetActiveViewInfo or GetLetterViewInfo.
'This includes the following information:
'   <View Name>
'   <View Type>
'   <Category Name>
'   <Clarifed Item Name (if appropriate)>
'   <Field Name (if an item detail is up)>
'The returned value is the category and the plain name (without the clarify info)

Dim cr$
cr$ = Chr(13)

nStart = 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
viewname = Mid(viewinfo, nStart, nEnd - 1)
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
'Get the active category
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
cat$ = Mid(viewinfo, nStart, nEnd - nStart)
'Get the highlighted item
nStart = nEnd + 1
nEnd = InStr(nStart, viewinfo, "|fffd|")
'Look for the very last cr$ in case the clarify field is multi-line
'LastCR:
'nNext = InStr(nEnd + 1, viewinfo, "|fffd|")
nNext = InStr(nStart, viewinfo, cr$)
If nNext <> 0 Then
    nEnd = nNext
    'GoTo LastCR
End If
'Get the name and the clarify data (if any)
Name_$ = Mid(viewinfo, nStart, nEnd - nStart)

' NOTE:  If the clarify field Is a multi - Line Text field, And the value of the clarify field For an item
' contains a cr/nl, then 'this macro will fail because it will not get all of the clarify field value.
' This is a pretty unlikely scenario, so we will not account for it here.
' If Name$ is greater than NameSize, then it is clarified
If Len(Name_$) > NameSize Then
    'Get the name without the clarify data
    pname$ = RTrim(Mid(Name_$, 1, 50))
Else
    pname$ = RTrim(Name_$)
End If



End Sub


Public Function GetNameField(ch) As String
's$ = DDERequest(ch, "[GetFieldNames(" + q$ + Category$ + q$ + ")]")
s$ = ch.Request("[GetFieldNames(" + q$ + Category$ + q$ + ",|fffd|)]")
nStart = 1
nEnd = InStr(nStart, s$, "|fffd|")
If nEnd = 0 Then
    GetNameField = s$
Else
    GetNameField = Mid(s$, 1, nEnd - 1)
End If

End Function

Public Sub GetData_(chan, sReq$, sValue$, DDEerr)
'Gets data from Commence, checking for invalid DDE calls
On Error GoTo -1: On Error GoTo BD0
'sValue$ = DDERequest(chan, sReq$)
sValue$ = chan.Request(sReq$)
BD0:
If Err.Number = 3 Or Err.Number = 2 Then
    sValue$ = "??BAD DDE??"
    DDEerr = 0
    Err.Number = 0
ElseIf Err.Number <> 0 Then
    DDEerr = Err.Number
End If
        
End Sub

Public Function GetVersion(obj_name$, app_name$) As Boolean
Set obj = CreateObject(obj_name$)
Set c = obj.GetConversation(app_name, "System")
version$ = c.Request("Version")
Set c = Nothing
Set obj = Nothing
If Left(version$, 9) = "Version 1" Or Left(version$, 9) = "Version 2" Then
    MsgBox "This macro can only work with Commence Version 3.0 and above", vbCritical, "Commence Letter Macro"
    GetVersion = False
Else
    GetVersion = True
End If


End Function
Public Sub FindString()

With Selection.Find
    .Forward = True
    .MatchWholeWord = False
    .MatchWildcards = True
    .MatchCase = False
    .Wrap = wdFindStop
    .Execute FindText:="\(%*%\)"
End With

End Sub

Public Function GetConnectedNamefield(ch, ccat$) As String
    s$ = ch.Request("[GetFieldNames(" + q$ + ccat$ + q$ + ")]")
    nStart = 1
    nEnd = InStr(nStart, s$, gDelim$)
    If nEnd = 0 Then
        GetConnectedNamefield = s$
    Else
        GetConnectedNamefield = Mid(s$, nStart, nEnd - nStart)
    End If

End Function

Public Sub FocusNewDocument(sDoc)
    Application.Documents(sDoc).Activate
    Application.WindowState = wdWindowStateMaximize
End Sub

Attribute VB_Name = "CmcFaxLib"

Public Sub Main()
End Sub

Public Sub SendFax(Name_$, Number$, FaxName$, SendFlag)
Dim gTitle$
Dim gWinFax$
Dim gEFax$
Dim gMsg1$
Dim gOn$
Dim dq2$
Dim cc
Dim FaxNum$
Dim defprn$
Dim FX$
Dim Found
Dim pname$
Dim PPort$
Dim faxdev$
Dim d
Dim s$
Dim AppName$
Dim CmcObject$
'Copyright 1992-95 Jensen-Jones Inc.
'Version for Commence 2.0 (gets processed phone number from Commence)

' Literal Text strings ; START TRANSLATION .
gTitle$ = "JJSendFax"
gWinFax$ = "WinFax"
gEFax$ = "E-FAX"
faxdev$ = "WinFax"

gMsg1$ = " is not installed!  You must install the Fax printer before faxing."
gOn$ = " on "
dq2$ = Chr(34) + Chr(34)

' END OF TRANSLATION.

CmcObject = "Commence.DB"
AppName$ = "Commence"

'Get the processed phone number from Commence
Set cmcobj = CreateObject(CmcObject$)
Set cc = cmcobj.GetConversation(AppName$, "GetData")

FaxNum$ = cc.Request("[GetPhoneNumber(" + Chr(34) + Number$ + Chr(34) + ")]")
Set cc = Nothing
Set cmcobj = Nothing

' save the current printer setting
oldprinter$ = ActivePrinter

'Look for the fax printer setting
'FX$ = WordBasic.[GetProfileString$]("devices", UCase(FaxName$))

' found the fax printer?
'Found = InStr(UCase(FX$), UCase(FaxName$))
'If Found = 0 Then
'    WordBasic.MsgBox FaxName$ + gMsg1$, gTitle$, 16
'    GoTo Abort
'End If

' Combine the FAX printer name and port name
'Found = InStr(FX$, ",")
'PName$ = WordBasic.[Left$](FX$, Found - 1)
'PPort$ = WordBasic.[Right$](FX$, Len(FX$) - Found)
'faxdev$ = PName$ + gOn$ + PPort$

' and select the fax printer
ActivePrinter = faxdev$

'Now send the fax software the data
If UCase(FaxName$) = UCase(gWinFax$) Then
    dd = WordBasic.DDEInitiate("FAXMNG", "Transmit")

'Winfax 3.0/4.0 DDE
    s$ = "recipient(" + Chr(34) + FaxNum$ + Chr(34) + ", " + dq2$ + "," + dq2$ + ","
    s$ = s$ + Chr(34) + Name_$ + Chr(34) + ")"
    DDEPoke dd, "sendfax", Data:=s$
'End of Winfax 3.0/4.0 DDE

    WordBasic.DDETerminate (dd)

ElseIf UCase(FaxName$) = UCase(gEFax$) Then
    d = WordBasic.WordBasic.DDEInitiate("Eclipse FAX Manager", "SEND")
    DDEPoke dd, "SEND", Data:=FaxNum$
    WordBasic.DDETerminate (dd)
End If

'Now send the FAX if SendFlag = 1, otherwise let the user do it manually
If SendFlag = 1 Then
    ActiveDocument.PrintOut Background:=False
    
    'Now reset the printer to the original setting
    ActivePrinter = oldprinter
End If

Abort:
End Sub
Attribute VB_Name = "CmcMultipleFax"

Public Sub Main()
Dim gMSWord$
Dim gWinFax$
Dim gFax1$
Dim gFax2$
Dim gMsg1$
Dim gBadDDE$
Dim gMsg2$
Dim gForItem$
Dim gMsg5$
Dim ErrorMsg$
Dim ExitMsg$
Dim gDelim$
Dim q$
Dim cr$
Dim Line1$
Dim Lines2$
Dim LetterFile$
Dim c
Dim version$
Dim NameSize
Dim b
Dim nState
Dim s$
Dim nStart
Dim nEnd
Dim View$
Dim Req$
Dim tmp$
Dim ItemCount
Dim Namefld$
Dim i
Dim J
Dim FaxNumberField$
Dim nLoop
Dim IC$
Dim Value$
Dim Cname$
Dim FC$
Dim O
Dim K
Dim PlainName$
Dim Conn$
Dim Rest$
Dim cat$
Dim Field_$
Dim CCount$
Dim Icount
Dim Cnamefld$
Dim Iloop
Dim PlainCName$
Dim FaxNumber$
Dim FaxNum$
Dim AppName$
Dim CmcObject$
Dim SearchedHeader As Boolean
Dim SearchedFooter As Boolean
Dim SearchedMain As Boolean
Dim ContinueRunning As Integer
Dim AskedNext As Boolean
Dim NumberNoEmail

'Copyright 1992-2001 Commence Corporation
'Commence letter template expansion macro

' Literal Text strings ; START TRANSLATION .

gMSWord$ = "Microsoft Word"
gWinFax$ = "WinFax"

gFax1$ = "Fax"
gFax2$ = "FAX"
gMsg1$ = "CmcMultipleFax could not find the fax number field for this category."

gBadDDE$ = "??BAD DDE??"
gMsg2$ = "CmcMultipleFax could not get the fax number: "
gForItem$ = " for this item: "
gMsg5$ = "CmcMultipleFax got a null fax number: "

ErrorMsg$ = "The errror code is: "  ' Error message
ExitMsg$ = "CmcMultipleFax macro exiting.  Macro error number: "

' END OF TRANSLATION.

gDelim$ = Chr(13)
q$ = Chr(34)
cr$ = Chr(13)
Line1$ = Chr(13)
Lines2$ = Line1$ + Line1$
NameSize = 50
NumberNoEmail = 0

'get what the replace selection is set to then set it to true
rselection = Options.ReplaceSelection
Options.ReplaceSelection = True

CmcObject$ = "Commence.DB"
AppName$ = "Commence"
AskedNext = False

LetterFile$ = ActiveDocument.FullName

'Find out what version of Commence is running
On Error GoTo -1: On Error GoTo Done
If Not GetVersion(CmcObject, AppName) Then GoTo Normalx

'Start up a GetData DDE link to Commence
Set cmcobj = CreateObject(CmcObject$)
Set c = cmcobj.GetConversation(AppName$, "GetData")

On Error GoTo -1: On Error GoTo Done

Call GetCategoryandPlainName(c, Category$, Name_$, PlainName$, View$, False, False)


' Ask Commence what is currently highlighted
nState = 1

'Now find out how many items are in the view
'Turn on Clarify Info
s$ = c.Request("[ClarifyItemNames(True)]")

Req$ = "[ViewCategory(" + q$ + Category$ + q$ + ")]"

tmp$ = c.Request(Req$)
Req$ = "[ViewView(" + q$ + View$ + q$ + ")]"
tmp$ = c.Request(Req$)
tmp$ = c.Request("[ViewItemCount]")
ItemCount = Val(tmp$)

'Get the name of the name field
Namefld$ = GetNameField(c)

'Find the Fax number field
s$ = c.Request("[GetFieldNames(" + q$ + Category$ + q$ + ")]")

' look for gFax1 first
i = InStr(1, s$, gFax1$, 1)
If i <> 0 Then
    J = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, J - i)
ElseIf InStr(1, s$, gFax2, vbTextCompare) Then
    i = InStr(1, s$, gFax2, vbTextCompare)
    J = InStr(i, s$, gDelim$)
    FaxNumberField$ = Mid(s$, i, J - i)
Else
    MsgBox gMsg1, 16, "CmcMultipleFax"
    Err.Number = 9999
    GoTo Normalx
End If

'Start main loop
For nLoop = 1 To ItemCount
IC$ = Str(nLoop)
If nLoop <> 1 Then Documents.Open FileName:=LetterFile$

'Start looking for Fields to retrieve
Selection.GoTo What:=wdGoToLine, Which:=wdGoToAbsolute, count:=1

SearchedHeader = False
SearchedFooter = False
SearchedMain = False

Search:     'Return here to look for the next field

If SearchedHeader = False Then
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.View.Type = wdPageView
        Else
            ActiveWindow.ActivePane.View.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
    SearchedHeader = True
ElseIf SearchedFooter = False Then
    If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
        ActivePane.View.Type = wdOutlineView Then
        If wdPrintView = Empty Then
            ActiveWindow.ActivePane.View.Type = wdPageView
        Else
            ActiveWindow.ActivePane.View.Type = wdPrintView
        End If
    End If
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
    SearchedFooter = True
ElseIf SearchedMain = False Then
    ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument
    SearchedMain = True
End If

FindAnother:
Value$ = ""
Req$ = ""
Cname$ = ""

Call CmcCreateFax.FindString

'Now we have a field code, save it in a variable
If (InStr(1, Selection.Text, "%") < 1) And (SearchedFooter = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedMain = False) Then GoTo Search
If (InStr(1, Selection.Text, "%") < 1) And (SearchedHeader = True) And (SearchedFooter = True) And (SearchedMain = True) Then GoTo LetterEnd
FC$ = Selection.Text
K = Len(FC$)
tmp$ = Mid(FC$, 3, K - 4)

'Check to see if this is a label template
If UCase(FC) = "(%(-NEXT-)%)" And AskedNext = False Then
    ContinueRunning = MsgBox(Prompt:="This template is for creating labels.  Please make sure you have selected the correct application prior to creating your letter.  Would you like to continue?", buttons:=vbYesNo)
    AskedNext = True
    If ContinueRunning = 7 Then
       ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
       GoTo Normalx
    End If
End If

'Check to see if it is ME
If UCase(tmp$) = "(-ME-) ITEM" Then
    s$ = c.Request("[ClarifyItemNames(FALSE)]")
    Req$ = "[GetPreference(Me,|fffd|)]"
    GetData_ c, Req$, Value$, DDEerr
    s$ = c.Request("[ClarifyItemNames(True)]")
    If DDErr = 126 Then
        Value$ = ""
    ElseIf DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    'On Error GoTo -1: On Error GoTo Done
    
    If Value$ <> "" Then
        'parse out name
        y = InStr(Value$, "|fffd|")
        tmp$ = Trim(Mid(Value, y + 1))
        Req$ = "[GetReverseName(" + q$ + dq$(tmp$) + q$ + ")]"
        GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    InsertText (Value$)
    GoTo FindAnother:
End If


'Check to see if this is an indirect field: it is if it contains a %
i = InStr(tmp$, "%%")
If i = 0 Then       'We have a direct field

    Req$ = "[ViewField(" + IC$ + "," + q$ + tmp$ + q$ + ")]"
    GetData_ c, Req$, Value$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    'Handle the case of the name field
    If Len(Value$) > NameSize And tmp$ = Namefld$ Then
        'Get the name without the clarify data
        Value$ = RTrim(Mid(Value$, nStart, NameSize))
    Else
        Value$ = RTrim(Value$)
    End If
'Now check to see if this is the name field, if it is we will switch first and last names
    If ((tmp$ = Namefld$) Or (tmp$ = UCase(Namefld$)) Or (tmp$ = LCase(Namefld$))) Then
        PlainName = Value
        Req$ = "[ViewReverseName(" + q$ + dq$(Value$) + q$ + ")]"
        GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    End If
    InsertText (Value$)
        
Else    'This is an indirect field, parse it to get the values we neeed
    Conn$ = Left$(tmp$, i - 1)
    Rest$ = Mid(tmp$, i + 2)
    i = InStr(Rest$, "%%")
    cat$ = Left$(Rest$, i - 1)
    Field_$ = Mid(Rest$, i + 2)
    Req$ = "[ViewConnectedCount(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + ")]"
    GetData_ c, Req$, CCount$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If CCount$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If
    Icount = Val(CCount$)
    'Check for zero connected items
    If Icount = 0 Then
        Value$ = ""
        InsertText (Value$)
    Else
    'Loop through connected items
    ''Get the name of the name field for the connected category
    'Get the name of the name field for the connected category
    Cnamefld$ = GetConnectedNamefield(c, cat$)

    For Iloop = 1 To Icount
    'Build the DDE command
    Req$ = "[ViewConnectedItem(" + IC$ + "," + q$ + Conn$ + q$ + "," + q$ + cat$ + q$ + "," + Str(Iloop) + ")]"
    GetData_ c, Req$, Cname$, DDEerr
    If DDEerr <> 0 Then
        Err.Number = DDEerr
        GoTo Done
    End If
    On Error GoTo -1: On Error GoTo Done
    If Cname$ = "??BAD DDE??" Then
        Value$ = "??BAD DDE??"
        GoTo DDEerror
    End If

    'Check to see if we are looking for the name, if so we already have it
    If Field_$ = Cnamefld$ Then
        If Len(Cname$) > NameSize Then
            'Get the name without the clarify data
            PlainCName$ = RTrim(Mid(Cname$, 1, NameSize))
        Else
            PlainCName$ = RTrim(Cname$)
        End If
          
        Req$ = "[ViewReverseName( " + q$ + dq$(PlainCName$) + q$ + ")]"
        GetData_ c, Req$, Value$, DDEerr
        If DDEerr <> 0 Then
            Err.Number = DDEerr
            GoTo Done
        End If
        On Error GoTo -1: On Error GoTo Done
    Else
            Req$ = "[GetField(" + q$ + cat$ + q$ + "," + q$ + dq$(Cname$) + q$ + "," + q$ + Field_$ + q$ + ")]"
            GetData_ c, Req$, Value$, DDEerr
            If DDEerr <> 0 Then
                Err.Number = DDEerr
                GoTo Done
            End If
            On Error GoTo -1: On Error GoTo Done
    End If
    If Iloop = 1 Then
        InsertText (Value$)
    Else
        AddText (Value$)
    End If

Next Iloop
End If  'End of Icount = 0 case
GoTo FindAnother
DDEerror:           'Come here if the connection is invalid
    InsertText (Value$)
    GoTo FindAnother:
Insert2:
        InsertText (Value$)
End If

'Go back and look for more field codes
GoTo FindAnother:
LetterEnd:

'FileSave
    'Now get the fax number for the item
        Req$ = "[ViewField(" + IC$ + "," + q$ + FaxNumberField$ + q$ + ")]"
        On Error GoTo -1: On Error GoTo BD8
        FaxNumber$ = c.Request(Req$)
        'If PlainName = "" Then
            PlainName = c.Request("[ViewField(" + IC$ + "," + q$ + Namefld + q$ + ")]")
        'End If
'This is the new error handling
BD8:
    If Err.Number <> 0 Then
        WordBasic.MsgBox gMsg2$ + FaxNumberField$ + gForItem$ + PlainName$, gMSWord$, 16
        GoTo Normalx
    End If
    On Error GoTo -1: On Error GoTo Done

FaxNum$ = Trim$(FaxNumber$)
i = Len(FaxNum$)
If Len(FaxNum$) <> 0 Then
    Call CmcFaxLib.SendFax(PlainName$, FaxNum$, gWinFax$, 1)
Else
    NumberNoEmail = NumberNoEmail + 1
    'ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    'MsgBox gMsg5$ + FaxNumberField$ + cr$ + gForItem$ + PlainName$, 16, "CmcMultipleFax"
End If

ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges

'Go back an get the next item from the view
Next nLoop
'All done, go the the normal exit
GoTo Normalx

Done:
    StatusBar = ErrorMsg$ + Str(Err.Number) + Err.Description
    a = MsgBox(ExitMsg$ + Str(Err.Number) + Chr(10) + Err.Description, vbCritical, "Commence Multiple Fax Macro")

    'ActiveDocument.PrintOut Background:=True
    'ActiveDocument.Close SaveChanges:=wdDoNotSaveChanges
    Err.Number = 0
    'Just stop processing letters at this point: there is an error in the template

Normalx:

If NumberNoEmail > 0 Then
    a = MsgBox("There were " + Str(NumberNoEmail) + " item(s) without a fax number.  These items were not faxed.", vbCritical, "Commence Multiple Fax Macro")
End If

Set c = Nothing
Set cmcobj = Nothing

' turn WinFax back on so that it will send the queued FAXes
d = WordBasic.DDEInitiate("FAXMNG", "CONTROL")
WordBasic.DDEExecute d, "GoActive"
WordBasic.DDETerminate d

' This causes the hourglass cursor to be turned into a normal pointer.
    Tasks(AppName$).Visible = True

End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True




INQUEST-PP=macro
