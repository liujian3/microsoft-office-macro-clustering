Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "d_credit_CustomPortfolio"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Compare Text

' The set of names. Loaded on demand or when source changes
Private listNames$()

Private Sub Initialise()
    On Error GoTo errorHandler
    Dim temp: temp = Application.Run("nxlibview", Range("Nx_" & Me.Name & "_DropDownSource").Value, "Name")
    ReDim listNames(1 To UBound(temp))
    Dim i As Integer
    For i = 1 To UBound(temp)
        listNames(i) = temp(i, 1)
    Next
errorHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim isect As Range
    ' has a single dropdown cell changed?
    Set isect = Application.Intersect(Range("Nx_" & Me.Name & "_DropDownCells"), Target)
    If Not (isect Is Nothing) Then
        If isect.Cells.Count = 1 Then
            changedDropDownCell isect
            Exit Sub
        End If
    End If
    ' has the source changed?
    Set isect = Application.Intersect(Range("Nx_" & Me.Name & "_DropDownSource"), Target)
    If Not (isect Is Nothing) Then
        Initialise
        Exit Sub
    End If
End Sub

Private Sub changedDropDownCell(ByVal Target As Range)
    ' for blanks, just eliminate the validation
    If Target.Value = "" Then
            Target.Validation.Delete
            Exit Sub
    End If

    ' lazy get of names
    Dim passed As Boolean: passed = False
    On Error GoTo failure
    Dim temp As Integer: temp = UBound(listNames)
    passed = True
failure:
    If passed = False Then Initialise
    On Error Resume Next

    ' build the validation list
    ' could do better if we know its strictly alphabetical
    Dim lenValue As Integer: lenValue = Len(Target.Value)
    Dim tarValue$: tarValue = Target.Value
    Dim formString$
    Dim i As Integer
    For i = 1 To UBound(listNames)
        If Left(listNames(i), lenValue) = tarValue Then
            formString = formString & listNames(i) & ","
        End If
    Next
    ' replace validation
    Target.Validation.Delete
    If formString <> "" Then
        formString = Left(formString, Len(formString) - 1) 'trim trailing ","
        With Target.Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=formString
            .IgnoreBlank = True
            .InCellDropdown = True
            .ShowInput = False
            .ShowError = False
        End With
        Target.Select
    End If
End Sub



INQUEST-PP=macro
