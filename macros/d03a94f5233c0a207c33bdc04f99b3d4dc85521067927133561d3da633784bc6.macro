Attribute VB_Name = "GraphComm"
'===================================================
'Graph Comm Module
'
' 2002.2 by LSQ
'===================================================
Option Private Module
Option Explicit

'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rownum As Integer = 0, Optional ByVal colNum As Integer = 0)
    If rownum <= 0 Then rownum = 16
    If colNum <= 0 Then colNum = 8
    
    chartObj.left = outGrp.left     '+ 10
    chartObj.top = outGrp.top       '+ 10
    chartObj.Width = outGrp.Offset(0, colNum).left - outGrp.left
    chartObj.Height = outGrp.Offset(rownum, 0).top - outGrp.top
End Sub
'
'condtion : ActiveChart
'Font Size
'
Sub grp_AreaFont(ByVal fontSize As Integer)
    Dim bScrUpdate As Boolean

    bScrUpdate = Application.ScreenUpdating
    Application.ScreenUpdating = True
    
    ActiveChart.ChartArea.Select
    'Selection.AutoScaleFont = True
    With Selection.Font
'        .Name = "|fffd|l|fffd|r |fffd||fffd||fffd||fffd|"
        .Size = fontSize
'        .Strikethrough = False
'        .Superscript = False
'        .Subscript = False
'        .OutlineFont = False
'        .Shadow = False
'        .Underline = xlUnderlineStyleNone
'        .ColorIndex = xlAutomatic
'        .Background = xlAutomatic
    End With
    
    Application.ScreenUpdating = bScrUpdate
End Sub
'
'=== EOF ===
Attribute VB_Name = "MCDT_ITM"
'*===============================================
'*  |fffd||fffd||fffd||68a||502||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|                      *
'*  |fffd||693|I|fffd|F                                      *
'*      |fffd|f|fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd|{|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30d||c42c|  *
'*                                              *
'*  DATE : Jun 2003                             *
'*  BY : PYJ                                    *
'*                                              *
'*  FILE NAME : MCDT_ITM                        *
'===============================================*/
Option Explicit
Option Private Module

'*
'* |fffd||fffd||fffd|n|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||c42c|
'*
'* |fffd||fffd||fffd||fffd||fffd|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X(Matrix)|fffd||c42c|
'* |fffd||fffd||fffd||fffd|: d = sqrt ( 2 |fffd|~ ( 1 - r ) ),  r : |fffd||fffd||fffd||58c|W|fffd||fffd|
'*
Function makeInitClusterLayer_ITM(ptData As CLUSTER_LAYER_0303) As Boolean
    Dim i As Integer, j As Integer, itemnum As Integer
    Dim dR As Double, dDist As Double
    Dim rgeData As Range, rge1 As Range, rge2 As Range

    Set rgeData = g_aMClstDlg.rgeDataIn.Cells(2, 2)
    itemnum = g_aMClstDlg.itemnum

    '/*====== |fffd||209||fffd||fffd||308||fffd|i|fffd||fffd||fffd||fffd| D-CLSN2.bas |fffd||fffd| 21210 - 21420 |fffd|s|fffd||fffd||fffd|Q|fffd||182||fffd||fffd||fffd| =====*/
    '//-- code that finding the Correlation Matrix ommitted here --

    '//|fffd||fffd||fffd||fffd||fffd|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    '//based on |fffd||fffd||fffd||583|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X (old symbol: g_aCLayerR0303->ds [j][k] = |fffd||fffd||fffd||583|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X)
    Set rge1 = rgeData.Range("A1:A" & g_aMClstDlg.smpNum_all)
    For i = 0 To itemnum - 1
        ptData.dmDs(i, i) = 0
        For j = i + 1 To itemnum - 1
            Set rge2 = rge1.Offset(0, j - i)
            dR = WorksheetFunction.Correl(rge1, rge2)
            If dR = DBL_INFTY Then           'ERROR
                MsgBox ERR_CLS_04
                makeInitClusterLayer_ITM = False
                Exit Function
            ElseIf dR > 1 Then               '|fffd||fffd||fffd|x|fffd||fffd||fffd| avoided
                dR = 1
            ElseIf dR < -1 Then              '|fffd||fffd||fffd|x|fffd||fffd||fffd| avoided
                dR = -1
            End If
            dDist = 2 * (1 - dR)
            If g_aMClstDlg.bDistSqrt Then dDist = Sqr(dDist)   'DIST DEF MDF HERE; H15.5.20 LSQ
            ptData.dmDs(i, j) = dDist
            ptData.dmDs(j, i) = dDist
        Next j
        Set rge1 = rge1.Offset(0, 1)
    Next i

    '|fffd||fffd||fffd||311||fffd||fffd||fffd||fffd|
    ptData.nClustNum = itemnum             'cluster number
    ptData.nMapSize = itemnum
    For j = 0 To itemnum - 1
        ptData.nmClsId(j) = j + 1           'cluster ID set; size = clustNum
        ptData.nmClsIdMap(j) = j + 1        'cluster ID map to the item
    Next j

    makeInitClusterLayer_ITM = True
End Function

'=== EOF ===
Attribute VB_Name = "MCDist"
'*===============================================
'*  |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|          *
'*                                              *
'*  Jun 2003, PYJ                               *
'*                                              *
'*  FILE NAME : MCDIST                          *
'===============================================*/
Option Explicit
Option Private Module

'*
'* |fffd||608b||fffd|w|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|A|fffd||608b||fffd|{|fffd|P|fffd|w|fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||590||fffd|
'*
'* |fffd||fffd||fffd||fffd|:
'*  1).|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|\|fffd||fffd||fffd||301|i|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||34f||fffd|O|fffd|p|fffd|f|fffd|[|fffd|^|fffd|L|fffd||fffd||fffd||142|n|fffd|j|fffd|j;
'*  2).|fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||7c2||fffd|v|fffd|Z|fffd||fffd||fffd|@|fffd|t|fffd||fffd||fffd|O;
'*      |fffd||152|Z|fffd||fffd||fffd||fffd||fffd|@, |fffd||152||fffd||fffd||fffd||fffd||fffd||fffd|@, |fffd|Q|fffd||fffd||fffd||3d6|@, |fffd|d|fffd|S|fffd|@, |fffd|E|fffd|H|fffd|[|fffd|h|fffd|@|fffd|B
'* |fffd|o|fffd||fffd|:
'*  1).|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|\|fffd||fffd||fffd||301|i|fffd|S|fffd||102||303|f|fffd|[|fffd|^|fffd|j;
'*  2).no1, no2, ds
'*
'*
Function distanceRecurring_030313(ptDSdtIn As CLUSTER_LAYER_0303, ptDSdtOut As CLUSTER_LAYER_0303, _
        no1 As Integer, no2 As Integer, ds As Double) As Boolean
    Dim i As Integer, nTmpId As Integer
    Dim nClustNum As Integer, nMinVi As Integer, nMinVj As Integer, nClsIdI As Integer, nClsIdJ As Integer
    Dim bRtn As Boolean

    nClustNum = ptDSdtIn.nClustNum

    '|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30d||14f||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|
    ds = FindMinValAndId(ptDSdtIn, nClsIdI, nClsIdJ, nMinVi, nMinVj)

    no1 = findMapNo_by_clsid(nClsIdI, ptDSdtIn)
    no2 = findMapNo_by_clsid(nClsIdJ, ptDSdtIn)

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||52c90||fffd|
    ptDSdtOut.nClustNum = nClustNum - 1

    For i = 0 To nClustNum - 2
        If i >= nMinVj Then       'replace the later one
            ptDSdtOut.nmClsId(i) = ptDSdtIn.nmClsId(i + 1)
        Else
            ptDSdtOut.nmClsId(i) = ptDSdtIn.nmClsId(i)
        End If
    Next i

    ptDSdtOut.nMapSize = ptDSdtIn.nMapSize

    For i = 0 To ptDSdtIn.nMapSize - 1
        nTmpId = ptDSdtIn.nmClsIdMap(i)
        ptDSdtOut.nmClsIdMap(i) = IIf(nTmpId = nClsIdJ, nClsIdI, nTmpId)
    Next i

    '|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||315||3cd|X
    bRtn = ChangeDistData(ptDSdtIn, ptDSdtOut, nMinVi, nMinVj, nClsIdI, nClsIdJ)
    If Not bRtn Then MsgBox ERR_CLS_02
    distanceRecurring_030313 = bRtn
End Function

'|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||315||3cd|X
Private Function ChangeDistData(ptDSdtIn As CLUSTER_LAYER_0303, ptDSdtOut As CLUSTER_LAYER_0303, _
        nMinVi As Integer, nMinVj As Integer, nClsIdI As Integer, nClsIdJ As Integer) As Boolean
    Dim i As Integer, j As Integer, ii As Integer, jj As Integer
    Dim nClustNum As Integer, np As Integer, nq As Integer
    Dim dSrt As Double
    Dim bRtn As Boolean
    
    nClustNum = ptDSdtIn.nClustNum
    np = findSize_by_clsid(nClsIdI, ptDSdtIn)
    nq = findSize_by_clsid(nClsIdJ, ptDSdtIn)
    If np <= 0 Or nq <= 0 Then
        ChangeDistData = False
        Exit Function
    End If

    For i = 0 To nClustNum - 2
        For j = i + 1 To nClustNum - 2
            If i = nMinVi Or j = nMinVi Then
                bRtn = GetSrt(i, j, nMinVi, nMinVj, ptDSdtIn, np, nq, dSrt)
                If Not bRtn Then
                    ChangeDistData = False
                    Exit Function
                End If
                ptDSdtOut.dmDs(i, j) = dSrt
            ElseIf i < nMinVj And j < nMinVj Then
                ptDSdtOut.dmDs(i, j) = ptDSdtIn.dmDs(i, j)
            Else
                ii = IIf(i >= nMinVj, i + 1, i)
                jj = IIf(j >= nMinVj, j + 1, j)
                ptDSdtOut.dmDs(i, j) = ptDSdtIn.dmDs(ii, jj)
            End If
        Next j
    Next i

    ChangeDistData = True
End Function

Private Function GetSrt(i As Integer, j As Integer, nMinVi As Integer, nMinVj As Integer, _
        ptDSdtIn As CLUSTER_LAYER_0303, np As Integer, nq As Integer, dSrt As Double) As Boolean
    Dim jj As Integer, nTmpId As Integer, nr As Integer, nFlgDS As Integer, nTmp As Integer
    Dim dSpq As Double, dSrp As Double, dSrq As Double
    
    nFlgDS = g_aMClstDlg.flgGrpDist
    dSpq = ptDSdtIn.dmDs(nMinVi, nMinVj)
    jj = IIf(j >= nMinVj, j + 1, j)
    If j = nMinVi Then
        dSrp = ptDSdtIn.dmDs(i, nMinVi)
        dSrq = ptDSdtIn.dmDs(i, nMinVj)
        nTmpId = ptDSdtIn.nmClsId(i)
        nr = findSize_by_clsid(nTmpId, ptDSdtIn)
    Else
        dSrp = ptDSdtIn.dmDs(jj, nMinVi)
        dSrq = ptDSdtIn.dmDs(jj, nMinVj)
        nTmpId = ptDSdtIn.nmClsId(jj)
        nr = findSize_by_clsid(nTmpId, ptDSdtIn)
    End If
    If nr <= 0 Then
        GetSrt = False
        Exit Function
    End If
    Select Case nFlgDS
        Case DIST_MIN           '/*|fffd||152|Z|fffd||fffd||fffd||fffd|*/
            dSrt = IIf(dSrp < dSrq, dSrp, dSrq)
        Case DIST_MAX           '/*|fffd||152||fffd||fffd||fffd||fffd||fffd|*/
            dSrt = IIf(dSrp > dSrq, dSrp, dSrq)
        Case DIST_GAVG          '/*|fffd|Q|fffd||fffd||fffd||fffd|*/
            dSrt = (np * dSrp + nq * dSrq) / (np + nq)
        Case DIST_JUSI          '/*|fffd|d|fffd|S|fffd|@*/
            dSrt = np * dSrp / (np + nq) + nq * dSrq / (np + nq) - np * nq * dSpq / (np + nq) ^ 2
        Case Else 'DIST_WOUD:   '/*|fffd|E|fffd|H|fffd|[|fffd|h|fffd|@*/
            nTmp = np + nq + nr
            dSrt = (np + nr) * dSrp / nTmp + (nq + nr) * dSrq / nTmp - nr * dSpq / nTmp
    End Select
    GetSrt = True
End Function

'|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30d||14f||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function FindMinValAndId(ptDSdtIn As CLUSTER_LAYER_0303, nClsIdI As Integer, nClsIdJ As Integer, _
        nMinVi As Integer, nMinVj As Integer) As Double
    Dim nClustNum As Integer
    Dim dMinVal As Double, dTmp As Double
    Dim i As Integer, j As Integer
    
    nClustNum = ptDSdtIn.nClustNum
    dMinVal = DBL_INFTY                     '|fffd||fffd||fffd||fffd||fffd|l
    For i = 0 To nClustNum - 1
        For j = i + 1 To nClustNum - 1
            dTmp = ptDSdtIn.dmDs(i, j)
            If dTmp < dMinVal Then           '/* |fffd||14f||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd| */
                dMinVal = dTmp
                nMinVi = i
                nMinVj = j
            End If
            ptDSdtIn.dmDs(j, i) = dTmp      '/* |fffd||38f||309||fffd| */
        Next j
    Next i
    
    nClsIdI = ptDSdtIn.nmClsId(nMinVi)
    nClsIdJ = ptDSdtIn.nmClsId(nMinVj)
    FindMinValAndId = dMinVal
End Function

'
'return 0 ERROR else > 0 (the first element no 1based, which clsid equal to the given one)
'
Function findMapNo_by_clsid(nClsId As Integer, pLayer As CLUSTER_LAYER_0303) As Integer
    Dim i As Integer, nRtn As Integer

    nRtn = 0
    For i = 0 To pLayer.nMapSize - 1
        If pLayer.nmClsIdMap(i) = nClsId Then nRtn = i + 1: Exit For
    Next i

    findMapNo_by_clsid = nRtn
End Function

'
'return -1 ERROR else >= 0 (id in the clsid[], 0 based)
'
Function findClsId_by_clsid(nClsId As Integer, pLayer As CLUSTER_LAYER_0303) As Integer
    Dim i As Integer, nRtn As Integer

    For i = 0 To pLayer.nClustNum - 1
        If pLayer.nmClsId(i) = nClsId Then
            findClsId_by_clsid = i
            Exit Function
        End If
    Next i

    findClsId_by_clsid = -1
End Function

'
'return >= 0
'
Private Function findSize_by_clsid(nClsId As Integer, pLayer As CLUSTER_LAYER_0303) As Integer
    Dim i As Integer, ct As Integer
    
    ct = 0
    For i = 0 To pLayer.nMapSize - 1
        If pLayer.nmClsIdMap(i) = nClsId Then ct = ct + 1
    Next i
    
    findSize_by_clsid = ct
End Function

'=== EOF ===
Attribute VB_Name = "MCDo"
'********************************************************/
'*  |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||34e||fffd||fffd|s          |fffd|@                      */
'*                                                      */
'*  DATE: 2003.7 by PYJ                                 */
'*                                                      */
'*  FILE NAME: MCDO                                     */
'*                                                      */
'********************************************************/
Option Explicit
Option Private Module

'*
'* |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||34e||fffd||fffd|s
'*
'* |fffd||fffd||fffd|n|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[ : g_aCLayerOut
'*
'* return True--OK; False--ERROR
'*
Function mcDoClustAna() As Boolean
    Dim i As Integer, nCount As Integer
    Dim nAnaClsNum As Integer, nIniClsNum As Integer
    Dim nLoopStop As Integer, nLoopN As Integer, nLoop50 As Integer
    Dim no1 As Integer, no2 As Integer
    Dim dDist As Double

    '|fffd||fffd|{|fffd||752||fffd|
    nIniClsNum = g_aCLayerFST.nClustNum          '|fffd||fffd||fffd|n|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|
    nAnaClsNum = g_aMClstDlg.outClsNum      '|fffd||695|W|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|
    nLoopStop = nIniClsNum - 1
    nLoopN = nIniClsNum - nAnaClsNum
    nLoop50 = nIniClsNum - INITCLSNUM

    'Check
    If nAnaClsNum < 1 Or nAnaClsNum > nIniClsNum Then
        MsgBox ERR_CLS_06
        mcDoClustAna = False
        Exit Function
    End If

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    g_aCLayerGRP = g_aCLayerFST    'default
    g_aCLayerR0303 = g_aCLayerFST  'init
    g_aCLayerOut = g_aCLayerFST    'init
    
    nCount = 0
    For i = 0 To nLoopStop - 1 '|fffd||fffd||fffd||5c2||102||311|w|fffd||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|v|fffd|Z
        g_aCLayerIn = g_aCLayerOut

        '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||7c2||fffd|
        If Not distanceRecurring_030313(g_aCLayerIn, g_aCLayerOut, no1, no2, dDist) Then
            mcDoClustAna = False
            Exit Function
        End If
        '|fffd||152|Z|fffd||fffd||fffd||fffd||fffd||fffd|
        g_amAllPairDist(i).no1 = no1
        g_amAllPairDist(i).no2 = no2
        g_amAllPairDist(i).dDist = dDist

        '|fffd||fffd|}|fffd|p|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[
        If i > nLoop50 - 1 Then
            g_amGrpPairDist(nCount).no1 = no1
            g_amGrpPairDist(nCount).no2 = no2
            g_amGrpPairDist(nCount).dDist = dDist
            nCount = nCount + 1
        End If

        '|fffd|w|fffd||fffd|w|fffd||30c||fffd||fffd||282||315||6d1||fffd|
        If i = nLoopN - 1 Then g_aCLayerR0303 = g_aCLayerOut

        '50|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||282||315||6d1||fffd|
        If i = nLoop50 - 1 Then g_aCLayerGRP = g_aCLayerOut
    Next i
    
    '|fffd||fffd||fffd||290||fffd||fffd||fffd|
    Call arrangeResult_setClsMap

    mcDoClustAna = True
End Function

'
'1.|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||255||fffd||fffd||fffd|
'2.50|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|, |fffd|w|fffd||fffd|w|fffd||30c||fffd||fffd||282||fffd|sample map |fffd||c42c| (for sample cluster)
'return: True--OK; False--ERROR
'
Private Function arrangeResult_setClsMap() As Boolean
    Dim bRtn As Boolean
    Dim i As Integer, nLen As Integer, nMapSize As Integer
    Dim strName As String
    
    nMapSize = g_aCLayerR0303.nMapSize

    '|fffd||151||50c9||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd| for |fffd||fffd||fffd|`|fffd|}
    g_nMaxLabLenG = 0
    For i = 0 To nMapSize - 1
        strName = Trim(getClsName(i + 1))
        nLen = Len(strName)
        If nLen > g_nMaxLabLenG Then g_nMaxLabLenG = nLen
    Next i

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||255||fffd||fffd||fffd|
    bRtn = setClsSizeInOrder(g_aCLayerR0303)
    If bRtn And g_aMClstDlg.bSmpCls Then
        bRtn = arrangeResult_setClsMap_Smp
    End If
    arrangeResult_setClsMap = bRtn
End Function
    
'====== for sample cluster, related the nClsId to sample list ======
Private Function arrangeResult_setClsMap_Smp() As Boolean
    Dim i As Integer, col As Integer, nColE As Integer
    Dim SmpNum As Integer, nNoDataNum As Integer, nOrgClsNum As Integer
    Dim nIniClsNum As Integer, nIdR As Integer, nIdGrp As Integer
    Dim nGrpClsNoCol As Integer, nClsNoCol As Integer, nFstNoCol As Integer, nPatNoCol As Integer
    Dim nFstClsNo As Integer, nIdFst As Integer, nClsId As Integer
    Dim rgeData As Range
    Dim bOrgCls As Boolean
    
    SmpNum = g_aMClstDlg.smpNum_dat  '|fffd|L|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    nNoDataNum = g_aMClstDlg.smpNum_left - g_aMClstDlg.smpNum_dat
    nOrgClsNum = g_aMClstDlg.numOrgCls
    
    nColE = g_aMClstDlg.itemnum
    nGrpClsNoCol = DEF_50clsNoCol(nColE)   'saved to temp sheet
    nClsNoCol = DEF_clsNoCol(nColE)        'saved to temp sheet
    nFstNoCol = DEF_datNoCol(nColE)
    nPatNoCol = DEF_patNoCol(nColE)
    nIniClsNum = g_aCLayerFST.nClustNum          '|fffd||fffd||fffd|n|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|
    bOrgCls = g_aMClstDlg.bMakeOrgCls

    col = IIf(g_aMClstDlg.bPatBunui, nPatNoCol, nFstNoCol)
    Set rgeData = g_aMClstDlg.rgeDataIn.Range("B2")

    For i = 0 To SmpNum - 1
        '1.Get Initial Cluster No (if no pattern classify) or Pattern No in the sample list.
        '  That id called nFstClsNo, the total number of nFstClsNo <= 1296 (within clsidmap[])
        '2.Find the position of the nFstClsNo in the g_aCLayerFST->clsidmap[], say nIdFst (0based)
        '  g_aCLayerFST->clsidmap[nIdFst] == nFstClsNo
        '3.Get nClsId in g_aCLayerR0303->clsidmap[], that is
        '  nClsId = g_aCLayerR0303->clsidmap[nIdFst]
        '4.Find the JUN BAN of nClsId (step3) in g_aCLayerR0303->nClsId[], that is the result cluster no;
        
        nFstClsNo = Int(rgeData(i + 1, col))

        nIdFst = findMapNo_by_clsid(nFstClsNo, g_aCLayerFST)
        If nIdFst <= 0 Then
            MsgBox " [|fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[] : arrangeResult_setClsMap 2"
            arrangeResult_setClsMap_Smp = False
            Exit Function
        End If

        nClsId = g_aCLayerR0303.nmClsIdMap(nIdFst - 1)
        nIdR = findClsId_by_clsid(nClsId, g_aCLayerR0303)
        If bOrgCls Then nIdR = nIdR + 1 'adjusted because of |fffd||fffd||fffd|_|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[ = 1
        rgeData(i + 1, nClsNoCol) = nIdR + 1

        '50 cls
        If nIniClsNum > INITCLSNUM Then
            nClsId = g_aCLayerGRP.nmClsIdMap(nIdFst - 1)
            nIdGrp = findClsId_by_clsid(nClsId, g_aCLayerGRP)
            rgeData(i + 1, nGrpClsNoCol) = nIdGrp + 1
        End If
    Next i
    Set rgeData = rgeData.Offset(SmpNum, 0)

    '|fffd||fffd||fffd|O|fffd|T|fffd||fffd||fffd|v|fffd||fffd|
    For i = 0 To nNoDataNum - 1
        rgeData(i + 1, nClsNoCol) = "|fffd||fffd||fffd|O"  '\04|fffd||fffd||fffd|O
    Next i
    Set rgeData = rgeData.Offset(nNoDataNum, 0)
    '|fffd||fffd||fffd|_|fffd|N|fffd||fffd||fffd|X|fffd|^
    If bOrgCls Then
        For i = 0 To nOrgClsNum - 1
            rgeData(i + 1, nClsNoCol) = 1
            'Set rgeData = rgeData.Offset(1, 0)
        Next i
    End If
    arrangeResult_setClsMap_Smp = True
End Function

'
'for Sample Cluster and Item Cluster
'
'use g_nmSizeArray, GidArray[]
'return: True--OK; False--ERROR
'
Private Function setClsSizeInOrder(pLayer As CLUSTER_LAYER_0303) As Boolean
    Dim i As Integer, nId As Integer
    Dim nClsNum As Integer, nMapSize As Integer
    
    nClsNum = pLayer.nClustNum
    nMapSize = pLayer.nMapSize

    'init
    For i = 0 To nClsNum - 1
        g_nmSizeArray(i) = 0
    Next i

    'count
    For i = 0 To nMapSize - 1
        nId = findClsId_by_clsid(pLayer.nmClsIdMap(i), pLayer)
        If nId < 0 Or nId >= nClsNum Then
            MsgBox "Error"
            setClsSizeInOrder = False
            Exit Function
        End If
        g_nmSizeArray(nId) = g_nmSizeArray(nId) + 1
    Next i
    'find jun id
    Call JunId(g_nmIdArray1, g_nmSizeArray, nClsNum, False)

    'JUN
    For i = 0 To nClsNum - 1
        nId = g_nmIdArray1(i)  'JUN id
        g_nmIdArray2(i) = pLayer.nmClsId(nId)
    Next i
    For i = 0 To nClsNum - 1
        pLayer.nmClsId(i) = g_nmIdArray2(i) 'in order
    Next i

    'JUN
    For i = 0 To nClsNum - 1
        nId = g_nmIdArray1(i) 'JUN id
        g_nmIdArray2(i) = g_nmSizeArray(nId)
    Next i
    For i = 0 To nClsNum - 1
        g_nmSizeArray(i) = g_nmIdArray2(i)   'in order
    Next i

    setClsSizeInOrder = True
End Function

'*
'* bAscending=True--|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(smallJunId); bAscending=False--|fffd||50ab||fffd||fffd||fffd||fffd|(largeJunId)|fffd|G
'*
Private Function JunId(nmIdx() As Integer, nmVal() As Integer, n As Integer, bAscending As Boolean)
    Dim i As Integer, j As Integer, nId As Integer
    Dim dVal As Double

    For i = 0 To n - 1
        If bAscending Then
            dVal = DBL_INFTY            '/* maximun */
        Else
            dVal = -DBL_INFTY           '/* minimun */
        End If
        For j = 0 To n - 1
            If ((Not bAscending) And nmVal(j) > dVal) Or (bAscending And nmVal(j) < dVal) Then
                If Not isInId(j, nmIdx, i) Then
                    nId = j
                    dVal = nmVal(nId)
                End If
            End If
        Next j
        nmIdx(i) = nId
    Next i
End Function

'*
'*
'*
Private Function isInId(no As Integer, pt() As Integer, n As Integer) As Boolean
    Dim i As Integer
    Dim bRtn As Boolean
    
    bRtn = False
    For i = 0 To n - 1
        If pt(i) = no Then bRtn = True: Exit For
    Next i

    isInId = bRtn
End Function

'=== EOF ===
Attribute VB_Name = "MCOutItem"
'********************************************************/
'*  |fffd||fffd||fffd||695||fffd||fffd||342||30c||fffd||fffd||28f|o|fffd||fffd|          |fffd|@                      */
'*                                                      */
'*  Jun 2003, PYJ                                       */
'*                                                      */
'*  FILE NAME: MCOUT_IT.C   (cut from MCOUT.C)          */
'*                                                      */
'********************************************************/
Option Explicit
Option Private Module

'===============================================================================
'*
'* |fffd|o|fffd||353||fffd||fffd|e:
'*  |fffd||fffd||fffd||68a||502||30b||fffd||fffd||fffd||fffd|\, |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|K|fffd||355|\, |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28d||fffd||fffd||696||fffd||fffd|\
'*  return the graph output row
'*
Function mcOutPut_ITM(ByVal rgeOutBgn As Range)
    Dim nRowUsed As Integer

    '|fffd||fffd||fffd||fffd||fffd|\
    nRowUsed = output_PairDistHyo(HYO_ITM_PAIR, rgeOutBgn)

    '|fffd|K|fffd||355|\
    Set rgeOutBgn = rgeOutBgn.Offset(nRowUsed + 1, 0)
    nRowUsed = output_KiboHyo(rgeOutBgn)

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28d||fffd||fffd||695|\
    Set rgeOutBgn = rgeOutBgn.Offset(nRowUsed + 1, 0)
    nRowUsed = output_ClsBetuHyo_ITM(rgeOutBgn)
End Function

'|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28d||fffd||fffd||695|\
'return row number used
Private Function output_ClsBetuHyo_ITM(ByVal rgeOutBgn As Range) As Integer
    Dim i As Integer, nRowUsed As Integer, nRowUsed1 As Integer
    Dim nClsId As Integer, nClsNum As Integer
    
    '|fffd||fffd|{|fffd||752||fffd|
    nClsNum = g_aCLayerR0303.nClustNum

    rgeOutBgn = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28d||fffd||fffd||696||fffd|"
    rgeOutBgn.Font.Bold = True
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)

    Call dispHead_ClsDetailHyo(nClsNum, rgeOutBgn)
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)

    For i = 0 To nClsNum - 1
        nClsId = g_aCLayerR0303.nmClsId(i)
        nRowUsed1 = output_ClsBetuHyo_ITMBody(nClsId, g_aCLayerR0303, rgeOutBgn(1, 1 + i))
        If nRowUsed1 > nRowUsed Then nRowUsed = nRowUsed1
    Next i
    output_ClsBetuHyo_ITM = nRowUsed
End Function

'
'|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28d||fffd||fffd||fffd|
'
'return the element number in the cluster clsid
'
Private Function output_ClsBetuHyo_ITMBody(nIdFlag As Integer, pLayer As CLUSTER_LAYER_0303, ByVal rgeOutBgn As Range) As Integer
    Dim j As Integer, nCount As Integer, nMpSize As Integer
    Dim rge As Range
    
    nMpSize = pLayer.nMapSize
    nCount = 0

    For j = 0 To nMpSize - 1
        If pLayer.nmClsIdMap(j) = nIdFlag Then
            rgeOutBgn(nCount + 1, 1) = getClsName(j + 1)
            nCount = nCount + 1
        End If
    Next j
    If nCount > 0 Then
        '|fffd|r|fffd||fffd|
        Set rge = rgeOutBgn.Range("A1:A" & nCount)
        Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)
    End If
    output_ClsBetuHyo_ITMBody = nCount
End Function

'=== EOF ===
Attribute VB_Name = "MCOutSmp"
'********************************************************/
'*  |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||282||30f|o|fffd||fffd|                  |fffd|@          */
'*                                                      */
'*  Jun 2003, PYJ                                       */
'*                                                      */
'*  FILE NAME: MCOUT.C                                  */
'*                                                      */
'********************************************************/
Option Explicit
Option Private Module

'==============================================================================
'*
'* |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||a347||fffd||30f|o|fffd||34a||590||fffd|
'* return the row number used by |fffd|O|fffd||fffd||fffd||fffd||fffd||fffd|
'*
Function mcOutPut_SMP(ByVal rgeOutBgn As Range) As Integer
    Dim nRowUsedByPreTreat As Integer, nRowUsed As Integer, nColUsed As Integer
    Dim nClassifyType As Integer, nGrpClsHyoFlg As Integer
    Dim rge1 As Range, rge2 As Range

    '|fffd||fffd|{|fffd||752||fffd|
    'nPairNum = g_aCLayerFST.nClustNum - 1
    nClassifyType = getSmpCls_ClassifyType()
    nGrpClsHyoFlg = getHyoFlg(nClassifyType)

    '|fffd|O|fffd||fffd||fffd||fffd||fffd||fffd|
    nRowUsed = 0
    If nClassifyType = CLASSIFY_NY Then
        Set rge1 = rgeOutBgn
        nRowUsed = output_PairDistHyo(HYO_SMP_PAIR, rge1)        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\
        Call output_grpClsSmpHyo(rgeOutBgn(4, 5))                '50|fffd||fffd||fffd||fffd||fffd||5fd||fffd||fffd||fffd|\
        nRowUsed = nRowUsed + 2
    ElseIf nClassifyType = CLASSIFY_YY_Y Then
        Set rge1 = rgeOutBgn
        nRowUsed = output_PatternKensu(rge1(4, 1))               '|fffd||fffd||fffd||fffd||755||28c||fffd||fffd||fffd||fffd|\
        nRowUsed = output_PairDistHyo(HYO_PAT_PAIR, rge1(1, 4))  '|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\
        Call output_grpClsSmpHyo(rge1(4, 8))                     '50|fffd||fffd||fffd||fffd||fffd||5fd||fffd||fffd||fffd|\
        nRowUsed = nRowUsed + 2
    ElseIf nClassifyType = CLASSIFY_YY Then
        nRowUsed = output_PatternKensu(rgeOutBgn)                '|fffd||fffd||fffd||fffd||755||28c||fffd||fffd||fffd||fffd|\
    End If
    nRowUsedByPreTreat = nRowUsed

    '|fffd||fffd|}|fffd|p|fffd||fffd||fffd||fffd||fffd|\
    Set rge1 = rgeOutBgn.Offset(nRowUsed, 0)
    nRowUsed = output_PairDistHyo(nGrpClsHyoFlg, rge1)

    '|fffd|K|fffd||355|\
    Set rge1 = rge1.Offset(nRowUsed + 1, 0)
    nRowUsed = output_KiboHyo(rge1)

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||28c||fffd||fffd|f|fffd|\
    Set rge1 = rge1.Offset(nRowUsed + 1, 0)
    nColUsed = output_ClsBetuHyo_SMP(rge1)
    
    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd| - |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|\
    Set rge1 = rge1.Offset(0, nColUsed + 1)
    nRowUsed = output_SmpClsHyo(nClassifyType, rge1)
    mcOutPut_SMP = nRowUsedByPreTreat
End Function

'
'Display the header row
'
'Max : |fffd||fffd||fffd||fffd||fffd|No, [|fffd||fffd||fffd||fffd||656||fffd||fffd||fffd|], [|fffd||fffd||fffd||fffd||fffd|No], [50|fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)|fffd||5fd||fffd||fffd|No], |fffd||5fd||fffd||fffd|No
'      []'s may not exist in some cases, but
'      |fffd||fffd||fffd||fffd||fffd|No, |fffd||5fd||fffd||fffd|No always exist
'
'return the output column number;
'
Private Function dispHead_SmpClsHyo(ByVal nClassifyType As Integer, ByVal rgeOutBgn As Range) As Integer
    Dim nColCount As Integer
    Dim rge As Range

    rgeOutBgn = "|fffd||fffd||fffd||fffd||fffd|No."
    nColCount = 1

    If g_aMClstDlg.dlgCom.bSmpTitle Then
        rgeOutBgn(1, nColCount + 1) = "|fffd||fffd||fffd||fffd||656||fffd|"
        nColCount = nColCount + 1
    End If
    If nClassifyType = CLASSIFY_YY Or nClassifyType = CLASSIFY_YY_Y Then
        rgeOutBgn(1, nColCount + 1) = "|fffd||fffd||fffd||fffd||fffd|No."
        nColCount = nColCount + 1
    End If
    If nClassifyType = CLASSIFY_NY Or nClassifyType = CLASSIFY_YY_Y Then
        rgeOutBgn(1, nColCount + 1) = "50|fffd||fffd||fffd||fffd|No."   '|fffd|T|fffd||fffd||fffd|v|fffd||fffd| or |fffd|p|fffd|^|fffd|[|fffd||fffd|
        nColCount = nColCount + 1
    End If

    rgeOutBgn(1, nColCount + 1) = "|fffd||5fd||fffd||fffd|No."
    
    Set rge = rgeOutBgn.Range(Cells(1, 1), Cells(1, nColCount + 1))
    Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)

    dispHead_SmpClsHyo = nColCount
End Function

'
'|fffd||fffd||fffd||fffd||641|E|fffd||5fd||fffd||fffd||fffd|\|fffd||30f|o|fffd||fffd|
'
'Max : |fffd||fffd||fffd||fffd||fffd|No, [|fffd||fffd||fffd||fffd||656||fffd||fffd||fffd|], [|fffd||fffd||fffd||fffd||fffd|No], [50|fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd|)|fffd||5fd||fffd||fffd|No], |fffd||5fd||fffd||fffd|No
'      []'s may not exist in some cases, but
'      |fffd||fffd||fffd||fffd||fffd|No, |fffd||5fd||fffd||fffd|No always exist
'
'return the last row of the table

Private Function output_SmpClsHyo(ByVal nClassifyType As Integer, ByVal rgeOutBgn As Range) As Integer
    Dim itemnum As Integer, SmpNum As Integer, col As Integer
    Dim nSmpNoCol As Integer, nPatNoCol As Integer, nGrpNoCol As Integer, nClsNoCol As Integer, nSmpNmCol As Integer
    Dim rgeData As Range, rgeFrom As Range, rge As Range

    itemnum = g_aMClstDlg.itemnum
    SmpNum = g_aMClstDlg.smpNum_all
    nSmpNmCol = 1
    
    'header
    rgeOutBgn = getSmpClsHyoName(nClassifyType)
    rgeOutBgn.Font.Bold = True
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)
    Call dispHead_SmpClsHyo(nClassifyType, rgeOutBgn)
    Set rgeOutBgn = rgeOutBgn.Offset(1, 0)

    'data range
    Set rgeData = g_aMClstDlg.rgeDataIn.Range("A1")
    nSmpNoCol = DEF_smpNoCol(itemnum)
    nPatNoCol = DEF_patNoCol(itemnum)
    nGrpNoCol = DEF_50clsNoCol(itemnum)
    nClsNoCol = DEF_clsNoCol(itemnum)

    'column copy
    rgeData.Worksheet.Activate
    Set rgeFrom = rgeData.Range(Cells(2, nSmpNoCol + 1), Cells(SmpNum + 1, nSmpNoCol + 1))
    rgeFrom.Copy rgeOutBgn

    col = 2
    If g_aMClstDlg.dlgCom.bSmpTitle Then
        Set rgeFrom = rgeData.Range(Cells(2, nSmpNmCol), Cells(SmpNum + 1, nSmpNmCol))
        rgeFrom.Copy rgeOutBgn(1, col)
        col = col + 1
    End If
    If nClassifyType = CLASSIFY_YY Or nClassifyType = CLASSIFY_YY_Y Then
        Set rgeFrom = rgeData.Range(Cells(2, nPatNoCol + 1), Cells(SmpNum + 1, nPatNoCol + 1))
        rgeFrom.Copy rgeOutBgn(1, col)
        col = col + 1
    End If
    If nClassifyType = CLASSIFY_NY Or nClassifyType = CLASSIFY_YY_Y Then
        Set rgeFrom = rgeData.Range(Cells(2, nGrpNoCol + 1), Cells(SmpNum + 1, nGrpNoCol + 1))
        rgeFrom.Copy rgeOutBgn(1, col)
        col = col + 1
    End If

    Set rgeFrom = rgeData.Range(Cells(2, nClsNoCol + 1), Cells(SmpNum + 1, nClsNoCol + 1))
    rgeFrom.Copy rgeOutBgn(1, col)

    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||50d||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    rgeOutBgn.Worksheet.Activate
    Set rgeFrom = rgeOutBgn.Range(Cells(1, 1), Cells(SmpNum, col))
    Call SortByCol_data(rgeFrom, 1, False)

    '|fffd|r|fffd||fffd|
    Set rge = rgeOutBgn.Range(Cells(1, 1), Cells(SmpNum, col))
    Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)

    output_SmpClsHyo = SmpNum + 3
End Function

'=== EOF ===
Attribute VB_Name = "MCOut_SS"
'********************************************************/
'*  |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||282||30f|o|fffd||34a||590||fffd| (Sample Subset functions)*/
'*                                                      */
'*  Jun 2003, PYJ                                       */
'*                                                      */
'*  FILE NAME: MCOUT_SS                                 */
'*                                                      */
'********************************************************/
Option Explicit
Option Private Module

'===================================================
'50|fffd||fffd||fffd||fffd||fffd||5fd||fffd||fffd||fffd|\
'
Function output_grpClsSmpHyo(ByVal rgeOutBgn As Range)
    Dim i As Integer, nKensu As Integer, SmpNum As Integer, itemnum As Integer, nFstCount As Integer
    Dim nSmpNoCol As Integer, nPatNoCol As Integer, nGrpNoCol As Integer, nFstNoCol As Integer, nDatNoCol As Integer, nFstNo As Integer
    Dim rgeOut As Range, rgeIn As Range, rgeCount As Range, rge As Range
    Dim bPat As Boolean
    
    bPat = g_aMClstDlg.bPatBunui
    SmpNum = g_aMClstDlg.smpNum_dat
    itemnum = g_aMClstDlg.itemnum

    Set rgeOut = rgeOutBgn
    Set rgeIn = g_aMClstDlg.rgeDataIn.Range("B2")
    'title
    rgeOut = "50|fffd||fffd||fffd||fffd||fffd||5fd||fffd||fffd||fffd|\"
    rgeOut.Font.Bold = True
    Set rgeOut = rgeOut.Offset(2, 0)
    rgeOut = "|fffd||5fd||fffd||fffd|No."
    rgeOut(1, 2) = IIf(bPat, "|fffd||fffd||fffd||fffd||fffd|No.", "|fffd||fffd||fffd||fffd||fffd|No.")
    Set rge = rgeOut.Range("A1:B1")
    Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)
    Set rgeOut = rgeOut.Offset(1, 0)

    'data range
    nSmpNoCol = DEF_smpNoCol(itemnum)
    nDatNoCol = DEF_datNoCol(itemnum)
    nPatNoCol = DEF_patNoCol(itemnum)
    nGrpNoCol = DEF_50clsNoCol(itemnum)
    nFstNoCol = IIf(bPat, nPatNoCol, nDatNoCol)

    'put sample no - 50|fffd||fffd||fffd||fffd|, or, pattern no - 50|fffd||fffd||fffd||fffd| pair to the right position

    '50|fffd||fffd||fffd||fffd|
    nFstCount = 0
    For i = 0 To SmpNum - 1
        nFstNo = rgeIn(i + 1, nFstNoCol)
        If nFstNo > nFstCount Then nFstCount = nFstNo
        rgeOut(nFstNo, 1) = rgeIn(i + 1, nGrpNoCol)
        rgeOut(nFstNo, 2) = IIf(bPat, nFstNo, rgeIn(i + 1, nSmpNoCol))
    Next i

    'sort by 50|fffd||fffd||fffd||fffd| : no|fffd||fffd|to|fffd||fffd|
    Set rgeOut = rgeOut.Range("A1:B" & nFstCount)
    Call SortBy2Col_data(rgeOut, 1, False, 2, False)

    '|fffd|r|fffd||fffd|
    Call drawKeiSen_Ptn002a(rgeOut, xlThin, xlThin, 1)
    Set rgeCount = rgeOut.Range("A1:A" & nFstCount)
    Set rgeOut = rgeOut.Range("A1:B1")
    For i = 1 To INITCLSNUM
        nKensu = WorksheetFunction.CountIf(rgeCount, i)
        Set rgeOut = rgeOut.Offset(nKensu, 0)
        Call drawKeiSen_OneEdge(rgeOut, "TOP", xlThin)
    Next i
End Function

'
'Pattern |fffd||28c||fffd||fffd||fffd||fffd|\
'return the next output row
'
Function output_PatternKensu(ByVal rgeOutBgn As Range) As Integer
    Dim i As Integer, nKensu As Integer
    Dim nPatNoCol As Integer, patNum As Integer, nItemNo As Integer, SmpNum As Integer
    Dim rge As Range, rgeData As Range
    
    patNum = g_aCLayerFST.nClustNum         'iniClsNum
    nItemNo = g_aMClstDlg.itemnum
    SmpNum = g_aMClstDlg.smpNum_dat    '|fffd|L|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|

    rgeOutBgn = "|fffd||fffd||fffd||fffd||755||28c||fffd||fffd||fffd||fffd|\"
    rgeOutBgn.Font.Bold = True
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)

    Set rge = rgeOutBgn
    rgeOutBgn = "|fffd||fffd||fffd||fffd||fffd|No."
    rgeOutBgn(1, 2) = "|fffd||fffd||fffd||fffd|"
    Set rgeOutBgn = rgeOutBgn.Offset(1, 0)

    'data range
    nPatNoCol = DEF_patNoCol(nItemNo)
    Set rgeData = g_aMClstDlg.rgeDataIn.Offset(1, nPatNoCol).Range("A1:A" & SmpNum)

    For i = 0 To patNum - 1
        nKensu = WorksheetFunction.CountIf(rgeData, i + 1)

        rgeOutBgn = i + 1
        rgeOutBgn(1, 2) = nKensu
        Set rgeOutBgn = rgeOutBgn.Offset(1, 0)
    Next i
    
    '|fffd|r|fffd||fffd|
    Set rge = rge.Range("A1:B1")
    Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)
    Set rge = rge.Range("A2:B" & patNum + 1)
    Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)

    output_PatternKensu = patNum + 4
End Function

'return the number of columns used
Function output_ClsBetuHyo_SMP(ByVal rgeOutBgn As Range) As Integer
    Dim nColUsed As Integer, nClsNum As Integer
    Dim rge2 As Range
    
    nClsNum = g_aCLayerR0303.nClustNum
    
    rgeOutBgn = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||283|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|"
    rgeOutBgn.Font.Bold = True

    Set rge2 = rgeOutBgn.Offset(2, 0)
    If g_aMClstDlg.bMakeOrgCls Then
        Call dispHead_ClsDetailHyo(-1, rge2)    '|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|
        Set rge2 = rge2.Offset(0, 1)
    End If
    Call dispHead_ClsDetailHyo(nClsNum, rge2)
    Set rge2 = rge2.Offset(0, nClsNum)
    Call dispHead_ClsDetailHyo(0, rge2)         '|fffd||fffd||fffd|O
    
    Set rge2 = rgeOutBgn.Offset(4, 0)
    nColUsed = output_ClsBetuHyo_SMPBody(rge2)
    output_ClsBetuHyo_SMP = nColUsed
End Function

'return the number of columns used
Private Function output_ClsBetuHyo_SMPBody(ByVal rgeOutBgn As Range) As Integer
    Dim i As Integer, nNum As Integer
    Dim nmCount() As Integer
    Dim nClsNo As Integer, nClsNoCol As Integer
    Dim itemnum As Integer, nSmpNumAll As Integer, nOClsNum As Integer
    Dim rge As Range, rgeData As Range
    
    itemnum = g_aMClstDlg.itemnum
    nSmpNumAll = g_aMClstDlg.smpNum_all
    nOClsNum = g_aMClstDlg.saveOutClsNum

    'data range
    Set rgeData = g_aMClstDlg.rgeDataIn.Range("A2")
    nClsNoCol = DEF_clsNoCol(itemnum)

    ReDim nmCount(1 To nOClsNum + 1)
    For i = 0 To nSmpNumAll - 1
        nClsNo = val(rgeData(i + 1, nClsNoCol + 1))

        If nClsNo < 1 Or nClsNo > nOClsNum Then nClsNo = nOClsNum + 1
        rgeOutBgn(nmCount(nClsNo) + 1, nClsNo) = rgeData(i + 1, 1)
        nmCount(nClsNo) = nmCount(nClsNo) + 1
    Next i
    '|fffd|r|fffd||fffd|
    For i = 1 To nOClsNum + 1
        nNum = nmCount(i)
        If nNum > 0 Then
            Set rge = rgeOutBgn.Offset(0, i - 1).Range("A1:A" & nNum)
            Call drawKeiSen_Ptn002a(rge, xlThin, xlThin, 1)
        End If
    Next i

    ReDim nmCount(1)
    output_ClsBetuHyo_SMPBody = nOClsNum + 1
End Function

'int getPatSmpNum_byClsId (int nClsNo)   'moved to MCOutComm

'
'return : CLASSIFY_*
'
Function getSmpCls_ClassifyType() As Integer
    Dim bPat As Boolean
    
    bPat = g_aMClstDlg.bPatBunui

    If g_aCLayerFST.nMapSize <= INITCLSNUM Then
        getSmpCls_ClassifyType = IIf(bPat, CLASSIFY_YY, CLASSIFY_NN)
    Else
        getSmpCls_ClassifyType = IIf(bPat, CLASSIFY_YY_Y, CLASSIFY_NY)
    End If
End Function

'
'return : HYO_*
'
Function getHyoFlg(nClassifyType As Integer) As Integer
    Select Case nClassifyType
    Case CLASSIFY_NN
        getHyoFlg = HYO_SMP_PAIR
    Case CLASSIFY_NY
        getHyoFlg = HYO_SMPGRP_PAIR
    Case CLASSIFY_YY
        getHyoFlg = HYO_PAT_PAIR
    Case CLASSIFY_YY_Y
        getHyoFlg = HYO_PATGRP_PAIR
    Case Else
        getHyoFlg = HYO_NOT_DEFINED
    End Select
End Function

Function getSmpClsHyoName(nClassifyType As Integer) As String
    Select Case nClassifyType
    Case CLASSIFY_NN
        getSmpClsHyoName = " |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|\"
    Case CLASSIFY_YY
        getSmpClsHyoName = " |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|E|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|\"
    Case CLASSIFY_NY
        getSmpClsHyoName = " |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|E50|fffd||fffd||fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|\"
    Case CLASSIFY_YY_Y
        getSmpClsHyoName = " |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|E|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd|E50|fffd||fffd||fffd||fffd||fffd|E|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|\"
    Case Else
        getSmpClsHyoName = "Unknown Table Name" 'ERROR VALUE
    End Select
End Function

'=== EOF ===
Attribute VB_Name = "MClsGraph"
'************************************************************/
'* |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||34e||fffd||fffd|`|fffd|} |fffd|o|fffd||343|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|                      */
'*                                                          */
'*  Jun 2003, PYJ                                           */
'*                                                          */
'*  FILE NAME: MClsGraph                                    */
'*                                                          */
'************************************************************/
Option Explicit
Option Private Module

Type RECT
    left As Double
    top As Double
    right As Double
    bottom As Double
End Type

'/* |fffd||fffd||fffd||fffd||fffd||315|`|fffd||fffd||fffd||fffd| */
Const CLS_MOJI_HEIGHT As Integer = 12
Const MAXLAYERN As Integer = 201       '|fffd||151||fffd|f|fffd|[|fffd|^|fffd||fffd|

'*
'* |fffd||fffd||fffd|`|fffd|}|fffd||315|`|fffd||fffd||590||fffd|
'*
'* |fffd||fffd||fffd||fffd|:
'*  g_amGrpPairDist []
'
'H15.6.25 LSQ mdf : bSmpName added
'
Function MCDrawGraf(ByVal rgeOutBgn As Range)
    Dim chtObj As ChartObject
    Dim shpTmpLine As Shape, shpTmpMoji As Shape
    Dim dLabWd As Double, dLabHt As Double
    Dim aChartRect As RECT, aGraphRect As RECT
    Dim dYBottom As Double
    Dim dColWidth As Double, dColHight As Double, dx As Double, dY As Double
    Dim nWinWidth As Integer, nWinHight As Integer, grpRowNum As Integer, grpColNum As Integer
    Dim dXStep As Double, dYStep As Double, dYTitle As Double
    Dim i As Integer, rtn As Integer
    Dim strTmpLabName As String

    Dim nClsNo(0 To MAXLAYERN - 1) As Integer
    Dim dClsNoX(0 To MAXLAYERN - 1) As Double
    Dim dClsNoY(0 To MAXLAYERN - 1) As Double
    Dim nClsNum As Integer
    Dim nClsN As Integer, nLableLen As Integer
    Dim bLabDisp As Boolean, bSmpCls As Boolean, bYoko As Boolean
    Dim bTitle As Boolean, bSmpName As Boolean
    
    bSmpCls = g_aMClstDlg.bSmpCls
    bTitle = g_aMClstDlg.dlgCom.bTitle
    bSmpName = g_aMClstDlg.dlgCom.bSmpTitle

    '|fffd||fffd||509||fffd||fffd||311|w|fffd||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|
    nClsNum = g_aCLayerGRP.nClustNum

    If nClsNum <= 1 Or nClsNum > MAXLAYERN Then Exit Function

    '|fffd||fffd||509||fffd||fffd||311|w|fffd||343|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||50d||fffd| |fffd||fffd| |fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O
    bLabDisp = (Not bSmpCls And bTitle) Or _
                (bSmpCls And bSmpName And getSmpCls_ClassifyType() = CLASSIFY_NN)

    nLableLen = g_nMaxLabLenG

    'set cluster no array
    Call arrangeClusterNo(nClsNo, g_amGrpPairDist, nClsNum)

    If nLableLen > 20 Then nLableLen = 20
    bYoko = (nLableLen <= 3)

    '/* |fffd|O|fffd||fffd||fffd|t|fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||310||fffd||fffd||fffd| |fffd||fffd| |fffd|I|fffd|u|fffd|W|fffd|F|fffd|N|fffd|g|fffd||303|A|fffd|N|fffd|e|fffd|B|fffd|u */
    grpRowNum = g_aMClstDlg.grpRowNum
    grpColNum = g_aMClstDlg.grpColNum

    '---Init Graph---
    Set chtObj = makeInitGraph(rgeOutBgn, grpRowNum, grpColNum)
    strTmpLabName = "tmpLab"
    Set shpTmpLine = ActiveChart.Shapes("tmpLine")
    Set shpTmpMoji = ActiveChart.Shapes(strTmpLabName)
    Call getBtmLabSize(chtObj, nLableLen, dLabWd, dLabHt, bYoko)
    
    nWinWidth = chtObj.Width
    nWinHight = chtObj.Height
    
    '/* |fffd|Z|fffd||fffd||fffd||303|T|fffd|C|fffd|Y */
    dColWidth = nWinWidth / grpColNum
    dColHight = nWinHight / grpRowNum

    '/* CLIENT |fffd|T|fffd|C|fffd|Y */
    aChartRect.left = 0
    aChartRect.top = 0
    aChartRect.right = aChartRect.left + nWinWidth
    aChartRect.bottom = aChartRect.top + nWinHight

    '/*  |fffd|`|fffd||fffd||fffd|T|fffd|C|fffd|Y|fffd||303|Z|fffd|b|fffd|g */
    dYTitle = aChartRect.top + 3 + dColHight '/* bottom |fffd||fffd|*/
    dx = dColWidth / 2
    dY = dColHight / 2
    aGraphRect.left = aChartRect.left + dx
    aGraphRect.top = dYTitle + dY
    aGraphRect.right = aChartRect.right - dx
    '|fffd|O|fffd||fffd||fffd|t|fffd||312||fffd||fffd||fffd||292|u
    'If bLabDisp Then
        aGraphRect.bottom = aChartRect.bottom - dLabHt - 2 * dY
        'aGraphRect.bottom = aChartRect.bottom - nLableLen * CLS_MOJI_HEIGHT - 2 * dy
        'If Not bSmpCls Then
        '    aGraphRect.bottom = aChartRect.bottom - nLableLen / 2 * CLS_MOJI_HEIGHT - 2 * dy
        'End If
    'Else
    '    aGraphRect.bottom = aChartRect.bottom - 2 * CLS_MOJI_HEIGHT - 2 * dy
    'End If

    dXStep = (aGraphRect.right - aGraphRect.left) / (nClsNum - 1)
    dYStep = (aGraphRect.bottom - aGraphRect.top) / nClsNum

    '/* |fffd|`|fffd||fffd||fffd||fffd||fffd|W|fffd|i|fffd||fffd||fffd|I|fffd|j*/
    For i = 0 To nClsNum - 1
        dClsNoX(i) = aGraphRect.left + dXStep * i
        dClsNoY(i) = aGraphRect.bottom
    Next i

    '/* |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||30f|o|fffd||fffd| */
    '---Title---
    dYTitle = setTitle(chtObj) 'bottom |fffd||fffd|

    '|fffd||fffd||509||fffd||fffd|w|fffd||315||fffd||fffd||fffd||fffd||315|`|fffd||fffd|
    Call DraText(nClsNum, nClsNo, dClsNoX, dClsNoY, aGraphRect.bottom, bLabDisp, dLabWd, dLabHt, shpTmpMoji, bYoko)

    '/* TREE|fffd|f|fffd|[|fffd|^|fffd||315|`|fffd||fffd| */
    Call DrawTree(nClsNum, nClsNo, dClsNoX, dClsNoY, aGraphRect.bottom, dYStep, shpTmpLine)

    '/* |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||315|`|fffd||fffd| */
    nClsN = g_aMClstDlg.outClsNum
    If nClsN <= nClsNum And nClsN >= 1 Then
        dYBottom = aGraphRect.bottom - (nClsNum - nClsN) * dYStep - dYStep / 2
        Call drawYokoLine(dYBottom, aGraphRect.left - dColWidth / 5, aGraphRect.right + dColWidth / 5, shpTmpLine)
    End If

    'Template |fffd||d3dc|
    shpTmpLine.Delete
    shpTmpMoji.Delete
    
    'cursor position
    rgeOutBgn.Worksheet.Activate
    rgeOutBgn.Select
End Function

'|fffd||fffd||509||fffd||fffd|w|fffd||315||fffd||fffd||fffd||fffd||315|`|fffd||fffd|
Private Function DraText(nClsNum As Integer, nClsNo() As Integer, dClsNoX() As Double, dClsNoY() As Double, _
        dGrpRectBottom As Double, bLabDisp As Boolean, dLabWd As Double, dLabHt As Double, shpTmpMoji As Shape, bYoko As Boolean)
    Dim i As Integer, nGrpClsHyoFlg As Integer, nClsId As Integer
    Dim dY As Double
    Dim strData As String
    
    nGrpClsHyoFlg = getHyoFlg(getSmpCls_ClassifyType())

    For i = 0 To nClsNum - 1
        nClsId = nClsNo(i)

        '50cluster id (|fffd|s|fffd|A|fffd||fffd|,1,3,25,2 etc) to 50cluster no (1,2,3,... |fffd|A|fffd||fffd|)
        If nGrpClsHyoFlg = HYO_SMPGRP_PAIR Or nGrpClsHyoFlg = HYO_PATGRP_PAIR Then
            nClsId = findClsId_by_clsid(nClsId, g_aCLayerGRP) + 1
            If nClsId < 1 Then  'ERROR
                MsgBox "[|fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[] : MCDrawGraf ! findClsId_by_clsid"
                Exit Function
            End If
        End If

        If nClsNum > 25 Then
            dY = IIf(i Mod 2 = 0, dGrpRectBottom, dGrpRectBottom + CLS_MOJI_HEIGHT)
        Else
            dY = dGrpRectBottom
        End If
        '|fffd||fffd||fffd||fffd||fffd||30f|o|fffd||fffd| : |fffd||3d0||fffd||fffd||fffd| or |fffd||5368e||496||fffd||fffd||30f|o|fffd||fffd| 95.09.19 by LSQ
        If bLabDisp Then
            strData = getClsName(nClsId)
        Else
            strData = Trim(Str(nClsId))
        End If
        Call drawLab(strData, dClsNoX(i), dY, dLabWd, dLabHt, shpTmpMoji, bYoko)
    Next i
End Function

'/* TREE|fffd|f|fffd|[|fffd|^|fffd||315|`|fffd||fffd| */
Private Function DrawTree(nClsNum As Integer, nClsNo() As Integer, dClsNoX() As Double, dClsNoY() As Double, dGrpRectBottom As Double, _
        dYStep As Double, shpTmpLine As Shape)
    Dim dTmpDs As Double, dPreDs As Double
    Dim nTmpJun As Integer, nPreJun As Integer
    Dim i As Integer, j As Integer, tmpi1 As Integer, tmpi2 As Integer
    Dim xa As Double, xb As Double
    Dim ya As Double, yb As Double
    Dim xc As Double, yc As Double
    
    dPreDs = g_amGrpPairDist(0).dDist
    nPreJun = 0
    For i = 0 To nClsNum - 2      '/* |fffd||fffd||fffd||fffd||fffd||fffd||fffd|[|fffd|v */
        tmpi1 = g_amGrpPairDist(i).no1
        tmpi2 = g_amGrpPairDist(i).no2
        nTmpJun = i
        dTmpDs = g_amGrpPairDist(i).dDist
        If Abs(dTmpDs - dPreDs) < 0.0000000001 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f||fffd||fffd||fffd||fffd|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd||fffd||fffd|
            nTmpJun = nPreJun
        Else
            dPreDs = dTmpDs
            nPreJun = nTmpJun
        End If

        For j = 0 To nClsNum - 1
            If tmpi1 = nClsNo(j) Then Exit For
        Next j
        If j < MAXCLSTNUM Then
            xa = dClsNoX(j)
            ya = dClsNoY(j)
        End If
        For j = 0 To nClsNum - 1
            If tmpi2 = nClsNo(j) Then Exit For
        Next j
        If j < MAXCLSTNUM Then
            xb = dClsNoX(j)
            yb = dClsNoY(j)
        End If

        '/* |fffd|V|fffd||fffd||fffd|W */
        xc = (xa + xb) * 0.5
        yc = dGrpRectBottom - (nTmpJun + 1) * dYStep
        Call drawOpenRect(xa, ya, xb, yb, yc, shpTmpLine)

        '/* |fffd||fffd||fffd|W|fffd||fffd||fffd||fffd| */
        For j = 0 To nClsNum - 1
            If Abs(dClsNoX(j) - xa) < 0.0000000001 Or Abs(dClsNoX(j) - xb) < 0.0000000001 Then
                dClsNoX(j) = xc
                dClsNoY(j) = yc
            End If
        Next j
    Next i

    '/* |fffd||fffd||50f||fffd||310||fffd||fffd||fffd|`|fffd||fffd| */
    Call drawTateLine(xc, yc, yc - dYStep, shpTmpLine)
End Function

'
'arrange the first layer cluster no for tree graph BASED ON g_amGrpPairDist[]
'
Private Function arrangeClusterNo(nmClsNoArray() As Integer, amPairDist() As OnePairDist, nClsNum As Integer)
    Dim i As Integer, j As Integer, k As Integer
    Dim no1 As Integer, no2 As Integer, no As Integer
    Dim nCtNum As Integer

    no1 = amPairDist(nClsNum - 2).no1
    no2 = amPairDist(nClsNum - 2).no2
    nCtNum = 2
    nmClsNoArray(0) = no1
    nmClsNoArray(1) = no2

    For i = nClsNum - 3 To 0 Step -1
        no1 = amPairDist(i).no1
        no2 = amPairDist(i).no2
        For j = 0 To nCtNum - 1
            no = nmClsNoArray(j)  '|fffd||fffd||fffd||fffd|no
            If no1 = no Or no2 = no Then Exit For  '|fffd||fffd||fffd||fffd|no|fffd||fffd|pair |fffd||242||202||fffd||342||fffd|
        Next j
        If j >= nCtNum Then
            For k = 0 To nCtNum - 1
                nmClsNoArray(nCtNum - k + 1) = nmClsNoArray(nCtNum - k - 1)
            Next k
            nmClsNoArray(0) = no1
            nmClsNoArray(1) = no2
            nCtNum = nCtNum + 2
        Else
            For k = nCtNum To j + 2 Step -1 'clsno |fffd|O(j+1)|fffd||fffd||fffd||fffd||fffd||fffd||588||693||fffd|
                nmClsNoArray(k) = nmClsNoArray(k - 1)
            Next k
            nmClsNoArray(j + 1) = IIf(no1 = no, no2, no1)
            nCtNum = nCtNum + 1
        End If
    Next i
End Function

'=== EOF ===

'
'return the bottom y position
'
Private Function setTitle(ByVal chtObj As ChartObject) As Double
    Dim dLeft As Double
    Dim shpTitle As Shape
    
    chtObj.Activate
    
    'Font
    Set shpTitle = ActiveChart.Shapes("Title")
    shpTitle.Select
    Call AlignAndFont(True)
    
    'Set to top and center
    dLeft = (chtObj.Width - shpTitle.Width) / 2
    shpTitle.top = 0
    shpTitle.left = dLeft
    '
    setTitle = shpTitle.top + shpTitle.Height

End Function
'
'|fffd|O|fffd||fffd||fffd|t|fffd||30f||fffd||fffd||fffd||fffd||c42c|
'
'return the graph object

Private Function makeInitGraph(ByVal rgeOutBgn As Range, ByVal nRowNum As Integer, ByVal nColNum As Integer) As ChartObject
    Dim strShtName As String, strGrpName As String, nLen As Integer
    Dim shtOut As Worksheet, chtObj As ChartObject
    
    'settings
    strShtName = "tmplTh2Clst"
    strGrpName = "graphClst"
    Set shtOut = rgeOutBgn.Worksheet
        
    Application.ScreenUpdating = False
    
    '|fffd||fffd|}
    '--copy
    ThisWorkbook.Activate
    Worksheets(strShtName).Select
    ActiveSheet.ChartObjects(strGrpName).Activate
    ActiveChart.ChartArea.Copy
    
    '--paste
    shtOut.Activate
    rgeOutBgn.Select
    ActiveSheet.Paste
        
    '--chart object
    nLen = Len(shtOut.Name)
    strGrpName = Mid(ActiveChart.Name, nLen + 1)
    Set chtObj = ActiveChart.Parent  'ActiveSheet.ChartObjects(strGrpName)
    
    '--de-activate
    Application.CutCopyMode = False
    ThisWorkbook.Activate
    Worksheets(strShtName).Select
    Range("A1").Select
    
    shtOut.Activate
    chtObj.Activate
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call setChartPosSize(chtObj, rgeOutBgn, nRowNum, nColNum)
    
    shtOut.Activate
    chtObj.Activate
    
    Set makeInitGraph = chtObj
    
End Function

'
Private Sub getBtmLabSize(ByVal chtObj As ChartObject, ByVal nMojiNum As Integer, ByRef dTextWidth As Double, ByRef dTextHeight As Double, _
    ByVal bYoko)
    '
    Dim i As Integer
    Dim strMoji As String
    Dim shpTmpMoji As Shape
    Dim wd2, ht2, wd1, ht1, dY
    
    '
    If (nMojiNum = 0) Then
        dTextWidth = 0
        dTextHeight = 0
        Exit Sub
    End If
    strMoji = ""
    For i = 1 To nMojiNum
        strMoji = strMoji & "A"
    Next i
    '
    chtObj.Activate
    
    'Find Gap
    Set shpTmpMoji = ActiveChart.Shapes("tmpLab")
    
    shpTmpMoji.Select
    Selection.Characters.Text = "AA"
    Call AlignAndFont(bYoko)
    wd2 = shpTmpMoji.Width
    ht2 = shpTmpMoji.Height
    
    Selection.Characters.Text = "A"
    Call AlignAndFont(bYoko)
    wd1 = shpTmpMoji.Width
    ht1 = shpTmpMoji.Height
    
    dY = Abs(ht2 / 2 - ht1) * 2
    
    'Set the String
    shpTmpMoji.Select
    Selection.Characters.Text = strMoji
    Call AlignAndFont(bYoko)
    
    'Real Size
    dTextWidth = Selection.Width
    dTextHeight = Selection.Height
        
    'Hight Adjust
    If Not bYoko Then
        dTextHeight = dTextHeight + dY
    End If
    
    dTextHeight = dTextHeight + 4
    
End Sub

'
Private Sub drawLab(ByVal strMoji As String, _
    ByVal dLeft As Double, ByVal dTop As Double, ByVal dWidth As Double, ByVal dHeight As Double, shpTmpLab As Shape, _
    ByVal bYoko As Boolean)

    '
    Dim shpLabObj As Shape
    Set shpLabObj = shpTmpLab.Duplicate
    
    shpLabObj.Select
    Selection.Characters.Text = strMoji
    'Call AlignAndFont(bYoko)
    
    shpLabObj.left = dLeft
    shpLabObj.top = dTop
    shpLabObj.Height = Abs(dHeight)
    shpLabObj.Width = Abs(dWidth)
    Call AlignAndFont(bYoko)
    
    '2007.02.14 add
    shpLabObj.left = dLeft
    shpLabObj.top = dTop
    'end add
    shpLabObj.left = shpLabObj.left - shpLabObj.Width / 2
    
End Sub
'
'|fffd||fffd||fffd|I|fffd|[|fffd|v|fffd||fffd||fffd|l|fffd|p|fffd|^|fffd||315|`|fffd||fffd|(on ActiveChart)
'
Private Sub drawOpenRect( _
    ByVal xa As Double, _
    ByVal ya As Double, _
    ByVal xb As Double, _
    ByVal yb As Double, _
    ByVal yc As Double, shpTmpLine As Shape)
    
    Dim shpYokoLine As Shape, shpTateLineA As Shape, shpTateLineB As Shape
    
    Set shpTateLineA = shpTmpLine.Duplicate
    Set shpTateLineB = shpTmpLine.Duplicate
    Set shpYokoLine = shpTmpLine.Duplicate
    
    shpTateLineA.Width = 0
    shpTateLineA.left = xa
    shpTateLineA.top = yc
    shpTateLineA.Height = Abs(yc - ya)
    
    shpTateLineB.Width = 0
    shpTateLineB.left = xb
    shpTateLineB.top = yc
    shpTateLineB.Height = Abs(yc - yb)
    
    shpYokoLine.Width = Abs(xa - xb)
    shpYokoLine.left = xa
    shpYokoLine.Height = 0
    shpYokoLine.top = yc
    
End Sub
'
Private Sub drawTateLine(ByVal x As Double, ByVal y1 As Double, ByVal y2 As Double, shpTmpLine As Shape)
    Dim shpLineObj As Shape
    Set shpLineObj = shpTmpLine.Duplicate
    
    shpLineObj.Width = 0
    shpLineObj.left = x
    shpLineObj.Height = Abs(y1 - y2)
    shpLineObj.top = IIf(y1 < y2, y1, y2)
    
End Sub
'
Private Sub drawYokoLine(ByVal y As Double, ByVal x1 As Double, ByVal x2 As Double, shpTmpLine As Shape)
    Dim shpLineObj As Shape
    Set shpLineObj = shpTmpLine.Duplicate
    
    shpLineObj.top = y
    shpLineObj.left = IIf(x1 < x2, x1, x2)
    shpLineObj.Width = Abs(x1 - x2)
    shpLineObj.Height = 0
    
End Sub
'
' Modified Feb 2003, PYJ
'
Private Sub AlignAndFont(ByVal bYoko As Boolean, Optional bAutoSize As Boolean = True)
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .Orientation = IIf(bYoko, xlHorizontal, xlVertical)
        .AutoSize = bAutoSize
        .AddIndent = False
    End With
    '
    With Selection.Font
        .Size = g_aMClstDlg.nFontSize
    End With
    
End Sub

'=== EOF ===
Attribute VB_Name = "MClstData"
'/************************************************************/
'/*  |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| : |fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|                           */
'/*  FILE NAME : MCDATA                                      */
'/*  DATE : 2003.6.9 by PYJ                                  */
'/************************************************************/
Option Explicit
Option Private Module

'
'move data to a temp sheet
'check nodata
'
'return 0 OK else ERROR as following
'-1 : General error (unexpected)
'-2 : ERR_orgClsSmpNum (unexpected)
'-100: |fffd||50512|l|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||8486||fffd|~
'-101: |fffd|f|fffd|[|fffd|^|fffd||90||fffd| = 0
'-102: ERR_orgClsSmpNum_Zero
'
Public Function ArrangeData(ByVal rgeFromData As Range, ByVal shtTemp As Worksheet) As Integer
    Dim rgeToData As Range
    Dim nNoDataNum As Long, i As Integer, nColE As Integer, nSmpNoCol As Integer

    Set rgeToData = shtTemp.Range("A1")
    Set rgeFromData = moveData_A(rgeFromData, "|fffd||fffd||fffd||fffd|", g_aMClstDlg.dlgCom.bCol, g_aMClstDlg.dlgCom.bTitle, _
        g_aMClstDlg.dlgCom.bSmpTitle, g_aMClstDlg.dlgCom.bXSel, rgeToData, nNoDataNum, 1, True)
    'Size
    g_aMClstDlg.saveOutClsNum = g_aMClstDlg.outClsNum
    g_aMClstDlg.smpNum_all = rgeFromData.Rows.Count - 1        'smpNumMax
    g_aMClstDlg.smpNum_dat = g_aMClstDlg.smpNum_all - nNoDataNum      'smpNum
    'Gdata.smpNumNoData = nNoDataNum
    g_aMClstDlg.itemnum = rgeFromData.Columns.Count - 1    'itemNum
    
    nColE = g_aMClstDlg.itemnum
    nSmpNoCol = DEF_smpNoCol(nColE)  'sample no column
    'set sample no
    For i = 0 To g_aMClstDlg.smpNum_all - 1
        rgeFromData(i + 2, nSmpNoCol + 1) = i + 1
    Next i
    
    'Check
    If g_aMClstDlg.smpNum_dat < 2 Then ArrangeData = -101: Exit Function
    
    '|fffd||50512|l|fffd|f|fffd|[|fffd|^|fffd||30c||fffd||fffd||fffd|
    If g_aMClstDlg.dlgCom.bStop And g_aMClstDlg.smpNum_all > g_aMClstDlg.smpNum_dat Then ArrangeData = -100: Exit Function
    
    'Data Position
    rgeFromData.Worksheet.Activate
    Set g_aMClstDlg.rgeDataIn = rgeFromData.Range(Cells(1, 1), Cells(g_aMClstDlg.smpNum_all + 1, g_aMClstDlg.itemnum + 1))
    'Set g_aMClstDlg.rgeDataBgn = rgeFromData(2, 2)
    'Set g_aMClstDlg.rgeIn = g_aMClstDlg.rgeDataBgn(Cells(1, 1), Cells(g_aMClstDlg.smpNum_all, g_aMClstDlg.itemNum))
    'Set Gdata.dataBgn = rgeFromData(2, 2)
    'Set Gdata.itemNameRge = rgeFromData(1, 2).Range(Cells(1, 1), Cells(1, g_aMClstDlg.itemNum))
    'Set Gdata.smpNameRge = rgeFromData(2, 1).Range("A1:A" & g_aMClstDlg.smpNum_all)
    
    ArrangeData = 0
    '|fffd||fffd||fffd||695||fffd||fffd||34f||a347|
    If g_aMClstDlg.bSmpCls Then ArrangeData = ArrangeDataSample()
End Function

'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||34f||a347|
Private Function ArrangeDataSample() As Integer
    Dim itemnum As Integer, SmpNum As Integer, smpNum_left As Integer, smpNum_dat As Integer
    Dim nRowE As Integer, nColE As Integer, nRowAve As Integer
    Dim nSmpNoCol As Integer, nDistCol As Integer, nClsNoCol As Integer, nSortEndCol As Integer
    Dim rgeSort As Range
    
    'local variable
    itemnum = g_aMClstDlg.itemnum
    SmpNum = g_aMClstDlg.smpNum_all
    smpNum_dat = g_aMClstDlg.smpNum_dat
    'smpNumMax = Gdata.smpNum
    
    'position and range; 0 based
    nRowE = SmpNum
    nColE = itemnum
    
    nRowAve = nRowE + 1
    
    nSmpNoCol = DEF_smpNoCol(nColE)  'sample no column
    nDistCol = DEF_distCol(nColE)    'origin distance column
    nClsNoCol = DEF_datNoCol(nColE)  'natural cluster no column (i.e. numeric data JUN no)

    nSortEndCol = IIf(nSmpNoCol >= nDistCol And nSmpNoCol >= nClsNoCol, nSmpNoCol, _
                 IIf(nDistCol >= nSmpNoCol And nDistCol >= nClsNoCol, nDistCol, nClsNoCol))
                            'max (nSmpNoCol, nDistCol, nClsNoCol)

    'find |fffd||fffd||fffd||3d2|l
    'Call setMem_Kihon(itemNum)  'memory free see, freeMem_Kihon()
    
    'Set tmpCel = Gdata.dataBgn.Offset(smpNumMax, 0)
    'For i = 1 To itemNum
    '    tmpCel(nRowAve, i) = tmpCel(1, i)
    'Next i
    
    '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[ |fffd||30f||fffd||fffd||fffd|
    smpNum_left = SmpNum  'default

    If g_aMClstDlg.bMakeOrgCls Then  '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[
        '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
        g_aMClstDlg.numOrgCls = Application.Round(smpNum_dat / g_aMClstDlg.outClsNum, 0)
        If g_aMClstDlg.numOrgCls < 1 Then ArrangeDataSample = ERR_orgClsSmpNum_Zero: Exit Function
        Call ArrangeDataSampleMakeOrg(itemnum, SmpNum, g_aMClstDlg.numOrgCls, nDistCol, nSmpNoCol, nSortEndCol)
        smpNum_left = SmpNum - g_aMClstDlg.numOrgCls   'adjusted
        nRowE = smpNum_left                              'adjusted
        '|fffd|f|fffd|[|fffd|^|fffd||348||352||fffd||fffd||fffd|
        Set g_aMClstDlg.rgeDataIn = g_aMClstDlg.rgeDataIn.Range(Cells(1, 1), Cells(smpNum_left + 1, itemnum + 1)) 'end row
    End If
    g_aMClstDlg.smpNum_left = smpNum_left      'finished

    '|fffd||fffd||fffd|_|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||c42c||fffd||fffd|
    Call ArrangeDataSampleOData(itemnum, nRowE, nClsNoCol)

    'clsNo |fffd||fffd|to|fffd||fffd|
    Set rgeSort = g_aMClstDlg.rgeDataIn.Range(Cells(2, 1), Cells(nRowE + 1, nSortEndCol + 1))
    Call SortByCol_data(rgeSort, nClsNoCol + 1, False)
    
    ArrangeDataSample = 0
End Function

'|fffd||fffd||fffd|_|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||c42c||fffd||fffd|
Private Function ArrangeDataSampleOData(ByVal itemnum As Integer, ByVal nRowE As Integer, ByVal nClsNoCol As Integer)
    Dim i As Integer, no As Integer, j As Integer
    Dim rgeCol As Range, rgeFromData As Range, rgetmp As Range
    
    'find |fffd||fffd||fffd||3d2|l|fffd|A|fffd|W|fffd||fffd||fffd||38d||fffd|(n)
    Set rgeCol = g_aMClstDlg.rgeDataIn.Range("B2:B" & nRowE + 1)
    For i = 0 To itemnum - 1
        g_dmAveItm(i) = Application.Average(rgeCol)
        g_dmStdItm(i) = Application.StDevP(rgeCol) 'n
        Set rgeCol = rgeCol.Offset(0, 1)
    Next i

    'set cluster no (numeric data order no) & data modifying
    Set rgeFromData = g_aMClstDlg.rgeDataIn.Range("B2")
    no = 1  'init numeric data order no
    For i = 0 To g_aMClstDlg.smpNum_left - 1
        If IsEmpty(rgeFromData(i + 1, 1)) Then  'the first data
            rgeFromData(i + 1, nClsNoCol) = DBL_INFTY  '|fffd||fffd||fffd|O|fffd||fffd||fffd||a0bd||fffd|T|fffd||fffd||fffd|v|fffd||fffd|
        Else
            'set init cluster no
            rgeFromData(i + 1, nClsNoCol) = no
            no = no + 1

            '|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||315||3ca||fffd| (|fffd||7b7||fffd||fffd| or |fffd||e3c0||fffd|l)
            If g_aMClstDlg.flgInitDist = INIT_DIST_BEKI Or g_aMClstDlg.flgInitDist = INIT_DIST_EUC1 Then
                Set rgetmp = rgeFromData.Range(Cells(i + 1, 1), Cells(i + 1, itemnum))

                For j = 0 To itemnum - 1
                    rgetmp(1, j + 1) = dataMdf(rgetmp(1, j + 1).Value, g_aMClstDlg.flgInitDist, j)
                Next j
            End If
        End If

    Next i
    g_aMClstDlg.smpNum_dat = no - 1  'should equal to "smpNum_dat"; //finished

End Function

Private Function ArrangeDataSampleMakeOrg(ByVal itemnum As Integer, ByVal SmpNum As Integer, ByVal smpNum_clso As Integer, _
    ByVal nDistCol As Integer, ByVal nSmpNoCol As Integer, ByVal nSortEndCol As Integer)
    Dim i As Integer, tmpr As Integer, nRowE As Integer, nRowAve As Integer
    Dim rgeFromData As Range, rgeSort As Range, rgeAvg As Range, rge1 As Range
    Dim dVal As Double, dDist As Double
    
    nRowE = SmpNum
    nRowAve = nRowE + 1
    
    '|fffd||fffd||fffd||fffd||fffd|l|fffd||fffd||c42c|
    Set rgeFromData = g_aMClstDlg.rgeDataIn
    Set rgeAvg = rgeFromData.Range(Cells(nRowAve + 1, 2), Cells(nRowAve + 1, 1 + itemnum))
    Set rge1 = rgeFromData.Range(Cells(2, 2), Cells(2, 1 + itemnum))
    For i = 0 To SmpNum - 1
        If IsEmpty(rgeFromData(i + 2, 2)) Then
            dDist = DBL_INFTY  'nodata; |fffd|Y|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||14c||fffd||fffd|
        Else
            dDist = Sqr(WorksheetFunction.SumXMY2(rge1, rgeAvg))
        End If

        '|fffd|o|fffd||fffd|
        rge1(1, nDistCol) = dDist
        Set rge1 = rge1.Offset(1, 0)
    Next i
    
    '|fffd||fffd||fffd||fffd||fffd||311||fffd|to|fffd||fffd|
    Set rgeSort = rgeFromData.Range(Cells(2, 1), Cells(SmpNum + 1, nSortEndCol + 1))
    Call SortByCol_data(rgeSort, nDistCol + 1, True)

    '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||251||fffd||fffd||fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||50d||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '-- |fffd||fffd||fffd||fffd||fffd||30f||fffd|to|fffd||fffd|
    tmpr = nRowE - smpNum_clso + 1
    Set rgeSort = rgeFromData.Range(Cells(tmpr + 1, 1), Cells(nRowE + 1, nSortEndCol + 1))
    Call SortByCol_data(rgeSort, nDistCol + 1, False)

    '|fffd|c|fffd||8554||fffd||fffd| no|fffd||30f||fffd|to|fffd||fffd|
    nRowE = SmpNum - smpNum_clso  'adjusted
    'nRowE = smpNum_left                  'adjusted
    Set rgeSort = rgeFromData.Range(Cells(2, 1), Cells(nRowE + 1, nSortEndCol + 1))
    Call SortByCol_data(rgeSort, nSmpNoCol + 1, False)
    
    'smpNum_dat = smpNum_dat - smpNum_clso   'adjusted
    g_aMClstDlg.outClsNum = g_aMClstDlg.outClsNum - 1 'adjusted
End Function

'i : 0 based
'return DBL_ERR error else OK
Private Function dataMdf(ByVal dt As Double, ByVal flgDist As Integer, ByVal i As Integer) As Double
    Dim dStd As Double

    If flgDist = INIT_DIST_BEKI Then
        dataMdf = findBekiti(dt, g_aMClstDlg.dBekiti)
    Else
        dStd = g_dmStdItm(i)
        dataMdf = IIf(dStd > 0, (dt - g_dmAveItm(i)) / dStd, DBL_ERR)
    End If
End Function
Attribute VB_Name = "MClstDlg"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
'
' Jun 2003, PYJ
'===================================================
Option Explicit
Option Private Module

'---------------------------------------------------
'
Function MClusterDlgBox() As Boolean
    Dim rtn, bRtn As Boolean
    Dim objDlgBox As Object, objGroup As Object
    Dim aDlgComm As DLG_Comm
    
    MClusterDlgBox = False
    
    '|fffd||fffd||fffd||fffd||fffd||752||fffd|
    Set objDlgBox = ThisWorkbook.DialogSheets("ClstDlg")
    Set objGroup = objDlgBox.GroupBoxes("subGrpXSel")
    objGroup.Visible = False

    'DialogBox|fffd||315|\|fffd||fffd|
    Do
        rtn = getDlgComm(aDlgComm, objDlgBox, THR_CLST)
        If rtn = False Then Exit Function
    
        g_aMClstDlg.dlgCom = aDlgComm       '|fffd||fffd||fffd||295||fffd||fffd||fffd||fffd||752||fffd|
        Call GetDataFromDlg(objDlgBox)
        bRtn = CheckData()
    Loop Until bRtn
    
    MClusterDlgBox = True
End Function
    
Private Sub GetDataFromDlg(ByVal objDlgBox As Object)
    Dim nTmp As Integer
    
    '|fffd||18e||fffd||fffd||fffd||fffd||fffd||fffd||752||fffd|
    g_aMClstDlg.outClsNum = val(objDlgBox.EditBoxes("edtClustNum").Text)
    g_aMClstDlg.bSmpCls = (objDlgBox.OptionButtons("optSampleCluster") = xlOn)
    g_aMClstDlg.bMakeOrgCls = (objDlgBox.OptionButtons("optYesOrgCls") = xlOn)
    g_aMClstDlg.bDistSqrt = (objDlgBox.OptionButtons("optCalMethod2") = xlOn)    'Jun 2003, PYJ
    If g_aMClstDlg.bSmpCls = False Then 'item cluster
        g_aMClstDlg.bMakeOrgCls = False
    End If
    
    If objDlgBox.OptionButtons("optRawDataEucKyori") = xlOn Then
        nTmp = INIT_DIST_EUC0
    ElseIf objDlgBox.OptionButtons("optRawDataHiPower") = xlOn Then
        nTmp = INIT_DIST_BEKI
    ElseIf objDlgBox.OptionButtons("optRefEucKyori") = xlOn Then
        nTmp = INIT_DIST_EUC1
    ElseIf objDlgBox.OptionButtons("optMahaHankyori") = xlOn Then
        nTmp = INIT_DIST_MAH
    End If
    g_aMClstDlg.flgInitDist = nTmp
    '
    If nTmp = INIT_DIST_BEKI Then
        g_aMClstDlg.dBekiti = val(objDlgBox.EditBoxes("edtRawHiPower").Text)
    End If
    
    If objDlgBox.OptionButtons("optMinKyorihou") = xlOn Then
        nTmp = DIST_MIN
    ElseIf objDlgBox.OptionButtons("optMaxKyorihou") = xlOn Then
        nTmp = DIST_MAX
    ElseIf objDlgBox.OptionButtons("optGunHeikinhou") = xlOn Then
        nTmp = DIST_GAVG
    ElseIf objDlgBox.OptionButtons("optJyusinhou") = xlOn Then
        nTmp = DIST_JUSI
    ElseIf objDlgBox.OptionButtons("optWard") = xlOn Then
        nTmp = DIST_WOUD
    End If
    g_aMClstDlg.flgGrpDist = nTmp
    
    g_aMClstDlg.bGraph = (objDlgBox.CheckBoxes("chkGraphDisp") = xlOn)
    If g_aMClstDlg.bGraph Then
        g_aMClstDlg.nFontSize = CInt(objDlgBox.EditBoxes("edtGraphFontSize").Text)
        g_aMClstDlg.grpRowNum = CInt(objDlgBox.EditBoxes("edtGraphRowSize").Text)
        g_aMClstDlg.grpColNum = CInt(objDlgBox.EditBoxes("edtGraphColSize").Text)
    End If
End Sub

Private Function CheckData() As Boolean
    CheckData = False
    If g_aMClstDlg.dlgCom.itemnum < 1 Then
        MsgBox ERR_CLS_01
        Exit Function
    End If
    
    If g_aMClstDlg.dlgCom.SmpNum < 3 Then
        MsgBox ERR_CLS_02
        Exit Function
    End If

    'check for sample cluster
    If g_aMClstDlg.bSmpCls Then
        If g_aMClstDlg.dlgCom.SmpNum > MAXSMPNUM Or _
          (g_aMClstDlg.dlgCom.SmpNum > MAXPATTNUM_A And g_aMClstDlg.dlgCom.itemnum > MAXITEMNUM_5) Then '|fffd||fffd||fffd||fffd||fffd||142||fffd||fffd||202||fffd|
            MsgBox ERR_CLS_01
            Exit Function
        End If
    End If
    
    If g_aMClstDlg.outClsNum < 2 Then
        MsgBox ERR_CLS_06
        Exit Function
    End If
    
    If g_aMClstDlg.flgInitDist = INIT_DIST_BEKI And (g_aMClstDlg.dBekiti < 0.01 Or g_aMClstDlg.dBekiti > 0.9) Then
        MsgBox MSG_CLST_BekichiRange
        Exit Function
    End If
    
    If g_aMClstDlg.bGraph Then
        If g_aMClstDlg.nFontSize < 4 Then
            g_aMClstDlg.nFontSize = 4
        ElseIf g_aMClstDlg.nFontSize > 20 Then
            g_aMClstDlg.nFontSize = 20
        End If
    End If
    
    CheckData = True
End Function

Attribute VB_Name = "MClstMain"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
'
' Jun 2003, PYJ
'===================================================
Option Explicit

'---------------------------------------------------
'
'Menu Macro
Sub VbaThr_CLST()
    Dim bRtn As Boolean
    Dim nRtn As Integer, nMpSize As Integer
    Dim rgeIn As Range, rgeOut As Range
    Dim shtActive As Worksheet, shtWork As Worksheet
    
    bRtn = MClusterDlgBox()
    If Not bRtn Then Exit Sub
    
    Set rgeIn = g_aMClstDlg.dlgCom.inRange
    Set rgeOut = getOutBgn(rgeIn, g_aMClstDlg.dlgCom.outBgnCel, g_aMClstDlg.dlgCom.bOutToNewSht)  '|fffd|o|fffd||350||fffd|
    'Set actStObj = ActiveSheet
    
    '|fffd|f|fffd|[|fffd|^|fffd||fffd| TempSheet|fffd||590||fffd||fffd||fffd|
If False Then
    'Set dtStObj = Workbooks.Add.Worksheets(1)
    Set shtWork = Workbooks.Add.Worksheets(1)
Else
    'Set dtStObj = getTempSheet()
    Set shtWork = getTempSheet(1)
End If
    
    Application.ScreenUpdating = False
    nRtn = ArrangeData(rgeIn, shtWork)
    If nRtn <> 0 Then
        Call DispErrorMsg(nRtn)
        Exit Sub
    End If
    
    nMpSize = IIf(g_aMClstDlg.bSmpCls, g_aMClstDlg.dlgCom.SmpNum, g_aMClstDlg.dlgCom.itemnum)
    If nMpSize > MAXPATTNUM_A Then nMpSize = MAXPATTNUM_A

    Call SetGMem_MCL(g_aMClstDlg.smpNum_dat, g_aMClstDlg.itemnum, nMpSize)
    
    '|fffd|v|fffd|Z|fffd||18f|o|fffd||fffd|
    bRtn = do_Clst(shtWork, rgeOut)
    
    'DelTempWorkSheet?????/
    '|fffd|o|fffd||343|V|fffd|[|fffd|g|fffd||596||7c2||fffd|
    rgeOut.Worksheet.Activate
    Call setSheetWakusen(False) '|fffd|g|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
    rgeOut.Select   '|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||308||292|u
    
    'Memory Free
    Call FreeGmem_MCL
    
End Sub

'
'|fffd|v|fffd|Z|fffd||18f|o|fffd||fffd|
'
Private Function do_Clst(ByVal shtWork As Worksheet, ByVal rgeOut As Range) As Boolean
    Dim bRtn As Boolean
    Dim rgeOutBgn As Range
    Dim nRowUsedByPreTreat As Integer
    
    '/*========== |fffd||fffd||fffd||34a|J|fffd|n ==========*/
    g_aMClstDlg.bPatBunui = False

    If Not g_aMClstDlg.bSmpCls Then              '/* |fffd||fffd||fffd||695||fffd||fffd||fffd| */
        bRtn = makeInitClusterLayer_ITM(g_aCLayerFST)
    Else                                         '//|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd| (1   --1296) : |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
        '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd| (1297--MAXSMPNUM) : |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (5 |fffd||fffd||fffd||fffd| only)

        '|fffd||fffd||fffd||78e||fffd||fffd|s
        If g_aMClstDlg.smpNum_dat <= MAXPATTNUM_A Then
            bRtn = True
            Call sampleClassify_No(g_aCInitSmp, g_aCLayerFST)
        Else
            bRtn = sampleClassify_Pat(g_aCInitSmp, g_aCLayerFST)  'MAXPATTNUM_A|fffd||702||142||fffd||fffd||fffd||fffd||fffd||742||255||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            g_aMClstDlg.bPatBunui = True
        End If
        If Not bRtn Then do_Clst = bRtn: Exit Function

        bRtn = makeInitClusterLayer_SMP(g_aCInitSmp, g_aCLayerFST)
    End If
    If Not bRtn Then do_Clst = bRtn: Exit Function

    '|fffd|v|fffd|Z
    bRtn = mcDoClustAna()
    If Not bRtn Then do_Clst = bRtn: Exit Function

    '|fffd|o|fffd||fffd|
    rgeOut.Worksheet.Activate

    Set rgeOutBgn = rgeOut
    If Not g_aMClstDlg.bSmpCls Then
        Call mcOutPut_ITM(rgeOutBgn)
        Set rgeOutBgn = rgeOutBgn.Offset(5, 0)
    Else
        nRowUsedByPreTreat = mcOutPut_SMP(rgeOutBgn)
        Set rgeOutBgn = rgeOutBgn.Offset(nRowUsedByPreTreat + 5, 0)
    End If
    Set rgeOutBgn = rgeOutBgn.Offset(0, 4)

    '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd|`|fffd|}|fffd||c42c|
    If g_aMClstDlg.bGraph Then
        Call MCDrawGraf(rgeOutBgn)
    End If
    do_Clst = True
End Function

Private Sub DispErrorMsg(ByVal nErrNo As Integer)
    If nErrNo = -1 Then
        MsgBox ERR_CLS_03
    ElseIf nErrNo = -2 Then
        MsgBox ERR_orgClsSmpNum
    ElseIf nErrNo = -100 Then
        MsgBox ERR_CLS_02
    ElseIf nErrNo = -101 Then
        MsgBox ERR_SAMP_LACK
    ElseIf nErrNo = -102 Then
        MsgBox ERR_orgClsSmpNum_Zero
    Else
        MsgBox "Error #" & nErrNo
    End If
End Sub

'=== EOF ===
Attribute VB_Name = "MClstMem"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
'
' Jun 2003, PYJ
'===================================================
Option Explicit
Option Private Module

'*
'* mapsize = (flgClsType == CLUSTER_SMP) ? smp : item;
'* mapsize <= MAXPATTNUM_A
'* Jun 2003, PYJ
'*
Function SetGMem_MCL(ByVal nSmp As Integer, ByVal nItem As Integer, ByVal nMpSize As Integer)
    'cluster element number and its id
    ReDim g_nmIdArray1(0 To nMpSize - 1)
    ReDim g_nmIdArray2(0 To nMpSize - 1)
    ReDim g_nmSizeArray(0 To nMpSize - 1)

    'cluster Layer
    ReDim g_aCLayerR0303.nmClsIdMap(0 To nMpSize - 1)
    ReDim g_aCLayerGRP.nmClsIdMap(0 To nMpSize - 1)
    ReDim g_aCLayerFST.nmClsIdMap(0 To nMpSize - 1)
    ReDim g_aCLayerOut.nmClsIdMap(0 To nMpSize - 1)
    ReDim g_aCLayerIn.nmClsIdMap(0 To nMpSize - 1)
    'distance matrix
    ReDim g_aCLayerR0303.dmDs(0 To nMpSize - 1, 0 To nMpSize - 1)
    ReDim g_aCLayerGRP.dmDs(0 To nMpSize - 1, 0 To nMpSize - 1)
    ReDim g_aCLayerFST.dmDs(0 To nMpSize - 1, 0 To nMpSize - 1)
    ReDim g_aCLayerOut.dmDs(0 To nMpSize - 1, 0 To nMpSize - 1)
    ReDim g_aCLayerIn.dmDs(0 To nMpSize - 1, 0 To nMpSize - 1)

    'Pair Distance
    ReDim g_amGrpPairDist(0 To nMpSize - 1)
    ReDim g_amAllPairDist(0 To nMpSize - 1)

    'save pattern data
    ReDim g_dmXDAT(0 To MAXPATTNUM_A - 1, 0 To MAXITEMNUM_5 - 1)

End Function

'*
'*
Function FreeGmem_MCL()
    'cluster element number and its id
    ReDim GidArray(1)
    ReDim g_nmSizeArray(0 To 1)

    'cluster Layer
    ReDim g_aCLayerR0303.nmClsIdMap(1)
    ReDim g_aCLayerGRP.nmClsIdMap(1)
    ReDim g_aCLayerFST.nmClsIdMap(1)
    ReDim g_aCLayerOut.nmClsIdMap(1)
    ReDim g_aCLayerIn.nmClsIdMap(1)
    'distance matrix
    ReDim g_aCLayerR0303.dmDs(1)
    ReDim g_aCLayerGRP.dmDs(1)
    ReDim g_aCLayerFST.dmDs(1)
    ReDim g_aCLayerOut.dmDs(1)
    ReDim g_aCLayerIn.dmDs(1)

    'Pair Distance
    ReDim g_amGrpPairDist(1)
    ReDim g_amAllPairDist(1)

    'save pattern data
    ReDim g_dmXDAT(1)

End Function

'=== END OF FILE ====

Attribute VB_Name = "MClstPublic"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
'
' Jun 2003, PYJ
'===================================================
Option Explicit
Option Private Module

'Cluster Analysis

Public g_aMClstDlg As DLG_CLST

Public g_aCLayerR0303 As CLUSTER_LAYER_0303     'C: lptwkR0303
Public g_aCLayerGRP As CLUSTER_LAYER_0303       'C: lptwkGRP
Public g_aCLayerFST As CLUSTER_LAYER_0303       'C: lptwkFST
Public g_aCLayerOut As CLUSTER_LAYER_0303       'C: lptwkOut
Public g_aCLayerIn As CLUSTER_LAYER_0303        'C: lptwkIn


'Pair distance
Public g_amGrpPairDist() As OnePairDist         'C: grpPairDist
Public g_amAllPairDist() As OnePairDist         'C: allPairDist

'|fffd||fffd||fffd||3d2|l, |fffd|W|fffd||fffd||fffd||38d||fffd|
Public g_dmAveItm(0 To M_MAXIMAL) As Double     'C: pAveItm
Public g_dmStdItm(0 To M_MAXIMAL) As Double     'C: pStdItm

Public g_aCInitSmp As CLUSTER_INIT              'C: gMem_INIT_SMP

Public g_dmXDAT() As Double                     'C: GppXDAT
Public g_nMaxLabLenG As Integer                 'C: maxLabLenG
Public g_nmSizeArray() As Integer               'C: GsizeArray
Public g_nmIdArray1() As Integer                'C: GidArray(0)
Public g_nmIdArray2() As Integer                'C: GidArray(1)

'|fffd||fffd|}|fffd|p
Public sampDist(0 To MAXCLSTNUM) As OnePairDist

Function DEF_smpNoCol(ByVal nColE As Integer) As Integer
    DEF_smpNoCol = nColE + 1
End Function

Function DEF_distCol(ByVal nColE As Integer) As Integer
    DEF_distCol = nColE + 2
End Function

Function DEF_datNoCol(ByVal nColE As Integer) As Integer
    DEF_datNoCol = nColE + 3
End Function

Function DEF_patNoCol(ByVal nColE As Integer) As Integer
    DEF_patNoCol = nColE + 4
End Function

Function DEF_50clsNoCol(ByVal nColE As Integer) As Integer
    DEF_50clsNoCol = nColE + 5
End Function

Function DEF_clsNoCol(ByVal nColE As Integer) As Integer
    DEF_clsNoCol = nColE + 6
End Function

Function DEF_bgnCol(ByVal nColE As Integer) As Integer
    DEF_bgnCol = nColE + 1
End Function

Function DEF_endCol(ByVal nColE As Integer) As Integer
    DEF_endCol = nColE + 1
End Function
Attribute VB_Name = "MClstType"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|
'
' Jun 2003, PYJ LSQ
'===================================================
Option Explicit
Option Private Module

'-- |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| --
Public Const MAX_ITEM = (200 + 1)

'/* |fffd|T|fffd|C|fffd|Y|fffd||8414| (|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||341|j*/
Public Const MAXSMPNUM = 15000        '//10000, H14.4.2 LSQ; /* |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||30d||151||5414| old & WIN3.1 : 4000;  96.12.17 LSQ*/
Public Const MAXIMXNUM = MAX_ITEM     '/*81 : 98.2.24; 64*/        /* |fffd||3d0||fffd||fffd||30d||151||5414| (|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|) */
Public Const MAXCLSTNUM = MAX_ITEM    '/*81 : 98.2.24; |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30d||151||5414| */
Public Const MAXPATTNUM = MAX_ITEM    '/*81 : 98.2.24; |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||30d||151||5414| */
Public Const MAXITEMNUM = MAX_ITEM    '/* |fffd||fffd||fffd||682||30d||151||5414|; 98.7.14 LSQ; old = 30 */
Public Const MAXITEMNUM_5 = 5         '/* |fffd||fffd||fffd||682||30d||151||5414| for |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| */
'|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||365||fffd|V|fffd||fffd||fffd||795||fffd||fffd|@
Public Const MAXPATTNUM_A = 1296      '/* MAXPATTNUM_A >= MAXPATTNUM; |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||30d||151||5414|for |fffd|V|fffd||fffd||fffd||796|@; 98.8.4 LSQ */
Public Const INITCLSNUM = 50          '//|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|50|fffd||fffd||fffd||fffd||fffd||fffd|
'Public Const M_MAXIMAL = MAX_ITEM

'
'Public Enum CLASSIFY_TYPE --- not valid in MAC
'End Enum
'
Public Const CLASSIFY_NN = 0              'NN: |fffd|\no, |fffd|}no
Public Const CLASSIFY_NY = 1              'NY: |fffd|\no, |fffd|}yes
Public Const CLASSIFY_YY = 2              'YY: |fffd|\yes, |fffd|}yes
Public Const CLASSIFY_YY_Y = 3            'YY_Y: |fffd|\yes, |fffd|}yes, |fffd||115||fffd||fffd||fffd|

'/* |fffd||fffd||fffd||342||30e||fffd||fffd| */
Public Const INIT_DIST_EUC0 = 1      '|fffd||fffd||fffd||7b0||fffd||fffd||fffd||570||fffd||62f||fffd||78b||fffd||fffd||fffd|
Public Const INIT_DIST_BEKI = 2        '|fffd||fffd||fffd||7b0||fffd||fffd||302||5c2||fffd||fffd||fffd|
Public Const INIT_DIST_EUC1 = 3        '|fffd||e3c0||fffd|l|fffd||fffd||570||fffd||62f||fffd||78b||fffd||fffd||fffd|
Public Const INIT_DIST_MAH = 4         '|fffd||fffd||fffd||fffd||fffd||7bd||fffd||314||10b||fffd||fffd||fffd|

'/* |fffd||fffd||fffd||fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z|fffd||315||fffd||fffd|@ */
Public Const DIST_MIN = 0         '/* |fffd||152|Z|fffd||fffd||fffd||fffd||fffd|@   */
Public Const DIST_MAX = 1         '/* |fffd||152||fffd||fffd||fffd||fffd||fffd||fffd|@   */
Public Const DIST_GAVG = 2        '/* |fffd|Q|fffd||fffd||fffd||3d6|@     */
Public Const DIST_JUSI = 3        '/* |fffd|d|fffd|S|fffd|@   */
Public Const DIST_WOUD = 4        '/* |fffd|E|fffd|H|fffd|[|fffd|h|fffd|@   */

'|fffd||fffd||fffd||fffd|Pair|fffd|\
Public Const HYO_NOT_DEFINED = 0
Public Const HYO_ITM_PAIR = 1         '|fffd||fffd||fffd||691||fffd|
Public Const HYO_SMP_PAIR = 2         '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
Public Const HYO_PAT_PAIR = 3         'PATTERN|fffd||fffd|
Public Const HYO_SMPGRP_PAIR = 4      '|fffd|T|fffd||fffd||fffd|v|fffd||fffd|50cluster|fffd||fffd|
Public Const HYO_PATGRP_PAIR = 5      'PATTERN 50cluster|fffd||fffd|

Type DLG_CLST
    dlgCom As DLG_Comm
    rgeDataIn As Range
    flgInitDist As Integer '|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z                         'int flgInitDist
    flgGrpDist As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd|@                        'int flgGrpDist
    outClsNum As Integer  '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30c||90||fffd|                            'int outClsNum
    bGraph As Boolean   '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|                                     'int flgGraph
    bSmpCls As Boolean  '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd|Type(Sample Cluster/Item Cluster)  'int flgClusterType
    bMakeOrgCls As Boolean    '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30d||c42c|
    numOrgCls As Integer   '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|; (|fffd|v|fffd|Z|fffd||fffd||fffd||fffd|) 'int numOrgCls
    
    dBekiti As Double       '|fffd||7b7||fffd||fffd|l                                    'double  bekiti
    
    nFontSize As Integer '|fffd|t|fffd|H|fffd||fffd||fffd|g|fffd||fffd|Size in point
    grpRowNum As Integer   '|fffd||fffd||fffd||334||631||fffd||30d|s|fffd||fffd|
    grpColNum As Integer   '|fffd||fffd||fffd||334||631||fffd||317||fffd|

    bDistSqrt As Boolean 'FALSE=|fffd||fffd||fffd|@|fffd|P(|fffd||fffd|), TRUE=|fffd||fffd||fffd|@|fffd|Q sqrt(|fffd||fffd|);
    
    'save the original contents
'   saveFlgTitle As Integer
'   saveFlgSmpName As Integer
    saveOutClsNum As Integer
'   saveIdataSheetName As String
    bPatBunui As Boolean

    'rgeDataBgn As Range
    'nBgnRow As Integer      'Range bgn row no
    'nBgnCol As Integer      'Range bgn column no
    smpNum_all As Integer  '=MAXcnt; Data sample number
    itemnum As Integer     '=MAXimx; Data item number; |fffd||3d0||fffd||fffd|I|fffd||fffd||fffd||fffd|

    smpNum_left As Integer 'excluded origin cluster; 2003.3.10 LSQ add
    smpNum_dat As Integer  'excluded nodata; 2003.3.10 LSQ add

End Type
'*
'* layNo|fffd|w|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||30c||fffd||fffd||282||315||6d1||fffd||fffd|p|fffd|\|fffd||fffd||fffd||301|i|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||353|r|fffd||fffd||fffd||14e|g|fffd||fffd||fffd|j;
'*
Type CLUSTER_LAYER_0303
    nClustNum As Integer            '|fffd|Y|fffd||fffd||fffd|w|fffd||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30c||90||fffd|; max = MAXPATTNUM_A
    nMapSize As Integer             'sample number or item number (i.e, size of the clsidmap[] buffer)
    nmClsId(0 To MAXPATTNUM_A - 1) As Integer   'cluster ID set; size = clustNum
    nmClsIdMap() As Integer          'cluster ID map to the sample or the item
    dmDs() As Double                 'distance matrix; max = MAXPATTNUM_A ^ 2
End Type

'*
'* |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||30d|\|fffd||fffd||fffd||fffd||fffd|i|fffd|f|fffd|[|fffd|^|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||182||30a||58c|W|fffd|L|fffd|q|fffd|j
'*
Type CLSTPAT_0303
    sampleNum As Integer       '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||30c||90||fffd| */
    patId As Integer           '|fffd|{|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd| ID |fffd||50d||fffd| (0,1,2,..., etc.) */
End Type

'*
'* |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||155||fffd||fffd||782||fffd||fffd||930b||fffd||282||315||6d1||fffd||fffd|p|fffd|\|fffd||fffd||fffd||301|i|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||30f||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd|j;
'*
Type CLUSTER_INIT
    patNum As Integer                              '|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||30c||90||fffd| */
    amCLSTPATs(0 To MAXPATTNUM_A) As CLSTPAT_0303   '|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||30c||fffd||fffd|f|fffd||90||fffd||fffd||18c||fffd||fffd|f|fffd||50d||fffd| old = MAXPATTNUM */
    itemnum As Integer                             '|fffd||fffd||fffd||690||fffd| */
End Type


'/*================ |fffd||fffd||fffd||fffd| pair ===================*/
Type OnePairDist
    no1 As Integer
    no2 As Integer
    dDist As Double
End Type

'=== EOF ===
Attribute VB_Name = "McOutComm"
'********************************************************/
'*  |fffd|\|fffd|o|fffd||34b||fffd||fffd||28a||590||fffd| (Common Functions for output)        */
'*                                                      */
'*  Jun 2003, PYJ                                       */
'*  FILE NAME: MCOutComm                                */
'*                                                      */
'********************************************************/
Option Explicit
Option Private Module

'---------------------------------------
'nameStr : <= 100
'
Function getGrpDistStr(strName As String) As String
    Dim str1 As String
    
    Select Case g_aMClstDlg.flgGrpDist
    Case DIST_MIN
        str1 = "|fffd||152|Z|fffd||fffd||fffd||fffd||fffd|@"
    Case DIST_MAX
        str1 = "|fffd||152||fffd||fffd||fffd||fffd||fffd||fffd|@"
    Case DIST_GAVG
        str1 = "|fffd|Q|fffd||fffd||fffd||3d6|@"
    Case DIST_JUSI
        str1 = "|fffd|d|fffd|S|fffd|@"
    Case Else   'DIST_WOUD
        str1 = "|fffd|E|fffd|H|fffd|[|fffd|h|fffd|@"
    End Select

    getGrpDistStr = strName & str1
End Function

'
'|fffd|J|fffd|n|fffd||fffd||fffd||fffd|
'nameStr : |fffd||fffd||fffd||fffd| <= 100;
'
Function getInitDistStr(strName) As String
    Dim str1 As String
    
    If Not g_aMClstDlg.bSmpCls Then
        getInitDistStr = strName & "sqrt(2*(1-r)), r=|fffd||fffd||fffd||58c|W|fffd||fffd|"
        Exit Function
    End If

    'sample cluster
    Select Case g_aMClstDlg.flgInitDist
    Case INIT_DIST_EUC0
        str1 = "|fffd||fffd||fffd||7b0||fffd||fffd||fffd||570||fffd||62f||fffd||78b||fffd||fffd||fffd|"
    Case INIT_DIST_BEKI
        str1 = "|fffd||fffd||fffd||7b0||fffd||fffd||302||5c2||fffd||fffd||fffd|(" & g_aMClstDlg.dBekiti & ")"
    Case INIT_DIST_EUC1
        str1 = "|fffd||e3c0||fffd|l|fffd||fffd||570||fffd||62f||fffd||78b||fffd||fffd||fffd|"
    Case Else 'INIT_DIST_MAH
        str1 = "|fffd||fffd||fffd||fffd||fffd||7bd||fffd||314||10b||fffd||fffd||fffd|"
    End Select

    getInitDistStr = strName & str1
End Function

Private Function getPairHyoName(nHyoFlg As Integer) As String
    Dim str1 As String

    Select Case nHyoFlg
    Case HYO_ITM_PAIR
        str1 = "|fffd||fffd||fffd||68a||502||30b||fffd||fffd||fffd|"
    Case HYO_SMP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||64a||502||30b||fffd||fffd||fffd|"
    Case HYO_PAT_PAIR
        str1 = "|fffd||fffd||fffd||fffd||74a||502||30b||fffd||fffd||fffd|"
    Case HYO_SMPGRP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||642||fffd|50|fffd||fffd||fffd||fffd||fffd||502||30b||fffd||fffd||fffd|" '|fffd||5fd||fffd||fffd|
    Case HYO_PATGRP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||742||fffd|50|fffd||fffd||fffd||fffd||fffd||502||30b||fffd||fffd||fffd|" '|fffd||5fd||fffd||fffd|
    Case Else
        str1 = "Unknown Table Name"     'ERROR VALUE
    End Select

    getPairHyoName = str1
End Function

Private Function getPairName(nHyoFlg As Integer) As String
    Dim str1 As String

    Select Case nHyoFlg
    Case HYO_ITM_PAIR
        str1 = "|fffd||fffd||fffd||696||fffd|"
    Case HYO_SMP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||656||fffd|"
    Case HYO_PAT_PAIR
        str1 = "|fffd||fffd||fffd||fffd||fffd|"
    Case HYO_SMPGRP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||642||fffd|50|fffd||fffd||fffd||fffd|"
    Case HYO_PATGRP_PAIR
        str1 = "|fffd||fffd||fffd||fffd||742||fffd|50|fffd||fffd||fffd||fffd|"
    Case Else
        str1 = "Unknown Name"     'ERROR VALUE
    End Select

    getPairName = str1
End Function

'--- name getting functions ---
'no : 1based
'bSmp: True--Sample name; False--Item name
Private Function sub_getName(no As Integer, bSmp As Boolean) As String
    Dim rgeData As Range
    Dim nRow As Integer, col As Integer

    nRow = IIf(bSmp, no, 0)
    col = IIf(bSmp, 0, no)
    Set rgeData = g_aMClstDlg.rgeDataIn.Cells(nRow + 1, col + 1)

    sub_getName = rgeData.Text
End Function

'
'no : 1based
'
Function getClsName(no As Integer) As String
    getClsName = sub_getName(no, g_aMClstDlg.bSmpCls)
End Function

'
'no1, no2 : 1based
'bSmp: True--Sample name; False--Item name
Private Function sub_getPairName(no1 As Integer, no2 As Integer, bSmp As Boolean) As String
    Dim str1 As String, str2 As String

    str1 = sub_getName(no1, bSmp)
    str2 = sub_getName(no2, bSmp)
    sub_getPairName = str1 & " - " & str2
End Function

'Function XL_outputByCol(...)   'no need

'
'|fffd|K|fffd||355|\
'return the the number of rows used
'
Function output_KiboHyo(ByVal rgeOutBgn As Range) As Integer
    Dim nRowUsed  As Integer
    
    rgeOutBgn = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd|K|fffd||355|\"
    rgeOutBgn.Font.Bold = True
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)
    Call dispHead_KiboHyo(rgeOutBgn)

    Set rgeOutBgn = rgeOutBgn.Offset(1, 0)
    nRowUsed = output_KiboHyoBody(rgeOutBgn)
    output_KiboHyo = nRowUsed + 3
End Function

Private Function dispHead_KiboHyo(ByVal rgeOutBgn As Range)
    Dim nColEnd As Integer
    Dim rge1 As Range

    rgeOutBgn = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[No."
    If g_aMClstDlg.bPatBunui Then
        rgeOutBgn(1, 2) = "|fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd|"
        rgeOutBgn(1, 3) = "|fffd||fffd||fffd||fffd|"
        nColEnd = 4
    Else
        rgeOutBgn(1, 2) = "|fffd||fffd||fffd||fffd|"
        nColEnd = 3
    End If
    rgeOutBgn(1, nColEnd) = "|fffd||45e6|"
    Set rge1 = rgeOutBgn.Range(Cells(1, 1), Cells(1, nColEnd))
    Call drawKeiSen_Ptn002a(rge1, xlThin, xlThin, 1)
End Function

'
'|fffd|K|fffd||355|\
'return the the number of rows used
'
Private Function output_KiboHyoBody(ByVal rgeOutBgn As Range) As Integer
    Dim i As Integer, nClstCount As Integer, nClsNum As Integer, nENum As Integer, nSum As Integer, patNum As Integer
    Dim nPatSampNum As Integer, nSmpNumdat As Integer, nNoDataNum As Integer, nOrgClsNum As Integer
    Dim nEndCol As Integer, nRowUsed As Integer
    Dim bOrgCls As Boolean, bPat As Boolean
    Dim rge1 As Range, rge2 As Range
    
    nSmpNumdat = g_aMClstDlg.smpNum_dat
    nNoDataNum = g_aMClstDlg.smpNum_left - nSmpNumdat
    bOrgCls = g_aMClstDlg.bMakeOrgCls
    nOrgClsNum = g_aMClstDlg.numOrgCls
    bPat = g_aMClstDlg.bPatBunui

    nClsNum = g_aCLayerR0303.nClustNum
    patNum = 0            'eSum
    For i = 0 To nClsNum - 1
        patNum = patNum + g_nmSizeArray(i)
    Next i
    If bPat Then
        nEndCol = 3
        nSum = nSmpNumdat    'patSampNumSum
    Else
        nEndCol = 2
        nSum = patNum
    End If
    If bOrgCls Then nSum = nSum + nOrgClsNum
    If nSum < 1 Then Exit Function

    'output
    Set rge1 = rgeOutBgn
    nClstCount = 1
    If bOrgCls Then     '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[
        nENum = nOrgClsNum
        If bPat Then
            nENum = 0
            nPatSampNum = nOrgClsNum
        End If
        Call output_KiboHyoOneRow(rge1, bPat, nENum, nPatSampNum, nSum, nClstCount)
        nClstCount = nClstCount + 1
        Set rge1 = rge1.Offset(1, 0)
        nRowUsed = 1
    End If
    For i = 0 To nClsNum - 1
        nENum = g_nmSizeArray(i)  'if pattern classified, that is the pattern number
        If bPat Then nPatSampNum = getPatSmpNum_byClsId(i + 1)
        Call output_KiboHyoOneRow(rge1, bPat, nENum, nPatSampNum, nSum, nClstCount)
        'next
        nClstCount = nClstCount + 1
        Set rge1 = rge1.Offset(1, 0)
    Next i
    '|fffd||fffd||fffd||fffd|
    Set rge2 = rgeOutBgn.Range("A1:A" & rge1.row - rgeOutBgn.row + 1)
    Set rge2 = rge2.Offset(0, nEndCol)
    rge2.NumberFormat = "0.00%"
    Set rge2 = rgeOutBgn.Range(Cells(1, 1), Cells(rge1.row - rgeOutBgn.row, nEndCol + 1))
    Call drawKeiSen_Ptn002a(rge2, xlThin, xlThin, 1)
    '|fffd||fffd||fffd|v
    Call output_KiboHyoOneRow(rge1, bPat, patNum, nSum, nSum, nClstCount)
    rge1 = "|fffd||fffd||fffd|v"
    Set rge2 = rge1.Range(Cells(1, 1), Cells(1, nEndCol + 1))
    Call drawKeiSen_Ptn002a(rge2, xlThin, xlThin, 1)
    nRowUsed = nRowUsed + nClsNum + 1

    '|fffd||fffd||fffd|O
    If g_aMClstDlg.bSmpCls Then  '|fffd||fffd||fffd||683|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||302||74f||fffd||fffd|O|fffd||202||fffd|
        Set rge1 = rge1.Offset(1, 0)
        rge1 = "|fffd||fffd||fffd|O"
        If bPat Then
            rge1(1, 3) = nNoDataNum
        Else
            rge1(1, 2) = nNoDataNum
        End If
        Set rge2 = rge1.Range(Cells(1, 1), Cells(1, nEndCol + 1))
        Call drawKeiSen_Ptn002a(rge2, xlThin, xlThin, 1)
        nRowUsed = nRowUsed + 1
    End If
    output_KiboHyoBody = nRowUsed
End Function

Private Function output_KiboHyoOneRow(rgeOutBgn As Range, bPat As Boolean, nNum As Integer, nPatSampNum As Integer, nSum As Integer, nClsCt As Integer)
    Dim col As Integer
    
    rgeOutBgn(1, 1) = nClsCt
    rgeOutBgn(1, 2) = nNum
    If bPat Then
        rgeOutBgn(1, 3) = nPatSampNum
        nNum = nPatSampNum
        col = 4
    Else
        col = 3
    End If
    rgeOutBgn(1, col) = nNum / nSum
End Function

'|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||282||30d||fffd||fffd||fffd|(|fffd|T|fffd||fffd||fffd|v|fffd||fffd|)|fffd|\|fffd||303|w|fffd|b|fffd|_|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
'clsNumFlg :
'      >= 1 -- cluster number
'      0    -- |fffd||fffd||fffd|O
'      -1   -- |fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^
'return the next output row
'
Function dispHead_ClsDetailHyo(nClsNumFlg As Integer, rgeOutBgn As Range)
    Dim i As Integer, nClsNo As Integer
    Dim strName As String
    Dim rge1 As Range

    If nClsNumFlg <= 0 Then
        rgeOutBgn = IIf(nClsNumFlg = 0, "|fffd||fffd||fffd|O", "< 1>(|fffd||fffd||fffd|_|fffd||fffd||fffd||4f8||5fd||fffd||fffd|)")
        rgeOutBgn.Font.Bold = True

        rgeOutBgn(2, 1) = "|fffd||fffd||fffd||fffd||656||fffd|"
        Set rge1 = rgeOutBgn.Range("A1:A2")
        Call drawKeiSen_Ptn002a(rge1, xlThin, xlThin, 0)
        Exit Function
    End If

    strName = IIf(g_aMClstDlg.bSmpCls, "|fffd||fffd||fffd||fffd||656||fffd|", "|fffd||fffd||fffd||696||fffd|")
    Set rge1 = rgeOutBgn.Range("A1:A2")
    For i = 0 To nClsNumFlg - 1
        nClsNo = i + 1
        If g_aMClstDlg.bMakeOrgCls Then nClsNo = nClsNo + 1

        rgeOutBgn(1, i + 1) = "<" & nClsNo & ">"
        rgeOutBgn(1, i + 1).Font.Bold = True
        rgeOutBgn(2, i + 1) = strName
        Call drawKeiSen_Ptn002a(rge1, xlThin, xlThin, 0)
        Set rge1 = rge1.Offset(0, 1)
    Next i
End Function

'
'Pair|fffd||fffd||fffd||fffd||fffd|\
'return the number of rows used
'
Function output_PairDistHyo(ByVal nHyoFlg As Integer, ByVal rgeOutBgn As Range) As Integer
    Dim i As Integer, nPairNum As Integer
    Dim dDist As Double
    Dim strPairName As String
    Dim rge1 As Range, rge2 As Range

    '|fffd||fffd||fffd||fffd||fffd|\
    rgeOutBgn = getPairHyoName(nHyoFlg)
    rgeOutBgn.Font.Bold = True
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)
    rgeOutBgn = getInitDistStr("|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z|fffd|F")
    Set rgeOutBgn = rgeOutBgn.Offset(1, 0)
    rgeOutBgn = getGrpDistStr("|fffd||fffd||fffd||fffd||fffd||fffd||30b||fffd||fffd||fffd||fffd|v|fffd|Z|fffd|F")
    Set rgeOutBgn = rgeOutBgn.Offset(2, 0)

    'pair distance table
    rgeOutBgn = "No."
    rgeOutBgn(1, 2) = getPairName(nHyoFlg)
    rgeOutBgn(1, 3) = "|fffd||fffd||fffd||fffd|"
    Set rge2 = rgeOutBgn.Range("A1:C1")
    Call drawKeiSen_Ptn002a(rge2, xlThin, xlThin, 1)
    Set rgeOutBgn = rgeOutBgn.Offset(1, 0)

    If nHyoFlg = HYO_SMPGRP_PAIR Or nHyoFlg = HYO_PATGRP_PAIR Then
        nPairNum = g_aCLayerGRP.nClustNum - 1
    Else
        nPairNum = g_aCLayerFST.nClustNum - 1
    End If

    Set rge1 = rgeOutBgn
    For i = 0 To nPairNum - 1
        If nHyoFlg = HYO_SMPGRP_PAIR Or nHyoFlg = HYO_PATGRP_PAIR Then
            Call GetOnePairNameAndDist(i, nHyoFlg, g_amGrpPairDist, dDist, strPairName)
        Else
            Call GetOnePairNameAndDist(i, nHyoFlg, g_amAllPairDist, dDist, strPairName)
        End If

        rge1 = i + 1
        rge1(1, 2) = strPairName
        rge1(1, 3) = dDist
        Set rge1 = rge1.Offset(1, 0)
    Next i
    '|fffd||fffd||fffd||fffd|
    Set rge2 = rgeOutBgn.Range("C1:C" & nPairNum)
    rge2.NumberFormat = "0.0000"
    Set rge2 = rgeOutBgn.Range("A1:C" & nPairNum)
    Call drawKeiSen_Ptn002a(rge2, xlThin, xlThin, 1)

    output_PairDistHyo = nPairNum + 6
End Function

Private Function GetOnePairNameAndDist(i As Integer, nHyoFlg As Integer, amPairDist() As OnePairDist, _
        dDist As Double, strPairName As String) As Boolean
    Dim no1 As Integer, no2 As Integer
    
    no1 = amPairDist(i).no1
    no2 = amPairDist(i).no2
    dDist = amPairDist(i).dDist
    If Not g_aMClstDlg.bDistSqrt Then dDist = Sqr(dDist)  'DIST DEF MDF HERE


    '50cluster id (|fffd|s|fffd|A|fffd||fffd|,1,3,25,2 etc) to 50cluster no (1,2,3,... |fffd|A|fffd||fffd|)
    If nHyoFlg = HYO_SMPGRP_PAIR Or nHyoFlg = HYO_PATGRP_PAIR Then
        no1 = findClsId_by_clsid(no1, g_aCLayerGRP) + 1
        no2 = findClsId_by_clsid(no2, g_aCLayerGRP) + 1
        If no1 < 1 Or no2 < 1 Then  'ERROR
            MsgBox " [|fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[] : output_PairDistHyo"
            GetOnePairNameAndDist = False
            Exit Function
            'return rowEnd + 2;
        End If
    End If

    If nHyoFlg = HYO_ITM_PAIR Then
        strPairName = "' " & sub_getPairName(no1, no2, False)
    ElseIf nHyoFlg = HYO_SMP_PAIR Then
        strPairName = "' " & sub_getPairName(no1, no2, True)
    Else
        strPairName = "'" & Str(no1) & " - " & no2
    End If
    GetOnePairNameAndDist = True
End Function

'
'clsNo : 1based
'
Private Function getPatSmpNum_byClsId(nClsNo As Integer) As Integer
    Dim nClsNoCol As Integer
    Dim rge As Range

    If g_aMClstDlg.bMakeOrgCls Then nClsNo = nClsNo + 1

    nClsNoCol = DEF_clsNoCol(g_aMClstDlg.itemnum)
    Set rge = g_aMClstDlg.rgeDataIn.Offset(1, nClsNoCol).Range("A1:A" & g_aMClstDlg.smpNum_dat)

    getPatSmpNum_byClsId = WorksheetFunction.CountIf(rge, nClsNo)
End Function

'=== EOF ===
Attribute VB_Name = "McSample"
'*===============================================
'*  |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||502||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||4fc||7ad||fffd||fffd|  *
'*                                              *
'*  DATE : Jun 2003, PYJ                        *
'*                                              *
'*  FILE NAME : MCSAMPLE                       *
'===============================================*/
Option Explicit
Option Private Module

'*
'* |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||30f||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30d||c42c|
'*
'* |fffd||fffd||fffd||fffd||fffd|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X|fffd||c42c|
'*  1).|fffd||fffd||fffd||783|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|CLUSTER_INIT|fffd||24d||c42c||fffd||fffd||fffd||101|A
'*  2).|fffd||fffd||fffd||30d||c42c||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|CLUSTER_INIT|fffd||fffd||fffd|g|fffd||fffd||fffd||101|C|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||30f||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|CLUSTER_LAYER|fffd||24d||c42c||fffd||fffd||fffd||fffd|B
'*
'* |fffd||fffd||fffd||fffd|:
'*  ptPat  --  |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd|G
'*  ptData -- |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||30f||fffd||fffd|n|fffd|w|fffd|f|fffd|[|fffd|^ (output)
'*
Function makeInitClusterLayer_SMP(ptPat As CLUSTER_INIT, ptData As CLUSTER_LAYER_0303) As Boolean
    Dim i As Integer
    Dim patNum As Integer, nItmNum As Integer
    Dim bRtn As Boolean

    patNum = ptPat.patNum
    nItmNum = ptPat.itemnum

    '|fffd|`|fffd|F|fffd|b|fffd|N
    If patNum < 1 Or patNum > MAXPATTNUM_A Or nItmNum < 1 Or nItmNum > MAXITEMNUM Then
        MsgBox ERR_CLS_01
        makeInitClusterLayer_SMP = False
        Exit Function
    End If

    '|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30c|v|fffd|Z (old = |fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||355||fffd||fffd||fffd||fffd|l|fffd||142||fffd|, H15.3.13 LSQ)
    bRtn = CalDist(nItmNum, patNum, ptData)
    If bRtn Then
        '/* |fffd||fffd||fffd||311||fffd||fffd||fffd||fffd||310||752||fffd| */
        ptData.nClustNum = patNum  'cluster number
    
        For i = 0 To patNum - 1
            ptData.nmClsId(i) = ptPat.amCLSTPATs(i).patId     'cluster ID set; size = clustNum
        Next i
    End If
    makeInitClusterLayer_SMP = bRtn
End Function

'|fffd||fffd||fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30c|v|fffd|Z
Private Function CalDist(nItmNum As Integer, patNum As Integer, ptData As CLUSTER_LAYER_0303) As Boolean
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    'Dim dmMinV(0 To MAXITEMNUM - 1, 0 To MAXITEMNUM - 1) As Double
    Dim dmSmpA(0 To MAXITEMNUM - 1) As Double, dmSmpB(0 To MAXITEMNUM - 1) As Double
    Dim dTmp As Double, dDist As Double
    Dim dAve1 As Double, dAve2 As Double, dStd1 As Double, dStd2 As Double
    Dim ddik As Double, ddiL As Double, ddjk As Double, ddjL As Double
    
    ReDim Gskn_m(1 To nItmNum, 1 To nItmNum)
    If g_aMClstDlg.flgInitDist = INIT_DIST_MAH Then
        If Not calcMINV() Then
            MsgBox ERR_CLS_MEANSD
            CalDist = False
            Exit Function
        End If
    End If

    For i = 0 To patNum - 1
        ptData.dmDs(i, i) = 0
        Call getOneSample(i, dmSmpA)

        For j = i + 1 To patNum - 1
            Call getOneSample(j, dmSmpB)

            dDist = 0
            For k = 0 To nItmNum - 1
                If g_aMClstDlg.flgInitDist = INIT_DIST_MAH Then
                    dAve1 = g_dmAveItm(k)
                    dStd1 = g_dmStdItm(k)

                    For l = 0 To nItmNum - 1
                        dAve2 = g_dmAveItm(l)
                        dStd2 = g_dmStdItm(l)
                    
                        ddik = (dmSmpA(k) - dAve1) / dStd1
                        ddjk = (dmSmpB(k) - dAve1) / dStd1
                        ddiL = (dmSmpA(l) - dAve2) / dStd2
                        ddjL = (dmSmpB(l) - dAve2) / dStd2
                        dDist = dDist + (ddik - ddjk) * GsknInvMx(k + 1, l + 1) * (ddiL - ddjL)
                    Next l
                Else
                    dTmp = dmSmpA(k) - dmSmpB(k)
                    dDist = dDist + dTmp * dTmp
                End If
            Next k
            If g_aMClstDlg.flgInitDist <> INIT_DIST_MAH And g_aMClstDlg.bDistSqrt Then dDist = Sqr(dDist)   'DIST DEF MDF HERE; H15.5.20 LSQ
            ptData.dmDs(i, j) = dDist
            ptData.dmDs(j, i) = dDist
        Next j
    Next i
    ReDim Gskn_m(1)
    CalDist = True
End Function

'*
'* |fffd|}|fffd|n|fffd||fffd||fffd|m|fffd|r|fffd|X |fffd|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X|fffd||30c|v|fffd|Z
'*
Private Function calcMINV() As Boolean
    Set Gdata.dataBgn = g_aMClstDlg.rgeDataIn(2, 2)
    Gdata.SmpNum = g_aMClstDlg.smpNum_dat
    Gdata.itemnum = g_aMClstDlg.itemnum
    Call calc_soukan
    calcMINV = GsknInvMxOk
End Function

'
'nSmpId : 0 based
'
Private Function getOneSample(nSmpId As Integer, dmSmpData() As Double)
    Dim j As Integer, itemnum As Integer
    Dim rgeData As Range

    itemnum = g_aMClstDlg.itemnum
    If g_aMClstDlg.bPatBunui Then
        For j = 0 To itemnum - 1
            dmSmpData(j) = g_dmXDAT(nSmpId, j)
        Next j
    Else
        'for data access
        Set rgeData = g_aMClstDlg.rgeDataIn.Range("B2").Offset(nSmpId, 0)
        For j = 0 To itemnum - 1
            dmSmpData(j) = val(rgeData(1, j + 1))
        Next j
    End If
End Function

'=== EOF ===
Attribute VB_Name = "Mcdt_smp"
'*===============================================
'*  |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||502||303|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd|                  *
'*  |fffd||693|I|fffd|F                                      *
'*      |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|G|fffd|N|fffd|Z|fffd||fffd||fffd|V|fffd|[|fffd|g|fffd||fffd||fffd||fffd|      *
'*      |fffd||fffd||fffd||fffd||fffd||fffd||fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||101|A|fffd||fffd||835e||fffd||781|B            *
'*                                              *
'*  DATE : Jun 2003                             *
'*  BY : PYJ                                    *
'*                                              *
'*  FILE NAME : MCDT_SMP                        *
'===============================================*/
Option Explicit
Option Private Module

Dim S_PatNum(0 To 5) As Integer ' = {1000, 1156, 1000, 1296, 1024} ;
Dim S_Domain(0 To 5) As Integer ' = {1000, 34, 10, 6, 4} ;

'*
'* |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||782||fffd||fffd||202||fffd|
'*
Function sampleClassify_No(aClsInitData As CLUSTER_INIT, aClsData As CLUSTER_LAYER_0303)
    Dim i As Integer, SmpNum As Integer, itemnum As Integer
    
    SmpNum = g_aMClstDlg.smpNum_dat    '|fffd|L|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    itemnum = g_aMClstDlg.itemnum

    aClsInitData.patNum = SmpNum
    aClsInitData.itemnum = itemnum
    aClsData.nMapSize = SmpNum

    For i = 0 To SmpNum - 1
        aClsInitData.amCLSTPATs(i).sampleNum = 1
        aClsInitData.amCLSTPATs(i).patId = i + 1
        aClsData.nmClsIdMap(i) = i + 1    'cluster ID map to the sample
    Next i
End Function

'*
'* |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||303|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd|;
'* |fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd|@ (1000^1(1000), 34^2(1156), 10^3(1000), 6^4(1296), 4^5(1024) )
'* |fffd|p|fffd|^|fffd|[|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|GppXDAT[][]|fffd||255||6d1||fffd||fffd||fffd||fffd||fffd||fffd|B
'*
Function sampleClassify_Pat(aClsInitData As CLUSTER_INIT, aClsData As CLUSTER_LAYER_0303) As Boolean
    Dim bRtn As Boolean
    Dim i As Integer, SmpNum As Integer, itemnum As Integer
    Dim nmWkSmpClsId() As Integer
    
    S_PatNum(0) = 1000: S_PatNum(1) = 1156: S_PatNum(2) = 1000: S_PatNum(3) = 1296: S_PatNum(4) = 1024
    S_Domain(0) = 1000: S_Domain(1) = 34: S_Domain(2) = 10: S_Domain(3) = 6: S_Domain(4) = 4
    SmpNum = g_aMClstDlg.smpNum_dat    '|fffd|L|fffd||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    itemnum = g_aMClstDlg.itemnum
    
    ReDim nmWkSmpClsId(0 To SmpNum - 1) As Integer

    '/* |fffd|f|fffd|[|fffd|^|fffd||315||fffd||fffd||fffd| */
    aClsInitData.patNum = S_PatNum(itemnum - 1)    'not finished
    aClsInitData.itemnum = itemnum

    For i = 0 To aClsInitData.patNum - 1           'init
        aClsInitData.amCLSTPATs(i).sampleNum = 0
    Next i

    '/* |fffd|f|fffd|[|fffd|^|fffd||30b|A|fffd||fffd| */
    bRtn = GetIdPat(itemnum, SmpNum, aClsInitData, nmWkSmpClsId)
    If bRtn Then
        '|fffd|f|fffd|[|fffd|^|fffd||312||fffd||fffd||fffd||fffd|F|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|=0|fffd||303|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Call DataModify(aClsInitData)

        '|fffd|f|fffd|[|fffd|^|fffd||310||fffd||fffd||fffd|
        bRtn = DataArrange(aClsInitData, itemnum, SmpNum, nmWkSmpClsId)
    End If
    
    If bRtn Then
        'reset pattern ID in sample list to 1,2,3 etc
        bRtn = ResetPatternId(itemnum, SmpNum, nmWkSmpClsId, aClsInitData)
    End If
    If bRtn Then
        aClsData.nMapSize = aClsInitData.patNum 'nRwNum
        For i = 0 To aClsInitData.patNum - 1
            'Jun Pattern ID
            aClsInitData.amCLSTPATs(i).patId = i + 1     '1,2,3 etc |fffd||242||fffd||fffd||fffd|
            aClsData.nmClsIdMap(i) = i + 1
        Next i
    End If

    ReDim nmWkSmpClsId(1)

    sampleClassify_Pat = bRtn
End Function

'reset pattern ID in sample list to 1,2,3 etc
Private Function ResetPatternId(itemnum As Integer, SmpNum As Integer, nmWkSmpClsId() As Integer, aClsInitData As CLUSTER_INIT) As Boolean
    Dim i As Integer, nId As Integer, nPatIdCol As Integer
    Dim rgeData As Range
    
    nPatIdCol = DEF_patNoCol(itemnum)   'saved to temp sheet
    Set rgeData = g_aMClstDlg.rgeDataIn.Range(Cells(2, 2), Cells(2, 1 + itemnum))
    For i = 0 To SmpNum - 1
        nId = findJunId(nmWkSmpClsId(i), aClsInitData)
        If nId < 0 Then  'error
            MsgBox ERR_CLS_04
            ResetPatternId = False
            Exit Function
        End If

        'pattern ID saved to temp sheet
        rgeData(1, nPatIdCol) = nId + 1
        Set rgeData = rgeData.Offset(1, 0)
    Next i

    ResetPatternId = True
End Function

'|fffd|f|fffd|[|fffd|^|fffd||310||fffd||fffd||fffd|
Private Function DataArrange(aClsInitData As CLUSTER_INIT, itemnum As Integer, SmpNum As Integer, nmWkSmpClsId() As Integer) As Boolean
    Dim rgeData As Range
    Dim dmDataRow(0 To 5) As Double
    Dim i As Integer, j As Integer, k As Integer
    Dim nRwNum As Integer, nClNum As Integer
    Dim nmWkSmpNum() As Integer
    Dim bRtn As Boolean
    
    ReDim nmWkSmpNum(0 To SmpNum - 1) As Integer
    nRwNum = aClsInitData.patNum
    nClNum = aClsInitData.itemnum

    For i = 0 To nRwNum - 1
        nmWkSmpNum(i) = 0
        For j = 0 To nClNum - 1
            g_dmXDAT(i, j) = 0
        Next j
    Next i
    
    Set rgeData = g_aMClstDlg.rgeDataIn.Range(Cells(2, 2), Cells(2, 1 + itemnum))
    bRtn = True
    For i = 0 To SmpNum - 1
        For j = 0 To itemnum - 1
            dmDataRow(j) = val(rgeData(1, j + 1))
        Next j

        'search the pattern
        For k = 0 To nRwNum - 1
            If aClsInitData.amCLSTPATs(k).patId = nmWkSmpClsId(i) Then Exit For
        Next k

        If k = nRwNum Then
            MsgBox ERR_CLS_BUNRUI
            bRtn = False
            Exit For
        End If

        nmWkSmpNum(k) = nmWkSmpNum(k) + 1
        For j = 0 To nClNum - 1
            g_dmXDAT(k, j) = g_dmXDAT(k, j) + dmDataRow(j)
        Next j

        'next row
        Set rgeData = rgeData.Offset(1, 0)
    Next i

    If bRtn Then
        For k = 0 To nRwNum - 1
            If nmWkSmpNum(k) = 0 Then
                MsgBox ERR_SAMP_LACK
                bRtn = False
                Exit For
            End If
    
            For j = 0 To nClNum - 1
                g_dmXDAT(k, j) = g_dmXDAT(k, j) / nmWkSmpNum(k)
            Next j
        Next k
    End If
    ReDim nmWkSmpNum(1)
    DataArrange = bRtn
End Function

'|fffd|f|fffd|[|fffd|^|fffd||312||fffd||fffd||fffd||fffd|F|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|=0|fffd||303|p|fffd|^|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function DataModify(aClsInitData As CLUSTER_INIT)
    Dim k As Integer, nTmp As Integer, i As Integer
    
    k = 0
    For i = 0 To aClsInitData.patNum - 1
        nTmp = aClsInitData.amCLSTPATs(i).sampleNum
        If nTmp > 0 Then
            'tmpi += ptFrm->sampleNum;
            aClsInitData.amCLSTPATs(k).sampleNum = nTmp
            aClsInitData.amCLSTPATs(k).patId = aClsInitData.amCLSTPATs(i).patId
            k = k + 1
        End If
    Next i
    'smpNum = tmpi; if not --> error;  //|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||30d||fffd||fffd|v
    aClsInitData.patNum = k   'finished
End Function

'/* |fffd|f|fffd|[|fffd|^|fffd||30b|A|fffd||fffd| */
Private Function GetIdPat(ByVal itemnum As Integer, ByVal SmpNum As Integer, aClsInitData As CLUSTER_INIT, nmWkSmpClsId() As Integer) As Boolean
    Dim rgeData As Range
    Dim nPatIdCol As Integer, nIdPat As Integer
    Dim dmDataRow(0 To 5) As Double
    Dim i As Integer, j As Integer
    
    Set rgeData = g_aMClstDlg.rgeDataIn.Range(Cells(2, 2), Cells(2, 1 + itemnum))
    nPatIdCol = DEF_patNoCol(itemnum)   'saved to temp sheet

    For i = 0 To SmpNum - 1
        For j = 0 To itemnum - 1
            dmDataRow(j) = val(rgeData(1, j + 1))
        Next j

        nIdPat = setN_PatId(dmDataRow, g_dmAveItm, g_dmStdItm, itemnum)

        If nIdPat < 0 Or nIdPat >= aClsInitData.patNum Then
            MsgBox ERR_CLS_BUNRUI
            GetIdPat = False
            Exit Function
        End If

        aClsInitData.amCLSTPATs(nIdPat).sampleNum = aClsInitData.amCLSTPATs(nIdPat).sampleNum + 1
        aClsInitData.amCLSTPATs(nIdPat).patId = nIdPat + 1

        '|fffd||389||fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd| (pattern ID saved to clsid map)
        nmWkSmpClsId(i) = nIdPat + 1

        'pattern ID saved to temp sheet
        rgeData(1, nPatIdCol) = nIdPat + 1

        'next sample
        Set rgeData = rgeData.Offset(1, 0)
    Next i
    GetIdPat = True
End Function

Private Function findJunId(patId As Integer, aClsInitData As CLUSTER_INIT) As Integer
    Dim i As Integer, nNum As Integer
    
    nNum = aClsInitData.patNum

    For i = 0 To nNum - 1
        If aClsInitData.amCLSTPATs(i).patId = patId Then
            findJunId = i
            Exit Function
        End If
    Next i
    findJunId = -1
End Function

'*
'* |fffd|o|fffd||341|F
'*  |fffd|f|fffd|[|fffd|^ dmDt |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Z|fffd||fffd||fffd||30d||fffd||fffd|W nmN(ptN in C);
'*  return : ptN |fffd||fffd||fffd||389||fffd||fffd||fffd||fffd||fffd||a39f||fffd||fffd||fffd||fffd||fffd|W (0 based);
'*
Private Function setN_PatId(dmDt() As Double, dmMn() As Double, dmSd() As Double, nItmNum As Integer) As Integer
    Dim j As Integer, k As Integer, nSec As Integer, nDmn As Integer, nRtn As Integer
    Dim nmN(0 To MAXITEMNUM_5) As Integer
    Dim dRYO As Double, dPVal As Double, dProb As Double

    dProb = 1# / S_Domain(nItmNum - 1)
    nSec = S_Domain(nItmNum - 1) - 1

    For j = 0 To nItmNum - 1
        '|fffd|W|fffd||fffd||fffd||fffd|
        If dmSd(j) > 0 Then
            dRYO = (dmDt(j) - dmMn(j)) / dmSd(j)
        Else
            dRYO = DBL_INFTY   '/* |fffd||fffd||fffd||fffd||fffd||fffd| */
        End If

        '|fffd|m|fffd||fffd|
        dPVal = WorksheetFunction.NormSDist(dRYO)     'probNormDist(RYO)

        For k = 0 To nSec - 1
            If dPVal < (k + 1) * dProb Then
                nmN(j) = k
                Exit For
            End If
        Next k
        If k = nSec Then nmN(j) = nSec
    Next j

    '/* nmN |fffd||fffd||fffd||389||fffd||fffd||fffd||fffd||fffd||a39f||fffd||fffd||fffd||fffd||fffd|W|fffd||30c|v|fffd|Z */
    nDmn = S_Domain(nItmNum - 1)
    nRtn = 0
    For j = 0 To nItmNum - 1
        nRtn = nRtn * nDmn + nmN(j)
    Next j
    setN_PatId = nRtn
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet121"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Thr2Dlg"
'===================================================
' THR2 : |fffd||fffd||fffd||28f||fffd||fffd||fffd|
'
' H14.1 by LSQ
'===================================================
Option Explicit
Option Private Module

'-----------------------------------------------------------------
'return TRUE OK else CANCEL
'
Function getDlgComm(theDlgComm As DLG_Comm, dlgBox As Object, thrType As Integer) As Boolean
    Dim rtn, dlgCom As DLG_Comm
    Dim bkName As String, stName As String, ceName As String
    Dim optObj As OptionButton, edtObj As Object
    Dim bCol As Boolean, bTitle As Boolean, bXSel As Boolean, rwNum, clNum
    Dim tmpRge As Range, tmpstr As String
    
    On Error Resume Next
    
reDisp:
    Err.Clear
    Application.ScreenUpdating = True
    
    rtn = dlgBox.Show
    If rtn = False Then     'Cancel
        getDlgComm = False
        GoTo exitMe
    End If
        
   '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    If getRangeInfo(dlgBox.EditBoxes("edtDataRange").Text, bkName, stName, ceName) = False Then
        GoTo reDisp
    End If
    Set dlgCom.inRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|I|fffd||fffd|
    Set optObj = dlgBox.OptionButtons("optHsSelectAri")
    dlgCom.bXSel = getOptVal(optObj, Err.Number, False)
    Err.Clear
    
    '|fffd|o|fffd||350||fffd|
    Set optObj = dlgBox.OptionButtons("optOutToNewSht")
    dlgCom.bOutToNewSht = getOptVal(optObj, Err.Number, False)
    Err.Clear
    
   '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    If dlgCom.bOutToNewSht = False Then
        If getRangeInfo(dlgBox.EditBoxes("edtOutRange").Text, bkName, stName, ceName) = False Then
            GoTo reDisp
        End If
        Set dlgCom.outBgnCel = Workbooks(bkName).Worksheets(stName).Range(ceName).Offset(0, 0).Range("A1")
    End If
    
    '|fffd|f-|fffd|^|fffd|n|fffd||fffd||315||fffd||fffd||fffd|
    Set optObj = dlgBox.OptionButtons("optCol")
    dlgCom.bCol = getOptVal(optObj, Err.Number, False)
    If Err.Number <> 0 Then
        dlgCom.bCol = (dlgBox.CheckBoxes("chkCol") = xlOn)
    End If
    Err.Clear
    
    '|fffd||fffd|s(|fffd||fffd|)|fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    Set optObj = dlgBox.OptionButtons("optTitle")
    dlgCom.bTitle = getOptVal(optObj, Err.Number, False)
    If Err.Number <> 0 Then
        dlgCom.bTitle = (dlgBox.CheckBoxes("chkTitle") = xlOn)
    End If
    Err.Clear
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f-|fffd|^|fffd||fffd||fffd||fffd|
    Set optObj = dlgBox.OptionButtons("optStop")
    dlgCom.bStop = getOptVal(optObj, Err.Number, False)
    If Err.Number <> 0 Then
        dlgCom.bStop = Not (dlgBox.CheckBoxes("chkNoNumCon") = xlOn)
    End If
    Err.Clear
    
    '|fffd|T|fffd||fffd||fffd|v|fffd||fffd|
    If thrType = THR_CLST Then
        Set optObj = dlgBox.OptionButtons("optSmpTitle")
        dlgCom.bSmpTitle = getOptVal(optObj, Err.Number, False)
        Err.Clear
    End If
    
    bCol = dlgCom.bCol
    bTitle = dlgCom.bTitle
    bXSel = dlgCom.bXSel
    
    '|fffd||fffd||fffd||690||fffd||fffd||1bb||fffd||fffd||fffd||650||fffd|
    rwNum = dlgCom.inRange.Rows.Count
    clNum = dlgCom.inRange.Columns.Count
    
    dlgCom.itemnum = IIf(bCol, clNum, rwNum)
    dlgCom.SmpNum = IIf(bCol, rwNum, clNum)
    
    If bTitle Then
        dlgCom.SmpNum = dlgCom.SmpNum - 1
    End If
    
    If bXSel Then
        dlgCom.SmpNum = dlgCom.SmpNum - 1
    End If
       
    If thrType = THR_CLST And dlgCom.bSmpTitle Then
        dlgCom.itemnum = dlgCom.itemnum - 1
    End If
    
    '|fffd||fffd|f|fffd|[|fffd|^|fffd||303|`|fffd|F|fffd|b|fffd|N
    If dlgCom.bStop Then
        Set tmpRge = getDataRange_SmpTitle(dlgCom.inRange, bCol, bTitle, IIf(thrType = THR_CLST, dlgCom.bSmpTitle, False), bXSel) 'data range
        If HasNoData(tmpRge) Then
            MsgBox MSG_nodata
            GoTo reDisp
        End If
    End If
   
    '-- Extra --
    dlgCom.bYsk = False
    If thrType = THR_INSI Or thrType = THR_SSB Then
        If dlgBox.CheckBoxes("chkYsk") = xlOn Then
            If getRangeInfo(dlgBox.EditBoxes("edtYskDataRange").Text, bkName, stName, ceName) = False Then
                GoTo reDisp
            End If
            Set dlgCom.yskRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
            rwNum = dlgCom.yskRange.Rows.Count
            clNum = dlgCom.yskRange.Columns.Count
            
            dlgCom.yskItemNum = IIf(bCol, clNum, rwNum)
            dlgCom.yskSmpNum = IIf(bCol, rwNum, clNum)
            
            'Check
            'If dlgCom.yskItemNum <> dlgCom.itemNum Then
            '   MsgBox ""
            '   GoTo reDisp
            'End If
            
            dlgCom.bYsk = True
        End If
    End If
   
    dlgCom.bLab = False
    If thrType = THR_INSI Or thrType = THR_SSB Then
        Dim bLab As Boolean
        
        If thrType = THR_INSI Then bLab = (dlgBox.CheckBoxes("chkByNo") = xlOff)
        If thrType = THR_SSB Then bLab = (dlgBox.OptionButtons("optByName") = xlOn)
        dlgCom.bLab = bLab
    
        If bLab Then
            If getRangeInfo(dlgBox.EditBoxes("edtLabRange").Text, bkName, stName, ceName) = False Then
                GoTo reDisp
            End If
            Set dlgCom.labRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
            '
            If dlgCom.bYsk Then
                If getRangeInfo(dlgBox.EditBoxes("edtYskLabRange").Text, bkName, stName, ceName) = False Then
                    GoTo reDisp
                End If
                Set dlgCom.yskLabRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
            End If
        End If
    End If
   
    If thrType = THR_INSI Then
        Set dlgCom.jsRange = Nothing
        
        tmpstr = dlgBox.EditBoxes("edtJsDataRange").Text
        If Trim(tmpstr) <> "" Then
            If getRangeInfo(dlgBox.EditBoxes("edtJsDataRange").Text, bkName, stName, ceName) = False Then
                GoTo reDisp
            End If
            Set dlgCom.jsRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
        End If
        '
        dlgCom.bJsCate = (dlgBox.CheckBoxes("chkCateYes") = xlOn)
        If dlgCom.bJsCate And Not (dlgCom.jsRange Is Nothing) Then
            If getRangeInfo(dlgBox.EditBoxes("edtJsCateRange").Text, bkName, stName, ceName) = False Then
                GoTo reDisp
            End If
            Set dlgCom.jsCateRange = Workbooks(bkName).Worksheets(stName).Range(ceName)
        End If
    End If
   
    '
    theDlgComm = dlgCom                 '|fffd||fffd||fffd||295||fffd||fffd||fffd||fffd||310||752||fffd|

    getDlgComm = True
    
exitMe:
    On Error GoTo 0

End Function
'
Private Function getOptVal(ByVal optObj As OptionButton, ByVal errNo As Integer, ByVal bValFor_NotExistOrOff As Boolean) As Boolean
    
    If errNo <> 0 Then  'Option Button Not Exists
        getOptVal = bValFor_NotExistOrOff
    Else
        getOptVal = IIf(optObj = xlOff, bValFor_NotExistOrOff, Not bValFor_NotExistOrOff)
    End If

End Function
'
'=== EOF ===
Attribute VB_Name = "Thr2Type"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|v : |fffd||fffd||fffd||28d|\|fffd||fffd||fffd||fffd|
'
' 2001.11 -- 2002.7 by LSQ
'===================================================
Option Private Module
Option Explicit

'|fffd||fffd||fffd||293||fffd||fffd|e
Type DATA_Comm
    '-- calc data --
    itemNameRge As Range
    smpNameRge As Range
    dataBgn As Range
    yskSmpNameRge As Range
    yskDataBgn As Range
    
    itemnum As Integer
    
    SmpNum As Long         'all sample number
    smpNumData As Long     'data sample only
    smpNumNoData As Long   'no data sample number
    
    yskSmpNum As Long       'all ysk sample number
    yskSmpNumData As Long   'data ysk sample only
    
    '-- graph data --
    hyoBgn As Range         'hyo left up cell; hyo = has title, has sample name
    hyoSmpNum As Long       '
    hyoItemNum As Integer   '
    hyoName As String       '
    
    '-- cluster analysis new data --
    orgClsSmpNum As Integer  '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    orgClsDatBgn As Range    '|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||30a|J|fffd|n|fffd||292|u
End Type

'|fffd||fffd||fffd||282||30e|w|fffd||fffd||fffd||fffd|e
Type DLG_Comm
    inRange As Range    '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    itemnum As Integer  '|fffd||fffd||fffd||690||fffd|
    SmpNum As Long      '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    
    outBgnCel As Range   '|fffd||fffd||fffd||28f|o|fffd||342||30a|J|fffd|n|fffd|Z|fffd|[|fffd||fffd|
    
    bXSel As Boolean      '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|I|fffd||fffd|: TRUE=Yes else=No
    bOutToNewSht As Boolean   'TRUE=|fffd|V|fffd|K|fffd|V|fffd|[|fffd|g|fffd||24f|o|fffd||fffd| else=|fffd|w|fffd||fffd|Z|fffd||fffd||fffd||292|u|fffd||58f|o|fffd||fffd|
    
    bCol As Boolean      '|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|; TRUE=col else =row
    bStop As Boolean     '|fffd||fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd|; TRUE=stop else =skip
    bTitle As Boolean    '|fffd||fffd|s(|fffd||fffd|)|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||781|GTRUE=Title else =data
    
    '---- Extra ----
    bSmpTitle As Boolean '|fffd||fffd||fffd|(|fffd|s)|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||781|GTRUE=Title else =data
    
    bYsk As Boolean        '
    yskRange As Range      '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    yskItemNum As Integer  '|fffd||fffd||fffd||690||fffd|
    yskSmpNum As Integer   '|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd|
    
    bLab As Boolean        '
    labRange As Range      'Label|fffd||348||fffd|
    yskLabRange As Range   'Ysk Label|fffd||348||fffd|

    jsRange As Range        '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    '
    bJsCate As Boolean      '
    jsCateRange As Range    '|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||fffd|

    '|fffd|_|fffd|O|fffd||fffd||fffd|t
    bTenGrp As Boolean    '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|
    bOneTenGrp As Boolean '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||310||fffd| --- |fffd|P|fffd|} or |fffd|S|fffd|}
    tateNo As Integer              '|fffd|^|fffd|e|fffd||308||fffd||fffd|q|fffd||50d||fffd|
    yokoNo As Integer              '|fffd||fffd||fffd|R|fffd||308||fffd||fffd|q|fffd||50d||fffd|
    bTenGrpItemNameDisp As Boolean '|fffd||fffd||fffd|q|fffd||fffd||fffd||5d7||293|_|fffd|O|fffd||fffd||fffd|t|fffd||24d||fffd||fffd||696||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|
    bTenGrpSmpLabDisp As Boolean ' |fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||24c||91||316||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|
    mojiNum As Integer             '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||315||fffd||fffd||fffd||fffd||fffd|
    fontNum As Integer             '|fffd|_|fffd|O|fffd||fffd||fffd|t|fffd||241|A|fffd|_|fffd||fffd||fffd||302||fffd||fffd||fffd||a347||fffd||303|t|fffd|H|fffd||fffd||fffd|g|fffd||752||fffd|
    
End Type

'-- |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| --
'Moved to MClstType

'-- |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd| --

Type DLG_INSI       'DialogBox
    dlgCom As DLG_Comm
    
    outInsiNum As Integer   '|fffd||fffd||fffd|q|fffd||30c||90||fffd|
    flgKyotu_Init As Integer '|fffd||fffd||fffd||290||fffd||fffd||30f||fffd||fffd||fffd||fffd|l (KYOTU_SOUKAN_MAX, KYOTU_ZYU_SOUKAN, KYOTU_1)
    flgKaiten As Integer     '|fffd|s|fffd||fffd||30e||fffd||fffd|(|fffd||fffd|])|fffd||30e|w|fffd||fffd|( ex, KAITEN_BARI_MAX etc)
    bHanpuku_Suitei As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    '|fffd||fffd||fffd|q|fffd||fffd||fffd|_
    bScrDisp As Boolean '|fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd|\|fffd||fffd|
    flgCalc As Integer  '|fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd||30c|v|fffd|Z|fffd||fffd||fffd|@; 1=|fffd||fffd|A|fffd||fffd||fffd||fffd|@, 2=|fffd|P|fffd||fffd||fffd||fffd||fffd||fffd||fffd|@
    bKkScr As Boolean
    bTjScr As Boolean
    
    '|fffd|O|fffd||fffd||fffd|t
    bGrpYes As Boolean 'Ten Graph
    fukaRyo As Double  '|fffd||fffd||fffd|q|fffd||fffd||fffd||5d7||fffd|
    bAbsDecent As Boolean 'TRUE = |fffd||fffd||392|l|fffd||30d|~|fffd||fffd||fffd||155||fffd||fffd||5d1||582||fffd||fffd||fffd|; H14.11.18 LSQ
End Type

Type PARA_INSI
    bScrest As Boolean
    bRotation As Boolean
    rotType As Integer
End Type
'
Type MATRIXF        'old name matrixf
    row As Integer
    col As Integer
    element() As Double 'redim element(1 to n, 1 to n)
End Type
'
Type KIHON
    sum_v() As Double  '[M_MAXIMAL] ; |fffd||fffd||fffd|v : siga(x)
    ave_v() As Double  '[M_MAXIMAL] ; |fffd||fffd||fffd||fffd|
    std_v() As Double  '[M_MAXIMAL] ; |fffd|W|fffd||fffd||fffd||38d||fffd|(n)
    std1_v() As Double '[M_MAXIMAL] ;  |fffd|W|fffd||fffd||fffd||38d||fffd|(n-1)
    hwa_v() As Double  'siga (x*x)
End Type
'
Type EIGENVAL
    factnum As Integer
    e_v() As Double       '[M_MAXIMAL]; /* |fffd||157|L|fffd|l */
    vect() As Double      '[M_MAXIMAL][M_MAXIMAL]; /* |fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd| */
    contrib_v() As Double '[M_MAXIMAL]; /* |fffd||fffd|^|fffd||fffd| */
    accumu_v() As Double  '[M_MAXIMAL]; /* |fffd||750||fffd|   */
    hwa_v() As Double     '[M_MAXIMAL]; /* |fffd||fffd||fffd||fffd||fffd|a   */
End Type
'
Type COMITER
    flgErr As Integer   '/* |fffd||fffd||fffd||290||fffd||fffd||310||fffd||fffd||fffd|l|fffd||fffd||fffd|P|fffd||20f||fffd||a347||fffd||fffd| 1 else 0 : 95.03.27 by LSQ */
    initval_v() As Double '[M_MAXIMAL] ; /* |fffd||fffd||fffd||fffd||fffd|l */
    iterval_v() As Double '[M_MAXIMAL] ; /* |fffd||fffd||fffd||fffd|l */
End Type
'
Type FACTLOAD_MX
    factnum As Integer
    a() As Double  '[M_MAXIMAL][M_MAXIMAL]
End Type
'
Type FACTSCR_MX
    factnum As Integer
    f() As Double  '[M_MAXIMAL][M_MAXIMAL]
End Type

'-- |fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd| --

Type DLG_SSB
    dlgCom As DLG_Comm
    
    ssbnum As Integer       '|fffd||542c||fffd||fffd||fffd||30c||90||fffd|
    flgMatrix As Integer    '|fffd|s|fffd||fffd||30e||fffd||fffd|; 1=|fffd||fffd||fffd||58d|s|fffd||fffd|, 2=|fffd||fffd||fffd|U|fffd|E|fffd||fffd||fffd||fffd||fffd|U|fffd|s|fffd||fffd|
    bScrDisp As Boolean     '|fffd||542c||fffd||fffd||fffd||fffd||fffd|_|fffd||30c|v|fffd|Z(Disp)
    
    flgAna As Integer      '|fffd||fffd||fffd||355||fffd||fffd|@; 1=|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd|, 2=|fffd||542c||fffd||fffd||fffd||fffd||fffd||5d7||fffd|
    
    '|fffd|O|fffd||fffd||fffd|t
    bGrpYes As Boolean 'Ten Graph
    
    '|fffd||5368e||fffd||fffd||fffd||fffd||642||315|\|fffd||fffd| (in DLG_Comm)
    '|fffd|_|fffd|O|fffd||fffd||fffd|t (in DLG_Comm)
End Type


'=== EOF ===
Attribute VB_Name = "commConst"
'===================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||8414|
'
' 2001.12 by LSQ
'===================================================
Option Explicit
Option Private Module

Public Const STNAME_TEMP As String = "Temp"
Public Const STNAME_WORK As String = "Work"

Public Const menuName_Th2 As String = "SSS_|fffd||fffd||fffd||3d7||282|Q"
Public Const menuName_Th3 As String = "SSS_|fffd||fffd||fffd||3d7||282|R"

'--- NAME ---
Public Const THR_CLST As Integer = 1
Public Const THR_INSI As Integer = 2
Public Const THR_SSB As Integer = 3

'|fffd||fffd||fffd||690||fffd||fffd||598|A|fffd||8414|
Public Const MAX_ITEM As Integer = 201
Public Const M_MAXIMAL As Integer = 201     'old = 100, used in INSI
Public Const SYU_MAX_ITEM As Integer = 201  'used in SSB

'--- Double Value CODE ---
Public Const DBL_ERR As Double = 10000000000#    '1E+10
Public Const DBL_BLANK As Double = 100000000000# '1E+11
Public Const DBL_ZERO As Double = 0.0000000001 '1E-10
Public Const DBL_INFTY As Double = 1E+33
Public Const DBL_ONE    As Double = 0.9999999999
Public Const DBL_MONE As Double = -0.999999999

Public Const FUMEI_CODE As Integer = 32000     '> MAX_CATENUM
Public Const FUMEI_STR As String = "-"
Public Const KTMARK_TWO As String = "[**]"
Public Const KTMARK_ONE As String = "[* ]"
Public Const KTMARK_NONE As String = "[  ]"

Public Const KT_BOTH As Integer = 0  '|fffd||fffd||fffd||fffd|
Public Const KT_RIGHT As Integer = 1 '|fffd|E|fffd||fffd|
Public Const KT_LEFT As Integer = 2  '|fffd||fffd||fffd||fffd|
Public Const KT_ONE As Integer = 3  '|fffd||411||fffd|

'
Public Const MAX_SMPNUM As Integer = 15000
Public Const MAX_ITEMNUM As Integer = MAX_ITEM      '200
Public Const MAX_CATENUM As Integer = 250

Public Const MAX_TANSMPNUM As Long = 65000
Public Const MAX_TANITEM As Integer = 200
Public Const MAX_RATITEM As Integer = 200
Public Const MAX_RATNUM As Integer = 3000
Public Const MAX_DKITEM As Integer = 200
Public Const MAX_DKNUM  As Integer = 3000
Public Const MAX_HENITEM As Integer = 200
Public Const MAX_HENNUM  As Integer = 3000
Public Const MAX_SPMITEM As Integer = 200
Public Const MAX_SPMNUM  As Integer = 1500
Public Const MAX_ITTIITEM As Integer = 200
Public Const MAX_ITTINUM  As Integer = 1500
Public Const MAX_SKNSIITEMNUM   As Integer = 200
Public Const MAX_SKNSISMPNUM    As Long = 15000
Public Const MAX_SKCRSITEMNUM As Integer = 100
Public Const MAX_SKCRSSMPNUM As Integer = 100
Public Const MAX_ZUNUM As Long = 15000
Public Const MAX_ZUITEM As Integer = 100
Public Const MAX_KDLITEM As Integer = 200
Public Const MAX_KDLSMPNUM As Long = 15000

'Cluster Analysis
'Moved to MClstPublic

'Insi Analysis
Public Const INSI_INIT_MAXSKN As Integer = 1    'COM_INIT_COR
Public Const INSI_INIT_JYUSKN As Integer = 2    'COM_INIT_DCR
Public Const INSI_INIT_1 As Integer = 3         'COM_INIT_ALL

Public Const INSI_KAIDEN_BMAX As Integer = 1
Public Const INSI_KAIDEN_BCMAX As Integer = 2
Public Const INSI_KAIDEN_CMAX As Integer = 3
Public Const INSI_KAIDEN_BMAX_a As Integer = 4
Public Const INSI_KAIDEN_BCMAX_a As Integer = 5
Public Const INSI_KAIDEN_CMAX_a As Integer = 6
Public Const INSI_KAIDEN_NO As Integer = 0

Public Const ORTHOMTHD As Integer = 1
Public Const OBLIQMTHD As Integer = 0

Public Const ITER_ACCURACY As Double = 0.000001       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|x
Public Const ITER_MAXIMAL  As Integer = 50             '|fffd||fffd||fffd||fffd||fffd||151||fffd||fffd|

Public Const PHI As Double = 3.14159265
Public Const ROTEPS As Double = 0.00001

Public Const MAX_CATE_NUM As Integer = 250

'Ssb Analysis
Public Const SSB_SKN As Integer = 1       '|fffd||fffd||fffd||58d|s|fffd||fffd|
Public Const SSB_COVAR As Integer = 2     '|fffd||fffd||fffd|U|fffd|E|fffd||fffd||fffd||fffd||fffd|U|fffd|s|fffd||fffd|
'
Public Const SSB_EIG_VECT As Integer = 1     '|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd|
Public Const SSB_LOAD As Integer = 2     '|fffd||542c||fffd||fffd||fffd||fffd||fffd||5d7||fffd|

'=== EOF ===
Attribute VB_Name = "commMdl"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2001.12 by LSQ
'=================================================
Option Private Module
Option Explicit
'
'|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd|H|fffd||fffd||fffd|_|fffd||255||3cd|X
'
Sub changeToThrDir()
    'no used in MAC Version
End Sub
'
Function getTempSheet(Optional no As Integer = 0) As Worksheet
    If no <= 0 Then
        Set getTempSheet = ThisWorkbook.Worksheets(STNAME_TEMP)
    Else
        Set getTempSheet = ThisWorkbook.Worksheets(STNAME_TEMP & no)
    End If
    
    'getTempSheet.Cells.Delete Shift:=xlUp
    getTempSheet.Cells.Clear

End Function
'
'|fffd||fffd||fffd||fffd||fffd||42a42||fffd|u|fffd|b|fffd|N|fffd|A|fffd|V|fffd|[|fffd|g|fffd||183|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd||15a97||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|:
'   wkStr = "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
'|fffd|o|fffd||fffd|:
'   bkName = |fffd|u|fffd|b|fffd|N|fffd||fffd|; |fffd||fffd|, "toukeidt.xls" or ActiveWorkbook.Name (|fffd|K|fffd||fffd||fffd||fffd||fffd||fffd|)
'   stName = |fffd|V|fffd|[|fffd|g|fffd||fffd|; |fffd||fffd|, "temp"
'   ceName = |fffd|Z|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd| (A1|fffd||30c|`|fffd||fffd|); |fffd||fffd|, "$A$1:$B$2"
'
'|fffd||fffd||fffd||30a||590||fffd||fffd||34a|e|fffd||fffd||fffd||3d7||282||182||fffd||fffd||fffd||fffd||fffd|
'H12.3.16 LSQ
'
Function getRangeInfo(ByVal rgeStr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkStr As String, posBk As Long, posSt As Long, pos As Long
    
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkStr = rgeStr
    
    bkName = ActiveWorkbook.Name    'default
    pos = InStr(wkStr, "]")
    If pos > 2 Then bkName = Mid(wkStr, 2, pos - 2)
    
    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkStr = Mid(wkStr, pos + 1)
    
    stName = ActiveSheet.Name   'default
    pos = InStr(wkStr, "!")
    If pos > 1 Then stName = Mid(wkStr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkStr, pos + 1))
    
    If ceName = Empty Or ceName = vbNullString Then
        MsgBox MSG_RangeErr
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True

End Function
'
'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
    Dim stes As Object, st As Object
    Set stes = Workbooks
    If stes.Count = 0 Then isBookExist = False: Exit Function
    
    For Each st In stes
        If UCase(Trim(bkName)) = UCase(Trim(st.Name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    isBookExist = False
    Exit Function
End Function
'
Function isDataType(ByVal thisCell As Range) As Boolean
    Dim tname As String
    
    tname = UCase(TypeName(thisCell.Value))
    If tname = "DOUBLE" Or tname = "INTEGER" Then
        isDataType = True
    Else
        isDataType = False
    End If
End Function
'
Function isDataType_A(ByVal theVal As Variant) As Boolean
    Dim tname As String
    
    tname = UCase(TypeName(theVal))
    If tname = "DOUBLE" Or tname = "INTEGER" Then
        isDataType_A = True
    Else
        isDataType_A = False
    End If
End Function
'
'H14.11.15 LSQ add
Function isSelFlag(ByVal theVal As Variant) As Boolean
    If val(theVal) <> 0 Then
        isSelFlag = True
    Else
        isSelFlag = False
    End If
    
End Function
'
'Sub errKind(cellValue As Variant)
'    If IsError(cellValue) Then
'        Select Case cellValue
'            Case CVErr(xlErrDiv0)
'                MsgBox "#DIV/0! |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrNA)
'                MsgBox "#N/A |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrName)
'                MsgBox "#NAME? |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrNull)
'                MsgBox "#NULL! |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrNum)
'                MsgBox "#NUM! |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrRef)
'                MsgBox "#REF! |fffd|G|fffd||fffd||fffd|["
'            Case CVErr(xlErrValue)
'                MsgBox "#VALUE! |fffd|G|fffd||fffd||fffd|["
'            Case Else
'                MsgBox "|fffd||fffd||fffd||fffd||343|Z|fffd||fffd||fffd||303|G|fffd||fffd||fffd|[|fffd||142||342||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
'        End Select
'    End If
'End Sub
'

'
'bTitleExt : if TRUE  -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(if bTitle=TRUE) else |fffd||202||fffd||fffd|B
'            if FALSE -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|K|fffd||fffd||fffd||202||fffd||fffd|B
'
'H14.1.7 LSQ
Private Function getDataRange_Comm(ByVal rgeObj As Range, _
    ByVal bCol As Boolean, ByVal bTitle As Boolean, ByVal bXSel As Boolean, _
    Optional ByVal bTitleExt As Boolean = False) As Range
    
    Dim ct
    Dim bgnCel As Range, xSelRge As Range, tmpRge As Range
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    Set bgnCel = rgeObj.Offset(0, 0).Range("A1")
    Set svStObj = ActiveSheet
    
    If bCol Then
        If bTitle Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bTitleExt Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bXSel Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
    Else
        If bTitle Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bTitleExt Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bXSel Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
    End If
    
    rgeObj.Worksheet.Activate
    
    Set getDataRange_Comm = Nothing 'Init
    If rwNum > 0 And clNum > 0 Then
        If bXSel = False Then
            Set getDataRange_Comm = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
        Else
            Set xSelRge = IIf(bCol, bgnCel.Offset(-1, 0).Range(Cells(1, 1), Cells(1, clNum)), _
                                    bgnCel.Offset(0, -1).Range(Cells(1, 1), Cells(rwNum, 1)))
                                    
            Set tmpRge = IIf(bCol, bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1)), _
                                   bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)))
                                   
            For ct = 1 To IIf(bCol, clNum, rwNum)
                If isSelFlag(xSelRge(ct)) Then
                    If getDataRange_Comm Is Nothing Then
                        Set getDataRange_Comm = tmpRge
                    Else
                        Set getDataRange_Comm = Union(getDataRange_Comm, tmpRge)
                    End If
                End If
                
                'next
                Set tmpRge = IIf(bCol, tmpRge.Offset(0, 1), tmpRge.Offset(1, 0))
            Next ct
        End If
    End If
    
    svStObj.Activate

End Function
'
'H12.11.14 LSQ
Function getDataRange(rgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bXSel As Boolean) As Range
    Set getDataRange = getDataRange_Comm(rgeObj, bOptCol, bTitle, bXSel)
End Function
'
'H12.11.14 LSQ
Function getDataRange_SmpTitle(rgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bSmpTitle As Boolean, bXSel As Boolean) As Range
    Set getDataRange_SmpTitle = getDataRange_Comm(rgeObj, bOptCol, bTitle, bXSel, bSmpTitle)
End Function
'
'H12.11.14 LSQ
'
Sub getSmpNum_ItemNum_FromRge(rgeObj As Range, bCol As Boolean, bTitle As Boolean, bTitleExt As Boolean, _
    ByRef SmpNum As Variant, ByRef itemnum As Variant)
    Dim rwNum As Long, clNum As Integer

    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    If bCol Then   '|fffd||fffd||fffd||fffd||fffd|
        itemnum = clNum
        SmpNum = rwNum
    Else
        itemnum = rwNum
        SmpNum = clNum
    End If

    If bTitle Then
        SmpNum = SmpNum - 1
        '
        If bTitleExt Then
            itemnum = itemnum - 1
        End If
    End If
    
End Sub

'
'H12.11.2 LSQ
'
Function getTitleName(rgeObj As Range, bOptCol As Boolean, bTitle As Boolean, ct As Integer) As String
    Dim bgnCel As Range
    
    If ct <= 0 Then ct = 1
    
    Set bgnCel = rgeObj.Offset(0, 0).Range("A1")
    If bTitle Then
        If bOptCol Then
            getTitleName = bgnCel.Offset(0, ct - 1).Text
        Else
            getTitleName = bgnCel.Offset(ct - 1, 0).Text
        End If
    Else
        getTitleName = "Item" & ct
    End If
End Function
'
'H14.1.11 LSQ
'
Function getTitleRange(rgeObj As Range, bOptCol As Boolean) As Range
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    Set svStObj = ActiveSheet
    
    rgeObj.Worksheet.Activate
    If bOptCol Then
        Set getTitleRange = rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
    Else
        Set getTitleRange = rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
    End If
    
    svStObj.Activate
End Function
'
'H14.1.17 LSQ
Function getXSelRange(ByVal rgeObj As Range, ByVal bOptCol As Boolean, ByVal bTitle As Boolean) As Range
    Dim tmpRge As Range
    If bOptCol Then
        Set tmpRge = IIf(bTitle, rgeObj.Offset(1, 0), rgeObj)
    Else
        Set tmpRge = IIf(bTitle, rgeObj.Offset(0, 1), rgeObj)
    End If
    
    Set getXSelRange = getTitleRange(tmpRge, bOptCol)
End Function

'
'|fffd||fffd||fffd||fffd||fffd|/|fffd|s|fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^; |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||202||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'
Function moveData(rgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
    Dim ct As Integer, SmpNum As Long, itemnum As Integer
    Dim toBgn As Range, tmpRge As Range, c As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    Set toBgn = outBgn
    
    'Title set
    Set tmpRge = getTitleRange(rgeObj, bCol)
    
    If bTitle Then
        For Each c In tmpRge
            toBgn = c
            Set toBgn = toBgn.Offset(0, 1)
        Next c
    Else
        If tmpRge.Count = 1 Then
            toBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        Else
            For ct = 1 To tmpRge.Count
                toBgn = basItemName & ct
                Set toBgn = toBgn.Offset(0, 1)
            Next ct
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange(rgeObj, bCol, bTitle, bXSel)
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    SmpNum = tmpRge.Rows.Count
    itemnum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    Set moveData = outBgn.Range(Cells(1, 1), Cells(SmpNum + 1, itemnum))
    
    svStObj.Activate

End Function
'
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||80a9||fffd||8d||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'flgNoData -- no data handle flag : 0=no handle, 1=clear the contents (not delete the sample)
'bAvgStd   -- avg, std calculation flag
'
'return : the new range
'         noDataNum -- no data sample number
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.1 by LSQ
'H14.11.15 LSQ mdf
'
Function moveData_A(rgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bSmpTitle As Boolean, bXSel As Boolean, outBgn As Range, ByRef noDataNum As Long, _
    Optional flgNoData As Integer = 0, Optional bAvgStd As Boolean = False) As Range
    Dim ct As Integer, dataFlg As Integer
    Dim SmpNum As Long, itemnum As Integer, smpNo As Long, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim smpNmRge As Range, itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    'set
    Set itemNmRge = getTitleRange(rgeObj, bCol)
    Set smpNmRge = getTitleRange(rgeObj, Not bCol)
    Set xSelRge = getXSelRange(rgeObj, bCol, bTitle)
    
    If bTitle Then
        dataFlg = IIf(bSmpTitle, 1, 2)
    Else
        dataFlg = IIf(bSmpTitle, 3, 4)
    End If
    
    If (dataFlg = 1 Or dataFlg = 2) Then
        Set toBgn = outBgn.Offset(0, 1)
        For ct = IIf(dataFlg = 1, 2, 1) To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
        '
        Set toBgn = outBgn.Offset(1, 0)
        smpNo = 1
        For ct = IIf(bXSel, 3, 2) To smpNmRge.Count
            toBgn = IIf(dataFlg = 1, smpNmRge(ct), smpNo)
            'next
            Set toBgn = toBgn.Offset(1, 0)
            smpNo = smpNo + 1
        Next ct
    End If
    '
    If (dataFlg = 3 Or dataFlg = 4) Then
        Set toBgn = outBgn.Offset(0, 1)
        itemNo = 1
        For ct = IIf(dataFlg = 3, 2, 1) To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        Set toBgn = outBgn.Offset(1, 0)
        smpNo = 1
        For ct = IIf(bXSel, 2, 1) To smpNmRge.Count
            toBgn = IIf(dataFlg = 3, smpNmRge(ct), smpNo)
            'next
            Set toBgn = toBgn.Offset(1, 0)
            smpNo = smpNo + 1
        Next ct
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 1)
    
    Set tmpRge = getDataRange_SmpTitle(rgeObj, bCol, bTitle, bSmpTitle, bXSel)
    If tmpRge Is Nothing Then
        Set moveData_A = Nothing
        Exit Function
    End If
    '
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    SmpNum = tmpRge.Rows.Count
    itemnum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'no data handle
    Set tmpRge = outBgn.Offset(1, 1).Range(Cells(1, 1), Cells(1, itemnum))
    
    noDataNum = 0
    For ct = 1 To SmpNum
        If Application.Count(tmpRge) <> itemnum Then
            noDataNum = noDataNum + 1
        
            If flgNoData = 1 Then
                tmpRge = ""
            End If
        End If
        '
        Set tmpRge = tmpRge.Offset(1, 0)
    Next ct
    
    'avg, std calculation
    If bAvgStd Then
        Set tmpRge = outBgn.Offset(1, 1).Range(Cells(1, 1), Cells(SmpNum, 1))
        Set toBgn = tmpRge.Offset(SmpNum, 0).Range("A1")
        
        For ct = 1 To itemnum
            toBgn = Application.Average(tmpRge)
            toBgn.Offset(1, 0) = Application.StDevP(tmpRge) 'n
            '
            Set tmpRge = tmpRge.Offset(0, 1)
            Set toBgn = toBgn.Offset(0, 1)
        Next ct
    End If
    
    'return
    Set moveData_A = outBgn.Range(Cells(1, 1), Cells(SmpNum + 1, itemnum + 1))
    
    svStObj.Activate

End Function
'
'H12.12.4 -- H13.2.27 LSQ
Function findFinv(ByVal prob As Double, ktFlg As Integer, f1 As Double, f2 As Double) As Double
    If prob < 0 Or prob > 1 Or f1 <= DBL_ZERO Or f2 <= DBL_ZERO Then
        findFinv = DBL_ERR
        Exit Function
    End If
    '
    If ktFlg = KT_BOTH Then prob = prob / 2
    
    If ktFlg = KT_LEFT Then prob = 1 - prob
    
    findFinv = Application.FInv(prob, f1, f2)  '|fffd|E|fffd||fffd||fffd||fffd||fffd||fffd|

End Function
'
'prob    : probility (0.01, 0.05 etc)
'ktFlg   : see KT_*
'freeD   : freedom degree
'H12.11.8 LSQ
'
Function findTinv(ByVal prob As Double, ktFlg As Integer, freeD As Double) As Double
    If prob < 0 Or prob > 1 Or freeD <= DBL_ZERO Then
        findTinv = DBL_ERR
        Exit Function
    End If
    
    If ktFlg <> KT_BOTH Then prob = prob * 2    'Tinv : |fffd||fffd||fffd||fffd||fffd||590||fffd|
    findTinv = Application.TInv(prob, freeD)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If ktFlg = KT_LEFT Then
        findTinv = -findTinv
    End If

End Function
'
Function Adjust_sknVAL(ByVal Skn As Double) As Double
    If Abs(Skn) + DBL_ZERO > 1 Then '=1
        If Skn > 0 Then Skn = 0.9999999999  '10 digit
        If Skn < 0 Then Skn = -0.9999999999 '10 digit
    ElseIf Abs(Skn) < DBL_ZERO Then  '=0
        Skn = DBL_ZERO
    End If
    
    Adjust_sknVAL = Skn
End Function
'
'prob    : probility (0.01, 0.05 etc)
'ktFlg   : see KT_*
'H13.2.8 LSQ
'
Function findZinv(ByVal prob As Double, ktFlg As Integer, Optional ByVal bCut As Boolean = False) As Double
    If prob <= 0 Then findZinv = -DBL_INFTY:   Exit Function
    If prob >= 1 Then findZinv = DBL_INFTY: Exit Function
    
    If ktFlg = KT_BOTH Then prob = prob * 0.5   'Normsinv : |fffd|P|fffd||fffd||fffd||590||fffd|
    findZinv = Abs(Application.NormSInv(prob))
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If ktFlg = KT_LEFT Then
        findZinv = -findZinv
    End If

    If bCut Then    '2|fffd||fffd|
        findZinv = Application.Round(findZinv, 2)
    End If

End Function
'
'|fffd|E|fffd||fffd||fffd|m|fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||7c2||fffd|
'
'|fffd||fffd||fffd|R|fffd|x|fffd||fffd||fffd||50ab||fffd||fffd||fffd||a347||fffd||241|A|fffd||fffd| Application.ChiInv(0.025,1999)|fffd|A|fffd|v|fffd|Z|fffd||142||fffd||fffd||202||fffd||fffd||fffd||fffd||7c1|A|fffd||fffd||fffd||30a||590||fffd||fffd||fffd||fffd||c42c||fffd||fffd||fffd||fffd|B
'
'return DBL_ERR error else OK
'
'H13.3.14 LSQ
'
Function findChiInv(ByVal prob As Double, ByVal free As Integer) As Double
    Dim tmpv As Variant, cnt As Integer
    Dim x As Double, xa As Double, xb As Double, dx As Double
    Dim fx As Double, fxPrev As Double
    
    If prob <= 0 Or prob >= 1 Then findChiInv = DBL_ERR: Exit Function
    If free < 1 Then findChiInv = DBL_ERR: Exit Function
    
    On Error Resume Next
    
    tmpv = Application.ChiInv(prob, free)
    If IsError(tmpv) = False Then
        findChiInv = tmpv
        Exit Function
    End If
    
    x = free
    dx = x / 2
    xa = 0
    xb = 10000000000# '1E+10; large
    fxPrev = 0
    cnt = 0
    
    Do
        tmpv = Application.ChiDist(x, free)
        If IsError(tmpv) Then
            findChiInv = DBL_ERR
            Exit Function
        End If
        
        fx = tmpv - prob
        
        If Abs(xb - xa) < 0.000001 Or Abs(fx) < 0.000001 Then  '1E-6, 1E-6
            findChiInv = x
            Exit Function
        End If
        '
        If fx > 0 Then
            xa = x
            If fxPrev < 0 Then dx = dx / 2
            If x + dx >= xb Then dx = dx / 2
            x = x + dx
        Else
            xb = x
            If fxPrev > 0 Then dx = dx / 2
            If x - dx <= xa Then dx = dx / 2
            x = x - dx
        End If
        fxPrev = fx
        '
        cnt = cnt + 1
    Loop While (cnt < 3000)
    
    findChiInv = DBL_ERR
    
End Function
'
'H13.2.26 mdf LSQ
Function probZ(Z As Double, ktFlg As Integer) As Double
    Dim p As Double
    'probZ = (1 - Application.NormSDist(Abs(Z))) * IIf(ktFlg = KT_BOTH, 2, 1)
    
    If ktFlg = KT_BOTH Then probZ = (1 - Application.NormSDist(Abs(Z))) ' * 2
    If ktFlg = KT_LEFT Then probZ = Application.NormSDist(Z)
    If ktFlg = KT_RIGHT Then probZ = 1 - Application.NormSDist(Z)
    
End Function
'
'H12.12.04 LSQ
'H13.03.13 mdf LSQ
Function probT(T As Double, freeD As Integer, ktFlg As Integer) As Double
    Select Case ktFlg
        Case KT_BOTH:    probT = Application.TDist(Abs(T), freeD, 2)
        Case KT_LEFT:    probT = Application.TDist(Abs(T), freeD, 1): If T > 0 Then probT = 1 - probT
        Case KT_RIGHT:   probT = Application.TDist(Abs(T), freeD, 1): If T < 0 Then probT = 1 - probT
    End Select
End Function
'
'H12.12.5 -- H13.3.6 LSQ
Function probF(Fval As Double, f1 As Double, f2 As Double, ktFlg As Integer) As Double
    Dim tmpd As Double
    tmpd = Application.FDist(Fval, f1, f2)
    
    Select Case ktFlg
        Case KT_LEFT:   probF = 1 - tmpd
        Case KT_RIGHT:  probF = tmpd
        Case KT_BOTH:   probF = IIf(tmpd < 1 - tmpd, tmpd, 1 - tmpd)
    End Select
End Function
'
'H12.11.8 LSQ
Function judgeMark(tkryo As Double, T1 As Double, t5 As Double, ktFlg As Integer) As String
    Dim markStr As String
    
    markStr = KTMARK_NONE
    If ktFlg = KT_LEFT Then
        If tkryo <= T1 Then        'old : <= -t1
            markStr = KTMARK_TWO
        ElseIf tkryo <= t5 Then    'old : <= -t5
            markStr = KTMARK_ONE
        End If
    Else
        If ktFlg = KT_BOTH Then tkryo = Abs(tkryo)
        
        If tkryo >= T1 Then
            markStr = KTMARK_TWO
        ElseIf tkryo >= t5 Then
            markStr = KTMARK_ONE
        End If
    End If
    
    judgeMark = markStr
End Function
'
'H13.1.31 LSQ
Function judgeMark_byProb(ByVal prob As Double) As String
    judgeMark_byProb = IIf(prob < 0.01, KTMARK_TWO, _
                       IIf(prob < 0.05, KTMARK_ONE, KTMARK_NONE))
End Function
'
'H12.12.7 LSQ (copied from TK2!commMdl)
'
Sub SortByCol(ByVal zenRge As Range, bDsnt As Boolean)
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    Set bgnCel = zenRge.Offset(0, 0).Range("A2")
    orderVal = IIf(bDsnt, xlDescending, xlAscending)
    
    zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod _
        :=xlPinYin
End Sub
'
'H13.2.1 LSQ (from TK3!commMdl)
'
Sub SortByCol_data(ByVal dataRge As Range, ByVal orderCol As Integer, ByVal bDsnt As Boolean)
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    If orderCol <= 0 Then Exit Sub
    
    Set bgnCel = dataRge(1, orderCol)
    orderVal = IIf(bDsnt, xlDescending, xlAscending)
    
    dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod _
        :=xlPinYin
End Sub
'
'|fffd|Q|fffd||fffd||242||fffd||fffd|\|fffd|[|fffd|g
'
'H13.2.8 LSQ
Sub SortBy2Col_data(ByVal dataRge As Range, ByVal colA As Integer, ByVal bDsntA As Boolean, _
    ByVal colB As Integer, ByVal bDsntB As Boolean)
    Dim celA As Range, celB As Range
    Dim orderValA As Integer, orderValB As Integer
    
    If colA <= 0 Or colB <= 0 Then Exit Sub
    
    Set celA = dataRge(1, colA)
    Set celB = dataRge(1, colB)
    
    orderValA = IIf(bDsntA, xlDescending, xlAscending)
    orderValB = IIf(bDsntB, xlDescending, xlAscending)
    
    dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
        Header:=xlNo, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod _
        :=xlPinYin
End Sub
'
'H13.3.29 LSQ : for Mac2001
'
Function Power(a As Variant, n As Integer) As Double
    Dim i As Integer
    
    Power = 1#
    For i = 1 To n
        Power = Power * a
    Next i
    
End Function

Function SpaceAri(ByVal x As Range) As Boolean
    Dim i As Integer, j As Integer
    Dim SmpNum As Integer, itemnum As Integer
    
    SmpNum = x.Rows.Count
    itemnum = x.Columns.Count
    SpaceAri = False
    For i = 1 To SmpNum
        For j = 1 To itemnum
            If IsEmpty(x.Offset(0, 0).Cells(i, j)) Then
                SpaceAri = True
                Exit Function
            End If
        Next j
    Next i
End Function

Function TotalNumericData(ByVal x As Range) As Long
    Dim n As Long
    n = Application.Count(x)
    TotalNumericData = n
End Function
'
'H14.11.12 LSQ add
Function HasNoData(ByVal x As Range) As Boolean
    HasNoData = False
    If x Is Nothing Then Exit Function
    
    If Application.Count(x) <> x.Rows.Count * x.Columns.Count Then
        HasNoData = True
    End If
    
End Function
'
'H14.7.30 LSQ
'H14.11.27 LSQ
Function HasNoDataChkBySmp() As Boolean
    HasNoDataChkBySmp = (Gdata.smpNumNoData > 0)
End Function
'
Function CheckEmptyData(x As Range) As Long
    Dim nData As Long, tmpCel As Range, ci As Long, ct As Long
    Dim SmpNum As Long, itemnum As Integer
    
    'x.Worksheet.Activate
    'x.Select
    itemnum = x.Columns.Count
    SmpNum = x.Rows.Count
    
    For ci = 1 To itemnum
        nData = 0
        For ct = 2 To SmpNum
            Set tmpCel = x(ct, ci)
            If Not IsEmpty(tmpCel) Then
                nData = nData + 1
             End If
        Next ct
        If nData < 3 Then
            CheckEmptyData = nData
            Exit Function
        End If
    Next ci
    '
    CheckEmptyData = nData
End Function

'=== EOF ===
Attribute VB_Name = "commMdlA"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2001.12 by LSQ
'=================================================
Option Private Module
Option Explicit
'
'|fffd|o|fffd||350||fffd|
'
Function getOutBgn(ByVal dataRge As Range, ByVal orgOutBgn As Range, _
    Optional ByVal bNewSht As Boolean = False) As Range
    
    Dim wkBkObj As Workbook, wkStObj As Worksheet
    
    If bNewSht Then
        Set wkBkObj = dataRge.Worksheet.Parent
        Set wkStObj = wkBkObj.Worksheets.Add
        Set getOutBgn = wkStObj.Range("B2")
    Else
        Set getOutBgn = orgOutBgn
    End If

End Function
'
'set sample name, ysk sample name
'
Sub setSmpName(ByVal fromRge As Range, ByVal toBgn As Range)
    Dim c As Range
    
    If fromRge Is Nothing Then Exit Sub
    
    For Each c In fromRge
        toBgn = c
        'next
        Set toBgn = toBgn.Offset(1, 0)
    Next c

End Sub
'
Sub setSmpNo(ByVal num As Long, ByVal toBgn As Range)
    Dim ct
    
    For ct = 1 To num
        toBgn = ct
        'next
        Set toBgn = toBgn.Offset(1, 0)
    Next ct

End Sub
'
'return : the data range
'H14.1.16 LSQ
'
Function setDataRge(ByVal fromRge As Range, ByVal toBgn As Range, ByVal bCol As Boolean, ByVal dataItemNum As Integer) As Range
    Dim SmpNum, itemnum
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    fromRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        SmpNum = fromRge.Rows.Count
        itemnum = fromRge.Columns.Count
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
        SmpNum = fromRge.Columns.Count
        itemnum = fromRge.Rows.Count
    End If
    Application.CutCopyMode = False
    
    'return
    Set setDataRge = toBgn.Range(Cells(1, 1), Cells(SmpNum, dataItemNum)) 'itemNum
    
    svStObj.Activate

End Function
'
Sub dataCopy(toArray As Variant, fromArray As Variant, ByVal rownum As Variant, ByVal colNum As Variant)
    Dim i, j
    
    For i = 1 To rownum
        For j = 1 To colNum
            toArray(i, j) = fromArray(i, j)
        Next j
    Next i
End Sub

'
'H14.2.11 LSQ
'
Function notUsed_dataCopy(ByVal toBgn As Range, ByVal fromBgn As Range, ByVal rownum As Variant, ByVal colNum As Variant, _
    Optional ByVal bTrans As Boolean = False) As Range
    
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    fromBgn.Worksheet.Activate
    fromBgn.Range(Cells(1, 1), Cells(rownum, colNum)).Copy
    
    toBgn.Worksheet.Activate
    toBgn.Select
    If (bTrans = False) Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        Set notUsed_dataCopy = toBgn.Range(Cells(1, 1), Cells(rownum, colNum))
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
        Set notUsed_dataCopy = toBgn.Range(Cells(1, 1), Cells(colNum, rownum))
    End If
    Application.CutCopyMode = False
    
    svStObj.Activate
    
End Function
'
Sub setValue_Array(toArray As Variant, ByVal rownum As Variant, ByVal colNum As Variant, ByVal val As Variant)
    Dim i, j
    
    For i = 1 To rownum
        For j = 1 To colNum
            toArray(i, j) = val
        Next j
    Next i
End Sub
'
Sub notUsed_setValue_Rge(ByVal toBgn As Range, ByVal rownum As Variant, ByVal colNum As Variant, ByVal val As Variant)
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    toBgn.Worksheet.Activate
    toBgn.Range(Cells(1, 1), Cells(rownum, colNum)) = val
    
    svStObj.Activate
    
End Sub

'=== EOF ===
Attribute VB_Name = "commMdlB"
'=======================================================
' SSS_THR : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' H13.11 by LSQ
'=======================================================
Option Private Module
Option Explicit

'
'var += diff
'
Sub plusEqual(ByRef var As Variant, ByVal diff As Variant)
    If IsNumeric(var) And IsNumeric(diff) Then
        var = var + diff
    End If
End Sub
'
Sub plusEqualStr(ByRef orgstr As String, ByVal addstr As String)
    orgstr = orgstr & addstr
End Sub
'
'|fffd|Q|fffd||fffd||fffd|z|fffd||fffd||302|P|fffd||fffd||fffd|z|fffd||fffd||593|]|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|W (|fffd||fffd||516||682||30c||fffd||fffd|f)
'no : |fffd|z|fffd||fffd||317||fffd||50d||fffd|; 1 based;
'num : |fffd|z|fffd||fffd||311||50ab||fffd||fffd|;
'(no <= num)
'return 1 based;
'
Function indexInArray(ByVal no As Integer, ByVal num As Integer) As Long    'Feb 2003, PYJ
    Dim i As Integer, id As Long                                            'Feb 2003,PYJ

    id = 0
    
    For i = 1 To no - 1
        id = id + num - i
    Next i
    
    indexInArray = (id + 1) 'return 1 based id
    
End Function

Function numInArray(ByVal no As Integer, ByVal num As Integer) As Integer
    numInArray = num - no
End Function
'
Function findBekiti(ByVal base As Double, ByVal pw As Double) As Double
    Dim tmpBase As Double
    
    tmpBase = Abs(base)
    If (tmpBase < DBL_ZERO) Then findBekiti = 0: Exit Function

    findBekiti = IIf(base > 0, 1, -1) * Application.Power(tmpBase, pw)
    
End Function
'
'i0 <= j0 : 1 based
'j0 <= n
'return 1 based
'
'H14.3.14 LSQ
'
Function idfromIJ(ByVal i0 As Integer, ByVal j0 As Integer, ByVal n As Integer) As Integer
    Dim i, j, tmpi
    
    If i0 > j0 Then
        tmpi = i0: i0 = j0: j0 = tmpi
    End If
    
    idfromIJ = 0 'ERROR
    For i = 1 To n
        For j = i To n
            idfromIJ = idfromIJ + 1
            '
            If (i = i0 And j = j0) Then Exit Function
        Next j
    Next i
End Function
'
'1 based
'
'return : reti <= retj
'
Sub ijfromID(ByVal id As Integer, ByVal n As Integer, ByRef reti As Integer, ByRef retj As Integer)
    Dim i, j, ct
    
    ct = 0
    For i = 1 To n
        For j = i To n
            ct = ct + 1
            '
            If (ct = id) Then
                reti = i
                retj = j
                Exit Sub
            End If
        Next j
    Next i

End Sub
'
'find |fffd||50ab||fffd||fffd||fffd||fffd| Index Array
'
Sub largeJunId(pIdx() As Integer, pVal() As Double, ByVal n As Integer)
    Call find_IndexArray(pIdx, pVal, n, True)
End Sub
'
'find |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Index Array
'
Sub smallJunId(pIdx() As Integer, pVal() As Double, ByVal n As Integer)
    Call find_IndexArray(pIdx, pVal, n, False)
End Sub
'
Private Sub find_IndexArray(pIdx() As Integer, pVal() As Double, ByVal n As Integer, ByVal bLarge As Boolean)
    Dim i As Integer, id As Integer
    Dim valAry() As Double
    Dim maxORmin As Double
    
    ReDim valAry(1 To n)
    For i = 1 To n
        valAry(i) = pVal(i)
    Next i
    
    For i = 1 To n
        maxORmin = IIf(bLarge, Application.max(valAry), Application.min(valAry))
        id = Application.Match(maxORmin, valAry, 0)
        pIdx(i) = id
        '
        valAry(id) = IIf(bLarge, -1E+30, 1E+30)
    Next i
End Sub
'
'
'Because lenB() in Excel had bug
'
'H13.2.18 copy from graphvba!CommCalc by LSQ
'
Function lenB_Tko(ByVal mojiStr As String) As Integer
    Dim ct As Integer, ascCode As Integer, lenMj As Integer
    
    lenMj = Len(mojiStr): lenB_Tko = lenMj
    
    For ct = 1 To lenMj
        ascCode = Asc(Mid(mojiStr, ct, 1))
        If ascCode < 0 Or ascCode > 255 Then    ''|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd|
            lenB_Tko = lenB_Tko + 1
        End If
    Next ct
    
End Function
'
'return 0 ERROR else OK
'H14.8.1 LSQ
Function getAryId_byVal(ByVal theVal As Variant, theValAry As Variant) As Integer
    Dim id
    
    id = Application.Match(theVal, theValAry, 0)
    
    If isDataType_A(id) Then
        getAryId_byVal = id
    Else
        getAryId_byVal = 0   'ERROR
    End If
    
End Function

'=== EOF ===
Attribute VB_Name = "commMdlC"
'=======================================================
' SSS_THR : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' H14.2 by LSQ
'=======================================================
Option Private Module
Option Explicit

'
'Jacobi |fffd||fffd||fffd|@|fffd||242||fffd||fffd|A|fffd||157|L|fffd|l|fffd|E|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd||fffd||30c|v|fffd|Z|fffd|G
'   input  : dataArray (|fffd||38f||301|A|fffd||fffd||38f||302||142||fffd|OK) data only
'            num = size of dataArray(i, j)
'   output : e1, e2, ... --> eigBuf(i)
'            vect1, vect2, ... (vect = a column) --> vecArray(i,j)
'(refers to |fffd||fffd||fffd||289||fffd||fffd|S|fffd||fffd|, |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|)
'
'02.2.14 LSQ
'
Function findEigvalEigvect_Jacobi(dataArray As Variant, ByVal num As Integer, _
    eigBuf As Variant, vecArray As Variant) As Boolean
    Dim i, j, k
    Dim Bmx() As Double 'work area
    Dim AMX As Double, tmpd As Double
    Dim RR As Double, RJ As Double, RK As Double, RP As Double, RM As Double
    Dim w, C2, S2, CC, SC, VJ, VK
    Dim nj As Integer, nk As Integer
    Dim loopNum As Integer
    '
    If num <= 0 Then findEigvalEigvect_Jacobi = False: Exit Function
    
    ReDim Bmx(1 To num, 1 To num)
    
    'Data Copy
    Call dataCopy(Bmx, dataArray, num, num)
    
    '|fffd|v|fffd|Z
    Call setValue_Array(vecArray, num, num, 0)
    For i = 1 To num: vecArray(i, i) = 1: Next i
    
    loopNum = 0
    Do While (loopNum < 10000)      'infinite loop avoided
        loopNum = loopNum + 1
        AMX = -1E+35
        For i = 2 To num
            For j = 1 To (i - 1)
                tmpd = Abs(Bmx(i, j))
                If (tmpd > AMX) Then
                    AMX = tmpd
                    nj = i
                    nk = j
                End If
            Next j
        Next i
            
        If (AMX >= DBL_ZERO) Then  '1.E-10 (0)
            RR = Bmx(nj, nk)
            RJ = Bmx(nj, nj)
            RK = Bmx(nk, nk)
            RP = (RJ + RK) / 2:   RM = (RJ - RK) / 2
            w = Sqr(RR * RR + RM * RM)
            If (w <= DBL_ZERO) Then   '= 0
                findEigvalEigvect_Jacobi = False
                Exit Function
            End If

            C2 = Abs(RM) / w
            If (Abs(RM) > DBL_ZERO) Then  '!=0
                S2 = -(RM / Abs(RM)) * RR / w
            Else
                S2 = -1
            End If
            
            CC = Sqr((1 + C2) / 2): SC = S2 / (2 * CC)

            For i = 1 To num
                RJ = Bmx(i, nj): RK = Bmx(i, nk)
                Bmx(i, nj) = RJ * CC - RK * SC
                Bmx(nj, i) = Bmx(i, nj)
                Bmx(i, nk) = RJ * SC + RK * CC
                Bmx(nk, i) = Bmx(i, nk)
                VJ = vecArray(i, nj): VK = vecArray(i, nk)
                vecArray(i, nj) = VJ * CC - VK * SC
                vecArray(i, nk) = VJ * SC + VK * CC
            Next i
            
            w = RM * C2 - RR * S2
            Bmx(nj, nj) = RP + w
            Bmx(nk, nk) = RP - w
            Bmx(nj, nk) = 0
            Bmx(nk, nj) = 0
            'continue
        Else
            Dim l As Integer
            For i = 1 To num: eigBuf(i) = Bmx(i, i): Next i
            
            For i = 1 To (num - 1)
                l = i
                For j = i + 1 To num
                    If (eigBuf(l) < eigBuf(j)) Then
                        l = j
                    End If
                Next j
                
                If (i <> l) Then
                    Call swap_com(eigBuf(i), eigBuf(l))
                    Call swap_ArrayCol(vecArray, num, i, l)
                End If
            Next i
            
            Exit Do
        End If
    Loop
   
    findEigvalEigvect_Jacobi = True
End Function
'
Sub swap_com(a As Variant, b As Variant)
    Dim v
    v = a: a = b: b = v
End Sub
'
Sub swap_ArrayCol(theArray As Variant, ByVal num As Integer, ByVal CA As Integer, ByVal cb As Integer)
    Dim i, v
    
    For i = 1 To num
        v = theArray(i, CA): theArray(i, CA) = theArray(i, cb): theArray(i, cb) = v
    Next i
    
End Sub
'
'return IsError(ret) = TRUE error else OK
'
Function findInvMx(dataArray As Variant, ByVal num As Integer) As Variant
    Dim i, j, md
    Dim mx() As Double
    
    If num <= 0 Then findInvMx = CVErr(xlErrValue): Exit Function
    
    ReDim mx(1 To num, 1 To num)
    
    For i = 1 To num
        For j = 1 To num
            mx(i, j) = dataArray(i, j)
        Next j
    Next i
    
    md = Application.MDeterm(mx)
    If IsError(md) Or Abs(md) <= DBL_ZERO Then findInvMx = CVErr(xlErrValue): Exit Function
    
    findInvMx = Application.MInverse(mx)
    
End Function

'=== EOF ===
Attribute VB_Name = "commPublic"
'=======================================================
' SSS_THR : |fffd||fffd||fffd||291|S|fffd||1d5||3d0||fffd|
'   |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| --- 0 based array
'   |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|   --- 1 based array
'   |fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd| --- 1 based array
'
' H13.8 -- H14.3 by LSQ
'=======================================================
Option Explicit
Option Private Module

'Standard Data
Public Gdata As DATA_Comm
Public GerrMsg As String

'=== |fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||fffd| ===
'Moved to MClstPublic

'=== |fffd||fffd||fffd|q|fffd||fffd||fffd||fffd| ===
Public Gkihon As KIHON      'basic tkryo,   also used in SSB, used in CLST
Public Gskn_m() As Double   'soukan matrix, also used in SSB

Public Gsaveig As EIGENVAL  'also used in SSB
Public Groteig As EIGENVAL
Public Gcomiter As COMITER
Public Gfactload As FACTLOAD_MX, Grotload As FACTLOAD_MX
Public Grotscr As FACTSCR_MX
Public Gvectm As MATRIXF
Public Gfcor As MATRIXF

Public Gtokuten_flg As Integer

'vector
Public Geig_v() As Double   'also used in SSB
Public Gpreeig_v() As Double
'matrix
Public GR_m() As Double
Public GV_m() As Double     'also used in SSB
Public GpreR_m() As Double
Public GpreV_m() As Double

'matrix
Public Gst_m() As Double
Public Ga_m() As Double
Public Gt1_m() As Double
Public Gt2_m() As Double
Public Gwork_m() As Double
Public Gev_m() As Double

'inverse matrix of the soukan matrix
Public GsknInvMx As Variant
Public GsknInvMxOk As Boolean

Public Gpara As PARA_INSI

'=== |fffd||542c||fffd||fffd||fffd||fffd||fffd||fffd| ===
'vector
Public Gscrmean_v() As Double

'matrix
Public Gfactor() As Double

'=== EOF ===
Attribute VB_Name = "commSheet"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd|V|fffd|[|fffd|g|fffd||24a||582||fffd||fffd||fffd||752||80c2||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2001.12 by LSQ
'=================================================
Option Private Module
Option Explicit
'
'Wgt : xlMedium, xlThin, xlHairline etc
'bottomLineFlg : 0 = nasi, >=1 (xlThin|fffd||fffd|) |fffd||fffd||fffd||fffd||fffd||727d||fffd|s|fffd||682||249||fffd||fffd||fffd||fffd||fffd|`|fffd||fffd||fffd|B
'firstTateLineFlg : 0 = not need to draw, 1 = xlThin
'
'H12.11.9 LSQ
'
Sub drawKeiSen_Ptn001(rgeObj As Range, _
    outsideWgt As Integer, insideTateWgt As Integer, _
    bottomLineFlg As Integer, firstTateLineFlg As Integer)
    
    Dim rwNum As Long, clNum As Long
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    '
    rgeObj.Worksheet.Activate
    rgeObj.Select
        
    'outside
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, outsideWgt)
    'inside
    If clNum > 1 Then
        Call setKeiSen_Sub01(Selection, xlInsideVertical, xlContinuous, insideTateWgt)
    End If
    '
    If firstTateLineFlg <> 0 And clNum > 1 Then
        rgeObj.Offset(0, 0).Range("A1:A" & rwNum).Select
        Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlThin)
    End If
    '
    If rwNum > 1 Then
        'Top
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, outsideWgt)
        Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, outsideWgt)
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)
        Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, outsideWgt)
        'Bottom
        If bottomLineFlg > 0 And rwNum > bottomLineFlg + 2 Then
            rgeObj.Offset(rwNum - bottomLineFlg, 0).Range(Cells(1, 1), Cells(bottomLineFlg, clNum)).Select
            Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, outsideWgt)
            Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlThin)
            Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, outsideWgt)
            Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, outsideWgt)
        End If
    End If
    '
    rgeObj(1, 1).Select
End Sub
'
'Wgt : xlMedium, xlThin, xlHairline etc
'firstTateLineFlg : 0 = not need to draw, 1 = xlThin
'
'H12.11.10 LSQ
'
Sub drawKeiSen_Ptn001a(rgeObj As Range, _
    outsideWgt As Integer, insideTateWgt As Integer, firstTateLineFlg As Integer)
    Dim rwNum As Long, clNum As Long
    Dim tmpRge As Range
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    '
    rgeObj.Worksheet.Activate
        
    'outside
    Call setKeiSen_Sub01(rgeObj, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeTop, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeBottom, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeRight, xlContinuous, outsideWgt)
    'inside
    If clNum > 1 Then
        Call setKeiSen_Sub01(rgeObj, xlInsideVertical, xlContinuous, insideTateWgt)
    End If
    '
    If firstTateLineFlg <> 0 And clNum > 1 Then
        Set tmpRge = rgeObj.Offset(0, 0).Range("A1:A" & rwNum)
        Call setKeiSen_Sub01(tmpRge, xlEdgeRight, xlContinuous, xlThin)
    End If
    '
    rgeObj(1, 1).Select
End Sub
'
'H12.11.17 LSQ
Sub drawKeiSen_Ptn002(rgeObj As Range, outsideWgt As Integer, insideWgt As Integer)
    Dim rownum As Long, colNum As Integer
    Dim insideTateWgt As Integer, insideYokoWgt As Integer
    
    insideTateWgt = insideWgt
    insideYokoWgt = insideWgt
    rownum = rgeObj.Rows.Count
    colNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, outsideWgt)
    
    If colNum > 1 Then
        Call setKeiSen_Sub01(Selection, xlInsideVertical, xlContinuous, insideTateWgt)
    End If
    
    If rownum > 1 Then
        Call setKeiSen_Sub01(Selection, xlInsideHorizontal, xlContinuous, insideYokoWgt)
    End If

    rgeObj(1, 1).Select
End Sub
'
'Wgt : xlMedium, xlThin, xlHairline etc
'Condition :
'    rownum >= 2
'
'H12.11.10 LSQ
'
Sub drawKeiSen_Ptn003(rgeObj As Range, _
    outsideWgt As Integer, insideTateWgt As Integer)
    Dim rwNum As Long, clNum As Long
    Dim tmpRge As Range
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    If rwNum < 2 Then Exit Sub
    '
    rgeObj.Worksheet.Activate
    '
    'outside
    Call setKeiSen_Sub01(rgeObj, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeTop, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeBottom, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(rgeObj, xlEdgeRight, xlContinuous, outsideWgt)
    'inside
    If clNum > 1 Then
        Set tmpRge = rgeObj.Offset(1, 0).Range(Cells(1, 1), Cells(rwNum - 1, clNum))
        Call setKeiSen_Sub01(tmpRge, xlInsideVertical, xlContinuous, insideTateWgt)
    End If
    '
    'Top 2-Line
    Set tmpRge = rgeObj.Offset(1, 0).Range(Cells(1, 1), Cells(1, clNum))
    Call setKeiSen_Sub01(tmpRge, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(tmpRge, xlEdgeTop, xlContinuous, xlThin)
    Call setKeiSen_Sub01(tmpRge, xlEdgeBottom, xlContinuous, xlThin)
    Call setKeiSen_Sub01(tmpRge, xlEdgeRight, xlContinuous, outsideWgt)
    '
    rgeObj(1, 1).Select
End Sub
'
'ActiveSheet|fffd||30f||fffd||158|g|fffd||fffd||fffd||fffd|`|fffd||fffd|
'
'H12.7.3 YW
'
Sub drawKeiSen_Ptn01(rgeObj As Range)
    Call drawKeiSen_Ptn001(rgeObj, xlMedium, xlThin, 0, 0)
End Sub
'
'|fffd||fffd||fffd|A|fffd|E|fffd|A|fffd||fffd|A|fffd||fffd||fffd||fffd|Border|fffd||30c|r|fffd||fffd|
'
Private Sub setKeiSen_Sub01(selObj As Object, bdrPos As Integer, lineSty As Integer, lineWgt As Integer)
    With selObj.Borders(bdrPos)
        .LineStyle = lineSty
        .Weight = lineWgt
        .ColorIndex = xlAutomatic
    End With
End Sub
'
'|fffd|V|fffd|[|fffd|g|fffd||318|g|fffd||fffd||fffd||315|`|fffd||fffd|
'
Sub setSheetWakusen(bOnOff As Boolean)
    ActiveWindow.DisplayGridlines = bOnOff
End Sub
'
'|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30f|o|fffd||fffd|
'
Sub outputTitle_Comm(titleStr As String, outObj As Range)
    outObj = "|fffd||fffd||fffd|@" & titleStr
    With outObj.Font
        .FontStyle = "|fffd||fffd||fffd||fffd|"
    End With
End Sub

'
'H12.7.3 YW, added some other Patterns
'
Sub drawKeiSen_Ptn011(rgeObj As Range)
    Call drawKeiSen_Ptn01(rgeObj)
End Sub

Sub drawKeiSen_Ptn012(rgeObj As Range)
    Call drawKeiSen_Ptn001(rgeObj, xlMedium, xlThin, 1, 1)
End Sub
'
Sub drawKeiSen_Ptn02(rgeObj As Range)

    Dim rwNum As Long, clNum As Long
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlMedium)
    '
    If rwNum > 1 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)
    End If
    '
    If clNum > 1 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlThin)
    End If
    '
    rgeObj(1, 1).Select

End Sub
'
'insideFlg = row(0) or column(1)
'
'H12.11.28 LSQ
'
Sub drawKeiSen_Ptn002a(rgeObj As Range, outsideWgt As Integer, insideWgt As Integer, insideFlg As Integer)
    Dim rownum As Long, colNum As Integer
    Dim insideTateWgt As Integer, insideYokoWgt As Integer
    
    insideTateWgt = insideWgt
    insideYokoWgt = insideWgt
    rownum = rgeObj.Rows.Count
    colNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, outsideWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, outsideWgt)
    
    If colNum > 1 And insideFlg = 1 Then
        Call setKeiSen_Sub01(Selection, xlInsideVertical, xlContinuous, insideTateWgt)
    End If
    
    If rownum > 1 And insideFlg = 0 Then
        Call setKeiSen_Sub01(Selection, xlInsideHorizontal, xlContinuous, insideYokoWgt)
    End If

    rgeObj(1, 1).Select
End Sub

Sub drawKeiSen_Ptn031(rgeObj As Range)

    Dim rwNum As Long, clNum As Long
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlMedium)
    '
    If rwNum > 1 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)
        rgeObj.Offset(0, 0).Range(Cells(rwNum, 1), Cells(rwNum, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlThin)
    End If
    '
    If clNum > 2 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum - 1, 1)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlThin)
    End If
    rgeObj.Offset(0, 0).Range(Cells(1, clNum), Cells(rwNum, clNum)).Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, xlThin)
    '
End Sub

Sub drawKeiSen_Ptn032(rgeObj As Range)

    Dim rwNum As Long, clNum As Long
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlMedium)
    '
    rgeObj.Offset(0, 0).Range(Cells(2, 1), Cells(2, clNum)).Select
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)

End Sub
'
'H13.2 mdf by LSQ
Sub drawKeiSen_Ptn033(rgeObj As Range)
    Dim rwNum As Long, clNum As Long
    Dim tmpRge As Range
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    If clNum < 3 Then Exit Sub
    
    rgeObj.Worksheet.Activate
    Set tmpRge = rgeObj.Offset(0, 2).Range(Cells(1, 1), Cells(rwNum, clNum - 2))
    Call drawKeiSen_Ptn001a(tmpRge, xlThin, xlThin, 0)
    
    Call drawKeiSen_Ptn05(rgeObj, xlMedium)
    '
    If rwNum > 1 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)
        rgeObj.Offset(3, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlThin)
    End If
    '
End Sub

Sub drawKeiSen_Ptn041(rgeObj As Range)

    Dim rwNum As Long, clNum As Long
    '
    rwNum = rgeObj.Rows.Count
    clNum = rgeObj.Columns.Count
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlMedium)
    Call setKeiSen_Sub01(Selection, xlInsideVertical, xlContinuous, xlThin)
    Call setKeiSen_Sub01(Selection, xlInsideHorizontal, xlContinuous, xlThin)
    '
    If rwNum > 1 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, xlMedium)
        rgeObj.Offset(0, 0).Range(Cells(rwNum, 1), Cells(rwNum, clNum)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, xlMedium)
    End If
    '
    If clNum > 2 Then
        rgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1)).Select
        Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, xlMedium)
    End If
    '
End Sub

Sub drawKeiSen_Ptn05(rgeObj As Range, bdrWgt As Integer)
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    Call setKeiSen_Sub01(Selection, xlEdgeLeft, xlContinuous, bdrWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeTop, xlContinuous, bdrWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeBottom, xlContinuous, bdrWgt)
    Call setKeiSen_Sub01(Selection, xlEdgeRight, xlContinuous, bdrWgt)
    '
    rgeObj(1, 1).Select

End Sub

Sub drawKeiSen_Ptn051(rgeObj As Range)
    Call drawKeiSen_Ptn001(rgeObj, xlThin, xlThin, 0, 0)
End Sub

Sub addYokoLine(x As Range)
    x.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Sub removeYokoLine(x As Range)
   x.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

'
'H14.7.3 LSQ
'
Sub drawKeiSen_OneEdge(rgeObj As Range, edgeStr As String, wgt As Integer)
    Dim edgeCont As Integer
    
    Select Case UCase(edgeStr)
        Case "LEFT": edgeCont = xlEdgeLeft
        Case "RIGHT": edgeCont = xlEdgeRight
        Case "TOP": edgeCont = xlEdgeTop
        Case "BOTTOM": edgeCont = xlEdgeBottom
        Case Else: Return
    End Select
    
    rgeObj.Worksheet.Activate
    rgeObj.Select
    If wgt = xlNone Then    'H14.7.3 LSQ add
        Selection.Borders(edgeCont).LineStyle = xlNone
    Else
        With Selection.Borders(edgeCont)
            .LineStyle = xlContinuous
            .Weight = wgt   'xlHairline
            .ColorIndex = xlAutomatic
        End With
    End If
    '
    rgeObj.Range("A1").Select

End Sub
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\|fffd||30c|r|fffd||fffd||fffd||fffd|`|fffd||fffd| (|fffd||38f||fffd| : ActiveSheet|fffd||313||fffd||fffd|e|fffd|o|fffd||34d||3c2||742||303|N|fffd||fffd||fffd|X|fffd|\)
'
'H12.11.28 LSQ
'
Sub drawKeiSen_CrsTbl(ByVal tabRge As Range, outsideWgt As Integer)
    Dim i
    Dim rwNum As Long, clNum As Long
    Dim bgnRowCol As Long, num As Long
    Dim rgeObj As Range
    '
    rwNum = tabRge.Rows.Count
    clNum = tabRge.Columns.Count
    If Not (rwNum > 3 And clNum > 3) Then Exit Sub
    '
    tabRge.Worksheet.Activate
    
    '|fffd||fffd|title
    bgnRowCol = 4
    For i = 5 To rwNum
        If Trim(tabRge(i, 1)) <> "" Then
            num = i - bgnRowCol
            If num > 0 Then
                Set rgeObj = tabRge(bgnRowCol, 1).Range("A1:A" & num)
                Call drawKeiSen_Ptn05(rgeObj, xlThin)
            End If
            '
            bgnRowCol = i
        End If
    Next i
    num = rwNum - bgnRowCol + 1
    If num > 0 Then
        Set rgeObj = tabRge(bgnRowCol, 1).Range("A1:A" & num)
        Call drawKeiSen_Ptn05(rgeObj, xlThin)
    End If
    '|fffd|stitle
    bgnRowCol = 4
    For i = 5 To clNum
        If Trim(tabRge(1, i)) <> "" Then
            num = i - bgnRowCol
            If num > 0 Then
                Set rgeObj = tabRge(1, bgnRowCol).Range(Cells(1, 1), Cells(1, num))
                Call drawKeiSen_Ptn05(rgeObj, xlThin)
            End If
            '
            bgnRowCol = i
        End If
    Next i
    num = clNum - bgnRowCol + 1
    If num > 0 Then
        Set rgeObj = tabRge(1, bgnRowCol).Range(Cells(1, 1), Cells(1, num))
        Call drawKeiSen_Ptn05(rgeObj, xlThin)
    End If
    'data
    Set rgeObj = tabRge(2, 2).Range(Cells(1, 1), Cells(rwNum - 1, clNum - 1))
    Call drawKeiSen_Ptn002(rgeObj, xlThin, xlThin)
    '|fffd|O|fffd|g
    Set rgeObj = tabRge
    Call drawKeiSen_Ptn05(rgeObj, outsideWgt)
    
End Sub
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd||fffd||fffd|L|fffd|\|fffd||30c|r|fffd||fffd||fffd||fffd|`|fffd||fffd| (|fffd||38f||fffd| : ActiveSheet|fffd||313||fffd||fffd|e|fffd|o|fffd||34d||3c2||742||303|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd||fffd||fffd|L|fffd|\)
'
'H12.11.28 LSQ
'
Sub drawKeiSen_CrsJoinTbl(ByVal tabRge As Range, outsideWgt As Integer)
    Dim i
    Dim rwNum As Long, clNum As Long
    Dim bgnRowCol As Long, num As Long
    Dim rgeObj As Range
    '
    rwNum = tabRge.Rows.Count
    clNum = tabRge.Columns.Count
    If Not (rwNum > 4 And clNum > 3) Then Exit Sub
    '
    tabRge.Worksheet.Activate
    
    '|fffd||fffd|title
    bgnRowCol = 5
    For i = 6 To rwNum
        If Trim(tabRge(i, 1)) <> "" Then
            num = i - bgnRowCol
            If num > 0 Then
                Set rgeObj = tabRge(bgnRowCol, 1).Range("A1:A" & num)
                Call drawKeiSen_Ptn05(rgeObj, xlThin)
            End If
            '
            bgnRowCol = i
        End If
    Next i
    num = rwNum - bgnRowCol + 1
    If num > 0 Then
        Set rgeObj = tabRge(bgnRowCol, 1).Range("A1:A" & num)
        Call drawKeiSen_Ptn05(rgeObj, xlThin)
    End If
    '|fffd|stitle
    bgnRowCol = 4
    For i = 5 To clNum
        If Trim(tabRge(1, i)) <> "" Then
            num = i - bgnRowCol
            If num > 0 Then
                Set rgeObj = tabRge(1, bgnRowCol).Range(Cells(1, 1), Cells(1, num))
                Call drawKeiSen_Ptn05(rgeObj, xlThin)
            End If
            '
            bgnRowCol = i
        End If
    Next i
    num = clNum - bgnRowCol + 1
    If num > 0 Then
        Set rgeObj = tabRge(1, bgnRowCol).Range(Cells(1, 1), Cells(1, num))
        Call drawKeiSen_Ptn05(rgeObj, xlThin)
    End If
    'data
    Set rgeObj = tabRge(2, 2).Range(Cells(1, 1), Cells(1, clNum - 1))
    Call drawKeiSen_Ptn002a(rgeObj, xlThin, xlThin, 1)
    '
    For i = 3 To rwNum Step 2
        Set rgeObj = tabRge(i, 2).Range(Cells(1, 1), Cells(2, clNum - 1))
        Call drawKeiSen_Ptn002a(rgeObj, xlThin, xlThin, 1)
    Next i
    '|fffd|O|fffd|g
    Set rgeObj = tabRge
    Call drawKeiSen_Ptn05(rgeObj, outsideWgt)
    
End Sub
'
'H12.11.3 LSQ
'
Sub setNumFormat(rgeObj As Range, ketaNum As Integer)
    Dim i As Integer, fmtStr As String
    
    If ketaNum <= 0 Then
        fmtStr = "0"
    Else
        fmtStr = "0."
        For i = 1 To ketaNum
            fmtStr = fmtStr & "0"
        Next i
        'fmtStr = fmtStr & "_ "     '|fffd||14c||fffd||30b||d4482||202||fffd||fffd||202||fffd|; H12.11.28 LSQ
    End If
    
    rgeObj.NumberFormatLocal = fmtStr
End Sub
'
'H12.11.21 LSQ
Sub setNumFormat_ByFmtStr(rgeObj As Range, fmtStr As String)
    rgeObj.NumberFormatLocal = fmtStr   '"0.000%"
End Sub
'
'H12.11.9 LSQ
Sub adjustColWidth(rgeObj As Range)
    rgeObj.EntireColumn.AutoFit
End Sub

'=== EOF ===

Sub drawKeisenXY1(xy As Range)
    xy.Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    xy.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    xy.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
  
    
End Sub

Sub drawKeisenXY2(xy As Range)
    xy.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlHairline
        .ColorIndex = xlAutomatic
    End With

End Sub
Sub drawKeisenXY3(xy As Range)
    xy.Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With

End Sub
Attribute VB_Name = "commText"
'=======================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
'
'H12.3 by LSQ
'=======================================================
Option Private Module
Option Explicit

Public Const ErrIn As String = "[|fffd|G|fffd||fffd||fffd|[] "

Public Const MSG_done As String = "|fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_lackData As String = "|fffd|w|fffd||80b3||fffd||a0bd||fffd|f|fffd|[|fffd|^|fffd||30c||90||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_wrongDataArea As String = "|fffd||fffd||fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_cateNum As String = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_bruNotEqlSyk As String = "|fffd||fffd||fffd||78d||fffd||fffd||683|f|fffd|[|fffd|^|fffd||fffd| != |fffd|W|fffd|v|fffd||fffd||fffd||683|f|fffd|[|fffd|^|fffd||fffd||fffd|B"
Public Const MSG_sykCont As String = "|fffd|W|fffd|v|fffd||fffd||fffd|e|fffd||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const MSG_kkErr = "|fffd||50a|u|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd|"
Public Const MSG_numErr = "|fffd||90||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd|"
Public Const MSG_naibuErr As String = "[|fffd||fffd||fffd||fffd||fffd|G|fffd||fffd||fffd|[] : "
Public Const MSG_CalcErr As String = "[|fffd|v|fffd|Z|fffd|G|fffd||fffd||fffd|[] : "
Public Const MSG_CrsNumErr As String = "|fffd|N|fffd||fffd||fffd|X|fffd|\|fffd||fffd||fffd||fffd||fffd|e|fffd||348||342||12d02||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_SkRatNotGroupError = "|fffd||fffd||fffd||315||fffd||fffd|@|fffd||34c|Q|fffd||282||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const MSG_nodata As String = "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||fffd||302||155||fffd||fffd||342||1218e|~|fffd||fffd||fffd||702||fffd||fffd|B" '"|fffd||50512|l|fffd||303|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
Public Const MSG_nErr As String = "|fffd||fffd||fffd||fffd||fffd||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_NotMatrixErr = "|fffd||fffd||fffd||315||fffd||fffd|@|fffd||343|}|fffd|g|fffd||fffd||fffd|b|fffd|N|fffd|X|fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const MSG_NotAllItemErr = "|fffd||fffd||fffd||315||fffd||fffd|@|fffd||351|S|fffd||fffd||fffd||682||fffd|I|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
Public Const MSG_ItemNumErr = "|fffd||fffd||fffd||690||fffd||fffd||702||fffd||fffd||343|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||348||20a|O|fffd||142||fffd|"
Public Const GSTR_err As String = "|fffd||5f0|"
Public Const GSTR_nasi As String = "|fffd||202||fffd|"
Public Const GSTR_NA As String = "-"
Public Const MSG_RangeErr   As String = "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
Public Const MSG_KeisanErr As String = "|fffd||fffd||fffd||fffd||fffd|v|fffd|Z|fffd|G|fffd||fffd||fffd|["
Public Const MSG_kotaiMeiErr As String = "|fffd||91||316||fffd||fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_DlgCont As String = "|fffd|_|fffd|C|fffd|A|fffd||fffd||fffd|O|fffd||30e|w|fffd||fffd||fffd||fffd|e|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"

Public Const MSG_wrongItm As String = "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_wrongSmp As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"

'|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||303|G|fffd||fffd||fffd|[|fffd||fffd||fffd|b|fffd|Z|fffd|[|fffd|W
Public Const ERR_CLS_01 As String = "|fffd||fffd||fffd||690||fffd||fffd||fffd||fffd||90a2||fffd||343|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd|"
Public Const ERR_CLS_02 As String = "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|"
Public Const ERR_CLS_03 As String = "|fffd|f|fffd|[|fffd|^|fffd|A|fffd|N|fffd|Z|fffd|X|fffd|G|fffd||fffd||fffd|["
Public Const ERR_CLS_04 As String = "|fffd|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|"
Public Const ERR_CLS_05 As String = "|fffd||fffd||197||308||fffd||fffd||fffd|m|fffd||6c2||fffd||fffd||90bd||fffd||7c2||303||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd|"
Public Const ERR_CLS_06 As String = "|fffd|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
Public Const RET_ERR_IDATA_RANGE As String = "|fffd||fffd||fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
Public Const RET_ERR_ODATA_RANGE As String = "|fffd|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
Public Const RET_ERR_GETDATA As String = "|fffd|w|fffd||fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd|"
Public Const ERR_CLS_MEANSD As String = "|fffd||fffd||fffd||3d2|l|fffd||195|W|fffd||fffd||fffd||38d||fffd||fffd||30c|v|fffd|Z|fffd||fffd||fffd|G|fffd||fffd||fffd|["
Public Const ERR_CLS_BUNRUI As String = "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||782||243|G|fffd||fffd||fffd|["
Public Const ERR_orgClsSmpNum As String = "|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||fffd||fffd||342||243|G|fffd||fffd||fffd|[|fffd||142||fffd|"
Public Const ERR_orgClsSmpNum_Zero As String = "|fffd||fffd||fffd|_|fffd||fffd||fffd||4c3|N|fffd||fffd||fffd|X|fffd|^|fffd|[|fffd||303|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd|O|fffd||142||fffd|"
Public Const ERR_SAMP_LACK As String = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|"
Public Const MSG_CLST_BekichiRange As String = "|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||302||5c2||fffd||fffd||fffd||348||fffd|= (0.01|fffd|`0.9)"

Public Const MSG_ZKB_ERR As String = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd|F|fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"  'old = "|fffd||fffd||fffd||fffd||fffd||28f|d|fffd|S|fffd||315||fffd||fffd||fffd|" ; H15.6.10
Public Const MSG_CATE_ERR As String = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"

Public Const MSG_SSB_SCRYSK_ERR As String = "|fffd||542c||fffd||fffd||fffd||fffd||fffd|_|fffd|F|fffd|\|fffd||fffd||fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_INSI_SCRYSK_ERR As String = "|fffd||fffd||fffd|q|fffd||fffd||fffd|_|fffd|F|fffd|\|fffd||fffd||fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_LABYSK_ERR As String = "|fffd||5368e||496||fffd||fffd|\|fffd||fffd||fffd|F|fffd|\|fffd||fffd||fffd||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_LABDATA_ERR As String = "|fffd||5368e||496||fffd||fffd|\|fffd||fffd||fffd|F|fffd||fffd||fffd||354||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"

Public Const MSG_YRGE_ERR As String = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_XRGE_ERR As String = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_OUTRGE_ERR As String = "|fffd|o|fffd||354||348||342||30e|w|fffd||80aa||fffd|s|fffd||fffd||fffd||142||fffd||fffd|B"
Public Const MSG_GUNCODE_ERR As String = " |fffd|Q|fffd|R-|fffd|h|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"

'
'=== EOF ===
Attribute VB_Name = "doCommCalc"
'===================================================
'|fffd||fffd||fffd||28c|v|fffd|Z
'
' 2002.2 by LSQ
'===================================================
Option Private Module
Option Explicit

'|fffd||fffd|{|fffd||fffd||fffd|v|fffd||fffd|
Sub calc_kihon()
    Dim i, n
    Dim tmpRge As Range

    n = Gdata.itemnum
    
    Set tmpRge = Gdata.dataBgn.Range("A1:A" & Gdata.SmpNum)
    
    For i = 1 To n
        Gkihon.sum_v(i) = Application.sum(tmpRge)
        Gkihon.ave_v(i) = Application.Average(tmpRge)
        Gkihon.std_v(i) = Application.StDevP(tmpRge)
        Gkihon.std1_v(i) = Application.StDev(tmpRge)
        
        Gkihon.hwa_v(i) = Application.SumProduct(tmpRge, tmpRge)
        
        'next column
        Set tmpRge = tmpRge.Offset(0, 1)
    Next i
    
End Sub
'
'|fffd||fffd||fffd||58d|s|fffd||fffd| & |fffd|t|fffd|s|fffd||fffd| (optional)
'
Sub calc_soukan(Optional ByVal bCalcInvMx As Boolean = True)
    Dim i, j
    Dim tmpd As Double, rgeX As Range, rgeY As Range, tmpRge As Range
    Dim bgnRge As Range, n As Integer
    
    n = Gdata.itemnum
    Set bgnRge = Gdata.dataBgn.Range("A1:A" & Gdata.SmpNum)
        
    For i = 1 To n
        Set rgeX = bgnRge.Offset(0, i - 1)
        
        Gskn_m(i, i) = 1
        For j = i + 1 To n
            Set rgeY = bgnRge.Offset(0, j - 1)
            tmpd = Application.Correl(rgeX, rgeY)
            
            Gskn_m(i, j) = tmpd
            Gskn_m(j, i) = tmpd
        Next j
    Next i
    
    '|fffd||fffd||fffd||58d|s|fffd||fffd||30b|t|fffd|s|fffd||fffd|
    If bCalcInvMx Then
        GsknInvMx = findInvMx(Gskn_m, n)
        GsknInvMxOk = IIf(IsError(GsknInvMx), False, True)
    End If
    
End Sub
'
'|fffd||fffd||fffd||fffd||fffd|U|fffd|s|fffd||fffd|
'
'covarArray() -- return matrix
'n --- row (or column) number of the covarArray()
'b_n1 -- divided by (n-1) if TRUE else by n.
'
Sub calc_covar_matrix(covarArray As Variant, ByVal n As Integer, Optional ByVal b_n1 As Boolean = True)
    Dim i, j, SmpNum
    Dim tmpd As Double, rgeX As Range, rgeY As Range, tmpRge As Range
    Dim bgnRge As Range
    
    n = Gdata.itemnum
    Set bgnRge = Gdata.dataBgn.Range("A1:A" & Gdata.SmpNum)
    SmpNum = Application.Count(bgnRge)    '= Gdata.smpNumData
    If SmpNum < 2 Then Exit Sub     'ERROR
        
    For i = 1 To n
        Set rgeX = bgnRge.Offset(0, i - 1)
        
        If b_n1 Then
            covarArray(i, i) = Application.var(rgeX)    'n-1
        Else
            covarArray(i, i) = Application.VarP(rgeX)   'n
        End If
        
        For j = (i + 1) To n
            Set rgeY = bgnRge.Offset(0, j - 1)
            
            tmpd = Application.covar(rgeX, rgeY)              'n
            If b_n1 Then tmpd = tmpd * SmpNum / (SmpNum - 1)  'n-1
            
            covarArray(i, j) = tmpd
            covarArray(j, i) = tmpd
        Next j
    Next i
    
End Sub
'
'eigType : return
'
Sub calc_contrib_accumu(eigType As EIGENVAL, ByVal n As Integer, EIG As Variant, eigVect As Variant, _
    Optional ByVal bDivByN As Boolean = True)
    
    Dim i, j
    Dim f As Double, tmpd As Double, div As Double
    
    div = n
    If (bDivByN = False) Then
        div = 0#
        For i = 1 To n: div = div + EIG(i): Next i
    End If
    
    If Abs(div) <= DBL_ZERO Then div = DBL_ZERO 'contrib, accumu error
    
    f = 0#
    For i = 1 To n
        eigType.e_v(i) = EIG(i)
        For j = 1 To n
            eigType.vect(i, j) = eigVect(i, j)
        Next j
        
        tmpd = EIG(i) / div
        eigType.contrib_v(i) = tmpd
        
        f = f + tmpd
        eigType.accumu_v(i) = f
    Next i

End Sub

'=== EOF ===
Attribute VB_Name = "mdlGrpComm"
'=======================================================
' SSS|fffd||fffd||fffd||3d7||289||fffd||fffd|Ver5.5
' Common Functions
' 2007.01 PYJ
'=======================================================

Option Explicit

Function nTo26Str(ByVal n As Integer) As String
    Dim a1 As Integer, a2 As Integer
    
    nTo26Str = ""
    If Not (n >= 1 And n <= 256) Then Exit Function 'ERROR
    n = n - 1   '0 to 255
    
    a1 = Int(n / 26)    'Mar 2003, PYJ  Old:WorksheetFunction.Floor(n / 26, 1)
    a2 = n Mod 26
    
    If a1 > 0 Then
        nTo26Str = nTo26Str & Chr(Asc("A") + a1 - 1)
    End If
    nTo26Str = nTo26Str & Chr(Asc("A") + a2)
    
End Function

Sub adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = decNumKeta(maxV - minV)
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Round(max, keta)
    minV = Application.Round(min, keta)
End Sub

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function

'=== EOF ===
Attribute VB_Name = "mdlMhbt"
Option Explicit

Sub MhbtGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range, xrge As Range, yrge As Range
    Dim cht As Chart
    Dim i As Long
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.Parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrksht.Range(Comm_toXlA1str(strGrpData))
    On Error GoTo 0
    If outRge Is Nothing Or dataRge Is Nothing Then
        Exit Sub
    End If
      
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplMhbt", "GrpMhbt")
    If cht Is Nothing Then Exit Sub
  
    cht.SetSourceData dataRge
    cht.Axes(xlValue).HasTitle = True
    cht.Axes(xlCategory, xlPrimary).HasTitle = False
    cht.Axes(xlValue, xlPrimary).HasTitle = False
    
    For i = 1 To ActiveChart.SeriesCollection.Count
        With ActiveChart.SeriesCollection(i)
            .Border.Weight = xlThin
            .Border.LineStyle = xlNone
            .MarkerBackgroundColorIndex = 1
            .MarkerForegroundColorIndex = 1
            .MarkerStyle = xlDiamond
            .Smooth = False
            .MarkerSize = 5
            .Shadow = False
        End With
    Next i
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.Parent, outRge, 20, 6)
              
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outRge.Select
    
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
End Sub
Attribute VB_Name = "mdlSknGrp"
'=======================================================
' SSS|fffd||fffd||fffd||3d7||289||fffd||fffd|Ver5.5 : SKN
'
' 2007.1 PYJ
'=======================================================

Option Explicit

Sub TenGrp1(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, _
        sCorrel As String, bCorrel As Boolean, bName As Boolean, nCharNum As Integer, nFontSize As Integer)
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range, nameRge As Range
    Dim xrge As Range, yrge As Range
    Dim cht As Chart
    Dim xaxis As String, yaxis As String ', sCorrel As String
    Dim i As Integer
    
    On Error Resume Next
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrksht.Range(Comm_toXlA1str(strGrpData))
    Set nameRge = dataRge.Range("A2:A" & dataRge.Rows.Count)
    Set dataRge = dataRge.Range("B1:C" & dataRge.Rows.Count)
    On Error GoTo 0
    If dataRge Is Nothing Or nameRge Is Nothing Then
        Exit Sub
    End If
    
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplSkn", "grpTenGrp1")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData dataRge
    'cht.SeriesCollection(1).Name = "='" & wrksht.Name & "'!" & toXlRCstr(datarge.Range("C1").Address)
    'Set nameRge = Range(datarge.Range("A1").Offset(1, 0), datarge.Range("A1").Offset(datarge.Rows.Count - 1, 0))
    'Set xrge = Range(datarge.Range("A1").Offset(1, 1), datarge.Range("A1").Offset(datarge.Rows.Count - 1, 1))
    'cht.SeriesCollection(1).XValues = "='" & wrksht.Name & "'!" & toXlRCstr(xrge.Address)
    'Set yrge = Range(datarge.Range("A1").Offset(1, 2), datarge.Range("A1").Offset(datarge.Rows.Count - 1, 2))
    'cht.SeriesCollection(1).Values = "='" & wrksht.Name & "'!" & toXlRCstr(yrge.Address)
    'yaxis = (datarge.Range("A1").Offset(0, 1).Value)
    'xaxis = (datarge.Range("A1").Offset(0, 2).Value)
    cht.Axes(xlValue).HasTitle = True
    cht.Axes(xlCategory).HasTitle = True
    cht.Axes(xlValue).AxisTitle.Characters.Text = dataRge(1, 2)
    cht.Axes(xlCategory).AxisTitle.Characters.Text = dataRge(1, 1)
    cht.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
    'cht.Axes(xlValue).AxisTitle.Left = 12
    'cht.Axes(xlValue).AxisTitle.Top = 1
    'cht.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
    If bName Then
        Call Comm_SetDataLabel(cht.SeriesCollection(1), nameRge(1, 1), nFontSize, nCharNum)
        'cht.ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
        'For i = 1 To nameRge.Rows.Count
        '    cht.SeriesCollection(1).Points(i).DataLabel.Text = Left(nameRge(i, 1), nCharNum)
        'Next i
    End If
    'sCorrel = IIf(bCorrel, "r=" + dCorrel, "")
    If Not bCorrel Then sCorrel = ""
    cht.Shapes("shpCorrel").DrawingObject.Caption = sCorrel
    'cht.ChartArea.Font.Size = nFontSize

    Call Comm_setChartPosSize(cht.Parent, outRge)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    outRge.Select
End Sub

Private Function setJikuMinMax(axis, min As Double, max As Double)
    'ActiveChart.Axes(axis).Select
    With ActiveChart.Axes(axis)
        .MinimumScale = min
        .MaximumScale = max
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .ScaleType = False
    End With
End Function

Sub TenGrp2(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, _
        nGrpNum As Integer, flgKan As Integer, wakuRow As Integer, wakuCol As Integer)
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range, nameRge As Range
    Dim rgetmp As Range
    Dim cht As Chart
    Dim xaxis As String, yaxis As String, sCorrel As String, tmpstr As String
    Dim i As Integer, j As Integer, k As Integer
    Dim rowoff As Integer, coloff As Integer
    Dim dmin1 As Double, dmax1 As Double
    Dim dmin2 As Double, dmax2 As Double
    Dim rownum As Long, itemnum As Long
    
    On Error Resume Next
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = Range(Comm_toXlA1str(strGrpData))
    On Error GoTo 0
    If outRge Is Nothing Or dataRge Is Nothing Then
        Exit Sub
    End If
    
    rowoff = wakuRow + IIf(flgKan = 1, 0, 2)
    coloff = wakuCol + IIf(flgKan = 1, 0, 1)
    If nGrpNum > 1 Then
        itemnum = (Sqr(4 * nGrpNum + 1) + 1) / 2
    Else
        itemnum = 1
    End If
    Set rgetmp = outRge
    If flgKan = 2 Then
        For i = 1 To itemnum
            k = 0
            For j = 1 To itemnum
                If itemnum = 1 Or i <> j Then
                    Set outRge = rgetmp.Offset((i - 1) * rowoff, k * coloff)
                    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplSkn", "grpTenGrp2")
                    If cht Is Nothing Then
                        Exit Sub
                    End If
                    
                    'cht.Parent.Width = w
                    'cht.Parent.Height = h
                    
                    cht.SetSourceData Range(dataRge(1, 1), dataRge(dataRge.Rows.Count, 2))
                    rownum = dataRge.Rows.Count
                    
                    cht.Axes(xlValue).HasTitle = True
                    cht.Axes(xlValue).AxisTitle.Characters.Text = Mid(dataRge(1, 2), 1, 250)
                    cht.Axes(xlCategory).HasTitle = True
                    cht.Axes(xlCategory).AxisTitle.Characters.Text = Mid(dataRge(1, 1), 1, 250)
                    cht.Shapes("shpCorrel").DrawingObject.Caption = Mid(dataRge(1, 3), 1, 250)
                    #If 0 Then
                    dmin1 = WorksheetFunction.min(Range(dataRge(1, 1), dataRge(rownum, 1)))
                    dmax1 = WorksheetFunction.max(Range(dataRge(1, 1), dataRge(rownum, 1)))
                    dmin2 = WorksheetFunction.min(Range(dataRge(1, 2), dataRge(rownum, 3)))
                    dmax2 = WorksheetFunction.max(Range(dataRge(1, 2), dataRge(rownum, 3)))
                    Call Comm_adjustMinMax(dmin1, dmax1)
                    Call Comm_adjustMinMax(dmin2, dmax2)
                    Call setJikuMinMax(xlCategory, dmin1, dmax1)
                    Call setJikuMinMax(xlValue, dmin2, dmax2)
                    #Else
                    With cht
                        .Axes(xlCategory).MaximumScaleIsAuto = True
                        .Axes(xlCategory).MinimumScaleIsAuto = True
                        .Axes(xlValue).MaximumScaleIsAuto = True
                        .Axes(xlValue).MinimumScaleIsAuto = True
                    End With
                    #End If
                    Call Comm_setChartPosSize(cht.Parent, outRge, wakuRow, wakuCol)
                    Call MatchWorkbookFont
                    'set position and size
                    #If 0 Then
                    cht.Axes(xlCategory).AxisTitle.left = cht.PlotArea.left + cht.PlotArea.Width
                    cht.Axes(xlCategory).AxisTitle.top = cht.ChartArea.Height - 10
                    cht.Axes(xlValue).AxisTitle.left = 0
                    cht.Axes(xlValue).AxisTitle.top = 0
                    cht.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
                    cht.Shapes("shpCorrel").DrawingObject.left = cht.ChartArea.Width * 0.3
                    cht.Shapes("shpCorrel").DrawingObject.top = 0
                    cht.PlotArea.left = cht.ChartArea.Width * 0.05
                    cht.PlotArea.top = 10
                    cht.PlotArea.Width = cht.ChartArea.Width * 0.9
                    cht.PlotArea.Height = cht.Axes(xlCategory).AxisTitle.top - 10
                    #End If
                    k = k + 1
                    Set dataRge = dataRge.Offset(0, dataRge.Columns.Count)
                End If
            Next j
        Next i
    Else
        For i = 1 To itemnum
            tmpstr = Mid(dataRge(1, 2), 1, 250)
            For j = 1 To itemnum
                Set outRge = rgetmp.Offset((i - 1) * rowoff, (j - 1) * coloff)
                If itemnum = 1 Or i <> j Then
                    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplSkn", "grpTenGrp3")
                    If cht Is Nothing Then
                        Exit Sub
                    End If
                    
                    cht.SetSourceData Range(dataRge(1, 1), dataRge(dataRge.Rows.Count, 2))
                    rownum = dataRge.Rows.Count
                    
                    cht.Shapes("shpCorrel").DrawingObject.Caption = Mid(dataRge(1, 3), 1, 250)
                    
                    Call Comm_setChartPosSize(cht.Parent, outRge, wakuRow, wakuCol)
                    Call MatchWorkbookFont
                    
                    Set dataRge = dataRge.Offset(0, dataRge.Columns.Count)
                Else
                    outRge(8, 2).Value = tmpstr
                End If
            Next j
        Next i
    End If
    
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    rgetmp.Select
    
End Sub

'=== EOF ===
Attribute VB_Name = "mdlTh1Grp"
'=======================================================
' SSS|fffd||fffd||fffd||3d7||289||fffd||fffd|Ver5.5 : THR1
'
' 2007.1 PYJ
'=======================================================

Option Explicit
Option Base 0

'|fffd||fffd|A|fffd||fffd||fffd||fffd|
Sub KaikiGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range, xrge As Range, yrge As Range
    Dim cht As Chart
    Dim rownum As Long, itemnum As Long
    Dim xminv As Double, xmaxv As Double
    Dim yminv As Double, ymaxv As Double
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.Parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrksht.Range(Comm_toXlA1str(strGrpData))
    On Error GoTo 0
    If outRge Is Nothing Or dataRge Is Nothing Then
        Exit Sub
    End If
      
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplTh1", "grpKaiki")
    If cht Is Nothing Then Exit Sub
    
    rownum = dataRge.Rows.Count
    itemnum = dataRge.Columns.Count
    Set xrge = Range(dataRge(2, 1), dataRge(rownum, 1))
    Set yrge = Range(dataRge(2, 2), dataRge(rownum, itemnum))
    
    xminv = Application.WorksheetFunction.min(xrge)
    xmaxv = Application.WorksheetFunction.max(xrge)
    yminv = Application.WorksheetFunction.min(yrge)
    ymaxv = Application.WorksheetFunction.max(yrge)
    
    Call Comm_adjustMinMax(xminv, xmaxv)
    cht.Axes(xlCategory).Select
    Call setJikuMinMax(xminv, xmaxv, True)
    
    Call Comm_adjustMinMax(yminv, ymaxv)
    cht.Axes(xlValue).Select
    Call setJikuMinMax(yminv, ymaxv, True)
    
    cht.SetSourceData dataRge
   cht.Axes(xlValue).HasTitle = True
   cht.Axes(xlValue).AxisTitle.Characters.Text = dataRge(1, 2)
    cht.Axes(xlCategory).HasTitle = True
    cht.Axes(xlCategory).AxisTitle.Characters.Text = dataRge(1, 1)
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.Parent, outRge, 15, 8)
    
    '2007.03.21 added
    '2010.11.05 mdf
    'cht.Legend.Position = xlLegendPositionRight
    'cht.PlotArea.Width = cht.Legend.left - cht.PlotArea.left + 1
    cht.HasLegend = False
    cht.PlotArea.left = 0
    cht.PlotArea.Width = cht.ChartArea.Width
    'end mdf
    'end add
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outRge.Select
    
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
End Sub

'|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|1
'Derived from DrawJkkTrendGrp()@SSSMCTH1.xls of MAC_THR
Function DrawJkkTrendGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String) As String
    Dim hyoRge As Range, outGrp As Range
    Dim ct As Integer
    Dim cht As Chart
    Dim chartObj As ChartObject
    Dim dataNum As Long, rownum As Long, colNum As Integer
    Dim OStObj As Worksheet, stName As String, grpName As String, theLen As Integer
    Dim vmin As Double, vmax As Double
    Dim xrge As Range, rgeAry(1 To 4) As Range
    Dim tmpRge As Range
    Dim bSuitei As Boolean, sNum As Integer
    Dim titleStr As String
    
    DrawJkkTrendGrp = vbNullString
    On Error Resume Next
    
    'settings
    Set OStObj = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outGrp = OStObj.Range(Comm_toXlA1str(strGrpOut))
    Set hyoRge = OStObj.Range(Comm_toXlA1str(strGrpData))
    '
    On Error GoTo 0
    If outGrp Is Nothing Or hyoRge Is Nothing Then
        Exit Function
    End If
    
    rownum = hyoRge.Rows.Count
    colNum = hyoRge.Columns.Count
    dataNum = rownum - 1
    bSuitei = (colNum >= 7)
    '
    sNum = IIf(bSuitei, 4, 2)
    '
    Set xrge = hyoRge.Offset(1, 0).Range("A1:A" & dataNum)
    Set rgeAry(1) = xrge.Offset(0, 1)   'jiseki
    Set rgeAry(2) = xrge.Offset(0, 2)   'riron
    If bSuitei Then
        Set rgeAry(3) = xrge.Offset(0, 5)   'upper
        Set rgeAry(4) = xrge.Offset(0, 6)   'lower
    End If
    
    'limit
    Set tmpRge = Union(rgeAry(1), rgeAry(2))
    If bSuitei Then
        Set tmpRge = Union(tmpRge, rgeAry(3), rgeAry(4))
    End If
    vmin = WorksheetFunction.min(tmpRge)
    vmax = WorksheetFunction.max(tmpRge)
    
    '|fffd||fffd|}
    
    Set cht = Comm_GetTmplGrp(outGrp, ThisWorkbook.Name, "tmplTh1", "grpJukaiki1")
    If cht Is Nothing Then Exit Function
    
    '--|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    For ct = 1 To sNum
        cht.SeriesCollection(ct).Name = rgeAry(ct).Offset(-1, 0).Range("A1")
        cht.SeriesCollection(ct).XValues = xrge
        cht.SeriesCollection(ct).Values = rgeAry(ct)
    Next ct
    '
    If Not bSuitei Then
        cht.SeriesCollection(4).Delete
        cht.SeriesCollection(3).Delete
    End If
    
    titleStr = hyoRge.Offset(-1, 1)(1, 1)
    cht.Axes(xlValue).AxisTitle.Characters.Text = titleStr
    
    '|fffd||690||fffd||fffd||752||fffd|
    Call Comm_adjustMinMax(vmin, vmax)
    cht.Axes(xlValue).Select
    Call setJikuMinMax(vmin, vmax)
    
    Call Comm_setChartPosSize(cht.Parent, outGrp)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    OStObj.Activate
    outGrp.Select
    DrawJkkTrendGrp = titleStr
End Function

Private Sub setJikuMinMax(ByVal minV As Double, ByVal maxV As Double, Optional ByVal bCrsAtMin As Boolean = False)
    With Selection
        .MinimumScale = minV
        .MaximumScale = maxV
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlCustom
If bCrsAtMin Then
        .CrossesAt = minV   'cross at minimum point
Else
        .Crosses = xlAutomatic
End If
        .ReversePlotOrder = False
        .ScaleType = xlLinear
    End With
End Sub

'|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|2
'Derived from DrawJkkSknGrp()@SSSMCTH1.xls of MAC_THR
'Draw Skn Graph
'hyoRge : data range included title row
'
Sub DrawJkkSknGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, ByVal titleStr As String)
    Dim hyoRge As Range, outGrp As Range
    Dim ct As Integer
    Dim cht As Chart
    Dim chartObj As ChartObject
    Dim dataNum As Long
    Dim OStObj As Worksheet, stName As String, grpName As String, theLen As Integer
    Dim xrge As Range, rgeAry(1 To 2) As Range, lastTwoBgn As Range
    Dim tmpRge As Range
    Dim vmin As Double, vmax As Double, cmin As Double, cmax As Double
    Dim dx As Double
    
    On Error Resume Next
    
    'settings
    Set OStObj = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outGrp = OStObj.Range(Comm_toXlA1str(strGrpOut))
    Set hyoRge = OStObj.Range(Comm_toXlA1str(strGrpData))
    '
    On Error GoTo 0
    If outGrp Is Nothing Or hyoRge Is Nothing Then
        Exit Sub
    End If
    
    dataNum = hyoRge.Rows.Count - 1
    '
    Set xrge = hyoRge.Offset(1, 0).Range("A1:A" & dataNum)
    Set rgeAry(1) = xrge.Offset(0, 1)
    Set rgeAry(2) = xrge.Offset(0, 2)
    Set lastTwoBgn = xrge(dataNum - 1, 1)

    cmin = Application.min(xrge)
    cmax = Application.max(xrge)
    
    Set tmpRge = Union(rgeAry(1), rgeAry(2))
    vmin = Application.min(tmpRge)
    vmax = Application.max(tmpRge)
    
    '|fffd||fffd|}
    Set cht = Comm_GetTmplGrp(outGrp, ThisWorkbook.Name, "tmplTh1", "grpJukaiki2")
    If cht Is Nothing Then Exit Sub
    
    '--|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    For ct = 1 To 2
        cht.SeriesCollection(ct).Name = rgeAry(ct).Offset(-1, 0).Range("A1")
        cht.SeriesCollection(ct).XValues = xrge
        cht.SeriesCollection(ct).Values = rgeAry(ct)
    Next ct
    
    'Chart Title
    cht.chartTitle.Text = titleStr
    
    '|fffd||690||fffd||fffd||752||fffd|
    Call Comm_adjustMinMax(vmin, vmax)
    Call Comm_adjustMinMax(cmin, cmax)
    cmin = WorksheetFunction.min(cmin, vmin)
    vmin = cmin
    
    cht.Axes(xlValue).Select
    Call setJikuMinMax(vmin, vmax)
    
    cht.Axes(xlCategory).Select
    Call setJikuMinMax(cmin, cmax)
    
    'Extra data
    lastTwoBgn(1, 1) = cmin
    lastTwoBgn(2, 1) = cmax
    lastTwoBgn(1, 3) = cmin
    lastTwoBgn(2, 3) = cmax
    
    Call Comm_setChartPosSize(cht.Parent, outGrp)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    OStObj.Activate
    outGrp.Select
End Sub

Private Sub setDummyLines(ByVal cht As Chart, ByVal dMin As Double, ByVal dMax As Double)
    Dim i As Integer, a As Double
    Dim xAry(1 To 3) As Double, yAry As Variant ', labAry As Variant
    Dim srs As Series
    
    'X values
    xAry(1) = WorksheetFunction.Round(dMin - 0.005, 2)
    xAry(2) = WorksheetFunction.Round(dMin + 0.005, 2)
    xAry(3) = WorksheetFunction.Round(dMax + 0.005, 2)
    'dMin = xAry(1)
    'dMax = xAry(3)
    
    'Y values & Labels are fixed
    yAry = Array(3.0902, 2.3263, 1.6449, 1.2816, 0.6745) '0.7 -- 0.5244
    'labAry = Array(0.999, 0.99, 0.95, 0.9, 0.75, 0.5, 0.25, 0.1, 0.05, 0.01, 0.001) 'prob
    
    For i = 1 To 11
        Set srs = cht.SeriesCollection(i + 1)
        
        If i = 6 Then
            a = 0
        ElseIf i < 6 Then
            a = yAry(i - 1)
        Else
            a = -yAry(11 - i)
        End If
        
        srs.XValues = xAry()
        srs.Values = Array(a, a, a)
        
        'already set labels in template chart
        'Call setSrsLable(srs, labAry(i))
    Next i
End Sub

Function hkRank_Or_medRank(medTable As Variant, ByVal nVal As Long, ByVal iVal As Long) As Double
    Dim i As Long, id As Long
    If (nVal > 20) Then
        hkRank_Or_medRank = (1# * iVal) / (nVal + 1#)
        Exit Function
    End If
    id = 0
    For i = 1 To iVal - 1
        id = id + (21 - i)
    Next i
    id = id + (nVal - iVal)
    If (id < 0 Or id >= 210) Then
        hkRank_Or_medRank = -1
        Exit Function
    End If
    hkRank_Or_medRank = medTable(id)  '2010.06.26 mdf: medTable(id + 1)         '10.5.31 LSQ mdf; 1 based
End Function

Sub DrawJkkLogGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                                    ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim dataRge As Range, outRge As Range, wrkRge As Range
    Dim cht As Chart
    Dim SmpNum As Long
    Dim i As Long, j As Long, rownum As Long
    Dim para As Object
    Dim dblMax As Double, dblMin As Double
    Dim medTable As Variant, v As Variant 'prob_x As Variant,
    Dim tmpstr As String
    Dim xAry(1 To 3) As Double
    Dim Grgestr As String, GBkname As String, GstName As String, GrgStr As String
'   prob_x = Array(3.09, 2.326, 1.645, 1.282, 0.524, 0#, -0.524, -1.282, -1.645, -2.326, -3.09)
    medTable = Array(0.5, 0.293, 0.206, 0.159, 0.129, 0.109, 0.094, 0.083, 0.074, 0.067, 0.061, 0.056, 0.052, 0.048, 0.045, 0.042, 0.04, 0.038, 0.036, 0.034, _
       0.707, 0.5, 0.386, 0.314, 0.264, 0.228, 0.201, 0.18, 0.162, 0.148, 0.136, 0.126, 0.117, 0.109, 0.103, 0.097, 0.092, 0.087, 0.083, _
              0.794, 0.614, 0.5, 0.421, 0.364, 0.321, 0.286, 0.259, 0.236, 0.217, 0.2, 0.186, 0.174, 0.164, 0.154, 0.146, 0.138, 0.131, _
                     0.841, 0.686, 0.579, 0.5, 0.44, 0.393, 0.355, 0.324, 0.298, 0.275, 0.256, 0.239, 0.225, 0.212, 0.2, 0.19, 0.181, _
                            0.871, 0.736, 0.636, 0.56, 0.5, 0.452, 0.412, 0.379, 0.35, 0.326, 0.305, 0.286, 0.269, 0.255, 0.242, 0.23, _
                                   0.891, 0.772, 0.679, 0.607, 0.548, 0.5, 0.46, 0.425, 0.395, 0.37, 0.347, 0.327, 0.309, 0.293, 0.279, _
                                          0.906, 0.799, 0.714, 0.645, 0.588, 0.54, 0.5, 0.465, 0.435, 0.408, 0.385, 0.364, 0.645, 0.328, _
                                                 0.917, 0.82, 0.741, 0.676, 0.621, 0.575, 0.535, 0.5, 0.469, 0.442, 0.418, 0.397, 0.377, _
                                                        0.926, 0.838, 0.764, 0.702, 0.65, 0.605, 0.565, 0.531, 0.5, 0.473, 0.448, 0.426, _
                                                               0.933, 0.852, 0.783, 0.725, 0.674, 0.63, 0.592, 0.558, 0.527, 0.5, 0.475, _
                                                                       0.939, 0.864, 0.8, 0.744, 0.695, 0.653, 0.615, 0.582, 0.552, 0.525, _
                                                                              0.944, 0.874, 0.814, 0.761, 0.714, 0.673, 0.636, 0.603, 0.574, _
                                                                                     0.948, 0.883, 0.826, 0.775, 0.731, 0.691, 0.655, 0.623, _
                                                                                            0.952, 0.891, 0.836, 0.788, 0.745, 0.707, 0.672, _
                                                                                                   0.955, 0.897, 0.846, 0.8, 0.758, 0.721, _
                                                                                                          0.958, 0.903, 0.854, 0.81, 0.77, _
                                                                                                                 0.96, 0.908, 0.862, 0.819, _
                                                                                                                        0.962, 0.913, 0.869, _
                                                                                                                               0.964, 0.917, _
                                                                                                                                      0.966)
    'Setting
    On Error Resume Next
    Grgestr = "'" & strWrkSht & "'!A1"
    Set wrkst = Range(Grgestr).Worksheet
    Set wrkbk = wrkst.Parent
    Set para = Comm_SetDict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outRge = wrkst.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrkst.Range(Comm_toXlA1str(strGrpData))
    dblMax = Application.WorksheetFunction.max(dataRge)
    dblMin = Application.WorksheetFunction.min(dataRge)
    
    SmpNum = para("SmpNum")
    Set para = Nothing
   
    Set wrkRge = outRge.Range("B2") '.Worksheet.Parent.Worksheets.Add.Range("B2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    v = dataRge.Value
    wrkRge.Value = v
    Call wrkRge.Sort(Key1:=outRge.Range("B2"), Order1:=xlAscending)
    For i = 1 To SmpNum
        v(i, 1) = i
    Next i
    Set wrkRge = outRge.Range("A2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    wrkRge.Value = v
    For i = 1 To SmpNum
        v(i, 1) = hkRank_Or_medRank(medTable, SmpNum, i)
        v(i, 1) = Application.WorksheetFunction.NormSInv(v(i, 1))
    Next i
    Set wrkRge = outRge.Range("C2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    wrkRge.Value = v

    'wrkRge.Worksheet.Visible = xlSheetHidden
    tmpstr = "=" & wrkRge.Worksheet.Name & "!"
    Set wrkRge = outRge.Range("C2").Resize(SmpNum, 1)
    outRge.Worksheet.Activate
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplLog", "grpLog")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    'Set dummy lines; 10.5.31 LSQ add
    Call setDummyLines(cht, dblMin, dblMax)

    For i = 1 To 1  '10.5.31 LSQ mdf; old : 1 to 12
        cht.SeriesCollection(i).Values = tmpstr & Comm_toXlRCstr(wrkRge.Address)
        cht.SeriesCollection(i).XValues = tmpstr & Comm_toXlRCstr(outRge.Range("B2:B" & SmpNum + 1).Address)
        Set wrkRge = wrkRge.Offset(0, 1)
    Next i
   
    '
    With ActiveChart.Axes(xlCategory)
        .MinimumScale = dblMin
        .MaximumScale = dblMax
        .Crosses = xlCustom
        .CrossesAt = dblMax
    End With
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.Parent, outRge, 24, 9)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outRge.Select
    
    '10.5.31 LSQ add
    Call Comm_CutDataLink(ActiveWorkbook, gxlabkgraph)
End Sub

'|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|
'
Sub DrawJkkTenGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, ByVal strPara As String)
    Dim hyoRge As Range, outGrp As Range
    Dim cht As Chart
    Dim chartObj As ChartObject
    Dim OStObj As Worksheet

    On Error Resume Next
    
    'settings
    Set OStObj = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outGrp = OStObj.Range(Comm_toXlA1str(strGrpOut))
    Set hyoRge = OStObj.Range(Comm_toXlA1str(strGrpData))
    '
    On Error GoTo 0
    If outGrp Is Nothing Or hyoRge Is Nothing Then
        Exit Sub
    End If
    
    '|fffd||fffd|}
    Set cht = Comm_GetTmplGrp(outGrp, ThisWorkbook.Name, "tmplTh1", "grpTenGrp")
    If cht Is Nothing Then Exit Sub
    
    '--|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    Call cht.SetSourceData(hyoRge)

    Call Comm_setChartPosSize(cht.Parent, outGrp, 24, 9)
    cht.ChartArea.Select
    MatchWorkbookFont
    outGrp.Select
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
End Sub

'=== EOF ===
Attribute VB_Name = "mdlTh2Grp"
'=======================================================
' SSS|fffd||fffd||fffd||3d7||289||fffd||fffd|Ver5.5 : THR2
'
' 2007.1 PYJ
'=======================================================

Option Explicit

'Bar Graph
Sub Th2BarChart(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, ByVal strGrpData0 As String, _
        ByVal chartTitle As String, ByVal txtLen As Integer, ByVal fontSize As Integer, ByVal bSmpName As Integer, ByVal predictNum As Integer)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range
    Dim cht As Chart
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.Parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrksht.Range(Comm_toXlA1str(strGrpData))
    On Error GoTo 0
    
    If outRge Is Nothing Or dataRge Is Nothing Then
        Exit Sub
    End If
      
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplTh2", "grpBarChart")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData dataRge
    cht.chartTitle.Characters.Text = chartTitle
    cht.Axes(xlValue).AxisTitle.Characters.Text = dataRge(1, 2)
    'cht.Axes(xlCategory).AxisTitle.Characters.Text = datarge(1, 1)
        
    Call Comm_setChartPosSize(cht.Parent, outRge)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    wrksht.Activate
    outRge.Select
End Sub

'Draw Point Graph
Sub Th2PointChart(ByVal strWrkSht As String, ByVal strGrpOut As String, ByVal strGrpData As String, ByVal strGrpData0 As String, _
        ByVal chartTitle As String, ByVal txtLen As Integer, ByVal fontSize As Integer, ByVal bSmpName As Integer, ByVal predictNum As Integer)
    Dim hyoRge As Range, outGrp As Range
    Dim xrge As Range, vRge As Range, rngName As Range
    Dim grpTitle As String, vName As String, nmStr As String
    Dim cht As Chart
    Dim OStObj As Worksheet
    Dim SmpNum As Long, ct As Long, tmp As Long

    On Error Resume Next
    Set OStObj = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outGrp = OStObj.Range(Comm_toXlA1str(strGrpOut))
    Set hyoRge = OStObj.Range(Comm_toXlA1str(strGrpData))
    Set rngName = OStObj.Range(Comm_toXlA1str(strGrpData0))
    On Error GoTo 0
    If outGrp Is Nothing Or hyoRge Is Nothing Or rngName Is Nothing Then
        Exit Sub
    End If
    
    SmpNum = hyoRge.Rows.Count - 1
    Set xrge = hyoRge.Offset(1, 0).Range("A1:A" & SmpNum)   'Yoko
    Set vRge = xrge.Offset(0, 1)                            'Tate
    Set rngName = rngName.Offset(1, -1)
    vName = hyoRge(1, 2)
    
    '|fffd||fffd|}
    Set cht = Comm_GetTmplGrp(outGrp, ThisWorkbook.Name, "tmplTh2", "grpPointChart")
    If cht Is Nothing Then Exit Sub
    
    '--|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    cht.SeriesCollection(1).XValues = xrge
    cht.SeriesCollection(1).Values = vRge
    cht.SeriesCollection(1).Name = vName
    
    cht.chartTitle.Characters.Text = chartTitle
    
    'Point Name
    If bSmpName Then
        Call Comm_SetDataLabel(cht.SeriesCollection(1), rngName(1, 1), fontSize, txtLen)
    Else
        cht.ApplyDataLabels Type:=xlDataLabelsShowNone
    End If
    
    'Point mark; H14.11.15 LSQ add
    tmp = SmpNum - predictNum + 1
    If (tmp >= 1 And tmp <= SmpNum) Then
        Do While (tmp <= SmpNum)
            Call setMarkToPoint(tmp)
            tmp = tmp + 1
        Loop
    End If
    
    cht.Axes(xlValue).AxisTitle.Characters.Text = vName
    cht.Axes(xlCategory).AxisTitle.Characters.Text = xrge.Offset(-1, 0)(1, 1)
        
    Call Comm_setChartPosSize(cht.Parent, outGrp)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    OStObj.Activate
    outGrp.Select
End Sub

Private Sub setMarkToPoint(ByVal ptNo As Integer)
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).Points(ptNo).Select
    With Selection.Border
        .Weight = xlHairline
        .LineStyle = xlNone
    End With
    With Selection
        .MarkerBackgroundColorIndex = 2
        .MarkerForegroundColorIndex = 1
        .MarkerStyle = xlCircle
        .MarkerSize = 5
        .Shadow = False
    End With
End Sub

'=== EOF ===

Attribute VB_Name = "mdlTh3Grp"
'=======================================================
' SSS|fffd||fffd||fffd||3d7||289||fffd||fffd|Ver5.5 : THR3
' |fffd||fffd||fffd||289||fffd|4|fffd||fffd|
' 2007.01.20 PYJ
'=======================================================

Option Explicit

Sub DrawSr4SmpScore(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                    ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim dataRge As Range, outRge As Range, nameRge As Range
    Dim xrge As Range, yrge As Range
    Dim cht As Chart
    Dim para As Object
    Dim xaxis As String, yaxis As String
    Dim i As Integer
    Dim rownum As Long
    Dim txtLen As Long, fontSize As Long
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.Parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outRge = wrksht.Range(Comm_toXlA1str(strGrpOut))
    Set dataRge = wrksht.Range(Comm_toXlA1str(strGrpData))
    Set para = Comm_SetDict(strPara)
    On Error GoTo 0
    If outRge Is Nothing Or dataRge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
       
    Set cht = Comm_GetTmplGrp(outRge, ThisWorkbook.Name, "tmplTh3", "grpSr4SmpScore")
    If cht Is Nothing Then Exit Sub
    
    txtLen = CInt(para("txtLen"))
    fontSize = CInt(para("fontSize"))
    Set para = Nothing
    
    rownum = dataRge.Rows.Count
    
    cht.SeriesCollection(1).Name = "='" & wrksht.Name & "'!" & Comm_toXlRCstr(dataRge.Range("C1").Address)
    Set nameRge = Range(dataRge(2, 1), dataRge(rownum, 1))
    Set xrge = Range(dataRge(2, 2), dataRge(rownum, 2))
    cht.SeriesCollection(1).XValues = "='" & wrksht.Name & "'!" & Comm_toXlRCstr(xrge.Address)
    Set yrge = Range(dataRge(2, 3), dataRge(rownum, 3))
    cht.SeriesCollection(1).Values = "='" & wrksht.Name & "'!" & Comm_toXlRCstr(yrge.Address)
    
    yaxis = (dataRge(1, 2).Value)
    xaxis = (dataRge(1, 3).Value)
    cht.Axes(xlValue).HasTitle = True
    cht.Axes(xlCategory).HasTitle = True
    cht.Axes(xlValue).AxisTitle.Characters.Text = xaxis
    cht.Axes(xlCategory).AxisTitle.Characters.Text = yaxis
    cht.Axes(xlValue).AxisTitle.left = 12
    cht.Axes(xlValue).AxisTitle.top = 1
    cht.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
    
    Call Comm_SetDataLabel(cht.SeriesCollection(1), nameRge(1, 1), fontSize, txtLen)

    Call Comm_setChartPosSize(cht.Parent, outRge)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    outRge.Select
    
End Sub

' InQuest injected base64 decoded content
' jjex
' jjex
' ZrH+

INQUEST-PP=macro
