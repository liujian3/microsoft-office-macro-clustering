Attribute VB_Name = "Hoja1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function

Public Function Log_10(ByVal N|fffd|mero As Variant)
'*************Logaritmo de base 10 *******************
Log_10 = Log(N|fffd|mero) / Log(10)
End Function
Attribute VB_Name = "M|fffd|dulo1"
Sub Macro1()
Attribute Macro1.VB_Description = "Macro grabada el 21/04/2004 por Gbonett"
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
' Macro grabada el 21/04/2004 por Gbonett
'

'
    Range("C5:R16").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public Function ToCantidad(ByVal N|fffd|mero As Variant)
'************Devuelve de cantidades en n|fffd|mero, la cantidad en letras **************
    N|fffd|mero = Abs(N|fffd|mero)
    If Int(Val(Str(N|fffd|mero))) = 0 Then
        ToCantidad = "cero"
        Exit Function
    Else
        ToCantidad = ToCantidad_Int(Int(Val(Str(N|fffd|mero))))
    End If
    N|fffd|mero = Format(Val(Str(N|fffd|mero)) - Int(Val(Str(N|fffd|mero))), ".00")
    N|fffd|mero = Mid(N|fffd|mero, 2, 2)
    ToCantidad = UCase(ToCantidad & IIf(Val(N|fffd|mero) <> 0, " con " & N|fffd|mero & "/100", " solamente"))
End Function

Public Function ToCantidad_Int(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
'**** Funciona para cambiar cantidades enteras de n|fffd|mero a letras *****
Dim X_llones(10)
X_llones(0) = "mil": X_llones(1) = "millon": X_llones(2) = "billon": X_llones(3) = "trillon": X_llones(4) = "cuatrillon": X_llones(5) = "quintrillon": X_llones(6) = "sextrillon": X_llones(7) = "setrillon": X_llones(8) = "octtrillon": X_llones(9) = "novtrillon": X_llones(10) = "dectrillon"
N|fffd|mero = Val(N|fffd|mero)
If N|fffd|mero = 0 Then
    Ncomas = 0
Else
    Ncomas = Int(Val(Str(Log_10(N|fffd|mero))) / 3)   'int(3/3)=0? debe ser =1
End If
If Ncomas = 0 Then
    ToCantidad_Int = TresDigitos(N|fffd|mero)
    Exit Function
End If
MitadNum = Int(Log_10(Ncomas) / Log_10(2))
mitadAntes_Numero = Int(N|fffd|mero / (10 ^ (3 * 2 ^ MitadNum)))
MitadDespues_Numero = N|fffd|mero - mitadAntes_Numero * 10 ^ (3 * 2 ^ MitadNum)
Mitad = IIf(mitadAntes_Numero = 1 Or MitadNum = 0, X_llones(MitadNum), X_llones(MitadNum) & "es")
MitadAntes_Letras = ToCantidad_Int(mitadAntes_Numero) & " "
If MitadNum = 0 And mitadAntes_Numero = 1 Then MitadAntes_Letras = ""
MitadDespues_Letras = " " & ToCantidad_Int(MitadDespues_Numero)
ToCantidad_Int = Trim(MitadAntes_Letras & Mitad & MitadDespues_Letras)
End Function

Public Function TresDigitos(ByVal N|fffd|mero As Variant)
'************Utilizado por ToCantidad para Cambiar cantidades de n|fffd|mero a letras **************
If VarType(N|fffd|mero) <> vbString Then N|fffd|mero = Str(N|fffd|mero)  '316
N|fffd|mero = Format(Val(N|fffd|mero), "000")
TresDigitos = ""
Dim Menos_de_Veinte(20)
Menos_de_Veinte(0) = "": Menos_de_Veinte(1) = "un": Menos_de_Veinte(2) = "dos": Menos_de_Veinte(3) = "tres": Menos_de_Veinte(4) = "cuatro": Menos_de_Veinte(5) = "cinco": Menos_de_Veinte(6) = "seis": Menos_de_Veinte(7) = "siete": Menos_de_Veinte(8) = "ocho": Menos_de_Veinte(9) = "nueve": Menos_de_Veinte(10) = "diez": Menos_de_Veinte(11) = "once": Menos_de_Veinte(12) = "doce": Menos_de_Veinte(13) = "trece": Menos_de_Veinte(14) = "catorce": Menos_de_Veinte(15) = "quince": Menos_de_Veinte(16) = "diecis|fffd|is": Menos_de_Veinte(17) = "diecisiete": Menos_de_Veinte(18) = "dieciocho": Menos_de_Veinte(19) = "diecinueve": Menos_de_Veinte(20) = "veinte"
Dim Decenas(2 To 9)
Decenas(2) = "veint": Decenas(3) = "treint": Decenas(4) = "cuarent": Decenas(5) = "cincuent": Decenas(6) = "sesent": Decenas(7) = "setent": Decenas(8) = "ochent": Decenas(9) = "novent"
Dim Cientos(9)
Cientos(0) = "": Cientos(1) = "ciento": Cientos(2) = "doscientos": Cientos(3) = "trescientos": Cientos(4) = "cuatrocientos": Cientos(5) = "quinientos": Cientos(6) = "seiscientos": Cientos(7) = "setecientos": Cientos(8) = "ochocientos": Cientos(9) = "novecientos"
If Val(N|fffd|mero) = 100 Then
    TresDigitos = "cien"
    Exit Function
End If
Digito1 = Mid(N|fffd|mero, Len(N|fffd|mero) - 0, 1)  '6
Digito2 = Mid(N|fffd|mero, Len(N|fffd|mero) - 1, 1)  '1
Digito3 = Mid(N|fffd|mero, Len(N|fffd|mero) - 2, 1)  '3
TresDigitos = TresDigitos & Cientos(Val(Digito3)) & " "
If Digito3 > 0 And Val(Digito2 & Digito1) = 0 Then
    TresDigitos = Trim(TresDigitos)
    Exit Function
End If
If Val(Digito2 & Digito1) <= 20 Then
    TresDigitos = Trim(TresDigitos & Menos_de_Veinte(Val(Digito2 & Digito1)))
    Exit Function
End If
TresDigitos = TresDigitos & Decenas(Val(Digito2))
If Val(Digito1) = 0 Then
    TresDigitos = TresDigitos & "a"
Else
    TresDigitos = TresDigitos & "i" & Menos_de_Veinte(Val(Digito1))
End If
TresDigitos = Trim(TresDigitos)
End Function
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

Sheets("D|fffd|a").Select
    'ancho de plantas
    Columns("A:z").Select
    Selection.ColumnWidth = 7
    'ancho de despacho
    Columns("aa:ac").Select
    Selection.ColumnWidth = 8.5
    'ancho de columna de precios
    Columns("a:b").Select
    Selection.ColumnWidth = 11.6
    'ancho de fila
    Rows("1").Select
    Selection.RowHeight = 27
    'decimales
    Range("c5:ac50").Select
    Selection.NumberFormat = "0.00"
    Range("b5:b50").Select
    Selection.NumberFormat = "0.0000"
    
    'bordes 1
    Range("B5:B35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
    'bordes 2
    Range("z5:z35").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThick
        .ColorIndex = xlAutomatic
    End With
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
