Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "WinFaxPrintAndMerge"
'-------------------------------
' Microsoft Word 2000 Fax Macro'
'    For Talkworks PRO 3.0x    '
'      Talkworks PRO 2.0x      '
'       WinFax PRO 9.0x        '
'        May 27th, 1999
' -----------------------------'

Global PrinterName As String

Public Declare Function GetOpenFileName Lib "comdlg32.dll" Alias _
         "GetOpenFileNameA" (pOpenfilename As OPENFILENAME) As Long

Public Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long
Public Declare Function FindWindowA Lib "User32" (ByVal lpClassName As Any, ByVal lpWindowName As Any) As Integer
Public Declare Function GetPrivateProfileStringA Lib "kernel32" (ByVal lpAppName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Integer, ByVal lpFileName As String) As Integer

Public Declare Function RegOpenKey& Lib "ADVAPI32" Alias "RegOpenKeyA" (ByVal hkeyOpen&, ByVal szSubKey$, ByRef hkeyResult&)
Public Declare Function RegQueryValue& Lib "ADVAPI32" Alias "RegQueryValueExA" (ByVal hkey&, ByVal szValueName$, ByVal lReserved&, ByRef lType&, sValue As Any, ByRef lcbData&)
Public Const HCU As Long = &H80000001
Public Const HLM As Long = &H80000002

Public Type OPENFILENAME
         lStructSize As Long
         hwndOwner As Long
         hInstance As Long
         lpstrFilter As String
         lpstrCustomFilter As String
         nMaxCustFilter As Long
         nFilterIndex As Long
         lpstrFile As String
         nMaxFile As Long
         lpstrFileTitle As String
         nMaxFileTitle As Long
         lpstrInitialDir As String
         lpstrTitle As String
         flags As Long
         nFileOffset As Integer
         nFileExtension As Integer
         lpstrDefExt As String
         lCustData As Long
         lpfnHook As Long
         lpTemplateName As String
  End Type


' ** Version Information **

Public Const VER_PLATFORM_WIN32s = 0   ' Not used
Public Const VER_PLATFORM_WIN32_WINDOWS = 1  ' Win 95/98
Public Const VER_PLATFORM_WIN32_NT = 2 ' Win NT/2000
 
Type OSVERSIONINFO
         dwOSVersionInfoSize As Long
         dwMajorVersion As Long
         dwMinorVersion As Long
         dwBuildNumber As Long
         dwPlatformId As Long
         szCSDVersion As String * 128   ' Maintenance string for PSS usage.
End Type

' Define Menu bars
Public Const MenuBarPrintWinFaxBar = "&WinFax..."

' May be used for other macros, search for this menuitem
' and delete it from the menu.
Public Const MenuBarPrintWinFaxBarAlt = "Win&Fax..."

Public Const MenuBarPrintToWinFaxText = "Stampa su WinFax"

' May be used for other macros, search for this icon
' and delete it from the menu.
Public Const MenuBarPrintToWinFaxTextAlt = "Stampa su WinFax"

Public Const MenuBarMergeToWinFaxBar = "Stampa unione di Win&Fax..."

' May be used for other macros, search for this menuitem
' and delete it from the menu.
Public Const MenuBarMergeToWinFaxBarAlt = "Stampa unione di &WinFax..."

Public Const MenuBarMergeToWinFaxText = "Unione di WinFax"

' Define Control Tip text
Public Const ControlTipTextDate = "Immettere la data in formato MM/GG/AA."
Public Const ControlTipTextTime = "Immettere l'ora in formato HH.MM.SS."
Public Const ControlTipTextFaxField = "Selezionare un campo di database che contiene il numero di fax. Il numero deve contenere l'indicativo di localit|fffd|."
Public Const ControlTipTextNameField = "Selezionare il campo Nome"
Public Const ControlTipTextLastNameField = "Selezionare il campo Cognome. (facoltativo)"
Public Const ControlTipTextCompanyField = "Selezionare il campo Societ|fffd|. (facoltativo)"
Public Const ControlTipTextBillingField = "Selezionare il campo Codice di addebito. (facoltativo)"
Public Const ControlTipTextKeywordField = "Selezionare il campo Parole chiave. (facoltativo)"

Public Const ControlTipTextAdd = "Aggiungere un file di allegato di WinFax all'unione fax."
Public Const ControlTipTextRemove = "Elimina il file di allegato di WinFax."
Public Const ControlTipCoverPage = "Seleziona una copertina."
Public Const ControlTipCoverPageText = "Immettere il testo della copertina."
Public Const ControlTipDeliver = "Pianifica l'unione fax"
Public Const ControlTipResolution = "Invia l'unione fax con risoluzione Alta (200 dpi) o Standard (100 dpi)."
Public Const ControlTipSubject = "Immettere l'oggetto dell'unione fax. (facoltativo)"
Public Const ControlTipMerge = "Fare clic su questo pulsante per avviare il processo di unione."
Public Const ControlTipCancel = "Fare clic su questo pulsante per annullare l'operazione e tornare a Word."


' Define Printer References
' may require modification for International releases
Public Const PrinterDestination = "on"    ' ie: WinFax on FaxModem

Public Const NothingToPrint = "Nessun documento attivo da inviare via fax."
Public Const NotAMailMerge = "Il documento attivo non |fffd| un'origine stampa unione."
Public Const NoneText = "[Nessuno]"
Public Const ScheduleASAPText = "Appena possibile"
Public Const ScheduleDateTimeText = "In un giorno e ora specifici"
Public Const ScheduleOffPeakText = "Durante le ore a tariffa ridotta"
Public Const ScheduleHoldText = "Trattieni nella cartella In uscita"
Public Const OtherText = "[Altro...]"
Public Const QuickCoverText = "Copertina rapida"
Public Const FaxIncludesText = "L'unione fax include"
Public Const FaxMergeDocumentText = "il documento di unione fax"
Public Const FaxCoverPageText = "una copertina e"

Public Const MergeDialogTitleText = "Unione fax di WinFax"
Public Const MergeDialogToCaptionText = "Il nome si trova in:"
Public Const MergeDialogNameLastCaptionText = "I cognomi (facoltativo) si trovano in:"
Public Const MergeDialogNumberCaptionText = "I numeri di fax si trovano in:"
Public Const MergeDialogCompanyCaptionText = "Le societ|fffd| (facoltativo) si trovano in:"
Public Const MergeDialogKeywordsCaptionText = "Le parole chiave (facoltativo) si trovano in:"
Public Const MergeDialogBillingCodeCaptionText = "I codici di addebito (facoltativo) si trovano in:"

Public Const MergeDialogSubjectCaptionText = "Oggetto:"
Public Const MergeDialogDeliverCaptionText = "Consegna:"
Public Const MergeDialogCoverCaptionText = "Copertina:"
Public Const MergeDialogNoCoverText = "Unione fax senza copertina"
Public Const MergeDialogRemoveCaptionText = "Elimina"
Public Const MergeDialogOKCaptionText = "Unisci"
Public Const MergeDialogCancelCaptionText = "Annulla"
Public Const MergeDialogInsertCaptionText = "Allega"
Public Const MergeDialogAttachFileCaptionText = "File..."
Public Const MergeDialogAttachListCaptionText = "Allegati di WinFax..."

Public Const MergeDialogDateCaptionText = "Data"
Public Const MergeDialogTimeCaptionText = "Ora"

Public Const MergeDialogFrameDatabase = "Campi di stampa unione"
Public Const MergeDialogFrameSchedule = "Pianifica fax"

Public Const MergeErrorNoFaxText = " "
Public Const MergeErrorNoCoverText = " "

Public Const CheckBoxResolutionText = "Invia i fax usando la risoluzione Alta."

' Add attachments dialog box (COMDLG32.DLL)
Public Const DialogTitleAttachText = "Seleziona allegati"
Public Const sFileName1 = "File fax di WinFax (*.fx?)"
Public Const sFileName2 = "Multipagina di WinFax (*.fxm)"
Public Const sFileName3 = "Allegati di WinFax (*.fxs)"
Public Const sFileName4 = "Ricezione di WinFax (*.fxr)"
Public Const sFileName5 = "Documenti di Word (*.doc)"
Public Const sFileExt5 = "*.doc"
Public Const sFileName6 = "Documenti di testo (*.txt)"
Public Const sFileExt6 = "*.txt"
Public Const sFileName7 = "Fogli elettronici di Excel (*.xls)"
Public Const sFileExt7 = "*.xls"
Public Const sFileName8 = "File Rich Text (*.rtf)"
Public Const sFileExt8 = "*.rtf"
Public Const sFileName9 = "Documenti HTML (*.ht?)"
Public Const sFileExt9 = "*.ht?"
Public Const sFileName10 = "File di Lotus 1-2-3 (*.wk?)"
Public Const sFileExt10 = "*.wk?"
Public Const sFileName11 = "File di Quattro Pro (*.wq1)"
Public Const sFileExt11 = "*.wq1"
Public Const sFileNameAll = "Tutti i file (*.*)"
Public Const sFileExt1 = "*.fx?"
Public Const sFileExt2 = "*.fxm"
Public Const sFileExt3 = "*.fxs"
Public Const sFileExt4 = "*.fxr"
Public Const sFileExtAll = "*.*"

Public Const InstallMessage = "Macro di WinFax per Word 2000"

Public Const WindowTitle = "Macro di WinFax"

Public Const FaxErrorPrinterDriver = "Errore di reperimento informazioni della stampante dal registro. Il driver della stampante di WinFax PRO non |fffd| installato."
Public Const sErrLoading = "Errore di avvio del file WFXCTL32.EXE"
Public Const sErrReg = "Errore di reperimento percorso del file WFXCTL32.EXE dal registro."

Public Const FaxErrorNoNumber = "Selezionare un numero fax."
Public Const FaxErrorNoCoverText = "|fffd| stata selezionata una copertina, ma non |fffd| stato inserito il testo"


Sub Do_Merge()

' Check to see if Controller (wfxctl32.exe) is active, if not, start it.
Call CheckIfWinFaxIsActive

' Force one time refresh of word fields (like ASK and Date)
ActiveDocument.Fields.Update

MergeDoc = ActiveDocument.Name

' Need to determine the last record in the data source.
' set active record as the last record in datasource
ActiveDocument.MailMerge.DataSource.ActiveRecord = wdLastRecord

' Get numerical value of the last record
iLastRecord = ActiveDocument.MailMerge.DataSource.ActiveRecord

' Go back to the first record in the merge set
ActiveDocument.MailMerge.DataSource.ActiveRecord = wdFirstRecord

'Initialize WinFax Send Interface
Dim WinFaxSend As Object

frmFaxMerge.lblDataSourceCount.Caption = iLastRecord
frmFaxMerge.lblDataSourceName.Caption = ActiveDocument.MailMerge.DataSource.Name

' Repeat through each record until we reach the last record

' WORK FOR BILLING CODE
' check to see if Keywords/Billing Code is already enabled.
'sKeyValue = System.PrivateProfileString("", "HKEY_CURRENT_USER\Software\Delrina\WinFax\7.0\General", "Prompt Keywords")

lResult& = RegOpenKey&(HCU, "Software\Delrina\WinFax\7.0\General", hkeyWfx&)
lResult& = RegQueryValue&(hkeyWfx&, "Prompt Keywords", 0&, lType&, ByVal 0&, lcbValue&)
lResult& = RegQueryValue&(hkeyWfx&, "Prompt Keywords", 0&, lType&, PromptKeywords&, lcbValue&)
        
If PromptKeyword& = 0 Then
'      ' Keywords was not enabled, we need to disable it after done.
      KeywordsBillCode = False
Else
'       ' Keywords is enabled.  No need to disable it after done.
      KeywordsBillCode = True
End If

For Count = 1 To iLastRecord

    Documents(MergeDoc).Activate
    
    Set WinFaxSend = CreateObject("WinFax.SDKSend8.0")
    WinFaxSend.SetClientID ("Client Name")
    
    ' If there is a field to use for recipient name, set the name
    ' set First Name / First & last name only.
    If frmFaxMerge.comboTo.ListIndex > 0 And frmFaxMerge.comboLastName.ListIndex < 1 Then
        sdk_ret = WinFaxSend.SetTo(ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboTo.ListIndex).Value)
    End If
    
    ' If there is a field to use the Last name & First name, then use both
    If frmFaxMerge.comboTo.ListIndex > 0 And frmFaxMerge.comboLastName.ListIndex > 0 Then
        sFullName = ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboTo.ListIndex).Value + " " + ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboLastName.ListIndex).Value
        sdk_ret = WinFaxSend.SetTo(sFullName)
    End If
    
    ' Set recipient fax number
    sdk_ret = WinFaxSend.SetNumber(ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboFaxNumber.ListIndex + 1).Value)
    
    ' If there is a field to use for recipient company name, set the company name
    If frmFaxMerge.comboCompany.ListIndex > 0 Then
        sdk_ret = WinFaxSend.SetCompany(ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboCompany.ListIndex).Value)
    End If
    
    ' WORK need to determine if keywords was already on.
    ' or else this method turns it on in WinFax
    ' check registry for value.
    If frmFaxMerge.comboKeywords.ListIndex > 0 Or frmFaxMerge.comboBillingCode.ListIndex > 0 Then
       sdk_ret = WinFaxSend.EnableBillingCodeKeyWords(1)
    End If
    
    ' If there is a field to use for Keywords, set the keywords
    If frmFaxMerge.comboKeywords.ListIndex > 0 Then
       sdk_ret = WinFaxSend.SetKeywords(ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboKeywords.ListIndex).Value)
    End If
    
    ' If there is a field to use for Billing Code, set the Billing Code
    If frmFaxMerge.comboBillingCode.ListIndex > 0 Then
       sdk_ret = WinFaxSend.SetBillingCode(ActiveDocument.MailMerge.DataSource.DataFields.Item(frmFaxMerge.comboBillingCode.ListIndex).Value)
    End If
  
    ' Check to see if FINE/HIGH resolution is selected.
    ' 0 for standard, 1 for fine.  1 is default value.
    If frmFaxMerge.CheckBoxResolution.Value = False Then
       sdk_ret = WinFaxSend.SetResolution(0)
    Else
       sdk_ret = WinFaxSend.SetResolution(1)
    End If
            
    
    ' if attachments were added, we need to attach.
    If frmFaxMerge.ListBoxAttach.ListCount > 0 Then
        For I = 0 To frmFaxMerge.ListBoxAttach.ListCount - 1
          sdk_ret = WinFaxSend.AddAttachmentFile(frmFaxMerge.ListBoxAttach.List(I))
        Next I
    End If
        
    ' Set subject line
    If frmFaxMerge.txtSubject.Text <> "" Then
      sdk_ret = WinFaxSend.SetSubject(frmFaxMerge.txtSubject.Text)
    End If
    
    ' Set scheduling options for the fax
    If frmFaxMerge.comboSchedule.ListIndex = 1 Then
        sdk_ret = WinFaxSend.SetDate(Format$(frmFaxMerge.txtDate, "MM/DD/YY"))
        sdk_ret = WinFaxSend.SetTime(Format$(frmFaxMerge.txtTime, "HH:MM:SS"))
    ElseIf frmFaxMerge.comboSchedule.ListIndex = 2 Then
        sdk_ret = WinFaxSend.SetOffPeak(1)
    ElseIf frmFaxMerge.comboSchedule.ListIndex = 3 Then
        sdk_ret = WinFaxSend.SetHold(1)
    End If
    
    ' Set fax to low priority
    ' sdk_ret = WinFaxSend.SetPriority(3)
    
    ' If there is one, set the right type of cover page and related text
    'WORK -- what about cover pages with no text box?
    If frmFaxMerge.comboCoverPage.ListIndex = 1 Then
        sdk_ret = WinFaxSend.SetUseCover(1)
        sdk_ret = WinFaxSend.SetQuickCover(1)
        sdk_ret = WinFaxSend.SetCoverText(frmFaxMerge.txtCoverText.Text)
    ElseIf frmFaxMerge.comboCoverPage.ListIndex > 1 Then
        sdk_ret = WinFaxSend.SetUseCover(1)
        sdk_ret = WinFaxSend.SetCoverPage(frmFaxMerge.comboCoverPage.ListIndex - 1)
        sdk_ret = WinFaxSend.SetCoverText(frmFaxMerge.txtCoverText.Text)
    End If
    
    sdk_ret = WinFaxSend.AddRecipient()
    
    sdk_ret = WinFaxSend.SetPrintFromApp(1)
    sdk_ret = WinFaxSend.ShowSendScreen(0)
    sdk_ret = WinFaxSend.Send(1)
       
    Do While WinFaxSend.IsReadyToPrint = 0
         DoEvents
         Debug.Print "Waiting for printer"
    Loop
    
    ' Make the merge document the active document.
    Documents(MergeDoc).Activate
        
     ' merge one document to a new document, then print this single document to WinFax
    ActiveDocument.MailMerge.DataSource.FirstRecord = ActiveDocument.MailMerge.DataSource.ActiveRecord
    ActiveDocument.MailMerge.DataSource.LastRecord = ActiveDocument.MailMerge.DataSource.ActiveRecord
    ActiveDocument.MailMerge.Destination = wdSendToNewDocument
    ActiveDocument.MailMerge.Execute
   
    ' Print the document
    ActiveDocument.PrintOut Background:=False
    ActiveDocument.Close savechanges:=wdDoNotSaveChanges
    
     ' Make the merge document the active document.
    Documents(MergeDoc).Activate
    
    ' Move to next record
    ActiveDocument.MailMerge.DataSource.ActiveRecord = wdNextRecord
     
    ' Wait until the EntryID is ready before moving on.
    Do While WinFaxSend.IsEntryIDReady(0) <> 1
      DoEvents
      Debug.Print WinFaxSend.IsEntryIDReady(0)
    Loop
    
    Set WinFaxSend = Nothing
    
Next Count

   

End Sub
Sub AutoExec()

' For Reference only, see defines in Delcarations
' MenuBarPrintWinFaxBar = "Win&Fax..."
' MenuBarPrintToWinFaxText = "Print to WinFax"
' MenuBarMergeToWinFaxBar = "Win&Fax Merge..."
' MenuBarMergeToWinFaxText = "WinFax Merge"

' Check to see if "WinFax" is on the file menu, and if so, delete it
Max = CommandBars("File").Controls.Count
Count = 1
Do While Count <= Max

    If CommandBars("File").Controls(Count).Caption = MenuBarPrintWinFaxBar Then
        CommandBars("File").Controls(MenuBarPrintWinFaxBar).Delete
        Max = Max - 1
        Count = Count - 1
    End If
    
    If CommandBars("File").Controls(Count).Caption = MenuBarPrintWinFaxBarAlt Then
        CommandBars("File").Controls(MenuBarPrintWinFaxBarAlt).Delete
        Max = Max - 1
        Count = Count - 1
    End If
        
    Count = Count + 1
Loop

' Add WinFax to the File Menu before the Print option
Set filemenu = CommandBars("File")
Set winfaxmenu = filemenu.Controls.Add(Before:="10")
    winfaxmenu.Caption = MenuBarPrintWinFaxBar
    winfaxmenu.FaceId = 1707
    winfaxmenu.OnAction = "Print_to_WinFax"

' Check to see if there is a WinFax button on the standard toolbar and remove it
Max = CommandBars("Standard").Controls.Count
Count = 1
Do While Count <= Max
    

    If CommandBars("Standard").Controls(Count).Caption = MenuBarPrintToWinFaxText Then
        CommandBars("Standard").Controls(MenuBarPrintToWinFaxText).Delete
        Max = Max - 1
        Count = Count - 1
    End If
    
    If CommandBars("Standard").Controls(Count).Caption = MenuBarPrintToWinFaxTextAlt Then
        CommandBars("Standard").Controls(MenuBarPrintToWinFaxTextAlt).Delete
        Max = Max - 1
        Count = Count - 1
    End If
    
    Count = Count + 1
Loop

' Add a Print to WinFax button on the Standard Toolbar after the print button
Set standardBar = CommandBars("Standard")
    standardBar.Visible = True
Set winfaxBtn = standardBar.Controls.Add(Before:=5)
    winfaxBtn.FaceId = 1707
    winfaxBtn.Caption = MenuBarPrintToWinFaxText
    winfaxBtn.OnAction = "Print_to_WinFax"
    
' Check to see if "WinFax Merge" is on the tools menu, and if so, delete it
Max = CommandBars("Tools").Controls.Count
Count = 1
Do While Count <= Max
    
    If CommandBars("Tools").Controls(Count).Caption = MenuBarMergeToWinFaxBar Then
        CommandBars("Tools").Controls(MenuBarMergeToWinFaxBar).Delete
        Max = Max - 1
        Count = Count - 1
    End If
    
    If CommandBars("Tools").Controls(Count).Caption = MenuBarMergeToWinFaxBarAlt Then
        CommandBars("Tools").Controls(MenuBarMergeToWinFaxBarAlt).Delete
        Max = Max - 1
        Count = Count - 1
    End If
        
    Count = Count + 1
Loop

' Add a "WinFax Merge" on the tools menu,
Set filemenu = CommandBars("Tools")
Set winfaxmenu = filemenu.Controls.Add(Before:="12")
    winfaxmenu.Caption = MenuBarMergeToWinFaxBar
    winfaxmenu.FaceId = 1707
    winfaxmenu.OnAction = "Merge_to_WinFax"

' Check to see if there is a Merge to WinFax button on the Mail Merge toolbar and remove it
'Max = CommandBars("Mail Merge").Controls.Count
'Count = 1
'Do While Count <= Max
'    If CommandBars("Mail Merge").Controls(Count).Caption = "WinFax Merge" Then
'        CommandBars("Mail Merge").Controls("WinFax Merge").Delete
'        Max = Max - 1
'    End If
'    Count = Count + 1
'Loop

' Add a Merge to WinFax button on the MailMerge Toolbar after the Merge to Printer button
'Set mergeBar = CommandBars("Mail Merge")
'    mergeBar.Visible = True
'Set winfaxBtn = mergeBar.Controls.Add(Before:=20)
'    winfaxBtn.FaceId = 1707
'    winfaxBtn.Caption = "Merge to WinFax"
'    winfaxBtn.OnAction = "Merge_to_WinFax"

End Sub
Sub AutoExit()
  
  On Error GoTo ErrorHandler
  
  ' Remove WinFax from File menu (as added in Auto_Open)
  CommandBars("File").Controls(MenuBarPrintWinFaxBar).Delete

  ' Remove WinFax from the TOOLS menu (as added in Auto_Open)
  CommandBars("Tools").Controls(MenuBarMergeToWinFaxBar).Delete
  
  ' Remove WinFax button from Standard Toolbar (as added in Auto_Open)
  CommandBars("Standard").Controls(MenuBarPrintToWinFaxText).Delete

  ' Remove WinFax button from Mail Merge Toolbar (as added in Auto_Open)
  CommandBars("Standard").Controls(MenuBarMergeToWinFaxText).Delete

ErrorHandler:
  Exit Sub

End Sub
Function SysVersions32()
    ' Function determines Windows NT/2000 or 98/95

    Dim v As OSVERSIONINFO, retval As Long
    Dim WindowsVersion As String, BuildVersion As String
    Dim PlatformName As String
          
    v.dwOSVersionInfoSize = Len(v)
    retval = GetVersionEx(v)
    
    WindowsVersion = v.dwMajorVersion & "." & v.dwMinorVersion
    BuildVersion = v.dwBuildNumber And &HFFFF&
 
    Select Case v.dwPlatformId
        Case VER_PLATFORM_WIN32_WINDOWS
            PlatformName = "Windows 95/98"
        Case VER_PLATFORM_WIN32_NT
            PlatformName = "Windows NT/2000"
    End Select
         
    'Return the Platform ID number
    SysVersions32 = v.dwPlatformId
    
End Function

Function GetWfxPort$()
    On Error GoTo ErrHandler
    Dim Version
    
    
    Version = SysVersions32()
    
    'If the Version is Windows 95/98 get reg entry from one location, if it is Windows NT
    'get the key from another location
  
    If Version = 1 Then
        wfxPort$ = Space(256)
        lResult& = RegOpenKey&(HLM, "System\CurrentControlSet\Control\Print\Printers\WinFax", hkeyWfx&)
        lResult& = RegQueryValue&(hkeyWfx&, "Port", 0&, lType&, ByVal 0&, lcbValue&)
        lResult& = RegQueryValue&(hkeyWfx&, "Port", 0&, lType&, ByVal wfxPort$, lcbValue&)
        wfxPort$ = Left$(wfxPort$, lcbValue& - 1)
        GetWfxPort$ = wfxPort$
    Else
        ' Windows NT/2000
        wfxPort$ = Space(256)
        lResult& = RegOpenKey&(HCU, "Software\Microsoft\Windows NT\CurrentVersion\Devices", hkeyWfx&)
        lResult& = RegQueryValue&(hkeyWfx&, PrinterName, 0&, lType&, ByVal 0&, lcbValue&)
        lResult& = RegQueryValue&(hkeyWfx&, PrinterName, 0&, lType&, ByVal wfxPort$, lcbValue&)
        wfxPort$ = Left$(wfxPort$, lcbValue& - 1)
        ' WfxPort$ = Right$(WfxPort$, 5)
        Position = InStr(1, wfxPort$, ",")
        wfxPort$ = Mid$(wfxPort$, Position + 1, Len(wfxPort$))
        GetWfxPort$ = wfxPort$
    End If

    Exit Function

ErrHandler:

    'If the WinFax Printer entry is not found Stop
    ' the Macro and inform the user to
    ' re-install the printer driver
    
    MsgBox FaxErrorPrinterDriver, , WindowTitle
    
    End

End Function

Public Sub CheckIfWinFaxIsActive()
    
     On Error GoTo ErrLoading
     ' check for controller active
     If FindWindowA("cFaxMng", 0&) = 0 Then
                
        WfxPath$ = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\Software\Delrina\WinFax\7.0\WinFax", "ExePath") + "wfxctl32.exe"
    
       
        x = Shell(WfxPath$, 6)
  
    End If

ErrLoading:
     If Err <> 0 Then
       
       ErrMsg = sErrLoading & Chr$(13)
       
       If WfxPath$ = "" Then
         ErrMsg = ErrMsg & sErrReg & Chr$(13)
       Else
         ErrMsg = ErrMsg & WfxPath$ & Chr$(13)
       End If
       
       ErrMsg = ErrMsg & Chr$(13) & Err.Number & " - " & Err.Description
       
       MsgBox ErrMsg, , WindowTitle
       
       End
     
     End If
End Sub

Sub Print_to_WinFax()
Attribute Print_to_WinFax.VB_Description = "Macro created 01/20/99 by Catherine Murphy"
Attribute Print_to_WinFax.VB_ProcData.VB_Invoke_Func = "TemplateProject.NewMacros.Print_to_WinFax"

' Check to see if any documents are active
If Windows.Count <= 0 Then
    MsgBox NothingToPrint, , WindowTitle
    Exit Sub
End If

Call CheckIfWinFaxIsActive

' Store Current Printer
OldPrinter = Application.ActivePrinter

' Store "Use Printer Metrics" settings
OldUsePrinterMetricsSetting = ActiveDocument.Compatibility(wdUsePrinterMetrics)

' Set "Use Printer Metrics" settings
ActiveDocument.Compatibility(wdUsePrinterMetrics) = True

Call Switch_PrinterDriver

' Print the document
ActiveDocument.PrintOut Background:=False

' Restore "Use Printer Metrics" setting
ActiveDocument.Compatibility(wdUsePrinterMetrics) = OldUsePrinterMetricsSetting

' Restore Original Printer
Application.ActivePrinter = OldPrinter

End Sub

Sub Switch_PrinterDriver()


' Set "ClearFax", "DelFax", or "WinFax" as active Printer
If System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\ClearFax", "Name") <> "" Then
    PrinterName = "ClearFax"
'    PrinterPort = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\ClearFax", "Port")
ElseIf System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\DelFax", "Name") <> "" Then
    PrinterName = "DelFax"
'    PrinterPort = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\DelFax", "Port")
ElseIf System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\WinFax", "Name") <> "" Then
    PrinterName = "WinFax"
'    PrinterPort = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\System\CurrentControlSet\control\Print\Printers\WinFax", "Port")
End If

' Get the port name. This may vary for Windows NT, 95/98 and 2000
wfxPort = GetWfxPort()

' PrinterDestination "on" for English
' ie: WinFax on FaxModem
Application.ActivePrinter = PrinterName + " " + PrinterDestination + " " + wfxPort

End Sub

Sub Merge_to_WinFax()


' Check to see if any documents are active
If Windows.Count <= 0 Then
    MsgBox NothingToPrint, , WindowTitle
    Exit Sub
End If

'Check to see if ActiveDocument is a MailMerge
If ActiveDocument.MailMerge.MainDocumentType = wdNotAMergeDocument Then
    MsgBox NotAMailMerge, , WindowTitle
        
    Application.Dialogs(wdDialogMailMergeHelper).Show
        
    Exit Sub
End If


' Open the Merge Dialog (which executes merge and print on OK)
frmFaxMerge.Show


End Sub

Function Parse_Filenames(sFileName)
       
  ' Used to parse the filenames obtained from the Common Control Filebox
  ' format
  '
  '  path\<null>filename<null>filename2<null>filename3<null> etc.
  '  path\filename<null><null><null> (for one file only)
    
   Dim MyString As String
   Dim Path As String
   Dim FileName As String
   Dim I As Integer, J As Integer
   Dim s As String
   ReDim filearray(1) As String
   
   MyString = Trim(sFileName)
       
   
   
   ' NULL
   s = Chr(0)

   Debug.Print MyString
   
   If InStr(1, MyString, s) > 0 Then
        
        If (InStr(MyString, "\") + 1) = InStr(MyString, s) Then
            Path = Trim(Left$(MyString, InStr(1, MyString, s) - 1))
        Else
            Path = Trim(Left$(MyString, InStr(1, MyString, s) - 1)) & "\"
        End If
            
               FileName = Right$(MyString, Len(MyString) _
                   - InStr(1, MyString, s))
               MyString = FileName
                             
              
               
               J = 0

               For I = 1 To Len(FileName)
                   If Mid$(FileName, I, 1) = s Then
                       J = J + 1
                   End If
               Next
               J = J + 1
               
               ReDim filearray(1 To J) As String
               For I = 1 To UBound(filearray)
                   If I < UBound(filearray) Then
                      FileName = Trim(Left$(MyString, InStr(1, MyString, _
                         s) - 1))
                      MyString = Trim(Right$(MyString, Len(MyString) _
                          - InStr(1, MyString, s)))
                   Else
                       FileName = MyString
                   
                   End If
                   
                   filearray(I) = FileName
                   
                   ' Add the Filename & path to listbox
                   'If FileName <> "" Then
                   '    frmFaxMerge.ListBoxAttach.AddItem Path & FileName
                   'End If
               
                   
               Next
     
     
     Else
               For I = 1 To Len(MyString)
                  If Mid$(MyString, I, 1) = "\" Then
                      Path = Left$(MyString, I)
                      FileName = Right$(MyString, Len(MyString) - I)
                  End If
               Next
 
              ' Add the Filename & path to listbox
              '    If FileName <> "" Then
              '       frmFaxMerge.ListBoxAttach.AddItem Path & FileName
              '   End If
               
             
              filearray(UBound(filearray)) = FileName
               
     End If
           
 
        
                 
                 AttachedMulti = False
                 
                 For I = 1 To UBound(filearray)
                   If filearray(I) <> "" Then
                      frmFaxMerge.ListBoxAttach.AddItem Path & filearray(I)
                      AttachedMulti = True
                   End If
                 Next I
                 
                 ' only one file was selected.
                 If AttachedMulti = False Then
                      frmFaxMerge.ListBoxAttach.AddItem sFileName
                 End If
                 
           
          ReDim filearray(1) As String

SampleFiles_Exit_Sub:
           Exit Function

SampleFiles_Err:
           If Err.Number <> cdlCancel Then MsgBox Err.Description
           Resume SampleFiles_Exit_Sub


End Function
Sub AddIn_Install()
   
    ' Not Implemented
    
   ' This function will activate the template under
   ' tools, add-ins
   
   
End Sub
Function VerifyDateAndTime()

    ' RETURN CODES
    ' 0 for no error
    ' 1 for date only error
    ' 2 for time only error
    ' 3 for time & date error
    
    VerifyDateAndTime = 0
    If frmFaxMerge.txtDate.Text <> "MM/DD/YYYY" Or frmFaxMerge.txtDate.Text <> "DD/MM/YYYY" Then
      MsgBox "Enter proper date format of MM/DD/YYYY or DD/MM/YYYY"
      frmFaxMerge.txtDate.Text = ""
      VerifyDateAndTime = 1
    End If
    If frmFaxMerge.txtTime.Text <> "HH:MM" Or frmFaxMerge.txtTime.Text <> "HH:MM:SS" Then
      MsgBox "Enter proper time format of HH:MM or HH:MM:SS"
      frmFaxMerge.txtTime.Text = ""
      VerifyDateAndTime = VerifyDateAndTime + 2
    End If
    
End Function
Attribute VB_Name = "frmFaxMerge"
Attribute VB_Base = "0{E3C9A1AF-5D98-4DC9-9ACD-96AA4AEFF266}{A5CD3499-847A-4100-8D2D-DC66A92D814B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub btnCancel_Click()
     
   frmFaxMerge.Hide
   End
   
End Sub

Private Sub btnInsert_Click()
   
   btnInsert.Enabled = False
   
   Dim OpenFile As OPENFILENAME
   Dim lReturn As Long
   Dim sFilter As String
          
   OpenFile.lStructSize = Len(OpenFile)
 '  OpenFile.hwndOwner = Form1.hWnd
 '  OpenFile.hInstance = App.hInstance
     
   sFilter = sFileName1 & Chr(0) & sFileExt1 & Chr(0) & sFileName2 & Chr(0) & sFileExt2 _
   & Chr(0) & sFileName3 & Chr(0) & sFileExt3 & Chr(0) & sFileName4 & Chr(0) & sFileExt4 _
   & Chr(0) & sFileName5 & Chr(0) & sFileExt5 & Chr(0) & sFileName6 & Chr(0) & sFileExt6 _
   & Chr(0) & sFileName7 & Chr(0) & sFileExt7 & Chr(0) & sFileName8 & Chr(0) & sFileExt8 _
   & Chr(0) & sFileName9 & Chr(0) & sFileExt9 & Chr(0) & sFileName10 & Chr(0) & sFileExt10 _
   & Chr(0) & sFileName11 & Chr(0) & sFileExt11 & Chr(0) & sFileNameAll & Chr(0) & sFileExtAll
   
   OpenFile.lpstrFilter = sFilter
   OpenFile.nFilterIndex = 1
   OpenFile.lpstrFile = String(1500, 0)
   OpenFile.nMaxFile = Len(OpenFile.lpstrFile) - 1
   OpenFile.lpstrFileTitle = OpenFile.lpstrFile
   OpenFile.nMaxFileTitle = OpenFile.nMaxFile
   FaxPath$ = System.PrivateProfileString("", "HKEY_LOCAL_MACHINE\Software\Delrina\WinFax\7.0\WinFax", "Fax Path")
   OpenFile.lpstrInitialDir = FaxPath$
   OpenFile.lpstrTitle = DialogTitleAttachText
   OpenFile.flags = &H200 + &H80000 + &H1000 + &H4 + &H200000
   
   ' &H200 - MultiSelect
   ' H80000 - Explorer
   
   'cdlOFNHideReadOnly + cdlOFNFileMustExist _
 ' + cdlOFNNoChangeDir + cdlOFNPathMustExist + cdlOFNLongNames _
 ' + cdlOFNAllowMultiselect _
 ' + cdlOFNExplorer
   
   lReturn = GetOpenFileName(OpenFile)
   
   If lReturn <> 0 Then
      Call Parse_Filenames(OpenFile.lpstrFile)
   End If
   
   btnInsert.Enabled = True
      

'  CommonDialog1.Flags = cdlOFNHideReadOnly + cdlOFNFileMustExist _
'  + cdlOFNNoChangeDir + cdlOFNPathMustExist + cdlOFNLongNames _
'  + cdlOFNAllowMultiselect _
'  + cdlOFNExplorer
  

  
 
End Sub

Private Sub btnOK_Click()
    OK_to_Merge = True
    
    
   ' ret = VerifyDateAndTime()
    
   ' If ret <> 0 Then
   '    OK_to_Merge = False
   ' End If
    
    ' Confirm that a field has been selected for "Fax Number"
    If comboFaxNumber.ListIndex = -1 Then
        ''MsgBox "You must select a fax number"
        MsgBox FaxErrorNoNumber, , WindowTitle
        OK_to_Merge = False
    End If
    
    ' Confirm that, if you've selected a cover page, you've entered some cover text
    If comboCoverPage.ListIndex > 0 And Len(Trim(txtCoverText.Text)) < 1 Then
        'WORK -- what about covers with no fill box?
        'WORK -- move string to top
        ' MsgBox "You have selected a coverpage, but have not filled in the text"
        MsgBox FaxErrorNoCoverText, , WindowTitle
        OK_to_Merge = False
    End If
    
    ' Hide form then run "Do_Merge" function to actually merge&fax
    If OK_to_Merge Then
        frmFaxMerge.Hide
        
        ' Store Current Printer
        OldPrinter = Application.ActivePrinter
 
        ' Store "Use Printer Metrics" settings
        OldUsePrinterMetricsSetting = ActiveDocument.Compatibility(wdUsePrinterMetrics)

        ' Set "Use Printer Metrics" settings
        ActiveDocument.Compatibility(wdUsePrinterMetrics) = True
        
        Call Switch_PrinterDriver
        
        Call Do_Merge
        
        ' Restore "Use Printer Metrics" setting
        ActiveDocument.Compatibility(wdUsePrinterMetrics) = OldUsePrinterMetricsSetting

       ' Restore Original Printer
        Application.ActivePrinter = OldPrinter
    
    End If
End Sub

Private Sub btnRemove_Click()
    
   If frmFaxMerge.ListBoxAttach.ListCount >= 1 Then
           Index = 0
   
         Do While Index < frmFaxMerge.ListBoxAttach.ListCount
                      
           If frmFaxMerge.ListBoxAttach.Selected(Index) = True Then
              
              frmFaxMerge.ListBoxAttach.RemoveItem (Index)
              
              ' set index to -1 to reset Index to 0
              Index = -1
                           
           End If
           
           Index = Index + 1
         
         Loop
         
   End If
   
   frmFaxMerge.btnRemove.Enabled = False
     
End Sub

Private Sub comboCoverPage_Change()

' If no cover page is selected, hide the cover fill in, and show "no cover" label
'WORK -- what about covers with no fill box?
If comboCoverPage.ListIndex = 0 Then
    txtCoverText.Visible = False
    lblNoCover.Visible = True
    lblFaxSummary.Caption = FaxIncludesText + " " + FaxMergeDocumentText
Else
    txtCoverText.Visible = True
    lblNoCover.Visible = False
    lblFaxSummary.Caption = FaxIncludesText + " " + FaxCoverPageText + " " + FaxMergeDocumentText
End If

End Sub



Private Sub comboSchedule_Change()
' If schedule for a specific date and time, enable date/time fields
If comboSchedule.ListIndex = 1 Then
    txtDate.Enabled = True
    txtTime.Enabled = True
    lblDate.Enabled = True
    lblTime.Enabled = True
    
Else
    txtDate.Enabled = False
    txtTime.Enabled = False
    lblTime.Enabled = False
    lblDate.Enabled = False
   
End If
End Sub



Private Sub ListBoxAttach_Change()
    
   SelectedEntry = False
   For Index = 0 To frmFaxMerge.ListBoxAttach.ListCount - 1
      If frmFaxMerge.ListBoxAttach.Selected(Index) = True Then
           SelectedEntry = True
      End If
   Next
   frmFaxMerge.btnRemove.Enabled = SelectedEntry
   
   
   
End Sub

Private Sub UserForm_Activate()

' clear and the load the combo boxes
comboTo.Clear
comboFaxNumber.Clear
comboCompany.Clear
comboLastName.Clear
comboKeywords.Clear
comboBillingCode.Clear
frmFaxMerge.ListBoxAttach.Clear
frmFaxMerge.btnRemove.Enabled = False


' frame titles

frmFaxMerge.frameDatabase.Caption = MergeDialogFrameDatabase
frmFaxMerge.frameSchedule.Caption = MergeDialogFrameSchedule


' ControlTip Help Text

frmFaxMerge.txtCoverText.ControlTipText = ControlTipCoverPageText

frmFaxMerge.CheckBoxResolution.ControlTipText = ControlTipResolution

frmFaxMerge.comboLastName.ControlTipText = ControlTipTextLastNameField
frmFaxMerge.lblNameLast.ControlTipText = ControlTipTextLastNameField

frmFaxMerge.lblSubject.ControlTipText = ControlTipSubject
frmFaxMerge.txtSubject.ControlTipText = ControlTipSubject

frmFaxMerge.btnInsert.ControlTipText = ControlTipTextAdd
frmFaxMerge.btnRemove.ControlTipText = ControlTipTextRemove
frmFaxMerge.ListBoxAttach.ControlTipText = ControlTipTextRemove

frmFaxMerge.comboTo.ControlTipText = ControlTipTextNameField
frmFaxMerge.lblTo.ControlTipText = ControlTipTextNameField

frmFaxMerge.comboFaxNumber.ControlTipText = ControlTipTextFaxField
frmFaxMerge.lblFaxNumber.ControlTipText = ControlTipTextFaxField

frmFaxMerge.lblDate.ControlTipText = ControlTipTextDate
frmFaxMerge.txtDate.ControlTipText = ControlTipTextDate

frmFaxMerge.lblTime.ControlTipText = ControlTipTextTime
frmFaxMerge.txtTime.ControlTipText = ControlTipTextTime

frmFaxMerge.comboCompany.ControlTipText = ControlTipTextCompanyField
frmFaxMerge.lblCompany.ControlTipText = ControlTipTextCompanyField

frmFaxMerge.comboCoverPage.ControlTipText = ControlTipCoverPage
frmFaxMerge.lblCoverPage.ControlTipText = ControlTipCoverPage

frmFaxMerge.lblBillingCode.ControlTipText = ControlTipTextBillingField
frmFaxMerge.comboBillingCode.ControlTipText = ControlTipTextBillingField

frmFaxMerge.btnOK.ControlTipText = ControlTipMerge
frmFaxMerge.btnCancel.ControlTipText = ControlTipCancel

frmFaxMerge.comboSchedule.ControlTipText = ControlTipDeliver
frmFaxMerge.lblSchedule.ControlTipText = ControlTipDeliver

frmFaxMerge.comboKeywords.ControlTipText = ControlTipTextKeywordField
frmFaxMerge.lblKeywords.ControlTipText = ControlTipTextKeywordField


' Populate To, Fax Number and Company combo boxes with field names
' Keywords, billingcode and last name combo boxes
comboTo.AddItem (NoneText)
comboCompany.AddItem (NoneText)
comboLastName.AddItem (NoneText)
comboKeywords.AddItem (NoneText)
comboBillingCode.AddItem (NoneText)

For I = 1 To ActiveDocument.MailMerge.DataSource.DataFields.Count
    comboTo.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboFaxNumber.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboCompany.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)

    comboLastName.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboKeywords.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboBillingCode.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)

Next I

comboLastName.ListIndex = 0
comboKeywords.ListIndex = 0
comboBillingCode.ListIndex = 0
comboCompany.ListIndex = 0

End Sub

Private Sub UserForm_Initialize()

Call CheckIfWinFaxIsActive

' Set Text Strings
frmFaxMerge.Caption = MergeDialogTitleText
frmFaxMerge.lblTo.Caption = MergeDialogToCaptionText
frmFaxMerge.lblFaxNumber.Caption = MergeDialogNumberCaptionText
frmFaxMerge.lblCompany.Caption = MergeDialogCompanyCaptionText

frmFaxMerge.lblBillingCode.Caption = MergeDialogBillingCodeCaptionText
frmFaxMerge.lblKeywords.Caption = MergeDialogKeywordsCaptionText
frmFaxMerge.lblNameLast.Caption = MergeDialogNameLastCaptionText

frmFaxMerge.lblSubject.Caption = MergeDialogSubjectCaptionText
frmFaxMerge.lblSchedule.Caption = MergeDialogDeliverCaptionText
frmFaxMerge.lblCoverPage.Caption = MergeDialogCoverCaptionText
frmFaxMerge.lblNoCover.Caption = MergeDialogNoCoverText
frmFaxMerge.btnOK.Caption = MergeDialogOKCaptionText
frmFaxMerge.btnCancel.Caption = MergeDialogCancelCaptionText
frmFaxMerge.btnInsert.Caption = MergeDialogInsertCaptionText
frmFaxMerge.btnRemove.Caption = MergeDialogRemoveCaptionText
frmFaxMerge.lblFaxSummary.Caption = FaxIncludesText + " " + FaxMergeDocumentText

frmFaxMerge.CheckBoxResolution.Caption = CheckBoxResolutionText
frmFaxMerge.CheckBoxResolution.Value = True


frmFaxMerge.lblDate.Caption = MergeDialogDateCaptionText
frmFaxMerge.lblTime.Caption = MergeDialogTimeCaptionText

frmFaxMerge.txtTime.Text = Format$(Time$, "HH:MM:SS")
frmFaxMerge.txtDate.Text = Date$

frmFaxMerge.lblDataSourceCount.Caption = ""
frmFaxMerge.lblDataSourceName.Caption = ""

' Position "No Cover" Label
lblNoCover.Left = txtCoverText.Left
lblNoCover.Width = txtCoverText.Width
lblNoCover.Top = txtCoverText.Top
lblNoCover.Height = txtCoverText.Height

' Position Summary Label
lblFaxSummary.Left = txtCoverText.Left
lblFaxSummary.Width = txtCoverText.Width

' Populate To, Fax Number and Company combo boxes with field names
comboTo.AddItem (NoneText)
comboCompany.AddItem (NoneText)
comboLastName.AddItem (NoneText)
comboKeywords.AddItem (NoneText)
comboBillingCode.AddItem (NoneText)

For I = 1 To ActiveDocument.MailMerge.DataSource.DataFields.Count
    comboTo.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboFaxNumber.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboCompany.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)

    comboLastName.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboKeywords.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)
    comboBillingCode.AddItem (ActiveDocument.MailMerge.DataSource.FieldNames.Item(I).Name)

Next I

' Populate Schedule combo box
comboSchedule.AddItem (ScheduleASAPText)
comboSchedule.AddItem (ScheduleDateTimeText)
comboSchedule.AddItem (ScheduleOffPeakText)
comboSchedule.AddItem (ScheduleHoldText)
comboSchedule.Text = ScheduleASAPText

Dim WinFaxCovers As Object
Set WinFaxCovers = CreateObject("WinFax.CoverPages")

' Populate Cover Page combo box

comboCoverPage.AddItem (NoneText)
comboCoverPage.AddItem (QuickCoverText)

For I = 1 To WinFaxCovers.Count
    comboCoverPage.AddItem (WinFaxCovers.Item(I).GetDescription)
Next I

comboCoverPage.Text = NoneText


End Sub

Private Sub UserForm_Terminate()
     
     End

End Sub

' InQuest injected base64 decoded content
' zj/x&
' jZ 1

INQUEST-PP=macro
