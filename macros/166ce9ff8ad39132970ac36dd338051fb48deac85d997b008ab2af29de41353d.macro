Attribute VB_Name = "AMainModule"
Option Explicit

Public aCell As Cell
Public ColAlignSw As Boolean
Public vpoints As Single
Public hpoints As Single
Public sampleTable As Table
Public aTable As Table
Public recordSW As Boolean
Public InhibitClick As Boolean
Public HorizRelative As Long

Sub GO_TableEditing() ' jump to here to start
  Call GiveScreenPoints(hpoints, vpoints)
  Application.EnableCancelKey = wdCancelInterrupt
  Call getRelative(HorizRelative)
  ShowMainform
  InhibitClick = False
  If Selection.Tables.Count > 0 Then
    Selection.Tables(1).Select
  End If
  LineWidthForm.Line100.Value = True
  setLinesize
End Sub

Private Sub ShowMainform()
  With MainForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - 15
    If Selection.Information(wdWithInTable) Then
      Set aTable = Selection.Tables(1)
      If aTable.Title = "" Then
        .TableName.Caption = "Table has no title"
      Else
        .TableName.Caption = aTable.Title
      End If
    Else
      Set aTable = Nothing
      .TableName.Caption = "Selection is not in a table"
    End If
    .Show
  End With
'  getParameters (1)
End Sub

Sub ShowMessage(s As String)
With MsgForm
    .Top = 90
    .Left = hpoints - .Width - 23
    .MsgLabel.Caption = s
    .Show
  End With
End Sub

Function tblObject() As Boolean
  If Selection.Tables.Count < 1 Then
    tblObject = False
    ShowMessage "Cursor is not within a table"
    Exit Function
  End If
  Set aTable = Selection.Tables(1)
'  aTable.Select
  tblObject = True
End Function

Sub getRelative(horizN As Long)
  With PlacementForm
  '  If .HorizPageOption Then horizN = wdHorizontalPositionRelativeToPage
  '  If .HorizColumnOption Then horizN = wdHorizontalPositionRelativeTocolumn
  '  If .HorizMarginOption Then horizN = wdHorizontalPositionRelativeTomargin
  End With
End Sub
Sub getParameters(n As Long)
Dim OLDwidthType As Long
Dim hPos As Double
Dim leftPos As Single
Dim k As Long
Dim tblWidth As Single
Dim col As Column
  If InhibitClick Then Exit Sub
  
  If Not tblObject Then
    InhibitClick = False
    Exit Sub
  End If
  aTable.Rows.RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
  
  InhibitClick = True
  If aTable.Rows.WrapAroundText = True Then
    PlacementForm.SquareOption = True
  Else
    PlacementForm.TopAndBottomOption = True
  End If
  
  With PlacementForm
     .DistTop = aTable.Rows.DistanceTop
     .DistBottom = aTable.Rows.DistanceBottom
     .DistLeft = aTable.Rows.DistanceLeft
     .DistRight = aTable.Rows.DistanceRight
  End With
  
  With aTable
'.Select
    If .PreferredWidth = wdUndefined Then
      If .AllowAutoFit Then
        RowColSizesForm.FixedCellsOption = True
      Else
        RowColSizesForm.FixedSizeXOption = True
      End If
    Else
      ' change type to percent to enable full width test for 100%
      OLDwidthType = .PreferredWidthType
      .PreferredWidthType = wdPreferredWidthPercent
      
      If .PreferredWidth >= 100 Or .PreferredWidth = 0 Then
        RowColSizesForm.WindowWidthXOption.Value = True
      Else
        RowColSizesForm.ContentsXOption = True
      End If
      ' set type back to original
      .PreferredWidthType = OLDwidthType
    End If
'    .LineSizeLabel.Caption = "    " & " pt"
    If .Rows.WrapAroundText Then
      PlacementForm.SquareOption = True
    Else
      PlacementForm.TopAndBottomOption = True
    End If
  End With

    ' ***** set vert and horiz position indicators. suppress macros
  With PlacementForm
  
     hPos = aTable.Rows.HorizontalPosition
     ' **** if position left is set using Word's menu then HorizontalPosition is 499999.9375. May change for different versions ???
     ' **** This persists even if table is moved. The only way to determine position is to use Information
     ' **** Does not apply to center or right positions.  Bug !!!!
     leftPos = aTable.Range.Information(wdHorizontalPositionRelativeToPage)
     leftPos = leftPos - ActiveDocument.Sections(Selection.Information(wdActiveEndSectionNumber)).PageSetup.LeftMargin
     If leftPos = 0 Then hPos = 0
     
     Select Case hPos
       Case wdTableLeft, 0
         .HorizLeftButton.Value = True
       Case wdTableCenter
         .HorizCentreButton.Value = True
       Case wdTableRight
         .HorizRightButton.Value = True
       Case Else
         .HorizOtherButton.Value = True
     End Select
  
'    Select Case aTable.Rows.Alignment
'     Case wdAlignRowLeft
'       .HorizLeftButton.Value = True
 '      Case wdAlignRowCenter
'         .HorizCentreButton.Value = True
'       Case wdAlignRowRight
'         .HorizRightButton.Value = True
'       Case Else
'         .HorizOtherButton.Value = True
'    End Select
        
     Select Case aTable.Rows.VerticalPosition
       Case wdTableTop  'Is > 499999 '  'wdTableTop
         .VertTopButton.Value = True
       Case wdTableBottom
         .VertBottomButton.Value = True
       Case wdTableCenter
         .VertCenterButton.Value = True
       Case Else
         .VertOtherButton.Value = True
     End Select
  End With
  With aTable.Rows
      Call ShowOffsets(.VerticalPosition, .HorizontalPosition)
    '  Select Case .RelativeHorizontalPosition
       ' Case wdRelativeHorizontalPositionPage
       '   PlacementForm.HorizPageOption.Value = True
       ' Case wdRelativeHorizontalPositionMargin
       '   PlacementForm.HorizMarginOption.Value = True
       ' Case wdRelativeHorizontalPositionColumn
       '   PlacementForm.HorizColumnOption.Value = True
     ' End Select
     PlacementForm.HorizMarginOption.Value = True
      Select Case .RelativeVerticalPosition
        Case wdRelativeVerticalPositionPage
          PlacementForm.VertPageButton.Value = True
        Case wdRelativeVerticalPositionMargin
          PlacementForm.VertMarginButton.Value = True
        Case wdRelativeVerticalPositionParagraph
          PlacementForm.VertParaButton.Value = True
      End Select
  End With
  
  
  tblWidth = 0
  On Error Resume Next
  For Each col In aTable.Columns  ' doesnt work for split columns ***********
    tblWidth = tblWidth + col.Width
  Next
  On Error GoTo 0
  
  
  If aTable.PreferredWidthType = wdPreferredWidthAuto Then
    PlacementForm.AutoOption.Value = True
  Else
    PlacementForm.FixedOption.Value = True
  End If
  
  PlacementForm.TableWidthLabel.Caption = "Table width " & _
     Format(PointsToCentimeters(tblWidth), "##.00") & " cm"
  RowColSizesForm.TableWidthLabel.Caption = PlacementForm.TableWidthLabel.Caption
  getTableParameters (1)
  LoadRowHeight (1)
  LoadColWidth (1)
  InhibitClick = False
End Sub
 
Sub ShowOffsets(ByVal tp As Single, ByVal lft As Single)
Dim vs As String
Dim hs As String
Dim leftPos As Single
   If Abs(tp) > 90000 Then
     Select Case tp
       Case -999999
         vs = "Top"
       Case -999997
         vs = "Bottom"
       Case -999995
         vs = "Centre"
       Case Else
         vs = ""
     End Select
   Else
     vs = "Offset " & Trim(str(Round(PointsToCentimeters(tp), 2))) & "cm"
   End If

   If Abs(lft) > 90000 Then
   '  If Abs(lft) > 499998 And Abs(lft) < 500000 Then lft = wdTableLeft
   
     Select Case lft
       Case wdTableLeft
         hs = "Left"
       Case wdTableRight
         hs = "Right"
       Case wdTableCenter
         hs = "Centre"
     Case Else
       leftPos = aTable.Range.Information(wdHorizontalPositionRelativeToPage)
       leftPos = leftPos - ActiveDocument.Sections(Selection.Information(wdActiveEndSectionNumber)).PageSetup.LeftMargin
       hs = Trim(str(Round(PointsToCentimeters(leftPos), 2))) & "cm"
     End Select
   Else
     hs = "Offset " & Trim(str(Round(PointsToCentimeters(lft), 2))) & "cm"
     If lft = 1 Then hs = "Left"
   End If

    PlacementForm.HorizOffsetLabel.Caption = hs
    PlacementForm.VertOffsetLabel.Caption = vs
End Sub

'*************************************************************
Sub GotoNextTable(isNext As Boolean)
Dim aTable As Table
Dim aRange As Range
  Application.Browser.Target = wdBrowseTable
  With Selection
    If Not Selection.Information(wdWithInTable) Then
      If isNext Then
        .Collapse direction:=wdCollapseStart
      Else
        .Collapse direction:=wdCollapseEnd
      End If
    End If
    If isNext Then
      Application.Browser.Next
    Else
      Application.Browser.Previous
    End If
  End With
 
  If Not Selection.Information(wdWithInTable) Then
    ShowMessage "No table found"
    Exit Sub
  End If
  Set aTable = Selection.Tables(1)
 ' aTable.Select
  If Not tblObject Then Exit Sub
  
  On Error GoTo ad1
 
    ActiveWindow.ActivePane.HorizontalPercentScrolled = 0
    DoEvents
    getParameters (1)
    ' goto needed to force wait *********
    Set aRange = ActiveDocument.GoTo(what:=wdGoToBookmark, Name:="\EndOfDoc")
    GoTo ad2
ad1:
    ShowMessage "Warning. Table has vertically merged cells"
ad2:
    On Error GoTo 0
End Sub



Function setLinesize() As Long
Dim Lz As Long
Dim sz As String
  With LineWidthForm
    If .Line25 Then
      Lz = wdLineWidth025pt
      sz = "0.25"
    End If
    If .line50 Then
      Lz = wdLineWidth050pt
      sz = "0.50"
    End If
    If .line75 Then
      Lz = wdLineWidth075pt
      sz = "0.75"
    End If
    If .Line100 Then
      Lz = wdLineWidth100pt
      sz = "1.00"
    End If
    If .Line150 Then
      Lz = wdLineWidth150pt
      sz = "1.50"
    End If
    If .Line225 Then
      Lz = wdLineWidth225pt
      sz = "2.25"
    End If
    If .Line300 Then
      Lz = wdLineWidth300pt
      sz = "3.00"
    End If
    If .Line450 Then
      Lz = wdLineWidth450pt
      sz = "4.50"
    End If
    If .Line600 Then
      Lz = wdLineWidth600pt
      sz = "6.00"
    End If
    BordersForm.LineSizeLabel.Caption = "    " & sz & " pt"
  End With
  setLinesize = Lz
End Function
Attribute VB_Name = "BordersForm"
Attribute VB_Base = "0{82FE8E4A-B306-438E-9C6C-CF25EF29E358}{5486E5C7-34C2-4CFA-BD36-DE3D097DDE27}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  BordersForm.hide
End Sub

Private Sub RemoveAllButton_Click()
 ChangeBorders (1)
End Sub

Private Sub OutsideButton_Click()
 ChangeBorders (2)
End Sub

Private Sub GridButton_Click()
  ChangeBorders (3)
End Sub

Private Sub TopBottomButton_Click()
  ChangeBorders (4)
End Sub

Private Sub TopRowButton_Click()
  ChangeBorders (5)
End Sub

Private Sub LinesizeButton_Click()
  With LineWidthForm
    .Top = BordersForm.Top + 20
    .Left = BordersForm.Left + 150
    .Show
  End With
End Sub

Attribute VB_Name = "BordersModule"
Option Explicit

Sub go_Borders(n As Long)
  With BordersForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - MainForm.Width - 15
    .Show
  End With
End Sub

Sub ChangeBorders(n As Long)
Dim aTable As Table
Dim Lz As Long
Dim k As Long
  If n = 0 Then
    MsgBox "You have not selected an action"
    Exit Sub
  End If
  If Selection.Information(wdWithInTable) = False Then
    ShowMessage "Cursor is not within a table"
    Exit Sub
  End If
  Set aTable = Selection.Tables(1)
  Lz = setLinesize
  On Error GoTo Verr
  With aTable.Rows
  If aTable.Rows.Count = 1 And aTable.Columns.Count = 1 And n = 3 Then n = 2
    Select Case n
      Case 1 ' Remove all Borders
          .Borders.OutsideLineStyle = wdLineStyleNone
          .Borders.InsideLineStyle = wdLineStyleNone
      Case 2 ' Outside Border
            .Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
            .Borders(wdBorderLeft).LineWidth = Lz
            .Borders(wdBorderRight).LineStyle = wdLineStyleSingle
            .Borders(wdBorderRight).LineWidth = Lz
            .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
            .Borders(wdBorderTop).LineWidth = Lz
            .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
            .Borders(wdBorderBottom).LineWidth = Lz
        Case 3 ' grid of Borders
        
          If aTable.Rows.Count > 1 Then
             .Borders(wdBorderHorizontal).LineStyle = wdLineStyleSingle
             .Borders(wdBorderHorizontal).LineWidth = Lz
          End If
          If aTable.Columns.Count > 1 Then
            .Borders(wdBorderVertical).LineStyle = wdLineStyleSingle
            .Borders(wdBorderVertical).LineWidth = Lz
          End If
        Case 4 ' border top and bottom
            .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
            .Borders(wdBorderTop).LineWidth = Lz
            .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
            .Borders(wdBorderBottom).LineWidth = Lz
        Case 5 ' border top row and bottom
            .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
            .Borders(wdBorderTop).LineWidth = Lz
            .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
            .Borders(wdBorderBottom).LineWidth = Lz
            aTable.Rows(1).Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
            aTable.Rows(1).Borders(wdBorderBottom).LineWidth = Lz
  
    End Select
  End With
  Exit Sub
Verr:
  ShowMessage "Table has vertical combined cells. Some borders will not be drawn"
  Resume Next
End Sub
Attribute VB_Name = "CreateTableForm"
Attribute VB_Base = "0{CDFBA5CF-C5C3-44E5-A884-2B9196BCD997}{C196C5F2-A111-4816-99D1-11CD5E918728}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  CreateTableForm.hide
End Sub

Private Sub CreateFromTextButton_Click()
  CreateAndFillTable (1)
End Sub

Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{51CEDF7D-A3DC-4158-8171-A22C61162D22}{AE5211F0-8A38-4778-B549-E7A3F04DD99B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Attribute VB_Name = "HelpModule"
Option Explicit
'Sub gg()
'HelpFormDisplay (1)
'End Sub
Sub HelpFormDisplay(n As Long)
Dim s As String
  With HelpForm.Helptxt0
    s = "LOAD SAMPLE TABLE"
    s = s & vbCrLf & _
        "Click inside any table in any open document and click 'Load sample table'" & vbCrLf & _
        "The parameters of the sample table will be used for modifying existing or creating new tables." & vbCrLf & vbCrLf
    s = s & _
     "APPLY LAYOUT OF SAMPLE TABLE TO EXISTING TABLES" & vbCrLf & _
     "1.  Click inside table or use Go to next or previous table to select table to change" & vbCrLf & _
     "2.  Select features to copy." & vbCrLf & _
     "3.  Click 'Apply layout'"
    .Caption = s
  End With
  
  With HelpForm.HelpTxt1
    s = "CREATE NEW TABLE BASED ON SAMPLE TABLE" & vbCrLf
    s = s & "1.  Place cursor where you want the new table. If a range is selected then insertion will be at range start." & vbCrLf
    s = s & "2.  Select copy first or second row text and include cell borders as required." & vbCrLf
    s = s & "3.  Click 'Insert new table at cursor'." & vbCrLf & _
        "The postition controls can be used to position the resultant table on the page."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt2
    s = "CREATE TABLE FROM TEXT" & vbCrLf
    s = s & "A table can be created from text that has tab seperators or optionally, multiple spaces or commas, special character(s) or combinations of these." & vbCrLf & _
        "1.  Select the columns of text" & vbCrLf & _
        "2.  Click 'Create table from text'" & vbCrLf & _
        "Delimiters including special characters are removed from the text in the table." & vbCrLf & _
        "The postition controls can then be used to position the table on the page."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt3
    s = "---------------------------------- CHANGE PARAMETERS OF SELECTED TABLE -------------------------------"
    s = s & vbCrLf & "CHANGE BORDERS OF SELECTED TABLE" & vbCrLf
    s = s & "Click desired border button. Only single lines can be set" & vbCrLf & _
        "Click 'Line size change' button to select line thickness. This line size will be used when border button is clicked."
    .Caption = s
  End With
  
 
 With HelpForm.HelpTxt4
    s = "AUTOFIT TABLE"
    s = s & vbCrLf & _
        "To change the autofit type of currently selected table click the appropriate radio button." & vbCrLf & _
        "Changing the autofit may change the table size and its horizontal position."
    s = s & vbCrLf & vbCrLf & _
        "CHANGE WRAPPING" & vbCrLf & _
        "Toggles text wrapping around table between Top and Bottom and Square(Tight)"
     s = s & vbCrLf & vbCrLf & _
        "BREAK ACCROSS PAGE" & vbCrLf & _
        "Sets where page breaks can occur in the table"
      s = s & vbCrLf & vbCrLf & _
        "OFFSETS" & vbCrLf & _
        "Set horizontal and vertical anchors. Offsets are from these anchors"
      s = s & vbCrLf & vbCrLf & _
        "POSITIONS RELATIVE TO ANCHOR" & vbCrLf & _
        "Moves the table horizontally and vertically. Preset positions can be specified then incremental moves made." & vbCrLf & _
        "Preset positions automatically move if page is re-sized. If an incremental move is made from a preset position then position is fixed relative to the anchor and auto resizing will not occur."
      s = s & vbCrLf & vbCrLf & _
        "TEXT SPACING" & vbCrLf & _
        "White space around table only applies to square wrapping"
    .Caption = s
  End With
  HelpForm.Show
End Sub





Attribute VB_Name = "LineWidthForm"
Attribute VB_Base = "0{17933385-C651-4A4B-850A-1D77C6D0913A}{8D7213DC-3954-4795-A14A-8E181D92796B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub LineOKButton_Click()
  LineWidthForm.hide
  Call setLinesize
End Sub


Attribute VB_Name = "MainForm"
Attribute VB_Base = "0{A74E3842-652F-4C64-B8BB-6A992BE8BEAC}{AA54E6CC-9DF8-4036-A0DD-641F6C1257E3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub BordersButton_Click()
  go_Borders (1)
End Sub

Private Sub CancelButton_Click()
  MainForm.hide
End Sub

Private Sub CopySampleButton_Click()
  Go_Sample (1)
End Sub

Private Sub PlacementButton_Click()
  OpenPlacement (1)
End Sub

Private Sub RefreshButton_Click()
  getParameters (1)
End Sub

Private Sub RowColButton_Click()
  go_RowCol (1)
End Sub

Private Sub NextTableButton_Click()
  GotoNextTable (True)
End Sub

Private Sub PreviousTableButton_Click()
  GotoNextTable (False)
End Sub

Private Sub TableFromTextButton_Click()
  Go_CreateTable (1)
End Sub

Private Sub TableToTextButton_Click()
  Go_TableToText (1)
End Sub
Attribute VB_Name = "MetricsModule"
Option Explicit

' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
    Dim hDC As Long
    Dim RetVal As Long
    Dim XPixelsPerInch As Long
    Dim YPixelsPerInch As Long

    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
    
 ' MsgBox "points x=" & x & " y=" & y
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub


Attribute VB_Name = "MsgForm"
Attribute VB_Base = "0{BED964EF-9F82-4798-A2ED-21FF8FA927E0}{C9DB5ADA-C4A3-45B1-BFFC-F31CF0821957}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  MsgForm.hide
End Sub
Attribute VB_Name = "PlacementForm"
Attribute VB_Base = "0{362E19D3-053C-4D97-BF8D-FE24F3991F73}{AE40D771-BC4E-4AE8-A762-C06B045F0DC8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  PlacementForm.hide
End Sub

Private Sub HorizPageOption_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionPage)
End Sub

Private Sub HorizCharButton_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionCharacter)
End Sub

Private Sub HorizColumnOption_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionColumn)
End Sub

Private Sub HorizMarginOption_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionMargin)
End Sub

Private Sub RefreshButton_Click()
  getParameters (1)
End Sub

Private Sub TopAndBottomOption_Click()
  ChangeTableWrapping (0)
End Sub

Private Sub SquareOption_Click()
  ChangeTableWrapping (1)
End Sub

Private Sub SetDistButton_Click()
  SetDistanceFromText (1)
End Sub

Private Sub VertTopButton_Click() 'top(-999999), bottomt(-999997), Center(-999995)
  SetVertical (-999999)
End Sub
Private Sub VertCenterButton_Click()
   SetVertical (-999995)
End Sub

Private Sub VertBottomButton_Click()
    SetVertical (-999997)
End Sub

Private Sub VertOtherButton_Click()
  'SetVertical(-1000)
End Sub

Private Sub HorizCentreButton_Click()
  moveHoriz (2)
End Sub

Private Sub HorizLeftButton_Click()
  moveHoriz (1)
End Sub

Private Sub Move10ptButton_Click()
  moveHoriz (5)
End Sub

Private Sub Move1PtButton_Click()
  moveHoriz (4)
End Sub

Private Sub MoveLeft10ptButton_Click()
  moveHoriz (7)
End Sub

Private Sub MoveLeft1ptButton_Click()
  moveHoriz (6)
End Sub

Private Sub HorizRightButton_Click()
  moveHoriz (wdShapeRight)
End Sub

Private Sub VertMarginButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionMargin)
End Sub

Private Sub VertPageButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionPage)
End Sub

Private Sub VertParaButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionParagraph)
End Sub

Private Sub HorizOtherButton_Click()
 ' SetHorizontal (-1000)
End Sub

Private Sub AllowCellBreak_Click()
  Call BreakAcrossPage(True, True)
End Sub

Private Sub AllowTableBreak_Click()
  Call BreakAcrossPage(False, False)
End Sub
Private Sub NoCellBreak_Click()
  Call BreakAcrossPage(False, True)
End Sub

Private Sub NoTableBreak_Click()
Call BreakAcrossPage(True, False)
End Sub


Private Sub MoveDown10Button_Click()
   MoveDownPoint (10)
End Sub

Private Sub MoveDown1Button_Click()
  MoveDownPoint (1)
End Sub

Private Sub MoveUp10Button_Click()
  MoveDownPoint (-10)
End Sub

Private Sub MoveUp1Button_Click()
  MoveDownPoint (-1)
End Sub

Attribute VB_Name = "PlacementModule"
Option Explicit

Sub OpenPlacement(n As Long)
  With PlacementForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - MainForm.Width - 15
    .Show
  End With
 getParameters (1)
End Sub

Sub ChangeTableWrapping(n As Integer) ' toggle wrapcode 0=top & bottom, 1=square
Dim hPos As Single
Dim hP As Single
Dim hAlign As Long
Dim sectionNo As Long
Dim HPage As Single
Dim VPage As Single
Dim WrapCode As Long
  If Not Selection.Information(wdWithInTable) Then
    MsgBox "No table selected"
    Exit Sub
  End If
  sectionNo = Selection.Information(wdActiveEndSectionNumber)

  HPage = Selection.Tables(1).Rows.HorizontalPosition
  VPage = Selection.Tables(1).Rows.VerticalPosition
 
  With Selection.Tables(1).Rows
    WrapCode = .WrapAroundText
    If WrapCode = wdUndefined Then
      MsgBox "Mixed wrapping. Cannot change"
      Exit Sub
    End If
    
    If .WrapAroundText = True And n = 1 Then Exit Sub
    If .WrapAroundText = False And n = 0 Then Exit Sub
   
    If .WrapAroundText = True Then ' existing wrap is true
     If Abs(HPage) < 40000 Then ' not  left, center, right
       .WrapAroundText = False 'Not .WrapAroundText
       If Abs(VPage) < 40000 Then
         .VerticalPosition = VPage
         .WrapAroundText = False
       End If
       
        If Abs(HPage) < 4000 Then moveHoriz (HPage)
     Else
       'HPage = Selection.Tables(1).Range.Information(wdHorizontalPositionRelativeToPage)
       .WrapAroundText = False
       Select Case HPage
         Case wdShapeLeft
           moveHoriz (1)
         Case wdShapeCenter
           moveHoriz (2)
         Case wdShapeRight
           moveHoriz (3)
         Case Else
           If Abs(HPage) < 4000 Then moveHoriz (HPage)
          ' MsgBox "Unknown position"
       End Select
           
     End If
   Else ' existing no wrap
     HPage = .LeftIndent
     .WrapAroundText = True
     If Abs(HPage) < 40000 Then
       .LeftIndent = 0
       moveHoriz (HPage)
     End If

   End If
   getParameters (1)
 End With
End Sub

Sub SetDistanceFromText(n As Long)
Dim HWraptype As Boolean
 ' ****** table ************
   If Not Selection.Information(wdWithInTable) Then
     getParameters (1)
     Exit Sub
   End If
   On Error Resume Next
   With Selection.Tables(1).Rows
     HWraptype = .WrapAroundText
     If HWraptype Then
       .DistanceTop = PlacementForm.DistTop.Value
       .DistanceBottom = PlacementForm.DistBottom.Value
       .DistanceRight = PlacementForm.DistRight.Value
       .DistanceLeft = PlacementForm.DistLeft.Value
     Else
       MsgBox "You must be in Square wrapping mode to change text spacing"
     End If
   End With

  getParameters (1)
End Sub

Sub SetVertical(p As Single) ' p= top(-999999), bottom(-999997), Center(-999995) other (-1000)
'  If InhibitClick Then Exit Sub

   If Not Selection.Information(wdWithInTable) Then
     On Error GoTo 0
     getParameters (1)
     Exit Sub
   End If
   
   If p = -1000 Then ' other
     vertTableReset
   Else
    With Selection.Tables(1).Rows
     If .WrapAroundText = False Then
       MsgBox "Cannot change vertical position when wrapping is Top & Bottom"
       PlacementForm.VertOtherButton = True
       Exit Sub
     End If
     Select Case p
       Case wdShapeTop
         If .WrapAroundText Then
           .RelativeVerticalPosition = wdRelativeVerticalPositionMargin
           .VerticalPosition = wdTableTop
   '        .Alignment = 0
         Else
     '      .Alignment = wdAlignRowLeft  ' ??????????????????
         End If
       Case wdShapeBottom
   '      If .WrapAroundText Then .VerticalPosition = wdTableBottom
         .VerticalPosition = wdTableBottom
   '      .Alignment = wdAlignRowRight  ' ???????????????????
       Case wdShapeCenter
         If .WrapAroundText Then .VerticalPosition = wdTableCenter
         .VerticalPosition = wdTableCenter
    '     .Alignment = wdAlignRowCenter
       Case Else
     End Select
    End With
   End If
   getParameters (1)
 On Error GoTo 0
End Sub

Sub MoveDownPoint(p As Single) ' **************** move down ***********
Dim wraphold As Long
Dim shp As Shape
Dim WrapTypeHold As Boolean
Dim VPage As Single
Dim topM As Single
' ****************** table **************************
    If Not Selection.Information(wdWithInTable) Then
      getParameters (1)
      Exit Sub
    End If
    If Not Selection.Tables(1).Rows.WrapAroundText Then
      Call MsgBox("Can only move vertically if in Square wrap." & vbCr & _
             "If table is Top and Bottom wrapped, cut and paste to move vertically." & vbCr & _
             vbCrLf & "Note: dragging 'Top & Bottom' table will change its wrapping to Square " & _
             "after which you should click refresh to display current wrapping", , "Tables")
      getParameters (1)
      Exit Sub
    End If
    
    On Error GoTo Verr
    With Selection.Tables(1)
      VPage = .Range.Information(wdVerticalPositionRelativeToPage)
      If VPage = -1 Then
        MsgBox "Table exceeds page width. Try splitting"
        Exit Sub
      End If
      PlacementForm.VertOtherButton.Value = True ' if not set then forces reset of vert position
     
     If Abs(.Rows.VerticalPosition) > 90000 Then
       
        .Rows.RelativeVerticalPosition = wdRelativeVerticalPositionMargin
      If VPage = -1 Then VPage = 1
      topM = ActiveDocument.Sections(Selection.Information(wdActiveEndSectionNumber)).PageSetup.TopMargin
      Selection.Tables(1).Rows.VerticalPosition = VPage + p - topM
     
     Else
     .Rows.VerticalPosition = .Rows.VerticalPosition + p
     End If
'      VPage = .Range.Information(wdVerticalPositionRelativeToPage)
    
      On Error GoTo 0

      Call ShowOffsets(.Rows.VerticalPosition, .Rows.HorizontalPosition)

    End With

    getParameters (1)
    Exit Sub
Verr:
    On Error GoTo 0
    MsgBox "Cannot move table outside page boundaries"
 
End Sub

Sub moveHoriz(n As Single) ' 1=left, 2=centre, 3=right, 4=1pt, 5=10pt, 6=left1pt, 7=left10pt
Dim p As Long
Dim leftM As Single
Dim rightM As Single
Dim pgeWdth As Single
Dim hP As Single
Dim HPage As Single
Dim wraphold As Boolean
Dim sectionNo As Long
Dim tblWidth As Single
  If InhibitClick Then Exit Sub
  If Selection.Information(wdWithInTable) = False Then
    MsgBox "Not in table"
    Exit Sub
  End If
  Set aTable = Selection.Tables(1)
  Select Case n
      Case 0
        Exit Sub
      Case 1
        p = wdTableLeft
      Case 2
        p = wdTableCenter
      Case 3
        p = wdTableRight
      Case 4
        p = 1
      Case 5
        p = 10
      Case 6
        p = -1
      Case 7
        p = -10
      Case Else
        p = n
  End Select
    
  If Abs(p) > 4000 Then ' ********* left, centre, right ************
  
   With aTable.Rows
     Select Case p
       Case wdTableLeft
       '  If .WrapAroundText Then .HorizontalPosition = wdTableLeft
         .Alignment = wdAlignRowLeft
          
         If .WrapAroundText Then
          .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
           
           .HorizontalPosition = 0 'wdTableLeft
           .Alignment = wdAlignRowLeft
         Else
'           .Alignment = wdAlignRowLeft
'           .HorizontalPosition = wdTableLeft

         End If
       Case wdShapeRight
         If .WrapAroundText Then .HorizontalPosition = wdTableRight
         .Alignment = wdAlignRowRight
       Case wdShapeCenter
         If .WrapAroundText Then .HorizontalPosition = wdTableCenter
         .Alignment = wdAlignRowCenter
       Case Else
     End Select
   End With
   getParameters (1)
   Exit Sub
  End If
     
  With aTable.Rows  ' ******* move p points ************
    PlacementForm.HorizOtherButton.Value = True
    sectionNo = Selection.Information(wdActiveEndSectionNumber)
    aTable.Rows.RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
    With ActiveDocument.Sections(sectionNo)
      leftM = .PageSetup.LeftMargin
      rightM = .PageSetup.RightMargin
      pgeWdth = .PageSetup.PageWidth
    End With
    pgeWdth = pgeWdth - leftM - rightM
    If .WrapAroundText Then ' ********* is wrapped ****************
      hP = aTable.Rows.HorizontalPosition
      If Abs(hP) > 40000 Then ' not set position  ' 499999.9=other
        tblWidth = WidthOfTable(aTable)
        Select Case hP
        Case -999998 ' left
          .HorizontalPosition = p
        Case -999995 ' centre
          .HorizontalPosition = (pgeWdth - tblWidth) / 2 + p
        Case -999996 ' right
          HPage = aTable.Range.Information(wdHorizontalPositionRelativeToPage)
          aTable.Rows.RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
        
       '   .HorizontalPosition = (pgeWdth - tblWidth) + p
          .HorizontalPosition = HPage + p - leftM
        Case Else
         .HorizontalPosition = p
        End Select
'MsgBox CentimetersToPoints(7 * 2.33)
      Else ' not set position
        HPage = aTable.Range.Information(wdHorizontalPositionRelativeToPage)
        aTable.Rows.RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
        If HPage = -1 Then HPage = 1
        aTable.Rows.HorizontalPosition = aTable.Rows.HorizontalPosition + p
      End If
       PlacementForm.HorizOtherButton.Value = True
    Else ' *********** non wrapped ********************
       HPage = aTable.Range.Information(wdHorizontalPositionRelativeToPage)
  
      .Alignment = wdAlignRowLeft
      If .LeftIndent < 999999 Then
      
        .LeftIndent = .LeftIndent + p
       ' .Alignment = HPage
      Else
      tblWidth = WidthOfTable(aTable)
        Select Case hP
        Case -999998 ' left
          .LeftIndent = p
        Case -999995 ' centre
          .LeftIndent = (pgeWdth - tblWidth) / 2 + p
        Case -999996 ' right
          .LeftIndent = pgeWdth - tblWidth + p
        Case Else
         .LeftIndent = 0
        End Select
      '  .LeftIndent = 0
      End If
    End If
     getParameters (1)
  End With

End Sub

Sub SetVerticalPosition(p As Long) 'top(-999999), bottom(-999997), Center(-999995)
' called by anchor change
Dim newVpage As Single
Dim HWraptype As Boolean
Dim VPage As Single
  If InhibitClick Then
    Exit Sub
  End If
  
  On Error Resume Next
  
  If Not Selection.Information(wdWithInTable) Then
      On Error GoTo 0
      getParameters (1)
      Exit Sub
  End If
    HWraptype = aTable.Rows.WrapAroundText ' Selection.Tables(1).Rows.WrapAroundText
    If Not HWraptype Then
      MsgBox "Cannot set anchor vertical position if wrapping is Top and Bottom"
      On Error GoTo 0
      getParameters (1)
      Exit Sub
    End If
    With aTable  'Selection.Tables(1)
    
      VPage = .Range.Information(wdVerticalPositionRelativeToPage)
      If VPage >= 0 Then
        .Rows.VerticalPosition = 0 ' otherwise change to paragraph may go below page
        .Rows.RelativeVerticalPosition = p
    
        newVpage = .Range.Information(wdVerticalPositionRelativeToPage)
        .Rows.VerticalPosition = .Rows.VerticalPosition + VPage - newVpage
      End If
      VPage = .Range.Information(wdVerticalPositionRelativeToPage)
    End With
   getParameters (1)
   InhibitClick = False
End Sub

Sub SetHorizontalPosition(p As Long) ' set margin, page, column for relative anchor position
' *********** modify. change relative pos then offset char=wdRelativeHorizontalPositionCharacter
Dim wraphold As Long
Dim leftPos As Single

'  If InhibitClick Then Exit Sub
'  On Error Resume Next

    If Not Selection.Information(wdWithInTable) Then
      On Error GoTo 0
   '   getParameters (1)
      Exit Sub
    End If
    
    Call getRelative(HorizRelative)
'    With aTable
'      leftPos = .Range.Information(wdHorizontalPositionRelativeToPage)
'      If leftPos >= 0 Then
'        .Rows.RelativeHorizontalPosition = p
'      End If
 '   End With
 '   wraphold = Selection.Tables(1).Rows.WrapAroundText
 '   Selection.Tables(1).Rows.RelativeHorizontalPosition = p ' parameter outside acceptable range as wraphold=-1
 '   Selection.Tables(1).Rows.WrapAroundText = wraphold
    On Error GoTo 0
 ' End If
  getParameters (1)
End Sub


Private Sub vertTableReset()
Dim tHeight As Single
Dim tTop As Single
  tHeight = Selection.Tables(1).Range.Information(wdVerticalPositionRelativeToPage)
   
   With ActiveDocument.PageSetup
      If AnchorsForm.VertMarginButton Then tHeight = tHeight - .TopMargin
   End With
  
   With Selection.Tables(1).Rows
     Select Case .VerticalPosition
       Case Is > 499999 '  Top
         .VerticalPosition = 0
       Case wdTableCenter
          .VerticalPosition = tHeight
          
  '       .VerticalPosition = (tHeight - tableHeight) / 2
       Case wdTableBottom
          .VerticalPosition = tHeight
  '       .VerticalPosition = tHeight - tableHeight / 2
       Case Else
     End Select
   End With

End Sub

Sub BreakAcrossPage(yn As Boolean, isRow As Boolean)
Dim aTable As Table
  If Selection.Information(wdWithInTable) = False Then
    ShowMessage "Cursor is not within a table"
    Exit Sub
  End If
  Set aTable = Selection.Tables(1)
  aTable.Select
  If isRow Then
    aTable.Rows.AllowBreakAcrossPages = yn
  Else
    Selection.ParagraphFormat.KeepWithNext = yn
  End If
End Sub

Function WidthOfTable(aTable As Table) As Single
Dim aCell As Cell
Dim tWidth As Single
  tWidth = 0
  Set aTable = Selection.Tables(1)
  For Each aCell In aTable.Rows(1).Cells
    tWidth = tWidth + aCell.Width
  Next aCell
  WidthOfTable = tWidth
End Function

Attribute VB_Name = "RowColModule"
Option Explicit


Sub go_RowCol(n As Long)
  With RowColSizesForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - MainForm.Width - 15
    .Show
  End With
  getTableParameters (1)
End Sub


Sub Go_Autofit(n As Long) '1=contents, 2=Fixed, 3=full page, 4=auto
Dim st As String
'Dim aTable As Table
  If Selection.Information(wdWithInTable) = False Then
    ShowMessage "Cursor is not within a table"
    Exit Sub
  End If
  If InhibitClick Then Exit Sub
  
  With aTable
    Select Case n
      Case 1
         .AutoFitBehavior (wdAutoFitContent)
      Case 2
         .AutoFitBehavior (wdAutoFitFixed)
      Case 3
         .AutoFitBehavior (wdAutoFitWindow) ' forces preferredWidth to be non undefined
      Case 4
         .AutoFitBehavior (wdAutoFitFixed)
         .AllowAutoFit = True
    End Select
    
  End With
  DoEvents
 ' getParameters
  InhibitClick = False
   
End Sub

Sub ChangeWidth(n As Long)
Dim w As Single
  w = RowColSizesForm.WidthTextbox.Value
  If w < 5 Or w > 120 Then
    MsgBox "Error. Width must be more than 5% and less than 120%"
    Exit Sub
  End If
  aTable.PreferredWidthType = wdPreferredWidthPercent
  aTable.PreferredWidth = w
End Sub

Sub getTableParameters(n As Long)
Dim afc As Single
Dim pgeWdth As Single
'Dim pw As String
  If Selection.Tables.Count < 1 Then
    ShowMessage "Cursor is not within a table"
    Exit Sub
  End If
  Set aTable = Selection.Tables(1)
  pgeWdth = getPageWidth
  InhibitClick = True
  'pw = "Page width (" & Format(PointsToCentimeters(pgeWdth), "##.00") & " cm)"
  ' type =wdPreferredWidthAuto, wdPreferredWidthPercent, wdPreferredWidthPoints
  With RowColSizesForm
    .WidthTextbox.Value = ""
    afc = aTable.PreferredWidth  ' in points or percent
    
    If aTable.PreferredWidthType = wdPreferredWidthAuto Then '??????? always ????
      .ContentsXOption.Value = True
    Else
      If aTable.PreferredWidthType = wdPreferredWidthPercent Then
        afc = aTable.PreferredWidth
        .WidthTextbox.Value = Trim(str(Round(afc)))
        If afc = 100 Then
          .WindowWidthXOption.Value = True
        Else
          .FixedSizeXOption.Value = True
        End If
      Else  ' wdPreferredWidthPoints
        .FixedSizeXOption.Value = True
      End If
    End If
 
  End With
  InhibitClick = False
End Sub

Function getPageWidth() As Single
Dim pw As Single
Dim v As Long
  v = Selection.Information(wdActiveEndSectionNumber)
  With ActiveDocument.Sections(v).PageSetup
    getPageWidth = .PageWidth - .LeftMargin - .RightMargin
  End With
End Function

Sub LoadRowHeight(n As Long) ' use first in range
' https://stackoverflow.com/questions/4630277/how-to-get-the-height-of-a-table-row-in-word
Dim k As Long
Dim j As Long
Dim m As Long
Dim pos As Long
Dim ht As Single
Dim cc As Cell
Dim p As ParagraphFormat
  On Error GoTo rwErr
  k = Selection.Information(wdStartOfRangeRowNumber)
  j = Selection.Information(wdEndOfRangeRowNumber)
  m = aTable.Rows.Count
  Set cc = Selection.Cells(1)
  If k = m Then ' last row
    ht = cc.Height
    If ht > 1 And ht < 100000 Then GoTo PutHt
    pos = aTable.Cell(k, 1).Range.End - 1 ' last character in cell
    ht = ActiveDocument.Range(pos, pos).Information(wdVerticalPositionRelativeToTextBoundary)
  ' should check number of text lines in cell
   Set p = cc.Range.ParagraphFormat
   ht = ht + cc.BottomPadding + cc.TopPadding + p.SpaceBefore + p.SpaceAfter
    GoTo PutHt
  End If
  ht = cc.Height
  If ht < 1 Or ht > 100000 Then ' if undecided
    If k = m Then GoTo PutHt ' second routine won't work for last row
    ht = aTable.Rows(k + 1).Range.Information(wdVerticalPositionRelativeToPage) _
        - aTable.Rows(k).Range.Information(wdVerticalPositionRelativeToPage)
  End If
PutHt:
  RowColSizesForm.RowHtTextbox.Value = Format(ht, "###.00")
  RowColSizesForm.RowHtCmLabel.Caption = Format(PointsToCentimeters(ht), "#0.000") & "cm"
  Exit Sub
rwErr:
  ShowMessage "Warning. Vertically merged cells or unequal cells in rows"
End Sub

Sub RowHtCm(t As String)
 If IsNumeric(t) Then
   RowColSizesForm.RowHtCmLabel.Caption = Format(PointsToCentimeters(Val(t)), "#0.000") & "cm"
 End If
End Sub

Sub colCm(t As String)
 If IsNumeric(t) Then
   RowColSizesForm.ColWdCmLabel.Caption = Format(PointsToCentimeters(Val(t)), "#0.000") & "cm"
 End If
End Sub

Sub setRowHeights(n As Long)
Dim k As Long
Dim j As Long
Dim m As Long
Dim h As Single
Dim hs As String
Dim aRange As Range
Dim cc As Cell
  If Not tblObject Then Exit Sub
  
   hs = RowColSizesForm.RowHtTextbox.Value
  If IsNumeric(hs) Then
    h = Val(hs)
  Else
    MsgBox "Error: Imvalid row size"
    Exit Sub
  End If
  If h < 1 Or h > 10000 Then
    MsgBox "Row height too small or too large"
    Exit Sub
  End If
  k = Selection.Information(wdStartOfRangeRowNumber)
  j = Selection.Information(wdEndOfRangeRowNumber)
   
   On Error Resume Next

   Set aRange = Selection.Range
   For Each cc In aRange.Cells
'   cc.Select
     cc.Height = h
     If RowColSizesForm.RowAtLeastCheckbox Then
       cc.HeightRule = wdRowHeightAtLeast
     Else
       cc.HeightRule = wdRowHeightExactly
     End If
    Next cc
   LoadRowHeight (1)
End Sub

Sub LoadColWidth(n As Long)
Dim cw As Single
Dim aRange As Range

  Set aRange = Selection.Range
  cw = aRange.Cells(1).Width
  RowColSizesForm.ColWidthTextbox.Value = Format(cw, "###.00")
  RowColSizesForm.ColWdCmLabel.Caption = Format(PointsToCentimeters(cw), "#0.000") & "cm"
   
End Sub

Sub SetColWidths(n As Long)
Dim cw As Single
Dim cc As Cell
Dim aRange As Range
Dim cIndex As Long
  cw = 0
  On Error Resume Next
  cw = Val(RowColSizesForm.ColWidthTextbox.Value)
  On Error GoTo 0
  If cw < 1 Or cw > 2000 Then
    ShowMessage "Error in column width"
    Exit Sub
  End If
  Set aRange = Selection.Range
  cIndex = aRange.Cells(1).ColumnIndex
  For Each cc In aRange.Cells
    If cc.ColumnIndex = cIndex Then
    cc.Width = cw
    End If
  Next cc
End Sub
Attribute VB_Name = "RowColSizesForm"
Attribute VB_Base = "0{EE8D4E93-B59E-4932-9937-70E34667BBC0}{5B827082-E725-4513-96DB-F0143E9D8616}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  RowColSizesForm.hide
End Sub



Private Sub CommandButton1_Click()
  ChangeWidth (1)
End Sub

Private Sub ContentsXOption_Click()
  Go_Autofit (1)
End Sub

Private Sub FixedSizeXOption_Click()
  Go_Autofit (2)
End Sub

Private Sub LoadColWidthButton_Click()
  LoadColWidth (1)
End Sub

Private Sub LoadRowHeightButton_Click()
  LoadRowHeight (1)
End Sub

Private Sub RowHtTextbox_Change()
  RowHtCm (RowColSizesForm.RowHtTextbox.Value)
End Sub

Private Sub ColWidthTextbox_Change()
  colCm (RowColSizesForm.ColWidthTextbox.Value)
End Sub

Private Sub SetRowHeightButton_Click()
  setRowHeights (1)
End Sub

Private Sub SetVolWidthButton_Click()
  SetColWidths (1)
End Sub

Private Sub WindowWidthXOption_Click()
  Go_Autofit (3)
End Sub

Private Sub FixedCellsOption_Click()
  Go_Autofit (4)
End Sub

Attribute VB_Name = "SampleAndCreateModule"
Option Explicit
Sub Go_Sample(n As Long)
  With SampleForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - MainForm.Width - 15
    .Show
  End With
End Sub

Sub getRefTable(n As Long)
  With SampleForm
    .RefTableLabel.Caption = " Sample table not set"
    .MakeUniformButton.Enabled = False
  End With
  If Selection.Information(wdWithInTable) = False Then
    ShowMessage "Cursor is not within Table"
    Exit Sub
  End If
  Set sampleTable = Selection.Tables(1)
  
  With sampleTable
    If Not selectRow1(aTable) Then Exit Sub
    .Select
  End With
  With SampleForm
    .RefTableLabel.Caption = "Sample table " & sampleTable.Rows.Count & " x " & sampleTable.Columns.Count & " from" & vbCr & "Page" & ShowPageNo
    .changeStylesCheckbox.Value = True
    .ChangeColWidthsCheckbox.Value = True
    .MakeUniformButton.Enabled = True
  End With
  recordSW = True
  'ShowTablewrap
End Sub

Sub ApplySampleToTable(n As Integer)
Dim newRow1Count As Integer
Dim newRow2Count As Integer
Dim newBodyCount As Integer
Dim i As Integer, j As Integer, k As Integer
Dim adjustCol As Boolean, adjustStyle As Boolean, noColSw As Boolean
Dim st As String
Dim r2Count As Long
Dim r1Count As Long
Dim refRow As Long
'Dim aTable As Table
Dim cc As Cell
 If Not recordSW Then
    MsgBox "No recorded data", Title:=""
    Exit Sub
  End If
  If Selection.Information(wdWithInTable) = False Then
     ShowMessage "Cursor is not within a Table"
      Exit Sub
  End If
  Set aTable = Selection.Tables(1)
  On Error GoTo AAerr
  aTable.Rows(1).Cells(1).Select
  On Error GoTo 0
'  If aTable.Rows(1).Cells.Count < 2 Or aTable.Rows.Count < 3 Or aTable.Rows.Count > 40 Then
'    MsgBox "Selected table must have at least 3 rows and 2 columns and not more than 40 columns", Title:=""
'    Exit Sub
'  End If
  r2Count = aTable.Rows.Count
  r1Count = sampleTable.Rows.Count
    ' copy row by row
  '*******************************************
  If Not CopyRows(aTable, 1, 1) Then Exit Sub ' 1st row
  ' ****************************************????????
  If r2Count > 1 Then
    For j = 2 To r2Count
      refRow = j
      If j > r1Count Then refRow = r1Count ' if larger then use last row of reference
      If Not CopyRows(aTable, j, refRow) Then Exit Sub
    Next j
  End If
  
  If SampleForm.ChangeColWidthsCheckbox.Value Then
  
   aTable.Columns.PreferredWidthType = wdPreferredWidthPoints
   aTable.AllowAutoFit = False
  
    For j = 1 To r2Count
  For k = aTable.Rows(j).Cells.Count To 1 Step -1
'      For k = 1 To atable.Rows(j).Cells.Count
        aTable.Rows(j).Cells(k).Select
      
        If j > r1Count Then ' if more rows than sample then use last row
          If k <= sampleTable.Rows(r1Count).Cells.Count Then _
          aTable.Rows(j).Cells(k).Width = sampleTable.Rows(r1Count).Cells(k).Width
  'Selection.Columns.Width = sampleTable.Rows(r1Count).Cells(r1Count).Width
        Else
 '         atable.Rows(j).Cells(k).PreferredWidth = sampleTable.Rows(j).Cells(k).PreferredWidth
          If k <= sampleTable.Rows(j).Cells.Count Then _
          aTable.Rows(j).Cells(k).Width = sampleTable.Rows(j).Cells(k).Width
 ' Selection.Columns.Width = sampleTable.Rows(j).Cells(k).Width
        End If
      Next k
    Next j
  End If
  
  aTable.Rows.WrapAroundText = sampleTable.Rows.WrapAroundText
  aTable.Rows.Alignment = sampleTable.Rows.Alignment
  aTable.Rows.LeftIndent = sampleTable.Rows.LeftIndent
  getParameters (1)
  Exit Sub
AAerr:
  On Error GoTo 0
  MsgBox "Cannot apply to this table because it has vertically merged cells", Title:=""
End Sub

Sub createNewTable(n As Long)
Dim i As Long
Dim bTable As Table
Dim ss As String
Dim vertPos As Single
  If Selection.Information(wdWithInTable) = True Then
    ShowMessage "Cursor is within a table. This tool will not put table within table."
    Exit Sub
  End If
  If sampleTable Is Nothing Then
    MsgBox "Sample table has not been loaded"
    Exit Sub
  End If
  
  sampleTable.Range.Copy
  Selection.End = Selection.Start
  vertPos = Selection.Information(wdVerticalPositionRelativeToPage)
  Selection.Paste
  
  Selection.Tables(1).Select
  Set bTable = Selection.Tables(1)
  
  If bTable.Rows.WrapAroundText Then ' set vertical posn at cursor position
    bTable.Rows.VerticalPosition = vertPos
  End If
  
  Selection.Delete Unit:=wdCharacter, Count:=1
  
  If SampleForm.CopyFirstRowCkeckbox.Value Then
    For i = 1 To sampleTable.Rows(1).Cells.Count
      ss = sampleTable.Rows(1).Cells(i).Range.Text
      ss = Left(ss, Len(ss) - 2)
      bTable.Rows(1).Cells(i).Range.Text = ss
    Next i
  End If
  If SampleForm.CopySecondRowCkeckbox.Value And bTable.Rows.Count > 1 Then
    For i = 1 To sampleTable.Rows(2).Cells.Count
      ss = sampleTable.Rows(2).Cells(i).Range.Text
      ss = Left(ss, Len(ss) - 2)
      bTable.Rows(2).Cells(i).Range.Text = ss
    Next i
  End If
  getParameters (1)
End Sub

Private Function ShowPageNo() As String
       ShowPageNo = str(Selection.Information(wdActiveEndPageNumber)) & _
             " in Section " & str(Selection.Information(wdActiveEndSectionNumber))
End Function

Sub Go_TableToText(n As Long)
  If Not Selection.Information(wdWithInTable) Then
    ShowMessage "Table not selected"
    Exit Sub
  End If
  Selection.Tables(1).Select
  Dialogs(wdDialogTableToText).Show
  If Selection.Frames.Count > 0 Then Selection.Frames(1).Delete
End Sub


Sub Go_CreateTable(n As Long)
 With CreateTableForm
    .Top = 0   'vpoints ' - .Height
    .Left = hpoints - .Width - MainForm.Width - 15
    .Show
  End With
End Sub

Sub CreateAndFillTable(n As Long)
Dim aRange As Range
Dim aPara As Paragraph
Dim arow As Row
Dim iPara As Integer
Dim st1 As String
Dim kMin As Integer, kmax As Integer
Dim cStrings(200, 40) As String
Dim i As Integer, j As Integer, k As Integer
Dim jrow As Integer, kcol As Integer
Dim sty1 As Style
Dim csCount(200) As Integer
Dim tbRange As Range
Dim cStringsStyle(200, 40) As Style
Dim cBold(200, 40) As Boolean
  Set aRange = Selection.Range
  iPara = aRange.Paragraphs.Count
  If aRange.Tables.Count > 0 Then
    MsgBox "Cannot proceed, selection includes a table", Title:=""
    Exit Sub
  End If
  If iPara > 200 Then
    MsgBox "Can only handle max of 200 paragraphs (rows)"
    Exit Sub
  End If
  jrow = 0
  For i = i To 200
    csCount(i) = 0 ' cells per row
  Next i
  For Each aPara In aRange.Paragraphs
    jrow = jrow + 1
    st1 = StripText(aPara.Range.Text)  ' strip carriage returns and convert tabs to spaces
'    If st1 = "" Then Exit Sub
    If st1 = "" Then
      aPara.Range.Select
      If MsgBox("Include blank paragraph", vbYesNo) = vbYes Then st1 = " "
    End If
    Set sty1 = aPara.Range.Style
    kcol = 0
    While Len(st1) > 0
     'i = InStr(st1, "   ") *****************************
     i = InStr(st1, Chr(9))
     If i > 0 Or (i = 0 And Len(st1) > 0) Then
        kcol = kcol + 1
        If kcol > 40 Then
          MsgBox "Too many columns (max 40)", Title:=""
          Exit Sub
        End If
        csCount(jrow) = csCount(jrow) + 1
        If i = 0 And Len(st1) > 0 Then ' last item in row
          cStrings(jrow, kcol) = st1
          Set cStringsStyle(jrow, kcol) = sty1
          cBold(jrow, kcol) = aPara.Range.Font.Bold
          st1 = ""
        Else
          cStrings(jrow, kcol) = Trim(Left(st1, i - 1))
          Set cStringsStyle(jrow, kcol) = sty1
          cBold(jrow, kcol) = aPara.Range.Font.Bold
          st1 = Trim(Mid(st1, i + 1))
        End If
     End If
    Wend
  Next aPara
   
    j = 1
    While j <= jrow ' remove blank lines, reduce number of rows
      If csCount(j) = 0 Then  ' blank line
        i = j
        While i < jrow
          For k = 1 To csCount(i + 1)
            cStrings(i, k) = cStrings(i + 1, k)
            Set cStringsStyle(i, k) = cStringsStyle(i + 1, k)
            cBold(i, k) = cBold(i + 1, k)
          Next
          csCount(i) = csCount(i + 1)
          i = i + 1
        Wend
        csCount(jrow) = 0
        jrow = jrow - 1
 '       MsgBox " blank row=" & j & "  jrow blanked=" & jrow
      Else
        j = j + 1
      End If
    Wend
    kmax = 0
    kMin = 1000
    For j = 1 To jrow
      If csCount(j) > kmax Then kmax = csCount(j)
      If csCount(j) < kMin Then
        kMin = csCount(j)
        If kMin = 0 Then MsgBox "Zero at row " & j
      End If
    Next j

    st1 = ""
    If kMin <> kmax Then
      st1 = "Warning! Number of columns vary from row to row" & Chr(13)
    End If
    
    If jrow + kmax = 0 Then
      MsgBox "No text selected. No table will be created"
      Exit Sub
    End If
    
    st1 = st1 & "Create a table with" & str(jrow) & " rows and" & str(kmax) & " columns"
    If CreateTableForm.DeleteOriginalText.Value Then st1 = st1 & " then delete original text"
    
    i = MsgBox(st1, vbYesNo, "")
    If i = vbNo Then GoTo ttend
    
    CreateTableForm.hide
    Set tbRange = Selection.Range ' old text to be deleted
    Selection.Start = Selection.End - 1
    Selection.Collapse
    tbRange.End = Selection.Start
    Selection.InsertParagraphAfter
    
             
    ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=jrow, NumColumns:= _
        kmax, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
        wdAutoFitContent
'    Selection.EndOf Unit:=wdStory, Extend:=wdExtend
 
    
    Set aTable = Selection.Tables(1)
    aTable.Select
    For j = 1 To jrow
      Set arow = aTable.Rows(j)
      For k = 1 To csCount(j)
         arow.Cells(k).Select
         Selection.Text = cStrings(j, k)
         Selection.Style = cStringsStyle(j, k)
         Selection.Font.Bold = cBold(j, k)
      Next k
    Next j

    If CreateTableForm.DeleteOriginalText.Value Then
tbRange.Select
      tbRange.Delete
      On Error Resume Next  ' if table is with a textbox then error occurs
      aTable.Select
      On Error GoTo 0
    Else
    
    End If
'    aTable.AutoFitBehavior (wdAutoFitContent)
ttend:
'  CreateTableForm.hide
'  getParameters (1)
End Sub


Function selectRow1(aTable As Table) As Boolean
' select first row and check for error
  On Error GoTo serr1
  sampleTable.Rows(1).Select
  selectRow1 = True
  GoTo serr2
serr1:
  MsgBox Error(Err) & " error in first row of table", Title:=""
  selectRow1 = False
  Resume serr2
serr2:
  On Error GoTo 0
End Function



Function CopyRows(ByRef aTable As Table, ByVal rowN As Long, ByVal refRow As Long) As Boolean
Dim i As Long
Dim k As Long
Dim newRows As Long
Dim CellCount As Long
  CopyRows = True
'  If atable.Rows(rowN).Cells.Count > sampleTable.Rows(refRow).Cells.Count Then
'    If MsgBox("Row" & str(rowN) & " has fewer cells than reference row in sample table. No changes to row will be made", vbOKCancel, "") = vbCancel Then CopyRows = False
'    Exit Function
'  End If
  k = sampleTable.Rows(refRow).Cells.Count
  newRows = aTable.Rows.Count
  
  For i = 1 To aTable.Rows(rowN).Cells.Count
   ' Set cr = sampleTable.Rows(refRow)
   If i <= k Then ' sample table first row may be shorter than aTable
    With aTable.Rows(rowN).Cells(i)
    .Select
  
      If refRow > newRows Then refRow = sampleTable.Rows.Count
    '  Set cc = sampleTable.Rows(refRow).Cells(i)
      If SampleForm.changeStylesCheckbox.Value Then
        .TopPadding = sampleTable.Rows(refRow).Cells(i).TopPadding
        .BottomPadding = sampleTable.Rows(refRow).Cells(i).BottomPadding
        .LeftPadding = sampleTable.Rows(refRow).Cells(i).LeftPadding
        .RightPadding = sampleTable.Rows(refRow).Cells(i).RightPadding
    
        .Range.Font = sampleTable.Rows(refRow).Cells(i).Range.Font
        .Range.Font.Size = sampleTable.Rows(refRow).Cells(i).Range.Font.Size
        .Range.Font.Bold = sampleTable.Rows(refRow).Cells(i).Range.Font.Bold
        .Range.Font.Italic = sampleTable.Rows(refRow).Cells(i).Range.Font.Italic
        .Range.ParagraphFormat.Alignment = sampleTable.Rows(refRow).Cells(i).Range.ParagraphFormat.Alignment
        If SampleForm.ChangeShadingCheckbox.Value Then
          .Range.Shading.Texture = sampleTable.Rows(refRow).Cells(i).Range.Shading.Texture
          .Range.Shading.ForegroundPatternColor = sampleTable.Rows(refRow).Cells(i).Range.Shading.ForegroundPatternColor
          .Range.Shading.BackgroundPatternColor = sampleTable.Rows(refRow).Cells(i).Range.Shading.BackgroundPatternColor
        End If
      End If
      
 'aTable.PreferredWidthType = 2 'wdPreferredWidthAuto
 'aTable.PreferredWidth = 90
      
      
      If SampleForm.CopyCellBorders Then
        .Range.Borders(wdBorderTop).LineStyle = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderTop).LineStyle
        If .Range.Borders(wdBorderTop).LineStyle > 0 Then .Range.Borders(wdBorderTop).LineWidth = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderTop).LineWidth
      
        .Range.Borders(wdBorderBottom).LineStyle = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderBottom).LineStyle
         If .Range.Borders(wdBorderBottom).LineStyle > 0 Then .Range.Borders(wdBorderBottom).LineWidth = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderBottom).LineWidth
     
        .Range.Borders(wdBorderLeft).LineStyle = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderLeft).LineStyle
        If .Range.Borders(wdBorderLeft).LineStyle > 0 Then .Range.Borders(wdBorderLeft).LineWidth = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderLeft).LineWidth
       
        .Range.Borders(wdBorderRight).LineStyle = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderRight).LineStyle
        If .Range.Borders(wdBorderRight).LineStyle > 0 Then .Range.Borders(wdBorderRight).LineWidth = sampleTable.Rows(refRow).Cells(i).Range.Borders(wdBorderRight).LineWidth
     
      End If
    End With
   End If
  Next i
 
End Function
Function StripText(st2 As String) As String 'change spaces, special char and commas to tabs, remove C/R
Dim i As Long
Dim s2 As Long
Dim s As String
Dim s9 As String
Dim tabChar As String
  tabChar = Chr(9)
  If Right(st2, 1) = Chr(13) Then ' remove trailing C/R
    i = Len(st2)
    st2 = Left(st2, Len(st2) - 1)
  End If
  ' strip all leading and trailing tabs and spaces in any combination
  st2 = trimCombo(st2)
 If CreateTableForm.SpecialDelimCheckbox.Value Then
   s = Trim(CreateTableForm.SpecialDelimTextBox.Value)
   If Len(s) = 0 Then
     MsgBox "Special delimiter character(s) not specified"
     StripText = ""
     Exit Function
   End If
   If Len(s) = 1 Then
     i = Asc(s)
     If (i > 47 And i < 58) Or (i > 64 And i < 91) Or (i > 96 And i < 123) Then
       MsgBox "Single special character must not be numeric or alphabetic"
       StripText = ""
       Exit Function
     End If
   End If
   Do
     i = InStr(1, st2, s)
     If i > 0 Then
       st2 = trimCombo(Left(st2, i - 1)) & tabChar & trimCombo(Mid(st2, i + Len(s)))
     End If
   Loop Until i = 0
   
 End If
' convert 3 or more blanks to a single tab. If existing tab then set only one tab
  If CreateTableForm.SpacesDelim.Value Then
    Do
      i = InStr(1, st2, "   ")
      If i > 0 Then
        st2 = trimCombo(Left(st2, i - 1)) & tabChar & trimCombo(Mid(st2, i + 1))
      End If
    Loop Until i = 0
  End If
  st2 = trimCombo(st2) ' removes leading tab
  
  ' removee multiple tabs after blanks processed
  Do
    i = InStr(1, st2, tabChar & tabChar)
    If i > 0 Then
      st2 = Left(st2, i - 1) & Mid(st2, i + 1)
    End If
  Loop Until i = 0
  
  ' convert comma to tab, if more than one comma then set multiple tabs
  If CreateTableForm.CommaDelim.Value Then
    s9 = ""
    Do
      i = InStr(1, st2, ",")
      If i > 0 Then
        s = trimCombo(Mid(st2, i + 1))
        Do ' multiple commas
          If Left(s, 1) = "," Then
            s9 = s9 & tabChar
            s = Mid(s, 2)
          End If
        Loop Until Left(s, 1) <> "," Or s = ""
      End If
      If i > 0 Then st2 = trimCombo(Left(st2, i - 1)) & tabChar & s9 & s
    Loop Until i = 0
  End If
  
  StripText = Trim(st2)
 End Function


Function trimCombo(st2 As String) As String
Dim s As String
  s = st2
  Do  ' strip all leading and trailing tabs and spaces in any combination
    s = Trim(s)
    If Left(s, 1) = Chr(9) Then s = Mid(s, 2)
    If Right(s, 1) = Chr(9) Then s = Left(s, Len(s) - 1)
  Loop Until s = Trim(s) Or s = ""
  trimCombo = s
End Function


Attribute VB_Name = "SampleForm"
Attribute VB_Base = "0{B5399D12-1C60-4E04-869E-D8FF45524F7A}{B59205B5-3C65-459F-A95F-C7392153E674}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  SampleForm.hide
End Sub

Private Sub GetReferenceBitton_Click()
  getRefTable (1)
End Sub

Private Sub MakeUniformButton_Click()
  ApplySampleToTable (0)
End Sub

Private Sub CreateNewTableButton_Click()
  createNewTable (0)
End Sub

Private Sub NextTableButton_Click()
  GotoNextTable (True)
End Sub

Private Sub PrevTableButton_Click()
 GotoNextTable (False)
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
