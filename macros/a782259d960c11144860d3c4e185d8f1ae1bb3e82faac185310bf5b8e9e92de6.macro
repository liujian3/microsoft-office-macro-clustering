Attribute VB_Name = "BookmarksForm"
Attribute VB_Base = "0{D61C0C63-C7F0-4D3E-A7B4-6E59A3C94887}{F7675B54-21A2-4CC5-9E4F-E023E9F59AE5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CancelBookmarkButton_Click()
  BookmarksForm.BookmarksListbox.ListIndex = -1
  BookmarksForm.hide
End Sub

Private Sub SelectBookmarkButton_Click()
  BookmarksForm.hide
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    CancelBookmarkButton_Click
  End If
End Sub
Attribute VB_Name = "CaptionForm"
Attribute VB_Base = "0{31DD50AB-708C-4628-ABED-8ED634BC73C8}{89304C33-582E-4914-8FB3-9C860D17DE33}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub AddCaptionButton_Click()
  InsertCaption (1)
End Sub

Private Sub CancelButton_Click()
  CaptionForm.hide
End Sub

Private Sub CreateFigureTableButton_Click()
  goTableOfFigures (1)
End Sub

Private Sub FigureOption_Click()
  setCaptionType (1)
End Sub

Private Sub TableOption_Click()
  setCaptionType (2)
End Sub

Private Sub EquationOption_Click()
  setCaptionType (3)
End Sub

Private Sub User1Option_Click()
  setCaptionType (4)
End Sub

Private Sub User2Option_Click()
  setCaptionType (5)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    CancelButton_Click
  End If
End Sub
Attribute VB_Name = "CaptionModule"
Option Explicit
Dim CptName As String

Sub goTableOfFigures(n As Long)
Dim Leader As Long
Dim uLevel As Long
Dim iLabel As Boolean
Dim fMat As Long
 With CaptionForm
  Leader = wdTabLeaderSpaces
  If .SpacesOption.Value Then Leader = wdTabLeaderSpaces
  If .DotsOption.Value Then Leader = wdTabLeaderDots
  If .DashesOption.Value Then Leader = wdTabLeaderDashes
  If .DoubleLinesOption.Value Then Leader = wdTabLeaderLines
  If .HeavyLineOption.Value Then Leader = wdTabLeaderHeavy
  If .MiddleDotOption.Value Then Leader = wdTabLeaderMiddleDot
  
  iLabel = True
  If .IncludeNoneOption.Value Then
    uLevel = 1
    iLabel = False
  End If
  If .IncludeHead1Option.Value Then uLevel = 1
  If .IncludeHead2Option.Value Then uLevel = 2
  If .IncludeHead3Option.Value Then uLevel = 3
  
  If .CenteredOption Then fMat = wdTOFCentered
  If .ClassicOption Then fMat = wdTOFClassic
  If .DistinctiveOption Then fMat = wdTOFDistinctive
  If .FormalOption Then fMat = wdTOFFormal
  If .SimpleOption Then fMat = wdTOFSimple
  If .TemplateOption Then fMat = wdTOFTemplate
End With

'Caption must be Table, Figure or Equation or can be other using Add CaptionLabels
    With ActiveDocument
        .TablesOfFigures.Add Range:=Selection.Range, Caption:=CptName, _
            IncludeLabel:=CaptionForm.IncludeLabelCheckbox.Value, RightAlignPageNumbers:=True, _
            UseHeadingStyles:=iLabel, UpperHeadingLevel:=uLevel, LowerHeadingLevel:=uLevel, _
            IncludePageNumbers:=CaptionForm.PageNoCheckbox.Value, AddedStyles:="", UseHyperlinks:=False, _
            HidePageNumbersInWeb:=True
        .TablesOfFigures(1).TabLeader = Leader
        .TablesOfFigures.Format = fMat  'wdIndexIndent
    End With
    
  CaptionForm.hide
    
End Sub


Sub ShowCaptionTable(n As Long)
Dim Cpt As CaptionLabel
Dim j As Long
  With CaptionForm
    .User1Option.Enabled = False
    .User2Option.Enabled = False
    checkCaptions
    j = 0
    For Each Cpt In CaptionLabels
      If Cpt.Name <> "Figure" And Cpt.Name <> "Table" And Cpt.Name <> "Equation" Then
        j = j + 1
        If j = 1 Then
          .User1Option.Enabled = True
          .User1Option.Caption = Cpt.Name
        End If
        If j = 2 Then
          .User2Option.Enabled = True
          .User2Option.Caption = Cpt.Name
        End If
      End If
    Next Cpt
    
    n = 0
    If .FigureOption.Value Then n = 1
    If .TableOption.Value Then n = 2
    If .EquationOption.Value Then n = 3
    If .User1Option.Value Then n = 4
    If .User2Option.Value Then n = 5
    setCaptionType (n)
    
    .StartUpPosition = 0
    .Left = TOCForm.Left - 50
    .Top = TOCForm.Top

    .Show
  End With
End Sub

Sub setCaptionType(n As Long)
  CptName = ""
  Select Case n
    Case 0
      CptName = ""
    Case 1
      CptName = "Figure"
    Case 2
      CptName = "Table"
    Case 3
      CptName = "Equation"
    Case 4
      CptName = CaptionForm.User1Option.Caption
    Case 5
      CptName = CaptionForm.User2Option.Caption
  End Select
  If CptName = "" Then
    CaptionForm.CreateFigureTableButton.Caption = "No caption label set"
  Else
    CaptionForm.CreateFigureTableButton.Caption = "Create table of " & CptName & "s"
  End If
End Sub

Private Sub checkCaptions()
Dim aField As Field
Dim Cpt As CaptionLabel
Dim fName As String
Dim s As String
  s = ""
  For Each aField In ActiveDocument.Fields
    If aField.Type = wdFieldSequence Then
      For Each Cpt In CaptionLabels
        fName = aField.Code
        If InStr(fName, Cpt.Name) > 0 Then GoTo FFX
        
      Next Cpt
      If InStr(s, fName) = 0 Then s = s & "  " & fName
    End If
FFX:
  Next aField
  If s <> "" Then MsgBox "The following caption labels are not in the collection:" & vbCrLf & s & _
    vbCrLf & "Probably because the document was generated in an earlier Word version" & _
    vbCrLf & vbCrLf & "You need to create the label before generating a Table of Captions"
  
End Sub

Sub InsertCaption(n As Long)
  Dialogs(wdDialogInsertCaption).Show
End Sub

Attribute VB_Name = "ChapterNumbering"
Attribute VB_Base = "0{6E83F2E9-C5C5-4381-857B-F104325960AC}{3B51281A-FDBE-47C7-A17A-B1A19A7F2F9A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub ExitButton_Click()
  ChapterNumbering.hide
End Sub

Private Sub FollowOnOption_Click()
  ChapterNumbering.NumberingTextbox.Enabled = False
End Sub

Private Sub RestartOption_Click()
  ChapterNumbering.NumberingTextbox.Enabled = True
End Sub

Private Sub SectionListbox_Click()
  SectListboxChange (1)
End Sub

Private Sub SetChapterButton_Click()
  Call Set_Numbering(False, False)
  Call checkSections
End Sub

Private Sub SetPageNumberingButton_Click()
  Call Set_Numbering(True, True)
  Call checkSections
End Sub

Private Sub RemoveChapterButtom_Click()
  Call Set_Numbering(True, False)
  Call checkSections
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    ExitButton_Click
  End If
End Sub
Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{CB1237BA-02AB-4779-B3E4-42032647F7DC}{FE0BB215-5162-46DF-BF99-0676765DBD88}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub Help0Closebutton_Click()
  HelpForm.hide
End Sub

Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
  ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    HelpCancelButton_Click
  End If
End Sub

Attribute VB_Name = "HelpModule"
Option Explicit

Sub HelpFormDisplay(n As Long)
Dim s As String

 If n = 0 Then
  s = "CREATE A TABLE OF CONTENTS (TOC)" & vbCrLf & _
  "Click Create TOC button to create a TOC from the active heading styles shown." & vbCrLf & _
  vbCrLf & "Click More >> to edit the active heading styles list and change other TOC parameters"
  s = s & vbCrLf & vbCrLf & "Other options can give TOCs for chapters, multiple documents, TC fields, reverse links and Tables of Captions."
  With HelpForm
    .Helptxt0.Caption = s
    .HelpTxt1.Caption = ""
    .Help0Closebutton.Visible = True
    .Height = 160
  End With
 Else ' *********** Full help ******************************
   HelpForm.Height = 702
   HelpForm.Help0Closebutton.Visible = False
   With HelpForm.Helptxt0
    s = "CREATE A TABLE OF CONTENTS" & vbCrLf
    s = s & "(a)   Set the lower and upper heading levels." & vbCrLf & _
        "(b)   Set the tab leaders, page numbering and right justify options." & vbCrLf & _
        "(c)   Check 'Include TC fields' if they are to be included." & vbCrLf & _
        "(d)   Click Create TOC. If cursor is inside an existing TOC then it will be replaced." & vbCrLf & _
        "(e)   If you want the TOC from any heading style then tick 'From any heading style'"
    s = s & vbCrLf & "TOCs can be created for the whole document, the current Section or a bookmarked range."
    s = s & vbCrLf & vbCrLf & "UPDATE TABLES OF CONTENTS" & vbCrLf
    s = s & "Click 'Update Page Numbers in TOC' or 'Update all entries in TOCs'"
    s = s & vbCrLf & vbCrLf & "REVERSE LINK HEADINGS TO TOC" & vbCrLf
    s = s & "This reverse links heading paragraphs to their TOC entries. Clicking on a heading paragraph will jump the selection to the TOC entry. " & vbCrLf & _
        "If the TOC is re-created then the reverse links should be removed with the 'Remove reverse links' button and the links re-created."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt1
    s = "SET HEADING STYLES FOR TOC" & vbCrLf & _
     "The up and down arrows to move styles from and to the 'Active Heading Styles for TOC' list." & vbCrLf
    s = s & "More than one style can have the same TOC level." & vbCrLf & vbCrLf
    s = s & "GIVE A HEADING ATTRIBUTE TO STYLE OR REMOVE HEADING ATTRIBUTE"
    s = s & vbCrLf & _
        "Click the 'Give heading level to another style' button and follow the prompts."
    .Caption = s
  End With
 
  With HelpForm.HelpTxt3
    s = "CREATE TABLE OF FIGURES/TABLES/FORMULA" & vbCrLf
    s = s & "Captions for Figures, Tables, Formula and user defined captions must be preset." & vbCrLf & _
        "(a)   Use the Bullets & Numbering module to set caption numbering " & vbCrLf & _
        "(b)   Click 'Table of Captions for Figures/Tables/Equations' button" & vbCrLf & _
        "(c)   Select Caption type and format options. Click 'Create Table for ...' button."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt4
    s = "CHAPTER NUMBERING. SETTING AND REMOVAL" & vbCrLf
    s = s & "(a)   Click 'Set chapter and page numbering'. An additional menu form will be shown.  " & vbCrLf & _
        "(b)   Select a section or All sections" & vbCrLf & "(c)   Select a style from the Heading styles for TOC list" & vbCrLf & _
        "(d)   Select the link character that will be placed between the chapter and page numbers" & vbCrLf & _
        "(e)   Click 'Set chapter page numbering for sect'" & vbCrLf & _
        "Chapter numbering can be removed with the 'remove chapter page numbering sect' button."
    .Caption = s
  End With
  With HelpForm.Helptxt5
    s = "SETUP TC FIELDS" & vbCrLf
    s = s & "TC fields can used to generate TOCs either alone or in conjunction with Heading styles. They are particularly useful in creating TOCs for documents that do not use heading styles, for example documents that have only Normal styles."
    s = s & " This tool can search for paragraphs with specified criteria such as style, font size and bolding and place a TC field at the paragraph." & vbCrLf
    s = s & "This tool only generates the default 'C' table ID. Note: there is a bug in Word 2010, the option to suppress page numbers will not work. The bug is not present in Word 2007 or 2013"
    s = s & vbCrLf & vbCrLf & "OTHER OPTIONS" & vbCrLf & _
      "Modify TOC styles button will bring up Word's Styles dialog box." & vbCrLf & _
      "CTRL/Click sets the action to jump to the heading in the document. If set then it is necessary" & vbCrLf & _
      "to hold down the CTRL key when clicking the TOC entry."
    .Caption = s
  End With
 End If
  HelpForm.Show
End Sub

Attribute VB_Name = "InputLevelForm"
Attribute VB_Base = "0{D26BFEB6-2CEF-4A49-A9C2-0188739E0A93}{657C5346-22E4-470E-8F3C-B05A1CAC4F99}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub InuseListbox_Click()
  changeStyeSelection (1)
End Sub

Private Sub LevelCancelButton_Click()
  InputLevelForm.LevelTextbox.Value = ""
  InputLevelForm.hide
End Sub

Private Sub LevelYesButton_Click()
  makeLevel (True)
End Sub

Private Sub RemoveLevelButton_Click()
 makeLevel (False)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    LevelCancelButton_Click
  End If
End Sub
Attribute VB_Name = "MultipleDocForm"
Attribute VB_Base = "0{D354B65B-470B-44B1-8891-498F82FE7290}{95D13B71-C516-46A8-B918-47498C18706E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelMultiDocButton_Click()
  MultipleDocForm.hide
End Sub

Private Sub CreateMultiDocTOC_Click()
  GenerateMultiDocTOC (Trim(MultipleDocForm.GenericDocTextbox.Value))
End Sub

Private Sub SpanNumberingButton_Click()
  SpannedPageNumbering (Trim(MultipleDocForm.GenericDocTextbox.Value))
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    CancelMultiDocButton_Click
  End If
End Sub
Attribute VB_Name = "ReverseLinksForm"
Attribute VB_Base = "0{976D13F1-4793-4B74-B1EB-01BE4FA6C41E}{A0FF6842-52CF-4AE0-ABA9-A010B3A6681F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub RemoveReverseLinksButton_Click()
  RemoveReverseLinks (1)
End Sub

Private Sub ReverseCancelButton_Click()
  ReverseLinksForm.hide
End Sub

Private Sub ReverseLinkButton_Click()
  ReverseLinkHeadings (1)
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    ReverseCancelButton_Click
  End If
End Sub
Attribute VB_Name = "TCForm"
Attribute VB_Base = "0{85984D31-F8AF-4B74-9B90-E6177788A5BB}{E88148D9-A11E-4A08-880A-99A4A2AF39F1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub CancelTCForm_Click()
  TCForm.hide
End Sub

Private Sub CreateTCButton_Click()
  CreateTC (1)
End Sub

Private Sub LoadParaButton_Click()
  LoadParagraph (1)
End Sub

Private Sub NextParaButton_Click()
  NextPara (1)
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  If CloseMode = 0 Then
    Cancel = True
    CancelTCForm_Click
  End If
End Sub
Attribute VB_Name = "TCModule"
Option Explicit

Sub setupTC(n As Long)
  With TCForm
    TCForm.StyleTextbox.Value = "??"
    On Error Resume Next
    TCForm.StyleTextbox.Value = Selection.Style.NameLocal
    TCForm.TCTextbox.Value = Selection.Range.Text
    .Show
  End With
End Sub

Sub NextPara(n As Long)
Dim fontSize As Single
Dim aRange As Range
Dim bRange As Range
Dim aPara As Paragraph
Dim pTest As Boolean
Dim txt As String
Dim aStyle As String
Dim j As Long
Dim jTotal As Long
Dim jChanged As Long
Dim L As Long
Dim s As String
  jTotal = 0
  jChanged = 0
  With TCForm
    If .SizeOption Then
      If Not IsNumeric(.SizeValueText.Value) Then
        MsgBox "Error in font size"
        Exit Sub
      End If
      fontSize = Val(.SizeValueText.Value)
    End If
    If .PlainTextOption Then
      If Not IsNumeric(.PlainSizeValue.Value) Then
        MsgBox "Error in font size"
        Exit Sub
      End If
      fontSize = Val(.PlainSizeValue.Value)
    End If
 '   .GoChangeNormalButton.Enabled = False
  
    aStyle = Trim(.StyleTextbox.Value)
    ' test if valid style   *****
    Set aRange = Selection.Range
    aRange.Start = Selection.Range.Paragraphs(1).Range.Start
    aRange.End = aRange.Start
    aRange.MoveStart unit:=wdParagraph, Count:=1
  
    If .AllParasOption.Value = True Then
      Set aPara = aRange.Paragraphs(1)
 '     Global_Change
      GoTo XXT
    End If
    Set bRange = aRange
    bRange.End = ActiveDocument.Range.End
    
    For Each aPara In bRange.Paragraphs
    
      If aPara.Style = aStyle Or aStyle = "" Then
      
      pTest = True
      
      If .BoldCheckbox And Not aPara.Range.Bold Then pTest = False
      If .ItalicCheckbox And Not aPara.Range.Italic Then pTest = False
      If .UnderlinedCheckbox.Value Then If aPara.Range.Underline = wdUnderlineNone Then pTest = False
      If .CapitalsCheckbox.Value Then
        txt = UCase(aPara.Range.Text)
        If Len(txt) > 2 Then If txt <> aPara.Range.Text Then pTest = False
      End If
      
      If .NumberedCheckbox.Value Then
        L = getParaNumbType(aPara)
        If L = 0 Then ' no numbering
          txt = Left(aPara.Range.Text, 1)
          If txt < "0" Or txt > "9" Then pTest = False
        End If
      End If
        
      If aPara.Range.Text = Chr(13) Or aPara.Range.Text = Chr(12) Then pTest = False
        
      If .SizeOption.Value Then If aPara.Range.Font.Size <= fontSize Then pTest = False
      
      If .PlainTextOption.Value Then _
        If aPara.Range.Font.Size <> fontSize Then pTest = False
'aPara.Range.Select

'        If TestPlainText(aPara) = False Then
'          pTest = False
'        Else
 '         If aPara.Range.Font.Size <> fontSize Then pTest = False
'        End If
'      End If

      If .NumericCheckbox Then
        If Left(aPara.Range.Text, 1) < "0" Or Left(aPara.Range.Text, 1) > "9" Then pTest = False
      End If
    
    If pTest Then GoTo XXT
 
   End If
   
XXP:
   
  Next aPara
  MsgBox "Paragraph with criteria not found"
  TCForm.TCTextbox.Value = ""
  Exit Sub
XXT:
  aPara.Range.Select
  s = Selection.Paragraphs(1).Range.Text
  If Right(s, 1) = Chr(13) Then s = Left(s, Len(s) - 1)
  TCForm.TCTextbox = s
  End With
End Sub
Sub GotoDocStart(n As Long)
  ActiveDocument.Range.Characters(1).Select
  Selection.Collapse direction:=wdCollapseStart
End Sub

Function TestPlainText(aPara As Paragraph) As Boolean
Dim txt As String
Dim fontSize As Single
  TestPlainText = False
  With aPara
'.Range.Select
    If .Range.Bold = -1 Then Exit Function ' partially bold or italic returns 9999999
    If .Range.Italic = -1 Then Exit Function
    fontSize = TCForm.PlainSizeValue.Value
    If .Range.Font.Size <> fontSize Then Exit Function
    If .Range.Underline <> 0 And .Range.Underline < 999999 Then Exit Function ' value gives type of underline
    txt = aPara.Range.Text
    If Len(txt) = 1 Then Exit Function
    If UCase(txt) = aPara.Range.Text Then Exit Function
    If Left(txt, 1) >= "0" And Left(txt, 1) <= "9" Then Exit Function
    If InStr(txt, Chr(9)) > 0 Then Exit Function
    If getParaNumbType(aPara) > 0 Then Exit Function
  End With
  TestPlainText = True
End Function
Function getParaNumbType(aPara As Paragraph) As Long
Dim L As Long
' 0=no bullet, numbering or outline
' 1=listnum fields in body of para
' 2=listbullet
' 3=simple numeric list
' 4=outline list
' 5=mixed list
' 6=picture bulleted
' BUG. a paragraph that has no list numbering applied returns 1  whereas it really ought to return nothing or 0, or 10, or 9999
' Distinguish unnumbered paragraphs from paragraphs which genuinely have a List Level of 1
  L = aPara.Range.ListFormat.ListType
  If L = 1 Then
    If aPara.Range.ListParagraphs.Count <> 1 Then L = 0
  End If
  getParaNumbType = L
End Function

Sub CreateTC(n As Long)
Dim SelectedText As String
Dim s As String
Dim ss As String
  Selection.Collapse direction:=wdCollapseStart
  SelectedText = Trim(TCForm.TCTextbox.Value)
  If SelectedText = "" Then
    MsgBox "There is no text"
    Exit Sub
  End If
  s = Trim(TCForm.HeadLevelTextbox.Value)
  If Len(s) <> 1 Then
    MsgBox "Incorrect heading level given"
    Exit Sub
  End If
  If s < "0" Or s > "9" Then
    MsgBox "Invalid heading level"
    Exit Sub
  End If
  s = "\l " & Chr$(34) & s & Chr$(34)
  ss = ""
  If TCForm.MultipleTablesCheckbox Then ss = " \f"
  If TCForm.SuppressNumbCheckbox Then ss = ss & " \n"
  
  SelectedText = Chr$(34) & SelectedText & Chr$(34) & " " & s & ss
  
 Selection.Fields.Add Range:=Selection.Range, _
     Type:=wdFieldTOCEntry, Text:=SelectedText
     
 '     Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
 '       SelectedText, PreserveFormatting:=False
 
  Selection.Move unit:=wdParagraph
End Sub

Sub LoadParagraph(n As Long)
Dim s As String
  s = Selection.Paragraphs(1).Range.Text
  If Right(s, 1) = Chr(13) Then s = Left(s, Len(s) - 1)
  TCForm.TCTextbox.Value = s
End Sub

Attribute VB_Name = "TOCForm"
Attribute VB_Base = "0{BB67697A-1952-4E83-B681-1807931AFBC3}{3FBFBD69-3281-4A0F-B523-166E4D675DC5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CaptionButton_Click()
  ShowCaptionTable (1)
End Sub

Private Sub ChapNumButton_Click()
  SetupChaptNumbering (1)
End Sub

Private Sub ClickOptionOff_Click()
  ClickOption (False)
End Sub

Private Sub ClickOptionOn_Click()
  ClickOption (True)
End Sub

Private Sub FollowOnOption_Click()
  TOCForm.NumberingTextbox.Enabled = False
End Sub

Private Sub Close1Button_Click()
  TOCForm.hide
End Sub

Private Sub CloseButton_Click()
  TOCForm.hide
End Sub

Private Sub CommandButton2_Click()
  showExtras (True)
End Sub

Private Sub CommandButton3_Click()
  showExtras (False)
End Sub

Private Sub GiveStyleHeadingButton_Click()
  ShowMakeLevel (1)
End Sub

Private Sub GotoTOCButton_Click()
  gotoNextTOC (1)
End Sub

Private Sub Help1Button_Click()
  HelpFormDisplay (0)
End Sub

Private Sub HelpButton_Click()
 HelpFormDisplay (1)
End Sub

Private Sub MailLessButton_Click()
   toggleHeight (False)
End Sub

Private Sub MoreButton_Click()
  toggleHeight (True)
End Sub

Private Sub MultipleDocButton_Click()
  MultipleDocTOC (1)
End Sub

Private Sub PageNumbersCheckBox_Click()
  With TOCForm
    .ExcludeLevelCheckbox.Enabled = .PageNumbersCheckBox.Value  ' .ExcludeLevelCheckbox.Enabled
  '  .ExcludeLevelTextbox.Enabled = Not .ExcludeLevelTextbox.Enabled ' ***** =""
  End With
End Sub

Private Sub RemoveStyleButton_Click()

End Sub

Private Sub ReverseButton_Click()
  ReverseLinksForm.Show
End Sub

Private Sub SetupTCButton_Click()
  setupTC (1)
End Sub

Private Sub ShowFieldCodesOption_Click()
 aShowFieldcodes (True)
End Sub

Private Sub HideFieldCodesOption_Click()
  aShowFieldcodes (False)
End Sub

Private Sub NewTableButton_Click()
InsertTOC (False)
End Sub

Private Sub RestartOption_Click()
  TOCForm.NumberingTextbox.Enabled = True
End Sub

Private Sub ShowTCCheckbox_Click()
  changeTCShow (1)
End Sub

Private Sub ThisTOCStyles_Click()
  If TOCForm.ThisTOCStyles.ListIndex > -1 Then
    ChapterNumbering.HeadStyleLabel = TOCForm.ThisTOCStyles.List(TOCForm.ThisTOCStyles.ListIndex)
  End If
End Sub

Private Sub TOCAllOption_Click()
  changeGoButton (1)
End Sub

Private Sub TOCBookmarkOption_Click()
  changeGoButton (3)
End Sub

Private Sub TOCSectionOption_Click()
  changeGoButton (2)
End Sub

Private Sub UpdateAllButton_Click()
  UpdateTOC (False)
End Sub

Private Sub UpdatePagenumbersButton_Click()
  UpdateTOC (True)
End Sub

'Private Sub CreateTOCButton_Click()
'  CreateManualTOC (1)
'End Sub

Private Sub LoadStyle1Button_Click()
  LoadManualstyle (1)
End Sub

Private Sub LoadStyle2Button_Click()
  LoadManualstyle (2)
End Sub

Private Sub LoadStyle3Button_Click()
  LoadManualstyle (3)
End Sub


Private Sub MoveStyleButton_Click()
  MoveStyle (1)
End Sub

Private Sub RemoveStylesButton_Click()
  RemoveStyle (1)
End Sub

Private Sub ShadingSelectedOption_Click()
  ChangeFieldShading (1)
End Sub

Private Sub ShadingAlwaysOption_Click()
  ChangeFieldShading (2)
End Sub

Private Sub ShadingNeverOpotion_Click()
  ChangeFieldShading (3)
End Sub



Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "TOCModule"
Option Explicit
Dim StylesInUse() As String
Dim HeadingStyles() As String
Dim oldTOC() As String
Dim testStyleName() As String
Dim testStyleLevel() As Integer
Dim testStyleNo As Long
Dim styleNo As Long
Dim oldTOCCount As Long
Dim headingNo As Long
Public vPoints As Single
Public hPoints As Single
Dim bkName As String

Sub Go_TOC()

  ActiveDocument.TrackRevisions = False
  Call GiveScreenPoints(hPoints, vPoints)
  With TOCForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 16
    .HeadingStylesListbox.ListIndex = -1
    InputLevelForm.InuseListbox.ListIndex = -1
    If Options.CtrlClickHyperlinkToOpen Then
      .ClickOptionOn = True
    Else
      .ClickOptionOff = True
    End If
    changeGoButton (1)
    setShowFieldCodes
    .MoreButton.Caption = "More >>"
    .Height = 226
    toggleHeight (False)
 
    .Show
  
    fillStyleLists
    fillThisTOCStyles
    fillTCfields
    .ThisTOCStyles.ListIndex = 0
    .ExcludeLevelCheckbox.Enabled = .PageNumbersCheckBox.Value
    .ExcludeLevelTextbox.Enabled = .PageNumbersCheckBox.Value
    .ShowTCCheckbox.Value = ActiveWindow.View.ShowHiddenText
  End With
End Sub

Sub toggleHeight(maximise As Boolean)
  With TOCForm
    If maximise Then
      .Height = 450
      .MoreButton.Visible = False
      .Close1Button.Visible = False
      .Help1Button.Visible = False
    Else
      .Height = 226
      .Width = 318
      .Left = hPoints - .Width - 16
      .MoreButton.Visible = True
      .Close1Button.Visible = True
      .Help1Button.Visible = True
    End If
  End With
End Sub

Sub showExtras(expand As Boolean)
  With TOCForm
    If expand Then
      .Width = 470
    Else
      .Width = 318
    End If
    .Left = hPoints - .Width - 16
  End With
End Sub

Sub changeTCShow(n As Long)
  ActiveWindow.View.ShowHiddenText = TOCForm.ShowTCCheckbox.Value
End Sub
Sub changeGoButton(goOption As Long)
  With TOCForm
    Select Case goOption
      Case 1
        .NewTableButton.Caption = "Create TOC for" & " document"
      Case 2
        .NewTableButton.Caption = "Create TOC for" & vbCrLf & "current Section"
      Case 3
        bkName = getBookmark
        .NewTableButton.Caption = "Create TOC for" & vbCrLf & "bookmark " & bkName
    End Select
  End With
End Sub

Function getBookmark() As String
Dim aBookmark As Bookmark
  If ActiveDocument.Bookmarks.Count < 1 Then
    MsgBox "No bookmarks in document"
    getBookmark = "none"
    Exit Function
  End If
  BookmarksForm.BookmarksListbox.Clear
  For Each aBookmark In ActiveDocument.Bookmarks
    If Left(aBookmark.Name, 1) <> "_" Then
      BookmarksForm.BookmarksListbox.AddItem aBookmark.Name
    End If
  Next aBookmark
  BookmarksForm.Show
  
  If BookmarksForm.BookmarksListbox.ListIndex = -1 Then
    getBookmark = "none"
  Else
    getBookmark = BookmarksForm.BookmarksListbox.List(BookmarksForm.BookmarksListbox.ListIndex)
  End If
End Function

Function TOCinRange(r As Range) As Boolean
Dim k As Long
  TOCinRange = True
  k = 1
  Do While k <= r.Fields.Count
    If InStr(r.Fields(k).Code, "TOC") > 0 Then Exit Function
    k = k + 1
  Loop
  TOCinRange = False
End Function

Private Sub fillStyleLists()
Dim styy As Style
Dim oldRange As Range
Dim pageRange As Range
  Application.ScreenUpdating = True  ' must be true for routine to work
  Options.Pagination = False ' ??????????????????
  Set oldRange = Selection.Range ' to return to starting point
  
  ' select whole page test to see if it contains a TOC
  Selection.GoTo what:=wdGoToBookmark, Name:="\Page"
  If TOCinRange(Selection.Range) Then
  ' move to first page
    Set pageRange = Selection.Range
    Selection.Start = ActiveDocument.Range.Start
    Selection.End = Selection.Start
    Selection.GoTo what:=wdGoToBookmark, Name:="\Page" ' select whole of page
    ' if first page contains a TOC then move to last page
    If TOCinRange(Selection.Range) Then
      Selection.End = ActiveDocument.Range.End
      Selection.Start = Selection.End
      Application.ActiveWindow.ScrollIntoView ActiveDocument.Range, False
    End If
  End If

  GO_fillStyleLists
  Application.ActiveWindow.ScrollIntoView pageRange, True
  Application.ScreenUpdating = True
  oldRange.Select
  Options.Pagination = True
End Sub

Private Sub GO_fillInuseStyles()
Dim aStyle As Style
Dim strng As String
Dim oRange As Range
Dim pCount As Long
  pCount = ActiveDocument.Range.Paragraphs.Count
  InputLevelForm.InuseListbox.Clear
  styleNo = -1
  ReDim StylesInUse(1)
  Set oRange = ActiveDocument.Range
  For Each aStyle In ActiveDocument.Styles
    If aStyle.InUse And aStyle.Type = wdStyleTypeParagraph Then
      If pCount < 500 Then '4000 Then ' if doc is too search large takes too long
        Set oRange = ActiveDocument.Range
        With oRange.Find
          .ClearFormatting
          .Style = aStyle
          If .Execute(FindText:="", replacewith:="", MatchCase:=False, Wrap:=wdFindStop, _
          MatchWholeWord:=False, Forward:=False, Replace:=wdReplaceNone) Then
            styleNo = styleNo + 1
            ReDim Preserve StylesInUse(styleNo)
            StylesInUse(styleNo) = aStyle
            GoTo nxtStyle
          End If
       End With
    Else ' for large document
       styleNo = styleNo + 1
       ReDim Preserve StylesInUse(styleNo)
       StylesInUse(styleNo) = aStyle
    End If
  End If
nxtStyle:
  Next aStyle
  If styleNo >= 0 Then InputLevelForm.InuseListbox.List() = StylesInUse
End Sub

Private Sub GO_fillStyleLists()
Dim aStyle As Style
Dim strng As String
Dim oRange As Range
Dim k As Long
Dim n As Long

  headingNo = -1
  n = 0
  ReDim HeadingStyles(1)
 
  Set oRange = ActiveDocument.Range
  For Each aStyle In ActiveDocument.Styles
    n = n + 1
    If aStyle.InUse And aStyle.Type = wdStyleTypeParagraph Then
      k = 0
      On Error Resume Next
      k = aStyle.ParagraphFormat.OutlineLevel
      On Error GoTo 0
      If k > 0 And k < 10 Then
        headingNo = headingNo + 1
        ReDim Preserve HeadingStyles(headingNo)
        strng = str(aStyle.ParagraphFormat.OutlineLevel) & "  "
        HeadingStyles(headingNo) = strng & aStyle.NameLocal
      End If
    End If

  Next aStyle

  If headingNo >= 0 Then
    sortHeadings Hs:=HeadingStyles
    TOCForm.HeadingStylesListbox.List() = HeadingStyles
  Else
    For k = 1 To 9
      headingNo = headingNo + 1
      ReDim Preserve HeadingStyles(headingNo)
     strng = Trim(str(k))
     strng = strng & "  " & "Heading " & strng
     HeadingStyles(headingNo) = strng
   Next k
   TOCForm.HeadingStylesListbox.List() = HeadingStyles
    
  End If
 
  TOCForm.OtherTablesLabel.Caption = str(ActiveDocument.TablesOfContents.Count) & " TOCs in document"
  
End Sub

Private Sub fillThisTOCStyles()
Dim j As Long
Dim k As Long
Dim aRange As Range
Dim aTOC As Field
Dim showHold As Boolean
Dim txt As String
Dim str As String
Dim strN As String
  TOCForm.ThisTOCStyles.Clear
  j = ActiveDocument.TablesOfContents.Count
  If j = 0 Then GoTo HDefault

  Set aRange = ActiveDocument.TablesOfContents(1).Range
  Set aTOC = aRange.Fields(1)
  showHold = aTOC.ShowCodes
  aTOC.ShowCodes = True
  txt = aTOC.Code
  aTOC.ShowCodes = showHold
  j = InStr(1, txt, "\t")
  If j = 0 Then j = InStr(1, txt, "\T")
  If j = 0 Then GoTo HDefault
  txt = Mid(txt, j + 4)
  j = InStr(1, txt, """")
  txt = Left(txt, j - 1)
  
  k = InStr(1, txt, ",")
  Do Until k = 0
    str = Left(txt, k - 1)
    txt = Mid(txt, k + 1)
    strN = Left(txt, 1)
    txt = Mid(txt, 3)
    TOCForm.ThisTOCStyles.AddItem strN & "  " & str
    k = InStr(1, txt, ",")
  Loop
  
  If str <> "" Then Exit Sub
  
HDefault:
  With TOCForm.ThisTOCStyles
    .AddItem "1  Heading 1"
    .AddItem "2  Heading 2"
    .AddItem "3  Heading 3"
    .AddItem "4  Heading 4"
  End With

End Sub

Private Sub fillTCfields()
Dim aRange As Range
Dim aTOC As Field
Dim showHold As Boolean
Dim CodeTxt As String
Dim j As Long
Dim s As String
Dim tgl As Boolean
  tgl = False
  If ActiveDocument.TablesOfContents.Count = 0 Then Exit Sub
   Set aRange = ActiveDocument.TablesOfContents(1).Range
  Set aTOC = aRange.Fields(1)
    showHold = aTOC.ShowCodes
  aTOC.ShowCodes = True
  CodeTxt = aTOC.Code
  aTOC.ShowCodes = showHold
  j = InStr(1, UCase(CodeTxt), "\N")
  With TOCForm
    If j > 0 Then
      s = Mid(CodeTxt, j + 3, 3)
      .ExcludeLevelCheckbox.Value = True
      .ExcludeLevelTextbox.Value = s
      tgl = True
    Else
      .ExcludeLevelCheckbox.Value = False
      .ExcludeLevelTextbox.Value = "1-3"
    End If
    .IncludeTCCheckbox.Value = False
    j = InStr(1, UCase(CodeTxt), "\F")
    If j > 0 Then
      If UCase(Mid(CodeTxt, j + 3, 1)) = "C" Then
        .IncludeTCCheckbox.Value = True
        tgl = True
      End If
    End If
  End With
  If tgl Then toggleHeight (tgl)
End Sub

Private Sub sortHeadings(ByRef Hs() As String)
Dim j As Long
Dim k As Long
Dim Hn As Long
Dim strng As String
  Hn = UBound(Hs)
  If Hn < 0 Then Exit Sub
  For j = 0 To Hn - 1
    For k = j + 1 To Hn
      If Hs(j) > Hs(k) Then
        strng = Hs(j)
        Hs(j) = Hs(k)
        Hs(k) = strng
      End If
    Next k
  Next j
End Sub

Private Sub sortHeadingsZZ()
Dim j As Long
Dim k As Long
Dim Hn As Long
Dim strng As String
  Hn = UBound(HeadingStyles)
  If Hn < 0 Then Exit Sub
  For j = 0 To Hn - 1
    For k = j + 1 To Hn
      If HeadingStyles(j) > HeadingStyles(k) Then
        strng = HeadingStyles(j)
        HeadingStyles(j) = HeadingStyles(k)
        HeadingStyles(k) = strng
      End If
    Next k
  Next j
End Sub

Sub ShowMakeLevel(n As Long)
  GO_fillInuseStyles
  With InputLevelForm
    .LevelTextbox.Value = "1"
    .LevelTextbox.SelStart = 0
    .LevelTextbox.SelLength = Len(.LevelTextbox.Text) ' to select inside textbox
 '   .Caption = "Style " & aStyle.NameLocal
    .Left = hPoints - .Width - 6
    .Top = 150
    .Show
  End With
End Sub

Sub changeStyeSelection(n As Long)
Dim j As Long
Dim k As Long
Dim aStyle As Style
   j = InputLevelForm.InuseListbox.ListIndex
   Set aStyle = ActiveDocument.Styles(StylesInUse(j))
   k = aStyle.ParagraphFormat.OutlineLevel
   InputLevelForm.LevelTextbox.Value = Trim(str(k))
End Sub

Sub makeLevel(make As Boolean) ' make=true to apply level, false to remove
Dim aStyle As Style
Dim j As Long
Dim k As Long
Dim strng As String
  j = InputLevelForm.InuseListbox.ListIndex
  If j < 0 Then
    MsgBox "Select a style in All Headings and try again"
    Exit Sub
  End If
  strng = InputLevelForm.LevelTextbox.Value
  
'  strng = InputBox("Level for this style (1 to 9)", "Make style " & aStyle.NameLocal & "  heading", "1", 50)
  If strng = "" Then Exit Sub ' cancel
  If Not IsNumeric(strng) Then
    MsgBox "Invalid entry"
    Exit Sub
  End If
  k = Val(strng)
  If k < 0 Or k > 10 Then
    MsgBox k & " is an incorrect level. Must be in range 1 - 10"
    Exit Sub
  End If
  Set aStyle = ActiveDocument.Styles(StylesInUse(j))
  If Left(aStyle.NameLocal, 7) = "Heading" Then
    MsgBox "Cannot change level of an inbuilt heading style"
    Exit Sub
  End If
  If Not make Then k = 10
  InputLevelForm.hide
  If k = 0 Then k = 10 ' 10 = no outline level
  aStyle.ParagraphFormat.OutlineLevel = k
  
  fillStyleLists

End Sub

Sub InsertTOC(isChapter As Boolean)
Dim j As Long
Dim k As Long
Dim strng As String
  k = 0
  With TOCForm
    If .TOCAllOption Then k = 1
    If .TOCSectionOption Then k = 2
    If .TOCBookmarkOption Then k = 3
  End With
  If k = 0 Then
    MsgBox "No option selected"
  Else
    Go_InsertToc (k)
    TOCForm.HideFieldCodesOption.Value = True
  End If
End Sub

 Sub SetupChaptNumbering(n As Long)
  With ChapterNumbering
    If TOCForm.ThisTOCStyles.ListIndex > -1 Then
      .HeadStyleLabel = TOCForm.ThisTOCStyles.List(TOCForm.ThisTOCStyles.ListIndex)
    Else
      .HeadStyleLabel = ""
    End If
    checkSections
    .StartUpPosition = 0
    .Left = TOCForm.Left - 50
    .Top = TOCForm.Top
  '  .ChapTextbox.Caption = "Set page numbering with or without chapter number." & vbCrLf & vbCrLf & _
  '      "Page numbering can be set for the whole document or section by section"
    .Show
  End With
  setShowFieldCodes
End Sub

Private Sub Go_InsertToc(TOCGenOption As Long)
' 1=all of doc, 2= current section, 3= range of bookmark bkName
Dim dnH As Long
Dim upH As Long
Dim myTOC As TableOfContents
Dim Leader As Long
Dim k As Long
Dim j As Long
Dim m As String
Dim uText As String
Dim cText As String
Dim fText As String
Dim lText As String
Dim tCon As TableOfContents
Dim addStrng As String
Dim strng As String
Dim aRange As Range
Dim showHold As Boolean
'Dim bRange As Range
Dim bText As String
Dim lowerm As String
Dim upperm As String
Dim s As String
Dim aField As Field
'Dim aLength As Long
With TOCForm
  upH = Val(.UpperValueTextbox.Value)
  dnH = Val(.LowerValueTextbox.Value)
  If upH < 1 Or upH > 9 Or dnH < 1 Or dnH > 9 Then
    MsgBox "Incorrect Heading levels. Must be in range 1 to 9"
    Exit Sub
  End If
  If Not .FromAnyStylesCheckbox Then
    lText = " "
  Else
    lText = " \o " & Chr(34) & Trim(str(dnH)) & "-" & Trim(str(upH)) & Chr(34)
  End If
   
  If .ThisTOCStyles.ListCount < 0 Then
    MsgBox "There are no styles chosen"
    Exit Sub
  End If
  
  Leader = wdTabLeaderSpaces
  If .SpacesOption.Value Then Leader = wdTabLeaderSpaces
  If .DotsOption.Value Then Leader = wdTabLeaderDots
  If .DashesOption.Value Then Leader = wdTabLeaderDashes
  If .DoubleLinesOption.Value Then Leader = wdTabLeaderLines
  If .HeavyLineOption.Value Then Leader = wdTabLeaderHeavy
  If .MiddleDotOption.Value Then Leader = wdTabLeaderMiddleDot
  
  addStrng = ""
  k = .ThisTOCStyles.ListCount
  lowerm = Trim(.LowerValueTextbox.Value)
  upperm = Trim(.UpperValueTextbox.Value)
  For j = 0 To k - 1 ' all styles in styles for TOC
    strng = Trim(.ThisTOCStyles.List(j))
    m = Left(strng, 1)
    If m >= lowerm And m <= upperm Then
      addStrng = addStrng & Mid(strng, 4) & "," & Left(strng, 1) & ","
    End If
  Next j
  If addStrng <> "" Then addStrng = Left(addStrng, Len(addStrng) - 1)
    
  If TOCGenOption > 1 Then
    uText = " \u "
    If TOCGenOption = 2 Then
    cText = SectionBookmarkName
    Else
      If bkName = "none" Then
        MsgBox "No range chosen"
        Exit Sub
      End If
      cText = bkName
    End If
    If cText <> "" Then cText = " \b " & Trim(cText) '& " "
  Else
    uText = ""
    cText = ""
  End If
  
 ' k = ActiveDocument.TablesOfContents.Count
 ' If k > 0 And .ReplaceCheckbox.Value And Not isChapter And cText = "" Then
 '     Set tCon = ActiveDocument.TablesOfContents.Item(1)
 '     tCon.Range.Select
 '     tCon.Delete
 ' End If

  Set aRange = Selection.Paragraphs(1).Range
  
'aRange.Select
    If aRange.Fields.Count > 0 Then
       showHold = ActiveWindow.View.ShowFieldCodes
      If aRange.Fields.Count < 3 Then
        ActiveWindow.View.ShowFieldCodes = True 'Selection.Fields.ToggleShowCodes
        Set aRange = Selection.Paragraphs(1).Range
        aRange.Select
      End If
      If aRange.Fields(1).Type = wdFieldTOC Then
         aRange.Fields(1).Delete
      End If
      ActiveWindow.View.ShowFieldCodes = showHold
      
    End If
   Selection.Collapse
   fText = ""
   If Not .PageNumbersCheckBox Then fText = " \n "
   If .IncludeTCCheckbox Then fText = fText & " \f c"
   If .PageNumbersCheckBox And .ExcludeLevelCheckbox Then ' add \n if necessary
     s = Trim(TOCForm.ExcludeLevelTextbox.Value)
     If Left(s, 1) < "1" Or Left(s, 1) > "9" _
         Or Mid(s, 3, 1) < "1" Or Mid(s, 3, 1) > "9" _
         Or Mid(s, 2, 1) <> "-" Or Len(s) <> 3 Then
       MsgBox "Error in specifying number exclusion levels" & vbCrLf & _
           "Fix and re-run"
       TOCForm.ExcludeLevelTextbox.Value = "2-3"
       Exit Sub
     End If
     fText = fText & " \n " & s
   End If
   
  End With ' TOCform
   If addStrng <> "" Then addStrng = " \t " & """" & addStrng & """"
   strng = "TOC" & lText & fText
   fText = ""
   If TOCForm.HyperItemsCheckbox = True Then strng = strng & " \h"
   strng = strng & " \z" & addStrng & uText & cText
   
   Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, PreserveFormatting:=False, _
    Text:=strng
    
   Selection.MoveEnd unit:=wdCharacter, Count:=-1
   'Selection.Text = "TOC" & lText & fText & " \h \z" & addStrng & uText & cText

'    Selection.Fields.Update
'Selection.Select
    If TOCGenOption > 1 Or cText <> "" Then Exit Sub
    
    Set aRange = Selection.Range
    
    With ActiveDocument
      For j = 1 To .TablesOfContents.Count
        If aRange.InRange(.TablesOfContents(j).Range) Then GoTo TTC
      Next j
      
     ' MsgBox "Cannot find Table of Content"
      Exit Sub
      
TTC:
      With .TablesOfContents(j)
        .Range.Select

       ' On Error Resume Next
        .RightAlignPageNumbers = TOCForm.JustifyCheckBox.Value
'        .UseHeadingStyles = False
       ' On Error Resume Next
        .IncludePageNumbers = TOCForm.PageNumbersCheckBox.Value
        .UseHyperlinks = TOCForm.HyperItemsCheckbox.Value
        .HidePageNumbersInWeb = True
 
   '     .UseOutlineLevels = True
 '       .LowerHeadingLevel = upH
 '       .UpperHeadingLevel = dnH

        ActiveDocument.TablesOfContents.Format = wdIndexIndent
        .TabLeader = Leader
        ' above switches remove the /n switch. Add it back and update field*******
       .Range.Select
       Set aField = Selection.Fields(1)
      ' MsgBox aField.Code.Text
      ' aField.Code.Text = aField.Code.Text & fText & " " ' ****** added again?? ****
       .Update
        On Error GoTo 0
      End With
  
  End With
  Selection.Fields.Update
   TOCForm.OtherTablesLabel.Caption = str(ActiveDocument.TablesOfContents.Count) & " Table of Contents in document"
 
End Sub

Function checkSections() As Boolean
Dim j As Long
Dim inclTxt As String
Dim hStr As String
Dim fStr As String
  checkSections = False
  With ChapterNumbering.SectionListbox
    .Clear
    .ColumnCount = 4
    .ColumnHeads = False
    .ColumnWidths = "18;40;49;41"
    .AddItem ""
    .List(0, 0) = "0 "
    .List(0, 1) = "All Sectns"
    .List(0, 2) = ""
    .List(0, 3) = ""
  End With
  For j = 1 To ActiveDocument.Sections.Count
    With ActiveDocument.Sections(j).Headers(1).PageNumbers
      If .IncludeChapterNumber Then
        checkSections = True
        hStr = "Level=" & str(.HeadingLevelForChapter + 1)
      Else
        hStr = "No chapt"
      End If
                 
      If .RestartNumberingAtSection Then
        inclTxt = Trim(str(.StartingNumber))
      Else
        inclTxt = "cont"
      End If
      
      fStr = "Format=" & getOutlineFormat(.NumberStyle)
    End With
    inclTxt = "Start= " & inclTxt
    
    With ChapterNumbering.SectionListbox
      .AddItem
      .List(j, 0) = Trim(str(j))
      .List(j, 1) = hStr
      .List(j, 2) = inclTxt
      .List(j, 3) = fStr
    End With
  Next j
  ChapterNumbering.SectionListbox.ListIndex = 0 ' ?????????????????????????????
 
  
'      With Selection.Sections(1).Headers(1).PageNumbers
'        .NumberStyle = wdPageNumberStyleArabic
'        .IncludeChapterNumber = True
'        .HeadingLevelForChapter = 0
'        .ChapterPageSeparator = wdSeparatorColon
'        .RestartNumberingAtSection = False
'        .StartingNumber = 0
'    End With
End Function
Function givePagenoFormat(m As Long) As Long
Dim j As Long
  Select Case m
    Case 0
      j = wdPageNumberStyleArabic
    Case 1
      j = wdListNumberStyleUppercaseRoman
    Case 2
      j = wdPageNumberStyleLowercaseRoman
    Case 3
      j = wdListNumberStyleUppercaseLetter
    Case 4
      j = wdPageNumberStyleLowercaseLetter
'   Case 5                                  ' not available in page number style
'     j = wdListNumberStyleOrdinalText
'   Case 6
'     j = wdpageNumberStyleCardinalText
   Case Else
      j = 0
  End Select
  givePagenoFormat = j
End Function


Function getOutlineFormat(m As Long) As String ' ***********************************
  Select Case m
    Case wdPageNumberStyleArabic
      getOutlineFormat = """1,2"""
    Case wdListNumberStyleUppercaseRoman
      getOutlineFormat = """I,II"""
    Case wdPageNumberStyleLowercaseRoman
      getOutlineFormat = """i,ii"""
    Case wdListNumberStyleUppercaseLetter
      getOutlineFormat = """A,B"""
    Case wdPageNumberStyleLowercaseLetter
      getOutlineFormat = """a,b"""
    Case wdPageNumberStyleNumberInDash
      getOutlineFormat = """-1-,-2-"""
 '  Case wdListNumberStyleOrdinalText
 '    getOutlineFormat = "1st" ',2nd,.."
 '  Case wdpageNumberStyleCardinalText
 '    getOutlineFormat = "One" ',Two,.."
    Case Else
      getOutlineFormat = "Other"
   End Select
End Function

Sub Set_Numbering(removeNumb As Boolean, isPageOnly As Boolean)
Dim separatorCode As Long
Dim sectJ As Long
Dim sCount As Long
Dim jStart As Long
Dim jFin As Long
Dim chH As Long
Dim j As Long
Dim k As Long
  sectJ = ChapterNumbering.SectionListbox.ListIndex
  If sectJ < 0 Then sectJ = 0
  
  sCount = ActiveDocument.Sections.Count
  If sectJ = 0 Then
    jStart = 1
    jFin = sCount
  Else
    jStart = sectJ
    jFin = sectJ
  End If
 ' chaptFlag = ChapterNumbering.ChaptNumbCheckbox.Value
  
  If isPageOnly Then
    Call changeNumbering(sCount, jStart, jFin)
    Exit Sub
  End If
  If removeNumb Then
    Call removeNumbering(sCount, jStart, jFin)
    Exit Sub
  End If
  
' ---------- set chapter numberng ------------------------
  With ChapterNumbering
    If .HyphenOption.Value Then separatorCode = wdSeparatorHyphen
    If .ColonOption.Value Then separatorCode = wdSeparatorColon
    If .PeriodOption.Value Then separatorCode = wdSeparatorPeriod
    If .EmOption.Value Then separatorCode = wdSeparatorEnDash
    chH = Val(Left(.HeadStyleLabel.Caption, 2)) - 1 ' ?????? use actual level of style ???????
    On Error Resume Next
    If ActiveDocument.Styles(Trim(Mid(.HeadStyleLabel.Caption, 3))).ListTemplate.OutlineNumbered = False Then
      MsgBox "For chapter numbering, the style of the chapter heading must have outline" & _
           vbCrLf & "numbering as well as a level number. Change style and try again"
      On Error GoTo 0
      Exit Sub
    End If
    On Error GoTo 0
  End With
    For j = jStart To jFin  '  ????? should loop through all headers/footers
    
      For k = 1 To 3
        With ActiveDocument.Sections(j).Headers(k)
          If .Range.Text <> vbCr Then
            .PageNumbers.IncludeChapterNumber = True
            .PageNumbers.HeadingLevelForChapter = chH ' must be after includechapternumber
            .PageNumbers.ChapterPageSeparator = separatorCode
          End If
        End With
        With ActiveDocument.Sections(j).Footers(k)
          If .Range.Text <> vbCr Then
            .PageNumbers.IncludeChapterNumber = True
            .PageNumbers.HeadingLevelForChapter = chH ' must be after includechapternumber
            .PageNumbers.ChapterPageSeparator = separatorCode
          End If
        End With
      Next k
    Next j
End Sub

Sub changeNumbering(sCount As Long, jStart As Long, jFin As Long)
Dim aSt As Long
Dim j As Long
Dim nSt As Long
Dim nTp As Long
  With ChapterNumbering
    nTp = 0
    If .Ntype0.Value Then nTp = 0
    If .Ntype1.Value Then nTp = 1
    If .Ntype2.Value Then nTp = 2
    If .Ntype3.Value Then nTp = 3
    If .Ntype4.Value Then nTp = 4
    If .Ntype5.Value Then nTp = 57
  End With
  For j = jStart To jFin
    With ActiveDocument.Sections(j).Headers(1).PageNumbers
      .RestartNumberingAtSection = ChapterNumbering.RestartOption
      .StartingNumber = Val(ChapterNumbering.NumberingTextbox.Value)
      .NumberStyle = nTp
      If nTp = 57 Then .IncludeChapterNumber = False
    End With
  Next j
End Sub

' ?????????? not used ?????????????
Sub set_Separator(separatorCode As Long, removeChapter As Boolean)
Dim j As Long
Dim sectJ As Long
Dim sCount As Long
Dim jStart As Long
Dim jFin As Long
Dim nSt As Long
Dim nStart As Long
Dim chH As Long
  

  For j = jStart To jFin
    With ActiveDocument.Sections(j).Headers(1).PageNumbers
 '       .NumberStyle = wdPageNumberStyleArabic
  '      .NumberStyle = nSt
    
        '.HeadingLevelForChapter = ChH
        If Not ChapterNumbering.ChaptNumbCheckbox.Value Then
            .HeadingLevelForChapter = 0 ' must preceed includechapternumber
            .IncludeChapterNumber = False ' no chapter numbering
        Else
       '   .HeadingLevelForChapter = ChH ' 0 = take chapter number from Heading level. Heading style must have an outline number
          .IncludeChapterNumber = Not removeChapter
          .HeadingLevelForChapter = chH ' must be after includechapternumber
        End If
        .ChapterPageSeparator = separatorCode
        .RestartNumberingAtSection = ChapterNumbering.RestartOption
        .StartingNumber = nStart
   ' .IncludeChapterNumber = False
    End With
  Next j
End Sub
Sub removeNumbering(sCount As Long, jStart As Long, jFin As Long)
Dim j As Long
  For j = jStart To jFin
    With ActiveDocument.Sections(j).Headers(1).PageNumbers
      .HeadingLevelForChapter = 0 ' must preceed includechapternumber
      .IncludeChapterNumber = False ' no chapter numbering
    End With
  Next j
End Sub

Function SectionBookmarkName() As String
Dim j As Long
Dim sn As Long
Dim aBookmark As Bookmark
Dim Tname As String
Dim aRange As Range
Dim bRange As Range
Dim bkNo As Long
  sn = Selection.Information(wdActiveEndSectionNumber)
  Set aRange = ActiveDocument.Sections(sn).Range
  j = ActiveDocument.Bookmarks.Count
  Tname = "chapt" & Trim(str(sn)) ' tentative bookmark name
  If j > 0 Then
  ' check if bookmark already exists
    bkNo = 0
    For Each aBookmark In ActiveDocument.Bookmarks
      bkNo = bkNo + 1
      If UCase(Tname) = UCase(aBookmark.Name) Then
        Set bRange = aBookmark.Range
        If CompareRanges(aRange, bRange) Then
          SectionBookmarkName = Tname
          Exit Function
        End If
        ActiveDocument.Bookmarks(bkNo).Delete
        Exit For
      End If
    Next aBookmark
  End If
  ' set bookmark to section
  ActiveDocument.Bookmarks.Add Range:=ActiveDocument.Sections(sn).Range, Name:=Tname
  SectionBookmarkName = Tname
  Exit Function
End Function

Function CompareRanges(aRange As Range, bRange As Range) As Boolean
  CompareRanges = False
  If aRange.Start = bRange.Start And aRange.End = bRange.End Then CompareRanges = True
End Function

Sub loadTestNames(upH As Long, dnH As Long)
Dim k As Long
Dim j As Long
Dim m As Long
Dim strng As String
  testStyleNo = -1
  ReDim testStyleName(0)
  ReDim testStyleLevel(0)
  For j = 0 To headingNo
    strng = HeadingStyles(j)
    k = InStr(strng, "  ")
    m = Val(Left(strng, k))
    If m >= dnH And m <= upH Then
      strng = Trim(Right(strng, Len(strng) - k))
      testStyleNo = testStyleNo + 1
      ReDim Preserve testStyleName(testStyleNo)
      testStyleName(testStyleNo) = strng
      ReDim Preserve testStyleLevel(testStyleNo)
      testStyleLevel(testStyleNo) = m
    End If
  Next j
End Sub
  Sub ChangeFieldShading(i As Long)
    Select Case i
      Case 1
        ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
      Case 2
        ActiveWindow.View.FieldShading = wdFieldShadingAlways
      Case 3
        ActiveWindow.View.FieldShading = wdFieldShadingNever
    End Select

End Sub

Sub ClickOption(B As Boolean)
   Options.CtrlClickHyperlinkToOpen = B
End Sub

Sub MoveStyle(n As Long)
Dim k As Long
Dim j As Long
Dim m As Long
Dim r() As String
Dim ss As String
  With TOCForm
    k = .HeadingStylesListbox.ListIndex
    If k < 0 Then Exit Sub
    ss = Trim(.HeadingStylesListbox.List(k))
    j = InStr(ss, ",")
    If j > 0 Then ss = Trim(Left(ss, j - 1))
    j = InStr(ss, "+")
    If j > 0 Then ss = Trim(Left(ss, j - 1))
    j = .ThisTOCStyles.ListCount
    If j > -1 Then
      For m = 0 To j - 1
        If Trim(.ThisTOCStyles.List(m)) = ss Then Exit Sub
      Next m
    End If
    .ThisTOCStyles.AddItem ss
    ReDim r(j)
    For m = 0 To j
      r(m) = .ThisTOCStyles.List(m)
    Next m
    sortHeadings Hs:=r
    .ThisTOCStyles.Clear
    For m = 0 To j
    .ThisTOCStyles.AddItem r(m) 'Trim(.HeadingStylesListbox.List(k))
    Next m
  End With
End Sub

Sub RemoveStyle(n As Long)
Dim k As Long
  With TOCForm
    k = .ThisTOCStyles.ListIndex
    If k > -1 Then
      .ThisTOCStyles.RemoveItem k
      End If
  End With
End Sub

Sub UpdateTOC(linesonly As Boolean)
Dim thisTOC As TableOfContents
  For Each thisTOC In ActiveDocument.TablesOfContents
    If linesonly Then
      thisTOC.UpdatePageNumbers
    Else
      thisTOC.Update
    End If
  Next thisTOC
  
End Sub

Sub SectListboxChange(nL As Long)
Dim sT As String
Dim sC As String
  nL = ChapterNumbering.SectionListbox.ListIndex
  With ChapterNumbering
    If nL = 0 Then
      sT = "all"
    Else
      sT = Trim(Val(nL))
    End If
 '   If .ChaptNumbCheckbox Then
      sC = "chapter"
  '  Else
  '    sC = ""
  '  End If
    .SetChapterButton.Caption = "Set " & sC & " page numbering for sect: " & sT
    .RemoveChapterButtom.Caption = "Remove " & sC & " page numbering sect: " & sT
    .SetPageNumberingButton.Caption = "Set page numbering format section: " & sT
  End With
End Sub

Sub chaptNumSettingsREMOVE(cValue As Boolean)
  With ChapterNumbering
    .HeadStyleLabel.Enabled = cValue
    .chLabel.Enabled = cValue
    .HyphenOption.Enabled = cValue
    .PeriodOption.Enabled = cValue
    .ColonOption.Enabled = cValue
    .EmOption.Enabled = cValue
  End With
End Sub

Sub ReverseLinkHeadings(n As Integer)
Dim hyp As Hyperlink
Dim toc As TableOfContents
Dim bkmk As String
Dim bkmkR As String
Dim sCode As String
Dim sRange As Range
  If ActiveDocument.TablesOfContents.Count = 0 Then
    MsgBox "There are no Tables of Contents in document"
     ReverseLinksForm.hide
    Exit Sub
  End If
  Set sRange = Selection.Range
  Options.CtrlClickHyperlinkToOpen = True
  Set toc = ActiveDocument.TablesOfContents(1)
  For Each hyp In toc.Range.Hyperlinks
    bkmk = hyp.SubAddress
    bkmkR = bkmk & "R"
    hyp.Range.Select
    
    If Selection.Paragraphs(1).Range.Bookmarks.Count > 0 Then
      Selection.Paragraphs(1).Range.Bookmarks(1).Delete
    End If
 
    ActiveDocument.Bookmarks.Add Range:=Selection.Range, Name:=bkmkR

    If ActiveDocument.Bookmarks.Exists(bkmk) Then
      ActiveDocument.Bookmarks(bkmk).Range.Select
      If Selection.Hyperlinks.Count = 0 Then
        With ActiveDocument.Hyperlinks.Add(Anchor:=Selection.Range, _
           Address:="", SubAddress:=bkmkR, TextToDisplay:=Selection.Text)
          .Range.Select
          Selection.ClearCharacterAllFormatting
        End With
      Else
        Selection.Range.Hyperlinks(1).Range.Select
 
        sCode = Selection.Range.Hyperlinks(1).TextToDisplay
        
        Selection.Fields.Unlink
        With ActiveDocument.Hyperlinks.Add(Anchor:=Selection.Range, _
           Address:="", SubAddress:=bkmkR, TextToDisplay:=sCode)
          .Range.Select
          Selection.ClearCharacterAllFormatting
        End With
        ActiveDocument.Bookmarks.Add Range:=Selection.Range, Name:=bkmk
      End If
    End If
  Next hyp
  Options.CtrlClickHyperlinkToOpen = False
  TOCForm.ClickOptionOff.Value = True
  ReverseLinksForm.hide
  sRange.Select
End Sub

Sub RemoveReverseLinks(n As Long)
Dim hyp As Hyperlink
Dim toc As TableOfContents
Dim bkmk As String
Dim aRange As Range
Dim sRange As Range
  If ActiveDocument.TablesOfContents.Count = 0 Then
    MsgBox "There are no Tables of Contents in document"
     ReverseLinksForm.hide
    Exit Sub
  End If
  Set sRange = Selection.Range
  Set toc = ActiveDocument.TablesOfContents(1)
  For Each hyp In toc.Range.Hyperlinks
     bkmk = hyp.SubAddress
     If ActiveDocument.Bookmarks.Exists(bkmk) Then
       ActiveDocument.Bookmarks(bkmk).Range.Select
       Selection.MoveEnd unit:=wdCharacter, Count:=-1
       If Selection.Hyperlinks.Count > 0 Then
         Selection.Range.Hyperlinks(1).Range.Select
         Set aRange = Selection.Range
         Selection.Fields.Unlink
   'aRange.Select
         ActiveDocument.Bookmarks.Add Range:=aRange, Name:=bkmk
         If ActiveDocument.Bookmarks.Exists(bkmk & "R") Then
           ActiveDocument.Bookmarks(bkmk & "R").Delete
         End If
       End If
     End If
   Next hyp
   Options.CtrlClickHyperlinkToOpen = False
   TOCForm.ClickOptionOff.Value = True
   ReverseLinksForm.hide
   sRange.Select
End Sub

Sub aShowFieldcodes(ashow As Boolean)
  ActiveWindow.View.ShowFieldCodes = ashow
  Application.ActiveWindow.ScrollIntoView Selection.Range
End Sub

Private Sub setShowFieldCodes()
    If ActiveWindow.View.ShowFieldCodes Then
      TOCForm.ShowFieldCodesOption.Value = True
    Else
      TOCForm.HideFieldCodesOption.Value = True
    End If
End Sub

Sub gotoNextTOC(n As Long)
Dim p1 As Long
Dim p2 As Long
Dim phold As Long
Dim j As Long
Dim jj As Long
  n = ActiveDocument.TablesOfContents.Count
  If n = 0 Then
    MsgBox "Document does not have a table of contents"
  Else
    If n = 1 Then
      ActiveDocument.TablesOfContents(1).Range.Select
    Else
      p1 = Selection.End
      p2 = ActiveDocument.Range.End
      jj = 1
      For j = 1 To n
        If ActiveDocument.TablesOfContents(j).Range.Start > p1 Then
          phold = ActiveDocument.TablesOfContents(j).Range.Start
          If phold < p2 Then
            p2 = phold
            jj = j
          End If
        End If
      Next j
      ActiveDocument.TablesOfContents(jj).Range.Select
      ActiveWindow.ScrollIntoView Selection.Range, True
    End If
  End If
End Sub

Sub MultipleDocTOC(n As Long)
  With MultipleDocForm
    .StartUpPosition = 0
    .Top = 262
    .Left = hPoints - .Width - 6
    .Show
  End With
End Sub

Sub GenerateMultiDocTOC(genericFl As String)
Dim fl As String
Dim flNames() As String
Dim flCount As Long
Dim j As Long
Dim k As Long
Dim mydir As String
Dim aString As String
Dim projName As String
Dim fldType As Long
  MultipleDocForm.CreateMultiDocTOC.Enabled = False
  DoEvents
  ' ----- Delete any existing TOC and RD fields -----
  If MultipleDocForm.DelExistCheckbox Then
  j = ActiveDocument.Fields.Count
    If j > 0 Then
     For k = j To 1 Step -1
       fldType = ActiveDocument.Fields(k).Type
       If fldType = wdFieldTOC Or fldType = wdFieldRefDoc Then ActiveDocument.Fields(k).Delete
     Next k
    End If
  End If
  
  ' ----- set generic name to current file name -----
  mydir = ActiveDocument.Path
  If genericFl = "" Then
    projName = ActiveDocument.Name
  Else
    projName = genericFl
  End If

  ' ------ get list of files in directory ------
  j = InStr(projName, ".")
  If j = 0 Then
    aString = ActiveDocument.Name
    k = InStr(aString, ".")
    If k > 0 Then aString = projName & "*" & Mid(aString, k)
  Else
    aString = Left(projName, j - 1) & "*" & Mid(projName, j)
  End If
  flCount = 0
  ReDim flNames(0)
  fl = Dir(mydir & "\" & aString)
  Do While fl <> ""
    If UCase(fl) <> UCase(ActiveDocument.Name) Then
      flCount = flCount + 1
      ReDim Preserve flNames(flCount)
      flNames(flCount) = fl
    End If
    fl = Dir()
  Loop
  If flCount = 0 Then
    MsgBox "No files found"
    MultipleDocForm.CreateMultiDocTOC.Enabled = True
    Exit Sub
  End If
  
  ' ----- sort file names -----
  For j = 1 To UBound(flNames) - 1
    For k = j + 1 To UBound(flNames)
      If flNames(j) > flNames(k) Then
        fl = flNames(j)
        flNames(j) = flNames(k)
        flNames(k) = fl
      End If
    Next k
  Next j
  
  ' ----- Create TOC then put RD fields at end of document -----
  Go_InsertToc (1)
  ActiveDocument.Range.Select
  Selection.Collapse direction:=wdCollapseEnd
'Selection.Range.Select
  For j = 1 To UBound(flNames)
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, PreserveFormatting:=False, _
      Text:="RD " & Chr(34) & flNames(j) & Chr(34) & " \f"
DoEvents
  Next j
  ActiveDocument.TablesOfContents(1).Range.Select
  Selection.Collapse
  ActiveDocument.TablesOfContents(1).Update
  ActiveWindow.View.ShowFieldCodes = False
  TOCForm.HideFieldCodesOption = True
  MultipleDocForm.CreateMultiDocTOC.Enabled = True
  MultipleDocForm.hide
End Sub


Sub SpannedPageNumbering(genericFl As String)
Dim fl As String
Dim flNames() As String
Dim pgeNo() As Long
Dim flCount As Long
Dim j As Long
Dim k As Long
Dim h As Long
Dim mydir As String
Dim aString As String
Dim projName As String
Dim InclFirstpageSW As Boolean
Dim nextDoc As Document
  ActiveWindow.View.ShowFieldCodes = False
  MultipleDocForm.SpanNumberingButton.Enabled = False
  DoEvents
    ' ----- set generic name to current file name -----
  mydir = ActiveDocument.Path
  If genericFl = "" Then
    projName = ActiveDocument.Name
  Else
    projName = genericFl
  End If
  InclFirstpageSW = MultipleDocForm.InclThisDocOption.Value
    
  ' ------ get list of files in directory ------
  j = InStr(projName, ".")
  aString = Left(projName, j - 1) & "*" & Mid(projName, j)
  flCount = 0
  ReDim flNames(0)
  fl = Dir(mydir & "\" & aString)
  Do While fl <> ""
    If UCase(fl) <> UCase(ActiveDocument.Name) Then
      flCount = flCount + 1
      ReDim Preserve flNames(flCount)
      flNames(flCount) = fl
    End If
    fl = Dir()
  Loop
  If flCount = 0 Then
    MsgBox "No files found"
    MultipleDocForm.SpanNumberingButton.Enabled = True
    Exit Sub
  End If
  
  ' ----- sort file names -----
  For j = 1 To UBound(flNames) - 1
    For k = j + 1 To UBound(flNames)
      If flNames(j) > flNames(k) Then
        fl = flNames(j)
        flNames(j) = flNames(k)
        flNames(k) = fl
      End If
    Next k
  Next j
  
  ' ----- Numbering on first page. Zero if restart on second page -----
  ReDim pgeNo(flCount)
  pgeNo(0) = 0
  If InclFirstpageSW Then
    ActiveDocument.Range.Select
    'ActiveDocument.Characters.Last.Select
    Selection.Collapse direction:=wdCollapseEnd
    pgeNo(0) = Selection.Information(wdActiveEndAdjustedPageNumber)
  End If
  
  ' ----- successive documents -----
  For j = 1 To UBound(flNames)
    Documents.Open (mydir & "\" & flNames(j))
    
    ' ----- remove numbering changes at sections -----
    For k = 1 To ActiveDocument.Sections.Count
      With ActiveDocument.Sections(k)
 
      For h = 1 To 3
      .Headers(h).PageNumbers.RestartNumberingAtSection = False
      .Footers(h).PageNumbers.RestartNumberingAtSection = False
      Next h
      End With
    Next k

    ' ----- restart numbering at first section -----
    With ActiveDocument.Sections(1).Headers(1).PageNumbers
        .RestartNumberingAtSection = True
        .StartingNumber = pgeNo(j - 1) + 1
    End With
    
    ' ----- find last page number -----
    ActiveDocument.Range.Select
    Selection.Collapse direction:=wdCollapseEnd
    pgeNo(j) = Selection.Information(wdActiveEndAdjustedPageNumber)
    Documents(flNames(j)).Close savechanges:=wdSaveChanges
  Next j
  j = ActiveDocument.TablesOfContents.Count
  If j < 1 Then
    'MsgBox "There are no tables of contents to update"
  Else
    ActiveDocument.TablesOfContents(1).Update
  End If
  MultipleDocForm.SpanNumberingButton.Enabled = True
  MultipleDocForm.hide
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TWIPSPERINCH / 20 / XPixelsPerInch
    y = y * TWIPSPERINCH / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub
 

' InQuest injected base64 decoded content
' yJiz
' yJiz
' bzWR
' x,DC

INQUEST-PP=macro
