Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "HauptFunktionen"
Option Explicit

'!!! Achtung: unter Extras --> Verweise muss unbedingt
'!!! die Komponente Microsoft XML v.6.0 aktiviert werden!
    
'   Coding - Version 1.265 (18.03.2015)
    Global Const conTemplateVersion = "1.265"
    Global Const conXMLVersion = "1.0"
    
    Global dom  As DOMDocument60
    Global root As IXMLDOMNode
    
    Global fragLines As IXMLDOMDocumentFragment
    Global fragLine As IXMLDOMDocumentFragment
    Global fragTimes As IXMLDOMDocumentFragment
    Global fragTime As IXMLDOMDocumentFragment
    
    Global node As IXMLDOMNode
    Global nodeLines As IXMLDOMNode
    Global nodeLine As IXMLDOMNode
    Global nodeTimes As IXMLDOMNode
    Global nodeTime As IXMLDOMElement
    
    Global strRange_shortText As String
    Global strRange_measurement As String
    Global strRange_barCode As String
    Global strRange_rweEmployee As String
    Global strRange_location As String
    Global strRange_startDate As String
    Global strRange_endDate As String
    
    Global srvLineNumber As Integer
    Global intRowTitleServices As Integer
    Global intRowTitleTimes As Integer
    
    Global arrSheet As Variant
    
    Public Const ELEMENT_NODE = 1
    
Sub main()

    Dim strActSheet As String

    ' Allgemeine Pr|fffd|fungen
    SheetDataCheck
    
    ' das aktive Tabellenblatt merken
    strActSheet = ActiveSheet.Name
    ' Verarbeitung im Hintegrund
    Application.ScreenUpdating = False
    
    ' XML erzeugen:
    Set dom = CreateDOM
    ' Kopfdaten f|fffd|llen
    XMLHeaderData
    ' Leistungsverzeichnis
    XMLServicesData
    
    ' Zeitdaten aufbereiten
    If WorkArea_Create() = True Then
        WorkArea_Process
    End If
    
    ' XML-Datei erstellen
    XML_Output
    
    ' Am Ende tempor|fffd|res Tabellenblatt XML l|fffd|schen
    WorkArea_delete
    ' zur|fffd|ck zum Tabellenblatt, aus dem man Makro gestartet hat
    Sheets(strActSheet).Activate
    
End Sub
      
      
Attribute VB_Name = "Hilfsfunktionen"
Option Explicit

Sub SheetDataCheck()

    ' Pr|fffd|fungen, ob ben|fffd|tigte Zellen nicht gel|fffd|scht worden sind
    ' zuerst Tabellenbl|fffd|tter
    If SheetExists("LAB-Kopfdaten") = False Then
        MsgErrorNotFound "Tabellenblatt LAB-Kopfdaten"
    End If
    If SheetExists("Leistungsverzeichnis") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis"
    End If
    If SheetExists("Stundenarbeiten") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten"
    End If
        
    If RangeExists("LAB-Kopfdaten", "startDate") = False Then
        MsgErrorNotFound "Tabellenblatt LAB-Kopfdaten, Bereich startDate (Zeitraum von:)"
        End
    End If
    If RangeExists("LAB-Kopfdaten", "endDate") = False Then
        MsgErrorNotFound "Tabellenblatt LAB-Kopfdaten, Bereich endDate (Zeitraum bis:)"
        End
    End If

    ' Tabellenblatt LAB-Kopfdaten
    If RangeExists("LAB-Kopfdaten", "shortText") = True Then
        strRange_shortText = Sheets("LAB-Kopfdaten").range("shortText")
    End If
    If RangeExists("LAB-Kopfdaten", "measurement") = True Then
        strRange_measurement = Sheets("LAB-Kopfdaten").range("measurement")
    End If
    If RangeExists("LAB-Kopfdaten", "barCode") = True Then
        strRange_barCode = Sheets("LAB-Kopfdaten").range("barCode")
    End If
    If RangeExists("LAB-Kopfdaten", "rweEmployee") = True Then
        strRange_rweEmployee = Sheets("LAB-Kopfdaten").range("rweEmployee")
    End If
    If RangeExists("LAB-Kopfdaten", "location") = True Then
        strRange_location = Sheets("LAB-Kopfdaten").range("location")
    End If

    ' Tabellenblatt Leistungsverzeichnis
    If RangeExists("Leistungsverzeichnis", "titleServices") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich titleServices (Spalten|fffd|berschriften)"
        End
    Else
        intRowTitleServices = Sheets("Leistungsverzeichnis").range("titleServices").Row
    End If
    
    If RangeExists("Leistungsverzeichnis", "serviceNumber") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich serviceNumber (Leistungsnr.)"
        End
    End If
    If RangeExists("Leistungsverzeichnis", "quantity") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich quantity (Menge)"
        End
    End If
    If RangeExists("Leistungsverzeichnis", "accountAssignment") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich accountAssignment (Kontierung)"
        End
    End If
    If RangeExists("Leistungsverzeichnis", "externalServiceNumber") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich externalServiceNumber (Ext. Leistungsnr.)"
        End
    End If
    If RangeExists("Leistungsverzeichnis", "comment") = False Then
        MsgErrorNotFound "Tabellenblatt Leistungsverzeichnis, Bereich comment (Bemerkung)"
        End
    End If

    ' Tabellenblatt Stundenarbeiten
    If RangeExists("Stundenarbeiten", "titleTimes") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich titleTimes (Spalten|fffd|berschriften)"
        End
    Else
        intRowTitleTimes = Sheets("Stundenarbeiten").range("titleTimes").Row
    End If
    
    If RangeExists("Stundenarbeiten", "date") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich date (Datum)"
        End
    End If
    If RangeExists("Stundenarbeiten", "employeeNumber") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich employeeNumber (F-Nummer)"
        End
    End If
    If RangeExists("Stundenarbeiten", "qualification") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich qualification (Leistungsstamm)"
        End
    End If
    If RangeExists("Stundenarbeiten", "accountTime") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich accountTime (Kontierung)"
        End
    End If
    If RangeExists("Stundenarbeiten", "startTime") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich startTime (Startzeit)"
        End
    End If
    If RangeExists("Stundenarbeiten", "endTime") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich endTime (Endzeit)"
        End
    End If
    If RangeExists("Stundenarbeiten", "commentTime") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich commentTime (Bemerkung)"
        End
    End If
    If RangeExists("Stundenarbeiten", "quantity_00") = False Then
        MsgErrorNotFound "Tabellenblatt Stundenarbeiten, Bereich quantity_00 (NormalStd.)"
        End
    End If

    ' "Datum von" ist ein Mussfeld
    If Sheets("LAB-Kopfdaten").range("startDate") <> "" Then
        strRange_startDate = Sheets("LAB-Kopfdaten").range("startDate")
        If Len(strRange_startDate) = 10 Then
            strRange_startDate = Right(strRange_startDate, 4) & "-" & Mid(strRange_startDate, 4, 2) & "-" & Left(strRange_startDate, 2)
        ElseIf Len(strRange_startDate) = 8 Then
            strRange_startDate = "20" & Right(strRange_startDate, 2) & "-" & Mid(strRange_startDate, 4, 2) & "-" & Left(strRange_startDate, 2)
        Else
            MsgBox "Bitte das Datum ""Zeitraum von"" im Tabellenblatt ""LAB-Kopfdaten"" im Format TT.MM.JJJJ angeben"
        End If
    Else
        MsgBox "Bitte das Datum ""Zeitraum von"" im Tabellenblatt ""LAB-Kopfdaten"" angeben"
        Sheets("LAB-Kopfdaten").Activate
        Sheets("LAB-Kopfdaten").range("startDate").Select
        End
    End If

    ' wenn "Datum bis" leer, dann aus "Datum von" |fffd|bernehmen
    If Sheets("LAB-Kopfdaten").range("endDate") = "" Then
        Sheets("LAB-Kopfdaten").range("endDate") = Sheets("LAB-Kopfdaten").range("startDate")
    End If
    strRange_endDate = Sheets("LAB-Kopfdaten").range("endDate")
    If Len(strRange_endDate) = 10 Then
        strRange_endDate = Right(strRange_endDate, 4) & "-" & Mid(strRange_endDate, 4, 2) & "-" & Left(strRange_endDate, 2)
    ElseIf Len(strRange_endDate) = 8 Then
        strRange_endDate = "20" & Right(strRange_endDate, 2) & "-" & Mid(strRange_endDate, 4, 2) & "-" & Left(strRange_endDate, 2)
    Else
        MsgBox "Bitte das Datum ""Zeitraum bis"" im Tabellenblatt ""LAB-Kopfdaten"" im Format TT.MM.JJJJ angeben"
    End If
    
End Sub


Sub WorkArea_delete()

'   Tempor|fffd|res Tabellenblatt l|fffd|schen

    Application.DisplayAlerts = False
    On Error Resume Next
    Worksheets("XML").Delete
    On Error GoTo 0
    Application.DisplayAlerts = True

End Sub


Function SheetExists(ByVal sheetName As String) As Boolean

  Dim sheetSuche As Worksheet

  SheetExists = False

  For Each sheetSuche In Worksheets
    If sheetSuche.Name = sheetName Then
      SheetExists = True
      Exit Function
    End If
  Next sheetSuche

End Function


Function RangeExists(ByVal sheetName As String, ByVal rangeName As String) As Boolean

    Dim xBereiche As Names
    Dim x As Integer

    RangeExists = False
    
    Set xBereiche = ActiveWorkbook.Names
    For x = 1 To xBereiche.Count
    
        If xBereiche(x).Name = sheetName & rangeName Or _
           xBereiche(x).Name = rangeName Then
            RangeExists = True
            Exit Function
        End If
    Next x

End Function


Sub MsgErrorNotFound(Element As String)

    MsgBox Element & " nicht vorhanden. Bitte, wenn nicht ben|fffd|tigt, ausblenden und nicht l|fffd|schen."
    End
    
End Sub



Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As range)

    Dim TargetTime As range
    Dim TargetDate As range
    Dim strResult As String
    Dim strMonth As String
    Dim strYear As String
    
    On Error Resume Next
    
    'Uhrzeit
    For Each TargetTime In Intersect(Target, range("startTime:endTime"))
        If Not TargetTime Is Nothing Then
    '   nur wenn Uhrzeit nicht im Format hh:mm angegeben
            If TargetTime.Text = "0:00" Or TargetTime.Text = "00:00" Then
                Select Case Len(TargetTime.Value)
                    Case 1
                        If TargetTime.Value <= 9 Then strResult = TargetTime.Value & ":00"
                    Case 2
                        If TargetTime.Value <= 24 Then strResult = TargetTime.Value & ":00"
                    Case 3
                        If Right(TargetTime.Value, 2) < 60 Then _
                            strResult = Left(TargetTime.Value, 1) & ":" & Right(TargetTime.Value, 2)
                    Case 4
                        If Right(TargetTime.Value, 2) < 60 And Left(TargetTime.Value, 2) < 24 Then _
                            strResult = Left(TargetTime.Value, 2) & ":" & Right(TargetTime.Value, 2)
                End Select
                If strResult <> "" Then
                    Application.EnableEvents = False
                    TargetTime.Value = strResult
                    Application.EnableEvents = True
                End If
            End If
            
            TargetTime.NumberFormat = "hh:mm;@"
        End If
    Next
        
    ' Datum
    For Each TargetDate In Intersect(Target, range("date"))
        If Not TargetDate Is Nothing Then
            If Not (IsNumeric(TargetDate.Value) Or InStr(1, TargetDate.Value, ".") > 0) Then
                MsgBox "Kein g|fffd|ltiges Datum"
                Exit Sub
            ElseIf UBound(Split(TargetDate.Value, ".")) = 1 Then
                MsgBox "Kein g|fffd|ltiges Datum"
                Exit Sub
            ElseIf UBound(Split(TargetDate.Value, ".")) = 2 Then
                If CDate(TargetDate.Value) < CDate("01.01.2000") Or CDate(TargetDate.Value) > CDate("01.01.2020") Then
                    TargetDate.NumberFormat = "General"
                Else
                    Exit Sub
                End If
            End If
            
            If Len(TargetDate.Value) > 0 And Len(TargetDate.Value) <= 4 Then
                If Worksheets("LAB-Kopfdaten").range("startDate") = "" Then
                    MsgBox "F|fffd|r verk|fffd|rzte Datumsangabe bitte zuerst ""Zeitraum von"" in ""LAB-Kopfdaten"" pflegen"
                    Application.EnableEvents = False
                    TargetDate.Value = ""
                    TargetDate.NumberFormat = "dd/mm/yyyy"
                    Application.EnableEvents = True
                    Exit Sub
                Else
                    strMonth = Format(Month(Worksheets("LAB-Kopfdaten").range("startDate")), "00")
                    strYear = Year(Worksheets("LAB-Kopfdaten").range("startDate"))
                End If
            End If

            Select Case Len(TargetDate.Value)
                Case Is = 1
                    strResult = "0" & Left(TargetDate, 1) & "." & strMonth & "." & strYear
                Case 2
                    If TargetDate.Value > 0 And TargetDate.Value <= 31 Then _
                        strResult = TargetDate.Value & "." & strMonth & "." & strYear
                Case 3
                    If Right(TargetDate, 2) > 0 And Right(TargetDate, 2) <= 12 Then _
                        strResult = "0" & Left(TargetDate, 1) & "." & Right(TargetDate, 2) & "." & strYear
                Case 4
                    If Right(TargetDate, 2) > 0 And Right(TargetDate, 2) <= 12 Then _
                        strResult = Left(TargetDate.Value, 2) & "." & Right(TargetDate, 2) & "." & strYear
                Case 5
                    If Mid(TargetDate, 2, 2) > 0 And Mid(TargetDate, 2, 2) <= 12 Then _
                        strResult = "0" & Left(TargetDate, 1) & "." & Mid(TargetDate, 2, 2) & ".20" & Right(TargetDate, 2)
                Case 6
                    If Mid(TargetDate, 3, 2) > 0 And Mid(TargetDate, 3, 2) <= 12 Then _
                        strResult = Left(TargetDate, 2) & "." & Mid(TargetDate, 3, 2) & ".20" & Right(TargetDate, 2)
                Case 7
                    If Mid(TargetDate, 2, 2) > 0 And Mid(TargetDate, 2, 2) <= 12 Then _
                        strResult = "0" & Left(TargetDate, 1) & "." & Mid(TargetDate, 2, 2) & "." & Right(TargetDate, 4)
                Case 8
                    If Mid(TargetDate, 3, 2) > 0 And Mid(TargetDate, 3, 2) <= 12 Then _
                        strResult = Left(TargetDate, 2) & "." & Mid(TargetDate, 3, 2) & "." & Right(TargetDate, 4)
            End Select
        TargetDate.NumberFormat = "dd/mm/yyyy"
        End If
    
        If strResult <> "" Then
            Application.EnableEvents = False
            TargetDate.Value = strResult
            Application.EnableEvents = True
        End If
    Next

    On Error GoTo 0

End Sub




Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "XMLFunktionen"
Option Explicit

Sub XMLHeaderData()

    ' Version des Templates als Kommentar
    Set node = dom.createComment("TemplateVersion=""" & conTemplateVersion & """")
    dom.appendChild node
    Set node = Nothing
        
    ' Root
    Set root = dom.CreateNode(1, "lab", "http://rwe.com/klp/isrv/lerf/lab/model")
    ' hinzuf|fffd|gen zu der DOM-Instanz
    dom.appendChild root
    'Neue Zeile
    root.appendChild dom.createTextNode(vbNewLine + vbTab)
    ' Version der XML-Schnittstelle
    CreateNode "specVersion", conXMLVersion, root, 1
    ' Kurztext
    CreateNode "shortText", strRange_shortText, root, 1
    ' ohne LAB-Nummer - Neuanlage
    CreateNode "id", "", root, 1
    ' Barcode
    CreateNode "barCode", strRange_barCode, root, 1
    ' Zeitraum von
    CreateNode "startDate", strRange_startDate, root, 1
    ' Zeitraum bis
    CreateNode "endDate", strRange_endDate, root, 1
    ' zust|fffd|ndiger RWE MA
    CreateNode "rweEmployee", strRange_rweEmployee, root, "1"
    ' measurement
    CreateNode "measurement", strRange_measurement, root, "1"
    ' longText
    ' totalValue
    ' location
    CreateNode "location", strRange_location, root, "1"
          
End Sub


Sub XMLServicesData()

    Dim serviceNumber As String
    
    Dim colServiceNumber As Integer
    Dim colQuantity As Integer
    Dim colAccountAssignment As Integer
    Dim colExternalServiceNumber As Integer
    Dim colComment As Integer
    
    Dim lastRowData As Integer
    Dim xStr As String
    Dim xRow As Integer
    

'   Spaltennummer der ben|fffd|tigten Daten
    colServiceNumber = Sheets("Leistungsverzeichnis").range("serviceNumber").Column
    colQuantity = Sheets("Leistungsverzeichnis").range("quantity").Column
    colAccountAssignment = Sheets("Leistungsverzeichnis").range("accountAssignment").Column
    colExternalServiceNumber = Sheets("Leistungsverzeichnis").range("externalServiceNumber").Column
    colComment = Sheets("Leistungsverzeichnis").range("comment").Column

'   Letzte Zeile des Datenbereichs
    lastRowData = Sheets("Leistungsverzeichnis").range("serviceNumber").SpecialCells(xlCellTypeLastCell).Row
    
    ' Knoten f|fffd|r Leistungszeilen
    Set nodeLines = dom.CreateNode(1, "labRows", "http://rwe.com/klp/isrv/lerf/lab/model")
    Set fragLines = dom.createDocumentFragment
    fragLines.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab)
    
    ' Schleife
    For xRow = intRowTitleServices + 1 To lastRowData
    
        ' neue Leistungszeile
        Set nodeLine = dom.CreateNode(1, "labRow", "http://rwe.com/klp/isrv/lerf/lab/model")
        Set fragLine = dom.createDocumentFragment
        ' Neue Zeile mit Tabulatoren
        nodeLine.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab + vbTab)
    
        ' Zeilennummer
        srvLineNumber = srvLineNumber + 1
        xStr = srvLineNumber
        CreateNode "number", xStr, fragLine, 3

        ' Menge
        CreateNode "quantity", Sheets("Leistungsverzeichnis").Cells(xRow, colQuantity), fragLine, 3
    
        ' Int. Zeilennummer
        CreateNode "internalNumber", xStr, fragLine, 3
    
        ' Leistungsnummer
        CreateNode "serviceNumber", Sheets("Leistungsverzeichnis").Cells(xRow, colServiceNumber), fragLine, 3
        
        ' externalServiceNumber.
        CreateNode "externalServiceNumber", Sheets("Leistungsverzeichnis").Cells(xRow, colExternalServiceNumber), fragLine, 3
    
        ' Kurztext
        CreateNode "shortText", "", fragLine, 3
    
        ' Mengeneinheit
        CreateNode "quantityUnit", "", fragLine, 3
        
        ' Wert
        CreateNode "totalPositionPrice", "0", fragLine, 3
        
        ' Preis
        CreateNode "singlePrice", "0", fragLine, 3
        
        ' Kontierung
        CreateNode "accountAssignment", Sheets("Leistungsverzeichnis").Cells(xRow, colAccountAssignment), fragLine, 3
    
        ' Sachkonto
        CreateNode "impersonalAccount", "", fragLine, 3
    
        ' Bemerkung
        CreateNode "comment", Sheets("Leistungsverzeichnis").Cells(xRow, colComment), fragLine, 3

        ' Preiseinheit
        CreateNode "priceUnit", "1", fragLine, 3
    
        nodeLine.appendChild fragLine
        nodeLine.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab)
        fragLines.appendChild nodeLine
    
    Next xRow

End Sub


Sub XMLServiceData(arrRow As Integer, xRow As Integer)

    Dim xStr As String
    
    ' neue Leistungszeile
    Set nodeLine = dom.CreateNode(1, "labRow", "http://rwe.com/klp/isrv/lerf/lab/model")
    Set fragLine = dom.createDocumentFragment
    ' Neue Zeile mit Tabulatoren
    nodeLine.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab + vbTab)
    
    ' Zeilennummer
    srvLineNumber = srvLineNumber + 1
    xStr = srvLineNumber
    CreateNode "number", xStr, fragLine, 3

    ' Menge - wird aufgrund der Zeiten in iService berechnet
    CreateNode "quantity", "0", fragLine, 3
    
    ' Int. Zeilennummer
    CreateNode "internalNumber", xStr, fragLine, 3
    
    ' Leistungsnummer
    xStr = arrSheet(arrRow, 1)
    CreateNode "serviceNumber", xStr, fragLine, 3
    
    ' externalServiceNumber. Mussfeld in XSD?
    CreateNode "externalServiceNumber", "", fragLine, 3
    
    ' Kurztext
    CreateNode "shortText", "", fragLine, 3
    
    ' Mengeneinheit
    CreateNode "quantityUnit", "STD", fragLine, 3
        
    ' Wert
    CreateNode "totalPositionPrice", "0", fragLine, 3
        
    ' Preis
    CreateNode "singlePrice", "0", fragLine, 3
        
    ' Kontierung
    xStr = arrSheet(arrRow, 2)
    CreateNode "accountAssignment", xStr, fragLine, 3
    
    ' Sachkonto
    CreateNode "impersonalAccount", "", fragLine, 3
    
    ' Bemerkung
    CreateNode "comment", "", fragLine, 3
    
    ' Preiseinheit
    CreateNode "priceUnit", "1", fragLine, 3

    ' Knoten f|fffd|r die Zeiten
    Set nodeTimes = dom.CreateNode(1, "workingTimes", "http://rwe.com/klp/isrv/lerf/lab/model")
    Set fragTimes = dom.createDocumentFragment
    
End Sub



Sub XMLWorkingTimes(arrRow As Integer, timeRow As Integer)

    Dim attr As IXMLDOMAttribute
    Dim strDatum As String
            
    'neue Zeile in Zeiten
    Set nodeTime = dom.CreateNode(1, "workingTime", "http://rwe.com/klp/isrv/lerf/lab/model")
    fragTimes.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab + vbTab + vbTab)
    
    'F-Nummer
    Set attr = dom.createAttribute("employeeNumber")
    attr.Value = arrSheet(arrRow, 4)
    nodeTime.setAttributeNode attr
    Set attr = Nothing

    'Datum
    Set attr = dom.createAttribute("date")
    strDatum = arrSheet(arrRow, 3)
    attr.Value = Right(strDatum, 4) & "-" & Mid(strDatum, 4, 2) & "-" & Left(strDatum, 2)
    nodeTime.setAttributeNode attr
    Set attr = Nothing

    'Menge (Anzahl Stunden)
    Set attr = dom.createAttribute("quantity")
    attr.Value = arrSheet(arrRow, 8)
    nodeTime.setAttributeNode attr
    Set attr = Nothing

    'Zeit von
    Set attr = dom.createAttribute("startTime")
    attr.Value = Format(arrSheet(arrRow, 5), "hh:mm")
    nodeTime.setAttributeNode attr
    Set attr = Nothing

    'Zeit bis
    Set attr = dom.createAttribute("endTime")
    attr.Value = Format(arrSheet(arrRow, 6), "hh:mm")
    nodeTime.setAttributeNode attr
    Set attr = Nothing
    
    'comment
    Set attr = dom.createAttribute("comment")
    attr.Value = arrSheet(arrRow, 7)
    nodeTime.setAttributeNode attr
    Set attr = Nothing

    fragTimes.appendChild nodeTime
    nodeTimes.appendChild fragTimes

End Sub


Sub XML_Output()

    Dim strDateiname As String

    ' XML abschlie|fffd|en
    nodeLines.appendChild fragLines
    nodeLines.appendChild dom.createTextNode(vbNewLine + vbTab)
    
    root.appendChild nodeLines
    root.appendChild dom.createTextNode(vbNewLine)

    ' Dialog f|fffd|r Datei speichern
    'strDateiname = Application.GetSaveAsFilename(Environ("HOMEDRIVE") & Environ("HOMEPATH"), "XML-Daten(*.xml),*.xml")
    strDateiname = Application.GetSaveAsFilename("", "XML-Daten(*.xml),*.xml")
    If CVar(strDateiname) <> False Then
        dom.Save strDateiname
    End If

    Set dom = Nothing
    
    Exit Sub
    
ErrorHandler:
    MsgBox Err.Description
        
End Sub

Attribute VB_Name = "XMLIntern"
Option Explicit

Function CreateDOM()

    Dim dom
    Set dom = New DOMDocument60
    dom.async = False
    dom.validateOnParse = False
    dom.resolveExternals = False
    dom.preserveWhiteSpace = True
    Set CreateDOM = dom
    
End Function

Sub CreateNode(strNode As String, strContent As String, parent As IXMLDOMNode, anzTab As Integer)

Dim node As IXMLDOMNode
Dim strTab As String
Dim i As Integer

    Set node = dom.CreateNode(ELEMENT_NODE, strNode, "http://rwe.com/klp/isrv/lerf/lab/model")
    node.Text = strContent
    parent.appendChild node
    Set node = Nothing
    
    strTab = vbNewLine
    For i = 1 To anzTab
        strTab = strTab + vbTab
    Next i
    parent.appendChild dom.createTextNode(strTab)
       
End Sub

Attribute VB_Name = "Zeitdaten"
    Option Explicit

Function WorkArea_Create() As Boolean

' Als Datengrundlage dient  das Tabellenblatt "Stundenarbeiten"
' Verarbeitung: Eine Zeile nach der anderen -> Arbeitsvorrat als Array (zwei Dimensionen) aufbauen:
' Erschwernisse als Leistungsnummer abbilden
' Danach (f|fffd|r schnelle Sortierung) Array in ein tempor|fffd|res Tabellenblatt
' und sortieren nach: Kontierung, Leistungsnummer, F-Nummer, Datum
' Spalten im Array:
            'Leistungszeile
                ' 00 serviceNumber
                ' 01 accountAssignment
            'Zeitdaten
                ' 02 date
                ' 03 employeeNumber
                ' 04 startTime
                ' 05 endTime
                ' 06 quantity
                ' 07 comment
    
    Dim colDate As Integer
    Dim colEmployeeNumber As Integer
    Dim colQualification As Integer
    Dim colAccountTime As Integer
    Dim colStartTime As Integer
    Dim colEndTime As Integer
    Dim colCommentTime As Integer
    Dim colQuantity_00 As Integer
   
    Dim arrSheet As Variant
    Dim arrErschw As Variant
    Dim arrWork As Variant
 
    Dim w As Worksheet
    Dim sheetFound As Boolean
    
    Dim arrRow As Integer, sCol As Integer
    Dim wRow As Integer, wCol As Integer
    Dim lastRowData As Integer
    Dim lastColumnData As Integer
    Dim dimArray As Long
    Dim strQuali As String
    Dim strEmployeeNumber As String
    Dim strDate As String
    Dim strAccountTime As String
    Dim strStartTime As String
    Dim strEndTime As String
    Dim strCommentTime As String
    Dim strRange As String
    
'   Spaltennummer der ben|fffd|tigten Daten
    colDate = Sheets("Stundenarbeiten").range("date").Column
    colEmployeeNumber = Sheets("Stundenarbeiten").range("employeeNumber").Column
    colQualification = Sheets("Stundenarbeiten").range("qualification").Column
    colAccountTime = Sheets("Stundenarbeiten").range("accountTime").Column
    colStartTime = Sheets("Stundenarbeiten").range("startTime").Column
    colEndTime = Sheets("Stundenarbeiten").range("endTime").Column
    colCommentTime = Sheets("Stundenarbeiten").range("commentTime").Column
    colQuantity_00 = Sheets("Stundenarbeiten").range("quantity_00").Column

'   Erste und letzte Zeile des Datenbereichs
    lastRowData = Sheets("Stundenarbeiten").range("employeeNumber").SpecialCells(xlCellTypeLastCell).Row
    lastColumnData = Sheets("Stundenarbeiten").UsedRange.SpecialCells(xlCellTypeLastCell).Column
    
'   Spalten|fffd|berschrift die letzte Zeile?
    If lastRowData <= intRowTitleTimes Then
        WorkArea_Create = False
        Exit Function
    Else
        WorkArea_Create = True
    End If
    
'   Variablen initialisieren
    wRow = 0

'   Array f|fffd|r Erschwernisse
    ReDim arrErschw(100)
'   Max. Anzahl Zeilen im Array f|fffd|r XML
    dimArray = Sheets("Stundenarbeiten").UsedRange.SpecialCells(xlCellTypeLastCell).Row * 20
    ReDim arrWork(dimArray, 8)

'   Eine Zeile nach der anderen -> Arbeitsvorrat als Array (zwei Dimensionen) aufbauen:
    arrSheet = Sheets("Stundenarbeiten").UsedRange
    For arrRow = LBound(arrSheet, 1) To UBound(arrSheet, 1)
        If arrRow = intRowTitleTimes Then
            ' Erschwernisse
            For sCol = LBound(arrSheet, 2) To UBound(arrSheet, 2)
                arrErschw(sCol) = arrSheet(arrRow, sCol)
            Next
        ElseIf arrRow > intRowTitleTimes Then
            For sCol = LBound(arrSheet, 2) To UBound(arrSheet, 2)
               Select Case sCol
                    Case colEmployeeNumber  ' F-Nummer
                        strEmployeeNumber = arrSheet(arrRow, sCol)
                    Case colDate  ' Datum
                        strDate = arrSheet(arrRow, sCol)
                    Case colQualification  ' Quali
                        If arrSheet(arrRow, sCol) <> "" Then
                            ' Pr|fffd|fung auf 5stellig
                            If Len(arrSheet(arrRow, sCol)) = 5 Then
                                strQuali = arrSheet(arrRow, sCol)
                            ElseIf Len(arrSheet(arrRow, sCol)) = 7 Then
                                strQuali = Left(arrSheet(arrRow, sCol), 5)
                            Else
                                MsgBox "Die Leistungsnummer muss als 5- bzw. 7stellige Zahl angegeben werden (Zeile " & arrRow & ")"
                                End
                            End If
                        End If
                    Case colAccountTime  ' Kontierung
                        strAccountTime = arrSheet(arrRow, sCol)
                    Case colStartTime  ' Zeit von
                        strStartTime = Format(CStr(arrSheet(arrRow, sCol)), "#,##0.000000000000000")
                    Case colEndTime  ' Zeit bis
                        strEndTime = Format(CStr(arrSheet(arrRow, sCol)), "#,##0.000000000000000")
                    Case colCommentTime  ' Bemerkung
                        strCommentTime = arrSheet(arrRow, sCol)

                    ' Ab jetzt: Menge (Anz. Stunden) und Leistung
                    Case colQuantity_00 To lastColumnData ' Grundstunden/Erschwernisse
                        If arrSheet(arrRow, sCol) <> "" And arrSheet(arrRow, sCol) <> 0 And IsNumeric(arrSheet(arrRow, sCol)) Then
                            ' bei angegebener Menge - Leistungsnummer Mussfeld
                            If strQuali = "" Then
                                MsgBox "In Zeilen mit angegebener Menge ist die Leistungsnummer ein Mussfeld (Zeile " & arrRow & ")"
                                End
                            End If
                            ' Erschwernis zweistellig?
                            If Len(arrErschw(sCol)) = 1 Then
                                arrErschw(sCol) = "0" & arrErschw(sCol)
                            ElseIf Len(arrErschw(sCol)) > 2 Then
                                MsgBox "Die Zuschl|fffd|ge und Zulagen (Tabellenblatt Stundenarbeiten, Spalten|fffd|berschriften) d|fffd|rfen nur zweistellig sein"
                                End
                            End If
                            ' Menge
                            arrWork(wRow, 7) = arrSheet(arrRow, sCol)
                            ' hier Doppelerfassung pr|fffd|fen (Blatt "Leistungsverzeichnis")
                            If Worksheets("Leistungsverzeichnis").range("serviceNumber").Find(strQuali & arrErschw(sCol)) Is Nothing Then
                                ' alles OK - Leistung einf|fffd|gen
                                arrWork(wRow, 0) = strQuali & arrErschw(sCol)
                            Else
                                Sheets("Stundenarbeiten").Activate
                                Worksheets("Stundenarbeiten").Cells(arrRow, sCol).Select
                                MsgBox "Doppelerfassung! Die Leistung " & _
                                       strQuali & arrErschw(sCol) & _
                                       " wurde auch im Tabellenblatt Leistungsverzeichnis angegeben"
                                End
                            End If
                            ' Datum
                            arrWork(wRow, 2) = Format(strDate, "dd.mm.yyyy")
                            ' F-Nummer
                            arrWork(wRow, 3) = strEmployeeNumber
                            ' Kontierung
                            arrWork(wRow, 1) = strAccountTime
                            ' Zeit von
                            arrWork(wRow, 4) = Format(strStartTime, "hh:mm:ss")
                            ' Zeit bis
                            arrWork(wRow, 5) = Format(strEndTime, "hh:mm:ss")
                            ' Bemerkung
                            arrWork(wRow, 6) = strCommentTime
                            wRow = wRow + 1
                        End If
                End Select
            Next
        End If
    Next

    If wRow > 0 Then
        ' Pr|fffd|fen, ob ein Tabellenblatt "XML" exstiert - wenn nicht, anlegen
        sheetFound = False
        For Each w In Worksheets
            If w.Name = "XML" Then
                sheetFound = True
                w.Cells.Clear
            End If
        Next
        If Not sheetFound Then
            ' Blatt anlegen (an letzter Stelle)
            Sheets.Add After:=Worksheets(Worksheets.Count)
            ActiveSheet.Name = "XML"
        End If
   
        strRange = "A1:H" & wRow
        Sheets("XML").range(strRange) = arrWork
    
        ' Sortieren nach: Kontierung, Leistungsnummer, Datum, F-Nummer, Zeit von
        Sheets("XML").Sort.SortFields.Clear
        ' Sortierung zur Zeit: zuerst Kontierung, dann Leistungsnummer
        Sheets("XML").Sort.SortFields.Add Key:=range( _
            "B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        Sheets("XML").Sort.SortFields.Add Key:=range( _
            "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        ' Sortierung zur Zeit: zuerst F-Nummer, dann Datum
        Sheets("XML").Sort.SortFields.Add Key:=range( _
            "D:D"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortTextAsNumbers
        Sheets("XML").Sort.SortFields.Add Key:=range( _
            "C:C"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        Sheets("XML").Sort.SortFields.Add Key:=range( _
            "E:E"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        With Sheets("XML").Sort
            .SetRange range("A:H")
            .Header = xlGuess
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End If

End Function

Sub WorkArea_Process()

    Dim arrRow As Integer, sCol As Integer
    Dim srvRow As Integer
    Dim timeRow As Integer
    Dim strDateiname As String
    Dim anzZeilen As Integer
    Dim sheetFound As Boolean
    Dim w As Worksheet
    
    Dim lastServiceNumber As String
    Dim lastAccountAssignment As String
    
    'Die sortierte Tabelle mit den Rohdaten einlesen
    
    ' Pr|fffd|fen, ob ein Tabellenblatt "XML" exstiert - wenn nicht, anlegen
    sheetFound = False
    For Each w In Worksheets
        If w.Name = "XML" Then
            sheetFound = True
        End If
    Next

    If sheetFound = True Then
        arrSheet = Sheets("XML").UsedRange
    Else
        Exit Sub
    End If
    
    'Nacheinander alle Zeilen
    For arrRow = LBound(arrSheet, 1) To UBound(arrSheet, 1)
        
        If arrRow = 1 Then
            srvRow = 1
            
            'XML-Daten der Leistungszeile f|fffd|llen
            XMLServiceData arrRow, srvRow
            timeRow = 1
            XMLWorkingTimes arrRow, 1
        'Gruppenwechsel: bei neuer Leistung bzw. Kontierung
        ElseIf lastServiceNumber <> arrSheet(arrRow, 1) Or _
                    lastAccountAssignment <> arrSheet(arrRow, 2) Then
            ' letzte Gruppe (Leistung) abschlie|fffd|en
            nodeTimes.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab + vbTab)
            fragLine.appendChild nodeTimes
            nodeLine.appendChild fragLine
            nodeLine.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab)
            fragLines.appendChild nodeLine
            
            'n|fffd|chster Abschnitt mit anafngen mit neuer Zeile
            fragLines.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab)
            ' Variablen initialisieren
            ' Z|fffd|hler f|fffd|r Leistungszeile
            srvRow = srvRow + 1
            ' XML-Daten der Leistungszeile f|fffd|llen
            XMLServiceData arrRow, srvRow
            ' Z|fffd|hler f|fffd|r workingTimes zur|fffd|cksetzen
            timeRow = 1
            XMLWorkingTimes arrRow, 1
        Else
            ' neue Zeit - n|fffd|chste Zeile mit Zeitdaten
            timeRow = timeRow + 1
            XMLWorkingTimes arrRow, timeRow
        End If
        ' Daten f|fffd|r Gruppenwechselabgleich merken
        lastServiceNumber = arrSheet(arrRow, 1)
        lastAccountAssignment = arrSheet(arrRow, 2)
    Next
        
    ' letzte Gruppe (Leistung) abschlie|fffd|en
    nodeTimes.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab + vbTab)
    fragLine.appendChild nodeTimes
    nodeLine.appendChild fragLine
    nodeLine.appendChild dom.createTextNode(vbNewLine + vbTab + vbTab)
    fragLines.appendChild nodeLine

    ' Z|fffd|hler f|fffd|r Leistungszeile
    srvRow = srvRow + 1
    ' Z|fffd|hler f|fffd|r workingTimes zur|fffd|cksetzen
    timeRow = 1
        
    Exit Sub
    
ErrorHandler:
    MsgBox Err.Description
        
End Sub





INQUEST-PP=macro
