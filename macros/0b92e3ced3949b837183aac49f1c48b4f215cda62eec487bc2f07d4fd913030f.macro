Attribute VB_Name = "ClassAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents app As Application

Private Sub app_DocumentChange()
    On Error Resume Next
    
    CloseBln
    
    OpenBln
    Set objDocBln = ActiveDocument
FatalError:
    Err.Clear
End Sub

Private Sub CloseBln()
Dim strVal As String
    On Error GoTo FatalErrorClose
    strVal = ""
    
    'if old doc's bln was being displayed, then close it
    strVal = objDocBln.Variables(strPOST_WIZ_BLN).Value
    If strVal = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
FatalErrorClose:
    Err.Clear
End Sub

Private Sub OpenBln()
Dim strVal As String

    On Error GoTo FatalErrorOpen
    strVal = ""
    strVal = ActiveDocument.Variables(strPOST_WIZ_BLN).Value

    'check to see if bln should be displayed for new doc.
    If (strVal = "1") Then
        objPostWizBln.Show
        fPostWizBlnOpen = True
    End If
    
FatalErrorOpen:
    Err.Clear
End Sub
Attribute VB_Name = "Common"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Common VBA Module
' --------------------------------------------------------------------------------------

Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Note use of trailing spaces and punctuation...

' Banter strings
Public Const strSTARTING        As String = "Der "
Public Const strSTARTING2       As String = " wird geladen..."
Public Const strAPPLYING        As String = "Formatvorlagen werden kopiert..."
Public Const strCREATING_DOC    As String = "Dokument wird erstellt..."
Public Const strSAVE_SETTINGS   As String = "Einstellungen werden gespeichert..."
Public Const strRST_SETTINGS    As String = "Einstellungen werden wiederhergestellt..."
Public Const strUPDATING_STYLE  As String = "Formatvorlagen werden kopiert..."

' Error messages
Public Const strERR_BAD_DOC         As String = "Der Assistent kann nicht im aktiven Dokument verwendet werden. Um den Assistenten zu verwenden, w|fffd|hlen Sie ""Neu"" im Men|fffd| ""Datei"" und w|fffd|hlen Sie den "
Public Const strERR_BAD_DOC2        As String = " aus."
Public Const strERR_INTERNAL        As String = "Der Assistent kann nicht fortfahren, da ein Fehler aufgetreten ist."
Public Const strERR_WIZ_NOT_FOUND   As String = "Der Assistent konnte nicht im Benutzer-Vorlagen-Pfad gefunden werden."
Public Const strERR_STYLE_NOT_FOUND As String = "Der Assistent konnte die ben|fffd|tigte Datei "
Public Const strERR_STYLE_NOT_FOUND2 As String = " nicht finden. Diese Datei wird ben|fffd|tigt, um das Dokument zu formatieren. Falls die Datei nicht installiert ist, f|fffd|hren Sie bitte das Setup erneut durch, und installieren Sie die Datei."
Public Const strERR_ADDR_BOOK       As String = "Fehler beim Einf|fffd|gen eines Namens aus einem Adre|fffd|buch."
Public Const strERR_SEND_FAX        As String = "Der Assistent konnte dieses Dokument nicht per Fax versenden."
Public Const strERR_SEND_MAIL       As String = "Der Assistent konnte dieses Dokument nicht per E-Mail versenden."
Public Const strERR_AUTOTEXT_NOT_FOUND As String = "Word konnte keinen AutoText aus dem Assistenten einf|fffd|gen. Bitte f|fffd|hren Sie das Setup-Programm erneut aus und installieren Sie diesen Assistenten neu."
Public Const strERR_INIT_FORM       As String = "Word konnte den Eingabedialog des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut."
Public Const strERR_INIT_CALL_BACK  As String = "Word konnte die Auswahloptionen zum Ende des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut, um die Auswahlm|fffd|glichkeiten zu sehen."

' Misc strings
Public Const strWIZ As String = ".wiz"  'common extension to a wizard file
Public Const strDOT As String = ".dot"  'extension to a template file

'the setting in which this wizard has been saved. If the wizard is saved with A4 settings then
'this constant should be set to A4
Public Const strWIZ_SAVED_AS As String = "Letter"

'the settings key for page size
Public Const strREG_PAGE_SIZE As String = "PageSize"
'to check if it is A4 and change the pagesize if the key's value is this string
Public Const strA4_SETTING As String = "A4"
' --------------------------------------------------------------------------------------
' ************     DO NOT LOCALIZE ANY CODE BEYOND THIS POINT  *************************
' --------------------------------------------------------------------------------------

'registry key under which to store individual wizard preference settings
Public Const strREG_SETTINGS_BASE_KEY As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Word\Wizards\"

Public Const strSPACE       As String = " "
Public Const strCOMMA       As String = ","
Public Const strSHP_MAP     As String = "shpMap"  'prefix to the names of the shapes in the navigation chart/map
Public Const strLBL_MAP     As String = "lblMap"  'prefix to the names of the labels in the navigation chart/map
Public Const strREG_ASSISTANT_HELP As String = "Assistant Help" 'registry entry to store local state of Assistant
                                                                'for this wizard
Public Const strREG_ASSISTANT_TIME_STAMP As String = "Time Stamp" 'registry to store the time stamp when the
                                                                  'local state of the wizard changed.

'COLOR constants used
Public Const COLOR_DISABLED As Long = &H404040  'used for disabled panel's label and shape
Public Const COLOR_DARKGREY As Long = &H808080  'used for visited panel's label and shape
Public Const COLOR_LIGHTGREY As Long = &HC0C0C0 'used for unvisited panel's label and shape
Public Const COLOR_RED      As Long = vbRed
Public Const COLOR_GREEN    As Long = vbGreen
Public Const COLOR_WHITE    As Long = vbWhite


' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' Wizard Names And FileNames
Public strWizName As String
Public strWizLongName As String
Public strWizShortName As String

Public fSettingsRestored As Boolean
Public fSettingsSaved As Boolean

' Application Environment
Public objActiveRange   As Range     'current range
Public objWizTemplate   As Template  'doc's template i.e the wizard
Public iAlertsLevel      As Integer   'stores the initial alerts level

' Variables to store some environment values
Public strPathSeparator As String   ' Directory separator in a path
Public strTemplatePath As String    ' Path of the the wizard and corresponding templates

'current panel of the multipage control in the dialog
Public iCurrentPanel As Integer

' Registry location key
Public strRegSettingsKey As String

' Assistant
Public objAssistantBalloon  As Balloon  'help balloon displayed for each panel
Public fBalloonVisible      As Boolean  'true if the above balloon is visible
Public iLocalState          As Integer  'Local State of Assistant for passing to Office
Public lAssistantId         As Long     'assistant id obtained from StartWizard call
Public fExitTglEvent        As Boolean  'this is set to True, if we don't want the click
                                        'event for the toggle buttonto be executed when
                                        'we change its value

Public fWizardCallBack      As Boolean  'we set it to True in FReenterWizardPanel
                                        'since it is used only in JumpToPanel
                                        'to disable jumping to otherpanels, by clicking
                                        'on the shapes
Public fInitialAssistantState As Boolean  ' to go back to after exiting wizard
Public fAsstHelp As Boolean

'if the activedocument's papersize was changed then one of the two following
'variables will be set according to the paper size that is being set.
Public fChangeToA4 As Boolean
Public fChangeToLetter As Boolean

'Post wizard balloon options.
Public objPostWizBln As Balloon
Public objDocBln As Document
Public clsBln As New ClassAppEvents
Public fBlnInitialized As Boolean
Public fPostWizBlnOpen As Boolean

'variables storing the rectangle of the form to be avoided
'by the asst. and balloon
Public lFormTop As Long, lFormHeight As Long
Public lFormLeft As Long, lFormWidth As Long

' Wizard dialog form
Public formWizard As formWizDlg 'New formWizDlg

' General Purpose Utilities for Starting, Saving, and Restoring Wizards
' --------------------------------------------------------------------------------------
Public Sub StartWizard()
    On Error GoTo FatalError
  
    Application.ScreenUpdating = False
    
    ' Init Global Var
    fWizardCallBack = False
    fExitTglEvent = False
    fSettingsRestored = False
    fSettingsSaved = False
    lAssistantId = 0
  
    ' Identify Wizard
    InitWizardName (True)
    
    ' We're busy now
    StatusBar = strSTARTING & strWizName & strSTARTING2

    SetWizardEnvironment

    ' Locate the wizard template
    InitDocTemplate
    strTemplatePath = StrWizardPath

    ' Initialize the new document
    InitDoc
    
    ' Initialize form
    InitWizard (True)
    
    'remove any text which might written for indicating progress
    StatusBar = ""
    
    ' Connect to the Assistant
    InitWizardAssistant
    
    ' Bring up dialog
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    formWizard.Show
    
    ResetWizardEnvironment (True)
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' Main / StartWizard


Private Sub InitDocTemplate()
    ' Did user create a New Document or a New Template?
    On Error GoTo CreatingNewTemplate
    
    ' New Document
    Set objWizTemplate = ActiveDocument.AttachedTemplate
    Exit Sub

CreatingNewTemplate:
    ' New Template
    Set objWizTemplate = ActiveDocument
End Sub  ' InitDocTemplate


Private Function StrWizardPath() As String
    Dim strPath As String
    Dim strFileName As String
    Dim i As Integer
    Dim fFound As Boolean

    On Error GoTo FatalError
    
    fFound = True
    strPath = objWizTemplate.Path

    If (Len(strPath) = 0) Then
        ' New template based on Wizard
        ' Get location of templates - first look in UserTemplatesPath
        ' and then in Workgroup path
        i = 0
        fFound = False
        strPath = Application.Options.DefaultFilePath(wdUserTemplatesPath)
        
        While ((i < 2) And fFound = False)
            If (Len(strPath) <> 0) Then
                ' First try to find wizard with long filename
                WordBasic.FileFind SearchPath:=strPath, Name:=strWizLongName & strWIZ, SubDir:=1, MatchCase:=0
                If WordBasic.CountFoundFiles() = 0 Then
                    ' Try to find wizard with short filename
                    WordBasic.FileFind SearchPath:=strPath, Name:=strWizShortName & strWIZ, SubDir:=1, MatchCase:=0
                    If WordBasic.CountFoundFiles() <> 0 Then fFound = True
                Else
                    fFound = True
                End If
            End If
        
            i = i + 1
            strPath = Application.Options.DefaultFilePath(wdWorkgroupTemplatesPath)
        Wend
        
        If (fFound) Then ' Wizard was found, so save path
            strFileName = WordBasic.[FoundFileName$](1)
            strPath = WordBasic.[FileNameInfo$](strFileName, 5)
        End If
    End If

    If (fFound) Then
        strPathSeparator = Application.PathSeparator
        If Right$(strPath, 1) <> strPathSeparator Then strPath = strPath & strPathSeparator
        StrWizardPath = strPath
        Exit Function
    End If

LWizardMissing:
    DisplayErrorMsg strERR_WIZ_NOT_FOUND
    
FatalError:
    ReportError Err
End Function ' StrWizardPath

'sets the wizard environment
Private Sub SetWizardEnvironment()
    System.Cursor = wdCursorWait
    'set alert level to none, so that Word/VBA dont display display any
    'error messages by themselves
    iAlertsLevel = Application.DisplayAlerts
    Application.DisplayAlerts = wdAlertsNone
    'Disable Cancel key, to prevent ESC key from interrupting the macro.
    'it will still dismiss the Form though
    Application.EnableCancelKey = wdCancelDisabled
End Sub

'resets the environment to what it was before the wizard was executed
Sub ResetWizardEnvironment(fDummy As Boolean)
    System.Cursor = wdCursorNormal
    'remove any text which might written for indicating progress
    StatusBar = ""
    Application.ScreenUpdating = True
    ActiveWindow.View.Type = wdPageView
    Application.DisplayAlerts = iAlertsLevel
    Application.EnableCancelKey = wdCancelInterrupt
End Sub

'returns the value stored in registry key strId
Public Function StrFetchPref(strId As String) As String
    On Error GoTo LReturnNull
    
    StrFetchPref = System.PrivateProfileString("", strRegSettingsKey, strId)
    Exit Function
LReturnNull:
    StrFetchPref = ""
End Function

'stores strValue in registry key strId
Public Sub StorePref(strId As String, strValue As String)
    Dim strTemp As String

    ' If string is empty, store "~" as placeholder
    If (Len(strValue) = 0) Then
        strTemp = "~"
    Else
        strTemp = strValue
    End If
    
    System.PrivateProfileString("", strRegSettingsKey, strId) = strTemp
End Sub

'returns the string stored in strId. If empty, returns strDefault
Public Function StrRestorePref(strId As String, strDefault As String) As String
    Dim strTemp As String

    strTemp = StrFetchPref(strId)
    ' If length is 0, it wasn't in regsistry, so use default value
    If Len(strTemp) = 0 Then
        strTemp = strDefault
    ' "~" is a placeholder to allow returning empty strings
    ElseIf strTemp = "~" Then
        strTemp = ""
    End If
    
    StrRestorePref = strTemp
End Function

' stores iVal in registry key strId as a string
Public Sub StoreValPref(strId As String, iVal As Integer)
    StorePref strId, CStr(iVal)
End Sub

'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function FRestorePref(strId As String, fDefault As Boolean) As Boolean

    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        FRestorePref = fDefault
    Else
        FRestorePref = Val(strVal)
    End If
End Function


'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function IRestorePref(strId As String, iDefault As Integer) As Integer
    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        IRestorePref = iDefault
    Else
        IRestorePref = Val(strVal)
    End If
End Function


'main error reporting routine called for fatal errors in the wizard
'SHOULD NOT BE CALLED FOR POST-WIZARD ERRORS
Public Sub ReportError(ByVal ErrorCode As ErrObject)
    Dim lErrorCode As Long
    Dim strErrorMsg As String
    
    lErrorCode = ErrorCode.Number
    strErrorMsg = ErrorCode.Description
    
    'The next statement seems to reset the ErrorCode object,
    'even though it is a ByVal argument
    On Error Resume Next
    
    ResetWizardEnvironment (True)
    
    If fBalloonVisible Then objAssistantBalloon.Close
    If lErrorCode Then DisplayErrorMsg strErrorMsg
    If lAssistantId Then Assistant.EndWizard lAssistantId, False '2nd parameter is fSuccess
    
    If (Not (formWizard Is Nothing)) Then
        formWizard.Hide
        Unload formWizard
        Set formWizard = Nothing
    End If
    
    'ReportError is not called in post-wizard option errors.
    'So, always closing the doc.
    ActiveDocument.Close wdDoNotSaveChanges 'ActiveDocument assumed to be set
    
    'terminate the wizard
    End

End Sub ' ReportError

'initialises the new doc. that is getting created
Private Sub InitDoc()
    Dim fBadDoc As Integer
    
    On Error GoTo FatalError

    'chk if doc.path errors if path not present.
    fBadDoc = False
    If (Len(ActiveDocument.Path) <> 0) Then
        'doc has been saved before
        fBadDoc = True
    Else
        Set objActiveRange = ActiveDocument.Content
        'chk if range has anything other than a paragraph mark
        If (objActiveRange.End > objActiveRange.Start + 1) Then fBadDoc = True
    End If
        
    If (fBadDoc) Then
        DisplayErrorMsg strERR_BAD_DOC & strWizName & strERR_BAD_DOC2
        ResetWizardEnvironment (True)
        'terminate the wizard
        End
    End If
    
    objActiveRange.Collapse wdCollapseStart
    
    SetPageSize

    Exit Sub

FatalError:
    ReportError Err
End Sub  ' InitDoc

' --------------------------------------------------------------------------------------
' Assistant related functions
' --------------------------------------------------------------------------------------

'initialises the Assistant for the wizard
Private Sub InitWizardAssistant()
    Dim lPrivate As Long
    
    fBalloonVisible = False
    On Error GoTo FatalError
    
    ' Was Assistant visible, when wizard was started?
    fInitialAssistantState = Assistant.Visible
    
    ' What is the local state of Assistant for this wizard?
    'if user changed "Help for wizards" globally in the Assistant Options dlg,
    'Word will automatically update this to reflect the latest value.
    iLocalState = IRestorePref(strREG_ASSISTANT_HELP, msoWizardActInactive)
    
    'the form is shown centered on the app. -StartUpPosition = CenterOwner
    lFormHeight = formWizard.Height
    lFormWidth = formWizard.Width
    lFormTop = Application.Top + (Application.Height / 2) - (lFormHeight / 2)
    If (lFormTop < 0) Then lFormTop = 0
    lFormLeft = Application.Left + (Application.Width / 2) - (lFormWidth / 2)
    If (lFormLeft < 0) Then lFormLeft = 0

    lAssistantId = Assistant.StartWizard(iLocalState, "Common.fnHelpCallBack", lPrivate, _
                                    Top:=lFormTop, Left:=lFormLeft, _
                                    Bottom:=lFormTop + lFormHeight, _
                                    Right:=lFormLeft + lFormWidth)
    
    iLocalState = msoWizardActInactive
    If lAssistantId = 0 Then GoTo FatalError 'error with Assistant.Startwizard.
                                             'Assistant probably not installed
    
    ' Initialize Balloon
    Set objAssistantBalloon = Assistant.NewBalloon
    With objAssistantBalloon
        .Heading = strWizName
        .Mode = msoModeModeless
        .Button = msoButtonSetNone
        .Text = rgstrAssistantMsg(0)
    End With
    objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
    If Assistant.BalloonError Then GoTo FatalError
    fAsstHelp = True
    Exit Sub
    
FatalError:
    fAsstHelp = False
    'since error occurred with assistant actions, let's disable Assistant button
    formWizard.tglAssistant.Enabled = False
    Err.Clear
End Sub

'this function called when user clicks on a button in the balloon put up by StartWizard or
'ActivateWizard.
Public Sub fnHelpCallBack(iHelp As Integer, lPrivate As Long)
    Select Case iHelp
        Case msoWizardMsgLocalStateOff:
            iLocalState = msoWizardActInactive
            'user doesn't want help anymore
            'if balloon is up,then close it
            If fBalloonVisible Then
                objAssistantBalloon.Close
                fBalloonVisible = False
            End If
            
            If (formWizard.tglAssistant.Value) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = False
            End If
        Case msoWizardMsgShowHelp:
            iLocalState = msoWizardActActive
                        
            If (Not (formWizard.tglAssistant.Value)) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = True
            End If
            
            If fBalloonVisible Then Exit Sub 'help balloon already up (should not occur, though)
            
            If fAsstHelp Then 'if no error in building help balloon
                objAssistantBalloon.Text = rgstrAssistantMsg(iCurrentPanel)
                objAssistantBalloon.Show
                If Assistant.BalloonError = msoBalloonErrorNone Then _
                    fBalloonVisible = True
            End If

    End Select
End Sub

Public Sub RestoreAssistant(fDummy As Boolean)
    On Error Resume Next
    Assistant.Visible = fInitialAssistantState
    Err.Clear
End Sub  ' RestoreAssistant


'displays error message in a balloon if Assistant is visible
'else uses a Msgbox
Public Sub DisplayErrorMsg(strErrMsg As String)
    Dim objErrBalloon As Balloon

    On Error GoTo DisplayMsgBox
    
    If lAssistantId Then
        If Assistant.Visible Then
            Set objErrBalloon = Assistant.NewBalloon
            With objErrBalloon
                .Mode = msoModeModal
                .Heading = strWizName
                .Text = strErrMsg
                .Button = msoButtonSetOK
                .Icon = msoIconAlert
            End With
            objErrBalloon.Show
            If Assistant.BalloonError = msoBalloonErrorNone Then
                Err.Clear
                Exit Sub
            End If
        End If
    End If
    
DisplayMsgBox:
    MsgBox strErrMsg, vbExclamation + vbOKOnly + vbApplicationModal, strWizName
    Err.Clear
    
End Sub
'if there exists a PageSize key with a value of A4 then change
'activedocument's page size to be A4
Private Sub SetPageSize()
    Dim strProperty As String
    
    fChangeToA4 = False
    fChangeToLetter = False
    On Error GoTo TryLetterPageSize
    strProperty = ""
    strProperty = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_PAGE_SIZE)
    If strProperty = strA4_SETTING Then
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperA4
            fChangeToA4 = True
        End If
    End If

TryLetterPageSize:
    On Error GoTo -1 'resets Err and the error handler
    On Error GoTo ExitSub
    If Len(strProperty) Then
    'registry entry was not found. Wizard should have letter size settings
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperLetter
            fChangeToLetter = True
        End If
    Else
        ActiveDocument.PageSetup.PaperSize = wdPaperLetter
        fChangeToLetter = True
    End If
ExitSub:
    Err.Clear
End Sub

' End Common Module
Attribute VB_Name = "Newslttr"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Newsletter Wizard Specific Code
' --------------------------------------------------------------------------------------
'
Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

'============================ LOCALIZATION BLOCK - START ============================
' Banter strings
Public Const strNEWSLETTER                  As String = "Rundschreiben"
Public Const strNEWSLETTER_WIZARD           As String = "Rundschreiben-Assistent"
Public Const strVOLUME_ISSUE                As String = "Jahrgang 1, Ausgabe 1"

Public Const strERR_HEADING_NOT_FOUND1       As String = "Artikel erscheinen nur dann in im Inhaltsverzeichnis, wenn Sie den Text mit der Formatvorlage """
Public Const strERR_HEADING_NOT_FOUND2       As String = """ formatieren."
Public Const strERR_TOC_REGENERATION_FAILED As String = "Der Assistent kann das Inhaltsverzeichnis nicht neu erstellen. Das vorhandene Inhaltsverzeichnsi wird wiederhergestellt."
Public Const strERR_TITLE_CLIPPED           As String = "Der Assistent k|fffd|rzt den Titel, damit er auf die Seite passt. Wenn Sie einen l|fffd|ngeren Titel verwenden m|fffd|chten, markieren Sie den Titel und verringern Sie die Schriftgr|fffd||fffd|e nachdem das Dokument erstellt wurde."


' Autotext - should have same names as found in the wizard.
Public Const strAT_MAIN_PROF                As String = "ProfessionalNewsletter"
Public Const strAT_MAIN_CONT                As String = "ContemporaryNewsletter"
Public Const strAT_MAIN_ELEG                As String = "ElegantNewsletter"
Public Const strAT_ML_STORY_CONT            As String = "ML Story - Contemporary"
Public Const strAT_ML_STORY_ELEG            As String = "ML Story - Elegant"
Public Const strAT_ML_STORY_PROF            As String = "ML Story - Professional"

' Style names should correspond to the styles in the Autotext entries in the wizard
Public Const strSTYLE_TITLE_CONT            As String = "Titel - Aktuell"
Public Const strSTYLE_TITLE_ELEG            As String = "Titel - Elegant"
Public Const strSTYLE_TITLE_PROF            As String = "Titel - Professionell"

Public Const strSTYLE_ISSUE_VOL_DATE_CONT   As String = "Jahrgang/Ausgabe/Datum - Aktuell"
Public Const strSTYLE_ISSUE_VOL_DATE_ELEG   As String = "Jahrgang/Ausgabe/Datum - Elegant"
Public Const strSTYLE_ISSUE_VOL_DATE_PROF   As String = "Jahrgang/Ausgabe/Datum - Professionell"

Public Const strSTYLE_HEADER_CONT           As String = "Kopfzeile - Aktuell"
Public Const strSTYLE_FOOTER_ELEG           As String = "Fu|fffd|zeile - Elegant"
Public Const strSTYLE_FOOTER_PROF           As String = "Fu|fffd|zeile - Professionell"

Public Const strSTYLE_PULLQUOTE_ELEG        As String = "Zitatauszug - Elegant"
Public Const strSTYLE_PULLQUOTE_PROF        As String = "Zitatauszug - Professionell"

Public Const strSTYLE_HEADING1_CONT         As String = "|fffd|berschrift 1 - Aktuell"
Public Const strSTYLE_HEADING1_ELEG         As String = "|fffd|berschrift 1 - Elegant"
Public Const strSTYLE_HEADING1_PROF         As String = "|fffd|berschrift 1 - Professionell"

Public Const strSTYLE_TOC_HEADING_CONT      As String = "Verzeichnis |fffd|berschrift - Aktuell"
Public Const strSTYLE_TOC_NUMBER_CONT       As String = "Verzeichnis Nummer - Aktuell"
Public Const strSTYLE_TOC_TEXT_CONT         As String = "Verzeichnis Text - Aktuell"
Public Const strSTYLE_TOC_HEADING_PROF      As String = "Inhaltsverzeichnis|fffd|berschrift - Professionell"

Public Const strSTYLE_SIDEBAR_TITLE_PROF    As String = "Bannertitel - Professionell"
Public Const strSTYLE_SIDEBAR_HEAD_PROF     As String = "Bannerkopf - Professionell"
Public Const strSTYLE_SIDEBAR_SUBHEAD_PROF  As String = "Banner Unter|fffd|berschrift - Professionell"
Public Const strSTYLE_SIDEBAR_TEXT_PROF     As String = "Bannertext - Professionell"

Public Const strSTYLE_JUMPFROM_CONT         As String = "Springen von - Aktuell"

' Assistant
Public Const strCALL_BACK_HEADING As String = "Wie m|fffd|chten Sie das Rundschreiben ver|fffd|ndern?"

'============================= LOCALIZATION BLOCK - END =============================

' Newsletter Template Constants
Public Const wzPROFESSIONAL       As Integer = 0
Public Const wzCONTEMPORARY       As Integer = 1
Public Const wzELEGANT            As Integer = 2
Public Const strNEWSLTTR          As String = "Newslttr"

' Wizard Form Control Related Constants
Public Const wzPAGE_START         As Integer = 0
Public Const wzPAGE_STYLE         As Integer = 1
Public Const wzPAGE_TITLE         As Integer = 2
Public Const wzPAGE_MAILING       As Integer = 3
Public Const wzPAGE_FINISH        As Integer = 4

'Bookmarks - DO NOT LOCALIZE
Public Const strBKMK_TITLE            As String = "Title"
Public Const strBKMK_HDR_FTR_TITLE    As String = "HFTitle"
Public Const strBKMK_HDR_DATE         As String = "HFDate"
Public Const strBKMK_VOLISSUE         As String = "VolIssue"
Public Const strBKMK_DATE             As String = "Date"

'margins to be set if pagesize is changed through wizard's code
Public Const sLETTER_MARGIN         As Single = 44 '0.611 in.
Public Const sA4_MARGIN             As Single = 36

Public Const iMAX_PANEL               As Integer = 4  ' Number of last panel in MultiPage (First=0)
Public Const iCALL_BACK_COUNT         As Integer = 3  ' Number of items in CallBackBalloon (First=1)
Public Const strPOST_WIZ_BLN          As String = "Newsletter Post Wizard Balloon"

' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' General
Public rgstrAssistantMsg(iMAX_PANEL + 1)  As String   ' As many as there are pages
Public rgstrCallBackMsg(iCALL_BACK_COUNT) As String
Public rgstrCallBackTip(0)                As String
Public fInitializingForm                  As Boolean

Public rgstrTOC(25, 2)  As String
Public iStyleCount         As Integer
  
' Page 1
Public iNewsletterStyle     As Integer
' Page 2
Public strDate              As String
Public strVolume            As String
' Page 3
' Page 4

Public Sub InitWizardStrings()
    
  On Error GoTo FatalError
  
  '============================ LOCALIZATION BLOCK - START ============================
  'Panel Tips
  ' Note: this list is indexed 0 - iMAX_PANEL
  rgstrAssistantMsg(0) = "Wenn Sie die gleichen Einstellungen wie beim letzten Rundschreiben verwenden m|fffd|chten, klicken Sie auf ""Fertigstellen""."
  rgstrAssistantMsg(1) = "W|fffd|hlen Sie aus, wie das Rundschreiben aussehen soll. Der Beispieltext im Rundschreiben gibt Ihnen weitere Hinweise zum Hinzuf|fffd|gen von Elementen und zur Formatierung des Rundschreibens."
  rgstrAssistantMsg(2) = "Geben Sie Titel, Datum, Jahr und Ausgabe ein. Die Darstellung dieser Elemente ist je nach Stil des Rundschreibens unterschiedlich. Sie k|fffd|nnen den Stil des Rundschreibens sp|fffd|ter noch |fffd|ndern."
  rgstrAssistantMsg(3) = "Um auf der letzten Seite Platz f|fffd|r einen Adre|fffd|aufkleber zu lassen, klicken Sie auf ""Ja""."
  rgstrAssistantMsg(4) = "Klicken Sie ""<Zur|fffd|ck"", um eine Einstellung zu |fffd|ndern."
  
  'Post Wizard assistance topics
  ' Note: change constant  iCALL_BACK_COUNT if number of items in list changes
  rgstrCallBackMsg(0) = "Eine Grafik hinzuf|fffd|gen oder entfernen."
  rgstrCallBackMsg(1) = "Das Inhaltsverzeichnis neu erstellen."
  rgstrCallBackMsg(2) = "Hilfe zu einem anderen Thema anfordern...."

  'Post Wizard assistance text
  rgstrCallBackTip(0) = "Um eine Grafik zu entfernen, markieren Sie die Grafik und l|fffd|schen Sie sie dann. Um einen Grafik einzuf|fffd|gen, setzen Sie die Einf|fffd|gemarke an die Stelle, an der die Grafik erscheinen soll, klicken Sie dann im Men|fffd| ""Einf|fffd|gen"" auf ""Grafik"" und w|fffd|hlen Sie ""Aus Datei""."
    
  '============================= LOCALIZATION BLOCK - END =============================

  ' Location in registry DO NOT CHANGE THIS VALUE FOR LOCALIZATION
  strRegSettingsKey = strREG_SETTINGS_BASE_KEY & "Newsletter Wizard"

  Exit Sub
  
FatalError:
  ReportError Err
    
End Sub  ' InitWizardStrings

Public Sub InitWizardName(fDummy As Boolean)

  strWizName = strNEWSLETTER_WIZARD
  strWizLongName = strNEWSLETTER_WIZARD
  strWizShortName = strNEWSLTTR

End Sub
Public Sub InitWizard(fDummy As Boolean)
    
  On Error GoTo FatalError
  
  ' Global Vars
  iCurrentPanel = 0
  
  ' Initialize strings
  InitWizardStrings
  
  ' Create a new instance of the form
  Set formWizard = New formWizDlg
  If formWizard Is Nothing Then GoTo FatalError

  formWizard.lblWizName1.Caption = " " & strWizLongName & " "
  Exit Sub
    
FatalError:
  DisplayErrorMsg strERR_INIT_FORM
  ReportError Err

End Sub

' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub SaveDialogValues(fDummy As Boolean)
    
  Dim i As Integer
  
  On Error GoTo FatalError
  
  ' Display status
  Application.ScreenUpdating = False
  StatusBar = strSAVE_SETTINGS
  System.Cursor = wdCursorWait
  
  ' Save Assistant State
  System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
  StoreValPref strREG_ASSISTANT_HELP, iLocalState

  StoreValPref "tglAssistant", formWizard.tglAssistant.Value
  
  ' Page 1
  StoreValPref "iNewsletterStyle", iNewsletterStyle
  StoreValPref "optBW", formWizard.optBW.Value

  ' Page 2
  StorePref "txtTitle", formWizard.txtTitle.Text
  StoreValPref "chkDate", formWizard.chkDate.Value
  StorePref "txtDate", formWizard.txtDate.Text
  StoreValPref "chkVolume", formWizard.chkVolume.Value
  StorePref "txtVolume", formWizard.txtVolume.Text
  
  ' Page 3
  StoreValPref "optMailYes", formWizard.optMailYes.Value

  StatusBar = ""
  System.Cursor = wdCursorNormal
  fSettingsSaved = True
  Application.ScreenUpdating = True
  Exit Sub
    
FatalError:
  ReportError Err

End Sub  ' SaveNewWizardValues


Public Sub RestoreDialogValues(fDummy As Boolean)
    
  Dim i As Integer
  On Error GoTo FatalError
  
  ' Display status
  Application.ScreenUpdating = False
  System.Cursor = wdCursorWait
  StatusBar = strRST_SETTINGS
  fInitializingForm = True
  
  ' Page 1
  iNewsletterStyle = IRestorePref("iNewsletterStyle", 0)
  Select Case iNewsletterStyle
    Case wzPROFESSIONAL
      formWizard.optProfessional.Value = True
      formWizard.shpProfessionalShadow.Visible = True
    Case wzCONTEMPORARY
      formWizard.optContemporary.Value = True
      formWizard.shpContemporaryShadow.Visible = True
    Case wzELEGANT
      formWizard.optElegant.Value = True
      formWizard.shpElegantShadow.Visible = True
    Case Else
      iNewsletterStyle = wzPROFESSIONAL
      formWizard.optProfessional.Value = True
      formWizard.shpProfessionalShadow.Visible = True
  End Select
  If FRestorePref("optBW", True) Then
    formWizard.optBW.Value = True
  Else
    formWizard.optColor.Value = True
  End If

  ' Page 2
  formWizard.txtTitle.Text = StrRestorePref("txtTitle", strNEWSLETTER)
  
  strDate = StrRestorePref("txtDate", Format$(Date, "mmmm yyyy"))
  If strDate = "" Then
    strDate = Format$(Date, "mmmm yyyy")
  End If
  If FRestorePref("chkDate", True) Then
    formWizard.chkDate.Value = True
    formWizard.txtDate.Text = strDate
  Else
    formWizard.chkDate.Value = False
    formWizard.txtDate.Text = ""
  End If
  
  strVolume = StrRestorePref("txtVolume", strVOLUME_ISSUE)
  If strVolume = "" Then
    strVolume = strVOLUME_ISSUE
  End If
  If FRestorePref("chkVolume", True) Then
    formWizard.chkVolume.Value = True
    formWizard.txtVolume.Text = strVolume
  Else
    formWizard.chkVolume.Value = False
    formWizard.txtVolume.Text = ""
  End If
  
  ' Page 3
  formWizard.optMailYes.Value = FRestorePref("optMailYes", True)
  
  StatusBar = ""
  fSettingsRestored = True
  System.Cursor = wdCursorNormal
  fInitializingForm = False
  
  Application.ScreenUpdating = True
  Exit Sub

FatalError:
  ReportError Err

NoError:

End Sub


Public Sub CreateNewDoc(fDummy As Boolean)
    
  Dim rngMailingLabel    As Range
  Dim strATName          As String
  Dim strMailingLabel    As String
  Dim ooptColor          As OptionButton
  Dim oBkmks             As Bookmarks
  Dim oStyles            As Styles
  Dim strTitle           As String
  Dim objFps             As PageSetup
  Dim iLenTitle          As Integer
  
'On Error GoTo CreateNewDoc_Error

  System.Cursor = wdCursorWait
  
  With Application
    .ScreenUpdating = False
    .StatusBar = strCREATING_DOC
  End With
  
  strTitle = formWizard.txtTitle.Text
  Set ooptColor = formWizard.optColor

        
  'Set Autotext names
  Select Case iNewsletterStyle
    Case wzCONTEMPORARY
      strATName = strAT_MAIN_CONT
      strMailingLabel = strAT_ML_STORY_CONT
    Case wzELEGANT
      strATName = strAT_MAIN_ELEG
      strMailingLabel = strAT_ML_STORY_ELEG
    Case wzPROFESSIONAL
      strATName = strAT_MAIN_PROF
      strMailingLabel = strAT_ML_STORY_PROF
  End Select
    
  Set objActiveRange = ActiveDocument.Content
  objActiveRange.Collapse wdCollapseEnd
  
  'Insert AutoText
  ActiveDocument.AttachedTemplate.AutoTextEntries(strATName).Insert objActiveRange, True
  
  Set oStyles = ActiveDocument.Styles
  
  'Set Title font size
  iLenTitle = Len(strTitle)
  Select Case iNewsletterStyle
    Case wzCONTEMPORARY
        If (iLenTitle > 15) Then
            DisplayErrorMsg strERR_TITLE_CLIPPED
            strTitle = Left$(strTitle, 15)
            oStyles(strSTYLE_TITLE_CONT).Font.Size = 42
        ElseIf (iLenTitle > 12) Then
            oStyles(strSTYLE_TITLE_CONT).Font.Size = 42
        ElseIf (iLenTitle > 9) Then
            oStyles(strSTYLE_TITLE_CONT).Font.Size = 50
        End If
    Case wzELEGANT
        If (iLenTitle > 20) Then
            DisplayErrorMsg strERR_TITLE_CLIPPED
            strTitle = Left$(strTitle, 20)
            oStyles(strSTYLE_TITLE_ELEG).Font.Size = 36
        ElseIf (iLenTitle > 15) Then
            oStyles(strSTYLE_TITLE_ELEG).Font.Size = 36
        ElseIf (iLenTitle > 10) Then
            oStyles(strSTYLE_TITLE_ELEG).Font.Size = 48
        End If
    Case wzPROFESSIONAL
        If (iLenTitle > 20) Then
            DisplayErrorMsg strERR_TITLE_CLIPPED
            strTitle = Left$(strTitle, 20)
            oStyles(strSTYLE_TITLE_PROF).Font.Size = 36
        ElseIf (iLenTitle > 15) Then
            oStyles(strSTYLE_TITLE_PROF).Font.Size = 36
        ElseIf (iLenTitle > 10) Then
            oStyles(strSTYLE_TITLE_PROF).Font.Size = 48
      End If
  End Select
   
  'Replace Mailing Label if necessary
  If formWizard.optMailNo Then
    Set rngMailingLabel = ActiveDocument.Tables(2).Range
    ActiveDocument.Tables(2).Delete
    ActiveDocument.AttachedTemplate.AutoTextEntries(strMailingLabel).Insert rngMailingLabel, True
  End If

  If ooptColor Then
    FApplyColor (True)
  End If
              
    Set oBkmks = ActiveDocument.Bookmarks
    
  'Set Newsletter Title
  Set objActiveRange = oBkmks(strBKMK_TITLE).Range
  objActiveRange.Text = strTitle
  If iNewsletterStyle = wzCONTEMPORARY Then objActiveRange.SpellingChecked = True
  
  'Set Newsletter Volume/Issue if necessary
  If formWizard.chkVolume Then
    oBkmks(strBKMK_VOLISSUE).Range.Text = formWizard.txtVolume
  Else
    oBkmks(strBKMK_VOLISSUE).Range.Delete
  End If
  
  'Set Newsletter Date if necessary
  If formWizard.chkDate Then
    oBkmks(strBKMK_DATE).Range.Text = formWizard.txtDate
  Else
    oBkmks(strBKMK_DATE).Range.Delete
  End If
  
  If iNewsletterStyle = wzCONTEMPORARY Then
    ActiveDocument.Sections(1).Headers(wdHeaderFooterEvenPages).Exists = True
  End If
  'Set Page Header/Footer
  Set objActiveRange = oBkmks(strBKMK_HDR_FTR_TITLE).Range
  objActiveRange.Text = strTitle
  objActiveRange.SpellingChecked = True
  objActiveRange.GrammarChecked = True
  
  Select Case iNewsletterStyle
    Case wzCONTEMPORARY
        'Set Header Date
        Set objActiveRange = oBkmks(strBKMK_HDR_DATE).Range
        objActiveRange.Text = formWizard.txtDate
        objActiveRange.SpellingChecked = True
        objActiveRange.GrammarChecked = True

    Case wzELEGANT
      'Adjust Title borders if there is no Vol/Issue and no Date
      If (Not formWizard.chkVolume) And (Not formWizard.chkDate) Then
        'Add bottom border to Title
        With oStyles(strSTYLE_TITLE_ELEG).Borders(3)
            .LineStyle = wdLineStyleDouble
            .Visible = True
        End With
        'Remove bottom border from Issue/Volume/Date
        oStyles(strSTYLE_ISSUE_VOL_DATE_ELEG).Borders(3).Visible = False
      End If
    'Case wzPROFESSIONAL  'Nothing unique for Professional
  End Select
        
    'set margins after insert AT entry since that resets the margins
    If fChangeToA4 Then
        Set objFps = ActiveDocument.PageSetup
        objFps.LeftMargin = sA4_MARGIN
        objFps.RightMargin = sA4_MARGIN
        If iNewsletterStyle = wzCONTEMPORARY Then objFps.BottomMargin = 1.7 * 72
        objFps.PaperSize = wdPaperA4
    ElseIf fChangeToLetter Then
        Set objFps = ActiveDocument.PageSetup
        objFps.PaperSize = wdPaperLetter
        objFps.LeftMargin = sLETTER_MARGIN
        objFps.RightMargin = sLETTER_MARGIN
        If iNewsletterStyle = wzCONTEMPORARY Then objFps.BottomMargin = 72
    End If
    
  'Place cursor at the top
  Selection.HomeKey wdStory
  
  'Set Window caption
  With ActiveWindow
    If strTitle = "" Then
      .Caption = .Caption & " - " & strNEWSLETTER
    Else
      .Caption = .Caption & " - " & strTitle & strSPACE & formWizard.txtDate
    End If

    With .View
      .TableGridlines = True
      .ShowDrawings = True
    End With
  End With
    
  With ActiveDocument
    .SpellingChecked = True
    .GrammarChecked = True
    .UndoClear
  End With

  Exit Sub

CreateNewDoc_Error:
  ReportError Err
  
End Sub ' CreateNewDoc
'initialize the post-wizard options balloon
Public Sub InitCallBack(fDummy As Boolean)

  Dim i As Integer
  Dim objCallBackLabels As BalloonLabels

On Error GoTo ErrorCallBack
  
  If Not (fBlnInitialized) Then
  
    Set objPostWizBln = Assistant.NewBalloon
    fBlnInitialized = True
    With objPostWizBln
      .Heading = strCALL_BACK_HEADING
      .Mode = msoModeModeless
      .Button = msoButtonSetCancel
      .BalloonType = msoBalloonTypeButtons
      .Callback = "Newslttr.fnCallBack"
    End With

    Set objCallBackLabels = objPostWizBln.Labels
    objCallBackLabels.Count = iCALL_BACK_COUNT
    For i = 1 To iCALL_BACK_COUNT
      objCallBackLabels.Item(i).Text = rgstrCallBackMsg(i - 1)
    Next i
  End If
  
  objPostWizBln.Show

  If (Assistant.BalloonError) Then GoTo ErrorCallBack
  
  fPostWizBlnOpen = True
  Set objDocBln = ActiveDocument
  Set clsBln.app = Application
  ActiveDocument.Variables.Add strPOST_WIZ_BLN, "1"
  
  Exit Sub
  
ErrorCallBack:
  DisplayErrorMsg strERR_INIT_CALL_BACK
  fPostWizBlnOpen = False
  Set objDocBln = ActiveDocument
  Set clsBln.app = Application
  ActiveDocument.Variables.Add strPOST_WIZ_BLN, "0"
  
End Sub

'callback function for post-wizard options balloon
Public Function fnCallBack(objBln As Balloon, iBtn As Integer, lPrivate As Long)
    
  On Error GoTo ErrorCallBack
  
  Select Case iBtn
    Case Is < 1 'Exit
      objBln.Close
      fPostWizBlnOpen = False
      ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "0"
      RestoreAssistant (True)

    Case 1: 'Add/Remove/Change Picture
      Set objBln = Assistant.NewBalloon
      With objBln
        .Mode = msoModeModal
        .Button = msoButtonSetOK
        .BalloonType = msoBalloonTypeButtons
        .Text = rgstrCallBackTip(0)
        .Show
      End With
    Case 2: 'Regenerate TOC
        RegenerateTOC
    Case 3: 'Get help...
      Assistant.Help
  End Select
  
  Exit Function
    
ErrorCallBack:
  DisplayErrorMsg strERR_INIT_CALL_BACK
  ReportError Err

End Function

Public Sub FApplyColor(fDummy As Boolean)

On Error GoTo FApplyColor_Error

  With ActiveDocument
    Select Case iNewsletterStyle
      Case wzCONTEMPORARY
      
        'Title
        .Styles(strSTYLE_TITLE_CONT).Font.ColorIndex = wdTeal
        
        'TOC (Textbox) Background
        .Shapes(10).Fill.ForeColor = 8421376
        'TOC Text
        .Styles(strSTYLE_ISSUE_VOL_DATE_CONT).Font.ColorIndex = wdGray25
        .Styles(strSTYLE_TOC_HEADING_CONT).Font.ColorIndex = wdGray25
        .Styles(strSTYLE_TOC_NUMBER_CONT).Font.ColorIndex = wdGray25
        .Styles(strSTYLE_TOC_TEXT_CONT).Font.ColorIndex = wdGray25
        
        With .Tables(1)
        'TOC Internal Borders
            .Cell(2, 1).Borders(1).ColorIndex = wdGray25
            .Cell(3, 1).Borders(3).ColorIndex = wdGray25
        End With
      
        'more ways to customize the template
        .Shapes(5).Fill.ForeColor.RGB = 13421619
        'Calendar (Part 1) Background
        .Shapes(8).Fill.ForeColor.RGB = 13421619
        'Calendar (Part 2) Background
        .Shapes(9).Fill.ForeColor.RGB = 13421619
        'Sidebar Background
        .Shapes(12).Fill.ForeColor.RGB = 13421619
        
        'MailingLabel if necessary
        If formWizard.optMailYes Then
            With .Tables(2)
          'Color Mailing Label Text
                .Cell(1, 1).Range.Font.ColorIndex = wdTeal
                .Cell(2, 1).Range.Font.ColorIndex = wdTeal
                With .Cell(1, 3)
          'Color Mailing Label Postage Borders
                    .Borders(1).ColorIndex = wdTeal
                    .Borders(2).ColorIndex = wdTeal
                    .Borders(3).ColorIndex = wdTeal
                    .Borders(4).ColorIndex = wdTeal
                End With
            End With
        End If
        
        'Picture 1
        .Shapes(2).PictureFormat.ColorType = msoPictureAutomatic
        'Picture 2
        .Shapes(4).PictureFormat.ColorType = msoPictureAutomatic
                  
        'Section End Graphic
        .Shapes(13).Fill.ForeColor = 13421619
                  
        'Header Title and Date
        .Styles(strSTYLE_HEADER_CONT).Font.ColorIndex = wdTeal
        
        'Jump From
        .Styles(strSTYLE_JUMPFROM_CONT).Borders(1).ColorIndex = wdTeal
        
        With .Sections(1).Footers(1)
        'Footer Graphics
            .Shapes(1).Fill.ForeColor = 13421619
            .Shapes(2).Fill.ForeColor = 13421619
            .Shapes(3).Fill.ForeColor = 13421619
            .Shapes(4).Fill.ForeColor = 13421619
        End With
        
      Case wzELEGANT
        
        'Title
        .Styles(strSTYLE_TITLE_ELEG).Font.ColorIndex = wdViolet
        'Title Border
        .Styles(strSTYLE_TITLE_ELEG).Borders.Item(1).ColorIndex = wdViolet
        .Styles(strSTYLE_TITLE_ELEG).Borders.Item(3).ColorIndex = wdViolet
        
        'Date/VolIssue
        .Styles(strSTYLE_ISSUE_VOL_DATE_ELEG).Font.ColorIndex = wdViolet
        'Date/VolIssue Border
        .Styles(strSTYLE_ISSUE_VOL_DATE_ELEG).Borders.Item(3).ColorIndex = wdViolet
        
        'PullQuote
        .Styles(strSTYLE_PULLQUOTE_ELEG).Font.ColorIndex = wdViolet
        'PullQuote Borders
        .Styles(strSTYLE_PULLQUOTE_ELEG).Borders.Item(1).ColorIndex = wdViolet
        .Styles(strSTYLE_PULLQUOTE_ELEG).Borders.Item(3).ColorIndex = wdViolet
        
        'TOC Background
        With .Tables(1).Shading
            .Texture = wdTextureNone
            .BackgroundPatternColorIndex = wdAuto
            .ForegroundPatternColorIndex = wdAuto
        End With
        With .Shapes(13).Fill
            .ForeColor = 52428
            .Visible = msoTrue
        End With

        'customizing template Background
        .Shapes(9).Fill.ForeColor = 52428
        'Sidebar Background
        .Shapes(6).Fill.ForeColor = 52428
  
        'MailingLabel if necessary
        If formWizard.optMailYes Then
          'Color Mailing Label Text
          With .Tables(2)
            .Cell(1, 1).Range.Font.ColorIndex = wdViolet
            .Cell(1, 3).Range.Font.ColorIndex = wdViolet
            .Cell(3, 1).Range.Font.ColorIndex = wdViolet
            .Cell(3, 2).Range.Font.ColorIndex = wdViolet
          End With
          'Color Mailing Label Postage Borders
          With .Tables(2).Cell(1, 3)
            .Borders(1).ColorIndex = wdViolet
            .Borders(2).ColorIndex = wdViolet
            .Borders(3).ColorIndex = wdViolet
            .Borders(4).ColorIndex = wdViolet
          End With
        End If
        
        'Picture 1
        .Shapes(2).TextFrame.ContainingRange.InlineShapes(1).PictureFormat.ColorType = msoPictureAutomatic
        'Picture 2
        .Shapes(7).TextFrame.ContainingRange.InlineShapes(2).PictureFormat.ColorType = msoPictureAutomatic
        
        'Footer Title
        .Styles(strSTYLE_FOOTER_ELEG).Font.ColorIndex = wdViolet
        'Footer Title Border
        .Styles(strSTYLE_FOOTER_ELEG).Borders.Item(1).ColorIndex = wdViolet
  
      Case wzPROFESSIONAL
      
        With .Styles(strSTYLE_TITLE_PROF)
        'Title
            .Font.ColorIndex = wdDarkBlue
            With .Borders
        'Title Border
                .Item(1).ColorIndex = wdDarkBlue
                .Item(2).ColorIndex = wdDarkBlue
                .Item(3).ColorIndex = wdDarkBlue
                .Item(4).ColorIndex = wdDarkBlue
            End With
        End With
        
        'Date/VolIssue
        .Styles(strSTYLE_ISSUE_VOL_DATE_PROF).Shading.BackgroundPatternColorIndex = wdDarkBlue
        'Date/VolIssue Border
        .Styles(strSTYLE_ISSUE_VOL_DATE_PROF).Borders(1).ColorIndex = wdDarkBlue
              
        'PullQuote Text & Borders
        .Styles(strSTYLE_PULLQUOTE_PROF).Font.ColorIndex = wdDarkYellow
        .Styles(strSTYLE_PULLQUOTE_PROF).Borders.Item(1).ColorIndex = wdDarkYellow
        .Styles(strSTYLE_PULLQUOTE_PROF).Borders.Item(3).ColorIndex = wdDarkYellow
      
        'TOC
        .Styles(strSTYLE_TOC_HEADING_PROF).Borders.Item(1).ColorIndex = wdDarkBlue
      
        'Calendar & Sidebar Text
        .Styles(strSTYLE_SIDEBAR_TITLE_PROF).Font.ColorIndex = wdDarkBlue
        .Styles(strSTYLE_SIDEBAR_HEAD_PROF).Font.ColorIndex = wdDarkBlue
        .Styles(strSTYLE_SIDEBAR_SUBHEAD_PROF).Font.ColorIndex = wdDarkBlue
        .Styles(strSTYLE_SIDEBAR_TEXT_PROF).Font.ColorIndex = wdDarkBlue
        
        'MailingLabel if necessary
        If formWizard.optMailYes Then
            With .Tables(2)
          'Color Mailing Label Text
                .Cell(1, 1).Range.Font.ColorIndex = wdDarkBlue
                .Cell(1, 3).Range.Font.ColorIndex = wdDarkBlue
                .Cell(3, 1).Range.Font.ColorIndex = wdDarkBlue
                .Cell(3, 2).Range.Font.ColorIndex = wdDarkBlue
          'Color Mailing Label Postage Borders
                With .Cell(1, 3)
                    .Borders(1).ColorIndex = wdDarkBlue
                    .Borders(2).ColorIndex = wdDarkBlue
                    .Borders(3).ColorIndex = wdDarkBlue
                    .Borders(4).ColorIndex = wdDarkBlue
                End With
            End With
        Else
          'Color ML Replacement Story textboxes
          .Shapes(13).Fill.ForeColor = 52428
          .Shapes(14).Fill.ForeColor = 52428
        End If
        
        'Picture 1
        .Shapes(2).TextFrame.ContainingRange.InlineShapes(1).PictureFormat.ColorType = msoPictureAutomatic
        'Picture 2
        .Shapes(7).TextFrame.ContainingRange.InlineShapes(2).PictureFormat.ColorType = msoPictureAutomatic
        
        'Footer Title
        .Styles(strSTYLE_FOOTER_PROF).Font.ColorIndex = wdDarkBlue
        'Footer Title Border
        .Styles(strSTYLE_FOOTER_PROF).Borders.Item(1).ColorIndex = wdDarkBlue
      
        'Textbox borders
        .Shapes(1).Line.ForeColor = 8388608
        .Shapes(2).Line.ForeColor = 8388608
        
        'Page Borders
        With .Sections(1)
            .Borders(1).ColorIndex = wdDarkBlue
            .Borders(2).ColorIndex = wdDarkBlue
            .Borders(3).ColorIndex = wdDarkBlue
            .Borders(4).ColorIndex = wdDarkBlue
        End With
        With .Sections(2)
            .Borders(1).ColorIndex = wdDarkBlue
            .Borders(2).ColorIndex = wdDarkBlue
            .Borders(3).ColorIndex = wdDarkBlue
            .Borders(4).ColorIndex = wdDarkBlue
        End With
    End Select
  End With
      
FApplyColor_Exit:
  Exit Sub
  
FApplyColor_Error:
  Err.Clear
  Resume FApplyColor_Exit

End Sub
'regenerate the Table of Contents by looking for the heading style
Private Sub RegenerateTOC()

  Dim objBln              As Balloon
  Dim iCount              As Integer
  Dim i                   As Integer
  Dim j                   As Integer
  Dim iRowStart           As Integer
  Dim iRowMax             As Integer
  Dim iTableNumber        As Integer
  Dim strSearchStyle      As String
  Dim strSwap1            As String
  Dim strSwap2            As String
    
On Error GoTo RegenerateTOC_Error

  'Initialization
  System.Cursor = wdCursorWait
  Application.ScreenUpdating = False
  
  'Store Table in Clipboard for recovery
  ActiveDocument.Tables(1).Select
  Selection.Copy
  
  Select Case iNewsletterStyle
    Case wzCONTEMPORARY
      iTableNumber = 1
      iRowStart = 5
      iRowMax = 10
      strSearchStyle = strSTYLE_HEADING1_CONT
    Case wzELEGANT
      iTableNumber = 1
      iRowStart = 2
      iRowMax = 6
      strSearchStyle = strSTYLE_HEADING1_ELEG
    Case wzPROFESSIONAL
      iTableNumber = 1
      iRowStart = 2
      iRowMax = 5
      strSearchStyle = strSTYLE_HEADING1_PROF
  End Select

    iStyleCount = IFindStyles(iRowMax + 1, strSearchStyle)
    
    If iStyleCount = 0 Then
        DisplayErrorMsg strERR_HEADING_NOT_FOUND1 & strSearchStyle & strERR_HEADING_NOT_FOUND2
    Else
        'Sort array by page number
        For i = 0 To iStyleCount - 2
            For j = (i + 1) To (iStyleCount - 1)
                If rgstrTOC(i, 1) > rgstrTOC(j, 1) Then   'Swap
                    strSwap1 = rgstrTOC(i, 1)
                    strSwap2 = rgstrTOC(i, 2)
                    rgstrTOC(i, 1) = rgstrTOC(j, 1)
                    rgstrTOC(i, 2) = rgstrTOC(j, 2)
                    rgstrTOC(j, 1) = strSwap1
                    rgstrTOC(j, 2) = strSwap2
                End If
            Next
        Next
        
        ActiveDocument.Tables(iTableNumber).Cell(iRowStart, 1).Select
        For iCount = 0 To iRowMax - 1
            If iCount < iStyleCount Then
                Selection.Text = rgstrTOC(iCount, 1)
                Selection.MoveRight wdCell
                Selection.Text = rgstrTOC(iCount, 2)
            Else
                Selection.Text = ""
                Selection.MoveRight wdCell
                Selection.Text = ""
            End If
            
            If iCount < iRowMax - 1 Then Selection.MoveRight wdCell

        Next
    End If
  
RegenerateTOC_Exit:
    Selection.HomeKey wdStory
    'destroy the clipboard
    Selection.Text = " "
    Selection.Copy
    Selection.Text = ""
    Application.ScreenUpdating = True
    System.Cursor = wdCursorNormal
    Exit Sub
    
RegenerateTOC_Error:
    DisplayErrorMsg strERR_TOC_REGENERATION_FAILED
    RestoreTOC
    Resume RegenerateTOC_Exit
  
End Sub

Private Sub RestoreTOC()

    On Error GoTo RestoreTOC_Error
  
    With ActiveDocument.Tables(1)
        .Select
        .Delete
    End With

    Selection.Paste
    
    Exit Sub
  
RestoreTOC_Error:
    Err.Clear
  
End Sub


Private Function IFindStyles(iMaxItems As Integer, strStyleName As String) As Integer
    Dim st As Range
    Dim iStyleCount As Integer, Msg As String

    iStyleCount = 0

    On Error GoTo IFindStylesEnd
    
    For Each st In ActiveDocument.StoryRanges
        Select Case st.StoryType
            Case wdMainTextStory, wdTextFrameStory
                GoTo FindStyleinStory
            Case Else
                GoTo CheckNextStory
        End Select
FindStyleinStory:
        st.Select
        'Find first occurrence
        With Selection.Find
            .Style = strStyleName
            .Execute Forward:=True, Wrap:=wdFindStop, Format:=True
        End With
        
        'Continue if one occurrence is found
        Do While Selection.Find.Found
            'If found, print the page number and increment the style counter
            rgstrTOC(iStyleCount, 1) = Selection.Information(wdActiveEndPageNumber)
            rgstrTOC(iStyleCount, 2) = Left$(Selection.Text, Len(Selection.Text) - 1)
            Selection.MoveRight wdWord
            iStyleCount = iStyleCount + 1
            If iStyleCount = iMaxItems Then GoTo IFindStylesEnd
            Selection.Find.Execute
        Loop
        
        'Find next occurrence within substories such as text frames and headers
        Do While TypeName(st.NextStoryRange) = "Range"
            Set st = st.NextStoryRange
            st.Select
            Selection.Find.Execute
            
            Do While Selection.Find.Found
                rgstrTOC(iStyleCount, 1) = Selection.Information(wdActiveEndPageNumber)
                rgstrTOC(iStyleCount, 2) = Left$(Selection.Text, Len(Selection.Text) - 1)
                iStyleCount = iStyleCount + 1
                If iStyleCount = iMaxItems Then GoTo IFindStylesEnd
                Selection.MoveRight wdWord
                Selection.Find.Execute
            Loop
        Loop
CheckNextStory:
    Next

IFindStylesEnd:
    Err.Clear
    IFindStyles = iStyleCount

End Function
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Document_Close()
On Error GoTo Close_error
    If ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
    
Close_error:
    Err.Clear
End Sub
Private Sub Document_New()
    Common.StartWizard
End Sub

Attribute VB_Name = "formWizDlg"
Attribute VB_Base = "0{4E46671A-52D0-11D0-B5E8-00AA00BBB76C}{4E466707-52D0-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







' Newsletter Wizard Form
Option Explicit

Private Sub SelectTextBox(txtTextBox As Control)
  
  txtTextBox.SelStart = 0
  txtTextBox.SelLength = txtTextBox.TextLength
  txtTextBox.SetFocus

End Sub
Private Sub chkDate_Click()

  If fInitializingForm Then Exit Sub
  
  If chkDate.Value Then
    'Restore previous value
    txtDate.Text = strDate
    SelectTextBox txtDate
  Else
    'Save value and clear
    strDate = txtDate.Text
    txtDate.Text = ""
  End If
  
End Sub

Private Sub chkVolume_Click()
  
  If fInitializingForm Then Exit Sub
  
  If chkVolume.Value Then
    'Restore previous value
    txtVolume.Text = strVolume
    SelectTextBox txtVolume
  Else
    'Save value and clear
    strVolume = txtVolume.Text
    txtVolume.Text = ""
  End If
  
End Sub


' Flowchart Controls
Private Sub lblMap0_Click()
  JumpToPanel (0)
End Sub

Private Sub lblMap1_Click()
  JumpToPanel (1)
End Sub

Private Sub lblMap2_Click()
  JumpToPanel (2)
End Sub

Private Sub lblMap3_Click()
  JumpToPanel (3)
End Sub

Private Sub lblMap4_Click()
  JumpToPanel (4)
End Sub


Private Sub shpMap0_Click()
  JumpToPanel (0)
End Sub

Private Sub shpMap1_Click()
  JumpToPanel (1)
End Sub

Private Sub shpMap2_Click()
  JumpToPanel (2)
End Sub

Private Sub shpMap3_Click()
  JumpToPanel (3)
End Sub

Private Sub shpMap4_Click()
  JumpToPanel (4)
End Sub

' Navigator Controls
Private Sub tglAssistant_Click()
  If lAssistantId = 0 Then Exit Sub 'tglAssistant should be disabled. extra safety
  
  If fExitTglEvent Then
    fExitTglEvent = False
    Exit Sub
  End If
  
  If (iLocalState = msoWizardActInactive) Then
    'we want the button to be pressed only when user chooses
    'Help with this wizard option.
    If tglAssistant.Value Then
      fExitTglEvent = True
      tglAssistant.Value = False
    End If
    Assistant.ActivateWizard lAssistantId, msoWizardActActive
  ElseIf (iLocalState = msoWizardActActive) Then
    Assistant.ActivateWizard lAssistantId, msoWizardActInactive
  End If
  
End Sub

Private Sub cmdBack_Click()
    
  If iCurrentPanel <> wzPAGE_START Then JumpToPanel (iCurrentPanel - 1)
  
End Sub

Private Sub cmdNext_Click()
    
  If iCurrentPanel <> wzPAGE_FINISH Then JumpToPanel (iCurrentPanel + 1)
  
End Sub

Private Sub cmdCancel_Click()
  
  Err.Clear
  ReportError Err
  
End Sub

Private Sub cmdFinish_Click()
    Application.ScreenUpdating = False
    If fBalloonVisible Then
        objAssistantBalloon.Close
        'to prevent ReportError from closing Balloon again, set it to False
        fBalloonVisible = False
    End If
    
    If Not (fSettingsRestored) Then
        RestoreDialogValues (True)
        System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
        StoreValPref strREG_ASSISTANT_HELP, iLocalState
    Else
        If Not (fSettingsSaved) Then SaveDialogValues (True)
    End If
    CreateNewDoc (True)
    
    formWizard.Hide
    Unload formWizard
    Set formWizard = Nothing
  
    If lAssistantId Then
        Assistant.EndWizard lAssistantId, True
        InitCallBack (True)
    End If
   
End Sub


' Page 1
Private Sub optProfessional_Click()
  If iNewsletterStyle <> wzPROFESSIONAL Then
    iNewsletterStyle = wzPROFESSIONAL
    ApplyShadow
  End If

End Sub

Private Sub optContemporary_Click()
    If iNewsletterStyle <> wzCONTEMPORARY Then
        iNewsletterStyle = wzCONTEMPORARY
        ApplyShadow
    End If

End Sub

Private Sub optElegant_Click()
  If iNewsletterStyle <> wzELEGANT Then
    
    iNewsletterStyle = wzELEGANT
    ApplyShadow
  End If

End Sub

Private Sub imgProfessional_Click()
  
  iNewsletterStyle = wzPROFESSIONAL
  optProfessional.Value = True
  ApplyShadow
  optProfessional.SetFocus

End Sub

Private Sub imgContemporary_Click()
    
  iNewsletterStyle = wzCONTEMPORARY
  optContemporary.Value = True
  ApplyShadow
  optContemporary.SetFocus

End Sub

Private Sub imgElegant_Click()
  
  iNewsletterStyle = wzELEGANT
  optElegant.Value = True
  ApplyShadow
  optElegant.SetFocus

End Sub

Private Sub ApplyShadow()
    
  shpProfessionalShadow.Visible = optProfessional.Value
  shpContemporaryShadow.Visible = optContemporary.Value
  shpElegantShadow.Visible = optElegant.Value

End Sub



Private Sub JumpToPanel(iNewPanel As Integer)
    
  Dim objControls   As Object
  Dim lNewFormTop   As Long
  Dim lNewFormLeft  As Long
  
  ' Don't allow jump if CallBack mode, or if no change in Panel Number
  If iCurrentPanel = iNewPanel Or fWizardCallBack Then Exit Sub

  If FPageLostFocus Then
    Set objControls = formWizard.Controls
    ' Deselect current flow chart marker
    objControls(strSHP_MAP & iCurrentPanel).BackColor = COLOR_DARKGREY
    objControls(strLBL_MAP & iCurrentPanel).FONTBOLD = False
        
    ' Select new flow chart marker
    objControls(strSHP_MAP & iNewPanel).BackColor = COLOR_GREEN
    objControls(strLBL_MAP & iNewPanel).FONTBOLD = True
        
    ' Change to new active page
    iCurrentPanel = iNewPanel
    mpgWizardPage.Value = iCurrentPanel
    If fBalloonVisible Then
      lNewFormTop = formWizard.Top
      lNewFormLeft = formWizard.Left
      
      If (lNewFormTop <> lFormTop) Or (lNewFormLeft <> lFormLeft) Then
        lFormTop = lNewFormTop
        lFormLeft = lNewFormLeft
        objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
      End If
      objAssistantBalloon.Close
      objAssistantBalloon.Text = rgstrAssistantMsg(iNewPanel)
      objAssistantBalloon.Show
    End If
    
    PageSetFocus
  End If

End Sub

Private Function FPageLostFocus() As Boolean
  
  Select Case iCurrentPanel
    Case wzPAGE_START
      cmdBack.Enabled = True
      If Not (fSettingsRestored) Then RestoreDialogValues (True)
    Case wzPAGE_FINISH
      cmdNext.Enabled = True
      fSettingsSaved = False
  End Select

  FPageLostFocus = True

End Function

Private Sub PageSetFocus()
  
  Select Case iCurrentPanel
    Case wzPAGE_START
      cmdNext.SetFocus
      cmdBack.Enabled = False
    Case wzPAGE_STYLE
      Select Case iNewsletterStyle
        Case wzPROFESSIONAL
          optProfessional.SetFocus
        Case wzCONTEMPORARY
          optContemporary.SetFocus
        Case wzELEGANT
          optElegant.SetFocus
        Case Else
          iNewsletterStyle = wzPROFESSIONAL
          optProfessional.SetFocus
      End Select
    Case wzPAGE_TITLE
      SelectTextBox txtTitle
    Case wzPAGE_MAILING
      optMailYes.SetFocus
    Case wzPAGE_FINISH
      cmdFinish.SetFocus
      cmdNext.Enabled = False
      If Not (fSettingsSaved) Then SaveDialogValues (True)
  End Select

End Sub

Private Sub txtDate_Change()

  If txtDate.TextLength Then
    chkDate.Value = True
  End If
  
End Sub

Private Sub txtVolume_Change()

  If txtVolume.TextLength Then
    chkVolume.Value = True
  End If
  
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

  If (CloseMode = vbFormControlMenu) Then
    Err.Clear
    ReportError Err
  End If

End Sub


' InQuest injected base64 decoded content
' Szjej

INQUEST-PP=macro
