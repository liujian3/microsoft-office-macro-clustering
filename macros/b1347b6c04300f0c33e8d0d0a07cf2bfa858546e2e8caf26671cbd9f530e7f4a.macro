Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Header column labels
Dim HLABELFY        As String
Dim HLABELPFY       As String

'Term Strings
Dim gstrFY As String
Dim gstrPFY As String
Dim gstrSheetCalculation As String

'Objects/Variables declaration
Dim App As esl.Application
Dim goCompany As esl.COMPANY

Dim FY As String
Dim PFY As String
Dim Simulation As Integer

Public Sub OnRefreshInitialize(ByRef poCompany As Object)
    'Create instance
    Set App = New esl.Application
    gstrSheetCalculation = "Calculation"

    Set goCompany = New esl.COMPANY
    Debug.Assert Not poCompany Is Nothing
    Set goCompany = poCompany
End Sub

Public Sub OnRefreshBeforeReports()
    Worksheets(gstrSheetCalculation).Activate
    'Get data from the slic
    GetSlicData
    'Generating SQL query dynamically
    Call GenerateSQLQuery(gstrSheetCalculation)
    'Delete existing values
    Call DeleteCellValue(gstrSheetCalculation)
End Sub

Public Sub OnRefreshAfterReports()
    If Not IsEmpty(Worksheets(gstrSheetCalculation).Range("E2").Value) _
      Or Not IsEmpty(Worksheets(gstrSheetCalculation).Range("G2").Value) Then
        'Define layout
        Call FormatLayout
    End If
    'Worksheets(gstrSheetCalculation).Activate
    Sheet1.Activate
    Set App = Nothing
End Sub

Sub DeleteCellValue(sWorkSheet)

    Worksheets(sWorkSheet).Activate
    With Worksheets(sWorkSheet)
        'First line only clear content
        .Range("E2:P2").Select
        Selection.ClearContents
        'Other lines delete completely
        .Range("E3:P10000").Select
        Selection.Delete
        'Set focus back to cell
        .Range("E2").Select
    End With
End Sub

'Define report layout for Movement fixed assets
Sub FormatLayout()

    'Activate worksheet
    Worksheets(gstrSheetCalculation).Activate

    'Disable some stuff:
    With ActiveWindow
        .DisplayWorkbookTabs = True
        .DisplayGridlines = False
        .FreezePanes = False
        .DisplayZeros = True
        .Zoom = 100
    End With
    Application.DisplayFormulaBar = True
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    
    With Worksheets(gstrSheetCalculation)
        'Define column width:
        .Range("E:E").ColumnWidth = 5#
        .Range("F:F").ColumnWidth = 10#
        .Range("G:G").ColumnWidth = 5#
        .Range("H:H").ColumnWidth = 10#
        .Range("I:I").ColumnWidth = 5#
        .Range("J:J").ColumnWidth = 10#
        .Range("K:K").ColumnWidth = 5#
        .Range("L:L").ColumnWidth = 10#
        .Range("M:M").ColumnWidth = 5#
        .Range("N:N").ColumnWidth = 10#
        .Range("O:O").ColumnWidth = 5#
        .Range("P:P").ColumnWidth = 10#
        'Define data format:
        .Range("E2:P10000").NumberFormat = "#,##0"
    End With
    
    'Create the named ranges because the excel addin deleted them !
    Range("E2:F700").Select
    ActiveWorkbook.Names.Add Name:="RangeFY", RefersToR1C1:="=Calculation!R2C5:R700C6"
    Range("G2:H700").Select
    ActiveWorkbook.Names.Add Name:="RangePFY", RefersToR1C1:="=Calculation!R2C7:R700C8"
    Range("I2:J400").Select
    ActiveWorkbook.Names.Add Name:="RangeFY2", RefersToR1C1:="=Calculation!R2C9:R400C10"
    Range("K2:L400").Select
    ActiveWorkbook.Names.Add Name:="RangePFY2", RefersToR1C1:="=Calculation!R2C11:R400C12"
    Range("M2:N5").Select
    ActiveWorkbook.Names.Add Name:="RangeFY4", RefersToR1C1:="=Calculation!R2C13:R5C14"
    Range("O2:P5").Select
    ActiveWorkbook.Names.Add Name:="RangePFY4", RefersToR1C1:="=Calculation!R2C15:R5C16"
    
End Sub

Sub GetSlicData()
    With ThisWorkbook
        FY = .Names("FY").RefersToRange.Value
        PFY = CStr(CInt(FY) - 1)
        Simulation = .Names("Simulation").RefersToRange.Value
    End With
End Sub

Private Property Get SqlDateFrom(ByVal pdDate) As String
  SqlDateFrom = Replace("{d '[Date]'}", "[Date]", Format(pdDate, "YYYY-MM-DD"))
End Property

Private Property Get SqlDateTo(ByVal pdDate) As String
  SqlDateTo = Replace("{ts '[Date] 23:59:59'}", "[Date]", Format(pdDate, "YYYY-MM-DD"))
End Property

Private Property Get SqlGLBalance(ByVal psStatement As String) As String
  Dim lsSql As String
  Dim loEdlConnection As EDL.EdlConnection: Set loEdlConnection = goCompany
  Dim loDatabaseSettings As esl.ISettings: Set loDatabaseSettings = goCompany
  Dim ldDateFrom As Date
  Dim ldDateTo As Date
  Dim lsCriteria As String
  Dim lsGLBalanceProfit As String
  Dim lsGLBalanceLoss As String
  Dim lsGLResultProfit As String
  Dim lsGLResultLoss As String
  
  If ThisWorkbook.Names("ClosingEntry").RefersToRange.Value = -1 Then
    ' ClosingEntry Yes
  
    lsSql = lsSql & "SELECT "
    lsSql = lsSql & "T.reknr,  "
    lsSql = lsSql & "SUM(CASE WHEN grtbk.debcrd = 'C' THEN -T.bdr_hfl ELSE T.bdr_hfl END) AS bdr_hfl "
    lsSql = lsSql & "FROM ( "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  gbkmut.reknr,  "
    lsSql = lsSql & "  gbkmut.bdr_hfl AS bdr_hfl "
    lsSql = lsSql & "  FROM gbkmut "
    lsSql = lsSql & "  INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr  "
    lsSql = lsSql & "  WHERE gbkmut.transtype IN ('N', 'C', 'P') "
    lsSql = lsSql & "  AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "  AND gbkmut.docdate BETWEEN @DateFrom AND @DateTo "
    lsSql = lsSql & "  /* After Entry Criteria */ "
    lsSql = lsSql & "  UNION ALL "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  CASE  "
    lsSql = lsSql & "    WHEN grtbk.omzrek IN ('K', 'J') AND C.docdate < @DateFrom THEN  "
    lsSql = lsSql & "      CASE WHEN C.bdr_hfl < 0 THEN @GLBalanceProfit ELSE @GLBalanceLoss END "
    lsSql = lsSql & "    ELSE C.reknr "
    lsSql = lsSql & "  END AS reknr,  "
    lsSql = lsSql & "  SUM(C.bdr_hfl) AS bdr_hfl  "
    lsSql = lsSql & "  FROM ( "
    lsSql = lsSql & "    SELECT "
    lsSql = lsSql & "    CASE  "
    lsSql = lsSql & "      WHEN grtbk.omzrek IN ('K', 'J') THEN @GLResultProfit "
    lsSql = lsSql & "      ELSE gbkmut.reknr "
    lsSql = lsSql & "    END AS reknr,  "
    lsSql = lsSql & "    MAX(perdat.eddatum) AS docdate,  "
    lsSql = lsSql & "    SUM(gbkmut.bdr_hfl) AS bdr_hfl "
    lsSql = lsSql & "    FROM gbkmut "
    lsSql = lsSql & "    INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr "
    lsSql = lsSql & "    INNER JOIN ( "
    lsSql = lsSql & "      SELECT bkjrcode, MIN(bgdatum) AS bgdatum, MAX(eddatum) AS eddatum "
    lsSql = lsSql & "      FROM perdat "
    lsSql = lsSql & "      GROUP BY bkjrcode "
    lsSql = lsSql & "    ) perdat ON gbkmut.docdate BETWEEN perdat.bgdatum AND perdat.eddatum "
    lsSql = lsSql & "    WHERE gbkmut.transtype IN ('N', 'C', 'P') "
    lsSql = lsSql & "    AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "    AND gbkmut.docdate < @DateFrom "
    lsSql = lsSql & "    /* After Entry Criteria */ "
    lsSql = lsSql & "    GROUP BY  "
    lsSql = lsSql & "    CASE  "
    lsSql = lsSql & "      WHEN grtbk.omzrek IN ('K', 'J') THEN @GLResultProfit "
    lsSql = lsSql & "      ELSE gbkmut.reknr "
    lsSql = lsSql & "    END  "
    lsSql = lsSql & "  ) C "
    lsSql = lsSql & "  INNER JOIN grtbk ON grtbk.reknr = C.reknr "
    lsSql = lsSql & "  GROUP BY "
    lsSql = lsSql & "  CASE  "
    lsSql = lsSql & "    WHEN grtbk.omzrek IN ('K', 'J') AND C.docdate < @DateFrom THEN  "
    lsSql = lsSql & "      CASE WHEN C.bdr_hfl < 0 THEN @GLBalanceProfit ELSE @GLBalanceLoss END "
    lsSql = lsSql & "    ELSE C.reknr "
    lsSql = lsSql & "  END  "
    lsSql = lsSql & "  UNION ALL "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  CASE WHEN B.bdr_hfl < 0 THEN @GLBalanceProfit ELSE @GLBalanceLoss END AS reknr, "
    lsSql = lsSql & "  B.bdr_hfl "
    lsSql = lsSql & "  FROM ( "
    lsSql = lsSql & "    SELECT  "
    lsSql = lsSql & "    SUM(gbkmut.bdr_hfl) AS bdr_hfl "
    lsSql = lsSql & "    FROM gbkmut "
    lsSql = lsSql & "    INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr AND grtbk.omzrek IN ('K', 'J') "
    lsSql = lsSql & "    WHERE gbkmut.transtype IN ('N', 'C', 'P')  "
    lsSql = lsSql & "    AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "    AND gbkmut.docdate BETWEEN @DateFrom AND @DateTo "
    lsSql = lsSql & "    /* After Entry Criteria */ "
    lsSql = lsSql & "  ) B "
    lsSql = lsSql & "  UNION ALL "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  CASE WHEN PL.bdr_hfl > 0 THEN @GLResultLoss ELSE @GLResultProfit END AS reknr,  "
    lsSql = lsSql & "  -PL.bdr_hfl "
    lsSql = lsSql & "  FROM ( "
    lsSql = lsSql & "    SELECT SUM(gbkmut.bdr_hfl) AS bdr_hfl "
    lsSql = lsSql & "    FROM gbkmut "
    lsSql = lsSql & "    INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr AND grtbk.omzrek IN ('K', 'J') "
    lsSql = lsSql & "    WHERE gbkmut.transtype IN ('N', 'C', 'P')  "
    lsSql = lsSql & "    AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "    AND gbkmut.docdate BETWEEN @DateFrom AND @DateTo "
    lsSql = lsSql & "    /* After Entry Criteria */ "
    lsSql = lsSql & "  ) PL "
    lsSql = lsSql & ") T "
    lsSql = lsSql & "INNER JOIN grtbk ON grtbk.reknr = T.reknr  "
    lsSql = lsSql & "GROUP BY T.reknr "
  
    lsGLBalanceProfit = loEdlConnection.LitString(ThisWorkbook.Names("GLBalanceProfit").RefersToRange.Value)
    lsGLBalanceLoss = loEdlConnection.LitString(ThisWorkbook.Names("GLBalanceLoss").RefersToRange.Value)
    lsGLResultProfit = loEdlConnection.LitString(ThisWorkbook.Names("GLResultProfit").RefersToRange.Value)
    lsGLResultLoss = loEdlConnection.LitString(ThisWorkbook.Names("GLResultLoss").RefersToRange.Value)
    
    lsSql = Replace(lsSql, "@GLBalanceProfit", lsGLBalanceProfit)
    lsSql = Replace(lsSql, "@GLBalanceLoss", lsGLBalanceLoss)
    lsSql = Replace(lsSql, "@GLResultProfit", lsGLResultProfit)
    lsSql = Replace(lsSql, "@GLResultLoss", lsGLResultLoss)
    
  Else
  
    lsSql = lsSql & "SELECT "
    lsSql = lsSql & "T.reknr,  "
    lsSql = lsSql & "SUM(CASE WHEN grtbk.debcrd = 'C' THEN -T.bdr_hfl ELSE T.bdr_hfl END) AS bdr_hfl "
    lsSql = lsSql & "FROM ( "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  gbkmut.reknr,  "
    lsSql = lsSql & "  gbkmut.bdr_hfl AS bdr_hfl "
    lsSql = lsSql & "  FROM gbkmut "
    lsSql = lsSql & "  INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr  "
    lsSql = lsSql & "  WHERE gbkmut.transtype IN ('N', 'C', 'P') "
    lsSql = lsSql & "  AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "  AND gbkmut.docdate BETWEEN @DateFrom AND @DateTo "
    lsSql = lsSql & "  /* After Entry Criteria */ "
    lsSql = lsSql & "  UNION ALL "
    lsSql = lsSql & "  SELECT "
    lsSql = lsSql & "  C.reknr,  "
    lsSql = lsSql & "  C.bdr_hfl  "
    lsSql = lsSql & "  FROM ( "
    lsSql = lsSql & "    SELECT "
    lsSql = lsSql & "    gbkmut.reknr,  "
    lsSql = lsSql & "    MAX(perdat.eddatum) AS docdate,  "
    lsSql = lsSql & "    SUM(gbkmut.bdr_hfl) AS bdr_hfl "
    lsSql = lsSql & "    FROM gbkmut "
    lsSql = lsSql & "    INNER JOIN grtbk ON grtbk.reknr = gbkmut.reknr "
    lsSql = lsSql & "    INNER JOIN ( "
    lsSql = lsSql & "      SELECT bkjrcode, MIN(bgdatum) AS bgdatum, MAX(eddatum) AS eddatum "
    lsSql = lsSql & "      FROM perdat "
    lsSql = lsSql & "      GROUP BY bkjrcode "
    lsSql = lsSql & "    ) perdat ON gbkmut.docdate BETWEEN perdat.bgdatum AND perdat.eddatum "
    lsSql = lsSql & "    WHERE gbkmut.transtype IN ('N', 'C', 'P') "
    lsSql = lsSql & "    AND gbkmut.transsubtype <> 'X' "
    lsSql = lsSql & "    AND gbkmut.docdate < @DateFrom "
    lsSql = lsSql & "    AND grtbk.omzrek NOT IN ('K', 'J')  "
    lsSql = lsSql & "    /* After Entry Criteria */ "
    lsSql = lsSql & "    GROUP BY gbkmut.reknr "
    lsSql = lsSql & "  ) C "
    lsSql = lsSql & "  INNER JOIN grtbk ON grtbk.reknr = C.reknr "
    lsSql = lsSql & ") T "
    lsSql = lsSql & "INNER JOIN grtbk ON grtbk.reknr = T.reknr  "
    lsSql = lsSql & "GROUP BY T.reknr "
  
  End If
  
  Select Case psStatement
  Case "SQL_statement_FY", "SQL_statement_FY_2", "SQL_statement_FY_4"
    ldDateFrom = loEdlConnection.Query("SELECT MIN(bgdatum) FROM perdat WHERE bkjrcode = ?", Array(FY))
    ldDateTo = loEdlConnection.Query("SELECT MAX(eddatum) FROM perdat WHERE bkjrcode = ?", Array(FY))
  Case "SQL_statement_PFY", "SQL_statement_PFY_2", "SQL_statement_PFY_4"
    ldDateFrom = loEdlConnection.Query("SELECT MIN(bgdatum) FROM perdat WHERE bkjrcode = ?", Array(PFY))
    ldDateTo = loEdlConnection.Query("SELECT MAX(eddatum) FROM perdat WHERE bkjrcode = ?", Array(PFY))
  Case Else
  End Select
  
  lsSql = Replace(lsSql, "@DateFrom", SqlDateFrom(ldDateFrom))
  lsSql = Replace(lsSql, "@DateTo", SqlDateTo(ldDateTo))
  
  lsCriteria = "/* After Entry Criteria */"
  If Simulation <> -1 Then
    lsCriteria = lsCriteria & " AND gbkmut.verwerknrl <> 0 "
  End If
  lsSql = Replace(lsSql, "/* After Entry Criteria */", lsCriteria)
  
  SqlGLBalance = lsSql
End Property


Private Property Get SqlStatement(ByVal psStatement As String) As String
  Dim lsSql As String
  Select Case psStatement
  Case "SQL_statement_FY", "SQL_statement_PFY"
    lsSql = lsSql & "SELECT "
    lsSql = lsSql & "LEFT(LTRIM(B.reknr), 3) AS Code,  "
    lsSql = lsSql & "CAST(ROUND(SUM(B.bdr_hfl), 0) AS INT) AS Totaalbedrag "
    lsSql = lsSql & "FROM ( "
    lsSql = lsSql & "[SQL_GLBalance]  "
    lsSql = lsSql & ") B "
    lsSql = lsSql & "GROUP BY LEFT(LTRIM(B.reknr), 3) "
    lsSql = lsSql & "ORDER BY 1 "
  
  Case "SQL_statement_FY_2", "SQL_statement_PFY_2"
    lsSql = lsSql & "SELECT "
    lsSql = lsSql & "LEFT(LTRIM(B.reknr), 2) AS Code,  "
    lsSql = lsSql & "CAST(ROUND(SUM(B.bdr_hfl), 0) AS INT) AS Totaalbedrag "
    lsSql = lsSql & "FROM ( "
    lsSql = lsSql & "[SQL_GLBalance]  "
    lsSql = lsSql & ") B "
    lsSql = lsSql & "GROUP BY LEFT(LTRIM(B.reknr), 2) "
    lsSql = lsSql & "ORDER BY 1 "
  
  Case "SQL_statement_FY_4", "SQL_statement_PFY_4"
    lsSql = lsSql & "SELECT "
    lsSql = lsSql & "LEFT(LTRIM(B.reknr), 4) AS Code,  "
    lsSql = lsSql & "CAST(ROUND(SUM(B.bdr_hfl), 0) AS INT) AS Totaalbedrag "
    lsSql = lsSql & "FROM ( "
    lsSql = lsSql & "[SQL_GLBalance]  "
    lsSql = lsSql & ") B "
    lsSql = lsSql & "GROUP BY LEFT(LTRIM(B.reknr), 4) "
    lsSql = lsSql & "HAVING LEFT(LTRIM(B.reknr), 4) IN ('1310', '1311', '1750', '1751', '6920', '6921') "
    lsSql = lsSql & "ORDER BY 1 "
  
  Case Else
  End Select
  
  lsSql = Replace(lsSql, "[SQL_GLBalance]", SqlGLBalance(psStatement))
  
  SqlStatement = lsSql
End Property

Sub GenerateSQLQuery(sWorkSheet As String)
  Dim loEdlConnection As EDL.EdlConnection: Set loEdlConnection = goCompany
  Dim loEdlQuery As EDL.EdlQuery
  
  ThisWorkbook.Names("SQL_statement_FY").RefersToRange.Value = ""
  ThisWorkbook.Names("SQL_statement_PFY").RefersToRange.Value = ""
  ThisWorkbook.Names("SQL_statement_FY_2").RefersToRange.Value = ""
  ThisWorkbook.Names("SQL_statement_PFY_2").RefersToRange.Value = ""
  ThisWorkbook.Names("SQL_statement_FY_4").RefersToRange.Value = ""
  ThisWorkbook.Names("SQL_statement_PFY_4").RefersToRange.Value = ""
  
  Set loEdlQuery = loEdlConnection.OpenParamQuery("SELECT * FROM perdat WHERE bkjrcode = ?", "bkjrcode", edlClientSnapshot, edlReadOnly, 0)
  If Not loEdlQuery Is Nothing Then
    loEdlQuery.Requery1 FY
    If Not loEdlQuery.EOF Then
      ThisWorkbook.Names("SQL_statement_FY").RefersToRange.Value = SqlStatement("SQL_statement_FY")
      ThisWorkbook.Names("SQL_statement_FY_2").RefersToRange.Value = SqlStatement("SQL_statement_FY_2")
      ThisWorkbook.Names("SQL_statement_FY_4").RefersToRange.Value = SqlStatement("SQL_statement_FY_4")
    End If
    loEdlQuery.Requery1 PFY
    If Not loEdlQuery.EOF Then
      ThisWorkbook.Names("SQL_statement_PFY").RefersToRange.Value = SqlStatement("SQL_statement_PFY")
      ThisWorkbook.Names("SQL_statement_PFY_2").RefersToRange.Value = SqlStatement("SQL_statement_PFY_2")
      ThisWorkbook.Names("SQL_statement_PFY_4").RefersToRange.Value = SqlStatement("SQL_statement_PFY_4")
    End If
  End If
  Exit Sub
Failed:
    App.Message 0, App.Term.String(0, "Error occurred while creating SQL query!"), App.Term.String(32457, "Asset year end totals"), edlgInfo
End Sub


' InQuest injected base64 decoded content
' :t^~

INQUEST-PP=macro
