Attribute VB_Name = "Abfragen"
Attribute VB_Base = "0{B8A7E52B-C600-4CC0-9B8E-FD64F9E98274}{3E55DC38-C468-41B4-ACC2-522F6E007494}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private Sub Abbrechen_Click()
    Unload Me
    End
End Sub

Private Sub Label1_Click()

End Sub

Private Sub Label3_Click()

End Sub

Private Sub Label4_Click()

End Sub

Private Sub Label5_Click()

End Sub

Private Sub Namevar_Change()
    OK.Enabled = False
    
    If Val(Zahldim.Value) > 0 And Val(Zahldim.Value) < 9 Then
        NamevarOK = True
        If Len(Namevar.Value) < 1 Or Len(Namevar.Value) > 30 Then
            NamevarOK = False
        Else
            For I = 1 To Len(Namevar.Value)
                a = Mid(Namevar.Value, I, 1)
                If Asc(a) < 65 Or Asc(a) > 122 And Asc(a) <> 196 And Asc(a) <> 228 And Asc(a) <> 214 And Asc(a) <> 246 And Asc(a) <> 220 And Asc(a) <> 252 Then NamevarOK = False
                If (Asc(a) > 90 And Asc(a) < 94) Or Asc(a) = 96 Then NamevarOK = False
            Next I
        End If
        If NamevarOK Then OK.Enabled = True
    End If
    
    
    
End Sub

Private Sub OK_Click()
    Vname = Namevar.Value
    Vzahl = Zahldim.Value
    Unload Me
End Sub


Private Sub Zahldim_Change()
    OK.Enabled = False
    If Val(Zahldim.Value) < 1 Or Val(Zahldim.Value) > 8 Then ZahldimOK = False Else ZahldimOK = True
    If Len(Namevar.Value) > 0 And InStr(Namevar.Value, " ") + InStr(Namevar.Value, ".") = 0 And ZahldimOK Then OK.Enabled = True
End Sub
Private Sub UserForm_Initialize()
    OK.Enabled = False
End Sub
Attribute VB_Name = "Makroerstellen"
'MIA - Makrosammlung f|fffd|r die qualitative Inhaltsanalyse
'Copyright (C) 2000 Jochen Gl|fffd|ser and Grit Laudel

' This program is free software; you can redistribute it and/or modify it
' under the terms of the GNU General Public License as published by the
' Free Software Foundation; either version 2 of the License, or (at your option)
' any later version.

' This program is distributed in the hope that it will be useful, but
' WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
' or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

' You should have received a copy of the GNU General Public License along
' with this program; if not, write to the Free Software Foundation, Inc.,
' 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

' Contact:
' Jochen Gl|fffd|ser
' Zentrum Technik und Gesellschaft
' Sekretariat ER2-2
' Technische Universit|fffd|t Berlin
' Hardenbergstr. 36A
' D-10623 Berlin
' Germany
' Email: Jochen.Glaser@ztg.tu-berlin.de
' Version 20.June 2011


Public Vname As String
Public Vzahl As String
Public FCI(1 To 10)
Public FCO(1 To 7)
Public R(1 To 8)
Public Zielverzeichnis As String
Public CTT As String
Public Mprojekt, Startprojekt


Sub Makroerstellen()
'
' Makroerstellen Makro
' Makro erstellt am 06.01.00 von AG WT
'
Dim k As String
Set Startprojekt = Application.VBE.VBProjects("Makro_Erstellen")
Set Mprojekt = Application.VBE.VBProjects("MIA")
Application.ScreenUpdating = False

MsgBox ("MIA Version 1, Copyright (C) 2000...2011 Jochen Gl|fffd|ser and Grit Laudel. MIA comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions; for details, see the GNU public license in the accompanying documentation or http://www.gnu.org/copyleft/gpl.html#SEC1.")
        
        'Prueft, ob neben der Start07d.docm andere Dateien geoeffnet sind

For I = 1 To Documents.Count
    If Documents(I).Name <> "Start07d.docm" Then
        MsgBox ("Bitte schlie|fffd|en Sie alle Word-Dateien au|fffd|er der Start07d.docm, bevor Sie ein Makro konstruieren.")
        End
    End If
Next I
        
        'Ermittelt den Pfad, in dem die Dateien stehen und macht ihn zum aktuellen Verzeichnis

Zielverzeichnis = ActiveDocument.Path + "\"
ChangeFileOpenDirectory Zielverzeichnis
        
        'Holt Informationen ueber Kategoriennamen und -dimensionen ein
Makro_Erstellen.Abfragen.Show
        
        'Prueft Namenskonflikte
If Makro_Erstellen.Makroerstellen.InM(Vname) Then
        
        ' Entfernt das alte Makro samt Formular und Schaltfl|fffd|che und
        ' sichert eine eventuell vorhandene Wertedatei. Danach wird die
        ' Dokumentvorlage gespeichert, und die Datei Start07d.docm wird
        ' geschlossen und wieder ge|fffd|ffnet.
        
        k = Replace(Replace(Replace(Replace(Str(Now), ":", "_"), "/", "_"), ".", "_"), " ", "_")
        If MsgBox("Es ist ein Konflikt mit dem von Ihnen gew|fffd|hlten Namen '" + Vname + "' aufgetreten, weil bereits ein Makro mit diesem Namen existiert." + Chr(13) + Chr(13) + "'Abbrechen' beendet die Makrokonstruktion, ohne da|fffd| eine Ver|fffd|nderung vorgenommen wird." + Chr(13) + Chr(13) + "Wenn Sie 'OK' w|fffd|hlen, wird das alte Makro entfernt. Wenn bereits eine Datei 'Ex" + Vname + ".docx' existiert, dann wird diese unter dem Namen 'Ex" + Vname + k + ".docx' gespeichert." + Chr(13) + "Anschlie|fffd|end wird das Programm beendet. Sie k|fffd|nnen die Makrokonstruktion dann erneut starten.", vbOKCancel + vbExclamation) = vbOK Then
            Mprojekt.VBComponents.Remove Mprojekt.VBComponents(Vname)
            If Makro_Erstellen.Makroerstellen.InM("FF" + Vname) Then Mprojekt.VBComponents.Remove Mprojekt.VBComponents("FF" + Vname)
            CustomizationContext = Documents("Start07d.docm").AttachedTemplate
            For I = 1 To CommandBars("Extraktionsmakros").Controls.Count
                If UCase(CommandBars("Extraktionsmakros").Controls(I).OnAction) = UCase(Vname) Then
                    CommandBars("Extraktionsmakros").Controls(I).Delete
                    Exit For
                End If
            Next I
            Documents("Start07d.docm").AttachedTemplate.Save
            CustomizationContext = Documents("Start07d.docm")
            If Makro_Erstellen.Makroerstellen.Dateivorhanden(Zielverzeichnis, "Ex" + Vname + ".docx") Then
                Name Zielverzeichnis + "Ex" + Vname + ".docx" As Zielverzeichnis + "Ex" + Vname + k + ".docx"
            Else
                MsgBox ("Keine alte Datei Ex" + Vname + ".docx in " + Zielverzeichnis + " gefunden.")
            End If
            ActiveDocument.Save
            MsgBox "Das alte Makro wurde erfolgreich entfernt."
            End
        Else
            End
        End If
        
End If

'Pr|fffd|ft, ob die 'ExDefaults.docx' im Zielverzeichnis existiert, und warnt, wenn sie fehlt
If Not Makro_Erstellen.Makroerstellen.Dateivorhanden(Zielverzeichnis, "ExVorgaben.docx") Then
        For Each Mitglied In Mprojekt.VBComponents
            If Left(Mitglied.Name, 2) = "FF" Then
                Mitteilung1 = "Sie haben bereits Makros konstruiert, aber die Datei 'ExVorgaben.docx' steht nicht in diesem Verzeichnis."
                Mitteilung2 = "Wenn das beabsichtigt ist (wenn die alten Makros nicht mit Vorgaben arbeiten), klicken Sie bitte OK, um die Makrokonstruktion fortzusetzen. Es wird eine neue Datei 'ExVorgaben.docx' aufgebaut."
                Mitteilung3 = "Falls Sie versehentlich die 'Exvorgaben.docx' in ein anderes Verzeichnis verlagert haben, klicken Sie bitte Abbrechen, um die Makrokonstruktion zu beenden. Kopieren oder Verschieben Sie die 'ExVorgaben.docx' in das Verzeichnis f|fffd|r die Makrokonstruktion, und beginnen Sie von vorn." + Chr(13) + Zielverzeichnis + Chr(13) + "and begin again."
                If MsgBox(Mitteilung1 + Chr(13) + Chr(13) + Mitteilung2 + Chr(13) + Chr(13) + Mitteilung3, vbOKCancel + vbExclamation) = vbCancel Then End
                Exit For
            End If
        Next Mitglied
End If
         Makro_Erstellen.Makrostruktur.Show

Application.ScreenUpdating = True
Documents("Start07d.docm").Activate
End Sub
Sub ModulCodeschreiben(Modname, Dimzahl)
' Schreibt den Code f|fffd|r das Extraktionsmodul in das Modul 'Modname'

    With Mprojekt.VBComponents(Modname)
        .CodeModule.InsertLines 1, "Public DDNamen(1 To 8) As String"
        .CodeModule.InsertLines 2, "Public L|fffd|nge(1 To 8) As Integer"
        .CodeModule.InsertLines 3, "Public Anzahl As Integer"
        .CodeModule.InsertLines 16, "Sub " + Vname + " ()"
        .CodeModule.InsertLines 19, "Anzahl = " + Dimzahl
        .CodeModule.InsertLines 20, "If ActiveDocument.Path <> ActiveDocument.AttachedTemplate.Path Then Call MIA.Extrahieren.Pfadkontrolle"
        .CodeModule.InsertLines 23, "Extrahieren.InterviewName = ActiveDocument.Name"
        .CodeModule.InsertLines 25, "Call Extrahieren.DateienAktivieren(" + Chr(34) + "Ex" + Vname + ".docx" + Chr(34) + ", ActiveDocument.Path + " + Chr(34) + "\" + Chr(34) + ")"
        .CodeModule.InsertLines 26, "Documents(Extrahieren.Interviewname).Activate"
        .CodeModule.InsertLines 27, "FF" + Vname + ".Show"
        .CodeModule.InsertLines 28, "Documents(Extrahieren.Interviewname).Activate"
        .CodeModule.InsertLines 29, "Call Extrahieren.Textfinden (Left(Right(Extrahieren.Quelle, Len(Extrahieren.Quelle) - 1), Len(Extrahieren.Quelle) - 2))"
        .CodeModule.InsertLines 30, "Selection.Collapse Direction:=wdcollapse_End"
        .CodeModule.InsertLines 31, "Selection.MoveRight Unit:=wdCharacter, Count:=1"
        .CodeModule.InsertLines 32, "End Sub"
    End With
    
End Sub

Sub IBlock(Dnummer, Dname, E, H)
'Legt den Text f|fffd|r die Initialisierungsprozedur des Extraktionsformulars fest

If E Then
    FCI(1) = Vname + ".DDNamen(" + LTrim(Dnummer) + ")= " + Chr(34) + Dname + Chr(34)
    FCI(2) = "Frame" + LTrim(Dnummer) + ".Caption= " + Chr(34) + Dname + Chr(34)
    If H Then
        FCI(3) = "Z=Extrahieren.Vorgabenzahl(" + Vname + ".DDNamen(" + LTrim(Dnummer) + "))"
        FCI(4) = "If Z > 0 Then"
        FCI(5) = " Redim Extrahieren.T" + LTrim(Dnummer) + "(0 to Z)"
        FCI(6) = " Call Extrahieren.VorgabenEinlesen(" + Vname + ".DDNamen(" + LTrim(Dnummer) + "),Extrahieren.T" + LTrim(Dnummer) + "(), " + Vname + ".L|fffd|nge(" + LTrim(Dnummer) + "))"
        FCI(7) = " Dim" + LTrim(Dnummer) + ".ListRows=" + Vname + ".L|fffd|nge(" + LTrim(Dnummer) + ")+1"
        FCI(8) = " Dim" + LTrim(Dnummer) + ".ColumnCount=1"
        FCI(9) = " Dim" + LTrim(Dnummer) + ".List()=Extrahieren.T" + LTrim(Dnummer)
        FCI(10) = "End If"
    Else
        FCI(3) = "CheckBox" + LTrim(Dnummer) + ".Visible=False"
        For J = 4 To 10
            FCI(J) = "'"
        Next J
    End If
Else
    FCI(1) = "Dim" + LTrim(Dnummer) + ".Visible=False"
    FCI(2) = "Frame" + LTrim(Dnummer) + ".Visible=False"
    FCI(3) = "CheckBox" + LTrim(Dnummer) + ".Visible=False"
    For J = 4 To 10
        FCI(J) = "'"
    Next J
End If

End Sub
Sub OBlock(Dnummer, Dname, E, H)
' Legt den Text f|fffd|r die OK-Prozedur des Extraktionsformulars fest

If E Then
    FCO(1) = "If Len(Dim" + LTrim(Dnummer) + ".Value)>0 Then"
    FCO(2) = " Documents(" + Chr(34) + "Ex" + Vname + ".docx" + Chr(34) + ").Activate"
    FCO(3) = " Call Extrahieren.DatenHinzuf|fffd|gen(" + Vname + ".DDNamen(" + LTrim(Dnummer) + "), Dim" + LTrim(Dnummer) + ".Value)"
    FCO(4) = " If CheckBox" + LTrim(Dnummer) + ".Value Then"
    FCO(5) = "  If Extrahieren.Neu(Dim" + LTrim(Dnummer) + ".Value,Extrahieren.T" + LTrim(Dnummer) + "()," + Vname + ".L|fffd|nge(" + LTrim(Dnummer) + ")) Then Call Extrahieren.VorgabenHinzuf|fffd|gen(" + Vname + ".DDNamen(" + LTrim(Dnummer) + "),Dim" + LTrim(Dnummer) + ".Value)"
    FCO(6) = " End If"
    FCO(7) = "End If"
End If
End Sub
Sub Dateibeschaffen(zv, dn)
' |fffd|ffnet im Verzeichnis 'zv' die Datei 'DN'. Wenn es keine solche Datei gibt, dann
' wird eine neue Datei ge|fffd|ffnet und unter dem Namen 'DN' im Verzeichnis 'zv' gespeichert
    
    If Makro_Erstellen.Makroerstellen.Dateivorhanden(zv, dn) Then
        Documents.Open FileName:=zv + dn
                
    Else
        Documents.Add
        ActiveDocument.SaveAs FileName:=zv + dn, FileFormat:=wdFormatDocumentDefault
    End If
    
End Sub
Function Dateivorhanden(zv, dn)
    Dateivorhanden = False
    Dim SuchName As String
    SuchName = Dir(zv)
    While SuchName <> ""
        If SuchName = dn Then
            Dateivorhanden = True
            GoTo geschafft
        End If
        SuchName = Dir()
    Wend
geschafft:
End Function
Function InM(KN)
InM = False
For Each Mitglied In Mprojekt.VBComponents
    If UCase(Mitglied.Name) = UCase(KN) Then InM = True
Next Mitglied
End Function

Sub DrawTable()
'Draws table grid for the first Table in the selection
Selection.Tables(1).Rows.Add
With Selection.Tables(1)
    .Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
    .Borders(wdBorderRight).LineStyle = wdLineStyleSingle
    .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
    .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
    .Borders(wdBorderHorizontal).LineStyle = wdLineStyleSingle
    .Borders(wdBorderVertical).LineStyle = wdLineStyleSingle
End With
Selection.Tables(1).Rows(2).Delete
End Sub
Attribute VB_Name = "Makrostruktur"
Attribute VB_Base = "0{151A5424-A401-428D-BCF2-D89E0A874054}{6D9DCF65-E5E6-49B4-85BC-15DA849F0903}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public a

Private Sub Abbrechen_Click()
    Unload Me
End Sub

Private Sub ComboBox1_Change()
    If ComboBox1.Visible = True Then
        R(1) = Len(ComboBox1.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox2_Change()
    If ComboBox2.Visible = True Then
        R(2) = Len(ComboBox2.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox3_Change()
    If ComboBox3.Visible = True Then
        R(3) = Len(ComboBox3.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox4_Change()
    If ComboBox4.Visible = True Then
        R(4) = Len(ComboBox4.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox5_Change()
    If ComboBox5.Visible = True Then
        R(5) = Len(ComboBox5.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox6_Change()
    If ComboBox6.Visible = True Then
        R(6) = Len(ComboBox6.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox7_Change()
    If ComboBox7.Visible = True Then
        R(7) = Len(ComboBox7.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub ComboBox8_Change()
    If ComboBox8.Visible = True Then
        R(8) = Len(ComboBox8.Value)
        OK.Enabled = True
        For I = 1 To a
            If R(I) < 2 Then OK.Enabled = False
        Next I
    End If
End Sub

Private Sub OK_Click()
    Dim DDD(1 To 8)
    Dim HHH(1 To 8)
    Dim DDDVoll(1 To 8)
    Dim HHHVoll(1 To 8)
    Dimzahl = 0
    
    If Len(ComboBox1.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(1) = ComboBox1.Value
        HHH(1) = CheckBox1.Value
    End If
    If Len(ComboBox2.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(2) = ComboBox2.Value
        HHH(2) = CheckBox2.Value
    End If
    If Len(ComboBox3.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(3) = ComboBox3.Value
        HHH(3) = CheckBox3.Value
    End If
    If Len(ComboBox4.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(4) = ComboBox4.Value
        HHH(4) = CheckBox4.Value
    End If
    If Len(ComboBox5.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(5) = ComboBox5.Value
        HHH(5) = CheckBox5.Value
    End If
    If Len(ComboBox6.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(6) = ComboBox6.Value
        HHH(6) = CheckBox6.Value
    End If
    If Len(ComboBox7.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(7) = ComboBox7.Value
        HHH(7) = CheckBox7.Value
    End If
    If Len(ComboBox8.Value) > 1 Then
        Dimzahl = Dimzahl + 1
        DDD(8) = ComboBox8.Value
        HHH(8) = CheckBox8.Value
    End If
    
    If Len(TB1.Value) > 250 Then CTT = Left(TB1.Value, 250) Else CTT = TB1.Value
   
        ' F|fffd|gt das Modul f|fffd|r das Extraktionsmakro zu MIA hinzu und schreibt den Code
                
        Set NewModule = Mprojekt.VBComponents.Add(vbext_ct_StdModule)
        NewModule.Name = Vname
        Call Makro_Erstellen.Makroerstellen.ModulCodeschreiben(Vname, Vzahl)
        
        ' F|fffd|gt ein Dialogformular zu MIA hinzu
        
        Startprojekt.VBComponents("RohVorlage").export "FF" + Vname + ".frm"
        Documents.Open "FF" + Vname + ".frm", Format:=wdOpenFormatText
        With Selection.Find
            .ClearFormatting
            .Text = "RohVorlage"
            .MatchCase = True
            .Replacement.Text = "FF" + Vname
            .Execute Replace:=wdReplaceAll
        End With
        ActiveDocument.Save
        ActiveDocument.Close
        Mprojekt.VBComponents.import "FF" + Vname + ".frm"
        Kill Zielverzeichnis + "FF" + Vname + ".frm"
        Kill Zielverzeichnis + "FF" + Vname + ".frx"

    
    'Nun wird auf der Grundlage der abgeforderten Informationen das Dialogformular
    'fuer die Extraktion programmiert
    
    With Mprojekt.VBComponents("FF" + Vname)
        .CodeModule.InsertLines 118, "FF" + Vname + ".Caption=" + Chr(34) + Vname + Chr(34) + "+" + Chr(34) + "-" + Chr(34) + "+Extrahieren.Quelle"
        startzeile = 119
        For I = 1 To 8
            If Len(DDD(I)) > 1 Then Dimensionda = True Else Dimensionda = False
            Call Makro_Erstellen.Makroerstellen.IBlock(Str(I), DDD(I), Dimensionda, HHH(I))
                For J = 1 To 10
                    startzeile = startzeile + 1
                    .CodeModule.InsertLines startzeile, FCI(J)
                Next J
            startzeile = startzeile + 1
       Next I
       .CodeModule.InsertLines startzeile, "Documents(Extrahieren.Interviewname).Activate"
       startzeile = startzeile + 1
       .CodeModule.InsertLines startzeile, "End Sub"
       .CodeModule.InsertLines startzeile + 1, "Private Sub OK_Click()"
        startzeile = startzeile + 3
        For I = 1 To 8
            If Len(DDD(I)) > 1 Then Dimensionda = True Else Dimensionda = False
            Call Makro_Erstellen.Makroerstellen.OBlock(Str(I), DDD(I), Dimensionda, HHH(I))
                If Dimensionda Then
                    For J = 1 To 7
                        startzeile = startzeile + 1
                        .CodeModule.InsertLines startzeile, FCO(J)
                    Next J
                End If
        Next I
        startzeile = startzeile + 1
        .CodeModule.InsertLines startzeile, "Documents(" + Chr(34) + "Ex" + Vname + ".docx" + Chr(34) + ").Activate"
        .CodeModule.InsertLines startzeile + 1, "If Len(Selection.Tables(1).Columns(Selection.Tables(1).Columns.Count).Cells(Selection.Tables(1).Rows.Count).Range.Text)>4 Then Selection.Tables(1).Rows.Add"
        .CodeModule.InsertLines startzeile + 2, "ActiveDocument.Tables(1).Columns(ActiveDocument.Tables(1).Columns.Count).Cells(ActiveDocument.Tables(1).Rows.Count).Range.Text = Extrahieren.Quelle"
        .CodeModule.InsertLines startzeile + 3, "ActiveDocument.Save"
        .CodeModule.InsertLines startzeile + 4, "Unload Me"
        .CodeModule.InsertLines startzeile + 5, "Documents(Extrahieren.Interviewname).Activate"
        .CodeModule.InsertLines startzeile + 6, "Extrahieren.Textfinden (Left(Right(Extrahieren.Quelle, Len(Extrahieren.Quelle)-1),Len(Extrahieren.Quelle)-2))"
        .CodeModule.InsertLines startzeile + 7, "Selection.Collapse Direction:=wdcollapseEnd"
        .CodeModule.InsertLines startzeile + 8, "Selection.MoveRight Unit:=wdCharacter, Count:=1"
        .CodeModule.InsertLines startzeile + 10, "Selection.InsertAfter " + Chr(34) + "[" + Vname + "]" + Chr(34) 'fuegt zu Beginn jedes Absatzes die benutzte Kategorie ein,
        .CodeModule.InsertLines startzeile + 11, "End Sub"
End With

' Aufbau der Datei f|fffd|r die Extraktionsergebnisse

'Datei Anlegen bzw. |fffd|ffnen
Call Makro_Erstellen.Makroerstellen.Dateibeschaffen(Zielverzeichnis, "Ex" + Vname + ".docx")

'Auf Inhalt |fffd|berpr|fffd|fen und Inhalt auf Anfrage l|fffd|schen
If Len(ActiveDocument.Content.Text) > 10 Then
    If MsgBox("Die Datei " + "Ex" + Vname + ".docx" + " ist bereits vorhanden und enth|fffd|lt Text." + Chr(13) + Chr(13) + "'OK' l|fffd|scht den existierenden Inhalt des Dokuments und baut eine neue leere Tabelle auf." + Chr(13) + Chr(13) + "'Abbrechen' beendet die Makrokonstruktion und gibt Ihnen die M|fffd|glichkeit, die Datei zu |fffd|berpr|fffd|fen.", vbOKCancel + vbExclamation) = vbCancel Then
        Mprojekt.VBComponents.Remove Mprojekt.VBComponents(Vname)
        Mprojekt.VBComponents.Remove Mprojekt.VBComponents("FF" + Vname)
    End
    End If
End If
ActiveDocument.Content.Delete


'Grit: (Werte veraendert) Querformat und schmale Seitenr|fffd|nder festlegen
  With ActiveDocument.PageSetup
        .Orientation = wdOrientLandscape
        .TopMargin = CentimetersToPoints(1)
        .BottomMargin = CentimetersToPoints(1)
        .LeftMargin = CentimetersToPoints(1)
        .RightMargin = CentimetersToPoints(1)
        .HeaderDistance = CentimetersToPoints(0.6)
        .FooterDistance = CentimetersToPoints(0.6)
  End With

' Kategoriennamen in die Kopfzeile schreiben
With ActiveDocument.ActiveWindow.View
    If Application.VBE.Version = "5.00" Then .Type = wdPageView Else .Type = wdPrintView
    .SeekView = wdSeekCurrentPageHeader
End With
Selection.EndKey Unit:=wdStory, Extend:=wdExtend
Selection.TypeText Vname

'Seitenzahlen in die Fu|fffd|zeile rechts unten eintragen
ActiveDocument.ActiveWindow.View.SeekView = wdSeekCurrentPageFooter
Selection.EndKey Unit:=wdStory, Extend:=wdExtend
Selection.TypeText ""
Selection.HeaderFooter.PageNumbers.Add PageNumberAlignment:=wdAlignPageNumberRight

'Tabelle f|fffd|r die Extraktionsergebnisse einf|fffd|gen und die |fffd|berschriften eintragen
ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=1, NumColumns:=Dimzahl + 1
Selection.StartOf Unit:=wdRow, Extend:=wdMove
J = 1
For I = 1 To Dimzahl
    If Len(DDD(I)) > 0 Then
        DDDVoll(J) = DDD(I)
        HHHVoll(J) = HHH(I)
        J = J + 1
    End If
Next I
For I = 1 To Dimzahl
    Selection.TypeText Text:=DDDVoll(I)
    Selection.Cells(1).Next.Select
Next I
Selection.TypeText Text:="Quelle"

'Automatische Silbentrennung
    With ActiveDocument
        .AutoHyphenation = True
    End With
'Extraktionstabelle formatieren
Call Makroerstellen.DrawTable
'With Selection.Tables(1)
    'If .Style <> "Tabellengitternetz" Then .Style = "Tabellengitternetz"
'End With

With Selection.Tables(1)
        With .Borders(wdBorderLeft)
            .LineStyle = wdLineStyleSingle
        End With
        With .Borders(wdBorderRight)
            .LineStyle = wdLineStyleSingle
        End With
        With .Borders(wdBorderTop)
            .LineStyle = wdLineStyleSingle
        End With
        With .Borders(wdBorderBottom)
            .LineStyle = wdLineStyleSingle
        End With
        With .Borders(wdBorderHorizontal)
            .LineStyle = wdLineStyleSingle
        End With
        With .Borders(wdBorderVertical)
            .LineStyle = wdLineStyleSingle
        End With
End With



'Tabellenueberschrift wiederholen
    Selection.Tables(1).Rows.HeadingFormat = True

With Selection.Tables(1)
    'Schriftgroesse
        With Selection.Font
            .Size = 10
        End With
     'Zeilenabstand
        With Selection.ParagraphFormat
        .LeftIndent = CentimetersToPoints(0)
        .RightIndent = CentimetersToPoints(0)
        .SpaceBefore = 1
        .SpaceBeforeAuto = False
        .SpaceAfter = 1
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
       
    End With
        
    'Abstand Text zum Zellenrand
    .LeftPadding = CentimetersToPoints(0.1)
    .RightPadding = CentimetersToPoints(0.1)
           
    'kein Seitenumbruch in Tabellenzeile
        Selection.Rows.AllowBreakAcrossPages = False
End With

' mit M07d.dotm verbinden, sichern und schlie|fffd|en
ActiveDocument.AttachedTemplate = Zielverzeichnis + "M07d.dotm"
ActiveDocument.AttachedTemplate.Save
ActiveDocument.Save
ActiveDocument.Close

'Aufbau der Datei f|fffd|r die Vorgaben

Call Makro_Erstellen.Makroerstellen.Dateibeschaffen(Zielverzeichnis, "ExVorgaben.docx")
Selection.EndKey Unit:=wdStory, Extend:=wdMove
Selection.InsertParagraphAfter
For I = 1 To Dimzahl
    If HHHVoll(I) Then
        MIA.Extrahieren.Textfinden (DDDVoll(I))
        If Selection = DDDVoll(I) Then
                MsgBox ("Dimension '" + DDDVoll(I) + "' wird anscheinend bereits von einem anderen Makro genutzt." + Chr(13) + Chr(13) + "Alle Dimensionen mit diesem Namen werden auf dieselben Vorgaben zugreifen.")
        Else
                Selection.EndKey Unit:=wdStory, Extend:=wdMove
                ActiveDocument.Tables.Add(Selection.Range, 1, 1).Cell(1, 1).Range.InsertAfter DDDVoll(I)
                'If Selection.Tables(1).Style <> "Tabellengitternetz" Then Selection.Tables(1).Style = "Tabellengitternetz"
                Selection.EndKey Unit:=wdStory, Extend:=wdMove
                Selection.InsertParagraphAfter
        End If
    End If
Next I
ActiveDocument.AttachedTemplate = Zielverzeichnis + "M07d.dotm"
ActiveDocument.Save
ActiveDocument.Close

' Einf|fffd|gen einer Schaltfl|fffd|che f|fffd|r den Aufruf des Makros

Documents("Start07d.docm").Activate
CustomizationContext = Documents("Start07d.docm").AttachedTemplate
foundFlag = False
For Each cb In CommandBars
    If cb.Name = "Extraktionsmakros" Then foundFlag = True
Next cb
If Not foundFlag Then CommandBars.Add Name:="Extraktionsmakros", Position:=msoBarTop
CommandBars("Extraktionsmakros").Visible = True
CommandBars("Extraktionsmakros").Controls.Add Type:=msoControlButton, Before:=CommandBars("Extraktionsmakros").Controls.Count + 1
With CommandBars("Extraktionsmakros").Controls(CommandBars("Extraktionsmakros").Controls.Count)
    .Caption = Vname
    .OnAction = Vname
    .Style = msoButtonCaption
    .TooltipText = CTT
End With
Documents("Start07d.docm").AttachedTemplate.Save
CustomizationContext = Documents("Start07d.docm")
Documents("Start07d.docm").Save

'Anlegen einer Datei mit den Angaben |fffd|ber das Makro

Documents.Add
ActiveDocument.ActiveWindow.View.SeekView = wdSeekMainDocument
ActiveDocument.Tables.Add Range:=Selection.Range, NumRows:=Dimzahl + 1, NumColumns:=2
With ActiveDocument.Tables(1)
    .Rows(1).Cells(1).Range.Text = "Definition der Kategorie: "
    .Rows(1).Cells(2).Range.Text = CTT
    For I = 1 To Dimzahl
        .Rows(I + 1).Cells(1).Range.Text = DDDVoll(I)
        If HHHVoll(I) Then .Rows(I + 1).Cells(2).Range.Text = "Mit Vorgaben"
    Next I
End With
ActiveDocument.SaveAs "Beschreibung_" + Vname + ".docx"
ActiveDocument.Close


Unload Me
End Sub

Private Sub UserForm_Initialize()
        
        Makrostruktur.Caption = "Festlegen der Dimensionen f|fffd|r die Kategorie " + Vname + ".    Maximal je 50 Zeichen. Keine Anf|fffd|hrungszeichen verwenden !!"
        a = Val(Makroerstellen.Vzahl)
        If a < 8 Then
            ComboBox8.Visible = False
            CheckBox8.Visible = False
            Frame8.Visible = False
            If a < 7 Then
                ComboBox7.Visible = False
                CheckBox7.Visible = False
                Frame7.Visible = False
                If a < 6 Then
                    ComboBox6.Visible = False
                    CheckBox6.Visible = False
                    Frame6.Visible = False
                    If a < 5 Then
                        ComboBox5.Visible = False
                        CheckBox5.Visible = False
                        Frame5.Visible = False
                        If a < 4 Then
                            ComboBox4.Visible = False
                            CheckBox4.Visible = False
                            Frame4.Visible = False
                            If a < 3 Then
                                ComboBox3.Visible = False
                                CheckBox3.Visible = False
                                Frame3.Visible = False
                                If a < 2 Then
                                    ComboBox2.Visible = False
                                    CheckBox2.Visible = False
                                    Frame2.Visible = False
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
        OK.Enabled = False
                
End Sub
Attribute VB_Name = "Mfinden"
Sub AutoOpen()
Attribute AutoOpen.VB_Description = "Makro erstellt am 26.01.00 von AGWT"
Attribute AutoOpen.VB_ProcData.VB_Invoke_Func = "Project.NewMacros.AutoOpen"
'
' AutoOpen Makro
' Makro erstellt am 26.01.00 von AGWT
'
On Error GoTo Mfehlt
Documents("Start07d.docm").AttachedTemplate = ActiveDocument.Path + "\M07d.dotm"
ActiveDocument.CommandBars("Makroerstellen").Visible = True
ActiveDocument.CommandBars("Makroerstellen").Protection = msoBarNoChangeDock
ActiveDocument.Save
GoTo geschafft
Mfehlt:
    MsgBox "Die Datei Start07d.docm und die Dokumentvorlage M07d.dotm stehen nicht im selben Verzeichnis. Korrigieren Sie den Fehler, und versuchen Sie es danach noch einmal."
geschafft:
End Sub
Sub Autoclose()
Documents("Start07d.docm").AttachedTemplate = NormalTemplate
Documents("Start07d.docm").Save
End Sub

Attribute VB_Name = "RohVorlage"
Attribute VB_Base = "0{66B1B534-3C6C-4D6B-9AAA-DAC5E5388BA7}{A1777508-202F-4214-BBAF-25A9021CD4FD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Abbrechen_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()

AnzeigeInterviewText.Value = MIA.Extrahieren.TextEinlesen
     
     























Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True



INQUEST-PP=macro
