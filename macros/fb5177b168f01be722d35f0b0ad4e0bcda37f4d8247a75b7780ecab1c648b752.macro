Attribute VB_Name = "Global_Functions_Subs"


   Declare Function WNetGetUser Lib "mpr.dll" _
      Alias "WNetGetUserA" (ByVal lpName As String, _
      ByVal lpUserName As String, lpnLength As Long) As Long

   Const NoError = 0       'The Function call was successful

Global QC_Record As Boolean

Attribute VB_Name = "QC_Log_Module_FL"
Sub Copy_Button_Click()
'Get Worksheetname to pass to copy log file

Dim xSheet As Worksheet
Dim TabName As String

Set xSheet = ActiveSheet
TabName = xSheet.Name

If QC_Record = True Then
    CopytoLogFile (TabName)
Else
    MsgBox "You are not approved to record this to the logfile."
End If
    
End Sub

Public Sub CopytoLogFile(TabName As String)
'Copy QA Data to Excel Log file from tab

Dim xBook       As Workbook
Dim xBookLog    As Workbook
Dim xSheet      As Worksheet
Dim xSheetlog   As Worksheet
Dim i           As Integer
Dim ErrorField  As String
Dim lastRow     As Integer
Dim lastCol     As Integer
Dim LogPath     As String
Dim LogFile     As String
'Account info variables
Dim AudTyp      As String
Dim NmIns       As String
Dim EscSubNum   As String
Dim Polnum      As String
Dim EffDt       As Date
Dim EndstEffDt  As Date
Dim Program     As String
Dim UAName      As String
Dim UWName      As String
Dim Reviewer    As String
Dim NewRnwlInd  As String
Dim LOB         As String
Dim Approver    As String
Dim ApproveDt   As Date
Dim ErrCount    As Integer
Dim TotFields   As Integer
Dim AccurPct    As Double
Dim myRow       As Integer
Dim myComments  As String
Dim myComments2 As String
'Code Counting Variables
Dim DelRows     As Long
Dim RowCounter  As Long

LOB = "WC"

Set xBook = ActiveWorkbook
Set xSheet = xBook.Sheets(TabName)

If LCase(Left(xBook.Sheets("Account Info").Range("A1").Value, 4)) = "post" Then
    AudTyp = "Post-Issue"
Else
    AudTyp = "Pre-Issue"
End If

'Grab data from tabs: Account Info, Policy Issuance, Endorsement #x
LogPath = "\\enfs1\Share\Operations\Audit\Florida\"
LogFile = "FL Audit Log File.xlsx"

'Open QA Log File
Set xBookLog = Workbooks.Open(LogPath & LogFile)
Set xSheetlog = xBookLog.Sheets("QA Log File")

xSheetlog.Unprotect "floir"

'Find last row used in QA Log File
lastRow = xSheetlog.Range("A" & xSheetlog.Rows.Count).End(xlUp).Row

'Get Comments from sheet "TabName", include in values to logfile.
For i = 12 To 500
    If xSheet.Range("A" & i).Value = "THE FOLLOWING CORRECTIONS MUST BE MADE PRIOR TO ISSUANCE:" Then
        myRow = i
    End If
Next i

'Get values for new record in logfile.
NmIns = xSheet.Range("B2").Value
EscSubNum = xSheet.Range("B3").Value
Polnum = xSheet.Range("B4").Value
EffDt = xBook.Sheets("Account Info").Range("B5").Value
        
    If Left(xSheet.Name, 5) = "Endor" And IsDate(xSheet.Range("B6").Value) Then
        EndstEffDt = xSheet.Range("B6").Value
    Else
        EndstEffDt = 1
    End If
    
Program = xSheet.Range("B7").Value
UAName = xSheet.Range("B8").Value
UWName = xSheet.Range("B9").Value
Reviewer = xSheet.Range("B10").Value
NewRnwlInd = xSheet.Range("B11").Value

If xSheet.Range("B" & myRow).Value <> "" Then
    myComments = xSheet.Range("B" & myRow).Value
Else
    myComments = "No Comments"
End If

If xSheet.Range("B" & myRow + 5).Value <> "" Then
    myComments2 = xSheet.Range("B" & myRow + 5).Value
Else
    myComments2 = "No Comments"
End If

If xSheet.Range("B" & myRow + 2).Value <> "" Then
    Approver = xSheet.Range("B" & myRow + 2).Value
    ApproveDt = xSheet.Range("C" & myRow + 2).Value
Else
    Approver = ""
End If

'Temporarily blocking this code as we intend to show each review transaction rather than ovewriting previous transactions

DelRows = 0

'If SubmissionID and TaskType already exist in logfile, delete previous record first
'If lastRow > 1 Then
'    For RowCounter = 2 To lastRow
'        If xSheetlog.Range("M" & RowCounter).Value = LOB And xSheetlog.Range("G" & RowCounter).Value = EscSubNum And xSheetlog.Range("B" & RowCounter).Value = TabName Then
'            xSheetlog.Range("A" & RowCounter).EntireRow.Delete
'            DelRows = DelRows + 1
'            RowCounter = RowCounter - 1
'        End If
'    Next RowCounter
'End If


'Add new Account info to Log File
With xSheetlog.Range("A" & lastRow + 1 - DelRows)
    .Value = AudTyp
    .Offset(0, 1).Value = Now
    .Offset(0, 2).Value = TabName
    .Offset(0, 3).Value = 1
    .Offset(0, 4).Value = 1
    .Offset(0, 5).Value = 0
    .Offset(0, 6).Value = NmIns
    .Offset(0, 7).Value = EscSubNum
    .Offset(0, 8).Value = Polnum
    .Offset(0, 9).Value = EffDt
    .Offset(0, 11).Value = Program
    .Offset(0, 12).Value = UAName
    .Offset(0, 13).Value = UWName
    .Offset(0, 14).Value = Reviewer
    .Offset(0, 15).Value = NewRnwlInd
    .Offset(0, 16).Value = Approver
    .Offset(0, 18).Value = LOB
    .Offset(0, 44).Value = myComments
    .Offset(0, 45).Value = myComments2
End With

If Left(TabName, 5) = "Endor" And EndstEffDt > 1 Then
    xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 10).Value = EndstEffDt
Else
    xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 10).Value = ""
End If

If Approver = "" Then
    xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 17).Value = ""
Else
    xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 17).Value = ApproveDt
End If


'Find lastcolumn used for later
lastCol = xSheetlog.Cells(lastRow + 1 - DelRows, 45).End(xlToLeft).Column

'For Each cell in xsheet column C row 12 and greater, if cell = "N", then get tabname & column B fieldname
ErrCount = 0
TotFields = 0
    
    For i = 14 To myRow - 2
        If Left(LCase(Trim(xSheet.Cells(i, "C").Value)), 1) = "s" Or Left(LCase(Trim(xSheet.Cells(i, "C").Value)), 1) = "u" Then
            TotFields = TotFields + 1
        End If
        If Left(LCase(Trim(xSheet.Cells(i, "C").Value)), 1) = "u" Then
            ErrorField = xSheet.Cells(i, "B").Value
            xSheetlog.Cells(lastRow + 1 - DelRows, lastCol + 1).Value = ErrorField
            ErrCount = ErrCount + 1
            lastCol = lastCol + 1
        End If
    Next i

xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 3).Value = TotFields
xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 4).Value = ErrCount

If TotFields = 0 Then
    AccurPct = 0
Else
    AccurPct = 1 - ErrCount / TotFields
End If

xSheetlog.Range("A" & lastRow + 1 - DelRows).Offset(0, 5).Value = AccurPct

xSheetlog.Protect "floir"

Excel.Application.DisplayAlerts = False
Excel.Application.ScreenUpdating = False

xBookLog.Close SaveChanges:=True

Excel.Application.DisplayAlerts = True
Excel.Application.ScreenUpdating = True

MsgBox "Completed uploading " & TabName & " fields to Log File."

End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()
'Get Windows login name, check against list of approved usernames. If yes, unprotect workbook.

'Approved users:
    'scox
    'jholzing
    'dyont
    'gfarro
    
Dim Ws As Worksheet
Dim MyArray(5) As String

    MyArray(0) = "scox"
    MyArray(1) = "jholzing"
    MyArray(2) = "dyont"
    MyArray(3) = "gfarro"

    Const lpnLength     As Integer = 255
    Dim Status      As Integer
    Dim lpName, lpUserName As String
    lpUserName = Space$(lpnLength + 1)
    
    Status = WNetGetUser(lpName, lpUserName, lpnLength)
    
    If Status = NoError Then
        lpUserName = Left$(lpUserName, InStr(lpUserName, Chr(0)) - 1)
    Else
        Exit Sub
    End If
    
    'If the user name is in the approved users array, then unprotect all worksheets, else, continue without protection
    If UBound(Filter(MyArray, lpUserName)) > -1 Then
        For Each Ws In ActiveWorkbook.Worksheets
            ActiveSheet.Unprotect "gio"
        Next Ws
        QC_Record = True
    Else
        QC_Record = False
    End If
    
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)

Dim Ws As Worksheet

    For Each Ws In ActiveWorkbook.Worksheets
        ActiveSheet.Protect "gio"
    Next Ws

If Not ThisWorkbook.Saved Then
    If MsgBox("Do you want to save the file before continuing?", vbYesNo, "Save?") = vbYes Then
        ActiveWorkbook.Save
    End If
End If
End Sub


INQUEST-PP=macro
