Attribute VB_Name = "Anschlag"
Sub Anschl|fffd|ge_z|fffd|hlen()
'
' Anschl|fffd|ge_z|fffd|hlen Makro

WordBasic.StartOfDocument



While WordBasic.AtEndOfDocument() <> -1
    WordBasic.CharRight 1, 1

    x = Asc(WordBasic.[Selection$]())

        Select Case x
            Case 13
                n = n + 1
            Case 11, 33, 34, 36 To 42, 47, 58, 59, 61 To 93, 95, 123 To 125, 128, 132, 147, 167, 176, 178, 179, 181, 196, 214, 220, 232 To 235, 241
                n = n + 2
            Case Else
                n = n + 1
        End Select

    WordBasic.CharRight
WordBasic.PrintStatusBar Str(n - 0) + " Anschl|fffd|ge gez|fffd|hlt"
Wend


' Makro aufgezeichnet am 17.02.2002 von Christian Franke
'
End Sub
Attribute VB_Name = "Ausz|fffd|hlen_10Min"

Public Sub MAIN()
Dim Schaltfl|fffd|che
Dim Enter
Dim Anfang
Dim ende
Dim Ende1
Dim mark_pos
Dim Dlg As Object
Dim posi
Dim posiRechts$
Dim posiStrich$
Dim a
Dim b
Dim mar$
Dim mar_
Dim c
Dim merk1
Dim Merke$

Rem Makro zum Z|fffd|hlen der Anschl|fffd|ge / Aufbereiten eines KtB-Textes
nochmal:
WordBasic.BeginDialog 474, 304, "Anschl|fffd|ge z|fffd|hlen (c) Chr. R|fffd|hrs, VS Mittenwald, 15.11.03"
WordBasic.OKButton 27, 267, 88, 21
WordBasic.CancelButton 158, 267, 103, 21
WordBasic.GroupBox 16, 51, 204, 67, "Anschl|fffd|ge"
WordBasic.OptionGroup "Anschlag"
WordBasic.OptionButton 27, 63, 180, 16, "&wie vorher belassen"
WordBasic.OptionButton 27, 80, 79, 16, "&z|fffd|hlen"
WordBasic.OptionButton 27, 97, 113, 16, "&r|fffd|ckg|fffd|ngig"

WordBasic.GroupBox 241, 51, 204, 67, "Rechtsb|fffd|ndiger Tabulator"
WordBasic.OptionGroup "Tabulator"
WordBasic.OptionButton 251, 63, 180, 16, "&wie vorher belassen"
WordBasic.OptionButton 251, 80, 95, 16, "&einf|fffd|gen"
WordBasic.OptionButton 251, 97, 88, 16, "&l|fffd|schen"

WordBasic.GroupBox 16, 130, 204, 105, "Numerierung"
WordBasic.OptionGroup "Numerieren"
WordBasic.OptionButton 26, 142, 180, 16, "wie &vorher belassen"
WordBasic.OptionButton 26, 159, 120, 16, "durch&f|fffd|hren"
WordBasic.OptionButton 26, 176, 113, 16, "r|fffd|ck&g|fffd|ngig"

WordBasic.GroupBox 243, 130, 204, 89, "Enter"
WordBasic.OptionGroup "Enter"
WordBasic.OptionButton 255, 142, 180, 16, "&nicht mitz|fffd|hlen"
WordBasic.OptionButton 255, 159, 120, 16, "&mitz|fffd|hlen"
WordBasic.OptionButton 255, 182, 113, 16, "&setzen"
WordBasic.OptionButton 255, 199, 113, 16, "&Flie|fffd|text"

WordBasic.CheckBox 254, 242, 173, 16, "Nur markierten &Teil", "Nur_Marke"

WordBasic.Text 13, 7, 320, 13, "Automatisch Aufbereitung von Texten f|fffd|r KtB", "Text1"
WordBasic.Text 13, 26, 248, 13, "(Anschl|fffd|ge z|fffd|hlen usw.)", "Text2"
WordBasic.Text 23, 193, 180, 12, "Vorsicht: "
WordBasic.Text 23, 206, 180, 12, "Die Numerierung l|fffd|scht evtl.", "Text3"
WordBasic.Text 23, 217, 180, 12, "Zahlen am Zeilenanfang", "Text4"
WordBasic.EndDialog

Dim BeispielDlg As Object: Set BeispielDlg = WordBasic.CurValues.UserDialog
If WordBasic.GetSelStartPos() = WordBasic.GetSelEndPos() Then
    BeispielDlg.Nur_Marke = 0
Else
    BeispielDlg.Nur_Marke = 1
End If

WordBasic.DisableInput 0
Schaltfl|fffd|che = WordBasic.Dialog.UserDialog(BeispielDlg)
If Schaltfl|fffd|che = 0 Then GoTo exit_

Enter = BeispielDlg.Enter
If Enter = 3 Then BeispielDlg.Anschlag = 2

If BeispielDlg.Nur_Marke = 0 Then
    WordBasic.EditSelectAll
    Anfang = WordBasic.GetSelStartPos()
    ende = WordBasic.GetSelEndPos()
    Ende1 = ende
Else
    Anfang = WordBasic.GetSelStartPos()
    ende = WordBasic.GetSelEndPos()
    Ende1 = ende
    If Anfang = ende Then
        WordBasic.EditSelectAll
        Anfang = WordBasic.GetSelStartPos()
        ende = WordBasic.GetSelEndPos()
    End If
End If

If Enter = 2 Then
    'Selection.WholeStory
    Rand_vorher = Selection.ParagraphFormat.RightIndent
    Rand = Round(PointsToCentimeters(Rand_vorher), 2)
    rRand$ = InputBox("Rechter Einzug? (z.B. 0,9)", "Frage:", CStr(Rand))
    If rRand$ = "" Then GoTo nochmal
        rr = InStr(rRand$, ".")
        If rr > 0 Then Mid$(rRand$, rr, 1) = ","
        p = CentimetersToPoints(rRand$)
    With Selection.ParagraphFormat
        .RightIndent = p
    End With
    Selection.HomeKey Unit:=wdStory
    mark_pos = WordBasic.GetSelStartPos()
    While mark_pos < (ende - 1)
        Selection.EndKey Unit:=wdLine
        mar_ = Asc(WordBasic.[Selection$]())
        If mar_ = 13 Then
            Selection.MoveRight Unit:=wdCharacter, Count:=1
            Selection.EndKey Unit:=wdLine
            mark_pos = WordBasic.GetSelStartPos()
        Else
            'WordBasic.CharRight 1
            WordBasic.WordLeft 1, 1
            Merke$ = WordBasic.[Selection$]()
            WordBasic.EditClear
            Merke1$ = WordBasic.[RTrim$](Merke$)
            If Len(Merke$) - 1 > Len(Merke1$) Then
                ende = ende - Len(Merke$) + Len(Merke1$) + 1
            End If
            WordBasic.Insert Merke1$
            Selection.TypeParagraph
            mark_pos = WordBasic.GetSelStartPos()
        End If
    Wend

End If


mark_pos = ende

If BeispielDlg.Tabulator = 1 Then
    If Selection.ParagraphFormat.LeftIndent = 0 Then
        WordBasic.FormatTabs ClearAll:=1
    End If
    Set Dlg = WordBasic.DialogRecord.FilePageSetup(False)
    WordBasic.CurValues.FilePageSetup Dlg
    posi = WordBasic.Val(Dlg.PageWidth) - WordBasic.Val(Dlg.RightMargin) - _
    WordBasic.Val(Dlg.LeftMargin)
    posiRechts$ = Str(posi)
    posiStrich$ = Str(posi - 0.75)
    Selection.ParagraphFormat.TabStops.Add Position:=CentimetersToPoints(Val(posiStrich$)), _
        Alignment:=wdAlignTabBar
    Selection.ParagraphFormat.TabStops.Add Position:=CentimetersToPoints(Val(posiRechts$)), _
        Alignment:=wdAlignTabRight
Else
    If BeispielDlg.Tabulator = 2 Then
        nummer = 0
        On Error Resume Next
        For Each aTab In Selection.Paragraphs.TabStops
            Position = PointsToCentimeters(aTab.Position)
            If Position < 1 Then nummer = nummer + 1
             Selection.Paragraphs.TabStops(nummer + 1).Clear
        Next aTab
        On Error GoTo 0
    End If
End If

If BeispielDlg.Numerieren = 1 Then
    Rand_vorher = Selection.ParagraphFormat.RightIndent
    Rand = Round(PointsToCentimeters(Rand_vorher), 2)
        If Rand = 0 Then
            Neu_Rand = Rand + 0.9
        Else
            Neu_Rand = Rand - 0.9
        End If
    With Selection.ParagraphFormat
        .RightIndent = CentimetersToPoints(CStr(Neu_Rand))
    End With
    Selection.ParagraphFormat.TabStops.Add Position:=CentimetersToPoints(0.7), _
        Alignment:=wdAlignTabLeft
    With ListGalleries(wdNumberGallery).ListTemplates(4).ListLevels(1)
        .NumberFormat = "%1"
        .TrailingCharacter = wdTrailingTab
        .NumberStyle = wdListNumberStyleArabic
        .NumberPosition = CentimetersToPoints(0)
        .Alignment = wdListLevelAlignCenter
        .TextPosition = CentimetersToPoints(0.7)
        .TabPosition = CentimetersToPoints(0.7)
        .ResetOnHigher = 0
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .Color = wdUndefined
            .Size = 8
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
        End With
        .LinkedStyle = ""
    End With
    ListGalleries(wdNumberGallery).ListTemplates(4).Name = ""
    Selection.Range.ListFormat.ApplyListTemplate ListTemplate:=ListGalleries( _
        wdNumberGallery).ListTemplates(4), ContinuePreviousList:=True, ApplyTo:= _
        wdListApplyToWholeList, DefaultListBehavior:=wdWord9ListBehavior
    
Else
    If BeispielDlg.Numerieren = 2 Then
        Rand_vorher = Selection.ParagraphFormat.RightIndent
        If Rand_vorher > 1000 Then Rand_vorher = 0
        If Rand_vorher = 0 Then
            Rand = 0
        Else
            Rand = Round(PointsToCentimeters(Rand_vorher) + 0.9, 2)
        End If
        With Selection.ParagraphFormat
            .RightIndent = CentimetersToPoints(CStr(Rand))
        End With
        WordBasic.FormatNumberDefault 0
        On Error Resume Next
        Selection.Paragraphs.TabStops(1).Clear
        On Error GoTo 0
   End If
End If

If BeispielDlg.Anschlag <> 0 Then
    WordBasic.StartOfLine
    mark_pos = WordBasic.GetSelStartPos()
 While mark_pos < (ende)
        a = 0
        b = 0
        mar$ = WordBasic.[Selection$]()
        mar_ = Asc(mar$)
    
    If BeispielDlg.Anschlag = 1 Then
        While mar_ <> 13
            
                Select Case mar_
                    Case 11, 13, 9
                        b = b + 0
                    Case 33, 34, 36 To 42, 47, 58, 59, 61 To 93, 95, 123 To 125, 128, 132, 147, 167, 176, 178, 179, 181, 196, 214, 220, 232 To 235, 241
 '132 = Anf|fffd|hrungszeichen unten / 147 = Anf|fffd|hrungszeichen oben
                        b = b + 2
                    Case Else
                        b = b + 1
                End Select
            
            WordBasic.CharRight 1
            mar$ = WordBasic.[Selection$]()
            mar_ = Asc(mar$)
        Wend
        
            c = c + b + 1
            If Enter = 1 Then c = c + 1
            
            If BeispielDlg.Anschlag = 1 Then
                gross = Selection.Font.Size
                WordBasic.CharLeft 1
                mar$ = WordBasic.[Selection$]()
                mar_ = Asc(mar$)
                WordBasic.CharRight 1
                If mar_ <> 13 Or Enter = 1 Then
                    If mar_ = 9 Then
                        Zusatz$ = ""
                    Else
                        Zusatz$ = Chr$(9)
                    End If
                    Selection.Font.Size = 8
                    WordBasic.Insert Zusatz$ + WordBasic.[LTrim$](Str(c))
                    Selection.Font.Size = gross
                    ende = ende + 1 + Len(WordBasic.[LTrim$](Str(c)))
                End If
            End If
   
    
    Else
        merk1 = 0
        While mar_ <> 9
            WordBasic.CharRight 1
            mark_pos = WordBasic.GetSelStartPos()
            If WordBasic.AtEndOfDocument() Then GoTo exit_1
            If mark_pos >= ende Then GoTo exit_1
            mar$ = WordBasic.[Selection$]()
            mar_ = Asc(mar$)
        Wend

        While mar_ <> 13
            WordBasic.EditClear
            ende = ende - 1
            mar_ = Asc(WordBasic.[Selection$]())
            If mar_ = 32 Then
                WordBasic.CharRight 1
                merk1 = 1
            End If
        Wend

        If merk1 = 1 Then
            WordBasic.WordLeft 2, 1
            Merke$ = WordBasic.[Selection$]()
            WordBasic.EditClear
            Merke$ = WordBasic.[RTrim$](Merke$)
            WordBasic.Insert Merke$
            merk1 = 0
        End If

    End If
    If WordBasic.AtEndOfDocument() Then GoTo exit_1
    If mark_pos >= ende Then GoTo exit_1
    WordBasic.CharRight 1
    mark_pos = WordBasic.GetSelStartPos()
 Wend
End If
exit_1:
If Enter = 3 Then
    Selection.WholeStory
    Rand_vorher = Selection.ParagraphFormat.RightIndent
    Rand = Round(PointsToCentimeters(Rand_vorher), 2)
    rRand$ = InputBox("Rechter Einzug? (z.B. 0,9)", "Frage:", CStr(Rand))
    If rRand$ = "" Then GoTo nochmal
    rr = InStr(rRand$, ".")
    If rr > 0 Then Mid$(rRand$, rr, 1) = ","
    p = CentimetersToPoints(rRand$)
    With Selection.ParagraphFormat
        .RightIndent = p
    End With
    Selection.HomeKey Unit:=wdStory
    mark_pos = WordBasic.GetSelStartPos()
    While mark_pos < (ende - 1)
        Selection.EndKey Unit:=wdLine
        mar_ = Asc(WordBasic.[Selection$]())
        If mar_ = 13 Then
            Selection.MoveRight Unit:=wdCharacter, Count:=1
            mar2_ = Asc(WordBasic.[Selection$]())
            If mar2_ = 13 Then
                Selection.MoveRight Unit:=wdCharacter, Count:=1
                GoTo weiter
            Else
                Selection.TypeBackspace
                WordBasic.Insert " "
            End If
            
        Else
            Selection.MoveRight Unit:=wdCharacter, Count:=1
        End If
weiter:
    mark_pos = WordBasic.GetSelStartPos()
    Wend

End If
exit_:
On Error GoTo -1: On Error GoTo mark2
If BeispielDlg.Nur_Marke = 1 Then
    WordBasic.SetSelRange Anfang, ende
    GoTo exit2
Else
    'Selection.WholeStory
    GoTo exit2
End If

mark2:
Selection.WholeStory
exit2:
On Error GoTo -1: On Error GoTo 0
End Sub



Attribute VB_Name = "NewMacros"
Sub Korrektur_gesperrt()
Attribute Korrektur_gesperrt.VB_Description = "Makro aufgezeichnet am 20.01.2010 von Schule"
Attribute Korrektur_gesperrt.VB_ProcData.VB_Invoke_Func = "Normal.NewMacros.Korrektur_gesperrt"
'
' Korrektur_gesperrt Makro
' Makro aufgezeichnet am 26.11.2011 von Christian Franke
'
    x$ = Environ("USERNAME")

' Pfad f|fffd|r Windows 7
    Documents.Add Template:= _
        "C:\Users\" + x$ + "\AppData\Roaming\Microsoft\Templates\TuNix.dot" _
        , NewTemplate:=False, DocumentType:=0
        
' Pfad f|fffd|r Windows XP
'    Documents.Add Template:= _
'        "C:\Dokumente und Einstellungen\" + x$ + "\Anwendungsdaten\Microsoft\Vorlagen\TuNix.dot" _
'        , NewTemplate:=False, DocumentType:=0
End Sub
Sub Zeilen_5()
Attribute Zeilen_5.VB_Description = "Makro aufgezeichnet am 08.10.2011 von Christian Franke"
Attribute Zeilen_5.VB_ProcData.VB_Invoke_Func = "Normal.NewMacros.Zeilen_5"
'
' Zeilen_5 Makro
' Makro aufgezeichnet am 08.10.2011 von Christian Franke
'
    Selection.MoveDown Unit:=wdLine, Count:=6
    Selection.TypeParagraph
    Selection.MoveUp Unit:=wdLine, Count:=1
    Selection.Range.ListFormat.RemoveNumbers NumberType:=wdNumberParagraph
End Sub
Attribute VB_Name = "Tastschr22L"


Sub Minuten10_22L()
' hier wird die Zwischenablage geleert
' Selection.TypeText Text:="Die Zwischenablage wird geleert!"
'    Selection.WholeStory
'    Selection.Delete Unit:=wdCharacter, Count:=1
'    Selection.WholeStory
'    Selection.Copy

'hier wird der gesamte Text in Courier New, 12pt formatiert
Selection.WholeStory
WordBasic.FormatFont Points:=12, Bold:=0, Font:="Courier New"

' hier werden die Seitenr|fffd|nder automatisch eingestellt
    With ActiveDocument.PageSetup
        .LineNumbering.Active = False
        .Orientation = wdOrientPortrait
        .TopMargin = CentimetersToPoints(1.69)
        .BottomMargin = CentimetersToPoints(2)
        .LeftMargin = CentimetersToPoints(2.41)
        .RightMargin = CentimetersToPoints(2)
        .Gutter = CentimetersToPoints(0)
        .HeaderDistance = CentimetersToPoints(1.25)
        .FooterDistance = CentimetersToPoints(1.25)
        .PageWidth = CentimetersToPoints(21)
        .PageHeight = CentimetersToPoints(29.7)
        .FirstPageTray = wdPrinterDefaultBin
        .OtherPagesTray = wdPrinterDefaultBin
        .SectionStart = wdSectionNewPage
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .VerticalAlignment = wdAlignVerticalTop
        .SuppressEndnotes = False
        .MirrorMargins = False
        .TwoPagesOnOne = False
        .GutterPos = wdGutterPosLeft
    End With


' hier werden die Absatzformate automatisch eingestellt
    With Selection.ParagraphFormat
        .LeftIndent = CentimetersToPoints(0)
        .RightIndent = CentimetersToPoints(0)
        .SpaceBefore = 0
        .SpaceBeforeAuto = False
        .SpaceAfter = 0
        .SpaceAfterAuto = False
        .LineSpacingRule = wdLineSpaceSingle
        .Alignment = wdAlignParagraphLeft
        .WidowControl = True
        .KeepWithNext = False
        .KeepTogether = False
        .PageBreakBefore = False
        .NoLineNumber = False
        .Hyphenation = True
        .FirstLineIndent = CentimetersToPoints(0)
        .OutlineLevel = wdOutlineLevelBodyText
        .CharacterUnitLeftIndent = 0
        .CharacterUnitRightIndent = 0
        .CharacterUnitFirstLineIndent = 0
        .LineUnitBefore = 0
        .LineUnitAfter = 0
    End With


' hier wird die Silbentrennung ausgeschalten
    With ActiveDocument
        .AutoHyphenation = False
        .HyphenateCaps = True
        .HyphenationZone = CentimetersToPoints(0.75)
        .ConsecutiveHyphensLimit = 0
    End With


' hier wird das Dokument als leere Seite gespeichert
ActiveDocument.Save


' hier wird die Startzeit sekundengenau geschrieben
Selection.WholeStory
WordBasic.FormatFont Points:=12, Bold:=1, Font:="Courier New"
MsgBox " Start der 10-Minuten-Abschrift"
WordBasic.Insert "Testbeginn: "
Selection.InsertDateTime DateTimeFormat:="dd.MM.yyyy HH:mm:ss", _
        InsertAsField:=False

Selection.TypeParagraph
Selection.MoveRight Unit:=wdCharacter, Count:=1, Extend:=wdExtend
WordBasic.FormatFont Bold:=0, Font:="Courier New"
Selection.TypeParagraph

' hier wird die aktuelle Systemzeit einzelnen speicherbereichen zugewiesen
MerkStunde = Hour(Time)
MerkMinute = Minute(Time)
MerkSekunde = Second(Time)
Merkzeit = Time

' hier wird die Zeit eingestellt
Endezeit = Merkzeit + TimeValue("00:01:00")
Application.OnTime When:=Now + TimeValue("00:01:00"), _
    Name:="tastschr22L.signal22L"

End Sub
Sub Signal22L()

' hier wird die Endezeit sekundengenau geschrieben
Selection.EndKey Unit:=wdStory
WordBasic.InsertPara
WordBasic.InsertPara
WordBasic.FormatFont Bold:=1, Font:="Courier New"
WordBasic.Insert "Testende: "

Selection.InsertDateTime DateTimeFormat:="dd.MM.yyyy HH:mm:ss", _
 InsertAsField:=False
    Selection.TypeParagraph
    

'hier wird der gesamte Text in Courier New 12pt formatiert
    Selection.HomeKey Unit:=wdStory
    Selection.MoveDown Unit:=wdLine, Count:=2
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
    Selection.MoveUp Unit:=wdLine, Count:=2, Extend:=wdExtend
    With Selection.Font
        .Name = "Courier New"
        .Size = 12
        .Bold = False
        .Italic = False
        .Underline = wdUnderlineNone
        .UnderlineColor = wdColorAutomatic
        .StrikeThrough = False
        .DoubleStrikeThrough = False
        .Outline = False
        .Emboss = False
        .Shadow = False
        .Hidden = False
        .SmallCaps = False
        .AllCaps = False
        .Color = wdColorAutomatic
        .Engrave = False
        .Superscript = False
        .Subscript = False
        .Spacing = 0
        .Scaling = 100
        .Position = 0
        .Kerning = 0
        .Animation = wdAnimationNone
    End With
    Selection.EndKey Unit:=wdStory
    
  
' hier werden die Seitenr|fffd|nder automatisch eingestellt
    With ActiveDocument.PageSetup
        .LineNumbering.Active = False
        .Orientation = wdOrientPortrait
        .TopMargin = CentimetersToPoints(1.69)
        .BottomMargin = CentimetersToPoints(2)
        .LeftMargin = CentimetersToPoints(2.41)
        .RightMargin = CentimetersToPoints(2)
        .Gutter = CentimetersToPoints(0)
        .HeaderDistance = CentimetersToPoints(1.25)
        .FooterDistance = CentimetersToPoints(1.25)
        .PageWidth = CentimetersToPoints(21)
        .PageHeight = CentimetersToPoints(29.7)
        .FirstPageTray = wdPrinterDefaultBin
        .OtherPagesTray = wdPrinterDefaultBin
        .SectionStart = wdSectionNewPage
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .VerticalAlignment = wdAlignVerticalTop
        .SuppressEndnotes = False
        .MirrorMargins = False
        .TwoPagesOnOne = False
        .GutterPos = wdGutterPosLeft
    End With
    
' hier wird die Silbentrennung ausgeschalten
    With ActiveDocument
        .AutoHyphenation = False
        .HyphenateCaps = True
        .HyphenationZone = CentimetersToPoints(0.75)
        .ConsecutiveHyphensLimit = 0
    End With
  
  
' hier wird eine Aufforderung zum Z|fffd|hlen der Anschl|fffd|ge eingeblendet
Start:
If WordBasic.MsgBox("Deine Zeit ist um. Klicke nun auf OK, um mit dem Z|fffd|hlen zu beginnen!" + Chr(13) + Chr(13) + "In der Statusleiste kannst du die Zahl deiner Anschl|fffd|ge sehen!", "Anschl|fffd|ge z|fffd|hlen", 273) = 0 Then GoTo Start

' hier werden die Anschl|fffd|ge gez|fffd|hlt
WordBasic.StartOfDocument

While WordBasic.AtEndOfDocument() <> -1
    WordBasic.CharRight 1, 1

    x = Asc(WordBasic.[Selection$]())

        Select Case x
            Case 13
                n = n + 1
            Case 11, 33, 34, 36 To 42, 47, 58, 59, 61 To 93, 95, 123 To 125, 128, 132, 147, 167, 176, 178, 179, 181, 196, 214, 220, 232 To 235, 241
                n = n + 2
            Case Else
                n = n + 1
        End Select

    WordBasic.CharRight
WordBasic.PrintStatusBar Str(n - 73) + " Anschl|fffd|ge gez|fffd|hlt"
Wend




WordBasic.EndOfDocument
WordBasic.FormatTabs Position:="2,5 cm", DefTabs:="1,25 cm", Set:=1
WordBasic.FormatTabs Position:="8 cm", DefTabs:="1,25 cm", Set:=1
WordBasic.FormatTabs Position:="12 cm", DefTabs:="1,25 cm", Set:=1

WordBasic.ViewZoom AutoFit:=1

' hier wird zur Eingabe des Namens und der Klasse aufgefordert
WordBasic.BeginDialog 320, 144, "Anschlagzahl:" + Str(n - 73)
    WordBasic.GroupBox 10, 1, 300, 65, ""
    WordBasic.TextBox 80, 14, 220, 18, "Name"
    WordBasic.TextBox 80, 37, 80, 18, "klasse"
    WordBasic.PushButton 10, 81, 300, 44, "Name und Klasse richtig eingegeben", "Definierbar1"
    WordBasic.Text 20, 18, 46, 13, "Name:", "Text1"
    WordBasic.Text 20, 40, 52, 13, "Klasse:", "Text2"
WordBasic.EndDialog
Dim Wimmerchen As Object: Set Wimmerchen = WordBasic.CurValues.UserDialog
Schaltfl|fffd|che = WordBasic.Dialog.UserDialog(Wimmerchen)
While Wimmerchen.Name = "" Or Wimmerchen.Klasse = ""
    WordBasic.MsgBox "Eingabe nicht vollst|fffd|ndig!", "Fehler", 16
    WordBasic.Dialog.UserDialog Wimmerchen
Wend


' hier werden die Angaben am Ende des Dokumentes geschrieben
' WordBasic.FormatFont Points:=12, Bold:=0, Font:="Arial"
Selection.Font.Name = "Arial"
Selection.Font.Size = 12
' Selection.Font.Bold = wdToggle
WordBasic.InsertPara
WordBasic.InsertPara
WordBasic.Insert "Name:"
WordBasic.Insert Chr(9)
WordBasic.Insert Wimmerchen.Name

WordBasic.InsertPara
WordBasic.Insert "Klasse:"
WordBasic.Insert Chr(9)
WordBasic.Insert Wimmerchen.Klasse
WordBasic.Insert Chr(9)
WordBasic.Insert "Fehler:          _________________"
WordBasic.InsertPara
WordBasic.Insert "Datum:"
WordBasic.Insert Chr(9)
WordBasic.InsertDateTime
WordBasic.Insert Chr(9)
WordBasic.Insert "Anschl|fffd|ge: "
WordBasic.Insert Chr(9)
WordBasic.Insert WordBasic.[LTrim$](Str(n - 73))
WordBasic.InsertPara
WordBasic.InsertPara
WordBasic.Insert Chr(9)
WordBasic.Insert Chr(9)
WordBasic.Insert "Fehlerprozent:"


'hier wird der Dateiname und der Pfad in die Fu|fffd|zeile geschrieben
If ActiveWindow.View.SplitSpecial <> wdPaneNone Then
    ActiveWindow.Panes(2).Close
End If
If ActiveWindow.ActivePane.View.Type = wdNormalView Or ActiveWindow. _
    ActivePane.View.Type = wdOutlineView Then
    ActiveWindow.ActivePane.View.Type = wdPrintView
End If
ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
If Selection.HeaderFooter.IsHeader = True Then
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageFooter
Else
    ActiveWindow.ActivePane.View.SeekView = wdSeekCurrentPageHeader
End If
Selection.TypeParagraph
Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
    "FILENAME  \p ", PreserveFormatting:=True
With Selection.Borders(wdBorderTop)
    .LineStyle = Options.DefaultBorderLineStyle
    .LineWidth = Options.DefaultBorderLineWidth
    .Color = Options.DefaultBorderColor
End With
Selection.WholeStory
With Selection.Font
    .Name = "Arial"
    .Size = 6
End With
ActiveWindow.ActivePane.View.SeekView = wdSeekMainDocument





' hier werden die Angaben am Anfang des Dokumentes geschrieben
WordBasic.StartOfDocument
WordBasic.FormatTabs Position:="12 cm", DefTabs:="1,25 cm", Set:=1
WordBasic.FormatFont Points:=18, Bold:=1, Font:="Arial"
WordBasic.Insert "10-Minuten-Abschrift"
WordBasic.Insert Chr(9)
WordBasic.FormatFont Points:=12, Bold:=0, Font:="Arial"
WordBasic.Insert "Note:"
WordBasic.InsertPara
WordBasic.InsertPara

' hier wird das Dokument f|fffd|r die Eingabe gesperrt
' WordBasic.ToolsProtectDocument DocumentPassword:="huch", Type:=2

' hier wird das Dokument mit allen Angaben gespeichert
ActiveDocument.Save

' hier wird das Dokument ausgedruckt
' Application.PrintOut , Range:=wdPrintAllDocument, Item:= _
' wdPrintDocumentContent, Copies:=1, Pages:="", PageType:=wdPrintAllPages, _
' Collate:=True, PrintToFile:=False, PrintZoomColumn:=0, _
' PrintZoomRow:=0, PrintZoomPaperWidth:=0, PrintZoomPaperHeight:=0
' ende:

WordBasic.WaitCursor 0

' hier wird das Dokument geschlossen
'ActiveDocument.Close (SaveChanges)

' hier wird die Standard-Symbolleiste wieder eingeblendet
'CommandBars("Standard").Visible = True

End Sub






Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisDocument1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Document_New()
  Call meinKeyBackspaceAufMakroTuNixLegen
End Sub
'
Private Sub Document_Open()
  Call meinKeyBackspaceAufMakroTuNixLegen
End Sub
'
Private Sub Document_Close()
  Call meinKeyBackspaceAufMakroTuNixLoeschen
End Sub
'
Function meinKeyBackspaceAufMakroTuNixLegen()
  'Funktion verbindet die BackSpace-Taste mit der Function TuNix
  'Gilt nur im aktiven Dokument
  CustomizationContext = ActiveDocument
  'Global = CustomizationContext = NormalTemplate
  '
  'vorsorglich Shortcut l|fffd|schen
  FindKey(BuildKeyCode(Arg1:=wdKeyBackspace)).Clear
  FindKey(BuildKeyCode(Arg1:=wdKeyDelete)).Clear
  '
  'Backspace-Taste mit dem Makro TuNix verbinden
  KeyBindings.Add _
    KeyCode:=BuildKeyCode(Arg1:=wdKeyBackspace), _
    KeyCategory:=wdKeyCategoryMacro, Command:="Tunix"
  '
  'Entfernen-Taste mit dem Makro TuNix verbinden
  KeyBindings.Add _
    KeyCode:=BuildKeyCode(Arg1:=wdKeyDelete), _
    KeyCategory:=wdKeyCategoryMacro, Command:="Tunix"
End Function
'
Function meinKeyBackspaceAufMakroTuNixLoeschen()
  'Funktion hebt die Verbindung der BackSpace-Taste zu der Funktion TuNix auf
  CustomizationContext = ActiveDocument
  '
  'Shortcut aufl|fffd|sen/l|fffd|schen
  FindKey(BuildKeyCode(Arg1:=wdKeyBackspace)).Clear
  FindKey(BuildKeyCode(Arg1:=wdKeyDelete)).Clear
End Function
'
Sub Tunix()
  WordBasic.MsgBox String(5, 32) & "R|fffd|ck- und Entfernen-Taste gesperrt!", -8
End Sub



' InQuest injected base64 decoded content
' zPhw$

INQUEST-PP=macro
