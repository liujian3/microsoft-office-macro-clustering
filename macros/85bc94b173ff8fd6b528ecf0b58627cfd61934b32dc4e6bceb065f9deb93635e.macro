Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforePrint(Cancel As Boolean)
    
    Dim fault As Boolean
        fault = False
        
    'Auf plausible Namen und Datumsangaben pr|fffd|fen
    
    'Geschlecht, Name, Vorname
    'Plausibilit|fffd|tspr|fffd|fung bei IMC Stationen rausnehmen
    'damit Blankokurven gedruckt werden k|fffd|nnen
    If Val(Worksheets("Kurve").Range("CI157")) <> 11 And Val(Worksheets("Kurve").Range("CI157")) <> 13 Then
        If Worksheets("Kurve").Range("L1") = "" Then fault = True       'kein Aufnahmedatum
        If Worksheets("Kurve").Range("F3") > 360 Then fault = True      'Zahlendreher beim Jahr
        If Worksheets("Kurve").Range("F4") = "-" Then fault = True      'kein Geschlecht gew|fffd|hlt
        If Trim(Worksheets("Kurve").Range("F5")) = "" Or Trim(Worksheets("Kurve").Range("F7")) = "" Then fault = True    'Name oder Vorname fehlen
    End If
    
    If fault = True Then
        MsgBox "Bitte pr|fffd|fen Sie die Angaben GESCHLECHT, NAME, VORNAME und AUFNAHMEDATUM. Es scheint etwas zu fehlen oder nicht plausibel zu sein.", vbCritical + vbOKOnly, "Druck abgebrochen"
        Cancel = True
        Exit Sub
    End If
    
    'Medikamentenangaben auf Plusibilit|fffd|t pr|fffd|fen
    If Not checkMediData Then Cancel = True
    
    'Laborangaben auf |fffd|nderungen pr|fffd|fen
    If Worksheets("Labor").Range("L19") = True And Worksheets("Labor").Range("L20") = True Then
        If MsgBox("Die Laboranordnungen wurden seit mehr als 16h nicht ge|fffd|ndert. Sind die Anordnungen noch korrekt?", vbQuestion + vbYesNo, "Laborangaben korrekt?") = vbNo Then
            Cancel = True
            Worksheets("Kurve").Range("B105").Select
            Exit Sub
        End If
    End If
        
    'aktuellen Laborstring und TimeStamp speichern
    Worksheets("Labor").Range("L15") = Now
    Worksheets("Labor").Range("L16") = Worksheets("Labor").Range("L18")

  
    
    'Druckbereich pr|fffd|fen, ggf. |fffd|ndern und Info ausgeben
    With ActiveSheet.PageSetup
        If Not .PrintArea = "$B$1:$BW$295" Then
            MsgBox "Der Druckbereich wurde automatisch auf die festen Vorgabewerte zur|fffd|ckgesetzt. Beim Speichern werden diese Angaben |fffd|bernommen.", vbInformation + vbOKOnly, "Fehlerhafte Angabe des Druckbereichs"
            .PrintArea = "$B$1:$BW$295"
        End If
    End With
    
End Sub


Private Function checkMediData() As Boolean

    On Error Resume Next

    Dim cRow, cCol As Integer
    Dim mediError As Boolean
        mediError = False
        checkMediData = True
    
    'Nur, wenn die Kurve ausgedruckt werden soll
    'alle anderen Bl|fffd|tter k|fffd|nnen einfach so ausgedruckt werden
    If ActiveSheet.Name = "Kurve" Then
    
        For cRow = 29 To 59
            If Worksheets("Kurve").Range("BZ" & cRow) = True Then
                mediError = True
                Exit For
            End If
        Next cRow
        
        If mediError = True Then
            If MsgBox("Dem Medikament " & Worksheets("Kurve").Cells(cRow, 6) & " (Zeile " & cRow & ") wurden keine Angaben hinzugef|fffd|gt. Soll die Kurve trotzdem gedruckt werden?", vbQuestion + vbYesNo, "Fehlerhafte Medikamentenangaben") = vbNo Then
                checkMediData = False
            Else
                checkMediData = True
            End If
        End If
    
    End If
    
End Function

Private Sub Workbook_BeforeClose(Cancel As Boolean)

  For Each cBar In Application.CommandBars
    If cBar.Name = cBarKontextName Then
      Application.CommandBars(cBarKontextName).Delete
      Exit Sub
    End If
  Next

  Application.CommandBars("Cell").Reset

End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Worksheets("Labor").Range("L15") = Now

End Sub

Private Sub Workbook_Open()

    ' Kontextmen|fffd| zur Medikamentenerfassung erstellen
    Call NeuesKontextMenueErstellen

    sheetFld(0) = "S"
    sheetFld(1) = "U"
    sheetFld(2) = "W"
    sheetFld(3) = "Y"
    sheetFld(4) = "AA"
    sheetFld(5) = "AC"
    sheetFld(6) = "AE"
    sheetFld(7) = "AG"
    sheetFld(8) = "AI"
    sheetFld(9) = "AK"
    sheetFld(10) = "AM"
    sheetFld(11) = "AO"
    sheetFld(12) = "AQ"
    sheetFld(13) = "AS"
    sheetFld(14) = "AU"
    sheetFld(15) = "AW"
    sheetFld(16) = "AY"
    sheetFld(17) = "BA"
    sheetFld(18) = "BC"
    sheetFld(19) = "BE"
    sheetFld(20) = "BG"
    sheetFld(21) = "BI"
    sheetFld(22) = "BK"
    sheetFld(23) = "BM"

    ' Aktuelle Startzeit der Kurve
    ' wichtig zur Anpassung der Applikationszeiten bei Verlegungen
    mediStartTime = Worksheets("Kurve").Range("S1")
       
    ' Laborpr|fffd|fung initialisieren
    If Worksheets("Labor").Range("L15") = "" Then Worksheets("Labor").Range("L15") = Now
    
End Sub

Attribute VB_Name = "Formelreparatur"
Option Explicit

'Konstanten f|fffd|r den Parameter "nshowcmd"
Public Const SW_HIDE = 0            'Alternative: vbHide, Fenster versteckt |fffd|ffnen
Public Const SW_MAXIMIZE = 3        'Alternative: vbMaximizedFocus, Fenster maximiert |fffd|ffnen
Public Const SW_MINIMIZE = 6        'Alternative: vbMinimizedNoFocus, Fenster minimiert |fffd|ffnen
Public Const SW_RESTORE = 9
Public Const SW_SHOW = 5
Public Const SW_SHOWDEFAULT = 10
Public Const SW_SHOWMAXIMIZED = 3
Public Const SW_SHOWMINIMIZED = 2   'Alternative: vbMinimizedFocus
Public Const SW_SHOWMINNOACTIVE = 7
Public Const SW_SHOWNA = 8
Public Const SW_SHOWNOACTIVATE = 4  'Alternative: vbNormalNoFocus
Public Const SW_SHOWNORMAL = 1      'Alternative: vbNormalFocus
 
Public Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                        ByVal hwnd As Long, _
                        ByVal lpOperation As String, _
                        ByVal lpFile As String, _
                        ByVal lpParameters As String, _
                        ByVal lpDirectory As String, _
                        ByVal nshowcmd As Long _
                        ) As Long

Sub FormelSicherung()

Dim Zelle As Range, cnt As Long

    cnt = 1
    Application.ScreenUpdating = False
    
    'die komplette Kurve (alle Seiten) selektieren
    Worksheets("Kurve").Select
    Worksheets("Kurve").Range("A1:BR292").Select
    
    'Selektierten Bereich auf Formeln pr|fffd|fen
    'und den Zellhintergrund rot einf|fffd|rben
    For Each Zelle In Selection
        If Zelle.HasFormula = True Then
            cnt = cnt + 1
            Worksheets("FormelDoku").Cells(cnt, 1) = cnt - 1
            Worksheets("FormelDoku").Cells(cnt, 2) = Zelle.Address
            Worksheets("FormelDoku").Cells(cnt, 3).Value = Zelle.FormulaLocal
            Worksheets("FormelDoku").Cells(cnt, 4) = Zelle.Formula
        End If
    Next Zelle
    
    'Als Test Zelle D27 mit gesichertem Inhalt von F1 f|fffd|llen
    'Worksheets("Kurve").Range(Worksheets("FormelDoku").Cells(1, 1).Value).Formula = Worksheets("FormelDoku").Cells(1, 2).Formula
    
    Range("A1").Select
    Application.ScreenUpdating = True
    
    MsgBox "Es wurden " & cnt & " Zellen mit Formeln ermittelt"
    
End Sub

Public Function IstFormel(Zelle As Variant) As Boolean
  IstFormel = Zelle.HasFormula
End Function

Sub FormelReparatur(ByVal flag As String)

Dim Zelle As Range, cnt, cntCells, cntCellsRestored As Long, test As String, testRange As String

    cnt = 1
    cntCells = 0
    cntCellsRestored = 0
    Application.ScreenUpdating = False
    Worksheets("Kurve").Unprotect Password:="blattschutz"
    
    cellCopyMode = True
    
    'die komplette Kurve (alle Seiten) selektieren
    Range("A1:BR292").Select
    
    'Progressbar zur|fffd|cksetzen
    frmFormelReparatur.imgProgress.Width = 0
    frmFormelReparatur.lblProgress.Visible = True
    frmFormelReparatur.Repaint
    
    '1. Zellen z|fffd|hlen
    For Each Zelle In Selection
        If Zelle.HasFormula = True Then
            cntCells = cntCells + 1
        End If
    Next Zelle
    
    frmFormelReparatur.lblProgress.Visible = False
    frmFormelReparatur.Repaint
    
    'komplette Kurvenselektion aufheben
    Range("A1").Select
        
    
    '2. Formeln zur|fffd|ckschreiben
    '   Per flag wird gesteuert, ob nur leere oder alle Zellen wiederhergestellt werden sollen
    '   Der Einfachheit halber (einfachere Steuerung der ProgressBar) werden 500 Zeilen ausgelesen
    For cnt = 2 To 550
        
        'Nur Zellen, f|fffd|r die auch eine Zellreferenz dokumentiert ist
        If Worksheets("FormelDoku").Cells(cnt, 1) <> "" Then
            
            If flag = "komplett" Then
                Worksheets("Kurve").Range(Worksheets("FormelDoku").Cells(cnt, 2).Value).Formula = Worksheets("FormelDoku").Cells(cnt, 4).Formula
                cntCellsRestored = cntCellsRestored + 1
            Else
                If IsEmpty(Worksheets("Kurve").Range(Worksheets("FormelDoku").Cells(cnt, 2))) Then
                    Worksheets("Kurve").Range(Worksheets("FormelDoku").Cells(cnt, 2).Value).Formula = Worksheets("FormelDoku").Cells(cnt, 4).Formula
                    cntCellsRestored = cntCellsRestored + 1
                End If
            End If
            
            frmFormelReparatur.imgProgress.Width = 345 * ((cnt * 100) / 600) / 100
            frmFormelReparatur.Repaint
        End If
    Next cnt
    
    'ProgressBar Ende anzeigen
    'weil mehr Zeilen abgefragt werden, als Formeln vorhanden sind (der Einfachheit halber)
    frmFormelReparatur.imgProgress.Width = 345
    frmFormelReparatur.Repaint
    
    frmFormelReparatur.lblSuccess = "Es sind insgesamt " & cntCellsRestored & " Formeln wiederhergestellt worden"
    frmFormelReparatur.frmSuccess.Visible = True
    frmFormelReparatur.Repaint
    
            
    Worksheets("Kurve").Protect Password:="blattschutz"
    Application.ScreenUpdating = True
    
    cellCopyMode = False

End Sub

Sub starteFormelReparatur()

    'Optionsfenster zeigen
    frmFormelReparatur.Show
    
End Sub

Sub HilfeAnzeigen()
       
    If Dir("I:\Permanent\Intensiv- und IMC Kurve\hilfe\index.html") = "" Then
        ' Hilfe in der Entwicklungsumgebung laden
        Call ShellExecute(0, "open", "K:/Intensivkurve/Aktuell/hilfe/index.html", "", "", SW_MAXIMIZE)
    Else
        Call ShellExecute(0, "open", "I:\Permanent\Intensiv- und IMC Kurve\hilfe\index.html", "", "", SW_MAXIMIZE)
    End If
    
End Sub

Sub MailAnfrageStarten()

    ' Mail Client starten
    ActiveWorkbook.FollowHyperlink ("mailto:marco.brassat@klinikum-kassel.de" & "?subject=Problem mit der Intensiv- bzw. IMC Kurve")

End Sub
Attribute VB_Name = "Medikamentenapplikation"
Option Explicit

Public cBar As CommandBar
Public cBarVorhanden As Boolean
Public btnKontext As CommandBarButton
Public cellCopyMode As Boolean

Public Const cBarKontextName As String = "KKSPopUp"

Global selectedMediRow As Integer

Global sheetFld(23)
        
Sub KontextMenueAenderungRueckgaengig()
  Application.CommandBars("KKSPopUp").Reset
End Sub

'--- Neues Kontext-Men|fffd| zur Bearbeitung von Zellen erstellen ---

Sub NeuesKontextMenueErstellen()

    Dim objCmdBar As CommandBar
    Dim objCPopup As CommandBarPopup
    Dim objButton As CommandBarButton
    Set objCmdBar = Application.CommandBars.Add(cBarKontextName, msoBarPopup)
    
    ' Falls Speicher/Aufruffehler (resultierend aus Dokumentenspeicherung
    ' auf verschiedenen Laufwerken) auftreten ... zum Neustart auffordern
    On Error GoTo errHandler
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament erfassen/bearbeiten"
        .BeginGroup = True
        .FaceId = 44
        .OnAction = "MediApplikationFensterZeigen"
    End With
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament 2x tgl. applizieren"
        .BeginGroup = True
        .FaceId = 625
        .OnAction = "MediApplikationStdZwoelfKontext"
    End With
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament 3x tgl. applizieren"
        .OnAction = "MediApplikationStdAchtKontext"
    End With
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament 4x tgl. applizieren"
        .OnAction = "MediApplikationStdSechsKontext"
    End With
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament 6x tgl. applizieren"
        .OnAction = "MediApplikationStdVierKontext"
    End With
    
    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament 8x tgl. applizieren"
        .OnAction = "MediApplikationStdDreiKontext"
    End With
    
    Set objCPopup = objCmdBar.Controls.Add(msoControlPopup, Temporary:=True)
    With objCPopup
        .Caption = "Medikament markieren"
        .BeginGroup = True
        
        Set objButton = objCPopup.Controls.Add(msoControlButton, Temporary:=True)
            With objButton
                .Caption = "Antibiose"
                .FaceId = 223
                .OnAction = "MediMarkierungAB"
            End With
            
        Set objButton = objCPopup.Controls.Add(msoControlButton, Temporary:=True)
            With objButton
                .Caption = "Antikoagulanz"
                .FaceId = 223
                .OnAction = "MediMarkierungAK"
            End With
            
        Set objButton = objCPopup.Controls.Add(msoControlButton, Temporary:=True)
            With objButton
                .Caption = "Kreislaufwirksames Medikament"
                .FaceId = 223
                .OnAction = "MediMarkierungKLW"
            End With
    
        Set objButton = objCPopup.Controls.Add(msoControlButton, Temporary:=True)
            With objButton
                .Caption = "Markierung aufheben"
                .BeginGroup = True
                .FaceId = 1088
                .OnAction = "MediMarkierungUNDO"
            End With
    End With


    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikamente automatisch sortieren"
        .BeginGroup = True
        .FaceId = 210
        .OnAction = "MediAutoSortStart"
    End With

    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikament entfernen"
        .BeginGroup = True
        .FaceId = 241
        .OnAction = "MediApplikationZeileLoeschen"
    End With

    Set objButton = objCmdBar.Controls.Add
    With objButton
        .Caption = "Medikamention komplett entfernen"
        .FaceId = 1088
        .OnAction = "MediAllesLoeschen"
    End With
    
    Exit Sub
    
    
errHandler:
    ' Allgemeine Fehlerbehandlung
    ' Fehler sollten beim Neustart von Excel eliminiert sein
    MsgBox "Beim Starten von Excel ist ein Problem aufgetreten. Bitte starten Sie das Programm erneut.", vbCritical + vbOKOnly, "Fehlermeldung"
    

End Sub

Sub NeuesKontextMenueLoeschen()
  For Each cBar In Application.CommandBars
    If cBar.Name = cBarKontextName Then
      Application.CommandBars(cBarKontextName).Delete
      Exit For
    End If
  Next
End Sub

Sub MediApplikationFensterZeigen()
    
    
    ' Variante 1: Zeilennummer der ausgew|fffd|hlten Zeile (Schaltfl|fffd|che |fffd|berall postierbar / eigenes Kontextmen|fffd| f|fffd|r MediZellen)
    'MsgBox "Aktuelle Zeile: " & ActiveCell.Row
    
    ' Variante 2: Zeilennummer der Zelle, in der sich die Schaltfl|fffd|che befindet
    'MsgBox ActiveSheet.Shapes(Application.Caller).TopLeftCell.Row
    
    With frmMediApplikation
        
        .Show

    End With

End Sub

Sub MediApplikationZeileLoeschen()
    
    Dim delRA, delRB, delRC As String
        delRA = "A" & ActiveCell.row
        delRB = "D" & ActiveCell.row
        delRC = "F" & ActiveCell.row & ":BP" & ActiveCell.row
        
    Dim RangeToColor As String
        RangeToColor = "B" & selectedMediRow & ":BP" & selectedMediRow
        
    ' Vor|fffd|bergehende L|fffd|sung f|fffd|r Office 2013 (merged area deleting)
    On Error Resume Next
    
        
    With Worksheets("Kurve")
        .Unprotect Password:="blattschutz"
        
        .Range(delRA).ClearContents
        .Range(delRB).MergeArea.ClearContents
        .Range(delRC).ClearContents
        
        .Protect Password:="blattschutz"
    End With
    
    Call MediMarkierungUNDO
End Sub

Sub MediApplikationStdZwei()

    Dim startTime1, startTime2, startTime3, startTime4, startTime5, startTime6, startTime7, startTime8, startTime9, startTime10, startTime11, startTime12 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 2)
        startTime3 = timeCorrection(startTime1 + 4)
        startTime4 = timeCorrection(startTime1 + 6)
        startTime5 = timeCorrection(startTime1 + 8)
        startTime6 = timeCorrection(startTime1 + 10)
        startTime7 = timeCorrection(startTime1 + 12)
        startTime8 = timeCorrection(startTime1 + 14)
        startTime9 = timeCorrection(startTime1 + 16)
        startTime10 = timeCorrection(startTime1 + 18)
        startTime11 = timeCorrection(startTime1 + 20)
        startTime12 = timeCorrection(startTime1 + 22)
    
   
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'Inhalt zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime3 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime4 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime5 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime6 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime7 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime8 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime9 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime10 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime11 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime12 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With

End Sub

Sub MediApplikationStdDrei()

    Dim startTime1, startTime2, startTime3, startTime4, startTime5, startTime6, startTime7, startTime8 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 3)
        startTime3 = timeCorrection(startTime1 + 6)
        startTime4 = timeCorrection(startTime1 + 9)
        startTime5 = timeCorrection(startTime1 + 12)
        startTime6 = timeCorrection(startTime1 + 15)
        startTime7 = timeCorrection(startTime1 + 18)
        startTime8 = timeCorrection(startTime1 + 21)
    
   
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'Inhalt zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime3 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime4 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime5 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime6 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime7 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime8 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With

End Sub
Sub MediApplikationStdDreiKontext()

    Dim startTime1, startTime2, startTime3, startTime4, startTime5, startTime6, startTime7, startTime8 As Integer
    Dim n As Long
    Dim r As Integer
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'es gilt immer die Zelle, von der aus das Kontextmen|fffd| aufgerufen wurde
                
        startTime1 = Worksheets("Kurve").Cells(1, ActiveCell.Column)
        startTime2 = timeCorrection(startTime1 + 3)
        startTime3 = timeCorrection(startTime1 + 6)
        startTime4 = timeCorrection(startTime1 + 9)
        startTime5 = timeCorrection(startTime1 + 12)
        startTime6 = timeCorrection(startTime1 + 15)
        startTime7 = timeCorrection(startTime1 + 18)
        startTime8 = timeCorrection(startTime1 + 21)
    
   
    ' Berechnung f|fffd|rs Kontextmen|fffd|
    ' ***************************
    With Worksheets("Kurve")
        r = ActiveCell.row
        
        Application.ScreenUpdating = False
        
        For n = 0 To 23
            'zun|fffd|chst l|fffd|schen
            .Range(sheetFld(n) & r).MergeArea.ClearContents
        
            If .Range(sheetFld(n) & "1") = startTime1 _
            Or .Range(sheetFld(n) & "1") = startTime2 _
            Or .Range(sheetFld(n) & "1") = startTime3 _
            Or .Range(sheetFld(n) & "1") = startTime4 _
            Or .Range(sheetFld(n) & "1") = startTime5 _
            Or .Range(sheetFld(n) & "1") = startTime6 _
            Or .Range(sheetFld(n) & "1") = startTime7 _
            Or .Range(sheetFld(n) & "1") = startTime8 _
            Then .Range(sheetFld(n) & r) = "X"
        Next n
        
        Application.ScreenUpdating = True
    End With
        
End Sub
Sub MediApplikationStdVier()

    Dim startTime1, startTime2, startTime3, startTime4, startTime5, startTime6 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 4)
        startTime3 = timeCorrection(startTime1 + 8)
        startTime4 = timeCorrection(startTime1 + 12)
        startTime5 = timeCorrection(startTime1 + 16)
        startTime6 = timeCorrection(startTime1 + 20)
    
   
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'Inhalt zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime3 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime4 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime5 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime6 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With

End Sub

Sub MediApplikationStdVierKontext()

    Dim startTime1, startTime2, startTime3, startTime4, startTime5, startTime6 As Integer
    Dim n As Long
    Dim r As Integer
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'es gilt immer die Zelle, von der aus das Kontextmen|fffd| aufgerufen wurde
                
        startTime1 = Worksheets("Kurve").Cells(1, ActiveCell.Column)
        startTime2 = timeCorrection(startTime1 + 4)
        startTime3 = timeCorrection(startTime1 + 8)
        startTime4 = timeCorrection(startTime1 + 12)
        startTime5 = timeCorrection(startTime1 + 16)
        startTime6 = timeCorrection(startTime1 + 20)
    
   
    ' Berechnung f|fffd|rs Kontextmen|fffd|
    ' ***************************
    With Worksheets("Kurve")
        r = ActiveCell.row
        
        Application.ScreenUpdating = False
        
        For n = 0 To 23
            'zun|fffd|chst l|fffd|schen
            .Range(sheetFld(n) & r).MergeArea.ClearContents
        
            If .Range(sheetFld(n) & "1") = startTime1 _
            Or .Range(sheetFld(n) & "1") = startTime2 _
            Or .Range(sheetFld(n) & "1") = startTime3 _
            Or .Range(sheetFld(n) & "1") = startTime4 _
            Or .Range(sheetFld(n) & "1") = startTime5 _
            Or .Range(sheetFld(n) & "1") = startTime6 _
            Then .Range(sheetFld(n) & r) = "X"
        Next n
        
        Application.ScreenUpdating = True
    End With
        
End Sub
Sub MediApplikationStdSechs()

    Dim startTime1, startTime2, startTime3, startTime4 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 6)
        startTime3 = timeCorrection(startTime1 + 12)
        startTime4 = timeCorrection(startTime1 + 18)
    
   
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'Inhalt zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime3 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime4 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With

End Sub
Sub MediApplikationStdSechsKontext()

    Dim startTime1, startTime2, startTime3, startTime4 As Integer
    Dim n As Long
    Dim r As Integer
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'es gilt immer die Zelle, von der aus das Kontextmen|fffd| aufgerufen wurde
                
        startTime1 = Worksheets("Kurve").Cells(1, ActiveCell.Column)
        startTime2 = timeCorrection(startTime1 + 6)
        startTime3 = timeCorrection(startTime1 + 12)
        startTime4 = timeCorrection(startTime1 + 18)
    
   
    ' Berechnung f|fffd|rs Kontextmen|fffd|
    ' ***************************
    With Worksheets("Kurve")
        r = ActiveCell.row
        
        Application.ScreenUpdating = False
        
        For n = 0 To 23
            'zun|fffd|chst l|fffd|schen
            .Range(sheetFld(n) & r).MergeArea.ClearContents
        
            If .Range(sheetFld(n) & "1") = startTime1 _
            Or .Range(sheetFld(n) & "1") = startTime2 _
            Or .Range(sheetFld(n) & "1") = startTime3 _
            Or .Range(sheetFld(n) & "1") = startTime4 _
            Then .Range(sheetFld(n) & r) = "X"
        Next n
        
        Application.ScreenUpdating = True
    End With
        
End Sub
Sub MediApplikationStdAcht()

    Dim startTime1, startTime2, startTime3 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 8)
        startTime3 = timeCorrection(startTime1 + 16)
    
   
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'Inhalt zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime3 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With

End Sub
Sub MediApplikationStdAchtKontext()

    Dim startTime1, startTime2, startTime3 As Integer
    Dim n As Long
    Dim r As Integer
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'es gilt immer die Zelle, von der aus das Kontextmen|fffd| aufgerufen wurde
                
        startTime1 = Worksheets("Kurve").Cells(1, ActiveCell.Column)
        startTime2 = timeCorrection(startTime1 + 8)
        startTime3 = timeCorrection(startTime1 + 16)
    
   
    ' Berechnung f|fffd|rs Kontextmen|fffd|
    ' ***************************
    With Worksheets("Kurve")
        r = ActiveCell.row
        
        Application.ScreenUpdating = False
        
        For n = 0 To 23
            'zun|fffd|chst l|fffd|schen
            .Range(sheetFld(n) & r).MergeArea.ClearContents
        
            If .Range(sheetFld(n) & "1") = startTime1 _
            Or .Range(sheetFld(n) & "1") = startTime2 _
            Or .Range(sheetFld(n) & "1") = startTime3 _
            Then .Range(sheetFld(n) & r) = "X"
        Next n
        
        Application.ScreenUpdating = True
    End With
        
End Sub

Sub MediApplikationStdZwoelf()

    Dim startTime1, startTime2 As Integer
    Dim n As Long
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'Anschlie|fffd|end mit den TAGS der Textfelder abgleichen und Kreuze setzen
        startTime1 = timeCorrection(frmMediApplikation.spnCalcStartTime.Value)
        startTime2 = timeCorrection(startTime1 + 12)
    
   
    ' Berechnung f|fffd|rs Fenster
    ' ***********************
    With frmMediApplikation
        'Zeit abgleichen
        For n = 1 To 24
            'zun|fffd|chst l|fffd|schen
            .Controls("txtTime" & CStr(n)).Text = ""
        
            If CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime1 _
            Or CInt(.Controls("txtTime" & CStr(n)).Tag) = startTime2 _
            Then .Controls("txtTime" & CStr(n)).Text = "X"
        Next n
    End With
        
End Sub

Sub MediApplikationStdZwoelfKontext()

    Dim startTime1, startTime2 As Integer
    Dim n As Long
    Dim r As Integer
    
        'Zeiten ermitteln, zu denen Kreuze gesetzt werden sollen
        'es gilt immer die Zelle, von der aus das Kontextmen|fffd| aufgerufen wurde
                
        startTime1 = Worksheets("Kurve").Cells(1, ActiveCell.Column)
        startTime2 = timeCorrection(startTime1 + 12)
    
        ' Falls die globalen Array-Inhalte nicht mehr verf|fffd|gbar sind
        ' kann bei Excel irgendwie/warum auch immer passieren
        sheetFld(0) = "S"
        sheetFld(1) = "U"
        sheetFld(2) = "W"
        sheetFld(3) = "Y"
        sheetFld(4) = "AA"
        sheetFld(5) = "AC"
        sheetFld(6) = "AE"
        sheetFld(7) = "AG"
        sheetFld(8) = "AI"
        sheetFld(9) = "AK"
        sheetFld(10) = "AM"
        sheetFld(11) = "AO"
        sheetFld(12) = "AQ"
        sheetFld(13) = "AS"
        sheetFld(14) = "AU"
        sheetFld(15) = "AW"
        sheetFld(16) = "AY"
        sheetFld(17) = "BA"
        sheetFld(18) = "BC"
        sheetFld(19) = "BE"
        sheetFld(20) = "BG"
        sheetFld(21) = "BI"
        sheetFld(22) = "BK"
        sheetFld(23) = "BM"
   
   
    ' Berechnung f|fffd|rs Kontextmen|fffd|
    ' ***************************
    With Worksheets("Kurve")
        r = ActiveCell.row
        
        Application.ScreenUpdating = False
        
        For n = 0 To 23
            ' zun|fffd|chst l|fffd|schen
            .Range(sheetFld(n) & r).MergeArea.ClearContents
            
            If .Range(sheetFld(n) & "1") = startTime1 _
            Or .Range(sheetFld(n) & "1") = startTime2 _
            Then .Range(sheetFld(n) & r) = "X"
        Next n
        
        Application.ScreenUpdating = True
    End With
        
End Sub

Function timeCorrection(ByVal tm As Integer)

    Select Case tm
        Case 25
            timeCorrection = 1
        Case 26
            timeCorrection = 2
        Case 27
            timeCorrection = 3
        Case 28
            timeCorrection = 4
        Case 29
            timeCorrection = 5
        Case 30
            timeCorrection = 6
        Case 31
            timeCorrection = 7
        Case 32
            timeCorrection = 8
        Case 33
            timeCorrection = 9
        Case 34
            timeCorrection = 10
        Case 35
            timeCorrection = 11
        Case 36
            timeCorrection = 12
        Case 37
            timeCorrection = 13
        Case 38
            timeCorrection = 14
        Case 39
            timeCorrection = 15
        Case 40
            timeCorrection = 16
        Case 41
            timeCorrection = 17
        Case 42
            timeCorrection = 18
        Case 43
            timeCorrection = 19
        Case Else
            timeCorrection = tm
    End Select
    
End Function
Sub moveMediRow(ByVal rowNr As Integer, ByVal direction As String)

    Worksheets("Kurve").Unprotect Password:="blattschutz"
    cellCopyMode = True

    Dim cnt As Integer
    Dim selColIndex, selColRange
    Dim rowSource As Integer
    Dim rowDest As Integer
    
    Dim rangeArrayOne(29) As String
    Dim rangeArrayTwo(29) As String
    
    Dim rangeRowItems
    rangeRowItems = Array("A", "B", "D", "F", "R", "S", "U", "W", "Y", "AA", "AC", "AE", "AG", "AI", "AK", "AM", "AO", "AQ", "AS", "AU", _
                          "AW", "AY", "BA", "BC", "BE", "BG", "BI", "BK", "BM", "BO")

    Application.ScreenUpdating = False
    Application.Cursor = xlWait
    
    With Worksheets("Kurve")
    
        ' Verschieben von leeren Zeilen vermeiden
        ' weil es zu Problemen bei der Formelreparatur f|fffd|hrt
        If .Range("F" & rowNr) = "" Or .Range("F" & rowNr) = 0 Then
            MsgBox "Sorry. Leere Zeilen zu verschieben macht keinen Sinnn.", vbInformation + vbOKOnly, "Zeile nicht verschiebbar"
                cellCopyMode = False
                Application.ScreenUpdating = True
                Application.Cursor = xlDefault
                Exit Sub
        End If
    
        ' Auf manuelle Farbmarkierung pr|fffd|fen
        selColRange = "B" & rowNr & ":BP" & rowNr
        selColIndex = .Range(selColRange).Interior.ColorIndex
        
        If direction = "hoch" Then
            ' Zeile nach oben verschieben
            ' ab Zeile 30, ansonsten Infomeldung
            If rowNr = 29 Then
                MsgBox "Sorry, diese Zeile kann nur nach unten verschoben werden.", vbCritical + vbOKOnly, "Zeile nicht verschiebbar"
                cellCopyMode = False
                Application.ScreenUpdating = True
                Application.Cursor = xlDefault
                Exit Sub
            End If
                
            ' Obere Zeile einlesen
            For cnt = 0 To 29
                rangeArrayOne(cnt) = .Range(rangeRowItems(cnt) & rowNr - 1)
                ' Leere Formel explizit als "" speichern, um Fehler bei der Formelreparatur zu vermeiden
                If cnt = 3 And rangeArrayOne(cnt) = "0" Then rangeArrayOne(cnt) = ""
            Next cnt
    
            ' Untere/aktuelle Zeile einlesen
            For cnt = 0 To 29
                rangeArrayTwo(cnt) = .Range(rangeRowItems(cnt) & rowNr)
                ' Leere Formel explizit als "" speichern, um Fehler bei der Formelreparatur zu vermeiden
                If cnt = 3 And rangeArrayTwo(cnt) = "0" Then rangeArrayTwo(cnt) = ""
            Next cnt
    
            ' Zeilen in neuer Reihenfolge zur|fffd|ckschreiben
            ' Dabei den Tagesz|fffd|hler (weil Formel) auslassen
            For cnt = 0 To 29
                If rangeRowItems(cnt) <> "B" Then
                    .Range(rangeRowItems(cnt) & rowNr - 1) = rangeArrayTwo(cnt)
                    .Range(rangeRowItems(cnt) & rowNr) = rangeArrayOne(cnt)
                End If
            Next cnt
                
            ' Zeilennr. f|fffd|r Markierungsverschiebung (am Prozedurende)
            rowSource = rowNr
            rowDest = rowNr - 1
            
        Else
            ' Zeile nach unten verschieben
            ' bis Zeile 58, ansonsten Infomeldung
            If rowNr = 58 Then
                MsgBox "Zeile kann nur nach oben verschoben werden"
                cellCopyMode = False
                Application.ScreenUpdating = True
                Application.Cursor = xlDefault
                Exit Sub
            End If

            ' Aktuelle Zeile einlesen
            For cnt = 0 To 29
                rangeArrayOne(cnt) = .Range(rangeRowItems(cnt) & rowNr)
            Next cnt
    
            ' Darunterliegende Zeile einlesen
            For cnt = 0 To 29
                rangeArrayTwo(cnt) = .Range(rangeRowItems(cnt) & rowNr + 1)
            Next cnt
            
            ' Zeilen in neuer Reihenfolge zur|fffd|ckschreiben
            ' Dabei den Tagesz|fffd|hler (weil Formel) auslassen
            For cnt = 0 To 29
                If rangeRowItems(cnt) <> "B" Then
                    .Range(rangeRowItems(cnt) & rowNr) = rangeArrayTwo(cnt)
                    .Range(rangeRowItems(cnt) & rowNr + 1) = rangeArrayOne(cnt)
                End If
            Next cnt

            ' Zeilennr. f|fffd|r Markierungsverschiebung (am Prozedurende)
            rowSource = rowNr
            rowDest = rowNr + 1

        End If
        
        'ggf. manuelle Markierung |fffd|bertragen
        If selColIndex <> -4142 And selColIndex <> 19 Then
            'Alte Zeile (gem. Zebratabelle) markieren
            If rowSource Mod 2 > 0 Then
                .Range("B" & rowSource & ":BP" & rowSource).Interior.Color = RGB(234, 241, 221)
            Else
                .Range("B" & rowSource & ":BP" & rowSource).Interior.ColorIndex = 0
            End If
            
            'Manuelle Markierung |fffd|bertragen
            .Range("B" & rowDest & ":BP" & rowDest).Interior.ColorIndex = selColIndex
        End If
        
        'Verschobene Zelle markieren
        .Range("F" & rowDest).Select
    End With
    
    cellCopyMode = False
    Worksheets("Kurve").Protect Password:="blattschutz"
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
End Sub

Sub MediAutoSort()

    Dim copyTopLft As Integer
    Dim copyBtmRgt As Integer
    Dim lowPrioRow As Integer
    Dim fndRow As Integer
    
    Worksheets("Medikamente").Unprotect Password:="blattschutz"
    
    Application.ScreenUpdating = False
    Application.Cursor = xlWait
    
    On Error GoTo errHandler:
    
    With Worksheets("Medikamente")
        ' Sortierung
        .Range("I2:AL33").Sort Key1:=.Range("AM1"), Order1:=xlAscending, Key2:=.Range("AN1"), Order2:=xlAscending, Key3:=.Range("L1"), Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    
        ' Nach Kategorie 1 sotieren + freie Zeile
        If CInt(.Range("Q36")) > 0 Then
            If CInt(.Range("J35")) > 0 Then
                .Range("I" & .Range("J38") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J38")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J38") & ":AL" & .Range("J38")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 3 sotieren + freie Zeile
        If CInt(.Range("Q37")) > 0 Then
            If CInt(.Range("J35")) - 1 > 0 Then
                .Range("I" & .Range("J39") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J39")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J39") & ":AL" & .Range("J39")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 4 sotieren + freie Zeile
        If CInt(.Range("Q38")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J40") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J40")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J40") & ":AL" & .Range("J40")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 5 sotieren + freie Zeile
        If CInt(.Range("Q39")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J41") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J41")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J41") & ":AL" & .Range("J41")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 6 sotieren + freie Zeile
        If CInt(.Range("Q40")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J42") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J42")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J42") & ":AL" & .Range("J42")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 7 sotieren + freie Zeile
        If CInt(.Range("Q41")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J43") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J43")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J43") & ":AL" & .Range("J43")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 8 sotieren + freie Zeile
        If CInt(.Range("Q42")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J44") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J43")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J44") & ":AL" & .Range("J44")).ClearContents
            End If
        End If
        
        ' Nach Kategorie 9 sotieren + freie Zeile
        If CInt(.Range("Q43")) > 0 Then
            If CInt(.Range("J35")) - 2 > 0 Then
                .Range("I" & .Range("J45") & ":AL" & .Range("J47")).Copy
                .Range("I" & (CInt(.Range("J43")) + 1)).PasteSpecial Paste:=xlPasteValues
                .Range("I" & .Range("J45") & ":AL" & .Range("J45")).ClearContents
            End If
        End If
        
        
        
        ' Sonderfall niedrigster Priorit|fffd|t (z.B. Polyhexanid) -> ganz ans Ende, falls Platz
        If .Range("J35") - 3 > 0 Then
            lowPrioRow = 0
        
            ' Zeile ermitteln
            For fndRow = 2 To 33
                If .Range("AN" & fndRow) = "99" Then lowPrioRow = fndRow
            Next fndRow
                    
            ' Zeile ausschneiden & als untersten Eintrag einf|fffd|gen
            If lowPrioRow > 0 Then
                .Range("I" & lowPrioRow & ":AL" & lowPrioRow).Copy
                .Range("I31:AL31").PasteSpecial Paste:=xlPasteValues
                .Range("I" & lowPrioRow & ":AL" & lowPrioRow).ClearContents
            End If
        End If
        
        
        Application.ScreenUpdating = True
        Application.Cursor = xlDefault
    End With
    
    Exit Sub
    
errHandler:
    MsgBox "Beim Sortieren ist ein Fehler aufgetreten. Die Sortierung kann aufgrund unplausibler Datenangaben fehlerhaft sein.", vbCritical + vbOKOnly, "Fehler bei der Sortierung"
    Exit Sub
End Sub

Sub MediAutoSortImportData()

    Dim cnt As Integer
    Dim rowNr As Integer
    
    
    Dim rangeRowItemsSource
        rangeRowItemsSource = Array("A", "B", "D", "F", "R", "S", "U", "W", "Y", "AA", "AC", "AE", "AG", "AI", "AK", "AM", "AO", "AQ", "AS", "AU", _
                          "AW", "AY", "BA", "BC", "BE", "BG", "BI", "BK", "BM", "BO")

    Dim rangeRowItemsDestination
        rangeRowItemsDestination = Array("I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", _
                          "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL")


    Application.ScreenUpdating = False
    Application.Cursor = xlWait
    
    Worksheets("Medikamente").Unprotect Password:="blattschutz"
    
    ' Destination leeren
    Worksheets("Medikamente").Range("I2:AL33").ClearContents
    
    
    With Worksheets("Kurve")

        For rowNr = 29 To 58
            For cnt = 0 To 29
                ' Daten |fffd|betragen
                ' dabei leere Formelwerte ("0") ignorieren
                If .Range(rangeRowItemsSource(cnt) & rowNr) <> "0" Then
                    Worksheets("Medikamente").Range(rangeRowItemsDestination(cnt) & (rowNr - 27)) = .Range(rangeRowItemsSource(cnt) & rowNr)
                End If
            Next cnt
        Next rowNr
    
    End With
    
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault

    Worksheets("Medikamente").Protect Password:="blattschutz"
End Sub

Sub MediAutoSortReWriteData()

    Dim cnt As Integer
    Dim rowNr As Integer
    
    
    Dim rangeRowItemsDestination
        rangeRowItemsDestination = Array("A", "B", "D", "F", "R", "S", "U", "W", "Y", "AA", "AC", "AE", "AG", "AI", "AK", "AM", "AO", "AQ", "AS", "AU", _
                          "AW", "AY", "BA", "BC", "BE", "BG", "BI", "BK", "BM", "BO")

    Dim rangeRowItemsSource
        rangeRowItemsSource = Array("I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", _
                          "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL")


    Application.ScreenUpdating = False
    Application.Cursor = xlWait
    
    
    With Worksheets("Kurve")
        ' Schreiben in gesperrte Zellen erm|fffd|glichen
        Worksheets("Kurve").Unprotect Password:="blattschutz"
        
        ' Change-Ereignis der Zellen umgehen
        cellCopyMode = True
        
        ' Destination leeren
        .Range("A29:A59").ClearContents
        .Range("D29:BP58").ClearContents
                
        For rowNr = 29 To 58
            For cnt = 0 To 29
                ' Daten in Kurve zur|fffd|ckschreiben
                ' Tagesz|fffd|hler (in Spalte B) dabei auslassen, damit die Formeln erhalten bleiben
                If Not rangeRowItemsDestination(cnt) = "B" Then
                    .Range(rangeRowItemsDestination(cnt) & rowNr) = Worksheets("Medikamente").Range(rangeRowItemsSource(cnt) & rowNr - 27)
                End If
            Next cnt
        Next rowNr
            
    End With
    
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault

    ' Schreibschutz wieder setzen
    Worksheets("Kurve").Protect Password:="blattschutz"
End Sub

Sub MediAutoSortStart()

    ' Entsprechende Prozeduren aufrufen
    ' Zum Debuggen k|fffd|nnen die Prozeduren in "Medikamente" einzeln |fffd|ber Buttons aufgerufen werden
    If MsgBox("Die Medikation wird automatisch in der Reihenfolge Infusionen > AB > Antikoagulantien > Sedativa/Analgetika > IV Medikation > Sonstiges sortiert. Die Sortierung dauert einen Moment." & vbCrLf & vbCrLf & "Soll die automatische Sortierung durchgef|fffd|hrt werden?", vbQuestion + vbYesNo, "Medikation automatisch sortieren") = vbYes Then
        Call MediAutoSortImportData
        Call MediAutoSort
        Call MediAutoSortReWriteData
    End If
    
End Sub

Sub MediAllesLoeschen()

    Dim i As Integer
    Dim RangeToColor As String
    
    
    If MsgBox("Sie k|fffd|nnen alle Medikationsdaten (Medikamente, Applikationswege und -zeiten) auf einmal l|fffd|schen. Das ist z.B. sinnvoll, wenn Sie eine Formelreparatur vornehmen m|fffd|chten." & vbCrLf & vbCrLf & "Soll die Medikation jetzt komplett gel|fffd|scht werden?", vbYesNo + vbQuestion, "Medikation l|fffd|schen") = vbYes Then
        With Worksheets("Kurve")
            Application.ScreenUpdating = False
            .Unprotect Password:="blattschutz"
    
            ' Manuelle Markierungen l|fffd|schen & Zebratabelle restaurieren
            For i = 29 To 58
                RangeToColor = "B" & i & ":BP" & i
                
                If i Mod 2 > 0 Then
                    .Range(RangeToColor).Interior.Color = RGB(234, 241, 221)
                Else
                    .Range(RangeToColor).Interior.ColorIndex = 0
                End If
            Next i
            
            ' Medikation komplett l|fffd|schen
            .Range("A29:A59").ClearContents
            .Range("D29:BP59").ClearContents
            
            ' Standardeintr|fffd|ge restaurieren
            .Range("F59") = "SF / GF / Sonstiges (n. Ansage)"
            .Range("R59") = "frei"
            
            .Protect Password:="blattschutz"
            Application.ScreenUpdating = True
            
            .Range("F29").Activate
        End With
    End If
    
End Sub

Sub MediMarkierungAB()

    Dim RangeToColor As String
    RangeToColor = "B" & selectedMediRow & ":BP" & selectedMediRow
        
    Application.ScreenUpdating = False
        
    Worksheets("Kurve").Unprotect Password:="blattschutz"
    Worksheets("Kurve").Range(RangeToColor).Interior.Color = RGB(255, 204, 153)
    Worksheets("Kurve").Protect Password:="blattschutz"
    
    Application.ScreenUpdating = True
    
End Sub

Sub MediMarkierungAK()

    Dim RangeToColor As String
    RangeToColor = "B" & selectedMediRow & ":BP" & selectedMediRow
        
    Application.ScreenUpdating = False
    
    Worksheets("Kurve").Unprotect Password:="blattschutz"
    Worksheets("Kurve").Range(RangeToColor).Interior.Color = RGB(191, 191, 191)
    Worksheets("Kurve").Protect Password:="blattschutz"
    
    Application.ScreenUpdating = True
    
End Sub

Sub MediMarkierungKLW()

    Dim RangeToColor As String
    RangeToColor = "B" & selectedMediRow & ":BP" & selectedMediRow
        
    Application.ScreenUpdating = False
        
    Worksheets("Kurve").Unprotect Password:="blattschutz"
    Worksheets("Kurve").Range(RangeToColor).Interior.Color = RGB(255, 204, 204)
    Worksheets("Kurve").Protect Password:="blattschutz"
    
    Application.ScreenUpdating = True
    
End Sub

Sub MediMarkierungUNDO()

    Dim RangeToColor As String
    RangeToColor = "B" & selectedMediRow & ":BP" & selectedMediRow
        
    Application.ScreenUpdating = False
    Worksheets("Kurve").Unprotect Password:="blattschutz"
        
    ' Zebratabelle immer beibehalten
    If selectedMediRow Mod 2 > 0 Then
        Worksheets("Kurve").Range(RangeToColor).Interior.Color = RGB(234, 241, 221)
    Else
        Worksheets("Kurve").Range(RangeToColor).Interior.ColorIndex = 0
    End If
    
    Worksheets("Kurve").Protect Password:="blattschutz"
    Application.ScreenUpdating = True
    

End Sub

Sub FormenL|fffd|schen()

Dim shpShape As Shape
Dim shWorksheet As Worksheet
Dim txtShapeCount As Integer
    txtShapeCount = 0
    
    MsgBox "Formen und Worksheet bitte im Makro eintragen --> der Faulheit halber ;)"
    
    For Each shpShape In Worksheets("Xtras4").Shapes
        If shpShape.Name = "txtAnmeldenC92" Then
            txtShapeCount = txtShapeCount + 1
            shpShape.Delete
        End If
    Next


MsgBox "Es wurden insgesamt " & txtShapeCount & " Objekte gefunden"

End Sub
Attribute VB_Name = "Medikamentenexport"
Option Explicit

Sub TherapieInZwischenablageNeu()
  
  Dim n, max, LnCnt As Integer
  Dim sureToDoText As String
  Dim sureToDoQuestion As VbMsgBoxResult
  Dim copyResult As Boolean
  
  On Error GoTo ErrorHandler
  
  sureToDoText = "Infusionen, Medikamente, Perfusoren, Ern|fffd|hrung, Zug|fffd|nge und das Datum des letzten Stuhlgangs werden die Zwischenablage kopiert. Anhand der Tastenkombination STRG + V k|fffd|nnen die Daten in andere Anwendungen eingef|fffd|gt werden." & vbCrLf & vbCrLf & "Sollen die Therapiedaten jetzt in die Zwischenablage kopiert werden?"
  sureToDoQuestion = MsgBox(sureToDoText, vbQuestion & vbYesNoCancel, "Therapiedaten in die Zwischenablage kopieren ?")
    
  If sureToDoQuestion = vbYes Then
    Application.Cursor = xlWait
    Application.ScreenUpdating = False
    
    'Therapie in Variable einlesen
    'und anschlie|fffd|end an Zwischenablage |fffd|bergeben
    With Worksheets("Kurve")
        
        'Laufweite nach Stations festsetzen
        If .Range("CI157") = 1 Or Range("CI157") = 3 Then max = 58 Else max = 59
        
        
        '1. Alte Exporteinhalte l|fffd|schen
        Worksheets("Export").Range("B4:C80").ClearContents
        
        
        '2. Nur Infusionen
        '*****************
        LnCnt = 4
        Worksheets("Export").Cells(LnCnt, 2) = "Infusionen:"
        
        For n = 29 To max
            If .Cells(n, 6) > 0 And .Range("CA" & n) = "INF" Then
                'Leerzeilen ignorieren
                Worksheets("Export").Cells(LnCnt, 3) = Replace(CStr(.Cells(n, 6)), "(ml/d)", "") + ": " + CStr(Round(.Range("R" & n), 0)) + " ml pro Tag "
                LnCnt = LnCnt + 1
            End If
        Next n
        
        
        '3. Nur Perfusoren
        '*****************
        LnCnt = LnCnt + 1
        Worksheets("Export").Cells(LnCnt, 2) = "Perfusoren:"
        
        For n = 29 To max
            If .Cells(n, 6) > 0 And .Range("CA" & n) = "PERF" Then
                'Leerzeilen ignorieren
                Worksheets("Export").Cells(LnCnt, 3) = CStr(.Cells(n, 6)) + ", aktuelle LR: XX ml/h "
                LnCnt = LnCnt + 1
            End If
        Next n
        
        
        '4. Nur sonstige Medis
        '*********************
        LnCnt = LnCnt + 1
        Worksheets("Export").Cells(LnCnt, 2) = "Medikamente:"
        
        
        For n = 29 To max
            If .Cells(n, 6) > 0 And .Range("CA" & n) = 0 Then
                'Leerzeilen ignorieren
                If Len(Trim(.Cells(n, 6))) Then
                    Worksheets("Export").Cells(LnCnt, 3) = CStr(.Cells(n, 6))
                    LnCnt = LnCnt + 1
                End If
            End If
        Next n
        
        
        '5. Enterale Ern|fffd|hrung
        '*********************
        LnCnt = LnCnt + 1
        Worksheets("Export").Cells(LnCnt, 2) = "Enterale Ern|fffd|hrung:"
        If .Range("M63") > 0 Then
            Worksheets("Export").Cells(LnCnt, 3) = .Range("B63") & ": " & .Range("M63") & " ml pro Tag"
            LnCnt = LnCnt + 1
        End If
        
        If .Range("M64") > 0 Then
            Worksheets("Export").Cells(LnCnt, 3) = .Range("B64") & ": " & .Range("M64") & " ml pro Tag"
            LnCnt = LnCnt + 1
        End If
        
        If .Range("M65") > 0 Then
            Worksheets("Export").Cells(LnCnt, 3) = .Range("B65") & ": " & .Range("M65") & " ml pro Tag"
            LnCnt = LnCnt + 1
        End If
        
        
        '6. Katheter und Drainagen
        '*************************
        LnCnt = LnCnt + 1
        Worksheets("Export").Cells(LnCnt, 2) = "Katheter und Drainagen:"
        
        For n = 14 To 27
            If .Cells(n, 1) <> "" Then
                'Leerzeilen ignorieren
                Worksheets("Export").Cells(LnCnt, 3) = CStr(.Cells(n, 4)) & ": seit " & CStr(.Cells(n, 1))
                LnCnt = LnCnt + 1
            End If
        Next n
        
        
        '7. Stuhlgang
        '************
        LnCnt = LnCnt + 1
        Worksheets("Export").Cells(LnCnt, 2) = "Letzter Stuhlgang:"
        Worksheets("Export").Cells(LnCnt, 3) = .Range("M72") & " (vor " & CStr(.Range("Q72")) & " Tagen)"
        
                
        'Export Tabellenblatt sichtbar machen
        Worksheets("Export").Visible = True
                
        'Angaben aus Tabellenblatt in Zwischenablage
        copyResult = Worksheets("Export").Range(Worksheets("Export").Cells(2, 2), Worksheets("Export").Cells(Worksheets("Export").Cells(Rows.Count, 3).End(xlUp).row, 3)).Copy
    End With
    
    
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
  End If

    
  'Erfolgsmeldung
  If copyResult = True Then
    MsgBox "Die Therapiedaten wurden erfolgreich (als Tabelle) in die Zwischenablage kopiert und k|fffd|nnen |fffd|ber die Tastenkombination STRG+V in andere Dokumente eingebunden werden.", vbInformation + vbOKOnly, "Therapie erfolgreich exportiert"
  Else
    MsgBox "Beim Kopieren der Therapiedaten ist ein Fehler aufgetreten. Bitte versuche erneut, den Vorgang durchzuf|fffd|hren", vbCritical + vbOKOnly, "Fehler beim Exportieren"
  End If
  
  Exit Sub
  
ErrorHandler:
MsgBox "Fehlernummer: " & Err.Number & vbCrLf & "Fehlerbeschreibung: " & Err.Description, vbCritical, "Es ist ein Fehler aufgetreten"
  
End Sub

Sub VerlaufInZwischenablage()

  Dim rMax As Long
  Dim sureToDoText As String
  Dim sureToDoQuestion As VbMsgBoxResult
  
  On Error GoTo ErrorHandler
  
  sureToDoText = "Alle Inhalte des Tabellenblatts VERLAUF werden die Zwischenablage kopiert. Anhand der Tastenkombination STRG + V k|fffd|nnen die Daten in andere Anwendungen eingef|fffd|gt werden." & vbCrLf & vbCrLf & "Soll der Verlauf jetzt in die Zwischenablage kopiert werden?"
  sureToDoQuestion = MsgBox(sureToDoText, vbQuestion & vbYesNoCancel, "Verlauf in die Zwischenablage kopieren ?")
    
  If sureToDoQuestion = vbYes Then
    Application.Cursor = xlWait
  
    With Worksheets("Verlauf")
        ' Sollte an der Formel zum Ermitteln des Dokumentenendes manipuliert
        ' worden sein, wird sie einfach wieder eingesetzt
        If .Range("D1").HasFormula = False Then .Range("D1").FormulaLocal = "=VERGLEICH(""VERLAUFENDE"";B:B;)"
                
        rMax = .Range("D1")
        
        ' Stets ein Minimum an Daten kopieren
        If rMax > 3 Then rMax = rMax - 1
        
        .Range(.Cells(4, 2), .Cells(rMax, 3)).Copy
    End With

    Application.Cursor = xlDefault
  End If
  
  Exit Sub
  
ErrorHandler:
MsgBox "Fehlernummer: " & Err.Number & vbCrLf & "Fehlerbeschreibung: " & Err.Description, vbCritical, "Es ist ein Fehler aufgetreten"

End Sub

Attribute VB_Name = "Sonstiges"
Function Combine(WorkRng As Range, Optional Sign As String = ",") As String

    ' Generiert aus den Laboranordnungen auf Seite 2
    ' einen Textstring (zur Pr|fffd|fung auf Ver|fffd|nderungen vor dem n|fffd|chsten Druck)
    
    Dim Rng As Range
    Dim OutStr As String
    
    For Each Rng In WorkRng
        If Rng.Text <> "," Then
            OutStr = OutStr & Rng.Text & Sign
        End If
    Next
    
    Combine = Left(OutStr, Len(OutStr) - 1)

End Function

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "moveMediButton, 62, 0, MSForms, SpinButton"
Attribute VB_Control = "btnShowIntelliDropDown, 132, 1, MSForms, CommandButton"
Option Explicit

Private Function formatTime(ByVal plusTime As Integer, startTime As Integer) As String

    Dim actTime As Integer, clockCorrection As Integer
        actTime = startTime + plusTime
        clockCorrection = actTime - 24
        
    If actTime > 23 Then
        ' Umrechnen
        actTime = clockCorrection
    End If
    
    '|fffd|bergabe
    formatTime = str(actTime) + ":00"
    
End Function

Private Sub ReArrangeSiteTwo()
    
    ' Seite 2 stationsspezifisch anpassen
    ' Relevante Bereiche von vorhandenen Inhalten befreien

    With Worksheets("Kurve")
        'linker Bereich
        .Range("AD121:AW132").UnMerge
        .Range("AD121:AW132").ClearFormats
        .Range("AD121:AW132").ClearContents
        
        .Range("B133:AW148").UnMerge
        .Range("B133:AW148").ClearFormats
        .Range("B133:AW148").ClearContents
        
        'rechter Bereich
        .Range("AY78:BP131").UnMerge
        .Range("AY78:BP131").ClearFormats
        .Range("AY78:BP131").ClearContents
    End With
    
End Sub

Private Sub ReArrangeSiteFour()
    
    ' Seite 4 stationsspezifisch anpassen
    ' Relevante Bereiche von vorhandenen Inhalten befreien
    
    With Worksheets("Kurve")
        'linke Seite
        .Range("B226:BP295").UnMerge
        .Range("B226:BP295").ClearFormats
        .Range("B226:BP295").ClearContents
    End With
    
End Sub

Private Sub ReArrangeSiteOne(ByVal selStation As Integer)

    ' Seite 1 stationsspezifisch anpassen
    
    With Worksheets("Kurve")
        Select Case selStation
            Case 1, 3, 5, 7, 9
                'Lagerung und Weaning
                .Range("BR19") = .Range("CG2")
                .Range("BR20") = .Range("CH2")
                .Range("BR23") = .Range("CG91")
            Case 11, 13
                'Lagerung und Weaning
                .Range("BR19") = .Range("CG13")
                .Range("BR20") = .Range("CH7")
                .Range("BR23") = .Range("CG83")
        End Select
    End With
    
End Sub

Private Sub showIntelliDropDown(selRow As Integer, selCol As Integer)

    Dim MediName As String
    
        MediName = Worksheets("Kurve").Range("F" & selRow)
        
        
    ' Nur in MediSpalte nutzen
    If selRow > 28 And selRow < 59 And selCol > 1 And selCol < 68 Then
        
        With frmMediStandards
            '.Left = ActiveCell.Left
            '.Top = ActiveCell.Top
            '******* wird erstmal zentriert, weil die Positionierung
            '******* z.T. die Bearbeitung zerschie|fffd|t (wird dann au|fffd|erhalb des sichtbaren
            '******* Bereichs ausgegeben und verhindert eine weitere Bearbeitung
            
            ' falls kein Eintrag vorhanden ist
            If MediName = "0" Then MediName = ""
            
            .cmbMedis.Value = MediName
            .cmbMedis.SelStart = 0
            .cmbMedis.SelLength = Len(MediName)
            .cmbMedis.SetFocus
            
            ' aktive Medizelle zwischenspeichern
            .lblActiveCell = "F" & selRow
            
            .Show
        End With
        
    End If

    
End Sub

Private Sub btnShowIntelliDropDown_Click()

    ' Intelli-Drop-Down zeigen
    Call showIntelliDropDown(btnShowIntelliDropDown.TopLeftCell.row, btnShowIntelliDropDown.TopLeftCell.Column)
    
End Sub



Private Sub Worksheet_Activate()

    ' Aktuelle Startzeit der Kurve
    ' wichtig zur Anpassung der Applikationszeiten bei Verlegungen
    mediStartTime = Range("S1")
            
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal target As Range, Cancel As Boolean)

    
    Call showIntelliDropDown(target.row, target.Column)

    ' Formelanzeige verhindern
    Cancel = True
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal target As Excel.Range, Cancel As Boolean)
    
    Dim showMyMenue As Boolean
        showMyMenue = False
    
    On Error Resume Next
    
    If Intersect(target, Range("B29:BP59")) Is Nothing Then
        'AutoKreuze verhindern
        Application.CommandBars(cBarKontextName).Controls(2).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(3).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(4).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(5).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(6).Enabled = False
    Else
        If target.Column = 2 Or target.Column = 4 Or target.Column = 6 Or target.Column = 18 Then
            Application.CommandBars(cBarKontextName).Controls(1).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(2).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(3).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(4).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(5).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(6).Enabled = False
        Else
            Application.CommandBars(cBarKontextName).Controls(1).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(2).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(3).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(4).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(5).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(6).Enabled = True
            Application.CommandBars(cBarKontextName).Controls(9).Enabled = True
        End If
        
        'Falls ein Volumen angegeben wurde
        If Trim(Cells(target.row, 18)) > "" And IsNumeric(Cells(target.row, 18)) Then
            'Erfassung nicht, weil die automatische Berechnung sonst spinnt
            Application.CommandBars(cBarKontextName).Controls(1).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(2).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(3).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(4).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(5).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(6).Enabled = False
            Application.CommandBars(cBarKontextName).Controls(7).Enabled = False
        End If
        
        showMyMenue = True
    End If
    
    
    'Markierung und L|fffd|schen anpassen
    'wenn keine Medikament in aktueller Zeile, dann nix m|fffd|glich
    If Worksheets("Kurve").Cells(selectedMediRow, 6) > 0 Then
        Application.CommandBars(cBarKontextName).Controls(7).Enabled = True
        Application.CommandBars(cBarKontextName).Controls(9).Enabled = True
    Else
        
        Application.CommandBars(cBarKontextName).Controls(2).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(3).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(4).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(5).Enabled = False
        Application.CommandBars(cBarKontextName).Controls(6).Enabled = False
        
        Application.CommandBars(cBarKontextName).Controls(7).Enabled = True

    End If
    

    If showMyMenue = True Then
          cBarVorhanden = False
          For Each cBar In Application.CommandBars
            If cBar.Name = cBarKontextName Then
              cBarVorhanden = True
              Exit For
            End If
          Next
        
          If cBarVorhanden Then
            Application.CommandBars(cBarKontextName).ShowPopup
            Cancel = True
          End If
    End If
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Dim d
    Dim changeVerticalLine As Boolean
        changeVerticalLine = False
    
    'Bei Verschiebevorg|fffd|ngen nix unternehmen
    If cellCopyMode = True Then Exit Sub
    
    
    If Not Intersect(target, Range("F11:F60")) Is Nothing Then

        With ActiveSheet
            Select Case target.row
                Case 12
                    Call VerlegungMediZeiten(mediStartTime, Range("S1"))
                    mediStartTime = Range("S1")
                    changeVerticalLine = True
                    
                    Select Case Range("CI157")
                        Case 1  '-- C61
                            'Seite 4 einrichten
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("FW1:IK70").Copy destination:=Worksheets("Kurve").Range("B226")
                            
                            
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O3:AF64").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH3:CC18").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE3:CX13").Copy destination:=Worksheets("Kurve").Range("AD121")
                            
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(1)
                                                        
                        Case 3  '-- C62
                            'Seite 4 einrichten -> Doku + NeuroStatus
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("BW1:DF70").Copy destination:=Worksheets("Kurve").Range("B226")
                            Worksheets("Xtras4").Range("ES1:FU70").Copy destination:=Worksheets("Kurve").Range("AN226")
                            
                            .Range("AN226") = .Range("BX154") + "dienst"
                            .Range("AN250") = .Range("BX165") + "dienst"
                            .Range("AN273") = .Range("BX176") + "dienst"
                                
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O69:AF130").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH69:BH84").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE69:CX96").Copy destination:=Worksheets("Kurve").Range("AD121")
                                
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(3)
                                                    
                        Case 5  '-- C72C
                            'Seite 4 einrichten
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("FW1:IK70").Copy destination:=Worksheets("Kurve").Range("B226")
                            
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O3:AF64").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH3:CC18").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE3:CX13").Copy destination:=Worksheets("Kurve").Range("AD121")
                            
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(5)
                                                    
                        Case 7  '-- C72M
                            'Seite 4 einrichten
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("FW1:IK70").Copy destination:=Worksheets("Kurve").Range("B226")
                            
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O135:AF196").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH135:CC150").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE135:CX145").Copy destination:=Worksheets("Kurve").Range("AD121")
                            
                            Worksheets("Kurve").Range("B226") = Worksheets("Kurve").Range("AN226")
                            Worksheets("Kurve").Range("B250") = Worksheets("Kurve").Range("AN250")
                            Worksheets("Kurve").Range("B273") = Worksheets("Kurve").Range("AN273")
                        
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(7)
                                                    
                        Case 9  '-- C73
                            'Seite 4 einrichten -> 1x Doku, 1x Beatmungsprotokoll
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("FW1:IK70").Copy destination:=Worksheets("Kurve").Range("B226")
                            
                            .Range("BG227") = .Range("F1")
                        
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O3:AF64").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH3:CC18").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE3:CX13").Copy destination:=Worksheets("Kurve").Range("AD121")
                        
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(9)
                            
                        Case 11 '-- C82
                            'Seite 4 einrichten -> 2x Doku
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("A1:AJ70").Copy destination:=Worksheets("Kurve").Range("B226")
                            Worksheets("Xtras4").Range("ES1:FU70").Copy destination:=Worksheets("Kurve").Range("AN226")
                                
                            .Range("AN226") = .Range("BX154") + "dienst"
                            .Range("AN250") = .Range("BX165") + "dienst"
                            .Range("AN273") = .Range("BX176") + "dienst"
                            
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O201:AF262").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH201:CC216").Copy destination:=Worksheets("Kurve").Range("B133")

                            Worksheets("Kurve").Range("B226") = Worksheets("Kurve").Range("AN226")
                            Worksheets("Kurve").Range("B250") = Worksheets("Kurve").Range("AN250")
                            Worksheets("Kurve").Range("B273") = Worksheets("Kurve").Range("AN273")
                            
                            Worksheets("Kurve").Range("B227") = "|fffd|rtzliche Anordnungen"
                            Worksheets("Kurve").Range("B251") = "|fffd|rtzliche Anordnungen"
                            Worksheets("Kurve").Range("B274") = "|fffd|rtzliche Anordnungen"
                                                    
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(11)
                            
    
                        Case 13 '-- C92
                            'Seite 4 einrichten -> Doku + NeuroStatus
                            Application.CutCopyMode = False
                            .Unprotect Password:="blattschutz"
                            
                            Call ReArrangeSiteFour
                            Worksheets("Xtras4").Range("BW1:DF70").Copy destination:=Worksheets("Kurve").Range("B226")
                            Worksheets("Xtras4").Range("ES1:FU70").Copy destination:=Worksheets("Kurve").Range("AN226")
                            
                            .Range("AN226") = .Range("BX154") + "dienst"
                            .Range("AN250") = .Range("BX165") + "dienst"
                            .Range("AN273") = .Range("BX176") + "dienst"
                            
                            'Seite 2 einrichten
                            Call ReArrangeSiteTwo
                            Worksheets("Xtras2").Range("O267:AF328").Copy destination:=Worksheets("Kurve").Range("AY78")
                            Worksheets("Xtras2").Range("AH267:CC282").Copy destination:=Worksheets("Kurve").Range("B133")
                            Worksheets("Xtras2").Range("CE267:CX277").Copy destination:=Worksheets("Kurve").Range("AD121")
                            
                            'Seite 1 einrichten
                            Call ReArrangeSiteOne(13)
                            
                    End Select
                    
                    
                Case Else
                    If target.row > 28 And target.row < 61 Then
                        If target.Text = "" And target.HasFormula = False Then
                            Application.ScreenUpdating = False
                                                        
                            '.Protect Password:="blattschutz"
                            cellCopyMode = True
                            selectedMediRow = target.row
                            Call MediApplikationZeileLoeschen
                            cellCopyMode = False
                            Application.ScreenUpdating = True
                        End If
                    End If
            End Select
        End With
        
        
        If changeVerticalLine = True Then
            ' Horizontalen Orientierungsbalken ausrichten
            d = ActiveSheet.Range("R2")
            ActiveSheet.Unprotect Password:="blattschutz"
        
            If ActiveSheet.Range("R2") = 180 Then
                ActiveSheet.Shapes("OrientierungHorizontal").Top = 150
            End If
        
            If ActiveSheet.Range("R2") = 200 Then ActiveSheet.Shapes("OrientierungHorizontal").Top = 180
            If ActiveSheet.Range("R2") = 220 Then ActiveSheet.Shapes("OrientierungHorizontal").Top = 210
        
            ActiveSheet.Protect Password:="blattschutz"
        End If
        
        'ActiveSheet.Protect Password:="blattschutz"
                        
    End If
        
End Sub
Private Sub moveMediButton_SpinDown()

    Call moveMediRow(moveMediButton.TopLeftCell.row, "runter")
    
End Sub

Private Sub moveMediButton_SpinUp()

    Call moveMediRow(moveMediButton.TopLeftCell.row, "hoch")
    
End Sub


Private Sub Worksheet_SelectionChange(ByVal target As Range)
    
    ' Markierte Zeile f|fffd|r weitere Arbeiten zwischenspeichern
    selectedMediRow = target.row
    
    If target.row > 28 And target.row < 59 Then
    
        btnShowIntelliDropDown.Visible = True
        btnShowIntelliDropDown.Top = target.Top
    
        If IsEmpty(Range("F" & target.row)) Or Range("F" & target.row).Value = 0 Then
            ' kein Medikament eingetragen sein -> VerschiebeButton ausblenden
            moveMediButton.Visible = False
            Exit Sub
        End If
        
        ' Verschiebe-Buttons (SpinButton) in aktueller Zeile anzeigen
        moveMediButton.Left = 116
        moveMediButton.Top = ActiveCell.Top
        moveMediButton.Visible = True
        
    Else
        moveMediButton.Visible = False
        btnShowIntelliDropDown.Visible = False
    End If

End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal target As Range)

End Sub
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Verlegung"
Public mediStartTime As Integer

Sub VerlegungMediZeiten(ByVal timeOld, timeNew As Integer)

    Dim col1 As Integer, col2 As Integer, firstTimeOldCol As Integer
    Dim c As Range
        
    Application.ScreenUpdating = False
    Application.Cursor = xlWait
    
        
    With Worksheets("Verlegung")
        'Vorarbeit -> alte Inhalte l|fffd|schen
        .Range("A10:DW40").ClearContents
    
        '1. Einf|fffd|gepunkte finden
        '   und Inhalte in Hilfstabelle (an diese Punkte) kopieren
        col1 = Range("CA9").Column
        Set c = .Range(.Cells(9, 1), .Cells(9, 79)).Find(timeOld, LookIn:=xlValues, LookAt:=xlWhole)
            col1 = c.Column
            firstTimeOldCol = col1
        Set c = .Range(.Cells(9, col1), .Cells(9, 79)).Find(timeOld, LookIn:=xlValues, LookAt:=xlWhole)
            col2 = c.Column
    
        ' Medidaten in Hilfstabelle
        Worksheets("Kurve").Range("S34:BN59").Copy
        .Cells(15, col1).PasteSpecial Paste:=xlPasteValues
        .Cells(15, col2).PasteSpecial Paste:=xlPasteValues
    
    
    
        '2. Auslesepunkte finden
        '   und Inhalte in Kurve zur|fffd|ckkopieren
        Set c = .Range(.Cells(9, firstTimeOldCol), .Cells(9, 79)).Find(timeNew, LookIn:=xlValues, LookAt:=xlWhole)
            col1 = c.Column
            col2 = col1 + 47

        ' Medidaten aus Hilfstabelle in Kurve
        Worksheets("Kurve").Range("S34:BP59").ClearContents
        .Range(.Cells(15, col1), .Cells(40, col2)).Copy
        Worksheets("Kurve").Range("S34").PasteSpecial Paste:=xlPasteValues
        Worksheets("Kurve").Range("F12").Select
        
    End With
    
    
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
    
End Sub

Attribute VB_Name = "frmFormelReparatur"
Attribute VB_Base = "0{DD9CAD43-3DE6-4030-BE74-6086E4F2D811}{5C76A22A-B8C6-4F62-AF02-15BAB78AC4BA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdClose_Click()

    Unload Me
    
End Sub

Private Sub cmdFormelReparaturKomplett_Click()

    Call FormelReparatur.FormelReparatur("komplett")

End Sub

Private Sub cmdFormelReparaturSelektiv_Click()

    Call FormelReparatur.FormelReparatur("selektiv")

End Sub

Private Sub UserForm_Initialize()

    lblInfo1.Caption = "Beim |fffd|berschreiben von Zellen gehen die dahinter liegenden Vorgaben (Formeln)"
    lblInfo2.Caption = "verloren. Dieses Tool erm|fffd|glicht es, die Formeln wiederherzustellen."
    lblInfo3.Caption = "Sie k|fffd|nnen entweder alle Formeln oder nur die leerer Zellen reparieren."
    
End Sub
Attribute VB_Name = "frmMediApplikation"
Attribute VB_Base = "0{B302726C-1193-4F60-9940-9AB2B761F08D}{65D0D9D9-E71B-41BD-BB05-A575E0BEE317}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Function formatTime(ByVal time As Integer)
    
    ' Zu hohe Zahlen kappen
    Select Case time
        Case 25
            time = 1
        Case 26
            time = 2
        Case 27
            time = 3
        Case 28
            time = 4
        Case 29
            time = 5
        Case 30
            time = 6
        Case 31
            time = 7
        Case 32
            time = 8
        Case 33
            time = 9
        Case 34
            time = 10
        Case 35
            time = 11
        Case 36
            time = 12
        Case 37
            time = 13
        Case 38
            time = 14
        Case 39
            time = 15
        Case 40
            time = 16
        Case 41
            time = 17
        Case 42
            time = 18
        Case 43
            time = 19
        Case 44
            time = 20
    End Select


    ' F|fffd|hrende Nullen f|fffd|r die
    ' Label der Startzeiten im Erfassungsfenster
    If time < 10 Then
        formatTime = "0" & time & ":00"
    Else
        formatTime = time & ":00"
    End If
    
End Function

Private Sub cmdAutoSet12_Click()

    Call MediApplikationStdZwei
    
End Sub

Private Sub cmdAutoSet2_Click()

    Call MediApplikationStdZwoelf

End Sub

Private Sub cmdAutoSet3_Click()

    Call MediApplikationStdAcht

End Sub

Private Sub cmdAutoSet4_Click()

    Call MediApplikationStdSechs

End Sub

Private Sub cmdAutoSet6_Click()

    Call MediApplikationStdVier
    
End Sub

Private Sub cmdAutoSet8_Click()

    Call MediApplikationStdDrei

End Sub

Private Sub cmdWinClear_Click()

    txtTime1.Text = ""
    txtTime2.Text = ""
    txtTime3.Text = ""
    txtTime4.Text = ""
    txtTime5.Text = ""
    txtTime6.Text = ""
    txtTime7.Text = ""
    txtTime8.Text = ""
    txtTime9.Text = ""
    txtTime10.Text = ""
    txtTime11.Text = ""
    txtTime12.Text = ""
    txtTime13.Text = ""
    txtTime14.Text = ""
    txtTime15.Text = ""
    txtTime16.Text = ""
    txtTime17.Text = ""
    txtTime18.Text = ""
    txtTime19.Text = ""
    txtTime20.Text = ""
    txtTime21.Text = ""
    txtTime22.Text = ""
    txtTime23.Text = ""
    txtTime24.Text = ""
    
End Sub

Private Sub cmdWinSetDataToWorksheet_Click()

    Dim mediRow As Integer
        mediRow = ActiveCell.row
            
    If Trim(cBoxMedis.Value) = "" Then
        MsgBox "Ohne Angabe eines Medikaments k|fffd|nnen die Daten nicht in die Kurve |fffd|bernommen werden. Bitte w|fffd|hle ein Medikament aus.", vbCritical + vbOKOnly, "Fehlende Angabe"
        cBoxMedis.SetFocus
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    With Worksheets("Kurve")
        .Range("F" & mediRow) = cBoxMedis.Value
        .Range("S" & mediRow) = txtTime1.Text
        .Range("U" & mediRow) = txtTime2.Text
        .Range("W" & mediRow) = txtTime3.Text
        .Range("Y" & mediRow) = txtTime4.Text
        .Range("AA" & mediRow) = txtTime5.Text
        .Range("AC" & mediRow) = txtTime6.Text
        .Range("AE" & mediRow) = txtTime7.Text
        .Range("AG" & mediRow) = txtTime8.Text
        .Range("AI" & mediRow) = txtTime9.Text
        .Range("AK" & mediRow) = txtTime10.Text
        .Range("AM" & mediRow) = txtTime11.Text
        .Range("AO" & mediRow) = txtTime12.Text
        .Range("AQ" & mediRow) = txtTime13.Text
        .Range("AS" & mediRow) = txtTime14.Text
        .Range("AU" & mediRow) = txtTime15.Text
        .Range("AW" & mediRow) = txtTime16.Text
        .Range("AY" & mediRow) = txtTime17.Text
        .Range("BA" & mediRow) = txtTime18.Text
        .Range("BC" & mediRow) = txtTime19.Text
        .Range("BE" & mediRow) = txtTime20.Text
        .Range("BG" & mediRow) = txtTime21.Text
        .Range("BI" & mediRow) = txtTime22.Text
        .Range("BK" & mediRow) = txtTime23.Text
        .Range("BM" & mediRow) = txtTime24.Text
    End With
    
    Application.ScreenUpdating = True
    
    ' Fenster schlie|fffd|en
    Call cmdWinUnload_Click
    
End Sub

Private Sub cmdWinUnload_Click()

    Unload Me
    
End Sub

Private Sub Frame1_Click()

End Sub

Private Sub lblTime8_Click()

End Sub

Private Sub spnCalcStartTime_Change()

    ' Nahtlose |fffd|berg|fffd|nge
    If spnCalcStartTime.Value = 25 Then spnCalcStartTime.Value = 1
    If spnCalcStartTime.Value = 0 Then spnCalcStartTime.Value = 24

    ' Zeit |fffd|bernehmen
    txtCalcStartTime.Text = spnCalcStartTime.Value & ":00"
    
End Sub



Private Sub txtTime1_Change()

End Sub

Private Sub txtTime1_Enter()
 
    spnCalcStartTime.Value = Val(txtTime1.Tag)

End Sub



Private Sub txtTime10_Change()

End Sub

Private Sub txtTime10_Enter()
    
    spnCalcStartTime.Value = Val(txtTime10.Tag)


End Sub

Private Sub txtTime11_Change()

End Sub

Private Sub txtTime11_Enter()
    
    spnCalcStartTime.Value = Val(txtTime11.Tag)


End Sub

Private Sub txtTime12_Change()

End Sub

Private Sub txtTime12_Enter()
    
    spnCalcStartTime.Value = Val(txtTime12.Tag)


End Sub

Private Sub txtTime13_Change()

End Sub

Private Sub txtTime13_Enter()
    
    spnCalcStartTime.Value = Val(txtTime13.Tag)


End Sub

Private Sub txtTime14_Change()

End Sub

Private Sub txtTime14_Enter()
    
    spnCalcStartTime.Value = Val(txtTime14.Tag)


End Sub

Private Sub txtTime15_Change()

End Sub

Private Sub txtTime15_Enter()
    
    spnCalcStartTime.Value = Val(txtTime15.Tag)


End Sub

Private Sub txtTime16_Change()

End Sub

Private Sub txtTime16_Enter()
    
    spnCalcStartTime.Value = Val(txtTime16.Tag)

End Sub

Private Sub txtTime17_Change()

End Sub

Private Sub txtTime17_Enter()
    
    spnCalcStartTime.Value = Val(txtTime17.Tag)


End Sub

Private Sub txtTime18_Change()

End Sub

Private Sub txtTime18_Enter()
    
    spnCalcStartTime.Value = Val(txtTime18.Tag)


End Sub

Private Sub txtTime19_Change()

End Sub

Private Sub txtTime19_Enter()
    
    spnCalcStartTime.Value = Val(txtTime19.Tag)


End Sub

Private Sub txtTime2_Change()

End Sub

Private Sub txtTime2_Enter()
    
    spnCalcStartTime.Value = Val(txtTime2.Tag)

End Sub

Private Sub txtTime20_Change()

End Sub

Private Sub txtTime20_Enter()
    
    spnCalcStartTime.Value = Val(txtTime20.Tag)


End Sub

Private Sub txtTime21_Change()

End Sub

Private Sub txtTime21_Enter()
    
    spnCalcStartTime.Value = Val(txtTime21.Tag)


End Sub

Private Sub txtTime22_Change()

End Sub

Private Sub txtTime22_Enter()
    
    spnCalcStartTime.Value = Val(txtTime22.Tag)


End Sub

Private Sub txtTime23_Change()

End Sub

Private Sub txtTime23_Enter()
    
    spnCalcStartTime.Value = Val(txtTime23.Tag)


End Sub

Private Sub txtTime24_Change()

End Sub

Private Sub txtTime24_Enter()
    
    spnCalcStartTime.Value = Val(txtTime24.Tag)


End Sub


Private Sub txtTime3_Enter()
    
    spnCalcStartTime.Value = Val(txtTime3.Tag)


End Sub

Private Sub txtTime4_Enter()
    
    spnCalcStartTime.Value = Val(txtTime4.Tag)


End Sub

Private Sub txtTime5_Change()

End Sub

Private Sub txtTime5_Enter()
    
    spnCalcStartTime.Value = Val(txtTime5.Tag)


End Sub

Private Sub txtTime6_Enter()
    
    spnCalcStartTime.Value = Val(txtTime6.Tag)


End Sub

Private Sub txtTime7_Enter()
    
    spnCalcStartTime.Value = Val(txtTime7.Tag)


End Sub

Private Sub txtTime8_Enter()
    
    spnCalcStartTime.Value = Val(txtTime8.Tag)


End Sub

Private Sub txtTime9_Enter()
    
    spnCalcStartTime.Value = Val(txtTime9.Tag)


End Sub

Private Sub UserForm_Activate()
    
    Dim startTime As Integer
        startTime = CInt(Worksheets("Kurve").Range("S1"))
    
    
    'Vorgaben auslesen / einrichten
    
        'Medikament aus der Kurve holen
        With Worksheets("Kurve")
            If .Range("F" & ActiveCell.row) > 0 Then
                cBoxMedis.Value = .Range("F" & ActiveCell.row)
            Else
                cBoxMedis.Value = ""
            End If
            
            'Startzeit aus Kurve holen
            lblTime1.Caption = formatTime(startTime)
            txtTime1.Tag = timeCorrection(startTime)
            txtTime1.Text = .Range("S" & ActiveCell.row)
            
            lblTime2.Caption = formatTime(startTime + 1)
            txtTime2.Tag = timeCorrection(startTime + 1)
            txtTime2.Text = .Range("U" & ActiveCell.row)
            
            lblTime3.Caption = formatTime(startTime + 2)
            txtTime3.Tag = timeCorrection(startTime + 2)
            txtTime3.Text = .Range("W" & ActiveCell.row)
            
            lblTime4.Caption = formatTime(startTime + 3)
            txtTime4.Tag = timeCorrection(startTime + 3)
            txtTime4.Text = .Range("Y" & ActiveCell.row)
            
            lblTime5.Caption = formatTime(startTime + 4)
            txtTime5.Tag = timeCorrection(startTime + 4)
            txtTime5.Text = .Range("AA" & ActiveCell.row)
            
            lblTime6.Caption = formatTime(startTime + 5)
            txtTime6.Tag = timeCorrection(startTime + 5)
            txtTime6.Text = .Range("AC" & ActiveCell.row)
            
            lblTime7.Caption = formatTime(startTime + 6)
            txtTime7.Tag = timeCorrection(startTime + 6)
            txtTime7.Text = .Range("AE" & ActiveCell.row)
            
            lblTime8.Caption = formatTime(startTime + 7)
            txtTime8.Tag = timeCorrection(startTime + 7)
            txtTime8.Text = .Range("AG" & ActiveCell.row)
            
            lblTime9.Caption = formatTime(startTime + 8)
            txtTime9.Tag = timeCorrection(startTime + 8)
            txtTime9.Text = .Range("AI" & ActiveCell.row)
            
            lblTime10.Caption = formatTime(startTime + 9)
            txtTime10.Tag = timeCorrection(startTime + 9)
            txtTime10.Text = .Range("AK" & ActiveCell.row)
            
            lblTime11.Caption = formatTime(startTime + 10)
            txtTime11.Tag = timeCorrection(startTime + 10)
            txtTime11.Text = .Range("AM" & ActiveCell.row)
            
            lblTime12.Caption = formatTime(startTime + 11)
            txtTime12.Tag = timeCorrection(startTime + 11)
            txtTime12.Text = .Range("AO" & ActiveCell.row)
            
            lblTime13.Caption = formatTime(startTime + 12)
            txtTime13.Tag = timeCorrection(startTime + 12)
            txtTime13.Text = .Range("AQ" & ActiveCell.row)
            
            lblTime14.Caption = formatTime(startTime + 13)
            txtTime14.Tag = timeCorrection(startTime + 13)
            txtTime14.Text = .Range("AS" & ActiveCell.row)
            
            lblTime15.Caption = formatTime(startTime + 14)
            txtTime15.Tag = timeCorrection(startTime + 14)
            txtTime15.Text = .Range("AU" & ActiveCell.row)
            
            lblTime16.Caption = formatTime(startTime + 15)
            txtTime16.Tag = timeCorrection(startTime + 15)
            txtTime16.Text = .Range("AW" & ActiveCell.row)
            
            lblTime17.Caption = formatTime(startTime + 16)
            txtTime17.Tag = timeCorrection(startTime + 16)
            txtTime17.Text = .Range("AY" & ActiveCell.row)
            
            lblTime18.Caption = formatTime(startTime + 17)
            txtTime18.Tag = timeCorrection(startTime + 17)
            txtTime18.Text = .Range("BA" & ActiveCell.row)
            
            lblTime19.Caption = formatTime(startTime + 18)
            txtTime19.Tag = timeCorrection(startTime + 18)
            txtTime19.Text = .Range("BC" & ActiveCell.row)
            
            lblTime20.Caption = formatTime(startTime + 19)
            txtTime20.Tag = timeCorrection(startTime + 19)
            txtTime20.Text = .Range("BE" & ActiveCell.row)
            
            lblTime21.Caption = formatTime(startTime + 20)
            txtTime21.Tag = timeCorrection(startTime + 20)
            txtTime21.Text = .Range("BG" & ActiveCell.row)
            
            lblTime22.Caption = formatTime(startTime + 21)
            txtTime22.Tag = timeCorrection(startTime + 21)
            txtTime22.Text = .Range("BI" & ActiveCell.row)
            
            lblTime23.Caption = formatTime(startTime + 22)
            txtTime23.Tag = timeCorrection(startTime + 22)
            txtTime23.Text = .Range("BK" & ActiveCell.row)
            
            lblTime24.Caption = formatTime(startTime + 23)
            txtTime24.Tag = timeCorrection(startTime + 23)
            txtTime24.Text = .Range("BM" & ActiveCell.row)
            
            'Startzeit in SpinButton
            spnCalcStartTime.Value = CInt(Left(lblTime1.Caption, 2))
        
        End With
    
    'Mediliste fokussieren
    cBoxMedis.SelStart = 0
    cBoxMedis.SelLength = Len(cBoxMedis.Value)
    cBoxMedis.SetFocus
    
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
    
    Dim counter As Integer
        counter = 2
    
    ' Medikamente einlesen
    With Worksheets("Medikamente")
        Do While .Cells(counter, 1) <> ""
            cBoxMedis.AddItem (.Cells(counter, 1))
            counter = counter + 1
        Loop
    End With

    
End Sub

Attribute VB_Name = "frmMediStandards"
Attribute VB_Base = "0{18C4E81C-0AF4-431F-8ED4-F6BC872E3BCC}{834C1A74-116D-4E34-A790-C4F34EC5C6DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cmbMedis_Change()

End Sub

Private Sub cmbMedis_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

    If KeyCode = 13 Then
        ' Daten bei ENTER direkt |fffd|bernehmen
        cmdOK_Click
    End If
    
End Sub

Private Sub cmdCancel_Click()

    Unload Me
    
End Sub

Private Sub cmdHelp_Click()

    Call HilfeAnzeigen
    
End Sub


Private Sub cmdOK_Click()

    ' Angaben in Kurve |fffd|bernehmen
    Worksheets("Kurve").Range(lblActiveCell.Caption) = cmbMedis.Value
    Worksheets("Kurve").Range(lblActiveCell.Caption).Select
    
    Unload Me
    
End Sub

Private Sub UserForm_Initialize()
 
    Dim counter As Integer
        counter = 2
    
    ' Medikamente einlesen
    With Worksheets("Medikamente")
        Do While .Cells(counter, 1) <> ""
            cmbMedis.AddItem (.Cells(counter, 1))
            counter = counter + 1
        Loop
    End With
    
    
    
End Sub

Attribute VB_Name = "mkCutCopy"
'======================================================================================
'=================   Makros zum Unterdr|fffd|cken von Cut-Befehlen         =================
'======================================================================================
'
' modifiziert nach http://schmidt-net.de/files/30038.htm
'
' Aufruf mit:
' Private Sub Workbook_Activate()
'   CutCopyOff
' End Sub
' Private Sub Workbook_Deactivate()
'   CutCopyOn
' End Sub
'
' bzw. entsprechend worksheet_activate() etc.

Sub mkCutOff() ' schaltet nur Cut aus, kopieren geht um Bez|fffd|ge zu sch|fffd|tzen reciht Cut)
  CutCopyOnOff 21, False 'Men|fffd|befehl "Ausschneiden"
  Application.OnKey "^x", "" 'Ausschneiden mit "Strg + X"
  Application.OnKey "+{DEL}", " " 'Ausschneiden mit "Umsch + Entf"
  Application.CellDragAndDrop = False 'Ziehen mit der Maus
End Sub
Sub mkCutOn()
  CutCopyOnOff 21, True
  Application.OnKey "^x"
  Application.OnKey "+{DEL}"
  Application.CellDragAndDrop = True
End Sub
Sub mkCutCopyOff() 'Originalprozedur, der Vollst|fffd|ndigkeit halber
  CutCopyOnOff 19, False 'Men|fffd|befehl "Kopieren"
  CutCopyOnOff 21, False 'Men|fffd|befehl "Ausschneiden"
  CutCopyOnOff 22, False 'Men|fffd|befehl "Einf|fffd|gen"
  CutCopyOnOff 755, False 'Men|fffd|befehl "Inhalte einf|fffd|gen"
  Application.OnKey "^c", "" 'Kopieren mit "Strg + C"
  Application.OnKey "^x", "" 'Ausschneiden mit "Strg + X"
  Application.OnKey "^v", "" 'Einf|fffd|gen mit "Strg + V"
  Application.OnKey "^{INSERT}", "" 'Kopieren mit "Strg + Einfg"
  Application.OnKey "+{DEL}", "" 'Ausschneiden mit "Umsch + Entf"
  Application.OnKey "+{INSERT}", "" 'Einf|fffd|gen mit "Umsch + Einfg"
  Application.CellDragAndDrop = False 'Ziehen mit der Maus
End Sub
Sub mkCutCopyOn() 'Originalprozedur
  CutCopyOnOff 19, True
  CutCopyOnOff 21, True
  CutCopyOnOff 22, True
  CutCopyOnOff 755, True
  Application.OnKey "^c"
  Application.OnKey "^x"
  Application.OnKey "^v"
  Application.OnKey "^{INSERT}"
  Application.OnKey "+{DEL}"
  Application.OnKey "+{INSERT}"
  Application.CellDragAndDrop = True
End Sub

Private Sub CutCopyOnOff(Id As Variant, AnAus As Boolean)
Dim cb As CommandBar
Dim ctl As CommandBarControl
  For Each cb In Application.CommandBars
    Set ctl = cb.FindControl(Id:=Id, Recursive:=True)
    If Not ctl Is Nothing Then ctl.Enabled = AnAus
  Next
End Sub


' InQuest injected base64 decoded content
' z{-z
' z)^.

INQUEST-PP=macro
