Attribute VB_Name = "AmountStore"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Storage As Collection

Private Sub Class_Initialize()
    Set Storage = New Collection
End Sub

Private Sub Class_Terminate()
    Set Storage = Nothing
End Sub

Public Sub Add(ByVal ID As String, ByVal Amount As Currency)
    Dim ExistingAmount As Currency
    On Error GoTo ErrorHandler
    ExistingAmount = Storage.item(ID)
    On Error GoTo 0
    Storage.Remove (ID)
    Amount = Amount + ExistingAmount
ErrorHandler:
    Storage.Add item:=Amount, key:=ID
End Sub

Public Sub Remove(ByVal ID As String)
    On Error Resume Next
    Storage.Remove (ID)
End Sub

Public Function GetAmount(ByVal ID As String) As Currency
    On Error GoTo ErrorHandler
    GetAmount = Storage.item(ID)
    Exit Function
ErrorHandler:
    GetAmount = 0
End Function

Public Function GetTotal() As Currency
    Dim i As Integer
    For i = 1 To Storage.count
        GetTotal = GetTotal + Storage.item(i)
    Next i
End Function






Attribute VB_Name = "Amounts"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Private FFedYearPlan As Currency
'Private FFedDatePlan As Currency
'Private FFedExec As Currency

Private FSubjYearPlan As Currency
Private FSubjDatePlan As Currency
Private FSubjExec As Currency

Private FLocYearPlan As Currency
Private FLocDatePlan As Currency
Private FLocExec As Currency

Private Sub Class_Initialize()
    'FFedYearPlan = 0
    'FFedDatePlan = 0
    'FFedExec = 0

    FSubjYearPlan = 0
    FSubjDatePlan = 0
    FSubjExec = 0

    FLocYearPlan = 0
    FLocDatePlan = 0
    FLocExec = 0
End Sub

Public Sub AddAmounts(Amt As Amounts)
  Add Amt.GetSubjYearPlan, Amt.GetLocYearPlan, Amt.GetSubjDatePlan, Amt.GetLocDatePlan, Amt.GetSubjExec, Amt.GetLocExec
End Sub

Public Function isNull() As Boolean
    isNull = False
'       FFedYearPlan = 0 And FFedDatePlan = 0 And FFedExec = 0 And _

    If FSubjYearPlan = 0 And FSubjDatePlan = 0 And FSubjExec = 0 And _
       FLocYearPlan = 0 And FLocDatePlan = 0 And FLocExec = 0 _
    Then
        isNull = True
    End If
End Function

'Public Sub AddFedYearPlan(ByVal Amount As Currency)
'    FFedYearPlan = FFedYearPlan + Amount
'End Sub

'Public Sub AddFedDatePlan(ByVal Amount As Currency)
'    FFedDatePlan = FFedDatePlan + Amount
'End Sub

'Public Sub AddFedExec(ByVal Amount As Currency)
'    FFedExec = FFedExec + Amount
'End Sub


Public Sub AddSubjYearPlan(ByVal Amount As Currency)
    FSubjYearPlan = FSubjYearPlan + Amount
End Sub

Public Sub AddSubjDatePlan(ByVal Amount As Currency)
    FSubjDatePlan = FSubjDatePlan + Amount
End Sub

Public Sub AddSubjExec(ByVal Amount As Currency)
    FSubjExec = FSubjExec + Amount
End Sub

Public Sub AddLocYearPlan(ByVal Amount As Currency)
    FLocYearPlan = FLocYearPlan + Amount
End Sub

Public Sub AddLocDatePlan(ByVal Amount As Currency)
    FLocDatePlan = FLocDatePlan + Amount
End Sub

Public Sub AddLocExec(ByVal Amount As Currency)
    FLocExec = FLocExec + Amount
End Sub

'Public Sub AddFed(ByVal YearPlan, ByVal DatePlan, ByVal Exec As Currency)
'    AddFedYearPlan (YearPlan)
'    AddFedDatePlan (DatePlan)
'    AddFedExec (Exec)
'End Sub

Public Sub AddSubj(ByVal yearPlan, ByVal datePlan, ByVal exec As Currency)
    AddSubjYearPlan (yearPlan)
    AddSubjDatePlan (datePlan)
    AddSubjExec (exec)
End Sub

Public Sub AddLoc(ByVal yearPlan, ByVal datePlan, ByVal exec As Currency)
    AddLocYearPlan (yearPlan)
    AddLocDatePlan (datePlan)
    AddLocExec (exec)
End Sub

Public Sub Add(ByVal SubjYearPlan, ByVal LocYearPlan, _
               ByVal SubjDatePlan, ByVal LocDatePlan, _
               ByVal SubjExec, ByVal LocExec As Currency)
    AddSubj SubjYearPlan, SubjDatePlan, SubjExec
    AddLoc LocYearPlan, LocDatePlan, LocExec
End Sub

'Public Sub Add(ByVal FedYearPlan, ByVal SubjYearPlan, ByVal LocYearPlan, _
'               ByVal FedDatePlan, ByVal SubjDatePlan, ByVal LocDatePlan, _
'               ByVal FedExec, ByVal SubjExec, ByVal LocExec As Currency)
'    AddFed FedYearPlan, FedDatePlan, FedExec
'    AddSubj SubjYearPlan, SubjDatePlan, SubjExec
'    AddLoc LocYearPlan, LocDatePlan, LocExec
'End Sub


Public Function GetFedYearPlan() As Currency
    GetFedYearPlan = FSubjYearPlan + FLocYearPlan
End Function

Public Function GetFedDatePlan() As Currency
    GetFedDatePlan = FSubjDatePlan + FLocDatePlan
End Function

Public Function GetFedExec() As Currency
    GetFedExec = FSubjExec + FLocExec
End Function

Public Function GetSubjYearPlan() As Currency
    GetSubjYearPlan = FSubjYearPlan
End Function

Public Function GetSubjDatePlan() As Currency
    GetSubjDatePlan = FSubjDatePlan
End Function

Public Function GetSubjExec() As Currency
    GetSubjExec = FSubjExec
End Function

Public Function GetLocYearPlan() As Currency
    GetLocYearPlan = FLocYearPlan
End Function

Public Function GetLocDatePlan() As Currency
    GetLocDatePlan = FLocDatePlan
End Function

Public Function GetLocExec() As Currency
    GetLocExec = FLocExec
End Function








Attribute VB_Name = "DetailAmtStore"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Storage As Collection
Private currID As String
Private currData As DetailData
Private keyArray(50) As String

Private Sub Class_Initialize()
  Set Storage = New Collection
  currID = ""
  For i = 1 To 50
    keyArray(i) = ""
  Next i
End Sub

Private Sub Class_Terminate()
  Set Storage = Nothing
End Sub

Public Sub Add(ByVal CodeID As String, _
               ByVal codeName As String, _
               ByVal amtSubj As Currency, _
               ByVal amtLocal As Currency)
               
  Dim dtData As DetailData
    
  On Error GoTo ErrorHandler
  Set dtData = Storage.item(CodeID)
  On Error GoTo 0
  Storage.Remove (CodeID)
  dtData.AmountSubj = dtData.AmountSubj + amtSubj
  dtData.AmountLocal = dtData.AmountLocal + amtLocal
  Storage.Add item:=dtData, key:=CodeID
  Exit Sub
ErrorHandler:
  
  Set dtData = New DetailData
  dtData.AmountSubj = amtSubj
  dtData.AmountLocal = amtLocal
  dtData.Code = CodeID
  dtData.codeName = codeName
  Storage.Add item:=dtData, key:=CodeID
  keyArray(Storage.count) = CodeID
End Sub

Public Sub Remove(ByVal ID As String)
    On Error Resume Next
    Storage.Remove (ID)
    currID = ""
End Sub

Public Function GetAmountSubj(ByVal ID As String) As Currency
  If currID <> ID Then
    On Error GoTo ErrorHandler
    Set currData = Storage.item(ID)
    currID = ID
  End If
  
  GetAmountSubj = currData.AmountSubj
  Exit Function
ErrorHandler:
  GetAmountSubj = 0
End Function

Public Function GetAmountLocal(ByVal ID As String) As Currency
  If currID <> ID Then
    On Error GoTo ErrorHandler
    Set currData = Storage.item(ID)
    currID = ID
  End If
  
  GetAmountLocal = currData.AmountLocal
  Exit Function
ErrorHandler:
  GetAmountLocal = 0
End Function

Public Function GetAmountCons(ByVal ID As String) As Currency
  If currID <> ID Then
    On Error GoTo ErrorHandler
    Set currData = Storage.item(ID)
    currID = ID
  End If
  
  GetAmountCons = currData.AmountCons()
  Exit Function
ErrorHandler:
  GetAmountCons = 0
End Function


Public Function GetCodeName(ByVal ID As String) As String
  If currID <> ID Then
    On Error GoTo ErrorHandler
    Set currData = Storage.item(ID)
    currID = ID
  End If
  
  GetCodeName = currData.codeName
  Exit Function
ErrorHandler:
  GetCodeName = ""
End Function

Public Function GetCode(ByVal ID As String) As String
  If currID <> ID Then
    On Error GoTo ErrorHandler
    Set currData = Storage.item(ID)
    currID = ID
  End If
  
  GetCode = currData.Code
  Exit Function
ErrorHandler:
  GetCode = ""
End Function

Public Function getCount() As Integer
  getCount = Storage.count
End Function

Public Function getKey(ByVal inx As Integer) As String
  getKey = keyArray(inx)
End Function



Attribute VB_Name = "DetailData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Code As String
Public codeName As String
Public AmountSubj As Currency
Public AmountLocal As Currency

Public Function AmountCons() As Currency
  AmountCons = AmountSubj + AmountLocal
End Function


Attribute VB_Name = "Engine"
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| v 4.0.3
'(AMG) 14/09/2004 - |fffd||fffd||fffd||fffd||fffd||fffd| For Each |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ReportCodeArea
'(AMG) 15/02/2005 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
'(AMG) 04/07/2005 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd|
'(AMG) 08/07/2005 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'(LARGO) 13/12/2006 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Option Explicit

Private Const VER_ENGINE As String = "4.0.3"

Option Base 0

Type RefTask
    CodeType1 As String
    CodeType2 As String
    CodeMask1 As String
    CodeMask2 As String
    CodeColumn1 As Integer
    CodeColumn2 As Integer
    AmountColumn As Integer
    CodeRowColumn1 As Integer
    CodeRowColumn2 As Integer
End Type

Type ComplexCode
    LeftPart As String
    MidPart As String
    RightPart As String
    isValid As Boolean
End Type

Private wbRepBook As Workbook
Private wsReport As Worksheet
Private wsReference As Worksheet
Private elIncome As MSXML2.IXMLDOMElement
Private elIncomeSpecial As MSXML2.IXMLDOMElement
Private elExpense As MSXML2.IXMLDOMElement
Private elSpecial As MSXML2.IXMLDOMElement
Private elExtSrc As MSXML2.IXMLDOMElement
Private elIntSrc As MSXML2.IXMLDOMElement
Private elCDebts As MSXML2.IXMLDOMElement
Private elDDebts As MSXML2.IXMLDOMElement
Private elKDCustomMask As MSXML2.IXMLDOMElement
Private elKfsrRef As MSXML2.IXMLDOMElement
Private elCodeMapInc As MSXML2.IXMLDOMElement
Private elCodeMapExp As MSXML2.IXMLDOMElement
Private elCodeMapSrc As MSXML2.IXMLDOMElement
Private sKfsrMask As String
Private sKesMask As String
Private sKdMask As String
Private sKiMask As String
Private sKadmMask As String
Private sFoName As String
Private bDoReport As Boolean
Private bDoReference As Boolean
Private sRepDate As String
Private bShowAll As Boolean
Private bConsMode As Boolean
Private bNotFinalizeReport As Boolean
Private ds As String
Private sRepSheetName As String
Private sRefSheetName As String
Private divider As Long
Private sVerModule As String
Private sVerAZKClient As String
Private bCheckEnginerVer As Boolean
Private bRound2Int As Boolean
Private bSaveXML As Boolean
Private sXMLpath As String
Private sEDI As String
Private bBudgetRestRotate As Boolean
'Private sDirectorName As String
'Private sAccountantName As String
Private sObjectName As String
Private bRefViewAssign As Boolean

Private colFedYearPlan As Integer
Private colSubjYearPlan As Integer
Private colLocYearPlan As Integer

Private colFedDatePlan As Integer
Private colSubjDatePlan As Integer
Private colLocDatePlan As Integer

Private colFedExec As Integer
Private colSubjExec As Integer
Private colLocExec As Integer

Private Const C_A_N_INCOME As String = "INCOMECODEAREA"
Private Const C_A_N_EXPENSE As String = "EXPENSECODEAREA"
Private Const C_A_N_EXPENSE_DET As String = "EXPENSE_DET_CODEAREA"
Private Const C_A_N_INTSRC As String = "INTSRCCODEAREA"
Private Const C_A_N_EXTSRC As String = "EXTSRCCODEAREA"
Private Const C_A_N_CREDITDEBTS As String = "CDEBTSCODEAREA"
Private Const C_A_N_DEBITDEBTS As String = "DDEBTSCODEAREA"
Private Const C_A_N_REF_PART4 As String = "PART4CODEAREA"
Private Const C_A_N_REF_PART5 As String = "PART5CODEAREA"
Private Const A_N_FO As String = "FO"
'Private Const A_N_DIRECTOR As String = "DIRECTOR"
'Private Const A_N_ACCOUNTANT As String = "ACCOUNTANT"
Private Const signTag = "SIGN"
Private Const A_N_REPDATE As String = "REPDATE"
Private Const A_N_YEARPLAN_F As String = "YPC"
Private Const A_N_YEARPLAN_S As String = "YPS"
Private Const A_N_YEARPLAN_L As String = "YPL"
Private Const A_N_DATEPLAN_F As String = "DPC"
Private Const A_N_DATEPLAN_S As String = "DPS"
Private Const A_N_DATEPLAN_L As String = "DPL"
Private Const A_N_FACT_F As String = "FC"
Private Const A_N_FACT_S As String = "FS"
Private Const A_N_FACT_L As String = "FL"
Private Const A_N_CODE As String = "CODE"

Private Const A_N_CODE1 As String = "CODE1"
Private Const A_N_CODE2 As String = "CODE2"
Private Const A_N_CODEROW1 As String = "CODEROW1"
Private Const A_N_CODEROW2 As String = "CODEROW2"

Private Const A_FO_TYPE As String = "FO_TYPE"


Sub ReadFromFile(FileName As String, Mode As Integer, Value As String)
    Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0
    Dim fs, f, ts, s
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    'fs.CreateTextFile fileName            'Create a file
    Set f = fs.GetFile(FileName)
    Set ts = f.OpenAsTextStream(Mode, TristateUseDefault)
    
    Select Case Mode
     Case 1
        Value = ts.ReadAll
     Case 2
        ts.Write Value
'     Case ForAppending
    End Select
    
    ts.Close

End Sub

Sub SaveToFile(FileName As String, Value As String)
    Dim fs, a
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set a = fs.CreateTextFile(FileName, True)
    a.WriteLine (Value)
    a.Close
End Sub

Sub Test()
    Dim s As String
    
    ReadFromFile "E:\azk10\MonthReport.XML", 1, s
    
'    RunReport "e:\azk10\Query\Template\", S

End Sub

Sub RunReport(wb As Workbook, XML As String)
Dim doc As New MSXML2.DOMDocument
    
    On Error GoTo ErrorHandler
    Init
    
    If doc.loadXML(XML) Then
      'MsgBox (xml)
      'Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      InitReport doc.documentElement
      Set wbRepBook = wb
      
      If bSaveXML Then
        SaveToFile sXMLpath, XML
        'ReadFromFile sXMLpath, 2, XML
      End If
      
      If bDoReport Then
        ProcessReport doc
      End If
      
      If bDoReference Then
        ProcessReference doc
      End If
    Else
      Err.Raise vbObjectError + 599, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML"
    End If
    
    If Not bNotFinalizeReport Then
      EndReport
    End If
    
    Exit Sub
ErrorHandler:
    ShowError
End Sub

Function OpenTemplate(FileName As String) As Workbook
    With Application
      .Workbooks.Open (FileName)
      .Calculation = xlCalculationAutomatic
      Set OpenTemplate = ActiveWorkbook
    End With
End Function

Sub Init()
    With Application
      .WindowState = xlMaximized
      .Interactive = False ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
      .ScreenUpdating = False
      .DisplayAlerts = False
      .Visible = True
      .StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      .EnableCancelKey = xlErrorHandler
      ds = .International(xlDecimalSeparator)
    End With
End Sub

Function GetBoolean(Elem As MSXML2.IXMLDOMElement, AttrName As String)
    If Elem.getAttribute(AttrName) = "TRUE" Then
      GetBoolean = True
    Else
      GetBoolean = False
    End If
End Function

Function GetCurrency(Elem As MSXML2.IXMLDOMElement, AttrName As String) As Currency
   Dim s As Variant
   s = Elem.getAttribute(AttrName)
   If Not isNull(s) And (s <> "") Then
     GetCurrency = StrToCur(s)
   End If
End Function

Function GetString(Elem As MSXML2.IXMLDOMElement, AttrName As String) As String
    On Error GoTo Err
    GetString = Elem.getAttribute(AttrName)
    Exit Function
Err:
    GetString = ""
End Function

Sub InitReport(Elem As MSXML2.IXMLDOMElement)
    'Dim sTemplateName As String
    Dim list As MSXML2.IXMLDOMNodeList
  
    sVerAZKClient = GetString(Elem, "VER_AZKCLIENT")
    sVerModule = GetString(Elem, "VER_MODULE")
    bCheckEnginerVer = GetBoolean(Elem, "CHECK_ENGINE_VER")
    
    sXMLpath = GetString(Elem, "XML_PATH")
    bSaveXML = GetBoolean(Elem, "SAVE_XML")
    
    'sTemplateName = GetString(Elem, "TEMPLATE_NAME")
    sRepSheetName = GetString(Elem, "REPORTSHEET_NAME")
    sRefSheetName = GetString(Elem, "REFERENCESHEET_NAME")
    sFoName = GetString(Elem, "FO")
    sRepDate = GetString(Elem, "REP_DATE")
    bDoReport = GetBoolean(Elem, "DO_REPORT")
    bDoReference = GetBoolean(Elem, "DO_REFERENCE")
    bShowAll = GetBoolean(Elem, "ALLROWS")
    sKfsrMask = GetString(Elem, "KFSR_MASK")
    sKesMask = GetString(Elem, "KES_MASK")
    sKdMask = GetString(Elem, "KD_MASK")
    sKiMask = GetString(Elem, "KI_MASK")
    sKadmMask = GetString(Elem, "KADM_MASK")
    bConsMode = GetBoolean(Elem, "CONS_MODE")
    bNotFinalizeReport = GetBoolean(Elem, "NOT_FINALIZE_REPORT")
    divider = CLng(GetString(Elem, "DIVIDER"))
    bBudgetRestRotate = GetBoolean(Elem, "BUDGET_REST_ROTATE")
    'sDirectorName = GetString(elem, "DIRECTOR_NAME")
    'sAccountantName = GetString(elem, "ACCOUNTANT_NAME")
    sObjectName = GetString(Elem, "OBJECT")
    bRefViewAssign = GetBoolean(Elem, "REF_VIEW_ASSIGN")
    
    If divider = "1" Then
      sEDI = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd|."
    ElseIf divider = "1000" Then
      sEDI = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd|.|fffd||fffd||fffd|."
    ElseIf divider = "1000000" Then
      sEDI = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd|.|fffd||fffd||fffd|."
    End If

    
    bRound2Int = GetBoolean(Elem, "ROUND2INT")
      
    'Set list = Elem.getElementsByTagName("KD")
    'If list.Length > 0 Then
    '  Set elKDCustomMask = list.item(0)
    'End If
    
    Set list = Elem.getElementsByTagName("INCOME")
    If list.Length > 0 Then
      Set elIncome = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("INCOME_SPECIAL")
    If list.Length > 0 Then
      Set elIncomeSpecial = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("EXPENSE")
    If list.Length > 0 Then
      Set elExpense = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("INTSOURCE")
    If list.Length > 0 Then
      Set elIntSrc = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("EXTSOURCE")
    If list.Length > 0 Then
      Set elExtSrc = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("REF_SPECIAL")
    If list.Length > 0 Then
      Set elSpecial = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("CREDITDEBTS")
    If list.Length > 0 Then
      Set elCDebts = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("DEBITDEBTS")
    If list.Length > 0 Then
      Set elDDebts = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("KFSR_REF")
    If list.Length > 0 Then
      Set elKfsrRef = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("EXP_MAP")
    If list.Length > 0 Then
      Set elCodeMapExp = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("INC_MAP")
    If list.Length > 0 Then
      Set elCodeMapInc = list.item(0)
    End If
    
    Set list = Elem.getElementsByTagName("SRC_MAP")
    If list.Length > 0 Then
      Set elCodeMapSrc = list.item(0)
    End If
    
'    Set wbRepBook = OpenTemplate(TemplatePath + sTemplateName)
'    Set wsReport = wbRepBook.Worksheets(sRepSheetName)
'    Set wsReference = wbRepBook.Worksheets(sRefSheetName)
End Sub
  
Sub EndReport()
    With Application
       .StatusBar = False
       .ScreenUpdating = True
       .Interactive = True
       .DisplayAlerts = True
    End With
End Sub

Sub ShowError()
    Dim msg As String
    EndReport
    If Err.Number = 18 Then
      MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
      Exit Sub
    End If
    If Err.Number <> 0 Then
      msg = "Error # " & str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
      MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
    End If
End Sub

Sub Test1()
Dim s As Worksheet

 Set s = Application.Worksheets("report052002")
 MsgBox s.Name

End Sub

Function GetRowColByName(ByRef sh As Worksheet, ByVal Name As String, _
  Optional ByRef row As Integer, Optional ByRef col As Integer) As Boolean
    
    Dim i As Integer
  
    GetRowColByName = False
    row = 0
    col = 0
    With sh.Names
      For i = 1 To .count
         'MsgBox .Item(i).name
        If (.item(i).Name = "'" + sh.Name + "'!" + Name) Or (.item(i).Name = sh.Name + "!" + Name) Then
          row = sh.Range(Name).row
          col = sh.Range(Name).Column
          GetRowColByName = True
          Exit For
        End If
      Next i
    End With
End Function


Function GetLengthByLevel(Level As Integer, mask As String) As Integer
    Dim i As Integer
    Dim j As Integer
    
    GetLengthByLevel = 0
  
    If Level = -1 Then
      j = Len(mask)
    Else
      j = Level
    End If
    
    For i = 1 To j
      GetLengthByLevel = GetLengthByLevel + CInt(Mid(mask, i, 1))
    Next i
End Function

Function GetKfsrDescription(Code As String) As String
  Dim list As MSXML2.IXMLDOMNodeList, item As MSXML2.IXMLDOMElement, i As Integer
  GetKfsrDescription = ""
  If Not elKfsrRef Is Nothing Then
      Set list = elKfsrRef.getElementsByTagName("CODE")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If Code = item.getAttribute("NAME") Then
          GetKfsrDescription = item.getAttribute("DESCRIPTION")
        End If
      Next i
  End If
End Function


Function GetCustomMask(Code As String) As String
  Dim list As MSXML2.IXMLDOMNodeList, item As MSXML2.IXMLDOMElement, i As Integer
  GetCustomMask = ""
  If Not elKDCustomMask Is Nothing Then
      Set list = elKDCustomMask.getElementsByTagName("CODE")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If Code = item.getAttribute("VALUE") Then
          GetCustomMask = item.getAttribute("MASK")
        End If
      Next i
  End If
End Function

Function CodeToArray(Code As String, mask As String) As String()
    Dim i As Integer
    Dim l As Integer
    Dim n As Integer
    Dim m As Integer
    Dim s As String
    Dim Arr() As String
    
    ReDim Arr(Len(mask))
    
    l = Len(mask)
    m = 1
    
    For i = 1 To l
        n = CInt(Mid(mask, i, 1))
        s = Mid(Code, m, n)
        If Not CInt(s) = 0 Then
            Arr(i - 1) = s
        End If
        m = m + n
    Next i
    
    CodeToArray = Arr
End Function

Function CodeCompare(Templ() As String, Stored() As String) As Boolean
    Dim i As Integer
    
    CodeCompare = True
    
    For i = LBound(Templ) To UBound(Templ)
        If Not Templ(i) = "" Then
            If Not Templ(i) = Stored(i) Then
                CodeCompare = False
                Exit For
            End If
        End If
    Next i

End Function


Sub Example()
    Dim arr1() As String
    Dim arr2() As String
    Dim b As Boolean
    
    arr1 = CodeToArray("0106", "22")
    arr2 = CodeToArray("0107", "22")
    
    b = CodeCompare(arr1, arr2)
    

End Sub


Function GetParentLen(ByVal Code As String, ByVal mask As String) As Integer
    Dim i As Integer, m As Integer, n As Integer, ParentLevel As Integer, j As Integer, _
    tmpMask As String
        
  'If Len(Code) < 3 Then
  '  GetParentLen = 0
  '  Exit Function
  'End If
    If mask = "" Then
      GetParentLen = Len(Code)
      Exit Function
    End If
    
    tmpMask = GetCustomMask(Code)
    If tmpMask <> "" Then
      mask = tmpMask
    End If
    
    GetParentLen = 0
    i = Len(mask)
    m = GetLengthByLevel(-1, mask) + 1
    
    For j = i To 1 Step -1
      n = CInt(Mid(mask, j, 1))
      m = m - n
      If CInt(Mid(Code, m, n)) <> 0 Then
        GetParentLen = m + n - 1
        Exit For
      End If
    Next j
  
  
  
  'm = 1
  'For i = 1 To Len(Mask)
  '  n = CInt(Mid(Mask, i, 1))
  '  If CInt(Mid(Code, m, n)) = 0 Then
  '    Exit For
  '  End If
  '  m = m + n
  'Next i
  'GetParentLen = m - 1
End Function


'Function GetParentLen(ByVal Code As String, ByVal Mask As String) As Integer
'Dim i As Integer, m As Integer, n As Integer, ParentLevel As Integer
    
  'If Len(Code) < 3 Then
  '  GetParentLen = 0
  '  Exit Function
  'End If
 ' If Mask = "" Then
 '   GetParentLen = Len(Code)
 '   Exit Function
 ' End If
  
 ' m = 1
 ' For i = 1 To Len(Mask)
 '   n = CInt(Mid(Mask, i, 1))
 '   If CInt(Mid(Code, m, n)) = 0 Then
 '     Exit For
 '   End If
 '   m = m + n
 ' Next i
 ' GetParentLen = m - 1
'End Function

Function MyReplace(Expr As String, Fnd As String, Rpl As String) As String
Dim Result As String, pos As Integer
  pos = InStr(Expr, Fnd)
  If pos <> 0 Then
    Result = Left(Expr, pos - 1) + Rpl + Right(Expr, Len(Expr) - pos)
  Else
    Result = Expr
  End If
  MyReplace = Result
End Function

Function TrimAll(Value As String) As String
    Dim i As Integer
    Dim s As String
    
    For i = 1 To Len(Value)
      s = Mid(Value, i, 1)
      If Not s = " " Then
        TrimAll = TrimAll + s
      End If
    Next i
End Function

Function StrToCur(ByVal str As String) As Double
    If ds <> "." Then
      str = MyReplace(str, ".", ds)
    End If
    StrToCur = CCur(str)
End Function

Function GetCurr(ByVal Curr As Currency) As Currency
    If Curr <> 0 Then
        Curr = Curr / divider
        If bRound2Int Then
            Curr = Round(Curr, 0)
        End If
    End If
    GetCurr = Curr
End Function

Function ttttt() As ComplexCode()
  ReDim Arr(3) As ComplexCode
  Dim i As Integer
  
  Arr(0).LeftPart = "L1"
  Arr(0).MidPart = "M1"
  Arr(1).LeftPart = "L2"
  Arr(1).MidPart = "M2"
  
  ttttt = Arr
End Function

Sub rrr()
  Dim Arr() As ComplexCode, i As Integer
  
  Arr = ttttt
  
  MsgBox (CStr(UBound(Arr)))
  
  For i = 0 To UBound(Arr) - 1
    MsgBox (Arr(i).LeftPart)
    
  Next i
End Sub

Function GetCodes(fCodeType As String, Code As ComplexCode) As ComplexCode()
  Dim elCodeMap As MSXML2.IXMLDOMElement, _
      list As MSXML2.IXMLDOMNodeList, item As MSXML2.IXMLDOMElement, i As Integer, _
      MidCodeName As String, _
      listCode As MSXML2.IXMLDOMNodeList, itemCode As MSXML2.IXMLDOMElement, j As Integer, _
      flag As Boolean
  
  If (fCodeType = "KD") Then
    Set elCodeMap = elCodeMapInc
    MidCodeName = "KVD"
  ElseIf (fCodeType = "KI") Then
    Set elCodeMap = elCodeMapSrc
    MidCodeName = "KVI"
  End If
  
  flag = False
  
  If Not elCodeMap Is Nothing Then
    Set list = elCodeMap.childNodes
    For i = 0 To list.Length - 1
      If list(i).nodeType = NODE_ELEMENT Then
        Set item = list(i)
        If (item.getAttribute("KADM") = Code.LeftPart) And _
           (item.getAttribute(MidCodeName) = Code.MidPart) And _
           (item.getAttribute("KES") = Code.RightPart) _
        Then
          Set listCode = item.childNodes
          ReDim Arr(listCode.Length) As ComplexCode
          For j = 0 To listCode.Length - 1
            Set itemCode = listCode(j)
            Arr(j) = _
              GetComplexCode( _
                GetString(itemCode, "KADM") & _
                GetString(itemCode, MidCodeName) & _
                GetString(itemCode, "KES"), _
                fCodeType)
          Next j
          GetCodes = Arr
          flag = True
          Exit For
        End If
      End If
    Next i
  End If
  If Not flag Then
    Dim ArrTmp(1) As ComplexCode
    ArrTmp(0) = Code
    GetCodes = ArrTmp
  End If
End Function

Function GetCodesSimple(fCodeType As String, Code As String) As String()
  Dim list As MSXML2.IXMLDOMNodeList, item As MSXML2.IXMLDOMElement, i As Integer, _
      listCode As MSXML2.IXMLDOMNodeList, itemCode As MSXML2.IXMLDOMElement, j As Integer, _
      flag As Boolean
  
  flag = False
  
  If Not elCodeMapExp Is Nothing Then
    Set list = elCodeMapExp.childNodes
    For i = 0 To list.Length - 1
      If list(i).nodeType = NODE_ELEMENT Then
        Set item = list(i)
        If (item.getAttribute(fCodeType) = Code) Then
          Set listCode = item.childNodes
          ReDim Arr(listCode.Length) As String
          For j = 0 To listCode.Length - 1
            Set itemCode = listCode(j)
            Arr(j) = GetString(itemCode, fCodeType)
          Next j
          GetCodesSimple = Arr
          flag = True
          Exit For
        End If
      End If
    Next i
  End If
  If Not flag Then
    Dim ArrTmp(1) As String
    ArrTmp(0) = Code
    GetCodesSimple = ArrTmp
  End If
End Function

Function GetSum1_COMP(fCodeType As String, fCode As String, Storage As MSXML2.IXMLDOMElement) As Amounts
    Dim Code As ComplexCode, Codes() As ComplexCode, i  As Integer, SCodes() As String
    
    Set GetSum1_COMP = New Amounts
    If (fCodeType = "KD") Or (fCodeType = "KI") Then
      Code = GetComplexCode(fCode, fCodeType)
      Codes = GetCodes(fCodeType, Code)
      For i = 0 To UBound(Codes) - 1
        Code = Codes(i)
        If Code.isValid Then
          TrimComplexCode Code, fCodeType
          GetSum1_COMP.AddAmounts _
            GetSum4(Code.LeftPart, Code.MidPart, Code.RightPart, "KADM", fCodeType, "KES", Storage)
        End If
      Next i
    Else
      SCodes = GetCodesSimple(fCodeType, fCode)
      For i = 0 To UBound(SCodes) - 1
        If Len(SCodes(i)) = 4 Then
          GetSum1_COMP.AddAmounts _
            GetSum1(fCodeType, Left(SCodes(i), GetParentLen(SCodes(i), sKfsrMask)), Storage)
        End If
      Next i
   End If
End Function

Function GetSum1_COMP_old(fCodeType As String, fCode As String, Storage As MSXML2.IXMLDOMElement) As Amounts
    If (fCodeType = "KD") Or (fCodeType = "KI") Then
      Dim Code As ComplexCode
      Code = GetComplexCode(fCode, fCodeType)
      If Not Code.isValid Then
        Set GetSum1_COMP_old = New Amounts
      Else
        TrimComplexCode Code, fCodeType
        Set GetSum1_COMP_old = GetSum4(Code.LeftPart, Code.MidPart, Code.RightPart, "KADM", fCodeType, "KES", Storage)
      End If
    Else
      Set GetSum1_COMP_old = GetSum1(fCodeType, Left(fCode, GetParentLen(fCode, sKfsrMask)), Storage)
   End If
End Function

Function GetSum1(fCodeType As String, fCode As String, Storage As MSXML2.IXMLDOMElement) As Amounts
    Dim list As MSXML2.IXMLDOMNodeList
    Dim item As MSXML2.IXMLDOMElement
    Dim i As Integer
    
    Dim amS_YP As AmountStore
    Dim amS_DP As AmountStore
    Dim amS_E As AmountStore
    Dim amL_YP As AmountStore
    Dim amL_DP As AmountStore
    Dim amL_E As AmountStore
  
    Set amS_YP = New AmountStore
    Set amS_DP = New AmountStore
    Set amS_E = New AmountStore
    
    Set amL_YP = New AmountStore
    Set amL_DP = New AmountStore
    Set amL_E = New AmountStore
    
    Set GetSum1 = New Amounts
    
    If Not Storage Is Nothing Then
      Set list = Storage.getElementsByTagName("ITEM")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If fCode = Left(item.getAttribute(fCodeType), Len(fCode)) Then
          Select Case CInt(item.getAttribute(A_FO_TYPE))
            Case 2:
                amS_YP.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "YEARPLAN")
                amS_DP.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "DATEPLAN")
                amS_E.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "FACT")
            Case 3:
                amL_YP.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "YEARPLAN")
                amL_DP.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "DATEPLAN")
                amL_E.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "FACT")
          End Select
        End If
        
      Next i
      
      GetSum1.Add GetCurr(amS_YP.GetTotal), GetCurr(amL_YP.GetTotal), _
                  GetCurr(amS_DP.GetTotal), GetCurr(amL_DP.GetTotal), _
                  GetCurr(amS_E.GetTotal), GetCurr(amL_E.GetTotal)
    End If
    
    Set amS_YP = Nothing
    Set amS_DP = Nothing
    Set amS_E = Nothing
    
    Set amL_YP = Nothing
    Set amL_DP = Nothing
    Set amL_E = Nothing

End Function

Function GetSum2(fCode1 As String, fCode2 As String, _
      fCodeType1 As String, fCodeType2 As String, _
      Storage As MSXML2.IXMLDOMElement, addAssign As Boolean) As Amounts
    
    Dim list As MSXML2.IXMLDOMNodeList
    Dim item As MSXML2.IXMLDOMElement
    Dim i As Integer
    Dim key As String
    Dim yearPlan As Currency
    Dim datePlan As Currency
    Dim exec As Currency
    
    Set GetSum2 = New Amounts
    
    Dim amS As AmountStore
    Dim amL As AmountStore
    
    Dim amYS As AmountStore
    Dim amYL As AmountStore
    Dim amDS As AmountStore
    Dim amDL As AmountStore
    
    Set amS = New AmountStore
    Set amL = New AmountStore
  
    Set amYS = New AmountStore
    Set amYL = New AmountStore
    Set amDS = New AmountStore
    Set amDL = New AmountStore
  
    If Not Storage Is Nothing Then
      Set list = Storage.getElementsByTagName("ITEM")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If fCode1 = Left(item.getAttribute(fCodeType1), Len(fCode1)) And _
           fCode2 = Left(item.getAttribute(fCodeType2), Len(fCode2)) _
        Then
          key = item.getAttribute(fCodeType1) + "$" + item.getAttribute(fCodeType2)
          yearPlan = GetCurrency(item, "YEARPLAN")
          datePlan = GetCurrency(item, "DATEPLAN")
          exec = GetCurrency(item, "FACT")
          Select Case CInt(item.getAttribute(A_FO_TYPE))
            Case 2:
                amS.Add ID:=key, Amount:=exec
                If addAssign Then
                  amYS.Add ID:=key, Amount:=yearPlan
                  amDS.Add ID:=key, Amount:=datePlan
                End If
            Case 3:
                amL.Add ID:=key, Amount:=exec
                If addAssign Then
                  amYL.Add ID:=key, Amount:=yearPlan
                  amDL.Add ID:=key, Amount:=datePlan
                End If
          End Select
        End If
      Next i
      GetSum2.Add GetCurr(amYS.GetTotal), GetCurr(amYL.GetTotal), _
                  GetCurr(amDS.GetTotal), GetCurr(amDL.GetTotal), _
                  GetCurr(amS.GetTotal), GetCurr(amL.GetTotal)
    End If
    Set amS = Nothing
    Set amL = Nothing
    Set amYL = Nothing
    Set amYS = Nothing
    Set amDL = Nothing
    Set amDS = Nothing
End Function

Function GetSum4(fCode1 As String, fCode2 As String, fCode3 As String, _
      fCodeType1 As String, fCodeType2 As String, fCodeType3 As String, _
      Storage As MSXML2.IXMLDOMElement) As Amounts
    
    Dim list As MSXML2.IXMLDOMNodeList
    Dim item As MSXML2.IXMLDOMElement
    Dim i As Integer
    Dim sID As String
    Dim TemplCode2Arr() As String
    Dim StoredCode2Arr() As String
    Dim mask As String
    Dim k As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (1 |fffd||fffd||fffd| -1) |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd|+(-|fffd|), |fffd| |fffd||fffd||fffd| |fffd|+(-|fffd|)
    
    Set GetSum4 = New Amounts
    
    k = 1
    If fCodeType2 = "KD" Then
        mask = sKdMask
    ElseIf fCodeType2 = "KI" Then
        mask = sKiMask
        If bBudgetRestRotate And _
           fCode1 = "" And fCode2 = "08000000000000" And fCode3 = "" _
        Then
          k = -1
        End If
           
    End If
    
    Dim amS_YP As AmountStore
    Dim amS_DP As AmountStore
    Dim amS_E As AmountStore
    Dim amL_YP As AmountStore
    Dim amL_DP As AmountStore
    
    Dim amL_E As AmountStore
    
  
    Set amS_YP = New AmountStore
    Set amS_DP = New AmountStore
    Set amS_E = New AmountStore
    
    Set amL_YP = New AmountStore
    Set amL_DP = New AmountStore
    Set amL_E = New AmountStore
  
    If Not Storage Is Nothing Then
      Set list = Storage.getElementsByTagName("ITEM")
      TemplCode2Arr = CodeToArray(fCode2, mask)
      For i = 0 To list.Length - 1
        Set item = list(i)
        StoredCode2Arr = CodeToArray(item.getAttribute(fCodeType2), mask)
        
        If fCode1 = Left(item.getAttribute(fCodeType1), Len(fCode1)) And _
           CodeCompare(TemplCode2Arr, StoredCode2Arr) And _
           fCode3 = Left(item.getAttribute(fCodeType3), Len(fCode3)) _
        Then
          sID = item.getAttribute(fCodeType1) + "$" + item.getAttribute(fCodeType2) + "$" + item.getAttribute(fCodeType3)
          
          Select Case CInt(item.getAttribute(A_FO_TYPE))
            Case 2:
                amS_YP.Add ID:=sID, Amount:=GetCurrency(item, "YEARPLAN") * k
                amS_DP.Add ID:=sID, Amount:=GetCurrency(item, "DATEPLAN") * k
                amS_E.Add ID:=sID, Amount:=GetCurrency(item, "FACT") * k
                
            Case 3:
                amL_YP.Add ID:=sID, Amount:=GetCurrency(item, "YEARPLAN") * k
                amL_DP.Add ID:=sID, Amount:=GetCurrency(item, "DATEPLAN") * k
                amL_E.Add ID:=sID, Amount:=GetCurrency(item, "FACT") * k
          End Select
        End If
        ReDim StoredCode2Arr(0)
      Next i
      GetSum4.Add GetCurr(amS_YP.GetTotal), GetCurr(amL_YP.GetTotal), _
                  GetCurr(amS_DP.GetTotal), GetCurr(amL_DP.GetTotal), _
                  GetCurr(amS_E.GetTotal), GetCurr(amL_E.GetTotal)
    End If
    
    ReDim StoredCode2Arr(0)
    ReDim TemplCode2Arr(0)
    
    Set amS_YP = Nothing
    Set amS_DP = Nothing
    Set amS_E = Nothing
    
    Set amL_YP = Nothing
    Set amL_DP = Nothing
    Set amL_E = Nothing
End Function

Function GetSum3(fCodeType As String, fCode As String, Storage As MSXML2.IXMLDOMElement) As Amounts
    Dim list As MSXML2.IXMLDOMNodeList, item As MSXML2.IXMLDOMElement, i As Integer
    
    Set GetSum3 = New Amounts
    
    Dim amS As AmountStore
    Dim amL As AmountStore
    
    Set amS = New AmountStore
    Set amL = New AmountStore
    
    If Not Storage Is Nothing Then
      Set list = Storage.getElementsByTagName("ITEM")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If (fCode = item.getAttribute(fCodeType)) Then
          Select Case CInt(item.getAttribute(A_FO_TYPE))
            Case 2:
                amS.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "FACT")
            Case 3:
                amL.Add ID:=item.getAttribute(fCodeType), Amount:=GetCurrency(item, "FACT")
          End Select
          'cur = cur + GetCurr(GetCurrency(item, "FACT"))
        End If
      Next i
      GetSum3.AddSubjExec GetCurr(amS.GetTotal)
      GetSum3.AddLocExec GetCurr(amL.GetTotal)
      'If Cur <> 0 Then Cur = Cur / divider
    End If
    Set amS = Nothing
    Set amL = Nothing
End Function

Sub SetCurrencyValue(sh As Worksheet, X, Y As Integer, Amount As Currency)
    If (Amount <> 0) And (sh.Cells(X, Y).Formula = "" Or sh.Cells(X, Y).Formula = "-") And (sh.Cells(X, Y).Value = "" Or sh.Cells(X, Y).Value = "-") Then
        sh.Cells(X, Y).Value = Amount
        SetCurrencyCellFormat sh, X, Y
    End If
End Sub

Sub SetCurrencyCellFormat(sh As Worksheet, X, Y As Integer)
    If bRound2Int Then
      If InStr(sh.Cells(X, Y).NumberFormat, ";") > 0 Then
        sh.Cells(X, Y).NumberFormat = "#,##0;#,##0"
      Else
        sh.Cells(X, Y).NumberFormat = "#,##0"
      End If
    End If
End Sub

Function GetComplexCode(Value As String, CodeType As String) As ComplexCode
    Dim s As String
    Dim midMask As String
    
    s = TrimAll(Value)
    
    If Not Len(s) = 20 Then
      GetComplexCode.isValid = False
    Else
      GetComplexCode.isValid = True
      If CodeType = "KD" Then
        midMask = sKdMask
      Else
        midMask = sKiMask
      End If
      
      GetComplexCode.LeftPart = Left(s, 3)
      GetComplexCode.MidPart = Mid(s, 4, 14)
      GetComplexCode.RightPart = Right(s, 3)
                      
    End If
End Function

Sub TrimComplexCode(ByRef Code As ComplexCode, CodeType As String)
    If Code.isValid Then
      Code.LeftPart = _
        Left(Code.LeftPart, GetParentLen(Code.LeftPart, sKadmMask))
      'Code.MidPart = _
      '  Left(Code.MidPart, GetParentLen(Code.MidPart, midMask))
      Code.RightPart = _
        Left(Code.RightPart, GetParentLen(Code.RightPart, sKesMask))
    End If
End Sub


Sub FormatResultCells(sh As Worksheet, AreaName As String)
    Dim i As Integer
    Dim j As Integer
    Dim r As Range
    
  If GetRowColByName(sh, AreaName) Then
    For Each r In sh.Range(AreaName).Areas
      With r
        For i = .Rows(1).row To .Rows(.Rows.count).row
          For j = .Columns(1).Column To .Columns(.Columns.count).Column
            If sh.Cells(i, j).Value <> 0 Then SetCurrencyCellFormat sh, i, j
          Next j
        Next i
      End With
    Next r
  End If
    
End Sub

Sub ChangeSourceResultFormula(sh As Worksheet)
    Dim i As Integer
    Dim j As Integer
    Dim r As Range
    
  If GetRowColByName(sh, "SRC_FACT_RESULT", i, j) Then
    sh.Cells(i, j).Formula = "=-L1106"
  End If
    
End Sub


Sub ReportCodeArea(sh As Worksheet, fCodeTypeName As String, codeMask As String, _
      CodeAreaName As String, Storage As MSXML2.IXMLDOMElement, elSpecial As MSXML2.IXMLDOMElement, _
      colCode As Integer, ShowAll As Boolean)
   
    Dim i As Integer
    Dim j As Integer
    Dim sCode As String
    Dim spec_exist As Boolean
    Dim Amt As Amounts
    Dim r As Range
    Dim sValue As String
       
    If Not GetRowColByName(sh, CodeAreaName) Then
      Err.Raise vbObjectError + 603, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + CodeAreaName + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
  For Each r In sh.Range(CodeAreaName).Areas
'    With sh.Range(CodeAreaName)
    With r
      For i = .Rows(1).row To .Rows(.Rows.count).row
        For j = .Columns(1).Column To .Columns(.Columns.count).Column
          If (sh.Cells(i, j).Value <> "") Then
            If i = 59 Then
              spec_exist = False
            End If
            sValue = Trim(sh.Cells(i, j).Value)
            
            If CheckCodeItem(fCodeTypeName, sValue, "", "", elSpecial) Then
                Set Amt = GetSum1(fCodeTypeName, sValue, elSpecial)
            Else
'                sCode = Left(sh.Cells(i, colCode).Value, GetParentLen(sValue, codeMask))
                Set Amt = GetSum1_COMP(fCodeTypeName, sValue, Storage)
            End If
            
            If bConsMode Then
              SetCurrencyValue sh, i, colFedYearPlan, Amt.GetFedYearPlan
              SetCurrencyValue sh, i, colFedDatePlan, Amt.GetFedDatePlan
              SetCurrencyValue sh, i, colFedExec, Amt.GetFedExec
            End If
            
            SetCurrencyValue sh, i, colSubjYearPlan, Amt.GetSubjYearPlan
            SetCurrencyValue sh, i, colSubjDatePlan, Amt.GetSubjDatePlan
            SetCurrencyValue sh, i, colSubjExec, Amt.GetSubjExec
            
            SetCurrencyValue sh, i, colLocYearPlan, Amt.GetLocYearPlan
            SetCurrencyValue sh, i, colLocDatePlan, Amt.GetLocDatePlan
            SetCurrencyValue sh, i, colLocExec, Amt.GetLocExec
            
            If (Not ShowAll) And Amt.isNull Then
              'sh.Rows(i).EntireRow.Delete
              sh.Rows(i).RowHeight = 0
            End If
            Set Amt = Nothing
          End If
        Next j
      Next i
    End With
  Next r

End Sub

Sub SetRangeValue(sh As Worksheet, Name As String, Value As Variant)
    On Error GoTo ErrorHandle
    sh.Range(Name).Value = Value
    Exit Sub
ErrorHandle:
    Err.Raise vbObjectError + 601, Description:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" _
        + Name + "'" + " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
End Sub

Sub SetEDI(sh As Worksheet)
    If Not GetRowColByName(sh, "EDI") Then
      MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 'EDI' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "', |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Else
      sh.Range("EDI").Value = sEDI
    End If
End Sub


Sub ProcessReport(doc As MSXML2.DOMDocument)
    Const cMainStatus As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|1"
    Dim sh As Worksheet
    Dim sCode As String
    Dim colCode As Integer
    Dim i_tmp As Integer
    
    Application.StatusBar = cMainStatus
    
    Set sh = wbRepBook.Worksheets(sRepSheetName)
    
    SetEDI sh
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_F, col:=colFedYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_F + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_S, col:=colSubjYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_S + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_L, col:=colLocYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_F, col:=colFedDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_F + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_S, col:=colSubjDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_S + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_L, col:=colLocDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    
    If Not GetRowColByName(sh, A_N_FACT_F, col:=colFedExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_F + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_FACT_S, col:=colSubjExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_S + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_FACT_L, col:=colLocExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_CODE, col:=colCode) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_CODE + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    SetRangeValue sh, A_N_FO, "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  " + sFoName
    SetRangeValue sh, A_N_REPDATE, sRepDate
    'SetRangeValue sh, A_N_DIRECTOR, sDirectorName
    'SetRangeValue sh, A_N_ACCOUNTANT, sAccountantName
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReportCodeArea sh, "KD", sKdMask, C_A_N_INCOME, elIncome, elIncomeSpecial, colCode, bShowAll
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReportCodeArea sh, "KFSR", sKfsrMask, C_A_N_EXPENSE, elExpense, Nothing, colCode, bShowAll
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReportCodeArea sh, "KI", "", C_A_N_INTSRC, elIntSrc, Nothing, colCode, bShowAll
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ReportCodeArea sh, "KI", "", C_A_N_EXTSRC, elExtSrc, Nothing, colCode, bShowAll
    Application.StatusBar = ""
    
    FormatResultCells sh, "RESULTS"
    
    If UCase(sObjectName) = UCase("irkutsk") Then ChangeSourceResultFormula sh
    
    ProcessSigns doc.getElementsByTagName(signTag), sh
    sh.Name = "|fffd||fffd||fffd||fffd||fffd|"

End Sub

Sub ProcessReference(doc As MSXML2.DOMDocument)
    Dim s1 As String
    Dim i As Integer
    
    Const cMainStatus As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|2"
    Dim sh As Worksheet
'    Dim sCode As String
    Dim Task As RefTask
       
    Dim colCode1 As Integer
    Dim colCode2 As Integer
    Dim colCodeRow1 As Integer
    Dim colCodeRow2 As Integer
    
    
    Set sh = wbRepBook.Worksheets(sRefSheetName)
    
    SetEDI sh
    
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_F, col:=colFedYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_F + "'" + _
        " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_S, col:=colSubjYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_S + "'" + _
        " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_YEARPLAN_L, col:=colLocYearPlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_YEARPLAN_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_F, col:=colFedDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_F + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_S, col:=colSubjDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_S + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_DATEPLAN_L, col:=colLocDatePlan) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_DATEPLAN_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not bRefViewAssign Then
      sh.Columns(colSubjYearPlan).ColumnWidth = 0
      sh.Columns(colSubjDatePlan).ColumnWidth = 0
      sh.Columns(colLocYearPlan).ColumnWidth = 0
      sh.Columns(colLocDatePlan).ColumnWidth = 0
      sh.Columns(colFedYearPlan).ColumnWidth = 0
      sh.Columns(colFedDatePlan).ColumnWidth = 0
    End If
    
    If Not GetRowColByName(sh, A_N_FACT_F, col:=colFedExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_F + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_FACT_S, col:=colSubjExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_S + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_FACT_L, col:=colLocExec) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_FACT_L + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_CODE1, col:=colCode1) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_CODE1 + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_CODE2, col:=colCode2) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_CODE2 + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
     
    If Not GetRowColByName(sh, A_N_CODEROW1, col:=colCodeRow1) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_CODEROW1 + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    If Not GetRowColByName(sh, A_N_CODEROW2, col:=colCodeRow2) Then
      Err.Raise vbObjectError + 600, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + A_N_CODEROW2 + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
    SetRangeValue sh, A_N_FO, "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  " + sFoName
    SetRangeValue sh, A_N_REPDATE, sRepDate
    'SetRangeValue sh, A_N_DIRECTOR, sDirectorName
    'SetRangeValue sh, A_N_ACCOUNTANT, sAccountantName
    
    Task.CodeColumn1 = colCode1
    Task.CodeColumn2 = colCode2
    Task.CodeRowColumn1 = colCodeRow1
    Task.CodeRowColumn2 = colCodeRow2
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Task.CodeType1 = ""
    Task.CodeMask1 = ""
    Task.CodeType2 = ""
    Task.CodeMask2 = ""
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_INCOME, Nothing, Nothing
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Task.CodeType1 = "KFSR"
    Task.CodeMask1 = sKfsrMask
    Task.CodeType2 = "KES"
    Task.CodeMask2 = sKesMask

    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_EXPENSE, elExpense, elSpecial

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Task.CodeType1 = ""
    Task.CodeMask1 = ""
    Task.CodeType2 = ""
    Task.CodeMask2 = ""
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_REF_PART4, Nothing, Nothing
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Task.CodeType1 = ""
    Task.CodeMask1 = ""
    Task.CodeType2 = ""
    Task.CodeMask2 = ""
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_REF_PART5, Nothing, Nothing
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Task.CodeType1 = "KFSR"
    Task.CodeMask1 = sKfsrMask
    Task.CodeType2 = "KES"
    Task.CodeMask2 = sKesMask
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_CREDITDEBTS, elCDebts, elSpecial
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Task.CodeType1 = "KFSR"
    Task.CodeMask1 = sKfsrMask
    Task.CodeType2 = "KES"
    Task.CodeMask2 = sKesMask
    Application.StatusBar = cMainStatus + " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)"
    ReferenceCodeArea Task, sh, C_A_N_DEBITDEBTS, elDDebts, elSpecial
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (Not bShowAll) Then
      HideReferenceEmptyRows sh, C_A_N_INCOME
      HideReferenceEmptyRows sh, C_A_N_EXPENSE
      HideReferenceEmptyRows sh, C_A_N_REF_PART4
      HideReferenceEmptyRows sh, C_A_N_REF_PART5
      HideReferenceEmptyRows sh, C_A_N_CREDITDEBTS
      HideReferenceEmptyRows sh, C_A_N_DEBITDEBTS
    End If
    
    'CRUISER - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
'    Task.CodeType1 = "KFSR"
'    Task.CodeMask1 = sKfsrMask
'    Task.CodeType2 = "KES"
'    Task.CodeMask2 = sKesMask
'    For i = 1 To 15
'      Select Case (i)
'        Case 1: s1 = "210"
'        Case 2: s1 = "211"
'        Case 3: s1 = "212"
'        Case 4: s1 = "213"
'        Case 5: s1 = "220"
'        Case 6: s1 = "223"
'        Case 7: s1 = "240"
'        Case 8: s1 = "241"
'        Case 9: s1 = "242"
'        Case 10: s1 = "260"
'        Case 11: s1 = "262"
'        Case 12: s1 = "300"
'        Case 13: s1 = "310"
'        Case 14: s1 = "320"
'        Case 15: s1 = "340"
'      End Select
'
'      ReferenceCodeAreaDetail Task, sh, C_A_N_EXPENSE_DET + "_" + s1, elExpense, elSpecial
'    Next i
    
    ProcessSigns doc.getElementsByTagName(signTag), sh
    sh.Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    Application.StatusBar = ""
End Sub

Function CheckCodeItem_Real(fCodeType1 As String, fCode1 As String, fCodeType2 As String, fCode2 As String, _
         Storage As MSXML2.IXMLDOMElement) As Boolean
    
    Dim list As MSXML2.IXMLDOMNodeList
    Dim item As MSXML2.IXMLDOMElement
    Dim i As Integer
    
    CheckCodeItem_Real = False
    If Not Storage Is Nothing Then
      Set list = Storage.getElementsByTagName("ITEM")
      For i = 0 To list.Length - 1
        Set item = list(i)
        If (fCode1 = item.getAttribute(fCodeType1) And fCode2 = item.getAttribute(fCodeType2)) Then
          CheckCodeItem_Real = True
          Exit Function
        End If
      Next i
    End If
End Function

Function CheckCodeItem(fCodeType1 As String, fCode1 As String, fCodeType2 As String, fCode2 As String, _
         Storage As MSXML2.IXMLDOMElement) As Boolean
    
    Dim list As MSXML2.IXMLDOMNodeList
    Dim item As MSXML2.IXMLDOMElement
    Dim i As Integer
    Dim compare_mode As Integer
        
    compare_mode = 0
        
    If fCodeType1 <> "" Then
      compare_mode = compare_mode + 1
    End If
    
    If fCodeType2 <> "" Then
      compare_mode = compare_mode + 2
    End If
    
    CheckCodeItem = False
    If (Not Storage Is Nothing) And (compare_mode > 0) Then
      Set list = Storage.getElementsByTagName("ITEM")
      For i = 0 To list.Length - 1
        Set item = list(i)
        
        Select Case compare_mode
         Case 1
            If (fCode1 = item.getAttribute(fCodeType1)) Then
              CheckCodeItem = True
            End If
         Case 2
            If (fCode2 = item.getAttribute(fCodeType2)) Then
              CheckCodeItem = True
            End If
         Case 3
            If (fCode1 = item.getAttribute(fCodeType1) And fCode2 = item.getAttribute(fCodeType2)) Then
              CheckCodeItem = True
            End If
        End Select
        
        If CheckCodeItem = True Then
          Exit Function
        End If
        
      Next i
    End If
End Function

Sub ReferenceCodeArea(Task As RefTask, sh As Worksheet, CodeAreaName As String, Storage As MSXML2.IXMLDOMElement, _
    special As MSXML2.IXMLDOMElement)
   
    Dim i As Integer
    Dim j As Integer
    Dim sCode1 As String
    Dim sCode2 As String
    Dim sSpecialCode As String
    Dim Amt As Amounts
    Dim r As Range
       
    If Not GetRowColByName(sh, CodeAreaName) Then
      Err.Raise vbObjectError + 603, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + CodeAreaName + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
  For Each r In sh.Range(CodeAreaName).Areas
'    With sh.Range(CodeAreaName)
    With r
      For i = .Rows(1).row To .Rows(.Rows.count).row
        'For j = .Columns(1).Column To .Columns(.Columns.Count).Column
          If sh.Cells(i, Task.CodeRowColumn1).Value <> "" And _
             sh.Cells(i, Task.CodeRowColumn2).Value <> "" _
          Then
            sCode1 = Left(sh.Cells(i, Task.CodeColumn1).Value, GetParentLen(sh.Cells(i, Task.CodeColumn1).Value, Task.CodeMask1))
            sCode2 = Left(sh.Cells(i, Task.CodeColumn2).Value, GetParentLen(sh.Cells(i, Task.CodeColumn2).Value, Task.CodeMask2))
            
            If CheckCodeItem("CODE1", sh.Cells(i, Task.CodeRowColumn1).Value, _
                             "CODE2", sh.Cells(i, Task.CodeRowColumn2).Value, elSpecial) _
            Then
              Set Amt = GetSum2(sh.Cells(i, Task.CodeRowColumn1).Value, _
                                sh.Cells(i, Task.CodeRowColumn2).Value, _
                                "CODE1", "CODE2", elSpecial, bRefViewAssign)
            Else
              Set Amt = GetSum2(sCode1, sCode2, Task.CodeType1, Task.CodeType2, Storage, bRefViewAssign)
            End If
            
            If bConsMode Then
              SetCurrencyValue sh, i, colFedYearPlan, Amt.GetFedYearPlan
              SetCurrencyValue sh, i, colFedDatePlan, Amt.GetFedDatePlan
              SetCurrencyValue sh, i, colFedExec, Amt.GetFedExec
            End If
            
            SetCurrencyValue sh, i, colSubjYearPlan, Amt.GetSubjYearPlan
            SetCurrencyValue sh, i, colSubjDatePlan, Amt.GetSubjDatePlan
            SetCurrencyValue sh, i, colSubjExec, Amt.GetSubjExec
            
            SetCurrencyValue sh, i, colLocYearPlan, Amt.GetLocYearPlan
            SetCurrencyValue sh, i, colLocDatePlan, Amt.GetLocDatePlan
            SetCurrencyValue sh, i, colLocExec, Amt.GetLocExec
            
           ' |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| HideReferenceEmptyRows
           ' If (Not ShowAll) And Amt.isNull Then
           '   sh.Rows(i).RowHeight = 0
           ' End If
            
            Set Amt = Nothing
          'Else
          '  If (Not ShowAll) Then
          '    sh.Rows(i).RowHeight = 0
          '  End If
          End If
        'Next j
      Next i
    End With
  Next r
End Sub

Sub HideReferenceEmptyRows(sh As Worksheet, CodeAreaName As String)
  Dim r As Range
  Dim i As Integer
  
  For Each r In sh.Range(CodeAreaName).Areas
    With r
      For i = .Rows(1).row To .Rows(.Rows.count).row
        If Not (IsNotEmtyCurrencyValue(sh.Cells(i, colFedYearPlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colFedDatePlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colFedExec).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colSubjYearPlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colSubjDatePlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colSubjExec).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colLocYearPlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colLocDatePlan).Value) Or _
           IsNotEmtyCurrencyValue(sh.Cells(i, colLocExec).Value)) Then
          sh.Rows(i).RowHeight = 0
        End If
      Next i
    End With
  Next r
End Sub

Function IsNotEmtyCurrencyValue(Value As Variant) As Boolean
Dim res As Currency

If (Value = "") Then
  IsNotEmtyCurrencyValue = False
  Exit Function
End If

On Error GoTo falseres
res = FormatCurrency(Value)
If res <> 0 Then
  IsNotEmtyCurrencyValue = True
  Exit Function
End If

falseres:
IsNotEmtyCurrencyValue = False
End Function

Sub ReferenceCodeAreaDetail(Task As RefTask, _
                            sh As Worksheet, _
                            CodeAreaName As String, _
                            Storage As MSXML2.IXMLDOMElement, _
                            special As MSXML2.IXMLDOMElement)
   
    Dim i, k, n, rnum As Integer
    Dim sCode1 As String
    Dim sCode1Name As String
    Dim sCode2 As String
    Dim sSpecialCode As String
    Dim amtSubj, amtLocal As Currency
    Dim key As String
    
    Dim r As Range
    Dim rw As Range
    
    Dim vl As String
    Dim detailStorage As DetailAmtStore
    
    Dim amtTotal As Amounts
       
    If Not GetRowColByName(sh, CodeAreaName) Then
      Err.Raise vbObjectError + 603, Description:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| '" + CodeAreaName + "'" + _
          " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| '" + sh.Name + "'"
    End If
    
  For Each r In sh.Range(CodeAreaName).Areas
    With r
      i = .Rows(1).row
      If sh.Cells(i, Task.CodeColumn2).Value <> "" Then
        vl = sh.Cells(i, Task.CodeColumn2).Value
        sCode2 = Left(vl, GetParentLen(vl, Task.CodeMask2))
                    
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Set amtTotal = GetSum1(Task.CodeType2, sCode2, Storage)
        SetCurrencyValue sh, i, colSubjExec, amtTotal.GetSubjExec
        SetCurrencyValue sh, i, colLocExec, amtTotal.GetLocExec
        If bConsMode Then
          SetCurrencyValue sh, i, colFedExec, amtTotal.GetFedExec
        End If
                    
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set detailStorage = New DetailAmtStore
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        LoadDetailData detailStorage, Storage, vl
        n = detailStorage.getCount
        
        Set rw = sh.Rows(i + 1)
        rw.Select
        
        'Range(sh.Cells(i + 1, 1), sh.Cells(i + 1, 7))
    
        If n = 0 Then
          'MsgBox CodeAreaName + " - No data. Row " + CStr(i) + " will be hidden"
          Selection.RowHeight = 0
        Else
          'MsgBox CodeAreaName + "- has data Row " + CStr(i)
                   
          For k = 1 To n
            Selection.Copy
            Selection.Insert Shift:=xlDown
        Next k
         
          For k = 1 To n
            key = detailStorage.getKey(k)
            sCode1 = detailStorage.GetCode(key)
            sCode1Name = detailStorage.GetCodeName(key)
            amtSubj = GetCurr(detailStorage.GetAmountSubj(key))
            amtLocal = GetCurr(detailStorage.GetAmountLocal(key))
            
            rnum = i + 1 + k
            
            If (Abs(amtSubj) < 0.01) And (Abs(amtLocal) < 0.01) Then
              sh.Rows(rnum).Select
              Selection.RowHeight = 0
            End If
                    
            sh.Cells(rnum, 2).Value = sCode1 'KFSR
            sh.Cells(rnum, 3).Value = vl 'KES
            sh.Cells(rnum, 1).Value = GetKfsrDescription(sCode1) 'KFSR Name
            sh.Cells(rnum, colSubjExec).Value = amtSubj
            sh.Cells(rnum, colLocExec).Value = amtLocal
          
            If bConsMode Then
              sh.Cells(rnum, colFedExec).Value = GetCurr(detailStorage.GetAmountCons(key))
            End If
          
          Next k
        End If
        
        Range(Cells(i + 2, 1), Cells(i + 1 + n, 7)).Select
        Selection.Sort _
                Key1:=Range("B" + CStr(i + 1)), _
                Order1:=xlAscending, _
                Header:=xlGuess, _
                OrderCustom:=1, _
                MatchCase:=False, _
                Orientation:=xlTopToBottom
            
        Set detailStorage = Nothing
      End If
    End With
  Next r
End Sub

Public Sub LoadDetailData(detailStorage As DetailAmtStore, _
                          dataElem As MSXML2.IXMLDOMElement, _
                          KES As String)
                          
  Dim amtSubj, amtLocal As Currency
  Dim Elem As MSXML2.IXMLDOMElement
  Dim i As Integer
  Dim nList As MSXML2.IXMLDOMNodeList
  Dim Code, codePart, codeName As String
                          
  Set nList = dataElem.childNodes
  For i = 0 To nList.Length - 1
    Set Elem = nList(i)
    If Elem.getAttribute("KES") = KES Then
      Code = Elem.getAttribute("KFSR")
      codePart = Left(Code, 2) + "00"
      On Error Resume Next
      'codeName = CStr(elem.getAttribute("KFSRNAME"))
      On Error GoTo 0
      
      Select Case CInt(Elem.getAttribute(A_FO_TYPE))
        Case 2:
      amtSubj = GetCurrency(Elem, "FACT")
      amtLocal = 0
        Case 3:
          amtSubj = 0
          amtLocal = GetCurrency(Elem, "FACT")
      End Select
    
      detailStorage.Add Code, codeName, amtSubj, amtLocal
      If Code <> codePart Then
      detailStorage.Add codePart, "", amtSubj, amtLocal
    End If
    End If
  Next i
End Sub

Sub ProcessSigns(Nodes As MSXML2.IXMLDOMNodeList, sh As Worksheet)
  
  Dim SignRangeName As String, ApptValue As String, FioValue As String, PhoneValue As String, _
      sheetName As String, Elem As MSXML2.IXMLDOMElement

  Dim i, k, count As Integer

   count = 0
   For k = 0 To Nodes.Length - 1
    Set Elem = Nodes.item(k)
    sheetName = Elem.getAttribute("SHEET")
    SignRangeName = Elem.getAttribute("RANGE_NAME")
    If sheetName = "" Or UCase(sheetName) = UCase(sh.Name) Then
     With sh.Names
       For i = 1 To .count
         If (.item(i).Name = "'" + sh.Name + "'!" + SignRangeName) _
              Or (.item(i).Name = sh.Name + "!" + SignRangeName) Then
            ApptValue = Elem.getAttribute("APPT")
            FioValue = Elem.getAttribute("FIO")
            PhoneValue = Elem.getAttribute("PHONE")
            If Not isNull(PhoneValue) Then
              If PhoneValue <> "" Then ApptValue = ApptValue + Chr(10) + "|fffd||fffd||fffd|. " + PhoneValue
            End If
            AddNewSignArea sh, count, SignRangeName
            count = count + 1
            SetRangeValue sh, "APPT", ApptValue
            SetRangeValue sh, "FIO", FioValue
           Exit For
         End If
       Next i
     End With
    End If
   Next k
   Application.CutCopyMode = False
   Application.Goto Reference:=Worksheets(sh.Name).Range("A1"), scroll:=True
End Sub

Sub AddNewSignArea(sh As Worksheet, count As Integer, SignRangeName As String)
 Dim i As Integer, offset As Integer, beginRowNumber As Integer
 Dim tempRange As Range
 
 If count > 0 Then
   Set tempRange = sh.Range(SignRangeName)
   
   offset = tempRange.Rows.count
   beginRowNumber = tempRange.row
   
   For i = 0 To offset - 1
    sh.Rows(beginRowNumber + offset).Insert
   Next i
   
   AddNameSpace sh, SignRangeName, offset
   AddNameSpace sh, "APPT", offset
   AddNameSpace sh, "FIO", offset
 
   For i = 0 To offset - 1
    sh.Range(SignRangeName).Rows(i).RowHeight = tempRange.Rows(i).RowHeight
   Next i
 
   tempRange.Copy
   sh.Range(SignRangeName).PasteSpecial xlPasteFormats
   sh.Range(SignRangeName).Value = tempRange.Value
 End If
 
End Sub

Sub AddNameSpace(sh As Worksheet, SignRangeName As String, offset As Integer)
  Dim i As Integer, rowCount As Integer, beginRowNumber As Integer
  Dim beginColumnNumber As Integer, ColumnCount As Integer
  
  rowCount = sh.Range(SignRangeName).Rows.count
  beginRowNumber = sh.Range(SignRangeName).row
  ColumnCount = sh.Range(SignRangeName).Columns.count
  beginColumnNumber = sh.Range(SignRangeName).Column

  sh.Names.Add Name:=SignRangeName, RefersToR1C1:="=" + sh.Name + "!" + _
           "R" + CStr(beginRowNumber + offset) + _
           "C" + CStr(beginColumnNumber) + _
           ":" + _
           "R" + CStr(beginRowNumber + rowCount - 1 + offset) + _
           "C" + CStr(beginColumnNumber + ColumnCount - 1)
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
