Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 05.08.2008: V3 Optimierung der Ereignisse auf Lauff|fffd|higkeit bei fehlenden Modulen
' 11.06.2008: Workbook_BeforeSave: Funktion _zwisch so ge|fffd|ndert, dass update m|fffd|glich wird, wenn ein Modul fehlt.
' 10.04.2008 Start

Option Explicit
' Gel|fffd|scht


Private Sub Workbook_Activate()
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_Activate", True)

End Sub

Private Sub LOP_Workbook_BeforeSave_zwisch(ByVal SaveAsUI As Boolean, Cancel As Boolean)

LOP_Workbook_BeforeSave SaveAsUI, Cancel
End Sub


Private Sub Workbook_AddinUninstall()
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_AddinUninstall", True)

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_BeforeClose", Cancel)

End Sub

Private Sub Workbook_BeforePrint(Cancel As Boolean)
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_BeforePrint", Cancel)

End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Z_Makro_auto_Update")
erg = Application.Run("LOP_Workbook_BeforeSave", SaveAsUI, Cancel)

End Sub




Private Sub Workbook_Deactivate()
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_Deactivate", True)

End Sub

Private Sub Workbook_Open()
Dim erg As Boolean
On Error Resume Next
erg = Application.Run("LOP_Workbook_Open", True)
' Gel|fffd|scht
' Gel|fffd|scht

End Sub
Attribute VB_Name = "LOP_Filter"
Attribute VB_Base = "0{B4F2D8D4-75B1-47FC-9315-DE4BC4F0400A}{C8DFCCDD-D4D4-4C2B-A1EF-294670C8FADB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' 10.01.2009: Update Office 2007
' 05.11.2008: Datumsfilter incl leere Zellen
' 17.09.2008: Englisch eingebaut, Sprachcheck offen
Option Explicit
Dim zweites_mal As Boolean


Private Sub FIL_Datum_Change()
O_FIL_Datum.Value = True
O_FIL_Name.Value = False
Me.Repaint
End Sub

Private Sub FIL_Datum_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Call FIL_Datum_Change
End Sub

Private Sub FIL_Name_Change()
O_FIL_Datum.Value = False
O_FIL_Name.Value = True
Me.Repaint
End Sub

Private Sub FIL_Name_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 Call FIL_Name_Change
End Sub

Private Sub UserForm_Initialize()
Dim name As String, laenge, zaehler As Integer
With Me
    sp(0) = "Filter zur|fffd|cksetzen": sp(1) = "Reset filter": .Command_zurueck.Caption = sp(s)
    sp(0) = "Filterauswahl": sp(1) = "Select Filter": .Caption = sp(s)
    sp(0) = "Datum bis": sp(1) = "up to Date": .O_FIL_Datum.Caption = sp(s)
    sp(0) = "Abbruch": sp(1) = "ESC": .Command_ESC.Caption = sp(s)
End With
FIL_Datum = Int(Now)
'---- Benutzername eingetragen --------
name = Application.UserName
If Len(name) < 4 Or UCase(Left(name, 1)) = "Q" Then
    Do
        name = InputBox(Environ("username") & ":" & vbLf & vbLf & "Bitte ""Vorname,  Name"" eingeben:", Environ("Username") & ":  Ihr Name fehlt", name)
        laenge = Len(name)
        zaehler = zaehler + 1
    Loop While laenge < 4 And zaehler < 10
    Application.UserName = name
End If

name = T_versteck.Range("J31").Value
If name <> "" Then
    laenge = Len(name)
    name = Mid(name, 2, laenge - 2)
    zweites_mal = True
Else
    name = Application.UserName
    name = Mid(name, InStrRev(name, " ") + 1)
End If
FIL_Name = name
O_FIL_Datum.Value = True
O_FIL_Name.Value = False

End Sub

Private Sub Command_ESC_Click()
Unload Me
End Sub

Private Sub Command_OK_Click()
Dim str_date, name, name_umlaute As String, dd As Long, filterbereich, b_filter As Range, r_ende As Long

T_LOP.Activate
'--- Filtern nach Name
If O_FIL_Name.Value Then
With T_versteck
    If T_LOP.AutoFilterMode Then
        Set filterbereich = T_LOP.AutoFilter.Range
        .Range("K29").Value = filterbereich.Row
    Else
        .Range("K29").Value = .Range("D4").Value + 1
    End If
    .Range("J30").Value = T_LOP.Range(.Range("B6").Value).Value
    .Range("K30").Value = T_LOP.Range(.Range("B7").Value).Value
    name = "*" & FIL_Name & "*"
    .Range("J31").Value = name
    .Range("K32").Value = name
    
    name_umlaute = Replace(Replace(Replace(Replace(name, "|fffd|", "ae", vbTextCompare), "|fffd|", "oe"), "|fffd|", "ue"), "|fffd|", "ss")
    If name <> name_umlaute Then
        name = name_umlaute
    Else
    name_umlaute = Replace(Replace(Replace(Replace(name, "ae", "|fffd|", vbTextCompare), "oe", "|fffd|"), "ue", "|fffd|"), "ss", "|fffd|")
    End If
    .Range("J33").Value = name_umlaute
    .Range("K34").Value = name_umlaute
    
    r_ende = LOP_letzte_zeile(T_LOP.Range(.Range("B4").Value), 50)
    Set b_filter = T_LOP.Range(Cells(.Range("D6").Value, .Range("C6").Value), Cells(r_ende, .Range("C7").Value))
    
    b_filter.AdvancedFilter Action:=xlFilterInPlace, CriteriaRange:=.Range("J30:K34"), Unique:=False
    ActiveWindow.LargeScroll up:=1000
End With


'----- Filtern nach Datum ----
ElseIf O_FIL_Datum.Value Then
Call Command_zurueck_Click
If IsDate(FIL_Datum) Then
        dd = DateValue(FIL_Datum)
        str_date = "<=" & Int(dd)
        If T_LOP.AutoFilterMode Then
            Selection.AutoFilter Field:=T_versteck.Range("C8").Value, Criteria1:=str_date, _
                            Operator:=xlOr, Criteria2:=""
            ActiveWindow.LargeScroll up:=1000
        End If
    Else
      If T_LOP.AutoFilterMode And FIL_Datum = "" Then Selection.AutoFilter Field:=T_versteck.Range("C8").Value, Operator:=xlAnd
    End If
End If
Unload Me
End Sub

Private Sub Command_zurueck_Click()
Dim rf As Long
If T_LOP.FilterMode Then T_LOP.ShowAllData
With T_versteck
    rf = .Range("K29").Value
    If rf = 0 Then rf = .Range("D4").Value + 1
End With
If Not T_LOP.AutoFilterMode Then T_LOP.Rows(rf & ":" & rf).AutoFilter
Unload Me
End Sub

Attribute VB_Name = "LOP_Kalender"
Attribute VB_Base = "0{2A496598-A6BE-4B4F-9DDD-BEAC6CA095F7}{E5C74822-0619-4A98-A476-2CD0AB77DE74}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' 24.11.2009: Kalender verarbeitet auch amerikansiches Datum
' 10.01.2009: Update Office 2007
' 28.10.2008 Erstellung
Option Explicit
Dim upd As Boolean

Private Sub btnspin_SpinDown()
Dim kal_start, kal_soll As Date
    kal_soll = z_sDate("01." & btnspin.Value & "." & Me.liste_jahr.Value)
    kal_start = z_sDate("01." & Me.liste_monat.Value & "." & Me.liste_jahr.Value)

If Month(kal_soll) = 12 And Month(kal_start) = 12 Then
    upd = False
    Me.liste_jahr.Value = Me.liste_jahr.Value + 1
    kal_soll = kal_soll + 31
    upd = True
End If
    kalender_aufbauen CDate(kal_soll)
End Sub

Private Sub btnspin_SpinUp()
Dim kal_start, kal_soll As Date
    kal_soll = z_sDate("01." & btnspin.Value & "." & Me.liste_jahr.Value)
    kal_start = z_sDate("01." & Me.liste_monat.Value & "." & Me.liste_jahr.Value)

If Month(kal_soll) = 1 And Month(kal_start) = 1 Then
    upd = False
    Me.liste_jahr.Value = Me.liste_jahr.Value - 1
    kal_soll = kal_soll - 31
    upd = True
End If
    kalender_aufbauen CDate(kal_soll)
End Sub

Private Sub UserForm_Initialize()
    Dim i As Integer
    
With Me
    .liste_monat.Clear
    .liste_jahr.Clear
    .liste_kw.Clear
    sp(0) = "Kalender": sp(1) = "Calendar": .Caption = sp(s)
    sp(0) = "akt. Monat": sp(1) = "this month":  .btnNow.Caption = sp(s)
    sp(0) = "Werte einf.": sp(1) = "ins. Values":  .btnInsert.Caption = sp(s)
    sp(0) = "Schlie|fffd|en": sp(1) = "Close":  .btnCancel.Caption = sp(s)
    sp(0) = "Di": sp(1) = "Tue":  .btnDi.Caption = sp(s)
    sp(0) = "Mi": sp(1) = "Wed":  .btnMi.Caption = sp(s)
    sp(0) = "Do": sp(1) = "Thu":  .btnDo.Caption = sp(s)
    sp(0) = "So": sp(1) = "Su":  .btnSo.Caption = sp(s)
End With
    
    For i = Year(Date) - 1 To Year(Date) + 5
        Me.liste_jahr.AddItem i
    Next i
    For i = 1 To 12
        Me.liste_monat.AddItem Format(DateSerial(Year(Date), i, 1), "MMMM")
    Next i
    For i = 1 To 53
        Me.liste_kw.AddItem i
    Next i
    With btnspin
    sp(0) = "Schaltet Monat": sp(1) = "Switches month"
    .SmallChange = -1: .Min = 1: .max = 12: .Value = Month(Date): .ControlTipText = sp(s)
    End With
    kalender_aufbauen Date
End Sub

Private Function kalender_aufbauen(ByVal d_Date As Date) As Integer
    Dim schalt As Control, wochentag, nYear, bNr, nDay, nMonth As Integer, datum_schalt As Date, nf As String
    nDay = Day(d_Date): nMonth = Month(d_Date): nYear = Year(d_Date)
    wochentag = Weekday(DateSerial(nYear, nMonth, 1), vbMonday) - 1
    If wochentag = 0 Then wochentag = 7
      For Each schalt In Me.Controls
        With schalt
        If Left(.name, 4) = "btn_" Then
            bNr = CInt(Right(.name, 2))
            datum_schalt = DateSerial(nYear, nMonth, bNr - wochentag)
            .Caption = Day(datum_schalt): .ControlTipText = datum_schalt: .Tag = datum_schalt
            .ForeColor = 0
            .BackColor = &HE0E0E0
            If Month(datum_schalt) <> nMonth Then .ForeColor = 8421504 'anderer Monat blass
            If datum_schalt = Date Then
                sp(0) = "Heute ": sp(1) = "Today "
                .BackColor = &HC0FFC0:  .ControlTipText = sp(s) & datum_schalt ' aktueller Tag gr|fffd|n
            End If
            If Weekday(datum_schalt) = 7 Then .BackColor = &HC0E0FF
            If Weekday(datum_schalt) = 1 Then .BackColor = &HC0E0FF
            If feiertag(datum_schalt, nf) = True Then .BackColor = &HC0E0FF: .ControlTipText = nf & ", " & .ControlTipText
        End If
        If .name = "liste_monat" Then upd = False: .Value = Format(d_Date, "MMMM")
        If .name = "liste_jahr" Then upd = False: .Value = Format(d_Date, "YYYY")
        If .name = "liste_kw" Then upd = False: .Value = kalenderwoche(d_Date)
        upd = True
      End With
      Next schalt
    TxtKW1.Value = kalenderwoche(Me.btn_06.Tag)
    TxtKW2.Value = kalenderwoche(Me.btn_13.Tag)
    TxtKW3.Value = kalenderwoche(Me.btn_20.Tag)
    TxtKW4.Value = kalenderwoche(Me.btn_27.Tag)
    TxtKW5.Value = kalenderwoche(Me.btn_34.Tag)
    TxtKW6.Value = kalenderwoche(Me.btn_41.Tag)
End Function

Private Sub BtnNow_Click()
    kalender_aufbauen Date
End Sub

Private Sub datum_schreiben(ByVal datum_schr As Date)
Dim zelle
    If Not ActiveSheet.ProtectContents Then
        For Each zelle In Selection
            With zelle
                If (Not IsDate(.Value) And Len(.Value) > 2) Then
                    .Value = .Value & Chr(10) & Left(datum_schr, 6) & Right(datum_schr, 2) & ": "
                Else: .Value = CDate(datum_schr): .NumberFormat = "dd/mm/yy"
                End If
            End With
        Next
    Else
        For Each zelle In Selection
            With zelle
                If Not .Locked Then .Value = CDate(datum_schr): .NumberFormat = "dd/mm/yy"
            End With
        Next
    End If
End Sub

Private Sub btnInsert_Click()
Dim erg As Integer
    On Error Resume Next
    erg = Selection.PasteSpecial(Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False)
    If erg = 0 Then erg = ActiveSheet.PasteSpecial(Format:="Text", Link:=False, DisplayAsIcon:=False)
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub

Private Sub liste_kw_Change()
    If upd Then kalender_aufbauen DateAdd("ww", Me.liste_kw.Value, DateSerial(Me.liste_jahr, 1, 1))
End Sub

Private Sub liste_monat_Change()
Dim kal_start As Date
    kal_start = z_sDate("01." & Me.liste_monat.Value & "." & Me.liste_jahr.Value)
    If upd Then kalender_aufbauen kal_start
    btnspin.Value = Month(kal_start)
End Sub

Private Sub liste_jahr_Change()
Dim monat, jahr As Integer
    If upd Then
            jahr = Me.liste_jahr.Value
            monat = Month(z_sDate("01." & Me.liste_monat.Value & "." & jahr))
            If monat > 6 And jahr <= Year(Date) + 1 Then
                monat = 1
            ElseIf jahr <= Year(Date) Then
                monat = 12
            End If
            kalender_aufbauen z_sDate("01." & monat & "." & jahr)
    End If
End Sub

Private Sub KW1_Click()
    datum_schreiben Date + 7
End Sub

Private Sub KW2_Click()
    datum_schreiben Date + 14
End Sub

Private Sub KW3_Click()
    datum_schreiben Date + 21
End Sub

Private Sub KW4_Click()
    datum_schreiben Date + 28
End Sub
Private Sub datum_Click(ByRef schalt As Control)
   If schalt.Value Then datum_schreiben CDate(schalt.Tag)
   schalt.Value = False
End Sub

Private Sub btn_01_Click()
    datum_Click Me.btn_01
End Sub

Private Sub btn_02_Click()
    datum_Click Me.btn_02
End Sub

Private Sub btn_03_Click()
    datum_Click Me.btn_03
End Sub

Private Sub btn_04_Click()
    datum_Click Me.btn_04
End Sub

Private Sub btn_05_Click()
    datum_Click Me.btn_05
End Sub

Private Sub btn_06_Click()
    datum_Click Me.btn_06
End Sub

Private Sub btn_07_Click()
    datum_Click Me.btn_07
End Sub

Private Sub btn_08_Click()
    datum_Click Me.btn_08
End Sub

Private Sub btn_09_Click()
    datum_Click Me.btn_09
End Sub

Private Sub btn_10_Click()
    datum_Click Me.btn_10
End Sub

Private Sub btn_11_Click()
    datum_Click Me.btn_11
End Sub

Private Sub btn_12_Click()
    datum_Click Me.btn_12
End Sub

Private Sub btn_13_Click()
    datum_Click Me.btn_13
End Sub

Private Sub btn_14_Click()
    datum_Click Me.btn_14
End Sub

Private Sub btn_15_Click()
    datum_Click Me.btn_15
End Sub

Private Sub btn_16_Click()
    datum_Click Me.btn_16
End Sub

Private Sub btn_17_Click()
    datum_Click Me.btn_17
End Sub

Private Sub btn_18_Click()
    datum_Click Me.btn_18
End Sub

Private Sub btn_19_Click()
    datum_Click Me.btn_19
End Sub

Private Sub btn_20_Click()
    datum_Click Me.btn_20
End Sub

Private Sub btn_21_Click()
    datum_Click Me.btn_21
End Sub

Private Sub btn_22_Click()
    datum_Click Me.btn_22
End Sub

Private Sub btn_23_Click()
    datum_Click Me.btn_23
End Sub

Private Sub btn_24_Click()
    datum_Click Me.btn_24
End Sub

Private Sub btn_25_Click()
    datum_Click Me.btn_25
End Sub

Private Sub btn_26_Click()
    datum_Click Me.btn_26
End Sub

Private Sub btn_27_Click()
    datum_Click Me.btn_27
End Sub

Private Sub btn_28_Click()
    datum_Click Me.btn_28
End Sub

Private Sub btn_29_Click()
    datum_Click Me.btn_29
End Sub

Private Sub btn_30_Click()
    datum_Click Me.btn_30
End Sub

Private Sub btn_31_Click()
    datum_Click Me.btn_31
End Sub

Private Sub btn_32_Click()
    datum_Click Me.btn_32
End Sub

Private Sub btn_33_Click()
    datum_Click Me.btn_33
End Sub

Private Sub btn_34_Click()
    datum_Click Me.btn_34
End Sub

Private Sub btn_35_Click()
    datum_Click Me.btn_35
End Sub

Private Sub btn_36_Click()
    datum_Click Me.btn_36
End Sub

Private Sub btn_37_Click()
    datum_Click Me.btn_37
End Sub

Private Sub btn_38_Click()
    datum_Click Me.btn_38
End Sub

Private Sub btn_39_Click()
    datum_Click Me.btn_39
End Sub

Private Sub btn_40_Click()
    datum_Click Me.btn_40
End Sub

Private Sub btn_41_Click()
    datum_Click Me.btn_41
End Sub

Private Sub btn_42_Click()
    datum_Click Me.btn_42
End Sub

Public Function kalenderwoche(ByVal datum As Variant) As Integer
    kalenderwoche = 1
    If datum = "" Then: Exit Function
    datum = CDate(datum)
    If IsDate(datum) = False Then: Exit Function
    kalenderwoche = DatePart("WW", datum, vbMonday, vbFirstFourDays)
End Function

Private Function ostern(ByVal jahr As Integer) As Date
Dim G, c, H, i, J, l, Ostermonat, Ostertag As Integer
    G = jahr Mod 19
    c = Int(jahr / 100)
    H = (c - Int(c / 4) - Int((8 * c + 13) / 25) + 19 * G + 15) Mod 30
    i = H - Int(H / 28) * (1 - Int(29 / (H + 1)) * Int((21 - G) / 11))
    J = (jahr + Int(jahr / 4) + i + 2 - c + Int(c / 4)) Mod 7
    l = i - J
    Ostermonat = 3 + Int((l + 40) / 44)
    If Ostermonat <= 3 Then Ostertag = l + 28
    If Ostermonat >= 4 Then Ostertag = l - 3
    ostern = DateSerial(jahr, Ostermonat, Ostertag)
End Function

Private Function feiertag(ByVal datum As Date, Optional ByRef nf As String) As Boolean
Dim jahr, ostersonntag As Date
    feiertag = False
    jahr = Year(datum)
    ostersonntag = ostern(jahr)
    If datum = ostersonntag - 47 Then feiertag = True: nf = "Faschingsdienstag": Exit Function
    If datum = ostersonntag - 2 Then feiertag = True: nf = "Karfreitag": Exit Function
    If datum = ostersonntag Then feiertag = True: nf = "Ostern": Exit Function
    If datum = ostersonntag + 1 Then feiertag = True: nf = "Ostermontag": Exit Function
    If datum = ostersonntag + 39 Then feiertag = True: nf = "Christi Himmelfahrt": Exit Function
    If datum = ostersonntag + 50 Then feiertag = True: nf = "Pfingsten": Exit Function
    If datum = ostersonntag + 50 Then feiertag = True: nf = "Pfingsstmontag": Exit Function
    If datum = ostersonntag + 60 Then feiertag = True: nf = "Fronleichnam": Exit Function
    If datum = DateSerial(jahr, 1, 1) Then feiertag = True: nf = "Neujahr": Exit Function
    If datum = DateSerial(jahr, 1, 6) Then feiertag = True: nf = "Heilig drei K|fffd|nig": Exit Function '
    If datum = DateSerial(jahr, 5, 1) Then feiertag = True: nf = "1. Mai": Exit Function '
    If datum = DateSerial(jahr, 8, 15) Then feiertag = True: nf = "Mari|fffd| Himmelfahrt": Exit Function
    If datum = DateSerial(jahr, 10, 3) Then feiertag = True: nf = "Tag der deutschen Einheit": Exit Function
    If datum = DateSerial(jahr, 11, 1) Then feiertag = True: nf = "Allerheiligen": Exit Function
    If datum = DateSerial(jahr, 12, 24) Then feiertag = True: nf = "Weihnachten": Exit Function
    If datum = DateSerial(jahr, 12, 25) Then feiertag = True: nf = "1. Weihnachtsfeiertag": Exit Function
    If datum = DateSerial(jahr, 12, 26) Then feiertag = True: nf = "2. Weihnachtsfeiertag": Exit Function
    If datum = DateSerial(jahr, 12, 31) Then feiertag = True: nf = "Silvester": Exit Function
End Function


Attribute VB_Name = "LOP_Modul"
' 02.08.2010: Version 6
' 01.06.2010: Formularaufruf |fffd|ber Funktion (dann keine Debugfehler beim Update)
' 27.05.2010: Mehrere LOP Zeilen in Agenda |fffd|bernehmen. Funktion auch ohne beteiligte
' 31.03.2010: Shapes nur unterhalb Pos 50 l|fffd|schen, Kalender bei rechter Maustaste,
'             Zusatzspalten in Protokoll und Agenda
' 01.02.2010: zu selektierende Agendazelle vorbelegen
' 24.11.2009: Amerikanisches Datum verarbeiten und mehrere Zellen einf|fffd|gen ohne Absturz
' 09.11.2009: Namen 500
' 10.10.2009: Erweiterte Funktionen Teilnehmer und Agenda verkn|fffd|pfen, Shapes |fffd|berarbeitet, FAQ raus
' 02.07.2009: Bugfix Agenda
' 20.05.2009: Protokoll |fffd|ber Formulareingabe, Agenda in Textform
' 12.05.2009: Mail: Namen in Zeilen suchen ge|fffd|ndert, Namensauswahl |fffd|ber Formular.
' 05.05.2009: Speichern Reduzierung der Formate auf xlsm und xls
'             Schaltfl|fffd|chen erstetzen durch Rechtecke statt Schaltfl|fffd|chen
' 08.04.2009: Agenda "Teilnehner:" eingef|fffd|gt + gelbe Termine + Maximum Rowheight 409 beachtet. + Prefixcharacter
' 27.03.2009: Menue + Bearbeitungsleiste ein/ausschalten ge|fffd|ndert.
' 20.02.2009: |fffd|berschriften ermitteln ohne .find Funktion
' 27.01.2009: Erg|fffd|nzung Einzelne Punkte per Mail versenden
' 10.01.2009: R|fffd|ckg|fffd|ngig eingebaut, Ausrichtung ben bei Protokollzellen. Freigegeben Arbeitsmappen
' 05.12.2008: Erledigter Punkt aktivieren: bugfix
' 04.11.2008: Einf|fffd|rben der Datumszelle, Updatevariable ge|fffd|ndert
' 08.10.2008: Bugfix Doppelte Erg|fffd|nzungszeilen.
' 17.09.2008: Bugfix: Startfenster raus
' 16.09.2008: LOP Menue und Analyse erg|fffd|nzt, Namenseingabe
' 10.09.2008: Protokollerstellung hinzugef|fffd|gt
'             Zoomanpassung bei Agendaaktivierung
' 01.09.2009: HTML Umformatierung Link in Mailbody entfallen (dann funktioniert Link in Mail)
'             Agendaerstellung eingebaut
' 07.08.2008: |fffd|berschriften und Filterzeile k|fffd|nnen nicht mit "erledigt" verschoben werden
'             Zeilenh|fffd|he bei Zellen |fffd|ber 1024 Zeichen ausrechnen
' 05.08.2008: Selfdel erg|fffd|nzt und umgebaut
' 04.08.2008: Mail bei "AdvancedFilters" nur sichtbare Namen und Zeilen
' 31.07.2008: Unterpunkt |fffd|berschrift Bugfix, Mail Pfad in Link Bugfix, Namen in mail.to z_ohne_umlaute
'             ThisWorkbook statt ActiveWorkbook in Protkoll
' 30.07.2008: bei Fehlender linker Kopfzeile wird Dateiname eingetragen. Style f|fffd|r mail ge|fffd|ndert.
' 25.07.2008: MailModul angehangen
' 21.07.2008: Namensauswahl eingef|fffd|gt, alle 20 Tage Startfenster anzeigen, Funktionsupdate.
' 14.07.2008: Bildschirmbreite und R|fffd|cksetzen: Selection wie vorher
'             Bildschirmaktualisierung gepr|fffd|ft
'             Datumsformat in Datumszeile beim Einf|fffd|gen und vor Speichern optimiert
'             Aktivierung von Punkten: L|fffd|sen des Verschobenvermerks
' 11.06.2008: |fffd|berschriften ermitteln nur bei speichern (nicht mehr bei |fffd|ffnen)
'             protokoll erzeugen
' 10.06.2008: T_LOP_Unterpunkt_click: Themazelle im Unterpunkt am Schlu|fffd| selektiert.
' 16.05.2008: start
' MAIL Constanten
Option Explicit
Public Const ANZAHL_NAMEN = 500
Const ANZAHL_ZEILEN = 100
Const MINIMALE_NAMENSLAENGE = 4
Const vbext_pp_none As Long = 0
Const vbext_pk_Proc As Long = 0
Const undo_anz As Integer = 10
Const Kalender = "Kalender"
Const Versionsnummer = 6
Public Const M_NORM = 0
Public Const M_MAIL_G = 1, M_MAIL_M = 2, M_PROT_G = 3, M_PROT_M = 4
Public Const M_AGEN = 5
Public Const man_up_version_neu As Integer = 4 'Version fuer manuelles Update
Public Const up_version_neu As Integer = 8 'Version fuer Codezeilen Update
' Public Const COMMANDBARNAME = "Kalender"
Dim msg_agenda As Integer, war_freigegeben As Boolean
Private Declare Function RegisterClipboardFormat Lib "user32" _
    Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long
Public op_ablauf, undo_merker As Boolean
Public s As Integer, sp(1), sp1(1), sp2(1), sp3(1), sp4(1) As String                'Variablen f|fffd|r Sprache
Public liste(ANZAHL_NAMEN) As String 'f|fffd|r |fffd|bergabe Namen an Formular
Public form_exit As Integer, agenda_einfuegepunkt As Range
Public T_Agenda_var, T_Teilnehmer_var As Worksheet 'Variable die f|fffd|r das Agendablatt steht

Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
Const SW_SHOWNORMAL = 1
Public Const MAIL_SP_ERG = "B30", MAIL_SP_UEBER = "C30", MAIL_SP_ERG1 = "D30", MAIL_SP_ERG2 = "E30", MAIL_SP_ERG3 = "F30"

Private Sub LOP_Menue_erstellen()
Dim x, z As String, ml As CommandBar, men, st(1) As String
Const wb_men = "Worksheet Menu Bar"
On Error Resume Next
st(0) = "Shift+Strg+": st(1) = "shift+ctrl+"
men = "&LOP"
MenuBars(xlWorksheet).Menus.Item("LOP").Delete
CommandBars(wb_men).Controls.Add(msoControlPopup).Caption = men
With CommandBars(wb_men).Controls(men)
    '---Hilfe---
    sp(0) = "&Hilfe": sp(1) = "&Help"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
               With .Controls(sp(s))
                .OnAction = ""
                .FaceId = 926
                .HyperlinkType = msoCommandBarButtonHyperlinkOpen
                sp(0) = "aktuell_LOP_Anleitung.pdf": sp(1) = "aktuell_LOP_UserGuide.pdf"
                .TooltipText = "file:///" & pfad_saeubern(T_versteck.Range("B20").Value) & "\" & sp(s)
               End With
'    sp(0) = "&FAQ": sp(1) = "&FAQ"
'    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
'               With .Controls(sp(s))
'                .OnAction = ""
'                .FaceId = 926
'                .HyperlinkType = msoCommandBarButtonHyperlinkOpen
'                sp(0) = "LOP_FAQ.htm": sp(1) = "LOP_FAQ.htm"
'                .TooltipText = "file:///" & pfad_saeubern(T_versteck.Range("B20").Value) & "\" & sp(s)
'               End With
    
    '---Kalender---
    sp(0) = "&Kalender": sp(1) = "&Calendar"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                .OnAction = "Kalender_anzeigen"
                .FaceId = 125
                .ShortcutText = st(s) & "K"
               End With
    '---Agenda---
    sp(0) = "&Agendapunkt aus O-Punkt erzeugen": sp(1) = "Create Agenda from open points"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 501
                    .OnAction = "T_AGENDA_erstellen"
                    .BeginGroup = True
                    .ShortcutText = st(s) & "A"
                 End With
    '--- Agenda in Kalendereintrag
    sp(0) = "&Agenda in Kalender kopieren": sp(1) = "Create Calender item from Agenda"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 501
                    .OnAction = "KAL_erzeugen"
'                    .BeginGroup = True
'                    .ShortcutText = st(s) & "C"
                 End With
    '---Protokoll---
    sp(0) = "&Protokoll aller |fffd|nderungen seit ... in Word": sp(1) = "Transfer changes since... to Word document"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 42
                    .OnAction = "PROT_gesamt_nach_Word"
                    .ShortcutText = st(s) & "P"
                 End With
    '---Word---
    sp(0) = "&Word einzelne O-Punkte schieben": sp(1) = "Transfer individual open point to"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 42
                    .OnAction = "PROT_LOPs_nach_Word"
                    .ShortcutText = st(s) & "W"
                 End With
    '---Mail---
    sp(0) = "&Mail verteilen O-Punkte je Name": sp(1) = "distribute open points by email to named persons"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 1981
                    .OnAction = "LOP_Mailen"
                    .ShortcutText = st(s) & "M"
                 End With
    '---Mail einzeln---
    sp(0) = "Ma&il markierte O-Punkte": sp(1) = "distribute marked open points by email"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                With .Controls(sp(s))
                    .FaceId = 1981
                    .OnAction = "LOP_Mailen_markierte"
                    .ShortcutText = st(s) & "S"
                 End With
                 
    '---Update---
    sp(0) = "&Update": sp(1) = "&Update"
    z = sp(s): .Controls.Add(Type:=msoControlPopup).Caption = z
    With .Controls(z)
        sp(0) = "&Info |fffd|ber Status": sp(1) = "Status information"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_Analyse"
        sp(0) = "&Autoupdate": sp(1) = "Automatic update"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_Z_Makro_auto_Update"
        sp(0) = "&Manuelles Update": sp(1) = "Manual update"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_UPD_Code_man"
                    .Controls(sp(s)).ShortcutText = st(s) & "Y"
        sp(0) = "&Update Updatecode": sp(1) = "&Update Updatecode"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "T_LOP.LOP_Makro_Update_Modul_neu_einlesen"
    End With
    '---Schaltfl|fffd|chen---
    sp(0) = "&Schaltfl|fffd|chen": sp(1) = "Control buttons"
    z = sp(s): .Controls.Add(Type:=msoControlPopup).Caption = z
    With .Controls(z)
        '-- zur|fffd|cksetzen
        sp(0) = "&Zur|fffd|cksetzen": sp(1) = "&Reset"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_ruecksetzen"
        '-- Ende
        sp(0) = "Ende der Tabelle": sp(1) = "End of table"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "T_LOP_Ende_Click"
        '-- Unterpunkt
        sp(0) = "Unterpunkt": sp(1) = "Subsidiary Item"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "T_LOP_Unterpunkt_click"
        '-- erledigt
        sp(0) = "Punkt erledigt": sp(1) = "Item Completed"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_Verschieben_erledigter_Punkte"
                    .Controls(sp(s)).ShortcutText = st(s) & "V"
        '-- sortieren
        sp(0) = "Sortieren": sp(1) = "Sort"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "T_LOP_Sortieren_Click"
        '--  filtern
        sp(0) = "Filtern": sp(1) = "Filter"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "T_LOP_Filtern_Click"
                    .Controls(sp(s)).ShortcutText = st(s) & "F"
        '-- aktivieren
        sp(0) = "Punkt wieder aktivieren": sp(1) = "Reactivate Item"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "'T_LOP_erledigt_Punkt_aktivieren"
        '-- Nummer suchen
        sp(0) = "O-Punkt Nummer suchen": sp(1) = "Search open item number"
                    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    .Controls(sp(s)).OnAction = "LOP_Nummer"
                    .Controls(sp(s)).ShortcutText = st(s) & "N"
    End With
    '---R|fffd|ckgg|fffd|ngig---
    sp(0) = "R|fffd|ckg|fffd|ngig": sp(1) = "Undo"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    With .Controls(sp(s))
                    .OnAction = "Undo_proc"
                    .ShortcutText = st(s) & "Z"
                    .BeginGroup = True
                     End With
    '---R|fffd|ckgg|fffd|ngig R|fffd|ckg|fffd|ngig---
    sp(0) = "R|fffd|ckg|fffd|ngig r|fffd|ckg|fffd|ngig": sp(1) = "Undo undo"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    With .Controls(sp(s))
                    .OnAction = "Undo_do_proc"
                    .ShortcutText = st(s) & "E"
                     End With
    '---Sprache---
    sp(0) = "English": sp(1) = "Deutsch"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    With .Controls(sp(s))
                    .OnAction = "LOP_Sprache"
                    .BeginGroup = True
                     End With
    '---CI layout---
    sp(0) = "CI Seitenlayout": sp(1) = "CI Layout"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    With .Controls(sp(s))
                    .OnAction = "z_CI_Seitenlayout"
                    .BeginGroup = True
                     End With
    '---Sprache---
    sp(0) = "Alle Zeilen formatieren": sp(1) = "Format all rows"
    .Controls.Add(Type:=msoControlButton).Caption = sp(s)
                    With .Controls(sp(s))
                    .OnAction = "LOP_alle_Titel_Zellen_formatieren"
                     End With
    CommandBars(wb_men).Visible = True
End With
End Sub

Private Sub LOP_Sprache()

On Error Resume Next
If s = 0 Then
    s = 1
Else
    s = 0
End If
T_versteck.Range("I13").Value = s
MenuBars(xlWorksheet).Menus.Item("LOP").Delete
LOP_Menue_erstellen
LOP_shapes

End Sub

Sub LOP_Update_pfad(Optional uhu As Boolean)
'--Keine Sprache
'-------- wenn hier ein neuer Updatepfad, der neuer ist,    -----
'---------als der gespeicherte, dann wird er |fffd|berschrieben  -----
'---------Ziel: Ordnerumz|fffd|ge der Updates                    -----
Dim text, erg As String
Dim datum, up_datum As Date
Dim intervall  As Integer

text = "\\europe.bmw.corp\winfs\EK-Proj\30_Querschnitt\05_EK-Prozesse\20_Prozesshomepage\50_Kochrezepte\80_LOP"
datum = DateValue("01.08.2010")
intervall = 1   'alle wieviel Tage erfolgt SoftwareUpdatePr|fffd|fung
'--------
With T_versteck
    .Range("G21") = intervall
    If .Range("K20").Value < datum Then
        If Dir(text, vbDirectory) <> "" Then .Range("B20").Value = text
        .Range("K20").Value = datum
    End If
    If Dir(.Range("B20").Value, vbDirectory) <> "" Then
        If .Range("G22").Value < Now() - 10 Then .Range("G22").Value = Now() - 10
    End If
    up_datum = .Range("G22").Value
    'xxx 29.07.2009
    If Now > up_datum + 182 And Dir(.Range("B20").Value, vbDirectory) = "" Then ' mehr als 1/2 Jahr den Update Pfad nicht gefunden
        sp1(0) = "Das Verzeichnis f|fffd|r Updates wurde seit einem halben Jahr nicht mehr gefunden" & vbLf & "Bitte geben Sie den neuen Pfad ein"
        sp1(1) = "The update directory has not been found for over six months" & vbLf & vbLf & "Please enter the new directory"
        sp2(0) = "Updatepfad falsch"
        sp2(1) = "path for updates not found"
        erg = InputBox(sp1(s), sp2(s), .Range("B20").Value)
        If erg <> "" Then .Range("B20").Value = erg
        .Range("K20").Value = 2
    End If
End With

End Sub
Private Sub z_CI_Seitenlayout()
Dim zeile_gesamt, zeile1, zeile2, zeile3, ss As String
Dim uhu1, uhu2 As String
Dim i, ii, z, x As Integer
zeile_gesamt = ActiveSheet.PageSetup.CenterFooter
ii = Len(zeile_gesamt)
If ii > 0 Then
    For i = 1 To ii
        If Mid(zeile_gesamt, i, 1) = Chr(10) Then zeile1 = Right(zeile_gesamt, ii - i): Exit For
    Next
End If
    If Len(zeile1) = 0 And Application.UserName = "" Then
        sp(0) = "Vorname Name"
        sp(1) = "First name Surname"
        zeile1 = sp(s)
    Else
        zeile1 = Application.UserName
    End If

'----------------- auslesen Titel -----------------------------
   If Len(zeile3) = 0 Then zeile3 = "Titel"
    With ActiveSheet.PageSetup
        ss = .LeftHeader
        zeile3 = Mid(ss, InStrRev(ss, vbLf) + 1)
        ss = .CenterFooter
        zeile1 = Mid(ss, InStrRev(ss, vbLf) + 1)
    End With
    
        sp1(0) = "Vorname Name": sp1(1) = "First name Surname"
        sp2(0) = "Kopfzeile": sp2(1) = "Heading"
    zeile1 = InputBox(sp1(s), sp2(s), zeile1)
    If zeile1 = "" Then Exit Sub
        sp1(0) = "Bezeichnung f|fffd|r das Arbeitsblatt": sp1(1) = "Name of Table"
        sp2(0) = "Titel": sp2(1) = "Title"
    zeile3 = InputBox(sp1(s), sp2(s), zeile3)
    If zeile3 = "" Then Exit Sub
        
    With ActiveSheet.PageSetup
        .LeftHeader = "&""Arial,Fett""&16BMW AG" & Chr(10) & zeile3
        .CenterHeader = ""
            sp1(0) = "Seite": sp1(1) = "Page"
        .RightHeader = sp1(s) & " &P  von &N"
        .LeftFooter = "&8&F, " & Chr(10) & "&A"
                sp1(0) = "Ansprechpartner": sp1(1) = "Contact"
                sp2(0) = "Version vom": sp2(1) = "Version from"
        .CenterFooter = "&""Arial,Fett""&8" & sp1(s) & "&""Arial,Standard""" & Chr(10) & zeile1
        .RightFooter = "&""Arial,Fett""&8" & sp2(s) & " &""Arial,Standard""&D"
        .HeaderMargin = Application.InchesToPoints(0.29)
        .FooterMargin = Application.InchesToPoints(0.21)
    End With
End Sub

Sub LOP_Filter_Datum()
Attribute LOP_Filter_Datum.VB_Description = "F"
Attribute LOP_Filter_Datum.VB_ProcData.VB_Invoke_Func = "F\n14"

Call z_ShowAnyForm("LOP_Filter")
End Sub

Sub LOP_Nummer()
Attribute LOP_Nummer.VB_Description = "N"
Attribute LOP_Nummer.VB_ProcData.VB_Invoke_Func = "N\n14"
Dim nummer, dDate
Dim ii As Double
T_LOP.Activate

sp(0) = "Geben Sie die zu suchende LOP-Nr. ein"
sp(1) = "Enter LOP number for search"
nummer = InputBox(sp(s), "LOP", "")
If T_LOP.AutoFilterMode Then
    If (nummer <> "") Then
        Selection.AutoFilter Field:=T_versteck.Range("C2").Value, Criteria1:=nummer
    Else
        Selection.AutoFilter Field:=1
    End If
End If
End Sub

Sub LOP_Verschieben_erledigter_Punkte()
Attribute LOP_Verschieben_erledigter_Punkte.VB_Description = "V"
Attribute LOP_Verschieben_erledigter_Punkte.VB_ProcData.VB_Invoke_Func = "V\n14"
'--Keine Sprache ' variante zellbreiten
Dim auswahl As Range
  Dim nname, auswahlzellen, z_titel, z_datum  As String
  Dim erg, r_filter, r_aktuell, r_titel, c_spalte, i, ll, ee As Integer
  Dim s_aus_lop(1000), s_aus_erl(1000) As Integer
  
 With T_versteck
   z_titel = .Range("B4").Value
   r_titel = .Range("D4").Value
   z_datum = .Range("B3").Value
 End With
 
r_aktuell = ActiveCell.Row
If T_LOP.AutoFilterMode Then
   r_filter = T_LOP.AutoFilter.Range.Row
End If

   nname = ActiveSheet.CodeName
    If nname = "T_LOP" And Selection.Rows.Count = 1 And r_titel < r_aktuell And r_filter < r_aktuell Then
        Application.ScreenUpdating = False
        ' ausgeblendete Spalten einblenden
        c_spalte = LOP_letzte_spalte(ActiveCell, 50) + 20
        For i = 1 To c_spalte
            If T_LOP.Columns(i).Hidden = True Then
                s_aus_lop(ll) = i
                ll = ll + 1
                T_LOP.Columns(i).Hidden = False
            End If
        Next
        For i = 1 To c_spalte
            If T_LOP_erledigt.Columns(i).Hidden = True Then
                s_aus_erl(ee) = i
                ee = ee + 1
                T_LOP_erledigt.Columns(i).Hidden = False
            End If
        Next
                
        Set auswahl = Selection
        auswahlzellen = auswahl.Address
        Application.EnableEvents = False
            ' Quellzeile kopieren
            Rows(ActiveCell.Row).Select
            Selection.Copy
            T_LOP_erledigt.Select
            Range(z_titel).Select
            erg = LOP_letzte_zeile(Selection, 10)
            Rows(erg + 1).Select
    
            ' Einf|fffd|gen auf erledigt
            T_LOP_erledigt.Paste
            Cells(ActiveCell.Row, T_versteck.Range("C4").Value).Select
            sp(0) = ": VERSCHOBEN NACH ERLEDIGT: "
            sp(1) = ": MOVED TO COMPLETED: "
            ActiveCell.Value = ActiveCell.Value & Chr(10) & Format(Date, "dd.mm.yy") & sp(s) & Application.UserName & ",  " & Environ("username")
            Call LOP_Themazellen_formatieren(ActiveCell)
            
            ' Quellzeile l|fffd|schen
            T_LOP.Select
            Application.CutCopyMode = False
            Selection.Delete Shift:=xlUp
            Range(auswahlzellen).Select
        Application.EnableEvents = True
                
        ' ausgeblendete Spalten wieder ausblenden
        For i = 0 To ll - 1
            T_LOP.Columns(s_aus_lop(i)).Hidden = True
        Next
        For i = 0 To ee - 1
            T_LOP_erledigt.Columns(s_aus_erl(i)).Hidden = True
        Next

        Do While ActiveCell.Height = 0
            ActiveCell.Offset(1, 0).Select
        Loop
    End If
       Application.ScreenUpdating = True
End Sub


Private Sub LOP_alle_Titel_Zellen_formatieren()
Attribute LOP_alle_Titel_Zellen_formatieren.VB_Description = "Formatierte in Spalte Thema alle Zellen mit Unterstreichung und Fettschrift f|fffd|r Datum, n|fffd|tzlich f|fffd|r Daten|fffd|bernahme"
Attribute LOP_alle_Titel_Zellen_formatieren.VB_ProcData.VB_Invoke_Func = " \n14"
'--Keine Sprache
' formatiert in LOP ALLE Themazellen von oben bis unten
' N|fffd|tzlich bei |fffd|bernahme von Dateien
On Error GoTo 0
Dim weiter As Boolean, i As Integer, zellwert As String, ii As Long, zelle As Range
    
If ActiveSheet.CodeName = "T_LOP" Or ActiveSheet.CodeName = "T_LOP_erledigt" Then
    Application.ScreenUpdating = False
    Do
        weiter = False
            With Range(T_versteck.Range("B4").Value).Offset(ii, 0)
                 zellwert = .PrefixCharacter & LOP_Datum_in_Text_kuerzen(.Value)
                 If zellwert <> .PrefixCharacter & .Value Then .Value = zellwert
                 Call LOP_Themazellen_formatieren(Range(.Address))
            For i = 0 To 50
               If .Offset(i, 0) <> "" Then weiter = True: Exit For
            Next
            ii = ii + 1
            End With
    Loop Until weiter = False
Application.ScreenUpdating = True

End If
End Sub

Public Sub LOP_Themazellen_formatieren(Target As Range)
On Error GoTo 0
'--Keine Sprache
' Formatieren der Themazelle mit rot und blau
   
Dim ii, i, f, Schlagwort, rot, sollhoehe As Integer, up As Boolean
Dim zellwert, xx As String
up = Application.ScreenUpdating
Application.ScreenUpdating = False

 If Target.Rows.Count = 1 Then
    rot = 3
    zellwert = Target.Value
    ii = Len(zellwert)
    With Target.Characters.Font
          ' .ColorIndex = xlAutomatic
          .FontStyle = "normal"
          .Underline = xlUnderlineStyleNone
    End With
    For i = 1 To ii
        If Mid(zellwert, i, 1) = Chr(10) And Schlagwort <> rot Then
            With Target.Characters(start:=1, Length:=i).Font
               .FontStyle = "Fett"
 '              .Underline = xlUnderlineStyleSingle
                Schlagwort = rot
            End With
        End If
        xx = Mid(zellwert, i + 1, 10)
        If Mid(zellwert, i, 1) = Chr(10) Then
            If z_IssDate(Mid(zellwert, i + 1, 10)) And IsNumeric(Mid(zellwert, i + 1, 1)) Then
               With Target.Characters(start:=i + 1, Length:=11).Font
                   .FontStyle = "Fett"
                End With
            ElseIf z_IssDate(Mid(zellwert, i + 1, 8)) And IsNumeric(Mid(zellwert, i + 1, 1)) Then
                With Target.Characters(start:=i + 1, Length:=9).Font
                   .FontStyle = "Fett"
                End With
            End If
        End If
    Next
    If Schlagwort <> rot Then
            With Target.Characters(start:=1, Length:=ii).Font
               .FontStyle = "Fett"
 '              .Underline = xlUnderlineStyleSingle
                Schlagwort = rot
            End With
    End If

    'xxx 07.08.2008: Zeilenh|fffd|he einstellen
     sollhoehe = LOP_Zellhoehe_soll(Target)
     With Target
         If ii > 1024 Then
            .RowHeight = sollhoehe
         Else
            .Rows.AutoFit
            If .RowHeight <= 404 Then .RowHeight = .RowHeight + 5
        End If
    End With
End If
Application.ScreenUpdating = up
End Sub

Function LOP_Zellhoehe_soll(Target As Range) As Double
Dim t As String, a, i, ii, nn, n, zz, z As Integer, b, H As Double
If Target.Cells.Count > 1 Then Exit Function
H = Target.RowHeight
LOP_Zellhoehe_soll = H
ii = Len(Target.Value)
If ii > 1024 Then
    t = Target.Value
    z = Target.Characters(2, 1).Font.Size
    b = Target.Width
    b = b / z * 2.2
    H = Target.RowHeight
    For i = 1 To ii
        If Mid(t, i, 1) = vbLf Or i = ii Then
            nn = nn + Int((i - n) / b + 1)
            n = i + 1
        End If
    Next
LOP_Zellhoehe_soll = nn * z * 1.5
If H > LOP_Zellhoehe_soll Then LOP_Zellhoehe_soll = H
If LOP_Zellhoehe_soll > 409.3 Then LOP_Zellhoehe_soll = 409.3
End If
End Function
Private Function LOP_Datum_in_Text_kuerzen(text As String) As String
Dim i, pos, z As Integer, uhux As String
'--Keine Sprache
If text <> "" Then
i = 1
    Do
        pos = InStr(i, text, ".20", vbTextCompare)
        If pos = 0 Then pos = InStr(i, text, "/20", vbTextCompare)
'xxx 07.08.2008 >= statt >
        If pos >= 6 And pos + 4 <= Len(text) Then
        uhux = Mid(text, pos - 5, 10)
            If z_IssDate(Mid(text, pos - 5, 10)) And IsNumeric(Mid(text, pos - 5, 1)) Then
                text = Left(text, pos) & Mid(text, pos + 3)
            End If
            i = pos + 3
        End If
        z = z + 1
    Loop Until (pos = 0 Or z > 10000)
LOP_Datum_in_Text_kuerzen = text
End If
End Function

Sub LOP_ueberschriften_ermitteln()
Dim rf As Integer
Dim suchbereich, suchergebnis, kriterien, zelle, ueberschrift, ueberschriften, zz As Range
Dim fehler_text As String, filterzeile As Integer, text, uhu As String, gefunden As Boolean

'--------------- wo sollen die |fffd|berschriften gesucht werden ----------------------------
If Not T_LOP.AutoFilterMode And T_versteck.Range("K29").Value = 0 Then
        T_LOP.Activate
        sp(0) = "Bitte Autofilter setzen" & Chr$(10) & "Sonst funktioniert nichts" & Chr$(10) & Chr$(10) & "Bereich Markieren >> Men|fffd|: Daten > Filter > Autofilter"
        sp(1) = "E: Bitte Autofilter setzen" & Chr$(10) & "Sonst funktioniert nichts" & Chr$(10) & Chr$(10) & "Bereich Markieren >> Men|fffd|: Daten > Filter > Autofilter"
        MsgBox (sp(s))
        Exit Sub
End If
filterzeile = T_LOP.AutoFilter.Range.Row
' 05.05.2009
Set suchbereich = T_LOP.Range(Cells(filterzeile - 1, 1).Address & ":" & Cells(filterzeile, 100).Address)

'----------|fffd|berschriftspalten anhand der Kriterien in T-versteck ermitteln ------------------------
Set ueberschriften = T_versteck.Range("A2:A9")
For Each ueberschrift In ueberschriften

    Set kriterien = T_versteck.Range("F" & ueberschrift.Row & ":K" & ueberschrift.Row)
        For Each zelle In kriterien
            If zelle.Value <> "" Then
                Set suchergebnis = Nothing
                For Each zz In suchbereich
                    If InStr(1, zz.Value, zelle.Value, vbTextCompare) > 0 Then
                        Set suchergebnis = zz
                        Exit For
                    End If
                Next
               If Not suchergebnis Is Nothing Then Exit For
            End If
        Next zelle
    If suchergebnis Is Nothing Then
        T_versteck.Range("B" & ueberschrift.Row).Value = ""
        T_versteck.Range("C" & ueberschrift.Row).Value = 0
        T_versteck.Range("D" & ueberschrift.Row).Value = 0
        fehler_text = fehler_text & "> """ & ueberschrift.Value & """ nicht gefunden: Zeile " & ueberschrift.Row & vbLf
    Else
        T_versteck.Range("B" & ueberschrift.Row).Value = suchergebnis.Address
        T_versteck.Range("C" & ueberschrift.Row).Value = suchergebnis.Column
        T_versteck.Range("D" & ueberschrift.Row).Value = suchergebnis.Row
    End If
Next ueberschrift

If T_versteck.Range("D12").Value = "NOK" Then
      T_versteck.Visible = True
      T_versteck.Activate
            sp1(0) = "Es wurden nicht alle ben|fffd|tigten Spalten|fffd|berschriften gefunden           "
            sp1(1) = "not all required column headings were found           "
            sp2(0) = "Bitte die Suchkriterien f|fffd|r Spalten|fffd|berschriften ""F2 bis K8"""
            sp2(1) = "Please adjust the search criteria for the column headings ""F2 bis K8"""
            sp3(0) = "und / oder die Spalten|fffd|berschriften in der LOP anpassen"
            sp3(1) = "and / or the column headings in the LOP"
            sp4(0) = "Fehler LOP Makroinitialisierung"
            sp4(1) = "Problem in LOP Macro initialisation"
      text = sp1(s) & vbLf & vbLf & fehler_text & vbLf & vbLf & sp2(s) & vbLf & sp3(s)
      uhu = MsgBox(text, vbExclamation, sp4(s))
End If

'-------------- genutzte Spalten f|fffd|r Ausdruck und zoom ermitteln----------------------
Dim letzte_spalte, zeile, i As Integer
Dim weiter As Boolean

zeile = T_versteck.Range("D4").Value
If zeile > 0 Then
    Set ueberschriften = T_LOP.Range(zeile & ":" & zeile)
    
    For Each ueberschrift In ueberschriften
        If ueberschrift.Value <> "" Then
            letzte_spalte = ueberschrift.Column
        Else
            weiter = False
              For i = 1 To 5
                    If ueberschrift.Offset(0, i).Value <> "" Then weiter = True: Exit For
              Next i
              If weiter = False Then Exit For
        End If
    Next ueberschrift
End If
 T_versteck.Range("C14").Value = letzte_spalte

End Sub
Private Sub LOP_Druckbereich_einstellen()
Dim r_ueber, i, ii, r_letzte As Integer
Dim inhalt, ampeln, text As String
Dim d_bereich, z_letzte, z_ueber As Range
Dim vorher As Boolean
Static nicht_erstes_mal As Boolean

'------------letzte Zelle bei Titel ermitteln--------------------------------
r_letzte = LOP_letzte_zeile(T_LOP.Range(T_versteck.Range("B4").Value), 50)

'-------------Druckbereich einstellen ----------------------------
r_ueber = T_versteck.Range("D4").Value
Set d_bereich = Range(Cells(r_ueber + 1, 1), Cells(r_letzte, T_versteck.Range("C14").Value))

vorher = Application.ScreenUpdating
Application.ScreenUpdating = False
    With T_LOP.PageSetup
        .PrintTitleRows = "$" & r_ueber & ":$" & r_ueber
        .PrintTitleColumns = ""
        .PrintArea = d_bereich.Address
        .CenterHorizontally = True
        If nicht_erstes_mal = False Then .Zoom = False: .FitToPagesWide = 1
        .FitToPagesTall = False
    End With
    
nicht_erstes_mal = True
Application.ScreenUpdating = vorher
End Sub

Function LOP_letzte_zeile(ByVal start As Range, leerpruefen As Integer) As Integer
' Keine Sprache
On Error GoTo 0
Dim i, ii   As Integer
Dim inhalt As String
'------------letzte bef|fffd|llte Zelle bei startzelle ermitteln--------------------------------
  Do
      inhalt = ""
      For i = 0 To leerpruefen
           On Error Resume Next
           inhalt = inhalt & start.Offset(i + ii, 0).Value
           If inhalt <> "" Then Exit For
      Next
      ii = ii + 1
   Loop Until inhalt = ""
LOP_letzte_zeile = start.Offset(ii - 2, 0).Row
End Function

Private Function LOP_letzte_spalte(ByVal start As Range, leerpruefen As Integer) As Integer
' Keine Sprache
On Error GoTo 0
Dim i, ii   As Integer
Dim inhalt As String
'------------letzte bef|fffd|llte Zelle bei startzelle ermitteln--------------------------------
  Do
      inhalt = ""
      For i = 0 To leerpruefen
           On Error Resume Next
           inhalt = inhalt & start.Offset(0, i + ii).Value
           If inhalt <> "" Then Exit For
      Next
      ii = ii + 1
   Loop Until inhalt = ""
LOP_letzte_spalte = start.Offset(0, ii - 2).Column
End Function

Function LOP_Max(Target As Range)
Dim zelle As Range, max As Long
For Each zelle In Target
 If zelle.Value > max Then
    On Error Resume Next
    If IsNumeric(zelle.Value) Then max = zelle.Value
  End If
Next zelle
LOP_Max = max
End Function

Sub LOP_Workbook_Activate(uhu As Boolean)
Static zweitesmal As Boolean
On Error Resume Next
Call LOP_Menue_erstellen
Call Kalender_men_einfuegen

If Application.CutCopyMode = False Then Application.DisplayFormulaBar = False
'--------------------- Zuordnen der Shortcuts zu den Makros-------------------------
With Application
    .MacroOptions Macro:="LOP_Verschieben_erledigter_Punkte", ShortcutKey:="V"
    .MacroOptions Macro:="LOP_Filter_Datum", ShortcutKey:="F"
    .MacroOptions Macro:="LOP_Nummer", ShortcutKey:="N"
    .MacroOptions Macro:="Kalender_anzeigen", ShortcutKey:="K"
    .MacroOptions Macro:="T_AGENDA_erstellen", ShortcutKey:="A"
    .MacroOptions Macro:="LOP_UPD_Code_man", ShortcutKey:="Y"
    .MacroOptions Macro:="PROT_LOPs_nach_Word", ShortcutKey:="W"
    .MacroOptions Macro:="LOP_Mailen", ShortcutKey:="M"
    .MacroOptions Macro:="PROT_gesamt_nach_Word", ShortcutKey:="P"
    .MacroOptions Macro:="Undo_proc", ShortcutKey:="Z"
    .MacroOptions Macro:="Undo_do_proc", ShortcutKey:="E"
    .MacroOptions Macro:="LOP_Mailen_markierte", ShortcutKey:="S"
End With
If zweitesmal = False Then
    ThisWorkbook.Saved = True
    zweitesmal = True
End If
End Sub

Sub LOP_Workbook_Deactivate(uhu As Boolean)
On Error Resume Next
    Application.CommandBars("Cell").Enabled = True
Do
    MenuBars(xlWorksheet).Menus.Item("LOP").Delete
Loop Until MenuBars(xlWorksheet).Menus.Item("LOP") Is Nothing
    Call Kalender_men_loeschen

'xxx 24.06.2009
 If Application.CutCopyMode = False Then Application.DisplayFormulaBar = T_versteck.Range("C13").Value

'--------------------- L|fffd|schen der Shortcuts zu den Makros-------------------------
With Application
    .MacroOptions Macro:="LOP_Verschieben_erledigter_Punkte", ShortcutKey:=""
    .MacroOptions Macro:="LOP_Filter_Datum", ShortcutKey:=""
    .MacroOptions Macro:="LOP_Nummer", ShortcutKey:=""
    .MacroOptions Macro:="Kalender_anzeigen", ShortcutKey:=""
    .MacroOptions Macro:="T_AGENDA_erstellen", ShortcutKey:=""
    .MacroOptions Macro:="LOP_UPD_Code_man", ShortcutKey:=""
    .MacroOptions Macro:="PROT_LOPs_nach_Word", ShortcutKey:=""
    .MacroOptions Macro:="LOP_Mailen", ShortcutKey:=""
    .MacroOptions Macro:="PROT_gesamt_nach_Word", ShortcutKey:=""
    .MacroOptions Macro:="Undo_proc", ShortcutKey:=""
    .MacroOptions Macro:="Undo_do_proc", ShortcutKey:=""
    .MacroOptions Macro:="LOP_Mailen_markierte", ShortcutKey:=""
End With
End Sub
Private Sub LOP_Analyse()
Dim t, erg, x As String, sh As Sheets, t_ag, t_lo, t_le, t_fe, t_te, t_ve, m_lo As String, i As Integer
With T_versteck
t = t & "Version:   " & Versionsnummer & vbLf & "Selfdel save: " & .Range("G23").Value & ", Manuell: " & .Range("G24").Value & vbLf
t = t & "|fffd|berschriften: " & .Range("D12").Value & vbLf
t = t & "Update Pfad: " & .Range("B20").Value & ", vom: " & .Range("K20").Value & vbLf
t = t & "Last Update Check: " & .Range("G22").Value & vbLf & vbLf
    sp(0) = "BL|fffd|TTER": sp(1) = "SHEETS"
t = t & "----" & sp(s) & "----" & vbLf
t = t & "Diese Arbeitsmappe:" & LOP_Analyse_Code("DieseArbeitsmappe") & vbLf
For i = 1 To Sheets.Count
     If Sheets(i).CodeName = "T_Agenda" Then t_ag = "v: " '& Sheets(i).name
     If Sheets(i).CodeName = "T_Feedback" Then t_fe = "v: " '& Sheets(i).name
     If Sheets(i).CodeName = "T_LOP" Then t_lo = "v: " '& Sheets(i).name
     If Sheets(i).CodeName = "T_LOP_erledigt" Then t_le = "v: " '& Sheets(i).name
     If Sheets(i).CodeName = "T_Teilnehmer" Then t_te = "v: " '& Sheets(i).name
     If Sheets(i).CodeName = "T_versteck" Then t_ve = "v: " '& Sheets(i).name
Next
t = t & "T_Agenda:           " & t_ag & LOP_Analyse_Code("T_Agenda") & vbLf
t = t & "T_Feedback:        " & t_fe & LOP_Analyse_Code("T_Feedback") & vbLf
t = t & "T_LOP:                 " & t_lo & LOP_Analyse_Code("T_LOP") & vbLf
t = t & "T_LOP_erledigt:   " & t_le & LOP_Analyse_Code("T_LOP_erledigt") & vbLf
t = t & "T_Teilnehmer:      " & t_te & LOP_Analyse_Code("T_Teilnehmer") & vbLf
t = t & "T_versteck:          " & t_ve & LOP_Analyse_Code("T_versteck") & vbLf
    sp(0) = "FORMULARE": sp(1) = "FORMULAS"
t = t & "----" & sp(s) & "----" & vbLf
t = t & "LOP_Filter:          " & Left(.Range("B25").Value, 10) & LOP_Analyse_Code("LOP_Filter") & vbLf
t = t & "LOP_Namens..:   " & Left(.Range("B27").Value, 10) & LOP_Analyse_Code("LOP_Namensauswahl") & vbLf
t = t & "LOP_Sortieren:    " & Left(.Range("B21").Value, 10) & LOP_Analyse_Code("LOP_Sortieren") & vbLf
t = t & "Offener_Punkt:   " & Left(.Range("B22").Value, 10) & LOP_Analyse_Code("Offener_Punkt") & vbLf
    sp(0) = "MODULE": sp(1) = "MODULS"
t = t & "----" & sp(s) & "----" & vbLf
t = t & "Kalender:            " & Left(.Range("B23").Value, 10) & LOP_Analyse_Code("Kalender") & vbLf
t = t & "LOP_Modul:        " & Left(.Range("B24").Value, 10) & LOP_Analyse_Code("LOP_Modul") & m_lo & vbLf
t = t & "Update_Code:    " & Left(.Range("B26").Value, 10) & LOP_Analyse_Code("Update_Code") & vbLf
i = Len(t)
End With
    sp(0) = "Status der LOP-Update: MAILEN ???": sp(1) = "Send LOP update by email ???"
erg = MsgBox(t, vbYesNo, sp(s))

If erg = vbYes Then
    Dim mail_app, mail_form As Object
    Set mail_app = CreateObject("Outlook.Application")
    mail_app.session.Logon
    Set mail_form = mail_app.CreateItem(0)
    With mail_form
                    .Subject = ThisWorkbook.name & ": Stand " & Int(ThisWorkbook.BuiltinDocumentProperties("Last Save Time"))
                    .display
                    .body = t & vbLf & z_GetUNCPath(ThisWorkbook.Path) & "\" & ThisWorkbook.name
    End With
End If
End Sub

Private Function LOP_Analyse_Code(m As String) As String
'-- Keine Sprache
Dim i, ii, b As Integer, m_lo, dat As String, anz As Long
With ThisWorkbook.VBProject.vbcomponents
    For i = 1 To .Count
        With .Item(i).CodeModule
            anz = .CountOfLines
            For ii = 1 To .CountOfLines
                For b = 1 To 3
                    If IsNumeric(Mid(.Lines(ii, 1), b, 1)) Then Exit For
                Next
                dat = Mid(.Lines(ii, 1), b, 10): If IsDate(dat) Then Exit For
              Next
        End With
        If .Item(i).name = m Or .Item(i).name = m & "1" Or .Item(i).name = m & "2" Then m_lo = " c: " & anz & ",  " & dat
        Next
End With
LOP_Analyse_Code = m_lo
End Function

Private Sub LOP_help()
Dim erg As Integer, datei As String

sp(0) = "LOP Schnellfhilfe"
sp1(0) = "LOP Menue: unter ""Add-Ins""" & vbLf & vbLf & _
         "Tastenk|fffd|rzel:" & vbLf & "<Shift><Strg> &" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         "P:    WORD Protokoll aller |fffd|nderungen seit..." & vbLf & _
         "W:   WORD einzelne Punkte schieben" & vbLf & _
         "M:    MAIL verteilen je Name" & vbLf & _
         "S:    MAIL versenden markierte Punkte" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         "K:    Kalender |fffd|ffnen" & vbLf & _
         "Z:    Eingabe R|fffd|ckg|fffd|ngig" & vbLf & _
         "A:    Punkt in die Agenda" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         vbLf & _
         "Anleitungsdatei |fffd|ffnen ?"
sp(1) = "LOP short help"
sp1(1) = "LOP Menue: lock at ""Add-Ins""" & vbLf & vbLf & _
         "Short cut keys:" & vbLf & "<Shift><Ctrl> &" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         "P:    WORD Transfer changes since... " & vbLf & _
         "W:   WORD Transfer individual open point" & vbLf & _
         "M:    EMAIL distribute open points to named persons" & vbLf & _
         "S:    EMAIL distribute marked open points" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         "K:    show Calendar" & vbLf & _
         "Z:    Undo" & vbLf & _
         "A:    Create Agenda from open points" & vbLf & _
         "--------------------------------------------------" & vbLf & _
         vbLf & _
         "Open help file ?"
         
erg = MsgBox(sp1(s), vbYesNo + vbDefaultButton2, sp(s))
If erg = vbYes Then
    sp(0) = "aktuell_LOP_Anleitung.pdf": sp(1) = "aktuell_LOP_UserGuide.pdf"
    datei = pfad_saeubern(T_versteck.Range("B20").Value) & "\" & sp(s)
    ShellExecute 0, "open", datei, vbNullString, "", SW_SHOWNORMAL
End If
End Sub

Private Sub LOP_shapes_add()
' f|fffd|gt nur die H|fffd|llen der Schaltfl|fffd|chen hinzu
Dim i As Integer
Dim M_zurueck, M_ende, M_erledigt, M_sort, M_unterpunkt, M_filter, M_aktivieren, M_ueberschriften, M_update, M_help, M_agenda, M_teilnehmer As Boolean
Dim sh As Shape, br As Long

Const S_HOEHE = 27, S_OBEN = 3, S_BREITE = 97, S_BREITE_FLAECHEN = 160, S_ABST = 3

With T_LOP
    For i = 1 To .Shapes.Count
        With .Shapes(i)
           If .name = "B_zurueck" Then M_zurueck = True
           If .name = "B_ende" Then M_ende = True
           If .name = "B_erledigt" Then M_erledigt = True
           If .name = "B_sort" Then M_sort = True
           If .name = "B_unterpunkt" Then M_unterpunkt = True
           If .name = "B_filter" Then M_filter = True
           If .name = "B_help" Then M_help = True
        End With
    Next
    With .Shapes
     If Not M_zurueck Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST, S_OBEN, S_BREITE, S_HOEHE):       sh.name = "B_zurueck"
     If Not M_ende Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 2 + S_BREITE, S_OBEN, S_BREITE, S_HOEHE):       sh.name = "B_ende"
     If Not M_erledigt Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 3 + S_BREITE * 2, S_OBEN, S_BREITE, S_HOEHE):   sh.name = "B_erledigt"
     If Not M_sort Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 4 + S_BREITE * 3, S_OBEN, S_BREITE, S_HOEHE):        sh.name = "B_sort"
     If Not M_unterpunkt Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 5 + S_BREITE * 4, S_OBEN, S_BREITE, S_HOEHE):  sh.name = "B_unterpunkt"
     If Not M_filter Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 6 + S_BREITE * 5, S_OBEN, S_BREITE, S_HOEHE):      sh.name = "B_filter"
     If Not M_help Then Set sh = .AddShape(msoShapeActionButtonCustom, S_ABST * 7 + S_BREITE * 6, S_OBEN, S_BREITE / 5, S_HOEHE):     sh.name = "B_help"
    End With
End With
With T_LOP_erledigt
    For i = 1 To .Shapes.Count
        With .Shapes(i)
           If .name = "B_aktivieren" Then M_aktivieren = True
        End With
    Next
    With .Shapes
     If Not M_aktivieren Then Set sh = .AddShape(msoShapeActionButtonCustom, 250, S_OBEN, S_BREITE_FLAECHEN, S_HOEHE):    sh.name = "B_aktivieren"
    End With
End With

If Not T_Teilnehmer_var Is Nothing Then
With T_Teilnehmer_var
    For i = 1 To .Shapes.Count
        With .Shapes(i)
           If .name = "B_teilnehmer" Then M_teilnehmer = True
        End With
    Next
    With .Shapes
     If Not M_teilnehmer Then Set sh = .AddShape(msoShapeActionButtonCustom, 550, S_OBEN, S_BREITE_FLAECHEN, S_HOEHE * 0.5):   sh.name = "B_teilnehmer"
    End With
End With
End If

If Not T_Agenda_var Is Nothing Then
With T_Agenda_var
    For i = 1 To .Shapes.Count
        With .Shapes(i)
           If .name = "B_agenda" Then M_agenda = True
        End With
    Next
    With .Shapes
     If Not M_aktivieren Then Set sh = .AddShape(msoShapeActionButtonCustom, 350, S_OBEN, S_BREITE, S_HOEHE / 3): sh.name = "B_agenda"
    End With
End With
End If

With T_versteck
    For i = 1 To .Shapes.Count
        With .Shapes(i)
           If .name = "B_ueberschriften" Then M_ueberschriften = True
           If .name = "B_update" Then M_update = True
        End With
    Next
    With .Shapes
     If Not M_ueberschriften Then Set sh = .AddShape(msoShapeActionButtonCustom, 300, 130, S_BREITE_FLAECHEN, S_HOEHE): sh.name = "B_ueberschriften"
     If Not M_update Then Set sh = .AddShape(msoShapeActionButtonCustom, 460, 290, S_BREITE_FLAECHEN, S_HOEHE):       sh.name = "B_update"
    End With
End With
End Sub

Private Sub LOP_shapes_delete()
Dim i, ii, vorher As Integer, blatt, sh As Worksheet, upd_vorher As Boolean, n As String
On Error Resume Next
With Application
    upd_vorher = .ScreenUpdating
    .ScreenUpdating = False
End With
Set blatt = ActiveSheet

For Each sh In ThisWorkbook.Sheets
    With sh
        n = .CodeName
        If n = "T_LOP" Or n = "T_Agenda" Or n = "T_LOP_erledigt" Or n = "T_Teilnehmer" Or n = "T_versteck" Or n = "T_Feedback" Then
            vorher = .Visible
            .Visible = xlSheetVisible
            .Activate
            For i = .Shapes.Count To 1 Step -1
                If .Shapes(i).Top < 50 Then .Shapes(i).Delete
                If n = "T_versteck" Then .Shapes(i).Delete
            Next
            .Visible = vorher
        End If
    End With
Next
blatt.Activate
Application.ScreenUpdating = upd_vorher
End Sub

Sub LOP_shapes()
Dim i, vorher As Integer, blatt As Worksheet, upd_vorher As Boolean, sel, sel2 As Variant
On Error Resume Next
With Application
    upd_vorher = .ScreenUpdating
    .ScreenUpdating = False
    .EnableEvents = False
End With
Set blatt = ActiveSheet
Set sel = Selection

Call LOP_shapes_delete
Call LOP_shapes_add
With T_LOP
    .Activate
    Set sel2 = Selection
    For i = 1 To .Shapes.Count
        With .Shapes(i)
            If .name = "B_zurueck" Or .name = "B_ende" Or .name = "B_erledigt" Or .name = "B_sort" Or .name = "B_filter" Or .name = "B_unterpunkt" Or .name = "B_help" Then
                .Shadow.Type = msoShadow17
                .Placement = xlFreeFloating
                .Select
                With Selection
                    .text = "xx"
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Orientation = xlHorizontal
                    .AutoSize = False
                    .PrintObject = False
                    With .Characters.Font
                            .name = "Arial"
                            .FontStyle = "Bold"
                            .Size = 12
                            .Strikethrough = False
                            .Superscript = False
                            .Subscript = False
                            .OutlineFont = False
                            .Shadow = False
                            .Underline = xlUnderlineStyleNone
                            .ColorIndex = xlAutomatic
                    End With
                End With
                If .name = "B_zurueck" Then
                    sp(0) = "Zur|fffd|cksetzen"
                    sp(1) = "Reset"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 42
                    .OnAction = "T_LOP.Zur|fffd|cksetzen_Click"
                ElseIf .name = "B_ende" Then
                    sp(0) = "Ende d. Liste"
                    sp(1) = "end of table"
                    Selection.text = sp(s)
                    .Fill.ForeColor.RGB = RGB(255, 157, 157)
                    .OnAction = "T_LOP.Ende_Click"
                ElseIf .name = "B_unterpunkt" Then
                    sp(0) = "Unterpunkt"
                    sp(1) = "Subpoint"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 47
                    .OnAction = "T_LOP.unterpunkt_Click"
                ElseIf .name = "B_erledigt" Then
                    sp(0) = "Punkt erledigt"
                    sp(1) = "P. finished"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.RGB = RGB(153, 255, 102)
                    .OnAction = "T_LOP.Punkt_erledigt_Click"
                ElseIf .name = "B_sort" Then
                    sp(0) = "Sortieren"
                    sp(1) = "Sort"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 46
                    .OnAction = "T_LOP.Sortieren_Click"
                ElseIf .name = "B_filter" Then
                    sp(0) = "Filtern"
                    sp(1) = "Filter"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 43
                    .OnAction = "T_LOP.Bis_heute_Click"
                ElseIf .name = "B_help" Then
                    sp(0) = "?"
                    sp(1) = "?"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.RGB = RGB(142, 180, 227)
                    .OnAction = "LOP_help"
                End If
            End If
        End With
    Next
    sel2.Select
End With
With T_LOP_erledigt
    .Activate
    Set sel2 = Selection
    For i = 1 To .Shapes.Count
        With .Shapes(i)
            If .name = "B_aktivieren" Then
                .Shadow.Type = msoShadow17
                .Placement = xlFreeFloating
                .Select
                With Selection
                    .text = "xx"
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Orientation = xlHorizontal
                    .AutoSize = False
                    .PrintObject = False
                    With .Characters.Font
                            .name = "Arial"
                            .FontStyle = "Bold"
                            .Size = 12
                            .Strikethrough = False
                            .Superscript = False
                            .Subscript = False
                            .OutlineFont = False
                            .Shadow = False
                            .Underline = xlUnderlineStyleNone
                            .ColorIndex = xlAutomatic
                    End With
                End With
                    sp(0) = "Punkt wieder aktivieren"
                    sp(1) = "Activate Point"
                .OLEFormat.Object.Caption = sp(s)
                .Fill.ForeColor.RGB = RGB(153, 255, 102)
                .OnAction = "T_LOP_erledigt.Punkt_aktivieren_Click"
            End If
        End With
    Next
    sel2.Select
End With

If Not T_Teilnehmer_var Is Nothing Then
With T_Teilnehmer_var
    .Activate
    Set sel2 = Selection
    For i = 1 To .Shapes.Count
        With .Shapes(i)
            If .name = "B_teilnehmer" Then
                .Shadow.Type = msoShadow17
                .Placement = xlFreeFloating
                .Select
                With Selection
                    .text = "xx"
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Orientation = xlHorizontal
                    .AutoSize = False
                    .PrintObject = False
                    With .Characters.Font
                            .name = "Arial"
                            .FontStyle = "Bold"
                            .Size = 8
                            .Strikethrough = False
                            .Superscript = False
                            .Subscript = False
                            .OutlineFont = False
                            .Shadow = False
                            .Underline = xlUnderlineStyleNone
                            .ColorIndex = xlAutomatic
                    End With
                End With
                    sp(0) = "Erweiterte Funktionen"
                    sp(1) = "Special functions "
                .OLEFormat.Object.Caption = sp(s)
                .Fill.ForeColor.SchemeColor = 42
                .OnAction = "Teilnehmer_erw_funktionen"
            End If
        End With
    Next
    sel2.Select
End With
End If

If Not T_Agenda_var Is Nothing Then
With T_Agenda_var
    .Activate
    Set sel2 = Selection
    For i = 1 To .Shapes.Count
        With .Shapes(i)
            If .name = "B_agenda" Then
                .Shadow.Type = msoShadow17
                .Placement = xlFreeFloating
                .Select
                With Selection
                    .text = "xx"
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Orientation = xlHorizontal
                    .AutoSize = False
                    .PrintObject = False
                    With .Characters.Font
                            .name = "Arial"
                            .FontStyle = "Bold"
                            .Size = 6
                            .Strikethrough = False
                            .Superscript = False
                            .Subscript = False
                            .OutlineFont = False
                            .Shadow = False
                            .Underline = xlUnderlineStyleNone
                            .ColorIndex = xlAutomatic
                    End With
                End With
                    sp(0) = "Erweiterte Funktionen"
                    sp(1) = "Special functions"
                .OLEFormat.Object.Caption = sp(s)
                .Fill.ForeColor.SchemeColor = 42
                .OnAction = "T_Agenda_erw_funktionen"
            End If
        End With
    Next
    sel2.Select
End With
End If

With T_versteck
    vorher = .Visible
    .Visible = xlSheetVisible
    .Activate
    Set sel2 = Selection
    For i = 1 To .Shapes.Count
        With .Shapes(i)
            If .name = "B_ueberschriften" Or .name = "B_update" Then
                .Shadow.Type = msoShadow17
                .Placement = xlFreeFloating
                .Select
                With Selection
                    .text = "xx"
                    .HorizontalAlignment = xlCenter
                    .VerticalAlignment = xlCenter
                    .Orientation = xlHorizontal
                    .AutoSize = False
                    .PrintObject = False
                    With .Characters.Font
                            .name = "Arial"
                            .FontStyle = "Bold"
                            .Size = 12
                            .Strikethrough = False
                            .Superscript = False
                            .Subscript = False
                            .OutlineFont = False
                            .Shadow = False
                            .Underline = xlUnderlineStyleNone
                            .ColorIndex = xlAutomatic
                    End With
                End With
                If .name = "B_ueberschriften" Then
                    .Shadow.Type = msoShadow17
                        sp(0) = "|fffd|berschriften auslesen"
                        sp(1) = "Detect Headlines"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 41
                    .OnAction = "T_versteck.CommandButton1_Click"
                ElseIf .name = "B_update" Then
                    .Shadow.Type = msoShadow17
                        sp(0) = "Alle Makros Updaten"
                        sp(1) = "update all macros"
                    .OLEFormat.Object.Caption = sp(s)
                    .Fill.ForeColor.SchemeColor = 41
                    .OnAction = "T_versteck.Update_Programm_Click"
                End If
            End If
        End With
    Next
    sel2.Select
    .Visible = vorher
End With
blatt.Activate
sel.Select
Application.ScreenUpdating = upd_vorher
Application.EnableEvents = True
End Sub

Sub LOP_Workbook_Open(Optional uhu As Boolean)
'--Englisch erg|fffd|nzt, Check offen
 On Error Resume Next
Dim text, erg, name As String, r_zeile, laenge, zaehler As Integer, neue_version As Boolean

war_freigegeben = ThisWorkbook.MultiUserEditing
' initaialiserung f|fffd|r das Offene Punkte Formular Agenda
With T_versteck
    If IsEmpty(.Range("I16").Value) Then .Range("I16").Value = True
    If IsEmpty(.Range("I17").Value) Then .Range("I17").Value = True
    s = T_versteck.Range("I13").Value 'Spracheinstellung holen
    .Range("K29").Value = T_LOP.AutoFilter.Range.Row ' sucht Autofilterzeile
End With
' Agenda und teilnehmer Zuordnen
Set T_Agenda_var = Nothing
For Each T_Agenda_var In ThisWorkbook.Sheets
    If T_Agenda_var.CodeName = "T_Agenda" Then
        ' XXXXXX  01.02.2010
        Set agenda_einfuegepunkt = T_Agenda_var.Range("B7")
        Exit For
    End If
Next
Set T_Teilnehmer_var = Nothing
For Each T_Teilnehmer_var In ThisWorkbook.Sheets
    If T_Teilnehmer_var.CodeName = "T_Teilnehmer" Then
        Exit For
    End If
Next

'Pr|fffd|fen ob alle Tabellenbl|fffd|tter da sind, + Erg|fffd|nzen Agenda
Call T_BLATT_Blaetter_ergaenzen

' Zur Updatem|fffd|glichkeit |fffd|lterer Versionen
With Application
    .MacroOptions Macro:="LOP_UPD_Code_man", ShortcutKey:="Y"
End With
'---------- Blendet die Bearbeitungszeile oben aus (merkt sich den Zustand vorher) ----------------
T_versteck.Range("C13") = Application.DisplayFormulaBar
' Application.DisplayFormulaBar = False

T_versteck.Visible = False
T_LOP.Activate
Range(T_versteck.Range("B4").Value).Offset(2, 0).Select

'----- einfaerben der LOP-Puntke
Call LOP_Datumsformat_gesamte_spalte

'-------- H|fffd|bsche Bildschirmbreite Anzeige -----------------
' LOP_Bildschirmbreite

'---- Sind die Module vorhanden + oeffnen der Updatemakros, wenn notwendig
' |fffd|bertrag der versionsnumemrn auf das UpdateModul
LOP_Update_pfad True
erg = Application.Run("UPD_version_uebertrag", up_version_neu, man_up_version_neu)
erg = Application.Run("LOP_Z_MAKRO_Update_WorkbookOpen")

'---- Update bei Codemodul wenn fehlt
neue_version = UPD_Update_Modul_neue_version
If ThisWorkbook.MultiUserEditing = True And neue_version Then
    Call UPD_info_freigegeben(10)
ElseIf Not UPD_Update_Modul_Vorhanden Or neue_version Then
    Call T_LOP.LOP_Makro_Update_Modul_neu_einlesen
    Call UPD_Update_Modul_neues_datum
End If
erg = LOP_advancedfilter_felder_loeschen(True)
erg = Application.Run("LOP_UPD_Code_man_vor")

'---- Benutzername eingetragen --------
name = Application.UserName
If Len(name) < 4 Or UCase(Left(name, 1)) = "Q" Then
    Do
            sp1(0) = "Bitte ""Vorname Name"" eingeben:": sp1(1) = "Please insert ""First name Surname"""
            sp2(0) = "Ihr Name fehlt": sp2(1) = "Your name is missing"
        name = InputBox(Environ("username") & ":" & vbLf & vbLf & sp1(s), Environ("Username") & ":  " & sp2(s), name)
        laenge = Len(name)
        zaehler = zaehler + 1
    Loop While laenge < 4 And zaehler < 10
    Application.UserName = name
End If
    msg_agenda = 1 'verhindert das der Agendahinweis beim |fffd|ndern der shapes aufgeht
    Call LOP_shapes
    msg_agenda = 0

'----Formulare f|fffd|r Mail und protokoll vorbef|fffd|llen ---
With T_versteck
    sp(0) = "alle": sp(1) = "all"
    .Range("I18").Value = sp(s)
    .Range("I19").Value = sp(s)
End With

'---- Hinweis Kompatibilit|fffd|t --------
Dim excel_ver As Integer, ext_org As String
With ThisWorkbook
    excel_ver = Replace(Application.Version, ".", ",")
    ext_org = Mid(.FullName, InStrRev(.FullName, ".") + 1)
    If excel_ver = 11 And ext_org = "xlsm" Then
        sp1(0) = "|fffd|nderungen k|fffd|nnen unter Office 2003 nicht gespeichert werden" & vbLf & _
                 "Wenn Sie unter Excel 2003 arbeiten wollen, |fffd|ffen Sie die Datei mit Excel 2007" & vbLf & _
                 "und speichern dort im Format 'Excel 2003'"
        sp2(0) = "Kompatibilt|fffd|tsproblem Office 2003"
        sp1(1) = "You wil not be able to save changes wit Office 2003" & vbLf & _
                    "If you need to work with Excel 2003, open the file with Excel 2007" & vbLf & _
                    "and save it as 'Excel 2003' format"
        sp2(1) = "Problem with Excel versions"
'       erg = MsgBox(sp1(s), vbCritical, sp2(s))
    End If
.Saved = True
End With

erg = Application.Run("LOP_Userexit_WorkbookOpen", ThisWorkbook.name)

End Sub

Sub LOP_Workbook_BeforeClose(Cancel As Boolean)
Dim erg As Integer
On Error Resume Next

MenuBars(xlWorksheet).Reset
Call Kalender_men_loeschen
Call LOP_Zugriff_protokoll
Application.DisplayFormulaBar = T_versteck.Range("C13").Value
Application.StatusBar = ""
End Sub

Function LOP_Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean) As Boolean
On Error Resume Next
Dim erg, ll, excel_ver As Integer, sh, ext, name_neu, ext_org As String
Static zw_durchlauf, zweitdurchlauf As Boolean
'-------- Ermittelt anhand der in Tabellenblatt t-Versteck genannten Kriterien die Spalten ------------
Call LOP_ueberschriften_ermitteln
sp3(0) = " 'Speichern unter' bewirkt meist doppelte Datenhaltung" & vbLf & _
            "LOP bitte immer an selber Stelle mit gleichem Namen ablegen" & vbLf & vbLf & _
            "Sind sie sicher, dass sie eine Kopie speichern wollen ??"
            
sp3(1) = " 'Save as' usually generates duplicated data " & vbLf & _
            "Always save LOP in the same place under the same name please" & vbLf & vbLf & _
            "Are you sure that you want to save a copy"
            
sp4(0) = "Speicherdisziplin"
sp4(1) = "Save Rules"

With ThisWorkbook
    excel_ver = Replace(Application.Version, ".", ",")
    ext_org = Mid(.FullName, InStrRev(.FullName, ".") + 1)
    If excel_ver >= 12 And ext_org = "xls" And SaveAsUI = False And Not zw_durchlauf And Not zweitdurchlauf Then
                sp1(0) = "Die LOP l|fffd|uft unter Excel 2007 stabiler und braucht weniger Speicher" & vbLf & "Umwandlung durch:" & vbLf & vbLf & _
                        "-  'Konvertieren' unterhalb von 'Datei |fffd|fffnen'" & vbLf & _
                        "                                                                            ODER" & vbLf & "-  Speichern unter '*.xlsm'"
                sp1(1) = "The LOP is more sable with Excel 2007 and less space is necessary" & vbLf & vbLf & "Use 'Conversion' under 'open File' OR save as '*.xlsm'"
                sp2(0) = "Empfehlung zur Konvertierung Excel 2007"
                sp2(1) = "recommendation of conversion to Excel 2007"
        erg = MsgBox(sp1(s), vbOKOnly, sp2(s))
        zweitdurchlauf = True
    End If
    If SaveAsUI = True Or ext_org = "xlsx" Then
                sp(0) = "Speichern unter             (Reduzierte Auswahl der Dateiformate f|fffd|r LOP)"
                sp(1) = "Save as                     (Choice of fileformats reduced for LOP)"
            If excel_ver = 11 Then
                If ext_org = "xls" Then
                    name_neu = Application.GetSaveAsFilename(fileFilter:="Excel 2003 (*.xls), *.xls", Title:=sp(s))
                ElseIf ext_org = "xlsm" Then
                    name_neu = Application.GetSaveAsFilename(fileFilter:="Excel 2007 (*.xlsm), *.xlsm", Title:=sp(s))
                End If
                ext = Mid(name_neu, InStrRev(name_neu, ".") + 1)
                If name_neu = False Then
                    Cancel = True 'Abbruch
                ElseIf name_neu <> .FullName And ext = ext_org Then
                    erg = MsgBox(sp3(s), vbYesNo, sp4(s))
                    If erg = vbNo Then Cancel = True
                End If
                If (ext = "xls" Or ext = "xlsm") And Cancel = False Then
                    zw_durchlauf = True
                    .SaveAs Filename:=name_neu
                    Cancel = True
                End If
            ElseIf excel_ver >= 12 Then
                If ext_org = "xls" Then
                    name_neu = Application.GetSaveAsFilename(fileFilter:="Excel 2003 (*.xls), *.xls,Excel 2007 (*.xlsm), *.xlsm", Title:=sp(s))
                ElseIf ext_org = "xlsm" Or ext_org = "xlsx" Then
                    name_neu = Application.GetSaveAsFilename(fileFilter:="Excel 2007 (*.xlsm), *.xlsm, Excel 2003 (*.xls), *.xls", Title:=sp(s))
                End If
                ext = Mid(name_neu, InStrRev(name_neu, ".") + 1)
                If name_neu = False Then
                    Cancel = True 'Abbruch
                ElseIf name_neu <> .FullName And ext = ext_org Then
                    erg = MsgBox(sp3(s), vbYesNo, sp4(s))
                    If erg = vbNo Then Cancel = True
                End If
                If ext = "xls" And Cancel = False Then
                    zw_durchlauf = True
                    .SaveAs Filename:=name_neu, FileFormat:=56 'xlExcel8
                    Cancel = True
                ElseIf (ext = "xlsm" Or ext = "xlsx") And Cancel = False Then
                    If ext = "xlsx" Then name_neu = Left(name_neu, Len(name_neu) - 4) & "xlsm"
                    zw_durchlauf = True
                    .SaveAs Filename:=name_neu, FileFormat:=52 'xlOpenXMLWorkbookMacroEnabled
                    Cancel = True
                End If
            End If
    End If
End With
'---- Update bei Codemodul wenn fehlt oder neueres vorliegt
' xxx 02.09.2008
If Not UPD_Update_Modul_Vorhanden Then
    Call T_LOP.LOP_Makro_Update_Modul_neu_einlesen
    Call UPD_Update_Modul_neues_datum
ElseIf UPD_Update_Modul_neue_version And T_versteck.Range("G25").Value = 0 Then 'nur wenn in diesem Speicherzyklus kein Modul upgedatet wrude, dann UPDATEcode updaten
    If Run("UPD_merker", 0) <> vbCancel Then
        Call T_LOP.LOP_Makro_Update_Modul_neu_einlesen
        Call UPD_Update_Modul_neues_datum
    End If
End If

'-------- Update mit selbstl|fffd|schendem CODE -----------------------
Application.Run "LOP_UPD_Code"
erg = ""
erg = Application.Run("LOP_Userexit_WorkbookBevorSave", ThisWorkbook.name, SaveAsUI, Cancel)
If "false" = LCase(erg) Then Cancel = False
If "true" = LCase(erg) Then Cancel = True
LOP_Workbook_BeforeSave = Cancel
zw_durchlauf = False
End Function

Sub LOP_Workbook_AddinUninstall(uhu As Boolean)
   Call Kalender_men_loeschen
End Sub

Sub LOP_Workbook_BeforePrint(Cancel As Boolean)
Dim text As String

If ActiveSheet.CodeName = T_LOP.CodeName Then
    Call LOP_Druckbereich_einstellen
        sp1(0) = "Soll ""Protokoll"" als |fffd|berschrift gedruckt werden ???"
        sp1(1) = "Should ""Minutes"" be printed as heading"
        sp2(0) = "Druckabfrage"
        sp2(1) = "Print confirmation"
    If 6 = MsgBox(sp1(s), vbYesNo + vbDefaultButton2, sp2(s)) Then
            sp1(0) = "|fffd|berschrift in Kopfzeile eintragen"
            sp1(1) = "Enter Heading Titles"
            sp2(0) = "Kopfzeile"
            sp2(1) = "Headings"
        text = InputBox(sp1(s), sp2(s), T_versteck.Range("B19").Value)
        T_LOP.PageSetup.CenterHeader = "&14" & text & "&"
        T_versteck.Range("B19").Value = text
    Else
        T_LOP.PageSetup.CenterHeader = ""
    End If
End If
End Sub

Sub T_LOP_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
'-- keine Sprache
End Sub

Sub T_LOP_Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
    Dim datedummy As Date
    Dim spalte2, i, r_filter, b, mod_i As Integer
    Dim vorher As Boolean
    Dim text, erg As String
    Static t_teilnehmer_gefunden, lop_namensauswahl_gefunden As Boolean
    op_ablauf = M_NORM
    
    CommandBars("Cell").Controls("Kalender").OnAction = "Kalender_anzeigen"
    CommandBars("Cell").Enabled = True
    If T_LOP.AutoFilterMode Then r_filter = T_LOP.AutoFilter.Range.Row

    ' ---- Filtereingabe in Autofilterzeile
    If ActiveCell.Row = r_filter Then
                sp1(0) = "Sucht ""enth|fffd|lt"" in Spalte "
                sp1(1) = "searching for ""enth|fffd|lt"" in column "
                sp2(0) = "Autofilter Eingabe"
                sp2(1) = "Input for Autofilter"
            text = InputBox(sp1(s) & Chr$(Asc("A") - 1 + ActiveCell.Column), sp2(s))
            If text <> "" Then
                Selection.AutoFilter Field:=ActiveCell.Column - T_LOP.AutoFilter.Range.Column + 1, _
                Criteria1:="=*" & text & "*", Operator:=xlAnd
            Else
                Selection.AutoFilter Field:=ActiveCell.Column - T_LOP.AutoFilter.Range.Column + 1
            End If
        ActiveWindow.LargeScroll up:=1000
        CommandBars("Cell").Enabled = False
    
    ' ---- Maske f|fffd|r offener Punkt bei Spalte Titel
    ElseIf (ActiveCell.Column = T_versteck.Range("C4").Value) Then
        datedummy = DateValue(Now)
        'xxx 01.06.2010
        Call z_ShowAnyForm("Offener_Punkt", vbModal)
        On Error Resume Next
        CommandBars("Cell").Enabled = False
    
    ' ---- Kalender bei Spalte Termin
    ElseIf (ActiveCell.Column = T_versteck.Range("C8").Value) Then
        Call Kalender_anzeigen
        On Error Resume Next
        CommandBars("Cell").Enabled = False
    
    ' ---- Maske Namensauswahl (wenn Blatt T_Teilnehmer existiert 'xxx 09.09.08
    ElseIf ActiveCell.Row <> r_filter And ((ActiveCell.Column = T_versteck.Range("C6").Value) Or ActiveCell.Column = T_versteck.Range("C7").Value Or ActiveCell.Column = T_versteck.Range("C3").Value) Then
            If Not t_teilnehmer_gefunden Then
                With ThisWorkbook
                    For b = 1 To .Sheets.Count
                        If .Worksheets(b).CodeName = "T_Teilnehmer" Then t_teilnehmer_gefunden = True: Exit For
                    Next
                End With
            End If
            If Not lop_namensauswahl_gefunden Then
                With ActiveWorkbook.VBProject
                    For mod_i = 1 To .vbcomponents.Count
                       If .vbcomponents.Item(mod_i).name = "LOP_Namensauswahl" Or .vbcomponents.Item(mod_i).name = "LOP_Namensauswahl1" Then
                            lop_namensauswahl_gefunden = True
                            Exit For
                        End If
                    Next
                End With
            End If
            If (t_teilnehmer_gefunden And lop_namensauswahl_gefunden) Or (t_teilnehmer_gefunden And ThisWorkbook.MultiUserEditing) Then
                Call LOP_Namensauswahl_start
                CommandBars("Cell").Enabled = False
                    If InStr(1, ActiveCell.Value, ".20") > 0 Then
                        Application.ScreenUpdating = False
                        ActiveCell.Value = Replace(ActiveCell.Value, ".20", ".")
                        Application.ScreenUpdating = True
                    End If
                    If InStr(1, ActiveCell.Value, "/20") > 0 Then
                        Application.ScreenUpdating = False
                        ActiveCell.Value = Replace(ActiveCell.Value, "/20", "/")
                        Application.ScreenUpdating = True
                    End If
            End If
    End If
erg = Application.Run("LOP_Userexit_WorksheetBevorRightClick", ThisWorkbook.name, Target.Address, Cancel)
If "false" = LCase(erg) Then Cancel = False
If "true" = LCase(erg) Then Cancel = True

End Sub
Private Sub LOP_Namensauswahl_start()
'-- keine Sprache
Call z_ShowAnyForm("LOP_Namensauswahl")
End Sub
Sub T_LOP_erledigt_Worksheet_Change(ByVal Target As Range)
'-- keine Sprache
Dim up As Boolean, zellwert As String
up = Application.ScreenUpdating
Application.ScreenUpdating = False
    If Target.Count = 1 Then
        If (Target.Column = T_versteck.Range("C4").Value) Then
           zellwert = LOP_Datum_in_Text_kuerzen(Target.Value)
           If zellwert <> Target.Value Then Target.Value = zellwert
          Call LOP_Themazellen_formatieren(Target)
        End If
    End If
Call Undo_change(Target)
Application.ScreenUpdating = up
End Sub
Sub T_LOP_erledigt_Worksheet_SelectionChange(ByVal Target As Range)
Call Undo_selection_change(Target)
End Sub

Sub T_LOP_erledigt_Worksheet_Activate(uhu As Boolean)
'-- keine Sprache
Dim i, br, letzte_sp As Integer, up As Boolean
up = Application.ScreenUpdating
Application.ScreenUpdating = False

letzte_sp = LOP_letzte_spalte(T_LOP.Range(T_versteck.Range("B4").Value), 30)

For i = 1 To letzte_sp + 10
    br = T_LOP.Columns(i).ColumnWidth
    T_LOP_erledigt.Columns(i).ColumnWidth = br
Next
Call LOP_Bildschirmbreite
Application.ScreenUpdating = up
End Sub

Sub T_LOP_erledigt_Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
'-- keine Sprache
End Sub

Sub T_LOP_erledigt_Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
'-- keine Sprache
Dim r_filter As Integer
Dim text As String
CommandBars("Cell").Enabled = True
    If T_LOP.AutoFilterMode Then r_filter = T_LOP_erledigt.AutoFilter.Range.Row

    If ActiveCell.Row = r_filter Then
                sp1(0) = "Sucht ""enth|fffd|lt"" in Spalte "
                sp1(1) = "searching for ""enth|fffd|lt"" in column "
                sp2(0) = "Autofilter Eingabe"
                sp2(1) = "Input for Autofilter"
            text = InputBox(sp1(s) & Chr$(Asc("A") - 1 + ActiveCell.Column), sp2(s))
            If text <> "" Then
                Selection.AutoFilter Field:=ActiveCell.Column - T_LOP_erledigt.AutoFilter.Range.Column + 1, _
                Criteria1:="=*" & text & "*", Operator:=xlAnd
            Else
                Selection.AutoFilter Field:=ActiveCell.Column - T_LOP_erledigt.AutoFilter.Range.Column + 1
            End If
        ActiveWindow.LargeScroll up:=1000
        CommandBars("Cell").Enabled = False
    End If
End Sub
Sub T_LOP_erledigt_Punkt_aktivieren(Optional uhu As Boolean)
'-- keine Sprache
  Dim auswahl, z_aktuelles_thema As Range
  Dim nname, auswahlzellen, z_titel, z_datum As String, up As Boolean
  Dim erg, pos, c_spalte, i, ll, ee As Integer
  Dim s_aus_lop(1000), s_aus_erl(1000) As Integer
  
 With T_versteck
   z_titel = .Range("B4").Value
   z_datum = .Range("B3").Value
 End With

   nname = ActiveSheet.CodeName
    If nname = "T_LOP_erledigt" And Selection.Rows.Count = 1 Then

        Application.ScreenUpdating = False
        ' ausgeblendete Spalten einblenden
        c_spalte = LOP_letzte_spalte(ActiveCell, 50) + 20
        For i = 1 To c_spalte
            If T_LOP.Columns(i).Hidden = True Then
                s_aus_lop(ll) = i
                ll = ll + 1
                T_LOP.Columns(i).Hidden = False
            End If
        Next
        For i = 1 To c_spalte
            If T_LOP_erledigt.Columns(i).Hidden = True Then
                s_aus_erl(ee) = i
                ee = ee + 1
                T_LOP_erledigt.Columns(i).Hidden = False
            End If
        Next

        Set auswahl = Selection
        auswahlzellen = auswahl.Address
        
        Set z_aktuelles_thema = Cells(ActiveCell.Row, Range(z_titel).Column)
        pos = InStrRev(z_aktuelles_thema.Value, Chr(10))
        ' 05.12.2008
        If pos = 0 Then pos = 1
        
        sp(0) = ": VERSCHOBEN NACH ERLEDIGT: "
        sp(1) = ": MOVED TO COMPLETED: "
        If InStr(pos, z_aktuelles_thema.Value, sp(0), vbTextCompare) Or InStr(pos, z_aktuelles_thema.Value, sp(1), vbTextCompare) Then
            z_aktuelles_thema.Value = Left(z_aktuelles_thema.Value, pos - 1)
        End If
        Rows(ActiveCell.Row).Select
        Selection.Copy
        T_LOP.Select
        Range(z_titel).Select
        erg = LOP_letzte_zeile(Selection, 50)
        Rows(erg + 1).Select

        T_LOP.Paste
        Cells(ActiveCell.Row, T_versteck.Range("C4").Value).Select
          
        T_LOP_erledigt.Select
        Application.CutCopyMode = False
        Selection.Delete Shift:=xlUp
        
        ' ausgeblendete Spalten wieder ausblenden
        For i = 0 To ll - 1
            T_LOP.Columns(s_aus_lop(i)).Hidden = True
        Next
        For i = 0 To ee - 1
            T_LOP_erledigt.Columns(s_aus_erl(i)).Hidden = True
        Next
   
        Range(auswahlzellen).Select
    End If
       Application.ScreenUpdating = True
End Sub

Sub T_LOP_Worksheet_Change(ByVal Target As Range)
'-- keine Sprache
On Error Resume Next
Dim spalte, spalte_n, spalte_d, spalte_t, spalte_w, zeile, sp, r_letzte, neue_nummer As Integer
Dim z_datum, z_nummer, Z_spalte, zelle As Range
Dim zellwert, erg As String, up, undo_no As Boolean

up = Application.ScreenUpdating
Application.ScreenUpdating = False
With T_versteck
      spalte_d = .Range("C3").Value 'Einstelldatum
      spalte_n = .Range("C2").Value 'Nummer
      spalte_t = .Range("C4").Value 'Title
      spalte_w = .Range("C8").Value 'termin
End With

For Each zelle In Target.Cells
    spalte = zelle.Column
    zeile = zelle.Row
    If spalte = spalte_t Or spalte = spalte_n Or spalte = spalte_d Or spalte = spalte_w Then
    
    ' ----------Wenn THEMA Spalte----------
        If (spalte = spalte_t) Then
            With zelle
                zellwert = .PrefixCharacter & LOP_Datum_in_Text_kuerzen(.Value)
                If zellwert <> .PrefixCharacter & .Value Then .Value = zellwert
                LOP_Themazellen_formatieren zelle
            End With
    '-------Datum eintragen -------------------------------
          If spalte_d > 0 Then
            Set z_datum = Cells(zeile, spalte_d)
            If Cells(zeile, spalte_t).Value <> "" Then
                If z_datum.Value = "" Then z_datum.Value = Int(Now)
            End If
          End If
    '-------Nr eintragen, wenn nicht existent----------------
          If spalte_n > 0 Then
            Set z_nummer = Cells(zeile, spalte_n)
            If z_nummer.Value = "" Then
                Set Z_spalte = Columns(spalte_n)
                r_letzte = LOP_letzte_zeile(Cells(1, spalte_n), 50)
                neue_nummer = 1 + LOP_Max(Range(Cells(1, spalte_n), Cells(r_letzte, spalte_n)))
                While T_LOP_erledigt_nummer_frei(neue_nummer, spalte_n) = False
                    neue_nummer = neue_nummer + 1
                Wend
                If Cells(zeile, spalte_t).Value <> "" Then
                    z_nummer.Value = neue_nummer
                End If
            End If
          End If
        End If
    ' ------------Wenn terminspalte --------------
        If (spalte = T_versteck.Range("C8").Value) Then Call LOP_Datumsformat_sicherstellen(zelle)
    If zelle.Column <> spalte_n And zelle.Column <> spalte_d Then Call Undo_change(zelle)
    End If
Next
    Application.ScreenUpdating = up
    erg = Application.Run("LOP_Userexit_WorksheetChange", ThisWorkbook.name, Target.Address)
End Sub

Sub T_LOP_Worksheet_SelectionChange(ByVal Target As Range)
Call Undo_selection_change(Target)
End Sub

Private Function T_LOP_erledigt_nummer_frei(ByVal nummer As Integer, ByVal spalte As Integer) As Boolean
Dim r_letzte, i As Integer
T_LOP_erledigt_nummer_frei = True
With T_LOP_erledigt
    r_letzte = LOP_letzte_zeile(.Cells(1, spalte), 20)
    For i = 1 To r_letzte
        If Val(.Cells(i, spalte).Value) = nummer Then T_LOP_erledigt_nummer_frei = False: Exit For
    Next
End With
End Function
Sub LOP_ruecksetzen()
'-- keine Sprache
'------------- Filter raus -& Zoomen------------------------------
Dim z_vorher As Range, r_ueber, rf As Integer, erg

If T_LOP.FilterMode Then T_LOP.ShowAllData
With T_versteck
    rf = .Range("K29").Value
    If rf = 0 Then rf = .Range("D4").Value + 1
End With
If Not T_LOP.AutoFilterMode Then T_LOP.Rows(rf & ":" & rf).AutoFilter
    
    For Each T_Agenda_var In ThisWorkbook.Sheets
        If T_Agenda_var.CodeName = "T_Agenda" Then Exit For
    Next
    For Each T_Teilnehmer_var In ThisWorkbook.Sheets
        If T_Teilnehmer_var.CodeName = "T_Teilnehmer" Then Exit For
    Next

If Not Application.Run("Alle_Module_vorhanden") Then LOP_Z_MAKRO_Update_WorkbookOpen
LOP_Bildschirmbreite

Application.EnableEvents = True
End Sub
Private Sub LOP_Bildschirmbreite()
'-- keine Sprache
Dim r_ueber As Integer
Dim r As Range
    Set r = Selection
    r_ueber = T_versteck.Range("D4")
    Range(Cells(r_ueber, 1), Cells(r_ueber, T_versteck.Range("C14").Value)).Select
    ActiveWindow.Zoom = True
    r.Select
End Sub

Sub T_LOP_Ende_Click(Optional uhu As Boolean)
'---- unteres Ende der Tabelle ---------------------------------------
Dim z_ueber As Range, r_letzte As Integer
Set z_ueber = T_LOP.Range(T_versteck.Range("B4").Value)
    r_letzte = LOP_letzte_zeile(z_ueber, 50)
    z_ueber.Offset(r_letzte - z_ueber.Row + 1, 0).Select
End Sub

Sub T_LOP_Sortieren_Click(Optional uhu As Boolean)
  Call z_ShowAnyForm("LOP_Sortieren")
End Sub

Sub T_LOP_Filtern_Click(Optional uhu As Boolean)
'-- keine Sprache
  LOP_Filter_Datum
End Sub

Sub T_LOP_Unterpunkt_click(Optional uhu As Boolean)
'-- keine Sprache
Dim z_nummer, z_titel As Range, r_zeile, ii, i As Integer, zellwert As String
r_zeile = ActiveCell.Row

' Pr|fffd|fen zeile ob unter Filterzeile
If r_zeile > T_versteck.Range("K29").Value Then
    ActiveCell.Offset(1, 0).EntireRow.Insert
    
    '-----------Nummer schreiben ----------
    Set z_nummer = Cells(r_zeile, T_versteck.Range("C2").Value)
    z_nummer.Offset(1, 0).Value = z_nummer.Value
    
    '-----------|fffd|berschrift schreiben ----------
    Set z_titel = Cells(r_zeile, T_versteck.Range("C4").Value)
    zellwert = z_titel.Value
 
    ii = Len(zellwert)
        For i = 1 To ii
    'xxx 31.07.2008
            If Mid(zellwert, i, 1) = Chr(10) Or i = ii Then
                z_titel.Offset(1, 0).Value = Left(zellwert, i) ' & DateValue(Now)
                Exit For
            End If
        Next
    ActiveCell.Offset(1, 0).Select
End If
End Sub

Private Sub LOP_Zugriff_protokoll()
'-- keine Sprache
Dim yy, dat, verz, lop As String
 On Error Resume Next
yy = z_GetUNCPath(ThisWorkbook.FullNameURLEncoded)
lop = "LOP"
verz = "\\europe.bmw.corp\winfs\W07-data\00_Transfer_tmp\" & lop

If Not Dir(verz, vbDirectory) = lop Then MkDir verz: Application.Wait (Now + TimeValue("0:00:01"))
If Dir(verz, vbDirectory) = lop Then
    Const ForAppending = 8
    Dim fs, f
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set f = fs.OpenTextFile(verz & "\LOP.txt", ForAppending, True, 0)
    dat = Format(Now(), "dd.mm.yy")
    f.Write Environ("username") & "  " & dat & " " & Versionsnummer & "  " & yy & vbCrLf
    f.Close
End If
End Sub

Function z_GetUNCPath(Path)
'-- keine Sprache
    Dim Drive, fso, ws
On Error Resume Next
Set fso = CreateObject("Scripting.FileSystemObject")
Set ws = CreateObject("WScript.Shell")
    z_GetUNCPath = ""
    ' Pfad bereits in UNC Notation?
    If Left(Path, 1) = "\" Then
        z_GetUNCPath = Path
        Exit Function
    End If

    'U-Laufwerk?
    If Left(Path, 1) = "U" Then
        Set Drive = Nothing
        z_GetUNCPath = Path
        Exit Function
    End If

    ' Laufwerk ermitteln (x:\)
    Set Drive = fso.GetDrive(Left(Path, 3))

    ' Netzwerklaufwerk?
    If Drive.DriveType <> "3" Then
        Set Drive = Nothing
        Exit Function
    End If
    ' Sharename enth|fffd|lt den UNC Pfad
'xxx 31.07.2008
    If Drive.ShareName <> "" Then
        z_GetUNCPath = Drive.ShareName & Mid(Path, 3)
    Else
        z_GetUNCPath = Path
    End If
    Set Drive = Nothing

End Function
Function LOP_advancedfilter_felder_loeschen(uhu As Boolean)
'-- keine Sprache
Dim rf As Integer
With T_versteck
    .Range("J31").Value = ""
    .Range("K32").Value = ""
    .Range("J33").Value = ""
    .Range("K34").Value = ""
rf = T_versteck.Range("K29").Value
If rf = 0 Then rf = T_versteck.Range("D4").Value + 1
If Not T_LOP.FilterMode And Not T_LOP.AutoFilterMode Then T_LOP.Rows(rf & ":" & rf).AutoFilter
End With
End Function
Private Sub LOP_Datumsformat_gesamte_spalte()
Dim erg, ll As Integer, uuu As Range, sh As String, bevor As Boolean

'-------- Stellt in der Datumsspalte sicher, dass alles als Datum angezeigt wird. ------------
'-------- incl. Farbe gr|fffd|n rot -----
With T_versteck
    ll = LOP_letzte_zeile(T_LOP.Range(.Range("B4").Value), 50)
Set uuu = T_LOP.Range(Cells(.Range("D8").Value, .Range("C8").Value), Cells(ll, .Range("C8").Value))
End With

sh = ActiveSheet.name
bevor = Application.ScreenUpdating
Application.ScreenUpdating = False
T_LOP.Activate
Call LOP_Datumsformat_sicherstellen(uuu)
Sheets(sh).Activate
Application.ScreenUpdating = bevor
End Sub
Sub LOP_Datumsformat_sicherstellen(ra As Range)
'-- keine Sprache
Dim d As Date, r As Range, up As Boolean
On Error Resume Next
up = Application.ScreenUpdating
Application.ScreenUpdating = False

For Each r In ra.Cells
    With r
        If IsDate(.Value) And TypeName(.Value) <> "Date" Then
            d = CDate(.Value)
            .Value = d
            .NumberFormat = "General"
        End If
        If IsDate(.Value) Then
            If CDate(.Value) < Date Then
                .Interior.ColorIndex = 40
            Else
                .Interior.ColorIndex = 35
            End If
'xxx 30.10.2009
        ElseIf T_LOP.AutoFilterMode Then
                If ra.Row > T_LOP.AutoFilter.Range.Row Then .Interior.ColorIndex = 36
        End If
    End With
    r.NumberFormat = "dd/mm/yy"
Next
Application.ScreenUpdating = up
End Sub
Private Function UPD_Update_Modul_Vorhanden() As Boolean
Dim i, update_m As Integer, vorhanden, x0, x1, x2 As Boolean, kompo, elementname, pfad, x As String, fso As Variant, geaendert As Date
On Error Resume Next
elementname = "Update_Code"
vorhanden = False
With ThisWorkbook.VBProject
For i = 0 To 3
    x0 = False: x1 = False: x2 = False
        x = "": x = .vbcomponents(elementname).name
    If x <> "" Then x0 = True
        x = "": x = .vbcomponents(elementname & "1").name
    If x <> "" Then x1 = True
        x = "": x = .vbcomponents(elementname & "2").name
    If x <> "" Then x2 = True
    If i = 3 Then Exit For
    If Not x1 And x2 Then .vbcomponents(elementname & "2").name = elementname & "1"
    If Not x0 And x1 Then .vbcomponents(elementname & "1").name = elementname
    If x1 And x2 Then .vbcomponents.Remove .vbcomponents(elementname & "1")
    If x0 And x2 Then .vbcomponents.Remove .vbcomponents(elementname)
    If x0 And x1 Then .vbcomponents.Remove .vbcomponents(elementname)
Next
    If x0 Or x1 Or x2 Then vorhanden = True
End With
UPD_Update_Modul_Vorhanden = vorhanden
End Function

Private Function UPD_Update_Modul_neue_version() As Boolean
Dim i, update_m As Integer, neue_version, x0, x1, x2 As Boolean, kompo, elementname, pfad, x As String, fso As Variant, geaendert As Date
On Error Resume Next
neue_version = False
elementname = "Update_Code"
pfad = T_versteck.Range("B20").Value

Set fso = CreateObject("Scripting.filesystemobject")
geaendert = fso.getfolder(pfad).Files(elementname & ".bas").datelastmodified
If Not IsEmpty(geaendert) And geaendert > CDate(T_versteck.Range("B26").Value) Then
    Call UPD_info_freigegeben(11)
    update_m = CInt(Application.Run("UPD_merker", 0))
    sp1(0) = "Wollen Sie das Update durchf|fffd|hren"
    sp1(1) = "Do you want to conduct an update"
    sp2(0) = "Update Start"
    sp2(1) = "Start Update"
    If update_m <> vbCancel Then update_m = MsgBox(sp1(s) & vbLf & elementname, vbOKCancel, sp2(s))
    If update_m = vbOK Then neue_version = True
End If
update_m = CInt(Application.Run("UPD_merker", update_m))
UPD_Update_Modul_neue_version = neue_version
End Function

Private Sub UPD_Update_Modul_neues_datum()
Dim i, update_m As Integer, vorhanden, x0, x1, x2 As Boolean, kompo, elementname, pfad, x As String, fso As Variant, geaendert As Date
On Error Resume Next
If ThisWorkbook.MultiUserEditing = False And ThisWorkbook.VBProject.Protection = 0 Then 'VBext_pp_none
    elementname = "Update_Code"
    pfad = T_versteck.Range("B20").Value
    Set fso = CreateObject("Scripting.filesystemobject")
    geaendert = fso.getfolder(pfad).Files(elementname & ".bas").datelastmodified
    If Not IsEmpty(geaendert) And geaendert > CDate(T_versteck.Range("B26").Value) Then
             T_versteck.Range("B26").Value = geaendert
    End If
End If
End Sub



'--------------------MAIL Modul --------------------------------------------
'21.07.2008: Umbruch bei Namen in HTML eingef|fffd|gt
'18.07.2008: Mailversenden
Sub LOP_Mailen()
Attribute LOP_Mailen.VB_Description = "M"
Attribute LOP_Mailen.VB_ProcData.VB_Invoke_Func = "M\n14"
'Erzeugt Mails f|fffd|r alle Teilnehmer
'----------------------------------------------------------------------
Dim namensliste(ANZAHL_NAMEN) As String
Dim namen_in_zeilen(ANZAHL_NAMEN, ANZAHL_ZEILEN) As Integer
Dim letzte_row, i As Integer
Dim r_verantwortlich, r_beteiligt, c1, c2  As Range
i = 0

T_LOP.Activate

' Abfrage nur gefilterte offenen Puntke ???
If T_LOP.FilterMode Then
        sp1(0) = "Sollen nur die sichtbaren (gefilterten) Punkte ausgegeben werden ?"
        sp1(1) = "Send only the visible (filtered) items"
        sp2(0) = "Filter ist aktiv in Blatt:  "
        sp2(1) = "Filter is active in sheet:  "
    If vbNo = MsgBox(sp1(s), vbQuestion & vbYesNo, sp2(s) & T_LOP.name) Then
        T_LOP.ShowAllData
        LOP_advancedfilter_felder_loeschen True
    End If
End If


'Bereiche beteiligt und verantwortlich festlegen
With T_versteck
    letzte_row = LOP_letzte_zeile(T_LOP.Range(.Range("B6").Value), 30)
        Set c1 = Cells(.Range("D6").Value + 1, .Range("C6").Value)
        Set c2 = Cells(letzte_row, .Range("C6").Value)
    Set r_verantwortlich = T_LOP.Range(c1, c2)
        Set c1 = Cells(.Range("D7").Value + 1, .Range("C7").Value)
        Set c2 = Cells(letzte_row, .Range("C7").Value)
    Set r_beteiligt = T_LOP.Range(c1, c2)
End With

'xxx 05.09.2008 Umstellung auf Formulareingabe
op_ablauf = M_MAIL_G
Call namen_ermitteln(namensliste, r_verantwortlich)
Call namen_ermitteln(namensliste, r_beteiligt)
Call namen_SortNamen(namensliste)

Call namen_auswahl_uebergeben(namensliste)
Call z_ShowAnyForm("LOP_Namensauswahl")
If liste(0) <> "ABBRUCH" Then
    
    Call namen_auswahl_uebernehmen(namensliste)
    
    Call namen_row_suchen(namensliste, namen_in_zeilen, r_verantwortlich)
    Call namen_row_suchen(namensliste, namen_in_zeilen, r_beteiligt)
    
    'xxx 01.06.2010
    Call z_ShowAnyForm("Offener_Punkt", vbModal)
    Call namen_mail_erzeugen(namensliste, namen_in_zeilen)
End If
op_ablauf = M_NORM
End Sub
Sub LOP_Mailen_markierte()
Attribute LOP_Mailen_markierte.VB_Description = "S"
Attribute LOP_Mailen_markierte.VB_ProcData.VB_Invoke_Func = "S\n14"
Dim text, vor, ss As String, a, k As Integer, zelle As Range, dat_ab As Date
Dim zeilen(1000) As Integer
Dim liste(100) As String
On Error Resume Next
If ActiveSheet.CodeName = "T_LOP" Or ActiveSheet.CodeName = "T_LOP_erledigt" Then

op_ablauf = M_MAIL_M
'xxx 01.06.2010
Call z_ShowAnyForm("Offener_Punkt", vbModal)
op_ablauf = M_NORM

If form_exit = vbCancel Then Exit Sub

With T_versteck
    ' |fffd|bernehme Erg|fffd|nzungen aus T_Versteck
    ss = .Range("I18").Value
    If IsDate(ss) Then
        dat_ab = CDate(ss)
    Else
        dat_ab = 1
    End If
    ss = .Range("I19").Value
    If Not IsNumeric(ss) Then
        k = 999
    Else
        k = CInt(ss)
    End If
End With

For Each zelle In Selection
    If zelle.Height > 0 Then
        zeilen(a) = zelle.Row
        Call namens_analyse(liste, Cells(zelle.Row, T_versteck.Range("C6").Value) & ", " & Cells(zelle.Row, T_versteck.Range("C7").Value))
        a = a + 1
    End If
Next


Dim mail_app, mail_form, empf As Object
Dim lf, lop_name, to_text As String, i, b As Integer, funden As Boolean

' Mail erzeugen
Set mail_app = CreateObject("Outlook.Application")
mail_app.session.Logon
Set mail_form = mail_app.CreateItem(0)

lf = T_LOP.PageSetup.LeftHeader
If Len(lf) = 0 Then
    T_LOP.PageSetup.LeftHeader = "&""Arial,Fett""&16BMW AG" & Chr(10) & Left(ActiveWorkbook.name, Len(ActiveWorkbook.name) - 4)
    lf = T_LOP.PageSetup.LeftHeader
End If

i = InStrRev(lf, "LOP", -1)
If i > 0 Then lop_name = Mid(lf, i)

With ThisWorkbook
    For b = 1 To .Sheets.Count
        If .Worksheets(b).CodeName = "T_Teilnehmer" Then funden = True: Exit For
    Next
End With

i = 0
While liste(i) <> ""
    If funden Then
        to_text = to_text & name_teilnehmer_email(liste(i)) & ";"
    Else
        to_text = to_text & z_ohne_umlaute(liste(i)) & ";"
    End If
    i = i + 1
Wend

With mail_form
    .To = to_text
    For Each empf In mail_form.Recipients
        empf.Resolve
    Next
  
    .CC = ""
    .BCC = ""
    .Subject = lop_name & ": Stand " & Int(ThisWorkbook.BuiltinDocumentProperties("Last Save Time"))
    .GetInspector 'holt die Signatur
    .htmlbody = namen_mail_body(ActiveSheet, zeilen(), dat_ab, Val(k)) & namen_mail_signatur(.body)
    .display
End With
End If
End Sub


Private Sub namen_ermitteln(ByRef liste() As String, ByVal bereich As Range)
'-- keine Sprache
'extrahiert aus der |fffd|bergebenen Range NAMEN. akzeptiert nur Zeichen, keine Zahlen
'|fffd|bergibt die NAMEN unsortiert ohne Doubletten in die Liste()
'----------------------------------------------------------------------
Dim cell As Range, s As String

For Each cell In bereich
    If cell.RowHeight > 0 Then
        s = cell.Value
        Call namens_analyse(liste, s)
    End If
Next cell

End Sub

Private Sub namens_analyse(ByRef liste() As String, ByVal s As String)
'-- keine Sprache
'Analysiert Strings auf Namen und l|fffd||fffd|t ie einzelenen Namen in die Liste einordnen
'----------------------------------------------------------------------
Dim pos1 As Long, i, ii, p As Integer, z, name, erg As String
p = 1
ii = Len(s)

For i = 1 To ii
    z = Mid(s, i, 1)
    If Not namen_zul_zeichen(z) Then
        name = Mid(s, p, i - p)
        If z_Iss_zahl(Trim(name)) Then name = ""
        p = i + 1
        If Not (Len(name) < MINIMALE_NAMENSLAENGE) Then erg = namen_einsortieren(liste, name)
    'Pr|fffd|fen, ob am Ende der zelle
    ElseIf i = ii Then
        name = Mid(s, p)
        If z_Iss_zahl(Trim(name)) Then name = ""
        If Not (Len(name) < MINIMALE_NAMENSLAENGE) Then erg = namen_einsortieren(liste, name)
    End If
Next i
End Sub

Private Function namen_zul_zeichen(ByVal zeichen As String) As Boolean
'-- keine Sprache
'Zeichen aus dem Zeichensatz, die in Namen f|fffd|r das Mailprogramm zul|fffd|ssig sind
'----------------------------------------------------------------------
Dim z As Integer
Const zul_zeichen = "abcdefghijklmnopqrstuvwxyz|fffd||fffd||fffd||fffd|ABCDEFGHIJKLMNOPQRSTUVWXYZ|fffd||fffd||fffd|@-_.1234567890"
namen_zul_zeichen = False
If zeichen = "" Then Exit Function
If InStr(1, zul_zeichen, zeichen) > 0 Then namen_zul_zeichen = True
End Function

Private Function namen_einsortieren(ByRef liste() As String, ByVal name As String)
'-- keine Sprache
'Namen in die Liste einsortieren
'----------------------------------------------------------------------
Dim i As Integer
For i = 0 To ANZAHL_NAMEN
    If liste(i) = name Then Exit For
    If liste(i) = "" Then
        liste(i) = name
        Exit For
    End If
Next i
End Function

Private Sub namen_auswahl_uebergeben(ByRef namen() As String)
Dim i As Integer
For i = 0 To ANZAHL_NAMEN
    liste(i) = namen(i)
Next

End Sub

Private Sub namen_auswahl_uebernehmen(ByRef namen() As String)
Dim i, d As Integer
For i = 0 To ANZAHL_NAMEN
    If liste(i) = "" Then
        d = d + 1
    Else
        namen(i - d) = liste(i)
    End If
Next
For i = ANZAHL_NAMEN - d + 1 To ANZAHL_NAMEN
        namen(i) = ""
Next
    
End Sub



Private Sub namen_row_suchen(ByRef namen() As String, ByRef zeilen() As Integer, ByVal namen_bereich As Range)
'-- keine Sprache
'Ordnet den NAMEN die Zeilen zu, in denen sie in "namen_bereich" vorkommen (Beteiligt, verantwortlich)
'----------------------------------------------------------------------
Dim i, p, l As Integer, c As Range, firstaddress, n, c_adr As String, gefunden As Boolean
i = 0

On Error Resume Next
While (namen(i) <> "")
    For Each c In namen_bereich
        gefunden = False
        n = c.Value
        p = InStr(1, n, namen(i), vbTextCompare)
        While p > 0 And c.RowHeight > 0 'Sucht innerhalb deer Zelle das Vorkommen des Namens und pr|fffd|ft ab, ob davor oder dahinter Namenstrennung
            l = Len(c.Value)
            If l = Len(namen(i)) Then
                gefunden = True
            ElseIf p = 1 And Not namen_zul_zeichen(Mid(n, p + Len(namen(i)), 1)) Then
                gefunden = True
            ElseIf p > 1 Then
                If p + Len(namen(i)) - 1 = l And Not namen_zul_zeichen(Mid(n, p - 1, 1)) Then
                    gefunden = True
                ElseIf Not namen_zul_zeichen(Mid(n, p - 1, 1)) And Not namen_zul_zeichen(Mid(n, p + Len(namen(i)), 1)) Then
                    gefunden = True
                End If
            End If
            p = InStr(p + 2, n, namen(i), vbTextCompare)
        Wend
        If gefunden Then Call namen_in_row(zeilen, i, c.Row)
    Next
    'xxx
    i = i + 1
Wend

End Sub

Private Sub namen_in_row(ByRef zeilen() As Integer, ByVal nr As Integer, ByVal reihe As Integer)
'-- keine Sprache
'Zeilennummeer in die Liste einschreiben unsortiert ohne Doubletten
'----------------------------------------------------------------------
Dim i As Integer
For i = 0 To ANZAHL_ZEILEN
    If zeilen(nr, i) = reihe Then Exit For
    If zeilen(nr, i) = 0 Then
        zeilen(nr, i) = reihe
        Exit For
    End If
Next i
End Sub

Private Sub namen_in_row_Sort(ByRef zeilen() As Integer, ByVal nr As Integer, ByVal reihe As Integer)
'-- keine Sprache
'Zeilennummeer in die Liste einschreiben SORTIERT ohne Doubletten
'----------------------------------------------------------------------
Dim i, ii, neu, org As Integer
For i = 0 To ANZAHL_ZEILEN
    If zeilen(nr, i) = reihe Then Exit For
    If zeilen(nr, i) < reihe Then
        neu = reihe
        ii = i
        Do While zeilen(nr, ii) > 0 Or neu > 0
            org = zeilen(nr, ii)
            zeilen(nr, ii) = neu
            neu = org
            ii = ii + 1
        Loop
        Exit For
    End If
Next i
End Sub

Function z_ohne_umlaute(ByVal n As String) As String
'-- keine Sprache
'ersetzt deutsch Umlaute und |fffd|
'----------------------------------------------------------------------
z_ohne_umlaute = Replace(Replace(Replace(Replace(n, "|fffd|", "ae", vbTextCompare), "|fffd|", "oe"), "|fffd|", "ue"), "|fffd|", "ss")
End Function

Private Sub namen_mail_erzeugen(ByRef namen() As String, ByRef zeilen() As Integer)
'erzeugt eine Mail und zeigt sie an. wegschicken mu|fffd| man sie selbst
'----------------------------------------------------------------------
Dim zeil(1000) As Integer
Dim a, aa, i, ii, b, z, erg, erg_masse, abbruch, mail_nr As Integer
Dim lf, lop_name, k, dat, vor, zus, ss As String, funden, sichtbar As Boolean
Dim dat_ab As Date, empf As Variant
funden = False
abbruch = False
i = 0
Dim mail_app, mail_form As Object

If form_exit = vbCancel Then Exit Sub

With T_versteck
    ' |fffd|bernehme Erg|fffd|nzungen aus T_Versteck
    ss = .Range("I18").Value
    If IsDate(ss) Then
        dat_ab = CDate(ss)
    Else
        dat_ab = 1
    End If
    ss = .Range("I19").Value
    If Not IsNumeric(ss) Then
        k = 999
    Else
        k = CInt(ss)
    End If
End With

' Mail erzeugen
Set mail_app = CreateObject("Outlook.Application")
mail_app.session.Logon

mail_nr = 10
erg = vbYes
While namen(i) <> "" And abbruch = False
    a = 0
    Do While zeil(a) > 0
        zeil(a) = 0
        a = a + 1
    Loop
    a = 0
    
    With T_LOP
        aa = 0
        Do While zeilen(i, a) > 0
            If dat_ab <= PROT_max_dat(.Cells(zeilen(i, a), T_versteck.Range("C3").Value) & .Cells(zeilen(i, a), T_versteck.Range("C4").Value)) Then
                zeil(aa) = zeilen(i, a)
                aa = aa + 1
            End If
            a = a + 1
        Loop
    End With
    
    If zeil(0) > 0 Then
    'xxx 04.08.2008
        ii = 0
        sichtbar = False
        While zeil(ii) > 0
            If Not T_LOP.Rows(zeil(ii)).Hidden Then sichtbar = True
            ii = ii + 1
        Wend
        If sichtbar = True Then
            If mail_nr <= 0 Then
                    sp1(0) = "Weitere 10 Mails   erzeugen ?"
                    sp1(1) = "Generate 10 more emails ?"
                    sp2(0) = "Massen Mail versenden"
                    sp2(1) = "Multiple mail generation"
                erg_masse = MsgBox(sp1(s), vbYesNo, sp2(s))
                erg = erg_masse
                mail_nr = 10
            End If
            mail_nr = mail_nr - 1
            If erg = vbYes Then
                Set mail_form = mail_app.CreateItem(0)
                On Error Resume Next
                With mail_form
                    .To = z_ohne_umlaute(namen(i))
                    For Each empf In mail_form.Recipients
                        empf.Resolve
                        If Not empf.resolved Then
                            ' pr|fffd|ft, ob das Tabellenblatt T_Teilnehmer vorhanden ist
                            With ThisWorkbook
                            For b = 1 To .Sheets.Count
                                If .Worksheets(b).CodeName = "T_Teilnehmer" Then funden = True: Exit For
                            Next
                            End With
                            If funden Then .To = name_teilnehmer_email(namen(i))
                        End If
                    Next
                    .CC = ""
                    .BCC = ""
                    'holt aus dem Header des Tabellenblattes den Namen der LOP
                     lf = T_LOP.PageSetup.LeftHeader
        'xxx 30.07.2008
                    If Len(lf) = 0 Then
                        T_LOP.PageSetup.LeftHeader = "&""Arial,Fett""&16BMW AG" & Chr(10) & Left(ActiveWorkbook.name, Len(ActiveWorkbook.name) - 4)
                        lf = T_LOP.PageSetup.LeftHeader
                    End If
                    lop_name = Mid(lf, InStrRev(lf, "LOP", -1))
                    If Len(lop_name) < 3 Then lop_name = ThisWorkbook.name
                    .Subject = lop_name & ": Stand " & Int(ThisWorkbook.BuiltinDocumentProperties("Last Save Time"))
                    .GetInspector 'holt die Signatur
                    .htmlbody = namen_mail_body(T_LOP, zeil, dat_ab, Val(k)) & namen_mail_signatur(.body)
                    .display
                End With
            ElseIf erg = vbNo Then
                abbruch = True
            End If
        End If
    End If
    i = i + 1
Wend

Set mail_form = Nothing
Set mail_app = Nothing

End Sub
Private Function namen_mail_signatur(ByVal b As String) As String
'-- keine Sprache
' versucht die mit ".GetInspector" gefundene Signatur nach HTML zu formatieren
'----------------------------------------------------------------------
Dim i, x, y As Integer

b = Replace(Replace(b, Chr(13), "<br>"), " ", "&nbsp;")
i = 1
While InStr(i, b, "HYPERLINK", vbTextCompare) > 0
    x = InStr(i, b, "HYPERLINK", vbTextCompare)
    y = InStr(x + 18, b, Chr(34), vbTextCompare)
    b = Left(b, x - 1) & Mid(b, y + 1)
Wend
namen_mail_signatur = b
End Function

Private Function namen_mail_body(ByRef blatt As Worksheet, ByRef zeil() As Integer, Optional ByVal dat_ab As Date, Optional ByVal kuerzen As Integer) As String
' erzeugt aus den LOP Elementen eines NAMEN LOP-Punkt einen HTML Code
'----------------------------------------------------------------------
'xxx 30.07.2008
On Error Resume Next
Dim b, nr, titel, verantw, beteiligt, Bis, vorspann As String, z, a As Integer
b = "<Font face=""Arial"">"

'Vorspann
With T_LOP.PageSetup
   b = b & "<H2>" & Mid(.LeftHeader, InStrRev(.LeftHeader, "LOP", -1)) & "</h2>"
End With
b = b & Replace(T_versteck.Range("J16").Value, Chr(10), "<BR>") & "<p>"
'xxx 01.09.2009
b = b & "LINK auf LOP: <a href=""" & z_GetUNCPath(ThisWorkbook.Path) & "\" & ThisWorkbook.name & """ >" & ThisWorkbook.name & "</a><p>"

vorspann = "<a style=""font-size: 11pt;line-height: 12pt; font-weight: light; text-decoration: none; ""><font face=""BMWTypeRegular,Arial,Helvetica,SunSans-Regular"">"
b = b & vorspann & "<b>Offene Punkte</b>"
If dat_ab = z_sDate("01.01.2000") Then b = b & "<br>mit &Auml;nderungen ab " & Format(dat_ab, "dd.mm.yy")
If kuerzen < 99 Then b = b & ", gek&uuml;rzt auf " & kuerzen & " Erg&auml;nzung(en)</a><br>"

b = b & PROT_LOP_Zeilen_html_umwandeln(blatt, zeil, dat_ab, kuerzen)
' Format f|fffd|r Signatur
b = b & "<font face=""ARIAL"" size=2>"
namen_mail_body = b
End Function
 Function name_titelformat(ByVal titel As String) As String
'baut die Formatierung gem|fffd| Titelzelle in LOP f|fffd|r HTML nach
'----------------------------------------------------------------------
Dim ii, i, f, rot As Integer, Schlagwort As Boolean
Dim erg As String

On Error GoTo 0
Schlagwort = True
' erg = "<b><u>"
erg = "<b>"
ii = Len(titel)
        For i = 1 To ii
            If Mid(titel, i, 1) = Chr(10) And Schlagwort Then
'                erg = erg & Left(titel, i - 1) & "</b></u>"
                erg = erg & Left(titel, i - 1) & "</b>"
                
                Schlagwort = False
            End If
            If Mid(titel, i, 1) = Chr(10) Then
                erg = erg & "<br>"
                If z_IssDate(Mid(titel, i + 1, 10)) And IsNumeric(Mid(titel, i + 1, 1)) Then
                    erg = erg & "<b>" & Mid(titel, i + 1, 11) & "</b>"
                    i = i + 11
                ElseIf z_IssDate(Mid(titel, i + 1, 8)) And IsNumeric(Mid(titel, i + 1, 1)) Then
                    erg = erg & "<b>" & Mid(titel, i + 1, 9) & "</b>"
                    i = i + 9
                End If
            ElseIf Not Schlagwort Then
                erg = erg & Mid(titel, i, 1)
            End If
        Next
        If Schlagwort Then erg = erg & titel & "</b></u>"
name_titelformat = erg
End Function

Private Function name_teilnehmer_email(name As String) As String
'Sucht aus dem Tabellenblatt "Teilnehmer" die emailadressen aus
'xx 06.10.2009: trennt namen mit Kurzzeichen von "Name_EK-30" auf "Name EK-30"
'----------------------------------------------------------------------
Dim zelle_teilnehmer, zelle_namen, zelle_mail_ueber, spalte_namen As Range, x, p, l As Integer
Dim email, n, firstaddress As String, gefunden As Boolean, sheet As Sheets, i As Integer

    With T_versteck
        If .Range("J17").Value = "" Then .Range("J17").Value = "Teilnehmer"
        If .Range("J18").Value = "" Then .Range("J18").Value = "eMail Addresse"
        ' Participant, email address
    End With
With T_Teilnehmer
Set zelle_teilnehmer = .UsedRange.Find(T_versteck.Range("J17").Value)
    If Not zelle_teilnehmer Is Nothing Then
        Set spalte_namen = .Columns(zelle_teilnehmer.Column)
        Set zelle_namen = spalte_namen.Find(name)
        If Not zelle_namen Is Nothing Then
            firstaddress = zelle_namen.Address
            Do
                gefunden = False
                n = zelle_namen.Value
                p = InStr(1, n, name, vbTextCompare)
                While p > 0 'Sucht innerhalb deer Zelle das Vorkommen des Namens und pr|fffd|ft ab, ob davor oder dahinter Namenstrennung
                    l = Len(zelle_namen.Value)
                    If l = Len(name) Then
                        gefunden = True
                    ElseIf p = 1 And Not namen_zul_zeichen(Mid(n, p + Len(name), 1)) Then
                        gefunden = True
                    ElseIf p > 1 Then
                        If p + Len(name) - 1 = l And Not namen_zul_zeichen(Mid(n, p - 1, 1)) Then
                            gefunden = True
                        ElseIf Not namen_zul_zeichen(Mid(n, p - 1, 1)) And Not namen_zul_zeichen(Mid(n, p + Len(name), 1)) Then
                            gefunden = True
                        End If
                    End If
                    p = InStr(p + 2, n, name, vbTextCompare)
                Wend
                If gefunden Then
                    Set zelle_mail_ueber = .UsedRange.Find(T_versteck.Range("J18").Value)
                    If Not zelle_mail_ueber Is Nothing Then
                        email = .Cells(zelle_namen.Row, zelle_mail_ueber.Column).Value
                    End If
                End If
                If Not gefunden Then Set zelle_namen = spalte_namen.FindNext(zelle_namen)
            Loop While Not gefunden And (Not zelle_namen Is Nothing And zelle_namen.Address <> firstaddress)
        End If
     End If
End With
If InStr(1, email, "@", vbTextCompare) > 0 And Len(email) > 15 Then
    name_teilnehmer_email = z_ohne_umlaute(email)
Else
    name_teilnehmer_email = namen_kz_split(z_ohne_umlaute(name))
End If

End Function
'----------------------------------------------------------------------

Private Function namen_kz_split(name As String) As String
Dim pm, pu, i As Long  ' pm = position letztes - zeichen PU = Position letzter Unterstrich
Dim kz As String, erg As Boolean
Const RESORT = "AEFMPTVZU"
Const ZEICH = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-"
namen_kz_split = name ' Default Belegung
pu = InStrRev(name, "_") ' ohne "-" und "_" kann es kein Kurzzeichen sein
pm = InStrRev(name, "-")
If ((Len(name) - pu > 2 And Len(name) > 6 And pm > 0 And pm < Len(name) And pm > pu) Or Len(name) - pu <= 2) And pu > 0 And pu < Len(name) Then
    kz = Mid(name, pu + 1)
    erg = True
    For i = 1 To Len(kz)
        If InStr(1, ZEICH, Mid(kz, i, 1)) = 0 Then erg = False: Exit For
    Next
    If erg Then erg = Len(kz) <= 6 And Len(kz) >= 2
    If erg Then erg = InStr(1, RESORT, Left(kz, 1)) > 0
    If erg And Len(kz) >= 4 Then erg = Mid(kz, 3, 1) = "-"
    If erg Then namen_kz_split = Left(name, pu - 1) & " " & kz
End If

End Function

Private Function is_digit(t As String) As Boolean
' pr|fffd|ft, ob ein String nur die zeichen  0-9 enth|fffd|lt
Dim i As Long
is_digit = True
Const z = "1234567890"
For i = 1 To Len(t)
    If InStr(1, z, Mid(t, i, 1)) = 0 Then is_digit = False: Exit For
Next
End Function


Function Z_html_zeichen_konverter(s As String) As String
Dim f As String
Z_html_zeichen_konverter = s
On Error Resume Next
f = s
f = Replace(f, Chr(10), "<BR>")
f = Replace(f, "|fffd|", "&auml;")
f = Replace(f, "|fffd|", "&Auml;")
f = Replace(f, "|fffd|", "&ouml;")
f = Replace(f, "|fffd|", "&Ouml;")
f = Replace(f, "|fffd|", "&uuml;")
f = Replace(f, "|fffd|", "&Uuml;")
f = Replace(f, "|fffd|", "&szlig;")
f = Replace(f, " ", "%20")
f = Replace(f, "\", "/")
f = Replace(f, "&", "&amp;")
f = Replace(f, ">", "&gt;")
f = Replace(f, "<", "&lt;")
f = Replace(f, """", "&quot;")
Z_html_zeichen_konverter = f
End Function
'----------------------------------------------------------------------

Private Sub namen_SortNamen(ByRef namen As Variant)
Dim anz, i As Integer
anz = 0
i = 0
While namen(anz) <> ""
  anz = anz + 1
Wend
Call Z_QuicksortArray(namen, 0, anz - 1)
If namen(0) = "" Then
    While namen(i) <> ""
    namen(i - 1) = namen(i)
    i = i + 1
    Wend
End If
End Sub

Private Sub Z_QuicksortArray(ByRef feld As Variant, ByVal von As Long, ByVal Bis As Long)
    ' Ein Datenfeld, typisiertes Array oder einen Range mit Quicksort aufsteigend sortieren
    Dim q As Long, i As Long, J As Long, tausch As Variant, x As Variant
    If von < Bis Then
        x = feld(Bis) 'Pivotelement ist immer das Element ganz rechts
        i = von - 1
        For J = von To Bis - 1 ' alle Elemente au|fffd|er Pivot durchlaufen
            If feld(J) <= x Then ' Elemente kleiner gleich Pivot stehen links von Pivot
                i = i + 1
                tausch = feld(i)
                feld(i) = feld(J)
                feld(J) = tausch
            End If
        Next J
        tausch = feld(i + 1) ' Pivotelement an richtige Stelle tauschen
        feld(i + 1) = feld(Bis)
        feld(Bis) = tausch
        q = i + 1
        Z_QuicksortArray feld, von, q - 1 ' linkes Teilarray sortieren
        Z_QuicksortArray feld, q + 1, Bis ' rechtes Teilarray sortieren
    End If
End Sub
'--------------------  AGENDA Erstellung --------------------------------------------------------------

Private Sub T_Agenda_erw_funktionen()
Dim w As Workbook, istda As Boolean, erg As Integer
On Error Resume Next
    Call UPD_Makros_oeffnen
    For Each w In Workbooks
        If w.name = UPD_Datei Then istda = True: Exit For
    Next w
    If istda Then
        erg = Run(UPD_Datei & "!T_Agenda_zus_funktionen", ThisWorkbook.name, Selection.Address)
    Else
        sp1(0) = "Die zus|fffd|tzlichen Funktionen sind nicht verf|fffd|gbar !" & vbLf & vbLf & "Sie sind nicht am BMW Netz oder" & vbLf & "der Pfad zur MasterLOP ist falsch" & vbLf & vbLf
        sp1(1) = "The additional functions are not available !" & vbLf & vbLf & "You are not within the BMW computer network or" & vbLf & "the path to the LOP master is false" & vbLf & vbLf
        sp2(0) = "Kein Anschluss": sp2(1) = "No connection"
        erg = MsgBox(sp1(s) & T_versteck.Range("B20").Value, vbExclamation, sp2(s))
    End If
End Sub

Private Sub T_Agenda_termin_check()
' bei erstem Aufruf der Agenda werden die Termineitnr|fffd|ge aktualisiert
Dim w As Workbook, istda As Boolean, erg As Integer
Dim letzter_termin, i As Long
Const sp_kal_start = 27
' On Error Resume Next
    
letzter_termin = LOP_letzte_zeile(T_Agenda_var.Cells(1, sp_kal_start), 100)
If letzter_termin > 6 Then
    Call UPD_Makros_oeffnen
    For Each w In Workbooks
        If w.name = UPD_Datei Then istda = True: Exit For
    Next w
    If istda Then
        erg = Run(UPD_Datei & "!T_Agenda_zus_funktionen", ThisWorkbook.name, Selection.Address, "check")
    End If
End If
End Sub


Sub T_AGENDA_Worksheet_Activate(Optional uhu As Boolean)
On Error Resume Next
Dim zoom_alt, zoom_neu As Long
For Each T_Agenda_var In ThisWorkbook.Sheets
    If T_Agenda_var.CodeName = "T_Agenda" Then
        Exit For
    End If
Next
If T_Agenda_var Is Nothing Then Exit Sub

If Application.CutCopyMode Then Exit Sub

Call T_AGENDA_zeitformel
With T_Agenda_var
    sp(0) = "Link zur LOP": sp(1) = "Link to LOP"
    .Range("D2").Hyperlinks.Delete
    .Hyperlinks.Add Anchor:=.Range("D2"), _
        Address:=z_GetUNCPath(ThisWorkbook.FullName), _
        TextToDisplay:=sp(s)
    With .Range("D2")
        .Characters.Font.Size = 8
        .Interior.ColorIndex = 36
    End With
End With
If msg_agenda = 0 Then
    With T_Agenda_var
    sp(0) = "Datum:": sp(1) = "Date:": .Range("A3").Value = sp(s)
    sp(0) = "Zeit:": sp(1) = "Time:": .Range("A4").Value = sp(s)
    sp(0) = "Ort:": sp(1) = "Room:": .Range("A5").Value = sp(s)
    .Range("B4").FormulaR1C1 = "=TEXT(R[1]C[3],""hh:mm"") &"" - "" & TEXT(R[1]C[3]+R[1]C[4]/1440,""hh:mm"")"
    .Range("B3").Value = Range("B3").Value
    .Range("E5").Value = Range("E5").Value
    .Range("F5").Value = Range("F5").Value
    End With
    Range("A6:H6").Select
    With ActiveWindow
        zoom_alt = .Zoom
        .Zoom = True
        zoom_neu = .Zoom
        If zoom_alt < .Zoom Then .Zoom = zoom_alt
        If zoom_alt < zoom_neu * 0.5 Then .Zoom = zoom_neu * 0.7
    End With
    Range("B7").Select
        sp1(0) = "LOP-Punkte durch Dr|fffd|cken der Tasten ""<Shift><Strg>A"" auf die Agenda |fffd|bertragen!"
        sp1(1) = "transfer LOP item by pressing keys ""<Shift><Ctrl>A"" to AGENDA !"
        sp2(0) = "Agenda erstellen"
        sp2(1) = "Create Agenda"
    With T_Agenda_var.Cells
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
    End With
    With Cells.Borders
        .ColorIndex = 15
        .Weight = xlThin
    End With
    With T_versteck
        If .Range("J19").Value = "" Then .Range("J19").Value = "Teilnehmer:"
        If .Range("K19").Value = "" Then .Range("K19").Value = "Participants:"
    End With
'    msg_agenda = MsgBox(sp1(s), vbOKOnly, sp2(s))
    Application.StatusBar = sp1(s)
    msg_agenda = 1
    Call T_Agenda_termin_check
End If

End Sub

Sub T_AGENDA_Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
Dim b, mod_i As Integer
On Error Resume Next
CommandBars("Cell").Enabled = True
If Target.Column = 3 Or Target.Column = 4 Then
    With ThisWorkbook
    For b = 1 To .Sheets.Count
        If .Worksheets(b).CodeName = "T_Teilnehmer" Then
           With ActiveWorkbook.VBProject
            For mod_i = 1 To .vbcomponents.Count
                If .vbcomponents.Item(mod_i).name = "LOP_Namensauswahl" Or .vbcomponents.Item(mod_i).name = "LOP_Namensauswahl1" Then
                    Call LOP_Namensauswahl_start
                    CommandBars("Cell").Enabled = False
                    Exit For
                End If
            Next
            End With
            Exit For
        End If
    Next
    End With
End If
End Sub

Sub T_AGENDA_Worksheet_Change(ByVal Target As Range)
Dim z As Range, f As String
Static bremse As Boolean
' On Error Resume Next
With Target
If .Address <> "$E$7" Then
    If .Address = "$F$5" Then
        sp2(0) = "Fehlerhafte Eingabe": sp2(1) = "Input failure"
        sp1(0) = "Bitte g|fffd|ltige Dauer (z.B. 60) eingeben (F53)"
        sp1(1) = "Input a valid duration (e.g. 60), please (F5)"
        If Not IsNumeric(.Value) Then Call MsgBox(sp1(s), vbOKOnly, sp2(s)): .Value = 60
        .NumberFormat = "0"
     End If
    If .Address = "$E$5" Then
        sp2(0) = "Fehlerhafte Eingabe": sp2(1) = "Input failure"
        sp1(0) = "Bitte g|fffd|ltiges Uhrzeit eingeben (E5)"
        sp1(1) = "Input a valid time, please (E5)"
        If Not IsNumeric(.Value) Then Call MsgBox(sp1(s), vbOKOnly, sp2(s)): .Value = 0.8
        If .Value > 1 Then .Value = .Value - Int(.Value)
        .NumberFormat = "h:mm;@"
     End If
    
    If .Address = "$B$3" Then
        sp2(0) = "Fehlerhafte Eingabe": sp2(1) = "input failure"
        sp1(0) = "Bitte g|fffd|ltiges Datum eingeben (B3)"
        sp1(1) = "Input a valid date, please"
        If Not z_IssDate(.Value) Then Call MsgBox(sp1(s), vbOKOnly, sp2(s)): .Value = z_sDate("01.01.2000")
        If .Value - Int(.Value) > 0 Then .Value = Int(.Value)
        .NumberFormat = "[$-F800]dddd, mmmm dd, yyyy"   '"dd.mm.yyyy"
     End If
    If .Address = "$B$4" Then
        f = "=TEXT(R[1]C[3],""hh:mm"") &"" - "" & TEXT(R[1]C[3]+R[1]C[4]/1440,""hh:mm"")"
        sp1(0) = "Zeitangabe wird aus Startzeit (E5) und Dauer (F5) berechnet"
        sp1(1) = "Time will be calculated with start (E5) and Duration (F5)"
        sp2(0) = "Keine manuelle Eingabe": sp2(1) = "No manuall input"
        If .FormulaR1C1 <> f Then Call MsgBox(sp1(s), vbOKOnly, sp2(s)): .FormulaR1C1 = f
    End If
    If .Address = "$A$3" Then sp(0) = "Datum:": sp(1) = "Date:": If .Value <> sp(s) Then .Value = sp(s)
    If .Address = "$A$4" Then sp(0) = "Zeit:": sp(1) = "Time:": If .Value <> sp(s) Then .Value = sp(s)
    If .Address = "$A$5" Then sp(0) = "Ort:": sp(1) = "Room:": If .Value <> sp(s) Then .Value = sp(s)
    If .Column = 2 And .Row > 6 Then
        Call T_AGENDA_Themazellen_formatieren(Target)
        If .Count = 1 And T_AGENDA_teilnehmer(Target.Value) Then
         bremse = True
         Range(Target, Target.Offset(0, 2)).Interior.ColorIndex = 36
        Else
            If .Interior.ColorIndex = 36 Then
                Range(Target, Target.Offset(0, 2)).Interior.ColorIndex = xlNone
            End If
        End If
    End If
    If .Column = 2 Then
        For Each z In Target
            If z.Value <> "" Then
            If z.Offset(0, -1) = "" And z.Offset(0, -1).PrefixCharacter = "" Then z.Offset(0, -1).Value = "'"
            If z.Offset(0, 1) = "" And z.Offset(0, 1).PrefixCharacter = "" Then z.Offset(0, 1).Value = "'"
            If z.Offset(0, 2) = "" And z.Offset(0, 2).PrefixCharacter = "" Then z.Offset(0, 2).Value = "'"
            End If
        Next
    End If
    If .Column >= 2 And .Column <= 4 Then Target.Rows.AutoFit
    If .Column <> 5 Then Call Undo_change(Target)
    If .Column = 5 And .Row > 6 Then
        If .Row < T_AGENDA_farbende() + 10 Then
            For Each z In Target
                If z.Value = "" Then z.Interior.ColorIndex = xlNone
            Next
        End If
    End If
End If
End With
On Error Resume Next
Call Application.Run("LOP_AGENDA_Userexit_WorksheetChange", ThisWorkbook.name, Target.Address)
End Sub

Sub T_AGENDA_Themazellen_formatieren(Target As Range)
Dim titel As String, ze, ii As Integer
If Target.Count = 1 Then
    With Target.Characters.Font
        .FontStyle = "normal"
        .Underline = xlUnderlineStyleNone
    End With
    titel = Target.Value
    ze = InStr(1, titel, vbLf, vbTextCompare)
    If ze = 0 Then ze = Len(titel)
    With Target.Characters(start:=1, Length:=ze).Font
        .Bold = True
    End With
    Target.Rows.AutoFit
End If
End Sub


Function T_AGENDA_teilnehmer(t As String) As Boolean
Dim t_de, t_en As String, l_de, l_en As Integer
With T_versteck
    t_de = .Range("J19"): l_de = Len(t_de)
    t_en = .Range("K19"): l_en = Len(t_en)
    If Left(t, l_de) = t_de Or Left(t, l_en) = t_en Then T_AGENDA_teilnehmer = True
End With
End Function

Sub T_AGENDA_Worksheet_Deactivate(uhu As Boolean)
On Error Resume Next
CommandBars("Cell").Enabled = True
End Sub

Sub T_AGENDA_Worksheet_SelectionChange(ByVal Target As Range)
On Error Resume Next
Dim t As Variant, shap As Shape
'xxx 22.07.2009
If Target.Count = 1 Then
    If Target.Column <> 5 Then Call T_AGENDA_zeitformel
    Call Undo_selection_change(Target)
End If
Set agenda_einfuegepunkt = ActiveCell

'xxx 05.10.2009
With Selection
    For Each shap In T_Agenda_var.Shapes
        If shap.name = "B_agenda" Then
            If .Areas.Count <= 1 And .Count >= 2 Then 'nur ein Bereich gew|fffd|hlt
                t = Split(Replace(Selection.Address, ":", ""), "$")
                If t(2) = 1 And t(1) <= "C" And t(3) >= "E" And t(4) > 7 Then
                    shap.Visible = msoFalse
                Else
                    shap.Visible = msoTrue
                End If
            Else
                    shap.Visible = msoTrue
            End If
            Exit For
        End If
    Next
End With
End Sub

Sub T_AGENDA_erstellen()
Attribute T_AGENDA_erstellen.VB_Description = "A"
Attribute T_AGENDA_erstellen.VB_ProcData.VB_Invoke_Func = "A\n14"
Dim rr As Long, rrr As Range, t As String, pos, lz, v As Integer
On Error Resume Next
If ActiveCell.Column = T_versteck.Range("C4").Value And ActiveSheet.CodeName = "T_LOP" Then
    op_ablauf = M_AGEN
    'xxx 01.06.2010
    Call z_ShowAnyForm("Offener_Punkt", vbModal)
    op_ablauf = M_NORM
    If form_exit = vbYes Then 'alle markierten in die Agenda |fffd|bernehmen
        For Each rrr In Selection.Rows
            If rrr.RowHeight > 0 Then
                rr = rrr.Row
                If agenda_einfuegepunkt Is Nothing Then Set agenda_einfuegepunkt = T_Agenda_var.Range("B7")
                lz = LOP_letzte_zeile(T_Agenda_var.Cells(agenda_einfuegepunkt.Row, 2), 0) + 1
                v = T_AGENDA_farbende() + 1
                With T_Agenda_var.Cells(lz + 1, 2)
                    If T_AGENDA_teilnehmer(.Value) Then
                        T_Agenda_var.Rows(v & ":" & v).Insert Shift:=xlDown
                        lz = v
                    End If
                End With
                With T_versteck
                    T_Agenda_var.Cells(lz, 1).Value = T_LOP.Cells(rr, .Range("C2")) ' nummer
                    t = Trim(T_LOP.Cells(rr, .Range("C4"))) ' Originaltext
                    pos = InStr(1, t, vbLf) ' gibt es einen Zeilenumbruch
                    If pos = 1 Then pos = InStr(2, t, vbLf)
                    If .Range("I16") = True Or pos = 0 Then ' Text im Original anf|fffd|gen
                        T_Agenda_var.Cells(lz, 2).Value = t & namen_mail_ergaenzungstext(rr)
                    Else
                        T_Agenda_var.Cells(lz, 2).Value = Left(t, pos - 1) & namen_mail_ergaenzungstext(rr)
                    End If
                    T_Agenda_var.Cells(lz, 3).Value = Trim(T_LOP.Cells(rr, .Range("C6"))) 'verant
                    If .Range("I17") = True And .Range("C7") <> 0 Then T_Agenda_var.Cells(lz, 4).Value = Trim(T_LOP.Cells(rr, .Range("C7"))) 'beteiligt
                    If .Range("C9") <> "" Then T_Agenda_var.Cells(lz, 6).Value = Val(T_LOP.Cells(rr, .Range("C9"))) 'Dauer
                End With
            End If
        Next
    End If
End If
End Sub

Private Sub T_AGENDA_zeitformel()
Dim vorher, vorher_event As Boolean, lz, i, ii, v As Integer, vertr As Range
Const formel = "=IF(NOT(ISNUMBER(R[-1]C)),R5C5,R[-1]C+R[-1]C[1]/1440)"

If T_Agenda_var Is Nothing Then Exit Sub
    If Application.CutCopyMode = False Then
        vorher_event = Application.EnableEvents
        vorher = Application.ScreenUpdating
        Application.ScreenUpdating = False
    'Formel nach unten schreiben
        With T_Agenda_var
            Application.EnableEvents = False
            .Cells(7, 5).FormulaR1C1 = formel
            .Cells(7, 5).Interior.ColorIndex = 36
            lz = T_AGENDA_farbende()
            If Not IsEmpty(.Cells(7, 5).Value) Then
                If lz > 6 Then
                    For ii = 7 To lz + 1
                        If .Cells(ii, 5).FormulaR1C1 <> formel Then .Cells(ii, 5).FormulaR1C1 = formel
                        .Cells(ii, 5).Interior.ColorIndex = 36
                    Next
                End If
                For i = 1 To 15 '???
                    With .Cells(lz + 1 + i, 5)
                        If .Value <> "" And .Interior.ColorIndex <> 15 Then
                            .Value = ""
                            .Interior.ColorIndex = 0
                        Else
                            Exit For
                        End If
                    End With
                Next
            End If
        End With
        Application.ScreenUpdating = vorher
        Application.EnableEvents = vorher_event
    End If
End Sub

Function T_AGENDA_farbende()
Dim v, lz As Long, vertr As Range, i As Integer
' Zeile Vertreter finden

With T_Agenda_var
    Do
        Set vertr = .Columns("B:B").Find(T_versteck.Range("J19").Offset(0, i))
        i = i + 1
    Loop While vertr Is Nothing And i < 2
    If Not vertr Is Nothing Then
        Do
            Set vertr = vertr.Offset(-1, 0)
        Loop Until vertr.Value <> "" And vertr.Row > 5
        v = vertr.Row
    Else
        v = 10000
    End If
    ' letzte leere Zeile
    lz = LOP_letzte_zeile(.Cells(1, 2), 5)
    If lz > v Then
        T_AGENDA_farbende = v
    Else
        T_AGENDA_farbende = lz
    End If
End With
End Function

Private Sub KAL_erzeugen()
Const br = 80 ' Zeichenbreite
Dim datum, zeit, dauer, ort, betreff, body, doppel, t As String
Dim i, ii, lz, lz2 As Integer

If T_Agenda_var Is Nothing Then Exit Sub
With T_Agenda_var
    datum = .Range("b3").Value
    Do While Not z_IssDate(datum)
        sp1(0) = "Bitte geben Sie ein g|fffd|ltiges Datume in": sp1(1) = "please insert a valid date"
        sp2(0) = "Fehler Kalendereintrag": sp2(1) = "Failer calendar item"
        datum = InputBox(sp1(s), sp2(s), datum)
    Loop
    zeit = .Range("e5").Value
    Do While Not IsNumeric(zeit)
        sp1(0) = "Bitte eine Zeit eingeben": sp1(1) = "please insert time"
        sp2(0) = "Fehler Kalendereintrag": sp2(1) = "Failer calendar item"
        zeit = InputBox(sp1(s), sp2(s), zeit)
    Loop
    dauer = .Range("f5").Value
    Do While Not IsNumeric(dauer) And dauer < 1 And dauer > 0
        sp1(0) = "bitte eine Besprechungsdauer in min eingeben": sp1(1) = "Please insert duratin of the meeting (min)"
        sp2(0) = "Fehler Kalendereintrag": sp2(1) = "Failer calendar item"
        dauer = InputBox(sp1(s), sp2(s), dauer)
    Loop
    betreff = .Range("b2").Value
    Do While betreff = ""
        sp1(0) = "Bitte Betreff eingeben": sp1(1) = "please insert topic of the meeting"
        sp2(0) = "Fehler Kalendereintrag": sp2(1) = "Failer calendar item"
        betreff = InputBox(sp1(s), sp2(s), betreff)
    Loop
    ort = .Range("b5").Value
    Do While ort = ""
        sp1(0) = "Bitte Besprechungsort eingeben": sp1(1) = "please name the location of the meeting"
        sp2(0) = "Fehler Kalendereintrag": sp2(1) = "Failer calendar item"
        ort = InputBox(sp1(s), sp2(s), ort)
    Loop
    For i = 1 To br
        doppel = doppel & "="
    Next
    
    ' bis wohin gehen termine
    lz = T_AGENDA_farbende()
    ' bis wohin gehen teilnehmer
    lz2 = LOP_letzte_zeile(.Cells(lz, 2), 3)
    ii = LOP_letzte_zeile(.Cells(lz, 3), 3)
    If ii > lz2 Then lz2 = ii
    ii = LOP_letzte_zeile(.Cells(lz, 4), 3)
    If ii > lz2 Then lz2 = ii
    
    body = vbLf & vbLf & betreff & vbLf & datum & "   " & FormatDateTime(zeit, vbShortTime) & ",   " & dauer & "min" & vbLf & _
            ort & vbLf & doppel & vbLf
                
    For i = 7 To lz + 1
        body = body & KAL_body_zeile(i, br)
    Next
    For i = lz + 1 To lz2
        t = .Cells(i, 1) & "   " & .Cells(i, 2) & "|   " & .Cells(i, 3) & " / " & .Cells(i, 4) & vbLf
        If Replace(t, " ", "") <> "|/" & vbLf Then body = body & t
    Next
    
    Call KAL_Termin_erzeugen(datum, zeit, dauer, betreff, ort, body)
End With
End Sub

Private Sub KAL_Termin_erzeugen(ByVal datum_t As String, ByVal uhrzeit_t As String, ByVal dauer_t As String, ByVal betreff As String, ByVal ort As String, Optional ByVal body As String)
Dim outlock_app, cal_form, empf As Object
Dim start, datum, uhrzeit As Date, dauer, erinnerung As Integer

' Sinnvolles Startdatum
If z_IssDate(datum_t) Then datum = Int(z_sDate(datum_t))
If IsNumeric(uhrzeit_t) Then uhrzeit = uhrzeit_t - Int(uhrzeit_t)
start = datum + uhrzeit
If start > Now() + 365 Or start < Now() Then
        sp1(0) = "Das Datum ist nicht plausibel": sp1(1) = "the date is not valid"
    MsgBox sp1(s) & FormatDateTime(start, vbGeneralDate)
    start = 0
End If
If uhrzeit < 6 / 24 Or uhrzeit > 23 / 24 Then
    sp1(0) = "Uhrzeit ist unplausibel": sp1(1) = "the time is not valid"
    MsgBox sp1(s) & uhrzeit
    uhrzeit = 0
End If
' sinnvolle Dauer
If IsNumeric(dauer_t) Then dauer = CInt(dauer_t)
If dauer < 5 Or dauer > 1000 Then
        sp1(0) = "Termindauer ist unplausibel": sp1(1) = "the duration is not valid"
    MsgBox sp1(s) & dauer & "min"
    dauer = 0
End If
'kalendereintrag erzeugen
Set outlock_app = CreateObject("Outlook.Application")
outlock_app.session.Logon
   Set cal_form = outlock_app.CreateItem(1)
'  Set cal_form = outlock_app.ActiveWindow.currentitem
   
   With cal_form
        If start > 0 And uhrzeit > 0 Then .start = Int(datum) + uhrzeit - Int(uhrzeit)
        If dauer > 0 Then .Duration = dauer
        .Subject = betreff
        .body = body
        .Location = ort
        .ReminderMinutesBeforeStart = 15
        .ReminderSet = True
        .unread = True
        .display
   End With
   outlock_app.session.Logoff
   Set cal_form = Nothing
End Sub
Function KAL_body_zeile(ByVal zeile As Integer, ByVal breite As Integer) As String
Const S_NR = 1, S_TI = 2, S_VER = 3, S_MIT = 4, S_ZEIT = 5, S_DAU = 6
Const EINRUECK = "              "
Dim t, tt, ttt, titel, rest, z, zz As String, i, iii As Integer
Static gleich, strich As String

If gleich = "" Then
    For i = 1 To breite
        gleich = gleich & "="
        strich = strich & "-"
    Next
        gleich = gleich & vbLf
        strich = Left(EINRUECK & strich, breite) & vbLf
End If
With T_Agenda_var
    tt = .Cells(zeile, S_TI).Value
    i = InStr(1, tt, vbLf)
    If i = 0 Then
        titel = tt
    Else
        titel = Left(tt, i - 1)
        tt = Mid(tt, i + 1)
        Do
            i = InStr(1, tt, vbLf)
            If i > 0 Then
                ttt = Left(tt, i)
                tt = Mid(tt, i + 1)
            Else
                ttt = RTrim(tt)
            End If
            rest = rest & KAL_zeile_splitten(ttt, breite, EINRUECK)
        Loop Until i = 0
    End If
    titel = KAL_zeile_splitten(titel, breite - Len(EINRUECK) - 5, "")
    
    If .Cells(zeile, S_DAU).Value <> "" Then z = "min,   "
    t = t & FormatDateTime(.Cells(zeile, S_ZEIT).Value, vbShortTime) & "   " & .Cells(zeile, S_DAU).Value & z & _
            KAL_umb_raus(.Cells(zeile, S_VER).Value)
    If .Cells(zeile, S_MIT).Value <> "" Then t = t & "  &  " & KAL_umb_raus(.Cells(zeile, S_MIT).Value)
    
    z = "": zz = "": If .Cells(zeile, S_NR).Value <> "" Then z = "TOP ": zz = ":   "
    If titel <> "" Then t = t & vbLf & EINRUECK & z & .Cells(zeile, S_NR).Value & zz & titel
    t = t & vbLf
    If rest <> "" Then t = t & strich & rest & vbLf
    t = t & gleich
End With
KAL_body_zeile = t
End Function
Private Function KAL_zeile_splitten(ByVal t As String, ByVal breite As Integer, Optional ByVal v As String) As String
' |fffd|bernimmt zeilen h|fffd|ngt den vorspann davor und bringt zeilenumbr|fffd|che ein
Dim i As Integer, rest, z As String
t = v & t
Do
    If Len(t) > breite Then
        i = breite + 1
        Do
        i = i - 1
        z = Mid(t, i, 1)
        Loop Until z = " " Or z = "," Or z = ";" Or z = "." Or i <= 1
        rest = rest & Left(t, i) & vbLf
        t = v & Mid(t, i + 1)
    Else
        rest = rest & t
        Exit Do
    End If
Loop
KAL_zeile_splitten = rest
End Function

Private Function KAL_umb_raus(ByVal t As String) As String
'Umbruch speziell in Namensfeldern ersetzen
KAL_umb_raus = Replace(Replace(Replace(t, Chr(10) & Chr(13), ", "), Chr(10), ", "), "  ", " ")
End Function




Sub T_FEED_Activate(uhu As Boolean)
On Error Resume Next
    Range("A1:F1").Select
    ActiveWindow.Zoom = True
    Range("C3").Select
End Sub
Sub PROT_LOPs_nach_Word()
Attribute PROT_LOPs_nach_Word.VB_Description = "W"
Attribute PROT_LOPs_nach_Word.VB_ProcData.VB_Invoke_Func = "W\n14"
Dim text, vor, ss As String, a As Integer, zelle As Range, dat_ab As Date
Dim zeilen(1000) As Integer
Static dat, k As String, zweiter_durchlauf As Boolean
If ActiveSheet.CodeName = "T_LOP" Or ActiveSheet.CodeName = "T_LOP_erledigt" Then

op_ablauf = M_PROT_M
        'xxx 01.06.2010
        Call z_ShowAnyForm("Offener_Punkt", vbModal)
        ' Offener_Punkt.Show
op_ablauf = M_NORM

If form_exit = vbCancel Then Exit Sub

With T_versteck
    ' |fffd|bernehme Erg|fffd|nzungen aus T_Versteck
    ss = .Range("I18").Value
    If IsDate(ss) Then
        dat_ab = CDate(ss)
    Else
        dat_ab = 1
    End If
    ss = .Range("I19").Value
    If Not IsNumeric(ss) Then
        k = 999
    Else
        k = CInt(ss)
    End If
End With

For Each zelle In Selection
    If zelle.Height > 0 Then
        zeilen(a) = zelle.Row
        a = a + 1
    End If
Next
    text = PROT_LOP_Zeilen_html_umwandeln(ActiveSheet, zeilen(), dat_ab, k)
    PROT_HTML_Clipboard (text)
    PROT_Clipboard_word
End If
End Sub

Sub PROT_gesamt_nach_Word()
Attribute PROT_gesamt_nach_Word.VB_Description = "P"
Attribute PROT_gesamt_nach_Word.VB_ProcData.VB_Invoke_Func = "P\n14"
Dim erg, a, b, start, Ende, i, col_titel, col_datum, zeilen(1000) As Integer
Dim dat_ab, dat_erg As Date
Dim z_titel, z_ausdruck_lop, z_ausdruck_erl As Range, blatt(2) As Worksheet
Dim k, text, Z_LOP, dat, vorspann, vor, zus, ss As String

op_ablauf = M_PROT_G
'xxx 01.06.2010
Call z_ShowAnyForm("Offener_Punkt", vbModal)
op_ablauf = M_NORM

If form_exit = vbCancel Then Exit Sub

With T_versteck
    ' |fffd|bernehme Erg|fffd|nzungen aus T_Versteck
    ss = .Range("I18").Value
    If IsDate(ss) Then
        dat_ab = CDate(ss)
    Else
        dat_ab = 3
    End If
    ss = .Range("I19").Value
    If Not IsNumeric(ss) Then
        k = 999
    Else
        k = CInt(ss)
    End If
End With

With T_versteck
    start = .Range("D4").Value + 1
    If .Range("K29").Value + 1 > start Then start = .Range("K29").Value + 1
    col_titel = .Range("C4")
    col_datum = .Range("C3")
End With

Set blatt(0) = T_LOP
Set blatt(1) = T_LOP_erledigt

For b = 0 To 1
    ' Abfrage nur gefilterte offenen Puntke ???
    If blatt(b).FilterMode Then
            sp1(0) = "Sollen nur die sichtbaren (gefilterten) Punkte ausgegeben werden ?"
            sp1(1) = "Do you want to transfer the visible (filtered) items only ?"
            sp2(0) = "Filter ist aktiv in:  "
            sp2(1) = "A filter is active:  "
        If vbNo = MsgBox(sp1(s), vbQuestion & vbYesNo, sp2(s) & blatt(b).name) Then
            blatt(b).ShowAllData
            If b = 0 Then LOP_advancedfilter_felder_loeschen True
        End If
    End If
    
    ' auszudruckende Punkte ermitteln
    a = 0
    vorspann = "<a style=""font-size: 11pt;line-height: 12pt; font-weight: light; text-decoration: none; ""><font face=""BMWTypeRegular,Arial,Helvetica,SunSans-Regular"">"
    If dat_ab > 3 Then
        sp3(0) = "<br>mit &Auml;nderungen ab " & dat_ab
        sp3(1) = "<br>with additions from " & dat_ab
    Else
        sp3(0) = ""
        sp3(1) = ""
    End If
        sp1(0) = "<b>Offene Punkte</b>"
        sp1(1) = "<b>Open items</b>"
        sp2(0) = "<b>Erledigte  Punkte</b>"
        sp2(1) = "<b>finished items</b>"
        
    If b = 0 Then text = vorspann & sp1(s) & sp3(s)
    If b = 1 Then text = vorspann & sp2(s) & sp3(s)
    If Val(k) < 99 Then text = text & ", gek&uuml;rzt auf " & k + b & " Erg&auml;nzung(en)</a><br><br>"
    
    With blatt(b)
        Ende = LOP_letzte_zeile(.Cells(start, col_titel), 50)
        For i = start To Ende
            Set z_titel = .Cells(i, col_titel)
            If col_datum = 0 Then
                dat_erg = PROT_max_dat(z_titel.Value)
            Else
                dat_erg = PROT_max_dat(.Cells(i, col_datum).Value & vbLf & z_titel.Value)
            End If
            If Not z_titel.Rows.Hidden And dat_erg >= dat_ab And dat_ab > 2 Then
                zeilen(a) = z_titel.Row
                a = a + 1
            End If
        Next
    End With
    
    text = text & PROT_LOP_Zeilen_html_umwandeln(blatt(b), zeilen, dat_ab, k + b) ' bei erledigt neben dem verschoben Vermerk noch eine weitere
    If a > 0 Then
        PROT_HTML_Clipboard (text)
        PROT_Clipboard_word
    End If
    a = 0
    ' -- leeren des Arrays
    Do While zeilen(a) > 0
        zeilen(a) = 0
        a = a + 1
    Loop
Next
End Sub

Private Function PROT_max_dat(ByVal tt As String) As Date
'Ermittelt in einer Zelle mit text das neueste Datum, das nach zeilenumbruch oder am Anfang steht.
Dim dd, i, ii, p As Integer, dat_akt, dat_max As Date
Const P_MAX As Integer = 10000
ii = Len(tt)
For i = 1 To ii
    p = InStr(i, tt, vbLf, vbTextCompare)
    If p = 0 Then p = P_MAX
    If (z_IssDate(Mid(tt, i, 8)) Or z_IssDate(Mid(tt, i, 10))) And IsNumeric(Mid(tt, i, 1)) Then
        If z_IssDate(Mid(tt, i, 10)) Then
            dd = 10
        Else
            dd = 8
        End If
        dat_akt = z_sDate(Mid(tt, i, dd))
        If dat_akt > dat_max Then dat_max = dat_akt
    End If
   If ii >= p Then i = p
   If p = P_MAX Then i = ii
Next
If dat_max = 0 Then dat_max = z_sDate("01.01.2000")
PROT_max_dat = dat_max
End Function

Private Function PROT_titel_kuerzen(ByVal tt As String, ByVal seit As Date, ByVal letzte As Integer, Optional ByVal richtung As Integer) As String
Dim u_vorh, e_vorh, i, ii, a, p, dd, reihe(50), mm As Integer, u, E, texte(50), ta As String, t_dat(50), s_dat(50) As Date
Dim schreiben, schon_mal_nicht_geschrieben As Boolean
Const P_MAX As Integer = 10000

'Analysieren
    ii = Len(tt)
    For i = 1 To ii
        p = InStr(i, tt, vbLf, vbTextCompare)
        If p = 0 Then p = P_MAX
        If u_vorh = 0 Then
            u = Left(tt, p - 1)
            u_vorh = vbOK
        Else
            If (z_IssDate(Mid(tt, i, 8)) Or z_IssDate(Mid(tt, i, 10))) And IsNumeric(Mid(tt, i, 1)) Then
                If e_vorh = 0 Then e_vorh = vbCancel
                a = a + 1
                texte(a) = Mid(tt, i, p - i)
                If z_IssDate(Mid(tt, i, 10)) Then
                    dd = 10
                Else
                    dd = 8
                End If
                t_dat(a) = z_sDate(Mid(tt, i, dd))
                s_dat(a) = t_dat(a)
                e_vorh = vbOK
            ElseIf e_vorh = 0 Then
                'xxx 08.10.2008
                If E = "" Then
                    E = Mid(tt, i, p - i)
                Else
                    E = E & vbLf & Mid(tt, i, p - i)
                End If
            Else
                texte(a) = texte(a) & vbLf & Mid(tt, i, p - i)
            End If
        End If
       If ii >= p Then i = p
       If p = P_MAX Then i = ii
    Next
'kuerzen
    ta = u
    If E <> "" Then ta = ta & vbLf & E
    For i = 1 To a
        mm = PROT_max(s_dat, a)
        s_dat(mm) = 0
        reihe(mm) = i
    Next
    For i = 1 To a
        schreiben = False
        If seit > 2 Then
            If t_dat(i) >= seit Then schreiben = True
        End If
        If letzte > 0 Then
           If reihe(i) <= letzte Then schreiben = True
'           If i > a - letzte Then schreiben = True
        End If
        If schreiben = True Then
            ta = ta & vbLf & texte(i)
        Else
            If Not schon_mal_nicht_geschrieben Then ta = ta & vbLf & "------------------- {gek|fffd|rzt} ---------------------"
            schon_mal_nicht_geschrieben = True

        End If
    Next
    PROT_titel_kuerzen = ta

End Function

Private Function PROT_max(ByRef va() As Date, ByVal ii As Integer) As Integer
Dim max As Date, i As Integer

For i = 1 To ii
    If va(i) > max Then
        max = va(i)
        PROT_max = i
    End If
Next
End Function

Private Function PROT_LOP_Zeilen_html_umwandeln(ByRef blatt As Worksheet, ByRef z_zeile() As Integer, Optional ByVal kuerzen_datum As Date, Optional ByVal kuerzen_anzahl As Integer) As String
Dim a, b, nr, titel, verantw, beteiligt, Bis, farbe, farbe_datum  As String, zeilen(1000) As Long, i, z As Integer, doublette As Boolean, zelle As Range
On Error Resume Next
' Generieren HTML Vorspann
        b = b & "<Font face=""BMWTypeRegular,Arial""><style type=""text/css""><!--"
        b = b & "th {color: #000000; font-family: BMWTypeRegular,Arial,Helvetica,SunSans-Regular; font-size: 11pt;line-height: 12pt; font-weight: bold; text-decoration: none; }"
        b = b & "td {color: #000000; font-family: BMWTypeRegular,Arial,Helvetica,SunSans-Regular; font-size: 11pt;line-height: 12pt; font-weight: light; text-decoration: none; }"
        b = b & "--></style><TABLE  border=""1"" cellpadding=4 cellspacing=-1 Font face=""Arial"">"
 ' Generieren HTML f|fffd|r Zeilen
Do While z_zeile(a) > 0
     ' wurde Zeile schon ausgegeben ?
     i = 0
     doublette = False
     z = z_zeile(a)
     'Autofilterzeile oder |fffd|berschriftszeile
     If z <= T_versteck.Range("D4").Value Or z <= T_versteck.Range("K23").Value Then doublette = True
     Do While zeilen(i) > 0
        If zeilen(i) = z Then
            doublette = True
            Exit Do
        End If
        i = i + 1
     Loop
     If doublette = False Then
     zeilen(i) = z
     ' HTML Zeilengernator
      With blatt
                nr = .Cells(z, T_versteck.Range("C2").Value).Value
                titel = .Cells(z, T_versteck.Range("C4").Value).Value
                If kuerzen_datum > 0 Or kuerzen_anzahl > 0 Then
                    titel = PROT_titel_kuerzen(titel, kuerzen_datum, kuerzen_anzahl)
                End If
                titel = name_titelformat(titel)
                titel = titel & namen_mail_ergaenzungstext(z)
                verantw = .Cells(z, T_versteck.Range("C6").Value).Value
                beteiligt = .Cells(z, T_versteck.Range("C7").Value).Value
                If beteiligt = "" Then
                    beteiligt = "&nbsp"
                Else
                    beteiligt = "<br><b>+</b><br>" & Replace(beteiligt, vbLf, "<br>")
                End If
                Bis = .Cells(z, T_versteck.Range("C8").Value).Value
                Bis = Replace(Bis, ".20", ".")
                ' xxx 06.05.2010 Einf|fffd|rben im Protokoll
                farbe_datum = ""
                If .Cells(z, T_versteck.Range("C8").Value).Value < Date Then
                    farbe_datum = "bgcolor=""#FFDCDC"""
                End If
                If blatt.name = T_LOP.name Then
                    farbe = ""
                Else
                    farbe = "bgcolor=""#D3D3D3"""
                    farbe_datum = ""
                End If
        End With
            b = b & "<TR ><TD width=""50"" align=""center"" valign=""top""" & farbe & ">" & nr & "</td><td width=""400"">" & titel
            b = b & "</td><td width=""100"" align=""center"" valign=""top""><b>" & Replace(verantw, vbLf, "<br>") & "</b>" & beteiligt
            b = b & "</td><td  width=""70"" valign=""top""" & farbe_datum & ">" & Replace(Bis, vbLf, "<br>") & "</TD></TR>"
       End If
       a = a + 1
Loop
        b = b & "</table>"
'HTML Umlaute
b = Replace(Replace(Replace(Replace(Replace(Replace(Replace(b, "|fffd|", "&auml;"), "|fffd|", "&Auml;"), "|fffd|", "&ouml;"), "|fffd|", "&Ouml;"), "|fffd|", "&uuml;"), "|fffd|", "&Uuml;"), "|fffd|", "&szlig;")
b = Replace(b, vbLf, "<BR>")

' Senden nach WORD

PROT_LOP_Zeilen_html_umwandeln = b
End Function

' Private
Sub PROT_HTML_Clipboard(HTMLText As String)
  Dim HTML_kennung As Long
  Dim text As String
  HTML_kennung = RegisterClipboardFormat("HTML Format")
  text = "Version:0.9" & vbCrLf
  text = text & "StartHTML:-1" & vbCrLf
  text = text & "EndHTML:-1" & vbCrLf
  text = text & "StartFragment:000081" & vbCrLf
  text = text & "EndFragment:|fffd||fffd||fffd||fffd||fffd||fffd|" & vbCrLf
  text = text & HTMLText & vbCrLf
  text = Replace(text, "|fffd||fffd||fffd||fffd||fffd||fffd|", _
  Format$(Len(text), "000000"))

  With New DataObject
    .Clear
    .SetText StrConv(text, vbFromUnicode), HTML_kennung
    .PutInClipboard
  End With
End Sub

Private Sub PROT_Clipboard_word()
Dim word_prog, word_doc As Object, erg As Integer
Const wdPasteHTML As Integer = 10
On Error Resume Next
Do
    Set word_prog = GetObject(, "Word.Application")
     If IsEmpty(word_prog) Then
            sp1(0) = "Bitte |fffd|ffnen Sie Word und eine Protokolldatei"
            sp1(1) = "Please open Word and a file for the document"
            sp2(0) = "MS Word ist nicht offen"
            sp2(1) = "MS Word is not ready"
        erg = MsgBox(sp1(s), vbRetryCancel, sp2(s))
        If erg = vbCancel Then Exit Sub
    End If
Loop While IsEmpty(word_prog)
If Not IsEmpty(word_prog) Then
    If word_prog.documents.Count > 0 Then
        Set word_doc = word_prog.ActiveDocument
    Else
        Set word_doc = word_prog.documents.Add
        word_prog.Visible = True
    End If
    If Not word_doc Is Nothing Then
                word_doc.Activate
                word_prog.Selection.Collapse Direction:=1
                word_prog.Selection.TypeParagraph
                word_prog.Selection.PasteSpecial DataType:=wdPasteHTML
    End If
End If
End Sub

Private Sub Teilnehmer_erw_funktionen()
Dim w As Workbook, istda As Boolean, erg As Integer
On Error Resume Next
    Call UPD_Makros_oeffnen
    For Each w In Workbooks
        If w.name = UPD_Datei Then istda = True: Exit For
    Next w
    If istda Then
        erg = Run(UPD_Datei & "!teilnehmer_zus_funktionen", ThisWorkbook.name, Selection.Address)
    Else
        sp1(0) = "Die zus|fffd|tzlichen Funktionen sind nicht verf|fffd|gbar !" & vbLf & vbLf & "Sie sind nicht am BMW Netz oder" & vbLf & "der Pfad zur MasterLOP ist falsch" & vbLf & vbLf
        sp1(1) = "The additional functions are not available !" & vbLf & vbLf & "You are not within the BMW computer network or" & vbLf & "the path to the LOP master is false" & vbLf & vbLf
        sp2(0) = "Kein Anschluss": sp2(1) = "No connection"
        erg = MsgBox(sp1(s) & T_versteck.Range("B20").Value, vbExclamation, sp2(s))
    End If
    
End Sub

Sub Undo_change(ByVal Target As Range)
Dim off, off_next As Integer
If undo_merker = False Then
        With T_versteck
            off = .Range("A39").Value + 1: If off = undo_anz Then off = 1
            off_next = off + 1: If off_next = undo_anz Then off_next = 1
            .Range("A39").Value = off
            .Range("A36").Offset(0, off).Value = .Range("A36").Value
            .Range("A36").Offset(0, off_next).Value = ""
            .Range("A37").Offset(0, off).Value = Target.Value
            .Range("A38").Offset(0, off).Value = .Range("A38").Value
            .Range("A39").Offset(0, off).Value = Target.Worksheet.name
        End With
End If
End Sub

Sub Undo_selection_change(Target As Range)
    With T_versteck
      .Range("A38") = ActiveCell.Value
      .Range("A36") = ActiveCell.Address
    End With
End Sub

Sub Undo_proc()
Attribute Undo_proc.VB_Description = "Z"
Attribute Undo_proc.VB_ProcData.VB_Invoke_Func = "Z\n14"
' On Error Resume Next
Dim off As Integer, ws_name, addr As String, wert As Variant
undo_merker = True
With T_versteck
    off = .Range("A39").Value
    ws_name = .Range("A39").Offset(0, off).Value
    wert = .Range("A38").Offset(0, off).Value
    addr = .Range("A36").Offset(0, off).Value
    If ActiveSheet.name = ws_name And addr <> "" Then
        Worksheets(ws_name).Range(addr).Value = wert
        If off = 1 Then off = undo_anz
        .Range("A39").Value = off - 1
    End If
End With
undo_merker = False
End Sub

Sub Undo_Do_proc()
Attribute Undo_Do_proc.VB_Description = "E"
Attribute Undo_Do_proc.VB_ProcData.VB_Invoke_Func = "E\n14"
Dim off As Integer, ws_name, addr As String, wert As Variant
undo_merker = True
' On Error Resume Next
With T_versteck
    off = .Range("A39").Value + 1
    If off = undo_anz Then off = 1
    ws_name = .Range("A39").Offset(0, off).Value
    wert = .Range("A37").Offset(0, off).Value
    addr = .Range("A36").Offset(0, off).Value
    If ActiveSheet.name = ws_name And addr <> "" Then
        Worksheets(ws_name).Range(addr).Value = wert
        .Range("A39").Value = off
    End If
End With
undo_merker = False
End Sub

Sub Kalender_anzeigen()
Attribute Kalender_anzeigen.VB_Description = "K"
Attribute Kalender_anzeigen.VB_ProcData.VB_Invoke_Func = "K\n14"
    Call z_ShowAnyForm("LOP_Kalender", vbModeless)
End Sub
Sub Kalender_men_einfuegen()
Dim schalt As CommandBarControl
    Set schalt = CommandBars("Cell").Controls.Add(Type:=msoControlButton, Temporary:=True)
    With schalt
        .FaceId = 1098
        .Caption = Kalender
        .BeginGroup = True
        .OnAction = "Kalender_anzeigen"
        .Style = msoButtonIconAndCaption
    End With
End Sub
Sub Kalender_men_loeschen()
    On Error Resume Next
Do
    CommandBars("Cell").Controls("Kalender").Delete
Loop Until CommandBars("Cell").Controls("Kalender") Is Nothing
End Sub

Private Sub UPD_info_freigegeben(Optional ByVal nr As Integer)
Dim erg As Integer
If ThisWorkbook.MultiUserEditing Then
    erg = Run("UPD_merker", vbCancel)
        sp1(0) = "Die LOP ist f|fffd|r gleichzeitige Bearbeitung durch mehrere Benutzer" & vbLf & """FREIGEGEBEN"", dies verhindert automatische Updates" & vbLf & vbLf & _
                "- Heben sie die Freigabe auf und schlie|fffd|en Sie die Datei." & vbLf & _
                "- Nach erneutem |fffd|ffnen und bei mehrmaligem Speichern wird das Update durchgef|fffd|hrt" & vbLf & vbLf & _
                "Wollen Sie die FREIGABE aufheben ?" & nr
        sp1(1) = "More than one user can make changes to the LOP. It is" & vbLf & """SHARED"", This prevents automatic updates" & vbLf & vbLf & _
                "- End sharing and close file." & vbLf & _
                "- Updating will be completed after reopening and multiple resaving" & vbLf & vbLf & _
                "Do you want to end SHARING ?" & nr
        sp2(0) = "  ""FREIGABE"" verhindert Update"
        sp2(1) = "  ""SHARING"" prevents Update"
    erg = MsgBox(sp1(s), vbYesNo, sp2(s))
    If erg = vbYes Then Application.Dialogs(xlDialogFileSharing).Show
End If
End Sub

Sub T_BLATT_Blaetter_ergaenzen()
Dim ss As Worksheet, T_AGENDA_vorh, T_FEEDBACK_vorh, T_LOP_vorh, T_LOP_ERLEDIGT_vorh, T_TEILNEHMER_vorh, T_VERSTECK_vorh As Boolean

    For Each ss In ThisWorkbook.Worksheets
        If ss.CodeName = "T_Agenda" Then T_AGENDA_vorh = True
        If ss.CodeName = "T_Feedback" Then T_FEEDBACK_vorh = True
        If ss.CodeName = "T_LOP" Then T_LOP_vorh = True
        If ss.CodeName = "T_LOP_erledigt" Then T_LOP_ERLEDIGT_vorh = True
        If ss.CodeName = "T_Teilnehmer" Then T_TEILNEHMER_vorh = True
        If ss.CodeName = "T_versteck" Then T_VERSTECK_vorh = True
    Next
    
If Not T_AGENDA_vorh Then T_BLATT_Update ("T_Agenda")
If Not T_TEILNEHMER_vorh Then T_BLATT_Update ("T_Teilnehmer")
    
End Sub

Sub T_BLATT_Update(blattcodename As String)
Dim template_datei, pfad As String, lop_active, lop_template, wb, lop_alt As Workbook, blatt As Variant
Dim vorher_alerts, vorher_events, vorher_agenda As Boolean

With Application
vorher_alerts = .DisplayAlerts
vorher_events = .EnableEvents
vorher_agenda = .ScreenUpdating
.DisplayAlerts = False
.EnableEvents = False
.ScreenUpdating = False
End With

pfad = T_versteck.Range("B20").Value
template_datei = "LOP_EK_Template.xlsm"
Set lop_active = ThisWorkbook

' ist Template sie schon offen
For Each wb In Application.Workbooks
    If wb.name = template_datei Then Set lop_template = wb
Next
'wenn nicht offen laden versuchen
If IsEmpty(lop_template) Then
    If Dir(pfad & "\" & template_datei) <> "" Then
        Workbooks.Open Filename:=pfad & "\" & template_datei, ReadOnly:=True
        For Each wb In Application.Workbooks
            If wb.name = template_datei Then Set lop_template = wb
        Next
    End If
End If
'wenn TEMPLATE nun offen Blatt transferieren
If Not IsEmpty(lop_template) Then
     For Each blatt In lop_template.Sheets
        If blatt.CodeName = blattcodename Then
        blatt.Copy before:=lop_active.Sheets(1)
        Exit For
        End If
    Next
    lop_template.Close SaveChanges:=False
End If

With Application
    .DisplayAlerts = True
    .EnableEvents = True
    .ScreenUpdating = True
End With
End Sub


Function z_sDate(ByVal t As String) As Date
    ' Wandelt deutsches und Englisches Datum um
    Dim y, m, d As String, p1, p2, ll As Integer
    If IsDate(t) Then
        z_sDate = CDate(t)
    Else
        p1 = InStr(1, t, ".")
        p2 = InStr(p1 + 1, t, ".")
        ll = Len(t)
        If p1 > 0 And p2 > 0 And ll > p2 + 1 Then
            d = Left(t, p1 - 1)
            m = Mid(t, p1 + 1, p2 - p1 - 1)
            y = Mid(t, p2 + 1)
            If IsDate(m & "/" & d & "/" & y) Then
                z_sDate = CDate(m & "/" & d & "/" & y)
            End If
        End If
    End If
End Function

Function z_IssDate(ByVal t As String) As Boolean
' pr|fffd|ft deutsches und Englisches Datum um

Dim y, m, d As String, p1, p2, ll As Integer
    If IsDate(t) Then
        z_IssDate = True
    Else
        p1 = InStr(1, t, ".")
        p2 = InStr(p1 + 1, t, ".")
        ll = Len(t)
        If p1 > 0 And p2 > 0 And ll > p2 + 1 Then
            d = Left(t, p1 - 1)
            m = Mid(t, p1 + 1, p2 - p1 - 1)
            y = Mid(t, p2 + 1)
            If IsDate(m & "/" & d & "/" & y) Then
                z_IssDate = True
            End If
        End If
    End If
End Function

Function Z_spalte(t As String) As Integer
    Dim i As Integer
    Const zul_zeichen = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    On Error Resume Next
    t = Trim(UCase(t))
    If t = "" Or Len(t) > 2 Then Exit Function
    For i = 1 To Len(t)
        If InStr(1, zul_zeichen, Mid(t, i, 1)) = 0 Then Exit Function
    Next
    Z_spalte = Range(t & ":" & t).Column
End Function

Function namen_mail_ergaenzungstext(ByVal r As Long) As String
Dim t, t1, t2, t3, tt As String, sp As Integer, ue As Boolean
Const TRENNZEICHEN = " ; "
    ue = T_versteck.Range(MAIL_SP_UEBER).Value
    If T_versteck.Range(MAIL_SP_ERG).Value = True Then
        sp = Z_spalte(T_versteck.Range(MAIL_SP_ERG1))
        If sp > 0 Then
            tt = Trim(Cells(r, sp).Value)
            If ue And tt <> "" Then t1 = Z_Spalten_ueberschrift(MAIL_SP_ERG1)
            If t1 <> "" Then t1 = t1 & ": "
            t1 = t1 & tt
        End If
        
        sp = Z_spalte(T_versteck.Range(MAIL_SP_ERG2))
        If sp > 0 Then
            tt = Trim(Cells(r, sp).Value)
            If ue And tt <> "" Then t2 = Z_Spalten_ueberschrift(MAIL_SP_ERG2)
            If t2 <> "" Then t2 = t2 & ": "
            t2 = t2 & tt
        End If
        
        sp = Z_spalte(T_versteck.Range(MAIL_SP_ERG3))
        If sp > 0 Then
            tt = Trim(Cells(r, sp).Value)
            If ue And tt <> "" Then t3 = Z_Spalten_ueberschrift(MAIL_SP_ERG3)
            If t3 <> "" Then t3 = t3 & ": "
            t3 = t3 & tt
        End If
        If t1 <> "" Or t2 <> "" Or t3 <> "" Then
            t = vbLf & "--------------------------------" & vbLf
            ' If t1 <> "" Then
            t = t & t1
            If t2 <> "" Then t = t & TRENNZEICHEN & t2
            If t2 = "" And t3 <> "" Then t = t & TRENNZEICHEN
            If t3 <> "" Then t = t & TRENNZEICHEN & t3
        End If
    End If
    namen_mail_ergaenzungstext = t
End Function

Function Z_Spalten_ueberschrift(zz As String) As String
    Dim t As String, i, sp  As Integer
    sp = Z_spalte(T_versteck.Range(zz))
    If sp > 0 Then
        t = Trim(T_LOP.Cells(T_versteck.Range("D4"), sp))
        i = InStr(1, t, vbLf)
        If i > 1 Then t = Left(t, i - 1)
    End If
    Z_Spalten_ueberschrift = t
End Function

Private Function z_Iss_zahl(ByVal zeichen As String) As Boolean
    Dim z, i As Integer
    Const zul_zeichen = "-,.1234567890"
    z = Len(zeichen)
    If z > 0 Then
        z_Iss_zahl = True
        For i = 1 To z
            If InStr(1, zul_zeichen, Mid(zeichen, i, 1)) = 0 Then z_Iss_zahl = False: Exit For
        Next
    End If
End Function

Private Function pfad_saeubern(pfad As String) As String
If Left(pfad, 5) = "file:" Then pfad = Right(pfad, Len(pfad) - 5)
If Right(pfad, 1) = "\" Then pfad = Left(pfad, Len(pfad) - 1)
pfad_saeubern = UCase(pfad)
End Function

Sub z_ShowAnyForm(FormName As String, Optional Modal As FormShowConstants = vbModal)
     Dim Obj As Object
     For Each Obj In VBA.UserForms
         If StrComp(Obj.name, FormName, vbTextCompare) = 0 Then
             Obj.Show Modal
             Exit Sub
         End If
     Next Obj
     With VBA.UserForms
         On Error Resume Next
             ' Err.Clear
         Set Obj = .Add(FormName)
             ' If Err.Number <> 0 Then Exit Sub
         Obj.Show Modal
     End With
 End Sub

Attribute VB_Name = "LOP_Namensauswahl"
Attribute VB_Base = "0{0582204E-D49E-49B5-93D9-36DD06797258}{9C348137-1B34-4C30-A3CB-A9DD463E1B59}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' 23.09.2009: Nummern in Namen |fffd|bernehmen
' 20.05.2009: Einbindung in den Mailversand
' 10.01.2009: Update Office 2007
' 17.09.2008: Englisch eingebaut, Sprachceck offen
' 21.07.2008: Ersterstellung
Option Explicit
Const NAMENSTRENNER = vbLf

Private Sub B_Abbruch_Click()
liste(0) = "ABBRUCH"
Unload Me
End Sub

Private Sub B_alle_abwaehlen_Click()
Dim i As Integer
    With Me.ListBox1
            For i = 0 To .ListCount - 1
                .Selected(i) = False
            Next
    End With
End Sub

Private Sub B_Kalender_Click()
Unload Me
LOP_Kalender.Show 0
End Sub

Private Sub B_OK_Click()
Dim i As Integer, n, b As String

If op_ablauf = M_NORM Then
    For i = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(i) Then b = b & NAMENSTRENNER & namens_extrakt(ListBox1.List(i))
    Next
    b = Trim(b)
    If ActiveCell.Value = "" Then
        ActiveCell.Value = Mid(b, Len(NAMENSTRENNER) + 1)
    Else
     ActiveCell.Value = ActiveCell.Value & b
    End If
ElseIf op_ablauf = M_MAIL_G Then
    For i = 0 To ListBox1.ListCount - 1
        If Not ListBox1.Selected(i) Then liste(i) = ""
    Next
End If
    Unload Me
End Sub

Private Function namens_extrakt(name As String) As String
Dim i, J As Integer, zeichen, z As String
namens_extrakt = ""
If name <> "" Then
    ' Hr. und Fr. und Dr. mitnehmen
    If Mid(name, 3, 2) = ". " Then
        J = 5
    ElseIf Mid(name, 3, 1) = " " Then
        J = 4
    Else
        J = 1
    End If
    For i = J To Len(name)
        z = Asc(Mid(name, i, 1))
        If Not ((z = 45) Or (z = 46) Or (z = 95) Or (z >= 48 And z <= 57) Or (z >= 64 And z <= 90) Or (z >= 97 And z <= 122) Or (z >= 192 And z <= 255)) Then
            Exit For
        End If
    Next
namens_extrakt = Left(name, i - 1)
End If
End Function


Private Sub UserForm_Initialize()
Dim i As Long
Dim namensliste, xx As Variant
On Error Resume Next
With Me
    sp(0) = "Namensauswahl": sp(1) = "Select Names": .Caption = sp(s)
    sp(0) = "Abbruch": sp(1) = "ESC": .B_Abbruch.Caption = sp(s)
End With
        
    With Me.ListBox1
        .Clear
        If op_ablauf = M_NORM Then
            sp(0) = "Namensauswahl": sp(1) = "Select Names": Me.Caption = sp(s)
            namensliste = items_ermitteln(bereich_teilnehmer, True)
            For i = 1 To UBound(namensliste)
                .AddItem (namensliste(i))
            Next i
            Me.B_alle_abwaehlen.Visible = False
        ElseIf op_ablauf = M_MAIL_G Then
            sp(0) = "Namen f|fffd|r Email ": sp(1) = "Select Names for MAIL": Me.Caption = sp(s)
            sp(0) = "Markierung" & vbLf & "entfernen": sp(1) = "cancel" & vbLf & "selection": Me.B_alle_abwaehlen.Caption = sp(s)
            Do While liste(i) <> ""
                .AddItem (liste(i))
                i = i + 1
            Loop
            For i = 0 To .ListCount - 1
                .Selected(i) = True
            Next
        End If
        .ListIndex = 0 ' select the first item
    End With
    If ActiveCell.Column <> T_versteck.Range("C3") Or op_ablauf = M_MAIL_G Then B_Kalender.Visible = False
End Sub

Private Function items_ermitteln(InputRange As Range, _
    HorizontalList As Boolean) As Variant
Dim cl As Range, cUnique As New Collection, i As Long, uList() As Variant

'    Application.Volatile
    On Error Resume Next
    For Each cl In InputRange
        With cl
        If .Formula <> "" Then
            cUnique.Add .Value, CStr(.Value)
        End If
        End With
    Next cl
        Call sort_collection(cUnique)
    items_ermitteln = ""
    If cUnique.Count > 0 Then
        ReDim uList(1 To cUnique.Count)
        For i = 1 To cUnique.Count
            uList(i) = cUnique(i)
        Next i
        items_ermitteln = uList
        If Not HorizontalList Then
            items_ermitteln = _
                Application.WorksheetFunction.Transpose(items_ermitteln)
        End If
    End If

On Error GoTo 0
End Function

Private Function bereich_teilnehmer() As Range
'Sucht im Tabellenblatt "Teilnehmer" die Namen aus
'----------------------------------------------------------------------
Dim zelle_teilnehmer, zelle_namen As Range, x, p, l, r_letzte, spalte_namen As Integer
Dim n, firstaddress As String
On Error Resume Next
With T_versteck
    If .Range("J17").Value = "" Then .Range("J17").Value = "Teilnehmer"
    If .Range("K17").Value = "" Then .Range("K17").Value = "Participants"
End With

With T_Teilnehmer
Set zelle_teilnehmer = .UsedRange.Find(T_versteck.Range("J17").Value) 'deutsch
If zelle_teilnehmer Is Nothing Then Set zelle_teilnehmer = .UsedRange.Find(T_versteck.Range("K17").Value) 'englisch
    If Not zelle_teilnehmer Is Nothing Then
        spalte_namen = zelle_teilnehmer.Column
        r_letzte = LOP_letzte_zeile(zelle_teilnehmer, 50)
        n = zelle_teilnehmer.Address & ":" & Cells(r_letzte, spalte_namen).Address
        Set bereich_teilnehmer = T_Teilnehmer.Range(zelle_teilnehmer.Offset(1, 0).Address & ":" & Cells(r_letzte, spalte_namen).Address)
     End If
End With
End Function

Private Sub sort_collection(ByRef cFruit As Collection)
    Dim vItm As Variant
    Dim i As Long, J As Long
    Dim vTemp As Variant
    On Error Resume Next
    For i = 1 To cFruit.Count - 1
        For J = i + 1 To cFruit.Count
            If cFruit(i) > cFruit(J) Then
                ' store the lesser item
                vTemp = cFruit(J)
                 'remove the lesser item
                cFruit.Remove J
                're-add the lesser item before the greater Item
                cFruit.Add vTemp, vTemp, i
            End If
        Next J
    Next i

End Sub


Attribute VB_Name = "LOP_Sortieren"
Attribute VB_Base = "0{3CB36D0A-B8CF-4880-BFBA-EDB90B8AC5B5}{63ED571C-8BE4-4ACE-B15E-6E1E39B8FC76}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' 10.01.2009: Update Office 2007
' 17.09.2008: Englisch eingebaut, Sprachceck offen
' 10.06.2008: automatische Zeilenh|fffd|he nach sortieren

Dim sortierbar As Boolean

Private Sub Command_ESC_Click()
  Unload Me
End Sub

Private Sub Command_OK_Click()
Dim z_merker, sk1, sk2, sk3, b_sort As Range
Dim r_titel, r_ende, sort_zahl As Integer
Dim s1, s2, s3 As Boolean
s1 = False
s2 = False
s3 = False

Sort_Verantw_3.Value = sort_kriterien_check(Sort_Verantw_3.Value)
Sort_var_1.Value = sort_kriterien_check(Sort_var_1.Value)
Sort_var_2.Value = sort_kriterien_check(Sort_var_2.Value)
Sort_var_3.Value = sort_kriterien_check(Sort_var_3.Value)


With T_versteck
    .Range("F16").Value = UCase(Sort_Verantw_3.Value)
    .Range("F17").Value = UCase(Sort_var_1.Value)
    .Range("G17").Value = UCase(Sort_var_2.Value)
    .Range("H17").Value = UCase(Sort_var_3.Value)
End With
    
'---Sortierbereich---------
r_titel = T_versteck.Range("D4").Value
If T_versteck.Range("D12").Value = "OK" Then
    If T_LOP.AutoFilterMode Then
        If r_titel < T_LOP.AutoFilter.Range.Row Then r_start = 1 + T_LOP.AutoFilter.Range.Row
    Else
        r_start = r_titel + 1
    End If
    r_ende = LOP_letzte_zeile(T_LOP.Range(T_versteck.Range("B4").Value), 50)
    Set b_sort = T_LOP.Range(Cells(r_start, 1), Cells(r_ende, 250))
End If
    
'------sortieren ---------------
'---Nummer---
Set z_merker = T_versteck.Range("D17")
  Unload Me
If O_Sort_Nummer.Value Then
z_merker.Value = 1
Set sk1 = Cells(r_start, T_versteck.Range("C2").Value)
sort_zahl = 1
'---vatnwort datum---
ElseIf O_Sort_Verantw.Value Then
z_merker.Value = 2
    If Sort_Verantw_3.Value <> "" Then
        Set sk1 = Range(Sort_Verantw_3.Value & r_start)
        Set sk2 = Cells(r_start, T_versteck.Range("C6").Value)
        Set sk3 = Cells(r_start, T_versteck.Range("C8").Value)
        sort_zahl = 3
    Else
        Set sk1 = Cells(r_start, T_versteck.Range("C6").Value)
        Set sk2 = Cells(r_start, T_versteck.Range("C8").Value)
        sort_zahl = 2
    End If

'---frei---
ElseIf O_Sort_Spalten.Value Then
z_merker.Value = 3

    ' ---allle belegt
    If Sort_var_1.Value <> "" Then Set sk1 = Range(Sort_var_1.Value & r_start): s1 = True
    If Sort_var_2.Value <> "" And s1 Then Set sk2 = Range(Sort_var_2.Value & r_start): s2 = True
    If Sort_var_3.Value <> "" And s2 Then Set sk3 = Range(Sort_var_3.Value & r_start): s3 = True
    '--L|fffd|cke bei 2
    If Sort_var_3.Value <> "" And Not s2 And s1 Then Set sk2 = Range(Sort_var_3.Value & r_start): s2 = True
    '---- nur 2 ---
    If Sort_var_2.Value <> "" And Not s1 Then Set sk1 = Range(Sort_var_2.Value & r_start): s1 = True
    If Sort_var_3.Value <> "" And Not s2 And s1 Then Set sk2 = Range(Sort_var_3.Value & r_start): s2 = True
    '---  nur 3
    If Sort_var_3.Value <> "" And Not s1 Then Set sk1 = Range(Sort_var_3.Value & r_start): s1 = True
        
    If s3 Then
        sort_zahl = 3
    ElseIf s2 Then
        sort_zahl = 2
    ElseIf s1 Then
        sort_zahl = 1
    End If
End If
'-----sortieren------------
  
Select Case (sort_zahl)
        Case 0:
        Case 1: b_sort.Sort Key1:=sk1, Order1:=xlAscending, _
                Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        Case 2: b_sort.Sort Key1:=sk1, Order1:=xlAscending, Key2:=sk2, Order2:=xlAscending, _
                Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        Case 3: b_sort.Sort Key1:=sk1, Order1:=xlAscending, Key2:=sk2, Order2:=xlAscending, Key3:=sk3, Order3:=xlAscending, _
                Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    End Select
    
b_sort.Rows.AutoFit

End Sub

Private Sub Sort_var_1_Change()
O_Sort_Spalten = True
Sort_var_1.Value = sort_kriterien_check(Sort_var_1.Value)
End Sub
Private Sub Sort_var_2_Change()
O_Sort_Spalten = True
Sort_var_2.Value = sort_kriterien_check(Sort_var_2.Value)
End Sub
Private Sub Sort_var_3_Change()
O_Sort_Spalten = True
Sort_var_3.Value = sort_kriterien_check(Sort_var_3.Value)
End Sub


Private Sub Sort_Verantw_3_Change()
O_Sort_Verantw = True
Sort_Verantw_3.Value = sort_kriterien_check(Sort_Verantw_3.Value)

End Sub

Private Sub UserForm_Initialize()
Dim r_titel, r_ende As Integer
Dim uhu As String
Dim uhur As Range

With Me
    sp(0) = "LOP Sortieren": sp(1) = "Sort LOP": .Caption = sp(s)
    sp(0) = "Nummer (aufsteigend)": sp(1) = "Numbers (ascending)": .O_Sort_Nummer.Caption = sp(s)
    sp(0) = "Spalten": sp(1) = "Rows": .O_Sort_Spalten.Caption = sp(s)
    sp(0) = "1. Spalte          , 2. Verantwortlich  3. Termin": sp(1) = "1. Row             , 2. Resp. Person 3. agreed date": .O_Sort_Verantw.Caption = sp(s)
    sp(0) = "Abbruch": sp(1) = "ESC": .Command_ESC.Caption = sp(s)
End With

With T_versteck
    Sort_Verantw_3.Value = .Range("F16").Value
    Sort_var_1.Value = .Range("F17").Value
    Sort_var_2.Value = .Range("G17").Value
    Sort_var_3.Value = .Range("H17").Value
    Select Case (.Range("D17").Value)
        Case 1: O_Sort_Nummer.Value = True
        Case 2: O_Sort_Verantw.Value = True
        Case 3: O_Sort_Spalten.Value = True
    End Select
End With
End Sub

Private Function sort_kriterien_check(text As String) As String
text = UCase(text)
text = Left(text, 1)
  If text = "" Then
  ElseIf Asc(text) < 65 Or Asc(text) > 90 Then
     text = ""
  End If
sort_kriterien_check = text
End Function
Attribute VB_Name = "Offener_Punkt"
Attribute VB_Base = "0{84F8476A-2CBF-4BEB-BBE1-E628363305FD}{0BBFD6D4-276D-4130-ADEB-3F86E9A2BF9E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' 08.04.2010: Erg|fffd|nzung Tabellenspalten zus|fffd|tzlich + Alle Punkte in Agenda
' 20.05.2009: Formular f|fffd|r Mailversand und Protokoll einbinden
' 31.03.2009: Sprache und f|fffd|rben des Termins nach Eingabe
' 10.01.2009: Update Office 2007
' 05.12.2008: Verdoppelung der Zeilenumbr|fffd|che auskommentiert
' 17.09.2008: Englisch eingebaut, Sprachceck offen
' 31.07.2008: Keine Datumsvorgabe bei leerer Zelle
' 11.06.2008: Bildschiraktualisierung erg|fffd|nzt, Formular etwas gr|fffd||fffd|er
' 11.06.2008: variable "vorbelegung" eingef|fffd|hrt. bei "OK" wird das vorgeschlagene Datum nicht im Zelltext erg|fffd|nzt
Option Explicit
Dim datedummy As Date, vorbelegung As String, nummer As String

Private Sub c_beteiligt_Click()
    With Me
        If .c_beteiligt.Value = True Then
            .Text_betei.Visible = True
        Else
            .Text_betei.Visible = False
        End If
        T_versteck.Range("I17").Value = .c_beteiligt.Value
    End With
End Sub


Private Sub c_Text_Click()
    With Me
        If .c_Text.Value = True Then
            .Ergaenzung.Visible = True
        Else
            .Ergaenzung.Visible = False
        End If
        T_versteck.Range("I16").Value = .c_Text.Value
    End With
End Sub

Private Sub c_spalten_Click()
    With Me
        If .c_spalten.Value = True Then
            .text_sp1.Visible = True
            .text_sp2.Visible = True
            .text_sp3.Visible = True
            .c_ueberschrift.Visible = True
            Call c_ueberschrift_Click
            T_versteck.Range(MAIL_SP_ERG).Value = True
        Else
            .text_sp1.Visible = False
            .text_sp2.Visible = False
            .text_sp3.Visible = False
            .text_sp1ue.Visible = False
            .text_sp2ue.Visible = False
            .text_sp3ue.Visible = False
            .c_ueberschrift.Visible = False
            T_versteck.Range(MAIL_SP_ERG).Value = False
        End If
    End With
End Sub

Private Sub c_ueberschrift_Click()
    With Me
        If .c_ueberschrift.Value = True Then
            .text_sp1ue.Visible = True
            .text_sp2ue.Visible = True
            .text_sp3ue.Visible = True
            T_versteck.Range(MAIL_SP_UEBER).Value = True
        Else
            .text_sp1ue.Visible = False
            .text_sp2ue.Visible = False
            .text_sp3ue.Visible = False
            T_versteck.Range(MAIL_SP_UEBER).Value = False
        End If
    End With
End Sub

Private Sub Command_alle_Click()
    form_exit = vbYes
    Unload Me
End Sub

Private Sub Command_ESC_Click()
  form_exit = vbCancel
  Unload Me
End Sub

Private Sub Command_OK_Click()
 Dim dummy, wert, bis_alt As String
'xxx 05.09.2008
If op_ablauf = M_NORM Then
    Application.ScreenUpdating = False
           dummy = Ergaenzung
           If (ActiveCell.Value = "") And (dummy <> "") And (dummy <> vorbelegung) Then
               ActiveCell.Value = dummy
           Else
               If (dummy <> "") And (dummy <> vorbelegung) Then
               wert = ActiveCell.Value & Chr(10) & dummy
               ActiveCell.Value = Replace(wert, Chr(13), "")
               End If
           End If
            '31.03.2009
            With Cells(ActiveCell.Row, T_versteck.Range("C8"))
                bis_alt = .Value
                If bis_alt <> Bis Then
                    If IsDate(Bis) Then
                        .Value = CDate(Bis)
                    Else
                        .Value = Bis
                    End If
                End If
                Call LOP_Datumsformat_sicherstellen(Range(.Address))
            End With
    Application.ScreenUpdating = True
ElseIf op_ablauf = M_MAIL_G Or op_ablauf = M_MAIL_M Or op_ablauf = M_PROT_G Or op_ablauf = M_PROT_M Then
    With T_versteck
        .Range("J16").Value = Replace(Ergaenzung, Chr(13), "")
        If IsDate(Me.Bis) Then
            .Range("I18").Value = Me.Bis
        Else
            sp(0) = "alle": sp(1) = "all"
            .Range("I18").Value = sp(s)
        End If
        .Range("I19").Value = Me.text_Dauer
    End With
ElseIf op_ablauf = M_AGEN Then
    Dim lz, v As Integer
    If agenda_einfuegepunkt Is Nothing Then Set agenda_einfuegepunkt = T_Agenda_var.Range("B7")
    lz = LOP_letzte_zeile(T_Agenda_var.Cells(agenda_einfuegepunkt.Row, 2), 0) + 1
    v = T_AGENDA_farbende() + 1
    With T_Agenda_var.Cells(lz + 1, 2)
'        If lz > v Or T_AGENDA_teilnehmer(.Value) Then 'XXXX 02.12.2009
        If T_AGENDA_teilnehmer(.Value) Then
            T_Agenda_var.Rows(v & ":" & v).Insert Shift:=xlDown
            lz = v
        End If
    End With
    With Me
        T_Agenda_var.Cells(lz, 1).Value = nummer
        If .c_Text = True And .Ergaenzung <> "" Then
            T_Agenda_var.Cells(lz, 2).Value = Trim(Replace(.Blickfang.Value & vbLf & .Ergaenzung.Value, Chr(13), ""))
        Else
            T_Agenda_var.Cells(lz, 2).Value = Trim(Replace(.Blickfang.Value, Chr(13), ""))
        End If
        T_Agenda_var.Cells(lz, 3).Value = Replace(.Text_verant, Chr(13), "")
        If .c_beteiligt Then T_Agenda_var.Cells(lz, 4).Value = Replace(.Text_betei, Chr(13), "")
        T_Agenda_var.Cells(lz, 6).Value = Val(.text_Dauer)
        T_versteck.Range("I17").Value = .c_beteiligt.Value
        T_versteck.Range("I16").Value = .c_Text.Value

    End With
End If
    form_exit = vbOK
    Unload Me
End Sub

Private Sub text_Dauer_Change()
Dim i As Integer, tt, z As String
On Error Resume Next
With Me.text_Dauer
    If Len(.text) > 0 And LCase(Left(.text, 3)) <> "all" Then
        For i = 1 To Len(.text)
            z = Mid(.text, i, 1)
            If IsNumeric(z) Then
                tt = tt & z
            Else
                If i = 1 And LCase(z) = "a" Then
                    tt = z
                ElseIf i = 2 Or i = 3 And LCase(z) = "l" Then
                    tt = tt + z
                ElseIf i = 4 And LCase(z) = "e" Then
                    tt = tt + z
                Else
                    Exit For
                End If
            End If
        Next
        If tt <> .text Then .text = tt
    End If
End With
End Sub

Private Sub text_sp1_AfterUpdate()
    Dim t As String
    t = text_sp1
    If UCase(t) <> t Then text_sp1 = UCase(t)
    If Len(t) > 0 And Z_spalte(t) = 0 Then text_sp1 = ""
    T_versteck.Range(MAIL_SP_ERG1) = text_sp1
    text_sp1ue = Z_Spalten_ueberschrift(MAIL_SP_ERG1)
End Sub

Private Sub text_sp2_AfterUpdate()
    Dim t As String
    t = text_sp2
    If UCase(t) <> t Then text_sp2 = UCase(t)
    If Len(t) > 0 And Z_spalte(t) = 0 Then text_sp2 = ""
    T_versteck.Range(MAIL_SP_ERG2) = text_sp2
    text_sp2ue = Z_Spalten_ueberschrift(MAIL_SP_ERG2)
End Sub

Private Sub text_sp3_AfterUpdate()
    Dim t As String
    t = text_sp3
    If UCase(t) <> t Then text_sp3 = UCase(t)
    If Len(t) > 0 And Z_spalte(t) = 0 Then text_sp3 = ""
    T_versteck.Range(MAIL_SP_ERG3) = text_sp3
    text_sp3ue = Z_Spalten_ueberschrift(MAIL_SP_ERG3)
End Sub

Private Sub UserForm_Initialize()
Dim ii, i, f, Schlagwort, rot As Integer
Dim zellwert As String
On Error Resume Next
form_exit = vbCancel

With Me
    sp(0) = "Abbruch": sp(1) = "ESC": .Command_ESC.Caption = sp(s)
    sp(0) = "Neue Zeile = <shift><enter> =": sp(1) = "New Line  =  <shift><enter> =": .Label1.Caption = sp(s)
    .c_beteiligt.Visible = False
    .Label_bet.Visible = False
    .Label_ver.Visible = False
    .Text_betei.Visible = False
    .Text_verant.Visible = False
    .c_Text.Visible = False
    .Label_dauer.Visible = False
    .text_Dauer.Visible = False
    .Label_erg.Visible = False
    .Label_ueber.Visible = False
    .Command_alle.Visible = False
    If T_versteck.Range(MAIL_SP_UEBER).Value = "" Then T_versteck.Range(MAIL_SP_UEBER).Value = True
    .c_ueberschrift = T_versteck.Range(MAIL_SP_UEBER).Value
    If T_versteck.Range(MAIL_SP_ERG).Value = "" Then T_versteck.Range(MAIL_SP_ERG).Value = True
    .c_spalten = T_versteck.Range(MAIL_SP_ERG).Value
    .text_sp1 = T_versteck.Range(MAIL_SP_ERG1)
    .text_sp2 = T_versteck.Range(MAIL_SP_ERG2)
    .text_sp3 = T_versteck.Range(MAIL_SP_ERG3)
    .text_sp1ue = Z_Spalten_ueberschrift(MAIL_SP_ERG1)
    .text_sp2ue = Z_Spalten_ueberschrift(MAIL_SP_ERG2)
    .text_sp3ue = Z_Spalten_ueberschrift(MAIL_SP_ERG3)
    Call c_spalten_Click
    If s = 1 Then
        .c_spalten.Caption = "carry over"
        .c_ueberschrift.Caption = "include title"
        .F_Spalten.Caption = "Additional columns"
    End If
End With

If op_ablauf = M_NORM Then
    Me.F_Spalten.Visible = False
    With Me
        sp(0) = "Offener Punkt": sp(1) = "Open item": .Caption = sp(s)
    End With
    Const DELTA = 30
    With Me.Text_bisher
'        .Enabled = True
'        .Locked = False
'        .BackColor = &H80000005
        .Height = 213 + DELTA
    End With
    With Me.Ergaenzung
        .Top = 264 + DELTA
        .Height = 115 + -DELTA
    End With
    
    rot = 3
    zellwert = ActiveCell.Value
    ii = Len(zellwert)
    datedummy = DateValue(Now)
    If ii > 0 Then
        vorbelegung = Replace(datedummy & ": ", ".20", ".")
        Ergaenzung = vorbelegung
    Else
        vorbelegung = ""
        Ergaenzung = ""
    End If
    For i = 1 To ii
        If (Mid(zellwert, i, 1) = Chr$(10) Or i = ii) And Schlagwort <> rot Then
            Blickfang = Left(zellwert, i - 1)
            Text_bisher = Mid(zellwert, i + 1, ii - i)
            Exit For
        End If
    Next
    Bis = Cells(ActiveCell.Row, T_versteck.Range("C8")).Value
    
ElseIf op_ablauf = M_MAIL_G Or op_ablauf = M_MAIL_M Or op_ablauf = M_PROT_G Or op_ablauf = M_PROT_M Then
    With Me
        .Height = 318
        sp(0) = "|fffd|bernehmen:" & vbLf & "- neuere Punkte und" & vbLf & "- Punkte mit Erg|fffd|nzungen seit"
        sp(1) = "Carry over:" & vbLf & "- newer open items und" & vbLf & "- items with additions from"
         .Label_ueber.Caption = sp(s)
        sp(0) = "mind. x Erg|fffd|nzungen |fffd|bernehmen": sp(1) = "carry over min. x additions": .Label_erg.Caption = sp(s)
        
        .Label_erg.Visible = True
        .Label_ueber.Visible = True
        With .Bis
            .Top = 80
            .Left = 500
            .text = T_versteck.Range("I18").Value
        End With
        With .text_Dauer
            .Top = 160
            .Visible = True
            .Left = 500
            .text = T_versteck.Range("I19").Value
            .MaxLength = 4
        End With
        .F_Spalten.Top = 200
        .Text_bisher.Visible = False
        With .Ergaenzung
            .Top = 42
            .Height = 225
            .Width = 450
        End With
        .Command_OK.Top = 274
        .Command_ESC.Top = 274
        .Label1.Top = 276
        .Label2.Top = 270
        .Blickfang.BackColor = &H8000000A
        .Blickfang.SpecialEffect = fmSpecialEffectFlat
        Ergaenzung = T_versteck.Range("J16").Value
        
        If op_ablauf = M_MAIL_G Then
            ii = 0
            For i = 0 To ANZAHL_NAMEN
                If liste(i) <> "" Then ii = ii + 1
            Next
            sp(0) = "Mail versenden je Name": sp(1) = "Send email per name": .Caption = sp(s)
            sp(0) = "Geben Sie den Vorspann f|fffd|r die " & ii & " E-Mails ein!!"
            sp(1) = "Enter intoductory text for the " & ii & " emails"
            .Blickfang = sp(s)
        
        ElseIf op_ablauf = M_MAIL_M Then
            sp(0) = "|fffd|bernehmen:" & vbLf & "- alle markierten Punkte" & vbLf & "- Erg|fffd|nzungen seit"
            sp(1) = "Carry over:" & vbLf & "- all items selected" & vbLf & "- additions from"
             .Label_ueber.Caption = sp(s)
            sp(0) = "Mail versenden markierte Offene Punkte": sp(1) = "Send email selected items": .Caption = sp(s)
            sp(0) = "Geben Sie den Vorspann f|fffd|r die E-Mail ein!!"
            sp(1) = "Enter intoductory text for email"
            .Blickfang = sp(s)
       
        ElseIf op_ablauf = M_PROT_G Then
            .Ergaenzung.Visible = False
             sp(0) = "alle offenen Punkte nach WORD |fffd|bertragen": sp(1) = "transfer all open items to MS WORD": .Caption = sp(s)
            .Blickfang.text = sp(s)
        
        ElseIf op_ablauf = M_PROT_M Then
            sp(0) = "|fffd|bernehmen:" & vbLf & "- alle markierten Punkte" & vbLf & "- Erg|fffd|nzungen seit"
            sp(1) = "Carry over:" & vbLf & "- all items selected" & vbLf & "- additions from"
             .Label_ueber.Caption = sp(s)
            .Ergaenzung.Visible = False
             sp(0) = "Markierte offenen Punkte nach Word verschieben": sp(1) = "Send selected items to MS WORD": .Caption = sp(s)
            .Blickfang.text = sp(s)
        End If
    End With

ElseIf op_ablauf = M_AGEN Then
    With Me
        sp(0) = "Punkt in Agenda |fffd|bernehmen": sp(1) = "Carry over item to aganda": .Caption = sp(s)
        sp(0) = "zus|fffd|tzliche Teilnehmer:": sp(1) = "Additional persons": .Label_bet.Caption = sp(s)
        sp(0) = "Vortragender:": sp(1) = "Speaker": .Label_ver.Caption = sp(s)
        sp(0) = "Dauer (min):": sp(1) = "Duration (min):": .Label_dauer.Caption = sp(s)
        sp(0) = "Erg|fffd|nzungstext |fffd|bernehmen": sp(1) = "Transfer additional text": .c_Text.Caption = sp(s)
        sp(0) = "|fffd|bernehmen:": sp(1) = "carry over:": .c_beteiligt.Caption = sp(s)
        
        .c_beteiligt.Visible = True
        .c_beteiligt.Value = T_versteck.Range("I17").Value
        .Label_bet.Visible = True
        If .c_beteiligt.Value = True Then .Text_betei.Visible = True
        .Label_ver.Visible = True
        .Text_verant.Visible = True
        .Bis.Visible = False
        .Text_bisher.Visible = False
        .c_Text.Visible = True
        .c_Text.Value = T_versteck.Range("I16").Value
        .Label_dauer.Visible = True
        .text_Dauer.Visible = True
        If .c_Text.Value = False Then .Ergaenzung.Visible = False
        .Ergaenzung.Top = 55
        .Ergaenzung.Height = 225
        .Command_alle.Visible = True
        sp(0) = "alle |fffd|bernehmen"
        sp(1) = "transfer all"
        .Command_alle.Caption = sp(s)
        sp(0) = "Alle markierten OP in die Agenda ohne Nachfragen |fffd|bertragen"
        sp(1) = "transfer all marked OP to agenda"
        .Command_alle.ControlTipText = sp(s)
        sp(0) = "Nur einen Offenen Punkt in die Agenda |fffd|bertragen"
        sp(1) = "transfer ONE marked OP to agenda"
        .Command_OK.ControlTipText = sp(s)
        With .Blickfang
            .Width = 654
            .Locked = False
            .Enabled = True
            .BackColor = &H80000005
        End With
        'Inhalte einlesen:
            Dim titel As String, zeilenende As Integer
            If T_versteck.Range("C2").Value Then nummer = T_LOP.Cells(ActiveCell.Row, T_versteck.Range("C2").Value)
            titel = T_LOP.Cells(ActiveCell.Row, T_versteck.Range("C4").Value)
            zeilenende = InStr(1, titel, vbLf, vbTextCompare)
            If zeilenende > 0 Then
                .Blickfang = Left(titel, zeilenende - 1)
                .Ergaenzung = Mid(titel, zeilenende + 1) & namen_mail_ergaenzungstext(ActiveCell.Row)
            Else
                .Blickfang = titel
                .Ergaenzung = namen_mail_ergaenzungstext(ActiveCell.Row)
            End If
            .Text_verant = T_LOP.Cells(ActiveCell.Row, T_versteck.Range("C6").Value)
            If T_versteck.Range("C7").Value > 0 Then .Text_betei = T_LOP.Cells(ActiveCell.Row, T_versteck.Range("C7").Value)
            ' zeitdauer
            If T_versteck.Range("C9").Value > 0 Then .text_Dauer = Val(T_LOP.Cells(ActiveCell.Row, T_versteck.Range("C9").Value))
            If .text_Dauer = "" Or Val(.text_Dauer) = 0 Then .text_Dauer = 10
    End With
End If
End Sub

Attribute VB_Name = "T_Agenda"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 02.09.2008 Erstellung
Private Sub Worksheet_Activate()
On Error Resume Next
T_AGENDA_Worksheet_Activate False
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
T_AGENDA_Worksheet_BeforeRightClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
On Error Resume Next
T_AGENDA_Worksheet_Change Target
End Sub

Private Sub Worksheet_Deactivate()
On Error Resume Next
T_AGENDA_Worksheet_Deactivate False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error Resume Next
T_AGENDA_Worksheet_SelectionChange Target
End Sub
Attribute VB_Name = "T_Feedback"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 16.09.2008 Erstellung
Private Sub Worksheet_Activate()
On Error Resume Next
erg = Application.Run("T_FEED_Activate", True)
End Sub

Private Sub Worksheet_Deactivate()
On Error Resume Next
erg = Application.Run("T_FEED_Deactivate", True)
End Sub

Attribute VB_Name = "T_LOP"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 08.01.2009: Einf|fffd|gen Worksheet_SelectionChange
' 10.06.2008 LOP_Makro_Update_Modul_neu_einlesen: Passwort rausgenommen
' 10.04.2008 Start

Option Explicit

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
T_LOP_Worksheet_BeforeDoubleClick Target, Cancel

End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
T_LOP_Worksheet_BeforeRightClick Target, Cancel
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
On Error Resume Next
T_LOP_Worksheet_Change Target
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error Resume Next
T_LOP_Worksheet_SelectionChange Target

End Sub

Private Sub Zur|fffd|cksetzen_Click()
On Error Resume Next
LOP_ruecksetzen
End Sub

Private Sub Ende_Click()
Dim uhu As Boolean
On Error Resume Next
T_LOP_Ende_Click uhu
End Sub

Private Sub Punkt_erledigt_Click()
On Error Resume Next
LOP_Verschieben_erledigter_Punkte
End Sub
Private Sub Sortieren_Click()
Dim uhu As Boolean
On Error Resume Next
T_LOP_Sortieren_Click uhu
End Sub

Private Sub Bis_heute_Click()
On Error Resume Next
T_LOP_Filtern_Click True
End Sub

Private Sub unterpunkt_Click()
Dim uhu As Boolean
On Error Resume Next
 T_LOP_Unterpunkt_click uhu

End Sub

Sub LOP_Makro_Update_Modul_neu_einlesen()
Dim pfad, elementname, datei As String
On Error Resume Next
elementname = "Update_Code"
pfad = T_versteck.Range("B20").Value
datei = pfad & "\" & elementname & ".bas"
If Dir(datei) <> "" Then
    With ThisWorkbook.VBProject
            .vbcomponents.Remove .vbcomponents(elementname)
            .vbcomponents.Remove .vbcomponents(elementname & "1")
            Application.Wait (Now + TimeValue("0:00:05"))
            .vbcomponents.Import datei
    End With
End If
End Sub

Attribute VB_Name = "T_LOP_erledigt"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 08.01.2009: Einf|fffd|gen Worksheet_SelectionChange
' 02.09.2008: Einf|fffd|gen Worksheet activate (|fffd|bertrag Spaltenbreiten)
' 10.04.2008 Start

Option Explicit
Private Sub Punkt_aktivieren_Click()
On Error Resume Next
Dim uhu As Boolean
T_LOP_erledigt_Punkt_aktivieren uhu
End Sub

Private Sub Worksheet_Activate()
On Error Resume Next
T_LOP_erledigt_Worksheet_Activate True

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
On Error Resume Next
T_LOP_erledigt_Worksheet_Change Target
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
 T_LOP_erledigt_Worksheet_BeforeDoubleClick Target, Cancel
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error Resume Next
T_LOP_erledigt_Worksheet_BeforeRightClick Target, Cancel
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error Resume Next
T_LOP_erledigt_Worksheet_SelectionChange Target

End Sub
Attribute VB_Name = "T_Teilnehmer"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 01.06.2008
Attribute VB_Name = "T_versteck"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' 10.04.2008 Start
Option Explicit
Private Sub CommandButton1_Click()
On Error Resume Next
 LOP_ueberschriften_ermitteln
End Sub

Private Sub Update_Programm_Click()
LOP_Z_Makro_alle_Update
End Sub

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Update_Code"
' 10.01.2009: Update Office 2007
' 08.01.2009: Update
' 31.10.2008: Neue Zusammenstellung wg Auslagerung in LOP_Update
Option Explicit

Const M_SOR = "LOP_Sortieren", M_SOR_erw = "frm", Z_SOR = "B21"
Const M_FOP = "Offener_Punkt", M_FOP_erw = "frm", Z_FOP = "B22"
Const M_KAL = "LOP_Kalender", M_KAL_erw = "frm", Z_KAL = "B23"
Const M_LOP = "LOP_Modul", M_LOP_erw = "bas", Z_LOP = "B24"
Const M_FIL = "LOP_Filter", M_FIL_erw = "frm", Z_FIL = "B25"
Const M_UPD = "Update_Code", M_UPD_erw = "bas", Z_UPD = "B26"
Const M_NAM = "LOP_Namensauswahl", M_NAM_erw = "frm", Z_NAM = "B27"

Dim ausgabe, fehler As String, Update_durchgefuehrt, war_freigegeben_u As Boolean
Dim updaten, up_version_neu, man_up_version_neu As Integer
Dim s As Integer, sp(1), sp1(1), sp2(1), sp3(1), sp4(1) As String  'Variablen f|fffd|r Sprache
Public Const UPD_Datei = "LOP_Update.xls"

Sub UPD_version_uebertrag(ByVal auto As Integer, ByVal manuell As Integer)
    up_version_neu = auto
    man_up_version_neu = manuell
End Sub

Function UPD_merker(Optional ByVal upda As Integer) As Integer
If upda = 0 Then
    UPD_merker = updaten
Else
    updaten = upda
    UPD_merker = upda
End If
End Function

Function UPD_war_freigegeben() As Boolean
' hier holt sich das LOP_Modul den Variablenwert
UPD_war_freigegeben = war_freigegeben_u
End Function

Sub LOP_Z_MAKRO_Update_WorkbookOpen()
Dim zwisch As Integer

If updates_vorhanden Then
    updaten = vbYes
    Call UPD_info_freigegeben(23)
    Call UPD_Makros_oeffnen
Else
    updaten = vbNo
End If

s = T_versteck.Range("I13").Value ' Sprache holen

If Not ThisWorkbook.MultiUserEditing Then
    If Not Alle_Module_vorhanden Then
        Call UPD_info_freigegeben(24)
        Call UPD_Makros_oeffnen
        If updaten <> vbCancel And updaten <> vbNo Then Call LOP_Z_Makro_auto_Update
    End If
End If
End Sub
Sub pfad_falsch()
Dim erg As Integer
        sp1(0) = "Der Updatepfad: " & T_versteck.Range("B20").Value & vbLf & "Wurde nicht gefunden"
        sp1(1) = "E: Der Updatepfad: " & T_versteck.Range("B20").Value & vbLf & "Wurde nicht gefunden"
        sp2(0) = "Fehlende Makros"
        sp2(1) = "Macrocode missing"
        erg = MsgBox(sp1(s), vbOKOnly, sp2(s))
End Sub

Private Function updates_vorhanden() As Boolean
Dim t As String
    If updates_vorhanden_execute(M_LOP, M_LOP_erw, Z_LOP) Then updates_vorhanden = True: t = M_LOP & vbLf
    If updates_vorhanden_execute(M_SOR, M_SOR_erw, Z_SOR) Then updates_vorhanden = True: t = t & M_SOR & vbLf
    If updates_vorhanden_execute(M_FOP, M_FOP_erw, Z_FOP) Then updates_vorhanden = True: t = t & M_FOP & vbLf
    If updates_vorhanden_execute(M_KAL, M_KAL_erw, Z_KAL) Then updates_vorhanden = True: t = t & M_KAL & vbLf
    If updates_vorhanden_execute(M_FIL, M_FIL_erw, Z_FIL) Then updates_vorhanden = True: t = t & M_FIL & vbLf
    If updates_vorhanden_execute(M_NAM, M_NAM_erw, Z_NAM) Then updates_vorhanden = True: t = t & M_NAM & vbLf
    If updates_vorhanden_execute(M_UPD, M_UPD_erw, Z_UPD) Then updates_vorhanden = True: t = t & M_UPD & vbLf
End Function

Private Function updates_vorhanden_execute(elementname As String, erweiterung As String, zelle As String) As Boolean
Dim datei, pfad As String, fso As Variant, geaendert As Date

Set fso = CreateObject("Scripting.filesystemobject")
pfad = pfad_saeubern(T_versteck.Range("B20").Value)
datei = pfad & "\" & elementname & "." & erweiterung

If Dir(datei) <> "" Then
    geaendert = fso.getfolder(pfad).Files(elementname & "." & erweiterung).datelastmodified
    If Not IsEmpty(geaendert) And geaendert > CDate(T_versteck.Range(zelle).Value) Then
        updates_vorhanden_execute = True
    End If
End If
End Function

Sub LOP_Z_Makro_auto_Update()
Dim erg As Integer
On Error Resume Next
T_versteck.Range("G25").Value = 0
s = T_versteck.Range("I13").Value ' Sprache holen
If ThisWorkbook.MultiUserEditing = True And updaten <> vbCancel And updaten <> vbNo Then
        Call UPD_info_freigegeben(21)
Else
    If updaten = 0 Then
        If updates_vorhanden Then updaten = vbYes
    End If
                sp1(0) = "Es gibt ein Update f|fffd|r die LOP" & vbLf & "Soll es ausgef|fffd|hrt werden ?"
                sp1(1) = "E: Es gibt ein Update f|fffd|r die LOP" & vbLf & "Soll es ausgef|fffd|hrt werden ?"
                sp2(0) = "Auto Update"
                sp2(1) = "E: Auto Update"
    If updaten = vbYes Then updaten = MsgBox(sp1(s), vbOKCancel, sp2(s))
    If updaten <> vbCancel And updaten <> vbNo Then Call UPD_Makros_oeffnen
    If updaten <> vbCancel And updaten <> vbNo Then
        If ThisWorkbook.MultiUserEditing = False And ThisWorkbook.VBProject.Protection = 0 Then
                erg = Run(UPD_Datei & "!Makro_auto_Update", ThisWorkbook.name)
        End If
    End If
End If
End Sub

Sub LOP_Z_Makro_alle_Update()
Dim erg As Integer
If ThisWorkbook.MultiUserEditing = True Then
        Call UPD_info_freigegeben(22)
Else
    erg = Run(UPD_Datei & "!Makro_alle_Update", ThisWorkbook.name)
End If
End Sub

Private Function Alle_Module_vorhanden() As Boolean
Dim alle_vorh As Boolean
alle_vorh = True
If Not Alle_Module_Vorhanden_execute(M_LOP, Z_LOP) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_SOR, Z_SOR) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_FOP, Z_FOP) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_KAL, Z_KAL) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_FIL, Z_FIL) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_NAM, Z_NAM) Then alle_vorh = False
If Not Alle_Module_Vorhanden_execute(M_UPD, Z_UPD) Then alle_vorh = False
Alle_Module_vorhanden = alle_vorh
End Function

Private Function Alle_Module_Vorhanden_execute(elementname As String, Optional zelle As String) As Boolean
Dim i, anz As Integer, vorhanden As Boolean, kompo As String
Dim x0, x1, x2 As Boolean, x As String
On Error Resume Next
vorhanden = False
With ThisWorkbook.VBProject
For i = 0 To 3
    x0 = False: x1 = False: x2 = False
        x = "": x = .vbcomponents(elementname).name
    If x <> "" Then x0 = True
        x = "": x = .vbcomponents(elementname & "1").name
    If x <> "" Then x1 = True
        x = "": x = .vbcomponents(elementname & "2").name
    If x <> "" Then x2 = True
    If i = 3 Then Exit For
    If Not x1 And x2 Then .vbcomponents(elementname & "2").name = elementname & "1"
    If Not x0 And x1 Then .vbcomponents(elementname & "1").name = elementname
    If x1 And x2 Then .vbcomponents.Remove .vbcomponents(elementname & "1")
    If x0 And x2 Then .vbcomponents.Remove .vbcomponents(elementname)
    If x0 And x1 Then .vbcomponents.Remove .vbcomponents(elementname)
Next
    If x0 Or x1 Or x2 Then vorhanden = True
End With
If Not vorhanden And zelle <> "" Then T_versteck.Range(zelle).Value = 0
Alle_Module_Vorhanden_execute = vorhanden
End Function

Private Sub LOP_UPD_Code_man_vor()
Dim man_up_version, erg As Integer, t As String
man_up_version = Val(T_versteck.Range("G24").Value)
If man_up_version_neu > man_up_version And (updaten <> vbCancel) Then 'Definition NEU bei Constantendd
        sp1(0) = "Bitte manuell Update durchf|fffd|hren" & vbLf & _
                 "Hierzu hier OK Dr|fffd|cken und dann speichern, dann" & vbLf & _
                 """<shift><Strg>Y"" gleichzeitig dr|fffd|cken, bzw. " & vbLf & vbLf & "Makro ""LOP_UPD_Code_man"" ausf|fffd|hren"
        sp1(1) = "Bitte manuell Update durchf|fffd|hren" & vbLf & _
                 "Hierzu hier OK Dr|fffd|cken und dann speichern, dann" & vbLf & _
                 """<shift><Strg>Y"" gleichzeitig dr|fffd|cken, bzw. " & vbLf & vbLf & "Makro ""LOP_UPD_Code_man"" ausf|fffd|hren"
        sp2(0) = "Manuelles Update"
        sp2(1) = "Manuelles Update"
    erg = MsgBox(sp1(s), 48, sp2(s))
End If
End Sub

Public Sub LOP_UPD_Code_man()
Attribute LOP_UPD_Code_man.VB_Description = "Y"
Attribute LOP_UPD_Code_man.VB_ProcData.VB_Invoke_Func = "Y\n14"
Dim erg, man_up_version As Integer
On Error Resume Next
man_up_version = Val(T_versteck.Range("G24").Value)
If man_up_version_neu > man_up_version Then 'Definition NEU bei Constanten
    Call UPD_Makros_oeffnen
    If updaten <> vbCancel Then erg = Run(UPD_Datei & "!UPD_Code_man", ThisWorkbook.name, man_up_version_neu)
End If
End Sub

Private Sub LOP_UPD_Code()
Dim erg, up_version As Integer
On Error Resume Next
up_version = Val(T_versteck.Range("G23").Value)
If up_version_neu > up_version Then 'Definition NEU bei Constanten
            sp1(0) = "Wollen Sie das Update durchf|fffd|hren" & vbLf & "UPD_Code"
            sp1(1) = "Wollen Sie das Update durchf|fffd|hren" & vbLf & "UPD_Code"
            sp2(0) = "Update Start"
            sp2(1) = "Update Start"
    If updaten <> vbCancel Then updaten = MsgBox(sp1(s), vbOKCancel, sp2(s))
    If updaten <> vbCancel Then Call UPD_Makros_oeffnen
    If updaten <> vbCancel Then erg = Run(UPD_Datei & "!UPD_Code", ThisWorkbook.name, up_version_neu)
End If
End Sub

Sub UPD_Makros_oeffnen()
    Dim Pfad_dateiname As String, w, act_wb As Workbook, istda As Boolean
    Set act_wb = ActiveWorkbook
    istda = False
    For Each w In Workbooks
        If w.name = UPD_Datei Then istda = True: Exit For
    Next w
    If Not istda Then
        Pfad_dateiname = pfad_saeubern(T_versteck.Range("B20").Value) & "\" & UPD_Datei
        If Dir(Pfad_dateiname) <> "" Then
            Workbooks.Open Filename:=Pfad_dateiname, ReadOnly:=True, UpdateLinks:=xlUpdateLinksNever
            act_wb.Activate
        Else
            updaten = vbCancel
        End If
    End If
End Sub

Function pfad_saeubern(pfad As String) As String
If Left(pfad, 5) = "file:" Then pfad = Right(pfad, Len(pfad) - 5)
If Right(pfad, 1) = "\" Then pfad = Left(pfad, Len(pfad) - 1)
pfad_saeubern = UCase(pfad)
End Function

Sub T_AGENDA_UPD()
Dim erg As Integer
    Call UPD_Makros_oeffnen
    If updaten <> vbCancel Then erg = Run(UPD_Datei & "!T_AGENDA_Update", ThisWorkbook.name)
End Sub

Sub T_FEED_UPD()
Dim erg As Integer
    Call UPD_Makros_oeffnen
    If updaten <> vbCancel Then erg = Run(UPD_Datei & "!T_FEED_Update", ThisWorkbook.name)
End Sub


Private Sub UPD_info_freigegeben(Optional ByVal nr As Integer)
Dim erg As Integer
If ThisWorkbook.MultiUserEditing Then
    erg = Run("UPD_merker", vbCancel)
            sp1(0) = "Die LOP ist f|fffd|r gleichzeitige Bearbeitung durch mehrere Benutzer" & vbLf & """FREIGEGEBEN"", dies verhindert automatische Updates" & vbLf & vbLf & _
                    "- Heben sie die Freigabe auf und schlie|fffd|en Sie die Datei." & vbLf & _
                    "- Nach dem |fffd|ffnen und bei mehrmaligem Speichern wird das Update durchgef|fffd|hrt" & vbLf & _
                    "- dannach kann die Datei wieder FREIGEGEBEN werden ??" & vbLf & vbLf & _
                    "Wollen Sie die FREIGABE aufheben ? " & nr
            sp1(1) = "Die LOP ist f|fffd|r gleichzeitige Bearbeitung durch mehrere Benutzer" & vbLf & """FREIGEGEBEN"", dies verhindert automatische Updates" & vbLf & vbLf & _
                    "- Heben sie die Freigabe auf und schlie|fffd|en Sie die Datei." & vbLf & _
                    "- Nach dem |fffd|ffnen und bei mehrmaligem Speichern wird das Update durchgef|fffd|hrt" & vbLf & _
                    "- dannach kann die Datei wieder FREIGEGEBEN werden ??" & vbLf & vbLf & _
                    "Wollen Sie die FREIGABE aufheben ? " & nr
            sp2(0) = "  ""FREIGABE"" verhindert Update"
            sp2(1) = "  ""FREIGABE"" verhindert Update"
    erg = MsgBox(sp1(s), vbYesNo, sp2(s))
    If erg = vbYes Then Application.Dialogs(xlDialogFileSharing).Show
End If
End Sub





' InQuest injected base64 decoded content
' )^J)
' +y+Z

INQUEST-PP=macro
