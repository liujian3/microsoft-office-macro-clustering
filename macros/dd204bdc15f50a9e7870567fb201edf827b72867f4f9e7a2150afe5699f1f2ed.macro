Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
        Application.ScreenUpdating = False
        Worksheets("Goodbye").Visible = False
        Application.StatusBar = " |fffd||fffd||fffd| starting MetaLib-Tools ... |fffd||fffd||fffd| "
        Worksheets("Welcome").Visible = True
        Worksheets("Welcome").Activate
    Application.ScreenUpdating = True
        Welcome.Caption = "Welcome..."
        Welcome.Show                                                'show the splash screen
        Application.StatusBar = False
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Application.ScreenUpdating = False
        Worksheets("Welcome").Visible = False
        Worksheets("Goodbye").Visible = True
        Worksheets("Goodbye").Activate
    Application.ScreenUpdating = True
        Welcome.Caption = "Goodbye..."
        Welcome.Show
End Sub
Attribute VB_Name = "Intro"
Public awn As String

Sub Unsplash()
Application.ScreenUpdating = False
    awn = ThisWorkbook.Name
    
    Unload Welcome                               'Stop showing splash screen
    Windows(awn).Visible = True                  'unhide the workbook window
    If ActiveSheet.Name = "Welcome" Then
        Worksheets("Welcome").Visible = True
        Worksheets("Welcome").Select
        ActiveWindow.SelectedSheets.Visible = False
        Worksheets("Readme").Activate
    End If
    
    If ActiveSheet.Name = "Goodbye" Then
        Worksheets("Welcome").Visible = False
        Worksheets("Goodbye").Visible = True
        Worksheets("Goodbye").Select
    End If
Application.ScreenUpdating = True
End Sub

Sub EyesMsg()
    MsgBox "Keep your eyes open in the markets!", , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub

Attribute VB_Name = "MetaLibTool"
Public metalib As New MLReader
Public metaprog As New MLProgressBar

Sub MetaLib_Convert()
 Dim cc As Integer
 Dim aca As String
 Dim MyRa As String
 Dim MLPeriod As Integer

 Dim TimeStart As Date, TimeEnd As Date, TotalTime As Date
 
 Dim ssc1 As Integer, ssc2 As Integer
 
 aca = ActiveCell.Address

TryAgain:
 MLPeriod = Range("Days")
On Error GoTo ErrorHandler_Escape
    Dim MyRange
    Set MyRange = Application.InputBox("Where to put the data?" & Chr(13) & "Select a range of cells from the worksheet.", "Range Selection", Range("G20").Address, Type:=8)
On Error GoTo 0

        If MyRange.Address = False Or MyRange.Address = "" Then Exit Sub
        If MyRange.Areas.Count > 1 Or MyRange.Columns.Count > 1 Or MyRange.Rows.Count > 1 Then
            MsgBox "Please select a single Cell." & Chr(13) & "Take care that enough space is below the select area. Non-empty cells will not be overwritten.", vbOKOnly + vbCritical, "Error:"
            Exit Sub
        End If

Range(Range(MyRange.Address), Range(MyRange.Address).Offset(MLPeriod, 4)).Select

    Selection.NumberFormat = "#,##0.0"          ' Format numbers/date
Range(Range(MyRange.Address), Range(MyRange.Address).Offset(MLPeriod, 0)).Select ' Select Date Col only
    Selection.NumberFormat = "d-mmm-yy"
Range(Range(MyRange.Address), Range(MyRange.Address).Offset(MLPeriod, 4)).Select ' MLPeriod: include Header (Date, High, Low, Close);    4: Date, Open, High, Low, Close

On Error Resume Next
If Selection.SpecialCells(xlBlanks).Count < Selection.Cells.Count Then
        MyMsg = MsgBox("The cells in the selected range are containing data." & Chr(13) & "If you want to overwrite non-empty cells, click the" & Chr(13) & "'Retry' button, else 'Cancel' to select a different " & Chr(13) & "range.", vbRetryCancel + vbCritical, "Warning:")
    If MyMsg = vbCancel Then GoTo TryAgain
    If MyMsg = vbRetry Then
        Range(Range("G20:K20"), Range("G20:K20").End(xlDown)).Select        ' Clear data if 'Retry'
        Selection.ClearContents
        Range("G20").Select
        DoEvents
    End If
End If
    
    TimeStart = Timer                   ' keep StartTime
    Do While Timer < TimeStart
        DoEvents                        ' process
    Loop

Application.StatusBar = " |fffd||fffd||fffd| retrieving Data...  |fffd||fffd||fffd|"

On Error GoTo errorhandler
 
 ' metalib.OpenSecurityBySymbol Range("Path"), Range("Ticker")
 metalib.OpenDirectory Range("Path")
 metalib.OpenSecurityBySymbol Range("Ticker")
 
 On Error GoTo errorhandler
 
 metalib.SeekToEnd                      ' Zuerst ans Dateiende springen...
 metalib.Seek (-MLPeriod)               ' ... dann die Anzahl der Tage (mit Minuszeichen, da man ja zur|fffd|ckh|fffd|pft

cc = 0
MyRa = MyRange.Address
acr = ActiveCell.Row
    
    Range(MyRa).Offset(cc, 0) = "Date"
    Range(MyRa).Offset(cc, 1) = "Open"
    Range(MyRa).Offset(cc, 2) = "High"
    Range(MyRa).Offset(cc, 3) = "Low"
    Range(MyRa).Offset(cc, 4) = "Close"

 ' Do While (metalib.s_records_left > 0)
 Do While (metalib.iSeRecordsLeft > 0)
    metalib.ReadDay
    Application.StatusBar = " |fffd||fffd||fffd| retrieving Data...  |fffd||fffd||fffd| " & Format(1 - metalib.iSeRecordsLeft / MLPeriod, "0.0%")
        Range(MyRa).Offset(cc + 1, 0) = DateSerial(Left(metalib.iSeDate, 4), Mid(metalib.iSeDate, 5, 2), Right(metalib.iSeDate, 2))

        If metalib.dSeOpen <> 0 Then Range(MyRa).Offset(cc + 1, 1) = metalib.dSeOpen
        Range(MyRa).Offset(cc + 1, 2) = metalib.dSeHigh
        Range(MyRa).Offset(cc + 1, 3) = metalib.dSeLow
        Range(MyRa).Offset(cc + 1, 4) = metalib.dSeClose
    
    cc = cc + 1
 Loop
 metalib.CloseSecurity                       ' don't forget to close the file!
    
    TimeEnd = Timer                         ' keep EndTime
    TotalTime = TimeEnd - TimeStart         ' calc TotalTime

On Error Resume Next
Range(Range(MyRange.Address), Range(MyRange.Address).Offset(MLPeriod, 4)).Select

ssc1 = Selection.SpecialCells(xlBlanks).Count
ssc2 = Selection.Cells.Count
    
    MsgBox Format(ssc2 - ssc1 - 5, "#,##0") & " datapoints converted. " & Chr(13) & "Elapsed Time: " & Format(TotalTime, "0.00") & " seconds.", vbOKOnly + vbInformation, "Conversion-Info:"     ' -5: Date, Open, High, Low, Close

Application.StatusBar = False
Exit Sub

errorhandler:                               ' ErrorHandler
    MyErrNr = Err.Number                    ' detect ErrorNr
    If MyErrNr = 1602 Then MsgBox "Symbol " & Range("Ticker") & " not found." & Chr(13) & "Please provide a valid Symbol.", vbOKOnly + vbInformation, "MetaLib-Info:"
    If MyErrNr = 1609 Or MyErrNr = 76 Then MsgBox "Path " & Range("Path") & " not found." & Chr(13) & "Please provide a valid Path.", vbOKOnly + vbInformation, "MetaLib-Info:"
    Exit Sub
On Error GoTo 0
ErrorHandler_Escape:

End Sub


Function ABC_LastClose(MLPath As String, MLTicker As String)
Attribute ABC_LastClose.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Last Available Closing Price of MLPeriod."
                                            ' Last Available Closing Price of MLPeriod
Dim MLPeriod As Integer

MLPeriod = 2

 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)

 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        ABC_LastClose = metalib.dSeClose
 Loop
 metalib.CloseSecurity                       'Don't forget to close the file!
 
 ABC_LastClose = Format(ABC_LastClose, "#,##0.00")

End Function

Function ABC_LastDate(MLPath As String, MLTicker As String)
Attribute ABC_LastDate.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Date of the Last Available Closing Price of MLPeriod."
                                            ' Date of Last Available Closing Price of MLPeriod
Dim MLPeriod As Integer

 MLPeriod = 1
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)

 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        ABC_LastDate = DateSerial(Left(metalib.iSeDate, 4), Mid(metalib.iSeDate, 5, 2), Right(metalib.iSeDate, 2))
 Loop
 metalib.CloseSecurity                   ' Don't forget to close the file!
        ABC_LastDate = Format(ABC_LastDate, "Short Date")

End Function

Function ABC_HighX(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_HighX.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Highest Closing Price of MLPeriod."
                                             ' Highest Closing Price of MLPeriod
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)

 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        ABC_HighX = Application.WorksheetFunction.Max(ABC_HighX, metalib.dSeClose)
 Loop
 
 metalib.CloseSecurity                         ' Don't forget to close the file!
 ABC_HighX = Format(ABC_HighX, "#,##0.00")

End Function

Function ABC_LowX(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_LowX.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Lowest Closing Price of MLPeriod."
                                             ' Lowest Closing Price of MLPeriod
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)
                         
ABC_LowX = 99999999                          ' prevent LowX from being zero all the time
 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        ABC_LowX = Application.WorksheetFunction.Min(ABC_LowX, metalib.dSeClose)
 Loop
 
 metalib.CloseSecurity                        ' Don't forget to close the file!
ABC_LowX = Format(ABC_LowX, "#,##0.00")

End Function


Function ABC_HighXDate(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_HighXDate.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Date of the Highest Closing Price of MLPeriod."
                                             ' Date of Highest Closing Price of MLPeriod

 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)


HighX1 = 0                                   ' prevent HighX1 from being too high at at start
HighXDate = 40000
 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        HighX1 = Application.WorksheetFunction.Max(HighX1, metalib.dSeClose)
        If HighX1 <= metalib.dSeClose Then ABC_HighXDate = DateSerial(Left(metalib.iSeDate, 4), Mid(metalib.iSeDate, 5, 2), Right(metalib.iSeDate, 2))
 Loop

 metalib.CloseSecurity                        ' Don't forget to close the file!
ABC_HighXDate = Format(ABC_HighXDate, "Short Date")

End Function

Function ABC_LowXDate(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_LowXDate.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the Date of the Lowest Closing Price of MLPeriod."
                                            ' Date of Lowest Closing Price of MLPeriod
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd
 metalib.Seek (-MLPeriod)
                         
LowX1 = 99999999                            ' prevent LowX from being zero all the time
 Do While (metalib.iSeRecordsLeft > 0)
        metalib.ReadDay
        LowX1 = Application.WorksheetFunction.Min(LowX1, metalib.dSeClose)
        If LowX1 >= metalib.dSeClose Then ABC_LowXDate = DateSerial(Left(metalib.iSeDate, 4), Mid(metalib.iSeDate, 5, 2), Right(metalib.iSeDate, 2))
 Loop
 
 metalib.CloseSecurity                       ' Don't forget to close the file!
ABC_LowXDate = Format(ABC_LowXDate, "Short Date")

End Function

Function ABC_CloseXago(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_CloseXago.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the last available closing price of MLPeriod."
                                            ' Last Available Closing Price of MLPeriod
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 metalib.SeekToEnd                          ' go to end of file...
 metalib.Seek (-MLPeriod)                   ' ... nr. of days (negative if you want to go back)
    metalib.ReadDay                         '
        ABC_CloseXago = metalib.dSeClose
 metalib.CloseSecurity                       ' don't forget to close the file!

End Function

Function ABC_DateXago(MLPath As String, MLTicker As String, MLPeriod As Integer)
Attribute ABC_DateXago.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the date of the last available closing price of MLPeriod."
                                            ' Date of Last Available Closing Price of MLPeriod
 ' metalib.OpenSecurityBySymbol MLPath, MLTicker
 metalib.OpenDirectory MLPath
 metalib.OpenSecurityBySymbol MLTicker
 
 metalib.SeekToEnd                          ' go to end of file...
 metalib.Seek (-MLPeriod)                   ' ... nr. of days (negative if you want to go back)
    metalib.ReadDay
        ABC_DateXago = DateSerial(Left(metalib.iSeDate, 4), Mid(metalib.iSeDate, 5, 2), Right(metalib.iSeDate, 2))
 metalib.CloseSecurity                       ' don't forget to close the file!
ABC_DateXago = Format(ABC_DateXago, "Short Date")

End Function

Sub ABC_Sec_Info()
Attribute ABC_Sec_Info.VB_Description = "Converts MetaStock-Data into Excel:\r\nConverts the Security Name, Security Symbol, Periodicity, First Date, and Last Date of all the securities specified in the path."

Worksheets("Security Info").Activate
Worksheets("Security Info").UsedRange.Select

Selection.ClearContents
Application.GoTo Reference:=Range("A5"), Scroll:=True
Application.GoTo Reference:=Range("C7"), Scroll:=False

rc = 2
StartCol = 2

metaprog.Create
metalib.OpenDirectory Range("Sec_Info_Path")

   Range("A5").Offset(rc, StartCol + 0) = "Security Name"
   Range("A5").Offset(rc, StartCol + 1) = "Security Symbol"
   Range("A5").Offset(rc, StartCol + 2) = "Periodicity"
   Range("A5").Offset(rc, StartCol + 3) = "First Date"
   Range("A5").Offset(rc, StartCol + 4) = "Last Date"
   rc = rc + 1

tot_rec = metalib.iMaRecordsLeft

    metaprog.SetRange 0, metalib.iMaRecords
    metaprog.SetStep 1
    metaprog.SetPos 0

Do While (metalib.iMaRecordsLeft > 0)

    metaprog.SetStatus "Reading Security - " & metalib.bstrMaSecName
    metaprog.StepIt

    metalib.ReadMaster
    
        If metaprog.fCancel Then             ' Cancel pressed
           metaprog.Destroy
           metalib.CloseSecurity
           metalib.CloseDirectory
           ScreenUpdating = True
           Exit Sub
        End If

   Range("A5").Offset(rc, StartCol + 0) = metalib.bstrMaSecName
   Range("A5").Offset(rc, StartCol + 1) = metalib.bstrMaSecSymbol
   Range("A5").Offset(rc, StartCol + 2) = metalib.bstrMaPeriodicity
   Range("A5").Offset(rc, StartCol + 3) = Format(DateSerial(Left(metalib.iMaFirstDate, 4), Mid(metalib.iMaFirstDate, 5, 2), Right(metalib.iMaFirstDate, 2)), "Short Date")
   Range("A5").Offset(rc, StartCol + 4) = Format(DateSerial(Left(metalib.iMaLastDate, 4), Mid(metalib.iMaLastDate, 5, 2), Right(metalib.iMaLastDate, 2)), "Short Date") ' metalib.m_lastdate 'Format(DateSerial(Left(metalib.m_lastdate, 4), Mid(metalib.m_lastdate, 5, 2), Right(metalib.m_lastdate, 2)), "Short Date")
   rc = rc + 1
   Application.StatusBar = " |fffd||fffd||fffd| retrieving Data...  |fffd||fffd||fffd| " & Format(1 - metalib.iMaRecordsLeft / tot_rec, "0.0%")
Loop

metalib.CloseDirectory
metaprog.Destroy
Range("C7").Select
End Sub


Function ABC_Find_Security_NameInfo(MLPath As String, MLName As String)

On Error GoTo errorhandler
Dim Finder As New MLSecurityFinder
Dim Resp As Boolean 'Dummy assignment variable for msgbox format used.

Finder.fDisplaySearchDialog = True
Finder.fScanSubDirectories = True
Finder.FindSecurity MLName, MLPath  'Use this call first time through.

Do
    Resp = MsgBox("MetaStock Data Path : " & GetDirName(Finder.SecFileName) & Chr(13) & _
            "MetaStock File Name : " & GetFileName(Finder.SecFileName) & Chr(13) & _
            "       Stock Symbol : " & Finder.SecSymbol, , MLName)
            
    Finder.FindNextSecurity
   ' Resp = MsgBox("MetaStock Data Path : " & GetDirName(Finder.SecFileName) & Chr(13) & _
            "MetaStock File Name : " & GetFileName(Finder.SecFileName) & Chr(13) & _
            "       Stock Symbol : " & Finder.SecSymbol, , MLName)
Loop

Finder.DestroySearchDialog
Exit Function

errorhandler:
If (Err.Number <> 1603) Then ' This code returned on normal completion to break loop?
   Finder.DestroySearchDialog
   Exit Function
End If

End Function

Function ABC_Find_Security_SymbolInfo(MLPath As String, MLSym As String)
Attribute ABC_Find_Security_SymbolInfo.VB_Description = "Converts MetaStock-Data into Excel:\r\nReturns the symbol/ticker of a given security name on the specified harddisk."
                                            ' find Security Symbol by Security Name
On Error GoTo errorhandler
Dim Finder As New MLSecurityFinder
Dim Resp As Boolean 'Dummy assignment variable for msgbox format used.

Finder.fDisplaySearchDialog = True
Finder.fScanSubDirectories = True
Finder.FindSecurity MLSym, MLPath  'Use this call first time through.

Do
    Resp = MsgBox("MetaStock Data Path : " & GetDirName(Finder.SecFileName) & Chr(13) & _
            "MetaStock File Name : " & GetFileName(Finder.SecFileName) & Chr(13) & _
            "       Stock Symbol : " & Finder.SecName, , MLSym)
            
    Finder.FindNextSecurity
Loop

Finder.DestroySearchDialog
Exit Function

errorhandler:
If (Err.Number <> 1603) Then ' This code returned on normal completion to break loop?
   Finder.DestroySearchDialog
   Exit Function
End If

End Function

Function GetFileName(thePath As String) As String
Dim lastPos As Integer, stopFlag As Integer, dotPos As Integer

lastPos = 1
stopFlag = 1

Do Until stopFlag = 0
  stopFlag = InStr(lastPos, thePath, "\")
  If stopFlag <> 0 Then
    lastPos = stopFlag + 1
  End If
Loop

GetFileName = Mid(thePath, lastPos)
dotPos = InStr(1, GetFileName, ".")
leftpart = Application.WorksheetFunction.Proper(Left(GetFileName, dotPos))
rightpart = LCase(Right(GetFileName, Len(GetFileName) - Len(leftpart)))
GetFileName = leftpart & rightpart

End Function

Function GetDirName(thePath As String) As String
Dim lastPos, stopFlag As Integer

lastPos = 1
stopFlag = 1
Do Until stopFlag = 0
  stopFlag = InStr(lastPos, thePath, "\")
  If stopFlag <> 0 Then
    lastPos = stopFlag + 1
  End If
Loop
GetDirName = Left(thePath, lastPos - 1)
GetDirName = Application.WorksheetFunction.Proper(GetDirName)

End Function
Attribute VB_Name = "MetaLibUtil"
Option Explicit
Public Reader As New MLReader
Public Writer As New MLWriter
Public ProgBar As New MLProgressBar
Public IQuotes As New MLInternetQuotes
Public Converter As New MLConverter
Public Finder As New MLSecurityFinder

Public Type BrowseInfo
     hwndOwner As Long
     pIDLRoot As Long
     pszDisplayName As Long
     lpszTitle As Long
     ulFlags As Long
     lpfnCallback As Long
     lParam As Long
     iImage As Long
End Type

Public Const BIF_RETURNONLYFSDIRS = 1
Public Const MAX_PATH = 260

Public Declare Sub CoTaskMemFree Lib "ole32.dll" (ByVal hMem As Long)
Public Declare Function lstrcat Lib "kernel32" Alias "lstrcatA" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
Public Declare Function SHBrowseForFolder Lib "shell32" (lpbi As BrowseInfo) As Long
Public Declare Function SHGetPathFromIDList Lib "shell32" (ByVal pidList As Long, ByVal lpBuffer As String) As Long
Public Declare Function GetActiveWindow Lib "user32" () As Long
Public Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
Public Declare Function GetSystemDefaultLCID Lib "kernel32" () As Long
Public Const LOCALE_SDECIMAL = &HE 'decimal separator
Public Const LOCALE_SSHORTDATE = &H1F 'short date format string
Public Const LOCALE_SDATE = &H1D 'date char

'Date formatting function
'(date is stored in MetaLib structs as YYYYMMDD)
Public Function FormatDate(ByVal lDate As Long)
 Dim DateChar As String
 Dim DateStyle As String
 Dim DateString As String
 Dim Pos As Integer
 
    'Check for invalid
    FormatDate = "N/A"
    If (lDate = 0) Then Exit Function
    'Made it to here? -Legitimate number, format it.
    Dim lMonth, lDay, lYear As Long
    'Get the day
    lDay = lDate Mod 100
    'Take day and last two zeroes off of the date
    lDate = lDate - lDay
    lDate = lDate / 100
    'Get the month
    lMonth = lDate Mod 100
    'Take month and last two zeroes off the date
    lDate = lDate - lMonth
    lDate = lDate / 100
    'Get the year (basically, the remaining numbers in the date)
    lYear = lDate
    
    'Convert it to a string seperated by hyphens
    DateChar = GetDateChar
    DateStyle = GetShortDate
    DateString = ""
    Pos = InStr(Pos + 1, DateStyle, DateChar)
    If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "d" Then DateString = DateString & CStr(lDay) & DateChar
    If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "m" Then DateString = DateString & CStr(lMonth) & DateChar
    If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "y" Then DateString = DateString & CStr(lYear) & DateChar
    
    Do
       Pos = InStr(Pos + 1, DateStyle, DateChar)
       If Pos = 0 Then Exit Do
       If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "d" Then DateString = DateString & CStr(lDay) & DateChar
       If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "m" Then DateString = DateString & CStr(lMonth) & DateChar
       If LCase$(Mid$(DateStyle, Pos - 1, 1)) = "y" Then DateString = DateString & CStr(lYear) & DateChar
       If LCase$(Mid$(DateStyle, Pos + 1, 1)) = "d" Then DateString = DateString & CStr(lDay) & DateChar
       If LCase$(Mid$(DateStyle, Pos + 1, 1)) = "m" Then DateString = DateString & CStr(lMonth) & DateChar
       If LCase$(Mid$(DateStyle, Pos + 1, 1)) = "y" Then DateString = DateString & CStr(lYear) & DateChar
    Loop Until Pos = 0
    DateString = Left$(DateString, Len(DateString) - 1)
    FormatDate = Format(DateString, GetShortDate)
End Function

'Returns the character(s) for the date separator.
Public Function GetDateChar() As String
 Dim sReturn As String
 Dim r As Long
 r = GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_SDATE, sReturn, Len(sReturn))
 'if successful..
 If r Then
    'pad the buffer with spaces
     sReturn = Space$(r)
     'and call again passing the buffer
     r = GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_SDATE, sReturn, Len(sReturn))
     'if successful (r > 0)
     If r Then
        'r holds the size of the string
        'including the terminating null
        GetDateChar = Left$(sReturn, r - 1)
     End If
 End If
End Function

'Returns short date formatting string for this locale.
Public Function GetShortDate() As String
 Dim sReturn As String
 Dim r As Long

 r = GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_SSHORTDATE, sReturn, Len(sReturn))
 'if successful..
 If r Then
    'pad the buffer with spaces
    sReturn = Space$(r)
    'and call again passing the buffer
    r = GetLocaleInfo(GetSystemDefaultLCID(), LOCALE_SSHORTDATE, sReturn, Len(sReturn))
    If r Then
       'r holds the size of the string
       'including the terminating null
       GetShortDate = Left$(sReturn, r - 1)
    End If
 End If
End Function

'Periodicity formatting function
Public Function FormatPeriodicity(cPeriodicity As String)
    Select Case cPeriodicity
        Case 73 'I
            FormatPeriodicity = "Intraday"
        Case 68 'D
            FormatPeriodicity = "Daily"
        Case 87 'W
            FormatPeriodicity = "Weekly"
        Case 77 'M
            FormatPeriodicity = "Monthly"
        Case Else
            FormatPeriodicity = "Unknown"
    End Select
End Function


Public Function BrowseForFolder(hwndOwner As Long, sPrompt As String) As String
 Dim iNull As Integer
 Dim lpIDList As Long
 Dim lResult As Long
 Dim sPath As String
 Dim udtBI As BrowseInfo
 'initialise variables
 With udtBI
    .hwndOwner = hwndOwner
    .lpszTitle = lstrcat(sPrompt, "")
    .ulFlags = BIF_RETURNONLYFSDIRS
 End With

 'Call the browse for folder API
 lpIDList = SHBrowseForFolder(udtBI)
     
 'get the resulting string path
 If lpIDList Then
    sPath = String$(MAX_PATH, 0)
    lResult = SHGetPathFromIDList(lpIDList, sPath)
    Call CoTaskMemFree(lpIDList)
    iNull = InStr(sPath, vbNullChar)
    If iNull Then sPath = Left$(sPath, iNull - 1)
 End If

 'If cancel was pressed, sPath = ""
 If Right$(sPath, 1) = "\" Then sPath = Left$(sPath, Len(sPath))
 BrowseForFolder = sPath
End Function


Public Function GetMarketIndex(ByVal marketname As String) As Integer
 If marketname = "US" Then GetMarketIndex = 0
 If marketname = "Germany" Then GetMarketIndex = 1
 If marketname = "Canada" Then GetMarketIndex = 2
 If marketname = "France" Then GetMarketIndex = 3
 If marketname = "Hong_Kong" Then GetMarketIndex = 4
 If marketname = "UK-Ireland" Then GetMarketIndex = 5
 If marketname = "Italy" Then GetMarketIndex = 6
 If marketname = "Norway" Then GetMarketIndex = 7
 If marketname = "Brazil" Then GetMarketIndex = 8
 If marketname = "Australia" Then GetMarketIndex = 9
End Function
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 4, 1, MSForms, CommandButton"
Private Sub CommandButton1_Click()
    MetaLib_Convert
End Sub

Private Sub CommandButton2_Click()
    UserForm_SelectSecurity.Show
End Sub
Attribute VB_Name = "Sheet111"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButtonMetaLibTool1_Click()
    MetaLib1
End Sub
Attribute VB_Name = "Sheet1111"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButtonMetaLibTool1_Click()
    MetaLib1
End Sub
Attribute VB_Name = "Sheet112"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton3, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "NameFindPath, 4, 1, MSForms, CommandButton"
Attribute VB_Control = "NameFindFile, 5, 2, MSForms, CommandButton"
Private Sub CommandButton3_Click()
    ABC_Sec_Info
End Sub

Private Sub NameFindFile_Click()
    ABC_Find_Security_NameInfo Range("E29"), Range("C29")
End Sub

Private Sub NameFindPath_Click()
    ABC_Find_Security_SymbolInfo Range("E38"), Range("C38")
End Sub
Attribute VB_Name = "Sheet1121"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButtonMetaLibTool1_Click()
    MetaLib1
End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm_About"
Attribute VB_Base = "0{4B601B42-C47E-11D4-8448-0080C8F6DFC4}{4B601B31-C47E-11D4-8448-0080C8F6DFC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Image1_Click()
    EyesMsg
End Sub

Private Sub lblMail_Click()
    Link = "mailto:thomas.pfluegl@jk.uni-linz.ac.at"
    On Error GoTo LinkError
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
LinkError:
    MsgBox "Cannot open " & Link, vbInformation + vbOKOnly, "Link Error:"
End Sub

Private Sub lblWeb_Click()
    Link = "http://keplerweb.oeh.uni-linz.ac.at/trading/index.html"
    On Error GoTo LinkError
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
LinkError:
    MsgBox "Cannot open " & Link, vbInformation + vbOKOnly, "Link Error:"
End Sub

Private Sub OKButton_Click()
    Unload Me
End Sub

Private Sub UserForm_Click()
    MsgBox "Copyright |fffd| Thomas Pfluegl, 2000 - All rights reserved.", , "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Sub
Attribute VB_Name = "UserForm_SelectSecurity"
Attribute VB_Base = "0{4B601B46-C47E-11D4-8448-0080C8F6DFC4}{4B601B27-C47E-11D4-8448-0080C8F6DFC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ComboBox1_Click()   ' update Securityname
    ComboBox2.ListIndex = ComboBox1.ListIndex
    ComboBox3.ListIndex = ComboBox1.ListIndex
    Application.StatusBar = "Security: " & ComboBox1.Value & "  |fffd||fffd||fffd|  Ticker: " & ComboBox2.Value & "  |fffd||fffd||fffd|  Path: " & ComboBox3.Value
End Sub

Private Sub ComboBox2_Click()   ' update Ticker
    ComboBox1.ListIndex = ComboBox2.ListIndex
    ComboBox3.ListIndex = ComboBox2.ListIndex
    Application.StatusBar = "Security: " & ComboBox1.Value & "  |fffd||fffd||fffd|  Ticker: " & ComboBox2.Value & "  |fffd||fffd||fffd|  Path: " & ComboBox3.Value
End Sub

Private Sub ComboBox1_Change()
'GoTo pass1
    ' Range("Days") = ComboBox1.Value
    Worksheets("MetaLib-Tools I").Calculate
    
    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")
'pass1:
End Sub

Private Sub ComboBox2_Change()
    Range("Ticker") = ComboBox2.Value
    Worksheets("MetaLib-Tools I").Calculate
    
    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")
End Sub

Private Sub ComboBox3_Change()
    Range("Path") = ComboBox3.Value
    Worksheets("MetaLib-Tools I").Calculate
    
    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")
End Sub

Private Sub ComboBox4_Change()
    Range("Days") = ComboBox4.Value
    Worksheets("MetaLib-Tools I").Calculate
    
    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")
End Sub

Private Sub CommandButton3_Click()
    UserForm_About.Show
End Sub

Private Sub Image2_Click()
    EyesMsg
End Sub

Private Sub UserForm_Initialize()
Dim wsn As String
    wsn = "Security Data"

FirstRow = 10
LastRow = 19
FirstCol = 3

Mystart = FirstRow
MyEnd = LastRow
MyCol = FirstCol

If Label13.Caption = "Calculating..." Then Label13.Caption = ""
    
    If Worksheets("MetaLib-Tools I").Range("Ticker").Value = "" Then
        MsgBox "Please Enter a valid Ticker in cell " & Range("Ticker").Address, vbCritical, "Missing Data"
        Range("Ticker").Select
        Hide
    End If
    
    If Worksheets("MetaLib-Tools I").Range("Path").Value = "" Then
        MsgBox "Please Enter a valid Path in cell " & Range("Path").Address, vbCritical, "Missing Data"
        Range("Path").Select
        Hide
    End If
    
    For counter = Mystart To MyEnd
        Set THisCell = Worksheets(wsn).Cells(counter, MyCol)
        If THisCell.Value = "" Then Exit For
    Next counter

    MySecurityNames = Worksheets("Security Data").Range("C10:C19")
        For Each Item In MySecurityNames
            UserForm_SelectSecurity.ComboBox1.AddItem Item
        Next Item

    MyTicker = Worksheets("Security Data").Range("D10:D19")
        For Each Item In MyTicker
            UserForm_SelectSecurity.ComboBox2.AddItem Item
        Next Item
        
    MyPath = Worksheets("Security Data").Range("E10:E19")
        For Each Item In MyPath
            UserForm_SelectSecurity.ComboBox3.AddItem Item
        Next Item

    MyDays = 1
        For MyDays = 1 To 250
            UserForm_SelectSecurity.ComboBox4.AddItem MyDays
        Next MyDays
'Stop
'set defaults
    ' If Worksheets("MetaLib-Tools I").Range("Ticker").Value <> "" Then
        ComboBox2.Value = Worksheets("MetaLib-Tools I").Range("Ticker").Value
    ' End If
    'If Worksheets("MetaLib-Tools I").Range("Ticker").Value = "" Then
    '    ComboBox2.Value = Worksheets("Security Data").Range("D10").Value
    '    Worksheets("MetaLib-Tools I").Range("Ticker").Value = Worksheets("Security Data").Range("D10").Value
    'End If
    
    'If Worksheets("MetaLib-Tools I").Range("Path").Value <> "" Then
        ComboBox3.Value = Worksheets("MetaLib-Tools I").Range("Path").Value
    'End If
    'If Worksheets("MetaLib-Tools I").Range("Path").Value = "" Then
    '    ComboBox3.Value = Worksheets("Security Data").Range("E10").Value
    '    Worksheets("MetaLib-Tools I").Range("Path") = Worksheets("Security Data").Range("E10").Value
    'End If
    
    'If Worksheets("MetaLib-Tools I").Range("Days").Value <> "" Then
        ComboBox4.Value = 20
    'End If
    'If Worksheets("MetaLib-Tools I").Range("Days").Value = "" Then
    '    ComboBox4.Value = Worksheets("Security Data").Range("H29").Value
    '    Worksheets("MetaLib-Tools I").Range("Days").Value = Worksheets("Security Data").Range("H29").Value
    'End If

    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")

' If Label13.Caption = "" Then Label13.Caption = "Calculating..."
End Sub

Private Sub CommandButton1_Click()  ' OK
GoTo pass1
    Range("Ticker") = ComboBox2.Value
    Range("Path") = ComboBox3.Value
    Range("Days") = ComboBox4.Value

Worksheets("MetaLib-Tools I").Calculate

    TextBox1.Value = Range("LastClose")
    TextBox2.Value = Range("LastDate")
    TextBox3.Value = Range("HighX")
    TextBox4.Value = Range("HighXDate")
    TextBox5.Value = Range("LowX")
    TextBox6.Value = Range("LowXDate")
pass1:
    Hide
End Sub

Private Sub CommandButton2_Click()  ' Cancel    'Close
    Hide
    Range("LastClose").Select
End Sub
Attribute VB_Name = "Welcome"
Attribute VB_Base = "0{4B601B3B-C47E-11D4-8448-0080C8F6DFC4}{4B601B2F-C47E-11D4-8448-0080C8F6DFC4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
    If ActiveSheet.Name = "Welcome" Then Application.OnTime Now + TimeValue("00:00:03"), "Unsplash"     'tell Excel to run the "Unsplash" procedure after 3 sec's
    If ActiveSheet.Name = "Goodbye" Then Application.OnTime Now + TimeValue("00:00:01"), "Unsplash"     'tell Excel to run the "Unsplash" procedure after 3 sec's
End Sub



INQUEST-PP=macro
