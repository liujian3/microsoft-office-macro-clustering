Attribute VB_Name = "AnchorsForm"
Attribute VB_Base = "0{FFE14480-E419-4CCE-AC5C-F7AF9BBE9C20}{D40B730E-F2A7-44E0-9CA0-C797AA5A43C9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AllowOverlapCheckbox_Click()
  SetOverlap (1)
  'Selection.ShapeRange.WrapFormat.AllowOverlap = AnchorsForm.AllowOverlapCheckbox.Value
End Sub

Private Sub BackOneCharButton_Click()
  MoveOnChar (False)
End Sub

Private Sub BehindTextButton_Click()
  ChangeWrapping (-1)
End Sub

Private Sub CancelButton_Click()
  ExitAnchorEdit (1)
End Sub

Private Sub GoResizeButton_Click()
  ResizeShape (1)
End Sub

Private Sub CompressButton_Click()
  CompressPicture (1)
End Sub

Private Sub ConvertToShapeButton_Click()
  InlineConvert (1)
End Sub

Private Sub DownOneLineButton_Click()
  MoveLineUp (False)
End Sub

Private Sub FrontofTextButton_Click()
  ChangeWrapping (-2)
End Sub

Private Sub GroupButton_Click()
  Group_Shapes (1)
End Sub

Private Sub HelpButton_Click()
  HelpFormDisplay (1)
End Sub

Private Sub HorizCentreButton_Click()
  SetHorizontal (wdShapeCenter)
End Sub

Private Sub HorizCharButton_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionCharacter)
End Sub

Private Sub HorizColumnButton_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionColumn)
End Sub

Private Sub HorizLeftButton_Click()
  SetHorizontal (wdShapeLeft)
End Sub

Private Sub HorizMarginButton_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionMargin)
End Sub

Private Sub HorizOtherButton_Click()
  SetHorizontal (-1000)
End Sub

Private Sub HorizPageButton_Click()
  SetHorizontalPosition (wdRelativeHorizontalPositionPage)
End Sub

Private Sub HorizRightButton_Click()
  SetHorizontal (wdShapeRight)
End Sub

Private Sub InLineTextButton_Click()
  ToInlineShape (1)
  'ChangeWrapping (wdWrapInline)
End Sub

Private Sub InLineWithTextButton_Click()
  ChangeWrapping (wdWrapThrough)
End Sub

Private Sub LockAnchorCheckbox_Click()
  On Error Resume Next
  Selection.ShapeRange.LockAnchor = AnchorsForm.LockAnchorCheckbox.Value
  On Error GoTo 0
End Sub

Private Sub MoveDown10Button_Click()
  MoveDownPoint (10)
End Sub

Private Sub MoveDown1Button_Click()
  MoveDownPoint (1)
End Sub

Private Sub MoveLeft10Button_Click()
  MovePoints (-10)
End Sub

Private Sub MoveLeft1Button_Click()
  MovePoints (-1)
End Sub

Private Sub MoveRight10Button_Click()
  MovePoints (10)
End Sub

Private Sub MoveRight1Button_Click()
  MovePoints (1)
End Sub

Private Sub MoveUp10Button_Click()
  MoveDownPoint (-10)
End Sub

Private Sub Moveup1Button_Click()
  MoveDownPoint (-1)
End Sub

Private Sub NextInlineShapeButton_Click()
  'GetNextInline (1)
End Sub

Private Sub NextShapeButton_Click()
  GetNextShape (True)
End Sub

Private Sub OffsetSetButton_Click()
  InlineOffset (1)
End Sub

Private Sub OnOnecharButton_Click()
  MoveOnChar (True)
End Sub

Private Sub PreviousShapeButton_Click()
  GetNextShape (False)
End Sub

Private Sub RefreshButton_Click()
  Refresh (1)
End Sub

Private Sub Rotate0Button_Click()
 RotateShape (0)
End Sub

Private Sub Rotate1Button_Click()
  RotateShape (2)
End Sub

Private Sub Rotate5Button_Click()
  RotateShape (10)
End Sub

Private Sub RotateA5Button_Click()
  RotateShape (-10)
End Sub

Private Sub SetDistButton_Click()
  SetDistanceFromText (1)
End Sub

Private Sub SetPictureButton_Click()
  changePicParms (1)
End Sub

Private Sub SquareButton_Click()
  ChangeWrapping (wdWrapSquare)
End Sub

Private Sub TightButton_Click()
  ChangeWrapping (wdWrapTight)
End Sub

Private Sub TopandBottomButton_Click()
  ChangeWrapping (wdWrapTopBottom)
End Sub

Private Sub UngroupButton_Click()
  ungroupShapes (1)
End Sub

Private Sub UpOneLineButton_Click()
  MoveLineUp (True)
End Sub

Private Sub VertLineButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionLine)
End Sub

Private Sub VertMarginButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionMargin)
End Sub

Private Sub VertPageButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionPage)
End Sub

Private Sub VertParaButton_Click()
  SetVerticalPosition (wdRelativeVerticalPositionParagraph)
End Sub

Private Sub VertTopButton_Click() 'top(-999999), bottomt(-999997), Center(-999995)
  SetVertical (-999999)
End Sub

Private Sub VertCenterButton_Click()
    SetVertical (-999995)
End Sub

Private Sub VertBottomButton_Click()
    SetVertical (-999997)
End Sub

Private Sub VertOtherButton_Click()
  SetVertical (-1000)
End Sub
Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{8D2E9B28-26AA-4B36-9037-B25DE58D40F4}{CB808273-EDC9-4FEB-8EC4-7FD1D99C4382}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
  ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub
Attribute VB_Name = "HelpModule"
Option Explicit
'Sub gg()
'HelpFormDisplay (1)
'End Sub
Sub HelpFormDisplay(n As Long)
Dim s As String
  With HelpForm.Helptxt0
    s = "LOAD SHAPE DETAILS" & vbCrLf
    s = s & "Click inside a shape or select a range containing the shape then click Refresh. " & _
        "Clicking Next or Previous shape will automatically load parameters. Next & Previous will not find shapes with Visible not set." & vbCrLf & vbCrLf
    s = s & _
     "IN-LINE PICTURE" & vbCrLf & _
     "If the shape is an in-line shape then the only actions thay can be performed are:" & vbCrLf & _
     "1.  Convert to anchored shape. The shape will then be anchored to the paragraph with square wrapping" & vbCrLf & _
     "2.  The image can be rotated" & vbCrLf & _
     "3.  The picture brightness and contrast can be changed (pictures only)."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt1
    s = "WRAPPING STYLE" & vbCrLf
    s = s & "Select a wrapping style to change the text wrapping around the shape. Only pictures can be converted between in-line and floating." & vbCrLf & vbCrLf
    s = s & "ANCHOR OFFSET & ANCHOR LOCK" & vbCrLf
    s = s & "Select horizontal and vertical anchor points. The offset from the anchor point may change to keep" & vbCrLf & _
        "the shape in the same position on the page. If you manually drag the shape after changing vertical offset then the anchor paragraph may change unless the anchor is locked. Click Refresh to see the new offset." & vbCrLf & _
        vbCrLf & "When editiong a document shapes are usually anchored to paragraphs so that the shape will move with associated text. At the final edit, shapes can then be anchored to the page or margin so that their position on the page can then be adjusted to give the best layout."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt2
    s = "MOVE AND ROTATE SHAPE" & vbCrLf
    s = s & "Shapes can be moved relative to the anchor point using the horizontal position options left, right" & vbCrLf & _
        "or centre, or the move buttons. After moves are made the new offsets from the anchor are displayed." & vbCrLf & _
        "The shape can also be rotated. A table or shape inside a textbox will be rotated with the textbox."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt3
    s = "GROUPING SHAPES" & vbCrLf
    s = s & "(a)  Select the shapes to be grouped by holding down the left mouse button and moving the insert point down marking the shapes. It does not matter if paragraph text is also selected." & vbCrLf & _
        "(b)  Click the Group button." & vbCrLf & vbCrLf & _
        "The group itself is a shape and can be moved, rotated, anchored and given a wrapping style." & vbCrLf & _
        vbCrLf & "TO UNGROUP: Click anywhere in the group, click Refresh and then Ungroup. After ungrouping, the" & vbCrLf & _
        "individual shapes will have the same anchoring and rotation as the group."
    .Caption = s
  End With

  HelpForm.Show
End Sub



Attribute VB_Name = "MainModule"
Option Explicit
Dim vPoints As Single
Dim hPoints As Single
Dim ShapeNo As Long
Dim ShapeMax As Long
Dim cN As Long
Dim shpname As String
Dim rr As Range
Dim InhibitClick As Boolean
Dim ShowTrackChangeSW As Boolean
Dim inShape As Boolean
Dim inInlineShape As Boolean
Dim HPage As Single    ' both modes, distance from page in points. -1 if outside page
Dim HposIndent As Long ' non wrap mode, position relative to margin in points
Dim HAlignment As Long  ' non wrap mode only, can be wdAlignRowLeft, Right or Center
Dim HWraptype As Boolean ' current wrap status, true = wrapped
Dim HRelative As Long  ' wrap mode, can be wdRelativeHorizontalPositionPage, Margin, Column or Character
Dim VRelative As Long  ' wdRelativeVerticalPositionPage, Center
Dim VPage As Single    ' both modes, dist from top of page
Dim ShpType
Dim InShpType

Sub GO_SHAPES()
Dim ns As String
  ns = ActiveDocument.Name ' raises error if no active document
  shpname = ""
  ShpType = Array("Shape", "Autoshape", "Callout", "Chart", "Comments", "Freeform", "Group", "Embedded OLE", _
  "Form Control", "Line", "Linked OLE", "Linked Picture", "OLE Control", "Picture", "Placeholder", _
  "Text effect", "Media", "Textbox", "Script anchor", "Table", "Canvas", "Diagram", "Ink", _
  "Ink comment", "SmartArt")
  InShpType = Array("InLine", "Embedded OLE Object", "Linked OLE Object", "Picture", "Linked Picture", "OLE Control Object", "Horizontal Line", _
    "Picture with Horiz Line", "Linked Picture with Horiz Line", "Picture Bullet", _
    "Script Anchor", "OWS anchor", "Chart", "Diagram", "Locked shape canvas", "SmartArt")

  OpenAnchors
End Sub
Sub ExitAnchorEdit(n As Long)
  Unload AnchorsForm
  shpname = ""
  ActiveDocument.ShowRevisions = ShowTrackChangeSW
End Sub
Sub Refresh(n As Long)
Dim m As Long
  On Error Resume Next
    n = 0
    n = Selection.InlineShapes.Count = 0
    m = 0
    m = Selection.ShapeRange.Count = 0
  On Error GoTo 0
      
    If n + m = 0 Then
      inShape = False
    Else
      inShape = True
    End If
  LoadValues (1)
End Sub
Private Sub OpenAnchors()
  Call GiveScreenPoints(hPoints, vPoints)
  Refresh (1)

  With AnchorsForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hPoints - .Width - 6
'    .Height = 148
    .Show
  End With
End Sub



' What        selection.type  .shaperange.type  .childshaperange.count .childshaperange.name
' Body text   1=in para, 2=multiple   N/A          0
' Single shape     8                  9            1                      Straight arrow etc.
' Group frame      8                  6            1                      Group 6
' Group item       8                  6            1                      Oval 4 etc.
' Canvas frame     7                  20           0                      Error
' Canvas item      7                  20           1                      5 point star etc
' Textbox frame    8                  17           1                      Text box 9
' Textbox text     2                  17           1                      Text box 9
' Multiple shapes  2                  Invalid      0                      Invalid
' Inline shape     7                  Invalid      0                      Invalid

Sub LoadValues(n As Integer)
Dim strng As String
Dim xShape As Shape
Dim aHyper As Hyperlink
Dim ishp As InlineShape
Dim j As Long
Dim jj As Long
Dim k As Long
  'setCurrentSize (1) ' in ResizeModule
  showCounts
  With AnchorsForm
    .UngroupButton.Enabled = False
    .CompressButton.Visible = False
    .PictureParmsFrame.Visible = False
  End With
'  ActiveWindow.View.ShowObjectAnchors = True ' takes too long and flickers
  If Not inShape Then
    If Selection.Information(wdWithInTable) Then 'Or Selection.Tables.Count > 0 _
     ' And Selection.ShapeRange.Count = 0 Then ' not a table within a shape
 '     Selection.Tables(1).Select
      inShape = False
      inInlineShape = False
  
    End If
  End If
  
isShp:
'  On Error Resume Next ' can raise error if embedded OLE object ??????????????????
'  If Selection.Type = wdSelectionIP And Selection.Range.ShapeRange.Count > 0 Then
    ' have selected the text in a shape so select the shape
'    Set xShape = Selection.ShapeRange(1)
'    xShape.Select
'  End If
'  On Error GoTo 0
  
  With Selection ' check for canvas inline
    If .InlineShapes.Count = 0 Then
      If Selection.Type = 7 Or Selection.Type = 8 Then
        If .ShapeRange.Type = 20 _
          And .ShapeRange(1).WrapFormat.Type = wdWrapInline _
          And .ChildShapeRange.Count = 0 Then
        j = 0
        On Error Resume Next ' ???????????????????????????????
        j = Selection.Range.ShapeRange.CanvasItems.Count
        On Error GoTo 0
        AnchorsForm.ObjName = "Inline Canvas with " & j & " shapes"
          setupForm (True)
    '        AnchorsForm.InlineFrame.Visible = True
          Exit Sub
        End If
      End If
   End If
  End With
  
  ' determine first shape in selection. If selection contains both types of shape then select floating
  jj = Selection.Range.InlineShapes.Count
  k = Selection.Range.ShapeRange.Count
  If jj > 0 And k = 0 Then
    Set ishp = Selection.InlineShapes(1)
    ishp.Select
  Else
    If k > 0 Then
      Set xShape = Selection.Range.ShapeRange(1)
    Else
      If k = 0 Then
        k = Selection.ShapeRange.Count
        If k > 0 Then Set xShape = Selection.ShapeRange(1)
      End If
      If k > 0 Then
      jj = 0
      '  Set ishp = Selection.ShapeRange(1)
      If xShape.WrapFormat.Type = wdWrapInline Then jj = 1
    Else
    If jj > 0 Then
      Set ishp = Selection.InlineShapes(1)
      ishp.Select
    End If
  End If
  End If
  End If
    
  
 If jj > 0 Then
 ' If Selection.InlineShapes.Count > 0 Then ' -------- inline ------------

 '   Selection.InlineShapes(1).Select ' if more than one selected then select first
canInLine:
    inInlineShape = True
    inShape = False
    With AnchorsForm

      setupForm (True)
   '   Set ishp = Selection.InlineShapes(1)
      If k > 0 Then
        xShape.Select ' **** necessary to display selection because of Word bug ***
        Selection.MoveEnd unit:=wdCharacter
        Set xShape = Selection.Range.ShapeRange(1)
        xShape.Select
  '      Selection.ShapeRange(1).Select
        j = xShape.Type
'        j = Selection.Range.ShapeRange(1).Type
        .ObjName = "Inline " & ShpType(j)
        If j = 1 Then .ObjName = .ObjName & "(" & Trim(Str(xShape.AutoShapeType)) & ")"
        
  '      Selection.ShapeRange(1).Select
      Else
        j = Selection.Range.InlineShapes(1).Type
        .ObjName = "Inline " & InShpType(j)
        Selection.Range.InlineShapes(1).Select
      End If
      If k = 0 And (j = 3 Or j = 4) Then
        .BrightnessTextbox.Value = ishp.PictureFormat.Brightness
        .ContrastTextbox.Value = ishp.PictureFormat.Contrast
        .PictureParmsFrame.Visible = True
        .CompressButton.Visible = True
        .OffsetFrame.Visible = True
        .OffsetTextbox.Value = Trim(Str(ishp.Range.Font.Position))
      End If
      
 
     If k > 0 Then
        With Selection.Range.ShapeRange(1)
          AnchorsForm.ObjName = AnchorsForm.ObjName & Str(.Width) & " x" & Str(.Height) & " pts"
        End With
      Else
        With Selection.Range.InlineShapes(1)
          AnchorsForm.ObjName = AnchorsForm.ObjName & Str(.Width) & " x" & Str(.Height) & " pts"
        End With
      End If

      On Error GoTo noHyper
      strng = "no url"
 '     Set aHyper = Selection.Range.InlineShapes(1).Hyperlink
      Set aHyper = ishp.Hyperlink
      strng = aHyper.Address
      On Error GoTo 0
      .ObjName = .ObjName & vbCrLf & "Hyperlink " & Left(strng, 28) & "..."
noHyper:
      On Error GoTo 0
     
    End With
    displayRotation (999)
    Exit Sub
  End If

  ' test for single selected shape or shape within a range
  
  'On Error GoTo lerr ' gives error when picture is both shape and in-line
  If Selection.Range.ShapeRange.Count > 0 And Selection.ShapeRange.Count = 0 Then ' range selection, select first
    
    If Selection.Range.ShapeRange.Count Then Selection.Range.ShapeRange(1).Select
  End If
  
  If Selection.ShapeRange.Count > 0 And jj = 0 Then ' ----------- floating shape ---------------

    On Error GoTo 0
    inShape = True
    inInlineShape = False
    If LoadValuesShape Then ' ****** wrapping is in-line but object is not inlineshape

    End If
    showPrintview
    If Selection.ShapeRange.Count > 0 Then
      displayRotation (Selection.ShapeRange(1).Rotation)
    Else
      displayRotation (999)
    End If
    Exit Sub
    
    
  Else '  floating shape
    With AnchorsForm
      .WrapFrame.Visible = False
      .DistanceFrame.Visible = False
      .AnchorFrame.Visible = False
      .OffsetFrame.Visible = False
      .HorizPosFrame.Visible = False
      .WarningLabel.Visible = True
      .InlineFrame.Visible = False
      On Error GoTo 0
      Select Case Selection.Type
        Case wdNoSelection
          strng = "no selection"
        Case wdSelectionBlock
          strng = "block"
        Case wdSelectionFrame
          strng = "frame"
        Case wdSelectionInlineShape
          strng = "inline shape"
        Case Else
          strng = "Unknown"
      End Select
      .ObjName = "Selection type= " & strng
      'Set aHyper = Selection.Range.ShapeRange(1).Hyperlink
      strng = ""
      On Error GoTo noHyper2
      Set aHyper = Selection.Range.ShapeRange(1).Hyperlink
      strng = aHyper.Address
      strng = "Hyperlink " & Left(strng, 28) & "..."
noHyper2:
      On Error GoTo 0
      .ObjName = .ObjName & vbCrLf & strng
      
    End With
    If Selection.Range.ShapeRange.Count > 0 Then
      displayRotation (Selection.Range.ShapeRange(1).Rotation)
    Else
      displayRotation (999)
    End If
  End If
  Exit Sub
lerr:
  On Error GoTo 0
  MsgBox "Cannot get parameters for selection. Re-select and click Refresh"
End Sub
 
Private Sub setupForm(inLine As Boolean)
Dim ishp As InlineShape
Dim j As Long
  With AnchorsForm
    If inLine Then
      .WrapFrame.Visible = False
      .DistanceFrame.Visible = False
      .PictureParmsFrame.Visible = False
      .CompressButton.Visible = False
      .OffsetFrame.Visible = False
      .AnchorFrame.Visible = False
      .HorizPosFrame.Visible = False
      .WarningLabel.Visible = False
      .InlineFrame.Visible = True
      .PositionFrame.Visible = False
      .ObjName = "Inline Shape"
      
      .RotationFrame.Visible = True
      .Rotate1Button.Enabled = True
      .Rotate5Button.Enabled = True
      .RotateA5Button.Enabled = True
     
    End If
  End With
End Sub

 
Sub InlineConvert(n As Long)
 Dim hPos As Single
 
   If Selection.InlineShapes.Count < 1 Then
     If Selection.Type = 7 Or Selection.Type = 8 Then ' canvas
       If Selection.ShapeRange.Type = 20 _
          And Selection.ShapeRange(1).WrapFormat.Type = wdWrapInline _
          And Selection.ChildShapeRange.Count = 0 Then
          Selection.ShapeRange(1).WrapFormat.Type = wdWrapSquare
          LoadValues (1)
          Exit Sub
       End If
     End If
 ' ************************Conversion not working ********************************************
 'Selection.ShapeRange(1).WrapFormat.Type = wdWrapSquare
 ' *******************************************************************
'     MsgBox "Not in inline shape"
'     Exit Sub
   End If
   
   With ActiveDocument.Shapes.BuildFreeform(msoEditingCorner, 360, 200)
     .AddNodes msoSegmentCurve, msoEditingAuto, 480, 200
 '    .ConvertToShape
   End With
   On Error GoTo noConvert ' cannot convert if shape is in textbox
     If Selection.InlineShapes.Count > 0 Then Selection.InlineShapes(1).ConvertToShape
   On Error GoTo 0
    ' sometimes there is a timing issue
    If Selection.Range.ShapeRange.Count > 0 Then Selection.Range.ShapeRange(1).Select
    If Selection.ShapeRange.Count > 0 Then
      Selection.ShapeRange.LockAnchor = False
      Selection.ShapeRange(1).WrapFormat.Type = wdWrapSquare
      Selection.ShapeRange(1).RelativeVerticalPosition = wdRelativeVerticalPositionParagraph
      Selection.ShapeRange(1).Top = 0
      Call ShowOffsets(0, Selection.ShapeRange(1).Left)
    End If

    On Error GoTo 0
    inShape = True
    LoadValues (1)
    Exit Sub
noConvert:
  MsgBox "Cannot convert if OLE object or is in textbox, footnote, endnote etc. "
End Sub

Private Function LoadValuesShape() As Boolean ' returns true if dual type
' must be called from a selected shape otherwise selection.Shaperange will not work
Dim Sn As Long
Dim rRange As Range
Dim strng As String
Dim shp As Shape
Dim aHyper As Hyperlink
Dim j As Long
Dim TxtFrame As TextFrame
  InhibitClick = True
  LoadValuesShape = False
 ' ActiveDocument.ShowRevisions = True ' else can get into endless loop if a shape exists only in track changes
  With AnchorsForm
    .DistanceFrame.Visible = False
    .PictureParmsFrame.Visible = False
    .CompressButton = False
    Sn = Selection.Range.ShapeRange.Count ' check if currect selection contains a shape
    If Sn > 0 Then
      Set shp = Selection.Range.ShapeRange(1)
    Else
      Sn = Selection.ShapeRange.Count
      If Sn > 0 Then Set shp = Selection.ShapeRange(1)
    End If
    If Sn = 0 Then
      .WrapFrame.Visible = False
      .AnchorFrame.Visible = False
      .HorizPosFrame.Visible = False
      .WarningLabel.Visible = True
      .OffsetFrame.Visible = False
      .InlineFrame.Visible = False
      .ObjName = ""
      Exit Function
    End If
 '   Set shp = Selection.Range.ShapeRange(1)
    j = shp.Type
    With AnchorsForm.InLineTextButton
      If j = msoPicture Or j = msoEmbeddedOLEObject Or j = msoLinkedOLEObject Then
        .Enabled = True
      Else
        .Enabled = False
 .Enabled = True
 .Caption = "In line"
      End If
    End With
    If j < 0 Or j > UBound(ShpType) Then j = 0
    shpname = ShpType(j)
    If j = 1 Then shpname = shpname & "(" & Trim(Str(shp.AutoShapeType)) & ")" ' ****************************************
    Set TxtFrame = Nothing
    On Error Resume Next
    Set TxtFrame = shp.TextFrame
    On Error GoTo 0
    If Not TxtFrame Is Nothing Then
      If TxtFrame.HasText And j <> 17 Then shpname = shpname & " with text"
    End If
    
    shpname = shpname & ": "
    strng = shpname & shp.Name
    If Left(shpname, 5) = "Group" Then
      Sn = 0
      On Error Resume Next
      Sn = Selection.Range.ShapeRange.GroupItems.Count
      On Error GoTo 0
      .UngroupButton.Enabled = True
      If Sn > 0 Then
        strng = shpname & " has " & Sn & " shapes"
      End If
    Else
      If Left(shpname, 6) = "Canvas" Then
        Sn = 0
        On Error Resume Next ' ???????????????????????????????
        Sn = Selection.Range.ShapeRange.CanvasItems.Count
        On Error GoTo 0
        strng = shpname & " has " & Sn & " shapes"
      End If
    End If
    .ObjName = strng
       
    .WrapFrame.Visible = True
    
    'If j = 17 Then '  17 =textbox
    If j <> msoShapeTypeMixed Then
      With shp.WrapFormat
        AnchorsForm.DistTop.Value = twoDecimals(.DistanceTop)
        AnchorsForm.DistBottom.Value = twoDecimals(.DistanceBottom)
        AnchorsForm.DistLeft.Value = twoDecimals(.DistanceLeft)
        AnchorsForm.DistRight.Value = twoDecimals(.DistanceRight)
      End With
      .DistanceFrame.Visible = True
    End If
    If j = 11 Or j = 13 Then ' linked picture and picture
      .BrightnessTextbox.Value = shp.PictureFormat.Brightness
      .ContrastTextbox.Value = shp.PictureFormat.Contrast
      .PictureParmsFrame.Visible = True
      .ObjName = .ObjName & "  " & Str(shp.Width) & " x" & Str(shp.Height) & " pts"
      
    End If
    .AnchorFrame.Visible = True
    .HorizPosFrame.Visible = True
    .WarningLabel.Visible = False
    .InLineWithTextButton.Visible = True
    .TightButton.Visible = True
    .BehindTextButton.Visible = True
    .FrontofTextButton.Visible = True
    .InLineTextButton.Visible = True
    .LockAnchorCheckbox.Visible = True
    .InlineFrame.Visible = False
    .OffsetFrame.Visible = False
    .PositionFrame.Visible = True
    .RotationFrame.Enabled = True
    .Rotate1Button.Enabled = True
    .Rotate5Button.Enabled = True
    .RotateA5Button.Enabled = True

    Select Case shp.RelativeVerticalPosition
      Case wdRelativeVerticalPositionLine
        .VertLineButton.Value = True
      Case wdRelativeVerticalPositionMargin
        .VertMarginButton.Value = True
      Case wdRelativeVerticalPositionPage
        .VertPageButton.Value = True
      Case wdRelativeVerticalPositionParagraph
        .VertParaButton.Value = True
    End Select
    
 '   On Error GoTo ssH ' if shape has dual styles then horiz position is invalid
    Select Case shp.RelativeHorizontalPosition
      Case wdRelativeHorizontalPositionPage
        .HorizPageButton.Value = True
      Case wdRelativeHorizontalPositionCharacter
        .HorizCharButton.Value = True
      Case wdRelativeHorizontalPositionColumn
        .HorizColumnButton.Value = True
      Case wdRelativeHorizontalPositionMargin
        .HorizMarginButton.Value = True
     End Select
ssH:
On Error GoTo 0
    Select Case shp.WrapFormat.Type
      Case wdWrapSquare
        .SquareButton.Value = True
      Case wdWrapThrough
        .InLineWithTextButton.Value = True
      Case wdWrapTight
        .TightButton.Value = True
      Case wdWrapTopBottom
        .TopandBottomButton.Value = True
      Case wdWrapBehind
        .BehindTextButton.Value = True
      Case wdWrapFront, wdWrapNone
        .FrontofTextButton.Value = True
      Case wdWrapInline
        .InLineTextButton.Value = True 'LoadValuesShape = True ' dual style *************************
    End Select
ssG:
    On Error GoTo noHyper3
 
    Select Case shp.Left
      Case wdShapeCenter
        .HorizCentreButton.Value = True
      Case wdShapeLeft
        .HorizLeftButton.Value = True
      Case wdShapeRight
        .HorizRightButton.Value = True
      Case Else
        .HorizOtherButton.Value = True
    End Select
    Select Case shp.Top
      Case wdShapeCenter
        .VertCenterButton.Value = True
      Case wdShapeTop
        .VertTopButton.Value = True
      Case wdShapeBottom
        .VertBottomButton.Value = True
      Case Else
        .VertOtherButton.Value = True
    End Select


    Call ShowOffsets(shp.Top, shp.Left)
    
    .LockAnchorCheckbox.Value = shp.LockAnchor
    .AllowOverlapCheckbox.Value = shp.WrapFormat.AllowOverlap
    
    On Error GoTo noHyper3
      Set aHyper = Selection.Range.ShapeRange(1).Hyperlink
      strng = aHyper.Address
      On Error GoTo 0
      .ObjName = .ObjName & vbCrLf & "Hyperlink " & Left(strng, 28) & "..."
noHyper3:
      On Error GoTo 0

  End With

  InhibitClick = False
End Function


Function twoDecimals(ByVal a As Single) As String ' points to 3 decimals of cm
Dim s As String
Dim d As Integer
  s = Str(a) ' + 0.005)
  d = InStr(s, ".")
  If d = 0 Then
    twoDecimals = s
    Exit Function
  End If
  twoDecimals = Left(s, d + 2)
End Function
Sub SetVerticalPosition(p As Long) ' set Page, Margin, Line or Paragraph
Dim newVpage As Single
  If InhibitClick Then Exit Sub
  On Error Resume Next
  If Not inShape Then Exit Sub ' ************* table *****************
   
  ' ******************* shape *************************
  If Selection.ShapeRange.Count <= 0 Then
    On Error GoTo 0
    LoadValues (1)
    Exit Sub
  End If
  '************************************************************************************
On Error GoTo 0
If dualShape Then Exit Sub
  With Selection.ShapeRange(1)
    .RelativeVerticalPosition = p
    Call ShowOffsets(.Top, .Left)
  End With
End Sub
Sub SetHorizontalPosition(p As Long) ' set margin, page, column for relative anchor position
' *********** modify. change relative pos then offset
' char=wdRelativeHorizontalPositionCharacter
Dim wraphold As Long
Dim leftPos As Single
  If InhibitClick Then Exit Sub
  On Error Resume Next
  If Not inShape Then Exit Sub

  ' ************************* shape ********************
  If Selection.ShapeRange.Count <= 0 Then
    On Error GoTo 0
    LoadValues (1)
    Exit Sub
  End If
  On Error GoTo 0
  With Selection.ShapeRange(1)
    If .Left < -99999 Then horizReset
    .RelativeHorizontalPosition = p   ' ??????????????????????????????????
    Call ShowOffsets(.Top, .Left)
  End With
  
End Sub
Sub SetVertical(p As Single) ' p= top(-999999), bottom(-999997), Center(-999995) other (-1000)
  If InhibitClick Then Exit Sub
If inShape Then ' ***** shape ***********************
 ' On Error Resume Next
  If Selection.ShapeRange.Count > 0 Then
    With Selection.ShapeRange(1)
      If p = -1000 Then ' ******* other
        vertReset
      Else
        .RelativeVerticalPosition = wdRelativeVerticalPositionMargin
        .Top = p
      End If
      Call ShowOffsets(.Top, .Left)
    End With
    LoadValues (1)
  End If
  On Error GoTo 0
 End If ' ***********  **************************

End Sub
Sub SetHorizontal(p As Single) ' p= Left(999998), Right(999996) or Center(999995)
  If InhibitClick Then Exit Sub
If inShape Then ' ***** shape ***********************
 ' On Error Resume Next
  If Selection.ShapeRange.Count > 0 Then
    With Selection.ShapeRange(1)
      If p = -1000 Then ' ******* other
      horizReset
     '   Selection.ShapeRange(1).IncrementLeft (1) ' forces other horiz position
     '   Selection.ShapeRange(1).IncrementLeft (-1)
      Else
        .Left = p
      End If
      Call ShowOffsets(.Top, .Left)
    End With
  Else
    LoadValues (1)
  End If
  On Error GoTo 0
  End If ' *********** ***********************

End Sub

Private Sub horizReset() ' reset to actual horiz position
Dim tWidth As Single
Dim tLeft As Single
  tLeft = Selection.ShapeRange(1).Left
  If tLeft < -99999 Then
   If Selection.ShapeRange(1).Anchor.StoryType <> wdMainTextStory Then
'     MsgBox "Cannot set actual position" & vbCrLf & "because anchor is not in main story." & vbCrLf & _
'          "Change position to 'Other' and repeat move"
     Exit Sub
   End If
    With ActiveDocument.Sections(Selection.Information(wdActiveEndSectionNumber)).PageSetup
      Select Case Selection.ShapeRange(1).RelativeHorizontalPosition
        Case wdRelativeHorizontalPositionMargin
          tWidth = .PageWidth - .LeftMargin - .RightMargin
        Case wdRelativeHorizontalPositionPage
          tWidth = .PageWidth
        Case wdRelativeHorizontalPositionColumn
          tWidth = 0 ' is only used in tables
          tWidth = .PageWidth - .LeftMargin - .RightMargin ' temp fix *************
        Case wdRelativeHorizontalPositionCharacter
          Case tWidth = 0 ' should be character size
        Case Else
          tWidth = 0
      End Select
    End With
    With Selection.ShapeRange(1)
   '  If Abs(tWidth) > 999999 Then tWidth = .Width  ' ????????????????????????????????
      Select Case tLeft
        Case -999998
          .Left = 0 'left position
        Case -999995
         'ActiveDocument.PageSetup.PageWidth
          .Left = (tWidth - .Width) / 2  ' centre position
        Case -999996
          .Left = tWidth - .Width ' right posn
        Case Else
          .Left = 0
      End Select
    End With
  End If
End Sub

Private Sub vertReset() ' reset to actual vert position
Dim tHeight As Single
Dim tTop As Single
 tTop = Selection.ShapeRange(1).Top
 If tTop < -99999 Then
   If Selection.ShapeRange(1).Anchor.StoryType <> wdMainTextStory Then
  '   MsgBox "Cannot set actual position" & vbCrLf & "because anchor is not in main story." & vbCrLf & _
  '        "Change position to 'Other' and repeat move"
     Exit Sub
   End If
 
   With ActiveDocument.Sections(Selection.Information(wdActiveEndSectionNumber)).PageSetup
     Select Case Selection.ShapeRange(1).RelativeVerticalPosition
       Case wdRelativeVerticalPositionMargin
         tHeight = .PageHeight - .TopMargin - .BottomMargin
       Case wdRelativeVerticalPositionPage
         tHeight = .PageHeight
       Case wdRelativeVerticalPositionLine
         tHeight = 0
       Case wdRelativeVerticalPositionParagraph
         tHeight = 0
       Case Else
         tHeight = 0
     End Select
   End With
   If Selection.ShapeRange.Count > 0 Then
   With Selection.ShapeRange(1)
      Select Case tTop
        Case -999999
          .Top = 0 'top position
        Case -999995
          .Top = (tHeight - .Height) / 2  ' centre position
        Case -999997
          .Top = tHeight - .Height ' bottom posn
        Case Else
          .Left = 0
      End Select
    End With
    End If
  End If
End Sub


Function dualShape() As Boolean ' dual shape has last 3 characters 1  21  13
Dim ss As String
  ss = Selection.ShapeRange(1).Anchor.Paragraphs(1).Range.Text
  dualShape = False
  If Len(ss) < 2 Then Exit Function
  If Asc(Mid(ss, Len(ss) - 1, 1)) = 21 Then
    MsgBox "Shape is a hybrid inline shape. Cannot move in present form"
    dualShape = True
  End If
End Function

Sub MovePoints(p As Single) ' ******** horizontal ***********
Dim hP As Single
Dim hhP As Single
Dim mP As Single
Dim leftM As Single
Dim rightM As Single
Dim pageM As Single
Dim TablePos As Single
Dim sectionNo As Integer
Dim wraphold As Long
Dim shp As Shape
  If Selection.InlineShapes.Count > 0 Then
    ' #############
  End If
  If inShape Then ' ********* shape *********************
    If Selection.ShapeRange.Count = 0 Then
      LoadValues (1)
      Exit Sub
    End If
    If AnchorsForm.InLineTextButton.Value Then
      
      With Selection
      .Cut
      .MoveLeft unit:=wdCharacter, Count:=-p
      .Paste
      .MoveLeft unit:=wdCharacter, Count:=1, Extend:=wdExtend
      End With
      Exit Sub
    End If
    If dualShape Then Exit Sub
 '   On Error Resume Next ' sometimes dualshape test does not work
    AnchorsForm.HorizOtherButton.Value = True ' if not set then forces reset of horiz position
    Selection.ShapeRange(1).IncrementLeft (p) ' neg moves to right
    DoEvents
  '  refresh (1)
    On Error GoTo 0
    Set shp = Selection.ShapeRange(1)
    'Selection.ShapeRange(1).Anchor.Paragraphs(1).Range.Select
    resetSelection
  '  ChangeShapeWrapping (-2)
  '  shp.Select
    Call ShowOffsets(shp.Top, shp.Left)
    
    Exit Sub
  End If
    
End Sub

Private Sub resetSelection() ' keeps selection of shape
Dim j As Long
  With AnchorsForm
       If .FrontofTextButton.Value Then Selection.ShapeRange.WrapFormat.Type = wdWrapNone
       If .BehindTextButton.Value Then j = wdWrapBehind
       If .SquareButton.Value Then j = wdWrapSquare  ' =0 default
       If .TightButton.Value Then j = wdWrapTight
       If .TopandBottomButton.Value Then j = wdWrapTopBottom
       If .InLineWithTextButton.Value Then j = wdWrapThrough  ' text around shape !!!!!
       If .InLineTextButton Then j = wdWrapInline
      Selection.ShapeRange.WrapFormat.Type = j
  End With
End Sub
Sub MoveDownPoint(p As Single) ' **************** move down ***********
Dim wraphold As Long
Dim shp As Shape
Dim WrapTypeHold As Boolean
  If Selection.InlineShapes.Count > 0 Then
    ' ###########InlineConvert
  End If
  If inShape Then ' ************* shape *******************
    If Selection.ShapeRange.Count < 1 Then
      LoadValues (1)
      Exit Sub
    End If
    If dualShape Then Exit Sub
    On Error Resume Next
    AnchorsForm.VertOtherButton.Value = True ' if not set then forces reset of vert position
    Selection.ShapeRange.IncrementTop (p) ' neg moves up
    DoEvents
    Set shp = Selection.ShapeRange(1)
    resetSelection
 '   Selection.ShapeRange(1).Anchor.Paragraphs(1).Range.Select
 '   shp.Select
    Call ShowOffsets(shp.Top, shp.Left)
'    refresh (1)
 'Killtime
   ' LoadValues (1)
   ' Selection.ShapeRange(1).Select
    On Error GoTo 0
    Exit Sub
 
  End If
End Sub

Sub SetDistanceFromText(n As Long)
 If inShape Then
   If Selection.ShapeRange.Count = 0 Then
     LoadValues (1)
     Exit Sub
   End If
   ' ******************
  With Selection.ShapeRange.WrapFormat
    If IsNumeric(AnchorsForm.DistTop.Value) Then
      .DistanceTop = (Val(AnchorsForm.DistTop.Value))
    Else
      AnchorsForm.DistTop.Value = (.DistanceTop)
    End If
    If IsNumeric(AnchorsForm.DistBottom.Value) Then
      .DistanceBottom = (Val(AnchorsForm.DistBottom.Value))
    Else
      AnchorsForm.DistBottom.Value = (.DistanceBottom)
    End If
    If IsNumeric(AnchorsForm.DistLeft.Value) Then
      .DistanceLeft = (Val(AnchorsForm.DistLeft.Value))
    Else
      AnchorsForm.DistLeft.Value = (.DistanceLeft)
    End If
    If IsNumeric(AnchorsForm.DistRight.Value) Then
      .DistanceRight = (Val(AnchorsForm.DistRight.Value))
    Else
      AnchorsForm.DistRight.Value = (.DistanceRight)
    End If
  End With
 Else ' ****** table ************
  
 End If
  LoadValues (1)
End Sub


'Function anchorsN() As Long ' number of shapes hanging off anchor
'Dim anRange As Range
'  Set anRange = Selection.Range 'ShapeRange(1).Anchor
'  anRange.MoveEnd unit:=wdCharacter
'  anchorsN = anRange.ShapeRange.Count
'End Function

Sub GetNextShapeNEW(isForward As Boolean)
Dim aAnchor As Range
Dim aShape As Shape
Dim k As Long
Dim j As Long
Dim aShapeName As String
Dim aStory As Range
Dim aInlineShape As InlineShape
  If Application.Version < 14 Then
    MsgBox "This macro will only run in Word 2010 or higher"
    Exit Sub
  End If
  If Val(ActiveDocument.CompatibilityMode) < 14 Then 'Val(Application.Version) Then
      MsgBox "WARNING. Document was created in an earlier version of Word and search for next shape may not work." & _
      vbCrLf & vbCrLf & "If necessary advance to the next shape manually, then click Refresh." & vbCrLf & _
      vbCrLf & "Consider converting to latest file format as compatibility mode has many bugs"
  End If

  aShapeName = "$&$&"
  If Selection.ShapeRange.Count > 0 Then
    ' Check if there are several at the same anchor
    Set aShape = Selection.ShapeRange(1)
    aShapeName = aShape.Name
    Set aAnchor = aShape.Anchor
aAnchor.Select
    aAnchor.MoveStart unit:=wdCharacter, Count:=-1
    aAnchor.MoveEnd unit:=wdCharacter, Count:=1
    k = aAnchor.ShapeRange.Count  ' k=number of shapes at anchor
   
    Set aAnchor = aShape.Anchor
aAnchor.Select
    aAnchor.MoveStart unit:=wdCharacter, Count:=-1
    j = aAnchor.ShapeRange.Count  ' j= posn of shape at anchor
    
    If (isForward And j < k) Or (Not isForward And j <> 1) Then
   ' If j <> 1 Then ' ***************
      Set aAnchor = aShape.Anchor
      aAnchor.MoveStart unit:=wdCharacter, Count:=-1
      aAnchor.MoveEnd unit:=wdCharacter, Count:=1
      If isForward Then
        Set aShape = aAnchor.ShapeRange(j + 1)
      Else
        Set aShape = aAnchor.ShapeRange(j - 1)
      End If
      Selection.Collapse
      aShape.Select
      Exit Sub
    Else ' current shape is the last at the anchor
      If isForward Then
  '      Selection.MoveStart unit:=wdCharacter
      Else
        Selection.MoveStart unit:=wdCharacter, Count:=-1
        Selection.Collapse Direction:=wdCollapseStart
      End If
    End If
  Else
   ' aShapeName = Selection.Range.InlineShapes(1).Name ' *** inlineshape does not have a name ***
  End If
   
  Application.Browser.Target = wdBrowseGraphic
  If isForward Then
    Application.Browser.Next
    
  Else
    Application.Browser.Previous
  End If
  
  Selection.MoveStart unit:=wdCharacter, Count:=-1
  Selection.MoveStart unit:=wdCharacter
  Selection.MoveEnd unit:=wdCharacter, Count:=1 ' ********

  j = Selection.Range.InlineShapes.Count
  k = Selection.Range.ShapeRange.Count
  
  If j = 0 And k = 0 Then
    If Not isForward Then
      MsgBox "No previous shapes"
    Else
      If Selection.StoryType <> 1 Then
        MsgBox "Can only advance to next shape if in main story"
      Else
        MsgBox "No shapes beyond this point"
      End If
    End If
    Exit Sub
  End If

  If j > 0 Then
    Set aInlineShape = Selection.Range.InlineShapes(1)
    Selection.Collapse
    aInlineShape.Select
  Else
    If isForward Then
      Set aShape = Selection.Range.ShapeRange(1)
    Else
      Set aShape = Selection.Range.ShapeRange(k)
    End If
    Selection.Collapse
    aShape.Select
  End If

  If isForward Then
    If k > 0 Then
 '     If aShapeName = aShape.Name Then _
 '       MsgBox "No more shapes beyond this point"
    End If
  Else
    If j > 0 Then
  '    If aShapeName = aInlineShape.Name Then _
  '      MsgBox "No more shapes"
    End If
  End If
  
End Sub

Sub GetNextShape(isNext As Boolean)
Dim aRange As Range
Dim shp As Shape
Dim j As Long
Dim k As Long
Dim mS As Long
Dim mSS As Long
Dim mI As Long
Dim kS As Long
Dim kA As Long
Dim kB As Long
Dim chld As Long
  With Selection
    mI = .InlineShapes.Count
    If mI > 0 Then
      If isNext Then
        Selection.MoveEnd unit:=wdCharacter, Count:=1
        Selection.Start = Selection.End
      Else
        Selection.MoveStart unit:=wdCharacter, Count:=-1
        Selection.End = Selection.Start
      End If
      GoTo R1
    End If
    mSS = .ShapeRange.Count ' will have ms=0 and mss=1 if text in textbox selected
    mS = .Range.ShapeRange.Count ' 0 if body text
   
    kS = .Type '7 if canvas, 8=shape, 1= body text, else anything
    chld = .ChildShapeRange.Count ' 0 if body text, multiple shapes or canvas frame, else 1
  '  kS = .Range.Characters.Count ' =1 if only shape is selected and no text
    
    If kS <> 7 And kS <> 8 And (Not (mS = 0 And mSS > 0)) Then ' no shapes in selection -------------
    
    
    ' if in textframe then ks will be > 1 ???????????????????????????????
'    If ((mS = 0 And mI = 0) Or kS > 1 Or mS > 1 Or mI > 1) And chld = 0 Then ' no shapes in selection
      kA = 1
      kB = 1
      If isNext Then
        .Collapse Direction:=wdCollapseStart
      Else
        .Collapse Direction:=wdCollapseEnd
      End If
      
    Else ' ---- there is a shape in current selection -----------------------
      If mI > 0 Then GoTo R1 ' inline shape, advance to next
      Set shp = Selection.ShapeRange(1)
'  shp.Select dont activate this
      j = shp.Type  ' 20=canvas, 6=group
 
      If j = 20 Or j = 6 Then ' ------ group or canvas --------------
        k = 0
         ' if group or canvas frame is selected then childshape is in error
        k = GroupCanvas(j, isNext)
        If k = 0 Then ' are at end (or beginning) of group/canvas get next
          Selection.ShapeRange(1).Select ' select canvas or group
          Selection.MoveStart unit:=wdCharacter, Count:=2
          GoTo R1
        End If
       ' Selection.ShapeRange(1).Select
       
        GoTo R2
      End If
    End If
     
R1:
GetNextShapeNEW (isNext)
R2:
  inShape = True
  LoadValues (1)
  End With ' Selection
End Sub

Function GroupCanvas(j As Long, isNext As Boolean) As Long  ' check where current selection is inside group/canvas
Dim k As Long
Dim m As Long
Dim gcount As Long
Dim thisShpName As String
Dim grpShps As GroupShapes
Dim canShps As CanvasShapes

  GroupCanvas = 0
  m = 1
    
  If Not isNext Then m = -1
  If j = 6 Then ' ----------- group ------------
    thisShpName = ""
    If Selection.ChildShapeRange.Count > 0 Then ' if inside group
      thisShpName = Selection.ChildShapeRange(1).Name
    End If
    
    Set grpShps = Selection.ShapeRange.GroupItems
    gcount = grpShps.Count
    For k = 1 To gcount
      If thisShpName = grpShps(k).Name Then
        k = k + m
        If k > gcount Or k < 1 Then
          k = 0
        Else
  
 ' Selection.ShapeRange(1).Select
          grpShps(k).Select ' ????????????
 '           ActiveWindow.ActivePane.LargeScroll Down:=-1

        End If
        GroupCanvas = k
        Exit Function
      End If
    Next k
    k = 1 ' if cannot match name then enter group, select first or last
    If Not isNext Then k = gcount
    grpShps(k).Select ' ????????????????
'    Selection.ShapeRange.GroupItems(k).Select
    
  Else ' --------------------- canvas --------------
    Set canShps = Selection.ShapeRange.CanvasItems
    gcount = canShps.Count
    
    k = Selection.ChildShapeRange.Count
    If k = 0 Then
      GoTo CC ' selection is in canvas frame
    End If
    thisShpName = Selection.ChildShapeRange(1).Name
 
    For k = 1 To gcount
      If thisShpName = canShps(k).Name Then
        k = k + m
        If k > gcount Or k < 1 Then
          k = 0
        Else
          canShps(k).Select
         
        End If
        GroupCanvas = k
        Exit Function
      End If
    Next k
CC:
    If isNext Then
      k = 1
    Else
      k = gcount
    End If
    canShps(k).Select
  End If
  GroupCanvas = k
End Function



Private Sub showPrintview()
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
    ActiveWindow.ActivePane.View.Type = wdPrintView
  Else
    ActiveWindow.View.Type = wdPrintView
  End If
End Sub

Sub ChangeWrapping(Wrapcode As Long)
Dim shpr As Range
Dim shp As ShapeRange
  If InhibitClick Then Exit Sub ' otherwise will give an endless loop
  If inShape Then
  '  Set shp = Selection.ShapeRange '(1) ' ?????????
    ChangeShapeWrapping (Wrapcode)
  Else

    Exit Sub
  End If
  'Set sHp = Selection.Range

'  shp.Select
'  Selection.ShapeRange(1).Anchor.Paragraphs(1).Range.Select
 
 ' sHp.Visible = True
 ' shp.Select
  Application.ActiveWindow.ScrollIntoView Selection.Range
  'ActiveWindow.ActivePane.SmallScroll up:=-1
'  On Error Resume Next ' some shapes raise an error if rotated
'  Selection.Range.ShapeRange(1).Select
'  Selection.ShapeRange(1).IncrementRotation 0
'  On Error GoTo 0
  
End Sub
Sub SetOverlap(n As Long)
  On Error Resume Next
  If inShape Then
   Selection.ShapeRange.WrapFormat.AllowOverlap = AnchorsForm.AllowOverlapCheckbox.Value
  Else
    Selection.Tables(1).Rows.AllowOverlap = AnchorsForm.AllowOverlapCheckbox.Value
    Selection.Tables(1).Rows.WrapAroundText = True
  End If
  On Error GoTo 0
End Sub

Sub ChangeShapeWrapping(Wrapcode As Long)
' -1 for behind, -2 =Infront 0=Square, 1=Tight, 2=Around, 4- Top/Bottom
'msoBringForward, msoBringInFrontOfText, msoBringToFront, msoSendBackward, msoSendBehindText, or msoSendToBack.
  On Error Resume Next
  If Wrapcode < 0 Then
   '   Selection.ShapeRange.ZOrder 6 + Wrapcode
   ' Selection.ShapeRange.WrapFormat.Type = wdWrapNone ' should be 3
    If Wrapcode = -1 Then Selection.ShapeRange.WrapFormat.Type = wdWrapBehind
    If Wrapcode = -2 Then Selection.ShapeRange.WrapFormat.Type = wdWrapFront
  Else
  '  Selection.ShapeRange.ZOrder 0
    Selection.ShapeRange(1).WrapFormat.Type = Wrapcode
  End If
  On Error GoTo 0
End Sub

Private Sub showCounts()
Dim j As Long, k As Long
Dim aShape As Shape
  j = 0
  k = 0
  On Error Resume Next
  For Each aShape In ActiveDocument.Shapes
    If aShape.Type = msoCanvas Then k = k + 1
    If aShape.Type = msoGroup Then j = j + 1
  Next aShape
  On Error GoTo 0
  With AnchorsForm
    .TableCountLabel.Caption = Str(ActiveDocument.Tables.Count) & " tables in document"
  '  .ShapeCountLabel.Caption = Str(ActiveDocument.Shapes.Count) & " floating shapes in doc"
    .ShapeCountLabel.Caption = Str(CountFloatingShapes) & " floating shapes in doc"
'    .InlineShapeCountLabel.Caption = Str(ActiveDocument.InlineShapes.Count) & " inline shapes in doc"
    .InlineShapeCountLabel.Caption = Str(CountInlineShapes) & " inline shapes in doc"
    .GroupCanvasLabel.Caption = Str(j) & " Groups  " & Str(k) & " Canvases"
  End With
End Sub

Function CountFloatingShapes() As Long
Dim k As Long
Dim aSection As Section
' dont need to do for each header/footer. Section by section ?????
  k = ActiveDocument.Shapes.Count
  Set aSection = ActiveDocument.Sections(1)
  k = k + aSection.Headers(wdHeaderFooterPrimary).Shapes.Count
  CountFloatingShapes = k
End Function

Function CountInlineShapes() As Long
Dim k As Long
Dim aSection As Section
  k = ActiveDocument.InlineShapes.Count
  k = 0
  For Each aSection In ActiveDocument.Sections
    k = k + aSection.Range.InlineShapes.Count
    k = k + aSection.Headers(wdHeaderFooterPrimary).Range.InlineShapes.Count
    k = k + aSection.Headers(wdHeaderFooterFirstPage).Range.InlineShapes.Count
    k = k + aSection.Headers(wdHeaderFooterEvenPages).Range.InlineShapes.Count
    k = k + aSection.Footers(wdHeaderFooterPrimary).Range.InlineShapes.Count
    k = k + aSection.Footers(wdHeaderFooterFirstPage).Range.InlineShapes.Count
    k = k + aSection.Footers(wdHeaderFooterEvenPages).Range.InlineShapes.Count
  Next aSection
  CountInlineShapes = k
End Function

Sub MoveOnChar(charon As Boolean)
Dim n As Long
  On Error GoTo Merr
  With Selection
    If .InlineShapes.Count <> 1 Then Exit Sub ' ??? for shape in line
    If charon Then
      n = -1
    Else
      n = 1
    End If
    .InlineShapes(1).Select
    .Cut
    .MoveLeft unit:=wdCharacter, Count:=n
    .Paste
    .MoveLeft unit:=wdCharacter, Count:=1, Extend:=wdExtend
  End With
Merr:
  On Error GoTo 0
  MsgBox "Command not available"
End Sub
Sub MoveLineUp(lineup As Boolean)
Dim n As Long
  On Error GoTo Merr
  With Selection
    If .InlineShapes.Count <> 1 Then Exit Sub
    If lineup Then
      n = 1
    Else
      n = -1
    End If
    .InlineShapes(1).Select
    .Cut
    .MoveUp unit:=wdLine, Count:=n
    .Paste
    .MoveLeft unit:=wdCharacter, Count:=1, Extend:=wdExtend
  End With
  Exit Sub
Merr:
  On Error GoTo 0
  MsgBox "Command not available"
End Sub

Sub Group_Shapes(n As Long)
Dim aRange As Range
Dim timeStart
  timeStart = Timer
  Set aRange = Selection.Range
  If aRange.ShapeRange.Count < 2 Then
    MsgBox "ERROR: Need 2 or more shapes non inline shapes in order to group"
    Exit Sub
  End If
  On Error GoTo Gerr2
  aRange.ShapeRange.Group
  timeStart = Timer
  Do While Timer < timeStart + 1 ' pause necessary to allow Word to group and display
    DoEvents
  Loop
  If MsgBox("Confirm the grouping of these shapes?" & vbCr & vbCr & _
             "Note: inline shapes cannot be included", vbYesNo) = vbNo Then
     aRange.ShapeRange.Ungroup
     aRange.Select
     LoadValues (1)
     Exit Sub
  End If
  On Error GoTo 0
  LoadValues (1)
  Exit Sub
Gerr2:
  MsgBox "Cannot group this selection"
End Sub
Sub ungroupShapes(n As Long)
  If Selection.ShapeRange.Count < 1 Then
    MsgBox "No shape has been selected"
    GoTo uErr
  End If
  If Selection.ShapeRange(1).Type <> msoGroup Then
    MsgBox "A group shape has not been selected"
    GoTo uErr
  End If
  
  On Error Resume Next
  Selection.ShapeRange(1).Ungroup

uErr:
  LoadValues (1)
 ' Selection.Range.Select
End Sub

Sub RotateShape(Degrees As Single)
Dim shp As Shape
Dim sCountR As Long
Dim sCountS As Long
  If Selection.InlineShapes.Count > 0 Then   ' inline *****
   On Error GoTo ierr ' some OLE shapes will raise error
    Set shp = Selection.InlineShapes(1).ConvertToShape
    shp.Select
    If Degrees = 0 Then
      shp.Rotation = Degrees
    Else
      shp.IncrementRotation Degrees
    End If
    displayRotation (shp.Rotation)
    shp.WrapFormat.Type = wdWrapInline
ierr:
    Exit Sub
  End If

  sCountS = Selection.ShapeRange.Count
  sCountR = Selection.Range.ShapeRange.Count
  If sCountS + sCountR = 0 Then
     MsgBox "No shape in selection"
     Exit Sub
  End If
  If sCountS > 0 Then
    Set shp = Selection.ShapeRange(1)
  Else
    Set shp = Selection.Range.ShapeRange(1)
  End If
  shp.Select
  Selection.Range.Select
  
  If (Val(Application.Version) < 14 And shp.Type = msoTextBox) Or _
     shp.Type = msoChart Then
     MsgBox "Cannot rotate shape"
     Exit Sub
  End If
  On Error Resume Next
  If Degrees = 0 Then
    shp.Rotation = Degrees
  Else
    shp.IncrementRotation Degrees
  End If
  On Error GoTo 0
  shp.Select
  displayRotation (shp.Rotation)
End Sub

Private Sub displayRotation(shpr As Single)
Dim s As String
  If shpr = 999 Then
    s = "Rotation"
  Else
    s = "Rotation              " & Str(Round(shpr)) & " degrees"
  End If
  AnchorsForm.RotationFrame.Caption = s
End Sub

Private Sub ShowOffsets(ByVal tp As Single, ByVal lft As Single)
Dim vs As String
Dim hs As String
   If Abs(tp) > 90000 Then
     Select Case tp
       Case -999999
         vs = "Top"
       Case -999997
         vs = "Bottom"
       Case -999995
         vs = "Centre"
       Case Else
         vs = ""
     End Select
   Else
     vs = "Offset " & Str(Round(PointsToCentimeters(tp), 2)) & " cm"
   End If
   
   If Abs(lft) > 90000 Then
     Select Case lft
       Case -999998
         hs = "Left"
       Case -999996
         hs = "Right"
       Case -999995
         hs = "Centre"
     Case Else
       hs = ""
     End Select
   Else
     hs = "Offset " & Str(Round(PointsToCentimeters(lft), 2)) & " cm"
   End If

    AnchorsForm.HorizOffsetLabel.Caption = hs '"Offset " '& _
   '   Round(PointsToCentimeters(lft), 2) & " cm"
   AnchorsForm.VertOffsetLabel.Caption = vs '"Offset " & _
      'Round(PointsToCentimeters(tp), 2) & " cm"
End Sub
Sub ToInlineShape(n As Long)
  If Selection.ShapeRange.Count > 0 Then
    On Error Resume Next
    Selection.ShapeRange(1).ConvertToInlineShape
    On Error GoTo 0
    LoadValues (1)
  End If
End Sub
Sub changePicParms(n As Long)
Dim shp As Shape
Dim ishp As InlineShape
Dim br As Single
Dim cr As Single
  With AnchorsForm
    If IsNumeric(.BrightnessTextbox.Value) Then
      br = Val(.BrightnessTextbox.Value)
    Else
      GoTo nErr
    End If
    If IsNumeric(.ContrastTextbox.Value) Then
      cr = AnchorsForm.ContrastTextbox.Value
    Else
      GoTo nErr
    End If
  End With
  If br > 1 Or cr > 1 Or br < 0 Or cr < 0 Then GoTo nErr
  On Error GoTo PP1
  If Selection.ShapeRange.Count > 0 Then
    Set shp = Selection.ShapeRange(1)
    shp.PictureFormat.Brightness = br
    shp.PictureFormat.Contrast = cr
  End If
PP1:
  On Error GoTo PP2
  If Selection.InlineShapes.Count > 0 Then
    Set ishp = Selection.InlineShapes(1)
    ishp.PictureFormat.Brightness = br
    ishp.PictureFormat.Contrast = cr
  End If
PP2:
  On Error GoTo 0
  Refresh (1)
  Exit Sub
nErr:
  MsgBox "Error in brightness or contrast values. Must be between 0 and 1"
End Sub

Sub CompressPicture(n As Long)

  On Error GoTo err1

  With Selection
    If .InlineShapes.Count = 0 Then
      MsgBox "No inline shape selected"
      Exit Sub
    End If
  '  If .ShapeRange.Count > 0 Then
  '    If .ShapeRange(1).Type <> msoPicture Then
  '      MsgBox "Shape selected is not a picture"
  '      Exit Sub
  '    End If
  '  End If
    If .InlineShapes.Count > 0 Then
      If .InlineShapes(1).Type <> wdInlineShapePicture Then
        MsgBox "Inlineshape is not a picture"
        Exit Sub
      End If
    End If
    CommandBars.ExecuteMso "PicturesCompress" ' must have picture selected ???
  End With
  Exit Sub
err1:
  MsgBox "Cannot do this operation on the shape"
End Sub

Sub CompressPics(n As Long) ' Alternative to above
'To look for the control's ID, you can download the help files from Microsoft Download Center:
'Office 2010 Help Files: Office Fluent User Interface Control Identifiers
'Policy ID of "PicturesCompress" is 6382.
    With Application.CommandBars.FindControl(ID:=6382)
        SendKeys "%A%W{Enter}"
        .Execute
    End With
End Sub

Sub InlineOffset(n As Long)
Dim ishp As InlineShape
  On Error GoTo ierr
  n = Val(AnchorsForm.OffsetTextbox.Value)
  Set ishp = Selection.InlineShapes(1)
 ' ishp.Select
  ishp.Range.Font.Position = n
  ishp.Select
  Exit Sub
ierr:
  MsgBox "Invalid offset"
End Sub
Attribute VB_Name = "ResizeForm"
Attribute VB_Base = "0{EFD1C3F6-4721-43CD-A404-E85F280065C1}{51EDE13F-977C-4A4C-B197-30443246850E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub ResizeButton_Click()
  GOResizeShape (1)
End Sub

Private Sub CancelButton_Click()
  ResizeForm.hide
End Sub

Private Sub CurrentOption_Click()
  SetOptions (False)
End Sub

Private Sub OriginalOption_Click()
  SetOptions (False)
End Sub
Private Sub ActualOption_Click()
  SetOptions (True)
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub VisibleCheckbox_Click()
 changeVisible (ResizeForm.VisibleCheckbox.Value)
End Sub
Attribute VB_Name = "ResizeModule"
Option Explicit

Sub ResizeShape(n As Long)
  ResizeForm.Show
  ResizeForm.OriginalOption.Value = True
  SetOptions (False)
  setCurrentSize (1)
End Sub


Sub GOResizeShape(n As Long)
Dim aShape As Shape
Dim aInlineShape As InlineShape
Dim factor As Single
Dim originalShape As Boolean
Dim scaleFrom As Long
Dim h As Single
Dim w As Single
  setCurrentSize (1)
  If ResizeForm.CurrentSizeLabel = "No shape selected" Then
    MsgBox "Select a shape or picture and run again"
    Exit Sub
  End If
  factor = Val(ResizeForm.ResizePercentTextbox.Value)
  originalShape = False
  If ResizeForm.OriginalOption Then originalShape = True
  If ResizeForm.ActualOption Then
    h = CentimetersToPoints(getVal(ResizeForm.HeightTextbox))
    w = CentimetersToPoints(getVal(ResizeForm.WidthTextbox))
    If h = 0 Or w = 0 Then
       MsgBox "Invalid number"
       Exit Sub
    End If
  End If
  If Selection.Range.ShapeRange.Count > 0 Then
     Set aShape = Selection.Range.ShapeRange(1)
     With aShape
       .Select
       If ResizeForm.KeepAspectCheckbox Then
         .LockAspectRatio = True
       Else
         .LockAspectRatio = False
       End If

       If ResizeForm.ScaleBottomOption Then scaleFrom = msoScaleFromBottomRight
       If ResizeForm.ScaleMiddleOption Then scaleFrom = msoScaleFromMiddle
       If ResizeForm.ScaleTopOption Then scaleFrom = msoScaleFromTopLeft
       If ResizeForm.ActualOption Then
          .Height = h
          .Width = w
       Else
         Selection.ShapeRange.ScaleWidth factor / 100, originalShape, scaleFrom
         If Not .LockAspectRatio Then
           Selection.ShapeRange.ScaleHeight factor / 100, originalShape, scaleFrom
         End If
       End If
     End With
  Else ' ********* Inline shapes ************
    If Selection.Range.InlineShapes.Count > 0 Then
      Set aInlineShape = Selection.Range.InlineShapes(1)
   '  With aInlineShape
        If ResizeForm.KeepAspectCheckbox Then
         aInlineShape.LockAspectRatio = True
       Else
         aInlineShape.LockAspectRatio = False
       End If
     
      If ResizeForm.OriginalOption Then
          aInlineShape.ScaleHeight = factor
          If Not aInlineShape.LockAspectRatio Then aInlineShape.ScaleWidth = factor
      Else
        If ResizeForm.ActualOption Then
          aInlineShape.Height = h
          If Not aInlineShape.LockAspectRatio Then
            aInlineShape.Width = w
          End If
        Else
          aInlineShape.LockAspectRatio = True
          aInlineShape.Width = factor / 100 * aInlineShape.Width
        End If
      End If
    Else
      MsgBox "No shape selected"
      Exit Sub
    End If
  End If
  setCurrentSize (1)
End Sub

Function getVal(a As String) As Single
Dim g As Single
  If Not IsNumeric(a) Then
    g = 0
  Else
    g = Val(a)
  End If
  If g < 0 Then
    getVal = 0
  Else
    getVal = g
  End If
End Function

Sub setCurrentSize(n As Long)
Dim aShape As Shape
Dim aInlineShape As InlineShape
Dim shapeTypeText As String
Dim ht As Single
Dim wt As Single
 With ResizeForm
  shapeTypeText = "Shape is not a picture"
  If Selection.Range.ShapeRange.Count > 0 Then
     Set aShape = Selection.Range.ShapeRange(1)
     wt = Str(Round(PointsToCentimeters(aShape.Width), 2))
     ht = Str(Round(PointsToCentimeters(aShape.Height), 2))
     If aShape.Visible = True Then .VisibleCheckbox.Value = True Else .VisibleCheckbox.Value = False
     .VisibleCheckbox.Enabled = True
     .CurrentSizeLabel = "Current size (cm) = " & wt & "w x " & ht & "h"
     If aShape.Type = msoPicture Then shapeTypeText = "Shape is a floating picture"
  Else
    If Selection.Range.InlineShapes.Count > 0 Then
      Set aInlineShape = Selection.Range.InlineShapes(1)
      wt = Str(Round(PointsToCentimeters(aInlineShape.Width), 2))
      ht = Str(Round(PointsToCentimeters(aInlineShape.Height), 2))
      .VisibleCheckbox.Enabled = False
      .CurrentSizeLabel = "Current size (cm) = " & wt & "w x " & ht & "h"
      If aInlineShape.Type = wdInlineShapePicture Then shapeTypeText = "Shape is an inline picture"
    Else
      .CurrentSizeLabel = "No shape selected"
      Exit Sub
    End If
  End If
  .TypeLabel = shapeTypeText
  If InStr(shapeTypeText, "is not") > 0 Then
    If .OriginalOption Then .CurrentOption = True
    .OriginalOption.Enabled = False
  Else
    .OriginalOption.Enabled = True
  End If
  If Trim(.HeightTextbox.Value) = "" Then .HeightTextbox.Value = ht
  If Trim(.WidthTextbox.Value) = "" Then .WidthTextbox.Value = wt
 
 End With
End Sub

Sub SetOptions(x As Boolean)
  With ResizeForm
    .PercentLabel.Enabled = Not x
    .ResizePercentTextbox.Enabled = Not x
    .HeightLabel.Enabled = x
    .WidthLabel.Enabled = x
    If Not x Then
     .KeepAspectCheckbox.Value = True
     .KeepAspectCheckbox.Enabled = False
   Else
     .KeepAspectCheckbox.Enabled = True
   End If
  End With
 ' setCurrentSize (1)
End Sub

Sub changeVisible(vb As Boolean)
Dim aShape As Shape
  If Selection.Range.ShapeRange.Count > 0 Then
    Selection.Range.ShapeRange(1).Visible = ResizeForm.VisibleCheckbox.Value
    ' *** making invisible changes selection to nothing ******
    If Selection.Range.ShapeRange.Count < 1 Then Selection.MoveEnd
  End If
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment
#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
#Else
' ***** "32 bit version *****
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
#End If

Const PixelX = 88
Const PixelY = 90
Const TwipsPerInch = 1440
Private Const FullScreenX = 16 ' also 0 gives overall screenwidth
Private Const FullScreenY = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, PixelX)
    YPixelsPerInch = GetDeviceCaps(hDC, PixelY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TwipsPerInch / 20 / XPixelsPerInch
    y = y * TwipsPerInch / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(FullScreenX)
 ht = GetSystemMetrics(FullScreenY)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub
 



INQUEST-PP=macro
