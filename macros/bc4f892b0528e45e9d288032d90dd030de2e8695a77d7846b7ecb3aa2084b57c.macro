Attribute VB_Name = "Class1"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'  Created on  20171016 by SGD
Private iStartrow As Integer
Private iLastCol As Integer
Private iOrderNum As Integer
    Private iCustomer As Integer
    Private iOrigDate As Integer
    Private iOrigCity As Integer
    Private iOrigState As Integer
    Private iOrigZip As Integer
    Private iDestDate As Integer
    Private iDestCity As Integer
    Private iDestState As Integer
    Private iDestZip As Integer
    Private iRates As Integer
    Private iMiles As Integer

Public Sub RunReport(ByRef ws As Worksheet)
  Dim bValidData As Boolean
  Dim iBlankCount As Integer
  Dim i As Integer
  Dim wsName As String
  Dim wsOrder As String
  iBlankCount = 0
  
  wsName = ws.Name
  If ws.Cells(1, "V").Value = "OUTPUT" Then
    ws.Cells(1, 1).Value = "INPUT"
  End If
  
  bValidData = True
  iStartrow = GetStartingRow(ws)
  i = iStartrow
  GetColumnPositions ws

  While bValidData
    wsOrder = ws.Cells(i, iOrderNum).Value
    If ws.Cells(i, iOrderNum).Value <> "" Then
      If Not FillInData(ws, i, ws.Cells(i, iOrderNum).Value) Then
        MsgBox "Oops!"
      End If
      iBlankCount = 0
    Else
      If ws.Cells(i, iCustomer).Value = "" And _
         ws.Cells(i, iDestDate).Value = "" And _
         ws.Cells(i, iOrigDate).Value = "" Then
        iBlankCount = iBlankCount + 1
        If iBlankCount > 18 Then
          bValidData = False
        End If
      Else
        iBlankCount = 0
      End If
    End If
    i = i + 1
  Wend
  
End Sub

Private Function BuildQueryParameters(ByRef ws As Worksheet, _
                                      ByVal StartRow As Integer) As String
  Dim bValidData As Boolean
  Dim bFirst As Boolean
  Dim i As Integer
  Dim s As String
  
  bFirst = True
  i = StartRow + 1
  While bValidData
    If ws.Cells(i, iOrderNum).Value <> "" Then
      If (ws.Cells(i, iCustomer).Value = Empty Or _
          ws.Cells(i, iCustomer).Value = "") Then
        If bFirst Then
          s = ws.Cells(i, iOrderNum).Value
        Else
          s = s + "," + ws.Cells(i, iOrderNum).Value
        End If
      End If
    Else
      bValidData = False
    End If
    i = i + 1
  Wend
  
End Function

Private Function GetStartingRow(ByRef ws As Worksheet) As Integer
  Dim iRow As Integer
  Dim bInvalidRow As Boolean
  
  bInvalidRow = True
  iRow = 6
  Do While bInvalidRow
    If ws.Cells(iRow, 1).Value <> "" And _
       ws.Cells(iRow, 1).Value <> Empty And _
       ws.Cells(iRow, 2).Value = "" Then
      bInvalidRow = False
      Exit Do
    Else
      iRow = iRow + 1
      If iRow > 100 Then
        iRow = 1
        Exit Do
      End If
    End If
  Loop
  
  GetStartingRow = iRow
End Function

Private Sub GetColumnPositions(ByRef ws As Worksheet)
  
  iOrderNum = FindColumn("ORDER #", ws)
  iCustomer = FindColumn("Customer", ws)
  iOrigDate = FindColumn("Origin Date", ws)
  iDestDate = FindColumn("Destination Date", ws)
  iOrigCity = FindColumn("Origin City", ws)
  iOrigState = FindColumn("Origin State", ws)
  iOrigZip = FindColumn("Origin Zip", ws)
  iDestCity = FindColumn("Destination City", ws)
  iDestState = FindColumn("Destination State", ws)
  iDestZip = FindColumn("Destination Zip", ws)
  iMiles = FindColumn("Miles", ws)
  iLastCol = FindLastColumn(ws)
End Sub

Private Function FindColumn(ByVal ColumnName As String, ByRef ws As Worksheet) As Integer
  Dim iCol As Integer
  Dim x As Integer
  Dim bValidCol As Boolean
  
  iCol = 0
  x = 1
  bValidCol = True
  
  Do While bValidCol
    If ws.Cells(5, x).Value <> "" And _
       ws.Cells(5, x).Value <> Empty Then
      If Trim(UCase(ws.Cells(5, x).Value)) = UCase(ColumnName) Then
        iCol = x
        Exit Do
      Else
        x = x + 1
      End If
    Else
      bValidCol = False
    End If
  Loop
  
  FindColumn = iCol
End Function

Private Function FindLastColumn(ByRef ws As Worksheet) As Integer
  Dim iCol As Integer
  Dim x As Integer
  Dim bValidCol As Boolean
  
  iCol = 0
  x = 1
  bValidCol = True
  
  While bValidCol
    If ws.Cells(5, x).Value = "" Or _
       ws.Cells(5, x).Value = Empty Then
      iCol = x - 1
      bValidCol = False
    Else
      x = x + 1
    End If
  Wend
  
  FindLastColumn = iCol
End Function

Private Function FillInData(ByRef ws As Worksheet, _
                            ByVal Row As Integer, _
                            ByVal OrderNo As String) As Boolean
  Dim oData As ADODB.Recordset
  Dim bRet As Boolean
  
  bRet = False
  Set oData = GetData(ws, OrderNo)
  
  If Not oData Is Nothing Then
    If Not oData.EOF Then
      ws.Cells(Row, iOrderNum).Value = oData("OrderNum")
      ws.Cells(Row, iCustomer).Value = oData("Shipper")
      ws.Cells(Row, iOrigDate).Value = Format(oData("OrigDate"), "mm/dd/yy hh:nn:ss")
      ws.Cells(Row, iDestDate).Value = Format(oData("DestDate"), "mm/dd/yy hh:nn:ss")
      
      ws.Cells(Row, iOrigCity).Value = oData("OrigCityName")
      ws.Cells(Row, iOrigState).Value = oData("OrigState")
      ws.Cells(Row, iOrigZip).Value = oData("OrigZip")
      
      ws.Cells(Row, iDestCity).Value = oData("DestCityName")
      ws.Cells(Row, iDestState).Value = oData("DestState")
      ws.Cells(Row, iDestZip).Value = oData("DestZip")
      
      ws.Cells(Row, iMiles).Value = oData("Miles")
      ws.Range(Cells(Row, 1), Cells(Row, 14)).Select
    
      Selection.Borders(xlDiagonalDown).LineStyle = xlNone
      Selection.Borders(xlDiagonalUp).LineStyle = xlNone
      With Selection.Borders(xlEdgeLeft)
          .LineStyle = xlContinuous
          .Weight = xlThin
          .ColorIndex = xlAutomatic
      End With
      With Selection.Borders(xlEdgeTop)
          .LineStyle = xlContinuous
          .Weight = xlThin
          .ColorIndex = xlAutomatic
      End With
      With Selection.Borders(xlEdgeBottom)
          .LineStyle = xlContinuous
          .Weight = xlThin
          .ColorIndex = xlAutomatic
      End With
      With Selection.Borders(xlEdgeRight)
          .LineStyle = xlContinuous
          .Weight = xlThin
          .ColorIndex = xlAutomatic
      End With
      With Selection.Borders(xlInsideVertical)
          .LineStyle = xlContinuous
          .Weight = xlThin
          .ColorIndex = xlAutomatic
      End With
    
    End If
  End If
  
  bRet = True
  
  FillInData = bRet
End Function

Private Function GetData(ByRef ws As Worksheet, _
                         ByVal OrdNums As String) As ADODB.Recordset
  Dim oData As ADODB.Recordset
  Dim oCmd As ADODB.Command
  Dim oCnn As ADODB.Connection
  Dim oPrm As ADODB.Parameter
  Dim sSource As String
  
  On Error GoTo GetData_EH
  
  sSource = "HDQ_PS_001"  ' -- ** Production Server ** --
  ' sSource = "HDQ-PSQA-001" ' -- ** Q/A Server ** --
  Set oCnn = New ADODB.Connection
  oCnn.ConnectionString = "Provider=SQLOLEDB;Data Source=" & sSource & ";Initial Catalog=PS;User ID=atlas_web_user;Password=;"
  oCnn.Open
  Set oCmd = New Command
  oCmd.ActiveConnection = oCnn
  oCmd.CommandText = "dbo.awg_sp_rpt_Excel_Available_Truckloads" '--** SQL Name
  'oCmd.CommandText = "dbo.awg_sp_rpt_Excel_Available_Truckloads_Logistics" '--** SQL Name Commented out 2019-10-01
  oCmd.CommandType = adCmdStoredProc
  oCmd.Parameters.Append oCmd.CreateParameter("@p_ordnum", adVarChar, adParamInput, 500, OrdNums)
  
  Set oData = New Recordset
  oData.CursorLocation = adUseClient
  oData.CursorType = adOpenStatic
  oData.LockType = adLockBatchOptimistic
  Set oData.Source = oCmd
  
  oData.Open
  Set oData.ActiveConnection = Nothing
  If oCnn.State = adStateOpen Then oCnn.Close
  
  Set GetData = oData
  
  Exit Function
GetData_EH:
  MsgBox "Error getting data: " + vbCrLf + _
         Err.Number + vbCrLf + _
         Err.Description
  Set GetData = Nothing
End Function

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Dim iOrderNum As Integer
Dim iCustomer As Integer

Dim iOrigDate As Integer
Dim iOrigCity As Integer
Dim iOrigState As Integer
Dim iOrigZip As Integer

Dim iDestDate As Integer
Dim iDestCity As Integer
Dim iDestState As Integer
Dim iDestZip As Integer

Dim iMiles As Integer

Dim iLastCol As Integer

Private Sub CommandButton1_Click()
  Dim asr As Class1
  Set asr = New Class1
  asr.RunReport Me
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
