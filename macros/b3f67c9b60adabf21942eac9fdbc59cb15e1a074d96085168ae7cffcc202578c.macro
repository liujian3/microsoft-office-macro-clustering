Attribute VB_Name = "CustomFunction"
Option Explicit

'Custom function to calculate MaxIfs (to support Excel 2007)
Public Function CustomMaxIfs(SumRange As Range, CriteriaRange As Range, Criteria As String) As Double

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim MaxValue As Integer
    
    MaxValue = 0
        
    If SumRange.Rows.Count = CriteriaRange.Rows.Count Then
        
        Dim i As Integer
        
        For i = 1 To SumRange.Rows.Count
            If CriteriaRange(i) = Criteria And SumRange(i) > MaxValue And SumRange(i) <> "" Then
                MaxValue = SumRange(i)
            End If
        Next
        
    End If
    
    CustomMaxIfs = MaxValue
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in CustomMaxIfs(): " & Err.Description
    
GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
End Function

Attribute VB_Name = "Initialize"
Option Explicit
Option Private Module

'Set to Manual Calculation
Sub ManualCal()
    
    On Error GoTo Errhandler

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    'Set Calculation to Manual
    Application.Calculation = xlCalculationManual

    GoTo GracefulExit

Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ManualCal(): " & Err.Description

GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Set Number Format based on Date Format from Quote Translation
Sub SetDateFormat()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim DateFormat As Range
    
    Set DateFormat = Range("QuoteTranslation.DateFormat").Offset(, 1)
    
    If DateFormat <> "" Then
        Dim DateRanges(0 To 6) As Range
        Dim i As Integer
        
        Set DateRanges(0) = Range("Summary.Date")
        Set DateRanges(1) = Range("RateCard.Date")
        Set DateRanges(2) = Range("RoadTax.Date")
        Set DateRanges(3) = Range("Marpol.Date")
        Set DateRanges(4) = Range("AdditionalInfo.Date")
        Set DateRanges(5) = Range("TC.Date")
        Set DateRanges(6) = Range("DSVInsuarance.Date")
        
        For i = LBound(DateRanges) To UBound(DateRanges)
            DateRanges(i).NumberFormat = DateFormat
        Next
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SetDateFormat(): " & Err.Description
    
GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Sort Usage Price Tier table
Sub SortUsagePriceTier()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim UsagePriceTierTable As Range
    Set UsagePriceTierTable = Range("UsagePriceTier.Table")
    
    If UsagePriceTierTable.Rows.Count > 2 Then
        Dim UsagePriceTierWS As Worksheet
        Dim SortRanges(0 To 1) As Range
        
        Set UsagePriceTierWS = Worksheets("Usage Price Tier")
        Set UsagePriceTierTable = UsagePriceTierTable.Resize(UsagePriceTierTable.Rows.Count - 2).Offset(1)
        Set SortRanges(0) = Range("UsagePriceTier.LineItemID")
        Set SortRanges(1) = Range("UsagePriceTier.StartValue")
        
        Call Utility.SortTable(UsagePriceTierWS, UsagePriceTierTable, SortRanges)
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SortUsagePriceTier(): " & Err.Description
    
GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Sort Line Item table
Sub SortLineItem()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim LineItemTable As Range
    Set LineItemTable = Range("LineItem.Table")
    
    If LineItemTable.Rows.Count > 2 Then
        Dim LineItemWS As Worksheet
        Dim SortRanges(0 To 1) As Range
        
        Set LineItemWS = Worksheets("Line Item")
        Set LineItemTable = LineItemTable.Resize(LineItemTable.Rows.Count - 2).Offset(1)
        Set SortRanges(0) = Range("LineItem.IsPrimaryLine")
        Set SortRanges(1) = Range("LineItem.RateCardName")
        
        Call Utility.SortTable(LineItemWS, LineItemTable, SortRanges)
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SortLineItem(): " & Err.Description
    
GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Sort Line Item on Traffic Lane table
Sub SortLineItemonTL()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim LIonTLTable As Range
    Set LIonTLTable = Range("LineItemonTL.Table")
    
    If LIonTLTable.Rows.Count > 2 Then
        Dim LIonTLWS As Worksheet
        Dim SortRanges(0 To 0) As Range
        
        Set LIonTLWS = Worksheets("Line Item on TL")
        Set LIonTLTable = LIonTLTable.Resize(LIonTLTable.Rows.Count - 2).Offset(1)
        Set SortRanges(0) = Range("LineItemonTL.RateCardName")
        
        Call Utility.SortTable(LIonTLWS, LIonTLTable, SortRanges)
    End If
    
    Application.Calculate
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SortLineItemonTL(): " & Err.Description
    
GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Convert all XAE sheets to values
Sub XAEsheetsToValues()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim ws As Worksheet
    
    Application.Calculate
    
    For Each ws In Worksheets
        If ws.Name = "Quote" Or ws.Name = "Prod Config" Or ws.Name = "Quote Config Att" Or ws.Name = "Line Item" Or ws.Name = "Line Item on TL" Or ws.Name = "Usage Price Tier" Or ws.Name = "Quote Translation" Or ws.Name = "Product Translation" Or ws.Name = "Exchange Rate" Or ws.Name = "Country Local" Then
             Call Utility.ConverttoValues(ws.Cells(1, 1).CurrentRegion)
        End If
    Next
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in XAEsheetsToValues(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Build Usage Rate Map
Sub BuildMaps()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim i As Long, j As Long
    Dim UsageRate As Range, LineItemID As Range
    Dim URarray() As Variant
    
    Set UsageRate = Range("UsagePriceTier.UsageRate")
    Set LineItemID = Range("UsagePriceTier.LineItemID")
    
    Set XAE.UsageRateMap = New Collection
    
    'Loop through all Usage Tier lines
    For i = 2 To UsageRate.Rows.Count - 1
        
        'Add Usage Rate to the array if it already exists
        If Utility.Contains(UsageRateMap, LineItemID(i)) Then
            
            'Get the existing Array and expand its size by 1
            URarray = XAE.UsageRateMap.Item(LineItemID(i))
            ReDim Preserve URarray(UBound(URarray) + 1)
            
            'Populate Usage Rate Array
            If UsageRate(i) = 0 Or UsageRate(i) >= 10000000 Then
                URarray(UBound(URarray)) = "On request"
            Else
                URarray(UBound(URarray)) = UsageRate(i)
            End If
            
            'Remove the existing entry
            XAE.UsageRateMap.Remove (LineItemID(i))
            
        'Create a new array if it hasn't been added
        Else
        
            'Create an array
            ReDim URarray(0)
            
            'Populate Usage Rate Array
            If UsageRate(i) = 0 Or UsageRate(i) >= 10000000 Then
                URarray(0) = "On request"
            Else
                URarray(0) = UsageRate(i)
            End If
            
        End If
        
        'Add the array to the Map
        XAE.UsageRateMap.Add URarray, LineItemID(i)
    Next
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in BuildMaps(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Utility"
Option Explicit
Option Private Module

'Convert formulas to values
Sub ConverttoValues(Target As Range)

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Target.Value = Target.Value
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ConverttoValues(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Sort Table
Sub SortTable(ws As Worksheet, Table As Range, SortRanges() As Range)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    If Table.Rows.Count > 2 Then
        Dim i As Integer
        
        With ws.Sort
            .SortFields.Clear
            
            For i = LBound(SortRanges) To UBound(SortRanges)
                .SortFields.Add key:=SortRanges(i), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            Next
            
            .SetRange Table
            .Header = xlGuess
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SortTable(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Protect Worksheet
Sub ProtectWS(WSName As String)

    Worksheets(WSName).Protect Password:="ApttusRocketship", AllowFormattingColumns:=True, AllowFormattingRows:=True

End Sub

Function Contains(col As Collection, key As Variant) As Boolean

    On Error Resume Next
    col (key)
    Contains = (Err.Number = 0)
    Err.Clear
    
End Function

'Show all sheets
Private Sub ShowAllSheets()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim ws As Worksheet
    
    For Each ws In Worksheets
        ws.Visible = xlSheetVisible
    Next
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ShowAllSheets(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub


Attribute VB_Name = "XAE"
Option Explicit

Private deleteRange As Range
Public UsageRateMap As Collection

'Translated Worksheet Name
Public SummaryWSName As String
Public RoadTaxWSName As String
Public MarpolWSName As String
Public AddInfoWSName As String
Public TCWSName As String
Public InsuranceWSName As String

Sub GenerateQuote()
    
    On Error GoTo Errhandler

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    'Intialize data
    Call Initialize.SetDateFormat
    Call Initialize.XAEsheetsToValues
    Call Initialize.BuildMaps

    'Generate sheets
    Call GenerateSummary
    Call GenerateRoadTax
    Call GenerateMarpol
    Call GenerateRateCards
    Call GenerateAdditionalInformation
    Call GenerateTermsConditions
    Call GenerateDSVInsurance

    'Hide XAE Sheets and set focus
    Call HideXAESheets

    'Translate Sheets
    Call TranslateSheets

    Worksheets(SummaryWSName).Activate

    GoTo GracefulExit

Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateQuote(): " & Err.Description

GracefulExit:
    Application.CutCopyMode = False
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Sub

'Generate Summary Sheet
Private Sub GenerateSummary()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo Errhandler
    
    'Expand Rate Card Hyperlinks
    Dim SummaryWS As Worksheet
    Dim RateCardLinks As Range
    Dim RCName As Range
    Dim RateCardNum As Integer
    
    Set SummaryWS = Worksheets("Summary")
    Set RateCardLinks = Range("Summary.RateCardLinks")
    Set RCName = Range("QCA.RateCardSheetName")
    
    SummaryWS.Calculate
    
    RateCardNum = Application.WorksheetFunction.CountIf(RCName, "?*")
    
    If RateCardNum > 1 Then
        Call ExpandRanges(RateCardLinks, RateCardNum - 1, "Down")
    End If
    
    'Delete Road Tax and/or Marpol Hyperlinks
    Dim RTLines As Integer
    Dim MPLines As Integer
    Dim RTHL As Range
    Dim MPHL As Range
    Dim RTMPHL As Range
    Dim RTMPHeader As Range
    
    RTLines = Application.WorksheetFunction.Max(Range("LineItem.RoadTaxLines"))
    MPLines = Application.WorksheetFunction.Max(Range("LineItem.MarpolLines")) + Application.WorksheetFunction.Max(Range("LineItem.SurchargeLines"))
    Set RTHL = Range("Summary.RoadTaxHL")
    Set MPHL = Range("Summary.MarpolHL")
    Set RTMPHL = Range("Summary.RoadTaxMarpolHL")
    Set RTMPHeader = Range("Summary.RoadTaxMarpolHeader")
    
    If RTLines = 0 And MPLines = 0 Then
        RTMPHL.EntireRow.Delete
    Else
        Call Utility.ConverttoValues(RTMPHeader)
        
        If RTLines = 0 Then
            RTHL.EntireRow.Delete
        End If
        
        If MPLines = 0 Then
            MPHL.EntireRow.Delete
        End If
    End If
    
    'Convert Formulas to Values
    Dim TargetRanges(0 To 2) As Range
    Dim i As Integer
    
    Set TargetRanges(0) = Range("Summary.Header")
    Set TargetRanges(1) = Range("Summary.RateCardHeader")
    Set TargetRanges(2) = Range("Summary.OtherHeader")
    
    For i = LBound(TargetRanges) To UBound(TargetRanges)
        Call Utility.ConverttoValues(TargetRanges(i))
    Next
    
    'Select first cell
    SummaryWS.Activate
    Cells(1, 1).Select
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateSummary(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Generate Rate Card sheets
Private Sub GenerateRateCards()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo Errhandler
    
    Dim RCTws As Worksheet
    Dim RCName As Range
    
    Set RCTws = Worksheets("Rate Card Template")
    Set RCName = Range("QCA.RateCardSheetName")
    Set deleteRange = Nothing
    
    'Create Rate Card sheets
    If RCName.Rows.Count > 2 Then
    
        Dim RC_UsageTier As Range, RC_LineItemID As String, RC_TrafficLaneID As String
        Dim LI_MarpolLines As Range, LI_SurchargeLines As Range
        
        Dim AutoFitRows(0 To 3) As String
        Dim RowHeight As Double
        
        Dim MarpolNumLines As Integer
        Dim i As Integer, j As Integer, RCCounter As Integer
        
        Set RCName = Range("QCA.RateCardSheetName")
        Set LI_MarpolLines = Range("LineItem.MarpolLines")
        Set LI_SurchargeLines = Range("LineItem.SurchargeLines")
        
        RC_LineItemID = "RateCard.LineItemID"
        RC_TrafficLaneID = "RateCard.TrafficLaneID"
        
        AutoFitRows(0) = "RateCard.OriginPostcodeSegment"
        AutoFitRows(1) = "RateCard.DestinationPostcodeSegment"
        AutoFitRows(2) = "RateCard.LeadTime"
        AutoFitRows(3) = "RateCard.DepartureDays"
        
        RCCounter = 0
        
        MarpolNumLines = Application.WorksheetFunction.Max(LI_MarpolLines) + Application.WorksheetFunction.Max(LI_SurchargeLines)
        
        For i = 1 To RCName.Rows.Count - 2
        
            If RCName(i + 1) <> "" Then

                'Increment Rate Card Counter by 1
                RCCounter = RCCounter + 1
                
                RCTws.Copy After:=Worksheets(RCTws.Index + RCCounter - 1)
                Worksheets(RCTws.Index + RCCounter).Name = RCName(i + 1)
                
                With Worksheets(RCTws.Index + RCCounter)

                    'Set Worksheet Name in first cell
                    Cells(1, 1) = .Name
                    
                    'Expand Usage Tier rows
                    Call ExpandUsageTier(Worksheets(RCTws.Index + RCCounter), "RateCard.UsageTier", RC_LineItemID, "RateCard.Minimum", "RateCard.FullLoad")
                    
                    'Expand Options
                    Call ExpandOptions(Worksheets(RCTws.Index + RCCounter))
                    
                    'Expand Exclusive/Inclusive Tables
                    Call ExpandIncExc(Worksheets(RCTws.Index + RCCounter))
                    
                    'Expand Line Item columns
                    If ExpandLineItemColumn(Worksheets(RCTws.Index + RCCounter), "RateCard") Then
                    
                        'Calculate and Replace formulas with values
                        .Calculate
                        For j = 1 To 3
                            Call Utility.ConverttoValues(.Range("RateCard.Content" & j))
                        Next
                        
                        'Delete ranges
                        If Not (deleteRange Is Nothing) Then
                            deleteRange.EntireRow.Delete
                            Set deleteRange = Nothing
                        End If
                        
                        'Resize Ranges in AutoFitRows
                        For j = LBound(AutoFitRows) To UBound(AutoFitRows)
                            With .Range(AutoFitRows(j))
                                
                                RowHeight = .RowHeight
                                .EntireRow.Autofit
                                
                                If .RowHeight < RowHeight Then
                                    .RowHeight = RowHeight
                                End If
                                
                            End With
                        Next
                        
                        'Populate Usage Rate
                        Call PopulateUsageRate(Worksheets(RCTws.Index + RCCounter), "RateCard")
                        
                        'Delete Line Item ID and Traffic Lane ID
                        Range(Range(RC_LineItemID), Range(RC_TrafficLaneID)).EntireRow.Delete
                        
                        'Set focus to the first cell
                        .Activate
                        Cells(1, 1).Select
                    End If
                    
                End With
                
            End If
            
        Next
    End If
    
    'Delete Rate Card Template
    Application.DisplayAlerts = False
    RCTws.Delete
    Application.DisplayAlerts = True
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateRateCards(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Generate Road Tax sheet
Private Sub GenerateRoadTax()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim RoadT_Ws As Worksheet
    Dim RoadT_UsageTier As Range
    Dim RoadT_LineItemID As Range
    Dim RoadT_LineItemColumn As Range
    Dim RoadT_Contents As Range
    Dim RoadT_OriPC As Range
    Dim RoadT_DestPC As Range
    Dim Cell As Range
    Dim ExpandCol As Integer
    Dim i As Integer
    
    Set RoadT_Ws = Worksheets("Road Tax")
    Set RoadT_LineItemID = Range("RoadTax.LineItemID")
    Set RoadT_LineItemColumn = Range("RoadTax.LineItemColumn")
    Set RoadT_Contents = Range("RoadTax.Contents")
    Set RoadT_OriPC = Range("RoadTax.OriginPostcodeSegment")
    Set RoadT_DestPC = Range("RoadTax.DestinationPostcodeSegment")
    Set deleteRange = Nothing
    
    'Expand Usage Tier
    Call ExpandUsageTier(RoadT_Ws, "RoadTax.UsageTier", "RoadTax.LineItemID", "RoadTax.Minimum", "RoadTax.FullLoad")
    
    'Expand Line Item
    If ExpandLineItemColumn(RoadT_Ws, "RoadTax") Then
        
        'Replace formulas with values
        RoadT_Ws.Calculate
        Call Utility.ConverttoValues(RoadT_Contents.EntireRow)
        
        'Delete ranges
        If Not (deleteRange Is Nothing) Then
            deleteRange.EntireRow.Delete
            Set deleteRange = Nothing
        End If
        
        'Auto fit Contents
        RoadT_Contents.EntireRow.Autofit
        
        For Each Cell In RoadT_Contents.Rows
            If Cell.RowHeight < 19.5 Then Cell.RowHeight = 19.5
        Next
        
        'Populate Usage Rate
        Call PopulateUsageRate(RoadT_Ws, "RoadTax")
        
        'Delete Line Item ID row
        RoadT_LineItemID.EntireRow.Delete
        
        'Set focus to the first cell
        RoadT_Ws.Activate
        Cells(1, 1).Select
        
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateRoadTax(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Generate Marpol sheet
Private Sub GenerateMarpol()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim Marpol_Ws As Worksheet
    Dim Marpol_LineItemID As Range, Marpol_Contents As Range, Cell As Range
    Dim ExpandCol As Integer, i As Long
    
    Set Marpol_Ws = Worksheets("Marpol")
    Set Marpol_LineItemID = Range("Marpol.LineItemID")
    Set Marpol_Contents = Range("Marpol.Contents")
    Set deleteRange = Nothing
        
    'Expand Usage Tier
    Call ExpandUsageTier(Marpol_Ws, "Marpol.UsageTier", "Marpol.LineItemID", "Marpol.Minimum", "Marpol.FullLoad")
    
    'Expand Line item
    If ExpandLineItemColumn(Marpol_Ws, "Marpol") Then
    
        'Replace formulas with values
        Marpol_Ws.Calculate
        Call Utility.ConverttoValues(Marpol_Contents.EntireRow)
        
        'Delete ranges
        If Not (deleteRange Is Nothing) Then
            deleteRange.EntireRow.Delete
            Set deleteRange = Nothing
        End If
        
        'Auto fit Contents
        Marpol_Contents.EntireRow.Autofit
        
        For Each Cell In Marpol_Contents.Rows
            If Cell.RowHeight < 19.5 Then Cell.RowHeight = 19.5
        Next
        
        'Populate Usage Rate
        Call PopulateUsageRate(Marpol_Ws, "Marpol")
        
        'Delete Line Item ID row
        Marpol_LineItemID.EntireRow.Delete
        
        'Select first cell
        Marpol_Ws.Activate
        Cells(1, 1).Select
      
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateMarpol(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Generate Additional Information sheet
Private Sub GenerateAdditionalInformation()

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim AIWS As Worksheet
    Dim AdditionalInformation As Range, Contents As Range
    
    Set AIWS = Worksheets("Additional Information")
    Set AdditionalInformation = Range("AI.AdditionalInformation")
    Set Contents = Range("AI.Contents")
    
    AdditionalInformation.EntireRow.Autofit
    
    'Convert Formulas to Values
    Call Utility.ConverttoValues(Contents)
    
    'Select first cell
    AIWS.Activate
    Cells(1, 1).Select
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateAdditionalInformation(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Generate Terms & Conditions sheet
Private Sub GenerateTermsConditions()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim TCWS As Worksheet
    Dim TermsContent As Range
    Dim Contents As Range
    Dim TCTextBox As Shape
    Dim Cell As Range
    
    Set TCWS = Worksheets("Terms and Conditions")
    Set TermsContent = Range("TC.TermsContent")
    Set Contents = Range("TC.Contents")
    Set TCTextBox = TCWS.Shapes("TC.TextBox")
    
    'Populate the Text Box
    For Each Cell In TermsContent
        If Cell.Value <> "" Then
            If TCTextBox.DrawingObject.Text = "" Then
                TCTextBox.DrawingObject.Text = Cell
            Else
                TCTextBox.DrawingObject.Text = TCTextBox.DrawingObject.Text & vbNewLine & vbNewLine & Cell
            End If
        End If
    Next

    'Convert Formulas to Values
    Call Utility.ConverttoValues(Contents)

    'Select first cell
    TCWS.Activate
    Cells(1, 1).Select
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateTermsConditions(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
GracefulExit:
    
End Sub

'Generate DSV Insurance sheet
Private Sub GenerateDSVInsurance()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim DSVIWS As Worksheet
    Dim InsuranceTable As Range, Content As Range, Cell As Range
    
    Set DSVIWS = Worksheets("DSV Insurance")
    Set InsuranceTable = Range("Insurance.Table")
    Set Content = Range("Insurance.Content")
    
    InsuranceTable.EntireRow.Autofit
    
    For Each Cell In InsuranceTable
        If Cell.RowHeight < 45 Then
            Cell.RowHeight = 45
        End If
    Next
    
    Call Utility.ConverttoValues(Content)

    'Select first cell
    DSVIWS.Activate
    Cells(1, 1).Select
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in GenerateDSVInsurance(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Expand Usage Tier rows
Private Sub ExpandUsageTier(TargetWS As Worksheet, TargetUsageTier As String, TargetLineItemID As String, Optional Minimum As String, Optional FullLoad As String)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim LineItemID As Range, LineItemSequence As Range, WS_LineItemID As Range, WS_LineItemIDValue As String
    Dim ExpandRow As Integer, i As Long
    
    Set LineItemID = Range("UsagePriceTier.LineItemID")
    Set LineItemSequence = Range("UsagePriceTier.Sequence")
    Set WS_LineItemID = TargetWS.Range(TargetLineItemID)
    
    'Find maximum Sequence (WORKAROUND FOR EXCEL 2007)
    ExpandRow = 0
    
    'Get Line Item ID
    WS_LineItemID.Calculate
    WS_LineItemIDValue = WS_LineItemID.Value
    
    If LineItemSequence.Rows.Count > 2 Then
        For i = 2 To LineItemSequence.Rows.Count - 1
        
            If LineItemID(i) = WS_LineItemIDValue Then
                If LineItemSequence(i) <> "" And LineItemSequence(i) <> 99999 Then
                    If LineItemSequence(i) > ExpandRow Then
                        ExpandRow = LineItemSequence(i)
                    End If
                End If
            End If
            
        Next
    End If
    
    'Expand the Usage Tier row if there are more than 1 Usage Tier (exclude first and last record)
    If ExpandRow > 1 Then
        Call ExpandRanges(TargetWS.Range(TargetUsageTier).EntireRow, ExpandRow - 1, "Down")
    'Mark UsageTierRow for deletion if there are no rows
    ElseIf ExpandRow = 0 Then
        Call SetDeleteRange(TargetWS.Range(TargetUsageTier))
    End If
    
    'Check Minimum and Full Load
    If Minimum <> "" And FullLoad <> "" Then
        Dim RC_Minimum As Range
        Dim RC_FullLoad As Range

        Set RC_Minimum = TargetWS.Range(Minimum)
        Set RC_FullLoad = TargetWS.Range(FullLoad)

        'Mark Minimum for deletion if Usage Tier with Tier End Value = 0 does not exist
        If Application.WorksheetFunction.CountIfs(LineItemID, WS_LineItemIDValue, LineItemSequence, "0") = 0 Then
            Call SetDeleteRange(RC_Minimum)
        End If
        
        'Mark Full Load for deletion if Usage Tier with Tier End Value = 99999 does not exist
        If Application.WorksheetFunction.CountIfs(LineItemID, WS_LineItemIDValue, LineItemSequence, "99999") = 0 Then
            Call SetDeleteRange(RC_FullLoad)
        End If
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ExpandUsageTier(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Expand Line Item columns
Private Function ExpandLineItemColumn(TargetWS As Worksheet, wsType As String) As Boolean
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim LineItemColumn As Range
    Dim ExpandCol As Integer, i As Long
    
    'Find number of columns to be expanded
    If wsType = "RateCard" Then
    
        Dim RateCardSeq As Range, RateCardName As Range
        
        Set LineItemColumn = TargetWS.Range("RateCard.LineItemColumn").Columns(1)
        Set RateCardSeq = Range("LineItem.RateCardSequence")
        Set RateCardName = Range("LineItem.RateCardName")
        
        ExpandCol = 0
        
        If RateCardSeq.Rows.Count > 2 Then
            For i = 2 To RateCardSeq.Rows.Count - 1
                If RateCardSeq(i) <> "" Then
                    If RateCardName(i) = TargetWS.Name And RateCardSeq(i) > ExpandCol Then
                        ExpandCol = RateCardSeq(i)
                    End If
                End If
            Next
        End If
        
    ElseIf wsType = "RoadTax" Then
    
        Dim RTLines As Range
        
        Set LineItemColumn = TargetWS.Range("RoadTax.LineItemColumn").Columns(1)
        Set RTLines = Range("LineItem.RoadTaxLines")
        
        ExpandCol = Application.WorksheetFunction.Max(RTLines)
        
    ElseIf wsType = "Marpol" Then
    
        Dim Marpol_Lines As Range, Surcharge_Lines As Range
        
        Set LineItemColumn = TargetWS.Range("Marpol.LineItemColumn").Columns(1)
        Set Marpol_Lines = Range("LineItem.MarpolLines")
        Set Surcharge_Lines = Range("LineItem.SurchargeLines")
        
        ExpandCol = Application.WorksheetFunction.Max(Marpol_Lines) + Application.WorksheetFunction.Max(Surcharge_Lines)
        
    End If
    
    'Expand the Line Item column if there are more than 1 Line Item
    If ExpandCol > 1 Then
    
        Call ExpandRanges(LineItemColumn, ExpandCol - 1, "Right")
        Range(LineItemColumn.Offset(, 1), LineItemColumn.Offset(, ExpandCol - 1)).EntireColumn.ColumnWidth = LineItemColumn.EntireColumn.ColumnWidth
        ExpandLineItemColumn = True
        
    'Do nothing and return true if there is only 1 Line Item
    ElseIf ExpandCol = 1 Then
        ExpandLineItemColumn = True
        
    'Delete target worksheet if there are no Line Item
    ElseIf ExpandCol = 0 Then
    
        Application.DisplayAlerts = False
        TargetWS.Delete
        Application.DisplayAlerts = True
        ExpandLineItemColumn = False
        
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ExpandLineItemColumn(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Function

'Expand Options in Rate Card
Private Sub ExpandOptions(TargetWS As Worksheet)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim Options As String
    Dim OptionSequence As Range
    Dim RateCardName As Range
    Dim ExpandRow As Integer, i As Integer
    
    Options = "RateCard.Options"
    Set OptionSequence = Range("LineItemonTL.OptionSequence")
    Set RateCardName = Range("LineItemonTL.RateCardName")
    
    'Find maximum Option Sequence (WORKAROUND FOR EXCEL 2007)
    ExpandRow = 0
    
    If OptionSequence.Rows.Count > 2 Then
        For i = 2 To OptionSequence.Rows.Count - 1
            If OptionSequence(i) <> "" Then
                If RateCardName(i) = TargetWS.Name And OptionSequence(i) > ExpandRow Then
                    ExpandRow = OptionSequence(i)
                End If
            End If
        Next
    End If
    
    'Expand the Option rows if there are more than 1 Option
    If ExpandRow > 1 Then
        Call ExpandRanges(TargetWS.Range(Options), ExpandRow - 1, "Down")
        TargetWS.Calculate
        Call Utility.ConverttoValues(Range(TargetWS.Range(Options), TargetWS.Range(Options).Offset(ExpandRow - 1)))
    'ElseIf ExpandRow = 1 Then
        'Call Utility.ConverttoValues(TargetWS.Range(Options))
    ElseIf ExpandRow = 0 Then
        Call SetDeleteRange(TargetWS.Range(Options))
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ExpandOptions(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Expand Road Tax (Inclusive or Exclusive) in Rate Card
Private Sub ExpandIncExc(TargetWS As Worksheet)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler
    
    Dim RoadTaxMarker As Range, SISequence As Range, RateCardName As Range, iSect As Range
    Dim LIonTL_SurchargeType As Range, LIonTL_RateCardName As Range
    Dim RC_SurchargeExclusive As String, RC_ExclusiveText As String, RC_ExclusiveCurrency As String, RC_ExclusiveFuel As String, RC_ExclusiveBAF As String
    Dim RC_SurchargeInclusive As String, RC_InclusiveText As String, RC_InclusiveCurrency As String, RC_InclusiveFuel As String, RC_InclusiveBAF As String
    Dim RC_MarpolHL As String
    Dim ExpandRoadTax, DeleteRoadTax As String
    Dim RoadTaxFound As Boolean, Config_CAF As Boolean, Config_Fuel As Boolean, Config_BAF As Boolean, Config_RoadTax As Boolean
    Dim ExpandRow As Integer, i As Integer
    
    Set SISequence = Range("LineItem.SISequence")
    Set RoadTaxMarker = Range("LineItem.TranslatedRoadTaxName")
    Set RateCardName = Range("LineItem.RateCardName")
    Set LIonTL_SurchargeType = Range("LineItemonTL.SurchargeType")
    Set LIonTL_RateCardName = Range("LineItemonTL.RateCardName")
        
    RC_SurchargeExclusive = "RateCard.SurchargeExclusive"
    RC_ExclusiveText = "RateCard.ExclusiveText"
    RC_ExclusiveCurrency = "RateCard.ExclusiveCurrencySurcharge"
    RC_ExclusiveFuel = "RateCard.ExclusiveFuelSurcharge"
    RC_ExclusiveBAF = "RateCard.ExclusiveBAFSurcharge"
    
    RC_SurchargeInclusive = "RateCard.SurchargeInclusive"
    RC_InclusiveText = "RateCard.InclusiveText"
    RC_InclusiveCurrency = "RateCard.InclusiveCurrencySurcharge"
    RC_InclusiveFuel = "RateCard.InclusiveFuelSurcharge"
    RC_InclusiveBAF = "RateCard.InclusiveBAFSurcharge"
    
    RC_MarpolHL = "RateCard.MarpolHL"
    
    Config_CAF = Range("ProdConfig.CAFSurcharge").Offset(, 1)
    Config_Fuel = Range("ProdConfig.FuelSurcharge").Offset(, 1)
    Config_BAF = Range("ProdConfig.BAFSurcharge").Offset(, 1)
    Config_RoadTax = Range("ProdConfig.RoadTaxSurcharge").Offset(, 1)
    
    If Config_RoadTax Then
        ExpandRoadTax = "RateCard.InclusiveRoadTax"
        DeleteRoadTax = "RateCard.ExclusiveRoadTax"
    Else
        ExpandRoadTax = "RateCard.ExclusiveRoadTax"
        DeleteRoadTax = "RateCard.InclusiveRoadTax"
    End If
    
    'Find maximum SI Sequence (WORKAROUND FOR EXCEL 2007)
    ExpandRow = 0
    
    If SISequence.Rows.Count > 2 Then
        For i = 2 To SISequence.Rows.Count - 1
            If SISequence(i) <> "" Then
                If RateCardName(i) = TargetWS.Name And SISequence(i) > ExpandRow Then
                    ExpandRow = SISequence(i)
                End If
            End If
        Next
    End If
    
    RoadTaxFound = False
  
    If RoadTaxMarker.Rows.Count > 1 Then
        For i = 1 To RoadTaxMarker.Rows.Count - 1
            If RateCardName(i) = TargetWS.Name And RoadTaxMarker(i) <> "" Then
                RoadTaxFound = True
            End If
        Next
    End If
 
    'Expand the Surcharge Inclusive rows if there are more than 1 Surcharge Inclusive
    If ExpandRow > 1 Then
        Call ExpandRanges(TargetWS.Range(ExpandRoadTax), ExpandRow - 1, "Down")
    'Mark RoadTax for deletion if it is 0 row
    ElseIf ExpandRow = 0 Then
        'Fixed issue with Road Tax Inclusive/Exclusive and Rate Carts with no Road Tax at all
        If Not RoadTaxFound Or Not Config_RoadTax Then
            Call SetDeleteRange(TargetWS.Range(ExpandRoadTax))
        End If
    End If
    
    'Mark Road Tax that is not needed for deletion
    Call SetDeleteRange(TargetWS.Range(DeleteRoadTax))
    
    'Mark Marpol for deletion if no Marpol is associated to this Rate Card
    If Application.WorksheetFunction.CountIfs(LIonTL_SurchargeType, "Tiered Surcharge", LIonTL_RateCardName, TargetWS.Name) + Application.WorksheetFunction.CountIfs(LIonTL_SurchargeType, "Marpol Surcharge", LIonTL_RateCardName, TargetWS.Name) = 0 Then
        Call SetDeleteRange(TargetWS.Range(RC_MarpolHL))
    End If
    
    'Mark Exclusive/Inclusive Currency for deletion
    If Config_CAF Then
        Call SetDeleteRange(TargetWS.Range(RC_ExclusiveCurrency))
        
        If Application.Evaluate(TargetWS.Range(RC_InclusiveCurrency).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_InclusiveCurrency))
        End If
    Else
        Call SetDeleteRange(TargetWS.Range(RC_InclusiveCurrency))
    
        If Application.Evaluate(TargetWS.Range(RC_ExclusiveCurrency).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_ExclusiveCurrency))
        End If
    End If
    
    'Mark Exclusive/Inclusive Fuel for deletion
    If Config_Fuel Then
        Call SetDeleteRange(TargetWS.Range(RC_ExclusiveFuel))
        
        If Application.Evaluate(TargetWS.Range(RC_InclusiveFuel).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_InclusiveFuel))
        End If
    Else
        Call SetDeleteRange(TargetWS.Range(RC_InclusiveFuel))
    
        If Application.Evaluate(TargetWS.Range(RC_ExclusiveFuel).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_ExclusiveFuel))
        End If
    End If
    
    'Mark Exclusive/Inclusive BAF for deletion
    If Config_BAF Then
        Call SetDeleteRange(TargetWS.Range(RC_ExclusiveBAF))
        
        If Application.Evaluate(TargetWS.Range(RC_InclusiveBAF).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_InclusiveBAF))
        End If
    Else
        Call SetDeleteRange(TargetWS.Range(RC_InclusiveBAF))
    
        If Application.Evaluate(TargetWS.Range(RC_ExclusiveBAF).Formula) = 0 Then
            Call SetDeleteRange(TargetWS.Range(RC_ExclusiveBAF))
        End If
    End If
    
    'Mark Exclusive Table and Text for deletion if all exclusive lines are marked for deletion
    Set iSect = Intersect(TargetWS.Range(RC_SurchargeExclusive), deleteRange.EntireRow)
    
    If Not (iSect Is Nothing) Then
        If iSect.Rows.Count = TargetWS.Range(RC_SurchargeExclusive).Rows.Count - 1 Then
            Call SetDeleteRange(Union(TargetWS.Range(RC_SurchargeExclusive), TargetWS.Range(RC_ExclusiveText)))
        End If
    End If
    
    'Mark Inclusive Table and Text for deletion if all inclusive lines are marked for deletion
    Set iSect = Intersect(TargetWS.Range(RC_SurchargeInclusive), deleteRange.EntireRow)
    
    If Not (iSect Is Nothing) Then
        If iSect.Rows.Count = TargetWS.Range(RC_SurchargeInclusive).Rows.Count - 1 Then
            Call SetDeleteRange(Union(TargetWS.Range(RC_SurchargeInclusive), TargetWS.Range(RC_InclusiveText)))
        End If
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ExpandRoadTaxIncExc(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Expand Target by the given Size towards the given Direction
Private Sub ExpandRanges(Target As Range, Size As Integer, Direction As String)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    Application.CutCopyMode = False
    
    On Error GoTo Errhandler
    
    If Direction = "Down" Then
        Target.Copy
        Range(Target.Offset(1), Target.Offset(Size)).Insert
    ElseIf Direction = "Right" Then
        Target.Copy
        Range(Target.Offset(, 1), Target.Offset(, Size)).Insert
    End If
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in ExpandRanges(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Populate Usage Rate matrix
Private Sub PopulateUsageRate(TargetWS As Worksheet, wsType As String)

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    Application.CutCopyMode = False
    
    On Error GoTo Errhandler
    
    Dim LineItemColumn As Range, LineItemIDRange As Range, LineItemID As Range, UsageRate As Range, Error As Range
    Dim UsageRateArray() As Variant, UsageRateMatrix() As Variant, ExpandCol As Integer, i As Long, j As Long
    
    Set LineItemColumn = TargetWS.Range(wsType & ".LineItemColumn")
    Set LineItemID = TargetWS.Range(wsType & ".LineItemID")
    Set UsageRate = TargetWS.Range(wsType & ".UsageRate")
    Set Error = TargetWS.Range(wsType & ".Error")
    
    'Find the number of columns
    ExpandCol = LineItemColumn.Columns.Count - 1
    
    'Set the Line Item ID Range
    Set LineItemIDRange = Range(LineItemID, LineItemID.Offset(, ExpandCol - 1))
    
    'Resize the 2D array - rows based on Usage Rate rows, columns based on Line Item columns
    ReDim UsageRateMatrix(UsageRate.Rows.Count - 1, LineItemIDRange.Columns.Count - 1)
    
    'Loop through each Line Item ID
    For i = 0 To LineItemIDRange.Columns.Count - 1
        
        'If the Usage Rate is found
        If Utility.Contains(UsageRateMap, LineItemIDRange(i + 1)) Then
        
            'Get the Usage Rate Array
            UsageRateArray = UsageRateMap.Item(LineItemIDRange(i + 1))
            
            'Populate Usage Rate Matrix
            If UBound(UsageRateArray) = UsageRate.Rows.Count - 1 Then
                For j = 0 To UsageRate.Rows.Count - 1
                    UsageRateMatrix(j, i) = UsageRateArray(j)
                Next
            'If the size doesn't match, print error and exit
            Else
                Error = "Line Item (" & LineItemIDRange(i + 1) & ") does not have correct Usage Rate count. Please check with your adminstrator."
                GoTo GracefulExit
            End If
        
        'If no Usage Rate is found, print error and exit
        Else
            Error = "Line Item (" & LineItemIDRange(i + 1) & ") does not have any Usage Rate. Please check with your adminstrator."
            GoTo GracefulExit
        End If
        
    Next
        
    'Populate the Usage Rate Matrix
    Range(UsageRate, UsageRate.Offset(, ExpandCol - 1)) = UsageRateMatrix
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in PopulateUsageRate(): " & Err.Description & " on line " & Erl
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:

End Sub

'Translate all sheets
Private Sub TranslateSheets()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual

    On Error GoTo Errhandler
    
    Dim ws As Worksheet
    
    'Set Translated Worksheet Name
    SummaryWSName = Range("QuoteTranslation.Summary").Offset(, 1)
    RoadTaxWSName = Range("QuoteTranslation.RoadTax").Offset(, 1)
    MarpolWSName = Range("QuoteTranslation.Marpol").Offset(, 1)
    AddInfoWSName = Range("QuoteTranslation.AdditionalInformationHeading").Offset(, 1)
    TCWSName = Range("QuoteTranslation.TermsConditions").Offset(, 1)
    InsuranceWSName = Range("QuoteTranslation.DSVCargoInsurance").Offset(, 1)
    
    'Rename sheets
    For Each ws In Worksheets
        If ws.Name = "Summary" And SummaryWSName <> "" And Len(SummaryWSName) <= 31 Then
            ws.Name = SummaryWSName
        ElseIf ws.Name = "Road Tax" And RoadTaxWSName <> "" And Len(RoadTaxWSName) <= 31 Then
            ws.Name = RoadTaxWSName
        ElseIf ws.Name = "Marpol" And MarpolWSName <> "" And Len(MarpolWSName) <= 31 Then
            ws.Name = MarpolWSName
        ElseIf ws.Name = "Additional Information" And AddInfoWSName <> "" And Len(AddInfoWSName) <= 31 Then
            ws.Name = AddInfoWSName
        ElseIf ws.Name = "Terms and Conditions" And TCWSName <> "" And Len(TCWSName) <= 31 Then
            ws.Name = TCWSName
        ElseIf ws.Name = "DSV Insurance" And InsuranceWSName <> "" And Len(InsuranceWSName) <= 31 Then
            ws.Name = InsuranceWSName
        End If
    Next
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in TranslateSheets(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

'Hide all XAE sheets
Private Sub HideXAESheets()
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    Dim ws As Worksheet
    
    For Each ws In Worksheets
        If ws.Name = "Data" Or ws.Name = "Tasks Tracker" Or ws.Name = "Quote" Or ws.Name = "Prod Config" Or ws.Name = "Quote Config Att" Or ws.Name = "Line Item" Or ws.Name = "Line Item on TL" Or ws.Name = "Usage Price Tier" Or ws.Name = "Quote Translation" Or ws.Name = "Product Translation" Or ws.Name = "Exchange Rate" Or ws.Name = "Country Local" Or ws.Name = "apttusmetadata" Then
            ws.Visible = xlSheetVeryHidden
        Else
            Call Utility.ProtectWS(ws.Name)
        End If
    Next
    
    GoTo GracefulExit
    
Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in HideXAESheets(): " & Err.Description
    
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

GracefulExit:
    
End Sub

Private Function SetDeleteRange(TargetRange As Range)
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    On Error GoTo Errhandler

    If deleteRange Is Nothing Then
        Set deleteRange = TargetRange
    Else
        Set deleteRange = Union(deleteRange, TargetRange)
    End If

    GoTo GracefulExit

Errhandler:
    Range("Data.ErrorLog") = Range("Data.ErrorLog") & vbNewLine & "An Error has occured in SetDeleteRange(): " & Err.Description

GracefulExit:
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic

End Function


' InQuest injected base64 decoded content
' *'v+b
' *'jR'~

INQUEST-PP=macro
