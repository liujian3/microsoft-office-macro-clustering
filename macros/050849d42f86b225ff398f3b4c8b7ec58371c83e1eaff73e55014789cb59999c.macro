Attribute VB_Name = "BookmarkForm"
Attribute VB_Base = "0{6BB3FC41-191A-43A4-ACB2-0FF9DFB8C49F}{F6A8323B-6641-4596-8EA9-F596C3C1F2E5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub AllBookmarksOption_Click()
  RefreshBookmarks (1)
End Sub

Private Sub CancelBkmkButton_Click()
  BookmarkForm.hide
End Sub


Private Sub ShowBookmarkOption_Click()
   ChangeShowBookmark (True)
End Sub

Private Sub HideBookmarkOption_Click()
   ChangeShowBookmark (False)
End Sub

Private Sub HideMarksOption_Click()
  Call ignoreSystemBookmarks(True, False)
End Sub

Private Sub LabelBookmarksButton_Click()
  LabelBookmarks (1)
End Sub

Private Sub RefreshBbutton_Click()
  RefreshBookmarks (1)
End Sub

Private Sub RemoveLabelsButton_Click()
  LabelBookmarks (0)
End Sub


Private Sub ShowMarksOption_Click()
  Call ignoreSystemBookmarks(False, False)
End Sub

Private Sub CreateBookmarkButton_Click()
  createBookmark (1)
  RefreshBookmarks (1)
End Sub

Private Sub GotoBookmarkButton_Click()
  goto_bookmark (BookmarkForm.BookmarksListbox.ListIndex)
'  RefreshBookmarks (1)
End Sub

Private Sub DeleteBookmarkButton_Click()
  deleteBookmarks (BookmarkForm.BookmarksListbox.ListIndex)
'  DisplaySettings (1)
End Sub

Private Sub DisplayDuplicatesButton_Click()
  displayDuplicates (1)
End Sub

Private Sub DisplayRefButton_Click()
  displayReferences (1)
End Sub
Attribute VB_Name = "CheckRef"
Option Explicit

Dim thisDocName As String
Dim checkDocName As String
Dim thisDoc As Document
Dim checkDoc As Document
Dim cRange As Range


Sub CreateDuplicateDoc(n As Long)
Dim hPoints As Single
Dim vPoints As Single
  If ActiveDocument.Path = "" Then
    MsgBox "Cannot duplicate because document not saved"
    Exit Sub
  End If
  thisDocName = ActiveDocument.Name
  Set thisDoc = ActiveDocument
  Set checkDoc = Documents.Add(ActiveDocument.FullName)
  checkDocName = ActiveDocument.Name
  checkDoc.Windows.CompareSideBySideWith thisDoc
  Windows.ResetPositionsSideBySide
  Windows.SyncScrollingSideBySide = False
With CheckRefForm
    Call GiveScreenPoints(hPoints, vPoints)
    .StartUpPosition = 0
    .Top = 0  '(vPoints - .Height) / 2
    .Left = (hPoints - .Width)
    .Show vbModeless
  End With
End Sub

Sub GO_Cancel(n As Long)
  On Error Resume Next
  thisDoc.Activate
  checkDoc.Close savechanges:=wdDoNotSaveChanges
  If n = 1 Then CheckRefForm.hide
End Sub


Sub GO_NextRef(n As Long)
Dim k As Long
Dim j As Long
Dim f As Field
Dim fCode As String
Dim bkMrk As String
  On Error Resume Next
  checkDoc.Range.HighlightColorIndex = wdNoHighlight
  On Error GoTo 0
  thisDoc.Activate
  k = Selection.Range.Fields.Count
  If k > 0 Then
    Selection.Range.Fields(k).Select
    Selection.Collapse direction:=wdCollapseEnd
    If Selection.Information(wdWithInTable) Then
      Selection.Cells(1).Range.Select
      Selection.Collapse direction:=wdCollapseEnd
      Selection.MoveEnd unit:=wdCharacter, Count:=1
    End If
  End If
  
  Selection.Collapse direction:=wdCollapseEnd
  Set cRange = Selection.Range
  cRange.End = ActiveDocument.Range.End
  If cRange.Fields.Count = 0 Then
    MsgBox "No more references from cursor"
    Exit Sub
  End If
  k = cRange.Fields.Count
  For j = 1 To k
    Set f = cRange.Fields(j)
    If f.Type = wdFieldRef Then GoTo fFound
  Next j
  MsgBox "No more REF fields after cursor"
  Exit Sub
fFound:
  f.Select
  fCode = Trim(f.Code)
  bkMrk = Trim(Mid(fCode, InStr(fCode, " ")))
  k = InStr(bkMrk, " ")
  If k > 0 Then bkMrk = Left(bkMrk, k - 1)
  
  checkDoc.Activate
  On Error GoTo Gerr
  checkDoc.Bookmarks(bkMrk).Range.Select
  Selection.Range.HighlightColorIndex = wdYellow
  ActiveWindow.LargeScroll up:=1
  ActiveWindow.ScrollIntoView Selection.Range, True
  
  thisDoc.Activate
  DoEvents
  f.Select
  Exit Sub
Gerr:
thisDoc.Activate
  DoEvents
  MsgBox f.Result & " Cannot find the reference bookmark " & bkMrk & " referred to in " & f.Result
End Sub


Attribute VB_Name = "CheckRefForm"
Attribute VB_Base = "0{73BED9C3-89EA-41DD-9037-947D96F0C2BA}{07CA5FD5-56BE-48F5-86C7-01F74BC8B4C8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  '  If CloseMode = vbFormControlMenu Then
  GO_Cancel (2)
End Sub

Private Sub CancelButton_Click()
  GO_Cancel (1)
End Sub

Private Sub NextRefButton_Click()
  GO_NextRef (1)
End Sub

Private Sub UserForm_Initialize()
   ' https://www.mrexcel.com/forum/excel-questions/386643-userform-always-top.html
   Const C_VBA6_USERFORM_CLASSNAME = "ThunderDFrame"
    Dim ret As Long
    Dim formHWnd As Long
    'Get window handle of the userform
    formHWnd = FindWindow(C_VBA6_USERFORM_CLASSNAME, Me.Caption)
    If formHWnd = 0 Then
        Debug.Print Err.LastDllError
    End If

    'Set userform window to 'always on top'
    ret = SetWindowPos(formHWnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE Or SWP_NOSIZE)
    If ret = 0 Then
        Debug.Print Err.LastDllError
    End If
End Sub
Attribute VB_Name = "CloseBrowserForm"
Attribute VB_Base = "0{F2242418-0311-4365-B4A3-1422DA0A8CFD}{9A5B550C-2A31-4375-A55A-ADBEB9245C88}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CloseBrowserButton_Click()
  CloseBrowserForm.hide
End Sub
Attribute VB_Name = "CountForm"
Attribute VB_Base = "0{9920F080-ABF2-497A-812A-264512CAC777}{4E6CDF42-EEBC-46F5-8B75-D0C4324243C5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CountExitButton_Click()
  CountForm.hide
End Sub

Private Sub CountListbox_Click()
  setStoryNo (CountForm.CountListbox.ListIndex)
End Sub
Attribute VB_Name = "CreateBookmarkForm"
Attribute VB_Base = "0{58833462-5A7B-451A-BE46-6F4B89A5B6E6}{A705736A-1519-4C16-94E2-756F49945074}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CancelCreateBookmark_Click()
  exitCteateBookmark (False)
End Sub

Private Sub CreateBookmarkButton_Click()
  exitCteateBookmark (True)
End Sub
Attribute VB_Name = "DeleteBookmarkForm"
Attribute VB_Base = "0{D5AADE6D-87F9-47B8-807A-B9C3A868B494}{A730FB31-38A0-4BE9-B27C-0D0D49103970}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub oveButtonNoRem_Click()
  Call setRemove(False, False)
End Sub

Private Sub RemoveAllUnusedButtom_Click()
  Call setRemove(False, True)
End Sub

Private Sub YesRemoveButton_Click()
 Call setRemove(True, False)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    DeleteBookmarkForm.hide
End Sub
Attribute VB_Name = "FieldForm"
Attribute VB_Base = "0{E18666FB-DBCA-4C7A-AAF0-A95DB73FF144}{B2558A05-674B-44FB-B33D-BFAFE3C08E69}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  FieldForm.hide
End Sub

Private Sub ChangeFieldButton_Click()
  ChangeFieldType (1)
End Sub

Private Sub HighlightButton_Click()
  HighlightFields (1)
End Sub

Private Sub NextFieldButton_Click()
  Call GotoNextField(True, False)
  DisplayFieldSettings (1)
End Sub

Private Sub PreviousFieldButton_Click()
  Call GotoNextField(False, False)
  DisplayFieldSettings (1)
End Sub

Private Sub HideFieldCodesOption_Click()
  aShowFieldcodes (False)
End Sub

Private Sub RemoveHighlightButton_Click()
  HighlightFields (0)
End Sub

Private Sub ShowFieldCodesOption_Click()
  aShowFieldcodes (True)
End Sub

Private Sub ShadingAlwaysOption_Click()
  ChangeFieldShading (2)
End Sub

Private Sub ShadingNeverOpotion_Click()
  ChangeFieldShading (3)
End Sub

Private Sub ShadingSelectedOption_Click()
  ChangeFieldShading (1)
End Sub

Private Sub CreateFieldButton_Click()
  createField (1)
  DisplayFieldSettings (1)
End Sub

Private Sub UpdateAllFieldsButton_Click()
  UpdateAllFields (1)
End Sub

Private Sub UpdateThisFieldButton_Click()
  UpdateThisField (1)
End Sub

Private Sub ConvertFieldButton_Click()
  removeField (1)
  DisplayFieldSettings (1)
End Sub

Private Sub ConvertAllToTextButton_Click()
  ConvertAllToText (1)
  DisplayFieldSettings (1)
End Sub
Attribute VB_Name = "FieldTypeForm"
Attribute VB_Base = "0{32A30DB4-E5A8-4D5F-A964-972D7DCE6FB5}{CA4A3B75-D7F6-4B20-BF4B-9B930EFF55BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub AcceptFieldButton_Click()
  NewFieldType (1)
End Sub

Private Sub CommandButton1_Click()
  FieldTypeForm.hide
End Sub

Attribute VB_Name = "FieldsModule"
Option Explicit
Dim FieldTypeA
Dim PreDefined
Dim FieldType As Long
Dim aBookmarks() As Bookmark
Dim aBookmarksText() As String
Dim createBsw As Boolean
Dim ignoreCode As String
Dim ignoreInbuilt As Boolean
Dim hyperCount As Long
Dim hyperStory As Long
Dim rangeOption As Long
Dim bibN As Long
Dim ftN As Long
Dim ftNN As Long ' LongPtr may be needed for 64 bit Word
Dim etN As Long
Dim etNN As Long
Dim hpHold As Hyperlink
Dim removeSW As Boolean
Dim allSw As Boolean
Dim NStory As Long
Dim stN
Dim StoryItem(18) As Long
Dim fld() As Field
Dim FieldSwitch As Boolean
Dim fldCount As Long
Dim hPoints As Single
Dim vPoints As Single

Sub Go_Fields()
  FieldTypeA = Array("All", "1 ??", "2 ??", "REF", "XE Index entry", "Footnote Ref. Not avail", _
    "Set", "If", "Index", "TOC entry", "Style ref", _
    "RD Ref Doc", "Seq", "TOC", "Info", "15 ??", _
    "Subject", "Author", "Keywords", "Comments", "20 ??", _
    "Create date", "Save date", "PrintDate", "RevNum", "EditTime", _
    "NumPages", "Numwords", "NumChars", "FieldName", " Template", _
    "Date", "Time", "Page", "34 ??", "Quote", _
    "Include. Not in dialog box", "PageRef", "Ask", "Fill-in", "Data", _
    "Next", "Nextif", "SkipIf", "Mergrec", "DDE. Not in Field dialog box", _
    "DDEAuto not in Field dialog box", "Glossary", "Print", "Equation", "GOToButton", _
    "MacroButton", "AutoNumOut", "AutoNumLgl", "AutoNum", _
    "Import. Not in dialgog box", _
    "Link", "Symbol", "Embedded", "MergeField", "UserName", _
    "UserInitials", "UserAddress", "BarCode", "DocVariable", "Section", _
    "SectionPages", "IncludePicture", "IncludeText", "Filesize", "FormText", _
    "FormCheckBox", "NoteRef", "Table of Authorities", "Table of Authorities Entry", "MergSeq", _
    "MergeSeq", "Private", "Database", "AutoText", "Compare", _
    "Add-in", "Macintosh only", "FormDropDown", "Advance", "DocProperty", _
    "86 ??", "OCX. Not in dialog box", "Hyperlink", "AutoTextList", "ListNum", _
    "HTMLActiveX", "BidOutline", "AddressBlock", "GreetingLine", "Shape, Created by drawn picture", _
    "Citation", "Bibliography")
  FieldType = 0
    
  stN = Array("", "Document Body", "Footnotes", "Endnotes", "Comments", "Textbox", _
     "Even pages header", "Primary header", "Even pages footer", "Primary footer", _
     "First page header", "First page footer", "Footnote separator", _
     "Footnote continuation separator", "Footnote continuation notice", _
     "Endnote separator", "Endnote continuation separator", _
     "Endnote continuation notice", "Textboxes")
     
  PreDefined = Array("\Cell", "\Char", "\Doc", "\EndOfDoc", "\EndOfSel", "\HeadingLevel", _
    "\Line", "\Page", "\Para", "\PrecSel2", "\PrevSel1", "\Section", "\Sel", "\StartOfDoc", "\StartOfSel", "\Table")
  
  NStory = Selection.Range.StoryType
  Call GiveScreenPoints(hPoints, vPoints)
  With FirstForm
    .StartUpPosition = 0
    .Left = hPoints - .Width - 5
    .Top = 0
    ShowCountsInFirstform
    .Show
  End With

  changeFrameHeadings
'  FieldBookmark_Execute
End Sub

Private Sub ShowCountsInFirstform()
  With FirstForm
    .FieldsCountLabel.Caption = Trim(str(ActiveDocument.Fields.Count)) & " Fields in document"
    .HyperlinksCountLabel.Caption = Trim(str(countHyperlinks)) & " Hyperlinks in document"
    .BookmarksCountLabel.Caption = Trim(str(ActiveDocument.Bookmarks.Count)) & " Bookmarks in document"
    
    
    If ActiveWindow.View.ShowFieldCodes Then
      .ShowFieldCodesOption.Value = True
    Else
      .HideFieldCodesOption.Value = True
    End If
    
  End With
End Sub

Sub FieldsProcess(n As Long)
Dim fld As Field
  With FieldForm
    FieldType = 0
    .StartUpPosition = 0
    .Left = hPoints - .Width - 10 - FirstForm.Width
    .Top = 0
 '   .FieldCodeLabel.Caption = showFieldscount '"There are " & countFields & " fields in document"
 '   .ConvertUrlButton.Enabled = False
 '   .AddressLabel.Caption = ""
  '  .Caption = "Fields in " & UCase(stN(Selection.Range.StoryType))
    If ActiveWindow.View.ShowFieldCodes Then
      .ShowFieldCodesOption.Value = True
    Else
      .HideFieldCodesOption.Value = True
    End If
    NStory = Selection.StoryType
    
    Set fld = amIinaField
    If Not fld Is Nothing Then
      fld.Select
    End If
    
    changeFrameHeadings
    .FieldResultLabel.Caption = ""
    DisplayFieldSettings (1)
    .Show
  End With
End Sub

Function amIinaField() As Field
Dim aRange As Range
Dim sRange As Range
Dim k As Long
Dim fld As Field
  Set amIinaField = Nothing
  If Selection.Fields.Count > 0 Then
    Set amIinaField = Selection.Fields(1)
    Exit Function
  End If
   
  Set sRange = Selection.Range
  sRange.Collapse
  Set aRange = Selection.Paragraphs(1).Range
  k = aRange.Fields.Count
  If k = 0 Then Exit Function
  For Each fld In aRange.Fields
    If sRange.InRange(fld.Code) Or sRange.InRange(fld.Result) Then
      Set amIinaField = fld
      Exit Function
    End If
  Next fld
End Function

Sub DisplayFieldSettings(m As Long)
Dim s As String
  With FieldForm
    If FieldType < 0 Then
      s = "Blank field"
    Else
      s = FieldTypeA(FieldType)
    End If
    .FieldTypeLabel.Caption = "Search for " & s & " field types"
    .HighlightButton.Caption = "Highlight " & s & " fields"
    .FieldCodeFrame.Caption = s & " Field code & result"
    .FieldCodeLabel.Caption = ""
    If Selection.Fields.Count > 0 Then
      m = Selection.Fields(1).Type
      If m < 0 Or m > UBound(FieldTypeA) Then
        s = "Empty field"
      Else
        s = FieldTypeA(m)
      End If

      .FieldCodeLabel.Caption = "{" & Selection.Fields(1).Code & "}"
      .FieldResultLabel.Caption = Selection.Fields(1).Result
   
    Else
      .FieldCodeLabel.Caption = "Selection not in a field" 'showFieldscount '"There are " & countFields & " fields in document"
      .FieldResultLabel.Caption = ""
    End If
    If .ShowFieldCodesOption.Value Then
      ActiveWindow.View.ShowFieldCodes = True
    Else
      ActiveWindow.View.ShowFieldCodes = False
    End If
  End With
  ShowCountsInFirstform
End Sub

Sub HyperProcess(n As Long)
  With Hyperform
    .StartUpPosition = 0
    .Left = hPoints - .Width - 10 - FirstForm.Width
    .Top = 0
    Call DisplayHyperSettings(0)
    If ActiveWindow.View.ShowFieldCodes Then
      .ShowFieldCodesOption.Value = True
    Else
      .HideFieldCodesOption.Value = True
    End If
    showHypercount
    .Show
  End With
End Sub

Sub DisplayHyperSettings(n As Long) ' n=0 hyperlink, 1 = textURL
Dim fld As Field
Dim sf As String
  Hyperform.ConvertUrlButton.Enabled = True
  With Hyperform
    If .ShowFieldCodesOption.Value Then
      ActiveWindow.View.ShowFieldCodes = True
    Else
      ActiveWindow.View.ShowFieldCodes = False
    End If
  End With
  ShowCountsInFirstform
  changeFrameHeadings
  If n > 0 Then
    Hyperform.ConvertUrlButton.Caption = "Convert to hyperlink"
    Exit Sub
  End If

  If Selection.Fields.Count > 0 Then
    For Each fld In Selection.Fields
      If fld.Type = wdFieldHyperlink Then
        With Hyperform
          .ConvertUrlButton.Enabled = True
          .CodeLabel.Caption = getHyperAddress(Selection.Hyperlinks(1))
          .ConvertUrlButton.Caption = "Convert to text"
          .ResultLabel.Caption = fld.Result
        End With
        Exit Sub
      End If
    Next fld
  End If
  Hyperform.CodeLabel.Caption = "not found"
  Hyperform.ConvertUrlButton.Enabled = False
End Sub

Sub ChangeShowBookmark(n As Boolean)
  ActiveWindow.View.ShowBookmarks = n
End Sub

Sub BookmarkProcess(n As Long)
  With BookmarkForm
      .StartUpPosition = 0
    .Left = hPoints - .Width - 10 - FirstForm.Width
    .Top = 0
.Show

    If .HideMarksOption Then
      Call ignoreSystemBookmarks(True, False)
    End If
    If .ShowBookmarkOption Then
      Call ignoreSystemBookmarks(False, True)
    End If
    If .AllBookmarksOption Then
      Call ignoreSystemBookmarks(False, False)
    End If
    If ActiveWindow.View.ShowBookmarks Then
      .ShowBookmarkOption.Value = True
    Else
      .HideBookmarkOption.Value = True
    End If

  '  .Show
  End With
End Sub


Private Sub changeFrameHeadings()
  FirstForm.StoryLabel.Caption = "Fields & Bookmarks in " & vbCrLf & UCase(stN(NStory))
  FieldForm.Caption = "Fields in " & UCase(stN(NStory))
  Hyperform.Caption = "Hyperlinks & URLs in " & UCase(stN(NStory))
  BookmarkForm.Caption = "Bookmarks in all parts of document"
End Sub

Sub ClickOption(b As Boolean)
   Options.CtrlClickHyperlinkToOpen = b
End Sub
Private Sub FieldBookmarkExecute()
  With BookmarkForm
'    .FieldsLabel.Caption = ActiveDocument.Fields.Count & " fields in document"
'    ignoreSystemBookmarks (.HideMarksOption.Value) '++++++++++++++++++
    If .HideMarksOption Then
      Call ignoreSystemBookmarks(True, True)
    End If
    If .ShowBookmarkOption Then
      Call ignoreSystemBookmarks(False, True)
    End If
    If .AllBookmarksOption Then
      Call ignoreSystemBookmarks(False, False)
    End If
    
'    .HideMarksOption.Value = True
  End With
End Sub
Function UnpickCodeXX(s As String) As String ' *******????
Dim i As Integer
  i = InStr(1, s, "<")
  If i <= 0 Then i = Len(s)
  UnpickCode = Left(s, i - 1) & " not available in dialog box"
End Function

Sub GotoNextField(isForward As Boolean, isHyperlink As Boolean)
Dim aField As Field
Dim aRange As Range
Dim ashape As Shape
Dim aTest As Boolean
Dim aShowCodes As Boolean
Dim aFieldType As Long
Dim showRev As Boolean
Dim rRange As Range
Dim V As Long
  CheckStoryNo (1)
 
  ' VBA F&R will not go into text boxes or other storys unlike Word's F&R
  ' If already in textbox then first field is always found
  ' To search inside textbox use range.find
  ' If shape without text selected then Find always returns False
  ' Browse is different. It will jump within then out of textbox or headers to body but not into from body
  '
  showRev = ActiveDocument.ShowRevisions
  ActiveWindow.View.MarkupMode = wdMixedRevisions
  ActiveDocument.ShowRevisions = False  ' ?????????
  Set rRange = Selection.Range
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        V = ActiveWindow.ActivePane.View.Type
        ActiveWindow.ActivePane.View.Type = wdNormalView
    Else
        V = ActiveWindow.View.Type
        ActiveWindow.View.Type = wdNormalView
  End If
  Options.Pagination = False
Mzero:
  If Selection.ShapeRange.Count > 0 Then
    Set ashape = Selection.ShapeRange(1)
    ashape.Anchor.Paragraphs(1).Range.Select
    Selection.Collapse
  End If
  aShowCodes = ActiveWindow.View.ShowFieldCodes
  ' if selection is already a field move selection
 ' ActiveWindow.View.ShowFieldCodes = False  ' ????????
  If Selection.Range.Fields.Count > 0 Then
    If isForward Then
      Selection.Range.End = Selection.Range.End + 1
      Selection.Start = Selection.End
    Else
     Selection.Range.Start = Selection.Range.Start - 1
      Selection.End = Selection.Start
    End If
  End If
  ActiveWindow.View.ShowFieldCodes = True
  
  aTest = False
  Selection.Collapse direction:=wdCollapseEnd
    With Selection.Find
        .ClearFormatting
        .Text = "^d"
        .Replacement.Text = ""
        .Forward = isForward
        .Wrap = wdFindStop 'wdFindContinue, wdFindAsk, wdFindStop
        .Format = False
        .MatchCase = False
        .MatchWholeWord = False
        .MatchWildcards = False
        .MatchSoundsLike = False
        .MatchAllWordForms = False
    End With
    aTest = Selection.Find.Execute
    ' with wdFindStop, False if not found or end of document or in shape with no test or field, but not if in textbox
    
     ActiveWindow.View.ShowFieldCodes = aShowCodes
     If aTest = False Then
       MsgBox "No more fields in this story"
       ActiveWindow.View.ShowFieldCodes = aShowCodes ' must be here to display selection
       ActiveDocument.ShowRevisions = showRev        ' ditto
       rRange.Select
       FieldSwitch = False
       GoTo Mend
     End If
     If Selection.Range.Fields.Count > 0 Then
       Set aField = Selection.Range.Fields(1)
       aFieldType = aField.Type
     Else
      aFieldType = -1
     End If
     If isHyperlink Then
        If aFieldType <> wdFieldHyperlink Then GoTo Mzero
     End If
     If FieldType <> 0 Then
       If aFieldType <> FieldType Then GoTo Mzero
     End If
     
    ActiveWindow.View.ShowFieldCodes = aShowCodes
    ActiveDocument.ShowRevisions = showRev
    FieldSwitch = True
Mend:
    If Selection.Range.Fields.Count > 0 Then Selection.Range.Fields(1).Select
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = V
    Else
        ActiveWindow.View.Type = V
    End If
    
    ActiveWindow.LargeScroll up:=1
    ActiveWindow.ScrollIntoView Selection.Range, True

End Sub

Function showStory() As String
    showStory = stN(NStory)
End Function

Sub aShowFieldcodes(ashow As Boolean)
  ActiveWindow.View.ShowFieldCodes = ashow
  Application.ActiveWindow.ScrollIntoView Selection.Range
  ShowCountsInFirstform
End Sub
Sub viewFields(yesShow As Boolean)
  ActiveWindow.View.ShowFieldCodes = yesShow
  Application.ActiveWindow.ScrollIntoView Selection.Range
End Sub
Sub removeField(n As Long)
  Selection.Fields.Unlink
  FieldBookmarkExecute
End Sub
Sub viewBookmarks(yesShow As Boolean)
  ActiveWindow.View.ShowBookmarks = yesShow
End Sub
Sub ignoreSystemBookmarks(IgnoreHidden As Boolean, ignoreInbuiltX As Boolean) ' ++++++++++++++++++
  If IgnoreHidden Then
    ActiveDocument.Bookmarks.ShowHidden = False ' only controls listion of bookmarks
    ignoreCode = "_"
  Else
    ActiveDocument.Bookmarks.ShowHidden = True
    ignoreCode = "/"
  End If
  ignoreInbuilt = ignoreInbuiltX
  LoadBookmarks
End Sub
Sub RefreshBookmarks(n As Long)
  LoadBookmarks
End Sub

Function getBookRef(str As String, typeCode As Long) As String
Dim s As String
Dim i As Long
  s = Trim(str)
  If s <> "" Then
   i = InStr(s, " ")
   If i > 0 Then s = Trim(Mid(s, i))

  If typeCode = wdFieldHyperlink Then
    If InStr(s, "\l") > 0 Then
      s = Mid(s, InStr(s, """") + 1)
      i = InStr(s, """")
      If i > 1 Then s = Left(s, i - 1)
    Else
      s = ""
    End If
  Else
    i = InStr(s, " ")
    If i > 0 Then s = Trim(Left(s, i))
  End If
  End If
  getBookRef = s
End Function

Function getTOCRef(str As String) As String
Dim s As String
Dim i As Long
  s = Trim(str)
  i = InStr(s, "\b")
  If i = 0 Then
    getTOCRef = ""
    Exit Function
  End If
  s = Trim(Mid(s, i + 2))
  i = InStr(s, " ")
  If i > 0 Then s = Left(s, i - 1)
  getTOCRef = s
End Function

Private Sub LoadBookmarks()
Dim i As Long
Dim k As Long
Dim h As Single
Dim aBookmark As Bookmark
Dim fieldTxts() As String
Dim bkStart() As Long
Dim bkEnd() As Long
Dim aField As Field
Dim aFlg() As Integer
'Dim t1 As Single
Dim aa As String
Dim bCount As Long
Dim r1Start As Long
Dim r1End As Long
Dim aStory As Range
Dim aStr As String
Dim ashape As Shape
Dim aInlineShape As InlineShape
Dim hp As Hyperlink
   With BookmarkForm
     bCount = ActiveDocument.Bookmarks.Count
     .BookmarksLabel.Caption = bCount & " bookmarks.  $ unused  * multiple at same range"
     .BookmarksListbox.Clear
     .BookmarksListbox.AddItem "Please wait ..."
     If bCount > 150 Then .BookmarksListbox.AddItem "may take a long time"
   End With
  DoEvents

  ReDim fieldTxts(0) '(ActiveDocument.Fields.Count)
  k = 1
  For Each aStory In ActiveDocument.StoryRanges
   For Each aField In aStory.Fields 'ActiveDocument.Fields
    Select Case aField.Type
     Case 3, 38, 63, 50, 88, 72, 37, 6
       aStr = getBookRef(aField.Code.Text, aField.Type)
       If aStr <> "" Then
         ReDim Preserve fieldTxts(k)
         fieldTxts(k) = aStr
         k = k + 1
       End If
     Case 13, 73 ' TOC, TOA
       aStr = getTOCRef(aField.Code.Text)
         If aStr <> "" Then
         ReDim Preserve fieldTxts(k)
         fieldTxts(k) = aStr
         k = k + 1
       End If
     End Select
   Next aField
   
   For Each ashape In aStory.ShapeRange
     Set hp = ashape.Hyperlink
     aStr = ""
     On Error Resume Next
     aStr = hp.Name
     On Error GoTo 0
     If aStr <> "" Then
       ReDim Preserve fieldTxts(k)
       fieldTxts(k) = aStr
       k = k + 1
     End If
   Next ashape
   For Each aInlineShape In aStory.InlineShapes
     Set hp = aInlineShape.Hyperlink
     aStr = ""
     On Error Resume Next
     aStr = hp.Name
     On Error GoTo 0
     If aStr <> "" Then
       ReDim Preserve fieldTxts(k)
       fieldTxts(k) = aStr
       k = k + 1
     End If
   Next aInlineShape
   
  Next aStory
  
  ReDim bkStart(0)
  ReDim bkEnd(0)
  ReDim aBookmarksText(0)
  ReDim aBookmarks(0)
  If BookmarkForm.ShowMarksOption.Value Or _
     BookmarkForm.AllBookmarksOption Then ignoreCode = "/"
  k = 1
  For Each aBookmark In ActiveDocument.Bookmarks
    If Left(aBookmark.Name, 1) <> ignoreCode Then
      ReDim Preserve bkStart(k)
      ReDim Preserve bkEnd(k)
      ReDim Preserve aBookmarksText(k)
      ReDim Preserve aBookmarks(k)
      bkStart(k) = aBookmark.Range.Start
      bkEnd(k) = aBookmark.Range.End
      Set aBookmarks(k) = aBookmark
      aBookmarksText(k) = aBookmark.Name
      k = k + 1
    End If
  Next aBookmark
  ReDim aFlg(UBound(aBookmarks))

  aa = "************"
  If UBound(aBookmarks) > 0 Then
    For k = 1 To UBound(aBookmarks)
      aBookmarksText(k) = aBookmarksText(k) & checkUse(aBookmarksText(k), fieldTxts, k)
      aFlg(k) = 0
      r1Start = aBookmarks(k).Range.Start
      r1End = aBookmarks(k).Range.End
      For i = 1 To k
        If bkStart(i) = r1Start And bkEnd(i) = r1End And i <> k Then
            aFlg(i) = aFlg(i) + 1
            aFlg(k) = aFlg(k) + 1
          End If
        Next i
    Next k
  End If
 
  If UBound(aBookmarks) > 0 Then
    For k = 0 To UBound(aBookmarksText)
      If aFlg(k) > 0 Then
        aBookmarksText(k) = aBookmarksText(k) & Left(aa, aFlg(k))
      End If
    Next k
  End If
  With BookmarkForm
    If .AllBookmarksOption Then
      k = UBound(aBookmarks)
      i = UBound(PreDefined) + k + 1
      ReDim Preserve bkStart(i)
      ReDim Preserve bkEnd(i)
      ReDim Preserve aBookmarksText(i)
      ReDim Preserve aBookmarks(i)
      For i = 0 To UBound(PreDefined)
        k = k + 1
        Set aBookmarks(k) = Nothing
        bkStart(k) = 0
        bkEnd(k) = 0
        aBookmarksText(k) = PreDefined(i)
      Next i
    End If
      
    h = .BookmarksListbox.Height
    .BookmarksListbox.Clear
    If UBound(aBookmarksText) > 0 Then
      .BookmarksListbox.List() = aBookmarksText
      .BookmarksListbox.RemoveItem (0)
    End If
    .BookmarksListbox.Height = h
    .BookmarksTextLabel.Caption = ""
    .BookmarksListbox.ListIndex = -1
  End With
  ShowCountsInFirstform
  changeFrameHeadings
 ' MsgBox Timer - t1 & "   tot=" & UBound(aBookmarksText)
End Sub

Function checkUse(s As String, fieldTxts, k As Long) As String
Dim j As Long
Dim aField As Field
  checkUse = " $"
  For j = 1 To UBound(fieldTxts)
    If fieldTxts(j) = s Then
      checkUse = ""
      Exit Function
'      If InStr(fieldTxts(j), s) > 0 And InStr(fieldTxts(j), "HYPERLINK") = 0 Then
'        checkUse = ""
'        Exit Function
    End If
  Next j

End Function

Sub showBookmarktext(k As Long)
Dim s As String
  With BookmarkForm
    s = ""
    If k > -1 Then
      On Error Resume Next
      s = ActiveDocument.Bookmarks(k + 1).Range.Text
      If s = "" Then
        If ActiveDocument.Bookmarks(k + 1).Range.Fields.Count > 0 Then s = "Bookmark contains field(s)"
      End If
      If Len(s) > 95 Then s = Left(s, 95) & "..."
      If s = "" Then s = "no text in bookmark"
    End If
    .BookmarksTextLabel.Caption = s
  End With
End Sub

Sub goto_bookmark(k As Long)
Dim bkk As String
  If k < 0 Then
    MsgBox "No bookmark selected"
    Exit Sub
  End If
  On Error GoTo Gerr
  bkk = aBookmarksText(BookmarkForm.BookmarksListbox.ListIndex + 1)
  If Left(bkk, 1) = "\" Then
    ActiveDocument.Bookmarks(bkk).Range.Select
  Else
    ActiveDocument.Bookmarks(k + 1).Select
  End If
  Exit Sub
Gerr:
  If Left(bkk, 1) = "\" Then
    MsgBox "Pre defined bookmark does not exist in document"
  Else
    MsgBox "Cannot find bookmark"
  End If
End Sub
Sub showhideBookmarks(isShow As Boolean)
  With ActiveWindow.View
    If isShow Then
      .ShowBookmarks = True
    Else
      .ShowBookmarks = False
    End If
  End With
End Sub
Sub setRemove(r As Boolean, allS As Boolean)
  removeSW = r
  allSw = allS
  DeleteBookmarkForm.hide
End Sub

Sub deleteBookmarks(k As Long)
Dim j As Long
Dim bkk As String
  bkk = aBookmarksText(BookmarkForm.BookmarksListbox.ListIndex + 1)
  If Left(bkk, 1) = "\" Then Exit Sub

  With DeleteBookmarkForm
    If UBound(aBookmarks) <> ActiveDocument.Bookmarks.Count Then
     .aLabel.Caption = "The number of bookmarks" & vbCrLf & "has changed." & vbCrLf & vbCrLf & "Refresh and try again."
     .aLabel.Visible = True
    Else
     .aLabel.Visible = False
    End If
    .Left = BookmarkForm.Left
    .Top = FirstForm.Top + 210
    .Show
  End With
  
'  On Error GoTo DE
     
  If allSw Then
    j = UBound(aBookmarks)
    
    Do While j > 0 ' decriment because deleting bookmarks
    
      If InStr(aBookmarksText(j), " $") > 0 Then
       With ActiveDocument.Bookmarks(j)
         .Delete
       End With
      End If
      j = j - 1
   Loop
    GoTo DE
  End If
  
  If removeSW = False Then GoTo DE2
  If k < 0 Then
    DeleteBookmarkForm.aLabel.Caption = "    No bookmark selected."
    DeleteBookmarkForm.aLabel.Visible = True
    DeleteBookmarkForm.Show
  Else
    ActiveDocument.Bookmarks(k + 1).Delete
    removeSW = False
    BookmarkForm.BookmarksTextLabel.Caption = ""
    FieldBookmarkExecute
  End If

DE:
  LoadBookmarks
  j = BookmarkForm.BookmarksListbox.ListCount - 1
  If j > k Then j = k
  BookmarkForm.BookmarksListbox.ListIndex = j
  showBookmarktext (j)
DE2:
  
 End Sub
 
 Sub ChangeFieldShading(i As Long)
    Select Case i
      Case 1
        ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
      Case 2
        ActiveWindow.View.FieldShading = wdFieldShadingAlways
      Case 3
        ActiveWindow.View.FieldShading = wdFieldShadingNever
    End Select
End Sub

Sub createField(n As Long)
On Error GoTo cf1
  Selection.Collapse direction:=wdCollapseEnd
  Dialogs(wdDialogInsertField).Show '< 0 Then MsgBox "Error in creating field"
  FieldBookmarkExecute
cf1:
On Error GoTo 0
End Sub

Sub exitCteateBookmark(createOK As Boolean)
Dim newName As String
Dim aBookmark As Bookmark
  If createOK Then
    newName = UCase(Trim(CreateBookmarkForm.BookmarkNameTextbox.Value))
    If newName = "" Then
      MsgBox "Invalid name"
      Exit Sub
    End If
    For Each aBookmark In ActiveDocument.Bookmarks
      If UCase(aBookmark.Name) = newName Then
        MsgBox "Duplicate name"
        Exit Sub
      End If
    Next aBookmark
  End If
  createBsw = createOK
  CreateBookmarkForm.hide
End Sub

Sub createBookmark(n As Long)
Dim aBookmark As Bookmark
Dim newName As String
  createBsw = False
  
  With CreateBookmarkForm
    .Left = BookmarkForm.Left
    .Top = BookmarkForm.Top + 210
    .BookmarkNameTextbox.Value = ""
    .BookmarkNameTextbox.SetFocus
    .Show
  End With

  If Not createBsw Then Exit Sub
  newName = Trim(CreateBookmarkForm.BookmarkNameTextbox.Value)
  On Error GoTo nameErr
  ActiveDocument.Bookmarks.Add Range:=Selection.Range, Name:=newName
'  Dialogs(wdDialogInsertBookmark).Show
  FieldBookmarkExecute
 ' With FieldsBookmarksForm.BookmarksListbox
 '   .ListIndex = .ListCount - 1
 '   goto_bookmark (.ListIndex)
 ' End With
  Exit Sub
nameErr:
  MsgBox "Invalid name"
End Sub

Private Function showFieldscount() As String
Dim k As Long
Dim b As Long
Dim n As Long
Dim m As Long
  k = countFields
  m = ActiveDocument.Fields.Count
  b = GetHyperBibliography ' assume sources only contain fields
  n = getFieldsFootnoteEndnote
  showFieldscount = str(m) & " body " & str(b) & _
  " bibliography " & str(n) & " foot/endnotes " & _
  str(k - hyperCount - n) & " other"
End Function

Function countFields() As Long
Dim aStory As Range
Dim k As Long
  k = 0
  For Each aStory In ActiveDocument.StoryRanges
    k = k + aStory.Fields.Count
  Next aStory
  countFields = k
End Function

Private Sub showHypercount()
Dim k As Long
Dim b As Long
Dim n As Long
Dim s As String
  k = countHyperlinks
' hyperCount = ActiveDocument.Hyperlinks.Count
  
  b = GetHyperBibliography
  n = getHyperFootnoteEndnote
  
'  s = str(hyperCount + b + n) & " total in doc. "
  s = str(k) & " total in doc. "
  If b > 0 Then s = s & " Bibliography=" & str(b)
  If n > 0 Then s = s & "  Foot/end notes=" & str(n)
  Hyperform.Hyperlinklabel.Caption = s
  '& " body " & str(b) & _
 ' " bibliography " & str(n) & " foot/endnotes " & _
 ' str(k - hyperCount - n) & " other"
  
End Sub
Function countHyperlinks() As Long
Dim aStory As Range
Dim k As Long
Dim ashape As Shape
  k = 0
  For Each aStory In ActiveDocument.StoryRanges
        k = k + aStory.Hyperlinks.Count
        Select Case aStory.StoryType
            Case 1, 2, 3, 4, 6, 7, 8, 9, 10, 11
              If aStory.ShapeRange.Count > 0 Then
                For Each ashape In aStory.ShapeRange
                  If ashape.TextFrame.HasText Then
                    k = k + ashape.TextFrame.TextRange.Fields.Count
                  End If
                Next ashape
             End If
          End Select
    Next aStory
    k = k + GetHyperBibliography
  countHyperlinks = k
End Function

Function nextURL() As Field ' find next hyperlink
Dim aRange As Range
Dim ch As String
Dim fld As Field
Dim k As Long
  k = 0
  Set nextURL = Nothing
GG:
  If Selection.Fields.Count > 0 Then
    Set aRange = Selection.Range
    Selection.Fields(1).ShowCodes = False  ' ditto
    aRange.Select
    Selection.Fields.ToggleShowCodes ' causes de selection ??
    Selection.Fields.ToggleShowCodes
    aRange.Select
  End If
   
  Selection.End = Selection.End '+ 1
  
  Selection.Collapse direction:=wdCollapseEnd

  With Application.Browser
    .Target = wdBrowseField
    .Next
  End With
  
  Set aRange = Selection.Range
  aRange.MoveEnd
   
  If aRange.Fields.Count > 0 Then
    Set fld = aRange.Fields(1)
  Else
    MsgBox "No more found "
    Exit Function
  End If
  
  If fld.Type = wdFieldTOC Then
    Set fld = aRange.Fields(2)
    fld.Select
    Selection.Fields(1).ShowCodes = False  ' ditto
    Selection.Fields.ToggleShowCodes ' causes de selection ??
    For k = 2 To aRange.Fields.Count
         aRange.Fields(k).ShowCodes = False
    Next k
   ' Selection.Fields(1).ShowCodes = False
    fld.Select
  End If
  k = k + 1
  If k > 1000 Then
    MsgBox "Cannot find next hyperlink"
    Exit Function
  End If
  
  If fld.Type <> wdFieldHyperlink Then GoTo GG
  fld.Select
  Set nextURL = fld
End Function

Sub GetNextUrl(n As Long)
Dim hp As Hyperlink
Dim fld As Field
Dim aRange As Range
Dim shp As Shape
Dim k As Long

  Set fld = nextURL
  If fld Is Nothing Then Exit Sub
  
  Set hp = Selection.Range.Hyperlinks(1)
  
Set shp = Nothing
  On Error Resume Next
  Set shp = hp.Shape
  On Error GoTo 0
  If shp Is Nothing Then ' hyperlink is not in a shape
    hp.Range.Select
  '  FieldsBookmarksForm.FieldDescrLabel = "Hyperlink "
  Else ' hyperlink is in a shape
    shp.Select
    'FieldsBookmarksForm.FieldDescrLabel = "Hyperlink in a shape "
  End If
  With Hyperform
    .CodeLabel.Caption = getHyperAddress(hp)
    If shp Is Nothing Then
      .ConvertUrlButton.Caption = "Convert to text"
    Else
      .ConvertUrlButton.Caption = "Remove from shape"
    End If
    .ConvertUrlButton.Enabled = True
  End With
  showHypercount
End Sub

Function getHyperAddress(hp As Hyperlink) As String
Dim st As String
  st = hp.Address
  If st = "" Then st = "Internal:" & hp.SubAddress
  getHyperAddress = st
End Function

Sub GetNextUrlText(n As Long)  ' n=1 next url,
Dim btest As Boolean
Dim ctest As Boolean
Dim dtest As Boolean
Dim aRange As Range
Dim bRange As Range
Dim cRange As Range
Dim dRange As Range
rangeOption = 1 ' ****************

  CheckStoryNo (1)
  Hyperform.CodeLabel.Caption = ""
 ' Hyperform.FieldDescrLabel.Caption = ""
hAgain:
  Set hpHold = Nothing
  If Selection.Hyperlinks.Count > 0 Then
'    Selection.MoveRight unit:=wdWord
'    If Selection.Range.Characters.Count = 1 Then Selection.MoveRight unit:=wdCharacter
    If Selection.Information(wdWithInTable) Then
      'GoToNextcell
      Selection.MoveRight unit:=wdWord
    Else
      Selection.MoveRight unit:=wdWord
    End If
  End If
  Selection.Start = Selection.End
  Select Case rangeOption
    Case 2
      Call nextBibUrlText
      Exit Sub
    Case 3
      Call nextFtnUrlText
    Case 4
      Call nextEtnUrlText
    Case Else
      Set aRange = Selection.Range
      If Selection.Information(wdWithInTable) Then
      
      Else
 '       aRange.End = ActiveDocument.Range.End  ' ???????? if in footnote etc then only does footnotes
      End If
 
      aRange.Select
      Set bRange = aRange.Duplicate
      Set cRange = aRange.Duplicate
      Set dRange = aRange.Duplicate
      With bRange.Find ' will find to end of document
        .ClearFormatting
        btest = .Execute(findtext:="www.", replacewith:="", Wrap:=wdFindStop, _
          Forward:=True, Replace:=wdReplaceNone)
      End With
      
      With cRange.Find ' will find to end of document
        .ClearFormatting
        ctest = .Execute(findtext:="http:", replacewith:="", Wrap:=wdFindStop, _
          Forward:=True, Replace:=wdReplaceNone)
      End With
    
      With dRange.Find ' will find to end of document
        .ClearFormatting
        dtest = .Execute(findtext:="https:", replacewith:="", Wrap:=wdFindStop, _
          Forward:=True, Replace:=wdReplaceNone)
      End With
    
      If Not btest And Not ctest And Not dtest Then
          MsgBox "No further text URLs found in " & stN(NStory) & _
           " or selection may be inside a text box"
          Selection.End = Selection.Start
          Exit Sub
       End If
       If Not btest Then bRange.Start = ActiveDocument.Range.End
       If Not ctest Then cRange.Start = ActiveDocument.Range.End
       If Not dtest Then dRange.Start = ActiveDocument.Range.End
       
'       If cRange.Start < bRange.Start Then
'         Set aRange = cRange
'       Else
'         Set aRange = bRange
'       End If
       
       If bRange.Start < cRange.Start And bRange.Start < dRange.Start Then Set aRange = bRange
       If cRange.Start < bRange.Start And cRange.Start < dRange.Start Then Set aRange = cRange
       If dRange.Start < bRange.Start And dRange.Start < cRange.Start Then Set aRange = dRange
       
      aRange.Select ' might be in a comment
      
  End Select
'G2:
  If aRange.Text = "" Then ' is an anchor point for comment that contains www
   Hyperform.CodeLabel.Caption = "Comment contains a hyperlink" & vbCrLf & _
                                              "Manually advance to beyond comment"
   aRange.End = aRange.End + 5
'MsgBox "comment count=" & Selection.Comments.Count
   aRange.Select
   GoTo g3
  End If
  If Selection.Hyperlinks.Count > 0 Then ' are in a hyperlink
    Selection.Hyperlinks(1).Range.Select
   
    'Hyperform.ConvertUrlButton.Caption = "Convert to text"
    If aRange.Text <> "" Then GoTo hAgain
  Else
    Selection.Words(1).Select
    Hyperform.ConvertUrlButton.Caption = "Convert to hyperlink"
    Hyperform.ConvertUrlButton.Enabled = True
  End If
      
  ActiveWindow.LargeScroll up:=1
  ActiveWindow.ScrollIntoView Selection.Range, True

  Hyperform.CodeLabel.Caption = "Text URL: " & assembleUrl
g3:
End Sub
Private Sub GoToNextcell() ' moves to next table row. if last cell then move to next char after table
Dim cellOBJ As Cell
  With Selection
     On Error Resume Next
     Set cellOBJ = .Cells(1).Next
     On Error GoTo 0
     If cellOBJ Is Nothing Then
         .Move unit:=wdCharacter, Count:=1
      Else
         .MoveRight unit:=wdCell, Count:=1, Extend:=wdMove
      End If
  End With
End Sub
Function assembleUrl() As String
Dim cAsc As Long
Dim j As Long
Dim s As String
  j = 0
  Do
    Selection.MoveRight unit:=wdCharacter, Extend:=wdExtend
    cAsc = Asc(Right(Selection.Range, 1))
    j = j + 1
    If j > 200 Then Exit Do
  Loop While cAsc <> 32 And cAsc <> 13 And cAsc <> 7 ' cASC > 94 And cASC < 128 Or cASC = 46
  Selection.MoveEnd unit:=wdCharacter, Count:=-1
  j = 0
  Do
    Selection.MoveStart unit:=wdCharacter, Count:=-1 ', Extend:=wdExtend
    cAsc = Asc(Left(Selection.Range, 1))
    j = j + 1
    If j > 200 Then Exit Do
  Loop While cAsc <> 32 And cAsc <> 13  'cASC > 94 And cASC < 128 Or cASC = 46 Or cASC = 47 Or cASC = 58
  Selection.MoveStart unit:=wdCharacter, Count:=1
  For j = 1 To 2
    s = UCase(Right(Selection.Text, 1))   'Len(Selection.Text)))
    If (s < "0" Or s > "9") And (s > "Z" Or s < "A") Then
      Selection.MoveEnd unit:=wdCharacter, Count:=-1
    End If
  Next j
  s = UCase(Left(Selection.Text, 1))
  If s < "A" Or s > "Z" Then Selection.MoveStart unit:=wdCharacter, Count:=1
  assembleUrl = Selection.Text
End Function

Sub ConvertURL(n As Long)
Dim hypStr As String
Dim aRange As Range
Dim cAsc As Long
Dim aField As Field
Dim dispStr As String
Dim shpInline As InlineShape
Dim shp As Shape
Dim j As Long
Dim k As Long
  If Hyperform.ConvertUrlButton.Caption = "Remove from shape" Then
    With Selection.Range
      j = .ShapeRange.Count
      k = .InlineShapes.Count
      If j + k = 0 Then
        MsgBox "No hyperlink in shape"
        Exit Sub
      End If
      If j > 0 Then ' floating shape
        Set shp = .ShapeRange(1)
        shp.Hyperlink.Delete
      Else ' inline shape
        Set shpInline = .InlineShapes(1)
        shpInline.Hyperlink.Delete
      End If
    End With
    Set hpHold = Nothing
    Hyperform.CodeLabel.Caption = ""
    Hyperform.ConvertUrlButton.Enabled = False
  Else
   If Hyperform.ConvertUrlButton.Caption = "Convert to text" Then
    Selection.Fields.Unlink
    Hyperform.ConvertUrlButton.Caption = "Convert to hyperlink"
    Set aRange = Selection.Range
    aRange.Select
   ' DisplaySettings (1)  **************************
    Hyperform.CodeLabel = aRange.Text
    Set hpHold = Nothing
    Hyperform.CodeLabel.Caption = ""
    Hyperform.ConvertUrlButton.Enabled = False
   Else
    hypStr = Selection.Text
    hypStr = removeQuotes(hypStr)
    dispStr = hypStr
    If LCase(Left(hypStr, 3)) = "www" Then hypStr = "http://" & hypStr
    ActiveDocument.Hyperlinks.Add Anchor:=Selection.Range, Address:= _
        hypStr, SubAddress:="", ScreenTip:="", TextToDisplay:=dispStr
    Hyperform.ConvertUrlButton.Caption = "Convert to text"
    Selection.MoveStart unit:=wdCharacter, Count:=-2
    Set aField = Selection.Fields(1)
    aField.Select
    Set hpHold = Selection.Hyperlinks(1)
    ' DisplaySettings (1)  **************************
    Hyperform.CodeLabel = aField.Result
   End If
  End If
  'FieldsBookmarksForm.HyperlinkLabel.Caption = ActiveDocument.Hyperlinks.Count & " Hyperlinks in document"
   showHypercount
End Sub
Function removeQuotes(ByVal s As String) As String
Dim cAsc As Long
    cAsc = Asc(Left(s, 1)) ' remove straight or smart quotes
    If cAsc = 34 Or cAsc = 147 Then s = Mid(s, 2)
    cAsc = Asc(Right(s, 1))
    If cAsc = 34 Or cAsc = 148 Then s = Left(s, Len(s) - 1)
    removeQuotes = s
End Function

Sub checkUrl(n As Long)
Dim argURL As String
Dim st As String
Dim aRange As Range
'Const READYSTATE_COMPLETE As Integer = 4
'Dim objIE As Object

' Warning. If the displayed address is modified then the hyperlink is not updated.
' field.code will show the modified address but hyperlink.address will have the unmodified address
' Hyperlink.address = hyperlink.address will reset both back to the unmodified value
  argURL = Hyperform.CodeLabel.Caption
  If Left(argURL, 9) = "Internal:" Then
    st = Mid(argURL, 10)
    On Error GoTo internalERR
    Set aRange = ActiveDocument.Bookmarks(st).Range
    MsgBox "Appears to be an internal reference at: " & aRange.Text
    On Error GoTo 0
    Exit Sub
internalERR:
    On Error GoTo 0
    MsgBox "Invalid bookmark reference"
    Exit Sub
  End If
  
  If Left(argURL, 10) = "Bibl URL: " Or Left(argURL, 10) = "Text URL: " Then

    If InStr(argURL, "//") < 1 Then
      If InStr(argURL, "www") < 1 Then
        MsgBox "Unable to check URL" & vbCrLf & argURL
        Exit Sub
      End If
    End If
    argURL = Mid(argURL, 11)
'    On Error GoTo hpERR
    
'  GoTo HTTPgo
    
'    Set objIE = CreateObject("InternetExplorer.Application")
'    With objIE
'      .Visible = True '.Visible = False
'      .Silent = False 'True
'      .Navigate argURL
'      Do Until .ReadyState = READYSTATE_COMPLETE
'        DoEvents
'      Loop
'    End With
'  closeBrowser ("")
 ' MsgBox "Click OK to close this instance of browser"
'    On Error Resume Next
'    objIE.Quit
'    Set objIE = Nothing
'    On Error GoTo 0
'    Exit Sub
    
  End If
  
'  If hpHold Is Nothing Then
'    MsgBox "ERROR. Cannot find hyperlink object"
'  End If
  
HTTPgo:
 '   If InStr(hpHold.Address, "://") = 0 Then
 '   If InStr(argURL, "://") = 0 Then
 '     n = MsgBox("Hyperlink address may not be a valid URL." & vbCrLf & _
 '       "Click Yes to try anyway, No to try with http:// prefix", vbYesNoCancel, "")
 '     If n = vbCancel Then Exit Sub
        
 '     If n = vbNo Then argURL = "http://" & argURL
     
 '   End If
 
    If InStr(argURL, "://") = 0 Then
      argURL = "http://" & argURL
      Hyperform.CodeLabel.Caption = argURL
    End If
 

    On Error GoTo hpERR
    
    ActiveDocument.FollowHyperlink Address:=argURL
 '   closeBrowser

  Exit Sub
hpERR:
  On Error GoTo 0
  closeBrowser (argURL)
End Sub
Private Sub closeBrowser(s As String)
    With CloseBrowserForm
    .HYLabel.Caption = s
    .StartUpPosition = 0
    .Left = BookmarkForm.Left + 45
    .Top = 245
    .Show
    End With
End Sub
Function getFieldsFootnoteEndnote() As Long
Dim fNote As Footnote
Dim eNote As Endnote
Dim stext As String
Dim j As Long
  j = 0
  For Each fNote In ActiveDocument.Footnotes
    j = j + fNote.Range.Fields.Count
  Next fNote
  For Each eNote In ActiveDocument.Endnotes
    j = j + eNote.Range.Fields.Count
  Next eNote
  getFieldsFootnoteEndnote = j
End Function

Function getHyperFootnoteEndnote() As Long
Dim fNote As Footnote
Dim eNote As Endnote
Dim stext As String
Dim j As Long
  j = 0
  For Each fNote In ActiveDocument.Footnotes
    j = j + fNote.Range.Hyperlinks.Count
  Next fNote
  For Each eNote In ActiveDocument.Endnotes
    j = j + eNote.Range.Hyperlinks.Count
  Next eNote
  getHyperFootnoteEndnote = j
End Function

Function nextFtnHyper(hp As Hyperlink) As Boolean
Dim frange As Range
Dim j As Long
  nextFtnHyper = False
F1:
  j = ActiveDocument.Footnotes.Count
  If j = 0 Then
    MsgBox "No footnotes in document"
    ftN = 0
    Exit Function
  End If
  If ftN >= j Then
    MsgBox "No more footnotes with hyperlinks. Start again at first"
    ftN = 0
    Exit Function
  End If
  ftN = ftN + 1
  Set frange = ActiveDocument.Footnotes(ftN).Range
  j = frange.Hyperlinks.Count
  If j = 0 Then GoTo F1
  frange.Select
  If j > 1 Then MsgBox "Warning. Footnote contains more than one hyperlink. Only the first will be found"
  frange.Hyperlinks(1).Range.Select
  Set hp = frange.Hyperlinks(1)
  nextFtnHyper = True
End Function

Private Sub nextFtnUrlText()
Dim frange As Range
Dim j As Long
Dim aTest As Boolean
F1:
  j = ActiveDocument.Footnotes.Count
  If j = 0 Then
    MsgBox "No footnotes in document"
    ftNN = 0
    Exit Sub
  End If
  If ftNN >= j Then
    MsgBox "No more footnotes with hyperlinks. Start again at first"
    ftNN = 0
    Exit Sub
  End If
  ftNN = ftNN + 1
  Set frange = ActiveDocument.Footnotes(ftNN).Range
  With frange.Find
      .ClearFormatting
      aTest = .Execute(findtext:="www.", replacewith:="", Wrap:=wdFindStop, _
          Forward:=True, Replace:=wdReplaceNone)
      If aTest = False Then GoTo F1
      frange.Words(1).Select
      Call assembleUrl
  End With
End Sub

Function nextEtnHyper(hp As Hyperlink) As Boolean
Dim frange As Range
Dim j As Long
  nextEtnHyper = False
F1:
  j = ActiveDocument.Endnotes.Count
  If j = 0 Then
    MsgBox "No endnotes in document"
    etN = 0
    Exit Function
  End If
  If etN >= j Then
    MsgBox "No more endnotes with hyperlinks"
    etN = 0
    Exit Function
  End If
  etN = etN + 1
  Set frange = ActiveDocument.Endnotes(etN).Range
  j = frange.Hyperlinks.Count
  If j = 0 Then GoTo F1
  frange.Select
  If j > 1 Then MsgBox "Warning. Endtnote contains more than one hyperlink. Only the first will be found"
  frange.Hyperlinks(1).Range.Select
  Set hp = frange.Hyperlinks(1)
  nextEtnHyper = True
End Function

Private Sub nextEtnUrlText()
Dim frange As Range
Dim j As Long
Dim aTest As Boolean
F1:
  j = ActiveDocument.Endnotes.Count
  If j = 0 Then
    MsgBox "No endnotes in document"
    etNN = 0
    Exit Sub
  End If
  If etNN >= j Then
    MsgBox "No more endnotes with hyperlinks"
    etNN = 0
    Exit Sub
  End If
  etNN = etNN + 1
  Set frange = ActiveDocument.Footnotes(etNN).Range
  With frange.Find
      .ClearFormatting
      aTest = .Execute(findtext:="www.", replacewith:="", Wrap:=wdFindStop, _
          Forward:=True, Replace:=wdReplaceNone)
      If aTest = False Then GoTo F1
      frange.Words(1).Select
      Call assembleUrl
  End With
End Sub

Function GetHyperBibliography() As Long
  Dim strXml As String
  Dim objSource As Source
  Dim k As Long
  Dim j As Long
  k = ActiveDocument.Bibliography.Sources.Count
  j = 0
  If k > 0 Then
    For Each objSource In ActiveDocument.Bibliography.Sources
      strXml = objSource.XML
      If InStr(1, strXml, "<b:URL>") > 0 Then j = j + 1
    Next objSource
  End If
  GetHyperBibliography = j
End Function

Private Sub nextBibUrlText()
Dim strXml As String
Dim bibURL As String
Dim objSource As Source
Dim k As Long
Dim j As Long
Dim bRange As Range
Dim aField As Field
  ' check if there is a bibliography field type 97
  For k = 1 To ActiveDocument.Fields.Count
    If ActiveDocument.Fields(k).Type = 97 Then
      ActiveDocument.Fields(k).Select
  '    bibURL = ActiveDocument.Fields(k).Result
      GoTo B1
    End If
  Next k
  MsgBox "There is no bibliography in document"
  Exit Sub
B1:
  k = ActiveDocument.Bibliography.Sources.Count
  If k = 0 Then
    MsgBox "No bibliography sources in document"
    bibN = 0
    Exit Sub
  End If
  
  If bibN >= k Then
    MsgBox "No more entries in bibliography"
    bibN = 0
    Exit Sub
  End If
  bibN = bibN + 1
  Set objSource = ActiveDocument.Bibliography.Sources(bibN)
  strXml = objSource.XML
 
  j = InStr(1, strXml, "<b:URL>")
  If j = 0 Then GoTo B1
  bibURL = Mid(strXml, j + 7)
  j = InStr(1, bibURL, "<")
  bibURL = Left(bibURL, j - 1)
  
  BookmarkForm.AddressLabel.Caption = "Bibl URL: " & bibURL
  Set hpHold = Nothing
 
End Sub
Function checkIfBib() As Long ' ????????????????????
Dim aField
Dim k As Long
  For k = 1 To ActiveDocument.Fields.Count
    If ActiveDocument.Fields(k).Type = 97 Then
      checkIfBib = k
      Exit Function
    End If
  Next k
  checkIfBib = 0
End Function

Sub CheckStoryNo(n As Long)
  NStory = Selection.StoryType
 ' changeFrameHeadings
End Sub

Sub setStoryNo(n As Long) ' called from countform
' disable for now --------------------
'  If n <> 18 And StoryItem(n) <> 18 Then
'    NStory = StoryItem(n)
'    changeFrameHeadings
'  End If
End Sub

Sub ShowCounts(n As Long)
Dim r As Range
Dim b As Long
Dim bt As Long
Dim bTBX As Long
Dim hTBX As Long
Dim bbkTBX As Long
Dim hbkTBX As Long
Dim h As Long
Dim bk As Long
Dim hbk As Long
Dim aBookmark As Bookmark
Dim ht As Long
Dim ashape As Shape
Dim aInlineShape As InlineShape
Dim sp As String
Dim storyCount As Long
Dim oldStoryType As Long
   With CountForm.HeaderListbox
     .Clear
     .ColumnCount = 5
     .ColumnWidths = "148;48;48;48;48"
     .AddItem " "
     .List(0, 0) = "     Story"
     .List(0, 1) = "Fields total"
     .List(0, 2) = "Hyperlinks"
     .List(0, 3) = "Bookmarks"
     .List(0, 4) = "Hidden Bookmarks"
   End With
   With CountForm.CountListbox
     .Clear
     .ColumnCount = 5
     .ColumnHeads = False
     .ColumnWidths = "148;48;48;48;48"
     CountForm.Caption = "Counts for each story type"
   End With
  CountForm.Show
  oldStoryType = Selection.Range.StoryType
  storyCount = 0
  bTBX = 0
  hTBX = 0
  bbkTBX = 0
  hbkTBX = 0
  For Each r In ActiveDocument.StoryRanges
    bt = 0
    ht = 0
    bk = 0
    hbk = 0
    If r.StoryType = wdTextFrameStory Then
    
    Else
      If r.ShapeRange.Count > 0 Then ' text in shapes
        On Error GoTo G1
        For Each ashape In r.ShapeRange
   
     '     If aShape.Type <> msoCanvas And aShape.Type <> msoGroup Then
          If ashape.TextFrame.HasText Then
            bt = bt + ashape.TextFrame.TextRange.Fields.Count
            ht = ht + ashape.TextFrame.TextRange.Hyperlinks.Count
          End If
    '      End If
G1:
        Next ashape
        On Error GoTo 0
      End If
      
      For Each aBookmark In r.Bookmarks
        bk = bk + 1
        If Left(aBookmark.Name, 1) = "_" Then
          bk = bk - 1
          hbk = hbk + 1
        End If
      Next aBookmark
      
      b = r.Fields.Count
      h = r.Hyperlinks.Count
      
      StoryItem(storyCount) = r.StoryType
      If b + h + bk + hbk > 0 Then
        With CountForm.CountListbox
          .AddItem " "
          .List(storyCount, 0) = stN(r.StoryType)
          .List(storyCount, 1) = str(b)
          .List(storyCount, 2) = str(h)
          .List(storyCount, 3) = str(bk)
          .List(storyCount, 4) = str(hbk)
          If Selection.StoryType = r.StoryType Then .ListIndex = storyCount
          storyCount = storyCount + 1
        End With
      End If
   End If
   
   ' test for shapes in textboxes
   On Error Resume Next
   Select Case r.StoryType
      Case 1, 6, 7, 8, 9, 10, 11
        If r.ShapeRange.Count > 0 Then
          For Each ashape In r.ShapeRange
            If ashape.TextFrame.HasText Then
              If ashape.TextFrame.TextRange.Fields.Count > 0 Then
                bTBX = bTBX + ashape.TextFrame.TextRange.Fields.Count
                hTBX = hTBX + ashape.TextFrame.TextRange.Hyperlinks.Count
              End If
              For Each aBookmark In ashape.TextFrame.TextRange.Bookmarks
                bbkTBX = bbkTBX + 1
                If Left(aBookmark.Name, 1) = "_" Then
                  bbkTBX = bbkTBX - 1
                  hbkTBX = hbkTBX + 1
                End If
              Next aBookmark
            End If
          Next ashape
        End If
      
    End Select
    On Error GoTo 0
  Next r

  
  If bTBX + hTBX + bbkTBX + hbkTBX > 0 Then
      StoryItem(storyCount) = 18 ' 18=textboxes
      With CountForm.CountListbox
        .AddItem " "
         .List(storyCount, 0) = stN(18)
         .List(storyCount, 1) = str(bTBX)
         .List(storyCount, 2) = str(hTBX)
         .List(storyCount, 3) = str(bbkTBX)
         .List(storyCount, 4) = str(hbkTBX)
      End With
  End If

'  CountForm.Show
  
  With CountForm.CountListbox
    b = .ListIndex
    If b > -1 Then
      
      If NStory <> oldStoryType And NStory <> 18 Then
        Set r = ActiveDocument.StoryRanges(NStory)
        r.End = r.Start
        r.Select
        Call GotoNextField(True, False)
      End If
    End If
  End With
End Sub

Sub displayReferences(n As Long)
Dim s As String
Dim ss As String
Dim k As Long
Dim i As Long
Dim aField As Field
Dim aF() As Field
Dim showSW As Boolean
Dim sM As String
  ss = ""
  k = BookmarkForm.BookmarksListbox.ListIndex
  If k < 0 Then
    MsgBox "No bookmark selected"
    Exit Sub
  End If
  ReDim aF(0)
  i = 0
  On Error GoTo DS
  s = BookmarkForm.BookmarksListbox.List(k)
  For Each aField In ActiveDocument.Fields
    If InStr(aField.Code, s) > 0 And InStr(aField.Code, "HYPERLINK") = 0 Then
      ReDim Preserve aF(i)
      Set aF(i) = aField
      i = i + 1
      ss = ss & "{" & aField.Code & "}" & vbCrLf
    End If
DS:
  Next aField
  If ss = "" Then
    MsgBox "There are no references to bookmark " & s
  Else
    k = MsgBox("References to bookmark " & s & vbCrLf & vbCrLf & ss & vbCrLf & vbCrLf & "Do you want to go to references?", vbYesNo)
    If k = vbYes Then
      sM = "Go to next reference?"
      For k = 0 To i - 1
        aF(k).Select
        showSW = Selection.Fields(1).ShowCodes
        Selection.Fields(1).ShowCodes = True
        If k = i - 1 Then sM = "No more references. Any button to finish."
        If MsgBox(sM, vbYesNo) = vbNo Then
          Selection.Fields(1).ShowCodes = showSW
          Exit Sub
        End If
        Selection.Fields(1).ShowCodes = showSW
      Next k
    End If
  End If
End Sub

Sub displayDuplicates(n As Long)
Dim k As Long
Dim j As Long
Dim i As Long
Dim s As String
Dim ss As String
Dim r1Start As Long
Dim r1End As Long

  ss = "Duplicate bookmark ranges" & vbCrLf

  With ActiveDocument
    j = .Bookmarks.Count
    For k = 1 To j
      r1Start = .Bookmarks(k).Range.Start
      r1End = .Bookmarks(k).Range.End
      i = k + 1
      s = .Bookmarks(k).Name
      Do While i <= j
        If .Bookmarks(i).Range.Start = r1Start And .Bookmarks(i).Range.End = r1End Then
          s = s & ", " & .Bookmarks(i).Name
          k = k + 1
        End If
        i = i + 1
      Loop
      If InStr(s, ",") > 0 Then ss = ss & s
    Next k
  End With
  MsgBox ss
End Sub

Public Sub UpdateAllFields(n As Long) ' from Greg Maxey
Dim rngStory As Word.Range
Dim lngValidate As Long
Dim oShp As Shape
Dim oToc As TableOfContents, oTOA As TableOfAuthorities, oTOF As TableOfFigures
lngValidate = ActiveDocument.Sections(1).Headers(1).Range.StoryType
  For Each rngStory In ActiveDocument.StoryRanges
    'Iterate through all linked stories
    Do
      On Error Resume Next
      rngStory.Fields.Update
      Select Case rngStory.StoryType
        Case 6, 7, 8, 9, 10, 11
          If rngStory.ShapeRange.Count < 0 Then
            For Each oShp In rngStory.ShapeRange
              If oShp.TextFrame.HasText Then
                 oShp.TextFrame.TextRange.Fields.Update
              End If
            Next
          End If
        Case Else
          'Do Nothing
      End Select
      On Error GoTo 0
      'Get next linked story (if any)
      Set rngStory = rngStory.NextStoryRange
    Loop Until rngStory Is Nothing
    'Special Cases
    For Each oToc In ActiveDocument.TablesOfContents
      oToc.Update
    Next oToc
    For Each oTOA In ActiveDocument.TablesOfAuthorities
      oTOA.Update
    Next
    For Each oTOF In ActiveDocument.TablesOfFigures
      oTOF.Update
    Next
  Next
lbl_Exit:
  Exit Sub
End Sub

Sub UpdateThisField(n As Long)
  If Selection.Fields.Count > 0 Then
    Selection.Fields(1).Select
    Selection.Fields(1).Update
  End If
End Sub

Sub ConvertAllToText(n As Long)
Dim sRange As Range
Dim aStory As Range
Dim aView As Long
Dim aPagination As Boolean
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
    aView = ActiveWindow.ActivePane.View.Type
    ActiveWindow.ActivePane.View.Type = wdNormalView
  Else
    aView = ActiveWindow.View.Type
    ActiveWindow.View.Type = wdNormalView
  End If
  aPagination = Options.Pagination
  Options.Pagination = False
    Set sRange = Selection.Range
  
  If MsgBox("WARNING. This will be irreversible." & vbCrLf & "Do you really want to continue?", _
    vbYesNo, "Convert all fields to text") = vbYes Then
    For Each aStory In ActiveDocument.StoryRanges
      If aStory.Fields.Count > 0 Then
        aStory.Fields.Unlink
      End If
    Next aStory
    
    sRange.Select
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
      ActiveWindow.ActivePane.View.Type = aView
    Else
      ActiveWindow.View.Type = aView
    End If
    Options.Pagination = aPagination
    
  End If
End Sub

Sub CheckInternalReferences(n As Long)
Dim k As Long
Dim br As String
Dim kmax As Long
Dim aStory As Range
Dim aField As Field

  With BookmarkForm
    If Not .ShowMarksOption Then
      .ShowMarksOption.Value = True ' forces all
    Else
      LoadBookmarks
    End If
    kmax = .BookmarksListbox.ListCount
  End With

  fldCount = -1
  ReDim fld(0)
  For Each aStory In ActiveDocument.StoryRanges
    For Each aField In aStory.Fields
      Select Case aField.Type
        Case 1, 3, 38, 63, 50, 88, 72, 37, 6, 13, 73
         If aField.Type = 13 Or aField.Type = 73 Then
           br = getTOCRef(aField.Type)
         Else
           br = getBookRef(aField.Code.Text, aField.Type)
         End If
         If br <> "" Then
          For k = 0 To kmax
            If aBookmarksText(k) = br Then GoTo bFound
            If InStr(aBookmarksText(k), br) > 0 Then GoTo bFound
          Next k
          fldCount = fldCount + 1
          ReDim Preserve fld(fldCount)
          Set fld(fldCount) = aField
bFound:
         End If
        
      End Select
    Next aField
  Next aStory
  
'MsgBox fld(2).Code.Text
  
  If fldCount < 0 Then
    MsgBox "All internal references are OK"
  Else

    For k = 0 To fldCount
      With InternalRefForm.InternalRefListbox
        .AddItem fld(k).Code.Text
      End With
    Next k
    InternalRefForm.Show
  End If
  
End Sub

Sub goSelected(n As Long)
  With InternalRefForm.InternalRefListbox
    If .ListIndex > -1 Then
      fld(.ListIndex).Select
     ' showType
     ' DisplaySettings (1)
    End If
  End With
End Sub

Sub ChangeFieldType(n As Long)
Dim k As Long
  With FieldTypeForm.FieldsListbox
    .List = FieldTypeA
  FieldTypeForm.Show
  End With
End Sub

Sub NewFieldType(n As Long)
  FieldTypeForm.hide
  FieldType = FieldTypeForm.FieldsListbox.ListIndex
  DisplayFieldSettings (1)
End Sub

Sub HighlightFields(n As Long) ' n=0 remove, n=1 highlight
Dim k As Long
Dim c As Long
Dim V As Long
  ' set normal view to speed up processing
  If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        V = ActiveWindow.ActivePane.View.Type
        ActiveWindow.ActivePane.View.Type = wdNormalView
    Else
        V = ActiveWindow.View.Type
        ActiveWindow.View.Type = wdNormalView
  End If
  
  k = 0
  ActiveDocument.Bookmarks("\StartOfDoc").Range.Select
  If n = 0 Then
    c = wdAuto
  Else
    c = wdPink
  End If
  Do
    k = k + 1 ' to prevent endless loop
    Call GotoNextField(True, False)
    If FieldSwitch Then Selection.Range.HighlightColorIndex = c
  Loop While FieldSwitch And k < 2000  '00
     
    If ActiveWindow.View.SplitSpecial = wdPaneNone Then
        ActiveWindow.ActivePane.View.Type = V
    Else
        ActiveWindow.View.Type = V
    End If
End Sub

Sub LabelBookmarks(n As Long) ' n=1 to label, 0 to remove
Dim aRange As Range
Dim aBookmark As Bookmark
Dim aComment As Comment
Dim s As String
Dim hiddenBool As Boolean
Dim k As Long
  Set aRange = Selection.Range
  If n = 0 Then ' ****  remove comments *****
    For Each aComment In aRange.Comments
     If InStr(aComment.Range.Text, "Bookmark:") > 0 Then aComment.Delete
    Next aComment
    
  Else  ' ****** add comment *********
    k = aRange.Bookmarks.Count
    If k < 1 Then
      MsgBox "There are no bookmarks in the selection"
      Exit Sub
    End If
    For Each aBookmark In aRange.Bookmarks
      s = aBookmark.Name
      hiddenBool = True
      If Left(s, 1) = "_" Then hiddenBool = False
      If (BookmarkForm.HideBookmarkOption And Not hiddenBool) Or _
        (Not BookmarkForm.HideBookmarkOption) Then
        ActiveDocument.Comments.Add Range:=aBookmark.Range, Text:="Bookmark: " & s
      End If
    Next aBookmark
  End If
End Sub
Attribute VB_Name = "FirstForm"
Attribute VB_Base = "0{6EC9FB60-F096-456A-8C5B-5FFE18045AE2}{69763F0B-CDFE-494E-AF0D-C59C3D57A6FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  FirstForm.hide
End Sub

Private Sub PreviousFieldButton_Click()
  Call GotoNextField(False, False)
  DisplayFieldSettings (1)
End Sub

Private Sub CheckReferencesButton_Click()
  CheckInternalReferences (1)
End Sub

Private Sub CommandButton5_Click()
  ShowCounts (1)
End Sub

Private Sub FieldsCommandButton_Click()
  FieldsProcess (1)
End Sub

Private Sub HyperCommandButton_Click()
  HyperProcess (1)
End Sub

Private Sub BookmarksCommandButton_Click()
  BookmarkProcess (1)
End Sub

Private Sub ShowFieldCodesOption_Click()
  aShowFieldcodes (True)
End Sub

Private Sub HideFieldCodesOption_Click()
  aShowFieldcodes (False)
End Sub

Private Sub ValidityCheckButton_Click()
  FirstForm.hide
  CreateDuplicateDoc (1)
End Sub
Attribute VB_Name = "HelpForm"
Attribute VB_Base = "0{2BF03081-23E6-4267-99D8-9B5D4D730D8E}{3053D8A9-621E-4398-9659-BEAE48F79184}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub HelpCancelButton_Click()
  HelpForm.hide
End Sub

Private Sub URLlabel_Click()
 ActiveDocument.FollowHyperlink HelpForm.URLlabel.Caption
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
  HelpForm.hide
End Sub
Attribute VB_Name = "HelpModule"
Option Explicit
Sub HelpFormDisplay(n As Long)
Dim s As String
  With HelpForm.Helptxt0
    s = "SHOW SUMMARY" & vbCrLf
    s = s & "This will display counts of Fields, Hyperlinks and Bookmarks and hidden bookmarks by Story." & vbCrLf & _
        "Textbox Story cannot be selected, any fields in textboxes will need to be manually selected." & vbCrLf & vbCrLf
        
    s = s & _
     "FIELDS" & vbCrLf & _
     "Click Go to next or previous field from the current cursor position to select a field. " & vbCrLf & _
     "Show field code will display the field code, Hide field codes will show only the result of the field." & vbCrLf & _
     "Individual Field can be converted to the field's result and the field code will be removed." & vbCrLf & _
     "Insert new field will create a new field at the selected text."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt1
    s = "HYPERLINKS" & vbCrLf
    s = s & "Go to next or previous Hyperlink buttons to select a hperlink. The hyperlink details will be shown in the pane." & vbCrLf & _
        "The hyperlink can be checked for validity with the Check Hyperlink button. The hyperlink can also be converted to text ." & _
        " Hyperlinks can be deleted (but the displayed text retained) by using the Convert to text button."
        
    s = s & vbCrLf & vbCrLf & "TEXT URLs" & vbCrLf & _
        "The Next text URL button will find the next URL within the chosen story. A search is for a group of " & vbCrLf & _
        "characters containing www that may or may not start with http://. The whole of the text URL is highlighted and can be checked for validity."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt2
    s = "CTRL/Click" & vbCrLf
    s = s & "This determines how you jump to the address in a hyperlink. If off then you simply click on the hyperlink. If it is on you must hold down the CTRL key when you click on the hyperlink."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt3
    s = "BOOKMARKS" & vbCrLf
    s = s & "By default, only non-hidden bookmarks are listed - hidden bookmarks have a name starting with _." & vbCrLf & _
        "If a bookmark is unused (not referenced by any field in the document) it will have a $ flag." & vbCrLf & _
        "Selecting All bookmarks will display both hidden and non-hidden bookmarks." & vbCrLf & _
        "Go to Bookmark will jump to the bookmark in the document. " & vbCrLf & _
        "Remove Bookmark(s) will delete the selected bookmark or delete all unused bookmarks. Be careful about removing hidden bookmarks as they are used by Word for Field and Table of Contents references."
    .Caption = s
  End With
  
  With HelpForm.HelpTxt4
    s = "CREATE BOOKMARK" & vbCrLf
    s = s & "Select text to be bookmarked then click the Create Bookmark button. A name for the new bookmark will be" & vbCrLf & _
        "requested. The name cannot be an existing bookmark name, unlike Word's create bookmark menu that accepts a duplicate name and deletes the existing bookmark. Names must have no embedded spaces."
    s = s & vbCrLf & vbCrLf & "DISPLAY DUPLICATES" & vbCrLf & _
        "The Display Duplicates button will list co-incident bookmarks." & vbCrLf & _
        vbCrLf & "DISPLAY REFERENCES" & vbCrLf & _
        "A bookmark can be referenced by more than one field. This button will list all the references"
    s = s & vbCrLf & vbCrLf & "CHECK ALL INTERNAL REFERENCES IN DOCUMENT" & vbCrLf & _
        "This checks fields that reference bookmarks to ensure that the bookmarks exist"
    .Caption = s
  End With

  HelpForm.Show
End Sub

Attribute VB_Name = "Hyperform"
Attribute VB_Base = "0{80E64690-9E83-4F81-8E5D-70E026E2E738}{A0BCC47E-0FE2-4FD4-AB23-6536EF9F0959}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelHypButton_Click()
  Hyperform.hide
End Sub

Private Sub GotoURLButton_Click()
  GetNextUrl (1)
  DisplayHyperSettings (0)
End Sub

Private Sub gotoTextURLButton_Click()
  GetNextUrlText (1)
  DisplayHyperSettings (1)
End Sub

Private Sub CheckUrlButton_Click()
  checkUrl (1)
End Sub

Private Sub ConvertUrlButton_Click()
  ConvertURL (1)
End Sub

Private Sub ClickOptionOff_Click()
  ClickOption (False)
End Sub

Private Sub ClickOptionOn_Click()
  ClickOption (True)
End Sub

Private Sub HideFieldCodesOption_Click()
  aShowFieldcodes (False)
  DisplayHyperSettings (1)
End Sub

Private Sub ShowFieldCodesOption_Click()
  DisplayHyperSettings (1)
End Sub
Attribute VB_Name = "InternalRefForm"
Attribute VB_Base = "0{1E33AB74-AC76-4142-ABD8-7DC868F30165}{B6E393D3-1076-4B5B-AF8F-005C54758641}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  InternalRefForm.hide
End Sub

Private Sub GotoFieldButtom_Click()
  goSelected (1)
End Sub
Attribute VB_Name = "Module1"
Option Explicit

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "WindowsParameters"
Option Explicit
' can also use #If VBA7 to see if working in VBA 7 environment
Public Const SWP_NOMOVE = &H2
Public Const SWP_NOSIZE = &H1

Public Const HWND_TOP = 0
Public Const HWND_BOTTOM = 1
Public Const HWND_TOPMOST = -1
Public Const HWND_NOTOPMOST = -2

Public Declare Function SetWindowPos Lib "user32" _
    (ByVal hWnd As Long, _
    ByVal hWndInsertAfter As Long, _
    ByVal X As Long, _
    ByVal Y As Long, _
    ByVal cx As Long, _
    ByVal cy As Long, _
    ByVal uFlags As Long) As Long

Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" _
    (ByVal lpClassName As String, _
    ByVal lpWindowName As String) As Long

#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "user32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "user32" ( _
    ByVal nIndex As Long) As Long
 ' MsgBox "64 bit version"
#Else
  Private Declare Function GetDC Lib "user32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "user32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "user32" ( _
    ByVal nIndex As Long) As Long
'MsgBox "32 bit version"
#End If

Const LOGPIXELSX = 88
Const LOGPIXELSY = 90
Const TWIPSPERINCH = 1440
Private Const SM_CXFULLSCREEN = 16 ' also 0 gives overall screenwidth
Private Const SM_CYFULLSCREEN = 17 ' 1 gives overall, 17 gives useable excluding taskbars


Sub ConvertPixelsToPoints(ByRef X As Single, ByRef Y As Single)
    Dim hDC As Long
    Dim RetVal As Long
    Dim XPixelsPerInch As Long
    Dim YPixelsPerInch As Long

    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSX)
    YPixelsPerInch = GetDeviceCaps(hDC, LOGPIXELSY)
    RetVal = ReleaseDC(0, hDC)
    X = X * TWIPSPERINCH / 20 / XPixelsPerInch
    Y = Y * TWIPSPERINCH / 20 / YPixelsPerInch
    
 ' MsgBox "points x=" & x & " y=" & y
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(SM_CXFULLSCREEN)
 ht = GetSystemMetrics(SM_CYFULLSCREEN)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub




' InQuest injected base64 decoded content
' rJ'^
' bzWR
' jZ "{
' z-xI

INQUEST-PP=macro
