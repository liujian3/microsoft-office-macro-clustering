Attribute VB_Name = "Module1"
'This English edition is corresponding to Japanese edition Ver2.00 on 2016.3.2
Public global_itmp As Integer
Dim add_mode As Boolean
Public Df
Public show_msg As Integer 'be declared here, as this variable is used also in code of UserForm
Public app_name As String
Public edit_mode As String
Public Const BFMe_Ver = "1.00" '2017.5.16 2017.6.8 2017.6.21 2017.7.5 2017.7.10 _
                        CR9:2017.9.7 CR10:2017.9.20  CR10:2017.9.27  CR10.1:2017.9.28  CR10.2:2017.10.4
Public Const xlp_menu_show = False 'True, while debugging 2016.2.17
Public Const xlp_lang = "eng"
'EnglishSheetName: fPlan  iData  (Table)  (Model)  fCondition  iEdit  (iList)
Dim save_land_coef() As Double '2017.7.10

Sub auto_open_bk()
   Application.CommandBars("cell").Controls(1).BeginGroup = True
   With Application.CommandBars("cell").Controls.Add(before:=1, Temporary:=True)
      .Caption = "Show any sheet"
      .OnAction = "BFM_sheet_move"
   End With
   
   make_menubar_menu
   'make_shortcut_menu
   Df = ThisWorkbook.Path
   
   ChDrive Df
   ChDir Df
   
   'show_greeting '2005.11.30
   On Error GoTo no_ini_file
   Open Df & "\bfm.ini" For Input As 1: Input #1, show_msg: Close 1
   add_mode = False
   'check xlp is or not
   If xlp_menu = False Then
      On Error Resume Next
      Workbooks("xlp_e.xla").Close
      On Error GoTo 0
      If Dir(Df & "\xlp_e.xla") <> "" Then
         open_xlp
      Else
         ans% = MsgBox("XLP is necessary in inplemening BFM." & Chr(13) & Chr(13) & _
         "Please open XLP_e.xla." & Chr(13) & Chr(13), vbYesNo, "BFM")
         If ans% = vbYes Then
            xlp_prg = Application.GetOpenFilename("XLP.xla,*.xla,XLP.xls,*.xls")
            xlp_prg = extract_fname(xlp_prg)
            If LCase(xlp_prg) = "xlp_e.xla" Then
               open_xlp
            Else
               MsgBox "Designate not" & xlp_prg & " but XLP_e.xla"
               Exit Sub
            End If
         End If
      End If
   End If
   
   'Not displaying menu[XLP] 2015.7.27
   If Not xlp_menu_show Then CommandBars.ActiveMenuBar.Controls("XLP(&X)").Visible = False

   show_suitable_menu
   
   If show_msg = 1 Then
      show_opening_form
   End If

   Exit Sub
no_ini_file:
   show_msg = 1
   Open Df & "\bfm.ini" For Output As 2: Print #2, show_msg: Close 2
   Resume Next
End Sub

Sub open_xlp()
   If Dir(Df & "\xlp.ini") <> "" Then
      aru = 1
      Open Df & "\xlp.ini" For Input As 1: Input #1, tmp_show_msg: Close 1
   End If
   Open Df & "\xlp.ini" For Output As 2: Print #2, "0": Close 2
   Workbooks.Open Df & "\XLP_e.xla"
   If aru = 1 Then
      Open Df & "\xlp.ini" For Output As 2: Print #2, tmp_show_msg: Close 2
   Else
      Kill Df & "\xlp.ini"
   End If
End Sub

Function extract_fname(fname)
   Do
      i = InStr(fname, "\")
      If i > 0 Then fname = Mid(fname, i + 1)
   Loop While i > 0
   extract_fname = fname
End Function

Sub show_suitable_menu()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("Cell").Controls("dmy2").Visible = False
   CommandBars("side_menu_i").Visible = True
   CommandBars("side_menu_c").Visible = False
   CommandBars("side_menu_e").Visible = False
End Sub

Function xlp_menu()
   xlp_menu = False
   For Each ctrl In CommandBars.ActiveMenuBar.Controls
      If ctrl.Caption = "XLP" Or ctrl.Caption = "XLP(&X)" Then xlp_menu = True: Exit For
   Next ctrl
End Function

Sub show_opening_form()
   'UserForm1.OptionButton1.Value = True 'under debug
   'UserForm1.Show vbModeless
   If show_msg = 1 Then
      UserForm1.OptionButton1.Value = True
   Else
      UserForm1.OptionButton2.Value = True
   End If
   Dim uf As Object
   Set uf = UserForm1 'When this statement is not, error occurs.
   If Val(Application.Version) >= 9 Then
      uf.Show vbModeless
   Else
      uf.Show
   End If
End Sub

Sub show_greeting()
   d_cr = vbCr & vbCr
   folder = ThisWorkbook.Path
   On Error GoTo no_ini_file
   Open folder & "\bfm.ini" For Input As 1: Input #1, show_msg: Close 1
   If show_msg = 0 Then Exit Sub
   msg_content = _
   "Thank you for using BFM" & Space(35) & "ver " & BFMe_Ver & d_cr & _
   "BFM is a program that helps you to make a linear programming model for small-scale farming system" & d_cr & vbCr & _
   "By starting BFM, you can find [BFM] menu at the upper left and the right end of display" & d_cr & _
   "By clicking the menu [iData|fffd|n|fffd|||fffd|mNew book|fffd|n, you can find the sheet of|fffd|uiData|fffd|v" & d_cr & _
   "In this sheet, you can create a database of farming indexes and modify it" & d_cr & vbCr & _
   "By clicking the menu [Create a farming plan], you can compute an optimal plan of farming" & d_cr & vbCr & _
   "If you get any problems or requests, please contact ooisi@39you.net|fffd|"
   
   If show_msg = 1 Then msg_ans = MsgBox(msg_content)
   
   Exit Sub
no_ini_file:
   show_msg = 1
   Open folder & "\bfm.ini" For Output As 2: Print #2, show_msg: Close 2
   Resume Next
End Sub

Sub auto_close()
   On Error Resume Next
   CommandBars("my_bar").Delete
   CommandBars.ActiveMenuBar.Controls("BFM(&B)").Delete
End Sub

Sub make_menubar_menu()
   'On Error Resume Next
   Set newMenu = CommandBars.ActiveMenuBar.Controls.Add _
      (Type:=msoControlPopup, Temporary:=True, before:=1)
      newMenu.Caption = "BFM(&B)"
   make_submenu newMenu, "iData", newSubmenu
   make_item newSubmenu, "New book", "make_book_MI"
   make_item newSubmenu, "New sheet", "make_sheet_MI"
   make_item newSubmenu, "New registration", "edit_item_newly"
   make_item newSubmenu, "Open (New)", "read_data_base"
   make_item newSubmenu, "Open (Add)", "read_and_add_data_base"
   make_item newSubmenu, "Edit", "edit_all_item"
   make_item newSubmenu, "Edit(only selected crops)", "edit_ticked_item"
   make_item newSubmenu, "Save(Overwrite)", "resave_data_base"
   make_item newSubmenu, "Save As", "save_data_base"
   
   make_submenu newMenu, "fCondition", newSubmenu
   make_item newSubmenu, "New", "make_farmCondition_sheet"
   make_item newSubmenu, "Open", "read_farming_condition"
   make_item newSubmenu, "Save(Overwrite)", "resave_farming_condition"
   make_item newSubmenu, "Save As", "save_farming_condition"
   make_item newSubmenu, "Change the condition of labor employment", "change_meaning_of_hired_days"
   
   make_item newMenu, "Create a farming plan", "budget_LPtd"
   make_item newMenu, "Help", "show_usage"
   make_item newMenu, "Show start menu", "show_opening_form"
   make_shortcut_menu
   make_shortcut_menu_in_edit
   make_side_menu
    
   Exit Sub
del_bar:
   auto_close
   Resume
End Sub

Sub make_shortcut_menu() '2009.6.22
   '----reuse Mr.maeda's code
   Dim newMenu As CommandBarPopup
   'Dim myCBBl As CommandBarButton =====================
   On Error Resume Next
   Set newMenu = Application.CommandBars("Cell").Controls.Add _
     (Type:=msoControlPopup, Temporary:=True, before:=1)
   newMenu.BeginGroup = True
   newMenu.Caption = "dmy2"
   Set newMenu = Application.CommandBars("Cell").Controls.Add _
     (Type:=msoControlPopup, Temporary:=True, before:=1)
   newMenu.BeginGroup = True
   newMenu.Caption = "BFM(&B)"
   make_submenu newMenu, "iData", newSubmenu
   make_item newSubmenu, "New book", "make_book_MI"
   make_item newSubmenu, "New sheet", "make_sheet_MI"
   make_item newSubmenu, "New registration", "edit_item_newly"
   make_item newSubmenu, "Open (New)", "read_data_base"
   make_item newSubmenu, "Open (Add)", "read_and_add_data_base"
   make_item newSubmenu, "Edit", "edit_all_item"
   make_item newSubmenu, "Edit(only selected crops)", "edit_ticked_item"
   make_item newSubmenu, "Save(Overwrite)", "resave_data_base"
   make_item newSubmenu, "Save As", "save_data_base"
   make_submenu newMenu, "fCondition", newSubmenu
   make_item newSubmenu, "New", "make_farmCondition_sheet"
   make_item newSubmenu, "Open", "read_farming_condition"
   make_item newSubmenu, "Save(Overwrite)", "resave_farming_condition"
   make_item newSubmenu, "Save As", "save_farming_condition"
   make_item newSubmenu, "Change the condition of labor employment", "change_meaning_of_hired_days"
   make_item newMenu, "Create a farming plan", "budget_LPtd"
   make_item newMenu, "Help", "show_usage"
   make_item newMenu, "Show start menu", "show_opening_form"
   make_item newMenu, "Compute again", "compute_LPm_only"
End Sub

Sub make_item(extMenu, name As String, cmd As String)
   Set newItem = extMenu.Controls.Add(Type:=msoControlButton)
      newItem.Caption = name: newItem.OnAction = cmd
End Sub

Sub make_submenu(extMenu, name As String, newMenu)
   Set newMenu = extMenu.Controls.Add(Type:=msoControlPopup)
      newMenu.Caption = name
End Sub

Sub make_dropdown()
   Dim s As Object, r As Object
   Set r = Range("c4:c4")
   Set s = ActiveSheet.DropDowns.Add(r.Left, r.Top, r.Width, r.Height)
   s.Select
   With Selection
      .ListFillRange = "Selected items!$A$1:$A$5"
      .LinkedCell = "$C$10"
      .DropDownLines = 8
      .Display3DShading = False
   End With
   r.Select
End Sub

Sub print_name()
   i = 0
   For Each dd In ActiveSheet.DropDowns
      Cells(5 + i, 1) = dd.name
      i = i + 1
   Next
End Sub

Sub display_format() 'declare the display format
    Selection.NumberFormatLocal = "##"" ha"""
End Sub

Sub drop9_Change()
   Cells(7, 4) = ActiveSheet.DropDowns(2).Value
End Sub

Sub run_drop9_Change()
    Application.Run "BFM.xls!drop9_Change"
    Range("C8").Select
End Sub

Sub make_side_menu()
   On Error Resume Next
   
   Set side_menu = Application.CommandBars.Add _
   (name:="side_menu_i", Position:=msoBarRight, Temporary:=True)
   Set newMenu = side_menu
   make_submenu side_menu, "iData", sub_menu
   make_item sub_menu, "New book", "make_book_MI"
   make_item sub_menu, "New sheet", "make_sheet_MI"
   make_item sub_menu, "New registration", "edit_item_newly"
   make_item sub_menu, "Open (New)", "read_data_base"
   make_item sub_menu, "Open (Add)", "read_and_add_data_base"
   make_item sub_menu, "Edit", "edit_all_item"
   make_item sub_menu, "Edit(only selected crops)", "edit_ticked_item"
   make_item sub_menu, "Save(Overwrite)", "resave_data_base"
   make_item sub_menu, "Save As", "save_data_base"
   make_submenu side_menu, "fCondition", sub_menu
   make_item sub_menu, "New", "make_farmCondition_sheet"
   make_item sub_menu, "Open", "read_farming_condition"
   make_item sub_menu, "Save(Overwrite)", "resave_farming_condition"
   make_item sub_menu, "Save As", "save_farming_condition"
   make_item sub_menu, "Change the conditions of labor employment", "change_meaning_of_hired_days"
   make_shortcut_submenu side_menu, "Create a farming plan", "budget_LPtd"
   make_shortcut_submenu side_menu, "Help", "show_usage"
  
   Set side_menu = Application.CommandBars.Add _
   (name:="side_menu_e", Position:=msoBarRight, Temporary:=True)
   make_shortcut_submenu side_menu, "Add", "edit2_add"
   make_shortcut_submenu side_menu, "Previous", "edit2_backward"
   make_shortcut_submenu side_menu, "Next", "edit2_forward"
   make_shortcut_submenu side_menu, "Copy ", "edit2_copy_and_paste"
   make_shortcut_submenu side_menu, "Working time forward ", "edit2_working_time_forward"
   make_shortcut_submenu side_menu, "Working time backward ", "edit2_working_time_backward"
   make_shortcut_submenu side_menu, "Show/Hide land coefficients", "show_landcoef_or_hide"
   make_shortcut_submenu side_menu, " |", ""
   make_shortcut_submenu side_menu, "Close", "edit2_close"
   make_shortcut_submenu side_menu, "| ", ""
   make_shortcut_submenu side_menu, "Confirm", "edit2_determine"
   make_shortcut_submenu side_menu, "Delete", "edit2_delete"
   make_shortcut_submenu side_menu, "Reduction", "reduce_screen"
   make_shortcut_submenu side_menu, "Expansion", "magnify_screen"
   make_shortcut_submenu side_menu, "Help", "edit2_help"

   Set side_menu = Application.CommandBars.Add _
   (name:="side_menu_c", Position:=msoBarRight, Temporary:=True)
   make_shortcut_submenu side_menu, "Compute again", "compute_LPm_only"
End Sub

Sub make_shortcut_menu_bk() 'unused
   '----reuse Mr.maeda's code
   Dim sc_menu As CommandBarPopup
   'Dim myCBBl As CommandBarButton =====================
   On Error Resume Next
   Set sc_menu = Application.CommandBars("Cell").Controls.Add _
     (Type:=msoControlPopup, Temporary:=True, before:=1)
   sc_menu.BeginGroup = True
   sc_menu.Caption = "BFM(&B)"
   make_shortcut_submenu sc_menu, "New book", "make_book_MI"
   make_shortcut_submenu sc_menu, "New sheet", "make_sheet_MI"
   make_shortcut_submenu sc_menu, "New registration", "edit_item_newly"
   make_shortcut_submenu sc_menu, "Open", "read_data_base"
   make_shortcut_submenu sc_menu, "Edit", "edit_all_item"
   make_shortcut_submenu sc_menu, "Edit(only selected crops)", "edit_ticked_item"
   make_shortcut_submenu sc_menu, "Save", "save_data_base"
   make_shortcut_submenu sc_menu, "Farming condition(New)", "make_farmCondition_sheet"
   make_shortcut_submenu sc_menu, "Farming condition(Open)", "read_farming_condition"
   make_shortcut_submenu sc_menu, "Farming condition(Save)", "save_farming_condition"
   make_shortcut_submenu sc_menu, "LP model(Labor|fffd|Fper season|fffd|ALand|fffd|Fper season)", "make_LPtd"
   make_shortcut_submenu sc_menu, "LP model(Labor|fffd|Fper month|fffd|ALand|fffd|Fper month)", "make_LPm"
   make_shortcut_submenu sc_menu, "LP model(Labor|fffd|Fper season|fffd|ALand|fffd|Fper month)", "make_LPtd_m"
   make_shortcut_submenu sc_menu, "LP model(Labor|fffd|Fper month|fffd|ALand|fffd|Fper season)", "make_LPm_td"
   make_shortcut_submenu sc_menu, "Compute LP (Labor|fffd|Fper season|fffd|ALand|fffd|Fper season)", "compute_LPtd"
   make_shortcut_submenu sc_menu, "Compute LP(Labor|fffd|Fper month|fffd|ALand|fffd|Fper month)", "compute_LPm"
   make_shortcut_submenu sc_menu, "Compute LP(Labor|fffd|Fper season|fffd|ALand|fffd|Fper month)", "compute_LPtd_m"
   make_shortcut_submenu sc_menu, "Compute LP(Labor|fffd|Fper moth|fffd|ALand|fffd|Fper season)", "compute_LPm_td"
   make_shortcut_submenu sc_menu, "Help", "show_usage"
   make_shortcut_submenu sc_menu, "Show start menu", "show_opening_form"
   make_shortcut_submenu sc_menu, "Compute again", "compute_LPm_only"
   CommandBars("Cell").Controls("BFM(&B)").Visible = False '==========
End Sub

Sub make_shortcut_menu_in_edit()
   '----reuse Mr.maeda's code
   Dim sc_menu As CommandBarPopup
   'Dim myCBBl As CommandBarButton =====================
   On Error Resume Next
   Set sc_menu = Application.CommandBars("Cell").Controls.Add _
     (Type:=msoControlPopup, Temporary:=True, before:=1)
   sc_menu.BeginGroup = True
   sc_menu.Caption = "eDB(&e)"
   make_shortcut_submenu sc_menu, "Add(new)", "edit2_add"
   make_shortcut_submenu sc_menu, "Previous index", "edit2_backward"
   make_shortcut_submenu sc_menu, "Next index", "edit2_forward"
   make_shortcut_submenu sc_menu, "Copy", "edit2_copy_and_paste"
   make_shortcut_submenu sc_menu, "Cropping season forward", "edit2_working_time_forward"
   make_shortcut_submenu sc_menu, "Cropping season backward", "edit2_working_time_backward"
   make_shortcut_submenu sc_menu, "Display/Hide land coefficients", "show_landcoef_or_hide"
   make_shortcut_submenu sc_menu, "--", ""
   make_shortcut_submenu sc_menu, "Close", "edit2_close"
   make_shortcut_submenu sc_menu, "--", ""
   make_shortcut_submenu sc_menu, "Confirm", "edit2_determine"
   make_shortcut_submenu sc_menu, "Delete", "edit2_delete"
   make_shortcut_submenu sc_menu, "Reduction of screen", "reduce_screen"
   make_shortcut_submenu sc_menu, "Expansion of screen", "magnify_screen"
   make_shortcut_submenu sc_menu, "Help", "edit2_help"
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
End Sub

Sub make_shortcut_submenu(extMenu, name As String, cmd As String)
   Set myCBB = extMenu.Controls.Add(Type:=msoControlButton)
   'myCBB.BeginGroup = True
   myCBB.Style = msoButtonCaption
   myCBB.Caption = name: myCBB.OnAction = cmd
End Sub

Sub delete_CheckBox()
   On Error Resume Next
   For Each cb In ActiveSheet.CheckBoxes
      cb.Delete
   Next
End Sub

Sub set_displayedString()
    ActiveSheet.Labels.Add(205.2, 132.6, 77.4, 46.8).Select
    ActiveSheet.Shapes("Label 6").Select
    Selection.Characters.Text = "Period of labor constraint"
End Sub

Sub set_width_of_CheckBox()
    ActiveSheet.Shapes("Check Box 507").Select
    Selection.ShapeRange.IncrementTop 1.2
    Range("B9").Select
End Sub

Sub show_usage()
   d_cr = vbCr & vbCr
   MsgBox _
   "|fffd|P|fffd|DWhen you first or newly create (put) a farming index" & d_cr & _
   "|fffd|@|fffd|@Put index after openning the sheet|fffd|uEdit index|fffd|vby clicking the menu [Farming index]-[Edit|fffd|n" & d_cr & _
   "|fffd|Q|fffd|DTo know how to use the sheet [Edit index], see [Help] in [Edit index]" & d_cr & _
   "|fffd|R|fffd|DWhen you modify/add/delete a farming index" & d_cr & _
   "|fffd|@|fffd|@After reading the farming index by [Farming index]-[Open]" & d_cr & _
   "|fffd|@|fffd|@You can open the sheet [Farming index] by [Farming index]-[Edit|fffd|n" & d_cr & _
   "|fffd|S|fffd|DPut labor and land conditions by selecting the menut [Farming conditions]" & d_cr & _
   "|fffd|T|fffd|DCheck the buttons in A line for farming indexes that you want to use for modeling" & d_cr & _
   "|fffd|U|fffd|DYou can calculate the optimal farming plan by selecting [Creat optimal farming plan]"
End Sub

Sub add_heading()
   With Sheets("iEdit")
   .Cells(2, 77) = "Crop"
   .Cells(2, 78) = "Crop to switch"
   .Cells(2, 79) = "Beginning of cropping"
   .Cells(2, 80) = "End of cropping"
   .Cells(2, 81) = "Profit in the 1st year"
   .Cells(2, 82) = "2nd year"
   .Cells(2, 83) = "3rd year"
   .Cells(2, 84) = "4th year"
   .Cells(2, 85) = "5th year"
   .Cells(2, 86) = "6th year"
   .Cells(2, 87) = "7th year"
   .Cells(2, 88) = "8th year"
   .Cells(2, 89) = "9th year"
   .Cells(2, 90) = "10th year"
   .Cells(2, 91) = "Yield in 1st year"
   .Cells(2, 92) = "2nd year"
   .Cells(2, 93) = "3rd year"
   .Cells(2, 94) = "4th year"
   .Cells(2, 95) = "5th year"
   .Cells(2, 96) = "6th year"
   .Cells(2, 97) = "7th year"
   .Cells(2, 98) = "8th year"
   .Cells(2, 99) = "9th year"
   .Cells(2, 100) = "10th year"
   .Cells(2, 101) = "Unit price in 1st year"
   .Cells(2, 102) = "2nd year"
   .Cells(2, 103) = "3rd year"
   .Cells(2, 104) = "4th year"
   .Cells(2, 105) = "5th year"
   .Cells(2, 106) = "6th year"
   .Cells(2, 107) = "7th year"
   .Cells(2, 108) = "8th year"
   .Cells(2, 109) = "9th year"
   .Cells(2, 110) = "10th year"
   End With
End Sub

Sub save_data_base(Optional fname = "")
   Application.ScreenUpdating = False
   On Error GoTo err1
   If fname = "" Then
      If ActiveWindow Is Nothing Then Exit Sub
      
      If Not sheet_exist("iData") Then
         MsgBox "There is not a sheet""iData"" Processing is stopped.", , "BFM"
         Exit Sub
      End If
      
      If [a1] <> "[MI]" Then
         Sheets("iData").Select
      End If
      
      LastRow = ActiveSheet.Cells(Rows.Count, 2).End(xlUp).Row 'Get  the line of lowermost data
   '   If LastRow = Rows.Count Then LastRow = 2
      active_row = ActiveCell.Row
      active_col = ActiveCell.Column
      
      If LastRow = 2 Then
         MsgBox "No index registered.", vbOKOnly + vbExclamation, "BFM"
         Cells(active_row, active_col).Select
   '      [a1].Select
         Exit Sub
      Else
         Application.DisplayAlerts = False
         output_file = Application.GetSaveAsFilename _
         ("", filefilter:="bfm file (*.bfm), *.bfm,agr file (*.agr), *.agr")
         If output_file = False Then Exit Sub
         On Error GoTo FA
         fname = Trim(output_file)
         If Dir(fname) <> "" Then
            ans = MsgBox("There exists already the file of the same name. Do you overwrite?", vbYesNo, "BFM")
            If ans = vbNo Then Exit Sub
         End If
      End If
   End If
   
      ext_name = Right(fname, 3)
      If ext_name = "bfm" Then max_col = 76 + 34 Else max_col = 76
      Open fname For Output As 1
      
      On Error Resume Next
      
      MF = max_col 'colmn of last field
      first_col = 3 'first column to be recorded in BFM
      If ext_name = "bfm" Then
         For j = first_col To MF - 1
            Write #1, Cells(2, j);
         Next
         Write #1, Cells(2, MF)
      End If
      For n = 3 To LastRow 'max_row 'LastRow
         For j = first_col To MF - 1
            Write #1, Cells(n, j);
         Next
         Write #1, Cells(n, MF)
      Next
      Close
      Cells(active_row, active_col).Select
      Application.DisplayAlerts = True
'   End If
   'Save the name of file in which you saved data. 2016.7.27 start
   [b1] = fname
   [b1].ShrinkToFit = True
   [b1].Font.ColorIndex = 2
   '-- end
   [a1].Font.Bold = False
   [a1].Font.ColorIndex = 0 'black
   
   Exit Sub
   
FA:
   Close
   MsgBox "Not saved correctly", vbOKOnly + vbExclamation, "BFM"
   Application.ScreenUpdating = True
err1:

End Sub

Sub resave_data_base() 'overwrite Save
   On Error GoTo err1
   If [a1] <> "[MI]" Then
      MsgBox "Run at the sheet of farming index"
      Exit Sub
   End If
   Application.ScreenUpdating = False
   LastRow = ActiveSheet.Range("B2").End(xlDown).Row
   If LastRow = Rows.Count Then LastRow = 2
   active_row = ActiveCell.Row
   active_col = ActiveCell.Column
   get_last_cell max_row, max_col
   If LastRow = 2 Then
      MsgBox "No registered index", vbOKOnly + vbExclamation, "BFM"
      [a1].Select
      Exit Sub
   Else
      Application.DisplayAlerts = False
'2013.2.19 start
      fname = [b1] 'Quote the saved file name
      If fname = "" Then 'If there is no saved file name
         save_data_base
         Exit Sub
      End If
'-- end
      ext_name = Right(fname, 3)
      If ext_name = "bfm" Then max_col = 76 + 34 Else max_col = 76
      Open fname For Output As 1
      MF = max_col 'colmn of last field
      first_col = 3 'first column to be recorded in BFM
      If ext_name = "bfm" Then
         For j = first_col To MF - 1
            Write #1, Cells(2, j);
         Next
         Write #1, Cells(2, MF)
      End If
      For n = 3 To LastRow 'max_row 'LastRow
         For j = first_col To MF - 1
            Write #1, Cells(n, j);
         Next
         Write #1, Cells(n, MF)
      Next
      Close
      Cells(active_row, active_col).Select
      Application.DisplayAlerts = True
   End If
   'Save the name of file in which you saved data. 2013.2.19 start
   [b1] = fname
   [b1].ShrinkToFit = True
   [b1].Font.ColorIndex = 2
'   MsgBox "saved in " & fname & vbCr & vbCr
   [a1].Font.Bold = False
   [a1].Font.ColorIndex = 0 'black
   '-- end
   Exit Sub
FA:
   Close
   MsgBox "Not save properly", vbOKOnly + vbExclamation, "BFM"
   Application.ScreenUpdating = True
err1:
End Sub

Sub read_data_base()
   Dim buf As String, tmp As Variant, stmp As Variant
   
   If ActiveWindow Is Nothing Then Workbooks.Add
   If sheet_exist("iData") Then
      If ActiveSheet.name <> "iData" Then Sheets("iData").Select
   Else
      make_sheet_MI
   End If
   
   ActiveSheet.Unprotect
   
   Application.ScreenUpdating = False
   input_file = Application.GetOpenFilename _
   ("bfm file (*.bfm), *.bfm,agr file (*.agr), *.agr")
   Application.DisplayAlerts = False
   If input_file = False Then Exit Sub
   
   fname = Trim(input_file)
   ext_name = Right(fname, 3)
   If ext_name = "bfm" Then LastCol = 76 + 34 Else LastCol = 76
   
   'Save the opened file name 2013.2.19 start
   [b1] = fname
   [b1].ShrinkToFit = True
   [b1].Font.ColorIndex = 2
   '-- end
   Open fname For Input As 1
   Dim n As Integer
   LastRow = count_LastRow
   
   If LastRow > 2 Then
      Rows("3:" & LastRow & "").ClearContents
      delete_CheckBox
   End If
   n = 2
   no = 0
   
   ver_057 = True
   'Check if there is the field name "land coefficient" in the bfm file. If not, set the value of land coefficient to 1, and ver_057 = False
   If ext_name = "bfm" Then
      Line Input #1, tmp
      If InStr(tmp, "Land coefficient") = 0 Then ver_057 = False 'Up to Ver0.57
      '2013.10.3 start
      If InStr(tmp, "Crop to switch") > 0 Then
         ver_325 = False
      Else
         ver_325 = True 'Ver3.25 and after, "Crop to switch"|fffd||fffd|"Rice for main food"
      End If
      '-- end
   Else 'agr file
      ver_057 = False
   End If
   While Not EOF(1) 'Read from the 2nd line of bfm file
''   For i = idata To ndata - 1 'from 2nd line in bfm file, from 1st line in agr file
      n = n + 1
      If n > 2 Then no = no + 1
      If n = 2 Then Cells(n, 2) = "No." Else Cells(n, 2) = no
      Line Input #1, buf
      buf = Replace(buf, """", "")
      tmp = Split(buf, ",")
      Range(Cells(n, 3), Cells(n, LastCol)) = tmp
   Wend
''   Next i
   
   'Convert string-typed numeric data into number-typed data.
   For i = 3 To n
      For j = 8 To 71
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
      For j = 74 To 76
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
      For j = 79 To 80
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
   Next i
   
   'Merge "Crop system","Surveyed size" and "Variety" into "Crop system, Variety, etc." 2014.1.7
   For i = 3 To n
      If Cells(i, 6) <> "" Then Cells(i, 5) = Cells(i, 5) & "|fffd|@" & Cells(i, 6): Cells(i, 6) = ""
      If Cells(i, 7) <> "" Then Cells(i, 5) = Cells(i, 5) & "|fffd|@" & Cells(i, 7): Cells(i, 7) = ""
   Next i
   
   Columns("a").ColumnWidth = 2.8
   Columns("b").ColumnWidth = 3.1
   make_check_button n
   If [a1] <> "[SI]" Then [a1] = "[MI]"
   Cells(count_LastRow + 1, 2).Select
'   If append_mode Then ActiveWindow.ScrollRow = LastRow + 1
EX:
   ActiveWindow.LargeScroll toleft:=10
   Application.ScreenUpdating = True
   Close
   
   ' 2013.10.3
   If data_edit Then
      MsgBox "Since the opened data file of farming index is saved as Ver 3.25 or before" & vbCr & vbCr & _
      "Modified the data content (Line[BZ]) of data category|fffd|uRice for main food|fffd|v" & vbCr & vbCr & _
      "Confirm and correct the mistakes if any"
   End If
   '-- end
   
   Exit Sub
SX:
   MsgBox "Data format is different", vbOKOnly + vbCritical, "BFM"
   Resume EX
err1:
   cnt = cnt + 1
   s_name = "iData" & cnt
   Resume
err2:
   Workbooks.Add
   Application.DisplayAlerts = False
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   make_sheet_MI
   Resume
End Sub

Sub read_and_add_data_base()
   Dim buf As String, tmp As Variant, stmp As Variant
   
   If ActiveWindow Is Nothing Then Workbooks.Add
   If sheet_exist("iData") Then
      If ActiveSheet.name <> "iData" Then Sheets("iData").Select
   Else
      make_sheet_MI
   End If
   
   ActiveSheet.Unprotect
   
   Application.ScreenUpdating = False
   input_file = Application.GetOpenFilename _
   ("bfm file (*.bfm), *.bfm,agr file (*.agr), *.agr")
   Application.DisplayAlerts = False
   If input_file = False Then Exit Sub
   
   fname = Trim(input_file)
   ext_name = Right(fname, 3)
   If ext_name = "bfm" Then LastCol = 76 + 34 Else LastCol = 76
   
   'Save the opened file name 2013.2.19 start
   [b1] = fname
   [b1].ShrinkToFit = True
   [b1].Font.ColorIndex = 2
   '-- end
   Open fname For Input As 1
   Dim n As Integer
   LastRow = count_LastRow
   
   n = LastRow 'Row number of the cell where the last index written.
   no = n - 2 'number of index
   
   ver_057 = True
   'Check if there is the field name "land coefficient" in the bfm file. If not, set the value of land coefficient to 1, and ver_057 = False
   If ext_name = "bfm" Then
      Line Input #1, tmp
      If InStr(tmp, "Land coefficient") = 0 Then ver_057 = False 'Up to Ver0.57
      '2013.10.3 start
      If InStr(tmp, "Crop to switch") > 0 Then
         ver_325 = False
      Else
         ver_325 = True 'Ver3.25 and after, "Crop to switch"|fffd||fffd|"Rice for main food"
      End If
      '-- end
   Else 'agr file
      ver_057 = False
   End If
   
   While Not EOF(1) 'Read from the 2nd line of bfm file
''   For i = idata To ndata - 1 'from 2nd line in bfm file, from 1st line in agr file
      n = n + 1
      If n > 2 Then no = no + 1
      If n = 2 Then Cells(n, 2) = "No." Else Cells(n, 2) = no
      Line Input #1, buf
      buf = Replace(buf, """", "")
      tmp = Split(buf, ",")
      Range(Cells(n, 3), Cells(n, LastCol)) = tmp
      
     
   Wend
''   Next i
   
   'Convert string-typed numeric data into number-typed data.
   For i = LastRow + 1 To n
      For j = 8 To 71
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
      For j = 74 To 76
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
      For j = 79 To 80
         If Cells(i, j) <> "" Then Cells(i, j) = Val(Cells(i, j))
      Next j
   Next i
   
   'Merge "Crop system","Surveyed size" and "Variety" into "Crop system, Variety, etc." 2014.1.7
   For i = LastRow + 1 To n
      If Cells(i, 6) <> "" Then Cells(i, 5) = Cells(i, 5) & "|fffd|@" & Cells(i, 6): Cells(i, 6) = ""
      If Cells(i, 7) <> "" Then Cells(i, 5) = Cells(i, 5) & "|fffd|@" & Cells(i, 7): Cells(i, 7) = ""
   Next i
   
   Columns("a").ColumnWidth = 2.8
   Columns("b").ColumnWidth = 3.1
   make_check_button n
   If [a1] <> "[SI]" Then [a1] = "[MI]"
   Cells(count_LastRow + 1, 2).Select
'   If append_mode Then ActiveWindow.ScrollRow = LastRow + 1
EX:
   ActiveWindow.LargeScroll toleft:=10
   Application.ScreenUpdating = True
   Close
   
   ' 2013.10.3
   If data_edit Then
      MsgBox "Since the opend data file of farming index is saved as Ver 3.25 or before" & vbCr & vbCr & _
      "Modified the data content (Line[BZ]) of data category|fffd|uRice for main food|fffd|v" & vbCr & vbCr & _
      "Confirm and correct the mistakes if any"
   End If
   '-- end
   
   Exit Sub
SX:
   MsgBox "Data format is different", vbOKOnly + vbCritical, "BFM"
   Resume EX
err1:
   cnt = cnt + 1
   s_name = "iData" & cnt
   Resume
err2:
   Workbooks.Add
   Application.DisplayAlerts = False
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   make_sheet_MI
   Resume
End Sub

Sub make_sheet_MI()
   d_cr = vbCr & vbCr
   Application.ScreenUpdating = False
   On Error GoTo err1
   If sheet_exist("iData") Then
      Set active_sheet = ActiveSheet
      Sheets("iData").Select
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      ans = MsgBox("There exists already the sheet of ""iData""." & d_cr & _
      "Executing this menu deletes the farming indexes in the sheet""iData""." & d_cr & _
      "Do you continue?" & d_cr, vbYesNo)
      If ans = vbYes Then
         Sheets("iData").Select
         delete_all_item
         If sheet_exist("iEdit") Then
            Application.DisplayAlerts = False
            Sheets("iEdit").Delete
            Application.DisplayAlerts = True
         End If
         global_itmp = 1
      Else
         'active_sheet.Select
         End
         'Exit Sub
      End If
   Else
      ThisWorkbook.Sheets("iData").Copy after:=ActiveSheet
      global_itmp = 1
   End If
   'print_index_name
   On Error GoTo 0
   Columns("a").ColumnWidth = 2.8
   Columns("b").ColumnWidth = 3.1
   [c3].Select 'by ooisi 2012.12.18
   ActiveWindow.FreezePanes = True
   Exit Sub
err1:
   Workbooks.Add
   Application.DisplayAlerts = False
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   On Error GoTo 0
   Resume 'Next
End Sub

Sub delete_all_item()
   target_line = 3
   While Cells(target_line, 2) <> ""
      Rows(target_line).Delete Shift:=xlUp
   Wend
   delete_CheckBox
End Sub

Sub make_book_MI()
   Workbooks.Add
   Application.DisplayAlerts = False 'On a computer screen user does not confirm the result processed by this program.
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   make_sheet_MI
End Sub

Sub print_index_name()
   Cells(2, 2) = "No."
   Cells(2, 3) = "area"
   Cells(2, 4) = "crop list"
   Cells(2, 5) = "cropping type"
   Cells(2, 6) = "coverage"
   Cells(2, 7) = "cultivar"
   Cells(2, 8) = "yield"
   Cells(2, 9) = "unit cost"
   Cells(2, 10) = "gross income"
   Cells(2, 11) = "cost of seeds and seedlings"
   Cells(2, 12) = "fertilizer cost"
   Cells(2, 13) = "cost of farm tools"
   Cells(2, 14) = "cost of agro-chemicals and sanitation"
   Cells(2, 15) = "cost of materials"
   Cells(2, 16) = "cost of repairs"
   Cells(2, 17) = "cost of power, fuel and light"
   Cells(2, 18) = "depreciation"
   Cells(2, 19) = "packing and fare fee"
   Cells(2, 20) = "employment cost"
   Cells(2, 21) = "rental cost"
   Cells(2, 22) = "cost of land improvement"
   Cells(2, 23) = "other costs"
   Cells(2, 24) = "income"
   Cells(2, 25) = "variable cost"
   Cells(2, 26) = "check1"
   Cells(2, 27) = "check2"
   Cells(2, 28) = "check3"
   Cells(2, 29) = "family labor"
   Cells(2, 30) = "Early January"
   Cells(2, 31) = "Mid-January"
   Cells(2, 32) = "Late january"
   Cells(2, 33) = "Early February"
   Cells(2, 34) = "Mid-February"
   Cells(2, 35) = "Late February"
   Cells(2, 36) = "Early March"
   Cells(2, 37) = "Mid- March"
   Cells(2, 38) = "Late March"
   Cells(2, 39) = "Early April"
   Cells(2, 40) = "Mid-April"
   Cells(2, 41) = "Late April"
   Cells(2, 42) = "Early May"
   Cells(2, 43) = "Mid- May"
   Cells(2, 44) = "Late May"
   Cells(2, 45) = "Early June"
   Cells(2, 46) = "Mid-June"
   Cells(2, 47) = "Late June"
   Cells(2, 48) = "Early July"
   Cells(2, 49) = "Mid-July"
   Cells(2, 50) = "Late July"
   Cells(2, 51) = "Early August"
   Cells(2, 52) = "Mid-August"
   Cells(2, 53) = "Late August"
   Cells(2, 54) = "Early September"
   Cells(2, 55) = "Mid-Septenber"
   Cells(2, 56) = "Late September"
   Cells(2, 57) = "Early October"
   Cells(2, 58) = "Mid-October"
   Cells(2, 59) = "Late October"
   Cells(2, 60) = "Early November"
   Cells(2, 61) = "Mid-November"
   Cells(2, 62) = "Late November"
   Cells(2, 63) = "Early December"
   Cells(2, 64) = "Mid-December"
   Cells(2, 65) = "Late December"
   Cells(2, 66) = "employed labor hours"
   Cells(2, 67) = "|fffd|`"
   Cells(2, 68) = "|fffd|a"
   Cells(2, 69) = "|fffd|b"
   Cells(2, 70) = "|fffd|c"
   Cells(2, 71) = "|fffd|d"
   Cells(2, 72) = "|fffd|e"
   Cells(2, 73) = "|fffd|f"
   Cells(2, 74) = "|fffd|g"
   Cells(2, 75) = "|fffd|h"
   Cells(2, 76) = "|fffd|i"
End Sub

Sub index_help()
   d_cr = vbCr & vbCr
   MsgBox _
   "(1) When you create(input) a first or new management index, " & d_cr & _
   "    Put a check in the management index of crop list to be used to the model" & d_cr & _
   "(2) When you click the Edit button, the index edit sheet appears" & d_cr & _
   "  |fffd|@Then, add, delete, and modify the management indexes." & d_cr & _
   "(3) You can save the added and modified management index data to a file by clicking the Save button. " & d_cr & _
   "    The file is a text file with extension A." & d_cr & _
   "(4) Read the management index data file with Open button" & d_cr & _
   "    and add it to the sheet."
End Sub

Sub make_check_button(num As Integer)
   Const row_height As Integer = 16.2
   ReDim ar(num) As Object
   For i = 3 To num
      new_check_button i
   Next i
End Sub

Sub new_check_button(i)
   Dim s As Object, r As Object
   Set r = Cells(i, 1)
   Set s = ActiveSheet.CheckBoxes.Add(r.Left, r.Top, r.Width, 0) 'r.Height)
   s.Select
   Selection.ShapeRange.Fill.Visible = msoTrue
   Selection.ShapeRange.Fill.Solid
   Selection.ShapeRange.Fill.ForeColor.SchemeColor = 42 'light blue '48 blue
   Selection.Characters.Text = "" 'name on the right of check box
   With Selection
      .Value = xlOff 'Set the default to off
      .LinkedCell = r.Address 'Set r to the cell that displays the range("$a$5").value
   End With
   tmp = s.Height
   Rows(i & ":" & i).RowHeight = tmp * 1.05
   Selection.ShapeRange.IncrementTop tmp * 0.05 'Shift downward
End Sub

Sub new_check_button2(i, j)
   Dim s As Object, r As Object
   Cells(i, j).Select
   tmp = Rows(i).RowHeight
   Columns(j).ColumnWidth = tmp / 5
   Set r = Cells(i, j)
   Set s = ActiveSheet.CheckBoxes.Add(r.Left, r.Top, r.Width, r.Height)
   s.Select
   Selection.ShapeRange.Fill.Visible = msoTrue
   Selection.ShapeRange.Fill.Solid
   Selection.ShapeRange.Fill.ForeColor.SchemeColor = 48 'color
   Selection.Characters.Text = "" 'name on the right of check box
   With Selection
      .Value = xlOff
      .LinkedCell = r.Address
   End With
End Sub

Sub make_varying_data_bk() 'Set temporarily the data of profit coefficients for 10 years.
   On Error GoTo err1
   i = ActiveCell.Row '5
   j1 = 10: j2 = 25
   av = Cells(i, j1) - Cells(i, j2)
   sd = (av ^ 1.1) * 0.2
   ReDim tmp2(10) As Long
   For j = 1 To 10
      tmp2(j) = av + normal_random * sd
      If tmp2(j) < 0 Then tmp2(j) = 10
      Sum = Sum + tmp2(j)
   Next j
   rnd_av = Sum / 10
   diff = rnd_av / av
   For j = 79 To 88
      Cells(i, j) = Int(tmp2(j - 78) / diff)
   Next j
   Exit Sub
err1:
   MsgBox "Please run from the management index sheet"
End Sub

Sub make_farmCondition_sheet()
   Application.ScreenUpdating = False
   Application.DisplayAlerts = False
   On Error GoTo err1
   If sheet_exist("fCondition") Then
      Sheets("fCondition").Select
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False
      ans = MsgBox("Do you really want to reset the farming conditions to the initial value ?", vbYesNo)
      If ans = vbYes Then
         If Worksheets.Count > 1 Then
            ActiveSheet.Delete
            ThisWorkbook.Sheets("fCondition").Copy after:=ActiveSheet
         Else
            ActiveSheet.name = "sheet1"
            ThisWorkbook.Sheets("fCondition").Copy after:=ActiveSheet
            Sheets("sheet1").Delete
         End If
      Else
         Exit Sub
      End If
   Else
      ThisWorkbook.Sheets("fCondition").Copy after:=ActiveSheet
      Range("C1").ColumnWidth = 0.06
   End If
   'print_index_name
   [a1].Select
   auto_zoom 'by ooisi 2013.2.19
   
   Sheets("fCondition").Protect AllowFormattingCells:=True, _
   AllowFormattingColumns:=True, AllowFormattingRows:=True
   
   Exit Sub
err1:
   Workbooks.Add
   Application.DisplayAlerts = False
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   On Error GoTo 0
   Resume 'Next
End Sub

Sub make_farmCondition_sheet_BK() 'Input farming condition.
   Dim s As Object
   On Error GoTo err1
   Sheets("fCondition").Select
   [a1].Select
   Exit Sub
err1:
   make_sheet "fCondition"
   write_cell_data_2
   Set s = [d4:e4]: set_color_frame_unlock_to_1row s
   Set s = [d7:g7]: set_color_frame_unlock_to_1row s
   Set s = [d10:f15]: set_color_frame_unlock s
   Set s = [d17:d17]: set_color_frame_unlock_to_1cell s
   Set s = [d18:d18]: set_color_frame_unlock_to_1cell s
   Set s = [d20:d20]: set_color_frame_unlock_to_1cell s
   Set s = [d21:d21]: set_color_frame_unlock_to_1cell s
   Columns(1).ColumnWidth = Columns(256).ColumnWidth * 0.9
   Columns(2).ColumnWidth = Columns(256).ColumnWidth * 1.2
   Columns(3).ColumnWidth = Columns(256).ColumnWidth * 0.4
   Columns(4).ColumnWidth = Columns(256).ColumnWidth * 1.4
   Columns(5).ColumnWidth = Columns(256).ColumnWidth * 1.8
   Columns(6).ColumnWidth = Columns(256).ColumnWidth * 1.7
   Columns(7).ColumnWidth = Columns(256).ColumnWidth * 1.6
   ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, DrawingObjects:=True, Contents:=True, Scenarios:=True
   Resume
End Sub

Sub make_sheet(tmp As String)
   On Error GoTo err1
   ActiveWorkbook.Sheets.Add
   ActiveSheet.name = tmp
   Exit Sub
err1:
   Workbooks.Add
   Application.DisplayAlerts = False 'Computer does not show msgbox where warning, confirm etc. is written.
   While Worksheets.Count > 1: ActiveSheet.Delete: Wend
   Application.DisplayAlerts = True
   Resume Next
End Sub

Sub write_cell_data_2()
   ActiveSheet.Cells.ClearContents
   Cells(1, 1) = "fCondition"
   Cells(4, 2) = "family labor"
   Cells(7, 2) = "employment labor"
   Cells(9, 2) = "farmland"
   Cells(10, 2) = "1) rice field"
   Cells(11, 2) = "2) upland crop farm"
   Cells(12, 2) = "3) glazing land"
   Cells(13, 2) = "4) tree crop farm"
   Cells(14, 2) = "5) house, etc."
   Cells(15, 2) = "6) land"
   Cells(17, 2) = "employment use"
   Cells(18, 2) = "rented land use"
   Cells(20, 2) = "crop rotation assignment"
   Cells(21, 2) = "crop rotatoin assignment rate"
   Cells(3, 4) = "number of person (person)"
   Cells(4, 4) = "1.8"
   Cells(6, 4) = "wage (1,000yen/day|fffd|j"
   Cells(7, 4) = "9"
   Cells(9, 4) = "own land(ha)"
   Cells(10, 4) = "1.5"
   Cells(11, 4) = "1.2"
   Cells(12, 4) = "5"
   Cells(13, 4) = "3"
   Cells(14, 4) = "0.5"
   Cells(15, 4) = "1.2"
   Cells(17, 4) = "0"
   Cells(18, 4) = "0"
   Cells(20, 4) = "0"
   Cells(21, 4) = "30"
   Cells(3, 5) = "working hours(hour/day)"
   Cells(4, 5) = "8"
   Cells(6, 5) = "working hours(hour/day)"
   Cells(7, 5) = "8"
   Cells(9, 5) = "rented land upper limit(ha)"
   Cells(10, 5) = "3"
   Cells(11, 5) = "2.4"
   Cells(12, 5) = "10"
   Cells(13, 5) = "6"
   Cells(14, 5) = "1"
   Cells(15, 5) = "2.4"
   Cells(17, 5) = "use|fffd|F 1"
   Cells(18, 5) = "don't use|fffd|F 0"
   Cells(20, 5) = "presence|fffd|F 1    absence|fffd|F 0"
   Cells(21, 5) = "|fffd||fffd|"
   Cells(6, 6) = "employment upper limit(day/month)"
   Cells(7, 6) = "60"
   Cells(9, 6) = "land rent(1,000 yen/10a)"
   Cells(10, 6) = "35"
   Cells(11, 6) = "30"
   Cells(12, 6) = "25"
   Cells(13, 6) = "30"
   Cells(14, 6) = "40"
   Cells(15, 6) = "30"
   Cells(6, 7) = "employment upper limit(day/ten-day period)"
   Cells(7, 7) = "20"
End Sub

Sub write_cell_data() 'The old format of the farming condition sheet.
   ActiveSheet.Cells.ClearContents
   Cells(1, 1) = "fCondition"
   Cells(2, 2) = "Please fill the available labor and the total farmland area."
   Cells(3, 2) = "And, if you want to use the employment or a rented land, please fill the relevant items."
   Cells(5, 2) = "Family labor (person)"
   Cells(5, 4) = "1"
   Cells(5, 5) = "person"
   Cells(6, 2) = "working hours per day(hr)"
   Cells(6, 4) = "2"
   Cells(6, 5) = "hr"
   Cells(7, 2) = "total farmland area (ha)"
   Cells(7, 4) = "2"
   Cells(7, 5) = "ha"
   Cells(8, 2) = "leased land upper limit(ha)"
   Cells(8, 4) = "3"
   Cells(8, 5) = "ha"
   Cells(11, 2) = "The period of use of employment and rented land."
   Cells(12, 3) = "Whole year"
   Cells(12, 4) = "January"
   Cells(12, 5) = "February"
   Cells(12, 6) = "March"
   Cells(12, 7) = "April"
   Cells(12, 8) = "May"
   Cells(12, 9) = "June"
   Cells(12, 10) = "July"
   Cells(12, 11) = "August"
   Cells(12, 12) = "September"
   Cells(12, 13) = "October"
   Cells(12, 14) = "November"
   Cells(12, 15) = "December"
   Cells(12, 16) = "daily wages|fffd|i1,000 yen|fffd|j"
   Cells(12, 17) = "monthly salary|fffd|i1,000 yen|fffd|j"
   Cells(13, 2) = "employment|fffd|imonthly|fffd|j"
   Cells(14, 2) = "employment|fffd|iten-day period|fffd|jEarly"
   Cells(15, 2) = "|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@Mid"
   Cells(16, 2) = "|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@Late"
   Cells(17, 2) = "rented land|fffd|imonthly|fffd|j"
   Cells(18, 2) = "rented land|fffd|iten-day period|fffd|jEarly"
   Cells(19, 2) = "|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@Mid"
   Cells(20, 2) = "|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@|fffd|@Late"
End Sub

Sub tableau_sheet_copy() 'OK 2006.2.7
   If sheet_exist("(Table)") = False Then
      ThisWorkbook.Sheets("(Table)").Copy _
      before:=ActiveWorkbook.Sheets("(Model)")
   End If
End Sub

Function is_selected_item()
   Application.ScreenUpdating = False
   is_selected_item = False
    If sheet_exist("iData") Then
        Sheets("iData").Select
    Else
        make_sheet_MI
        Application.ScreenUpdating = True
        MsgBox "Because there is no farm management index sheet, it is created." & vbCr _
        & vbCr & "Please open the file of farm management index, and check the crop list, " & vbCr _
        & vbCr & "and run the menu again."
        read_data_base
        Exit Function
    End If
   If [bz2] = "switching crop" Then
      MsgBox "The management index data are put in the old format." & vbCr & vbCr & _
      "Please run a sub-menu [conversion] in the menu [Z-BFM]."
      End
   End If
   Application.ScreenUpdating = False
   LastRow = ActiveSheet.Range("b2").End(xlDown).Row 'Get the row number of lowermost cell of the index data.
   For i = 3 To LastRow
      If Cells(i, 1) = True Then is_selected_item = True: Exit Function
   Next i
   Application.ScreenUpdating = True
'err1:
End Function

Sub make_formula_model(c_proc, model_sheet_name As String, model_type, Fmodel_type, Optional data_check As Boolean = False)
   'Describe the land constraint in less than 4 lines, the labor constraint in less than 21 lines, the rented land constraint in less than 61 lines,
   'and the employment constraint in less than 70 lines. Finally, delete the row whose column D is blank and shift upward.
   c_proc = 0 'The number of all processes.
   real_proc = 0 'The number of working processes.
   Set selected_item_sheet = ActiveSheet
   LastRow = ActiveSheet.Range("b2").End(xlDown).Row
   For i = 3 To LastRow
      If Cells(i, 1) = True Then real_proc = real_proc + 1 'Count the number of selected working processes.
   Next i
   'model_type = "10days"
   If model_type = "10days" Then l_period = 36 Else l_period = 12 'The number of labor constraint formula
   If Fmodel_type = "10days" Then f_period = 36 Else f_period = 12 'The number of land constraint formula 2009.10.25
   On Error GoTo err1
   'Set model_sheet = Sheets("LPm")
   Set model_sheet = Sheets(model_sheet_name)
   On Error GoTo 0
   
   Sheets("(Model)").Visible = True
   
   model_sheet.Cells.ClearContents
   'Copy the name of the farm land category
   Const Lkind As Integer = 6
   Dim land_kind(Lkind) As String, used_kind(Lkind) As Boolean
   For i = 1 To Lkind
      land_kind(i) = Mid(Sheets("fCondition").Cells(11 + i, 2), 4)
      used_kind(i) = False 'Indicators of whether or not the farm land category is used
   Next i
   'Location to insert labor constraint
   '(land constraint and rented land upper limit constraint)|fffd|~(the number of farm land categories) |fffd|{ switched crop constraint |fffd|{ cropping constraint
   rice_constraint = (f_period + 1) * Lkind + 6 'l->f 2009.10.25
   cropping_constraint = (f_period + 1) * Lkind + 7 'l->f 2009.10.25
   labor_constraint_base = (f_period + 1) * Lkind + 2 + real_proc * 2 'l->f 2009.10.25
   'When setting the switching crop constraint, shift a row downward, and insert the conseraint there.
   'If Sheets("fCondition").[d22] = 1 Or Sheets("fCondition").[d22] = "Yes" Then
   If InStr(" 1Yes", Sheets("fCondition").[d22]) > 1 Then 'empty string"" return 1.
      no_rice = True
   Else
      no_rice = False
   End If
   'Creation of the left-hand side of the labor constraint formula.
   'The constraints' value fluctuates by month or ten-day periods.|fffd|imanner added in the ver 0.58|fffd|j
   With Sheets("fCondition")
       worker = .[d4] * .[e4]
       For k = 1 To l_period / 2 'January|fffd|`June
          If model_type = "10days" Then
             t_hour = .[FC_full].Cells(k, 1) * worker
          Else
             t_hour = (.[FC_full].Cells((k - 1) * 3 + 1, 1) _
                       + .[FC_full].Cells((k - 1) * 3 + 2, 1) _
                       + .[FC_full].Cells((k - 1) * 3 + 3, 1)) * worker
          End If
          ii = labor_constraint_base + k + 4 'convert the constraint number into the row number
          model_sheet.Cells(ii, 4) = t_hour & " >= 0" '----- 2006.3.29
          If model_type = "10days" Then kk = month_10days(k) Else kk = k
          model_sheet.Cells(ii, 3) = "Labor " & kk 'Name of labor constraint
       Next k
       For k = l_period / 2 + 1 To l_period 'July|fffd|`December
          If model_type = "10days" Then
             t_hour = .[FC_full].Cells(k - 18, 5) * worker
          Else
             t_hour = (.[FC_full].Cells((k - 7) * 3 + 1, 5) _
                       + .[FC_full].Cells((k - 7) * 3 + 2, 5) _
                       + .[FC_full].Cells((k - 7) * 3 + 3, 5)) * worker
          End If
          ii = labor_constraint_base + k + 4 'convert the constraint number into the row number
          model_sheet.Cells(ii, 4) = t_hour & " >= 0" '----- 2006.3.29
          If model_type = "10days" Then kk = month_10days(k) Else kk = k
          model_sheet.Cells(ii, 3) = "Labor " & kk 'Name of labor constraint
       Next k
   End With
   
   model_sheet.Cells(4, 4) = "z ="
   
   If data_check Then GoTo data_check_done '2017.6.7
   
'2013.2.25 start --
   For i = 3 To LastRow
      If (Cells(i, 1) = True) And Val(Cells(i, "BV")) > 0 Then 'Do not check the crop whose land coefficient is 0.
         If Cells(i, 5) = "" Then icrop = "" Else icrop = "(" & Cells(i, 5) & ")"
         
'         'Next if-statement is only for Japanese edition. by ooisi 2013.10.3 start --
'         If (Cells(i, 77) = "rice field") And (Cells(i, 78) <> "correspond" And Cells(i, 78) <> "not correspond") Then
'            ans = MsgBox("crop list|fffd|F" & Cells(i, 4) & icrop & " is" & vbCr & vbCr & _
'            "Data that specify whether or not it corresponds to rice for staple food|fffd|iThe cell of the index edit sheet|fffd|mK12|fffd|n|fffd|j" & vbCr & vbCr & _
'            "are not entered. Without these data, when you compute the optimal farming plan," & vbCr & vbCr & _
'            "the influece of the adjustment system of rice production on rice field uses will not be taken into consideration" & vbCr & vbCr & _
'            "whereby processing errors regarding subsidy and two-crop systems" & vbCr & vbCr & _
'            "will arise" & vbCr & vbCr & _
'            "Please run again after supplementing data." & vbCr)
'            End
'         End If
'         '-- end
                  
         If (Val(Cells(i, 79)) = 0 Or Val(Cells(i, 80)) = 0) Then
            ans = MsgBox("crop list|fffd|F" & Cells(i, 4) & icrop & vbCr & vbCr & _
            "Data of the beginning and the end of field use are not input." & vbCr & vbCr & _
            "Without these data, a model will be created under the condition that the field is used from January to December," & vbCr & vbCr & _
            "and processing errors on land uses such as two-crop system" & vbCr & vbCr & _
            "may arise." & vbCr & vbCr & _
            "Do you really want to cancel the operation and modify the data ?" & vbCr & vbCr & _
            "Click [Yes] to cancel, and [No] to continue," & vbCr & vbCr & _
            "respectively.", vbYesNo, "BFMe")
            If ans = vbYes Then
               End
            End If
         Else
            Set c2 = Sheets("fCondition").[d20] 'insert and comment out next 3 lines on 2017.4.20
'            With Sheets("fCondition").Range("b1:b28")
'               Set c2 = .Find("use of rented land") ', LookIn:=xlValues) |fffd||fffd| comment out LookIn 2013.5.7
'            End With
            land_type = Cells(i, "by")
            With Sheets("fCondition").Range("b1:b28")
               Set c = .Find(land_type) ', LookIn:=xlValues) |fffd||fffd| comment out LookIn 2013.5.7
               If Not c Is Nothing Then
                  If c.Offset(0, 2) = 0 And c.Offset(0, 3) = 0 Then
                     ans = MsgBox("crop list|fffd|F" & Cells(i, 4) & "(" & Cells(i, 5) & ") is supposed to be planted in" & vbCr & vbCr & _
                     land_type & ", while there is no owned or rented land for" & land_type & "." & vbCr & vbCr & _
                     "Do you really want to cancel the operation and modify the data?" & vbCr & vbCr & _
                     "Click [Yes] to cancel and [No] to continue, respectively.", vbYesNo, "BFMe")
                     If ans = vbYes Then
                        End
                     End If
                  End If
               End If
               If Not c2 Is Nothing Then
                  If c.Offset(0, 2) = 0 And c.Offset(0, 3) > 0 And c2.Value = "No" Then
                     ans = MsgBox("crop list|fffd|F" & Cells(i, 4) & "(" & Cells(i, 5) & ") is supposed to be planted in" & vbCr & vbCr & _
                     land_type & ". There is no owned land and rented land is supposed not to be used" & vbCr & vbCr & _
                     land_type & "." & vbCr & vbCr & _
                     "Do you really want to cancel the operation and modify the data?" & vbCr & vbCr & _
                     "Click [Yes] to cancel and [No] to continue, respectively.", vbYesNo, "BFMe")
                     If ans = vbYes Then
                        End
                     End If
                  End If
               End If
            End With
         End If
      End If
   Next i
   
data_check_done: '2017.6.7
'-- end
   
   ReDim save_land_coef(real_proc)
   
   For i = 3 To LastRow
      If Cells(i, 1) = True Then
         c_proc = c_proc + 1 'Count the number of the selected working processes
         
         'Creating an objetive function
         tmp = (Cells(i, 10) - Cells(i, 25)) '/ 1000 'profit coefficient 2016.6.29
         model_sheet.Cells(4, 4) = _
         model_sheet.Cells(4, 4) & " + " & tmp & "x" & c_proc
         
         'The right-hand side of the labor constraint formula.
         For k = 1 To l_period  'Monthly aggregate and transfer of the working hours
            ii = labor_constraint_base + k + 4
            If model_type = "month" Then tmp = Cells(i, 27 + k * 3) + Cells(i, 28 + k * 3) + Cells(i, 29 + k * 3) _
               Else tmp = Cells(i, 29 + k)
            If tmp > 0 Then
               model_sheet.Cells(ii, 4) = _
               model_sheet.Cells(ii, 4) & " + " & tmp & "x" & c_proc
           End If
         Next k
         
         'The creation of the land constraints
         bgn = Cells(i, 79): iend = Cells(i, 80)
         If Cells(i, 79) = "" Or Cells(i, 79) = 0 Then bgn = 1
         If Cells(i, 80) = "" Or Cells(i, 80) = 0 Then iend = 12
         
         'Easy in the monthly model, but careful consideration in the ten-day period model is necessary.
         'In what number of the farm land category list is it located?
         Mkind = 6 'In other cases or blank
         For j = 1 To Lkind - 1
            If land_kind(j) = Cells(i, 77) Then Mkind = j: Exit For
         Next j
         used_kind(Mkind) = True
         
         land_coef = selected_item_sheet.Cells(i, 74) 'land coefficient
         save_land_coef(c_proc) = land_coef '2017.7.10
         
         model_sheet.Select
         If Fmodel_type = "10days" Then
            f_period = 36
            stmp = selected_item_sheet.Cells(i, 72)
            If stmp = "above" Or stmp = "" Then
               itmp = 1
            ElseIf stmp = "middle" Then
               itmp = 2
            Else
               itmp = 3
            End If
            bgn = (bgn - 1) * 3 + itmp
            stmp = selected_item_sheet.Cells(i, 73)
            If stmp = "up" Then
               itmp = 1
            ElseIf stmp = "middle" Then
               itmp = 2
            Else
               itmp = 3
            End If
            iend = (iend - 1) * 3 + itmp
         Else
            f_period = 12
         End If
         
         If bgn < iend Then 'In the case of start month|fffd||fffd|end month, set this period.
            For ii = bgn To iend
               k = ii + 4 + f_period * (Mkind - 1)
               If Val(land_coef) <> 0 Then
                  Cells(k, 4) = Cells(k, 4) & " + " & land_coef & "x" & c_proc
               End If
            Next ii
         ElseIf bgn = iend Then 'In the case of start month|fffd||fffd|end month, set this month.
            k = bgn + 4 + f_period * (Mkind - 1)
            If Val(land_coef) <> 0 Then
               Cells(k, 4) = Cells(k, 4) & " + " & land_coef & "x" & c_proc
            End If
         Else 'In the case of start month|fffd||fffd|end month, set from January to end month and from start month to December
            For ii = 1 To iend
               k = ii + 4 + f_period * (Mkind - 1)
               If Val(land_coef) <> 0 Then
                  Cells(k, 4) = Cells(k, 4) & " + " & land_coef & "x" & c_proc
               End If
            Next ii
            For ii = bgn To f_period
               k = ii + 4 + f_period * (Mkind - 1)
               If Val(land_coef) <> 0 Then
                  Cells(k, 4) = Cells(k, 4) & " + " & land_coef & "x" & c_proc
               End If
            Next ii
         End If
         
         selected_item_sheet.Select
      End If
   Next i
   
   'Completion of the land constraints
   'Introduction of the rented land process
   Dim rented_land(Lkind) As Single, land_rent(Lkind) As Single
   Dim owned_land(Lkind) As Single
   model_sheet.Select
   For i = 1 To Lkind
      owned_land(i) = Val(Sheets("fCondition").Cells(11 + i, 4)) ' * 10 'upper limit of owned land 'Val added on 2011.8.10
   Next i
   paddy_field = owned_land(1) 'available land of rice field |fffd||fffd|owned rice field
   For i = 1 To Lkind
      If used_kind(i) = True Then
         If Sheets("fCondition").[d20] = "1" Or Sheets("fCondition").[d20] = "Yes" Then
            c_proc = c_proc + 1 'Calculate the number of the rented land process
            land_proc = c_proc 'Save the number of the rented land process
            If i = 1 Then 'Modify [available land of rice field] to (owned rice field|fffd|{rented rice field)
               paddy_field = owned_land(1) & " + x" & land_proc
            End If
         End If
         For ii = 1 To f_period  'Complete the land constraint formula
            k = ii + 4 + f_period * (i - 1)
            If Cells(k, 4) = "" Then Cells(k, 4) = "0"
            If Sheets("fCondition").[d20] = "1" Or Sheets("fCondition").[d20] = "Yes" Then
               Cells(k, 4) = owned_land(i) & " + x" & land_proc & " >= " _
               & Cells(k, 4) 'left-hand side |fffd||fffd| owned land |fffd|{ rented land
            Else
               Cells(k, 4) = owned_land(i) & " >= " & Cells(k, 4) 'left-hand side |fffd||fffd| owned land
            End If
            If f_period = 36 Then stmp = month_10days(ii) Else stmp = ii
            Cells(k, 3) = land_kind(i) & " " & stmp 'Name of land constraint
         Next ii
         If Sheets("fCondition").[d20] = "1" Or Sheets("fCondition").[d20] = "Yes" Then
            rented_land(i) = Val(Sheets("fCondition").Cells(11 + i, 5)) ' * 10 'Upper limit of the rented land
            land_rent(i) = Val(Sheets("fCondition").Cells(11 + i, 6)) 'land rent
            Cells(4, 4) = Cells(4, 4) & " - " & land_rent(i) & "x" & land_proc 'Deduct land rent from total profit
            Cells(land_proc + 4, 2) = land_kind(i) & " [Rented land]" 'Name of rented land process
            rented_land_constraint = 4 + f_period * Lkind + i 'The row number of the rented land upper limit constraints(number|fffd|{|fffd|S) 'l->f 2009.10.25
            Cells(rented_land_constraint, 3) = land_kind(i) & " Rented land upper limit" 'the name of rented land upper limit constraints
            Cells(rented_land_constraint, 4) = rented_land(i) & " >= x" & land_proc '(Upper limit of rented land) constraint formula
         End If
      End If
   Next i
   
   'Introduction of the crop conversion constraint
   If no_rice = True Then
      With selected_item_sheet
         itmp = 0
         For i = 3 To LastRow
            If .Cells(i, 1) = True Then
               itmp = itmp + 1
               If .Cells(i, 77) = "Paddy" Then
                  tmp = .Cells(i, 78)
                  If Val(tmp) = 1 Or tmp = "Not-correspond" Then
                     'nothing
                  ElseIf Val(tmp) = 1 Or tmp = "Correspond" Then
                     tmp_l = tmp_l & " + x" & itmp 'Add the rice cropping (non-switching crop) process
                  End If
               End If
            End If
         Next i
         tmp_r = paddy_field
         If tmp_l = "" Then tmp_l = 0
         If tmp_r = "" Then tmp_r = 0
         rice_limit = 1# - (Sheets("fCondition").[d23] / 100)
         model_sheet.Cells(rice_constraint, 4) = _
         tmp_l & " <= " & rice_limit & " (" & tmp_r & ")"
         model_sheet.Cells(rice_constraint, 3) = "Crop conversion constraint"
      End With
   End If
   
   'Introduction of the cropping constraint
   With selected_item_sheet
      tmp = ""
      itmp = 0
      For i = 3 To LastRow
         If .Cells(i, 1) = True Then
            itmp = itmp + 1
            kagen = .Cells(i, 75) ' * 10
            jogen = .Cells(i, 76) ' * 10
            If Val(kagen) > 0 And Val(jogen) > 0 Then
               If kagen > jogen Then
                  MsgBox "The lowerest limit of cropping is bigger than the upper limit of cropping, so modify and run it again."
                  selected_item_sheet.Select
                  End
               ElseIf kagen = jogen Then
                  model_sheet.Cells(cropping_constraint, 3) = "Acreage limit" & " x" & itmp
                  tmp = "+x" & itmp & " = " & kagen
               Else
                  model_sheet.Cells(cropping_constraint, 3) = "loweer limit of cropping" & " x" & itmp
                  tmp = "+x" & itmp & " >= " & kagen
                  model_sheet.Cells(cropping_constraint, 4) = tmp
                  cropping_constraint = cropping_constraint + 1
                  model_sheet.Cells(cropping_constraint, 3) = "upper limit of cropping" & " x" & itmp
                  tmp = "+x" & itmp & " <= " & jogen
               End If
            ElseIf Val(kagen) > 0 Then
               model_sheet.Cells(cropping_constraint, 3) = "loweer limit of cropping" & " x" & itmp
               tmp = "+x" & itmp & " >= " & kagen
            ElseIf Val(jogen) > 0 Then
               model_sheet.Cells(cropping_constraint, 3) = "upper limit of cropping" & " x" & itmp
               tmp = "+x" & itmp & " <= " & jogen
            End If
            model_sheet.Cells(cropping_constraint, 4) = tmp
            cropping_constraint = cropping_constraint + 1
         End If
      Next i
   End With
   
   'Introduction of employment labor process, calcuation of the number of processes before the introduction
   If Sheets("fCondition").[d19] = "1" Or Sheets("fCondition").[d19] = "Yes" Then
      employ_cost = Sheets("fCondition").[d9] 'employment cost
      employ_hour = Sheets("fCondition").[e9] 'employment working hours
      hired_labor_constraint_base = f_period * Lkind + Lkind + 2 + real_proc * 2 'The number of constraints of (land) and (upper limit of rented land) 'l->f 2009.10.25
      For j = 1 To l_period
         k = hired_labor_constraint_base + j + 4
         uhen = Mid(Cells(k, 4), InStr(Cells(k, 4), "=") + 1)
         uhen = Trim(uhen)
         sahen = Mid(Cells(k, 4), 1, InStr(Cells(k, 4), ">=") - 1)
         sahen = Trim(sahen)
         If uhen <> "" Then 'Introduce labor employment into the period under labor constraint set in the working process
            c_proc = c_proc + 1 'adding the employment labor process number
            Cells(4, 4) = Cells(4, 4) & " - " & employ_cost & "x" & c_proc 'deduct employment wages from total profit
            Cells(k, 4) = sahen & " + " & employ_hour & "x" & c_proc & " >=" _
            & uhen 'Set the employment labor to the labor constraint
            If model_type = "10days" Then jj = month_10days(j) Else jj = j
            Cells(c_proc + 4, 2) = "[Part time] " & jj 'Name of employment labor process
            'Set the upper limit of employment labor
            k = k + l_period 'Shift downward the row only for l_period
            'upper limit value changes monthly or per ten-day periods|fffd|imethod added at Ver 0.58|fffd|j
            With Sheets("fCondition")
               If j <= l_period / 2 Then
                  'January|fffd|`June
                  If model_type = "10days" Then
                     employ_limit = .[FC_part].Cells(j, 1) * 1 'if result is (right-side = ""), set (left-side = 0)
                  Else
                     employ_limit = (.[FC_part].Cells((j - 1) * 3 + 1, 1) _
                               + .[FC_part].Cells((j - 1) * 3 + 2, 1) _
                               + .[FC_part].Cells((j - 1) * 3 + 3, 1))
                  End If
               Else
                  'July|fffd|`December
                  If model_type = "10days" Then
                     employ_limit = .[FC_part].Cells(j - 18, 5) * 1 'if result is (right-side = ""), set (left-side = 0)
                  Else
                     employ_limit = (.[FC_part].Cells((j - 7) * 3 + 1, 5) _
                               + .[FC_part].Cells((j - 7) * 3 + 2, 5) _
                               + .[FC_part].Cells((j - 7) * 3 + 3, 5))
                  End If
               End If
            End With
            Cells(k, 4) = employ_limit & " = x" & c_proc 'In this case, employ_limit is not hirable value, but is value hired inevitably.
            If InStr(Sheets("fCondition").[i5], "Hirable days") > 0 Then
               Cells(k, 4) = employ_limit & " >= x" & c_proc 'In the case, employ_limit is hirable value(upper limit).
            End If
               
            If model_type = "10days" Then jj = month_10days(j) Else jj = j
            Cells(k, 3) = "Part time upper limit " & jj 'Name of employment labor constraint
         End If
      Next j
   End If
   
   'Delete the redundant line
   'Delete the empty formula cells whole or in the right side, and shift upward.
   get_last_cell max_row, max_col
   For i = max_row To 4 Step -1
      uhen = Mid(Cells(i, 4), InStr(Cells(i, 4), "=") + 1): uhen = Trim(uhen)
      If Cells(i, 4) = "" Or uhen = "" Then 'Delete the row where only the constraint name is not blank.
         Cells(i, 4).Delete Shift:=xlUp
         Cells(i, 3).Delete Shift:=xlUp
      Else
      End If
   Next i
   
   GoTo no_delete_row
   
   'Delete the same formula cells, but only land constraint formula
   max_row = 0: i = 5
   Do While 1
      If InStr(Cells(i, 3), "labor") > 0 Then max_row = i - 1: Exit Do
      i = i + 1
   Loop
   'Process to the top from the bottom line, if it is the same as the row just above, delete it and shift downward.
   'get_last_cell max_row, max_col
   For i = max_row To 4 Step -1
      If Cells(i, 4) = Cells(i - 1, 4) Then
         Cells(i, 4).Delete Shift:=xlUp
         Cells(i, 3).Delete Shift:=xlUp
       End If
   Next i
   
no_delete_row:
   'Transfer the crop (process) name
   selected_item_sheet.Select
   sepa = " "
   ipos = 4
   For i = 3 To LastRow
      If Cells(i, 1) = True Then
         ipos = ipos + 1
         na3 = Cells(i, 3): na4 = Cells(i, 4): na5 = Cells(i, 5): na6 = Cells(i, 6): na7 = Cells(i, 7)
         'stmp = na3 & sepa & na4
         stmp = na4
         If na5 <> "" Then stmp = stmp & sepa & na5
         'If na6 <> "" Then stmp = stmp & sepa & na6
         'If na7 <> "" Then stmp = stmp & sepa & na7
         model_sheet.Cells(ipos, 2) = stmp & sepa
      End If
   Next i
   
   'Finishing the model sheet
   model_sheet.Select:
   [a1] = "[Formula]" '"|fffd|ynumerical formula model|fffd|z" '2016.2.18
   [c1] = "Please describe the title in this cellC1]."
   'Put a serial number in column_A from row_5 to the max(the number of processes, the number of constraints).
   LastRow = Range("C5").End(xlDown).Row
   Lastrow2 = Range("B5").End(xlDown).Row
   If Lastrow2 > LastRow Then LastRow = Lastrow2
   For i = 1 To LastRow - 4: Cells(i + 4, 1) = i: Next i
   For Each mb In ActiveSheet.Buttons 'Delete the button
      mb.Delete
   Next mb
   [a4].Select
   On Error GoTo 0
   Exit Sub

err1:
   ThisWorkbook.Sheets(model_sheet_name).Copy _
   before:=ActiveWorkbook.Sheets("iData")
   'make_sheet model_sheet_name
   selected_item_sheet.Select
   Resume

End Sub

Function month_10days(k)
   itmp = ((k - 1) \ 3) + 1: itmp2 = ((k - 1) Mod 3) + 1 '1->1-1,2->1-2,3->1-3
   month_10days = itmp & "-" & itmp2
End Function

Sub make_LPtd(Optional data_check As Boolean = False) 'model in which labor constraint is set per ten-day periods
   If Not is_selected_item Then
      MsgBox "crop has not been chosen"
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_formula_model c_proc, "(Model)", "10days", "10days", data_check
   [c1] = "title|fffd|FLP model(labor constraint per ten-day periods)"
   
   If sheet_exist("(Table)") Then
      Sheets("(Table)").Visible = True
   End If
   
   If xlp_menu = True Then
      If sheet_exist("(Table)") = False Then
         ThisWorkbook.Sheets("(Table)").Copy before:=ActiveSheet
      End If
      Sheets("(Model)").Select
      Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
   Else
      ans% = MsgBox("XLP is necessary for creating the symplex table." & Chr(13) & Chr(13) & _
      "Please open the XLP.xla ." & Chr(13) & Chr(13), vbYesNo, "BFM")
      If ans% = vbYes Then 'And if [yes], open.
      
         xlp_prg = Application.GetOpenFilename("XLP.xla,*.xla,XLP.xls,*.xls")
         xlp_prg = LCase(Right(Trim(xlp_prg), 7))
         If xlp_prg = "xlp.xla" Or xlp_prg = "xlp.xls" Then
            Workbooks.Open xlp_prg 'open
            Sheets("(Model)").Select
            Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
         Else
            MsgBox "Failed to open XLP.": Exit Sub
         End If
      End If
   End If
End Sub

Sub make_LPtd_m() 'Model in which labor constraint is per ten-day periods and land constraint is monthly
   If Not is_selected_item Then
      MsgBox "crop has not been chosen"
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_formula_model c_proc, "(Model)", "10days", "month"
   [c1] = "title|fffd|FLP model (labor constraint per ten-day periods)"
   
   If sheet_exist("(Table)") Then
      Sheets("(Table)").Visible = True
   End If
   
   If xlp_menu = True Then
      If sheet_exist("(Table)") = False Then
         ThisWorkbook.Sheets("(Table)").Copy before:=ActiveSheet
      End If
      Sheets("(Model)").Select
      Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
   Else
      ans% = MsgBox("XLP is necassary for creating the symplex table. " & Chr(13) & Chr(13) & _
      "Please open XLP.xla ." & Chr(13) & Chr(13), vbYesNo, "BFM")
      If ans% = vbYes Then 'And if [yes], open.
         xlp_prg = Application.GetOpenFilename("XLP.xla,*.xla,XLP.xls,*.xls")
         xlp_prg = LCase(Right(Trim(xlp_prg), 7))
         If xlp_prg = "xlp.xla" Or xlp_prg = "xlp.xls" Then
            Workbooks.Open xlp_prg 'open
            Sheets("(Model)").Select
            Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
         Else
            MsgBox "Failed to open XLP.": Exit Sub
         End If
      End If
   End If
End Sub

Sub make_LPm_td() 'Model in which labor constraint is monthly and land constraint is per ten-day period.
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_formula_model c_proc, "(Model)", "month", "10days"
   [c1] = "title|fffd|FLP model (labor constraint per ten-day period)"
   
   If sheet_exist("(Table)") Then
      Sheets("(Table)").Visible = True
   End If
   
   If xlp_menu = True Then
      If sheet_exist("(Table)") = False Then
         ThisWorkbook.Sheets("(Table)").Copy before:=ActiveSheet
      End If
      Sheets("(Model)").Select
      Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
   Else
      ans% = MsgBox("XLP is necessary for creating the symplex table." & Chr(13) & Chr(13) & _
      "Please open XLP.xla ." & Chr(13) & Chr(13), vbYesNo, "BFM")
      If ans% = vbYes Then 'And if [yes], open.
         xlp_prg = Application.GetOpenFilename("XLP.xla,*.xla,XLP.xls,*.xls")
         xlp_prg = LCase(Right(Trim(xlp_prg), 7))
         If xlp_prg = "xlp.xla" Or xlp_prg = "xlp.xls" Then
            Workbooks.Open xlp_prg 'open
            Sheets("(Model)").Select
            Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
         Else
            MsgBox "Failed to open XLP.": Exit Sub
         End If
      End If
   End If
End Sub

Sub make_LPm() 'model in which labor constraint is monthly
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_formula_model c_proc, "(Model)", "month", "month"
   [c1] = "title|fffd|FLP model (monthly labor constraints)"
   
   If sheet_exist("(Table)") Then
      Sheets("(Table)").Visible = True
   End If
   
   If xlp_menu = True Then
      If sheet_exist("(Table)") = False Then
         ThisWorkbook.Sheets("(Table)").Copy before:=ActiveSheet
      End If
      Sheets("(Model)").Select
      Application.Run "formula2tableau_for_BFM" 'Convert the numrerical formula model into symplex table.
   Else
      ans% = MsgBox("XLP is necessary for creating the symplex table." & Chr(13) & Chr(13) & _
      "Please open XLP.xla ." & Chr(13) & Chr(13), vbYesNo, "BFM")
      If ans% = vbYes Then 'And if [yes], open.
         xlp_prg = Application.GetOpenFilename("XLP.xla,*.xla,XLP.xls,*.xls")
         xlp_prg = LCase(Right(Trim(xlp_prg), 7))
         If xlp_prg = "xlp.xla" Or xlp_prg = "xlp.xls" Then
            Workbooks.Open xlp_prg 'open
            Sheets("(Model)").Select
            Application.Run "formula2tableau_for_BFM" 'Convert the numerical formula model into symplex table.
         Else
            MsgBox "Failed to open XLP.": Exit Sub
         End If
      End If
   End If
End Sub

Sub compute_IPtd() 'Calculation of ten-day period's ip model. 2012.10.15
   Dim s_MI As Object, s_TBL As Object
   Set s_MI = ActiveSheet
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_LPtd
   Set s_TBL = ActiveSheet
   If xlp_menu = False Then Exit Sub
   Application.Run "ip_calc"
   Application.DisplayAlerts = False
   Application.DisplayAlerts = True
   make_result_summary
End Sub

Sub compute_LPtd() 'Calculation of ten-day period's model.
   Dim s_MI As Object, s_TBL As Object
   Set s_MI = ActiveSheet
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_LPtd
   Set s_TBL = ActiveSheet
   If xlp_menu = False Then Exit Sub
   Application.Run "lp_calc"
   Application.DisplayAlerts = False
   Application.DisplayAlerts = True
   make_result_summary
End Sub

Sub compute_LPtd_m() 'Calculation of ten-day period's- and monthly model.
   Dim s_MI As Object, s_TBL As Object
   Set s_MI = ActiveSheet
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_LPtd_m
   Set s_TBL = ActiveSheet
   If xlp_menu = False Then Exit Sub
   Application.Run "lp_calc"
   Application.DisplayAlerts = False
   Application.DisplayAlerts = True
   make_result_summary
End Sub

Sub compute_LPm_td() 'Calculation of ten-day period's- ond monthly models.
   Dim s_MI As Object, s_TBL As Object
   Set s_MI = ActiveSheet
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_LPm_td
   Set s_TBL = ActiveSheet
   If xlp_menu = False Then Exit Sub
   Application.Run "lp_calc"
   Application.DisplayAlerts = False
   Application.DisplayAlerts = True
   make_result_summary
End Sub

Sub compute_LPm() 'Calculation of monthly model.
   Dim s_MI As Object, s_TBL As Object
   Set s_MI = ActiveSheet
   If Not is_selected_item Then
      MsgBox "Crop has not been chosen."
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub
   make_LPm
   Set s_TBL = ActiveSheet
   If xlp_menu = False Then Exit Sub
   Application.Run "lp_calc"
   Application.DisplayAlerts = False
   Application.DisplayAlerts = True
   make_result_summary
End Sub

Sub compute_for_narc_dmss()
   make_LPtd
   app_name = "narc_dmss"
   compute_LPm_only
   app_name = ""
End Sub

Sub compute_LPm_only()
   Application.ScreenUpdating = False
   
   If sheet_exist("(Table)") Then
      Sheets("(Table)").Visible = True
   End If
   
   'On Error GoTo err1
   If ActiveSheet.[a1] = "[Formula]" Then
      Run "formula2tableau_for_BFM"
      Run "lp_calc"
   ElseIf ActiveSheet.[a1] = "[Simplex]" Then
      Run "lp_calc"
   Else
      MsgBox "Please run from the sheet (Model) or the sheet (Table). "
      Exit Sub
   End If
   make_result_summary
   make_budget_sheet 36 '2015.8.29
   Exit Sub
err1:
   MsgBox "There is no work sheet."
End Sub

Sub make_result_summary()
   Exit Sub
   Dim iday()
   If InStr(Cells(3, 1), "Optimal value") < 1 Then
      MsgBox "Please review the value of the lowest limit of cropping, etc.."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   Set cr_sheet = ActiveSheet
   On Error Resume Next 'GoTo err1
   Sheets("result summary").Move before:=ActiveSheet
   If sheet_exist("result summary") = False Then make_sheet ("result summary")
   Sheets("result summary").Move before:=ActiveSheet
   Sheets("result summary").Select
   Cells.ClearContents
   'Cells.ClearFormats
   'Cells.Borders.LineStyle = xlNone
   Set rs_sheet = ActiveSheet
   cr_sheet.Select
   no_item = 0: i = 6 'Check the cell of the line i.
   Do While 1
      tmp = Cells(i, 2)
      If InStr(tmp, "[rented land]") > 0 Or InStr(tmp, "[employment labor]") > 0 _
         Or tmp = "" Then
         s_rented = i 'The start line of the [rented land]
         Exit Do
      End If
      no_item = no_item + 1 'The number of crop processes
      i = i + 1
   Loop
   no_rented = 0: i = i
   Do While 1
      tmp = Cells(i, 2)
      If InStr(tmp, "[employment labor]") > 0 Or tmp = "" Then
         s_employed = i 'The start line of [employment labor]
         Exit Do
      End If
      If InStr(tmp, "[leased land]") > 0 Then
         no_rented = no_rented + 1 'The number of the rented land processes
      End If
      i = i + 1
   Loop
   no_employed = 0: i = i
   Do While 1
      tmp = Cells(i, 2)
      If tmp = "" Then Exit Do
      If InStr(tmp, "[employment labor]") > 0 Then
         no_employed = no_employed + 1 'The number of the employed labor processes
      End If
      i = i + 1
   Loop
   no_constraint_labor = 0: i = i
   Do While 1
      tmp = Cells(i, 2)
      If InStr(tmp, "labor") > 0 Then
         s_constraint_labor = i 'The start cell of labor constraint
         Exit Do
      End If
      i = i + 1
   Loop
   no_constraint_labor = 0: i = i
   Do While 1
      tmp = Cells(i, 2)
      If InStr(tmp, "labor") = 0 Or tmp = "" Then Exit Do
      no_constraint_labor = no_constraint_labor + 1 'The number of labor constraint
      i = i + 1
   Loop
   'Posting to the result summary sheet.
   On Error Resume Next 'Counterplan of AddComment
   'On Error GoTo 0
   shown_row = 5
   s_process = 6
   If sheet_exist("fCondition") Then
      fixed_cost = Sheets("fCondition").[d25] 'Fixed cost
      full_timer_wage = Sheets("fCondition").[f6] * Sheets("fCondition").[d6] 'employment wage of permanent labor
   Else
      fixed_cost = 0
   End If
   With rs_sheet
      .[b1] = "Result summary"
      .[b3] = "Agricultual income"
      .[c3] = Format(cr_sheet.[b3] - fixed_cost - full_timer_wage, "#,##0")
      .[b3].AddComment _
      "It is the value that deducted the fixed costs put in the farming condition and the permanent employment wages from optimal solution (optimum value)."
      .[b3].Comment.Shape.TextFrame.Characters.Font.Size = 12
      .Cells(shown_row, 2) = "crop list name"
      .Cells(shown_row, 3) = "profit coefficient"
      .Cells(shown_row, 4) = "crop area"
      .Cells(shown_row, 5) = "proportional profit"
      'Enclose the main items inbBorders.
      .Cells.Borders.LineStyle = xlNone 'Deletion of borders
      With .Range("B3:C3").Borders
          .LineStyle = xlContinuous
          .Weight = xlMedium
          .ColorIndex = 53
      End With
      .Range("B3:C3").Borders(xlInsideVertical).LineStyle = xlNone 'Delete the inside vertical lines
      With .Range("b5:b" & (5 + no_item + 1)).Borders
          .LineStyle = xlContinuous
          .Weight = xlMedium
          .ColorIndex = 53
      End With
      .Range("b5:b" & (5 + no_item + 1)).Borders(xlInsideHorizontal).LineStyle = xlNone 'Delete the inside horizontal lines
      With .Range("d5:d" & (5 + no_item + 1)).Borders
          .LineStyle = xlContinuous
          .Weight = xlMedium
          .ColorIndex = 53
      End With
      .Range("d5:d" & (5 + no_item + 1)).Borders(xlInsideHorizontal).LineStyle = xlNone 'Delete the inside horizontal lines
   End With 'of rs_sheet
   shown_item_row = shown_row 'Start line of the display of the process of runnning level
   shown_row = shown_row + 1
   sum_acreage = 0: marginal_profit = 0
   itmp = s_process
   For i = 1 To no_item
      rs_sheet.Cells(shown_row, 2) = Cells(itmp, 2) 'process name
      rs_sheet.Cells(shown_row, 3) = Format(Cells(itmp, 3), "#,##0") 'profit coefficient
      rs_sheet.Cells(shown_row, 4) = Format(Cells(itmp, 4), "#,##0.0") 'crop area
      sum_acreage = sum_acreage + Cells(itmp, 4)
      rs_sheet.Cells(shown_row, 5) = Format(Cells(itmp, 3) * Cells(itmp, 4), "#,##0") 'proportional profit
      marginal_profit = marginal_profit + rs_sheet.Cells(shown_row, 5)
      itmp = itmp + 1
      shown_row = shown_row + 1
   Next i
   rs_sheet.Cells(shown_row, 2) = "total"
   rs_sheet.Cells(shown_row, 4) = Format(sum_acreage, "#,##0.0")
   rs_sheet.Cells(shown_row, 5) = Format(marginal_profit, "#,##0")
   shown_row = shown_row + 1
   If no_rented > 0 Then
      shown_row = shown_row + 1
      With rs_sheet
         .Cells(shown_row, 2) = "rented land"
         .Cells(shown_row, 3) = "hire unit proce"
         .Cells(shown_row, 4) = "rented land area"
         .Cells(shown_row, 5) = "payment hire"
      End With
      shown_row = shown_row + 1
      itmp = s_rented
      For i = 1 To no_rented
         rs_sheet.Cells(shown_row, 2) = Cells(itmp, 2) 'rented land process name
         rs_sheet.Cells(shown_row, 3) = Format(Cells(itmp, 3), "#,##0") 'land rent per area
         rs_sheet.Cells(shown_row, 4) = Format(Cells(itmp, 4), "#,##0.0") 'rented land area
         rs_sheet.Cells(shown_row, 5) = Format(Cells(itmp, 3) * Cells(itmp, 4), "#,##0") 'land rent
         itmp = itmp + 1
         shown_row = shown_row + 1
      Next i
   End If
   If no_employed > 0 Then
      shown_row = shown_row + 1
      With rs_sheet
         .Cells(shown_row, 2) = "employment labor"
         .Cells(shown_row, 3) = "wage unit price"
         .Cells(shown_row, 4) = "employment days"
         .Cells(shown_row, 5) = "payment wages"
         .Cells(shown_row, 6) = "employment working hours"
      End With
      shown_employed_row = shown_row
      shown_row = shown_row + 1
      itmp = s_employed
      ReDim iday(no_employed + 1)
      If sheet_exist("fCondition") Then
         ihour = Sheets("fCondition").[e9] 'employment labor working hours per day
      Else
         ihour = InputBox("Please input the working hours of temporary employed labor per day.", _
         "Input the working hours of employed labor per day", 8)
         ihour = Val(ihour)
      End If
      For i = 1 To no_employed
         rs_sheet.Cells(shown_row, 2) = Cells(itmp, 2) 'process name
         rs_sheet.Cells(shown_row, 3) = Format(Cells(itmp, 3), "#,##0") 'wage unit price
         rs_sheet.Cells(shown_row, 4) = Format(Cells(itmp, 4), "#,##0.0") 'employment days
         iday(i) = Cells(itmp, 4) 'Save the days of employment
         rs_sheet.Cells(shown_row, 5) = Format(Cells(itmp, 3) * Cells(itmp, 4), "#,##0") 'employed labor costs
         rs_sheet.Cells(shown_row, 6) = Format(Cells(itmp, 4) * ihour, "#,##0") 'working hours of employed labor
         itmp = itmp + 1
         shown_row = shown_row + 1
      Next i
   End If
   
   'rs_sheet.Select: [a1].Select
   'Exit Sub
   
   shown_row = shown_row + 1
   With rs_sheet
      .Cells(shown_row, 2) = "working hours"
      .Cells(shown_row, 3) = "permanent labor constraint"
      .Cells(shown_row, 4) = "permanent working time"
      .Cells(shown_row, 5) = "permanent + temporary"
      .Cells(shown_row, 6) = "|fffd|@|fffd|@month" '----- 2006.3.29
   End With
   shown_family_labor_row = shown_row
   shown_row = shown_row + 1
   itmp = s_constraint_labor
   For i = 1 To no_constraint_labor
      rs_sheet.Cells(shown_row, 2) = Cells(itmp, 2) 'time division (month or ten-day periods)
      rs_sheet.Cells(shown_row, 3) = Format(Cells(itmp, 3), "#,##0") 'family labor constraint
      rs_sheet.Cells(shown_row, 4) = Format(Cells(itmp, 3) - Cells(itmp, 4), "#,##0") 'working hours of family labor
      If no_employed > 0 Then 'employed
         rs_sheet.Cells(shown_row, 5) = Format(rs_sheet.Cells(shown_row, 4) _
                                        + iday(i) * ihour, "#,##0") 'family|fffd|{employment
         '2011.1.17 start
         'Change in the way to calculate the working hours of family- and employed labor due to the change in the way to pay the wages of employed labor.
         If rs_sheet.Cells(shown_row, 4) <= 0 Then 'The sign is necessary because no labor is used in some periods.
            rs_sheet.Cells(shown_row, 4) = 0 'correcting the working hours of family labor (0 is set if it is negative)
            rs_sheet.Cells(shown_row - no_employed - 2, 6) _
            = rs_sheet.Cells(shown_row, 5) 'correcting the working hours of employed labor. Set the real working hours rather than the wage payment hours.
         End If
         'end
         
      Else 'There is no employment
         rs_sheet.Cells(shown_row, 5) = Format(rs_sheet.Cells(shown_row, 4), "#,##0")
      End If
      '---------------------------------------- 2006.3.29
      If no_constraint_labor > 12 Then
         rs_sheet.Cells(shown_row, 6) = Format((i + 2) \ 3, "#,##0")
      Else
         rs_sheet.Cells(shown_row, 6) = Format(i, "#,##0")
      End If
      '---------------------------------------- 2006.3.29
      itmp = itmp + 1
      shown_row = shown_row + 1
   Next i
   If app_name = "narc_dmss" Then Exit Sub '2008.2.27
   'display the results
   rs_sheet.Select
   delete_all_charts
   make_graph_1 shown_item_row, no_item
   make_graph_2 shown_employed_row, no_employed, _
                shown_family_labor_row, no_constraint_labor
   Columns("a:a").ColumnWidth = Columns("z:z").ColumnWidth * (1 / 3)
   'Columns("b:b").ColumnWidth = Columns("z:z").ColumnWidth * (7 / 4)
   Columns("c:c").ColumnWidth = Columns("z:z").ColumnWidth
   Columns("D:D").ColumnWidth = Columns("z:z").ColumnWidth
   Columns("e:e").ColumnWidth = Columns("z:z").ColumnWidth
   Columns("f:f").ColumnWidth = Columns("z:z").ColumnWidth
   Columns("G:G").ColumnWidth = Columns("z:z").ColumnWidth * (1 / 3)
   [a1].Select
   ActiveWindow.LargeScroll Down:=-2
   Exit Sub
err1:
   make_sheet ("result summary")
   Set rs_sheet = ActiveSheet
   Resume Next
End Sub

Sub make_graph_1(shown_item_row, no_item)
   Dim tmp As String
   tmp = ActiveWorkbook.ActiveSheet.name
   Set r = Range("h2:m10")
   Set co = Sheets(tmp).ChartObjects.Add(r.Left, r.Top, r.Width, r.Height)
   co.Chart.ChartType = xlBarStacked100
   head = shown_item_row: tail = head + no_item
   co.Chart.SetSourceData _
      Source:=Sheets(tmp).Range("B" & head & ":B" & tail _
      & ",D" & head & ":E" & tail), PlotBy:=xlRows
   co.Chart.ApplyDataLabels Type:=xlDataLabelsShowValue, LegendKey:=False
   co.Chart.HasDataTable = False
   With co.Chart.ChartArea.Font
       .name = "|fffd|l|fffd|r |fffd|o Gothic"
       .FontStyle = "Standard"
       .Size = 8 '6
   End With
   With co.Chart
       .HasTitle = True
       .ChartTitle.Characters.Text = "crop area and proportional profit"
   End With
   With co.Chart.ChartArea.Border
       .Weight = xlHairline
       .LineStyle = xlAutomatic
   End With
   co.Chart.ChartTitle.AutoScaleFont = True
   With co.Chart.ChartTitle.Font
       .Size = 12 '10
   End With
   With co.Chart.Legend
      .Position = xlBottom
      .Font.Size = 10 '8
   End With
   co.Chart.PlotArea.ClearFormats 'The background is white
   Range("a1").Select
End Sub

Sub make_graph_2(shown_employed_row, no_employed, _
                 shown_family_labor_row, no_constraint_labor)
   Dim tmp As String
   tmp = ActiveWorkbook.ActiveSheet.name
   Set r = Range("h11:m30")
   Set co = Sheets(tmp).ChartObjects.Add(r.Left, r.Top, r.Width, r.Height)
   co.Chart.ChartType = xlLineMarkers
   head1 = shown_family_labor_row: tail1 = head1 + no_constraint_labor
   If no_employed > 0 Then 'employed
      head2 = shown_employed_row: tail2 = head2 + no_employed
      co.Chart.SetSourceData PlotBy:=xlColumns, _
      Source:=Sheets(tmp).Range("C" & head1 & ":D" & tail1 & _
                              ",f" & head2 & ":f" & tail2)
   Else 'not employed
      co.Chart.SetSourceData PlotBy:=xlColumns, _
      Source:=Sheets(tmp).Range("C" & head1 & ":D" & tail1)
   End If
   co.Chart.ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
   co.Chart.HasDataTable = False
   With co.Chart.ChartArea.Font
       .name = "|fffd|l|fffd|r |fffd|o Gothic"
       .FontStyle = "Standard"
       .Size = 8 '6
   End With
   
   co.Chart.Axes(xlCategory).TickLabels.Font.Size = 6
   
   If no_employed > 0 Then 'employed
      If Application.Version < 12 Then 'If the Excel version is less than 2007
         co.Chart.ChartGroups(1).SeriesCollection(1).PlotOrder = 3
         'An error occurs with Excel 2007, and processing of the following figures will not be performed.
      End If
   Else 'not employed
      'Do nothing
   End If
   '------------------------------------------ 2006.3.29
    co.Chart.Axes(xlCategory).CategoryNames _
    = Sheets(tmp).Range("f" & (head1 + 1) & ":f" & tail1)
   '------------------------------------------
   With co.Chart
      .HasTitle = True
      If no_constraint_labor <= 12 Then
         .ChartTitle.Characters.Text = "monthly working hours"
         .Axes(xlCategory).TickLabelSpacing = 1 '----- 2006.3.29
      Else
         .ChartTitle.Characters.Text = "ten-day period's working hours"
         .Axes(xlCategory).TickLabelSpacing = 3 '----- 2006.3.29
      End If
   End With
   With co.Chart.ChartArea.Border
      .Weight = xlHairline
      .LineStyle = xlAutomatic
   End With
   co.Chart.ChartTitle.AutoScaleFont = True
   With co.Chart.ChartTitle.Font
      .Size = 12 '10
   End With
   With co.Chart.Legend
      .Position = xlBottom
      .Font.Size = 10 '8
   End With
   co.Chart.ChartType = xlColumnStacked
   co.Chart.SeriesCollection(1).ChartType = xlLineMarkers
   co.Chart.SeriesCollection(1).MarkerStyle = xlCircle
   co.Chart.SeriesCollection(1).MarkerSize = 3
   co.Chart.PlotArea.ClearFormats 'The background is white
   co.Chart.ChartGroups(1).GapWidth = 50 'The space of bars is half of the bar width (50%).
   Range("a1").Select
End Sub

Sub delete_all_charts()
   ActiveSheet.ChartObjects.Delete
End Sub

Function normal_random()
   Dim s As Double
   Do
      Do
         r1 = 2 * Rnd - 1
         r2 = 2 * Rnd - 1
         s = r1 * r1 + r2 * r2
      Loop Until s <= 1
   Loop Until s > 0
   s = -Log(s) / s
   r1 = Sqr(2 * s) * r1
   normal_random = r1
End Function

Sub get_last_cell(max_row, max_col)
   ActiveSheet.UsedRange.Select
   max_row = Selection.Row + Selection.Rows.Count - 1 'bottom = top + no._of_row - 1
   max_col = Selection.Column + Selection.Columns.Count - 1 'ditto
End Sub

Function bottom_col(target_row As Integer)
   bottom_col = Cells(target_row, 256).End(xlToLeft).Column 'Activate->current cell move
   'bottom_col = ActiveCell.Column
End Function

Sub test_of_function_bottom_col()
   MsgBox bottom_col(4) ' 4 is target_row
End Sub

Sub move_selectedRows()
    Selection.Copy
    Sheets("Sheet1").Select
    Range("A5").Select
    ActiveSheet.Paste
    Range("A1").Select
End Sub

Sub delete_selectedRows()
    Selection.Delete Shift:=xlUp
    Range("A1").Select
End Sub

Sub protect_unprotext()
    ActiveSheet.Unprotect
    ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Sub set_color_frame_unlock(s As Object)
   'On Error Resume Next
   s.Select
   Selection.Borders(xlDiagonalDown).LineStyle = xlNone
   Selection.Borders(xlDiagonalUp).LineStyle = xlNone
   With Selection.Borders(xlEdgeLeft)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeTop)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeRight)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlInsideVertical)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlInsideHorizontal)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Interior
       .ColorIndex = 0
       .Pattern = xlGray50
       .PatternColorIndex = 40
   End With
   Selection.Locked = False
   Selection.FormulaHidden = False
   'ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, DrawingObjects:=True, Contents:=True, Scenarios:=True
   [a2].Select
   On Error GoTo 0
End Sub

Sub set_color_frame_unlock_to_1row(s As Object)
   'On Error Resume Next
   s.Select
   Selection.Borders(xlDiagonalDown).LineStyle = xlNone
   Selection.Borders(xlDiagonalUp).LineStyle = xlNone
   With Selection.Borders(xlEdgeLeft)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeTop)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeRight)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlInsideVertical)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Interior
       .ColorIndex = 0
       .Pattern = xlGray50
       .PatternColorIndex = 40
   End With
   Selection.Locked = False
   Selection.FormulaHidden = False
   'ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, DrawingObjects:=True, Contents:=True, Scenarios:=True
   [a2].Select
   On Error GoTo 0
End Sub

Sub set_color_frame_unlock_to_1cell(s As Object)
   'On Error Resume Next
   s.Select
   Selection.Borders(xlDiagonalDown).LineStyle = xlNone
   Selection.Borders(xlDiagonalUp).LineStyle = xlNone
   With Selection.Borders(xlEdgeLeft)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeTop)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Borders(xlEdgeRight)
       .LineStyle = xlContinuous
       .Weight = xlThin
       .ColorIndex = xlAutomatic
   End With
   With Selection.Interior
       .ColorIndex = 0
       .Pattern = xlGray50
       .PatternColorIndex = 40
   End With
   Selection.Locked = False
   Selection.FormulaHidden = False
   'ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, DrawingObjects:=True, Contents:=True, Scenarios:=True
   [a2].Select
   On Error GoTo 0
End Sub

Sub show_data2(edit_row)
   Dim s As Object
   Application.ScreenUpdating = False
   Set s = Sheets("iEdit")
   s.Unprotect
   If count_LastRow = 2 Then edit_row = 3 'Specify any blank lines
   
   'In the menu that you want to edit only the chosen crop, confirm whether or not it is the corresponding crop.
   itmp = edit_row
   Do While (edit_mode = "limited") And (Not add_mode) 'by ooisi 2012.7.9
      For i = itmp To 3 Step -1 'Confirm it towards the front
         If Cells(i, 1) = True Then edit_row = i: Exit Do
      Next i
      For i = itmp + 1 To count_LastRow 'Confirm it towards the back
         If Cells(i, 1) = True Then edit_row = i: Exit Do
      Next i
   Loop
   
   '--- start 2012.9.8
   For j = 2 To 7 '4 '7
      s.[EI_outline].Cells(j - 1, 1) = Cells(edit_row, j)
   Next j
   'cropping type |fffd||fffd|cropping type |fffd|E cultivar, etc.
   If Not edit_form Then
      s.[EI_outline].Cells(4, 1) = RTrim(Cells(edit_row, 5) & "|fffd|@" & Cells(edit_row, 6) & "|fffd|@" & Cells(edit_row, 7))
   End If
   '--- end 2012.9.8
   For j = 8 To 9
      s.[EI_return].Cells(j - 7, 1) = Cells(edit_row, j) 'yield, unit cost
   Next j
   s.[EI_return].Cells(3, 1) = Cells(edit_row, 26) 'other income
   s.[EI_return].Cells(4, 1) = "=c11*c12+c13" 'gross income
   For j = 11 To 15
      s.[EI_expense].Cells(j - 10, 1) = Cells(edit_row, j) 'cost of seeds and seedlings - materials cost
   Next j
   s.[EI_expense].Cells(6, 1) = Cells(edit_row, 16) 'cost of land improvement
   s.[EI_expense].Cells(7, 1) = Cells(edit_row, 17) 'rental expense/fee
   s.[EI_expense].Cells(8, 1) = Cells(edit_row, 18) 'packing and fare fee
   s.[EI_expense].Cells(9, 1) = Cells(edit_row, 19) 'other costs
   s.[EI_expense].Cells(10, 1) = "=sum(c16:c24)" 'variable cost
   For j = 26 To 43
      s.[EI_front].Cells(j - 25, 1) = Cells(edit_row, j + 4) 'January-June
   Next j
   For j = 44 To 61
      s.[EI_back].Cells(j - 43, 1) = Cells(edit_row, j + 4) 'July-December
   Next j
   s.[EI_profit] = "=C14-C25" 'proportional profit
   s.[EI_landcoef] = Cells(edit_row, 74)
   For j = 77 To 80
      s.[EI_landuse].Cells(j - 76, 1) = Cells(edit_row, j) 'farm cetegory, switching crop, period of cultivation in the field (month)
   Next j
   For j = 72 To 73
      s.[EI_landuse].Cells(j - 69, 2) = Cells(edit_row, j) 'period of cultivation in the field (ten-day periods)
   Next j
   For j = 75 To 76
      s.[EI_landuse].Cells(j - 70, 1) = Cells(edit_row, j) 'lowest limit of cropping, upper limit of cropping
   Next j
'   If Cells(edit_row, 1) = True Then s.Cells(25, 3) = 1 _
'                           Else s.Cells(25, 3) = 0
   If Cells(edit_row, 1) = True Then
      s.[EI_choice].Cells(1, 1) = "Do"
   ElseIf Cells(edit_row, 1) = "" Then
      s.[EI_choice].Cells(1, 1) = ""
   Else
      s.[EI_choice].Cells(1, 1) = "Do not do" 'case of FALSE
   End If
   '-----------------------------------------------------------start 2012.7.9
   If edit_mode = "limited" And add_mode Then
      s.[EI_choice].Cells(1, 1) = "Do"
   End If
   '-----------------------------------------------------------end
   
   s.Select
   [a1].Select
   'my_protect s
   Exit Sub
   'Don't do the following process (indication of the data of the probability plan model)
   For j = 81 To 90
      s.Cells(j - 74, 12) = Cells(edit_row, j)
   Next j
   For j = 91 To 100
      s.Cells(j - 73, 12) = Cells(edit_row, j)
   Next j
   For j = 101 To 110
      s.Cells(j - 83, 13) = Cells(edit_row, j)
   Next j
End Sub

Function num_empty() As Boolean
   If [b2] = "" Then num_empty = True Else num_empty = False
End Function

Function item_data_empty() As Boolean
   item_data_empty = True
   Range("c3:c21,f9:f26,i9:i26,L2:L5,L7:L16,L18:m27").name = "data_range"
   For Each cl In [data_range]
      If cl <> "" Then item_data_empty = False: Exit Function
   Next cl
End Function

Sub edit2_forward()
   If edit_mode = "limited" Then
      edit3_forward
   Else
      If ActiveWindow Is Nothing Then Exit Sub
      ActiveSheet.Unprotect
      edit2_decision
      Application.ScreenUpdating = False
      Sheets("iData").Select
      ActiveCell.Offset(1, 0).Select
      LastRow = count_LastRow
      While ActiveCell.Row > LastRow: ActiveCell.Offset(-1, 0).Select: Wend
      show_data2 ActiveCell.Row
      my_protect ActiveSheet
   End If
End Sub

Sub edit2_backward()
   If edit_mode = "limited" Then
      edit3_backward
   Else
   If ActiveWindow Is Nothing Then Exit Sub
      ActiveSheet.Unprotect
      edit2_decision
      Application.ScreenUpdating = False
      Sheets("iData").Select
      If ActiveCell.Row > 3 Then ActiveCell.Offset(-1, 0).Select
      show_data2 ActiveCell.Row
      my_protect ActiveSheet
   End If
End Sub

Sub edit3_forward()
   ActiveSheet.Unprotect
   edit2_decision
   Application.ScreenUpdating = False
   Sheets("iData").Select
   Do
      If ActiveCell.Row < count_LastRow Then ActiveCell.Offset(1, 0).Select
      If Cells(ActiveCell.Row, 1) = True Then Exit Do
      If ActiveCell.Row = count_LastRow Then Exit Do
   Loop
   LastRow = count_LastRow
   While ActiveCell.Row > LastRow: ActiveCell.Offset(-1, 0).Select: Wend
   show_data2 ActiveCell.Row
   my_protect ActiveSheet
End Sub

Sub edit3_backward()
   ActiveSheet.Unprotect
   edit2_decision
   Application.ScreenUpdating = False
   Sheets("iData").Select
   Do
      If ActiveCell.Row > 3 Then ActiveCell.Offset(-1, 0).Select
      If Cells(ActiveCell.Row, 1) = True Then Exit Do
      If ActiveCell.Row = 3 Then Exit Do
   Loop
   show_data2 ActiveCell.Row
   my_protect ActiveSheet
End Sub

Sub edit2_add()
   Dim s As Object
   Application.ScreenUpdating = False           'Stop the update of the screen
   If ActiveWindow Is Nothing Then Exit Sub
   ActiveSheet.Unprotect
   Set s = Sheets("iEdit")
   edit2_decision
   add_mode = True
   Sheets("iData").Select
   LastRow = count_LastRow
   Cells(LastRow + 1, 2).Select
   show_data2 ActiveCell.Row
   If LastRow = 2 Then
      s.[EI_outline].Cells(1, 1) = 1
   Else
      s.[EI_outline].Cells(1, 1) = Sheets("iData").Cells(LastRow, 2) + 1
   End If
      s.[EI_landcoef] = 1
'      s.[c6] = "If the same name of the |fffd|ucrop|fffd|vhas already been registred," & _
'      "To distinguish from it, this column should always be filled." 'on 2013.10.3 'comment out 2017.4.26
   my_protect ActiveSheet
End Sub

Sub edit2_determine()
   edit2_decision
End Sub

Sub edit3_determine()
   Application.ScreenUpdating = False
   act_sh = ActiveSheet.name
   edit2_decision
   Sheets(act_sh).Select
End Sub

Sub edit2_decision()
   Dim s As Object
   Application.ScreenUpdating = False           'Stop the update of the screen
   If ActiveWindow Is Nothing Then Exit Sub
   Set s = Sheets("iEdit")
   Sheets("iData").Select
   
   ActiveSheet.Unprotect
   edit_num = s.[c3]
   LastRow = count_LastRow
   If add_mode = True Then
      Cells(LastRow + 1, 2).Select
   Else
      If LastRow = 2 Then s.Select: Exit Sub
      For i = 3 To LastRow
         If Cells(i, 2) = edit_num Then
            Cells(i, 2).Select
            Exit For
         End If
      Next i
   End If
   edit_row = ActiveCell.Row
   For j = 2 To 7
      Cells(edit_row, j) = s.[EI_outline].Cells(j - 1, 1)
   Next j
   For j = 8 To 9
      Cells(edit_row, j) = s.[EI_return].Cells(j - 7, 1)
   Next j
   Cells(edit_row, 26) = s.[EI_return].Cells(3, 1) 'other income
   Cells(edit_row, 10) = Val(s.[EI_return].Cells(4, 1).Value)  'gross income
   For j = 11 To 19
      Cells(edit_row, j) = s.[EI_expense].Cells(j - 10, 1) 'variable cost of the expenses item
   Next j
   Cells(edit_row, 25) = Val(s.[EI_expense].Cells(10, 1).Value) 'total variable cost
   For j = 30 To 47
      Cells(edit_row, j) = s.[EI_front].Cells(j - 29, 1) 'labor coefficient, Early January|fffd|`Late June
   Next j
   For j = 48 To 65
      Cells(edit_row, j) = s.[EI_back].Cells(j - 47, 1) 'labor coefficient, Early July|fffd|`Late December
   Next j
   'Update of the second half of the item
   Cells(edit_row, 74) = s.[EI_landcoef] 'land coefficient
   For j = 75 To 76 'lowest limit of cropping, upper limit of cropping
      Cells(edit_row, j) = s.[EI_landuse].Cells(j - 70, 1)
   Next j
   For j = 77 To 80 'farm category, crop of switching crop, period of cultivation in the field (month, start of cropping, end of cropping )
      Cells(edit_row, j) = s.[EI_landuse].Cells(j - 76, 1)
   Next j
   For j = 72 To 73 'period of cultivation in the field (ten-day periods)
      Cells(edit_row, j) = s.[EI_landuse].Cells(j - 69, 2)
   Next j
   'adopt|fffd|Ereject
   If s.[EI_choice] = 1 Or s.[EI_choice] = "Do" Then
      Cells(edit_row, 1) = True
   ElseIf s.[EI_choice] = "Do not do" Then
      Cells(edit_row, 1) = False
   Else
      Cells(edit_row, 1) = ""
   End If
   'If there is less check boxs (itmp) than crops (jtmp)
   jtmp = ActiveCell.Row - 2 '1  2004.8.20
   itmp = ActiveSheet.CheckBoxes.Count
   If jtmp > itmp Then new_check_button3 (edit_row)
   Cells(edit_row, 2).Select
   
   s.Select
   [a1].Select
   add_mode = False
   Exit Sub
   'Don't do the following process (Saving the data of the probability plan model).
   For j = 81 To 90
      Cells(edit_row, j) = s.Cells(j - 74, 12)
   Next j
   For j = 91 To 100
      Cells(edit_row, j) = s.Cells(j - 73, 12)
   Next j
   For j = 101 To 110
      Cells(edit_row, j) = s.Cells(j - 83, 13)
   Next j
End Sub

Sub edit2_delete()
   Dim s As Object
   If ActiveWindow Is Nothing Then Exit Sub
   ActiveSheet.Unprotect
   Application.ScreenUpdating = False 'Stop the update of the screen
   Set s = Sheets("iEdit")
   Sheets("iData").Select
   ActiveSheet.Unprotect
   LastRow = count_LastRow
   If LastRow = 2 And s.[EI_outline].Cells(1, 1) = "" Then s.Select: Exit Sub 'There is no data, and it is not even the add mode.
   edit_num = s.[EI_outline].Cells(1, 1)
   edit_row = 0
   For i = 3 To LastRow
      If Cells(i, 2) = edit_num Then edit_row = i: Exit For
   Next i
   If edit_row = 0 Then edit_row = LastRow + 1 'There is no corresponding data (in add mode)
   Cells(edit_row, 2).Select
   Rows(edit_row).Delete
   LastRow = count_LastRow
   'Renumber the serial number.
   LastRow = count_LastRow
   For i = 3 To LastRow
      Cells(i, 2) = i - 2
   Next i
   
   If edit_mode = "limited" And is_selected_item = False Then
      s.Select
      MsgBox "Since you have finished to edit the management index," & vbCr & vbCr & _
             "exit the edit mode" & vbCr & vbCr & _
             "and return to the management index sheet."
      Application.DisplayAlerts = False 'Do not confirm
      Sheets("iEdit").Delete
      edit_mode = ""
      On Error Resume Next
      Sheets("iData").Select
      [a1].Select
      Exit Sub
   End If
    
   While ActiveCell.Row > LastRow: ActiveCell.Offset(-1, 0).Select: Wend
   delete_CheckBox
   Application.ScreenUpdating = False 'Stop the update of the screen by ooisi 2013.2.13
   If LastRow > 2 Then make_check_button2 (LastRow)
   Cells(ActiveCell.Row, 2).Select
   If LastRow > 2 Then
      show_data2 ActiveCell.Row
   Else
      show_data2 3
   End If
   s.Select
   my_protect s
   add_mode = False
End Sub

Sub edit2_copy_and_paste()
    Application.ScreenUpdating = False
    On Error Resume Next
    'Copy the editing data on the management index sheet, and determine it.
    edit2_determine
    'Move to the management index sheet.
    Sheets("iData").Select
    'Save the row number of the current cell, and copy the current row.
    tmp% = ActiveCell.Row
    Rows(tmp%).Copy
    'Insert the copied current row to the front of the current row.
    Cells(tmp%, 1).Insert Shift:=xlDown
    Application.CutCopyMode = False
    'Move down the current cell one row.
    Cells(tmp% + 1, ActiveCell.Column).Select
    'Insert the|fffd|uCopy_|fffd|vat the beginning of the cropping type column.
    tmp% = ActiveCell.Row
    Cells(tmp%, 5) = "Copy " & Cells(tmp%, 5)
    'Renumber the serial number.
    tmp% = count_LastRow
    For i = 3 To tmp%
        Cells(i, 2) = i - 2
    Next i
    'Put the checkbox again.
    tmp% = count_LastRow
    delete_CheckBox
    If tmp% > 2 Then make_check_button2 (tmp%)
    'Return to the index edit sheet.
    Sheets("iEdit").Select
    edit2_forward
End Sub

Sub edit2_working_time_forward()
   If ActiveWindow Is Nothing Then Exit Sub
    'Shift the data one of ten-day period previous.
    'Save the data of Early January
    tmp$ = "" & [EI_front].Cells(1)
    'Shift the first half of the year.
    For i = 2 To 18
        [EI_front].Cells(i - 1) = [EI_front].Cells(i)
    Next i
    'Early July data to Late June
    [EI_front].Cells(18) = [EI_back].Cells(1)
    'Shift the second half of year.
    For i = 2 To 18
        [EI_back].Cells(i - 1) = [EI_back].Cells(i)
    Next i
    'Move Early Janualy data to Late December.
    [EI_back].Cells(18) = tmp$
End Sub

Sub edit2_working_time_backward()
   If ActiveWindow Is Nothing Then Exit Sub
    'Shift the data one of ten-day period back.
    'Save the data of Late December.
    tmp$ = "" & [EI_back].Cells(18)
    'Shift the second half of year.
    For i = 18 To 2 Step -1
        [EI_back].Cells(i) = [EI_back].Cells(i - 1)
    Next i
    'Late June data to Early July
    [EI_back].Cells(1) = [EI_front].Cells(18)
    'Shift the first half of the year.
    For i = 18 To 2 Step -1
        [EI_front].Cells(i) = [EI_front].Cells(i - 1)
    Next i
    'Move Late December data to Early January.
    [EI_front].Cells(1) = tmp$
End Sub

Function count_LastRow()
   count_LastRow = Cells(Application.Rows.Count, 2).End(xlUp).Row
End Function

Sub show_index_name()
   Dim selected_area As Object
   Dim s As Object
   On Error GoTo err1
   Set s = Sheets("iEdit")
   On Error GoTo 0
   index_name_MI s
   Set current_sheet = ActiveSheet
   s.Select
   Set selected_area = Range("b2:e7")
   draw_ruledLine selected_area: color_light_beige Range("c3:e7")
   Set selected_area = Range("b9:c27")
   draw_ruledLine selected_area: color_light_beige Range("c9:c27")
   Set selected_area = Range("e9:f26")
   draw_ruledLine selected_area: color_light_beige Range("f9:f26")
   Set selected_area = Range("h9:i26")
   draw_ruledLine selected_area: color_light_beige Range("i9:i26")
   [a1].Select
   Columns(2).ColumnWidth = Columns(256).ColumnWidth * 2
   Columns(4).ColumnWidth = Columns(256).ColumnWidth * 0.5
   Columns(7).ColumnWidth = Columns(256).ColumnWidth * 0.5
   Columns(8).ColumnWidth = Columns(256).ColumnWidth * 1.1
   
   Exit Sub
err1:
   Worksheets.Add: ActiveSheet.name = "iEdit"
   'make_edit_button
   Resume
End Sub

Sub index_name_MI(s As Object)
   s.Cells(2, 2) = "1) No."
   s.Cells(3, 2) = "2) area"
   s.Cells(4, 2) = "3) crop list "
   s.Cells(5, 2) = "4) cropping type"
   s.Cells(6, 2) = "5) coverage"
   s.Cells(7, 2) = "6) cultivar"
   s.Cells(9, 2) = "7) yield"
   s.Cells(10, 2) = "8) unit cost"
   s.Cells(11, 2) = "9) gross income"
   s.Cells(12, 2) = "10) cost of seeds and seedlings"
   s.Cells(13, 2) = "11) fertilizer cost"
   s.Cells(14, 2) = "12) cost of farm tools"
   s.Cells(15, 2) = "13) cost of agro-chemicals and sanitation"
   s.Cells(16, 2) = "14) materials cost"
   s.Cells(17, 2) = "15) repair cost"
   s.Cells(18, 2) = "16) cost of power, fuel and light"
   s.Cells(19, 2) = "17) depreciation"
   s.Cells(20, 2) = "18) packing and fare fee"
   s.Cells(21, 2) = "19) employment cost"
   s.Cells(22, 2) = "20) rental cost"
   s.Cells(23, 2) = "21) cost of land improvement"
   s.Cells(24, 2) = "22) other costs"
   s.Cells(25, 2) = "23) income"
   s.Cells(26, 2) = "24) variable cost"
   s.Cells(27, 2) = "marginal profit"
   s.Cells(9, 5) = "29) Early January"
   s.Cells(10, 5) = "30) Mid-January"
   s.Cells(11, 5) = "31) Late January"
   s.Cells(12, 5) = "32) Early February"
   s.Cells(13, 5) = "33) Mid- February"
   s.Cells(14, 5) = "34) Late February"
   s.Cells(15, 5) = "35) Early March"
   s.Cells(16, 5) = "36) Mid- March"
   s.Cells(17, 5) = "37) Late March"
   s.Cells(18, 5) = "38) Early April"
   s.Cells(19, 5) = "39) Mid-April"
   s.Cells(20, 5) = "40) Late April"
   s.Cells(21, 5) = "41) Early May"
   s.Cells(22, 5) = "42) Mid-May"
   s.Cells(23, 5) = "43) Late May"
   s.Cells(24, 5) = "44) Early June"
   s.Cells(25, 5) = "45) Mid-June"
   s.Cells(26, 5) = "46) Late June"
   s.Cells(9, 8) = "47) Early July"
   s.Cells(10, 8) = "48) Mid- July"
   s.Cells(11, 8) = "49) Late July"
   s.Cells(12, 8) = "50) Early August"
   s.Cells(13, 8) = "51) Mid-August"
   s.Cells(14, 8) = "52) Late August"
   s.Cells(15, 8) = "53) Early September"
   s.Cells(16, 8) = "54) Mid-September"
   s.Cells(17, 8) = "55) Late September"
   s.Cells(18, 8) = "56) Early October"
   s.Cells(19, 8) = "57) Mid-October"
   s.Cells(20, 8) = "58) Late October"
   s.Cells(21, 8) = "59) Early November"
   s.Cells(22, 8) = "60) Mid-November"
   s.Cells(23, 8) = "61) Late November"
   s.Cells(24, 8) = "62) Early December"
   s.Cells(25, 8) = "63) Mid-December"
   s.Cells(26, 8) = "64) Late December"
End Sub

Sub edit2_close()
   If ActiveWindow Is Nothing Then
      On Error Resume Next
      CommandBars("Cell").Controls("BFM(&B)").Visible = True
      CommandBars("Cell").Controls("eDB(&e)").Visible = False
      CommandBars("side_menu_i").Visible = True
      CommandBars("side_menu_e").Visible = False
      If (save_flag = 5) And (active_sh = "iEdit") Then
         save_flag = 1
         Run "edit3_determine"
      End If
      Exit Sub
   End If
   edit2_decision
   Application.DisplayAlerts = False 'Do not confirm
   Sheets("iEdit").Delete
   edit_mode = ""
   On Error Resume Next
   Sheets("iData").Select
   [a1].Select
End Sub

Sub make_button(b_sheet, b_name, b_position, b_cmd)
   Set r = Sheets(b_sheet).Range(b_position)
   Set newbutton = Sheets(b_sheet).Buttons.Add(r.Left, r.Top, r.Width, r.Height)
   newbutton.OnAction = b_cmd
   newbutton.Caption = b_name
   newbutton.name = b_sheet & b_position
End Sub

Sub draw_ruledLine(selected_area As Object)
   On Error Resume Next
   selected_area.Select
   Selection.Borders(xlDiagonalDown).LineStyle = xlNone
   Selection.Borders(xlDiagonalUp).LineStyle = xlNone
   With Selection.Borders(xlEdgeLeft)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeTop)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeRight)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   Selection.Borders(xlInsideVertical).LineStyle = xlNone
   With Selection.Borders(xlInsideHorizontal)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   Range("a1").Select
   On Error GoTo 0
End Sub

Sub del_show_frameLine()
    If ActiveWindow.DisplayGridlines = True Then
       ActiveWindow.DisplayGridlines = False
    Else
       ActiveWindow.DisplayGridlines = True
    End If
End Sub

Sub edit2_help()
   CrCr = vbCr & vbCr
   MsgBox _
   "The contents of the menu are as follows." & CrCr & _
   "[Determine] |fffd|F Overwrite the displayed management index to the corresponding location of sheet [management index]" & CrCr & _
   "[Add] |fffd|F After [Determine], add a new index at the last of the management index list." & CrCr & _
   "[Next index] |fffd|FAfter [Determine], you can edit the next management index." & CrCr & _
   "[Previous index] |fffd|FAfter [Determine], you can edit the previous management index." & CrCr & _
   "[Delete] |fffd|F Delete the displayed management index." & CrCr & _
   "[Help] |fffd|F Display this message." & CrCr & _
   "[Reduce] |fffd|F Reduce the cell and the letter in the display screen." & CrCr & _
   "[Expand] |fffd|F Expand the cell and the letter in the dosplay screen." & CrCr & _
   "[Close] |fffd|F After [Determine], close the sheet [index edit], and return to the [management index]." & CrCr & _
   vbCr & _
   "If the column [start of cropping][end of cropping] which is in the L row of the display is empty," & CrCr & _
   "[start of cropping] and [end of cropping] will be regarded as Janualy and December, respectively." & CrCr & _
   "" 'end of help
End Sub

Sub edit_item_newly()
   Application.ScreenUpdating = False 'Stop the update of the screen
   If ActiveWindow Is Nothing Then
      Workbooks.Add
      While ActiveWorkbook.Worksheets.Count > 1
         Sheets(Worksheets.Count).Delete
      Wend
   End If
   global_itmp = 0 'The flag of yes or no
   Dim sh As String
   sh = "iData"
   If Not sheet_exist(sh) Then
      make_sheet_MI
   End If
   If global_itmp = 1 Then edit_all_item
End Sub

Sub edit_all_item()
   edit_mode = ""
   edit_selected_item
End Sub

Sub edit_ticked_item()
   If is_selected_item <> True Then
      MsgBox "Crop has not been chosen "
      Exit Sub
   End If
   edit_mode = "limited"
   edit_selected_item
End Sub

Sub edit_selected_item() '2004.8.18, 2009.6.30
   Dim e_sheet As Object
   On Error GoTo err1
   Application.ScreenUpdating = False 'Stop the update of the screen
   If sheet_exist("iData") Then
      Sheets("iData").Select
   Else
      make_sheet_MI
   End If
   ActiveWindow.LargeScroll toleft:=10
   On Error GoTo 0
   If sheet_exist("iEdit") Then
      Sheets("iEdit").Select
   Else
      ThisWorkbook.Sheets("iEdit").Copy before:=ActiveSheet
      auto_zoom '2013.2.19
   End If
   Set e_sheet = ActiveSheet 'Index edit sheet
   Sheets("iData").Select '2004.8.18
   LastRow = count_LastRow
   If LastRow = 2 Then
      [b2].Select
   ElseIf LastRow > 2 Then
      tmp = ActiveCell.Row
      If tmp > LastRow Then tmp = LastRow
      If tmp < 3 Then tmp = 3
      Cells(tmp, 2).Select
   End If
   show_data2 ActiveCell.Row
   'add_comment
   e_sheet.Select
   e_sheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
   Application.ScreenUpdating = True 'Update of the screen
   If LastRow = 2 Then
      edit2_add
   End If
   Exit Sub
err1:
   make_book_MI
   Resume 'Next
End Sub

Sub my_protect(s As Object)
   s.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True 'DrawingObjects:=False, Contents:=True, _
   Scenarios:=False |fffd||fffd| In these options, the list does not appear when you click.
End Sub

Sub show_selected_item()
   Application.ScreenUpdating = False
   Dim selected_area As Object
   Dim s As Object
   On Error GoTo err1
   Set s = Sheets("iEdit")
   On Error GoTo 0
   index_name_MI s
   index_name_SI s
   Set current_sheet = ActiveSheet
   s.Select
   Set selected_area = Range("b2:e7")
   draw_ruledLine selected_area: color_light_beige Range("c3:e7")
   Set selected_area = Range("b9:c27")
   draw_ruledLine selected_area: color_light_beige Range("c9:c27")
   Set selected_area = Range("e9:f26")
   draw_ruledLine selected_area: color_light_beige Range("f9:f26")
   Set selected_area = Range("h9:i26")
   draw_ruledLine selected_area: color_light_beige Range("i9:i26")
   Set selected_area = Range("k2:l5")
   draw_ruledLine selected_area: color_light_beige Range("l2:l5")
   Set selected_area = Range("k7:l16")
   draw_ruledLine selected_area: color_light_beige Range("l7:l16")
   Set selected_area = Range("k18:m27")
   draw_ruledLine selected_area: color_light_beige Range("l18:m27")
   [a1].Select
   Columns(2).ColumnWidth = Columns(256).ColumnWidth * 2
   Columns(4).ColumnWidth = Columns(256).ColumnWidth * 0.2
   Columns(7).ColumnWidth = Columns(256).ColumnWidth * 0.2
   Columns(1).ColumnWidth = Columns(256).ColumnWidth * 0.3
   Columns(6).ColumnWidth = Columns(256).ColumnWidth * 0.5
   Columns(9).ColumnWidth = Columns(256).ColumnWidth * 0.5
   Columns(10).ColumnWidth = Columns(256).ColumnWidth * 0.2
   Columns(11).ColumnWidth = Columns(256).ColumnWidth * 1.3
   Columns(12).ColumnWidth = Columns(256).ColumnWidth * 0.8
   Columns(13).ColumnWidth = Columns(256).ColumnWidth * 0.8
   
   'current_sheet.Select
   Exit Sub
err1:
   Worksheets.Add: ActiveSheet.name = "iEdit"
   'make_edit_button2
   Resume
End Sub

Sub make_varying_data() 'Temporarily set the variable data of the 10 years profit coefficient.
   Dim tmp2(10) As Long
   av = Cells(23, 3)
   cv = 0.05 + (av / 100000) * 0.2  '2% of the variable coefficient rises per 100,000 yen of the profit coefficient.
   sd = av * cv
   For i = 1 To 10
      tmp2(i) = av + normal_random * sd
      If tmp2(i) < 0 Then tmp2(i) = 10
      Sum = Sum + tmp2(i)
   Next i
   rnd_av = Sum / 10
   diff = rnd_av / av 'The adjustment coefficient of the average value
   For i = 1 To 10
      tmp2(i) = Int(tmp2(i) / diff)
   Next i
   For i = 1 To 10: Cells(6 + i, 12) = tmp2(i): Next i 'display
   Exit Sub
End Sub

Sub calc_profit()
   For i = 1 To 10
      Cells(6 + i, 12) = Cells(17 + i, 12) * Cells(17 + i, 13) - [c23]
   Next i
End Sub

Sub calc_balance()
   [c11] = [c9] * [c10]
   total = 0
   For i = 12 To 20: total = total + Cells(i, 3): Next i
   [c21] = total
End Sub

Sub index_name_SI(s As Object)
   Application.ScreenUpdating = False
   s.Cells(2, 11) = "65) farm category"
   s.Cells(3, 11) = "66) switching crop"
   s.Cells(4, 11) = "67) start of cropping"
   s.Cells(5, 11) = "68) end of cropping"
   s.Cells(7, 11) = "69) 1st year"
   s.Cells(8, 11) = "70) 2nd year"
   s.Cells(9, 11) = "71) 3rd year"
   s.Cells(10, 11) = "72) 4th year"
   s.Cells(11, 11) = "73) 5th year"
   s.Cells(12, 11) = "74) 6th year"
   s.Cells(13, 11) = "75) 7th year"
   s.Cells(14, 11) = "76) 8th year"
   s.Cells(15, 11) = "77) 9th year"
   s.Cells(16, 11) = "78) 10th year"
   s.Cells(18, 11) = "79) 1st year"
   s.Cells(19, 11) = "80) 2nd year"
   s.Cells(20, 11) = "81) 3rd year"
   s.Cells(21, 11) = "82) 4th year"
   s.Cells(22, 11) = "83) 5th year"
   s.Cells(23, 11) = "84) 6th year"
   s.Cells(24, 11) = "85) 7th year"
   s.Cells(25, 11) = "86) 8th year"
   s.Cells(26, 11) = "87) 9th year"
   s.Cells(27, 11) = "88) 10th year"
   s.Cells(6, 12) = "profit coefficient"
   s.Cells(17, 12) = "yield"
   s.Cells(17, 13) = "unit cost (yen)"
End Sub

Sub reduce_screen()
   If ActiveWindow Is Nothing Then Exit Sub
   tmp = ActiveWindow.Zoom
   ActiveWindow.Zoom = tmp * 0.95
End Sub

Sub magnify_screen()
   If ActiveWindow Is Nothing Then Exit Sub
   tmp = ActiveWindow.Zoom
   ActiveWindow.Zoom = tmp * 1.05
End Sub

Sub make_check_button2(num As Integer) 'Creating the check box and setting the color, the size, and the default
   For i = 3 To num
      new_check_button3 i ', row_height
   Next i
End Sub

Sub new_check_button3(i)
   Dim s As Object, r As Object
   Set r = Cells(i, 1)
   tmp = r.Value
   Set s = ActiveSheet.CheckBoxes.Add(r.Left, r.Top, r.Width, 0) 'r.Height)
   s.Select
   Selection.ShapeRange.Fill.Visible = msoTrue
   Selection.ShapeRange.Fill.Solid
   Selection.ShapeRange.Fill.ForeColor.SchemeColor = 42 'light blue '48 blue
   Selection.Characters.Text = "" 'name on the right of check box
   With Selection
      .Value = r.Value 'Adopt the previous value
      .LinkedCell = r.Address 'Setting the cell that indicate the value "$a$5".
   End With
   tmp = s.Height
   Rows(i & ":" & i).RowHeight = tmp * 1.05
   Selection.ShapeRange.IncrementTop tmp * 0.05 'shift downward
End Sub

Sub combine_cells()
    Selection.MergeCells = True
End Sub

Sub color_cells()
    Selection.Interior.ColorIndex = 40
End Sub

Sub fair_combined()
    Selection.MergeCells = False
End Sub

Sub fair_colored()
    Selection.Interior.ColorIndex = xlNone
End Sub

Sub draw_ruledLine_alone()
   On Error Resume Next
   Selection.Borders(xlDiagonalDown).LineStyle = xlNone
   Selection.Borders(xlDiagonalUp).LineStyle = xlNone
   With Selection.Borders(xlEdgeLeft)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeTop)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeBottom)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   With Selection.Borders(xlEdgeRight)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   Selection.Borders(xlInsideVertical).LineStyle = xlNone
   With Selection.Borders(xlInsideHorizontal)
       .LineStyle = xlContinuous
       .Weight = xlMedium
       .ColorIndex = 9
   End With
   Range("a1").Select
   On Error GoTo 0
End Sub

Sub copy_value() 'The sample of the copying value
    Selection.Copy
    Range("C9").Select
    Selection.PasteSpecial Paste:=xlValues
    Application.CutCopyMode = False
End Sub

Sub color_light_beige(selected_cells) 'Set the color of the background of the cell to the light beige
   selected_cells.Select
   With Selection.Interior
       .Pattern = xlGray50
       .PatternColorIndex = 40
   End With
End Sub

Function sheet_exist(sheet_name As String) 'If there is a designated sheet, return the true.
   sheet_exist = False
   For Each mb In Sheets
      If mb.name = sheet_name Then sheet_exist = True: Exit Function
   Next mb
End Function

Function farmCondition_sheet() 'If there is a sheet [Farming condition], return the true.
   If sheet_exist("fCondition") = True Then
      farmCondition_sheet = True
   Else
      'MsgBox "Please run the menu [Farming condition]"
      make_farmCondition_sheet
      Application.ScreenUpdating = True
      MsgBox "The sheet [Farming condition] has been created" & vbCrLf & vbCrLf & _
             "Return to the sheet [management index] after confirming the content of the farming condition" & vbCrLf & vbCrLf & _
             "And please run it again."
      farmCondition_sheet = False
   End If
End Function

Sub lock_except_column_a() 'Lock the anything other than the row
   Columns("B:BX").Select '[b:bx]->OK
   Selection.Locked = True
   [a:a].Select 'columns("A:A")
   Selection.Locked = False
   ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
   [a1].Select
End Sub

Sub add_comment(adrs$, cmnt$) 'Add a coment
   On Error Resume Next
   'adrs$ = "a5"
   'cmnt$ = "ABC"
   Range(adrs$).AddComment
   Range(adrs$).Comment.Visible = False
   Range(adrs$).Comment.Text Text:=cmnt$ & Chr(10) & ""
End Sub

Sub modify_comment_style()
   Range("K3").Select
   Range("K3").Comment.Text Text:="If it is a switching crop," & Chr(13) & "" & Chr(10) & "fill in the 1" & Chr(13) & "" & Chr(10) & "Please"
   Selection.ShapeRange.ScaleWidth 0.67, msoFalse, msoScaleFromTopLeft
   Selection.ShapeRange.ScaleHeight 0.69, msoFalse, msoScaleFromTopLeft
   Range("K3").Comment.Shape.Select True
   Selection.ShapeRange.SetShapesDefaultProperties
   Range("K3").Comment.Text Text:="If it is the switching crop," & Chr(13) & "" & Chr(10) & "fill in the 1" & Chr(13) & "" & Chr(10) & "Please"
   Selection.ShapeRange.ScaleWidth 1.28, msoFalse, msoScaleFromTopLeft
   Selection.ShapeRange.ScaleHeight 1.77, msoFalse, msoScaleFromTopLeft
   Range("K3").Select
End Sub

Sub Macro2() 'Sample of fixing the window's frame.
    Range("B1").Select
    ActiveWindow.FreezePanes = True
End Sub

Sub selected_item_help()
   d_cr = vbCr & vbCr
   MsgBox "When you click the button [edit], the sheet [supplemental edit] appears" & d_cr & _
   "supplement the data covering farm category, start and end of cropping, profit and yield for 10 years, etc.." & d_cr & _
      " (1) Crop to grow|fffd|FPlease fill farm category (rice field, upland crop farm, grazing land, tree crop farm, house, etc.|fffd|j of the land to be cropped" & d_cr & _
      "If there is no entry, it is classified as [land]" & d_cr & _
      " (2) Start of cropping|fffd|FPleas fill the starting month of the cultivating term of the crop." & d_cr & _
      " (3) End of cropping|fffd|FPlease fill the ending month of the cultivating term of the crop." & d_cr & _
      "Please fill the above when you create the linear programming model." & d_cr & _
      "When you create the risk programming model, please supplement the following items." & d_cr & _
      " (4) Profit of 10 years|fffd|F|fffd|iyield|fffd|~unit cost|fffd||variable cost|fffd|jper 10a" & _
      "" & d_cr & _
      " (5) Yield of 10 years|fffd|FPlease put the yield per 10a." & d_cr & _
      " (6) Unit cost of 10 years|fffd|FIf the unit of yield is kg, please put in the unit cost per kg." & _
      "If the unit of yield is ton, please fill in the unit cost per ton." & d_cr & _
      " |fffd||fffd| If (5) and (6) are filled, (4) is not required." & d_cr & _
      "The profit of 10 years is caluculated with the button [profit calculation]." & d_cr & _
      "And with the button [automatic calculation], you can set the profit of 10 years as provisional value." & d_cr & _
      "When you finished the|fffd|msupplemental edit], you can create the model and  calculate the optimal solution with the next button." & d_cr & _
      "|fffd|i|fffd|P|fffd|jLP model|fffd|FIt creates the linear planning model in which the labor constraint is set for every month." & d_cr & _
      "|fffd|i|fffd|Q|fffd|jLP calculation|fffd|FIt calculates the optimal solution after creating the LP model." & d_cr & _
      "|fffd|i|fffd|R|fffd|jRisk model|fffd|FIt creates the risk programming model in which the labor constraint is set for every month." & d_cr & _
      "" & d_cr & _
      "|fffd|i|fffd|S|fffd|jRisk calculation|fffd|FIt calculates the solution after creating the Risk model."
End Sub

Sub copy_MIsheet_to_ILsheet()
   On Error Resume Next
   If [a1] <> "[MI]" Then
      MsgBox "Please run from the management index sheet."
      Exit Sub
   End If
   Application.ScreenUpdating = False 'Stop the update of the screen
   Set ACsheet = ActiveSheet 'Refer to the sheet of the management index
   Application.DisplayAlerts = False
   If sheet_exist("(iList)") Then Sheets("(iList)").Delete
   make_ILsheet
   Set ILsheet = Sheets("(iList)")
   ACsheet.Select
   [b3].Select
   indx = 0 'Number of the index
   Do
      If Cells(3 + indx, 2) <> "" Then
         indx = indx + 1
      Else
         Exit Do
      End If
   Loop
   ILsheet.Columns(3, 256).ClearContents
   If indx = 0 Then
      ILsheet.Select
      MsgBox "There is no the management index."
      Exit Sub
   End If
   For i = 1 To indx
      With ILsheet
         If i > 6 Then
            .Columns(2 + i).Insert Shift:=xlToRight
         End If
         If Cells(2 + i, 1) = True Then
            .Cells(3, 2 + i) = "Do"
         Else
            .Cells(3, 2 + i) = "Not do"
         End If
         .Cells(4, 2 + i) = Cells(2 + i, 2)
         .Cells(5, 2 + i) = Cells(2 + i, 3)
         .Cells(6, 2 + i) = Cells(2 + i, 4) 'crop (process) name
         .Cells(7, 2 + i) = Cells(2 + i, 5) & Cells(2 + i, 6) & Cells(2 + i, 7) '|fffd||fffd||fffd||fffd|
         .Cells(8, 2 + i) = Cells(2 + i, 8)
         .Cells(9, 2 + i) = Cells(2 + i, 9)
         .Cells(10, 2 + i) = Cells(2 + i, 26)
         .Cells(11, 2 + i) = Cells(2 + i, 10) 'gross income
         .Cells(12, 2 + i) = Cells(2 + i, 11)
         .Cells(13, 2 + i) = Cells(2 + i, 12)
         .Cells(14, 2 + i) = Cells(2 + i, 13)
         .Cells(15, 2 + i) = Cells(2 + i, 14)
         .Cells(16, 2 + i) = Cells(2 + i, 15)
         .Cells(17, 2 + i) = Cells(2 + i, 16)
         .Cells(18, 2 + i) = Cells(2 + i, 17)
         .Cells(19, 2 + i) = Cells(2 + i, 18)
         .Cells(20, 2 + i) = Cells(2 + i, 19)
         .Cells(21, 2 + i) = Cells(2 + i, 25) 'variable cost
         .Cells(22, 2 + i) = .Cells(11, 2 + i) - .Cells(21, 2 + i)
         .Cells(23, 2 + i) = Cells(2 + i, 75)
         .Cells(24, 2 + i) = Cells(2 + i, 76)
         .Cells(25, 2 + i) = Cells(2 + i, 77)
         .Cells(26, 2 + i) = Cells(2 + i, 78)
         .Cells(27, 2 + i) = Cells(2 + i, 79)
         .Cells(28, 2 + i) = Cells(2 + i, 72)
         .Cells(29, 2 + i) = Cells(2 + i, 80)
         .Cells(30, 2 + i) = Cells(2 + i, 73) 'end of cropping (ten-day period)
         For j = 30 To 65
            .Cells(j + 2, 2 + i) = Cells(2 + i, j) 'labor coefficients of monthly- and ten-day periods
         Next j
      End With
   Next i
   ILsheet.Select
   [a1].Select
End Sub

Sub make_ILsheet()
   ThisWorkbook.Sheets("(iList)").Copy before:=ActiveSheet
End Sub

Sub make_budget_sheet(Optional land_cnst As Integer = 36) 'argument 2009.10.25   Optional 2016.11.8
   Application.ScreenUpdating = False
   If sheet_exist("(Table)") = False Or _
   sheet_exist("fCondition") = False Then
      MsgBox "There is not the symplex table sheet.$$$ or the farming conditions sheet." & vbCr & vbCr & _
      "Please run again after running the LP calculation, etc.. " & vbCr
      Exit Sub
   End If
   table_end = 100 '35 'Row number of the beginning of basic data
   Application.DisplayAlerts = False
   
   On Error Resume Next 'commented out during debugging 2016.2.20

   If sheet_exist("fPlan") Then Sheets("fPlan").Delete
   ThisWorkbook.Sheets("fPlan").Copy before:=ActiveSheet
   Sheets("fPlan").Unprotect
   Sheets("(Table)").Cells.Copy
   [a1].Select
   Selection.PasteSpecial Paste:=xlValues
   Rows("1:2").ClearContents
   [a1] = "[Farming plan]"
   
   jp = 1 'Initial value in the row after the end row of the actual process.
   For j = 5 To 255
      If Cells(3, j) = "" Then jp = j: Exit For
      If InStr(Cells(3, j), "[Rented land]") > 0 Then jp = j: Exit For
      If InStr(Cells(3, j), "[Part time]") > 0 Then jp = j: Exit For
   Next j
   'Delete the symplex table in the right row than the actual process.
   Cells(3, jp).Select
   While ActiveCell <> ""
      Columns(Cells(3, jp).Column).Delete 'Shift:=xlToLeft
   Wend
   'Keep the space for the farming plan
   Rows("4:" & table_end).Select
   Selection.Insert Shift:=xlDown
            Rows("3:3").Select
            With Selection
               .HorizontalAlignment = xlCenter
               .VerticalAlignment = xlCenter
               .WrapText = True
            End With
   'Delete the unnecessary constraint formula on the farming plan.
   Cells(table_end + 2, 2).Select
   While ActiveCell <> ""
      If InStr(ActiveCell, "Rented land upper limit") > 0 _
      Or InStr(ActiveCell, "Part time upper") > 0 Then
         Rows(ActiveCell.Row).Delete 'Shift:=xlToLeft
      Else
         ActiveCell.Offset(1, 0).Activate
      End If
   Wend
   'Describe the item name (front side) of the farming plan
   [c3] = "whole management"
   [b4] = "Crop acreage (unit|fffd|Fha)"
   [b5] = " Paddy ( |fffd|V )"
   [b6] = " Field ( |fffd|V )"
   [b7] = " Pasture ( |fffd|V )"
   [b8] = " Orchard ( |fffd|V )"
   [b9] = " Greenhouse ( |fffd|V )"
   [b10] = " Other ( |fffd|V )"
   [b11] = " Don't use land" 'The choises of the crop list which does not use land
   [b12] = "Yield (kg/ha)"
   [b13] = "Unit cost ($/kg)"
   [b14] = "Other incomes ($/ha)"
   [b15] = "Gross income total ( |fffd|V )"
   [b16] = "Cost of seeds ( |fffd|V )"
   [b17] = "Cost of fertilizer ( |fffd|V )"
   [b18] = "Agro-chemicals and sanitation ( |fffd|V )"
   [b19] = "Cost of energy and power ( |fffd|V )"
   [b20] = "Cost of other materials ( |fffd|V )"
   [b21] = "Land improvement and water use ( |fffd|V )"
   [b22] = "Rental cost ( |fffd|V )"
   [b23] = "Transportation charge ( |fffd|V )"
   [b24] = "Other costs ( |fffd|V )"
   [b25] = "Total variable costs ( |fffd|V )"
   [b26] = "Profit coefficient ( |fffd|V )"
   [b27] = "Proportional profit ($)"
   [b28] = "Fixed costs(depreciation etc.) ( |fffd|V )"
   [b29] = "Land rent ( |fffd|V )"
   [b30] = "Full-time hired labor costs ( |fffd|V )"
   [b31] = "Part-time hired labor costs ( |fffd|V )"
   [b32] = "Agricultural income ( |fffd|V )"
   'Supplement the item name (beginning of the table) of the farming plan
   Cells(3, jp + 1) = "Rented land acreage" & Chr(10) & "Part time days"
   Cells(3, jp + 2) = "Land rent" & Chr(10) & "Part time" & Chr(10) & "Unit price"

   'transcribe an operating level
   'by farm category
   For j = 5 To jp - 1 'crop list(process) name has been described in the row 5|fffd|`(jp-1)
      'Decide the farm category
      Dim timoku() As Integer 'Represent the number of lines on the sheet of farm category column which is used the crop list in the row J.
      ReDim timoku(jp - 1) 'For example, if the first process is an upland crop, it is iland(j)=2.
      'Search the land coefficient which is not zero
      i = table_end + 2
      Do
         itmp = 0
         If Cells(i, 2) = "" Then Exit Do
         If Cells(i, j) <> "" Then
            stmp = Trim(Cells(i, 2)) '|fffd|y|fffd|n|fffd||fffd||fffd||4eb82||316||fffd||fffd|O
            space_pos = InStr(stmp, " ") '|fffd|y|fffd|n|fffd||fffd||fffd||4eb82||316||fffd||fffd|O|fffd||312||fffd||fffd||303|X|fffd|y|fffd|[|fffd|X|fffd||308||292|u
            If space_pos > 0 Then stmp = Left(stmp, space_pos - 1) '|fffd|n|fffd||696||fffd||fffd||312||fffd||fffd|o
            Select Case stmp
               Case "Paddy"
                  itmp = 1
               Case "Field"
                  itmp = 2
               Case "Pasture"
                  itmp = 3
               Case "Orchard"
                  itmp = 4
               Case "Greenhouse"
                  itmp = 5
               Case "Other"
                  itmp = 6
               Case Else
                  itmp = 7
            End Select
'            itmp = InStr("Paddy/ Field/ Pasture/ Orchard/ Greenhouse/ Other", stmp) '0|fffd|`6
            Exit Do
         End If
         i = i + 1
      Loop
'      If itmp = 0 Then itmp = 7 'The others (process which does not directly use a land ex.|fffd|Fanimal feeding )
      Cells(4 + itmp, j) = Sheets("Result").Cells(j + 1, 4)
      Cells(4 + itmp, j).NumberFormatLocal = "#,##0.0"
   Next j
   'Create the formula that totalizes the values of every process according to the farm category
   For j = 5 To jp - 1
'      Cells(4, j) = "=sum(" & Cells(5, j).Address & ":" & _
'                     Cells(10, j).Address & ")" '11->10 Excepted [others] 2015.8.30
      Cells(4, j) = "=sum(" & Cells(5, j).Address & ":" & _
                     Cells(10, j).Address & ")*" & save_land_coef(j - 4) '11->10 Excepted [others] 2015.8.30
      Cells(4, j).NumberFormatLocal = "#,##0.0"
   Next j
   'Create the formula that totatlizes the values of every process according to the farm category. Do not except [others] 2015.8.30
   For i = 4 To 11
      Cells(i, 3) = "=sum(" & Cells(i, 5).Address & ":" & _
                     Cells(i, jp - 1).Address & ")"
      If i < 11 Then
         Cells(i, 3).NumberFormatLocal = "#,##0.0 ""ha"""
      Else
         Cells(i, 3).NumberFormatLocal = "#,##0.0    "
      End If
   Next i
   'Transcribe the gross income and the variable cost from the management index sheet
   iRow = 3 'The current row of the management index sheet
   iCol = 5 'The current line of the farming plan sheet|fffd|FBe careful that there is one line more than the finalized table.
   Set ish = Sheets("iData")
   While ish.Cells(iRow, 2) <> ""
      If ish.Cells(iRow, 1) = True Then 'chosen index
         Cells(12, iCol) = ish.Cells(iRow, "h") 'yield
         Cells(12, iCol).NumberFormatLocal = "#,##0  " '"kg"""
         Cells(13, iCol) = ish.Cells(iRow, "i") 'unit cost
         Cells(13, iCol).NumberFormatLocal = "#,##0  " '"yen"""
         Cells(14, iCol) = ish.Cells(iRow, "z") '/ 1000# 'other incomes 2016.6.29
         Cells(14, iCol).NumberFormatLocal = "#,##0  " '"kilo yen"""
         'total gross income
         Cells(15, iCol) = _
         "=(" & Cells(12, iCol).Address & "*" & Cells(13, iCol).Address & ")+" & Cells(14, iCol).Address '"/1000" deleted on 2016.6.29
         '"=(" & Cells(12, iCol).Address & "*" & Cells(13, iCol).Address & ")/1000.0+" & Cells(14, iCol).Address 'total gross income
         Cells(15, iCol).NumberFormatLocal = "#,##0  " '"kilo yen"""
         For i = 16 To 24 'cost of seeds and seedlings|fffd|`other costs
            Cells(i, iCol) = ish.Cells(iRow, i - 5) '/ 1000 2016.6.29
            Cells(i, iCol).NumberFormatLocal = "#,##0  " '"kilo yen"""
         Next
         Cells(25, iCol) = "=sum( " & Cells(16, iCol).Address & ":" & Cells(24, iCol).Address & ")" 'total variable cost
         Cells(26, iCol) = "=" & Cells(15, iCol).Address & "-" & Cells(25, iCol).Address 'profit coefficient
         
'         Cells(27, iCol) = "=" & Cells(4, iCol).Address & "*" & Cells(26, iCol).Address 'proportional profit(of every process)
         Cells(27, iCol) = _
         "=sum(" & Cells(5, iCol).Address & ":" & Cells(11, iCol).Address & ")*" & Cells(26, iCol).Address '2015.8.30
         
         Cells(27, iCol).NumberFormatLocal = "#,##0  " '"kilo yen"""
         
         iCol = iCol + 1
      End If
      iRow = iRow + 1
   Wend
   'Formula that calculates the sum of the proportional profit for the entire management.
   Cells(27, 3) = "=sum(" & Cells(27, 5).Address & ":" & Cells(27, jp - 1).Address & ")"
   Cells(27, 3).NumberFormatLocal = "#,##0 ""$"""
   
   Columns("c:iv").ColumnWidth = 8.11
   Columns(1).ColumnWidth = 8.11 * 0.7
   Columns("a:a").ColumnWidth = 7.3
   Columns("b:b").ColumnWidth = 8.11 * 1.5
   Columns("c:c").ColumnWidth = 8.11 * 1.6
   'Columns("D:D").ColumnWidth = 1.7
   Columns(jp).ColumnWidth = 4
   Columns(jp + 1).ColumnWidth = 8.11 * 1.5
   Columns(jp + 2).ColumnWidth = 8.11 * 1.1
   
   'Creating a calculation basic data
   Cells(table_end, 1) = "Basic data"
   Cells(table_end, 2) = "open and close" 'Delete not allowed, decide the last_row with the number of blanks later
   Cells(table_end, 1).Font.ColorIndex = 2 'white (obscure)
   'Describe the item of the part of calculation base (part of the single table)(1)
   Cells(table_end + 1, jp).Select
   ActiveCell.Offset(0, 1) = "<required land>"
   ActiveCell.Offset(0, 2) = "<rented land>"
   'ActiveCell.Offset(0, 3) = "<land rent/10a>"
   'Insert 2 rows between the land constraint formula and the labor constraint formula.
   Cells(table_end + 2, 2).Select
   Do
      If InStr(ActiveCell, "Labor") > 0 Then
         Rows(ActiveCell.Row).Insert Shift:=xlDown
         Rows(ActiveCell.Row).Insert Shift:=xlDown
         Exit Do
      Else
         ActiveCell.Offset(1, 0).Activate
      End If
   Loop
   'Describe the item of the part of calculation base (part of the symplex table)(2)
   ActiveCell.Offset(1, 0).Activate
   Cells(ActiveCell.Row, jp + 1).Select
   ActiveCell = "<necessary working hours>"
   ActiveCell.Offset(0, 1) = "<the employment of the amount>"
   ActiveCell.Offset(0, 2) = "<fixed employment days>"
   'Create a calculation formula of required land and labor apart from time**** [It requires significant modification ]
   'The calculation formula of the required land
   Cells(table_end + 2, 2).Select
   ework = Cells(4, jp - 1).Address 'A1 form address of the cell in the right-end of the operating level
   Do
      If ActiveCell <> "" Then
         iRow = ActiveCell.Row
         ecof = ActiveCell.Offset(0, jp - 3).Address
         Cells(iRow, jp + 1) = _
         "=sumproduct(e4:" & ework & ",e" & iRow & ":" & ecof & ")"
         stmp = "(" & Cells(iRow, jp + 1).Address & "-" & Cells(iRow, 3).Address & ")"
         Cells(iRow, jp + 2) = "=if(" & stmp & "<0 ,0," & stmp & ")"
      Else
         land_max_row = ActiveCell.Row
         Exit Do 'If there is a blank row, it will end
      End If
      ActiveCell.Offset(1, 0).Activate 'Move down one row
   Loop
   'The calculation formula of the required labor
   ActiveCell.Offset(2, 0).Activate 'Move down 2 row
   part_hour = Sheets("fCondition").[e9] 'The working hours of the temporary employment per day
   Do
      If ActiveCell <> "" Then
         iRow = ActiveCell.Row
         ecof = ActiveCell.Offset(0, jp - 3).Address
         Cells(iRow, jp + 1) = _
         "=sumproduct(e4:" & ework & ",e" & iRow & ":" & ecof & ")"
         stmp = "(" & Cells(iRow, jp + 1).Address & "-" & Cells(iRow, 3).Address & ")"
         stmp2 = "(" & Cells(iRow, jp + 3).Address & "*" & part_hour & ")"
         Cells(iRow, jp + 2) = "=if(" & stmp & "<" & stmp2 & " ," & stmp2 & "," & stmp & ")"
      Else
         labor_sum_row = ActiveCell.Row 'The row to fill out the working hours for a year
         Exit Do 'If there is a blank row, it will end
      End If
      ActiveCell.Offset(1, 0).Activate 'Move down one row
   Loop
   'Copy of the fixed employment days
   If InStr(Sheets("fCondition").[i5], "Hirable days") < 1 Then
      copied_row = iRow - 36
      For i = 1 To 18
         Cells(copied_row + i, jp + 3) = Sheets("fCondition").[FC_part].Cells(i, 1)
      Next
      copied_row = copied_row + 18
      For i = 1 To 18
         Cells(copied_row + i, jp + 3) = Sheets("fCondition").[FC_part].Cells(i, 5)
      Next
   End If
   'Fixed costs
   [c28] = "=fCondition!d25"
   [c28] = [c28].Value 'digitizing
   [c28].NumberFormatLocal = "#,##0 ""$"""
   'Create a calculation formula of the rented land area
   itop = table_end + 2 'The row which has the first land constraint formula
   'land_cnst : The number of the land constraint formula 36 or 12
   For i = itop To itop - 1 + 36 * 7 Step land_cnst
      If Cells(i, 2) = "" Then Exit For
'      itmp = InStr("Paddy/ Field/ Pasture/ Orchard/ Greenhouse/ Other", Left(Trim(Cells(i, 2)), 1)) 'The serial number of the farmland category
      stmp = Trim(Cells(i, 2)) '|fffd|y|fffd|n|fffd||fffd||fffd||4eb82||316||fffd||fffd|O
      space_pos = InStr(stmp, " ") '|fffd|y|fffd|n|fffd||fffd||fffd||4eb82||316||fffd||fffd|O|fffd||312||fffd||fffd||303|X|fffd|y|fffd|[|fffd|X|fffd||308||292|u
      If space_pos > 0 Then stmp = Left(stmp, space_pos - 1) '|fffd|n|fffd||696||fffd||fffd||312||fffd||fffd|o
      Select Case stmp
         Case "Paddy"
            itmp = 1
         Case "Field"
            itmp = 2
         Case "Pasture"
            itmp = 3
         Case "Orchard"
            itmp = 4
         Case "Greenhouse"
            itmp = 5
         Case "Other"
            itmp = 6
         Case Else
            itmp = 7
      End Select
      Cells(4 + itmp, jp + 1) = _
      "=max(" & Cells(i, jp + 2).Address & ":" & Cells(i + land_cnst - 1, jp + 2).Address & ")"
      Cells(4 + itmp, jp + 1).NumberFormatLocal = "#,##0.0 "
   Next i
   'land rent
   'Transcribe the land rent
   For i = 5 To 10
      Cells(i, jp + 2) = Sheets("fCondition").Cells(i + 7, 6)
      Cells(i, jp + 2).NumberFormatLocal = "#,##0 ""$"""
      Cells(i, jp + 1).NumberFormatLocal = "#,##0 ""ha"""
   Next i
   'Create the formula of the land rent
   [c29] = "=sumproduct(" & Cells(5, jp + 1).Address & ":" & Cells(10, jp + 1).Address _
    & "," & Cells(5, jp + 2).Address & ":" & Cells(10, jp + 2).Address & ")"
   [c29].NumberFormatLocal = "#,##0 ""$"""
   'permanent employed labor costs
   [c30] = "=fCondition!f6*fCondition!d6"
   [c30].NumberFormatLocal = "#,##0 ""$"""
   'temporary employed labor costs
   'Transcribe the unit cost of the temporary employed labor
   Cells(31, jp + 2) = Sheets("fCondition").[d9]
   Cells(31, jp + 2).NumberFormatLocal = "#,##0 ""$"""
   'Sum of the temporary employed labor
   itop = Cells(land_max_row + 2, jp + 2).Address
   iend = Cells(labor_sum_row - 1, jp + 2).Address
   tmp = Sheets("fCondition").[e9]
   Cells(31, jp + 1) = "=sum(" & itop & ":" & iend & ")" & "/" & tmp
   Cells(31, jp + 1).NumberFormatLocal = "#,##0.0 ""day"""
   [c31] = "=" & Cells(31, jp + 1).Address & "*" & Cells(31, jp + 2).Address
   [c31].NumberFormatLocal = "#,##0 ""$"""
   'agricultual income
   [c32] = "=c27-c28-c29-c30-c31"
   [c32].NumberFormatLocal = "#,##0 ""$"""
   'Adjust the format
   'Search the last row(last_row)
   cnt = 0
   For i = table_end To Rows.Count
      If Cells(i, 2) = "" Then cnt = cnt + 1
      If cnt = 3 Then
         last_row = i - 1
         Exit For
      End If
   Next i
   
   'Add the row of the Model in doing the menu"Campute again".
   'Make the last_row small by the number of added rows.
   Do While InStr(Cells(last_row, 2), " 12-3") = 0
      Rows(last_row).Delete
      last_row = last_row - 1
   Loop
   
   'Highlight the cells of the item
   Range(Cells(3, 2), Cells(32, jp - 1)).Select
   With Selection.Interior
      .ColorIndex = 0
      .Pattern = xlGray50
      .PatternColorIndex = 35 'Green-based color
   End With
   Range(Cells(3, jp + 1), Cells(19, jp + 2)).Select
   With Selection.Interior
      .ColorIndex = 0
      .Pattern = xlGray50
      .PatternColorIndex = 35 'Green-based color
   End With
   Range(Cells(4, 3), Cells(32, jp + 2)).Select
   With Selection.Interior
      .ColorIndex = xlNone 'Return to the automatic
   End With
   '===Highlight the hidden range
   Range(Cells(table_end + 1, 2), Cells(last_row, jp - 1)).Select
   With Selection.Interior
      .ColorIndex = 0
      .Pattern = xlGray50
      .PatternColorIndex = 35 'Green-based color
   End With
'   Range(Cells(table_end + 1, jp + 1), Cells(last_row, jp + 2)).Select
'   With Selection.Interior
'      .ColorIndex = 0
'      .Pattern = xlGray50
'      .PatternColorIndex = 35
'   End With
   '===
   
   'Specify the input possible cell
   Range(Cells(5, 5), Cells(14, jp - 1)).Select 'crop area, gross income details
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .ColorIndex = 19 'cream-based color
      '.Pattern = xlGray50
      '.PatternColorIndex = 40 'brown-based  color
   End With
   Range(Cells(16, 5), Cells(24, jp - 1)).Select 'variable cost details
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .ColorIndex = 19 'cream-based color
   End With
   Cells(28, 3).Select 'Fixed costs
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .ColorIndex = 19 'cream-based color
   End With
   Cells(31, jp + 2).Select 'Unit cost of the temporary employment
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .ColorIndex = 19 'cream-based color
   End With
   Range(Cells(5, jp + 2), Cells(10, jp + 2)).Select 'land rent per ha
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .ColorIndex = 19 'cream-based color
   End With
   '===Highlight the hidden range
   Range(Cells(table_end + 2, 3), Cells(last_row, jp - 1)).Select
   Selection.Locked = False
   Selection.FormulaHidden = False
   With Selection.Interior
      .Pattern = False
      .ColorIndex = 19 'cream-based color
   End With
   Range(Cells(table_end + 2, 3), Cells(last_row, 3)).Select 'row of the permanent labor constraint
   With Selection
      .Interior.ColorIndex = 0
      .Locked = True 'protect
   End With
   '===
   
   For i = 3 To 9
      Range(Cells(i, 3), Cells(i, 4)).Select
      merge_cells
      If i = 3 Then in_center
   Next i
   
   'draw a border
   Range(Cells(3, 2), Cells(32, jp + 2)).Borders.ColorIndex = xlAutomatic '53 <= brown
   Range(Cells(table_end + 1, 2), Cells(last_row, jp + 2)).Borders.ColorIndex = xlAutomatic '53 <= brown
   
   'Hide the operational level of the farm category which is not imposed land constraint formula
   For i = 5 To 11
      hide_row = True
      For j = 5 To jp - 1
         If Cells(i, j) <> "" Then
            hide_row = False
            Exit For
         End If
      Next j
      If hide_row = True Then Rows(i).Hidden = True
   Next i
   'Put "-" for the operating level of the crop that does not use a farm category, and lock it.
   Set crop_area = Range(Cells(5, 4), Cells(5 + 6, jp - 1))
   For Each cl In crop_area.Cells
      If cl = "" Then
         cl.Value = Chr(39) & "-" '|fffd||fffd| is em space
         cl.HorizontalAlignment = xlRight 'Right-justified placement
         cl.Locked = True 'Lock
         cl.Interior.PatternColorIndex = xlNone 'The background is green-based color
      End If
   Next cl
   'Make the text color of the operating level (4th row) to white
   Range(Cells(4, 4), Cells(4, jp - 1)).Font.ColorIndex = 2
   
   Cells(table_end, 1).Select
   'ActiveWindow.FreezePanes = True

   'Delete the line which shows the relationship between the left and right side.
   Columns(4).Delete: jp = jp - 1
   
   'Hide the basic data
   Cells(table_end, 2).Locked = False
   'Search the last row (last_row)
   cnt = 0
   For i = table_end To Rows.Count
      If Cells(i, 2) = "" Then cnt = cnt + 1
      If cnt = 3 Then 'Since there are two empty cells in the middle, 3rd one is the end sign.
         last_row = i - 1
         Exit For
      End If
   Next i
   Rows((table_end + 1) & ":" & last_row).Select
   Selection.EntireRow.Hidden = Not Selection.EntireRow.Hidden
   'Move the labor coefficient table to the top of the basic data
   iRow = land_cnst 'The number of rows to moved
   Rows((last_row - iRow) & ":" & last_row).Cut
   Cells(table_end + 1, 1).Insert Shift:=xlDown
   'Display the labor coefficient
   Rows((table_end + 1) & ":" & (last_row)).Hidden = False '(table_end+37)->(last_row) 2016.7.28
   'Adjust the front side and hide A line
   Cells(table_end + 1, 2) = "Labor coefficient"
   Cells(table_end + 1, 2).Font.FontStyle = "Bold" ' type"
   Range("a" & (table_end + 2) & ":a" & (last_row)).Font.ColorIndex = 2
   'Hide the line for the calculation on the right-end of the table
   Range(num2char(jp + 1) & (table_end + 1) & ":" & num2char(jp + 3) & (last_row)).Font.ColorIndex = 2
   'Copy the process name
   Range("d3:" & num2char(jp - 1) & "3").Copy
   Range("d101").PasteSpecial Paste:=xlValues
   Application.CutCopyMode = False
   
   'Writing of the labor coefficient|fffd|~operating level|fffd|ifor graph display|fffd|j
   'Front side|fffd|Fcopy the value
   For i = 61 To 61 + (iRow - 1)
      itmp = table_end + 2 - 61
      stmp = Mid(Cells(i + itmp, 2), 7) ' <-3) 2017.5.16
      jtmp = InStr(stmp, "-") - 1
      stmp = Left(stmp, jtmp) 'The number of the month|fffd|FJanuary|fffd||fffd|1|fffd|AFebruary|fffd||fffd|2|fffd|A|fffd|E|fffd|E|fffd|E
      If ((i - 60) Mod 3) = 1 Then Cells(i, 2) = stmp 'If it is Early ten-day period, fill it
      Cells(i, 3) = Cells(i + itmp, 3).Value
   Next i
   'labor coefficient|fffd|~operating level|fffd|Fcopy of the formula
   For i = 61 To 61 + (iRow - 1)
      itmp = table_end + 2 - 61
      For j = 4 To jp - 1
         Cells(i, j) = "=" & Cells(i + itmp, j).Address & "*" & Cells(4, j).Address
         Cells(i, j).Font.ColorIndex = 2
      Next j
   Next i
   
   'Automatic adjustment of column width
   Columns(1).AutoFit
   Range("b3:b31").Columns.AutoFit
   Range(Cells(3, 3).Address & ":" & Cells(32, jp - 1).Address).Columns.AutoFit
   
   'Creating a figure
   make_graph_landuse 3, jp - 4 '(jp-4)->the number of the processes
   make_graph_labor jp - 4
   
   'Insert 3 rows
   ActiveSheet.Unprotect
   Rows("2:4").Insert Shift:=xlDown
   'Set up the button
'   make_button ActiveSheet.name, "Copy", "A2", "button_menu_sheet_copy"
'   make_button ActiveSheet.name, "Unprotect", "A3", "button_menu_sheet_protect"
'   make_button ActiveSheet.name, "Unprotect", "A48", "button_menu_sheet_protect"
'   make_button ActiveSheet.name, "Unprotect", "A103", "button_menu_sheet_protect"

   iCP = 2 '|fffd|R|fffd|s|fffd|[|fffd|{|fffd|^|fffd||fffd||fffd||30d|s|fffd||50d||fffd|
   iUP1 = 3 '|fffd|v|fffd||fffd||fffd|e|fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||30d|s|fffd||50d||fffd|
   iUP2 = 48 '|fffd||fffd||fffd||fffd|
   iUP3 = 103 '|fffd||fffd||fffd||fffd|
   Set cel = Cells(iCP, 1): cel.Value = "Copy": cel.Interior.Color = RGB(255, 231, 255): cel.Locked = False 'light pink
'   Set cel = Cells(iUP1, 1): cel.Value = "Unprotect": cel.Interior.Color = RGB(255, 231, 255): cel.Locked = False
'   Set cel = Cells(iUP2, 1): cel.Value = "Unprotect": cel.Interior.Color = RGB(255, 231, 255): cel.Locked = False
'   Set cel = Cells(iUP3, 1): cel.Value = "Unprotect": cel.Interior.Color = RGB(255, 231, 255): cel.Locked = False
   Range("A2").Borders.LineStyle = True
'   Range("A2,A3,A48,A103").Borders.LineStyle = True
   Cells(iUP3, 1).Font.ColorIndex = 0 'black
   
   [b103] = "" 'delete "open and close"
   
   'Put words on the table top
'   Range("B1:G4").Select
   With Range("B1:G4")
      .VerticalAlignment = xlTop
      .MergeCells = True
      .Font.ColorIndex = 5 'Color = vbRed
      .Font.Bold = False
      '.Font.FontStyle = "Bold type"
      .Locked = False
      .Interior.ColorIndex = 19 'cream-based color
      .Borders.ColorIndex = xlAutomatic
      .WrapText = True
   End With
   
   msg_memo = "[Memo space] This table is an optimal plan which is calculated using the data of sheet""fCondition""  and sheet""iData"". "
'   If Sheets("fCondition").[d19] = "Yes" Then
'      If InStr(Sheets("fCondition").[i5], "Hirable days") > 0 Then
'         msg_alert = "the inputted value is set as the upper limit in calculating."
'      Else
'         msg_alert = "the inputted value is set as the volume hired in calculating."
'      End If
'   Else
'         msg_alert = "it is calculated without part time.|fffd|@|fffd|@|fffd|@"
'   End If
   
   msg_memo = msg_memo & _
   " You can get the new plan by modifying the numerical values (crop acreage, income, cost etc.) in the cream-colored cells."
   [b1] = msg_memo
   With Range("B1:G4").Characters(Start:=1, Length:=12).Font
      .name = "|fffd|l|fffd|r |fffd|o|fffd|S|fffd|V|fffd|b|fffd|N"
      .FontStyle = "|fffd||fffd||fffd||fffd|"
      .ColorIndex = 5 'blue
   End With


   'change format by Locale where decimal marker is comma",".
   If "_" & Val("2.3") <> "_2.3" Then 'decimal marker is comma
      [c7].NumberFormatLocal = "#.##0,0 ""ha"""
      Range(Cells(8, 3), Cells(14, jp + 1)).NumberFormatLocal = "#.##0,0 "
      Range(Cells(8, 3), Cells(13, 3)).NumberFormatLocal = "#.##0,0 ""ha"""
      Range(Cells(15, 4), Cells(16, jp)).NumberFormatLocal = "#.##0 "
      Range(Cells(17, 4), Cells(29, jp)).NumberFormatLocal = "#.##0,000 "
      Range(Cells(30, 3), Cells(30, jp + 1)).NumberFormatLocal = "#.##0 "
      Range(Cells(30, 3), Cells(35, 3)).NumberFormatLocal = "#.##0 ""$"""
      Cells(34, jp + 1).NumberFormatLocal = "#.##0,0 ""day"""
      Range(Cells(7, jp + 2), Cells(35, jp + 2)).NumberFormatLocal = "#.##0 ""$"""
   End If
   'change Locale end.
   
   'controll chart height
    Rows("38:41").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
   
   [a1].Select
   
'   Cells(table_end, 2).Font.ColorIndex = 2 'White (obscure) 'comment out on 2017.5.16
'   Cells(table_end, 2) = "open" 'comment out on 2017.5.16
   '|fffd||fffd|Unmovable, the command should be executed at the end.
   'Reason|fffd|FRefer to the code of the farming plan sheet (Worksheet_Change)
   
   ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
   Sheets("(Table)").Visible = False
   Sheets("(Model)").Visible = False
   Sheets("Result").Visible = False

End Sub

Sub merge_cells()
   With Selection
       .MergeCells = True
   End With
End Sub

Sub in_center()
   With Selection
       .HorizontalAlignment = xlCenter
       .VerticalAlignment = xlCenter
       .WrapText = True
   End With
End Sub

Sub budget_LPtd()
   budget_run "compute_LPtd", 36 'Pass the type of the LP model and the number of the land constraint formula
End Sub

Sub budget_LPm()
   budget_run "compute_LPm", 12
End Sub

Sub budget_LPtd_m()
   budget_run "compute_LPtd_m", 12
End Sub

Sub budget_LPm_td()
   budget_run "compute_LPm_td", 36
End Sub

Sub budget_LPsolution_for_TEST()
   Application.ScreenUpdating = False
   make_budget_sheet 36
End Sub

Sub budget_run(lp_type, land_cnst As Integer) '2009.10.26, add "as integer" on 20016.11.11
   Application.ScreenUpdating = False
   Set mi_sh = ActiveSheet
   On Error Resume Next
   If Not is_selected_item Then 'Whether the management index has been chosen
      MsgBox "Crop has not been chosen"
      Exit Sub
   End If
   If farmCondition_sheet = False Then Exit Sub 'Whether there is a farming condition sheet
   Run lp_type 'In Run method, the argument is the charactor string or the variable of the character string type|fffd|@cf.Call sentence
   If Sheets("Result").[a3] = "" Then 'If there is no solution or it is an infinite solution
      Sheets("fPlan").Unprotect
      Sheets("fPlan").Cells.ClearContents 'Clear the sheet of farming plan table,
      Sheets("fPlan").Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      mi_sh.Select 'return to the management index sheet,
      
      MsgBox "Error"
      
      Exit Sub 'Interrupt the process
   End If
   make_budget_sheet land_cnst
End Sub

Sub make_graph_landuse(shown_item_row, no_item)
   Dim tmp As String
   tmp = ActiveWorkbook.ActiveSheet.name
   Set r = Range("b34:f44")
   Set co = Sheets(tmp).ChartObjects.Add(r.Left, r.Top, r.Width, r.Height)
   co.Chart.ChartType = xlBarStacked100
   head = shown_item_row: tail = head + no_item
   ch = num2char(tail)
   co.Chart.SetSourceData _
      Source:=Sheets(tmp).Range("D3" & ":" & ch & "4" _
      & ",D27" & ":" & ch & "27"), PlotBy:=xlColumns 'Rows
   co.Chart.ApplyDataLabels Type:=xlDataLabelsShowValue, LegendKey:=False
   co.Chart.HasDataTable = False
   co.Chart.Axes(xlCategory).Delete
   With co.Chart.ChartArea.Font
       .name = "|fffd|l|fffd|r |fffd|o Gothic"
       .FontStyle = "Standard"
       .Size = 8 '6
   End With
   With co.Chart
       .HasTitle = True
       .ChartTitle.Characters.Text = "crop area and proportional profit"
   End With
   With co.Chart.ChartArea.Border
       .Weight = xlHairline
       .LineStyle = xlAutomatic
   End With
   co.Chart.ChartTitle.AutoScaleFont = True
   With co.Chart.ChartTitle.Font
       .Size = 12 '10
   End With
   With co.Chart.Legend
      .Position = xlBottom
      .Font.Size = 10 '8
   End With
   co.Chart.PlotArea.ClearFormats 'The background is white
   Range("a1").Select
End Sub

Sub make_graph_labor(num_item)
   Dim tmp As String
   tmp = ActiveWorkbook.ActiveSheet.name
   Rows("46:58").Hidden = True
   Rows("60:98").RowHeight = Rows("60:98").RowHeight * 0.55
   Set r = Range("b60:i98")
   Set co = Sheets(tmp).ChartObjects.Add(r.Left, r.Top, r.Width, r.Height)
   

   co.Chart.ChartType = xlColumnStacked
   head1 = shown_family_labor_row: tail1 = head1 + no_constraint_labor
   ch = num2char(num_item + 3)
   
   'Copy the legend data (the list of process names, etc.) in the data range
   [c60] = "permanent labor constraint"
   'Copy the process name
   Range("d3:" & ch & "3").Copy
   Range("d60").PasteSpecial Paste:=xlValues
   Application.CutCopyMode = False
   Rows(60).Cells.Font.ColorIndex = 2 'Making it invisible with white characters
   
   'ActiveSheet.ChartObjects(1).ChartGroup(1).GapWidth = 0
   
   co.Chart.SetSourceData PlotBy:=xlColumns, _
   Source:=Sheets(tmp).Range("b60:b96," & "d60:" & ch & "96")
   'Add the series|fffd|upermanent labor constraint|fffd|v
   co.Chart.SeriesCollection.Add Range("c61:c96") 'Note the c61
   co.Chart.ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
   co.Chart.HasDataTable = False
   With co.Chart.ChartArea.Font
       .name = "|fffd|l|fffd|r |fffd|o Gothic"
       .FontStyle = "Standard"
       .Size = 8 '6
   End With
   
   'The series|fffd|upermanent labor constraint|fffd|vis a line graph
   co.Chart.SeriesCollection(num_item + 1).ChartType = xlLineMarkers
   co.Chart.SeriesCollection(num_item + 1).name = "permanent labor constraint" 'The legend data of additional series
   
   co.Chart.HasTitle = True
   co.Chart.ChartTitle.Text = "working hours per ten-day period"
   
   no_constraint_labor = 0: i = 102
   Do While 1
      tmp = Sheets("fPlan").Cells(i, 2)
      If InStr(tmp, "Labor") = 0 Or tmp = "" Then Exit Do
      no_constraint_labor = no_constraint_labor + 1 'The number of labor constraint
      i = i + 1
   Loop
                                                                                                            
   co.Chart.Axes(xlCategory).TickLabels.Font.Size = 6
   
   If no_constraint_labor = 12 Then
      co.Chart.ChartTitle.Text = "monthly working hours"
   End If
   '------------------------------------------ 2006.3.29
    co.Chart.Axes(xlCategory).CategoryNames _
    = Sheets(tmp).Range("f" & (head1 + 1) & ":f" & tail1)
   '------------------------------------------
   With co.Chart
      .HasTitle = True
      If no_constraint_labor <= 12 Then
         .ChartTitle.Characters.Text = "monthly working hours"
         .Axes(xlCategory).TickLabelSpacing = 1 '----- 2006.3.29
      Else
         .ChartTitle.Characters.Text = "working hours per ten-day period"
         .Axes(xlCategory).TickLabelSpacing = 3 '----- 2006.3.29
      End If
   End With

   With co.Chart.ChartArea.Border
      .Weight = xlHairline
      .LineStyle = xlAutomatic
   End With
   co.Chart.ChartTitle.AutoScaleFont = True
   With co.Chart.ChartTitle.Font
      .Size = 12 '10
   End With
   With co.Chart.Legend
      .Position = xlBottom
      .Font.Size = 10 '8
   End With
   
   co.Chart.SeriesCollection(1).MarkerStyle = xlCircle
   co.Chart.SeriesCollection(1).MarkerSize = 3
   co.Chart.PlotArea.ClearFormats 'The background is white
   co.Chart.ChartGroups(1).GapWidth = 50 'The space of bar is half of the bar width (50%)
   Range("a1").Select
   MsgBox 999
End Sub

Function num2char(ch)
   num2char = Chr(Asc("A") - 1 + ch)
End Function

Sub button_menu_sheet_copy()
   ActiveSheet.Copy before:=ActiveSheet
   ActiveSheet.Unprotect
   ActiveSheet.[a1] = "This is a copy"
End Sub

'Sub button_menu_sheet_protect() 'Toggle of the protection and release-> only release
'   If ActiveSheet.ProtectContents Then
'      ActiveSheet.Unprotect
'      ActiveSheet.Buttons("fPlanA3").Caption = "Protect"
'      ActiveSheet.Buttons("fPlanA48").Caption = "Protect"
'      ActiveSheet.Buttons("fPlanA103").Caption = "Protect"
'   Else
'      ActiveSheet.Buttons("fPlanA3").Caption = "Unprotect"
'      ActiveSheet.Buttons("fPlanA48").Caption = "Unprotect"
'      ActiveSheet.Buttons("fPlanA103").Caption = "Unprotect"
'      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
'   End If
'End Sub

Sub BFM_sheet_move()
   If Workbooks.Count = 0 Then Exit Sub
   UserForm2_BFM_SelectSheet.Show
End Sub

Sub close_myself()
   ThisWorkbook.Close
   
End Sub
Attribute VB_Name = "Module2"
Sub make_sheet_MI_new()
   ThisWorkbook.Sheets("iData").Copy _
   before:=ActiveSheet
   Range("A1").Select
End Sub

Sub make_cb()
'Next example add check-box to worksheet1
'and link the value of check-box with cell A1.
Set r = ActiveCell
With Worksheets(1)
   Set cb = .Shapes.AddFormControl(xlCheckBox, r.Left, r.Top, r.Width, r.Height)
   cb.ControlFormat.LinkedCell = "b1"
   cb.Select
   Selection.Characters.Text = ""
   
End With
End Sub

Sub get_max_row()
   Cells(Rows.Count, 2).Select
   last_row = Selection.End(xlUp).Row
   Cells(last_row, 2).Select
End Sub

Sub get_max_col()
   Cells(2, Columns.Count).Select
   max_col = Selection.End(xlToLeft).Column
   Cells(2, max_col).Select
End Sub

Sub save_farming_condition(Optional fname = "")
   On Error GoTo err1
   If fname = "" Then
      If sheet_exist("fCondition") Then
         Sheets("fCondition").Select
         Application.ScreenUpdating = True
         Application.ScreenUpdating = False
      Else
         MsgBox "There is not the sheet of farming conditions."
         Exit Sub
      End If
      Application.ScreenUpdating = False
      Application.DisplayAlerts = False
      output_file = Application.GetSaveAsFilename _
      (filefilter:="bfc|327||fffd||fffd| (*.bfc), *.bfc") 'delete the appointment the file name desplayed as the designated value
      '([c1].Value, fileFilter:="bfc file (*.bfc), *.bfc")
      If output_file = False Then Exit Sub
      fname = Trim(output_file)
      '2013.2.19 start
      If Dir(fname) <> "" Then
         ans = MsgBox("There exists already the file of the same name. Do you overwrite?", vbYesNo)
         If ans = vbNo Then Exit Sub
      End If
      '-- end
   End If
   
   Open fname For Output As 1
   ActiveSheet.Unprotect
   
'   '---- comment out not to support older version on 2017.4.25 start
'   If InStr([b5], "Family") > 0 Then
      Set data_area = Range("a1:g28") 'the use range (left half) from Ver 0.59.57  'g28->g32 on 2016.11.10
'   Else
'      Set data_area = Range("a1:g26") 'the use range (left half) from Ver 0.59.56
'   End If
'   '---- comment out end
   
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 7 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   Set data_area = Range("i1:p28") ''the use range (right half) added at Ver 0.58  'p28->p32 on 2016.11.10
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 8 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   
   Set data_area = Range("a29:p32") ''the use range (right half) added at Ver 0.58  'p28->p32 on 2016.11.10
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 16 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   
   Close 1
   [c1].Value = fname
   [c1].Font.ColorIndex = 2 'white
   [c1].ShrinkToFit = True
   [a1].Font.Bold = False
   [a1].Font.ColorIndex = 0 'black
   
   Sheets("fCondition").Protect AllowFormattingCells:=True, _
   AllowFormattingColumns:=True, AllowFormattingRows:=True
   
   Exit Sub
   
err1:

End Sub

Sub resave_farming_condition() 'overwrite save by ooisi 2013.2.19
   On Error GoTo err1
   If sheet_exist("fCondition") Then
      Sheets("fCondition").Select
      Application.ScreenUpdating = True
      Application.ScreenUpdating = False 'stop renewing display
   Else
      MsgBox "There is not the sheet of farming conditions."
      Exit Sub
   End If
   Application.ScreenUpdating = False           'stop renewing display
   Application.DisplayAlerts = False            'not display warning
'2013.2.19 start
   output_file = [c1] 'quote the name of saved file
   If output_file = "" Then 'in case that there is no name of saved file
      save_farming_condition
      Exit Sub
   End If
'-- end
   Open output_file For Output As 1
   ActiveSheet.Unprotect
   
'   '---- comment out not to support older version on 2017.4.25 start
'   If InStr([b5], "Family") > 0 Then 'family -> Family 2016.7.14 (default in VBA : ("f" = "F") => False)
      Set data_area = Range("a1:g28") 'the use range (left half) from Ver 0.59.57  'g28->g32 on 2016.11.10
'   Else
'      Set data_area = Range("a1:g26") 'the use range (left half) to Ver 0.59.56
'   End If
'   '---- comment out end
   
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 7 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   Set data_area = Range("i1:p28") 'the use range (right half) added at Ver 0.58  'p28->p32 on 2016.11.10
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 8 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   
   Set data_area = Range("a29:p32") ''the use range (right half) added at Ver 0.58  'p28->p32 on 2016.11.10
   cnt = 0
   For Each cl In data_area '.Cells
      cnt = cnt + 1
      Write #1, cl.Formula;
      If cnt = 16 Then
         Write #1,
         cnt = 0
      End If
   Next cl
   
   Close 1
   [c1].Value = output_file
   [c1].Font.ColorIndex = 2 'white
   [c1].ShrinkToFit = True
'   MsgBox "Saved in " & output_file
   [a1].Font.Bold = False
   [a1].Font.ColorIndex = 0 'black
   
   Sheets("fCondition").Protect AllowFormattingCells:=True, _
   AllowFormattingColumns:=True, AllowFormattingRows:=True
   
   Exit Sub
err1:
End Sub

Sub read_farming_condition(Optional data_check_done = False)
   On Error Resume Next
   'Set data_area = Range("d4:f6,d9:f9,d12:f17,d19:d20,d22:d23,d25:d28,j7:p24")
   '|fffd||fffd|When [FC]sheet is copied and auto_zoom is executed, data_area is modified in auto_zoom. So this statement was moved backward.
   If Not data_check_done Then
      If ActiveWindow Is Nothing Then Workbooks.Add 'by ooisi 2013.5.8
      If sheet_exist("fCondition") Then
         Sheets("fCondition").Select
         'If [b5] = "" Then 'in case of old format till Ver 0.59.56
         If [b5] = "" Or InStr([i3], "setting the detail of labor constraint") > 0 Or [a2] <> "Ver3.26" Then 'enlargement of the range of old format 2014.1.7
            Application.DisplayAlerts = False  'no display of warning
            ans = MsgBox("As the format of sheet of farming conditions is old" _
            & vbCr & vbCr & "It will be converted to new form of the sheet of farming conditions" _
            & vbCr & vbCr & "The displayed data will be deleted." _
            & vbCr & vbCr & "Is it OK to inplement?", vbYesNo)
            If ans = vbNo Then Exit Sub
            Application.ScreenUpdating = False
            Sheets("fCondition").Delete
            ThisWorkbook.Sheets("fCondition").Copy after:=ActiveSheet
            auto_zoom '2013.2.19
         End If
         Application.ScreenUpdating = True
         Application.ScreenUpdating = False 'Stop of the renewal of display
'         ans = MsgBox("The displayed data is overwritten with the data in selected file." _
'         & vbCr & vbCr & "Is it OK?", vbYesNo)
      Else
         ThisWorkbook.Sheets("fCondition").Copy after:=ActiveSheet
         auto_zoom '2013.2.19
   '      Application.ScreenUpdating = True
   '      Application.ScreenUpdating = False 'Stop of the renewal of display
   '      ans = MsgBox("The initial value of farming conditions was set." _
   '      & vbCr & vbCr & "The displayed data is overwritten with the data in selected file." _
   '      & vbCr & vbCr & "Is it OK?", vbYesNo)
      End If
      If ans = vbNo Then Exit Sub
   End If

   ActiveSheet.Unprotect 'commentout 2016.2.18, rrevival 2016.3.1
   Application.ScreenUpdating = False 'Stop of the renewal of display
   input_file = Application.GetOpenFilename _
   ("bfc|327||fffd||fffd| (*.bfc), *.bfc")
   Application.DisplayAlerts = False  'No display of warning
   If input_file = False Then Exit Sub
   
   file_version_before320 = False
   file_version_326 = False
   Set data_area = Range("d4:f6,d9:f9,d12:f17,d19:d20,d22:d23,d25:d28,j7:p24")
   
   Open input_file For Input As 1
   line_num = 0
   While Not EOF(1)
      line_num = line_num + 1
      Line Input #1, tmp
      If line_num = 1 And _
      InStr(tmp, "In colum of value, the unit will not be inputted, but only value will be inputted.") > 0 Then
         file_version_before320 = True
      End If
      If line_num = 2 And InStr(tmp, "Ver3.26") > 0 Then
         file_version_326 = True
      End If
   Wend
   Close 1
   
   Open input_file For Input As 1
   iRow = 1: iCol = 0
   'While (Not EOF(1)) And (irow <= 26) 'to Ver 0.57.56
   While (Not EOF(1)) And (iRow <= 28) 'Ver 0.57.57 and after  '28->32 on 2016.11.10
      iCol = iCol + 1
      Input #1, tmp
      '--- start 2012.8.8
'      If InStr("In colum of value, the unit will not be inputted, but only value will be inputted." & _
'               "Use of employed labor Use of rented land Crop rotation assignment Rate of crop rotation assignment", tmp) > 0 Then
'         'do nothing Because the version of saving file is below 3.20
'      Else
         If Not file_version_326 Then 'Version 3.25 and before
            If iRow = 24 Then
               'do nothing
            ElseIf iRow = 25 Then
               If iCol = 4 Then Cells(iRow, iCol) = "=SUM(D26:D28)"
               If iCol = 5 Then Cells(iRow, iCol) = "=SUM(E26:E28)"
               If iCol = 6 Then Cells(iRow, iCol) = "=SUM(F26:F28)"
            ElseIf iRow = 26 Then
               If iCol = 4 Then Cells(iRow, iCol) = "=E26+F26": Cells(iRow, iCol + 1) = tmp
            ElseIf iRow = 27 Then
               If iCol = 4 Then Cells(iRow, iCol) = "=E27+F27": Cells(iRow, iCol + 1) = tmp
            ElseIf iRow = 28 Then
               If iCol = 4 Then Cells(iRow, iCol) = "=E28+F28": Cells(iRow, iCol + 1) = tmp
            Else
               Cells(iRow, iCol) = tmp
            End If
         Else
                  If (tmp = "") Then
                     If Intersect(Cells(iRow, iCol), data_area.Cells) Is Nothing Then
                        'nothing
                     Else
                        tmp = 0 '2016.7.12  Null("") in numerical cell is estimated to be zero.
                     End If
                  End If
            Cells(iRow, iCol) = tmp 'Version 3.26 and later
         End If
'      End If
      '--- end
      If iCol = 8 Then
         iCol = 0
         iRow = iRow + 1
      End If
      If iRow = 5 And line_num = 54 Then iRow = iRow + 2
      'Coping with the 2 lines put after 4th line at Ver 0.57.57
      'There were 54 lines of data on farming conditions at Ver 0.57.56 and before. 2014.1.7
   Wend
   iRow = 1: iCol = 8
   While (Not EOF(1)) And (iRow <= 28) 'Use range added at Ver 0.58
      iCol = iCol + 1
      Input #1, tmp
      If file_version_before320 Then
         If iRow <= 9 Then
            'do nothing in case of till Ver 3.11
         Else
                  If (tmp = "") Then
                     If Intersect(Cells(iRow - 4, iCol), data_area.Cells) Is Nothing Then
                        'nothing
                     Else
                        tmp = 0 '2016.7.12  Null("") in numerical cell is estimated to be zero.
                     End If
                  End If
            Cells(iRow - 4, iCol) = tmp
         End If
      Else
                  If (tmp = "") Then
                     If Intersect(Cells(iRow, iCol), data_area.Cells) Is Nothing Then
                        'nothing
                     Else
                        tmp = 0 '2016.7.12  Null("") in numerical cell is estimated to be zero.
                     End If
                  End If
         Cells(iRow, iCol) = tmp
      End If
      If iCol = 17 Then
         iCol = 8
         iRow = iRow + 1
      End If
   Wend
   
   iRow = 29: iCol = 0
   While (Not EOF(1)) 'Use range added at (English version) Ver 1.00 on 2016.11.11
      iCol = iCol + 1
      Input #1, tmp
'      If file_version_before320 Then
'         If iRow <= 9 Then
'            'do nothing in case of till Ver 3.11
'         Else
'                  If (tmp = "") Then
'                     If Intersect(Cells(iRow - 4, iCol), data_area.Cells) Is Nothing Then
'                        'nothing
'                     Else
'                        tmp = 0 '2016.7.12  Null("") in numerical cell is estimated to be zero.
'                     End If
'                  End If
'            Cells(iRow - 4, iCol) = tmp
'         End If
'      Else
      If (tmp = "") Then
         If Intersect(Cells(iRow, iCol), data_area.Cells) Is Nothing Then
            'nothing
         Else
            tmp = 0 '2016.7.12  Null("") in numerical cell is estimated to be zero.
         End If
      End If
      Cells(iRow, iCol) = tmp
'      End If
      If iCol = 17 Then
         iCol = 0 '1 debuged on 2017.7.5
         iRow = iRow + 1
      End If
   Wend
   
   Range("i25:p32").Font.ColorIndex = 2
   
   If line_num = 54 Then 'Supplementation for Ver 0.57.56 and before 'There were 54 lines of data on farming conditions at Ver 0.57.56 and before. 2014.1.7
      [d5] = [d4]
      [d6] = 0
      [f3] = "Annual wage"
      [f4] = "-"
      [d4] = "=d5+d6"
      [d25] = "=sum(d26:d28)"
   End If
   
'   '---- comment out not to support older version on 2017.4.25 start
'   If [b4] <> "Full-time labor" Then
'      [b4] = "Full-time worker"
'      [d3] = "Number of person"
'      [e3] = "Working time"
'      [b7] = "Labor employment"
'      [d6] = "Wage (day)"
'      [e6] = "Working time"
'      [f6] = "Limit of labor employment"
'      [g6] = "Limit of labor employment"
'      [d9] = "Own cultivated land"
'      [e9] = "Limit of renting land"
'      [f9] = "Land rent(10a)"
'      [e17] = ""
'      [e18] = ""
'      [e20] = ""
'   End If
'   '---- comment out end

   'If [d1] = "" Then [d1] = "Put not unit but figure in colum of figure"'outed by ooisi 2012.8.8
   Close 1
   [c1].Value = input_file
   [c1].Font.ColorIndex = 2 'white
   [c1].ShrinkToFit = True
   Range("B1").Select
   
   'Transplant changes made after Z-BFM Ver3.20 2015.8.22
   If file_version_before320 = True Then
      [i5] = "|fffd|uLabor employment|fffd|vcolumn|fffd|@Limit of the number of days for labor employment per season"
   End If
   If InStr([i5], "Man-days of hired part-timer") > 0 Then
      [i5].Characters(Start:=15).Font.ColorIndex = 3 'red
   Else 'if "Hirable days of part-timer"
      [i5].Characters(Start:=15).Font.ColorIndex = 3 '5 'blue -> red
'      [i5].Characters(Start:=15, Length:=17).Font.ColorIndex = 3 '5 'blue -> red
   End If
   'Delete unnecessary transplanted parts 2015.8.22
    Range("D26:D28").Copy
    Range("D26").PasteSpecial Paste:=xlValues
    Range("E26:F28").ClearContents
    [b1].Select
   
   ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Sub change_chart_type()
    ActiveChart.ChartType = xlColumnStacked
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).ChartType = xlLine
    ActiveWindow.Visible = False
    [a1].Select
End Sub

Sub sheet_move()
   UserForm2_SelectSheet.Show
End Sub

Public Sub column_autofit()
      ActiveSheet.Unprotect
      Columns(3).AutoFit
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Attribute VB_Name = "Module6_V320"
'This module by ooisi 2012.8

'Transcribe the name, the title and the address
Sub copy_user_name(dst_sheet As String, dst_cell As String) 'by ooisi 2012.8.
   On Error Resume Next
   Dim copiedContents As String
   copiedContents = " [" & ActiveWorkbook.Sheets("Management overview").[e2] & Space(4) & ActiveWorkbook.Sheets("Management overview").[e3] & "]"
   If copiedContents = " [" & Space(4) & "]" Then copiedContents = ""
   Sheets(dst_sheet).Range(dst_cell) = copiedContents

End Sub

'Change the arrangement of the farming condition sheet. by ooisi 2012.8.8
Sub allocate_ws_FC()
    If Left([i3], 4) = "labor constraint" Then
       Range("I32:P35").Cut Destination:=Range("I2")
       Range("I6:P9").Delete Shift:=xlUp
    End If
End Sub

Sub show_userform0()
   UserForm0_attention.Show
   
End Sub

Sub henkan_320()
   
   Application.StatusBar = "The worksheet form is now converted into the new version."
   Application.ScreenUpdating = False
   act_sh = ActiveSheet.name
   act_cell = ActiveCell.Address
   

   modify_MCsheet 'MCsheet

   modify_FCsheet 'FCsheet

   modify_BTsheet 'BTsheet The trial plan execution table
   
   'modify_OPsheet

   modify_EIsheet 'EIsheet
   EIsheet_is = False
   If Active_Sheet_Exist("iEdit") Then
      Sheets("iEdit").Select
      item_num_edited = [c3]
      z_edit2_close
      EIsheet_is = True
   End If
   
   modify_325_MIsheet 'Run prior to the MIsheet, modify_325_EIsheet
   If EIsheet_is Then
      Cells(item_num_edited + 2, 3).Select
      z_edit_all_item
   End If
   
   modify_325_EIsheet 'EIsheet
   
   Sheets(act_sh).Select
   Range(act_cell).Select
   Application.ScreenUpdating = True
   MsgBox "The conversion of all of the sheet format was over" '& vbCr & vbCr & _
   '"If it has been already converted, there is no display [converted]." & vbCr
   'MsgBox "It will close the [conversion] menu."
   'MsgBox "Additional information|fffd|FYou can transcribe the [Name, Organization name] and [of the address] of the management overview sheet to each sheet in the menu [Management overview]-[Transcription of the name, etc] "
   Application.StatusBar = ""
End Sub

Sub modify_325_MIsheet() 'by ooisi 2013.10.7
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("iData") Then
      Sheets("iData").Select
      If InStr(Cells(2, 78), "The crop of switching crop") = 0 Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      Cells(2, 78) = "Rice for staple food"
      For i = 3 To Rows.Count
         If Cells(i, 2) = "" Then Exit For
         If Cells(i, 77) = "Rice field" Then
            If Cells(i, 78) = "correspond" Then
               Cells(i, 78) = "not correspond"
            Else
               Cells(i, 78) = "correspond"
            End If
         End If
      Next i
      'ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the management index sheet has been converted."
   End If
End Sub

Sub modify_325_EIsheet() 'by ooisi 2013.10.7
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("iEdit") Then
      Sheets("iEdit").Select
      If InStr([k12], "Switching crop") = 0 Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      [k12] = "Rice for staple food"
      If [L11] = "Rice field" Then
         If [L12] = "not correspond" Then
            [L12] = "correspond"
         Else
            [L12] = "not correspond"
         End If
      End If
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the index edit sheet has been converted."
   End If
End Sub

Sub modify_MCsheet()
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("Management overview") Then
      Sheets("Management overview").Select
      If [d2] = "Name, Organization name" Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      ThisWorkbook.Sheets("Management overview").Range("d2:f3").Copy Destination:=[d2]
       Rows("4:4").RowHeight = 19.8
       Rows("2:3").RowHeight = 16.2
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the management overview sheet has been converted." 'Move here by ooisi 2013.10.7
   End If
End Sub

Sub modify_FCsheet()
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("fCondition") Then
      Sheets("fCondition").Select
      If [i3] = "working days, employment days" Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      [b4].ClearComments
      Range("B19") = "use of temporary employment"
      Range("B20") = "use of the leased land"
      Range("B22") = "production adjustment of rice"
      'Range("B23") = "the rate of switching crop"
      ThisWorkbook.Sheets("fCondition").[b23].Copy Destination:=[b23]
      Range("D19:D23").ClearComments
      Range("F8:F9").Copy Destination:=Range("G8")
      
      Range("I5:P8").Delete Shift:=xlUp
      Range("I3:N3") = "working days, employment days"
      With Range("I3:N3").Font
          .FontStyle = "Standard"
          .ColorIndex = xlAutomatic
      End With
      [i3].ClearComments
      Range("I4") = "|fffd|uPermanent workers|fffd|vcolumn|fffd|@ Possible labor days of the permanent worker per ten-day period"
      Range("I5") = "|fffd|uTemporary employment|fffd|vcolumn |fffd|@Upper limit of the temporary employment per ten-day period"
      [i5].Characters(Start:=17, Length:=6).Font.ColorIndex = 3
      Range("D1") = ""
      With Range("D1").Font
          .Size = 11
          .FontStyle = "Standard"
          .ColorIndex = xlAutomatic
      End With
      Columns("G:G").EntireColumn.Hidden = True
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the farming condition sheet has been converted." 'Move here by ooisi 2013.10.7
   End If
End Sub

Sub modify_EIsheet()
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("iEdit") Then
      Sheets("iEdit").Select
      If InStr([k11], "Farm category") > 0 Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      item_num_edited = [c3]
      z_edit2_close
      Cells(item_num_edited + 2, 3).Select
      z_edit_all_item
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the index edit sheet has been converted." 'Move here by ooisi 2013.10.7
   End If
End Sub

Sub modify_BTsheet()
   Application.ScreenUpdating = False
   If Active_Sheet_Exist("The trial plan execution table") Then
      Sheets("The trial plan execution table").Select
      If [f1].Interior.Pattern = xlNone Then
'         Application.ScreenUpdating = True
         Exit Sub
      End If
      ActiveSheet.Unprotect
      ThisWorkbook.Sheets("The trial plan execution table").Range("b1:f2").Copy Destination:=[b1]
      ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      MsgBox "Format of the trial plan execution table has been converted." 'Move here by ooisi 2013.10.7
   End If
End Sub

Sub modify_OPsheet()
   Application.ScreenUpdating = False
   For Each sh In ActiveWorkbook.Sheets
      If InStr(sh.name, "Optimal plan") > 0 Then
         Sheets(sh.name).Select
         If Rows("1:1").RowHeight = 13.2 Then
'            Application.ScreenUpdating = True
            MsgBox sh.name & "Because the format of the sheet is new version, it will not convert"
         End If
         ActiveSheet.Unprotect
         Rows("1:1").RowHeight = 13.2
         ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      End If
   Next sh
End Sub

Sub copy_user_name_to_all_sheet()
   Application.ScreenUpdating = False
   On Error Resume Next
   dest_sh1 = "Management index   Index edit" 'Add the name of sheet that is in the same description cell.
   dest_cl1 = "c1"
   dest_sh2 = "The list of optimal plans   The list of trial plans"
   dest_cl2 = "b1"
   dest_sh3 = "The trial plan execution table   Farming condition "
   dest_cl3 = "d1"
   
   For Each sh In ActiveWorkbook.Sheets
      If InStr(dest_sh1, sh.name) > 0 Then
         Sheets(sh.name).Unprotect
         Call copy_user_name(sh.name, "c1")
         If sh.name <> "iData" Then Sheets(sh.name).Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
         Application.ScreenUpdating = True  'Indicate that it is running by blinking the screen
         Application.ScreenUpdating = False
      ElseIf InStr(dest_sh2, sh.name) > 0 And sh.name <> "The trial plan" Then
         Sheets(sh.name).Unprotect
         Call copy_user_name(sh.name, "b1")
         'Sheets(sh.name).Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      ElseIf InStr(dest_sh3, sh.name) > 0 And sh.name <> "The trial plan" Then
         Sheets(sh.name).Unprotect
         Call copy_user_name(sh.name, "d1")
         Sheets(sh.name).Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      ElseIf Len(sh.name) = 6 And InStr(sh.name, "The optimal plan") > 0 Then
         Sheets(sh.name).Unprotect
         Call copy_user_name(sh.name, "d2")
         Sheets(sh.name).Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
      End If
   Next sh
End Sub

Sub copy_temp_work_to_FCsheet_bk() 'Transcription of the temporary employment hours to the farming condition sheet  by ooisi 2012.9.3
   If ActiveSheet.name <> "fCondition" Then
      MsgBox "Please run from the farming condition sheet."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   'Temporary employment labor hours (of optimal solution)
   Set ws_Cal = ActiveWorkbook.Worksheets("Result")
   Set ws_Cnd = ActiveWorkbook.Worksheets("fCondition")
   ws_Cnd.Unprotect '2012.9.25
   'Labor 1-1
   If Not ws_Cal.Cells.Find("Labor 1-1") Is Nothing Then 'The start cell of the labor constraint
       intRow_FL = ws_Cal.Cells.Find(What:="Labor 1-1").Row
       intClm_FL = ws_Cal.Cells.Find(What:="Labor 1-1").Column
   Else
      MsgBox "Please run the calculation menu of the optimal plan because the result has not been saved."
      Exit Sub
   End If
   intCnt = 0
   Dim RKR(36) As Double 'The ten-day period labor hours of the temporary employment
   If Not ws_Cal.Cells.Find("[Employment labor] 1-1") Is Nothing Then 'The start cell of the temporary employment labor process
       intRow_Dt = ws_Cal.Cells.Find(What:="[Employment labor] 1-1").Row
       intClm_Dt = ws_Cal.Cells.Find(What:="[Employment labor] 1-1").Column
       For i = intRow_Dt To intRow_Dt + 36
           'Delete because there is a case in which function IsNullToDouble() is in error  2012.9.25
           RKR(intCnt) = ws_Cal.Cells(intRow_Dt + intCnt, intClm_Dt + 2) _
                         - ws_Cal.Cells(intRow_FL + intCnt, intClm_FL + 2) / 8 '8 is temporary storage
           If RKR(intCnt) < 0 Then RKR(intCnt) = 0
           intCnt = intCnt + 1
       Next i
   Else
      MsgBox "In the newest optimal plan, the temporary employment is not used."
      ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True '2012.9.25
      Exit Sub
   End If
   For i = 0 To 17
      ws_Cnd.[FC_part].Cells(i + 1, 1) = RKR(i)
   Next i
   For i = 18 To 35
      ws_Cnd.[FC_part].Cells(i - 17, 5) = RKR(i)
   Next i
   ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True '2012.9.25
End Sub

Sub copy_temp_work_to_FCsheet() 'Transcription of the temporary employment hours to the farming condition  by ooisi 2012.12.6
   If InStr("Optimal plan 1 Optimal plan 2 Optimal plan 3 Optimal plan 4 Optimal plan 5", ActiveSheet.name) > 0 Then
      ans = MsgBox("It transcribes the number of days required for temporary employment in the displayed optimal plan to the farming condition sheet.", vbOKCancel)
      If ans <> vbOK Then Exit Sub
   Else
      MsgBox "Please run it after moving to the optimal plan sheet which you want to display the number of days required for temporary employment."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   Set act_sh = ActiveSheet
   Set ws_Cnd = ActiveWorkbook.Worksheets("fCondition")
   'The start cell of the labor hours for graph display by crop type and by ten-day period
   If Not act_sh.Cells.Find("The labor hours for graph display by crop type and by ten-day period") Is Nothing Then
       intRow = act_sh.Cells.Find(What:="The labor hours for graph display by crop type and by ten-day period").Row + 2 'Early January
       intClm = act_sh.Cells.Find(What:="The labor hours for graph display by crop type and by ten-day period").Column + 2 'Labor possible hours of whole of the management
   Else
      MsgBox "Please run again the calculation menu of the optimal plan because the result has not been saved."
      Exit Sub
   End If
   'ipro: The total number of the processes
   ipro = (Cells(intRow - 1, Columns.Count).End(xlToLeft).Column) - intClm
   intCnt = 0
   Dim RKR(36) As Double 'Labor hours by ten-day period
   'Necessary labor hours by ten-day period
   For i = 0 To 35
      RKR(i) = 0
      For j = 1 To ipro
         RKR(i) = RKR(i) + Cells(intRow + i, intClm + j)
      Next j
   Next i
   'Necessary labor hours by ten-day period of the temporary employment
   For i = 0 To 35
      RKR(i) = RKR(i) - Cells(intRow + i, intClm)
      If RKR(i) < 0 Then RKR(i) = 0
   Next i
   'Transcribe to the farming condition sheet
   ws_Cnd.Unprotect '2012.9.25
   ihour = ws_Cnd.[e9] 'One day labor hours of the temporary employment
   For i = 0 To 17
      ws_Cnd.[FC_part].Cells(i + 1, 1) = RKR(i) / ihour
   Next i
   For i = 18 To 35
      ws_Cnd.[FC_part].Cells(i - 17, 5) = RKR(i) / ihour
   Next i
   ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True '2012.9.25
   ws_Cnd.Select
End Sub

Sub back_temp_work_set() 'Reset the temporary employment hours by ooisi 2012.9.3
   If ActiveSheet.name <> "fCondition" Then
      MsgBox "Please run from the farming condition sheet."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   'The temporary employment labor hours (of optimal solution)
   Set ws_Cal = ActiveWorkbook.Worksheets("Result")
   Set ws_Cnd = ActiveWorkbook.Worksheets("fCondition")
   ws_Cnd.Unprotect '2012.9.25
   'Labor 1-1
   If Not ws_Cal.Cells.Find("Labor 1-1") Is Nothing Then 'The start cell of the labor constraint formula
       intRow_FL = ws_Cal.Cells.Find(What:="Labor 1-1").Row
       intClm_FL = ws_Cal.Cells.Find(What:="Labor 1-1").Column
   Else
      MsgBox "Please run the calculation menu of the optimal plan because the result has not been saved."
      Exit Sub
   End If
   intCnt = 0
   Dim RKR(36) As Double 'The labor hours by ten-day period of the temporary employment
   If Not ws_Cal.Cells.Find("Employment upper limit 1-1") Is Nothing Then 'The start cell of the temporary employment labor upper limit constraint formula
       intRow_Dt = ws_Cal.Cells.Find(What:="Employment upper limit 1-1").Row
       intClm_Dt = ws_Cal.Cells.Find(What:="Employment upper limit 1-1").Column
       For i = intRow_Dt To intRow_Dt + 36
           'Delete because there is a case in which function IsNullToDouble() is in error   2012.9.25
           RKR(intCnt) = ws_Cal.Cells(intRow_Dt + intCnt, intClm_Dt + 1)
           'If RKR(intCnt) < 0 Then RKR(intCnt) = 0
           intCnt = intCnt + 1
       Next i
   Else
      MsgBox "In the newest optimal plan, the temporary employment is not used."
      ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True '2012.9.25
      Exit Sub
   End If
   For i = 0 To 17
      ws_Cnd.[FC_part].Cells(i + 1, 1) = RKR(i)
   Next i
   For i = 18 To 35
      ws_Cnd.[FC_part].Cells(i - 17, 5) = RKR(i)
   Next i
   ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True '2012.9.25
End Sub

Function part_working_day_setting() As Boolean
   part_working_day_setting = False
   If Not Active_Sheet_Exist("fCondition") Then Exit Function
   If WorksheetFunction.Sum(Sheets("fCondition").[FC_part]) > 0.0001 Then
      part_working_day_setting = True
   End If
End Function

Sub show_model()
   Application.ScreenUpdating = False
   If ActiveWindow Is Nothing Then Exit Sub
   Dim sh_model As String
   sh_model = "(Model)"
   If Active_Sheet_Exist(sh_model) Then
      Sheets(sh_model).Visible = True
      Sheets(sh_model).Copy before:=Sheets(sh_model)
      [d4].Activate
      ActiveWindow.FreezePanes = True
      Cells(Rows.Count, 2).End(xlUp).Select
      cl = ActiveCell.Row
      For i = 5 To cl
         Cells(2, i - 1) = "x" & (i - 4)
         Cells(3, i - 1) = Cells(i, 2)
      Next i
      Cells(Rows.Count, 3).End(xlUp).Select
      cl = ActiveCell.Row
'      Cells(cl + 1, 3) = "Constraint name"
'      Cells(cl + 1, 4) = "Constraint formula"
      Cells(cl + 1, 5) = "|fffd||fffd| It will add the conditions of constraint to the bottom from this row."
      Cells(cl + 1, 5).Font.Color = vbRed
      Cells(cl + 1, 5).Font.Bold = True
      Cells(cl + 2, 5) = "It will describe the constraint name in the C column and describe the constraint formula in the D column."
      Cells(cl + 2, 5).Font.Color = vbRed
      Cells(cl + 2, 5).Font.Bold = True
      Cells(cl + 3, 5) = "If there is a empty cell in the D column, the description of the constraints will be regarded as being finished."
      Cells(cl + 3, 5).Font.Color = vbRed
      Cells(cl + 3, 5).Font.Bold = True
      Cells(cl + 5, 5) = "It shows a specific example of the description below."
      Cells(cl + 5, 5).Font.Bold = True
      Cells(cl + 6, 3) = "Cropping constraint"
      Cells(cl + 6, 4) = "x1 = x2"
      Cells(cl + 6, 5) = _
      "|fffd||fffd| It is a constraint formula to the |fffd|u" & [d3] & " cropping area and " & [e3] & " cropping area are equal|fffd|v. "
      Cells(cl + 6, 5).Font.Color = vbRed
      Cells(cl + 6, 5).Font.Bold = True
      Cells(cl + 7, 3) = "cropping regulation"
      Cells(cl + 7, 4) = "x1 = x2 + x3"
      Cells(cl + 7, 5) = _
      "|fffd||fffd| It is a constraint formula to the |fffd|u" & [d3] & "cropping area = " & [e3] & ",etc. total cropping area of 2 crops|fffd|v. "
      Cells(cl + 7, 5).Font.Color = vbRed
      Cells(cl + 7, 5).Font.Bold = True
      Columns(4).ColumnWidth = Columns(4).ColumnWidth * 1.2
      If ActiveCell.Row > 10 Then
         ActiveWindow.ScrollRow = ActiveCell.Row - 10
      Else
         ActiveWindow.ScrollRow = 1
      End If
      Sheets(sh_model).Visible = False
  Else
      MsgBox "There is not|fffd|umodel.$$$|fffd|vsheet." & vbCr & vbCr & _
             "Please run the calculation of optimal plan once."
  End If
End Sub

'Sub recalc()
'   If ActiveWindow Is Nothing Then Exit Sub
'   Application.ScreenUpdating = False
'   On Error Resume Next
'   If [a1] <> "|fffd|yNumerical formula model|fffd|z" Then
'      MsgBox "Please run from the numerical formula model sheet."
'      Exit Sub
'   End If
'   Dim sh_Utl As String
'   sh_Utl = "(Table)"
'   If Active_Sheet_Exist(sh_Utl) Then Sheets(sh_Utl).Visible = True
'   Application.Run "formula2tableau_for_BFM"
'   Application.Run "ip_calc" 'lp_select"
'   Application.Run "Z_BFM.xla!make_result_summary"
'   Application.Run "Z_BFM.xla!compute_LPsheet"
'   Sheets("Result").Visible = False
'   Sheets(sh_Utl).Visible = False
'End Sub

Sub change_meaning_of_hired_days()
   If ActiveSheet.name <> "fCondition" Then
      MsgBox "please run from the farming condition sheet."
      Exit Sub
   End If
   ActiveSheet.Unprotect
   If InStr([i5], "Man-days of hired part-timer") > 0 Then
      [i5] = "|fffd|@|fffd|uPart-time|fffd|v:|fffd|@Hirable days of part-timer"
      [i5].Characters(Start:=15).Font.ColorIndex = 3
'      [i5].Characters(Start:=15, Length:=23).Font.ColorIndex = 3
   Else
      [i5] = "|fffd|@|fffd|uPart-time|fffd|v:|fffd|@Man-days of hired part-timer"
      '[i5].Font.ColorIndex = xlAutomatic
      [i5].Characters(Start:=15).Font.ColorIndex = 3
   End If
   [i6].Select
   ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Sub show_landcoef_or_hide()
   Application.ScreenUpdating = False
   On Error Resume Next
   If ActiveSheet.name <> "iEdit" Then
      MsgBox "Please run from the index edit."
      Exit Sub
   End If
   With ActiveSheet
      Set act_cell = ActiveCell
      .Unprotect
      .[EI_landcoef].Cut [L18]
      If [EI_landcoef].Font.ColorIndex = xlAutomatic Then
         .[EI_landcoef].Offset(0, -1) = ""
         .[k20:L20].Copy
         .[EI_landcoef].Offset(0, -1).PasteSpecial Paste:=xlPasteFormats
         Application.CutCopyMode = False
         [EI_landcoef].Font.ColorIndex = 2 'White
         [EI_landcoef].Offset(0, -1).Font.ColorIndex = 2 'White
         [EI_landcoef].Validation.Delete 'Deletion of the input message of input rules
         act_cell.Select
      Else
         .[EI_landcoef].Offset(0, -1) = "Land coefficient"
         [EI_landcoef].Font.ColorIndex = xlAutomatic
         [EI_landcoef].Offset(0, -1).Font.ColorIndex = xlAutomatic
         .[H18:I18].Copy
         .[EI_landcoef].Offset(0, -1).PasteSpecial Paste:=xlPasteFormats
         Application.CutCopyMode = False
         With [EI_landcoef].Validation 'Setting of the input message of input rules
             .Delete
             .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
             :=xlBetween
           .InputMessage = _
             "If the data of incomes, costs, and working hours are set per 10a, the land coefficient is 1 (default)|fffd|B" & Chr(10) _
           & "If not set per 10a, the value is divided by 10a. For example, if the data is set per 5a, the value is 0.5." & Chr(10) _
           & "If other farms are used (e.g. by trustee), the value is 0." & Chr(10)
         End With
         [EI_landcoef].Select
      End If
      .Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
   End With
     
End Sub

Sub input_workingdays_at_a_time() 'by ooisi 2012.12.6
   If ActiveSheet.name <> "fCondition" Then
      MsgBox "Please run from the farming condition sheet."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   Set ws_Cnd = ActiveWorkbook.Worksheets("fCondition")
   ws_Cnd.Unprotect
   ans = InputBox("Input the same number of days as the employment number of days in all of the ten-day periods." & vbCr & vbCr & _
   "Please input the number of days.")
   If Len(ans) = 0 Then
      Exit Sub
   Else
      ans = Val(ans)
   End If
   ws_Cnd.[FC_part].Select
   Selection = ans
   ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Sub input_workingdays_at_a_time_2() 'by ooisi 2012.12.6
   If ActiveSheet.name <> "fCondition" Then
      MsgBox "Please run from the farming condition sheet."
      Exit Sub
   End If
   Application.ScreenUpdating = False
   Set ws_Cnd = ActiveWorkbook.Worksheets("fCondition")
   ws_Cnd.Unprotect
   ans = InputBox("Input the same number of days as the labor possible days in all of the ten-day periods." & vbCr & vbCr & _
   "Please input the number of days.")
   If Len(ans) = 0 Then
      Exit Sub
   Else
      ans = Val(ans)
   End If
   ws_Cnd.[FC_full].Select
   Selection = ans
   ws_Cnd.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
End Sub

Sub close_me()
   ThisWorkbook.Close
End Sub
Sub unprotect_allsheet()
   For Each sh In ActiveWorkbook.Worksheets
      sh.Unprotect
   Next sh
End Sub
Sub auto_zoom()
   'Range([a1], [m28]).Select
   ActiveSheet.UsedRange.Select 'Even if it may look like not using, delete the outside just to be sure.
   ActiveWindow.Zoom = True
   [a1].Select
End Sub
Sub resave_bfm_book() 'Overwrite the book
   If ActiveWindow Is Nothing Then Exit Sub
   If InStr(ActiveWorkbook.name, ".") = 0 Then
      save_bfm_book
      Exit Sub
   End If
   ActiveWorkbook.Save
End Sub
Sub save_bfm_book() 'Name the book and save it
   If ActiveWindow Is Nothing Then Exit Sub
'   If Application.Version >= 12 Then
'      ans = MsgBox("In this menu, it saves the book in the file format of up to Excel 2003." & vbCr & vbCr & _
'      "|fffd|@If you want to save the file in Excel2007 or later version," & vbCr & vbCr & _
'      "|fffd|@the upper left corner of the office round button in Excel 2007" & vbCr & vbCr & _
'      "|fffd|@click the ribbon tab [file] in Excel2010," & vbCr & vbCr & _
'      "|fffd|@select the menu [Save as]," & vbCr & vbCr & _
'      "|fffd|@and run by specifying the [xlsm] as the extension." & vbCr & vbCr & _
'      "If you want to save in a file format of Excel 2003, please click [Yes].", vbYesNo)
'      If ans = vbNo Then Exit Sub
'   End If
'   Do
'      output_file = Application.GetSaveAsFilename(filefilter:="Excel 2007 or later (*.xlsm),*.xlsm, to Excel 2003 (*.xls),*.xls")
'      If output_file = False Then Exit Sub
'      If Dir(output_file) <> "" Then
'         ans = MsgBox("There is already a file of the same name. Do you want to overwrite ?, vbYesNoCancel)
'      End If
'      If ans = vbCancel Then
'         Exit Sub
'      ElseIf ans = vbYes Then
'         Exit Do
'      End If
'   Loop
   If Application.Version >= 12 Then
      output_file = Application.GetSaveAsFilename(filefilter:="Excel 2007 or later (*.xlsm),*.xlsm, to Excel 2003 (*.xls),*.xls")
   Else
      output_file = Application.GetSaveAsFilename(filefilter:="to Excel 2003 (*.xls),*.xls")
   End If
'      output_file = Application.GetSaveAsFilename(filefilter:="Excel file (*.xls),*.xls")
   If output_file = False Then Exit Sub
   If Dir(output_file) <> "" Then
      ans = MsgBox("There is already a file of the same name. Do you want to overwrite ?", vbYesNo)
   End If
   If ans = vbNo Then
      Exit Sub
   End If
   On Error Resume Next
   If Application.Version >= 12 Then
      If Right(output_file, 5) = ".xlsm" Then
         ActiveWorkbook.SaveAs Filename:=output_file, FileFormat:=xlOpenXMLWorkbookMacroEnabled
      Else
         ActiveWorkbook.SaveAs Filename:=output_file, FileFormat:=xlExcel8
      End If
   Else
         ActiveWorkbook.SaveAs Filename:=output_file
   End If
End Sub
Function test_compati()
   test_compati = True
   On Error Resume Next
   test_compati = ActiveWorkbook.Excel8CompatibilityMode
   MsgBox test_compati
   
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = False
   CommandBars("side_menu_e").Visible = False
   CommandBars("side_menu_c").Visible = True
End Sub
Private Sub Worksheet_Deactivate()
   On Error Resume Next
   CommandBars("side_menu_c").Visible = False
End Sub


Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Compare Text '("AAA"="aaa") => True

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
   tmp = Target.Address
   rtmp = Target.Row
   ctmp = Target.Column
   
   If rtmp = 3 And ctmp >= 3 Then
      If Target <> "Yes" Then
         Target = "Yes"
      Else
         Target = "No"
      End If
      Target.Offset(0, 1).Select
   End If
   
   If InStr(tmp, "$a$8") > 0 Then
      Rows("8:10").Select
      Selection.EntireRow.Hidden = True
      Target.Offset(3, 0).Select
      [a11] = "Open"
   End If
   If InStr(tmp, "$A$11") > 0 Then
      Rows("8:10").Select
      Selection.EntireRow.Hidden = False
      Target.Offset(-3, 0).Select
      [a11] = ""
   End If
   
   If InStr(tmp, "$A$12") > 0 Then
      Rows("12:20").Select
      Selection.EntireRow.Hidden = True
      Target.Offset(10, 0).Select
      [a21] = "Open"
   End If
   If InStr(tmp, "$A$21") > 0 Then
      Rows("12:20").Select
      Selection.EntireRow.Hidden = False
      Target.Offset(-10, 0).Select
      [a21] = ""
   End If
   
   If InStr(tmp, "$A$23") > 0 Then
      If Rows("24").Hidden = True Then
         Rows("24:30").Hidden = False
         [a23] = "Close"
      Else
         Rows("24:30").Hidden = True
         [a23] = "Open"
      End If
      [b23].Select
   End If
   
   If InStr(tmp, "$A$31") > 0 Then
      If Rows("32").Hidden = True Or [a31] = "Open" Then
         Rows("32:67").Hidden = False
         [a31] = "Close"
      Else
         Rows("32:67").Hidden = True
         [a31] = "Open"
      End If
      [b31].Select
   End If
   
   If InStr(tmp, "$A$32") > 0 Then
      If Rows("32").Hidden = True Then
         Rows("32:49").Hidden = False
         [a32] = "Close"
      Else
         Rows("32:49").Hidden = True
         [a31] = "Open"
      End If
      [b31].Select
   End If
   
   If InStr(tmp, "$A$50") > 0 Then
      If Rows("50").Hidden = True Then
         Rows("50:67").Hidden = False
         [a31] = "Close"
      Else
         Rows("50:67").Hidden = True
         [a31] = "Open"
      End If
      [b31].Select
   End If
   
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Compare Text '("AAA"="aaa") => True
Const table_end = 100

Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = True
   CommandBars("side_menu_c").Visible = False
   CommandBars("side_menu_e").Visible = False
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
   'Exit Sub 'on 2015.8.29 'comment out 2016.7.27
   Application.ScreenUpdating = False
   On Error Resume Next
   tmp = Target.Address
   iRow = Target.Row
   iCol = Target.Column
   
   iCP = 2 '|fffd|R|fffd|s|fffd|[|fffd|{|fffd|^|fffd||fffd||fffd||30d|s|fffd||50d||fffd|
   iUP1 = 3 '|fffd|v|fffd||fffd||fffd|e|fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||30d|s|fffd||50d||fffd|
   iUP2 = 52 '|fffd||fffd||fffd||fffd|
   iUP3 = 107 '|fffd||fffd||fffd||fffd|
   
   If iCol = 1 Then
      If iRow = iCP Then
         'Copy sheet
         ActiveSheet.Copy before:=ActiveSheet
         ActiveSheet.Unprotect
         ActiveSheet.[a1] = "This is a copy"
         ActiveCell.Offset(1, 0).Select
'      ElseIf iRow = iUP1 Or iRow = iUP2 Or iRow = iUP3 Then
'         'Protect <-> Unprotect
'         If ActiveSheet.ProtectContents Then
'            ActiveSheet.Unprotect
'            Cells(iUP1, 1) = "Protect"
'            Cells(iUP2, 1) = "Protect"
'            Cells(iUP3, 1) = "Protect"
'         Else
'            Cells(iUP1, 1) = "Unprotect"
'            Cells(iUP2, 1) = "Unprotect"
'            Cells(iUP3, 1) = "Unprotect"
'            ActiveSheet.Protect AllowFormattingCells:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True
'         End If
'         ActiveCell.Offset(1, 0).Select
      End If
   End If
End Sub
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = True
   CommandBars("side_menu_e").Visible = False
   CommandBars("side_menu_c").Visible = False
End Sub
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
   tmp = Target.Address
   If tmp <> "$I$5" And tmp <> "$L$6" And tmp <> "$P$6" Then Exit Sub
   Run "change_meaning_of_hired_days"
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   [a1].Font.Bold = True
   [a1].Font.ColorIndex = 5 'blue
End Sub

Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim save_flag As Byte
Dim active_sh As String

Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = False
   CommandBars("Cell").Controls("eDB(&e)").Visible = True
   CommandBars("side_menu_i").Visible = False
   CommandBars("side_menu_c").Visible = False
   CommandBars("side_menu_e").Visible = True
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   save_flag = 5
   active_sh = ActiveSheet.name
End Sub

Private Sub Worksheet_Deactivate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = True
   CommandBars("side_menu_e").Visible = False
   If (save_flag = 5) And (active_sh = "iEdit") Then
      save_flag = 1
      Run "edit3_determine"
   End If
End Sub



Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = False
   CommandBars("side_menu_e").Visible = False
   CommandBars("side_menu_c").Visible = True
End Sub
Private Sub Worksheet_Deactivate()
   On Error Resume Next
   CommandBars("side_menu_c").Visible = False
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
   On Error Resume Next
   CommandBars("Cell").Controls("BFM(&B)").Visible = True
   CommandBars("Cell").Controls("eDB(&e)").Visible = False
   CommandBars("side_menu_i").Visible = True
   CommandBars("side_menu_c").Visible = False
   CommandBars("side_menu_e").Visible = False
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
   [a1].Font.Bold = True
   [a1].Font.ColorIndex = 5 'blue
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
   auto_open_bk
End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{94960FFB-CB2D-4249-9D52-5E3C677FCFA9}{A24537D3-0EFE-4193-84D4-3E654DD30E75}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
   edit_selected_item
   'make_sheet_MI
   UserForm1.Hide
End Sub

Private Sub CommandButton2_Click()
   read_data_base
   UserForm1.Hide
End Sub

Private Sub CommandButton3_Click()
   input_file = Application.GetOpenFilename("xls file (*.xls),*.xls")
   If input_file = False Then Exit Sub
   Workbooks.Open Filename:=input_file
   UserForm1.Hide
End Sub

Private Sub CommandButton4_Click()
   make_farmCondition_sheet
   UserForm1.Hide
End Sub

Private Sub CommandButton7_Click()
   show_greeting
End Sub

Private Sub CommandButton8_Click()
   make_user_form_not_show
   UserForm1.Hide
End Sub

Private Sub CommandButton9_Click()
   show_usage
End Sub
Sub make_user_form_not_show()
   If UserForm1.OptionButton2.Value = True Then
      show_msg = 0
   Else
      show_msg = 1
   End If
   On Error Resume Next
   Open Df & "\bfm.ini" For Output As 2
   Print #2, show_msg
   Close 2
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
   make_user_form_not_show
End Sub

Private Sub UserForm_Initialize()
   Label10.Caption = "Ver " & BFMe_Ver
End Sub

Attribute VB_Name = "UserForm2_BFM_SelectSheet"
Attribute VB_Base = "0{7D9DF808-7C7C-4C26-87FF-ECC15CBC8970}{7159646C-C952-4E0E-9E6E-065E90A8E6B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
   If ListBox1.ListIndex < 0 Then
      MsgBox "A sheet is not selected."
   Else
      Worksheets(ListBox1.Text).Visible = True
      Worksheets(ListBox1.Text).Select
      Unload Me
   End If
End Sub

Private Sub CommandButton2_Click()
   Unload Me
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
   Worksheets(ListBox1.Text).Visible = True
   Worksheets(ListBox1.Text).Select
   Unload Me
End Sub

Private Sub UserForm_Activate()
   For Each sh In ActiveWorkbook.Worksheets
      'If sh.Visible = True Then ListBox1.AddItem sh.name
      ListBox1.AddItem sh.name
   Next sh
End Sub



INQUEST-PP=macro
