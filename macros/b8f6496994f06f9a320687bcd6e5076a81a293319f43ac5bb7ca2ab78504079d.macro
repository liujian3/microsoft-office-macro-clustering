Attribute VB_Name = "Module1"


Option Explicit

'These  macros and code are copyright 1997
'by David H. Olwell and Douglas M. Hawkins; and Springer Verlag.
'All rights reserved.  Permission is granted to
'the 1st Armored Division, US Army to use this file.
'No warranty is made of the fitness for any use
'of this code.  The user assumes all risk.
'This code should not be used in any situation where
'human life may be at risk.


Dim Am As Single
Dim m As Single
Dim graphdata, abort As String
Dim n As String


'\*********************routines ****************

'\ setup routines

Sub addmenu()
Attribute addmenu.VB_ProcData.VB_Invoke_Func = " \n14"
On Error Resume Next
MenuBars(xlModule).Menus("Code").Delete
On Error GoTo 0

With MenuBars(xlModule).Menus.Add("&Code")
.MenuItems.Add "Setup Dialog", "run_setup"
.MenuItems.Add "Add data", "run_data"
.MenuItems.Add "Display graphs", "make_graphs"
.MenuItems.Add "Help", "display_help"
End With
End Sub

Sub run_setup()
Attribute run_setup.VB_ProcData.VB_Invoke_Func = " \n14"

    Dim l_up, l_down, lamic, sucl, slcl, yucl, ylcl As Single
    Dim setup As Object, setup_error As Object
    
    Set setup = ThisWorkbook.DialogSheets("setup_dialog")
    Set setup_error = DialogSheets("setup_error")
line1:
    setup.Show
    
    '\ get data
    lamic = CSng(setup.EditBoxes("lamic").Text)
     l_up = CSng(setup.EditBoxes("l_up").Text)
     l_down = CSng(setup.EditBoxes("l_down").Text)
    sucl = CSng(setup.EditBoxes("sucl").Text)
    slcl = CSng(setup.EditBoxes("slcl").Text)
    yucl = CSng(setup.EditBoxes("yucl").Text)
    ylcl = CSng(setup.EditBoxes("ylcl").Text)
    
     
     '\ check values
     If (sucl < 0 Or slcl > 0 Or yucl < ylcl Or l_down > lamic Or l_up < lamic Or l_down < 0 Or lamic < 0 Or l_up < 0) Then
    setup_error.Show
    GoTo line1
    End If
    
     '\assign values to worksheet
     
     Sheets("parameters").Unprotect
     With ThisWorkbook.Worksheets("parameters")
     .Range("b5").Value = lamic
     .Range("b6").Value = l_up
     .Range("b7").Value = l_down
     .Range("b12").Value = yucl
     .Range("b13").Value = ylcl
     .Range("b9").Value = sucl
     .Range("b10").Value = slcl
  
     
     End With
    
          
        
End Sub

Sub run_data()
Attribute run_data.VB_ProcData.VB_Invoke_Func = " \n14"
Dim address As String
address = "b" & CStr(4 + graphdata)
Sheets("data").Select
    Range(address).Select
End Sub

Sub display_help()
Attribute display_help.VB_ProcData.VB_Invoke_Func = " \n14"
Dim dummy As Integer
Dim phrase As String
phrase = "For help, contact Dave Olwell, (914) 938-5987.  Portions of this file are protected by copyright held by Douglas M. Hawkins, David H. Olwell, and Springer-Verlag."
MsgBox Prompt:=phrase, Buttons:=vbExclamation, Title:="help"
End Sub

'\************
'\master program

Sub make_graphs()
Attribute make_graphs.VB_ProcData.VB_Invoke_Func = " \n14"
Dim phrase1 As String
phrase1 = "You have entered negative data or omitted data on the data sheet.  Please correct."
Set_Graph_Boundaries2
abort = ""
'check_input

If (abort = "yes") Then
 MsgBox Prompt:=phrase1, Buttons:=vbExclamation, Title:="Data error"
 GoTo lineabort
End If

clear_graphs
Calculate
graph_iso_pers
'graph_pers
lineabort:
   
End Sub

'\***************
Sub check_input()
Attribute check_input.VB_ProcData.VB_Invoke_Func = " \n14"
Dim data_range As String
data_range = "data!b4:d" & CStr(3 + CInt(graphdata))

If (Application.Min(Range(data_range).Value) < 0 Or (Application.Count(Range(data_range).Value) < 3 * CInt(graphdata))) Then
abort = "yes"
End If
End Sub
'\****************

Sub clear_graphs()
Attribute clear_graphs.VB_ProcData.VB_Invoke_Func = " \n14"
Sheets("graph").Select
ActiveSheet.ChartObjects.Delete
'gets rid of old drug graphs
End Sub

'\******************

Sub Set_Graph_Boundaries2()
Attribute Set_Graph_Boundaries2.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Application.ScreenUpdating = False
    graphdata = CStr(Application.Count(Range("data!b4..b1000")))
    '\ diagnostic as needed: Range("data!a1").Value = graphdata
 
   

End Sub






'\*********************

'
' graph_iso_pers Macro
' Macro recorded 9/18/97 by David H. Olwell
'
'  graphs both the isolated and persistent charts

Sub graph_iso_pers()
Attribute graph_iso_pers.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim graphseries, graphseries1 As String
    Dim ind As String
    
    Set_Graph_Boundaries2
    'Sheets("calcs").Select
     ind = CStr(6 + CInt(graphdata))
     '\ diagnostic as needed: Range("data!b1").Value = ind
     
    graphseries = "A7:b" & ind & ",k7:l" & ind
    '\ diagnostic As needed: Range("data!c1").Value = graphseries
    
    
    Sheets("graph").Select
    ActiveSheet.ChartObjects.Add(3, 3, 400, 180).Select
    Application.CutCopyMode = False
    ActiveChart.ChartWizard Source:=Sheets("calcs").Range(graphseries), _
        Gallery:=xlLine, Format:=4, PlotBy:=xlColumns, CategoryLabels _
        :=1, SeriesLabels:=0, HasLegend:=1, Title:= _
        " Isolated ", CategoryTitle:="Period", ValueTitle:= _
        "Incidents", ExtraTitle:=""
    Selection.Name = "c_iso"
    ActiveSheet.DrawingObjects("c_iso").Select
    ActiveSheet.ChartObjects("c_iso").Activate
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 27
        .MarkerForegroundColorIndex = 27
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(2)
        .Name = "=""Upper Limit"""
       
    End With
    ActiveChart.SeriesCollection(1).Select
    With ActiveChart.SeriesCollection(1)
        .Name = "=""Incidents"""
        
    End With
    ActiveChart.SeriesCollection(3).Select
    With Selection.Border
        .ColorIndex = 4
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 26
        .MarkerForegroundColorIndex = 26
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(3)
        .Name = "=""Lower Limit"""
        
    End With
     ActiveWindow.Visible = False
     graphseries1 = "A7:A" & ind & ",g7:j" & ind
    ActiveSheet.ChartObjects.Add(3, 190, 400, 180).Select
    Application.CutCopyMode = False
    ActiveChart.ChartWizard Source:=Sheets("calcs").Range( _
        graphseries1), Gallery:=xlLine, Format:=2, PlotBy:= _
        xlColumns, CategoryLabels:=1, SeriesLabels:=0, HasLegend:=1, _
        Title:=" Persistent ", CategoryTitle:="Period", _
        ValueTitle:="", ExtraTitle:=""
    Selection.Name = "c_pers"
    
    ActiveSheet.DrawingObjects("c_pers").Select
    ActiveSheet.ChartObjects("c_pers").Activate
 
    ActiveChart.SeriesCollection(3).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 2
        .MarkerForegroundColorIndex = 1
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(3)
        .Name = "=""Upper Limit"""
     
    End With
    ActiveChart.SeriesCollection(4).Select
    With Selection.Border
        .ColorIndex = 3
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 2
        .MarkerForegroundColorIndex = 1
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(4)
        .Name = "=""Lower Limit"""
       
    End With
    ActiveChart.SeriesCollection(2).Select
    With Selection.Border
        .ColorIndex = 5
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 2
        .MarkerForegroundColorIndex = 1
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(2)
        .Name = "=""S-"""
    
    End With
   
  
    ActiveChart.SeriesCollection(1).Select
    With Selection.Border
        .ColorIndex = 5
        .Weight = xlThin
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = 2
        .MarkerForegroundColorIndex = 1
        .MarkerStyle = xlNone
        .Smooth = False
    End With
    With ActiveChart.SeriesCollection(1)
        .Name = "=""S+"""
     
    End With
   ActiveChart.Deselect
End Sub
'\**************
Function get_yn(Am, m As Single) As Single
Dim r_old, r_new, sum, y, facty As Double


'\*******************
'\ This function finds the argument that minimizes eq 7.1
'\*******************

sum = Exp(-m)
y = 0
r_old = Abs(Exp(-m) - Am)
r_new = Abs(Exp(-m) * (1 + m) - Am)
facty = 1
If r_new > r_old Then
    get_yn = 0
    GoTo done
    End If
    
Do Until r_new > r_old
    r_old = Abs(sum - Am)
    y = y + 1
    facty = facty * y
    sum = sum + Exp(-m) * m ^ y / facty
    r_new = Abs(sum - Am)
Loop
get_yn = y - 1

done:
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
