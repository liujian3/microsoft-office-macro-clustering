Attribute VB_Name = "Hoja10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Hoja5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Attribute VB_Name = "Module2"
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    RefrescarReporte
End Sub


Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{603F0DAA-B6BB-4069-91D2-F4BA0AD7E395}{0A77AC09-0242-4454-9C79-098BDB68F6BA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "frmLogin"
Attribute VB_Base = "0{326607B7-4225-466D-AC42-1D7B5414A690}{62F895D8-2740-40F0-ACFF-40A94276E57D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdAceptar_Click()
    Worksheets("datos").Range("B1").Value = frmLogin.txtServidor
    Worksheets("datos").Range("B2").Value = frmLogin.txtBaseDeDatos
    Worksheets("datos").Range("B3").Value = UCase(frmLogin.txtUsuario)
    Worksheets("datos").Range("B4").Value = frmLogin.txtPassword
    fraAtencion.Visible = True
    lblMensaje.Caption = "Abriendo Coneccion con la BD."
    If Not AbreConn Then
        fraAtencion.Visible = False
        MsgBox "No se puedo establecer la conexion...", vbInformation, "Atenci|fffd|n..."
    Else
        fraAtencion.Visible = False
        Unload Me
    End If
End Sub

Private Function AbreConn() As Boolean
On Error GoTo Fin
    Set vlConn = New ADODB.Connection
    vlConn.Provider = "SQLOLEDB"
    vlConn.ConnectionString = "Data Source=" & Worksheets("datos").Range("B1").Value & ";Initial Catalog=" & Worksheets("datos").Range("B2").Value & ";User Id=" & Worksheets("datos").Range("B3").Value & EnCrypt(Worksheets("datos").Range("B3").Value) & ";Password=" & Worksheets("datos").Range("B4").Value & ";"
    vlConn.CommandTimeout = 0
    
    vlConn.Open
    AbreConn = True
    Exit Function
Fin:
    AbreConn = False
End Function

Private Sub cmdSalir_Click()
    Application.DisplayAlerts = False
    Application.Workbooks.Close
End Sub




Private Sub UserForm_Initialize()
    frmLogin.txtServidor = Worksheets("datos").Range("B1").Value
    frmLogin.txtBaseDeDatos = Worksheets("datos").Range("B2").Value
    frmLogin.txtUsuario = Worksheets("datos").Range("B3").Value
    'frmLogin.txtPassword = Worksheets("datos").Range("B4").Value
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
If CloseMode <> 1 Then
    Cancel = 1
End If
    
End Sub

Attribute VB_Name = "frmShow"
Attribute VB_Base = "0{96D5AB42-96AB-4636-AF86-3C9955565846}{ECA8A938-1169-4074-9AED-B091768FBADC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub lblMensaje_Click()

End Sub
Attribute VB_Name = "inicializar"
Public vlConn As ADODB.Connection
Public Const HojaCapituloFuenteH = "Fuente de Datos"
Public Const HojaCapituloProyectoH = "Concepto Proyecto"
Public Const HojaReporte1 As String = "Fuente de Datos"
Public vlTablaResultado As String

Dim Actualizando As Boolean

Private Sub CargaActualizaTablaReporteNuevo()
    
    On Error GoTo ErrorHand:
    
    If Not AbreConn Then
        MsgBox "No fue posible establecer la conexion a la BD, validar parametros de conexi|fffd|n...", vbInformation, "Atencion..."
        Exit Sub
    End If
    frmShow.lblMensaje.Caption = "Creando Tabla para los reportes..."
    frmShow.Show 0
    DoEvents
    vlTablaResultado = "tmpTablaResultado" & CLng(Timer * 100)
    
    Dim VlSQL As String
    VlSQL = " set xact_abort on"
    VlSQL = VlSQL & Chr(13) & " declare @anio varchar(8)='" & Worksheets("Datos").Range("B7").Value & "'"
    VlSQL = VlSQL & Chr(13) & " declare  @idcvedef int=(select idcvedef from pppcvedef where anio=" & Worksheets("Datos").Range("B7").Value & ")"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "SELECT mes,Agrupador =' Ingresos',"
    VlSQL = VlSQL & Chr(13) & "       orden=CASE"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                         '5', '6' ) THEN 1"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 4"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '0' ) THEN 3"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '8' ) THEN 2"
    VlSQL = VlSQL & Chr(13) & "            END,"
    VlSQL = VlSQL & Chr(13) & "       substring(C.clave,2,1) as clave,"
    VlSQL = VlSQL & Chr(13) & "       TIPO=CASE"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                         '5', '6' ) THEN 'Ingresos de gesti|fffd|n'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '0' ) THEN 'Ingresos derivados de financiamiento'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '8' ) THEN 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "            END,"
    VlSQL = VlSQL & Chr(13) & "       CASE"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                    '5', '6' ) THEN C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '8' ) THEN C.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '0' ) THEN C3.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "         Else C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "       END as Descripcion,"
    VlSQL = VlSQL & Chr(13) & "       --C.descripcion,"
    VlSQL = VlSQL & Chr(13) & "       C.clave as Clave2,"
    VlSQL = VlSQL & Chr(13) & "       --c2.descripcion,c2.clave,"
    VlSQL = VlSQL & Chr(13) & "       --c3.concepto,c3.descripcion,"
    VlSQL = VlSQL & Chr(13) & "       Sum(cargos) / 1000 AS Presupuesto,"
    VlSQL = VlSQL & Chr(13) & "       0                            AS Mensual,"
    VlSQL = VlSQL & Chr(13) & "       0                            AS SALDOFinal"
    VlSQL = VlSQL & Chr(13) & "--select *"
    VlSQL = VlSQL & Chr(13) & "into #Reporte"
    VlSQL = VlSQL & Chr(13) & "FROM   CONTASALDO A"
    VlSQL = VlSQL & Chr(13) & "       JOIN CONTACUENTA B ON ( A.idcuenta = B.idcuenta )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBROARBOL C ON ( C.clave = Substring(B.cuenta, 5, 2) )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBROARBOL C2 ON ( C2.idConceptoCobroArbol = C.idpadre )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBRO C3 ON ( C3.concepto = Substring(B.cuenta, 5, 12) )"
    VlSQL = VlSQL & Chr(13) & "where B.Final = 1"
    VlSQL = VlSQL & Chr(13) & "       AND ( B.cuenta LIKE '811-%' )"
    VlSQL = VlSQL & Chr(13) & "       AND B.anio = @anio"
    VlSQL = VlSQL & Chr(13) & "       AND A.anio = @anio"
    VlSQL = VlSQL & Chr(13) & "       --AND mes = 1"
    VlSQL = VlSQL & Chr(13) & "GROUP  BY mes,CASE"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                       '5', '6' ) THEN C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '8' ) THEN C.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '0' ) THEN C3.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "            Else C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "          END,"
    VlSQL = VlSQL & Chr(13) & "          C.clave--,c2.descripcion,c2.clave,c3.concepto,c3.descripcion"
    VlSQL = VlSQL & Chr(13) & "Union all"
    VlSQL = VlSQL & Chr(13) & "SELECT mes,INGRESOS =' Ingresos',"
    VlSQL = VlSQL & Chr(13) & "       orden=CASE"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                         '5', '6' ) THEN 1"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 4"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '0' ) THEN 3"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '8' ) THEN 2"
    VlSQL = VlSQL & Chr(13) & "            END,"
    VlSQL = VlSQL & Chr(13) & "       C.clave,"
    VlSQL = VlSQL & Chr(13) & "       TIPO=CASE"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                         '5', '6' ) THEN 'Ingresos de gesti|fffd|n'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '0' ) THEN 'Ingresos derivados de financiamiento'"
    VlSQL = VlSQL & Chr(13) & "              WHEN LEFT(C.clave, 1) IN ( '8' ) THEN 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "            END,"
    VlSQL = VlSQL & Chr(13) & "       CASE"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                    '5', '6' ) THEN C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '8' ) THEN C.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '0' ) THEN C3.descripcion"
    VlSQL = VlSQL & Chr(13) & "         WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "         Else C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "       END,"
    VlSQL = VlSQL & Chr(13) & "       --C.descripcion,"
    VlSQL = VlSQL & Chr(13) & "       C.clave,"
    VlSQL = VlSQL & Chr(13) & "       --c2.descripcion,c2.clave,"
    VlSQL = VlSQL & Chr(13) & "       --c3.concepto,c3.descripcion,"
    VlSQL = VlSQL & Chr(13) & "       0                            AS PRESUP,"
    VlSQL = VlSQL & Chr(13) & "       Sum(abonos) / 1000 AS MES,"
    VlSQL = VlSQL & Chr(13) & "       Sum(saldoinicial + abonos) / 1000 As SALDO"
    VlSQL = VlSQL & Chr(13) & "--select *"
    VlSQL = VlSQL & Chr(13) & "FROM   CONTASALDO A"
    VlSQL = VlSQL & Chr(13) & "       JOIN CONTACUENTA B ON ( A.idcuenta = B.idcuenta )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBROARBOL C ON ( C.clave = Substring(B.cuenta, 5, 2) )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBROARBOL C2 ON ( C2.idConceptoCobroArbol = C.idpadre )"
    VlSQL = VlSQL & Chr(13) & "       JOIN INGCONCEPTOCOBRO C3 ON ( C3.concepto = Substring(B.cuenta, 5, 12) )"
    VlSQL = VlSQL & Chr(13) & "where B.Final = 1"
    VlSQL = VlSQL & Chr(13) & "       AND ( B.cuenta LIKE '815-%' )"
    VlSQL = VlSQL & Chr(13) & "       AND B.anio = @anio"
    VlSQL = VlSQL & Chr(13) & "       AND A.anio = @anio"
    VlSQL = VlSQL & Chr(13) & "       --AND mes = 1"
    VlSQL = VlSQL & Chr(13) & "GROUP  BY mes,CASE"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '1', '3', '2', '4',"
    VlSQL = VlSQL & Chr(13) & "                                       '5', '6' ) THEN C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '8' ) THEN C.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '0' ) THEN C3.descripcion"
    VlSQL = VlSQL & Chr(13) & "            WHEN LEFT(C.clave, 1) IN ( '7' ) THEN 'Ingresos del sector paraestatal y |fffd|rganos aut|fffd|nomos'"
    VlSQL = VlSQL & Chr(13) & "            Else C2.descripcion"
    VlSQL = VlSQL & Chr(13) & "          END,"
    VlSQL = VlSQL & Chr(13) & "          C.clave--,c2.descripcion,c2.clave,c3.concepto,c3.descripcion"
    VlSQL = VlSQL & Chr(13) & "Union all"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "--select * from contasaldo where idcuenta in (1185)"
    VlSQL = VlSQL & Chr(13) & "select mes,'Egresos'  as ingreso,"
    VlSQL = VlSQL & Chr(13) & "orden="
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 1"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 2"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 3"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 4"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 'Gasto corriente'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 'Gasto de inversi|fffd|n y/o capital'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 'Deuda p|fffd|blica'"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "C.descripcion,"
    VlSQL = VlSQL & Chr(13) & "substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "        Sum(abonos) / 1000  AS PRESUP,"
    VlSQL = VlSQL & Chr(13) & "        0 AS MES,"
    VlSQL = VlSQL & Chr(13) & "        0 AS SALDO"
    VlSQL = VlSQL & Chr(13) & "from"
    VlSQL = VlSQL & Chr(13) & "    contacuenta A"
    VlSQL = VlSQL & Chr(13) & "    join contasaldo B on (A.idcuenta=B.idcuenta)"
    VlSQL = VlSQL & Chr(13) & "    join absobjetogasto C on (C.objetogasto=substring(A.cuenta,5,20) and C.idcvedef = @idcvedef)"
    VlSQL = VlSQL & Chr(13) & "where A.cuenta like '82[1]-%' and A.idnivel=4 and A.anio=B.anio and A.anio=@anio"
    VlSQL = VlSQL & Chr(13) & "--and mes=1"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "group by mes,substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 'Gasto corriente'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 'Gasto de inversi|fffd|n y/o capital'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 'Deuda p|fffd|blica'"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "C.descripcion"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "Union all"
    VlSQL = VlSQL & Chr(13) & "select mes,'Egresos'  as ingreso,"
    VlSQL = VlSQL & Chr(13) & "orden="
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 1"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 2"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 3"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 4"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 'Gasto corriente'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 'Gasto de inversi|fffd|n y/o capital'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 'Deuda p|fffd|blica'"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "C.descripcion,"
    VlSQL = VlSQL & Chr(13) & "substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "        0                            AS PRESUP,"
    VlSQL = VlSQL & Chr(13) & "       Sum(abonos) / 1000 AS MES,"
    VlSQL = VlSQL & Chr(13) & "       Sum(saldoinicial + abonos) / 1000 As SALDO"
    VlSQL = VlSQL & Chr(13) & "from"
    VlSQL = VlSQL & Chr(13) & "    contacuenta A"
    VlSQL = VlSQL & Chr(13) & "    join contasaldo B on (A.idcuenta=B.idcuenta)"
    VlSQL = VlSQL & Chr(13) & "    join absobjetogasto C on (C.objetogasto=substring(A.cuenta,5,20) and C.idcvedef = @idcvedef)"
    VlSQL = VlSQL & Chr(13) & "where A.cuenta like '825-%' and A.idnivel=4 and A.anio=B.anio and A.anio=@anio"
    VlSQL = VlSQL & Chr(13) & "--and mes=1"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "group by mes,substring(C.objetogasto,1,1),"
    VlSQL = VlSQL & Chr(13) & "case"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('1','2','3','4') then 'Gasto corriente'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('5','6','7') then 'Gasto de inversi|fffd|n y/o capital'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('8') then 'Participaciones y aportaciones'"
    VlSQL = VlSQL & Chr(13) & "    when substring(C.objetogasto,1,1)in ('9') then 'Deuda p|fffd|blica'"
    VlSQL = VlSQL & Chr(13) & "end,"
    VlSQL = VlSQL & Chr(13) & "C.descripcion"
    VlSQL = VlSQL & Chr(13) & "order by orden"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "select case when Agrupador =' Ingresos' then 1"
    VlSQL = VlSQL & Chr(13) & "when Agrupador =' EGRESOS' then 2"
    VlSQL = VlSQL & Chr(13) & "else 3 end as OI,A.*,B.descripcion as DesMes "
    VlSQL = VlSQL & Chr(13) & " into " & vlTablaResultado
    VlSQL = VlSQL & Chr(13) & "from #Reporte A"
    VlSQL = VlSQL & Chr(13) & "join absmes B on (A.mes=B.mes and soloconta=0)"
    VlSQL = VlSQL & Chr(13) & "Union"
    VlSQL = VlSQL & Chr(13) & "select 3,A.mes,'Resultado del Periodo',3,1,'Resultado del Periodo','Resultado del Periodo','01'"
    VlSQL = VlSQL & Chr(13) & ",sum(case when Agrupador =' Ingresos' then presupuesto else -presupuesto end),sum(case when Agrupador =' Ingresos' then mensual else -mensual end),sum(case when Agrupador =' Ingresos' then SaldoFinal else -saldofinal end),"
    VlSQL = VlSQL & Chr(13) & "B.descripcion as DesMes"
    VlSQL = VlSQL & Chr(13) & "from #Reporte A"
    VlSQL = VlSQL & Chr(13) & "join absmes B on (A.mes=B.mes and soloconta=0)"
    VlSQL = VlSQL & Chr(13) & "group by A.mes,B.descripcion"
    VlSQL = VlSQL & Chr(13) & "order by OI"
    VlSQL = VlSQL & Chr(13) & ""
    VlSQL = VlSQL & Chr(13) & "drop table #reporte"
    
    VlSQL = VlSQL & Chr(13) & "Commit tran"
    vlConn.Execute VlSQL
    CierraConn
    
    Unload frmShow
    Exit Sub
ErrorHand:
On Error Resume Next
        Unload frmShow
        MsgBox "Error de ejecucion: " & Err.Description, vbCritical, "Atencion..."
    
End Sub


Public Sub RefrescarReporte()
    Application.Visible = False
    Application.ScreenUpdating = False
    
    frmLogin.txtServidor = Worksheets("datos").Range("B1").Value
    frmLogin.txtBaseDeDatos = Worksheets("datos").Range("B2").Value
    frmLogin.txtUsuario = Worksheets("datos").Range("B3").Value
    'frmLogin.txtPassword = Worksheets("datos").Range("B4").Value
    frmLogin.Show vbModal
    CargaActualizaTablaReporteNuevo
    CargaReporte1
    Actualizadatos
    If Not AbreConn Then
        MsgBox "No fue posible establecer la conexion a la BD, validar parametros de conexi|fffd|n...", vbInformation, "Atencion..."
        Exit Sub
    End If
    vlConn.Execute "if exists(select * from " & vlTablaResultado & ") drop table " & vlTablaResultado
    CierraConn
    Application.ScreenUpdating = True
    Application.Visible = True
End Sub


Private Sub CargaActualizaTablaReporte()
    
    On Error GoTo ErrorHand:
    
    If Not AbreConn Then
        MsgBox "No fue posible establecer la conexion a la BD, validar parametros de conexi|fffd|n...", vbInformation, "Atencion..."
        Exit Sub
    End If
    frmShow.lblMensaje.Caption = "Creando Tabla para los reportes..."
    frmShow.Show 0
    DoEvents
    
    Dim vlNivel As Integer
    vlNivel = Worksheets("Datos").Range("B5").Value
    
    Dim VlSQL As String
    VlSQL = "--declare @idcvedef int=(select idcvedef from pppcvedef where anio=" & Worksheets("Datos").Range("B7").Value & ")"
    VlSQL = VlSQL & Chr(13) & " set xact_abort on"
    VlSQL = VlSQL & Chr(13) & " begin tran"
    VlSQL = VlSQL & Chr(13) & " declare @idcvedef int=(select idcvedef from pppcvedef where anio=" & Worksheets("Datos").Range("B7").Value & ")"
    VlSQL = VlSQL & Chr(13) & " declare @totRelaciones int,@RelActual int=0"
    VlSQL = VlSQL & Chr(13) & " declare @vlSQL varchar(max),@vlCampos varchar(max)"

    VlSQL = VlSQL & Chr(13) & " set @vlCampos='"
    VlSQL = VlSQL & Chr(13) & "             Select"
    VlSQL = VlSQL & Chr(13) & "                     A.clave,AA.*,"
    VlSQL = VlSQL & Chr(13) & "                     ltrim(rtrim(C1.Objetogasto)) +'' - ''+ltrim(rtrim(C1.descripcion)) as CveDes_OG1, C1.idObjetogasto as id_OG1, C1.Objetogasto as Clave_OG1,C1.descripcion as Descripcion_OG1,"
    VlSQL = VlSQL & Chr(13) & "                     ltrim(rtrim(C2.Objetogasto)) +'' - ''+ltrim(rtrim(C2.descripcion)) as CveDes_OG2, C2.idObjetogasto as id_OG2, C2.Objetogasto as Clave_OG2,C2.descripcion as Descripcion_OG2,"
    VlSQL = VlSQL & Chr(13) & "                     ltrim(rtrim(C3.Objetogasto)) +'' - ''+ltrim(rtrim(C3.descripcion)) as CveDes_OG3, C3.idObjetogasto as id_OG3, C3.Objetogasto as Clave_OG3,C3.descripcion as Descripcion_OG3,"
    VlSQL = VlSQL & Chr(13) & "                     ltrim(rtrim(C4.Objetogasto)) +'' - ''+ltrim(rtrim(C4.descripcion)) as CveDes_OG4, C4.idObjetogasto as id_OG4, C4.Objetogasto as Clave_OG4,C4.descripcion as Descripcion_OG4 '"
            
    VlSQL = VlSQL & Chr(13) & "     select"
    VlSQL = VlSQL & Chr(13) & "             ROW_NUMBER() over (order by AA.idnivelconta) as Id,"
    VlSQL = VlSQL & Chr(13) & "             AA.idcvecfg,"
    VlSQL = VlSQL & Chr(13) & "             AA.idnivelconta,"
    VlSQL = VlSQL & Chr(13) & "             B.name as tabla,"
    VlSQL = VlSQL & Chr(13) & "             E.name as CampoId,"
    VlSQL = VlSQL & Chr(13) & "             Case B.Name"
    VlSQL = VlSQL & Chr(13) & "                 when 'AbsDependencia' then 'dependencia'"
    VlSQL = VlSQL & Chr(13) & "                 when 'AbsObjetoGasto' then 'objetogasto'"
    VlSQL = VlSQL & Chr(13) & "             Else 'Clave'"
    VlSQL = VlSQL & Chr(13) & "             end as CampoClave,"
    VlSQL = VlSQL & Chr(13) & "             A.niveltabla"
    VlSQL = VlSQL & Chr(13) & "     into #tmpRelaciones"
    VlSQL = VlSQL & Chr(13) & "     from PppCvePptalCfg AA"
    VlSQL = VlSQL & Chr(13) & "     join PppElemento A on (AA.idelemento=A.idelemento)"
    VlSQL = VlSQL & Chr(13) & "     join sys.tables B on (B.name=A.tabla)"
    VlSQL = VlSQL & Chr(13) & "     join sys.indexes C on (B.object_id=C.object_id and C.is_primary_key=1)"
    VlSQL = VlSQL & Chr(13) & "     join sys.index_columns D on (D.object_id=C.object_id and D.index_id=C.index_id)"
    VlSQL = VlSQL & Chr(13) & "     join sys.columns E on (D.column_id=E.column_id and e.object_id=C.object_id )"
    VlSQL = VlSQL & Chr(13) & "     where AA.idcvedef=@idcvedef"
    VlSQL = VlSQL & Chr(13) & "     order by idnivelconta"
    
    VlSQL = VlSQL & Chr(13) & "     set @totRelaciones=@@ROWCOUNT"

    VlSQL = VlSQL & Chr(13) & " set @vlSQL='"
    VlSQL = VlSQL & Chr(13) & " into tmpReportes"
    VlSQL = VlSQL & Chr(13) & " FROM   PPPCVEPPTAL A"
    VlSQL = VlSQL & Chr(13) & "          join fnVistaObjGastoA(''%'',' + CAST(@idcvedef as varchar(10)) +',28)as SA on (SA.idclave=A.idclave)"
    VlSQL = VlSQL & Chr(13) & "          join dbo.fnVistaUrA (1,1,28,' + CAST(@idcvedef as varchar(10)) +') as SD on (A.iddependencia=SD.iddependencia)"
    VlSQL = VlSQL & Chr(13) & "         join pppcvesaldos AA on (AA.idclave=A.idclave)"
    VlSQL = VlSQL & Chr(13) & "        JOIN ABSOBJETOGASTO C4 ON (A.idcvedef=' + CAST(@idcvedef as varchar(10)) +' and A.idobjetogasto = C4.idobjetogasto )"
    VlSQL = VlSQL & Chr(13) & "        JOIN ABSOBJETOGASTO C3 ON ( C3.idobjetogasto = C4.idpadre )"
    VlSQL = VlSQL & Chr(13) & "        JOIN ABSOBJETOGASTO C2 ON ( C2.idobjetogasto = C3.idpadre )"
    VlSQL = VlSQL & Chr(13) & "        JOIN ABSOBJETOGASTO C1 ON ( C1.idobjetogasto = C2.idpadre )"
    VlSQL = VlSQL & Chr(13) & " '"


    VlSQL = VlSQL & Chr(13) & " while @RelActual<@totRelaciones"
    VlSQL = VlSQL & Chr(13) & " begin"
    VlSQL = VlSQL & Chr(13) & "     set @RelActual+=1"
    VlSQL = VlSQL & Chr(13) & "     declare @table varchar(max)"
    VlSQL = VlSQL & Chr(13) & "     declare @CampoClave varchar(max)"
    VlSQL = VlSQL & Chr(13) & "     declare @CampoID varchar(max)"
    VlSQL = VlSQL & Chr(13) & "     declare @idCveCfg varchar(10)"
    
    VlSQL = VlSQL & Chr(13) & "     select @idCveCfg=idcvecfg, @table=tabla,@CampoClave=CampoClave,@CampoID=CampoId from #tmpRelaciones where id=@RelActual"
    
    VlSQL = VlSQL & Chr(13) & "     set @vlCampos+=',E'+CAST(@RelActual as varchar(10)) +'.' + @CampoID + ' as id_E' +CAST(@RelActual as varchar(10)) +', E' +CAST(@RelActual as varchar(10)) +'.'+ @CampoClave +' as Clave_E'+CAST(@RelActual as varchar(10)) + ', E' +CAST(@RelActual as varchar(10)) +'.'+ 'Descripcion as Descripcion_E' + CAST(@RelActual as varchar(10)) + ', ltrim(rtrim(E' +CAST(@RelActual as varchar(10)) +'.'+ @CampoClave + '))+ ''-'' + ltrim(rtrim(E' +CAST(@RelActual as varchar(10)) +'.'+ 'Descripcion)) as CveDes_E' +CAST(@RelActual as varchar(10)) "
    VlSQL = VlSQL & Chr(13) & "     set @vlSQL+='"
    VlSQL = VlSQL & Chr(13) & "             join ABSCVEPPTALLLAVE EE' +CAST(@RelActual as varchar(10)) +' ON ( A.idclave = EE' +CAST(@RelActual as varchar(10)) +'.idclave AND EE' +CAST(@RelActual as varchar(10)) +'.idcvecfg = ' + @idCveCfg +' )"
    VlSQL = VlSQL & Chr(13) & "             Join ' + @table + ' as E' + CAST(@RelActual as varchar(10))+' On ( EE'+CAST(@RelActual as varchar(10)) +'.idReal = E'+CAST(@RelActual as varchar(10)) +'.' + @CampoID + ')'"
    VlSQL = VlSQL & Chr(13) & " End"
    VlSQL = VlSQL & Chr(13) & " set @vlSQL=@vlCampos+@vlSQL"
    VlSQL = VlSQL & Chr(13) & " if exists(select * from sys.tables where name='tmpReportes')"
    VlSQL = VlSQL & Chr(13) & "     drop table tmpReportes"
    VlSQL = VlSQL & Chr(13) & " exec(@vlsql)"
    VlSQL = VlSQL & Chr(13) & " --select * from tmpReportes"
    VlSQL = VlSQL & Chr(13) & " drop table #tmpRelaciones"
    VlSQL = VlSQL & Chr(13) & " Commit tran"
        
    vlConn.Execute VlSQL
    CierraConn
    
    Unload frmShow
    Exit Sub
ErrorHand:
On Error Resume Next
        Unload frmShow
        MsgBox "Error de ejecucion: " & Err.Description, vbCritical, "Atencion..."
    
End Sub



Private Sub CargaReporte1()
    
    On Error Resume Next
    If Not AbreConn Then
        MsgBox "No fue posible establecer la conexion a la BD, validar parametros de conexi|fffd|n...", vbInformation, "Atencion..."
        Exit Sub
    End If
    CierraConn
    frmShow.lblMensaje.Caption = "Cargando Datos de la Base de Datos"
    frmShow.Show 0
    DoEvents
    Dim vlNivel As Integer
    vlNivel = Worksheets("Datos").Range("B5").Value
    Dim VlSQL As String
      
    VlSQL = "select * from " & vlTablaResultado
    
    Sheets(HojaReporte1).Visible = True
    DoEvents
    CargaQuery HojaReporte1, VlSQL, False
    'ActiveSheet.ListObjects("Tabla_DatosExternos_1").Unlist
    Sheets(HojaReporte1).Visible = False
    'CargaQuery HojaCapituloFuenteH, VlSQL, False
    
    Unload frmShow
       
End Sub

Private Function CierraConn()
    vlConn.Close
    Set vlConn = Nothing
End Function

Private Function AbreConn() As Boolean
On Error GoTo Fin
    Set vlConn = New ADODB.Connection
    vlConn.Provider = "SQLOLEDB"
    vlConn.ConnectionString = "Data Source=" & Worksheets("datos").Range("B1").Value & ";Initial Catalog=" & Worksheets("datos").Range("B2").Value & ";User Id=" & Worksheets("datos").Range("B3").Value & EnCrypt(Worksheets("datos").Range("B3").Value) & ";Password=" & Worksheets("datos").Range("B4").Value & ";"
    vlConn.CommandTimeout = 0
    
    vlConn.Open
    AbreConn = True
    Exit Function
Fin:
    AbreConn = False
End Function
Private Sub FormateHoja()
    Cells.Select
    Cells.EntireColumn.AutoFit
End Sub

Private Sub BorrarInfoPrevia()
    On Error Resume Next
    Rows("3:3").Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlDown)).Select
    Rows("3:3").Select
    ActiveWindow.ScrollRow = 2
    Rows("3:36279").Select
    ActiveWindow.SmallScroll Down:=15
    Range(Selection, Selection.End(xlDown)).Select
    Rows("3:1048575").Select
    
    Dim ActCol As Integer
    ActCol = 0
        
    Do While Cells(3, ActCol).Value <> ""
            ActCol = ActCol + 1
            ActiveSheet.ListObjects(1).Range.AutoFilter Field:=ActCol
    Loop
    Selection.Delete Shift:=xlUp
End Sub

Private Sub PosicionaHoja(NombreHoja As String)
        Application.Visible = True
        Sheets(NombreHoja).Select ' = True
        Sheets(NombreHoja).Range("A4").Select
End Sub

Private Sub PosicionarCursor(NombreHoja)
    PosicionaHoja (NombreHoja)
    Range("A4").Select
End Sub

Private Sub CargaQuery(Hoja As String, VlSQL, Optional formatea As Boolean = True)
    
    'On Error Resume Next
    PosicionaHoja (Hoja)
    BorrarInfoPrevia
       
    
       With ActiveSheet.ListObjects.Add(SourceType:=0, Source:=Array( _
        "OLEDB;Provider=SQLOLEDB.1;Persist Security Info=True;User ID=", Worksheets("datos").Range("B3").Value & EnCrypt(Worksheets("datos").Range("B3").Value), ";password=", Worksheets("datos").Range("B4").Value, ";Data Source=", Worksheets("datos").Range("B1").Value, ";Use Procedure for Prepare=1;Auto Translate" _
        , _
        "=True;Packet Size=4096;Use Encryption for Data=False;Tag with column collation when possible=False;Ini" _
        , "tial Catalog=", Worksheets("datos").Range("B2").Value), Destination:=Range("$A$3")).QueryTable
        
        .CommandType = xlCmdSql
        .CommandText = VlSQL
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .BackgroundQuery = True
        .RefreshStyle = xlInsertDeleteCells
        .SavePassword = False
        .AdjustColumnWidth = False
        .RefreshPeriod = 0
        .PreserveColumnInfo = True
        
        .Refresh BackgroundQuery:=False
    End With
    ActiveSheet.ListObjects(1).Name = "Tabla_datosExternos_1"
    If formatea Then
        FormateHoja
    End If
    PosicionarCursor Hoja
End Sub






Private Sub Actualizadatos()
    On Error Resume Next
    frmLogin.lblMensaje.Caption = "Actualizando todos los reportes..."
      
    For i = 1 To Sheets.Count
    
        If Not (Sheets(i).Name = "Datos" Or Sheets(i).Name = "Fuente de Datos") Then
                For j = 1 To Sheets(i).PivotTables.Count
                    Sheets(i).PivotTables(j).PivotCache.Refresh
                    'IRM 20130704: Formato de fecha
                    Sheets(i).PageSetup.RightFooter = "&""Arial,Normal""&8P|fffd|gina &P de &N" & Chr(10) & Format(Now, "dd/mmm/yyyy")
                Next
        End If
    Next i
   
    Sheets(HojaReporte1).Visible = True
    DoEvents
    PosicionaHoja (HojaReporte1)
   ' BorrarInfoPrevia
    Sheets(HojaReporte1).Visible = False

End Sub

Attribute VB_Name = "tBrahe"
Option Explicit

Dim mLngI As Long
Private Const mStrCharsPermitidos As String = "#$0123456789@ABCDEFGHIJKLMN|fffd|OPQRSTUVWXYZ_abcdefghijklmn|fffd|opqrstuvwxyz"

Private Function ArrASCIIPermitidos() As Variant

    Dim ArrPaso(0 To 67) As Variant
    
    ArrPaso(0) = 35
    ArrPaso(1) = 36
    ArrPaso(2) = 48
    ArrPaso(3) = 49
    ArrPaso(4) = 50
    ArrPaso(5) = 51
    ArrPaso(6) = 52
    ArrPaso(7) = 53
    ArrPaso(8) = 54
    ArrPaso(9) = 55
    ArrPaso(10) = 56
    ArrPaso(11) = 57
    ArrPaso(12) = 64
    ArrPaso(13) = 65
    ArrPaso(14) = 66
    ArrPaso(15) = 67
    ArrPaso(16) = 68
    ArrPaso(17) = 69
    ArrPaso(18) = 70
    ArrPaso(19) = 71
    ArrPaso(20) = 72
    ArrPaso(21) = 73
    ArrPaso(22) = 74
    ArrPaso(23) = 75
    ArrPaso(24) = 76
    ArrPaso(25) = 77
    ArrPaso(26) = 78
    ArrPaso(27) = 79
    ArrPaso(28) = 80
    ArrPaso(29) = 81
    ArrPaso(30) = 82
    ArrPaso(31) = 83
    ArrPaso(32) = 84
    ArrPaso(33) = 85
    ArrPaso(34) = 86
    ArrPaso(35) = 87
    ArrPaso(36) = 88
    ArrPaso(37) = 89
    ArrPaso(38) = 90
    ArrPaso(39) = 95
    ArrPaso(40) = 97
    ArrPaso(41) = 98
    ArrPaso(42) = 99
    ArrPaso(43) = 100
    ArrPaso(44) = 101
    ArrPaso(45) = 102
    ArrPaso(46) = 103
    ArrPaso(47) = 104
    ArrPaso(48) = 105
    ArrPaso(49) = 106
    ArrPaso(50) = 107
    ArrPaso(51) = 108
    ArrPaso(52) = 109
    ArrPaso(53) = 110
    ArrPaso(54) = 111
    ArrPaso(55) = 112
    ArrPaso(56) = 113
    ArrPaso(57) = 114
    ArrPaso(58) = 115
    ArrPaso(59) = 116
    ArrPaso(60) = 117
    ArrPaso(61) = 118
    ArrPaso(62) = 119
    ArrPaso(63) = 120
    ArrPaso(64) = 121
    ArrPaso(65) = 122
    ArrPaso(66) = 241
    ArrPaso(67) = 209

    ArrASCIIPermitidos = ArrPaso

End Function

Private Function InversionCaracteres(pCadena As String) As String

Dim StrPaso As String
Dim lngLong As Long

lngLong = Len(pCadena)

For mLngI = 1 To lngLong
    StrPaso = StrPaso & Left(Right(pCadena, mLngI), 1)
Next mLngI

InversionCaracteres = StrPaso

End Function

Private Function ValidaUnicode(pCadena As String) As Boolean

Dim LngI As Long
Dim lngLong As Long

ValidaUnicode = True

lngLong = Len(pCadena)
For LngI = 1 To lngLong

    If InStr(1, mStrCharsPermitidos, Mid(pCadena, LngI, 1)) = 0 Then
        MsgBox "El caracter '" & Mid(pCadena, LngI, 1) & "' no esta permitido", vbOKOnly + vbInformation, "Valor no permitido"
        ValidaUnicode = False
        Exit Function
    End If

Next LngI

End Function

Public Function EnCrypt(ByVal pCadena As String) As String
    
    Dim ArrEquivalencias() As Variant
    Dim ArrShuffle() As Variant
    Dim LngI As Long
    Dim lngLongOri As Long
     
    lngLongOri = Len(pCadena)
    
    Do Until Len(EnCrypt) >= 12
    
        If Len(pCadena) > 15 Or Len(Trim(pCadena)) = 0 Then
            MsgBox "La longitud de la cadena es incorrecta", vbOKOnly + vbInformation, "Valor incorrecto"
            EnCrypt = ""
            Exit Function
        End If
        
        If Not ValidaUnicode(pCadena) Then
            EnCrypt = ""
            Exit Function
        End If
    
        Shuffle ArrASCIIPermitidos, ArrEquivalencias, True
                
        Shuffle pCadena, ArrShuffle, False
        
        pCadena = ""
        For LngI = LBound(ArrShuffle) To UBound(ArrShuffle)
                                               
            pCadena = pCadena & BuscaEquivalenciaASCII(ArrEquivalencias, CStr(ArrShuffle(LngI)))
                        
        Next LngI
            
        pCadena = InversionCaracteres(pCadena)
        If (Len(EnCrypt)) < 12 Then
            EnCrypt = EnCrypt & pCadena
            pCadena = Right(pCadena, 1)
        Else
            EnCrypt = pCadena
            If (Len(EnCrypt)) > 12 Then
                pCadena = Right(pCadena, 1)
            End If
        End If
    Loop
    
    If lngLongOri < 15 Then
        If lngLongOri = 13 Then
            EnCrypt = "0" & Right(ConcatenaASCIIEqui(CStr(lngLongOri), ArrEquivalencias), 1) & EnCrypt
        Else
            If lngLongOri = 14 Then
                EnCrypt = "1" & EnCrypt
            Else
                EnCrypt = "00" & Right(ConcatenaASCIIEqui(CStr(lngLongOri), ArrEquivalencias), 1) & EnCrypt
            End If
        End If
        
    End If
    
End Function

Private Function ConcatenaASCIIEqui(pValor As String, pArrEqui As Variant) As String
    
    Dim lngLongi As Long
    Dim LngI As Long
    Dim ArrPaso() As Variant
    
    lngLongi = Len(pValor)
    
    ReDim ArrPaso(0 To (lngLongi - 1))
    
    'Se parta la cadena en cada uno de sus elementos
    For LngI = 0 To lngLongi - 1
        ArrPaso(LngI) = Mid(pValor, LngI + 1, 1)
    Next LngI
    
    'Se arma una nueva cadena agregando el ascii equivalente
    For LngI = LBound(ArrPaso) To UBound(ArrPaso)
        ConcatenaASCIIEqui = ConcatenaASCIIEqui & ArrPaso(LngI) & BuscaEquivalenciaASCII(pArrEqui, CStr(ArrPaso(LngI)))
    Next LngI

End Function





'Private Sub Text1_LostFocus()
'Text2.Text = EnCrypt(Text1.Text)
'End Sub

Private Sub UserControl_Resize()
    UserControl.Height = 735
    UserControl.Width = 735
End Sub

Private Sub Shuffle(pValores As Variant, ByRef pArrSalida As Variant, Optional pEsArray As Boolean)

'Variables locales
Dim lngLongi As Long
Dim LngI As Long
Dim LngL As Long
Dim lngLongMaso As Long
Dim lngRes As Long
Dim StrPaso As String

'Los dos masos
Dim ArrMaso1() As Variant
Dim ArrMaso2() As Variant
Dim ArrMasoPaso() As Variant
Dim ArrMasoFinal() As Variant

If pEsArray Then ArrMasoPaso = pValores

Inicio:

'Se valida si es una cadena o un arreglo
If pEsArray Then

    'Se carga el total de registros del array
    lngLongi = UBound(ArrMasoPaso) + 1
    
    If lngLongi > 1 Then
    
        lngRes = lngLongi Mod 2
    
        If lngRes <> 0 Then
            lngLongMaso = (lngLongi - lngRes) / 2
        Else
            lngLongMaso = lngLongi / 2
        End If
    Else
        pArrSalida = ArrMasoPaso
        Exit Sub
    End If
    
    ReDim ArrMaso1(0 To (lngLongMaso - 1))
    ReDim ArrMaso2(0 To (lngLongMaso - 1 + lngRes))
    
    For LngI = LBound(ArrMasoPaso) To UBound(ArrMasoPaso)
    
        If LngI <= lngLongMaso - 1 Then
            ArrMaso1(LngI) = ArrMasoPaso(LngI)
        Else
            If LngI = UBound(ArrMasoPaso) Then
                ArrMaso2((LngI - lngLongMaso)) = ArrMasoPaso(LngI)
            Else
                ArrMaso2(LngI - (lngLongMaso)) = ArrMasoPaso(LngI)
            End If
        End If
        
    Next LngI
    
    'Inversion de ambos masos
    ReDim ArrMasoFinal(0 To UBound(ArrMaso1))
    
    LngL = 0
    For LngI = UBound(ArrMaso1) To LBound(ArrMaso1) Step -1
        
        ArrMasoFinal(LngL) = ArrMaso1(LngI)
        LngL = LngL + 1
            
    Next LngI
    
    'Reasigna el maso ya invertido
    For LngI = LBound(ArrMasoFinal) To UBound(ArrMasoFinal)
        ArrMaso1(LngI) = ArrMasoFinal(LngI)
    Next LngI
        
    ReDim ArrMasoFinal(0 To UBound(ArrMaso2))
    
    LngL = 0
    For LngI = UBound(ArrMaso2) To LBound(ArrMaso2) Step -1
        
        ArrMasoFinal(LngL) = ArrMaso2(LngI)
        LngL = LngL + 1
            
    Next LngI
    
    'Reasigna el maso ya invertido
    For LngI = LBound(ArrMasoFinal) To UBound(ArrMasoFinal)
        ArrMaso2(LngI) = ArrMasoFinal(LngI)
    Next LngI
    
    ReDim ArrMasoFinal(0 To UBound(ArrMasoPaso))
    
    For LngI = LBound(ArrMaso2) To UBound(ArrMaso2)
        ArrMasoFinal(LngI * 2) = ArrMaso2(LngI)
    Next LngI
    
    For LngI = LBound(ArrMaso1) To UBound(ArrMaso1)
                   
        ArrMasoFinal((LngI * 2) + 1) = ArrMaso1(LngI)
        
    Next LngI
    
    pArrSalida = ArrMasoFinal

Else

    lngLongi = Len(pValores)
    
    ReDim ArrMasoPaso(0 To (lngLongi - 1))
    
    For LngI = 0 To lngLongi - 1
        ArrMasoPaso(LngI) = Mid(pValores, LngI + 1, 1)
    Next LngI
        
    pEsArray = True
    GoTo Inicio

End If

End Sub

Private Function BuscaEquivalenciaASCII(pArrEqui As Variant, pCaracter As String) As String

    Dim LngI As Long
    Dim ArrASCIIPermi As Variant
    ArrASCIIPermi = ArrASCIIPermitidos
    
    For LngI = LBound(ArrASCIIPermi) To UBound(ArrASCIIPermi)
        If Asc(pCaracter) = ArrASCIIPermi(LngI) Then
            BuscaEquivalenciaASCII = Chr(pArrEqui(LngI))
            Exit For
        End If
    Next LngI

End Function


' InQuest injected base64 decoded content
' zw"h

INQUEST-PP=macro
