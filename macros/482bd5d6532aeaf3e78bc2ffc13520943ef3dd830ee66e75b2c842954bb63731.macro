Attribute VB_Name = "OnlyClientMacroses"
' Client's macroses
' Author Denis Maslakov (mailto:DMaslakov@topsbi.ru), TopS Business Integrator
' 27.03.2006
' Option Explicit
Private confirmationToolBar As CommandBar
Private Const DM_PWD As String = "asud_fsk"
Private ErrorHappened As Boolean
Private BLOCKED As Boolean
   
Public Function GetLocalFileProperties()
    Dim objVMI As Object
    Dim vAdptr As Variant
    Dim objAdptr As Object
    Dim adptrCnt As Long

    Set objVMI = GetObject("winmgmts:\\" & "." & "\root\cimv2")
    Set vAdptr = objVMI.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True")

    For Each objAdptr In vAdptr
        If Not IsNull(objAdptr.MACAddress) And IsArray(objAdptr.IPAddress) Then

            For adptrCnt = 0 To UBound(objAdptr.IPAddress)
                If Not objAdptr.IPAddress(adptrCnt) = "0.0.0.0" Then
                    GetNetworkConnectionMACAddress = objAdptr.MACAddress
            Exit For
        End If
    Next adptrCnt

    GetLocalFileProperties = GetNetworkConnectionMACAddress

End If

Next

End Function

Private Sub CreatesConfirmationToolBar()
    Dim appWordVersion As String
    Dim wordVersion As String
    Dim bar As CommandBar
    Dim AcceptRevButton As CommandBarButton
    Dim RejectRevButton As CommandBarButton
    Dim MergeDocsButton As CommandBarButton
    Dim acceptControl As CommandBarControl
    Dim rejectControl As CommandBarControl
    Dim mergeControl As CommandBarControl
    Dim iDx As Integer
    
    On Error Resume Next
    ' Show only for Owner
    If StrComp(getOwnerUserId(), getCurrentUserId(), vbTextCompare) = 0 Then
        For Each bar In Application.CommandBars
            If Not bar.BuiltIn Then bar.Delete
        Next
        
        Set confirmationToolBar = Application.CommandBars.Add("confirmationToolBar", _
                    Position:=msoBarTop, MenuBar:=False, Temporary:=True)
        
        With confirmationToolBar
            .NameLocal = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
            .Enabled = True
            .Visible = True
            .Protection = msoBarNoCustomize + msoBarNoChangeDock + msoBarNoMove
        End With
        
        With confirmationToolBar.Controls
            Set AcceptRevButton = .Add(Type:=msoControlButton)
            Set RejectRevButton = .Add(Type:=msoControlButton)
            Set MergeDocsButton = .Add(Type:=msoControlButton)
        End With
        
        appWordVersion = Application.Version
        iDx = InStr(appWordVersion, ".")
        If iDx > 1 Then
            wordVersion = Left(appWordVersion, iDx - 1)
        Else
            wordVersion = appWordVersion
        End If
        If wordVersion = "9" Then
            Set acceptControl = CommandBars.FindControl(Type:=msoControlButton, ID:=1715)
            Set rejectControl = CommandBars.FindControl(Type:=msoControlButton, ID:=1716)
            Set mergeControl = CommandBars.FindControl(Type:=msoControlButton)
        End If
        If wordVersion = "11" Then
            Set acceptControl = CommandBars.FindControl(Type:=msoControlButton, ID:=6240)
            Set rejectControl = CommandBars.FindControl(Type:=msoControlButton, ID:=6243)
            Set mergeControl = CommandBars.FindControl(Type:=msoControlButton)
        End If
        
        acceptControl.CopyFace
        With AcceptRevButton
            .TooltipText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Style = msoButtonIconAndCaption
            .PasteFace
            .OnAction = "AcceptRev"
            .Width = "auto"
        End With
        
        rejectControl.CopyFace
        With RejectRevButton
            .TooltipText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Style = msoButtonIconAndCaption
            .PasteFace
            .OnAction = "RejectRev"
            .Width = "auto"
        End With
        
        mergeControl.CopyFace
        With MergeDocsButton
            .TooltipText = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            .Style = msoButtonIconAndCaption
            .PasteFace
            .OnAction = "MergeDocs"
            .Width = "auto"
        End With
    End If
End Sub

Private Function getOwnerUserId() As String
    Dim DocProps As DocumentProperties
    Dim DocProp As DocumentProperty
    Dim isUserIdExists As Boolean
    
    Set DocProps = clientDocument.CustomDocumentProperties
    
    For Each DocProp In DocProps
        If DocProp.name = "CustomOwnerUserId" Then: isUserIdExists = True
    Next
    
    If isUserIdExists Then
        With DocProps.Item("CustomOwnerUserId")
            getOwnerUserId = .Value
        End With
    Else
        getOwnerUserId = Empty
    End If
End Function

Private Function getCurrentUserId() As String
    Dim DocProps As DocumentProperties
    Dim DocProp As DocumentProperty
    Dim isUserIdExists As Boolean
    
    Set DocProps = clientDocument.CustomDocumentProperties
    
    For Each DocProp In DocProps
        If DocProp.name = "CustomUserId" Then: isUserIdExists = True
    Next
    
    If isUserIdExists Then
        With DocProps.Item("CustomUserId")
            getCurrentUserId = .Value
        End With
    Else
        getCurrentUserId = Empty
    End If
End Function

Private Function getObjectState() As String
    Dim DocProps As DocumentProperties
    Dim DocProp As DocumentProperty
    Dim isObjectStateExists As Boolean
    
    Set DocProps = clientDocument.CustomDocumentProperties
    
    For Each DocProp In DocProps
        If DocProp.name = "CustomObjectState" Then: isObjectStateExists = True
    Next
    
    If isObjectStateExists Then
        With DocProps.Item("CustomObjectState")
            getObjectState = .Value
        End With
    Else
        getObjectState = Empty
    End If
End Function

Private Sub AcceptRev()
    On Error Resume Next
    ' Work only for Owner
    If StrComp(getOwnerUserId(), getCurrentUserId(), vbTextCompare) = 0 Then
        clientDocument.Unprotect Password:=DM_PWD
        clientDocument.Activate
        Selection.Range.Revisions.AcceptAll
        clientDocument.Protect Password:=DM_PWD, NoReset:=False, Type:= _
        wdAllowOnlyRevisions
        ', UseIRM:=False, EnforceStyleLock:=False
    End If
End Sub

Private Sub RejectRev()
    On Error Resume Next
    ' Work only for Owner
    If StrComp(getOwnerUserId(), getCurrentUserId(), vbTextCompare) = 0 Then
        clientDocument.Unprotect Password:=DM_PWD
        clientDocument.Activate
        If createComment Then
            clientDocument.Activate
            Selection.Range.Revisions.RejectAll
        Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly + vbInformation, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
        clientDocument.Protect Password:=DM_PWD, NoReset:=False, Type:= _
        wdAllowOnlyRevisions
        ', UseIRM:=False, EnforceStyleLock:=False
    End If
End Sub

Private Sub MergeDocs()
    Dim strSample As String
    Dim strChange As String
    Dim mainDoc As Document
    
    ' Work only for Owner
    If StrComp(getOwnerUserId(), getCurrentUserId(), vbTextCompare) = 0 Then
        strSample = clientDocument.FullName
        clientDocument.Unprotect DM_PWD
            Dim dlgOpen As FileDialog
            Set dlgOpen = Application.FileDialog(FileDialogType:=msoFileDialogOpen)
            With dlgOpen
                .AllowMultiSelect = False
                .Show
            End With
        On Error GoTo exit_sub
        strChange = dlgOpen.SelectedItems.Item(1)
        Set mainDoc = Application.Documents.Open(strChange)
        mainDoc.Unprotect DM_PWD
        mainDoc.Merge fileName:=strSample, MergeTarget:= _
            wdMergeTargetSelected, DetectFormatChanges:=True, UseFormattingFrom:= _
            wdFormattingFromPrompt, AddToRecentFiles:=False
        ' Selection.WholeStory
        ' Selection.Range.Revisions.AcceptAll
        Application.Documents(strChange).Close wdDoNotSaveChanges
        clientDocument.Protect Password:=DM_PWD, NoReset:=False, Type:= _
        wdAllowOnlyRevisions ', UseIRM:=False, EnforceStyleLock:=False
    End If
exit_sub:
End Sub

Private Function createComment() As Boolean
    Dim comment As String
    Dim startRange As Long
    Dim endRange As Long
    On Error GoTo commentError
    comment = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    If Len(comment) > 0 Then
        startRange = Selection.Range.Start
        endRange = Selection.Range.End
        Selection.Collapse Direction:=wdCollapseEnd
        clientDocument.Comments.Add Range:=Selection.Range, Text:=comment
        Selection.SetRange startRange, endRange
        createComment = True
        Exit Function
    End If
commentError:
    createComment = False
    Exit Function
End Function

Private Sub CheckinToServer()
    Dim serverURL As String
    Dim isSendDocumentToServer As Boolean
    Dim isCancelCheckin As Boolean
   
On Error GoTo Exit_Checkin
    ' Client
    isSendDocumentToServer = MsgBox("|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbCrLf & "|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|." & _
        vbCrLf & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?" & vbCrLf & "|fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd|"" - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", _
        vbOKCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbOK
    If isSendDocumentToServer Then
        isCancelCheckin = False ' !!!
    Else
        ' isCancelCheckin = MsgBox("|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & vbCrLf & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|." & _
        ' vbCrLf & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|?", vbOKCancel + vbQuestion, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|") = vbOK
        ' New.
        isCancelCheckin = True ' Always. It behaviour is demanded by VGariev@topsbi.ru
    End If
    If isSendDocumentToServer Or isCancelCheckin Then
        serverURL = getServerURL()
        If serverURL <> "" Then
            If SendHTTPPostMultipartFormDataRequest(serverURL, clientDocument.FullName, isCancelCheckin) Then
                ' Informs user
                Call MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbInformation + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            Else
                ' Error
                Call MsgBox("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
            End If
        Else
            Call MsgBox("|fffd||fffd||fffd||fffd||fffd| (CustomServerURL) |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")
        End If
    End If
    GoTo normal
Exit_Checkin:
    Call MsgBox(Err.Description, vbCritical + vbMsgBoxHelpButton, "Error", Err.HelpFile, Err.HelpContext)
    Exit Sub
normal:
End Sub

Private Function getObjectId() As String
    Dim DocProps As DocumentProperties
    Dim DocProp As DocumentProperty
    Dim isDocIdExists As Boolean
    
    Set DocProps = clientDocument.CustomDocumentProperties
    
    For Each DocProp In DocProps
        If DocProp.name = "CustomObjectId" Then: isDocIdExists = True
    Next
    
    If isDocIdExists Then
        With DocProps.Item("CustomObjectId")
            getObjectId = .Value
        End With
    Else
        getObjectId = Empty
    End If
End Function

Private Function getServerURL() As String
    Dim DocProps As DocumentProperties
    Dim DocProp As DocumentProperty
    Dim isURLExists As Boolean
    
    Set DocProps = clientDocument.CustomDocumentProperties
    
    For Each DocProp In DocProps
        If DocProp.name = "CustomServerURL" Then: isURLExists = True
    Next
    
    If isURLExists Then
        With DocProps.Item("CustomServerURL")
            getServerURL = .Value
        End With
    Else
        getServerURL = Empty
    End If
End Function

Private Function SendHTTPPostMultipartFormDataRequest(sURL As String, fileName As String, isCancelCheckin As Boolean) As Boolean
    Dim oXmlHttp As Object
    Dim objectId As String
    Dim state As String
    Dim boundaryId As String
    Dim request() As Byte ' Request in bytes

    Set oXmlHttp = CreateObject("Msxml2.ServerXMLHTTP")
    
    objectId = getObjectId()
    state = getObjectState()
    If objectId <> "" Then
        boundaryId = "-----------------------------" & getBoundaryId(StrReverse(fileName)) ' Id of pack
    
        request = buildMultipartFormDataRequest(boundaryId, fileName, objectId, state, isCancelCheckin)
        On Error GoTo ErrHandler
        If lengthOfArray(request) > 10 Then ' !!!
            oXmlHttp.Open "POST", sURL, False
            oXmlHttp.setRequestHeader "Cache-Control", "no-cache"
            oXmlHttp.setRequestHeader "Connection", "Keep-Alive"
            
            ' Set pack boundary and "" for stripped Charset=xxx, if present, Removes "--" from boundary!!!
            oXmlHttp.setRequestHeader "Content-Type", "multipart/form-data; boundary=""" & Right(boundaryId, Len(boundaryId) - 2) & """; Charset=Windows-1251"
            oXmlHttp.send (request)
                        
            Do While oXmlHttp.readyState <> 4
              Call oXmlHttp.waitForResponse(1000)
            Loop
            SendHTTPPostMultipartFormDataRequest = True
        Else
            SendHTTPPostMultipartFormDataRequest = False
        End If
    Else
        Call MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (CustomObjectId) |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|")
        ' Error
        SendHTTPPostMultipartFormDataRequest = False
    End If
        GoTo NormHandler
ErrHandler:
    Call MsgBox(Err.Description, vbCritical + vbMsgBoxHelpButton, "Error", Err.HelpFile, Err.HelpContext)
    SendHTTPPostMultipartFormDataRequest = False
NormHandler:
    'Call MsgBox("File sent sucess!")
    Set oXmlHttp = Nothing
End Function

Private Function buildMultipartFormDataRequest(ByVal boundaryId As String, fileName As String, objectId As String, state As String, isCancelCheckin As Boolean) As Byte()

    Const sDblQts As String = """"
    Dim buffer As String
    Dim bb() As Byte
    Dim content() As Byte ' Contents of file
    Dim endOfRequest As String
    Dim fileLength As Long
    Dim offset As Long
    Dim request() As Byte
    ' End of pack
    endOfRequest = vbCrLf & boundaryId & "--"
    ReDim request(0 To 1)
    
    ' Open file and forms request
    If isCancelCheckin Then
        ' clear
        buffer = ""
        ' Adds parameter customObjectId
        buffer = buffer & boundaryId & vbCrLf
        buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "customObjectId" & sDblQts & vbCrLf & vbCrLf
        buffer = buffer & objectId & vbCrLf
        ' Adds parameter state
        buffer = buffer & boundaryId & vbCrLf
        buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "customObjectState" & sDblQts & vbCrLf & vbCrLf
        buffer = buffer & state & vbCrLf

        ' Adds hidden parameter
        buffer = buffer & boundaryId & vbCrLf
        buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "hidden.from.word" & sDblQts & vbCrLf & vbCrLf
        buffer = buffer & "Left.parameter.Word" & vbCrLf
        ' Adds hidden parameter of cancel checkin
        buffer = buffer & boundaryId & vbCrLf
        buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "userCancelCheckinOfDocument" & sDblQts & vbCrLf & vbCrLf
        buffer = buffer & "true" & endOfRequest
        ' Form request
        offset = 0
        bb = strToBytes(buffer)
        ArrayCopy bb, request, offset
    Else
        If Dir(fileName, vbNormal) <> vbNullString Then
            ' Gets contents
            content = GetFileData(fileName)
            fileLength = FileLen(fileName)
            ' clear
            buffer = ""
            ' Adds parameter customObjectId
            buffer = buffer & boundaryId & vbCrLf
            buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "customObjectId" & sDblQts & vbCrLf & vbCrLf
            buffer = buffer & objectId & vbCrLf
                    ' Adds parameter state
        buffer = buffer & boundaryId & vbCrLf
        buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "customObjectState" & sDblQts & vbCrLf & vbCrLf
        buffer = buffer & state & vbCrLf

            ' Adds hidden parameter
            buffer = buffer & boundaryId & vbCrLf
            buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "hidden.from.word" & sDblQts & vbCrLf & vbCrLf
            buffer = buffer & "Left.parameter.Word" & vbCrLf
            ' Adds content of file!!!
            buffer = buffer & boundaryId & vbCrLf
            buffer = buffer & "Content-Disposition: form-data; name=" & sDblQts & "uploaded.file.to.documentum" & sDblQts & "; filename=" & sDblQts & fileName & sDblQts & vbCrLf
            buffer = buffer & "Content-Type: application/octet-stream" & vbCrLf & vbCrLf
            ' buffer = buffer & "Content-Transfer-Encoding: base64" & vbCrLf & vbCrLf
            ' Header
            offset = 0
            bb = strToBytes(buffer)
            ArrayCopy bb, request, offset
            ' Adds file
            offset = offset + lengthOfArray(bb)
            ArrayCopy content, request, offset
            ' Adds footer
            offset = offset + lengthOfArray(content)
            bb = strToBytes(endOfRequest)
            ArrayCopy bb, request, offset
        Else
            Call MsgBox("|fffd||fffd||fffd||fffd|:" & vbCrLf & fileName & vbCrLf & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
        End If
    End If
    ' Return
    buildMultipartFormDataRequest = request
End Function

Private Function getBoundaryId(name As String) As String
    Const hexTable As String = "0123456789abcdef"
    Dim magic As Integer
    Dim i As Integer
    Dim c As Byte
    Dim hi As Byte
    Dim lo As Byte
    Dim res As String
    magic = CInt(Len(name) Xor CInt(Time))
    For i = 1 To 14 Step 1
        c = charAt(name, i) Xor magic
        lo = c Mod 16 + 1
        res = res & Mid(hexTable, lo, 1)
    Next
    getBoundaryId = res
End Function

Private Function charAt(data As String, pos As Integer) As Byte
    Dim n As Integer
    Dim length As Integer
    length = Len(data)
    If length > 0 Then
        n = pos Mod length
        If n < 1 Then
            n = 1
        End If
        charAt = AscB(Mid(data, n, 1))
    Else
        charAt = -1
    End If
End Function

Private Function GetFileData(fileName As String) As Byte()
    Dim fNum As Integer
    Dim bytes() As Byte
    Dim fileLength As Long
    
    fileLength = FileLen(fileName)
    ReDim bytes(fileLength - 1)
    
    fNum = FreeFile
    Open fileName For Binary As #fNum
        Get #fNum, 1, bytes
    Close fNum

    GetFileData = bytes
End Function

Private Function strToBytes(str As String) As Byte()
    Const LCID As Long = &H419 ' Russia, Windows-1251
    Dim data As String
    Dim bytes() As Byte
    Dim buffer() As Byte
    Dim length As Long
    Dim lenOfArray As Long
    Dim i As Integer
    Dim j As Integer
    Dim counter As Integer
    ' First to first
    ' data = StrConv(str, vbFromUnicode, LCID) ' To Windows-1251
    data = str
    counter = 0
    length = Len(data) - 1
    lenOfArray = length
    ReDim bytes(0 To lenOfArray) ' minimum
    For i = 0 To length
        ' buffer = intToBytes(AscW(Mid(data, i + 1, 1)))
        buffer = intToBytes(Asc(Mid(data, i + 1, 1)))
        For j = 0 To UBound(buffer)
            ' First
            If counter > lenOfArray Then
                lenOfArray = counter + (length - i + 1) * 2
                ReDim Preserve bytes(0 To lenOfArray)
            End If
            bytes(counter) = buffer(j)
            counter = counter + 1
        Next j
    Next i
    ReDim Preserve bytes(0 To (counter - 1)) ' Important
    strToBytes = bytes
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, VBA |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| StrConv()
Private Function intToBytes(data As Long) As Byte()
    Dim hi0 As Byte
    Dim lo0 As Byte
    Dim bytes() As Byte
    If data < 0 Then
        data = 65536 + data
    End If
    hi0 = data \ 256
    lo0 = data Mod 256
    If hi0 > 0 Then
        ReDim bytes(0 To 1)
        bytes(0) = lo0
        bytes(1) = hi0
        intToBytes = bytes
    Else
        ReDim bytes(0 To 0)
        bytes(0) = lo0
        intToBytes = bytes
    End If
End Function

Private Function lengthOfArray(data() As Byte) As Long
    lengthOfArray = UBound(data()) - LBound(data()) + 1
End Function

Private Function ArrayCopy(src() As Byte, dst() As Byte, dstPos As Long) As Byte()
    Dim dstLength As Long
    Dim srcLength As Long
    Dim lb As Long
    Dim li As Long
    Dim ui As Long
    Dim i As Long
    Dim count As Long
    lb = LBound(dst)
    dstLength = lengthOfArray(dst())
    srcLength = lengthOfArray(src())
    If dstLength < (dstPos + srcLength) Then
        ReDim Preserve dst(lb To (dstPos + srcLength - 1))
    End If
    li = LBound(src())
    ui = UBound(src())
    count = 0
    For i = li To ui Step 1
        dst(dstPos + count) = src(i)
        count = count + 1
    Next i
    ArrayCopy = dst
End Function

Attribute VB_Name = "clientDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
' Documents
' Author Denis Maslakov (mailto:DMaslakov@topsbi.ru), TopS Business Integrator
' 27.03.2006

Private Sub Document_Open()
    OnlyClientMacroses.InitializeClient
End Sub

Private Sub Document_Close()
    OnlyClientMacroses.FinalizeClient
End Sub


INQUEST-PP=macro
