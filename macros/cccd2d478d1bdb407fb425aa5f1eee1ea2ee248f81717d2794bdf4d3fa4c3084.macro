Attribute VB_Name = "Module1"
Option Explicit

Dim gElmm(4, 1)
Dim s As Worksheet, ds As Worksheet

Public Sub ReportExported()
  Dim pRow As Long, pDsRow As Long, pRowOtherTurns As Long
  Dim pAllTotalDebit As Currency, pAllTotalCredit As Currency, _
      pAllTotalDebitCrn As Currency, pAllTotalCreditCrn As Currency
  Dim pOBDebet As Currency, pOBCredit As Currency, _
      pOCDebet As Currency, pOCCredit As Currency
  Dim pDebitBaseHeelsBeg As Currency, pCreditBaseHeelsBeg As Currency, _
      pDebitBaseHeelsEnd As Currency, pCreditBaseHeelsEnd As Currency, _
      pDebitCurrencyHeelsBeg As Currency, pCreditCurrencyHeelsBeg As Currency, _
      pDebitCurrencyHeelsEnd As Currency, pCreditCurrencyHeelsEnd As Currency
  Dim pTotalDebitBaseHeelsBeg As Currency, pTotalCreditBaseHeelsBeg As Currency, _
      pTotalDebitBaseHeelsEnd As Currency, pTotalCreditBaseHeelsEnd As Currency, _
      pTotalDebitCurrencyHeelsBeg As Currency, pTotalCreditCurrencyHeelsBeg As Currency, _
      pTotalDebitCurrencyHeelsEnd As Currency, pTotalCreditCurrencyHeelsEnd As Currency
  Dim pRealDebitBaseHeelsBeg As Currency, pRealCreditBaseHeelsBeg As Currency, _
      pRealDebitBaseHeelsEnd As Currency, pRealCreditBaseHeelsEnd As Currency, _
      pRealDebitCurrencyHeelsBeg As Currency, pRealCreditCurrencyHeelsBeg As Currency, _
      pRealDebitCurrencyHeelsEnd As Currency, pRealCreditCurrencyHeelsEnd As Currency
  Dim pSumPresent As Currency
'Stop
  
  Application.Calculation = xlManual
  
  Set ds = Sheets("Data")
  Set s = Sheets("|fffd||fffd||fffd|")

  FormatHeader
  
  pRow = 6
  pAllTotalDebit = 0: pAllTotalCredit = 0: pAllTotalDebitCrn = 0: pAllTotalCreditCrn = 0
  pTotalDebitBaseHeelsBeg = 0: pTotalCreditBaseHeelsBeg = 0
  pTotalDebitBaseHeelsEnd = 0: pTotalCreditBaseHeelsEnd = 0
  pTotalDebitCurrencyHeelsBeg = 0: pTotalCreditCurrencyHeelsBeg = 0
  pTotalDebitCurrencyHeelsEnd = 0: pTotalCreditCurrencyHeelsEnd = 0
  While s.Cells(pRow, 2).Value <> ""
    CalcTotals s.Cells(pRow, 2).Value, pRow, 0, _
      pAllTotalDebit, pAllTotalCredit, pAllTotalDebitCrn, pAllTotalCreditCrn, _
      pDebitBaseHeelsBeg, pCreditBaseHeelsBeg, pDebitBaseHeelsEnd, pCreditBaseHeelsEnd, _
      pDebitCurrencyHeelsBeg, pCreditCurrencyHeelsBeg, pDebitCurrencyHeelsEnd, pCreditCurrencyHeelsEnd
    pTotalDebitBaseHeelsBeg = pTotalDebitBaseHeelsBeg + pDebitBaseHeelsBeg
    pTotalCreditBaseHeelsBeg = pTotalCreditBaseHeelsBeg + pCreditBaseHeelsBeg
    pTotalDebitBaseHeelsEnd = pTotalDebitBaseHeelsEnd + pDebitBaseHeelsEnd
    pTotalCreditBaseHeelsEnd = pTotalCreditBaseHeelsEnd + pCreditBaseHeelsEnd
    pTotalDebitCurrencyHeelsBeg = pTotalDebitCurrencyHeelsBeg + pDebitCurrencyHeelsBeg
    pTotalCreditCurrencyHeelsBeg = pTotalCreditCurrencyHeelsBeg + pCreditCurrencyHeelsBeg
    pTotalDebitCurrencyHeelsEnd = pTotalDebitCurrencyHeelsEnd + pDebitCurrencyHeelsEnd
    pTotalCreditCurrencyHeelsEnd = pTotalCreditCurrencyHeelsEnd + pCreditCurrencyHeelsEnd
  Wend
  UpdateHeels pTotalDebitBaseHeelsBeg, pTotalCreditBaseHeelsBeg
  UpdateHeels pTotalDebitBaseHeelsEnd, pTotalCreditBaseHeelsEnd
  UpdateHeels pTotalDebitCurrencyHeelsBeg, pTotalCreditCurrencyHeelsBeg
  UpdateHeels pTotalDebitCurrencyHeelsEnd, pTotalCreditCurrencyHeelsEnd
  
'  If ds.Range("OnAllAnalytics").Value <> 1 Then
'    s.Cells(pRow + 1, 10) = pAllTotalDebit
'    s.Cells(pRow + 1, 11) = pAllTotalCredit
'    s.Cells(pRow + 1, 12) = pAllTotalDebitCrn
'    s.Cells(pRow + 1, 13) = pAllTotalCreditCrn
'  Else
    s.Cells(pRow + 1, 10) = ds.Range("BaseTurnDebet").Value
    s.Cells(pRow + 1, 11) = ds.Range("BaseTurnCredit").Value
    s.Cells(pRow + 1, 12) = ds.Range("CrnTurnDebet").Value
    s.Cells(pRow + 1, 13) = ds.Range("CrnTurnCredit").Value
    
    
    ' Other heels
    pRealDebitBaseHeelsBeg = ds.Cells(3, 7)
    pRealCreditBaseHeelsBeg = ds.Cells(3, 8)
    pRealDebitBaseHeelsEnd = ds.Cells(3, 9)
    pRealCreditBaseHeelsEnd = ds.Cells(3, 10)
    pRealDebitCurrencyHeelsBeg = ds.Cells(3, 11)
    pRealCreditCurrencyHeelsBeg = ds.Cells(3, 12)
    pRealDebitCurrencyHeelsEnd = ds.Cells(3, 13)
    pRealCreditCurrencyHeelsEnd = ds.Cells(3, 14)
    UpdateHeels pRealDebitBaseHeelsBeg, pRealCreditBaseHeelsBeg
    UpdateHeels pRealDebitBaseHeelsEnd, pRealCreditBaseHeelsEnd
    UpdateHeels pRealDebitCurrencyHeelsBeg, pRealCreditCurrencyHeelsBeg
    UpdateHeels pRealDebitCurrencyHeelsEnd, pRealCreditCurrencyHeelsEnd
    
    pDebitBaseHeelsBeg = pRealDebitBaseHeelsBeg - pTotalDebitBaseHeelsBeg
    pCreditBaseHeelsBeg = pRealCreditBaseHeelsBeg - pTotalCreditBaseHeelsBeg
    pDebitBaseHeelsEnd = pRealDebitBaseHeelsEnd - pTotalDebitBaseHeelsEnd
    pCreditBaseHeelsEnd = pRealCreditBaseHeelsEnd - pTotalCreditBaseHeelsEnd
    pDebitCurrencyHeelsBeg = pRealDebitCurrencyHeelsBeg - pTotalDebitCurrencyHeelsBeg
    pCreditCurrencyHeelsBeg = pRealCreditCurrencyHeelsBeg - pTotalCreditCurrencyHeelsBeg
    pDebitCurrencyHeelsEnd = pRealDebitCurrencyHeelsEnd - pTotalDebitCurrencyHeelsEnd
    pCreditCurrencyHeelsEnd = pRealCreditCurrencyHeelsEnd - pTotalCreditCurrencyHeelsEnd
    UpdateHeels pDebitBaseHeelsBeg, pCreditBaseHeelsBeg
    UpdateHeels pDebitBaseHeelsEnd, pCreditBaseHeelsEnd
    UpdateHeels pDebitCurrencyHeelsBeg, pCreditCurrencyHeelsBeg
    UpdateHeels pDebitCurrencyHeelsEnd, pCreditCurrencyHeelsEnd
    
    ' Other turns
    pOBDebet = ds.Range("BaseTurnDebet").Value - pAllTotalDebit
    pOBCredit = ds.Range("BaseTurnCredit").Value - pAllTotalCredit
    pOCDebet = ds.Range("CrnTurnDebet").Value - pAllTotalDebitCrn
    pOCCredit = ds.Range("CrnTurnCredit").Value - pAllTotalCreditCrn
    
    pSumPresent = Abs(pDebitBaseHeelsBeg) + Abs(pCreditBaseHeelsBeg) + _
                  Abs(pDebitBaseHeelsEnd) + Abs(pCreditBaseHeelsEnd) + _
                  Abs(pDebitCurrencyHeelsBeg) + Abs(pCreditCurrencyHeelsBeg) + _
                  Abs(pDebitCurrencyHeelsEnd) + Abs(pCreditCurrencyHeelsEnd) + _
                  Abs(pOBDebet) + Abs(pOBCredit) + Abs(pOCDebet) + Abs(pOCCredit)
    
    
    If (pSumPresent > 0) Then
      pRow = pRow + 1
      ' Heels begin
      s.Rows(pRow).Insert
      With s.Cells(pRow, 7)
        .Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 10)
        .Value = pDebitBaseHeelsBeg
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 11)
        .Value = pCreditBaseHeelsBeg
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 12)
        .Value = pDebitCurrencyHeelsBeg
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 13)
        .Value = pCreditCurrencyHeelsBeg
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      
      pRow = pRow + 1
      ' Turns
      pRowOtherTurns = pRow
      s.Rows(pRow).Insert
      With s.Cells(pRow, 7)
        .Value = "|fffd||fffd||fffd||fffd| i|fffd||fffd||fffd||fffd| |fffd||fffd|i|fffd|i|fffd|"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 10)
        .Value = pOBDebet
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        '.Font.Bold = True
      End With
      With s.Cells(pRow, 11)
        .Value = pOBCredit
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        '.Font.Bold = True
      End With
      With s.Cells(pRow, 12)
        .Value = pOCDebet
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        '.Font.Bold = True
      End With
      With s.Cells(pRow, 13)
        .Value = pOCCredit
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        '.Font.Bold = True
      End With
      pRow = pRow + 1
      ' Heels end
      s.Rows(pRow).Insert
      With s.Cells(pRow, 7)
        .Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd|i|fffd||fffd||fffd||fffd|"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 10)
        .Value = pDebitBaseHeelsEnd
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 11)
        .Value = pCreditBaseHeelsEnd
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 12)
        .Value = pDebitCurrencyHeelsEnd
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      With s.Cells(pRow, 13)
        .Value = pCreditCurrencyHeelsEnd
        .NumberFormat = "#,##0.00;[Red]-#,##0.00;"
        .Font.Bold = True
      End With
      pRow = pRow + 1
      
      s.Rows(pRow).Insert
    '  pRow = pRow + 1
    End If
'  End If
  
  FormatResults pRow
  
  FormatTable pRow
  
  ds.Visible = False
  
  OtherTurnsStr (pRowOtherTurns) '|fffd||fffd||632| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  
  s.Cells(1, 1).Select
  Application.Calculation = xlAutomatic
End Sub


Function GetAnlStr(aAnlElement) As String
  Dim pC As Range
  Set ds = Sheets("Data")
  For Each pC In ds.Range(ds.Cells(6, 18), ds.Cells(6, 18).End(xlDown))
    If pC.Value = aAnlElement Then
      GetAnlStr = ""
      If Not ds.Cells(pC.Row, pC.Column + 1).Value = "" Then
        GetAnlStr = "[" & ds.Cells(pC.Row, pC.Column + 1).Value & "] "
      End If
      GetAnlStr = GetAnlStr & ds.Cells(pC.Row, pC.Column + 2).Value
      Exit For
    End If
  Next
End Function

Sub CalcTotals(aElement As Variant, aRow As Long, aLevel As Long, _
      aTotDebit As Currency, aTotCredit As Currency, _
      aTotDebitCrn As Currency, aTotCreditCrn As Currency, _
      aDebitBaseHeelsBeg As Currency, aCreditBaseHeelsBeg As Currency, _
      aDeditBaseHeelsEnd As Currency, aCreditBaseHeelsEnd As Currency, _
      aDebitCurrencyHeelsBeg As Currency, aCreditCurrencyHeelsBeg As Currency, _
      aDebitCurrencyHeelsEnd As Currency, aCreditCurrencyHeelsEnd As Currency)
  
  Dim pAnlStr As String, pDRow As Long, i As Long
  
  Set ds = Sheets("Data")
  Set s = Sheets("|fffd||fffd||fffd|")
  gElmm(aLevel, 0) = aElement
  pAnlStr = ""
  If aLevel = 0 Then
    pDRow = 6
  Else
    pDRow = gElmm(aLevel - 1, 1)
  End If
'Dem 23.04.2003 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 65000 |fffd||fffd||fffd||fffd||fffd|.
'While ds.Cells(pDRow, 4 + aLevel).Value <> aElement
  While ds.Cells(pDRow, 4 + aLevel).Value <> aElement And Not Len(Trim(ds.Cells(pDRow, 4 + aLevel).Value)) = 0
    If aLevel > 0 Then
      If ds.Cells(pDRow, 4 + aLevel - 1).Value <> gElmm(aLevel - 1, 0) Then
        GoTo exitwhile
      End If
    End If
    pDRow = pDRow + 1
  Wend
  If ds.Cells(pDRow, 4 + aLevel).Value = aElement Then
    gElmm(aLevel, 1) = pDRow
  End If
exitwhile:
  Dim pStartDebit As Currency, pStartCredit As Currency, pFinDebit As Currency, pFinCredit As Currency
  Dim pStartDebitCrn As Currency, pStartCreditCrn As Currency, pFinDebitCrn As Currency, pFinCreditCrn As Currency
  Dim pAnlStrAdd As String, pStartRow As Long
  Dim pOnlyHls As Boolean
  Dim pDebitBaseHeelsBeg As Currency, pCreditBaseHeelsBeg As Currency, _
      pDebitBaseHeelsEnd As Currency, pCreditBaseHeelsEnd As Currency, _
      pDebitCurrencyHeelsBeg As Currency, pCreditCurrencyHeelsBeg As Currency, _
      pDebitCurrencyHeelsEnd As Currency, pCreditCurrencyHeelsEnd As Currency
  Dim pSubDebitBaseHeelsBeg As Currency, pSubCreditBaseHeelsBeg As Currency, _
      pSubDebitBaseHeelsEnd As Currency, pSubCreditBaseHeelsEnd As Currency, _
      pSubDebitCurrencyHeelsBeg As Currency, pSubCreditCurrencyHeelsBeg As Currency, _
      pSubDebitCurrencyHeelsEnd As Currency, pSubCreditCurrencyHeelsEnd As Currency
    
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pStartDebit = 0: pStartCredit = 0: pFinDebit = 0: pFinCredit = 0
  pStartDebitCrn = 0: pStartCreditCrn = 0: pFinDebitCrn = 0: pFinCreditCrn = 0
  
  While (ds.Cells(pDRow, 4 + aLevel).Value = aElement And Not ds.Cells(pDRow, 4 + aLevel).Value = "")
    pStartDebit = pStartDebit + ds.Cells(pDRow, 9).Value
    pStartCredit = pStartCredit + ds.Cells(pDRow, 10).Value
    pFinDebit = pFinDebit + ds.Cells(pDRow, 11).Value
    pFinCredit = pFinCredit + ds.Cells(pDRow, 12).Value
    pStartDebitCrn = pStartDebitCrn + ds.Cells(pDRow, 13).Value
    pStartCreditCrn = pStartCreditCrn + ds.Cells(pDRow, 14).Value
    pFinDebitCrn = pFinDebitCrn + ds.Cells(pDRow, 15).Value
    pFinCreditCrn = pFinCreditCrn + ds.Cells(pDRow, 16).Value
    pDRow = pDRow + 1
  Wend
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  UpdateHeels pStartDebit, pStartCredit
  UpdateHeels pFinDebit, pFinCredit
  UpdateHeels pStartDebitCrn, pStartCreditCrn
  UpdateHeels pFinDebitCrn, pFinCreditCrn
    
  pAnlStr = GetAnlStr(aElement)
  For i = 1 To aLevel
    pAnlStrAdd = "    " & pAnlStrAdd
  Next i
  pStartRow = aRow
  pOnlyHls = (s.Cells(aRow, 1) = 0)
  If pAnlStr <> "" Then
    Dim cell As Range
    
    s.Rows(aRow).Insert
    s.Rows(aRow).Insert
    
    s.Cells(aRow, 7).Value = pAnlStr

'--------------- Formating Cells ----------------
    FormatHeadRow aRow
'------------------------------------------------

    aRow = aRow + 1
    
    With s.Cells(aRow, 7)
'      If pOnlyHls Then
'        .Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'      Else
        .Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'      End If
    End With
    s.Cells(aRow, 14).Value = s.Cells(aRow, 7).Value
    s.Cells(aRow, 10).Value = pStartDebit
    s.Cells(aRow, 11).Value = pStartCredit
    s.Cells(aRow, 12).Value = pStartDebitCrn
    s.Cells(aRow, 13).Value = pStartCreditCrn
    
'--------------- Formating Cells ----------------
    FormatRow aRow
'------------------------------------------------

    aRow = aRow + 1
  End If

  Dim pTotalDebit As Currency, pTotalCredit As Currency, _
      pTotalDebitCrn As Currency, pTotalCreditCrn As Currency
  Dim pSavFinDebit As Currency, pSavFinCredit As Currency, pSavTotDebit As Currency, _
      pSavTotCredit As Currency, pSavTotDebitCrn As Currency, pSavTotCreditCrn As Currency
  Dim pSubTotDebit As Currency, pSubTotCredit As Currency, _
      pSubTotDebitCrn As Currency, pSubTotCreditCrn As Currency
  
  
  
  Dim pSavAnlStr As String
  
  Dim pCntRowLevel  As Long, pStartRowSort As Long
  Dim pSubAnlElement As Variant
  
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pTotalDebit = 0: pTotalCredit = 0: pTotalDebitCrn = 0: pTotalCreditCrn = 0
  pCntRowLevel = 0
  pStartRowSort = aRow

  While (s.Cells(aRow, 2 + aLevel).Value = aElement And Not s.Cells(aRow, 2 + aLevel).Value = "")
    If aLevel > 0 Then
      If s.Cells(aRow, 2 + aLevel - 1).Value <> gElmm(aLevel - 1, 0) Then
        GoTo exitwhile2
      End If
    End If
    pSubAnlElement = s.Cells(aRow, 3 + aLevel).Value
    If pSubAnlElement <> 0 And aLevel < 5 Then
      pSavFinDebit = pFinDebit
      pSavFinCredit = pFinCredit
      pSavAnlStr = pAnlStr
      pSavTotDebit = pTotalDebit
      pSavTotCredit = pTotalCredit
      pSavTotDebitCrn = pTotalDebitCrn
      pSavTotCreditCrn = pTotalCreditCrn
      pSubTotDebit = 0: pSubTotCredit = 0: pSubTotDebitCrn = 0: pSubTotCreditCrn = 0
      CalcTotals pSubAnlElement, aRow, aLevel + 1, _
        pSubTotDebit, pSubTotCredit, pSubTotDebitCrn, pSubTotCreditCrn, _
        pSubDebitBaseHeelsBeg, pSubCreditBaseHeelsBeg, pSubDebitBaseHeelsEnd, pSubCreditBaseHeelsEnd, _
        pSubDebitCurrencyHeelsBeg, pSubCreditCurrencyHeelsBeg, pSubDebitCurrencyHeelsEnd, pSubCreditCurrencyHeelsEnd
      pStartRowSort = aRow
      pTotalDebit = pSavTotDebit + pSubTotDebit
      pTotalCredit = pSavTotCredit + pSubTotCredit
      pTotalDebitCrn = pSavTotDebitCrn + pSubTotDebitCrn
      pTotalCreditCrn = pSavTotCreditCrn + pSubTotCreditCrn
    Else
      pTotalDebit = pTotalDebit + s.Cells(aRow, 10).Value
      pTotalCredit = pTotalCredit + s.Cells(aRow, 11).Value
      pTotalDebitCrn = pTotalDebitCrn + s.Cells(aRow, 12).Value
      pTotalCreditCrn = pTotalCreditCrn + s.Cells(aRow, 13).Value
      aRow = aRow + 1
    End If

    pCntRowLevel = pCntRowLevel + 1
  Wend
exitwhile2:
  If pCntRowLevel > 1 Then
    
    If pStartRowSort < aRow - 1 Then
      s.Range(s.Cells(pStartRowSort, 7), s.Cells(aRow - 1, 13)).Sort Key1:=s.Range(s.Cells(pStartRowSort, 7), s.Cells(pStartRowSort, 8)), Order1:=xlAscending, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    End If
    
    s.Rows(aRow).Insert
    
    s.Cells(aRow, 7).Value = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & pAnlStr
    s.Cells(aRow, 14).Value = s.Cells(aRow, 7).Value
    s.Cells(aRow, 10).Value = pTotalDebit
    s.Cells(aRow, 11).Value = pTotalCredit
    s.Cells(aRow, 12).Value = pTotalDebitCrn
    s.Cells(aRow, 13).Value = pTotalCreditCrn
    
'--------------- Formating Cells ----------------
    FormatRow aRow
'------------------------------------------------

    aRow = aRow + 1
  End If
  aTotDebit = aTotDebit + pTotalDebit
  aTotCredit = aTotCredit + pTotalCredit
  aTotDebitCrn = aTotDebitCrn + pTotalDebitCrn
  aTotCreditCrn = aTotCreditCrn + pTotalCreditCrn
'  If Not pOnlyHls Then
    s.Rows(aRow).Insert
  
    s.Cells(aRow, 7).Value = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd|i|fffd||fffd||fffd||fffd|"
    If pCntRowLevel = 1 Then s.Cells(aRow, 7).Value = "|fffd||fffd| |fffd|i|fffd||fffd||fffd||fffd| |fffd||fffd| " & pAnlStr
    s.Cells(aRow, 14).Value = s.Cells(aRow, 7).Value
    s.Cells(aRow, 10).Value = pFinDebit
    s.Cells(aRow, 11).Value = pFinCredit
    s.Cells(aRow, 12).Value = pFinDebitCrn
    s.Cells(aRow, 13).Value = pFinCreditCrn
    
'--------------- Formating Cells ----------------
    FormatRow aRow
'------------------------------------------------

    aRow = aRow + 1
'  End If

  aDebitBaseHeelsBeg = pStartDebit
  aCreditBaseHeelsBeg = pStartCredit
  aDeditBaseHeelsEnd = pFinDebit
  aCreditBaseHeelsEnd = pFinCredit
  aDebitCurrencyHeelsBeg = pStartDebitCrn
  aCreditCurrencyHeelsBeg = pStartCreditCrn
  aDebitCurrencyHeelsEnd = pFinDebitCrn
  aCreditCurrencyHeelsEnd = pFinCreditCrn

  gElmm(aLevel, 0) = 0
  gElmm(aLevel, 1) = 0
End Sub

Sub FormatHeader()
  
  's.PageSetup.LeftHeader = "&""Arial,Bold""" & ds.Range("FirmName")
  
  s.Cells(1, 7).Value = s.Cells(1, 7).Value & " " & ds.Range("FirmName") & " |fffd| " & ds.Range("oneanalyticsname").Value
  
  s.Cells(2, 7).Value = s.Cells(2, 7).Value + " |fffd| " & ds.Range("datefrom").Value & " |fffd||fffd| " & ds.Range("dateto").Value
  
  s.Cells(3, 7).Value = ds.Range("FirmName")
  s.Cells(3, 14).Value = "(" & ds.Range("oneanalyticscode").Value & ") " & ds.Range("oneanalyticsname").Value
  If ds.Range("currency").Value > 0 Then
    s.Cells(2, 7) = s.Cells(2, 7) & "  " & "|fffd||fffd||fffd||fffd||fffd||fffd| " & ds.Range("currencycode").Value & " - " & ds.Range("currencyname").Value
  Else
    s.Range("L:M").EntireColumn.Hidden = True
    s.Range("S:T").EntireColumn.Hidden = True
  End If
  
  s.Range("A:F").EntireColumn.Hidden = True
  
  Dim saldo As Currency, saldoCrn As Currency
  
  s.Cells(5, 7) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & ds.Range("DateFrom") & " |fffd|."
  s.Cells(5, 14) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & ds.Range("DateFrom") & " |fffd|."
  
  saldo = ds.Cells(3, 7) - ds.Cells(3, 8)
  If saldo > 0 Then
    s.Cells(5, 10) = saldo
  Else
    saldo = -saldo
    s.Cells(5, 11) = saldo
  End If
  
  saldoCrn = ds.Cells(3, 11) - ds.Cells(3, 12)
  If saldoCrn > 0 Then
    s.Cells(5, 12) = saldoCrn
  Else
    saldoCrn = -saldoCrn
    s.Cells(5, 13) = saldoCrn
  End If

End Sub

Sub FormatResults(vRow As Long)
  Dim saldo As Currency, saldoCrn As Currency, anlName As String
  
  saldo = ds.Cells(3, 9) - ds.Cells(3, 10)
  If saldo > 0 Then
    s.Cells(vRow + 2, 10) = saldo
    anlName = ds.Range("FirmName")
  Else
    saldo = -saldo
    s.Cells(vRow + 2, 11) = saldo
    anlName = ds.Range("oneanalyticsname")
  End If
  
  saldoCrn = ds.Cells(3, 13) - ds.Cells(3, 14)
  If saldoCrn > 0 Then
    s.Cells(vRow + 2, 12) = saldoCrn
  Else
    saldoCrn = -saldoCrn
    s.Cells(vRow + 2, 13) = saldoCrn
  End If
  
  s.Cells(vRow + 2, 7) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & ds.Range("dateto") & " |fffd|."
  s.Cells(vRow + 2, 14) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & ds.Range("dateto") & " |fffd|."
  s.Cells(vRow + 5, 7) = "|3f3||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " _
                         & ds.Range("dateto") & " |fffd|. |fffd||fffd||fffd||fffd||fffd| " & anlName
  s.Cells(vRow + 6, 7) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & SumToWordGrn(saldo)
End Sub


Sub FormatHeadRow(vRow As Long)
  With Range(s.Cells(vRow, 7), s.Cells(vRow, 20))
      .HorizontalAlignment = xlCenter
      .VerticalAlignment = xlCenter
      .WrapText = True
      .MergeCells = True
      .Font.Size = 12
      .RowHeight = 27
      .Interior.ColorIndex = 35
    End With
End Sub

Sub FormatRow(vRow As Long)
  Dim cell As Range
    
    s.Rows(vRow).ClearFormats
    Range(s.Cells(vRow, 14), s.Cells(vRow, 20)).Font.Bold = True
    Range(s.Cells(vRow, 17), s.Cells(vRow, 20)).NumberFormat = "#,##0.00;[Red]-#,##0.00"
    With Range(s.Cells(vRow, 14), s.Cells(vRow, 16))
      .HorizontalAlignment = xlLeft
      .MergeCells = True
    End With
    
    Range(s.Cells(vRow, 7), s.Cells(vRow, 13)).Font.Bold = True
    Range(s.Cells(vRow, 10), s.Cells(vRow, 13)).NumberFormat = "#,##0.00;[Red]-#,##0.00"
    
    With Range(s.Cells(vRow, 7), s.Cells(vRow, 9))
      .HorizontalAlignment = xlLeft
      .MergeCells = True
    End With
End Sub

Sub FormatTable(vRow As Long)
  
  If vRow <= 6 Then Exit Sub
  With Range(s.Cells(6, 7), s.Cells(vRow, 20))
    .VerticalAlignment = xlCenter
    .Borders(xlInsideVertical).Weight = xlThin
    .Borders(xlInsideHorizontal).Weight = xlThin
    .Borders(xlEdgeLeft).Weight = xlMedium
  End With
  
  With Range(s.Cells(6, 14), s.Cells(vRow, 14))
    .Borders(xlEdgeLeft).Weight = xlMedium
  End With
  
  With Range(s.Cells(6, 21), s.Cells(vRow, 21))
    .Borders(xlEdgeLeft).Weight = xlMedium
  End With
  
  s.Columns("J:K").EntireColumn.AutoFit
  s.Columns("H:I").WrapText = True
 
End Sub

Sub UpdateHeels(aDebet As Currency, aCredit As Currency)
  If aDebet - aCredit > 0 Then
    aDebet = aDebet - aCredit
    aCredit = 0
  Else
    aCredit = aCredit - aDebet
    aDebet = 0
  End If
End Sub

Sub OtherTurnsStr(pRowOtherTurns As Long)
Dim pRow As Long, pDsRow As Long
Set ds = Sheets("Data")
Set s = Sheets("|fffd||fffd||fffd|")
    
If ds.Cells(6, 25).Value > 0 Then
    
    ' Sum other turns ----------------------------------------
    pRow = pRowOtherTurns - 1
    s.Rows(pRow).Insert
    With s.Cells(pRow, 7)
      .Value = "I|fffd||fffd|i |fffd||fffd|i|fffd|i"
      .Font.Bold = True
    End With
    FormatHeadRow pRow
    
    pRow = pRow + 1
    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
    pDsRow = 6
    While ds.Cells(pDsRow, 25).Value <> ""
      pRow = pRow + 1
      s.Rows(pRow).Insert
      s.Cells(pRow, 1).Value = ds.Cells(pDsRow, 25).Value ' ID
      s.Cells(pRow, 7).Value = ds.Cells(pDsRow, 26).Value ' HODate
      s.Cells(pRow, 8).Value = ds.Cells(pDsRow, 27).Value ' HONumber
      s.Cells(pRow, 9).Value = ds.Cells(pDsRow, 28).Value ' HOName
      s.Cells(pRow, 10).Value = ds.Cells(pDsRow, 29).Value ' SumDebet
      s.Cells(pRow, 11).Value = ds.Cells(pDsRow, 30).Value ' SumCredit
      s.Cells(pRow, 12).Value = ds.Cells(pDsRow, 31).Value ' CrnSumDebet
      s.Cells(pRow, 13).Value = ds.Cells(pDsRow, 32).Value ' CrnSumCredit
      Range(s.Cells(pRow, 1), s.Cells(pRow, 13)).Font.Bold = False
      pDsRow = pDsRow + 1
    Wend
  End If
End Sub
Attribute VB_Name = "Module2"
Public Function GetCount(ACount, Sex) As String
Dim X1, Y1, Z1 As Integer
Dim Res As String
Dim Mil, Decs, San, EdinM, EdinH, EdinS
Mil = Array("", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd|p|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd| ", "|fffd|'|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd|'|fffd||fffd||fffd||fffd||fffd| ")
Decs = Array("|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd|''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ")
San = Array("", "", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd|p|fffd||fffd| ", "|fffd|'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd|'|fffd||fffd||fffd||fffd||fffd||fffd| ")
EdinM = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|'|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd|'|fffd||fffd||fffd| ")
EdinH = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|'|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd|'|fffd||fffd||fffd| ")
EdinS = Array("", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd||fffd||fffd| ", "|fffd|'|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd|'|fffd||fffd||fffd| ")

   
   X1 = ACount \ 100
   Y1 = (ACount Mod 100) \ 10
   Z1 = (ACount Mod 100) Mod 10
   Res = Res + Mil(X1)
   If (Y1 * 10 + Z1) > 9 And (Y1 * 10 + Z1) < 20 Then
     Res = Res + Decs(Y1 * 10 + Z1 - 10)
   Else
     Res = Res + San(Y1)
     Select Case Sex
       Case 1
         Res = Res + EdinM(Z1)
       Case 2
         Res = Res + EdinH(Z1)
       Case 3
         Res = Res + EdinS(Z1)
     End Select
   End If
   GetCount = Res
End Function


Public Function SumToWord(ASumma As Currency, Sex) As String
Dim R, U, Fr As Currency
Dim XX, X, Y, Z, T As Integer
Dim Res As String
tril = 1000000000000#
bil = 1000000000#
mill = 1000000#
thou = 1000#
  
  U = ASumma
  If (U >= 1000 * tril) Or (U < 0) Then
    SumToWord = "0.00 "
    Exit Function
  End If
  Fr = (U * 100 - Int(U) * 100) / 100
  If Fr > 0.994 Then
    Fr = 0#
    U = U + 1
  End If
  R = U - Fr
  'XX = R \ tril
  'R = R - tril * Int(R / tril)
  XX = 0
  X = R \ bil
  R = R - bil * Int(R / bil)
  Y = R \ mill
  R = R - mill * Int(R / mill)
  Z = R \ thou
  R = R - thou * Int(R / thou)
  T = Int(R)
  
  If XX > 0 Then
    Res = Res + GetCount(XX, 1)
    If (XX Mod 100) > 9 And (XX Mod 100) < 20 Then
      Res = Res + "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    Else
      Select Case (XX Mod 100) Mod 10
      Case 1
        Res = Res + "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd| "
      Case 2, 3, 4
        Res = Res + "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
      Case Else
        Res = Res + "|fffd|p|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
      End Select
    End If
  End If
  
  If X > 0 Then
    Res = Res + GetCount(X, 1)
    If (X Mod 100) > 9 And (X Mod 100) < 20 Then
      Res = Res + "|fffd||fffd||fffd||fffd|p|fffd||fffd| "
    Else
      Select Case (X Mod 100) Mod 10
      Case 1
        Res = Res + "|fffd||fffd||fffd||fffd|p|fffd| "
      Case 2, 3, 4
        Res = Res + "|fffd||fffd||fffd||fffd|p|fffd||fffd| "
      Case Else
        Res = Res + "|fffd||fffd||fffd||fffd|p|fffd||fffd| "
      End Select
    End If
  End If
  
  If Y > 0 Then
    Res = Res + GetCount(Y, 1)
    If (Y Mod 100) > 9 And (Y Mod 100) < 20 Then
      Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    Else
      Select Case (Y Mod 100) Mod 10
      Case 1
        Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd| "
      Case 2, 3, 4
        Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
      Case Else
        Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
      End Select
    End If
  End If
  
  If Z > 0 Then
    Res = Res + GetCount(Z, 2)
    If (Z Mod 100) > 9 And (Z Mod 100) < 20 Then
      Res = Res + "|fffd||fffd||fffd||fffd||fffd| "
    Else
      Select Case (Z Mod 100) Mod 10
      Case 1
        Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd| "
      Case 2, 3, 4
        Res = Res + "|fffd||fffd||fffd||fffd||fffd||fffd| "
      Case Else
        Res = Res + "|fffd||fffd||fffd||fffd||fffd| "
      End Select
    End If
  End If
  
  If T > 0 Then Res = Res + GetCount(T, Sex)
  
  SumToWord = Res
End Function
 

Public Function SumToWordGrn(ASumma As Currency) As String
  A = SumToWord(ASumma, 2)
  If A <> "" Then Res = A + " |fffd||fffd||fffd|. "
  If A <> "" Then Res = Res + Format(ASumma * 100 - Int(ASumma) * 100, "00  |fffd||fffd||fffd|.")
  If Len(Res) > 0 Then
    Res = UCase(Left(Res, 1)) + Right(Res, Len(Res) - 1)
  End If
  SumToWordGrn = Res
End Function
Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' :-jP
' n+Aj
' :-jP
' :-jP
' n+Aj
' :-jP
' :-jP
' :-jP
' :-jP
' :-jP
' v+Aj
' v+Aj

INQUEST-PP=macro
