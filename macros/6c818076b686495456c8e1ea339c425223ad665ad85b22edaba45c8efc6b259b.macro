Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Control = "butSelect, 8, 0, MSForms, CommandButton"
Attribute VB_Control = "butSpellCheck, 7, 1, MSForms, CommandButton"
Attribute VB_Control = "Agency7, 6, 2, MSForms, ComboBox"
Attribute VB_Control = "Agency6, 5, 3, MSForms, ComboBox"
Attribute VB_Control = "Agency5, 4, 4, MSForms, ComboBox"
Attribute VB_Control = "Agency4, 3, 5, MSForms, ComboBox"
Attribute VB_Control = "Agency3, 2, 6, MSForms, ComboBox"
Attribute VB_Control = "Agency2, 1, 7, MSForms, ComboBox"
Attribute VB_Control = "Agency1, 0, 8, MSForms, ComboBox"
Option Explicit
Dim AgencyArray() As String
Dim agencies As String


Private Sub butSelect_Click()

ufmSelectStudent.Show vbModal

End Sub

Private Sub butSpellCheck_Click()

usbSpellCheck

End Sub

Private Sub Document_Open()

Dim objShape As Shape

' Clear the printing bookmarks and make all hidden shapes visible:
If ThisDocument.Bookmarks.Exists("_CleanPrint_") Then ThisDocument.Bookmarks("_CleanPrint_").Delete
For Each objShape In ActiveDocument.Shapes
    If Not objShape.OLEFormat Is Nothing Then If objShape.OLEFormat.ClassType = "Forms.CommandButton.1" Then If Not objShape.Visible Then objShape.Visible = msoTrue
Next

' Clear the undo buffer and clear the save flag:
ThisDocument.UndoClear
ThisDocument.Saved = True

Set objShape = Nothing


agencies = "Access 2 Education|Action 4 Children|Adult Services|AHP - BCHCT|"
agencies = agencies + "BCH - Acute|Big Community|BSMHT - Adult|BSMHT - Youth|BWH - Maternity|"
agencies = agencies + "CAMHS - Acute|CAMHS - Clinical Youth Support (16+)|CAMHS - Community|CCentre|"
agencies = agencies + "CCN/PC - BCHCT|Child/YP/Family|Children's Social Care|Community Health|Connexions|"
agencies = agencies + "CSN - BCHCT|DCSC|Dental|DV Screening|Early Support Service|"
agencies = agencies + "East - Dyson Gardens |fffd|Family Support Team|East - Fox Hollies Family Support Team|"
agencies = agencies + "East - Golden Hillock Family Support Team|East - Kitts Green Family Support Team|"
agencies = agencies + "East - Park Road Family Support Team|Family Support|fCAF Team|FNP - BCHCT|Further Ed|"
agencies = agencies + "G4S|HEFT - Acute|HEFT - Maternity|Housing|HV - BCHCT|Job Centre Plus|"
agencies = agencies + "North - Circle Family Support Team|North - Featherstone Family Support Team|"
agencies = agencies + "Police|Primary - Ed|ROH - Acute|S/SN - BCHCT|Secondary - Ed|Shelter|SN - BCHCT|"
agencies = agencies + "South - Chinnbrook Family Support Team|South - Doddington Family Support Team|"
agencies = agencies + "South - Merrishaw Family Support Team|South - Reameadow Family Support Team|"
agencies = agencies + "SWBH - Acute|SWBH - Maternity|UHB - Acute|Voluntary Sector|"
agencies = agencies + "West _ Central - Soho Family Support Team|"
agencies = agencies + "West _ Central - St Thomas Family Support Team Manager|"
agencies = agencies + "West _ Central - Willows Family Support Team |Youth|Other"

AgencyArray = Split(agencies, "|")

Call Agency1_Initialize
Call Agency2_Initialize
Call Agency3_Initialize
Call Agency4_Initialize
Call Agency5_Initialize
Call Agency6_Initialize
Call Agency7_Initialize


End Sub

Private Sub Agency1_Initialize()
Agency1.List = AgencyArray
'Agency1.Font.Size = 9
'Agency1.Font.Name = "Arial"
'Agency1.Width = 150
'Agency1.Height = 16
Agency1.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Private Sub Agency2_Initialize()
Agency2.List = AgencyArray
'Agency2.Font.Size = 9
'Agency2.Font.Name = "Arial"
'Agency2.Width = 150
'Agency2.Height = 16
Agency2.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Private Sub Agency3_Initialize()
Agency3.List = AgencyArray
'Agency3.Font.Size = 9
'Agency3.Font.Name = "Arial"
'Agency3.Width = 150
'Agency3.Height = 16
Agency3.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Private Sub Agency4_Initialize()
Agency4.List = AgencyArray
'Agency4.Font.Size = 9
'Agency4.Font.Name = "Arial"
'Agency4.Width = 150
'Agency4.Height = 16
Agency4.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub


Private Sub Agency5_Initialize()
Agency5.List = AgencyArray
'Agency5.Font.Size = 9
'Agency5.Font.Name = "Arial"
'Agency5.Width = 150
'Agency5.Height = 16
Agency5.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Private Sub Agency6_Initialize()
Agency6.List = AgencyArray
'Agency6.Font.Size = 9
'Agency6.Font.Name = "Arial"
'Agency6.Width = 150
'Agency6.Height = 16
Agency6.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Private Sub Agency7_Initialize()
Agency6.List = AgencyArray
'Agency6.Font.Size = 9
'Agency6.Font.Name = "Arial"
'Agency6.Width = 150
'Agency6.Height = 16
Agency6.Text = "Select or Type Agency Name"

lbl_Exit:
  Exit Sub
End Sub

Attribute VB_Name = "modCAF"
Option Explicit

Public Const strDocPassword As String = "pancakes"

Public Function ufnInsertDetails() As Boolean

On Error GoTo ErrHand

Dim Lex As Scripting.Dictionary
Dim ff As Word.FormField
Dim strToday As String, strKey As String, booProt As Boolean

If ThisDocument.ProtectionType = wdAllowOnlyFormFields Then ThisDocument.Unprotect strDocPassword: booProt = True
ThisDocument.Protect wdAllowOnlyFormFields, False, strDocPassword
If Not booProt Then ThisDocument.Unprotect strDocPassword

strToday = Date
If ufmSelectStudent.strDataSource = "Facility" Then
    Set Lex = ufnPopulateLexSQL()
ElseIf ufmSelectStudent.strDataSource = "Excel" Then
    Set Lex = ufnPopulateLexXCL()
Else
    ExclBox "No Data Source selected.", "No Data Source"
    GoTo ExitHere
End If

'Form Field Details

For Each ff In ThisDocument.FormFields
    If Len(ff.Name) > 3 Then
        strKey = Right$(ff.Name, Len(ff.Name) - 3)
        Do While IsNumeric(Right$(strKey, 1))
            strKey = Left$(strKey, Len(strKey) - 1)
        Loop
        If ff.Type = wdFieldFormTextInput Then
            If Lex.Exists(strKey) Then ff.Result = Lex(strKey)
            If strKey = "SchName" Then ff.Result = ufmSelectStudent.strSchName
            If strKey = "SchAddr" Then ff.Result = ufmSelectStudent.strSchAddr
            If strKey = "SchEmail" Then ff.Result = ufmSelectStudent.strSchEmail
            If strKey = "SchPhone" Then ff.Result = ufmSelectStudent.strSchPhone
            If strKey = "Date" Then ff.Result = strToday
        End If
        If ff.Type = wdFieldFormDropDown Then
            Dim le As ListEntry, li As Integer
            li = -1
            For Each le In ff.DropDown.ListEntries
                If le.Name = Lex(strKey) Then li = le.Index
            Next le
            If li < 0 Then
                ff.DropDown.ListEntries.Add Lex(strKey)
                li = ff.DropDown.ListEntries.Count
            End If
            ff.DropDown.Value = li
        End If
        If ff.Type = wdFieldFormCheckBox Then
            If Lex.Exists(Left$(strKey, Len(strKey) - 1)) Then ff.CheckBox.Value = (Right$(strKey, 1) = Lex(Left$(strKey, Len(strKey) - 1)))
        End If
    End If
Next ff

ThisDocument.FormFields(1).Select
Selection.Collapse wdCollapseStart

ThisDocument.UndoClear

ufnInsertDetails = True

ExitHere:
Set Lex = Nothing
Set ff = Nothing
Exit Function

ErrHand:
ufnInsertDetails = False
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Function

Private Function ufnPopulateLexSQL() As Scripting.Dictionary

On Error GoTo ErrHand

Dim rstX As New ADODB.Recordset
Dim fldX As ADODB.Field
Dim Lex As New Scripting.Dictionary

If ufmSelectStudent.conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere

Set rstX.ActiveConnection = ufmSelectStudent.conSQL

'Family Details
rstX.Source = "SELECT TOP 1 p.Surname [FamName], p.HomePhone [FamPhone], p.HomeAddress [FamAddr], p.HomePostCode [FamPCode] FROM STUDENTS s INNER JOIN NSTUPERSONAL p ON s.SetId = p.SetId AND s.StudentId = p.StudentId WHERE s.SetId = '" & ufmSelectStudent.strSetId & "' AND s.StudentId = '" & ufmSelectStudent.strStudentId & "'"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, ufnStripReturns(fldX.Value)
    Next fldX
End If
rstX.Close

'Parent Details

'Mothers details
rstX.Source = "SELECT TOP 1 c.Forename [MForename], c.Surname [MSurname], c.Forename + ' ' + c.Surname [MName], r.ParentalResp [MParental] FROM NSTURELCONTACTS r INNER JOIN NSCONTACTS c ON r.ContactId = c.ContactId AND r.SetId = c.SetId WHERE (r.ConRelat IN ('PAM', 'STM', 'FOM') OR r.ConRelat + c.ConSex IN ('CARF', 'FOSF', 'GRPF', 'GRDF', 'FAMF', 'RELF', 'STPF')) AND r.HAddrLink ='Y' AND r.SetId = '" & ufmSelectStudent.strSetId & "' AND r.StudentId = '" & ufmSelectStudent.strStudentId & "' ORDER BY r.ConPriority"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, fldX.Value
    Next fldX
End If
rstX.Close

'Fathers Details
rstX.Source = "SELECT TOP 1 c.Forename [FForename], c.Surname [FSurname], c.Forename + ' ' + c.Surname [FName], r.ParentalResp [FParental] FROM NSTURELCONTACTS r INNER JOIN NSCONTACTS c ON r.ContactId = c.ContactId AND r.SetId = c.SetId WHERE (r.ConRelat IN ('PAF', 'STF', 'FOF') OR r.ConRelat + c.ConSex IN ('CARM', 'FOSM', 'GRPM', 'GRDM', 'FAMM', 'RELM', 'STPM')) AND r.HAddrLink ='Y' AND r.SetId = '" & ufmSelectStudent.strSetId & "' AND r.StudentId = '" & ufmSelectStudent.strStudentId & "' ORDER BY r.ConPriority"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, fldX.Value
    Next fldX
End If
rstX.Close

'Non Resident Parent
rstX.Source = "SELECT TOP 1 c.Forename + ' ' + c.Surname [NRPName], c.HomeAddress + ' ' + c.HomePostCode [NRPAddr], r.ParentalResp [NRPParental] FROM NSTURELCONTACTS r INNER JOIN NSCONTACTS c ON r.ContactId = c.ContactId AND r.SetId = c.SetId WHERE r.ConRelat IN ('PAM', 'PAF', 'STM', 'STF', 'STP') AND r.Haddrlink = 'N' AND r.SetId = '" & ufmSelectStudent.strSetId & "' AND r.StudentId = '" & ufmSelectStudent.strStudentId & "' ORDER BY r.ParentalResp DESC, r.ConPriority"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, ufnStripReturns(fldX.Value)
    Next fldX
End If
rstX.Close

'Student Details
Dim i As Long
Dim o As String

rstX.Source = "SELECT p.Forename + ' ' + p.Surname [Name], CONVERT(VARCHAR, CAST(p.DateOfBirth AS DATETIME), 103) [DOB],  c.Name [Lang], e.Name [Eth], LEFT(P.StuSex, 1) [Gen], CASE WHEN n.StudentId IS NULL THEN 'N' ELSE 'Y' END [Dis] " _
            & "FROM STUDENTS s INNER JOIN (SELECT '" & ufmSelectStudent.strStudentId & "' StudentId UNION ALL SELECT StudentId FROM (SELECT SetId, StudentId2 SiblingId, StudentId1 StudentId FROM NSTUSIBLINGS UNION SELECT SetId, StudentId1 SiblingId, StudentId2 StudentId FROM NSTUSIBLINGS) sibs WHERE SetId = '" & ufmSelectStudent.strSetId & "' AND SiblingId = '" & ufmSelectStudent.strStudentId & "') stus ON s.Setid = '" & ufmSelectStudent.strSetId & "' AND s.StudentId = stus.StudentId INNER JOIN " _
            & "NSTUPERSONAL p ON s.SetId = p.SetId AND s.StudentId = p.StudentId INNER JOIN CLASSIFICATIONS c ON c.SetId = p.SetId AND c.ClassId = p.Cat12 AND c.Type = 'STU_CAT12' INNER JOIN CLASSIFICATIONS e ON e.SetId = p.SetId AND e.ClassId = p.Cat9 AND e.Type = 'STU_CAT9' LEFT JOIN NSTURNEEDS n ON p.SetId = n.SetId AND p.StudentId = n.StudentId AND n.Need = 'PD'"
rstX.Open
i = 1

Do While Not rstX.EOF
    If i > 7 Then Exit Do
    o = "Stu" & Trim$(Str(i))
    For Each fldX In rstX.Fields
        Lex.Add o & fldX.Name, fldX.Value
    Next fldX
    Lex.Add o & "Sch", ufmSelectStudent.strSchName
    rstX.MoveNext
    i = i + 1
Loop
rstX.Close

'FSM Eligable

rstX.Source = "SELECT CASE WHEN (SELECT StudentId FROM UKSTUFSMHISTSTATS WHERE StudentId = s.StudentId AND CASE WHEN DATEDIFF(d, FSMStartDate, GETDATE()) >= 0 AND (FSMEndDate IS NULL OR DATEDIFF(d, FSMEndDate, GETDATE()) <= 0) THEN 'Y' ELSE NULL END IS NOT NULL) IS NULL THEN 'N' ELSE 'Y' END [FamFSM] FROM STUDENTS s WHERE SetId = '" & ufmSelectStudent.strSetId & "' AND StudentId = '" & ufmSelectStudent.strStudentId & "'"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, fldX.Value
    Next fldX
End If
rstX.Close

'Doctors Details
rstX.Source = "SELECT TOP 1 [DocName], DocAddress [DocAddr] FROM NSTUPERSONAL WHERE SetId = '" & ufmSelectStudent.strSetId & "' AND StudentId = '" & ufmSelectStudent.strStudentId & "'"
rstX.Open
If Not rstX.EOF Then
    For Each fldX In rstX.Fields
        Lex.Add fldX.Name, ufnStripReturns(fldX.Value)
    Next fldX
End If
rstX.Close

'Participation

'Attendance Summary
rstX.Source = "SELECT CASE WHEN a.Attr = -2 OR (c.StatAbs = 'N' AND c.Code <> 'L') THEN 'P' WHEN c.Code = 'L' THEN 'L' ELSE 'A' END Attr, COUNT(*) Num FROM (SELECT SetId, StudentId, CAST(CalYear AS VARCHAR) CalYear, RIGHT('0' + CAST(CalMonth AS VARCHAR), 2) CalMonth, RIGHT('0' + RIGHT(CalDay, LEN(CalDay) - 3), 2) CalDay, RollCallId, Attr FROM NSTUATTDATA UNPIVOT (Attr FOR CalDay IN (Day1, Day2, Day3, Day4, Day5, Day6, Day7, Day8, Day9, Day10, Day11, Day12, Day13, Day14, Day15, Day16, Day17, Day18, Day19, Day20, Day21, Day22, Day23, Day24, Day25, Day26, Day27, Day28, Day29, Day30, Day31)) StuAttr WHERE Attr IS NOT NULL AND Attr <> -1 AND Attr <> -4) a LEFT JOIN ATTCATAGORY c ON a.SetId = c.SetId AND a.Attr = c.CatMapValue AND c.DType IN ('ABS', 'LATE') " & _
              "WHERE a.SetId = '" & ufmSelectStudent.strSetId & "' AND a.StudentId = '" & ufmSelectStudent.strStudentId & "' AND CAST(a.CalYear + '-' + a.CalMonth + '-' + a.CalDay AS DATETIME) IN (SELECT l.CDate FROM ATTCALENDAR l INNER JOIN ATTCATAGORY t ON l.SetId = t.SetId AND l.CAttr = t.Code AND t.DType = 'CAL' WHERE DATEDIFF(d, l.CDate, CAST(CAST(CASE WHEN MONTH(GETDATE()) > 8 THEN YEAR(GETDATE()) ELSE YEAR(GETDATE()) - 1 END AS VARCHAR) + '-09-01' AS DATETIME)) <= 0 AND DATEDIFF(d, l.CDate, GETDATE()) >= 0 AND t.Expl = 'Y') GROUP BY a.SetId, a.StudentId, CASE WHEN a.Attr = -2 OR (c.StatAbs = 'N' AND c.Code <> 'L') THEN 'P' WHEN c.Code = 'L' THEN 'L' ELSE 'A' END ORDER BY a.SetId, a.StudentId, CASE WHEN a.Attr = -2 OR (c.StatAbs = 'N' AND c.Code <> 'L') THEN 'P' WHEN c.Code = 'L' THEN 'L' ELSE 'A' END"
rstX.Open

Dim strPres As String, strLate As String, strAbs As String, strAttend As String
Dim curPoss As Currency, curAtt As Currency

If Not rstX.EOF Then
    strAttend = "Attendance Summary:" & vbVerticalTab
    While Not rstX.EOF
        If rstX.Fields("Attr") = "P" Then strPres = rstX.Fields("Num")
        If rstX.Fields("Attr") = "L" Then strLate = rstX.Fields("Num")
        If rstX.Fields("Attr") = "A" Then strAbs = rstX.Fields("Num")
        rstX.MoveNext
    Wend
    If Len(strPres) = 0 Then strPres = "0"
    If Len(strLate) = 0 Then strLate = "0"
    If Len(strAbs) = 0 Then strAbs = "0"
    curPoss = CCur(CInt(strAbs) + CInt(strPres) + CInt(strLate))
    curAtt = CCur(CInt(strPres) + CInt(strLate))
    
    strAttend = strAttend & "Present: " & strPres & ", Late: " & strLate & ", Absent: " & strAbs & ", Attendance: " & Round(CCur(curAtt * 100) / curPoss, 1) & "%"
End If
rstX.Close

' Exclusions
Dim strExclusions As String
rstX.Source = "SELECT TOP 4 ExclType + ': ' + CONVERT(VARCHAR, CAST(StartDate AS DATETIME), 103) + CASE WHEN EndDate > '' THEN ' - ' + CONVERT(VARCHAR, CAST(EndDate AS DATETIME), 103) ELSE '' END + ' ' + ExclReas Exclusion FROM NSTUEXCLUSIONS WHERE StudentId = '" & ufmSelectStudent.strStudentId & "' ORDER BY StartDate DESC"
rstX.Open

If Not rstX.EOF Then
    strExclusions = "Exclusions:"
    While Not rstX.EOF
        strExclusions = strExclusions & vbVerticalTab & rstX.Fields("Exclusion")
        rstX.MoveNext
    Wend
End If
rstX.Close

Lex.Add "Participation", Left$(IIf(Len(strAttend) > 0 And Len(strExclusions) > 0, strAttend & Chr(11) & strExclusions, strAttend & strExclusions), 255)

'Assessment
rstX.Source = "SELECT CASE t.Subject WHEN 'ENG' THEN 'English' WHEN 'Mat' THEN 'Maths' WHEN 'Sci' THEN 'Science' ELSE t.Subject END + ': ' + CAST(Result AS VARCHAR) [Results], CAST(r.YearTaken AS VARCHAR) [YearTaken] FROM STUSATRESULTS r INNER JOIN SATTESTS t ON r.TestId = t.TestId WHERE r.SetId = '" & ufmSelectStudent.strSetId & "' AND r.StudentId = '" & ufmSelectStudent.strStudentId & "' AND t.Component = 'SUB' AND t.Method = 'TA' ORDER BY r.YearTaken DESC, t.Subject"
rstX.Open
Dim strYear As String, strAssessments As String
If Not rstX.EOF Then
    strAssessments = "Teacher Assessments:"
    While Not rstX.EOF
        If rstX.Fields("YearTaken") <> strYear Then
            strYear = rstX.Fields("YearTaken")
            strAssessments = Left$(strAssessments, IIf(InStrRev(strAssessments, ", ") > 0, InStrRev(strAssessments, ", ") - 1, Len(strAssessments))) & vbVerticalTab & strYear & " - "
        End If
        strAssessments = strAssessments & rstX.Fields("Results") & ", "
        rstX.MoveNext
    Wend
    strAssessments = Left$(strAssessments, IIf(InStrRev(strAssessments, ", ") > 0, InStrRev(strAssessments, ", ") - 1, Len(strAssessments)))
End If
rstX.Close

Lex.Add "Assessment", Left$(IIf(strAssessments > "Teacher Assessments:", strAssessments, ""), 255)

Set ufnPopulateLexSQL = Lex

ExitHere:
Set rstX = Nothing
Set fldX = Nothing
Set Lex = Nothing
Exit Function

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Function

Private Function ufnPopulateLexXCL() As Scripting.Dictionary

On Error GoTo ErrHand

Dim xclApp As New Excel.Application
Dim xclSource As Excel.Workbook
Dim xclSheet As Excel.Worksheet
Dim Lex As New Scripting.Dictionary

If Len(ufmSelectStudent.strExcelFile) = 0 Then GoTo ExitHere

Set xclSource = xclApp.Workbooks.Open(ufmSelectStudent.strExcelFile)
Set xclSheet = xclSource.Sheets(1)

Dim i As Long

i = 1
Do While Len(xclSheet.Cells(1, i).Value) > 0
    If Not Lex.Exists(xclSheet.Cells(1, i).Value) Then Lex.Add xclSheet.Cells(1, i).Value, IIf(xclSheet.Cells(2, i).Value > " ", xclSheet.Cells(2, i).Value, "")
    i = i + 1
Loop

Set ufnPopulateLexXCL = Lex

ExitHere:
xclApp.Quit
Set xclApp = Nothing
Set xclSource = Nothing
Set xclSheet = Nothing
Set Lex = Nothing
Exit Function

ErrHand:
Call usbGenError(Err)
Resume ExitHere

End Function

Public Function ufnStripReturns(ByVal strInput As String) As String

Dim i As Long
Dim s As String
Dim b As Boolean

strInput = StrConv(strInput, vbUnicode)

For i = 1 To Len(strInput)
    s = Mid$(strInput, i, 1)
    If s = vbCr Or s = vbLf Then
        If Not b Then ufnStripReturns = ufnStripReturns + ", "
        b = True
    Else
        ufnStripReturns = ufnStripReturns + s
        b = False
    End If
    i = i + 1
Next

End Function

Public Sub usbConnLost()

ExclBox "Connection to the database has been lost, please check settings", "No connection to database"

cmbSetId.Clear ' Clearing SetIds will also reset all other controls.
lblSetId.Enabled = False
cmbSetId.Enabled = False
frmFilters.Enabled = False
mpgPages.Value = 1
txtServerName.SetFocus

End Sub

Public Sub usbGenError(errError As ErrObject)

MsgBox "An error (" & errError.Number & ") has occurred" & vbCrLf & vbCrLf & "Description:" & vbCrLf & errError.Description, vbCritical, "An error has occurred"

Unload ufmSelectStudent

End Sub

Public Sub InfoBox(ByVal Prompt As String, Optional ByVal Title As String)

If Assistant.Visible Then
    With Assistant.NewBalloon
        .Animation = msoAnimationGetAttentionMajor
        .Button = msoButtonSetNone
        .Mode = msoModeAutoDown
        If Not IsMissing(Title) Then .Heading = Title
        .Text = Prompt
        .Show
    End With
Else
    If IsMissing(Title) Then
        MsgBox Prompt, vbInformation
    Else
        MsgBox Prompt, vbInformation, Title
    End If
End If

End Sub

Public Sub ExclBox(ByVal Prompt As String, Optional ByVal Title As String)

If IsMissing(Title) Then
    MsgBox Prompt, vbExclamation
Else
    MsgBox Prompt, vbExclamation, Title
End If

End Sub

Private Sub usbCleanPrintHide()

Dim objShape As Shape
Dim objInline As InlineShape

If ThisDocument.Bookmarks.Exists("_CleanPrint_") Then ThisDocument.Bookmarks("_CleanPrint_").Delete
ThisDocument.Bookmarks.Add "_CleanPrint_"
For Each objShape In ThisDocument.Shapes
    If Not objShape.OLEFormat Is Nothing Then If objShape.OLEFormat.ClassType = "Forms.CommandButton.1" Then objShape.Visible = msoFalse
Next
For Each objInline In ThisDocument.InlineShapes
    If Not objInline.OLEFormat Is Nothing Then If objInline.OLEFormat.ClassType = "Forms.CommandButton.1" Then objInline.Delete
Next

Set objShape = Nothing
Set objInline = Nothing

End Sub

Private Sub usbCleanPrintUnhide()

Do While ThisDocument.Bookmarks.Exists("_CleanPrint_")
    If Not ThisDocument.Undo Then Exit Do
Loop

End Sub

Public Sub usbSpellCheck()

On Error GoTo ErrHand

Dim rngOriginal As Word.Range, rngTemp As Word.Range, fldForm As Word.FormField
Dim lngFFCount As Long, lngPos As Long, booProt As Boolean, strCorrection As String

Set rngOriginal = Selection.Range
System.Cursor = wdCursorWait

If ThisDocument.ProtectionType = wdAllowOnlyFormFields Then ThisDocument.Unprotect strDocPassword: booProt = True

'Check each section for its protection property -
'which you can get even after unprotecting the document.
'If the section was protected, call a subroutine to spellcheck the formfields.
'if it wasn't, spellcheck the section
StatusBar = "Spellchecking document ..."

'check only the text formfields,
'don't check listboxes and checkboxes - this speeds up the code
Application.ScreenUpdating = False
For Each fldForm In ThisDocument.FormFields
    'Check to see if the field is a text formfield
    If fldForm.Type = wdFieldFormTextInput Then
        'Check if the field is a 'real' text field (no date, formula etc);
        'and that it is enabled for text input
        If fldForm.TextInput.Type = wdRegularText And fldForm.Enabled Then
            fldForm.Range.NoProofing = False
            'fldForm.Range.SpellingChecked = False

            'Change the language constant in the following line if necessary;
            'when you type the = sign, a list of all supported language
            'constants will appear, and you can choose one from the list.
            fldForm.Range.LanguageID = wdEnglishUK
            'Or whichever language is appropriate for you

            'If the current form field contains errors, spellcheck the text in it
            If fldForm.Range.SpellingErrors.Count > 0 Then
                'Set a range to the formfield's range in case the user
                'accidentally destroys the formfield by overtyping its entire
                'contents
                Set rngTemp = fldForm.Range
                lngFFCount = ThisDocument.FormFields.Count
                Application.ScreenUpdating = True

                fldForm.Range.CheckSpelling

                If IsObjectValid(fldForm) Then
                    If fldForm.Range.SpellingErrors.Count > 0 Then GoTo ExitHere
                    'User pressed Cancel button. (Pressing Ignore reduces the count, pressing Cancel doesn't)
                Else
                    'If formfield was destroyed because user overtyped its entire contents
                    strCorrection = rngTemp.Text
                    If Len(strCorrection) = 0 Then
                        strCorrection = rngTemp.Words(1).Text
                    End If

                    'Formfields should really NEVER be preceded by a tab;
                    'design your forms so that each formfield is in its own
                    'table cell (removing borders as necessary). However, to
                    'cater for any legacy forms you may have, the following
                    'loop works around the possibility that it might be
                    'preceded by a tab
                    lngPos = InStr(strCorrection, vbTab)
                    Do While lngPos > 0
                        strCorrection = Mid$(strCorrection, lngPos + 1)
                        lngPos = InStr(strCorrection, vbTab)
                    Loop

                    'If formfield was destroyed when the user corrected the
                    'spelling, reinstate it, and put the user's correction into its
                    'result. Note that although Undo reinstates the Formfield
                    'itself, if the Formfield is preceded by a tab, It doesn't
                    'reinstate the FmFld object, hence the need to do a count
                    '(although, as previously stated, in a well-designed form,
                    'formfields should never be preceded by a tab, as it's
                    'better use table cells (removing borders as necessary).
                    Do While Not ThisDocument.FormFields.Count = lngFFCount
                        ThisDocument.Undo
                    Loop

                    'Also due to a Word bug, if the formfield is preceded by a
                    'tab, the text within the formfield may now be selected
                    'without the formfield itself being selected!
                    'Hence the following convoluted workaround
                    If Selection.FormFields.Count = 0 Then
                        Selection.MoveRight wdCharacter
                        Selection.MoveLeft wdCharacter, , True
                    End If
                    If Not IsObjectValid(fldForm) Then
                        Set fldForm = Selection.FormFields(1)
                    End If
                    fldForm.Result = strCorrection
                End If
                Application.ScreenUpdating = False
            End If
        End If
    End If
Next fldForm

'Re-protect the document
If booProt Then ThisDocument.Protect wdAllowOnlyFormFields, True, strDocPassword
rngOriginal.Select
Application.ScreenUpdating = True
Application.ScreenRefresh
If ThisDocument.Range.SpellingErrors.Count = 0 Then
    If Options.CheckGrammarWithSpelling Then
        InfoBox "The spelling and grammar check is complete."
    Else
        InfoBox "The spelling check is complete"
    End If
End If

'Release variables from memory
ExitHere:
System.Cursor = wdCursorNormal
strCorrection = vbNullString
Set rngOriginal = Nothing
Set rngTemp = Nothing
Set fldForm = Nothing

Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Sub

'################################################################################'
'#                                                                              #'
'# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #'
'# + Override Macros                                                          + #'
'# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #'
'#                                                                              #'
'################################################################################'

Sub FilePrint()
' FilePrint Macro
' Prints the active document

usbCleanPrintHide
With Dialogs(wdDialogFilePrint)
    .Range = wdPrintFromTo
    .From = 1
    .Show
End With
usbCleanPrintUnhide

End Sub

Sub FilePrintDefault()
' FilePrintDefault Macro
' Prints the active document using the current defaults

usbCleanPrintHide
ActiveDocument.PrintOut Range:=wdPrintRangeOfPages, Pages:="1-"
usbCleanPrintUnhide

End Sub

Sub FilePrintPreview()
' FilePrintPreview Macro
' Displays full pages as they will be printed

usbCleanPrintHide
ActiveDocument.PrintPreview

End Sub

Sub ClosePreview()
' ClosePreview Macro
' Exits print preview

ActiveDocument.ClosePrintPreview
usbCleanPrintUnhide

End Sub


Attribute VB_Name = "ufmSelectStudent"
Attribute VB_Base = "0{5C89B9F1-C9D2-4F26-BF05-29EEADEB6A77}{BF490D9F-E864-4496-8362-4BECBAE6B008}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public conSQL As New ADODB.Connection
Public strDataSource As String
Public strServerName As String
Public strDatabase As String
Public strExcelFile As String
Public strSchName As String
Public strSchPhone As String
Public strSchEmail As String
Public strSchAddr As String
Public strSetId As String
Public strStudentId As String
Private booCAFInitialise As Boolean
Private booDataSourceChange As Boolean

Private Sub butCancel_Click()

Unload Me

End Sub

Private Sub butConnect_Click()

Call ufnSQLConnect(txtServerName.Value, txtDatabase.Value)

End Sub

Private Sub butFileSelect_Click()

On Error GoTo ErrHand

Dim objFSO As New FileSystemObject
Dim vrtFileName As Variant, strPath As String, strFileName As String, strStudentName As String

If InStr(strExcelFile, "\") > 0 Then strPath = Left$(strExcelFile, InStrRev(strExcelFile, "\"))
If Not objFSO.FolderExists(strPath) Then strPath = ThisDocument.Path

Do Until Len(strStudentName) > 0
    If Len(strFileName) > 0 Then ExclBox "The selected file does not contain CAF formatted data." & vbCrLf & vbCrLf & "Please try again.", "Incorrect File Selected"
    With Application.FileDialog(msoFileDialogOpen)
        .Title = "Select the Excel File"
        .AllowMultiSelect = False
        .ButtonName = "&Open"
        .InitialFileName = strPath
        .Filters.Clear
        .Filters.Add "Excel files", "*.xls; *.xlsx"
        .Filters.Add "All files (*.*)", "*.*"
        .FilterIndex = 1
        If .Show <> -1 Then GoTo ExitHere
        For Each vrtFileName In .SelectedItems
            strFileName = CStr(vrtFileName)
        Next vrtFileName
    End With
    strStudentName = ufnGetStudentFromExcel(strFileName)
Loop

If Len(strFileName) > 0 Then
    strExcelFile = strFileName
    txtFileName.Value = strFileName
    txtStudentName.Value = strStudentName
    Call usbWriteIni(False)
End If

ExitHere:
Set objFSO = Nothing
butInsert.Enabled = Len(strExcelFile) > 0
Exit Sub

ErrHand:
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub butFilter_Click()

Call usbUpdateStudents

End Sub

Private Sub butInsert_Click()

Call usbDoInsert

End Sub

Private Sub butUpdate_Click()

If Len(txtSchName.Value) = 0 Or Len(txtSchPhone.Value) = 0 Or Len(txtSchEmail.Value) = 0 Or Len(txtSchAddr.Value) = 0 Then
    ExclBox "All fields are required and must be filled in." & vbCrLf & vbCrLf & "Please complete the missing fields.", "Missing Information"
    If Len(txtSchName.Value) = 0 Then txtSchName.SetFocus: Exit Sub
    If Len(txtSchPhone.Value) = 0 Then txtSchPhone.SetFocus: Exit Sub
    If Len(txtSchEmail.Value) = 0 Then txtSchEmail.SetFocus: Exit Sub
    If Len(txtSchAddr.Value) = 0 Then txtSchAddr.SetFocus: Exit Sub
End If

strSchName = txtSchName.Value
strSchPhone = txtSchPhone.Value
strSchEmail = txtSchEmail.Value
strSchAddr = Replace(txtSchAddr.Value, vbCrLf, ", ")
Do While InStr(strSchAddr, ", , ") > 0
    strSchAddr = Replace$(strSchAddr, ", , ", ", ")
Loop
If Len(strSchAddr) > 2 Then strSchAddr = IIf(Right$(strSchAddr, 2) = ", ", Left(strSchAddr, Len(strSchAddr) - 2), strSchAddr)

usbWriteIni True
InfoBox "Details successfully updated.", "Update successful"
If strDataSource = "Facility" Then
    If conSQL.State > adStateClosed Then
        mpgPages.Value = 0
        If lstStudents.Enabled Then If lstStudents.ListCount > 0 Then lstStudents.SetFocus: Exit Sub
        cmbSetId.SetFocus
    Else
        txtServerName.SetFocus
    End If
ElseIf strDataSource = "Excel" Then
    butFileSelect.SetFocus
Else
    cmbDataSource.SetFocus
End If

End Sub

Private Sub cbxLeavers_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

If KeyAscii = 13 Then If butFilter.Enabled Then butFilter.SetFocus

End Sub

Private Sub cmbDataSource_Change()

booDataSourceChange = True

If cmbDataSource.Value = "Please select:" Then Exit Sub
If cmbDataSource.List(0) = "Please select:" Then cmbDataSource.RemoveItem 0
If cmbDataSource.Value = "Facility Database" Then
    strDataSource = "Facility"
    frmFileSelect.Visible = False
    frmConnection.Visible = True
    butInsert.Enabled = False
    Call ufnSQLConnect(strServerName, strDatabase)
ElseIf cmbDataSource.Value = "Excel File (SIMS/Progresso)" Then
    strDataSource = "Excel"
    cmbSetId.Clear ' Clearing SetIds will also reset all other controls.
    lblSetId.Enabled = False
    cmbSetId.Enabled = False
    frmFilters.Enabled = False
    mpgPages.Value = 1
    mpgPages.Pages("pagStudent").Enabled = False
    frmConnection.Visible = False
    frmFileSelect.Visible = True
    If Len(strExcelFile) > 0 Then txtStudentName.Value = ufnGetStudentFromExcel(strExcelFile)
    If Len(txtStudentName.Value) = 0 Then
        strExcelFile = ""
        txtFileName.Value = ""
    End If
    If Len(strExcelFile) > 0 Then butInsert.Enabled = True
    If conSQL.State > adStateClosed Then conSQL.Close
End If

booDataSourceChange = False

End Sub

Private Sub cmbSetId_Change()

If Len(cmbSetId.Value) > 0 And cmbSetId.Value <> "Please select:" Then
    Call usbUpdateYears
    lblYear.Enabled = True
    cmbYear.Enabled = True
    lblClass.Enabled = True
    cmbClass.Enabled = True
    cbxLeavers.Enabled = True
    butFilter.Enabled = True
    If cmbSetId.List(0) = "Please select:" Then cmbSetId.RemoveItem 0
Else
    cmbYear.Clear
    lblYear.Enabled = False
    cmbYear.Enabled = False
    cmbClass.Clear
    lblClass.Enabled = False
    cmbClass.Enabled = False
    cbxLeavers.Value = False
    cbxLeavers.Enabled = False
    butFilter.Enabled = False
End If
lstStudents.Clear
lstStudents.Enabled = False
lblStuName.Enabled = False
lblStuId.Enabled = False
butInsert.Enabled = False

End Sub

Private Sub cmbYear_Change()

Call usbUpdateClasses

End Sub

Private Sub lstStudents_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

Call usbDoInsert

End Sub

Private Sub lstStudents_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

If KeyAscii = 13 Then Call usbDoInsert

End Sub

Private Sub mpgPages_Change()

If mpgPages.Pages(mpgPages.Value).Name = "pagSettings" Then
    If strDataSource = "Excel" And Len(strExcelFile) > 0 Then butInsert.Enabled = True: Exit Sub
Else
    If lstStudents.ListCount > 0 Then butInsert.Enabled = True: Exit Sub
End If
butInsert.Enabled = False

End Sub

Private Sub UserForm_Initialize()

booCAFInitialise = True

cmbDataSource.AddItem "Please select:"
cmbDataSource.AddItem "Facility Database"
cmbDataSource.AddItem "Excel File (SIMS/Progresso)"

Call usbReadIni
txtServerName.Value = strServerName
txtDatabase.Value = strDatabase
txtFileName = strExcelFile
txtSchName.Value = strSchName
txtSchPhone.Value = strSchPhone
txtSchEmail = strSchEmail
txtSchAddr.Value = strSchAddr
If strDataSource = "Facility" Then
    cmbDataSource.Value = "Facility Database"
ElseIf strDataSource = "Excel" Then
    cmbDataSource.Value = "Excel File (SIMS/Progresso)"
End If

booCAFInitialise = False

End Sub

Private Sub UserForm_Terminate()

If conSQL.State > adStateClosed Then conSQL.Close
Set conSQL = Nothing

End Sub

'################################################################################'
'#                                                                              #'
'# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #'
'# + Private functions                                                        + #'
'# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #'
'#                                                                              #'
'################################################################################'

Private Function ufnSQLConnect(ByVal prmServerName As String, ByVal prmDatabase As String) As Boolean

On Error GoTo ErrHand

If Len(prmServerName) = 0 Or Len(prmDatabase) = 0 Then Err.Raise vbObjectError + 1

If conSQL.State > adStateClosed Then conSQL.Close
With conSQL
    .ConnectionString = "ODBC;Decription=FacilityCAF;DRIVER=SQL Server;SERVER=" & prmServerName & ";APP=FacilityCAF;DATABASE=" & prmDatabase & ";Trusted_Connection=Yes"
    .Open
    If .Execute("SELECT COUNT(*) FROM STUDENTS") Is Nothing Then GoTo ErrHand
End With
Call usbUpdateSetIds

strServerName = prmServerName
strDatabase = prmDatabase
ufnSQLConnect = True
mpgPages.Pages("pagStudent").Enabled = True
frmFilters.Enabled = True
lblSetId.Enabled = True
cmbSetId.Enabled = True
If Not booCAFInitialise And Not booDataSourceChange Then Call usbWriteIni(False)

If Len(strSchName) > 0 And Len(strSchPhone) > 0 And Len(strSchEmail) > 0 And Len(strSchAddr) > 0 Then
    If booDataSourceChange And Not booCAFInitialise Then txtServerName.SetFocus: GoTo ExitHere
    If Not booCAFInitialise Then InfoBox "Connection successful", "Connection successful"
    mpgPages.Value = 0
    cmbSetId.SetFocus
Else
    If Not booCAFInitialise And Not booDataSourceChange Then InfoBox "Connection successful, please also update your school details before proceeding", "Connection successful"
    mpgPages.Value = 1
    If Len(strSchName) = 0 Then txtSchName.SetFocus: GoTo ExitHere
    If Len(strSchPhone) = 0 Then txtSchPhone.SetFocus: GoTo ExitHere
    If Len(strSchEmail) = 0 Then txtSchEmail.SetFocus: GoTo ExitHere
    If Len(strSchAddr) = 0 Then txtSchAddr.SetFocus: GoTo ExitHere
End If

ExitHere:
On Error Resume Next
Err.Clear
Exit Function

ErrHand:
If conSQL.State > adStateClosed Then conSQL.Close
strServerName = ""
strDatabase = ""
ufnSQLConnect = False
If Not booCAFInitialise And Not booDataSourceChange Then ExclBox "Could not connect to the specified database" & vbCrLf & "Please check the server name and database are correct.", "Connection failed..."
cmbSetId.Clear ' Clearing SetIds will also reset all other controls.
lblSetId.Enabled = False
cmbSetId.Enabled = False
frmFilters.Enabled = False
mpgPages.Value = 1
mpgPages.Pages("pagStudent").Enabled = False
txtServerName.SetFocus
Resume ExitHere

End Function

Private Sub usbUpdateSetIds()

On Error GoTo ErrHand

Dim rstSetIds As New ADODB.Recordset

If conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere

Set rstSetIds.ActiveConnection = conSQL
rstSetIds.Source = "SELECT DISTINCT s.SetId, d.YearStart FROM STUDENTS s INNER JOIN SETIDDATA d ON s.SetId = d.SetId ORDER BY d.YearStart DESC, s.SetId DESC"
rstSetIds.Open

rstSetIds.MoveFirst
cmbSetId.Clear
cmbSetId.AddItem "Please select:"
While Not rstSetIds.EOF
    cmbSetId.AddItem rstSetIds.Fields("SetId")
    rstSetIds.MoveNext
Wend
If Len(strSetId) > 0 Then cmbSetId.Value = strSetId
If Len(cmbSetId.Value) = 0 Then
    cmbSetId.Value = "Please select:"
    strSetId = ""
End If

ExitHere:
On Error Resume Next
rstSetIds.Close
Set rstSetIds = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
If Err.Number = 380 Then Resume Next
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub usbUpdateYears()

On Error GoTo ErrHand

Dim rstYears As New ADODB.Recordset
Dim strFilter As String, tmpYear As String

tmpYear = cmbYear.Value
cmbYear.Clear

If conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere
If Len(cmbSetId.Value) = 0 Or cmbSetId.Value = "Please select:" Then GoTo ExitHere

strFilter = " WHERE SetId = '" & cmbSetId.Value & "'"

Set rstYears.ActiveConnection = conSQL
rstYears.Source = "SELECT DISTINCT CASE CourseId WHEN 'NUR' THEN 'N' + CAST(CourseYear AS VARCHAR) WHEN 'FOU' THEN 'R' ELSE CAST(CourseYear AS VARCHAR) END Year, CASE CourseId WHEN 'NUR' THEN CourseYear - 3 WHEN 'FOU' THEN 0 ELSE CourseYear END Yr FROM STUDENTS" & strFilter & " ORDER BY Yr"
rstYears.Open

cmbYear.AddItem "Any"
While Not rstYears.EOF
    cmbYear.AddItem rstYears.Fields("Year")
    rstYears.MoveNext
Wend
If Len(tmpYear) > 0 Then cmbYear.Value = tmpYear
If Len(cmbYear.Value) = 0 Then cmbYear.Value = "Any"

ExitHere:
On Error Resume Next
rstYears.Close
Set rstYears = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
If Err.Number = 380 Then Resume Next
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub usbUpdateClasses()

On Error GoTo ErrHand

Dim rstClasses As New ADODB.Recordset
Dim strFilter As String, tmpClass As String

tmpClass = cmbClass.Value
cmbClass.Clear

If conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere
If Len(cmbSetId.Value) = 0 Or cmbSetId.Value = "Please select:" Then GoTo ExitHere

strFilter = " WHERE SetId = '" & cmbSetId.Value & "'"
If cmbYear.ListIndex > 0 Then strFilter = strFilter & " AND CASE CourseId WHEN 'NUR' THEN 'N' + CAST(CourseYear AS VARCHAR) WHEN 'FOU' THEN 'R' ELSE CAST(CourseYear AS VARCHAR) END = '" & cmbYear.Value & "'"

Set rstClasses.ActiveConnection = conSQL
rstClasses.Source = "SELECT DISTINCT ClassGroupId Class FROM STUDENTS" & strFilter & " ORDER BY ClassGroupId"
rstClasses.Open

cmbClass.AddItem "Any"
While Not rstClasses.EOF
    cmbClass.AddItem rstClasses.Fields("Class")
    rstClasses.MoveNext
Wend
If Len(tmpClass) > 0 Then cmbClass.Value = tmpClass
If Len(cmbClass.Value) = 0 Then cmbClass.Value = "Any"

ExitHere:
On Error Resume Next
rstClasses.Close
Set rstClasses = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
If Err.Number = 380 Then Resume Next
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub usbUpdateStudents()

On Error GoTo ErrHand

Dim rstX As New ADODB.Recordset
Dim strFilter As String
Dim intRow As Long
Dim arrStudents() As String

If conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere

If cmbSetId.ListIndex < 0 Then
    ExclBox "You must select a Dataset before proceeding.", "Select a Dataset..."
    GoTo ExitHere
End If

strFilter = " LEFT JOIN NSTUPERSONAL p ON s.SetId = p.SetId AND s.StudentId = p.StudentId WHERE (p.LeftSchool <> 'Y' OR p.LeftSchool IS NULL) AND s.SetId = '" & cmbSetId.Value & "'"
If cbxLeavers.Value Then strFilter = " WHERE s.SetId = '" & cmbSetId.Value & "'"
If cmbYear.ListIndex > 0 Then strFilter = strFilter & " AND CASE s.CourseId WHEN 'NUR' THEN 'N' + CAST(s.CourseYear AS VARCHAR) WHEN 'FOU' THEN 'R' ELSE CAST(s.CourseYear AS VARCHAR) END = '" & cmbYear.Value & "'"
If cmbClass.ListIndex > 0 Then strFilter = strFilter & " AND s.ClassGroupId = '" & cmbClass.Value & "'"

Set rstX.ActiveConnection = conSQL
rstX.Source = "SELECT s.Name, s.StudentId FROM STUDENTS s" & strFilter & " ORDER BY s.Name, s.StudentId"
rstX.Open

lstStudents.Enabled = True

lstStudents.Clear

intRow = 0

While Not rstX.EOF
    intRow = intRow + 1
    rstX.MoveNext
Wend

If intRow > 0 Then
    ReDim Preserve arrStudents(intRow - 1, 1)
    intRow = 0
    rstX.MoveFirst
    
    While Not rstX.EOF
        arrStudents(intRow, 0) = rstX.Fields("Name")
        arrStudents(intRow, 1) = rstX.Fields("StudentId")
        intRow = intRow + 1
        rstX.MoveNext
    Wend
    
    lstStudents.List = arrStudents

    strSetId = cmbSetId.Value
    lblStuName.Enabled = True
    lblStuId.Enabled = True
    lstStudents.SetFocus
    butInsert.Enabled = True
Else
    strSetId = ""
    lstStudents.Enabled = False
    lblStuName.Enabled = False
    lblStuId.Enabled = False
    butInsert.Enabled = False
    InfoBox "No children found for the specified filters.", "No children found..."
End If

ExitHere:
On Error Resume Next
rstX.Close
Set rstX = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub usbDoInsert()

On Error GoTo ErrHand

If Len(strSchName) = 0 Or Len(strSchPhone) = 0 Or Len(strSchEmail) = 0 Or Len(strSchAddr) = 0 Then
    InfoBox "Please update your school details before proceeding", "School details required"
    mpgPages.Value = 1
    If Len(strSchName) = 0 Then txtSchName.SetFocus: GoTo ExitHere
    If Len(strSchPhone) = 0 Then txtSchPhone.SetFocus: GoTo ExitHere
    If Len(strSchEmail) = 0 Then txtSchEmail.SetFocus: GoTo ExitHere
    If Len(strSchAddr) = 0 Then txtSchAddr.SetFocus: GoTo ExitHere
End If

If strDataSource = "Facility" Then
    If conSQL.State = adStateClosed Then Call usbConnLost: GoTo ExitHere
    If Len(strSetId) = 0 Or Len(lstStudents.Value) = 0 Then
        strStudentId = ""
        ExclBox "No student selected for insert", "No student selected"
        GoTo ExitHere
    End If
    strStudentId = lstStudents.Value
End If

If ufnInsertDetails() Then
    Call usbWriteIni(False)
    Unload Me
    InfoBox "Details updated successfully." & vbCrLf & vbCrLf & "Please review the document for additional information."
Else
    Unload Me
End If

ExitHere:
On Error Resume Next
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Function ufnGetStudentFromExcel(ByVal strFileName As String) As String

On Error GoTo ErrHand

Dim xclApp As New Excel.Application
Dim xclSource As Excel.Workbook
Dim xclSheet As Excel.Worksheet
Dim objFSO As New FileSystemObject

ufnGetStudentFromExcel = ""
If Not objFSO.FileExists(strFileName) Then GoTo ExitHere

Set xclSource = xclApp.Workbooks.Open(strFileName)
Set xclSheet = xclSource.Sheets(1)

Dim i As Long

i = 1
Do While Len(xclSheet.Cells(1, i).Value) > 0
    If xclSheet.Cells(1, i).Value = "Stu1Name" Then
        ufnGetStudentFromExcel = IIf(xclSheet.Cells(2, i).Value > " ", xclSheet.Cells(2, i).Value, "")
        Exit Do
    End If
    i = i + 1
Loop

ExitHere:
xclApp.Quit
Set xclApp = Nothing
Set xclSource = Nothing
Set xclSheet = Nothing
Set objFSO = Nothing
Exit Function

ErrHand:
ufnGetStudentFromExcel = ""
Call usbGenError(Err)
Resume ExitHere

End Function

Private Sub usbReadIni()

On Error GoTo ErrHand

Dim fsoSystem As New FileSystemObject
Dim filIni As TextStream
Dim strLine As String
Dim strArg As String
Dim strVal As String

If fsoSystem.FileExists(ThisDocument.Path & "\CAF.ini") Then
    Set filIni = fsoSystem.OpenTextFile(ThisDocument.Path & "\CAF.ini")
    If Not filIni.AtEndOfStream Then
        strLine = filIni.ReadLine
        If strLine <> "[CAF]" Then GoTo ExitHere
    End If
    While Not filIni.AtEndOfStream
        strLine = filIni.ReadLine
        If InStr(1, strLine, "=") > 0 Then
            strArg = Mid(strLine, 1, InStr(1, strLine, "=") - 1)
            strVal = Mid(strLine, InStr(1, strLine, "=") + 1, Len(strLine))
            Select Case strArg
            Case "DataSource"
                strDataSource = strVal
            Case "ServerName"
                strServerName = strVal
            Case "DatabaseName"
                strDatabase = strVal
            Case "Dataset"
                strSetId = strVal
            Case "ExcelFile"
                strExcelFile = strVal
            Case "SchoolName"
                strSchName = strVal
            Case "SchoolPhone"
                strSchPhone = strVal
            Case "SchoolEmail"
                strSchEmail = strVal
            Case "SchoolAddress"
                strSchAddr = strVal
            End Select
        End If
    Wend
    filIni.Close
End If

ExitHere:
On Error Resume Next
Set fsoSystem = Nothing
Set filIni = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Sub

Private Sub usbWriteIni(ByVal booUpdateDetails As Boolean)

On Error GoTo ErrHand

Dim fsoSystem As New FileSystemObject
Dim filIni As TextStream
Dim strLine As String, strArg As String, strVal As String
Dim strIniDataSource As String, strIniServerName As String, strIniDatabase As String, strIniSetId As String, strIniExcelFile As String, strIniSchName As String, strIniSchPhone As String, strIniSchEmail As String, strIniSchAddr As String

If fsoSystem.FileExists(ThisDocument.Path & "\CAF.ini") Then
    Set filIni = fsoSystem.OpenTextFile(ThisDocument.Path & "\CAF.ini")
    If Not filIni.AtEndOfStream Then
        strLine = filIni.ReadLine
        If strLine <> "[CAF]" Then GoTo WriteIni
    End If
    While Not filIni.AtEndOfStream
        strLine = filIni.ReadLine
        If InStr(1, strLine, "=") > 0 Then
            strArg = Mid(strLine, 1, InStr(1, strLine, "=") - 1)
            strVal = Mid(strLine, InStr(1, strLine, "=") + 1, Len(strLine))
            Select Case strArg
            Case "DataSource"
                strIniDataSource = strVal
            Case "ServerName"
                strIniServerName = strVal
            Case "DatabaseName"
                strIniDatabase = strVal
            Case "Dataset"
                strIniSetId = strVal
            Case "ExcelFile"
                strIniExcelFile = strVal
            Case "SchoolName"
                strIniSchName = strVal
            Case "SchoolPhone"
                strIniSchPhone = strVal
            Case "SchoolEmail"
                strIniSchEmail = strVal
            Case "SchoolAddress"
                strIniSchAddr = strVal
            End Select
        End If
    Wend
    filIni.Close
End If

WriteIni:

If strDataSource = strIniDataSource And strServerName = strIniServerName And strDatabase = strIniDatabase And strSetId = strIniSetId And strExcelFile = strIniExcelFile And strSchName = strIniSchName And strSchPhone = strIniSchPhone And strSchEmail = strIniSchEmail And strSchAddr = strIniSchAddr Then GoTo ExitHere

If booUpdateDetails Then
    strIniSchName = strSchName
    strIniSchPhone = strSchPhone
    strIniSchEmail = strSchEmail
    strIniSchAddr = strSchAddr
    If Len(strIniSchName) = 0 And Len(strIniSchPhone) = 0 And Len(strIniSchEmail) = 0 And Len(strIniSchAddr) = 0 Then GoTo ExitHere
Else
    strIniDataSource = strDataSource
    strIniServerName = strServerName
    strIniDatabase = strDatabase
    strIniSetId = strSetId
    strIniExcelFile = strExcelFile
    If Len(strIniDataSource) = 0 Then GoTo ExitHere
    If strIniDataSource = "Facility" And Len(strIniServerName) = 0 And Len(strIniDatabase) = 0 Then GoTo ExitHere
    If strIniDataSource = "Excel" And Len(strExcelFile) = 0 Then GoTo ExitHere
End If

Set filIni = fsoSystem.OpenTextFile(ThisDocument.Path & "\CAF.ini", ForWriting, True)
filIni.WriteLine "[CAF]"
If Len(strIniDataSource) > 0 Then filIni.WriteLine "DataSource=" & strIniDataSource
If Len(strIniServerName) > 0 Then filIni.WriteLine "ServerName=" & strIniServerName
If Len(strIniDatabase) > 0 Then filIni.WriteLine "DatabaseName=" & strIniDatabase
If Len(strIniSetId) > 0 Then filIni.WriteLine "Dataset=" & strIniSetId
If Len(strIniExcelFile) > 0 Then filIni.WriteLine "ExcelFile=" & strIniExcelFile
If Len(strIniSchName) > 0 Then filIni.WriteLine "SchoolName=" & strIniSchName
If Len(strIniSchPhone) > 0 Then filIni.WriteLine "SchoolPhone=" & strIniSchPhone
If Len(strIniSchEmail) > 0 Then filIni.WriteLine "SchoolEmail=" & strIniSchEmail
If Len(strIniSchAddr) > 0 Then filIni.WriteLine "SchoolAddress=" & strIniSchAddr
filIni.Close

ExitHere:
On Error Resume Next
Set fsoSystem = Nothing
Set filIni = Nothing
Err.Clear
Exit Sub

ErrHand:
If Left(Err.Description, 48) = "[Microsoft][ODBC SQL Server Driver][Named Pipes]" Then Call usbConnLost: Resume ExitHere
Call usbGenError(Err)
Resume ExitHere

End Sub

' InQuest injected base64 decoded content
' Z+aJ

INQUEST-PP=macro
