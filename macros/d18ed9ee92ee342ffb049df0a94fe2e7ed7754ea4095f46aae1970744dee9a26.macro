Attribute VB_Name = "AttributeValuesHolder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_Column As String
Private m_Values() As String
Private m_Selected() As String

Public Property Get Column() As String
    Column = m_Column
End Property

Public Property Let Column(value As String)
    m_Column = value
End Property

Public Property Get Values() As String()
    Values = m_Values
End Property

Public Property Let Values(value() As String)
    m_Values = value
End Property

Public Property Get Selected() As String()
    Selected = m_Selected
End Property

Public Property Let Selected(value() As String)
    m_Selected = value
End Property
Attribute VB_Name = "BSConsts"
Option Explicit
Option Private Module

'doc/sheet
Global Const ZEDOC_ID As String = "ZE.doc.id"
Global Const ZEDOC_VER As String = "ZE.doc.ver"
Global Const ZEDOC_REV As String = "ZE.doc.rev"
Global Const ZEDOC_NAME As String = "ZE.doc.nm"
Global Const ZEDOC_UPTOOL_NOTE As String = "ZE.doc.uptool.note"

Global Const PROP_SHEET_ID As String = "ZE.sheet.id"
Global Const PROP_SHEET_TYPE As String = "ZE.sheet.type"
Global Const PROP_SHEET_VERSION As String = "ZE.sheet.ver"
'

Global Const ZESHEET_NIL As String = vbNullString

Global Const ZESHEET_SPOT As String = "S"
Global Const ZESHEET_FUTURES As String = "U"
Global Const ZESHEET_FORECAST As String = "F"
Global Const ZESHEET_ENTITY As String = "E"
Global Const ZESHEET_CURVE_DATERANGE As String = "C1"
Global Const ZESHEET_CURVE_SINGLEDATE As String = "C2"

Global Const ZESHEET_SAVEED_PROFILES As String = "P"
Global Const ZESHEET_SAVEED_REPORTS As String = "R"
Global Const ZESHEET_UPGRADEING_REPORT As String = "T"

Global Const PROP_SAVED_ENTITIES As String = "ZE.savedEntities"

'
Global Const OLD_PROFSHEETNAME As String = "Saved Profiles"
Global Const OLD_REPORTSHEETNAME As String = "ZE Saved Reports"
Global Const QRY_PWD As String = "zepower_svd_qry"
Global Const RPT_PWD As String = "zepower_svd_rpt"

Global Const V1_DD_LOADPROFILE_1 As String = "/ZEData?"
Global Const V1_DD_LOADPROFILE_2 As String = "/LoadProfile?request="
Global Const V1_DD_LOADPROFILE_3 As String = "/invalidZEData?"
'
'Series Options
Public Const HSI_SET As Long = &H1
Public Const HSI_REMOVE_UPON_EMPTY As Long = &H2
Public Const HSI_FORMULA As Long = &H10
Public Const HSI_ROW_AGGREGATION As Long = &H20
Public Const HSI_FILTER As Long = &H40
Public Const HSI_AGGREGATION As Long = &H80
Public Const HSI_CUMULATIVE_AGGREGATION As Long = &H100
Public Const HSI_CONTRACT As Long = &H200
Public Const HSI_FORWARD_ANALYSIS As Long = &H400
Public Const HSI_EXTRPOLATION As Long = &H800
Public Const HSI_INTROPLATION As Long = &H1000
Public Const HSI_SHIFT As Long = &H2000
Attribute VB_Name = "CCnvtCP41706"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function Execute(Wb As Workbook) As String
 Dim sht As Worksheet
 Dim fvs As Long

    On Error GoTo OOPS

    For Each sht In Wb.Worksheets
        fvs = CCnvtCommon.GetFVS(sht)
        
        If fvs > 0 Then
            Call CPConvertTRANS(fvs, sht)
            Call CPConvertMO(fvs, sht)
        End If
    Next

OOPS:
    If Err.Number <> 0 Then
        Execute = Err.Description
    End If
    
    Exit Function
End Function

Private Function CPConvertTRANS(ByVal fvs As Long, sht As Worksheet) As Boolean
 Const TRANSPOSED_COLS As Long = 6
 Dim cols As Long
 Dim rows As Long
 Dim msg As String
 
    If Not CCnvtCommon.IsFlag(fvs, CURVE_FLG_PIVOT) Then Exit Function
    
    On Error GoTo OOPS
    
    Call sht.Activate
    
    If Not CCnvtCommon.GetSplits(sht, Nothing, rows, cols) Then Exit Function
    Call DebugPrint(sht.name)

    If rows = 5 Then 'until 4.11.9
        If Not CCnvtCommon.IsFlag(fvs, CURVE_FLG_TIMESERIES) Then
            Call CCnvtCommon.Unprotect(sht)
            sht.rows(4).Insert shift:=xlDown
            Call CCnvtCommon.Protect(sht)
            rows = rows + 1
        End If
    End If
    
    Call CCnvtCommon.SetSplits(sht, rows, TRANSPOSED_COLS)
    
    CPConvertTRANS = True
    
OOPS:
    If Err.Number <> 0 Then
        msg = sht.name + " ->  " + Err.Description
        Application.StatusBar = msg
        Call DebugPrint(msg)
    End If

    Exit Function
End Function

Private Function CPConvertMO(ByVal fvs As Long, sht As Worksheet) As Boolean
 Dim cols As Long
 Dim rows As Long
 Dim msg As String
 Dim et As String
 Dim params As CCurveParams
 
    If CCnvtCommon.IsFlag(fvs, CURVE_FLG_PIVOT) Then Exit Function
    If CCnvtCommon.IsFlag(fvs, CURVE_FLG_TIMESERIES) Then Exit Function
    If CCnvtCommon.IsFlag(fvs, CURVE_FLG_FUTURE_RANGE) Then Exit Function
    If Not CCnvtCommon.IsFlag(fvs, CURVE_FLG_MULTIOBS) Then Exit Function
    
    On Error GoTo OOPS
    
    Call sht.Activate
    
    If Not CCnvtCommon.GetSplits(sht, Nothing, rows, cols) Then Exit Function
    Call DebugPrint(sht.name)
    
'    Call CXLEvents.DisableEvents
    
    Call CCnvtCommon.Unprotect(sht)
    
    Set params = New CCurveParams
    Call params.FromXML(CCnvtCommon.GetPropertyStr())
    
    sht.Cells(3, 1).Locked = False
    Call CCnvtCommon.DrawChangableDateRange(sht, params.OprStartDate, 3, True)
    
    With sht.Cells(rows - 1, 4).Resize(, params.ColumnCount - 1)
        .formula = "=" + sht.Cells(3, 1).Address
        .NumberFormat = CCnvtCommon.SystemDateFormat
    End With
        
    CPConvertMO = True
    
OOPS:
    Call CCnvtCommon.Protect(sht)
    
    If Err.Number <> 0 Then
        msg = sht.name + " ->  " + Err.Description
        Application.StatusBar = msg
        Call DebugPrint(msg)
    End If
    
'    Call CXLEvents.RestoreEvents
    Exit Function
End Function
Attribute VB_Name = "CCnvtCP419"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function Execute(Wb As Workbook) As String
 Dim sht As Worksheet
 Dim ok As Boolean
 Dim fvs As Long

    On Error GoTo OOPS

    For Each sht In Wb.Worksheets
        fvs = CCnvtCommon.GetFVS(sht)
        
        If (fvs And CURVE_FLG_PIVOT) > 0 And CCnvtCommon.CPGetSheetVersion(fvs) < CCnvtCommon.CPGetSheetVersion(CURVE_FLG_V2) Then
        
            Call sht.Activate
            Call DebugPrint(sht.name)
            
            Call CCnvtCommon.Unprotect(sht)
            
            If (fvs And CURVE_FLG_TIMESERIES) > 0 Then
                ok = ConvertTS
            Else
                ok = ConvertFutures
            End If
            
            If ok Then
               Call CCnvtCommon.SetProperty(CURVE_SHEET_FLAGVALUES, CCnvtCommon.ToHexStr(CCnvtCommon.CPGetNewSheetVersion(fvs, CURVE_FLG_V2)))
               ActiveWindow.ScrollColumn = 6 + 1
            End If
            
            Call CCnvtCommon.Protect(sht)
        End If
    Next
 
OOPS:
    If Err.Number <> 0 Then
        Execute = Err.Description
    End If
    
    Exit Function
End Function

Private Function ConvertTS() As Boolean
 Dim hh As CCnvtCP419_TimeSeriesTRANS2
 Dim msg As String
 
    On Error GoTo OOPS
    
    Set hh = New CCnvtCP419_TimeSeriesTRANS2
    Call hh.Execute
        
    ConvertTS = True
    
OOPS:
    If Err.Number <> 0 Then
        msg = ActiveSheet.name + " ->  " + Err.Description
        Application.StatusBar = msg
        Call DebugPrint(msg)
    End If
    
    Set hh = Nothing
    Exit Function
End Function

Private Function ConvertFutures() As Boolean
 Dim hh As CCnvtCP419_FutureTRANS2
 Dim msg As String
 
    On Error GoTo OOPS
    
    Set hh = New CCnvtCP419_FutureTRANS2
    Call hh.Execute
    
    ConvertFutures = True
    
OOPS:
    If Err.Number <> 0 Then
        msg = ActiveSheet.name + " ->  " + Err.Description
        Application.StatusBar = msg
        Call DebugPrint(msg)
    End If
    
    Set hh = Nothing
    Exit Function
End Function
Attribute VB_Name = "CCnvtCP419_FutureTRANS2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 0

Private m_sheet As Worksheet
Private WithEvents m_Imager As CCurveImageText
Attribute m_Imager.VB_VarHelpID = -1
Private m_params As New CCurveParams
Private m_SplitRows As Long
Private m_SplitCols As Long
'Private m_dataRgn As range
'Private m_HeaderRgn As range
'
'Private Const C_FIXED_COLS As Long = 6
'Private Const C_FIXED_ROWS As Long = 6
'
Private Const OID_DOWNLOAD_ALL As Integer = 1
Private Const OID_UPLOAD_ALL As Integer = 2
Private Const OID_EDIT_SETTINGS As Integer = 3
Private Const OID_CONTRACT_RANGE As Integer = 4
'Private Const OID_CURVE_NAME As Integer = 9
Private Const OID_CONTRACT_START_PLUS As Integer = 11
Private Const OID_CONTRACT_START_MINUS As Integer = 12
Private Const OID_CONTRACT_END_PLUS As Integer = 13
Private Const OID_CONTRACT_END_MINUS As Integer = 14
'Private Const OID_MAX_CONTRACT_DATE As Integer = 15
'Private Const OID_MIN_CONTRACT_DATE As Integer = 16
'
Private Const ALT_CONTRA_HEAD_PLUS As String = "New contract"
Private Const ALT_CONTRA_HEAD_MINUS As String = "Delete first contract"
Private Const ALT_CONTRA_TAIL_PLUS As String = "New contract to the end"
Private Const ALT_CONTRA_TAIL_MINUS As String = "Delete last contract"

Public Sub Execute()
    Call CCnvtCommon.GetSplits(ActiveSheet, Nothing, m_SplitRows, m_SplitCols)
    
    Set m_sheet = ActiveSheet
    Set m_Imager.sheet = m_sheet
    
    Set m_params = New CCurveParams
    Call m_params.FromXML(CCnvtCommon.GetPropertyStr())
    
    Set m_Imager.sheet = m_sheet
    Set m_Imager.m_params = m_params
    
    Call DeleteImages
    
    Call Restyle
    Call AddGroups
    Call DrawControls
    Call DeleteCurveComments
    
    m_params.flagValues = CCnvtCommon.CPGetNewSheetVersion(m_params.flagValues, CURVE_FLG_V2)
    Call CCnvtCommon.SaveCurveProperties(m_params)
End Sub

Private Sub DeleteCurveComments()
 Dim r As Long
 Dim cmt As Comment
    
    r = 7
    Do
        Set cmt = m_sheet.Cells(r, 6).Comment
        If cmt Is Nothing Then Exit Do
        cmt.Delete
        r = r + 1
    Loop
End Sub

Private Sub DeleteImages()
' Dim k As Long
 Dim cvrs() As String

    cvrs = m_params.curves
    
'    For k = LBound(cvrs) To UBound(cvrs)
        Call CCnvtCommon.DeleteCurveIcons(cvrs, AT_HISTORY, AT_DELETE, AT_DOWNLOAD, AT_UPLOAD, AT_ACCEPT, AT_NAME)
'    Next
End Sub

Private Sub Restyle()
' Const isNewFlg As Long = 1
' Dim k As Long
 Dim f As Variant
' Dim row As Long
' Dim dtacols As Long

'    With m_HeaderRgn
'        dtacols = .Columns.count - C_FIXED_COLS
'        If dtacols > 0 Then Call .offset(, C_FIXED_COLS).Resize(, dtacols).Clear
'
'        .Cells(1, 1).RowHeight = 40
'        For f = 2 To .rows.count
'             .Cells(f, 1).RowHeight = 18
'        Next
'
'        m_sheet.rows(1).Interior.color = RGB(&H0, &H52, &H93)
'
'        With .rows(1)
'            .Borders(xlEdgeBottom).LineStyle = xlContinuous
'            .Borders(xlEdgeBottom).Weight = xlThick
'            '.Borders(xlEdgeBottom).ColorIndex = 10
'            .Borders(xlEdgeBottom).color = RGB(&H5E, &HB6, &HE4)
'        End With
'
'        With .Cells(.rows.count + 1, 1).Resize(1, .Columns.count)
'            .Borders(xlEdgeTop).LineStyle = xlContinuous
'            .Borders(xlEdgeTop).Weight = xlHairline
'        End With
'
'        If dtacols > 0 Then
'            With .offset(, C_FIXED_COLS).Resize(, dtacols)
'                .Borders(xlEdgeRight).LineStyle = XlLineStyle.xlLineStyleNone
'            End With
'        End If
'
'        .offset(1).Interior.color = RGB(255, 255, 255)
'
'        .Columns(.Columns.count).Borders(xlEdgeRight).LineStyle = xlContinuous
'        .Columns(.Columns.count).Borders(xlEdgeRight).Weight = xlThin
'    End With
'
    With m_sheet.Cells(2, 1).Resize(m_SplitRows - 1, m_SplitCols)

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlHairline
        .Borders(xlInsideHorizontal).color = RGB(&HD9, &HD9, &HD9)

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlHairline
        .Borders(xlEdgeBottom).color = RGB(&HD9, &HD9, &HD9)
    End With
'
    With m_sheet.Cells(m_SplitRows - 1, 1).Resize(, m_SplitCols + m_params.PropertyCount + m_params.rowCount - 1)
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
    End With
    
    
'    With m_dataRgn
'        .Cells(1, 1).RowHeight = 34
'
'        .rows(1).Interior.color = CURVE_COLUMN_HEADER_COLOR2
'
'        With .rows(1)
'            .HorizontalAlignment = xlCenter
'            .VerticalAlignment = xlCenter
'            .WrapText = False
'            .Orientation = 0
'            .AddIndent = False
'            .IndentLevel = 0
'            .ShrinkToFit = False
'            .ReadingOrder = xlContext
'            '.MergeCells = False
'        End With

'        For Each f In .Columns
'            Select Case f.column
'                Case 1, 2:
'                    If isNewFlg = 1 Then f.ColumnWidth = 13
'                Case 3:
'                    If isNewFlg = 1 Then f.ColumnWidth = 4 '13
'                Case 4:
'                    If isNewFlg = 1 Then f.ColumnWidth = 16
'                Case C_FIXED_COLS - 1:
'                    If isNewFlg = 1 Then Call ResizeVRCol 'IIf(CCurveControl.ShowAcceptAll() And Not m_params.AllCurvesRD(), 32, 8)
'                Case C_FIXED_COLS:
'                    If isNewFlg = 1 Then f.ColumnWidth = 3 'CCurveControl.GetNameWidth(m_params)
'                Case Else:
'                    If isNewFlg = 1 Or (f.column > C_FIXED_COLS + 1 + m_params.PropertyCount) Then
'                        f.ColumnWidth = 20
'                    End If
'            End Select
     
'            Select Case f.column
'                Case 1, 2, 4:
''                    f.Borders(xlEdgeRight).LineStyle = xlContinuous
''                    f.Borders(xlEdgeRight).Weight = xlHairline
'                Case C_FIXED_COLS + 1:
'                    f.Borders(xlEdgeRight).LineStyle = xlContinuous
'                    f.Borders(xlEdgeRight).Weight = xlThin
'                Case Is > C_FIXED_COLS + 1:
'                    f.Borders(xlEdgeRight).LineStyle = xlContinuous
'                    f.Borders(xlEdgeRight).Weight = IIf(f.column = .Columns.count, xlThin, xlHairline)
'            End Select
'        Next
        
'        With .offset(1, 1).Resize(.rows.count - 1, 3)
'            .Borders(xlEdgeRight).LineStyle = xlContinuous
'            .Borders(xlEdgeRight).Weight = xlHairline
'        End With
''
'        With .offset(1).Resize(.rows.count - 1)
'            .Borders(xlInsideHorizontal).LineStyle = xlContinuous
'            .Borders(xlInsideHorizontal).Weight = xlThin
'            .Borders(xlInsideHorizontal).color = RGB(210, 210, 210)
'
'            .Borders(xlEdgeBottom).LineStyle = xlContinuous
'            .Borders(xlEdgeBottom).Weight = xlThin
'            .Borders(xlEdgeBottom).color = RGB(210, 210, 210)
'        End With
'
''        For k = 2 To .rows.count
''             .offset(k - 1, C_FIXED_COLS).Resize(1, .Columns.count - C_FIXED_COLS).Interior.color = _
''                            IIf(m_params.Readonly(k - 2), BSConsts.CURVE_COLUMN_HEADER_COLOR2, IIf((k Mod 2 = 1), BSConsts.CURVE_ROW_ALTERNATING_COLOR_1, CURVE_ROW_ALTERNATING_COLOR_2))
''        Next
''
''        For k = 2 To .rows.count
''             .offset(k - 1, C_FIXED_COLS).Resize(1, m_params.PropertyCount + 2).Interior.color = IIf(m_params.Readonly(k - 2), BSConsts.CURVE_COLUMN_HEADER_COLOR2, BSConsts.CURVE_COLUMN_HEADER_COLOR)
''        Next
        
'        .offset(1).Resize(.rows.count - 1, C_FIXED_COLS).Interior.color = RGB(&HFF, &HFF, &HFF)
'    End With

    For Each f In m_sheet.Columns
        Select Case f.Column
'            Case 1, 2:
'                f.ColumnWidth = 13
'            Case 3:
'                f.ColumnWidth = 4 '13
'            Case 4:
'                f.ColumnWidth = 16
'            Case C_FIXED_COLS - 1:
'                If isNewFlg = 1 Then Call ResizeVRCol 'IIf(CCurveControl.ShowAcceptAll() And Not m_params.AllCurvesRD(), 32, 8)
            Case m_SplitCols:
                f.ColumnWidth = 3 'CCurveControl.GetNameWidth(m_params)
                Exit For
        End Select
     
    Next
    Call ColorEditableDate
End Sub

Private Sub DrawCurveName(ByVal aPos As Long, curveNames() As String)
 Dim w As Long
 Dim w0 As Long
 Dim r As Long
 
    If aPos = 0 Then
        m_sheet.Cells(m_SplitRows, m_SplitCols).value = vbNullString
        
        With m_sheet.Cells(m_SplitRows, 1).Resize(1, 2)
            .Merge
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .value = "Curve Name"
        End With
        
        w = CCnvtCommon.GetNameWidth(m_params)
        w0 = Len("Effective Date: ")
        m_sheet.Columns(1).ColumnWidth = w0
        m_sheet.Columns(2).ColumnWidth = IIf(w < 28, 28, w) - w0
        
        With m_sheet.Cells(m_SplitRows + 1, 1).Resize(UBound(curveNames) - LBound(curveNames) + 1, 2)
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .IndentLevel = 1
            .ShrinkToFit = False
            .WrapText = False
            .NumberFormat = "@"
            Call .Merge(Across:=True)
        End With
        
        With m_sheet.Cells(m_SplitRows + 1, m_SplitCols).Resize(UBound(curveNames) - LBound(curveNames) + 1)
            .Interior.ColorIndex = xlNone
        End With
    End If
    
    r = m_SplitRows + aPos + 1
    m_sheet.Cells(r, 1).value = CCnvtCommon.AddApostrophe(curveNames(aPos))
    m_sheet.Cells(r, m_SplitCols).value = vbNullString
End Sub

Private Sub DrawControls()
 Dim k As Long
 Dim curves() As String

    Call DrawDateRange
    Call DrawInterval

    curves = m_params.curves

    For k = LBound(curves) To UBound(curves)
'        Call DrawTimes(k, True)
'        If Not m_params.Readonly(k) Then
'            Call DrawTimes(k, False)
'        End If

        Call DrawCurveName(k, curves)
'        Call DrawIcon(OID_CURVE_NAME, k, curves(k), AT_NAME)
        
'        Call DrawObjectAccept(curves(k), k)
'        Call DrawVR(k)
    Next

    With m_Imager
        .AlternativeText = vbNullString
        
        Call .DeleteImage(OID_DOWNLOAD_ALL)
        Call .Draw(OID_DOWNLOAD_ALL, vbNullString)
        
        Call .DeleteImage(OID_EDIT_SETTINGS)
        Call .Draw(OID_EDIT_SETTINGS, vbNullString)
        
        If .DeleteImage(OID_UPLOAD_ALL) Then
            Call .Draw(OID_UPLOAD_ALL, vbNullString)
        End If
        
        If .DeleteImage(OID_CONTRACT_RANGE) Then
            Call .Draw(OID_CONTRACT_RANGE, vbNullString)
        End If
        
        If .DeleteImage(OID_ACCEPT_ALL) Then
            Call .Draw(OID_ACCEPT_ALL, vbNullString)
        End If

        If m_params.rowCount >= 2 And .DeleteImage(OID_CONTRACT_START_PLUS) Then
            Call .Draw(OID_CONTRACT_START_PLUS, ALT_CONTRA_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_CONTRACT_START_MINUS) Then
            Call .Draw(OID_CONTRACT_START_MINUS, ALT_CONTRA_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_CONTRACT_END_PLUS) Then
            Call .Draw(OID_CONTRACT_END_PLUS, ALT_CONTRA_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_CONTRACT_END_MINUS) Then
            Call .Draw(OID_CONTRACT_END_MINUS, ALT_CONTRA_HEAD_PLUS, xlMove)
        End If
    End With
End Sub

'----------------------------------------------------------------------------------------------------------------------------------

'Private Sub GetRanges()
'    If m_params Is Nothing Then Exit Sub
'
'    If m_sheet Is Nothing Then Set m_sheet = ActiveSheet
'    Set m_dataRgn = CCurveControl.GetCurveRange(m_sheet)
'
'    If Not m_dataRgn Is Nothing Then
'        With m_dataRgn
'            Set m_HeaderRgn = m_sheet.Cells(1, 1).Resize(.row - 1, .Columns.count)
'        End With
'    End If
'End Sub

'Private Sub ResizeVRCol()
'    m_sheet.Columns(C_FIXED_COLS - 1).ColumnWidth = IIf(CCurveControl.ShowAcceptAll(), 32, 1) '0.01)
'End Sub

Private Sub RestoreEditableDateText()
 Dim sht As Worksheet
 
    If Not m_params.IsFlag(CURVE_FLG_EDIT_DATES) Then Exit Sub
    
    Set sht = IIf(m_sheet Is Nothing, ActiveSheet, m_sheet)
    With sht.Cells(2, 2)
        .Characters.Font.ColorIndex = xlColorIndexAutomatic
    End With
End Sub

Private Sub ColorEditableDate()
 Dim sht As Worksheet
 
    If Not m_params.IsFlag(CURVE_FLG_EDIT_DATES) Then Exit Sub
    
    Set sht = IIf(m_sheet Is Nothing, ActiveSheet, m_sheet)
    With sht.Cells(2, 2).Resize(, m_SplitCols - 1)
        .Interior.ColorIndex = 40
    End With
End Sub

Private Sub AddDataGroup(ByVal isGroup As Boolean)
    Call CCurveHelper.GroupColumns(m_sheet, m_SplitCols + 1, m_params.PropertyCount + m_SplitCols + 1, isGroup)
End Sub

Private Sub AddGroups()
    Call CCurveHelper.GroupColumns(m_sheet, 4, 5, True)
    Call AddDataGroup(True)
    
    Call CCurveHelper.CollapseGroups(m_sheet)
End Sub

'Private Sub DrawIcon(ByVal aObjectID As Long, ByVal aPos As Long, ByVal aCurveName As String, ByVal aAlternativeText As String)
'    With m_Imager
'        .AlternativeText = CCurveControl.GetAltText(aCurveName, aAlternativeText)
'        Call .Draw(aObjectID, CStr(aPos))
'    End With
'End Sub

Private Sub DrawDateRange()
' Dim effe As String
'
'    With m_sheet.Cells(2, 1)
'        .IndentLevel = 1
'        .value = " Effective Date:"
'        With .Characters(1).Font
'            .size = 9
'        End With
'    End With
'
''    With m_Sheet.Cells(2, 2)
''        .HorizontalAlignment = xlLeft
''        '.value = m_params.ToLocalTimeStr(m_params.startDate, False)
''        With .Characters(1).Font
''            .Bold = True
''            .Size = 8
''        End With
''    End With
'
'    If Not CCurveControl.PreserveFormulas() Then
'        'Call CCurveControl.SetDateCell(m_sheet.Cells(2, 2), m_params.ToLocalTimeStr(m_params.startDate, False))
'        With m_sheet.Cells(2, 2)
'            .NumberFormat = CDDXDates.SystemDateFormat
'            .value = m_params.OprStartDate
'            .HorizontalAlignment = xlLeft
'        End With
'    End If
    With m_sheet.Cells(2, 2)
        .HorizontalAlignment = xlLeft
    End With
End Sub

Private Sub DrawInterval()
' Dim dtz As Boolean
'
'    dtz = CCurveGranularity.IsGranularity(m_params.granularities, CURVE_GRANULARITY_HOURLY) Or CCurveGranularity.IsGranularity(m_params.granularities, CURVE_GRANULARITY_MINUTELY)
'    dtz = IIf(dtz And m_params.TZName <> vbNullString And (m_params.IsFlag(CURVE_FLG_DST_ADJUST_START) Or m_params.IsFlag(CURVE_FLG_DST_ADJUST_END)), True, False)
'
'    m_sheet.Cells(3, 1).Resize(, 2).Merge
'    Call CCurveControl.DrawStyledTexts(m_sheet, 3, 1, " Interval:  ", CCurveGranularity.GetGranularityName(m_params.granularities), IIf(dtz, "   (" + m_params.TZName + ")", vbNullString))
End Sub

'Private Property Get EffectDatesRgn() As range
' Dim srows As Long
' Dim scols As Long
'
'    Call CCurveControl.GetSplits(m_sheet, m_params, srows, scols)
'
'    scols = scols + m_params.PropertyCount + 1
'    Set EffectDatesRgn = m_dataRgn.Cells(2, scols).Resize(m_dataRgn.rows.count - 1)
'End Property
'
'Private Sub SetDateLinks()
'    If Not m_params.IsFlag(CURVE_FLG_EDIT_DATES) Then Exit Sub
'    EffectDatesRgn.Formula = "=" + m_sheet.Cells(2, 2).Address
'End Sub
'
'Public Sub CalculateDates(params As CCurveParams)
'    If Application.Calculation = xlCalculationAutomatic Then Exit Sub
'
'    If Not params Is Nothing Then
'        Set m_sheet = ActiveSheet
'        Set m_params = params
'        Call GetRanges
'    End If
'
'    If Not m_params.IsFlag(CURVE_FLG_EDIT_DATES) Then Exit Sub
'
'    Call EffectDatesRgn.Calculate
'End Sub

Private Sub Class_Initialize()
    Set m_Imager = New CCurveImageText
End Sub

Private Sub Class_Terminate()
'    If CCurveControl.IsStaticMode(Me, m_sheet) Then Exit Sub
'
'    Call ProtectSheet
    Set m_Imager = Nothing
End Sub

'Private Sub SetDataRgnFormat()
' Dim spltrows As Long
' Dim spltcols As Long
' Dim pc As Long
'
'    On Local Error Resume Next
'
'    Call CCurveControl.GetSplits(m_sheet, m_params, spltrows, spltcols)
'
'    With m_dataRgn
'        If .rows.count <= 1 Or spltcols >= .Columns.count Then Exit Sub
'
'        pc = m_params.PropertyCount
'
'        'curve nme
'        With .offset(1, spltcols - 1).Resize(.rows.count - 1, pc + 1)
'            .NumberFormat = "@"
'            .HorizontalAlignment = xlLeft
'            .offset(, pc).Resize(, 1).VerticalAlignment = xlCenter
'        End With
'
'        pc = pc + 1
'
'        If .Columns.count > spltcols + pc Then
'            With .offset(1, spltcols + pc).Resize(.rows.count - 1, .Columns.count - (spltcols + pc))
''                .NumberFormat = "General"
'                .HorizontalAlignment = xlRight
'            End With
'        End If
'    End With
'End Sub

'Private Sub ProtectSheet()
' Dim c As Long
' Dim k As Long
' Dim sizex As Long
' Dim tmp As Long
'
'    If m_params.GetCurveCount() <= 0 Then
'        Call CCurveControl.Unprotect(m_sheet)
'        Exit Sub
'    End If
'
'    If m_sheet Is Nothing Then Exit Sub
'    If m_sheet.ProtectContents Then Exit Sub
'    'Call cDDXCurve.Unprotect(BSConsts.DDX_PID, m_sheet)
'
'    m_sheet.UsedRange.Cells.Locked = True
'
'    m_sheet.Cells(2, 2).Locked = IIf(m_params.IsFlag(CURVE_FLG_EDIT_DATES), m_params.AllCurvesRD(), True)
'
'    If Not m_dataRgn Is Nothing Then
'        sizex = m_params.PropertyCount + 1    'curvename + effective date
'        With m_dataRgn
'            c = .Columns.count
'
'            For k = LBound(m_params.curves) To UBound(m_params.curves)
'                If Not m_params.Readonly(k) Then
'                    tmp = c - sizex - C_FIXED_COLS
'                    If tmp > 0 Then
'                        Call CUploadSheetCreator.setRangeLocked(m_dataRgn.offset(k + 1, C_FIXED_COLS + sizex).Resize(1, tmp), False)
'                    End If
'                End If
'            Next
'
'            If .Columns.count > C_FIXED_COLS + sizex Then
'                '.offset(, C_FIXED_COLS + sizex).Resize(1, .Columns.count - C_FIXED_COLS - sizex).Locked = m_params.AllCurvesRD()
'            End If
'
'        End With
'
'        Call SetDataRgnFormat
'        Call CCurveControl.Add4EyesStyle(m_dataRgn)
'    End If
'
'    Call CCurveControl.Protect(m_sheet)
'End Sub

Private Sub m_Imager_OnImage(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aPicturePath As String, ByRef aWidth As Single, ByRef aHeight As Single)
    aPicturePath = vbNullString
    aWidth = 95
    aHeight = 18
    
    Select Case aTarget
        Case OID_EDIT_SETTINGS:
            aWidth = 140
            aPicturePath = "CurveEditDateSettings2.png"
        Case OID_CONTRACT_RANGE:
            aWidth = 140
            aPicturePath = "CurveContract2.png"
        Case OID_DOWNLOAD_ALL:
            aWidth = 100
            aPicturePath = "CurveDownloadAll2.png"
        Case OID_UPLOAD_ALL:
            aWidth = 100
            aPicturePath = "CurveUploadAll2.png"
        Case OID_ACCEPT_ALL:
            aWidth = 100
            aPicturePath = "CurveAcceptAll2.png"
'        Case OID_ACCEPT:
'            aWidth = 100
'            aPicturePath = "CurveAccept.png"
'        Case OID_CURVE_NAME:
'            aWidth = 0 '
'            aHeight = 0 '
        Case OID_CONTRACT_START_PLUS, OID_CONTRACT_END_PLUS:
            aPicturePath = "CurvePlus.png"
        Case OID_CONTRACT_START_MINUS, OID_CONTRACT_END_MINUS:
            aPicturePath = "CurveMinus.png"
'        Case OID_MIN_CONTRACT_DATE, OID_MAX_CONTRACT_DATE:
'            aWidth = 68
'            aHeight = 16
    End Select
End Sub

Private Sub m_Imager_OnImageBackColor(sender As Object, ByVal aTarget As Integer, bkColor As Long)
'    Select Case aTarget
'        Case OID_MIN_CONTRACT_DATE, OID_MAX_CONTRACT_DATE:
'            'bkColor = m_Sheet.Cells(BSConsts.CURVE_SINGLE_START_ROW, 1).Interior.color
'            bkColor = xlNone 'm_dataRgn.Cells(1, 1).Interior.color
'        Case Else:
            bkColor = RGB(255, 255, 255) 'BSConsts.CURVE_ROW_HEADER_COLOR
'    End Select
End Sub

Private Sub m_Imager_OnImagePlacement(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aTop As Single, aLeft As Single, aWidth As Single, aHeight As Single)
 Dim row As Long
 Dim t1 As Variant
 
    t1 = 23
    row = GetColIndex(aUserData)
    aWidth = -1
    aHeight = -1
    
    Select Case aTarget
        Case OID_EDIT_SETTINGS:
            With m_sheet.Cells(4, 1)
                .value = " "
                aTop = .top + 3
                aLeft = .left + 5
            End With
            
        Case OID_CONTRACT_RANGE:
            With m_sheet.Cells(4, 1)
                aTop = .top + 3
                aLeft = .left + IIf(m_params.AllCurvesRD(), 5, 78)
            End With
            
        Case OID_DOWNLOAD_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + 5
            End With
            
        Case OID_UPLOAD_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + 78
            End With
            
        Case OID_ACCEPT_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + IIf(m_params.AllCurvesRD(), 78, 150)
            End With
            
        Case OID_CONTRACT_START_PLUS:
            Call GetContractControlPos(True, True, aTop, aLeft)
        Case OID_CONTRACT_START_MINUS:
            Call GetContractControlPos(True, False, aTop, aLeft)
        Case OID_CONTRACT_END_PLUS:
            Call GetContractControlPos(False, True, aTop, aLeft)
        Case OID_CONTRACT_END_MINUS:
            Call GetContractControlPos(False, False, aTop, aLeft)
    End Select
End Sub

Private Sub GetContractControlPos(ByVal isHead As Boolean, ByVal isPlus As Boolean, aTop As Single, aLeft As Single)
 Dim pc As Long
 Dim dc As Long
    
    pc = m_params.PropertyCount
    dc = m_params.rowCount - 1
    
    With m_sheet.Cells(m_SplitRows - 1, IIf(isHead, m_SplitCols + 1 + pc + 1, m_SplitCols + pc + 1 + dc))
        aTop = .top + 5
        aLeft = .left + IIf(isHead, 0, .Width) + IIf(isPlus, 10, 20) * IIf(isHead, 1, -1)
    End With
End Sub

'Private Sub GetTailContractControlPos(ByVal isPlus As Boolean, aTop As Single, aLeft As Single)
'    With m_sheet.Cells(C_FIXED_ROWS - 1, m_dataRgn.Columns.count)
'        aTop = .top + 5
'        aLeft = .left + .Width - IIf(isPlus, 10, 20)
'    End With
'End Sub

Private Function GetColIndex(ByVal aUserData As String) As Long
    If aUserData <> vbNullString Then
        GetColIndex = Val(aUserData) + 1
    Else
        GetColIndex = -1
    End If
End Function

Private Sub m_Imager_OnMacro(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aMacro As String)
 Dim idx As Long
 Dim curves() As String

    curves = m_params.curves
    idx = GetColIndex(aUserData) - 1
    aMacro = vbNullString

    Select Case aTarget
        Case OID_DOWNLOAD_ALL:
            aMacro = MacroActionStr("MacroDownloadAllS")
        Case OID_ACCEPT_ALL:
            aMacro = MacroActionStr("MacroAcceptAll")
        Case OID_UPLOAD_ALL:
            aMacro = MacroActionStr("MacroUploadAllS")
        Case OID_EDIT_SETTINGS:
            aMacro = MacroActionStr("MacroEditDateSettingsS")
        Case OID_CONTRACT_RANGE:
            aMacro = MacroActionStr("MacroContractS")
        Case OID_CONTRACT_START_PLUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_START_PLUS)
        Case OID_CONTRACT_START_MINUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_START_MINUS)
        Case OID_CONTRACT_END_PLUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_END_PLUS)
        Case OID_CONTRACT_END_MINUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_END_MINUS)
'        Case OID_LAST_DOWNLOAD:
'            aMacro = MacroActionStr("MacroDownloadS", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'        Case OID_LAST_UPLOAD:
'            aMacro = MacroActionStr("MacroUploadS", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'        Case OID_ACCEPT:
'            If CCurveControl.ShowAccept(idx) Then
'                aMacro = MacroActionStr("MacroAccept", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'            End If
    End Select
End Sub

'Private Sub DrawTimes(ByVal aIndex As Long, ByVal aIsDownload As Boolean)
' Dim tv As Double
'
'    If Not CCurveControl.GetAccessTimeToDraw(m_params, aIndex, aIsDownload, tv) Then Exit Sub
'    Call CCurveControl.DrawAccessTime(m_dataRgn.Cells(aIndex + 2, 4), tv, aIsDownload, xlLeft)
'End Sub

'Private Sub GetContractDates(minDate As String, maxDate As String)
'    minDate = "--- -- ----"
'    maxDate = minDate
'End Sub

Private Sub m_Imager_OnText(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aText As String, ByRef aBold As Boolean, ByRef aToolTip As String, ByRef aTop As Long, ByRef aLeft As Long)
 Dim pos As Long
 Dim maxdte As String
 Dim mindte As String
 
    If IsNumeric(aUserData) Then
        pos = CLng(aUserData)
    End If
'    col = 2 * GetColIndex(aUserData)
    
    aText = vbNullString
    aBold = False
    aToolTip = vbNullString
    
'    Select Case aTarget
'        Case OID_DOWNLOAD_ALL:
'        Case OID_ACCEPT_ALL:
'        Case OID_UPLOAD_ALL:
'            'aText = "  Upload All"
'        Case OID_EDIT_DATE:
'            'aText = "  Edit Effective Date"
''        Case OID_CONTRACT:
'        Case OID_ACCEPT:
''            Call DrawVR(pos)
'        Case OID_CURVE_NAME:
'            aToolTip = m_params.GetTooltipByPosition(pos)
'            aTop = m_dataRgn.row + pos + 1
'            aLeft = C_FIXED_COLS
'
''        Case OID_MIN_CONTRACT_DATE:
''            Call GetContractDates(mindte, maxdte)
''            aText = mindte
''        Case OID_MAX_CONTRACT_DATE:
''            Call GetContractDates(mindte, maxdte)
''            aText = maxdte
'    End Select
End Sub

'Private Sub AddNewContracts(ByVal aPrior As Integer, dispDates() As Double, ByVal length As Long)
' Dim rgn As range
' Dim splitrows As Long
' Dim splitcols As Long
'
'    Call CCurveControl.GetSplits(m_sheet, m_params, splitrows, splitcols)
'    splitcols = splitcols + m_params.PropertyCount + 1
'
'    If aPrior <= 0 Or aPrior = -2 Then Call AddDataGroup(False)
'
'    With m_dataRgn
'        Select Case aPrior
'            Case -1:
'                Set rgn = .offset(, splitcols).Resize(, length)
'                Call rgn.EntireColumn.Insert
'                rgn.offset(, -length).Interior.ColorIndex = xlNone
'
'            Case 1:
'                Set rgn = .offset(, .Columns.count - length).Resize(, length)
'                Call rgn.EntireColumn.Insert
'                Call CCurveControl.Remove4EyesStyle(rgn.offset(, -length))
'
'            Case 0:
'                Set rgn = .offset(, splitcols).Resize(, length)
'                Call rgn.EntireColumn.Insert
'                rgn.offset(, -length).Interior.ColorIndex = xlNone
'
'            Case -2:
'                If .Columns.count = splitcols Then Exit Sub
'                Set rgn = .offset(, splitcols).Resize(, 1)
'                Call rgn.EntireColumn.Delete
'
'                Call AddDataGroup(True)
'                Exit Sub
'            Case 2:
'                If .Columns.count = splitcols Then Exit Sub
'                Set rgn = .offset(, .Columns.count).Resize(, 1)
'                Call rgn.EntireColumn.Delete
'
'                Exit Sub
'        End Select
'    End With
'
'    Set rgn = rgn.offset(, -length).Resize(1)
'    Call CCurveControl.SetDateVaules(m_params.granularities, rgn.Resize(, length), dispDates)
'    Call CCurveControl.SetSOCValueFormats(-1, rgn.offset(1).Resize(1), m_params)
'
'    Call AddDataGroup(True)
'End Sub

'Private Sub DrawObjectAccept(ByVal aCurveName As String, ByVal aPos As Long)
'    Call DrawVR(aPos)
    
'    If m_params.Readonly(aPos) Then Exit Sub
'    If Not CCPVRStorage.VRExists(m_sheet, aCurveName) Then Exit Sub

'    If Not CCurveControl.ShowAccept(aPos) Then
'        Call CCurveControl.EraseAccepts(m_Imager, aPos)
'        Exit Sub
'    End If
    
'    Call DrawIcon(OID_ACCEPT, aPos, aCurveName, AT_ACCEPT)
'End Sub

Attribute VB_Name = "CCnvtCP419_TimeSeriesTRANS2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 0

Private m_sheet As Worksheet
Private WithEvents m_Imager As CCurveImageText
Attribute m_Imager.VB_VarHelpID = -1
Private m_params As New CCurveParams
Private m_SplitRows As Long
Private m_SplitCols As Long
'Private m_dataRgn As range
'Private m_HeaderRgn As range
'
'Private Const C_FIXED_COLS As Long = 6
'Private Const C_FIXED_ROWS As Long = 6
'
Private Const OID_DOWNLOAD_ALL As Integer = 1
Private Const OID_UPLOAD_ALL As Integer = 2
Private Const OID_EDIT_SETTINGS As Integer = 3
Private Const OID_OPR_RANGE As Integer = 4
''Private Const OID_LAST_DOWNLOAD As Integer = 5
''Private Const OID_LAST_UPLOAD As Integer = 6
'Private Const OID_VIEW_HISTORY As Integer = 7
''Private Const OID_DELETE As Integer = 8
'Private Const OID_CURVE_NAME As Integer = 9
Private Const OID_OPR_START_PLUS As Integer = 11
Private Const OID_OPR_START_MINUS As Integer = 12
Private Const OID_OPR_END_PLUS As Integer = 13
Private Const OID_OPR_END_MINUS As Integer = 14
'Private Const OID_OPR_MAX_DATE As Integer = 15
'Private Const OID_OPR_MIN_DATE As Integer = 16

Private Const ALT_OPR_HEAD_PLUS As String = "New opr"
Private Const ALT_OPR_HEAD_MINUS As String = "Delete first opr"
Private Const ALT_OPR_TAIL_PLUS As String = "New opr to the end"
Private Const ALT_OPR_TAIL_MINUS As String = "Delete last opr"

Public Sub Execute()
    Call CCnvtCommon.GetSplits(ActiveSheet, Nothing, m_SplitRows, m_SplitCols)
    
    Set m_sheet = ActiveSheet
    Set m_Imager.sheet = m_sheet
    
    Set m_params = New CCurveParams
    Call m_params.FromXML(CCnvtCommon.GetPropertyStr())

    Set m_Imager.sheet = m_sheet
    Set m_Imager.m_params = m_params
    
    Call DeleteImages
    
    Call Restyle
    Call AddGroups
    Call DrawControls
    
    m_params.flagValues = CCnvtCommon.CPGetNewSheetVersion(m_params.flagValues, CURVE_FLG_V2)
    Call CCnvtCommon.SaveCurveProperties(m_params)
End Sub

Private Sub DeleteImages()
' Dim k As Long
 Dim cvrs() As String

    cvrs = m_params.curves
    
'    For k = LBound(cvrs) To UBound(cvrs)
        Call CCnvtCommon.DeleteCurveIcons(cvrs, AT_HISTORY, AT_DELETE, AT_DOWNLOAD, AT_UPLOAD, AT_ACCEPT, AT_NAME)
'    Next
End Sub

Private Sub Restyle()
' Dim k As Long
 Dim f As Variant
' Dim row As Long
' Dim dtacols As Long
'
'    With m_HeaderRgn
'        dtacols = .Columns.count - C_FIXED_COLS
'        If dtacols > 0 Then Call .offset(, C_FIXED_COLS).Resize(, dtacols).Clear
'
'        .Cells(1, 1).RowHeight = 40
'        For f = 2 To .rows.count
'             .Cells(f, 1).RowHeight = 18
'        Next
'
'        m_sheet.rows(1).Interior.color = RGB(&H0, &H52, &H93)
'
'        With .rows(1)
'            .Borders(xlEdgeBottom).LineStyle = xlContinuous
'            .Borders(xlEdgeBottom).Weight = xlThick
'            '.Borders(xlEdgeBottom).ColorIndex = 10
'            .Borders(xlEdgeBottom).color = RGB(&H5E, &HB6, &HE4)
'        End With
'
'        If dtacols > 0 Then
'            With .offset(, C_FIXED_COLS).Resize(, dtacols)
'                .Borders(xlEdgeRight).LineStyle = XlLineStyle.xlLineStyleNone
'            End With
'        End If
'
'        If .Columns.count > C_FIXED_COLS Then
'            With .offset(, C_FIXED_COLS).Resize(, .Columns.count - C_FIXED_COLS)
'                .Borders(xlEdgeRight).LineStyle = XlLineStyle.xlLineStyleNone
'            End With
'        End If
'
'        .offset(1).Interior.color = RGB(255, 255, 255)
'
'        .Columns(.Columns.count).Borders(xlEdgeRight).LineStyle = xlContinuous
'        .Columns(.Columns.count).Borders(xlEdgeRight).Weight = xlThin
'    End With
'
    With m_sheet.Cells(2, 1).Resize(m_SplitRows - 1, m_SplitCols)

        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).Weight = xlHairline
        .Borders(xlInsideHorizontal).color = RGB(&HD9, &HD9, &HD9)

        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlHairline
        .Borders(xlEdgeBottom).color = RGB(&HD9, &HD9, &HD9)
    End With
'
    With m_sheet.Cells(m_SplitRows - 1, 1).Resize(, m_SplitCols + m_params.PropertyCount + m_params.rowCount - 1)
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).Weight = xlThin
    End With
'
'    With m_dataRgn
'        .Cells(1, 1).RowHeight = 34
'
'        .rows(1).Interior.color = CURVE_COLUMN_HEADER_COLOR2
'
'        With .rows(1)
'            .HorizontalAlignment = xlCenter
'            .VerticalAlignment = xlCenter
'            .WrapText = False
'            .Orientation = 0
'            .AddIndent = False
'            .IndentLevel = 0
'            .ShrinkToFit = False
'            .ReadingOrder = xlContext
'            '.MergeCells = False
'        End With
'
'        For Each f In .Columns
'            Select Case f.column
'                Case 1, 2:
'                    If isNewFlg = 1 Then f.ColumnWidth = 3
'                Case 3:
'                    If isNewFlg = 1 Then f.ColumnWidth = 4 '13
'                Case 4:
'                    If isNewFlg = 1 Then f.ColumnWidth = 16
'                Case C_FIXED_COLS - 1:
'                    If isNewFlg = 1 Then Call ResizeVRCol 'IIf(CCurveControl.ShowAcceptAll() And Not m_params.AllCurvesRD(), 32, 8)
'                Case C_FIXED_COLS:
'                    If isNewFlg = 1 Then f.ColumnWidth = 3 'CCurveControl.GetNameWidth(m_params)
'                Case Else:
'                    If isNewFlg = 1 Or (f.column > C_FIXED_COLS + m_params.PropertyCount) Then
'                        f.ColumnWidth = 20
'                    End If
'            End Select
'
'            Select Case f.column
'                Case 1, 2, 4:
''                    f.Borders(xlEdgeRight).LineStyle = xlContinuous
''                    f.Borders(xlEdgeRight).Weight = xlHairline
'                Case Is >= C_FIXED_COLS:
'                    f.Borders(xlEdgeRight).LineStyle = xlContinuous
'                    f.Borders(xlEdgeRight).Weight = IIf(f.column = .Columns.count, xlThin, xlHairline)
'            End Select
'        Next
'
'        With .offset(1, 1).Resize(.rows.count - 1, 3)
'            .Borders(xlEdgeRight).LineStyle = xlContinuous
'            .Borders(xlEdgeRight).Weight = xlHairline
'        End With
''
'        With .offset(1).Resize(.rows.count - 1)
'            .Borders(xlInsideHorizontal).LineStyle = xlContinuous
'            .Borders(xlInsideHorizontal).Weight = xlThin
'            .Borders(xlInsideHorizontal).color = RGB(210, 210, 210)
'
'            .Borders(xlEdgeBottom).LineStyle = xlContinuous
'            .Borders(xlEdgeBottom).Weight = xlThin
'            .Borders(xlEdgeBottom).color = RGB(210, 210, 210)
'        End With
''
'''        For k = 2 To .rows.count
'''             .offset(k - 1, C_FIXED_COLS).Resize(1, .Columns.count - C_FIXED_COLS).Interior.color = _
'''                            IIf(m_params.Readonly(k - 2), BSConsts.CURVE_COLUMN_HEADER_COLOR2, IIf((k Mod 2 = 1), BSConsts.CURVE_ROW_ODD_COLOR, CURVE_ROW_EVEN_COLOR))
'''        Next
'''
'''        For k = 2 To .rows.count
'''             .offset(k - 1, C_FIXED_COLS).Resize(1, m_params.PropertyCount + 1).Interior.color = IIf(m_params.Readonly(k - 2), BSConsts.CURVE_COLUMN_HEADER_COLOR2, BSConsts.CURVE_COLUMN_HEADER_COLOR)
'''        Next
'
'        .offset(1).Resize(.rows.count - 1, C_FIXED_COLS).Interior.color = RGB(&HFF, &HFF, &HFF)
'    End With
    For Each f In m_sheet.Columns
        Select Case f.Column
'            Case 1, 2:
'                f.ColumnWidth = 3
'            Case 3:
'                f.ColumnWidth = 4 '13
'            Case 4:
'                f.ColumnWidth = 16
'            Case C_FIXED_COLS - 1:
'                If isNewFlg = 1 Then Call ResizeVRCol 'IIf(CCurveControl.ShowAcceptAll() And Not m_params.AllCurvesRD(), 32, 8)
            Case m_SplitCols:
                f.ColumnWidth = 3 'CCurveControl.GetNameWidth(m_params)
                Exit For
        End Select
    Next
End Sub

Private Sub AddDataGroup(ByVal isGroup As Boolean)
    If isGroup Then
        If m_params.PropertyCount = 0 Then isGroup = False
    End If
    If m_params.PropertyCount > 0 Then
        Call CCurveHelper.GroupColumns(m_sheet, m_SplitCols + 1, m_SplitCols + m_params.PropertyCount, isGroup)
    End If
End Sub

Private Sub AddGroups()
    Call CCurveHelper.GroupColumns(m_sheet, 4, 5, True)
    Call AddDataGroup(True)
    
    Call CCurveHelper.CollapseGroups(m_sheet)
End Sub

Private Sub DrawIcon(ByVal aObjectID As Long, ByVal aPos As Long, ByVal aCurveName As String, ByVal aAlternativeText As String)
    With m_Imager
        .AlternativeText = CCnvtCommon.GetAltText(aCurveName, aAlternativeText)
        Call .Draw(aObjectID, CStr(aPos))
    End With
End Sub

''Private Sub DrawObjectDownload(ByVal aCurveName As String, ByVal aPos As Long)
''    Call DrawIcon(OID_LAST_DOWNLOAD, aPos, aCurveName, AT_DOWNLOAD)
''End Sub
''
''Private Sub DrawObjectUpload(ByVal aCurveName As String, ByVal aPos As Long)
''    Call DrawIcon(OID_LAST_UPLOAD, aPos, aCurveName, AT_UPLOAD)
''End Sub

'Private Sub DrawDateRange()
'    Call CCurveControl.DrawStyledTexts(m_sheet, 2, 1, " Opr Dates:  ", CCurveDates.DisplayTime(m_params.OprStartDate, False) + "  " + "-" + "  " + CCurveDates.DisplayTime(m_params.OprEndDate, False))
'End Sub

Private Sub DrawInterval()
'Dim dtz As Boolean
'
'    dtz = CCurveGranularity.IsGranularity(m_params.granularities, CURVE_GRANULARITY_HOURLY) Or CCurveGranularity.IsGranularity(m_params.granularities, CURVE_GRANULARITY_MINUTELY)
'    dtz = IIf(dtz And m_params.TZName <> vbNullString And (m_params.IsFlag(CURVE_FLG_DST_ADJUST_START) Or m_params.IsFlag(CURVE_FLG_DST_ADJUST_END)), True, False)
'    Call CCurveControl.DrawStyledTexts(m_sheet, 2, 1, " Interval:  ", CCurveGranularity.GetGranularityName(m_params.granularities), IIf(dtz, "   (" + m_params.TZName + ")", vbNullString))
End Sub

'Private Sub DrawContractDatesForMP()
'    With m_Imager
'        Call .Draw(OID_OPR_MAX_DATE, vbNullString)
'        Call .Draw(OID_OPR_MIN_DATE, vbNullString) '
'    End With
'End Sub

Private Sub DrawControls()
 Dim k As Long
 Dim curves() As String

    Call DrawInterval
    
    curves = m_params.curves
'    groups = m_params.CurveGroups
    For k = LBound(m_params.curves) To UBound(m_params.curves)
        'Call DrawIcon(OID_VIEW_HISTORY, k, groups(k), curves(k), AT_HISTORY)
        
''        Call DrawObjectDownload(curves(k), k)
'        If Not m_params.Readonly(k) Then
''            Call DrawObjectUpload(curves(k), k)
'            Call DrawIcon(OID_SORT, k, groups(k), curves(k), AT_SORT)
'        End If
        
''        Call DrawIcon(OID_DELETE, k, curves(k), AT_DELETE)
        
        Call DrawCurveName(k, curves)
'        Call DrawVR(k)
'        Call DrawIcon(OID_CURVE_NAME, k, curves(k), AT_NAME)
        
''        Call DrawObjectAccept(curves(k), k)
    Next
    
    With m_Imager
        .AlternativeText = vbNullString
        
        Call .DeleteImage(OID_DOWNLOAD_ALL)
        Call .Draw(OID_DOWNLOAD_ALL, vbNullString)
        
        Call .DeleteImage(OID_EDIT_SETTINGS)
        Call .Draw(OID_EDIT_SETTINGS, vbNullString)
        
        If .DeleteImage(OID_UPLOAD_ALL) Then
            Call .Draw(OID_UPLOAD_ALL, vbNullString)
        End If
        
        If .DeleteImage(OID_OPR_RANGE) Then
            Call .Draw(OID_OPR_RANGE, vbNullString)
        End If
        
        If .DeleteImage(OID_ACCEPT_ALL) Then
            Call .Draw(OID_ACCEPT_ALL, vbNullString)
        End If

        If m_params.rowCount >= 2 And .DeleteImage(OID_OPR_START_PLUS) Then
            Call .Draw(OID_OPR_START_PLUS, ALT_OPR_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_OPR_START_MINUS) Then
            Call .Draw(OID_OPR_START_MINUS, ALT_OPR_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_OPR_END_PLUS) Then
            Call .Draw(OID_OPR_END_PLUS, ALT_OPR_HEAD_PLUS, xlMove)
        End If
        
        If m_params.rowCount >= 2 And .DeleteImage(OID_OPR_END_MINUS) Then
            Call .Draw(OID_OPR_END_MINUS, ALT_OPR_HEAD_PLUS, xlMove)
        End If
    End With
End Sub

'Private Sub AddOprControls()
'    Call CCurveControl.DeleteCurveIconsByID(m_Imager, OID_OPR_START_PLUS, OID_OPR_START_MINUS, OID_OPR_END_PLUS, OID_OPR_END_MINUS)
'
'    With m_Imager
'        If m_params.rowCount >= 2 Then
'            Call .Draw(OID_OPR_START_PLUS, ALT_OPR_HEAD_PLUS, xlMove)
'            Call .Draw(OID_OPR_START_MINUS, ALT_OPR_HEAD_MINUS, xlMove)
'            Call .Draw(OID_OPR_END_PLUS, ALT_OPR_TAIL_PLUS, xlMove)
'            Call .Draw(OID_OPR_END_MINUS, ALT_OPR_TAIL_MINUS, xlMove)
'        End If
'    End With
'End Sub

Private Sub DrawCurveName(ByVal aPos As Long, curveNames() As String)
 Dim w As Long
 Dim w0 As Long
 Dim r As Long
 
    If aPos = 0 Then
        m_sheet.Cells(m_SplitRows, m_SplitCols).value = vbNullString
        
        With m_sheet.Cells(m_SplitRows, 1).Resize(1, 2)
            .Merge
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .value = "Curve Name"
        End With
        
        w = CCnvtCommon.GetNameWidth(m_params)
        w0 = Len("Effective Date: ")
        m_sheet.Columns(1).ColumnWidth = w0
        m_sheet.Columns(2).ColumnWidth = IIf(w < 28, 28, w) - w0
        
        With m_sheet.Cells(m_SplitRows + 1, 1).Resize(UBound(curveNames) - LBound(curveNames) + 1, 2)
            .HorizontalAlignment = xlLeft
            .VerticalAlignment = xlCenter
            .IndentLevel = 1
            .ShrinkToFit = False
            .WrapText = False
            .NumberFormat = "@"
            Call .Merge(Across:=True)
        End With
        
        With m_sheet.Cells(m_SplitRows + 1, m_SplitCols).Resize(UBound(curveNames) - LBound(curveNames) + 1)
            .Interior.ColorIndex = xlNone
        End With
    End If
    
    r = m_SplitRows + aPos + 1
    m_sheet.Cells(r, 1).value = CCnvtCommon.AddApostrophe(curveNames(aPos))
    m_sheet.Cells(r, m_SplitCols).value = vbNullString
End Sub

Private Sub Class_Initialize()
    Set m_Imager = New CCurveImageText
End Sub

Private Sub Class_Terminate()
    Set m_Imager = Nothing
End Sub

Private Sub m_Imager_OnImage(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aPicturePath As String, ByRef aWidth As Single, ByRef aHeight As Single)
    aPicturePath = vbNullString
    aWidth = 95
    aHeight = 18
    
    Select Case aTarget
        Case OID_EDIT_SETTINGS:
            aWidth = 140
            aPicturePath = "CurveEditDateSettings2.png"
        Case OID_OPR_RANGE:
            aWidth = 140
            aPicturePath = "OprDateRange2.png"
        Case OID_DOWNLOAD_ALL:
            aWidth = 100
            aPicturePath = "CurveDownloadAll2.png"
'        Case OID_LAST_UPLOAD:
'            aWidth = 110
'            aPicturePath = "CurveLastUpload.png"
        Case OID_UPLOAD_ALL:
            aWidth = 100
            aPicturePath = "CurveUploadAll2.png"
'        Case OID_VIEW_HISTORY:
'            aWidth = 110
'            aPicturePath = "CurveViewHistory.png"
'        Case OID_DELETE:
'            aPicturePath = "CurveDelete.png"
'        Case OID_SORT:
'            aPicturePath = IIf(aUserData = vbNullString, "filter.png", "filter.png")
'        Case OID_CURVE_NAME:
'            aWidth = 0 '
'            aHeight = 0 '
'        Case OID_OPR_START_PLUS, OID_OPR_END_PLUS:
'            aPicturePath = "CurvePlus.png"
'        Case OID_OPR_START_MINUS, OID_OPR_END_MINUS:
'            aPicturePath = "CurveMinus.png"
'        Case OID_OPR_MIN_DATE, OID_OPR_MAX_DATE:
'            aWidth = 68
'            aHeight = 16
        Case OID_ACCEPT_ALL:
            aWidth = 100
            aPicturePath = "CurveAcceptAll2.png"
'        Case OID_ACCEPT:
'            aWidth = 100
'            aPicturePath = "CurveAccept.png"
        Case OID_OPR_START_PLUS, OID_OPR_END_PLUS:
            aPicturePath = "CurvePlus.png"
        Case OID_OPR_START_MINUS, OID_OPR_END_MINUS:
            aPicturePath = "CurveMinus.png"
    End Select
End Sub

Private Sub m_Imager_OnImageBackColor(sender As Object, ByVal aTarget As Integer, bkColor As Long)
'    Select Case aTarget
'        Case OID_OPR_MIN_DATE, OID_OPR_MAX_DATE:
'            'bkColor = m_Sheet.Cells(BSConsts.CURVE_SINGLE_START_ROW, 1).Interior.color
'            bkColor = xlNone 'm_dataRgn.Cells(1, 1).Interior.color
'        Case Else:
            bkColor = RGB(255, 255, 255) 'BSConsts.CURVE_ROW_HEADER_COLOR
'    End Select
End Sub

Private Sub m_Imager_OnImagePlacement(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aTop As Single, aLeft As Single, aWidth As Single, aHeight As Single)
 Dim row As Long
 Dim t1 As Variant
 
    t1 = 23
    row = GetColIndex(aUserData)
    aWidth = -1
    aHeight = -1
    
    Select Case aTarget
        Case OID_OPR_RANGE:
            With m_sheet.Cells(4, 1)
                aTop = .top + 3
                aLeft = .left + 78
            End With
        Case OID_EDIT_SETTINGS:
            With m_sheet.Cells(4, 1)
                aTop = .top + 3
                aLeft = .left + 5
            End With
        Case OID_DOWNLOAD_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + 5
            End With
            
        Case OID_UPLOAD_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + 78
            End With
            
        Case OID_ACCEPT_ALL:
            With m_sheet.Cells(5, 1)
                aTop = .top + 3
                aLeft = .left + IIf(m_params.AllCurvesRD(), 78, 150)
            End With
        
        Case OID_OPR_START_PLUS:
            Call GetOprControlPos(True, True, aTop, aLeft)
        Case OID_OPR_START_MINUS:
            Call GetOprControlPos(True, False, aTop, aLeft)
        Case OID_OPR_END_PLUS:
            Call GetOprControlPos(False, True, aTop, aLeft)
        Case OID_OPR_END_MINUS:
            Call GetOprControlPos(False, False, aTop, aLeft)
    End Select
End Sub

Private Sub GetOprControlPos(ByVal isHead As Boolean, ByVal isPlus As Boolean, aTop As Single, aLeft As Single)
 Dim pc As Long
 Dim dc As Long
    
    pc = m_params.PropertyCount
    dc = m_params.rowCount - 1
    
    With m_sheet.Cells(m_SplitRows - 1, IIf(isHead, m_SplitCols + pc + 1, m_SplitCols + pc + dc))
        aTop = .top + 5
        aLeft = .left + IIf(isHead, 0, .Width) + IIf(isPlus, 10, 20) * IIf(isHead, 1, -1)
    End With
End Sub

Private Function GetColIndex(ByVal aUserData As String) As Long
    If aUserData <> vbNullString Then
        GetColIndex = Val(aUserData) + 1
    Else
        GetColIndex = -1
    End If
End Function

Private Sub m_Imager_OnMacro(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aMacro As String)
 Dim idx As Long
 Dim curves() As String
 
    curves = m_params.curves
    idx = GetColIndex(aUserData) - 1
    aMacro = vbNullString

    Select Case aTarget
        Case OID_DOWNLOAD_ALL:
            aMacro = MacroActionStr("MacroDownloadAllS")
        Case OID_ACCEPT_ALL:
            aMacro = MacroActionStr("MacroAcceptAll")
        Case OID_UPLOAD_ALL:
            aMacro = MacroActionStr("MacroUploadAllS")
        Case OID_EDIT_SETTINGS:
            aMacro = MacroActionStr("MacroEditDateSettingsS")
        Case OID_OPR_RANGE:
            aMacro = MacroActionStr("MacroContractS")
            
        Case OID_OPR_START_PLUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_START_PLUS)
        Case OID_OPR_START_MINUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_START_MINUS)
        Case OID_OPR_END_PLUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_END_PLUS)
        Case OID_OPR_END_MINUS:
            aMacro = CCnvtCommon.OnPlusMinusAction(CURVE_UI_CONTRACTS_END_MINUS)
'        Case OID_LAST_DOWNLOAD:
'            aMacro = MacroActionStr("MacroDownloadS", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'        Case OID_LAST_UPLOAD:
'            aMacro = MacroActionStr("MacroUploadS", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'        Case OID_DELETE:
'            aMacro = MacroActionStr("MacroDeleteS", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'        Case OID_ACCEPT:
'            If CCurveControl.ShowAccept(idx) Then
'                aMacro = MacroActionStr("MacroAccept", CURVE_GRP_NAME, curves(idx), CDDXHelper.NewGUID())
'            End If
    End Select
End Sub

'Private Sub DrawTimes(ByVal aIndex As Long, ByVal aIsDownload As Boolean)
' Dim tv As Double
'
'    If Not CCurveControl.GetAccessTimeToDraw(m_params, aIndex, aIsDownload, tv) Then Exit Sub
'    Call CCurveControl.DrawAccessTime(m_dataRgn.Cells(aIndex + 2, 4), tv, aIsDownload, xlLeft)
'End Sub

'Private Sub GetContractDates(minDate As String, maxDate As String)
'    minDate = "--- -- ----"
'    maxDate = minDate
'End Sub

Private Sub m_Imager_OnText(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, aText As String, ByRef aBold As Boolean, ByRef aToolTip As String, ByRef aTop As Long, ByRef aLeft As Long)
 Dim pos As Long
 Dim maxdte As String
 Dim mindte As String
 
    If IsNumeric(aUserData) Then
        pos = CLng(aUserData)
    End If

    aText = vbNullString
    aBold = False
    aToolTip = vbNullString
    
'    Select Case aTarget
'        Case OID_DOWNLOAD_ALL:
'        Case OID_ACCEPT_ALL:
'        Case OID_UPLOAD_ALL:
            'aText = "  Upload All"
'        Case OID_EDIT_DATE:
            'aText = "  Edit Effective Date"
'        Case OID_CONTRACT:
         
'        Case OID_VIEW_HISTORY:
            'aText = "  View History"
'        Case OID_LAST_DOWNLOAD:
'            'aText = "  Download" '+ du
'
'            Call DrawTimes(pos, True)
'        Case OID_LAST_UPLOAD:
'            'aText = "  Upload" '+ du
'
'            Call DrawTimes(pos, False)
'        Case OID_CURVE_NAME:
'            'aToolTip = m_params.GetTooltipByPosition(pos)
'            aTop = m_dataRgn.row + pos + 1
'            aLeft = C_FIXED_COLS + 1
            
'        Case OID_OPR_MIN_DATE:
'            Call GetContractDates(mindte, maxdte)
'            aText = mindte
'        Case OID_OPR_MAX_DATE:
'            Call GetContractDates(mindte, maxdte)
'            aText = maxdte
'        Case OID_ACCEPT:
'            Call DrawVR(pos)
'    End Select
End Sub
Attribute VB_Name = "CCnvtCommon"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_sysDFormat As String

Public Function CPGetSheetVersion(ByVal fvs As Long) As Long
    CPGetSheetVersion = fvs \ 2 ^ 28
End Function

Public Function CPGetNewSheetVersion(ByVal fvs As Long, ByVal newVer As Long) As Long
    CPGetNewSheetVersion = (fvs And &HFFFFFFF) Or newVer
End Function

Public Function GetWnd(sheet As Worksheet) As Window
 Dim win As Window
 Dim sht As Variant
 Dim k As Integer
    
    For Each win In sheet.parent.Windows
        For k = 1 To win.SheetViews.Count
            If LCase(TypeName(win.SheetViews.item(k).sheet)) = "worksheet" Then
                If win.SheetViews.item(k).sheet.name = sheet.name Then
                    Set GetWnd = win
                    Exit Function
                End If
            End If
        Next
    Next
End Function

Public Function GetAltText(ByVal cvrName As String, ByVal promptText As String) As String
    GetAltText = IIf(cvrName = vbNullString, vbNullString, cvrName + " - ") + promptText
End Function

Private Sub SortAlts(alt() As String)
 Dim k As Long
 Dim endp As Long
 Dim p As Long
 Dim j As Long
 Dim tmp As String
 
    endp = UBound(alt)
    If endp = 0 Then Exit Sub
    
    For k = 0 To endp - 1
        p = k
        For j = k + 1 To endp
            If StrComp(alt(p), alt(j)) > 0 Then
                p = j
            End If
        Next
        
        If p <> k Then
            tmp = alt(k)
            alt(k) = alt(p)
            alt(p) = tmp
        End If
    Next
End Sub

Public Sub DeleteCurveIcons(aCurveNames() As String, ParamArray alts() As Variant)
 Dim shp As Shape
 Dim texts() As String
 Dim i As Long
 Dim k As Long
 Dim startp As Long
 Dim endp As Long
 Dim rlt As Long
 Dim p As Long
 Dim nm As String
 
    'ReDim texts(LBound(alts) To UBound(alts))
    ReDim texts(0 To (UBound(alts) + 1) * (UBound(aCurveNames) + 1) - 1)
    
    p = 0
    For i = LBound(aCurveNames) To UBound(aCurveNames)
        For k = LBound(alts) To UBound(alts)
            texts(p) = GetAltText(aCurveNames(i), alts(k))
            p = p + 1
        Next
    Next
    
    Call SortAlts(texts)

    For Each shp In ActiveSheet.Shapes
        nm = shp.AlternativeText
        
        startp = LBound(texts)
        endp = UBound(texts)
        
        Do
            k = (startp + endp) \ 2
            
            rlt = StrComp(nm, texts(k))
            
            If rlt = 0 Then
                shp.Delete
                Exit Do
            End If
            
            If rlt < 0 Then
                endp = k - 1
            Else
                startp = k + 1
            End If
            
            If startp > endp Then Exit Do
        Loop
    Next
    
    Erase texts
End Sub

Public Function GetPropertyStr() As String
 Dim f As Variant
       
    For Each f In ActiveSheet.CustomProperties
        If StrComp(f.name, "CUR.CI", vbTextCompare) = 0 Then
            GetPropertyStr = Trim(f.value)
            Exit Function
        End If
    Next
End Function

Public Function AddApostrophe(str As String) As String
    If Len(str) = 0 Then
        AddApostrophe = str
    Else
        If left(str, 1) = "'" Then
            AddApostrophe = "'" + str
        Else
            AddApostrophe = str
        End If
    End If
End Function

Public Function GetNameWidth(params As CCurveParams) As Long
 Dim cns() As String
 Dim i As Long
 Dim w As Long
 
    cns = params.curves
    For i = LBound(cns) To UBound(cns)
        w = Len(cns(i))
        If w > GetNameWidth Then GetNameWidth = w
    Next
    
    If GetNameWidth <= 12 Then
        GetNameWidth = 14
    Else
        GetNameWidth = GetNameWidth + 2
    End If
End Function

Public Sub SaveCurveProperties(params As CCurveParams)
    If (params.flagValues \ 2 ^ 28) = 0 Then
        params.flagValues = (params.flagValues Or CURVE_FLG_V1)
    End If
    
    Call SetProperty(CURVE_SHEET_INFO, params.ToXML())
End Sub

Public Sub SetProperty(ByVal aProp As String, newValue As String)
 Dim f As Variant

    For Each f In ActiveSheet.CustomProperties
        If StrComp(f.name, aProp, vbTextCompare) = 0 Then
            f.value = newValue
            Exit Sub
        End If
    Next
End Sub

Public Function GetFVS(sht As Worksheet) As Long
    On Error GoTo OOPS
    
    GetFVS = Int(Val(CSheet.WSGetProp(sht, CURVE_SHEET_FLAGVALUES)))
    
OOPS:
    On Error GoTo 0
    Exit Function
End Function

Public Sub Unprotect(sht As Worksheet)
    On Error GoTo OOPS
    
    If sht Is Nothing Then Set sht = ActiveSheet

    Call sht.Unprotect(CURVE_SHEET_PASSWORD)

OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description)
    End If
    On Error GoTo 0
    Exit Sub
End Sub

Public Sub Protect(sht As Worksheet)
 Dim fvs As Long
 
    On Error GoTo OOPS
      
    fvs = GetFVS(sht)
    
    If CPGetSheetVersion(fvs) <= CPGetSheetVersion(CURVE_FLG_V1) Then
        sht.Protect DrawingObjects:=True, UserInterfaceOnly:=True, AllowFormattingCells:=IIf((fvs And CURVE_FLG_EDIT_DATES) <> 0, True, False), Password:=CURVE_SHEET_PASSWORD
    Else
        sht.Protect UserInterfaceOnly:=True, Password:=CURVE_SHEET_PASSWORD
        sht.EnableOutlining = True
    End If
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description)
    End If
    On Error GoTo 0
    Exit Sub
End Sub

Public Function OnPlusMinusAction(actionID As Integer) As String
    OnPlusMinusAction = MacroActionStr("MacroContractPlusMinus", actionID, CStr(CDbl(Now)))
End Function

Private Property Get ApplicationDirectory() As String
 Dim tf As String
 Dim k As Long
 Dim cnt As Long
 
    'dest = Environ("ProgramFiles(X86)")
    tf = ThisWorkbook.FullName
    cnt = 0
    For k = Len(tf) To 1 Step -1
        If Mid(tf, k, 1) = "\" Then cnt = cnt + 1
        If cnt = 3 Then Exit For
    Next
    If k > 1 Then
        ApplicationDirectory = left(tf, k)
    End If
End Property

Public Function GetImagesDirectory() As String
    GetImagesDirectory = ApplicationDirectory + "images\"
End Function

Public Function EscXPATHExpr(ByVal value As String) As String
 Dim token As String
 Dim tmp As String
 Dim ary() As String
 Dim k As Integer
 Dim c As String

    If InStr(value, """") <= 0 Then
        EscXPATHExpr = """" + value + """"
        Exit Function
    End If
    If InStr(value, "'") <= 0 Then
        EscXPATHExpr = "'" + value + "'"
        Exit Function
    End If
          
    token = vbNullString
    tmp = vbNullString
    For k = 1 To Len(value)
        c = Mid(value, k, 1)
        If c = """" Then
            If Len(tmp) > 0 Then tmp = tmp + vbCr
            If token <> vbNullString Then tmp = tmp + token + vbCr
            tmp = tmp + c
            token = vbNullString
        Else
            token = token + c
        End If
    Next
    If token <> vbNullString Then
        If Len(tmp) > 0 Then tmp = tmp + vbCr
        tmp = tmp + token
    End If
          
    ary = Split(tmp, vbCr)
              
    token = "concat("
    For k = LBound(ary) To UBound(ary)
        If ary(k) = """" Then
            token = token + "'" + ary(k) + "'"
        Else
            token = token + """" + ary(k) + """"
        End If
        token = token + IIf(k = UBound(ary), ")", ",")
    Next
          
    EscXPATHExpr = token
End Function

Public Function ToLocalDate(ByVal aTimeStr As String) As Date
 Dim tokens() As String
 Dim y As Long
 Dim m As Long
 Dim d As Long
 
    If aTimeStr = vbNullString Then
        Exit Function
    End If
    
    If InStr(aTimeStr, " ") <= 0 Then
        ToLocalDate = CDate(CDbl(aTimeStr))
    
    Else
        tokens = Split(aTimeStr, " ")
        
        y = CLng(tokens(0))
        m = y Mod 10000
        d = m Mod 100
        m = m \ 100
        y = y \ 10000
        
        ToLocalDate = DateSerial(y, m, d)
    End If
End Function

Public Function ToHexStr(aNumber) As String
    ToHexStr = "&H" + Hex(aNumber) + "&"
End Function

Private Function IsGranularity(ByVal granularities As Long, ByVal value As Long) As Boolean
    IsGranularity = IIf((granularities And value) = value, True, False)
End Function

Public Function GetGranularityName(ByVal value As Long) As String
    If IsGranularity(value, CURVE_GRANULARITY_HOURLY) Then
        GetGranularityName = N_HOURLY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_DAILY) Then
        GetGranularityName = N_DAILY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MONTHLY) Then
        GetGranularityName = N_MONTHLY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_WEEKDAY) Then
        GetGranularityName = N_WEEKDAY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_WEEKEND) Then
        GetGranularityName = N_WEEKEND
    ElseIf IsGranularity(value, CURVE_GRANULARITY_WEEKLY_MON2SUN) Then
        GetGranularityName = N_WEEK_MON2SUN
    ElseIf IsGranularity(value, CURVE_GRANULARITY_WEEKLY_SUN2SAT) Then
        GetGranularityName = N_WEEK_SUN2SAT
    ElseIf IsGranularity(value, CURVE_GRANULARITY_QUARTERLY) Then
        GetGranularityName = N_QUARTERLY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_HALFYEAR) Then
        GetGranularityName = N_HALFYEAR
    ElseIf IsGranularity(value, CURVE_GRANULARITY_YEARLY) Then
        GetGranularityName = N_YEARLY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_WEEKLY) Then
        GetGranularityName = N_WEEKLY
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MIN1) Then
        GetGranularityName = N_MIN1
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MIN5) Then
        GetGranularityName = N_MIN5
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MIN10) Then
        GetGranularityName = N_MIN10
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MIN15) Then
        GetGranularityName = N_MIN15
    ElseIf IsGranularity(value, CURVE_GRANULARITY_MIN30) Then
        GetGranularityName = N_MIN30
    End If
End Function

Public Function IntegerToColmnLetter(ByVal columnIndex As Long) As String
    If columnIndex < 27 Then
        IntegerToColmnLetter = Chr(64 + columnIndex)
    Else
        IntegerToColmnLetter = IntegerToColmnLetter((columnIndex - 1) / 26) & IntegerToColmnLetter((columnIndex - 1) Mod 26 + 1)
    End If
End Function

Public Function GetSplits(sht As Worksheet, params As CCurveParams, ByRef splitrows As Long, ByRef splitcols As Long) As Boolean
    GetSplits = True
    
    With GetWnd(sht)
        splitcols = .SplitColumn
        splitrows = .splitrow
    End With
End Function

Public Sub SetSplits(sht As Worksheet, ByVal splitrows As Long, ByVal splitcols As Long)
    With GetWnd(sht)
        .SplitColumn = splitcols
        .splitrow = splitrows
        .FreezePanes = True
        .DisplayGridlines = False
    End With
End Sub

Public Function IsFlag(ByVal flags As Long, ByVal value As Long) As Boolean
    IsFlag = IIf((flags And value) = value, True, False)
End Function

Public Sub DrawChangableDateRange(sht As Worksheet, ByVal oprDate As Date, ByVal dateCols As Long, ByVal drawFormula As Boolean)
 Dim edte As String
 
    With sht.Cells(2, 1)
        .IndentLevel = 1
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        
        edte = "Effective Date "
        .value = edte + "  ( Changeable below )"
        With .Characters(1).Font
            .Size = 9
        End With
        With .Characters(Len(edte) + 1).Font
            .Size = 8
            '.Italic = True
        End With
    End With
    
    With sht.Cells(3, 1).Resize(, dateCols)
        .Interior.ColorIndex = 40
        .IndentLevel = 1
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlCenter
        .Characters(1).Font.Size = 9
    End With
    
    If drawFormula Then
        With sht.Cells(3, 1)
            .NumberFormat = SystemDateFormat
            .value = oprDate
        End With
    End If
End Sub

Public Property Get SystemDateFormat() As String
    SystemDateFormat = m_sysDFormat
End Property

Public Property Let SystemDateFormat(value As String)
    m_sysDFormat = value
End Property

Attribute VB_Name = "CCnvtFormula"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function GetFormulaVersions(Wb As Workbook) As Long
 Dim v As String
 Dim vers() As String
 
    v = CSheet.docVersion(Wb)
    If Len(v) = 0 Then Exit Function
    vers = Split(v, ".")
    If UBound(vers) - LBound(vers) <= 0 Then Exit Function
    If Not IsNumeric(vers(0)) Or Not IsNumeric(vers(1)) Then Exit Function
    
    GetFormulaVersions = 100 * Val(vers(0)) + Val(vers(1))
End Function

Private Function GetFormulas412(sht As Worksheet) As Range
    On Error GoTo OOPS
    
    Set GetFormulas412 = sht.UsedRange.SpecialCells(xlCellTypeFormulas)
    
OOPS:
    Exit Function
End Function

Public Sub Execute(Wb As Workbook)
 Dim sht As Worksheet
 Dim ver As Long

    ver = GetFormulaVersions(Wb)
    If ver = 0 Then Exit Sub
    
    For Each sht In Wb.Worksheets
        If ver <= 412 Then
            If ver < 412 Then Call ConvertFormulas412Pre(sht)
            Call ConvertFormulas412(sht)
        End If
    Next
End Sub

Private Sub ConvertFormulas412(sht As Worksheet)
 Dim rgn        As Range
 Dim cellz      As Range
 Dim func       As String
 Dim parser     As New CFormulaParser
 
    Set rgn = GetFormulas412(sht)
    If rgn Is Nothing Then Exit Sub
    
    For Each cellz In rgn
        If parser.SetFormula(cellz.formula) Then
            If StrComp(parser.ThisFormula, "=ze_profile", vbTextCompare) = 0 Or StrComp(parser.ThisFormula, "=ze_profileseries", vbTextCompare) = 0 Then
                If parser.Parse() Then
                    func = UpdateZEProfileFN(parser)
                    If Len(func) <> 0 Then cellz.formula = func
                End If
            End If
        End If
    Next
End Sub

Private Sub ConvertFormulas412Pre(sht As Worksheet)
 Dim rgn As Range
 Dim c As Range
 Dim p As Long
 Dim ns As String
 Dim fm As String
 
    On Local Error GoTo OOPS
    Set rgn = sht.Cells.SpecialCells(xlCellTypeFormulas)
    
    ns = UCase("ZeFormula.xlam")
    For Each c In rgn
        fm = UCase(c.formula)
        If InStr(fm, ns) > 0 Then
            p = InStr(fm, "!")
            If p > 1 And InStr(left(fm, p - 1), ns) > 0 Then
                c.formula = "=" + Mid(c.formula, p + 1)
            End If
        End If
    Next
    
OOPS:
    Exit Sub
End Sub

Private Function UpdateZEProfileFN(parser As CFormulaParser) As String
    ' ZE_Profile() - original version with 8 parameters - now 9:
    ' ProfileName,UserName,ProfileGrp,TemplateName,StartDate,EndDate,ForecastDate,[EffectiveDate],Header

    ' ZE_ProfileSeries() - original version with 9 parameters - now 10:
    ' ProfileName,UserName,ProfileGrp,TemplateName,SeriesNo,StartDate,EndDate,ForecastDate,[EffectiveDate],Header

    ' cell formula could look like this:
    '
    ' =ZE_Profile(D2,D1,,,D5,D6,D7,D9)
    ' =ZE_Profile(D2,D1,D3,D4,D5,D6,D7,D9)
    ' ...or, like below:
    ' =ZE_Profile("Aeco,Profile","kissinger",,,A7,A8)
    '
    ' The functions parameters would likely be cell references, but could be literal
    ' strings with a comma embedded in the profile name and enclosed in quotations.
    ' so first, we must extract the parameters, ensuring we don't split up whatever
    ' is in between the quotes (as this is could be profile name)

 Dim newFrmla    As String
 Dim args()      As String
 Dim k           As Long
 
    On Error GoTo OOPS
    
    If StrComp(parser.ThisFormula, "=ze_profileseries", vbTextCompare) = 0 Then
        If parser.ArgCount <> 9 Then Exit Function
    Else
        If parser.ArgCount <> 8 Then Exit Function
    End If

    args = parser.ArgValues
    
    newFrmla = parser.ThisFormula + "("

    For k = 1 To parser.ArgCount - 1
        newFrmla = newFrmla + args(k - 1)
        newFrmla = newFrmla + ","
    Next
    
    newFrmla = newFrmla + ","
    newFrmla = newFrmla + args(parser.ArgCount - 1)
    
    newFrmla = newFrmla + ")"
    
    UpdateZEProfileFN = newFrmla
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint("UpdateZEProfileFN -> " + Err.Description)
    End If
    Exit Function
End Function

Attribute VB_Name = "CCurveHelper"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub CollapseGroups(sht As Worksheet)
    sht.Outline.ShowLevels RowLevels:=1, ColumnLevels:=1 '8 to expand
End Sub

Public Sub GroupColumns(sht As Worksheet, ByVal startCol As Long, ByVal endCol As Long, ByVal isGroup As Boolean)
 Dim tmp As Long
 
    If Not (sht.Columns(startCol).OutlineLevel > 1 Xor isGroup) Then Exit Sub
    
    If startCol > endCol Then
        tmp = startCol
        startCol = endCol
        endCol = tmp
    End If

    With sht.Columns(CCnvtCommon.IntegerToColmnLetter(startCol) + ":" + CCnvtCommon.IntegerToColmnLetter(endCol)).Columns
        If isGroup Then
            Call .group
        Else
            Call .Ungroup
            'm_sheet.PrintOut
        End If
    End With
End Sub

Private Sub EnableGroupingSheet(sht As Worksheet)
 Dim fvs As Long
 
    On Error GoTo OOPS
    
    fvs = CCnvtCommon.GetFVS(sht)
    If CCnvtCommon.CPGetSheetVersion(fvs) < CCnvtCommon.CPGetSheetVersion(CURVE_FLG_V2) Then Exit Sub
    
    Call CCnvtCommon.Unprotect(sht)
    Call CCnvtCommon.Protect(sht)
 
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint("EnableGroupingSheet : " + Err.Description)
    End If
    Exit Sub
End Sub

Public Sub EnableGrouping(Wb As Workbook)
 Dim sht As Worksheet
 
    On Error GoTo OOPS
    
'    Call CXLEvents.DisableEvents
    
    For Each sht In Wb.Worksheets
        Call EnableGroupingSheet(sht)
    Next
  
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint("EnableGrouping: " + Err.Description)
    End If
    
'    Call CXLEvents.RestoreEvents
    Exit Sub
End Sub
Attribute VB_Name = "CCurveImageText"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Event OnImage(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, ByRef aPicturePath As String, ByRef aWidth As Single, ByRef aHeight As Single)
Public Event OnText(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, ByRef aText As String, ByRef aBold As Boolean, ByRef aToolTip As String, ByRef aTop As Long, ByRef aLeft As Long)
Public Event OnMacro(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, ByRef aMacro As String)
Public Event OnImagePlacement(sender As Object, ByVal aTarget As Integer, ByVal aUserData As String, ByRef aTop As Single, ByRef aLeft As Single, ByRef aWidth As Single, ByRef aHeight As Single)
Public Event OnImageBackColor(sender As Object, ByVal aTarget As Integer, ByRef bkColor As Long)

Private Const OBS_INDICATOR_PATH As String = "CurveCMStatus.bmp" ' "CurveObsIndicator.PNG"

Public AlternativeText As String
Public m_params As CCurveParams
Private m_sheet As Worksheet

Private m_Target As Integer
'Private m_Placement As Integer

Private m_PicturePath As String   'source picture path
Private m_Text As String '
Private m_Bold As Boolean
Private m_FontSize As Single 'text size
Private m_tooltip As String
Private m_tooltip_Top As Long
Private m_tooltip_Left As Long

Private m_Action As String 'n/a
Private m_Top As Single 'n/a
Private m_Left As Single 'n/a
Private m_Width As Single 'n/a
Private m_Height As Single 'n/a
Private m_Button_Width As Single 'n/a
Private m_Button_Height As Single 'n/a
'
Private m_ResultImagePath As String 'result file path
Private m_Kill As Boolean

Public Property Set sheet(value As Worksheet)
    Set m_sheet = value
End Property

Private Sub DeleteShape(shp As Shape)
 Dim nm As String
 Dim row As Long
 Dim col As Long
 
    nm = left(shp.name, InStr(shp.name, "_") - 1)
    If Len(nm) = 9 Then
        nm = right(nm, 8)
        row = CLng(left(nm, 4))
        col = CLng(right(nm, 4))
    End If
    
    If row > 0 And col > 0 Then
        If Not m_sheet.Cells(row, col).Comment Is Nothing Then
            m_sheet.Cells(row, col).Comment.Delete
        End If
        m_sheet.Cells(row, col).Validation.Delete
    End If
    
    shp.Delete
End Sub

Public Sub RemoveImages(ByVal aAlternativeTextPattern As String)
 Dim s As Shape
 
    For Each s In m_sheet.Shapes
        If s.AlternativeText Like aAlternativeTextPattern + "*" Then
            Call DeleteShape(s)
        End If
    Next
End Sub

'Public Sub RemoveImage(ByVal aAlternativeText As String)
' Dim s As Shape
'
'    For Each s In m_sheet.Shapes
'        If StrComp(s.AlternativeText, aAlternativeText) = 0 Then
'            Call DeleteShape(s)
'            Exit For
'        End If
'    Next
'End Sub

Private Function CanAddPicture() As Boolean
    CanAddPicture = Not m_sheet.parent.MultiUserEditing
End Function

Private Sub DrawObservationIndicator(ByVal aAlternativeText As String)
 Dim s As Shape
 Dim rgn As Range
 Dim nm As String
 Const siz As Long = 12
 
    If m_tooltip = vbNullString Then Exit Sub
    
    On Error GoTo OOPS
    
    nm = CCnvtCommon.GetImagesDirectory() + OBS_INDICATOR_PATH
    Set rgn = m_sheet.Cells(m_tooltip_Top, m_tooltip_Left + IIf(m_params.IsFlag(CURVE_FLG_MRBD), 1, 0))
    
    Set s = m_sheet.Shapes.AddPicture(nm, msoFalse, msoTrue, rgn.left + rgn.Width - siz, rgn.top, siz, siz)
    With s
        .name = "N" + IIf(m_tooltip <> vbNullString, format(m_tooltip_Top, "0000") + format(m_tooltip_Left, "0000"), vbNullString) + "_" + CStr(m_Target) + "_I"
        .Visible = True
        .AlternativeText = AlternativeText
'        .Placement = m_Placement
    End With
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description)
    End If
    Exit Sub
End Sub

'Private Sub SetTooltipfont(cmt As Object)
'    On Error Resume Next
'    cmt.Shape.TextFrame.Characters.Font.name = "Microsoft YaHei" ' "MS Gothic"
'End Sub

'Private Sub DrawTooltip()
' Dim cmt As Object
' Dim start As Long
' Dim k As Long
' Dim p As Long
' Dim s As String
' Dim items() As String
'
'    If m_tooltip = vbNullString Then Exit Sub
'    items = Split(m_tooltip, vbLf)
'    If Len(Join(items)) = 0 Then Exit Sub
'
'    On Local Error GoTo OOPS
'    With m_sheet.Cells(m_tooltip_Top, m_tooltip_Left)
'        .NumberFormat = "@"
'        Set cmt = .Comment
'        If cmt Is Nothing Then
'            Set cmt = .AddComment
'        End If
'    End With
'
'    With cmt
'        '.Hyperlinks.Add Anchor:=shp, address:=vbNullString, ScreenTip:=m_tooltip
'        .Shape.AutoShapeType = msoShapeRectangle 'msoShapeRoundedRectangle
'        .Shape.TextFrame.AutoSize = True
'        .Shape.TextFrame.Characters.Font.ColorIndex = 1 '2
'        Call SetTooltipfont(cmt)
'        .Shape.Fill.Visible = msoTrue
'        .Shape.Fill.ForeColor.RGB = &HF7F7F7
'        .Shape.Shadow.Visible = msoFalse
'        .Text m_tooltip
'
'        .Shape.TextFrame.Characters(2, Len(items(1))).Font.Bold = True
'        start = Len(items(1)) + 1
'
'        For k = LBound(items) + 2 To UBound(items)
'            start = start + 1
'            If Len(items(k)) > 0 Then
'                p = InStr(items(k), ":")
'                s = Mid(items(k), p + 1)
'                .Shape.TextFrame.Characters(start + p + 1, Len(s)).Font.Bold = True
'                start = start + Len(items(k))
'            End If
'        Next
'        .Shape.Shadow.Transparency = 1
'    End With
'
'OOPS:
'    On Local Error GoTo 0
'End Sub

'Private Sub DrawTooltip()
' Dim s As String
' Dim p As Long
'
'    If m_tooltip = vbNullString Then Exit Sub
'
'    On Local Error GoTo OOPS
'    With m_sheet.Cells(m_tooltip_Top, m_tooltip_Left)
'        If Not .Comment Is Nothing Then
'            .Comment.Delete
'        End If
'
'        With .Validation
'            .Delete
'            .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator:=xlBetween
'            .IgnoreBlank = True
'            .InCellDropdown = True
'
'            p = InStr(m_tooltip, vbLf)
'            If p > 1 Then
'                s = left(m_tooltip, p - 1)
'            Else
'                s = m_tooltip
'            End If
'            If Len(s) > 32 Then
'                s = left(s, 29) + "..."
'            End If
'            .InputTitle = left(s, 32)
'
'            .ErrorTitle = vbNullString
'            If p > 1 Then
'                s = Mid(m_tooltip, p + 1)
'            Else
'                s = vbNullString
'            End If
'            If Len(s) > 254 Then
'                s = left(s, 250) + vbLf + "..."
'            End If
'            .InputMessage = left(s, 254)
'
'            .errorMessage = vbNullString
'            .ShowInput = True
'            .ShowError = True
'        End With
'    End With
'
'OOPS:
'    If Err.Number <> 0 Then
'        CDDXApp.StatusMessage = Err.Description
'    End If
'    On Local Error GoTo 0
'    Exit Sub
'End Sub

Public Function DeleteImage(ByVal targetImage As Long) As Boolean
 Dim s As Shape
 
    For Each s In m_sheet.Shapes
        If s.name Like "N*_" + CStr(targetImage) Then
            Call DeleteShape(s)
            DeleteImage = True
            Exit For
        End If
    Next
End Function

Private Sub DrawCurveName()
 Dim s As Shape
 
    If Not CanAddPicture() Then Exit Sub
    
    Call DeleteImage(m_Target)
    
    If m_ResultImagePath <> vbNullString Then
        Set s = m_sheet.Shapes.AddPicture(m_ResultImagePath, msoFalse, msoTrue, m_Left, m_Top, m_Width, m_Height)
        With s
            .name = "N" + IIf(m_tooltip <> vbNullString, format(m_tooltip_Top, "0000") + format(m_tooltip_Left, "0000"), vbNullString) + "_" + CStr(m_Target)
            If m_Action <> vbNullString Then
                .OnAction = m_Action
            End If
            .Visible = True
            .AlternativeText = AlternativeText
'            .Placement = m_Placement
        End With
        
        If m_Kill Then
            Kill m_ResultImagePath
        End If
    End If
    
    Call DrawObservationIndicator(AlternativeText)
End Sub

Private Sub GenerateCompositeImage()
 Dim bkclr As Long
 
    If m_Text = vbNullString And m_PicturePath = vbNullString Then
        m_Kill = True
        m_ResultImagePath = vbNullString
    Else
        m_Kill = False
'        With m_ZEComp
            If m_PicturePath <> vbNullString Then
                m_PicturePath = CCnvtCommon.GetImagesDirectory() + m_PicturePath
            End If
            'bkclr = m_Sheet.Cells(2, 1).Interior.Color
            ''RaiseEvent OnImageBackColor(Me, m_Target, bkclr)
            ''m_ResultImagePath = .CreateImageText(m_Text, IIf(m_Bold, 1, 0), m_PicturePath, m_Button_Width, m_Button_Height, bkclr)
            m_ResultImagePath = m_PicturePath
'        End With
    End If
End Sub

Public Sub Draw(ByVal aTarget As Integer, ByVal aUserData As String, Optional isMove As Variant = xlMove) 'xlFreeFloating)
    m_Target = aTarget
'    m_Placement = isMove
    
    If IsNumeric(aUserData) Then
        m_Target = 1000 * m_Target + CLng(aUserData)
    End If
    
    RaiseEvent OnImage(Me, aTarget, aUserData, m_PicturePath, m_Button_Width, m_Button_Height)
    RaiseEvent OnText(Me, aTarget, aUserData, m_Text, m_Bold, m_tooltip, m_tooltip_Top, m_tooltip_Left)
    RaiseEvent OnMacro(Me, aTarget, aUserData, m_Action)
    RaiseEvent OnImagePlacement(Me, aTarget, aUserData, m_Top, m_Left, m_Width, m_Height)

    'If Len(m_Action) = 0 Then Exit Sub
    
    Call GenerateCompositeImage
    Call DrawCurveName
End Sub

Private Sub Class_Initialize()
'    With CDDXLib.DefaultZEWSProxy(DDX_PID)
'        m_ResultImagePath = .HelperResultsetFileName(.NewGUID(), 0) + ".png"
'    End With
    m_ResultImagePath = Environ("temp") + "\cnvt" + CStr(Application.Hwnd) + ".png"
End Sub
Attribute VB_Name = "CCurveParams"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Type TCuvreInfo
    curve As String
    dlt As String
    ult As String
    Permissions As String
    obs As String
    numerators As String
    denominators As String
    tz As String
    propVals() As String
End Type

Private Const C_ROOT As String = "/CurvePortal/"
Private Const C_VER As String = "4.13"

Private Const C_NAME As Integer = 1
Private Const C_OBS As Integer = 2
Private Const C_DLT As Integer = 3
Private Const C_ULT As Integer = 4
Private Const C_PERM As Integer = 5
Private Const C_PROPVALS As Integer = 6
Private Const C_TZ As Integer = 7

Public sheetId As String
Public granularities As Long
Public exclHolidays As String
Public exclWeekEnds As String
'
Public rowCount As Long
Public ColumnCount As Long
'
Public flagValues As Long
Public TZName As String
'
Private m_Xml As New ZEWSXml
Private m_CurveInfo() As TCuvreInfo
Private m_PropertyNames()  As String
Private m_CurveTypes() As String
'Private m_CurveTypesHeader() As String
'
Public OprStartDate As Date
Public OprEndDate As Date

Public Property Get curveTypes() As String()
    curveTypes = m_CurveTypes
End Property

'Public Property Get CurveTypesHeader() As String()
'    CurveTypesHeader = m_CurveTypesHeader
'End Property

Public Property Get PropertyNames() As String()
    PropertyNames = m_PropertyNames
End Property

Private Function SetArray(ByVal aItem As Integer, value() As String)
 Dim k As Integer
 
    For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
        Select Case aItem
            Case C_NAME: m_CurveInfo(k).curve = value(k)
            Case C_OBS: m_CurveInfo(k).obs = value(k)
            Case C_DLT: m_CurveInfo(k).dlt = value(k)
            Case C_ULT: m_CurveInfo(k).ult = value(k)
            Case C_PERM: m_CurveInfo(k).Permissions = value(k)
            Case C_TZ: m_CurveInfo(k).tz = value(k)
        End Select
    Next
End Function

Private Function GetArray(ByVal aItem As Integer, Optional value As String) As String()
 Dim tmp() As String
 Dim k As Integer
 
    If GetCurveCount() <= 0 Then
        GetArray = tmp
        Exit Function
    End If
    
    If aItem = C_PROPVALS Then
        For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
            If StrComp(value, m_CurveInfo(k).curve) = 0 Then
                GetArray = m_CurveInfo(k).propVals
                Exit For
            End If
        Next
        Exit Function
    End If
    
    ReDim tmp(UBound(m_CurveInfo))
    For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
        If m_CurveInfo(k).curve = vbNullString Then Exit For
        
        Select Case aItem
            Case C_NAME: tmp(k) = m_CurveInfo(k).curve
            Case C_OBS: tmp(k) = m_CurveInfo(k).obs
            Case C_DLT: tmp(k) = m_CurveInfo(k).dlt
            Case C_ULT: tmp(k) = m_CurveInfo(k).ult
            Case C_PERM: tmp(k) = m_CurveInfo(k).Permissions
            Case C_TZ: tmp(k) = m_CurveInfo(k).tz
        End Select
    Next
    
    GetArray = tmp
End Function

Public Property Get curves() As String()
    curves = GetArray(C_NAME)
End Property

Public Property Get PropertyValues(ByVal curveNm As String) As String()
 Dim k As Long
 Dim ary() As String
 
    ary = GetArray(C_PROPVALS, curveNm)
    
    On Local Error GoTo OOPS
    
    For k = LBound(ary) To UBound(ary)
        If ary(k) = vbNullString Then
            ary(k) = " "
        End If
    Next
OOPS:
    PropertyValues = ary
End Property

Private Function FindCurveIndex(curveNm As String) As Long
 Dim idx As Long
 
    For idx = LBound(m_CurveInfo) To UBound(m_CurveInfo)
        If StrComp(m_CurveInfo(idx).curve, curveNm, vbBinaryCompare) = 0 Then
            FindCurveIndex = idx
            Exit Function
        End If
    Next
    FindCurveIndex = -1
End Function

Public Property Get obsTypes(ByVal curveNm As String) As String()
 Dim idx As Long
 Dim ary() As String
 Dim tmp() As String
 
    On Error GoTo OOPS
    
    idx = FindCurveIndex(curveNm)
    If idx < 0 Then Exit Property
    If m_CurveInfo(idx).obs = vbNullString Then Exit Property
    
    tmp = Split(m_CurveInfo(idx).obs, vbTab)
    ReDim ary(0 To UBound(tmp) \ 2)
    For idx = 1 To UBound(tmp) Step 2
        ary(idx \ 2) = tmp(idx)
    Next
    obsTypes = ary
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description + " (ObsTypes)")
    End If
    On Error GoTo 0
    Exit Property
End Property

Public Property Get ObsNumerators(ByVal curveNm As String) As String()
 Dim idx As Long
 Dim ary() As String
 
    On Error GoTo OOPS
    
    idx = FindCurveIndex(curveNm)
    If idx < 0 Then Exit Property
    If m_CurveInfo(idx).numerators = vbNullString Then Exit Property
    ObsNumerators = Split(m_CurveInfo(idx).numerators + vbTab, vbTab)
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description + " (ObsNumerators)")
    End If
    On Error GoTo 0
    Exit Property
End Property

Public Property Get ObsDenominators(ByVal curveNm As String) As String()
 Dim idx As Long
 Dim ary() As String
 
    On Error GoTo OOPS
    
    idx = FindCurveIndex(curveNm)
    If idx < 0 Then Exit Property
    If m_CurveInfo(idx).denominators = vbNullString Then Exit Property
    ObsDenominators = Split(m_CurveInfo(idx).denominators + vbTab, vbTab)
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description + " (ObsDenominators)")
    End If
    On Error GoTo 0
    Exit Property
End Property

Public Property Get LastDownloadTime() As String()
    LastDownloadTime = GetArray(C_DLT)
End Property

Public Property Get LastUploadTime() As String()
    LastUploadTime = GetArray(C_ULT)
End Property

Public Property Get Readonly(ByVal aPos As Integer) As Boolean
    Readonly = IIf(InStr(m_CurveInfo(aPos).Permissions, "R") > 0, True, False)
End Property

Public Property Let LastUploadTime(value() As String)
    Call SetArray(C_ULT, value)
End Property

Public Property Let LastDownloadTime(value() As String)
    Call SetArray(C_DLT, value)
End Property

Private Function GetFromXml(ByVal aTag As String) As String
 Dim v() As String
    
    v = m_Xml.SelectTexts(C_ROOT + aTag)
    GetFromXml = v(LBound(v))
End Function

Private Function GetArrayFromXML(ByVal aTag As String) As String()
    GetArrayFromXML = m_Xml.SelectTexts(C_ROOT + aTag + "/i")
End Function

Private Sub GetCurves()
 Dim k As Long
 Dim cnt As Long
 Dim hasprops As Boolean
 Dim nodes As MSXML2.IXMLDOMNodeList
 Dim nd As MSXML2.IXMLDOMNode
 Dim attrbs As Variant
 Dim attr As MSXML2.IXMLDOMAttribute
 
    Erase m_CurveInfo
    Set nodes = m_Xml.SelectNodes(C_ROOT + "Curves/i")
    If nodes Is Nothing Then Exit Sub 'fool-proof
    cnt = nodes.length - 1
    If cnt < 0 Then Exit Sub
    
    ReDim m_CurveInfo(cnt)
    
    m_PropertyNames = m_Xml.SelectTexts(C_ROOT + "Properties/n")
    hasprops = IIf(Len(Join(m_PropertyNames)) > 0, True, False)
    
    For k = 0 To cnt
        Set nd = nodes(k)
        Set attrbs = nd.Attributes
        
        m_CurveInfo(k).curve = nd.text
        
        Set attr = attrbs.getNamedItem("dlt")
        If Not attr Is Nothing Then m_CurveInfo(k).dlt = attr.text
        
        Set attr = attrbs.getNamedItem("ult")
        If Not attr Is Nothing Then m_CurveInfo(k).ult = attr.text
        
        Set attr = attrbs.getNamedItem("perm")
        If Not attr Is Nothing Then m_CurveInfo(k).Permissions = attr.text
       
        Set attr = attrbs.getNamedItem("tz")
        If Not attr Is Nothing Then m_CurveInfo(k).tz = attr.text
         
        Set attr = attrbs.getNamedItem("obs")
        If Not attr Is Nothing Then m_CurveInfo(k).obs = attr.text
       
        Set attr = attrbs.getNamedItem("ns")
        If Not attr Is Nothing Then m_CurveInfo(k).numerators = attr.text
       
        Set attr = attrbs.getNamedItem("ds")
        If Not attr Is Nothing Then m_CurveInfo(k).denominators = attr.text
       
        If hasprops Then
            m_CurveInfo(k).propVals = m_Xml.SelectTexts(C_ROOT + "Properties/i[@curve=" + CCnvtCommon.EscXPATHExpr(m_CurveInfo(k).curve) + "]/p")
        End If
    Next
End Sub

'Private Sub GetCurveAttributes(ByVal aCurve As String, ByRef aDLT As String, ByRef aULT As String, ByRef aObs As String, ByRef aPerm As String, ByRef aTZ As String)
'    aDLT = m_Xml.SelectAttribute(C_ROOT + "Curves/i[text()=" + CDDXHelper.EscXPATHExpr(aCurve) + "]", "dlt")
'    aULT = m_Xml.SelectAttribute(C_ROOT + "Curves/i[text()=" + CDDXHelper.EscXPATHExpr(aCurve) + "]", "ult")
'    aObs = m_Xml.SelectAttribute(C_ROOT + "Curves/i[text()=" + CDDXHelper.EscXPATHExpr(aCurve) + "]", "obs")
'    aPerm = m_Xml.SelectAttribute(C_ROOT + "Curves/i[text()=" + CDDXHelper.EscXPATHExpr(aCurve) + "]", "perm")
'    aTZ = m_Xml.SelectAttribute(C_ROOT + "Curves/i[text()=" + CDDXHelper.EscXPATHExpr(aCurve) + "]", "tz")
'End Sub

Private Function GetGranularities(granu As String) As Long
    GetGranularities = Val(granu)
    
    If GetGranularities <= 0 Then
        If StrComp(granu, "monthly", vbTextCompare) = 0 Then
            GetGranularities = CURVE_GRANULARITY_MONTHLY
        ElseIf StrComp(granu, "daily", vbTextCompare) = 0 Then
            GetGranularities = CURVE_GRANULARITY_DAILY
        ElseIf StrComp(granu, "hourly", vbTextCompare) = 0 Then
            GetGranularities = CURVE_GRANULARITY_HOURLY
        End If
    End If
End Function

Public Sub FromXML(ByVal aCurveInfo As String)
    If Not m_Xml.LoadXML(aCurveInfo) Then
        Exit Sub
    End If

    sheetId = GetFromXml("SheetID")
    Call GetCurves
    
    OprStartDate = CCnvtCommon.ToLocalDate(GetFromXml("StartDate"))
    OprEndDate = CCnvtCommon.ToLocalDate(GetFromXml("EndDate"))
    exclWeekEnds = GetFromXml("ExclWeekends")
    exclHolidays = GetFromXml("ExclHolidays")
    '
    'SelectedGranularities = GetGranularities(GetFromXml("Granularity"))
    granularities = Val(GetFromXml("Granularities"))
    If granularities = CURVE_GRANULARITY_NONE Then
        granularities = GetGranularities(GetFromXml("Granularity"))
    End If
    '
    rowCount = Val(GetFromXml("Rows"))
    ColumnCount = Val(GetFromXml("Columns"))
    '
    flagValues = Val(GetFromXml("FlagValues"))
    TZName = GetFromXml("TZName")
    m_CurveTypes = Split(GetFromXml("CurveTypes"), vbTab)
'    m_CurveTypesHeader = Split(GetFromXml("CurveTypesHeader"), vbTab)
End Sub

Public Function ToXML() As String
 Dim p As LongPtr
 Dim p2 As LongPtr
 Dim k As Long
 Dim j As Long
 Dim xml As New ZEWSXml
 
    If GetCurveCount() <= 0 Then
        Exit Function
    End If
    
    With xml
        Call .CreateRootElement("CurvePortal", C_VER)
        
        Call .CreateTextNode(-1, "SheetID", sheetId)
        Call .CreateTextNode(-1, "Granularities", CStr(granularities))
        Call .CreateTextNode(-1, "Rows", CStr(rowCount))
        Call .CreateTextNode(-1, "Columns", CStr(ColumnCount))

        Call .CreateTextNode(-1, "StartDate", CStr(CDbl(OprStartDate)))
        Call .CreateTextNode(-1, "EndDate", CStr(CDbl(OprEndDate)))
        Call .CreateTextNode(-1, "ExclWeekends", exclWeekEnds)
        Call .CreateTextNode(-1, "ExclHolidays", exclHolidays)
        '
        Call .CreateTextNode(-1, "FlagValues", CCnvtCommon.ToHexStr(flagValues))
        Call .CreateTextNode(-1, "TZName", TZName)
        
        Call .CreateTextNode(-1, "CurveTypes", Join(m_CurveTypes, vbTab))
'        Call .CreateTextNode(-1, "CurveTypesHeader", Join(m_CurveTypesHeader, vbTab))
        
        p = .Createlement(-1, "Curves")
        For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
            If m_CurveInfo(k).curve = vbNullString Then Exit For
            
            p2 = .CreateTextNode(p, "i", m_CurveInfo(k).curve)
            If m_CurveInfo(k).dlt <> vbNullString Then
                Call .AddAttribute(p2, "dlt", m_CurveInfo(k).dlt)
            End If
            If m_CurveInfo(k).ult <> vbNullString Then
                Call .AddAttribute(p2, "ult", m_CurveInfo(k).ult)
            End If
            
            Call .AddAttribute(p2, "obs", m_CurveInfo(k).obs)
            Call .AddAttribute(p2, "perm", m_CurveInfo(k).Permissions)
            Call .AddAttribute(p2, "tz", m_CurveInfo(k).tz)
            Call .AddAttribute(p2, "ns", m_CurveInfo(k).numerators)
            Call .AddAttribute(p2, "ds", m_CurveInfo(k).denominators)
        Next
        
        If Len(Join(m_PropertyNames)) <> 0 Then
            p = .Createlement(-1, "Properties")
            
            For k = LBound(m_PropertyNames) To UBound(m_PropertyNames)
                Call .CreateTextNode(p, "n", m_PropertyNames(k))
            Next
            
            For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
                If m_CurveInfo(k).curve = vbNullString Then Exit For
                
                p2 = .Createlement(p, "i")
                Call .AddAttribute(p2, "curve", m_CurveInfo(k).curve)
                
                For j = LBound(m_CurveInfo(k).propVals) To UBound(m_CurveInfo(k).propVals)
                    Call .CreateTextNode(p2, "p", m_CurveInfo(k).propVals(j))
                Next
            Next
        End If
        
        ToXML = .ToString()
    End With
    Set xml = Nothing
End Function

Public Sub RemoveCurve(ByVal aPos As Integer)
 Dim ED() As String
 Dim k As Integer
 
    For k = aPos To UBound(m_CurveInfo) - 1
        m_CurveInfo(k) = m_CurveInfo(k + 1)
    Next
    
    If UBound(m_CurveInfo) - 1 >= LBound(m_CurveInfo) Then
        ReDim Preserve m_CurveInfo(UBound(m_CurveInfo) - 1)
    Else
        Erase m_CurveInfo
    End If
End Sub

Public Function GetCurveCount() As Integer
Dim k As Integer

    On Local Error GoTo OOPS
    
    For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
        If m_CurveInfo(k).curve = vbNullString Then Exit For
        GetCurveCount = GetCurveCount + 1
    Next
    
OOPS:
    On Local Error GoTo 0
    Exit Function
End Function

Public Function IsFlag(ByVal value As Long) As Boolean
    IsFlag = CCnvtCommon.IsFlag(flagValues, value)
End Function

Public Function AllCurvesRD() As Boolean
 Dim k As Long
 
    For k = 0 To GetCurveCount() - 1
        If Not Readonly(k) Then
            Exit Function
        End If
    Next
    
    AllCurvesRD = True
End Function

Public Property Get PropertyCount() As Long
    If Len(Join(PropertyNames)) > 0 Then
        PropertyCount = UBound(PropertyNames) - LBound(PropertyNames) + 1
    End If
End Property

Public Function GetCurvePosition(ByVal aCurveName As String)
 Dim k As Long
 Dim cn() As String

    cn = curves

    If Len(Join(cn)) > 0 Then
        For k = LBound(cn) To UBound(cn)
            If StrComp(aCurveName, cn(k), vbBinaryCompare) = 0 Then
                GetCurvePosition = k
                Exit Function
            End If
        Next
    End If
    GetCurvePosition = -1
End Function

Public Function GetTooltipByPosition(ByVal nPos As Long) As String
    If Not IsFlag(CURVE_FLG_PIVOT) Then
        GetTooltipByPosition = m_CurveInfo(nPos).curve
    End If
End Function

Public Function GetObservationInfoByName(ByVal value As String) As String
 Dim obs() As String
 Dim numerators() As String
 Dim denominators() As String
 Dim k As Long
 Dim p As Long
 
    On Error GoTo OOPS
    
    p = FindCurveIndex(value)
    'If Not IsFlag(CURVE_FLG_MULTIOBS) Then Exit Function
 
    With m_CurveInfo(p)
        obs = Split(.obs, vbTab)
        If Len(Join(obs)) = 0 Then Exit Function

        numerators = ObsNumerators(.curve)
        denominators = ObsDenominators(.curve)
        If Len(Join(numerators)) = 0 And Len(Join(denominators)) = 0 Then Exit Function

        For k = 0 To (UBound(obs) - LBound(obs) + 1) \ 2 - 1
            If k > LBound(obs) Then GetObservationInfoByName = GetObservationInfoByName + vbLf
            GetObservationInfoByName = GetObservationInfoByName + IIf(k = 0, vbNullString, vbLf) + "Curve Type" + vbTab + obs(2 * k + 1)
            GetObservationInfoByName = GetObservationInfoByName + vbLf + "Contract Type" + vbTab + CCnvtCommon.GetGranularityName(Val(obs(2 * k)))
            
            GetObservationInfoByName = GetObservationInfoByName + vbLf + "Numerator" + vbTab
            If Len(Join(numerators)) > 0 Then
                GetObservationInfoByName = GetObservationInfoByName + numerators(2 * k + 1) + vbTab + numerators(2 * k)
            Else
                GetObservationInfoByName = GetObservationInfoByName + vbTab
            End If
            
            GetObservationInfoByName = GetObservationInfoByName + vbLf + "Denominator" + vbTab
            If Len(Join(denominators)) > 0 Then
                GetObservationInfoByName = GetObservationInfoByName + denominators(2 * k + 1) + vbTab + denominators(2 * k)
            Else
                GetObservationInfoByName = GetObservationInfoByName + vbTab
            End If
        Next
        GetObservationInfoByName = GetObservationInfoByName + vbTab
    End With
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description)
    End If
    Exit Function
End Function

Public Function GetFirstWritableCurve() As String
 Dim k As Long
 
    For k = LBound(m_CurveInfo) To UBound(m_CurveInfo)
        If Len(m_CurveInfo(k).Permissions) = 0 Then
            GetFirstWritableCurve = m_CurveInfo(k).curve
            Exit For
        End If
    Next
End Function

Private Sub Class_Terminate()
    Set m_Xml = Nothing
End Sub
Attribute VB_Name = "CFormulaParser"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_formula_name As String
Private m_args As String
Private m_pos As Long
Private m_length As Long
Private m_start_tag As Long
Private m_buff As String
'
Private m_arg_count As Long
Private m_arg_values(0 To 128 - 1) As String

Public Function SetFormula(rawFormula As String) As Boolean
 Dim p As Long

    If Len(rawFormula) <= 4 Then Exit Function

    If left(rawFormula, 1) <> "=" Then Exit Function
    
    p = InStr(rawFormula, "(")
    If p <= 2 Then Exit Function
    
    If right(rawFormula, 1) <> ")" Then Exit Function
        
    p = InStr(rawFormula, "(")
    m_formula_name = left(rawFormula, p - 1)
    
    m_args = Mid(rawFormula, p + 1, Len(rawFormula) - Len(m_formula_name) - 2)
    m_length = Len(m_args)
    
    m_pos = 0
    m_arg_count = 0
    
    SetFormula = True
End Function

Public Property Get ThisFormula() As String
    ThisFormula = m_formula_name
End Property

Public Function Parse() As Boolean
 Dim f As Boolean
 
    Erase m_arg_values
    m_arg_count = 0

    On Error GoTo OOPS
    
    Do
        m_arg_values(m_arg_count) = GetArg(f)
        If Not f Then Exit Do

        m_arg_count = m_arg_count + 1
    Loop
    
    Parse = True
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint("Parse -> " + Err.Description)
    End If
    
    Exit Function
End Function

Public Property Get ArgCount() As Long
    ArgCount = m_arg_count
End Property

Public Property Get ArgValues() As String()
    ArgValues = m_arg_values
End Property

Private Function GetArg(isValid As Boolean) As String
 Dim c As String
 Dim c1 As String
 
    isValid = False
    If m_pos >= m_length Then Exit Function
    
    Do
        m_pos = m_pos + 1
        If m_pos > m_length Then Exit Do
        c = Mid(m_args, m_pos, 1)
        If c <> " " Then
            m_pos = m_pos - 1
            Exit Do
        End If
    Loop
    
    m_buff = vbNullString
    m_start_tag = -1
    Do
        m_pos = m_pos + 1
        If m_pos > m_length Then Exit Do
        c = Mid(m_args, m_pos, 1)
        
        If m_start_tag = -1 Then
            If c = "," Then Exit Do
            m_start_tag = IIf(c = """", 1, 0)
            m_buff = m_buff + c
        Else
            If c = "," Then
                If m_start_tag = 0 Then Exit Do
                m_buff = m_buff + c
                
            ElseIf c = """" Then
                If m_pos = m_length Then
                    If m_start_tag = 1 Then
                        m_buff = m_buff + c
                        Exit Do
                    End If
                    Err.Raise vbObjectError, "CParse", "unexpected end quote"
                End If
  
                m_buff = m_buff + c
                
                c1 = Mid(m_args, m_pos + 1, 1)
                If c1 = """" Then
                    m_buff = m_buff + c1
                    m_pos = m_pos + 1
                    
                ElseIf c1 = "," Then
                    If m_start_tag = 1 Then
                        m_pos = m_pos + 1
                        Exit Do
                    End If
                    Err.Raise vbObjectError, "CParse", "unexpected comma"
                Else
                    If m_start_tag = 0 Then Err.Raise "unexpected quote 3"
                    Do
                        m_pos = m_pos + 1
                        c1 = Mid(m_args, m_pos, 1)
                        If c1 = "," Then
                            m_start_tag = 0
                            m_pos = m_pos - 1
                            Exit Do
                        End If
                        If c1 <> " " Then Err.Raise vbObjectError, "CParse", "unexpected char"
                    Loop
                End If
            Else
                m_buff = m_buff + c
            End If
        End If
    Loop
    
    isValid = (m_pos <= m_length Or Len(m_buff) > 0)
'    m_pos = m_pos + 1
    
    GetArg = Trim(m_buff)
End Function


Attribute VB_Name = "CSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function GetPropertyWK(wrk As Workbook, ByVal aPropName As String) As DocumentProperty
 Dim f As Variant
 
    For Each f In wrk.CustomDocumentProperties
        If StrComp(f.name, aPropName, vbTextCompare) = 0 Then
            Set GetPropertyWK = f
            Exit Function
        End If
    Next
End Function

Public Function DOCGetProp(wrk As Workbook, ByVal aPropName As String) As String
 Dim prop As DocumentProperty
 
    Set prop = GetPropertyWK(wrk, aPropName)
    If prop Is Nothing Then
        DOCGetProp = vbNullString
    Else
        DOCGetProp = prop.value
    End If
End Function

Public Sub DOCSetProp(wrk As Workbook, ByVal aPropName As String, ByVal aValue As String)
 Dim prop As DocumentProperty
 
    Set prop = GetPropertyWK(wrk, aPropName)
    If prop Is Nothing Then
        Call wrk.CustomDocumentProperties.Add(name:=aPropName, LinkToContent:=False, Type:=msoPropertyTypeString, value:=aValue)
    Else
        prop.value = aValue
    End If
End Sub

Public Property Get IsZEAddin(wrk As Workbook) As Boolean
    IsZEAddin = (DOCGetProp(wrk, ZEDOC_NAME) <> vbNullString)
End Property

Public Property Get docVersion(wrk As Workbook) As String
    docVersion = DOCGetProp(wrk, ZEDOC_VER)
End Property

Public Property Let docVersion(wrk As Workbook, value As String)
    Call DOCSetProp(wrk, ZEDOC_VER, value)
End Property

Public Property Let ZEDocID(Wb As Workbook, ByVal value As String)
    Call DOCSetProp(Wb, ZEDOC_ID, value)
End Property

Private Function GetProperty(sheet As Worksheet, ByVal aProp As String) As CustomProperty
 Dim f As Variant
 
    For Each f In sheet.CustomProperties
        If StrComp(f.name, aProp, vbTextCompare) = 0 Then
            Set GetProperty = f
            Exit Function
        End If
    Next
End Function

Public Function WSGetProp(sheet As Worksheet, ByVal aProp As String) As String
 Dim prop As CustomProperty
 
    Set prop = GetProperty(sheet, aProp)
    If prop Is Nothing Then
        WSGetProp = ZESHEET_NIL
    Else
        WSGetProp = Trim(prop.value)
    End If
End Function

Public Sub WSSetProp(sheet As Worksheet, ByVal aProp As String, ByVal aValue As String)
 Dim prop As CustomProperty
 
    Set prop = GetProperty(sheet, aProp)
    aValue = IIf(aValue = vbNullString, " ", aValue)
    If prop Is Nothing Then
        Call sheet.CustomProperties.Add(aProp, aValue)
    Else
        prop.value = aValue
    End If
End Sub

Public Property Let ZESheetType(sheet As Worksheet, aType As String)
    Call WSSetProp(sheet, PROP_SHEET_TYPE, aType)
End Property

Public Property Get ZESheetType(sheet As Worksheet) As String
    On Local Error Resume Next
    ZESheetType = WSGetProp(sheet, PROP_SHEET_TYPE)
    On Local Error GoTo 0
End Property

Public Property Let ZESheetVersion(sheet As Worksheet, aType As String)
    Call WSSetProp(sheet, PROP_SHEET_VERSION, aType)
End Property

Public Property Get ZESheetVersion(sheet As Worksheet) As String
    On Local Error Resume Next
    ZESheetVersion = WSGetProp(sheet, PROP_SHEET_VERSION)
    On Local Error GoTo 0
End Property

Public Property Let ZESheetSavedEntities(sheet As Worksheet, entitiesXml As String)
    Call WSSetProp(sheet, PROP_SAVED_ENTITIES, entitiesXml)
End Property

Public Property Get ZESheetSavedEntities(sheet As Worksheet) As String
    On Local Error Resume Next
    ZESheetSavedEntities = WSGetProp(sheet, PROP_SAVED_ENTITIES)
    On Local Error GoTo 0
End Property

Public Property Get ZESheetID(sheet As Worksheet) As String
    On Local Error Resume Next
    ZESheetID = CSheet.WSGetProp(sheet, PROP_SHEET_ID)
    On Local Error GoTo 0
End Property

Public Property Let ZESheetID(sheet As Worksheet, aID As String)
    Call WSSetProp(sheet, PROP_SHEET_ID, aID)
End Property
Attribute VB_Name = "CZEUpgrade"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_changed As Boolean
Private m_wb As Workbook
Private m_Entities As Collection

Public Function allEntities() As Collection
10        On Error GoTo errorHandler

20        If (m_Entities Is Nothing) Then
30            Set m_Entities = New Collection
40        End If
50        Set allEntities = m_Entities

60        On Error GoTo 0
70        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
80        errorDescription = "CZEUpgrade.AllEntities(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
100       Err.Raise errorNumber, , errorDescription
End Function

Private Sub ConvertLoadMetaDataFunction(sheet As Worksheet, Target As TargetVersion)
          Dim shp As Shape
10        On Error GoTo errorHandler

20        If sheet Is Nothing Then Exit Sub
          Dim targetOnAction As String
30        targetOnAction = "MLoadMetaData"
40        For Each shp In sheet.Shapes
50            If shp.Type = msoFormControl Or shp.Type = 13 Then
60                If (CZEUpgradeHelper.isActionContains(shp, "ZE_LMD")) Then
70                    shp.OnAction = BaseAddin + targetOnAction
80                    Exit For
90                End If
100               If (CZEUpgradeHelper.isActionContains(shp, "ZE_LOADMETADATA")) Then
110                   shp.OnAction = BaseAddin + targetOnAction
120                   Exit For
130               End If
140           End If
150       Next

160       On Error GoTo 0
170       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
180       errorDescription = "CZEUpgrade.ConvertLoadMetaDataFunction(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
200       Err.Clear
210       Err.Raise errorNumber, , errorDescription
End Sub

Private Property Get BaseAddin() As String
' Dim dest As String
'
'    dest = Environ("ProgramFiles(X86)")
'    If dest = vbNullString Then
'        dest = Environ("ProgramFiles")
'    End If
'    BaseAddin = "'" + dest + IIf(Right(dest, 1) <> "\", "\", vbNullString) + "ZE PowerGroup\DDX\Library\2007\ZEDDXBase.xlam" + "'!"
 Dim fil As String
 Dim k As Long
 
    fil = ThisWorkbook.FullName
    For k = Len(fil) To 1 Step -1
        If Mid(fil, k, 1) = "\" Then Exit For
    Next
    If k > 1 Then
        BaseAddin = "'" + left(fil, k) + "ZEDDXBase.xlam" + "'!"
    End If
End Property

Private Sub ConvertUploadSheet(sheetType As String, oldMacroName As String, newMacroName As String, Target As TargetVersion, Optional isEqual As Boolean = False)
 Dim sheet As Worksheet
 Dim shp As Shape
          
          If m_wb.MultiUserEditing Then Exit Sub
          
10        On Error GoTo errorHandler
20        For Each sheet In m_wb.Worksheets
30            For Each shp In sheet.Shapes
40                If shp.Type = msoFormControl Or shp.Type = 13 Then
50                    If (CZEUpgradeHelper.isActionContains(shp, oldMacroName, isEqual)) Then
60                        If CSheet.ZESheetType(sheet) <> sheetType Then
70                            CSheet.ZESheetType(sheet) = sheetType
80                        End If
90                        shp.OnAction = BaseAddin + newMacroName
100                       Call ConvertLoadMetaDataFunction(sheet, Target)
110                       m_changed = True
120                       Exit For
130                   End If
140               End If
150           Next
160       Next

170       On Error GoTo 0
180       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
190       errorDescription = "CZEUpgrade.ConvertUploadSheet(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
210       Err.Clear
220       Err.Raise errorNumber, , errorDescription
End Sub

Private Sub MarkEntitySheet(sht As Worksheet)
    CSheet.ZESheetType(sht) = ZESHEET_ENTITY
End Sub

Private Sub RemoveShortcutIcons()
       Dim sht As Worksheet
       Dim s As Shape

10        On Local Error Resume Next
20        For Each sht In m_wb.Worksheets
30            If Not sht.ProtectContents Then
40                Call Err.Clear
50                For Each s In sht.Shapes
60                    If s.Type = msoLinkedPicture Or s.Type = msoPicture Then
70                        If InStr(UCase(s.OnAction), "ZE_RELOAD ") > 0 Or _
                             InStr(UCase(s.OnAction), "ZE_REMOVEPROFILE ") > 0 Or _
                             InStr(UCase(s.OnAction), "ZE_MOVEPROFILE ") > 0 Or _
                             InStr(UCase(s.OnAction), "ZE_EDITCURRENT ") > 0 Or _
                             InStr(UCase(s.OnAction), "ZE_EDITPROFILE ") > 0 Or _
                             InStr(UCase(s.OnAction), "'ZE_SHOWSAVEDPROFILE ") > 0 Then
80                            s.Delete
90                            m_changed = True
100                       End If
110                   End If
120               Next
130           End If
140       Next
150       On Local Error GoTo 0
End Sub

Private Sub RemoveOnActionFromSavedSheet(sheet As Worksheet)
    If sheet Is Nothing Then Exit Sub
    If sheet.parent.MultiUserEditing Then Exit Sub
        
10        On Error GoTo errorHandler

        
        
30            Call CZEUpgradeHelper.UnprotectSavedSheet(sheet)
40            If Not sheet.ProtectContents Then
                  Dim item As Shape
50                For Each item In sheet.Shapes
60                    If item.Type = msoLinkedPicture Or item.Type = msoPicture Or item.Type = msoFormControl Then
70                        If InStr(item.OnAction, "ZE_ShowProfile") > 0 Or _
                              InStr(item.OnAction, "ZE_SelectProfile") > 0 Or _
                              InStr(item.OnAction, "OnComboChanged") > 0 Then
80                            item.OnAction = ""
90                        End If
100                   End If
110               Next
120           End If

140       On Error GoTo 0
150       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
160       errorDescription = "CZEUpgrade.RemoveOnActionFromSavedSheet(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
180       Err.Raise errorNumber, , errorDescription
End Sub

Private Sub RemoveCurveMacroPrefix(shp As Shape, Target As TargetVersion)
          Dim action As String
          Dim p As Integer

10        On Local Error GoTo OOPS
20        action = shp.OnAction
30        p = InStr(action, "!")
40        If p > 0 Then
50            action = Mid(action, p + 1)
60            m_changed = True
70        End If

80        p = InStr(action, ".")
90        If p > 0 Then
100           action = Mid(action, p + 1)
110           m_changed = True
120       End If

130       shp.OnAction = action
OOPS:
140       Exit Sub
End Sub

Private Sub CheckCurveSheets(Target As TargetVersion)
       Dim sheet As Worksheet
       Dim shp As Shape

10        For Each sheet In m_wb.Worksheets
20            If CZEUpgradeHelper.IsCurveSheet(sheet) Then
30                For Each shp In sheet.Shapes
40                    If shp.Type = msoFormControl Or shp.Type = 13 Then
50                        Call RemoveCurveMacroPrefix(shp, Target)
60                    End If
70                Next
80            End If
90        Next
End Sub

Private Function ConvertFrom42To43(Wb As Workbook) As Boolean
          Dim xml As MSXML2.DOMDocument60, nodelist As IXMLDOMNodeList
          Dim sht As Worksheet, entities As String, qt As QueryTable
       
10        On Error GoTo errorHandler

20        Set xml = New MSXML2.DOMDocument60
30        For Each sht In Wb.Worksheets
40            entities = Trim(CSheet.WSGetProp(sht, PROP_SAVED_ENTITIES))
50            If entities <> vbNullString Then
60                Call xml.LoadXML("<?xml version=""1.0"" encoding=""utf-8""?>" + entities)
70                Set nodelist = xml.SelectNodes("/DataDirectEntities/anyType/ExcelRangeName")
80                For Each qt In sht.QueryTables
90                    If isQueryTableBelongEntity(qt.name, nodelist) Then
100                       m_changed = True
110                       Call CZEUpgradeHelper.ConvertQueryTableToNamedRange(qt)
120                   End If
130               Next
140           End If
150       Next
160       ConvertFrom42To43 = m_changed

170       On Error GoTo 0
180       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
190       errorDescription = "CZEUpgrade.ConvertFrom42To43(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
210       Err.Raise errorNumber, , errorDescription
End Function

Private Function isQueryTableBelongEntity(qtName As String, nodelist As IXMLDOMNodeList) As Boolean
          Dim k As Integer
10        On Error GoTo errorHandler

20        For k = 0 To nodelist.length - 1
30            If (StrComp(qtName, nodelist.item(k).text, vbTextCompare) = 0) Then
40                isQueryTableBelongEntity = True
50                Exit Function
60            End If
70        Next

80        On Error GoTo 0
90        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
100       errorDescription = "CZEUpgrade.isQueryTableBelongEntity(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
120       Err.Raise errorNumber, , errorDescription
End Function

Public Function DocumentUpgraded(Wb As Workbook, sourceVer As String, source As SourceVersion, ByVal Target As TargetVersion, isGenerageReport As Boolean, Optional isForceUpgrade As Boolean = False) As Boolean
 Dim docVersion As String
 Dim savedProfileSheet As Worksheet
 Dim savedReportSheet As Worksheet
              
        On Error GoTo errorHandler
        
20        Set m_wb = Wb
30        m_changed = False
40        Set m_Entities = Nothing
50        docVersion = CSheet.docVersion(ThisWorkbook) '"4.4.1"
'60        If (InStr(CSheet.docVersion(wb), "4.3") > 0) Or (InStr(CSheet.docVersion(wb), "4.4") > 0) Then
'70            If Not isForceUpgrade Then Exit Function
'80        End If
          
90        If source = SourceVersion.Version42 Then
100           Call ConvertFrom42To43(Wb)
110       ElseIf (source = SourceVersion.Version1) Then
120           Call UpgradeVersion1(Wb, savedProfileSheet, docVersion, isGenerageReport, Target)
130       Else
140           Set savedProfileSheet = CZEUpgradeHelper.GetSavedSheet(Wb, ZESHEET_SAVEED_PROFILES, "Saved Profiles", "ZE Saved Profiles")
150           Set savedReportSheet = CZEUpgradeHelper.GetSavedSheet(Wb, ZESHEET_SAVEED_REPORTS, "ZE Saved Reports", "Saved Reports")
160           Call ConvertSavedProfiles(savedProfileSheet, source)
170           Call ConvertSavedReports(savedReportSheet)
180           Call CZEUpgradeHelper.ConvertAllQuerytTablesToNamedRange(Wb, Me.allEntities)
190           Call CZEUpgradeHelper.FixOneByOneSizeRange(Wb, Me.allEntities)
200           Call CZEUpgradeHelper.SaveWorkBookEntities(m_wb, Me.allEntities)
210           Call RemoveOnActionFromSavedSheet(savedProfileSheet)
220           Call RemoveOnActionFromSavedSheet(savedReportSheet)
230       End If

      'upload sheets
240       Call ConvertUploadSheet(ZESHEET_FORECAST, "ZE_UPLOADFORECAST", "MSaveUpload", Target)
250       Call ConvertUploadSheet(ZESHEET_FUTURES, "ZE_UPLOADFUTURES", "MSaveUpload", Target)
260       Call ConvertUploadSheet(ZESHEET_SPOT, "ZE_UPLOADSPOT", "MSaveUpload", Target)
270       Call ConvertUploadSheet(ZESHEET_SPOT, "ZE_Upload", "MSaveUpload", Target, True)

      'curve sheets
280       Call CheckCurveSheets(Target)
      'shortcut icons
290       Call RemoveShortcutIcons

        m_changed = True
        DocumentUpgraded = m_changed
        CSheet.docVersion(Wb) = docVersion
        Call CSheet.DOCSetProp(Wb, ZEDOC_UPTOOL_NOTE, "[" + CSheet.DOCGetProp(ThisWorkbook, ZEDOC_REV) + "] Upgraded to " + docVersion + " from " + sourceVer + "   " + format(Now, "hh:mm:ss MMM-dd-yyyy"))
        
        Call removeSheet(savedProfileSheet)
        Call removeSheet(savedReportSheet)
        
'330       Call wb.Save
340       On Error GoTo 0
350       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
360       errorDescription = "CZEUpgrade.DocumentUpgraded(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
380       Err.Clear
390       Err.Raise errorNumber, , errorDescription
End Function

Private Sub removeSheet(sht As Worksheet)
 Dim b As Boolean
 
    If sht Is Nothing Then Exit Sub
    
    On Local Error GoTo OOPS
    
    b = Application.DisplayAlerts
    Application.DisplayAlerts = False
    sht.Delete
    
OOPS:
    If Err.Number <> 0 Then
    
    End If
    
    Application.DisplayAlerts = b
    On Local Error GoTo 0
    Exit Sub
End Sub

Private Function IsDDUrl(qt As Variant) As Boolean
 Dim url As String
 
    On Error GoTo OOPS
    
    url = qt.connection
    Call DebugPrint(url)
    If InStr(1, url, "URL;", vbTextCompare) <> 1 Then Exit Function
    
    Do
        'If InStr(1, url, "zedatadirectrequired", vbTextCompare) > 1 Then Exit Do
        If InStr(1, url, V1_DD_LOADPROFILE_1, vbTextCompare) > 1 Then Exit Do
        If InStr(1, url, V1_DD_LOADPROFILE_3, vbTextCompare) > 1 Then Exit Do
        '
        'If InStr(1, url, "zepower.com", vbTextCompare) > 1 Then Exit Do
        'If InStr(1, url, "datadirect", vbTextCompare) > 1 Then Exit Do
        If InStr(1, url, V1_DD_LOADPROFILE_2, vbTextCompare) > 1 Then Exit Do
        '
        Exit Function
    Loop
    
    Call DebugPrint("OK =>  " + url)
    IsDDUrl = True
    
OOPS:
    If Err.Number <> 0 Then
        Call DebugPrint(Err.Description)
    End If
    
    Exit Function
End Function

Private Sub UpgradeVersion1(Wb As Workbook, savedSheet As Worksheet, docVersion As String, isGenerageReport As Boolean, Target As TargetVersion)
10        On Error GoTo errorHandler
20        m_changed = True
          
30        If (isGenerageReport) Then
              Dim reportSheet As Worksheet
40            Set reportSheet = CZEUpgradeHelper.GetSavedSheet(Wb, BSConsts.ZESHEET_UPGRADEING_REPORT, "ZE Upgrading Report", "ze upgrading report")
50            If (reportSheet Is Nothing) Then
60                Set reportSheet = CZEUpgradeHelper.CreateReportSheet(Wb)
70            Else
80                Call reportSheet.rows.Clear
90                Call CZEUpgradeHelper.AddReportSheetHeader(reportSheet)
100           End If
110       End If
                  
          Dim sheet As Worksheet, qt As QueryTable, queryTableIndex As Integer
120       queryTableIndex = 2
130       Call RemoveV1TempSheet(Wb)
140       For Each sheet In Wb.Worksheets
150           For Each qt In sheet.QueryTables
               'If InStr(1, qt.connection, "zedatadirectrequired") > 0 Or InStr(1, qt.connection, "ZEData") > 0 Then
               If IsDDUrl(qt) Then
170                   If (qt.Refreshing = False) Then
180                       qt.name = "_" + CZEUpgradeHelper.RegulateName(qt.name) + "_1"
190                       Call SaveVersion1Connection(savedSheet, queryTableIndex, qt, isGenerageReport, Target)
200                       Call CZEUpgradeHelper.ConvertQueryTableToNamedRange(qt)
210                       queryTableIndex = queryTableIndex + 1

                        Call MarkEntitySheet(sheet)
                        
220                   End If
230               End If
240           Next
250       Next
260       Call CZEUpgradeHelper.SaveWorkBookEntities(m_wb, Me.allEntities)

270       On Error GoTo 0
280       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
290       errorDescription = "CZEUpgrade.UpgradeVersion1(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
310       Err.Raise errorNumber, , errorDescription
End Sub

Private Sub RemoveV1TempSheet(Wb As Workbook)
          Dim tempSheet As Worksheet
10        On Error GoTo errorHandler

20        Set tempSheet = CZEUpgradeHelper.GetSavedSheet(Wb, "NonExistType", "Available Profiles", "available profiles")
30        If Not (tempSheet Is Nothing) Then
40            tempSheet.rows.Clear
              Dim qt As QueryTable
50            For Each qt In tempSheet.QueryTables
60                qt.Delete
70            Next
80            tempSheet.Delete
90        End If

100       On Error GoTo 0
110       Exit Sub
errorHandler:
120       Err.Clear
End Sub

Private Function DecodeURL(ByVal StringToDecode As String) As String
 Dim TempAns As String
 Dim CurChr As Long

    CurChr = 1

    Do Until CurChr - 1 = Len(StringToDecode)
        Select Case Mid(StringToDecode, CurChr, 1)
            Case "+":
                TempAns = TempAns & " "
            Case "%":
                TempAns = TempAns & Chr(Val("&h" & Mid(StringToDecode, CurChr + 1, 2)))
                CurChr = CurChr + 2
            Case Else
                TempAns = TempAns & Mid(StringToDecode, CurChr, 1)
        End Select

        CurChr = CurChr + 1
    Loop

    DecodeURL = TempAns
End Function

Private Function DecodeBase64(ByVal base64String As String) As String
  Const base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  Dim dataLength, sOut, groupBegin
 
    base64String = DecodeURL(base64String)
    
    dataLength = Len(base64String)
    If dataLength Mod 4 <> 0 Then
      base64String = base64String + String(4 - (dataLength Mod 4), "=")
      dataLength = Len(base64String)
    End If
    
      ' Now decode each group:
      For groupBegin = 1 To dataLength Step 4
        Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
        ' Each data group encodes up To 3 actual bytes.
        numDataBytes = 3
        nGroup = 0
    
            For CharCounter = 0 To 3
              ' Convert each character into 6 bits of data, And add it To
              ' an integer For temporary storage.  If a character is a '=', there
              ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
              ' the whole string.)
        
              thisChar = Mid(base64String, groupBegin + CharCounter, 1)
        
              If thisChar = "=" Then
                numDataBytes = numDataBytes - 1
                thisData = 0
              Else
                thisData = InStr(1, base64, thisChar, vbBinaryCompare) - 1
              End If
              If thisData = -1 Then
                'Err.Raise 2, "Base64Decode", "Bad character In Base64 string."
                'Exit Function
                Exit For
              End If
                
              nGroup = 64 * nGroup + thisData
            Next
            If CharCounter <= 3 Then Exit For
        'Hex splits the long To 6 groups with 4 bits
        nGroup = Hex(nGroup)
        
        'Add leading zeros
        nGroup = String(6 - Len(nGroup), "0") & nGroup
        
        'Convert the 3 byte hex integer (6 chars) To 3 characters
        pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + Chr(CByte("&H" & Mid(nGroup, 3, 2))) + Chr(CByte("&H" & Mid(nGroup, 5, 2)))
        
        'add numDataBytes characters To out string
        sOut = sOut & left(pOut, numDataBytes)
      Next

    DecodeBase64 = sOut
End Function

Private Sub GetHdrInfo419(targetRange As Range, captionCount As Long, headerCount As Long, emptyLineCount As Long)
 Dim r As Long
 Dim rs As Long
 Dim s As String

    With targetRange
        If StrComp(Trim(CStr(.Cells(1, 1).Value2)), "Date", vbTextCompare) = 0 Then
            captionCount = 0
            headerCount = 1
        Else
            captionCount = 1
            headerCount = 0
        End If
        
        rs = .rows.Count
            
        For r = 2 To rs
            s = Trim(CStr(.Cells(r, 1).Value2))
            If s = vbNullString Then
                If WorksheetFunction.CountA(.rows(r)) = 0 Then
                    emptyLineCount = emptyLineCount + 1
                Else
                    headerCount = headerCount + 1
                End If
            Else
                If IsNumeric(s) Then Exit For
                headerCount = headerCount + 1
            End If
        Next
    End With
End Sub

Private Function GetSeriesOptionsLong() As Long
    GetSeriesOptionsLong = HSI_SET Or HSI_REMOVE_UPON_EMPTY Or _
                            HSI_FORMULA Or _
                            HSI_ROW_AGGREGATION Or _
                            HSI_FILTER Or _
                            HSI_AGGREGATION Or _
                            HSI_CUMULATIVE_AGGREGATION Or _
                            HSI_CONTRACT Or _
                            HSI_FORWARD_ANALYSIS Or _
                            HSI_EXTRPOLATION Or _
                            HSI_INTROPLATION Or _
                            HSI_SHIFT
End Function

Private Sub SaveVersion1Connection(sheet As Worksheet, index As Integer, qt As QueryTable, isGenerageReport As Boolean, Target As TargetVersion)
 Dim targetRange As Range
 Dim idx As Long
 Dim connection As String
 Dim conn As String
 Dim hdrrows As Long
 Dim caprows As Long
 Dim emptyrows As Long
 Dim is3 As Boolean
 Dim parameters() As String
 Dim profile As ProfileDataEntity, refreshPeriod As Integer, startDate As String, endDate As String, forecastDate As String
 
    On Error GoTo errorHandler
          
    Set targetRange = CZEUpgradeHelper.GetQueryTableResultRange(qt)
    If targetRange Is Nothing Then Exit Sub
                
    'hdrrows = GetHeaderRowCount(targetRange)
    Call GetHdrInfo419(targetRange, caprows, hdrrows, emptyrows)
    
    connection = qt.connection
    
    idx = InStr(connection, V1_DD_LOADPROFILE_1)
    If idx <= 0 Then
        idx = InStr(connection, V1_DD_LOADPROFILE_3)
        is3 = True
    End If
    
    If idx > 0 Then
        idx = idx + Len(IIf(is3, V1_DD_LOADPROFILE_3, V1_DD_LOADPROFILE_1))
        
        connection = Mid(connection, idx)
        idx = InStr(connection, "=")
        connection = Mid(connection, idx + 1)
        
        If InStr(connection, "username=") = 0 Then
            conn = connection
            connection = CZEUpgradeHelper.ReDecryptVersion1Connection(connection)
            If (InStr(connection, "username=") = 0) Then
                connection = CZEUpgradeHelper.DecryptVersion1Connection(conn)
                connection = CZEUpgradeHelper.ReDecryptVersion1Connection(connection)
            End If
        End If
    Else
        idx = InStr(connection, V1_DD_LOADPROFILE_2)
        idx = idx + Len(V1_DD_LOADPROFILE_2)
        
        connection = DecodeBase64(Mid(connection, idx))
    End If
    Call DebugPrint(connection)

    parameters = Split(connection, "&")

    Set profile = New ProfileDataEntity
    Call CZEUpgradeHelper.SetDefaultOptionValue(profile.EntityObject.entityOptions)
    
    With profile
        .ProfileType = "Default"
        .GroupName = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "groupname=")) '"NOGROUP"
        If .GroupName = vbNullString Then .GroupName = "NOGROUP"
            
        .IsAnalytics = True
200           .profileName = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "profilename="))
210           .OwnerUserName = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "profileowner="))
220           .EntityObject.ExcelRangeName = qt.name
230           .EntityObject.SavedRowIndexId = index
              
240           startDate = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "startDate="))
250           endDate = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "endDate="))
260           forecastDate = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "forecastDate="))
'270          sort = CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "sort="))
280           If (Len(startDate) > 0 And Len(endDate) > 0) Then
290               .EntityObject.entityOptions.DateInputOption = "DirectInput"
300               .EntityObject.entityOptions.InputStartDate = CZEUpgradeHelper.Version1SavedDate(startDate)
310               .EntityObject.entityOptions.InputEndDate = CZEUpgradeHelper.Version1SavedDate(endDate)
320           End If
            
            .EntityObject.entityOptions.HeaderOption = IIf(hdrrows > 1, "MultipleRows", "SingleRow")
            
330           If (Len(forecastDate) > 0) Then
340               .IsForecastDateSelected = True
350               .forecastDate = CZEUpgradeHelper.Version1SavedDate(forecastDate)
360           End If
             
             .EntityObject.entityOptions.InputDateOrder = GetDateOrder(CZEUpgradeHelper.URLDecode(CZEUpgradeHelper.FindParameter(parameters, "sort=")))
               
400           .EntityObject.entityOptions.isPreserveFormat = qt.PreserveFormatting
410           refreshPeriod = qt.refreshPeriod
420           .EntityObject.entityOptions.RefreshHours = refreshPeriod / 60
430           .EntityObject.entityOptions.RefreshMinutes = refreshPeriod - .EntityObject.entityOptions.RefreshHours * 60
440           .EntityObject.entityOptions.isRefreshOnOpen = qt.RefreshOnFileOpen
450           If .EntityObject.entityOptions.RefreshHours > 0 Or .EntityObject.entityOptions.RefreshMinutes > 0 Then .EntityObject.entityOptions.IsRefreshPeriodically = True
              
460           .EntityObject.executeResult.ColumnsCount = targetRange.Columns.Count
470           .EntityObject.executeResult.CaptionRowsCount = caprows
480           .EntityObject.executeResult.HeaderRowsCount = hdrrows + emptyrows
490           .EntityObject.executeResult.DataRowsCount = targetRange.rows.Count - (caprows + hdrrows + emptyrows) '2
500           .EntityObject.DateOrder = .EntityObject.entityOptions.InputDateOrder
510           .EntityObject.startDate = .EntityObject.entityOptions.InputStartDate
520           .EntityObject.endDate = .EntityObject.entityOptions.InputEndDate
            
            .EntityObject.entityOptions.OptionData = &H1 Or (2 * (emptyrows And &HF))
            If hdrrows > 0 Then .EntityObject.entityOptions.HeaderShownItems = GetSeriesOptionsLong()
530       End With
          
540       If (isGenerageReport) Then
550           Call CZEUpgradeHelper.GenerageReport(profile, index, targetRange)
560       End If
570       Call AddEntity(targetRange.Worksheet, profile)
          
580       On Error GoTo 0
590       Exit Sub

errorHandler:
 Dim errorDescription As String, errorNumber As Long
    errorDescription = "CZEUpgrade.saveVersion1Connection(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
    errorNumber = Err.Number
    DebugPrint errorDescription
          'your clean up codes here
    Err.Raise errorNumber, , errorDescription
End Sub

Private Sub ConvertSavedProfiles(sheet As Worksheet, source As SourceVersion)
10        On Error GoTo errorHandler

20        If sheet Is Nothing Then Exit Sub
30        If (sheet.UsedRange.rows.Count < 2) Then Exit Sub

          Dim entityRow As Range
          Dim rowIndex As Long
          Dim profile As ProfileDataEntity
          Dim isLoadxml As Boolean
          Dim id As Long
          Dim ZEWSXml As MSXML2.DOMDocument60
40        For rowIndex = 2 To sheet.UsedRange.rows.Count
            DebugPrint "ConvertSavedProfiles --> " & rowIndex
50            Set entityRow = sheet.UsedRange.Cells(rowIndex, 1)
60            Set profile = New ProfileDataEntity
70            Call CZEUpgradeHelper.SetDefaultOptionValue(profile.EntityObject.entityOptions)
80            isLoadxml = False

90            If (Len(GetValue(entityRow, 1, 40)) > 0) Then
100               Set ZEWSXml = New MSXML2.DOMDocument60
                  Dim xmlString As String
110               xmlString = GetValue(entityRow, 1, 40)
120               If (Len(xmlString) > 0) Then
130                   xmlString = DataSerializer.DecodeBase64String(xmlString)
140                   If ZEWSXml.LoadXML(xmlString) Then
150                       isLoadxml = True
160                   End If
170               End If
180           End If

190           id = GetLong(GetValue(entityRow, 1, 21))
200           With profile.EntityObject.entityOptions
210               .InputStartDate = LoadSavedDate(entityRow(1, 7))
220               .InputEndDate = LoadSavedDate(entityRow(1, 8))
230               .InputDateOrder = GetDateOrder(GetValue(entityRow, id, 9))
240               .IsAdjustWidth = GetBoolean(GetValue(entityRow, id, 11))
250               .isRefreshOnOpen = GetBoolean(GetValue(entityRow, id, 14))
260               .isPreserveFormat = GetBoolean(GetValue(entityRow, id, 15))
270               .IsFillFormulas = GetBoolean(GetValue(entityRow, id, 16))
280               .HeaderOption = GetHeadOption(GetValue(entityRow, id, 24))
                .VerticalInsert = CZEUpgradeHelper.GetVerticalInsert(GetDropDownIndex(sheet, id, 25)) 'Y
                .HasProfileNumeratorDenominator = True
                .HasProfileSeriesCaption = True
290               .IsTrimEmptyHeaderRows = GetBoolean(GetValue(entityRow, id, 26))
300               .RefreshHours = GetLong(GetValue(entityRow, id, 27))
310               .RefreshMinutes = GetLong(GetValue(entityRow, id, 28))
320               .chartOption = GetChartOption(GetValue(entityRow, id, 32))
330               .IsRefreshPeriodically = GetBoolean(GetValue(entityRow, id, 35))
340               If .RefreshHours > 0 Or .RefreshMinutes > 0 Then .IsRefreshPeriodically = True

                  Dim isDateCheck As Boolean
350               isDateCheck = GetBoolean(GetValue(entityRow, id, 31))
360               If (isDateCheck) Then
370                   .DateInputOption = "DirectInput"
380               Else
                      Dim selectedQuickDate As String
390                   selectedQuickDate = GetValue(entityRow, id, 37)
400                   If (isLoadxml) Then
410                       selectedQuickDate = ProfileGetFromXml(ZEWSXml, "DynamicDate", selectedQuickDate)
420                   End If
430                   If StrComp(selectedQuickDate, "Default", vbTextCompare) = 0 Then
440                       .DateInputOption = "Default"
450                   ElseIf (Len(selectedQuickDate) > 0) Then
460                       .DateInputOption = "QuickDate"
470                       .selectedQuickDate = selectedQuickDate
480                   Else
490                       If (year(.InputStartDate) > 1902 And year(.InputEndDate) > 1902) Then
500                           .DateInputOption = "DirectInput"
510                       Else
520                           .DateInputOption = "Default"
530                       End If
540                   End If
550               End If

560               If (isLoadxml) Then
570                   .HasProfileEntityTitle = (ProfileGetFromXml(ZEWSXml, "NoEntityTitle", "0") = "0")
580                   .HasProfileSeriesName = (ProfileGetFromXml(ZEWSXml, "NoSeriesNames", "0") = "0")
590                   .HasProfileDataSource = (ProfileGetFromXml(ZEWSXml, "NoProfileDataSource", "0") = "0")
600                   .HasProfileDataReport = (ProfileGetFromXml(ZEWSXml, "NoProfileReport", "0") = "0")
610                   .HasProfileObservation = (ProfileGetFromXml(ZEWSXml, "NoProfileObservation", "0") = "0")
620                   .HasProfileAttributes = (ProfileGetFromXml(ZEWSXml, "NoProfileAttributes", "0") = "0")

630                   .ResultType = IIf((ReportGetFromXml(ZEWSXml, "ResultType", "0") = "1"), "ListObject", "QueryTable")
640                   .VerticalDelete = CZEUpgradeHelper.GetVerticalDelete(CInt(ProfileGetFromXml(ZEWSXml, "VerticalDelete", "0")))
650                   .HorizontalDelete = CZEUpgradeHelper.GetHorizontalDelete(CInt(ProfileGetFromXml(ZEWSXml, "HorizontalDelete", "0")))
660                   .VerticalInsert = CZEUpgradeHelper.GetVerticalInsert(CInt(ProfileGetFromXml(ZEWSXml, "VerticalInsert", "0")))
670                   .HorizontalInsert = CZEUpgradeHelper.GetHorizontalInsert(CInt(ProfileGetFromXml(ZEWSXml, "HorizontalInsert", "0")))
       
680                   .IsFillCaption = GetBoolean(ProfileGetFromXml(ZEWSXml, "FillCaption", "False"))
690                   .IsFillHeader = GetBoolean(ProfileGetFromXml(ZEWSXml, "FillHeader", "False"))
700                   .IsFillDataRow = GetBoolean(ProfileGetFromXml(ZEWSXml, "FillDataRow", "False"))
710                   .IsFillByRow = GetBoolean(ProfileGetFromXml(ZEWSXml, "FillByRow", "False"))
720                   .CaptionColor = CLng(ProfileGetFromXml(ZEWSXml, "CaptionColor", "0"))
730                   .HeaderColor = CLng(ProfileGetFromXml(ZEWSXml, "HeaderColor", "0"))
740                   .OddColor = CLng(ProfileGetFromXml(ZEWSXml, "OddColor", "0"))
750                   .EvenColor = CLng(ProfileGetFromXml(ZEWSXml, "EvenColor", "0"))
760                   .IsOneTimeRequest = GetBoolean(ProfileGetFromXml(ZEWSXml, "OneTimeRequest", "0") = "1")
770               End If
780           End With

790           With profile.EntityObject
800               .ExcelRangeName = GetValue(entityRow, 1, 1)
810               .SavedRowIndexId = id
820               .LastRunningTime = LoadSavedDate(entityRow(1, 18))
830               .executeResult.ColumnsCount = GetLong(GetValue(entityRow, 1, 19))
840               .executeResult.CaptionRowsCount = 1
850               .executeResult.HeaderRowsCount = IIf(.entityOptions.HeaderOption = "SingleRow", 1, 0)
860               .executeResult.DataRowsCount = GetLong(GetValue(entityRow, 1, 20)) - .executeResult.HeaderRowsCount - 1
870               .DateOrder = .entityOptions.InputDateOrder
880               .startDate = .entityOptions.InputStartDate
890               .endDate = .entityOptions.InputEndDate
900               If (isLoadxml) Then
910                   If (Len(ProfileGetFromXml(ZEWSXml, "VerticalTable")) > 0 And Len(ProfileGetFromXml(ZEWSXml, "Pivot")) > 0) Then
                          Dim isVerticalTable As Boolean, isPivoted As Boolean
920                       isVerticalTable = (ProfileGetFromXml(ZEWSXml, "VerticalTable") = "1")
930                       isPivoted = (ProfileGetFromXml(ZEWSXml, "Pivot") = "1")
940                       .IsVertical = isVerticalTable Xor isPivoted
950                       .IsRetrieveVerticalSettingFromServer = False
960                   End If
970                   .executeResult.HeaderRowsCount = CLng(ProfileGetFromXml(ZEWSXml, "HeaderRows", "0"))
980                   .executeResult.ColumnsCount = CLng(ProfileGetFromXml(ZEWSXml, "Cols", "0"))
990                   .executeResult.CaptionRowsCount = IIf(.entityOptions.HasProfileEntityTitle, 1, 0)
1000                  .executeResult.DataRowsCount = CLng(ProfileGetFromXml(ZEWSXml, "Rows", "0")) - .executeResult.HeaderRowsCount - .executeResult.CaptionRowsCount
1010              End If
1020          End With

1030          With profile
1040              .profileName = GetValue(entityRow, 1, 5)
1050              .OwnerUserName = GetValue(entityRow, 1, 6)
1060              .GroupName = "NOGROUP"
1070              .IsForecastDateSelected = GetBoolean(GetValue(entityRow, id, 34))
1080              .forecastDate = LoadSavedDate(entityRow(1, 10))
1090              If (source = Version2) Then
1100                  If (year(.forecastDate) > 1902) Then .IsForecastDateSelected = True
1110              End If
1120              .TemplateName = GetValue(entityRow, 1, 36)
1130              .CustomAttributes = GetValue(entityRow, 1, 41)
1140              .IsAnalytics = True
1150              .ProfileType = "Default"

1160              If (isLoadxml) Then
1170                  If (ProfileGetFromXml(ZEWSXml, "IsFC", "0") = "1") Then
1180                      .ProfileType = "ForwardAnalysis"
1190                  ElseIf (ProfileGetFromXml(ZEWSXml, "AdvancedQuery", "0") = "1") Then
1200                      .ProfileType = "AdvancedQueryRequest"
1210                  Else
1220                      .ProfileType = "Default"
1230                  End If
1240                  .GroupName = ProfileGetFromXml(ZEWSXml, "GroupName", "NOGROUP")
1250                  .profileName = ProfileGetFromXml(ZEWSXml, "Profile", .profileName)
1260                  .OwnerUserName = ProfileGetFromXml(ZEWSXml, "Owner", .OwnerUserName)
1270                  .TemplateName = ProfileGetFromXml(ZEWSXml, "Template", .TemplateName)
1280              End If
1290          End With
1300          Call AddEntity(CZEUpgradeHelper.GetWorkSheetByRangeName(sheet, profile.EntityObject.ExcelRangeName), profile)
                DebugPrint "ConvertSavedProfiles <--"
1310      Next

1320      On Error GoTo 0
1330      Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
1340      errorDescription = "CZEUpgrade.ConvertSavedProfiles(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
1360      Err.Clear
1370      Err.Raise errorNumber, , errorDescription
End Sub

Private Sub ConvertSavedReports(sheet As Worksheet)
10        On Error GoTo errorHandler

20        If sheet Is Nothing Then Exit Sub
30        If (sheet.UsedRange.rows.Count < 2) Then Exit Sub
          Dim entityRow As Range
          Dim rowIndex As Long
          Dim Report As ReportDataEntity
          Dim isLoadxml As Boolean
          Dim id As Long
          Dim ZEWSXml As MSXML2.DOMDocument60
40        For rowIndex = 2 To sheet.UsedRange.rows.Count
50            Set entityRow = sheet.UsedRange.Cells(rowIndex, 1)
60            Set Report = New ReportDataEntity
70            Call CZEUpgradeHelper.SetDefaultOptionValue(Report.EntityObject.entityOptions)
80            isLoadxml = False

90            If (Len(GetValue(entityRow, 1, 16)) > 0) Then
100               Set ZEWSXml = New MSXML2.DOMDocument60
                  Dim xmlString As String
110               xmlString = GetValue(entityRow, 1, 16)
120               If (Len(xmlString) > 0) Then
130                   xmlString = DataSerializer.DecodeBase64String(xmlString)
140                   If ZEWSXml.LoadXML(xmlString) Then
150                       isLoadxml = True
160                   End If
170               End If
180           End If

190           id = GetLong(GetValue(entityRow, 1, 8))
200           With Report.EntityObject.entityOptions
210               .InputStartDate = LoadSavedDate(entityRow(1, 4))
220               .InputEndDate = LoadSavedDate(entityRow(1, 5))
230               If (isLoadxml) Then
240                   .HasReportEntityTitle = (ReportGetFromXml(ZEWSXml, "NoEntityTitle", "0") = "0")
250                   .HasReportSeriesName = (ReportGetFromXml(ZEWSXml, "NoSeriesNames", "0") = "0")
260                   .HasReportDataSource = (ReportGetFromXml(ZEWSXml, "NoDataSource", "0") = "0")
270                   .HasReportDataReport = (ReportGetFromXml(ZEWSXml, "NoReport", "0") = "0")
280                   .HasReportObservation = (ReportGetFromXml(ZEWSXml, "NoObservations", "0") = "0")
290                   .HasReportAttributes = (ReportGetFromXml(ZEWSXml, "NoAttributes", "0") = "0")

300                   .ResultType = IIf((ReportGetFromXml(ZEWSXml, "ResultType", "0") = "1"), "ListObject", "QueryTable")
310                   .VerticalDelete = CZEUpgradeHelper.GetVerticalDelete(CInt(ReportGetFromXml(ZEWSXml, "VerticalDelete", "0")))
320                   .HorizontalDelete = CZEUpgradeHelper.GetHorizontalDelete(CInt(ReportGetFromXml(ZEWSXml, "HorizontalDelete", "0")))
330                   .VerticalInsert = CZEUpgradeHelper.GetVerticalInsert(CInt(ReportGetFromXml(ZEWSXml, "VerticalInsert", "0")))
340                   .HorizontalInsert = CZEUpgradeHelper.GetHorizontalInsert(CInt(ReportGetFromXml(ZEWSXml, "HorizontalInsert", "0")))

350                   .IsFillCaption = GetBoolean(ReportGetFromXml(ZEWSXml, "FillCaption", "False"))
360                   .IsFillHeader = GetBoolean(ReportGetFromXml(ZEWSXml, "FillHeader", "False"))
370                   .IsFillDataRow = GetBoolean(ReportGetFromXml(ZEWSXml, "FillDataRow", "False"))
380                   .IsFillByRow = GetBoolean(ReportGetFromXml(ZEWSXml, "FillByRow", "False"))
390                   .CaptionColor = CLng(ReportGetFromXml(ZEWSXml, "CaptionColor", "0"))
400                   .HeaderColor = CLng(ReportGetFromXml(ZEWSXml, "HeaderColor", "0"))
410                   .OddColor = CLng(ReportGetFromXml(ZEWSXml, "OddColor", "0"))
420                   .EvenColor = CLng(ReportGetFromXml(ZEWSXml, "EvenColor", "0"))
430                   .IsOneTimeRequest = GetBoolean(ReportGetFromXml(ZEWSXml, "OneTimeRequest", "0") = "1")

440                   .IsAdjustWidth = GetBoolean(ReportGetFromXml(ZEWSXml, "AdjustWidth", "False"))
450                   .IsFillFormulas = GetBoolean(ReportGetFromXml(ZEWSXml, "FillFormulas", "False"))
460                   .isPreserveFormat = GetBoolean(ReportGetFromXml(ZEWSXml, "PreserveFormat", "False"))
470                   .IsTrimEmptyHeaderRows = GetBoolean(ReportGetFromXml(ZEWSXml, "TrimEmptyRows", "False"))
480                   If (GetBoolean(ReportGetFromXml(ZEWSXml, "GenChartNewWorkSheet", "False"))) Then
490                       .chartOption = "OnNewSheet"
500                   ElseIf (GetBoolean(ReportGetFromXml(ZEWSXml, "GenChartNewObject", "False"))) Then
510                       .chartOption = "OnSameSheet"
520                   Else
530                       .chartOption = "NoChart"
540                   End If
550                   .isRefreshOnOpen = GetBoolean(ReportGetFromXml(ZEWSXml, "RefreshOnStart", "False"))
560                   .RefreshMinutes = CLng(ReportGetFromXml(ZEWSXml, "RefreshMinutes", "0"))
570                   .RefreshHours = CLng(ReportGetFromXml(ZEWSXml, "RefreshHours", "0"))
580                   If .RefreshHours > 0 Or .RefreshMinutes > 0 Then .IsRefreshPeriodically = True
590                   .InputDateOrder = GetDateOrder(ReportGetFromXml(ZEWSXml, "DataOrder", "ASC"))

                      Dim isDateCheck As Boolean
600                   isDateCheck = GetBoolean(ReportGetFromXml(ZEWSXml, "DateCheck", "False"))
610                   If (isDateCheck) Then
620                       .DateInputOption = "DirectInput"
630                   Else
                          Dim selectedQuickDate As String
640                       selectedQuickDate = ReportGetFromXml(ZEWSXml, "DynamicDate", "")
650                       If StrComp(selectedQuickDate, "Default", vbTextCompare) = 0 Then
660                           .DateInputOption = "Default"
670                       ElseIf (Len(selectedQuickDate) > 0) Then
680                           .DateInputOption = "QuickDate"
690                           .selectedQuickDate = selectedQuickDate
700                       Else
                              Dim defaultDate As Date
710                           If (.InputStartDate > defaultDate And .InputEndDate > defaultDate) Then
720                               .DateInputOption = "DirectInput"
730                           Else
740                               .DateInputOption = "Default"
750                           End If
760                       End If
770                   End If
780               End If
790           End With

800           With Report.EntityObject
810               .ExcelRangeName = GetValue(entityRow, 1, 1)
820               .LastRunningTime = LoadSavedDate(entityRow(1, 14))
830               .SavedRowIndexId = id
840               .Interval = GetValue(entityRow, 1, 6)
850               .executeResult.ColumnsCount = GetLong(GetValue(entityRow, 1, 10))
860               .executeResult.CaptionRowsCount = IIf(.entityOptions.HasProfileEntityTitle, 1, 0)
870               .executeResult.HeaderRowsCount = IIf(.entityOptions.HeaderOption = "SingleRow", 1, 0)
880               If (isLoadxml) Then
890                   If (ReportGetFromXml(ZEWSXml, "Pivot") = "1") Then
900                       .IsVertical = False
910                   End If
920                   .executeResult.HeaderRowsCount = CLng(ReportGetFromXml(ZEWSXml, "HeaderRows", "0"))
930                   .Interval = ReportGetFromXml(ZEWSXml, "Granularity")
940               End If
950               .executeResult.DataRowsCount = GetLong(GetValue(entityRow, 1, 9)) - .executeResult.HeaderRowsCount - .executeResult.CaptionRowsCount
960               .DateOrder = .entityOptions.InputDateOrder
970               .startDate = .entityOptions.InputStartDate
980               .endDate = .entityOptions.InputEndDate
990           End With

1000          With Report
1010              .DataSourceValue = GetValue(entityRow, 1, 2)
1020              .DataReportValue = GetValue(entityRow, 1, 3)
1030              .IsSimple = GetBoolean(GetValue(entityRow, 1, 7))
                  Dim observations() As String
1040              observations = Split(GetValue(entityRow, 1, 11), ",")
1050              .ObservationValues = observations
1060               If (Len(GetValue(entityRow, 1, 12)) > 0) Then
1070                  .reportAttributes = CZEUpgradeHelper.MakeAttributes(GetValue(entityRow, 1, 12))
1080               End If

1090              If (isLoadxml) Then
1100                  .DataSourceLabel = ReportGetFromXml(ZEWSXml, "DS", .DataSourceValue)
1110                  .DataReportLabel = ReportGetFromXml(ZEWSXml, "Rpt", .DataReportValue)
1120                  .ObservationLabels = DataSerializer.SelectMultipleNodesText(ZEWSXml, "/Report/Obs/V")
1130                  .AttributeSelectedIndex = CLng(ReportGetFromXml(ZEWSXml, "Idx", "-1"))
1140              Else
1150                  .DataSourceLabel = .DataSourceValue
1160                  .DataReportLabel = .DataReportValue
1170                  .AttributeSelectedIndex = -1
1180                  .ObservationLabels = .ObservationValues
1190              End If

1200          End With
1210          Call AddEntity(CZEUpgradeHelper.GetWorkSheetByRangeName(sheet, Report.EntityObject.ExcelRangeName), Report)
1220      Next

1230      On Error GoTo 0
1240      Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
1250      errorDescription = "CZEUpgrade.ConvertSavedReports(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
1270      Err.Clear
1280      Err.Raise errorNumber, , errorDescription
End Sub

Private Function ProfileGetFromXml(xml As MSXML2.DOMDocument60, tag As String, Optional defaultValue As String = vbNullString) As String
10        On Error GoTo errorHandler

20        ProfileGetFromXml = DataSerializer.SelectSingleNodeText(xml, "/Profile/" + tag)
30        If (Len(ProfileGetFromXml) = 0) Then ProfileGetFromXml = defaultValue

40        On Error GoTo 0
50        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
60        errorDescription = "CZEUpgrade.ProfileGetFromXml(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
80        Err.Clear
90        Err.Raise errorNumber, , errorDescription
End Function

Private Function ReportGetFromXml(xml As MSXML2.DOMDocument60, tag As String, Optional defaultValue As String = vbNullString) As String
10        On Error GoTo errorHandler

20        ReportGetFromXml = DataSerializer.SelectSingleNodeText(xml, "/Report/" + tag)
30        If (Len(ReportGetFromXml) = 0) Then ReportGetFromXml = defaultValue

40        On Error GoTo 0
50        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
60        errorDescription = "CZEUpgrade.ReportGetFromXml(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
80        Err.Clear
90        Err.Raise errorNumber, , errorDescription
End Function

Private Sub AddEntity(targetSheet As Worksheet, entity As Object)
10        On Error GoTo errorHandler
20        If (entity Is Nothing) Then Exit Sub
30        If (targetSheet Is Nothing) Then
40        End If
50        If Not targetSheet Is Nothing Then
              
              Call MarkEntitySheet(targetSheet)
              
60            entity.EntityObject.sheetId = vbNullString
70            If (Len(CSheet.ZESheetID(targetSheet)) > 0) Then
80                entity.EntityObject.sheetId = CSheet.ZESheetID(targetSheet)
90            Else
                  Dim guid As String
100               guid = CZEUpgradeHelper.CreateGUID
110               entity.EntityObject.sheetId = guid
120               CSheet.ZESheetID(targetSheet) = guid
130           End If
              
140           Call Me.allEntities.Add(entity)
150       End If

160       On Error GoTo 0
170       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
180       errorDescription = "CZEUpgrade.AddEntity(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
200       Err.Clear
210       Err.Raise errorNumber, , errorDescription
End Sub

Public Function GetValue(savedRange As Range, rowIndexOrId As Long, columnIndex As Long) As String
          Dim result As String
10        On Error GoTo errorHandler

20        result = savedRange(1, columnIndex).value
30        If (Len(result) = 0) Then
40            result = GetDropDownValue(savedRange.Worksheet, rowIndexOrId, columnIndex)
50        End If
60        GetValue = result

70        On Error GoTo 0
80        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
90        errorDescription = "CZEUpgradeHelper.GetValue(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
110       Err.Clear
120       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetDropDownValue(sheet As Worksheet, rowIndex As Long, columnIndex As Long) As String
    GetDropDownValue = GetDropDownValue2(sheet, rowIndex, columnIndex)
'          Dim shapeItem As Shape
'10        On Error GoTo errorHandler
'
'20        For Each shapeItem In sheet.Shapes
'30            If (shapeItem.name = "DD_" & CStr(rowIndex) & "_" & CStr(columnIndex)) Then
'40                Call SetShapeValue(shapeItem)
'50                GetDropDownValue = shapeItem.ControlFormat.List(shapeItem.ControlFormat.value)
'60                Exit Function
'70            End If
'80        Next
'
'90        On Error GoTo 0
'100       Exit Function
'errorHandler:
'          Dim errorDescription As String, errorNumber As Long
'110       errorDescription = "CZEUpgradeHelper.GetDropDownValue(), Line:" & Str(Erl()) + " " + vbCrLf + Err.Description
'120       errorNumber = Err.Number
'130       Err.Clear
'140       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetDropDownIndex(sheet As Worksheet, rowIndex As Long, columnIndex As Long) As Integer
 Dim shp As Shape
 
    On Error GoTo OOPS

    For Each shp In sheet.Shapes
        If (shp.name = "DD_" & CStr(rowIndex) & "_" & CStr(columnIndex)) Then
            GetDropDownIndex = shp.ControlFormat.ListIndex
            Exit For
        End If
    Next

OOPS:
    If Err.Number <> 0 Then
    
    End If
    
    On Error GoTo 0
    Exit Function
End Function

Private Sub SetShapeValue(shapeItem As Shape)
10        On Error GoTo errorHandler

20        If Not shapeItem Is Nothing Then
30            If (shapeItem.ControlFormat.value = 0) Then shapeItem.ControlFormat.value = 1
40        End If

50        On Error GoTo 0
60        Exit Sub
errorHandler:
70        Err.Clear
End Sub

Public Function GetBoolean(boolString As String) As Boolean
10        On Error GoTo errorHandler

20        If (StrComp(boolString, "True", vbTextCompare) = 0) Then
30            GetBoolean = True
40        Else
50            GetBoolean = False
60        End If

70        On Error GoTo 0
80        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
90        errorDescription = "CZEUpgradeHelper.GetBoolean(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
110       Err.Clear
120       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetLong(longString As String) As Long
10        On Error GoTo errorHandler

20        If (Len(longString) > 0) Then
30            If (IsNumeric(longString)) Then
40                GetLong = CLng(longString)
50            End If
60        End If

70        On Error GoTo 0
80        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
90        errorDescription = "CZEUpgradeHelper.GetLong(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
110       Err.Clear
120       Err.Raise errorNumber, , errorDescription
End Function

Private Function GetChartOption(chartOption As String) As String
10        On Error GoTo errorHandler

20        If (StrComp(chartOption, "Generate Chart", vbTextCompare) = 0) Then
30            GetChartOption = "OnNewSheet"
40        ElseIf (StrComp(chartOption, "Generate Chart as New Object", vbTextCompare) = 0) Then
50            GetChartOption = "OnSameSheet"
60        Else
70            GetChartOption = "NoChart"
80        End If

90        On Error GoTo 0
100       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
110       errorDescription = "CZEUpgradeHelper.GetChartOption(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
130       Err.Clear
140       Err.Raise errorNumber, , errorDescription
End Function

Private Function GetDateOrder(orderString As String) As String
    If StrComp(orderString, "DESC", vbTextCompare) = 0 Then
        GetDateOrder = "DESC"
    ElseIf StrComp(orderString, "ASC", vbTextCompare) = 0 Then
        GetDateOrder = "ASC"
    Else
        GetDateOrder = "Default"
    End If
End Function

Private Function GetHeadOption(headOptionString As String) As String
10        On Error GoTo errorHandler

20        If (StrComp(headOptionString, "Multiple Cells", vbTextCompare) = 0) Then
30            GetHeadOption = "MultipleRows"
40        Else
50            GetHeadOption = "SingleRow"
60        End If

70        On Error GoTo 0
80        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
90        errorDescription = "CZEUpgradeHelper.GetHeadOption(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
110       Err.Clear
120       Err.Raise errorNumber, , errorDescription
End Function

Private Function LoadSavedDate(targetCell As Range) As Date
10        On Error GoTo errorHandler
          Dim result As Date
          Dim year As Long
          Dim month As Long
          Dim day As Long
20        If (Len(targetCell.Value2) > 0) Then
30            If targetCell.HasFormula Then
40                result = CDate(targetCell.value)
50            Else
60                If (IsNumeric(targetCell.Value2)) Then
70                    If (Len(targetCell.value) = 8 And IsNumeric(targetCell.value)) Then
80                        year = CLng(targetCell.value)
90                        month = year Mod 10000
100                       day = month Mod 100
110                       month = month / 100
120                       year = year / 10000
130                       result = DateSerial(year, month, day)
140                   Else
150                       result = CDate(targetCell.Value2)
160                   End If
170               Else
180                   If Len(CStr(targetCell.value)) > 0 Then
                          Dim dateString() As String
190                       dateString = Split(CStr(targetCell.value), "_")
200                       If (UBound(dateString) = 2) Then
210                           result = DateSerial(dateString(2), dateString(0), dateString(1))
220                       Else
230                           result = CDate(targetCell.value)
240                       End If
250                   Else
260                       result = CDate(targetCell.value)
270                   End If
280               End If
290           End If
300       End If

310       LoadSavedDate = result
320       On Error GoTo 0
330       Exit Function
errorHandler:
340       Err.Clear
350       LoadSavedDate = result
End Function

Private Function GetDropDownValue2(sheet As Worksheet, rowIndex As Long, columnIndex As Long) As String
 Dim shapeItem As Shape
 Dim idx As Long
 
    For Each shapeItem In sheet.Shapes
        If (shapeItem.name = "DD_" & CStr(rowIndex) & "_" & CStr(columnIndex)) Then
            With shapeItem.ControlFormat
                idx = .ListIndex
                If idx > 0 Then GetDropDownValue2 = .List(idx)
                Exit Function
            End With
        End If
    Next
End Function
Attribute VB_Name = "CZEUpgradeHelper"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Type guid
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(0 To 7) As Byte
End Type

#If Win64 Then
    Private Declare PtrSafe Function CoCreateGuid Lib "OLE32.DLL" (pGuid As guid) As LongLong
#ElseIf VBA7 Then
    Private Declare PtrSafe Function CoCreateGuid Lib "OLE32.DLL" (pGuid As guid) As Long
#Else
    Private Declare Function CoCreateGuid Lib "OLE32.DLL" (pGuid As guid) As Long
#End If

Public Property Get ResultSheet(Wb As Workbook) As Worksheet
    Set ResultSheet = GetSavedSheet(Wb, BSConsts.ZESHEET_UPGRADEING_REPORT, "ZE Upgrading Report", "ze upgrading report")
End Property

Public Function CreateGUID() As String
    Dim G As guid
    With G
    If (CoCreateGuid(G) = 0) Then
    CreateGUID = _
        String$(8 - Len(Hex$(.Data1)), "0") & Hex$(.Data1) & _
        String$(4 - Len(Hex$(.Data2)), "0") & Hex$(.Data2) & _
        String$(4 - Len(Hex$(.Data3)), "0") & Hex$(.Data3) & _
        IIf((.Data4(0) < &H10), "0", "") & Hex$(.Data4(0)) & _
        IIf((.Data4(1) < &H10), "0", "") & Hex$(.Data4(1)) & _
        IIf((.Data4(2) < &H10), "0", "") & Hex$(.Data4(2)) & _
        IIf((.Data4(3) < &H10), "0", "") & Hex$(.Data4(3)) & _
        IIf((.Data4(4) < &H10), "0", "") & Hex$(.Data4(4)) & _
        IIf((.Data4(5) < &H10), "0", "") & Hex$(.Data4(5)) & _
        IIf((.Data4(6) < &H10), "0", "") & Hex$(.Data4(6)) & _
        IIf((.Data4(7) < &H10), "0", "") & Hex$(.Data4(7))
    End If
    End With
End Function

Public Function isActionContains(shp As Shape, macroName As String, Optional isEqual As Boolean = False) As Boolean
          Dim action As String
10        On Error GoTo errorHandler

20        action = UCase(shp.OnAction)
          Dim startPosition As Long
30        startPosition = InStr(action, UCase(macroName))
40        If (startPosition > 0) Then
50            If (isEqual) Then
60                If (Len(Trim(Mid(action, startPosition + Len(macroName), 1))) = 0) Then
70                    isActionContains = True
80                End If
90            Else
100               isActionContains = True
110           End If
120       End If
130       On Error GoTo 0
140       Exit Function
errorHandler:
150       Err.Clear
160       isActionContains = False
End Function

Public Function GetSavedSheet(m_wb As Workbook, sheetType As String, sheetName1 As String, sheetName2 As String) As Worksheet
          Dim sheet As Worksheet

10        On Error GoTo errorHandler

20        For Each sheet In m_wb.Worksheets
30            If CSheet.ZESheetType(sheet) = sheetType Then
40                Set GetSavedSheet = sheet
50                Exit Function
60            End If
70        Next

80        For Each sheet In m_wb.Worksheets
90            If Trim(UCase(sheet.name)) = UCase(sheetName1) Then
100               Set GetSavedSheet = sheet
110               Exit Function
120           End If
130       Next

140       For Each sheet In m_wb.Worksheets
150           If Trim(UCase(sheet.name)) = UCase(sheetName2) Then
160               Set GetSavedSheet = sheet
170               Exit Function
180           End If
190       Next

200       On Error GoTo 0
210       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
220       errorDescription = "CZEUpgradeHelper.GetSavedSheet(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
240       Err.Clear
250       Err.Raise errorNumber, , errorDescription
End Function

Public Function MakeAttributes(attributeString As String) As AttributeValuesHolder()
          Dim result() As AttributeValuesHolder
          Dim tempAttrs() As String, i As Integer, temp2() As String, j As Integer
          Dim temp3() As String
          Dim p() As String

10        On Error GoTo errorHandler

20        tempAttrs = Split(attributeString, vbLf)
30        ReDim result(UBound(tempAttrs))

40        For i = 0 To UBound(tempAttrs)
50            Set result(i) = New AttributeValuesHolder

60            p = Split(tempAttrs(i), Chr(&HF))
70            temp2 = Split(p(0), vbCr)
80            result(i).Column = temp2(0)

90            If UBound(temp2) > 0 Then
100               ReDim temp3(UBound(temp2) - 1)
110               For j = 1 To UBound(temp2)
120                   temp3(j - 1) = temp2(j)
130               Next j
140               If Len(Join(temp3)) > 0 Then
150                   result(i).Selected = temp3
160               End If
170           End If
180           If UBound(p) = 1 Then
190               temp2 = Split(p(1), vbCr)
200               result(i).Values = temp2
210           End If
220       Next i

230       MakeAttributes = result

240       On Error GoTo 0
250       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
260       errorDescription = "CZEUpgradeHelper.MakeAttributes(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
280       Err.Clear
290       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetExcelNameByRangeName(Wb As Workbook, rangeName As String) As name
10        On Error GoTo errorHandler

20        If Not Wb Is Nothing Then
30            Set GetExcelNameByRangeName = Wb.Names(rangeName)
40        End If

50        On Error GoTo 0
60        Exit Function
errorHandler:
70        Err.Clear
End Function

Public Function GetWorkSheetByRangeName(sheet As Worksheet, rangeName As String) As Worksheet
          Dim targetRange As Range
10        On Error GoTo errorHandler

20        Set targetRange = GetRangeByRangeName(sheet, rangeName)
30        If Not targetRange Is Nothing Then
40            Set GetWorkSheetByRangeName = targetRange.Worksheet
50        End If

60        On Error GoTo 0
70        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
80        errorDescription = "CZEUpgradeHelper.GetWorkSheetByRangeName(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
100       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetRangeByRangeName(sheet As Worksheet, rangeName As String) As Range
          ' query tables may have same name in different work sheet
10        On Error GoTo errorHandler

20        If sheet Is Nothing Then Exit Function
          Dim excelName As name
30        For Each excelName In sheet.parent.Names
40            If (CompareRangeNames(excelName.name, rangeName)) Then
50                If IsReferedToRange(excelName) Then
60                    Set GetRangeByRangeName = excelName.RefersToRange
70                    Exit Function
80                End If
90            End If
100       Next

          Dim sheetItem As Worksheet
          Dim tableObject As ListObject
110       For Each sheetItem In sheet.parent.Worksheets
120           For Each tableObject In sheet.ListObjects
130               If CompareRangeNames(tableObject.name, rangeName) Then
140                   Set GetRangeByRangeName = tableObject.Range
150                   Exit Function
160               End If
170           Next
180       Next

          Dim qt As QueryTable
190       For Each sheetItem In sheet.parent.Worksheets
200           For Each qt In sheetItem.QueryTables
210               If CompareRangeNames(qt.name, rangeName) Then
220                   If Not (GetQueryTableResultRange(qt) Is Nothing) Then
230                       Set GetRangeByRangeName = qt.ResultRange
240                       Exit Function
250                   End If
260               End If
270           Next
280       Next

290       On Error GoTo 0
300       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
310       errorDescription = "CZEUpgradeHelper.GetRangeByRangeName(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
330       Err.Clear
340       Err.Raise errorNumber, , errorDescription
End Function

Public Function IsReferedToRange(nm As name) As Boolean
    On Local Error Resume Next
    If nm.RefersToRange Is Nothing Then
    End If
    IsReferedToRange = (Err.Number = 0)
    On Local Error GoTo 0
End Function

Public Function CompareRangeNames(ByVal aName As String, ByVal rn As String) As Boolean
          Dim p As Integer
       
10        On Error GoTo errorHandler

20        rn = UCase(rn)
30        aName = UCase(aName)
40        If aName = rn Then
50            CompareRangeNames = True
60        Else
70            p = InStr(aName, "!")
80            If p <= 0 Then Exit Function
90            If Mid(aName, p + 1) = rn Then
100               CompareRangeNames = True
110           End If
120       End If

130       On Error GoTo 0
140       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
150       errorDescription = "CZEUpgradeHelper.CompareRangeNames(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
170       Err.Raise errorNumber, , errorDescription
End Function

Public Function Version1SavedDate(dateString As String) As Date
10        On Error GoTo errorHandler
20        If (Len(dateString) > 0) Then
              Dim dateParts() As String
30            dateParts = Split(dateString, "-") 'date format is MM-dd-yyyy
40            If (UBound(dateParts) = 2) Then
                  Dim year As Long, month As Long, day As Long
50                year = CInt(dateParts(2))
60                month = CInt(dateParts(0))
70                day = CInt(dateParts(1))
80                Version1SavedDate = DateSerial(year, month, day)
90                Exit Function
100           End If
110       End If
120       On Error GoTo 0
130       Exit Function
errorHandler:
140       Err.Clear
End Function

Public Function Packxml(profile As ProfileDataEntity) As String
          Dim result As String
10        On Error GoTo errorHandler
20        With profile
30            result = "<?xml version=""1.0"" encoding=""utf-8""?><Profile Version=""1""><Profile>"
40            result = result + .profileName
50            result = result + "</Profile><Owner>" + .OwnerUserName + "</Owner>"
60            result = result + "<HeaderRows>1</HeaderRows>"
70            result = result + "<Cols>" + CStr(.EntityObject.executeResult.ColumnsCount) + "</Cols>"
80            result = result + "<Rows>" + CStr(.EntityObject.executeResult.DataRowsCount + 2) + "</Rows>"
90            result = result + "</Profile>"
100       End With
110       Packxml = result

120       On Error GoTo 0
130       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
140       errorDescription = "CZEUpgradeHelper.Packxml(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
160       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetQueryTableResultRange(qt As QueryTable) As Range
10        On Error GoTo errorHandler
          
20        Set GetQueryTableResultRange = qt.ResultRange

30        On Error GoTo 0
40        Exit Function
errorHandler:
50        Set GetQueryTableResultRange = Nothing
End Function

Public Function DecryptVersion1Connection(ByVal DataIn As String) As String
          Dim i As Integer, intAscval As Integer
          Dim strReturn As String, strChar As String
          Dim strArray() As String
          Dim strCount As Integer
10        On Error GoTo errorHandler

20        strArray = Split(DataIn, ",")
30        strCount = UBound(strArray) - LBound(strArray)
40        For i = 0 To strCount
50            If strArray(i) <> "" Then
60                intAscval = CInt(strArray(i))
70                If i Mod 2 = 0 Then
80                    intAscval = intAscval - 1
90                Else
100                   intAscval = intAscval - 2
110               End If
120               strReturn = strReturn & intAscval & ","
130           End If
140       Next
150       DecryptVersion1Connection = strReturn

160       On Error GoTo 0
170       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
180       errorDescription = "CZEUpgradeHelper.DecryptVersion1Connection(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
200       Err.Raise errorNumber, , errorDescription
End Function

Public Function ReDecryptVersion1Connection(ByVal DataIn As String) As String
          Dim i As Integer, intAscval As Integer
          Dim strReturn As String, strChar As String
          Dim strArray() As String
          Dim strCount As Integer
10        On Error GoTo errorHandler

20        strArray = Split(DataIn, ",")
30        strCount = UBound(strArray) - LBound(strArray)
40        For i = 0 To strCount
50            If strArray(i) <> "" Then
60                intAscval = CInt(strArray(i))
70                intAscval = intAscval - 3
80                strReturn = strReturn & Chr(intAscval)
90            End If
100       Next
110       ReDecryptVersion1Connection = strReturn

120       On Error GoTo 0
130       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
140       errorDescription = "CZEUpgradeHelper.DecryptVersion1Connection(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
160       Err.Raise errorNumber, , errorDescription
End Function

Public Function FindParameter(parameters() As String, parameterName As String) As String
 Dim item As Variant
 Dim itemString As String
          
    For Each item In parameters
        itemString = CStr(item)
        If (StrComp(left(itemString, Len(parameterName)), parameterName, vbTextCompare) = 0) Then
            FindParameter = Mid(itemString, Len(parameterName) + 1)
            If StrComp(FindParameter, "null", vbTextCompare) = 0 Then FindParameter = vbNullString
            Exit For
        End If
    Next
End Function

Public Function URLDecode(data As String) As String
          Dim i As Long, ascValue As Long
          Dim charItem As String, result As String
10        On Error GoTo errorHandler

20        For i = 1 To Len(data)
30            charItem = Mid(data, i, 1)
40            If (charItem = "+") Then
50                result = result + Chr(32)
60            ElseIf (charItem = "%") Then
70                ascValue = CLng("&H" + Mid(data, i + 1, 2))
80                result = result + Chr(ascValue)
90                i = i + 2
100           Else
110               result = result + Mid(data, i, 1)
120           End If
130       Next
140       URLDecode = result
          
150       On Error GoTo 0
160       Exit Function
errorHandler:
170       Err.Clear
180       URLDecode = data
End Function

Public Function RegulateName(ByVal aName) As String
          Dim k As Integer
          Dim c As String
10        On Error GoTo errorHandler
20        RegulateName = vbNullString
30        For k = 1 To Len(aName)
40            c = Mid(aName, k, 1)
50            If (c >= "A" And c <= "Z") Or (c >= "a" And c <= "z") Or (c >= "0" And c <= "9") Or c = "." Then
              
60            Else
70                c = "_"
80            End If
90            RegulateName = RegulateName + c
100       Next
110       On Error GoTo 0
120       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
130       errorDescription = "CZEUpgradeHelper.RegulateName(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
150       Err.Raise errorNumber, , errorDescription
End Function

Public Sub BackupExcelFile(Wb As Workbook)
    If Wb Is Nothing Then Exit Sub
    Wb.SaveCopyAs Wb.FullNameURLEncoded + "  " + format(Now, "mmm-dd hh.mm.ss")
End Sub

Public Sub GenerageReport(profile As ProfileDataEntity, index As Integer, targetRange As Range)
10        On Error GoTo errorHandler

20        If Not profile Is Nothing Then
              Dim reportSheet As Worksheet
30            Set reportSheet = GetSavedSheet(targetRange.Worksheet.parent, BSConsts.ZESHEET_UPGRADEING_REPORT, "ZE Upgrading Report", "ze upgrading report")
40            If (reportSheet Is Nothing) Then
50                Exit Sub
60            Else
                  Dim savedRange As Range
                  Dim defaultDate As Date
70                Set savedRange = reportSheet.Cells(index, 1)
80                With profile
90                    savedRange(1, 1) = index
100                   savedRange(1, 1).NumberFormat = "General"
110                   savedRange(1, 2) = .EntityObject.ExcelRangeName
120                   savedRange(1, 3) = .OwnerUserName
130                   savedRange(1, 4) = .profileName
140                   savedRange(1, 5) = IIf(.EntityObject.startDate = defaultDate, "", format(.EntityObject.startDate, "yyyyMMdd"))
150                   savedRange(1, 6) = IIf(.EntityObject.endDate = defaultDate, "", format(.EntityObject.endDate, "yyyyMMdd"))
160                   savedRange(1, 7) = IIf(.forecastDate = defaultDate, "", format(.forecastDate, "yyyyMMdd"))
170                   savedRange(1, 8) = .EntityObject.DateOrder
180                   savedRange(1, 9) = .EntityObject.entityOptions.isPreserveFormat
190                   savedRange(1, 10) = IIf(.EntityObject.entityOptions.RefreshHours > 0, .EntityObject.entityOptions.RefreshHours, "")
200                   savedRange(1, 11) = IIf(.EntityObject.entityOptions.RefreshMinutes > 0, .EntityObject.entityOptions.RefreshMinutes, "")
210                   savedRange(1, 12) = .EntityObject.entityOptions.isRefreshOnOpen
220                   savedRange(1, 13) = targetRange.Worksheet.name
230                   savedRange(1, 14) = IIf((Len(.OwnerUserName) > 0 And Len(.profileName) > 0), "OK", "Failed")
240               End With
250           End If
260       End If

270       On Error GoTo 0
280       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
290       errorDescription = "CZEUpgradeHelper.GenerageReport(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
310       Err.Raise errorNumber, , errorDescription
End Sub

Public Function CreateReportSheet(wk As Workbook) As Worksheet
10        On Error GoTo errorHandler
          Dim reportSheet As Worksheet
          Dim currentSheetName As String
20        currentSheetName = IIf(wk.ActiveSheet Is Nothing, vbNullString, wk.ActiveSheet.name)
30        Set reportSheet = wk.Worksheets.Add
40        reportSheet.name = "ZE Upgrading Report"

    If Not wk.MultiUserEditing Then
50        reportSheet.Tab.ColorIndex = 18
    End If
    
60        CSheet.ZESheetType(reportSheet) = BSConsts.ZESHEET_UPGRADEING_REPORT
70        Call AddReportSheetHeader(reportSheet)
80        If Len(currentSheetName) > 0 Then
              Dim sheetItem As Worksheet
90            For Each sheetItem In wk.Worksheets
100               If (sheetItem.name = currentSheetName) Then
110                   sheetItem.Activate
120                   Exit For
130               End If
140           Next
150       End If
160       Set CreateReportSheet = reportSheet
170       On Error GoTo 0
180       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
190       errorDescription = "CZEUpgradeHelper.CreateReportSheet(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
210       Err.Raise errorNumber, , errorDescription
End Function

Public Sub AddReportSheetHeader(reportSheet As Worksheet)
10        On Error GoTo errorHandler

20        If reportSheet Is Nothing Then Exit Sub
30        With reportSheet
40            .Cells(1, 1) = "Index"
50            .Cells(1, 2) = "Range Name"
60            .Cells(1, 3) = "Profile Owner"
70            .Cells(1, 4) = "Profile Name"
80            .Cells(1, 5) = "Start Date"
90            .Cells(1, 6) = "End Date"
100           .Cells(1, 7) = "Forecast Date"
110           .Cells(1, 8) = "Date Order"
120           .Cells(1, 9) = "Is Preserver Format"
130           .Cells(1, 10) = "Refresh Hour"
140           .Cells(1, 11) = "Refresh Minute"
150           .Cells(1, 12) = "Refresh On Workbook Open"
160           .Cells(1, 13) = "Sheet Name"
170           .Cells(1, 14) = "Upgrading Status"
180       End With

190       On Error GoTo 0
200       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
210       errorDescription = "CZEUpgradeHelper.AddReportSheetHeader(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
230       Err.Raise errorNumber, , errorDescription
End Sub

Public Sub SetDefaultOptionValue(entityOptions As EntityOption)
10        On Error GoTo errorHandler

20        With entityOptions
30            .InputDateOrder = "ASC"
40            .DateInputOption = "Default"
50            .HeaderOption = "SingleRow"
60            .IsTrimEmptyHeaderRows = False
70            .HasProfileEntityTitle = True
            .HasProfileSeriesCaption = True
            .HasProfileNumeratorDenominator = True
80            .HasProfileSeriesName = True
90            .HasProfileDataSource = True
100           .HasProfileDataReport = True
110           .HasProfileObservation = True
120           .HasProfileAttributes = True
130           .HasReportEntityTitle = True
140           .HasReportSeriesName = True
150           .HasReportDataSource = True
160           .HasReportDataReport = True
170           .HasReportObservation = True
180           .HasReportAttributes = True
190           .isRefreshOnOpen = False
200           .IsRefreshPeriodically = False
210           .ResultType = "QueryTable"
220           .chartOption = "NoChart"
230           .VerticalDelete = "None"
240           .VerticalInsert = "None"
250           .HorizontalDelete = "None"
260           .HorizontalInsert = "None"
270           .IsAdjustWidth = True
280       End With

290       On Error GoTo 0
300       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
310       errorDescription = "CZEUpgradeHelper.SetDefaultOptionValue(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
330       Err.Clear
340       Err.Raise errorNumber, , errorDescription
End Sub

Public Sub SaveWorkBookEntities(Wb As Workbook, entities As Collection)
10        On Error GoTo errorHandler

20        If (Wb Is Nothing) Then Exit Sub
30        If (entities Is Nothing) Then Exit Sub
          Dim sheet As Worksheet
          Dim sheetEntities As Collection
40        For Each sheet In Wb.Worksheets
50            If (Len(CSheet.ZESheetID(sheet)) > 0) Then
60                Set sheetEntities = GetEntitiesBySheetId(CSheet.ZESheetID(sheet), entities)
70                If (sheetEntities.Count > 0) Then
80                    Call saveSheetXml(sheet, sheetEntities)
90                End If
100           End If
110       Next

120       On Error GoTo 0
130       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
140       errorDescription = "CZEUpgradeHelper.SaveWorkBookEntities(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
160       Err.Raise errorNumber, , errorDescription
End Sub

Private Function GetEntitiesBySheetId(sheetId As String, entities As Collection) As Collection
          Dim result As Collection
          Dim i As Long
10        On Error GoTo errorHandler

20        Set result = New Collection
30        For i = 1 To entities.Count
40            If (StrComp(sheetId, entities(i).EntityObject.sheetId, vbTextCompare) = 0) Then
50                Call result.Add(entities(i))
60            End If
70        Next
80        Set GetEntitiesBySheetId = result

90        On Error GoTo 0
100       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
110       errorDescription = "CZEUpgradeHelper.GetEntitiesBySheetId(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
130       Err.Raise errorNumber, , errorDescription
End Function

Private Sub saveSheetXml(sheet As Worksheet, entities As Collection)
          Dim xml As String
          Dim entity As Object
          Dim profile As ProfileDataEntity
          Dim Report As ReportDataEntity
10        On Error GoTo errorHandler

20        xml = "<DataDirectEntities xmlns:i=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""http://schemas.datacontract.org/2004/07/ZEWSProxy.Entities"">"
30        For Each entity In entities
40            If (StrComp(TypeName(entity), "ProfileDataEntity", vbTextCompare) = 0) Then
50                xml = xml + DataSerializer.SerializeProfile(entity)
60            ElseIf (StrComp(TypeName(entity), "ReportDataEntity", vbTextCompare) = 0) Then
70                xml = xml + DataSerializer.SerializeReport(entity)
80            End If
90        Next
100       xml = xml + "</DataDirectEntities>"
110       CSheet.ZESheetSavedEntities(sheet) = xml

120       On Error GoTo 0
130       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
140       errorDescription = "CZEUpgradeHelper.saveSheetXml(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
160       Err.Raise errorNumber, , errorDescription
End Sub

Public Function IsCurveSheet(sheet As Worksheet) As Boolean
10        On Error GoTo errorHandler

20        Select Case CSheet.ZESheetType(sheet)
              Case BSConsts.ZESHEET_CURVE_DATERANGE, BSConsts.ZESHEET_CURVE_SINGLEDATE:
30                IsCurveSheet = True
40        End Select

50        On Error GoTo 0
60        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
70        errorDescription = "CZEUpgradeHelper.IsCurveSheet(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
90        Err.Raise errorNumber, , errorDescription
End Function

Public Function IsArrayEmpty(arrayObject As Variant) As Boolean
          Dim result As Boolean
10        On Error GoTo errorHandler

20        result = True
30        If (IsArray(arrayObject)) Then
40            If (Not IsEmpty(arrayObject)) Then
50                If (TypeName(arrayObject) = "String()") Then
60                    If (Len(Join(arrayObject, "")) > 0) Then
70                        result = False
80                    End If
90                Else
100                   On Error GoTo eh
110                   If (UBound(arrayObject) >= LBound(arrayObject)) Then
120                       result = False
130                   End If
140                   On Error GoTo 0
150               End If
160           End If
170       End If
180       IsArrayEmpty = result
190       Exit Function
eh:
200       On Error GoTo 0
210       IsArrayEmpty = True
220       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
230       errorDescription = "ddxobjects.utilityobject.IsArrayEmpty(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
250       Err.Clear
260       Err.Raise errorNumber, , errorDescription
End Function

Public Function GetHorizontalInsert(value As Integer) As String
10        On Error GoTo errorHandler

20        If (value = 1) Then
30            GetHorizontalInsert = "ShiftCellsRight"
40        ElseIf (value = 2) Then
50            GetHorizontalInsert = "EntireColumn"
60        Else
70            GetHorizontalInsert = "None"
80        End If

90        On Error GoTo 0
100       Exit Function
errorHandler:
110       Err.Clear
End Function

Public Function GetHorizontalDelete(value As Integer) As String
10        On Error GoTo errorHandler

20        If (value = 1) Then
30            GetHorizontalDelete = "ShiftCellsLeft"
40        ElseIf (value = 2) Then
50            GetHorizontalDelete = "EntireColumn"
60        Else
70            GetHorizontalDelete = "None"
80        End If

90        On Error GoTo 0
100       Exit Function
errorHandler:
110       Err.Clear
End Function

Public Function GetVerticalInsert(value As Integer) As String
10        On Error GoTo errorHandler

20        If (value = 1) Then
30            GetVerticalInsert = "ShiftCellsDown"
40        ElseIf (value = 2) Then
50            GetVerticalInsert = "EntireRow"
60        Else
70            GetVerticalInsert = "None"
80        End If

90        On Error GoTo 0
100       Exit Function
errorHandler:
110       Err.Clear
End Function

Public Function GetVerticalDelete(value As Integer) As String
10        On Error GoTo errorHandler

20        If (value = 1) Then
30            GetVerticalDelete = "ShiftCellsUp"
40        ElseIf (value = 2) Then
50            GetVerticalDelete = "EntireRow"
60        Else
70            GetVerticalDelete = "None"
80        End If

90        On Error GoTo 0
100       Exit Function
errorHandler:
110       Err.Clear
End Function

Public Sub FixOneByOneSizeRange(Wb As Workbook, allEntity As Collection)
          Dim entity As Object, excelName As name, targetRange As Range, newTargetRange As Range
10        On Error GoTo errorHandler

20        For Each entity In allEntity
30            If (entity.EntityObject.executeResult.ColumnsCount > 1 Or entity.EntityObject.executeResult.TotalRowsCount > 1) Then
40                Set excelName = GetExcelNameByRangeName(Wb, entity.EntityObject.ExcelRangeName)
50                If Not excelName Is Nothing Then
60                    Set targetRange = excelName.RefersToRange
70                    If Not targetRange Is Nothing Then
80                        If targetRange.rows.Count = 1 And targetRange.Columns.Count = 1 Then
90                            Set newTargetRange = targetRange.Worksheet.Cells(targetRange.row, targetRange.Column).Resize(entity.EntityObject.executeResult.TotalRowsCount, entity.EntityObject.executeResult.ColumnsCount)
100                           Call excelName.Delete
110                           Call Wb.Names.Add(entity.EntityObject.ExcelRangeName, newTargetRange)
120                       End If
130                   End If
140               End If
150           End If
160       Next

170       On Error GoTo 0
180       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
190       errorDescription = "CZEUpgradeHelper.FixOneByOneSizeRange(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
200       errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
210       Err.Raise errorNumber, , errorDescription
End Sub

Public Sub ConvertAllQuerytTablesToNamedRange(Wb As Workbook, allEntity As Collection)
10        On Error GoTo errorHandler

20        If Wb Is Nothing Then Exit Sub
          Dim sheet As Worksheet, qt As QueryTable, entity As Object
30        For Each sheet In Wb.Worksheets
40            For Each qt In sheet.QueryTables
50                Set entity = getEntityByRangeName(allEntity, qt.name)
60                If Not entity Is Nothing Then
70                    Call ConvertQueryTableToNamedRange(qt)
80                End If
90            Next
100       Next

110       On Error GoTo 0
120       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
130       errorDescription = "CZEUpgradeHelper.ConvertAllQuerytTablesToNamedRange(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
150       Err.Raise errorNumber, , errorDescription
End Sub

Public Function ConvertQueryTableToNamedRange(qt As QueryTable) As Boolean
          Dim rgn As Range, qtName As String
       
10        On Error GoTo errorHandler

20        Set rgn = GetQueryTableResultRange(qt)
30        qtName = qt.name
40        qt.Delete
50        If Not rgn Is Nothing Then
60            Call rgn.Worksheet.parent.Names.Add(qtName, rgn)
70        End If
80        ConvertQueryTableToNamedRange = True

90        On Error GoTo 0
100       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
110       errorDescription = "CZEUpgradeHelper.ConvertQueryTableToNamedRange(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
130       Err.Raise errorNumber, , errorDescription
End Function

Private Function getEntityByRangeName(allEntity As Collection, rangeName As String) As Object
          Dim item As Object
10        On Error GoTo errorHandler

20        For Each item In allEntity
30            If CompareRangeNames(rangeName, item.EntityObject.ExcelRangeName) Then
40                Set getEntityByRangeName = item
50                Exit Function
60            End If
70        Next

80        On Error GoTo 0
90        Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
100       errorDescription = "CZEUpgradeHelper.getEntityByRangeName(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
120       Err.Raise errorNumber, , errorDescription
End Function

Public Sub UnprotectSavedSheet(sheet As Worksheet)
10        On Error GoTo errorHandler

20        If sheet.ProtectContents Then
30            On Error GoTo unprotectReport
40            sheet.Unprotect BSConsts.QRY_PWD
50            On Error GoTo 0
60            Exit Sub
70        End If

unprotectReport:
80        If sheet.ProtectContents Then
90            sheet.Unprotect BSConsts.RPT_PWD
100           On Error GoTo 0
110           Exit Sub
120       End If

130       On Error GoTo 0
140       Exit Sub
errorHandler:
150       Err.Clear
End Sub

Attribute VB_Name = "DataDirectEntity"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_EntityOption As EntityOption
Private m_ExecuteResult As EntityExecuteResult
Private m_SavedRowIndexId As Long
Private m_DateFormat As String
Private m_DailyDateFormat As String
Private m_IsFromFormula As Boolean
Private m_LeftTopCellAddress As String
Private m_SheetId As String
Private m_Root As String
Private m_ExcelRangeName As String
Private m_StartDate As Date
Private m_EndDate As Date
Private m_DateOrder As String
Private m_Caption As String
Private m_IsVertical As Boolean
Private m_IsRetrieveVerticalSettingFromServer As Boolean
Private m_LastRunningTime As Date
Private m_Interval As String

Public Property Get entityOptions() As EntityOption
    Set entityOptions = m_EntityOption
End Property

Public Property Let entityOptions(value As EntityOption)
    Set m_EntityOption = value
End Property

Public Property Get executeResult() As EntityExecuteResult
    Set executeResult = m_ExecuteResult
End Property

Public Property Let executeResult(value As EntityExecuteResult)
    Set m_ExecuteResult = value
End Property

Public Property Get SavedRowIndexId() As Long
    SavedRowIndexId = m_SavedRowIndexId
End Property

Public Property Let SavedRowIndexId(value As Long)
    m_SavedRowIndexId = value
End Property

Public Property Get DateFormat() As String
    DateFormat = m_DateFormat
End Property

Public Property Let DateFormat(value As String)
    m_DateFormat = value
End Property

Public Property Get DailyDateFormat() As String
    DailyDateFormat = m_DailyDateFormat
End Property

Public Property Let DailyDateFormat(value As String)
    m_DailyDateFormat = value
End Property

Public Property Get IsFromFormula() As Boolean
    IsFromFormula = m_IsFromFormula
End Property

Public Property Let IsFromFormula(value As Boolean)
    m_IsFromFormula = value
End Property

Public Property Get LeftTopCellAddress() As String
    LeftTopCellAddress = m_LeftTopCellAddress
End Property

Public Property Let LeftTopCellAddress(value As String)
    m_LeftTopCellAddress = value
End Property

Public Property Get sheetId() As String
    sheetId = m_SheetId
End Property

Public Property Let sheetId(value As String)
    m_SheetId = value
End Property

Public Property Get Root() As String
    Root = m_Root
End Property

Public Property Let Root(value As String)
    m_Root = value
End Property

Public Property Get ExcelRangeName() As String
    ExcelRangeName = m_ExcelRangeName
End Property

Public Property Let ExcelRangeName(value As String)
    m_ExcelRangeName = value
End Property

Public Property Get startDate() As Date
    startDate = m_StartDate
End Property

Public Property Let startDate(value As Date)
    m_StartDate = value
End Property

Public Property Get endDate() As Date
    endDate = m_EndDate
End Property

Public Property Let endDate(value As Date)
    m_EndDate = value
End Property

Public Property Get DateOrder() As String
    DateOrder = m_DateOrder
End Property

Public Property Let DateOrder(value As String)
    m_DateOrder = value
End Property

Public Property Get Caption() As String
    Caption = m_Caption
End Property

Public Property Let Caption(value As String)
    m_Caption = value
End Property

Public Property Get IsVertical() As Boolean
    IsVertical = m_IsVertical
End Property

Public Property Let IsVertical(value As Boolean)
    m_IsVertical = value
End Property

Public Property Get IsRetrieveVerticalSettingFromServer() As Boolean
    IsRetrieveVerticalSettingFromServer = m_IsRetrieveVerticalSettingFromServer
End Property

Public Property Let IsRetrieveVerticalSettingFromServer(value As Boolean)
    m_IsRetrieveVerticalSettingFromServer = value
End Property

Public Property Get LastRunningTime() As Date
    LastRunningTime = m_LastRunningTime
End Property

Public Property Let LastRunningTime(value As Date)
    m_LastRunningTime = value
End Property

Public Property Get Interval() As String
    Interval = m_Interval
End Property

Public Property Let Interval(value As String)
    m_Interval = value
End Property

Private Sub Class_Initialize()
    Me.IsVertical = True
    Me.IsRetrieveVerticalSettingFromServer = True
    Me.entityOptions = New EntityOption
    Me.executeResult = New EntityExecuteResult
End Sub
Attribute VB_Name = "DataSerializer"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function SerializeProfile(entity As ProfileDataEntity) As String
10        On Error GoTo errorHandler

20        If entity Is Nothing Then Exit Function
          Dim doc As MSXML2.DOMDocument60
          Dim parent As IXMLDOMNode
30        Set doc = New MSXML2.DOMDocument60
40        Set parent = AppendElement(doc, doc, "anyType", "")
50        Call AppendAttribute(doc, parent, "i:type", "ProfileDataEntity")
60        With entity
70            Call AddDataDirectEntity(doc, parent, .EntityObject)
80            Call AppendElement(doc, parent, "CustomAttributes", .CustomAttributes)
90            Call AppendElement(doc, parent, "ForecastDate", .forecastDate)
100           Call AppendElement(doc, parent, "GroupName", .GroupName)
110           Call AppendElement(doc, parent, "IsAnalytics", .IsAnalytics)
120           Call AppendElement(doc, parent, "IsForecastDateSelected", .IsForecastDateSelected)
130           Call AppendElement(doc, parent, "OwnerUserName", .OwnerUserName)
140           Call AppendElement(doc, parent, "ProfileName", .profileName)
150           Call AppendElement(doc, parent, "ProfileType", .ProfileType)
160           Call AppendElement(doc, parent, "TemplateName", .TemplateName)
170       End With
180       SerializeProfile = doc.xml

190       On Error GoTo 0
200       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
210       errorDescription = "DataSerializer.SerializeProfile(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
230       Err.Raise errorNumber, , errorDescription
End Function

Public Function SerializeReport(entity As ReportDataEntity) As String
10        On Error GoTo errorHandler

20        If entity Is Nothing Then Exit Function
          Dim doc As MSXML2.DOMDocument60
          Dim parent As IXMLDOMNode, observationLabelNode As IXMLDOMNode, observationValuesNode As IXMLDOMNode, reportAttribute As IXMLDOMNode
30        Set doc = New MSXML2.DOMDocument60
40        Set parent = AppendElement(doc, doc, "anyType", "")
50        Call AppendAttribute(doc, parent, "i:type", "ReportDataEntity")
60        With entity
70            Call AddDataDirectEntity(doc, parent, .EntityObject)
80            Call AppendElement(doc, parent, "Aggregation", .Aggregation)
90            Call AppendElement(doc, parent, "AttributeSelectedIndex", .AttributeSelectedIndex)
100           Call AppendElement(doc, parent, "DataReportLabel", .DataReportLabel)
110           Call AppendElement(doc, parent, "DataReportValue", .DataReportValue)
120           Call AppendElement(doc, parent, "DataSourceLabel", .DataSourceLabel)
130           Call AppendElement(doc, parent, "DataSourceValue", .DataSourceValue)
140           Call AppendElement(doc, parent, "IsSimple", .IsSimple)
150           Set observationLabelNode = AppendElement(doc, parent, "ObservationLabels", "")
160           Call AppendAttribute(doc, observationLabelNode, "xmlns:d3p1", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")
170           Call AddStringArray(doc, observationLabelNode, .ObservationLabels)
              
180           Set observationValuesNode = AppendElement(doc, parent, "ObservationValues", "")
190           Call AppendAttribute(doc, observationValuesNode, "xmlns:d3p1", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")
200           Call AddStringArray(doc, observationValuesNode, .ObservationValues)
              
210           Set reportAttribute = AppendElement(doc, parent, "ReportAttributes", "")
220           Call AppendAttribute(doc, reportAttribute, "xmlns:d3p1", "http://schemas.microsoft.com/2003/10/Serialization/Arrays")
230           If (CZEUpgradeHelper.IsArrayEmpty(.reportAttributes) = False) Then
                  Dim i As Long, reportAttributes() As AttributeValuesHolder
240               reportAttributes = .reportAttributes
250               For i = LBound(reportAttributes) To UBound(reportAttributes)
260                   Call AddReportAttribute(doc, reportAttribute, reportAttributes(i))
270               Next
280           End If
290       End With
          
300       SerializeReport = doc.xml

310       On Error GoTo 0
320       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
330       errorDescription = "DataSerializer.SerializeReport(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
350       Err.Raise errorNumber, , errorDescription
End Function

Private Sub AddReportAttribute(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, entity As AttributeValuesHolder)
          Dim reportAttribute As IXMLDOMNode, valuesNode As IXMLDOMNode, selectedNode As IXMLDOMNode
10        On Error GoTo errorHandler

20        Set reportAttribute = AppendElement(doc, parent, "d3p1:anyType", "")
30        Call AppendAttribute(doc, reportAttribute, "xmlns:d4p1", "http://schemas.datacontract.org/2004/07/ZEWSProxy")
40        Call AppendAttribute(doc, reportAttribute, "i:type", "d4p1:AttributeValuesHolder")
50        Call AppendElement(doc, reportAttribute, "d4p1:Column", entity.Column)
          
60        Set selectedNode = AppendElement(doc, reportAttribute, "d4p1:Selected", "")
70        Call AddStringArray(doc, selectedNode, entity.Selected)
          
80        Set valuesNode = AppendElement(doc, reportAttribute, "d4p1:Values", "")
90        Call AddStringArray(doc, valuesNode, entity.Values)

100       On Error GoTo 0
110       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
120       errorDescription = "DataSerializer.AddReportAttribute(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
140       Err.Raise errorNumber, , errorDescription
End Sub

Private Sub AddDataDirectEntity(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, entity As DataDirectEntity)
10        On Error GoTo errorHandler

20        With entity
30            Call AppendElement(doc, parent, "Caption", .Caption)
40            Call AppendElement(doc, parent, "DailyDateFormat", .DailyDateFormat)
50            Call AppendElement(doc, parent, "DateFormat", .DateFormat)
60            Call AppendElement(doc, parent, "DateOrder", .DateOrder)
70            Call AppendElement(doc, parent, "EndDate", .endDate)
              
              Dim entityOptions As IXMLDOMNode
              Dim executeResult As IXMLDOMNode
80            Set entityOptions = AppendElement(doc, parent, "EntityOption", "")
90            Call AppendAttribute(doc, entityOptions, "i:type", "EntityOption")
100           Call AddEntityOptions(doc, entityOptions, .entityOptions)
110           Call AppendElement(doc, parent, "ExcelRangeName", .ExcelRangeName)
120           Set executeResult = AppendElement(doc, parent, "ExecuteResult", "")
130           Call AppendAttribute(doc, executeResult, "i:type", "EntityExecuteResult")
140           Call AddExecuteResult(doc, executeResult, .executeResult)
              
150           Call AppendElement(doc, parent, "Interval", .Interval)
160           Call AppendElement(doc, parent, "IsFromFormula", .IsFromFormula)
170           Call AppendElement(doc, parent, "IsRetrieveVerticalSettingFromServer", .IsRetrieveVerticalSettingFromServer)
180           Call AppendElement(doc, parent, "IsVertical", .IsVertical)
190           Call AppendElement(doc, parent, "LastRunningTime", .LastRunningTime)
200           Call AppendElement(doc, parent, "LeftTopCellAddress", .LeftTopCellAddress)
210           Call AppendElement(doc, parent, "Root", .Root)
220           Call AppendElement(doc, parent, "SavedRowIndexId", .SavedRowIndexId)
230           Call AppendElement(doc, parent, "sheetId", .sheetId)
240           Call AppendElement(doc, parent, "StartDate", .startDate)
250       End With

260       On Error GoTo 0
270       Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
280       errorDescription = "DataSerializer.AddDataDirectEntity(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
300       Err.Raise errorNumber, , errorDescription
End Sub

Private Sub AddStringArray(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, Values() As String)
10        On Error GoTo errorHandler

20        If (CZEUpgradeHelper.IsArrayEmpty(Values) = False) Then
              Dim i As Long
30            For i = LBound(Values) To UBound(Values)
40                Call AppendElement(doc, parent, "d3p1:string", Values(i))
50            Next
60        End If

70        On Error GoTo 0
80        Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
90        errorDescription = "DataSerializer.AddStringArray(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
110       Err.Raise errorNumber, , errorDescription
End Sub

Private Function AddEntityOptions(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, entityOptions As EntityOption) As IXMLDOMNode
10        On Error GoTo errorHandler
20        With entityOptions
30            Call AppendElement(doc, parent, "CaptionColor", .CaptionColor)
40            Call AppendElement(doc, parent, "ChartOption", .chartOption)
50            Call AppendElement(doc, parent, "DateInputOption", .DateInputOption)
60            Call AppendElement(doc, parent, "EvenColor", .EvenColor)
70            Call AppendElement(doc, parent, "HasProfileAttributes", .HasProfileAttributes)
80            Call AppendElement(doc, parent, "HasProfileDataReport", .HasProfileDataReport)
90            Call AppendElement(doc, parent, "HasProfileDataSource", .HasProfileDataSource)
100           Call AppendElement(doc, parent, "HasProfileEntityTitle", .HasProfileEntityTitle)
            Call AppendElement(doc, parent, "HasProfileNumeratorDenominator", .HasProfileNumeratorDenominator)
110           Call AppendElement(doc, parent, "HasProfileObservation", .HasProfileObservation)
            Call AppendElement(doc, parent, "HasProfileSeriesCaption", .HasProfileSeriesCaption)
120           Call AppendElement(doc, parent, "HasProfileSeriesName", .HasProfileSeriesName)
130           Call AppendElement(doc, parent, "HasReportAttributes", .HasReportAttributes)
140           Call AppendElement(doc, parent, "HasReportDataReport", .HasReportDataReport)
150           Call AppendElement(doc, parent, "HasReportDataSource", .HasReportDataSource)
160           Call AppendElement(doc, parent, "HasReportEntityTitle", .HasReportEntityTitle)
170           Call AppendElement(doc, parent, "HasReportObservation", .HasReportObservation)
180           Call AppendElement(doc, parent, "HasReportSeriesName", .HasReportSeriesName)
190           Call AppendElement(doc, parent, "HeaderColor", .HeaderColor)
200           Call AppendElement(doc, parent, "HeaderOption", .HeaderOption)
            If .HeaderShownItems > 0 Then Call AppendElement(doc, parent, "HeaderShownItems", .HeaderShownItems)
210           Call AppendElement(doc, parent, "HorizontalDelete", .HorizontalDelete)
220           Call AppendElement(doc, parent, "HorizontalInsert", .HorizontalInsert)
230           Call AppendElement(doc, parent, "InputDateOrder", .InputDateOrder)
240           Call AppendElement(doc, parent, "InputEndDate", .InputEndDate)
250           Call AppendElement(doc, parent, "InputStartDate", .InputStartDate)
260           Call AppendElement(doc, parent, "IsAdjustWidth", .IsAdjustWidth)
270           Call AppendElement(doc, parent, "IsFillByRow", .IsFillByRow)
280           Call AppendElement(doc, parent, "IsFillCaption", .IsFillCaption)
290           Call AppendElement(doc, parent, "IsFillDataRow", .IsFillDataRow)
300           Call AppendElement(doc, parent, "IsFillFormulas", .IsFillFormulas)
310           Call AppendElement(doc, parent, "IsFillHeader", .IsFillHeader)
320           Call AppendElement(doc, parent, "IsOneTimeRequest", .IsOneTimeRequest)
330           Call AppendElement(doc, parent, "IsPreserveFormat", .isPreserveFormat)
340           Call AppendElement(doc, parent, "IsRefreshOnOpen", .isRefreshOnOpen)
350           Call AppendElement(doc, parent, "IsRefreshPeriodically", .IsRefreshPeriodically)
360           Call AppendElement(doc, parent, "IsTrimEmptyHeaderRows", .IsTrimEmptyHeaderRows)
370           Call AppendElement(doc, parent, "OddColor", .OddColor)
              If .OptionData > 0 Then Call AppendElement(doc, parent, "OptionData", .OptionData)
380           Call AppendElement(doc, parent, "RefreshHours", .RefreshHours)
390           Call AppendElement(doc, parent, "RefreshMinutes", .RefreshMinutes)
400           Call AppendElement(doc, parent, "ResultType", .ResultType)
410           Call AppendElement(doc, parent, "SelectedQuickDate", .selectedQuickDate)
420           Call AppendElement(doc, parent, "VerticalDelete", .VerticalDelete)
430           Call AppendElement(doc, parent, "VerticalInsert", .VerticalInsert)
440       End With

450       On Error GoTo 0
460       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
470       errorDescription = "DataSerializer.AddEntityOptions(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
490       Err.Raise errorNumber, , errorDescription
End Function
Private Function AddExecuteResult(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, executeResult As EntityExecuteResult) As IXMLDOMNode
10        On Error GoTo errorHandler
20        With executeResult
30            Call AppendElement(doc, parent, "CaptionRowsCount", .CaptionRowsCount)
40            Call AppendElement(doc, parent, "ColumnsCount", .ColumnsCount)
50            Call AppendElement(doc, parent, "DataRowsCount", .DataRowsCount)
60            Call AppendElement(doc, parent, "ErrorMessage", .ErrorMessage)
70            Call AppendElement(doc, parent, "HeaderRowsCount", .HeaderRowsCount)
80            Call AppendElement(doc, parent, "IsCancelled", .IsCancelled)
90            Call AppendElement(doc, parent, "PreviousHeaderRowsCount", .PreviousHeaderRowsCount)
100       End With

110       On Error GoTo 0
120       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
130       errorDescription = "DataSerializer.AddExecuteResult(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
150       Err.Raise errorNumber, , errorDescription
End Function

Private Function AppendElement(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, nodeName As String, value As Variant) As IXMLDOMNode
10        On Error GoTo errorHandler
20        If doc Is Nothing Then Exit Function
          Dim valueType As String
          Dim valueString As String
30        valueType = TypeName(value)
40        If (StrComp(valueType, "String", vbTextCompare) = 0) Then
50            valueString = CStr(value)
60        ElseIf (StrComp(valueType, "Integer", vbTextCompare) = 0) Then
70            valueString = CStr(value)
80        ElseIf (StrComp(valueType, "Long", vbTextCompare) = 0) Then
90            valueString = CStr(value)
100       ElseIf (StrComp(valueType, "Boolean", vbTextCompare) = 0) Then
110           If (CBool(value)) Then
120               valueString = "true"
130           Else
140               valueString = "false"
150           End If
160       ElseIf (StrComp(valueType, "Date", vbTextCompare) = 0) Then
170           valueString = format(CDate(value), "yyyy-MM-ddThh:mm:ss")
180       Else
              
190       End If
          Dim result As MSXML2.IXMLDOMElement
200       Set result = doc.createElement(nodeName)
210       result.text = valueString
220       Call parent.appendChild(result)
230       Set AppendElement = result
240       On Error GoTo 0
250       Exit Function
errorHandler:
          Dim errorDescription As String, errorNumber As Long
260       errorDescription = "DataSerializer.AppendElement(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
280       Err.Raise errorNumber, , errorDescription
End Function

Private Sub AppendAttribute(doc As MSXML2.DOMDocument60, parent As IXMLDOMNode, name As String, value As String)
          Dim attr As MSXML2.IXMLDOMAttribute
10        On Error GoTo errorHandler

20        Set attr = doc.createAttribute(name)
30        attr.value = value
40        Call parent.Attributes.setNamedItem(attr)

50        On Error GoTo 0
60        Exit Sub
errorHandler:
          Dim errorDescription As String, errorNumber As Long
70        errorDescription = "DataSerializer.AppendAttribute(), Line:" & str(Erl()) + " " + vbCrLf + Err.Description
        errorNumber = Err.Number
        DebugPrint errorDescription
          'your clean up codes here
90        Err.Raise errorNumber, , errorDescription
End Sub

Public Function DecodeBase64String(base64String As String) As String
10        On Error GoTo errorHandler
20        DecodeBase64String = Base64Decode(base64String)

30        On Error GoTo 0
40        Exit Function
errorHandler:
50        DecodeBase64String = base64String
End Function

' Decodes a base-64 encoded string (BSTR type).
' 1999 - 2004 Antonin Foller, http://www.motobit.com
' 1.01 - solves problem with Access And 'Compare Database' (InStr)
Private Function Base64Decode(ByVal base64String)
  'rfc1521
  '1999 Antonin Foller, Motobit Software, http://Motobit.cz
  Const base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  Dim dataLength, sOut, groupBegin
  
  'remove white spaces, If any
  base64String = Replace(base64String, vbCrLf, "")
  base64String = Replace(base64String, vbTab, "")
  base64String = Replace(base64String, " ", "")
  
  'The source must consists from groups with Len of 4 chars
  dataLength = Len(base64String)
  If dataLength Mod 4 <> 0 Then
    Err.Raise 1, "Base64Decode", "Bad Base64 string."
    Exit Function
  End If

  
  ' Now decode each group:
  For groupBegin = 1 To dataLength Step 4
    Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
    ' Each data group encodes up To 3 actual bytes.
    numDataBytes = 3
    nGroup = 0

    For CharCounter = 0 To 3
      ' Convert each character into 6 bits of data, And add it To
      ' an integer For temporary storage.  If a character is a '=', there
      ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
      ' the whole string.)

      thisChar = Mid(base64String, groupBegin + CharCounter, 1)

      If thisChar = "=" Then
        numDataBytes = numDataBytes - 1
        thisData = 0
      Else
        thisData = InStr(1, base64, thisChar, vbBinaryCompare) - 1
      End If
      If thisData = -1 Then
        Err.Raise 2, "Base64Decode", "Bad character In Base64 string."
        Exit Function
      End If

      nGroup = 64 * nGroup + thisData
    Next
    
    'Hex splits the long To 6 groups with 4 bits
    nGroup = Hex(nGroup)
    
    'Add leading zeros
    nGroup = String(6 - Len(nGroup), "0") & nGroup
    
    'Convert the 3 byte hex integer (6 chars) To 3 characters
    pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
      Chr(CByte("&H" & Mid(nGroup, 5, 2)))
    
    'add numDataBytes characters To out string
    sOut = sOut & left(pOut, numDataBytes)
  Next

  Base64Decode = sOut
End Function

Public Function SelectSingleNodeText(xml As MSXML2.DOMDocument60, xpath As String) As String
          Dim node As MSXML2.IXMLDOMNode
10        On Error GoTo errorHandler

20        Set node = xml.SelectSingleNode(xpath)
30        If Not node Is Nothing Then
40            SelectSingleNodeText = node.text
50        End If

60        On Error GoTo 0
70        Exit Function
errorHandler:
80        Err.Clear
End Function

Public Function SelectMultipleNodesText(xml As MSXML2.DOMDocument60, xpath As String) As String()
          Dim nodes As MSXML2.IXMLDOMNodeList
10        On Error GoTo errorHandler

20        Set nodes = xml.SelectNodes(xpath)
30        If Not nodes Is Nothing Then
              Dim result() As String
              Dim i As Long
40            ReDim result(nodes.length - 1)
50            For i = 0 To nodes.length - 1
60                result(i) = nodes(i).text
70            Next
80            SelectMultipleNodesText = result
90        End If

100       On Error GoTo 0
110       Exit Function
errorHandler:
120       Err.Clear
End Function

Attribute VB_Name = "EntityExecuteResult"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_IsCancelled As Boolean
Private m_ErrorMessage As String
Private m_ColumnsCount As Long
Private m_CaptionRowsCount As Long
Private m_HeaderRowsCount As Long
Private m_PreviousHeaderRowsCount As Long
Private m_DataRowsCount As Long

Public Property Get IsCancelled() As Boolean
    IsCancelled = m_IsCancelled
End Property

Public Property Let IsCancelled(value As Boolean)
    m_IsCancelled = value
End Property

Public Property Get ErrorMessage() As String
    ErrorMessage = m_ErrorMessage
End Property

Public Property Let ErrorMessage(value As String)
    m_ErrorMessage = value
End Property

Public Property Get ColumnsCount() As Long
    ColumnsCount = m_ColumnsCount
End Property

Public Property Let ColumnsCount(value As Long)
    m_ColumnsCount = value
End Property

Public Property Get CaptionRowsCount() As Long
    CaptionRowsCount = m_CaptionRowsCount
End Property

Public Property Let CaptionRowsCount(value As Long)
    m_CaptionRowsCount = value
End Property

Public Property Get HeaderRowsCount() As Long
    HeaderRowsCount = m_HeaderRowsCount
End Property

Public Property Let HeaderRowsCount(value As Long)
    m_HeaderRowsCount = value
End Property

Public Property Get PreviousHeaderRowsCount() As Long
    PreviousHeaderRowsCount = m_PreviousHeaderRowsCount
End Property

Public Property Let PreviousHeaderRowsCount(value As Long)
    m_PreviousHeaderRowsCount = value
End Property

Public Property Get DataRowsCount() As Long
    DataRowsCount = m_DataRowsCount
End Property

Public Property Let DataRowsCount(value As Long)
    m_DataRowsCount = value
End Property

Public Property Get TotalRowsCount() As Long
    TotalRowsCount = CaptionRowsCount + HeaderRowsCount + DataRowsCount
End Property
Attribute VB_Name = "EntityOption"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Date Options
Private m_InputDateOrder As String
Private m_DateInputOption As String
Private m_InputStartDate As Date
Private m_InputEndDate As Date
Private m_SelectedQuickDate As String

'Header options
Private m_HeaderOption As String
Private m_IsTrimEmptyHeaderRows As Boolean
Private m_HasProfileEntityTitle As Boolean
Private m_HasProfileSeriesName As Boolean
Private m_HasProfileDataSource As Boolean
Private m_HasProfileDataReport As Boolean
Private m_HasProfileObservation As Boolean
Private m_HasProfileAttributes As Boolean
Private m_HasReportEntityTitle As Boolean
Private m_HasReportSeriesName As Boolean
Private m_HasReportDataSource As Boolean
Private m_HasReportDataReport As Boolean
Private m_HasReportObservation As Boolean
Private m_HasReportAttributes As Boolean
Private m_HasProfileSeriesCaption As Boolean
Private m_HasProfileNumeratorDenominator As Boolean

'Refresh Options
Private m_IsRefreshOnOpen As Boolean
Private m_IsRefreshPeriodically As Boolean
Private m_RefreshHours As Integer
Private m_RefreshMinutes As Integer

'Output options
Private m_VerticalDelete As String
Private m_VerticalInsert As String
Private m_HorizontalDelete As String
Private m_HorizontalInsert As String
Private m_ResultType As String
Private m_IsAdjustWidth As Boolean
Private m_IsFillFormulas As Boolean
Private m_IsPreserveFormat As Boolean
Private m_ChartOption As String
Private m_IsOneTimeRequest As Boolean

'Color Options
Private m_IsFillCaption As Boolean
Private m_IsFillHeader As Boolean
Private m_IsFillDataRow As Boolean
Private m_IsFillByRow As Boolean
Private m_CaptionColor As Long
Private m_HeaderColor As Long
Private m_OddColor As Long
Private m_EvenColor As Long

Private m_OptionData As Long
Private m_HeaderShownItems As Long

'Date Options
Public Property Get InputDateOrder() As String
    InputDateOrder = m_InputDateOrder
End Property

Public Property Let InputDateOrder(value As String)
    m_InputDateOrder = value
End Property

Public Property Get DateInputOption() As String
    DateInputOption = m_DateInputOption
End Property

Public Property Let DateInputOption(value As String)
    m_DateInputOption = value
End Property

Public Property Get InputStartDate() As Date
    InputStartDate = m_InputStartDate
End Property

Public Property Let InputStartDate(value As Date)
    m_InputStartDate = value
End Property

Public Property Get InputEndDate() As Date
    InputEndDate = m_InputEndDate
End Property

Public Property Let InputEndDate(value As Date)
    m_InputEndDate = value
End Property

Public Property Get selectedQuickDate() As String
    selectedQuickDate = m_SelectedQuickDate
End Property

Public Property Let selectedQuickDate(value As String)
    m_SelectedQuickDate = value
End Property

'Header options
Public Property Get HeaderOption() As String
    HeaderOption = m_HeaderOption
End Property

Public Property Let HeaderOption(value As String)
    m_HeaderOption = value
End Property

Public Property Get IsTrimEmptyHeaderRows() As Boolean
    IsTrimEmptyHeaderRows = m_IsTrimEmptyHeaderRows
End Property

Public Property Let IsTrimEmptyHeaderRows(value As Boolean)
    m_IsTrimEmptyHeaderRows = value
End Property

Public Property Get HasProfileEntityTitle() As Boolean
    HasProfileEntityTitle = m_HasProfileEntityTitle
End Property

Public Property Let HasProfileEntityTitle(value As Boolean)
    m_HasProfileEntityTitle = value
End Property

Public Property Let HasProfileSeriesCaption(value As Boolean)
    m_HasProfileSeriesCaption = value
End Property

Public Property Let HasProfileNumeratorDenominator(value As Boolean)
    m_HasProfileNumeratorDenominator = value
End Property

Public Property Get HasProfileSeriesCaption() As Boolean
    HasProfileSeriesCaption = m_HasProfileSeriesCaption
End Property

Public Property Get HasProfileNumeratorDenominator() As Boolean
    HasProfileNumeratorDenominator = m_HasProfileNumeratorDenominator
End Property

Public Property Get HasProfileSeriesName() As Boolean
    HasProfileSeriesName = m_HasProfileSeriesName
End Property

Public Property Let HasProfileSeriesName(value As Boolean)
    m_HasProfileSeriesName = value
End Property

Public Property Get HasProfileDataSource() As Boolean
    HasProfileDataSource = m_HasProfileDataSource
End Property

Public Property Let HasProfileDataSource(value As Boolean)
    m_HasProfileDataSource = value
End Property

Public Property Get HasProfileDataReport() As Boolean
    HasProfileDataReport = m_HasProfileDataReport
End Property

Public Property Let HasProfileDataReport(value As Boolean)
    m_HasProfileDataReport = value
End Property

Public Property Get HasProfileObservation() As Boolean
    HasProfileObservation = m_HasProfileObservation
End Property

Public Property Let HasProfileObservation(value As Boolean)
    m_HasProfileObservation = value
End Property

Public Property Get HasProfileAttributes() As Boolean
    HasProfileAttributes = m_HasProfileAttributes
End Property

Public Property Let HasProfileAttributes(value As Boolean)
    m_HasProfileAttributes = value
End Property

Public Property Get HasReportEntityTitle() As Boolean
    HasReportEntityTitle = m_HasReportEntityTitle
End Property

Public Property Let HasReportEntityTitle(value As Boolean)
    m_HasReportEntityTitle = value
End Property

Public Property Get HasReportSeriesName() As Boolean
    HasReportSeriesName = m_HasReportSeriesName
End Property

Public Property Let HasReportSeriesName(value As Boolean)
    m_HasReportSeriesName = value
End Property

Public Property Get HasReportDataSource() As Boolean
    HasReportDataSource = m_HasReportDataSource
End Property

Public Property Let HasReportDataSource(value As Boolean)
    m_HasReportDataSource = value
End Property

Public Property Get HasReportDataReport() As Boolean
    HasReportDataReport = m_HasReportDataReport
End Property

Public Property Let HasReportDataReport(value As Boolean)
    m_HasReportDataReport = value
End Property

Public Property Get HasReportObservation() As Boolean
    HasReportObservation = m_HasReportObservation
End Property

Public Property Let HasReportObservation(value As Boolean)
    m_HasReportObservation = value
End Property

Public Property Get HasReportAttributes() As Boolean
    HasReportAttributes = m_HasReportAttributes
End Property

Public Property Let HasReportAttributes(value As Boolean)
    m_HasReportAttributes = value
End Property

'Refresh Options
Public Property Get isRefreshOnOpen() As Boolean
    isRefreshOnOpen = m_IsRefreshOnOpen
End Property

Public Property Let isRefreshOnOpen(value As Boolean)
    m_IsRefreshOnOpen = value
End Property

Public Property Get IsRefreshPeriodically() As Boolean
    IsRefreshPeriodically = m_IsRefreshPeriodically
End Property

Public Property Let IsRefreshPeriodically(value As Boolean)
    m_IsRefreshPeriodically = value
End Property

Public Property Get RefreshHours() As Integer
    RefreshHours = m_RefreshHours
End Property

Public Property Let RefreshHours(value As Integer)
    m_RefreshHours = value
End Property

Public Property Get RefreshMinutes() As Integer
    RefreshMinutes = m_RefreshMinutes
End Property

Public Property Let RefreshMinutes(value As Integer)
    m_RefreshMinutes = value
End Property

'Output options
Public Property Get VerticalDelete() As String
    VerticalDelete = m_VerticalDelete
End Property

Public Property Let VerticalDelete(value As String)
    m_VerticalDelete = value
End Property

Public Property Get VerticalInsert() As String
    VerticalInsert = m_VerticalInsert
End Property

Public Property Let VerticalInsert(value As String)
    m_VerticalInsert = value
End Property

Public Property Get HorizontalDelete() As String
    HorizontalDelete = m_HorizontalDelete
End Property

Public Property Let HorizontalDelete(value As String)
    m_HorizontalDelete = value
End Property

Public Property Get HorizontalInsert() As String
    HorizontalInsert = m_HorizontalInsert
End Property

Public Property Let HorizontalInsert(value As String)
    m_HorizontalInsert = value
End Property

Public Property Get ResultType() As String
    ResultType = m_ResultType
End Property

Public Property Let ResultType(value As String)
    m_ResultType = value
End Property

Public Property Get IsAdjustWidth() As Boolean
    IsAdjustWidth = m_IsAdjustWidth
End Property

Public Property Let IsAdjustWidth(value As Boolean)
    m_IsAdjustWidth = value
End Property

Public Property Get IsFillFormulas() As Boolean
    IsFillFormulas = m_IsFillFormulas
End Property

Public Property Let IsFillFormulas(value As Boolean)
    m_IsFillFormulas = value
End Property

Public Property Get isPreserveFormat() As Boolean
    isPreserveFormat = m_IsPreserveFormat
End Property

Public Property Let isPreserveFormat(value As Boolean)
    m_IsPreserveFormat = value
End Property

Public Property Get chartOption() As String
    chartOption = m_ChartOption
End Property

Public Property Let chartOption(value As String)
    m_ChartOption = value
End Property

Public Property Get IsOneTimeRequest() As Boolean
    IsOneTimeRequest = m_IsOneTimeRequest
End Property

Public Property Let IsOneTimeRequest(value As Boolean)
    m_IsOneTimeRequest = value
End Property

'Color Options
Public Property Get IsFillCaption() As Boolean
    IsFillCaption = m_IsFillCaption
End Property

Public Property Let IsFillCaption(value As Boolean)
    m_IsFillCaption = value
End Property

Public Property Get IsFillHeader() As Boolean
    IsFillHeader = m_IsFillHeader
End Property

Public Property Let IsFillHeader(value As Boolean)
    m_IsFillHeader = value
End Property

Public Property Get IsFillDataRow() As Boolean
    IsFillDataRow = m_IsFillDataRow
End Property

Public Property Let IsFillDataRow(value As Boolean)
    m_IsFillDataRow = value
End Property

Public Property Get IsFillByRow() As Boolean
    IsFillByRow = m_IsFillByRow
End Property

Public Property Let IsFillByRow(value As Boolean)
    m_IsFillByRow = value
End Property

Public Property Get CaptionColor() As Long
    CaptionColor = m_CaptionColor
End Property

Public Property Let CaptionColor(value As Long)
    m_CaptionColor = value
End Property

Public Property Get HeaderColor() As Long
    HeaderColor = m_HeaderColor
End Property

Public Property Let HeaderColor(value As Long)
    m_HeaderColor = value
End Property

Public Property Get OddColor() As Long
    OddColor = m_OddColor
End Property

Public Property Let OddColor(value As Long)
    m_OddColor = value
End Property

Public Property Get EvenColor() As Long
    EvenColor = m_EvenColor
End Property

Public Property Let EvenColor(value As Long)
    m_EvenColor = value
End Property

Public Property Get OptionData() As Long
    OptionData = m_OptionData
End Property

Public Property Let OptionData(value As Long)
    m_OptionData = value
End Property

Public Property Get HeaderShownItems() As Long
    HeaderShownItems = m_HeaderShownItems
End Property

Public Property Let HeaderShownItems(value As Long)
    m_HeaderShownItems = value
End Property
Attribute VB_Name = "MacrosCP"
Option Explicit
Option Private Module

Global Const CURVE_SHEET_INFO As String = "CUR.CI"

Public Const CURVE_FLG_MRBD As Long = &H1
Public Const CURVE_FLG_MRBD_COMPLETE As Long = (CURVE_FLG_MRBD Or &H2)
Public Const CURVE_FLG_EDIT_MRBD_COLUMN As Long = &H4
Public Const CURVE_FLG_EDIT_DATES As Long = &H8
Public Const CURVE_FLG_PIVOT As Long = &H10
Public Const CURVE_FLG_DST_ADJUST_START As Long = &H100
Public Const CURVE_FLG_DST_ADJUST_END As Long = &H200

Public Const CURVE_FLG_TIMESERIES As Long = &H1000
Public Const CURVE_FLG_FUTURE_RANGE As Long = &H8000& '32768  '&H8000
Public Const CURVE_FLG_MULTIOBS As Long = &H10000
Public Const CURVE_FLG_V1 As Long = &H10000000 'the 4 most significant bits contain version
Public Const CURVE_FLG_V2 As Long = &H20000000

Global Const CURVE_SHEET_PASSWORD As String = "curve0162"
Global Const CURVE_SHEET_FLAGVALUES As String = "CUR.FVS"

Global Const OID_ACCEPT_ALL As Integer = 20
Global Const OID_ACCEPT As Integer = 21

Global Const AT_HISTORY As String = "History"
Global Const AT_SORT As String = "Sort"
Global Const AT_DELETE As String = "Delete"
Global Const AT_NAME As String = "Name"
Global Const AT_DOWNLOAD As String = "Download"
Global Const AT_UPLOAD As String = "Upload"
Global Const AT_ACCEPT As String = "Accept"
Global Const AT_ACCEPT_ALL As String = "AcceptAll"

Public Const CURVE_UI_CONTRACTS_START_PLUS As Integer = 1
Public Const CURVE_UI_CONTRACTS_START_MINUS As Integer = 2
Public Const CURVE_UI_CONTRACTS_END_PLUS As Integer = 3
Public Const CURVE_UI_CONTRACTS_END_MINUS As Integer = 4

Public Const CURVE_GRANULARITY_NONE As Long = &H0
Public Const CURVE_GRANULARITY_HOURLY As Long = &H1
Public Const CURVE_GRANULARITY_DAILY As Long = &H2
Public Const CURVE_GRANULARITY_MONTHLY As Long = &H4
Public Const CURVE_GRANULARITY_WEEKLY As Long = &H8
Public Const CURVE_GRANULARITY_WEEKDAY As Long = (CURVE_GRANULARITY_WEEKLY Or &H10)
Public Const CURVE_GRANULARITY_WEEKEND As Long = (CURVE_GRANULARITY_WEEKLY Or &H20)
Public Const CURVE_GRANULARITY_WEEKLY_MON2SUN As Long = (CURVE_GRANULARITY_WEEKLY Or &H40)
Public Const CURVE_GRANULARITY_WEEKLY_SUN2SAT As Long = (CURVE_GRANULARITY_WEEKLY Or &H80)
Public Const CURVE_GRANULARITY_QUARTERLY As Long = &H100
Public Const CURVE_GRANULARITY_HALFYEAR As Long = &H200
Public Const CURVE_GRANULARITY_YEARLY As Long = &H400
Public Const CURVE_GRANULARITY_MINUTELY As Long = &H800
Public Const CURVE_GRANULARITY_MIN1 As Long = (CURVE_GRANULARITY_MINUTELY Or &H1000)
Public Const CURVE_GRANULARITY_MIN5 As Long = (CURVE_GRANULARITY_MINUTELY Or &H2000)
Public Const CURVE_GRANULARITY_MIN10 As Long = (CURVE_GRANULARITY_MINUTELY Or &H4000)
Public Const CURVE_GRANULARITY_MIN15 As Long = (CURVE_GRANULARITY_MINUTELY Or &H8000&) ' 32768)
Public Const CURVE_GRANULARITY_MIN30 As Long = (CURVE_GRANULARITY_MINUTELY Or &H10000)

Public Const N_MIN1 As String = "Minute"
Public Const N_MIN5 As String = "5Min"
Public Const N_MIN10 As String = "10Min"
Public Const N_MIN15 As String = "15Min"
Public Const N_MIN30 As String = "30Min"
'
Public Const N_HOURLY As String = "Hourly"
Public Const N_DAILY As String = "Daily"
Public Const N_MONTHLY As String = "Monthly"
Public Const N_WEEKDAY As String = "Weekday"
Public Const N_WEEKEND As String = "Weekend"
Public Const N_WEEK_MON2SUN As String = "Weekly(Mon-Sun)"
Public Const N_WEEK_SUN2SAT As String = "Weekly(Sun-Sat)"
Public Const N_WEEKLY As String = "Weekly"
Public Const N_QUARTERLY As String = "Quarterly"
Public Const N_HALFYEAR As String = "Half Year"
Public Const N_YEARLY As String = "Annual"

Private Const SUPERCRIPT As String = "\^[CHR(39)]^\"

Public Function EncodeMacroParam(ByVal aStr As String) As String
    If aStr = vbNullString Then Exit Function
    aStr = Replace(aStr, "'", SUPERCRIPT)
    aStr = Replace(aStr, """", """""")
    EncodeMacroParam = aStr
End Function

Public Function MacroActionStr(macro As String, ParamArray args() As Variant) As String
 Dim i As Long
 Dim vts As Boolean

    MacroActionStr = "'" + macro
    For i = LBound(args) To UBound(args)
        MacroActionStr = MacroActionStr + IIf(i = LBound(args), " ", ",")
        vts = IIf(VarType(args(i)) = vbString, True, False)
        MacroActionStr = MacroActionStr + IIf(vts, """", vbNullString) + EncodeMacroParam(CStr(args(i))) + IIf(vts, """", vbNullString)
    Next
    MacroActionStr = MacroActionStr + "'"
End Function
Attribute VB_Name = "ProfileDataEntity"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_EntityObject As DataDirectEntity
Private m_OwnerUserName As String
Private m_GroupName As String
Private m_ProfileName As String
Private m_TemplateName As String
Private m_IsAnalytics As Boolean
Private m_CustomAttributes As String
Private m_ProfileType As String
Private m_IsForecastDateSelected As Boolean
Private m_ForecastDate As Date

Public Property Get EntityObject() As DataDirectEntity
    Set EntityObject = m_EntityObject
End Property

Public Property Let EntityObject(value As DataDirectEntity)
    Set m_EntityObject = value
End Property

Public Property Get OwnerUserName() As String
    OwnerUserName = m_OwnerUserName
End Property

Public Property Let OwnerUserName(value As String)
    m_OwnerUserName = value
End Property

Public Property Get GroupName() As String
    GroupName = m_GroupName
End Property

Public Property Let GroupName(value As String)
    m_GroupName = value
End Property

Public Property Get profileName() As String
    profileName = m_ProfileName
End Property

Public Property Let profileName(value As String)
    m_ProfileName = value
End Property

Public Property Get TemplateName() As String
    TemplateName = m_TemplateName
End Property

Public Property Let TemplateName(value As String)
    m_TemplateName = value
End Property

Public Property Get IsAnalytics() As Boolean
    IsAnalytics = m_IsAnalytics
End Property

Public Property Let IsAnalytics(value As Boolean)
    m_IsAnalytics = value
End Property

Public Property Get CustomAttributes() As String
    CustomAttributes = m_CustomAttributes
End Property

Public Property Let CustomAttributes(value As String)
    m_CustomAttributes = value
End Property

Public Property Get ProfileType() As String
    ProfileType = m_ProfileType
End Property

Public Property Let ProfileType(value As String)
    m_ProfileType = value
End Property

Public Property Get IsForecastDateSelected() As Boolean
    IsForecastDateSelected = m_IsForecastDateSelected
End Property

Public Property Let IsForecastDateSelected(value As Boolean)
    m_IsForecastDateSelected = value
End Property

Public Property Get forecastDate() As Date
    forecastDate = m_ForecastDate
End Property

Public Property Let forecastDate(value As Date)
    m_ForecastDate = value
End Property

Private Sub Class_Initialize()
    Me.EntityObject = New DataDirectEntity
End Sub
Attribute VB_Name = "ReportDataEntity"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_EntityObject As DataDirectEntity
Private m_DataSourceLabel As String
Private m_DataReportLabel As String
Private m_ObservationLabels() As String
Private m_DataSourceValue As String
Private m_DataReportValue As String
Private m_ObservationValues() As String
Private m_ReportAttributes() As AttributeValuesHolder
Private m_AttributeSelectedIndex As Integer
Private m_IsSimple As Boolean
Private m_Aggregation As String

Public Property Get EntityObject() As DataDirectEntity
    Set EntityObject = m_EntityObject
End Property

Public Property Let EntityObject(value As DataDirectEntity)
    Set m_EntityObject = value
End Property

Public Property Get DataSourceLabel() As String
    DataSourceLabel = m_DataSourceLabel
End Property

Public Property Let DataSourceLabel(value As String)
    m_DataSourceLabel = value
End Property

Public Property Get DataReportLabel() As String
    DataReportLabel = m_DataReportLabel
End Property

Public Property Let DataReportLabel(value As String)
    m_DataReportLabel = value
End Property

Public Property Get ObservationLabels() As String()
    ObservationLabels = m_ObservationLabels
End Property

Public Property Let ObservationLabels(value() As String)
    m_ObservationLabels = value
End Property

Public Property Get DataSourceValue() As String
    DataSourceValue = m_DataSourceValue
End Property

Public Property Let DataSourceValue(value As String)
    m_DataSourceValue = value
End Property

Public Property Get DataReportValue() As String
    DataReportValue = m_DataReportValue
End Property

Public Property Let DataReportValue(value As String)
    m_DataReportValue = value
End Property

Public Property Get ObservationValues() As String()
    ObservationValues = m_ObservationValues
End Property

Public Property Let ObservationValues(value() As String)
    m_ObservationValues = value
End Property

Public Property Get reportAttributes() As AttributeValuesHolder()
    reportAttributes = m_ReportAttributes
End Property

Public Property Let reportAttributes(value() As AttributeValuesHolder)
    m_ReportAttributes = value
End Property

Public Property Get AttributeSelectedIndex() As Integer
    AttributeSelectedIndex = m_AttributeSelectedIndex
End Property

Public Property Let AttributeSelectedIndex(value As Integer)
    m_AttributeSelectedIndex = value
End Property

Public Property Get IsSimple() As Boolean
    IsSimple = m_IsSimple
End Property

Public Property Let IsSimple(value As Boolean)
    m_IsSimple = value
End Property

Public Property Get Aggregation() As String
    Aggregation = m_Aggregation
End Property

Public Property Let Aggregation(value As String)
    m_Aggregation = value
End Property

Private Sub Class_Initialize()
    Me.EntityObject = New DataDirectEntity
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "StartSHeet"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "VWCommon"
Option Explicit
Option Private Module

#If Win64 Then
Private Declare PtrSafe Sub DbgPrint Lib "kernel32" Alias "OutputDebugStringA" (ByVal msg As String)
#ElseIf VBA7 Then
Private Declare PtrSafe Sub DbgPrint Lib "kernel32" Alias "OutputDebugStringA" (ByVal msg As String)
#Else
Private Declare Sub DbgPrint Lib "kernel32" Alias "OutputDebugStringA" (ByVal msg As String)
#End If

Enum SourceVersion
    [_First] = 1
    Version1 = 1
    Version2 = 2
    Version3 = 3
    Version4 = 40
    Version42 = 42
    [_Last] = 42
End Enum

Enum TargetVersion
    [_First] = 43
    version43 = 43
    [_Last] = 43
End Enum

Public Sub Auto_Open()

End Sub

Public Sub Auto_close()

End Sub

Public Sub DebugPrint(msg As Variant)
    Call DbgPrint(GetVersion() + ":  " + CStr(msg))
End Sub
Attribute VB_Name = "ZEWSXml"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Event OnRead(ByVal seq As Long, ByVal IsAttribute As Boolean, ByVal name As String, ByVal value As String, ByVal userData As Long)
Public Event OnWrite(ByVal seq As Long, ByRef IsAttribute As Boolean, ByRef name As String, ByRef value As String, ByVal userData As Long)

Private m_xmlDoc As MSXML2.DOMDocument60
Private m_nodeHash As Scripting.Dictionary

Private Sub NewDoc()
' Dim ver As MSXML2.IXMLDOMProcessingInstruction
    Call m_nodeHash.RemoveAll
    Set m_xmlDoc = New MSXML2.DOMDocument60
    m_xmlDoc.preserveWhiteSpace = True
'    Set ver = m_xmlDoc.createProcessingInstruction("xml", "version=" & """1.0""")
'    Call m_xmlDoc.appendChild(ver)
End Sub

Public Sub CreateRootElement(ByVal rootName As String, ByVal VersionNumber As String)
 Dim rootNode As MSXML2.IXMLDOMElement
    
    Call NewDoc
    
'    xmlDecl = m_xmlDoc.CreateXmlDeclaration("1.0", "utf-8", Null)
    Set rootNode = m_xmlDoc.createElement(rootName)
    
    Call rootNode.SetAttribute("Version", VersionNumber)
'    Call m_xmlDoc.InsertBefore(xmlDecl, m_xmlDoc.DocumentElement)
    Call m_xmlDoc.appendChild(rootNode)
End Sub

Public Function Createlement(ByVal parentNode As LongPtr, ByVal elementName As String) As LongPtr '???
 Dim node As MSXML2.IXMLDOMElement

    If InStr(elementName, "/") > 0 And parentNode = -1 Then
        Createlement = CreatelementEx(elementName)
        Exit Function
    End If
    
    Set node = m_xmlDoc.createElement(elementName)
    
    Call GetParentElement(parentNode).appendChild(node)
            
    Createlement = LUID(node)
    Call m_nodeHash.Add(CStr(Createlement), node)
End Function

Private Function CreatelementEx(ByVal elementName As String) As LongPtr
 Dim path() As String
 Dim node As MSXML2.IXMLDOMElement
 Dim tmp As MSXML2.IXMLDOMElement
 Dim k As Long
 Dim m As Long
 
    If left(elementName, 1) = "/" Then
        elementName = Mid(elementName, 2)
    ElseIf right(elementName, 1) = "/" Then
        elementName = left(elementName, Len(elementName) - 1)
    End If
    If Len(elementName) = 0 Then
        CreatelementEx = -10
        Exit Function
    End If
    
    path = Split(elementName, "/")
 
    Set node = m_xmlDoc.DocumentElement
            
    If node.nodeName <> path(0) Then
        CreatelementEx = -11
        Exit Function
    End If
    
    For k = 1 To UBound(path) - 1
        Set tmp = Nothing
        
        For m = 0 To node.ChildNodes.length - 1
            If node.ChildNodes(m).nodeName = path(k) Then
                Set tmp = node.ChildNodes(m)
                Exit For
            End If
        Next
        
        If tmp Is Nothing Then
            Set node = tmp
        End If
    Next

    Set tmp = m_xmlDoc.createElement(path(UBound(path)))
    Call node.appendChild(tmp)
    Set node = tmp

    CreatelementEx = LUID(node)
    Call m_nodeHash.Add(CStr(CreatelementEx), node)
End Function

Private Function GetParentElement(ByVal parentNode As LongPtr) As MSXML2.IXMLDOMElement
    If m_nodeHash.Exists(CStr(parentNode)) Then
        Set GetParentElement = m_nodeHash(CStr(parentNode))
    Else
        Set GetParentElement = m_xmlDoc.DocumentElement
    End If
End Function

Private Function AddToHash(node As MSXML2.IXMLDOMElement) As LongPtr
    AddToHash = LUID(node)
    Call m_nodeHash.Add(CStr(AddToHash), node)
End Function
 
Public Function CreateTextNode(ByVal parentNode As LongPtr, ByVal nodeName As String, ByVal nodeText As String) As LongPtr '???
 Dim text As MSXML2.IXMLDOMText
 Dim node As MSXML2.IXMLDOMElement
    
    nodeText = nodeText
    
    Set text = m_xmlDoc.CreateTextNode(nodeText)
    Set node = m_xmlDoc.createElement(nodeName)
    Call node.appendChild(text)

    Call GetParentElement(parentNode).appendChild(node)
    CreateTextNode = AddToHash(node)
End Function

Public Function ToString() As String
    ToString = m_xmlDoc.xml 'CDDXLib.DefaultZEWSProxy(DDX_PID).BeautifyXML(m_xmlDoc.xml)
End Function

Public Function LoadXML(ByVal xml As String) As Boolean
    Call NewDoc
    If Len(xml) = 0 Then Exit Function

    On Error GoTo OOPS
    
    LoadXML = m_xmlDoc.LoadXML(xml)
    
OOPS:
    If Err.Number <> 0 Then
        Call DispErr(Err.Description)
    End If
    Exit Function
End Function

Public Function SelectTexts(ByVal selectPath As String) As String()
 Dim nodes As MSXML2.IXMLDOMNodeList
 Dim ret() As String
 Dim k As Long
 Dim cnt As Long
 
    Set nodes = m_xmlDoc.SelectNodes(selectPath)

    If nodes Is Nothing Then
        ReDim ret(0 To 0)
        SelectTexts = ret
        Exit Function 'return new string[1]{string.Empty};
    End If
    
    cnt = nodes.length
    If cnt = 0 Then
        ReDim ret(0 To 0)
        SelectTexts = ret
        Exit Function 'return new string[1]{string.Empty};
    End If
    
    ReDim ret(0 To cnt - 1)
     
    For k = 0 To cnt - 1
        ret(k) = nodes(k).text
    Next
    
    SelectTexts = ret
End Function

Private Sub DispErr(ByVal errDesc As String)
    Call DebugPrint(errDesc)
    'Debug.Print errDesc
End Sub

Public Function Load(ByVal filePath As String) As Boolean
    On Error GoTo OOPS
    
    Call NewDoc
    Load = m_xmlDoc.Load(filePath)

OOPS:
    If Err.Number <> 0 Then
        Call DispErr(Err.Description)
    End If
    Exit Function
End Function

'Public Function Save(ByVal filePath As String) As Boolean
'    On Error GoTo OOPS
'
'                XmlWriterSettings settings = new XmlWriterSettings();
'                settings.Indent = true;
'                settings.NewLineChars = Environment.NewLine;
'                using (XmlWriter writer = XmlTextWriter.Create(filePath, settings))
'                {
'                    m_xmlDoc.Save(writer);
'                }
'                return true;
'
'OOPS:
'    If Err.Number <> 0 Then
'        Call DispErr(Err.Description)
'    End If
'    Exit Function
'End Function

Public Property Get Version() As String
    Version = m_xmlDoc.DocumentElement.getAttribute("Version")
End Property

'Public Function Encode64(ByVal strToEncode As String) As String
'            byte[] b = System.Text.ASCIIEncoding.ASCII.GetBytes(strToEncode);
'            string ret = System.Convert.ToBase64String(b);
'
'            return ret;
'End Function
'
'Public Function Decode64(ByVal strToDecode As String) As String
'            byte[] b  = System.Convert.FromBase64String(strToDecode);
'            string ret = System.Text.ASCIIEncoding.ASCII.GetString(b);
'
'            return ret;
'End Function

'Public Function RemoveNode(ByVal selectPath As String) As Boolean
'            XmlNode node = _xmlDoc.SelectSingleNode(selectPath);
'
'            if (node == null) return false;
'            if (node.ParentNode == null) return false;
'            node.ParentNode.RemoveChild(node);
'            return true;
'End Function
'
Public Function SelectAttribute(ByVal selectPath As String, ByVal attribName As String) As String
 Dim node As MSXML2.IXMLDOMNode
 Dim attr As MSXML2.IXMLDOMAttribute
 
    Set node = m_xmlDoc.SelectSingleNode(selectPath)
    If node Is Nothing Then Exit Function

    Set attr = node.Attributes.getNamedItem(attribName)
    If attr Is Nothing Then Exit Function
    
    SelectAttribute = attr.text
End Function

Public Function AddAttribute(ByVal nodeID As LongPtr, ByVal attribName As String, ByVal attribValue As String) As Boolean '???
 Dim node As MSXML2.IXMLDOMNode
 Dim attr As MSXML2.IXMLDOMAttribute
 
    Set node = GetParentElement(nodeID)
    If node Is Nothing Then Exit Function
    
    Set attr = m_xmlDoc.createAttribute(attribName)
    node.Attributes.setNamedItem(attr).text = attribValue

    AddAttribute = True
End Function

'Public Function SelectAttributes(ByVal selectPath As String, ByVal attribName As String) As String()
'            XmlNodeList nodes = _xmlDoc.SelectNodes(selectPath);
'
'            if (nodes == null || nodes.Count == 0)
'            {
'                return new string[1] { string.Empty };
'            }
'
'            List<string> values = new List<string>();
'            foreach (XmlElement node in nodes)
'            {
'                values.Add(node.HasAttribute(attribName) ? node.GetAttribute(attribName) : string.Empty);
'            }
'            return values.ToArray();
'End Function

Private Function LUID(obj As Object) As LongPtr
    LUID = ObjPtr(obj)
End Function

Public Sub ReadXML(ByVal path As String, ByVal userData As Long)
 Dim nodes As MSXML2.IXMLDOMNodeList
 Dim seq As Long
 Dim k As Long
 Dim n As Long
 
    seq = 1
    Set nodes = m_xmlDoc.SelectNodes(path)
    
    If nodes Is Nothing Then Exit Sub
    If nodes.length = 0 Then Exit Sub
    
    For k = 0 To nodes.length - 1
        For n = 0 To nodes(k).Attributes.length - 1
            With nodes(k).Attributes(n)
                RaiseEvent OnRead(seq, True, .nodeName, .text, userData)
            End With
        Next

        For n = 0 To nodes(k).ChildNodes.length - 1
            With nodes(k).ChildNodes(n)
                RaiseEvent OnRead(seq, False, .nodeName, .text, userData)
            End With
        Next
        
        seq = seq + 1
    Next
End Sub

Public Sub WriteXML(ByVal path As String, ByVal userData As Long)
 Dim name As String
 Dim value As String
 Dim isattrib As Boolean
 Dim node As MSXML2.IXMLDOMNode
 Dim tmp As MSXML2.IXMLDOMNode
 Dim attr As MSXML2.IXMLDOMAttribute
 Dim itemno As Long
 
    Set node = CreateNode(path)
    itemno = 0
        
    Do
        name = vbNullString
        value = vbNullString
        isattrib = False
        
        itemno = itemno + 1
        RaiseEvent OnWrite(itemno, isattrib, name, value, userData)
        
        If name = vbNullString Then Exit Do

        If isattrib Then
            Set attr = m_xmlDoc.createAttribute(name)
            node.Attributes.setNamedItem(attr).text = value
        Else
            Set tmp = m_xmlDoc.createElement(name)
            tmp.text = value
            Call node.appendChild(tmp)
        End If
    Loop
End Sub

Private Function CreateNode(ByVal pathName As String) As MSXML2.IXMLDOMNode
 Dim path() As String
 Dim node As MSXML2.IXMLDOMNode
 Dim tmp As MSXML2.IXMLDOMNode
 Dim k As Long
 Dim n As Long

    If left(pathName, 1) = "/" Then
        pathName = Mid(pathName, 2)
    ElseIf right(pathName, 1) = "/" Then
        pathName = left(pathName, Len(pathName) - 1)
    End If
    If Len(pathName) = 0 Then Exit Function
    
    path = Split(pathName, "/")

    Set node = m_xmlDoc.DocumentElement
    If node.nodeName <> path(0) Then Exit Function

    For k = LBound(path) + 1 To UBound(path)
        Set tmp = Nothing

        If k <> UBound(path) Then
            For n = 0 To node.ChildNodes.length - 1
                If node.ChildNodes(n).nodeName = path(k) Then
                    Set tmp = node.ChildNodes(n)
                    Exit For
                End If
            Next
        End If

        If tmp Is Nothing Then
            Set tmp = m_xmlDoc.createElement(path(k))
            Call node.appendChild(tmp)
            Set node = tmp
        End If
    Next

    Set CreateNode = node
End Function

Public Function SelectNodes(ByVal selectPath As String) As MSXML2.IXMLDOMNodeList
 Dim nodes As MSXML2.IXMLDOMNodeList
 
    Set nodes = m_xmlDoc.SelectNodes(selectPath)

    If nodes Is Nothing Then Exit Function
    If nodes.length = 0 Then Exit Function
    Set SelectNodes = nodes
End Function

Private Sub Class_Initialize()
    Set m_nodeHash = New Scripting.Dictionary
    m_nodeHash.CompareMode = vbBinaryCompare
End Sub

Private Sub Class_Terminate()
    Set m_nodeHash = Nothing
    Set m_xmlDoc = Nothing
End Sub
Attribute VB_Name = "modFunctions"
Option Explicit

Private Function ToSourceVersion(ByVal strVer As String) As SourceVersion
 Dim ele() As String

    If strVer = vbNullString Then
        ToSourceVersion = SourceVersion.Version2
        Exit Function
    End If
    
    If InStr(strVer, "x") < 1 Then
        ele = Split(strVer, ".")
        If UBound(ele) < 1 Then
            ToSourceVersion = SourceVersion.Version2
        Else
            If Val(ele(0)) = 2 Then
                ToSourceVersion = SourceVersion.Version2
            ElseIf Val(ele(0)) = 3 Then
                ToSourceVersion = SourceVersion.Version3
            ElseIf Val(ele(0)) = 4 Then
                If Val(ele(1)) <= 1 Then
                    ToSourceVersion = SourceVersion.Version4
                ElseIf Val(ele(1)) <= 3 Then
                    ToSourceVersion = SourceVersion.Version42
                End If
            End If
        End If
        Exit Function
    End If
    
    If StrComp(strVer, "1.x", vbTextCompare) = 0 Then
        ToSourceVersion = SourceVersion.Version1
        
    ElseIf StrComp(strVer, "2.x", vbTextCompare) = 0 Then
        ToSourceVersion = SourceVersion.Version2
        
    ElseIf StrComp(strVer, "3.x", vbTextCompare) = 0 Then
        ToSourceVersion = SourceVersion.Version3
        
    ElseIf StrComp(strVer, "4.0, 4.1", vbTextCompare) = 0 Then
        ToSourceVersion = SourceVersion.Version4
        
    ElseIf StrComp(strVer, "4.2", vbTextCompare) = 0 Then
        ToSourceVersion = SourceVersion.Version42
    End If
End Function

'Private Function ToTargetVersion(ByVal strVer As String) As TargetVersion
'    ToTargetVersion = TargetVersion.version43
'End Function

Public Function RunUpgrade(ByVal wbName As String, ByVal sourceVer As String, ByVal doBackup As Integer) As String
 Dim Wb As Workbook

    On Error GoTo OOPS
    
    Set Wb = Workbooks(wbName)
    
    If doBackup <> 0 Then
        Call CZEUpgradeHelper.BackupExcelFile(Wb)
    End If

    If CZEUpgrade.DocumentUpgraded(Wb, sourceVer, ToSourceVersion(sourceVer), TargetVersion.version43, False, True) = False Then
        RunUpgrade = "Failed."
    Else
'        wb.Saved = True
    End If

OOPS:
    If Err.Number <> 0 Then
        RunUpgrade = Err.Description
        Call DebugPrint(Err.Description)
    End If
    
    Exit Function
End Function

Public Function GetVersion() As String
    GetVersion = Trim(ThisWorkbook.BuiltinDocumentProperties("Title"))
End Function

Public Function RunCnvt1X(ByVal wbName As String, ByVal sourceVer As String, ByVal doBackup As Integer, ByVal wParam As String, ByVal lParam As String) As String
    RunCnvt1X = RunUpgrade(wbName, sourceVer, doBackup)
End Function

Public Function RunCnvt41706(ByVal wbName As String, ByVal wParam As String, ByVal lParam As String) As String
 Dim Wb As Workbook
 Dim handler As CCnvtCP41706
 
    On Error GoTo OOPS
    
    CCnvtCommon.SystemDateFormat = wParam
    
    Set Wb = Workbooks(wbName)
    
    Set handler = New CCnvtCP41706
    RunCnvt41706 = handler.Execute(Wb)
    
OOPS:
    If Err.Number <> 0 Then
        RunCnvt41706 = Err.Description
        Call DebugPrint(Err.Description)
    End If
    
    Exit Function
End Function

Public Function RunCnvt419(ByVal wbName As String, ByVal wParam As String, ByVal lParam As String) As String
 Dim Wb As Workbook
 Dim handler As CCnvtCP419
 
    On Error GoTo OOPS
    
    CCnvtCommon.SystemDateFormat = wParam
    
    Set Wb = Workbooks(wbName)
    
    Set handler = New CCnvtCP419
    RunCnvt419 = handler.Execute(Wb)
    
OOPS:
    If Err.Number <> 0 Then
        RunCnvt419 = Err.Description
        Call DebugPrint(Err.Description)
    End If
    
    Exit Function
End Function

Public Function RunCnvtFM412(ByVal wbName As String, ByVal wParam As String, ByVal lParam As String) As String
 Dim Wb As Workbook

    On Error GoTo OOPS

    Set Wb = Workbooks(wbName)
    
    Call CCnvtFormula.Execute(Wb)
    
OOPS:
    If Err.Number <> 0 Then
        RunCnvtFM412 = Err.Description
        Call DebugPrint(Err.Description)
    End If
    
    Exit Function
End Function

' InQuest injected base64 decoded content
' v+ZnW
' h	mz
' [Qjx

INQUEST-PP=macro
