Attribute VB_Name = "CommMdlA"
'=======================================================
' SSS_STAT Ver3.6 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2007.2.7 LSQ (mdf from other seihins)
'=======================================================
Option Explicit

Public Const GBKNAME_VBACM As String = "VBACOM.xla"
Public Const GBKNAME_VBA07 As String = "VBACOM.xla"

'2007.02.07 Copied from commMdl in SRKMAIN.xls
'07.2.7 mdf
Function getExcelVerNo() As Integer
    getExcelVerNo = CInt(Application.Run(GBKNAME_VBACM & "!getExcelVerNo"))
End Function
'
'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub Comm_setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Call Application.Run(GBKNAME_VBACM & "!setChartPosSize", _
                         chartObj, outGrp, rowNum, colNum)
End Sub
'
'cut data linkage
'
'07.1.31 LSQ
Sub Comm_CutDataLink(ByVal bkObj As Workbook, ByVal bkName As String)
    Dim verNo As Integer
    verNo = getExcelVerNo()
    
    If verNo >= 12 Then
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub
'
Sub Comm_SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Call Application.Run(GBKNAME_VBACM & "!SetDataLabel", _
                         ser, namerge, fontsize, charcnt)
End Sub

Function Comm_SetDict(ByVal strpara As String) As Object
    Set Comm_SetDict = Application.Run(GBKNAME_VBACM & "!SetDict", strpara)
End Function

Function Comm_GetTmplGrp(ByVal outRge As Range, ByVal strBkName As String, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    Set Comm_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", outRge, _
                     strBkName, strShtName, strGrpName)
End Function

Function Comm_toXlRCstr(inputFormula As String) As String
    Comm_toXlRCstr = Application.Run(GBKNAME_VBACM & "!toXlRCstr", inputFormula)
End Function

Function Comm_toXlA1str(inputFormula As String) As String
    Comm_toXlA1str = Application.Run(GBKNAME_VBACM & "!toXlA1str", inputFormula)
End Function

Sub Comm_adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
    Call Application.Run(GBKNAME_VBACM & "!adjustMinMax", minV, maxV)
End Sub

Sub Comm_MatchWorkbookFont()
    Call Application.Run(GBKNAME_VBACM & "!MatchWorkbookFont")
End Sub

Sub Comm_SetTicks(ByVal cht As Chart, ByVal strTicks As String)
    Call Application.Run(GBKNAME_VBACM & "!SetTicks", cht, strTicks)
End Sub

Sub Comm_DrawCEGGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawCEGGrp", strWrkSht, strGrpOut, strGrpData, "GrpType=1&" & strpara)
End Sub

Sub Comm_DrawObiGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawObiGrp", strWrkSht, strGrpOut, strGrpData, strpara)
End Sub

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Function WorkBookOpen_SetOpenNum(ByVal xlaFName As String) As Workbook
    Dim bkObj As Workbook
    
    Set bkObj = WorkBookOpen(xlaFName)
    If Not (bkObj Is Nothing) Then
        Application.Run (xlaFName & "!CallNum_AddOne")
    End If
    
    Set WorkBookOpen_SetOpenNum = bkObj
End Function

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Sub WorkBookClose_OnOpenNum(ByVal xlaFName As String)
    Dim cnt As Integer
    cnt = Application.Run(xlaFName & "!CallNum_DecOne")
    If cnt <= 0 Then
        Call WorkBookClose(xlaFName)
    End If
End Sub
'=== EOF ===
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "comm95"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel95
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
Function BorderLine95(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim r As Integer, c As Integer
    
    r = rge.Rows.Count()
    c = rge.Columns.Count()
    
    If nBordersIndex = xlTop Then
        Set rgeTmp = rge.Rows(1)
        rgeTmp.Borders(xlTop).LineStyle = xlNone
        If rgeTmp.Row() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(-1, 0)
            rgeTmp1.Borders(xlBottom).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlBottom Then
        Set rgeTmp = rge.Rows(r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = xlLeft Then
        Set rgeTmp = rge.Columns(1)
        rgeTmp.Borders(xlLeft).LineStyle = xlNone
        If rgeTmp.Column() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(0, -1)
            rgeTmp1.Borders(xlRight).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlRight Then
        Set rgeTmp = rge.Columns(c)
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    ElseIf nBordersIndex = 12 Then      'xlInsideHorizontal
        If r > 1 Then r = r - 1
        Set rgeTmp = rge.Rows("1:" & r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        nBordersIndex = xlBottom
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = 11 Then      'xlInsideVertical
        If c > 1 Then c = c - 1
        Set rgeTmp = rge.Columns("A:" & nTo26Str(c))
        nBordersIndex = xlRight
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    Else        'unknown
        Set rgeTmp = rge
    End If
        
    With rgeTmp.Borders(nBordersIndex)
        If nLineStyle <> xlContinuous Then .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
Function BorderFrame95(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine95(rge1, xlRight, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 11, xlContinuous, nInsideWgt)
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine95(rge1, xlBottom, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 12, xlContinuous, nInsideWgt)
        End If
    End If
    
    Call BorderLine95(RgeObj, xlTop, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlBottom, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlLeft, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlRight, xlContinuous, nOutsideWgt)
    
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "comm97_"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel97 or later
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: xlEdgeTop/xlEdgeBottom/xlEdgeLeft/xlEdgeRight/xlInsideHorizontal/xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
'
Function BorderLine97(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine97.VB_ProcData.VB_Invoke_Func = " \n14"
    With rge.Borders(nBordersIndex)
        .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
'
Function BorderFrame97(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame97.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    RgeObj.BorderAround xlContinuous, nOutsideWgt
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine(rge1, xlRight, xlContinuous, nInsideWgt)       'xlEdgeRight
        Else
            Call BorderLine97(RgeObj, 11, xlContinuous, nInsideWgt)     'xlInsideVertical
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine97(rge1, xlBottom, xlContinuous, nInsideWgt)        'xlEdgeBottom
        Else
            Call BorderLine97(RgeObj, 12, xlContinuous, nInsideWgt)     'xlInsideHorizontal
        End If
    End If
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "commAllVer"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel all version
'
' |fffd||c42c| : Oct 2003, PYJ
'
'=================================================
Option Explicit

Function IsVer95() As Boolean
Attribute IsVer95.VB_ProcData.VB_Invoke_Func = " \n14"
    If val(Application.Version) < 8 Then    'Excel 95
        IsVer95 = True
    Else
        IsVer95 = False
    End If
End Function

'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
Function BorderLine(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderLine95(rge, nBordersIndex, nLineStyle, nBorderWeight)
    Else    '97-
        If nBordersIndex = xlTop Then
            nBordersIndex = 8           'xlEdgeTop
        ElseIf nBordersIndex = xlBottom Then
            nBordersIndex = 9           'xlEdgeBottom
        ElseIf nBordersIndex = xlLeft Then
            nBordersIndex = 7           'xlEdgeLeft
        ElseIf nBordersIndex = xlRight Then
            nBordersIndex = 10          'xlEdgeRight
        End If
        '11--xlInsideVertical; 12--xlInsideHorizontal are the same
        Call BorderLine97(rge, nBordersIndex, nLineStyle, nBorderWeight)
    End If
End Function

Function BorderFrame(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderFrame95(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    Else    '97-
        Call BorderFrame97(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    End If
End Function

'modify |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| chart
Sub MdfChartKeikou(ByVal nXSmpNum As Integer)
Attribute MdfChartKeikou.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        ActiveChart.Axes(xlCategory).Select
        With Selection
            .MinorTickMark = xlInside
            .TickLabelSpacing = Int(nXSmpNum / 6 + 0.999)
            .TickMarkSpacing = .TickLabelSpacing
        End With
    Else    '97-
        Call CharNoAutoFont
        ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    End If
End Sub

'common chart Font |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & Ticks
Sub SetCommChart(ByVal strGrpName As String, ByVal num As Integer)
Attribute SetCommChart.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.ChartObjects(strGrpName).Activate
    If Not IsVer95() Then    'Excel 97 -
        Call CharNoAutoFont
    End If
    ActiveChart.PlotArea.Interior.ColorIndex = xlNone
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .CrossesAt = 1
        If IsVer95() Then .TickLabelSpacing = Int(num / 6 + 0.999)
        '.TickMarkSpacing = .TickLabelSpacing
        .AxisBetweenCategories = False
        .ReversePlotOrder = False
    End With
End Sub

'
'H12.12.7 LSQ (copied from TK2!commMdl)
'
Sub SortByCol(ByVal zenRge, bDsnt As Boolean)
Attribute SortByCol.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    Set bgnCel = zenRge.Offset(0, 0).Range("A2")
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'H13.2.1 LSQ (from TK3!commMdl)
'
Sub SortByCol_data(ByVal dataRge, ByVal orderCol As Integer, ByVal bDsnt As Boolean)
Attribute SortByCol_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    If orderCol <= 0 Then Exit Sub
    
    Set bgnCel = dataRge(1, orderCol)
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'|fffd|Q|fffd||fffd||242||fffd||fffd|\|fffd|[|fffd|g
'
'H13.2.8 LSQ
Sub SortBy2Col_data(ByVal dataRge, ByVal colA As Integer, ByVal bDsntA As Boolean, _
    ByVal colB As Integer, ByVal bDsntB As Boolean)
Attribute SortBy2Col_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim celA As Range, celB As Range
    Dim orderValA As Integer, orderValB As Integer
    
    If colA <= 0 Or colB <= 0 Then Exit Sub
    
    Set celA = dataRge(1, colA)
    Set celB = dataRge(1, colB)
    
    If bDsntA Then orderValA = xlDescending Else orderValA = xlAscending
    If bDsntB Then orderValB = xlDescending Else orderValB = xlAscending
    
    If IsVer95() < 8 Then    'Excel 95
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'moved from "fsubxx.XLS" 07.1.13 LSQ
'
Function CharNoAutoFont()
    ActiveChart.ChartArea.AutoScaleFont = False
End Function

'===EOF===
Attribute VB_Name = "commCheck"
'=======================================================
' |fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : Check Update User
'
' 2007.1 LSQ
'=======================================================
Option Explicit
Option Private Module

Public GVerMsg As String

Const csTKVer6_INI_Sect As String = "iSTAT"           '|fffd||fffd||fffd||fffd|INI-Section|fffd||fffd|
Const csTKVer6_INI_Key  As String = "VerMsg"          '|fffd||fffd||fffd||fffd|INI-Key|fffd||fffd|
Const MSG_NO_INIFILE As String = "|fffd||fffd||fffd||fffd||fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                                GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
         
#If Win64 Then
Private Declare PtrSafe Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Private Declare Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'
'return TRUE OK else Illegal user
'
Function UpdateUserCheck() As Boolean
    Dim sInI_Path As String
    Dim iRet As Integer
    
    sInI_Path = getPathName()
    iRet = SubUserCheck(sInI_Path)
    
    If iRet > 0 Then    'OK
        UpdateUserCheck = True
    Else                'FAILED
        MsgBox MSG_NO_INIFILE
        UpdateUserCheck = False
    End If
    
End Function
'
'return the length of the KEY VALUE
'
Private Function SubUserCheck(ByVal IniPath As String) As Long
    Dim tmpstr As String
    tmpstr = Space$(1024)
    SubUserCheck = GetIniKey(csTKVer6_INI_Sect, _
                      csTKVer6_INI_Key, _
                      "", tmpstr, 1024, _
                      IniPath & "\" & "MIST01.ini")
    '
    GVerMsg = tmpstr
End Function

'=== EOF ===


Attribute VB_Name = "commChk"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit

'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
Attribute isBookExist.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bk As Workbook
    
    isBookExist = False
    
    If Workbooks.Count = 0 Then Exit Function
    
    For Each bk In Workbooks
        If UCase(Trim(bkName)) = UCase(Trim(bk.Name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    
End Function
'
Function isCellEmpty(ByVal theCell As Range) As Boolean
Attribute isCellEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellEmpty = (theCell = Empty)
End Function
'
Function isCellNotEmpty(ByVal theCell As Range) As Boolean
Attribute isCellNotEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellNotEmpty = (theCell <> Empty)
End Function

'=== EOF ===

Attribute VB_Name = "commConst"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: The Global Constants Definition
'
'2007.1 LSQ
'=================================================
Option Explicit

'--- menu name ---
Public Const menuName_Ysk As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd|"
Public Const GName_Prog As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd| Ver1.0"
Public Const RibbonMenu As String = "MIST_Ribbon.xlam"

'--- book name ---
Public Const GxlaBkGraph1 As String = "MIST_GrpA.xla"
Public Const GxlaBkGraph2 As String = "MIST_GrpB.xla"
Public Const GxlaBkDllR As String = "MIST_DLLR.xla"

'--- workSheet name ---
Public Const G_StName_Info As String = "Info"
'
'--- method name ---
Public Const YSK_SKN As Integer = 1     '|fffd||fffd||fffd||595||fffd||fffd||fffd|
Public Const YSK_SKNZU_A As Integer = 2 '|fffd|U|fffd|z|fffd|}(|fffd||fffd||fffd||315|t|fffd||fffd||fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_SKNZU_B As Integer = 3 '|fffd|U|fffd|z|fffd|}(|fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_EMA As Integer = 4     '|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
Public Const YSK_EPA As Integer = 5     'EPA|fffd|@
Public Const YSK_KK As Integer = 6      '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_JKK As Integer = 7     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_GS As Integer = 8      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_MM As Integer = 9      '|fffd||fffd||fffd||295||fffd||fffd||3d6|@

'--- graph name ---
Public Const GRAPH_NAME_YSKM As String = "YSK_M"
Public Const GRAPH_NAME_EPA1 As String = "EPA_TCSI_TC"
Public Const GRAPH_NAME_EPA2 As String = "EPA_S"
Public Const GRAPH_NAME_EPA3 As String = "EPA_I"
Public Const GRAPH_NAME_KEIKOU As String = "KEIKOU"
Public Const GRAPH_NAME_YOUIN As String = "YOUIN"
Public Const GRAPH_NAME_YSKY As String = "YSK_Y"
Public Const GRAPH_NAME_YSKY_A As String = "YSK_Y_A"
Public Const GRAPH_NAME_SUM As String = "SUM_G"


Public Const YSK_USB_VERSION As Boolean = True                     'for USB version, set this constant to TRUE
'=== EOF ===
Attribute VB_Name = "commDir"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit
'
Sub changeToYSKDir()
Attribute changeToYSKDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(getPathName())
End Sub
'
Sub changeToCurDir()
Attribute changeToCurDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(CurDir())
End Sub
'
Sub changeToDefaultDir()
Attribute changeToDefaultDir.VB_ProcData.VB_Invoke_Func = " \n14"
    changeToPath (Application.DefaultFilePath)
End Sub
'
Sub changeToPath(ByVal pathName As String)
Attribute changeToPath.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim driveName As String
        
    If Trim(pathName) = "" Then Exit Sub 'NullString
        
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'=== EOF ===
Attribute VB_Name = "commDlg"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: DialogBox
'
'03.8 LSQ, PYJ
'=================================================
Option Explicit

Dim f_aDlgSht As DialogSheet
Const YI_MAX_X_NV As Integer = 200      '|fffd|d|fffd||fffd|A|fffd||fffd||fffd||350||fffd||fffd||fffd||fffd||3d0||fffd||fffd||90||fffd||fffd||fffd||fffd|

'dlgID : see YSK_*
'
Private Function getDlgObj(ByVal dlgID As Integer) As DialogSheet
    Dim dlgNameStr As String
    
    Select Case dlgID
        Case YSK_SKN:       dlgNameStr = "|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
        Case YSK_SKNZU_A:   dlgNameStr = "|fffd|U|fffd|z|fffd|}ADlg"
        Case YSK_SKNZU_B:   dlgNameStr = "|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:       dlgNameStr = "|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
        Case YSK_EPA:       dlgNameStr = "EPADlg"
        Case YSK_KK:        dlgNameStr = "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_JKK:       dlgNameStr = "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_GS:        dlgNameStr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_MM:        dlgNameStr = "MonthlyModelDlg"
        Case Else:          dlgNameStr = ""
    End Select
    
    If dlgNameStr = "" Then
        Set getDlgObj = Nothing
    Else
        Set getDlgObj = ThisWorkbook.DialogSheets(dlgNameStr)
    End If
End Function

Function GetDlgInp(nDlgId As Integer) As Boolean
Attribute GetDlgInp.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    
    Set f_aDlgSht = getDlgObj(nDlgId)
    If f_aDlgSht Is Nothing Then
        GetDlgInp = False
        Exit Function
    End If
    
    Application.ScreenUpdating = True
    If nDlgId = YSK_JKK Or nDlgId = YSK_GS Then    'H15.9.25 LSQ
        f_aDlgSht.GroupBoxes("grpXSel").Visible = False
    End If
    Do
    
        bRtn = f_aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetCommDlgInp(nDlgId)
        If bRtn Then bRtn = GetOtherInp(nDlgId)
        
    Loop Until bRtn
    Application.ScreenUpdating = False
    
    'check if there is non data
    If bRtn And g_aDialog.bStopNonData Then
        bRtn = CheckIfAllData(g_aDialog.rgeInp, g_aDialog.bTitle, g_aDialog.bColData)
        If bRtn And (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = CheckIfAllData(g_aDialog.RgeX, g_aDialog.bTitle, g_aDialog.bColData)
        End If
        If Not bRtn Then MsgBox "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^, |fffd||fffd||fffd|~"
    End If
    
    'copy data to a temp sheet
    If bRtn Then
        If (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.RgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel, g_aDialog.dlgJkk.bTimeLag)
            'H15.9.27 LSQ
            'bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.rgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel)
        Else
            Set g_aDialog.rgeInp = moveData(g_aDialog.rgeInp, "Y", g_aDialog.bColData, g_aDialog.bTitle, False, getTempSheet().Range("A1"))
        End If
    End If
    If bRtn Then
        g_aDialog.bColData = True
        g_aDialog.bTitle = True
        g_aDialog.bXSel = False
        g_aDialog.dlgJkk.bTimeLag = False       'Sep 2003, PYJ
    End If
    
    GetDlgInp = bRtn
End Function

'check if all cells in the range are numeric data except the first title row
Private Function CheckIfAllData(ByVal rgeData As Range, ByVal bTitle As Boolean, ByVal bColData As Boolean) As Boolean
    Dim r As Integer, c As Integer, n As Integer
    Dim sht As Worksheet
    Dim rgeDataTmp As Range
    
    Set sht = ActiveSheet
    rgeData.Worksheet.Activate
    r = rgeData.Rows.Count
    c = rgeData.Columns.Count
    '
    If bColData Then
        Set rgeDataTmp = rgeData.Range(Cells(2, 1), Cells(r, c))
        r = r - 1
    Else
        Set rgeDataTmp = rgeData.Range(Cells(1, 2), Cells(r, c))
        c = c - 1
    End If
    n = Application.Count(rgeDataTmp)
    
    CheckIfAllData = forcIIf(n = r * c, True, False)
    
    sht.Activate
End Function

Private Function GetCommDlgInp(nDlgId As Integer) As Boolean
    Dim strTmp As String, rgeTmp As Range, i As Integer
    Dim tmp1, tmp2
    
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    GetCommDlgInp = False
    
    '|fffd||693|I|fffd||3d0||fffd||fffd||348||fffd| or |fffd||fffd||fffd||354||348||fffd|1
    strTmp = f_aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        'MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.rgeInp = rgeTmp
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    g_aDialog.bColData = True '(f_aDlgSht.OptionButtons("optDiret1") = xlOn)
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    g_aDialog.bTitle = True '(f_aDlgSht.OptionButtons("optData1") = xlOn)
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    g_aDialog.bStopNonData = False
    g_aDialog.bStopNonData = (f_aDlgSht.OptionButtons("optStop") = xlOn)
    
    
    If nDlgId = YSK_SKN Then GetCommDlgInp = True: Exit Function        '|fffd||fffd||fffd||595||fffd||fffd||fffd|

    '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|
    g_aDialog.bGraph = False
    If f_aDlgSht.OptionButtons("optGrp2") = xlOn Then g_aDialog.bGraph = True
    
    '|fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
    g_aDialog.nTimeStyle = 0
    For i = 1 To 4
        If f_aDlgSht.OptionButtons("optTime" & i) = xlOn Then
            g_aDialog.nTimeStyle = i
            Exit For
        End If
    Next
    
    '|fffd|J|fffd|n|fffd|N|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editYear").Text
    tmp2 = f_aDlgSht.EditBoxes("editMonth").Text
    g_aDialog.nYearBgn = val(tmp1)
    g_aDialog.nMonth = val(tmp2)
    If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Or g_aDialog.nTimeStyle = 3 Then
        If Not IsNumeric(tmp1) Or g_aDialog.nYearBgn < 1900 Or g_aDialog.nYearBgn > 2100 Then
            MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||314|N|fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i1900|fffd|N|fffd|`2100|fffd|N|fffd|j"
            Exit Function
        End If
        If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Then            '|fffd||fffd||fffd||fffd|
            If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
                MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|P|fffd|Q|fffd|j"
                Exit Function
            End If
        'ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        '    If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
        '        MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30a||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|S|fffd|j"
        '        Exit Function
        '    End If
        End If
    End If
    
    GetCommDlgInp = True
    On Error GoTo 0
End Function

Private Function GetOtherInp(nDlgId As Integer) As Boolean
    Dim nTmp1 As Integer, nTmp2 As Integer, tmp1, tmp2
    Dim i As Integer, bRtn As Boolean
    Dim dTmp As Double
    
    GetOtherInp = False
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    Select Case nDlgId
        Case YSK_SKN:                                            '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
            g_aDialog.dlgSkn.nJudge = forcIIf(f_aDlgSht.OptionButtons("optKentei1") = xlOn, 1, 2)
            tmp1 = f_aDlgSht.EditBoxes("editCompVal").Text
            tmp2 = f_aDlgSht.EditBoxes("editTimeLag").Text
            dTmp = val(tmp1): nTmp2 = val(tmp2)
            If (g_aDialog.dlgSkn.nJudge = 2 And (Not IsNumeric(tmp1) Or dTmp <= -1 Or dTmp >= 1)) Then
                MsgBox "|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            If Not IsNumeric(tmp2) Or nTmp2 < -30 Or nTmp2 > 30 Then
                If Trim(tmp2) = "" Then
                    nTmp2 = 0
                Else
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                    Exit Function
                End If
            End If
            g_aDialog.dlgSkn.dCompVal = dTmp: g_aDialog.dlgSkn.nTimeLag = nTmp2
            bRtn = GetSknDlgInp()
            If Not bRtn Then Exit Function
        'Case YSK_SKNZU_A:   '"|fffd|U|fffd|z|fffd|}ADlg"
        'Case YSK_SKNZU_B:   '"|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:                                            '"|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
            tmp1 = f_aDlgSht.EditBoxes("editCir").Text: nTmp1 = val(tmp1)
            If Not IsNumeric(tmp1) Or nTmp1 < 3 Or nTmp1 > 31 Then
                MsgBox "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            g_aDialog.dlgEma.nSmpNum = nTmp1
        Case YSK_EPA:                                            '"EPADlg"
            For i = 1 To 3
                If f_aDlgSht.OptionButtons("optMod" & i) = xlOn Then
                    g_aDialog.dlgEpa.nMod = i
                    Exit For
                End If
            Next i
        Case YSK_KK:                                             '"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetKkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_JKK:                                            '"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetJkkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_MM:

        Case Else 'YSK_GS:  '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetGsDlgInp()
            If Not bRtn Then Exit Function
    End Select

    Set g_aDialog.rgeOutBgn = GetOutputRgeBgn(f_aDlgSht, g_aDialog.rgeInp)
    If Not (g_aDialog.rgeOutBgn Is Nothing) Then GetOtherInp = True
    'GetOtherInp = GetOutputRgeBgn()    'H15.9.26 LSQ cmt
    On Error GoTo 0
End Function

'|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
'return Nothing on error
Function GetOutputRgeBgn(ByVal aDlgSht As DialogSheet, ByVal rgeDataIn As Range) As Range
Attribute GetOutputRgeBgn.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim strTmp As String, rgeTmp As Range
    Dim shtTmp As Worksheet
    
    Set GetOutputRgeBgn = Nothing
    If aDlgSht.OptionButtons("optOut2") = xlOn Then
        strTmp = aDlgSht.EditBoxes("editOutput").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd|o|fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        Set GetOutputRgeBgn = rgeTmp
    Else
        Set shtTmp = rgeDataIn.Worksheet.Parent.Worksheets.Add
        Set rgeTmp = shtTmp.Range("B2")
        Set GetOutputRgeBgn = rgeTmp
        rgeDataIn.Worksheet.Activate
    End If
End Function

'"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetKkDlgInp() As Boolean
    Dim tmp1, nTmp1 As Integer, i As Integer
    
    GetKkDlgInp = False
    '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("edityskData").Text
    nTmp1 = val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Then
        MsgBox "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgKk.nProdict = nTmp1
    
    '|fffd||fffd||fffd||fffd|l
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optUpper" & i) = xlOn Then
            g_aDialog.dlgKk.nUpLimitFlg = i
            Exit For
        End If
    Next i
    If g_aDialog.dlgKk.nUpLimitFlg = 3 Then
        tmp1 = f_aDlgSht.EditBoxes("editUpper").Text
        If Not IsNumeric(tmp1) Then         'Oct 7 2003, PYJ
            MsgBox "|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        g_aDialog.dlgKk.dUpLimit = val(tmp1)
    End If
    
    'g_aDialog.dlgKk.nSi = 0
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgKk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        If i = 14 Then
            g_aDialog.dlgKk.nmFuncSel(i) = 0
        Else
            If f_aDlgSht.CheckBoxes("chk" & i) = xlOn Then
                g_aDialog.dlgKk.nmFuncSel(i) = 1
            Else
                g_aDialog.dlgKk.nmFuncSel(i) = 0
            End If
        End If
    Next i
    
    GetKkDlgInp = True
End Function

'"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetJkkDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetJkkDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgJkk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    For i = 1 To 5
        If f_aDlgSht.OptionButtons("optMet" & i) = xlOn Then
            g_aDialog.dlgJkk.nMethod = i
            Exit For
        End If
    Next
    If g_aDialog.dlgJkk.nMethod = 5 Then g_aDialog.bGraph = False   '|fffd||fffd||fffd||fffd||fffd||fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
    
    '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTimeLag = (f_aDlgSht.OptionButtons("optLag1") = xlOff)
    
    '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    g_aDialog.dlgJkk.bTesuk = (f_aDlgSht.OptionButtons("optTesukYes") = xlOn)
    
    '|fffd|e|fffd|l
    tmp1 = f_aDlgSht.EditBoxes("editFin").Text
    tmp2 = f_aDlgSht.EditBoxes("editFout").Text
    If Not IsNumeric(tmp1) Or Not IsNumeric(tmp2) Then
        MsgBox "|fffd|e|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgJkk.F_in = val(tmp1)
    g_aDialog.dlgJkk.F_out = val(tmp2)
    
    GetJkkDlgInp = True
End Function

'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetGsDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetGsDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        Set g_aDialog.RgeX = Nothing
    Else
        Set g_aDialog.RgeX = rgeTmp
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    g_aDialog.dlgGs.nMinSmpLmt = 5
    If g_aDialog.nTimeStyle = 1 Then            '|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:48
        g_aDialog.dlgGs.nLmtSmp1 = 24
        g_aDialog.dlgGs.nLmtSmp2 = 36
    ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:16
        g_aDialog.dlgGs.nLmtSmp1 = 12
        g_aDialog.dlgGs.nLmtSmp2 = 12
    ElseIf g_aDialog.nTimeStyle = 3 Then        '|fffd|N|fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:20
        g_aDialog.dlgGs.nLmtSmp1 = 501   '2005.7 PYJ  old:21
        g_aDialog.dlgGs.nLmtSmp2 = 501   '2005.7 PYJ  old:21
    End If
    
    '|fffd||fffd||fffd|d|fffd||693||fffd|-------------------------------
    g_aDialog.dlgEma.nSmpNum = 3
    
    'EPA-------------------------------------
    g_aDialog.dlgEpa.nMod = 1
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|--------------------------------
    For i = 1 To 7
        If f_aDlgSht.OptionButtons("optKK" & i) = xlOn Then
            g_aDialog.dlgGs.nKkMethod = i
            Exit For
        End If
    Next
    'g_aDialog.dlgKk.nSi = 1
    g_aDialog.dlgKk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgKk.nUpLimitFlg = 1  '|fffd||fffd||fffd||fffd|l
    g_aDialog.dlgKk.dUpLimit = 1
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        g_aDialog.dlgKk.nmFuncSel(i) = 0
    Next i
    g_aDialog.dlgKk.nmFuncSel(1) = 1 '|fffd||fffd||fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(3) = 1 '|fffd||fffd||fffd|[|fffd|g
    g_aDialog.dlgKk.nmFuncSel(4) = 1 '|fffd||390||fffd|
    g_aDialog.dlgKk.nmFuncSel(6) = 1 '|fffd|w|fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(8) = 1 '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
    g_aDialog.dlgKk.nmFuncSel(9) = 1 '|fffd|S|fffd||fffd||fffd|x|fffd||fffd||fffd|c
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|----------------------
    g_aDialog.dlgJkk.nMethod = 1      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    g_aDialog.dlgJkk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgJkk.bTimeLag = False '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTesuk = False
    '|fffd|e|fffd|l
    g_aDialog.dlgJkk.F_in = 2#
    g_aDialog.dlgJkk.F_out = 2#
    
    GetGsDlgInp = True
End Function

'get the range from a dialog box input range string
'strRge: "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
Function GetInputRange(ByVal strRge As String, ByRef rgeRtn As Range) As Boolean
Attribute GetInputRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim str1 As String, pos As Integer
    Dim wbk As Workbook, sht As Worksheet
    
    'get the workbook
    pos = InStr(strRge, "]")
    If pos > 2 Then
        str1 = Mid(strRge, 2, pos - 2)
        Set wbk = Workbooks(str1)
    Else
        Set wbk = ActiveWorkbook
    End If
    
    'get the worksheet
    strRge = Mid(strRge, pos + 1)
    pos = InStr(strRge, "!")
    If pos > 1 Then
        str1 = Mid(strRge, 1, pos - 1)
        Set sht = wbk.Worksheets(str1)
    Else
        Set sht = wbk.ActiveSheet
    End If
    
    'get the range
    str1 = Trim(Mid(strRge, pos + 1))
    If str1 = Empty Or str1 = "" Then
        GetInputRange = False
        Exit Function
    End If
    
    Set rgeRtn = sht.Range(FormulaA1_R1C1(str1, True))     'Sep 2003, PYJ
    
    GetInputRange = True
End Function

'copied from SSMCTHR1
'Aug 2003, PYJ
Sub setSmpNo(ByVal num As Long, ByVal toBgn As Range)
Attribute setSmpNo.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct
    Dim toBgnTmp As Range
    
    Set toBgnTmp = toBgn.Range("A1")
    For ct = 1 To num
        toBgnTmp = ct
        'next
        Set toBgnTmp = toBgnTmp.Offset(1, 0)
    Next ct

End Sub

'copied and mdf from SSMCTHR1
'Aug 2003, PYJ
Private Function moveData_YX(yRge As Range, xRge As Range, bColData As Boolean, bTitle As Boolean, bXSel As Boolean, bTimeLag As Boolean) As Boolean
    Dim dtStObj As Worksheet, tmpCel As Range, tmpRge As Range
    Dim yDBgn As Range, xDBgn As Range
    Dim xSmpNum As Integer, xItemNum As Integer, ySmpNum As Integer, smpNum As Integer, noDataNum As Integer
    moveData_YX = False
    '|fffd|f|fffd|[|fffd|^|fffd||fffd| TempSheet|fffd||590||fffd||fffd||fffd|
If False Then 'DEBUG
    Set dtStObj = Workbooks.Add.Worksheets(1)
Else
    Set dtStObj = getTempSheet()
End If
    Set tmpCel = dtStObj.Range("B1")
    Set yRge = moveData_Y(yRge, "Y", bColData, bTitle, False, tmpCel)
    Set xRge = moveData_X(xRge, "X", bColData, bTitle, bXSel, tmpCel.Offset(0, 1))
    If xRge.Rows.Count < 3 Then MsgBox "Lack of samples": Exit Function
    If bTimeLag Then Set xRge = MoveDataTimeLag(xRge)       'Sep 2003, PYJ
    
    ySmpNum = yRge.Rows.Count - 1
    xSmpNum = xRge.Rows.Count - 1
    xItemNum = xRge.Columns.Count
    Set yDBgn = yRge(2, 1)
    Set xDBgn = xRge(2, 1)
    
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    smpNum = xSmpNum
    
    If smpNum < 3 Then MsgBox "Lack of samples": Exit Function
    If xItemNum < 1 Or xItemNum > YI_MAX_X_NV Then MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd||fffd||fffd||fffd||348||348||20a|O|fffd||142||fffd|": Exit Function
    
    xRge.Worksheet.Activate
    
    'delete no data & numbering and sort by Y --- bgn ---
    noDataNum = clearNoData(yDBgn, 1, xDBgn, xItemNum, smpNum)
    
    Set tmpCel = dtStObj.Range("A2")
    Call setSmpNo(smpNum, tmpCel)
    '
    tmpCel.Worksheet.Activate
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(smpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 2, False)   'sort by Y

    ySmpNum = Application.Count(yDBgn.Range("A1:A" & smpNum))
    xSmpNum = Application.Count(xDBgn.Range("A1:A" & smpNum))
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(ySmpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    
    If ySmpNum < smpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(smpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 3, False)   'sort by 1st col of X data, so that blanks will get to bottom
    End If
    If ySmpNum < xSmpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(xSmpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    End If
    
    Set yRge = yRge.Range("A1:A" & ySmpNum + 1)
    Set xRge = xRge.Range(Cells(1, 1), Cells(xSmpNum + 1, xItemNum))
    moveData_YX = True
End Function

'Sep 2003, PYJ
Private Function MoveDataTimeLag(ByVal RgeX As Range) As Range
    Dim RgeTimeLag As Range, rge1 As Range
    Dim nItem As Integer, nSmp As Integer
    Dim i As Integer, nMinTimeLag As Integer, nTimeLag As Integer
    
    nItem = RgeX.Columns.Count
    nSmp = RgeX.Rows.Count
    nMinTimeLag = nSmp
    Set RgeTimeLag = RgeX.Range("A2")
    Set rge1 = RgeX.Range("A3:A" & nSmp)
    For i = 1 To nItem
        nTimeLag = val(RgeTimeLag(1, 1))
        If nTimeLag < nMinTimeLag Then nMinTimeLag = nTimeLag
        rge1.Copy rge1.Offset(nTimeLag - 1, 0)
        If nTimeLag > 0 Then
            RgeTimeLag.Range("A1:A" & nTimeLag) = ""
        End If
        Set RgeTimeLag = RgeTimeLag.Offset(0, 1)
        Set rge1 = rge1.Offset(0, 1)
    Next i
    Set MoveDataTimeLag = RgeX.Range("A1:" & nTo26Str(nItem) & nSmp - 1 + nMinTimeLag)
End Function

Private Function GetSknDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetSknDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    GetSknDlgInp = True
End Function

'=== EOF ===
Attribute VB_Name = "commMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'02.7.10 LSQ mdf
'=================================================
Option Explicit

Sub changeToSSDir()
    Dim pathName As String, driveName As String
        
    pathName = getPathName()
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'|fffd|N|fffd||fffd|path|fffd||fffd||fffd||302||fffd||fffd||64fe||fffd||fffd||fffd||fffd|: |fffd||14c||fffd||242||fffd|"\"|fffd|}|fffd|[|fffd|N|fffd||fffd||fffd||202||fffd||fffd|B
'
Function getPathName() As String
Attribute getPathName.VB_ProcData.VB_Invoke_Func = " \n14"
    getPathName = ThisWorkbook.Path
End Function

Function getRangeInfo(ByVal rgestr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = Range(rgestr)
    ceName = RgeObj.Address
    stName = RgeObj.Worksheet.Name
    bkName = RgeObj.Worksheet.Parent.Name
        
    getRangeInfo = IIf(Err.Number <> 0, False, True)
    
    On Error GoTo 0
    
'--- the following are not used ---
'07.1.29 LSQ
#If False Then
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgestr
    
    bkName = ActiveWorkbook.Name    'default
    pos = InStr(wkstr, "]")
    
#If True Then  '07.1.29; 05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.Name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True
#End If

End Function
'
'
Sub setZoom()
Attribute setZoom.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim flg
    flg = getResolutionFlag()
    If flg < 3 Then ActiveWindow.Zoom = 75 Else ActiveWindow.Zoom = 100
End Sub
'
'1=screen display true
'2=screen display false
'0=not specified
'
'H14.7.9 LSQ
Sub Msgbox_ScrnOption(ByVal msgStr As String, Optional ByVal flgScrn)
Attribute Msgbox_ScrnOption.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim savScrn As Boolean
    
    If UCase(TypeName(flgScrn)) = "ERROR" Then flgScrn = 1
    savScrn = Application.ScreenUpdating
    
    If flgScrn = 1 Then Application.ScreenUpdating = True
    If flgScrn = 2 Then Application.ScreenUpdating = False
    
    MsgBox msgStr
    
    Application.ScreenUpdating = savScrn
    
End Sub

Function nTo26Str(ByVal n As Integer) As String
Attribute nTo26Str.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim a1 As Integer, a2 As Integer
    
    nTo26Str = ""
    If Not (n >= 1 And n <= 256) Then Exit Function 'ERROR
    n = n - 1   '0 to 255
    
    a1 = Int(n / 26)    'Mar 2003, PYJ  Old:WorksheetFunction.Floor(n / 26, 1)
    a2 = n Mod 26
    
    If a1 > 0 Then
        nTo26Str = nTo26Str & Chr(Asc("A") + a1 - 1)
    End If
    nTo26Str = nTo26Str & Chr(Asc("A") + a2)
    
End Function
'
'
'transfer formula string from A1 format to R1C1 format or vise verse
'return the formula string
'
'bOutA1: True--Get A1 format; False--Get R1C1 format
'Sep 2003, PYJ
Function FormulaA1_R1C1(ByVal strFormulaIn As String, Optional ByVal bOutA1) As String
Attribute FormulaA1_R1C1.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nStyleFrom As Integer, nStyleTo As Integer
    Dim bErr As Boolean
    
    If UCase(TypeName(bOutA1)) = "ERROR" Then bOutA1 = False
    
    If bOutA1 Then
        nStyleFrom = xlR1C1
        nStyleTo = xlA1
    Else
        nStyleFrom = xlA1
        nStyleTo = xlR1C1
    End If
    '
    On Error Resume Next
    
    FormulaA1_R1C1 = Application.ConvertFormula( _
                Formula:=strFormulaIn, _
                fromReferenceStyle:=nStyleFrom, _
                toReferenceStyle:=nStyleTo)
    
    If Err <> 0 Then    'Oct 2003, PYJ  old:bErr
        'for all version; Err.Number <> 0 & Err.Clear can not be used in Excel 95
        'Err can be cleared afterstatement "On Error GoTo 0"
        FormulaA1_R1C1 = strFormulaIn
    End If
    
    On Error GoTo 0
    
End Function
'
Sub adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
Attribute adjustMinMax.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = decNumKeta(maxV - minV)
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Round(max, keta)
    minV = Application.Round(min, keta)
End Sub

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function
'
Function forcIIf(ByVal bCond As Boolean, ByVal valForTrue, ByVal valForFalse)
Attribute forcIIf.VB_ProcData.VB_Invoke_Func = " \n14"
    If bCond Then
        forcIIf = valForTrue
    Else
        forcIIf = valForFalse
    End If
   
End Function
'
'nWidth: chart width, if nWidth=0 used the width of rgeChart
'nRowNum: row number the chart will occupied, if nRowNum=0 the row number of rgeChart will be used
'nXDist: the distance between chart and rgeChart left edge
'return row number used
'
'H15.10.1 LSQ mdf
Function COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(ByVal rgeChart As Range, ByVal rgeCate As Range, ByVal rgeData As Range, _
        ByVal strTitle As String, ByVal strXTitle As String, Optional ByVal strGrpName, _
        Optional ByVal nWidth, Optional ByVal nRowNum, _
        Optional ByVal nXDist, Optional ByVal strpara, Optional ByRef cht As Chart) As Integer
Attribute COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim dXPos As Double, dYPos As Double, dHeight As Double
    Dim dMinVal As Double, dMaxVal As Double
    Dim num As Integer
    Dim tmpRge As Range
    Dim bHasLegend As Boolean
    Dim dict As Object
    Dim nColNum As Long
    
    If UCase(TypeName(strGrpName)) = "ERROR" Then strGrpName = ""
    If UCase(TypeName(nWidth)) = "ERROR" Then nWidth = 400
    If UCase(TypeName(nRowNum)) = "ERROR" Then nRowNum = 15
    If UCase(TypeName(nXDist)) = "ERROR" Then nXDist = 10
    If UCase(TypeName(strpara)) = "ERROR" Then strpara = "HasLegend=1&ColNum=0"
    Set dict = Comm_SetDict(strpara)
    bHasLegend = IIf(dict("HasLegend") = 1, True, False)
    nColNum = dict("ColNum")
    Set dict = Nothing
    rgeChart.Worksheet.Activate
    dXPos = rgeChart.Left + nXDist
    dYPos = rgeChart.Top
    If nWidth = 0 Then nWidth = rgeChart.Width
    If nRowNum = 0 Then nRowNum = rgeChart.Rows.Count
    dHeight = rgeChart.Range("A1:A" & nRowNum).height
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||1c9||fffd|
    ActiveSheet.ChartObjects.Add(dXPos, dYPos, nWidth, dHeight).Select
       
    ActiveChart.ChartWizard Source:=Union(rgeCate, rgeData), Gallery _
        :=xlLine, Format:=2, PlotBy:=xlColumns, CategoryLabels:=1, _
        SeriesLabels:=1, HasLegend:=IIf(bHasLegend, 1, 0), title:=strTitle, _
        CategoryTitle:=strXTitle, ValueTitle:="", ExtraTitle:=""
    For num = 1 To rgeData.Areas.Count
        Set tmpRge = rgeData.Areas(num)
        ActiveChart.SeriesCollection(num).Name = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge(1, 1).Address)
        Set tmpRge = tmpRge(2, 1).Resize(tmpRge.Rows.Count - 1, 1)
        ActiveChart.SeriesCollection(num).Values = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge.Address)
        ActiveChart.SeriesCollection(num).XValues = "='" & rgeCate.Worksheet.Name & "'!" & Comm_toXlRCstr(rgeCate.Range("A2").Resize(rgeCate.Rows.Count - 1, 1).Address)
    Next num
    
    If nColNum <> 0 Then Call Comm_setChartPosSize(ActiveChart.Parent, rgeChart, nRowNum, nColNum)
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd|t|fffd||fffd|
    num = ActiveSheet.ChartObjects.Count
    If Trim(strGrpName) <> "" Then
        ActiveSheet.ChartObjects(num).Name = strGrpName
    Else
        strGrpName = ActiveSheet.ChartObjects(num).Name
    End If
    
    '|fffd|I|fffd|[|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||752||fffd|
    num = rgeCate.Rows.Count - 1
    Call SetCommChart(strGrpName, num)     'Oct 2003, PYJ  old:
    
    '|fffd|w|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.TickLabels.Orientation = xlHorizontal
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .MajorTickMark = xlInside
        .MinorTickMark = xlInside
        .TickLabelPosition = xlNextToAxis
    End With
    
    '|fffd||fffd||fffd||fffd|max & min|fffd||752||fffd|
    dMaxVal = Application.max(rgeData)
    dMinVal = Application.min(rgeData)
    Call adjustMinMax(dMinVal, dMaxVal)
    ActiveChart.Axes(xlValue).Select
    With ActiveChart.Axes(xlValue)
        .MinimumScale = dMinVal
        .MaximumScale = dMaxVal
        '.MinimumScaleIsAuto = True
        '.MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .ScaleType = False
    End With
    
    '|fffd||690||fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    With ActiveChart.Axes(xlCategory)
        .HasMajorGridlines = False
        .HasMinorGridlines = False
    End With
    With ActiveChart.Axes(xlValue)
        .HasMajorGridlines = True
        .HasMinorGridlines = False
    End With
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    With Selection.Border
        .ColorIndex = 1
        .Weight = xlHairline
        .LineStyle = xlDot
    End With
    
    '|fffd||fffd||516||682||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||381|A|fffd||502||242||fffd||fffd||fffd|
    num = ActiveChart.SeriesCollection.Count
    If num >= 2 Then
        ActiveChart.SeriesCollection(2).Select
        With Selection.Border
            .ColorIndex = 3
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
    End If
    ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    
    Set cht = ActiveChart
    
    '|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||308||292|u
    rgeChart.Worksheet.Activate
    rgeChart.Range("A1").Select
    COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t = nRowNum
End Function

'--- mdf from SRKMain.xla --- Begin --- 07.1.13

Function WorkBookOpen(ByVal fName As String, Optional ByVal bReadOnly As Boolean = True) As Workbook
    Dim bkObj As Workbook
    On Error Resume Next
    'Check
    If isBookExist(fName) Then
        Set WorkBookOpen = Workbooks(fName)
        Exit Function
    End If
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    Workbooks.Open Filename:=fName, updatelinks:=1, ReadOnly:=bReadOnly
    
    Application.ScreenUpdating = True
    
    Set bkObj = Workbooks(fName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(fName)
        Exit Function
    End If
    
    Set WorkBookOpen = bkObj
    On Error GoTo 0
End Function

Sub WorkBookClose(ByVal fName As String)
    Application.DisplayAlerts = False
    
    Workbooks(fName).Close savechanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

'=== EOF ===

Attribute VB_Name = "commMove"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2002.1 by LSQ
'copied from SSSMCTHR1
'=================================================
Option Explicit

Const STNAME_WORK As String = "Temp"
'
Function getTempSheet(Optional ByVal no) As Worksheet
Attribute getTempSheet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim stObj As Worksheet
    
    If UCase(TypeName(no)) = "ERROR" Then no = 0
    
    If no <= 0 Then
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK)
    Else
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK & no)
    End If
    
    stObj.Cells.Clear   'stObj.Cells.Delete Shift:=xlUp
    
    Set getTempSheet = stObj
End Function
'
Function isDataType(ByVal thisCell As Range) As Boolean
Attribute isDataType.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tname As String
    
    tname = UCase(TypeName(thisCell.Value))
    If tname = "DOUBLE" Or tname = "INTEGER" Then
        isDataType = True
    Else
        isDataType = False
    End If
End Function
'
'H14.11.15 LSQ add
Function isSelFlag(ByVal theVal As Variant) As Boolean
Attribute isSelFlag.VB_ProcData.VB_Invoke_Func = " \n14"
    If val(theVal) <> 0 Then
        isSelFlag = True
    Else
        isSelFlag = False
    End If
    
End Function

'
'bTitleExt : if TRUE  -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(if bTitle=TRUE) else |fffd||202||fffd||fffd|B
'            if FALSE -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|K|fffd||fffd||fffd||202||fffd||fffd|B
'
'H14.1.7 LSQ
Private Function getDataRange_Comm(ByVal RgeObj As Range, _
    ByVal bCol As Boolean, ByVal bTitle As Boolean, ByVal bXSel As Boolean, _
    Optional ByVal bTitleExt) As Range
    
    Dim ct
    Dim bgnCel As Range, xSelRge As Range, tmpRge As Range
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    If UCase(TypeName(bTitleExt)) = "ERROR" Then bTitleExt = False
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    Set svStObj = ActiveSheet
    
    If bCol Then
        If bTitle Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bTitleExt Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bXSel Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
    Else
        If bTitle Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bTitleExt Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bXSel Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
    End If
    
    RgeObj.Worksheet.Activate
    
    Set getDataRange_Comm = Nothing 'Init
    If rwNum > 0 And clNum > 0 Then
        If bXSel = False Then
            Set getDataRange_Comm = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
        Else
            If bCol Then
                Set xSelRge = bgnCel.Offset(-1, 0).Range(Cells(1, 1), Cells(1, clNum))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
            Else
                Set xSelRge = bgnCel.Offset(0, -1).Range(Cells(1, 1), Cells(rwNum, 1))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
            End If
            '
            For ct = 1 To forcIIf(bCol, clNum, rwNum)
                If isSelFlag(xSelRge(ct)) Then
                    If getDataRange_Comm Is Nothing Then
                        Set getDataRange_Comm = tmpRge
                    Else
                        Set getDataRange_Comm = Union(getDataRange_Comm, tmpRge)
                    End If
                End If
                
                'next
                If bCol Then Set tmpRge = tmpRge.Offset(0, 1) Else Set tmpRge = tmpRge.Offset(1, 0)
            Next ct
        End If
    End If
    
    svStObj.Activate

End Function
'
'H12.11.14 LSQ
Function getDataRange(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel)
End Function
'
'H12.11.14 LSQ
Function getDataRange_SmpTitle(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bSmpTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange_SmpTitle.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange_SmpTitle = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel, bSmpTitle)
End Function
'
'H12.11.14 LSQ
'
Sub getSmpNum_ItemNum_FromRge(RgeObj As Range, bCol As Boolean, bTitle As Boolean, bTitleExt As Boolean, _
    ByRef smpNum As Variant, ByRef ItemNum As Variant)
Attribute getSmpNum_ItemNum_FromRge.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer

    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    If bCol Then   '|fffd||fffd||fffd||fffd||fffd|
        ItemNum = clNum
        smpNum = rwNum
    Else
        ItemNum = rwNum
        smpNum = clNum
    End If

    If bTitle Then
        smpNum = smpNum - 1
        '
        If bTitleExt Then
            ItemNum = ItemNum - 1
        End If
    End If
    
End Sub

'
'H12.11.2 LSQ
'
Function getTitleName(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, ct As Integer) As String
Attribute getTitleName.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    
    If ct <= 0 Then ct = 1
    
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    If bTitle Then
        If bOptCol Then
            getTitleName = bgnCel.Offset(0, ct - 1).Text
        Else
            getTitleName = bgnCel.Offset(ct - 1, 0).Text
        End If
    Else
        getTitleName = "Item" & ct
    End If
End Function
'
'H14.1.11 LSQ
'
Function getTitleRange(RgeObj As Range, bOptCol As Boolean) As Range
Attribute getTitleRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    Set svStObj = ActiveSheet
    
    RgeObj.Worksheet.Activate
    If bOptCol Then
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
    Else
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
    End If
    
    svStObj.Activate
End Function
'
'H14.1.17 LSQ
Function getXSelRange(ByVal RgeObj As Range, ByVal bOptCol As Boolean, ByVal bTitle As Boolean) As Range
Attribute getXSelRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tmpRge As Range
    If bOptCol Then
        If bTitle Then Set tmpRge = RgeObj.Offset(1, 0) Else Set tmpRge = RgeObj
    Else
        If bTitle Then Set tmpRge = RgeObj.Offset(0, 1) Else Set tmpRge = RgeObj
    End If
    
    Set getXSelRange = getTitleRange(tmpRge, bOptCol)
End Function
'
'For X variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.1.17 by LSQ
'
Function moveData_X(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData_X.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bXSel)
    If tmpRge Is Nothing Then
        Set moveData_X = Nothing
        Exit Function
    End If
    '
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_X = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'For Y variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'bHasSelRow :     X Select Row Ari/Nasi
'bSelRowValid :   if bHasSelRow = Ari, the Select Row Valid or Invalid; if bHasSelRow = Nasi, not used.
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.2.25 by LSQ
'
Function moveData_Y(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bHasSelRow As Boolean, outBgn As Range, Optional bSelRowValid) As Range
Attribute moveData_Y.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer, rwNum, clNum, tmpi As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    If UCase(TypeName(bSelRowValid)) = "ERROR" Then bSelRowValid = False
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    If (bHasSelRow And bSelRowValid = False) Then
        RgeObj.Worksheet.Activate
        
        rwNum = RgeObj.Rows.Count
        clNum = RgeObj.Columns.Count
        tmpi = forcIIf(bTitle, 2, 1)
        If bCol Then
            rwNum = rwNum - tmpi
            If rwNum > 0 Then
                Set tmpRge = RgeObj.Offset(tmpi, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        Else
            clNum = clNum - tmpi
            If clNum > 0 Then
                Set tmpRge = RgeObj.Offset(0, tmpi).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        End If
    Else
        Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bHasSelRow)
    End If
    
    If tmpRge Is Nothing Then
        Set moveData_Y = Nothing
        Exit Function
    End If
    '
    tmpRge.Worksheet.Activate
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_Y = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'return no data number
'02.2.25 LSQ
'
Function clearNoData(ByVal yDataBgn As Range, ByVal yNum As Integer, ByVal xDataBgn As Range, ByVal xNum As Integer, _
    ByVal smpNum As Variant)
Attribute clearNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i, ct
    Dim yRge As Range, xRge As Range
    
    yDataBgn.Worksheet.Activate
    Set yRge = yDataBgn.Range(Cells(1, 1), Cells(1, yNum))
    
    xDataBgn.Worksheet.Activate
    Set xRge = xDataBgn.Range(Cells(1, 1), Cells(1, xNum))
    
    ct = 0
    For i = 0 To (smpNum - 1)
        If Application.Count(xRge.Offset(i, 0)) <> xNum Then
            yRge.Offset(i, 0) = ""
            xRge.Offset(i, 0) = ""
            ct = ct + 1
        End If
    Next i
    
    clearNoData = ct
    
End Function
'
'|fffd||fffd||fffd||fffd||fffd|/|fffd|s|fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^; |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||202||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'copied from SSSMCTH2, Aug 2003, PYJ
Function moveData(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct As Integer, smpNum As Long, ItemNum As Integer
    Dim toBgn As Range, tmpRge As Range, c As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    Set toBgn = outBgn
    
    'Title set
    Set tmpRge = getTitleRange(RgeObj, bCol)
    
    If bTitle Then
        For Each c In tmpRge
            toBgn = c
            Set toBgn = toBgn.Offset(0, 1)
        Next c
    Else
        If tmpRge.Count = 1 Then
            toBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        Else
            For ct = 1 To tmpRge.Count
                toBgn = basItemName & ct
                Set toBgn = toBgn.Offset(0, 1)
            Next ct
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange(RgeObj, bCol, bTitle, bXSel)
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    Set moveData = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'H13.3.29 LSQ : for Mac2001
'
Function Power(a As Variant, n As Integer) As Double
Attribute Power.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer
    
    Power = 1#
    For i = 1 To n
        Power = Power * a
    Next i
    
End Function
'
Function SpaceAri(ByVal x As Range) As Boolean
Attribute SpaceAri.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer, j As Integer
    Dim smpNum As Integer, ItemNum As Integer
    
    smpNum = x.Rows.Count
    ItemNum = x.Columns.Count
    SpaceAri = False
    For i = 1 To smpNum
        For j = 1 To ItemNum
            If IsEmpty(x.Offset(0, 0).Cells(i, j)) Then
                SpaceAri = True
                Exit Function
            End If
        Next j
    Next i
End Function

Function TotalNumericData(ByVal x As Range) As Long
Attribute TotalNumericData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim n As Long
    n = Application.Count(x)
    TotalNumericData = n
End Function
'
'H14.11.12 LSQ add
Function HasNoData(ByVal x As Range) As Boolean
Attribute HasNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    HasNoData = False
    If x Is Nothing Then Exit Function
    
    If Application.Count(x) <> x.Rows.Count * x.Columns.Count Then
        HasNoData = True
    End If
    
End Function

Function CheckEmptyData(x As Range) As Long
Attribute CheckEmptyData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nData As Long, tmpCel As Range, ci As Long, ct As Long
    Dim smpNum As Long, ItemNum As Integer
    
    ItemNum = x.Columns.Count
    smpNum = x.Rows.Count
    
    For ci = 1 To ItemNum
        nData = 0
        For ct = 2 To smpNum
            Set tmpCel = x(ct, ci)
            If Not IsEmpty(tmpCel) Then
                nData = nData + 1
             End If
        Next ct
        If nData < 3 Then
            CheckEmptyData = nData
            Exit Function
        End If
    Next ci
    '
    CheckEmptyData = nData
End Function

'=== EOF ===

Attribute VB_Name = "commStruc"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28d|\|fffd||fffd||fffd||fffd|
'
'Aug 2003, PYJ
'=================================================
Option Explicit

'|fffd|X|fffd||fffd||fffd||fffd||fffd||34a||590||fffd||fffd||fffd||fffd|w|fffd||fffd||310||fffd|
Public Const g_nKkFunNum As Integer = 15

'|fffd||fffd||fffd||595||fffd||fffd||fffd|
Type DEFDlgSkn
    nJudge As Integer       '|fffd||fffd||fffd||fffd|: 1--|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|; 2--|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    dCompVal As Double      '|fffd||fffd|r|fffd|l(0|fffd|`1)
    nTimeLag As Integer     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
End Type

'|fffd||fffd||fffd|d|fffd||693||fffd|
Type DEFDlgEma
    nSmpNum As Integer
End Type

'EPA
Type DEFDlgEpa
    nMod As Integer         '|fffd||fffd||fffd|f|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd||fffd|@; 3--|fffd||fffd||fffd|@
End Type

'|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgKk
    nProdict As Integer                 '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    nUpLimitFlg As Integer              '|fffd||fffd||fffd||fffd|l: 1--|fffd||fffd||fffd||fffd||fffd|P; 2--|fffd||fffd||fffd||fffd||fffd|Q; 3--|fffd||fffd||fffd||fffd|
    dUpLimit As Double
    'nSi As Integer
    nSuitei As Integer                  '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nmFuncSel(1 To g_nKkFunNum) As Integer          '|fffd||590||fffd||fffd||fffd||fffd||311|I|fffd||fffd||fffd|i|fffd|U|fffd||fffd||fffd||702||151|I|fffd||fffd||fffd||81|j: 1--Selected; 0--not
End Type

'|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgJkk
    nSuitei As Integer      '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nMethod As Integer      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    bTimeLag As Boolean     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l: False--|fffd|w|fffd||fffd||202||fffd|; True--|fffd|P|fffd|s|fffd|i|fffd||fffd|j|fffd||fffd|
    bTesuk As Boolean       '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    F_in As Double
    F_out As Double
End Type

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgGs
    nKkMethod As Integer    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    nMinSmpLmt As Integer   ' = 5
    nMaxSmpLmt As Integer   '|fffd||fffd||fffd||fffd|--48; |fffd|l|fffd||fffd||fffd||fffd|--16; |fffd|N|fffd||fffd|--10
    nLmtSmp1 As Integer     '|fffd||fffd||fffd||fffd|--24; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
    nLmtSmp2 As Integer     '|fffd||fffd||fffd||fffd|--36; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
End Type

Type DEFDialog
    '|fffd||fffd||fffd||282||30e|w|fffd||fffd||fffd||fffd|e
    rgeInp As Range         '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    rgeOutBgn As Range
    
    RgeX As Range           '|fffd||fffd||fffd||fffd||fffd||3d0||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    bXSel As Boolean        '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|: True--|fffd||fffd||fffd||fffd|; False--|fffd||202||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    
    bColData As Boolean     '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|: True--|fffd||fffd||fffd||fffd||fffd|; False--|fffd|s|fffd||fffd||fffd||fffd|
    bTitle As Boolean       '1|fffd|s|fffd|i|fffd||fffd|j|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||fffd|: True--|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd|; False--|fffd|f|fffd|[|fffd|^

    bStopNonData As Boolean '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|: True--|fffd||fffd||fffd|~; False--|fffd||fffd||fffd|O|fffd||fffd||fffd||111||fffd||fffd|s; for |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| only now
    
    'not for |fffd||fffd||fffd||595||fffd||fffd||fffd|/|fffd|U|fffd|z|fffd|}
    bGraph As Boolean
    nTimeStyle As Integer   '|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd|l|fffd||fffd||fffd||fffd|; 3--|fffd|N|fffd||fffd|; 4--No.
    nYearBgn As Integer
    nMonth As Integer
    
    dlgSkn As DEFDlgSkn     '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg
    dlgEma As DEFDlgEma     '|fffd||fffd||fffd|d|fffd||693||fffd|Dlg
    dlgEpa As DEFDlgEpa     'EPADlg
    dlgKk As DEFDlgKk       '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgJkk As DEFDlgJkk     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgGs As DEFDlgGs       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg
End Type
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph1
    startShtName As String

    tateDataRge As String
    yokoDataRge As String
    outRge As String
    namerge As String
    
    flgName As Integer      '1=Yes 2=No
    mjNum As Integer        '
    ftSize As Integer       '
    
    flgSkn As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data
End Type
'
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph2
    startShtName As String
    
    dataRge As String
    tateDataRge As String
    yokoDataRge As String
    outRge As String
    
    flgDataType As Integer  '1=Matrix 2=Group
    flgSkn As Integer       '1=Yes 2=No
    flgMark As Integer      '1=Yes 2=No
    flgPval As Integer      '1=Yes 2=No
    flgKK As Integer        '1=Yes 2=No
    
    wakuRow As Integer
    wakuCol As Integer
    flgKan As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data

End Type


Public g_aDialog As DEFDialog

'=== EOF ===
Attribute VB_Name = "dateChk"
'
Option Private Module
Option Explicit

#If Win64 Then
Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

Const MSG_CHK_001 As String = "ISTAT.INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B" & vbCrLf & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* EXCEL|fffd|\|fffd||fffd||fffd||313||fffd||fffd|t|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|
'* EXCEL|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
'******************************************
Function user_date_chk() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    sTemp1 = Chr(13)
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    user_date_chk = False 'init
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        MsgBox MSG_CHK_001
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        If (IsDate(sDate1) = False) Then
            MsgBox MSG_CHK_001
            Exit Function
        End If
    
        vDate1 = CDate(sDate1)
        vDate2 = Date
        If (vDate1 < vDate2) Then
            MsgBox "" & GName_Prog & "|fffd||30e||fffd||fffd|p|fffd||fffd||fffd||fffd|[" & sDate1 & "]|fffd||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||403|A|fffd|C|fffd|X|fffd|^|fffd|b|fffd|g|fffd|u|fffd|\|fffd|t|fffd|g|fffd|E|fffd|G|fffd|A|fffd|T|fffd|||fffd|[|fffd|g|fffd|S|fffd||fffd||fffd|v|fffd||702||142||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd|d|fffd|b|fffd|@03-3315-7637"
            Exit Function
        End If
    End If
    
    user_date_chk = True 'init
End Function


'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* |fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'******************************************
Function getTaikouIniStr() As String
    Dim sGetBuffer$
    Dim lRet As Long
    Dim iRet As Long
    Dim sTemp1$
    Dim sIniFileName As String
    sGetBuffer$ = String$(300, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|

    sGetBuffer$ = getPathName() & "\"   'old = gsPrgPath
    sIniFileName$ = sGetBuffer$ & "ISTAT.INI"
    iRet = 0
    
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "MyDate", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName$)
    sTemp1 = Left$(sGetBuffer$, InStr(sGetBuffer$, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        '11.12.2 LSQ cmt
        'MsgBox MSG_CHK_001
        'End
    End If
    
    getTaikouIniStr = sTemp1
End Function

Function StringDecode(ByVal sInpStr As String, sOutStr As String) As Integer
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|sOutStr|fffd||255||502||fffd|
    Dim iLengs, iCnt1, iMojiCode0, iMojiCode1, iMojiCode2 As Integer
    Dim vKanjiCode  'As Integer
    Dim iKanjiFlg As Integer
    Dim sMoji, sTempStr As String
    Dim iKanji As Integer
    Dim dTemp1 As Double
    On Error GoTo ErrorHandler:
    sOutStr = ""
    iLengs = Len(sInpStr)
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    iKanjiFlg = 0   '|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    For iCnt1 = 1 To iLengs Step 2
        sMoji = Mid$(sInpStr, iCnt1, 1)         '|fffd|P|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode1 = Asc(sMoji) - &H40
        sMoji = Mid$(sInpStr, iCnt1 + 1, 1)
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode2 = Asc(sMoji) - &H40
        iMojiCode0 = iMojiCode1 * 16 + iMojiCode2
        
        '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|P|fffd|o|fffd|C|fffd|g|fffd||314||fffd||fffd||fffd|
        If (iMojiCode0 >= &H81 And iMojiCode0 <= &H9F) Or (iMojiCode0 >= &HE0 And iMojiCode0 <= &HFC) Then
            If iKanjiFlg = 0 Then   '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|P|fffd|o|fffd|C|fffd|g|fffd||fffd|
                iKanjiFlg = 1
                vKanjiCode = iMojiCode0 * 256
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        Else
            If iKanjiFlg = 0 Then   'ASC|fffd|R|fffd|[|fffd|h
                sOutStr = sOutStr + Chr$(iMojiCode0)
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        End If
    Next iCnt1
    StringDecode = True
    Exit Function
ErrorHandler:
    StringDecode = False
    Exit Function
End Function

Function StringEncode(ByVal sInpStr As String, sOutStr As String) As Integer
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sOutStr|fffd||255||502||fffd|
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iLengs, iCnt1, iMojiCode As Integer
    Dim sMoji, sTempStr As String
    
    sOutStr = ""
    sTempStr = ""
    iLengs = Len(sInpStr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sInpStr, iCnt1, 1)
        iMojiCode = Asc(sMoji)
        sTempStr = sTempStr + Hex$(iMojiCode)
    Next iCnt1
  
    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    iLengs = Len(sTempStr)
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sTempStr, iCnt1, 1)    '|fffd|l|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        Select Case sMoji
            Case "A"
                iMojiCode = 10 + &H40
            Case "B"
                iMojiCode = 11 + &H40
            Case "C"
                iMojiCode = 12 + &H40
            Case "D"
                iMojiCode = 13 + &H40
            Case "E"
                iMojiCode = 14 + &H40
            Case "F"
                iMojiCode = 15 + &H40
            Case Else   '0-9|fffd||310||fffd||fffd||fffd||fffd||30e||fffd|
                iMojiCode = val(sMoji) + &H40       '|fffd|o|fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|40|fffd||fffd||fffd||fffd|
        End Select
        sOutStr = sOutStr + Chr$(iMojiCode) '|fffd|X|fffd||243|L|fffd||fffd||fffd||fffd||fffd|N|fffd|^|fffd||255||3ca||fffd|
    Next iCnt1

End Function

Function isTrialVer() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    If YSK_USB_VERSION = False Then
'**********************************
    isTrialVer = True
    Exit Function
'**********************************
    End If
    
    'init
    isTrialVer = False
    sTemp1 = Chr(13)
    
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    If sIniStr = "" Then
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        isTrialVer = True
        Exit Function
    End If
    
    'return error free
    isTrialVer = False

End Function
'=== EOF ===

Attribute VB_Name = "dispMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Error Display
'
'1997.7.17 by SJY
'2002.7.10 LSQ mdf
'=================================================
Option Explicit

Sub Error_Display(no)
Attribute Error_Display.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim b_code As Integer
    Dim msgStr As String
    
    If no = 0 Then Exit Sub
    
    b_code = no - (CInt(no / 100)) * 100
    Select Case b_code
        Case 1
            msgStr = "[ERROR:" & no & "]" & "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|I"
        Case 2
            msgStr = "[ERROR:" & no & "]" & "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 3
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 4
            msgStr = "[ERROR:" & no & "]" & "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 5
            msgStr = "[ERROR:" & no & "]" & "|fffd|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 6
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 7
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd||142||fffd||fffd||9340||fffd||690||fffd||fffd||341|A|fffd|R|fffd|O|fffd||fffd||fffd||688||213||fffd||fffd||142||fffd||fffd|I"
        Case 8
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b7||fffd||9340||fffd||690||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 9
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 10
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 11
            msgStr = "[ERROR:" & no & "]" & "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 12
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd|r|fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 13
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||310||fffd||fffd||341|A|fffd|U|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 14
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||34e|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 15
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 16
            msgStr = "[ERROR:" & no & "]" & "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 17
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 18
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd||fffd||341|A|fffd|Q|fffd|O|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 19
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd|p|fffd|s|fffd||42a8d||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 20
            msgStr = "[ERROR:" & no & "]" & "|fffd||3d0||fffd||fffd||fffd||fffd||742||151||fffd||fffd||582||30d||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||30e||fffd|@|fffd||142||349||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 21
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd| F-out|fffd||fffd||83ec||fffd||fffd||fffd||fffd||fffd|I"
        Case 22
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 23
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 24
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 25
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||fffd||50ab||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 26
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||835e||fffd||795||3d0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 27
            msgStr = "[ERROR:" & no & "]" & "|fffd|[|fffd||fffd||fffd||702||fffd||fffd||355||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|@|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 28
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 29
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||308||a554||fffd||24c|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 30
            msgStr = "[ERROR:" & no & "]" & "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||30e|w|fffd||fffd||fffd||fffd|i|fffd|O|fffd|`|fffd|Q|fffd|O|fffd|O|fffd|j|fffd||213||fffd||fffd||250||752||80b5||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 31
            msgStr = "[ERROR:" & no & "]" & "|fffd|J|fffd|n|fffd|N|fffd||fffd||fffd||313||fffd||fffd||342||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
    End Select
    '
    Msgbox_ScrnOption msgStr
    '
End Sub
'
Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
Attribute MSG_CANTOPEN_FILE.VB_ProcData.VB_Invoke_Func = " \n14"
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function
'
'---------------------------------------
'Message|fffd||315|\|fffd||fffd||fffd|G
'---------------------------------------
Sub DispMsg(ByVal msg As String, Optional ByVal bEcho)
Attribute DispMsg.VB_ProcData.VB_Invoke_Func = " \n14"
    If UCase(TypeName(bEcho)) = "ERROR" Then bEcho = True
    
    Application.ScreenUpdating = bEcho
    MsgBox msg, , GName_Prog
    
End Sub
'
'|fffd|V|fffd|[|fffd|g|fffd||318|g|fffd||fffd||fffd||315|`|fffd||fffd|
'
Sub setSheetWakusen(ByVal bOnOff As Boolean)
Attribute setSheetWakusen.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveWindow.DisplayGridlines = bOnOff
End Sub

'=== EOF ===

Attribute VB_Name = "epaMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: EPA|fffd|@ (DLL|fffd|g|fffd|p)
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ
'=================================================
Option Explicit
'
#If Win64 Then
Declare PtrSafe Function ysk_EPA_VBA Lib "MIST_E_Dbg_64.dll" ( _
    ByVal nId As Long, _
    InBkName As String, InStName As String, _
    InRowBgn As Integer, InColBgn As Integer, _
    InRowEnd As Integer, InColEnd As Integer, _
    OutBkName As String, OutStName As String, _
    OutRow As Integer, OutCol As Integer, _
    bgnYear As Integer, bgnMonth As Integer, _
    circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
    directionFlg As Integer, dataFlg As Integer) As Integer
#Else
Declare Function ysk_EPA_VBA Lib "MIST_E_Dbg.dll" ( _
    ByVal nId As Long, _
    InBkName As String, InStName As String, _
    InRowBgn As Integer, InColBgn As Integer, _
    InRowEnd As Integer, InColEnd As Integer, _
    OutBkName As String, OutStName As String, _
    OutRow As Integer, OutCol As Integer, _
    bgnYear As Integer, bgnMonth As Integer, _
    circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
    directionFlg As Integer, dataFlg As Integer) As Integer
#End If

Sub IS_EPA_VBA()
Attribute IS_EPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nForcNum As Integer, nYSmpNum As Integer
    
    bRtn = GetDlgInp(YSK_EPA)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    nYSmpNum = g_aDialog.rgeInp.Rows.Count - 1
    nForcNum = forcIIf(g_aDialog.nTimeStyle = 1, 12, 4)
    bGraph = True ' g_aDialog.bGraph
    g_aDialog.bGraph = False
    
    bRtn = doEPA_VBA()
    
    If bRtn And bGraph Then
        Call EpaGraph(g_aDialog.rgeOutBgn, g_aDialog.rgeOutBgn.Offset(0, 7), nYSmpNum, 0)
    End If
    
    g_aDialog.rgeOutBgn.Worksheet.Activate
    ActiveWindow.DisplayGridlines = False
    g_aDialog.rgeOutBgn.Select
End Sub

Function doEPA_VBA() As Boolean
Attribute doEPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim nId As Long
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.rgeInp.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_EPA_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
        vOutBkName, vOutStName, ro, co, _
        g_aDialog.nYearBgn, g_aDialog.nMonth, g_aDialog.nTimeStyle, g_aDialog.dlgEpa.nMod, _
        forcIIf(g_aDialog.bGraph, 2, 1), forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2))
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doEPA_VBA = False
        Exit Function
    End If
    
'    rtn = ysk_EPA_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
'                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
'                      vOutRow, vOutCol, vbgnYear, vbgnMonth, _
'                      vcircleFlg, vmodelFlg, 1, vdiretFlg, vdataFlg)
    
    Call Error_Display(rtn)
    
    doEPA_VBA = (rtn = 0)
End Function
                      
'|fffd|O|fffd||fffd||fffd|t
'Sep 2003, PYJ
'return row number used
Function EpaGraph(ByVal rgeDataBgn As Range, ByVal rgeOutBgn As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Integer
Attribute EpaGraph.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeChart As Range, rgeCate As Range, rgeData As Range
    Dim rgeTmp As Range
    Dim nRtn As Integer
    Dim i As Long
    
    rgeOutBgn.Worksheet.Activate

'|fffd|d|fffd|o|fffd|`
'---TCSI + TC---
    Set rgeChart = rgeOutBgn.Range("A1:I15")
    Set rgeTmp = rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1)
    For i = 1 To rgeTmp.Rows.Count
        rgeTmp(i, 1) = rgeDataBgn.Range("A1:A" & nYSmpNum + nForcNum + 1)(i, 1) & " " & rgeDataBgn.Range("B1:B" & nYSmpNum + nForcNum + 1)(i, 1)
    Next i
    
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        Union(rgeDataBgn.Range("C1:C" & nYSmpNum + 1), rgeDataBgn.Range("E1:E" & nYSmpNum + 1)), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---S---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1), _
        rgeDataBgn.Range("F1:F" & nYSmpNum + nForcNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---I---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    Call COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t( _
        rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        rgeDataBgn.Range("G1:G" & nYSmpNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
    EpaGraph = 47
End Function
'--- end of file ---
Attribute VB_Name = "frmAboutMe"
Attribute VB_Base = "0{B7448B2C-0CF2-4816-9CB6-AA7B33B64888}{82DBD678-8BBB-4228-8140-3ABB1367DFE1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'=== BOF ===

Private Sub cmdOK_Click()
    frmAboutMe.Hide
End Sub

Private Sub Label14_Click()
    Dim Link As String
    Link = Label14.Caption
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & Link
End Sub

'=== EOF===
Private Sub Label9_Click()

End Sub
Attribute VB_Name = "frmBasicInfo"
Attribute VB_Base = "0{51366A3B-AFB8-48B1-B995-F88EB30017D3}{82EB91BE-C6A4-4C45-A704-91D6BD07E7BF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

#If 0 Then  '11.12.2 LSQ cmt
Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub
#End If

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal Data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(2, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmExtSr1"
Attribute VB_Base = "0{D12C1516-4C25-4395-AB57-766504B0D00A}{5C92EF6E-0D99-472C-BBA1-9BA2D45F1D8E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optExtraInfoNo_Click()

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmForecast"
Attribute VB_Base = "0{E75BE416-D62E-4E88-9547-273971C00AF0}{ACFB19C1-2CAA-4644-8A12-E227EA1EEF69}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(6, frmForecast.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub



Attribute VB_Name = "frmVarSel"
Attribute VB_Base = "0{6B994F07-66F2-44E9-A1BD-A243EB0E1FE5}{DB87CC74-3C54-4FA2-843F-2C4CD3BE98AA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Private m_Variables As String
Private m_Dict
Private m_DictUnsel
Private m_bIsOK As Boolean
Private m_VarList() As Long

Private Function GetListInx(ByVal strText As String, lb As MSForms.ListBox) As Long
    Dim i As Long, loc As Long
    Dim tmpInx As Long, nInx As Long
    If lb.ListCount = 0 Then
        GetListInx = 0
        Exit Function
    End If
    nInx = CInt(m_Dict(strText))
    loc = lb.ListCount
    For i = 0 To lb.ListCount - 1
        tmpInx = CInt(m_Dict(lb.List(i)))
        If nInx < tmpInx Then
            loc = i
            Exit For
        End If
    Next i
    GetListInx = loc
End Function

Public Property Get bIsOk() As Boolean
    bIsOk = m_bIsOK
End Property

Public Property Get VarSelected() As String
    Dim i As Long, j As Long
    j = 0
    For i = 0 To lbSelected.ListCount - 1
        'm_VarList(m_Dict(lbSelected.List(i))) = i
        m_VarList(j) = m_Dict(lbSelected.List(i))
        j = j + 1
    Next i
    For i = 0 To lbUnselected.ListCount - 1
        'm_VarList(m_Dict(lbUnselected.List(i))) = lbSelected.ListCount + i
        m_VarList(j) = m_Dict(lbUnselected.List(i))
        j = j + 1
    Next i
    VarSelected = lbSelected.ListCount
    For i = LBound(m_VarList) To UBound(m_VarList)
        VarSelected = VarSelected & "," & m_VarList(i)
    Next i
End Property

Public Property Let Variables(ByVal vNewValue As String)
    Dim i As Long
    Dim varList As Variant
    m_bIsOK = False
    m_Variables = vNewValue
    varList = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    Set m_Dict = Nothing
    Set m_Dict = New Collection
    ReDim m_VarList(LBound(varList) To UBound(varList))
    For i = LBound(varList) To UBound(varList)
        'lbSelected.AddItem varList(i)
        'm_Dict.Add varList(i), i
        m_Dict.Add i, varList(i)
        m_VarList(i) = i
    Next i
End Property

Public Sub InitVarSelected(ByVal strVarSelected As String)
    Dim var As Variant
    Dim n As Long, sn As Long, un As Long, i As Long
    Dim vs As Variant
    var = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    If strVarSelected = "0" Then
        For i = LBound(var) To UBound(var)
            lbSelected.AddItem var(i)
        Next i
    Else
        vs = Split(strVarSelected, ",")
        n = UBound(vs)
        sn = val(vs(0))
        un = n - sn
        For i = 1 To sn
            lbSelected.AddItem var(vs(i))
        Next i
        For i = 1 To un
            lbUnselected.AddItem var(vs(i + sn))
        Next i
    End If
End Sub

Private Sub btnAdd_Click()
    Dim i As Long
    If lbUnselected.ListCount = 0 Then Exit Sub
    For i = lbUnselected.ListCount - 1 To 0 Step -1
        If lbUnselected.Selected(i) Then
            lbSelected.AddItem lbUnselected.List(i), GetListInx(lbUnselected.List(i), lbSelected)
            lbUnselected.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnCancel_Click()
    m_bIsOK = False
    Me.Hide
End Sub

Private Sub btnOK_Click()
    m_bIsOK = True
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    Set m_Dict = New Collection 'CreateObject("Scripting.Dictionary")
    Set m_DictUnsel = New Collection 'CreateObject("Scripting.Dictionary")
    m_bIsOK = False
    
    '11.7.5 LSQ (static text NG in MAC)
    btnAdd.Caption = "|fffd||fffd|"
    btnRemove.Caption = "|fffd||fffd|"
End Sub

Private Sub UserForm_Terminate()
    Set m_Dict = Nothing
    Set m_DictUnsel = Nothing
    m_bIsOK = False
End Sub

Private Sub btnRemove_Click()
    Dim i As Long
    Dim strText As String
    If lbSelected.ListCount = 0 Then Exit Sub
    For i = lbSelected.ListCount - 1 To 0 Step -1
        If lbSelected.Selected(i) Then
            strText = lbSelected.List(i)
            lbUnselected.AddItem strText, GetListInx(strText, lbUnselected)
            lbSelected.RemoveItem i
        End If
    Next i
End Sub
Attribute VB_Name = "helpMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : |fffd|w|fffd||fffd||fffd|v
'
' |fffd||c42c| : 2007.1 LSQ
'
'=================================================
Option Explicit
Option Private Module

Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" ( _
                    ByVal hwnd As LongPtr, _
                    ByVal lpOperation As String, _
                    ByVal lpFile As String, _
                    ByVal lpParameters As String, _
                    ByVal lpDirectory As String, _
                    ByVal nShowCmd As Long) As Long

Private Const SW_HIDE As Long = 0
Private Const SW_SHOWNORMAL As Long = 1
Private Const SW_SHOWMAXIMIZED As Long = 3
Private Const SW_SHOWMINIMIZED As Long = 2

Sub fHelp_ISTATYSK()
    Dim textMsg As String
    
    textMsg = GVerMsg
    
    If UCase(Left(textMsg, 5)) = "DUMMY" Then   'default = blank
        textMsg = ""
    End If

    frmAboutMe.lblVerMsg.Caption = textMsg
    frmAboutMe.Show

End Sub

'***********************
Function sTAHEN_Path() As String
    sTAHEN_Path = getPathName() & "\"
End Function

Function iFile_Check(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    Dim iRet
    Dim vTemp As Variant
    iRet = 0
    On Error Resume Next
    vTemp = FileDateTime(sFileName)
    If (vTemp = "") Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFile_Check = iRet
End Function

'
Sub helpComm()
    Application.Help getPathName + "\" + "sss_forc.hlp", "1"
End Sub
'
Sub setHelpToDlgBtn()
    Exit Sub
    
    '--- not used "Help Button" ---
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}1Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}2Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd|d|fffd||693||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("EPADlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    
End Sub

Sub fOnlineManual_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_HLP.PDF", "|fffd|I|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|w|fffd||fffd||fffd|v|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Sub fExplain_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_DOC.PDF", "|fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Private Sub Comm_LoadPdf(ByVal fName As String, ByVal errMsg As String)
    Dim sPDF_Path As String
    Dim sTemp As String
    Dim vRet As Variant
    Dim iLen As Integer
    Dim sTemp2 As String
    Dim sTemp1 As String
    Dim iRet As Integer
    
    sTemp = ""
    sTemp2 = sTAHEN_Path()
    iRet = iExt_App_Search(".pdf", 1, sTemp)
    If (sTemp = "") Then
        MsgBox "PDF|fffd|{|fffd||fffd||fffd|p|fffd|\|fffd|t|fffd|g|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
        Exit Sub
    Else
        sPDF_Path = sTemp
        sTemp1 = sTemp2 & fName
    '---------------------------------------------------------------------
        iRet = iFile_Check(sTemp1)
        If (iRet = 1) Then
           ' -----2007/09/03 |fffd|\|fffd|t|fffd|g|fffd||302||fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|--------
           'sTemp = sPDF_Path & " " & sTemp2 & fName
            sTemp = sPDF_Path & " " & Chr(34) & sTemp2 & fName & Chr(34)
           '-----------------------------------------------------------------------------
            'vRet = Shell(sTemp, 4)
            ShellExecute Application.hwnd, "open", sTemp2 & fName, vbNullString, sTemp2, SW_SHOWNORMAL
        Else
            MsgBox errMsg, vbExclamation + vbOKOnly, GName_Prog
        End If
    End If
End Sub

'=== EOF ===



INQUEST-PP=macro
