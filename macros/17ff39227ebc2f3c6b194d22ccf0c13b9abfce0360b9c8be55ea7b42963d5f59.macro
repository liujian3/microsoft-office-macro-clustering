Attribute VB_Name = "DynamicTablesAndButtons"
Option Explicit
Public pPauseEventsGI As Boolean                'Toggle to prevent comment box resizing when removing rows from CapEx
Public pPauseEventsFNMA As Boolean              'Toggle for Rating changes and spell check
Public pPauseEventsPhysCond As Boolean          'Toggle for Delete Photo making changes to DM grid and spellcheck
Public pPauseEventsMI As Boolean
Public pPauseEventsMF As Boolean
Public pPrintingOrPDFing As Boolean

Public Const RVmaxPages As Integer = 52
Public Const RVmaxitems As Integer = 308
Public Const RVrowsPerPage As Integer = 6
Public Const RVrow0 As Integer = 28
Public Const RVrow1 As Integer = 29
Public Const RVrowHeight As Integer = 85
Public Sub UpdatePhotoNumOnRVGridALL(ByVal PhotoNbrOrig As Integer, ByVal PhotoNbrNew As String)
    'Updates all on grid since one photo may be referenced multiple times. New as string so can be blank
    Dim i As Integer, sTmp As String

    For i = 1 To 308
        sTmp = Trim(wksRepairs.Range("RepairsPhotoIdentifier" & i).Value)
        Select Case sTmp
            Case PhotoNbrOrig
                wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = PhotoNbrNew
            
            Case PhotoNbrNew
                If Len(sTmp) > 0 Then   'This added so blanks are not filled in with value
                    wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = PhotoNbrOrig
                End If
        End Select
    Next i
End Sub
Public Sub ResizeFullWidthBoxesALL(ByVal TgtRow As Integer, ByRef Target As Range, iMaxChars As Integer, _
    sDestTabName As String, iMinRows As Integer, Optional bSRSwide As Boolean)
'Dynamically resize comment box heights based on how much text is in it

    Const apRowHeight = 16  'Standard row height
    Dim i As Integer, nRowLen As Integer, nRowHeight As Integer, nLFCount As Integer
    Dim nRow As Integer, sVal As String, iNumberOfRowsRequired As Integer, nChrPerRow As Integer
    Dim sPassword As String, xCR() As Variant, str As String, j As Integer, xCRdist() As Variant
    Dim iLen As Integer, nRowLenB As Integer
    
    sPassword = wksData.Range("$A$53").Value
    xCR() = Array(vbCr, vbLf, Chr(10), vbNewLine, vbCrLf)       'Array of different carriage return types, vbCrLf, vbNewLine
    xCRdist = Array()
    
'''    On Error Resume Next
    If bSRSwide Then
        nChrPerRow = wksData.Range("$A$16").Value       'SRS tab is wider, increased characters per row
    Else
        nChrPerRow = wksData.Range("$A$14").Value       'Normal characters per row
    End If

    sVal = Trim(Target.Value)   'calculate based on cleaned
    nRowLen = Len(sVal)

    If nRowLen > iMaxChars Then nRowLen = iMaxChars 'this sets the resizing to be no greater than max allowed
    nRowHeight = apRowHeight * iMinRows     'default blank comment box row height
    Erase xCRdist()
    
    'If comment box has content
    If nRowLen > 0 Then
        'Count number of carriage returns, new in array to catch differing types when user pastes into formula bar
        For i = 1 To nRowLen
            str = Mid(sVal, i, 1)
            For j = 0 To UBound(xCR())
                If str = xCR(j) Then
                    'Create array of CR locations
                    If nLFCount = 0 Then
                        ReDim xCRdist(nLFCount)
                    Else
                        ReDim Preserve xCRdist(0 To nLFCount)
                    End If

                    xCRdist(nLFCount) = i
                    nLFCount = nLFCount + 1     'count CRs
                    GoTo SkipToNext             'prevent counting the same carriage return twice if it fits more than 1 category
                    
                End If
            Next j
SkipToNext:
        Next i

        
        If nLFCount > 1 Then
            'Has at least 2 carriage returns, determine len of each new row
            For i = UBound(xCRdist()) To 1 Step -1
                iLen = xCRdist(i) - xCRdist(i - 1)
                If iLen >= nChrPerRow Then  'If the number of characters between carriage returns is > than row width
                    'nLFCount = nLFCount - 1
                    nRowLenB = nRowLenB + iLen
                End If
            Next i
            nRowLenB = nRowLenB + xCRdist(0)                    'len between char1 and 1st CR
            nRowLenB = nRowLenB + nRowLen - xCRdist(nLFCount - 1)   'Last CR to last char
            iNumberOfRowsRequired = WorksheetFunction.RoundUp((nRowLenB / nChrPerRow) + nLFCount, 0)
            
        Else
            'Calculate normal method based on characters per row with normal new lines
            iNumberOfRowsRequired = WorksheetFunction.RoundUp((nRowLen / nChrPerRow) + nLFCount, 0)
        End If


        'Set Max Rows limit if there are tons of carriage returns
        If iNumberOfRowsRequired > 15 Then
'            MsgBox ("The text entered into the " & Target.Cells(1, 1).Name.Name & " comment box exceeds the maximum " _
                & "number of rows available, likely due to the carriage returns.  Remove carriage returns or shorten the text for it all to show.")
            iNumberOfRowsRequired = 15
        End If
       
        
        If (apRowHeight * iNumberOfRowsRequired) > (apRowHeight * iMinRows) Then
            nRowHeight = (apRowHeight * iNumberOfRowsRequired)
        Else
            nRowHeight = apRowHeight * iMinRows
        End If
    End If
    
    'Finally, set row height
    If Not Sheets(sDestTabName).Rows(TgtRow).RowHeight = nRowHeight Then
        'unprotect if needed
        If Sheets(sDestTabName).ProtectContents Then Sheets(sDestTabName).Unprotect sPassword
        'Row resizing
        Sheets(sDestTabName).Rows(TgtRow).RowHeight = nRowHeight
    End If

End Sub
Public Function IsRVBlank(iItemNumber As Integer) As Boolean
    'Checks if RV grid row is blank
    With wksRepairs
        If .Range("RepairDescriptionAndLocation" & iItemNumber).Value <> "" Then GoTo RowNotBlank
        If .Range("RepairInspectorComments" & iItemNumber).Value <> "" Then GoTo RowNotBlank
        If .Range("RepairsPhotoIdentifier" & iItemNumber).Value <> "" Then GoTo RowNotBlank
        If .Range("RepairStatusType" & iItemNumber).Value <> "" Then GoTo RowNotBlank
    End With
    'If here, row is blank
    IsRVBlank = True
    Exit Function
    
RowNotBlank:
IsRVBlank = False
End Function
Public Sub MoveButtonsIntoPlace_GI_All()
'Move all buttons into place on the GI tab, called any time a button is clicked, or when selecting the sheet

    If pPrintingOrPDFing = True Then Exit Sub

    SetButtonSizes_GI "ValidationHelp_GI", "AL66", 34, 55, 0       'Validation Help button
    SetButtonSizes_GI "Add_OMItem", "AL84", 22, 37, 0               'O&M Add button
    SetButtonSizes_GI "Add_CapExItem", "AL97", 22, 37, 0            'CapEx Add button
    
    'X delete buttons
    SetButtonSizes_GI "GI_OM_X", "AN84", 22, 20, 1
    SetButtonSizes_GI "GI_CapEx_X", "AN97", 22, 20, 1
'''''    MoveButtonsIntoPlace_OM_X
'''''    MoveButtonsIntoPlace_CapEx_X
    
End Sub
Public Sub AddCapExRow()
    Dim iCapExCount As Integer, sBtnName As String
    Const CapExLowestRow0 = 99
    
    iCapExCount = wksData.Range("CapExCount").Value       'Obtain current number of CapEx Items
    If iCapExCount >= 15 Then
        wksGenInfo.Range("PropertyCapitalExpenditureDescription15").Select
        MsgBox ("Capital Expenditures list limit reached.")
        Exit Sub
    End If
    
    GenInfoUnprotect
    
    'If first row, show header row text
    If iCapExCount = 0 Then wksGenInfo.Range("B98:AJ198").Font.Color = vbBlack
    
    'Unhide next row, select caption box so button is not still selected
    wksGenInfo.Range("PropertyCapitalExpenditureDescription" & Right("0" & iCapExCount + 1, 2)).EntireRow.Hidden = False
    
    'Reinforce Accounting formatting
    wksGenInfo.Range("PropertyCapitalExpenditureCost" & Right("0" & iCapExCount + 1, 2)).NumberFormat = "$* #,###"
    
''    'Add the X Button
''    sBtnName = "cmdCapExDelete" & Right("0" & iCapExCount + 1, 2)
''    AddCapExButton iCapExCount + 1, sBtnName

    'Make sure all buttons are in correct spot
    MoveButtonsIntoPlace_GI_All
    
    'Update Counter, cleanup
    wksData.Range("CapExCount").Value = iCapExCount + 1
    wksGenInfo.Select
    wksGenInfo.Range("PropertyCapitalExpenditureDescription" & Right(0 & iCapExCount + 1, 2)).Select
    GenInfoProtect
    
End Sub
Public Sub CapExRowRemove()
'Public Sub CapExRowRemove(iItemNumber As Integer)
    Dim sBtnName As String, iCapExCount As Integer, i As Integer, oAsk, iItemNumber As Integer
    
    pPauseEventsGI = True

    iCapExCount = wksData.Range("CapExCount").Value       'Obtain current number of CapEx Items
    iItemNumber = iCapExCount
    
    If iCapExCount < 1 Then Exit Sub

    'User confirmaiton to delete
    If IsCapExBlank(iCapExCount) = False Then
        oAsk = MsgBox("Delete Capital Expenditures item " & iItemNumber & "?", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
    End If

    Application.StatusBar = "Removing CapEx item"
    Application.ScreenUpdating = False

    'ClearContents from Selected row
    CapExRowClearRow iItemNumber
    GenInfoUnprotect
       
    'Hide bottom row
    GenInfoUnprotect
    wksGenInfo.Range("PropertyCapitalExpenditureDescription" & Right(0 & iCapExCount, 2)).EntireRow.Hidden = True
    
    'If removing last row (row 1) hide header
    If iCapExCount = 1 Then
        wksGenInfo.Range("AB98:AJ98").Font.Color = vbWhite
        wksGenInfo.Range("OperationsAndMaintenancePlanComments").Select
    Else
        If iItemNumber > 1 Then
            wksGenInfo.Range("PropertyCapitalExpenditureDescription" & Right(0 & iItemNumber - 1, 2)).Select
        Else
            wksGenInfo.Range("PropertyCapitalExpenditureDescription" & Right(0 & iItemNumber, 2)).Select
        End If
    End If
    
    'Update counter
    wksData.Range("CapExCount").Value = iCapExCount - 1
    
    MoveButtonsIntoPlace_GI_All
    
    GenInfoProtect
    FeedBackEnd
    Application.ScreenUpdating = True
    pPauseEventsGI = False
End Sub
Public Function IsCapExBlank(iItemNumber As Integer) As Boolean
    'Checks if CapEx row is blank
    With wksGenInfo
        If .Range("PropertyCapitalExpenditureDescription" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range("PropertyCapitalExpenditureCost" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range("PropertyCapitalExpenditureStatus" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
    End With
    
    'If here, is blank
    IsCapExBlank = True
    Exit Function

RowNotBlank:
    IsCapExBlank = False
End Function
Public Sub CapExRowClearRow(iItemNumber As Integer)
    With wksGenInfo
        .Range("PropertyCapitalExpenditureDescription" & Right(0 & iItemNumber, 2)).Value = ""
        .Range("PropertyCapitalExpenditureCost" & Right(0 & iItemNumber, 2)).Value = ""
        .Range("PropertyCapitalExpenditureStatus" & Right(0 & iItemNumber, 2)).Value = ""
    End With
End Sub

' / / / / / / / O&M Section Begin / / / / / / / / /
Public Sub AddOMplanRow()

    Dim iOMCount As Integer, sBtnName As String
    Const OMRow0 = 86
    
    iOMCount = wksData.Range("OandMCount").Value       'Obtain current number of O&M items
    If iOMCount >= 5 Then
        wksGenInfo.Range("OperationsAndMaintenancePlanIndicator05").Select
        MsgBox ("Operations and Maintenance Plans list limit reached.")
        Exit Sub
    End If
    
    GenInfoUnprotect
    Application.StatusBar = "Adding O&M plan row"
    
    'If first row, show header row text
    If iOMCount = 0 Then wksGenInfo.Range("T85:AJ85").Font.Color = vbBlack
    
    'Unhide next row, select caption box so button is not still selected
    wksGenInfo.Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iOMCount + 1, 2)).EntireRow.Hidden = False
    
''    'Add the X Button
''    sBtnName = "cmdOMplanDelete" & Right("0" & iOMCount + 1, 2) 'prepare var
''    AddOMButton iOMCount + 1, sBtnName
          
    'Update Counter, cleanup
    wksData.Range("OandMCount").Value = iOMCount + 1
    wksGenInfo.Select
    
    MoveButtonsIntoPlace_GI_All
    
    wksGenInfo.Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iOMCount + 1, 2)).Select
    GenInfoProtect
    Application.StatusBar = False
    
End Sub
Function DoesButtonAlreadyExist(sButtonName As String) As Boolean
'GenInfo
    Dim btn As CommandButton
    
    On Error GoTo EarlyExit
    
    'Check if button already exists
    Set btn = wksGenInfo.OLEObjects(sButtonName).Object
    Set btn = Nothing
    DoesButtonAlreadyExist = True
    Exit Function

EarlyExit:
    Set btn = Nothing
    DoesButtonAlreadyExist = False
End Function

Public Sub SetButtonSizes_Tools(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVerticalOffset As Integer)
    Dim sPass As String
    'Changed to Form Control buttons for compatibility
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    sPass = wksData.Range("$A$53").Value
    If wksTools.ProtectContents Then wksTools.Unprotect sPass

    With wksTools.Shapes.Range(Array(sButtonName))
        .Left = wksTools.Range(sDest).Left + iHorizontalOffset
        .Top = wksTools.Range(sDest).Top + iVerticalOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub SetButtonSizes_GI(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer)
    Dim sPass As String
    'Changed to Form Control buttons for compatibility
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    sPass = wksData.Range("$A$53").Value
    If wksGenInfo.ProtectContents Then wksGenInfo.Unprotect sPass

    With wksGenInfo.Shapes.Range(Array(sButtonName))
        .Left = wksGenInfo.Range(sDest).Left + iHorizontalOffset
        .Top = wksGenInfo.Range(sDest).Top
        .Height = iHeight
        .Width = iWidth
    End With
End Sub

Public Sub SetButtonSizes_PH(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVertOffset As Integer)
'Changed to Form Control buttons for compatibility
    
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    With wksPhotos.Shapes.Range(Array(sButtonName))
        .Left = wksPhotos.Range(sDest).Left + iHorizontalOffset
        .Top = wksPhotos.Range(sDest).Top + iVertOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub SetButtonSizes_Fannie(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVertOffset As Integer)
'Changed to Form Control buttons for compatibility
    
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    With wksComp.Shapes.Range(Array(sButtonName))
        .Left = wksComp.Range(sDest).Left + iHorizontalOffset
        .Top = wksComp.Range(sDest).Top + iVertOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub SetButtonSizes_Multifamily(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVertOffset As Integer)
'Changed to Form Control buttons for compatibility
    
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    With wksMultifamily.Shapes.Range(Array(sButtonName))
        .Left = wksMultifamily.Range(sDest).Left + iHorizontalOffset
        .Top = wksMultifamily.Range(sDest).Top + iVertOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub SetButtonSizes_RV(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVerticalOffset As Integer)
    Dim sPass As String
    'Changed to Form Control buttons for compatibility
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    sPass = wksData.Range("$A$53").Value
    If wksRepairs.ProtectContents Then wksRepairs.Unprotect sPass

    With wksRepairs.Shapes.Range(Array(sButtonName))
        .Left = wksRepairs.Range(sDest).Left + iHorizontalOffset
        .Top = wksRepairs.Range(sDest).Top + iVerticalOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub OMplanRowRemove()
'Public Sub OMplanRowRemove(iItemNumber As Integer)
'For compatibility, adjusted so only on X button that is Form control instead of Active X. Also can only delete rows from the bottom up

    Dim sBtnName As String, iOMCount As Integer, i As Integer, oAsk, iItemNumber As Integer

    pPauseEventsGI = True
    iOMCount = wksData.Range("OandMCount").Value       'Obtain current number of O&M Items
    iItemNumber = iOMCount
    
    If iOMCount < 1 Then Exit Sub
    
    'User confirmaiton to delete
    If IsOMBlank(iOMCount) = False Then
        oAsk = MsgBox("Delete Operations and Maintenance row " & iItemNumber & "?", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
    End If

    Application.StatusBar = "Removing O&M plan row"
    Application.ScreenUpdating = False

    'ClearContents from Selected row
    If iOMCount > 0 Then
        OMRowClearRow iItemNumber
    End If
    GenInfoUnprotect
   
    'Hide bottom row
    GenInfoUnprotect
    wksGenInfo.Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iOMCount, 2)).EntireRow.Hidden = True
    
    'If removing last row (row 1) hide header
    If iOMCount = 1 Then
        wksGenInfo.Range("T85:AJ85").Font.Color = vbWhite
        wksGenInfo.Range("OperationsAndMaintenancePlanComments").Select
    Else
        If iItemNumber > 1 Then
            wksGenInfo.Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iItemNumber - 1, 2)).Select
        Else
            wksGenInfo.Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iItemNumber, 2)).Select
        End If
    End If
    
    'Update counter
    wksData.Range("OandMCount").Value = iOMCount - 1
    GenInfoProtect
    FeedBackEnd
    
    MoveButtonsIntoPlace_GI_All
    
    Application.ScreenUpdating = True

    pPauseEventsGI = False
End Sub
Public Function IsOMBlank(iItemNumber As Integer) As Boolean
    'Checks if CapEx row is blank
    With wksGenInfo
        If .Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range("OperationsAndMaintenancePlanMgmtAware" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range("OperationsAndMaintenancePlanAvaliable" & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
    End With
    IsOMBlank = True 'If here, is blank
    Exit Function
    
RowNotBlank:
    IsOMBlank = False
End Function
Public Sub OMRowClearRow(iItemNumber As Integer)
    With wksGenInfo
        .Range("OperationsAndMaintenancePlanIndicator" & Right(0 & iItemNumber, 2)).Value = ""
        .Range("OperationsAndMaintenancePlanMgmtAware" & Right(0 & iItemNumber, 2)).Value = ""
        .Range("OperationsAndMaintenancePlanAvaliable" & Right(0 & iItemNumber, 2)).Value = ""
    End With
End Sub
Sub MovePhotoButtonsIntoPlace(bOverrideInterval As Boolean)
' Called when user activates the Photos tab

    If pPrintingOrPDFing = True Then Exit Sub
    
    'Always make sure the Add Photos button is in the correct location
    MoveAddPhotosButtonIntoPlace wksData.Range("$A$4").Value

    'If buttons were moved/checked recently then skip since it takes a lot of time when
    ' just clicking back and forth through tabs, depending on processor/photo count 5-15 seconds
    If bOverrideInterval = False Then
        Dim UpdateInterval
        UpdateInterval = CDate(wksData.Range("$A$56").Value + TimeValue("01:00"))   '1 hour from last move
        If Now() < UpdateInterval Then Exit Sub
    End If

    'Proceed with moving buttons into place
    Dim i As Integer, iPicCountDATA As Integer, iPicCountSheet As Integer
    Dim sButtonName As String, iBtnCnt As Integer
    Dim iDestRow As Integer, sDest As String, sDestTEST As String
    Const PhotoBlockHeight As Integer = 24
    Const iRow0 As Integer = 7

    iPicCountDATA = wksData.Range("$A$2").Value
    
    If iPicCountDATA = 0 Then
        'Sheet may have been populated programatically, check if photos added not through buttons
        For i = 1 To 100    '100 since total is 99 and will subtract 1 in Else
            If DoesPhotoObjectExist(i) = True Then
                iPicCountSheet = i
            Else
                iPicCountSheet = i - 1
                Exit For
            End If
        Next i
    End If


    'Update Workbook placeholder with actual picture count (if higher)
    If iPicCountSheet > iPicCountDATA Then
        wksData.Range("$A$2").Value = iPicCountSheet
    Else
        iPicCountSheet = iPicCountDATA
    End If

    'Calculate where Add Photos button should be (if different from current)
    
    iDestRow = iRow0 + (PhotoBlockHeight * iPicCountSheet) + 3
    sDest = "P" & iDestRow
    If sDest <> wksData.Range("$A$4").Value Then
        wksData.Range("$A$4").Value = sDest     'Save button location to placeholder
        'Move "Add Photos" button into place
        MoveAddPhotosButtonIntoPlace sDest
    End If

    'Move Header buttons into place
    SetButtonSizes_PH "DeleteAllPhotos01", "AK1", 21, 80, 1, 0
    SetButtonSizes_PH "ExtractPhotos", "AK2", 21, 80, 1, 7

    If iPicCountSheet = 0 Then Exit Sub

    'Check if buttons already exist for all photos
    For i = 1 To iPicCountSheet
        Application.StatusBar = "Moving buttons into place for Photo " & i
        AddPhotoButtonsCluster i
    Next i
    Application.StatusBar = False

    If iPicCountSheet < 99 Then
        With wksPhotos
            For i = iPicCountSheet + 1 To 99
                'Hide all buttons which do not have a showing photo placeholder
                .Shapes("frmPicUpdate" & Right("0" & i, 2)).Visible = msoFalse
                .Shapes("frmPicDelete" & Right("0" & i, 2)).Visible = msoFalse
                .Shapes("frmPicInsert" & Right("0" & i, 2)).Visible = msoFalse
                .Shapes("frmPicMove" & Right("0" & i, 2)).Visible = msoFalse       'spinner
                .Shapes("frmPicToDMgrid" & Right("0" & i, 2)).Visible = msoFalse
                .Shapes("frmPicToRVgrid" & Right("0" & i, 2)).Visible = msoFalse
            Next i
        End With
    
    End If
    
    'Set UpdateInterval placeholder
    wksData.Range("$A$56").Value = Now()

End Sub
Function DoesPhotoObjectExist(iPhotoNumber As Integer) As Boolean
    'Check for photo existence
    Dim sPhName As String, PhShape As sHape
    
    sPhName = "PropertyInspectionPhoto" & Right("0" & iPhotoNumber, 2)

    On Error GoTo EarlyExit
    Set PhShape = wksPhotos.Shapes(sPhName)
    
    'If doesn't error then okay
    DoesPhotoObjectExist = True
    Set PhShape = Nothing
Exit Function

EarlyExit:
DoesPhotoObjectExist = False
Set PhShape = Nothing
End Function

Sub AddPhotoButtonsCluster(iPicNumber As Integer)
    ' BB08082018 - To facilitate scenarios where the photos tab is prefilled programatically, since buttons cannot be
    ' created, moving button creation to Public sub so can be called when user activates photos tab.
    Dim InsertRow As Integer, sObjSuffix As String, sPass As String
    
    InsertRow = 8 + ((iPicNumber - 1) * 24)
    sObjSuffix = Right("0" & iPicNumber, 2)

    sPass = wksData.Range("$A$53").Value
    If wksPhotos.ProtectContents Then wksPhotos.Unprotect sPass
    
    'Move Up/Down (Spin) button
    InsertSpinButton iPicNumber, InsertRow, 18, "frmPicMove" & sObjSuffix, "Move Down", 0, -40

    'Insert Above
    InsertButtonsWebDing iPicNumber, InsertRow, 18, "frmPicInsert" & sObjSuffix, ":", 0, 23, "Wingdings 3", 23

    'Change Photo button
    InsertButtonsWebDing iPicNumber, InsertRow, 18, "frmPicUpdate" & sObjSuffix, 2, 0, 23, "Webdings", 47

    'Delete Photo button
    InsertPhotoXButton iPicNumber, InsertRow, 18, "frmPicDelete" & sObjSuffix, "X", 0, 70

    'Add to DM List
    InsertButtons iPicNumber, InsertRow, 20, "frmPicToDMgrid" & sObjSuffix, "Add to DM list", 0, -6

    'Add to RV List
    InsertButtons iPicNumber, InsertRow, 22, "frmPicToRVgrid" & sObjSuffix, "Add to RV list", -3, -6

End Sub

Sub MoveAddPhotosButtonIntoPlace(sInsertRange As String)
    'This is for the Add Photos button
    Dim sName As String, sPass As String

    sName = "frmPicAppend"
    sPass = wksData.Range("$A$53").Value
    
    If wksPhotos.ProtectContents Then wksPhotos.Unprotect sPass

    With wksPhotos.Shapes(sName)
        .Left = Range(sInsertRange).Left
        .Top = Range(sInsertRange).Top
        .Width = 80
        .Height = 25
    End With
    
    'Update Button location Placeholder
    wksData.Range("$A$4").Value = sInsertRange

End Sub
Sub InsertButtons(PicCount As Integer, InsertRow As Integer, RowOffset As Integer, _
        sObjName As String, sCaption As String, iVerticalOffset As Integer, _
        iButtonWidthAdj As Integer)

    'This is for Add to DM, and Add to RV buttons
    Dim TgtRow As Integer
    TgtRow = InsertRow + RowOffset

    With wksPhotos.Shapes(sObjName)
        .Left = Range("AK" & TgtRow).Left + 1
        .Top = Range("AK" & TgtRow).Top + iVerticalOffset
        .Width = Range("AK" & TgtRow & ":AL" & TgtRow).Width + iButtonWidthAdj
        .Height = 24
        .Visible = msoTrue
    End With
End Sub
Sub InsertButtonsWebDing(PicCount As Integer, InsertRow As Integer, RowOffset As Integer, _
        sObjName As String, sCaption As String, iVerticalOffset As Integer, _
        iButtonWidthAdj As Integer, sFontName As String, iLeftIndent As Integer)
    'This is for Insert Above and Replace Photo buttons

    Dim TgtRow As Integer
    TgtRow = InsertRow + RowOffset

    With wksPhotos.Shapes(sObjName)
        .Left = wksPhotos.Range("AK" & TgtRow).Left + iLeftIndent
        .Top = wksPhotos.Range("AK" & TgtRow).Top + iVerticalOffset
        .Width = iButtonWidthAdj
        .Height = 24
        .Visible = msoTrue
    End With
End Sub
Sub InsertPhotoXButton(PicCount As Integer, InsertRow As Integer, RowOffset As Integer, _
        sObjName As String, sCaption As String, iVerticalOffset As Integer, iLeftIndent As Integer)
    'This is for the X button on the Photos tab.
    ' Will move it into place, set its size, and font to account for
    ' some versions of Excel/64-bit/Screen zoom settings doing odd things

    Dim TgtRow As Integer

    TgtRow = InsertRow + RowOffset

    With wksPhotos.Shapes(sObjName)
        .Left = Range("AK" & TgtRow).Left + iLeftIndent
        .Top = Range("AK" & TgtRow).Top + iVerticalOffset
        .Width = 23
        .Height = 24
        .Visible = msoTrue
    End With
End Sub
Sub InsertSpinButton(PicCount As Integer, InsertRow As Integer, RowOffset As Integer, _
        sObjName As String, sCaption As String, iVerticalOffset As Integer, iButtonWidthAdj As Integer)
    'Photos tab spin button
    
    Dim TgtRow As Integer
    TgtRow = InsertRow + RowOffset

    With wksPhotos.Shapes(sObjName)
        .Left = wksPhotos.Range("AK" & TgtRow).Left + 1
        .Top = wksPhotos.Range("AK" & TgtRow).Top + iVerticalOffset
        .Width = 23
        .Height = 24
        .Visible = msoTrue
    End With
    wksPhotos.Spinners(sObjName).Value = 1       'For some reason have to adjust value this way
    
End Sub
Public Sub Multifamily_AddRow()
    'Add button on units inspected grid
    AddMFunitInspectedRow False
'    MoveButtons_MF
End Sub
Public Sub Multifamily_RemoveRow()
    RemoveMFunitInspectedRow
'    MoveButtons_MF
End Sub
Public Sub AddMFunitInspectedRow(Optional bHideFeedback As Boolean)
    Dim iMFrowsVisible As Integer, iDestRow As Integer, MFrow0 As Integer, iMFIndexNum As Integer
    Dim sPassword As String, sRange As String, oAsk, MFlabelrow As Integer, i As Integer, MFrow1 As Integer

    On Error GoTo EarlyExitError
    MFlabelrow = 38
    MFrow0 = 39
    MFrow1 = 40
    sPassword = wksData.Range("$A$53").Value
    iMFrowsVisible = wksData.Range("MFunitsInspectedRows").Value    'Get current rows visible
    If iMFrowsVisible = 75 Then GoTo EarlyExit
    
    iMFIndexNum = iMFrowsVisible + 1
    iDestRow = MFrow0 + iMFIndexNum         'Convert index to actual new row to unhide
    If Not bHideFeedback Then FeedBackBegin iMFIndexNum & " rows for units inspected now visible"
    
'    Application.ScreenUpdating = False
    wksMultifamily.Unprotect sPassword
    
    'Hide header row if 0 added yet
    sRange = "B" & MFlabelrow & ":" & "AJ" & MFlabelrow
    If iMFrowsVisible >= 0 Then
        wksMultifamily.Range(sRange).Font.Color = vbBlack
    Else
        wksMultifamily.Range(sRange).Font.Color = vbWhite
    End If

    'Unhide all rows leading up to it as a precaution
    For i = MFrow1 To iDestRow
        wksMultifamily.Range(i & ":" & i).EntireRow.Hidden = False
        wksMultifamily.Range(i & ":" & i).RowHeight = 14.25
    Next i

    'Update Count
    wksData.Range("MFunitsInspectedRows").Value = iMFrowsVisible + 1
    wksMultifamily.Protect sPassword
    Application.ScreenUpdating = True
    FeedBackEnd
Exit Sub
EarlyExit:
    FeedBackEnd
    wksMultifamily.Protect sPassword
    MsgBox ("Detailed Report of Units Inspected limit of 75 reached.")
Exit Sub
EarlyExitError:
    FeedBackEnd
    wksMultifamily.Protect sPassword
    MsgBox ("There was an error")
End Sub
Public Sub RemoveMFunitInspectedRow()
    Dim iMFrowsVisible As Integer, iDestRow As Integer, MFrow0 As Integer, iMFIndexNum As Integer
    Dim sPassword As String, sRange As String, oAsk, MFlabelrow As Integer, i As Integer, MFrow1 As Integer
    Dim bHasContent As Boolean

    On Error GoTo EarlyExitError
    MFlabelrow = 38
    MFrow0 = 39
    MFrow1 = 40
    sPassword = wksData.Range("$A$53").Value
    iMFrowsVisible = wksData.Range("MFunitsInspectedRows").Value    'Get current rows visible
    If iMFrowsVisible = 0 Then GoTo EarlyExit
    
    'check if last row has content
    iDestRow = MFrow0 + iMFrowsVisible
'    iDestRow = MFrow0 + iMFIndexNum         'Convert index to actual new row to unhide
    iMFIndexNum = iMFrowsVisible
    
    'Check if last row has content
    sRange = Right("0" & iMFIndexNum, 2)
    With wksMultifamily
        If Not IsEmpty(.Range("SiteInspectionUnitNumber" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaNumberOfBedroomsCount" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaNumberOfBathsCount" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaSquareFootage" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaAskingRentAmount" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaCurrentUseType" & sRange)) Then bHasContent = True
        If Not IsEmpty(.Range("InspectedAreaConditionType" & sRange)) Then bHasContent = True
    End With
    If bHasContent Then
        oAsk = MsgBox("Row " & iMFIndexNum & " has content.  Remove the row and content anyway?", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
    End If
        
    
    FeedBackBegin "Row " & iMFIndexNum & " cleared and removed"
    Application.ScreenUpdating = False
    wksMultifamily.Unprotect sPassword
    
    'Hide header row if will be 0 shown
    sRange = "B" & MFlabelrow & ":" & "AJ" & MFlabelrow
    If iMFrowsVisible = 1 Then
        wksMultifamily.Range(sRange).Font.Color = vbWhite
    Else
        wksMultifamily.Range(sRange).Font.Color = vbBlack
    End If

    'Clear and hide the last row
    sRange = Right("0" & iMFIndexNum, 2)
    With wksMultifamily
        .Range("SiteInspectionUnitNumber" & sRange).MergeArea.ClearContents 'for some reason this one cell needs special treatment to clear
        .Range("InspectedAreaNumberOfBedroomsCount" & sRange).Value = ""
        .Range("InspectedAreaNumberOfBathsCount" & sRange).Value = ""
        .Range("InspectedAreaSquareFootage" & sRange).Value = ""
        .Range("InspectedAreaAskingRentAmount" & sRange).Value = ""
        .Range("InspectedAreaCurrentUseType" & sRange).Value = ""
        .Range("InspectedAreaConditionType" & sRange).Value = ""
    End With
    wksMultifamily.Unprotect sPassword
    wksMultifamily.Range(iDestRow & ":" & iDestRow).EntireRow.Hidden = True 'actual hiding

    'Select a visible cell
    If MFrow1 = iDestRow Then   'If hiding row1
        wksMultifamily.Range("MeasurementIdentifierBedroomsCount12").Select
    Else
        sRange = Right("0" & iMFIndexNum - 1, 2)
        wksMultifamily.Range("SiteInspectionUnitNumber" & sRange).Select
    End If

    'Update Count
    wksData.Range("MFunitsInspectedRows").Value = iMFrowsVisible - 1
    wksMultifamily.Protect sPassword
    Application.ScreenUpdating = True
    FeedBackEnd
Exit Sub
EarlyExit:
    FeedBackEnd
    'Already at 0, just exit
Exit Sub
EarlyExitError:
    FeedBackEnd
    wksMultifamily.Protect sPassword
    MsgBox ("There was an error")
End Sub

Sub DetermineIfAdditionalPageNeeded_RV(iNewRowIndex As Integer)
    Dim i As Integer, j As Integer
    
    If iNewRowIndex = 3 Then GoTo AddNewRVPage
    
    For i = 1 To RVmaxPages - 1
        If iNewRowIndex = (RVrowsPerPage * i) + 3 Then  '+3 includes base 2 plus one being added
            GoTo AddNewRVPage
        End If
    Next i
    'If here, no need to add a page
    Exit Sub
    
AddNewRVPage:
    'If here need to add 1 page
    RVPage_Add
    
End Sub
Sub MoveRVButtonsIntoPlace()
    SetButtonSizes_RV "cmdRemoveRVPage", "AY342", 20, 67, 0, 0
    SetButtonSizes_RV "cmdAddRVpage", "AY342", 20, 67, 0, 21
End Sub
Sub RVPage_RemoveCaller()
    Application.Run "wksRepairs.RemoveRVPage"
End Sub
Sub RVPage_Add()
    'Add a single page at a time on RV tab, moved here so can be called from other tabs
    Dim iPagesVisible As Integer, iIndexVisible As Integer, iDestRowVisTop As Integer, iDestRowVisBot As Integer
    Dim i As Integer, sPassword As String

    sPassword = wksData.Range("$A$53").Value
    iPagesVisible = wksData.Range("$A$45")                       'Number of print pages currently shown
    iIndexVisible = wksData.Range("$A$43")                       'Number of RV rows currently shown
    
    'Stop here before vars change
    If iIndexVisible >= RVmaxitems Then
        MsgBox ("Maximum number of Repairs Verification rows are shown.")
        Exit Sub
    End If
    
    iDestRowVisTop = iIndexVisible + RVrow0                      'Row of top of new page to be shown
    iDestRowVisBot = iIndexVisible + RVrow0 + RVrowsPerPage      'Row bottom of new page
    iIndexVisible = iIndexVisible + RVrowsPerPage

    wksRepairs.Unprotect Password:=sPassword

    'Unhide rows for Added page
    FeedBackBegin "Adding page " & iPagesVisible + 1 & ", extending input to " & iIndexVisible & " Repair Verification rows."
    Application.ScreenUpdating = False
    For i = iDestRowVisTop To iDestRowVisBot
        wksRepairs.Rows(i).EntireRow.Hidden = False
    Next i
    
    'Set Row height for all visible rows beginning with Item 1
    For i = RVrow1 To iDestRowVisBot
        wksRepairs.Rows(i).RowHeight = RVrowHeight
    Next i
    
    'Update placeholders on Data tab
    wksData.Range("$A$45") = iPagesVisible + 1
    wksData.Range("$A$43") = iIndexVisible                 'Save number of rows visible
    
    'Set print area
    SetRVprintArea RVrow1, iDestRowVisBot, iPagesVisible + 1
    RemoveVerticalPageBreaks_RV
    MoveRVButtonsIntoPlace
    
    'Cleanup
    wksRepairs.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True
    wksRepairs.Range("RepairDescriptionAndLocation" & (iIndexVisible)).Select     'Selecting bottom of visible to keep mouse over expand button
    FeedBackEnd

End Sub
Function GetLastRow_RV()
    Dim LastRowA As Integer, LastRowB As Integer, sTmp As String
    Dim Arr() As Variant, i As Integer, j As Integer
    
    Arr = Array("RepairDescriptionAndLocation", "RepairInspectorComments", "RepairsPhotoIdentifier", "RepairStatusType")
    For j = 0 To UBound(Arr)
    
        sTmp = Arr(j)

        For i = RVmaxitems To 1 Step -1
            If Not IsEmpty(wksRepairs.Range(sTmp & i).Value) Then
                LastRowA = i
                If LastRowA > LastRowB Then LastRowB = LastRowA
                GoTo EarlyForExit
            End If
        Next i
        
EarlyForExit:
        
    Next j
GetLastRow_RV = LastRowB
End Function
Sub SetRVprintArea(ByVal intRow1 As Integer, ByVal intLastRow As Integer, ByVal iLastPage As Integer)
    Dim sRangeAddr As String, TgtRow As String, i As Integer, iLastPerPage As Integer
    
    On Error Resume Next
    
    FeedBackBegin "Updating print area"
    Application.ScreenUpdating = False
    
    'Clear all page breaks, takes a long time to run
    wksRepairs.ResetAllPageBreaks

    'Set Page break at bottom of first page, RV row2
    wksRepairs.Range("RepairDescriptionAndLocation3").Select
    wksRepairs.HPageBreaks.Add Before:=ActiveCell

    'Insert subsequent page breaks except for last page
    iLastPerPage = 2
    For i = 1 To iLastPage - 1
        'RAnge for each sheet. 2 + Rows per page x number of pages
        iLastPerPage = iLastPerPage + RVrowsPerPage

        TgtRow = "RepairDescriptionAndLocation" & iLastPerPage      'Last visible row
        wksRepairs.Range(TgtRow).Offset(1, 0).Select                'If at last row, cannot do by range name
        wksRepairs.HPageBreaks.Add Before:=ActiveCell               'page break here
    Next i

'    ' Set the print area for last page
    sRangeAddr = "$A$1:$AW" & intLastRow
    wksRepairs.PageSetup.PrintArea = sRangeAddr

End Sub
Sub RemoveVerticalPageBreaks_RV()
    Dim i As Integer
    
    Application.ScreenUpdating = False
    On Error Resume Next
    
    'Must be in Page Break View to adjust breaks using these methods
    wksRepairs.Activate
    ActiveWindow.View = xlPageBreakPreview
    
    'Remove any vertical page breaks
    If wksRepairs.VPageBreaks.Count > 0 Then
        For i = wksRepairs.VPageBreaks.Count To 1 Step -1
            wksRepairs.VPageBreaks(i).Delete   'Doesn't delete for some reason
        Next i
    End If
    If wksRepairs.VPageBreaks.Count > 0 Then wksRepairs.VPageBreaks(1).DragOff xlToRight, 1     'attempt 2 if 1st fails
    
    'switch back to normal view
    wksRepairs.Activate
    ActiveWindow.View = xlNormalView
End Sub
Sub PhotosTab_Unlock()
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    If wksPhotos.ProtectContents Then wksPhotos.Unprotect sPassword

End Sub
Sub PhotosTab_Lock()
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    
    If Not wksPhotos.ProtectContents Then
        wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
End Sub
Public Sub DeleteAllPhotos_Caller()
    'Command button can't call private sub...
    Application.Run "wksPhotos.DeleteAllPhotos"
End Sub
Public Sub Fannie_Add_LS()
    Application.Run "wksComp.Add_LS"
End Sub
Public Sub Fannie_Add_DM()
    Application.Run "wksComp.Add_DM"
End Sub
Public Sub Fannie_Add_RM()
    Application.Run "wksComp.Add_RM"
End Sub
Public Sub Fannie_Add_Issues()
    Application.Run "wksComp.Add_Issues"
End Sub
Public Sub FannieMaeRatingsHelp()

    Dim str As String, oAsk

    str = "The complete Fannie Mae Overall rating definitions are listed on the Fannie Mae Ratings tab." _
        & vbNewLine & vbNewLine & "1 = Excellent condition; typically newer property or property with recent major rehab/significant investment." _
        & vbNewLine & vbNewLine & "2 = Very Good/Good condition with isolated and relatively minor issues that are unlikely to negatively impact operations and can be addressed in-house." _
        & vbNewLine & vbNewLine & "3 = Average to Fair condition; requiring investment." _
        & vbNewLine & vbNewLine & "4 = Deteriorated overall conditions, substandard materials and practices, or major issues have not been addressed since prior inspection; requiring significant investment." _
        & vbNewLine & vbNewLine & "5 = Unacceptable overall conditions. Widespread neglect or casualty event; condition materially impacts marketability. Functionality of systems and components is compromised."

    oAsk = MsgBox(str, Title:="Property Overall Rating")
End Sub
Public Sub MultiFamilyUnitBreakdownHelp()
    Dim oAsk, sMessage As String
    
    sMessage = "A unit may only be counted once in one of the four Status by unit type columns." & Chr(10) & "Total of Occupied + NonRevenue + Vacant + Down must equal the total number of units on the adjoining Multifamily Unit Breakdown, and the total on the General Info tab." _
    & Chr(10) & Chr(10) & "NonRevenue:" & Chr(10) & "On the General Info tab, NonRevenue units are counted as either Vacant or Occupied (depending on use).  On the Multifamily tab they are counted only as NonRevenue." _
    & Chr(10) & Chr(10) & "Down:" & Chr(10) & "The Number of Down units entered on the General Info tab, and the number of Down units on the Multifamily Unit Breakdown grid must be the same.  On the General Info tab, the Vacant Space unit count also includes any Down units, however, on the Multifamily Unit Breakdown, Down units are counted separately from Vacant units." _
    & Chr(10) & Chr(10) & "Units Inspected:" & Chr(10) & "All units inspected must be itemized in the Detailed Report of Units Inspected grid.  Inspected Commercial units are not counted towards the Multifamily units inspected totals."

    'MsgBox ("Max is 1024, len at " & Len(sMessage))
    oAsk = MsgBox(sMessage, vbOKOnly, Title:="Multifamily Unit Breakdown Validation Help")

End Sub
Sub RR_InsertFromFile()
    wksRentRoll.InsertRentRollFromFile
End Sub

Attribute VB_Name = "DynamicTables_PhysCond"
Option Explicit
Public Const DMdsc As String = "DeferredMaintenanceItemDescription"
Public Const DMrt As String = "DeferredMaintenanceRatingType"
Public Const DMls As String = "DeferredMaintenanceLifeSafetyIndicator"
Public Const DMph As String = "DeferredMaintenancePhotoIdentifier"
Public Const DMco As String = "DeferredMaintenanceEstimatedCostAmount"
Public Const DMLowestRow0 As Integer = 92       'Blank row above 1st DM item
Public Const DMLabelRow As Integer = 91         'Row DM header is on
Public Const DMSumEstCostRow As Integer = 144    'Row of Cost Sum

Public Sub MoveButtonsIntoPlace_DMSpinAndDelete()
    'Moves buttons into place
    'Resets size since some screen zoom and/or Excel versions do odd things
    
    On Error Resume Next

    If pPrintingOrPDFing = True Then Exit Sub
    
    Dim i As Integer, iDMRowsVisible As Integer
    Dim sObjName As String
    Dim iDMIndexNum As Integer, iDestRow As Integer
'    Dim btn As CommandButton, bSpn As SpinButton

    iDMRowsVisible = wksData.Range("DmCount")
    If iDMRowsVisible = 0 Then Exit Sub

    For i = 1 To iDMRowsVisible
        'Set vars
        iDestRow = DMLowestRow0 + i
        iDMIndexNum = i
        
        'Add/reset buttons
        MoveDMminusButtonIntoPlace i, iDestRow, iDMIndexNum
        MoveDMSpinButtonIntoPlace i, iDestRow, iDMIndexNum
    Next i
    
    If iDMRowsVisible = 50 Then Exit Sub
    'To account for situations where a user's macros did't hide buttons, ensure all non-visible DM row buttons hidden
    For i = iDMRowsVisible + 1 To 50
        wksPhysCond.Shapes("frmDMdelete" & Right("0" & i, 2)).Visible = msoFalse
        wksPhysCond.Shapes("frmDMmove" & Right("0" & i, 2)).Visible = msoFalse
    Next i

End Sub
Public Sub MoveDMminusButtonIntoPlace(DmCount As Integer, InsertRow As Integer, DmIndexNum As Integer)
    'This is used for X DM grid row remove button on the Physicial Condition and DM tab
    Dim sPassword As String, sName As String
    
    sPassword = wksData.Range("$A$53").Value
    sName = "frmDMdelete" & Right("0" & DmIndexNum, 2)

    With wksPhysCond.Shapes(sName)
        .Top = Range("AL" & DMLowestRow0 + DmIndexNum).Top + 3
        .Width = 21
        .Height = 23
        .Left = Range("AL" & DMLowestRow0 + DmIndexNum).Left + 22
        .Visible = msoTrue
    End With

End Sub
Public Sub MoveDMSpinButtonIntoPlace(DmCount As Integer, InsertRow As Integer, DmIndexNum As Integer)
    'Moves the specified frmDMmoveXX button from its placeholder (hidden) location to its
    ' respective DM grid row
'''    On Error Resume Next
    Dim sPassword As String, sName As String

    sPassword = wksData.Range("$A$53").Value
    sName = "frmDMmove" & Right("0" & DmIndexNum, 2)
    If wksPhysCond.ProtectContents Then wksPhysCond.Unprotect sPassword

    With wksPhysCond.Shapes(sName)
        .Top = Range("AL" & DMLowestRow0 + DmIndexNum).Top + 3
        .Width = 21
        .Height = 23
        .Left = Range("AL" & DMLowestRow0 + DmIndexNum).Left
        .Visible = msoTrue
'        .Value = 1
    End With
    wksPhysCond.Spinners(sName).Value = 1       'For some reason have to adjust value this way
End Sub
Public Sub DMgridMoveUpOrDown(iDMitemNumSource As Integer, iDMitemNumDest As Integer, bDown As Boolean)
    'Moves the DM item up or down using the up/down spin buttons on the DM grid
    Dim sCaptionA As String, sRatingA As String, iPhotoA As String, sLifeA As String, lEstCostA As String
    Dim sCaptionB As String, sRatingB As String, iPhotoB As String, sLifeB As String, lEstCostB As String
    
    'If moving DM item down, don't proceed if below row is now shown
    If bDown = True Then
        If iDMitemNumDest > wksData.Range("DmCount").Value Then
            wksPhysCond.Select
            wksPhysCond.Range(DMdsc & Right(0 & iDMitemNumSource, 2)).Select
            MsgBox ("Click the Add button to show more rows")
            Exit Sub
        End If
    End If
    
    pPauseEventsPhysCond = True
    
    'Pass the values to the vars
    With wksPhysCond
        sCaptionA = .Range(DMdsc & Right(0 & iDMitemNumSource, 2)).Value
        sRatingA = .Range(DMrt & Right(0 & iDMitemNumSource, 2)).Value
        iPhotoA = .Range(DMph & Right(0 & iDMitemNumSource, 2)).Value
        sLifeA = .Range(DMls & Right(0 & iDMitemNumSource, 2)).Value
        lEstCostA = .Range(DMco & Right(0 & iDMitemNumSource, 2)).Value

        sCaptionB = .Range(DMdsc & Right(0 & iDMitemNumDest, 2)).Value
        sRatingB = .Range(DMrt & Right(0 & iDMitemNumDest, 2)).Value
        iPhotoB = .Range(DMph & Right(0 & iDMitemNumDest, 2)).Value
        sLifeB = .Range(DMls & Right(0 & iDMitemNumDest, 2)).Value
        lEstCostB = .Range(DMco & Right(0 & iDMitemNumDest, 2)).Value
    End With

    'Pass from vars to sheet
    With wksPhysCond
        .Range(DMdsc & Right(0 & iDMitemNumSource, 2)).Value = sCaptionB
        .Range(DMrt & Right(0 & iDMitemNumSource, 2)).Value = sRatingB
        .Range(DMph & Right(0 & iDMitemNumSource, 2)).Value = iPhotoB
        .Range(DMls & Right(0 & iDMitemNumSource, 2)).Value = sLifeB
        .Range(DMco & Right(0 & iDMitemNumSource, 2)).Value = lEstCostB
        
        .Range(DMdsc & Right(0 & iDMitemNumDest, 2)).Value = sCaptionA
        .Range(DMrt & Right(0 & iDMitemNumDest, 2)).Value = sRatingA
        .Range(DMph & Right(0 & iDMitemNumDest, 2)).Value = iPhotoA
        .Range(DMls & Right(0 & iDMitemNumDest, 2)).Value = sLifeA
        .Range(DMco & Right(0 & iDMitemNumDest, 2)).Value = lEstCostA
    End With
    
    'Select caption of dest
    wksPhysCond.Select
    wksPhysCond.Range(DMdsc & Right(0 & iDMitemNumDest, 2)).Select

    pPauseEventsPhysCond = False

End Sub
Sub AddDMItem_Button()
    'This is the Add button for the DM grid
    AddDMItemRow False
    wksPhysCond.Select  'selects the sheet so user doesn't need to click twice on next button press
End Sub
Public Function AddDMItemRow(bReqFromPhotos As Boolean)
    'Public Boolean function so can be called from photos tab and the PhyCondDM tabs
    Dim iDmCount As Integer, iDestRow As Integer, iDMIndexNum As Integer
    Dim sPassword As String, sRange As String, oAsk
    
    On Error GoTo EarlyExitError
    sPassword = wksData.Range("$A$53").Value
    iDmCount = wksData.Range("DmCount").Value
    iDestRow = DMLowestRow0 + iDmCount + 1
    iDMIndexNum = iDmCount + 1
    
    If iDmCount = 50 Then GoTo EarlyExit

    Application.ScreenUpdating = False
    Application.StatusBar = "Adding DM row " & iDMIndexNum

    'Is earlier validated user has tab shown form calling sub
    pPauseEventsPhysCond = True     'This after the .Select so form will prep tab
    wksPhysCond.Select      'Sheet must be selected for buttons to be created, unfortunately, cannot skip this
    If wksPhysCond.ProtectContents Then wksPhysCond.Unprotect sPassword

    'If > 0 rows visible, unhide header Row and Sum row
    If iDmCount = 0 Then
        sRange = "AA" & DMLabelRow - 1 & ":" & "AJ" & DMLabelRow     'sRange is the DM grid header row
        wksPhysCond.Range(sRange).Font.Color = vbBlack
        wksPhysCond.Range(DMSumEstCostRow & ":" & DMSumEstCostRow).EntireRow.Hidden = False
    End If
    
    'Unhide the appropriate DM items Row
    pPauseEventsPhysCond = True
    With wksPhysCond.Range(iDestRow & ":" & iDestRow)
        .EntireRow.Hidden = False
        .RowHeight = 30
    End With
    
    'Add formatting as this tends to change on its own
    wksPhysCond.Range(DMco & Right("0" & iDmCount + 1, 2)).NumberFormat = "$* #,###"
    
    'Create buttons for that Row
    MoveDMminusButtonIntoPlace iDmCount, iDestRow, iDMIndexNum
    MoveDMSpinButtonIntoPlace iDmCount, iDestRow, iDMIndexNum
    
    'Update Count, select new row
    wksData.Range("DmCount").Value = iDmCount + 1
    wksPhysCond.Range(DMdsc & Right("0" & (iDmCount + 1), 2)).Select
'    PhysCondProtect

    'Make sure Add button is in correct spot
    MoveAddButtonIntoPlace_DM

    If bReqFromPhotos = True Then wksPhotos.Select
    FeedBackEnd
    Application.ScreenUpdating = True
    Application.StatusBar = False
    
    If Not wksPhysCond.ProtectContents Then wksPhysCond.Protect sPassword
    
Exit Function
EarlyExit:
    AddDMItemRow = False
    PhysCondProtect
    FeedBackEnd
    Application.ScreenUpdating = True
    Application.StatusBar = False
    pPauseEventsPhysCond = False
    If Not wksPhysCond.ProtectContents Then wksPhysCond.Protect sPassword
    MsgBox ("Deferred Maintenance Items List limit reached")
Exit Function
EarlyExitError:
    PhysCondProtect
    FeedBackEnd
    Application.ScreenUpdating = True
    Application.StatusBar = False
    pPauseEventsPhysCond = False
    If Not wksPhysCond.ProtectContents Then wksPhysCond.Protect sPassword
    MsgBox ("There was an error")
End Function
Public Sub MoveAddButtonIntoPlace_DM()
    If pPrintingOrPDFing = True Then Exit Sub
    SetButtonSizes_Phys "Add_DMItem", "AL90", 22, 44, 0, 10          'DM Add button
    SetButtonSizes_Phys "Sort_DMItems", "AL89", 22, 44, 0, 1           'Sort DM items button
End Sub
Public Sub SetButtonSizes_Phys(sButtonName As String, sDest As String, iHeight As Integer, iWidth As Integer, iHorizontalOffset As Integer, iVertOffset As Integer)
'Changed to Form Control buttons for compatibility
    Dim sPass As String
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    sPass = wksData.Range("$A$53").Value
    If wksPhysCond.ProtectContents Then wksPhysCond.Unprotect sPass

    With wksPhysCond.Shapes.Range(Array(sButtonName))
        .Left = wksPhysCond.Range(sDest).Left + iHorizontalOffset
        .Top = wksPhysCond.Range(sDest).Top + iVertOffset
        .Height = iHeight
        .Width = iWidth
    End With
End Sub
Public Sub DMgridRowRemove(ByVal iIndexNum As Integer, bReqFromPhotos As Boolean)
    'X delete button starts here on Physical Condition & DM tab
    Dim iDmCount As Integer, iDestRow As Integer, i As Integer, sRange As String
    Dim oAsk, sPassword As String, sName As String

    sPassword = wksData.Range("$A$53").Value

    'User confirm if row has content
    If bReqFromPhotos = False Then
        If IsDMBlank(iIndexNum) = False Then
            oAsk = MsgBox("Delete Deferred Maintenance item " & iIndexNum & "?", vbOKCancel)
            If oAsk = vbCancel Then Exit Sub
        End If
    End If

    pPauseEventsPhysCond = True 'When user has a non-valid photo entered removing DM items triggers the pop-up

    iDmCount = wksData.Range("DmCount").Value       'Obtain current number of DM items
    Application.ScreenUpdating = False
    Application.StatusBar = "Removing DM row " & iIndexNum
    'FeedBackBegin "Removing row " & iIndexNum
    DMgridRowClearRow iIndexNum                     'Clear DM text on row

    'All content below Non-hidden rows gets moved up 1 row to simulate deletion of target

    pPauseEventsPhysCond = True
    Application.Calculation = xlCalculationManual
    If iIndexNum < 50 Then
        For i = iIndexNum To 49
            Application.StatusBar = "Moving DM row " & i & " items up"
            With wksPhysCond
                If .Range(DMdsc & Right(0 & i + 1, 2)).RowHeight > 0 Then    'If row below is shown, move text up
                    .Range(DMdsc & Right(0 & i, 2)).Value = .Range(DMdsc & Right(0 & i + 1, 2)).Value
                    .Range(DMrt & Right(0 & i, 2)).Value = .Range(DMrt & Right(0 & i + 1, 2)).Value
                    .Range(DMph & Right(0 & i, 2)).Value = .Range(DMph & Right(0 & i + 1, 2)).Value
                    .Range(DMls & Right(0 & i, 2)).Value = .Range(DMls & Right(0 & i + 1, 2)).Value
                    .Range(DMco & Right(0 & i, 2)).Value = .Range(DMco & Right(0 & i + 1, 2)).Value
                End If
            End With
        Next i
        DMgridRowClearRow iDmCount  'Clear the bottom row
    End If
    Application.StatusBar = False
    pPauseEventsPhysCond = False
    Application.Calculation = xlAutomatic

    Application.ScreenUpdating = False
    If wksPhysCond.ProtectContents Then wksPhysCond.Unprotect sPassword
    pPauseEventsPhysCond = True
    wksPhysCond.Visible = True  'ensure user has the tab shown
    wksPhysCond.Select

'    Try hiding buttons without deleting or moving them
    If wksPhysCond.ProtectContents Then wksPhysCond.Unprotect sPassword
    sName = "frmDMdelete" & Right("0" & iDmCount, 2)
    wksPhysCond.Shapes(sName).Visible = msoFalse

    sName = "frmDMmove" & Right("0" & iDmCount, 2)
    wksPhysCond.Shapes(sName).Visible = msoFalse

    'hide bottom row
    iDestRow = DMLowestRow0 + iDmCount
    wksPhysCond.Range(iDestRow & ":" & iDestRow).EntireRow.Hidden = True

    'If removing last row (row 1) hide header and sum box
    If iDmCount = 1 Then
        sRange = "AA" & DMLabelRow - 1 & ":" & "AJ" & DMLabelRow
        wksPhysCond.Range(sRange).Font.Color = vbWhite
        wksPhysCond.Range(DMSumEstCostRow & ":" & DMSumEstCostRow).EntireRow.Hidden = True
        wksPhysCond.Range("PropertyInteriorDescription").Select
    Else
        wksPhysCond.Range(DMdsc & Right("0" & (iDmCount - 1), 2)).Select
    End If

    'Update counter
    wksData.Range("DmCount").Value = iDmCount - 1

    PhysCondProtect
    If bReqFromPhotos = True Then wksPhotos.Select  'If entered this sub from the Photos tab, return user there
    FeedBackEnd
    Application.StatusBar = False
    Application.ScreenUpdating = True
    pPauseEventsPhysCond = False

End Sub
Public Function IsDMBlank(iItemNumber As Integer) As Boolean
    'Checks if DM grid row is blank
    With wksPhysCond
        If .Range(DMdsc & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range(DMrt & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range(DMph & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range(DMls & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
        If .Range(DMco & Right(0 & iItemNumber, 2)).Value <> "" Then GoTo RowNotBlank
    End With
    'If here, row is blank
    IsDMBlank = True
    Exit Function
    
RowNotBlank:
IsDMBlank = False
End Function
Public Sub DMgridRowClearRow(iIndexNum As Integer)
    With wksPhysCond
    .Range(DMdsc & Right(0 & iIndexNum, 2)).Value = ""
    .Range(DMrt & Right(0 & iIndexNum, 2)).Value = ""
    .Range(DMph & Right(0 & iIndexNum, 2)).Value = ""
    .Range(DMls & Right(0 & iIndexNum, 2)).Value = ""
    .Range(DMco & Right(0 & iIndexNum, 2)).Value = ""
    End With
End Sub
Public Sub SortDMGridbyPhotoNumber()
    'Sort the DM grid!  You're welcome
    Dim vDMgridArr(0 To 49, 0 To 4) As Variant, oAsk
    Dim i As Integer, j As Integer, bHasOtherData As Boolean, iElementsUsed As Integer

    On Error GoTo EarlyExit
    oAsk = MsgBox("Sort the Deferred Maintenance grid ascending by photo number?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub
    
    'Sorting a multi-dimensial array is a nightmare, instead build the array in ascending order by photo number
    Application.StatusBar = "Building array of DM items"
    With wksPhysCond
    For j = 1 To 99                     'Each potential photo number
        For i = 1 To 50                 'Each DM grid row
            If Not IsEmpty(.Range(DMph & Right(0 & i, 2))) Then      'If has a photo number
                 If .Range(DMph & Right(0 & i, 2)).Value = j Then    'If the photo number is lowest searched for thus far
                     
                     'Add to array
                     UpdateArr vDMgridArr, i, iElementsUsed
                     iElementsUsed = iElementsUsed + 1
                 End If
             End If
        Next i
    Next j
    End With
    
    'All DM grid rows with a photo number are now in the array.  Now add rows with content but no photo number
    With wksPhysCond
    For i = 1 To 50
        If IsEmpty(.Range(DMph & Right(0 & i, 2))) Then     'If not photo numbmer since those were already added to the array

            'Check if other columns have data
            bHasOtherData = False
            If Not IsEmpty(.Range(DMdsc & Right(0 & i, 2))) Then bHasOtherData = True
            If Not IsEmpty(.Range(DMrt & Right(0 & i, 2))) Then bHasOtherData = True
            If Not IsEmpty(.Range(DMls & Right(0 & i, 2))) Then bHasOtherData = True
            If Not IsEmpty(.Range(DMco & Right(0 & i, 2))) Then bHasOtherData = True

            'If other has data but no photo referenced, add to end of array
            If bHasOtherData = True Then
                UpdateArr vDMgridArr, i, iElementsUsed
                iElementsUsed = iElementsUsed + 1
            End If
            
        End If
    Next i
    End With
    iElementsUsed = iElementsUsed - 1       'Reset to only used elements
    
    Application.StatusBar = False
    If IsEmpty(vDMgridArr) Then Exit Sub

    Application.StatusBar = "Placing sorted DM items back onto DM grid"
    'Array of DM grid items is now sorted, place back onto sheet
    pPauseEventsPhysCond = True
    Application.Calculation = xlCalculationManual
    
    With wksPhysCond
    For i = 0 To iElementsUsed
        Application.ScreenUpdating = False
        .Range(DMdsc & Right(0 & i + 1, 2)).Value = vDMgridArr(i, 0)
        .Range(DMrt & Right(0 & i + 1, 2)).Value = vDMgridArr(i, 1)
        .Range(DMls & Right(0 & i + 1, 2)).Value = vDMgridArr(i, 2)
        .Range(DMph & Right(0 & i + 1, 2)).Value = vDMgridArr(i, 3)
        .Range(DMco & Right(0 & i + 1, 2)).Value = vDMgridArr(i, 4)
    Next i
    End With

    'Clear out all remainder cells below
    iElementsUsed = iElementsUsed + 2       'increasing since we're now using for a range, not array, plus incremented 1
    Application.ScreenUpdating = False
    With wksPhysCond
    For i = iElementsUsed To 50
        If Not IsEmpty(.Range(DMdsc & Right(0 & i, 2))) Then .Range(DMdsc & Right(0 & i, 2)) = ""
        If Not IsEmpty(.Range(DMrt & Right(0 & i, 2))) Then .Range(DMrt & Right(0 & i, 2)) = ""
        If Not IsEmpty(.Range(DMls & Right(0 & i, 2))) Then .Range(DMls & Right(0 & i, 2)) = ""
        If Not IsEmpty(.Range(DMph & Right(0 & i, 2))) Then .Range(DMph & Right(0 & i, 2)) = ""
        If Not IsEmpty(.Range(DMco & Right(0 & i, 2))) Then .Range(DMco & Right(0 & i, 2)) = ""
    Next i
    End With

EarlyExit:
    Application.Calculation = xlCalculationAutomatic
    Erase vDMgridArr
    pPauseEventsPhysCond = False
    Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub
Public Sub UpdateArr(ByRef DMarray As Variant, iRowToAdd As Integer, iEle01 As Integer)
'Updates elements in the array, in place
    With wksPhysCond
        If Not IsEmpty(.Range(DMdsc & Right(0 & iRowToAdd, 2))) Then DMarray(iEle01, 0) = .Range(DMdsc & Right(0 & iRowToAdd, 2)).Value
        If Not IsEmpty(.Range(DMrt & Right(0 & iRowToAdd, 2))) Then DMarray(iEle01, 1) = .Range(DMrt & Right(0 & iRowToAdd, 2)).Value
        If Not IsEmpty(.Range(DMls & Right(0 & iRowToAdd, 2))) Then DMarray(iEle01, 2) = .Range(DMls & Right(0 & iRowToAdd, 2)).Value
        If Not IsEmpty(.Range(DMph & Right(0 & iRowToAdd, 2))) Then DMarray(iEle01, 3) = .Range(DMph & Right(0 & iRowToAdd, 2)).Value
        If Not IsEmpty(.Range(DMco & Right(0 & iRowToAdd, 2))) Then DMarray(iEle01, 4) = .Range(DMco & Right(0 & iRowToAdd, 2)).Value
    End With
End Sub
Function DoesButtonAlreadyExist_DM(sObjName As String, bSpin As Boolean) As Boolean
'PhysCond
    Dim btn As CommandButton
    Dim btn2 As SpinButton  'spin button is different type

    'Relies on error to see if button exists
    On Error GoTo EarlyExit
    If bSpin = False Then
        Set btn = wksPhysCond.OLEObjects(sObjName).Object
    Else
        Set btn2 = wksPhysCond.OLEObjects(sObjName).Object
    End If
    
    'Check if button already exists
    DoesButtonAlreadyExist_DM = True        'If here then there was no error
    Set btn = Nothing
    Set btn2 = Nothing
Exit Function

EarlyExit:
    DoesButtonAlreadyExist_DM = False
    Set btn = Nothing
    Set btn2 = Nothing
End Function
Public Sub DMgridRowMoveEntry(iRowClicked As Integer, iNewValue As Integer)
    'If user clicks the DM grid row SpinUp or SpinDown buttons
    Dim i As Integer, sName As String
    sName = "frmDMmove" & Right(0 & iRowClicked, 2)
    i = wksPhysCond.Spinners(sName).Value
    
    'Add special treatment to ignore row 1 moving up, and row 50 moving down.
    If iRowClicked = 1 And i = 2 Then Exit Sub      'Can't move row 1 visually up
    If iRowClicked = 50 And i = 0 Then Exit Sub     'Can't move row 50 visually down
    
    Select Case i
        Case 0
        DMgridMoveUpOrDown iRowClicked, iRowClicked + 1, True
        Case 2
        DMgridMoveUpOrDown iRowClicked, iRowClicked - 1, False
    End Select

    'Reset value of spinner for future clicks
    wksPhysCond.Spinners(sName).Value = 1

End Sub
Public Function FindPhotoIndexOnDmGrid(PhotoNbr As Integer)
    'This is called by UpdatePhotoNumOnDmGridByIndex to find the row the photo number is on
    Dim i As Integer

    For i = 1 To 50
        If wksPhysCond.Range(DMph & Right(0 & i, 2)).Value = PhotoNbr Then
            FindPhotoIndexOnDmGrid = i
            Exit For
        End If
    Next i
Exit Function
FindPhotoIndexOnDmGrid = 0  'If here photo number not on DM grid, return 0
End Function
Public Sub UpdatePhotoNumOnDMGridALL(ByVal PhotoNbrOrig As Integer, ByVal PhotoNbrNew As String)
    'Updates all
    Dim i As Integer

    For i = 1 To 50
        Select Case Trim(wksPhysCond.Range(DMph & Right(0 & i, 2)).Value)
            Case PhotoNbrOrig
            wksPhysCond.Range(DMph & Right(0 & i, 2)).Value = PhotoNbrNew

            Case PhotoNbrNew
                If Len(PhotoNbrNew) > 0 Then
                    wksPhysCond.Range(DMph & Right(0 & i, 2)).Value = PhotoNbrOrig
                End If
        End Select
    Next i
End Sub
Public Sub frmDMdelete01_Click()
    DMgridRowRemove 1, False
End Sub
Public Sub frmDMdelete02_Click()
    DMgridRowRemove 2, False
End Sub
Public Sub frmDMdelete03_Click()
    DMgridRowRemove 3, False
End Sub
Public Sub frmDMdelete04_Click()
    DMgridRowRemove 4, False
End Sub
Public Sub frmDMdelete05_Click()
    DMgridRowRemove 5, False
End Sub
Public Sub frmDMdelete06_Click()
    DMgridRowRemove 6, False
End Sub
Public Sub frmDMdelete07_Click()
    DMgridRowRemove 7, False
End Sub
Public Sub frmDMdelete08_Click()
    DMgridRowRemove 8, False
End Sub
Public Sub frmDMdelete09_Click()
    DMgridRowRemove 9, False
End Sub
Public Sub frmDMdelete10_Click()
    DMgridRowRemove 10, False
End Sub
Public Sub frmDMdelete11_Click()
    DMgridRowRemove 11, False
End Sub
Public Sub frmDMdelete12_Click()
    DMgridRowRemove 12, False
End Sub
Public Sub frmDMdelete13_Click()
    DMgridRowRemove 13, False
End Sub
Public Sub frmDMdelete14_Click()
    DMgridRowRemove 14, False
End Sub
Public Sub frmDMdelete15_Click()
    DMgridRowRemove 15, False
End Sub
Public Sub frmDMdelete16_Click()
    DMgridRowRemove 16, False
End Sub
Public Sub frmDMdelete17_Click()
    DMgridRowRemove 17, False
End Sub
Public Sub frmDMdelete18_Click()
    DMgridRowRemove 18, False
End Sub
Public Sub frmDMdelete19_Click()
    DMgridRowRemove 19, False
End Sub
Public Sub frmDMdelete20_Click()
    DMgridRowRemove 20, False
End Sub
Public Sub frmDMdelete21_Click()
    DMgridRowRemove 21, False
End Sub
Public Sub frmDMdelete22_Click()
    DMgridRowRemove 22, False
End Sub
Public Sub frmDMdelete23_Click()
    DMgridRowRemove 23, False
End Sub
Public Sub frmDMdelete24_Click()
    DMgridRowRemove 24, False
End Sub
Public Sub frmDMdelete25_Click()
    DMgridRowRemove 25, False
End Sub
Public Sub frmDMdelete26_Click()
    DMgridRowRemove 26, False
End Sub
Public Sub frmDMdelete27_Click()
    DMgridRowRemove 27, False
End Sub
Public Sub frmDMdelete28_Click()
    DMgridRowRemove 28, False
End Sub
Public Sub frmDMdelete29_Click()
    DMgridRowRemove 29, False
End Sub
Public Sub frmDMdelete30_Click()
    DMgridRowRemove 30, False
End Sub
Public Sub frmDMdelete31_Click()
    DMgridRowRemove 31, False
End Sub
Public Sub frmDMdelete32_Click()
    DMgridRowRemove 32, False
End Sub
Public Sub frmDMdelete33_Click()
    DMgridRowRemove 33, False
End Sub
Public Sub frmDMdelete34_Click()
    DMgridRowRemove 34, False
End Sub
Public Sub frmDMdelete35_Click()
    DMgridRowRemove 35, False
End Sub
Public Sub frmDMdelete36_Click()
    DMgridRowRemove 36, False
End Sub
Public Sub frmDMdelete37_Click()
    DMgridRowRemove 37, False
End Sub
Public Sub frmDMdelete38_Click()
    DMgridRowRemove 38, False
End Sub
Public Sub frmDMdelete39_Click()
    DMgridRowRemove 39, False
End Sub
Public Sub frmDMdelete40_Click()
    DMgridRowRemove 40, False
End Sub
Public Sub frmDMdelete41_Click()
    DMgridRowRemove 41, False
End Sub
Public Sub frmDMdelete42_Click()
    DMgridRowRemove 42, False
End Sub
Public Sub frmDMdelete43_Click()
    DMgridRowRemove 43, False
End Sub
Public Sub frmDMdelete44_Click()
    DMgridRowRemove 44, False
End Sub
Public Sub frmDMdelete45_Click()
    DMgridRowRemove 45, False
End Sub
Public Sub frmDMdelete46_Click()
    DMgridRowRemove 46, False
End Sub
Public Sub frmDMdelete47_Click()
    DMgridRowRemove 47, False
End Sub
Public Sub frmDMdelete48_Click()
    DMgridRowRemove 48, False
End Sub
Public Sub frmDMdelete49_Click()
    DMgridRowRemove 49, False
End Sub
Public Sub frmDMdelete50_Click()
    DMgridRowRemove 50, False
End Sub

'DM grid spin buttons
Public Sub frmDMmove01_Click()
    DMgridRowMoveEntry 1, wksPhysCond.Spinners("frmDMmove01").Value
End Sub
Public Sub frmDMmove02_Click()
    DMgridRowMoveEntry 2, wksPhysCond.Spinners("frmDMmove02").Value
End Sub
Public Sub frmDMmove03_Click()
    DMgridRowMoveEntry 3, wksPhysCond.Spinners("frmDMmove03").Value
End Sub
Public Sub frmDMmove04_Click()
    DMgridRowMoveEntry 4, wksPhysCond.Spinners("frmDMmove04").Value
End Sub
Public Sub frmDMmove05_Click()
    DMgridRowMoveEntry 5, wksPhysCond.Spinners("frmDMmove05").Value
End Sub
Public Sub frmDMmove06_Click()
    DMgridRowMoveEntry 6, wksPhysCond.Spinners("frmDMmove06").Value
End Sub
Public Sub frmDMmove07_Click()
    DMgridRowMoveEntry 7, wksPhysCond.Spinners("frmDMmove07").Value
End Sub
Public Sub frmDMmove08_Click()
    DMgridRowMoveEntry 8, wksPhysCond.Spinners("frmDMmove08").Value
End Sub
Public Sub frmDMmove09_Click()
    DMgridRowMoveEntry 9, wksPhysCond.Spinners("frmDMmove09").Value
End Sub
Public Sub frmDMmove10_Click()
    DMgridRowMoveEntry 10, wksPhysCond.Spinners("frmDMmove10").Value
End Sub
Public Sub frmDMmove11_Click()
    DMgridRowMoveEntry 11, wksPhysCond.Spinners("frmDMmove11").Value
End Sub
Public Sub frmDMmove12_Click()
    DMgridRowMoveEntry 12, wksPhysCond.Spinners("frmDMmove12").Value
End Sub
Public Sub frmDMmove13_Click()
    DMgridRowMoveEntry 13, wksPhysCond.Spinners("frmDMmove13").Value
End Sub
Public Sub frmDMmove14_Click()
    DMgridRowMoveEntry 14, wksPhysCond.Spinners("frmDMmove14").Value
End Sub
Public Sub frmDMmove15_Click()
    DMgridRowMoveEntry 15, wksPhysCond.Spinners("frmDMmove15").Value
End Sub
Public Sub frmDMmove16_Click()
    DMgridRowMoveEntry 16, wksPhysCond.Spinners("frmDMmove16").Value
End Sub
Public Sub frmDMmove17_Click()
    DMgridRowMoveEntry 17, wksPhysCond.Spinners("frmDMmove17").Value
End Sub
Public Sub frmDMmove18_Click()
    DMgridRowMoveEntry 18, wksPhysCond.Spinners("frmDMmove18").Value
End Sub
Public Sub frmDMmove19_Click()
    DMgridRowMoveEntry 19, wksPhysCond.Spinners("frmDMmove19").Value
End Sub
Public Sub frmDMmove20_Click()
    DMgridRowMoveEntry 20, wksPhysCond.Spinners("frmDMmove20").Value
End Sub
Public Sub frmDMmove21_Click()
    DMgridRowMoveEntry 21, wksPhysCond.Spinners("frmDMmove21").Value
End Sub
Public Sub frmDMmove22_Click()
    DMgridRowMoveEntry 22, wksPhysCond.Spinners("frmDMmove22").Value
End Sub
Public Sub frmDMmove23_Click()
    DMgridRowMoveEntry 23, wksPhysCond.Spinners("frmDMmove23").Value
End Sub
Public Sub frmDMmove24_Click()
    DMgridRowMoveEntry 24, wksPhysCond.Spinners("frmDMmove24").Value
End Sub
Public Sub frmDMmove25_Click()
    DMgridRowMoveEntry 25, wksPhysCond.Spinners("frmDMmove25").Value
End Sub
Public Sub frmDMmove26_Click()
    DMgridRowMoveEntry 26, wksPhysCond.Spinners("frmDMmove26").Value
End Sub
Public Sub frmDMmove27_Click()
    DMgridRowMoveEntry 27, wksPhysCond.Spinners("frmDMmove27").Value
End Sub
Public Sub frmDMmove28_Click()
    DMgridRowMoveEntry 28, wksPhysCond.Spinners("frmDMmove28").Value
End Sub
Public Sub frmDMmove29_Click()
    DMgridRowMoveEntry 29, wksPhysCond.Spinners("frmDMmove29").Value
End Sub
Public Sub frmDMmove30_Click()
    DMgridRowMoveEntry 30, wksPhysCond.Spinners("frmDMmove30").Value
End Sub
Public Sub frmDMmove31_Click()
    DMgridRowMoveEntry 31, wksPhysCond.Spinners("frmDMmove31").Value
End Sub
Public Sub frmDMmove32_Click()
    DMgridRowMoveEntry 32, wksPhysCond.Spinners("frmDMmove32").Value
End Sub
Public Sub frmDMmove33_Click()
    DMgridRowMoveEntry 33, wksPhysCond.Spinners("frmDMmove33").Value
End Sub
Public Sub frmDMmove34_Click()
    DMgridRowMoveEntry 34, wksPhysCond.Spinners("frmDMmove34").Value
End Sub
Public Sub frmDMmove35_Click()
    DMgridRowMoveEntry 35, wksPhysCond.Spinners("frmDMmove35").Value
End Sub
Public Sub frmDMmove36_Click()
    DMgridRowMoveEntry 36, wksPhysCond.Spinners("frmDMmove36").Value
End Sub
Public Sub frmDMmove37_Click()
    DMgridRowMoveEntry 37, wksPhysCond.Spinners("frmDMmove37").Value
End Sub
Public Sub frmDMmove38_Click()
    DMgridRowMoveEntry 38, wksPhysCond.Spinners("frmDMmove38").Value
End Sub
Public Sub frmDMmove39_Click()
    DMgridRowMoveEntry 39, wksPhysCond.Spinners("frmDMmove39").Value
End Sub
Public Sub frmDMmove40_Click()
    DMgridRowMoveEntry 40, wksPhysCond.Spinners("frmDMmove40").Value
End Sub
Public Sub frmDMmove41_Click()
    DMgridRowMoveEntry 41, wksPhysCond.Spinners("frmDMmove41").Value
End Sub
Public Sub frmDMmove42_Click()
    DMgridRowMoveEntry 42, wksPhysCond.Spinners("frmDMmove42").Value
End Sub
Public Sub frmDMmove43_Click()
    DMgridRowMoveEntry 43, wksPhysCond.Spinners("frmDMmove43").Value
End Sub
Public Sub frmDMmove44_Click()
    DMgridRowMoveEntry 44, wksPhysCond.Spinners("frmDMmove44").Value
End Sub
Public Sub frmDMmove45_Click()
    DMgridRowMoveEntry 45, wksPhysCond.Spinners("frmDMmove45").Value
End Sub
Public Sub frmDMmove46_Click()
    DMgridRowMoveEntry 46, wksPhysCond.Spinners("frmDMmove46").Value
End Sub
Public Sub frmDMmove47_Click()
    DMgridRowMoveEntry 47, wksPhysCond.Spinners("frmDMmove47").Value
End Sub
Public Sub frmDMmove48_Click()
    DMgridRowMoveEntry 48, wksPhysCond.Spinners("frmDMmove48").Value
End Sub
Public Sub frmDMmove49_Click()
    DMgridRowMoveEntry 49, wksPhysCond.Spinners("frmDMmove49").Value
End Sub
Public Sub frmDMmove50_Click()
    DMgridRowMoveEntry 50, wksPhysCond.Spinners("frmDMmove50").Value
End Sub



Attribute VB_Name = "Dynamic_Photos"
Option Explicit

Public Sub PhotoMoveUpDn(iPhotoClicked As Integer, iNewValue As Integer)
    'If user clicks the DM grid row SpinUp or SpinDown buttons
    Dim i As Integer, sName As String
    sName = "frmPicmove" & Right(0 & iPhotoClicked, 2)
    i = wksPhotos.Spinners(sName).Value

    'Add special treatment to ignore row 1 moving up, and row 50 moving down.
    If iPhotoClicked = 1 And i = 2 Then Exit Sub       'Can't move pic 1 visually up
    If iPhotoClicked = 99 And i = 0 Then Exit Sub      'Can't move pic 99 visually down
    
    Select Case i
        Case 0
'        Debug.Print "move it visually Down"
         wksPhotos.MovePhotoUp iPhotoClicked + 1
        Case 2
        'Debug.Print "move it visually Up"
        wksPhotos.MovePhotoUp iPhotoClicked
    End Select

    'Reset value of spinner for future clicks
    wksPhotos.Spinners(sName).Value = 1
End Sub

Sub frmPicAppend_FormControl()
    wksPhotos.PhotoAppend False, 0         'This is the Add Photos button
End Sub
Sub frmPicInsert01_Click()
   wksPhotos.PhotoInsertMultiple 1
End Sub
Sub frmPicInsert02_Click()
   wksPhotos.PhotoInsertMultiple 2
End Sub
Sub frmPicInsert03_Click()
   wksPhotos.PhotoInsertMultiple 3
End Sub
Sub frmPicInsert04_Click()
   wksPhotos.PhotoInsertMultiple 4
End Sub
Sub frmPicInsert05_Click()
   wksPhotos.PhotoInsertMultiple 5
End Sub
Sub frmPicInsert06_Click()
   wksPhotos.PhotoInsertMultiple 6
End Sub
Sub frmPicInsert07_Click()
   wksPhotos.PhotoInsertMultiple 7
End Sub
Sub frmPicInsert08_Click()
   wksPhotos.PhotoInsertMultiple 8
End Sub
Sub frmPicInsert09_Click()
   wksPhotos.PhotoInsertMultiple 9
End Sub
Sub frmPicInsert10_Click()
   wksPhotos.PhotoInsertMultiple 10
End Sub
Sub frmPicInsert11_Click()
   wksPhotos.PhotoInsertMultiple 11
End Sub
Sub frmPicInsert12_Click()
   wksPhotos.PhotoInsertMultiple 12
End Sub
Sub frmPicInsert13_Click()
   wksPhotos.PhotoInsertMultiple 13
End Sub
Sub frmPicInsert14_Click()
   wksPhotos.PhotoInsertMultiple 14
End Sub
Sub frmPicInsert15_Click()
   wksPhotos.PhotoInsertMultiple 15
End Sub
Sub frmPicInsert16_Click()
   wksPhotos.PhotoInsertMultiple 16
End Sub
Sub frmPicInsert17_Click()
   wksPhotos.PhotoInsertMultiple 17
End Sub
Sub frmPicInsert18_Click()
   wksPhotos.PhotoInsertMultiple 18
End Sub
Sub frmPicInsert19_Click()
   wksPhotos.PhotoInsertMultiple 19
End Sub
Sub frmPicInsert20_Click()
   wksPhotos.PhotoInsertMultiple 20
End Sub
Sub frmPicInsert21_Click()
   wksPhotos.PhotoInsertMultiple 21
End Sub
Sub frmPicInsert22_Click()
   wksPhotos.PhotoInsertMultiple 22
End Sub
Sub frmPicInsert23_Click()
   wksPhotos.PhotoInsertMultiple 23
End Sub
Sub frmPicInsert24_Click()
   wksPhotos.PhotoInsertMultiple 24
End Sub
Sub frmPicInsert25_Click()
   wksPhotos.PhotoInsertMultiple 25
End Sub
Sub frmPicInsert26_Click()
   wksPhotos.PhotoInsertMultiple 26
End Sub
Sub frmPicInsert27_Click()
   wksPhotos.PhotoInsertMultiple 27
End Sub
Sub frmPicInsert28_Click()
   wksPhotos.PhotoInsertMultiple 28
End Sub
Sub frmPicInsert29_Click()
   wksPhotos.PhotoInsertMultiple 29
End Sub
Sub frmPicInsert30_Click()
   wksPhotos.PhotoInsertMultiple 30
End Sub
Sub frmPicInsert31_Click()
   wksPhotos.PhotoInsertMultiple 31
End Sub
Sub frmPicInsert32_Click()
   wksPhotos.PhotoInsertMultiple 32
End Sub
Sub frmPicInsert33_Click()
   wksPhotos.PhotoInsertMultiple 33
End Sub
Sub frmPicInsert34_Click()
   wksPhotos.PhotoInsertMultiple 34
End Sub
Sub frmPicInsert35_Click()
   wksPhotos.PhotoInsertMultiple 35
End Sub
Sub frmPicInsert36_Click()
   wksPhotos.PhotoInsertMultiple 36
End Sub
Sub frmPicInsert37_Click()
   wksPhotos.PhotoInsertMultiple 37
End Sub
Sub frmPicInsert38_Click()
   wksPhotos.PhotoInsertMultiple 38
End Sub
Sub frmPicInsert39_Click()
   wksPhotos.PhotoInsertMultiple 39
End Sub
Sub frmPicInsert40_Click()
   wksPhotos.PhotoInsertMultiple 40
End Sub
Sub frmPicInsert41_Click()
   wksPhotos.PhotoInsertMultiple 41
End Sub
Sub frmPicInsert42_Click()
   wksPhotos.PhotoInsertMultiple 42
End Sub
Sub frmPicInsert43_Click()
   wksPhotos.PhotoInsertMultiple 43
End Sub
Sub frmPicInsert44_Click()
   wksPhotos.PhotoInsertMultiple 44
End Sub
Sub frmPicInsert45_Click()
   wksPhotos.PhotoInsertMultiple 45
End Sub
Sub frmPicInsert46_Click()
   wksPhotos.PhotoInsertMultiple 46
End Sub
Sub frmPicInsert47_Click()
   wksPhotos.PhotoInsertMultiple 47
End Sub
Sub frmPicInsert48_Click()
   wksPhotos.PhotoInsertMultiple 48
End Sub
Sub frmPicInsert49_Click()
   wksPhotos.PhotoInsertMultiple 49
End Sub
Sub frmPicInsert50_Click()
   wksPhotos.PhotoInsertMultiple 50
End Sub
Sub frmPicInsert51_Click()
   wksPhotos.PhotoInsertMultiple 51
End Sub
Sub frmPicInsert52_Click()
   wksPhotos.PhotoInsertMultiple 52
End Sub
Sub frmPicInsert53_Click()
   wksPhotos.PhotoInsertMultiple 53
End Sub
Sub frmPicInsert54_Click()
   wksPhotos.PhotoInsertMultiple 54
End Sub
Sub frmPicInsert55_Click()
   wksPhotos.PhotoInsertMultiple 55
End Sub
Sub frmPicInsert56_Click()
   wksPhotos.PhotoInsertMultiple 56
End Sub
Sub frmPicInsert57_Click()
   wksPhotos.PhotoInsertMultiple 57
End Sub
Sub frmPicInsert58_Click()
   wksPhotos.PhotoInsertMultiple 58
End Sub
Sub frmPicInsert59_Click()
   wksPhotos.PhotoInsertMultiple 59
End Sub
Sub frmPicInsert60_Click()
   wksPhotos.PhotoInsertMultiple 60
End Sub
Sub frmPicInsert61_Click()
   wksPhotos.PhotoInsertMultiple 61
End Sub
Sub frmPicInsert62_Click()
   wksPhotos.PhotoInsertMultiple 62
End Sub
Sub frmPicInsert63_Click()
   wksPhotos.PhotoInsertMultiple 63
End Sub
Sub frmPicInsert64_Click()
   wksPhotos.PhotoInsertMultiple 64
End Sub
Sub frmPicInsert65_Click()
   wksPhotos.PhotoInsertMultiple 65
End Sub
Sub frmPicInsert66_Click()
   wksPhotos.PhotoInsertMultiple 66
End Sub
Sub frmPicInsert67_Click()
   wksPhotos.PhotoInsertMultiple 67
End Sub
Sub frmPicInsert68_Click()
   wksPhotos.PhotoInsertMultiple 68
End Sub
Sub frmPicInsert69_Click()
   wksPhotos.PhotoInsertMultiple 69
End Sub
Sub frmPicInsert70_Click()
   wksPhotos.PhotoInsertMultiple 70
End Sub
Sub frmPicInsert71_Click()
   wksPhotos.PhotoInsertMultiple 71
End Sub
Sub frmPicInsert72_Click()
   wksPhotos.PhotoInsertMultiple 72
End Sub
Sub frmPicInsert73_Click()
   wksPhotos.PhotoInsertMultiple 73
End Sub
Sub frmPicInsert74_Click()
   wksPhotos.PhotoInsertMultiple 74
End Sub
Sub frmPicInsert75_Click()
   wksPhotos.PhotoInsertMultiple 75
End Sub
Sub frmPicInsert76_Click()
   wksPhotos.PhotoInsertMultiple 76
End Sub
Sub frmPicInsert77_Click()
   wksPhotos.PhotoInsertMultiple 77
End Sub
Sub frmPicInsert78_Click()
   wksPhotos.PhotoInsertMultiple 78
End Sub
Sub frmPicInsert79_Click()
   wksPhotos.PhotoInsertMultiple 79
End Sub
Sub frmPicInsert80_Click()
   wksPhotos.PhotoInsertMultiple 80
End Sub
Sub frmPicInsert81_Click()
   wksPhotos.PhotoInsertMultiple 81
End Sub
Sub frmPicInsert82_Click()
   wksPhotos.PhotoInsertMultiple 82
End Sub
Sub frmPicInsert83_Click()
   wksPhotos.PhotoInsertMultiple 83
End Sub
Sub frmPicInsert84_Click()
   wksPhotos.PhotoInsertMultiple 84
End Sub
Sub frmPicInsert85_Click()
   wksPhotos.PhotoInsertMultiple 85
End Sub
Sub frmPicInsert86_Click()
   wksPhotos.PhotoInsertMultiple 86
End Sub
Sub frmPicInsert87_Click()
   wksPhotos.PhotoInsertMultiple 87
End Sub
Sub frmPicInsert88_Click()
   wksPhotos.PhotoInsertMultiple 88
End Sub
Sub frmPicInsert89_Click()
   wksPhotos.PhotoInsertMultiple 89
End Sub
Sub frmPicInsert90_Click()
   wksPhotos.PhotoInsertMultiple 90
End Sub
Sub frmPicInsert91_Click()
   wksPhotos.PhotoInsertMultiple 91
End Sub
Sub frmPicInsert92_Click()
   wksPhotos.PhotoInsertMultiple 92
End Sub
Sub frmPicInsert93_Click()
   wksPhotos.PhotoInsertMultiple 93
End Sub
Sub frmPicInsert94_Click()
   wksPhotos.PhotoInsertMultiple 94
End Sub
Sub frmPicInsert95_Click()
   wksPhotos.PhotoInsertMultiple 95
End Sub
Sub frmPicInsert96_Click()
   wksPhotos.PhotoInsertMultiple 96
End Sub
Sub frmPicInsert97_Click()
   wksPhotos.PhotoInsertMultiple 97
End Sub
Sub frmPicInsert98_Click()
   wksPhotos.PhotoInsertMultiple 98
End Sub
Sub frmPicInsert99_Click()
   wksPhotos.PhotoInsertMultiple 99
End Sub
'Sub frmPicInsert100_Click()
'   PhotoInsertMultiple 100
'End Sub
Sub frmPicUpdate01_Click()
   wksPhotos.PhotoAppend True, 1
End Sub
Sub frmPicUpdate02_Click()
   wksPhotos.PhotoAppend True, 2
End Sub
Sub frmPicUpdate03_Click()
   wksPhotos.PhotoAppend True, 3
End Sub
Sub frmPicUpdate04_Click()
   wksPhotos.PhotoAppend True, 4
End Sub
Sub frmPicUpdate05_Click()
   wksPhotos.PhotoAppend True, 5
End Sub
Sub frmPicUpdate06_Click()
   wksPhotos.PhotoAppend True, 6
End Sub
Sub frmPicUpdate07_Click()
   wksPhotos.PhotoAppend True, 7
End Sub
Sub frmPicUpdate08_Click()
   wksPhotos.PhotoAppend True, 8
End Sub
Sub frmPicUpdate09_Click()
   wksPhotos.PhotoAppend True, 9
End Sub
Sub frmPicUpdate10_Click()
   wksPhotos.PhotoAppend True, 10
End Sub
Sub frmPicUpdate11_Click()
   wksPhotos.PhotoAppend True, 11
End Sub
Sub frmPicUpdate12_Click()
   wksPhotos.PhotoAppend True, 12
End Sub
Sub frmPicUpdate13_Click()
   wksPhotos.PhotoAppend True, 13
End Sub
Sub frmPicUpdate14_Click()
   wksPhotos.PhotoAppend True, 14
End Sub
Sub frmPicUpdate15_Click()
   wksPhotos.PhotoAppend True, 15
End Sub
Sub frmPicUpdate16_Click()
   wksPhotos.PhotoAppend True, 16
End Sub
Sub frmPicUpdate17_Click()
   wksPhotos.PhotoAppend True, 17
End Sub
Sub frmPicUpdate18_Click()
   wksPhotos.PhotoAppend True, 18
End Sub
Sub frmPicUpdate19_Click()
   wksPhotos.PhotoAppend True, 19
End Sub
Sub frmPicUpdate20_Click()
   wksPhotos.PhotoAppend True, 20
End Sub
Sub frmPicUpdate21_Click()
   wksPhotos.PhotoAppend True, 21
End Sub
Sub frmPicUpdate22_Click()
   wksPhotos.PhotoAppend True, 22
End Sub
Sub frmPicUpdate23_Click()
   wksPhotos.PhotoAppend True, 23
End Sub
Sub frmPicUpdate24_Click()
   wksPhotos.PhotoAppend True, 24
End Sub
Sub frmPicUpdate25_Click()
   wksPhotos.PhotoAppend True, 25
End Sub
Sub frmPicUpdate26_Click()
   wksPhotos.PhotoAppend True, 26
End Sub
Sub frmPicUpdate27_Click()
   wksPhotos.PhotoAppend True, 27
End Sub
Sub frmPicUpdate28_Click()
   wksPhotos.PhotoAppend True, 28
End Sub
Sub frmPicUpdate29_Click()
   wksPhotos.PhotoAppend True, 29
End Sub
Sub frmPicUpdate30_Click()
   wksPhotos.PhotoAppend True, 30
End Sub
Sub frmPicUpdate31_Click()
   wksPhotos.PhotoAppend True, 31
End Sub
Sub frmPicUpdate32_Click()
   wksPhotos.PhotoAppend True, 32
End Sub
Sub frmPicUpdate33_Click()
   wksPhotos.PhotoAppend True, 33
End Sub
Sub frmPicUpdate34_Click()
   wksPhotos.PhotoAppend True, 34
End Sub
Sub frmPicUpdate35_Click()
   wksPhotos.PhotoAppend True, 35
End Sub
Sub frmPicUpdate36_Click()
   wksPhotos.PhotoAppend True, 36
End Sub
Sub frmPicUpdate37_Click()
   wksPhotos.PhotoAppend True, 37
End Sub
Sub frmPicUpdate38_Click()
   wksPhotos.PhotoAppend True, 38
End Sub
Sub frmPicUpdate39_Click()
   wksPhotos.PhotoAppend True, 39
End Sub
Sub frmPicUpdate40_Click()
   wksPhotos.PhotoAppend True, 40
End Sub
Sub frmPicUpdate41_Click()
   wksPhotos.PhotoAppend True, 41
End Sub
Sub frmPicUpdate42_Click()
   wksPhotos.PhotoAppend True, 42
End Sub
Sub frmPicUpdate43_Click()
   wksPhotos.PhotoAppend True, 43
End Sub
Sub frmPicUpdate44_Click()
   wksPhotos.PhotoAppend True, 44
End Sub
Sub frmPicUpdate45_Click()
   wksPhotos.PhotoAppend True, 45
End Sub
Sub frmPicUpdate46_Click()
   wksPhotos.PhotoAppend True, 46
End Sub
Sub frmPicUpdate47_Click()
   wksPhotos.PhotoAppend True, 47
End Sub
Sub frmPicUpdate48_Click()
   wksPhotos.PhotoAppend True, 48
End Sub
Sub frmPicUpdate49_Click()
   wksPhotos.PhotoAppend True, 49
End Sub
Sub frmPicUpdate50_Click()
   wksPhotos.PhotoAppend True, 50
End Sub
Sub frmPicUpdate51_Click()
   wksPhotos.PhotoAppend True, 51
End Sub
Sub frmPicUpdate52_Click()
   wksPhotos.PhotoAppend True, 52
End Sub
Sub frmPicUpdate53_Click()
   wksPhotos.PhotoAppend True, 53
End Sub
Sub frmPicUpdate54_Click()
   wksPhotos.PhotoAppend True, 54
End Sub
Sub frmPicUpdate55_Click()
   wksPhotos.PhotoAppend True, 55
End Sub
Sub frmPicUpdate56_Click()
   wksPhotos.PhotoAppend True, 56
End Sub
Sub frmPicUpdate57_Click()
   wksPhotos.PhotoAppend True, 57
End Sub
Sub frmPicUpdate58_Click()
   wksPhotos.PhotoAppend True, 58
End Sub
Sub frmPicUpdate59_Click()
   wksPhotos.PhotoAppend True, 59
End Sub
Sub frmPicUpdate60_Click()
   wksPhotos.PhotoAppend True, 60
End Sub
Sub frmPicUpdate61_Click()
   wksPhotos.PhotoAppend True, 61
End Sub
Sub frmPicUpdate62_Click()
   wksPhotos.PhotoAppend True, 62
End Sub
Sub frmPicUpdate63_Click()
   wksPhotos.PhotoAppend True, 63
End Sub
Sub frmPicUpdate64_Click()
   wksPhotos.PhotoAppend True, 64
End Sub
Sub frmPicUpdate65_Click()
   wksPhotos.PhotoAppend True, 65
End Sub
Sub frmPicUpdate66_Click()
   wksPhotos.PhotoAppend True, 66
End Sub
Sub frmPicUpdate67_Click()
   wksPhotos.PhotoAppend True, 67
End Sub
Sub frmPicUpdate68_Click()
   wksPhotos.PhotoAppend True, 68
End Sub
Sub frmPicUpdate69_Click()
   wksPhotos.PhotoAppend True, 69
End Sub
Sub frmPicUpdate70_Click()
   wksPhotos.PhotoAppend True, 70
End Sub
Sub frmPicUpdate71_Click()
   wksPhotos.PhotoAppend True, 71
End Sub
Sub frmPicUpdate72_Click()
   wksPhotos.PhotoAppend True, 72
End Sub
Sub frmPicUpdate73_Click()
   wksPhotos.PhotoAppend True, 73
End Sub
Sub frmPicUpdate74_Click()
   wksPhotos.PhotoAppend True, 74
End Sub
Sub frmPicUpdate75_Click()
   wksPhotos.PhotoAppend True, 75
End Sub
Sub frmPicUpdate76_Click()
   wksPhotos.PhotoAppend True, 76
End Sub
Sub frmPicUpdate77_Click()
   wksPhotos.PhotoAppend True, 77
End Sub
Sub frmPicUpdate78_Click()
   wksPhotos.PhotoAppend True, 78
End Sub
Sub frmPicUpdate79_Click()
   wksPhotos.PhotoAppend True, 79
End Sub
Sub frmPicUpdate80_Click()
   wksPhotos.PhotoAppend True, 80
End Sub
Sub frmPicUpdate81_Click()
   wksPhotos.PhotoAppend True, 81
End Sub
Sub frmPicUpdate82_Click()
   wksPhotos.PhotoAppend True, 82
End Sub
Sub frmPicUpdate83_Click()
   wksPhotos.PhotoAppend True, 83
End Sub
Sub frmPicUpdate84_Click()
   wksPhotos.PhotoAppend True, 84
End Sub
Sub frmPicUpdate85_Click()
   wksPhotos.PhotoAppend True, 85
End Sub
Sub frmPicUpdate86_Click()
   wksPhotos.PhotoAppend True, 86
End Sub
Sub frmPicUpdate87_Click()
   wksPhotos.PhotoAppend True, 87
End Sub
Sub frmPicUpdate88_Click()
   wksPhotos.PhotoAppend True, 88
End Sub
Sub frmPicUpdate89_Click()
   wksPhotos.PhotoAppend True, 89
End Sub
Sub frmPicUpdate90_Click()
   wksPhotos.PhotoAppend True, 90
End Sub
Sub frmPicUpdate91_Click()
   wksPhotos.PhotoAppend True, 91
End Sub
Sub frmPicUpdate92_Click()
   wksPhotos.PhotoAppend True, 92
End Sub
Sub frmPicUpdate93_Click()
   wksPhotos.PhotoAppend True, 93
End Sub
Sub frmPicUpdate94_Click()
   wksPhotos.PhotoAppend True, 94
End Sub
Sub frmPicUpdate95_Click()
   wksPhotos.PhotoAppend True, 95
End Sub
Sub frmPicUpdate96_Click()
   wksPhotos.PhotoAppend True, 96
End Sub
Sub frmPicUpdate97_Click()
   wksPhotos.PhotoAppend True, 97
End Sub
Sub frmPicUpdate98_Click()
   wksPhotos.PhotoAppend True, 98
End Sub
Sub frmPicUpdate99_Click()
   MsgBox ("Photo limit reached")
End Sub
Sub frmPicDelete01_Click()
   wksPhotos.PhotoDelete 1
End Sub
Sub frmPicDelete02_Click()
   wksPhotos.PhotoDelete 2
End Sub
Sub frmPicDelete03_Click()
   wksPhotos.PhotoDelete 3
End Sub
Sub frmPicDelete04_Click()
   wksPhotos.PhotoDelete 4
End Sub
Sub frmPicDelete05_Click()
   wksPhotos.PhotoDelete 5
End Sub
Sub frmPicDelete06_Click()
   wksPhotos.PhotoDelete 6
End Sub
Sub frmPicDelete07_Click()
   wksPhotos.PhotoDelete 7
End Sub
Sub frmPicDelete08_Click()
   wksPhotos.PhotoDelete 8
End Sub
Sub frmPicDelete09_Click()
   wksPhotos.PhotoDelete 9
End Sub
Sub frmPicDelete10_Click()
   wksPhotos.PhotoDelete 10
End Sub
Sub frmPicDelete11_Click()
   wksPhotos.PhotoDelete 11
End Sub
Sub frmPicDelete12_Click()
   wksPhotos.PhotoDelete 12
End Sub
Sub frmPicDelete13_Click()
   wksPhotos.PhotoDelete 13
End Sub
Sub frmPicDelete14_Click()
   wksPhotos.PhotoDelete 14
End Sub
Sub frmPicDelete15_Click()
   wksPhotos.PhotoDelete 15
End Sub
Sub frmPicDelete16_Click()
   wksPhotos.PhotoDelete 16
End Sub
Sub frmPicDelete17_Click()
   wksPhotos.PhotoDelete 17
End Sub
Sub frmPicDelete18_Click()
   wksPhotos.PhotoDelete 18
End Sub
Sub frmPicDelete19_Click()
   wksPhotos.PhotoDelete 19
End Sub
Sub frmPicDelete20_Click()
   wksPhotos.PhotoDelete 20
End Sub
Sub frmPicDelete21_Click()
   wksPhotos.PhotoDelete 21
End Sub
Sub frmPicDelete22_Click()
   wksPhotos.PhotoDelete 22
End Sub
Sub frmPicDelete23_Click()
   wksPhotos.PhotoDelete 23
End Sub
Sub frmPicDelete24_Click()
   wksPhotos.PhotoDelete 24
End Sub
Sub frmPicDelete25_Click()
   wksPhotos.PhotoDelete 25
End Sub
Sub frmPicDelete26_Click()
   wksPhotos.PhotoDelete 26
End Sub
Sub frmPicDelete27_Click()
   wksPhotos.PhotoDelete 27
End Sub
Sub frmPicDelete28_Click()
   wksPhotos.PhotoDelete 28
End Sub
Sub frmPicDelete29_Click()
   wksPhotos.PhotoDelete 29
End Sub
Sub frmPicDelete30_Click()
   wksPhotos.PhotoDelete 30
End Sub
Sub frmPicDelete31_Click()
   wksPhotos.PhotoDelete 31
End Sub
Sub frmPicDelete32_Click()
   wksPhotos.PhotoDelete 32
End Sub
Sub frmPicDelete33_Click()
   wksPhotos.PhotoDelete 33
End Sub
Sub frmPicDelete34_Click()
   wksPhotos.PhotoDelete 34
End Sub
Sub frmPicDelete35_Click()
   wksPhotos.PhotoDelete 35
End Sub
Sub frmPicDelete36_Click()
   wksPhotos.PhotoDelete 36
End Sub
Sub frmPicDelete37_Click()
   wksPhotos.PhotoDelete 37
End Sub
Sub frmPicDelete38_Click()
   wksPhotos.PhotoDelete 38
End Sub
Sub frmPicDelete39_Click()
   wksPhotos.PhotoDelete 39
End Sub
Sub frmPicDelete40_Click()
   wksPhotos.PhotoDelete 40
End Sub
Sub frmPicDelete41_Click()
   wksPhotos.PhotoDelete 41
End Sub
Sub frmPicDelete42_Click()
   wksPhotos.PhotoDelete 42
End Sub
Sub frmPicDelete43_Click()
   wksPhotos.PhotoDelete 43
End Sub
Sub frmPicDelete44_Click()
   wksPhotos.PhotoDelete 44
End Sub
Sub frmPicDelete45_Click()
   wksPhotos.PhotoDelete 45
End Sub
Sub frmPicDelete46_Click()
   wksPhotos.PhotoDelete 46
End Sub
Sub frmPicDelete47_Click()
   wksPhotos.PhotoDelete 47
End Sub
Sub frmPicDelete48_Click()
   wksPhotos.PhotoDelete 48
End Sub
Sub frmPicDelete49_Click()
   wksPhotos.PhotoDelete 49
End Sub
Sub frmPicDelete50_Click()
   wksPhotos.PhotoDelete 50
End Sub
Sub frmPicDelete51_Click()
   wksPhotos.PhotoDelete 51
End Sub
Sub frmPicDelete52_Click()
   wksPhotos.PhotoDelete 52
End Sub
Sub frmPicDelete53_Click()
   wksPhotos.PhotoDelete 53
End Sub
Sub frmPicDelete54_Click()
   wksPhotos.PhotoDelete 54
End Sub
Sub frmPicDelete55_Click()
   wksPhotos.PhotoDelete 55
End Sub
Sub frmPicDelete56_Click()
   wksPhotos.PhotoDelete 56
End Sub
Sub frmPicDelete57_Click()
   wksPhotos.PhotoDelete 57
End Sub
Sub frmPicDelete58_Click()
   wksPhotos.PhotoDelete 58
End Sub
Sub frmPicDelete59_Click()
   wksPhotos.PhotoDelete 59
End Sub
Sub frmPicDelete60_Click()
   wksPhotos.PhotoDelete 60
End Sub
Sub frmPicDelete61_Click()
   wksPhotos.PhotoDelete 61
End Sub
Sub frmPicDelete62_Click()
   wksPhotos.PhotoDelete 62
End Sub
Sub frmPicDelete63_Click()
   wksPhotos.PhotoDelete 63
End Sub
Sub frmPicDelete64_Click()
   wksPhotos.PhotoDelete 64
End Sub
Sub frmPicDelete65_Click()
   wksPhotos.PhotoDelete 65
End Sub
Sub frmPicDelete66_Click()
   wksPhotos.PhotoDelete 66
End Sub
Sub frmPicDelete67_Click()
   wksPhotos.PhotoDelete 67
End Sub
Sub frmPicDelete68_Click()
   wksPhotos.PhotoDelete 68
End Sub
Sub frmPicDelete69_Click()
   wksPhotos.PhotoDelete 69
End Sub
Sub frmPicDelete70_Click()
   wksPhotos.PhotoDelete 70
End Sub
Sub frmPicDelete71_Click()
   wksPhotos.PhotoDelete 71
End Sub
Sub frmPicDelete72_Click()
   wksPhotos.PhotoDelete 72
End Sub
Sub frmPicDelete73_Click()
   wksPhotos.PhotoDelete 73
End Sub
Sub frmPicDelete74_Click()
   wksPhotos.PhotoDelete 74
End Sub
Sub frmPicDelete75_Click()
   wksPhotos.PhotoDelete 75
End Sub
Sub frmPicDelete76_Click()
   wksPhotos.PhotoDelete 76
End Sub
Sub frmPicDelete77_Click()
   wksPhotos.PhotoDelete 77
End Sub
Sub frmPicDelete78_Click()
   wksPhotos.PhotoDelete 78
End Sub
Sub frmPicDelete79_Click()
   wksPhotos.PhotoDelete 79
End Sub
Sub frmPicDelete80_Click()
   wksPhotos.PhotoDelete 80
End Sub
Sub frmPicDelete81_Click()
   wksPhotos.PhotoDelete 81
End Sub
Sub frmPicDelete82_Click()
   wksPhotos.PhotoDelete 82
End Sub
Sub frmPicDelete83_Click()
   wksPhotos.PhotoDelete 83
End Sub
Sub frmPicDelete84_Click()
   wksPhotos.PhotoDelete 84
End Sub
Sub frmPicDelete85_Click()
   wksPhotos.PhotoDelete 85
End Sub
Sub frmPicDelete86_Click()
   wksPhotos.PhotoDelete 86
End Sub
Sub frmPicDelete87_Click()
   wksPhotos.PhotoDelete 87
End Sub
Sub frmPicDelete88_Click()
   wksPhotos.PhotoDelete 88
End Sub
Sub frmPicDelete89_Click()
   wksPhotos.PhotoDelete 89
End Sub
Sub frmPicDelete90_Click()
   wksPhotos.PhotoDelete 90
End Sub
Sub frmPicDelete91_Click()
   wksPhotos.PhotoDelete 91
End Sub
Sub frmPicDelete92_Click()
   wksPhotos.PhotoDelete 92
End Sub
Sub frmPicDelete93_Click()
   wksPhotos.PhotoDelete 93
End Sub
Sub frmPicDelete94_Click()
   wksPhotos.PhotoDelete 94
End Sub
Sub frmPicDelete95_Click()
   wksPhotos.PhotoDelete 95
End Sub
Sub frmPicDelete96_Click()
   wksPhotos.PhotoDelete 96
End Sub
Sub frmPicDelete97_Click()
   wksPhotos.PhotoDelete 97
End Sub
Sub frmPicDelete98_Click()
   wksPhotos.PhotoDelete 98
End Sub
Sub frmPicDelete99_Click()
   wksPhotos.PhotoDelete 99
End Sub
Public Sub frmPicMove01_Click()
    PhotoMoveUpDn 1, wksPhotos.Spinners("frmPicMove01").Value
End Sub
Public Sub frmPicMove02_Click()
    PhotoMoveUpDn 2, wksPhotos.Spinners("frmPicMove02").Value
End Sub
Public Sub frmPicMove03_Click()
    PhotoMoveUpDn 3, wksPhotos.Spinners("frmPicMove03").Value
End Sub
Public Sub frmPicMove04_Click()
    PhotoMoveUpDn 4, wksPhotos.Spinners("frmPicMove04").Value
End Sub
Public Sub frmPicMove05_Click()
    PhotoMoveUpDn 5, wksPhotos.Spinners("frmPicMove05").Value
End Sub
Public Sub frmPicMove06_Click()
    PhotoMoveUpDn 6, wksPhotos.Spinners("frmPicMove06").Value
End Sub
Public Sub frmPicMove07_Click()
    PhotoMoveUpDn 7, wksPhotos.Spinners("frmPicMove07").Value
End Sub
Public Sub frmPicMove08_Click()
    PhotoMoveUpDn 8, wksPhotos.Spinners("frmPicMove08").Value
End Sub
Public Sub frmPicMove09_Click()
    PhotoMoveUpDn 9, wksPhotos.Spinners("frmPicMove09").Value
End Sub
Public Sub frmPicMove10_Click()
    PhotoMoveUpDn 10, wksPhotos.Spinners("frmPicMove10").Value
End Sub
Public Sub frmPicMove11_Click()
    PhotoMoveUpDn 11, wksPhotos.Spinners("frmPicMove11").Value
End Sub
Public Sub frmPicMove12_Click()
    PhotoMoveUpDn 12, wksPhotos.Spinners("frmPicMove12").Value
End Sub
Public Sub frmPicMove13_Click()
    PhotoMoveUpDn 13, wksPhotos.Spinners("frmPicMove13").Value
End Sub
Public Sub frmPicMove14_Click()
    PhotoMoveUpDn 14, wksPhotos.Spinners("frmPicMove14").Value
End Sub
Public Sub frmPicMove15_Click()
    PhotoMoveUpDn 15, wksPhotos.Spinners("frmPicMove15").Value
End Sub
Public Sub frmPicMove16_Click()
    PhotoMoveUpDn 16, wksPhotos.Spinners("frmPicMove16").Value
End Sub
Public Sub frmPicMove17_Click()
    PhotoMoveUpDn 17, wksPhotos.Spinners("frmPicMove17").Value
End Sub
Public Sub frmPicMove18_Click()
    PhotoMoveUpDn 18, wksPhotos.Spinners("frmPicMove18").Value
End Sub
Public Sub frmPicMove19_Click()
    PhotoMoveUpDn 19, wksPhotos.Spinners("frmPicMove19").Value
End Sub
Public Sub frmPicMove20_Click()
    PhotoMoveUpDn 20, wksPhotos.Spinners("frmPicMove20").Value
End Sub
Public Sub frmPicMove21_Click()
    PhotoMoveUpDn 21, wksPhotos.Spinners("frmPicMove21").Value
End Sub
Public Sub frmPicMove22_Click()
    PhotoMoveUpDn 22, wksPhotos.Spinners("frmPicMove22").Value
End Sub
Public Sub frmPicMove23_Click()
    PhotoMoveUpDn 23, wksPhotos.Spinners("frmPicMove23").Value
End Sub
Public Sub frmPicMove24_Click()
    PhotoMoveUpDn 24, wksPhotos.Spinners("frmPicMove24").Value
End Sub
Public Sub frmPicMove25_Click()
    PhotoMoveUpDn 25, wksPhotos.Spinners("frmPicMove25").Value
End Sub
Public Sub frmPicMove26_Click()
    PhotoMoveUpDn 26, wksPhotos.Spinners("frmPicMove26").Value
End Sub
Public Sub frmPicMove27_Click()
    PhotoMoveUpDn 27, wksPhotos.Spinners("frmPicMove27").Value
End Sub
Public Sub frmPicMove28_Click()
    PhotoMoveUpDn 28, wksPhotos.Spinners("frmPicMove28").Value
End Sub
Public Sub frmPicMove29_Click()
    PhotoMoveUpDn 29, wksPhotos.Spinners("frmPicMove29").Value
End Sub
Public Sub frmPicMove30_Click()
    PhotoMoveUpDn 30, wksPhotos.Spinners("frmPicMove30").Value
End Sub
Public Sub frmPicMove31_Click()
    PhotoMoveUpDn 31, wksPhotos.Spinners("frmPicMove31").Value
End Sub
Public Sub frmPicMove32_Click()
    PhotoMoveUpDn 32, wksPhotos.Spinners("frmPicMove32").Value
End Sub
Public Sub frmPicMove33_Click()
    PhotoMoveUpDn 33, wksPhotos.Spinners("frmPicMove33").Value
End Sub
Public Sub frmPicMove34_Click()
    PhotoMoveUpDn 34, wksPhotos.Spinners("frmPicMove34").Value
End Sub
Public Sub frmPicMove35_Click()
    PhotoMoveUpDn 35, wksPhotos.Spinners("frmPicMove35").Value
End Sub
Public Sub frmPicMove36_Click()
    PhotoMoveUpDn 36, wksPhotos.Spinners("frmPicMove36").Value
End Sub
Public Sub frmPicMove37_Click()
    PhotoMoveUpDn 37, wksPhotos.Spinners("frmPicMove37").Value
End Sub
Public Sub frmPicMove38_Click()
    PhotoMoveUpDn 38, wksPhotos.Spinners("frmPicMove38").Value
End Sub
Public Sub frmPicMove39_Click()
    PhotoMoveUpDn 39, wksPhotos.Spinners("frmPicMove39").Value
End Sub
Public Sub frmPicMove40_Click()
    PhotoMoveUpDn 40, wksPhotos.Spinners("frmPicMove40").Value
End Sub
Public Sub frmPicMove41_Click()
    PhotoMoveUpDn 41, wksPhotos.Spinners("frmPicMove41").Value
End Sub
Public Sub frmPicMove42_Click()
    PhotoMoveUpDn 42, wksPhotos.Spinners("frmPicMove42").Value
End Sub
Public Sub frmPicMove43_Click()
    PhotoMoveUpDn 43, wksPhotos.Spinners("frmPicMove43").Value
End Sub
Public Sub frmPicMove44_Click()
    PhotoMoveUpDn 44, wksPhotos.Spinners("frmPicMove44").Value
End Sub
Public Sub frmPicMove45_Click()
    PhotoMoveUpDn 45, wksPhotos.Spinners("frmPicMove45").Value
End Sub
Public Sub frmPicMove46_Click()
    PhotoMoveUpDn 46, wksPhotos.Spinners("frmPicMove46").Value
End Sub
Public Sub frmPicMove47_Click()
    PhotoMoveUpDn 47, wksPhotos.Spinners("frmPicMove47").Value
End Sub
Public Sub frmPicMove48_Click()
    PhotoMoveUpDn 48, wksPhotos.Spinners("frmPicMove48").Value
End Sub
Public Sub frmPicMove49_Click()
    PhotoMoveUpDn 49, wksPhotos.Spinners("frmPicMove49").Value
End Sub
Public Sub frmPicMove50_Click()
    PhotoMoveUpDn 50, wksPhotos.Spinners("frmPicMove50").Value
End Sub
Public Sub frmPicMove51_Click()
    PhotoMoveUpDn 51, wksPhotos.Spinners("frmPicMove51").Value
End Sub
Public Sub frmPicMove52_Click()
    PhotoMoveUpDn 52, wksPhotos.Spinners("frmPicMove52").Value
End Sub
Public Sub frmPicMove53_Click()
    PhotoMoveUpDn 53, wksPhotos.Spinners("frmPicMove53").Value
End Sub
Public Sub frmPicMove54_Click()
    PhotoMoveUpDn 54, wksPhotos.Spinners("frmPicMove54").Value
End Sub
Public Sub frmPicMove55_Click()
    PhotoMoveUpDn 55, wksPhotos.Spinners("frmPicMove55").Value
End Sub
Public Sub frmPicMove56_Click()
    PhotoMoveUpDn 56, wksPhotos.Spinners("frmPicMove56").Value
End Sub
Public Sub frmPicMove57_Click()
    PhotoMoveUpDn 57, wksPhotos.Spinners("frmPicMove57").Value
End Sub
Public Sub frmPicMove58_Click()
    PhotoMoveUpDn 58, wksPhotos.Spinners("frmPicMove58").Value
End Sub
Public Sub frmPicMove59_Click()
    PhotoMoveUpDn 59, wksPhotos.Spinners("frmPicMove59").Value
End Sub
Public Sub frmPicMove60_Click()
    PhotoMoveUpDn 60, wksPhotos.Spinners("frmPicMove60").Value
End Sub
Public Sub frmPicMove61_Click()
    PhotoMoveUpDn 61, wksPhotos.Spinners("frmPicMove61").Value
End Sub
Public Sub frmPicMove62_Click()
    PhotoMoveUpDn 62, wksPhotos.Spinners("frmPicMove62").Value
End Sub
Public Sub frmPicMove63_Click()
    PhotoMoveUpDn 63, wksPhotos.Spinners("frmPicMove63").Value
End Sub
Public Sub frmPicMove64_Click()
    PhotoMoveUpDn 64, wksPhotos.Spinners("frmPicMove64").Value
End Sub
Public Sub frmPicMove65_Click()
    PhotoMoveUpDn 65, wksPhotos.Spinners("frmPicMove65").Value
End Sub
Public Sub frmPicMove66_Click()
    PhotoMoveUpDn 66, wksPhotos.Spinners("frmPicMove66").Value
End Sub
Public Sub frmPicMove67_Click()
    PhotoMoveUpDn 67, wksPhotos.Spinners("frmPicMove67").Value
End Sub
Public Sub frmPicMove68_Click()
    PhotoMoveUpDn 68, wksPhotos.Spinners("frmPicMove68").Value
End Sub
Public Sub frmPicMove69_Click()
    PhotoMoveUpDn 69, wksPhotos.Spinners("frmPicMove69").Value
End Sub
Public Sub frmPicMove70_Click()
    PhotoMoveUpDn 70, wksPhotos.Spinners("frmPicMove70").Value
End Sub
Public Sub frmPicMove71_Click()
    PhotoMoveUpDn 71, wksPhotos.Spinners("frmPicMove71").Value
End Sub
Public Sub frmPicMove72_Click()
    PhotoMoveUpDn 72, wksPhotos.Spinners("frmPicMove72").Value
End Sub
Public Sub frmPicMove73_Click()
    PhotoMoveUpDn 73, wksPhotos.Spinners("frmPicMove73").Value
End Sub
Public Sub frmPicMove74_Click()
    PhotoMoveUpDn 74, wksPhotos.Spinners("frmPicMove74").Value
End Sub
Public Sub frmPicMove75_Click()
    PhotoMoveUpDn 75, wksPhotos.Spinners("frmPicMove75").Value
End Sub
Public Sub frmPicMove76_Click()
    PhotoMoveUpDn 76, wksPhotos.Spinners("frmPicMove76").Value
End Sub
Public Sub frmPicMove77_Click()
    PhotoMoveUpDn 77, wksPhotos.Spinners("frmPicMove77").Value
End Sub
Public Sub frmPicMove78_Click()
    PhotoMoveUpDn 78, wksPhotos.Spinners("frmPicMove78").Value
End Sub
Public Sub frmPicMove79_Click()
    PhotoMoveUpDn 79, wksPhotos.Spinners("frmPicMove79").Value
End Sub
Public Sub frmPicMove80_Click()
    PhotoMoveUpDn 80, wksPhotos.Spinners("frmPicMove80").Value
End Sub
Public Sub frmPicMove81_Click()
    PhotoMoveUpDn 81, wksPhotos.Spinners("frmPicMove81").Value
End Sub
Public Sub frmPicMove82_Click()
    PhotoMoveUpDn 82, wksPhotos.Spinners("frmPicMove82").Value
End Sub
Public Sub frmPicMove83_Click()
    PhotoMoveUpDn 83, wksPhotos.Spinners("frmPicMove83").Value
End Sub
Public Sub frmPicMove84_Click()
    PhotoMoveUpDn 84, wksPhotos.Spinners("frmPicMove84").Value
End Sub
Public Sub frmPicMove85_Click()
    PhotoMoveUpDn 85, wksPhotos.Spinners("frmPicMove85").Value
End Sub
Public Sub frmPicMove86_Click()
    PhotoMoveUpDn 86, wksPhotos.Spinners("frmPicMove86").Value
End Sub
Public Sub frmPicMove87_Click()
    PhotoMoveUpDn 87, wksPhotos.Spinners("frmPicMove87").Value
End Sub
Public Sub frmPicMove88_Click()
    PhotoMoveUpDn 88, wksPhotos.Spinners("frmPicMove88").Value
End Sub
Public Sub frmPicMove89_Click()
    PhotoMoveUpDn 89, wksPhotos.Spinners("frmPicMove89").Value
End Sub
Public Sub frmPicMove90_Click()
    PhotoMoveUpDn 90, wksPhotos.Spinners("frmPicMove90").Value
End Sub
Public Sub frmPicMove91_Click()
    PhotoMoveUpDn 91, wksPhotos.Spinners("frmPicMove91").Value
End Sub
Public Sub frmPicMove92_Click()
    PhotoMoveUpDn 92, wksPhotos.Spinners("frmPicMove92").Value
End Sub
Public Sub frmPicMove93_Click()
    PhotoMoveUpDn 93, wksPhotos.Spinners("frmPicMove93").Value
End Sub
Public Sub frmPicMove94_Click()
    PhotoMoveUpDn 94, wksPhotos.Spinners("frmPicMove94").Value
End Sub
Public Sub frmPicMove95_Click()
    PhotoMoveUpDn 95, wksPhotos.Spinners("frmPicMove95").Value
End Sub
Public Sub frmPicMove96_Click()
    PhotoMoveUpDn 96, wksPhotos.Spinners("frmPicMove96").Value
End Sub
Public Sub frmPicMove97_Click()
    PhotoMoveUpDn 97, wksPhotos.Spinners("frmPicMove97").Value
End Sub
Public Sub frmPicMove98_Click()
    PhotoMoveUpDn 98, wksPhotos.Spinners("frmPicMove98").Value
End Sub
Public Sub frmPicMove99_Click()
    PhotoMoveUpDn 99, wksPhotos.Spinners("frmPicMove99").Value
End Sub
Sub frmPicToDMgrid01_Click()
   wksPhotos.SendPhotoInfoToDmGrid 1
End Sub
Sub frmPicToDMgrid02_Click()
   wksPhotos.SendPhotoInfoToDmGrid 2
End Sub
Sub frmPicToDMgrid03_Click()
   wksPhotos.SendPhotoInfoToDmGrid 3
End Sub
Sub frmPicToDMgrid04_Click()
   wksPhotos.SendPhotoInfoToDmGrid 4
End Sub
Sub frmPicToDMgrid05_Click()
   wksPhotos.SendPhotoInfoToDmGrid 5
End Sub
Sub frmPicToDMgrid06_Click()
   wksPhotos.SendPhotoInfoToDmGrid 6
End Sub
Sub frmPicToDMgrid07_Click()
   wksPhotos.SendPhotoInfoToDmGrid 7
End Sub
Sub frmPicToDMgrid08_Click()
   wksPhotos.SendPhotoInfoToDmGrid 8
End Sub
Sub frmPicToDMgrid09_Click()
   wksPhotos.SendPhotoInfoToDmGrid 9
End Sub
Sub frmPicToDMgrid10_Click()
   wksPhotos.SendPhotoInfoToDmGrid 10
End Sub
Sub frmPicToDMgrid11_Click()
   wksPhotos.SendPhotoInfoToDmGrid 11
End Sub
Sub frmPicToDMgrid12_Click()
   wksPhotos.SendPhotoInfoToDmGrid 12
End Sub
Sub frmPicToDMgrid13_Click()
   wksPhotos.SendPhotoInfoToDmGrid 13
End Sub
Sub frmPicToDMgrid14_Click()
   wksPhotos.SendPhotoInfoToDmGrid 14
End Sub
Sub frmPicToDMgrid15_Click()
   wksPhotos.SendPhotoInfoToDmGrid 15
End Sub
Sub frmPicToDMgrid16_Click()
   wksPhotos.SendPhotoInfoToDmGrid 16
End Sub
Sub frmPicToDMgrid17_Click()
   wksPhotos.SendPhotoInfoToDmGrid 17
End Sub
Sub frmPicToDMgrid18_Click()
   wksPhotos.SendPhotoInfoToDmGrid 18
End Sub
Sub frmPicToDMgrid19_Click()
   wksPhotos.SendPhotoInfoToDmGrid 19
End Sub
Sub frmPicToDMgrid20_Click()
   wksPhotos.SendPhotoInfoToDmGrid 20
End Sub
Sub frmPicToDMgrid21_Click()
   wksPhotos.SendPhotoInfoToDmGrid 21
End Sub
Sub frmPicToDMgrid22_Click()
   wksPhotos.SendPhotoInfoToDmGrid 22
End Sub
Sub frmPicToDMgrid23_Click()
   wksPhotos.SendPhotoInfoToDmGrid 23
End Sub
Sub frmPicToDMgrid24_Click()
   wksPhotos.SendPhotoInfoToDmGrid 24
End Sub
Sub frmPicToDMgrid25_Click()
   wksPhotos.SendPhotoInfoToDmGrid 25
End Sub
Sub frmPicToDMgrid26_Click()
   wksPhotos.SendPhotoInfoToDmGrid 26
End Sub
Sub frmPicToDMgrid27_Click()
   wksPhotos.SendPhotoInfoToDmGrid 27
End Sub
Sub frmPicToDMgrid28_Click()
   wksPhotos.SendPhotoInfoToDmGrid 28
End Sub
Sub frmPicToDMgrid29_Click()
   wksPhotos.SendPhotoInfoToDmGrid 29
End Sub
Sub frmPicToDMgrid30_Click()
   wksPhotos.SendPhotoInfoToDmGrid 30
End Sub
Sub frmPicToDMgrid31_Click()
   wksPhotos.SendPhotoInfoToDmGrid 31
End Sub
Sub frmPicToDMgrid32_Click()
   wksPhotos.SendPhotoInfoToDmGrid 32
End Sub
Sub frmPicToDMgrid33_Click()
   wksPhotos.SendPhotoInfoToDmGrid 33
End Sub
Sub frmPicToDMgrid34_Click()
   wksPhotos.SendPhotoInfoToDmGrid 34
End Sub
Sub frmPicToDMgrid35_Click()
   wksPhotos.SendPhotoInfoToDmGrid 35
End Sub
Sub frmPicToDMgrid36_Click()
   wksPhotos.SendPhotoInfoToDmGrid 36
End Sub
Sub frmPicToDMgrid37_Click()
   wksPhotos.SendPhotoInfoToDmGrid 37
End Sub
Sub frmPicToDMgrid38_Click()
   wksPhotos.SendPhotoInfoToDmGrid 38
End Sub
Sub frmPicToDMgrid39_Click()
   wksPhotos.SendPhotoInfoToDmGrid 39
End Sub
Sub frmPicToDMgrid40_Click()
   wksPhotos.SendPhotoInfoToDmGrid 40
End Sub
Sub frmPicToDMgrid41_Click()
   wksPhotos.SendPhotoInfoToDmGrid 41
End Sub
Sub frmPicToDMgrid42_Click()
   wksPhotos.SendPhotoInfoToDmGrid 42
End Sub
Sub frmPicToDMgrid43_Click()
   wksPhotos.SendPhotoInfoToDmGrid 43
End Sub
Sub frmPicToDMgrid44_Click()
   wksPhotos.SendPhotoInfoToDmGrid 44
End Sub
Sub frmPicToDMgrid45_Click()
   wksPhotos.SendPhotoInfoToDmGrid 45
End Sub
Sub frmPicToDMgrid46_Click()
   wksPhotos.SendPhotoInfoToDmGrid 46
End Sub
Sub frmPicToDMgrid47_Click()
   wksPhotos.SendPhotoInfoToDmGrid 47
End Sub
Sub frmPicToDMgrid48_Click()
   wksPhotos.SendPhotoInfoToDmGrid 48
End Sub
Sub frmPicToDMgrid49_Click()
   wksPhotos.SendPhotoInfoToDmGrid 49
End Sub
Sub frmPicToDMgrid50_Click()
   wksPhotos.SendPhotoInfoToDmGrid 50
End Sub
Sub frmPicToDMgrid51_Click()
   wksPhotos.SendPhotoInfoToDmGrid 51
End Sub
Sub frmPicToDMgrid52_Click()
   wksPhotos.SendPhotoInfoToDmGrid 52
End Sub
Sub frmPicToDMgrid53_Click()
   wksPhotos.SendPhotoInfoToDmGrid 53
End Sub
Sub frmPicToDMgrid54_Click()
   wksPhotos.SendPhotoInfoToDmGrid 54
End Sub
Sub frmPicToDMgrid55_Click()
   wksPhotos.SendPhotoInfoToDmGrid 55
End Sub
Sub frmPicToDMgrid56_Click()
   wksPhotos.SendPhotoInfoToDmGrid 56
End Sub
Sub frmPicToDMgrid57_Click()
   wksPhotos.SendPhotoInfoToDmGrid 57
End Sub
Sub frmPicToDMgrid58_Click()
   wksPhotos.SendPhotoInfoToDmGrid 58
End Sub
Sub frmPicToDMgrid59_Click()
   wksPhotos.SendPhotoInfoToDmGrid 59
End Sub
Sub frmPicToDMgrid60_Click()
   wksPhotos.SendPhotoInfoToDmGrid 60
End Sub
Sub frmPicToDMgrid61_Click()
   wksPhotos.SendPhotoInfoToDmGrid 61
End Sub
Sub frmPicToDMgrid62_Click()
   wksPhotos.SendPhotoInfoToDmGrid 62
End Sub
Sub frmPicToDMgrid63_Click()
   wksPhotos.SendPhotoInfoToDmGrid 63
End Sub
Sub frmPicToDMgrid64_Click()
   wksPhotos.SendPhotoInfoToDmGrid 64
End Sub
Sub frmPicToDMgrid65_Click()
   wksPhotos.SendPhotoInfoToDmGrid 65
End Sub
Sub frmPicToDMgrid66_Click()
   wksPhotos.SendPhotoInfoToDmGrid 66
End Sub
Sub frmPicToDMgrid67_Click()
   wksPhotos.SendPhotoInfoToDmGrid 67
End Sub
Sub frmPicToDMgrid68_Click()
   wksPhotos.SendPhotoInfoToDmGrid 68
End Sub
Sub frmPicToDMgrid69_Click()
   wksPhotos.SendPhotoInfoToDmGrid 69
End Sub
Sub frmPicToDMgrid70_Click()
   wksPhotos.SendPhotoInfoToDmGrid 70
End Sub
Sub frmPicToDMgrid71_Click()
   wksPhotos.SendPhotoInfoToDmGrid 71
End Sub
Sub frmPicToDMgrid72_Click()
   wksPhotos.SendPhotoInfoToDmGrid 72
End Sub
Sub frmPicToDMgrid73_Click()
   wksPhotos.SendPhotoInfoToDmGrid 73
End Sub
Sub frmPicToDMgrid74_Click()
   wksPhotos.SendPhotoInfoToDmGrid 74
End Sub
Sub frmPicToDMgrid75_Click()
   wksPhotos.SendPhotoInfoToDmGrid 75
End Sub
Sub frmPicToDMgrid76_Click()
   wksPhotos.SendPhotoInfoToDmGrid 76
End Sub
Sub frmPicToDMgrid77_Click()
   wksPhotos.SendPhotoInfoToDmGrid 77
End Sub
Sub frmPicToDMgrid78_Click()
   wksPhotos.SendPhotoInfoToDmGrid 78
End Sub
Sub frmPicToDMgrid79_Click()
   wksPhotos.SendPhotoInfoToDmGrid 79
End Sub
Sub frmPicToDMgrid80_Click()
   wksPhotos.SendPhotoInfoToDmGrid 80
End Sub
Sub frmPicToDMgrid81_Click()
   wksPhotos.SendPhotoInfoToDmGrid 81
End Sub
Sub frmPicToDMgrid82_Click()
   wksPhotos.SendPhotoInfoToDmGrid 82
End Sub
Sub frmPicToDMgrid83_Click()
   wksPhotos.SendPhotoInfoToDmGrid 83
End Sub
Sub frmPicToDMgrid84_Click()
   wksPhotos.SendPhotoInfoToDmGrid 84
End Sub
Sub frmPicToDMgrid85_Click()
   wksPhotos.SendPhotoInfoToDmGrid 85
End Sub
Sub frmPicToDMgrid86_Click()
   wksPhotos.SendPhotoInfoToDmGrid 86
End Sub
Sub frmPicToDMgrid87_Click()
   wksPhotos.SendPhotoInfoToDmGrid 87
End Sub
Sub frmPicToDMgrid88_Click()
   wksPhotos.SendPhotoInfoToDmGrid 88
End Sub
Sub frmPicToDMgrid89_Click()
   wksPhotos.SendPhotoInfoToDmGrid 89
End Sub
Sub frmPicToDMgrid90_Click()
   wksPhotos.SendPhotoInfoToDmGrid 90
End Sub
Sub frmPicToDMgrid91_Click()
   wksPhotos.SendPhotoInfoToDmGrid 91
End Sub
Sub frmPicToDMgrid92_Click()
   wksPhotos.SendPhotoInfoToDmGrid 92
End Sub
Sub frmPicToDMgrid93_Click()
   wksPhotos.SendPhotoInfoToDmGrid 93
End Sub
Sub frmPicToDMgrid94_Click()
   wksPhotos.SendPhotoInfoToDmGrid 94
End Sub
Sub frmPicToDMgrid95_Click()
   wksPhotos.SendPhotoInfoToDmGrid 95
End Sub
Sub frmPicToDMgrid96_Click()
   wksPhotos.SendPhotoInfoToDmGrid 96
End Sub
Sub frmPicToDMgrid97_Click()
   wksPhotos.SendPhotoInfoToDmGrid 97
End Sub
Sub frmPicToDMgrid98_Click()
   wksPhotos.SendPhotoInfoToDmGrid 98
End Sub
Sub frmPicToDMgrid99_Click()
   wksPhotos.SendPhotoInfoToDmGrid 99
End Sub
Sub frmPicToRVgrid01_Click()
   wksPhotos.SendPhotoInfoToRVGrid 1
End Sub
Sub frmPicToRVgrid02_Click()
   wksPhotos.SendPhotoInfoToRVGrid 2
End Sub
Sub frmPicToRVgrid03_Click()
   wksPhotos.SendPhotoInfoToRVGrid 3
End Sub
Sub frmPicToRVgrid04_Click()
   wksPhotos.SendPhotoInfoToRVGrid 4
End Sub
Sub frmPicToRVgrid05_Click()
   wksPhotos.SendPhotoInfoToRVGrid 5
End Sub
Sub frmPicToRVgrid06_Click()
   wksPhotos.SendPhotoInfoToRVGrid 6
End Sub
Sub frmPicToRVgrid07_Click()
   wksPhotos.SendPhotoInfoToRVGrid 7
End Sub
Sub frmPicToRVgrid08_Click()
   wksPhotos.SendPhotoInfoToRVGrid 8
End Sub
Sub frmPicToRVgrid09_Click()
   wksPhotos.SendPhotoInfoToRVGrid 9
End Sub
Sub frmPicToRVgrid10_Click()
   wksPhotos.SendPhotoInfoToRVGrid 10
End Sub
Sub frmPicToRVgrid11_Click()
   wksPhotos.SendPhotoInfoToRVGrid 11
End Sub
Sub frmPicToRVgrid12_Click()
   wksPhotos.SendPhotoInfoToRVGrid 12
End Sub
Sub frmPicToRVgrid13_Click()
   wksPhotos.SendPhotoInfoToRVGrid 13
End Sub
Sub frmPicToRVgrid14_Click()
   wksPhotos.SendPhotoInfoToRVGrid 14
End Sub
Sub frmPicToRVgrid15_Click()
   wksPhotos.SendPhotoInfoToRVGrid 15
End Sub
Sub frmPicToRVgrid16_Click()
   wksPhotos.SendPhotoInfoToRVGrid 16
End Sub
Sub frmPicToRVgrid17_Click()
   wksPhotos.SendPhotoInfoToRVGrid 17
End Sub
Sub frmPicToRVgrid18_Click()
   wksPhotos.SendPhotoInfoToRVGrid 18
End Sub
Sub frmPicToRVgrid19_Click()
   wksPhotos.SendPhotoInfoToRVGrid 19
End Sub
Sub frmPicToRVgrid20_Click()
   wksPhotos.SendPhotoInfoToRVGrid 20
End Sub
Sub frmPicToRVgrid21_Click()
   wksPhotos.SendPhotoInfoToRVGrid 21
End Sub
Sub frmPicToRVgrid22_Click()
   wksPhotos.SendPhotoInfoToRVGrid 22
End Sub
Sub frmPicToRVgrid23_Click()
   wksPhotos.SendPhotoInfoToRVGrid 23
End Sub
Sub frmPicToRVgrid24_Click()
   wksPhotos.SendPhotoInfoToRVGrid 24
End Sub
Sub frmPicToRVgrid25_Click()
   wksPhotos.SendPhotoInfoToRVGrid 25
End Sub
Sub frmPicToRVgrid26_Click()
   wksPhotos.SendPhotoInfoToRVGrid 26
End Sub
Sub frmPicToRVgrid27_Click()
   wksPhotos.SendPhotoInfoToRVGrid 27
End Sub
Sub frmPicToRVgrid28_Click()
   wksPhotos.SendPhotoInfoToRVGrid 28
End Sub
Sub frmPicToRVgrid29_Click()
   wksPhotos.SendPhotoInfoToRVGrid 29
End Sub
Sub frmPicToRVgrid30_Click()
   wksPhotos.SendPhotoInfoToRVGrid 30
End Sub
Sub frmPicToRVgrid31_Click()
   wksPhotos.SendPhotoInfoToRVGrid 31
End Sub
Sub frmPicToRVgrid32_Click()
   wksPhotos.SendPhotoInfoToRVGrid 32
End Sub
Sub frmPicToRVgrid33_Click()
   wksPhotos.SendPhotoInfoToRVGrid 33
End Sub
Sub frmPicToRVgrid34_Click()
   wksPhotos.SendPhotoInfoToRVGrid 34
End Sub
Sub frmPicToRVgrid35_Click()
   wksPhotos.SendPhotoInfoToRVGrid 35
End Sub
Sub frmPicToRVgrid36_Click()
   wksPhotos.SendPhotoInfoToRVGrid 36
End Sub
Sub frmPicToRVgrid37_Click()
   wksPhotos.SendPhotoInfoToRVGrid 37
End Sub
Sub frmPicToRVgrid38_Click()
   wksPhotos.SendPhotoInfoToRVGrid 38
End Sub
Sub frmPicToRVgrid39_Click()
   wksPhotos.SendPhotoInfoToRVGrid 39
End Sub
Sub frmPicToRVgrid40_Click()
   wksPhotos.SendPhotoInfoToRVGrid 40
End Sub
Sub frmPicToRVgrid41_Click()
   wksPhotos.SendPhotoInfoToRVGrid 41
End Sub
Sub frmPicToRVgrid42_Click()
   wksPhotos.SendPhotoInfoToRVGrid 42
End Sub
Sub frmPicToRVgrid43_Click()
   wksPhotos.SendPhotoInfoToRVGrid 43
End Sub
Sub frmPicToRVgrid44_Click()
   wksPhotos.SendPhotoInfoToRVGrid 44
End Sub
Sub frmPicToRVgrid45_Click()
   wksPhotos.SendPhotoInfoToRVGrid 45
End Sub
Sub frmPicToRVgrid46_Click()
   wksPhotos.SendPhotoInfoToRVGrid 46
End Sub
Sub frmPicToRVgrid47_Click()
   wksPhotos.SendPhotoInfoToRVGrid 47
End Sub
Sub frmPicToRVgrid48_Click()
   wksPhotos.SendPhotoInfoToRVGrid 48
End Sub
Sub frmPicToRVgrid49_Click()
   wksPhotos.SendPhotoInfoToRVGrid 49
End Sub
Sub frmPicToRVgrid50_Click()
   wksPhotos.SendPhotoInfoToRVGrid 50
End Sub
Sub frmPicToRVgrid51_Click()
   wksPhotos.SendPhotoInfoToRVGrid 51
End Sub
Sub frmPicToRVgrid52_Click()
   wksPhotos.SendPhotoInfoToRVGrid 52
End Sub
Sub frmPicToRVgrid53_Click()
   wksPhotos.SendPhotoInfoToRVGrid 53
End Sub
Sub frmPicToRVgrid54_Click()
   wksPhotos.SendPhotoInfoToRVGrid 54
End Sub
Sub frmPicToRVgrid55_Click()
   wksPhotos.SendPhotoInfoToRVGrid 55
End Sub
Sub frmPicToRVgrid56_Click()
   wksPhotos.SendPhotoInfoToRVGrid 56
End Sub
Sub frmPicToRVgrid57_Click()
   wksPhotos.SendPhotoInfoToRVGrid 57
End Sub
Sub frmPicToRVgrid58_Click()
   wksPhotos.SendPhotoInfoToRVGrid 58
End Sub
Sub frmPicToRVgrid59_Click()
   wksPhotos.SendPhotoInfoToRVGrid 59
End Sub
Sub frmPicToRVgrid60_Click()
   wksPhotos.SendPhotoInfoToRVGrid 60
End Sub
Sub frmPicToRVgrid61_Click()
   wksPhotos.SendPhotoInfoToRVGrid 61
End Sub
Sub frmPicToRVgrid62_Click()
   wksPhotos.SendPhotoInfoToRVGrid 62
End Sub
Sub frmPicToRVgrid63_Click()
   wksPhotos.SendPhotoInfoToRVGrid 63
End Sub
Sub frmPicToRVgrid64_Click()
   wksPhotos.SendPhotoInfoToRVGrid 64
End Sub
Sub frmPicToRVgrid65_Click()
   wksPhotos.SendPhotoInfoToRVGrid 65
End Sub
Sub frmPicToRVgrid66_Click()
   wksPhotos.SendPhotoInfoToRVGrid 66
End Sub
Sub frmPicToRVgrid67_Click()
   wksPhotos.SendPhotoInfoToRVGrid 67
End Sub
Sub frmPicToRVgrid68_Click()
   wksPhotos.SendPhotoInfoToRVGrid 68
End Sub
Sub frmPicToRVgrid69_Click()
   wksPhotos.SendPhotoInfoToRVGrid 69
End Sub
Sub frmPicToRVgrid70_Click()
   wksPhotos.SendPhotoInfoToRVGrid 70
End Sub
Sub frmPicToRVgrid71_Click()
   wksPhotos.SendPhotoInfoToRVGrid 71
End Sub
Sub frmPicToRVgrid72_Click()
   wksPhotos.SendPhotoInfoToRVGrid 72
End Sub
Sub frmPicToRVgrid73_Click()
   wksPhotos.SendPhotoInfoToRVGrid 73
End Sub
Sub frmPicToRVgrid74_Click()
   wksPhotos.SendPhotoInfoToRVGrid 74
End Sub
Sub frmPicToRVgrid75_Click()
   wksPhotos.SendPhotoInfoToRVGrid 75
End Sub
Sub frmPicToRVgrid76_Click()
   wksPhotos.SendPhotoInfoToRVGrid 76
End Sub
Sub frmPicToRVgrid77_Click()
   wksPhotos.SendPhotoInfoToRVGrid 77
End Sub
Sub frmPicToRVgrid78_Click()
   wksPhotos.SendPhotoInfoToRVGrid 78
End Sub
Sub frmPicToRVgrid79_Click()
   wksPhotos.SendPhotoInfoToRVGrid 79
End Sub
Sub frmPicToRVgrid80_Click()
   wksPhotos.SendPhotoInfoToRVGrid 80
End Sub
Sub frmPicToRVgrid81_Click()
   wksPhotos.SendPhotoInfoToRVGrid 81
End Sub
Sub frmPicToRVgrid82_Click()
   wksPhotos.SendPhotoInfoToRVGrid 82
End Sub
Sub frmPicToRVgrid83_Click()
   wksPhotos.SendPhotoInfoToRVGrid 83
End Sub
Sub frmPicToRVgrid84_Click()
   wksPhotos.SendPhotoInfoToRVGrid 84
End Sub
Sub frmPicToRVgrid85_Click()
   wksPhotos.SendPhotoInfoToRVGrid 85
End Sub
Sub frmPicToRVgrid86_Click()
   wksPhotos.SendPhotoInfoToRVGrid 86
End Sub
Sub frmPicToRVgrid87_Click()
   wksPhotos.SendPhotoInfoToRVGrid 87
End Sub
Sub frmPicToRVgrid88_Click()
   wksPhotos.SendPhotoInfoToRVGrid 88
End Sub
Sub frmPicToRVgrid89_Click()
   wksPhotos.SendPhotoInfoToRVGrid 89
End Sub
Sub frmPicToRVgrid90_Click()
   wksPhotos.SendPhotoInfoToRVGrid 90
End Sub
Sub frmPicToRVgrid91_Click()
   wksPhotos.SendPhotoInfoToRVGrid 91
End Sub
Sub frmPicToRVgrid92_Click()
   wksPhotos.SendPhotoInfoToRVGrid 92
End Sub
Sub frmPicToRVgrid93_Click()
   wksPhotos.SendPhotoInfoToRVGrid 93
End Sub
Sub frmPicToRVgrid94_Click()
   wksPhotos.SendPhotoInfoToRVGrid 94
End Sub
Sub frmPicToRVgrid95_Click()
   wksPhotos.SendPhotoInfoToRVGrid 95
End Sub
Sub frmPicToRVgrid96_Click()
   wksPhotos.SendPhotoInfoToRVGrid 96
End Sub
Sub frmPicToRVgrid97_Click()
   wksPhotos.SendPhotoInfoToRVGrid 97
End Sub
Sub frmPicToRVgrid98_Click()
   wksPhotos.SendPhotoInfoToRVGrid 98
End Sub
Sub frmPicToRVgrid99_Click()
   wksPhotos.SendPhotoInfoToRVGrid 99
End Sub

Attribute VB_Name = "ExportingtoFile"
Option Explicit
Sub ExtractPhotos_ScreenObjectMethod()

    Dim chtObj As ChartObject
    Dim strDMhead As String, strDMfull As String, strPHfull As String, strPHhead As String
    Dim iDM As Integer, i As Integer, strNum As String, strNumPH As String, iCount As Integer
    Dim sPropertyName As String, iPhotoCount As Integer, strPassUsed As String, sHape As sHape
    Dim sPhCatHead As String, sPhCat As String, sPhCatTxt As String, bOnlyDM As Boolean, oAsk
    Dim strDestFolderPath As String, sLoanID As String
    
    iPhotoCount = wksData.Range("$A$2")   'if populated programatically, must also get photo count
    If iPhotoCount < 1 Then
        MsgBox ("There are no photos to extract")
        Exit Sub
    End If
    
    oAsk = MsgBox("Extract all photos?" & vbNewLine & vbNewLine & "Click YES to extract all photos." _
        & vbNewLine & "Click NO to extract only Photos categorized as Deferred Maintence and Life Safety.", vbYesNoCancel)
        If oAsk = vbCancel Then Exit Sub
        If oAsk = vbNo Then bOnlyDM = True
        
       

    'User to choose photo destination folder
    strDestFolderPath = BrowseFolder("Choose a folder to Extract the Photos into", ActiveWorkbook.Path, msoFileDialogViewDetails)
    If strDestFolderPath = "" Then Exit Sub
    If Right(strDestFolderPath, 1) <> "\" Then strDestFolderPath = strDestFolderPath & "\"

    On Error GoTo EarlyExit
    sPhCatHead = "PropertyInspectionCatagoryPhoto"
    strPHhead = "PropertyInspectionPhoto"
    wksPhotos.Unprotect wksData.Range("$A$53").Value
    
    'Get usable property name for filename
    sPropertyName = ClnPname(wksGenInfo.Range("PropertyName"))
    If Len(sPropertyName) = 0 Then sPropertyName = "MBA Inspection Form"
    'Get usable LoanID
    sLoanID = "_LoanID " & Trim(Right(wksGenInfo.Range("LoanIdentifier"), 15))
    If Len(sLoanID) = 8 Then sLoanID = ""
    
    Application.ScreenUpdating = False

    For i = 1 To iPhotoCount     'Up to 99 photos
        strNum = Right(0 & i, 2)            'Two digits photo number
        strPHfull = strPHhead & strNum      'Name of photo
        sPhCat = sPhCatHead & strNum        'Named range of photo caption
      
        'Check photo category
        If bOnlyDM = True Then
            If wksPhotos.Range(sPhCat) = "Life Safety" Or wksPhotos.Range(sPhCat) = "Deferred Maintenance" Then
                'Continue
            Else
                GoTo EarlyNextPhoto
            End If
        End If
            
                If IsPhotoNameOnSheet(strPHfull) = True Then       'Error protection, may not be necessary
                    Set sHape = wksPhotos.Shapes(strPHfull)
                Else
                    'Expected named photo not found, likely from populating programactially (poorly)
                    GoTo EarlyExitShapeName
                End If
                    
                iCount = iCount + 1
                Application.StatusBar = "Saving all photos, on number " & iCount
                If Len(wksPhotos.Range(sPhCat)) > 0 Then sPhCatTxt = " (" & wksPhotos.Range(sPhCat) & ")"
        
                'Add temp chart and resize to photo's aspect ratio
                Set chtObj = wksPhotos.ChartObjects.Add(100, 30, 400, 250)
                chtObj.Name = "TemporaryPictureChart"
                chtObj.Width = wksPhotos.Shapes(strPHfull).Width
                chtObj.Height = wksPhotos.Shapes(strPHfull).Height
                'Select and copy the referenced photo
                wksPhotos.Shapes.Range(Array(strPHfull)).Select
                Selection.Copy
                'Paste photo into the temp chart
                ActiveSheet.ChartObjects("TemporaryPictureChart").Activate
                ActiveChart.Paste
                'Export to file
                ActiveChart.Export FileName:=strDestFolderPath & CleanFileNameText(sPropertyName & sLoanID) & "_Photo" & strNum & sPhCatTxt & ".jpg", FilterName:="jpg"
                chtObj.Delete
                  
EarlyNextPhoto:
    Next i

    wksPhotos.Protect wksData.Range("$A$53").Value
    Application.StatusBar = False
    Application.ScreenUpdating = True
    MsgBox ("Done, " & iCount & " photos extracted into the folder " & strDestFolderPath)
    
    Exit Sub
EarlyExitShapeName:
    MsgBox ("The photos are not named as expected and photo extraction cannot continue.  Expected to find photo named " & strPHfull)
    
EarlyExit:
    Sheets("Photos").Protect Sheets("Data").Range("$A$53").Value
    Application.StatusBar = False
    Application.ScreenUpdating = True
    MsgBox ("An error occured")
End Sub
Function CleanFileNameText(sProposedFileName As String) As String
    Dim sTmp As String, myArray, X As Integer
    myArray = Array("<", ">", "|", "/", "*", "\", "?", """")
    
    For X = LBound(myArray) To UBound(myArray)
        sProposedFileName = Replace(sProposedFileName, myArray(X), "", 1)
    Next X

    CleanFileNameText = sProposedFileName
End Function
Sub CopyFiles(strFromPath As String, strToPath As String, FileExt As String)
    'As function to get multiple filetypes
    Dim fso As Object
    
    If Right(strFromPath, 1) <> "\" Then strFromPath = strFromPath & "\"
    On Error Resume Next
    Set fso = CreateObject("scripting.filesystemobject")
    fso.MoveFile Source:=strFromPath & FileExt, Destination:=strToPath
    Set fso = Nothing
    On Error GoTo 0
End Sub
Function BrowseFolder(Title As String, Optional InitialFolder As String = vbNullString, _
        Optional InitialView As Office.MsoFileDialogView = msoFileDialogViewList) As String
'Used for the Extract Photos function
    Dim V As Variant
    Dim InitFolder As String
    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = Title
        .InitialView = InitialView
        If Len(InitialFolder) > 0 Then
            If Dir(InitialFolder, vbDirectory) <> vbNullString Then
                InitFolder = InitialFolder
                If Right(InitFolder, 1) <> "\" Then
                    InitFolder = InitFolder & "\"
                End If
                .InitialFileName = InitFolder
            End If
        End If
        .Show
        On Error Resume Next
        Err.Clear
        V = .SelectedItems(1)
        If Err.Number <> 0 Then
            V = vbNullString
        End If
    End With
    BrowseFolder = CStr(V)
End Function
Function IsPhotoNameOnSheet(ByVal sPhotoObjectName As String) As Boolean
    Dim sHape As sHape
    On Error GoTo EarlyExit
    Set sHape = Sheets("Photos").Shapes(sPhotoObjectName)
    If Not sHape Is Nothing Then
        Set sHape = Nothing
        IsPhotoNameOnSheet = True
        Exit Function
    End If
EarlyExit:
    Set sHape = Nothing
    IsPhotoNameOnSheet = False
End Function
Function ClnPname(sPropertyName As String)

        sPropertyName = Replace(sPropertyName, "&", "_")
        sPropertyName = Replace(sPropertyName, "/", "_")
        sPropertyName = Replace(sPropertyName, "\", " ")
        'sPropertyName = Replace(sPropertyName, "-", " ")
        sPropertyName = Replace(sPropertyName, "'", "")
        sPropertyName = Replace(sPropertyName, "%", "")
        sPropertyName = Replace(sPropertyName, "#", "_")
        sPropertyName = Replace(sPropertyName, "  ", " ")
        sPropertyName = Trim(sPropertyName)
        If Len(sPropertyName) > 25 Then sPropertyName = Left(sPropertyName, 25)
        sPropertyName = Trim(sPropertyName)

ClnPname = sPropertyName
End Function
Public Function DoesFileExist(strFullFilePath As String) As Boolean
    DoesFileExist = (Dir(strFullFilePath) <> "")
End Function


Attribute VB_Name = "frmDM"
Attribute VB_Base = "0{27041A6D-6815-413C-BC9A-92789026EC93}{A89ADBD3-7241-4376-8F9B-11CE88E50A12}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CheckBox1_Click()
'Use description as photo caption
End Sub
Private Sub CheckBox2_Click()
'Life Safety
    With frmDM
        If .CheckBox2.Value = True Then
            .ListBox1.Selected(1) = True    'If Life Safety, must be Major
            .Repaint
        End If
    End With
End Sub
Private Sub ListBox1_Click()
    With frmDM
        If .ListBox1.Selected(0) = True Then
            .CheckBox2.Value = False    'do not allow Minor Life Safety
            .Repaint
        End If
    End With
End Sub
Private Sub CommandButton2_Click()
    'Cancel
    frmDM.CheckBox3.Value = False
    frmDM.Hide
End Sub
Private Sub CommandButton1_Click()
    'Continue
    Dim sTmp As String
    'Validate is complete
    With frmDM
        .TextBox1.Text = Trim(.TextBox1.Text)
        If Len(.TextBox1.Text) = 0 Then
            MsgBox ("Enter a description of the Deferred Maintenance item to continue")
            Exit Sub
        End If
        If .ListBox1.ListIndex = -1 Then
            MsgBox ("Make a Rating selection to continue.")
            Exit Sub
        End If
        
        'Validate estimated cost
        sTmp = Trim(.TextBox2.Text)
        If Len(sTmp) > 0 Then
            sTmp = Trim(sTmp)
            sTmp = Replace(sTmp, ",", "")
            'sTmp = Replace(sTmp, ".", "")
            sTmp = Replace(sTmp, "$", "")
            sTmp = Replace(sTmp, " ", "")
            .TextBox2.Text = sTmp
            If IsNumeric(sTmp) = False Then
                MsgBox ("Enter a Estimated Cost using only numbers")
                .Repaint
                Exit Sub
            End If
            If sTmp < 0 Then
                MsgBox ("Estimated Cost cannot be a negative number")
                .Repaint
                Exit Sub
            End If
            
        End If
    
    End With
    
    frmDM.CheckBox3.Value = True
    frmDM.Hide
End Sub
Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{C6AA9AEB-CDAA-4952-9F04-1A08F4D6CD23}{36AA1B1D-361E-46A1-8C19-DA31AE085805}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdCancel_Click()

    Unload Me
    
End Sub

Private Sub cmdEnter_Click()

    InsertLogo

End Sub
Private Sub UserForm_Initialize()
    Dim Left As Integer
    Dim Top As Integer
    
    txtPassword.Text = ""
    With Application
        Me.Left = .Left + (.Width - Me.Width) / 2
        If Me.Left < 0 Then
            Me.Left = .Left
        End If
        Me.Top = .Top + (.Height - Me.Height) / 2
        If Me.Top < 0 Then
            Me.Top = IIf(.Top < 0, 0, .Top)
        End If
    End With

End Sub

Attribute VB_Name = "frmPhotoCategory"
Attribute VB_Base = "0{8AD76964-56C5-4AD2-8DD1-E72813087E73}{88E7D839-CCBB-42E4-AFC7-73A8F56A07BA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
    'Continue Button
    If frmPhotoCategory.ListBox1.ListIndex = -1 Then
        MsgBox ("No category is selected")
        Exit Sub
    End If
    
    frmPhotoCategory.CheckBox1.Value = True     'Hidden below the buttons to indicate if user clicked Red X
    frmPhotoCategory.Hide
End Sub
Private Sub CommandButton3_Click()
''No photo category
    frmPhotoCategory.ListBox1.ListIndex = -1
    frmPhotoCategory.Repaint
    frmPhotoCategory.Hide
End Sub
Private Sub CommandButton4_Click()
    'Cancel button, will delete all selected photos
    Dim oAsk
    
    oAsk = MsgBox("Cancel Photo Import?", vbYesNo)
    If oAsk = vbNo Then Exit Sub
    
    frmPhotoCategory.CheckBox2.Value = True     'Hidden below the buttons to indicate if user clicked Red X
    frmPhotoCategory.Hide
End Sub

Attribute VB_Name = "frmPhotoNumber"
Attribute VB_Base = "0{DAD73D79-7E4E-454F-A824-182397A64299}{0217A14C-A6BB-4388-861F-67F61EDB5CF2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
'Continue
    If frmPhotoNumber.ListBox1.ListIndex = -1 Then
        MsgBox ("No photo number is selected")
        Exit Sub
    End If

    frmPhotoNumber.Hide
End Sub

Private Sub CommandButton2_Click()
    'Cancel
    frmPhotoNumber.Hide
End Sub
Private Sub CommandButton3_Click()
'Clear Referenced Photo
    frmPhotoNumber.CheckBox1.Value = True
    frmPhotoNumber.Hide
End Sub
Attribute VB_Name = "frmPrint"
Attribute VB_Base = "0{E8C1373D-84EF-4BB8-9F80-4BEC044BA382}{052A56BA-F61E-43B0-BB8C-9B4F6539E93F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub developer_Click()
'Developer button
    OpenDeveloperTabs
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Dim Left As Integer
    Dim Top As Integer

    lblPrinter = Application.ActivePrinter
    txtQty.Text = "1"
    With Application
        Me.Left = .Left + (.Width - Me.Width) / 2
        If Me.Left < 0 Then
            Me.Left = .Left
        End If
        Me.Top = .Top + (.Height - Me.Height) / 2
        If Me.Top < 0 Then
            Me.Top = IIf(.Top < 0, 0, .Top)
        End If
    End With
    
End Sub
Private Sub cmdPrint_Click()
    'Print button on frmPrint
    Dim WarnMsg As String
    Dim StrCopies As String
    Dim CollateCopies As Integer
    Dim Copies As Integer
    Dim i As Integer, iTabsToPrint As Integer

    On Error Resume Next
    
    StrCopies = txtQty.Text                 'number of copies entered
    Copies = CInt(StrCopies)                'Convert to Integer
    If Copies < 1 Then
        MsgBox ("Enter a number for Print Copies")
        Exit Sub
    End If
    iTabsToPrint = WorkSheetsSelected()     'Counts sheets checked
    If iTabsToPrint = 0 Then
        MsgBox "No Report Tabs are selected", vbInformation + vbOKOnly, "Print MBA Worksheets"
        Exit Sub
    End If
    If Err > 0 Then
        MsgBox "Enter a whole number for Print Copies.", vbExclamation + vbOKOnly, "Print MBA Worksheets"
        txtQty.SetFocus
        Exit Sub
    End If
    If chkRentRoll.Value Then
        WarnMsg = WarnMsg & "* Rent Roll" & vbCr & vbCr
        'WarnMsg = WarnMsg & vbCr & vbCr
        WarnMsg = WarnMsg & "Press OK to print selected worksheets or Cancel to return and set the print area on that sheet."
        If MsgBox(WarnMsg, vbQuestion + vbOKCancel, "Print MBA Worksheets") = vbCancel Then
            Exit Sub
        End If
    End If
    
    'New printing function method incorporates save as PDF and removes ridiculous default option of non-collated printing
    PrintWorksheets Copies, iTabsToPrint, False, ""

    Unload Me
End Sub
Private Sub cmdSaveAsPDF_Click()
    'Save as a PDF file

    Dim iTabsToPrint As Integer, sFullFileDest As String, i As Integer
    Dim oAsk, sURL As String, strDestFolderPath As String, sPropertyName As String, sLoanID As String
    Dim workbook_Name As Variant
    
    iTabsToPrint = WorkSheetsSelected()                     'Counts sheets checked
    If iTabsToPrint < 1 Then
        MsgBox "No Report Tabs are selected", vbInformation + vbOKOnly, "Save as PDF"
        Exit Sub
    End If
    
    On Error GoTo WasError:
    
    'User to choose destination folder of PDF
    workbook_Name = Application.GetSaveAsFilename(InitialFileName:=GetWorkBookNameAsPDF, FileFilter:="PDF (*.pdf), *.pdf", Title:="Save As PDF")
    If workbook_Name = False Then Exit Sub
        
    'Can continue, Pass to string var
    sFullFileDest = workbook_Name
    If Right(sFullFileDest, 4) <> ".pdf" Then sFullFileDest = sFullFileDest & ".pdf"
        
    'Send to Printing routine
    PrintWorksheets 1, iTabsToPrint, True, sFullFileDest    'Pass to printing sub
    
    pPrintingOrPDFing = False
    Unload Me
Exit Sub

WasError:
    
    sURL = "http://www.microsoft.com/downloads/details.aspx?familyid=4d951911-3e7e-4ae6-b059-a2e79ed87041"

    'check if required add-in is installed
    If Not IsPDFLibraryInstalled Then
        oAsk = MsgBox("There was an error.  It's possibly because this computer does not have an Add-in to export the separate tabs into a single PDF which can be downloaded at the below website." _
            & vbNewLine & vbNewLine & "Click OK to open the download website in Internet Explorer" & vbNewLine & vbNewLine & sURL, vbOKCancel)
            If oAsk = vbOK Then
                Dim IE As Object
                Set IE = CreateObject("InternetExplorer.Application")
                IE.navigate sURL
                IE.Visible = True
                Set IE = Nothing
                Exit Sub
            End If
        Exit Sub
    End If
    pPrintingOrPDFing = False
End Sub
Private Sub PrintWorksheets(ByVal Copies As Integer, NumberOfTabsToPrint As Integer, bExportAsPDF As Boolean, sFullFileDest As String)
'
'Arguments:
'       Copies          Integer specifying the number of copies to print
'
'Remarks:
'       Prints the selected worksheets.
'
'Return Value:
'       None.
'
'Revision History:
'       04/04/08 JW     Defined procedure.
'       12/01/17 BB    updated with sheet array so printing does not prompt for each page.
'
'Locals:
'================================================================================
    Dim nMapPgCount As Integer
    Dim anArrayOfTabs(), i As Integer, j As Integer
    Dim anArrayOfTabsString() As String
    
    NumberOfTabsToPrint = NumberOfTabsToPrint - 1
    If NumberOfTabsToPrint < 0 Then Exit Sub
    ReDim anArrayOfTabs(NumberOfTabsToPrint)
    ReDim anArrayOfTabsString(NumberOfTabsToPrint) As String    'different type var of same thing
    'Prepare array of tab names for printing/PDF
        If chkRatings.Value Then
            anArrayOfTabs(i) = wksMBARatings.Name
            anArrayOfTabsString(i) = wksMBARatings.Name
            i = i + 1
        End If
        If chkFannieRatings.Value Then
            anArrayOfTabs(i) = wksFannieRatings.Name
            anArrayOfTabsString(i) = wksFannieRatings.Name
            i = i + 1
        End If
        If chkGenInfo.Value Then
            anArrayOfTabs(i) = wksGenInfo.Name
            anArrayOfTabsString(i) = wksGenInfo.Name
            i = i + 1
        End If
        If chkPhysCond.Value Then
            anArrayOfTabs(i) = wksPhysCond.Name
            anArrayOfTabsString(i) = wksPhysCond.Name
            i = i + 1
        End If
        If chkPhotos.Value Then
            anArrayOfTabs(i) = wksPhotos.Name
            anArrayOfTabsString(i) = wksPhotos.Name
            i = i + 1
        End If
        If chkRentRoll.Value Then
            anArrayOfTabs(i) = wksRentRoll.Name
            anArrayOfTabsString(i) = wksRentRoll.Name
            i = i + 1
        End If

        If chkMgtInt.Value Then
            anArrayOfTabs(i) = wksMgtInterview.Name
            anArrayOfTabsString(i) = wksMgtInterview.Name
            i = i + 1
        End If
        If chkMultifamily.Value Then
            anArrayOfTabs(i) = wksMultifamily.Name
            anArrayOfTabsString(i) = wksMultifamily.Name
            i = i + 1
        End If
        If chkComp.Value Then
            anArrayOfTabs(i) = wksComp.Name
            anArrayOfTabsString(i) = wksComp.Name
            i = i + 1
        End If
        If chkFREAddendum.Value Then
            anArrayOfTabs(i) = wksFMAssmtAddendum.Name
            anArrayOfTabsString(i) = wksFMAssmtAddendum.Name
            i = i + 1
        End If
        If chkRepairs.Value Then
            anArrayOfTabs(i) = wksRepairs.Name
            anArrayOfTabsString(i) = wksRepairs.Name
            i = i + 1
        End If
        If chkSeniors.Value Then
            anArrayOfTabs(i) = wksSeniors.Name
            anArrayOfTabsString(i) = wksSeniors.Name
            i = i + 1
        End If
        If chkHospitals.Value Then
            anArrayOfTabs(i) = wksHospitals.Name
            anArrayOfTabsString(i) = wksHospitals.Name
            i = i + 1
        End If

    'Set Public var so some subs won't run when the sheet it Activated
    pPrintingOrPDFing = True

    'If prefilled programmatically, each tab must be selected to trigger macros to unhide potentially hidden tables.
    For j = 0 To UBound(anArrayOfTabsString())
        Application.ScreenUpdating = False
        Sheets(anArrayOfTabsString(j)).Select
    Next j

    'Actual printing/export
    If bExportAsPDF = True Then
        'user wants to export to file as a PDF
        Application.ScreenUpdating = False
        Sheets(anArrayOfTabsString).Select    'Select tabs first

        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, _
        FileName:=sFullFileDest, Quality:=xlQualityStandard, IncludeDocProperties:=False, IgnorePrintAreas:=False, OpenAfterPublish:=True
'        FileName:=sFullFileDest, Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=True   'Doc properties display in PDF reader Title isntead of filename - is't confusing
        wksTools.Select
        Application.ScreenUpdating = True
    Else
        'User wants to print out to paper
        Sheets(anArrayOfTabs).PrintOut Copies:=Copies   ', PrintToFile:=True, IgnorePrintAreas:=False
    End If
    
    pPrintingOrPDFing = False
Exit Sub

WasAnError:
MsgBox ("There was an error while Printing or Saving as a PDF")
End Sub
Private Function WorkSheetsSelected() As Integer
    'Counts worksheets boxes checked on frmPrint
    Dim Count As Integer

    If chkRatings.Value Then Count = Count + 1
    If chkFannieRatings.Value Then Count = Count + 1
    If chkGenInfo.Value Then Count = Count + 1
    If chkPhysCond.Value Then Count = Count + 1
    If chkComp.Value Then Count = Count + 1
    If chkPhotos.Value Then Count = Count + 1
    If chkMgtInt.Value Then Count = Count + 1
    If chkMultifamily.Value Then Count = Count + 1
    If chkRentRoll.Value Then Count = Count + 1
'    If chkMaps.Value Then Count = Count + 1
    If chkHospitals.Value Then Count = Count + 1
    If chkRepairs.Value Then Count = Count + 1
    If chkFREAddendum.Value Then Count = Count + 1
    If chkSeniors.Value Then Count = Count + 1

    WorkSheetsSelected = Count
    
End Function
Private Sub cmdCancel_Click()
    Unload Me
End Sub
Private Sub spnQty_SpinDown()
    Dim Count As Integer
    
    On Error Resume Next
    
    If IsNumeric(txtQty.Text) Then
        Count = txtQty.Text
        Count = Count - 1
        txtQty.Text = Count
    End If
    If Count < 1 Then
        txtQty.Text = 1
    End If
    
End Sub
Private Sub spnQty_SpinUp()
    Dim Count As Integer
    
    On Error Resume Next
    
    If IsNumeric(txtQty.Text) Then
        Count = txtQty.Text
        Count = Count + 1
        txtQty.Text = Count
    End If
End Sub
Private Function IsPDFLibraryInstalled() As Boolean
'Checks to see if library installed for PDF to file, Credits go to Ron DeBruin (http://www.rondebruin.nl/pdf.htm)
    IsPDFLibraryInstalled = (Dir(Environ("commonprogramfiles") & "\Microsoft Shared\OFFICE" & _
        Format(Val(Application.Version), "00") & "\EXP_PDF.DLL") <> "")
End Function
Private Sub cmdChgPrinter_Click()
    Dim sPrinter As String
    
    If Application.Dialogs(xlDialogPrinterSetup).Show Then
        lblPrinter = Application.ActivePrinter
    End If
    
End Sub
Function GetWorkBookNameAsPDF() As Variant
    GetWorkBookNameAsPDF = Left(ThisWorkbook.Name, (InStrRev(ThisWorkbook.Name, ".", -1, vbTextCompare) - 1)) & ".pdf"
End Function
Attribute VB_Name = "frmRV"
Attribute VB_Base = "0{364CF57D-2800-4473-BF33-E2D50A00BD72}{21645C8E-CCE9-4F71-A89B-BBD34C411F74}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CommandButton1_Click()
'Continue
    Dim strEstCost As String, strText As String, oAsk
       
    With frmRV
    
        'Inspector Coomment
        strText = .TextBox1.Text
        If Len(strText) = 0 Then
            MsgBox ("Enter a Comment to continue.")
            Exit Sub
        End If
        strText = Trim(strText)
        .TextBox1.Text = strText
        
        'Destination row
        If .OptionButton1.Value = True And .TextBox2.Text = "" Then
            MsgBox ("Select a row to update, or choose Add to new row")
            Exit Sub
        End If
        
        'Confirm status / Optional
        If .ListBox1.ListIndex = -1 Then
            MsgBox ("Select a Repair Status.")
            Exit Sub
        End If
    
    End With
        
        frmRV.CheckBox1.Value = True     'Hidden below the buttons to indicate if user clicked Red X
        frmRV.Hide

End Sub
Private Sub CommandButton2_Click()
'Cancel
    frmRV.Hide
    Unload frmRV
End Sub

Private Sub ListBox2_Click()

    Dim iIndex As Integer, iLen As Integer, iPos As Integer, sCapNew As String, sCapExist As String, oAsk
    
    With frmRV
    
        'Update the RV number
        iIndex = .ListBox2.ListIndex + 1      'If none selected, null is -1. Adding 1 works, 0 means no selection
        If iIndex > 0 Then
            .TextBox2.Text = "RV " & iIndex
        End If
        
        'Update RV item description
        iLen = Len(.ListBox2.Value)
        iPos = InStr(.ListBox2.Value, ":")
        iLen = iLen - iPos - 1
        
        .TextBox3.Text = Right(.ListBox2.Value, iLen)               'existing description, cleaned of prefix
        .ListBox1.Value = .ListBox2.List(iIndex - 1, 3)             'Carry over existing status
        
        'If use has no caption, prefill with caption from RV tab
        sCapNew = .TextBox1.Text
        sCapExist = .ListBox2.List(iIndex - 1, 1)
        
        If Len(sCapExist) > 0 Then
            If sCapNew <> sCapExist Then
                oAsk = MsgBox("The selected Repairs Verification row has an existing Inspector Comment." & vbNewLine & vbNewLine _
                & "Click OK to keep the existing Inspector Comment (" & sCapExist & ")", vbOKCancel)
                If oAsk = vbCancel Then
                    Exit Sub
                Else
                    .TextBox1.Text = sCapExist  'existing caption
                End If
            End If
        End If
        
        .Repaint
    End With
End Sub
Private Sub OptionButton1_Click()
    'Choose from existing list
    UpdateOptions
End Sub
Private Sub OptionButton2_Click()
    'Add to new row
    UpdateOptions
End Sub
Private Sub UpdateOptions()

    With frmRV
    
    If OptionButton1.Value = False Then
        'User inputting their own RV item description for a new row
        .ListBox2.BackColor = &H80000004    'Light grey
        .ListBox2.ForeColor = &H80000011    'Dark grey
        .ListBox2.Locked = True
        .ListBox2.Value = Null
        .TextBox2.Text = ""                 'Is RV number
        .TextBox3.Text = ""                 'Repair item description, user adds own text
        .TextBox3.ForeColor = vbBlack
        .TextBox3.BackColor = &H8000000E    'White
        .TextBox3.Locked = False
        .ListBox1.Value = Null
    Else
        'User adding comments to an existing RV item
        .ListBox2.BackColor = &H8000000E    'White
        .ListBox2.Locked = False
        .ListBox2.ForeColor = vbBlack
        .TextBox3.BackColor = &H80000004    'Light grey
        '.TextBox3.ForeColor = &H80000011    'Dark grey
        .TextBox3.Locked = True                'Is Repair item description
    End If

        .Repaint

    End With

End Sub
Attribute VB_Name = "frmStatus"
Attribute VB_Base = "0{90D262E7-55BE-49E7-8E58-3B7726559C85}{1CB080C3-E683-43B6-8F53-8F7D4AC92DCC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "mClipboardv2"
Option Explicit
#If VBA7 Then

Private Declare PtrSafe Function OpenClipboard Lib "User32" (ByVal hWnd As LongPtr) As LongPtr
Private Declare PtrSafe Function EmptyClipboard Lib "User32" () As LongPtr
Private Declare PtrSafe Function CloseClipboard Lib "User32" () As LongPtr
Private Declare PtrSafe Function IsClipboardFormatAvailable Lib "User32" (ByVal wFormat As LongPtr) As LongPtr
Private Declare PtrSafe Function GetClipboardData Lib "User32" (ByVal wFormat As LongPtr) As LongPtr
Private Declare PtrSafe Function SetClipboardData Lib "User32" (ByVal wFormat As LongPtr, ByVal hMem As LongPtr) As LongPtr
Private Declare PtrSafe Function GlobalAlloc Lib "kernel32.dll" (ByVal wFlags As Long, ByVal dwBytes As Long) As LongPtr
Private Declare PtrSafe Function GlobalLock Lib "kernel32.dll" (ByVal hMem As LongPtr) As LongPtr
Private Declare PtrSafe Function GlobalUnlock Lib "kernel32.dll" (ByVal hMem As LongPtr) As LongPtr
Private Declare PtrSafe Function GlobalSize Lib "kernel32" (ByVal hMem As LongPtr) As Long
Private Declare PtrSafe Function lstrcpy Lib "kernel32.dll" Alias "lstrcpyW" (ByVal lpString1 As Any, ByVal lpString2 As Any) As LongPtr

#Else

Private Declare Function OpenClipboard Lib "user32.dll" (ByVal hWnd As Long) As Long
Private Declare Function EmptyClipboard Lib "user32.dll" () As Long
Private Declare Function CloseClipboard Lib "user32.dll" () As Long
Private Declare Function IsClipboardFormatAvailable Lib "user32.dll" (ByVal wFormat As Long) As Long
Private Declare Function GetClipboardData Lib "user32.dll" (ByVal wFormat As Long) As Long
Private Declare Function SetClipboardData Lib "user32.dll" (ByVal wFormat As Long, ByVal hMem As Long) As Long
Private Declare Function GlobalAlloc Lib "kernel32.dll" (ByVal wFlags As Long, ByVal dwBytes As Long) As Long
Private Declare Function GlobalLock Lib "kernel32.dll" (ByVal hMem As Long) As Long
Private Declare Function GlobalUnlock Lib "kernel32.dll" (ByVal hMem As Long) As Long
Private Declare Function GlobalSize Lib "kernel32" (ByVal hMem As Long) As Long
Private Declare Function lstrcpy Lib "kernel32.dll" Alias "lstrcpyW" (ByVal lpString1 As Long, ByVal lpString2 As Long) As Long
#End If

'''''Public Sub SetClipboard(sUniText As String)
'''''' This original sub seems to work on 64-bit office and 32-bit but the vars are not declared properly. Commenting out and replacing with what
'''''' looks correct in case need to revert later.
''''''https://docs.microsoft.com/en-us/office/vba/access/Concepts/Windows-API/send-information-to-the-clipboard
''''''https://stackoverflow.com/questions/35416662/text-to-clipboard-in-vba-windows-10-issue
'''''#If VBA7 Then
'''''    Dim iStrPtr As LongPtr
'''''    Dim iLock As LongPtr
'''''#Else
'''''    Dim iStrPtr As Long
'''''    Dim iLock As Long
'''''#End If
'''''
'''''    Dim iLen As Long
'''''
''''''    Const GMEM_MOVEABLE As Long = &H2
''''''    Const GMEM_ZEROINIT As Long = &H40
''''''    Const CF_UNICODETEXT As Long = &HD
'''''
'''''    OpenClipboard 0&
'''''    EmptyClipboard
'''''    iLen = LenB(sUniText) + 2&
'''''    iStrPtr = GlobalAlloc(GMEM_MOVEABLE + GMEM_ZEROINIT, iLen)
'''''    iLock = GlobalLock(iStrPtr)
'''''    lstrcpy iLock, StrPtr(sUniText)
'''''    GlobalUnlock iStrPtr
'''''    SetClipboardData CF_UNICODETEXT, iStrPtr
'''''    CloseClipboard
'''''End Sub
'''''Public Function GetClipboard() As String
'''''#If VBA7 Then
'''''    Dim iStrPtr As LongPtr
'''''    Dim iLock As LongPtr
'''''#Else
'''''    Dim iStrPtr As Long
'''''    Dim iLock As Long
'''''#End If
'''''    Dim iLen As Long
'''''    Dim sUniText As String
'''''
'''''    Const CF_UNICODETEXT As Long = 13&
'''''
'''''    OpenClipboard 0&
'''''
'''''    If IsClipboardFormatAvailable(CF_UNICODETEXT) Then
'''''        iStrPtr = GetClipboardData(CF_UNICODETEXT)
'''''        If iStrPtr Then
'''''            iLock = GlobalLock(iStrPtr)
'''''            iLen = GlobalSize(iStrPtr)
'''''            sUniText = String$(iLen \ 2& - 1&, vbNullChar)
'''''            lstrcpy StrPtr(sUniText), iLock
'''''            GlobalUnlock iStrPtr
'''''        End If
'''''        GetClipboard = sUniText
'''''    End If
'''''
'''''    CloseClipboard
'''''End Function

Public Sub SetClipboard(sUniText As String)
' This original sub (above) seems to work on 64-bit office and 32-bit but the vars are not declared properly by VBA7 or not. Commenting out and replacing with what
' looks correct in case need to revert later.
'https://docs.microsoft.com/en-us/office/vba/access/Concepts/Windows-API/send-information-to-the-clipboard
'https://stackoverflow.com/questions/35416662/text-to-clipboard-in-vba-windows-10-issue
#If VBA7 Then
    Dim iStrPtr As LongPtr
    Dim iLock As LongPtr
    Dim iLen As LongPtr
    Const GMEM_MOVEABLE As LongPtr = &H2
    Const GMEM_ZEROINIT As LongPtr = &H40
    Const CF_UNICODETEXT As LongPtr = &HD
#Else
    Dim iStrPtr As Long
    Dim iLock As Long
    Dim iLen As Long
    Const GMEM_MOVEABLE As Long = &H2
    Const GMEM_ZEROINIT As Long = &H40
    Const CF_UNICODETEXT As Long = &HD
#End If

    OpenClipboard 0&
    EmptyClipboard
    iLen = LenB(sUniText) + 2&
    iStrPtr = GlobalAlloc(GMEM_MOVEABLE + GMEM_ZEROINIT, iLen)
    iLock = GlobalLock(iStrPtr)
    lstrcpy iLock, StrPtr(sUniText)
    GlobalUnlock iStrPtr
    SetClipboardData CF_UNICODETEXT, iStrPtr
    CloseClipboard
End Sub
Public Function GetClipboard() As String
#If VBA7 Then
    Dim iStrPtr As LongPtr
    Dim iLock As LongPtr
    Dim iLen As LongPtr
    Const CF_UNICODETEXT As LongPtr = 13&
#Else
    Dim iStrPtr As Long
    Dim iLock As Long
    Dim iLen As Long
    Const CF_UNICODETEXT As Long = 13&
#End If
    
    Dim sUniText As String

    OpenClipboard 0&

    If IsClipboardFormatAvailable(CF_UNICODETEXT) Then
        iStrPtr = GetClipboardData(CF_UNICODETEXT)
        If iStrPtr Then
            iLock = GlobalLock(iStrPtr)
            iLen = GlobalSize(iStrPtr)
            sUniText = String$(iLen \ 2& - 1&, vbNullChar)
            lstrcpy StrPtr(sUniText), iLock
            GlobalUnlock iStrPtr
        End If
        GetClipboard = sUniText
    End If

    CloseClipboard
End Function
Attribute VB_Name = "modMain"
Option Explicit
Public Const apAppTitle As String = "MBA Standard Inspection Form"
Public Const apPhotoCommentStartRow = 29
Public Const apPhotoCommentInterval = 27
Public Sub FeedBackBegin(ByRef sCaption As String)
    Application.StatusBar = sCaption
    With frmStatus
        '.StartUpPosition = 0
        .Left = Application.Left + (Application.Width / 2)
        .Top = Application.Left + (Application.Height / 2)
        .Label1.Caption = sCaption
        .Show vbModeless
        .Repaint
    End With
End Sub
Public Sub FeedBackEnd()
    frmStatus.Hide
    Unload frmStatus
    Application.StatusBar = False
End Sub
Public Sub FeedBackBeginHold(ByRef sCaption As String)
    Application.StatusBar = sCaption
    With frmStatus
        '.StartUpPosition = 0
        .Left = Application.Left + (Application.Width / 2)
        .Top = Application.Left + (Application.Height / 2)
        .Label1.Caption = sCaption
        .Repaint
        .Show vbModeless
        '.Show vbModal
    End With
    Application.OnTime Now + TimeValue("0:00:01"), "FeedBackEnd"
End Sub
Sub PhysCondUnprotect()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
    wksPhysCond.Unprotect sPassword
End Sub
Sub PhysCondProtect()
    Dim sPassword As String
    
    If Not wksPhysCond.ProtectContents Then
    
        sPassword = wksData.Range("$A$53").Value
        wksPhysCond.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
End Sub
Sub GenInfoUnprotect()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
    wksGenInfo.Unprotect sPassword
End Sub
Sub GenInfoProtect()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
    wksGenInfo.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
End Sub
Public Sub FixOptionCase(ByRef Target As Range)
'
'Arguments:
'       Target          Range object specifying the cell just changed.
'
'Remarks:
'       Fixes potential case problems in listbox cells with short responses.
'       With the responses, the user may simply type in "no" or "yes" instead
'       of using autocomplete. When this is done, Excel simply accepts the
'       value entered and soes not repair the case itself.
'
'       FixOptionCase concerts all cases of "no" to "No" and "yes" to "Yes".
'
'       The static InFix prevents the endless loop that can occur when
'       Target's value is changed causing another invocation of this routine.
'
'Return Value:
'       None. Since Target is passed by reference, caller gets the changed
'       Value.
'
'Revision History:
'       04/05/08 JW     Defined Procedure.
'
'Locals:
    Static InFix As Boolean
'===================================================================================
    On Error Resume Next
    
    If Not InFix Then
        InFix = True
                If LCase(Target.Value) = "no" Then
            Target.Value = "No"
        ElseIf LCase(Target.Value) = "yes" Then
            Target.Value = "Yes"
        End If
        InFix = False
    End If
End Sub

Public Function IsValidEmail(Value As String) As Boolean
'
'Arguments:
'           Value           String containing the email address to test.
'
'Remarks:
'           IsValidEmail instantiates an Regular Expression object, sets
'           the pattern for email address validation and tests Value
'           to determine its validity.
'
'Return Value:
'           Returns True if Value contains a correctly formed email addres;
'           otherwise, False is returned.
'
'Locals:
    Dim RE As Object
'===========================================================================
    On Error Resume Next
    
    Set RE = CreateObject("vbscript.RegExp")
    RE.Pattern = "^[a-zA-Z0-9\._-]+@([a-zA-Z0-9_-]+\.)+([a-zA-Z]{2,4})$"
    IsValidEmail = RE.Test(Value)
    Set RE = Nothing
End Function

Public Sub SpellCheck()
'
'Remarks:
'           Note: Rather than use the Range objects CheckSpellng method,
'           the range is first activated then the Selection object's
'           CheckSpelling method is used. When using the Range object's
'           CheckSpelling method, misspellings were missed.
'
'           Spell checking off ranges avoids the repeated prompts to repair
'           hidden dropdown list choices that are abbreviated.
'
'           5/7/09:
'           NOTE Found that a selection string like "$M$23, $M$25" was
'           unreliable in some circumstances, like aborting spell check.
'           Removing the embedded spaces fixed selection issue.
'
'Revision History:
'   090507 JW   Revised the string constructed for photo caption selection.
    '2018 BB vastly improved speed
'
'Locals:
    Dim CurrRange As Range
    Dim sPassword As String
    Dim sRange As String
    Dim sD As String                     ' Delimiter
    Dim RangeAddr As String
    Dim i As Integer, iIndexOfRows As Integer
    Dim PicCmtRow As Integer, Arr() As Variant
    Dim oAsk

    On Error Resume Next
    
    'Prompt user to confirm
    oAsk = MsgBox("Check Spelling on all Report Tabs?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub

    sPassword = wksData.Range("$A$53").Value
    
    If wksGenInfo.Visible = xlSheetVisible Then
        With wksGenInfo
            .Activate
            Application.ScreenUpdating = True
                'PropertyName, PropertyAddress, PropertyStreetAddress2, PropertyCity, PartyRollServicerName, InvestorIdentified, PartyRoleSiteInspectionCompanyName,
                'PartyRoleInspectionSchedulingContactCompanyName, PartyRoleSiteInspectorFirstName, PartySiteInspectionCompanyPhoneNumber, PartyRoleManagementCompanyName,
                'InspectionContactOnSiteContactTitle, InstructionDetail, InspectorToResponsiblePartyComments, DownDarkSpaceDescription, ConcessionsDescription, PartyRoleFranchisorName,
                'OperationsAndMaintenancePlanComments , AreaCompetitor01Description, AreaCompetitor02Description, AreaDescription, AdditionalCollateralDescription
                .Unprotect Password:=sPassword      'Unprotect here since macros run during selection which can lock
                Erase Arr
                Arr = Array("H12", "H13", "H14", "H15", "I19", "AA20", "AA30", "H30", "AA31", "AA32", "H36", _
                            "H38", "B43", "B50", "T76", "W80", "J81", "B94", "I118", "I121", "B128", "B138")
                For i = 0 To UBound(Arr())
                    If HasComment(.Range(Arr(i))) = True Then
                        Application.ScreenUpdating = True
                        pPauseEventsGI = True
                        wksGenInfo.Range(Arr(i)).Select
                        .Unprotect Password:=sPassword      'Unprotect here since macros run during selection which can lock
                        Selection.CheckSpelling SpellLang:=1033
                        Application.ScreenUpdating = False
                    End If
                Next i

                'Spellcheck any visible CapEx descripitons
                Application.ScreenUpdating = True
                iIndexOfRows = wksData.Range("CapExCount").Value
                If iIndexOfRows > 0 Then
                    .Range("A1").Select                         'Scrolls user up, deselects other cells
                    For i = 1 To iIndexOfRows
                        If HasComment(.Range("PropertyCapitalExpenditureDescription" & Right("0" & i, 2))) = True Then
                            Application.ScreenUpdating = True
                            pPauseEventsGI = True
                            .Range("PropertyCapitalExpenditureDescription" & Right("0" & i, 2)).Activate
                            .Unprotect Password:=sPassword
                            Selection.CheckSpelling SpellLang:=1033
                        End If
                    Next i
                End If

            .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
            .Range("A1").Select                         'Scrolls user up
            .Range("SiteAssessmentDate").Activate       'Selects non-top
        End With
        pPauseEventsGI = False
    End If

    If wksPhysCond.Visible = xlSheetVisible Then
        With wksPhysCond
            .Activate
                Application.ScreenUpdating = True

            Erase Arr
            Arr = Array("J13", "J20", "J27", "J34", "J40", "J47", "J54", "J61", "J68", "J75", "J82", "J85", "J88")
            For i = 0 To UBound(Arr())
                If HasComment(.Range(Arr(i))) = True Then
                    Application.ScreenUpdating = True
                    pPauseEventsPhysCond = True
                    wksPhysCond.Range(Arr(i)).Select
                    If .ProtectContents Then .Unprotect sPassword
                    Selection.CheckSpelling SpellLang:=1033
                    Application.ScreenUpdating = False
                End If
            Next i

             'Spellcheck ' DeferredMaintenanceItemDescription 1-50
            Application.ScreenUpdating = True
            iIndexOfRows = wksData.Range("DMCount").Value
            If iIndexOfRows > 0 Then
                .Range("A1").Select                         'Scrolls user up, deselects other cells
                For i = 1 To iIndexOfRows
                    If HasComment(.Range(DMdsc & Right("0" & i, 2))) = True Then
                        Application.ScreenUpdating = True
                        pPauseEventsPhysCond = True
                        .Range(DMdsc & Right("0" & i, 2)).Activate
                        '.Unprotect Password:=sPassword
                        If .ProtectContents Then .Unprotect sPassword
                        Selection.CheckSpelling SpellLang:=1033
                    End If
                Next i
            End If

            .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
            .Range("A1").Select
            .Range("PropertyComponentDetailConditionRatingCurbAppealType").Activate
        End With
        pPauseEventsPhysCond = False
    End If

    If wksPhotos.Visible = xlSheetVisible Then
        If wksData.Range("PicCount").Value > 0 Then
            With wksPhotos
                .Activate
                Application.ScreenUpdating = True
                iIndexOfRows = wksData.Range("PicCount")
                If iIndexOfRows > 0 Then
                    For i = 1 To iIndexOfRows
                        If HasComment(.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2))) = True Then
                            Application.ScreenUpdating = True
                            .Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Activate
                            .Unprotect Password:=sPassword
                            Selection.CheckSpelling SpellLang:=1033
                            Application.ScreenUpdating = False
                        End If
                    Next i

                    .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
                    Application.ScreenUpdating = True
                    .Range("A1").Select
                    If iIndexOfRows > 0 Then
                        .Range("PropertyInspectionCaptionPhoto01").Activate
                    Else
                        .Range("R10").Activate
                    End If
                End If
            End With
        End If
    End If

    With wksRentRoll
        If .Visible = xlSheetVisible Then
        .Activate
        .Range("A1").Select
        .Range("RentRollAttachedIndicator").Activate
        End If
    End With

    With wksMgtInterview
        If .Visible = xlSheetVisible Then
            .Activate
            pPauseEventsMI = True
            .Unprotect Password:=sPassword
            Erase Arr
            Arr = Array("B25", "B30", "B50", "B55", "B60", "B65", "B70", "B75", "B81", "B84")
                For i = 0 To UBound(Arr())
                    If HasComment(.Range(Arr(i))) = True Then
                        Application.ScreenUpdating = True
                        .Range(Arr(i)).Select
                        Selection.CheckSpelling SpellLang:=1033
                        Application.ScreenUpdating = False
                    End If
                Next i

            .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
            Application.ScreenUpdating = True
            .Range("A1").Select
            .Range("PartyRoleInformationSourcePhoneNumber").Activate
            pPauseEventsMI = False
        End If
    End With

    With wksMultifamily
        If .Visible = xlSheetVisible Then
        .Activate
        Application.ScreenUpdating = True
        .Unprotect Password:=sPassword
'        Application.ScreenUpdating = True

        .Range("B117").Activate
        Selection.CheckSpelling

        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        .Range("A1").Select
        .Range("MeasurementIdentifierBedroomsCount01").Activate
        End If
    End With

    With wksComp
        If .Visible = xlSheetVisible Then
        .Activate
        Application.ScreenUpdating = True
        Erase Arr
        Arr = Array("B26", "B33", "B38", "B43", "B48", "B54", "B59")
        For i = 0 To UBound(Arr())
            If HasComment(.Range(Arr(i))) = True Then
                Application.ScreenUpdating = True
                pPauseEventsFNMA = True
                .Range(Arr(i)).Select
                .Unprotect Password:=sPassword      'Unprotect here since macros run during selection which can lock
                Selection.CheckSpelling SpellLang:=1033
                Application.ScreenUpdating = False
                End If
            Next i

        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Application.ScreenUpdating = True
        .Range("A1").Select
        .Range("LimitationComment").Activate
        pPauseEventsFNMA = False
        End If
    End With

    With wksFMAssmtAddendum
    If .Visible = xlSheetVisible Then
        .Activate
        
        Erase Arr
        Arr = Array("B13", "B21", "B27")
        For i = 0 To UBound(Arr())
            If HasComment(.Range(Arr(i))) = True Then
                Application.ScreenUpdating = True
                .Range(Arr(i)).Select
                .Unprotect Password:=sPassword
                Selection.CheckSpelling SpellLang:=1033
                .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
            End If
        Next i
        Application.ScreenUpdating = True
        .Range("A1").Select
        .Range("AssessmentAddendumDeferredMaintenanceComments").Activate
    End If
    End With


    With wksRepairs
        If .Visible = xlSheetVisible Then
        .Activate
        Application.ScreenUpdating = True
        .Range("RepairVerificationGeneralComments").Activate
        .Unprotect Password:=sPassword      'Unprotect here since macros run during selection which can lock
         Selection.CheckSpelling SpellLang:=1033

        iIndexOfRows = wksData.Range("RVrowsVisible")
        If iIndexOfRows > 0 Then
            'check Item descripition first
            For i = 1 To iIndexOfRows
                If HasComment(.Range("RepairDescriptionAndLocation" & i)) = True Then
                    Application.ScreenUpdating = True
                    .Range("RepairDescriptionAndLocation" & i).Activate
                    .Unprotect Password:=sPassword
                    Selection.CheckSpelling SpellLang:=1033
                    Application.ScreenUpdating = False
                End If
            Next i
            
            'Check Insp comments
            For i = 1 To iIndexOfRows
                If HasComment(.Range("RepairInspectorComments" & i)) = True Then
                    Application.ScreenUpdating = True
                    .Range("RepairInspectorComments" & i).Activate
                    .Unprotect Password:=sPassword
                    Selection.CheckSpelling SpellLang:=1033
                    Application.ScreenUpdating = False
                End If
            Next i
            
        End If
        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        .Range("A1").Select
        .Range("RV_PropertyName").Activate
        End If
    End With

    With wksSeniors
        If .Visible = xlSheetVisible Then
        .Activate
        Application.ScreenUpdating = True
        
            Erase Arr
            Arr = Array("Q16", "Q25", "Q34", "V53", "Q57", "V60", "Z67", "Z68", "Z69", "Z70", "Z71", "Z72", "Z73", "Z74", "Z75", "Z76", "Z77", "V79", "V80", _
                        "V81", "V83", "V85", "V86", "V87", "V88", "V90", "V91", "V92", "B94", "B97", "Z102", "Z103", "Z104", "Z105", "V112", "V113", "V114", _
                        "V115", "V116", "V117", "V118", "V119", "V122", "V123", "V126", "V127", "V128", "V129", "Z135", "B140", "B144", "B148", "B152", "X159", _
                        "X160", "X161", "X162", "X163", "X164", "X165", "X166", "X167", "X169", "X170", "W172", "B177", "B178", "B179", "B180", "B181", "T177", _
                        "T178", "T179", "T180", "T181", "AC177", "AC178", "AC179", "AC180", "AC181", "Q186", "Q187", "Q188", "V194", "V195", "V196", "V197", _
                        "V198", "V199", "V200", "V201", "Q208", "V212", "V213", "V214", "V215", "V216", "AA219", "AA220", "AA221", "AA222", "AA223", "B228", "B232")

            .Unprotect Password:=sPassword
            For i = 0 To UBound(Arr())
                If HasComment(.Range(Arr(i))) = True Then
                    Application.ScreenUpdating = True
                    .Range(Arr(i)).Select
                    .Unprotect Password:=sPassword
                    Selection.CheckSpelling SpellLang:=1033
                    Application.ScreenUpdating = False
                End If
            Next i
        
        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Application.ScreenUpdating = True
        .Range("A1").Select
        .Range("SHSInspectionSiteComments").Activate
        End If
    End With
     
    With wksHospitals
        If .Visible = xlSheetVisible Then
        .Activate
        
        Erase Arr
        Arr = Array("T30", "T31", "T32", "T33", "B44", "B53", "K55")
        For i = 0 To UBound(Arr())
            If HasComment(.Range(Arr(i))) = True Then
                Application.ScreenUpdating = True
                .Range(Arr(i)).Select
                .Unprotect Password:=sPassword
                Selection.CheckSpelling SpellLang:=1033
                Application.ScreenUpdating = False
            End If
        Next i

        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        .Range("A1").Select
        .Range("NewPatientsAcceptedIndicator").Activate
        End If
    End With
   
    wksTools.Activate
    MsgBox ("Spell Check complete")
    
End Sub
Function HasComment(rDest As Range) As Boolean
    'Check if has content before executing select for spellcheck
    If Len(rDest.Text) > 0 Then
        HasComment = True
    Else
        HasComment = False
    End If
End Function

Public Sub MatchGIOverallRatingWithFannieTabRating(bChangedOnFannieTab As Boolean)
    'Sync up Fannie Mae overall rating with GI rating
'    Dim iA As Integer, iB As Integer
    Dim iA As String, iB As String

    iA = Trim(wksGenInfo.Range("MBAOverallPropertyRatingType"))
    iB = Trim(wksComp.Range("OverallPropertyRatingFollowUpBasisType"))

'    'Protect if user enters non 1-5 character as rating
    If Len(iA) > 0 And Not IsNumeric(iA) Then Exit Sub
    If Len(iB) > 0 And Not IsNumeric(iB) Then Exit Sub

    Application.ScreenUpdating = False
    If bChangedOnFannieTab Then
            'Making a change on GI tab from another tab tirggers a number of events which causes Excel instability
            ' turning off GI tab events, and calling checkratings from here to make work
            pPauseEventsGI = True
            wksGenInfo.Range("MBAOverallPropertyRatingType") = iB
            CheckOverallRatingAgainstComponentRatings   'this here
    Else
        pPauseEventsFNMA = True
        wksComp.Range("OverallPropertyRatingFollowUpBasisType") = iA
    End If

    pPauseEventsFNMA = False
    pPauseEventsGI = False
    Application.ScreenUpdating = True
End Sub
Public Sub CheckOverallRatingAgainstComponentRatings()
    'BB11032017 v3 addition validate overall rating against Physical Condition & DM
    ' invoked if user adjusts overall rating, scale, or rating on PhyConDM tab
    Dim iRating As Integer, bNotBlank As Boolean, strType As String
    Dim oAsk, bTmp As Boolean, Arr() As Variant, i As Integer, sName As String
    

    'Hijack this sub to add user alert if Fannie Mae tab shown and user changes type to MBA
    If Application.ActiveSheet.Name = "General Info" Then    'only if user is on GenInfo tab
        strType = wksGenInfo.Range("MBAOverallPropertyRatingScale")
        If strType = "MBA" And wksComp.Visible = xlSheetVisible Then
            oAsk = MsgBox("The Fannie Mae Assmt Addendum report tab is currently shown which indicates the Fannie Mae rating scale is " _
                & "to be used instead of the MBA rating scale.  Are you sure you want to change the Rating Scale indicator from Fannie Mae to MBA?  Refer to the MBA Property Inspection Reference Guide for more information." _
                & vbNewLine & vbNewLine & "Click Yes to change to the MBA rating scale" & vbNewLine & "Click No to continue using the Fannie Mae rating scale.", vbYesNo + vbExclamation, "Potential Rating Scale Conflict")
             If oAsk = vbNo Then
                bTmp = pPauseEventsGI   'Pass to var so can be set back again if needed
                pPauseEventsGI = True
                wksGenInfo.Range("MBAOverallPropertyRatingScale") = "Fannie Mae"
                pPauseEventsGI = bTmp
            End If
        End If
        Exit Sub
    End If

    'Continue with sub
    If Len(wksGenInfo.Range("MBAOverallPropertyRatingType")) < 1 Then Exit Sub
    iRating = wksGenInfo.Range("MBAOverallPropertyRatingType")
    bNotBlank = False
    
    'Check each range in PhysCond component ratings
    Erase Arr
    Arr = Array("PropertyComponentDetailConditionRatingCurbAppealType", "PropertyComponentDetailConditionRatingSiteType", "PropertyComponentDetailConditionRatingMechanicalType", _
        "PropertyComponentDetailConditionRatingBuildingExteriorsType", "PropertyComponentDetailConditionRatingBuildingRoofsType", "PropertyComponentDetailConditionRatingOccupiedSpaceType", _
        "PropertyComponentDetailConditionRatingVacantSpaceType", "PropertyComponentDetailConditionRatingInteriorCommonAreasType", "PropertyComponentDetailConditionRatingAmenitiesType", _
        "PropertyComponentDetailConditionRatingEnvironmentalType")
        
        For i = 0 To UBound(Arr())
            sName = Arr(i)
            If Not IsEmpty(wksPhysCond.Range(sName)) Then
                If CheckRating(iRating, wksPhysCond.Range(sName)) = True Then
                    GoTo ExitGood
                Else
                    bNotBlank = True
                End If
            End If
        Next i

    If bNotBlank = False Then Exit Sub
    If iRating = 0 Then Exit Sub    'somehow blank goes through as 0
    
    'If There is Down space then may have a 4 or 5 traditionally in component ratings which now is input as "Yes" or "No"
    'Allow user to have overall rating of 4 or 5 if there are down units, and no other 4 or 5 component rating
    If iRating = 4 Or iRating = 5 Then
        If wksPhysCond.Range("PropertyComponentDetailConditionRatingDownSpaceType").Value = "Yes" Then
            Exit Sub
        End If
    End If
        
    MsgBox ("The Overall Property rating is " & iRating & " but there is not a Representative Component rating of " & iRating & " input on the Physical Condition & DM tab.")

ExitGood:
End Sub
Public Sub AlertUserIfFannieRatingScale()
    Dim strType As String, oAsk
    strType = wksGenInfo.Range("MBAOverallPropertyRatingScale")
    
    If strType = "Fannie Mae" And wksComp.Visible <> xlSheetVisible Then
    oAsk = MsgBox("The Fannie Mae Assmt Addendum report tab is currently not shown; therefore, the Fannie Mae rating scale may not be appropriate.  Refer to the MBA Property Inspection Reference Guide for more information.", vbExclamation, "Potential Rating Scale Conflict")
    End If
End Sub

Function CheckRating(iOverallRating As Integer, sTestRating As String) As Boolean
    If sTestRating = "Not Applicable" Or sTestRating = "Not Accessible" Then Exit Function
    
    If iOverallRating = sTestRating Then
        CheckRating = True
        Exit Function
    End If
    CheckRating = False
End Function
Sub OpenDeveloperTabs()
    'This is called from a barely visible button on the print popup
    Dim sPass As String
    sPass = InputBox("Enter password to show the developer's Data & Resources tabs", "Password")
    If sPass <> wksData.Range("$A$53").Value Then Exit Sub
    
    wksData.Visible = xlSheetVisible
    wksResources.Visible = xlSheetVisible
    wksData.Select
End Sub

Sub ToggleCutCopyAndPaste(Allow As Boolean)
'
'Remarks:
'   Use this procedure to enable or disable cut, copy, paste and paste special.
'
'Revision History:
'   09/24/08    Added to MBA Master Inspection workbook
'   v3 in 2018 (BB) - added ability to copy/paste using keyboard, safely
'============================================================================
    On Error Resume Next

    ' Activate/deactivate drag and drop ability
    Application.CellDragAndDrop = Allow

    ' MENU: Activate/deactivate cut, copy, paste and pastespecial
'    Call EnableMenuItem(21, Allow) ' cut
'    Call EnableMenuItem(19, Allow) ' copy
'    Call EnableMenuItem(22, Allow) ' paste
'    Call EnableMenuItem(755, Allow) ' pastespecial  (Excel 2003-07)
'    Call EnableMenuItem(6002, Allow) ' Paste
'    Call EnableMenuItem(21437, Allow) ' pastespecial (Excel 2013)
    Call EnableMenuItem("Cut", Allow) ' cut
    Call EnableMenuItem("Copy", Allow) ' copy
    Call EnableMenuItem("Paste", Allow) ' paste
'    Call EnableMenuItem("Paste Special...", Allow) ' pastespecial

    ' KEYBOARD SHORTCUTS: Activate/deactivate cut, copy, paste and pastespecial
    With Application
        Select Case Allow
        Case Is = False
            .OnKey "^c", "CopyFromRangeWorkaround"
            .OnKey "^v", "PasteAsValuesWorkaround"  'new routine to simulate paste as cleaned text
            .OnKey "^x", "CutCopyPasteDisabled"
            .OnKey "+{DEL}", "CutCopyPasteDisabled"
            .OnKey "^{INSERT}", "CutCopyPasteDisabled"
        Case Is = True
            .OnKey "^c"
            .OnKey "^v"
            .OnKey "^x"
            .OnKey "+{DEL}"
            .OnKey "^{INSERT}"
        End Select
    End With
End Sub
Sub CopyFromRangeWorkaround()
'If an entire cell/range is copied this sub is called so is appropriate to copy entire cell contents to clipboard
'https://desmondoshiwambo.wordpress.com/2012/02/23/how-to-copy-and-paste-text-tofrom-clipboard-using-vba-microsoft-access/
    Dim rCell As Range, sCellText As String
    On Error GoTo EarlyExit
    Set rCell = Selection                       'Set destination range
    Set rCell = rCell.Cells(1, 1)               'Top left of selection
    
    'pass to clipboard
'    PassTextToClipboard_LB rCell.Text       'Late Binding
'    PassTextToClipboard_EB rCell.Text       'Early Binding

    'method compatible with Windows 10, Office 365, Excel 32 and 64 bit
    'mClipboard.SetText rCell.Text       'method compatible with Windows 10, Office 365, Excel 32 and 64 bit (potentially causes Excel to crash)
    SetClipboard rCell.Text
    
    
EarlyExit:
End Sub

Sub PasteAsValuesWorkaround()

    Dim rCell As Range, sCellText As String
    
    On Error GoTo EarlyExit
'    sCellText = GetTextFromClipboard()
'    sCellText = mClipboard.GetText      'method compatible with Windows 10, Office 365, Excel 32 and 64 bit (potentially causes Excel to crash)
    sCellText = GetClipboard            'try2 to prevent Excel Crash

    'Clean and place text into the destination
    Set rCell = Selection                       'Set destination range
    Set rCell = rCell.Cells(1, 1)               'Top left of selection
    rCell.Value = CleanString(sCellText)        'Place the CLEANED text into the selected field

       
    Exit Sub
EarlyExit:
Application.CutCopyMode = False
End Sub

'Function GetTextFromClipboard() As String
''Gets clipboard data, cleans, passes to range. Using late binding
'  Dim objClipboard As Object
'  Set objClipboard = CreateObject("new:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
'
'  objClipboard.GetFromClipboard
'  GetTextFromClipboard = objClipboard.GetText
'
'  Set objClipboard = Nothing
'End Function

'Sub PassTextToClipboard_LB(ByVal inText As String)
'    'Late binding to copy text to clipboard
'
'    On Error GoTo EarlyExit
'
'    Dim objClipboard As Object
'    Set objClipboard = CreateObject("new:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
'    objClipboard.SetText inText
'    objClipboard.PutInClipboard
'    'Debug.Print objClipboard.GetFromClipboard
'    'Debug.Print "Copying: " & objClipboard.GetText
'
'    Set objClipboard = Nothing
'
'EarlyExit:
'End Sub
'Sub PassTextToClipboard_EB(ByVal inText As String)
'' Early binding (requires reference to MSForms 2.0 Obect library)
'  Dim objClipboard As MSForms.DataObject
'
'  Set objClipboard = New MSForms.DataObject
'  objClipboard.SetText inText
'  objClipboard.PutInClipboard
'
'  Set objClipboard = Nothing
'End Sub
'Sub EnableMenuItem(ctlId As Integer, Enabled As Boolean)

Sub EnableMenuItem(sItemCaption As String, Enabled As Boolean)
'
'Remarks:
'   Used to set the enabled state of an Excel menu option by its control ID.
'
'Locals:
    Dim cBar As CommandBar
    Dim cBarCtrl As CommandBarControl
'============================================================================
    On Error Resume Next
    
    ' Activate/Deactivate specific menu item
    For Each cBar In Application.CommandBars
        If cBar.Name <> "Clipboard" Then
            'Set cBarCtrl = cBar.FindControl(ID:=ctlId, recursive:=True)
            Set cBarCtrl = cBar.FindControl(Type:=msoControlButton, ID:=cBar.Controls(sItemCaption).ID)
            If Not cBarCtrl Is Nothing Then
                cBarCtrl.Enabled = Enabled
            End If
        End If
    Next
End Sub
 Sub CutCopyPasteDisabled()
     'Inform user that the functions have been disabled
    MsgBox "Copy and Paste is available using the keyboard shortcuts (ctrl-c to copy, ctrl-v to paste)." & vbNewLine & vbNewLine _
     & "To preserve workbook integrity, text pasted directly into text fields is automatically cleaned, and the right-click menu options are disabled, including Cut and Drag/Drop.", vbExclamation + vbOKOnly, "MBA Property Inspection Workbook"
End Sub
Function CleanString(strIn As String) As String
' Cleans a string by removing embedded control (non-printable) characters, including carriage returns and linefeeds.
' Does not remove special characters like symbols, international characters, etc. This function runs recursively each call removing one embedded character
    Dim iCh As Integer
    CleanString = strIn
    
    For iCh = 1 To Len(strIn)
        If Asc(Mid(strIn, iCh, 1)) < 32 Then
            CleanString = Left(strIn, iCh - 1) & CleanString(Mid(strIn, iCh + 1))
            Exit Function
        End If
    Next iCh
End Function
Public Sub PrintOrSaveAsPDF()

    'Only enable checkboxes for currently visible report tabs
    With frmPrint
        If wksGenInfo.Visible = xlSheetVisible Then
            .chkGenInfo.Value = True
        Else
            .chkGenInfo.Enabled = False
        End If
        If wksPhysCond.Visible = xlSheetVisible Then
            .chkPhysCond.Value = True
        Else
            .chkPhysCond.Enabled = False
        End If
        If wksPhotos.Visible = xlSheetVisible Then
            .chkPhotos.Value = True
        Else
            .chkPhotos.Enabled = False
        End If
        If wksRentRoll.Visible = xlSheetVisible Then
            .chkRentRoll.Value = True
        Else
            .chkRentRoll.Enabled = False
        End If
        If wksMgtInterview.Visible = xlSheetVisible Then
            .chkMgtInt.Value = True
        Else
            .chkMgtInt.Enabled = False
        End If
        If wksMultifamily.Visible = xlSheetVisible Then
            .chkMultifamily.Value = True
        Else
            .chkMultifamily.Enabled = False
        End If
        If wksRepairs.Visible = xlSheetVisible Then
            .chkRepairs.Value = True
        Else
            .chkRepairs.Enabled = False
        End If
        If wksHospitals.Visible = xlSheetVisible Then
            .chkHospitals.Value = True
        Else
            .chkHospitals.Enabled = False
        End If
        If wksComp.Visible = xlSheetVisible Then
            .chkComp.Value = True
        Else
            .chkComp.Enabled = False
        End If
        If wksFMAssmtAddendum.Visible = xlSheetVisible Then
            .chkFREAddendum.Value = True
        Else
            .chkFREAddendum.Enabled = False
        End If
        If wksSeniors.Visible = xlSheetVisible Then
            .chkSeniors.Value = True
        Else
        .chkSeniors.Enabled = False
        End If
        
        If wksMBARatings.Visible <> xlSheetVisible Then 'show but don't check by default
        .chkRatings.Enabled = False
        End If

        If wksFannieRatings.Visible <> xlSheetVisible Then
        .chkFannieRatings.Enabled = False
        End If

        .Repaint
        .Show vbModeless
    End With
   frmPrint.cmdSaveAsPDF.SetFocus

End Sub
Public Sub AddOrReplaceLogo_Caller()
    Application.Run "wksTools.InsertLogo"
End Sub
Public Sub RemoveLogo_Caller()
    Application.Run "wksTools.RemoveLogo"
End Sub
Public Sub ExtractPhotos_FromTools()
    Dim oAsk
    
    If wksPhotos.Visible <> xlSheetVisible Then
        MsgBox ("The Photos tab must be visible to perform this function. Unhide the Photos tab and try again.")
        Exit Sub
    End If
    
    oAsk = MsgBox("Export photos from the Photos tab?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub
    
    wksPhotos.Select
    ExtractPhotos_ScreenObjectMethod
End Sub
Public Sub ShowAllTabs_Caller()
    Application.Run "wksTools.ShowAllTabs_ButtonOnTools"
End Sub
Attribute VB_Name = "wkbMBAInspectionForm"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'============================================================================
'
'   Module:     wkbMBAInspectionForm
'
'   Remarks:    The code present in this module invoke the ToggleCutCopyPaste
'               procedure in modMain. Together, they disable cut/copy/paste as
'               well as drag/drop functionality within the workbook and thereby
'               preserve workbook integrity as these function destroy cell names
'               formatting and internal formulas.
'
'Revision History:
'   09/24/08    Added to project.
'   10/23/17 Ben Ballstaedt - Restored copy function using Ctrl-C, and safe paste with Ctrl-V
'============================================================================
Option Explicit
Private Sub Workbook_Activate()
    Call ToggleCutCopyAndPaste(False)      '' Enable for production
    'Call ToggleCutCopyAndPaste(True)        '' Enable for development
    
    'Add indicator to determine if Macros and Content is enabled
    
    
    'Expiration
'    If CDate(Now()) > CDate("8/31/2018") Then
'        Dim oAsk
'        oAsk = InputBox("This DRAFT file is expired and will now close.  Refer to the MBA.org website to obtain the current MBA form.", "EXPIRED DRAFT")
'        If oAsk <> "hiya buddy" Then
'            On Error Resume Next
'            ActiveWorkbook.Close False
'            End
'        End If
'    End If

End Sub
Private Sub Workbook_Open()
    Call ToggleCutCopyAndPaste(False)      '' Enable for production
    'Call ToggleCutCopyAndPaste(True)        '' Enable for development
    
    'Set public vars to suspend Worksheet_Change macros from triggering from other tabs
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    pPauseEventsPhysCond = False
    pPauseEventsMI = False
    pPauseEventsMF = False
    pPrintingOrPDFing = False
    If Application.Calculation <> xlCalculationAutomatic Then Application.Calculation = xlCalculationAutomatic
    
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call ToggleCutCopyAndPaste(True)
End Sub
Private Sub Workbook_Deactivate()
    'Occurs when the chart, worksheet, or workbook is deactivated.
    Call ToggleCutCopyAndPaste(True)
End Sub

Attribute VB_Name = "wksComp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Const xlsMaxRowHeight = 409
Dim IsDirty As Boolean
Dim InProc As Integer
Dim sPrevCell As String
Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    
    If pPauseEventsFNMA Then Exit Sub
    
    ResizeCommentBoxes
    
    If pPrintingOrPDFing = True Then Exit Sub
    
    SetButtonSizes_Fannie "Add_Fannie_LS", "AL33", 22, 37, 0, 0
    SetButtonSizes_Fannie "Add_Fannie_DM", "AL38", 22, 37, 0, 0
    SetButtonSizes_Fannie "Add_Fannie_RM", "AL43", 22, 37, 0, 0
    SetButtonSizes_Fannie "Add_Fannie_Volume", "AL54", 22, 37, 0, 0
    SetButtonSizes_Fannie "Add_Fannie_Help", "AL56", 40, 37, 0, 0

    Application.ScreenUpdating = True
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
    Dim sVal As String
    Dim sComment As String
    Dim sOverflow As String

    On Error GoTo Change_Error

    If pPauseEventsFNMA Then Exit Sub

    'Moved here to do automatically when clicking around
    ResizeCommentBoxes

    InProc = InProc + 1
    ' Set default value of nMaxLen
    nMaxLen = wksData.Range("$E$13").Value
    
    Select Case Target.Cells(1, 1).Address
        Case Range("OverallPropertyRatingFollowUpBasisType").Address
            'Sync overall rating
            MatchGIOverallRatingWithFannieTabRating True
            Exit Sub
        Case Range("LimitationManagementUnavailableIndicator").Address
            FixOptionCase Range("LimitationManagementUnavailableIndicator")
        Case Range("LimitationManagementInexperiencedIndicator").Address
            FixOptionCase Range("LimitationManagementInexperiencedIndicator")
        Case Range("LimitationUnitsNotAppropriateIndicator").Address
            FixOptionCase Range("LimitationUnitsNotAppropriateIndicator")
        Case Range("LimitationAreasNotAvailableIndicator").Address
            FixOptionCase Range("LimitationAreasNotAvailableIndicator")
        Case Range("LimitationSnowCoverIndicator").Address
            FixOptionCase Range("LimitationSnowCoverIndicator")
        Case Range("LimitationOtherIndicator").Address
            FixOptionCase Range("LimitationOtherIndicator")
            
        'Email special testing
        Case Range("RoleTypeCertificationEmailAddress").Address
            sVal = Range("RoleTypeCertificationEmailAddress").Value
            If Trim(sVal) <> vbNullString Then
                If Not IsValidEmail(sVal) Then
                    MsgBox "Invalid email address" & vbCr & vbCr & "Please enter a valid email address", _
                            vbExclamation + vbOKOnly, apAppTitle
                   Target.Select
                End If
            End If

        Case Range("LimitationComment").Address
            bChkLen = True
        Case Range("ComprehensiveRatingLifeSafetyComment").Address
            bChkLen = True

        Case Range("ComprehensiveRatingDeferredMaintenanceComment").Address
            bChkLen = True
        Case Range("ComprehensiveRatingRoutineMaintenanceComment").Address
            bChkLen = True
        Case Range("ComprehensiveRatingCapitalNeedsComment").Address
            bChkLen = True
        Case Range("ComprehensiveRatingIssueLevelComment").Address
            bChkLen = True
        Case Range("OverallPropertyRatingFollowUpBasisComment").Address
            bChkLen = True
        Case Range("OverallPropertyRatingAdditionalComments").Address
            bChkLen = True
            nMaxLen = wksData.Range("$E$14").Value
    End Select
    If bChkLen Then
    
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                    " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
                    "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
            'Target.Select
        End If
    End If
    InProc = InProc - 1
    
    Exit Sub

Change_Error:
    Exit Sub
End Sub
Private Sub ResizeCommentBoxes()

    Dim sPassword As String
    
    On Error Resume Next
    Application.ScreenUpdating = False
    
    sPassword = wksData.Range("$A$53")
    If wksComp.ProtectContents Then wksComp.Unprotect Password:=sPassword
    
    ResizeFullWidthBoxesALL 26, Range("LimitationComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 33, Range("ComprehensiveRatingLifeSafetyComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 38, Range("ComprehensiveRatingDeferredMaintenanceComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 43, Range("ComprehensiveRatingRoutineMaintenanceComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 48, Range("ComprehensiveRatingCapitalNeedsComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 54, Range("ComprehensiveRatingIssueLevelComment"), wksData.Range("$E$13").Value, "Fannie Mae Assmt Addendum", 3
    ResizeFullWidthBoxesALL 59, Range("OverallPropertyRatingAdditionalComments"), wksData.Range("$E$14").Value, "Fannie Mae Assmt Addendum", 3
    
    ResizeRoutineAndCapitalDropDown
    
    wksComp.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True
    
End Sub
Sub ResizeRoutineAndCapitalDropDown()
'   New Fannie drop-downs are very long, resize box if needed
    Dim sCapital As String, sLevel As String
    Dim iRow As Integer, iSmall As Integer, iTall As Integer
    
    iSmall = 15
    iTall = 30
    
    sCapital = Left(wksComp.Range("ComprehensiveRatingCapitalNeedsCategoryType").Value, 1)
    If Len(sCapital) = 0 Then GoTo MakeSmallC
    iRow = wksComp.Rows(46).RowHeight
    If sCapital > 1 And iRow <= iTall Then  'If rating is 2-5
        wksComp.Rows(46).RowHeight = iTall
    Else
MakeSmallC:
        wksComp.Rows(46).RowHeight = iSmall
    End If

End Sub

Private Function AutoPopulateComment(strPhotoCategory As String) As String
    Dim strComment As String, oAsk, i As Integer, iPhCnt As Integer, iCount As Integer, iCountB As Integer
    
    iPhCnt = wksData.Range("PicCount").Value
    iCount = 0
    iCountB = 0
    
    If iPhCnt > 0 Then
        For i = 1 To iPhCnt
            If wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right("0" & i, 2)) = strPhotoCategory Then
                If Len(Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)) > 0 Then
                    'Count beforehand to plan vbNewLines
                    iCount = iCount + 1
                End If
            End If
        Next i
        
        For i = 1 To iPhCnt
            If wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right("0" & i, 2)) = strPhotoCategory Then
                If Len(Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)) > 0 Then
                    strComment = strComment & "Photo " & i & ": " & Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)
                    
                    iCountB = iCountB + 1
                    If iCountB < iCount Then
                        strComment = strComment & vbLf
                    End If

                End If
            End If
        Next i
    End If

    AutoPopulateComment = Trim(strComment)
End Function
Private Function AutoPopulateComment2(strPhotoCategory() As Variant) As String
    'Separate Function that can accept an array
    Dim strComment As String, oAsk, i As Integer, iPhCnt As Integer, iCount As Integer, iCountB As Integer, j As Integer
    
    iPhCnt = wksData.Range("PicCount").Value
    iCount = 0
    iCountB = 0
    
    If iPhCnt > 0 Then
        For i = 1 To iPhCnt
            For j = 0 To UBound(strPhotoCategory)
                If wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right("0" & i, 2)) = strPhotoCategory(j) Then
                    If Len(Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)) > 0 Then
                        'Count beforehand to plan vbNewLines
                        iCount = iCount + 1
                    End If
                End If
            Next j
        Next i
        
        For i = 1 To iPhCnt
            For j = 0 To UBound(strPhotoCategory)
                If wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right("0" & i, 2)) = strPhotoCategory(j) Then
                    If Len(Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)) > 0 Then
                        strComment = strComment & "Photo " & i & ": " & Trim(wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right("0" & i, 2)).Value)
                        
                        iCountB = iCountB + 1
                        If iCountB < iCount Then
                            strComment = strComment & vbLf
                        End If
    
                    End If
                End If
            Next j
        Next i
    End If

    AutoPopulateComment2 = Trim(strComment)
End Function

Private Sub Add_LS()
    'Life Safety autopopulate
    
    Dim strComment As String, oAsk
    
    strComment = AutoPopulateComment("Life Safety")
    
    If Len(strComment) = 0 Then
        MsgBox ("There are no photos categorized as Life Safety, or their captions are blank.")
        Exit Sub
    End If
    
    oAsk = MsgBox("Click Yes to replace the Life Safety comment with the the photo captions of all photos categorized as Life Safety (below):" & vbLf & vbLf & strComment, vbYesNo, "Life Safety Comment")
    If oAsk = vbNo Then Exit Sub
    
    wksComp.Range("ComprehensiveRatingLifeSafetyComment").Value = strComment
    ResizeCommentBoxes
    
End Sub
Private Sub Add_DM()
    'Deferred Maintenance autopopulate
    
    Dim strComment1 As String, strComment2 As String, oAsk, sType() As Variant
    
    Erase sType()
    sType = Array("Life Safety", "Deferred Maintenance")
    
'    strComment1 = AutoPopulateComment("Life Safety")            'DM includes Life Safety
'    strComment2 = AutoPopulateComment("Deferred Maintenance")

    strComment1 = AutoPopulateComment2(sType())

    If Len(strComment1) = 0 Then
        MsgBox ("There are no photos categorized as Deferred Maintenance or Life Safety, or their captions are blank.")
        Exit Sub
    End If
    
    oAsk = MsgBox("Click Yes to replace the Deferred Maintenance comment with the the photo captions of all photos " _
        & "categorized as Life Safety and Deferred Maintenance (below):" _
        & vbNewLine & vbNewLine & strComment1, vbYesNo, "Deferred Maintenance Comment")
    If oAsk = vbNo Then Exit Sub
    
    wksComp.Range("ComprehensiveRatingDeferredMaintenanceComment").Value = strComment1
    ResizeCommentBoxes
End Sub
Private Sub Add_RM()
    'Routine Maintenance autopopulate
    
    Dim strComment As String, oAsk
    
    strComment = AutoPopulateComment("Routine Maintenance")
    If Len(strComment) = 0 Then
        MsgBox ("There are no photos categorized as Routine Maintenance, or their captions are blank.")
        Exit Sub
    End If
    
    oAsk = MsgBox("Click Yes to replace the Routine Maintenance comment with the the photo captions of all photos categorized as Routine Maintenance (below):" & vbLf & vbLf & strComment, vbYesNo, "Routine Maintenance Comment")
    If oAsk = vbNo Then Exit Sub
    
    wksComp.Range("ComprehensiveRatingRoutineMaintenanceComment").Value = strComment
    ResizeCommentBoxes
End Sub
Private Sub Add_Issues()
'Level/Volumne of issues noted

    Dim strComment1 As String, strComment3 As String, oAsk, sType() As Variant
    
    Erase sType()
    sType = Array("Life Safety", "Deferred Maintenance")
    
    strComment1 = AutoPopulateComment2(sType())
    strComment3 = Trim(wksComp.Range("ComprehensiveRatingCapitalNeedsComment").Value)
    
    If Len(strComment1) + Len(strComment3) = 0 Then
        MsgBox ("There are no photos categorized as Deferred Maintenance or Life Safety, and no Capital Needs comment entered, or the photo captions are blank.")
        Exit Sub
    End If
    
    If Len(strComment1) > 0 Then
        strComment1 = strComment1 & vbLf
    End If
    
    oAsk = MsgBox("Click Yes to replace the Level/Volume of issues noted comment with the the photo captions of all photos categorized as Life Safety " _
        & "and Deferred Maintenance, and the Capital needs comment (below):" & vbLf & vbLf & strComment1 & strComment3, vbYesNo, "Level/Volume of issues noted Comment")
    If oAsk = vbNo Then Exit Sub
    
    wksComp.Range("ComprehensiveRatingIssueLevelComment").Value = Trim(strComment1 & strComment3)
    ResizeCommentBoxes

End Sub
Attribute VB_Name = "wksData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksFMAssmtAddendum"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    ResizeFREComments
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
    Dim sName As String
    Dim sVal As String
    Dim sField As String
    
    On Error GoTo Change_Error
    
    nMaxLen = wksData.Range("$E$27").Value
    Select Case Target.Cells(1, 1).Address
        Case Range("AssessmentAddendumDeferredMaintenanceIndicator").Address
            FixOptionCase Range("AssessmentAddendumDeferredMaintenanceIndicator")
        Case Range("AssessmentAddendumHarmfulEnvironmentIndicator").Address
            FixOptionCase Range("AssessmentAddendumHarmfulEnvironmentIndicator")
        Case Range("AssessmentAddendumPropertyComplianceIndicator").Address
            FixOptionCase Range("AssessmentAddendumPropertyComplianceIndicator")
        Case Range("AssessmentAddendumDeferredMaintenanceComments").Address
            bChkLen = True
        Case Range("AssessmentAddendumHarmfulEnvironmentComments").Address
            bChkLen = True
        Case Range("AssessmentAddendumPropertyComplianceComments").Address
            bChkLen = True
    End Select
    
    ResizeFREComments
    If bChkLen Then
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                    " characters (limit is " & nMaxLen & " characters including spaces including spaces)." & vbCr & vbCr & _
                    "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
'            Target.Select
        End If
    End If
    Exit Sub
    
Change_Error:
    Exit Sub
End Sub
Private Sub ResizeFREComments()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
   
    ResizeFullWidthBoxesALL 13, wksFMAssmtAddendum.Range("AssessmentAddendumDeferredMaintenanceComments"), wksData.Range("$E$27"), "FRE Assmt Addendum", 3
    ResizeFullWidthBoxesALL 21, wksFMAssmtAddendum.Range("AssessmentAddendumHarmfulEnvironmentComments"), wksData.Range("$E$27"), "FRE Assmt Addendum", 3
    ResizeFullWidthBoxesALL 27, wksFMAssmtAddendum.Range("AssessmentAddendumPropertyComplianceComments"), wksData.Range("$E$27"), "FRE Assmt Addendum", 3

    If Not wksFMAssmtAddendum.ProtectContents Then wksFMAssmtAddendum.Protect sPassword

End Sub
Attribute VB_Name = "wksFannieRatings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksGenInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "imgLogo, 674, 34, MSForms, Image"
Private sPropTypePrim As String
Private Sub Worksheet_Activate()
    Dim bShowedRowsA As Boolean, bShowedRowsB As Boolean, sPass As String
    
    Application.ScreenUpdating = False
    
    ResizeCommentBoxes_GI
    MoveButtonsIntoPlace_GI_All
    
    'Check if prepopulated programatically, if so move selection back to top
    bShowedRowsA = ShowAllPopulatedRows_OandM
    bShowedRowsB = ShowAllPopulatedRows_CapEx
    If bShowedRowsA = True Or bShowedRowsB = True Then
        wksGenInfo.Range("A1").Select
    End If
    
    On Error Resume Next
    'Set comments to be indicator only - some Excel versions turn on comments because of quirks
    Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    
    sPass = wksData.Range("$A$53").Value
    If Not wksGenInfo.ProtectContents Then wksGenInfo.Protect sPass

    Application.ScreenUpdating = True
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
    Dim nVal As Integer
    Dim sVal As String
    Dim sAC As String               'Auto complete string
    Dim sPassword As String, sAware As String, sAvble As String, i As Integer
    Dim Arr() As Variant
    
    On Error Resume Next

    'Row removal for CapEx or O&M triggers this sub for each cell in each row x row count.
    ' is also needed when Overall rating changed on Fannie tab. This removes the lag and prevents odd crash
    If pPauseEventsGI Then Exit Sub

    Select Case Target.Cells(1, 1).Address
        Case Range("PropertyState").Address
            sVal = Range("PropertyState").Value
            If sVal <> UCase(sVal) And Len(sVal) = 2 Then
                Range("PropertyState").Value = UCase(sVal)
            End If
            Exit Sub
        Case Range("InspectionSchedulingContactEmailAddress").Address
            sVal = Range("InspectionSchedulingContactEmailAddress").Value
            If Trim(sVal) <> vbNullString Then
                If Not IsValidEmail(sVal) Then
                    MsgBox "Invalid email address" & vbCr & vbCr & "Please enter a valid email address (" & sVal & " is invalid)", vbExclamation + vbOKOnly, apAppTitle
                    Target.Select
                End If
            End If
            Exit Sub
        Case Range("PartyRoleAssetManagerEmail").Address
            sVal = Range("PartyRoleAssetManagerEmail").Value
            If Trim(sVal) <> vbNullString Then
                If Not IsValidEmail(sVal) Then
                    MsgBox "Invalid email address" & vbCr & vbCr & "Please enter a valid email address (" & sVal & " is invalid)", vbExclamation + vbOKOnly, apAppTitle
                    Target.Select
                End If
            End If
            Exit Sub

        Case Range("PropertyPrimaryType").Address
            sPropTypePrim = wksData.Range("A59").Value
            If sPropTypePrim <> Range("PropertyPrimaryType").Value Then
                sPassword = wksData.Range("$A$53").Value
                ActiveSheet.Unprotect sPassword
                Range("PropertySecondaryType").Value = ""
                If Range("PropertyPrimaryType").Value = "" Then
                    sVal = "0"
                Else
                    ' Add code to unprotect the worksheet
                    On Error Resume Next
                    sVal = Range("PropertyPrimaryType").Value
                    sVal = Application.WorksheetFunction.VLookup(sVal, Worksheets("Resources").Range("nrPropTypePrimIdx"), 2, False)
                    ' Add code to protect the worksheet
                End If
                sVal = "=nrPropTypeSecondary" & sVal
                sPassword = wksData.Range("$A$53").Value
                ActiveSheet.Unprotect sPassword
                Range("PropertySecondaryType").Validation.Modify Formula1:=sVal
                ActiveSheet.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
                wksData.Range("A59").Value = Range("PropertyPrimaryType").Value 'Save back as placeholder
'                Exit Sub
            End If

        Case Range("ConcessionsType").Address
            FixOptionCase Range("ConcessionsType")
        Case Range("RentRollIndicator").Address
            FixOptionCase Range("RentRollIndicator")
        Case Range("AffordableHousingPropertyIndicator").Address
            FixOptionCase Range("AffordableHousingPropertyIndicator")
        Case Range("FranchiseChangeType").Address
            FixOptionCase Range("FranchiseChangeType")
        Case Range("DarkSpaceIndicator").Address
            FixOptionCase Range("DarkSpaceIndicator")
        Case Range("DownSpaceIndicator").Address
            FixOptionCase Range("DownSpaceIndicator")
        Case Range("AreaDistressedIndicator").Address
            FixOptionCase Range("AreaDistressedIndicator")
        Case Range("AreaNewConstructionIndicator").Address
            FixOptionCase Range("AreaNewConstructionIndicator")
        Case Range("ManagementCompanyChangeIndicator").Address
            FixOptionCase Range("ManagementCompanyChangeIndicator")
        Case Range("OperationsAndMaintenancePlanComments").Address
            bChkLen = True
            nMaxLen = wksData.Range("$H$3").Value
        Case Range("InstructionDetail").Address
            ResizeCommentBoxes_GI
            bChkLen = True
            nMaxLen = wksData.Range("$H$4").Value
        Case Range("InspectorToResponsiblePartyComments").Address
            ResizeCommentBoxes_GI
            bChkLen = True
            nMaxLen = wksData.Range("$E$3").Value
        Case Range("DownDarkSpaceDescription").Address
            bChkLen = True
            nMaxLen = wksData.Range("$H$5").Value
        Case Range("ConcessionsDescription").Address
            bChkLen = True
            nMaxLen = wksData.Range("$E$4").Value
        Case Range("AreaDescription").Address
            ResizeCommentBoxes_GI
            bChkLen = True
            nMaxLen = wksData.Range("$E$5").Value
        Case Range("AdditionalCollateralDescription").Address
            ResizeCommentBoxes_GI
            bChkLen = True
            nMaxLen = wksData.Range("$E$6").Value
        Case Range("MBAOverallPropertyRatingType").Address
            CheckOverallRatingAgainstComponentRatings   'BB11032017 v3 addition validate overall rating against Physical Condition & DM
            MatchGIOverallRatingWithFannieTabRating False

        Case Range("MBAOverallPropertyRatingScale").Address
            CheckOverallRatingAgainstComponentRatings
            AlertUserIfFannieRatingScale
        Case Else
            'O&M plan section
            For i = 1 To 5
                sAware = "OperationsAndMaintenancePlanMgmtAware0" & i
                sAvble = "OperationsAndMaintenancePlanAvaliable0" & i
                If Target.Cells(1, 1).Address = Range(sAware).Address Then
                    FixOptionCase Range(sAware)
                End If
                If Target.Cells(1, 1).Address = Range(sAvble).Address Then
                    FixOptionCase Range(sAvble)
                End If
            Next i
    End Select
    
    ' Prevent user from entering a negative number in a few cells.  Validation and Conditional
    ' formatting have no more room for extra rules. In no cases will a negative number make sense for some fields
    Erase Arr
    Arr = Array("GrossRentableSquareFootage", "NetRentableSquareFootage")
    For i = 0 To UBound(Arr())
        If Left(wksGenInfo.Range(Arr(i)).Value, 1) = "-" Then
            wksGenInfo.Range(Arr(i)).Value = Right(wksGenInfo.Range(Arr(i)).Value, Len(wksGenInfo.Range(Arr(i)).Value) - 1)
        End If
    Next i
   
    If bChkLen Then
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
            " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
            "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
        End If
    End If
End Sub
Private Sub ResizeCommentBoxes_GI()
    Dim sPassword As String
    
    pPauseEventsGI = True

    sPassword = wksData.Range("$A$53").Value
'    wksGenInfo.Unprotect sPassword
    Application.StatusBar = "Adjusting comment box sizes on General Info"
    Application.ScreenUpdating = False
    
    ResizeFullWidthBoxesALL 43, wksGenInfo.Range("InstructionDetail"), wksData.Range("$H$4"), "General Info", 2
    ResizeFullWidthBoxesALL 50, wksGenInfo.Range("InspectorToResponsiblePartyComments"), wksData.Range("$E$3"), "General Info", 2
    ResizeFullWidthBoxesALL 128, wksGenInfo.Range("AreaDescription"), wksData.Range("$E$5"), "General Info", 2
    ResizeFullWidthBoxesALL 138, wksGenInfo.Range("AdditionalCollateralDescription"), wksData.Range("$E$6"), "General Info", 2

    'Lock again only if was unlocked
    On Error Resume Next
    If Not wksGenInfo.ProtectContents Then
        wksGenInfo.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
    On Error GoTo 0
    Application.ScreenUpdating = True
    Application.StatusBar = False
    pPauseEventsGI = False
End Sub
Function ShowAllPopulatedRows_OandM() As Boolean
    'If this tab is prefilled programatically, show all rows which have content
    Dim iOMrowsShown As Integer, iCount As Integer, i As Integer, sPassword As String
    
    iOMrowsShown = wksData.Range("OandMCount")
    iCount = GetLastRowOfOandM

    If iCount <= iOMrowsShown Then
        ShowAllPopulatedRows_OandM = False
        Exit Function
    End If
    iCount = iCount - 1
    
    'If here, need to unhide O
    Application.ScreenUpdating = False
    For i = iOMrowsShown To iCount
        AddOMplanRow
    Next
'    wksGenInfo.Range("OperationsAndMaintenancePlanIndicator05").Value = "Radon"
    ShowAllPopulatedRows_OandM = True
    Application.ScreenUpdating = True
    
End Function
Function GetLastRowOfOandM()
    Dim LastRowA As Integer, LastRowB As Integer, sTmp As String
    Dim Arr() As Variant, i As Integer, j As Integer

    Arr = Array("OperationsAndMaintenancePlanIndicator0", "OperationsAndMaintenancePlanMgmtAware0", "OperationsAndMaintenancePlanAvaliable0")
    For j = 0 To UBound(Arr)

        sTmp = Arr(j)

        For i = 5 To 1 Step -1
            If Not IsEmpty(wksGenInfo.Range(sTmp & i).Value) Then
                LastRowA = i
                If LastRowA > LastRowB Then LastRowB = LastRowA
                GoTo EarlyForExit
            End If
        Next i

EarlyForExit:
    Next j
    
GetLastRowOfOandM = LastRowB
End Function
Function ShowAllPopulatedRows_CapEx() As Boolean
    'If this tab is prefilled programatically, show all rows which have content
    Dim iCapExrowsShown As Integer, iCount As Integer, i As Integer, sPassword As String
    
    iCapExrowsShown = wksData.Range("CapExCount")
    iCount = GetLastRowOfCapEx

    If iCount <= iCapExrowsShown Then
        ShowAllPopulatedRows_CapEx = False
        Exit Function
    End If
    iCount = iCount - 1

    'If here, need to unhide
    Application.ScreenUpdating = False
    For i = iCapExrowsShown To iCount
        AddCapExRow
    Next
    
    Application.ScreenUpdating = True
    ShowAllPopulatedRows_CapEx = True
    
End Function
Function GetLastRowOfCapEx()
    Dim LastRowA As Integer, LastRowB As Integer, sTmp As String, sTmpB As String
    Dim Arr() As Variant, i As Integer, j As Integer

    Arr = Array("PropertyCapitalExpenditureDescription", "PropertyCapitalExpenditureCost", "PropertyCapitalExpenditureStatus")
    For j = 0 To UBound(Arr)

        sTmp = Arr(j)

        For i = 15 To 1 Step -1
            sTmpB = sTmp & Right("0" & i, 2)
            If Len(wksGenInfo.Range(sTmpB).Value) > 0 Then
                LastRowA = i
                If LastRowA > LastRowB Then LastRowB = LastRowA
                GoTo EarlyForExit
            End If
        Next i

EarlyForExit:
    Next j
        
GetLastRowOfCapEx = LastRowB
End Function
Sub ValidationHelp_GI()
    Dim str As String, oAsk
    Dim sUnitofMeasure As String
    
    str = "The sum<>parts error is displayed in the Total Percent Occupied field if there is a math error based on the Unit of Measurement selected." _
        & vbNewLine & vbNewLine & "If Measurement Used is Units, Rooms, or Beds:" & vbNewLine & "Occupied Space + Vacant Space must equal Number of Units." _
        & vbNewLine & vbNewLine & "If Measurement Used is Sq. Feet:" & vbNewLine & "Occupied Space + Vacant Space must equal Total Square Feet (Net / Rentable)."
    
    oAsk = MsgBox(str, vbOkayOnly, Title:="Occupancy Validation Help")

End Sub
Private Sub cmdCapExDelete01_Click()
   CapExRowRemove 1
End Sub
Private Sub cmdCapExDelete02_Click()
   CapExRowRemove 2
End Sub
Private Sub cmdCapExDelete03_Click()
   CapExRowRemove 3
End Sub
Private Sub cmdCapExDelete04_Click()
   CapExRowRemove 4
End Sub
Private Sub cmdCapExDelete05_Click()
   CapExRowRemove 5
End Sub
Private Sub cmdCapExDelete06_Click()
   CapExRowRemove 6
End Sub
Private Sub cmdCapExDelete07_Click()
   CapExRowRemove 7
End Sub
Private Sub cmdCapExDelete08_Click()
   CapExRowRemove 8
End Sub
Private Sub cmdCapExDelete09_Click()
   CapExRowRemove 9
End Sub
Private Sub cmdCapExDelete10_Click()
   CapExRowRemove 10
End Sub
Private Sub cmdCapExDelete11_Click()
   CapExRowRemove 11
End Sub
Private Sub cmdCapExDelete12_Click()
   CapExRowRemove 12
End Sub
Private Sub cmdCapExDelete13_Click()
   CapExRowRemove 13
End Sub
Private Sub cmdCapExDelete14_Click()
   CapExRowRemove 14
End Sub
Private Sub cmdCapExDelete15_Click()
   CapExRowRemove 15
End Sub

Attribute VB_Name = "wksHospitals"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    ResizeCommentBoxes_Hosp
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer

    On Error Resume Next

    Select Case Target.Cells(1, 1).Address
        Case Range("NewPatientsAcceptedIndicator").Address
            FixOptionCase Range("NewPatientsAcceptedIndicator")
        Case Range("LicensesCurrentIndicator").Address
            FixOptionCase Range("LicensesCurrentIndicator")
        Case Range("MedicareCertifiedIndicator").Address
            FixOptionCase Range("MedicareCertifiedIndicator")
        Case Range("MedicaidCertifiedIndicator").Address
            FixOptionCase Range("MedicaidCertifiedIndicator")
        Case Range("HandrailsInHallsType").Address
            FixOptionCase Range("HandrailsInHallsType")
        Case Range("ExitsClearlyMarkedIndicator").Address
            FixOptionCase Range("ExitsClearlyMarkedIndicator")
        Case Range("GrabBarsInRestroomsType").Address
            FixOptionCase Range("GrabBarsInRestroomsType")
        Case Range("StaffInteractWellWithResidentsIndicator").Address
            FixOptionCase Range("StaffInteractWellWithResidentsIndicator")
        Case Range("LookAndSmellCleanIndicator").Address
            FixOptionCase Range("LookAndSmellCleanIndicator")
        Case Range("RegulatoryComments").Address
            ResizeCommentBoxes_Hosp
            bChkLen = True
            nMaxLen = wksData.Range("$E$21").Value
        Case Range("SafetyOrDeficiencyComment").Address
            ResizeCommentBoxes_Hosp
            bChkLen = True
            nMaxLen = wksData.Range("$E$22").Value
    End Select
    If bChkLen Then
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                    " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
                    "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
            'Target.Select
        End If
    End If

End Sub
Sub ResizeCommentBoxes_Hosp()

    Dim sPassword As String

    sPassword = wksData.Range("$A$53").Value
    Application.StatusBar = "Adjusting comment box sizes on Hospitals"
    Application.ScreenUpdating = False

    ResizeFullWidthBoxesALL 44, wksHospitals.Range("RegulatoryComments"), wksData.Range("$E$21").Value, "Hospitals", 2
    ResizeFullWidthBoxesALL 53, wksHospitals.Range("SafetyOrDeficiencyComment"), wksData.Range("$E$22").Value, "Hospitals", 2

    'Lock only if was unlocked
    If Not wksHospitals.ProtectContents Then
        wksHospitals.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
    Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub



Attribute VB_Name = "wksMBARatings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksMgtInterview"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    ResizeMIComments
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
'
'Remarks:
'   Here we ensure that manually entered values for Yes/No drop downs
'   match the case of the values available in the drop down box.
'
'   We also validate that entered comments do not exceed the specified
'   maximum lengths (stored in wksData). Text values checked the first
'   7 "Description" fields and the other information.
'
'   If the entered text exceeds the max, a warning is shown altering the
'   user that they exceeded the max len by n characters. The user is then
'   cautioned to edit the text before it gets truncated.
'
'Revision History:
'   09/04/06    JW  Defined procedure.
'   06/01/13    JW  Revised to check all textbox cells and to be less intrusive.
'
'Locals:
    Dim sVal As String
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
'==================================================================================

    If pPauseEventsMI Then Exit Sub     'pauses events for spellcheck


    On Error Resume Next
    
    Select Case Target.Cells(1, 1).Address
        Case Range("MajorEmployerorCommercialRetailChange").Address
            FixOptionCase Range("MajorEmployerorCommercialRetailChange")
        Case Range("KeyEmployeeTurnoverType").Address
            FixOptionCase Range("KeyEmployeeTurnoverType")
        Case Range("SignificantEventsType").Address
            FixOptionCase Range("SignificantEventsType")
        Case Range("CodeViolationsType").Address
            FixOptionCase Range("CodeViolationsType")
        Case Range("RehabilitationOrConstructionIndicator").Address
            FixOptionCase Range("RehabilitationOrConstructionIndicator")
        Case Range("FranchiseOrLicenseViolationType").Address
            FixOptionCase Range("FranchiseOrLicenseViolationType")
        Case Range("PendingLawsuitsType").Address
            FixOptionCase Range("PendingLawsuitsType")
        Case Range("CoopSpecialAssessmentForExpensesRequired").Address
            FixOptionCase Range("CoopSpecialAssessmentForExpensesRequired")
        Case Range("HomeSharingIndicator").Address
            FixOptionCase Range("HomeSharingIndicator")
        Case Range("PartyRoleInformationSourceEmailAddress").Address
            sVal = Trim(Range("PartyRoleInformationSourceEmailAddress").Value)
            If sVal <> vbNullString Then
                If Not IsValidEmail(sVal) Then
                    MsgBox "Invalid email address" & vbCr & vbCr & "Please enter a valid email address", _
                            vbExclamation + vbOKOnly, apAppTitle
                    Target.Select
                    End If
            End If
            
        Case Range("MarketVarianceReasonDescription").Address, _
             Range("MajorEmployerCommercialReasonDescription").Address, _
             Range("SignificantEventsDescription").Address, _
             Range("CodeViolationsDescription").Address, _
             Range("RehabilitationOrConstructionDescription").Address, _
             Range("FranchiseOrLicenseViolationDescription").Address, _
             Range("PendingLawsuitsDescription").Address, _
             Range("CoopSpecialAssessmentForExpensesComment").Address, _
             Range("HomeSharingDescription").Address
                ResizeMIComments
                bChkLen = True
                nMaxLen = wksData.Range("$E$16").Value
        Case Range("ManagementGeneralComments").Address
            ResizeMIComments
            bChkLen = True
            nMaxLen = wksData.Range("$E$17").Value
    End Select
        
    If bChkLen Then
        If Len(Target.Text) > 0 Then
            nCmtLen = Len(Target.Text)
            If nCmtLen > nMaxLen Then
                MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                        " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
                        "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
                'Target.Select
            End If
        End If
    End If
    
End Sub
Private Sub ResizeMIComments()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
    
    Application.StatusBar = "Adjusting comment box sizes on Management Interview"
    Application.ScreenUpdating = False

    ResizeFullWidthBoxesALL 25, wksMgtInterview.Range("MarketVarianceReasonDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 30, wksMgtInterview.Range("MajorEmployerCommercialReasonDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 50, wksMgtInterview.Range("SignificantEventsDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 55, wksMgtInterview.Range("CodeViolationsDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 60, wksMgtInterview.Range("RehabilitationOrConstructionDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 65, wksMgtInterview.Range("FranchiseOrLicenseViolationDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 70, wksMgtInterview.Range("PendingLawsuitsDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 75, wksMgtInterview.Range("CoopSpecialAssessmentForExpensesComment"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 81, wksMgtInterview.Range("HomeSharingDescription"), wksData.Range("$E$16"), "Mgmt Interview", 2
    ResizeFullWidthBoxesALL 84, wksMgtInterview.Range("ManagementGeneralComments"), wksData.Range("$E$17"), "Mgmt Interview", 2
    
    If Not wksMgtInterview.ProtectContents Then wksMgtInterview.Protect sPassword
    Application.StatusBar = False
    Application.ScreenUpdating = True

End Sub
Private Sub ResizeBoxes_MI(ByVal TgtRow As Integer, ByRef Target As Range, iMaxChars As Integer)
'Dynamically resize comment box heights based on how much text is in it

    Const apRowHeight = 16  'Standard row height
    Dim i As Integer, nRowLen As Integer, nRowHeight As Integer, nLFCount As Integer
    Dim nRow As Integer, sVal As String, iNumberOfRowsRequired As Integer, nChrPerRow As Integer
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    nChrPerRow = wksData.Range("$A$14").Value       'Characters per row
   
    On Error Resume Next
    sVal = Target.Value
    nRowLen = Len(sVal)
    
    If nRowLen > iMaxChars Then nRowLen = iMaxChars 'this sets the resizing to be no greater than max allowed
    
    If nRowLen > 0 Then
        'Count number of carriage returns
        For i = 1 To nRowLen
            If Mid(sVal, i, 1) = vbLf Then
                nLFCount = nLFCount + 1
            End If
        Next i
    End If

    'determine required
    iNumberOfRowsRequired = WorksheetFunction.RoundUp((nRowLen / nChrPerRow) + nLFCount, 0)

    If (apRowHeight * iNumberOfRowsRequired) > (apRowHeight * 2) Then
        nRowHeight = (apRowHeight * iNumberOfRowsRequired)
    Else
        nRowHeight = apRowHeight * 2
    End If

    'Adjust row height
    If Not wksMgtInterview.Rows(Target.Row).RowHeight = nRowHeight Then
        If wksMgtInterview.ProtectContents Then
            wksMgtInterview.Unprotect sPassword
        End If
        wksMgtInterview.Rows(Target.Row).RowHeight = nRowHeight
    End If
    
End Sub
Attribute VB_Name = "wksMultifamily"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()

    pPauseEventsMF = True
    MoveButtons_MF
    ResizeMFComments
    ShowAllPopulatedRows_MF
    pPauseEventsMF = False
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
'
'Remarks:
'   Here we ensure that manually entered values for Yes/No drop downs
'   match the case of the values available in the drop down box.
'
'   We also validate that entered comments do not exceed the specified
'   maximum lengths (stored in wksData). Text values checked the first
'   7 "Description" fields and the other information.
'
'   If the entered text exceeds the max, a warning is shown altering the
'   user that they exceeded the max len by n characters. The user is then
'   cautioned to edit the text before it gets truncated.
'
'Revision History:
'   09/04/06    JW  Defined procedure.
'   06/01/13    JW  Revised to check all textbox cells and to be less intrusive.
'
'Locals:

    If pPauseEventsMF = True Then Exit Sub

    Dim sVal As String
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
'==================================================================================
    On Error Resume Next
    bChkLen = False
    
    Select Case Target.Cells(1, 1).Address
        Case Range("UnitInspectionGeneralComments").Address
            ResizeMFComments
            nMaxLen = wksData.Range("$E$19").Value
            bChkLen = True
    End Select
    
    If bChkLen Then
    nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                    " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
                    "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
            'Target.Select
        End If
    End If
    
End Sub
Private Sub MoveButtons_MF()
    
    If pPrintingOrPDFing = True Then Exit Sub
    
    SetButtonSizes_Multifamily "Multifamily_Help", "AL31", 35, 67, 0, 0
    SetButtonSizes_Multifamily "Multifamily_Add", "AL37", 24, 44, 0, 5
    SetButtonSizes_Multifamily "Multifamily_X", "AO37", 24, 23, 0, 5
End Sub
Private Sub ResizeMFComments()
    Dim sPassword As String
    sPassword = wksData.Range("$A$53").Value
   
    ResizeFullWidthBoxesALL 117, wksMultifamily.Range("UnitInspectionGeneralComments"), wksData.Range("$E$19"), "Multifamily", 2
    If Not wksMultifamily.ProtectContents Then wksMultifamily.Protect sPassword

End Sub
Sub ShowAllPopulatedRows_MF()
    'If this tab is prefilled programatically, show all rows which have content
    Dim iMFrowsShown As Integer, iCount As Integer, i As Integer
    
    iMFrowsShown = wksData.Range("MFunitsInspectedRows")
    iCount = GetLastRowOfMF

    If iCount <= iMFrowsShown Then Exit Sub
    iCount = iCount - 1
    
    'If here, need to unhide rows
    'takes a long time, attempt to speed up
    pPauseEventsMF = True
    Application.Calculation = xlCalculationManual
    
    For i = iMFrowsShown To iCount
        AddMFunitInspectedRow True
        Application.ScreenUpdating = True
    Next
'    wksMultifamily.Range("SiteInspectionUnitNumber25").Value = "Test"
    Application.ScreenUpdating = True
    pPauseEventsMF = False
    Application.Calculation = xlCalculationAutomatic

End Sub
Function GetLastRowOfMF()
    Dim LastRowA As Integer, LastRowB As Integer, sTmp As String, sTmp2 As String
    Dim Arr() As Variant, i As Integer, j As Integer

    Arr = Array("SiteInspectionUnitNumber", "InspectedAreaNumberOfBedroomsCount", "InspectedAreaNumberOfBathsCount", _
        "InspectedAreaSquareFootage", "InspectedAreaAskingRentAmount", "InspectedAreaCurrentUseType", "InspectedAreaConditionType")
    For j = 0 To UBound(Arr)
        sTmp = Arr(j)
        For i = 75 To 1 Step -1
            sTmp2 = sTmp & Right(0 & i, 2)
            If Not IsEmpty(wksMultifamily.Range(sTmp2).Value) Then
                LastRowA = i
                If LastRowA > LastRowB Then LastRowB = LastRowA
                GoTo EarlyForExit
            End If
        Next i
EarlyForExit:
    Next j
    
GetLastRowOfMF = LastRowB
End Function
Attribute VB_Name = "wksPhotos"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Const apPhotoHeader As Integer = 8
Private Const apPhotoBlockHeight As Integer = 24       ' Height is really 24. Add 2 for rows between block and Add Photo button
Private Const apPhotoTitleOffset As Integer = 21
Private Const apPhotoCatOffset As Integer = 22
Private Const apNamePropInspPhoto As String = "PropertyInspectionPhoto"
Private Const apNamePropInspCap As String = "PropertyInspectionCaptionPhoto"
Private Const apNamePropInspCat As String = "PropertyInspectionCatagoryPhoto"
Private Const apNamePicFrame As String = "PicFrame"
Private Const iMaxPhotos As Integer = 99
Private Sub Worksheet_Activate()
 
    'Create/place buttons. will only run after time interval since takes time to run
    'also updates actual photo count in placeholder
    MovePhotoButtonsIntoPlace False

    'Run each time tab is activated
    SendAllPicFramesToBack
    MoveAllPhotosIntoPlace
    TrimAllPhotoCaptions

    PhotosTab_Lock

End Sub
Private Sub MoveAllPhotosIntoPlace()
    Dim iPhotoCount As Integer, i As Integer

    iPhotoCount = wksData.Range("A2").Value
    If iPhotoCount = 0 Then Exit Sub
    
    For i = 1 To iPhotoCount
        OrientSizePlacePhoto i - 1, i
    Next i
End Sub
Private Sub TrimAllPhotoCaptions()
    Dim sCellText As String, i As Integer, iPhotoCount As Integer, sRange As String
    On Error Resume Next
    
    iPhotoCount = wksData.Range("A2").Value
    If iPhotoCount = 0 Then Exit Sub
    
    For i = 1 To iPhotoCount
        sRange = apNamePropInspCap & Right("0" & i, 2)
        If Not IsEmpty(wksPhotos.Range(sRange)) Then
            sCellText = CleanString(wksPhotos.Range(sRange))
            wksPhotos.Range(sRange).Value = Trim(sCellText)
        End If
    Next i

End Sub
Private Sub SendAllPicFramesToBack()
    Dim iPhotoCount As Integer, i As Integer, iFramePos As Integer, iPicPos As Integer

    On Error Resume Next

    iPhotoCount = wksData.Range("A2").Value
    If iPhotoCount = 0 Then Exit Sub
    
    'Check each PicFrame against its counterpart photo
    For i = 1 To iPhotoCount
        iFramePos = wksPhotos.Shapes(apNamePicFrame & Right("0" & i, 2)).ZOrderPosition             'Layer position of frame
        iPicPos = wksPhotos.Shapes(apNamePropInspPhoto & Right("0" & i, 2)).ZOrderPosition          'Layer position of photo

        If iPicPos < iFramePos Then
'            wksPhotos.Shapes(apNamePicFrame & Right("0" & i, 2)).ZOrder msoSendToBack          'This doesn't seem to always work
            wksPhotos.Shapes(apNamePropInspPhoto & Right("0" & i, 2)).ZOrder msoBringToFront
        End If
    Next i
    
End Sub
Public Sub PhotoAppend(bChangePhoto As Boolean, ByVal PhotoNbrReplacing As Integer)
'Remarks:
'       Inserts a photo at the bottom of the photo list.

'Revision History:
'       12/6/12 JW      Redefined procedure from old InsertPhoto.
'       'BB032917, can insert multiple
'Locals:
    Dim PhotoNbr As Integer, TgtRow As Integer, InsertRow As Integer, sPassword As String
    Dim RangeAddr As String, sObjName As String, Loc As Range
    Dim strTemp As String, oAsk
    Dim dlgAnswer As Boolean, iPicCountInserted As Integer, bAppend As Boolean, strPhotoCategory As String, i As Integer
    Dim iDeleted As Integer, sLoc As String
    Dim btn As Excel.Button     'btn As OLEObject
    Dim iDestRow As Integer, sDest As String, iPicCountSheet As Integer
'========================================================================
    On Error GoTo PhotoAppend_Error
    sPassword = wksData.Range("$A$53").Value
    strPhotoCategory = ""

    If bChangePhoto = True Then
        oAsk = MsgBox("Change Photo " & PhotoNbrReplacing & "?", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
    End If
    
    'Check that the max photos are not already in the report
    PhotoNbr = wksData.Range("PicCount").Value
    If PhotoNbr = iMaxPhotos And bChangePhoto = False Then
        MsgBox ("Maximum photo count of " & iMaxPhotos & " met.")
        Exit Sub
    End If

    'BB032817 - Moving user dialog here to accomodate a loop, selecting/inserting more than one image at once
    wksPhotos.Unprotect Password:=sPassword
    Application.ScreenUpdating = False
    dlgAnswer = Application.Dialogs(xlDialogInsertPicture).Show     'User chooses photos to insert
    If dlgAnswer = False Then
        wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Exit Sub
    End If

    'Application.Calculation = xlCalculationManual

    'Count the number of new images the User inserted
    iPicCountInserted = CountPict
    If iPicCountInserted > iMaxPhotos Then
        MsgBox ("You selected more than the max number of photos allowed, those above the max will not be inserted")
    End If
    
    If bChangePhoto = False Then
        strPhotoCategory = GetPhotoCategory(iPicCountInserted)
        If strPhotoCategory = "Cancel" Then GoTo UserCancelExit
    End If


    'Begin main loop of creating placeholders and inserting photos
    For i = 1 To iPicCountInserted
        'Determine if photo i is replacing an existing or appending.
        ' all photos will be appended except for the first when replacing

        If i = 1 Then                      'If is the first photo of those being inserted
            If bChangePhoto = True Then    'If user clicked Change Photo button to get here
                 'Photo i is replacing existing
                PhotoNbr = PhotoNbrReplacing    'Pass the photo Number to be replaced to the Function
                bAppend = False
            Else
                'i = 1, not replacing, will be apended
                bAppend = True
            End If
        Else
            'i <> 1, photo will be appended
            bAppend = True
        End If

        FeedBackBegin "Inserting photo " & PhotoNbr + 1 & " (" & i & " of " & iPicCountInserted & " selected)"

        If bAppend = True Then
            'Photo i is being appended to the bottom
            PhotoNbr = wksData.Range("PicCount").Value + 1    'Current picture count + 1 is our new Photo number
            If (PhotoNbr < 1) Then PhotoNbr = 1
            If (PhotoNbr > iMaxPhotos) Then GoTo PhotoMaxMet_Exit

            'Clear to Append photo i. create its placeholders
            ' Get the row where we're going to do our insertion, when appending, we insert two rows above the add button
            ' The location of the Add Photos button (or where it should be) is saved as a placeholder since it determines
            ' the location of appended photo blocks
            sLoc = wksData.Range("$A$4").Value
            Set Loc = wksPhotos.Range(sLoc)
            InsertRow = Loc.Row - 2

            ' Insert the photo block
            InsertPhotoBlock InsertRow, PhotoNbr

            ' Update counter, Set the print area
            wksData.Range("PicCount").Value = PhotoNbr
            'SetPrintArea PhotoNbr  'Moved to after loop since it takes upwards of 9 seconds to do

        End If

        'Place, name, and size photo i, (first deletes any exiting photo with new name)
        PhotoGet PhotoNbr
        
        'Add photo caption
        If bAppend = True Then
            wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right("0" & PhotoNbr, 2)) = strPhotoCategory
        End If
                
    Next i

    'Done inserting, cleanup
    SetPrintArea wksData.Range("PicCount").Value


UserCancelExit:
    iDeleted = DeletePhotosAboveMax     'Adding here to do cleanup of random extra photos not accounted for
    wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True
    SelectPhotoCap PhotoNbr
    FeedBackEnd
    Set Loc = Nothing
    'Application.Calculation = xlAutomatic
    Exit Sub

PhotoAppend_Error:
    MsgBox "Error: " & Err.Number & " - " & Err.Description
    Resume Next

PhotoMaxMet_Exit:
    PhotoNbr = wksData.Range("PicCount").Value
    SetPrintArea PhotoNbr
    iDeleted = DeletePhotosAboveMax     'Remove extra photos
    FeedBackEnd
    wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True
    MsgBox "Maximum photo count met (" & iMaxPhotos & ")." & Chr(10) & iDeleted & " photo(s) selected over the max were not inserted. [PhotoMaxMet_Exit, Photos > " & iMaxPhotos & "]", vbInformation + vbOKOnly, "MBA Property Inspection Form"
    'Application.Calculation = xlAutomatic
    Exit Sub

End Sub
Sub PhotoInsertMultiple(ByVal PhotoNbr As Integer)
    'BB03302017 - Allows the user to insert multiple photos above the one selected
    'Invoked by "Insert Above Photo x" button
    
    Dim iNumPhotosCanAdd As Integer, i As Integer, j As Integer, sPassword As String, oAsk
    Dim dlgAnswer As Boolean, iPicCountInserted As Integer, iDeleted As Integer, iPhotoCount As Integer
    
    If wksData.Range("PicCount").Value >= iMaxPhotos Then
        MsgBox ("Maximum photo count met.")
        Exit Sub
    End If
    
    oAsk = MsgBox("Insert photos above Photo " & PhotoNbr & "?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub
    
    ' Suspend screen updates and unlock the sheet
    Application.ScreenUpdating = False
    sPassword = wksData.Range("$A$53").Value
    wksPhotos.Unprotect Password:=sPassword
    dlgAnswer = Application.Dialogs(xlDialogInsertPicture).Show     'User chooses photos to insert
    If dlgAnswer = False Then
        wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Exit Sub
    End If
    iPicCountInserted = CountPict       'Count the number of new images the User inserted

    'Determine max number of photos which can be inserted by using PhotoInsert
    iPhotoCount = wksData.Range("PicCount").Value
    iNumPhotosCanAdd = iMaxPhotos - iPhotoCount
    If iPicCountInserted <= iNumPhotosCanAdd Then
        iNumPhotosCanAdd = iPicCountInserted
    End If
    
    pPauseEventsPhysCond = True
    
    'Begin loop inserting each photo i above the current position
    For i = 1 To iNumPhotosCanAdd
    
        'Update photos referenced on the DM grid and RV tab
        For j = iPhotoCount + i To PhotoNbr Step -1
            UpdatePhotoNumOnDMGridALL j, j + 1
            UpdatePhotoNumOnRVGridALL j, j + 1
        Next j
        
        'Place the new photo
        iPhotoCount = wksData.Range("PicCount").Value
        FeedBackBegin "Inserting photos above photo " & PhotoNbr & " (" & i & " of " & iNumPhotosCanAdd & ")"
        PhotoInsert_v2 PhotoNbr     'no need to increment photo i destination
    Next i
    
    iPhotoCount = wksData.Range("PicCount").Value
    SetPrintArea iPhotoCount

    MoveAllPhotosIntoPlace
    SelectPhotoCap iPhotoCount
    
OverMaxEarlyExit:
    iDeleted = DeletePhotosAboveMax     'Remove extra photos
    If iDeleted > 0 Then
        MsgBox "Maximum photo count met (" & iMaxPhotos & ")." & Chr(10) & iDeleted & " photo(s) selected over the max were not inserted. [PhotoMaxMet_Exit, Photos > 50]", vbInformation + vbOKOnly, "MBA Property Inspection Form"
    End If
    
    'Add Photos button normally moves into its correct spot, also need to update
    ' its placeholder
    MoveAddPhotosButtonIntoPlace "P" & 7 + (24 * iPhotoCount) + 3
    
    Application.ScreenUpdating = True
    Application.StatusBar = False
    wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    pPauseEventsPhysCond = False
    FeedBackEnd

End Sub
Private Sub PhotoInsert_v2(ByVal PhotoNbr As Integer)
'
'Arguments:
'       PhotoNbr            Integer representing the photo number to insert
'
'Remarks:
'       PhotoInsert inserts the required rows above the current photo
'       PhotoNbr required to add a new photo. It calls PhotoGet to allow the
'       user to select the photo and renames all the photo containers
'       and objects beneath the newly inserted photo frame to preserve
'       the sequence integrity of listing.
'
'       If the user cancels the photo insertion, PhotoInsert deletes
'       the newly inserted objects, returning the worksheet as it was
'       when the routine was invoked.
'
'Return Value:
'       Returns True if a new photo was successfully inserted. Returns false
'       if an error was encountered or the user aborted the insertion process.
'
'Revision History:
'       12/5/12 JW      Defined procedure.
'
    Dim StartRow As Integer
    Dim TgtRow As Integer
    Dim sPassword As String
    Dim sObjName As String
    Dim RangeAddr As String
    Dim CurName As String
    Dim NewName As String
    Dim Range As Range, PhotoCount As Integer, InsertRow As Integer, i As Integer
'========================================================================
    On Error GoTo PhotoInsert_Error ' GoTo PhotoAppend_Error
    
    ' Suspend screen updates and unlock the sheet
'    Application.ScreenUpdating = False
'    sPassword = wksData.Range("$A$53").Value
'    wksPhotos.Unprotect Password:=sPassword
    
    ' Get the row where we're going to do our insertion.
    ' When appending, we insert two rows above the add button
    PhotoCount = wksData.Range("PicCount").Value

    InsertRow = ((PhotoNbr - 1) * apPhotoBlockHeight) + apPhotoHeader
    ' Rename the photo related objects beneath our insertion point
    For i = PhotoCount To PhotoNbr Step -1
        ' Rename the Photo object
        CurName = apNamePropInspPhoto & Right("0" & i, 2)
        NewName = apNamePropInspPhoto & Right("0" & i + 1, 2)
        With wksPhotos.Shapes(CurName)
            .Name = NewName
        End With
        
        ' Rename to picture frame
        CurName = apNamePicFrame & Right("0" & i, 2)
        NewName = apNamePicFrame & Right("0" & i + 1, 2)
        With wksPhotos.Shapes(CurName)
            .Name = NewName
        End With
        
        StartRow = ((i - 1) * apPhotoBlockHeight) + 8
        
        ' Recaption Photo Number cell
        TgtRow = StartRow + apPhotoTitleOffset
        wksPhotos.Range("D" & TgtRow) = "Photo " & i + 1
        ' Rename Related photo name ranges
        CurName = apNamePropInspCap & Right("0" & i, 2)
        NewName = apNamePropInspCap & Right("0" & i + 1, 2)
        With ThisWorkbook.Names(CurName)
            .Name = NewName
            .RefersTo = "=Photos!$M$" & TgtRow
        End With
        
        CurName = apNamePropInspCat & Right("0" & i, 2)
        NewName = apNamePropInspCat & Right("0" & i + 1, 2)
        With ThisWorkbook.Names(CurName)
            .Name = NewName
            .RefersTo = "=Photos!$D$" & StartRow + apPhotoCatOffset
        End With
    Next i
    
    ' Insert the photo block
    InsertPhotoBlock InsertRow, PhotoNbr
            
    ' Update the counter /Set the print area
    PhotoCount = PhotoCount + 1
    wksData.Range("PicCount").Value = PhotoCount
    'SetPrintArea PhotoCount
    
    'Place the photo
    PhotoGet PhotoNbr
    
    Exit Sub
    
PhotoInsert_Error:
    MsgBox "Error: " & Err.Number & " - " & Err.Description
    Resume Next

End Sub
Private Function PhotoGet(ByVal PhotoNbr As Integer) As Boolean
'
'Arguments:
'       PhotoNbr            Integer containing the Photo number to retrieve.
'
'Remarks:
'       PhotoGet presumes that the photo frame is already prepared for
'       photo insertion. Therefore, PhotoGet is invoked at the end of
'       AddPhoto when a new photo is being inserted or is invoked directly
'       from a Change Photo n command button to replace an existing photo.
'
'       If the photo is larger than the frame size or is < 80% smaller than
'       the frame size, it is adjusted in side with aspect ration preservation
'       in a manner to fit the frame.
'
'       Photos are maintainied in shape controls to conserve on disk space.
'
'Return Value:
'       Returns True if a photo was successfully retrieved. Returns False
'       if the user exited the picture selection dialog with the cancel
'       button.
'
'Revision History:
'       4/4/08 JW           Converted from Sub to Function
'       4/6/17 BB           Converted to accomodate multiple images in a loop.  Retained as Function though not necessary since photo selection moved to eariler step
'
'Locals:
    'Dim dlgAnswer As Boolean
    Dim TopLeftCell As String
    Dim sPassword As String
    Dim sPhotoFile As String
    Dim PicHeight As Double, PicWidth As Double
    Dim FrameHeight As Double, FrameWidth As Double
    Dim PhotoName As String
    Dim Pic As sHape
    Dim PicFrame As sHape, Factor, sFrameName As String
    Dim iDestRow As Integer, sDest As String, iPicCountSheet As Integer
    Const iRow0 As Integer = 7
    'Dim iPicCountAfter As Integer
'=========================================================================
    On Error Resume Next
    
    PhotoGet = True
    sPassword = wksData.Range("$A$53").Value
    ActiveSheet.Unprotect sPassword
    Application.ScreenUpdating = False

    PhotoName = apNamePropInspPhoto & Right("0" & PhotoNbr, 2)
    wksPhotos.Shapes(PhotoName).Delete                  'deletes existing if there to accomodate Replace
    
    RenameShapePict PhotoName
    wksPhotos.Shapes("PicFrame").Name = "PicFrame" & Right("0" & PhotoNbr, 2)
    Set Pic = wksPhotos.Shapes(PhotoName)
    
    With Pic
        FrameWidth = Range("B7:AI7").Width
        FrameHeight = Range("G8:G28").Height
        PicHeight = .Height
        PicWidth = .Width
        
        ' Resize the image if it is larger than the frame (FrameWidth and FrameHeight)
        ' or if it smaller than 80% of the frame
        If (PicWidth > FrameWidth Or PicHeight > FrameHeight) Or _
            (PicWidth < (FrameWidth * 0.8) Or PicHeight < (FrameHeight * 0.8)) Then
            ' we have an over sized or undersized picture
            ' Now determine our constraining dimension by selecting the
            ' dimension requiring the greatest compression to fit available space.
            If FrameWidth / PicWidth < FrameHeight / PicHeight Then
                ' Photo is constrained the greatest by width
                .Width = FrameWidth - 10
            Else
                ' Photo is Portrait, constrain by height
                Factor = FrameHeight / .Height
                .Height = FrameHeight - 10
            End If
            '.PictureSizeMode = fmPictureSizeModeZoom   'BB 4/17 comment out as gives error
            ' Upadte PicHeight & PicWidth values
            PicHeight = .Height
            PicWidth = .Width
        End If
        TopLeftCell = "G" & apPhotoHeader + (PhotoNbr - 1) * (apPhotoBlockHeight)
        .Left = Range("B8").Left + (Range("B7:AI7").Width - PicWidth) / 2
        .Top = Range(TopLeftCell).Top + (Range("G8:G28").Height - .Height) / 2
        .Shadow = False
        .Locked = False
    End With
    
    
    'Check if Frame is already there.  If user deletes a photo and Frame remains don't want duplicate object
    sFrameName = "PicFrame" & Right("0" & PhotoNbr, 2)
    If DoesPicFrameExist(sFrameName) = False Then
        Set PicFrame = wksPhotos.Shapes("PicFrame" & Right("0" & PhotoNbr, 2))
        With PicFrame
            .Top = Pic.Top - 0.5
            .Left = Pic.Left - 0.5
            .Height = Pic.Height + 1
            .Width = Pic.Width + 1
            .ZOrder msoSendToBack       'BB03292017 moves border shape behind inserted photo since with multiple can be added after pic
            .Locked = True
        End With
    End If

    'Update the Add Photo button location placeholder
    iPicCountSheet = wksData.Range("$A$2").Value
    iDestRow = iRow0 + (apPhotoBlockHeight * iPicCountSheet) + 3
    sDest = "P" & iDestRow
    wksData.Range("$A$4").Value = sDest     'Save button location to placeholder


PhotoGet_Exit:
    Set Pic = Nothing
'    Set PicFrame = Nothing
'    ActiveSheet.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
'    Application.ScreenUpdating = True
        
End Function
Private Function DoesPicFrameExist(sFrameName As String) As Boolean

    Dim PicFrame As sHape
    
    On Error GoTo EarlyExit

    Set PicFrame = wksPhotos.Shapes(sFrameName)
    Set PicFrame = Nothing
    DoesPicFrameExist = False
Exit Function

EarlyExit:
    Set PicFrame = Nothing
    DoesPicFrameExist = True
End Function
Private Function GetPhotoCategory(iCountInserted As Integer) As String

        With frmPhotoCategory
            '.StartUpPosition = 0
            .Left = Application.Left + (Application.Width / 2)
            .Top = Application.Left + (Application.Height / 2)
            .Label1.Caption = "Category for " & iCountInserted & " photo(s):"
            '.CheckBox1.Value = False
            .CheckBox2.Value = False
            .CommandButton1.SetFocus
            .ListBox1.RowSource = "nrPhotoCat2"
            .ListBox1.ListIndex = -1
            .Repaint
            .Show vbModal
        End With
        
        'Determine user's photo category selection
        If frmPhotoCategory.CheckBox2.Value = True Then
            GetPhotoCategory = "Cancel"
            GoTo EarlyExit
        End If
            
        If frmPhotoCategory.ListBox1.ListIndex = -1 Then
            GetPhotoCategory = ""
        Else
            GetPhotoCategory = frmPhotoCategory.ListBox1.Value
        End If

EarlyExit:
'    frmPhotoCategory.Hide
    Unload frmPhotoCategory

End Function
Private Sub InsertPhotoBlock(ByVal InsertRow As Integer, ByVal PhotoNbr As Integer)
'
'Arguments:
'       InsertRow           The row where the photo context is to be inserted
'       PhotoNbr            The Photo's number
'Remarks:
'       InsertPhotoContext inserts the cells defined in the nrPhotoBlock
'       range into the spreadsheet at InsertRow. All cells below the range
'       are pushed down. The command buttons remain in place and new ones
'       are added to the bottom.
'
'       Before calling this procedure, the worksheet must be unlocked and
'
'       When complete, the caller can invoke PhotoGet to fill the image
'       object with the selected photo and size it.
'Revision History:
'       12/06/12 JW         Defined procedure.
'       4/8/2017 BB         Added Move up and Move down, moved button routine to own function, many other minor touches
    Dim PicCount As Integer, TgtRow As Integer, CmdBtnNbr As Integer, SaveRow As Integer
    Dim Loc As Range, btn As Excel.Button, ole As OLEObject, sObjName As String
    Dim RangeAddr As String, sDest As String
'========================================================================
    On Error GoTo InsertPhotoBlock_Error
    
    'Retrieve the current picture count.
    PicCount = wksData.Range("PicCount").Value + 1
    If PicCount > iMaxPhotos Then
        MsgBox "Maximum photo count met.", vbInformation + vbOKOnly, "MBA Property Inspection Form"
''        Application.ScreenUpdating = True
''        wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
        Exit Sub
    End If
    SaveRow = InsertRow

    ' Compute the cell for our copy destination
    RangeAddr = "B" & InsertRow
    
    ' Copy
    wksResources.Range("nrPhotoBlock").Copy
    wksPhotos.Range(RangeAddr).Insert Shift:=xlDown
    
    ' Add the buttons to the
    ' bottom photo. (The bottom photo is the one we're adding if the
    ' Add Photos button was pressed. If the Insert Photo button was
    ' pressed, all photos beneath it are pushed down leaving the last photo without buttons.
    
    ' First, establish the location of our botom row, location based on Add Photos button, placeholder
    sDest = wksData.Range("$A$4").Value
    Set Loc = wksPhotos.Range(sDest)
    
    ' Our insert row is up the spreadsheet the number of rows in the photo
    ' block plus the two rows between the bottom photo block and cmdAppend.
    InsertRow = Loc.Row - (apPhotoBlockHeight + 2)
'    Set btn = Nothing

    'Add all buttons
    AddPhotoButtonsCluster PicCount

    ' Set the Photo Title: "Photo " + photo number in left block beneath the photo
    InsertRow = SaveRow
    TgtRow = InsertRow + apPhotoTitleOffset
    Range("D" & TgtRow) = "Photo " & PhotoNbr

    'Add Named Range for the Photo Caption
    RangeAddr = "=$M$" & TgtRow
    sObjName = apNamePropInspCap & Right("0" & PhotoNbr, 2)
    ThisWorkbook.Names.Add Name:=sObjName, RefersTo:=RangeAddr, Visible:=True

    'Add Named Range for the Photo Category
    TgtRow = InsertRow + apPhotoCatOffset
    RangeAddr = "=$D$" & TgtRow
    sObjName = apNamePropInspCat & Right("0" & PhotoNbr, 2)
    ThisWorkbook.Names.Add Name:=sObjName, RefersTo:=RangeAddr, Visible:=True
    wksData.Range("PicCount") = PhotoNbr       ' Must be after potential call to DeletePhoto
    Exit Sub

InsertPhotoBlock_Error:
    MsgBox "Error: " & Err.Number & " - " & Err.Description
    Resume Next

End Sub

Public Sub PhotoDelete(ByVal PhotoNbr As Integer, Optional bDeleteAll As Boolean)

'Arguments:
'       PhotoNbr        The number of the photo to delete.
'       bDeleteAll      If this is entered using the Delete All button
'
'Remarks:
'       Deletes the photo referenced by ImageName then deletes the
'       Photo Cell range that begins at imgCell. imgCell should
'       reference the top left cell ("B8", "B39", etc.) that marks the
'       beginning of the cell range.
'
'       Since the remaining photos are shifted up, the associated
'       Photo buttons for the photo being deleted are not touched. Instead,
'       the bottom (last) buttons are hidden

    Dim i As Integer, PhotoCount As Integer, TgtRow As Integer, StartRow As Integer, sPassword As String
    Dim PhotoName As String, RangeAddr As String, BtnName As String, CurName As String, NewName As String
    Dim CurTopFrame As Integer, CurTopPic As Integer, TmpTop As Integer
    Dim iDMgridIndex As Integer, iRVgridIndex As Integer, oAsk
'========================================================================

    On Error Resume Next

    pPauseEventsPhysCond = True
    iDMgridIndex = FindPhotoIndexOnDmGrid(PhotoNbr)
    
'XXXXXX Housekeeping to keep DM grid and RV list in sync XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    
    If Not bDeleteAll = True Then
    
        'Alert user if Photo is on DM grid, give options
        If iDMgridIndex > 0 Then
        
            oAsk = MsgBox("Photo " & PhotoNbr & " is referenced on the Deferred Maintenance Items " _
                & "list.  Do you also want to remove the Deferred Maintenance Item?" & vbNewLine _
                & vbNewLine & "Click No to leave the item on the DM grid after removing the photo." & vbNewLine _
                & "Click Yes to also remove the DM item from the DM grid.", vbYesNoCancel)
            If oAsk = vbCancel Then GoTo EarlyExit
            
            If oAsk = vbNo Then
                'Clear only the photo number referenced on the DM grid
                wksPhysCond.Range("DeferredMaintenancePhotoIdentifier" & Right(0 & iDMgridIndex, 2)).Value = ""
            Else
                'Delete the entire DM item row
                DMgridRowRemove iDMgridIndex, True
            End If
            
        Else
        
            'Here if photo attempting to delete is not on DM grid, and user did not choose delete all
            oAsk = MsgBox("Delete Photo " & PhotoNbr & "?", vbOKCancel)
            If oAsk = vbCancel Then GoTo EarlyExit
        End If
        
        pPauseEventsPhysCond = True 'set again since DMgridRowRemove turns back on at exit

        'Update photo numbers on DM grid (In all cases but DeleteAll). This is outside IF
        'Each referenced photo on DM grid greater than PhotoNbr, subtract 1
        For i = 1 To 50
            If wksPhysCond.Range("DeferredMaintenancePhotoIdentifier" & Right(0 & i, 2)).Value > PhotoNbr Then
                wksPhysCond.Range("DeferredMaintenancePhotoIdentifier" & Right(0 & i, 2)).Value = wksPhysCond.Range("DeferredMaintenancePhotoIdentifier" & Right(0 & i, 2)).Value - 1
            End If
        Next i
    
        'Update photo numbers on RV grid, no option for user to avoid. Account for same photo referenced multiple times.
        'Each referenced photo on RV grid greater than PhotoNbr, subtract 1
        If wksRepairs.Visible = xlSheetVisible Then
            With wksRepairs.Range("RepairsPhotoIdentifier" & i)
            For i = 1 To 308
                If wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = PhotoNbr Then           'Clear referenced photo
                    wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = ""
                ElseIf wksRepairs.Range("RepairsPhotoIdentifier" & i).Value > PhotoNbr Then       'Increment > minus 1
                    wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = wksRepairs.Range("RepairsPhotoIdentifier" & i).Value - 1
                End If
            Next i
            End With
        End If
     
    Else
    
        'User entered this by choosing Delete All, delete referenced photo on DM and RV grids
        UpdatePhotoNumOnRVGridALL PhotoNbr, ""
        UpdatePhotoNumOnDMGridALL PhotoNbr, ""
        
    End If


'XXXXXX  Begin the Photo Deletion XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

    FeedBackBegin "Deleting photo " & PhotoNbr
    Application.ScreenUpdating = False
    sPassword = wksData.Range("$A$53").Value
    wksPhotos.Unprotect Password:=sPassword
    PhotoCount = wksData.Range("PicCount").Value
    StartRow = (PhotoNbr - 1) * (apPhotoBlockHeight) + apPhotoHeader

    wksPhotos.Range("D" & StartRow).Activate

    With wksPhotos
        'First, delete the photo & the frame then delete related range names
        PhotoName = apNamePropInspPhoto & Right("0" & PhotoNbr, 2)
        wksPhotos.Shapes(PhotoName).Delete
        wksPhotos.Shapes(apNamePicFrame & Right("0" & PhotoNbr, 2)).Delete
        With ThisWorkbook
            .Names(apNamePropInspCap & Right("0" & PhotoNbr, 2)).Delete
            .Names(apNamePropInspCat & Right("0" & PhotoNbr, 2)).Delete
        End With
    
        ' Now, delete the photo cell range.  First, unhide hidden rows, delete range then rehide the rows if needed.
        RangeAddr = "B" & StartRow & ":AJ" & StartRow + apPhotoBlockHeight - 1
        .Range(RangeAddr).Delete (xlShiftUp)

        ' Now, rename the remaining photo related objects beneath the deleted photo
        For i = PhotoNbr + 1 To PhotoCount
            With wksPhotos.Shapes(apNamePropInspPhoto & Right("0" & i, 2))
                .Name = apNamePropInspPhoto & Right("0" & i - 1, 2)
            End With
            With wksPhotos.Shapes(apNamePicFrame & Right("0" & i, 2))
                .Name = apNamePicFrame & Right("0" & i - 1, 2)
            End With
            ' Recaption Photo Number cell
            TgtRow = StartRow + apPhotoTitleOffset
            Range("D" & TgtRow) = "Photo " & i - 1
        
            ' Rename Related photo name ranges
            CurName = apNamePropInspCap & Right("0" & i, 2)
            NewName = apNamePropInspCap & Right("0" & i - 1, 2)
            With ThisWorkbook.Names(CurName)
                .Name = NewName
                .RefersTo = "=Photos!$M$" & TgtRow
            End With
            CurName = apNamePropInspCat & Right("0" & i, 2)
            NewName = apNamePropInspCat & Right("0" & i - 1, 2)
            With ThisWorkbook.Names(CurName)
                .Name = NewName
                .RefersTo = "=Photos!$D$" & StartRow + apPhotoCatOffset
            End With
            StartRow = StartRow + apPhotoBlockHeight
        Next i
        '
        ' Finally, delete the last Insert, Change and Delete Photo buttons and the name ranges.
        
        
        Dim sObjSuffix As String
        sObjSuffix = Right("0" & PhotoCount, 2)
        
        BtnName = "frmPicInsert" & sObjSuffix
        .Shapes(BtnName).Visible = msoFalse     'updated to hide
        
        BtnName = "frmPicUpdate" & sObjSuffix
        .Shapes(BtnName).Visible = msoFalse     'updated to hide
        
        BtnName = "frmPicDelete" & sObjSuffix
        .Shapes(BtnName).Visible = msoFalse     'updated to hide
        
        BtnName = "frmPicMove" & sObjSuffix     'Spinner
        .Shapes(BtnName).Visible = msoFalse
        
        BtnName = "frmPicToDMgrid" & sObjSuffix
        .Shapes(BtnName).Visible = msoFalse     'updated to hide
        
        BtnName = "frmPicToRVgrid" & sObjSuffix
        .Shapes(BtnName).Visible = msoFalse
    End With

    'Complete housekeeping
    i = DeletePhotosAboveMax    'Delete any errant photos which may have found their way in

    PhotoCount = PhotoCount - 1
    wksData.Range("PicCount").Value = PhotoCount
    
    If bDeleteAll = False Then
        SetPrintArea PhotoCount
        MoveAllPhotosIntoPlace
    End If
    
    'Add Photos button will usually move into its correct spot, however, sometimes doesn't
    ' also needs its placeholder updated
    MoveAddPhotosButtonIntoPlace "P" & 7 + (24 * PhotoCount) + 3
    
    ActiveSheet.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    SelectPhotoCap PhotoCount - 1
    
EarlyExit:
    FeedBackEnd
    Application.ScreenUpdating = True
    Application.StatusBar = False
    pPauseEventsPhysCond = False
End Sub

Sub MovePhotoUp(ByVal PhotoNbr As Integer)
'BB 4/2017 Starting here photos i and i-1 are sized, just need to swap names and location
    Dim sCaptionA As String, sCaptionB As String
    Dim sCategoryA As String, sCategoryB As String
    Dim sPhotoNameA As String, sPhotoNameB As String, sFrameA As String, sFrameB As String
    
    'Exit if user clicked Move Down on last photo (SpinDown is same as PhotoNbr+1 SpinUp)
    If PhotoNbr > wksData.Range("PicCount").Value Then Exit Sub
    
    On Error Resume Next
    Application.ScreenUpdating = False
    'Move the visual position of the photos
    ChangePhotoPosition PhotoNbr, True  'Moves PhotoNbr visually Up, down by number
    ChangePhotoPosition PhotoNbr, False 'Moves PhotoNbr-1 visually Down, up by number
    'Swap captions for PhotoNbr and PhotoNbr-1
    sCaptionA = wksPhotos.Range(apNamePropInspCap & Right("0" & PhotoNbr, 2)).Value
    sCaptionB = wksPhotos.Range(apNamePropInspCap & Right("0" & PhotoNbr - 1, 2)).Value
    wksPhotos.Range(apNamePropInspCap & Right("0" & PhotoNbr, 2)).Value = sCaptionB
    wksPhotos.Range(apNamePropInspCap & Right("0" & PhotoNbr - 1, 2)).Value = sCaptionA
    'Swap the Photo Categories
    sCategoryA = wksPhotos.Range(apNamePropInspCat & Right("0" & PhotoNbr, 2)).Value
    sCategoryB = wksPhotos.Range(apNamePropInspCat & Right("0" & PhotoNbr - 1, 2)).Value
    wksPhotos.Range(apNamePropInspCat & Right("0" & PhotoNbr, 2)).Value = sCategoryB
    wksPhotos.Range(apNamePropInspCat & Right("0" & PhotoNbr - 1, 2)).Value = sCategoryA
    'Rename the Photos and Frame for their new location
    sPhotoNameA = apNamePropInspPhoto & Right("0" & PhotoNbr, 2)
    sPhotoNameB = apNamePropInspPhoto & Right("0" & PhotoNbr - 1, 2)
    sFrameA = "PicFrame" & Right("0" & PhotoNbr, 2)
    sFrameB = "PicFrame" & Right("0" & PhotoNbr - 1, 2)
    With wksPhotos
        .Shapes(sPhotoNameA).Name = sPhotoNameA & "TEMP"    'Change both names to temp to avoid conflict
        .Shapes(sPhotoNameB).Name = sPhotoNameB & "TEMP"
        .Shapes(sPhotoNameA & "TEMP").Name = sPhotoNameB
        .Shapes(sPhotoNameB & "TEMP").Name = sPhotoNameA
        .Shapes(sFrameA).Name = sFrameA & "TEMP"            'Change the frame name to temp first
        .Shapes(sFrameB).Name = sFrameB & "TEMP"
        .Shapes(sFrameA & "TEMP").Name = sFrameB
        .Shapes(sFrameB & "TEMP").Name = sFrameA
    End With
    
    'Update referenced photo on DM and RV grids to its new photo position
    UpdatePhotoNumOnDMGridALL PhotoNbr, PhotoNbr - 1
    UpdatePhotoNumOnRVGridALL PhotoNbr, PhotoNbr - 1
    
    On Error GoTo 0
    SelectPhotoCap PhotoNbr
    
    Application.ScreenUpdating = True
    'FeedBackBeginHold "Done moving photos and referenced photos on DM and RV list"
End Sub
Sub ChangePhotoPosition(ByVal PhotoNbr As Integer, bUp As Boolean)
    Dim Pic As sHape, PhotoName As String, TopLeftCell As String
    Dim PicFrame As sHape, FrameHeight As Double, FrameWidth  As Double
    Dim PhotoNbrMoving As Integer, PhotoNbrMovingA As Integer, PhotoNbrNew As Integer
    
    On Error Resume Next
    If bUp = True Then  'Moving PhotoNbr visually up
        PhotoNbrMoving = PhotoNbr - 2
        PhotoNbrMovingA = PhotoNbr
        PhotoNbrNew = PhotoNbr - 1
    Else                'Moving PhotoNbr visually down
        PhotoNbrMoving = PhotoNbr - 1
        PhotoNbrMovingA = PhotoNbr - 1
        PhotoNbrNew = PhotoNbr
    End If
    
    'Move the photo where needed
    OrientSizePlacePhoto PhotoNbrMoving, PhotoNbrMovingA

End Sub
Private Sub OrientSizePlacePhoto(ByVal PhotoNbr As Integer, PhotoNbrMovingA As Integer)
    'BB042017, moved to function as is not called often with so many new buttons
    Dim Pic As sHape, PhotoName As String, TopLeftCell As String
    Dim PicFrame As sHape, FrameHeight As Double, FrameWidth  As Double
    Dim PicHeight As Double, PicWidth As Double, Factor As Double

    TopLeftCell = "G" & apPhotoHeader + (PhotoNbr) * (apPhotoBlockHeight)         'MODIFIED
    PhotoName = apNamePropInspPhoto & Right("0" & PhotoNbrMovingA, 2)             'MODIFIED
    
    On Error GoTo EarlyExit         'If photo was manually selected and deleted but placeholder remains, skip this routine
    
    Set Pic = wksPhotos.Shapes(PhotoName)
    With Pic
        FrameWidth = Range("B7:AI7").Width
        FrameHeight = Range("G8:G28").Height
        PicHeight = .Height
        PicWidth = .Width

        If (PicWidth > FrameWidth Or PicHeight > FrameHeight) Or _
            (PicWidth < (FrameWidth * 0.8) Or PicHeight < (FrameHeight * 0.8)) Then
            If FrameWidth / PicWidth < FrameHeight / PicHeight Then
                .Width = FrameWidth - 10
            Else
                Factor = FrameHeight / .Height
                .Height = FrameHeight - 10
            End If
            PicHeight = .Height
            PicWidth = .Width
        End If
        PicHeight = .Height
        PicWidth = .Width

        .Left = Range("B8").Left + (Range("B7:AI7").Width - PicWidth) / 2
        .Top = Range(TopLeftCell).Top + (Range("G8:G28").Height - .Height) / 2
    End With
    'Move photo frame based on Photo location
    Set PicFrame = wksPhotos.Shapes("PicFrame" & Right("0" & PhotoNbrMovingA, 2))   'MODIFIED
    With PicFrame
        .Top = Pic.Top - 0.5
        .Left = Pic.Left - 0.5
        .Height = Pic.Height + 1
        .Width = Pic.Width + 1
        .ZOrder msoSendToBack       'BB03292017 moves border shape behind inserted photo since with multiple can be added after pic
        .Locked = True
    End With
EarlyExit:

End Sub
Private Sub RenameShapePict(ByVal NewName As String)
    Dim i As Integer, j As Integer, iPics As Integer
    Dim PicArr() As Variant
    
    iPics = CountPict
    ReDim PicArr(iPics - 1)

    'Create array of all non-renamed picture names
    With wksPhotos
        For i = 1 To .Shapes.Count
            If Left(.Shapes(i).Name, 4) = "Pict" Then
                PicArr(j) = .Shapes(i).Name
                j = j + 1
                If j = iPics Then GoTo EarlyForExit
                End If
            Next i
    End With
EarlyForExit:

    'Sort array alphabetically
    PicArr() = SortArrayAtoZ(PicArr())

    'rename the 1st picture in the array
    wksPhotos.Shapes(PicArr(0)).Name = NewName

End Sub
Private Function CountPict()
    Dim i As Integer, j As Integer
    With wksPhotos
        For i = 1 To .Shapes.Count
            If Left(.Shapes(i).Name, 4) = "Pict" Then
                j = j + 1
            End If
        Next i
    End With
    CountPict = j
End Function
Private Function SortArrayAtoZ(myArray As Variant)
    Dim i As Integer, j As Integer, temp

    'Sort the Array A-Z
    For i = LBound(myArray) To UBound(myArray) - 1
        For j = i + 1 To UBound(myArray)
            If UCase(myArray(i)) > UCase(myArray(j)) Then
                temp = myArray(j)
                myArray(j) = myArray(i)
                myArray(i) = temp
            End If
        Next j
    Next i
    
    SortArrayAtoZ = myArray
    
End Function
Private Sub SetPrintArea(ByVal PhotoCount As Integer)
'
'Arguments:
'   PhotoCount      The number of photos on the page.

'Remarks:
'   PhotoCount should contain the number of photos currently
'   on the worksheet. With this value, SetPrintArea determines
'   the last worksheet row to include in the printarea and sets
'   this worksheet setting appropriately.

'Revision History:
'   04/03/08 JW     Defined procedure.
'   12/27/12 JW     Amended to use apPhotoBlockHeight for range computation
'   12/27/12 JW     Amended to reset page breaks.

'Locals:
    Dim sRangeAddr As String
    Dim TgtRow As Integer
    Dim TgtRng As String
    Dim i As Integer
'=======================================================================
    On Error Resume Next
    
    FeedBackBegin "Adjusting print area page breaks"
    ' Clear all page breaks
    wksPhotos.ResetAllPageBreaks                  'takes a long time to run

    ' Insert page breaks except for last page'
    For i = 2 To PhotoCount - 1 Step 2             ' PhotoCount - 1 ensrues we don't get the last photo
        TgtRow = apPhotoHeader + (i * apPhotoBlockHeight)
        TgtRng = "A" & TgtRow
        Range(TgtRng).Select
        wksPhotos.HPageBreaks.Add Before:=ActiveCell
    Next i

    ' Set the print area
    TgtRow = apPhotoHeader - 1 + (PhotoCount * apPhotoBlockHeight)
    sRangeAddr = "$A$1:$AJ" & TgtRow
    wksPhotos.PageSetup.PrintArea = sRangeAddr

End Sub
Private Sub SelectPhotoCap(ByVal PhotoNbr As Integer)
    Dim PhotoCount As Integer
    
    On Error Resume Next
    PhotoCount = wksData.Range("PicCount").Value

    If PhotoNbr <= PhotoCount Then wksPhotos.Range(apNamePropInspCap & Right("0" & PhotoNbr, 2)).Select

End Sub
Sub SendPhotoInfoToDmGrid(ByVal PhotoNbr As Integer)
    Dim rSrch As Range, rDest As Range, i As Integer, bRowIsBlank As Boolean, strPhotoCategory As String
    Dim j As Integer, sLSYesNo As String, iDmCount As Integer, oAsk
    
    iDmCount = wksData.Range("DmCount").Value
    
    'Ensure Physical Condition & DM tab is visible
    If wksPhysCond.Visible <> xlSheetVisible Then
        oAsk = MsgBox("The Physical Condition & DM tab is not currently shown.  Click OK to be taken to the Tools tab where you can manage which report tabs can be shown or hidden.", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
            wksTools.Visible = xlSheetVisible
            wksTools.Select
            Exit Sub
    End If
    
    'Ensure photo number is not already on DM grid
    For i = 1 To 50
        If wksPhysCond.Range("DeferredMaintenancePhotoIdentifier" & Right(0 & i, 2)).Value = PhotoNbr Then
            MsgBox ("Photo " & PhotoNbr & " is already referenced on the Deferred Maintenance Items list.")
            GoTo EarlyExit
        End If
    Next i
    
    'Find first blank row on the DM grid (even if row is hidden) for the destination, if available. i becomes target row
    For i = 1 To 50
        If IsDMBlank(i) = True Then Exit For
    Next i
    If i >= 51 Then
        MsgBox ("Deferred Maintenance Items List limit reached.")
        GoTo EarlyExit
    End If
    'if here, i = the row number which is blank.
   
    'Present Caption, and category for user to review/edit before copying to DM grid
    Unload frmDM    'Clear userform from prior use
    PhotoToDM PhotoNbr, wksPhotos.Range(apNamePropInspCat & Right(0 & PhotoNbr, 2)).Value
    If frmDM.CheckBox3.Value = False Then Exit Sub       'If user clicked red x

    'Unhide a DM grid row if all visible rows already have content
    If i > iDmCount And iDmCount <= 50 Then AddDMItemRow True
    
    'Copy DM description to Photo caption if user chose to
    If frmDM.CheckBox1.Value = True Then wksPhotos.Range(apNamePropInspCap & Right(0 & PhotoNbr, 2)).Value = frmDM.TextBox1.Text

    'Determine user's photo category selection, Edit on Photos tab since it could have changed
    If frmDM.CheckBox2.Value = True Then
        sLSYesNo = "Yes"
        wksPhotos.Range(apNamePropInspCat & Right(0 & PhotoNbr, 2)).Value = "Life Safety"
    Else
        sLSYesNo = "No"
        wksPhotos.Range(apNamePropInspCat & Right(0 & PhotoNbr, 2)).Value = "Deferred Maintenance"
    End If

    'Done with Photos tab, update DM grid
    wksPhysCond.Range(DMdsc & Right(0 & i, 2)).Value = frmDM.TextBox1.Text
    wksPhysCond.Range(DMph & Right(0 & i, 2)).Value = PhotoNbr
    wksPhysCond.Range(DMls & Right(0 & i, 2)).Value = sLSYesNo
    wksPhysCond.Range(DMrt & Right(0 & i, 2)).Value = frmDM.ListBox1.Value
    wksPhysCond.Range(DMco & Right(0 & i, 2)).Value = frmDM.TextBox2.Text

    'FeedBackEnd

EarlyExit:
    frmDM.Hide
    Unload frmDM
End Sub
Private Sub PhotoToDM(ByVal PhotoNbr As Integer, strCategory As String)
'frmDM in its own tab so code is easier to read
    Dim i As Integer, OptBtnName As String
    
        With frmDM
        .Left = Application.Left + (Application.Width / 2)
        .Top = Application.Left + (Application.Height / 2)
        .Caption = "Add Photo " & PhotoNbr & " to Deferred Maintenance list"
        '.Label1.Caption = "Add Photo " & PhotoNbr & " to Deferred Maintenance list?"
        .TextBox1.Text = wksPhotos.Range(apNamePropInspCap & Right(0 & PhotoNbr, 2)).Value
        .CheckBox1.Value = False            'Default to not overwrite Photo Caption with DM description
        .CheckBox3.Value = False            'Clicking continue in the userform will set this to True, is test if user clicked X
        .ListBox1.AddItem "Minor"
        .ListBox1.AddItem "Major"
            If strCategory = "Life Safety" Then
                .CheckBox2.Value = True         'LifeSafety check box
                .ListBox1.Selected(1) = True    'Major selected
            End If
        .CommandButton1.SetFocus
        .Repaint
        .Show vbModal
        End With
End Sub
Private Function IsPhotoCategoryDM(ByVal PhotoNbr As Integer) As Boolean
    IsPhotoCategoryDM = False
        Select Case wksPhotos.Range(apNamePropInspCat & Right(0 & PhotoNbr, 2)).Value
            Case "Life Safety"
            IsPhotoCategoryDM = True
            Exit Function
        
            Case "Deferred Maintenance"
            IsPhotoCategoryDM = True
            Exit Function
        End Select
End Function
Sub SendPhotoInfoToRVGrid(ByVal PhotoNbr As Integer)
    'Enter here from Add to RV button next to each photo
    Dim rSrch As Range, rDest As Range, i As Integer, bRow As Boolean, strPhotoCategory As String
    Dim j As Integer, bIsMajorDM As Boolean, strLifeSafety As String, strRating As String, oAsk, iIndex As Integer, bAddNew As Boolean


    bAddNew = False
    
    'For an RV item, user can have multiple photos of same row item, don't need to validate for that
    'Ensure Physical Condition & DM tab is visible
    If wksRepairs.Visible <> xlSheetVisible Then
        oAsk = MsgBox("The Repairs Verification tab is not currently shown.  Click OK to be taken to the Tools tab where you can manage which report tabs can be shown or hidden.", vbOKCancel)
        If oAsk = vbCancel Then Exit Sub
            wksTools.Visible = xlSheetVisible
            wksTools.Select
            Exit Sub
    End If
    
    'Alert User if photo already referenced on RV tab, but still allow additional reference
    For i = 1 To 308
        If wksRepairs.Range("RepairsPhotoIdentifier" & i).Value = PhotoNbr Then
            oAsk = MsgBox("Photo " & PhotoNbr & " is already referenced on the Repairs Verification Items list.  Do you want to add another row on the Repairs Verification list using this same photo?", vbOKCancel)
            If oAsk = vbCancel Then Exit Sub
            bAddNew = True
        End If
    Next i
    
    'Find first blank row on the RV grid (even if row is hidden) for the destination, if available. i becomes target row
    For i = 1 To 308
        If IsRVBlank(i) = True Then Exit For
    Next i

    If i >= 308 Then
        MsgBox ("Repair Verification Items List limit reached.")
        Exit Sub
    End If
    'if here, i = the row index number which is blank on the RV tab
    j = i   'pass to j since I mess with i below

   
    'Present userform prefilled with Photo data
    AddPhotoInfoToRV PhotoNbr, bAddNew
    If frmRV.CheckBox1.Value = False Then Exit Sub  'User clicked X in window
    
    'FeedBackBegin "Adding Photo " & PhotoNbr & " to Repairs Verification."
    iIndex = frmRV.ListBox2.ListIndex + 1       'If none selected, null is -1. Adding 1 works, 0 means no selection
    If iIndex > 0 Then
        i = iIndex  'Place on first blank row
    End If

    'Copy caption and Photo number to Selected or first available row on RV grid
    With wksRepairs
        If frmRV.OptionButton2.Value = True Then    'Update item if adding new
            .Range("RepairDescriptionAndLocation" & i).Value = frmRV.TextBox3.Text
        End If
        .Range("RepairInspectorComments" & i).Value = frmRV.TextBox1.Text
        .Range("RepairsPhotoIdentifier" & i).Value = PhotoNbr
        .Range("RepairStatusType" & i).Value = frmRV.ListBox1.Value
    End With
    
    If frmRV.CheckBox3.Value = True Then    'user selected to update photo caption with description
        wksPhotos.Range("PropertyInspectionCaptionPhoto" & Right(0 & PhotoNbr, 2)).Value = frmRV.TextBox1.Text
    End If

    frmRV.Hide
    Unload frmRV
    
    'Add additional RV page if needed
    DetermineIfAdditionalPageNeeded_RV j

    'FeedBackEnd

End Sub
Private Sub AddPhotoInfoToRV(ByVal PhotoNbr As Integer, bAddingNewRow As Boolean)
    Dim i As Integer, sCaption As String, sFrameCap As String
    Dim rCells As Range, j As Integer, k As Integer

    j = 0
    Unload frmRV
    
    'If user chose to add new row then set accordingly
    If bAddingNewRow = False Then
        k = GetLastRow_RV
    Else
        'Setting k to 0 has same result as defaulting to Add New
        k = 0
    End If

    With frmRV
        .Left = Application.Left + (Application.Width / 2)
        .Top = Application.Left + (Application.Height / 2)
        .Caption = "Add Photo " & PhotoNbr & " to Repairs Verification list"
        '.Frame1.Caption = "Photo " & PhotoNbr & " description for the Repairs Verification list"
        .CheckBox1.Value = False    'Clicking continue will set this to True, is test if user clicked X
        .TextBox1.Text = Trim(wksPhotos.Range(apNamePropInspCap & Right(0 & PhotoNbr, 2)).Value)
        .CheckBox3.Value = False    'Default to not overwrite Photo Caption with DM description
        .Label1.Caption = "Inspector Comments (for Photo " & PhotoNbr & ")"
        .ListBox1.Value = Null
            'If RV tab is blank, default to adding new row
            If k > 0 Then
                .OptionButton2.Value = False
                .OptionButton1.Value = True
            Else
                .OptionButton1.Value = False
                .OptionButton2.Value = True
            End If
        ' Pouplate the ListBoxes, 'http://sitestory.dk/excel_vba/listboxes.htm
        .ListBox1.RowSource = "nrRepairVerificationCompletion"
        
        ' Populate the RV list
        .ListBox2.Clear
        .ListBox2.ColumnCount = 4
        .ListBox2.ColumnWidths = "268;268;20;40"
        For i = 1 To 308
            If IsRVBlank(i) = False Then
                .ListBox2.AddItem "RV " & i & ": " & Trim(Left(wksRepairs.Range("RepairDescriptionAndLocation" & i).Value, 60))
                .ListBox2.List(j, 1) = wksRepairs.Range("RepairInspectorComments" & i).Value
                .ListBox2.List(j, 2) = wksRepairs.Range("RepairsPhotoIdentifier" & i).Value
                .ListBox2.List(j, 3) = wksRepairs.Range("RepairStatusType" & i).Value
                j = j + 1
            End If
        Next i
        
        .CommandButton1.SetFocus
        .Repaint
        .Show vbModal
    End With
    
End Sub
Private Sub DeleteAllPhotos()
    'button named Delete All
    Dim PicCount As Integer, i As Integer, oAsk, iDeleted As Integer, sPassword As String, rng As Range
    
    sPassword = wksData.Range("$A$53").Value
    iDeleted = DeletePhotosAboveMax     'Removes non-named photos
    PicCount = wksData.Range("PicCount").Value
    If PicCount = 0 Then GoTo FinalStep
    
    'If has photos
    oAsk = MsgBox("Delete all " & PicCount & " photos and captions from the report?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub
    
    'Double confirm
    oAsk = MsgBox("This cannot be undone, continue?", vbYesNo)
    If oAsk = vbNo Then Exit Sub
    
    Application.ScreenUpdating = False
    For i = PicCount To 1 Step -1   'Start at the bottom and work up
        PhotoDelete i, True
    Next i
    
    'Set print area after loop to speed things up
    PicCount = wksData.Range("PicCount").Value
    SetPrintArea PicCount
    
FinalStep:
    'Also using this sub to correct when the user does things which break the Photos tab
    ' photo placement is based on Add Photos button
    FeedBackEnd
    MovePhotoButtonsIntoPlace True

    wksPhotos.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True

End Sub
Private Function DeletePhotosAboveMax()
    Dim i As Integer, j As Integer, strTmp As String
    'Rename the extra photos first, then delete them in order so the
    'index number doesn't freak out if a higher index number is not there
    j = 0
    With wksPhotos
        For i = 1 To .Shapes.Count
            If Left(.Shapes(i).Name, 4) = "Pict" Then
                j = j + 1
                .Shapes(i).Name = "PicR" & j
            End If
        Next i
    End With
    If j = 0 Then
        DeletePhotosAboveMax = j
        Exit Function
    End If
    
    For i = 1 To j
        wksPhotos.Shapes("PicR" & i).Delete
        Application.StatusBar = "Deleted PicR" & i
    Next i

    'On Error GoTo 0
    Application.StatusBar = j & " photo(s) over the max deleted"
    DeletePhotosAboveMax = j
End Function

'Private Sub RotatePhotoClockwise(PhotoNbr As Integer)
'    Dim PhotoName As String, Pict As sHape
'
'    PhotoName = apNamePropInspPhoto & Left("0" & PhotoNbr, 2)
'    Set Pict = wksPhotos.Shapes(PhotoName)
'    With Pict
'    .IncrementRotation 90
'    End With
'
'    OrientSizePlacePhoto PhotoNbr - 1, PhotoNbr
'
'End Sub

Attribute VB_Name = "wksPhysCond"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Const DMItemMax = 50
Const DMIRevealRowx = 142        ' Max LastRow of DM items
Const msDeferredCmtName = "DeferredMaintenanceItemDescription"
Private Sub Worksheet_Activate()
    Dim bShowedRows As Boolean

    If pPauseEventsPhysCond = True Then Application.ScreenUpdating = False

    MoveAddButtonIntoPlace_DM
    MoveButtonsIntoPlace_DMSpinAndDelete
    bShowedRows = ShowAllPopulatedRows_DM
    ResizeCommentBoxes_Phys
    TrimAllDMCaptions
    
    PhysCondProtect
    If bShowedRows Then wksPhysCond.Range("A1").Select
    
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)

    If pPauseEventsPhysCond = True Then Exit Sub

'Remarks:
'           Here we are validating that entered comments do not exceed the
'           specified maximum lengths (stored in wksData). Text values checked
'           include all 14 Inspector Comments, Exterior and Interion comments,
'           and all Deferred Maintenance items (1-30).
'
'           If the entered text exceeds the max, a warning is shown altering the
'           user that they exceeded the max len by n characters. The user is then
'           cautioned to edit the text before it gets truncated.
'
'Revision History:
'   09/05/06    JW  Defined procedure.
'   06/01/13    JW  Revised to check all textbox cells and to be less intrusive.
'
'Locals:
    Dim bChkLen As Boolean
    Dim i As Integer, j As Integer
    Dim nCmtLen As Integer
    Dim nMaxLen As Integer
    Dim sName As String, sInput As String, sTmp As String
'==================================================================================
    On Error GoTo Change_Error

    ' First, see if a the user is leaving a deferred item description. As there are
    ' potentially 50 of these, we'll check the cell names first x characters to see
    ' if we are leaving one of these cells
    
    
    'Only check component ratings against overall if number rating input
    sInput = Target.Cells(1, 1).Value
    If sInput <> "Not Applicable" And sInput <> "Not Accessible" Then
        Select Case Target.Cells(1, 1).Address
         Case Range("PropertyComponentDetailConditionRatingCurbAppealType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingSiteType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingMechanicalType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingBuildingExteriorsType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingBuildingRoofsType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingOccupiedSpaceType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingVacantSpaceType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingInteriorCommonAreasType").Address
             CheckOverallRatingAgainstComponentRatings
         Case Range("PropertyComponentDetailConditionRatingAmenitiesType").Address
             CheckOverallRatingAgainstComponentRatings
        End Select
'        Exit Sub
    End If

    'See if we are leaving any component comment cells.
    nMaxLen = wksData.Range("$E$8").Value
    Select Case Target.Cells(1, 1).Address
        Case Range("PropertyComponentDetailCommentsCurbAppeal").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsSite").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsMechanical").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsBuildingExteriors").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsBuildingRoofs").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsOccupiedSpace").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsVacancySpace").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsDownSpace").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsInteriorCommonAreas").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsAmenities").Address
            bChkLen = True
        Case Range("PropertyComponentDetailCommentsEnvironmental").Address
            bChkLen = True
        Case Range("PropertyExteriorDescription").Address
            ResizeCommentBoxes_Phys
            bChkLen = True
            nMaxLen = wksData.Range("$E$9")
        Case Range("PropertyInteriorDescription").Address
            ResizeCommentBoxes_Phys
            bChkLen = True
            nMaxLen = wksData.Range("$E$10")
        Case Range("PropertyComponentDetailConditionRatingEnvironmentalType").Address
            FixOptionCase Range("PropertyComponentDetailConditionRatingEnvironmentalType")
        
        Case Else
            sName = Target.Cells(1, 1).Name.Name    'can cause errors, moved lower to reduce rate or early exits
            For i = 1 To 50
                sName = "DeferredMaintenanceLifeSafetyIndicator" + Format(i, "00")
                If Target.Cells(1, 1).Address = Range(sName).Address Then
                    FixOptionCase Range(sName)
                    Exit For
                End If
            Next i
    End Select
    
    'Validate user does not input a Minor Life Safety rating
    sName = Target.Cells(1, 1).Name.Name
    For i = 1 To 50
        sName = DMrt + Format(i, "00")
        If Target.Cells(1, 1).Address = Range(sName).Address Then
            If wksPhysCond.Range(sName).Value = "Minor" Then
                If wksPhysCond.Range("DeferredMaintenanceLifeSafetyIndicator" & Right("0" & i, 2)).Value = "Yes" Then
                    MsgBox ("Cannot have a Life Safety item rated as Minor.")
                    wksPhysCond.Range(sName).Value = ""
                End If
            End If
        End If
    Next i
    For i = 1 To 50
        sName = "DeferredMaintenanceLifeSafetyIndicator" + Format(i, "00")
        If Target.Cells(1, 1).Address = Range(sName).Address Then
            If wksPhysCond.Range(sName).Value = "Yes" Then
                If wksPhysCond.Range(DMrt & Right("0" & i, 2)).Value = "Minor" Then
                    MsgBox ("Cannot have a Life Safety item rated as Minor.")
                    wksPhysCond.Range(sName).Value = ""
                    Exit Sub
                End If
            End If
        End If
    Next i

    'Validate referenced photo exists
    j = wksData.Range("PicCount").Value
    For i = 1 To 50
        sName = "DeferredMaintenancePhotoIdentifier" + Format(i, "00")
        If Target.Cells(1, 1).Address = Range(sName).Address Then
            If wksPhysCond.Range(sName).Value > j Then
                MsgBox ("There is not a photo " & wksPhysCond.Range(sName).Value & " on the Photos tab, try again.  Currently, there are " & j & " photos on the Photos tab.")
                Exit Sub
            End If
        End If
    Next i

    'Validate referenced photo is rated DM or LS. If here referenced photo is a valid number
    For i = 1 To 50
        sName = "DeferredMaintenancePhotoIdentifier" + Format(i, "00")
        If Target.Cells(1, 1).Address = Range(sName).Address Then
            j = wksPhysCond.Range(sName).Value

            sTmp = wksPhotos.Range("PropertyInspectionCatagoryPhoto" & Right(0 & j, 2)).Value
            If sTmp <> "Deferred Maintenance" Then
            If sTmp <> "Life Safety" Then
                If Len(sTmp) < 1 Then
                    MsgBox ("Photo " & j & " does not have a photo category selected on the Photos tab." & vbNewLine & vbNewLine & "Deferred Maintenance items should be categorized as Life Safety or Deferred Maintenance on the Photos tab.")
                Else
                    MsgBox ("Photo " & j & " is categorized as " & sTmp & " on the Photos tab." & vbNewLine & vbNewLine & "Deferred Maintenance items should also be categorized as Life Safety or Deferred Maintenance on the Photos tab.")
                End If
                Exit Sub
            End If
            End If
        End If
    Next i
    
    ' If bChkLen is False, then see if a Deferred Maintenance item was changed.
    ' These we check by field name rather than address.
    If bChkLen = False Then
        If Left(sName, 20) = Left(msDeferredCmtName, 20) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$11").Value
        End If
    End If
    If bChkLen Then
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
            " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
            "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
        End If
    End If

Exit Sub
Change_Error:
    On Error Resume Next
    Exit Sub
End Sub
Private Sub ResizeCommentBoxes_Phys()
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    Application.StatusBar = "Adjusting comment box sizes on Physical Condition & DM"
    Application.ScreenUpdating = False
    
    ResizeFullWidthBoxesALL 85, wksPhysCond.Range("PropertyExteriorDescription"), wksData.Range("$E$9"), "Physical Condition & DM", 2
    ResizeFullWidthBoxesALL 88, wksPhysCond.Range("PropertyInteriorDescription"), wksData.Range("$E$10"), "Physical Condition & DM", 2

    'Lock only if was unlocked
    If Not wksPhysCond.ProtectContents Then
        wksPhysCond.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
    
    If pPauseEventsPhysCond = False Then Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub

Function ShowAllPopulatedRows_DM() As Boolean
    'If this tab is prefilled programatically, show all rows which have content
    Dim iDMrowsShown As Integer, iCount As Integer, i As Integer, sPassword As String
    
    iDMrowsShown = wksData.Range("DmCount")
    iCount = GetLastRowOfDM
    
    If iCount <= iDMrowsShown Then
        ShowAllPopulatedRows_DM = False
        Exit Function
    End If
    iCount = iCount - 1
    
    pPauseEventsPhysCond = True
    
    'If here, need to unhide
    Application.ScreenUpdating = False
    For i = iDMrowsShown To iCount
        AddDMItemRow False
    Next
'    wksPhysCond.Range("DeferredMaintenanceItemDescription05").Value = "Test001"
    Application.ScreenUpdating = True
    ShowAllPopulatedRows_DM = True
    pPauseEventsPhysCond = False
    
End Function
Function GetLastRowOfDM()
    Dim LastRowA As Integer, LastRowB As Integer, sTmp As String
    Dim Arr() As Variant, i As Integer, j As Integer

    Arr = Array("DeferredMaintenanceItemDescription", "DeferredMaintenanceRatingType", _
        "DeferredMaintenancePhotoIdentifier", "DeferredMaintenanceLifeSafetyIndicator", "DeferredMaintenanceEstimatedCostAmount")
    For j = 0 To UBound(Arr)

        sTmp = Arr(j)

        For i = 50 To 1 Step -1
            If Not IsEmpty(wksPhysCond.Range(sTmp & Right(0 & i, 2)).Value) Then
                LastRowA = i
                If LastRowA > LastRowB Then LastRowB = LastRowA
                GoTo EarlyForExit
            End If
        Next i

EarlyForExit:
    Next j

GetLastRowOfDM = LastRowB
Erase Arr
End Function
Private Sub TrimAllDMCaptions()
    Dim sCellText As String, i As Integer, iDMount As Integer, sRange As String
    
    iDmCount = wksData.Range("A39").Value
    If iDmCount = 0 Then Exit Sub

    For i = 1 To iDmCount
        sRange = msDeferredCmtName & Right("0" & i, 2)
        sCellText = CleanString(wksPhysCond.Range(sRange))
        wksPhysCond.Range(sRange).Value = Trim(sCellText)
    Next i

End Sub


Attribute VB_Name = "wksRentRoll"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Const apRentRollAttached = "RentRollAttachedIndicator"
Private Const apRentRollNotAttachedReason = "RentRollNotAttachedReasonType"
Private Const apRentRollSummaryAttached = "RentRollSummaryAttachedIndicator"
Private Const apRentRollSngTenant = "SingleTenantPropertyIndicator"
Private Const apRentRollLeaseExp = "SingleTenantLeaseExpirationDate"
Private Const apRentRollHospitality = "HospitalityPropertyIndicator"
Private Const apRentRollYTDADR = "YTDADRAmount"
Private Const apRentRollRevPAR = "RevPARAmount"
Private Const apRentRollADO = "ADOPercent"
Private InWorksheetChange As Boolean
Private Sub EnableHospitalityFields(bEnabled As Boolean)
'
' Remarks:
'           Simulates enabling and diabling controls on a form.
'           Of special note is the use of rngRentRoll[YTD|PAR|ADO]
'           These are named ranges that include all cells merged
'           to represent the field. They are used in the event
'           the form is changed in the future as Excel should
'           maintain them versus imbedding absolute cell references
'           in VB string here.
'
'           NOTE: The range rngRentRollYTD is prefaced with a z to
'           ensure the field name YTD_ADRAmount displays in Excel.
'           Excel apparently displays the name that appears earliest
'           alphabetically when one cell has multiple names.
'==================================================================
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    wksRentRoll.Unprotect sPassword
    SetFontEnabled Range("lblYTD"), bEnabled
    SetFontEnabled Range("lblPAR"), bEnabled
    SetFontEnabled Range("lblADO"), bEnabled
    With Range("zrngRentRollYTD")
        .UnMerge
        .Locked = Not bEnabled
        SetFontEnabled Range("zrngRentRollYTD"), bEnabled
        .Merge
    End With
    With Range("rngRentRollPAR")
        .UnMerge
        .Locked = Not bEnabled
        SetFontEnabled Range("rngRentRollPAR"), bEnabled
        .Merge
    End With
    With Range("rngRentRollADO")
        .UnMerge
        .Locked = Not bEnabled
        SetFontEnabled Range("rngRentRollADO"), bEnabled
        .Merge
    End With
    ProtectRentRoll sPassword
End Sub

Private Sub ProtectRentRoll(Pswd As String)
'
'Name:
'   ProtectRentRoll     Sets the worksheet protection property.
'
'Arguments:
'   Pswd                The password to use for security.

'Remarks:
'   The DrawingObject parameter of the Protect method has different effect
'   in Excel 2007 than previous versions. In Excel 2007, setting the
'   DrawingObject parameter to False enables the Insert picture command on
'   the main menu. Unfortunately, it doesn't do the same thing in previous
'   Excel versions.
'
'   Since users need to insert rent roll images via the Insert Picture toolbar
'   command, this routine checks the version and if pre Excel 2007 (Version < 12)
'   it sets the Contents parameter to False; otherwise, the Contents parameter
'   is set to True.
'
'Return Value:
'   None.
'
'Locals:
    Dim ContentState As Boolean
'=============================================================================
    
    ContentState = IIf(Application.Version < 12, False, True)
    Protect Password:=Pswd, _
            DrawingObjects:=False, _
            Contents:=ContentState, _
            Scenarios:=True, _
            UserInterfaceOnly:=False

End Sub
Private Sub SetFontEnabled(ByRef Target As Range, ByVal Enabled As Boolean)

    If Enabled Then
        Target.Font.ColorIndex = xlAutomatic
    Else
        With Target.Font
            .ColorIndex = 48
        End With
    End If
End Sub

Private Sub Worksheet_Activate()
'
'Remarks:
'   Because Excel 2003 and earlier apparently don't support the
'   ActiveWorksheet.Protect DrawingObjects:[True|False] parameter,
'   We lock the worksheet without locking content to enable the
'   insertion of rent roll images when the Excel version is pre 2007.
'
'   NOTE: the range names rngLeaseExp is prefaced with a z to make
'   Excel display SingleTenantLeaseExpirationDate in the cell name.
'
'Return Value:
'   None.
'
'Revision History:
'   04.17.08 JW     Defined procedure.
'
'Locals:
    Dim sPassword As String
'====================================================================
    MoveInsertFromFileButtonIntoPlace

    sPassword = wksData.Range("$A$53").Value
    ProtectRentRoll sPassword

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bState As Boolean
    Dim nVal As Integer
    Dim sVal As String
    Dim sPassword As String
    
    On Error Resume Next
    
    If InWorksheetChange Then Exit Sub
    Select Case Target.Cells(1, 1).Address
        Case Range(apRentRollAttached).Address
            InWorksheetChange = True
            FixOptionCase Range(apRentRollAttached)
            sVal = Range(apRentRollAttached).Value
            bState = IIf(sVal = "No", True, False)
            
            sPassword = wksData.Range("$A$53").Value
            wksRentRoll.Unprotect sPassword
            Range("rngRRNotAttachedReason").UnMerge
            Range("rngRRNotAttachedReason").Locked = Not bState
            SetFontEnabled Range("rngRRNotAttachedReason"), bState
            Range("rngRRNotAttachedReason").Merge
            If bState Then
                Range(apRentRollNotAttachedReason).Select
            Else
                Range(apRentRollNotAttachedReason).Value = "(Select One)"
            End If
            ProtectRentRoll sPassword
        Case Range(apRentRollSummaryAttached).Address
            InWorksheetChange = True
            FixOptionCase Range(apRentRollSummaryAttached)
        
        Case Range(apRentRollSngTenant).Address
            Dim rngLabel As Range
            
            InWorksheetChange = True
            FixOptionCase Range(apRentRollSngTenant)
            sVal = Range(apRentRollSngTenant).Value
            bState = IIf(sVal = "Yes", True, False)
            sPassword = wksData.Range("$A$53").Value
            wksRentRoll.Unprotect sPassword
            With Range("zrngLeaseExp")
                .UnMerge
                .Locked = Not bState
                SetFontEnabled Range("zrngLeaseExp"), bState
                .Merge
            End With
            Set rngLabel = Range("lblLeaseExp")
            SetFontEnabled rngLabel, bState
            ProtectRentRoll sPassword
            Set rngLable = Nothing
            If bState Then
                Range("zrngLeaseExp").Select
            Else
                Range(apRentRollLeaseExp).Value = vbNullString
            End If
            
        Case Range(apRentRollHospitality).Address
            InWorksheetChange = True
            FixOptionCase Range(apRentRollHospitality)
            sVal = Range(apRentRollHospitality).Value
            bState = IIf(sVal = "Yes", True, False)
            EnableHospitalityFields bState
            If bState Then
                Range(apRentRollYTDADR).Select
            Else
                Range(apRentRollYTDADR).Value = vbNullString
                Range(apRentRollRevPAR).Value = vbNullString
                Range(apRentRollADO).Value = vbNullString
            End If
    End Select
    InWorksheetChange = False
   
End Sub
Private Sub MoveInsertFromFileButtonIntoPlace()
    
    On Error Resume Next
    If pPrintingOrPDFing = True Then Exit Sub
    
    With wksRentRoll.Shapes("frmInsertRentRollFromFile")
        .Top = wksRentRoll.Range("B24").Top + 5
        .Left = wksRentRoll.Range("B24").Left
        .Height = 25
        .Width = 90
    End With

End Sub
Sub InsertRentRollFromFile()
    'Inserts a file as an object
    Dim fd As FileDialog, vrtSelectedItem As Variant, sRRfile As String, sIconName As String, i As Integer, sIconPath As String
    Dim sPDF1 As String, sPDF2 As String
'    Dim sOffVer As String, sWordPath As String
    On Error GoTo EarlyExit
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    With fd
    .Filters.Add "Documents", "*.pdf; *.doc; *.docx; *.xls; *.xlsm; *.xlsb; *.jpg; *.jpeg; *.png", 1
        If .Show = -1 Then
            For Each vrtSelectedItem In .SelectedItems
                sRRfile = vrtSelectedItem       'Pass to string var, exit after 1st selection, more control with this method
                Exit For
            Next
        Else
            Exit Sub
        End If
    End With
    
'    sOffVer = Left(Application.Version, 2)  'Version of Office to check for icons
'    sWordPath = "C:\PROGRA~2\MICROS~1\Office" & sOffVer & "\WINWORD.EXE"
    
    'Added as a test 3/20/2018
    sPDF1 = "C:\Windows\Installer\{AC76BA86-7AD7-1033-7B44-AC0F074E4100}\PDFFile_8.ico"
    sPDF2 = "C:\Windows\Installer\{AC76BA86-1033-F400-BA7E-000000000005}\_PDFFile.ico"
    sIconPath = ""
'    sOffVer = Left(Application.Version, 2)  'Version of Office to check for icons
'    sWordPath = "C:\PROGRA~2\MICROS~1\Office" & sOffVer & "\WINWORD.EXE"
    
    'Attempt to get file icon for PDF, Word, and Excel. Image (jpg) icons seem to appear on their own after exiting?
    Select Case LCase(Right(sRRfile, 4))
        Case ".pdf"
            If FileThere(sPDF1) = True Then
                sIconPath = sPDF1
                GoTo ManualExitSelect
            End If
            If FileThere(sPDF2) = True Then sIconPath = sPDF2

'        Case ".xls", "xlsx", "xlsm", "xlsb"        '10/23/2017 Commenting out since extracting an icon from an exe file is not very stable on different machines which have multiple versions installed
'        sIconPath = "C:\Windows\Installer\{90140000-003D-0000-0000-0000000FF1CE}\xlicons.exe"
'        Case ".doc", "docx"
'        If FileThere(sWordPath) = True Then sIconPath = sWordPath
    End Select
ManualExitSelect:

    MoveInsertFromFileButtonIntoPlace
    
    i = wksRentRoll.Shapes.Count    'Get count of objects in sheet to change insert position on multiple
    sIconName = GetFilenameFromPath(sRRfile)
    
    wksRentRoll.OLEObjects.Add FileName:=sRRfile, Link:=False, DisplayAsIcon:=True, IconFileName:=sIconPath, IconIndex:=0, IconLabel:=sIconName, Left:=30, Top:=(285 + (i * 75)), Width:=150, Height:=150
    Application.CutCopyMode = False
    wksRentRoll.Range("B27").Select
Exit Sub
EarlyExit:
MsgBox "Something went wrong." & Chr(10) & Chr(10) & "If this continues, Insert the file through Excel's menu (Insert Tab > Insert Object)", vbCritical
    Application.CutCopyMode = False
    wksRentRoll.Range("B27").Select
End Sub

Function GetFilenameFromPath(ByVal strPath As String) As String
' Returns the rightmost characters of a string upto but not including the rightmost '\'
    If Right$(strPath, 1) <> "\" And Len(strPath) > 0 Then
        GetFilenameFromPath = GetFilenameFromPath(Left$(strPath, Len(strPath) - 1)) + Right$(strPath, 1)
    End If
End Function
Function FileThere(FileName As String) As Boolean
     FileThere = (Dir(FileName) > "")
End Function


Attribute VB_Name = "wksRepairs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    MoveRVButtonsIntoPlace  'For some reason the buttons on this page won't stay in the correct spot
    AutoPopulateRVHeading
    ShowAllPopulatedRVRows_RV
End Sub

'''Private Sub Worksheet_SelectionChange(ByVal Target As Range)
''''
''''   ' Ben Ballstaedt 4/12/2019 - disabling this sweet feature because it could not be tested sufficiently on the RV tab or DM tab before
''''   ' v3.02 form release is due.  Users may get confused on how to clear a selection since selecting the cell brings up the chooser
''''   ' and I didn't have enough time to make it dummy-proof.  Leaving the code and frmPhotoNumber in place for a future
''''   ' update, just needs to be added to the DM grid.
''''   ' May be best suited to be activated in a Worksheet_BeforeDoubleClick routine
''''
'''     ' If user clicks a Photo Number field, prompt with chooser which displays list of photo numbers and their captions
'''
'''    Dim sName As String, iPicSelected As Integer, PhotoNbr As Integer, iNumber As Integer, bExit As Boolean
'''    Dim bHasReference As Boolean
'''
'''    On Error GoTo EarlyExitError:
'''
'''    If Not Intersect(Target, wksRepairs.Range("$AP$29:$AP$337")) Is Nothing Then
'''
'''        'Filtering
'''        sName = Target.Cells(1, 1).Name.Name
'''        PhotoNbr = wksData.Range("$A$2").Value
'''        If PhotoNbr = 0 Then Exit Sub
'''
'''        If Left(sName, 22) = "RepairsPhotoIdentifier" Then      'Sufficently filtered so doesn't trigger if additional fields selected as well
'''
'''            'Do Not Prompt if there is no Description or Inspector Comments
'''            bExit = True
'''            iNumber = Right(sName, Len(sName) - 22)
'''            If Len(Trim(wksRepairs.Range("RepairDescriptionAndLocation" & iNumber).Value)) > 0 Then bExit = False
'''            If Len(Trim(wksRepairs.Range("RepairInspectorComments" & iNumber).Value)) > 0 Then bExit = False
'''            If Len(Trim(wksRepairs.Range("RepairStatusType" & iNumber).Value)) > 0 Then bExit = False
'''            If bExit = True Then Exit Sub
'''
'''            If Len(Trim(wksRepairs.Range("RepairsPhotoIdentifier" & iNumber).Value)) > 0 Then
'''                bHasReference = True
'''            Else
'''                bHasReference = False
'''            End If
'''
'''            'Filtered sufficiently, prompt user
'''            iPicSelected = PromptUserToSelectPhoto(PhotoNbr, iNumber, bHasReference)
'''
'''            If iPicSelected = 500 Then
'''                'user selected to clear the selection
'''                wksRepairs.Range(sName).Value = ""
'''                Exit Sub
'''            End If
'''
'''            If iPicSelected > 0 Then wksRepairs.Range(sName).Value = iPicSelected
'''        End If
'''    End If
'''
'''Exit Sub
'''EarlyExitError:
'''    MsgBox ("Something went wrong while attempting to get a list of photo numbers and captions")
'''End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    'Check length of entered comment text in Items and Inspector comments
    Dim bChkLen As Boolean, nMaxLen As Integer, nCmtLen As Integer
    Dim sName As String, sVal As String, sField As String, Arr() As Variant, i As Integer
    Dim strRV As String, strGI As String, j As Integer


    On Error GoTo Change_Error
    sName = Target.Cells(1, 1).Name.Name                        '' Target.Cells(1, 1).Address
    
'''    'Referenced Photo has different treatment on separate sub, only validate
'''    If Left(sName, 22) = "RepairsPhotoIdentifier" Then GoTo JumpToEndReferencedPhoto

    'If user changes header info, sync with GI tab (if hidden)
    If wksGenInfo.Visible <> xlSheetVisible Then
        Erase Arr()
        Arr = Array("PropertyName", "PropertyAddress", "PropertyStreetAddress2", "PropertyCity", "PropertyState", "PropertyPostalCode", "PartyRollServicerName", "LoanIdentifier", "PropertyPrimaryType", _
        "PartyRoleInspectionSchedulingContactCompanyName", "PartyRoleInspectionSchedulingConactFirstName", "PartyRoleInspectionSchedulingConactLastName", "InspectionSchedulingContactPhoneNumber", _
        "InspectionSchedulingContactEmailAddress", "PartyRoleSiteInspectionCompanyName", "PartyRoleSiteInspectorFirstName", "PartyRoleSiteInspectorLastName", "PartySiteInspectionCompanyPhoneNumber", _
        "SiteAssessmentDate", "SiteAssessmentStartTime")
    
            For i = LBound(Arr()) To UBound(Arr())
                strRV = "RV_" & Arr(i)
                strGI = Arr(i)
                If strRV = sName Then
                    'If here, field needs to be synced with GI tab since
                    wksGenInfo.Range(strGI).Value = wksRepairs.Range(strRV).Value
                End If
            Next i
    End If
    
    
    If Left(sName, 10) = Left("RepairDescriptionAndLocation", 10) Then
        bChkLen = True
        nMaxLen = wksData.Range("$E$24").Value
    ElseIf Left(sName, 10) = Left("RepairInspectorComments", 10) Then
        bChkLen = True
        nMaxLen = wksData.Range("$E$25").Value
    End If
    
    Select Case Target.Cells(1, 1).Address
        Case Range("RepairVerificationGeneralComments").Address
            nMaxLen = wksData.Range("$H$24").Value
            bChkLen = True
    End Select

    If bChkLen Then
        nCmtLen = Len(Target.Text)
        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered into " & sName & " exceeds the maximum length by " & nCmtLen - nMaxLen & _
                " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
'            Target.Select
        End If
    End If

'''JumpToEndReferencedPhoto:
    'Validate referenced photo exists
    j = wksData.Range("PicCount").Value
    For i = 1 To RVmaxitems
        sName = "RepairsPhotoIdentifier" & i
        If Target.Cells(1, 1).Address = Range(sName).Address Then
            If wksRepairs.Range(sName).Value > j Then
                MsgBox ("There is not a photo " & wksRepairs.Range(sName).Value & " on the Photos tab, try again.  Currently, there are " & j & " photos on the Photos tab.")
                Exit Sub
            End If
        End If
    Next i

Change_Error:
End Sub
Sub RemoveRVPage()
    'Remove a page at a time
    Dim iPagesVisible As Integer, iIndexVisible As Integer, iDestRowVisTop As Integer, iDestRowVisBot As Integer
    Dim i As Integer, sPassword As String, bRowHasContent As Boolean

    sPassword = wksData.Range("$A$53")
    iPagesVisible = wksData.Range("$A$45")                      'Number of print pages currently shown
    iIndexVisible = wksData.Range("$A$43")                      'Number of RV rows currently shown
    iDestRowVisBot = (iIndexVisible) + RVrow0                   'Row bottom of page to be hidden
    iDestRowVisTop = iDestRowVisBot - RVrowsPerPage + 1         'Row of top of page to be hidden

    If iPagesVisible = 1 Then
        MsgBox ("Cannot hide any more pages or rows.")
        Exit Sub
    End If
    
    'Check if rows to be hidden have content
    For i = (iIndexVisible - RVrowsPerPage + 1) To iIndexVisible
        If Not IsEmpty(wksRepairs.Range("RepairDescriptionAndLocation" & i)) Then bRowHasContent = True
        If Not IsEmpty(wksRepairs.Range("RepairInspectorComments" & i)) Then bRowHasContent = True
        If Not IsEmpty(wksRepairs.Range("RepairsPhotoIdentifier" & i)) Then bRowHasContent = True
        If Not IsEmpty(wksRepairs.Range("RepairStatusType" & i)) Then bRowHasContent = True
    Next i
    If bRowHasContent Then
        MsgBox ("Rows " & iIndexVisible - RVrowsPerPage + 1 & " through " & iIndexVisible & _
        " (printed page " & iPagesVisible & ") have content and cannot be removed unless the content is cleared.")
        Exit Sub
    End If
    
    'Hide rows
    FeedBackBegin "Removing rows " & iIndexVisible - RVrowsPerPage + 1 & " through " & iIndexVisible & _
        " (printed page " & iPagesVisible & ")"
    Application.ScreenUpdating = False
    wksRepairs.Unprotect Password:=sPassword
    For i = iDestRowVisTop To iDestRowVisBot
        wksRepairs.Rows(i).EntireRow.Hidden = True
    Next i
    
    'Update placeholders on Data tab
    i = iIndexVisible - RVrowsPerPage
    wksData.Range("$A$45") = iPagesVisible - 1
    wksData.Range("$A$43") = i                      'Save number of rows visible

    'Set print area
    SetRVprintArea RVrow1, iDestRowVisBot - RVrowsPerPage, iPagesVisible - 1

    RemoveVerticalPageBreaks_RV
    
    MoveRVButtonsIntoPlace
    
    'Cleanup
    wksRepairs.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    Application.ScreenUpdating = True
    wksRepairs.Range("RepairDescriptionAndLocation" & (i)).Select     'Selecting bottom of visible to keep mouse over expand button
    FeedBackEnd

End Sub
Sub AutoPopulateRVHeading()
    'If RV tab is shown, and General Info shown, will auto-complete the header
    'Redundant header exists for cases where MBA form is used as standalone RV and GI tab hidden

    Dim i As Integer, str01 As String, sPassword As String, rOrig As Range, bNeedsSync As Boolean

    Application.ScreenUpdating = False
    Set rOrig = Selection   'preserve user selection to return after checks

    'Check if GI visible
    If wksGenInfo.Visible = xlSheetVisible Then
        'Sync data from GI and ensure is ready only
        bNeedsSync = CheckOrCopyDataFromGItoRV(False, True, False, False)
        If bNeedsSync = True Then
            'tabs are not synced, GI is master
            CheckOrCopyDataFromGItoRV True, False, True, True, True
        End If
        If Not wksRepairs.Range("RV_PropertyName").Locked Then
            'If RV heading unlocked, lock it.
            CheckOrCopyDataFromGItoRV False, False, True, True, True
        End If
        
    Else
        'GI hidden, RV is master
        
        bNeedsSync = CheckOrCopyDataFromGItoRV(False, True, False, False)
        If bNeedsSync = True Then       'data differs
            'Sync data from GI to RV

            If IsRVheaderBlank = True Then
'Debug.Print "RV Header Blank, coping GI to RV"
                'IF RV is blank, need to copy over info from GI
                CheckOrCopyDataFromGItoRV True, False, False, False, True       'RV is master
'                Debug.Print "Copied GI to RV"
            Else
'                Debug.Print "RV has content"
                CheckOrCopyDataFromGItoRV True, False, False, False, False       'GI is master
            End If

        End If
        If wksRepairs.Range("RV_PropertyName").Locked Then
            'Need to unlocked header
            CheckOrCopyDataFromGItoRV False, False, True, False, False
        End If
    End If

    Application.ScreenUpdating = True
End Sub
Function IsRVheaderBlank() As Boolean
    Dim Arr() As Variant, i As Integer, str01 As String, str02 As String

    Erase Arr()
    Arr = Array("PropertyName", "PropertyAddress", "PropertyStreetAddress2", "PropertyCity", "PropertyState", "PropertyPostalCode", "PartyRollServicerName", "LoanIdentifier", "PropertyPrimaryType", _
    "PartyRoleInspectionSchedulingContactCompanyName", "PartyRoleInspectionSchedulingConactFirstName", "PartyRoleInspectionSchedulingConactLastName", "InspectionSchedulingContactPhoneNumber", _
    "InspectionSchedulingContactEmailAddress", "PartyRoleSiteInspectionCompanyName", "PartyRoleSiteInspectorFirstName", "PartyRoleSiteInspectorLastName", "PartySiteInspectionCompanyPhoneNumber", _
    "SiteAssessmentDate", "SiteAssessmentStartTime")
    
    For i = 0 To UBound(Arr)
        str01 = "RV_" & Arr(i)
        str02 = Trim(wksRepairs.Range(str01).Value)
        
        If Len(str02) > 0 Then
            IsRVheaderBlank = False
            GoTo EarlyExit:
        End If
    Next i

    IsRVheaderBlank = True

EarlyExit:
End Function
Function CheckOrCopyDataFromGItoRV(bSync As Boolean, bCheckOnly As Boolean, bLockCell As Boolean, bLockStatus As Boolean, Optional bGIisMaster As Boolean) As Boolean
    Dim Arr() As Variant, i As Integer, str01 As String, bDataDiffers As Boolean
    Dim sPassword
    
    sPassword = wksData.Range("$A$53").Value
    If bSync Or bLockCell Then wksRepairs.Unprotect sPassword

    Erase Arr()
    Arr = Array("PropertyName", "PropertyAddress", "PropertyStreetAddress2", "PropertyCity", "PropertyState", "PropertyPostalCode", "PartyRollServicerName", "LoanIdentifier", "PropertyPrimaryType", _
    "PartyRoleInspectionSchedulingContactCompanyName", "PartyRoleInspectionSchedulingConactFirstName", "PartyRoleInspectionSchedulingConactLastName", "InspectionSchedulingContactPhoneNumber", _
    "InspectionSchedulingContactEmailAddress", "PartyRoleSiteInspectionCompanyName", "PartyRoleSiteInspectorFirstName", "PartyRoleSiteInspectorLastName", "PartySiteInspectionCompanyPhoneNumber", _
    "SiteAssessmentDate", "SiteAssessmentStartTime")

    For i = 0 To UBound(Arr)
        str01 = Arr(i)          'pass to string var
        bDataDiffers = CopyDataFromGItoRV(str01, bSync, bLockCell, bLockStatus, bGIisMaster)
        If bCheckOnly And bDataDiffers Then
            GoTo EarlyExit:
        End If
    Next i

'Data matches
CheckOrCopyDataFromGItoRV = False
Exit Function

EarlyExit:
'Data does not match
CheckOrCopyDataFromGItoRV = True

End Function
Function CopyDataFromGItoRV(sNameRangeToCopyOver As String, bSync As Boolean, bLockCell As Boolean, bLockStatus As Boolean, Optional bGIisMaster As Boolean) As Boolean
    Dim strA As String, strB As String

    strA = wksRepairs.Range("RV_" & sNameRangeToCopyOver).Value
    strB = wksGenInfo.Range(sNameRangeToCopyOver).Value

    If strA <> strB Then
        If bSync = True Then
            If bGIisMaster Then
                wksRepairs.Range("RV_" & sNameRangeToCopyOver).Value = strB
            Else
                wksGenInfo.Range(sNameRangeToCopyOver).Value = strA
            End If
        End If
        GoTo EarlyExit
    End If
    
    If bLockCell = True Then
        wksRepairs.Range("RV_" & sNameRangeToCopyOver).Select
        With Selection
            If bLockStatus Then
                .Locked = bLockStatus
                .Interior.Color = 15921906  'light grey for read-only
            Else
                .Locked = bLockStatus
                .Interior.ColorIndex = xlNone
            End If
        End With
    End If

    'Data matches
    CopyDataFromGItoRV = False
Exit Function
EarlyExit:
    'Data does not match
    CopyDataFromGItoRV = True
End Function
Private Function IsManualInputOnRVdifferentThanGI(sNameRangeToCheck As String) As Boolean
    Dim strGI As String, strRV As String

    If Not IsEmpty(wksGenInfo.Range(sNameRangeToCheck).Value) Then
        'Pass to string vars to prevent formatting differences causing false postives
        strGI = wksGenInfo.Range(sNameRangeToCheck).Value
        strRV = wksRepairs.Range("RV_" & sNameRangeToCheck).Value
    
        If strGI <> strRV Then
            IsManualInputOnRVdifferentThanGI = True
            Exit Function
        End If
    End If
    IsManualInputOnRVdifferentThanGI = False
End Function
Sub ShowAllPopulatedRVRows_RV()
    'This tab may be prefilled programatically, show more rows if they have content
    Dim iRVrowsShown As Integer, iRVpagesShown As Integer, iCount As Integer, i As Integer
    Dim j As Integer, k As Integer, sPassword As String
    
    iRVrowsShown = wksData.Range("RVrowsVisible")
    iRVpagesShown = wksData.Range("RVpagesVisible")
    iCount = wksData.Range("RVrowsPopulated")
    
    iCount = GetLastRow_RV

    If Not iRVrowsShown >= iCount Then
        'If here, need to unhide a page
        Do Until iRVrowsShown >= iCount
            DoEvents
            RVPage_Add
            
            iRVrowsShown = wksData.Range("RVrowsVisible")
            iRVpagesShown = wksData.Range("RVpagesVisible")
        Loop
    End If

    sPassword = wksData.Range("$A$53").Value
    wksRepairs.Unprotect sPassword
    Application.ScreenUpdating = False
    
    'Set Row height for all visible rows beginning with Item 1
    For i = RVrow1 To RVrow0 + iRVrowsShown
        If wksRepairs.Rows(i).RowHeight <> RVrowHeight Then
            wksRepairs.Rows(i).RowHeight = RVrowHeight
        End If
    Next i
    'Set Row height for all rows which should be hidden
    j = RVrow0 + iRVrowsShown + 1
    k = RVrow0 + RVmaxitems
    For i = j To k
        If wksRepairs.Rows(i).EntireRow.Hidden <> True Then
            wksRepairs.Rows(i).EntireRow.Hidden = True
        End If
    Next i
    
    wksRepairs.Protect sPassword
End Sub

Attribute VB_Name = "wksResources"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSeniors"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    ResizeCommentBoxes_SRS
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim bChkLen As Boolean
    Dim nMaxLen As Integer
    Dim nCmtLen As Integer
    Dim sName As String
    Dim sVal As String
    Dim sField As String, sTemp As String
       
    On Error GoTo Change_Error
    sName = Target.Cells(1, 1).Name.Name
    ' / / Code adjusted for all SRS report tabs being combined into one tab
    
    'Part I
    Select Case sName
        Case "SHSInspectionSiteComments", "SHSInspectionInteriorComments", "SHSInspectionAmenitiesComments"
        bChkLen = True
        nMaxLen = wksData.Range("$E$29").Value
        GoTo JumpToCheck
    End Select
    
    'Part II
    sTemp = "PayorType"
    If Right(sName, Len(sTemp)) = sTemp Then
        bChkLen = True
        nMaxLen = wksData.Range("$E$31").Value
        GoTo JumpToCheck
    End If
    
    Select Case sName
        Case "SRSResidentRoomsUnitMixComment"
        bChkLen = True
        nMaxLen = wksData.Range("$H$31").Value
        GoTo JumpToCheck
    
        Case "SHSResidentRoomsTurnaroundComments"
        bChkLen = True
        nMaxLen = wksData.Range("$H$32").Value
        GoTo JumpToCheck
        
        Case "SHSResidentRoomsRetenantingPreparationCount"
        bChkLen = True
        nMaxLen = wksData.Range("$E$33").Value
        GoTo JumpToCheck
    
    'Part III
        Case "SHSResidentServicesMedAdminStaff", "SHSResidentServicesMedAdminDocumentation"
        ResizeCommentBoxes_SRS
        bChkLen = True
        nMaxLen = wksData.Range("$H$42").Value
        GoTo JumpToCheck

    'Part IV
        Case "SHSManagementKeyEmployeeTurnover"
        bChkLen = True
        nMaxLen = wksData.Range("$H$37").Value
        GoTo JumpToCheck
        
        Case "SHSManagmentInspectCommentsStaffPatientInteraction", "SHSManagmentInspectCommentsResidentAppearance", "SHSManagmentInspectCommentsStaffAppearance", "SHSManagmentInspectCommentsCleanliness"
        ResizeCommentBoxes_SRS
        bChkLen = True
        nMaxLen = wksData.Range("$H$42").Value
        GoTo JumpToCheck
    
    'Part V
        Case "SHSUnitDesignComparisonComments"
        bChkLen = True
        nMaxLen = wksData.Range("$E$42").Value
        GoTo JumpToCheck
    
    'Part VI
        Case "SHSComplianceLicenseAgency", "SHSComplianceLicenseAgencyContact", "SHSComplianceLicenseExpDate"
        bChkLen = True
        nMaxLen = wksData.Range("$E$47").Value
        GoTo JumpToCheck
    
        Case "SHSOperatorsCorrectionPlanActionsComments"
        bChkLen = True
        nMaxLen = wksData.Range("$H$32").Value  'Same size as on SRS II, same reference
        GoTo JumpToCheck
    
        Case "SHSComplianceJudgmentsLicensedStaffComments", "SHSComplianceJudgmentsOtherStaffComments"
        ResizeCommentBoxes_SRS
        bChkLen = True
        nMaxLen = wksData.Range("$H$42").Value
        GoTo JumpToCheck

    End Select

    'Start over using partial matches on comments
    If Right(sName, 8) = "Comments" Then

    'Part III
        sTemp = "SHSResidentServicesMe"     'Longer first even though out of order
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$33").Value  'Long
            GoTo JumpToCheck
        End If
       
        sTemp = "SHSResidentSafety"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$33").Value  'Long
            GoTo JumpToCheck
        End If
       
        sTemp = "SHSResidentServicesStaff"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$32").Value  'Medium
            GoTo JumpToCheck
        End If
       
        'This last because unique is shortest len
        sTemp = "SHSResidentServices"
            If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$32").Value  'Medium
            GoTo JumpToCheck
        End If
       
    'Part IV
        sTemp = "SHSManagement"
            If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$33").Value  'Long
            GoTo JumpToCheck
        End If
    
    'Part V
        sTemp = "SHSMarketing"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$32").Value  'Medium
            GoTo JumpToCheck
        End If
        
    'Part VI
        sTemp = "SHSComplianceInspection"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$46").Value  'Medium
            GoTo JumpToCheck
        End If

        sTemp = "SHSComplianceRegulatory"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$46").Value  'Medium
            GoTo JumpToCheck
        End If
    
        sTemp = "SHSComplianceOtherLicense"
        If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
            bChkLen = True
            nMaxLen = wksData.Range("$E$45").Value  'Short
            GoTo JumpToCheck
        End If
    End If

    ' / For those which do not end in "Comments"
    'Part V
    sTemp = "SHSMarketingCompetitor"
    If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
        bChkLen = True
        nMaxLen = wksData.Range("$E$43").Value
        GoTo JumpToCheck
    End If

    'Part VI
    sTemp = "SHSComplianceLicense"
    If Left(sName, Len(sTemp)) = Left(sTemp, Len(sTemp)) Then
        bChkLen = True
        nMaxLen = wksData.Range("$E$47").Value  'Long
        GoTo JumpToCheck
    End If

    If Right(sName, 9) = "Indicator" Then
        FixOptionCase Target
    End If
    
    If Right(sName, 10) = "LifeSafety" Then 'Part I
        FixOptionCase Target
    End If

JumpToCheck:

    If bChkLen Then
        nCmtLen = Len(Target.Cells(1, 1).Text)

        If nCmtLen > nMaxLen Then
            MsgBox "The comment text entered exceeds the maximum length by " & nCmtLen - nMaxLen & _
                    " characters (limit is " & nMaxLen & " characters including spaces)." & vbCr & vbCr & _
                    "Please shorten your comments.", vbInformation + vbOKOnly, "Comment Text"
'            Target.Select
        End If
    End If
    Exit Sub
    
Change_Error:
    Exit Sub
End Sub
Private Sub ResizeCommentBoxes_SRS()
    Dim sPassword As String, iMaxLen As Integer
    
    sPassword = wksData.Range("$A$53").Value
    iMaxLen = wksData.Range("$H$42")
    Application.StatusBar = "Adjusting comment box sizes on Senior Supplement"
    Application.ScreenUpdating = False
    
    ResizeFullWidthBoxesALL 94, wksSeniors.Range("SHSResidentServicesMedAdminStaff"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 97, wksSeniors.Range("SHSResidentServicesMedAdminDocumentation"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 140, wksSeniors.Range("SHSManagmentInspectCommentsStaffPatientInteraction"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 144, wksSeniors.Range("SHSManagmentInspectCommentsResidentAppearance"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 148, wksSeniors.Range("SHSManagmentInspectCommentsStaffAppearance"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 152, wksSeniors.Range("SHSManagmentInspectCommentsCleanliness"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 228, wksSeniors.Range("SHSComplianceJudgmentsLicensedStaffComments"), iMaxLen, "Senior Supplement", 2, True
    ResizeFullWidthBoxesALL 232, wksSeniors.Range("SHSComplianceJudgmentsOtherStaffComments"), iMaxLen, "Senior Supplement", 2, True

    'Lock only if was unlocked
    If Not wksSeniors.ProtectContents Then
        wksSeniors.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
    Application.ScreenUpdating = True
    Application.StatusBar = False
End Sub
Attribute VB_Name = "wksTools"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "obRV, 41, 8, MSForms, OptionButton"
Attribute VB_Control = "obFHLMC, 24, 9, MSForms, OptionButton"
Attribute VB_Control = "obFNMA, 23, 10, MSForms, OptionButton"
Attribute VB_Control = "obBASIC, 22, 11, MSForms, OptionButton"
Attribute VB_Control = "chkSizeToFit, 7, 12, MSForms, CheckBox"
Attribute VB_Control = "cbGeneralInfo, 29, 13, MSForms, CheckBox"
Attribute VB_Control = "cbPhysical, 30, 14, MSForms, CheckBox"
Attribute VB_Control = "cbPhotos, 31, 15, MSForms, CheckBox"
Attribute VB_Control = "cbRentRoll, 32, 16, MSForms, CheckBox"
Attribute VB_Control = "cbMgmtInterview, 34, 17, MSForms, CheckBox"
Attribute VB_Control = "cbMultifamily, 35, 18, MSForms, CheckBox"
Attribute VB_Control = "cbRepairsVerification, 36, 19, MSForms, CheckBox"
Attribute VB_Control = "cbHospitals, 37, 20, MSForms, CheckBox"
Attribute VB_Control = "cbCompAssmt, 38, 21, MSForms, CheckBox"
Attribute VB_Control = "cbFREassmt, 39, 22, MSForms, CheckBox"
Attribute VB_Control = "cbSRS, 40, 23, MSForms, CheckBox"
Attribute VB_Control = "imgLogo, 44, 24, MSForms, Image"
Attribute VB_Control = "cbMBAratings, 46, 25, MSForms, CheckBox"
Attribute VB_Control = "cbFannieRatings, 47, 26, MSForms, CheckBox"
'Private Const apShiftMask = 1
Private pbPresetClicked As Boolean
Private pPauseEventsTools As Boolean
Private Sub Worksheet_Activate()
    Dim sPassword As String
    
    sPassword = wksData.Range("$A$53").Value
    pPauseEventsTools = False
    pbPresetClicked = False

    'Unlock
    If wksTools.ProtectContents Then wksTools.Unprotect sPassword
    
    MoveButtonsIntoPlace_ToolsMain
    SetReportTabCheckBoxesToMatchActual
    
    'Lock only if was unlocked
    If Not wksTools.ProtectContents Then
        wksTools.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If
    
    Application.StatusBar = False
    Application.ScreenUpdating = True
End Sub
Private Sub MoveButtonsIntoPlace_ToolsMain()

    On Error Resume Next

    Application.StatusBar = "Moving buttons into place"
    Application.ScreenUpdating = False

    'CheckBox, ActiveX
    With wksTools.chkSizeToFit
        .Top = wksTools.Range("B10").Top - 22
        .Left = wksTools.Range("B9").Left + 10
    End With
    
    'Logo image object
    MoveButtonsIntoPlace_Tools "imgLogo", "J9"
   
    'Form Control Buttons down left column
    SetButtonSizes_Tools "cmdInsertLogo", "B9", 22, 102, 0, 0
    SetButtonSizes_Tools "cmdDeleteLogo", "B9", 22, 102, 0, 23
    SetButtonSizes_Tools "cmdCheckSpelling", "B12", 22, 102, 0, 0
    SetButtonSizes_Tools "cmdPrint", "B14", 22, 102, 0, 0
    SetButtonSizes_Tools "cmdExtractPhotos", "B16", 22, 102, 0, 0
    SetButtonSizes_Tools "cmdShowAllTabs", "C31", 22, 102, 0, 5
    
    'Scope Presets - ActiveX
    MoveButtonsIntoPlace_Tools "obBASIC", "C21"
    MoveButtonsIntoPlace_Tools "obRV", "C23"
    MoveButtonsIntoPlace_Tools "obFNMA", "M21"
    MoveButtonsIntoPlace_Tools "obFHLMC", "M23"
    
    'Individual Tabs
    MoveButtonsIntoPlace_Tools "cbGeneralInfo", "C27"
    MoveButtonsIntoPlace_Tools "cbPhysical", "C28"
    MoveButtonsIntoPlace_Tools "cbPhotos", "C29"
    MoveButtonsIntoPlace_Tools "cbRentRoll", "C30"
    'Column 2
    MoveButtonsIntoPlace_Tools "cbMgmtInterview", "L27"
    MoveButtonsIntoPlace_Tools "cbMultifamily", "L28"
    MoveButtonsIntoPlace_Tools "cbCompAssmt", "L29"
    MoveButtonsIntoPlace_Tools "cbFREassmt", "L30"
    MoveButtonsIntoPlace_Tools "cbRepairsVerification", "L31"
    'Column 3
    MoveButtonsIntoPlace_Tools "cbSRS", "W27"
    MoveButtonsIntoPlace_Tools "cbHospitals", "W28"
    MoveButtonsIntoPlace_Tools "cbMBAratings", "X30"
    MoveButtonsIntoPlace_Tools "cbFannieRatings", "X31"
    
End Sub
Private Function MoveButtonsIntoPlace_Tools(sButtonName As String, sRange As String)

    On Error GoTo EarlyExit

    With wksTools.OLEObjects(sButtonName)
    .Top = wksTools.Range(sRange).Top
    .Left = wksTools.Range(sRange).Left
    
    End With

EarlyExit:
End Function
Private Sub ResizeLogo(wksTarget As Worksheet, ByVal vSizeMode As Variant, ByVal sPassword As String)
'
' Arguments:
'       wksTarget       The target worksheet
'       sPicFile        Filename for loogo.
'       sPassword       Password to unprotect teh sheet
'
' Remarks:
'       None.
'
' Return Value:
'       None.
'
'====================================================================
    On Error GoTo ResizeLogo_Error
    
    With wksTarget
        .Unprotect sPassword
        .OLEObjects("imgLogo").Object.PictureSizeMode = vSizeMode
        .Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    End With
    Exit Sub
    
ResizeLogo_Error:
    MsgBox "Error encountered in ResizeLogo while attempting to resize a company logo: " & Err.Number & _
            vbCr & vbCr & "Error description: " & Err.Description, vbOKOnly, "MBA Property Inspection Form"
    wksTarget.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    
End Sub
Private Sub chkSizeToFit_Click()
    Dim bUnlocked As Boolean
    Dim sPassword As String
    Dim vSizeMode As Variant

    On Error GoTo SizeToFit_Error
    
    ' Turn screen updating off
    Application.ScreenUpdating = False

    ' Get our new size mode
    vSizeMode = IIf(chkSizeToFit.Value = True, fmPictureSizeModeZoom, fmPictureSizeModeClip)

    ' Now resize logos
    sPassword = wksData.Range("$A$53")
    ResizeLogo wksTools, vSizeMode, sPassword
    ResizeLogo wksGenInfo, vSizeMode, sPassword
    Application.ScreenUpdating = True
    Exit Sub
    
SizeToFit_Error:
    MsgBox "Error encountered while attempting to insert a company logo: " & Err.Number & _
            vbCr & vbCr & "Error description: " & Err.Description, vbOKOnly, "MBA Property Inspection Form"
    Application.ScreenUpdating = True

End Sub
Private Sub RemoveLogo()
    Dim sPassword As String
    Dim wksCurr As Worksheet, oAsk


    oAsk = MsgBox("Remove the logo?", vbOKCancel)
    If oAsk = vbCancel Then Exit Sub
    
    Application.ScreenUpdating = False
    sPassword = wksData.Range("$A$53").Value
    Set wksCurr = wksTools
    'sPicFile = ""
    DeleteLogo wksCurr, sPassword

    Set wksCurr = wksGenInfo
    DeleteLogo wksCurr, sPassword
    
    wksTools.Select
    Application.ScreenUpdating = True

End Sub
Public Sub InsertLogo()
    'Using this same routine for adding new logo and deleting (as it only overwriters with blank white)
    Dim bUnlocked As Boolean
    Dim sPicFile As Variant
    Dim sPassword As String
    Dim sUserPswd As String
    Dim sLogoPswd As String
    Dim wksCurr As Worksheet

    On Error GoTo InsertLogo_Error:

        sPicFile = Application.GetOpenFilename( _
                    FileFilter:="Picture Files(*.jpg; *.jpeg; *.gif; *.tif), *.jpg; *.jpeg; *.gif; *.tif", _
                    Title:="Insert Company Logo", _
                    MultiSelect:=False)
        If sPicFile <> False Then
        Application.ScreenUpdating = False
        sPassword = wksData.Range("$A$53").Value
        
        '1st for tools
        Set wksCurr = wksTools
        If LoadLogo(wksCurr, sPicFile, sPassword) = False Then
            GoTo InsertLogo_Exit
        Else
            'Default to Size to Fit off
            wksTools.chkSizeToFit.Value = False
        End If
        
        '2nd for GI
        Set wksCurr = wksGenInfo
        If LoadLogo(wksCurr, sPicFile, sPassword) = False Then
            GoTo InsertLogo_Exit
        End If

'        wksTools.chkSizeToFit.Enabled = True
        wksTools.chkSizeToFit.BackStyle = fmBackStyleTransparent
    End If

InsertLogo_Exit:
    Set wksCurr = Nothing
    Application.ScreenUpdating = True
    'Unload Me
    Exit Sub

InsertLogo_Error:
    MsgBox "Error encountered while attempting to insert a company logo: " & Err.Number & _
            vbCr & vbCr & "Error description: " & Err.Description, vbOKOnly, "MBA Property Inspection Form"
    Resume InsertLogo_Exit
End Sub

Private Function LoadLogo(wksTarget As Worksheet, ByVal sPicFile As String, ByVal sPassword As String) As Boolean
'
' Arguments:
'       wksTarget       The target worksheet
'       sPicFile        Filename for logo.
'       sPassword       Password to unprotect the sheet
'
' Remarks:
'       None.
'
' Return Value:
'       Returns True if successful; otherwise, False.
'
'====================================================================
    On Error GoTo LoadLogo_Error

    wksTarget.Unprotect sPassword
    With wksTarget.OLEObjects("imgLogo").Object
        .Picture = LoadPicture(sPicFile)
        .PictureSizeMode = fmPictureSizeModeClip
    End With
    wksTarget.OLEObjects("imgLogo").Visible = True
    wksTarget.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    LoadLogo = True
    Exit Function
    

LoadLogo_Error:
    MsgBox "Error encountered in LoadLogo while attempting to insert a company logo: " & Err.Number & _
            vbCr & vbCr & "Error description: " & Err.Description, vbOKOnly, "MBA Property Inspection Form"
    wksTarget.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True

LoadLogo_Exit:
    LoadLogo = False
End Function
Private Function DeleteLogo(wksTarget As Worksheet, ByVal sPassword As String) As Boolean

' Arguments:
'       wksTarget       The target worksheet
'       sPicFile        Filename for logo.
'       sPassword       Password to unprotect the sheet
'
' Remarks:
'       None.
'
' Return Value:
'       Returns True if successful; otherwise, False.
'
'====================================================================
    On Error GoTo LoadLogo_Error

    wksTarget.Unprotect sPassword
'    With wksTarget.OLEObjects("imgLogo").Object
'        '.Picture = LoadPicture(sPicFile)
'        '.PictureSizeMode = fmPictureSizeModeClip
'    End With

    'Instead of deleting, only hiding it
    wksTarget.OLEObjects("imgLogo").Visible = False
    wksTarget.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True
    'LoadLogo = True
    wksTools.chkSizeToFit.Value = False
    Exit Function

LoadLogo_Error:
    MsgBox "Error encountered in LoadLogo while attempting to remove a company logo: " & Err.Number & _
            vbCr & vbCr & "Error description: " & Err.Description, vbOKOnly, "MBA Property Inspection Form"
    wksTarget.Protect Password:=sPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True

LoadLogo_Exit:
    'LoadLogo = False
End Function
Private Sub cbCompAssmt_Click()
    ShowOrHide wksComp, cbCompAssmt.Value
End Sub
Private Sub cbFREassmt_Click()
    ShowOrHide wksFMAssmtAddendum, cbFREassmt.Value

End Sub
Private Sub cbGeneralInfo_Click()
    ShowOrHide wksGenInfo, cbGeneralInfo.Value

End Sub
Private Sub cbHospitals_Click()
    ShowOrHide wksHospitals, cbHospitals.Value

End Sub
Private Sub cbMgmtInterview_Click()
    ShowOrHide wksMgtInterview, cbMgmtInterview.Value

End Sub
Private Sub cbMultifamily_Click()
    ShowOrHide wksMultifamily, cbMultifamily.Value

End Sub
Private Sub cbPhotos_Click()
    ShowOrHide wksPhotos, cbPhotos.Value

End Sub
Private Sub cbPhysical_Click()
    ShowOrHide wksPhysCond, cbPhysical.Value

End Sub
Private Sub cbRentRoll_Click()
    ShowOrHide wksRentRoll, cbRentRoll.Value

End Sub
Private Sub cbRepairsVerification_Click()
    ShowOrHide wksRepairs, cbRepairsVerification.Value

End Sub
Private Sub cbSRS_Click()
    'ShowOrHide Seniors Supplement tab
    ShowOrHide wksSeniors, cbSRS.Value

End Sub
Private Sub cbMBAratings_Click()
    ShowOrHide wksMBARatings, cbMBAratings.Value
End Sub
Private Sub cbFannieRatings_Click()
    ShowOrHide wksFannieRatings, cbFannieRatings.Value
End Sub
Public Sub ShowAllTabs_ButtonOnTools()
    'User wants all tabs visible
    Application.ScreenUpdating = False

    pPauseEventsGI = True
    pPauseEventsFNMA = True

    'Unselect all option buttons
    obBASIC.Value = False
    obRV.Value = False
    obFNMA.Value = False
    obFHLMC.Value = False
    
    cbGeneralInfo.Value = True
    cbPhysical.Value = True
    cbPhotos.Value = True
    cbRentRoll.Value = True
'    cbMaps.Value = True
    cbMgmtInterview.Value = True
    cbMultifamily.Value = True
    cbRepairsVerification.Value = True
    cbHospitals.Value = True
    cbCompAssmt.Value = True
    cbFREassmt.Value = True
    cbSRS.Value = True
    cbMBAratings.Value = True
    cbFannieRatings.Value = True
    
    'Not for user
    wksData.Visible = xlSheetVeryHidden
    wksResources.Visible = xlSheetVeryHidden
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    Application.ScreenUpdating = True
End Sub

Private Sub obBASIC_Click()
    'Check preset boxes for user for Basic Inspection
    Dim bRatingScaleChange As Boolean, sScale As String
    
    sScale = "MBA"
    Application.ScreenUpdating = False
    pbPresetClicked = True

    pPauseEventsGI = True
    pPauseEventsFNMA = True

    cbGeneralInfo.Value = True
    cbPhysical.Value = True
    cbPhotos.Value = True
    cbRentRoll.Value = True
'    cbMaps.Value = True
    cbMgmtInterview.Value = False
    cbMultifamily.Value = False
    cbRepairsVerification.Value = False
    cbHospitals.Value = False
    cbCompAssmt.Value = False
    cbFREassmt.Value = False
    cbSRS.Value = False
    
    'Set the Rating Type
    bRatingScaleChange = ChangeRatingType(sScale)
    wksGenInfo.Range("MBAOverallPropertyRatingScale").Value = sScale
    cbMBAratings.Value = True
    cbFannieRatings.Value = False
    
    'Not for user
    wksData.Visible = xlSheetVeryHidden
    wksResources.Visible = xlSheetVeryHidden
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    pbPresetClicked = False
    Application.ScreenUpdating = True
    If bRatingScaleChange Then MsgBox ("The Property Rating Scale on the General Info Report tab has been changed to " & sScale)
End Sub
Private Sub obRV_Click()
    'Check preset boxes for user for Repairs Verification
    Application.ScreenUpdating = False

    pPauseEventsGI = True
    pPauseEventsFNMA = True
    pbPresetClicked = True

    cbGeneralInfo.Value = False
    cbPhysical.Value = False
    cbPhotos.Value = True
    cbRentRoll.Value = False
    cbMgmtInterview.Value = False
    cbMultifamily.Value = False
    cbRepairsVerification.Value = True
    cbHospitals.Value = False
    cbCompAssmt.Value = False
    cbFREassmt.Value = False
    cbSRS.Value = False
    
    'Set the Rating Type
'    wksGenInfo.Range("MBAOverallPropertyRatingScale").Value = "MBA"
    cbMBAratings.Value = False
    cbFannieRatings.Value = False

    'Not for user
    wksData.Visible = xlSheetVeryHidden
    wksResources.Visible = xlSheetVeryHidden
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    pbPresetClicked = False
    Application.ScreenUpdating = True
End Sub
Private Sub obFNMA_Click()
    'Check preset boxes for user for Fannie Mae
    Dim bRatingScaleChange As Boolean, sScale As String
    
    sScale = "Fannie Mae"
    Application.ScreenUpdating = False
   
    pPauseEventsGI = True
    pPauseEventsFNMA = True
    pbPresetClicked = True
  
    cbGeneralInfo.Value = True
    cbPhysical.Value = True
    cbPhotos.Value = True
    cbRentRoll.Value = True
    cbMgmtInterview.Value = True
    cbMultifamily.Value = True
    cbRepairsVerification.Value = True
    cbHospitals.Value = False
    cbCompAssmt.Value = True
    cbFREassmt.Value = False
    cbSRS.Value = False
    
    'Set the Rating Type
    bRatingScaleChange = ChangeRatingType(sScale)
    wksGenInfo.Range("MBAOverallPropertyRatingScale").Value = sScale
    cbMBAratings.Value = False
    cbFannieRatings.Value = True
    
    'Not for user
    wksData.Visible = xlSheetVeryHidden
    wksResources.Visible = xlSheetVeryHidden
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    Application.ScreenUpdating = True
    pbPresetClicked = False
    If bRatingScaleChange Then MsgBox ("The Property Rating Scale on the General Info Report tab has been changed to " & sScale)
End Sub
Private Sub obFHLMC_Click()
    'Check preset boxes for user for Freddie Mac
    Dim bRatingScaleChange As Boolean, sScale As String
    
    sScale = "MBA"
    Application.ScreenUpdating = False
    
    pPauseEventsGI = True
    pPauseEventsFNMA = True
    pbPresetClicked = True
    
    cbGeneralInfo.Value = True
    cbPhysical.Value = True
    cbPhotos.Value = True
    cbRentRoll.Value = True
    cbMgmtInterview.Value = True
    cbMultifamily.Value = True
    cbRepairsVerification.Value = True
    cbHospitals.Value = False
    cbCompAssmt.Value = False
    cbFREassmt.Value = True
    cbSRS.Value = False
    
    'Set the Rating Type
    bRatingScaleChange = ChangeRatingType(sScale)
    wksGenInfo.Range("MBAOverallPropertyRatingScale").Value = sScale
    cbMBAratings.Value = True
    cbFannieRatings.Value = False

    'Not for user
    wksData.Visible = xlSheetVeryHidden
    wksResources.Visible = xlSheetVeryHidden
    pPauseEventsGI = False
    pPauseEventsFNMA = False
    pbPresetClicked = False
    Application.ScreenUpdating = True
    
    If bRatingScaleChange Then MsgBox ("The Property Rating Scale on the General Info Report tab has been changed to " & sScale)
End Sub
Private Sub SetReportTabCheckBoxesToMatchActual()

    'Turn off checkbox triggering
    pPauseEventsTools = True

    If wksGenInfo.Visible = xlSheetVisible Then
        cbGeneralInfo.Value = True
    Else
        cbGeneralInfo.Value = False
    End If

    If wksPhysCond.Visible = xlSheetVisible Then
        cbPhysical.Value = True
    Else
        cbPhysical.Value = False
    End If
    
    If wksPhotos.Visible = xlSheetVisible Then
        cbPhotos.Value = True
    Else
        cbPhotos.Value = False
    End If

    If wksRentRoll.Visible = xlSheetVisible Then
        cbRentRoll.Value = True
    Else
        cbRentRoll.Value = False
    End If
    
    If wksMgtInterview.Visible = xlSheetVisible Then
        cbMgmtInterview.Value = True
    Else
        cbMgmtInterview.Value = False
    End If
    
    If wksMultifamily.Visible = xlSheetVisible Then
        cbMultifamily.Value = True
    Else
        cbMultifamily.Value = False
    End If
    
    If wksComp.Visible = xlSheetVisible Then
        cbCompAssmt.Value = True
    Else
        cbCompAssmt.Value = False
    End If
    
    If wksFMAssmtAddendum.Visible = xlSheetVisible Then
        cbFREassmt.Value = True
    Else
        cbFREassmt.Value = False
    End If
    
    If wksRepairs.Visible = xlSheetVisible Then
        cbRepairsVerification.Value = True
    Else
        cbRepairsVerification.Value = False
    End If
    
    If wksSeniors.Visible = xlSheetVisible Then
        cbSRS.Value = True
    Else
        cbSRS.Value = False
    End If

    If wksHospitals.Visible = xlSheetVisible Then
        cbHospitals.Value = True
    Else
        cbHospitals.Value = False
    End If
    
    If wksMBARatings.Visible = xlSheetVisible Then
        cbMBAratings.Value = True
    Else
        cbMBAratings.Value = False
    End If
    
    If wksFannieRatings.Visible = xlSheetVisible Then
        cbFannieRatings.Value = True
    Else
        cbFannieRatings.Value = False
    End If

    'Done, turn triggering back on
    pPauseEventsTools = False

End Sub

Private Sub ShowOrHide(sSheetName As Worksheet, bShow As Boolean)
    'Toggles the tab being shown or hidden, invoked by the user clicking the assiciated checkbox
    
    If pPauseEventsTools = True Then Exit Sub
    
    Application.ScreenUpdating = False
    If bShow = True Then
        sSheetName.Visible = xlSheetVisible
    Else
        sSheetName.Visible = xlSheetHidden
    End If
    
    If pbPresetClicked = False Then
        'If user manually selected/deselected tabs then clear presets to prevent user confusion
        obBASIC.Value = False
        obRV.Value = False
        obFNMA = False
        obFHLMC = False
    End If
        
End Sub

Private Function ChangeRatingType(sNew As String) As Boolean
    Dim sCurrent As String
    
    sCurrent = wksGenInfo.Range("MBAOverallPropertyRatingScale").Value
    If Len(sCurrent) = 0 Then GoTo EarlyExit
    
    If sCurrent <> sNew Then
        ChangeRatingType = True
    Else
        ChangeRatingType = False
    End If

Exit Function
EarlyExit:
    ChangeRatingType = False
End Function

' InQuest injected base64 decoded content
' "wbq
' r"{)y
' "{)y
' J+^"{)y
' "{)y
' "{)y
' "{)y
' "{)y
' "{)y
' h*'v+b
' z{Hu
' r"{^
' r"{)y
' "{)y
' "{)y
' *'jP
' r"{)y
' r"{)y
' z{Hu
' j)ZnW
' /j)ZnW
' jS^y
' jS^y
' "{)y
' Qz{ZnW
' "wbq
' &j)@u
' Zn)b
' J+^"{)y
' "{)y
' z{Rz
' z{Rz
' "{)y
' bz{H
' "{)y
' "{)y
' z{Rz
' ~`ZrD

INQUEST-PP=macro
