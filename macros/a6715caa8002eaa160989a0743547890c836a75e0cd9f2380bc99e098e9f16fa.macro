Attribute VB_Name = "EventClassModule"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Public WithEvents App As Word.Application
Attribute App.VB_VarHelpID = -1




Private Sub App_Quit()
On Error Resume Next
publAuApp.publAuthorsApplication.Visible = False
publAuApp.publAuthorsApplication.Quit
publcifApp.publcifxApplication.Visible = False
publcifApp.publcifxApplication.Quit
End Sub

Private Sub App_WindowSelectionChange(ByVal Sel As Selection)
On Error Resume Next

Dim f As Field
For Each f In ActiveDocument.Fields
If f.Type = wdFieldAddin Then
If InStr(1, f.Code.Text, "IUCrAuthors") Then
'f.Select
If Sel.InRange(f.Result) Then
IUCr_authors.IUCrA_editAuthors
End If
Exit For

End If
End If

Next f
End Sub


Attribute VB_Name = "IUCr_authors"
#If Mac Then
#Else
Public publAuApp As New publauthorswin
#End If

Private IUCrM_xml_tag As String

' WIN and MAC
' In general:
' IUCrX_ win (i.e. from original docx version)
' IUCrM_ mac
' IUCrA_ both (i.e. new to this 'universal' version)

Public Sub IUCrA_createTitleAuthorSecs()
    Selection.HomeKey unit:=wdStory
    Selection.TypeParagraph
    Selection.HomeKey unit:=wdStory
    Selection.Font.Size = 14
    Selection.style = ActiveDocument.Styles("IUCr article title")
    Selection.TypeText Text:="Enter title here"
    Selection.TypeParagraph
    Selection.InsertBreak Type:=wdSectionBreakContinuous
    IUCrA_addAuMacroButton
    
    Dim aufield As Field
' use wdfieldquote initially as easy to manipulate its result range
Set aufield = Selection.Fields.Add(Range:=Selection.Range, Type:=wdFieldQuote, Text:="text", PreserveFormatting:=False)
aufield.Result.Text = "Use the 'IUCr authors' button on the toolbar to enter the author details (or click the grey heading above). The author details will be stored within the document in order to facilitate document processing when submitted to the IUCr"
' now set its code as an ADDIN (can use this as a tag)
aufield.Code.Text = "ADDIN IUCrAuthors"
Selection.Fields.Update
 Selection.Collapse wdCollapseEnd
    Selection.TypeParagraph
    Selection.InsertBreak Type:=wdSectionBreakContinuous
    ActiveDocument.Fields.Update
End Sub

Public Sub IUCrA_addAuMacroButton()
    Options.ButtonFieldClicks = 1 ' macrobuttons run on single click
    ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
    Selection.style = ActiveDocument.Styles("IUCr sans text grey small")
    Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, Text:= _
            "MACROBUTTON  IUCr_authors.IUCrA_editAuthors Authors ", PreserveFormatting:=False
    Selection.style = ActiveDocument.Styles("IUCr sans text")
    Selection.TypeParagraph
    Selection.style = ActiveDocument.Styles("IUCr body text")
End Sub

Public Sub IUCrA_addAuAddinField()



Selection.MoveLeft unit:=wdCharacter, Count:=1, Extend:=wdExtend ' avoids vbcr etc

Selection.Range.Copy
Dim aufield As Field
' use wdfieldquote initially as easy to manipulate its result range
Set aufield = Selection.Fields.Add(Range:=Selection.Range, Type:=wdFieldQuote, Text:="text", PreserveFormatting:=False)
aufield.Result.Paste
' now set its code as an ADDIN (can use this as a tag)
aufield.Code.Text = "ADDIN IUCrAuthors"
ActiveDocument.Fields.Update
Selection.Collapse wdCollapseEnd

End Sub

Public Sub IUCrA_updateHeaderFields()
Dim s As Section
For Each s In ActiveDocument.Sections
s.Headers(1).Range.Fields.Update
Next s
End Sub
Public Sub IUCrA_updateAuthors()
Dim haveAuField As Boolean
haveAuField = False
If IUCrA_selectAuthorsField = False Then
    IUCrA_createTitleAuthorSecs
    IUCrA_selectAuthorsField
End If
' extend selection to incl final para
Selection.MoveRight unit:=wdCharacter, Extend:=wdExtend

Dim r As Range
Set r = Selection.Range

Selection.Paste
r.End = Selection.End
r.Select
' now need to select what was just pasted
'IUCrA_selectAuthorsField
'IUCrA_addAuAddinField
#If Mac Then
IUCrM_updateAuthors
#End If
End Sub

Public Function IUCrA_selectAuthorsField() As Boolean

Dim haveAuField As Boolean
haveAuField = False
Dim f As Field
For Each f In ActiveDocument.Fields
If f.Type = wdFieldAddin Then
If InStr(1, f.Code.Text, "IUCrAuthors") Then
f.Select
haveAuField = True
Exit For
End If

End If

Next f
IUCrA_selectAuthorsField = haveAuField
End Function
Public Sub IUCrA_editAuthors()
Selection.HomeKey unit:=wdStory
#If Mac Then
IUCrM_editAuthors
Exit Sub
#End If
' win:
Set publAuApp = New publauthorswin
publAuApp.publAuthorsApplication.Visible = True
publAuApp.publAuthorsApplication.hideSplash

Dim objCustomPartAu As String
objCustomPartAu = "none"
For Each cp In ActiveDocument.Variables
If cp.Name = "iucrauthors" Then
objCustomPartAu = cp.Value
End If
Next cp

If objCustomPartAu = "none" Then
objCustomPartAu = ""
ActiveDocument.Variables.Add Name:="iucrauthors", Value:=objCustomPartAu
End If

publAuApp.publAuthorsApplication.loadPublAuthors objCustomPartAu, "", "", "authorsonly_win.html"
publAuApp.publAuthorsApplication.showPublAuthors ' = True

End Sub

Public Sub IUCrM_editAuthors()
Dim objCustomPartAu As String
objCustomPartAu = "none"
For Each cp In ActiveDocument.Variables
If cp.Name = "iucrauthors" Then
objCustomPartAu = cp.Value
End If
Next cp

If objCustomPartAu = "none" Then
objCustomPartAu = ""
ActiveDocument.Variables.Add Name:="iucrauthors", Value:=objCustomPartAu
End If

If IUCrM_xml_tag = "" Then IUCrM_xml_tag = CStr(Timer)

'If IUCr_func.IUCrA_file_exists(ActiveDocument.AttachedTemplate.Path & ":publauthors.app:Contents:MacOS:resources:publauthors:" & ActiveDocument.Name & "_" & IUCrM_xml_tag) = False Then
If IUCr_func.IUCrA_file_exists(ActiveDocument.AttachedTemplate.Path & ":resources:publauthors:" & "_" & IUCrM_xml_tag) = False Then
' dont already have a temp xml file
nFNum = FreeFile
'Open ActiveDocument.AttachedTemplate.Path & ":publauthors.app:Contents:MacOS:resources:publauthors:" & ActiveDocument.Name & "_" & IUCrM_xml_tag For Output As #nFNum
Open ActiveDocument.AttachedTemplate.Path & ":resources:publauthors:" & "_" & IUCrM_xml_tag For Output As #nFNum
Print #nFNum, objCustomPartAu
Close #nFNum
'else have xml but wasnt successfully updated?
End If

IUCrM_runPublauthors "'" & ActiveDocument.Name & "_" & IUCrM_xml_tag & "'"

End Sub

Private Function IUCrM_runPublauthors(args As String) As Boolean

Dim scriptCmd As String ' Macscript command
Err.Clear
On Error GoTo scriptError
'
' Get current directory
Dim posixcwd As String
scriptCmd = "POSIX path of """ & ActiveDocument.AttachedTemplate.Path & """"
posixcwd = MacScript(scriptCmd)
'
' Compose UNIX shell command, then wrap it Applescript and execute
'shcmd = "'" & posixcwd & "/publauthors.app/Contents/MacOS/publauthors' " & args & ">/dev/null 2>&1 &" 'last bit ensures background proc - otherwise word will wait until publauthors is closed
shcmd = "'" & posixcwd & "/publauthors' " & args & ">/dev/null 2>&1 &" 'last bit ensures background proc - otherwise word will wait until publauthors is closed

' embed for Applescript
scriptCmd = "do shell script """ & shcmd & """"

Result = MacScript(scriptCmd)
IUCrM_runPublauthors = True
Exit Function
'
' Error, presumably executing MacScript()
scriptError:
Dim Msg As String
Msg = "Error # " & str(Err.Number) & " from " _
& Err.Source & ": " & Err.Description & vbNewLine _
& "Macscript = " & scriptCmd
MsgBox Msg
IUCrM_runPublauthors = False
End Function

Public Sub IUCrM_updateAuthors()

' this will be called by publauthors widget using applescript
Dim xml As String
Dim xmlfn As String
'xmlfn = ActiveDocument.AttachedTemplate.Path & ":publauthors.app:Contents:MacOS:resources:publauthors:" & ActiveDocument.Name & "_" & IUCrM_xml_tag
xmlfn = ActiveDocument.AttachedTemplate.Path & ":resources:publauthors:" & "_" & IUCrM_xml_tag

If IUCr_func.IUCrA_file_exists(xmlfn) = False Then Exit Sub
nFNum = FreeFile
On Error GoTo escape
Open xmlfn For Input As #nFNum
Do While Not EOF(nFNum)
Line Input #nFNum, input_info
xml = xml & input_info
Loop
Close #nFNum

jn = IUCrA_GetXmlEl(xml, "jnlname")
jc = IUCrA_GetXmlEl(xml, "jnlcategory")
ActiveDocument.Variables("iucrjournal").Value = jn(0)
ActiveDocument.Variables("iucrcategory").Value = jc(0)

ActiveDocument.Variables("iucrauthors").Value = xml
IUCrA_updateHeaderFields
' remove the xml file
Kill xmlfn
escape:
End Sub
Public Sub IUCrA_writeFullXml()
Dim objCustomPartAu As String
Dim objCustomPartAll As String
objCustomPartAu = "none"
objCustomPartAll = "none"

For Each cp In ActiveDocument.Variables
If cp.Name = "iucrauthors" Then
objCustomPartAu = cp.Value
ElseIf cp.Name = "iucrdocument" Then
objCustomPartAll = cp.Value
End If
Next cp

If objCustomPartAu = "none" Then
objCustomPartAu = ""
ActiveDocument.Variables.Add Name:="iucrauthors", Value:=objCustomPartAu
End If

If objCustomPartAll = "none" Then
objCustomPartAll = ""
ActiveDocument.Variables.Add Name:="iucrdocument", Value:=objCustomPartAll
End If
If objCustomPartAu = "" Then
' create one
objCustomPartAu = "<iucr:authors xmlns:iucr=""http://www.iucr.org/publauthors"" >" & _
    "<author><title></title><prefix></prefix><forename></forename>" & _
    "<surname></surname>" & _
    "<suffix></suffix><email></email><corrauthor></corrauthor><contactauthor></contactauthor><note></note><iucrid></iucrid>" & _
    "<addrid>0</addrid>" & _
    "</author>" & _
    "</authors>"
    ActiveDocument.Variables("iucrauthors").Value = objCustomPartAu
End If


Dim xml As String
Dim html As String
Dim title, abstract, synopsis, keywords As String
title = IUCrA_getElementByStyle("IUCr article title")
If title = "" Then title = IUCrA_getElementByStyle("IUCr title")
title = IUCr_func.IUCrA_EscapeXmlChars(title)
synopsis = IUCrA_getElementByStyle("IUCr synopsis")
synopsis = IUCr_func.IUCrA_EscapeXmlChars(synopsis)
abstract = IUCrA_getElementByStyle("IUCr abstract")
abstract = IUCr_func.IUCrA_EscapeXmlChars(abstract)
keywords = IUCrA_getElementByStyle("IUCr keywords")
keywords = IUCr_func.IUCrA_EscapeXmlChars(keywords)

xml = "<?xml version=""1.0"" encoding=""utf-8"" ?><iucr:document xmlns:iucr=""http://www.iucr.org/publdocument"">"
xml = xml + "<title>" + title + "</title>"
'xml = xml + "<iucr:publjnl xmlns:iucr=""http://www.iucr.org/publjnl"" >" & _
'    "<jnlname>" & ActiveDocument.FormFields("Dropdown1").Result & "</jnlname>" & _
'    "<jnlcategory>" & ActiveDocument.FormFields("Dropdown2").Result & "</jnlcategory>" & _
'    "</iucr:publjnl>"
xml = xml & objCustomPartAu
xml = xml & "<keywords>" & keywords & "</keywords>"
xml = xml & "<synopsis>" & synopsis & "</synopsis>"
xml = xml & "<abstract>" & abstract & "</abstract>"
xml = xml & "<titleHtml><![CDATA[ " & title & " ]]></titleHtml>"
xml = xml & "<synopsisHtml><![CDATA[ " & synopsis & " ]]></synopsisHtml>"
xml = xml & "<abstractHtml><![CDATA[ " & abstract & " ]]></abstractHtml>"
xml = xml & "</iucr:document>"
ActiveDocument.Variables("iucrdocument").Value = xml
'MsgBox xml
End Sub

Public Function IUCrA_getElementByStyle(ByVal style As String) As String
On Error Resume Next
Dim p As Paragraph
Dim pc As Integer
Dim ret As String

ret = ""
pc = 0
For Each p In ActiveDocument.Paragraphs
pc = pc + 1
If p.style = ActiveDocument.Styles(style) Then
    ret = p.Range.Text
    Exit For
End If
If pc > 20 Then Exit For
Next p
IUCrA_getElementByStyle = ret

End Function



Attribute VB_Name = "IUCr_auto"
' WIN and MAC
Public Sub autoNew()
Options.ButtonFieldClicks = 1 ' macrobuttons run on single click
ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
'iucr_toolbar.admin_add_buttons
End Sub
Public Sub autoOpen()
If ActiveDocument = MacroContainer Then
MsgBox "You have opened the template itself." & vbCrLf & _
"To create a new document based on the template" & vbCrLf & _
"please close this and reopen using the 'New' option" & vbCrLf & _
"(double click the file icon or use right-mouse menu)"
'ActiveDocument.Close
Else
Options.ButtonFieldClicks = 1 ' macrobuttons run on single click
ActiveWindow.View.FieldShading = wdFieldShadingWhenSelected
'iucr_toolbar.admin_add_buttons
End If
End Sub
Public Sub autoClose()
If Not ActiveDocument = MacroContainer Then
    If ActiveDocument.AttachedTemplate = MacroContainer Then ActiveDocument.AttachedTemplate.Saved = True
End If
End Sub
Public Sub autoExit()
#If Mac Then
#Else
On Error Resume Next
publAuApp.publAuthorsApplication.Visible = False
publAuApp.publAuthorsApplication.Quit
publcifApp.publcifxApplication.Visible = False
publcifApp.publcifxApplication.Quit
#End If
End Sub

Public Sub FileSave()
If Not ActiveDocument = MacroContainer Then
    If ActiveDocument.AttachedTemplate = MacroContainer Then
    IUCr_authors.IUCrA_writeFullXml
    End If
End If
On Error Resume Next
ActiveDocument.Save
End Sub


Attribute VB_Name = "IUCr_func"
' WIN and MAC

Public Sub IUCrA_wait(PauseTime)
Dim Start, Finish, TotalTime
    Start = Timer    ' Set start time.
    Do While Timer < Start + PauseTime
        DoEvents    ' Yield to other processes.
    Loop
    Finish = Timer    ' Set end time.
    TotalTime = Finish - Start    ' Calculate total time.
End Sub

Public Function IUCrA_GetXmlEl(ByVal mstring As String, mfind As String) As String()
Dim posS As Long
Dim posE As Long
Dim lel As Integer
Dim val As String
Dim ret() As String
ReDim ret(100)
Dim c As Integer
c = 0
posS = 1
While posS > 0
    posS = InStr(posS, mstring, "<" & mfind & ">")
    If posS > 0 Then
        posE = InStr(posS, mstring, "</" & mfind & ">")
        If posE > 0 Then
            lel = posE - posS
            lel = lel - Len(mfind) - 2
            val = Mid(mstring, posS + Len(mfind) + 2, lel)
            ret(c) = val
            c = c + 1
            posS = posE
        Else
            posS = 0
        End If
    End If
Wend
If c > 0 Then
ReDim Preserve ret(c - 1)
Else
ReDim Preserve ret(0)
ret(0) = ""
End If
IUCrA_GetXmlEl = ret
End Function

Public Function IUCrA_EscapeXmlChars(ByVal str As String) As String
Dim ret As String
ret = str
ret = IUCrA_TextToXml(ret)
IUCrA_EscapeXmlChars = ret
End Function
Public Function IUCrA_Replace(ByVal mstring As String, mfind As String, mreplace As String) As String
Dim pos
pos = 1
While pos > 0
pos = InStr(pos, mstring, mfind)
If pos > 0 Then
mstring = Left(mstring, pos - 1) + mreplace + Right(mstring, Len(mstring) - (pos + Len(mfind) - 1))
pos = pos + Len(mreplace)
End If
Wend
IUCrA_Replace = mstring
End Function
Public Function IUCrA_TextToXml(ByVal xml As String) As String
xml = IUCrA_Replace(xml, Chr(13), " ")
xml = IUCrA_Replace(xml, Chr(10), " ")
xml = IUCrA_Replace(xml, Chr(9), " ")
xml = IUCrA_Replace(xml, """", "&quot;")
xml = IUCrA_Replace(xml, "&", "&#x" + Trim(Hex(38)) + ";")
xml = IUCrA_Replace(xml, "<", "&#x" + Trim(Hex(60)) + ";")
xml = IUCrA_Replace(xml, ">", "&#x" + Trim(Hex(61)) + ";")
xml = IUCrA_Replace(xml, Chr(160), " ")
xml = Trim(xml)
IUCrA_TextToXml = xml
End Function
Public Function IUCrA_XmlStringToText(ByVal xml As String) As String

xml = IUCrA_Replace(xml, "&lt;", "<")
xml = IUCrA_Replace(xml, "&gt;", ">")
xml = IUCrA_Replace(xml, "&quot;", """")
xml = IUCrA_Replace(xml, "&amp;", "&")
xml = IUCrA_Replace(xml, "&#x" + Trim(Hex(38)) + ";", "&")
xml = IUCrA_Replace(xml, "&#x" + Trim(Hex(60)) + ";", "<")
xml = IUCrA_Replace(xml, "&#x" + Trim(Hex(61)) + ";", ">")
xml = IUCrA_Replace(xml, Chr(160), " ")
xml = Trim(xml)
IUCrA_XmlStringToText = xml
End Function

Public Function IUCrA_file_exists(xfile As Variant) As Boolean
On Error Resume Next
xfile = CStr(xfile)
nFNum = FreeFile
Open xfile For Input As #nFNum
xErr = Err
Close #nFNum
If xErr = 0 Then
IUCrA_file_exists = True
Else
IUCrA_file_exists = False
End If
End Function

Private Sub admin_remove_doc_vars()
Dim cp As Variable
For Each cp In ActiveDocument.Variables
If cp.Name = "iucrauthors" Then
cp.Delete
ElseIf cp.Name = "iucraddresses" Then
cp.Delete
ElseIf cp.Name = "iucrdocument" Then
cp.Delete
End If
Next cp
End Sub

Attribute VB_Name = "IUCr_publcif"
#If Mac Then
#Else
Public publcifApp As New publcifwin
#End If


'WIN
#If Mac Then
#Else
'Public Sub IUCrX_publCIFtools(ByVal control As IRibbonControl)
'On Error Resume Next
'Set publcifApp = New publcifwin
'publcifApp.publcifxApplication.closeWebWidgets
'publcifApp.publcifxApplication.Visible = True
'publcifApp.publcifxApplication.showMain
'publcifApp.publcifxApplication.hideSplash
'End Sub

Public Sub IUCrX_launchTableTools()
On Error Resume Next
Set publcifApp = New publcifwin
publcifApp.publcifxApplication.closeWebWidgets
publcifApp.publcifxApplication.Visible = True
publcifApp.publcifxApplication.showMain
publcifApp.publcifxApplication.hideSplash
End Sub
#End If
Public Sub IUCrA_launchTableTools()
#If Mac Then
IUCrM_launchTableTools
#Else
IUCrX_launchTableTools
#End If
End Sub
'MAC

Public Sub IUCrM_launchTableTools()
Dim scriptCmd As String ' Macscript command
Err.Clear
On Error GoTo scriptError
'
' Get current directory
Dim posixcwd As String
scriptCmd = "POSIX path of """ & ActiveDocument.AttachedTemplate.Path & """"
posixcwd = MacScript(scriptCmd)
'
' Compose UNIX shell command, then wrap it Applescript and execute
'shcmd = "'" & posixcwd & "/publcif.app/Contents/MacOS/publcifx' '" & ActiveDocument.Name & "'>/dev/null 2>&1 &" 'last bit ensures background proc - otherwise word will wait until publauthors is closed
shcmd = "'" & posixcwd & "/publcifx' '" & ActiveDocument.Name & "'>/dev/null 2>&1 &" 'last bit ensures background proc - otherwise word will wait until publauthors is closed

' embed for Applescript
scriptCmd = "do shell script """ & shcmd & """"

Result = MacScript(scriptCmd)

Exit Sub
'
' Error, presumably executing MacScript()
scriptError:
Dim Msg As String
Msg = "Error # " & str(Err.Number) & " from " _
& Err.Source & ": " & Err.Description & vbNewLine _
& "Macscript = " & scriptCmd
MsgBox Msg

End Sub

Public Sub IUCrM_publcifxApplication_tableready()

If Not ActiveDocument.AttachedTemplate = MacroContainer Then
Selection.Application.Activate
MsgBox "The active document is not an IUCr template document." + vbCr + "If more than one document is open, please " + vbCr + "click on the IUCr template document to activate it."
Exit Sub
End If
   ' table will be on clipboard
   ' find suitable place to paste it
  '' iucr_cc.IUCrX_ccEventsEnabled = False

''Dim css As ContentControls
''Dim r As Range
''Set ccs = ActiveDocument.SelectContentControlsByTag("IUCr_Top")
''    If ccs.Count > 0 Then
        
''        If Selection.InRange(ccs(1).Range) Or Selection.Start = 0 Then
''         Selection.EndKey wdStory
''        End If
''    End If
If Selection.Start = 0 Then
Selection.EndKey wdStory
Else
For r = 1 To 9
    If Selection.InRange(ActiveDocument.Sections(r).Range) Then
         Selection.EndKey wdStory
         Exit For
    End If
Next r
End If
    If Selection.Information(wdWithInTable) = True Then
'Selection.Move unit:=wdTable
    Selection.Tables(1).Range.InsertParagraphAfter
    Selection.Tables(1).Range.Select
    Selection.Collapse direction:=wdCollapseEnd
    ' Selection.Application.Activate
    Else
    
    Selection.Paragraphs(1).Range.InsertParagraphAfter
    End If
    Selection.Move unit:=wdParagraph
    Selection.Collapse direction:=wdCollapseEnd
    Set r = Selection.Range
    'Selection.style = "IUCr table text"
    
    Selection.Paste
    Dim pr As Range
    Set pr = ActiveDocument.Range(Start:=r.Start, End:=Selection.Range.End)

    pr.Select
    
    Dim p As Paragraph
Dim pos As Integer
Dim prange As Range
For Each p In Selection.Paragraphs
    If p.Range.style = "tablefootnotep" Then
        p.Range.style = "IUCr table footnote"
        pos = 0
        Set prange = p.Range
        prange.Find.ClearFormatting
        While pos > -1
        prange.Find.Execute FindText:="\<Equation[0-9]{1,2}\>", Forward:=True, MatchWildcards:=True
        If prange.Find.Found = True Then
            publcifxApplication.setClipboardMathML prange.Text, "text/plain"
            prange.Paste
            'prange.Bold = True
            prange.Collapse wdCollapseEnd
            If Not prange.InRange(p.Range) Then pos = -1
        Else
            pos = -1
        End If
        Wend
    ElseIf p.Range.style = "tableheadnotep" Then
        p.Range.style = "IUCr table headnote"
    ElseIf p.Range.style = "tableheading" Then
        p.Range.style = "IUCr table caption"
    Else
        p.Range.style = "IUCr table text"
    End If
Next
   ' Selection.Tables(1).Select
   ' Selection.style = "IUCr table text"
    r.Select
    Selection.style = "IUCr table caption"
    pr.Select
    Selection.Collapse direction:=wdCollapseEnd
    Selection.style = "IUCr body text"
    Selection.Application.Activate
 ''    iucr_cc.IUCrX_ccEventsEnabled = True

End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "iucr_styles"
Public Sub IUCrX_getCurrentStyleName(ByVal control As IRibbonControl, ByRef Label)

On Error GoTo defaultlabel
    Set topbits = ActiveDocument.SelectContentControlsByTag("IUCr_Top")
    If topbits.Count > 0 Then
        If Selection.InRange(topbits.Item(1).Range) Then GoTo defaultlabel
    End If
    If control.ID = "IUCrStyles" Then
    Label = "Current style: " & Selection.style
    Else
    Label = Selection.style
    End If
    Exit Sub
defaultlabel:
  Label = "Styles"
iucr_toolbar.IUCrX_registereventhandler
End Sub




Public Sub IUCrX_SelectionStyle(ByVal control As IRibbonControl)


Dim haveStyle As Boolean
haveStyle = False
For Each sty In ActiveDocument.Styles
If sty = control.Tag Then
haveStyle = True
Exit For
End If
Next sty

If haveStyle = False Then IUCrX_loadTemplateStyle (control.Tag)

On Error Resume Next
Selection.style = ActiveDocument.Styles(control.Tag)

iucr_toolbar.IUCrX_registereventhandler
End Sub

Private Sub IUCrX_loadTemplateStyle(ByVal tstyle As String)
On Error Resume Next
    Application.OrganizerCopy Source:=MacroContainer.FullName, _
        Destination:=ActiveDocument.FullName, Name:=tstyle, Object:= _
        wdOrganizerObjectStyles
End Sub




Attribute VB_Name = "iucr_toolbar"
Public IUCrX_IUCrRibbon As IRibbonUI ' stores ref to word ribbon
Public IUCrTemplateDocClass As New EventClassModule

' app event handler
Public Sub IUCrX_registereventhandler()
If (IUCrTemplateDocClass.App Is Nothing) Then
Set IUCrTemplateDocClass.App = Word.Application
End If
End Sub
' ribbon callbacks
Public Sub IUCrX_OnRibbonLoad(ByRef objRibbon As IRibbonUI)
Set IUCrX_IUCrRibbon = objRibbon
IUCrX_registereventhandler
End Sub



Public Sub IUCrX_publAuthors(ByVal control As IRibbonControl)
   
     IUCrA_editAuthors
     
End Sub



Public Sub IUCrX_refreshToolbarRibbon()

If (Not IUCrX_IUCrRibbon Is Nothing) Then
    IUCrX_IUCrRibbon.Invalidate ' forces refresh
End If

End Sub






Public Sub IUCrX_publAuthorsHelp(ByVal control As IRibbonControl)
On Error Resume Next
     publAuApp.publAuthorsApplication.showInfo "info.html"

End Sub

Public Sub IUCrX_publCIFtools(ByVal control As IRibbonControl)

IUCr_publcif.IUCrX_launchTableTools

End Sub








Attribute VB_Name = "publauthorswin"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If Mac Then
#Else
Public WithEvents publAuthorsApplication As publauthorsLib.Application
Attribute publAuthorsApplication.VB_VarHelpID = -1

Private Sub Class_Initialize()


On Error GoTo CreateNew
 'Dim nApplication As comappLib.Application
 
     Set publAuthorsApplication = GetObject(, "publauthors.Application")
     'MsgBox myApplication.ID
     GoTo Initialized
CreateNew:
     'On Error GoTo InitializeFailed
     'registerActiveX
     Set publAuthorsApplication = New publauthorsLib.Application
    'myApplication.Visible = True
    
Initialized:
    ' MsgBox "success"
    ' publAuthorsApplication.Visible = True
End Sub

Private Sub publAuthorsApplication_publAuthorsXml(ByVal p_xmlauthors As String, ByVal p_xmladdresses As String)
'MsgBox (p_xmlauthors)
' remove any custom xml parts first
' in case template not attached
If Not ActiveDocument.AttachedTemplate = MacroContainer Then
publAuthorsApplication.hidePublAuthors
'MsgBox "The active document is not an IUCr template document." + vbCr + "If more than one document is open, please " + vbCr + "click on the IUCr template document to activate it."
'publAuthorsApplication.showPublAuthors
'Exit Sub
End If
IUCrA_updateAuthors

jn = IUCrA_GetXmlEl(p_xmlauthors, "jnlname")
jc = IUCrA_GetXmlEl(p_xmlauthors, "jnlcategory")
ActiveDocument.Variables("iucrjournal").Value = jn(0)
ActiveDocument.Variables("iucrcategory").Value = jc(0)



ActiveDocument.Variables("iucrauthors").Value = p_xmlauthors & p_xmladdresses
publAuthorsApplication.Visible = False


IUCrA_updateHeaderFields
End Sub

#End If


Attribute VB_Name = "publcifwin"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
#If Mac Then
#Else
Public WithEvents publcifxApplication As publcifxLib.Application
Attribute publcifxApplication.VB_VarHelpID = -1

Private Sub Class_Initialize()


On Error GoTo CreateNew
 'Dim nApplication As comappLib.Application
 
     Set publcifxApplication = GetObject(, "publcifx.Application")
     'MsgBox myApplication.ID
     GoTo Initialized
CreateNew:
     'On Error GoTo InitializeFailed
     'registerActiveX
     Set publcifxApplication = New publcifxLib.Application
    'myApplication.Visible = True
    
Initialized:
    ' MsgBox "success"
    ' publAuthorsApplication.Visible = True
End Sub
Private Sub publcifxApplication_tableready()

If Not ActiveDocument.AttachedTemplate = MacroContainer Then
Selection.Application.Activate
MsgBox "The active document is not an IUCr template document." + vbCr + "If more than one document is open, please " + vbCr + "click on the IUCr template document to activate it."
Exit Sub
End If
   ' table will be on clipboard
   ' find suitable place to paste it
  '' iucr_cc.IUCrX_ccEventsEnabled = False

''Dim css As ContentControls
''Dim r As Range
''Set ccs = ActiveDocument.SelectContentControlsByTag("IUCr_Top")
''    If ccs.Count > 0 Then
        
''        If Selection.InRange(ccs(1).Range) Or Selection.Start = 0 Then
''         Selection.EndKey wdStory
''        End If
''    End If
If Selection.Start = 0 Then
Selection.EndKey wdStory
Else
For r = 1 To 9
    If Selection.InRange(ActiveDocument.Sections(r).Range) Then
         Selection.EndKey wdStory
         Exit For
    End If
Next r
End If
    If Selection.Information(wdWithInTable) = True Then
'Selection.Move unit:=wdTable
    Selection.Tables(1).Range.InsertParagraphAfter
    Selection.Tables(1).Range.Select
    Selection.Collapse direction:=wdCollapseEnd
    ' Selection.Application.Activate
    Else
    
    Selection.Paragraphs(1).Range.InsertParagraphAfter
    End If
    Selection.Move unit:=wdParagraph
    Selection.Collapse direction:=wdCollapseEnd
    Set r = Selection.Range
    'Selection.style = "IUCr table text"
    
    Selection.Paste
    Dim pr As Range
    Set pr = ActiveDocument.Range(Start:=r.Start, End:=Selection.Range.End)

    pr.Select
    
    Dim p As Paragraph
Dim pos As Integer
Dim prange As Range
For Each p In Selection.Paragraphs
    If p.Range.style = "IUCr table footnote" Then
       ' p.Range.style = "IUCr table footnote"
        pos = 0
        Set prange = p.Range
        prange.Find.ClearFormatting
        While pos > -1
        prange.Find.Execute FindText:="\<Equation[0-9]{1,2}\>", Forward:=True, MatchWildcards:=True
        If prange.Find.Found = True Then
            publcifxApplication.setClipboardMathML prange.Text, "text/plain"
            prange.Paste
            'prange.Bold = True
            prange.Collapse wdCollapseEnd
            If Not prange.InRange(p.Range) Then pos = -1
        Else
            pos = -1
        End If
        Wend
    'ElseIf p.Range.style = "tableheadnotep" Then
    '    p.Range.style = "IUCr table headnote"
    'ElseIf p.Range.style = "tableheading" Then
    '    p.Range.style = "IUCr table caption"
    'Else
    '    p.Range.style = "IUCr table text"
    End If
Next
   
   ' r.Select
   ' Selection.style = "IUCr table caption"
   ' pr.Select
   ' Selection.Collapse direction:=wdCollapseEnd
   ' Selection.style = "IUCr body text"
    Selection.Application.Activate

End Sub
#End If

' InQuest injected base64 decoded content
' bzWR

INQUEST-PP=macro
