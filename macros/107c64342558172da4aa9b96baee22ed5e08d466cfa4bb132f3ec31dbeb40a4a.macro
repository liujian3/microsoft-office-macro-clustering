Attribute VB_Name = "Connections"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Public WithEvents objFunc As clsFunctions
'
'Private Sub objFunc_CellChanged()
'
'End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    If Target.Row = ixListBox + 1 And Target.Column Mod 3 = 1 Then
'        DropdownChange (CStr(Cells(ixListBox, Target.Column)))
    ElseIf Target.Row = ixCheckBox + 8 Then
    
    End If
Exit Sub

mErr:
    MsgBox "Error changing data"
End Sub

Sub DropdownChange(sName As String)
    Dim lCurRow As Long
    Dim lCurPage As Long
    
    On Error GoTo mErr
    lCurPage = Val(Right(sName, 3))
'    lCurRow = Sheets("Database").Cells.Find(Sheets("Page 1").Range("cmpnt_name"), _
'        Sheets("Database").Range("A1"), , , xlByRows, xlPrevious).Row
    lCurRow = Sheets("Database").Cells.Find(Sheets("Sheet" & lCurPage _
        ).Range("cmpnt_name" & Right(sName, 4)), Sheets("Database" _
        ).Range("A1"), , , xlByRows, xlPrevious).Row
    
Exit Sub

mErr:
    Debug.Print "DropdownChange - " & Err.Number & ": " & Err.Description
    Resume Next
End Sub

Sub CheckboxChange(sName As String)
    Dim lCurRow As Long
    Dim lCurPage As Long
    
    lCurPage = Val(Right(sName, 3))

End Sub
Attribute VB_Name = "Database"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sRange As String
    Dim lRow As Long
    Dim oLocalFunc As clsFunctions
    Dim lRes As Long
    Dim lCmpCol As Long
    Dim vPageNum As Variant
    
    On Error Resume Next
    If bDeactivateChange Then Exit Sub
    If bBusy Then Exit Sub
    
    bBusy = True
    Set oLocalFunc = New clsFunctions
    lRes = oLocalFunc.UpdateRanges(Target, sRange)
    vPageNum = Split(ActiveSheet.Name, " ")
    If Not IsNumeric(vPageNum(1)) Then GoTo CleanUp
    lCmpCol = 3
    Do Until Sheets("Database").Cells(10, lCmpCol) = Range("cmpnt_name_" & Format(vPageNum(1), "000"))
        If lCmpCol > 256 Then GoTo CleanUp
        lCmpCol = lCmpCol + 1
    Loop
    lRes = oLocalFunc.UpdateDBAfterChangingRanges(Target, sRange, lCmpCol)
    lRes = oLocalFunc.ShowRecord(lCmpCol, "Database")
CleanUp:
    bBusy = False
    Set oLocalFunc = Nothing
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim sRange As String
    Dim lRow As Long
    Dim oLocalFunc As clsFunctions
    Dim lRes As Long
    Dim lCmpCol As Long
    Dim vPageNum As Variant
    
    On Error Resume Next
    If bDeactivateChange Then Exit Sub
    If bBusy Then Exit Sub
    
    bBusy = True
    Set oLocalFunc = New clsFunctions
    lRes = oLocalFunc.UpdateRanges(Target, sRange)
    vPageNum = Split(ActiveSheet.Name, " ")
    If Not IsNumeric(vPageNum(1)) Then GoTo CleanUp
    lCmpCol = 3
    Do Until Sheets("Database").Cells(10, lCmpCol) = Range("cmpnt_name_" & Format(vPageNum(1), "000"))
        If lCmpCol > 256 Then GoTo CleanUp
        lCmpCol = lCmpCol + 1
    Loop
    lRes = oLocalFunc.UpdateDBAfterChangingRanges(Target, sRange, lCmpCol)
    lRes = oLocalFunc.ShowRecord(lCmpCol, "Database")
CleanUp:
    bBusy = False
    Set oLocalFunc = Nothing
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Sub ShowFormCmpName()
    Sheets("CmpName").Visible = True
End Sub

Sub HideFormCmpName()
    Sheets("CmpName").Visible = False
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Base 1

'Const ixHorizontal As Long = 1
'Const ixVertical As Long = 2
'Const ixDiagonal As Long = 3

'Const ixCheckBox As Long = 2
'Const ixListBox As Long = 20
'Const ixRadioButton As Long = 60

Dim colDBCols As Collection
Dim objFunc As clsFunctions
Attribute objFunc.VB_VarHelpID = -1
'Const dWidthFactor As Double = 45    '40.5
'Const dHeightFactor As Double = 0.175   '5.7=1/0.175

'Public Sub dropdown_change()
'    Cells(1, 1).Activate
'End Sub

Public Function FormatSheet(sSheetName As String, ColX As _
    Collection, dWidthFactor As Double, ColY As Collection, _
    dHeightFactor As Double, ColLines As Collection, colText As _
    Collection, objRSData As Recordset, ColEdit As Collection, _
    colEdMask As Collection, ColLB As Collection, colCB As _
    Collection, colRB As Collection, colDW As Collection, _
    colDWTableList As Collection, colCmp As Collection, colHidden _
    As Collection, sAccuracy As String, lNumOfPages As Long, _
    objLogFile As Object) As Long
'Public Function FormatSheet(sSheetName As String, ColX As _
'    Collection, dWidthFactor As Double, ColY As Collection, _
'    dHeightFactor As Double, ColLines As Collection, colText As _
'    Collection, ColEdit As Collection, _
'    colEdMask As Collection, ColLB As Collection, colCB As _
'    Collection, colRB As Collection, colDW As Collection, _
'    colDWTableList As Collection, colCmp As Collection, colHidden _
'    As Collection, sAccuracy As String, objLogFile As Object) As Long
    
    Dim lULimit As Long
    Dim lCount As Long
'    Dim objTemp As clsCoorProp
    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim colAnomalLines As Collection
    Dim lRes As Long
    Dim CellArr() As SpecCell
    Dim lTempRow As Long
    Dim lTempCol As Long
    Dim udtTempCell() As CellObject
    Dim lSheetNum As Long
    Dim lSection As Long    'for logFile
    Dim sObjName As String
    Dim sPrintArea As String
    Dim bDrawLayout As Boolean
    Dim lWidthPBUnit As Long
    Dim lHeightPBUnit As Long
    Dim lWidthPix As Long
    Dim lHeightPix As Long
    
    On Error GoTo mErr
    Application.DisplayAlerts = False
    bDeactivateChange = True
    Set objFunc = New clsFunctions
'    Set g_func = objFunc
'    Set Sheets("Connections").objFunc = g_func
    'need to loop for several pages
    
'    Set objLogFile = New clsLogFile
    With objLogFile
'        lRes = .SetLogFile(sLogFileName)
        .AddString "                     ", 0, ""
        .AddString "******* " & sSheetName & " *******", 0, ""
    End With
    
    Set oLocalLogFile = objLogFile
    
    sDefAccuracy = sAccuracy
    
    '-- temporary for debug --
    If sDefAccuracy = "" Then
        sDefAccuracy = "0.###"
    End If
    '-------------------------
    
    lMaxCols = ColX.Count
    lMaxRows = ColY.Count
    
    bDrawLayout = True
    
    lSheetNum = Right(sSheetName, Len(sSheetName) - 5)
    If sSheetName <> "Page 1" Then
'        Sheets(1).Select
'        Sheets.Add
        Sheets("Template").Visible = True
        Sheets("Template").Select
        Sheets("Template").Copy Before:=Sheets(1)
        Sheets("Template").Visible = False
        Sheets(1).Name = sSheetName
        Sheets(sSheetName).Move After:=Sheets("Page " & _
            lSheetNum - 1)
        
'        objFunc.FillDatabase "Database", objRSData, Right(sSheetName, _
'            Len(sSheetName) - 5)
        objFunc.FillDatabase "Database", objRSData, bDrawLayout, _
            lSheetNum
'        objFunc.FillDatabase "Database", ColEdit, lSheetNum
    Else
        objFunc.FillDatabase "Database", objRSData, bDrawLayout, _
            , lNumOfPages
'        objFunc.FillDatabase "Database", ColEdit
    End If
    
    If Not bDrawLayout Then GoTo CleanObjects
    
    lSection = 1
    With Sheets(sSheetName)
        .Activate
'        .Cells.NumberFormat = "@"
        ActiveWindow.DisplayGridlines = False
        lULimit = ColX.Count
        
        'set range for hidden data.
        lHiddenDataCol = lULimit + 5    'column for hidden data
        .Cells(1, lHiddenDataCol) = "Hidden Data"
        lHiddenDataRow = 2
        .Columns(lHiddenDataCol).EntireColumn.Hidden = True
        lRes = objFunc.DrawHiddenData(sSheetName, colHidden)
        'set columns width
        
        For lCount = 1 To lULimit
            lWidthPBUnit = ColX(lCount).RowHeightOrColumnWidth
            lWidthPix = Int((lWidthPBUnit + 16) * 7 / 32) - 3
            If lWidthPix <= 12 Then
'                .Columns(lCount).ColumnWidth = ColX(lCount _
'                    ).RowHeightOrColumnWidth / dWidthFactor
                .Columns(lCount).ColumnWidth = lWidthPix / 12
            Else
                .Columns(lCount).ColumnWidth = (lWidthPix - 12) / 7 + 1
            End If
        Next
        'set rows height
        lULimit = ColY.Count
        For lCount = 1 To lULimit
            lHeightPBUnit = ColY(lCount).RowHeightOrColumnWidth
            lHeightPix = Int((lHeightPBUnit + 2) / 4)
'            .Rows(lCount).RowHeight = ColY(lCount _
'                ).RowHeightOrColumnWidth * dHeightFactor
            .Rows(lCount).RowHeight = lHeightPix * 0.75
        Next
        '=============== draw lines ==========================
        lSection = 2
        If Not ColLines Is Nothing Then
            lULimit = ColLines.Count
            Set colAnomalLines = New Collection
'            For lCount = 1 To lULimit
'                Set objTemp = ColLines(lCount)
            For Each objTemp In ColLines
                lRes = objFunc.SetRange(objTemp, lStartRow, lStartCol, _
                    lEndRow, lEndCol)
                sObjName = CStr(objTemp.linename)
                If sObjName = "l_coordinator" Then GoTo GoNext
                If objTemp.isvisible = "0" Then GoTo GoNext
                If objTemp.LineDirection = ixDiagonal Then
                    colAnomalLines.Add objTemp, CStr(objTemp.linename)
'                ElseIf lStartCol = lEndCol And lStartRow = lEndRow Then
'                    GoTo GoNext
                ElseIf objTemp.LineDirection = ixHorizontal Then
                    Range(.Cells(lStartRow, lStartCol), .Cells(lEndRow _
                        , lEndCol)).Select
                    With Selection.Borders(xlEdgeTop)
                        .LineStyle = xlContinuous
                        .Weight = xlThin
                        .ColorIndex = xlAutomatic
                    End With
                ElseIf objTemp.LineDirection = ixVertical Then
                    Range(.Cells(lStartRow, lStartCol), .Cells(lEndRow _
                        , lEndCol)).Select
                    With Selection.Borders(xlEdgeLeft)
                        .LineStyle = xlContinuous
                        .Weight = xlThin
                        .ColorIndex = xlAutomatic
                    End With
                End If
'                Set objTemp = Nothing
GoNext:
            Next
        End If
        
        ReDim CellArr(ColY.Count, ColX.Count)
        
        '=============== draw text ======================
        lSection = 3
        If Not colText Is Nothing Then
'            lULimit = colText.Count
'            Set colAnomalLines = New Collection
'            For lCount = 1 To lULimit
'                Set objTemp = colText(lCount)
            For Each objTemp In colText
                sObjName = objTemp.TextName
'                Debug.Print objTemp.TextString
'                With .Cells(objTemp.rownum, objTemp.columnnum)
'                    .Text = objTemp.textstring
                lTempCol = objTemp.columnnum
                lTempRow = objTemp.rownum
'                If Not IsEmpty(.Cells(lTempRow, lTempCol _
'                    )) Then
                
''                udtTempCell = CellArr(lTempRow, lTempCol).object()    'co 10/8/03
'                If UBound(udtTempCell) > 0 Then
''                If CellArr(lTempRow, lTempCol).Occupied = True Then   'co 10/8/03
                    'co 10/8/03
'                    lRes = objFunc.UpdateCellArr(objTemp, udtTempCell(), False)
'                    If lRes = 0 Then
'                        CellArr(lTempRow, lTempCol).object() = _
'                            udtTempCell
'                    Else
'                        'add handle
'                    End If
'                    If UBound(udtTempCell) > 2 Then
'                        'future: handle that case
'                    Else
''                        .Cells(lTempRow, lTempCol) = ConcatenateText( _
''                            CellArr(lTempRow, lTempCol).object(1), _
''                            CellArr(lTempRow, lTempCol).object(2))
'                        .Cells(lTempRow, lTempCol) = objFunc.ConcatenateText( _
'                            udtTempCell(1), udtTempCell(2))
'                    End If
                    'end co 10/08/03
'                Else
                    If objTemp.Font.Escape = "" Then
                        .Cells(lTempRow, lTempCol).NumberFormat = "@"
                        .Cells(lTempRow, lTempCol) = objTemp.TextString
                    End If
                        With .Cells(lTempRow, lTempCol).Font
    '                        .Name = "Arial"
                            .Size = objTemp.Font.Height
    '                        .Strikethrough = False
    '                        .Superscript = False
    '                        .Subscript = False
    '                        .OutlineFont = False
    '                        .Shadow = False
    '                        .Underline = xlUnderlineStyleNone
    '                        .ColorIndex = xlAutomatic
                        End With
    '                    .HorizontalAlignment = xlGeneral
    '                    .VerticalAlignment = xlBottom
    '                    .WrapText = False
'                        If objTemp.Font.Escape = "900" Then

                        If objTemp.Font.Escape = """" & "0" & vbTab & "900" & """" Then
'                            oLocalLogFile.AddString "obj: ", Err.Number, _
                                sObjName & ": " & objTemp.TextString
                            Debug.Print sObjName & ": " & objTemp.TextString
                            lRes = objFunc.AddVerticalText(objTemp.x, objTemp.y, _
                                objTemp.textheight, objTemp.textwidth, _
                                objTemp.TextString, objTemp.Font.Height, "up")
''                            Dim lTemp As Long
''                            .Cells(lTempRow, lTempCol).Orientation _
''                                = 90
''                            lTemp = Int(objTemp.TextWidth * _
''                                dWidthFactor / .Cells(lTempRow, _
''                                lTempCol).RowHeight)
''                            .Range(.Cells(lTempRow - lTemp, lTempCol), _
''                                .Cells(lTempRow, lTempCol)).Merge
'                        ElseIf objTemp.Font.Escape = "2700" Then
                        ElseIf objTemp.Font.Escape = """" & "0" & vbTab & "2700" & """" Then
                            lRes = objFunc.AddVerticalText(objTemp.x, objTemp.y, _
                                objTemp.textheight, objTemp.textwidth, _
                                objTemp.TextString, objTemp.Font.Height, "down")
'                            lTemp = Int(objTemp.textwidth * _
'                                dWidthFactor / .Cells(lTempRow, _
'                                lTempCol).RowHeight)
'                            .Range(.Cells(lTempRow, lTempCol), .Cells( _
'                                lTempRow + lTemp, lTempCol)).Merge
                        End If
    '                    .AddIndent = False
    '                    .ShrinkToFit = False
    '                    .MergeCells = False
    '                End With
'                    Set objTemp = Nothing
                    CellArr(lTempRow, lTempCol).Occupied = True
                    udtTempCell = CellArr(lTempRow, lTempCol).object()
                    lRes = objFunc.UpdateCellArr(objTemp, udtTempCell(), True)
                    If lRes = 0 Then
                        CellArr(lTempRow, lTempCol).object() = _
                            udtTempCell
                    Else
                        'add handle
                    End If
'                End If
            Next
        End If
        '=============== draw column ====================
        lSection = 4
        If Not ColEdit Is Nothing Then
            lRes = objFunc.DrawEditObject(sSheetName, _
                ColEdit, CellArr(), dWidthFactor, dHeightFactor)
        End If
        lSection = 5
        If Not colEdMask Is Nothing Then
            lRes = objFunc.DrawEditObject(sSheetName, _
                colEdMask, CellArr())
        End If
        lSection = 6
        If Not ColLB Is Nothing Then
            lRes = objFunc.DrawLBObj(sSheetName, ColLB _
                , CellArr())
        End If
        lSection = 7
        If Not colCB Is Nothing Then
            lRes = objFunc.DrawCBObj(sSheetName, colCB)
        End If
        lSection = 8
        If Not colRB Is Nothing Then
            lRes = objFunc.DrawRBObj(sSheetName, colRB)
        End If
        lSection = 9
        If Not colDW Is Nothing Then
        
            lRes = objFunc.DrawDWObj(sSheetName, colDW, _
                  colDWTableList, CellArr())
        End If
        
        
        '=============== draw computed  ================
        lSection = 10
        If Not colCmp Is Nothing Then
            lRes = objFunc.DrawComputedObj(sSheetName, _
                colCmp, CellArr())
        End If
        
        lSection = 11
        lRes = objFunc.MergeNoteCells(sSheetName, "spec_note_" & _
            Format(lSheetNum, "000"))
        .Cells.Replace What:="&&", Replacement:="&", LookAt:=xlPart, SearchOrder _
           :=xlByRows, MatchCase:=False
        .Cells(1, 1).Activate
    End With    'Sheets(sSheetName)
           
    lSection = 12
''    sPrintArea = "$A$1:" & Cells(ColY.Count, ColX.Count).Address
''    With ActiveSheet.PageSetup
''        .PrintArea = sPrintArea
''        .FitToPagesWide = 1
''        .FitToPagesTall = False
''    End With
'    If Not rsSeeList Is Nothing Then
'        Sheets(1).Select
'        Sheets.Add
'        Sheets(1).Name = "See List"
'        lRes = objFunc.FillDatabase("See List", rsSeeList)
'    End If
    
GoOut:
'    sPrintArea = "$A$1:" & Cells(ColY.Count, ColX.Count).Address
    sPrintArea = "$A$1:" & Cells(lMaxRows, lMaxCols).Address
    
    With ActiveSheet.PageSetup
        .PrintArea = sPrintArea
        .FitToPagesWide = 1
        .FitToPagesTall = False
    End With

    If colAnomalLines.Count > 0 Then
        Dim sAnomal As String
        Dim objAnomal As Object
        For Each objAnomal In colAnomalLines
            sAnomal = sAnomal & "," & objAnomal.linename
        Next
'        MsgBox "There are some wrong lines"
        oLocalLogFile.AddString _
            "FormatSheet - There are some wrong lines", Err.Number, _
            Err.Description, 0, sAnomal
    End If
CleanObjects:
    Set colAnomalLines = Nothing
    Set objLogFile = Nothing
    Set objFunc = Nothing
    Set oLocalLogFile = Nothing
    bDeactivateChange = False
Exit Function

mErr:
    Debug.Print Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "FormatSheet", Err.Number, _
        Err.Description, lSection
    Resume Next
End Function

Public Function InsertDWTables(colDWTables As Collection, _
    colTableNames As Collection, objLogFile As Object) As Long

    Dim oLocalLogFile As Object
    Dim lRes As Long
    
    Set objFunc = New clsFunctions
    
    On Error GoTo mErr
    Set oLocalLogFile = objLogFile
    colDWTables("d_dddw_spec_cmpnt_mod").Sort = "cmpnt_mfr_id Asc"
    lRes = objFunc.WriteDWTables(colDWTables, colTableNames)
    
    lRes = objFunc.MfrModLink(colDWTables("d_dddw_spec_cmpnt_mfr"), _
        colDWTables("d_dddw_spec_cmpnt_mod"))
    
    Set objFunc = Nothing
    Set oLocalLogFile = Nothing
Exit Function

mErr:
    Debug.Print "Error in InsertDWTables - " & Err.Number & ": " & _
        Err.Description
    InsertDWTables = Err.Number
    oLocalLogFile.AddString "InsertDWTables", Err.Number, _
        Err.Description
    Resume Next
End Function

Public Function AddSeeList(rsLayout As Recordset, objLogFile As _
    Object, cType As String) As Long
    
    Dim oLocalLogFile As Object
    Dim oFuncConv As clsConvertFunction
    Dim oFunc As clsFunctions
    Dim lRes As Long
    Dim lFieldsCounter As Long
    Dim sFieldName As String
    Dim lCountCol As Long
    Dim lNumOfFields As Long
    Dim lNumOfRecords As Long
    Dim lSection As Long
    Dim sResFunc As String
    Dim sErrDesc As String
    Dim lCounter As Long
    Dim sTempValue As String
    Dim sRetValue As String
    Dim lLastRow As Long
    Dim sTagNumber As String
    
    On Error GoTo mErr
    Set oLocalLogFile = objLogFile
    Set objFunc = New clsFunctions

    If cType = "U" Then
        Application.DisplayAlerts = False
        Sheets("Multi-Tag List").Delete
        Application.DisplayAlerts = True
    Else
        Sheets(1).Select
        Sheets.Add
        Sheets(1).Name = "SLDatabase"
        Sheets("SLDatabase").Move After:=Sheets(Sheets.Count)
        Sheets("SLDatabase").Visible = False
    End If
    
    Sheets(1).Select
    Sheets.Add
    Sheets(1).Name = "Multi-Tag List"
    Sheets("Multi-Tag List").Move After:=Sheets(Sheets.Count)
 
'    lRes = objFunc.WriteRSToSheet("Multi-Tag List", rsSeeList)
    lSection = 10
'    lRes = objFunc.WriteRSToSheet("Multi-Tag List", rsData)'200802
    lRes = objFunc.WriteRSToSheet("Multi-Tag List", rsLayout, _
        lNumOfRecords, lNumOfFields)
    lSection = 15
 'need to change the code for computed/dw etc.!!!
'    lNumOfFields = rsData.Fields.Count 'co200802
'    lNumOfRecords = rsData.RecordCount 'co200802
    On Error Resume Next
    rsLayout.Open
    On Error GoTo mErr
    With Sheets("Multi-Tag List")
        lSection = 20
'        rsLayout.Filter = "[band] like 'detail'"
        rsLayout.Filter = "[band] like 'header' and [seelist_row] like '1'"
        rsLayout.Sort = "x asc"
        lCountCol = lNumOfFields + 1   'co200802
        rsLayout.MoveFirst
        While Not rsLayout.EOF
            sFieldName = rsLayout.Fields("name")
'            lCountCol = Range("SLHeader").Find(sFieldName).Column
            .Columns(lCountCol).Name = "sl_" & sFieldName   '_t
            .Cells(1, lCountCol) = rsLayout.Fields("text")
            lCountCol = lCountCol + 1
            rsLayout.MoveNext
        Wend
        
        For lCountCol = 1 To lNumOfFields
            .Columns(lCountCol).Name = "sl_" & Cells(Range("SLHeader" _
                ).Row, lCountCol)
        Next
        
        lSection = 30
        rsLayout.Filter = "[edit_style] like 'EDIT%'"
        While Not rsLayout.EOF
            sFieldName = rsLayout.Fields("name")
'            lCountCol = Range("SLHeader").Find(sFieldName).Column
'            .Columns(lCountCol).Name = "sl_" & sFieldName
'            .Columns(lCountCol).Copy
            .Range("sl_" & sFieldName).Copy
            .Range("sl_" & sFieldName & "_t").Select
            ActiveSheet.Paste
'            Application.Range(sFieldName).Value = "Multi-Tag LIST" '4/5/03
            rsLayout.MoveNext
        Wend
        
        lSection = 33
        rsLayout.Filter = "[Type] like 'compute'"
        If Not rsLayout Is Nothing Then
            Set oFuncConv = New clsConvertFunction
            While Not rsLayout.EOF
                sFieldName = "sl_" & rsLayout.Fields("name") & "_t"
'                lCountCol = Range("SLHeader").Find(sFieldName).Column
'                .Columns(lCountCol).Name = "sl_" & sFieldName
                sResFunc = ""
                lRes = oFuncConv.UflgUid(rsLayout.Fields("expression") _
                    , "sl_", "", "sl_", "", sResFunc, sErrDesc)
                If sResFunc = "(Unknown function)" Then
                    sResFunc = rsLayout.Fields("col_value") & ""
                    oLocalLogFile.AddString "DrawComputedObj - " & _
                        sFieldName, 0, "(Unknown function)", , _
                        rsLayout.Fields("expression") & ""
                End If
                    
                lCountCol = Range(sFieldName).Column
                For lCounter = 2 To lNumOfRecords + 1
                    .Cells(lCounter, lCountCol) = sResFunc
                Next
'                Application.Range(sFieldName).Value = "Multi-Tag LIST" '4/5/03
                rsLayout.MoveNext
            Wend
            Set oFuncConv = Nothing
        End If
        
        lSection = 35
        rsLayout.Filter = "[edit_style] like 'DDDW'"
        
        If Not rsLayout Is Nothing Then
            While Not rsLayout.EOF
                sFieldName = rsLayout.Fields("name")
                'meanwhile dw are locked, the text appears as retrieved.
                .Range("sl_" & sFieldName).Copy
                .Range("sl_" & sFieldName & "_t").Select
                ActiveSheet.Paste
                '---------------------------------------------
'                Application.Range(sFieldName).Value = "Multi-Tag LIST" '4/5/03
                rsLayout.MoveNext
            Wend
        End If
        
        lSection = 37
        rsLayout.Filter = "[edit_style] like 'DDLB'"
        If Not rsLayout Is Nothing Then
            Set oFunc = New clsFunctions
            While Not rsLayout.EOF
                sFieldName = rsLayout.Fields("name")
                'meanwhile dw are locked, the text appears as retrieved.
                .Range("sl_" & sFieldName).Copy
                .Range("sl_" & sFieldName & "_t").Select
                ActiveSheet.Paste
                '---------------------------------------------
                lCountCol = Range("sl_" & sFieldName & "_t").Column
                For lCounter = 2 To lNumOfRecords + 1
                    sRetValue = ""
                    If .Cells(lCounter, lCountCol) <> "" Then
                        lRes = oFunc.GetListBoxValue(rsLayout.Fields( _
                            "ddlb_values"), .Cells(lCounter, lCountCol _
                            ), sRetValue)
                    End If
                    If lRes = 0 Then
                        .Cells(lCounter, lCountCol) = sRetValue
                    End If
                Next
'                Application.Range(sFieldName).Value = "Multi-Tag LIST" '4/5/03
                rsLayout.MoveNext
            Wend
        End If
        
        .Range(Columns(1), Columns(lNumOfFields)).Select
        Selection.EntireColumn.Hidden = True
        
'        .Range(Columns(lNumOfFields + 1), Columns(lCountCol)).Select
'        Selection.EntireColumn.Hidden = False
'        lSection = 30
        lSection = 40
        
        rsLayout.Filter = "[band] like 'header'"
        While Not rsLayout.EOF
            sFieldName = rsLayout.Fields("name")
'            lCountCol = Range("SLHeader").Find(sFieldName).Column
            lCountCol = .Range("sl_" & sFieldName).Column
            .Cells(1, lCountCol) = rsLayout.Fields("text")
            sFieldName = Left(sFieldName, Len(sFieldName) - 2)
            On Error Resume Next
            Range(sFieldName).Value = "SEE LIST" '4/5/03
            Sheets("Page 1").DropDowns("dd_" & sFieldName).Cut
            Range(sFieldName & "_001").Value = "SEE LIST" '14/7/03
            Sheets("Page 1").DropDowns("dd_" & sFieldName & "_001").Cut
            Err.Clear
            On Error GoTo mErr
            rsLayout.MoveNext
        Wend
        
'        For lCountCol = 1 To lNumOfFields
'            If .Columns(lCountCol).EntireColumn.Hidden = True Then
'                .Columns(lCountCol).Delete Shift:=xlToLeft
'                lCountCol = lCountCol - 1
'            Else
''                .Columns(lCountCol).EntireColumn.AutoFit
'            End If
'        Next
        
'        lNumOfFields = rsLayout.RecordCount
'        For lCountCol = 1 To lNumOfFields
'            .Columns(lCountCol).EntireColumn.AutoFit
'        Next
        
        lSection = 50
        .Rows(1).Font.Bold = True
        .Rows(1).HorizontalAlignment = xlCenter
        .Range(Columns(lNumOfFields + 1), Columns(lNumOfFields + _
            rsLayout.RecordCount)).EntireColumn.AutoFit
        
        rsLayout.Filter = "[name] like 'cmpnt_name'"
        sTagNumber = rsLayout.Fields("column_data")
        lLastRow = .Cells.Find("*", .Range("A1"), , , xlByRows, xlPrevious).Row
        lRes = objFunc.InserSeeListToDB(sTagNumber, "Multi-Tag List", 1, lNumOfFields + 1, _
            lLastRow, lNumOfFields + rsLayout.RecordCount - 1)
        .Activate
        .Cells(1, 1).Select
        .Move After:=Sheets(Sheets.Count)
    End With    'Sheets("Multi-Tag List")
    
    Sheets(1).Activate
    
GoOut:
    rsLayout.Close
    Set objFunc = Nothing
    Set oLocalLogFile = Nothing
Exit Function

mErr:
    Debug.Print "Error in AddSeeList - sec: "; lSection & " - " & Err.Number & ": " & _
        Err.Description
    oLocalLogFile.AddString "AddSeeList - " & sFieldName, Err.Number, _
        Err.Description, lSection
'    If lSection = 2 Then
'        GoTo GoNext
'    Else
        Resume Next
'    End If
'    GoTo GoOut

End Function


Public Function SetForPrint(sPaperSize As String) As Long
    Dim sConstPaperSize As String
    Dim sPrintArea As String
    
    Select Case sConstPaperSize
    
    End Select


End Function



Public Function AddNotePage(sNoteStr As String, objLogFile As _
    Object) As Long

    Const lFirstRow As Long = 5
    Dim oLocalLogFile As Object
    Dim wsNote As Worksheet
    Dim wsSource As Worksheet
    Dim vTemp As Variant
    Dim sTemp As String
    Dim sStr As String
    Dim lCount As Long
    Dim sTagName As String
    Dim lTagColumn As Long
    Dim lSection As Long
    
    On Error Resume Next
    Set wsNote = Sheets("Notes")
    Set wsSource = Sheets("Page 1")
    Set oLocalLogFile = objLogFile
    
    sTagName = Trim(wsSource.Range("cmpnt_name_001"))
    If sTagName = "SEE LIST" Then
        lTagColumn = Range("SLHeader").Find("cmpnt_name").Column
        wsNote.Range("tag_number_note") = Sheets("Multi-Tag List").Cells(2, _
            lTagColumn)
    Else
        wsNote.Range("tag_number_note") = sTagName
    End If
    
'    sTemp = wsSource.Range("spec_note_001")
    lSection = 1
'    vTemp = Split(sTemp, vbCr)
    vTemp = Split(sNoteStr, vbCr)
    For lCount = 0 To UBound(vTemp)
        sStr = Trim(vTemp(lCount))
        If Left(sStr, 1) = vbCr Or Left(sStr, 1) = Chr(8) Or _
            Left(sStr, 1) = Chr(9) Or Left(sStr, 1) = Chr(10) Then
            sStr = Right(sStr, Len(sStr) - 1)
        End If
        wsNote.Cells(lFirstRow + lCount, 1) = sStr
    Next
    Set wsNote = Nothing
    Set wsSource = Nothing
    Set oLocalLogFile = Nothing
Exit Function

mErr:
    oLocalLogFile.AddString "AddNotePage", Err.Number, _
        Err.Description, lSection, sNoteStr
    Resume Next
End Function

Public Function AddTag(rsData As Recordset, lSheetNum As Long, _
    sAccuracy As String, objLogFile As Object, colDW As Collection) As Long

    Dim oLocalLogFile As Object
    Dim lRes As Long
    Dim sTagNumber As String
    Dim lCmpCol As Long
    Dim lCountRow As Long
    Dim objTemp As Object
    
    On Error GoTo mErr
    Application.DisplayAlerts = False
    sDefAccuracy = sAccuracy
    Set objFunc = New clsFunctions
    Set oLocalLogFile = objLogFile
    
    lRes = objFunc.FillDatabase("Database", rsData, False, _
        lSheetNum)
    
    rsData.Filter = "[name]='cmpnt_name'"
    sTagNumber = rsData.Fields("column_data").Value
    lRes = objFunc.RefreshRecord(sTagNumber, lCmpCol)
    
    With Sheets("Database")
        lCountRow = 101
        For Each objTemp In colDW
            Do Until IsEmpty(.Cells(lCountRow, 2))
                If UCase(.Cells(lCountRow, 2)) = "DDDW" Then
                    lRes = objFunc.ConvertCodeToValue("Database", lCmpCol, lCountRow, objTemp)
                    lCountRow = lCountRow + 1
                    Exit Do
                End If
                lCountRow = lCountRow + 1
            Loop
        Next
    End With    'Sheets("Database")
    
    lRes = objFunc.RefreshRecord(sTagNumber, lCmpCol)
    Set oLocalLogFile = Nothing
Exit Function

mErr:
    oLocalLogFile.AddString "AddTag", Err.Number, _
        Err.Description
    Resume Next
    
End Function

''Private Function DrawEdMaskObject(sSheetName As String, objRSData As _
''    Recordset, ColEdMask As Collection, CellArr() As SpecCell) As Long
''
''    Dim objTemp As Object
''    Dim lStartRow As Long
''    Dim lStartCol As Long
''    Dim lEndRow As Long
''    Dim lEndCol As Long
''    Dim udtTempCell() As CellObject
''    Dim sText As String
''    Dim lRes As Long
''
''    On Error GoTo mErr
''    For Each objTemp In ColEdit
'''        On Error Resume Next
''        lStartCol = objTemp.General.StartCol
''        lStartRow = objTemp.General.StartRow
''        lEndCol = objTemp.General.EndCol
''        lEndRow = objTemp.General.EndRow
''        udtTempCell = CellArr(lStartRow, lStartCol).object()
''        If CellArr(lStartRow, lStartCol).Occupied = True Then
''            Sheets(sSheetName).Cells(lStartRow, lStartCol).Name = _
''                objTemp.General.ename
''            If Not IsNull(objRSData.Fields(objTemp.General.ename)) _
''                Then
''                sText = objRSData.Fields(objTemp.General.ename)
''            Else
''                sText = ""
''            End If
''            lRes = UpdateCellArrClm(objTemp, udtTempCell(), False, _
''                sText)
''            If lRes = 0 Then
''                CellArr(lStartRow, lStartCol).object() = _
''                    udtTempCell
''            Else
''                'add handle
''            End If
''            If UBound(udtTempCell) > 2 Then
''                'future: handle that case
''            Else
''                Sheets(sSheetName).Cells(lStartRow, lStartCol) = _
''                ConcatenateText(udtTempCell(1), udtTempCell(2))
''            End If
''        Else
''    '        lStartCol = objTemp.General.StartCol
''    '        lStartRow = objTemp.General.StartRow
''    '        lEndCol = objTemp.General.EndCol
''    '        lEndRow = objTemp.General.EndRow
''            With Sheets(sSheetName)
''                .Cells(lStartRow, lStartCol) = objRSData.Fields( _
''                    objTemp.General.ename)
''                With .Cells(lStartRow, lStartCol)
''                    .Name = objTemp.General.ename
''                    .NumberFormat = "@"
''                    .Font.Size = objTemp.General.Font.Height
''                End With
''                CellArr(lStartRow, lStartCol).Occupied = True
''                udtTempCell = CellArr(lStartRow, lStartCol).object()
''                If Not IsNull(objRSData.Fields(objTemp.General.ename _
''                    )) Then
''                    sText = objRSData.Fields(objTemp.General.ename)
''                Else
''                    sText = ""
''                End If
''                lRes = UpdateCellArrClm(objTemp, udtTempCell(), True _
''                    , sText)
''                If lRes = 0 Then
''                    CellArr(lStartRow, lStartCol).object() = _
''                        udtTempCell
''                Else
''                    'add handle
''                End If
''
''            End With
''        End If
''    Next
''GoOut:
''
''Exit Function
''
''mErr:
''    Debug.Print Err.Number & ": " & Err.Description
''End Function




Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Application.DisplayAlerts = True
    Toolbars("SaveAsExcel").Visible = False
End Sub

Private Sub Workbook_Open()
    Sheets("Page 1").Activate
    Application.DisplayAlerts = False
    AutoOpen
'    rsTempData.Open data
End Sub

Sub AutoOpen()
    Dim w As Window
    For Each w In Windows
        w.Visible = True
    Next
    If Right(ActiveWorkbook.Name, 6) = "sl.xls" Then
        Toolbars("SaveAsExcel").Visible = False
        Exit Sub
    End If

    DrawToolBar

'With Toolbars("SaveAsExcel")
'    .Visible = True
'    .Position = xlTop
'    '<- temporary till the macros are assigned ->
'    .ToolbarButtons(1).Enabled = False
'    .ToolbarButtons(2).Enabled = False
'    .ToolbarButtons(6).Enabled = False
'    '<------------------------------------------>
''    .ToolbarButtons(1).OnAction = "update_database"
''    .ToolbarButtons(2).OnAction = "delete_current_record"
'    .ToolbarButtons(3).OnAction = "ShowSelectedRecord"
'    .ToolbarButtons(4).OnAction = "ShowPrevRecord"
'    .ToolbarButtons(5).OnAction = "ShowNextRecord"
''    .ToolbarButtons(6).OnAction = "buttonCleanLines"
'End With    'Toolbars("SaveAsExcel")
'update_database
End Sub

Private Sub DrawToolBar()

    Const lUpdate As Long = 1
    Const lDelete As Long = 2
    Const lSelect As Long = 3
    Const lPrev As Long = 4
    Const lNext As Long = 5
    Const lClean As Long = 6
    'change the numbers when there are all the buttons
'    Const lNewUpdate As Long = 1
'    Const lNewDelete As Long = 2
    Const lNewSelect As Long = 1 ' 3
    Const lNewPrev As Long = 2  ' 4
    Const lNewNext As Long = 3  ' 5
'    Const lNewClean As Long = 6
    
    Toolbars("SAEButtons").Visible = False
    Toolbars("SaveAsExcel").Delete
    Application.CommandBars.Add(Name:="SaveAsExcel").Visible = True
    With Application.CommandBars("SaveAsExcel")
        .Controls.Add Type:=msoControlButton, ID:=2950, Before:=1
        .Controls.Add Type:=msoControlButton, ID:=2950, Before:=1
        .Controls.Add Type:=msoControlButton, ID:=2950, Before:=1
    End With

    With Toolbars("SaveAsExcel")
        .Visible = True
        .Position = xlTop
        Toolbars("SAEButtons").ToolbarButtons(lSelect).CopyFace
        .ToolbarButtons(lNewSelect).PasteFace
        Toolbars("SAEButtons").ToolbarButtons(lPrev).CopyFace
        .ToolbarButtons(lNewPrev).PasteFace
        Toolbars("SAEButtons").ToolbarButtons(lNext).CopyFace
        .ToolbarButtons(lNewNext).PasteFace
        
    '    .ToolbarButtons(lNewUpdate).OnAction = "update_database"
    '    .ToolbarButtons(lNewDelete).OnAction = "delete_current_record"
        .ToolbarButtons(lNewSelect).OnAction = "ShowSelectedRecord"
        .ToolbarButtons(lNewPrev).OnAction = "ShowPrevRecord"
        .ToolbarButtons(lNewNext).OnAction = "ShowNextRecord"
    '    .ToolbarButtons(lNewClean).OnAction = "buttonCleanLines"
        
'        .ToolbarButtons(lNewUpdate).Name = "Insert/update current record in database"
'        .ToolbarButtons(lNewDelete).Name = "Delete current record"
        .ToolbarButtons(lNewSelect).Name = "Show record"
        .ToolbarButtons(lNewPrev).Name = "Show previous record"
        .ToolbarButtons(lNewNext).Name = "Show next record"
'        .ToolbarButtons(lNewClean).Name = "Clean Lines"
    End With

End Sub

Attribute VB_Name = "clsConvertFunction"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Function UflgUid(sOrigFunc As String, sPreUflg As String, _
    sExtUflg As String, sPreUid As String, sExtUid As String, _
    sResFunc As String, sErrDesc As String) As Long

    Dim sTempUflg As String
    Dim sTempUid As String
    Dim vFuncArr As Variant
    Dim sTempFunc As String
    Dim lArrUBound As Long
    Dim vTempArr1 As Variant
    Dim vTempArr2 As Variant
    Dim lRes As Long
    Dim sVar As String
    
    On Error GoTo mErr
    
    sTempFunc = sOrigFunc
    vFuncArr = Split(sTempFunc, "(")
    lArrUBound = UBound(vFuncArr)
    Select Case lArrUBound
        Case 0
'            If sOrigFunc = "pd_temp_uid" Then
            If sOrigFunc = vFuncArr(0) Then
                sResFunc = "=" & sPreUid & sOrigFunc & sExtUid
            End If
        Case 2
            If LCase(Trim(vFuncArr(0))) = "if" Then
                vTempArr1 = Split(vFuncArr(1), ",")
                If UBound(vTempArr1) = 1 Then
                    If LCase(Trim(vTempArr1(1))) = "righttrim" And _
                        Right(Trim(vTempArr1(0)), 3) = "'B'" Then
                        vTempArr2 = Split(vTempArr1(0), "=")
                        If UBound(vTempArr2) = 1 Then
                            If Right(Trim(vTempArr2(0)), 4) = "uflg" Then
                                sVar = Trim(vTempArr2(0))
                                sVar = Left(sVar, Len(sVar) - 5)
                                sTempUflg = sPreUflg & sVar & "_uflg" & sExtUflg
                                sTempUid = sPreUid & sVar & "_uid" & sExtUid
                                lRes = FuncPool(1, sTempUflg, sTempUid, _
                                    sResFunc, sErrDesc)
                            Else
                                GoTo UnknownFunc
                            End If
                        Else
                            GoTo UnknownFunc
                        End If
                    Else
                        GoTo UnknownFunc
                    End If
                Else
                    GoTo UnknownFunc
                End If
            End If
        Case 4
            If LCase(Trim(vFuncArr(0))) = "if" Then
                vTempArr1 = Split(vFuncArr(1), ",")
                If UBound(vTempArr1) = 1 Then
                    If LCase(Trim(vTempArr1(1))) = "righttrim" And _
                        Right(Trim(vTempArr1(0)), 3) = "'G'" Then
                        vTempArr2 = Split(vTempArr1(0), "=")
                        If UBound(vTempArr2) = 1 Then
                            If Right(Trim(vTempArr2(0)), 4) = "uflg" Then
                                sVar = Trim(vTempArr2(0))
                                sVar = Left(sVar, Len(sVar) - 5)
                                sTempUflg = sPreUflg & sVar & "_uflg" & sExtUflg
                                sTempUid = sPreUid & sVar & "_uid" & sExtUid
                                lRes = FuncPool(2, sTempUflg, sTempUid, _
                                    sResFunc, sErrDesc)
                            Else
                                GoTo UnknownFunc
                            End If
                        Else
                            GoTo UnknownFunc
                        End If
                    Else
                        GoTo UnknownFunc
                    End If
                Else
                    GoTo UnknownFunc
                End If
            End If
        
    
        Case Else
UnknownFunc:
            sResFunc = "(Unknown function)" '& sOrigFunc
    End Select
Exit Function

mErr:
    sErrDesc = Err.Description
    UflgUid = Err.Number
    Resume Next

End Function

Private Function FuncPool(lFuncNumber As Long, sXUflg As String, _
    sXUid As String, sResFunc As String, sErrDesc As String, Optional _
    colOtherParam As Collection) As Long
    
    On Error GoTo mErr
    Select Case lFuncNumber
        Case 1  'if(X_uflg='B',rightTrim(X_uid)+' '+'@base',Xuflg+X_uid)
            sResFunc = "=if(" & sXUflg & "=""B""," & "Trim(" & _
                sXUid & ")&""@base""," & "" & sXUflg & " & " _
                & sXUid & ")"
        Case 2  'if(X_uflg='G',rightTrim(X_uid )+'-g',if(X_uflg='A',
                '   rightTrim(X_uid)+'-a',''))
            sResFunc = "=if(" & sXUflg & "=""G"", Trim(" & _
                sXUid & ") & ""-g"", If(" & sXUflg & _
                "=""A"",Trim(" & sXUid & ")&""-a"",""""))"
        Case Else
            sResFunc = "(Unknown function)"
    End Select
Exit Function

mErr:
    sErrDesc = Err.Description
    FuncPool = Err.Number
    Resume Next
End Function


Public Function UflgUid1(sOrigFunc As String, sPreUflg As String, _
    sExtUflg As String, sPreUid As String, sExtUid As String, _
    sResFunc As String, sErrDesc As String) As Long
    
    Dim sTempUflg As String
    Dim sTempUid As String
    
    On Error GoTo mErr
    Select Case sOrigFunc
        Case "pd_temp_uid"
            sResFunc = "=" & sPreUid & sOrigFunc & sExtUid
    
        Case "if ( pd_flow_uflg='B', rightTrim (  pd_flow_uid" _
            & " ) + ' ' + '@base', pd_flow_uflg +  pd_flow_uid )"
            
            sTempUflg = sPreUflg & "pd_flow_uflg" & sExtUflg
            sTempUid = sPreUid & "pd_flow_uid" & sExtUid
            
            sResFunc = "=if(" & sTempUflg & "=""B""," & "Trim(" & _
                sTempUid & ")&""@base""," & "" & sTempUflg & " & " _
                & sTempUid & ")"
                
        Case "if ( pd_press_uflg = 'G', rightTrim ( pd_press_uid ) " _
            & "+ '-g', if ( pd_press_uflg = 'A' , rightTrim ( " & _
            "pd_press_uid ) + '-a', '' ) )"
        
            sTempUflg = sPreUflg & "pd_press_uflg" & sExtUflg
            sTempUid = sPreUid & "pd_press_uid" & sExtUid
            
            sResFunc = "=if(" & sTempUflg & "=""G"", Trim(" & _
                sTempUid & ") & ""-g"", If(" & sTempUflg & _
                "=""A"",Trim(" & sTempUid & ")&""-a"",""""))"

        Case "if ( pd_p_range_uflg = 'G', rightTrim ( pd_p_range_uid ) " _
            & "+ '-g', if ( pd_p_range_uflg = 'A' , rightTrim ( " & _
            "pd_p_range_uid ) + '-a', '' ) )"
        
            sTempUflg = sPreUflg & "pd_p_range_uflg " & sExtUflg
            sTempUid = sPreUid & "pd_p_range_uid " & sExtUid
            
            sResFunc = "=if(" & sTempUflg & "=""G"", Trim(" & _
                sTempUid & ") & ""-g"", If(" & sTempUflg & _
                "=""A"",Trim(" & sTempUid & ")&""-a"",""""))"

        Case "if ( pd_vap_press_uflg = 'G', rightTrim ( " & _
            "pd_vap_press_uid ) + '-g', if ( pd_vap_press_uflg" _
            & " = 'A' , rightTrim ( pd_vap_press_uid ) + '-a'" _
            & ", '' ) )"
            
            sTempUflg = sPreUflg & "pd_vap_press_uflg" & sExtUflg
            sTempUid = sPreUid & "pd_vap_press_uid" & sExtUid
            
            sResFunc = "=if(" & sTempUflg & "=""G"", Trim(" & _
                sTempUid & ") & ""-g"", If(" & sTempUflg & _
                "=""A"",Trim(" & sTempUid & ")&""-a"",""""))"
                
        Case "if ( pd_f_range_uflg='B', rightTrim (  " & _
            "pd_f_range_uid ) + ' ' + '@base', pd_f_range_uflg" _
            & " +  pd_f_range_uid )"
            
            sTempUflg = sPreUflg & "pd_f_range_uflg" & sExtUflg
            sTempUid = sPreUid & "pd_f_range_uid" & sExtUid
            
            sResFunc = "=if(" & sTempUflg & "=""B""," & "Trim(" & _
                sTempUid & ")&""@base""," & "" & sTempUflg & " & " _
                & sTempUid & ")"
                
        Case "'Entrained ' +  if ( pd_fluid_phase = 'W' or " & _
            "pd_fluid_phase = 'L' or pd_fluid_phase = 'P', 'Gas', " & _
            "'Liquid' ) + ' % by Volume'"
            'need to check
            
        Case "if ( pd_press_des_uflg = 'G', rightTrim ( " & _
            "pd_press_des_uid ) + '-g', if ( pd_press_des_uflg = 'A' " _
            & ", rightTrim ( pd_press_des_uid ) + '-a', '' ) )"


        
        Case Else
UnknownFunc:
            sResFunc = "(Unknown function): " & sOrigFunc

    End Select
Exit Function

mErr:
    sErrDesc = Err.Description
    UflgUid1 = Err.Number
    Resume Next
End Function
Attribute VB_Name = "clsFunctions"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public Enum LineDirections
    ixHorizontal = 1
    ixVertical = 2
    ixDiagonal = 3
End Enum

Public Enum StartRows
    ixCheckBox = 2
    ixDDDW = 10
    ixListBox = 20
    ixRadioButton = 60
End Enum

Const ixCBLinkedCell As Long = 10

Const ixDWName As Long = 1
Const ixDWSelected As Long = 2
Const ixDWPrevious As Long = 3
Const ixDWValue As Long = 4
Const ixDWDataValue As Long = 5
Const ixDWUOM As Long = 7
Const ixDWShownColumn As Long = 8
Const ixDWStartCol As Long = 1

'databae constants
Const ixDBHeader As Long = 1    'column a
Const ixDBNumOfTags As String = "b2"
Const ixDBNumOfPages As String = "b3"   'NumOfPages per form
Const ixDBLastDataRow As String = "b4"  'last row of data
Const ixDBTagNumber As Long = 10
Const ixDBSeeList As String = "b11"
Const ixDBSLFormatType As String = "b12"
'for future use
Const ixDBNumOfDataPages As String = "b20"  'for various db sheets
Const ixDBLastAtt As Long = 21    'num of attribute 1st layout page

Const ixLastGenDataRow As Long = 100

Const lSheetLength As Long = 5      'Len("Sheet")

Dim m_sCmpName As String

'Public Function ReadDatabase(sDBName As String, rsResRS _
'    As Recordset) As Long
'
'    Dim objADO As adodb.Connection
'    Dim objRSData As adodb.Recordset
'    Dim sSql As String
'    Dim lRes As Long
'    Dim oQryTable As Object
'
'    On Error GoTo mErr
'    Set objADO = New adodb.Connection
'    Set objRSData = New adodb.Recordset
'    With objADO
'        .Provider = "Microsoft.Jet.OLEDB.4.0"
'        .Properties("Extended Properties").Value = "Excel 8.0"
'        .Open ThisWorkbook.Path & "\" & ThisWorkbook.Name
'    End With
'
'    sSql = "SELECT * FROM " & sDBName
'    objRSData.CursorLocation = adUseClient
'    objRSData.Open sSql, objADO, adOpenDynamic, adLockOptimistic
'    Set rsResRS = objRSData
'GoOut:
'    Set objADO = Nothing
'    Set objRSData = Nothing
'Exit Function
'
'mErr:
'    ReadDatabase = Err.Number
'    GoTo GoOut
'End Function

Public Function MergeNoteCells(sSheetName As String, sRangeName As _
    String) As Long

    Dim lStart As Long
    Dim lEnd As Long
    Dim lRow As Long
    
    On Error GoTo mErr
    With Sheets(sSheetName)
        lRow = .Range(sRangeName).Row
        lStart = .Range(sRangeName).Column
        lEnd = lStart
        
        Do Until .Cells(lRow, lEnd).Borders(xlEdgeRight).LineStyle _
            <> xlNone
            lEnd = lEnd + 1
        Loop
        .Range(.Cells(lRow, 1), .Cells(lRow, lEnd)).VerticalAlignment _
            = xlTop
        .Range(.Cells(lRow, lStart), .Cells(lRow, lEnd)).Merge
        .Cells(lRow, lStart).WrapText = True
    End With
Exit Function

mErr:
    Debug.Print "Error in MergeNoteCells"
    Debug.Print Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "MergeNoteCells - ", Err.Number, Err.Description
    MergeNoteCells = Err.Number

End Function

Private Function MergeCells(sSheetName As String, sRangeName As _
    String) As Long
    Dim lStart As Long
    Dim lEnd As Long
    Dim lRow As Long
    Dim dTotalWidth As Double
    Dim ws As Worksheet
    
    Set ws = Sheets(sSheetName)
    With ws
        lRow = .Range(sRangeName).Row
        lStart = .Range(sRangeName).Column
        lEnd = lStart
        dTotalWidth = .Range(sRangeName).ColumnWidth
        
        Do While Len(.Range(sRangeName).Value) > dTotalWidth And _
            .Cells(lRow, lEnd).Borders(xlEdgeRight).LineStyle _
            = xlNone And dTotalWidth < 6
            
            lEnd = lEnd + 1
            dTotalWidth = dTotalWidth + .Cells(lRow, lEnd).ColumnWidth
'            lEnd = lEnd + 1
        Loop
        .Range(.Cells(lRow, 1), .Cells(lRow, lEnd)).VerticalAlignment _
            = xlTop
        .Range(.Cells(lRow, lStart), .Cells(lRow, lEnd)).Merge
        .Cells(lRow, lStart).WrapText = True
    End With
    Set ws = Nothing

End Function

Public Function WriteRSToSheetOld(sDataSheet As String, rsData As _
    Recordset) As Long
'
'    Dim oQryTable As Object
'    Dim oDataSheet As Worksheet
'    Dim lCount As Long
'
'    On Error GoTo mErr
'
'    Set oDataSheet = Sheets(sDataSheet)
''    Set oQryTable = oDataSheet.QueryTables.Add( _
''        rsData, oDataSheet.Range("A1"))
''
''    oQryTable.RefreshStyle = xlInsertEntireRows
''
''    oQryTable.Refresh False
'
'    With oDataSheet
'        .Rows(1).Name = "SLHeader"
'        For lCount = 0 To rsData.Fields.Count - 1
'    '                .Cells(1, lCols + 1).Value = oTempRS.Fields(lCols).Name
'            .Cells(1, 1 + lCount).Value = rsData.Fields(lCount).Name
'
'        Next
'
'        .Range("A2").CopyFromRecordset rsData
'    End With    'oDataSheet
'Exit Function
'
'mErr:
'    Debug.Print "Error in WriteRSToSheet"
'    Debug.Print lCount & " - " & Err.Number & ": " & Err.Description
'    oLocalLogFile.AddString "WriteRSToSheet - " & lCount, Err.Number, _
'        Err.Description
'
'    WriteRSToSheet = Err.Number
'
End Function

Public Function WriteRSToSheet(sDataSheet As String, rsLayout As _
    Recordset, lNumOfSLRecords As Long, lNumOfFields As Long) As _
    Long

    Dim oDataSheet As Worksheet
    Dim lCount As Long
    Dim lNumOfRSLayoutRecords As Long
    Dim lCountField As Long
    Dim lCountRecord As Long
    Dim lFieldsAndHeaders As Long
    
    
    On Error GoTo mErr
    
    lNumOfRSLayoutRecords = rsLayout.RecordCount
'    rsLayout.Filter = "[seelist_row] like '1' and [band] <> 'header'"
    rsLayout.Filter = "[seelist_row] like '1'"
    lFieldsAndHeaders = rsLayout.RecordCount
    lNumOfSLRecords = lNumOfRSLayoutRecords / lFieldsAndHeaders
    rsLayout.Filter = "[seelist_row] like '1' and [type] like 'column'"
    lNumOfFields = rsLayout.RecordCount
    
    Set oDataSheet = Sheets(sDataSheet)
    
    With oDataSheet
        .Rows(1).Name = "SLHeader"
'        For lCountField = 0 To rsLayout.Fields.Count - 1
        rsLayout.MoveFirst
        For lCountField = 1 To lNumOfFields
    '                .Cells(1, lCols + 1).Value = oTempRS.Fields(lCols).Name
            .Cells(1, lCountField).Value = rsLayout.Fields("name" _
                ).Value
            'rsLayout.Fields(lCountField).Name
            rsLayout.MoveNext
        Next
        For lCountRecord = 1 To lNumOfSLRecords
'            rsLayout.Filter = "[seelist_row] like '" & lCountRecord _
'                & "' and [band] <> 'header'"
            rsLayout.Filter = "[seelist_row] like '" & lCountRecord _
                & "' and [type] like 'column'"
            rsLayout.MoveFirst
            For lCountField = 1 To lNumOfFields
                .Cells(lCountRecord + 1, lCountField).Value = _
                    rsLayout.Fields("column_data")
'                    rsLayout.Fields(lCountField).Name
                rsLayout.MoveNext
            Next
        Next
    End With    'oDataSheet
Exit Function

mErr:
    Debug.Print "Error in WriteRSToSheet"
    Debug.Print lCount & " - " & Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "WriteRSToSheet - " & lCount, Err.Number, _
        Err.Description

    WriteRSToSheet = Err.Number

End Function

Public Function FillDatabase(sDataSheet As String, rsData As _
    Recordset, bDrawLayout As Boolean, Optional lSheetNum As Long _
    = 1, Optional lNumOfPages As Long = 1) As Long

    Dim lColNum As Long
    Dim lRowNum As Long
    Dim wsData1 As Worksheet
    Dim wsDataCur As Worksheet
    Dim lRes As Long
    Dim lDBPageNum As Long
    Dim lStartRow As Long
    Dim sRange As String
    Dim sTagNumber As String
    Dim lCalcRow As Long
    Dim lColExistTag As Long
    Dim sSheetExistTag As String
    Dim lCount As Long
    Dim lNumOfTags As Long
    Dim vAcc As Variant
    
    Set wsData1 = Sheets(sDataSheet)
    rsData.Filter = "[name] like 'cmpnt_name'"
    sTagNumber = rsData.Fields("column_data").Value
    lColExistTag = 0
    lNumOfTags = Application.Range("NumOfTags").Value
    
'    lRes = Application.Range("colTagNumber").Find(sTagNumber, , , 1).Row
    With Sheets("Calc")
        For lCount = 1 To lNumOfTags
            If .Cells(lCount, .[colTagNumber].Column) = sTagNumber Then
                lColExistTag = Sheets("Calc").Cells(lCount, Application.[TagColumn].Column)
                sSheetExistTag = Sheets("Calc").Cells(lCount, Application.[TagDataSheet].Column)
                Exit For
            End If
        Next
    End With
    'need to add a case of an existing tag
    
    
'    rsData.Filter = "[edit_style] like 'EDIT%'"
    rsData.Filter = "[type] like 'column'"
    With wsData1
        If lSheetNum = 1 Then
            lStartRow = ixLastGenDataRow + 1
            .Range("b" & ixDBLastAtt) = lStartRow + _
                rsData.RecordCount
            If .Range(ixDBLastDataRow) < lStartRow Then
                .Range(ixDBLastDataRow) = lStartRow + rsData.RecordCount
            Else
                .Range(ixDBLastDataRow) = .Range(ixDBLastDataRow) + rsData.RecordCount
            End If
            .Range(ixDBNumOfPages) = lNumOfPages
        Else
            sRange = "b" & (ixDBLastAtt + lSheetNum - 2)
            lStartRow = CLng(.Range(sRange)) + 1
            .Range("b" & (ixDBLastAtt + lSheetNum - 1)) = lStartRow _
                + rsData.RecordCount
            If .Range(ixDBLastDataRow) < lStartRow Then
                .Range(ixDBLastDataRow) = lStartRow + rsData.RecordCount
            Else
                .Range(ixDBLastDataRow) = .Range(ixDBLastDataRow) + rsData.RecordCount
            End If
        End If
    
'        If .Range(ixDBNumOfTags) = 0 Then
        If .Range(ixDBNumOfTags) = 0 Or (.Range(ixDBNumOfTags) = 1 And _
            lSheetNum > 1) Then
            'first column in each page should be the header
            lRes = FillDataRecords(sDataSheet, lStartRow, 1, _
                rsData, "name", lSheetNum)
            lRes = FillDataRecords(sDataSheet, lStartRow, 2, _
                rsData, "Edit_Style", lSheetNum)
            bDrawLayout = True
        End If
        
'        lColNum = .Range(ixDBNumOfTags) + 2
'        .Range(ixDBNumOfTags) = lColNum
        
        lDBPageNum = .Range(ixDBNumOfDataPages)
        If lDBPageNum = 0 Then
            lDBPageNum = 1
            .Range(ixDBNumOfDataPages) = 1
        End If
        If lDBPageNum = 1 Then
            Set wsDataCur = Sheets(sDataSheet)
        Else
            Set wsDataCur = Sheets(sDataSheet & Format(lDBPageNum, "000"))
        End If
    End With    'wsData1
    
    If lColExistTag > 0 Then
'        MsgBox "replacing existing tag no. : " & sTagNumber
        lRes = FillDataRecords(sSheetExistTag, lStartRow, _
            lColExistTag, rsData, "column_data", lSheetNum)
        lCurDataCol = lColExistTag  'to change when there are several data pages.
    Else
        With wsDataCur
            
            If .Range(ixDBNumOfTags) < 280 Then 'same sheet
                If lSheetNum = 1 Then
                    .Range(ixDBNumOfTags) = .Range(ixDBNumOfTags) + 1
                End If
                lColNum = .Range(ixDBNumOfTags) + 2 'two header columns
            
    '            lRes = FillDataRecords(sDataSheet, ixLastGenDataRow + 1, _
    '                lColNum, rsData, "column_data")
                lRes = FillDataRecords(sDataSheet, lStartRow, _
                    lColNum, rsData, "column_data", lSheetNum)
                    
                lCurDataCol = lColNum   'to change when there are several data pages.
            Else    'future: check the other pages
                oLocalLogFile.AddString "FillDatabase - reached 280 tags" _
                    , 0, ""
    ''            Sheets.Add 1
    ''            Sheets(1).Name = "Database" & Format(lDBPageNum + 1, "000")
                'add update of num of pages, ranges and fill the data
            
            End If
            .Cells(ixDBTagNumber, lColNum) = sTagNumber
        End With    'wsDataCur
        If lSheetNum = 1 Then
            With Sheets("Calc")
                lCalcRow = .Range("NumOfTags").Value + 1
                .Range("NumOfTags").Value = lCalcRow
                .Cells(lCalcRow, .[TagNumberCol].Column).Value = _
                    sTagNumber
                .Cells(lCalcRow, .[TagDataSheet].Column).Value = _
                    wsDataCur.Name
                .Cells(lCalcRow, .[TagColumn].Column).Value = lColNum
            End With    'Sheets("Calc")
        End If
    End If
    
    vAcc = Split(sDefAccuracy, ".")
'    lDefAccuracy = Len(vAcc(1))
    lDefAccuracy = CLng(Len(vAcc(1)))
    lRowNum = ixLastGenDataRow + 1
    With wsData1
        Do Until IsEmpty(.Cells(lRowNum, lCurDataCol))
            If IsNumeric(.Cells(lRowNum, lCurDataCol)) Then
                .Cells(lRowNum, lCurDataCol) = Round(.Cells(lRowNum, lCurDataCol), _
                    lDefAccuracy)
            End If
            lRowNum = lRowNum + 1
        Loop
    End With    'wsData1
'    If lSheetNum = 1 Then 'check num of sheet and num of tag
'
'    End If
Exit Function

mErr:
    Debug.Print "Error in FillDatabase"
    Debug.Print sFieldName & " - " & Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "FillDatabase - " & sFieldName, _
        Err.Number, Err.Description
    FillDatabase = Err.Number
    Resume Next
End Function

Private Function FillDataRecords(sSheetName As String, lStartRow As Long _
    , lColNum As Long, rsData As Recordset, sDBColName As String, _
    lPageNum As Long) As Long

    Dim lCurrentRow As Long
    Dim sName As String
    
    lCurrentRow = lStartRow
    With Sheets(sSheetName)
        rsData.MoveFirst
        While Not rsData.EOF
            .Cells(lCurrentRow, lColNum).NumberFormat = "@"
            .Cells(lCurrentRow, lColNum) = Trim(CStr(rsData.Fields( _
                sDBColName).Value & ""))
            If lColNum = 1 Then
                sName = .Cells(lCurrentRow, lColNum).Value & _
                    Format(lPageNum, "_000")
                .Cells(lCurrentRow, lColNum).Value = sName
                .Cells(lCurrentRow, lColNum).Name = "db_" & sName
            End If
            
            lCurrentRow = lCurrentRow + 1
            rsData.MoveNext
        Wend
    End With    'Sheets(sSheetName)

End Function

Public Function FillDatabase1(sDataSheet As String, objRSData As _
    Recordset, Optional lSheetNum As Long = 1) As Long
    'used with data file - not in use
    
    Dim oQryTable As Object
    Dim oDataSheet As Worksheet
    Dim colFields As Collection
    Dim lCount As Long
    Dim lCountCol As Long
    Dim sFieldName As Variant
    Dim lRes As Long
    Dim lInsertionRow As Long
    Dim sDataHeader As String

    On Error GoTo mErr
    Set oDataSheet = Sheets(sDataSheet)
    lInsertionRow = ixDBHeader + (lSheetNum - 1) * 2
    
'    If lSheetNum = 1 Then
    Set oQryTable = oDataSheet.QueryTables.Add( _
        objRSData, oDataSheet.Cells(lInsertionRow, 1))
    oQryTable.RefreshStyle = xlInsertEntireRows
    oQryTable.Refresh False
    sDataHeader = "DataHeader" & Format(lSheetNum, "_000")
    oDataSheet.Rows(lInsertionRow).Name = sDataHeader
        
'    Else
'        With oDataSheet
'            .Cells(ixDBHeader + lSheetNum, 2).CopyFromRecordset _
'                objRSData
'            .Cells(ixDBHeader + lSheetNum, 1) = objRSData.Fields(0)
'        End With    'oDataSheet
'    End If
    
    Set colFields = New Collection
    lRes = RequiredFieldsForCompute(colFields)
    For Each sFieldName In colFields
        On Error Resume Next
        lCountCol = 0
        lCountCol = Range(sDataHeader).Find(sFieldName).Column
        If lCountCol > 0 Then
'            For lCount = 1 To objRSData.RecordCount
'                oDataSheet.Cells(ixDBHeader + lCount, lCountCol).Name _
'                    = "db_" & sFieldName & Format(lCount, "_000")
'            Next
            oDataSheet.Cells(lInsertionRow + 1, lCountCol).Name _
                = "db_" & sFieldName & Format(lSheetNum, "_000")
        End If
    Next
GoOut:
    Set colFields = Nothing
Exit Function

mErr:
    Debug.Print "Error in FillDatabase"
    Debug.Print sFieldName & " - " & Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "FillDatabase - " & sFieldName, _
        Err.Number, Err.Description
    FillDatabase1 = Err.Number
    Resume Next
End Function

Private Function RequiredFieldsForCompute(colFields As Collection) _
    As Long

    On Error Resume Next
    colFields.Add "pd_flow_uid", "pd_flow_uid"
    colFields.Add "pd_flow_uflg", "pd_flow_uflg"
    colFields.Add "pd_press_uid", "pd_press_uid"
    colFields.Add "pd_press_uflg", "pd_press_uflg"
    colFields.Add "pd_vap_press_uid", "pd_vap_press_uid"
    colFields.Add "pd_vap_press_uflg", "pd_vap_press_uflg"
    colFields.Add "pd_f_range_uid", "pd_f_range_uid"
    colFields.Add "pd_f_range_uflg", "pd_f_range_uflg"
    colFields.Add "pd_temp_uid", "pd_temp_uid"
    colFields.Add "pd_temp_uflg", "pd_temp_uflg"
    
    
End Function


'Private Function WriteDWTables(sDWSheet As String, colTable As _
'    Collection, colTableNames As Collection) As Long
Public Function WriteDWTables(colTable As Collection, colTableNames _
    As Collection) As Long
    
'    Dim oQryTable As Object
    Dim oTempRS As Recordset
    Dim oDataSheet As Worksheet
    Dim lCount As Long
    Dim lCols As Long
    Dim lColRange As Long
    Dim rTemp As Range
    Dim vTableName As Variant
    
    lColRange = 1
    On Error GoTo mErr
    Set oDataSheet = Sheets("DWTables")
    With oDataSheet
'        For Each oTempRS In colTable
        For Each vTableName In colTableNames
            Set oTempRS = colTable(CStr(vTableName))
            oTempRS.Open
'        For Each oTempRS In colTable
            If oTempRS.Fields.Count = 0 Then GoTo GoNext
            For lCount = 0 To oTempRS.Fields.Count - 1
'                .Cells(1, lCols + 1).Value = oTempRS.Fields(lCols).Name
                .Cells(ixDDDW, lColRange + lCount).Value = _
                    oTempRS.Fields(lCount).Name
            Next
            Set rTemp = .Cells(ixDDDW + 1, lColRange)
            rTemp.CopyFromRecordset oTempRS
            .Range(.Cells(ixDDDW, lColRange), .Cells(ixDDDW, lColRange + _
                oTempRS.Fields.Count - 1)).Name = "hd_" & CStr(vTableName)
            .Range(.Cells(ixDDDW + 1, lColRange), .Cells(ixDDDW + _
                oTempRS.RecordCount, lColRange + oTempRS.Fields.Count _
                - 1)).Name = "Tab_" & CStr(vTableName)
            'add the name for the relevant cells.
            For lCount = 0 To oTempRS.Fields.Count - 1
'                .Cells(1, lCols + 1).Value = oTempRS.Fields(lCols).Name
                .Range(.Cells(ixDDDW + 1, lColRange + lCount), .Cells( _
                    ixDDDW + oTempRS.RecordCount, lColRange + lCount) _
                    ).Name = CStr(vTableName) & "__" & CStr( _
                    oTempRS.Fields(lCount).Name)
            Next
                
                
            lColRange = lColRange + oTempRS.Fields.Count + 1
            oTempRS.Close
            Set oTempRS = Nothing
GoNext:
        Next
    End With    'oDataSheet
Exit Function

mErr:
    Debug.Print "WriteDWTables - " & vTableName & " - " & Err.Number _
        & ": " & Err.Description
    WriteDWTables = Err.Number
    oLocalLogFile.AddString "WriteDWTables - " & vTableName, Err.Number, _
        Err.Description
    Resume Next
End Function

Public Function DrawHiddenData(sSheetName As String, colHidden As _
    Collection) As Long

    Dim objTemp As Object
    Dim sName As String
    Dim lSheetNumber As Long
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    For Each objTemp In colHidden
        sName = objTemp.hdName & Format(lSheetNumber, "_000")     '*'
        With Sheets(sSheetName)
            .Cells(lHiddenDataRow, lHiddenDataCol).Name = sName
            .Range(sName) = objTemp.hdcolvalue
            lHiddenDataRow = lHiddenDataRow + 1
        End With
    Next
    
GoOut:
    
Exit Function

mErr:
    Debug.Print sName & " - " & Err.Number & ": " & Err.Description
    DrawHiddenData = Err.Number
    oLocalLogFile.AddString "DrawHiddenData - " & sName, Err.Number, _
        Err.Description
    Resume Next

End Function


'Public Function DrawComputedObj(sSheetName As String, objRSData As _
'    Recordset, colComp As Collection, CellArr() As SpecCell) As Long
Public Function DrawComputedObj(sSheetName As String, colComp As _
    Collection, CellArr() As SpecCell) As Long

    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim lRes As Long
    Dim lSheetNumber As Long
    Dim sOrigFunc As String
    Dim sResFunc As String
    Dim sTempUflg As String
    Dim sTempUid As String
    Dim oFuncConv As clsConvertFunction
    Dim sErrDesc As String
    Dim sExt As String
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    
    For Each objTemp In colComp
'        On Error Resume Next
        lStartCol = objTemp.general.StartCol
        lStartRow = objTemp.general.startRow
        lEndCol = objTemp.general.EndCol
        lEndRow = objTemp.general.EndRow
        
        sName = objTemp.general.eName & Format(lSheetNumber, _
            "_000") '*'
        
        If objTemp.general.eName = "logo" Then
            'draw logo (function)
'            lRes = InsertLogo(sSheetName, lStartRow, lStartCol, _
'                 objTemp.cmpExpression)
            lRes = InsertLogo(sSheetName, lStartRow, lStartCol, _
                 objTemp.general.colValue)
            Sheets(sSheetName).Cells(lStartRow, lStartCol).Name = sName
            If lRes <> 0 Then
                Debug.Print "There's error inserting the logo"
'            objLogFile.AddString "DrawComputedObj-logo", Err.Number, _
                Err.Description
                
'                MsgBox "There's error inserting the logo"   'temp msg
            End If
            GoTo GoNext
        End If
        
        If CellArr(lStartRow, lStartCol).Occupied = True Then
            If UCase(Sheets(sSheetName).Cells(lStartRow, lStartCol _
                )) = "SEE LIST" Then GoTo GoNext
        End If
        

        With Sheets(sSheetName)
'            .Cells(lStartRow, lStartCol).Name = objTemp.General.ename
            .Cells(lStartRow, lStartCol).Name = sName
            sOrigFunc = Trim(objTemp.cmpExpression)
            If sOrigFunc = objTemp.general.colValue Then
                .Cells(lStartRow, lStartCol) = sOrigFunc
                GoTo GoNext
            End If
            Set oFuncConv = New clsConvertFunction
            sExt = Format(lSheetNumber, "_000")
            lRes = oFuncConv.UflgUid(sOrigFunc, "", sExt, "", sExt, _
                sResFunc, sErrDesc)
            If sResFunc = "(Unknown function)" Then
                sResFunc = objTemp.general.colValue
                oLocalLogFile.AddString "DrawComputedObj - " & sName, _
                    0, "(Unknown function)", , sOrigFunc
                
            End If
            '=== [EG] 060502 replaced by oFuncConv.UflgUid =========
'            If LCase(Left(sOrigFunc, 2)) <> "if" Then
'                Select Case sOrigFunc
'                    Case "pd_temp_uid"
'                        sResFunc = "=" & sOrigFunc & Format( _
'                            lSheetNumber, "_000")
'                        .Range(sName).NumberFormat = "General"
'                    Case Else
'                        sResFunc = "(Unknown function): =" & _
'                            sOrigFunc & Format(lSheetNumber, "_000")
'                        .Range(sName).NumberFormat = "@"
'                End Select
'                With .Range(sName)
'                    .Formula = sResFunc
''                    .NumberFormat = "@"
'                    .Font.Size = objTemp.general.Font.Height
'                End With
'                GoTo GoNext
'            End If
'            Select Case sOrigFunc
'                Case "if ( pd_flow_uflg='B', rightTrim (  pd_flow_uid" _
'                    & " ) + ' ' + '@base', pd_flow_uflg +  pd_flow_uid )"
'
'                    sTempUflg = "pd_flow_uflg" & Format( _
'                        lSheetNumber, "_000")
'                    sTempUid = "pd_flow_uid" & Format( _
'                        lSheetNumber, "_000")
'                    sResFunc = "=if(" & sTempUflg & "=""B""," _
'                        & "Trim(" & sTempUid & ")&""@base""," & _
'                        "" & sTempUflg & " & " & sTempUid _
'                        & ")"
''                    sResFunc = "if(range(""pd_flow_uflg"" & format(lSheetNumber, _
''                        ""_000""))=""B"",Trim(var)&""@base"",
''                "if(var=""B"",Trim(var)&""@base"",var&var)"
'                Case "if ( pd_press_uflg = 'G', rightTrim ( pd_press_uid ) " _
'                    & "+ '-g', if ( pd_press_uflg = 'A' , rightTrim ( " & _
'                    "pd_press_uid ) + '-a', '' ) )"
'
'                    sTempUflg = "pd_press_uflg" & Format( _
'                        lSheetNumber, "_000")
'                    sTempUid = "pd_press_uid" & Format( _
'                        lSheetNumber, "_000")
'                    sResFunc = "=if(" & sTempUflg & "=""G"", Trim(" & _
'                        sTempUid & ") & ""-g"", If(" & sTempUflg & _
'                        "=""A"",Trim(" & sTempUid & ")&""-a"",""""))"
'
'                Case "if ( pd_vap_press_uflg = 'G', rightTrim ( " & _
'                    "pd_vap_press_uid ) + '-g', if ( pd_vap_press_uflg" _
'                    & " = 'A' , rightTrim ( pd_vap_press_uid ) + '-a'" _
'                    & ", '' ) )"
'
'                    sTempUflg = "pd_vap_press_uflg" & Format( _
'                        lSheetNumber, "_000")
'                    sTempUid = "pd_vap_press_uid" & Format( _
'                        lSheetNumber, "_000")
'                    sResFunc = "=if(" & sTempUflg & "=""G"", Trim(" & _
'                        sTempUid & ") & ""-g"", If(" & sTempUflg & _
'                        "=""A"",Trim(" & sTempUid & ")&""-a"",""""))"
'
'                Case "if ( pd_f_range_uflg='B', rightTrim (  " & _
'                    "pd_f_range_uid ) + ' ' + '@base', pd_f_range_uflg" _
'                    & " +  pd_f_range_uid )"
'
'                    sTempUflg = "pd_f_range_uflg" & Format( _
'                        lSheetNumber, "_000")
'                    sTempUid = "pd_f_range_uid" & Format( _
'                        lSheetNumber, "_000")
'                    sResFunc = "=if(" & sTempUflg & "=""B""," _
'                        & "Trim(" & sTempUid & ")&""@base""," & _
'                        "" & sTempUflg & " & " & sTempUid _
'                        & ")"
'
'                Case Else
'UnknownFunc:
'                    sResFunc = "(Unknown function): " & sOrigFunc
'
'            End Select
            '=== end [EG] 060502 ===========================
            With .Range(sName)
'                .Formula = sResFunc
                .Value = objTemp.general.colValue   '050503
                .NumberFormat = "@"
                .Font.Size = objTemp.general.Font.Height
            End With
        End With
GoNext:
    Next
GoOut:
    
Exit Function

mErr:
    Debug.Print sName & " - " & Err.Number & ": " & Err.Description
    DrawComputedObj = Err.Number
    oLocalLogFile.AddString "DrawComputedObj - " & sName, Err.Number, _
        Err.Description
    Resume Next
End Function

Private Function InsertLogo(sSheetName As String, lStartRow As Long, _
    lStartCol As Long, sBitmap As String) As Long
    
    Dim scaleFactor As Double
    Dim picWidth As Double
    Dim picHeight As Double
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim dScaleFactorX As Double
    Dim dScaleFactorY As Double
    
    On Error GoTo mErr
    With Sheets(sSheetName)
        'calculates th logo size
        lEndRow = lStartRow + 1
        lEndCol = lStartCol + 1
        'check end column
        Do While .Cells(lStartRow, lEndCol).Borders(xlEdgeLeft).LineStyle = _
            xlNone And .Cells(lStartRow, lEndCol).Borders(xlEdgeRight) _
            .LineStyle = xlNone
            lEndCol = lEndCol + 1
            If lEndCol > lMaxCols Then
                lEndCol = lMaxCols
                Exit Do
            End If
        Loop
        
        Do While .Cells(lEndRow, lStartCol).Borders(xlEdgeTop). _
            LineStyle = xlNone And .Cells(lEndRow, lStartCol _
            ).Borders(xlEdgeBottom).LineStyle = xlNone
            lEndRow = lEndRow + 1
            If lEndRow > lMaxRows Then
                lEndRow = lMaxRows
                Exit Do
            End If
        Loop
        
        .Range(.Cells(lStartRow, lStartCol), .Cells(lEndRow, lEndCol) _
            ).Merge
    
        .Cells(lStartRow, lStartCol).Activate
        .Pictures.Insert(sBitmap).Select
        
        picWidth = .Pictures.ShapeRange.Width
        picHeight = .Pictures.ShapeRange.Height
        'scale the picture
        scaleFactor = (.Rows(lEndRow + 1).Top - .Rows(lStartRow).Top - _
            1.5) / picHeight
'        dScaleFactorY = (.Rows(lEndRow + 1).Top - .Rows(lStartRow).Top) _
'            / picHeight
        If (.Columns(lEndCol + 1).Left - .Columns(lStartCol).Left) / _
            picWidth < scaleFactor Then
            scaleFactor = (.Columns(lEndCol + 1).Left - .Columns( _
                lStartCol).Left - 2) / picWidth
'            dScaleFactorX = (.Columns(lEndCol + 1).Left - .Columns(lStartCol _
'                ).Left) / picWidth
        End If
'        scaleFactor = (.Cells(lStartRow).Height) / picHeight
'        If (.Cells(lStartCol).Width) / picWidth < scaleFactor Then
'            scaleFactor = (.Cells(lStartCol).Width) / picWidth
'        End If
        With .Pictures.ShapeRange
            .ScaleHeight scaleFactor, True
            .ScaleWidth scaleFactor, True
        End With    '.Pictures.ShapeRange
        .Pictures.ShapeRange.IncrementLeft ((.Columns(lEndCol + 1).Left _
            - .Columns(lStartCol).Left) - picWidth * scaleFactor) / 4
        .Pictures.ShapeRange.IncrementTop ((.Rows(lEndRow + 1).Top - _
            .Rows(lStartRow).Top) - picHeight * scaleFactor) / 2
        
    End With
Exit Function

mErr:
    Debug.Print "Error in InsertLogo"
    Debug.Print Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "InsertLogo", Err.Number, _
        Err.Description
    InsertLogo = Err.Number
End Function

'Private Function FindDisplayCol() As Long
'
'End Function

'Public Function DrawDWObj(sSheetName As String, objRSData As Recordset _
'    , colDW As Collection, colDWTables As Collection, colDWTableNames _
'    As Collection) As Long
'Public Function DrawDWObj(sSheetName As String, objRSData As Recordset _
'    , colDW As Collection, colDWTableNames As Collection, CellArr() As _
'    SpecCell) As Long
Public Function DrawDWObj(sSheetName As String, colDW As Collection, _
    colDWTableNames As Collection, CellArr() As SpecCell) As Long

    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim lRes As Long
    Dim sName As String
    Dim objDDDW As Object
    Dim wsData As Worksheet
    Dim lDWCount As Long
    Dim sLink As String
    Dim lDWDisplayCol As Long
    Dim sDWDisplayColName As String
    Dim sObjValue As String
    Dim lULimit As Long
    Dim lCount As Long
    Dim lSheetNumber As Long
    Dim bInData As Boolean
'    Dim sObjFormat As String
    Dim sMfrCode As String
    Dim sModValue As String
    Dim lModValue As Long
    Dim lDWCodeCol As Long
    Dim lFirstRow As Long
    Dim lColExistTag As Long
    Dim lCurRow As Long
    Dim lCurCol As Long
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
'    lColExistTag = Sheets("Calc").Cells(lCount, Application.[TagColumn].Column)
'    lRes = WriteDWTables("DWTables", colDWTables)
'    If lSheetNumber = 1 Then
'        lRes = WriteDWTables("DWTables", colDWTables, colDWTableNames)
'    End If
    lDWCount = Range("DWCount")
    For Each objTemp In colDW
        lDWCount = lDWCount + 1
        Range("DWCount") = lDWCount
        sName = objTemp.general.eName
        '<-- 24/7/02 -->
'        If Not IsNull(objRSData.Fields(sName)) Then
'            If DrawDWObj <> 0 Then
                bInData = False
'            Else
'                bInData = True
'            End If
'            DrawDWObj = 0
'        End If
        '<-- end -->
        
        sName = sName & "_" & Format(lSheetNumber, "000")              '*'

        lStartCol = objTemp.general.StartCol
        lStartRow = objTemp.general.startRow
        lEndCol = objTemp.general.EndCol
        lEndRow = objTemp.general.EndRow
        
        sObjValue = ""
        '<-- 24/7 -->
'        If bInData Then
'            sObjValue = objRSData.Fields( _
'                objTemp.General.eName).Value
'        Else
            sObjValue = objTemp.general.colValue
'        End If
        '<-- end -->
        
'        sObjFormat = objTemp.general.cFormat
'        If UCase(Left(sObjFormat, 10)) = """[GENERAL]" Then
'            sObjFormat = sDefAccuracy
'        End If
        
        With Sheets(sSheetName)
'            .Cells(lStartRow, lStartCol).Name = objTemp.General.ename
            .Cells(lStartRow, lStartCol).Name = sName
            If CellArr(lStartRow, lStartCol).Occupied = True Then
                If UCase(.Cells(lStartRow, lStartCol)) = "SEE LIST" _
                    Then GoTo GoNext
            End If
            
            If objTemp.general.tabsequence = 0 Then
                'locked text
''                If CellArr(lStartRow, lStartCol).Occupied = True Then
''                    If UCase(.Cells(lStartRow, lStartCol)) = "SEE LIST" _
''                        Then GoTo GoNext
''                End If
                If bInData Then
                    .Cells(lStartRow, lStartCol).NumberFormat = "@"
                    .Cells(lStartRow, lStartCol) = sObjValue
    '                .Cells(lStartRow, lStartCol) = Format(sObjValue, _
                        sObjFormat)
                Else
                    If IsNumeric(sObjValue) Then
                        sDWDisplayColName = objTemp.dddw.DisplayColumn
                        lDWDisplayCol = Range("hd_" & objTemp.dddw.dwname _
                            ).Find(sDWDisplayColName).Column
                        Set wsData = Sheets("DWTables")
                        lULimit = Range(objTemp.dddw.dwname & "__" & _
                            sDWDisplayColName).Count
                        For lCount = 1 To lULimit
                            If Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                                lCount, Range(objTemp.dddw.dwname & "__" & _
                                objTemp.dddw.DisplayColumn).Column)) Or _
                                Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                                lCount, Range(objTemp.dddw.dwname & "__" & _
                                objTemp.dddw.DataColumn).Column)) Then
                            
                                sObjValue = wsData.Cells(ixDDDW + _
                                    lCount, Range(objTemp.dddw.dwname _
                                    & "__" & objTemp.dddw.DisplayColumn _
                                    ).Column)
'                                objTemp.general.colValue = sObjValue
                                
                                lRes = FindDataAndLocationInDB("Database", m_sCmpName, _
                                    sName, lCurRow, lCurCol, True, True, sObjValue, False)
                                Sheets("Database").Cells(lCurRow, lCurCol).Value = sObjValue
                                Exit For
                            End If
                        Next
                        
                    End If
                    .Cells(lStartRow, lStartCol).NumberFormat = "@"
                    .Cells(lStartRow, lStartCol) = sObjValue
                End If
                    
'                .Cells(lStartRow, lStartCol) = objRSData.Fields( _
'                    objTemp.general.ename).Value
'                .Cells(lStartRow, lStartCol) = objRSData.Fields( _
'                    sName).Value
                With .Cells(lStartRow, lStartCol).Font
'                        .Name = "Arial"
                    .Size = objTemp.general.Font.Height
'                        .Strikethrough = False
'                        .Superscript = False
'                        .Subscript = False
'                        .OutlineFont = False
'                        .Shadow = False
'                        .Underline = xlUnderlineStyleNone
'                        .ColorIndex = xlAutomatic
                End With
            Else    'editable
'            ElseIf LCase(objTemp.dddw.vscrollbar) = "yes" Then
                'choose from list
                sDWDisplayColName = objTemp.dddw.DisplayColumn
                lDWDisplayCol = Range("hd_" & objTemp.dddw.dwname).Find( _
                    sDWDisplayColName).Column
'                sObjValue = objRSData.Fields(sName)
'                sObjValue = objRSData.Fields(objTemp.general.ename)
'''                Range(sName).Value '''''
                While .Cells(lEndRow, lEndCol).Borders(xlEdgeLeft _
                    ).LineStyle <> xlNone
                    lEndCol = lEndCol - 1
                Wend
                x = .Columns(lStartCol).Left
                y = .Rows(lStartRow).Top
                wid = .Range(.Cells(lStartRow, lStartCol), _
                    .Cells(lStartRow, lEndCol)).Width
                hi = .Rows(lStartRow).Height
                .Cells(lStartRow, lStartCol).Name = sName
                Set objDDDW = .DropDowns.Add(x, y, wid, hi)
                objDDDW.Name = "dd_" & sName
                
                .Range(.Cells(lStartRow, lStartCol), .Cells(lStartRow, lEndCol - 1) _
                    ).Merge
                
                Dim sOnAction As String
                sOnAction = "DWChange"
                With objDDDW
                    .OnAction = sOnAction
                    .PrintObject = False
'                End With        'objDDDW
                Set wsData = Sheets("DWTables")
''                wsData.Select
'                With objDDDW
'                    .ListFillRange = "Tab_" & objTemp.dddw.dwname 'LFR
''                    wsData.Range(Cells(ixDDDW + 1, lDWDisplayCol), Cells( _
''                        ixDDDW + Range("Tab_" & objTemp.dddw.dwname _
''                        ).Rows.Count, lDWDisplayCol)).Name = "disp_" & _
''                        objTemp.dddw.dwname
''                    .ListFillRange = "disp_" & objTemp.dddw.dwname
                    
                    .ListFillRange = objTemp.dddw.dwname & "__" & _
                        sDWDisplayColName
                    sLink = "Sel_" & sName
                    wsData.Cells(ixDWSelected, ixDWStartCol + lDWCount _
                        ).Name = sLink
                    .LinkedCell = sLink
                    .Display3DShading = False
                    .PrintObject = False
                End With        'objDDDW
                
                'set the dw status
                wsData.Cells(ixDWName, ixDWStartCol + lDWCount) = sName
                
                lULimit = Range(objTemp.dddw.dwname & "__" & _
                    sDWDisplayColName).Count
'''                For lCount = 1 To lULimit
'                    If sObjValue = wsData.Cells(ixDDDW + lCount, Range( _
'                        objTemp.dddw.dwname & "__" & sDWDisplayColName _
'                        ).Column) Or sObjValue = wsData.Cells(ixDDDW + _
'                        lCount, Range(objTemp.dddw.dwname & "__" & _
'                        objTemp.dddw.DataColumn).Column) Then
'                    If sObjValue = wsData.Cells(ixDDDW + _
'                        lCount, Range(objTemp.dddw.dwname & "__" & _
'                        objTemp.dddw.DataColumn).Column) Then
                If objTemp.dddw.dwname = "dw_uom_tm" Then
                    For lCount = 1 To lULimit
                        If Right(sObjValue, 1) = Right(wsData.Cells(ixDDDW + _
                            lCount, Range(objTemp.dddw.dwname & "__" & _
                            objTemp.dddw.DisplayColumn).Column), 1) Then
                            
                            wsData.Cells(ixDWSelected, ixDWStartCol + _
                                lDWCount) = lCount
                            wsData.Cells(ixDWPrevious, ixDWStartCol + _
                                lDWCount) = lCount
                            Exit For
                        End If
                    Next
                Else
                    For lCount = 1 To lULimit
'                        If sObjValue = wsData.Cells(ixDDDW + _
'                            lCount, Range(objTemp.dddw.dwname & "__" & _
'                            objTemp.dddw.DisplayColumn).Column) Then
                        If Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                            lCount, Range(objTemp.dddw.dwname & "__" & _
                            objTemp.dddw.DisplayColumn).Column)) Or _
                            Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                            lCount, Range(objTemp.dddw.dwname & "__" & _
                            objTemp.dddw.DataColumn).Column)) Then
                        
                            wsData.Cells(ixDWSelected, ixDWStartCol + _
                                lDWCount) = lCount
                            wsData.Cells(ixDWPrevious, ixDWStartCol + _
                                lDWCount) = lCount
                            Exit For
                        End If
                    Next
                End If
                
                wsData.Cells(ixDWShownColumn, ixDWStartCol + lDWCount) _
                    = objTemp.dddw.dwname & "__" & sDWDisplayColName
'''                Next
               
'                .Cells(ixDWDataValue, ixDWStartCol + lDWCount _
'                    ).NumberFormat = "@"
'                .Cells(ixDWValue, ixDWStartCol + lDWCount _
'                    ).NumberFormat = "@"
                    
                wsData.Cells(ixDWDataValue, ixDWStartCol + lDWCount) _
                    = "=IF(" & sLink & " =0,"" "",(INDEX(" & _
                    objTemp.dddw.dwname & "__" & objTemp.dddw.DataColumn _
                    & "," & sLink & ")))"
                wsData.Cells(ixDWValue, ixDWStartCol + lDWCount) _
                    = "=IF(" & sLink & " =0,"" "",T(INDEX(" & _
                    objTemp.dddw.dwname & "__" & sDWDisplayColName _
                    & "," & sLink & ")))"
                    
                With Range(sName)
                    .Value = wsData.Cells(ixDWValue, ixDWStartCol + _
                        lDWCount)
                    .Font.Size = objTemp.general.Font.Height
        '            objDDDW.Value = .Value
                End With
                '--- co by EG on 13/7/03 -----
'                If Left(sName, Len(sName) - 4) = "cmpnt_mfr_id" Then
'                    sMfrCode = wsData.Cells(ixDWValue + 1, Range( _
'                        "Sel_cmpnt_mfr_id_" & Format(lSheetNumber, _
'                        "000")).Column)
'                ElseIf Left(sName, Len(sName) - 4) = "cmpnt_mod_id" Then
'                    sModValue = wsData.Cells(ixDWValue + 1, Range( _
'                        "Sel_cmpnt_mod_id_" & Format(lSheetNumber, _
'                        "000")).Column)
'                    lDWCodeCol = Range(objTemp.dddw.dwname & "__" & _
'                        objTemp.dddw.DataColumn).Column
'                End If
                '--- end of co ----------
''                Sheets(sSheetName).Activate
            End If
        End With    'Sheets(sSheetName)
        
GoNext:
    Next
    With Sheets(sSheetName)
'    Set wsTemplate = Sheets(sSheetName)
        '== EG Changed on 13/7/03 =====
'        .DropDowns("dd_cmpnt_mod_id_" & Format(lSheetNumber, "000" _
'            )).ListFillRange = "SubT_" & sMfrCode      'co
        .DropDowns("dd_cmpnt_mod_id_" & Format(lSheetNumber, "000" _
            )).ListFillRange = "d_dddw_spec_cmpnt_mod__cmpnt_mod_name"
            
            '[EG] - 130502 need to add help range for partial list.
            'co
'        lULimit = wsData.Range("SubT_" & sMfrCode).Rows.Count
'        lFirstRow = wsData.Range("SubT_" & sMfrCode).Row - 1
'        For lCount = 1 To lULimit
'            If sModValue = wsData.Cells(lFirstRow + _
'                lCount, lDWDisplayCol) Or _
'                sModValue = wsData.Cells(lFirstRow + _
'                lCount, lDWCodeCol) Then
'
'                wsData.Cells(ixDWSelected, ixDWStartCol + _
'                    lDWCount + 1) = lCount
'                wsData.Cells(ixDWPrevious, ixDWStartCol + _
'                    lDWCount + 1) = lCount
'                Exit For
'            End If
'        Next
        '== end of changes ===
'        .LinkedCell = sLink
    End With
    
    
GoOut:
    Set wsData = Nothing
Exit Function

mErr:
    Debug.Print sName & " - " & Err.Number & ": " & Err.Description
    DrawDWObj = Err.Number
    oLocalLogFile.AddString "DrawDWObj - " & sName, Err.Number, _
        Err.Description
    Resume Next
End Function

'Public Function DrawRBObj(sSheetName As String, objRSData _
'    As Recordset, colRB As Collection) As Long
Public Function DrawRBObj(sSheetName As String, colRB As Collection) _
    As Long

    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim lRes As Long
    Dim ws As Worksheet
    Dim wsCon As Worksheet
    Dim objRB As Object
    Dim x As Double         'DropDown x coor.
    Dim y As Double         'DropDown y coor.
    Dim wid As Double       'DropDown width
    Dim hi As Double        'DropDown height
    Dim lRBCount As Long
    Dim lNumOfButtons As Long
    Dim lCount As Long
    Dim lCountValues As Long
    Dim sOnAction As String
    Dim sObjValue As String
    Dim objGroup As Object
    Dim sText As String
    Dim lSheetNumber As Long
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    Set wsCon = Sheets("Connections")
    Set ws = Sheets(sSheetName)
    ws.Activate
    lRBCount = Range("RBCount")
    For Each objTemp In colRB
    
        lRBCount = lRBCount + 1
        Range("RBCount") = lRBCount
        lStartCol = objTemp.general.StartCol
        lStartRow = objTemp.general.startRow
        lEndCol = objTemp.general.EndCol
        lEndRow = objTemp.general.EndRow
        
        
        'fixing the width
        While ws.Cells(lEndRow, lEndCol).Borders(xlEdgeLeft _
            ).LineStyle <> xlNone
            lEndCol = lEndCol - 1
        Wend
        
        sObjName = objTemp.general.eName & "_" & Format(lSheetNumber, _
            "000") '*'
        
        lNumOfButtons = objTemp.RadioButton.Values.Count
        With ws
            wid = .Range(.Cells(lStartRow, lStartCol), _
                .Cells(lStartRow, lEndCol)).Width
            x = .Columns(lStartCol).Left
            y = .Rows(lStartRow).Top    '- 2
            hi = .Rows(lStartRow).Height
            .Cells(lStartRow, lStartCol).Name = sObjName
            
            'add a rectangle to hide the text of the cell
            ws.Shapes.AddShape(msoShapeRectangle, x, y, wid, hi). _
                Select
            With Selection
                .ShapeRange.Fill.Visible = msoTrue
                .ShapeRange.Fill.Solid
                .ShapeRange.Fill.ForeColor.SchemeColor = 9
                .ShapeRange.Fill.Transparency = 0#
                .ShapeRange.Line.Weight = 0.75
                .ShapeRange.Line.DashStyle = msoLineSolid
                .ShapeRange.Line.Style = msoLineSingle
                .ShapeRange.Line.Transparency = 0#
                .ShapeRange.Line.Visible = msoFalse
                .Placement = xlMoveAndSize
                .PrintObject = True
                .ShapeRange.ZOrder msoSendToBack
            End With
            Set objGroup = ActiveSheet.GroupBoxes.Add(x, y, wid, hi)
            objGroup.Text = ""
            objGroup.PrintObject = False
        End With        'ws
        
        With wsCon
            lTempCol = lRBCount * 3 + 1
            lTempRow = ixRadioButton + 3
            .Cells(ixRadioButton, lTempCol) = sObjName
'            .Cells(ixRadioButton, lTempCol) = objTemp.General.ename
            .Cells(ixRadioButton + 2, lTempCol) = "String"
            .Cells(ixRadioButton + 2, lTempCol + 1) = "Code"
            .Cells(ixRadioButton + 1, lTempCol + 2) = ws.Cells(lStartRow, _
                lStartCol).Address
            .Range(.Cells(ixRadioButton + 3, lTempCol), .Cells( _
                ixRadioButton + 2 + lNumOfButtons, lTempCol)).Name = _
                "st_RB_" & sObjName
            
            .Range(.Cells(ixRadioButton + 3, lTempCol + 1), .Cells( _
                ixRadioButton + 2 + lNumOfButtons, lTempCol + 1)).Name = _
                "cd_RB_" & sObjName
            .Cells(ixRadioButton + 1, lTempCol).Name = "ch_" & _
                sObjName
                
            '14/4/02 - Changed LC to range names [EG]
'            If lTempCol > 26 Then
'                If lTempCol Mod 26 <> 0 Then
'                    sColumnName = String(1, Int(lTempCol / 26 + 64)) _
'                        & String(1, lTempCol Mod 26 + 64)
'                Else
'                    sColumnName = String(1, Int((lTempCol - 1) / 26 _
'                        + 65)) & "Z"
'                End If
'            Else
'                sColumnName = String(1, lTempCol + 64)
'            End If
        End With    'wsCon
        
'        LC = "Connections!$" & sColumnName & "$" _
'            & ixRadioButton + 1
        lc = "ch_" & sObjName
        
        '===== END [EG] ==========================
        
        For lCount = 1 To lNumOfButtons
            sText = objTemp.RadioButton.Values(lCount)
            wsCon.Cells(lTempRow, lTempCol) = sText
            wsCon.Cells(lTempRow, lTempCol + 1) = objTemp.RadioButton.Codes( _
                lCount)
            
            lTempRow = lTempRow + 1
        
            With objGroup
                wid = .Width / lNumOfButtons
                x = .Left + (lCount - 1) * wid
                y = .Top - 2
                hi = ws.Rows(lStartRow).Height    '.Height
                Set objRB = ws.OptionButtons.Add(x, y, wid, hi)
            End With
            sOnAction = "radioButton_change"
            objRB.OnAction = sOnAction   '"radioButton_change"
        
            With objRB
                .LinkedCell = lc
                .Display3DShading = True
                .Placement = xlMove
                .PrintObject = True
                .Characters.Text = sText
            End With        'objRB
            
            With wsCon
'                sObjValue = objRSData.Fields(sObjName)
' 24/7               sObjValue = objRSData.Fields(objTemp.General.eName)
                sObjValue = objTemp.general.colValue '22/8/02
                If sObjValue = .Cells(ixRadioButton + 2 + _
                    lCount, lTempCol) Or sObjValue = _
                    .Cells(ixRadioButton + 2 + lCount, lTempCol + _
                    1) Then
                    .Cells(ixRadioButton + 1, lTempCol) = _
                        lCount
                    .Cells(ixRadioButton + 1, lTempCol + 1) = _
                        lCount
                End If
            End With
            With Range(sObjName)
                .Value = wsCon.Cells(ixRadioButton + 4, lTempCol + 2)
                .Font.Size = objTemp.general.Font.Height
            End With
        Next
        
        With objGroup
            .Width = wid * lNumOfButtons
            .Top = objRB.Top    'y
            .Height = objRB.Height  ' hi    '.Height
        End With
        
        With wsCon
            .Cells(ixRadioButton + 3, lTempCol + 2) = "=IF(" & "ch_" & _
                sObjName & " =0,"" "",INDEX(" & "cd_RB_" _
                & sObjName & "," & lc & "))"
            .Cells(ixRadioButton + 4, lTempCol + 2) = "=IF(" & "ch_" & _
                sObjName & " =0,"" "",INDEX(" & "st_RB_" _
                & sObjName & "," & lc & "))"
        End With
    Next
GoOut:
    Set wsCon = Nothing
    Set ws = Nothing
    Set objRB = Nothing
    Set objGroup = Nothing
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    DrawRBObj = Err.Number
    oLocalLogFile.AddString "DrawRBObj - " & sObjName, Err.Number, _
        Err.Description
    Resume Next
End Function


'Public Function DrawCBObj(sSheetName As String, objRSData _
'    As Recordset, colCB As Collection) As Long
Public Function DrawCBObj(sSheetName As String, colCB As Collection) _
    As Long
    'no need of objRSData - 24/7
    
    Dim objTemp As Object
    Dim lRes As Long
    Dim ws As Worksheet
    Dim wsCon As Worksheet
    Dim objCB As Object
    Dim x As Double         'CheckBox x coor.
    Dim y As Double         'CheckBox y coor.
    Dim wid As Double       'CheckBox width
    Dim hi As Double        'CheckBox height
    Dim lCBCount As Long
    Dim sOnAction As String
    Dim lTempCol As Long
'    Dim sColumnName As String  '14.4.02 [EG]
    Dim lSheetNumber As Long
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    Set wsCon = Sheets("Connections")
    Set ws = Sheets(sSheetName)
    ws.Activate
    lCBCount = Range("CBCount")
    For Each objTemp In colCB
        lCBCount = lCBCount + 1
        Range("CBCount") = lCBCount
        lStartCol = objTemp.general.StartCol
        lStartRow = objTemp.general.startRow
        lEndCol = objTemp.general.EndCol
        lEndRow = objTemp.general.EndRow

        With ws
            'fixing the width
            While .Cells(lEndRow, lEndCol).Borders(xlEdgeLeft _
                ).LineStyle <> xlNone
                lEndCol = lEndCol - 1
            Wend
            sObjName = objTemp.general.eName & Format(lSheetNumber _
                , "_000") '*'
            x = .Columns(lStartCol).Left
            y = .Rows(lStartRow).Top
            wid = .Range(.Cells(lStartRow, lStartCol), _
                .Cells(lStartRow, lEndCol)).Width
            hi = .Rows(lStartRow).Height
            .Cells(lStartRow, lStartCol).Name = sObjName
            Set objCB = .CheckBoxes.Add(x, y, wid, hi)
        End With        'ws
        sOnAction = "checkBox_change"

        With objCB
            .OnAction = sOnAction
            .ShapeRange.Fill.Solid
            .ShapeRange.Fill.ForeColor.SchemeColor = 9
            .ShapeRange.Fill.Transparency = 1
            .Placement = xlMove
            .PrintObject = True
'            With .Font
'                .Size = objTemp.general.Font.Height
'                .FontStyle = objTemp.general.Font.face
'            End With
        End With
        lTempCol = lCBCount + 1
        With wsCon
            .Cells(ixCheckBox, lTempCol) = sObjName
            .Cells(ixCheckBox + 1, lTempCol) = objTemp.ChBox.cb3D
            .Cells(ixCheckBox + 2, lTempCol) = objTemp.ChBox.LeftText
            .Cells(ixCheckBox + 3, lTempCol) = objTemp.ChBox.cbOff
            .Cells(ixCheckBox + 4, lTempCol) = objTemp.ChBox.cbOn
            .Cells(ixCheckBox + 5, lTempCol) = objTemp.ChBox.cbOther
            .Cells(ixCheckBox + 6, lTempCol) = objTemp.ChBox.cbScale
            .Cells(ixCheckBox + 7, lTempCol) = objTemp.ChBox.cbText
            objCB.Text = .Cells(ixCheckBox + 7, lTempCol)
            .Cells(ixCheckBox + 8, lTempCol).Name = "LC_CB_" & _
                sObjName
'            .Cells(ixCheckBox + 8, lTempCol) = objTemp.General.colvalue
'            .Cells(ixCBLinkedCell, lTempCol) = objTemp.General.colvalue
        End With
        
        With objTemp
            If .general.colValue = .ChBox.cbOn Then
                objCB.Value = True
            Else
                objCB.Value = True  'for initialization
                objCB.Value = False
            End If
        End With    'objTemp
        
        '14/4/02 - Changed LC to range names [EG]
'        If lTempCol > 26 Then
'            If lTempCol Mod 26 <> 0 Then
'                sColumnName = String(1, Int(lTempCol / 26 + 64)) _
'                    & String(1, lTempCol Mod 26 + 64)
'            Else
'                sColumnName = String(1, Int((lTempCol - 1) / 26 _
'                    + 65)) & "Z"
'            End If
'        Else
'            sColumnName = String(1, lTempCol + 64)
'        End If
'        LC = "connections!$" & sColumnName & "$" & ixCheckBox + 8
        lc = "LC_CB_" & sObjName
        ws.Range(sObjName).Font.ColorIndex = xlTransparent
        '===== END [EG] ==========================
        
        With objCB
            .LinkedCell = lc
            .Display3DShading = False
''            If objRSData.Fields(objTemp.General.ename).Value = _
''                objTemp.ChBox.cbText Then
''                .Value = True
''            Else
''                .Value = False
''            End If
        End With    'objCB
        
    Next
GoOut:
    Set wsCon = Nothing
    Set ws = Nothing
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    DrawCBObj = Err.Number
    oLocalLogFile.AddString "DrawCBObj - " & sObjName, Err.Number, _
        Err.Description
    Resume Next
End Function


'Public Function DrawLBObj(sSheetName As String, objRSData As _
'    Recordset, ColLB As Collection, CellArr() As SpecCell) _
'    As Long
Public Function DrawLBObj(sSheetName As String, ColLB As Collection, _
    CellArr() As SpecCell) As Long
    
    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim lRes As Long
    Dim ws As Worksheet
    Dim wsCon As Worksheet
    Dim objDDLB As Object
    Dim x As Double         'DropDown x coor.
    Dim y As Double         'DropDown y coor.
    Dim wid As Double       'DropDown width
    Dim hi As Double        'DropDown height
    Dim lLBCount As Long
'    Dim objRec As Object   'temp obj to hold LB record
    Dim lTempRow As Long
    Dim lTempCol As Long
    Dim lCount As Long
    Dim lULimit As Long
    Dim LFR As String       'a string representing the list fill range
    Dim lc As String        'a string representing the list linked cell
'    Dim sColumnName As String  '14/4/02
    Dim sObjName As String
    Dim sObjValue As String
    Dim lSheetNumber As Long
    Dim bInData As Boolean
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    Set wsCon = Sheets("Connections")
    wsCon.Cells.NumberFormat = "@"
'    Set objAct = New clsActions
'    lLBCount = wsCon.Cells(ixListBox + 4, 2)
    Set ws = Sheets(sSheetName)
    ws.Activate
    lLBCount = Range("LBCount")
    For Each objTemp In ColLB
        lLBCount = lLBCount + 1
        Range("LBCount") = lLBCount
        lStartCol = objTemp.general.StartCol
        lStartRow = objTemp.general.startRow
        lEndCol = objTemp.general.EndCol
        lEndRow = objTemp.general.EndRow
        
        With ws
            
            sObjName = objTemp.general.eName & "_" & _
                Format(lSheetNumber, "000")                  '*'
            .Cells(lStartRow, lStartCol).Name = sObjName
            
            If CellArr(lStartRow, lStartCol).Occupied = True Then
                If UCase(.Cells(lStartRow, lStartCol _
                    )) = "SEE LIST" Then GoTo GoNext
            End If
        
            'fixing the width
            While .Cells(lEndRow, lEndCol).Borders(xlEdgeLeft _
                ).LineStyle <> xlNone
                lEndCol = lEndCol - 1
            Wend
            
            '<-- 24/7 -->
'            If Not IsNull(objRSData.Fields( _
'                objTemp.General.eName)) Then
'                If DrawLBObj <> 0 Then
'                    bInData = False
'                Else
'                    bInData = True
'                End If
'                DrawLBObj = 0
'            Else
                bInData = False
'            End If
            '<-- end -->
            
            sObjName = objTemp.general.eName & "_" & _
                Format(lSheetNumber, "000")                  '*'
            
            x = .Columns(lStartCol).Left
            y = .Rows(lStartRow).Top
            wid = .Range(.Cells(lStartRow, lStartCol), _
                .Cells(lStartRow, lEndCol)).Width
            hi = .Rows(lStartRow).Height
'            .Cells(lStartRow, lStartCol).Name = objTemp.general.ename
''            .Cells(lStartRow, lStartCol).Name = sObjName
            Set objDDLB = .DropDowns.Add(x, y, wid, hi)
            .Range(.Cells(lStartRow, lStartCol), .Cells(lStartRow, lEndCol - 1)).Merge
        End With        'ws
        Dim sOnAction As String
        sOnAction = "dropdown_change"
        With objDDLB
            .OnAction = sOnAction   '"dropdown_change"
'            .OnAction = "objAct.dropdown_change " & "LB_" & objTemp.general.ename
        '    .Placement = xlMove
            .PrintObject = False
        End With        'objDDLB
        
        With wsCon
            lTempCol = lLBCount * 3 + 1
            lTempRow = ixListBox + 3
            .Cells(ixListBox, lTempCol) = sObjName
            .Cells(ixListBox + 2, lTempCol) = "String"
            .Cells(ixListBox + 2, lTempCol + 1) = "Code"
            lULimit = objTemp.DDLB.Values().Count
            For lCount = 1 To lULimit
                .Cells(lTempRow, lTempCol) = objTemp.DDLB.Values( _
                    lCount)
                .Cells(lTempRow, lTempCol + 1) = objTemp.DDLB.Codes( _
                    lCount)
                lTempRow = lTempRow + 1
            Next
            .Cells(ixListBox + 1, lTempCol + 2) = ws.Cells(lStartRow, _
                lStartCol).Address
            .Range(.Cells(ixListBox + 3, lTempCol), .Cells( _
                ixListBox + 2 + lULimit, lTempCol)).Name = _
                "st_LB_" & sObjName
            
            .Range(.Cells(ixListBox + 3, lTempCol + 1), .Cells( _
                ixListBox + 2 + lULimit, lTempCol + 1)).Name = _
                "cd_LB_" & sObjName
            .Cells(ixListBox + 1, lTempCol).Name = "ch_" & _
                sObjName
            '14/4/02 - Changed LFR and LC to range names [EG]
'            If lTempCol > 26 Then
'                If lTempCol Mod 26 <> 0 Then
'                    sColumnName = String(1, Int(lTempCol / 26 + 64)) _
'                        & String(1, lTempCol Mod 26 + 64)
'                Else
'                    sColumnName = String(1, Int((lTempCol - 1) / 26 _
'                        + 65)) & "Z"
'                End If
'            Else
'                sColumnName = String(1, lTempCol + 64)
'            End If
            
'            LFR = "Connections!$" & sColumnName & "$" & _
'                ixListBox + 3 & ":$" & sColumnName & _
'                "$" & ixListBox + 2 + lULimit
'            LC = "Connections!$" & sColumnName & "$" _
'                & ixListBox + 1
            LFR = "st_LB_" & sObjName
            lc = "ch_" & sObjName
            
            '===== END [EG] =================================
            
            With objDDLB
                .ListFillRange = LFR
                .LinkedCell = lc
                .Display3DShading = False
                .PrintObject = False
            End With        'objDDLB
            
            '<-- 24/7 -->
'            If bInData Then
'                If Not IsNull(objRSData.Fields(Left(sObjName, Len( _
'                    sObjName) - 4))) Then
'                    sObjValue = objRSData.Fields(Left(sObjName, Len( _
'                        sObjName) - 4))
'                Else
'                    sObjValue = ""
'                End If
'            Else
                sObjValue = objTemp.general.colValue
'            End If
            '<-- end -->
            '<--- [EG] 150802 --->
            'SetLBChoice replaces the code below
            lRes = SetLBChoice(sObjName, sObjValue, lULimit, _
                lTempCol, wsCon)
'            For lCount = 1 To lULimit
'                If sObjValue = .Cells(ixListBox + 2 + lCount, _
'                    lTempCol) Or sObjValue = .Cells(ixListBox + 2 _
'                    + lCount, lTempCol + 1) Then
'                    .Cells(ixListBox + 1, lTempCol) = lCount
'                    .Cells(ixListBox + 1, lTempCol + 1) = lCount
'                    Exit For
'                End If
'            Next
'            If lCount > lULimit Then    'sObjValue is not in the list
'                .Cells(ixListBox + 2 + lCount, lTempCol) = sObjValue
'                .Cells(ixListBox + 2 + lCount, lTempCol + 1) = "X"
'                .Cells(ixListBox + 1, lTempCol) = lCount
'                .Cells(ixListBox + 1, lTempCol + 1) = lCount
'                .Range(.Cells(ixListBox + 3, lTempCol), .Cells( _
'                    ixListBox + 2 + lCount, lTempCol)).Name = _
'                    "st_LB_" & sObjName
'
'                .Range(.Cells(ixListBox + 3, lTempCol + 1), .Cells( _
'                    ixListBox + 2 + lCount, lTempCol + 1)).Name = _
'                    "cd_LB_" & sObjName
'            End If
            '<--- 150802 --->
            .Cells(ixListBox + 3, lTempCol + 2) = "=IF(" & "ch_" & _
                sObjName & " =0,"" "",INDEX(" & "cd_LB_" _
                & sObjName & "," & lc & "))"
            .Cells(ixListBox + 4, lTempCol + 2) = "=IF(" & "ch_" & _
                sObjName & " =0,"" "",INDEX(" & "st_LB_" _
                & sObjName & "," & lc & "))"
        End With
        With Range(sObjName)
            .Value = wsCon.Cells(ixListBox + 4, lTempCol + 2)
            .Font.Size = objTemp.general.Font.Height
'            objDDLB.Value = .Value
        End With
GoNext:
    
    Next
GoOut:
    Set wsCon = Nothing
    Set ws = Nothing
'    Set objAct = Nothing
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    DrawLBObj = Err.Number
    oLocalLogFile.AddString "DrawLBObj - " & sObjName, Err.Number, _
        Err.Description
    Resume Next
End Function

Private Function SetLBChoice(ByVal sObjName As String, ByVal _
    sObjValue As String, ByVal lULimit As Long, ByVal lTempCol _
    As Long, wsCon As Worksheet) As Long

    Dim lCount As Long
    
    With wsCon
        For lCount = 1 To lULimit
'            If sObjValue = .Cells(ixListBox + 2 + lCount, _
'                lTempCol) Or sObjValue = .Cells(ixListBox + 2 _
'                + lCount, lTempCol + 1) Then
            If sObjValue = .Cells(ixListBox + 2 + lCount, _
                lTempCol) Then
                .Cells(ixListBox + 1, lTempCol) = lCount
                .Cells(ixListBox + 1, lTempCol + 1) = lCount
                Exit For
            End If
        Next
        If lCount > lULimit Then    'sObjValue is not in the list
            If sObjValue = "" Then
                .Cells(ixListBox + 2 + lCount, lTempCol) = " "
            Else
                .Cells(ixListBox + 2 + lCount, lTempCol) = _
                    sObjValue
            End If
            .Cells(ixListBox + 2 + lCount, lTempCol + 1) = "X"
            .Cells(ixListBox + 1, lTempCol) = lCount
            .Cells(ixListBox + 1, lTempCol + 1) = lCount
            .Range(.Cells(ixListBox + 3, lTempCol), .Cells( _
                ixListBox + 2 + lCount, lTempCol)).Name = _
                "st_LB_" & sObjName

            .Range(.Cells(ixListBox + 3, lTempCol + 1), .Cells( _
                ixListBox + 2 + lCount, lTempCol + 1)).Name = _
                "cd_LB_" & sObjName
        End If
    End With
Exit Function

mErr:
    SetLBChoice = Err.Number
    Resume Next
End Function


'Public Function DrawEditObject(sSheetName As String, objRSData As _
'    Recordset, ColEdit As Collection, CellArr() As SpecCell) As Long
Public Function DrawEditObject(sSheetName As String, ColEdit As _
    Collection, CellArr() As SpecCell, Optional dWidthFactor As _
    Double, Optional dHeightFactor As Double) As Long
    
    Dim objTemp As Object
    Dim lStartRow As Long
    Dim lStartCol As Long
    Dim lEndRow As Long
    Dim lEndCol As Long
    Dim udtTempCell() As CellObject
    Dim sText As String
    Dim lRes As Long
    Dim lSheetNumber As Long
    Dim bInData As Boolean
    Dim sObjName As String
    Dim sObjFormat As String
    Dim bUseFormat As Boolean
    Dim colNames As Collection
    Dim lRow As Long
    Dim sTemp As String
    'temporary for accuracy
    Dim vAcc As Variant
    
    On Error GoTo mErr
    lSheetNumber = Right(sSheetName, Len(sSheetName) - lSheetLength)
    Set colNames = New Collection
    lRow = 2
    With Sheets("Calc")
        .Cells(lRow, 1).ListNames
        Do Until IsEmpty(.Cells(lRow, 1))
            colNames.Add .Cells(lRow, 1), CStr(.Cells(lRow, 1))
            lRow = lRow + 1
        Loop
    End With    'Sheets("Calc")
    
    For Each objTemp In ColEdit
'        On Error Resume Next
        If CStr(objTemp.general.isvisible) = "1" Then '29/8/02
            lStartCol = objTemp.general.StartCol
            lStartRow = objTemp.general.startRow
            lEndCol = objTemp.general.EndCol
            lEndRow = objTemp.general.EndRow
            udtTempCell = CellArr(lStartRow, lStartCol).object()
            sObjName = objTemp.general.eName
        
        'add to general names for changing at run time
'        ActiveWorkbook.Names.Add Name:="stam2", RefersTo:= _
'            "=Sheet2!$b$2,Sheet2!$c$4"
        '<------------------------------------------>
        
        '<-- 24/7 -->
'        If Not IsNull(objRSData.Fields(sObjName)) Then
'            If DrawEditObject <> 0 Then
'                bInData = False
'            Else
'                bInData = True
'            End If
'            DrawEditObject = 0
'        Else
                bInData = False
    '        End If
            '<-- end -->
            
            sObjFormat = objTemp.general.cFormat
            If UCase(Left(sObjFormat, 10)) = """[GENERAL]" Then
                sObjFormat = sDefAccuracy
                bUseFormat = True
            ElseIf UCase(Left(sObjFormat, 9)) = "[GENERAL]" Then
                sObjFormat = ""
                bUseFormat = False
            End If
            If CellArr(lStartRow, lStartCol).Occupied = True Then
                Sheets(sSheetName).Cells(lStartRow, lStartCol).Name = _
                    sObjName & "_" & Format(lSheetNumber, "000")                     '*'
    
    '            ActiveWorkbook.Names.Add Name:="stam2", RefersTo:= _
    '                "=Sheet2!$b$2,Sheet2!$c$4"
                If Not ExistsInCollection(colNames, sObjName) Then
                    ActiveWorkbook.Names.Add Name:=sObjName, RefersTo:= _
                        Sheets(sSheetName).Cells(lStartRow, lStartCol).Name
                Else
                    sTemp = Sheets(sSheetName).Cells(lStartRow, lStartCol _
                        ).Name
                    sTemp = Right(sTemp, Len(sTemp) - 1)
                    ActiveWorkbook.Names.Add Name:=sObjName, RefersTo:= _
                        Names(sObjName).Value & "," & sTemp
                End If
            
            '<-- 24/7 -->
'            If bInData Then
'                If Not IsNull(objRSData.Fields(sObjName)) Then
'                    sText = objRSData.Fields(sObjName)
''                    sText = Format(objRSData.Fields(sObjName), _
''                        sObjFormat)
'                Else
'                    sText = ""
'                End If
'            Else
                sText = objTemp.general.colValue
'                sText = Format(objTemp.general.colvalue, sObjFormat)
'            End If
            '<-- end -->
                If bUseFormat Then
                    If Val(sText) = Int(Val(sText)) Then
                        sText = Format(sText, "")
                    Else
                        sText = Format(sText, sObjFormat)
                    End If
                Else
    '                sText = Format(sText, sObjFormat)
                End If
                lRes = UpdateCellArrClm(objTemp, udtTempCell(), False, _
                    sText)
                If lRes = 0 Then
                    CellArr(lStartRow, lStartCol).object() = udtTempCell
                Else
                    'add handle
                End If
                If UBound(udtTempCell) > 2 Then
                    'future: handle that case
                Else
                    Sheets(sSheetName).Cells(lStartRow, lStartCol) = _
                    ConcatenateText(udtTempCell(1), udtTempCell(2))
                End If
            Else
    '        lStartCol = objTemp.General.StartCol
    '        lStartRow = objTemp.General.StartRow
    '        lEndCol = objTemp.General.EndCol
    '        lEndRow = objTemp.General.EndRow
                On Error GoTo mErr
                With Sheets(sSheetName)
    '                .Cells(lStartRow, lStartCol) = objRSData.Fields( _
    '                    objTemp.general.ename)
                    With .Cells(lStartRow, lStartCol)
                        .Name = sObjName & "_" & Format(lSheetNumber, _
                            "000")                           '*'
                        .NumberFormat = "@"
                        .Font.Size = objTemp.general.Font.Height
                        
                        If Not ExistsInCollection(colNames, sObjName) Then
                            ActiveWorkbook.Names.Add Name:=sObjName, _
                                RefersTo:=Sheets(sSheetName).Cells( _
                                lStartRow, lStartCol).Name
                        Else
                            sTemp = Sheets(sSheetName).Cells(lStartRow, _
                                lStartCol).Name
                            sTemp = Right(sTemp, Len(sTemp) - 1)
                            ActiveWorkbook.Names.Add Name:=sObjName, _
                                RefersTo:=Names(sObjName).Value & "," & sTemp
                        End If
                        
                    End With
                    CellArr(lStartRow, lStartCol).Occupied = True
                    udtTempCell = CellArr(lStartRow, lStartCol).object()
                '<-- 24/7 -->
'                If bInData Then
'                    If Not IsNull(objRSData.Fields(sObjName)) Then
'                        sText = objRSData.Fields(sObjName)
'                    Else
'                        sText = ""
''                        sText = objTemp.general.colvalue
'                    End If
'                Else
                    sText = objTemp.general.colValue
'                End If
                '<-- end -->
                
                    If bUseFormat Then
                        If Val(sText) = Int(Val(sText)) Then
                            sText = Format(sText, "")
                        Else
                            sText = Format(sText, sObjFormat)
                        End If
                    Else
    '                    sText = Format(sText, sObjFormat)
                    End If
    
                    lRes = UpdateCellArrClm(objTemp, udtTempCell(), True _
                        , sText)
                    If lRes = 0 Then
                        CellArr(lStartRow, lStartCol).object() = _
                            udtTempCell
                    Else
                        'add handle
                    End If
                    If sObjFormat <> "" Then
                        .Cells(lStartRow, lStartCol).NumberFormat = _
                            sObjFormat
                    End If
                    'changed on 10/8/03 (added if)

                    If objTemp.general.Font.Escape = "" Then
                        .Cells(lStartRow, lStartCol) = CellArr(lStartRow, _
                            lStartCol).object(1).objText
                        .Cells(lStartRow, lStartCol).HorizontalAlignment = _
                            xlLeft
                    ElseIf objTemp.general.Font.Escape = """" & "0" & vbTab & "900" & """" Then
'                            oLocalLogFile.AddString "obj: ", Err.Number, _
                        sObjName & ": " & objTemp.TextString
                        Debug.Print sObjName & ": " & objTemp.general.colValue
                        lRes = AddVerticalText(objTemp.general.x, objTemp.general.y, _
                            objTemp.general.eheight, objTemp.general.ewidth, _
                            sText, objTemp.general.Font.Height, "up")
                    ElseIf objTemp.general.Font.Escape = """" & "0" & vbTab & "2700" & """" Then
                        Debug.Print sObjName & ": " & objTemp.general.colValue
                        lRes = AddVerticalText(objTemp.general.x, objTemp.general.y, _
                            objTemp.general.eheight, objTemp.general.ewidth, _
                            sText, objTemp.general.Font.Height, "down")
                    End If
                     
                    '9/4/03 - merge numeric cells
                    If IsNumeric(sText) Then
                        MergeCells sSheetName, sObjName & "_" & _
                            Format(lSheetNumber, "000")
'                        vAcc = Split(sDefAccuracy, ".")
                        .Cells(lStartRow, lStartCol) = Round(sText, lDefAccuracy)
                        'update in the database
'                        Dim lDataRow As Long
'                        lRes = FindDataAndLocationInDB("database", "", sObjName, lDataRow, _
'                            lCurDataCol, True, False, CStr(.Cells(lStartRow, lStartCol)))
                        
                    End If
                End With
            End If
            
            If LCase(sObjName) = "cmpnt_name" Then
                m_sCmpName = sText
            End If
        End If  '29/8/02
    Next
GoOut:
    Set colNames = Nothing
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    DrawEditObject = Err.Number
    If Err.Number <> 3265 Then
        oLocalLogFile.AddString "DrawEditObject - " & sObjName, _
            Err.Number, Err.Description
    End If
'    GoTo GoOut
    Resume Next
End Function

Public Function UpdateCellArr(objTemp As Object, udtCell() As CellObject, _
    bNew As Boolean) As Long
    
    Dim sObjName As String
    
    On Error GoTo mErr
    sObjName = objTemp.TextName
    If bNew Then
        With objTemp
'            udtCell.Column = .columnnum
'            udtCell.Row = .rownum
            ReDim udtCell(1)
            udtCell(1).objName = .TextName
            udtCell(1).objLeft = .x
            udtCell(1).objText = .TextString
        End With
    Else
        With objTemp
            ReDim Preserve udtCell(UBound(udtCell()) + 1)
            udtCell(UBound(udtCell)).objName = .TextName
            udtCell(UBound(udtCell)).objLeft = .x
            udtCell(UBound(udtCell)).objText = .TextString
        End With
    End If
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    UpdateCellArr = Err.Number
    oLocalLogFile.AddString "UpdateCellArr - " & sObjName, _
        Err.Number, Err.Description
    Resume Next
End Function

Private Function UpdateCellArrClm(objTemp As Object, udtCell() As _
    CellObject, bNew As Boolean, sText As String) As Long
    
    Dim sObjName As String
    
    On Error GoTo mErr
    sObjName = objTemp.general.eName
    If bNew Then
        With objTemp
'            udtCell.Column = .columnnum
'            udtCell.Row = .rownum
            ReDim udtCell(1)
            udtCell(1).objName = .general.eName
            udtCell(1).objLeft = .general.x
            udtCell(1).objText = sText
        End With
    Else
        With objTemp
            ReDim Preserve udtCell(UBound(udtCell()) + 1)
            udtCell(UBound(udtCell)).objName = .general.eName
            udtCell(UBound(udtCell)).objLeft = .general.x
            udtCell(UBound(udtCell)).objText = sText
        End With
    End If
Exit Function

mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    UpdateCellArrClm = Err.Number
    oLocalLogFile.AddString "UpdateCellArrClm - " & sObjName, _
        Err.Number, Err.Description
    Resume Next
End Function

Public Function SetRange(objLine As Object, lStartRow As Long, _
    lStartCol As Long, lEndRow As Long, lEndCol As Long) As Long
    
    Dim sObjName As String
    
    On Error GoTo mErr
    sObjName = objLine.linename
    With objLine
        lStartRow = .startRow
        lStartCol = .StartCol
        lEndRow = .EndRow
        lEndCol = .EndCol
    End With    'objLine
Exit Function
mErr:
    Debug.Print sObjName & " - " & Err.Number & ": " & Err.Description
    SetRange = Err.Number
    oLocalLogFile.AddString "SetRange - " & sObjName, _
        Err.Number, Err.Description
    Resume Next
End Function

Public Function ConcatenateText(obj1 As CellObject, obj2 As _
    CellObject) As String

    On Error Resume Next
    If obj1.objText = "SEE LIST" Or obj2.objText = "SEE LIST" Then
        ConcatenateText = "SEE LIST"
        oLocalLogFile.AddString "ConcatenateText - " & obj1.objName _
            & ", " & obj2.objName, Err.Number, _
            "One of the objects cannot be written"
    Else
        If obj1.objLeft < obj2.objLeft Then
            ConcatenateText = obj1.objText & " " & obj2.objText
        Else
            ConcatenateText = obj2.objText & " " & obj1.objText
        End If
    End If
End Function


Public Function CreateDataCollection(colData As Collection, _
    sSheetName As String) As Long
    
    Dim colRecordset As Collection
    Dim lRowCount As Long
    Dim lColCount As Long
    
    On Error GoTo mErr
    With Sheets(sSheetName)
        lRowCount = 2
        Do Until IsEmpty(.Cells(lRowCount, 1))
            lColCount = 1
            Set colRecordset = New Collection
            Do Until IsEmpty(.Cells(1, lColCount))
                colRecordset.Add .Cells(lRowCount, lColCount), _
                    CStr(lColCount)
                lColCount = lColCount + 1
            Loop
            colData.Add colRecordset, CStr(.Cells(lRowCount, 15))
            Set colRecordset = Nothing
            lRowCount = lRowCount + 1
        Loop
    End With
GoOut:
    Set colRecordset = Nothing
Exit Function

mErr:
    Debug.Print lRowCount & "," & lColCount & " - " & Err.Number & _
        ": " & Err.Description
    CreateDataCollection = Err.Number
    oLocalLogFile.AddString "CreateDataCollection - " & lRowCount _
        & "," & lColCount, Err.Number, Err.Description
    Resume Next
End Function

Public Function GetListBoxValue(sOrigString As String, sOrigCode As _
    String, sRetValue As String) As Long
    
    Dim colValues As Collection
    Dim colCodes As Collection
    Dim lRes As Long
    Dim vTempArr As Variant
    Dim vSecArr As Variant
    Dim lCount As Long
    Dim lLimit As Long
    
    On Error GoTo mErr
    Set colValues = New Collection
    Set colCodes = New Collection
    sRes = Replace(sOrigString, "//", "$$")
    sRes = Replace(sRes, CStr(Chr(8)), "?")
    sRes = Replace(sRes, CStr(Chr(9)), "?")
    sRes = Replace(sRes, CStr(Chr(10)), "?")
    sRes = Replace(sRes, CStr(Chr(13)), "?")
    
    vTempArr = Split(sRes, "/")
    For lCount = 0 To UBound(vTempArr)
'        Debug.Print vTempArr(lCount)
        vTempArr(lCount) = Replace(vTempArr(lCount), "$$", "/")
        vSecArr = Split(vTempArr(lCount), "?")
'        On Error Resume Next
        colValues.Add vSecArr(0), CStr(lCount + 1)
        colCodes.Add vSecArr(1), CStr(lCount + 1)
    Next
    lLimit = colValues.Count
    sRetValue = ""
    For lCount = 1 To lLimit
        If sOrigCode = colCodes(lCount) Then
            sRetValue = colValues(lCount)
            Exit For
        End If
    Next
    If sRetValue = "" Then
        For lCount = 1 To lLimit
            If sOrigCode = colValues(lCount) Then
                sRetValue = colValues(lCount)
                Exit For
            End If
        Next
    End If
    
GoOut:
    Set colValues = Nothing
    Set colCodes = Nothing
    
Exit Function
mErr:
    Debug.Print sOrigString & " - " & Err.Number & ": " & Err.Description
    ConvertToListBox = Err.Number
    objLogFile.AddString "ConvertToListBox - " & sOrigString, Err.Number, _
        Err.Description
    Resume Next
End Function


Public Function MfrModLink(rsMfrTable As Recordset, rsModTable As _
    Recordset) As Long
    
    Dim wsDW As Worksheet
    Dim lMfrModColumn As Long
    Dim lMfrMfrColumn As Long
    Dim lFirstRow As Long
    Dim lLastRow As Long
    Dim lNumOfFields As Long
    Dim lDispCol As Long
    Dim sFilter As String
    Dim sMfrCode As String
    
    On Error GoTo mErr
    Set wsDW = Sheets("DWTables")
    lMfrModColumn = Range("d_dddw_spec_cmpnt_mod__cmpnt_mfr_id").Column
    lMfrMfrColumn = Range("d_dddw_spec_cmpnt_mfr__cmpnt_mfr_id").Column
    lDispCol = Range("d_dddw_spec_cmpnt_mod__cmpnt_mod_name").Column
    lFirstRow = Range("d_dddw_spec_cmpnt_mod__cmpnt_mfr_id").Row
    lNumOfFields = rsModTable.Fields.Count
    
    With wsDW
'        .Range("Tab_d_dddw_spec_cmpnt_mod").Select
'        Selection.Sort Key1:=lMfrModColumn, Order1:=xlAscending, _
'            Header:=xlNo, OrderCustom:=1, MatchCase:=False, _
'            Orientation:=xlTopToBottom
        lLastRow = lFirstRow
        rsMfrTable.Open
        rsModTable.Open
        Do Until IsEmpty(.Cells(lLastRow, lMfrModColumn))
            sFilter = .Cells(lFirstRow, lMfrModColumn)
            rsMfrTable.Filter = "[cmpnt_mfr_id] like '" & sFilter & "'"
            sMfrCode = rsMfrTable.Fields("cmpnt_mfr_id").Value
            rsModTable.Filter = "[cmpnt_mfr_id] like '" & sFilter & "'"
            lLastRow = lFirstRow + rsModTable.RecordCount - 1
            .Range(.Cells(lFirstRow, lDispCol), .Cells(lLastRow, lDispCol) _
                ).Name = "SubT_" & sMfrCode
            lFirstRow = lLastRow + 1
            lLastRow = lLastRow + 1
        Loop
        rsMfrTable.Close
        rsModTable.Close
    End With
    Set wsDW = Nothing
Exit Function

mErr:
    Debug.Print Err.Number & ": " & Err.Description
    MfrModLink = Err.Number
    objLogFile.AddString "MfrModLink", Err.Number, _
        Err.Description
    Resume Next
    
End Function

Private Function ExistsInCollection(ByVal cCollection As Collection, _
    ByVal vKey As Variant) As Boolean
    On Error Resume Next
    Dim vData As Variant
    vData = cCollection(vKey)
    ExistsInCollection = Not IsEmpty(vData)
End Function

Public Function UpdateRanges(ByVal Target As Range, Optional sRangeName As String) As Long
    Dim sRange As String
    Dim lNumOfPages As Long
    Dim lCounter As Long

    On Error Resume Next
    lNumOfPages = Sheets("Database").Range(ixDBNumOfPages).Value
    With Sheets("Calc")
        .Cells(2, 1).ListNames
        lRow = 2
        Do Until IsEmpty(.Cells(lRow, 1))
            If .Cells(lRow, 2) = Target.Name Then
                If IsNumeric(Right(.Cells(lRow, 1).Value, 3)) Then
                    sRange = Left(.Cells(lRow, 1).Value, Len(.Cells(lRow, 1)) _
                        - 4)
                Else
                    sRange = .Cells(lRow, 1).Value
                End If
                For lCounter = 1 To lNumOfPages
                    Application.Range(sRange & Format(lCounter, _
                        "_000")).Value = Target.Value
                    Application.Range(sRange).Value = Target.Value
                    If .Cells(lRow, 1).Value = "spec_note" Then
                        Application.Range("note_note").Value = Target.Value
                    End If
                    If .Cells(lRow, 1).Value = "cmpnt_name" Then
                        Application.Range("tag_number_note").Value = Target.Value
                    End If
                Next
                sRangeName = sRange
                Exit Function
            End If
            lRow = lRow + 1
        Loop
    End With    'Sheets("Calc")

End Function

Public Function UpdateDBAfterChangingRanges(ByVal Target As Range, sRangName As String _
    , lCmpCol As Long) As Long
    
    Dim lNumOfPages As Long
    Dim lCounter As Long
'    Dim lColNum As Long
    Dim oDataSheet As Worksheet
    Dim lRow As Long

    On Error Resume Next
    Set oDataSheet = Sheets("Database")
    With oDataSheet
        lNumOfPages = .Range(ixDBNumOfPages).Value
'        lColNum = 3
'        Do Until .Cells(10, lColNum) = Range("cmpnt_name_001")
'            lColNum = lColNum + 1
'        Loop
        For lCounter = 1 To lNumOfPages
            lRow = Application.Range("DB_" & sRangName & Format(lCounter, _
                "_000")).Row
            .Cells(lRow, lCmpCol) = Target.Value
        Next
    End With    'oDataSheet

End Function


'=============================================================
Public Function ShowRecord(lCmpCol As Long, sDataSheetName As _
    String) As Long
'Show a selected record given by lCmpCol from selection subs (in this
'module)
'lCmpCol is the column number of the selected item in sheet "database"
    Dim lCmpRow As Long       'row number index in sheet "database"
    Dim lFirstRow As Long
    Dim lLastRow As Long
    Dim lNumOfPages As Long
'    Dim lSheetCounter As Long
    Dim lRowIndex As Long
    Dim sFieldName As String
    Dim wsData As Worksheet
    Dim wsLayout As Worksheet
    Dim lRes As Long
    
    With Sheets("database")
        lFirstRow = ixLastGenDataRow + 1
        lLastRow = .Range(ixDBLastDataRow).Value
        lNumOfPages = .Range(ixDBNumOfPages).Value
    End With    'Sheets("database")

    Set wsData = Sheets(sDataSheetName)
    With wsData
        lCmpRow = 1
        On Error Resume Next
        '**** inserts the data to the cells in sheet "template" ****
'        Do Until IsEmpty(.Cells(lCmpRow, 1)) = True
        For lRowIndex = lFirstRow To lLastRow
            Application.Range(.Cells(lRowIndex, 1).Value) = _
                .Cells(lRowIndex, lCmpCol).Text
'            lCmpRow = lCmpRow + 1
        Next
'        Loop

        Application.Range("tag_number_note") = Application.Range("cmpnt_name_001")
        Application.Range("note_note") = Application.Range("spec_note")
    '    '**** updates the commands items ****
        UpdateLbAfterChangingRecord
        UpdateRbAfterChangingRecord lCmpCol
        UpdateCbAfterChangingRecord lCmpCol
        UpdateDWAfterChangingRecord
        On Error Resume Next
        lRes = RetrieveSeeListFromDB(Sheets("Database").Cells(10, lCmpCol), "Multi-Tag List")
        
    '    update_lb_data cmpRow       '(in this module)
    '    update_rb_data cmpRow       '(in this module)
    '    update_cb_data cmpRow       '(in this module)
    '    dropdown_change             '(in module "column_obj")
    '    radioButton_change          '(in module "column_obj")
    '    checkbox_change             '(in module "column_obj")
    '    var_connections cmpRow      '(in module "settings")
    '    '**** end of updates ****
    End With    'wsData
End Function

'Sub update_lb_data(cmpRow As Long)
''Updates the list box data in sheet "connections" according to the
''data in sheet "data base"
''cmpRow is the item row number in sheet "data base"
'
'Dim iConn As Long        'column index in sheet "connections"
'Dim jConn As Long        'row index in sheet "connections"
'Dim temp As String          'the data in sheet "data base"
'Dim lbCount As Long      'the number of list boxes in this sheet
'
''**** gets the number of list boxes from sheet "calc" ****
'lbCount = Sheets("calc").Cells(lbC, 2)
'With Sheets("connections")
'    iConn = 1
'    Do Until iConn > lbCount * 3
'        temp = Sheets("data base").Cells(cmpRow, _
'            .Cells(startRow + 2, iConn + 2))
'        If .Cells(startRow + 2 + .Cells(startRow + 1, iConn), _
'            iConn + 1) <> temp Then
'            jConn = startRow + 3
'            Do Until IsEmpty(.Cells(jConn, iConn + 1)) = True
'                If .Cells(jConn, iConn + 1) = temp Or _
'                    .Cells(jConn, iConn) = temp Then
'                    .Cells(startRow + 1, iConn) = jConn - startRow - 2
'                    Exit Do
'                End If
'                jConn = jConn + 1
'            Loop
'        End If
'        iConn = iConn + 3
'    Loop
'End With
'End Sub

Sub UpdateLbAfterChangingRecord()

    Dim wsCon As Worksheet
    Dim lLBCount As Long    'the number of list boxes
    Dim lCount As Long
    Dim lTempCol As Long    'first column of each LB batch
    Dim sObjName As String
    Dim sObjValue As String
    Dim lRes As Long
    Dim lULimit As Long
    
    lLBCount = Application.Range("LBCount").Value
    Set wsCon = Sheets("Connections")
    With wsCon
        For lCount = 1 To lLBCount
            lTempCol = lCount * 3 + 1
            sObjName = .Cells(ixListBox, lTempCol).Value
            sObjValue = Application.Range(sObjName).Value
            lULimit = .Range("cd_LB_" & sObjName).Rows.Count
            lRes = SetLBChoice(sObjName, sObjValue, lULimit, _
                lTempCol, wsCon)
        Next
    End With    'wsCon
End Sub

Sub UpdateDBAfterChangingLB()

End Sub

Sub UpdateRbAfterChangingRecord(lCurCol As Long)

    Dim wsCon As Worksheet
    Dim lRBCount As Long    'the number of radio buttons
    Dim lCount As Long
    Dim lTempCol As Long    'first column of each RB batch
    Dim sObjName As String
    Dim sObjValue As String
    Dim lRes As Long
    Dim lULimit As Long
    Dim lCurRow As Long
    
    lRBCount = Application.Range("RBCount").Value
    Set wsCon = Sheets("Connections")
    With wsCon
        For lCount = 1 To lRBCount
            lTempCol = lCount * 3 + 1
            sObjName = .Cells(ixRadioButton, lTempCol).Value
'            sObjValue = Application.Range(sObjName).Value
            lRes = FindDataAndLocationInDB("Database", "", _
                sObjName, lCurRow, lCurCol, True, False, sObjValue)
            
            lULimit = .Range("cd_RB_" & sObjName).Rows.Count
            lRes = SetRBChoice(sObjName, sObjValue, lULimit, _
                lTempCol, wsCon)
            
        Next
    End With    'wsCon
End Sub

Private Function SetRBChoice(ByVal sObjName As String, ByVal _
    sObjValue As String, ByVal lULimit As Long, ByVal lTempCol _
    As Long, wsCon As Worksheet) As Long

    Dim lCount As Long
    
    With wsCon
        For lCount = 1 To lULimit
            If sObjValue = .Cells(ixRadioButton + 2 + lCount, _
                lTempCol) Or sObjValue = .Cells(ixRadioButton + 2 _
                + lCount, lTempCol + 1) Then
                .Cells(ixRadioButton + 1, lTempCol) = lCount
                .Cells(ixRadioButton + 1, lTempCol + 1) = lCount
                Exit For
            Else
                .Cells(ixRadioButton + 1, lTempCol) = 0
                .Cells(ixRadioButton + 1, lTempCol + 1) = 0
            End If
        Next
    End With
Exit Function

mErr:
    SetRBChoice = Err.Number
    Resume Next
End Function

Private Function SetRBChoiceFromDB() As Long

End Function

Sub UpdateDBAfterChangingRB()
    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsTemplate As Worksheet
    Dim wsCon As Worksheet
    Dim lCount As Long
    Dim sObjName As String
    Dim lTempCol As Long
    Dim sCurSheet As String
    Dim lRes As Long
    Dim sCmpntName As String
    Dim sObjValue As String
    
    Set wsDB = Sheets("Database")
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsCon = Sheets("Connections")
    
    On Error Resume Next
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
    sCmpntName = wsTemplate.Range("cmpnt_name" & sCurSheet)
    '<-- replaced by finddataandloc... -->
'    lCurCol = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
'        ), wsDB.Range("A1"), , 1, xlByColumns, xlPrevious).Column
    '<-------------------------------->
    '--------------------
    lCount = 1
    wsTemplate.Activate
    While Not IsEmpty(wsCon.Cells(ixRadioButton, lCount * 3 + 1))
        With wsCon
            lTempCol = lCount * 3 + 1
'            If .Cells(ixRadioButton + 1, lTempCol) <> .Cells( _
'                ixRadioButton + 1, lTempCol + 1) Then
            
                sObjName = .Cells(ixRadioButton, lCount * 3 + 1)
                '<-- replaced by finddataandloc... -->
'                lCurRow = wsDB.Cells.Find(sObjName, , wsDB.Range( _
'                    "A1"), , 1, xlByRows, xlPrevious).Row
                lRes = FindDataAndLocationInDB("Database", _
                    sCmpntName, sObjName, lCurRow, lCurCol, True, _
                    True)
                '<-------------------------------->
                wsDB.Cells(lCurRow, lCurCol) = .Cells(ixRadioButton _
                    + 3, (lCount + 1) * 3)
                '---------------------------------------
'                .Cells(ixRadioButton + 1, lTempCol + 1) = .Cells( _
'                    ixRadioButton + 1, lTempCol)
'            End If
            lCount = lCount + 1
        End With
    Wend
End Sub

Private Function FindDataAndLocationInDB(sDBSheetName As String, _
    sCmpName As String, sObjName As String, lCurRow As Long, _
    lCurCol As Long, bFindRow As Boolean, bFindCol As Boolean, _
    Optional sObjValue As String = "", Optional bFindValue As Boolean = True) As Long
    
    Dim wsDB As Worksheet
    
    Set wsDB = Sheets(sDBSheetName)
    With wsDB
        If sCmpName <> "" Then
            If bFindCol Then
                lCurCol = .Cells.Find(sCmpName, .Range("A1"), , 1, _
                    xlByColumns, xlPrevious).Column
            End If
            
            If bFindRow Then
                lCurRow = .Cells.Find(sObjName, .Range("A1"), , 1, _
                    xlByRows, xlPrevious).Row
            End If
        End If
        If bFindValue Then
            sObjValue = .Cells(lCurRow, lCurCol).Value
        End If
    End With    'wsDB
    Set wsDB = Nothing
End Function

Private Function UpdateDataInDBLocation(sDBSheetName As String, _
    sCmpName As String, sObjName As String, sObjValue As String, _
    lCurRow As Long, lCurCol As Long) As Long
   
    Sheets(sDBSheetName).Cells(lCurRow, lCurCol).Value = sObjValue

End Function


Sub UpdateCbAfterChangingRecord(lCurCol As Long)
    Dim wsCon As Worksheet
    Dim lCBCount As Long    'the number of check boxes
    Dim lCount As Long
    Dim sObjName As String
    Dim sObjValue As String
    Dim lRes As Long
    Dim lCurRow As Long
    
    lCBCount = Application.Range("CBCount").Value
    Set wsCon = Sheets("Connections")
    With wsCon
        For lCount = 2 To lCBCount + 1
            sObjName = .Cells(ixCheckBox, lCount).Value
'            sObjValue = .Cells(ixCheckBox + 4, lCount).Value 'true
            lRes = FindDataAndLocationInDB("Database", "", _
                sObjName, lCurRow, lCurCol, True, False, sObjValue)
            If sObjValue = .Cells(ixCheckBox + 4, lCount).Value _
                Then 'true value
                .Cells(ixCBLinkedCell, lCount).Value = 1
            Else
                .Cells(ixCBLinkedCell, lCount).Value = 0
            End If
        Next
    End With    'wsCon
End Sub

Sub UpdateDBAfterChangingCB()
    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsCon As Worksheet
    Dim lCount As Long
    Dim sObjName As String
    Dim lTempCol As Long
    Dim sCurSheet As String
    Dim lRes As Long
    Dim sCmpntName As String
    Dim sObjValue As String

    Set wsDB = Sheets("Database")
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsCon = Sheets("Connections")
    
    On Error Resume Next
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
    sCmpntName = wsTemplate.Range("cmpnt_name" & sCurSheet)
    '--------------------
    lCount = 2
    wsTemplate.Activate
    While Not IsEmpty(wsCon.Cells(ixCheckBox, lCount))
        With wsCon
            sObjName = .Cells(ixCheckBox, lCount)
            
            lRes = FindDataAndLocationInDB("Database", _
                sCmpntName, sObjName, lCurRow, lCurCol, True, True)
            If .Cells(ixCBLinkedCell, lCount).Value = True Then
                sObjValue = .Cells(ixCheckBox + 4, lCount).Value
            Else
                sObjValue = .Cells(ixCheckBox + 3, lCount).Value
            End If
            
            wsDB.Cells(lCurRow, lCurCol) = sObjValue
                '---------------------------------------
            lCount = lCount + 1
        End With
    Wend

    Set wsDB = Nothing
    Set wsTemplate = Nothing
    Set wsCon = Nothing

End Sub

Public Function RefreshRecord(sTagNumber As String, Optional lRetCmpCol _
    As Long) As Long

    Dim lCmpCol As Long   'the column number of the item in "database"
    Dim sDataSheetName As String
    Dim wsCalc As Worksheet
    Dim lTagRow As Long
    Dim lRes As Long
    
    Set wsCalc = Sheets("Calc")
    lTagRow = 1
    With wsCalc
        Do Until Trim(.Cells(lTagRow, .[TagNumberCol].Column)) _
            = Trim(sTagNumber)
            lTagRow = lTagRow + 1
        Loop

        lCmpCol = .Cells(lTagRow, .[TagColumn].Column).Value
        sDataSheetName = .Cells(lTagRow, .[TagDataSheet].Column _
            ).Value
        On Error GoTo 0
    End With    'wsCalc
    bDeactivateChange = True
    lRes = ShowRecord(lCmpCol, sDataSheetName)
    bDeactivateChange = False
    lRetCmpCol = lCmpCol
    Set wsCalc = Nothing
End Function

Private Function UpdateDWAfterChangingRecord()
    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsTemplate As Worksheet
    Dim wsTab As Worksheet
    Dim sObjName As String
    Dim lLastCol As Long
    Dim sCurSheet As String
    Dim sObjValue As String
    Dim lNumOfPages As Long
    Dim lCounter As Long
    
    Set wsDB = Sheets("Database")
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsTab = Sheets("DWTables")
    On Error Resume Next
    
    lNumOfPages = wsDB.Range(ixDBNumOfPages)
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
    lCurCol = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
        ), wsDB.Range("A1"), , , xlByColumns, xlPrevious).Column
        
    lCurRow = ixLastGenDataRow + 1
    With wsDB
        Do Until IsEmpty(.Cells(lCurRow, 1))
            If LCase(.Cells(lCurRow, 2)) = "dddw" Then
                sObjName = .Cells(lCurRow, 1).Value
                sObjValue = .Cells(lCurRow, lCurCol)
                Range(sObjName) = sObjValue
                wsTemplate.Activate
                With wsTab
                    For lCounter = 1 To lNumOfPages
                        sObjName = Left(sObjName, Len(sObjName) - 3) & Format( _
                            lCounter, "000")
                        lLastCol = Application.WorksheetFunction.Match(sObjName, _
                            .Rows(1), 0)
                        .Cells(ixDWSelected, lLastCol) = Application.WorksheetFunction.Match( _
                                sObjValue, Range(.Cells(ixDWShownColumn, lLastCol)), 0)
                    Next
                End With
            End If
            lCurRow = lCurRow + 1
        Loop
    End With
End Function

Public Function AddVerticalText(lX As Long, lY As Long, dHeight As Double, dWidth As _
    Double, sText As String, vSize As Variant, sOrientation As String) As Long
    
    Dim dNewX As Double
    Dim dNewY As Double
    Dim dNewHeight As Double
    Dim dNewWidth As Double
    Dim dTempX As Double
    Dim dTempY As Double
    Dim oTextBox As Object
    
    On Error GoTo mErr
'shlomi
    dTempX = (Int((lX + 16) * 7 / 32) - 3)
    dTempY = (Int((lY + 2) / 4))
    dNewX = dTempX * 0.75
    dNewY = dTempY * 0.75
    
    
    dNewWidth = 0.75 * Int((dWidth + 16) * 7 / 32) - 3 ' dWidth / 7.5  '/ dWidthFactor
    dNewHeight = 0.75 * Int((dHeight + 2) / 4)  ' dHeight / 3.5 '* dHeightFactor
    dNewY = dNewY - dNewWidth / 2
    If sOrientation = "up" Then
        dNewX = dNewX + dNewWidth / 2
    ElseIf sOrientation = "down" Then
        dNewX = dNewX + dNewWidth / 2 - dNewHeight
    End If
    
    
    ActiveSheet.Shapes.AddShape(msoShapeRectangle, dNewX, dNewY, _
        dNewHeight, dNewWidth).Select
    Debug.Print "x: " & dNewX & ",  y: " & dNewY & ",  wid: " & dNewWidth & ", hi: " & dNewHeight
    With Selection
        With .ShapeRange
            With .Fill
                .Visible = msoFalse
'                .Solid
'                .ForeColor.SchemeColor = 65
'                .Transparency = 0#
            End With    '.Fill
            .Line.Visible = msoFalse
'           .IncrementRotation -90#
        End With    'ShapeRange
        
        .Characters.Text = sText
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .ReadingOrder = xlContext
        If sOrientation = "up" Then
            .Orientation = xlUpward
        ElseIf sOrientation = "down" Then
            .Orientation = xlDownward
        End If
        .AutoSize = True
        .Characters.Font.Size = vSize

        .ShapeRange.TextFrame.MarginLeft = 0#
        .ShapeRange.TextFrame.MarginRight = 0#
        .ShapeRange.TextFrame.MarginTop = 0#
        .ShapeRange.TextFrame.MarginBottom = 0#
        .ShapeRange.IncrementLeft -2.5
        .ShapeRange.IncrementTop -3
    End With    'Selection
Exit Function
mErr:
    Debug.Print Err.Number & ": " & Err.Description
    AddVerticalText = Err.Number
    objLogFile.AddString "AddVerticalText", Err.Number, _
        Err.Description
    Resume Next
End Function

Public Function ConvertCodeToValue(sSheetName As String, lCurCol As Long, _
    lCurRow As Long, objTemp As Object) As Long

    Dim lDWDisplayCol As Long
    Dim sDWDisplayColName As String
    Dim sObjValue As String
    Dim lULimit As Long
    Dim lCount As Long

    sObjValue = Sheets(sSheetName).Cells(lCurRow, lCurCol)
    If IsNumeric(sObjValue) Then
        sDWDisplayColName = objTemp.dddw.DisplayColumn
        lDWDisplayCol = Range("hd_" & objTemp.dddw.dwname _
            ).Find(sDWDisplayColName).Column
        Set wsData = Sheets("DWTables")
        lULimit = Range(objTemp.dddw.dwname & "__" & _
            sDWDisplayColName).Count
        For lCount = 1 To lULimit
            If Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                lCount, Range(objTemp.dddw.dwname & "__" & _
                objTemp.dddw.DisplayColumn).Column)) Or _
                Trim(sObjValue) = Trim(wsData.Cells(ixDDDW + _
                lCount, Range(objTemp.dddw.dwname & "__" & _
                objTemp.dddw.DataColumn).Column)) Then
            
                sObjValue = wsData.Cells(ixDDDW + _
                    lCount, Range(objTemp.dddw.dwname _
                    & "__" & objTemp.dddw.DisplayColumn _
                    ).Column)
'                                objTemp.general.colValue = sObjValue
                
'                lRes = FindDataAndLocationInDB("Database", m_sCmpName, _
'                    sName, lCurRow, lCurCol, True, True, sObjValue, False)
                Sheets("Database").Cells(lCurRow, lCurCol).Value = sObjValue
                Exit For
            End If
        Next
        
    End If

End Function

Public Function InserSeeListToDB(sTagNumber As String, sSourceSheetName As String _
    , lFirstRow As Long, lFirstCol As Long, lLastRow As Long, lLastCol As Long) As Long
    
    Dim oDatabase As Worksheet
    Dim oSourceSheet As Worksheet
    Dim lCount As Long
'    Dim lCountField As Long
    Dim lCleanRow As Long
'    Dim lFirstRow As Long
'    Dim lLastRow As Long
'    Dim rTemp As Range
    Dim lNumOfRecords As Long
    Dim lNumOfFields As Long
    
    On Error GoTo mErr

    Set oSourceSheet = Sheets(sSourceSheetName)
    Set oDatabase = Sheets("SLDatabase")
    With oSourceSheet
        .Activate
        .Range(.Cells(lFirstRow, lFirstCol), .Cells(lLastRow, lLastCol)).Copy
    End With
    lNumOfFields = lLastCol - lFirstCol + 1
    lNumOfRecords = lLastRow - lFirstRow
    With oDatabase
        .Activate
        On Error Resume Next
        lCleanRow = .Cells.Find("*", .Range("A1"), , , xlByRows, xlPrevious).Row
        On Error GoTo mErr
        For lCount = 1 To lCleanRow
            If .Cells(lCount, 1) = "*" Then
                If .Cells(lCount, 2) = sTagNumber Then
                    Exit Function
                End If
            End If
        Next
        .Cells(lCleanRow + 2, 1).Select
        .Paste
        .Cells(lCleanRow + 1, 1) = "*"
        With .Cells(lCleanRow + 1, 2)
            .Value = sTagNumber
            .AddComment
            .Comment.Visible = False
            .Comment.Text Text:="Tag Number"
        End With
        With .Cells(lCleanRow + 1, 3)
            .Value = lNumOfFields
            .AddComment
            .Comment.Visible = False
            .Comment.Text Text:="Number of Fields"
        End With
        With .Cells(lCleanRow + 1, 4)
            .Value = lNumOfRecords
            .AddComment
            .Comment.Visible = False
            .Comment.Text Text:="Number of Records"
        End With
        
    End With    'oDataSheet
Exit Function

mErr:
    Debug.Print "Error in InserSeeListToDB"
    Debug.Print lCountField & " - " & Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "InserSeeListToDB - " & lCountField, Err.Number, _
        Err.Description

    InserSeeListToDB = Err.Number

End Function

Public Function RetrieveSeeListFromDB(sTagNumber As String, sSheetName As String) As Long
    Dim lCount As Long
    Dim oSLData As Worksheet
    Dim oTarget As Worksheet
    Dim lCleanRow As Long
    Dim lNumOfFields As Long
    Dim lNumOfRecords As Long
    Dim bFound As Boolean
    
    Set oSLData = Sheets("SLDatabase")
    Set oTarget = Sheets(sSheetName)
    oTarget.Cells.ClearContents
    With oSLData
        .Activate
        On Error Resume Next
        lCleanRow = .Cells.Find("*", .Range("A1"), , , xlByRows, xlPrevious).Row
        On Error GoTo mErr
        For lCount = 1 To lCleanRow
            If .Cells(lCount, 1) = "*" Then
                If .Cells(lCount, 2) = sTagNumber Then
                    lNumOfFields = .Cells(lCount, 3)
                    lNumOfRecords = .Cells(lCount, 4)
                    .Range(.Cells(lCount + 1, 1), .Cells(lCount + lNumOfRecords + 1, _
                        lNumOfFields)).Copy
                    bFound = True
                    Exit For
                End If
            End If
        Next
        If bFound Then
            With oTarget
                .Activate
                .Paste .Range("a1")
                .Range(.Columns(1), .Columns(lNumOfFields)).EntireColumn.AutoFit
                .Range(.Columns(1), .Columns(lNumOfFields)).Select
                Selection.EntireColumn.Hidden = False
                .Range("a1").Select
            End With    'oTarget
        End If
    End With    'oSLData
    Set oSLData = Nothing
Exit Function

mErr:
    Debug.Print "Error in RetrieveSeeListFromDB"
    Debug.Print Err.Number & ": " & Err.Description
    oLocalLogFile.AddString "RetrieveSeeListFromDB - " & Err.Number, _
        Err.Description

    RetrieveSeeListFromDB = Err.Number
End Function



Attribute VB_Name = "mdlGlobal"
Global oLocalLogFile As Object
Global lHiddenDataCol As Long
Global lHiddenDataRow As Long
Global sNotes As String
Global sDefAccuracy As String
Global lDefAccuracy As Long     'num of digits after dec. point.
Global lMaxRows As Long
Global lMaxCols As Long
Global bBusy As Boolean
Global bDeactivateChange As Boolean     'freeze worksheet_change
Global lCurDataCol As Long
Dim bOk As Boolean

Public rsTempData As Recordset
'Global g_func As clsFunctions

Type CellObject
    objName As String
    objLeft As Long
    objText As String
End Type

Type SpecCell
    Column As Integer
    Row As Integer
    LeftBorder As Boolean
    TopBorder As Boolean
    Occupied As Boolean
    object() As CellObject
End Type

Const ixDWName As Long = 1
Const ixDWSelected As Long = 2
Const ixDWPrevious As Long = 3
Const ixDWValue As Long = 4
Const ixDWUOM As Long = 7
Const ixDWStartCol As Long = 1

Const lSheetLength As Long = 5

Public Sub dropdown_change()
'g_func.RaiseCellChanged
    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsTemplate As Worksheet
    Dim wsCon As Worksheet
    Dim wsCalc As Worksheet
    Dim lCount As Long
    Dim sObjName As String
    Dim lTempCol As Long
    Dim sCurSheet As String
    Dim sTagNumber As String
    Dim lDataCol As Long
    
    
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsCon = Sheets("Connections")
    Set wsCalc = Sheets("Calc")
    
    On Error Resume Next
    
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
    sTagNumber = wsTemplate.Range("cmpnt_name" & sCurSheet).Value
    With wsCalc
        lCurRow = .Cells.Find(sTagNumber, .Range("A1"), _
            , , xlByRows, xlPrevious).Row
        lDataCol = .Cells(lCurRow, .[TagColumn].Column).Value
'        Set wsDB = Sheets("Database")
        Set wsDB = Sheets(.Cells(lCurRow, .[TagDataSheet].Column _
            ).Value)
    End With
    lCount = 1
    wsTemplate.Activate
    While Not IsEmpty(wsCon.Cells(ixListBox, lCount * 3 + 1))
        With wsCon
            lTempCol = lCount * 3 + 1
            If .Cells(ixListBox + 1, lTempCol) <> .Cells(ixListBox _
                + 1, lTempCol + 1) Then
            
                sObjName = .Cells(ixListBox, lCount * 3 + 1)
        '        ActiveSheet.DropDowns(lCount).Text = wsTemplate.Range( _
                    sObjName)
''                lCurCol = wsDB.Cells.Find(Left(sObjName, Len(sObjName) - 4 _
''                    ), wsDB.Range("A1"), , , xlByColumns, xlPrevious _
''                    ).Column
'                lCurCol = wsDB.Cells.Find(sObjName, wsDB.Range("A1"), , , _
'                    xlByColumns, xlPrevious).Column
''                wsDB.Cells(lCurRow, lCurCol) = .Cells(ixListBox + 3, _
''                    (lCount + 1) * 3)
                wsDB.Cells(wsDB.Range("db_" & sObjName).Row, _
                    lDataCol) = .Cells(ixListBox + 3, (lCount + 1 _
                    ) * 3)
                    '
                wsTemplate.Range(sObjName) = .Cells(ixListBox + 4, _
                    (lCount + 1) * 3)
                    '
                .Cells(ixListBox + 1, lTempCol + 1) = .Cells( _
                    ixListBox + 1, lTempCol)
            End If
            lCount = lCount + 1
        End With
    Wend
    Set wsCalc = Nothing
    Set wsTemplate = Nothing
    Set wsCon = Nothing
    Set wsDB = Nothing
End Sub


Sub checkbox_change()
'Updates the data due to checkbox change
    Dim objFunc As clsFunctions
    Set objFunc = New clsFunctions
    objFunc.UpdateDBAfterChangingCB
    Set objFunc = Nothing
End Sub

Sub radioButton_change()
'Activates the changes due to radio buttons changes

    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsTemplate As Worksheet
    Dim wsCon As Worksheet
    Dim lCount As Long
    Dim sObjName As String
    Dim lTempCol As Long
    Dim sCurSheet As String
    Dim lRes As Long
    Dim sCmpntName As String
    Dim objFunc As clsFunctions
    
    Set wsDB = Sheets("Database")
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsCon = Sheets("Connections")
    Set objFunc = New clsFunctions
    
    On Error Resume Next
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
    sCmpntName = wsTemplate.Range("cmpnt_name" & sCurSheet)
    '22/8/02
'    lCurRow = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
'        ), wsDB.Range("A1"), , , xlByRows, xlPrevious).Row
''    lCurCol = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
''        ), wsDB.Range("A1"), , 1, xlByColumns, xlPrevious).Column
    '--------------------
    lCount = 1
    wsTemplate.Activate
    While Not IsEmpty(wsCon.Cells(ixRadioButton, lCount * 3 + 1))
        With wsCon
            lTempCol = lCount * 3 + 1
            If .Cells(ixRadioButton + 1, lTempCol) <> .Cells( _
                ixRadioButton + 1, lTempCol + 1) Then
            
                sObjName = .Cells(ixRadioButton, lCount * 3 + 1)
        '        ActiveSheet.DropDowns(lCount).Text = wsTemplate.Range( _
                    sObjName)
                '22/08/02
'                lCurCol = wsDB.Cells.Find(Left(sObjName, Len(sObjName) - 4 _
'                    ), wsDB.Range("A1"), , , xlByColumns, xlPrevious _
'                    ).Column
''                lCurRow = wsDB.Cells.Find(sObjName, , wsDB.Range( _
''                    "A1"), , 1, xlByRows, xlPrevious).Row
                '---------------------------------------
'                <-- to change in db only when saving updates -->
                objFunc.UpdateDBAfterChangingRB
'                wsDB.Cells(lCurRow, lCurCol) = .Cells(ixRadioButton _
'                    + 3, (lCount + 1) * 3)
                '<---------------------------------------------->
                
'                wsTemplate.Range(sObjName) = .Cells(ixRadioButton + 4, _
'                    (lCount + 1) * 3)
                .Cells(ixRadioButton + 1, lTempCol + 1) = .Cells( _
                    ixRadioButton + 1, lTempCol)
            End If
            lCount = lCount + 1
        End With
    Wend
End Sub

Public Sub DWChange()
'g_func.RaiseCellChanged
    Dim lCurRow As Long
    Dim lCurCol As Long
    Dim wsDB As Worksheet
    Dim wsTemplate As Worksheet
    Dim wsTab As Worksheet
    Dim lCount As Long
    Dim sObjName As String
    Dim lTempCol As Long
    Dim lLastCol As Long
    Dim sCurSheet As String
    Dim sMfrCode As String
    
    Set wsDB = Sheets("Database")
    Set wsTemplate = ActiveSheet ' Sheets("Page 1")
    Set wsTab = Sheets("DWTables")
    On Error Resume Next
    
    sCurSheet = Format(Right(wsTemplate.Name, Len(wsTemplate.Name) _
        - lSheetLength), "_000")
'    lCurRow = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
'        ), wsDB.Range("A1"), , , xlByRows, xlPrevious).Row 'changed db format
    lCurCol = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name" & sCurSheet _
        ), wsDB.Range("A1"), , , xlByColumns, xlPrevious).Column
    
'    lCurRow = wsDB.Cells.Find(wsTemplate.Range("cmpnt_name"), _
'        wsDB.Range("A1"), , , xlByRows, xlPrevious).Row
    
    lCount = 2
    wsTemplate.Activate
    lLastCol = wsTab.Cells.Find("*", wsTab.Range("A1"), , , xlByColumns, _
        xlPrevious).Column
        '''
        
    While lCount <= lLastCol
        With wsTab
        
'            lTempCol = lCount + 1
            If .Cells(ixDWSelected, lCount) <> .Cells(ixDWPrevious _
                , lCount) Then
            
                sObjName = .Cells(ixDWName, lCount)
        '        ActiveSheet.DropDowns(lCount).Text = wsTemplate.Range( _
                    sObjName)
                If sObjName <> "" Then
                    lCurCol = wsDB.Cells.Find(Left(sObjName, Len(sObjName) - 4 _
                        ), wsDB.Range("A1"), , , xlByColumns, xlPrevious _
                        ).Column
'                    lCurCol = wsDB.Cells.Find(sObjName, wsDB.Range("A1"), , , _
'                        xlByColumns, xlPrevious).Column
                    wsDB.Cells(lCurRow, lCurCol) = .Cells(ixDWValue, lCount)
                    wsTemplate.Range(sObjName) = .Cells(ixDWValue, _
                        lCount)
                    .Cells(ixDWPrevious, lCount) = .Cells(ixDWSelected, _
                        lCount)
                        ' ===  co by EG on 13/7/03 ===
''                    'change the model dd
''                    If Left(sObjName, Len(sObjName) - 4) = "cmpnt_mfr_id" Then
''                        sMfrCode = .Cells(ixDWValue + 1, lCount)
''                        wsTemplate.DropDowns("dd_cmpnt_mod_id" & _
''                            sCurSheet).ListFillRange = "SubT_" & _
''                            sMfrCode
''                    End If
                        '==  end of co ===
                    '-------------------
                End If
            End If
            lCount = lCount + 1
        End With
    Wend
End Sub

Sub ShowSelectedRecord()
'Shows a selected record listed in the list box
    Dim lCmpCol As Long   'the column number of the item in "database"
    Dim oFunc As clsFunctions
    Dim sDataSheetName As String
    Dim lStartCol As Long
    Dim lEndCol As Long
    Dim rRange As Range
    Dim lLastRow As Long
    
    Set oFunc = New clsFunctions
    'update_cmpnt_list
    With Sheets("Calc")
        lStartCol = .[TagNumberCol].Column
        lEndCol = .[TagColumn].Column
        lLastRow = .[NumOfTags]
        Set rRange = .Range(.Columns(lStartCol), .Columns(lEndCol))
        rRange.Sort Key1:=.Columns(lStartCol), Order1:=xlAscending _
            , Header:=xlNo, OrderCustom:=1, MatchCase:=False, _
            Orientation:=xlTopToBottom
        bOk = False
        
        ActiveWorkbook.Names.Add Name:="ListTags", RefersTo:=Range( _
            .Cells(1, lStartCol), .Cells(lLastRow, lStartCol))
        
        Sheets("CmpName").Show
        If Not bOk Then GoTo GoOut
        
        On Error GoTo GoOut
        lCmpCol = .Cells(.[SelectedTag].Value, .[TagColumn].Column _
            ).Value
        sDataSheetName = .Cells(.[SelectedTag].Value, _
            .[TagDataSheet].Column).Value
        On Error GoTo 0
    End With    'Sheets("Calc")
    bDeactivateChange = True
    oFunc.ShowRecord lCmpCol, sDataSheetName     'function show_record (in this module)
    bDeactivateChange = False
GoOut:
    Set oFunc = Nothing
End Sub

Sub ShowPrevRecord()
'Shows the previous record
    Dim lCalcRow As Long   'the row number of the item in "calc"
    Dim lCmpCol As Long
    Dim oFunc As clsFunctions
    Dim sDataSheetName As String

    With Sheets("Calc")
        lCalcRow = .[SelectedTag].Value
        If lCalcRow <= 1 Then
            MsgBox "There are no previous records.", vbInformation, _
                "Previous"
            Exit Sub
        End If
        .[SelectedTag].Value = .[SelectedTag].Value - 1
        lCmpCol = .Cells(.[SelectedTag].Value, .[TagColumn].Column _
            ).Value
        sDataSheetName = .Cells(.[SelectedTag].Value, _
            .[TagDataSheet].Column).Value
    End With    'Sheets("Calc")
    bDeactivateChange = True
    Set oFunc = New clsFunctions
    oFunc.ShowRecord lCmpCol, sDataSheetName     'function show_record (in this module)
    bDeactivateChange = False
GoOut:
    Set oFunc = Nothing
End Sub

'======================================================================
Sub ShowNextRecord()
'Shows the next record
    Dim lCalcRow As Long   'the row number of the item in "calc"
    Dim lCmpCol As Long
    Dim oFunc As clsFunctions
    Dim sDataSheetName As String

    With Sheets("Calc")
        lCalcRow = .[SelectedTag].Value
        If lCalcRow = .[NumOfTags].Value Then
            MsgBox "There are no more records.", vbInformation, _
                "Next"
            Exit Sub
        End If
        .[SelectedTag].Value = .[SelectedTag].Value + 1
        lCmpCol = .Cells(.[SelectedTag].Value, .[TagColumn].Column _
            ).Value
        sDataSheetName = .Cells(.[SelectedTag].Value, _
            .[TagDataSheet].Column).Value
    End With    'Sheets("Calc")
    bDeactivateChange = True
    Set oFunc = New clsFunctions
    oFunc.ShowRecord lCmpCol, sDataSheetName     'function show_record (in this module)
    bDeactivateChange = False
GoOut:
    Set oFunc = Nothing
End Sub

Sub cmdOK_Click()
    bOk = True
End Sub

Sub cmdCancel_Click()
    bOk = False
End Sub


INQUEST-PP=macro
