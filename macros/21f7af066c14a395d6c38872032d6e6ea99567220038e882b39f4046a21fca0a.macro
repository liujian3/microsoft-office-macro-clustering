Attribute VB_Name = "AUTO_DISABLE_EVENTS"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' This class is meant to be created on VBA's stack whenever events need to be
' disabled. When the object is destroyed, the events' enable status is restored
' to its previous value. This forces disabling to be confined to a certain,
' limited scope. RAII comes to VBA!
'
' Unfortunately, VBA's language makes this implementation less than ideal.
' IDEALLY, we would be able to just do this:
'
'   Dim ade As New AUTO_DISABLE_EVENTS
'
' ...but VBA is lying to us! This does _not_ create a new instance of our
' object. Rather, it creates a reference, set to Nothing, that includes an
' implicit check against Nothing whenever code attempts to access a property
' of this reference, and if the reference is Nothing, a new instance is
' created for us. (This sounds like it could be handy in other circumstances,
' but since this check occurs every time, 'As New' references can be a real
' performance drain! Even Microsoft recommends not using them. :-/ )
'
' That said, since we don't have any properties to access, the actual New never
' happens, and the Class_Initialize() call never takes place, so events are
' never disabled.
'
' Instead, we need to do this:
'
'   Dim ade As AUTO_DISABLE_EVENTS
'   Set ade = New AUTO_DISABLE_EVENTS
'
' This is less ideal, but is still better than manually saving and restoring
' these settings, since the call to Class_Terminate() will happen whenever the
' reference goes out of scope -- the user does not need to include an explicit
' call in his or her code!

' #Const DEBUG_OUTPUT = True

Private mApplication_EnableEvents As Boolean
Private mApplication_ScreenUpdating As Boolean

Private Sub Class_Initialize()
    ' Save this instance's state
    mApplication_EnableEvents = Application.EnableEvents
    mApplication_ScreenUpdating = Application.ScreenUpdating

#If DEBUG_OUTPUT Then
    Debug.Print "AUTO_DISABLE_EVENTS push : EnableEvents = " & mApplication_EnableEvents & ", ScreenUpdating = " & mApplication_ScreenUpdating
#End If

    ' Disable events and screen updates
    Application.EnableEvents = False
    Application.ScreenUpdating = False
End Sub

Private Sub Class_Terminate()
#If DEBUG_OUTPUT Then
    Debug.Print "AUTO_DISABLE_EVENTS  pop : EnableEvents = " & mApplication_EnableEvents & ", ScreenUpdating = " & mApplication_ScreenUpdating
#End If

    ' Restore state when this object is destroy.
    Application.ScreenUpdating = mApplication_ScreenUpdating
    Application.EnableEvents = mApplication_EnableEvents
End Sub
Attribute VB_Name = "BGAVia"
Option Explicit

Function bga_via_event_handler(ByVal target As Range)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    On Error GoTo ErrHandler
    
    Dim outer_diameter As Double
    Dim inner_diameter As Double
    Dim via_pitch As Double
    Dim via_length As Double
    Dim linear_inductance As Double
    Dim inductance As Double
    Dim resistance As Double
    
    outer_diameter = wksBGAVia.Range("rngBGAViaOD").value
    inner_diameter = wksBGAVia.Range("rngBGAViaID").value
    via_pitch = wksBGAVia.Range("rngBGAViaPitch").value
    via_length = wksBGAVia.Range("rngBGAViaLen").value
    
    SET_INPUTS_PDN_BGA_VIA outer_diameter, inner_diameter, via_pitch, via_length
    GET_CALCULATED_PDN_BGA_VIA linear_inductance, inductance, resistance
    
    wksBGAVia.Range("rngBGAViaLinL").value = linear_inductance
    wksBGAVia.Range("rngBGAViaL").value = inductance
    wksBGAVia.Range("rngBGAViaR").value = resistance
    
    Exit Function

ErrHandler:
    Call ErrorHandler("bga_via_event_handler")
End Function

' For some reason this function needs to exist, otherwise the sheet will not
' populate the cell accordingly on startup, which is a problem if the user
' tries to do anything on the System Decap sheet before updating the BGA Via
' sheet
Function Calc_Rvia(OD, ID, b, c)
    Const Perm As Integer = 32                  '//Permeability of free space
    Const Conductivity As Single = 58000000     '// 1/ohm-m
    
    Dim via_length As Single                    '//in mm
    Dim Via_Drill_OD As Single                  '//in mm
    Dim Via_Drill_ID As Single                  '//in mm
    Dim Cross_Sect_Area As Single               '//in sq mm
    Dim Skin_Depth_100Mhz As Single             '//in mm
    Dim Cross_Sect_Area_100Mhz As Single        '//in sq mm
    Dim One_Loop_R_DC As Single                 '//in mohm
    Dim One_Loop_R_100Mhz As Single             '//in mohm
    Dim Loop_R_DC As Single                     '//in mohm
    Dim Loop_R_100Mhz As Single                 '//in mohm
    
    via_length = c / 39.5
    Via_Drill_OD = OD / 39
    Via_Drill_ID = ID / 39
    
    If (OD > ID) Then
        Cross_Sect_Area = 3.14159265 * ((Via_Drill_OD / 2) ^ 2 - (Via_Drill_ID / 2) ^ 2)
    Else
        Cross_Sect_Area = 0
    End If
    
    Skin_Depth_100Mhz = 1000 * Sqr(1 / (3.14159265 * 100000000 * 400 * 3.14159265 * 0.000000001 * Conductivity))
    
    If (OD > ID) Then
        Cross_Sect_Area_100Mhz = 3.14159265 * ((Via_Drill_OD / 2) ^ 2 - (Max((Via_Drill_OD / 2 - Skin_Depth_100Mhz), Via_Drill_ID / 2)) ^ 2)
        One_Loop_R_DC = 1000000 * via_length / Cross_Sect_Area / Conductivity * 2
        One_Loop_R_100Mhz = 1000000 * via_length / Cross_Sect_Area_100Mhz / Conductivity * 2
    Else
        Cross_Sect_Area_100Mhz = 0
        One_Loop_R_DC = 0
        One_Loop_R_100Mhz = 0
    End If
        
    Loop_R_DC = One_Loop_R_DC
    Loop_R_100Mhz = One_Loop_R_100Mhz

    If (OD > 0 And b > OD / 2) Then
        Calc_Rvia = Loop_R_100Mhz + Loop_R_DC
    Else
        Calc_Rvia = 0
    End If
    
End Function

' This function only needs to exist since the Calc_Rvia function exists.
Function Max(Value1, Value2)
    If (Value1 >= Value2) Then
        Max = Value1
    Else
        Max = Value2
    End If
    
End Function

Function get_via_length()
    get_via_length = wksBGAVia.Range("E36").value
End Function

Function get_via_pitch()
    get_via_pitch = wksBGAVia.Range("E35").value
End Function

Function get_via_eff_r()
    get_via_eff_r = wksBGAVia.Range("E39").value
End Function

Function get_via_eff_l()
    get_via_eff_l = wksBGAVia.Range("E38").value
End Function
Attribute VB_Name = "Building"
Option Explicit

#If VBA7 And Win64 Then
    Private Declare PtrSafe Function FreeLibrary Lib "kernel32" (ByVal hLibModule As LongPtr) As Long
    Private Declare PtrSafe Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleA" (ByVal lpModuleName As String) As LongPtr
#Else
    Private Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long
    Private Declare Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleA" (ByVal lpModuleName As String) As Long
#End If

Private Const LIBRARY_INCLUDES_FILE As String = "LibraryIncludes.bas"

Public Sub build_gui(ByVal dll32 As String, ByVal dll64 As String, ByVal version As String, ByVal build As String, ByVal family As String, ByVal edition As String)
    BatchMode = True

    build = Replace(build, "_", ".")
    ' StrConv(vbProperCase) will capitalize the first letter of the edition,
    ' so that "pro" -> "Pro" and "std" -> "Std". The suffixen of the matching
    ' Introduction sheets must match these capitalized versions, or they won't
    ' be properly visible when the worksheet is opened. For example:
    '
    '   "pro" -> "Pro" -> "Introduction_Pro"
    '
    ' Also, 'rngToolVersionNumber' contains the OFFICIAL version of this tool,
    ' including its edition. Other functions will look here for this info.
    ' wksReleaseNotes.Unprotect PROTECTION_PASSWORD
    protect_worksheet wksReleaseNotes
    wksReleaseNotes.Range("rngToolVersionNumber").Locked = False
    wksReleaseNotes.Range("rngToolVersionNumber").value = "'" & version & " " & StrConv(edition, vbProperCase)
    wksReleaseNotes.Range("rngToolBuildNumber").value = "'" & build
    wksReleaseNotes.Range("rngToolVersionNumber").Locked = True

    Dim i As Integer
    Dim dllName As String
    i = 1
    dllName = Worksheets("PDN_RESOURCES").Range("B" & i)
    Do Until dllName = ""
        If Right(dllName, 4) = ".dll" Then
            FreeLibrary GetModuleHandle(dllName)
        End If

        i = i + 1
        dllName = Worksheets("PDN_RESOURCES").Range("B" & i)
    Loop

    ' Embed dlls and data family name
    embed_files dll32, dll64, family, edition

    ' Import the new LibraryIncludes module
    ThisWorkbook.VBProject.VBComponents("LibraryIncludes").name = "RemoveMe"
    ThisWorkbook.VBProject.VBComponents.Remove ThisWorkbook.VBProject.VBComponents("RemoveMe")
    ThisWorkbook.VBProject.VBComponents.Import(ThisWorkbook.Path & "\" & LIBRARY_INCLUDES_FILE).name = "LibraryIncludes"

    BatchMode = False
End Sub

Public Sub embed_files(dll32 As String, dll64 As String, family As String, edition As String)
    ' VisualBasic is not C. When you declare an array of variables in VB
    ' using a single numeric argument, the argument doesn't specify the
    ' size of the array, it specifies the index of the upper bound! This
    ' means that if you have:
    '
    '   Dim foo(10) As Integer
    '   Dim foo_size As Integer = UBound(foo)
    '
    ' ...then foo_size will be set to 10, because UBound() returns the largest
    ' index that its array argument supports; but the array size is 11, since
    ' by default, VisualBasic uses a default base of 0. (See the Option Base
    ' statement.) This is a throwback to the GW-BASIC and QuickBasic days when
    ' arrays defaults to starting at element 1.
    '
    ' The proper way to specify an array with fixed dimensions is:
    '
    '   Dim bar(0 To 3) As Integer
    '
    Dim files(0 To 3) As Variant

    files(0) = ThisWorkbook.Path & "\..\data\built\" & edition & "\pdn_data.dat"
    files(1) = ThisWorkbook.Path & "\..\data\built\" & edition & "\pdn_vrm.dat"
    files(2) = ThisWorkbook.Path & "\..\built\" & dll32
    files(3) = ThisWorkbook.Path & "\..\built\" & dll64

    Call RESOURCE_MANAGER.Pack(files, family)
End Sub

Public Sub prepareForRelease()
    Const INTRODUCTION_SHEET_BASE_NAME As String = "Introduction"

    ' A list of individual sheet names, separated by commas -- not commas and
    ' spaces -- just commas. VBA isn't that clever. This is the list of all
    ' sheets that will be visible to the customer!
    Dim visible_sheets_list As String
    visible_sheets_list = "Release_Notes,Decap_Selection,Library,BGA_Via,Plane_Cap,Cap_Mount,X2Y_Mount,BOM,Enlarged_Graph,Stackup,System_Decap"

    ' Figure out which version of the introduction sheet to show.
    Dim version As String
    version = wksReleaseNotes.Range("rngToolVersionNumber").value

    Dim edition_pos As Integer
    edition_pos = InStrRev(version, " ")

    Dim edition As String
    Dim show_all_intro_sheets As Boolean

    ' If we can't find an edition for this PDN Tool, show all sheets that start
    ' with the word "Introduction" by default. This should make it easy to spot
    ' edition-related problems when building the PDN Tool.
    show_all_intro_sheets = True

    If Not edition_pos = 0 Then
        edition = Mid(version, edition_pos + 1)

        Dim intro_name As String
        intro_name = INTRODUCTION_SHEET_BASE_NAME & "_" & edition

        ' We have an edition! Rename the sheet to something user friendly
        ' and hide any others. We wrap this in an error handler so that in
        ' the release version where the sheet has already been renamed, no
        ' error is triggered.
        On Error Resume Next
        Worksheets(intro_name).name = INTRODUCTION_SHEET_BASE_NAME
        On Error GoTo 0

        visible_sheets_list = visible_sheets_list & "," & INTRODUCTION_SHEET_BASE_NAME
        show_all_intro_sheets = False
    End If

    ' Split the list up into an array that we iterate over.
    Dim visible_sheets() As String
    visible_sheets = Split(visible_sheets_list, ",")

    Dim ws As Worksheet

    ' Set the visibility on each sheet.
    For Each ws In Worksheets
        Dim visibility As XlSheetVisibility
        ' By default, all sheets are very hidden -- this means they can only
        ' by set visible by VBA code.
        visibility = xlSheetVeryHidden

        ' Look for Introduction sheets first.
        If show_all_intro_sheets And ws.name Like INTRODUCTION_SHEET_BASE_NAME & "*" Then
            visibility = xlSheetVisible
        Else
            Dim visible_sheet_name As Variant ' VBA requires this to be a Variant
            For Each visible_sheet_name In visible_sheets
                If ws.name = visible_sheet_name Then
                    visibility = xlSheetVisible
                    Exit For
                End If
            Next
        End If

        ' Debug.Print visibility, ws.name

        ws.Visible = visibility
        ' Set protection on all sheets.
        protect_worksheet ws
    Next

    ' Decap selection is the default sheet (since that's where the user is supposed to start)
    wksSystemDecap.Activate
End Sub

Public Sub unhideAll()
    Dim ws As Worksheet

    DeveloperMode = True
    'Unhide all sheets
    For Each ws In Worksheets
        ws.Visible = True
        unprotect_worksheet ws
    Next
End Sub

Public Sub unhideAllUseful()
    DeveloperMode = True
    Dim ws As Worksheet
    'make all useful sheets visible
    For Each ws In Worksheets
        'Generic matches
        If (Left(ws.name, 4) = "Calc" Or Left(ws.name, 2) = "LH" Or Left(ws.name, 10) = "sim_limits") Then
            ws.Visible = False
        ElseIf (Right(ws.name, 7) = "scratch") Then
            ws.Visible = False
        ElseIf (Right(ws.name, 7) = "Default" Or Right(ws.name, 4) = "Save") Then
            ws.Visible = False
        Else
            ws.Visible = True
        End If
        
        'Specific rules
        If (ws.name = "Calculations") Then
            ws.Visible = True
        ElseIf (ws.name = "Dump") Then
            ws.Visible = False
        End If
        
        unprotect_worksheet ws
    Next
End Sub

Public Sub SaveToSDrive()
    'Saves the tool to its folder on the S drive for use in regtests, etc.
    Dim fileSaveName As String
    Dim currentFilePath As String
    Dim toolDirectory As String
    Dim oldDirectory As String
    Dim currentDirectory As String

    'These get their values from the ranges at the top of the release_notes tab.
    'The build number will always update itself automatically, so don't touch it. The version number has to be changed manually.
    Dim versionNumber As String
    Dim BuildNumber As Integer

    unprotect_worksheet wksReleaseNotes

    currentFilePath = ActiveWorkbook.FullName
    versionNumber = wksReleaseNotes.Range("rngToolVersionNumber").value
    BuildNumber = wksReleaseNotes.Range("rngToolBuildNumber").value
    wksReleaseNotes.Range("rngToolBuildNumber").value = BuildNumber + 1
    toolDirectory = "S:\tools\pdn\"
    oldDirectory = toolDirectory + versionNumber + "\" + CStr(BuildNumber)
    currentDirectory = toolDirectory + versionNumber + "\current"
    fileSaveName = currentDirectory + "\pdn_tool.xls"

    protect_worksheet wksReleaseNotes

    If Dir(currentDirectory, vbDirectory) = "" Then
        unprotect_worksheet wksReleaseNotes
        wksReleaseNotes.Range("rngToolBuildNumber").value = 1
        MkDir (toolDirectory + versionNumber)
        protect_worksheet wksReleaseNotes
    Else
        Name currentDirectory As oldDirectory
    End If

    MkDir currentDirectory

    'We have to suppress alerts to avoid the overwrite dialog, then turn them back on.
    Application.DisplayAlerts = False
    Call ActiveWorkbook.SaveAs(FileName:=fileSaveName)
    Call ActiveWorkbook.SaveAs(FileName:=currentFilePath)
    Application.DisplayAlerts = True
End Sub

' Updates wksGuidelines
Public Sub updatePCG(ByVal file_name As String)
    ' open the CSV as worksheet
    Dim pcg_workbook As Workbook
    Dim pcg_worksheet As Worksheet
    Set pcg_workbook = Workbooks.Open(FileName:=file_name)
    Set pcg_worksheet = pcg_workbook.Worksheets(1)
    
    ' copy eveything into PC_GUIDELINES
    pcg_worksheet.UsedRange.Copy Destination:=wksGuidelines.Range("A1")
    
    ' close CSV
    pcg_workbook.Close SaveChanges:=False
End Sub

Attribute VB_Name = "CapMount"
Option Explicit

Function cap_mount_event_handler(ByVal target As Range)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
    
    On Error GoTo ErrHandler
    
    run_cap_mount_calculations
    
    Exit Function

ErrHandler:
    Call ErrorHandler("cap_mount_event_handler")
End Function

Function run_cap_mount_calculations()
    Dim col As Long
    Dim l_top As Double
    Dim l_bottom As Double

    For col = 5 To 14
        l_top = Calc_Ltop(wksCapMount.Cells(38, col).value, _
            wksCapMount.Cells(39, col).value, _
            wksCapMount.Cells(40, col).value, _
            wksCapMount.Cells(41, col).value, _
            wksCapMount.Cells(42, col).value, _
            wksCapMount.Cells(43, col).value, _
            wksCapMount.Cells(44, col).value, _
            wksCapMount.Cells(45, col).value, _
            wksCapMount.Cells(46, col).value, _
            wksCapMount.Cells(47, col).value, _
            wksCapMount.Cells(48, col).value, _
            wksCapMount.Cells(49, col).value)
        
        l_bottom = Calc_Lbot(wksCapMount.Cells(38, col).value, _
            wksCapMount.Cells(39, col).value, _
            wksCapMount.Cells(40, col).value, _
            wksCapMount.Cells(41, col).value, _
            wksCapMount.Cells(42, col).value, _
            wksCapMount.Cells(43, col).value, _
            wksCapMount.Cells(44, col).value, _
            wksCapMount.Cells(45, col).value, _
            wksCapMount.Cells(46, col).value, _
            wksCapMount.Cells(47, col).value, _
            wksCapMount.Cells(48, col).value, _
            wksCapMount.Cells(49, col).value)
        
        wksCapMount.Range("rngCapMountLTop").Cells(1, col - 4).value = l_top
        wksCapMount.Range("rngCapMountLBottom").Cells(1, col - 4).value = l_bottom
    Next
End Function

Function Calc_Ltop(Gap, width, Pitch, t, h, a, w, r, b, C1, C2, thk) As Double
    Const Perm As Integer = 32                      '//Permeability of free space
    Const Fringe As Single = 1.4                    '//0.7 squares on each side of trace
    Dim Pad_Gap_L As Single
    Dim Trace_L As Single
    Dim Linear_L As Single
    Dim C1_L As Single
    Dim C2_L As Single
    Dim spread_l As Single
    
    Pad_Gap_L = Perm * ((Pitch - Gap) / (width / h + Fringe)) + Perm * Gap / (width / ((t + h) + Fringe))
    Trace_L = Perm * (2 * a / (w / h + Fringe))
    Linear_L = Perm / 3.14159265 * Log(b / r)
    C1_L = Linear_L * C1
    C2_L = Linear_L * C2
    spread_l = Perm * thk * 0.65
    
    Calc_Ltop = (Pad_Gap_L + Trace_L + C1_L + spread_l) / 1000
End Function

Function Calc_Lbot(Gap, width, Pitch, t, h, a, w, r, b, C1, C2, thk) As Double
    Const Perm As Integer = 32                      '//Permeability of free space
    Const Fringe As Single = 1.4                    '//0.7 squares on each side of trace
    Dim Pad_Gap_L As Single
    Dim Trace_L As Single
    Dim Linear_L As Single
    Dim C1_L As Single
    Dim C2_L As Single
    Dim spread_l As Single
    
    Pad_Gap_L = Perm * ((Pitch - Gap) / (width / h + Fringe)) + Perm * Gap / (width / ((t + h) + Fringe))
    Trace_L = Perm * (2 * a / (w / h + Fringe))
    Linear_L = Perm / 3.14159265 * Log(b / r)
    C1_L = Linear_L * C1
    C2_L = Linear_L * C2
    spread_l = Perm * thk * 0.65
    
    Calc_Lbot = (Pad_Gap_L + Trace_L + C2_L + spread_l) / 1000
End Function

Attribute VB_Name = "CommonEventHandler"
Option Explicit

Dim InsideUpdate As Boolean

Public Sub ChangeHandler(ByVal target As Range)
    If Not InsideUpdate Then
        Application.EnableEvents = False
        InsideUpdate = True
        InsideUpdate = False
        Application.EnableEvents = True
    End If
End Sub


Attribute VB_Name = "GLOBAL_VARS"
Option Explicit

Public Const PROTECTION_PASSWORD = "hsioapps"

Public UserDisabled As Boolean
Public DeveloperMode As Boolean

Public SYSTEM_DECAP_INIT As Boolean

Public RESOURCE_MANAGER As New RESOURCE_MANAGER
Public PCG As New PCG
' "Singleton" References to C++ objects
Public PDN_DDB As New PDN_DDB
Public PDN_SYSTEM As New PDN_SYSTEM
Public PDN_CAP_DB As New PDN_CAP_DB
Public PDN_VRM_MODEL_DB As New PDN_VRM_MODEL_DB

Public SYSTEM_DECAP_GUI As New SYSTEM_DECAP_GUI
Public PDN_CHART As New PDN_CHART

Public LIBRARY As New LIBRARY

Public BatchMode As Boolean

Public RELEASE_NOTES As New RELEASE_NOTES

Public Const VRM_TYPE_SWITCHER = "switcher"
Public Const VRM_TYPE_LINEAR = "linear"
Public Const VRM_TYPE_FILTER = "filter"
Attribute VB_Name = "GuiUtils"
Option Explicit

Sub MovePicture()
Attribute MovePicture.VB_ProcData.VB_Invoke_Func = " \n14"
'
' MovePicture Macro
'

'
    Columns("N:N").Select
    Selection.EntireColumn.Hidden = True
    Range("O8").Select
End Sub

Sub CopyPaste()
Attribute CopyPaste.VB_ProcData.VB_Invoke_Func = " \n14"
'
' CopyPaste Macro
'

'
    ActiveSheet.Shapes("cmdDecoupleGrp9").Select
    Selection.Copy
    Range("N161").Select
    ActiveSheet.Paste
    Range("P157").Select
End Sub

Sub EditText()
Attribute EditText.VB_ProcData.VB_Invoke_Func = " \n14"
'
' EditText Macro
'

'
    Range("P158").Select
End Sub

Sub ChangeColour()
'
' ChangeColour Macro
'

'
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub

 Sub cmdEnlargeGraph_Click()
     sheets("Enlarged_Graph").Activate
End Sub
Attribute VB_Name = "LIBRARY"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' ===== Named ranges on THIS ("Library") worksheet
Private Const LIBRARY_RANGE_BULK_CAP_FOOTPRINTS = "rngLibBulkCapFootprints"
Private Const LIBRARY_RANGE_BULK_CAP_VALUES = "rngLibBulkCapValues"
Private Const LIBRARY_RANGE_BULK_CAP_VALUES_USER = "rngLibBulkCapValuesUser"

Private Const LIBRARY_RANGE_DECOUPLING_CAP_FOOTPRINTS = "rngLibDecouplingCapFootprints"
Private Const LIBRARY_RANGE_DECOUPLING_CAP_VALUES = "rngLibDecouplingCapValues"
Private Const LIBRARY_RANGE_DECOUPLING_CAP_VALUES_USER = "rngLibDecouplingCapValuesUser"

Private Const LIBRARY_RANGE_SPREAD_OPTIONS = "Spread_options"
Private Const LIBRARY_RANGE_SPREADING_L = "rngLibSpreadingL"
Private Const LIBRARY_RANGE_SPREADING_R = "rngLibSpreadingR"

Private Const LIBRARY_RANGE_X2Y_CAP_FOOTPRINTS = "rngLibX2YCapFootprints"
Private Const LIBRARY_RANGE_X2Y_CAP_VALUES = "rngLibX2YCapValues"

Private Const LIBRARY_RANGE_VRM_ESL = "rngLibVrmEsl"
Private Const LIBRARY_RANGE_VRM_ESR = "rngLibVrmEsr"
Private Const LIBRARY_RANGE_VRM_TYPES = "rngLibVrmTypes"

' ===== Named ranges on OTHER worksheets
Private Const LIBRARY_RANGE_CAP_MOUNT_FOOTPRINTS = "rngCapMountFootprints"
Private Const LIBRARY_RANGE_CAP_MOUNT_LAYERS = "rngCapMountLayers"

Private Const LIBRARY_RANGE_X2Y_MOUNT_FOOTPRINTS = "rngX2YMountFootprints"
Private Const LIBRARY_RANGE_X2Y_MOUNT_LAYERS = "rngX2YMountLayers"

' ===== Lots of other constants
Private Const LIBRARY_CAP_IS_FROM_LIBRARY = "From Library"
Private Const LIBRARY_CAP_IS_USER = "User"

Private Const LIBRARY_NEEDLE_NOT_FOUND = -1
Private Const LIBRARY_NO_MATCH_FOUND = "------------"
Private Const LIBRARY_WRONG_FOOTPRINT = "Wrong Footprint"

Private Const LIBRARY_X2Y_CAP_SUFFIX = "_X2Y"
Private Const LIBRARY_UL_ESR_CAP_PREFIX = "UL ESR "
Private Const LIBRARY_X2Y_CAP_SCALING_FACTOR = 2#

Private Const LIBRARY_STD_CAP_MOUNT_LAYER_PREFIX = "L"
Private Const LIBRARY_X2Y_CAP_MOUNT_LAYER_PREFIX = "X2Y Cap mounting inductance - "
Private Const LIBRARY_STD_CAP_MOUNT_LAYER_CROP_LEN = 3

Private Const LIBRARY_COL_OFFSET_ESR = 0
Private Const LIBRARY_COL_OFFSET_ESL = 1
Private Const LIBRARY_COL_OFFSET_LMNT = 2

Private Const LIBRARY_FOOTPRINT_CUSTOM = "Custom"
Private Const LIBRARY_FOOTPRINT_BULK = "Bulk"

' These are used to narrow down which capacitor library to look up.
Public Enum CAPACITOR_TYPE
    DECOUPLING_CAP
    BULK_CAP
End Enum

' Used in building decoupling cap validation rules
Private mUniqueDecouplingCapValueCacheIsClean As Boolean
Private mDecouplingCapValidationRule As String

Public Function EquivCap(captype As CAPACITOR_TYPE, source As String, value As Variant, footprint As String) As Variant
    ' This is mostly a pass-through, but a couple of things need to happen:
    '   1. X2Y caps need to have 'value' doubled;
    '   2. caps with a 'value' that start with "UL ESR " need to have those
    '      values trimmed and converted to a real capacitance; and
    '   3. all other values are returned as-is.

    ' We only get this to determine if the cap we're interested in exists.
    Dim rng As Range
    Set rng = GetEquivCapPropertyItem(captype, source, value, footprint)

    If rng Is Nothing Then
        If IsValidDecapValue(value) Then
            EquivCap = LIBRARY_WRONG_FOOTPRINT
        Else
            EquivCap = LIBRARY_NO_MATCH_FOUND
        End If
    ElseIf IsEmpty(rng.Cells(1, 1)) Then
        EquivCap = LIBRARY_WRONG_FOOTPRINT
    ElseIf Right(footprint, 4) = LIBRARY_X2Y_CAP_SUFFIX Then
        EquivCap = LIBRARY_X2Y_CAP_SCALING_FACTOR * value
    ElseIf Left(value, Len(LIBRARY_UL_ESR_CAP_PREFIX)) = LIBRARY_UL_ESR_CAP_PREFIX Then
        ' Remove the UL ESR prefix
        EquivCap = CDbl(Mid(value, Len(LIBRARY_UL_ESR_CAP_PREFIX) + 1))
    Else
        ' Just return the value as-is.
        EquivCap = CDbl(value)
    End If
End Function

Private Function IsValidDecapValue(value As Variant) As Boolean
    ' This function checks to see if a cap value merely exists.
    If IsEmpty(value) Then
        Exit Function
    End If

    Dim values As New Collection
    Dim needle As Variant               ' search in 'values' for the needle

    With wksLibrary
        values.Add .Range(LIBRARY_RANGE_X2Y_CAP_VALUES)
        values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES)
        values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES_USER)

        If IsNumeric(value) Then
            needle = CDbl(value)
        Else
            needle = value
        End If

        Dim row As Integer
        Dim haystack As Range

        ' GetIndexOfNeedleInHaystack() gets us the index of the matching cell,
        ' referenced to the range we searched. To get the actual data, we need to
        ' convert these to sheet indices, so we need to add in the starting .Row
        ' and .Column of the range. And since everything in Excel is 1-based, we
        ' need to subtract 1 to normalize.
        row = LIBRARY_NEEDLE_NOT_FOUND
        For Each haystack In values
            row = GetIndexOfNeedleInHaystack(needle, haystack)
            If row <> LIBRARY_NEEDLE_NOT_FOUND Then
                Exit For
            End If
        Next
    
        If row = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If
    
        IsValidDecapValue = True ' found!
    End With
End Function

Private Function GetIndexOfNeedleInHaystack(needle As Variant, haystack As Range) As Integer
    GetIndexOfNeedleInHaystack = LIBRARY_NEEDLE_NOT_FOUND
    On Error Resume Next
    ' The third, zero parameter to .Match() forces an exact match on the needle.
    ' If the needle is not found in the haystack, Match() will throw an
    ' exception, which is why we need the Resume Next clause above. When this
    ' happens, 'GetIndexOfNeedleInHaystack' will not be updated, and this
    ' function will just return NEEDLE_NOT_FOUND.
    '
    ' Alternatively, this can be replaced with the Range.Find() method, e.g.
    '
    '   wksLibrary.Range("rngLibBulkCapValues").Find(10, lookAt := xlWhole)
    '
    ' The 'lookAt' option is essential, otherwise .Find() will allow partial
    ' matches. If the .Find() fails, it returns Nothing.
    '
    ' Ref. http://www.ozgrid.com/forum/showthread.php?t=58404
    '
    ' The above page says that .Find() searches from the active cell, in which
    ' case the 'after' parameter should be set to the beginning of the range.
    ' Also, .Find() REMEMBERS SETTINGS between invocations, so it's always best
    ' to be explicit with all arguments.
    '
    ' For now, it seems simpler to stick with .Match().
    GetIndexOfNeedleInHaystack = Application.WorksheetFunction.Match(needle, haystack, 0)
End Function

Function GetEquivCapPropertyItem(captype As CAPACITOR_TYPE, source As String, value As Variant, ByVal footprint As String) As Range
    ' This function uses highly-overloaded arguments. :/
    '   captype: BULK_CAP or DECOUPLING_CAP -- this removes a lot of ambiguity
    '       from earlier implementations.
    '   source: "From Library" or "User1" .. "User6".
    '   value: if source is "From Library", then a specific capacitor value; else ignored.
    '   footprint: "0201", "0402", etc.; or "Bulk" or LIBRARY_FOOTPRINT_CUSTOM.
    '
    ' The cut-and-paste functions this one is meant to replace can return three
    ' different kinds of values: a string of 12 hyphens, when 'value' is Empty;
    ' the message "Wrong Footprint" when no entry is found that corresponds to
    ' the 'value' and 'footprint' values; or the numeric value of the desired
    ' capacitor property.
    '
    ' This function is slightly different:
    '   1. It returns Nothing when 'value' is Empty;
    '   2. Otherwise it returns a Range (consisting of a single cell) that
    '      corresponds to the specified 'value' and 'footprint'; it is up
    '      to the caller to determine which cell, offset from the base cell,
    '      contains the parameter of interest, and what to do with an Empty
    '      cell.

    If IsEmpty(value) Then
        ' This replicates the behaviour of the original code. Note that just
        ' because 'value' isn't used in the business logic below in some cases
        ' doesn't mean it can be Empty! :I
        Exit Function
    End If

    ' Our types of haystacks
    '
    ' We use collections of Ranges because Excel doesn't seem to grok the
    ' concept of disjoint ranges properly. Thus we have to search each range
    ' individually.
    '
    ' IMPORTANT: IF YOU ADD OR REMOVE ANY ROWS OR COLUMNS FROM THE DATA TABLES
    ' IN THE 'LIBRARY' SHEET, YOU **MUST** MAKE SURE THE MODIFIED TABLES HAVE
    ' THE PROPER NAMED RANGES DEFINED!
    '
    ' ALSO, THIS FUNCTION CURRENTLY DEPENDS ON THERE ONLY BEING ONE UNIQUE
    ' COMBINATION OF 'VALUE' AND 'FOOTPRINT' IN THE DECOUPLING AND BULK
    ' CAPACITOR TABLES. IF THAT EVER CHANGES, THEN THIS FUNCTION WILL NEED
    ' TO CHANGE AS WELL.
    '
    ' The names required (and used) below are:
    '   'rngLibDecouplingCapValues':
    '       A one-dimensional list of values in the decoupling capacitor table
    '       to be matched against the 'value' parameter when the value of the
    '       'source' parameter is "From Library".
    '   'rngLibBulkCapValues':
    '       A one-dimensional list of values in the bulk capacitor table to be
    '       matched against the 'value' parameter when the value of the 'source'
    '       parameter is "From Library".
    '   'rngLibX2YCapValues':
    '       A one-dimensional list of values in the X2Y capacitor table to be
    '       matched against the 'value' parameter when the value of the
    '       'footprint' parameter ends with "X2Y".
    '   'rngLibDecouplingCapValuesUser':
    '       A one-dimensional list of values in the decoupling capacitor table
    '       to be matched against the 'source' parameter when the value of
    '       'source' starts with "User".
    '   'rngLibBulkCapValuesUser':
    '       A one-dimensional list of values in the bulk capacitor table to be
    '       matched against the 'source' parameter when the value of 'source'
    '       starts with "User".
    '   'rngLibDecouplingCapFootprints':
    '       A one-dimensional list of values in the decoupling capacitor table
    '       to be matched against the 'footprint' parameter; e.g. "0201",
    '       "0402", etc.
    '   'rngLibBulkCapFootprints':
    '       A one-dimensional list of values in the decoupling capacitor table
    '       to be matched against the 'footprint' parameter; i.e. "Bulk" and
    '       LIBRARY_FOOTPRINT_CUSTOM.
    '   'rngLibX2YCapFootprints':
    '       A one-dimensional list of values in the X2Y capacitor table to be
    '       matched against the 'footprint' parameter (with its LIBRARY_X2Y_CAP_SUFFIX suffix
    '       removed)
    Dim footprints As New Collection
    Dim values As New Collection
    Dim needle As Variant               ' search in 'values' for the needle

    With wksLibrary
        If source = LIBRARY_CAP_IS_FROM_LIBRARY Then
            ' This case covers decoupling, bulk, and X2Y caps with standard values.
            If Right(footprint, Len(LIBRARY_X2Y_CAP_SUFFIX)) = LIBRARY_X2Y_CAP_SUFFIX Then
                footprints.Add .Range(LIBRARY_RANGE_X2Y_CAP_FOOTPRINTS)
                values.Add .Range(LIBRARY_RANGE_X2Y_CAP_VALUES)
                footprint = Left(footprint, Len(footprint) - 4)
            Else
                Select Case captype
                    Case BULK_CAP
                        values.Add .Range(LIBRARY_RANGE_BULK_CAP_VALUES)
                        footprints.Add .Range(LIBRARY_RANGE_BULK_CAP_FOOTPRINTS)
                    Case DECOUPLING_CAP
                        values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES)
                        footprints.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_FOOTPRINTS)
                    Case Else
                        Debug.Print "GetEquivCapPropertyItem: unknown 'library' captype="; captype
                        Exit Function
                End Select
            End If

            If IsNumeric(value) Then
                needle = CDbl(value)
            Else
                needle = value
            End If
        ElseIf Left(source, 4) = LIBRARY_CAP_IS_USER Then
            ' This case handles bulk and decoupling caps with user-defined values.
            Select Case captype
                Case BULK_CAP
                    values.Add .Range(LIBRARY_RANGE_BULK_CAP_VALUES_USER)
                    footprints.Add .Range(LIBRARY_RANGE_BULK_CAP_FOOTPRINTS)
                Case DECOUPLING_CAP
                    values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES_USER)
                    footprints.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_FOOTPRINTS)
                Case Else
                    Debug.Print "GetEquivCapPropertyItem: unknown 'user' captype="; captype
                    Exit Function
            End Select
            needle = source
        End If

        Dim row As Integer
        Dim col As Integer
        Dim haystack As Range

        ' GetIndexOfNeedleInHaystack() gets us the index of the matching cell,
        ' referenced to the range we searched. To get the actual data, we need to
        ' convert these to sheet indices, so we need to add in the starting .Row
        ' and .Column of the range. And since everything in Excel is 1-based, we
        ' need to subtract 1 to normalize.
        row = LIBRARY_NEEDLE_NOT_FOUND
        For Each haystack In values
            row = GetIndexOfNeedleInHaystack(needle, haystack)
            If row <> LIBRARY_NEEDLE_NOT_FOUND Then
                row = row + haystack.row - 1
                Exit For
            End If
        Next
    
        If row = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        col = LIBRARY_NEEDLE_NOT_FOUND
        For Each haystack In footprints
            col = GetIndexOfNeedleInHaystack(footprint, haystack)
            If col <> LIBRARY_NEEDLE_NOT_FOUND Then
                col = col + haystack.Column - 1
                Exit For
            End If
        Next
    
        If col = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If
    
        Set GetEquivCapPropertyItem = .Cells(row, col)
    End With
End Function

Public Function GetEquivCapProperty(captype As CAPACITOR_TYPE, source As String, value As Variant, footprint As String, property_offset As Integer) As Variant
    ' This function returns a Variant type, because, while ostensibly being a
    ' value-getter, the values it returns are directly used in GUI cells,
    ' despite not being part of the GUI layer.

    GetEquivCapProperty = LIBRARY_NO_MATCH_FOUND ' default

    Dim rng As Range
    Set rng = GetEquivCapPropertyItem(captype, source, value, footprint)

    If Not rng Is Nothing Then
        Dim rv As Variant
        rv = rng.Cells(1, property_offset + 1)
        If IsEmpty(rv) Then
            rv = LIBRARY_WRONG_FOOTPRINT
        End If
        GetEquivCapProperty = rv
    ElseIf captype = DECOUPLING_CAP Then
        ' If we land here, it is because there was no match between the
        ' combination of 'source' and 'value' and 'footprint'. However, if
        ' 'value' does exist somewhere in the decoupling cap library, we can at
        ' least tell the user if the footprint is wrong, so we check that here.

        If IsValidDecapValue(value) Then
            GetEquivCapProperty = LIBRARY_WRONG_FOOTPRINT
        End If
    End If
End Function

Public Function EquivCapESL(captype As CAPACITOR_TYPE, source As String, value As Variant, footprint As String) As Variant
    EquivCapESL = GetEquivCapProperty(captype, source, value, footprint, LIBRARY_COL_OFFSET_ESL)
End Function

Public Function EquivCapESR(captype As CAPACITOR_TYPE, source As String, value As Variant, footprint As String) As Variant
    EquivCapESR = GetEquivCapProperty(captype, source, value, footprint, LIBRARY_COL_OFFSET_ESR)
End Function

Private Function GetEquivLmntForStdSizeDecouplingCap(footprint As String, orientation As String, layer As String) As Range
    ' Find the mounting inductance of a standard surface-mount decoupling
    ' capacitor. This data is calculated and stored in the Cap_Mount
    ' worksheet.

    ' Arguments:
    '   'footprint' for standard caps is '0201', '0402', etc.
    '   'orientation' is 'VOE' (via-on-end) or 'VOS' (via-on-side)
    '   'layer' is 'TOP' or 'BOTTOM'

    ' This function returns a Range object. This object reference will be
    ' Nothing if a cell matching the arguments cannot be found. If this
    ' function returns a valid cell reference, the .Value of the cell can
    ' still be Empty if the cell contains no valid data.

    Dim row As Integer
    Dim col As Integer
    Dim rng As Range

    With wksCapMount
        Set rng = .Range(LIBRARY_RANGE_CAP_MOUNT_FOOTPRINTS)
        col = GetIndexOfNeedleInHaystack(CInt(footprint), rng) ' CInt() because the sheet uses numbers :/
        If col = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        row = rng.row
        col = col + rng.Column - 1

        Set rng = .Range(.Cells(row + 1, col), .Cells(row + 1, col + 1))
        col = GetIndexOfNeedleInHaystack(orientation, rng)
        If col = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        col = col + rng.Column - 1

        Set rng = .Range(LIBRARY_RANGE_CAP_MOUNT_LAYERS)
        row = GetIndexOfNeedleInHaystack(LIBRARY_STD_CAP_MOUNT_LAYER_PREFIX & LCase(Left(layer, LIBRARY_STD_CAP_MOUNT_LAYER_CROP_LEN)), rng)
        If row = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        row = row + rng.row - 1

        Set GetEquivLmntForStdSizeDecouplingCap = .Cells(row, col)
    End With
End Function

Private Function GetEquivLmntForX2YCap(footprint As String, layer As String) As Range
    ' Find the mounting inductance of a standard surface-mount decoupling
    ' capacitor. This data is calculated and stored in the Cap_Mount
    ' worksheet.

    ' Arguments:
    '   'footprint' for standard caps is '0201', '0402', etc.
    '   'layer' is 'TOP' or 'BOTTOM'

    ' This function returns a Range object. This object reference will be
    ' Nothing if a cell matching the arguments cannot be found. If this
    ' function returns a valid cell reference, the .Value of the cell can
    ' still be Empty if the cell contains no valid data.

    Dim row As Integer
    Dim col As Integer
    Dim rng As Range

    With wksX2YMount
        Set rng = .Range(LIBRARY_RANGE_X2Y_MOUNT_FOOTPRINTS)
        col = GetIndexOfNeedleInHaystack(footprint, rng)
        If col = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        col = col + rng.Column - 1

        Set rng = .Range(LIBRARY_RANGE_X2Y_MOUNT_LAYERS)
        row = GetIndexOfNeedleInHaystack(LIBRARY_X2Y_CAP_MOUNT_LAYER_PREFIX & StrConv(layer, vbProperCase), rng)
        If row = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        row = row + rng.row - 1

        Set GetEquivLmntForX2YCap = .Cells(row, col)
    End With
End Function

Private Function GetEquivLmntItem(captype As CAPACITOR_TYPE, value As Variant, ByVal footprint As String) As Range
    ' Arguments:
    '   'value' is the standard value of the customized capacitor, or
    '   a string of the form "UserN" for a fully user-specified
    '   capacitor.

    ' This function returns a Range object. This object reference will be
    ' Nothing if a cell matching the arguments cannot be found. If this
    ' function returns a valid cell reference, the .Value of the cell can
    ' still be Empty if the cell contains no valid data.

    If IsEmpty(value) Then
        ' This replicates the behaviour of the original code. Note that just
        ' because 'value' isn't used in the business logic below in some cases
        ' doesn't mean it can be Empty! :I
        Exit Function
    End If

    Dim values As New Collection
    Dim footprints As Range

    With wksLibrary
        Select Case captype
            Case DECOUPLING_CAP
                Set footprints = .Range(LIBRARY_RANGE_DECOUPLING_CAP_FOOTPRINTS)
                values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES)
                values.Add .Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES_USER)
                footprint = LIBRARY_FOOTPRINT_CUSTOM
            Case BULK_CAP
                Set footprints = .Range(LIBRARY_RANGE_BULK_CAP_FOOTPRINTS)
                values.Add .Range(LIBRARY_RANGE_BULK_CAP_VALUES)
                values.Add .Range(LIBRARY_RANGE_BULK_CAP_VALUES_USER)
            Case Else
                Debug.Print "GetEquivLmntItem: unknown captype="; captype
                Exit Function
        End Select

        Dim row As Integer
        Dim col As Integer
        Dim haystack As Range
        Dim needle As Variant

        ' GetIndexOfNeedleInHaystack() gets us the index of the matching cell,
        ' referenced to the range we searched. To get the actual data, we need to
        ' convert these to sheet indices, so we need to add in the starting .Row
        ' and .Column of the range. And since everything in Excel is 1-based, we
        ' need to subtract 1 to normalize.
        If IsNumeric(value) Then
            needle = CDbl(value)
        Else
            needle = value
        End If

        row = LIBRARY_NEEDLE_NOT_FOUND
        For Each haystack In values
            row = GetIndexOfNeedleInHaystack(needle, haystack)
            If row <> LIBRARY_NEEDLE_NOT_FOUND Then
                row = row + haystack.row - 1
                Exit For
            End If
        Next

        If row = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        col = LIBRARY_NEEDLE_NOT_FOUND
        For Each haystack In footprints
            col = GetIndexOfNeedleInHaystack(footprint, haystack)
            If col <> LIBRARY_NEEDLE_NOT_FOUND Then
                col = col + haystack.Column - 1 + LIBRARY_COL_OFFSET_LMNT
                Exit For
            End If
        Next
        
        If col = LIBRARY_NEEDLE_NOT_FOUND Then
            Exit Function
        End If

        Set GetEquivLmntItem = .Cells(row, col)
    End With
End Function

Public Function EquivCapLmnt(captype As CAPACITOR_TYPE, source As String, ByVal value As Variant, footprint As String, orientation As String, layer As String) As Variant
    ' This function uses highly-overloaded arguments. :/
    '   captype: BULK_CAP or DECOUPLING_CAP -- this removes a lot of ambiguity
    '       from earlier implementations.
    '   source: "From Library" or "User1" .. "User6".
    '   value: if source is "From Library", then a specific capacitor value; else ignored.
    '   footprint: "0201", "0402", etc.; or "Bulk" or LIBRARY_FOOTPRINT_CUSTOM.
    '
    ' The Library sheet contains mounting inductance information only for bulk
    ' capacitors (all values, and standard and custom footprints) and for custom
    ' decoupling capacitors. For the standard-sized decoupling capacitors and
    ' X2Y capacitors, mounting inductance comes from the Cap_Mount and X2Y_Mount
    ' sheets, respectively.

    Dim rng As Range
    Dim rv As Variant

    If Right(footprint, Len(LIBRARY_X2Y_CAP_SUFFIX)) = LIBRARY_X2Y_CAP_SUFFIX Then
        ' For X2Y-footprint caps, get mounting inductance from the X2Y_Mount
        ' sheet.
        Set rng = GetEquivLmntForX2YCap(Left(footprint, Len(footprint) - Len(LIBRARY_X2Y_CAP_SUFFIX)), layer)
    Else
        If source <> LIBRARY_CAP_IS_FROM_LIBRARY Then
            value = source
        End If

        Select Case footprint
            Case LIBRARY_FOOTPRINT_BULK, LIBRARY_FOOTPRINT_CUSTOM
                Set rng = GetEquivLmntItem(captype, value, footprint)
            Case Else
                ' For standard-sized decoupling caps, get mounting inductance
                ' from the Cap_Mount sheet.
                Set rng = GetEquivLmntForStdSizeDecouplingCap(footprint, orientation, layer)
        End Select
    End If

    If rng Is Nothing Then
        EquivCapLmnt = LIBRARY_NO_MATCH_FOUND
    ElseIf IsEmpty(rng) Then
        EquivCapLmnt = LIBRARY_WRONG_FOOTPRINT
    Else
        EquivCapLmnt = rng.Cells(1, 1).value
    End If
End Function

Private Function get_vrm_property(Range As String, vrm_type As String) As Double
    Dim row As Integer
    row = GetIndexOfNeedleInHaystack(vrm_type, wksLibrary.Range(LIBRARY_RANGE_VRM_TYPES))
    If row <> LIBRARY_NEEDLE_NOT_FOUND Then
        get_vrm_property = CDbl(wksLibrary.Range(Range).Cells(row))
    Else
        get_vrm_property = 0
    End If
End Function

Function get_vrm_l(vrm_type As String) As Double
    get_vrm_l = get_vrm_property(LIBRARY_RANGE_VRM_ESL, vrm_type)
End Function

Function get_vrm_r(vrm_type As String) As Double
    get_vrm_r = get_vrm_property(LIBRARY_RANGE_VRM_ESR, vrm_type)
End Function

Private Function get_spreading_property(Range As String, profile As String) As Double
    get_spreading_property = 0 ' default return value

    Dim h1 As Double
    Dim h2 As Double
    
    h1 = get_plane_h1()
    h2 = get_plane_h2()

    If h1 > 0 And h2 > 0 Then
        Dim row As Integer
        row = GetIndexOfNeedleInHaystack(profile, wksLibrary.Range(LIBRARY_RANGE_SPREAD_OPTIONS))
        If row <> LIBRARY_NEEDLE_NOT_FOUND Then
            get_spreading_property = CDbl(wksLibrary.Range(Range).Cells(row))
        End If
    End If
End Function

Function get_spreading_r(profile As String) As Double
    get_spreading_r = get_spreading_property(LIBRARY_RANGE_SPREADING_R, profile)
End Function

Function get_spreading_l(profile As String) As Double
    get_spreading_l = get_spreading_property(LIBRARY_RANGE_SPREADING_L, profile)
End Function

Function get_via_param(profile As String, param As String, layer As Integer, num_vias As Integer) As Double
    ' Used to get the resistance/capacitance via values used on the Decap
    ' Selection sheet.
    '
    ' This function uses two different algorithms to calculate the BGA Via
    ' values. The algorithm that is selected depends on which sheet the
    ' decoupling call is made by the user. Currently, the user can decouple
    ' from the System_Decap tab and the Decap_Selection tab. To keep track of
    ' where this call is being made, the range "decouplingInitiator" in the
    ' System_Decap tab is used. The default value for this cell is
    ' "decap_selection". If the System_Decap tab is used for decoupling, this
    ' cell is set to "system_decap" temporarily in the SelectedGroupDecap
    ' function. When decoupling is done, the cell is set back to its default
    ' value. Depending on the current value of the cell, a choice among the two
    ' algorithms is made. The difference between the two algorithms is between
    ' using or not using the layer number and via pairs values in the
    ' calculation from the System_Decap tab. All this was required to remove
    ' the dependency of the Decap_Selection tab on the System_Decap tab.
    
    Dim via_length As Double
    Dim via_length_ratio As Double
    Dim via_default_length As Double
        
    If profile = "Ignore" Then 'return zero
        get_via_param = 0
    ElseIf profile = "Calculate" Or profile = "Default" Then
        'if they set a layer number for that group, calculate the actual via length of the power plane.
        'Else set it equal to the via length entered by the user in the BGA_Via tab so the ratio applied will be 1 and wont affect the results
        If layer <= 0 Then
            via_length = get_via_length()
        Else
            via_length = 0
            'Add up the thickness for all the columns up to the layer number entered by the user
            Dim layer_index As Integer
            For layer_index = 24 To 24 + layer * 2 - 1
                via_length = via_length + wksStackup.Cells(layer_index, 10).value
            Next
        End If
            
        via_default_length = get_via_length()
        If via_default_length > 0 Then
            via_length_ratio = via_length / via_default_length
        Else
            via_length_ratio = 0
        End If
            
        'if they set a custom via number for that group, scale the return value
        If num_vias <= 0 Then
            get_via_param = 0
        Else
            If param = "r" Then
                get_via_param = ((get_via_eff_r() * via_length_ratio) / num_vias) / 1000 'decap_selection sheet needs it in Ohms, not mOhms
            ElseIf param = "l" Then
                get_via_param = (get_via_eff_l() * via_length_ratio) / num_vias
            Else
                get_via_param = 0
            End If
        End If
    End If
End Function

Function get_plane_c(profile As String, vrm_id As Integer) As Double
    Dim total_c As Double
    total_c = get_plane_total_c(vrm_id)

    If profile = "Calculate" And total_c > 0 Then
        get_plane_c = total_c
    Else
        get_plane_c = 0
    End If
End Function

Function get_plane_r(profile As String, vrm_id As Integer) As Double
    Dim total_r As Double
    total_r = get_plane_total_r(vrm_id)

    If profile = "Calculate" And total_r > 0 Then
        get_plane_r = total_r
    Else
        get_plane_r = 0
    End If
End Function

' Inspired by https://stackoverflow.com/a/31693059
Public Sub MaybeUpdateDecouplingCapValidationRules(Optional updateCache As Boolean = False)
    If mUniqueDecouplingCapValueCacheIsClean And Not updateCache Then
        Exit Sub
    End If

    Dim hash As Collection
    Dim key As String
    Dim value As Variant

    Set hash = New Collection

    On Error Resume Next ' can't add duplicate keys
    For Each value In wksLibrary.Range(LIBRARY_RANGE_DECOUPLING_CAP_VALUES)
        key = CStr(value)
        hash.Add value, key
    Next
    For Each value In wksLibrary.Range(LIBRARY_RANGE_X2Y_CAP_VALUES)
        key = CStr(value)
        hash.Add value, key
    Next
    On Error GoTo 0 ' restore default error handler

    ReDim values(0 To hash.count - 1) As Double
    Dim i As Integer
    For i = 0 To hash.count - 1
        values(i) = hash(i + 1)
    Next

    QuickSort values, 0, hash.count - 1

    ReDim valueStrings(0 To hash.count - 1) As String
    For i = 0 To hash.count - 1
        valueStrings(i) = CStr(values(i))
    Next

    mDecouplingCapValidationRule = Join(valueStrings, ",")
    mUniqueDecouplingCapValueCacheIsClean = True
End Sub

Public Function GetDecouplingCapValidationRule() As String
    MaybeUpdateDecouplingCapValidationRules
    GetDecouplingCapValidationRule = mDecouplingCapValidationRule
End Function

Attribute VB_Name = "LibraryIncludes"
Public Const FAMILY_NAME = "20nm"
#If VBA7 And Win64 Then
    Public Declare PtrSafe Function GET_RAIL_VOLTAGE_RANGE_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal rail_name As String) As String
    Public Declare PtrSafe Function GET_MODEL_STATUS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" () As String
    Public Declare PtrSafe Function UPDATE_CAP_QUANTITY_MAP Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_num As Long, ByVal decap_num As Long, ByVal bulk_num As Long) As Byte
    Public Declare PtrSafe Function LOAD_DATA_FILE_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal data_file As String) As Byte
    Public Declare PtrSafe Function GET_FAMILIES_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByRef families As Variant) As Byte
    Public Declare PtrSafe Function GET_PACKAGES_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal family As String, ByRef packages As Variant) As Byte
    Public Declare PtrSafe Function CREATE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal pkg As String) As Byte
    Public Declare PtrSafe Function CALCULATE_VRM_PARAMS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal auto_decouple As Long, ByVal calc_feffective As Long, ByVal calc_trans_current As Long, ByVal calc_vripple As Long, ByVal calc_num_via_pairs As Long, ByVal core_clock_frequency As String, ByVal core_clock_cycles_mode As String) As Byte
    Public Declare PtrSafe Function ADD_VRM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" () As Byte
    Public Declare PtrSafe Function REMOVE_LAST_VRM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" () As Byte
    Public Declare PtrSafe Function GET_RAIL_NAMES_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByRef rail_names As Variant) As Byte
    Public Declare PtrSafe Function GET_RAIL_VOLTAGES_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal rail_name As String, ByRef voltages As Variant) As Byte
    Public Declare PtrSafe Function GET_VRM_IDS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByRef ids As Variant) As Byte
    Public Declare PtrSafe Function GET_RAIL_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal param_name As String, ByVal rail_name As String, ByRef param_value As Variant) As Byte
    Public Declare PtrSafe Function GET_VRM_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal param_name As String, ByVal vrm_id As Long, ByRef param_value As Variant) As Byte
    Public Declare PtrSafe Function GET_CONNECTION_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal rail_name As String, ByVal vrm_id As Long, ByRef connection As Variant) As Byte
    Public Declare PtrSafe Function SET_CONNECTION_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal rail_name As String, ByVal vrm_id As Long, ByVal connection As String) As Byte
    Public Declare PtrSafe Function SET_RAIL_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal param_name As String, ByVal rail_name As String, ByVal param_value As Variant) As Byte
    Public Declare PtrSafe Function SET_VRM_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal param_name As String, ByVal vrm_id As Long, ByVal param_value As Variant) As Byte
    Public Declare PtrSafe Function SET_VRM_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal vrm_type As String) As Byte
    Public Declare PtrSafe Function GET_VRM_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByRef vrm_type As Variant) As Byte
    Public Declare PtrSafe Function SET_VRM_MODEL_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal vrm_model As String) As Byte
    Public Declare PtrSafe Function GET_VRM_MODEL_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByRef vrm_model As Variant) As Byte
    Public Declare PtrSafe Function GET_CAP_QUANTITY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByRef quantity As Long) As Byte
    Public Declare PtrSafe Function SET_CAP_QUANTITY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByVal quantity As Long) As Byte
    Public Declare PtrSafe Function GET_Z_CAP_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef z_cap As Variant) As Byte
    Public Declare PtrSafe Function GET_Z_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_id As Long, ByVal z_name As String, ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef z As Variant) As Byte
    Public Declare PtrSafe Function GET_FREQ_ARRAY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef freq_array As Variant) As Byte
    Public Declare PtrSafe Sub DESTROY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" ()
    Public Declare PtrSafe Function LOAD_DATA_FILE_PDN_VRM_MODEL_DB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal data_file As String) As Byte
    Public Declare PtrSafe Function GET_VRM_MODEL_NAMES_BY_TYPE_PDN_VRM_MODEL_DB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal vrm_type As String, ByRef vrm_model_names As Variant) As Byte
    Public Declare PtrSafe Function SET_CAP_PDN_CAP_DB Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal cap_type As String, ByVal cap_name As String, ByVal c As Double, ByVal esr As Double, ByVal esl As Double, ByVal l_mnt As Double) As Byte
    Public Declare PtrSafe Function GET_CALCULATED_PDN_BGA_VIA Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByRef linear_inductance As Double, ByRef inductance As Double, ByRef resistance As Double) As Byte
    Public Declare PtrSafe Function SET_INPUTS_PDN_BGA_VIA Lib "20nm_pdn_18.0_hid_05_02_64bit.dll" (ByVal outer_diameter As Double, ByVal inner_diameter As Double, ByVal via_pitch As Double, ByVal via_length As Double) As Byte
#Else
    Public Declare Function GET_RAIL_VOLTAGE_RANGE_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal rail_name As String) As String
    Public Declare Function GET_MODEL_STATUS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" () As String
    Public Declare Function UPDATE_CAP_QUANTITY_MAP Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_num As Long, ByVal decap_num As Long, ByVal bulk_num As Long) As Byte
    Public Declare Function LOAD_DATA_FILE_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal data_file As String) As Byte
    Public Declare Function GET_FAMILIES_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByRef families As Variant) As Byte
    Public Declare Function GET_PACKAGES_PDN_DDB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal family As String, ByRef packages As Variant) As Byte
    Public Declare Function CREATE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal pkg As String) As Byte
    Public Declare Function CALCULATE_VRM_PARAMS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal auto_decouple As Long, ByVal calc_feffective As Long, ByVal calc_trans_current As Long, ByVal calc_vripple As Long, ByVal calc_num_via_pairs As Long, ByVal core_clock_frequency As String, ByVal core_clock_cycles_mode As String) As Byte
    Public Declare Function ADD_VRM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" () As Byte
    Public Declare Function REMOVE_LAST_VRM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" () As Byte
    Public Declare Function GET_RAIL_NAMES_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByRef rail_names As Variant) As Byte
    Public Declare Function GET_RAIL_VOLTAGES_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal rail_name As String, ByRef voltages As Variant) As Byte
    Public Declare Function GET_VRM_IDS_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByRef ids As Variant) As Byte
    Public Declare Function GET_RAIL_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal param_name As String, ByVal rail_name As String, ByRef param_value As Variant) As Byte
    Public Declare Function GET_VRM_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal param_name As String, ByVal vrm_id As Long, ByRef param_value As Variant) As Byte
    Public Declare Function GET_CONNECTION_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal rail_name As String, ByVal vrm_id As Long, ByRef connection As Variant) As Byte
    Public Declare Function SET_CONNECTION_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal rail_name As String, ByVal vrm_id As Long, ByVal connection As String) As Byte
    Public Declare Function SET_RAIL_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal param_name As String, ByVal rail_name As String, ByVal param_value As Variant) As Byte
    Public Declare Function SET_VRM_PARAM_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal param_name As String, ByVal vrm_id As Long, ByVal param_value As Variant) As Byte
    Public Declare Function SET_VRM_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal vrm_type As String) As Byte
    Public Declare Function GET_VRM_TYPE_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByRef vrm_type As Variant) As Byte
    Public Declare Function SET_VRM_MODEL_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal vrm_model As String) As Byte
    Public Declare Function GET_VRM_MODEL_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByRef vrm_model As Variant) As Byte
    Public Declare Function GET_CAP_QUANTITY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByRef quantity As Long) As Byte
    Public Declare Function SET_CAP_QUANTITY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByVal quantity As Long) As Byte
    Public Declare Function GET_Z_CAP_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal cap_name As String, ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef z_cap As Variant) As Byte
    Public Declare Function GET_Z_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_id As Long, ByVal z_name As String, ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef z As Variant) As Byte
    Public Declare Function GET_FREQ_ARRAY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal freq1 As Double, ByVal freq2 As Double, ByVal num_points As Long, ByRef freq_array As Variant) As Byte
    Public Declare Sub DESTROY_PDN_SYSTEM Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" ()
    Public Declare Function LOAD_DATA_FILE_PDN_VRM_MODEL_DB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal data_file As String) As Byte
    Public Declare Function GET_VRM_MODEL_NAMES_BY_TYPE_PDN_VRM_MODEL_DB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal vrm_type As String, ByRef vrm_model_names As Variant) As Byte
    Public Declare Function SET_CAP_PDN_CAP_DB Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal cap_type As String, ByVal cap_name As String, ByVal c As Double, ByVal esr As Double, ByVal esl As Double, ByVal l_mnt As Double) As Byte
    Public Declare Function GET_CALCULATED_PDN_BGA_VIA Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByRef linear_inductance As Double, ByRef inductance As Double, ByRef resistance As Double) As Byte
    Public Declare Function SET_INPUTS_PDN_BGA_VIA Lib "20nm_pdn_18.0_hid_05_02_32bit.dll" (ByVal outer_diameter As Double, ByVal inner_diameter As Double, ByVal via_pitch As Double, ByVal via_length As Double) As Byte
#End If
Attribute VB_Name = "PCG"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private current_pcg As Range
Private current_pcg_name As String

Public Function get_pcg_for_family(family As String) As Variant
    Dim pcg_name As String
    Dim pcg_list() As String
    Dim count As Integer
    count = 0
    
    With wksGuidelines
        Dim cell As Excel.Range
        For Each cell In .Range("A1:A62000").Cells
            If cell.value = "end_guidelines" Then
                Exit For
            ElseIf cell.value Like family & "*" Then
                If family <> "Arria_V" Or (family = "Arria_V" And Not cell.value Like "*Arria_V_GZ*") Then
                    pcg_name = Replace(cell.value, family & "_", "")
                    count = count + 1
                    ReDim Preserve pcg_list(count - 1)
                    pcg_list(UBound(pcg_list)) = pcg_name
                End If
            End If
        Next
    End With
    
    Dim i As Long
    For i = 0 To UBound(pcg_list)
        Debug.Print CStr(pcg_list(i))
    Next
    
    get_pcg_for_family = CVar(pcg_list)
End Function

Public Function get_pcg_for_device(family As String, device_rails As Variant) As Variant
    Dim family_pcg_list As Variant
    family_pcg_list = get_pcg_for_family(family)
    
    Dim pcg_list() As String
    ReDim Preserve pcg_list(0) ' we always have the custom option (it's first)
    pcg_list(0) = "Custom"
    
    Dim count As Integer
    count = 1

    Dim i As Long
    For i = 0 To UBound(family_pcg_list)
        If validate_pcg_by_rails(family & "_" & CStr(family_pcg_list(i)), device_rails) Then
            count = count + 1
            ReDim Preserve pcg_list(count - 1)
            pcg_list(UBound(pcg_list)) = CStr(family_pcg_list(i))
        End If
    Next
    
    get_pcg_for_device = CVar(pcg_list)
End Function

Private Function find_pcg(pcg_name As String) As Boolean
    With wksGuidelines
        Dim cell As Excel.Range
        For Each cell In .Range("A1:A62000").Cells
            If cell.value = "end_guidelines" Then
                find_pcg = False
                Exit Function
            ElseIf cell.value = pcg_name Then
                Set current_pcg = cell
                current_pcg_name = pcg_name
                find_pcg = True
                Exit Function
            End If
        Next
    End With
    
    find_pcg = False
End Function

Public Function get_pcg_rails(pcg_name As String) As Variant
    If current_pcg_name <> pcg_name Then
        If Not find_pcg(pcg_name) Then
            Exit Function
        End If
    End If
    
    Dim rail_list() As String
    Dim count As Integer
    count = 0
    
    Dim width As Integer
    width = 0
    Dim height As Integer
    height = 0
    
    ' Expect a cell called "Rails"
    Dim rails_start_row As Integer
    Dim rails_start_col As Integer
    rails_start_col = 1
    
    rails_start_row = find_row_in_pcg_or_throw("Rails")
    
    While current_pcg.Cells(rails_start_row, rails_start_col + width) <> ""
        width = width + 1
    Wend
    
    height = get_last_pcg_row(current_pcg)

    Dim i As Long
    Dim j As Long
    For i = 0 To height
        For j = 1 To width
            If (current_pcg.Cells(rails_start_row + i, rails_start_col + j) <> "") Then
                ReDim Preserve rail_list(count)
                count = count + 1
                rail_list(UBound(rail_list)) = current_pcg.Cells(rails_start_row + i, rails_start_col + j)
            End If
        Next
    Next
    
    get_pcg_rails = CVar(rail_list)
End Function

Public Function get_num_pcg_vrms(pcg_name As String) As Integer
    If current_pcg_name <> pcg_name Then
        If Not find_pcg(pcg_name) Then
            get_num_pcg_vrms = 0
            Exit Function
        End If
    End If
    
    Dim num_vrm As Integer
    num_vrm = 0
    
    Dim id_row As Integer
    id_row = find_row_in_pcg_or_throw("Group #")
    While (current_pcg.Cells(id_row, 2 + num_vrm) <> "")
        num_vrm = num_vrm + 1
    Wend
    
    get_num_pcg_vrms = num_vrm
End Function

Public Function get_vrm_type(pcg_name As String, vrm_id As Integer) As String

    If current_pcg_name <> pcg_name Then
        If Not find_pcg(pcg_name) Then
            get_vrm_type = ""
            Exit Function
        End If
    End If
    
    Dim type_row As Integer
    type_row = find_row_in_pcg_or_throw("Regulator/Separator")
    get_vrm_type = CStr(current_pcg.Cells(type_row, 1 + vrm_id).value)
End Function

Public Function get_vrm_parent(pcg_name As String, vrm_id As Integer) As Integer
    If current_pcg_name <> pcg_name Then
        If Not find_pcg(pcg_name) Then
            get_vrm_parent = 0
            Exit Function
        End If
    End If
    
    Dim parent_row As Integer
    parent_row = find_row_in_pcg_or_throw("Parent group")
    If (current_pcg.Cells(parent_row, 1 + vrm_id) = "none") Then
        get_vrm_parent = 0
    Else
        get_vrm_parent = Int(current_pcg.Cells(parent_row, 1 + vrm_id))
    End If
End Function

Function validate_pcg_by_rails(pcg_name As String, system_rails As Variant) As Boolean
    Dim valid As Boolean
    Dim match_found As Boolean
    
    Dim pcg_rails As Variant
    pcg_rails = get_pcg_rails(pcg_name)
    
    Dim pcg_rail As String
    Dim system_rail As String
    
    If UBound(pcg_rails) = 0 Then
        validate_pcg_by_rails = False
    End If
    
    valid = True

    Dim i As Long
    Dim j As Long
    For j = 0 To UBound(system_rails)
        match_found = False
        For i = 0 To UBound(pcg_rails)
            pcg_rail = CStr(pcg_rails(i))
            system_rail = CStr(system_rails(j))
            match_found = rail_match(pcg_rail, system_rail)
            If match_found Then Exit For
        Next
        
        If Not match_found Then
            valid = False
            Exit For
        End If
    Next
    
    validate_pcg_by_rails = valid
End Function

Function get_rail_info(pcg_name As String, system_rail As String, ByRef vrm_id As Integer, ByRef voltage As Double)
    If current_pcg_name <> pcg_name Then
        If Not find_pcg(pcg_name) Then
            vrm_id = 0
            voltage = 0
            Exit Function
        End If
    End If
    
    vrm_id = 0
    voltage = 0

    Dim i As Long
    Dim pcg_rails As Variant

    pcg_rails = get_pcg_rails(pcg_name)

    For i = 0 To UBound(pcg_rails)
        If rail_match(CStr(pcg_rails(i)), system_rail) Then
            get_pcg_rail_params CStr(pcg_rails(i)), vrm_id, voltage
            Exit Function
        End If
    Next
End Function


Private Function get_pcg_rail_params(pcg_rail As String, ByRef vrm_id As Integer, ByRef voltage As Double)
    vrm_id = 0
    voltage = 0
    Dim width As Integer
    width = 1
    Dim height As Integer
    height = 1
    
    Dim rails_row As Integer
    rails_row = find_row_in_pcg_or_throw("Rails")
    While current_pcg.Cells(rails_row, 1 + width) <> ""
        width = width + 1
    Wend
    
    While current_pcg.Cells(rails_row + height, 1) <> "end_" & current_pcg_name
        height = height + 1
    Wend

    Dim i As Long
    Dim j As Long
    For i = 1 To height
        For j = 1 To width
            If (current_pcg.Cells(rails_row - 1 + i, 1 + j) = pcg_rail) Then
                vrm_id = Int(j)
                voltage = get_voltage(CInt(j))
                Exit Function
            End If
        Next
    Next
End Function

Private Function get_voltage(vrm_id As Integer) As Double
    Dim voltage_row As Integer
    voltage_row = find_row_in_pcg_or_throw("Voltages")
    get_voltage = current_pcg.Cells(voltage_row, 1 + vrm_id).value
End Function


Private Function rail_match(pcg_rail As String, system_rail As String) As Boolean
    rail_match = False
    
    If (system_rail Like "VCCA*" And pcg_rail Like "VCCA*") Then
        rail_match = False
    End If
    
    If (pcg_rail = "VCC" And system_rail = "VCC") Then
        rail_match = True
    ElseIf pcg_rail = "VCCA" Then
        rail_match = (system_rail Like "VCCA_*" And Len(system_rail) <= 6) Xor (system_rail Like "VCCA*" And Len(system_rail) <= 5)
    ElseIf (pcg_rail = "VCCP" And system_rail = "VCCP") Then
        rail_match = True
    ElseIf (pcg_rail = "VCCPGM" And system_rail = "VCCPGM") Then
        rail_match = True
    ElseIf (pcg_rail = "VCC_HPS" And system_rail = "VCC_HPS") Then
        rail_match = True
    ElseIf (Len(system_rail) > 3 And Len(pcg_rail) > 3) And pcg_rail <> "VCCA" And pcg_rail <> "VCCP" And pcg_rail <> "VCC_HPS" Then
        ' all other rails
        
        If Mid$(system_rail, Len(system_rail) - 3, 4) = "_HPS" And Mid$(pcg_rail, Len(pcg_rail) - 3, 4) = "_HPS" Then ' for hps rails
            If system_rail Like "VCCIO*" And pcg_rail Like "VCCIO*" Then
                rail_match = False
            End If
            If InStr(Mid(system_rail, 1, Len(system_rail) - 4), Mid(pcg_rail, 1, Len(pcg_rail) - 4)) Then
                rail_match = True
            End If
        ElseIf Mid$(system_rail, Len(system_rail) - 3, 4) <> "_HPS" Then ' for non hps rails
            If InStr(system_rail, pcg_rail) Then
                rail_match = True
                Exit Function
            End If
        End If
    End If
    
    If system_rail = "VCCA_FPLL" And pcg_rail = "VCCA_PLL" Then
        rail_match = True
    End If
    
End Function

Private Function find_row_in_pcg_or_throw(ByVal to_search As String, Optional ByVal col As Integer = 1)
    Dim row As Integer
    row = find_row_in_pcg(to_search, col)
    If row < 0 Then
        Call Err.Raise(12345, "PCG data", "PCG data syntax error! Could not find " & to_search & "!")
    End If
    find_row_in_pcg_or_throw = row
End Function

Private Function find_row_in_pcg(ByVal to_search As String, Optional ByVal col As Integer = 1)
    Dim row As Integer
    Dim end_row As Integer
    end_row = get_last_pcg_row(current_pcg)
    
    For row = 1 To end_row
        If current_pcg.Cells(row, col) = to_search Then
            find_row_in_pcg = row
            Exit Function
        End If
    Next
    
    find_row_in_pcg = -1
End Function

Private Function get_last_pcg_row(ByVal pcg_start As Range)
    Dim row As Integer
    row = 1
    
    While Not current_pcg.Cells(row, 1) Like "end_*"
        row = row + 1
    Wend
    
    get_last_pcg_row = row - 1
End Function

Attribute VB_Name = "PDN_CAP_DB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function set_bulk_cap(cap_name As String, c As Double, esr As Double, esl As Double, l_mnt As Double) As Boolean
    set_bulk_cap = SET_CAP_PDN_CAP_DB("bulk", cap_name, c, esr, esl, l_mnt)
End Function

Public Function set_decap_cap(cap_name As String, c As Double, esr As Double, esl As Double, l_mnt As Double) As Boolean
    set_decap_cap = SET_CAP_PDN_CAP_DB("decap", cap_name, c, esr, esl, l_mnt)
End Function

Attribute VB_Name = "PDN_CHART"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Const feff_row = 3
Const num_points = 699
Const chart_column = 8
Const freq1 = 1000
Const freq2 = 1000000000

Public Function update_chart(vrm_id As Integer)
    Dim z_col As Integer
    Dim z_name As String
    Dim chart_data As Variant
    Dim cap_num As Integer
    Dim chart_columns As Integer
    
    ' Create the vector based on the number of total cap rows
    cap_num = SYSTEM_DECAP_GUI.get_num_decap_caps + SYSTEM_DECAP_GUI.get_num_bulk_caps
    chart_columns = cap_num + chart_column

    ReDim chart_data(chart_columns, num_points)
    Dim freq_array As Variant
    Dim i As Long
    Dim j As Long
    
    ' Get the frequency vector
    If PDN_SYSTEM.get_freq_array(freq1, freq2, num_points, freq_array) Then
        For i = 0 To num_points - 1
            chart_data(0, i) = IIf(freq_array(i) > 0, freq_array(i), 1E-50)
        Next
    End If
    
    ' Get various vectors of z parameters
    Dim vrm_z_names As Variant
    vrm_z_names = Array("z_target", "z_h", "z_via", "z_spreading", "z_plane", "z_vrm", "z_eff")
    
    For i = LBound(vrm_z_names) To UBound(vrm_z_names)
        Dim z_data As Variant

        z_name = CStr(vrm_z_names(i))
        z_col = get_z_column(z_name)

        If PDN_SYSTEM.get_z(vrm_id, z_name, freq1, freq2, num_points, z_data) Then
            For j = 0 To num_points - 1
                chart_data(z_col - 1, j) = IIf(z_data(j) > 0, z_data(j), 1E-50)
            Next
        End If
    Next
    
    ' Get the cap vector
    Dim cap_name As String
    For i = 1 To SYSTEM_DECAP_GUI.get_num_decap_caps
        cap_name = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "name")
        z_col = get_z_column(cap_name)
        If PDN_SYSTEM.get_z_cap(vrm_id, "decap", cap_name, freq1, freq2, num_points, z_data) Then
            For j = 0 To num_points - 1
                chart_data(z_col - 1, j) = IIf(z_data(j) > 0, z_data(j), 1E-50)
            Next
        End If
    Next
    
    ' Get the bulk cas vector
    For i = 1 To SYSTEM_DECAP_GUI.get_num_bulk_caps
        cap_name = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "name")
        z_col = get_z_column(cap_name)
        If PDN_SYSTEM.get_z_cap(vrm_id, "bulk", cap_name, freq1, freq2, num_points, z_data) Then
            For j = 0 To num_points - 1
                chart_data(z_col - 1, j) = IIf(z_data(j) > 0, z_data(j), 1E-50)
            Next
        End If
    Next
    
    With wksChart
        .Range(.Cells(3, 3), .Cells(702, chart_columns + 2)).value = Application.Transpose(chart_data)
    End With
    
    ' Pop the Cap name to the hidden chart sheet
    For i = 9 To chart_columns
        wksChart.Cells(2, i + 2).value = "Zc" & (i - 8)
    Next
    
    ' Clear several columns after the last cap, so that we know
    ' exactly which column is the last column
    wksChart.Cells(2, chart_columns + 3).value = "N/A"
    wksChart.Cells(2, chart_columns + 4).value = "N/A"
    
    ' Add or remove cap lines to or from the graph
    update_chart_series wksChart, wksSystemDecap.ChartObjects(1).Chart, chart_columns
    update_chart_series wksChart, wksEnlargedGraph.ChartObjects(1).Chart, chart_columns

    Dim feff As Double
    PDN_SYSTEM.get_feffective vrm_id, feff
    populate_feffective feff
     
    refresh_charts
End Function

Private Sub update_chart_series(wks As Worksheet, cht As Chart, num_columns As Integer)
    Dim num_series As Integer
    Dim i As Integer

    num_series = cht.SeriesCollection.count

    unprotect_worksheet cht.Parent.Parent ' unprotect the containing worksheet

    If num_columns > num_series Then
        ' Our worksheet has more columns than our chart, so we need to add more
        ' series to the chart.
        For i = num_series To num_columns
            add_series_to_chart wks, cht, i
        Next
    ElseIf num_columns < num_series Then
        ' We need to remove series from the chart.
        For i = num_columns To num_series - 1
            cht.SeriesCollection(num_columns + 1).Delete
        Next
    End If

    protect_worksheet cht.Parent.Parent ' re-protect the containing worksheet
End Sub

Private Sub add_series_to_chart(wks As Worksheet, Chart As Chart, series_index As Integer)
    Dim title As String
    Dim data_begin As String
    Dim data_end As String

    title = wks.Cells(2, series_index + 2).Address
    data_begin = wks.Cells(3, series_index + 2).Address
    data_end = wks.Cells(3 + series_index - 1, series_index + 2).Address

    With Chart.SeriesCollection.NewSeries
        .formula = "=SERIES(Chart!" & title & ",Chart!$C$3:$C$701,Chart!" & data_begin & ":" & data_end & "," & series_index & ")"
    End With
End Sub

Private Function populate_feffective(feffective As Double)
    feffective = feffective * 1000000
    If feffective <= 0 Then
        feffective = 1000000000000#
    End If
    
    wksChart.Cells(feff_row, 1) = feffective
    wksChart.Cells(feff_row + 1, 1) = feffective
End Function

Private Function refresh_charts()
'SendKeys "%^{F9}"
Application.Calculate
DoEvents
End Function


Private Function get_z_column(z_name As String) As Integer
    If Left(z_name, 2) = "Zc" Then
        If Len(z_name) = 3 Then
            get_z_column = Int(Right(z_name, 1)) + 8
        ElseIf Len(z_name) = 4 Then
            get_z_column = Int(Right(z_name, 2)) + 8
        End If
    Else
        Select Case z_name
            Case "z_vrm"
                get_z_column = 2
            Case "z_plane"
                get_z_column = 3
            Case "z_spreading"
                get_z_column = 4
            Case "z_via"
                get_z_column = 5
            Case "z_h"
                get_z_column = 6
            Case "z_eff"
                get_z_column = 7
            Case "z_target"
                get_z_column = 8
        End Select
    End If
End Function
Attribute VB_Name = "PDN_DDB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_data_file As String

Public Function load_data_file(ByVal data_file As String) As Boolean
    load_data_file = LOAD_DATA_FILE_PDN_DDB(data_file)
End Function

Public Static Function get_families(ByRef families As Variant) As Boolean
    get_families = GET_FAMILIES_PDN_DDB(families)
End Function

Public Static Function get_packages(ByVal family As String, ByRef packages As Variant) As Boolean
    get_packages = GET_PACKAGES_PDN_DDB(family, packages)
End Function


Attribute VB_Name = "PDN_SYSTEM"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_pkg As String

Private m_rail_names As Variant
Private m_vrm_ids As Variant
Private m_model_status As String

Private Sub Class_Terminate()
    Call DESTROY_PDN_SYSTEM
End Sub

Public Sub update_cap_quantity(vrm_num As Long, decap_num As Long, bulk_num As Long)
    Call UPDATE_CAP_QUANTITY_MAP(vrm_num, decap_num, bulk_num)
End Sub

Public Function get_rail_voltages(rail_name As String, voltages As Variant) As Boolean
    get_rail_voltages = GET_RAIL_VOLTAGES_PDN_SYSTEM(rail_name, voltages)

    'convert form mV to V
    Dim i As Long
    For i = 0 To UBound(voltages)
        voltages(i) = voltages(i) / 1000
    Next
End Function

Public Function get_rail_voltage(rail_name As String, ByRef voltage As Double) As Boolean
    Dim var_voltage As Variant
    get_rail_voltage = GET_RAIL_PARAM_PDN_SYSTEM("voltage", rail_name, var_voltage)
    voltage = CLng(var_voltage) / 1000
End Function

Public Function get_rail_current(rail_name As String, ByRef current As Double) As Boolean
    Dim var_current As Variant
    get_rail_current = GET_RAIL_PARAM_PDN_SYSTEM("current", rail_name, var_current)
    current = CLng(var_current) / 1000
End Function

Public Function get_vrm_ids() As Variant
    get_vrm_ids = m_vrm_ids
End Function

Public Function get_rail_names() As Variant
    get_rail_names = m_rail_names
End Function

Public Function get_model_status() As String
    get_model_status = m_model_status
End Function

Public Function get_rail_voltage_range_type(rail_name As String) As String
    Dim rail_voltage_range_type As String
    rail_voltage_range_type = GET_RAIL_VOLTAGE_RANGE_TYPE_PDN_SYSTEM(rail_name)
    Debug.Print "Rail:", rail_name, "range type:", rail_voltage_range_type
    get_rail_voltage_range_type = rail_voltage_range_type
End Function

Public Function set_rail_voltage(rail_name As String, voltage As Double) As Boolean
    Dim intVoltage As Long
    intVoltage = CLng(voltage * 1000000)
    intVoltage = intVoltage / 1000
    set_rail_voltage = SET_RAIL_PARAM_PDN_SYSTEM("voltage", rail_name, CVar(intVoltage))
End Function

Public Function set_rail_current(rail_name As String, current As Double) As Boolean
    Dim intCurrent As Long
    intCurrent = CLng(current * 1000000)
    intCurrent = intCurrent / 1000
    set_rail_current = SET_RAIL_PARAM_PDN_SYSTEM("current", rail_name, CVar(intCurrent))
End Function

Public Function set_connection(rail_name As String, vrm_id As Integer, connection As String) As Boolean
    set_connection = SET_CONNECTION_PDN_SYSTEM(rail_name, vrm_id, connection)
End Function

Public Function set_parent_vrm(vrm_id As Integer, parent_vrm_id As Integer) As Boolean
     set_parent_vrm = SET_VRM_PARAM_PDN_SYSTEM("parent_vrm", vrm_id, CVar(parent_vrm_id))
End Function

Public Function create_pkg(ByVal pkg As String, Optional force_create As Boolean = False) As Boolean
    If pkg <> m_pkg Or force_create Then
        m_pkg = pkg
        
        Call destroy_current

        Dim success As Boolean
        success = CREATE_PDN_SYSTEM(m_pkg)
        If success Then
            GET_RAIL_NAMES_PDN_SYSTEM m_rail_names
            GET_VRM_IDS_PDN_SYSTEM m_vrm_ids

            m_model_status = GET_MODEL_STATUS_PDN_SYSTEM
        End If

        create_pkg = success
    Else
        create_pkg = False
    End If
End Function

Public Function add_vrm() As Boolean
    add_vrm = ADD_VRM_PDN_SYSTEM()
    GET_VRM_IDS_PDN_SYSTEM m_vrm_ids
End Function

Public Function remove_last_vrm() As Boolean
    remove_last_vrm = REMOVE_LAST_VRM_PDN_SYSTEM()
    GET_VRM_IDS_PDN_SYSTEM m_vrm_ids
End Function

Public Function calculate_vrm_parameters(vrm_id As Long, auto_decouple As Boolean, calc_feffective As Boolean, calc_trans_current As Boolean, calc_vripple As Boolean, calc_num_via_pairs As Boolean, core_clock_frequency_mode As String, core_clock_cycles_mode As String) As Boolean
    calculate_vrm_parameters = CALCULATE_VRM_PARAMS_PDN_SYSTEM(vrm_id, auto_decouple, calc_feffective, calc_trans_current, calc_vripple, calc_num_via_pairs, core_clock_frequency_mode, core_clock_cycles_mode)
End Function
Private Function destroy_current()
    Call DESTROY_PDN_SYSTEM
End Function

'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'                      Getters
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Public Function get_connection(rail_name As String, vrm_id As Integer, ByRef connection As String) As Boolean
    Dim var_connection As Variant
    get_connection = GET_CONNECTION_PDN_SYSTEM(rail_name, vrm_id, var_connection)
    connection = CStr(var_connection)
End Function

Public Function get_vrm_type(vrm_id As Integer, ByRef vrm_type As String) As Boolean
    Dim var_vrm_type As Variant
    get_vrm_type = GET_VRM_TYPE_PDN_SYSTEM(vrm_id, var_vrm_type)
    vrm_type = CStr(var_vrm_type)
End Function

Public Function get_parent_vrm_id(vrm_id As Integer, ByRef parent_vrm_id As Integer) As Boolean
    Dim var_parent_vrm_id As Variant
    get_parent_vrm_id = GET_VRM_PARAM_PDN_SYSTEM("parent_vrm", vrm_id, var_parent_vrm_id)
    parent_vrm_id = CInt(var_parent_vrm_id)
End Function

Public Function get_vrm_model(vrm_id As Integer, ByRef vrm_model As String) As Boolean
    Dim var_vrm_model As Variant
    get_vrm_model = GET_VRM_MODEL_PDN_SYSTEM(vrm_id, var_vrm_model)
    vrm_model = CStr(var_vrm_model)
End Function

Public Function get_core_clock_frequency(vrm_id As Integer, ByRef core_clock_frequency As Double) As Boolean
    Dim var_core_clock_frequency As Variant
    get_core_clock_frequency = GET_VRM_PARAM_PDN_SYSTEM("core_clock_frequency", vrm_id, var_core_clock_frequency)
    core_clock_frequency = var_core_clock_frequency
End Function

Public Function get_core_clock_cycles(vrm_id As Integer, ByRef core_clock_cycles As Integer) As Boolean
    Dim var_core_clock_cycles As Variant
    get_core_clock_cycles = GET_VRM_PARAM_PDN_SYSTEM("core_clock_cycles", vrm_id, var_core_clock_cycles)
    core_clock_cycles = var_core_clock_cycles
End Function

Public Function get_supply_voltage(vrm_id As Integer, ByRef supply_voltage As Double) As Boolean
    Dim var_supply_voltage As Variant
    get_supply_voltage = GET_VRM_PARAM_PDN_SYSTEM("supply_voltage", vrm_id, var_supply_voltage)
    supply_voltage = CLng(var_supply_voltage) / 1000
End Function

Public Function get_vrm_efficiency(vrm_id As Integer, ByRef vrm_efficiency As Double) As Boolean
    Dim var_vrm_efficiency As Variant
    get_vrm_efficiency = GET_VRM_PARAM_PDN_SYSTEM("vrm_efficiency", vrm_id, var_vrm_efficiency)
    vrm_efficiency = CLng(var_vrm_efficiency) / 100
End Function

Public Function get_vrm_r(vrm_id As Integer, ByRef vrm_r As Double) As Boolean
    Dim var_vrm_r As Variant
    get_vrm_r = GET_VRM_PARAM_PDN_SYSTEM("vrm_r", vrm_id, var_vrm_r)
    vrm_r = CDbl(var_vrm_r)
End Function

Public Function get_vrm_l(vrm_id As Integer, ByRef vrm_l As Double) As Boolean
    Dim var_vrm_l As Variant
    get_vrm_l = GET_VRM_PARAM_PDN_SYSTEM("vrm_l", vrm_id, var_vrm_l)
    vrm_l = CDbl(var_vrm_l)
End Function

Public Function get_via_r(vrm_id As Integer, ByRef via_r As Double) As Boolean
    Dim var_via_r As Variant
    get_via_r = GET_VRM_PARAM_PDN_SYSTEM("via_r", vrm_id, var_via_r)
    via_r = CDbl(var_via_r)
End Function

Public Function get_via_l(vrm_id As Integer, ByRef via_l As Double) As Boolean
    Dim var_via_l As Variant
    get_via_l = GET_VRM_PARAM_PDN_SYSTEM("via_l", vrm_id, var_via_l)
    via_l = CDbl(var_via_l)
End Function

Public Function get_num_via_pairs(vrm_id As Integer, ByRef num_via_pairs As Integer) As Boolean
    Dim var_num_via_pairs As Variant
    get_num_via_pairs = GET_VRM_PARAM_PDN_SYSTEM("via_pairs", vrm_id, var_num_via_pairs)
    num_via_pairs = CInt(var_num_via_pairs)
End Function

Public Function get_spreading_r(vrm_id As Integer, ByRef spreading_r As Double) As Boolean
    Dim var_spreading_r As Variant
    get_spreading_r = GET_VRM_PARAM_PDN_SYSTEM("spreading_r", vrm_id, var_spreading_r)
    spreading_r = CDbl(var_spreading_r)
End Function

Public Function get_spreading_l(vrm_id As Integer, ByRef spreading_l As Double) As Boolean
    Dim var_spreading_l As Variant
    get_spreading_l = GET_VRM_PARAM_PDN_SYSTEM("spreading_l", vrm_id, var_spreading_l)
    spreading_l = CDbl(var_spreading_l)
End Function

Public Function get_plane_r(vrm_id As Integer, ByRef plane_r As Double) As Boolean
    Dim var_plane_r As Variant
    get_plane_r = GET_VRM_PARAM_PDN_SYSTEM("plane_r", vrm_id, var_plane_r)
    plane_r = CDbl(var_plane_r)
End Function

Public Function get_plane_c(vrm_id As Integer, ByRef plane_c As Double) As Boolean
    Dim var_plane_c As Variant
    get_plane_c = GET_VRM_PARAM_PDN_SYSTEM("plane_c", vrm_id, var_plane_c)
    plane_c = CDbl(var_plane_c)
End Function

Public Function get_vripple(vrm_id As Integer, ByRef vripple As Double) As Boolean
    Dim var_vripple As Variant
    get_vripple = GET_VRM_PARAM_PDN_SYSTEM("vripple", vrm_id, var_vripple)
    vripple = CDbl(var_vripple) / 100
End Function

Public Function get_trans_current(vrm_id As Integer, ByRef trans_current As Double) As Boolean
    Dim var_trans_current As Variant
    get_trans_current = GET_VRM_PARAM_PDN_SYSTEM("trans_current", vrm_id, var_trans_current)
    trans_current = CDbl(var_trans_current) / 100
End Function

Public Function get_ztarget_flat(vrm_id As Integer, ByRef ztarget As Double) As Boolean
    Dim var_ztarget As Variant
    get_ztarget_flat = GET_VRM_PARAM_PDN_SYSTEM("ztarget_flat", vrm_id, var_ztarget)
    ztarget = CDbl(var_ztarget)
End Function

Public Function get_vrm_rail_voltage(vrm_id As Integer, vrm_rail_voltage As Double) As Boolean
    Dim var_vrm_rail_voltage As Variant
    get_vrm_rail_voltage = GET_VRM_PARAM_PDN_SYSTEM("vrm_rail_voltage", vrm_id, var_vrm_rail_voltage)
    vrm_rail_voltage = CDbl(var_vrm_rail_voltage) / 1000
End Function

Public Function get_total_current(vrm_id As Integer, total_current As Double) As Boolean
    Dim var_total_current As Variant
    get_total_current = GET_VRM_PARAM_PDN_SYSTEM("total_current", vrm_id, var_total_current)
    total_current = CDbl(var_total_current) / 1000
End Function

Public Function get_vrm_input_current(vrm_id As Integer, vrm_input_current As Double) As Boolean
    Dim var_vrm_input_current As Variant
    get_vrm_input_current = GET_VRM_PARAM_PDN_SYSTEM("vrm_input_current", vrm_id, var_vrm_input_current)
    vrm_input_current = CDbl(var_vrm_input_current) / 1000
End Function

Public Function get_feffective(vrm_id As Integer, feffective As Double) As Boolean
    Dim var_feffective As Variant
    get_feffective = GET_VRM_PARAM_PDN_SYSTEM("feffective", vrm_id, var_feffective)
    feffective = CDbl(var_feffective)
End Function

Public Function get_cap_quantity(vrm_id As Integer, cap_type As String, cap_name As String, ByRef quantity As Long) As Boolean
    get_cap_quantity = GET_CAP_QUANTITY_PDN_SYSTEM(vrm_id, cap_name, quantity)
End Function

Public Function get_z_cap(vrm_id As Integer, cap_type As String, cap_name As String, freq1 As Double, freq2 As Double, num_points As Long, z As Variant) As Boolean
    get_z_cap = GET_Z_CAP_PDN_SYSTEM(vrm_id, cap_name, freq1, freq2, num_points, z)
End Function

Public Function get_z(vrm_id As Integer, z_name As String, freq1 As Double, freq2 As Double, num_points As Long, z As Variant) As Boolean
    Dim z_ref As Variant
    get_z = GET_Z_PDN_SYSTEM(vrm_id, z_name, freq1, freq2, num_points, z_ref)
    z = z_ref
End Function

Public Function get_freq_array(freq1 As Double, freq2 As Double, num_points As Long, freq_array As Variant)
    get_freq_array = GET_FREQ_ARRAY_PDN_SYSTEM(freq1, freq2, num_points, freq_array)
End Function


'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'                       Setters
'//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Public Function set_vrm_type(vrm_id As Integer, vrm_type As String) As Boolean
    set_vrm_type = SET_VRM_TYPE_PDN_SYSTEM(vrm_id, vrm_type)
End Function

Public Function set_vrm_model(vrm_id As Integer, vrm_model As String) As Boolean
    set_vrm_model = SET_VRM_MODEL_PDN_SYSTEM(vrm_id, vrm_model)
End Function

Public Function set_supply_voltage(vrm_id As Integer, supply_voltage As Double) As Boolean
    Dim int_supply_voltage As Long
    int_supply_voltage = CLng(supply_voltage * 1000)
    set_supply_voltage = SET_VRM_PARAM_PDN_SYSTEM("supply_voltage", vrm_id, int_supply_voltage)
End Function

Public Function set_vrm_efficiency(vrm_id As Integer, vrm_efficiency As Double) As Boolean
    Dim int_vrm_efficiency As Long
    int_vrm_efficiency = CLng(vrm_efficiency * 100)
    set_vrm_efficiency = SET_VRM_PARAM_PDN_SYSTEM("vrm_efficiency", vrm_id, int_vrm_efficiency)
End Function

Public Function set_vrm_r(vrm_id As Integer, vrm_r As Double) As Boolean
    set_vrm_r = SET_VRM_PARAM_PDN_SYSTEM("vrm_r", vrm_id, vrm_r)
End Function

Public Function set_vrm_l(vrm_id As Integer, vrm_l As Double) As Boolean
    set_vrm_l = SET_VRM_PARAM_PDN_SYSTEM("vrm_l", vrm_id, vrm_l)
End Function

Public Function set_via_r(vrm_id As Integer, via_r As Double) As Boolean
    set_via_r = SET_VRM_PARAM_PDN_SYSTEM("via_r", vrm_id, via_r)
End Function

Public Function set_via_l(vrm_id As Integer, via_l As Double) As Boolean
    set_via_l = SET_VRM_PARAM_PDN_SYSTEM("via_l", vrm_id, via_l)
End Function

Public Function set_num_via_pairs(vrm_id As Integer, num_via_pairs As Integer) As Boolean
    set_num_via_pairs = SET_VRM_PARAM_PDN_SYSTEM("via_pairs", vrm_id, num_via_pairs)
End Function

Public Function set_spreading_r(vrm_id As Integer, spreading_r As Double) As Boolean
    set_spreading_r = SET_VRM_PARAM_PDN_SYSTEM("spreading_r", vrm_id, spreading_r)
End Function

Public Function set_spreading_l(vrm_id As Integer, spreading_l As Double) As Boolean
    set_spreading_l = SET_VRM_PARAM_PDN_SYSTEM("spreading_l", vrm_id, spreading_l)
End Function

Public Function set_plane_r(vrm_id As Integer, plane_r As Double) As Boolean
    set_plane_r = SET_VRM_PARAM_PDN_SYSTEM("plane_r", vrm_id, plane_r)
End Function

Public Function set_plane_c(vrm_id As Integer, plane_c As Double) As Boolean
    set_plane_c = SET_VRM_PARAM_PDN_SYSTEM("plane_c", vrm_id, plane_c)
End Function

Public Function set_transient(vrm_id As Integer, transient As Long) As Boolean
    set_transient = SET_VRM_PARAM_PDN_SYSTEM("trans_current", vrm_id, transient)
End Function

Public Function set_vripple(vrm_id As Integer, vripple As Long) As Boolean
    set_vripple = SET_VRM_PARAM_PDN_SYSTEM("vripple", vrm_id, vripple)
End Function

Public Function set_feffective(vrm_id As Integer, feffective As Double) As Boolean
    set_feffective = SET_VRM_PARAM_PDN_SYSTEM("feffective", vrm_id, feffective)
End Function

Public Function set_core_clock_cycles(vrm_id As Integer, cycles As Integer) As Boolean
    set_core_clock_cycles = SET_VRM_PARAM_PDN_SYSTEM("core_clock_cycles", vrm_id, cycles)
End Function

Public Function set_core_clock_frequency(vrm_id As Integer, frequency As Double) As Boolean
    set_core_clock_frequency = SET_VRM_PARAM_PDN_SYSTEM("core_clock_frequency", vrm_id, frequency)
End Function

Public Function set_cap_quantity(vrm_id As Integer, cap_type As String, cap_name As String, quantity As Long) As Boolean
    set_cap_quantity = SET_CAP_QUANTITY_PDN_SYSTEM(vrm_id, cap_name, quantity)
End Function

Attribute VB_Name = "PDN_VRM_MODEL_DB"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function load_data_file(ByVal data_file As String) As Boolean
    load_data_file = LOAD_DATA_FILE_PDN_VRM_MODEL_DB(data_file)
End Function

Public Static Function get_vrm_model_names_by_type(ByVal vrm_type As String, ByRef vrm_model_names As Variant) As Boolean
    get_vrm_model_names_by_type = GET_VRM_MODEL_NAMES_BY_TYPE_PDN_VRM_MODEL_DB(vrm_type, vrm_model_names)
End Function
Attribute VB_Name = "PlaneCap"
Option Explicit

Function plane_cap_event_handler(ByVal target As Range)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    On Error GoTo ErrHandler

    update_plane_values

    Exit Function

ErrHandler:
    Call ErrorHandler("plane_cap_event_handler")
End Function

Function plane_cap_activate()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    On Error GoTo ErrHandler
        
    update_plane_values
    
    Exit Function

ErrHandler:
    Call ErrorHandler("plane_cap_activate")
End Function

Function update_plane_values()
    wksPlaneCap.Range("rngPlaneDielectricValue1").value = Application.WorksheetFunction.VLookup(Range("rngPlaneDielectric1"), Range("rngLibDielectric"), 2, False)
    wksPlaneCap.Range("rngPlaneDielectricValue2").value = Application.WorksheetFunction.VLookup(Range("rngPlaneDielectric2"), Range("rngLibDielectric"), 2, False)
    
    wksPlaneCap.Range("rngPlaneC1").value = Calc_C(Range("rngPlaneLen").value, Range("rngPlaneWidth").value, Range("rngPlaneH1").value, Range("rngPlaneDielectricValue1").value)
    wksPlaneCap.Range("rngPlaneC2").value = Calc_C(Range("rngPlaneLen").value, Range("rngPlaneWidth").value, Range("rngPlaneH2").value, Range("rngPlaneDielectricValue2").value)
    wksPlaneCap.Range("rngPlaneCTotal").value = wksPlaneCap.Range("rngPlaneC1").value + wksPlaneCap.Range("rngPlaneC2").value
    wksPlaneCap.Range("rngPlaneRTotal").value = Calc_Rsheet(Range("rngPlaneLen").value, Range("rngPlaneWidth").value, Range("rngPlaneMetalThickness").value, Range("rngPlaneC1").value, Range("rngPlaneC2").value)
End Function

Function Calc_C(Length, width, height, Er)
    Const Eo As Double = 2.25E-16               ' in Farads per mil
    Dim c As Double
       
    If (height > 0) Then
        c = ((Eo * Length * width * Er) / height) * 1000000
    Else
        c = 0
    End If
    
    Calc_C = c
End Function

Function Calc_Rsheet(Length, width, t, C1, C2)
    Const Conductivity As Double = 58000000    ' 1/ohm-m

    Dim Skin_Depth_100Mhz As Single
    Dim Conductor_Thickness As Single
    Dim Loop_R_Per_Sq_DC As Single
    Dim Loop_R_Per_Sq_100Mhz As Single
    Dim Number_Squares As Single
    Dim Number_Plane_Pairs As Single
    Dim Loop_R_DC As Single
    Dim Loop_R_100Mhz As Single
    
    Skin_Depth_100Mhz = 1000 * Sqr(1 / (3.14159265 * (100000000) * (400 * 3.14159265 * 0.000000001) * Conductivity))
    Conductor_Thickness = 1000000 * t / 39000
    
    If (Conductor_Thickness > 0) Then
        Loop_R_Per_Sq_DC = 1000000000 / (Conductivity * Conductor_Thickness) * 2
        Loop_R_Per_Sq_100Mhz = 1000000000 / (Conductivity * Min(Conductor_Thickness, Skin_Depth_100Mhz * 1000)) * 2
    Else
        Loop_R_Per_Sq_DC = 0
        Loop_R_Per_Sq_100Mhz = 0
    End If
    
    If (Length > 0 And width > 0) Then
        Number_Squares = Min((Length / width), (width / Length))
    Else
        Number_Squares = 0
    End If
    
    If (C1 > 0 And C2 > 0) Then
        Number_Plane_Pairs = 2
    Else
        If (C1 > 0 Or C2 > 0) Then
            Number_Plane_Pairs = 1
        Else
            Number_Plane_Pairs = 0
        End If
    End If
    
    If (Number_Plane_Pairs > 0) Then
        Loop_R_DC = Number_Squares * Loop_R_Per_Sq_DC / Number_Plane_Pairs
        Loop_R_100Mhz = Number_Squares * Loop_R_Per_Sq_100Mhz / Number_Plane_Pairs
    Else
        Loop_R_DC = 0
        Loop_R_100Mhz = 0
    End If
    
    Calc_Rsheet = Loop_R_100Mhz / 1000
End Function

Function Min(Value1, Value2)
    If (Value1 <= Value2) Then
        Min = Value1
    Else
        Min = Value2
    End If
End Function

Function get_plane_h1()
    get_plane_h1 = wksPlaneCap.Range("E31").value
End Function

Function get_plane_h2()
    get_plane_h2 = wksPlaneCap.Range("E32").value
End Function

' These getters reference a hidden 'PlaneCap' sheet which is where the PDN Tool
' stashes some hidden values. This table has three columns:
'   1. the VRM ID, really just a number from 1 to the number of VRMs;
'   2. the plane sheet resistrance; and
'   3. the plane sheet capacitance.
' Further confusing matters is that while the size of this table (that is, the
' named ranges that span it) is adjusted as the number of VRMs in the design is
' modified, the actual values in the table aren't populated -- even with
' default values -- until the user clicks the "Import" button on the Plane_Cap
' sheet.
Function get_plane_total_c(vrm_id As Integer)
    get_plane_total_c = wksPlaneCap_Default.Range("rngHiddenPlaneC").Cells(vrm_id, 1).value
End Function

Function get_plane_total_r(vrm_id As Integer)
    get_plane_total_r = wksPlaneCap_Default.Range("rngHiddenPlaneR").Cells(vrm_id, 1).value
End Function
Attribute VB_Name = "RELEASE_NOTES"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_SupportedDevices As String
Private m_SupportedDevicesDirty As Boolean

Public Sub MaybeUpdateSupportedDevices()
    ' We defer updating the supported devices list until the user actively
    ' switches to the Release Notes sheets because it causes the PDN Tool
    ' to flicker if we do this during the initial GUI setup.
    If Not m_SupportedDevicesDirty Then
        Exit Sub
    End If

    Dim devices As String

    protect_worksheet wksReleaseNotes
    devices = "Supported Devices: " & m_SupportedDevices
    Debug.Print devices
    wksReleaseNotes.Range("rngIntroductionSupportedDevices").value = "'" & devices

    m_SupportedDevicesDirty = False
End Sub

Public Property Let SupportedDevices(devices As String)
    m_SupportedDevices = devices
    m_SupportedDevicesDirty = True
End Property
Attribute VB_Name = "RESOURCE_MANAGER"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' $Header$

'This module is responsible for packing/unpacking support files, as well as linking to them.
'This will typically happen when when the spreadsheet loads

Option Explicit

'API Calls:
'----------
'GetTempPath: Retrieves the path of the directory designated for temporary files.
'SetCurrentDirectory: Changes the current directory so that the DLL can be loaded
'inf_vb: Decompresses file using zlib
'Required libraries: kernel32 (part of Windows, so no additional ones required)

#If VBA7 And Win64 Then
    Private Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
    Private Declare PtrSafe Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal PathName As String) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    
    Private Declare PtrSafe Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (lpMutexAttributes As Any, ByVal bInitialOwner As Long, ByVal lpName As String) As Long
    Private Declare PtrSafe Function ReleaseMutex Lib "kernel32" (ByVal hMutex As Long) As Long
    Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
    Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

    Private Declare PtrSafe Function LoadLibraryEx Lib "kernel32" Alias "LoadLibraryExA" (ByVal lpLibFileName As String, ByVal hFile As Long, ByVal dwFlags As Long) As LongPtr
    Private Declare PtrSafe Function FreeLibrary Lib "kernel32" (ByVal hLibModule As LongPtr) As Long
#Else
    Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
    Private Declare Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal PathName As String) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
    
    Private Declare Function CreateMutex Lib "kernel32" Alias "CreateMutexA" (lpMutexAttributes As Any, ByVal bInitialOwner As Long, ByVal lpName As String) As Long
    Private Declare Function ReleaseMutex Lib "kernel32" (ByVal hMutex As Long) As Long
    Private Declare Function WaitForSingleObject Lib "kernel32" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
    Private Declare Function CloseHandle Lib "kernel32" (ByVal hObject As Long) As Long

    Private Declare Function LoadLibraryEx Lib "kernel32" Alias "LoadLibraryExA" (ByVal lpLibFileName As String, ByVal hFile As Long, ByVal dwFlags As Long) As Long
    Private Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long
#End If

Private Const MAX_PATH As Long = 256
Private Const MAX_WORKSHEET_NAME_LENGTH As Integer = 31

Private Const MAX_COLUMNS As Long = 256
Private Const MAX_ROWS As Long = 65536

'An Excel 2003 spreadsheet can fit 32K - 1 characters inside a cell (I guess that extra 1 is reserved for a terminator)
Private Const MAX_CHARS_PER_CELL As Long = 32764

Private Const SHEET_NAME = "PDN_RESOURCES"

Private m_temp_path As String

' Mutex variables
Private unpack_mutex As Long

' Should be identical to constants in kernel32
Private Const MUTEX_ALL_ACCESS = &H1F0001
Private Const INFINITE = &HFFFF

' Ref. https://msdn.microsoft.com/en-us/library/ms682586(v=vs.85).aspx
Private Const LOAD_WITH_ALTERED_SEARCH_PATH = &H8
#If VBA7 And Win64 Then
    Private DllHandles() As LongPtr
#Else
    Private DllHandles() As Long
#End If

Public Function get_temp_path() As String
    get_temp_path = m_temp_path
End Function

' Release mutex, and simply print err msg on error
' If there already is an error (err = True) then ignore displaying errors
Private Sub release_mutex_with_err_handle(mut As Long, Err As Boolean)
    Dim release_result As Long, close_handle_result As Long
    release_result = ReleaseMutex(mut)
    If Not Err And release_result = 0 Then
        'DisplayError "Error releasing a mutex lock!"
    Else
        close_handle_result = CloseHandle(unpack_mutex)
        If Not Err And close_handle_result = 0 Then
            'DisplayError "Error with closing handle! Please restart the EPE!"
        End If
    End If
        
End Sub

'Dependecies: Windows Scripting Host Object Model (for FileSystemObject) - C:\windows\system32\wshom.ocx

'Create a new worksheet and pack files in it
Public Sub Pack(files As Variant, family As String)
    If Not IsArray(files) Then
        Exit Sub
    End If

    Dim i As Integer
    Dim FileName As String
    
    ' If there's an existing resources sheet, remove it first.
    If SheetExists(SHEET_NAME, ThisWorkbook) Then
        Application.DisplayAlerts = False
        ThisWorkbook.Worksheets(SHEET_NAME).Visible = xlSheetVisible
        ThisWorkbook.Worksheets(SHEET_NAME).Delete
        Application.DisplayAlerts = True
    End If

    ' Create a new worksheet to hold our external resource data.
    Dim NewWorksheet As Worksheet
    Set NewWorksheet = ThisWorkbook.Worksheets.Add(Type:=xlWorksheet)
    NewWorksheet.name = SHEET_NAME
        
    NewWorksheet.Cells(1, 1) = UBound(files) + 1 ' number of files to pack
    For i = 0 To UBound(files)
        ' Nuke worksheet if it already exists
        FileName = Mid(files(i), InStrRev(files(i), "\") + 1)
        Debug.Print "Packing " & FileName
        
        ' If this file is a dll, add the family name in front of the dll name
        ' So that different versions of pdn can be opened together
        If Right(FileName, 4) = ".dll" Then
           FileName = family & "_" & FileName
        End If
        
        NewWorksheet.Cells(i + 1, 2) = FileName 'save filename
        Encode CStr(files(i)), NewWorksheet.Cells(i + 1, 3) ' pack filename
    Next

    NewWorksheet.Visible = xlSheetVeryHidden ' hide sheet
End Sub

Private Function generate_temp_path() As String

    Dim fso As New FileSystemObject
    Dim temp_dir As String
    Dim temp_path As String
    
    temp_path = String$(MAX_PATH, vbNullChar)
    GetTempPath MAX_PATH, temp_path
    temp_path = TrimNull(temp_path)
    If Not fso.FolderExists(temp_path) Then
        'DisplayError "Couldn't extract controller files! Please contact Altera support!"
        generate_temp_path = ""
        Exit Function
    End If
    
    temp_path = temp_path & "PDN_Tool\"
    If Len(Dir(temp_path, vbDirectory)) = 0 Then
        MkDir temp_path
    End If
    
    temp_path = temp_path & FAMILY_NAME & "\"
    If Len(Dir(temp_path, vbDirectory)) = 0 Then
        MkDir temp_path
    End If
    
    temp_path = temp_path & wksReleaseNotes.Range("L3:L3").value & "\"
    If Len(Dir(temp_path, vbDirectory)) = 0 Then
        MkDir temp_path
    End If
    
    temp_path = temp_path & wksReleaseNotes.Range("N3:N3").value & "\"
    If Len(Dir(temp_path, vbDirectory)) = 0 Then
        MkDir temp_path
    End If
    
    If Len(Dir(temp_path, vbDirectory)) <> 0 Then
        generate_temp_path = temp_path
        m_temp_path = temp_path
    Else
        generate_temp_path = ""
        m_temp_path = ""
    End If
    
End Function

Public Function Unpack() As Boolean
    ' Create Mutex
    unpack_mutex = CreateMutex(MUTEX_ALL_ACCESS, 0, "PDN_Mutex")
    If unpack_mutex = 0 Then
        Debug.Print "Couldn't create 'PDN_Mutex'!"
        
    End If

    Dim wait_result As Long
    wait_result = WaitForSingleObject(unpack_mutex, INFINITE)
    If wait_result <> 0 Then
        Debug.Print "Issue with passing on a mutex lock!"
    End If

    Unpack = UnpackInternal()

    Call release_mutex_with_err_handle(unpack_mutex, True)
End Function

'Dependecies: Windows Scripting Host Object Model (for FileSystemObject) - C:\windows\system32\wshom.ocx
'Find the worksheet and extract files into a common directory. Returns true if successful
Private Function UnpackInternal() As Boolean
    UnpackInternal = False ' pessimism!

    Dim fso As New FileSystemObject
    Dim OutputPath As String
    Dim SleepTime As Long

    OutputPath = generate_temp_path()

    If OutputPath = "" Then
        Debug.Print "Couldn't extract controller files: 'outputpath' is empty!"
        Exit Function
    End If

    ' make sure that the embed sheet exists
    Dim SheetExists As Boolean
    Dim ws As Excel.Worksheet
    Dim resource_sheet As Excel.Worksheet

    SheetExists = False
    For Each ws In Worksheets
        If SHEET_NAME = ws.name Then
            SheetExists = True
            Set resource_sheet = ws
        End If
    Next
    
    If Not SheetExists Then
        Exit Function ' PDN not build yet
    End If

    Dim ReleaseBuild As Boolean
    Dim retval As Long
    Dim EDBFile As String

    ReleaseBuild = False
    retval = SetCurrentDirectory(OutputPath)
    If retval = 0 Then
        Debug.Print "SetCurrentDirectory() to '" & OutputPath & "' failed!"
        Exit Function
    End If

    ' unpack all files
    Dim FileName As String
    Dim PathName As String
    Dim file As Integer
    Dim files As Integer
    
    files = resource_sheet.Cells(1, 1) - 1
    ReDim DllHandles(files)

    Debug.Print "Extracting resources to " & OutputPath

    For file = 0 To files
        FileName = resource_sheet.Cells(file + 1, 2)
        PathName = OutputPath & FileName

        Debug.Print " * " & FileName & " :";
        
        If FileLocked(PathName) Then
            Debug.Print " file exists and is locked"
        Else
            ' Sleeps the process if lock file exists
            Do While fso.FileExists(OutputPath & "lock")
                Sleep 200
                SleepTime = SleepTime + 200
                If SleepTime = 5 * 60 * CLng(1000) Then Exit Do
            Loop

            'Create lock file as decompress DLL is a race condition, overwrite if necessary
            fso.CreateTextFile OutputPath & "lock", True
            
            Decode PathName, resource_sheet.Cells(file + 1, 3) ' extract file
            Debug.Print " extracted";

            If Right(PathName, 4) = ".dll" Then
                ' If this file is a DLL, we need to load it into our process
                ' explicitly, because some systems will prevent VBA from
                ' implicitly loading a DLL from a temporary folder. We keep
                ' the handle so that we can release it when we're done.
                Debug.Print ", DllHandle=0x";
                DllHandles(file) = LoadLibraryEx(PathName, 0, LOAD_WITH_ALTERED_SEARCH_PATH)
                ' On error (such as trying to load a 64-bit DLL into a 32-bit
                ' version of Excel, or vice-versa, LoadLibraryEx() will return
                ' a null (0x0) handle. This is fine because null handles are
                ' the default value in the DllHandles array, and the clean-up
                ' code will ignore them.
                Debug.Print Hex(DllHandles(file));
            End If
            
            'Deletes the lock file
            fso.DeleteFile OutputPath & "lock", True
            Debug.Print
        End If
    Next

    SetCurrentDirectory ThisWorkbook.Path
    UnpackInternal = True
End Function

Private Function FileLocked(FilePath As String) As Boolean
    On Error Resume Next
    Dim fso As New FileSystemObject, en As Integer
    ' Return True iff the file exists and is in use
    If fso.FileExists(FilePath) Then
        ' Must try to delete or modify the file to see if it is in use,
        ' simply open it will not cause an exception.
        Kill FilePath
        en = Err.Number
        If en <> 0 Then
            FileLocked = True
            Err.Clear
        End If
    End If
End Function

Public Function CleanUp()
    FreeDllHandles

#If 0 Then
    ' Windows is not *nix -- we can't delete a file that is still open, which
    ' includes any DLL that our system might still have a handle to.
    ' Unforunately it looks like object destruction (and hence DLL handle
    ' release) in VBA is not deterministic so we can't easily know when a file
    ' will be available to delete. So this code is left here as a reference
    ' to our future selves in the event we figure that out -- or move away from
    ' VBA, in which case it becomes moot.
    '
    ' See Case:465076.

    Dim fso As New FileSystemObject
    Dim folder As String

    If m_temp_path <> "" Then
        If Right(m_temp_path, 1) = "\" Then
            folder = Left(m_temp_path, Len(m_temp_path) - 1)
        Else
            folder = m_temp_path
        End If
        
        If fso.FolderExists(folder) Then
            fso.DeleteFile folder & "\*.dat"
            ' fso.DeleteFolder folder
        End If
    End If
#End If
End Function

'Extract an embedded file to the path specified by decoding it from Base64 and then writing it out as a
'byte stream

'Parameters:
'   File - File (including path) to embed
'   SourceRange - Range pointing to the location to begin reading

Private Sub Decode(file As String, SourceRange As Range)
    Dim Base64 As String
    Dim DecodedBytes() As Byte
    Dim FileNum As Integer
    
    On Error GoTo ErrHand
    
    FileNum = FreeFile()
    Open file For Binary Access Write As FileNum
    
    ' Get base64 encoding back out
    Dim row As Integer
    Dim col As Integer

    Base64 = ""
    row = SourceRange.Cells(1, 1).row
    col = SourceRange.Cells(1, 1).Column
    Do While SourceRange.Worksheet.Cells(row, col) <> ""
        DecodedBytes = Base64Dec(SourceRange.Worksheet.Cells(row, col).value)
        Put FileNum, , DecodedBytes
        col = col + 1
        If col > MAX_COLUMNS Then
            row = row + 1
            col = 1
            If row > MAX_ROWS Then
                'This should never happen, as that would require the file to be 65536 x 256 x 32K big.
                'DisplayError "Maximum allowable file size exceeded! File can't be packed!"
                Exit Sub
            End If
        End If
    Loop

    Close FileNum
    Exit Sub

ErrHand:
    Debug.Print "Decode() failed!" & vbCrLf & "Error: " & Err.Number & vbCrLf & Err.Description & vbCrLf & "Please contact Altera Support!"
End Sub

'The following support functions are responsible for implementing Base64 decoding
'Please see http://en.wikipedia.org/wiki/Base64 for details about the actual encoding scheme
'-------------------------------------------------------------------------------------------

'Decode Base64 string into bytestream

'Parameters: Base64String - Base64 string to decode
'Returns: Original bytestream
Private Function Base64Dec(Base64String As String) As Byte()
    'Create inverse lookup table based on Base64 character set
    Dim LookUp(255) As Byte, Base64CharSet() As Byte, i As Long
    Base64CharSet = StrConv("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", vbFromUnicode)
    'The value 255 is used to indicate an invalid value, since it's impossible for it to be part of Base-64,
    'which uses 6-bit numbers
    For i = 0 To UBound(LookUp)
        LookUp(i) = 255
    Next
    For i = 0 To UBound(Base64CharSet)
        LookUp(Base64CharSet(i)) = i
    Next
    'Note that the extra pad character '=' is treated the same as 'A', since they both represent 0
    LookUp(Asc("=")) = LookUp(Asc("A"))
    
    'Remove any characters not in Base64 character set
    For i = 1 To Len(Base64String)
        If LookUp(Asc(Mid(Base64String, i, 1))) = 255 Then
            Base64String = Mid(Base64String, 1, i - 1) & Mid(Base64String, i + 1, Len(Base64String) - i)
        End If
    Next
    Dim B64() As Byte
    B64 = StrConv(Base64String, vbFromUnicode)
    
    'Decode byte triplets
    Dim DecodedBytes() As Byte, NumTriplets As Long
    Dim SourceCursor As Long, DestCursor As Long
    NumTriplets = Len(Base64String) \ 4
    ReDim DecodedBytes(NumTriplets * 3 - 1)
    For SourceCursor = 0 To UBound(B64) Step 4
        'Bytes are decoded by concatenating 4 6-bit values into a 24-bit value,
        'then interpreting it as 3 8-bit bytes
        'Integer divides (\) and multiplications are used in lieu of right and left bit shifting, which is
        'unavailable in VBA
        DestCursor = (SourceCursor \ 4) * 3
        DecodedBytes(DestCursor) = LookUp(B64(SourceCursor)) * 4 + LookUp(B64(SourceCursor + 1)) \ 16
        DecodedBytes(DestCursor + 1) = (LookUp(B64(SourceCursor + 1)) And 15) * 16 + LookUp(B64(SourceCursor + 2)) \ 4
        DecodedBytes(DestCursor + 2) = (LookUp(B64(SourceCursor + 2)) And 3) * 64 + LookUp(B64(SourceCursor + 3))
    Next
    
    'Strip off any extra bytes that were padded on during encoding, based on presence of '=' characters
    If Right(Base64String, 1) = "=" Then
        ReDim Preserve DecodedBytes(UBound(DecodedBytes) - 1)
    End If
    If Left(Right(Base64String, 2), 1) = "=" Then
        ReDim Preserve DecodedBytes(UBound(DecodedBytes) - 1)
    End If
    Base64Dec = DecodedBytes
End Function


'This module is responsible for Encoding files into Base64 for the purposes of storing them in a worksheet.
'This is a method to dynamically embed any file inside an Excel spreadsheet.

'We've attempted to embed the files as OLE objects but there was no easy or non-hacky way to extract them back out.
'At one memorable point, we were using a spreadsheet's VBA macros to open up the same XLS file as a byte stream,
'Iterate through, find the original file, and write it out. Needless to say, this got scary fast.



'Dependecies: Windows Scripting Host Object Model (for FileSystemObject) - C:\windows\system32\wshom.ocx

'Packs a file into the spreadsheet. This is accomplished by reading the file as a byte stream, converting it into
'Base-64 encoding, and writing to a worksheet.

'Parameters:
'   File - File (including path) to embed
'   DestinationRange - Range pointing to the location to begin writing
Private Sub Encode(file As String, DestinationRange As Range)
    On Error GoTo ErrHand

    Dim fso As New FileSystemObject
    'Make sure file exists
    If Not fso.FileExists(file) Then
        Debug.Print "Could not find " & file
        Exit Sub
    End If

    'Convert to Base64 and jam it into a worksheet in 32K segments (as that's how big a cell's value can be)
    Dim FileSize As Long
    Dim FileNum As Integer
    Dim Base64 As String
    Dim FileSegment() As Byte

    FileSize = fso.GetFile(file).Size
    FileNum = FreeFile()
    Open file For Binary Access Read As FileNum
    
    Dim i As Long
    Dim row As Long
    Dim col As Long
    Dim BufferSize As Long

    row = DestinationRange.Cells(1, 1).row
    col = DestinationRange.Cells(1, 1).Column
    BufferSize = MAX_CHARS_PER_CELL / 4 * 3

    ReDim FileSegment(BufferSize - 1)

    For i = 1 To FileSize Step BufferSize
        If i + BufferSize - 1 > FileSize Then
            ReDim FileSegment(FileSize - i)
        End If

        Get FileNum, , FileSegment
        Base64 = Base64Enc(FileSegment)
        
        'Base64 text is stored in worksheet going from left-to-right, then top-to-bottom,
        'starting from DestinationRange
        'Note that the ' character prevents Excel from attempting to evaluate the thing as a formula.
        'That would be extremely dangerous, as it may consume characters like +, corrupting the stored file
        'in subtle ways
        DestinationRange.Worksheet.Cells(row, col).value = "'" & Base64
        col = col + 1
        If col > MAX_COLUMNS Then
            row = row + 1
            col = 1
            If row > MAX_ROWS Then
                'This should never happen, as that would require the file to be 65536 x 256 x 32K big.
                Debug.Print "Maximum allowable file size exceeded! File can't be packed!"
                Exit Sub
            End If
        End If
    Next

    Close FileNum
    Exit Sub

ErrHand:
    Debug.Print "Encode() failed!" & vbCrLf & "Error: " & Err.Number & vbCrLf & Err.Description & vbCrLf & "Please contact Altera Support!"
End Sub

'The following support functions are responsible for implementing Base64 encoding/decoding
'Please see http://en.wikipedia.org/wiki/Base64 for details about the actual encoding scheme
'-------------------------------------------------------------------------------------------

'Encode bytestream into Base64

'Parameters: bytes() - Array of bytes to encode
'Returns: Base64 encoded string
Private Function Base64Enc(bytes() As Byte) As String
    'Sanity Check
    If UBound(bytes) < 0 Then
        Exit Function
    End If
    
    'Allocate buffer for encoded bytes
    Dim EncodedBytes() As Byte, i As Long, NumFullTriplets As Long
    NumFullTriplets = (UBound(bytes) + 1) \ 3
    'Account for the case where there may be an incomplete triplet at the end
    If UBound(bytes) + 1 = NumFullTriplets * 3 Then
        ReDim EncodedBytes(NumFullTriplets * 4 - 1)
    Else
        ReDim EncodedBytes((NumFullTriplets + 1) * 4 - 1)
    End If
    
    'Encode bytes up to the last incomplete triplet (if it exists)
    For i = 0 To NumFullTriplets * 3 - 1 Step 3
        EncodeTriplet bytes, EncodedBytes, i, i / 3 * 4
    Next
    
    'There may be an incomplete triplet at the end. Pad it with 0's and process it.
    If UBound(bytes) + 1 <> NumFullTriplets * 3 Then
        'Pull out last 1 or 2 bytes, pad the rest with 0's
        Dim IncompleteTriplet(2) As Byte
        For i = 0 To 2
            IncompleteTriplet(i) = 0
        Next
        IncompleteTriplet(0) = bytes(NumFullTriplets * 3)
        If UBound(bytes) > NumFullTriplets * 3 Then
            IncompleteTriplet(1) = bytes(NumFullTriplets * 3 + 1)
        End If
        
        EncodeTriplet IncompleteTriplet, EncodedBytes, 0, NumFullTriplets * 4
        
        'Pad 0's are encoded differently from regular 0's, in that they resolve
        'to the extra Base64 character '='
        Dim NumPadBytes As Integer
        NumPadBytes = UBound(EncodedBytes) / 4 * 3 - UBound(bytes)
        For i = 0 To NumPadBytes - 1
            EncodedBytes(UBound(EncodedBytes) - i) = Asc("=")
        Next
    End If
    Base64Enc = StrConv(EncodedBytes, vbUnicode)
End Function

'Helper function to perform Triplet Encoding

'Parameters:
'   bytes() - Original bytestream
'   EncodedBytes() - Resulting encoded bytestream array being worked on
'   SourceCursor - Index to a location in bytes()
'   DestCursor - Index to a location in EncodedBytes()
Private Sub EncodeTriplet(bytes() As Byte, EncodedBytes() As Byte, SourceCursor As Long, DestCursor As Long)
    Dim LookUp() As Byte
    LookUp = StrConv("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", vbFromUnicode)
    
    'Bytes are encoded by concatenating 3 8-bit bytes into a 24-bit value,
    'then interpreting it as 4 6-bit numbers
    'Integer divides (\) and multiplications are used in lieu of right and left bit shifting, which is
    'unavailable in VBA
    EncodedBytes(DestCursor) = LookUp(bytes(SourceCursor) \ 4)
    EncodedBytes(DestCursor + 1) = LookUp((bytes(SourceCursor) And 3) * 16 + bytes(SourceCursor + 1) \ 16)
    EncodedBytes(DestCursor + 2) = LookUp((bytes(SourceCursor + 1) And 15) * 4 + bytes(SourceCursor + 2) \ 64)
    EncodedBytes(DestCursor + 3) = LookUp(bytes(SourceCursor + 2) And 63)
End Sub

Private Sub FreeDllHandles()
    If IsArrayEmpty(DllHandles) Then
        Debug.Print "DLL handle array is empty"
        Exit Sub
    End If

    Debug.Print "Releasing DLL handles"

    Dim i As Long
    For i = LBound(DllHandles) To UBound(DllHandles)
        If DllHandles(i) Then
            Debug.Print " * 0x" & Hex(DllHandles(i))
            FreeLibrary DllHandles(i)
            DllHandles(i) = 0
        End If
    Next
End Sub

Private Sub Class_Terminate()
    FreeDllHandles
End Sub
Attribute VB_Name = "Regtest"
Option Explicit

' Hard-coded values
Public CONFIG_DIR As String

' Config File Names
Public GET_VALUES_CONFIG As String ' config file specifying which values to dump
Public SET_VALUES_CONFIG As String ' config file specifying what values to set for which ranges before running benchmarks

' Special characters used to format values from config files
Private Const LINE_DELIM As String = "#" ' Delimiter separating lines
Private Const RANGE_DELIM As String = "$" ' Delimiter separating ranges within a line
Private Const NILL_CHAR As String = "@" ' Character indicating no value

' Keywords used in place of values inside set_values.config
Private Const MAX_OF_DROPDOWN As String = "MAX_OF_DROPDOWN" ' range set to its maximum if it's a dropdown range
Private Const CLICK_BUTTON As String = "CLICK_BUTTON" ' click the specified button

Private Const REGTEST_OUTPUT = "reg.rout"

Private Sub InitializeGlobalVariables()
    CONFIG_DIR = "configs"
    
    GET_VALUES_CONFIG = CONFIG_DIR & "\" & "get_values.config"
    SET_VALUES_CONFIG = CONFIG_DIR & "\" & "set_values.config"
End Sub

' After importing a design file or inputting all the configurations, run this to dump the required data
Private Sub SetupDesignComparisonTest()
    Call InitializeGlobalVariables
    Call RunDesignComparisonTest
End Sub

' Prepare file for dumping data, then run benchmarks
Public Sub RunDesignComparisonTest()
    ' Parse GET_VALUES_CONFIG
    Dim GetValuesConfig As String, get_title As String, get_PositiveRanges As String, get_NegativeRanges As String
    GetValuesConfig = GET_VALUES_CONFIG
    Call ParseGetValuesConfig(GetValuesConfig, get_title, get_PositiveRanges, get_NegativeRanges)
    
    ' Create data file
    Dim DataFile As Object
    Call PrepareDumpFile(DataFile, get_title)
    
    Call GetOutputs(DataFile, get_PositiveRanges, get_NegativeRanges)
    
    DataFile.Close
End Sub

' Cycle through configurations and dump data
' Values to dump are specified in <GET_VALUES_CONFIG>
Private Sub GetOutputs(DataFile As Object, PositiveRanges As String, NegativeRanges As String)
    ' Parse SET_VALUES_CONFIG
    Dim SetValuesConfig As String, set_ranges As String, set_vals As String
    SetValuesConfig = SET_VALUES_CONFIG
    Call ParseSetValuesConfig(SetValuesConfig, set_ranges, set_vals)
    
    ' Set data
    Call SetValues(set_ranges, set_vals)
    
    Dim vrmID As Integer, numVRM As Integer
    numVRM = wksSystemDecap.Range("rngVRMType").Columns.count
    For vrmID = 1 To numVRM
        ' Write the data to the data file
        Dim data As String
        data = GetValues(vrmID, PositiveRanges, NegativeRanges)
        ' Dump filename as well
        data = CStr(vrmID) & "," & data
        DataFile.WriteLine data
    Next
End Sub

' This function will parse any config file into 3 blocks - All config files are specified in blocks of 3
Public Sub ParseConfig(ConfigFileName As String, ByRef block1 As String, ByRef block2 As String)
    Dim fso As FileSystemObject, txtStream As TextStream
    Set fso = New FileSystemObject
    Set txtStream = fso.OpenTextFile(ConfigFileName, ForReading, False)
    
    Dim CurrentLine As String
    Do While Not txtStream.AtEndOfStream
        CurrentLine = txtStream.ReadLine
        If Len(CurrentLine) <> 0 And InStr(CurrentLine, "#") = 0 Then
            ' CurrentLine = block1, block2
            Dim arr() As String, arrSize As Integer
            arr = Split(CStr(CurrentLine), ", ")
            arrSize = UBound(arr) - LBound(arr) + 1
            
            If arrSize = 1 Then
                Call AppendWithDelim(arr(0), block1, LINE_DELIM)
                Call AppendWithDelim(NILL_CHAR, block2, LINE_DELIM)
            Else
                Call AppendWithDelim(arr(0), block1, LINE_DELIM)
                Call AppendWithDelim(arr(1), block2, LINE_DELIM)
            End If
        End If
    Loop
    
    txtStream.Close
End Sub

' Parses a config file specifying values to dump
'
' Possible formats:
' Title, WorkSheet, Range(x,y)
' Title, WorkSheet, Range1 + Range2(x,y) - Range3 + ...
' Title
'
' If Range contains strings and (x,y) is not specified, defaults to (1,1)
' If Range contains numbers and (x,y) is not specified, defaults to sum of range
'
' Parsed strings will be separated by LINE_DELIM for each line, RANGE_DELIM for each range appearing on the same line
Private Sub ParseGetValuesConfig(GetValuesConfig As String, ByRef heading As String, ByRef PositiveRanges As String, ByRef NegativeRanges As String)
    Dim ranges As String
    Call ParseConfig(GetValuesConfig, heading, ranges)
    
    ' Iterate over ranges to split them into positive and negative ranges
    Dim rangeArray() As String, i As Integer
    rangeArray = Split(ranges, LINE_DELIM)
    For i = LBound(rangeArray) To UBound(rangeArray)
        Call SplitRanges(rangeArray(i), PositiveRanges, NegativeRanges)
    Next
End Sub

' Parses a config file specifying values to set
'
' Possible formats:
' WorkSheet, Range(x,y), Value
' WorkSheet, Range, Keyword
'
' Possible keywords:
'   MAX_OF_DROPDOWN
'   CLICK_BUTTON
'
' Parsed strings will be separated by LINE_DELIM for each line
Private Sub ParseSetValuesConfig(SetValuesConfig As String, ByRef ranges As String, ByRef values As String)
    Call ParseConfig(SetValuesConfig, ranges, values)
End Sub

' Given a string "Range1 + Range2 - Range3 + ..."
' This function appends positive ranges to PositivesSingleString and negative ranges to NegativesSingleString, delimited by RANGE_DELIM and LINE_DELIM
Private Sub SplitRanges(ranges As String, ByRef PositivesSingleString As String, ByRef NegativesSingleString As String)
    Dim CurrentPositives As String, CurrentNegatives As String
    Dim i As Integer, j As Integer
    
    ' Split on +, store into temp array
    Dim TempRanges() As String
    TempRanges = Split(ranges, " + ")
    For i = LBound(TempRanges) To UBound(TempRanges)
        ' Split on -, store into temp array
        ' TempRanges2 now will store at least one range, first one always being positive and the rest being negative
        Dim TempRanges2() As String, numRanges As Integer
        TempRanges2 = Split(TempRanges(i), " - ")
        numRanges = UBound(TempRanges2) - LBound(TempRanges2) + 1
        
        ' +
        Call AppendWithDelim(TempRanges2(0), CurrentPositives, RANGE_DELIM)
        
        ' -
        For j = LBound(TempRanges2) To UBound(TempRanges2)
            If j = 0 And numRanges = 1 Then
                Call AppendWithDelim(NILL_CHAR, CurrentNegatives, RANGE_DELIM)
            ElseIf j > 0 Then
                Call AppendWithDelim(TempRanges2(j), CurrentNegatives, RANGE_DELIM)
            End If
        Next
    Next
    
    Call AppendWithDelim(CurrentPositives, PositivesSingleString, LINE_DELIM)
    Call AppendWithDelim(CurrentNegatives, NegativesSingleString, LINE_DELIM)
End Sub

' Get all data specified in GET_VALUES_CONFIG
Private Function GetValues(vrmID As Integer, PositiveRanges As String, NegativeRanges As String) As String
    Dim DataLine As String
    
    Dim PositiveRangesArray() As String, NegativeRangesArray() As String
    PositiveRangesArray = Split(PositiveRanges, LINE_DELIM)
    NegativeRangesArray = Split(NegativeRanges, LINE_DELIM)
    
    Dim i As Integer, j As Integer
    For i = LBound(PositiveRangesArray) To UBound(PositiveRangesArray)
        ' Each iteration corresponds to one line of the config file
        Dim CurrentPositives() As String, CurrentNegatives() As String
        CurrentPositives = Split(PositiveRangesArray(i), RANGE_DELIM)
        CurrentNegatives = Split(NegativeRangesArray(i), RANGE_DELIM)
        
        Dim NumPositiveRanges As Integer, NumNegativeRanges As Integer
        NumPositiveRanges = UBound(CurrentPositives) - LBound(CurrentPositives) + 1
        NumNegativeRanges = UBound(CurrentNegatives) - LBound(CurrentNegatives) + 1
        ' Determine if string is numeric or not
        If NumPositiveRanges = 1 And CurrentNegatives(0) = NILL_CHAR And Not IsNumeric(GetRangeValue(vrmID, CurrentPositives(0))) Then
            ' String
            DataLine = DataLine & GetRangeValue(vrmID, CurrentPositives(0)) & ","
        Else
            ' Numeric
            Dim sum As Double
            sum = 0
            ' +
            For j = LBound(CurrentPositives) To UBound(CurrentPositives)
                sum = sum + CDbl(GetRangeValue(vrmID, CurrentPositives(j)))
            Next
            ' -
            For j = LBound(CurrentNegatives) To UBound(CurrentNegatives)
                ' Make sure that the place holder (NILL_CHAR) doesn't get evaluated as a number
                Dim val As String
                val = GetRangeValue(vrmID, CurrentNegatives(j))
                If IsNumeric(val) Then
                    sum = sum - val
                End If
            Next
            
            DataLine = DataLine & CStr(sum) & ","
        End If
    Next
    
    GetValues = DataLine
End Function

' Return the value of range as string
' if (x,y) not specified for range:
' Defaults to (1,1) if range(1,1) contains a string
' Defaults to sum of all values in range if range(1,1) contains a value
Private Function GetRangeValue(vrmID As Integer, RangeSpecification As String) As String
    ' Initialize
    Dim rtn As String
    rtn = ""
    Dim sum As Double
    
    ' See if RangeSpecification is formatted as Range or Range(x,y)
    Dim arr() As String, rng As Range
    arr = Split(RangeSpecification, "(")
    If RangeSpecification = NILL_CHAR Then
        ' NILL_CHAR used to indicate no value
        rtn = ""
    ElseIf (UBound(arr) - LBound(arr) + 1) = 2 Then
        ' Range(x,y)
        Dim RangeName As String, x As Integer, y As Integer, xTemp As String, yTemp As String
        RangeName = arr(0)
        Dim arr2() As String
        arr2 = Split(arr(1), ",")
        
        xTemp = arr2(0)
        If xTemp = "VRM" Then
            x = vrmID
        ElseIf xTemp = ":" Then
            x = 0
        Else
            x = CInt(xTemp)
        End If
        
        yTemp = Left(arr2(1), Len(arr2(1)) - 1)
        If yTemp = "VRM" Then
            y = vrmID
        ElseIf yTemp = ":" Then
            y = 0
        Else
            y = CInt(yTemp)
        End If
        
        Set rng = GetRangeFromName(RangeName)
        If x > 0 And y > 0 Then
            rtn = rng.Cells(x, y)
        ElseIf y > 0 Then
            ' sum of rows for a given column
            sum = Application.sum(rng.Columns(y))
            rtn = CStr(sum)
        ElseIf x > 0 Then
            ' sum of rows for a given column
            sum = Application.sum(rng.Rows(x))
            rtn = CStr(sum)
        Else
            sum = Application.sum(rng)
            rtn = CStr(sum)
        End If
    Else
        ' Range
        Set rng = GetRangeFromName(RangeSpecification)
        If IsNumeric(rng.Cells(1, 1)) Then
            ' Numeric
            sum = Application.sum(rng)
            rtn = CStr(sum)
        Else
            ' String
            rtn = rng.Cells(1, 1)
        End If
    End If
    
    GetRangeValue = rtn
End Function


Private Sub SetValues(ranges As String, values As String)
    ' Reset the EPE
    Reset
    
    ' Set values
    Dim RangesArray() As String, ValuesArray() As String
    RangesArray = Split(ranges, LINE_DELIM)
    ValuesArray = Split(values, LINE_DELIM)
    
    Dim i As Integer
    For i = LBound(RangesArray) To UBound(RangesArray)
        ' Each iteration corresponds to one line of the config file
        Call SetRangeValue(RangesArray(i), ValuesArray(i))
    Next
    
End Sub

' Set the value of a given range
' if (x,y) not specified for range, defaults to (1,1)
Private Sub SetRangeValue(RangeSpecification As String, value As String)
    ' CLICK_BUTTON keyword
    If value = CLICK_BUTTON Then
        Call ClickCommandButton(RangeSpecification)
        ' We aren't setting values for the button - exit
        Exit Sub
    End If
        
    ' Get Range(x,y)
    Dim rng As Range
    Dim x As Integer
    Dim y As Integer
    
    Dim arr() As String
    arr = Split(RangeSpecification, "(")
    If (UBound(arr) - LBound(arr) + 1) = 2 Then
        ' Range(x,y)
        Dim RangeName As String
        RangeName = arr(0)
        Dim arr2() As String
        arr2 = Split(arr(1), ",")
        x = arr2(0)
        y = Left(arr2(1), 1)
        
        Set rng = GetRangeFromName(RangeName)
    Else
        ' Range
        Set rng = GetRangeFromName(RangeSpecification)
        x = 1
        y = 1
    End If
    
    Dim SetValue As String
    
    ' MAX_OF_DROPDOWN keyword
    If value = MAX_OF_DROPDOWN Then
        Dim dropdown_options As Range
        Set dropdown_options = Evaluate(rng.Cells(1, 1).Validation.Formula1)
        SetValue = CStr(Application.Max((dropdown_options)))
    Else
        ' Not a keyword
        ' Set value to passed in value
        SetValue = value
    End If
    
    ' Set Value
    rng.Cells(x, y) = SetValue
End Sub

' Opens a file for input, and returns its file number
Private Function OpenFile(file As String) As Integer
    ' Open file
    Dim FileNumber As Integer
    FileNumber = FreeFile
    Open file For Input As #FileNumber
    
    ' Return FileNumber
    OpenFile = FileNumber
End Function

' Create the data file, and write the default title line to the file
Private Sub PrepareDumpFile(ByRef DataFile As Object, headings As String)
    ' Create the data file
    Dim fso As Object
    Dim OutFile As Object

    Set fso = CreateObject("Scripting.FileSystemObject")
    Set OutFile = fso.CreateTextFile(Application.ActiveWorkbook.Path & "\out.csv", True)
    
    ' Read all lines; first section contains title:
    ' Title, Worksheet, Range
    Dim line As String
    line = Replace(headings, LINE_DELIM, ",")
    
    line = "VRM," & line
    OutFile.WriteLine line
    
    Set DataFile = OutFile
End Sub

' This functions appends source to dest properly, with the specified delimiter
Private Sub AppendWithDelim(source As String, ByRef dest As String, delim As String)
    If dest = "" Then
        dest = source
    Else
        dest = dest & delim & source
    End If
End Sub

' Gets the validation list (assumes that it's a formula beginning with '=')
' If there is no such range, return a single-element list with "N/A"
Public Function GetValidationList(RangeName As String) As String()
    On Error GoTo xError

    Dim c As Range
    Dim v As Validation
    Dim s As String

    Set c = GetRangeFromName(RangeName)
    If Not c Is Nothing Then
        Set c = c(1, 1)

        Set v = c.Validation
        s = v.Formula1
    
        ' Strip off the leading '='
        s = Right(s, Len(s) - 1)
    
        Dim foo As Range
        Set foo = GetRangeFromName(s)
        GetValidationList = GetArrayFromRange(foo)
    Else
        Dim vals(0) As String
        vals(0) = "N/A"
        GetValidationList = vals
    End If

    Exit Function

xError:
    Call MsgBox(Err.Description, vbOKOnly + vbCritical, "Error" & Err.Number)
End Function

' Gets a Range from a label
Public Function GetRangeFromName(NameString As String) As Range
    On Error Resume Next

    Dim wbk As Workbook
    Dim nms As Names
    Dim nm As name
    
    Set wbk = ActiveWorkbook
    Set nms = wbk.Names
    Set nm = nms(NameString)

    If nm Is Nothing Then
        Set GetRangeFromName = Nothing
    Else
        Set GetRangeFromName = nm.RefersToRange
    End If
End Function

' Gets a string array from a range that's of size 1xn
Public Function GetArrayFromRange(InputRange As Range) As String()
    On Error GoTo xError

    Dim MyRows As Integer
    Dim MyCols As Integer
    MyRows = InputRange.Rows.count
    MyCols = InputRange.Columns.count

    Dim retval() As String
    ReDim retval(1 To MyCols * MyRows)
    Dim c As Variant
    Dim i As Integer

    For Each c In InputRange
        i = i + 1
        retval(i) = c.value
    Next

    GetArrayFromRange = retval()

    Exit Function

xError:
    Debug.Print "Error in GetArrayFromRange(): " & Err.source
End Function

' Loop through all the families, devices, and pre-set PCGs, check if there are
' any errors or rails that are not connected to any regulator groups
Public Sub power_rail_configuration_test()
    ' Disable the pop up message
    BatchMode = True
    
    ' If the error file exists, remove it before the regtest
    Dim OutFile As String
    OutFile = ActiveWorkbook.Path & "\power_rail_configuration_test.error"
    If Dir(OutFile) <> "" Then
        Kill OutFile
    End If
    
    On Error GoTo TestError_Handler
    
    Dim fso As New FileSystemObject
    Dim ts As TextStream
            
    ' Loop through all the families
    Dim family As String
    Dim familyOption As Range

    For Each familyOption In TestingUtils.get_family_list
        family = familyOption.value
        
        wksSystemDecap.Range("rngFamilyName").value = family
        
        ' Loop through all the devices
        Dim device As String
        Dim deviceOption As Range

        For Each deviceOption In TestingUtils.get_device_list
            device = deviceOption.value
            
            wksSystemDecap.Range("rngPackageName").value = device
            
            ' Loop through all the PCGs
            Dim PCG As String
            Dim pcgOption As Range
            Dim valid_pcg As Boolean

            valid_pcg = False
            For Each pcgOption In TestingUtils.get_pcg_list
                PCG = pcgOption.value
                
                If Not PCG = "Custom" Then
                    valid_pcg = True
                    wksSystemDecap.Range("rngPCGConfig").value = PCG
                    
                    ' Loop through all the rails
                    Dim rails As Variant
                    Dim rail As String
                    Dim m As Integer
                    Dim passed As Boolean

                    rails = PDN_SYSTEM.get_rail_names()
                    For m = LBound(rails) To UBound(rails)
                        rail = rails(m)
                        passed = False
                        
                        ' Loop through all the regulator groups
                        Dim vrm_ids As Variant
                        Dim vrm_id As Integer
                        Dim n As Integer
                        Dim connection As String
                        Dim success As Boolean

                        vrm_ids = PDN_SYSTEM.get_vrm_ids
                        For n = LBound(vrm_ids) To UBound(vrm_ids)
                            vrm_id = vrm_ids(n)
                            success = PDN_SYSTEM.get_connection(rail, vrm_id, connection)
                            
                            ' Check the connection status for this rail
                            If success Then
                                If UCase(connection) = UCase("CONNECTED") Or UCase(connection) = UCase("CONNECTED_RELATED") Then
                                    passed = True
                                End If
                            End If
                        Next
                        
                        ' If status is false, output the error log
                        If passed = False Then
                            If Dir(OutFile) = "" Then
                                Set ts = fso.CreateTextFile(OutFile, True)
                            End If
                            ts.WriteLine family & ", " & device & ", " & PCG & ", " & rail
                        End If
                    Next
                End If
            Next

            ' If there's no valid PCG for this device, output the error log
            If valid_pcg = False Then
                If Dir(OutFile) = "" Then
                    Set ts = fso.CreateTextFile(OutFile, True)
                End If
                ts.WriteLine family & ", " & device & " doesn't contain any valid PCGs!"
            End If
        Next
    Next

    ' Re-enable the pop up message
    BatchMode = False

    Exit Sub

TestError_Handler:
    OutFile = ActiveWorkbook.Path & "\power_rail_configuration_test.error"
    If Dir(OutFile) = "" Then
        Set ts = fso.CreateTextFile(OutFile, True)
    End If

    ts.WriteLine "Error: in power_rail_configuration_test"
    ts.WriteLine Err.source & " (" & Err.Number & ") " & Err.Description
End Sub

' Check if the ESR & ESL values are correct for both decoupling
' caps and bulk caps. In addition, two more decoupling cap rows
' will be added and included in this test
Public Sub cap_lr_value_test()
    On Error GoTo error_handler

    Dim test_value As Integer

    ' If the error file exists, remove it before the regtest
    Dim OutFile As String
    ' Ref. https://stackoverflow.com/a/19824309
    OutFile = CurDir & "\" & REGTEST_OUTPUT
    Debug.Print "cap_lr_value_test: OutFile = "; OutFile

    Dim fout As Integer
    fout = FreeFile
    Open OutFile For Output As fout
    Write #fout, "cap_type", "row", "value", "footprint", "esl", "esr" ' write a CSV header

    ' Test the add and remove cap row function
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_add_decoupling_cap_row
    SystemDecap.system_decap_remove_cap_row
    SystemDecap.system_decap_remove_cap_row
    SystemDecap.system_decap_remove_cap_row
    SystemDecap.system_decap_remove_cap_row
    
    ' First we check all the decoupling caps
    Dim decapQuantityRange As Range
    Dim decapValueRange As Range
    Dim decapCapLibValue As Range
    Dim decapCapLibX2YValue As Range

    Set decapValueRange = wksSystemDecap.Range("rngDecapCapValues")
    Set decapQuantityRange = wksSystemDecap.Range("rngDecapCapInfo")
    Set decapCapLibValue = wksLibrary.Range("rngDecapCapLibraryValue")
    Set decapCapLibX2YValue = wksLibrary.Range("rngDecapCapX2YLibValues")

    Dim i As Long
    Dim j As Long

    test_value = 1

    ' These loops populate the decap table on the Library sheet with a series
    ' of sequential values so that we can test the methods that interact with
    ' the library.
    For i = 3 To decapCapLibValue.Rows.count
        For j = 2 To decapCapLibValue.Columns.count
            decapCapLibValue.Cells(i, j).value = test_value
            test_value = test_value + 1
        Next
    Next

    Dim esr As Variant      ' These have to be Variants because their cells
    Dim esl As Variant      ' can contain string values.
    Dim esr_lib As Double
    Dim esl_lib As Double

    Dim footprint As Variant
    Dim value As Variant

    ' Loop through each decoupling cap row
    Dim decaprow As Long
    For decaprow = 1 To decapQuantityRange.Rows.count
        Debug.Print " * decaprow = "; decaprow;

        Dim footprints As Variant
        Dim capsource As String

        footprints = Evaluate(decapQuantityRange.Cells(decaprow, 4).Validation.Formula1)
        capsource = decapQuantityRange.Cells(decaprow, 2).value
        
        ' There are 4 different cases here:
        ' 1: Library Cap with normal footprint
        ' 2: Library Cap with X2Y footprint
        ' 3: User Cap with normal footprint
        ' 4: User Cap with X2Y footprint

        ' If this is a user cap, set its value to 0.1
        If Left(capsource, 4) = "User" Then
            decapQuantityRange.Cells(decaprow, 3).value = 0.1

            ' Loop through each footprint
            For Each footprint In footprints
                Debug.Print ".";

                decapQuantityRange.Cells(decaprow, 4).value = footprint

                esr = decapValueRange.Cells(decaprow, 2).value
                esl = decapValueRange.Cells(decaprow, 3).value
        
                ' Case 4 - Both ESR & ESL must be invalid in this case.
                If Right(footprint, 4) = "_X2Y" Then
                    Write #fout, "decoupling", decaprow, "user", footprint, esl, esr
                ' Case 3 - Check if L & R match the values in the Library sheet
                Else
                    ' Loop through the columns and the rows of the table and find the corresponding LR values
                    For i = 2 To decapCapLibValue.Columns.count
                        If decapCapLibValue.Cells(1, i).value = CStr(footprint) Then
                            For j = 3 To decapCapLibValue.Rows.count
                                If decapCapLibValue.Cells(j, 1).value = CStr(capsource) Then
                                    esr_lib = decapCapLibValue.Cells(j, i).value
                                    esl_lib = decapCapLibValue.Cells(j, i + 1).value
                                End If
                            Next
                        End If
                    Next
                    
                    Write #fout, "decoupling", decaprow, "user", footprint, esl, esr
                End If
            Next
        Else
            Dim values As Variant
            ' Use this LIBRARY method instead of the dynamically-generated
            ' validation rule.
            values = Split(LIBRARY.GetDecouplingCapValidationRule(), ",")

            ' Loop through each footprint
            For Each footprint In footprints
                Debug.Print ".";

                decapQuantityRange.Cells(decaprow, 4).value = footprint
                
                ' Loop through each value
                Dim str_value As Variant
                For Each str_value In values
                    value = CDbl(str_value)

                    Dim Test As String
                    Dim Test2 As String

                    decapQuantityRange.Cells(decaprow, 3) = value
                    
                    esr = decapValueRange.Cells(decaprow, 2).value
                    esl = decapValueRange.Cells(decaprow, 3).value
                    esr_lib = 0
                    esl_lib = 0
                    
                    ' Case 2 - Check if LR match the values in the X2Y Caps table in the Library sheet,
                    ' if the value is emtpy in the table, the LR values should be invalid
                    If Right(footprint, 4) = "_X2Y" Then
                        ' Loop through the columns and the rows of the X2Y Caps table
                        For i = 2 To decapCapLibX2YValue.Columns.count
                            If decapCapLibX2YValue.Cells(1, i).value = Left(CStr(footprint), 4) Then
                                For j = 3 To decapCapLibX2YValue.Rows.count
                                    Test = CStr(value)
                                    Test2 = decapCapLibX2YValue.Cells(j, 1).value
                                    If decapCapLibX2YValue.Cells(j, 1).value = CStr(value) Then
                                        esr_lib = decapCapLibX2YValue.Cells(j, i).value
                                        esl_lib = decapCapLibX2YValue.Cells(j, i + 1).value
                                    End If
                                Next
                            End If
                        Next
                    ' Case 1 - Check if L & R match the values in the Library sheet, if the footprint
                    ' doesn't exist in the table, then the RL values should be invalid
                    Else
                        ' Loop through the columns and the rows of the table and find the corresponding LR values
                        For i = 2 To decapCapLibValue.Columns.count
                            If decapCapLibValue.Cells(1, i).value = CStr(footprint) Then
                                For j = 3 To decapCapLibValue.Rows.count
                                    If decapCapLibValue.Cells(j, 1).value = CStr(value) Then
                                        esr_lib = decapCapLibValue.Cells(j, i).value
                                        esl_lib = decapCapLibValue.Cells(j, i + 1).value
                                    End If
                                Next
                            End If
                        Next
                    End If
                    
                    Write #fout, "decoupling", decaprow, value, footprint, esl, esr
                Next
            Next
        End If

        Debug.Print
    Next
    
    ' Then we check all the bulk caps
    Dim bulkCapInfoRange As Range, bulkCapValues As Range, bulkCapLibValues As Range
    Set bulkCapLibValues = wksLibrary.Range("rngBulkCapLibraryValue")
    Set bulkCapInfoRange = wksSystemDecap.Range("rngBulkCapInfo")
    Set bulkCapValues = wksSystemDecap.Range("rngBulkCapValues")
    
    For i = 3 To bulkCapLibValues.Rows.count
        For j = 2 To bulkCapLibValues.Columns.count
            bulkCapLibValues.Cells(i, j).value = test_value
            test_value = test_value + 1
        Next
    Next
    
    ' Loop through each row of bulk caps
    Dim bulkrow As Long
    For bulkrow = 1 To bulkCapInfoRange.Rows.count
        Debug.Print " * bulkrow = "; bulkrow;

        capsource = bulkCapInfoRange.Cells(bulkrow, 2)
        footprints = Evaluate(bulkCapInfoRange.Cells(bulkrow, 4).Validation.Formula1)
        
        ' Loop through each footprint
        For Each footprint In footprints
            Debug.Print ".";

            bulkCapInfoRange.Cells(bulkrow, 4).value = footprint
            
            If Left(capsource, 4) = "User" Then
                bulkCapInfoRange.Cells(bulkrow, 3).value = 0.1
        
                ' Find the corresponding library value
                For i = 1 To bulkCapLibValues.Columns.count
                    If bulkCapLibValues.Cells(1, i).value = footprint Then
                        For j = 1 To bulkCapLibValues.Rows.count
                            If bulkCapLibValues.Cells(j, 1).value = capsource Then
                                esr_lib = bulkCapLibValues.Cells(j, i).value
                                esl_lib = bulkCapLibValues.Cells(j, i + 1).value
                            End If
                        Next
                    End If
                Next
                
                esr = bulkCapValues.Cells(bulkrow, 2).value
                esl = bulkCapValues.Cells(bulkrow, 3).value
                
                Write #fout, "bulk", bulkrow, "user", footprint, esl, esr
            Else
                values = Evaluate(bulkCapInfoRange.Cells(bulkrow, 3).Validation.Formula1)
                
                ' Loop through each value
                For Each value In values
                    bulkCapInfoRange.Cells(bulkrow, 3).value = value
                    
                    esr = bulkCapValues.Cells(bulkrow, 2).value
                    esl = bulkCapValues.Cells(bulkrow, 3).value
                    
                    ' Find the corresponding library value
                    For i = 1 To bulkCapLibValues.Columns.count
                        If bulkCapLibValues.Cells(1, i).value = footprint Then
                            For j = 1 To bulkCapLibValues.Rows.count
                                If bulkCapLibValues.Cells(j, 1).value = value Then
                                    esr_lib = bulkCapLibValues.Cells(j, i).value
                                    esl_lib = bulkCapLibValues.Cells(j, i + 1).value
                                End If
                            Next
                        End If
                    Next
                    
                    Write #fout, "bulk", bulkrow, value, footprint, esl, esr
                Next
            End If
        Next

        Debug.Print
    Next
    
    If fout Then
        Close fout
    End If

    Exit Sub
    
error_handler:
    If fout Then
        Write #fout, "*** Error: "; Err.source; " ("; Err.Number; ") "; Err.Description
        Close fout
    End If
End Sub

' This is a reg test for the Stackup Construct functionality.
' It will attempt to construct a default Stackup with several parameters, then
' write out the contents of the Stackup Table as a csv.
Public Sub construct_stackup_test()
    On Error GoTo error_handler

    ' If the error file exists, remove it before the regtest
    Dim OutFile As String
    ' Ref. https://stackoverflow.com/a/19824309
    OutFile = CurDir & "\" & REGTEST_OUTPUT
    Debug.Print "construct_stackup_test: OutFile = "; OutFile

    Dim fout As Integer
    fout = FreeFile
    Open OutFile For Output As fout
    Write #fout, "Layer", "Material", "Dk", "Thickness", "Type", "Pwr Planes"
    
    Dim full_stackup As Variant
    Dim stackup_config As String
    Dim num_layers As Integer
    
    ' Activate worksheet
    wksStackup.Activate
    
    ' Single stripline, 12 layers
    stackup_config = "Single stripline"
    num_layers = 12
    Write #fout, "Configuration", stackup_config, "Layers", num_layers
    
    Stackup.set_stackup_configuration stackup_config
    Stackup.set_num_layers num_layers
    Stackup.stackup_construct True
    Stackup.fill_full_stackup full_stackup
    dump_2d_csv full_stackup, fout
    
    ' Dual stripline, 16 layers
    stackup_config = "Dual stripline"
    num_layers = 16
    Write #fout, "Configuration", stackup_config, "Layers", num_layers
    
    Stackup.set_stackup_configuration stackup_config
    Stackup.set_num_layers num_layers
    Stackup.stackup_construct True
    Stackup.fill_full_stackup full_stackup
    dump_2d_csv full_stackup, fout
    
    ' Long name, 20 layers
    stackup_config = "Dual Stripline with outer single microstrip"
    num_layers = 20
    Write #fout, "Configuration", stackup_config, "Layers", num_layers
    
    Stackup.set_stackup_configuration stackup_config
    Stackup.set_num_layers num_layers
    Stackup.stackup_construct True
    Stackup.fill_full_stackup full_stackup
    dump_2d_csv full_stackup, fout
    
    ' Finished
    If fout Then
        Close fout
    End If
    Exit Sub
    
error_handler:
    If fout Then
        Write #fout, "*** Error: "; Err.source; " ("; Err.Number; ") "; Err.Description
        Close fout
    End If
End Sub

' This is a unit test for the BGA Via sheet. It's in regtest format because I
' don't know how to write unit tests for Excel...
Public Sub bga_via_sheet_test()
    On Error GoTo error_handler

    ' If the error file exists, remove it before the regtest
    Dim OutFile As String
    ' Ref. https://stackoverflow.com/a/19824309
    OutFile = CurDir & "\" & REGTEST_OUTPUT
    Debug.Print "bga_via_sheet_test: OutFile = "; OutFile

    Dim fout As Integer
    fout = FreeFile
    Open OutFile For Output As fout
    Write #fout, "outer_diameter", "inner_diameter", "via_pitch", "via_length", "linear_inductance", "inductance", "resistance" ' write a CSV header
    
    ' Create arrays for 10 test cases
    Dim outer_diameters(9) As Double
    Dim inner_diameters(9) As Double
    Dim via_pitches(9) As Double
    Dim via_lengths(9) As Double
    
    ' Use these variables to hold the data displayed on the Excel sheet
    Dim outer_diameter As Double
    Dim inner_diameter As Double
    Dim via_pitch As Double
    Dim via_length As Double
    Dim linear_inductance As Double
    Dim inductance As Double
    Dim resistance As Double
    
    ' Arbitrarily populate the 6 test cases
    outer_diameters(0) = 12
    inner_diameters(0) = 10
    via_pitches(0) = 50
    via_lengths(0) = 60
    outer_diameters(1) = -1
    inner_diameters(1) = 10
    via_pitches(1) = 50
    via_lengths(1) = 60
    outer_diameters(2) = 12
    inner_diameters(2) = -2
    via_pitches(2) = 50
    via_lengths(2) = 60
    outer_diameters(3) = 12
    inner_diameters(3) = 10
    via_pitches(3) = -3
    via_lengths(3) = 60
    outer_diameters(4) = 12
    inner_diameters(4) = 10
    via_pitches(4) = 50
    via_lengths(4) = -4
    outer_diameters(5) = 12
    inner_diameters(5) = 999
    via_pitches(5) = 50
    via_lengths(5) = 60
    outer_diameters(6) = 1000
    inner_diameters(6) = 999
    via_pitches(6) = 50
    via_lengths(6) = 60
    outer_diameters(7) = 1000
    inner_diameters(7) = 999
    via_pitches(7) = 9999
    via_lengths(7) = 60
    outer_diameters(8) = 1000
    inner_diameters(8) = 999
    via_pitches(8) = 9999
    via_lengths(8) = 999
    outer_diameters(9) = 0.1
    inner_diameters(9) = 0.09
    via_pitches(9) = 2
    via_lengths(9) = 2
    
    Dim i As Integer
    Dim success As Boolean
    For i = LBound(outer_diameters) To UBound(outer_diameters)
        wksBGAVia.Range("rngBGAViaOD").value = outer_diameters(i)
        wksBGAVia.Range("rngBGAViaID").value = inner_diameters(i)
        wksBGAVia.Range("rngBGAViaPitch").value = via_pitches(i)
        wksBGAVia.Range("rngBGAViaLen").value = via_lengths(i)
        
        outer_diameter = wksBGAVia.Range("rngBGAViaOD").value
        inner_diameter = wksBGAVia.Range("rngBGAViaID").value
        via_pitch = wksBGAVia.Range("rngBGAViaPitch").value
        via_length = wksBGAVia.Range("rngBGAViaLen").value
        linear_inductance = wksBGAVia.Range("rngBGAViaLinL").value
        inductance = wksBGAVia.Range("rngBGAViaL").value
        resistance = wksBGAVia.Range("rngBGAViaR").value
        
        ' Write in csv format
        Write #fout, Round(outer_diameter, 1), _
                Round(inner_diameter, 1), _
                Round(via_pitch, 1), _
                Round(via_length, 1), _
                Round(linear_inductance, 4), _
                Round(inductance, 1), _
                Round(resistance, 1)
    Next i
    
    If fout Then
        Close fout
    End If
    
    Exit Sub
    
error_handler:
    If fout Then
        Write #fout, "*** Error: "; Err.source; " ("; Err.Number; ") "; Err.Description
        Close fout
    End If
End Sub

' Dump all available devices for the given family
Public Sub new_device_test(family As String, Dumpfile As String)
    ' Set family
    wksSystemDecap.Range("rngFamilyName").Cells(1, 1).value = family
    
    ' Create output file
    Dim fso As Object
    Dim OutFile As Object

    Set fso = CreateObject("Scripting.FileSystemObject")
    Set OutFile = fso.CreateTextFile(Application.ActiveWorkbook.Path & "\" & Dumpfile, True)
    
    ' Dump all devices to output file
    Dim device As Variant
    For Each device In GetValidationList("rngPackageName")
        OutFile.WriteLine device
    Next
    
    ' Close file
    OutFile.Close
End Sub

Public Sub dump_2d_csv(ByRef data As Variant, ByRef fout As Integer)
    Dim row_num As Integer
    Dim col_num As Integer
    For row_num = LBound(data, 1) To UBound(data, 1)
        For col_num = LBound(data, 2) To UBound(data, 2)
            Write #fout, data(row_num, col_num), ;
        Next
        Write #fout,
    Next
End Sub
Attribute VB_Name = "SYSTEM_DECAP_GUI"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' Really, EVERY module should begin with 'Option Explicit', so that variables
' can't _accidentally_ be created. But we have a lot of modules, and a lot of
' accidental variables, so this will have to happen on an as-needed basis.
'
' ('Option Strict' is also a good idea, but VBA in Excel 2010 doesn't support
' it.)
'
' Ref. http://stackoverflow.com/a/2454583
Option Explicit

Const rail_start_r = 18
Const rail_c = 2
Const voltage_c = 6
Const current_c = 7
Const vrm_start_c = 8

Const DECAP_TABLE_OVERHEAD = 18
Const MAX_RAILS = 125
Const rail_end_max_r = MAX_RAILS + DECAP_TABLE_OVERHEAD

Const family_option_c = 1
Const package_option_c = 2
Const pcg_option_c = 3
Const option_start = 2

Private rail_end_r
Private num_rails

' custom constants
Const COL_VRM_L_CUSTOM = 1
Const COL_VRM_R_CUSTOM = 2
Const COL_VIA_L_CUSTOM = 3
Const COL_VIA_R_CUSTOM = 4
Const COL_SPREADING_L_CUSTOM = 5
Const COL_SPREADING_R_CUSTOM = 6
Const COL_PLANE_C_CUSTOM = 7
Const COL_PLANE_R_CUSTOM = 8
Const COL_FEFFECTIVE_CUSTOM = 9
Const COL_TRANSIENT_CUSTOM = 10
Const COL_VRIPPLE_CUSTOM = 11
Const COL_VIA_PAIRS_CUSTOM = 12
' custom constants end

Private Const DEFAULT_VRM_TYPE = VRM_TYPE_SWITCHER

Private Function get_family_dropdown_range()
    With wksSystemDecap
        Set get_family_dropdown_range = .Range(.Cells(6, 4), .Cells(6, 5)) ' D6
    End With
End Function

Private Function get_package_dropdown_range()
    With wksSystemDecap
        Set get_package_dropdown_range = .Range(.Cells(7, 4), .Cells(7, 5)) ' D7
    End With
End Function

' the rail names
Private Function set_rngRailList()
    Dim rngRailList As Range
    With wksSystemDecap
        Set rngRailList = .Range(.Cells(rail_start_r, rail_c), .Cells(rail_end_r, rail_c))
    End With
    rngRailList.name = "rngRailList"
End Function

Private Function get_rngRailList() As Range
    Set get_rngRailList = wksSystemDecap.Range("rngRailList")
End Function

' the current values
Private Function set_rngCurrentList()
    Dim rngCurrentList As Range
    With wksSystemDecap
        Set rngCurrentList = .Range(.Cells(rail_start_r, current_c), .Cells(rail_end_r, current_c))
    End With
    rngCurrentList.name = "rngCurrentList"
End Function

Private Function get_rngCurrentList() As Range
    Set get_rngCurrentList = wksSystemDecap.Range("rngCurrentList")
End Function

' the voltage dropdowns
Private Function set_rngVoltageList()
    Dim rngVoltageList As Range
    With wksSystemDecap
        Set rngVoltageList = .Range(.Cells(rail_start_r, voltage_c), .Cells(rail_end_r, voltage_c))
    End With
    rngVoltageList.name = "rngVoltageList"
End Function

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' getters start
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Private Function get_rngVoltageList() As Range
    Set get_rngVoltageList = wksSystemDecap.Range("rngVoltageList")
End Function

Private Function get_rngRailGroupTable() As Range
    Set get_rngRailGroupTable = wksSystemDecap.Range("rngRailGroupTable")
End Function


'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' getters start
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Public Function get_pcg()
    get_pcg = wksSystemDecap.Range("rngPCGConfig").value
End Function

Public Function get_package() As String
    get_package = wksSystemDecap.Range("rngPackageName").Cells(1, 1).value
End Function

Public Function get_family() As String
    get_family = wksSystemDecap.Range("rngFamilyName").Cells(1, 1).value
End Function

Public Function get_vrm_impedance_mode(vrm_id As Integer) As String
    get_vrm_impedance_mode = wksSystemDecap.Range("rngVRMImpedanceMode").Cells(1, vrm_id).value
End Function

Public Function get_vrm_model(vrm_id As Integer) As String
    Dim vrm_mode As String
    vrm_mode = get_vrm_impedance_mode(vrm_id)

    If (vrm_mode = "Library" Or vrm_mode = "Custom" Or vrm_mode = "Ignore") Then
        get_vrm_model = "PDN_VRM_MODEL_SIMPLE"
    Else
        get_vrm_model = vrm_mode
    End If
End Function

Public Function get_vripple_mode(vrm_id As Integer) As String
    get_vripple_mode = wksSystemDecap.Range("rngVrippleMode").Cells(1, vrm_id).value
End Function

Public Function get_core_clock_frequency_mode(vrm_id As Integer) As String
    get_core_clock_frequency_mode = wksSystemDecap.Range("rngCoreClockFrequencyMode").Cells(1, vrm_id).value
End Function

Public Function get_core_clock_cycles_mode(vrm_id As Integer) As String
    get_core_clock_cycles_mode = wksSystemDecap.Range("rngCoreClockCyclesMode").Cells(1, vrm_id).value
End Function

Public Function get_transient_mode(vrm_id As Integer) As String
    get_transient_mode = wksSystemDecap.Range("rngTransientMode").Cells(1, vrm_id).value
End Function

Public Function get_feffective_mode(vrm_id As Integer) As String
    get_feffective_mode = wksSystemDecap.Range("rngFeffectiveMode").Cells(1, vrm_id).value
End Function

Public Function get_via_mode(vrm_id As Integer) As String
    get_via_mode = wksSystemDecap.Range("rngViaMode").Cells(1, vrm_id).value
End Function

Public Function get_plane_mode(vrm_id As Integer) As String
    get_plane_mode = wksSystemDecap.Range("rngPlaneMode").Cells(1, vrm_id).value
End Function

Public Function get_spreading_mode(vrm_id As Integer) As String
    get_spreading_mode = wksSystemDecap.Range("rngSpreadingMode").Cells(1, vrm_id).value
End Function

Public Function get_decoupling_mode(vrm_index As Integer) As String
    get_decoupling_mode = wksSystemDecap.Range("rngDecouplingMode").Cells(1, vrm_index).value
End Function

Public Function get_vrm_type(vrm_index As Integer) As String
    get_vrm_type = CStr(wksSystemDecap.Range("rngVRMType").Cells(1, vrm_index).value)
End Function

Public Function get_vrm_parent_id(vrm_index As Integer) As Integer
    If wksSystemDecap.Range("rngParentVRM").Cells(1, vrm_index).value = "none" Then
        get_vrm_parent_id = 0
    Else
        get_vrm_parent_id = wksSystemDecap.Range("rngParentVRM").Cells(1, vrm_index).value
    End If
End Function

Public Function get_supply_voltage(vrm_index As Integer) As Double
    get_supply_voltage = wksSystemDecap.Range("rngSupplyVoltage").Cells(1, vrm_index).value
End Function

Public Function get_vrm_efficiency(vrm_index As Integer) As Double
    get_vrm_efficiency = wksSystemDecap.Range("rngVRMEfficiency").Cells(1, vrm_index).value
End Function

Public Function get_vrm_r(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngVRMR").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_vrm_r = CDbl(value)
    Else
        get_vrm_r = 0
    End If
End Function

Public Function get_vrm_l(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngVRML").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_vrm_l = CDbl(value)
    Else
        get_vrm_l = 0
    End If
End Function

Public Function get_via_r(vrm_index As Integer) As Double
    get_via_r = wksSystemDecap.Range("rngViaR").Cells(1, vrm_index).value
End Function

Public Function get_via_l(vrm_index As Integer) As Double
    get_via_l = wksSystemDecap.Range("rngViaL").Cells(1, vrm_index).value
End Function

Public Function get_num_via_pairs(vrm_index As Integer) As Double
    get_num_via_pairs = wksSystemDecap.Range("rngNumViaPairs").Cells(1, vrm_index).value
End Function

Public Function get_layer_number(vrm_index As Integer) As Double
    get_layer_number = wksSystemDecap.Range("rngLayerNumber").Cells(1, vrm_index).value
End Function

Public Function get_spreading_r(vrm_index As Integer) As Double
    get_spreading_r = wksSystemDecap.Range("rngSpreadingR").Cells(1, vrm_index).value
End Function

Public Function get_spreading_l(vrm_index As Integer) As Double
    get_spreading_l = wksSystemDecap.Range("rngSpreadingL").Cells(1, vrm_index).value
End Function

Public Function get_plane_r(vrm_index As Integer) As Double
    get_plane_r = wksSystemDecap.Range("rngPlaneR").Cells(1, vrm_index).value
End Function

Public Function get_plane_c(vrm_index As Integer) As Double
    get_plane_c = wksSystemDecap.Range("rngPlaneC").Cells(1, vrm_index).value
End Function

Public Function get_vrm_rail_voltage(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngVRMRailVoltage").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_vrm_rail_voltage = CDbl(value)
    Else
        get_vrm_rail_voltage = 0
    End If
End Function

Public Function get_total_current(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngTotalCurrent").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_total_current = CDbl(value)
    Else
        get_total_current = 0
    End If
End Function

Public Function get_vrm_input_current(vrm_index As Integer, Optional value As Double) As Double
    value = wksSystemDecap.Range("rngVRMInputCurrent").Cells(1, vrm_index).value
    
    If IsNumeric(value) Then
        get_vrm_input_current = CDbl(value)
    Else
        get_vrm_input_current = 0
    End If
End Function

Public Function get_vripple(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngVripple").Cells(1, vrm_index).value
    
    If IsNumeric(value) Then
        get_vripple = CDbl(value)
    Else
        get_vripple = 0
    End If
End Function

Public Function get_core_clock_frequency(vrm_id As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngCoreClockFrequency").Cells(1, vrm_id).value
    
    If IsNumeric(value) Then
        get_core_clock_frequency = CDbl(value)
    Else
        get_core_clock_frequency = 0
    End If
End Function

Public Function get_core_clock_cycles() As Integer
    Dim value As Variant
    value = wksSystemDecap.Range("rngCoreClockCycles").Cells(1, 1).value
    
    If IsNumeric(value) Then
        get_core_clock_cycles = CInt(value)
    Else
        get_core_clock_cycles = 0
    End If
End Function

Public Function get_trans_current(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngTransCurrent").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_trans_current = CDbl(value)
    Else
        get_trans_current = 0
    End If
End Function

Public Function get_feffective(vrm_id As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngFeffective").Cells(1, vrm_id).value
    
    If IsNumeric(value) Then
        get_feffective = CDbl(value)
    Else
        get_feffective = 0
    End If
End Function

Public Function get_ztarget(vrm_index As Integer) As Double
    Dim value As Variant
    value = wksSystemDecap.Range("rngZTarget").Cells(1, vrm_index).value

    If IsNumeric(value) Then
        get_ztarget = CDbl(value)
    Else
        get_ztarget = 0
    End If
End Function

Public Function get_view_impedance_chart() As Integer
    ' iterate over columns (vrms) to get the vrm that we are view on the chart
    Dim i As Long

    For i = 1 To wksSystemDecap.Range("rngViewImpedanceChart").Columns.count
        If wksSystemDecap.Range("rngViewImpedanceChart").Cells(1, i).value = "x" Then
            get_view_impedance_chart = CInt(i)
            Exit Function
        End If
    Next
End Function

Public Function get_num_vrms() As Integer
    Dim col_start As Long
    Dim col_end As Long

    col_start = wksSystemDecap.Range("rngRailGroupFirst").Column
    col_end = wksSystemDecap.Range("rngRailGroupLast").Column
    get_num_vrms = (col_end - col_start) + 1
End Function

Public Function get_total_num_cap(vrm_id As Integer) As Integer
    get_total_num_cap = wksSystemDecap.Range("rngTotalNumCap").Cells(1, vrm_id).value
End Function

Public Function get_vrm_impedance_mode_range() As Range
    Set get_vrm_impedance_mode_range = wksSystemDecap.Range("rngVRMImpedanceMode")
End Function

Public Function get_vrm_impedance_mode_target(vrm_id As Integer) As Range
    Set get_vrm_impedance_mode_target = wksSystemDecap.Range("rngVRMImpedanceMode").Cells(1, vrm_id)
End Function

Public Function get_via_mode_range() As Range
    Set get_via_mode_range = wksSystemDecap.Range("rngViaMode")
End Function

Public Function get_plane_mode_range() As Range
    Set get_plane_mode_range = wksSystemDecap.Range("rngPlaneMode")
End Function

Public Function get_spreading_mode_range() As Range
    Set get_spreading_mode_range = wksSystemDecap.Range("rngSpreadingMode")
End Function

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' getters end
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' setters start
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Public Function set_vrm_type(vrm_index As Integer, value As String)
    wksSystemDecap.Range("rngVRMType").Cells(1, vrm_index).value = value
End Function

Public Function set_vrm_parent(vrm_index As Integer, parent_vrm_id As Integer)
    Dim value As Variant
    
    If parent_vrm_id = 0 Then
        value = "none"
    Else
        value = parent_vrm_id
    End If
    
     wksSystemDecap.Range("rngParentVRM").Cells(1, vrm_index).value = value
End Function

Public Function set_supply_voltage(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngSupplyVoltage").Cells(1, vrm_index).value = value
End Function

Public Function set_vrm_efficiency(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngVRMEfficiency").Cells(1, vrm_index).value = value
End Function

Public Function set_vrm_r(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngVRMR").Cells(1, vrm_index).value = value
End Function

Public Function set_vrm_l(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngVRML").Cells(1, vrm_index).value = value
End Function

Public Function set_via_r(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngViaR").Cells(1, vrm_index).value = value
End Function

Public Function set_via_l(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngViaL").Cells(1, vrm_index).value = value
End Function

Public Function set_num_via_pairs(vrm_index As Integer, value As Integer)
     wksSystemDecap.Range("rngNumViaPairs").Cells(1, vrm_index).value = value
End Function

Public Function set_layer_number(vrm_index As Integer, value As Integer)
    wksSystemDecap.Range("rngLayerNumber").Cells(1, vrm_index).value = value
End Function

Public Function set_spreading_r(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngSpreadingR").Cells(1, vrm_index).value = value
End Function

Public Function set_spreading_l(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngSpreadingL").Cells(1, vrm_index).value = value
End Function

Public Function set_plane_r(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngPlaneR").Cells(1, vrm_index).value = value
End Function

Public Function set_plane_c(vrm_index As Integer, value As Double)
     wksSystemDecap.Range("rngPlaneC").Cells(1, vrm_index).value = value
End Function

Public Function set_vrm_rail_voltage(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngVRMRailVoltage").Cells(1, vrm_index).value = value
    Else
        wksSystemDecap.Range("rngVRMRailVoltage").Cells(1, vrm_index).value = "--"
    End If
End Function

Public Function set_total_current(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngTotalCurrent").Cells(1, vrm_index).value = value
    Else
        wksSystemDecap.Range("rngTotalCurrent").Cells(1, vrm_index).value = "--"
    End If
End Function

Public Function set_vrm_input_current(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngVRMInputCurrent").Cells(1, vrm_index).value = value
    Else
        wksSystemDecap.Range("rngVRMInputCurrent").Cells(1, vrm_index).value = "--"
    End If
End Function

Public Function set_vripple(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngVripple").Cells(1, vrm_index).value = value
     Else
        wksSystemDecap.Range("rngVripple").Cells(1, vrm_index).value = "--"
     End If
End Function

Public Function set_trans_current(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngTransCurrent").Cells(1, vrm_index).value = value
    Else
        wksSystemDecap.Range("rngTransCurrent").Cells(1, vrm_index).value = "--"
    End If
End Function

Public Function set_ztarget(vrm_index As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngZTarget").Cells(1, vrm_index).value = value
    Else
        wksSystemDecap.Range("rngZTarget").Cells(1, vrm_index).value = "--"
    End If
End Function

Public Function set_feffective(vrm_id As Integer, value As Double)
    If value > 0 Then
        wksSystemDecap.Range("rngFeffective").Cells(1, vrm_id).value = value
    Else
        wksSystemDecap.Range("rngFeffective").Cells(1, vrm_id).value = "--"
    End If
End Function

Public Function set_core_clock_frequency(vrm_id As Integer, value As Double)
    If value >= 0 And Not get_core_clock_frequency_mode(vrm_id) = "N/A" Then
        wksSystemDecap.Range("rngCoreClockFrequency").Cells(1, vrm_id).value = value
    Else
        wksSystemDecap.Range("rngCoreClockFrequency").Cells(1, vrm_id).value = "--"
    End If
End Function

Public Function set_core_clock_cycles(vrm_id As Integer, value As Integer)
    If value >= 0 And Not get_core_clock_cycles_mode(vrm_id) = "N/A" Then
        wksSystemDecap.Range("rngCoreClockCycles").Cells(1, vrm_id).value = value
    Else
        wksSystemDecap.Range("rngCoreClockCycles").Cells(1, vrm_id).value = "--"
    End If
End Function

Public Function set_total_num_cap(vrm_id As Integer, value As Long)
    If (value < 0) Then
        value = 0
    End If
    
    wksSystemDecap.Range("rngTotalNumCap").Cells(1, vrm_id).value = value
End Function


Public Function set_view_impedance_chart(vrm_id As Integer)
    ' make all other vrms off and turn on the one for the vrm selected
    wksSystemDecap.Range("rngViewImpedanceChart").value = ""
    wksSystemDecap.Range("rngViewImpedanceChart").Cells(1, vrm_id).value = "x"
End Function

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' setters end
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' custom savers start
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Public Function save_custom_vrm_l(vrm_index As Integer)
    Dim vrm_l As Double
    vrm_l = wksSystemDecap.Range("rngVRML").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRM_L_CUSTOM).value = vrm_l
End Function

Public Function save_custom_vrm_r(vrm_index As Integer)
    Dim vrm_r As Double
    vrm_r = wksSystemDecap.Range("rngVRMR").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRM_R_CUSTOM).value = vrm_r
End Function

Public Function save_custom_via_l(vrm_index As Integer)
    Dim via_l As Double
    via_l = wksSystemDecap.Range("rngViaL").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_L_CUSTOM).value = via_l
End Function

Public Function save_custom_via_r(vrm_index As Integer)
    Dim via_r As Double
    via_r = wksSystemDecap.Range("rngViaR").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_R_CUSTOM).value = via_r
End Function

Public Function save_calculate_num_via_pairs(vrm_index As Integer)
    Dim num_via_pairs As Integer
    num_via_pairs = wksSystemDecap.Range("rngNumViaPairs").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_PAIRS_CUSTOM).value = num_via_pairs
End Function

Public Function save_custom_spreading_l(vrm_index As Integer)
    Dim spreading_l As Double
    spreading_l = wksSystemDecap.Range("rngSpreadingL").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_SPREADING_L_CUSTOM).value = spreading_l
End Function

Public Function save_custom_spreading_r(vrm_index As Integer)
    Dim spreading_r As Double
    spreading_r = wksSystemDecap.Range("rngSpreadingR").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_SPREADING_R_CUSTOM).value = spreading_r
End Function

Public Function save_custom_plane_c(vrm_index As Integer)
    Dim plane_c As Double
    plane_c = wksSystemDecap.Range("rngPlaneC").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_PLANE_C_CUSTOM).value = plane_c
End Function

Public Function save_custom_plane_r(vrm_index As Integer)
    Dim plane_r As Double
    plane_r = wksSystemDecap.Range("rngPlaneR").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_PLANE_R_CUSTOM).value = plane_r
End Function

Public Function save_custom_feffective(vrm_index As Integer)
    Dim feffective As Double
    feffective = wksSystemDecap.Range("rngFeffective").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_FEFFECTIVE_CUSTOM).value = feffective
End Function

Public Function save_custom_transient(vrm_index As Integer)
    Dim transient As Double
    transient = wksSystemDecap.Range("rngTransCurrent").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_TRANSIENT_CUSTOM).value = transient
End Function

Public Function save_custom_vripple(vrm_index As Integer)
    Dim vripple As Double
    vripple = wksSystemDecap.Range("rngVripple").Cells(1, vrm_index).value
    wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRIPPLE_CUSTOM).value = vripple
End Function


'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' custom savers end
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' custom restorers start
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Public Function restore_custom_vrm_l(vrm_index As Integer) As Double
    Dim vrm_l As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRM_L_CUSTOM).value
    If IsNumeric(value) Then
        vrm_l = CDbl(value)
    Else
        vrm_l = 0
    End If
    wksSystemDecap.Range("rngVRML").Cells(1, vrm_index).value = vrm_l
    restore_custom_vrm_l = vrm_l
End Function

Public Function restore_custom_vrm_r(vrm_index As Integer) As Double
    Dim vrm_r As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRM_R_CUSTOM).value
    If IsNumeric(value) Then
        vrm_r = CDbl(value)
    Else
        vrm_r = 0
    End If
    wksSystemDecap.Range("rngVRMR").Cells(1, vrm_index).value = vrm_r
    restore_custom_vrm_r = vrm_r
End Function

Public Function restore_custom_via_l(vrm_index As Integer) As Double
    Dim via_l As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_L_CUSTOM).value
    If IsNumeric(value) Then
        via_l = CDbl(value)
    Else
        via_l = 0
    End If
    wksSystemDecap.Range("rngViaL").Cells(1, vrm_index).value = via_l
    restore_custom_via_l = via_l
End Function

Public Function restore_custom_via_r(vrm_index As Integer) As Double
    Dim via_r As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_R_CUSTOM).value
    If IsNumeric(value) Then
        via_r = CDbl(value)
    Else
        via_r = 0
    End If
    wksSystemDecap.Range("rngViaR").Cells(1, vrm_index).value = via_r
    restore_custom_via_r = via_r
End Function

Public Function restore_calculate_num_via_pairs(vrm_index As Integer) As Integer
    Dim num_via_pairs As Integer
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VIA_PAIRS_CUSTOM).value
    If IsNumeric(value) Then
        num_via_pairs = CDbl(value)
    Else
        num_via_pairs = 0
    End If
    wksSystemDecap.Range("rngNumViaPairs").Cells(1, vrm_index).value = num_via_pairs
    restore_calculate_num_via_pairs = num_via_pairs
End Function

Public Function restore_custom_spreading_l(vrm_index As Integer) As Double
    Dim spreading_l As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_SPREADING_L_CUSTOM).value
    If IsNumeric(value) Then
        spreading_l = CDbl(value)
    Else
        spreading_l = 0
    End If
    wksSystemDecap.Range("rngSpreadingL").Cells(1, vrm_index).value = spreading_l
    restore_custom_spreading_l = spreading_l
End Function

Public Function restore_custom_spreading_r(vrm_index As Integer) As Double
    Dim spreading_r As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_SPREADING_R_CUSTOM).value
    If IsNumeric(value) Then
        spreading_r = CDbl(value)
    Else
        spreading_r = 0
    End If
    wksSystemDecap.Range("rngSpreadingR").Cells(1, vrm_index).value = spreading_r
    restore_custom_spreading_r = spreading_r
End Function

Public Function restore_custom_plane_c(vrm_index As Integer) As Double
    Dim plane_c As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_PLANE_C_CUSTOM).value
    If IsNumeric(value) Then
        plane_c = CDbl(value)
    Else
        plane_c = 0
    End If
    wksSystemDecap.Range("rngPlaneC").Cells(1, vrm_index).value = plane_c
    restore_custom_plane_c = plane_c
End Function

Public Function restore_custom_plane_r(vrm_index As Integer) As Double
    Dim plane_r As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_PLANE_R_CUSTOM).value
    If IsNumeric(value) Then
        plane_r = CDbl(value)
    Else
        plane_r = 0
    End If
    wksSystemDecap.Range("rngPlaneR").Cells(1, vrm_index).value = plane_r
    restore_custom_plane_r = plane_r
End Function

Public Function restore_custom_feffective(vrm_index As Integer) As Double
    Dim feffective As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_FEFFECTIVE_CUSTOM).value
    If IsNumeric(value) Then
        feffective = CDbl(value)
    Else
        feffective = 0
    End If
    wksSystemDecap.Range("rngFeffective").Cells(1, vrm_index).value = feffective
    restore_custom_feffective = feffective
End Function

Public Function restore_custom_vripple(vrm_index As Integer) As Double
    Dim vripple As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_VRIPPLE_CUSTOM).value
    If (Len(value)) Then
        If IsNumeric(value) Then
            vripple = CDbl(value)
        Else
            vripple = 0.01
        End If
    Else
        vripple = 0.01
    End If
    wksSystemDecap.Range("rngVripple").Cells(1, vrm_index).value = vripple
    ' The return value is going to be passed to c code, so it must
    ' be converted to an int
    restore_custom_vripple = vripple * 100
End Function

Public Function restore_custom_transient(vrm_index As Integer) As Double
    Dim transient As Double
    Dim value As Variant

    value = wksSystemDecapCustomValues.Cells(vrm_index + 1, COL_TRANSIENT_CUSTOM).value
    If (Len(value)) Then
        If IsNumeric(value) Then
            transient = CDbl(value)
        Else
            transient = 0.01
        End If
    Else
        transient = 0.01
    End If
    wksSystemDecap.Range("rngTransCurrent").Cells(1, vrm_index).value = transient
    ' The return value is going to be passed to c code, so it must
    ' be converted to an int
    restore_custom_transient = transient * 100
End Function

'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
' custom restorers end
'/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Private Function build_voltage_menus(rail_names As Variant, voltages() As Variant)
    'All voltage drop downs
    Dim voltage_range As Range
    Dim rail_name As String
    Dim range_name As String
    Dim voltage_values As Variant

    Set voltage_range = get_rngVoltageList()

    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To UBound(rail_names)
        rail_name = rail_names(i)
        voltage_values = voltages(i)

        ' Change the validation rules for the voltage entry cell. Discrete
        ' ranges get a dropdown box; continuous ones do not.
        '
        ' Earlier versions of the PDN Tool kept this data in a separate
        ' spreadsheet called wksVoltageOptions, but there is no reason to do
        ' that. We can just tweak the validation rules to contain the allowed
        ' values/ranges directly.
        '
        ' Of course, we can only do this with the worksheet unprotected.
        '
        ' Ref. http://stackoverflow.com/questions/26386100
        Dim voltage_cell As Range

        Set voltage_cell = voltage_range.Rows(i + 1)
        Select Case PDN_SYSTEM.get_rail_voltage_range_type(rail_name)
            Case "discrete"
                voltage_cell.Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, Join(voltage_values, ",")
            Case "continuous"
                voltage_cell.Validation.Modify xlValidateDecimal, xlValidAlertStop, xlBetween, voltage_values(0), voltage_values(1)
        End Select
    Next

    protect_worksheet wksSystemDecap
End Function

Private Function copy_range(src As Range, dst As Range) As Boolean
    If (src.Rows.count <> dst.Rows.count) And (src.Columns.count <> dst.Columns.count) Then
        copy_range = False
    Else
        Dim r As Long
        Dim c As Long

        For r = 1 To src.Rows.count
            For c = 1 To src.Columns.count
                Dim src_cell As Range
                Dim dst_cell As Range
                
                Set src_cell = src.Cells(r, c)
                Set dst_cell = dst.Cells(r, c)
                
                dst_cell.Font.Bold = src_cell.Font.Bold
                dst_cell.Font.Color = src_cell.Font.Color
                dst_cell.Font.Size = src_cell.Font.Size
                dst_cell.Font.Underline = src_cell.Font.Underline
                dst_cell.Font.Italic = src_cell.Font.Italic
                dst_cell.Font.FontStyle = src_cell.Font.FontStyle
                dst_cell.Interior.Color = src_cell.Interior.Color
                'dst_cell.Borders.Color = src_cell.Borders.Color
            Next
        Next
        copy_range = True
    End If
End Function

Public Function generate_legend_columns()
    Dim DecapRowCount As Long
    Dim BulkcapRowCount As Long
    Dim i As Long

    DecapRowCount = wksSystemDecap.Range("rngDecapCapInfo").Rows.count
    BulkcapRowCount = wksSystemDecap.Range("rngBulkCapInfo").Rows.count
    
    ' Set the Decap Legend and CAP values
    For i = 1 To DecapRowCount
        wksSystemDecap.Range("rngDecapCapInfo").Cells(i, 1).value = "Zc" & i
    Next
    
    ' Set the Bulk Cap Legend values
    For i = 1 To BulkcapRowCount
        wksSystemDecap.Range("rngBulkCapInfo").Cells(i, 1).value = "Zc" & (i + DecapRowCount)
    Next
End Function

Public Function remove_decoupling_cap_row()
    Dim firstRow As Variant
    Dim RowCount As Long
    Dim libraryRow As Long
    
    ' Get the last row of the library decap table
    firstRow = wksSystemDecap.Range("rngDecapCapInfo").row
    RowCount = wksSystemDecap.Range("rngDecapCapInfo").Rows.count
    libraryRow = firstRow + RowCount - 4 - 1
    
    ' We need a minimum of 12 pre-set Decoupling Caps, they cannot be removed
    If RowCount > 16 Then
        wksSystemDecap.Rows(libraryRow).Delete
    End If
    
    ' Adjust the values for the Legend and CAP column
    generate_legend_columns
End Function

Public Function add_decoupling_cap_row()
    Dim firstRow As Variant
    Dim RowCount As Long
    Dim libraryRow As Long

    ' Get the last library decap row
    ' Notice that there are 4 user defined decaps at the end of the table
    firstRow = wksSystemDecap.Range("rngDecapCapInfo").row
    RowCount = wksSystemDecap.Range("rngDecapCapInfo").Rows.count
    libraryRow = RowCount - 4
    
    ' Insert a row above the last library decap row
    wksSystemDecap.Rows(firstRow + libraryRow - 1).EntireRow.Insert
    
    ' For each column under "Decoupling Caps", pop its value
    ' The first two colunms of the table will be adjusted by another function: generate_legend_and_cap_columns
    Dim decapCapInfoFirstColumn As Variant
    Dim decapCapInfoColumns As Long
    Dim i As Long

    decapCapInfoFirstColumn = wksSystemDecap.Range("rngDecapCapInfo").Column
    decapCapInfoColumns = wksSystemDecap.Range("rngDecapCapInfo").Columns.count

    For i = 3 To decapCapInfoColumns
        Dim DefaultValue As String

        ' Set the values from last row to second last row
        wksSystemDecap.Range("rngDecapCapInfo").Cells(libraryRow, i).value = wksSystemDecap.Range("rngDecapCapInfo").Cells(libraryRow + 1, i).value

        ' Set the default values for the new row
        If i = 3 Then
            DefaultValue = "0.001"
        ElseIf i = 4 Then
            DefaultValue = "0201"
        ElseIf i = 5 Then
            DefaultValue = "BOTTOM"
        ElseIf i = 6 Then
            DefaultValue = "VOS"
        End If

        wksSystemDecap.Range("rngDecapCapInfo").Cells(libraryRow + 1, i).value = DefaultValue

        ' Copy the comment from old rows to the new row
        Dim decapInfoCell As Variant
        Dim commentSourceCell As Variant

        Set decapInfoCell = wksSystemDecap.Range("rngDecapCapInfo").Cells(libraryRow, i)
        Set commentSourceCell = wksSystemDecap.Range("rngDecapCapInfo").Cells(libraryRow + 1, i)

        ' Copy the comment to the new row
        commentSourceCell.Copy
        decapInfoCell.PasteSpecial Paste:=xlPasteComments, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Next
    
    ' Adjust the values for rngDecapCapQuantity range
    Dim decapCapQuantityColumns As Long
    Dim decapCapQuantityRows As Long

    decapCapQuantityColumns = wksSystemDecap.Range("rngDecapCapQuantity").Columns.count
    decapCapQuantityRows = wksSystemDecap.Range("rngDecapCapQuantity").Rows.count
    
    For i = 1 To decapCapQuantityColumns
        wksSystemDecap.Range("rngDecapCapQuantity").Cells(libraryRow, i).value = wksSystemDecap.Range("rngDecapCapQuantity").Cells(libraryRow + 1, i).value
        wksSystemDecap.Range("rngDecapCapQuantity").Cells(libraryRow + 1, i).value = 0
    Next

    ' Adjust the values for the Legend column
    generate_legend_columns
End Function

Public Function add_bulk_cap_row()
    Dim firstRow As Variant
    Dim RowCount As Long
    Dim libraryRow As Long

    ' Get the last library decap row
    ' Notice that there are 4 user defined decaps at the end of the table
    firstRow = wksSystemDecap.Range("rngBulkCapInfo").row
    RowCount = wksSystemDecap.Range("rngBulkCapInfo").Rows.count
    libraryRow = RowCount - 2
    
    ' Insert a row above the last library decap row
    wksSystemDecap.Rows(firstRow + libraryRow - 1).EntireRow.Insert
    
    ' For each column under "Decoupling Caps", pop its value
    ' The first two colunms of the table will be adjusted by another function: generate_legend_and_cap_columns
    Dim decapCapInfoFirstColumn As Variant
    Dim decapCapInfoColumns As Long
    Dim i As Long

    decapCapInfoFirstColumn = wksSystemDecap.Range("rngBulkCapInfo").Column
    decapCapInfoColumns = wksSystemDecap.Range("rngBulkCapInfo").Columns.count

    For i = 3 To decapCapInfoColumns
        Dim DefaultValue As String

        ' Set the values from last row to second last row
        wksSystemDecap.Range("rngBulkCapInfo").Cells(libraryRow, i).value = wksSystemDecap.Range("rngBulkCapInfo").Cells(libraryRow + 1, i).value
        
        ' Set the default values for the new row
        If i = 3 Then
            DefaultValue = "10"
        ElseIf i = 4 Then
            DefaultValue = "Bulk"
        ElseIf i = 5 Then
            DefaultValue = ""
        ElseIf i = 6 Then
            DefaultValue = ""
        End If
        wksSystemDecap.Range("rngBulkCapInfo").Cells(libraryRow + 1, i).value = DefaultValue
        
        ' Copy the comment from old rows to the new row
        Dim decapInfoCell As Variant
        Dim commentSourceCell As Variant

        Set decapInfoCell = wksSystemDecap.Range("rngBulkCapInfo").Cells(libraryRow, i)
        Set commentSourceCell = wksSystemDecap.Range("rngBulkCapInfo").Cells(libraryRow + 1, i)

        ' Copy the comment to the new row
        commentSourceCell.Copy
        decapInfoCell.PasteSpecial Paste:=xlPasteComments, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

    Next
    
    ' Adjust the values for rngDecapCapQuantity range
    Dim decapCapQuantityColumns As Long
    Dim decapCapQuantityRows As Long

    decapCapQuantityColumns = wksSystemDecap.Range("rngBulkCapQuantity").Columns.count
    decapCapQuantityRows = wksSystemDecap.Range("rngBulkCapQuantity").Rows.count
    
    For i = 1 To decapCapQuantityColumns
        wksSystemDecap.Range("rngBulkCapQuantity").Cells(libraryRow, i).value = wksSystemDecap.Range("rngBulkCapQuantity").Cells(libraryRow + 1, i).value
        wksSystemDecap.Range("rngBulkCapQuantity").Cells(libraryRow + 1, i).value = 0
    Next

    ' Adjust the values for the Legend column
    generate_legend_columns
End Function

Public Sub build_vrms(vrm_ids As Variant, Optional ByVal new_system As Boolean = False)
    Dim num_vrms As Integer
    Dim current_num_vrms As Variant

    num_vrms = UBound(vrm_ids) + 1
    current_num_vrms = get_num_vrms()
    
    If (num_vrms > current_num_vrms) Then
        While current_num_vrms < num_vrms
            add_vrm
            current_num_vrms = get_num_vrms()
        Wend
        
    ElseIf (num_vrms < current_num_vrms) Then
        While current_num_vrms > num_vrms
            remove_vrm
            current_num_vrms = get_num_vrms()
        Wend
    End If
    
    'Assign row numbers for the headers of the tables where the rail group count needs to be updated
    Dim intColFirst As Long
    Dim intRowHeader As Long
    Dim intRowDecoupCapHeader As Long
    Dim intRowBulkCapHeader As Long

    intColFirst = wksSystemDecap.Range("rngRailGroupFirst").Column
    intRowHeader = wksSystemDecap.Range("rngRailGroupLast").row
    intRowDecoupCapHeader = wksSystemDecap.Range("rngRowDecoupCapHeader").row
    intRowBulkCapHeader = wksSystemDecap.Range("rngRowBulkCapHeader").row

    Dim i As Integer

    For i = 0 To UBound(vrm_ids)
        wksSystemDecap.Cells(intRowHeader, intColFirst + i).value = vrm_ids(i)
        wksSystemDecap.Cells(intRowDecoupCapHeader, intColFirst + i).value = vrm_ids(i)
        wksSystemDecap.Cells(intRowBulkCapHeader, intColFirst + i).value = vrm_ids(i)

        If new_system Then
            set_vrm_impedance_mode Int(vrm_ids(i)), "Library"
            set_feffective_mode Int(vrm_ids(i)), "Calculate"
            set_via_mode Int(vrm_ids(i)), "Default"
            set_num_via_pairs Int(vrm_ids(i)), 0
            set_layer_number Int(vrm_ids(i)), 5
            set_plane_mode Int(vrm_ids(i)), "Calculate"
            set_spreading_mode Int(vrm_ids(i)), "Low"
            set_decoupling_mode Int(vrm_ids(i)), "Auto"
            set_vrm_type Int(vrm_ids(i)), DEFAULT_VRM_TYPE
            set_transient_mode Int(vrm_ids(i)), "Calculate"
            set_vripple_mode Int(vrm_ids(i)), "Calculate"
            set_core_clock_frequency_mode Int(vrm_ids(i)), "N/A"
            set_core_clock_cycles_mode Int(vrm_ids(i)), "N/A"
        End If

        ' Set the regulator num to the validation dropdown of per regulator Plane RC
        wksPlaneCap_Default.Range("rngRegulatorGroup").Cells(i + 2, 1).value = i + 1
    Next

    ' Resize the named ranges used to set per regulator group plane R&C
    Dim regulatorGroupName As name
    Dim hiddenPlaneR As name
    Dim hiddenPlaneC As name
    Dim regulatorGroupRange As Range
    Dim rangeColumn As Long
    Dim rangeStartRow As Long
    Dim rangeEndRow As Long

    Set regulatorGroupName = ThisWorkbook.Names("rngRegulatorGroup")
    Set hiddenPlaneR = ThisWorkbook.Names("rngHiddenPlaneR")
    Set hiddenPlaneC = ThisWorkbook.Names("rngHiddenPlaneC")
    Set regulatorGroupRange = regulatorGroupName.RefersToRange
    rangeColumn = regulatorGroupRange.Column
    rangeStartRow = regulatorGroupRange.row
    rangeEndRow = rangeStartRow + UBound(vrm_ids) + 1
    
    ' Resize the named ranges used to set per regulator group plane R&C
    Dim newRange As Range
    Dim curSheet As Worksheet

    Set curSheet = regulatorGroupRange.Worksheet
    Set newRange = curSheet.Range(curSheet.Cells(rangeStartRow, rangeColumn), curSheet.Cells(rangeEndRow, rangeColumn))
    regulatorGroupName.RefersTo = "=" & "'" & curSheet.name & "'!" & newRange.Address
    Set newRange = curSheet.Range(curSheet.Cells(rangeStartRow, rangeColumn + 1), curSheet.Cells(rangeEndRow - 1, rangeColumn + 1))
    hiddenPlaneR.RefersTo = "=" & "'" & curSheet.name & "'!" & newRange.Address
    Set newRange = curSheet.Range(curSheet.Cells(rangeStartRow, rangeColumn + 2), curSheet.Cells(rangeEndRow - 1, rangeColumn + 2))
    hiddenPlaneC.RefersTo = "=" & "'" & curSheet.name & "'!" & newRange.Address
    
    set_vripple_comment
    set_transient_comment
    set_core_clock_frequency_comment
    set_core_clock_cycles_comment
    set_plane_rc_comment
    
End Sub

Private Sub add_vrm()
    'find the first and last row numbers of the table
    Dim intRailStart As Long
    Dim intRailListSize As Long
    Dim intRailEnd As Long

    intRailStart = get_rngRailList().row
    intRailListSize = get_rngRailList().count
    intRailEnd = intRailStart + intRailListSize - 1

    Dim vrm_col_start As Integer
    Dim vrm_col_end As Integer
    Dim vrm_index As Integer

    'find the first column of the table
    vrm_col_start = wksSystemDecap.Range("rngRailGroupFirst").Column
    vrm_col_end = wksSystemDecap.Range("rngRailGroupLast").Column
    'select the last group
    vrm_index = vrm_col_end - vrm_col_start + 1
    
    'get modes of previous group
    Dim vrm_impedance_mode As String
    Dim feffective_mode As String
    Dim via_mode As String
    Dim plane_mode As String
    Dim spreading_mode As String
    Dim decoupling_mode As String
    Dim num_via_pairs As Double
    Dim layer_number As Double
    Dim vrm_type As String
    Dim transient_mode As String
    Dim vripple_mode As String
    Dim core_clock_frequency_mode As String
    
    vrm_impedance_mode = get_vrm_impedance_mode(Int(vrm_index))
    feffective_mode = get_feffective_mode(Int(vrm_index))
    via_mode = get_via_mode(Int(vrm_index))
    plane_mode = get_plane_mode(Int(vrm_index))
    spreading_mode = get_spreading_mode(Int(vrm_index))
    decoupling_mode = get_decoupling_mode(Int(vrm_index))
    num_via_pairs = get_num_via_pairs(Int(vrm_index))
    layer_number = get_layer_number(Int(vrm_index))
    vrm_type = get_vrm_type(Int(vrm_index))
    transient_mode = get_transient_mode(Int(vrm_index))
    vripple_mode = get_vripple_mode(Int(vrm_index))
    core_clock_frequency_mode = get_core_clock_frequency_mode(Int(vrm_index))
    
    wksSystemDecap.Range("rngRailGroupLast").Select
    'Add another column to accommodate the additional rail group
    Selection.EntireColumn.Insert
    
    'Copy formulas and formats from last column to the column just added
    'Preserve the formatting of the sheet header (the blue box)
    'wksSystemDecap.Columns(intColNew).Rows(2) = blank
    'wksSystemDecap.Columns(intColNew).Rows(3) = blank
    
    'Unlock the last column
    'wksSystemDecap.Range(Cells(intRailStart, intColLast), Cells(intRailEnd, intColLast)).Interior.ColorIndex = 2
    'wksSystemDecap.Range(Cells(intRailStart, intColLast), Cells(intRailEnd, intColLast)).Locked = False
    
    ' set previous group values (reason we do this is that they got moved to last column during insert operation)
    set_vrm_impedance_mode Int(vrm_index), CStr(vrm_impedance_mode)
    set_feffective_mode Int(vrm_index), CStr(feffective_mode)
    set_transient_mode Int(vrm_index), CStr(transient_mode)
    set_vripple_mode Int(vrm_index), CStr(vripple_mode)
    set_via_mode Int(vrm_index), CStr(via_mode)
    set_plane_mode Int(vrm_index), CStr(plane_mode)
    set_spreading_mode Int(vrm_index), CStr(spreading_mode)
    set_decoupling_mode Int(vrm_index), CStr(decoupling_mode)
    set_num_via_pairs Int(vrm_index), CInt(num_via_pairs)
    set_layer_number Int(vrm_index), CInt(layer_number)
    set_vrm_type Int(vrm_index), CStr(vrm_type)
    set_core_clock_frequency_mode Int(vrm_index), CStr(core_clock_frequency_mode)
    
    vrm_index = vrm_index + 1
    ' set the default modes
    set_vrm_impedance_mode Int(vrm_index), "Library"
    set_feffective_mode Int(vrm_index), "Calculate"
    set_transient_mode Int(vrm_index), "Calculate"
    set_vripple_mode Int(vrm_index), "Calculate"
    set_via_mode Int(vrm_index), "Default"
    set_num_via_pairs Int(vrm_index), 0
    set_layer_number Int(vrm_index), 5
    set_plane_mode Int(vrm_index), "Calculate"
    set_spreading_mode Int(vrm_index), "Low"
    set_decoupling_mode Int(vrm_index), "Auto"
    set_vrm_type Int(vrm_index), DEFAULT_VRM_TYPE
    set_core_clock_frequency_mode Int(vrm_index), "N/A"
    wksSystemDecap.Range("A1").Select
    
End Sub

Private Sub remove_vrm()
    Dim vrm_col_start As Long
    Dim vrm_col_end As Long
    Dim vrm_index As Long

    'find the first column of the table
    vrm_col_start = wksSystemDecap.Range("rngRailGroupFirst").Column
    vrm_col_end = wksSystemDecap.Range("rngRailGroupLast").Column
    'select the last group
    vrm_index = vrm_col_end - vrm_col_start + 1

    Dim vrm_impedance_mode As String
    Dim feffective_mode As String
    Dim transient_mode As String
    Dim vripple_mode As String
    Dim via_mode As String
    Dim plane_mode As String
    Dim spreading_mode As String
    Dim decoupling_mode As String

    'get modes of previous group
    vrm_impedance_mode = get_vrm_impedance_mode(Int(vrm_index - 1))
    feffective_mode = get_feffective_mode(Int(vrm_index - 1))
    transient_mode = get_transient_mode(Int(vrm_index - 1))
    vripple_mode = get_vripple_mode(Int(vrm_index - 1))
    via_mode = get_via_mode(Int(vrm_index - 1))
    plane_mode = get_plane_mode(Int(vrm_index - 1))
    spreading_mode = get_spreading_mode(Int(vrm_index - 1))
    decoupling_mode = get_decoupling_mode(Int(vrm_index - 1))

    Dim column_to_delete As Long

    'Find the columns from the named ranges
    column_to_delete = vrm_col_end - 1
    'delete the column
    wksSystemDecap.Columns(column_to_delete).Delete 'the 3 'this take about 8 seconds each
    
    'set the modes of the previous group
    set_vrm_impedance_mode Int(vrm_index - 1), CStr(vrm_impedance_mode)
    set_feffective_mode Int(vrm_index - 1), CStr(feffective_mode)
    set_transient_mode Int(vrm_index - 1), CStr(transient_mode)
    set_vripple_mode Int(vrm_index - 1), CStr(vripple_mode)
    set_via_mode Int(vrm_index - 1), CStr(via_mode)
    set_plane_mode Int(vrm_index - 1), CStr(plane_mode)
    set_spreading_mode Int(vrm_index - 1), CStr(spreading_mode)
    set_decoupling_mode Int(vrm_index - 1), CStr(decoupling_mode)
    wksSystemDecap.Range("A1").Select
End Sub

Public Function build_system_gui(rail_names As Variant, voltages() As Variant, vrm_ids As Variant)
    Dim range_to_hide As String
    Dim range_to_show As String

    num_rails = UBound(rail_names) + 1
    'Adjust the power rail grouping table size based on the number of rails in the power device selected
    rail_end_r = rail_start_r + UBound(rail_names)
        
    range_to_hide = CStr(rail_start_r) & ":" & CStr(rail_end_max_r)
    range_to_show = CStr(rail_start_r) & ":" & CStr(rail_end_r)

    wksSystemDecap.Rows(range_to_hide).Hidden = True
    wksSystemDecap.Rows(range_to_show).Hidden = False
    
    Call set_rngRailList
    Call set_rngCurrentList
    Call set_rngVoltageList
    
    get_rngRailList.value = Application.Transpose(rail_names)
    get_rngCurrentList.value = ""

    Dim num_vrms As Long
    num_vrms = UBound(vrm_ids) + 1
    
    Call build_voltage_menus(rail_names, voltages)
    Call build_vrms(vrm_ids, True)

    Dim vrm_col_start As Long
    Dim vrm_col_end As Long
    vrm_col_start = wksSystemDecap.Range("rngRailGroupFirst").Column
    vrm_col_end = wksSystemDecap.Range("rngRailGroupLast").Column
    
    'redefine the rail group table range so that events get triggered properly (if not done, the rails at the bottom will not be triggered)
    wksSystemDecap.Range("rngRailGroupTable") = Range(wksSystemDecap.Cells(rail_start_r, vrm_col_start), wksSystemDecap.Cells(rail_end_r, vrm_col_end))
End Function

Public Function set_family(family As String)
    wksSystemDecap.Range("rngFamilyName").value = family
End Function

Public Function set_family_options(families As Variant)
    Dim family_dropdown As Range
    Set family_dropdown = get_family_dropdown_range()
    
    Dim family_options As Range
    With wksSystemDecapOptions
        Set family_options = .Range(.Cells(option_start, family_option_c), .Cells(option_start + UBound(families), family_option_c))
    End With
   
    family_options.value = Application.Transpose(families)
    family_options.name = "rngOptionsFamily"
End Function

Public Function set_package_options(packages As Variant)
    Dim package_options As Range
    With wksSystemDecapOptions
        Set package_options = .Range(.Cells(option_start, package_option_c), .Cells(option_start + UBound(packages), package_option_c))
    End With
   
   package_options.value = Application.Transpose(packages)
   package_options.name = "rngOptionsPackage"
End Function

Public Function set_package(package As String)
    wksSystemDecap.Range("rngPackageName").value = package
End Function

Public Function set_pcg(pcg_name As String)
    wksSystemDecap.Range("rngPCGConfig").value = pcg_name
End Function

Public Function set_model_status(status As String)
    wksSystemDecap.Range("rngModelStatus").value = status
End Function

Public Function set_pcg_options(pcg_list As Variant)
    Dim pcg_options As Range
    Dim pcg_name As Variant

    With wksSystemDecapOptions
        Set pcg_options = .Range(.Cells(option_start, pcg_option_c), .Cells(option_start + UBound(pcg_list), pcg_option_c))
    End With
    
    For Each pcg_name In pcg_list
        Debug.Print "pcg name " & pcg_name
    Next
    pcg_options.value = Application.Transpose(pcg_list)
    pcg_options.name = "rngOptionsPCG"
End Function

Public Function set_voltage(rail_index As Integer, voltage As Double)
    get_rngVoltageList().Cells(rail_index, 1).value = voltage
End Function

Public Function set_current(rail_index As Integer, current As Double)
 get_rngCurrentList().Cells(rail_index, 1).value = current
End Function

Public Function get_rail_name(rail As Range) As String
    Dim row As Long
    Dim rail_index As Long

    row = rail.row
    rail_index = row - rail_start_r + 1
    If (rail_index < 1 Or rail_index > MAX_RAILS) Then
        get_rail_name = ""
    Else
        get_rail_name = get_rngRailList().Cells(rail_index, 1).value
    End If
End Function

Public Function get_rail(rail_index As Integer) As Range
    Set get_rail = wksSystemDecap.Range("rngRailList").Cells(rail_index, 1)
End Function

Public Function get_rail_voltage(rail As Range) As Double
    Dim row As Long
    Dim rail_index As Long

    row = rail.row
    rail_index = row - rail_start_r + 1
    get_rail_voltage = get_rngVoltageList().Cells(rail_index, 1).value
End Function

Public Function get_rail_current(rail As Range) As Double
    Dim row As Long
    Dim rail_index As Long

    row = rail.row
    rail_index = row - rail_start_r + 1
    get_rail_current = wksSystemDecap.Range("rngCurrentList").Cells(rail_index, 1).value
End Function

Public Function get_vrm_id(connection As Range) As Integer
    Dim intRowHeader As Integer

    intRowHeader = wksSystemDecap.Range("rngRailGroupLast").row
    get_vrm_id = wksSystemDecap.Cells(intRowHeader, connection.Column).value
End Function


Public Function get_connection_type(connection As Range) As String
    Dim connection_type As String
    connection_type = connection.value
    
    If connection_type = "" Then
        get_connection_type = "NOT_CONNECTED"
    ElseIf connection_type = "x" Then
        get_connection_type = "CONNECTED"
    ElseIf connection_type = "x/related" Then
        get_connection_type = "CONNECTED_RELATED"
    End If
End Function

Public Function set_connection(rail_index As Integer, vrm_index As Integer, connection As String)
    If connection = "NOT_CONNECTED" Then
        get_rngRailGroupTable().Cells(rail_index, vrm_index).value = ""
    ElseIf connection = "CONNECTED" Then
        get_rngRailGroupTable().Cells(rail_index, vrm_index).value = "x"
    ElseIf connection = "CONNECTED_RELATED" Then
        get_rngRailGroupTable().Cells(rail_index, vrm_index).value = "x/related"
    End If
    
    If connection = "NOT_CONNECTABLE" Then
        get_rngRailGroupTable().Cells(rail_index, vrm_index).value = ""
        get_rngRailGroupTable().Cells(rail_index, vrm_index).Interior.ColorIndex = 15
        get_rngRailGroupTable().Cells(rail_index, vrm_index).Locked = True
    Else
        get_rngRailGroupTable().Cells(rail_index, vrm_index).Interior.ColorIndex = 2
        get_rngRailGroupTable().Cells(rail_index, vrm_index).Locked = False
    End If
End Function

Public Function get_connection_type_by_index(rail_index As Integer, vrm_index As Integer)
    get_connection_type_by_index = get_connection_type(wksSystemDecap.Range("rngRailGroupTable").Cells(rail_index, vrm_index))
End Function

Public Function get_num_decap_caps() As Long
    get_num_decap_caps = wksSystemDecap.Range("rngDecapCapInfo").Rows.count
End Function

Public Function get_num_bulk_caps() As Long
    get_num_bulk_caps = wksSystemDecap.Range("rngBulkCapInfo").Rows.count
End Function

Public Function get_decap_cap_param(cap_index As Integer, param_name As String)
    Dim col As Integer
    
    If param_name = "name" Then
        col = 1
    ElseIf param_name = "source" Then
        col = 2
    ElseIf param_name = "value" Then
        col = 3
    ElseIf param_name = "footprint" Then
        col = 4
    ElseIf param_name = "layer" Then
        col = 5
    ElseIf param_name = "orientation" Then
        col = 6
    ElseIf param_name = "Cap" Then
        col = 45
    ElseIf param_name = "ESR" Then
        col = 46
    ElseIf param_name = "ESL" Then
        col = 47
    ElseIf param_name = "Lmnt" Then
        col = 48
    End If
    
    get_decap_cap_param = wksSystemDecap.Range("rngDecapCapInfo").Cells(cap_index, col).value
    
    If get_decap_cap_param = "" And param_name = "source" Then
        get_decap_cap_param = "From Library"
    End If
End Function

Public Function set_decap_cap_param(cap_index As Integer, param_name As String, value As Variant)
    Dim col As Integer
    
    If param_name = "name" Then
        col = 1
    ElseIf param_name = "source" Then
        col = 2
    ElseIf param_name = "value" Then
        col = 3
    ElseIf param_name = "footprint" Then
        col = 4
    ElseIf param_name = "layer" Then
        col = 5
    ElseIf param_name = "orientation" Then
        col = 6
    ElseIf param_name = "Cap" Then
        col = 45 + get_num_vrms() - 4
    ElseIf param_name = "ESR" Then
        col = 46 + get_num_vrms() - 4
    ElseIf param_name = "ESL" Then
        col = 47 + get_num_vrms() - 4
    ElseIf param_name = "Lmnt" Then
        col = 48 + get_num_vrms() - 4
    End If
    
    wksSystemDecap.Range("rngDecapCapInfo").Cells(cap_index, col).value = value
End Function

Public Function get_bulk_cap_param(cap_index As Integer, param_name As String)
    Dim col As Integer
    
    If param_name = "name" Then
        col = 1
    ElseIf param_name = "source" Then
        col = 2
    ElseIf param_name = "value" Then
        col = 3
    ElseIf param_name = "footprint" Then
        col = 4
    ElseIf param_name = "layer" Then
        col = 5
    ElseIf param_name = "orientation" Then
        col = 6
    ElseIf param_name = "Cap" Then
        col = 45 + get_num_vrms() - 4
    ElseIf param_name = "ESR" Then
        col = 46 + get_num_vrms() - 4
    ElseIf param_name = "ESL" Then
        col = 47 + get_num_vrms() - 4
    ElseIf param_name = "Lmnt" Then
        col = 48 + get_num_vrms() - 4
    End If
    
    get_bulk_cap_param = wksSystemDecap.Range("rngBulkCapInfo").Cells(cap_index, col).value
    
    If get_bulk_cap_param = "" And param_name = "source" Then
        get_bulk_cap_param = "From Library"
    End If
End Function

Public Function set_bulk_cap_param(cap_index As Integer, param_name As String, value As Variant)
    Dim col As Integer
    
    If param_name = "name" Then
        col = 1
    ElseIf param_name = "source" Then
        col = 2
    ElseIf param_name = "value" Then
        col = 3
    ElseIf param_name = "footprint" Then
        col = 4
    ElseIf param_name = "layer" Then
        col = 5
    ElseIf param_name = "orientation" Then
        col = 6
    ElseIf param_name = "Cap" Then
        col = 45 + get_num_vrms() - 4
    ElseIf param_name = "ESR" Then
        col = 46 + get_num_vrms() - 4
    ElseIf param_name = "ESL" Then
        col = 47 + get_num_vrms() - 4
    ElseIf param_name = "Lmnt" Then
        col = 48 + get_num_vrms() - 4
    End If
    
    wksSystemDecap.Range("rngBulkCapInfo").Cells(cap_index, col).value = value
End Function

Public Function set_bulk_cap_quantity(vrm_index As Integer, cap_index As Integer, value As Long)
    wksSystemDecap.Range("rngBulkCapQuantity").Cells(cap_index, vrm_index).value = value
End Function

Public Function set_decap_cap_quantity(vrm_index As Integer, cap_index As Integer, value As Long)
    wksSystemDecap.Range("rngDecapCapQuantity").Cells(cap_index, vrm_index).value = value
End Function

Public Function get_bulk_cap_quantity(vrm_index As Integer, cap_index As Integer) As Integer
    get_bulk_cap_quantity = wksSystemDecap.Range("rngBulkCapQuantity").Cells(cap_index, vrm_index).value
End Function

Public Function get_decap_cap_quantity(vrm_index As Integer, cap_index As Integer) As Integer
    get_decap_cap_quantity = wksSystemDecap.Range("rngDecapCapQuantity").Cells(cap_index, vrm_index).value
End Function

Public Function get_cap_name(target As Range) As String
    get_cap_name = wksSystemDecap.Cells(target.row, 2).value
End Function

Public Function set_decoupling_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngDecouplingMode").Cells(1, vrm_id).value = mode
    
    If mode = "Auto" Then
        wksSystemDecap.Range("rngDecapCapQuantity").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngDecapCapQuantity").Columns(vrm_id).Locked = True
        
        wksSystemDecap.Range("rngBulkCapQuantity").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngBulkCapQuantity").Columns(vrm_id).Locked = True
    ElseIf mode = "Manual" Then
        wksSystemDecap.Range("rngDecapCapQuantity").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngDecapCapQuantity").Columns(vrm_id).Locked = False
        
        wksSystemDecap.Range("rngBulkCapQuantity").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngBulkCapQuantity").Columns(vrm_id).Locked = False
    End If
End Function

Public Function set_vrm_impedance_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngVRMImpedanceMode").Cells(1, vrm_id).value = mode

    If mode = "Ignore" Then
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Locked = True
    ElseIf mode = "Custom" Then
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Interior.ColorIndex = 2
        
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Locked = False
    ElseIf mode = "Library" Then
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Interior.ColorIndex = 33
        
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Locked = True
    Else ' for other enpirion model
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).value = "--"
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).value = "--"
        
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngVRMR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngVRML").Columns(vrm_id).Locked = True
    End If
End Function

Public Function set_feffective_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngFeffectiveMode").Cells(1, vrm_id).value = mode

    If mode = "Calculate" Then
        wksSystemDecap.Range("rngFeffective").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngFeffective").Columns(vrm_id).Locked = True
    ElseIf mode = "Override" Then
        wksSystemDecap.Range("rngFeffective").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngFeffective").Columns(vrm_id).Locked = False
    End If
End Function

Public Function set_vripple_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngVrippleMode").Cells(1, vrm_id).value = mode

    If mode = "Calculate" Then
        wksSystemDecap.Range("rngVripple").Columns(vrm_id).Interior.ColorIndex = 40
        wksSystemDecap.Range("rngVripple").Columns(vrm_id).Locked = True
    ElseIf mode = "Override" Then
        wksSystemDecap.Range("rngVripple").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngVripple").Columns(vrm_id).Locked = False
    End If
End Function

Public Function set_core_clock_frequency_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngCoreClockFrequencyMode").Cells(1, vrm_id).value = mode

    If mode = "Custom" Then
        wksSystemDecap.Range("rngCoreClockFrequency").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngCoreClockFrequency").Columns(vrm_id).Locked = False
    Else
        wksSystemDecap.Range("rngCoreClockFrequency").Columns(vrm_id).Interior.ColorIndex = 40
        wksSystemDecap.Range("rngCoreClockFrequency").Columns(vrm_id).Locked = True
    End If
End Function

Public Function set_core_clock_cycles_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngCoreClockCyclesMode").Cells(1, vrm_id).value = mode

    If mode = "Custom" Then
        wksSystemDecap.Range("rngCoreClockCycles").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngCoreClockCycles").Columns(vrm_id).Locked = False
    Else
        wksSystemDecap.Range("rngCoreClockCycles").Columns(vrm_id).Interior.ColorIndex = 40
        wksSystemDecap.Range("rngCoreClockCycles").Columns(vrm_id).Locked = True
    End If
End Function

Public Sub set_vripple_comment()
    Dim vripple_cell As Range
    Dim current_num_vrms As Integer

    current_num_vrms = get_num_vrms()
    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To current_num_vrms
        Set vripple_cell = wksSystemDecap.Range("rngVripple").Cells(1, i + 1)
        
        If Not vripple_cell.Comment Is Nothing Then
            vripple_cell.Comment.Delete
        End If
        
        With vripple_cell.AddComment
            .Visible = False
            .Text "Ripple Tolerance percentage for the Ztarget calculations." & vbCrLf & vbCrLf & "If 'Override' mode is used, the entered number must be between 1 to 100."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 64.5
            .Shape.width = 164.25
        End With
    Next
    
    protect_worksheet wksSystemDecap
End Sub

Public Sub set_transient_comment()
    Dim transient_cell As Range
    Dim current_num_vrms As Integer

    current_num_vrms = get_num_vrms()
    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To current_num_vrms
        Set transient_cell = wksSystemDecap.Range("rngTransCurrent").Cells(1, i + 1)
        
        If Not transient_cell.Comment Is Nothing Then
            transient_cell.Comment.Delete
        End If
        
        With transient_cell.AddComment
            .Visible = False
            .Text "Transient current change percentage for the Ztarget calculations." & vbCrLf & vbCrLf & "If 'Override' mode is used, the entered number must be between 1 to 100."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 64.5
            .Shape.width = 164.25
        End With
    Next
    
    protect_worksheet wksSystemDecap
End Sub

Public Sub set_core_clock_frequency_comment()
    Dim transient_cell As Range
    Dim current_num_vrms As Integer

    current_num_vrms = get_num_vrms()
    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To current_num_vrms
        Dim core_clock_freq_cell As Range
        Set core_clock_freq_cell = wksSystemDecap.Range("rngCoreClockFrequency").Cells(1, i + 1)
        
        If Not core_clock_freq_cell.Comment Is Nothing Then
            core_clock_freq_cell.Comment.Delete
        End If
        
        With core_clock_freq_cell.AddComment
            .Visible = False
            .Text "Set the clock frequency for the core rail." & vbCrLf & vbCrLf & "If 'Custom' mode is used, the entered number must be between 0 to 1000."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 64.5
            .Shape.width = 164.25
        End With
    Next
    
    protect_worksheet wksSystemDecap
End Sub

Public Sub set_core_clock_cycles_comment()
    Dim transient_cell As Range
    Dim current_num_vrms As Integer

    current_num_vrms = get_num_vrms()
    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To current_num_vrms
        Dim core_clock_cycles_cell As Range
        Set core_clock_cycles_cell = wksSystemDecap.Range("rngCoreClockCycles").Cells(1, i + 1)
        
        If Not core_clock_cycles_cell.Comment Is Nothing Then
            core_clock_cycles_cell.Comment.Delete
        End If
        
        With core_clock_cycles_cell.AddComment
            .Visible = False
            .Text "Set the number of core clock cycles during the current ramps up." & vbCrLf & vbCrLf & "If 'Custom' mode is used, the entered number must be between 0 to 100."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 64.5
            .Shape.width = 164.25
        End With
    Next
    
    protect_worksheet wksSystemDecap
End Sub

Public Sub set_plane_rc_comment()
    Dim current_num_vrms As Integer

    current_num_vrms = get_num_vrms()
    unprotect_worksheet wksSystemDecap

    Dim i As Integer

    For i = 0 To current_num_vrms
        Dim plane_rc As Range
        Set plane_rc = wksSystemDecap.Range("rngPlaneR").Cells(1, i + 1)
        
        If Not plane_rc.Comment Is Nothing Then
            plane_rc.Comment.Delete
        End If
        
        With plane_rc.AddComment
            .Visible = False
            .Text "Please go to the Plane_Cap sheet to set the plane configurations for each individual regulator group."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 35
            .Shape.width = 164.25
        End With
        
        Set plane_rc = wksSystemDecap.Range("rngPlaneC").Cells(1, i + 1)
        
        If Not plane_rc.Comment Is Nothing Then
            plane_rc.Comment.Delete
        End If
        
        With plane_rc.AddComment
            .Visible = False
            .Text "Please go to the Plane_Cap sheet to set the plane configurations for each individual regulator group."
            .Shape.TextFrame.Characters.Font.Size = 8
            .Shape.TextFrame.Characters.Font.name = "Tahoma"
            .Shape.height = 35
            .Shape.width = 164.25
        End With
    Next
    
    protect_worksheet wksSystemDecap
End Sub

Public Function set_transient_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngTransientMode").Cells(1, vrm_id).value = mode

    If mode = "Calculate" Then
        wksSystemDecap.Range("rngTransCurrent").Columns(vrm_id).Interior.ColorIndex = 40
        wksSystemDecap.Range("rngTransCurrent").Columns(vrm_id).Locked = True
    ElseIf mode = "Override" Then
        wksSystemDecap.Range("rngTransCurrent").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngTransCurrent").Columns(vrm_id).Locked = False
    End If
End Function

Public Function set_via_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngViaMode").Cells(1, vrm_id).value = mode
    
    If mode = "Ignore" Then ' lock everything
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Locked = True
    ElseIf mode = "Custom" Then ' unlock impedance values, lock layer / num values
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Locked = True
    ElseIf mode = "Calculate" Then 'lock impedance values, unlock layer / num values
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Interior.ColorIndex = 2
        
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Locked = False
    ElseIf mode = "Default" Then 'lock impedance values and num values, unlock layer
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Interior.ColorIndex = 33
        
        wksSystemDecap.Range("rngViaR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngViaL").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngLayerNumber").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngNumViaPairs").Columns(vrm_id).Locked = True
    End If
End Function

Public Function set_plane_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngPlaneMode").Cells(1, vrm_id).value = mode
    
    If mode = "Ignore" Then
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Locked = True
    ElseIf mode = "Custom" Then
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Interior.ColorIndex = 2
        
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Locked = False
    ElseIf mode = "Calculate" Then
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Interior.ColorIndex = 33
        
        wksSystemDecap.Range("rngPlaneR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngPlaneC").Columns(vrm_id).Locked = True
    End If
End Function

Public Function set_spreading_mode(vrm_id As Integer, mode As String)
    wksSystemDecap.Range("rngSpreadingMode").Cells(1, vrm_id).value = mode
    
    If mode = "Ignore" Then
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Interior.ColorIndex = 15
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Interior.ColorIndex = 15
        
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Locked = True
    ElseIf mode = "Custom" Then
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Interior.ColorIndex = 2
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Interior.ColorIndex = 2
        
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Locked = False
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Locked = False
    ElseIf mode = "Low" Or mode = "Medium" Or mode = "High" Then
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Interior.ColorIndex = 33
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Interior.ColorIndex = 33
        
        wksSystemDecap.Range("rngSpreadingR").Columns(vrm_id).Locked = True
        wksSystemDecap.Range("rngSpreadingL").Columns(vrm_id).Locked = True
    End If
End Function

Public Function get_target_type(target As Range) As String
    get_target_type = ""
    If Not Intersect(target, wksSystemDecap.Range("rngCurrentList")) Is Nothing Then
        get_target_type = "rail_current"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngFamilyName")) Is Nothing Then
        get_target_type = "family"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngPackageName")) Is Nothing Then
        get_target_type = "package"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngPCGConfig")) Is Nothing Then
        get_target_type = "pcg_config"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVoltageList")) Is Nothing Then
        get_target_type = "rail_voltage"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngRailGroupTable")) Is Nothing Then
        get_target_type = "vrm_connection"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVRMType")) Is Nothing Then
        get_target_type = "vrm_type"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngParentVRM")) Is Nothing Then
        get_target_type = "parent_vrm"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngSupplyVoltage")) Is Nothing Then
        get_target_type = "supply_voltage"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVRMEfficiency")) Is Nothing Then
        get_target_type = "vrm_efficiency"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVRMImpedanceMode")) Is Nothing Then
        get_target_type = "vrm_impedance_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVRMR")) Is Nothing Then
        get_target_type = "vrm_r"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVRML")) Is Nothing Then
        get_target_type = "vrm_l"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngViaR")) Is Nothing Then
        get_target_type = "via_r"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngViaL")) Is Nothing Then
        get_target_type = "via_l"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngNumViaPairs")) Is Nothing Then
        get_target_type = "num_via_pairs"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngViaMode")) Is Nothing Then
        get_target_type = "via_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngLayerNumber")) Is Nothing Then
        get_target_type = "layer_number"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngSpreadingR")) Is Nothing Then
        get_target_type = "spreading_r"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngSpreadingL")) Is Nothing Then
        get_target_type = "spreading_l"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngSpreadingMode")) Is Nothing Then
        get_target_type = "spreading_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngPlaneR")) Is Nothing Then
        get_target_type = "plane_r"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngPlaneC")) Is Nothing Then
        get_target_type = "plane_c"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngPlaneMode")) Is Nothing Then
        get_target_type = "plane_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngDecapCapInfo")) Is Nothing Then
        get_target_type = "decap_cap_info"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngBulkCapInfo")) Is Nothing Then
        get_target_type = "bulk_cap_info"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngDecouplingMode")) Is Nothing Then
        get_target_type = "decoupling_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngFeffectiveMode")) Is Nothing Then
        get_target_type = "feffective_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngFeffective")) Is Nothing Then
        get_target_type = "feffective"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngCoreClockFrequencyMode")) Is Nothing Then
        get_target_type = "core_clock_frequency_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngCoreClockFrequency")) Is Nothing Then
        get_target_type = "core_clock_frequency"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngCoreClockCyclesMode")) Is Nothing Then
        get_target_type = "core_clock_cycles_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngCoreClockCycles")) Is Nothing Then
        get_target_type = "core_clock_cycles"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngDecapCapQuantity")) Is Nothing Then
        get_target_type = "decap_cap_quantity"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngBulkCapQuantity")) Is Nothing Then
        get_target_type = "bulk_cap_quantity"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngViewImpedanceChart")) Is Nothing Then
        get_target_type = "view_impedance_chart"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngTransientMode")) Is Nothing Then
        get_target_type = "transient_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngTransCurrent")) Is Nothing Then
        get_target_type = "transient_current"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVrippleMode")) Is Nothing Then
        get_target_type = "vripple_mode"
    ElseIf Not Intersect(target, wksSystemDecap.Range("rngVripple")) Is Nothing Then
        get_target_type = "vripple"
    End If
End Function

Public Function is_target_vrm_impedance_input(target As Range) As Boolean
    is_target_vrm_impedance_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngVRMImpedanceMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngVRMR")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngVRML")) Is Nothing Then
        is_target_vrm_impedance_input = True
    End If
End Function

Public Function is_target_via_input(target As Range) As Boolean
    is_target_via_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngViaR")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngViaL")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngNumViaPairs")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngViaMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngLayerNumber")) Is Nothing Then
        is_target_via_input = True
    End If
End Function

Public Function is_target_plane_input(target As Range) As Boolean
    is_target_plane_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngPlaneR")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngPlaneC")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngPlaneMode")) Is Nothing Then
        is_target_plane_input = True
    End If
End Function

Public Function is_target_spreading_input(target As Range) As Boolean
    is_target_spreading_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngSpreadingL")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngSpreadingMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngSpreadingR")) Is Nothing Then
        is_target_spreading_input = True
    End If
End Function

Public Function is_target_transient_input(target As Range) As Boolean
    is_target_transient_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngTransientMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngTransCurrent")) Is Nothing Then
        is_target_transient_input = True
    End If
End Function

Public Function is_target_vripple_input(target As Range) As Boolean
    is_target_vripple_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngVrippleMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngVripple")) Is Nothing Then
        is_target_vripple_input = True
    End If
End Function

Public Function is_target_core_clock_frequency_input(target As Range) As Boolean
    is_target_core_clock_frequency_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngCoreClockFrequencyMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngCoreClockFrequency")) Is Nothing Then
        is_target_core_clock_frequency_input = True
    End If
End Function

Public Function is_target_core_clock_cycles_input(target As Range) As Boolean
    is_target_core_clock_cycles_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngCoreClockCyclesMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngCoreClockCycles")) Is Nothing Then
        is_target_core_clock_cycles_input = True
    End If
End Function

Public Function is_target_vrm_input(target As Range) As Boolean
    is_target_vrm_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngRailGroupTable")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngVRMType")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngParentVRM")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngSupplyVoltage")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngVRMEfficiency")) Is Nothing Then
        is_target_vrm_input = True
    End If
End Function

Public Function is_target_rail_input(target As Range) As Boolean
    is_target_rail_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngVoltageList")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngCurrentList")) Is Nothing Then
        is_target_rail_input = True
    End If
End Function

Public Function is_target_device_selector(target As Range) As Boolean
    is_target_device_selector = False
    If Not Intersect(target, wksSystemDecap.Range("rngFamilyName")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngPackageName")) Is Nothing Then
        is_target_device_selector = True
    End If
End Function

Public Function is_target_decoupling_input(target As Range) As Boolean
    is_target_decoupling_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngDecapCapInfo")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngBulkCapInfo")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngDecouplingMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngDecapCapQuantity")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngBulkCapQuantity")) Is Nothing Then
        is_target_decoupling_input = True
    End If
End Function

Public Function is_target_feffective_input(target As Range) As Boolean
    is_target_feffective_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngFeffectiveMode")) Is Nothing Or Not Intersect(target, wksSystemDecap.Range("rngFeffective")) Is Nothing Then
        is_target_feffective_input = True
    End If
End Function

Public Function is_target_pcg_input(target As Range) As Boolean
    is_target_pcg_input = False
    If Not Intersect(target, wksSystemDecap.Range("rngPCGConfig")) Is Nothing Then
        is_target_pcg_input = True
    End If
End Function

Public Function set_vrm_impedance_options(vrm_type As String, vrm_model_names As Variant)
    Dim options() As String
    
    Dim options_offset As Integer
    options_offset = 3
    Dim options_count As Integer
    options_count = 3
    
    ReDim Preserve options(options_count - 1)
    ' the default options
    options(0) = "Ignore"
    options(1) = "Custom"
    options(2) = "Library"

    If Not IsEmpty(vrm_model_names) Then
        ' resize to add vrm parts
        options_count = options_count + UBound(vrm_model_names)
        ReDim Preserve options(options_count)
        Dim i As Integer

        For i = 0 To UBound(vrm_model_names)
            options(i + options_offset) = vrm_model_names(i)
        Next
    End If
    
    Dim options_range As Range
    Dim options_range_name As String
    Dim filter_col As Integer
    Dim linear_col As Integer
    Dim switcher_col As Integer
    
    filter_col = 7
    linear_col = 8
    switcher_col = 9
    
    With wksSystemDecapOptions
        Select Case vrm_type
            Case VRM_TYPE_FILTER
                options_range_name = "rngOptionsVRMImpedanceFilter"
                Set options_range = .Range(.Cells(2, filter_col), .Cells(UBound(options) + 2, filter_col))
            Case VRM_TYPE_LINEAR
                options_range_name = "rngOptionsVRMImpedanceLinear"
                Set options_range = .Range(.Cells(2, linear_col), .Cells(UBound(options) + 2, linear_col))
            Case VRM_TYPE_SWITCHER
                options_range_name = "rngOptionsVRMImpedanceSwitcher"
                Set options_range = .Range(.Cells(2, switcher_col), .Cells(UBound(options) + 2, switcher_col))
        End Select
        options_range.name = options_range_name
    End With
    
    For i = 0 To UBound(options)
        options_range.Cells(i + 1, 1).value = options(i)
    Next
End Function

Public Function set_impedance_option_for_vrm(vrm_id As Integer, vrm_type As String)
    Dim formula As String

    Select Case vrm_type
        Case VRM_TYPE_FILTER
            formula = "=rngOptionsVRMImpedanceFilter"
        Case VRM_TYPE_LINEAR
            formula = "=rngOptionsVRMImpedanceLinear"
        Case VRM_TYPE_SWITCHER
            formula = "=rngOptionsVRMImpedanceSwitcher"
    End Select

    Dim option_range As Range
    Set option_range = wksSystemDecap.Range("rngVRMImpedanceMode").Cells(1, vrm_id)

    On Error GoTo ErrHandler ' we must unprotect the worksheet :( Microsoft...
    wksSystemDecap.Unprotect PROTECTION_PASSWORD
    option_range.Activate
    With ActiveCell.Validation
        .Delete
        .Add Type:=xlValidateList, Formula1:=formula
    End With
    
ErrHandler:
    wksSystemDecap.Protect PROTECTION_PASSWORD, UserInterfaceOnly:=True
End Function
Attribute VB_Name = "Settings"
Option Explicit

#Const DEBUG_OUTPUT = True

Private Const PROPERTIES_RANGE_TO_COPY = "Properties"

'This Module Handles All the Settings Events (Save Custom / Restore Custom / Restore Default)
Function RestoreAllDefaults()
    If MsgBox("Restore all default settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    ' mikeh Call SystemDecap_RestoreDefault
    Call Lib_RestoreDefault(False)
    Call Cap_RestoreDefault(False)
    Call Plane_RestoreDefault(False)
    Call X2Y_RestoreDefault(False)
End Function

'BGA_Via Settings
Function BGA_SaveCustom()
    If MsgBox("Save Changes to Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksBGAVia.Range("E33:E36").Copy Destination:=wksBGAVia_Default.Range("E17:E20")
End Function

Function BGA_RestoreCustom()
    If MsgBox("Restore Changes from Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksBGAVia_Default.Range("E17:E20").Copy Destination:=wksBGAVia.Range("E33:E36")
End Function

Function BGA_RestoreDefault(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Page to Default Settings?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If
    
    wksBGAVia_Default.Range("E9:E12").Copy Destination:=wksBGAVia.Range("E33:E36")
End Function

'Cap_Mount Settings
Function Cap_SaveCustom()
    If MsgBox("Save Changes to Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksCapMount.Range("E38:N49").Copy Destination:=wksCapMount_Default.Range("E28:N39")
End Function

Function Cap_RestoreCustom()
    If MsgBox("Restore Changes from Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksCapMount_Default.Range("E28:N39").Copy Destination:=wksCapMount.Range("E38:N49")
End Function

Function Cap_RestoreDefault(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Page to Default Settings?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If

    wksCapMount_Default.Range("E10:N21").Copy Destination:=wksCapMount.Range("E38:N49")
End Function

'Plane_Cap Settings
Function Plane_SaveCustom()
    If MsgBox("Save Changes to Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksPlaneCap.Range("D33:D34").Copy Destination:=wksPlaneCap_Default.Range("D24:D25")
    wksPlaneCap.Range("E28:E32").Copy Destination:=wksPlaneCap_Default.Range("E19:E23")
End Function

Function Plane_RestoreCustom()
    If MsgBox("Restore Changes from Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksPlaneCap_Default.Range("D24:D25").Copy Destination:=wksPlaneCap.Range("D33:D34")
    wksPlaneCap_Default.Range("E19:E23").Copy Destination:=wksPlaneCap.Range("E28:E32")
End Function

Function Plane_RestoreDefault(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Page to Default Settings?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If

    wksPlaneCap_Default.Range("D14:D15").Copy Destination:=wksPlaneCap.Range("D33:D34")
    wksPlaneCap_Default.Range("E9:E13").Copy Destination:=wksPlaneCap.Range("E28:E32")
End Function

'X2Y Settings
Function X2Y_SaveCustom()
    If MsgBox("Save Changes to Custom Settings?", vbYesNo) = vbNo Then
        Exit Function
    End If

    wksX2YMount.Range("D38:G39").Copy Destination:=wksX2YMount_Default.Range("D4:G5")
    wksX2YMount.Range("D41:G49").Copy Destination:=wksX2YMount_Default.Range("D7:G15")
End Function

Function X2Y_RestoreCustom(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Changes from Custom Settings?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If

    wksX2YMount_Default.Range("D4:G5").Copy Destination:=wksX2YMount.Range("D38:G39")
    wksX2YMount_Default.Range("D7:G15").Copy Destination:=wksX2YMount.Range("D41:G49")
End Function

Function X2Y_RestoreDefault(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Page to Default Settings?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If

    wksX2YMount_Default.Range("D23:G24").Copy Destination:=wksX2YMount.Range("D38:G39")
    wksX2YMount_Default.Range("D26:G34").Copy Destination:=wksX2YMount.Range("D41:G49")
End Function

Private Sub CopyLibraryPropertyRanges(source As Worksheet, Destination As Worksheet)
    ' We save a custom settings by copying the named ranges that end in
    ' 'Properties' to another worksheet. Any such ranges that exist in
    ' the source sheet must also exist in the destination sheet.

    Dim Thing As name
    Dim RangeName As String
    Dim TagLen As Integer

    TagLen = Len(PROPERTIES_RANGE_TO_COPY)

#If DEBUG_OUTPUT Then
    Debug.Print "Copying library from "; source.name; " to "; Destination.name
#End If

    unprotect_worksheet Destination

    For Each Thing In source.Names
        RangeName = Thing.name
        If Right(RangeName, TagLen) = PROPERTIES_RANGE_TO_COPY Then
            RangeName = Mid(RangeName, InStr(RangeName, "!") + 1)
#If DEBUG_OUTPUT Then
            Debug.Print " - copying range "; RangeName
#End If
            source.Range(RangeName).Copy Destination:=Destination.Range(RangeName)
        End If
    Next

    protect_worksheet Destination
End Sub

'Lib Settings
Public Sub Lib_SaveCustom()
    If MsgBox("Save Changes to Custom Settings?", vbYesNo) = vbNo Then
        Exit Sub
    End If

    CopyLibraryPropertyRanges wksLibrary, wksLibCustomNew
End Sub

Public Sub Lib_RestoreCustom()
    If MsgBox("Restore Changes from Custom Settings?", vbYesNo) = vbNo Then
        Exit Sub
    End If

    CopyLibraryPropertyRanges wksLibCustomNew, wksLibrary
End Sub

Public Sub Lib_RestoreDefault(Optional ByVal ShowPrompt As Boolean = True)
    If ShowPrompt Then
        If MsgBox("Restore Page to Default Settings?", vbYesNo) = vbNo Then
            Exit Sub
        End If
    End If

    CopyLibraryPropertyRanges wksLibDefaultNew, wksLibrary
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Stackup"
' This module contains code that supports Stackup sheet
' In particular, it can generate full stackup based on input parameters, and
' knows how to populate geometry data in other user-visible sheets based on
' high-level stackup parameters.
'
' Originally written by Andy Oishei
' Incorporated into the tool by Dmitry Denisenko in 2011.

Option Explicit

' Location of Output cells
Const Output_Clear_Col = "F"    'Column with nothing in it.
Const Output_Layer_Num_Col = "G"
Const Output_Material_Col = "H"
Const Output_Dk_Col = "I"
Const Output_Thickness_Col = "J"
Const Output_Type_Col = "K"
Const Output_Ref_Col = "L"
Const Output_Row_Start = 24
Const Output_Row_End = 164

Const Output_Range = Output_Layer_Num_Col & Output_Row_Start & ":" & Output_Ref_Col & Output_Row_End

' Location of input data
Const input_start_row = 25
Const input_col = "E"
Const layer_count_loc = input_col & input_start_row
Const drill_size_loc = input_col & (input_start_row + 1)
Const bga_via_pitch_loc = input_col & (input_start_row + 2)
Const foil_thickness_loc = input_col & (input_start_row + 3)
Const num_pwr_gnd_pairs_loc = input_col & (input_start_row + 4)
Const de_material_loc = "D" & (input_start_row + 5)
Const er_const_loc = input_col & (input_start_row + 5)
Const total_thickness_loc = input_col & (input_start_row + 7)

' Location of stack configuration
Public Const stackup_config_loc = "D" & (input_start_row + 6)

' Location of stack "stub"
Const stack_stub_col = "Q"
Const stack_stub_type_col = "P"
Const stack_stub_start_row = input_start_row + 11
Const stack_stub_end_row = stack_stub_start_row + 9

Const full_stackup_col = "J"
Const full_stackup_start_row = 24
Const full_stackup_end_row = full_stackup_start_row + 9
Const stack_stub_range = full_stackup_col & full_stackup_start_row & ":" & full_stackup_col & full_stackup_end_row

Function stackup_event_handler(ByVal target As Range)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
    
    On Error GoTo ErrHandler

    update_stackup_dielectric
    update_overall_stackup_thickness

    Exit Function

ErrHandler:
    Call ErrorHandler("stackup_event_handler")
End Function

Function stackup_activate()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
    
    update_stackup_dielectric

    Exit Function

ErrHandler:
    Call ErrorHandler("stackup_activate")
End Function

Function update_stackup_dielectric()
    wksStackup.Range("rngStackupDielectricValue").value = Application.WorksheetFunction.VLookup(Range("rngStackupDielectric"), Range("rngLibDielectric"), 2, False)
End Function

Function update_overall_stackup_thickness()
    wksStackup.Range("rngStackupOverallThickness").value = 2 * CDbl(Range("rngFoilThickness").value) + Application.WorksheetFunction.sum(Range("rngStackupThickness"))
End Function

'Const dielectric_material_list = Range("Dielectric_options")

Function get_output_row_range(row As Integer)
    get_output_row_range = Output_Layer_Num_Col & row & ":" & Output_Ref_Col & row
End Function

Function set_num_layers(ByVal num_layers As Integer)
    wksStackup.Range(layer_count_loc).value = num_layers
End Function

Sub stackup_construct(Optional skip_msgbox As Boolean = False)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
        
    On Error GoTo ErrHandler
        
    Dim num_layers As Integer
    Dim drill_size As Double
    Dim er_const As Double
    Dim foil_thickness As Double
    Dim de_material As String
    
    num_layers = Range(layer_count_loc).value
    drill_size = Range(drill_size_loc).value
    er_const = Range(er_const_loc).value
    de_material = Range(de_material_loc).value
    foil_thickness = Range(foil_thickness_loc).value

    If num_layers < 2 Then
        MsgBox ("Number of layers must be at least 2!")
        Exit Sub
    End If

    If skip_msgbox = False Then
        If MsgBox("This will construct a new stackup that will replace the contents of the 'Full Stackup' table." & vbCrLf & vbCrLf & "Are you sure?", vbYesNo + vbExclamation, "Construct Stackup") = vbNo Then
            Exit Sub
        End If
    End If

    Dim useValidations As Boolean
    useValidations = usingExcel2007() And False
    
    ' Need to unprotect the worksheet so can change Validation rules
    unprotect_worksheet ActiveSheet
    
    ' Do not recalculate anything until all fields have been updated
    Application.Calculation = xlCalculationManual

    Range(Output_Range).ClearContents

    Dim cur_row As Integer
    Dim copper_color As Variant
    Dim prepreg_color As Variant

    ' Pre-fill layer count, type and Er const
    copper_color = Range(Output_Layer_Num_Col & Output_Row_Start).Interior.Color
    prepreg_color = Range(Output_Layer_Num_Col & (Output_Row_Start + 1)).Interior.Color
    
    cur_row = Output_Row_Start

    Dim layer As Long
    For layer = 1 To num_layers
        Range(Output_Layer_Num_Col & cur_row) = layer
        Range(Output_Material_Col & cur_row) = "Copper"
        Range(get_output_row_range(cur_row)).Interior.Color = copper_color
        Range(get_output_row_range(cur_row)).HorizontalAlignment = xlCenter
        
        If useValidations Then
            ' Yes, had to hardcode the range. Nothing else seems to work. Damn Excel!
            Range(Output_Ref_Col & cur_row).Validation.Delete
            Range(Output_Ref_Col & cur_row).Validation.Add _
                Type:=xlValidateList, Formula1:="=$P$27:$P$29"
        
            Range(Output_Type_Col & cur_row).Validation.Delete
            Range(Output_Type_Col & cur_row).Validation.Add _
                Type:=xlValidateList, Formula1:="=$P$31:$P$33"
        End If
        
        If layer < num_layers Then
        
            Range(Output_Material_Col & (cur_row + 1)) = "pre-preg"
            Range(Output_Dk_Col & (cur_row + 1)).value = de_material
                
            If useValidations Then
                Range(Output_Ref_Col & (cur_row + 1)).Validation.Delete
                
                Range(Output_Type_Col & (cur_row + 1)).Validation.Delete
                Range(Output_Type_Col & (cur_row + 1)).Validation.Add _
                    Type:=xlValidateList, Formula1:="=$P$31:$P$33"
                    
                Range(Output_Dk_Col & (cur_row + 1)).Validation.Delete
                Range(Output_Dk_Col & (cur_row + 1)).Validation.Add _
                    Type:=xlValidateList, Formula1:="=Dielectric_options"
            End If
                
            ' Range(Output_Layer_Num_Col & (cur_row + 1)) = layer
            Range(get_output_row_range(cur_row + 1)).Interior.Color = prepreg_color
            Range(get_output_row_range(cur_row + 1)).HorizontalAlignment = xlCenter
            
        End If
        cur_row = cur_row + 2
    Next
    
    ' Unlock all cells in the table
    Dim valid_range As String
    valid_range = Output_Layer_Num_Col & Output_Row_Start & ":" & Output_Ref_Col & (cur_row - 2)
    Range(valid_range).Locked = False
    
    ' Clear leftovers from previous stacks and set the colour to background
    Dim clearing_range As String
    clearing_range = Output_Layer_Num_Col & (cur_row - 1) & ":" & Output_Ref_Col & Output_Row_End
    Range(clearing_range).ClearContents
    Range(clearing_range).Interior.Color = Range(Output_Clear_Col & Output_Row_Start).Interior.Color
    Range(clearing_range).Locked = True
    
    ' Now fill in thicknesses. Based on stackup configuration selected
    Dim stack_stub_cur_loc As String
    Dim stack_stub_cur_type_loc As String
    Dim output_cur_row As Integer

    If Range(stackup_config_loc) = Range("Stackup_Config_Options").Cells(3, 1).value Then
        ' 1. Dual stripline with outer single tripline
        Dim c As Long
        Dim x As Long

        c = 1
        For x = (num_layers * 2 - 1) To num_layers Step -1
            If x > (num_layers) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If

                c = c + 1
                If c > 10 Then
                    c = 3
                End If
            End If
        Next

        c = 1
        For x = 1 To (num_layers)
            If x < (num_layers + 1) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If
                
                c = c + 1
                If c > 10 Then
                    c = 3
                End If
            End If
        Next
        
    ElseIf Range(stackup_config_loc) = Range("Stackup_Config_Options").Cells(2, 1).value Then
        
        ' 2. Dual stripline
        c = 1
        For x = (num_layers * 2 - 1) To num_layers Step -1
            If x > (num_layers) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If
                
                c = c + 1
                If c > 8 Then
                    c = 1
                End If
            End If
        Next

        c = 1
        For x = 1 To (num_layers)
            If x < (num_layers + 1) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If
                
                c = c + 1
                If c > 8 Then
                    c = 1
                End If
            End If
        Next
        
    ElseIf Range(stackup_config_loc) = Range("Stackup_Config_Options").Cells(1, 1).value Then
    
        ' 3. Single stripline
        c = 1
        For x = (num_layers * 2 - 1) To num_layers Step -1
            If x > (num_layers) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If
                
                c = c + 1
                If c > 4 Then
                    c = 1
                End If
            End If
        Next

        c = 1
        For x = 1 To (num_layers)
            If x < (num_layers + 1) Then
                stack_stub_cur_loc = stack_stub_col & (stack_stub_start_row - 1 + c)
                output_cur_row = Output_Row_Start - 1 + x
                Range(Output_Thickness_Col & output_cur_row) = Range(stack_stub_cur_loc)
                
                stack_stub_cur_type_loc = stack_stub_type_col & (stack_stub_start_row - 1 + c)
                If (Range(stack_stub_cur_type_loc) <> "Pre-preg") Then
                    Range(Output_Type_Col & output_cur_row) = Range(stack_stub_cur_type_loc)
                End If
                
                c = c + 1
                If c > 4 Then
                    c = 1
                End If
            End If
        Next
    End If

    ' Now select default target/reference planes.
    ' Putting them near the top to give worst possible case
    Dim num_targets As Long
    Dim num_refs As Long
    Dim cur_type_value As Variant

    num_targets = 0
    num_refs = 0
    For x = 1 To num_layers * 2 - 1
        output_cur_row = Output_Row_Start - 1 + x
        cur_type_value = Range(Output_Type_Col & output_cur_row).value
        If cur_type_value = "Power" Then
            If num_targets = 0 Then
                Range(Output_Ref_Col & output_cur_row).value = "target"
                num_targets = num_targets + 1
            Else
                Range(Output_Ref_Col & output_cur_row).value = "reference"
                Exit For
            End If
        End If
    Next
    
    Application.Calculation = xlCalculationAutomatic
    protect_worksheet ActiveSheet
    
    ' update the dielectric overall thickness
    Call update_stackup_dielectric
    Call update_overall_stackup_thickness
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("stackup_construct")
End Sub


' Use data in Stackup sheet to populate lots of values in BGA_Via,
' Plane_Cap, Cap_Mount, and X2Y_Mount sheets.
Sub import_geometries()
    
    On Error GoTo ErrHandler
    Dim layer(300) As Integer ' Does this really mean we support up to 300 layers??
    
    Dim plane_length As Integer
    Dim plane_width As Integer
    plane_length = Range("E23").value
    plane_width = Range("E24").value
    
    Dim num_layers As Integer
    Dim num_via_pairs As Integer
    num_layers = Range("E25").value
    num_via_pairs = Range("E29").value
    num_layers = Range(layer_count_loc).value

    Dim foil_thickness As Double
    Dim drill As Double
    Dim no_pwr_gnd As Variant
    Dim bga_via_pitch As Variant
    foil_thickness = Range(foil_thickness_loc).value
    drill = Range(drill_size_loc).value
    no_pwr_gnd = Range(num_pwr_gnd_pairs_loc).value
    bga_via_pitch = Range(bga_via_pitch_loc).value

    Dim r As Double
    Dim inner_diameter As Double
    r = drill / 2
    inner_diameter = drill - 2

    Dim ref_plane_target As String
    Dim adj_p As Variant
    Dim adj_c As Variant
    Dim violation As Boolean
    Dim plane As Integer
    ref_plane_target = ""
    adj_p = 0
    adj_c = 0
    violation = False
    plane = 1
    
    Dim stack_stub_cur_loc As String
    Dim output_cur_row As Integer
    Dim num_targets As Integer
    Dim num_refs As Integer
    num_targets = 0
    num_refs = 0

    Dim cur_ref_value As String
    Dim x As Long
    For x = 1 To num_layers * 2 - 1
        output_cur_row = Output_Row_Start - 1 + x
        cur_ref_value = Range(Output_Ref_Col & output_cur_row).value
        If cur_ref_value <> "" Then
            ref_plane_target = ref_plane_target + cur_ref_value
            If (cur_ref_value = "target") Then
                num_targets = num_targets + 1
            ElseIf cur_ref_value = "reference" Then
                num_refs = num_refs + 1
            End If
            
            adj_c = x
            layer(plane) = output_cur_row
            plane = plane + 1
            If ((adj_c - adj_p) = 1) Or (Range(Output_Material_Col & output_cur_row) = "pre-preg") Then
                violation = True
            Else
                adj_p = adj_c
            End If
        End If
    Next
    
    ' ERROR CHECKING
    ' Make sure we have exactly one target plane and 1 or 2 reference planes
    Dim msg As String
    msg = ""
    If num_targets <> 1 Then
        msg = num_targets & " target planes are found. Should have exactly one target plane." & vbNewLine
    ElseIf num_refs <> 1 And num_refs <> 2 Then
        msg = num_refs & " reference planes are found. Should have either one or two." & vbNewLine
    ElseIf (Not ((ref_plane_target = "referencetargetreference") Or _
            (ref_plane_target = "referencetarget") Or _
            (ref_plane_target = "targetreference")) And (Not (violation))) Then
        msg = "Improper locations of reference or target planes."
    End If
    
    If msg <> "" Then
        ' Add helpful suffix listing all valid target/reference configurations.
        msg = msg & "Adjust values in Pwr Planes column of Full Stackup table to fix the error." & _
                vbNewLine & vbNewLine & _
                "Valid configurations are: " & vbNewLine & _
                "   target/reference" & vbNewLine & _
                "   reference/target/reference" & vbNewLine & _
                "   reference/target"
        MsgBox msg, vbOKOnly + vbCritical + vbDefaultButton2, "Import Geometries Violation"
        Exit Sub
    End If

    Dim temp1 As Variant
    Dim temp2 As Variant
    Dim h1 As Variant
    Dim h2 As Variant
    Dim dk1 As String
    Dim dk2 As String
    Dim dk_temp As String

    temp1 = 0
    temp2 = 0
    dk1 = ""
    dk2 = ""
    ' WARNING: if there are multiple dielectric layers between target and reference planes, the last seen one
    '          will be picked. How's that for accurate modelling!?
    '          Dmitry, January 2011
    
    If ref_plane_target = "referencetargetreference" Then
        For x = layer(1) + 1 To layer(2) - 1
            temp1 = temp1 + Range(Output_Thickness_Col & x).value
            dk1 = Range(Output_Dk_Col & x).value
        Next
        For x = layer(2) + 1 To layer(3) - 1
            temp2 = temp2 + Range(Output_Thickness_Col & x).value
            dk2 = Range(Output_Dk_Col & x).value
        Next
        If temp1 < temp2 Then
            h1 = temp1
            h2 = temp2
        Else
            h1 = temp2
            h2 = temp1
            dk_temp = dk1
            dk1 = dk2
            dk2 = dk_temp
        End If
    ElseIf ref_plane_target = "targetreference" Then
        h1 = 1000
        For x = layer(1) + 1 To layer(2) - 1
            h2 = h2 + Range(Output_Thickness_Col & x).value
            dk2 = Range(Output_Dk_Col & x).value
        Next
        dk1 = dk2
    ElseIf ref_plane_target = "referencetarget" Then
        h2 = 1000
        For x = layer(1) + 1 To layer(2) - 1
            h1 = h1 + Range(Output_Thickness_Col & x).value
            dk1 = Range(Output_Dk_Col & x).value
        Next
        dk2 = dk1
    End If

    Dim thk As Variant

    If h1 < h2 Then
        thk = h1
    Else
        thk = h2
    End If

    Dim C1 As Variant
    Dim C2 As Variant
    Dim line As Long
    Dim plane_target As Variant
    Dim t As Variant

    C1 = 0
    C2 = 0
    line = 1
    
    Do
        plane_target = Range(Output_Ref_Col & (Output_Row_Start - 1 + line)).value
        If (plane_target <> "target") Then
            C1 = C1 + Range(Output_Thickness_Col & (Output_Row_Start - 1 + line)).value
        Else
            t = Range(Output_Thickness_Col & (Output_Row_Start - 1 + line)).value
        End If
        line = line + 1
    Loop Until (plane_target = "target")
    
    C2 = Range(total_thickness_loc).value - C1 - t - foil_thickness
    C1 = C1 + foil_thickness

    Dim h As Variant

    h = Range(stack_stub_range).Cells(2, 1).value
    ' Dual Stripline configuration
    If Range(stackup_config_loc).value = Range("Stackup_Config_Options").Cells(3, 2).value Then
        h = h + Range(stack_stub_range).Cells(3, 1).value + Range(stack_stub_range).Cells(4, 2).ValueRange("k9")
    End If

    Dim out_metal_thickness As Double
    out_metal_thickness = Range(stack_stub_range).Cells(1, 1).value + foil_thickness
    
    ' Do not recalculate until all fields have been updated
    Application.Calculation = xlCalculationManual
    
    ' All references below will stay hard-coded since there is no plan
    ' to change the layout of these sheets
    wksBGAVia.Activate
    Range("e33") = drill
    Range("e34") = inner_diameter
    Range("e36") = C1
    Range("e37") = no_pwr_gnd
    Range("e35") = bga_via_pitch
    
    wksPlaneCap.Activate
    Range("e28") = plane_length
    Range("e29") = plane_width
    Range("e30") = t
    Range("e31") = h1
    Range("e32") = h2
    Range("d33") = dk1
    Range("d34") = dk2
    
    wksCapMount.Activate
    Range("e41") = out_metal_thickness
    Range("f41") = out_metal_thickness
    Range("g41") = out_metal_thickness
    Range("h41") = out_metal_thickness
    Range("i41") = out_metal_thickness
    Range("j41") = out_metal_thickness
    Range("k41") = out_metal_thickness
    Range("l41") = out_metal_thickness
    Range("m41") = out_metal_thickness
    Range("n41") = out_metal_thickness
    
    Range("e42") = h
    Range("f42") = h
    Range("g42") = h
    Range("h42") = h
    Range("i42") = h
    Range("j42") = h
    Range("k42") = h
    Range("l42") = h
    Range("m42") = h
    Range("n42") = h
    
    Range("e45") = r
    Range("f45") = r
    Range("g45") = r
    Range("h45") = r
    Range("i45") = r
    Range("j45") = r
    Range("k45") = r
    Range("l45") = r
    Range("m45") = r
    Range("n45") = r
    
    Range("e47") = C1
    Range("f47") = C1
    Range("g47") = C1
    Range("h47") = C1
    Range("i47") = C1
    Range("j47") = C1
    Range("k47") = C1
    Range("l47") = C1
    Range("m47") = C1
    Range("n47") = C1
    
    Range("e48") = C2
    Range("f48") = C2
    Range("g48") = C2
    Range("h48") = C2
    Range("i48") = C2
    Range("j48") = C2
    Range("k48") = C2
    Range("l48") = C2
    Range("m48") = C2
    Range("n48") = C2
    
    Range("e49") = thk
    Range("f49") = thk
    Range("g49") = thk
    Range("h49") = thk
    Range("i49") = thk
    Range("j49") = thk
    Range("k49") = thk
    Range("l49") = thk
    Range("m49") = thk
    Range("n49") = thk
    
    wksX2YMount.Activate
    Range("d38") = out_metal_thickness
    Range("e38") = out_metal_thickness
    Range("f38") = out_metal_thickness
    Range("g38") = out_metal_thickness
    
    Range("d39") = h
    Range("e39") = h
    Range("f39") = h
    Range("g39") = h
    
    Range("d41") = r
    Range("e41") = r
    Range("f41") = r
    Range("g41") = r
    
    Range("d49") = thk
    Range("e49") = thk
    Range("f49") = thk
    Range("g49") = thk
    
    Range("d48") = C2
    Range("e48") = C2
    Range("f48") = C2
    Range("g48") = C2
    
    Range("d47") = C1
    Range("e47") = C1
    Range("f47") = C1
    Range("g47") = C1
    
    wksStackup.Activate
    
    Application.Calculation = xlCalculationAutomatic
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("import_geometries")
End Sub

' Get the entire stackup table as a 2D Variant array
' Used in regtest
Function fill_full_stackup(ByRef full_stackup As Variant)
    Dim num_layers As Integer
    num_layers = wksStackup.Range(layer_count_loc).value
    
    Dim num_rows As Integer
    Dim num_cols As Integer
    
    num_rows = num_layers * 2 - 1
    num_cols = 6
    
    ReDim full_stackup(num_rows - 1, num_cols - 1)
    
    Dim row_num As Integer
    Dim cur_row As Integer
    For row_num = 0 To num_rows - 1
        cur_row = Output_Row_Start + row_num
        full_stackup(row_num, 0) = wksStackup.Range(Output_Layer_Num_Col & cur_row)
        full_stackup(row_num, 1) = wksStackup.Range(Output_Material_Col & cur_row)
        full_stackup(row_num, 2) = wksStackup.Range(Output_Dk_Col & cur_row)
        full_stackup(row_num, 3) = wksStackup.Range(Output_Thickness_Col & cur_row)
        full_stackup(row_num, 4) = wksStackup.Range(Output_Type_Col & cur_row)
        full_stackup(row_num, 5) = wksStackup.Range(Output_Ref_Col & cur_row)
    Next
End Function

' Set a value for the configurations
' Assumes a value configuration was passed
Sub set_stackup_configuration(ByVal configuration As String)
    wksStackup.Range(stackup_config_loc) = configuration
End Sub
Attribute VB_Name = "SystemDecap"
Option Explicit

'Rail grouping table logic:

'1. For child groups of some parent group:
    'Total current = sum of current from rails in that group
    'Total transient current = sum of transient current from rails in that group (I_max * recommended_transient_percentage)
    'Feffective = The highest Feffective of rails in that group
        'It is always the Feffective of the core power rail (VCC/VCCINT) if that power rail is included
    '%_Vripple = The lowest among rails in that group
'2. For parent groups with zero or more children:
    'Total current = Sum of total current from all rails (include all child rails powered by switcher/linear/filter) connecting to that group
        'Current draw of every switcher child group from parent rail: I_max = I_max_child * V_child_rail / %_Switcher_efficiency / V_parent_rail (i.e. the Switcher VRM Input Current field for the child group)
        'Current draw of every linear/filter child group from parent rail: I_max = I_max_child (i.e. the group's Total Current field, which *should* just be the sum of Imax for all rails in that group as the tool does not support nested children)
    'Total transient current = sum of transient current from rails directly connecting to the parent group
        'DO NOT include transient current from child groups powered by switcher/linear/filter)
        'I_tran = I_max * recommended_transient_percentage
    'Feffective = The highest Feffective of rails directly connecting to the parent group
        'It is always the Feffective of the core power rail (VCC/VCCINT) if that power rail is included
    '%_Vripple = The lowest among power rails directly connected to the parent group
' 2.5. If a rail uses 'filter' as its VRM value, its current,
'    voltage, and ripple guidelines are attributed to the parent rail.
'    It is automatically assigned to the same stackup layer as the parent
'    rail.
' 3. A rail without a parent rail is assumed to be connected to the board power supply.
' 4. Only rails with identical V values can be in one group.
' 5. When a rail is added to the group, it cannot be in any other group.
' 6. When a rail is added to the group, its 'x' cells for all other groups
'    must be grayed out.
' 7. When a rail is added to the group, 'x' cells for this group for all other
'    rails that use different voltages must be grayed out.
' 8. Voltage Ripple and Transient % should be stored in internal DB, not manually
'    entered by the user.
'9. List of rails must be auto-generated, with appropriate formatting applied to
'    all columns of all tables.
'10. When expanding and then shrinking the list of power rails (e.g. by changing from
'    larger family to smaller), the formatting must be properly preserved and extra
'    space removed.
'11. User should be able to add a new group column with a single button press.
'       - If too much work, just create 30 fixed columns.
'
'12. Pressing "Decouple All Groups" must be equivalent to calling "Decouple only this
'    group" for every group.
'13. "Decouple only this group" must do the following:
'      - verify that layer assignment was done properly (to a Power rail).
'      - select higher and lower gnd planes as "reference" planes
'      - import geometries with this setup (simulating import_geometries) call.
'      - copy capacitor values, footprints, position, and orientations to Decap_Selection
'      - copy rail setting (most conservative), A,V,V%,A%, and Feffective to Decap_Selection
'        sheet and trigger "Auto Decap" call.
'      - copy capacitor values back to System_Decap sheet.

' Decouple a single group of power rails
' Among the group,

#If VBA7 And Win64 Then
    Private Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
    Private Declare PtrSafe Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal PathName As String) As Long
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Private Declare Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
    Private Declare Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal PathName As String) As Long
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

'Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long
'Declare Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleA" (ByVal lpModuleName As String) As Long

Const PROTECTION_PASSWORD = "hsioapps"
Const NUM_DECAP_CAPS = 16
Const NUM_BULK_CAPS = 9
Const CORE_RAIL_VCC = "VCC"
Const CORE_RAIL_VCC_ONE = "VCC_ONE"
Const CONNECTED = "CONNECTED"
Const DARK_GREY = 48
Const ORANGE = 37

Sub init_system_decap()
    ' initialization function called by workbook open
    ' we will unpack everything
    ' and attempt to init from gui
    ' when porting over to a new family (or making major data changes)
    ' you should comment out the line for init gui or else excel will crash
    ' once the state of the gui is valid based on data then renable it
    
    Dim success As Boolean
   
    success = RESOURCE_MANAGER.Unpack
    
    Dim data_path As String
    
    If success Then
        data_path = RESOURCE_MANAGER.get_temp_path()
        If data_path = "" Then
            success = False
        Else
            ' this gets the dll location so we can run the dll, after running load_data_file ( a function that uses the dll)
            ' it gets loaded and we can then change the path back
            SetCurrentDirectory data_path
        End If
    End If
    
    If success Then
        success = PDN_DDB.load_data_file(data_path & "pdn_data.dat")
        success = success And PDN_VRM_MODEL_DB.load_data_file(data_path & "pdn_vrm.dat")
    End If
    
    ' since models are loaded successfuly we'll update the options for vrm
    If success Then
        init_vrm_options
    End If
    
    Dim families As Variant
    
    If success Then ' init family dropdown options
        success = PDN_DDB.get_families(families)
        If success Then
            SYSTEM_DECAP_GUI.set_family_options families
        End If
    End If

    If Not success Then
        MsgBox "There was an error initializing the PDN Tool. Please contact Altera Support"
    Else
        Dim ade As AUTO_DISABLE_EVENTS
        Set ade = New AUTO_DISABLE_EVENTS

        update_caps ' this will update the cap db singleton object (see c++)
        
        If Not init_from_gui Then ' again comment this out if you are doing major data updates
            MsgBox "Failed to initialize from gui!"
        End If
    End If

    SetCurrentDirectory ThisWorkbook.Path ' set the path back (everything is loaded etc)

    SYSTEM_DECAP_INIT = True ' this is used by the activate event
End Sub

Sub destroy_system_decap()
    RESOURCE_MANAGER.CleanUp
End Sub

Sub system_decap_read_lib_data(Optional run_update As Boolean = True)
    ' when going to other pages (like cap mount) the user may update data
    ' this will read in the data changes to the system decap page once user returns to it
    
    ' this will be called by the activate event or by device / family change events
    ' or by pcg events or by vrm (add) events

    If Not SYSTEM_DECAP_INIT Then ' this means that we don't have a valid state
        Exit Sub
    End If

    On Error GoTo ErrHandler
 
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
    
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    ' things that depend on other pages are vrm impedance
    ' via, plane, spreading and caps
    ' we reuse our event handlers for the mode since these will read in the data for us
    Dim vrm_impedance_mode As Range
    Dim via_mode As Range
    Dim plane_mode As Range
    Dim spreading_mode As Range
    
    update_caps
    
    Set vrm_impedance_mode = SYSTEM_DECAP_GUI.get_vrm_impedance_mode_range
    Set via_mode = SYSTEM_DECAP_GUI.get_via_mode_range
    Set plane_mode = SYSTEM_DECAP_GUI.get_plane_mode_range
    Set spreading_mode = SYSTEM_DECAP_GUI.get_spreading_mode_range

    Dim i As Long
    For i = 1 To UBound(vrm_ids) + 1
        Call handle_vrm_impedance_event(vrm_impedance_mode.Cells(1, i), "vrm_impedance_mode")
        Call handle_via_event(via_mode.Cells(1, i), "via_mode")
        Call handle_plane_event(plane_mode.Cells(1, i), "plane_mode")
        Call handle_spreading_event(spreading_mode.Cells(1, i), "spreading_mode")
    Next

    ' Update the decoupling cap validation rules. This is actually a horribly
    ' complicated process because Excel is incapable of assembling a validation
    ' rule from a disjoint set of ranges. As a result, we have to add a
    ' function to the LIBRARY class module that gathers and sorts the data for
    ' us, and then we have to manually add a validation rule here to each of
    ' the decoupling cap cells. C'est fun, non?
    Dim cell As Variant
    For Each cell In wksSystemDecap.Range("rngDecapDecouplingFromLibraryValues")
        cell.Validation.Delete ' remove the old rule before we add a new one
        cell.Validation.Add xlValidateList, xlValidAlertStop, xlBetween, LIBRARY.GetDecouplingCapValidationRule
    Next

    If run_update Then
        update_system "all", 1
    End If
    
    Exit Sub
    
ErrHandler:
    Call ErrorHandler("system_decap_read_lib_data")
End Sub

Sub update_system(rail_name As String, vrm_id As Integer)
    ' setting rail_name to all makes the whole connection matrix update

    ' On Error GoTo ErrHandler
    
    Dim rail_names As Variant
    Dim vrm_ids As Variant
    
    Dim decoupling_mode As String
    Dim feffective_mode As String
    Dim transient_mode As String
    Dim vripple_mode As String
    Dim via_mode As String
    Dim core_clock_frequency_mode As String
    Dim core_clock_cycles_mode As String
    
    Dim auto_decouple As Boolean
    Dim calc_feffective As Boolean
    Dim calc_vripple As Boolean
    Dim calc_trans_current As Boolean
    Dim calc_num_via_pairs As Boolean
    
    Dim connection As String
    Dim vrm_type As String
    Dim cap_name As String
    Dim vrm_parent_id As Integer
    Dim supply_voltage As Double
    Dim vrm_theta_ja As Double
    Dim vrm_efficiency As Double
    Dim vrm_r As Double
    Dim vrm_l As Double
    Dim via_r As Double
    Dim via_l As Double
    Dim num_via_pairs As Integer
    Dim spreading_r As Double
    Dim spreading_l As Double
    Dim plane_r As Double
    Dim plane_c As Double
    Dim vrm_rail_voltage As Double
    Dim total_current As Double
    Dim vrm_input_current As Double
    Dim vripple As Double
    Dim ztarget As Double
    Dim trans_current As Double
    Dim feffective As Double
    Dim quantity As Long
    Dim total_num_cap As Long
    Dim vrm_model As String
    Dim core_clock_frequency As Double
    Dim core_clock_cycles As Integer
    Dim model_status As String

    ' Retrieve and update the device's power model status
    model_status = PDN_SYSTEM.get_model_status()
    SYSTEM_DECAP_GUI.set_model_status model_status

    rail_names = PDN_SYSTEM.get_rail_names()
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    ' Update the cap quantity map in pdn_vrm
    Dim decap_num As Long
    Dim bulk_num As Long
    Dim vrm_nums As Long

    vrm_nums = UBound(vrm_ids) + 1
    decap_num = SYSTEM_DECAP_GUI.get_num_decap_caps
    bulk_num = SYSTEM_DECAP_GUI.get_num_bulk_caps
    PDN_SYSTEM.update_cap_quantity vrm_nums, decap_num, bulk_num
    
    ' Update the core clock config columns based on if this vrm is connected
    ' to the core rail
    update_core_clock_columns vrm_ids
    
    ' for each vrm run calculations
    Dim j As Long
    For j = 0 To UBound(vrm_ids)
        ' Update the number of via_pars
        via_mode = SYSTEM_DECAP_GUI.get_via_mode(Int(vrm_ids(j)))
        If via_mode = "Default" Then
            calc_num_via_pairs = True
        Else
            calc_num_via_pairs = False
        End If
        Call update_num_via_pairs(CLng(vrm_ids(j)), calc_num_via_pairs)
    
        ' Update the of Via R/L values moved from handle_via_event to here
        ' The R/L values depend on the number of via pairs, which may be updated by calculate_vrm_parameters
        Call update_via_rl(Int(vrm_ids(j)))
        
        decoupling_mode = SYSTEM_DECAP_GUI.get_decoupling_mode(Int(vrm_ids(j)))
        feffective_mode = SYSTEM_DECAP_GUI.get_feffective_mode(Int(vrm_ids(j)))
        transient_mode = SYSTEM_DECAP_GUI.get_transient_mode(Int(vrm_ids(j)))
        vripple_mode = SYSTEM_DECAP_GUI.get_vripple_mode(Int(vrm_ids(j)))
        core_clock_frequency_mode = SYSTEM_DECAP_GUI.get_core_clock_frequency_mode(Int(vrm_ids(j)))
        core_clock_cycles_mode = SYSTEM_DECAP_GUI.get_core_clock_cycles_mode(Int(vrm_ids(j)))
        
        If decoupling_mode = "Auto" Then
            auto_decouple = True
        Else
            auto_decouple = False
        End If
        
        If feffective_mode = "Calculate" Then
            calc_feffective = True
        Else
            calc_feffective = False
        End If
        
        If vripple_mode = "Calculate" Then
            calc_vripple = True
        Else
            calc_vripple = False
        End If

        ' IMPORTANT: The logic here is reversed: False/True, instead of the
        ' True/False pattern used in all of the other calc_ decisions.
        If transient_mode = "Override" Then
            calc_trans_current = False
        Else
            calc_trans_current = True
        End If

        PDN_SYSTEM.calculate_vrm_parameters CLng(vrm_ids(j)), auto_decouple, calc_feffective, calc_trans_current, calc_vripple, calc_num_via_pairs, core_clock_frequency_mode, core_clock_cycles_mode
    Next
    
    Dim current As Double
    Dim voltage As Double
    
    'for all VRM parameters
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        ' read the back end value
        PDN_SYSTEM.get_vrm_type Int(vrm_ids(i)), vrm_type
        PDN_SYSTEM.get_parent_vrm_id Int(vrm_ids(i)), vrm_parent_id
        PDN_SYSTEM.get_supply_voltage Int(vrm_ids(i)), supply_voltage
        PDN_SYSTEM.get_vrm_efficiency Int(vrm_ids(i)), vrm_efficiency
        PDN_SYSTEM.get_vrm_r Int(vrm_ids(i)), vrm_r
        PDN_SYSTEM.get_vrm_l Int(vrm_ids(i)), vrm_l
        PDN_SYSTEM.get_via_r Int(vrm_ids(i)), via_r
        PDN_SYSTEM.get_via_l Int(vrm_ids(i)), via_l
        PDN_SYSTEM.get_num_via_pairs Int(vrm_ids(i)), num_via_pairs
        PDN_SYSTEM.get_spreading_r Int(vrm_ids(i)), spreading_r
        PDN_SYSTEM.get_spreading_l Int(vrm_ids(i)), spreading_l
        PDN_SYSTEM.get_plane_r Int(vrm_ids(i)), plane_r
        PDN_SYSTEM.get_plane_c Int(vrm_ids(i)), plane_c
        PDN_SYSTEM.get_vrm_rail_voltage Int(vrm_ids(i)), vrm_rail_voltage
        PDN_SYSTEM.get_total_current Int(vrm_ids(i)), total_current
        PDN_SYSTEM.get_vrm_input_current Int(vrm_ids(i)), vrm_input_current
        PDN_SYSTEM.get_vripple Int(vrm_ids(i)), vripple
        PDN_SYSTEM.get_ztarget_flat Int(vrm_ids(i)), ztarget
        PDN_SYSTEM.get_trans_current Int(vrm_ids(i)), trans_current
        PDN_SYSTEM.get_feffective Int(vrm_ids(i)), feffective
        PDN_SYSTEM.get_vrm_model Int(vrm_ids(i)), vrm_model
        PDN_SYSTEM.get_core_clock_frequency Int(vrm_ids(i)), core_clock_frequency
        PDN_SYSTEM.get_core_clock_cycles Int(vrm_ids(i)), core_clock_cycles
        ' push to gui
        SYSTEM_DECAP_GUI.set_vrm_type Int(i + 1), vrm_type
        SYSTEM_DECAP_GUI.set_vrm_parent Int(i + 1), vrm_parent_id
        SYSTEM_DECAP_GUI.set_supply_voltage Int(i + 1), supply_voltage
        SYSTEM_DECAP_GUI.set_vrm_efficiency Int(i + 1), vrm_efficiency
        
        ' for non simple model (i.e. enpirion) don't push the numbers for
        ' simple model to gui
        If (vrm_model = "PDN_VRM_MODEL_SIMPLE") Then
            SYSTEM_DECAP_GUI.set_vrm_r Int(i + 1), vrm_r
            SYSTEM_DECAP_GUI.set_vrm_l Int(i + 1), vrm_l
        End If

        SYSTEM_DECAP_GUI.set_via_r Int(i + 1), via_r
        SYSTEM_DECAP_GUI.set_via_l Int(i + 1), via_l
        SYSTEM_DECAP_GUI.set_num_via_pairs Int(i + 1), num_via_pairs
        SYSTEM_DECAP_GUI.set_spreading_r Int(i + 1), spreading_r
        SYSTEM_DECAP_GUI.set_spreading_l Int(i + 1), spreading_l
        SYSTEM_DECAP_GUI.set_plane_r Int(i + 1), plane_r
        SYSTEM_DECAP_GUI.set_plane_c Int(i + 1), plane_c
        SYSTEM_DECAP_GUI.set_vrm_rail_voltage Int(i + 1), vrm_rail_voltage
        SYSTEM_DECAP_GUI.set_total_current Int(i + 1), total_current
        SYSTEM_DECAP_GUI.set_vrm_input_current Int(i + 1), vrm_input_current
        SYSTEM_DECAP_GUI.set_vripple Int(i + 1), vripple
        SYSTEM_DECAP_GUI.set_ztarget Int(i + 1), ztarget
        SYSTEM_DECAP_GUI.set_trans_current Int(i + 1), trans_current
        SYSTEM_DECAP_GUI.set_feffective Int(i + 1), feffective
        SYSTEM_DECAP_GUI.set_core_clock_frequency Int(i + 1), core_clock_frequency
        SYSTEM_DECAP_GUI.set_core_clock_cycles Int(i + 1), core_clock_cycles
        
        total_num_cap = 0
        
        ' sum up the caps and post the totals at the bottom
        For j = 1 To SYSTEM_DECAP_GUI.get_num_decap_caps
            cap_name = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(j), "name")
            PDN_SYSTEM.get_cap_quantity Int(vrm_ids(i)), "decap", cap_name, quantity
            SYSTEM_DECAP_GUI.set_decap_cap_quantity Int(i + 1), CInt(j), quantity
            total_num_cap = total_num_cap + quantity
        Next
        
        For j = 1 To SYSTEM_DECAP_GUI.get_num_bulk_caps
            cap_name = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(j), "name")
            PDN_SYSTEM.get_cap_quantity Int(vrm_ids(i)), "bulk", cap_name, quantity
            SYSTEM_DECAP_GUI.set_bulk_cap_quantity Int(i + 1), CInt(j), quantity
             total_num_cap = total_num_cap + quantity
        Next
        
        SYSTEM_DECAP_GUI.set_total_num_cap Int(i + 1), total_num_cap
    Next
    
    ' update the connection GUI
    For i = 0 To UBound(rail_names)
        ' update the voltage and current GUI
        If (PDN_SYSTEM.get_rail_current(CStr(rail_names(i)), current)) And (PDN_SYSTEM.get_rail_voltage(CStr(rail_names(i)), voltage)) Then
            SYSTEM_DECAP_GUI.set_current i + 1, current
            SYSTEM_DECAP_GUI.set_voltage i + 1, voltage
        End If
        
        ' update the rail connection GUI
        If Not rail_name = "" Then
            For j = 0 To UBound(vrm_ids)
                PDN_SYSTEM.get_connection CStr(rail_names(i)), Int(vrm_ids(j)), connection
                SYSTEM_DECAP_GUI.set_connection Int(i + 1), Int(j + 1), connection
            Next
        End If
    Next
    
    If Not BatchMode Then
        Call PDN_CHART.update_chart(SYSTEM_DECAP_GUI.get_view_impedance_chart())
    End If
    
    Exit Sub

ErrHandler:
    MsgBox "An error occured, please record the error code!" & vbCrLf & "Error: " & Err.Number & vbCrLf & Err.Description
    Call ErrorHandler("update_system")
End Sub

Sub update_core_clock_columns(vrm_ids As Variant)
    ' Check if the core rail VCC is connected to a VRM, if it is not, set this
    ' vrm's core clock config to N/A, lock the cell and change the color

    Dim connection_vcc As String
    Dim connection_vcc_one As String
    Dim i As Long

    For i = 0 To UBound(vrm_ids)
        PDN_SYSTEM.get_connection CORE_RAIL_VCC, Int(vrm_ids(i)), connection_vcc
        PDN_SYSTEM.get_connection CORE_RAIL_VCC_ONE, Int(vrm_ids(i)), connection_vcc_one
    
        ' If it is not connected to vcc, lock the cell, set mode to N/A and change the color to dark grey
        If Not (connection_vcc = CONNECTED Or connection_vcc_one = CONNECTED) Then
            SYSTEM_DECAP_GUI.set_core_clock_cycles_mode Int(vrm_ids(i)), "N/A"
            SYSTEM_DECAP_GUI.set_core_clock_frequency_mode Int(vrm_ids(i)), "N/A"
            
            wksSystemDecap.Range("rngCoreClockFrequencyMode").Columns(Int(vrm_ids(i))).Locked = True
            wksSystemDecap.Range("rngCoreClockCyclesMode").Columns(Int(vrm_ids(i))).Locked = True
            
            wksSystemDecap.Range("rngCoreClockFrequencyMode").Columns(Int(vrm_ids(i))).Interior.ColorIndex = DARK_GREY
            wksSystemDecap.Range("rngCoreClockCyclesMode").Columns(Int(vrm_ids(i))).Interior.ColorIndex = DARK_GREY
        ' Else unlock the cell and change the color back to orange
        Else
            If wksSystemDecap.Range("rngCoreClockFrequencyMode").Columns(Int(vrm_ids(i))).Locked Then
                ' Only set these to the (new) default of "Medium" when we first
                ' unlock them. It might seem gauche to tweak the model defaults
                ' here in the GUI layer, but since this requirement is driven
                ' by presentation (as opposed to technical basis in the model
                ' itself) it is not a big concern.
                SYSTEM_DECAP_GUI.set_core_clock_cycles_mode Int(vrm_ids(i)), "Medium"
                SYSTEM_DECAP_GUI.set_core_clock_frequency_mode Int(vrm_ids(i)), "Medium"
            End If

            wksSystemDecap.Range("rngCoreClockFrequencyMode").Columns(Int(vrm_ids(i))).Locked = False
            wksSystemDecap.Range("rngCoreClockCyclesMode").Columns(Int(vrm_ids(i))).Locked = False
            
            wksSystemDecap.Range("rngCoreClockFrequencyMode").Columns(Int(vrm_ids(i))).Interior.ColorIndex = ORANGE
            wksSystemDecap.Range("rngCoreClockCyclesMode").Columns(Int(vrm_ids(i))).Interior.ColorIndex = ORANGE
        End If
    Next
End Sub

Sub system_decap_event_handler(ByRef target As Range)
    'On Error GoTo ErrHandler
 
    Dim vrm_id As Integer
    Dim rail_name As String
    Dim target_count As Integer
    Dim target_type As String
    target_count = 0
    
    Dim update_gui As Boolean

    ' toggle updating gui
    ' it's not used now but may be useful later
    update_gui = True

    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    Dim cell As Range
    
    ' for affected cells get the type of event and handle it
    For Each cell In target.Cells
        rail_name = SYSTEM_DECAP_GUI.get_rail_name(cell)
        vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
        
        target_type = SYSTEM_DECAP_GUI.get_target_type(cell)
        
        If target_type = "view_impedance_chart" Then
            Call handle_impedance_chart_event(cell)
        ElseIf SYSTEM_DECAP_GUI.is_target_feffective_input(cell) Then
            Call handle_feffective_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_device_selector(cell) Then
            Call handle_device_selector_event(cell, target_type)
            target_count = target_count + 2 ' ensure > 1 to update entire page
        ElseIf SYSTEM_DECAP_GUI.is_target_rail_input(cell) Then
            Call handle_rail_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_vrm_input(cell) Then
            Call handle_vrm_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_vrm_impedance_input(cell) Then
            Call handle_vrm_impedance_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_via_input(cell) Then
            Call handle_via_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_plane_input(cell) Then
            Call handle_plane_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_spreading_input(cell) Then
            Call handle_spreading_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_decoupling_input(cell) Then
            Call handle_decoupling_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_transient_input(cell) Then
            Call handle_transient_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_vripple_input(cell) Then
            Call handle_vripple_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_core_clock_frequency_input(cell) Then
            Call handle_core_clock_frequency_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_core_clock_cycles_input(cell) Then
            Call handle_core_clock_cycles_event(cell, target_type)
        ElseIf SYSTEM_DECAP_GUI.is_target_pcg_input(cell) Then
            Call handle_pcg_event(cell, target_type)
            target_count = target_count + 2
        End If
        target_count = target_count + 1
    Next
    
    'optimization only update entire rail connection table if necessary
    If update_gui Then
        If target_count > 1 Then ' if more than one cell is updated we should update all vrm rails in the gui (this is due to parent child relationships that may have been created)
            update_system "all", vrm_id
        Else
            update_system rail_name, vrm_id ' generally update one rail / vrm pair in order to keep things fast
        End If
    End If
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("system_decap_event_handler")
End Sub

Sub handle_vripple_event(cell As Range, target_type As String)
    Dim vrm_id As Integer
    Dim vripple As Long
    Dim mode As String
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    
    vripple = SYSTEM_DECAP_GUI.get_vripple(vrm_id) * 100
    
    If target_type = "vripple_mode" Then
        mode = cell.value
        ' Change the colour of the cell
        SYSTEM_DECAP_GUI.set_vripple_mode vrm_id, mode
    
        If mode = "Override" Then
            If Not PDN_SYSTEM.set_vripple(vrm_id, vripple) Then
                MsgBox "Please enter a percentage between 0% and 100%!" & vbCrLf & "The number you entered is: " & vripple & "%!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_vripple_mode(vrm_id)
    End If
    
    If mode = "Override" Then
        If target_type = "vripple" Then
            If Not PDN_SYSTEM.set_vripple(vrm_id, vripple) Then
                MsgBox "Please enter a percentage between 0% and 100%!" & vbCrLf & "The number you entered is: " & vripple & "%!"
            Else
                SYSTEM_DECAP_GUI.save_custom_vripple (vrm_id)
            End If
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_vripple_event")
End Sub

Sub handle_core_clock_frequency_event(cell As Range, target_type As String)
    Dim frequency As Double
    Dim mode As String
    Dim vrm_id As Integer
    
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    frequency = SYSTEM_DECAP_GUI.get_core_clock_frequency(vrm_id)
    
    If target_type = "core_clock_frequency_mode" Then
        mode = cell.value
        ' Change the colour of the cell
        SYSTEM_DECAP_GUI.set_core_clock_frequency_mode vrm_id, mode
    
        If mode = "Custom" Then
            If Not PDN_SYSTEM.set_core_clock_frequency(vrm_id, frequency) Then
                MsgBox "Please enter a number between 0 and 1000!" & vbCrLf & "The number you entered is: " & frequency & "!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_core_clock_frequency_mode(vrm_id)
    End If
    
    If mode = "Custom" Then
        If target_type = "core_clock_frequency" Then
            If Not PDN_SYSTEM.set_core_clock_frequency(vrm_id, frequency) Then
                MsgBox "Please enter a value between 0 and 1000!" & vbCrLf & "The number you entered is: " & frequency & "!"
            End If
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_vripple_event")
End Sub

Sub handle_core_clock_cycles_event(cell As Range, target_type As String)
    Dim cycles As Integer
    Dim mode As String
    Dim vrm_id As Integer
    
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    cycles = SYSTEM_DECAP_GUI.get_core_clock_cycles()
    
    If target_type = "core_clock_cycles_mode" Then
        mode = cell.value
        ' Change the colour of the cell
        SYSTEM_DECAP_GUI.set_core_clock_cycles_mode vrm_id, mode
        
        If mode = "Custom" Then
            If Not PDN_SYSTEM.set_core_clock_cycles(vrm_id, cycles) Then
                MsgBox "Please enter a number between 0 and 100!" & vbCrLf & "The number you entered is: " & cycles & "!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_core_clock_cycles_mode(vrm_id)
    End If
    
    If mode = "Custom" Then
        If target_type = "core_clock_cycles" Then
            If Not PDN_SYSTEM.set_core_clock_cycles(vrm_id, cycles) Then
                MsgBox "Please enter a number between 0 and 100!" & vbCrLf & "The number you entered is: " & cycles & "!"
            End If
        End If
    End If
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_vripple_event")
End Sub

Sub handle_transient_event(cell As Range, target_type As String)
    Dim vrm_id As Integer
    Dim transient As Long
    Dim mode As String
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    
    transient = SYSTEM_DECAP_GUI.get_trans_current(vrm_id) * 100
    
    If target_type = "transient_mode" Then
        mode = cell.value
        ' Change the colour of the cell
        SYSTEM_DECAP_GUI.set_transient_mode vrm_id, mode
        
        If mode = "Override" Then
            
            If Not PDN_SYSTEM.set_transient(vrm_id, transient) Then
                MsgBox "Please enter a percentage between 0% and 100%!" & vbCrLf & "The number you entered is: " & transient & "%!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_transient_mode(vrm_id)
    End If
    
    If mode = "Override" Then
        If target_type = "transient_current" Then
            If Not PDN_SYSTEM.set_transient(vrm_id, transient) Then
                MsgBox "Please enter a percentage between 0% and 100%!" & vbCrLf & "The number you entered is: " & transient & "%!"
            Else
                SYSTEM_DECAP_GUI.save_custom_transient (vrm_id)
            End If
        End If
    End If
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_transient_event")
End Sub

Sub handle_feffective_event(cell As Range, target_type As String)
    Dim vrm_id As Integer
    Dim feffective As Double
    Dim mode As String
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    
    feffective = SYSTEM_DECAP_GUI.get_feffective(vrm_id)
    
    If target_type = "feffective_mode" Then
        mode = cell.value
        SYSTEM_DECAP_GUI.set_feffective_mode vrm_id, mode
        
        If mode = "Override" Then
            If Not PDN_SYSTEM.set_feffective(vrm_id, feffective) Then
                MsgBox "Please enter a number larger or equal to 0!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_feffective_mode(vrm_id)
    End If
    
    If mode = "Override" Then
        If target_type = "feffective" Then
            If Not PDN_SYSTEM.set_feffective(vrm_id, feffective) Then
                MsgBox "Please enter a number larger or equal to 0!"
            Else
                SYSTEM_DECAP_GUI.save_custom_feffective (vrm_id)
            End If
        End If
    End If
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_feffective_event")
End Sub

Sub handle_decoupling_event(cell As Range, target_type As String)
    Dim vrm_id As Integer
    Dim cap_name As String
    Dim quantity As Long
    Dim cap_type As String
    
    If target_type = "decap_cap_info" Or target_type = "bulk_cap_info" Then
        Call update_caps
    ElseIf target_type = "decoupling_mode" Then
        vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
        SYSTEM_DECAP_GUI.set_decoupling_mode vrm_id, cell.value
    ElseIf target_type = "decap_cap_quantity" Or target_type = "bulk_cap_quantity" Then
        vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
        cap_name = SYSTEM_DECAP_GUI.get_cap_name(cell)
        quantity = cell.value
        
        If target_type = "decap_cap_quantity" Then
            cap_type = "decap"
        ElseIf target_type = "bulk_cap_quantity" Then
            cap_type = "bulk"
        End If
            
        If Not PDN_SYSTEM.set_cap_quantity(vrm_id, cap_type, cap_name, quantity) Then
            MsgBox "error setting capacitance quantity!"
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_decoupling_event")
End Sub

Sub handle_device_selector_event(cell As Range, target_type As String)
    ' function that handles the family / device dropdown
    ' and available devices drop down

    Dim packages As Variant
    Dim rail_names As Variant
    Dim vrm_ids As Variant
    Dim voltages() As Variant
    Dim pcg_list As Variant

    Dim family As String
    Dim package As String
    Dim model_status As String

    ' if the family gets changed we will ask user for confirmation
    ' if we chose to proceed then we will destroy what ever is currently set up
    ' and create a blank system for a new package
    If target_type = "family" Then
        If Not BatchMode Then
            If MsgBox("Do you want to change the family? This will remove your current configuration", vbYesNo) = vbNo Then
                Application.Undo ' this reverts it back to the original value
                Exit Sub
            End If
        End If
        family = cell.value
        If PDN_DDB.get_packages(family, packages) Then ' is this family valid?
            SYSTEM_DECAP_GUI.set_package_options packages

            package = packages(0) ' first package in the list is what we will set the system to

            If PDN_SYSTEM.create_pkg(package) Then ' is this package valid?
                rail_names = PDN_SYSTEM.get_rail_names()
                vrm_ids = PDN_SYSTEM.get_vrm_ids()
                model_status = PDN_SYSTEM.get_model_status()
                
                SYSTEM_DECAP_GUI.set_package package ' set the package we're using in the gui
                
                family = SYSTEM_DECAP_GUI.get_family() ' these 4 lines set the pcg options for the device
                family = Replace(family, " ", "_")
                If Left(family, 5) = "Arria" Then
                    If Left(package, 4) = "10AT" Then
                        family = family & "_GT"
                    ElseIf Left(package, 4) = "10AS" Then
                        family = family & "_SX"
                    Else
                        family = family & "_GX"
                    End If
                End If
                
                pcg_list = PCG.get_pcg_for_device(family, rail_names)
                SYSTEM_DECAP_GUI.set_pcg_options pcg_list
                SYSTEM_DECAP_GUI.set_pcg "Custom"
                
                ReDim voltages(UBound(rail_names))  ' voltages for each rail in the left blue dropdown

                Dim i As Long
                For i = 0 To UBound(rail_names)
                    If Not (PDN_SYSTEM.get_rail_voltages(CStr(rail_names(i)), voltages(i))) Then ' an error should be issued not sure if should be user facing
                    End If
                Next
                
                SYSTEM_DECAP_GUI.build_system_gui rail_names, voltages, vrm_ids
                system_decap_read_lib_data False ' we call this event because when we add new vrms we set calculate / library values. they should be read in from the library and this is the quickest way
            End If
        End If
    ' package change is handled similar to above
    ElseIf target_type = "package" Then
        package = cell.value
        
        If Not BatchMode Then
            If MsgBox("Do you want to change the device? This will remove your current configuration", vbYesNo) = vbNo Then
                Application.Undo ' this reverts it back to the original value
                Exit Sub
            End If
        End If
        
        If PDN_SYSTEM.create_pkg(package) Then
            rail_names = PDN_SYSTEM.get_rail_names()
            vrm_ids = PDN_SYSTEM.get_vrm_ids()
            model_status = PDN_SYSTEM.get_model_status()
            
            family = SYSTEM_DECAP_GUI.get_family()      ' these 4 lines set the pcg options for the device
            family = Replace(family, " ", "_")
            If Left(family, 5) = "Arria" Then
                If Left(package, 4) = "10AT" Then
                    family = family & "_GT"
                ElseIf Left(package, 4) = "10AS" Then
                    family = family & "_SX"
                Else
                    family = family & "_GX"
                End If
            End If
                
            pcg_list = PCG.get_pcg_for_device(family, rail_names)
            SYSTEM_DECAP_GUI.set_pcg_options (pcg_list)
            SYSTEM_DECAP_GUI.set_pcg ("Custom")

            ReDim voltages(UBound(rail_names))
                
            For i = 0 To UBound(rail_names)
                If Not (PDN_SYSTEM.get_rail_voltages(CStr(rail_names(i)), voltages(i))) Then
                End If
            Next
                
            SYSTEM_DECAP_GUI.build_system_gui rail_names, voltages, vrm_ids
            Call system_decap_read_lib_data(False) ' we call this because when we add new vrms we set calculate / library values. they should be read in from the library
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_device_selector_event")
End Sub

Sub handle_rail_event(cell As Range, target_type As String)
    Dim rail_name As String
    Dim rail_voltage As Double
    Dim rail_current As Double
    
    rail_name = SYSTEM_DECAP_GUI.get_rail_name(cell)
    rail_voltage = SYSTEM_DECAP_GUI.get_rail_voltage(cell)
    rail_current = SYSTEM_DECAP_GUI.get_rail_current(cell)
    
    If target_type = "rail_voltage" Then
        If Not (PDN_SYSTEM.set_rail_voltage(rail_name, rail_voltage)) Then
            MsgBox ("Invalid Voltage! Check if " & rail_voltage & " is valid for " & rail_name & " and all other rails that are in the same regulator group!")
        End If
    ElseIf target_type = "rail_current" Then
        If Not (PDN_SYSTEM.set_rail_current(rail_name, rail_current)) Then
            MsgBox ("Error setting current!")
        End If
    End If
  
    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_rail_event")
End Sub

Sub handle_vrm_event(cell As Range, target_type As String)
    Dim vrm_id As Integer
    Dim parent_vrm_id As Integer
    Dim rail_name As String
    Dim supply_voltage As Double
    Dim vrm_efficiency As Double
    Dim vrm_theta_ja As Double
    Dim connection_type As String
    Dim vrm_type As String
    Dim old_vrm_type As String

    Dim vrm_mode_target As Range

    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)

    Select Case target_type
        Case "vrm_connection"
            ' since we are modifying connections PCG should be custom
            SYSTEM_DECAP_GUI.set_pcg "Custom"
    
            rail_name = SYSTEM_DECAP_GUI.get_rail_name(cell)
            connection_type = SYSTEM_DECAP_GUI.get_connection_type(cell)
    
            If Not PDN_SYSTEM.set_connection(rail_name, vrm_id, connection_type) Then
               MsgBox "Error setting connection!"
            End If
        Case "vrm_type"
            PDN_SYSTEM.get_vrm_type vrm_id, old_vrm_type
    
            vrm_type = SYSTEM_DECAP_GUI.get_vrm_type(vrm_id)
            If Not PDN_SYSTEM.set_vrm_type(vrm_id, vrm_type) Then
                MsgBox "Error setting VRM type!"
            Else
                ' we will change the impedance options here if we've changed the vrm type
                Call SYSTEM_DECAP_GUI.set_impedance_option_for_vrm(vrm_id, vrm_type)
                If vrm_type <> old_vrm_type Then
                    SYSTEM_DECAP_GUI.set_vrm_impedance_mode vrm_id, "Library"
                    Set vrm_mode_target = SYSTEM_DECAP_GUI.get_vrm_impedance_mode_target(vrm_id)
                    handle_vrm_impedance_event vrm_mode_target, "vrm_impedance_mode"
                End If
            End If
        Case "parent_vrm"
            parent_vrm_id = SYSTEM_DECAP_GUI.get_vrm_parent_id(vrm_id)
            If Not PDN_SYSTEM.set_parent_vrm(vrm_id, parent_vrm_id) Then
                MsgBox "Error setting parent VRM!"
            End If
        Case "supply_voltage"
            supply_voltage = cell.value
            If Not PDN_SYSTEM.set_supply_voltage(vrm_id, supply_voltage) Then
                MsgBox "Error setting supply voltage!"
            End If
        Case "vrm_efficiency"
            vrm_efficiency = cell.value
            If Not PDN_SYSTEM.set_vrm_efficiency(vrm_id, vrm_efficiency) Then
                MsgBox "Error setting VRM efficiency!"
            End If
    End Select

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_vrm_event")
End Sub

Sub handle_vrm_impedance_event(cell As Range, target_type As String)
    Dim mode As String
    Dim vrm_type As String
    Dim vrm_id As Integer

    Dim vrm_l As Double
    Dim vrm_r As Double

    Dim vrm_model As String

    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    vrm_type = LCase(SYSTEM_DECAP_GUI.get_vrm_type(vrm_id))

    If target_type = "vrm_impedance_mode" Then
        mode = cell.value

        If mode = "Ignore" Or mode = "Library" Or mode = "Custom" Then
            vrm_model = "PDN_VRM_MODEL_SIMPLE"
        Else
            vrm_model = mode
        End If

        If Not PDN_SYSTEM.set_vrm_model(vrm_id, vrm_model) Then
            Application.Undo
            MsgBox "An error occured!"
            Exit Sub
        End If

        SYSTEM_DECAP_GUI.set_vrm_impedance_mode vrm_id, mode

        If mode = "Custom" Then
            ' restore custom values
            vrm_l = SYSTEM_DECAP_GUI.restore_custom_vrm_l(vrm_id)
            vrm_r = SYSTEM_DECAP_GUI.restore_custom_vrm_r(vrm_id)
            
            If Not PDN_SYSTEM.set_vrm_r(vrm_id, vrm_r) Or Not PDN_SYSTEM.set_vrm_l(vrm_id, vrm_l) Then
                MsgBox "An error occured!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_vrm_impedance_mode(vrm_id)
    End If

    If mode = "Ignore" Or mode = "Library" Then
        If mode = "Ignore" Then
            vrm_l = LIBRARY.get_vrm_l("ignore")
            vrm_r = LIBRARY.get_vrm_r("ignore")
        Else
            vrm_l = LIBRARY.get_vrm_l(vrm_type)
            vrm_r = LIBRARY.get_vrm_r(vrm_type)
        End If
        
        If Not PDN_SYSTEM.set_vrm_r(vrm_id, vrm_r) Or Not PDN_SYSTEM.set_vrm_l(vrm_id, vrm_l) Then
            MsgBox "An error occured!"
        End If
    ElseIf mode = "Custom" Then
        If target_type = "vrm_r" Then
            vrm_r = cell.value
            If Not PDN_SYSTEM.set_vrm_r(vrm_id, vrm_r) Then
                MsgBox "Error setting vrm r!"
            Else
                ' set custom value
                SYSTEM_DECAP_GUI.save_custom_vrm_r (vrm_id)
            End If
        End If
    
        If target_type = "vrm_l" Then
            vrm_l = cell.value
            If Not PDN_SYSTEM.set_vrm_l(vrm_id, vrm_l) Then
                MsgBox "Error setting vrm l!"
            Else
                ' set custom value
                SYSTEM_DECAP_GUI.save_custom_vrm_l (vrm_id)
            End If
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_vrm_impedance_event")
End Sub

Sub handle_via_event(cell As Range, target_type As String)
    Dim mode As String
    Dim vrm_id As Integer
    Dim num_vias As Integer
    Dim via_l As Double
    Dim via_r As Double

    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)

    ' Handle change of mode
    If target_type = "via_mode" Then
        mode = cell.value
        SYSTEM_DECAP_GUI.set_via_mode vrm_id, mode

        ' Restore values
        If (mode = "Custom") Then
            ' Restore custom values
            via_l = SYSTEM_DECAP_GUI.restore_custom_via_l(vrm_id)
            via_r = SYSTEM_DECAP_GUI.restore_custom_via_r(vrm_id)
            If Not PDN_SYSTEM.set_via_r(vrm_id, via_r) Or Not PDN_SYSTEM.set_via_l(vrm_id, via_l) Then
                MsgBox "An error occured!"
            End If
        ElseIf (mode = "Calculate") Then
            ' Restore calculate values
            num_vias = SYSTEM_DECAP_GUI.restore_calculate_num_via_pairs(vrm_id)
            If Not PDN_SYSTEM.set_num_via_pairs(vrm_id, num_vias) Then
                MsgBox "An error occured!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_via_mode(vrm_id)
    End If

    ' Handle change of values that need to be saved
    If (mode = "Calculate") Then
        ' Save Number of Via Pairs
        If target_type = "num_via_pairs" Then
            num_vias = cell.value
            If Not PDN_SYSTEM.set_num_via_pairs(vrm_id, num_vias) Then
                MsgBox "Error setting num_vias!"
            Else
                SYSTEM_DECAP_GUI.save_calculate_num_via_pairs (vrm_id)
            End If
        End If
    ElseIf (mode = "Custom") Then
        'Save Via R/L
        If target_type = "via_r" Then
            via_r = cell.value
            If Not PDN_SYSTEM.set_via_r(vrm_id, via_r) Then
                MsgBox "Error setting via r!"
            Else
                SYSTEM_DECAP_GUI.save_custom_via_r (vrm_id)
            End If
        ElseIf target_type = "via_l" Then
            via_l = cell.value
            If Not PDN_SYSTEM.set_via_l(vrm_id, via_l) Then
                MsgBox "Error setting via l!"
            Else
                SYSTEM_DECAP_GUI.save_custom_via_l (vrm_id)
            End If
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_via_event")
End Sub

' Updating Via R/L can't be part of handle_via_event, as these values depend on
' num_vias, which may be updated outside of a via event (e.g. when updating connections)
Sub update_via_rl(vrm_id As Integer)
    Dim mode As String
    mode = SYSTEM_DECAP_GUI.get_via_mode(vrm_id)

    Dim num_vias As Integer
    Call PDN_SYSTEM.get_num_via_pairs(vrm_id, num_vias)

    Dim layer_number As Integer
    layer_number = SYSTEM_DECAP_GUI.get_layer_number(vrm_id)

    Dim via_l As Double
    Dim via_r As Double

    ' For all target types, update R/L
    If mode = "Ignore" Or mode = "Calculate" Or mode = "Default" Then
        
        via_l = LIBRARY.get_via_param(mode, "l", layer_number, num_vias)
        via_r = LIBRARY.get_via_param(mode, "r", layer_number, num_vias)
        
        If Not PDN_SYSTEM.set_via_r(vrm_id, via_r) Or Not PDN_SYSTEM.set_via_l(vrm_id, via_l) Then
            MsgBox "An error occured!"
        Else
            SYSTEM_DECAP_GUI.set_via_l vrm_id, via_l
            SYSTEM_DECAP_GUI.set_via_r vrm_id, via_r
        End If
    End If
End Sub

Sub update_num_via_pairs(vrm_id As Long, calc_num_via_pairs As Boolean)
    PDN_SYSTEM.calculate_vrm_parameters vrm_id, False, False, False, False, calc_num_via_pairs, "Custom", "Custom"
End Sub

Sub handle_spreading_event(cell As Range, target_type As String)
    Dim mode As String
    Dim vrm_id As Integer

    Dim spreading_l As Double
    Dim spreading_r As Double

    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)

    If target_type = "spreading_mode" Then
        mode = cell.value
        SYSTEM_DECAP_GUI.set_spreading_mode vrm_id, mode
        If mode = "Custom" Then
            ' restore custom values
            spreading_l = SYSTEM_DECAP_GUI.restore_custom_spreading_l(vrm_id)
            spreading_r = SYSTEM_DECAP_GUI.restore_custom_spreading_r(vrm_id)
        
            If Not PDN_SYSTEM.set_spreading_r(vrm_id, spreading_r) Or Not PDN_SYSTEM.set_spreading_l(vrm_id, spreading_l) Then
                MsgBox "An error occured!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_spreading_mode(vrm_id)
    End If

    If mode <> "Custom" Then
        spreading_l = LIBRARY.get_spreading_l(mode)
        spreading_r = LIBRARY.get_spreading_r(mode)
        
        If Not PDN_SYSTEM.set_spreading_r(vrm_id, spreading_r) Or Not PDN_SYSTEM.set_spreading_l(vrm_id, spreading_l) Then
            MsgBox "An error occured!"
        Else
            SYSTEM_DECAP_GUI.set_spreading_l vrm_id, spreading_l
            SYSTEM_DECAP_GUI.set_spreading_r vrm_id, spreading_r
        End If
    Else
        If target_type = "spreading_r" Then
            spreading_r = cell.value
            If Not PDN_SYSTEM.set_spreading_r(vrm_id, spreading_r) Then
                MsgBox "Error setting spreading r!"
            Else
                SYSTEM_DECAP_GUI.save_custom_spreading_r (vrm_id)
            End If
        End If

        If target_type = "spreading_l" Then
            spreading_l = cell.value
            If Not PDN_SYSTEM.set_spreading_l(vrm_id, spreading_l) Then
                MsgBox "Error setting spreading l!"
            Else
                SYSTEM_DECAP_GUI.save_custom_spreading_l (vrm_id)
            End If
        End If
    End If
    
    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_spreading_event")
End Sub

Sub handle_plane_event(cell As Range, target_type As String)
    Dim mode As String
    Dim vrm_id As Integer

    Dim plane_c As Double
    Dim plane_r As Double

    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)

    If target_type = "plane_mode" Then
        mode = cell.value
        SYSTEM_DECAP_GUI.set_plane_mode vrm_id, mode
        If mode = "Custom" Then
            ' restore custom values
            plane_c = SYSTEM_DECAP_GUI.restore_custom_plane_c(vrm_id)
            plane_r = SYSTEM_DECAP_GUI.restore_custom_plane_r(vrm_id)
        
            If Not PDN_SYSTEM.set_plane_c(vrm_id, plane_c) Or Not PDN_SYSTEM.set_plane_r(vrm_id, plane_r) Then
                MsgBox "An error occured!"
            End If
        End If
    Else
        mode = SYSTEM_DECAP_GUI.get_plane_mode(vrm_id)
    End If

    If Not mode = "Custom" Then
        plane_r = LIBRARY.get_plane_r(mode, vrm_id)
        plane_c = LIBRARY.get_plane_c(mode, vrm_id)

        If Not PDN_SYSTEM.set_plane_r(vrm_id, plane_r) Or Not PDN_SYSTEM.set_plane_c(vrm_id, plane_c) Then
            MsgBox "An error occured!"
        Else
            SYSTEM_DECAP_GUI.set_plane_c vrm_id, plane_c
            SYSTEM_DECAP_GUI.set_plane_r vrm_id, plane_r
        End If
    Else
        If target_type = "plane_r" Then
            plane_r = cell.value
            If Not PDN_SYSTEM.set_plane_r(vrm_id, plane_r) Then
                MsgBox "Error setting plane r!"
            Else
                SYSTEM_DECAP_GUI.save_custom_plane_r (vrm_id)
            End If
        End If

        If target_type = "plane_c" Then
            plane_c = cell.value
            If Not PDN_SYSTEM.set_plane_c(vrm_id, plane_c) Then
                MsgBox "Error setting plane c!"
            Else
                SYSTEM_DECAP_GUI.save_custom_plane_c (vrm_id)
            End If
        End If
    End If

    Exit Sub

ErrHandler:
    Call ErrorHandler("handle_plane_event")
End Sub

Sub clear_connections()
    Dim system_rails As Variant
    Dim vrm_ids As Variant

    system_rails = PDN_SYSTEM.get_rail_names()
    vrm_ids = PDN_SYSTEM.get_vrm_ids()

    Dim i As Long
    Dim j As Long
    For i = 0 To UBound(vrm_ids)
        ' disconnect everything
        For j = 0 To UBound(system_rails)
            PDN_SYSTEM.set_connection CStr(system_rails(j)), Int(vrm_ids(i)), "NOT_CONNECTED"
        Next
    Next
End Sub

Sub handle_pcg_event(cell As Range, target_type As String)
    Dim package As String

    package = SYSTEM_DECAP_GUI.get_package()

    Dim pcg_name As String

    ' since custom is not family specific we'll handle it first
    ' everything else downstream is for an actual PCG being set
    If Not BatchMode Then
        If cell.value = "Custom" Then
            If MsgBox("Do you want to change the PCG to custom? This will reset your connections blank configuration", vbYesNo) = vbNo Then
                Application.Undo
                Exit Sub
            End If
            Call clear_connections
            Exit Sub
        End If
    Else
        If cell.value = "Custom" Then
            Call clear_connections
            Exit Sub
        End If
    End If

    Dim family As String
    family = Replace(SYSTEM_DECAP_GUI.get_family(), " ", "_")
    If Left(family, 5) = "Arria" Then
        If Left(package, 4) = "10AT" Then
            family = family & "_GT"
        ElseIf Left(package, 4) = "10AS" Then
            family = family & "_SX"
        Else
            family = family & "_GX"
        End If
    End If
    pcg_name = family & "_" & SYSTEM_DECAP_GUI.get_pcg()

    Dim system_rails As Variant
    Dim vrm_ids As Variant

    Dim num_vrms As Integer
    Dim gui_vrms As Integer
    Dim num_system_vrms As Integer
    Dim vrm_parent As Integer

    Dim rail_voltage As Double
    Dim rail_vrm_id As Integer

    Dim vrm_type As String
    Dim vrm_mode_target As Range

    system_rails = PDN_SYSTEM.get_rail_names()

    If Not PCG.validate_pcg_by_rails(pcg_name, system_rails) Then
        MsgBox "The selected Power Rail Configuration is not valid for the current device"
        Exit Sub
    End If

    ' in the gui we have to have 4 vrms, also forced in backend
    num_vrms = PCG.get_num_pcg_vrms(pcg_name)
    If num_vrms < 4 Then
        gui_vrms = 4
    Else
        gui_vrms = num_vrms
    End If

    ' i don't know why but the set_vrm_type function causes problems
    ' for a system that already exists
    ' we call init form gui as a hack to create a new pdn system that is "clean"
    ' this seems to be stable
    init_from_gui

    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    num_system_vrms = UBound(vrm_ids) + 1

    ' set the pdn system in the backend based on the gui
    ' even though there will be more vrms than needed it's ok
    ' because they won't be used (no rails will be connected)
    Dim i As Long
    Dim j As Long

    If num_system_vrms < gui_vrms Then
        For i = 0 To gui_vrms - num_system_vrms - 1
            PDN_SYSTEM.add_vrm
        Next
    ElseIf num_system_vrms > gui_vrms Then
        For i = 0 To num_system_vrms - gui_vrms - 1
            PDN_SYSTEM.remove_last_vrm
        Next
    End If

    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    SYSTEM_DECAP_GUI.build_vrms vrm_ids

    For i = 0 To UBound(vrm_ids)
        ' disconnect everything
        For j = 0 To UBound(system_rails)
            PDN_SYSTEM.set_connection CStr(system_rails(j)), Int(vrm_ids(i)), "NOT_CONNECTED"
        Next

        vrm_type = PCG.get_vrm_type(pcg_name, Int(vrm_ids(i)))
        If vrm_type = VRM_TYPE_LINEAR Or vrm_type = VRM_TYPE_SWITCHER Or vrm_type = VRM_TYPE_FILTER Then
           ' ok so the vrm type is different than the current one
           ' we will have to make an artificial event for the vrm type change so that the list
           ' will  be updated for the models available for that type
           SYSTEM_DECAP_GUI.set_vrm_type Int(vrm_ids(i)), vrm_type
           Set vrm_mode_target = SYSTEM_DECAP_GUI.get_vrm_impedance_mode_target(Int(vrm_ids(i)))
           Call handle_vrm_event(vrm_mode_target, "vrm_type")
        End If

        vrm_parent = PCG.get_vrm_parent(pcg_name, Int(vrm_ids(i)))
        PDN_SYSTEM.set_parent_vrm Int(vrm_ids(i)), vrm_parent
    Next

    For i = 0 To UBound(system_rails)
        If (system_rails(i) = "VCCIO6A_HPS") Then
            PCG.get_rail_info pcg_name, CStr(system_rails(i)), rail_vrm_id, rail_voltage
        Else
            PCG.get_rail_info pcg_name, CStr(system_rails(i)), rail_vrm_id, rail_voltage
        End If
        If rail_vrm_id > 0 And rail_voltage > 0 Then
            If PDN_SYSTEM.set_rail_voltage(CStr(system_rails(i)), rail_voltage) Then
                PDN_SYSTEM.set_connection CStr(system_rails(i)), rail_vrm_id, "CONNECTED"
            End If
        End If
    Next

    Call system_decap_read_lib_data(False) ' we call this because when we add new vrms we set calculate / library values. they should be read in from the library
End Sub

Sub handle_impedance_chart_event(cell As Range)
    Dim vrm_id As Integer
    vrm_id = SYSTEM_DECAP_GUI.get_vrm_id(cell)
    
    SYSTEM_DECAP_GUI.set_view_impedance_chart (vrm_id)
End Sub

Sub update_caps()
    Dim name As String
    Dim source As String
    Dim value As String
    Dim footprint As String
    Dim layer As String
    Dim orientation As String

    Dim cap As Variant
    Dim esr As Variant
    Dim esl As Variant
    Dim l_mnt As Variant

    Dim i As Long
    For i = 1 To SYSTEM_DECAP_GUI.get_num_decap_caps
        name = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "name")
        source = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "source")
        value = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "value")
        footprint = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "footprint")
        layer = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "layer")
        orientation = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "orientation")

        ' The LIBRARY module returns the actual strings to show in the GUI :-/
        cap = LIBRARY.EquivCap(DECOUPLING_CAP, source, value, footprint)
        esr = LIBRARY.EquivCapESR(DECOUPLING_CAP, source, value, footprint)
        esl = LIBRARY.EquivCapESL(DECOUPLING_CAP, source, value, footprint)
        l_mnt = LIBRARY.EquivCapLmnt(DECOUPLING_CAP, source, value, footprint, orientation, layer)

        SYSTEM_DECAP_GUI.set_decap_cap_param CInt(i), "Cap", cap
        SYSTEM_DECAP_GUI.set_decap_cap_param CInt(i), "ESR", esr
        SYSTEM_DECAP_GUI.set_decap_cap_param CInt(i), "ESL", esl
        SYSTEM_DECAP_GUI.set_decap_cap_param CInt(i), "Lmnt", l_mnt

        ' Only push numeric values to the backend.
        If Not IsNumeric(cap) Then
            cap = 0
        End If

        If Not IsNumeric(esr) Then
            esr = 0
        End If

        If Not IsNumeric(esl) Then
            esl = 0
        End If

        If Not IsNumeric(l_mnt) Then
            l_mnt = 0
        End If

        If Not PDN_CAP_DB.set_decap_cap(name, CDbl(cap), CDbl(esr), CDbl(esl), CDbl(l_mnt)) Then
            MsgBox "Error setting cap value for decap " & name
        End If
    Next

    For i = 1 To SYSTEM_DECAP_GUI.get_num_bulk_caps
        name = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "name")
        source = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "source")
        value = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "value")
        footprint = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "footprint")
        layer = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "layer")
        orientation = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "orientation")

        ' The LIBRARY module returns the actual strings to show in the GUI :-/
        cap = LIBRARY.EquivCap(BULK_CAP, source, value, footprint)
        esr = LIBRARY.EquivCapESR(BULK_CAP, source, value, footprint)
        esl = LIBRARY.EquivCapESL(BULK_CAP, source, value, footprint)
        l_mnt = LIBRARY.EquivCapLmnt(BULK_CAP, source, value, footprint, orientation, layer)

        SYSTEM_DECAP_GUI.set_bulk_cap_param CInt(i), "Cap", cap
        SYSTEM_DECAP_GUI.set_bulk_cap_param CInt(i), "ESR", esr
        SYSTEM_DECAP_GUI.set_bulk_cap_param CInt(i), "ESL", esl
        SYSTEM_DECAP_GUI.set_bulk_cap_param CInt(i), "Lmnt", l_mnt

        ' Only push numeric values to the backend.
        If Not IsNumeric(cap) Then
            cap = 0
        End If

        If Not IsNumeric(esr) Then
            esr = 0
        End If

        If Not IsNumeric(esl) Then
            esl = 0
        End If

        If Not IsNumeric(l_mnt) Then
            l_mnt = 0
        End If

        If Not PDN_CAP_DB.set_bulk_cap(name, CDbl(cap), CDbl(esr), CDbl(esl), CDbl(l_mnt)) Then
            MsgBox "Error setting cap value for bulk cap " & name
        End If
    Next

    Exit Sub

ErrHandler:
    Call ErrorHandler("update_caps")
End Sub

Sub system_decap_remove_cap_row()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    unprotect_worksheet wksSystemDecap
    unprotect_worksheet wksEnlargedGraph

    SYSTEM_DECAP_GUI.remove_decoupling_cap_row
    update_caps
    update_system "all", 0

    protect_worksheet wksSystemDecap
    protect_worksheet wksEnlargedGraph

    Exit Sub

ErrHandler:
    Call ErrorHandler("add_regulator")
End Sub

Sub system_decap_add_decoupling_cap_row()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    unprotect_worksheet wksSystemDecap
    unprotect_worksheet wksEnlargedGraph

    SYSTEM_DECAP_GUI.add_decoupling_cap_row
    update_caps
    update_system "all", 0

    protect_worksheet wksSystemDecap
    protect_worksheet wksEnlargedGraph

    Exit Sub

ErrHandler:
    Call ErrorHandler("add_regulator")
End Sub

Sub system_decap_add_bulk_cap_row()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    unprotect_worksheet wksSystemDecap
    unprotect_worksheet wksEnlargedGraph

    SYSTEM_DECAP_GUI.add_bulk_cap_row
    update_caps
    update_system "all", 0

    protect_worksheet wksSystemDecap
    protect_worksheet wksEnlargedGraph

    Exit Sub

ErrHandler:
    Call ErrorHandler("add_regulator")
End Sub

Sub system_decap_add_regulator()
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    Dim vrm_mode_target As Range
    Dim vrm_ids As Variant

    ' since we are modifying vrms PCG should be custom
    SYSTEM_DECAP_GUI.set_pcg "Custom"

    PDN_SYSTEM.add_vrm
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    SYSTEM_DECAP_GUI.build_vrms vrm_ids

    Set vrm_mode_target = SYSTEM_DECAP_GUI.get_vrm_impedance_mode_target(CInt(UBound(vrm_ids) + 1))

    handle_vrm_event vrm_mode_target, "vrm_type"

    ' We call this event because, when we add new VRMs, we set calculate/library values.
    ' They should be read in from the library and this is the quickest way.
    system_decap_read_lib_data False
    update_system "all", 0

    Exit Sub

ErrHandler:
    Call ErrorHandler("add_regulator")
End Sub

Sub system_decap_remove_last_regulator()
    If MsgBox("Remove last rail group?", vbYesNo) = vbNo Then
        Exit Sub
    End If

    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS
    
    ' since we are modifying number of vrms PCG should be custom
    SYSTEM_DECAP_GUI.set_pcg "Custom"

    PDN_SYSTEM.remove_last_vrm
    SYSTEM_DECAP_GUI.build_vrms PDN_SYSTEM.get_vrm_ids

    update_system "all", 0

    Exit Sub

ErrHandler:
    Call ErrorHandler("remove_regulator_last")
End Sub

Function init_from_gui() As Boolean
    ' initializes the backend model from the GUI
    Dim success As Boolean
    Dim package As String

    Dim rail_names As Variant
    Dim vrm_ids As Variant

    Dim vrm_to_add As Long
    Dim num_vrms As Long
    Dim vrm_id As Integer

    Dim gui_rail As Range
    Dim rail_name As String
    Dim gui_rail_name As String

    Dim rail_current As Double
    Dim rail_voltage As Double

    Dim vrm_type As String
    Dim vrm_parent As Integer

    Dim vrm_supply_voltage As Double
    Dim vrm_eff As Double
    Dim vrm_r As Double
    Dim vrm_l As Double
    Dim via_r As Double
    Dim via_l As Double
    Dim plane_r As Double
    Dim plane_c As Double
    Dim spreading_r As Double
    Dim spreading_l As Double
    Dim feffective As Double

    Dim connection As String
    Dim current_connection As String
    Dim cap_name As String
    Dim cap_quantity As Long
    Dim vrm_model As String

    package = SYSTEM_DECAP_GUI.get_package()
    success = PDN_SYSTEM.create_pkg(package, True)

    If success Then
        rail_names = PDN_SYSTEM.get_rail_names()
        vrm_ids = PDN_SYSTEM.get_vrm_ids()
        vrm_to_add = SYSTEM_DECAP_GUI.get_num_vrms() - UBound(vrm_ids) - 1

        While vrm_to_add > 0
            PDN_SYSTEM.add_vrm
            vrm_to_add = vrm_to_add - 1
        Wend

        vrm_ids = PDN_SYSTEM.get_vrm_ids()

        Dim i As Long
        For i = 0 To UBound(rail_names)
            Set gui_rail = SYSTEM_DECAP_GUI.get_rail(Int(i) + 1)
            rail_name = CStr(rail_names(i))
            gui_rail_name = SYSTEM_DECAP_GUI.get_rail_name(gui_rail)

            If gui_rail_name <> rail_name Then
                success = False
                Exit For
            End If

            rail_voltage = SYSTEM_DECAP_GUI.get_rail_voltage(gui_rail)
            rail_current = SYSTEM_DECAP_GUI.get_rail_current(gui_rail)
            success = success And PDN_SYSTEM.set_rail_voltage(rail_name, rail_voltage)
            success = success And PDN_SYSTEM.set_rail_current(rail_name, rail_current)
        Next

        For i = 0 To UBound(vrm_ids)
            vrm_id = Int(vrm_ids(i))
            
            vrm_type = SYSTEM_DECAP_GUI.get_vrm_type(vrm_id)
            vrm_parent = SYSTEM_DECAP_GUI.get_vrm_parent_id(vrm_id)
            vrm_supply_voltage = SYSTEM_DECAP_GUI.get_supply_voltage(vrm_id)
            vrm_eff = SYSTEM_DECAP_GUI.get_vrm_efficiency(vrm_id)
            vrm_r = SYSTEM_DECAP_GUI.get_vrm_r(vrm_id)
            vrm_l = SYSTEM_DECAP_GUI.get_vrm_l(vrm_id)
            via_r = SYSTEM_DECAP_GUI.get_via_r(vrm_id)
            via_l = SYSTEM_DECAP_GUI.get_via_l(vrm_id)
            plane_r = SYSTEM_DECAP_GUI.get_plane_r(vrm_id)
            plane_c = SYSTEM_DECAP_GUI.get_plane_c(vrm_id)
            spreading_r = SYSTEM_DECAP_GUI.get_spreading_r(vrm_id)
            spreading_l = SYSTEM_DECAP_GUI.get_spreading_l(vrm_id)
            feffective = SYSTEM_DECAP_GUI.get_feffective(vrm_id)
            vrm_model = SYSTEM_DECAP_GUI.get_vrm_model(vrm_id)

            success = PDN_SYSTEM.set_vrm_type(vrm_id, vrm_type) And success
            success = PDN_SYSTEM.set_parent_vrm(vrm_id, vrm_parent) And success
            success = PDN_SYSTEM.set_supply_voltage(vrm_id, vrm_supply_voltage) And success
            success = PDN_SYSTEM.set_vrm_efficiency(vrm_id, vrm_eff) And success
            success = PDN_SYSTEM.set_via_r(vrm_id, via_r) And success
            success = PDN_SYSTEM.set_via_l(vrm_id, via_l) And success
            success = PDN_SYSTEM.set_plane_r(vrm_id, plane_r) And success
            success = PDN_SYSTEM.set_plane_c(vrm_id, plane_c) And success
            success = PDN_SYSTEM.set_spreading_r(vrm_id, spreading_r) And success
            success = PDN_SYSTEM.set_spreading_l(vrm_id, spreading_l) And success
            success = PDN_SYSTEM.set_feffective(vrm_id, feffective) And success
            success = PDN_SYSTEM.set_vrm_model(vrm_id, vrm_model) And success

            ' don't set the vrm r and l if it's not simple , they're not valid
            If vrm_model = "PDN_VRM_MODEL_SIMPLE" Then
                success = PDN_SYSTEM.set_vrm_r(vrm_id, vrm_r) And success
                success = PDN_SYSTEM.set_vrm_l(vrm_id, vrm_l) And success
            End If

            Dim j As Long

            For j = 1 To SYSTEM_DECAP_GUI.get_num_decap_caps
                cap_name = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(j), "name")
                cap_quantity = SYSTEM_DECAP_GUI.get_decap_cap_quantity(vrm_id, CInt(j))
                success = PDN_SYSTEM.set_cap_quantity(vrm_id, "decap", cap_name, cap_quantity) And success
            Next

            For j = 1 To SYSTEM_DECAP_GUI.get_num_bulk_caps
                cap_name = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(j), "name")
                cap_quantity = SYSTEM_DECAP_GUI.get_bulk_cap_quantity(vrm_id, CInt(j))
                success = PDN_SYSTEM.set_cap_quantity(vrm_id, "bulk", cap_name, cap_quantity) And success
            Next

            For j = 0 To UBound(rail_names)
                connection = SYSTEM_DECAP_GUI.get_connection_type_by_index(Int(j + 1), vrm_id)
                
                If connection <> "NOT_CONNECTED" Then
                    success = PDN_SYSTEM.set_connection(CStr(rail_names(j)), vrm_id, connection) And success
                End If

            Next
        Next
    Else
        success = False
    End If

    init_from_gui = success
End Function

Sub init_vrm_options()
    ' this function is for setting data to be displayed in the vrm impedance options
    ' the validation range selected for vrm impedance options will change with the type
    ' of vrm selected

    Dim vrm_types(2) As String
    vrm_types(0) = VRM_TYPE_FILTER
    vrm_types(1) = VRM_TYPE_LINEAR
    vrm_types(2) = VRM_TYPE_SWITCHER

    Dim vrm_type As String

    Dim i As Long
    For i = 0 To UBound(vrm_types)
        vrm_type = vrm_types(i)
        Dim vrm_model_names As Variant
        PDN_VRM_MODEL_DB.get_vrm_model_names_by_type vrm_type, vrm_model_names
        SYSTEM_DECAP_GUI.set_vrm_impedance_options vrm_type, vrm_model_names
    Next
End Sub

Public Function DecouplingCapValidationRule() As String
    LIBRARY.MaybeUpdateDecouplingCapValidationRules
    DecouplingCapValidationRule = LIBRARY.GetDecouplingCapValidationRule
End Function
Attribute VB_Name = "TestingUtils"
Option Explicit

'This function runs a script of actions to test the PDN Tool. The script is a comma-seperated text file,
'and the format of allowable actions is described below.
'   Parameters: FileName - Full path to script file
'   Returns: None
Public Sub RunScript(file As String)
    Dim FileName As String
    Dim fso As New FileSystemObject
    Dim ts As TextStream
    Dim ts2 As TextStream
    Dim familyRange() As Variant
    Dim configRange As Variant
    Dim currentRange() As Variant
    Dim tempArray() As Variant
    Dim fIndex As Integer
    Dim sIndex As Integer
    Dim family As String
    Dim firstFamily As String
    Dim firstDevice As String
    Dim hasConfig As Boolean
    Dim foundDevice As Boolean
    
    Dim current_vrm_model As String
    
    Dim packages As Variant
    Dim package As String
                        
    Dim rails As Variant

    ' One of the most gloriously ridiculous aspects of VBA in Excel is, when
    ' you open a file using OLE (e.g. from Perl's Win32::OLE module), that the
    ' Workbook_Open() event handler doesn't fire. This is problematic if you
    ' need it to, because that's where the rest of your code is initialized.
    ' I have been unable to find a authoritative answer for why this is or if
    ' it can be changed -- which seems to be par for the course when it comes
    ' to VBA -- so we need to call the event handler here.
    WorkBookOpenHandler

    FileName = file
    Debug.Print "RunScript : " & FileName

    BatchMode = True
    On Error GoTo ErrHandler

    If fso.FileExists(FileName) Then
        Set ts = fso.OpenTextFile(FileName, ForReading)
        Do While Not ts.AtEndOfStream
            Dim line As String
            Dim Action As Variant

            line = ts.ReadLine
            Debug.Print " * " & line
            Action = Split(line, " ")
            
            If IsArray(Action) And UBound(Action) >= 0 Then
                'If the action is family then it should select the family in the System_decap sheet
                If Action(0) = "family" Then
                    family = Action(1)
                    SYSTEM_DECAP_GUI.set_family family
                End If
                
                'get the devices for current family
                If Action(0) = "export_device_list" Then
                    If UBound(Action) >= 1 Then
                        ExportAllDevices Action(1)
                    Else
                        ExportAllDevices "device_list.log"
                    End If
                End If
                
                ' Pin connection guideline test
                If Action(0) = "power_rail_configuration_test" Then
                    power_rail_configuration_test
                End If
                
                ' Cap LR values test
                If Action(0) = "cap_lr_value_test" Then
                    cap_lr_value_test
                End If
                
                ' BGA Via sheet test
                If Action(0) = "bga_via_sheet_test" Then
                    bga_via_sheet_test
                End If
                
                ' Construct Stackup test
                If Action(0) = "construct_stackup_test" Then
                    construct_stackup_test
                End If
                
                ' Design Comparison Test
                If Action(0) = "design_comparison" Then
                    GET_VALUES_CONFIG = "get_values.config"
                    SET_VALUES_CONFIG = "set_values.config"
                    Call RunDesignComparisonTest
                End If
                
                ' Decouple test
                If Action(0) = "decouple" Then
                    decouple_test CStr(Action(1))
                End If
                
                ' New Device Check
                If Action(0) = "new_device_test" Then
                    new_device_test CStr(Action(1)), CStr(Action(2))
                End If
                
                If Action(0) = "sweep_vcc" Then
                    family = SYSTEM_DECAP_GUI.get_family()
                    package = CStr(Action(1))
                    If PDN_DDB.get_packages(family, packages) Then
                        Dim i As Long

                        For i = 0 To UBound(packages)
                            If CStr(packages(i)) = package Then
                                foundDevice = True
                            End If
                        Next
                    End If
                    
                    'Loop through all devices of the family
                    If foundDevice Then
                        SYSTEM_DECAP_GUI.set_package package
                        PDN_SYSTEM.set_connection "VCC", 1, "CONNECTED"
                        Call set_auto_decouple("Auto")
                        
                        Call set_default_via_params
                        Call set_default_plane_params
                        Call set_default_vrm_params
                        Call set_default_spreading_params
                        Call set_default_vrm_efficiency
                        Call set_calc_feffective
                                 
                        ' sweep current values
                        SYSTEM_DECAP_GUI.set_current 1, 0.1
                        Call write_vcc_cap_to_file(0.1)
                        SYSTEM_DECAP_GUI.set_current 1, 0.5
                        Call write_vcc_cap_to_file(0.5)
                        SYSTEM_DECAP_GUI.set_current 1, 1
                        Call write_vcc_cap_to_file(1)
                        SYSTEM_DECAP_GUI.set_current 1, 2
                        Call write_vcc_cap_to_file(2)
                        SYSTEM_DECAP_GUI.set_current 1, 5
                        Call write_vcc_cap_to_file(5)
                        SYSTEM_DECAP_GUI.set_current 1, 10
                        Call write_vcc_cap_to_file(10)
                        SYSTEM_DECAP_GUI.set_current 1, 15
                        Call write_vcc_cap_to_file(15)
                        SYSTEM_DECAP_GUI.set_current 1, 20
                        Call write_vcc_cap_to_file(20)
                        SYSTEM_DECAP_GUI.set_current 1, 25
                        Call write_vcc_cap_to_file(25)
                        SYSTEM_DECAP_GUI.set_current 1, 30
                        Call write_vcc_cap_to_file(30)
                    End If
                End If

                If Action(0) = "sweep_vcc_and_vrm_model" Then
                    family = SYSTEM_DECAP_GUI.get_family()
                    package = CStr(Action(1))
                    If PDN_DDB.get_packages(family, packages) Then
                        For i = 0 To UBound(packages)
                            If CStr(packages(i)) = package Then
                                foundDevice = True
                            End If
                        Next
                    End If
                    
                    'Loop through all devices of the family
                    If foundDevice Then
                        SYSTEM_DECAP_GUI.set_package package
                        PDN_SYSTEM.set_connection "VCC", 1, "CONNECTED"
                        Call set_auto_decouple("Auto")
                        
                        Call set_default_via_params
                        Call set_default_plane_params
                        Call set_default_vrm_params
                        Call set_default_spreading_params
                        Call set_default_vrm_efficiency
                        Call set_calc_feffective
                        
                        ' at the time of writing this only switcher vrms have models
                        SYSTEM_DECAP_GUI.set_vrm_type 1, "switcher"

                        Dim vrm_models As Variant
                        Call PDN_VRM_MODEL_DB.get_vrm_model_names_by_type("switcher", vrm_models)
                        
                        ' sweep through vrm models
                        For i = 0 To UBound(vrm_models) + 1
                            If i <> 0 Then
                                current_vrm_model = CStr(vrm_models(i - 1))
                                SYSTEM_DECAP_GUI.set_vrm_impedance_mode 1, current_vrm_model
                            Else
                                current_vrm_model = "Library"
                            End If

                            ' sweep current values
                            SYSTEM_DECAP_GUI.set_current 1, 0.1
                            Call write_vcc_cap_to_file(0.1, CStr(current_vrm_model))
                            SYSTEM_DECAP_GUI.set_current 1, 0.5
                            Call write_vcc_cap_to_file(0.5, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 1
                            Call write_vcc_cap_to_file(1, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 2
                            Call write_vcc_cap_to_file(2, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 5
                            Call write_vcc_cap_to_file(5, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 10
                            Call write_vcc_cap_to_file(10, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 15
                            Call write_vcc_cap_to_file(15, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 20
                            Call write_vcc_cap_to_file(20, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 25
                            Call write_vcc_cap_to_file(25, current_vrm_model)
                            SYSTEM_DECAP_GUI.set_current 1, 30
                            Call write_vcc_cap_to_file(30, current_vrm_model)
                        Next
                    End If
                End If

                'Reset the PDN Tool System Decap Sheet by setting data to first device of first family.
                'Otherwise discrepancies occur between number of voltages and rails.
                If Action(0) = "reset" Then
                   ' tempArray = Range("Family_List").value
                    'firstFamily = tempArray(1, 1)
                   ' tempArray = Application.WorksheetFunction.Transpose(Range(get_family_range_name(firstFamily)).value)
                  '  firstDevice = tempArray(1, 1)
                   ' wksSystemDecap.Range("rngFamilyName").value = firstFamily
                    'wksSystemDecap.Range("Available_devices").value = firstDevice
                    'If firstFamily = "Cyclone_IV_E" Then
                    '    wksSystemDecap.Range("rngPowerRailConfig").value = firstFamily
                    'End If
                End If

                'Calls the import sub
                If Action(0) = "import" Then
                    Dim ImportFileName As String
                    ImportFileName = Action(1)
                    Import ImportFileName
                End If
                
                'Calls the export sub
                If Action(0) = "export" Then
                    Call Export
                End If
            End If
        Loop
        ts.Close
    End If
    Application.DisplayAlerts = False
    'Application.Quit
    Exit Sub

ErrHandler:
    Call BatchErrHandler("RunScript")
    Application.DisplayAlerts = False
    Application.Quit
End Sub

Public Function set_default_via_params()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()

    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_via_mode Int(vrm_ids(i)), "Calculate"
        SYSTEM_DECAP_GUI.set_num_via_pairs Int(vrm_ids(i)), 20
        SYSTEM_DECAP_GUI.set_layer_number Int(vrm_ids(i)), 5
    Next
End Function

Public Function set_default_plane_params()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_plane_mode Int(vrm_ids(i)), "Calculate"
    Next
End Function

Public Function set_default_vrm_params()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_vrm_type Int(vrm_ids(i)), "switcher"
        SYSTEM_DECAP_GUI.set_vrm_impedance_mode Int(vrm_ids(i)), "Library"
    Next
End Function

Public Function set_default_spreading_params()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_spreading_mode Int(vrm_ids(i)), "Low"
    Next
End Function

Public Function set_default_vrm_efficiency()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_vrm_efficiency Int(vrm_ids(i)), 0.9
    Next
End Function

Public Function set_calc_feffective()
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids()
    
    Dim i As Long
    For i = 0 To UBound(vrm_ids)
        SYSTEM_DECAP_GUI.set_feffective_mode Int(vrm_ids(i)), "Calculate"
    Next
End Function

Public Function set_default_current(current_factor As Integer)
    Dim rails As Variant
    rails = PDN_SYSTEM.get_rail_names()
    
    Dim current As Double
    
    Dim family As String
    family = SYSTEM_DECAP_GUI.get_family
    
    If family = "Cyclone_IV_GX" Then
        current = 0.1
    ElseIf family = "Arria_II_GZ" Then
        current = 0.1
    Else
        current = 0.2
    End If
    
    Dim i As Long
    For i = 0 To UBound(rails)
        SYSTEM_DECAP_GUI.set_current Int(i + 1), current * 5 ^ current_factor
    Next
End Function

Public Function set_auto_decouple(mode As String)
    wksSystemDecap.Range("rngDecouplingMode").value = mode
End Function

Public Sub Import(FileName As String)
    'This sub takes an exported plaintext created from the export sub and uses it to fill in
    'PDN Tool settings and values
    Dim fso As New FileSystemObject, ts As TextStream

    If Not fso.FileExists(FileName) Then
        Exit Sub
    End If
    
    Set ts = fso.OpenTextFile(FileName, ForReading)
    Do While Not ts.AtEndOfStream
        Dim line As String
        Dim Action2 As Variant
        Dim item As Variant

        line = ts.ReadLine
        item = Split(line, ":")

        If IsArray(item) And UBound(item) >= 0 Then
            Dim settings As Variant

            Select Case item(0)
                Case "family"
                    wksSystemDecap.Range("rngFamilyName").value = item(1)
                Case "device"
                    wksSystemDecap.Range("Available_devices").value = item(1)
                Case "rail_config"
                    wksSystemDecap.Range("rngPowerRailConfig").value = item(1)
                Case "vrm"
                    settings = Split(item(1), ",")
                    wksSystemDecap.Range("rngRegSep").value = Application.WorksheetFunction.Transpose(settings)
                Case "parent_group"
                    settings = Split(item(1), ",")
                    wksSystemDecap.Range("rngParentGroupNum").value = Application.WorksheetFunction.Transpose(settings)
                Case "imax"
                    settings = Split(item(1), ",")
                    wksSystemDecap.Range("rngCurrentList").value = Application.WorksheetFunction.Transpose(settings)
            End Select
        End If
    Loop

    ts.Close
End Sub

Public Sub Export()
    'This sub creates a file to be imported containing the current settings and values of the PDN Tool
    Dim fso As New FileSystemObject
    Dim ts As TextStream
    Dim data As String
     
    Set ts = fso.CreateTextFile(ActiveWorkbook.Path & "\settings", True)

    If fso.FileExists(ActiveWorkbook.Path & "\settings") Then
        ts.WriteLine ("family:" & wksSystemDecap.Range("rngFamilyName").value)
        ts.WriteLine ("device:" & wksSystemDecap.Range("Available_devices").value)
        ts.WriteLine ("rail_config:" & wksSystemDecap.Range("rngPowerRailConfig").value)
        data = ArrayToDelimitedString(Application.WorksheetFunction.Transpose(wksSystemDecap.Range("rngRegSep").value))
        ts.WriteLine ("vrm:" & ArrayToDelimitedString(Application.WorksheetFunction.Transpose(wksSystemDecap.Range("rngRegSep").value)))
        ts.WriteLine ("parent_group:" & ArrayToDelimitedString(Application.WorksheetFunction.Transpose(wksSystemDecap.Range("rngParentGroupNum").value)))
        ts.WriteLine ("imax:" & ArrayToDelimitedString(wksSystemDecap.Range("rngCurrentList").value))
    End If

    ts.Close
End Sub

Public Sub ExportAllDevices(ByVal FileName As String)
    'This sub writes out the device list for the current family
    Dim packages As Variant
    
    If PDN_DDB.get_packages(SYSTEM_DECAP_GUI.get_family(), packages) Then
        Dim fso As New FileSystemObject
        Dim ts As TextStream
        Dim i As Long

        Set ts = fso.CreateTextFile(FileName, True)

        For i = 0 To UBound(packages)
            ts.WriteLine (packages(i))
        Next
        
        ts.Close
    End If
End Sub

Public Sub write_cap_to_file(current_factor As Integer)
    'This sub writes out just the capacitors of the System_decap sheet for testing
    
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids
    
    
    Dim fso As New FileSystemObject, ts As TextStream
    
    Dim OutFile As String
    
    OutFile = ActiveWorkbook.Path & "\system_decap_caps"
    
    If Not fso.FileExists(OutFile) Then
        Set ts = fso.CreateTextFile(OutFile, True)
    Else
        Set ts = fso.OpenTextFile(OutFile, ForAppending)
    End If
    
    Dim data As String
    Dim i As Long

    data = ""
    For i = 0 To UBound(vrm_ids)
        data = data & SYSTEM_DECAP_GUI.get_total_num_cap(Int(vrm_ids(i))) & ","
    Next

    ts.Write SYSTEM_DECAP_GUI.get_package() & " " & SYSTEM_DECAP_GUI.get_pcg() & " z" & current_factor & ":"
    ts.WriteLine "{" & data & "}"
    ts.Close
End Sub


Public Sub write_vcc_cap_to_file(ByVal current As Double, Optional ByVal extra_info As String = "")
    'This sub writes out just the capacitors of the System_decap sheet for testing
    
    Dim vrm_ids As Variant
    vrm_ids = PDN_SYSTEM.get_vrm_ids
    
    
    Dim fso As New FileSystemObject, ts As TextStream
    
    Dim OutFile As String
    
    OutFile = ActiveWorkbook.Path & "\system_decap_caps"
    
    If Not fso.FileExists(OutFile) Then
        Set ts = fso.CreateTextFile(OutFile, True)
    Else
        Set ts = fso.OpenTextFile(OutFile, ForAppending)
    End If
    
    Dim data As String
    Dim name As String
    Dim cap_qty As Long
    Dim i As Long
    
    For i = 1 To SYSTEM_DECAP_GUI.get_num_decap_caps
        name = SYSTEM_DECAP_GUI.get_decap_cap_param(CInt(i), "name")
        cap_qty = SYSTEM_DECAP_GUI.get_decap_cap_quantity(1, CInt(i))
        data = data & name & ":" & CStr(cap_qty) & ","
    Next
    
    For i = 1 To SYSTEM_DECAP_GUI.get_num_bulk_caps
        name = SYSTEM_DECAP_GUI.get_bulk_cap_param(CInt(i), "name")
        cap_qty = SYSTEM_DECAP_GUI.get_bulk_cap_quantity(1, CInt(i))
        data = data & name & ":" & CStr(cap_qty) & ","
    Next
        
    data = data & ":=" & SYSTEM_DECAP_GUI.get_total_num_cap(1)

    ts.Write (SYSTEM_DECAP_GUI.get_package() & " " & current & " " & extra_info & ":")
    ts.WriteLine (data)
    ts.Close
End Sub

Public Sub decouple_test(input_family As String)
    Dim foundDevice As Boolean, success As Boolean
    Dim family As String, package As String
    Dim families As Variant, packages As Variant, rails As Variant, configs As Variant
    Dim i As Integer, j As Integer, k As Integer

    ' Disable the pop up message
    BatchMode = True
    foundDevice = False
    
    ' Get a list of all families
    success = PDN_DDB.get_families(families)
    If Not success Then
        MsgBox ("Failed to get family list from PDN_DDB!")
        Exit Sub
    End If
    
    ' Loop through families, set family to SYSTEM_DECAP_GUI
    For i = LBound(families) To UBound(families)
        family = families(i)

        If input_family = "all" Or family = input_family Then
            SYSTEM_DECAP_GUI.set_family (family)
        
            ' Get a list of all devices for this family
            success = PDN_DDB.get_packages(family, packages)
            If Not success Then
                MsgBox ("Failed to get devices from PDN_DDB!")
                Exit Sub
            End If
        
            ' Loop through devices, set device to SYSTEM_DECAP_GUI
            For j = LBound(packages) To UBound(packages)
                package = packages(j)
                SYSTEM_DECAP_GUI.set_package (package)
            
                rails = PDN_SYSTEM.get_rail_names()
                configs = PCG.get_pcg_for_device(family, rails)
                            
                Call set_auto_decouple("Manual")

                Dim current_factor As Long
                For current_factor = 0 To 0 ' O_o
                    Dim num_vrms As Long

                    Call set_default_current(CInt(current_factor))
                                
                    For k = 0 To UBound(configs)
                        Dim config_name As String
                        config_name = family & "_" & CStr(configs(k))
                        'If PCG.validate_pcg_by_rails(config_name, rails) Then
                        num_vrms = PCG.get_num_pcg_vrms(config_name)
                        If num_vrms < 4 Then
                            GoTo end_conf_loop
                        End If
                        On Error Resume Next
                        SYSTEM_DECAP_GUI.set_pcg (CStr(configs(k)))
                                        
                        On Error GoTo ErrHandler
                        If SYSTEM_DECAP_GUI.get_pcg() <> CStr(configs(k)) Then
                            SYSTEM_DECAP_GUI.set_pcg (CStr(configs(k)))
                        End If

                        Call set_default_via_params
                        Call set_default_plane_params
                        Call set_default_vrm_params
                        Call set_default_spreading_params
                        Call set_default_vrm_efficiency
                        Call set_calc_feffective
                        Call set_auto_decouple("Auto")
                        Call set_auto_decouple("Manual")
                        Call write_cap_to_file(CInt(current_factor))
end_conf_loop:
                    Next
                Next
            Next
        End If
    Next

    Exit Sub

ErrHandler:
    Call BatchErrHandler("RunScript")
    Application.DisplayAlerts = False
    Application.Quit
End Sub
                    
' Get and return the family dropdown range which can be iterated through
Public Function get_family_list() As Range
    Dim familyRange As Range
    Set familyRange = wksSystemDecap.Range("rngFamilyName")
    Set get_family_list = Evaluate(familyRange.Validation.Formula1)
End Function

' Get and return the device dropdown range which can be iterated through
Public Function get_device_list() As Range
    Dim deviceRange As Range
    Set deviceRange = wksSystemDecap.Range("rngPackageName")
    Set get_device_list = Evaluate(deviceRange.Validation.Formula1)
End Function

' Get and return the PCG dropdown range which can be iterated through
Public Function get_pcg_list() As Range
    Dim pcgRange As Range
    Set pcgRange = wksSystemDecap.Range("rngPCGConfig")
    Set get_pcg_list = Evaluate(pcgRange.Validation.Formula1)
End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private deferred_setup As Boolean

Private Sub Workbook_Activate()
    ' If setup was deferred in Workbook_Open, set it up here.
    If deferred_setup Then
        WorkBookOpenHandler
        deferred_setup = False
    End If
End Sub

Private Sub Workbook_Open()
    ' There are lots of events involved in opening an Excel workbook. Here is
    ' a detailed list: http://pixcels.nl/events-in-workbooks/
    ' Calling setup in protected view will cause Excel to break
    ' Only run setup if we're not in protected view
    ' Refer to https://support.microsoft.com/en-us/help/2745652/object-model-calls-may-fail-from-workbookopen-event-when-exiting-prote
    If Application.ProtectedViewWindows.count = 0 Then
        deferred_setup = False
        WorkBookOpenHandler
    Else
        deferred_setup = True
    End If
End Sub

Private Sub Workbook_BeforeClose(cancel As Boolean)
    If cancel = False Then
        WorkBookCloseHandler
    End If
End Sub

Attribute VB_Name = "Utils"
Option Explicit

#If VBA7 And Win64 Then
    Private Declare PtrSafe Function GetCommandLine Lib "kernel32" Alias "GetCommandLineA" () As Long
    Private Declare PtrSafe Function lstrcpy Lib "kernel32" Alias "lstrcpyA" ( _
    ByVal lpString1 As String, ByVal lpString2 As Long) As Long
#Else
    Private Declare Function GetCommandLine Lib "kernel32" Alias "GetCommandLineA" () As Long
    Private Declare Function lstrcpy Lib "kernel32" Alias "lstrcpyA" ( _
    ByVal lpString1 As String, ByVal lpString2 As Long) As Long
#End If

#Const DEBUG_OUTPUT = True

Public isBatchJob As Boolean

Public Sub protect_worksheet(ws As Worksheet)
    ' The .Protect() method of a worksheet is complex, with many options to
    ' restrict what can be done with a 'protected' worksheet. Of particular
    ' interest to us is the 'UserInterfaceOnly' argument. The VBA documentation
    ' isn't quite clear on what this does, but when set to True, it means that
    ' only VBA code can modify locked cells on a worksheet. Most of the time,
    ' this is exactly what we want.
    '
    ' Complicating this is that unlike just about everything else (including
    ' Application.EnableEvents) this 'UserInterfaceOnly' protection mode does
    ' *not* persist across workbook openings, so it must be _reapplied_
    ' before you try to modify a locked cell.
    '
    ' You can see this in action in the RELEASE_NOTES class module, which calls
    ' protect_worksheet() on wksReleaseNotes *before* updating the supported
    ' device list.

#If DEBUG_OUTPUT Then
    Debug.Print "protect: " & ws.name
#End If
    ws.Protect PROTECTION_PASSWORD, UserInterfaceOnly:=True
End Sub

' Unprotect a single worksheet
Public Sub unprotect_worksheet(ws As Worksheet)
    Debug.Print "unprotect: " & ws.name & " - ";
    If ws.ProtectionMode = True Then
        ws.Unprotect PROTECTION_PASSWORD
    #If DEBUG_OUTPUT Then
        Debug.Print "OK"
    Else
        Debug.Print "not UserInterfaceOnly sheet"
    #End If
    End If
End Sub

Public Function init_workbook()
    Dim ws As Worksheet
    'Hide all but customer-visible sheets. Set protection on all visible sheets
    For Each ws In Worksheets
        If (ws.name = "Release_Notes" Or ws.name = "Introduction" Or ws.name = "Decap_Selection" Or _
            ws.name = "Library" Or ws.name = "BGA_Via" Or _
            ws.name = "Plane_Cap" Or ws.name = "Cap_Mount" Or ws.name = "X2Y_Mount" Or _
            ws.name = "BOM" Or ws.name = "Enlarged_Graph" Or _
            ws.name = "Stackup" Or ws.name = "System_Decap") Then
            ws.Visible = True
            protect_worksheet ws
        End If
    Next
End Function

Public Function usingExcel2007()
    Dim using_excel_2007 As Boolean
    Dim cur_version As Integer
    
    ' Can't convert Version string to int easily in non-English locales
    ' Somehow, Version always uses "." but CInt doesn't recognize "." in non-English
    ' locales. Go figure.
    ' Since we care only about the major version, just forget about the dot!
    cur_version = CInt(Left(Application.version, 2))
    usingExcel2007 = (cur_version > 11)
End Function

Public Function CommandLine() As String
    Dim lpStr As Long, i As Long
    Dim Buffer As String
    Dim cmdLine As String
    lpStr = GetCommandLine()
    Buffer = Space$(512)
    lstrcpy Buffer, lpStr
    Buffer = Left$(Buffer, InStr(Buffer & vbNullChar, vbNullChar) - 1)
    If Left$(Buffer, 1) = """" Then
        i = InStr(2, Buffer, """")
        cmdLine = LTrim$(Mid$(Buffer, i + 1))
    Else
        i = InStr(Buffer, " ")
        cmdLine = LTrim$(Mid$(Buffer, i))
    End If
    CommandLine = cmdLine
End Function

Public Function ArrayToDelimitedString(variantArray As Variant) As String
   Dim delimitedString As String, index As Integer

   For index = 1 To UBound(variantArray)
      delimitedString = delimitedString & CStr(variantArray(index, 1)) & ","
    Next
    ArrayToDelimitedString = Left(delimitedString, Len(delimitedString) - 1)
End Function

Function BatchErrHandler(FunctionName As String)
    Dim err_fso As New FileSystemObject, err_ts As TextStream
    
    Dim OutFile As String
    
    OutFile = ActiveWorkbook.Path & "\error.txt"
    
    If Not err_fso.FileExists(OutFile) Then
        Set err_ts = err_fso.CreateTextFile(OutFile, True)
    Else
        Set err_ts = err_fso.OpenTextFile(OutFile, ForAppending)
    End If

    err_ts.Write ("Error Handler Triggered in: " & FunctionName & "Error Description: " & Err.Description)
    err_ts.Close
End Function

Function ErrorHandler(FunctionName As String)
    Debug.Print "["; FunctionName; "] "; Err.source; " ("; Err.Number; ") "; Err.Description
    ' Application.ScreenUpdating = True
    ' Application.EnableEvents = True
End Function

Public Function RegKeyRead(i_RegKey As String) As String
Dim myWS As Object

  On Error Resume Next
  'access Windows scripting
  Set myWS = CreateObject("WScript.Shell")
  'read key from registry
  RegKeyRead = myWS.RegRead(i_RegKey)
End Function

Public Function CheckNumberingFormat() As Boolean
    Dim DecimalSetting As String, ThousandsSetting As String
    DecimalSetting = RegKeyRead("HKEY_CURRENT_USER\Control Panel\International\sDecimal")
    ThousandsSetting = RegKeyRead("HKEY_CURRENT_USER\Control Panel\International\sThousand")
    If StrComp(DecimalSetting, ".") = 0 And StrComp(ThousandsSetting, ",") = 0 Then
        CheckNumberingFormat = True
    Else
        CheckNumberingFormat = False
    End If
End Function

Sub ExportCSV(ByVal sh As Worksheet, fname)
    Dim wb As Workbook
    Set wb = Workbooks.Add
    sh.UsedRange.Copy wb.sheets(1).Cells(1, 1)
    Application.Dialogs(xlDialogSaveAs).Show
    wb.Close
    Set wb = Nothing
End Sub

Public Function convert_string_to_ascii(ByVal str As String) As String
    convert_string_to_ascii = StrConv(str, vbFromUnicode)
End Function

Public Function SheetExists(name As String, WorkbookToSearch As Workbook) As Boolean
    On Error GoTo NotFound
    Dim w As Worksheet
    Set w = WorkbookToSearch.Worksheets(name)
    SheetExists = True
    Exit Function
NotFound:
    SheetExists = False
End Function

'Strings returned from DLL calls will have a length equal to the
'buffer size that it was created with, not the length of the actual
'string. This function trims off extra characters that aren't part of the
'null-terminated string
Public Function TrimNull(InString As String) As String
    Dim i As Long, OutString As String
    i = InStr(InString, vbNullChar)
    If i = 0 Then
        'No Null character found. No touchie.
        OutString = InString
    Else
        OutString = Left(InString, i - 1)
    End If
    TrimNull = OutString
End Function

Function create_random_string(cb As Integer) As String

    Randomize
    Dim rgch As String
    rgch = "abcdefghijklmnopqrstuvwxyz"
    rgch = rgch & UCase(rgch) & "0123456789"

    Dim i As Long
    For i = 1 To cb
        create_random_string = create_random_string & Mid$(rgch, Int(Rnd() * Len(rgch) + 1), 1)
    Next

End Function

' This function handles button size distortions caused by different resolution settings
' Distortions are remedied by setting TakeFocusOnClick to False, and then moving the
' button away from focus
Public Sub StabilizeButton(button As CommandButton)
   
    ' Undo distortion
    button.TakeFocusOnClick = False
    button.Left = button.Left + 200
    button.Left = button.Left - 200

End Sub

' Click a button given its name
Public Sub ClickCommandButton(ButtonName As String)
    Dim button As Object
    Set button = GetButtonFromName(ButtonName)
    If Not button Is Nothing Then
        If Not button.Object Is Nothing Then
            button.Object.value = True
        End If
    End If
End Sub

' Get a button from its name
Public Function GetButtonFromName(NameString As String) As Object
    On Error Resume Next

    ' Initialization
    Dim wbk As Workbook
    Dim sheets As sheets
    Dim ws As Worksheet
    Dim OLEObjects As Variant
    Dim OLEObject As Object
    Dim button As CommandButton
    
    ' Find button
    Set wbk = ActiveWorkbook
    Set sheets = wbk.Worksheets
    For Each ws In sheets
        Set OLEObjects = ws.OLEObjects
        For Each OLEObject In OLEObjects
            If OLEObject.name = NameString Then
                ' Found the button
                Set GetButtonFromName = OLEObject
                Exit Function
            End If
        Next
    Next
    
    ' Couldn't find the button
    Set GetButtonFromName = Nothing
End Function

Public Function IsArrayEmpty(arr As Variant) As Boolean
    ' VBA is so archaic, that there is no way to determine if an array is empty
    ' without resorting to exception. Thank you so much, 1998.
    '
    ' This solution is based on code found here:
    '   https://stackoverflow.com/a/38784977
    '
    ' Note that this function will break if Tools > Options... > General
    ' has Error Trapping set to anything other than Break on Unhandled Errors.

    Err.Clear
    On Error Resume Next

    If Not IsArray(arr) Then
        IsArrayEmpty = True
        Exit Function
    End If

    Dim ub As Integer
    Dim lb As Integer

    ' UBound() will throw an error if the array is unallocated.
    ub = UBound(arr)
    If Err.Number <> 0 Then
        IsArrayEmpty = True
        Exit Function
    End If

    ' Apparently, for good measure, there is a weird corner case where an
    ' array can be unallocated, but Err.Number is still 0. In this weird
    ' case, UBound() will return -1, and LBound() will return 0. We need to
    ' handle this here as well.

    Err.Clear
    lb = LBound(arr)
    If lb > ub Then
        IsArrayEmpty = True
        Exit Function
    End If

    ' If we make it here, 'arr' is not empty.
    IsArrayEmpty = False
End Function

' Ref. https://www.mrexcel.com/forum/excel-questions/665337-change-scope-defined-name-excel-2007-a.html#post3297886
Public Sub ChangeNamedRangeScopesOnActiveSheet()
    Dim nm As name
    Dim locNam As String
    Dim wSh As Worksheet

    Set wSh = ActiveSheet
    Debug.Print "ActiveSheet: "; wSh.name

    For Each nm In ActiveWorkbook.Names
        If InStr(nm.RefersTo, wSh.name) > 0 Then
            On Error Resume Next
            If Not nm.RefersToRange Is Nothing Then
                With nm.RefersToRange
                    locNam = nm.name
                    Debug.Print " * "; locNam
                    ' Remove global name
                    ActiveWorkbook.Names(nm.name).Delete
                    ' (Re)add local name
                    .Parent.Names.Add name:=locNam, RefersTo:="=" & .Address
                End With
            End If
            On Error GoTo 0
        End If
    Next

    Debug.Print "Done"
End Sub

' Ref. https://stackoverflow.com/a/152325
Public Sub QuickSort(vArray As Variant, inLow As Long, inHi As Long)
  Dim pivot   As Variant
  Dim tmpSwap As Variant
  Dim tmpLow  As Long
  Dim tmpHi   As Long

  tmpLow = inLow
  tmpHi = inHi

  pivot = vArray((inLow + inHi) \ 2)

  While (tmpLow <= tmpHi)

     While (vArray(tmpLow) < pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend

     While (pivot < vArray(tmpHi) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend

     If (tmpLow <= tmpHi) Then
        tmpSwap = vArray(tmpLow)
        vArray(tmpLow) = vArray(tmpHi)
        vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If

  Wend

  If (inLow < tmpHi) Then QuickSort vArray, inLow, tmpHi
  If (tmpLow < inHi) Then QuickSort vArray, tmpLow, inHi
End Sub
Attribute VB_Name = "VersionControl"
Option Explicit

Sub ExportCodeModules()
    ' This code Exports all VBA modules
    Dim i As Integer
    Dim sName As String
    Dim Path As String

    Path = Application.ActiveWorkbook.Path & "\vb"
    Debug.Print "Exporting Code to " & Path & "..."

    If Dir(Path, vbDirectory) = "" Then
        MkDir Path
    End If

    With ThisWorkbook.VBProject
        For i = 1 To .VBComponents.count
            Dim ModuleName As String
            ModuleName = .VBComponents(i).CodeModule.name
            
            ' Ignore any modules with default names (like the 'PDN_RESOURCES'
            ' module, which is always created with a name like "Sheet1", the
            ' 'LibraryIncludes' module which is autogenerated, and the trivial
            ' code behind any worksheets, which all start with "wks".
            If Left(ModuleName, 3) <> "wks" And ModuleName <> "ThisWorkbook" And ModuleName <> "LibraryIncludes" And Left(ModuleName, 5) <> "Sheet" Then
                sName = .VBComponents(i).CodeModule.name
                Debug.Print "* " & sName
                .VBComponents(i).Export Application.ActiveWorkbook.Path & "\vb\" & sName & ".bas"
            End If
        Next
    End With

    Debug.Print "Done"
End Sub

Function ImportCodeModules()
    '!!!!DON'T USE THIS WITH CLASS MODULES!!!!. they won't be imported correctly
    Dim CurModuleName As String
    Dim ModuleName As String
    Dim TempModuleName As String
    
    With ThisWorkbook.VBProject
        Dim Modules() As String
        
        ReDim Modules(.VBComponents.count)
        Dim i As Long

        For i = 1 To .VBComponents.count
            Modules(i - 1) = .VBComponents(i).CodeModule.name
        Next
        
        For i = 1 To .VBComponents.count
            ModuleName = Modules(i - 1)
    
            If ModuleName <> "VersionControl" And ModuleName <> "ThisWorkbook" And Left(ModuleName, 3) <> "wks" Then
                If Dir(Application.ActiveWorkbook.Path & "\vb\" & ModuleName & ".bas") <> "" Then
                    CurModuleName = ModuleName
                    TempModuleName = ModuleName & "_temp"
                    .VBComponents(ModuleName).name = TempModuleName
                    
                    On Error GoTo ImportErrorHandler
                        .VBComponents.Import (Application.ActiveWorkbook.Path & "\vb\" & ModuleName & ".bas")
                    On Error GoTo DeleteTempErrorHandler
                        .VBComponents.Remove .VBComponents(TempModuleName)
                End If
            End If
        Next
    End With

    Exit Function

ImportErrorHandler:
    MsgBox "Failed To import " & Application.ActiveWorkbook.Path & "\vb\" & CurModuleName & ".bas"
    ThisWorkbook.VBProject.VBComponents(CurModuleName & "_temp").name = CurModuleName
    Resume Next

DeleteTempErrorHandler:
    MsgBox "Can't remove temp module " & CurModuleName & "_temp"
End Function

Function UnprotectVBProj(ByVal Pwd As String)
    Dim vbProj As Object
    Set vbProj = ThisWorkbook.VBProject

    If vbProj.Protection <> 1 Then
        Exit Function ' already unprotected
    End If

    SendKeys "%{F11}", True ' VBE
    SendKeys "^r", True ' Set focus to Explorer
    SendKeys "{TAB}", True ' Tab to locked project
    SendKeys "~", True ' Enter
    SendKeys Pwd
    SendKeys "~", True ' Enter

    If vbProj.Protection Then MsgBox "Failure to unprotect!"
End Function
Attribute VB_Name = "WorkBookEventHandlers"
Option Explicit

Private mOpenHandlerHasRun As Boolean ' default is False

Sub WorkBookOpenHandler()
    ' If you are finding that this code isn't executing -- that is, the
    ' Workbook_Open() event handler isn't firing and calling this Sub, then
    ' there's a chance Application.EnableEvents is set to False. This can
    ' happen if the startup process below is interrupted and events are not
    ' re-enabled.
    '
    ' Here's the kicker: APPARENTLY THIS SETTING IS PERSISTED INSIDE THE
    ' EXCEL FILE WHEN IT IS SAVED!
    '
    ' So, if you interrupt the startup code after Application.EnableEvents
    ' is set to False, then save the PDN Tool, no more events will fire in
    ' that version of the PDN Tool... ever.
    '
    ' The only solution is to open the VBA Editor (by pressing Alt+F11) and
    ' entering the following into the Immediate window (which can be opened
    ' by pressing Ctrl+G, if it's not already visible):
    '
    '   Application.EnableEvents = True
    '
    ' ...and pressing [Enter].
    '
    ' This comment is here in the hopes that it will save you much head-
    ' desking. The symptoms seem to have multiple causes (including a case
    ' where conditional formatting in a spreadsheet can cause events to
    ' become disabled -- ???!) but the fix for us was suggested here:
    '
    ' http://www.vbforums.com/showthread.php?555092-RESOLVED-Workbook_Open-event-won-t-run&p=3429965&viewfull=1#post3429965

    If mOpenHandlerHasRun Then
        Debug.Print "[ Workbook Already Opened ]"
        Exit Sub
    Else
        Debug.Print "[ Workbook Opened ]"
        mOpenHandlerHasRun = True
    End If

    SYSTEM_DECAP_INIT = False
    Const RELEASE_NOTES_SHEET As String = "Release_Notes"

    ' Disable GUI updates while we make sure the correct sheets are visible.
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    ' This workbook accepts the following commands:
    ' RunScript: /<e|embedded>/runscript;<ScriptFileName>
    BatchMode = False
    ' Override international settings
    With Application
        .DisplayAlerts = False
        .DecimalSeparator = "."
        .ThousandsSeparator = ","
        .UseSystemSeparators = False
        .Calculation = xlCalculationManual
    End With
    
    prepareForRelease ' this will activate the System_Decap sheet for us
    init_system_decap
    
    ' The PDN_DDB isn't available until after init_system_decap() has run, so
    ' we have to defer populating the "Supported Families" field on the
    ' 'Release Notes' sheet until here.
    Dim families As Variant
    Dim success As Boolean
    Dim supported_devices As String

    success = PDN_DDB.get_families(families)
    If success Then
        Dim family As Variant

        For Each family In families
            Dim family_r As String
            Dim family_base_end As Integer
            family_base_end = InStr(family, " ")

            If family_base_end > 1 Then
                ' Stick the registered-trademark symbol before the space in the
                ' family name.
                family_r = Left(family, family_base_end - 1) & "|fffd| " & Mid(family, family_base_end + 1)
            Else
                ' If there is NO space, stick the symbol at the end of the
                ' family name.
                family_r = family & "|fffd|"
            End If

            If supported_devices <> "" Then
                supported_devices = supported_devices & ", "
            End If
            supported_devices = supported_devices & family_r
        Next
    End If

    If supported_devices = "" Then
        supported_devices = "UNKNOWN"
    End If

    RELEASE_NOTES.SupportedDevices = supported_devices
End Sub

Function WorkBookCloseHandler()
    destroy_system_decap
    mOpenHandlerHasRun = False ' we may as well reset this
End Function

Attribute VB_Name = "X2YMount"
Option Explicit

Function x2y_mount_event_handler(ByVal target As Range)
    Dim ade As AUTO_DISABLE_EVENTS
    Set ade = New AUTO_DISABLE_EVENTS

    On Error GoTo ErrHandler
     
    If Not Intersect(target, Range("rngX2YParams")) Is Nothing Then
        Dim col As Long
        col = target.Column
        
        Dim l_top As Double
        l_top = CalculateX2YMount(CInt(wksX2YMount.Cells(37, col).value), 1, _
            wksX2YMount.Cells(38, col).value, _
            wksX2YMount.Cells(39, col).value, _
            wksX2YMount.Cells(41, col).value, _
            wksX2YMount.Cells(42, col).value, _
            wksX2YMount.Cells(43, col).value, _
            wksX2YMount.Cells(44, col).value, _
            wksX2YMount.Cells(47, col).value, _
            wksX2YMount.Cells(48, col).value, _
            wksX2YMount.Cells(49, col).value)

        Dim l_bottom As Double
        l_bottom = CalculateX2YMount(CInt(wksX2YMount.Cells(37, col).value), 0, _
            wksX2YMount.Cells(38, col).value, _
            wksX2YMount.Cells(39, col).value, _
            wksX2YMount.Cells(41, col).value, _
            wksX2YMount.Cells(42, col).value, _
            wksX2YMount.Cells(43, col).value, _
            wksX2YMount.Cells(44, col).value, _
            wksX2YMount.Cells(47, col).value, _
            wksX2YMount.Cells(48, col).value, _
            wksX2YMount.Cells(49, col).value)
        
        wksX2YMount.Range("rngX2YLTop").Cells(1, col - 3).value = l_top
        wksX2YMount.Range("rngX2YLBottom").Cells(1, col - 3).value = l_bottom
    End If

    Exit Function

ErrHandler:
    Call ErrorHandler("x2y_mount_event_handler")
End Function

Function CalculateX2YMount(cap_type, Cap_Position, t, h, r, G1G2, AB, GA, C1, C2, thk) As Double
    Dim Htotal As Double
    Htotal = 4 * t + 2 * h + C1 + C2 + thk

    Dim x As Double
    Dim y As Double

    'IF(X2Y_Mount!$D$42<sim_limits0603!$B$5-sim_limits0603!$B$4+X2Y_Mount!$D$39,sim_limits0603!$B$5-sim_limits0603!$B$4+X2Y_Mount!$D$39,X2Y_Mount!$D$42)
'    X = Sheets("sim_limits0603").Range("B5").Value
'    Y = Sheets("sim_limits0603").Range("B4").Value
    Select Case cap_type
        Case "603"
            x = sheets("sim_limits0603").Range("B5").value
            y = sheets("sim_limits0603").Range("B4").value
        Case "805"
            x = sheets("sim_limits0805").Range("B5").value
            y = sheets("sim_limits0805").Range("B4").value
        Case "1206"
            x = sheets("sim_limits1206").Range("B5").value
            y = sheets("sim_limits1206").Range("B4").value
        Case "1210"
            x = sheets("sim_limits1210").Range("B5").value
            y = sheets("sim_limits1210").Range("B4").value
    End Select

    Dim G_Vias_limit As Double

    If G1G2 < (x - y + h) Then
        G_Vias_limit = x - y + h
    Else
        G_Vias_limit = G1G2
    End If
    
    'IF(X2Y_Mount!$D$43<sim_limits0603!$B$11-sim_limits0603!$B$4,sim_limits0603!$B$11-sim_limits0603!$B$4,X2Y_Mount!$D$43)
    'X = Sheets("sim_limits0603").Range("B11").Value
    'Y = Sheets("sim_limits0603").Range("B4").Value
    Select Case cap_type
        Case "603"
            x = sheets("sim_limits0603").Range("B11").value
        Case "805"
            x = sheets("sim_limits0805").Range("B11").value
        Case "1206"
            x = sheets("sim_limits1206").Range("B11").value
        Case "1210"
            x = sheets("sim_limits1210").Range("B11").value
    End Select

    Dim AB_Vias_limit As Double

    If AB < (x - y) Then
        AB_Vias_limit = x - y
    Else
        AB_Vias_limit = AB
    End If
    
    'IF(X2Y_Mount!$D$44<sim_limits0603!$B$17-sim_limits0603!$B$4+X2Y_Mount!$D$41,sim_limits0603!$B$17-sim_limits0603!$B$4+X2Y_Mount!$D$41,X2Y_Mount!$D$44)
    'X = Sheets("sim_limits0603").Range("B17").Value
    'Y = Sheets("sim_limits0603").Range("B4").Value
    Select Case cap_type
        Case "603"
            x = sheets("sim_limits0603").Range("B17").value
        Case "805"
            x = sheets("sim_limits0805").Range("B17").value
        Case "1206"
            x = sheets("sim_limits1206").Range("B17").value
        Case "1210"
            x = sheets("sim_limits1210").Range("B17").value
    End Select

    Dim GA_Vias_limit As Double

    If GA < (x - y + r) Then
        GA_Vias_limit = x - y + r
    Else
        GA_Vias_limit = GA
    End If
    
    Dim h1 As Double
    h1 = t + h
    'IF(SUM( X2Y_Mount!$D$38:$D$39)>OFFSET( sim_limits0603!$B$23, sim_limits0603!$C$24,0,1,1),OFFSET( sim_limits0603!$B$23, sim_limits0603!$C$24,0,1,1),SUM( X2Y_Mount!$D$38:$D$39))
    'X = Sheets("sim_limits0603").Range("B27").Value
    
    Select Case cap_type
        Case "603"
            x = sheets("sim_limits0603").Range("B27").value
        Case "805"
            x = sheets("sim_limits0805").Range("B27").value
        Case "1206"
            x = sheets("sim_limits1206").Range("B27").value
        Case "1210"
            x = sheets("sim_limits1210").Range("B27").value
    End Select

    Dim h1_limit As Double
    If h1 > x Then
        h1_limit = x
    Else
        h1_limit = h1
    End If
    
    'IF(SUM( X2Y_Mount!$D$38:$D$39)>OFFSET( sim_limits0603!$B$23, sim_limits0603!$C$24,0,1,1),SUM( X2Y_Mount!$D$38:$D$39)-OFFSET( sim_limits0603!$B$23, sim_limits0603!$C$24,0,1,1),0)
    Dim h1_excess As Double
    If h1 > x Then
        h1_excess = h1 - x
    Else
        h1_excess = 0
    End If
    
    Dim nMaxItem As Long
    Dim G_low As Long
    Dim i As Long
    Dim AB_low As Long
    Dim GA_low As Long
    Dim h1_low As Long
    Dim G_high_bound As Long
    Dim AB_high_bound As Long
    Dim GA_high_bound As Long
    Dim h1_high_bound As Long

    Dim B_G_low As Long
    Dim B_AB_low  As Long
    Dim B_GA_low  As Long
    Dim B_G_high  As Long
    Dim B_AB_high  As Long
    Dim B_GA_high  As Long

    '=IF(D$19>=sim_limits0603!$B$5,MATCH(D$19,sim_limits0603!$B$5:$B$9,1)-1,0)
    Select Case cap_type
        Case "603"
            nMaxItem = sheets("sim_limits0603").Range("C5").value
            G_low = 0
            For i = 1 To nMaxItem
                If G_Vias_limit >= sheets("sim_limits0603").Range("B6").Offset(i - 1, 0).value Then
                    G_low = G_low + 1
                End If
            Next
            
            '=IF(D$20>=sim_limits0603!$B$11,MATCH(D$20,sim_limits0603!$B$11:$B$15,1)-1,0)
            nMaxItem = sheets("sim_limits0603").Range("C11").value
            AB_low = 0
            For i = 1 To nMaxItem
                 If AB_Vias_limit >= sheets("sim_limits0603").Range("B12").Offset(i - 1, 0).value Then
                    AB_low = AB_low + 1
                 End If
            Next
        
            '=IF(D$21>=sim_limits0603!$B$17,MATCH(D$21,sim_limits0603!$B$17:$B$20,1)-1,0)
            nMaxItem = sheets("sim_limits0603").Range("C17").value
            GA_low = 0
            For i = 1 To nMaxItem
                 If GA_Vias_limit >= sheets("sim_limits0603").Range("B18").Offset(i - 1, 0).value Then
                    GA_low = GA_low + 1
                 End If
            Next
                
            '=IF(D$23>=sim_limits0603!$B$24,MATCH(D$23,sim_limits0603!$B$24:$B$28,1)-1,0)
            nMaxItem = sheets("sim_limits0603").Range("C24").value
            h1_low = 0
            For i = 1 To nMaxItem
                 If h1_limit >= sheets("sim_limits0603").Range("B25").Offset(i - 1, 0).value Then
                    h1_low = h1_low + 1
                 End If
            Next
            
            '=IF( D$25 < (sim_limits0603!$C$5-1 ), D$25 + 1, (sim_limits0603!$C$5-1 ))
            x = sheets("sim_limits0603").Range("C5").value - 1
            If G_low < x Then
                G_high_bound = G_low + 1
            Else
                G_high_bound = x
            End If
            
            '=IF( D$26< (sim_limits0603!$C$11-1 ), D$26 + 1,(sim_limits0603!$C$11-1 ))
            x = sheets("sim_limits0603").Range("C11").value - 1
            If AB_low < x Then
                AB_high_bound = AB_low + 1
            Else
                AB_high_bound = x
            End If
            
            '=IF( D$27 < (sim_limits0603!$C$17-1 ), D$27 + 1, (sim_limits0603!$C$17-1 ))
            x = sheets("sim_limits0603").Range("C17").value - 1
            If GA_low < x Then
                GA_high_bound = GA_low + 1
            Else
                GA_high_bound = x
            End If
            
            '=IF( D$28< (sim_limits0603!$C$24-1 ), D$28 + 1, (sim_limits0603!$C$24-1 ))
            x = sheets("sim_limits0603").Range("C24").value - 1
            If h1_low < x Then
                h1_high_bound = h1_low + 1
            Else
                h1_high_bound = x
            End If
            
            '=OFFSET(sim_limits0603!$B$5,$D$25,0,1,1)
            B_G_low = sheets("sim_limits0603").Range("B5").Offset(G_low, 0).value
            '=OFFSET(sim_limits0603!$B$11,$D$26,0,1,1)
            B_AB_low = sheets("sim_limits0603").Range("B11").Offset(AB_low, 0).value
            '=OFFSET(sim_limits0603!$B$17,$D$27,0,1,1)
            B_GA_low = sheets("sim_limits0603").Range("B17").Offset(GA_low, 0).value
            '=OFFSET(sim_limits0603!$B$5,$D$29,0,1,1)
            B_G_high = sheets("sim_limits0603").Range("B5").Offset(G_high_bound, 0).value
            '=OFFSET(sim_limits0603!$B$11,$D$30,0,1,1)
            B_AB_high = sheets("sim_limits0603").Range("B11").Offset(AB_high_bound, 0).value
            '=OFFSET(sim_limits0603!$B$17,$D$31,0,1,1)
            B_GA_high = sheets("sim_limits0603").Range("B17").Offset(GA_high_bound, 0).value
        
        Case "805"
            nMaxItem = sheets("sim_limits0805").Range("C5").value
            G_low = 0
            For i = 1 To nMaxItem
                If G_Vias_limit >= sheets("sim_limits0805").Range("B6").Offset(i - 1, 0).value Then
                    G_low = G_low + 1
                End If
            Next
        
            '=IF(D$20>=sim_limits0603!$B$11,MATCH(D$20,sim_limits0603!$B$11:$B$15,1)-1,0)
            nMaxItem = sheets("sim_limits0805").Range("C11").value
            AB_low = 0
            For i = 1 To nMaxItem
                 If AB_Vias_limit >= sheets("sim_limits0805").Range("B12").Offset(i - 1, 0).value Then
                    AB_low = AB_low + 1
                 End If
            Next
        
            '=IF(D$21>=sim_limits0805!$B$17,MATCH(D$21,sim_limits0805!$B$17:$B$20,1)-1,0)
            nMaxItem = sheets("sim_limits0805").Range("C17").value
            GA_low = 0
            For i = 1 To nMaxItem
                 If GA_Vias_limit >= sheets("sim_limits0805").Range("B18").Offset(i - 1, 0).value Then
                    GA_low = GA_low + 1
                 End If
            Next
                
            '=IF(D$23>=sim_limits0805!$B$24,MATCH(D$23,sim_limits0805!$B$24:$B$28,1)-1,0)
            nMaxItem = sheets("sim_limits0805").Range("C24").value
            h1_low = 0
            For i = 1 To nMaxItem
                 If h1_limit >= sheets("sim_limits0805").Range("B25").Offset(i - 1, 0).value Then
                    h1_low = h1_low + 1
                 End If
            Next
            
            '=IF( D$25 < (sim_limits0805!$C$5-1 ), D$25 + 1, (sim_limits0805!$C$5-1 ))
            x = sheets("sim_limits0805").Range("C5").value - 1
            If G_low < x Then
                G_high_bound = G_low + 1
            Else
                G_high_bound = x
            End If
            
            '=IF( D$26< (sim_limits0805!$C$11-1 ), D$26 + 1,(sim_limits0805!$C$11-1 ))
            x = sheets("sim_limits0805").Range("C11").value - 1
            If AB_low < x Then
                AB_high_bound = AB_low + 1
            Else
                AB_high_bound = x
            End If
            
            '=IF( D$27 < (sim_limits0805!$C$17-1 ), D$27 + 1, (sim_limits0805!$C$17-1 ))
            x = sheets("sim_limits0805").Range("C17").value - 1
            If GA_low < x Then
                GA_high_bound = GA_low + 1
            Else
                GA_high_bound = x
            End If
            
            '=IF( D$28< (sim_limits0805!$C$24-1 ), D$28 + 1, (sim_limits0805!$C$24-1 ))
            x = sheets("sim_limits0805").Range("C24").value - 1
            If h1_low < x Then
                h1_high_bound = h1_low + 1
            Else
                h1_high_bound = x
            End If
            
            '=OFFSET(sim_limits0805!$B$5,$D$25,0,1,1)
            B_G_low = sheets("sim_limits0805").Range("B5").Offset(G_low, 0).value
            '=OFFSET(sim_limits0805!$B$11,$D$26,0,1,1)
            B_AB_low = sheets("sim_limits0805").Range("B11").Offset(AB_low, 0).value
            '=OFFSET(sim_limits0805!$B$17,$D$27,0,1,1)
            B_GA_low = sheets("sim_limits0805").Range("B17").Offset(GA_low, 0).value
            '=OFFSET(sim_limits0805!$B$5,$D$29,0,1,1)
            B_G_high = sheets("sim_limits0805").Range("B5").Offset(G_high_bound, 0).value
            '=OFFSET(sim_limits0805!$B$11,$D$30,0,1,1)
            B_AB_high = sheets("sim_limits0805").Range("B11").Offset(AB_high_bound, 0).value
            '=OFFSET(sim_limits0805!$B$17,$D$31,0,1,1)
            B_GA_high = sheets("sim_limits0805").Range("B17").Offset(GA_high_bound, 0).value
        
        Case "1206"
            nMaxItem = sheets("sim_limits1206").Range("C5").value
            G_low = 0
            For i = 1 To nMaxItem
                If G_Vias_limit >= sheets("sim_limits1206").Range("B6").Offset(i - 1, 0).value Then
                    G_low = G_low + 1
                End If
            Next
        
            '=IF(D$20>=sim_limits0603!$B$11,MATCH(D$20,sim_limits0603!$B$11:$B$15,1)-1,0)
            nMaxItem = sheets("sim_limits1206").Range("C11").value
            AB_low = 0
            For i = 1 To nMaxItem
                 If AB_Vias_limit >= sheets("sim_limits1206").Range("B12").Offset(i - 1, 0).value Then
                    AB_low = AB_low + 1
                 End If
            Next
        
            '=IF(D$21>=sim_limits1206!$B$17,MATCH(D$21,sim_limits1206!$B$17:$B$20,1)-1,0)
            nMaxItem = sheets("sim_limits1206").Range("C17").value
            GA_low = 0
            For i = 1 To nMaxItem
                 If GA_Vias_limit >= sheets("sim_limits1206").Range("B18").Offset(i - 1, 0).value Then
                    GA_low = GA_low + 1
                 End If
            Next
                
            '=IF(D$23>=sim_limits1206!$B$24,MATCH(D$23,sim_limits1206!$B$24:$B$28,1)-1,0)
            nMaxItem = sheets("sim_limits1206").Range("C24").value
            h1_low = 0
            For i = 1 To nMaxItem
                 If h1_limit >= sheets("sim_limits1206").Range("B25").Offset(i - 1, 0).value Then
                    h1_low = h1_low + 1
                 End If
            Next
            
            '=IF( D$25 < (sim_limits1206!$C$5-1 ), D$25 + 1, (sim_limits1206!$C$5-1 ))
            x = sheets("sim_limits1206").Range("C5").value - 1
            If G_low < x Then
                G_high_bound = G_low + 1
            Else
                G_high_bound = x
            End If
            
            '=IF( D$26< (sim_limits1206!$C$11-1 ), D$26 + 1,(sim_limits1206!$C$11-1 ))
            x = sheets("sim_limits1206").Range("C11").value - 1
            If AB_low < x Then
                AB_high_bound = AB_low + 1
            Else
                AB_high_bound = x
            End If
            
            '=IF( D$27 < (sim_limits1206!$C$17-1 ), D$27 + 1, (sim_limits1206!$C$17-1 ))
            x = sheets("sim_limits1206").Range("C17").value - 1
            If GA_low < x Then
                GA_high_bound = GA_low + 1
            Else
                GA_high_bound = x
            End If
            
            '=IF( D$28< (sim_limits1206!$C$24-1 ), D$28 + 1, (sim_limits1206!$C$24-1 ))
            x = sheets("sim_limits1206").Range("C24").value - 1
            If h1_low < x Then
                h1_high_bound = h1_low + 1
            Else
                h1_high_bound = x
            End If
            
            '=OFFSET(sim_limits1206!$B$5,$D$25,0,1,1)
            B_G_low = sheets("sim_limits1206").Range("B5").Offset(G_low, 0).value
            '=OFFSET(sim_limits1206!$B$11,$D$26,0,1,1)
            B_AB_low = sheets("sim_limits1206").Range("B11").Offset(AB_low, 0).value
            '=OFFSET(sim_limits1206!$B$17,$D$27,0,1,1)
            B_GA_low = sheets("sim_limits1206").Range("B17").Offset(GA_low, 0).value
            '=OFFSET(sim_limits1206!$B$5,$D$29,0,1,1)
            B_G_high = sheets("sim_limits1206").Range("B5").Offset(G_high_bound, 0).value
            '=OFFSET(sim_limits1206!$B$11,$D$30,0,1,1)
            B_AB_high = sheets("sim_limits1206").Range("B11").Offset(AB_high_bound, 0).value
            '=OFFSET(sim_limits1206!$B$17,$D$31,0,1,1)
            B_GA_high = sheets("sim_limits1206").Range("B17").Offset(GA_high_bound, 0).value
            
        Case "1210"
        '=IF(D$19>=sim_limits1210!$B$5,MATCH(D$19,sim_limits1210!$B$5:$B$9,1)-1,0)
            nMaxItem = sheets("sim_limits1210").Range("C5").value
            G_low = 0
            For i = 1 To nMaxItem
                If G_Vias_limit >= sheets("sim_limits1210").Range("B6").Offset(i - 1, 0).value Then
                    G_low = G_low + 1
                End If
            Next
        
            '=IF(D$20>=sim_limits0603!$B$11,MATCH(D$20,sim_limits0603!$B$11:$B$15,1)-1,0)
            nMaxItem = sheets("sim_limits1210").Range("C11").value
            AB_low = 0
            For i = 1 To nMaxItem
                 If AB_Vias_limit >= sheets("sim_limits1210").Range("B12").Offset(i - 1, 0).value Then
                    AB_low = AB_low + 1
                 End If
            Next
        
            '=IF(D$21>=sim_limits1210!$B$17,MATCH(D$21,sim_limits1210!$B$17:$B$20,1)-1,0)
            nMaxItem = sheets("sim_limits1210").Range("C17").value
            GA_low = 0
            For i = 1 To nMaxItem
                 If GA_Vias_limit >= sheets("sim_limits1210").Range("B18").Offset(i - 1, 0).value Then
                    GA_low = GA_low + 1
                 End If
            Next
                
            '=IF(D$23>=sim_limits1210!$B$24,MATCH(D$23,sim_limits1210!$B$24:$B$28,1)-1,0)
            nMaxItem = sheets("sim_limits1210").Range("C24").value
            h1_low = 0
            For i = 1 To nMaxItem
                 If h1_limit >= sheets("sim_limits1210").Range("B25").Offset(i - 1, 0).value Then
                    h1_low = h1_low + 1
                 End If
            Next
            
            '=IF( D$25 < (sim_limits1210!$C$5-1 ), D$25 + 1, (sim_limits1210!$C$5-1 ))
            x = sheets("sim_limits1210").Range("C5").value - 1
            If G_low < x Then
                G_high_bound = G_low + 1
            Else
                G_high_bound = x
            End If
            
            '=IF( D$26< (sim_limits1210!$C$11-1 ), D$26 + 1,(sim_limits1210!$C$11-1 ))
            x = sheets("sim_limits1210").Range("C11").value - 1
            If AB_low < x Then
                AB_high_bound = AB_low + 1
            Else
                AB_high_bound = x
            End If
            
            '=IF( D$27 < (sim_limits1210!$C$17-1 ), D$27 + 1, (sim_limits1210!$C$17-1 ))
            x = sheets("sim_limits1210").Range("C17").value - 1
            If GA_low < x Then
                GA_high_bound = GA_low + 1
            Else
                GA_high_bound = x
            End If
            
            '=IF( D$28< (sim_limits1210!$C$24-1 ), D$28 + 1, (sim_limits1210!$C$24-1 ))
            x = sheets("sim_limits1210").Range("C24").value - 1
            If h1_low < x Then
                h1_high_bound = h1_low + 1
            Else
                h1_high_bound = x
            End If
            
            '=OFFSET(sim_limits1210!$B$5,$D$25,0,1,1)
            B_G_low = sheets("sim_limits1210").Range("B5").Offset(G_low, 0).value
            '=OFFSET(sim_limits1210!$B$11,$D$26,0,1,1)
            B_AB_low = sheets("sim_limits1210").Range("B11").Offset(AB_low, 0).value
            '=OFFSET(sim_limits1210!$B$17,$D$27,0,1,1)
            B_GA_low = sheets("sim_limits1210").Range("B17").Offset(GA_low, 0).value
            '=OFFSET(sim_limits1210!$B$5,$D$29,0,1,1)
            B_G_high = sheets("sim_limits1210").Range("B5").Offset(G_high_bound, 0).value
            '=OFFSET(sim_limits1210!$B$11,$D$30,0,1,1)
            B_AB_high = sheets("sim_limits1210").Range("B11").Offset(AB_high_bound, 0).value
            '=OFFSET(sim_limits1210!$B$17,$D$31,0,1,1)
            B_GA_high = sheets("sim_limits1210").Range("B17").Offset(GA_high_bound, 0).value
    End Select

    Dim G_closest As Long

    '=IF($D19^2 < ($D38*$D41),$D25,$D29)
    If G_Vias_limit ^ 2 < B_G_low * B_G_high Then
        G_closest = G_low
    Else
        G_closest = G_high_bound
    End If

    Dim AB_closest As Long

    '=IF($D20^2 < ($D39*$D42),$D26,$D30)
    If AB_Vias_limit ^ 2 < B_AB_low * B_AB_high Then
        AB_closest = AB_low
    Else
        AB_closest = AB_high_bound
    End If

    Dim GA_closest As Long

    '=IF($D21^2 < ($D40*$D43),$D27,$D31)
    If GA_Vias_limit ^ 2 < B_AB_low * B_AB_high Then
        GA_closest = GA_low
    Else
        GA_closest = GA_high_bound
    End If

    Dim B_G_closest As Variant
    Dim B_AB_closest As Variant
    Dim B_GA_closest As Variant
    Dim H1_h1_low As Variant
    Dim H1_h1_high As Variant
    Dim h1_closest As Variant
    Dim H1_h1_closest As Variant

    Select Case cap_type
        Case "603"
            '=OFFSET(sim_limits0603!$B$5,$D$33,0,1,1)
            B_G_closest = sheets("sim_limits0603").Range("B5").Offset(G_closest, 0).value
            
            '=OFFSET(sim_limits0603!$B$11,$D$34,0,1,1)
            B_AB_closest = sheets("sim_limits0603").Range("B11").Offset(AB_closest, 0).value
            
            '=OFFSET(sim_limits0603!$B$17,$D$35,0,1,1)
            B_GA_closest = sheets("sim_limits0603").Range("B17").Offset(GA_closest, 0).value
            
            '=OFFSET(sim_limits0603!$B$24,$D$28,0,1,1)
            H1_h1_low = sheets("sim_limits0603").Range("B24").Offset(h1_low, 0).value
            
            '=OFFSET(sim_limits0603!$B$24,$D$32,0,1,1)
            H1_h1_high = sheets("sim_limits0603").Range("B24").Offset(h1_high_bound, 0).value
            
            '=IF($D22^2 < ($D48*$D49),$D28,$D32)
            If h1 ^ 2 < H1_h1_low * H1_h1_high Then
                h1_closest = h1_low
            Else
                h1_closest = h1_high_bound
            End If
            
            '=OFFSET(sim_limits0603!$B$24,$D$36,0,1,1)
            H1_h1_closest = sheets("sim_limits0603").Range("B24").Offset(h1_closest, 0).value

        Case "805"
            '=OFFSET(sim_limits0603!$B$5,$D$33,0,1,1)
            B_G_closest = sheets("sim_limits0805").Range("B5").Offset(G_closest, 0).value
            
            '=OFFSET(sim_limits0805!$B$11,$D$34,0,1,1)
            B_AB_closest = sheets("sim_limits0805").Range("B11").Offset(AB_closest, 0).value
            
            '=OFFSET(sim_limits0805!$B$17,$D$35,0,1,1)
            B_GA_closest = sheets("sim_limits0805").Range("B17").Offset(GA_closest, 0).value
            
            '=OFFSET(sim_limits0805!$B$24,$D$28,0,1,1)
            H1_h1_low = sheets("sim_limits0805").Range("B24").Offset(h1_low, 0).value
            
            '=OFFSET(sim_limits0805!$B$24,$D$32,0,1,1)
            H1_h1_high = sheets("sim_limits0805").Range("B24").Offset(h1_high_bound, 0).value
            
            '=IF($D22^2 < ($D48*$D49),$D28,$D32)
            If h1 ^ 2 < H1_h1_low * H1_h1_high Then
                h1_closest = h1_low
            Else
                h1_closest = h1_high_bound
            End If
            
            '=OFFSET(sim_limits0805!$B$24,$D$36,0,1,1)
            H1_h1_closest = sheets("sim_limits0805").Range("B24").Offset(h1_closest, 0).value
        
        Case "1206"
            '=OFFSET(sim_limits1206!$B$5,$D$33,0,1,1)
            B_G_closest = sheets("sim_limits1206").Range("B5").Offset(G_closest, 0).value
            
            '=OFFSET(sim_limits1206!$B$11,$D$34,0,1,1)
            B_AB_closest = sheets("sim_limits1206").Range("B11").Offset(AB_closest, 0).value
            
            '=OFFSET(sim_limits1206!$B$17,$D$35,0,1,1)
            B_GA_closest = sheets("sim_limits1206").Range("B17").Offset(GA_closest, 0).value
            
            '=OFFSET(sim_limits1206!$B$24,$D$28,0,1,1)
            H1_h1_low = sheets("sim_limits1206").Range("B24").Offset(h1_low, 0).value
            
            '=OFFSET(sim_limits1206!$B$24,$D$32,0,1,1)
            H1_h1_high = sheets("sim_limits1206").Range("B24").Offset(h1_high_bound, 0).value
            
            '=IF($D22^2 < ($D48*$D49),$D28,$D32)
            If h1 ^ 2 < H1_h1_low * H1_h1_high Then
                h1_closest = h1_low
            Else
                h1_closest = h1_high_bound
            End If
            
            '=OFFSET(sim_limits1206!$B$24,$D$36,0,1,1)
            H1_h1_closest = sheets("sim_limits1206").Range("B24").Offset(h1_closest, 0).value

        Case "1210"
            '=OFFSET(sim_limits1210!$B$5,$D$33,0,1,1)
            B_G_closest = sheets("sim_limits1210").Range("B5").Offset(G_closest, 0).value
            
            '=OFFSET(sim_limits1210!$B$11,$D$34,0,1,1)
            B_AB_closest = sheets("sim_limits1210").Range("B11").Offset(AB_closest, 0).value
            
            '=OFFSET(sim_limits1210!$B$17,$D$35,0,1,1)
            B_GA_closest = sheets("sim_limits1210").Range("B17").Offset(GA_closest, 0).value
            
            '=OFFSET(sim_limits1210!$B$24,$D$28,0,1,1)
            H1_h1_low = sheets("sim_limits1210").Range("B24").Offset(h1_low, 0).value
            
            '=OFFSET(sim_limits1210!$B$24,$D$32,0,1,1)
            H1_h1_high = sheets("sim_limits1210").Range("B24").Offset(h1_high_bound, 0).value
            
            '=IF($D22^2 < ($D48*$D49),$D28,$D32)
            If h1 ^ 2 < H1_h1_low * H1_h1_high Then
                h1_closest = h1_low
            Else
                h1_closest = h1_high_bound
            End If
            
            '=OFFSET(sim_limits1210!$B$24,$D$36,0,1,1)
            H1_h1_closest = sheets("sim_limits1210").Range("B24").Offset(h1_closest, 0).value

    End Select
    
    '=SUM(X2Y_Mount!$D$38,X2Y_Mount!$D$47)
    Dim H2_h2_top As Variant
    H2_h2_top = t + C1
    
    '=SUM(X2Y_Mount!$D$38,X2Y_Mount!$D$48)
    Dim H2_h2_bottom As Variant
    H2_h2_bottom = t + C2
    
    Dim LH1(3, 7) As Double
        
    Select Case cap_type
        Case "603"
            '=$D$34*4+$D$35*16+$D$36*48
            '=$D$34*4+$D$35*16+$D$36*48
            LH1(0, 0) = AB_closest * 4 + GA_closest * 16 + h1_closest * 48
            '=193+$D$33*4+$D$35*16+$D$36*48
            '=193+$D$33*4+$D$35*16+$D$36*48
            LH1(1, 0) = 193 + G_closest * 4 + GA_closest * 16 + h1_closest * 48
            
            '=386+$D$33*4+$D$34*16+$D$36*48
            LH1(2, 0) = 386 + G_closest * 4 + AB_closest * 16 + h1_closest * 48
            '=579+$D$33*4+$D$34*16+$D$35*48
            '=579+$D$33*4+$D$34*16+$D$35*48
            LH1(3, 0) = 579 + G_closest * 4 + AB_closest * 16 + GA_closest * 48
            
            '=OFFSET(LH10603!$N$5,$C59,0,1,1)
            LH1(0, 1) = sheets("LH10603").Range("N5").Offset(LH1(0, 0), 0).value
                
            '=OFFSET(LH10603!$N$5,$C60,0,1,1)
            LH1(1, 1) = sheets("LH10603").Range("N5").Offset(LH1(1, 0), 0).value
            
            '=OFFSET(LH10603!$N$5,$C61,0,1,1)
            LH1(2, 1) = sheets("LH10603").Range("N5").Offset(LH1(2, 0), 0).value
            
            '=OFFSET(LH10603!$N$5,$C62,0,1,1)
            LH1(3, 1) = sheets("LH10603").Range("N5").Offset(LH1(3, 0), 0).value
            
            '=OFFSET(LH10603!$N$5,$C59,1,1,1)
            LH1(0, 2) = sheets("LH10603").Range("N5").Offset(LH1(0, 0), 1).value
            
            '=OFFSET(LH10603!$N$5,$C60,1,1,1)
            LH1(1, 2) = sheets("LH10603").Range("N5").Offset(LH1(1, 0), 1).value
            
            '=OFFSET(LH10603!$N$5,$C61,1,1,1)
            LH1(2, 2) = sheets("LH10603").Range("N5").Offset(LH1(2, 0), 1).value
            
            '=OFFSET(LH10603!$N$5,$C62,1,1,1)
            LH1(3, 2) = sheets("LH10603").Range("N5").Offset(LH1(3, 0), 1).value
            
            '=OFFSET(LH10603!$N$5,$C59,2,1,1)
            LH1(0, 3) = sheets("LH10603").Range("N5").Offset(LH1(0, 0), 2).value
            
            '=OFFSET(LH10603!$N$5,$C60,2,1,1)
            LH1(1, 3) = sheets("LH10603").Range("N5").Offset(LH1(1, 0), 2).value
            
            '=OFFSET(LH10603!$N$5,$C61,2,1,1)
            LH1(2, 3) = sheets("LH10603").Range("N5").Offset(LH1(2, 0), 2).value
            
            '=OFFSET(LH10603!$N$5,$C62,2,1,1)
            LH1(3, 3) = sheets("LH10603").Range("N5").Offset(LH1(3, 0), 2).value
            
            '=OFFSET(LH10603!$N$5,$C59,3,1,1)
            LH1(0, 4) = sheets("LH10603").Range("N5").Offset(LH1(0, 0), 3).value
            
            '=OFFSET(LH10603!$N$5,$C60,3,1,1)
            LH1(1, 4) = sheets("LH10603").Range("N5").Offset(LH1(1, 0), 3).value
            
            '=OFFSET(LH10603!$N$5,$C61,3,1,1)
            LH1(2, 4) = sheets("LH10603").Range("N5").Offset(LH1(2, 0), 3).value
            
            '=OFFSET(LH10603!$N$5,$C62,3,1,1)
            LH1(3, 4) = sheets("LH10603").Range("N5").Offset(LH1(3, 0), 3).value
            
            '=OFFSET( LH10603!$N$5,$C62,4,1,1)
            LH1(3, 5) = sheets("LH10603").Range("N5").Offset(LH1(3, 0), 4).value
        
        Case "805"
            '=64+4*INT(($D$33+$D$35*4+$D$36*16)/4)
            LH1(0, 0) = 64 + 4 * Int((G_closest + 4 * GA_closest + 16 * h1_closest) / 4)
                        
            '=64+4*INT(($D$34+$D$35*4+$D$36*16)/4)
            LH1(1, 0) = 64 + 4 * Int((AB_closest + GA_closest * 4 + h1_closest * 16) / 4)
                        
            '=$D$33*4+4*INT(($D$35+$D$36*16)/4)
            LH1(2, 0) = 4 * G_closest + 4 * Int((GA_closest + 16 * h1_closest) / 4)
            
            '=128+4*INT(($D$33*16+$D$35*4+$D$36)/4)
            LH1(3, 0) = 128 + 4 * Int((G_closest * 16 + GA_closest * 4 + h1_closest) / 4)
                        
            '=OFFSET(LH10603!$N$5,$C59,0,1,1)
            LH1(0, 1) = sheets("LH10805").Range("N5").Offset(LH1(0, 0), 0).value
                
            '=OFFSET(LH10805!$N$5,$C60,0,1,1)
            LH1(1, 1) = sheets("LH10805").Range("N5").Offset(LH1(1, 0), 0).value
            
            '=OFFSET(LH10805!$N$5,$C61,0,1,1)
            LH1(2, 1) = sheets("LH10805").Range("N5").Offset(LH1(2, 0), 0).value
            
            '=OFFSET(LH10805!$N$5,$C62,0,1,1)
            LH1(3, 1) = sheets("LH10805").Range("N5").Offset(LH1(3, 0), 0).value
            
            '=OFFSET(LH10805!$N$5,$C59,1,1,1)
            LH1(0, 2) = sheets("LH10805").Range("N5").Offset(LH1(0, 0), 1).value
            
            '=OFFSET(LH10805!$N$5,$C60,1,1,1)
            LH1(1, 2) = sheets("LH10805").Range("N5").Offset(LH1(1, 0), 1).value
            
            '=OFFSET(LH10805!$N$5,$C61,1,1,1)
            LH1(2, 2) = sheets("LH10805").Range("N5").Offset(LH1(2, 0), 1).value
            
            '=OFFSET(LH10805!$N$5,$C62,1,1,1)
            LH1(3, 2) = sheets("LH10805").Range("N5").Offset(LH1(3, 0), 1).value
            
            '=OFFSET(LH10805!$N$5,$C59,2,1,1)
            LH1(0, 3) = sheets("LH10805").Range("N5").Offset(LH1(0, 0), 2).value
            
            '=OFFSET(LH10805!$N$5,$C60,2,1,1)
            LH1(1, 3) = sheets("LH10805").Range("N5").Offset(LH1(1, 0), 2).value
            
            '=OFFSET(LH10805!$N$5,$C61,2,1,1)
            LH1(2, 3) = sheets("LH10805").Range("N5").Offset(LH1(2, 0), 2).value
            
            '=OFFSET(LH10805!$N$5,$C62,2,1,1)
            LH1(3, 3) = sheets("LH10805").Range("N5").Offset(LH1(3, 0), 2).value
            
            '=OFFSET(LH10805!$N$5,$C59,3,1,1)
            LH1(0, 4) = sheets("LH10805").Range("N5").Offset(LH1(0, 0), 3).value
            
            '=OFFSET(LH10805!$N$5,$C60,3,1,1)
            LH1(1, 4) = sheets("LH10805").Range("N5").Offset(LH1(1, 0), 3).value
            
            '=OFFSET(LH10805!$N$5,$C61,3,1,1)
            LH1(2, 4) = sheets("LH10805").Range("N5").Offset(LH1(2, 0), 3).value
            
            '=OFFSET(LH10805!$N$5,$C62,3,1,1)
            LH1(3, 4) = sheets("LH10805").Range("N5").Offset(LH1(3, 0), 3).value
            
            '=OFFSET( LH10805!$N$5,$C$62,4,1,1)
            LH1(3, 5) = sheets("LH10805").Range("N5").Offset(LH1(3, 0), 4).value
        
        Case "1206"
            '=64+4*INT(($D$33+$D$35*4+$D$36*16)/4)
            LH1(0, 0) = 64 + 4 * Int((G_closest + 4 * GA_closest + 16 * h1_closest) / 4)
                        
            '=64+4*INT(($D$34+$D$35*4+$D$36*16)/4)
            LH1(1, 0) = 64 + 4 * Int((AB_closest + GA_closest * 4 + h1_closest * 16) / 4)
                        
            '=$D$33*4+4*INT(($D$35+$D$36*16)/4)
            LH1(2, 0) = 4 * G_closest + 4 * Int((GA_closest + 16 * h1_closest) / 4)
            
            '=128+4*INT(($D$33*16+$D$35*4+$D$36)/4)
            LH1(3, 0) = 128 + 4 * Int((G_closest * 16 + GA_closest * 4 + h1_closest) / 4)
                        
            '=OFFSET(LH11206!$N$5,$C59,0,1,1)
            LH1(0, 1) = sheets("LH11206").Range("N5").Offset(LH1(0, 0), 0).value
                
            '=OFFSET(LH11206!$N$5,$C60,0,1,1)
            LH1(1, 1) = sheets("LH11206").Range("N5").Offset(LH1(1, 0), 0).value
            
            '=OFFSET(LH11206!$N$5,$C61,0,1,1)
            LH1(2, 1) = sheets("LH11206").Range("N5").Offset(LH1(2, 0), 0).value
            
            '=OFFSET(LH11206!$N$5,$C62,0,1,1)
            LH1(3, 1) = sheets("LH11206").Range("N5").Offset(LH1(3, 0), 0).value
            
            '=OFFSET(LH11206!$N$5,$C59,1,1,1)
            LH1(0, 2) = sheets("LH11206").Range("N5").Offset(LH1(0, 0), 1).value
            
            '=OFFSET(LH11206!$N$5,$C60,1,1,1)
            LH1(1, 2) = sheets("LH11206").Range("N5").Offset(LH1(1, 0), 1).value
            
            '=OFFSET(LH11206!$N$5,$C61,1,1,1)
            LH1(2, 2) = sheets("LH11206").Range("N5").Offset(LH1(2, 0), 1).value
            
            '=OFFSET(LH11206!$N$5,$C62,1,1,1)
            LH1(3, 2) = sheets("LH11206").Range("N5").Offset(LH1(3, 0), 1).value
            
            '=OFFSET(LH11206!$N$5,$C59,2,1,1)
            LH1(0, 3) = sheets("LH11206").Range("N5").Offset(LH1(0, 0), 2).value
            
            '=OFFSET(LH11206!$N$5,$C60,2,1,1)
            LH1(1, 3) = sheets("LH11206").Range("N5").Offset(LH1(1, 0), 2).value
            
            '=OFFSET(LH11206!$N$5,$C61,2,1,1)
            LH1(2, 3) = sheets("LH11206").Range("N5").Offset(LH1(2, 0), 2).value
            
            '=OFFSET(LH11206!$N$5,$C62,2,1,1)
            LH1(3, 3) = sheets("LH11206").Range("N5").Offset(LH1(3, 0), 2).value
            
            '=OFFSET(LH11206!$N$5,$C59,3,1,1)
            LH1(0, 4) = sheets("LH11206").Range("N5").Offset(LH1(0, 0), 3).value
            
            '=OFFSET(LH11206!$N$5,$C60,3,1,1)
            LH1(1, 4) = sheets("LH11206").Range("N5").Offset(LH1(1, 0), 3).value
            
            '=OFFSET(LH11206!$N$5,$C61,3,1,1)
            LH1(2, 4) = sheets("LH11206").Range("N5").Offset(LH1(2, 0), 3).value
            
            '=OFFSET(LH11206!$N$5,$C62,3,1,1)
            LH1(3, 4) = sheets("LH11206").Range("N5").Offset(LH1(3, 0), 3).value
            
            '=OFFSET( LH11206!$N$5,$C62,4,1,1)
            LH1(3, 5) = sheets("LH11206").Range("N5").Offset(LH1(3, 0), 4).value
        
        Case "1210"
            '=64+4*INT(($D$33+$D$35*4+$D$36*16)/4)
            LH1(0, 0) = 64 + 4 * Int((G_closest + 4 * GA_closest + 16 * h1_closest) / 4)
                        
            '=64+4*INT(($D$34+$D$35*4+$D$36*16)/4)
            LH1(1, 0) = 64 + 4 * Int((AB_closest + GA_closest * 4 + h1_closest * 16) / 4)
                        
            '=$D$33*4+4*INT(($D$35+$D$36*16)/4)
            LH1(2, 0) = 4 * G_closest + 4 * Int((GA_closest + 16 * h1_closest) / 4)
            
            '=128+4*INT(($D$33*16+$D$35*4+$D$36)/4)
            LH1(3, 0) = 128 + 4 * Int((G_closest * 16 + GA_closest * 4 + h1_closest) / 4)
            
            '=OFFSET(LH11206!$N$5,$C59,0,1,1)
            LH1(0, 1) = sheets("LH11210").Range("N5").Offset(LH1(0, 0), 0).value
                
            '=OFFSET(LH11210!$N$5,$C60,0,1,1)
            LH1(1, 1) = sheets("LH11210").Range("N5").Offset(LH1(1, 0), 0).value
            
            '=OFFSET(LH11210!$N$5,$C61,0,1,1)
            LH1(2, 1) = sheets("LH11210").Range("N5").Offset(LH1(2, 0), 0).value
            
            '=OFFSET(LH11210!$N$5,$C62,0,1,1)
            LH1(3, 1) = sheets("LH11210").Range("N5").Offset(LH1(3, 0), 0).value
            
            '=OFFSET(LH11210!$N$5,$C59,1,1,1)
            LH1(0, 2) = sheets("LH11210").Range("N5").Offset(LH1(0, 0), 1).value
            
            '=OFFSET(LH11210!$N$5,$C60,1,1,1)
            LH1(1, 2) = sheets("LH11210").Range("N5").Offset(LH1(1, 0), 1).value
            
            '=OFFSET(LH11210!$N$5,$C61,1,1,1)
            LH1(2, 2) = sheets("LH11210").Range("N5").Offset(LH1(2, 0), 1).value
            
            '=OFFSET(LH11210!$N$5,$C62,1,1,1)
            LH1(3, 2) = sheets("LH11210").Range("N5").Offset(LH1(3, 0), 1).value
            
            '=OFFSET(LH11210!$N$5,$C59,2,1,1)
            LH1(0, 3) = sheets("LH11210").Range("N5").Offset(LH1(0, 0), 2).value
            
            '=OFFSET(LH11210!$N$5,$C60,2,1,1)
            LH1(1, 3) = sheets("LH11210").Range("N5").Offset(LH1(1, 0), 2).value
            
            '=OFFSET(LH11210!$N$5,$C61,2,1,1)
            LH1(2, 3) = sheets("LH11210").Range("N5").Offset(LH1(2, 0), 2).value
            
            '=OFFSET(LH11210!$N$5,$C62,2,1,1)
            LH1(3, 3) = sheets("LH11210").Range("N5").Offset(LH1(3, 0), 2).value
            
            '=OFFSET(LH11210!$N$5,$C59,3,1,1)
            LH1(0, 4) = sheets("LH11210").Range("N5").Offset(LH1(0, 0), 3).value
            
            '=OFFSET(LH11210!$N$5,$C60,3,1,1)
            LH1(1, 4) = sheets("LH11210").Range("N5").Offset(LH1(1, 0), 3).value
            
            '=OFFSET(LH11210!$N$5,$C61,3,1,1)
            LH1(2, 4) = sheets("LH11210").Range("N5").Offset(LH1(2, 0), 3).value
            
            '=OFFSET(LH11210!$N$5,$C62,3,1,1)
            LH1(3, 4) = sheets("LH11210").Range("N5").Offset(LH1(3, 0), 3).value
            
            '=OFFSET( LH11210!$N$5,$C62,4,1,1)
            LH1(3, 5) = sheets("LH11210").Range("N5").Offset(LH1(3, 0), 4).value
    
    End Select
    
    
    
    '=$D$19^3*$D59+$D$19^2*$E59+$D$19*$F59+$G59
    LH1(0, 6) = G_Vias_limit ^ 3 * LH1(0, 1) + G_Vias_limit ^ 2 * LH1(0, 2) + G_Vias_limit * LH1(0, 3) + LH1(0, 4)
    
    '=$D$20^3*$D60+$D$20^2*$E60+$D$20*$F60+$G60
    LH1(1, 6) = AB_Vias_limit ^ 3 * LH1(1, 1) + AB_Vias_limit ^ 2 * LH1(1, 2) + AB_Vias_limit * LH1(1, 3) + LH1(1, 4)
    
    '=$D$21^3*$D61+$D$21^2*$E61+$D$21*$F61+$G61
    LH1(2, 6) = GA_Vias_limit ^ 3 * LH1(2, 1) + GA_Vias_limit ^ 2 * LH1(2, 2) + GA_Vias_limit * LH1(2, 3) + LH1(2, 4)
    
    '=$D$23^3*$D62+$D$23^2*$E62+$D$23*$F62+$G62+$D$24*$H62
    LH1(3, 6) = h1_limit ^ 3 * LH1(3, 1) + h1_limit ^ 2 * LH1(3, 2) + h1_limit * LH1(3, 3) + LH1(3, 4) + h1_excess * LH1(3, 5)
    
    '=I59^2
    LH1(0, 7) = LH1(0, 6) ^ 2
    LH1(1, 7) = LH1(1, 6) ^ 2
    LH1(2, 7) = LH1(2, 6) ^ 2
    LH1(3, 7) = LH1(3, 6) ^ 2
    
    Dim LH1_avg As Variant
    LH1_avg = ((LH1(0, 7) + LH1(1, 7) + LH1(2, 7) + LH1(3, 7)) / 4) ^ 0.5
    
    Dim LH2(2, 7) As Double
    
    Select Case cap_type
        Case "603"
            '=$D$34*4+$D$35*16
            LH2(0, 0) = AB_closest * 4 + GA_closest * 16
            
            '=49+$D$33*4+$D$35*16
            LH2(1, 0) = 49 + G_closest * 4 + GA_closest * 16
            
            '=98+$D$33*4+$D$34*16
            LH2(2, 0) = 98 + G_closest * 4 + AB_closest * 16
            
            '=OFFSET(LH20603!$M$4,$C65,0,1,1)
            LH2(0, 1) = sheets("LH20603").Range("M4").Offset(LH2(0, 0), 0).value
            
            '=OFFSET(LH20603!$M$4,$C66,0,1,1)
            LH2(1, 1) = sheets("LH20603").Range("M4").Offset(LH2(1, 0), 0).value
            
            '=OFFSET(LH20603!$M$4,$C67,0,1,1)
            LH2(2, 1) = sheets("LH20603").Range("M4").Offset(LH2(2, 0), 0).value
            
            '=OFFSET(LH20603!$M$4,$C65,1,1,1)
            LH2(0, 2) = sheets("LH20603").Range("M4").Offset(LH2(0, 0), 1).value
            
            '=OFFSET(LH20603!$M$4,$C66,1,1,1)
            LH2(1, 2) = sheets("LH20603").Range("M4").Offset(LH2(1, 0), 1).value
            
            '=OFFSET(LH20603!$M$4,$C67,1,1,1)
            LH2(2, 2) = sheets("LH20603").Range("M4").Offset(LH2(2, 0), 1).value
            
            '=OFFSET(LH20603!$M$4,$C65,2,1,1)
            LH2(0, 3) = sheets("LH20603").Range("M4").Offset(LH2(0, 0), 2).value
            
            '=OFFSET(LH20603!$M$4,$C66,2,1,1)
            LH2(1, 3) = sheets("LH20603").Range("M4").Offset(LH2(1, 0), 2).value
            
            '=OFFSET(LH20603!$M$4,$C67,2,1,1)
            LH2(2, 3) = sheets("LH20603").Range("M4").Offset(LH2(2, 0), 2).value
            
            '=OFFSET(LH20603!$M$4,$C65,3,1,1)
            LH2(0, 4) = sheets("LH20603").Range("M4").Offset(LH2(0, 0), 3).value
            
            '=OFFSET(LH20603!$M$4,$C66,3,1,1)
            LH2(1, 4) = sheets("LH20603").Range("M4").Offset(LH2(1, 0), 3).value
            
            '=OFFSET(LH20603!$M$4,$C67,3,1,1)
            LH2(2, 4) = sheets("LH20603").Range("M4").Offset(LH2(2, 0), 3).value
            
        Case "805"
            '=16+4*INT(($D$33+$D$35*4)/4)
            LH2(0, 0) = 16 + 4 * Int(G_closest / 4 + GA_closest)
            
            '=16+4*INT(($D$34+$D$35*4)/4)
            LH2(1, 0) = 16 + 4 * Int(AB_closest / 4 + GA_closest)
                        
            '=4*INT(($D$33*4+$D$35)/4)
            LH2(2, 0) = 4 * Int(G_closest + GA_closest / 4)
                        
            '=OFFSET(LH20603!$M$4,$C65,0,1,1)
            LH2(0, 1) = sheets("LH20805").Range("M4").Offset(LH2(0, 0), 0).value
            
            '=OFFSET(LH20805!$M$4,$C66,0,1,1)
            LH2(1, 1) = sheets("LH20805").Range("M4").Offset(LH2(1, 0), 0).value
            
            '=OFFSET(LH20805!$M$4,$C67,0,1,1)
            LH2(2, 1) = sheets("LH20805").Range("M4").Offset(LH2(2, 0), 0).value
            
            '=OFFSET(LH20805!$M$4,$C65,1,1,1)
            LH2(0, 2) = sheets("LH20805").Range("M4").Offset(LH2(0, 0), 1).value
            
            '=OFFSET(LH20805!$M$4,$C66,1,1,1)
            LH2(1, 2) = sheets("LH20805").Range("M4").Offset(LH2(1, 0), 1).value
            
            '=OFFSET(LH20805!$M$4,$C67,1,1,1)
            LH2(2, 2) = sheets("LH20805").Range("M4").Offset(LH2(2, 0), 1).value
            
            '=OFFSET(LH20805!$M$4,$C65,2,1,1)
            LH2(0, 3) = sheets("LH20805").Range("M4").Offset(LH2(0, 0), 2).value
            
            '=OFFSET(LH20805!$M$4,$C66,2,1,1)
            LH2(1, 3) = sheets("LH20805").Range("M4").Offset(LH2(1, 0), 2).value
            
            '=OFFSET(LH20805!$M$4,$C67,2,1,1)
            LH2(2, 3) = sheets("LH20805").Range("M4").Offset(LH2(2, 0), 2).value
            
            '=OFFSET(LH20805!$M$4,$C65,3,1,1)
            LH2(0, 4) = sheets("LH20805").Range("M4").Offset(LH2(0, 0), 3).value
            
            '=OFFSET(LH20805!$M$4,$C66,3,1,1)
            LH2(1, 4) = sheets("LH20805").Range("M4").Offset(LH2(1, 0), 3).value
            
            '=OFFSET(LH20805!$M$4,$C67,3,1,1)
            LH2(2, 4) = sheets("LH20805").Range("M4").Offset(LH2(2, 0), 3).value
            
        Case "1206"
            '=16+4*INT(($D$33+$D$35*4)/4)
            LH2(0, 0) = 16 + 4 * Int(G_closest / 4 + GA_closest)
            
            '=16+4*INT(($D$34+$D$35*4)/4)
            LH2(1, 0) = 16 + 4 * Int(AB_closest / 4 + GA_closest)
                        
            '=4*INT(($D$33*4+$D$35)/4)
            LH2(2, 0) = 4 * Int(G_closest + GA_closest / 4)
            
            '=OFFSET(LH21206!$M$4,$C65,0,1,1)
            LH2(0, 1) = sheets("LH21206").Range("M4").Offset(LH2(0, 0), 0).value
            
            '=OFFSET(LH21206!$M$4,$C66,0,1,1)
            LH2(1, 1) = sheets("LH21206").Range("M4").Offset(LH2(1, 0), 0).value
            
            '=OFFSET(LH21206!$M$4,$C67,0,1,1)
            LH2(2, 1) = sheets("LH21206").Range("M4").Offset(LH2(2, 0), 0).value
            
            '=OFFSET(LH21206!$M$4,$C65,1,1,1)
            LH2(0, 2) = sheets("LH21206").Range("M4").Offset(LH2(0, 0), 1).value
            
            '=OFFSET(LH21206!$M$4,$C66,1,1,1)
            LH2(1, 2) = sheets("LH21206").Range("M4").Offset(LH2(1, 0), 1).value
            
            '=OFFSET(LH21206!$M$4,$C67,1,1,1)
            LH2(2, 2) = sheets("LH21206").Range("M4").Offset(LH2(2, 0), 1).value
            
            '=OFFSET(LH21206!$M$4,$C65,2,1,1)
            LH2(0, 3) = sheets("LH21206").Range("M4").Offset(LH2(0, 0), 2).value
            
            '=OFFSET(LH21206!$M$4,$C66,2,1,1)
            LH2(1, 3) = sheets("LH21206").Range("M4").Offset(LH2(1, 0), 2).value
            
            '=OFFSET(LH21206!$M$4,$C67,2,1,1)
            LH2(2, 3) = sheets("LH21206").Range("M4").Offset(LH2(2, 0), 2).value
            
            '=OFFSET(LH21206!$M$4,$C65,3,1,1)
            LH2(0, 4) = sheets("LH21206").Range("M4").Offset(LH2(0, 0), 3).value
            
            '=OFFSET(LH21206!$M$4,$C66,3,1,1)
            LH2(1, 4) = sheets("LH21206").Range("M4").Offset(LH2(1, 0), 3).value
            
            '=OFFSET(LH21206!$M$4,$C67,3,1,1)
            LH2(2, 4) = sheets("LH21206").Range("M4").Offset(LH2(2, 0), 3).value
            
        Case "1210"
            '=16+4*INT(($D$33+$D$35*4)/4)
            LH2(0, 0) = 16 + 4 * Int(G_closest / 4 + GA_closest)
            
            '=16+4*INT(($D$34+$D$35*4)/4)
            LH2(1, 0) = 16 + 4 * Int(AB_closest / 4 + GA_closest)
                        
            '=4*INT(($D$33*4+$D$35)/4)
            LH2(2, 0) = 4 * Int(G_closest + GA_closest / 4)
            
            '=OFFSET(LH21210!$M$4,$C65,0,1,1)
            LH2(0, 1) = sheets("LH21210").Range("M4").Offset(LH2(0, 0), 0).value
            
            '=OFFSET(LH21210!$M$4,$C66,0,1,1)
            LH2(1, 1) = sheets("LH21210").Range("M4").Offset(LH2(1, 0), 0).value
            
            '=OFFSET(LH21210!$M$4,$C67,0,1,1)
            LH2(2, 1) = sheets("LH21210").Range("M4").Offset(LH2(2, 0), 0).value
            
            '=OFFSET(LH21210!$M$4,$C65,1,1,1)
            LH2(0, 2) = sheets("LH21210").Range("M4").Offset(LH2(0, 0), 1).value
            
            '=OFFSET(LH21210!$M$4,$C66,1,1,1)
            LH2(1, 2) = sheets("LH21210").Range("M4").Offset(LH2(1, 0), 1).value
            
            '=OFFSET(LH21210!$M$4,$C67,1,1,1)
            LH2(2, 2) = sheets("LH21210").Range("M4").Offset(LH2(2, 0), 1).value
            
            '=OFFSET(LH21210!$M$4,$C65,2,1,1)
            LH2(0, 3) = sheets("LH21210").Range("M4").Offset(LH2(0, 0), 2).value
            
            '=OFFSET(LH21210!$M$4,$C66,2,1,1)
            LH2(1, 3) = sheets("LH21210").Range("M4").Offset(LH2(1, 0), 2).value
            
            '=OFFSET(LH21210!$M$4,$C67,2,1,1)
            LH2(2, 3) = sheets("LH21210").Range("M4").Offset(LH2(2, 0), 2).value
            
            '=OFFSET(LH21210!$M$4,$C65,3,1,1)
            LH2(0, 4) = sheets("LH21210").Range("M4").Offset(LH2(0, 0), 3).value
            
            '=OFFSET(LH21210!$M$4,$C66,3,1,1)
            LH2(1, 4) = sheets("LH21210").Range("M4").Offset(LH2(1, 0), 3).value
            
            '=OFFSET(LH21210!$M$4,$C67,3,1,1)
            LH2(2, 4) = sheets("LH21210").Range("M4").Offset(LH2(2, 0), 3).value
    End Select
    
    '=$D$19^3*$D65+$D$19^2*$E65+$D$19*$F65+$G65
    LH2(0, 6) = G_Vias_limit ^ 3 * LH2(0, 1) + G_Vias_limit ^ 2 * LH2(0, 2) + G_Vias_limit * LH2(0, 3) + LH2(0, 4)
    
    '=$D$20^3*$D66+$D$20^2*$E66+$D$20*$F66+$G66
    LH2(1, 6) = AB_Vias_limit ^ 3 * LH2(1, 1) + AB_Vias_limit ^ 2 * LH2(1, 2) + AB_Vias_limit * LH2(1, 3) + LH2(1, 4)
    
    '=$D$21^3*$D67+$D$21^2*$E67+$D$21*$F67+$G67
    LH2(2, 6) = GA_Vias_limit ^ 3 * LH2(2, 1) + GA_Vias_limit ^ 2 * LH2(2, 2) + GA_Vias_limit * LH2(2, 3) + LH2(2, 4)
    
    '=I65^2
    LH2(0, 7) = LH2(0, 6) ^ 2
    LH2(1, 7) = LH2(1, 6) ^ 2
    LH2(2, 7) = LH2(2, 6) ^ 2

    Dim LH2_avg As Variant
    LH2_avg = ((LH2(0, 7) + LH2(1, 7) + LH2(2, 7)) / 3) ^ 0.5

    '=LN((($D$19/2-$D$20/2)^2 + $D$21^2)^0.5/X2Y_Mount!$D$41)/LN((($D$19/2-$D$20/2)^2 + $D$21^2)^0.5/5)
    Dim ViaDiameterFactor As Double
    ViaDiameterFactor = Log(((G_Vias_limit / 2 - AB_Vias_limit / 2) ^ 2 + GA_Vias_limit ^ 2) ^ 0.5 / r) / Log(((G_Vias_limit / 2 - AB_Vias_limit / 2) ^ 2 + GA_Vias_limit ^ 2) ^ 0.5 / 5)
        
    '=(Calc0603!$J$63+Calc0603!$D$53*Calc0603!$J$68)*Calc0603!$D$72
    If Cap_Position = 1 Then
        CalculateX2YMount = (LH1_avg + H2_h2_top * LH2_avg) * ViaDiameterFactor * 1000000000
    '=(Calc0603!$J$63+Calc0603!$D$54*Calc0603!$J$68)*Calc0603!$D$72
    Else
        CalculateX2YMount = (LH1_avg + H2_h2_bottom * LH2_avg) * ViaDiameterFactor * 1000000000
    End If
End Function

Attribute VB_Name = "wksBGAVia"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSaveCustom, 13862, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreCustom, 13863, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreDefault, 13864, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdSaveCustom_Click()
    Call StabilizeButton(cmdSaveCustom)
    Call BGA_SaveCustom
End Sub

Private Sub cmdRestoreCustom_Click()
    Call StabilizeButton(cmdRestoreCustom)
    Call BGA_RestoreCustom
End Sub

Private Sub cmdRestoreDefault_Click()
    Call StabilizeButton(cmdRestoreDefault)
    Call BGA_RestoreDefault
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call bga_via_event_handler(target)
End Sub
Attribute VB_Name = "wksBGAVia_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "wksBUILD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdBuildFamilyTab, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdUnhideAllUseful, 4, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdUnhideAll, 5, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdPrepareForRelease, 6, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdSaveToSDrive, 10, 6, MSForms, CommandButton"
Attribute VB_Control = "cmdExportModules, 13, 7, MSForms, CommandButton"
Attribute VB_Control = "cmdImportModules, 14, 8, MSForms, CommandButton"
Option Explicit

Private Sub cmdPrepareForRelease_Click()
    Call StabilizeButton(cmdPrepareForRelease)
    Call prepareForRelease
End Sub

Private Sub cmdSaveToSDrive_Click()
    Call StabilizeButton(cmdSaveToSDrive)
    Call prepareForRelease
    Call SaveToSDrive
End Sub

Private Sub cmdUnhideAll_Click()
    Call StabilizeButton(cmdUnhideAll)
    Call unhideAll
End Sub

Private Sub cmdUnhideAllUseful_Click()
    Call StabilizeButton(cmdUnhideAllUseful)
    Call unhideAllUseful
End Sub

Private Sub cmdExportModules_Click()
    Call StabilizeButton(cmdExportModules)
    Call ExportCodeModules
End Sub

Private Sub cmdImportModules_Click()
    Call StabilizeButton(cmdImportModules)
    Call ImportCodeModules
End Sub

Attribute VB_Name = "wksCalc0603"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksCalc0805"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksCalc1206"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksCalc1210"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksCapMount"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSaveCustom, 26260, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreCustom, 26261, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreDefault, 26262, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdSaveCustom_Click()
    Call StabilizeButton(cmdSaveCustom)
    Call Cap_SaveCustom
End Sub

Private Sub cmdRestoreCustom_Click()
    Call StabilizeButton(cmdRestoreCustom)
    Call Cap_RestoreCustom
End Sub

Private Sub cmdRestoreDefault_Click()
    Call StabilizeButton(cmdRestoreDefault)
    Call Cap_RestoreDefault
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call cap_mount_event_handler(target)
End Sub

Attribute VB_Name = "wksCapMount_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksChart"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksEnlargedGraph"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdReturnToDecapSelection, 2, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdReturnToDecapSelection_Click()
    Call StabilizeButton(cmdReturnToDecapSelection)
    sheets("System_Decap").Activate
End Sub
Attribute VB_Name = "wksGuidelines"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "wksIntroduction_pro"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdReturnToSystemDecap, 27661, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdReturnToSystemDecap2, 27663, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdReturnToSystemDecap_Click()
    Call StabilizeButton(cmdReturnToSystemDecap)
    wksSystemDecap.Activate
End Sub

Private Sub cmdReturnToSystemDecap2_Click()
    Call StabilizeButton(cmdReturnToSystemDecap2)
    wksSystemDecap.Activate
End Sub

Attribute VB_Name = "wksIntroduction_std"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdReturnToSystemDecap, 1, 0, MSForms, CommandButton2"
Attribute VB_Control = "cmdReturnToSystemDecap2, 2, 1, MSForms, CommandButton2"
Option Explicit

Private Sub cmdReturnToSystemDecap_Click()
    Call StabilizeButton(cmdReturnToSystemDecap)
    wksSystemDecap.Activate
End Sub

Private Sub cmdReturnToSystemDecap2_Click()
    Call StabilizeButton(cmdReturnToSystemDecap2)
    wksSystemDecap.Activate
End Sub
Attribute VB_Name = "wksLH10603"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH10805"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH11206"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH11210"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH20603"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH20805"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH21206"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLH21210"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLibCustomNew"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLibDefaultNew"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLib_Custom"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLib_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLibrary"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSaveCustom, 9050, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreDefault, 9051, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreCustom, 9052, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdSaveCustom_Click()
    Call StabilizeButton(cmdSaveCustom)
    Call Lib_SaveCustom
End Sub

Private Sub cmdRestoreCustom_Click()
    Call StabilizeButton(cmdRestoreCustom)
    Call Lib_RestoreCustom
End Sub

Private Sub cmdRestoreDefault_Click()
    Call StabilizeButton(cmdRestoreDefault)
    Call Lib_RestoreDefault
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    LIBRARY.MaybeUpdateDecouplingCapValidationRules True
End Sub
Attribute VB_Name = "wksNotes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksPlaneCap"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSaveCustom, 19022, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreCustom, 19023, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreDefault, 19024, 2, MSForms, CommandButton"
Attribute VB_Control = "SetPlaneRC, 45323, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdSystemDecap, 46174, 4, MSForms, CommandButton"
Option Explicit

Private Sub cmdSaveCustom_Click()
    Call StabilizeButton(cmdSaveCustom)
    Call Plane_SaveCustom
End Sub

Private Sub cmdRestoreCustom_Click()
    Call StabilizeButton(cmdRestoreCustom)
    Call Plane_RestoreCustom
End Sub

Private Sub cmdRestoreDefault_Click()
    Call StabilizeButton(cmdRestoreDefault)
    Call Plane_RestoreDefault
End Sub

Private Sub cmdSystemDecap_Click()
    Call StabilizeButton(cmdSystemDecap)
    wksSystemDecap.Activate
End Sub

Private Sub SetPlaneRC_Click()
    Call StabilizeButton(SetPlaneRC)
    Dim regulatorGroup As String
    regulatorGroup = Range("rngPerRegulatorGroupPlaneRC").value
    
    If Not regulatorGroup = "All" Then
        wksPlaneCap_Default.Range("rngHiddenPlaneR").Cells(Int(regulatorGroup), 1).value = Range("rngPlaneRTotal").value
        wksPlaneCap_Default.Range("rngHiddenPlaneC").Cells(Int(regulatorGroup), 1).value = Range("rngPlaneCTotal").value
    Else
        Dim i As Integer
        For i = 0 To wksPlaneCap_Default.Range("rngHiddenPlaneR").Rows.count
            wksPlaneCap_Default.Range("rngHiddenPlaneR").Cells(i + 1, 1).value = Range("rngPlaneRTotal").value
            wksPlaneCap_Default.Range("rngHiddenPlaneC").Cells(i + 1, 1).value = Range("rngPlaneCTotal").value
        Next
    End If
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call plane_cap_event_handler(target)
End Sub

Private Sub Worksheet_Activate()
    Call plane_cap_activate
End Sub
Attribute VB_Name = "wksPlaneCap_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksReleaseNotes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    RELEASE_NOTES.MaybeUpdateSupportedDevices
End Sub
Attribute VB_Name = "wksSim_limits0603"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSim_limits0805"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSim_limits1206"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSim_limits1210"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksStackup"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdStackupConstruction, 1017, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdImportGeometries, 153, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdGoToSystemDecap, 270, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdGoToSystemDecap_Click()
    Call StabilizeButton(cmdGoToSystemDecap)
    wksSystemDecap.Activate
End Sub

Private Sub cmdImportGeometries_Click()
    Call StabilizeButton(cmdImportGeometries)
    Call import_geometries
End Sub

Private Sub cmdStackupConstruction_Click()
    Call StabilizeButton(cmdStackupConstruction)
    Call stackup_construct
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call stackup_event_handler(target)
End Sub

Private Sub Worksheet_Activate()
    Call stackup_activate
End Sub
Attribute VB_Name = "wksSystemDecap"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRemoveCapRow, 2233, 6, MSForms, CommandButton"
Attribute VB_Control = "cmdAddCapRow, 2232, 7, MSForms, CommandButton"
Attribute VB_Control = "cmdRemoveGroup, 6814, 8, MSForms, CommandButton"
Attribute VB_Control = "cmdAddGroup, 6813, 9, MSForms, CommandButton"
Option Explicit

Const PROTECTION_PASSWORD = "hsioapps"

Private Sub cmdAddCapRow_Click()
    Call StabilizeButton(cmdAddCapRow)
    Call system_decap_add_decoupling_cap_row
End Sub

Private Sub cmdAddGroup_click()
    Call StabilizeButton(cmdAddGroup)
    Call system_decap_add_regulator
End Sub

Private Sub cmdRemoveCapRow_Click()
    Call StabilizeButton(cmdRemoveCapRow)
    Call system_decap_remove_cap_row
End Sub

Private Sub cmdRemoveGroup_Click()
    Call StabilizeButton(cmdRemoveGroup)
    Call system_decap_remove_last_regulator
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call system_decap_event_handler(target)
End Sub

Private Sub Worksheet_Activate()
    Call system_decap_read_lib_data
End Sub
Attribute VB_Name = "wksSystemDecapCustomValues"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSystemDecapOptions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSystem_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksX2YMount"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSaveCustom, 3304, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreCustom, 3305, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdRestoreDefault, 3306, 2, MSForms, CommandButton"
Option Explicit

Private Sub cmdSaveCustom_Click()
    Call StabilizeButton(cmdSaveCustom)
    Call X2Y_SaveCustom
End Sub

Private Sub cmdRestoreCustom_Click()
    Call StabilizeButton(cmdRestoreCustom)
    Call X2Y_RestoreCustom
End Sub

Private Sub cmdRestoreDefault_Click()
    Call StabilizeButton(cmdRestoreDefault)
    Call X2Y_RestoreDefault
End Sub

Private Sub Worksheet_Change(ByVal target As Range)
    Call x2y_mount_event_handler(target)
End Sub
Attribute VB_Name = "wksX2YMount_Default"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' yJ]j
' 8brI
' yJ]j
' 8brI
' ~)mz
' jwez
' rgQz
' rgQz

INQUEST-PP=macro
