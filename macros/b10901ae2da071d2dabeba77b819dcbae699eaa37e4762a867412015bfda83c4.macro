Attribute VB_Name = "CSHA256"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'*******************************************************************************
' MODULE:       CSHA256
' FILENAME:     CSHA256.cls
' AUTHOR:       Phil Fresle
' CREATED:      10-Apr-2001
' COPYRIGHT:    Copyright 2001 Phil Fresle. All Rights Reserved.
'
' DESCRIPTION:
' This class is used to generate a SHA-256 'digest' or 'signature' of a string.
' The SHA-256 algorithm is one of the industry standard methods for generating
' digital signatures. It is generically known as a digest, digital signature,
' one-way encryption, hash or checksum algorithm. A common use for SHA-256 is
' for password encryption as it is one-way in nature, that does not mean that
' your passwords are not free from a dictionary attack. If you are using the
' routine for passwords, you can make it a little more secure by concatenating
' some known random characters to the password before you generate the signature
' and on subsequent tests, so even if a hacker knows you are using SHA-256 for
' your passwords, the random characters will make it harder to dictionary attack.
'
' *** CAUTION ***
' See the comment attached to the SHA256 method below regarding use on systems
' with different character sets.
'
' This is 'free' software with the following restrictions:
'
' You may not redistribute this code as a 'sample' or 'demo'. However, you are free
' to use the source code in your own code, but you may not claim that you created
' the sample code. It is expressly forbidden to sell or profit from this source code
' other than by the knowledge gained or the enhanced value added by your own code.
'
' Use of this software is also done so at your own risk. The code is supplied as
' is without warranty or guarantee of any kind.
'
' Should you wish to commission some derivative work based on this code provided
' here, or any consultancy work, please do not hesitate to contact us.
'
' Web Site:  http://www.frez.co.uk
' E-mail:    sales@frez.co.uk
'
' MODIFICATION HISTORY:
' 10-Apr-2001   Phil Fresle     Initial Version
'*******************************************************************************
Option Explicit


Private m_lOnBits(30)   As Long
Private m_l2Power(30)   As Long
Private K(63)           As Long


Private Const BITS_TO_A_BYTE  As Long = 8
Private Const BYTES_TO_A_WORD As Long = 4
Private Const BITS_TO_A_WORD  As Long = BYTES_TO_A_WORD * BITS_TO_A_BYTE


'*******************************************************************************
' Class_Initialize (SUB)
'*******************************************************************************
Private Sub Class_Initialize()
    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - BITS SET FROM RIGHT
    m_lOnBits(0) = 1            ' 00000000000000000000000000000001
    m_lOnBits(1) = 3            ' 00000000000000000000000000000011
    m_lOnBits(2) = 7            ' 00000000000000000000000000000111
    m_lOnBits(3) = 15           ' 00000000000000000000000000001111
    m_lOnBits(4) = 31           ' 00000000000000000000000000011111
    m_lOnBits(5) = 63           ' 00000000000000000000000000111111
    m_lOnBits(6) = 127          ' 00000000000000000000000001111111
    m_lOnBits(7) = 255          ' 00000000000000000000000011111111
    m_lOnBits(8) = 511          ' 00000000000000000000000111111111
    m_lOnBits(9) = 1023         ' 00000000000000000000001111111111
    m_lOnBits(10) = 2047        ' 00000000000000000000011111111111
    m_lOnBits(11) = 4095        ' 00000000000000000000111111111111
    m_lOnBits(12) = 8191        ' 00000000000000000001111111111111
    m_lOnBits(13) = 16383       ' 00000000000000000011111111111111
    m_lOnBits(14) = 32767       ' 00000000000000000111111111111111
    m_lOnBits(15) = 65535       ' 00000000000000001111111111111111
    m_lOnBits(16) = 131071      ' 00000000000000011111111111111111
    m_lOnBits(17) = 262143      ' 00000000000000111111111111111111
    m_lOnBits(18) = 524287      ' 00000000000001111111111111111111
    m_lOnBits(19) = 1048575     ' 00000000000011111111111111111111
    m_lOnBits(20) = 2097151     ' 00000000000111111111111111111111
    m_lOnBits(21) = 4194303     ' 00000000001111111111111111111111
    m_lOnBits(22) = 8388607     ' 00000000011111111111111111111111
    m_lOnBits(23) = 16777215    ' 00000000111111111111111111111111
    m_lOnBits(24) = 33554431    ' 00000001111111111111111111111111
    m_lOnBits(25) = 67108863    ' 00000011111111111111111111111111
    m_lOnBits(26) = 134217727   ' 00000111111111111111111111111111
    m_lOnBits(27) = 268435455   ' 00001111111111111111111111111111
    m_lOnBits(28) = 536870911   ' 00011111111111111111111111111111
    m_lOnBits(29) = 1073741823  ' 00111111111111111111111111111111
    m_lOnBits(30) = 2147483647  ' 01111111111111111111111111111111

    ' Could have done this with a loop calculating each value, but simply
    ' assigning the values is quicker - POWERS OF 2
    m_l2Power(0) = 1            ' 00000000000000000000000000000001
    m_l2Power(1) = 2            ' 00000000000000000000000000000010
    m_l2Power(2) = 4            ' 00000000000000000000000000000100
    m_l2Power(3) = 8            ' 00000000000000000000000000001000
    m_l2Power(4) = 16           ' 00000000000000000000000000010000
    m_l2Power(5) = 32           ' 00000000000000000000000000100000
    m_l2Power(6) = 64           ' 00000000000000000000000001000000
    m_l2Power(7) = 128          ' 00000000000000000000000010000000
    m_l2Power(8) = 256          ' 00000000000000000000000100000000
    m_l2Power(9) = 512          ' 00000000000000000000001000000000
    m_l2Power(10) = 1024        ' 00000000000000000000010000000000
    m_l2Power(11) = 2048        ' 00000000000000000000100000000000
    m_l2Power(12) = 4096        ' 00000000000000000001000000000000
    m_l2Power(13) = 8192        ' 00000000000000000010000000000000
    m_l2Power(14) = 16384       ' 00000000000000000100000000000000
    m_l2Power(15) = 32768       ' 00000000000000001000000000000000
    m_l2Power(16) = 65536       ' 00000000000000010000000000000000
    m_l2Power(17) = 131072      ' 00000000000000100000000000000000
    m_l2Power(18) = 262144      ' 00000000000001000000000000000000
    m_l2Power(19) = 524288      ' 00000000000010000000000000000000
    m_l2Power(20) = 1048576     ' 00000000000100000000000000000000
    m_l2Power(21) = 2097152     ' 00000000001000000000000000000000
    m_l2Power(22) = 4194304     ' 00000000010000000000000000000000
    m_l2Power(23) = 8388608     ' 00000000100000000000000000000000
    m_l2Power(24) = 16777216    ' 00000001000000000000000000000000
    m_l2Power(25) = 33554432    ' 00000010000000000000000000000000
    m_l2Power(26) = 67108864    ' 00000100000000000000000000000000
    m_l2Power(27) = 134217728   ' 00001000000000000000000000000000
    m_l2Power(28) = 268435456   ' 00010000000000000000000000000000
    m_l2Power(29) = 536870912   ' 00100000000000000000000000000000
    m_l2Power(30) = 1073741824  ' 01000000000000000000000000000000

    ' Just put together the K array once
    K(0) = &H428A2F98
    K(1) = &H71374491
    K(2) = &HB5C0FBCF
    K(3) = &HE9B5DBA5
    K(4) = &H3956C25B
    K(5) = &H59F111F1
    K(6) = &H923F82A4
    K(7) = &HAB1C5ED5
    K(8) = &HD807AA98
    K(9) = &H12835B01
    K(10) = &H243185BE
    K(11) = &H550C7DC3
    K(12) = &H72BE5D74
    K(13) = &H80DEB1FE
    K(14) = &H9BDC06A7
    K(15) = &HC19BF174
    K(16) = &HE49B69C1
    K(17) = &HEFBE4786
    K(18) = &HFC19DC6
    K(19) = &H240CA1CC
    K(20) = &H2DE92C6F
    K(21) = &H4A7484AA
    K(22) = &H5CB0A9DC
    K(23) = &H76F988DA
    K(24) = &H983E5152
    K(25) = &HA831C66D
    K(26) = &HB00327C8
    K(27) = &HBF597FC7
    K(28) = &HC6E00BF3
    K(29) = &HD5A79147
    K(30) = &H6CA6351
    K(31) = &H14292967
    K(32) = &H27B70A85
    K(33) = &H2E1B2138
    K(34) = &H4D2C6DFC
    K(35) = &H53380D13
    K(36) = &H650A7354
    K(37) = &H766A0ABB
    K(38) = &H81C2C92E
    K(39) = &H92722C85
    K(40) = &HA2BFE8A1
    K(41) = &HA81A664B
    K(42) = &HC24B8B70
    K(43) = &HC76C51A3
    K(44) = &HD192E819
    K(45) = &HD6990624
    K(46) = &HF40E3585
    K(47) = &H106AA070
    K(48) = &H19A4C116
    K(49) = &H1E376C08
    K(50) = &H2748774C
    K(51) = &H34B0BCB5
    K(52) = &H391C0CB3
    K(53) = &H4ED8AA4A
    K(54) = &H5B9CCA4F
    K(55) = &H682E6FF3
    K(56) = &H748F82EE
    K(57) = &H78A5636F
    K(58) = &H84C87814
    K(59) = &H8CC70208
    K(60) = &H90BEFFFA
    K(61) = &HA4506CEB
    K(62) = &HBEF9A3F7
    K(63) = &HC67178F2
End Sub


'*******************************************************************************
' LShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' A left shift takes all the set binary bits and moves them left, in-filling
' with zeros in the vacated bits on the right. This function is equivalent to
' the << operator in Java and C++
'*******************************************************************************
Private Function LShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long
    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all.
    If iShiftBits = 0 Then
        LShift = lValue
        Exit Function

    ' A shift of 31 will result in the right most bit becoming the left most
    ' bit and all other bits being cleared
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &H80000000
        Else
            LShift = 0
        End If
        Exit Function

    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    ' If the left most bit that remains will end up in the negative bit
    ' position (&H80000000) we would end up with an overflow if we took the
    ' standard route. We need to strip the left most bit and add it back
    ' afterwards.
    If (lValue And m_l2Power(31 - iShiftBits)) Then

        ' (Value And OnBits(31 - (Shift + 1))) chops off the left most bits that
        ' we are shifting into, but also the left most bit we still want as this
        ' is going to end up in the negative bit marker position (&H80000000).
        ' After the multiplication/shift we Or the result with &H80000000 to
        ' turn the negative bit on.
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) * _
            m_l2Power(iShiftBits)) Or &H80000000

    Else

        ' (Value And OnBits(31-Shift)) chops off the left most bits that we are
        ' shifting into so we do not get an overflow error when we do the
        ' multiplication/shift
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * _
            m_l2Power(iShiftBits))

    End If
End Function


'*******************************************************************************
' RShift (FUNCTION)
'
' PARAMETERS:
' (In) - lValue     - Long    - The value to be shifted
' (In) - iShiftBits - Integer - The number of bits to shift the value by
'
' RETURN VALUE:
' Long - The shifted long integer
'
' DESCRIPTION:
' The right shift of an unsigned long integer involves shifting all the set bits
' to the right and in-filling on the left with zeros. This function is
' equivalent to the >>> operator in Java or the >> operator in C++ when used on
' an unsigned long.
'*******************************************************************************
Private Function RShift(ByVal lValue As Long, _
                        ByVal iShiftBits As Integer) As Long

    ' NOTE: If you can guarantee that the Shift parameter will be in the
    ' range 1 to 30 you can safely strip of this first nested if structure for
    ' speed.
    '
    ' A shift of zero is no shift at all
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function

    ' A shift of 31 will clear all bits and move the left most bit to the right
    ' most bit position
    ElseIf iShiftBits = 31 Then
        If lValue And &H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function

    ' A shift of less than zero or more than 31 is undefined
    ElseIf iShiftBits < 0 Or iShiftBits > 31 Then
        Err.Raise 6
    End If

    ' We do not care about the top most bit or the final bit, the top most bit
    ' will be taken into account in the next stage, the final bit (whether it
    ' is an odd number or not) is being shifted into, so we do not give a jot
    ' about it
    RShift = (lValue And &H7FFFFFFE) \ m_l2Power(iShiftBits)

    ' If the top most bit (&H80000000) was set we need to do things differently
    ' as in a normal VB signed long integer the top most bit is used to indicate
    ' the sign of the number, when it is set it is a negative number, so just
    ' deviding by a factor of 2 as above would not work.
    ' NOTE: (lValue And  &H80000000) is equivalent to (lValue < 0), you could
    ' get a very marginal speed improvement by changing the test to (lValue < 0)
    If (lValue And &H80000000) Then
        ' We take the value computed so far, and then add the left most negative
        ' bit after it has been shifted to the right the appropriate number of
        ' places
        RShift = (RShift Or (&H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function


'*******************************************************************************
' AddUnsigned (FUNCTION)
'
' PARAMETERS:
' (In) - lX - Long - First value
' (In) - lY - Long - Second value
'
' RETURN VALUE:
' Long - Result
'
' DESCRIPTION:
' Adds two potentially large unsigned numbers without overflowing
'*******************************************************************************
Private Function AddUnsigned(ByVal lX As Long, _
                             ByVal lY As Long) As Long
    Dim lX4     As Long
    Dim lY4     As Long
    Dim lX8     As Long
    Dim lY8     As Long
    Dim lResult As Long

    lX8 = lX And &H80000000
    lY8 = lY And &H80000000
    lX4 = lX And &H40000000
    lY4 = lY And &H40000000

    lResult = (lX And &H3FFFFFFF) + (lY And &H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &H40000000 Then
            lResult = lResult Xor &HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function


'*******************************************************************************
' Ch (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Ch(ByVal x As Long, _
                    ByVal y As Long, _
                    ByVal z As Long) As Long
    Ch = ((x And y) Xor ((Not x) And z))
End Function


'*******************************************************************************
' Maj (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Maj(ByVal x As Long, _
                     ByVal y As Long, _
                     ByVal z As Long) As Long
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function


'*******************************************************************************
' S (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (rotate right)
'*******************************************************************************
Private Function s(ByVal x As Long, _
                   ByVal n As Long) As Long
    s = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And m_lOnBits(4)))))
End Function


'*******************************************************************************
' R (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function (just a right shift)
'*******************************************************************************
Private Function r(ByVal x As Long, _
                   ByVal n As Long) As Long
    r = RShift(x, CInt(n And m_lOnBits(4)))
End Function


'*******************************************************************************
' Sigma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma0(ByVal x As Long) As Long
    Sigma0 = (s(x, 2) Xor s(x, 13) Xor s(x, 22))
End Function


'*******************************************************************************
' Sigma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Sigma1(ByVal x As Long) As Long
    Sigma1 = (s(x, 6) Xor s(x, 11) Xor s(x, 25))
End Function


'*******************************************************************************
' Gamma0 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma0(ByVal x As Long) As Long
    Gamma0 = (s(x, 7) Xor s(x, 18) Xor r(x, 3))
End Function


'*******************************************************************************
' Gamma1 (FUNCTION)
'
' DESCRIPTION:
' SHA-256 function
'*******************************************************************************
Private Function Gamma1(ByVal x As Long) As Long
    Gamma1 = (s(x, 17) Xor s(x, 19) Xor r(x, 10))
End Function


'*******************************************************************************
' ConvertToWordArray (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - String message
'
' RETURN VALUE:
' Long() - Converted message as long array
'
' DESCRIPTION:
' Takes the string message and puts it in a long array with padding according to
' the SHA-256 rules (similar to MD5 routine).
'*******************************************************************************
Private Function ConvertToWordArray(sMessage As String) As Long()
    Dim lMessageLength  As Long
    Dim lNumberOfWords  As Long
    Dim lWordArray()    As Long
    Dim lBytePosition   As Long
    Dim lByteCount      As Long
    Dim lWordCount      As Long
    Dim lByte           As Long

    Const MODULUS_BITS      As Long = 512
    Const CONGRUENT_BITS    As Long = 448

    lMessageLength = Len(sMessage)

    ' Get padded number of words. Message needs to be congruent to 448 bits,
    ' modulo 512 bits. If it is exactly congruent to 448 bits, modulo 512 bits
    ' it must still have another 512 bits added. 512 bits = 64 bytes
    ' (or 16 * 4 byte words), 448 bits = 56 bytes. This means lNumberOfWords must
    ' be a multiple of 16 (i.e. 16 * 4 (bytes) * 8 (bits))
    lNumberOfWords = (((lMessageLength + _
        ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ _
        (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * _
        (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    ' Combine each block of 4 bytes (ascii code of character) into one long
    ' value and store in the message. The high-order (most significant) bit of
    ' each byte is listed first. However, unlike MD5 we put the high-order
    ' (most significant) byte first in each word.
    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount >= lMessageLength
        ' Each word is 4 bytes
        lWordCount = lByteCount \ BYTES_TO_A_WORD

        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

        ' NOTE: This is where we are using just the first byte of each unicode
        ' character, you may want to make the change here, or to the SHA256 method
        ' so it accepts a byte array.
        lByte = AscB(Mid(sMessage, lByteCount + 1, 1))

        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop


    ' Terminate according to SHA-256 rules with a 1 bit, zeros and the length in
    ' bits stored in the last two words
    lWordCount = lByteCount \ BYTES_TO_A_WORD
    lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE


    ' Add a terminating 1 bit, all the rest of the bits to the end of the
    ' word array will default to zero
    lWordArray(lWordCount) = lWordArray(lWordCount) Or _
        LShift(&H80, lBytePosition)


    ' We put the length of the message in bits into the last two words, to get
    ' the length in bits we need to multiply by 8 (or left shift 3). This left
    ' shifted value is put in the last word. Any bits shifted off the left edge
    ' need to be put in the penultimate word, we can work out which bits by shifting
    ' right the length by 29 bits.
    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function


'*******************************************************************************
' SHA256 (FUNCTION)
'
' PARAMETERS:
' (In/Out) - sMessage - String - Message to digest
'
' RETURN VALUE:
' String - The digest
'
' DESCRIPTION:
' Takes a string and uses the SHA-256 digest to produce a signature for it.
'
' NOTE: Due to the way in which the string is processed the routine assumes a
' single byte character set. VB passes unicode (2-byte) character strings, the
' ConvertToWordArray function uses on the first byte for each character. This
' has been done this way for ease of use, to make the routine truely portable
' you could accept a byte array instead, it would then be up to the calling
' routine to make sure that the byte array is generated from their string in
' a manner consistent with the string type.
'*******************************************************************************
Public Function SHA256(sMessage As String) As String
    Dim hash(7) As Long
    Dim M()     As Long
    Dim W(63)   As Long
    Dim a       As Long
    Dim b       As Long
    Dim c       As Long
    Dim d       As Long
    Dim e       As Long
    Dim f       As Long
    Dim g       As Long
    Dim h       As Long
    Dim i       As Long
    Dim j       As Long
    Dim T1      As Long
    Dim T2      As Long

    ' Initial hash values
    hash(0) = &H6A09E667
    hash(1) = &HBB67AE85
    hash(2) = &H3C6EF372
    hash(3) = &HA54FF53A
    hash(4) = &H510E527F
    hash(5) = &H9B05688C
    hash(6) = &H1F83D9AB
    hash(7) = &H5BE0CD19

    ' Preprocessing. Append padding bits and length and convert to words
    M = ConvertToWordArray(sMessage)

    ' Main loop
    For i = 0 To UBound(M) Step 16
        a = hash(0)
        b = hash(1)
        c = hash(2)
        d = hash(3)
        e = hash(4)
        f = hash(5)
        g = hash(6)
        h = hash(7)

        For j = 0 To 63
            If j < 16 Then
                W(j) = M(j + i)
            Else
                W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), _
                    W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
            End If

            T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), _
                Ch(e, f, g)), K(j)), W(j))
            T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))

            h = g
            g = f
            f = e
            e = AddUnsigned(d, T1)
            d = c
            c = b
            b = a
            a = AddUnsigned(T1, T2)
        Next

        hash(0) = AddUnsigned(a, hash(0))
        hash(1) = AddUnsigned(b, hash(1))
        hash(2) = AddUnsigned(c, hash(2))
        hash(3) = AddUnsigned(d, hash(3))
        hash(4) = AddUnsigned(e, hash(4))
        hash(5) = AddUnsigned(f, hash(5))
        hash(6) = AddUnsigned(g, hash(6))
        hash(7) = AddUnsigned(h, hash(7))
    Next

    ' Output the 256 bit digest
    SHA256 = LCase(Right("00000000" & Hex(hash(0)), 8) & _
        Right("00000000" & Hex(hash(1)), 8) & _
        Right("00000000" & Hex(hash(2)), 8) & _
        Right("00000000" & Hex(hash(3)), 8) & _
        Right("00000000" & Hex(hash(4)), 8) & _
        Right("00000000" & Hex(hash(5)), 8) & _
        Right("00000000" & Hex(hash(6)), 8) & _
        Right("00000000" & Hex(hash(7)), 8))
End Function

Attribute VB_Name = "Common_Module"
Public Function Positive_Amt(rowNo As Integer, col As String, sheetName As String)
        Positive_Amt = True
        Dim value As Double
        On Error GoTo deci
        value = CDec(Sheets(sheetName).Cells(rowNo, col).value)
        
        On Error GoTo Flow
        If IsNumeric(value) Then
            'length check
            If (Len(Split(value, ".", 2)(0)) > 13) Then
                Common_Module.display_error sheetName, rowNo, col, "Amount should not have more than 13 digits"
                Positive_Amt = False
                Exit Function
            End If
            If (Len(Split(value, ".", 2)(1)) > 2) Then
                Common_Module.display_error sheetName, rowNo, col, "Amount should not have more than 2 decimal places"
                Positive_Amt = False
                Exit Function
            End If
Flow:
            'Amount check for original
            If Not Common_Module.matchRegex(Trim(value), AMT_REGEX) Then
                'Negative check
                If Trim(Sheets(sheetName).Cells(rowNo, col).value < 0) Then
                    Common_Module.display_error sheetName, rowNo, col, "Amount should not be negative"
                    Positive_Amt = False
                    Exit Function
                Else
                    Common_Module.display_error sheetName, rowNo, col, "Invalid Amount"
                    Positive_Amt = False
                    Exit Function
                End If
            
            End If
        Else
deci:
          Common_Module.display_error sheetName, rowNo, col, "Invalid Amount"
          Positive_Amt = False
        End If
    

End Function

Public Function Negative_Amt(rowNo As Integer, col As String, sheetName As String)
        Negative_Amt = True
        Dim value As Double
        On Error GoTo deci
        value = CDec(Sheets(sheetName).Cells(rowNo, col).value)
       
        On Error GoTo Flow
        If IsNumeric(value) Then
            'length check
            If (Len(Split(value, ".", 2)(0)) > 13) Then
                If Not value < 0 Then
                    Common_Module.display_error sheetName, rowNo, col, "Amount should not have more than 13 digits"
                    Negative_Amt = False
                End If
                Exit Function
            End If
            If (Len(Split(value, ".", 2)(1)) > 2) Then
                Common_Module.display_error sheetName, rowNo, col, "Amount should not have more than 2 decimal places"
                Negative_Amt = False
                Exit Function
            End If
Flow:
            'Amount check for original
            If Not Common_Module.matchRegex(Trim(value), AMT_REGEX) Then
                'Negative check
                If Trim(Sheets(sheetName).Cells(rowNo, col).value < 0) Then
                    Exit Function
                Else
                    Common_Module.display_error sheetName, rowNo, col, "Invalid Amount"
                    Negative_Amt = False
                    Exit Function
                End If
            
            End If
        Else
deci:
          Common_Module.display_error sheetName, rowNo, col, "Invalid Amount"
          Negative_Amt = False
        End If
    

End Function
Public Sub partb()
    If Not ValidateMod.Validate_Home Then
        MsgBox "Please enter mandatory field(s) before proceeding to Part B."
        Exit Sub
    End If
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
        Worksheets(sheet14_name).Select
    ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
        Worksheets(sheet15_name).Select
    Else
        Exit Sub
    End If
End Sub
Public Sub parta()
    If Not ValidateMod.Validate_Home Then
        MsgBox "Please enter mandatory field(s) before proceeding to Part A."
        Exit Sub
    End If
    Worksheets(sheet1_name).Select
End Sub
'Sub PasteSpecial()
'    If Not HasValidation(Range("Data")) Then
'        Exit Sub
'    Else
'        Application.Undo
'        MsgBox "Error: You cannot paste data into these cells." & _
'        "Please use the drop-down to enter data instead.", vbCritical
'    End If
'End Sub

Private Function HasValidation(r) As Boolean
    'Returns True if every cell in Range r uses Data Validation
    On Error Resume Next
    x = r.Validation.Type
    If Err.Number = 0 Then HasValidation = True Else HasValidation = False
End Function

Public Sub Nextsheet()

    If ActiveSheet.Index = 15 Then
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then

    Worksheets(ActiveSheet.Index + 1).Select

Else

Worksheets(ActiveSheet.Index + 2).Select

End If
Else
Worksheets(ActiveSheet.Index + 1).Select
End If

End Sub

Public Sub Previousheet()
If ActiveSheet.Index = 17 Then
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then

    Worksheets(ActiveSheet.Index - 2).Select

    Else

Worksheets(ActiveSheet.Index - 1).Select

End If
Else
Worksheets(ActiveSheet.Index - 1).Select
End If
End Sub

Public Sub Home()

    Worksheets("Home").Select

End Sub

Public Sub Help()

    Worksheets("Read Me").Select

End Sub
Public Sub add_expense()
    Application.EnableEvents = False
    col = value_col_four_fourt
    start_row = start_row_four_fourt_exp
    end_row = end_row_four_fourt_exp
    sheet_name = sheet10_name
    
    If end_row - start_row < 3 Then
        Sheets(sheet_name).Range(col & CStr(end_row + 1)).EntireRow.Insert
        Sheets(sheet_name).Range("B" & CStr(end_row + 1) & ":C" & CStr(end_row + 1)).Merge
        Sheets(sheet_name).Range("D" & CStr(end_row + 1) & ":E" & CStr(end_row + 1)).Merge
        Sheets(sheet_name).Range("F" & CStr(end_row + 1) & ":G" & CStr(end_row + 1)).Merge
        Sheets(sheet_name).Range("H" & CStr(end_row + 1) & ":I" & CStr(end_row + 1)).Merge
        Call Increment_Last_row(sheet_name)
        end_row_four_fourt_exp = end_row_four_fourt_exp + 1
        end_row = end_row + 1
        Call Arrange_Expense(sheet_name, start_row, end_row, col)
    Else
        MsgBox "Maximum of 5 expenses are only allowed"
        Application.EnableEvents = True
        Exit Sub
    End If
    Application.EnableEvents = True
End Sub
Public Sub add_qual()
    sheet_name = ActiveSheet.Name
    'MsgBox sheet_name
    If sheet_name = sheet14_name Then
        col = qual_col_pb1
        start_row = start_row_pb1_qual
        end_row = end_row_pb1_qual
        sheet_name = sheet14_name
    ElseIf sheet_name = sheet15_name Then
        col = qual_col_pb2
        start_row = start_row_pb2_qual
        end_row = end_row_pb2_qual
        sheet_name = sheet15_name
    End If
    If end_row - start_row < 14 Then
        Sheets(sheet_name).Range(col & CStr(end_row + 1)).EntireRow.Insert
        Sheets(sheet_name).Range("C" & CStr(end_row + 1) & ":F" & CStr(end_row + 1)).Merge
        Call Increment_Last_row(sheet_name)
        If sheet_name = sheet14_name Then
            end_row_pb1_qual = end_row_pb1_qual + 1
        ElseIf sheet_name = sheet15_name Then
            end_row_pb2_qual = end_row_pb2_qual + 1
        End If
        end_row = end_row + 1
        Call Arrange_qual(sheet_name, start_row, end_row, col)
    Else
        MsgBox "Maximum of 15 qualifications are only allowed"
        Exit Sub
    End If
End Sub

Public Function Count_Reasons_sheet(sheet_name, start_row, fixed_col) As Integer

    Dim rowNo As Integer: rowNo = start_row
    
    Count_Reasons_sheet = rowNo
    col = fixed_col
    
    Do While Sheets(sheet_name).Cells(rowNo, col).value <> vbNullString
            rowNo = rowNo + 1
    Loop
    
    Count_Reasons_sheet = rowNo - start_row
    
End Function

Public Function Count_qual(sheet_name, start_row, end_row, fixed_col) As Integer

    Dim rowNo As Integer: rowNo = start_row
    
    Count_qual = rowNo
    col = fixed_col
    
    Do While Sheets(sheet_name).Cells(rowNo, col).value <> vbNullString
            rowNo = rowNo + 1
    Loop
    
    Count_qual = rowNo - start_row
    
End Function

Public Sub Add_reasons_sheet()
    'Variable_Initialize.initiali
    
    sheet_name = ActiveSheet.Name
    'MsgBox sheet_name
    If sheet_name = sheet2_name Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        end_row = end_row_two_six
        sheet_name = sheet2_name
    ElseIf sheet_name = sheet4_name Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        end_row = end_row_two_eight
        sheet_name = sheet4_name
    ElseIf sheet_name = sheet6_name Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        end_row = end_row_three_ten
        sheet_name = sheet6_name
    ElseIf sheet_name = sheet9_name Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        end_row = end_row_four_thirt
        sheet_name = sheet9_name
    ElseIf sheet_name = sheet11_name Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        end_row = end_row_four_fift
        sheet_name = sheet11_name
    End If
    
    Call Add_Reasons(sheet_name, start_row, end_row, col)
    
End Sub


Public Function Add_Reasons(sheet_name, start_row, end_row, fixed_col)
'    MsgBox sheet_name
'    MsgBox start_row
'    MsgBox end_row
'    MsgBox fixed_col
    If end_row - start_row < 9 Then
        Sheets(sheet_name).Range(fixed_col & CStr(end_row + 1)).EntireRow.Insert
        Sheets(sheet_name).Range(fixed_col & CStr(end_row + 1) & ":I" & CStr(end_row + 1)).Merge
        Call Increment_Last_row(sheet_name)
        end_row = end_row + 1
        Call Arrange_Reasons(sheet_name, start_row, end_row, fixed_col)
    Else
        MsgBox "Maximum of 10 reasons are only allowed"
        Exit Function
    End If
    
    
End Function

Public Function Arrange_Reasons(sheet_name, start_row, end_row, fixed_col)
    start_char = "A"
    start_i = 1
    i = 0
    For s = start_row To end_row
        Sheets(sheet_name).Cells(s, Chr(Asc(fixed_col) - 2)) = Chr(Asc(start_char) + i)
        Sheets(sheet_name).Cells(s, Chr(Asc(fixed_col) - 1)) = "Reason Number " & CStr(start_i + i)
        Sheets(sheet_name).Range(fixed_col & CStr(s) & ":" & Chr(Asc(fixed_col) + 6) & CStr(s)).Merge
        i = i + 1
    Next
    Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 2) & CStr(end_row) & ":" & Chr(Asc(fixed_col) + 8) & CStr(end_row)).Borders.LineStyle = xlContinuous
    

End Function
Public Function Arrange_Expense(sheet_name, start_row, end_row, fixed_col)
    'start_char = "A"
    start_i = 2
    i = 0
    For s = start_row To end_row
        If i <> 0 Then
            Sheets(sheet_name).Cells(s, Chr(Asc(fixed_col) - 3)) = "Q" & CStr(i)
        End If
        Sheets(sheet_name).Cells(s, Chr(Asc(fixed_col) - 2)) = "Any other expense " & CStr(start_i + i)
        i = i + 1
    Next
    Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 2) & CStr(end_row) & ":" & Chr(Asc(fixed_col) + 7) & CStr(end_row)).Borders.LineStyle = xlContinuous
    

End Function
Public Function Arrange_qual(sheet_name, start_row, end_row, fixed_col)
    'start_char = "A"
    start_i = 1
    i = 0
    For s = start_row To end_row
        'Sheets(sheet_name).Cells(S, Chr(Asc(fixed_col) - 2)) = Chr(Asc(start_char) + i)
        Sheets(sheet_name).Cells(s, Chr(Asc(fixed_col) - 1)) = start_i + i
        i = i + 1
    Next
    Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 1) & CStr(end_row) & ":" & Chr(Asc(fixed_col) + 4) & CStr(end_row)).Borders.LineStyle = xlContinuous
    

End Function
Public Function Increment_Last_row(sheet_name)

    If sheet_name = sheet2_name Then
        end_row_two_six = end_row_two_six + 1
    ElseIf sheet_name = sheet4_name Then
        end_row_two_eight = end_row_two_eight + 1
    ElseIf sheet_name = sheet6_name Then
        end_row_three_ten = end_row_three_ten + 1
    ElseIf sheet_name = sheet9_name Then
        end_row_four_thirt = end_row_four_thirt + 1
    ElseIf sheet_name = sheet10_name Then
        end_row_four_fourt = end_row_four_fourt + 1
    ElseIf sheet_name = sheet11_name Then
        end_row_four_fift = end_row_four_fift + 1
    ElseIf sheet_name = sheet14_name Then
        end_row_pb1 = end_row_pb1 + 1
    ElseIf sheet_name = sheet15_name Then
        end_row_pb2 = end_row_pb2 + 1
    End If
    
End Function

Public Function Decrement_Last_row(sheet_name)

    If sheet_name = sheet2_name Then
        end_row_two_six = end_row_two_six - 1
    ElseIf sheet_name = sheet4_name Then
        end_row_two_eight = end_row_two_eight - 1
    ElseIf sheet_name = sheet6_name Then
        end_row_three_ten = end_row_three_ten - 1
    ElseIf sheet_name = sheet9_name Then
        end_row_four_thirt = end_row_four_thirt - 1
    ElseIf sheet_name = sheet10_name Then
        end_row_four_fourt = end_row_four_fourt - 1
    ElseIf sheet_name = sheet11_name Then
        end_row_four_fift = end_row_four_fift - 1
    ElseIf sheet_name = sheet14_name Then
        end_row_pb1 = end_row_pb1 - 1
    ElseIf sheet_name = sheet15_name Then
        end_row_pb2 = end_row_pb2 - 1
    End If
    
End Function

'Checks if the given value iterm, passes the given regex iRegex
Public Function matchRegex(iterm As String, iRegex As String) As Boolean
    
    Set OBJ_RE = CreateObject("VBScript.RegExp")
    OBJ_RE.Global = True
    OBJ_RE.IgnoreCase = False
    OBJ_RE.Pattern = iRegex
    If Not OBJ_RE.test(Trim(iterm)) Then
        matchRegex = False
    Else
        matchRegex = True
    End If
End Function
'To convert Date to the format "dd/mm/yyyy"
Function ConvertDate(Dt As String) As String

Dim SplitStringArray

Dim DayString As String

Dim MonthString As String

Dim YearString As String

Dim i As Integer



    SplitStringArray = Split(Dt, "/")

     

    If Len(SplitStringArray(2)) = 3 Then

        SplitStringArray(2) = "0" & SplitStringArray(2)

    End If

    

    If Len(SplitStringArray(0)) = 1 Then

        DayString = "0" & SplitStringArray(0)

    Else

        DayString = SplitStringArray(0)

    End If

    

    If Len(SplitStringArray(1)) = 1 Then

        MonthString = "0" & SplitStringArray(1)

    Else

        MonthString = SplitStringArray(1)

    End If

    
 If Len(SplitStringArray(2)) = 2 Then
'     YearString = SplitStringArray(2)

    If CInt(SplitStringArray(2)) > 30 Then

        YearString = 1900 + SplitStringArray(2)

    Else

        YearString = 2000 + SplitStringArray(2)

    End If
ElseIf Len(SplitStringArray(2)) = 4 Then
YearString = SplitStringArray(2)
End If

ConvertDate = DayString & "/" & MonthString & "/" & YearString

End Function
Public Function display_error(sheet_name, rowNo, col, Error_Message)

    If sheet_name = home_sheet Then
        sv_col = sv_col_home
    ElseIf sheet_name = sheet1_name Then
        sv_col = sv_col_two_five
    ElseIf sheet_name = sheet2_name Then
        sv_col = sv_col_two_six
    ElseIf sheet_name = sheet3_name Then
        sv_col = sv_col_two_seven
    ElseIf sheet_name = sheet4_name Then
        sv_col = sv_col_two_eight
    ElseIf sheet_name = sheet5_name Then
        sv_col = sv_col_three_nine
    ElseIf sheet_name = sheet6_name Then
        sv_col = sv_col_three_ten
    ElseIf sheet_name = sheet7_name Then
        sv_col = sv_col_three_eleven
    ElseIf sheet_name = sheet8_name Then
        sv_col = sv_col_four_twelve
    ElseIf sheet_name = sheet9_name Then
       sv_col = sv_col_four_thirt
    ElseIf sheet_name = sheet10_name Then
        sv_col = sv_col_four_fourt
    ElseIf sheet_name = sheet11_name Then
        sv_col = sv_col_four_fift
    ElseIf sheet_name = sheet12_name Then
        sv_col = sv_col_four_sixt
    ElseIf sheet_name = sheet13_name Then
        sv_col = sv_col_five
    ElseIf sheet_name = sheet14_name Then
        sv_col = pb1_sv_col
    ElseIf sheet_name = sheet15_name Then
        sv_col = pb2_sv_col
    End If
    
    Sheets(sheet_name).Cells(rowNo, col).Interior.ColorIndex = 3
    Sheets(sheet_name).Cells(rowNo, sv_col).value = Sheets(sheet_name).Cells(rowNo, sv_col).value & Error_Message
    validate = False
    
End Function



Attribute VB_Name = "Export_JSON_Module"
'To Generate JSON
Public Sub Export_JSON()
    Dim rnge As Range
    Dim cele As Range
    Set rnge = Range("ZeroRange")
    For Each cele In rnge
    If IsEmpty(cele) Then
        cele.value = 0
    End If
    Next cele
    Dim rng As Range
    Dim cel As Range
    Set rng = Range("ZeroRangeTV")
    For Each cel In rng
    If IsEmpty(cel) Then
        cel.value = 0
    End If
    Next cel
    Set rnge = Range("HashChkBi")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PartB(i) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkBii")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PartB(ii) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkSix")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PT II(6) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkEgt")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PT II(8) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkTen")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PT III(10) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkTtn")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PT IV(13) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Set rnge = Range("HashChkFtn")
    For Each cele In rnge
    If Not IsEmpty(cele) Then
        If Not Common_Module.matchRegex(cele.value, HASH_REGEX) Then
            MsgBox "Allowed Special Characters are - ( ( ) , "" ' . + - _ & / = @ ? [ ] ). Please remove any other special characters entered in PT IV(15) and then try again."
            Exit Sub
        End If
    End If
    Next cele
    Application.ScreenUpdating = False
    Dim rowNo As Integer
    Dim path, json, val As String
    Dim prev As Boolean: prev = False
    Dim fs As Object, jsonfile As Variant
    Dim jsonDictionary As New Dictionary
    validate = True
    flag = True
    
'    Dim startRowInvA, ENDROWInvA, ENDROWInvNA, startRowInvNA As Integer
'    startRowInvA = 6
'    startRowInvNA = 6
'    startRowInvItms = 6
'    ENDROWInvA = ExtraMod.getLastRowInvA
'    ENDROWInvNA = ExtraMod.getLastRowInvNA
'    ENDROWItms = ExtraMod.getLastRowItms
    
    If Not Validate_Functions.ValidateFunc_Home Then
        MsgBox "Please enter/correct mandatory fields before Generating JSON file(s)."
        Exit Sub
    End If
    Call Validate_Functions.ValidateFunc_Table5
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table7
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table9
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table11
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table12
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table14
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table16
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_TableFive
    If validate = False Then
        flag = False
    End If
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
        Call Validate_Functions.ValidateFunc_PB1
        If validate = False Then
            flag = False
        End If
    ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
        Call Validate_Functions.ValidateFunc_PB2
        If validate = False Then
            flag = False
        End If
    End If
    Sheets(sheet2_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet4_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet6_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet9_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet11_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    
    If flag = False Then
        MsgBox EM8
        Sheets(home_sheet).Select
        Application.ScreenUpdating = True
        Exit Sub
    End If
    
'
'    If ExtraMod.getLastRowInvA = 6 And ExtraMod.getLastRowInvNA = 6 And ExtraMod.getLastRowItms Then
'        MsgBox "All Invoice_available and Inv_ Not_Avail (with GSTIN) and Items_Only sheets are empty. JSON file cannot be generated."
'        Exit Sub
'    End If
'
'
'    If Not (ValidateMod.validateInvA("summary") And ValidateMod.validateInvNA("summary") And ValidateMod.validateInvItms("summary")) Then
'    Worksheets("Home").Activate
'    MsgBox "There are validation Errors in the other sheets. Clear it first to generate JSON file"
'    Exit Sub
'    Else
        Mydate = Date
        Mydate = Replace(Mydate, "/", "")
        fileName = Sheets(home_sheet).Cells(start_row_home, fixed_col_home) & "_" & Mydate & "_R9C_Output_JSON"
        path = Application.GetSaveAsFilename(fileName)
        
        If path <> "False" Then
            
            
            Dim x, i, num As Integer
            Set fs = CreateObject("Scripting.FileSystemObject")
        
            path = path + "json"
            Set jsonfile = fs.CreateTextFile(path, True)
            jsonfile.Write ("{""gstr9cdata"":")
            jsonfile.Write ("{""audited_data"":")
            col = fixed_col_home
            irow = start_row_home
            jsonfile.Write ("{""gstin"":""")
            jsonfile.Write (Sheets(home_sheet).Cells(irow, col))
            jsonfile.Write (""",""fp"":""")
            fy = "0320" & Right(Sheets(home_sheet).Cells(irow + 1, col), 2)
            jsonfile.Write (fy)

            jsonfile.Write (""",""act_name"":""")
            jsonfile.Write (Sheets(home_sheet).Cells(irow + 4, col))
            jsonfile.Write (""",""isauditor"":""")
            If Sheets(home_sheet).Cells(irow + 5, col) = "Yes" Then
                jsonfile.Write ("Y")
            ElseIf Sheets(home_sheet).Cells(irow + 5, col) = "No" Then
                jsonfile.Write ("N")
            End If
            'jsonfile.Write (Sheets(home_sheet).Cells(irow + 6, col))
            jsonfile.Write (""",")
            Call Write_Table5(jsonfile)
            jsonfile.Write (",")
            If (Common_Module.Count_Reasons_sheet("PT II (6)", 5, "C") <> 0) Then
                jsonfile.Write ("""table6"":{")
                Call Write_Reasons(jsonfile, sheet2_name, start_row_two_six, end_row_two_six, fixed_col_two_six)
                jsonfile.Write ("},")
            End If
            Call Write_Table7(jsonfile)
            jsonfile.Write (",")
            If (Common_Module.Count_Reasons_sheet("PT II (8)", 5, "C") <> 0) Then
                jsonfile.Write ("""table8"":{")
                Call Write_Reasons(jsonfile, sheet4_name, start_row_two_eight, end_row_two_eight, fixed_col_two_eight)
                jsonfile.Write ("},")
            End If
            If Not (WorksheetFunction.CountA(Sheets("PT III (9)").Range("C7:I17")) = 0 And WorksheetFunction.CountA(Sheets("PT III (9)").Range("E18:I21")) = 0 And WorksheetFunction.CountA(Sheets("PT III (9)").Range("E23:I23")) = 0) Then
                Call Write_Table9(jsonfile)
                jsonfile.Write (",")
            End If
            If (Common_Module.Count_Reasons_sheet("PT III (10)", 5, "C") <> 0) Then
                jsonfile.Write ("""table10"":{")
                Call Write_Reasons(jsonfile, sheet6_name, start_row_three_ten, end_row_three_ten, fixed_col_three_ten)
                jsonfile.Write ("},")
            End If
            If Not (WorksheetFunction.CountA(Sheets("PT III (11)").Range("C7:I13")) = 0 And WorksheetFunction.CountA(Sheets("PT III (11)").Range("E14:I17")) = 0) Then
                Call Write_Table11(jsonfile)
                jsonfile.Write (",")
            End If
            
            Call Write_Table12(jsonfile)
            jsonfile.Write (",")
            
            If (Common_Module.Count_Reasons_sheet("PT IV(13)", 5, "C") <> 0) Then
                jsonfile.Write ("""table13"":{")
                Call Write_Reasons(jsonfile, sheet9_name, start_row_four_thirt, end_row_four_thirt, fixed_col_four_thirt)
                jsonfile.Write ("},")
            End If
            
            If Not (WorksheetFunction.CountA(Sheets("PT IV (14)").Range("D6:I" & CStr(end_row_four_fourt_exp))) = 0 And WorksheetFunction.CountA(Sheets("PT IV (14)").Range("H" & CStr(end_row_four_fourt - 1))) = 0) Then
                Call Write_Table14(jsonfile)
                jsonfile.Write (",")
            End If
            
            If (Common_Module.Count_Reasons_sheet("PT IV (15)", 5, "C") <> 0) Then
                jsonfile.Write ("""table15"":{")
                Call Write_Reasons(jsonfile, sheet11_name, start_row_four_fift, end_row_four_fift, fixed_col_four_fift)
                jsonfile.Write ("},")
            End If
            If Not (WorksheetFunction.CountA(Sheets("PT IV (16)").Range("C6:G11")) = 0) Then
                Call Write_Table16(jsonfile)
                jsonfile.Write (",")
            End If
            
            Call Write_AddLiab(jsonfile)
            jsonfile.Write ("},")
            
            
            If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
                Call Write_PB1(jsonfile)
            ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
                Call Write_PB2(jsonfile)
            End If
            'jsonfile.Write (",")
'            msg1 = CStr(jsonfile)
'            MsgBox msg1
            jsonfile.Write (",")
            
            
            Dim strFilename As String: strFilename = path
            Dim strFileContent As String
            Dim hashed_str As String
            Dim hash_Content As String
            Dim iFile As Integer: iFile = FreeFile
            Open strFilename For Input As #iFile
            strFileContent = Input(LOF(iFile), iFile)
            Close #iFile
            strFileContent = Left(strFileContent, Len(strFileContent) - 1)
            strFileContent = strFileContent & "}}"
            Sheets("Master").Cells(7, 10) = strFileContent
            'hash_Content = Hashing_JSON.final_string
            'MsgBox strFileContent
            
            sign = Signing_Module.invokeSigning(strFileContent)
            If sign <> "problem" Then
            sign = Left(sign, Len(sign) - 1)
            'sign = Replace(sign, Chr(13), "")
            'jsonDictionary("audited_sign") = sign
            
            jsonfile.Write ("""audited_sign"":""")
            jsonfile.Write (CStr(sign))
            
'            jsonDictionary("ad_data") = hashed_str
'            jsonDictionary("ad_sign") = sign
'
            'jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
            'Set jsonDictionary = Nothing
            jsonfile.Write ("""}}")
            jsonfile.Close
            Sheets("Master").Cells(3, 10) = sign
            Set fs = Nothing
            Set jsonfile = Nothing
            'Close #iFile
            MsgBox "File has been created and placed in  " & path & "  ! You may now proceed to upload the File in the GST Web Portal", vbInformation
            'MsgBox hashed_str
            Else
            jsonfile.Close
            fs.DeleteFile (path)
            Set fs = Nothing
            Set jsonfile = Nothing
            End If
            
        End If
        Sheets(home_sheet).Select
        Application.ScreenUpdating = True
End Sub


Public Function Write_Table5(jsonfile)
    
    Dim jsonDictionary As New Dictionary
    sheet_name = sheet1_name
    col = fixed_col_two_five
    start_row = start_row_two_five
    end_row = end_row_two_five
    
    
    
    jsonfile.Write ("""table5"":")
    jsonDictionary("turnovr") = Sheets(sheet_name).Cells(start_row, col)
    jsonDictionary("unbil_rev_beg") = Sheets(sheet_name).Cells(start_row + 1, col)
    jsonDictionary("unadj_adv_end") = Sheets(sheet_name).Cells(start_row + 2, col)
    jsonDictionary("dmd_sup") = Sheets(sheet_name).Cells(start_row + 3, col)
    jsonDictionary("crd_nts_issued") = Sheets(sheet_name).Cells(start_row + 4, col)
    jsonDictionary("trd_dis") = Sheets(sheet_name).Cells(start_row + 5, col)
    jsonDictionary("turnovr_apr_jun") = Sheets(sheet_name).Cells(start_row + 6, col)
    jsonDictionary("unbil_rev_end") = Sheets(sheet_name).Cells(start_row + 7, col)
    jsonDictionary("unadj_adv_beg") = Sheets(sheet_name).Cells(start_row + 8, col)
    jsonDictionary("crd_note_acc") = Sheets(sheet_name).Cells(start_row + 9, col)
    jsonDictionary("adj_dta") = Sheets(sheet_name).Cells(start_row + 10, col)
    jsonDictionary("turnovr_comp") = Sheets(sheet_name).Cells(start_row + 11, col)
    jsonDictionary("adj_turn_sec") = Sheets(sheet_name).Cells(start_row + 12, col)
    jsonDictionary("adj_turn_fef") = Sheets(sheet_name).Cells(start_row + 13, col)
    jsonDictionary("adj_turn_othrsn") = Sheets(sheet_name).Cells(start_row + 14, col)
    jsonDictionary("annul_turn_adj") = Sheets(sheet_name).Cells(start_row + 15, col)
    jsonDictionary("annul_turn_decl") = Sheets(sheet_name).Cells(start_row + 16, col)
    jsonDictionary("unrec_turnovr") = Sheets(sheet_name).Cells(start_row + 17, col)
    
    
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    
    

End Function

Public Function Write_Reasons(jsonfile, sheet_name, start_row, end_row, fixed_col)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    jsonfile.Write ("""rsn"":")
    count = Common_Module.Count_Reasons_sheet(sheet_name, start_row, fixed_col)
    col = fixed_col
    Set jsonItems = Nothing
    i = 1
    For s = start_row To start_row + count - 1
        
        jsonDictionary("number") = "RSN" & CStr(i)
        jsonDictionary("desc") = Sheets(sheet_name).Cells(s, col)
        jsonItems.Add jsonDictionary
        Set jsonDictionary = Nothing
        i = i + 1
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    Set jsonItems = Nothing
End Function

Public Function Write_Table7(jsonfile)
    
    Dim jsonDictionary As New Dictionary
    sheet_name = sheet3_name
    col = fixed_col_two_seven
    start_row = start_row_two_seven
    end_row = end_row_two_seven
    
    
    
    jsonfile.Write ("""table7"":")
    jsonDictionary("annul_turn_adj") = Sheets(sheet_name).Cells(start_row, col)
    jsonDictionary("othr_turnovr") = Sheets(sheet_name).Cells(start_row + 1, col)
    jsonDictionary("zero_sup") = Sheets(sheet_name).Cells(start_row + 2, col)
    jsonDictionary("rev_sup") = Sheets(sheet_name).Cells(start_row + 3, col)
    jsonDictionary("tax_turn_adj") = Sheets(sheet_name).Cells(start_row + 4, col)
    jsonDictionary("tax_turn_annul") = Sheets(sheet_name).Cells(start_row + 5, col)
    jsonDictionary("unrec_tax_turn") = Sheets(sheet_name).Cells(start_row + 6, col)
    
    
    
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    
    
End Function

Public Function Write_Table12(jsonfile)
    
    Dim jsonDictionary As New Dictionary
    sheet_name = sheet8_name
    col = fixed_col_four_twelve
    start_row = start_row_four_twelve
    end_row = end_row_four_twelve
    
    
    
    jsonfile.Write ("""table12"":")
    jsonDictionary("itc_avail") = Sheets(sheet_name).Cells(start_row, col)
    jsonDictionary("itc_book_earl") = Sheets(sheet_name).Cells(start_row + 1, col)
    jsonDictionary("itc_book_curr") = Sheets(sheet_name).Cells(start_row + 2, col)
    jsonDictionary("itc_avail_audited") = Sheets(sheet_name).Cells(start_row + 3, col)
    jsonDictionary("itc_claim") = Sheets(sheet_name).Cells(start_row + 4, col)
    jsonDictionary("unrec_itc") = Sheets(sheet_name).Cells(start_row + 5, col)
    
    
    
    
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing

End Function

Public Function Write_Table16(jsonfile)
    
    Dim jsonDictionary As New Dictionary
    sheet_name = sheet12_name
    col = fixed_col_four_sixt
    start_row = start_row_four_sixt
    end_row = end_row_four_sixt
    
    
    
    jsonfile.Write ("""table16"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(start_row, col)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(start_row + 1, col)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(start_row + 2, col)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(start_row + 3, col)
    jsonDictionary("inter") = Sheets(sheet_name).Cells(start_row + 4, col)
    jsonDictionary("pen") = Sheets(sheet_name).Cells(start_row + 5, col)
    
    
    
    
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing

End Function

Public Function Write_Table9(jsonfile)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    write_flag = False
    sheet_name = sheet5_name
    start_row = start_row_three_nine
    end_row = end_row_three_nine
    'And Sheets(sheet_name).Range(ccol & CStr(end_row - 1) & ":" & cecol & CStr(end_row - 1)).Value2 = vbNullString)
    
    jsonfile.Write ("""table9"":{")
    
    Set jsonItems = Nothing
    
    For s = start_row To start_row + 10

        jsonDictionary("tax_val") = Sheets(sheet_name).Cells(s, tcol)
        jsonDictionary("cgst") = Sheets(sheet_name).Cells(s, ccol)
        jsonDictionary("sgst") = Sheets(sheet_name).Cells(s, scol)
        jsonDictionary("igst") = Sheets(sheet_name).Cells(s, icol)
        jsonDictionary("cess") = Sheets(sheet_name).Cells(s, cecol)
        If Not (Sheets(sheet_name).Cells(s, tcol) = vbNullString And Sheets(sheet_name).Cells(s, ccol) = vbNullString And Sheets(sheet_name).Cells(s, scol) = vbNullString And Sheets(sheet_name).Cells(s, icol) = vbNullString And Sheets(sheet_name).Cells(s, cecol) = vbNullString) Then
            desc = Application.VLookup(Sheets(sheet_name).Cells(s, Chr(Asc(tcol) - 1)), Sheets("Master").Range("D14:E24"), 2, False)
            jsonDictionary("desc") = desc
            jsonItems.Add jsonDictionary
            write_flag = True
        End If
        
        Set jsonDictionary = Nothing
    Next
    If write_flag Then
        jsonfile.Write ("""rate"":")
        jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
        jsonfile.Write (",")
    Set jsonItems = Nothing
    Set jsonDictionary = Nothing
    End If
    
    irow = end_row - 6
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write ("""inter"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write ("""late_fee"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If

    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write ("""pen"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    
    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write ("""oth"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    irow = irow + 1
    
    jsonfile.Write ("""tot_amt_payable"":")
    
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    irow = irow + 1
    
    jsonfile.Write ("""tot_amt_paid"":")
    
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    irow = irow + 1
    
    jsonfile.Write ("""unrec_amt"":")
   
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write ("}")
    Set jsonDictionary = Nothing

End Function
Public Function Write_Table11(jsonfile)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    sheet_name = sheet7_name
    start_row = start_row_three_eleven
    end_row = end_row_three_eleven
    jsonfile.Write ("""table11"":{")
    jsonfile.Write ("""rate"":")
    Set jsonItems = Nothing
    
    For s = start_row To start_row + 6

        jsonDictionary("tax_val") = Sheets(sheet_name).Cells(s, tcol)
        jsonDictionary("cgst") = Sheets(sheet_name).Cells(s, ccol)
        jsonDictionary("sgst") = Sheets(sheet_name).Cells(s, scol)
        jsonDictionary("igst") = Sheets(sheet_name).Cells(s, icol)
        jsonDictionary("cess") = Sheets(sheet_name).Cells(s, cecol)
        
        If Not (Sheets(sheet_name).Cells(s, tcol) = vbNullString And Sheets(sheet_name).Cells(s, ccol) = vbNullString And Sheets(sheet_name).Cells(s, scol) = vbNullString And Sheets(sheet_name).Cells(s, icol) = vbNullString And Sheets(sheet_name).Cells(s, cecol) = vbNullString) Then
            desc = Application.VLookup(Sheets(sheet_name).Cells(s, Chr(Asc(tcol) - 1)), Sheets("Master").Range("H14:I20"), 2, False)
            jsonDictionary("desc") = desc
            jsonItems.Add jsonDictionary
        End If
        
        
        
        Set jsonDictionary = Nothing
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    
    Set jsonItems = Nothing
    Set jsonDictionary = Nothing
    
    irow = end_row - 3
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write (",")
    jsonfile.Write ("""inter"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    'jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write (",")
    jsonfile.Write ("""late_fee"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    'jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write (",")
    jsonfile.Write ("""pen"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    'jsonfile.Write (",")
    Set jsonDictionary = Nothing
    End If
    irow = irow + 1
    If Not (Sheets(sheet_name).Cells(irow, ccol) = vbNullString And Sheets(sheet_name).Cells(irow, scol) = vbNullString And Sheets(sheet_name).Cells(irow, icol) = vbNullString And Sheets(sheet_name).Cells(irow, cecol) = vbNullString) Then
    jsonfile.Write (",")
    jsonfile.Write ("""oth"":")
    jsonDictionary("cgst") = Sheets(sheet_name).Cells(irow, ccol)
    jsonDictionary("sgst") = Sheets(sheet_name).Cells(irow, scol)
    jsonDictionary("igst") = Sheets(sheet_name).Cells(irow, icol)
    jsonDictionary("cess") = Sheets(sheet_name).Cells(irow, cecol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    
    Set jsonDictionary = Nothing
    End If
    jsonfile.Write ("}")
End Function

Public Function Write_Table14(jsonfile)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    sheet_name = sheet10_name
    start_row = start_row_four_fourt
    end_row = end_row_four_fourt
    jsonfile.Write ("""table14"":{")
    If Not (WorksheetFunction.CountA(Sheets("PT IV (14)").Range("D6:I" & CStr(end_row_four_fourt_exp))) = 0) Then
        jsonfile.Write ("""items"":")
        Set jsonItems = Nothing
        
        For s = start_row To end_row - 3
    
            jsonDictionary("val") = Sheets(sheet_name).Cells(s, tcol)
            jsonDictionary("itc_amt") = Sheets(sheet_name).Cells(s, ccol)
            jsonDictionary("itc_avail") = Sheets(sheet_name).Cells(s, scol)
            
            If Not (Sheets(sheet_name).Cells(s, tcol) = vbNullString And Sheets(sheet_name).Cells(s, ccol) = vbNullString And Sheets(sheet_name).Cells(s, scol) = vbNullString) Then
                desc = Application.VLookup(Sheets(sheet_name).Cells(s, Chr(Asc(tcol) - 2)), Sheets("Master").Range("P14:Q33"), 2, False)
                jsonDictionary("desc") = desc
                jsonItems.Add jsonDictionary
            End If
            
            
            
            Set jsonDictionary = Nothing
        Next
        jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
        jsonfile.Write (",")
        Set jsonItems = Nothing
        Set jsonDictionary = Nothing
    End If
    irow = end_row - 2
    jsonfile.Write ("""tot_elig_itc"":")
    
    jsonDictionary("itc_avail") = Sheets(sheet_name).Cells(irow, scol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    irow = irow + 1
    
    jsonfile.Write ("""itc_claim"":")
    
    jsonDictionary("itc_avail") = Sheets(sheet_name).Cells(irow, scol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    irow = irow + 1
    
    jsonfile.Write ("""unrec_itc"":")
    
    jsonDictionary("itc_avail") = Sheets(sheet_name).Cells(irow, scol)
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write ("}")
    Set jsonDictionary = Nothing
    
    
    

End Function

Public Function Write_PB1(jsonfile)
    
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    Dim json As String
    Dim text_str As String
    Dim pro As Boolean
    
    sheet_name = sheet14_name
    col = col_pb1
    irow = start_row_pb1
    end_row = end_row_pb1
    If Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value) = "I" Then
        pro = True
    ElseIf Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value) = "We" Then
        pro = False
    End If
    
    jsonfile.Write ("""certificate"":{")
    jsonfile.Write ("""cert_data"":{")
    
    If Not pro Then
        text_str = "We have examined the|fffd| \r\n?\tbalance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & " \r\n?\tthe " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & ", and \r\n?\tthe cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & "to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", |fffd|\r\nattached herewith, of M/s" & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & "(Name),"
    Else
        text_str = "I have examined the|fffd| \r\n?\tbalance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & "\r\n?\tthe " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & ", and \r\n?\tthe cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & "to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", |fffd|\r\nattached herewith, of M/s" & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & "(Name),"
    End If
    json = (("""pronoun"":""") & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value))
    json = json & ((""",""bal_sheet_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value))
    json = json & ((""",""acc_typ"":""") & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value))
    typ1 = Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value)
    json = json & ((""",""beg_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value))
    json = json & ((""",""end_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value))
    json = json & ((""",""cash_from_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value))
    json = json & ((""",""cash_to_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value))
    json = json & ((""",""taxpayer_name"":""") & Trim(Sheets(sheet_name).Cells(irow + 14, col).value))
    jsonfile.Write json
    json = ""
    irow = irow + 16
    If Not pro Then
        text_str = text_str & Sheets(sheet_name).Cells(irow, col).value & "," & Sheets(sheet_name).Cells(irow + 1, col).value & "," & Sheets(sheet_name).Cells(irow + 2, col).value & "," & Sheets(sheet_name).Cells(irow + 3, col).value & "," & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value & "(Address)" & "," & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value & "(GSTIN)."
    Else
        text_str = text_str & Sheets(sheet_name).Cells(irow, col).value & "," & Sheets(sheet_name).Cells(irow + 1, col).value & "," & Sheets(sheet_name).Cells(irow + 2, col).value & "," & Sheets(sheet_name).Cells(irow + 3, col).value & "," & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value & "(Address)" & "," & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value & "(GSTIN)."
    End If
    jsonfile.Write (""",""addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    srow = irow
    srow = irow + 8
    
    irow = irow + 13
    Set jsonDictionary = Nothing
    If Not pro Then
        text_str = text_str & "\r\n?\tBased on our audit we report that the said registered person|fffd|" & Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value & "as required by the IGST/CGST/<<>>GST Act, 2017 and the rules/notifications made/issued thereunder: \r\n1. \r\n2. \r\n3. \r\n3(a) we report the following observations/ comments / discrepancies / inconsistencies; if any:  \r\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. \r\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. \r\n3. (b) we further report that, -  \r\n(A)\twe have obtained all the information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to us.  \r\n(B)\tIn our opinion, proper books of account" _
    & temp & "our examination of the books.  \r\n"
    Else
        text_str = text_str & "\r\n?\tBased on my audit I report that the said registered person|fffd|" & Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value & "as required by the IGST/CGST/<<>>GST Act, 2017 and the rules/notifications made/issued thereunder: \r\n1. \r\n2. \r\n3. \r\n3(a) I report the following observations/ comments / discrepancies / inconsistencies; if any:  \r\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. \r\n|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. \r\n3. (b) I further report that, -  \r\n(A)\tI have obtained all the information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to me.  \r\n(B)\tIn my opinion, proper books of account" _
    & temp & "our examination of the books.  \r\n"
    End If
    irow = irow + 7
    json = ("""doc_stat"":""" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value))

    jsonfile.Write json
    json = ""
    If Not pro Then
        text_str = text_str & "(c)\twe certify that the balance sheet, the" & typ1 & "and the cash flow Statement are" & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & "with the books of account maintained at the Principal place of business at" & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & "and \r\n" & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & "additional place of business within the State.  \r\n4.\tThe documents required to be furnished under section 35 (5) of the CGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act is annexed herewith in Form No. GSTR-9C.  \r\n5.\tIn our opinion and to the best of our information and according to explanations given to us, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    Else
        text_str = text_str & "(c)\tI certify that the balance sheet, the" & typ1 & "and the cash flow Statement are" & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & "with the books of account maintained at the Principal place of business at" & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & "and \r\n" & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & "additional place of business within the State.  \r\n4.\tThe documents required to be furnished under section 35 (5) of the CGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act is annexed herewith in Form No. GSTR-9C.  \r\n5.\tIn my opinion and to the best of my information and according to explanations given to me, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    End If
    jsonfile.Write (""",""cert_textpartb1"":{")
    jsonfile.Write ("""principal_addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(srow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(srow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(srow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(srow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(srow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(srow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(srow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(srow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    srow = srow + 5
    jsonfile.Write ("""add_addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(srow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(srow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(srow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(srow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(srow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(srow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(srow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(srow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    'jsonfile.Write (",")
    Set jsonDictionary = Nothing
    
    If Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value = "have been" Then
        ishave = "have been"
        json = json & (",""ishave"":""" & Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value & """")
    ElseIf Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value = "have not been" Then
        ishave = "have not been"
        json = json & (",""ishave"":""" & Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value & """")
    End If
    If Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value = "in agreement" Then
        isagree = "in agreement"
        json = json & (",""isagree"":""" & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & """")
    ElseIf Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value = "not in agreement" Then
        isagree = "not in agreement"
        json = json & (",""isagree"":""" & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & """")
    End If
    
    jsonfile.Write json
    json = ""
    json = json & (",""gstin"":""" & Sheets(sheet_name).Cells(irow - 14, Chr(Asc(col) - 1)).value & """")
    jsonfile.Write json
    json = ""
    jsonfile.Write (",""qualifications"":")
    count = Common_Module.Count_qual(sheet_name, start_row_pb1_qual, end_row_pb1_qual, qual_col_pb1)
    col1 = qual_col_pb1
    Set jsonItems = Nothing
    For s = start_row_pb1_qual To start_row_pb1_qual + count - 1
        text_str = text_str & "\r\n" & CStr(Sheets(sheet_name).Cells(s, Chr(Asc(col1) - 1))) & "." & Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 1))
        qual = Application.VLookup(Sheets(sheet_name).Cells(s, col1), Sheets("Master").Range("A7:C9"), 3, False)
        jsonDictionary("qual_type") = qual
        jsonDictionary("value") = Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 4))
        jsonItems.Add jsonDictionary
        Set jsonDictionary = Nothing
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    jsonfile.Write ("}")
    jsonfile.Write (",")
    Set jsonItems = Nothing
    
    irow = end_row_pb1 - 7
    text_str = text_str & "**(Signature and stamp/Seal of the Auditor)  \r\nPlace:" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value) & "\r\nName of the signatory " & Trim(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value) & "\r\nMembership No " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & "\r\nDate: " & Trim(Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value) & "\r\nFull address "
    json = (("""place"":""") & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value))
    json = json & ((""",""signatory"":""") & Trim(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value))
    json = json & ((""",""mem_no"":""") & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value))
    json = json & ((""",""date"":""") & Trim(Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value))
    jsonfile.Write json
    json = ""
    irow = irow + 4
    text_str = text_str & Sheets(sheet_name).Cells(irow, col).value & "," & Sheets(sheet_name).Cells(irow + 1, col).value & "," & Sheets(sheet_name).Cells(irow + 2, col).value & "," & Sheets(sheet_name).Cells(irow + 3, col).value & "," & Sheets(sheet_name).Cells(irow + 1, col).value & "," & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & "," & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value & "\r\n"""
    jsonfile.Write (""",""audit_addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write ("},")
    Set jsonDictionary = Nothing
'    json = (("""cert_text"":""") & text_str)
'    typ = text_str
'    jsonfile.Write json
'    json = ""
    irow = start_row_pb1
    jsonfile.Write ("""cert_text"":{")
    jsonfile.Write ("""cert_text_partb1"":{")
    jsonfile.Write ("""section1"":")
    If pro Then
    jsonDictionary("line0") = "1. I have examined the-"
    typ = "1. I have examined the-"
    Else
    jsonDictionary("line0") = "1. We have examined the-"
    typ = "1. We have examined the-"
    End If
    jsonDictionary("line1") = "(a) balance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value)
    typ = typ & ",line1=" & "(a) balance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value)
    jsonDictionary("line2") = "(b) the " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & " and"
    typ = typ & ",line2=" & "(b) the " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & " and"
    jsonDictionary("line3") = "(c) the cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", attached herewith, of M/s " & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & " (Name), " & Sheets(sheet_name).Cells(irow + 16, col).value & ", " & Sheets(sheet_name).Cells(irow + 16, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 17, col).value & ", " & Sheets(sheet_name).Cells(irow + 17, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 18, col).value & ", " & Sheets(sheet_name).Cells(irow + 18, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 19, col).value & ", " & Sheets(sheet_name).Cells(irow + 19, Chr(Asc(col) + 2)).value & " (Address)" & ", " & Sheets(sheet_name).Cells(irow + 22, Chr(Asc(col) - 1)).value & " (GSTIN)."
    typ = typ & ",line3=" & "(c) the cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", attached herewith, of M/s " & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & " (Name), " & Sheets(sheet_name).Cells(irow + 16, col).value & ", " & Sheets(sheet_name).Cells(irow + 16, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 17, col).value & ", " & Sheets(sheet_name).Cells(irow + 17, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 18, col).value & ", " & Sheets(sheet_name).Cells(irow + 18, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 19, col).value & ", " & Sheets(sheet_name).Cells(irow + 19, Chr(Asc(col) + 2)).value & " (Address)" & ", " & Sheets(sheet_name).Cells(irow + 22, Chr(Asc(col) - 1)).value & " (GSTIN)."
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    irow = irow + 36
    jsonfile.Write ("""section2"":")
    If pro Then
    jsonDictionary("line0") = "2. Based on my audit I report that the said registered person-"
    typ = typ & ",section2=line0=2. Based on my audit I report that the said registered person-"
    Else
    jsonDictionary("line0") = "2. Based on our audit we report that the said registered person-"
    typ = typ & ",section2=line0=2. Based on our audit we report that the said registered person-"
    End If
    jsonDictionary("line1") = Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value) & " as required by the IGST/CGST/State/UTGST Act, 2017 and the rules/notifications made/issued thereunder:"
    typ = typ & ",line1=" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value) & " as required by the IGST/CGST/State/UTGST Act, 2017 and the rules/notifications made/issued thereunder:"
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""section3"":{")
    jsonfile.Write ("""sec_3a"":")
    If pro Then
    jsonDictionary("line0") = "3.(a) I report the following observations/ comments / discrepancies /inconsistencies; if any:"
    typ = typ & ",section3=sec_3a=line0=" & "3.(a) I report the following observations/ comments / discrepancies /inconsistencies; if any:"
    Else
    jsonDictionary("line0") = "3.(a) We report the following observations/ comments / discrepancies /inconsistencies; if any:"
    typ = typ & ",section3=sec_3a=line0=" & "3.(a) We report the following observations/ comments / discrepancies /inconsistencies; if any:"

    End If
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""sec_3b"":")
    typ = typ & ",sec_3b="
    If pro Then
    jsonDictionary("line0") = "3.(b) I further report that, -"
    jsonDictionary("line1") = "(A) I have obtained all the information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to me."
    jsonDictionary("line2") = "(B) In my opinion, proper books of account " & ishave & " kept by the registered person so far as appears from my examination of the books."
    jsonDictionary("line3") = "(C) I certify that the balance sheet, the " & typ1 & " and the cash flow Statement are " & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & " with the books of account maintained at the Principal place of business at " & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & " and " & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & " additional place of business within the State."
    typ = typ & "line0=3.(b) I further report that, -" & ",line1=" & "(A) I have obtained all the information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of my knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to me."
    typ = typ & ",line2=" & "(B) In my opinion, proper books of account " & ishave & " kept by the registered person so far as appears from my examination of the books."
    typ = typ & ",line3=" & "(C) I certify that the balance sheet, the " & typ1 & " and the cash flow Statement are " & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & " with the books of account maintained at the Principal place of business at " & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & " and " & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & " additional place of business within the State."
    Else
    jsonDictionary("line0") = "3.(b) We further report that, -"
    jsonDictionary("line1") = "(A) We have obtained all the information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to us."
    jsonDictionary("line2") = "(B) In our opinion, proper books of account " & ishave & " kept by the registered person so far as appears from our examination of the books."
    jsonDictionary("line3") = "(C) We certify that the balance sheet, the " & typ1 & " and the cash flow Statement are " & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & " with the books of account maintained at the Principal place of business at " & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & " and " & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & " additional place of business within the State."
    typ = typ & "line0=3.(b) We further report that, -" & ",line1=" & "(A) We have obtained all the information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit/ information and explanations which, to the best of our knowledge and belief, were necessary for the purpose of the audit were not provided/partially provided to us."
    typ = typ & ",line2=" & "(B) In our opinion, proper books of account " & ishave & " kept by the registered person so far as appears from our examination of the books."
    typ = typ & ",line3=" & "(C) We certify that the balance sheet, the " & typ1 & " and the cash flow Statement are " & Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value & " with the books of account maintained at the Principal place of business at " & Sheets(sheet_name).Cells(irow + 12, Chr(Asc(col) + 1)).value & " and " & Sheets(sheet_name).Cells(irow + 13, Chr(Asc(col) - 2)).value & " additional place of business within the State."
    End If
    
    
    
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write ("},")
    
    jsonfile.Write ("""section4"":")
    jsonDictionary("line0") = "4. The documents required to be furnished under section 35 (5) of the CGST Act/SGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act/SGST Act is annexed herewith in Form No. GSTR-9C"
    typ = typ & ",section4=line0=4. The documents required to be furnished under section 35 (5) of the CGST Act/SGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act/SGST Act is annexed herewith in Form No. GSTR-9C"
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    jsonfile.Write ("""section5"":")
    If pro Then
    jsonDictionary("line0") = "5. In my opinion and to the best of my information and according to explanations given to me, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    typ = typ & ",section5=line0=5. In my opinion and to the best of my information and according to explanations given to me, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    Else
    jsonDictionary("line0") = "5. In our opinion and to the best of our information and according to explanations given to us, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    typ = typ & ",section5=line0=5. In our opinion and to the best of our information and according to explanations given to us, the particulars given in the said Form No.GSTR-9C are true and correct subject to following observations/qualifications, if any:"
    End If
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    jsonfile.Write ("""qualifications"":")
    count = Common_Module.Count_qual(sheet_name, start_row_pb1_qual, end_row_pb1_qual, qual_col_pb1)
    col1 = qual_col_pb1
    Set jsonItems = Nothing
    For s = start_row_pb1_qual To start_row_pb1_qual + count - 1
        'text_str = text_str & "\r\n" & CStr(Sheets(sheet_name).Cells(s, Chr(Asc(col1) - 1))) & "." & Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 1))
        qual = Application.VLookup(Sheets(sheet_name).Cells(s, col1), Sheets("Master").Range("A7:C9"), 3, False)
        jsonDictionary("qual_type") = qual
        jsonDictionary("value") = Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 4))
        jsonItems.Add jsonDictionary
        Set jsonDictionary = Nothing
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    Set jsonItems = Nothing
    jsonfile.Write (",")
    irow = end_row_pb1 - 7
    jsonfile.Write ("""signature"":")
    typ = typ & ",signature=" & "date=" & Trim(Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value) & ",fullAddress=" & Sheets(sheet_name).Cells(irow + 4, col).value & ", " & Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 5, col).value & ", " & Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 6, col).value & ", " & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 7, col).value & ", " & Sheets(sheet_name).Cells(irow + 7, Chr(Asc(col) + 2)).value _
    & ",line0=(Signature and stamp/Seal of the Auditor)" & ",membershipNo=" & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & ",nameOfTheSignatory=" & Trim(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value) & ",place=" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value)
    jsonDictionary("line0") = "(Signature and stamp/Seal of the Auditor)"
    jsonDictionary("place") = Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value)
    jsonDictionary("nameOfTheSignatory") = Trim(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value)
    jsonDictionary("membershipNo") = Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value)
    jsonDictionary("date") = Trim(Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value)
    irow = irow + 4
    jsonDictionary("fullAddress") = Sheets(sheet_name).Cells(irow, col).value & ", " & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 1, col).value & ", " & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 2, col).value & ", " & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 3, col).value & ", " & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    
    
    
    jsonfile.Write ("}}}")
    'Set jsonDictionary = Nothing
    

End Function

Public Function Write_PB2(jsonfile)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    Dim json As String
    Dim pro As Boolean
    
    sheet_name = sheet15_name
    col = col_pb2
    irow = start_row_pb2
    end_row = end_row_pb2
    If Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value) = "I" Then
        pro = True
    ElseIf Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value) = "We" Then
        pro = False
    End If
    
    
    jsonfile.Write ("""certificate"":{")
    jsonfile.Write ("""cert_data"":{")
    If Not pro Then
        text_str = "we report that the audit of the books of accounts and the financial statements of M/s. \r\n " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & " \r\n?\tthe " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & ", and \r\n?\tthe cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & "to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", |fffd|\r\nattached herewith, of M/s" & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & "(Name),"
    Else
        text_str = "I have examined the|fffd| \r\n?\tbalance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value) & "\r\n?\tthe " & Trim(Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value) & ", and \r\n?\tthe cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value) & "to ending on " & Trim(Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value) & ", |fffd|\r\nattached herewith, of M/s" & Trim(Sheets(sheet_name).Cells(irow + 14, col).value) & "(Name),"
    End If
    
    json = (("""pronoun"":""") & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value))
    json = json & ((""",""taxpayer_name"":""") & Trim(Sheets(sheet_name).Cells(irow + 2, col).value))
    jsonfile.Write json
    json = ""
    irow = irow + 4
    jsonfile.Write (""",""addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonDictionary = Nothing
    
    jsonfile.Write ("""cert_textpartb2"":{")
    jsonfile.Write ("""conducted_by"":{")
    json = (("""name"":""") & Trim(Sheets(sheet_name).Cells(irow + 7, col).value))
    jsonfile.Write json
    json = ""
    irow = irow + 9
    jsonfile.Write (""",""addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    jsonfile.Write ("},")
    Set jsonDictionary = Nothing
    json = (("""audit_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 7, col).value))
    json = json & ((""",""audit_typ"":""") & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value))
    jsonfile.Write json
    json = ""
    jsonfile.Write (""",""qualifications"":")
    count = Common_Module.Count_qual(sheet_name, start_row_pb2_qual, end_row_pb2_qual, qual_col_pb2)
    col1 = qual_col_pb2
    Set jsonItems = Nothing
    For s = start_row_pb2_qual To start_row_pb2_qual + count - 1
        qual = Application.VLookup(Sheets(sheet_name).Cells(s, col1), Sheets("Master").Range("B7:D8"), 3, False)
        jsonDictionary("qual_type") = qual
        jsonDictionary("value") = Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 4))
        jsonItems.Add jsonDictionary
        Set jsonDictionary = Nothing
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    'jsonfile.Write (",")
    Set jsonItems = Nothing
    jsonfile.Write ("}")
    json = json & ((",""bal_sheet_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 9, col).value))
    json = json & ((""",""acc_typ"":""") & Trim(Sheets(sheet_name).Cells(irow + 11, col).value))
    json = json & ((""",""beg_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 12, col).value))
    json = json & ((""",""end_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 13, col).value))
    json = json & ((""",""cash_from_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 16, col).value))
    json = json & ((""",""cash_to_date"":""") & Trim(Sheets(sheet_name).Cells(irow + 17, col).value))
    
    irow = irow + 23
    json = json & (""",""doc_stat"":""" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value))
    jsonfile.Write json
    json = ""

    irow = end_row_pb2 - 7
    
    json = ((""",""place"":""") & Trim(Sheets(sheet_name).Cells(irow, col).value))
    json = json & ((""",""signatory"":""") & Trim(Sheets(sheet_name).Cells(irow + 1, col).value))
    json = json & ((""",""mem_no"":""") & Trim(Sheets(sheet_name).Cells(irow + 2, col).value))
    json = json & ((""",""date"":""") & Trim(Sheets(sheet_name).Cells(irow + 3, col).value))
    jsonfile.Write json
    json = ""
    irow = irow + 4
    
    jsonfile.Write (""",""audit_addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 1)).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 1)).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 1)).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 1)).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 3)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 3)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 3)).value
    
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    
    
    
    jsonfile.Write ("},")
    irow = start_row_pb2
    jsonfile.Write ("""cert_text"":{")
    jsonfile.Write ("""cert_text_partb2"":{")
    jsonfile.Write ("""section1"":")
    If pro Then
    str1 = "I report that the audit of the books of accounts and the financial statements of M/s. " & Trim(Sheets(sheet_name).Cells(irow + 2, col).value) & ", " & Sheets(sheet_name).Cells(irow + 4, col).value & ", " & Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 5, col).value & ", " & Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 6, col).value & ", " & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 7, col).value & ", " & Sheets(sheet_name).Cells(irow + 7, Chr(Asc(col) + 2)).value & " (Name and address of the assessee with GSTIN) was conducted by M/s. " & Trim(Sheets(sheet_name).Cells(irow + 11, col).value) & ", "
    irow = irow + 13
    str1 = str1 & Sheets(sheet_name).Cells(irow, col).value & ", " & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 1, col).value & ", " & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 2, col).value & ", " & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 3, col).value & ", " & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value & " (full name and address of auditor along with status), bearing membership number in pursuance of the provisions of the " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value) & " Act, and I annex hereto a copy of their audit report dated " & Trim(Sheets(sheet_name).Cells(irow + 7, col).value) & " along with a copy of each of :-"
    typ = str1
    jsonDictionary("line0") = str1
    Else
    str1 = "We report that the audit of the books of accounts and the financial statements of M/s. " & Trim(Sheets(sheet_name).Cells(irow + 2, col).value) & ", " & Sheets(sheet_name).Cells(irow + 4, col).value & ", " & Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 5, col).value & ", " & Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 6, col).value & ", " & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 7, col).value & ", " & Sheets(sheet_name).Cells(irow + 7, Chr(Asc(col) + 2)).value & " (Name and address of the assessee with GSTIN) was conducted by M/s. " & Trim(Sheets(sheet_name).Cells(irow + 11, col).value) & ", "
    irow = irow + 13
    str1 = str1 & Sheets(sheet_name).Cells(irow, col).value & ", " & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 1, col).value & ", " & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 2, col).value & ", " & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value & ", " & Sheets(sheet_name).Cells(irow + 3, col).value & ", " & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value & " (full name and address of auditor along with status), bearing membership number in pursuance of the provisions of the " & Trim(Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value) & " Act, and We annex hereto a copy of their audit report dated " & Trim(Sheets(sheet_name).Cells(irow + 7, col).value) & " along with a copy of each of :-"
    typ = str1
    jsonDictionary("line0") = str1
    End If
    jsonDictionary("line1") = "(a) balance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 9, col).value)
    typ = typ & ",line1=" & "(a) balance sheet as on " & Trim(Sheets(sheet_name).Cells(irow + 9, col).value)
    jsonDictionary("line2") = "(b) the " & Trim(Sheets(sheet_name).Cells(irow + 11, col).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 12, col).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 13, col).value)
    typ = typ & ",line2=" & "(b) the " & Trim(Sheets(sheet_name).Cells(irow + 11, col).value) & " for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 12, col).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 13, col).value)
    jsonDictionary("line3") = "(c) the cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 16, col).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 17, col).value) & " and"
    typ = typ & ",line3=" & "(c) the cash flow statement for the period beginning from " & Trim(Sheets(sheet_name).Cells(irow + 16, col).value) & " to ending on " & Trim(Sheets(sheet_name).Cells(irow + 17, col).value) & " and"
    jsonDictionary("line4") = "(d) documents declared by the said Act to be part of, or annexed to, the " & Trim(Sheets(sheet_name).Cells(irow + 19, Chr(Asc(col) + 1)).value) & " and balance sheet."
    typ = typ & ",line4=" & "(d) documents declared by the said Act to be part of, or annexed to, the " & Trim(Sheets(sheet_name).Cells(irow + 19, Chr(Asc(col) + 1)).value) & " and balance sheet."
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""section2"":")
    If pro Then
    jsonDictionary("line0") = "2. I report that the said registered person-"
    typ = typ & ",section2=line0=2. I report that the said registered person-"
    Else
    jsonDictionary("line0") = "2. We report that the said registered person-"
    typ = typ & ",section2=line0=2. We report that the said registered person-"
    End If
    irow = irow + 23
    jsonDictionary("line1") = Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value) & " as required by the IGST/CGST/State/UTGST Act, 2017 and the rules/notifications made/issued thereunder"
    typ = typ & ",line1=" & Trim(Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value) & " as required by the IGST/CGST/State/UTGST Act, 2017 and the rules/notifications made/issued thereunder"
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""section3"":")
    jsonDictionary("line0") = "3. The documents required to be furnished under section 35 (5) of the CGST Act/SGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act/SGST Act is annexed herewith in Form No.GSTR-9C."
    typ = typ & ",section3=line0=" & "3. The documents required to be furnished under section 35 (5) of the CGST Act/SGST Act and Reconciliation Statement required to be furnished under section 44(2) of the CGST Act/SGST Act is annexed herewith in Form No.GSTR-9C."
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""section4"":")
    If pro Then
    jsonDictionary("line0") = "4. In my opinion and to the best of my information and according to examination of books of account including other relevant documents and explanations given to me, the particulars given in the said Form No.9C are true and correct subject to the following observations/qualifications, if any:"
    typ = typ & ",section4=line0=4. In my opinion and to the best of my information and according to examination of books of account including other relevant documents and explanations given to me, the particulars given in the said Form No.9C are true and correct subject to the following observations/qualifications, if any:"
    Else
    jsonDictionary("line0") = "4. In our opinion and to the best of our information and according to examination of books of account including other relevant documents and explanations given to us, the particulars given in the said Form No.9C are true and correct subject to the following observations/qualifications, if any:"
    typ = typ & ",section4=line0=4. In our opinion and to the best of our information and according to examination of books of account including other relevant documents and explanations given to us, the particulars given in the said Form No.9C are true and correct subject to the following observations/qualifications, if any:"
    End If
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    jsonfile.Write (",")
    
    jsonfile.Write ("""qualifications"":")
    count = Common_Module.Count_qual(sheet_name, start_row_pb2_qual, end_row_pb2_qual, qual_col_pb2)
    col1 = qual_col_pb2
    Set jsonItems = Nothing
    For s = start_row_pb2_qual To start_row_pb2_qual + count - 1
        qual = Application.VLookup(Sheets(sheet_name).Cells(s, col1), Sheets("Master").Range("B7:D8"), 3, False)
        jsonDictionary("qual_type") = qual
        jsonDictionary("value") = Sheets(sheet_name).Cells(s, Chr(Asc(col1) + 4))
        jsonItems.Add jsonDictionary
        Set jsonDictionary = Nothing
    Next
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
    jsonfile.Write (",")
    Set jsonItems = Nothing
    
    irow = end_row_pb2 - 7
    jsonfile.Write ("""signature"":")
    typ = typ & ",signature=" & ",date=" & Trim(Sheets(sheet_name).Cells(irow + 3, col).value) & ",fullAddress=" & Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 7, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 7, Chr(Asc(col) + 3)).value _
    & ",line0=(Signature and stamp/Seal of the Auditor)" & ",membershipNo=" & Trim(Sheets(sheet_name).Cells(irow + 2, col).value) & ",nameOfTheSignatory=" & Trim(Sheets(sheet_name).Cells(irow + 1, col).value) & ",place=" & Trim(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("line0") = "(Signature and stamp/Seal of the Auditor)"
    
    jsonDictionary("line0") = "(Signature and stamp/Seal of the Auditor)"
    jsonDictionary("place") = Trim(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("nameOfTheSignatory") = Trim(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("membershipNo") = Trim(Sheets(sheet_name).Cells(irow + 2, col).value)
    jsonDictionary("date") = Trim(Sheets(sheet_name).Cells(irow + 3, col).value)
    
    irow = irow + 4
    jsonDictionary("fullAddress") = Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 3)).value & ", " & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 1)).value & ", " & Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 3)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    Set jsonDictionary = Nothing
    
    
    
    jsonfile.Write ("}}}")
    
End Function

Public Sub Write_AddLiab(jsonfile)
    Dim jsonItems As New Collection
    Dim jsonDictionary As New Dictionary
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    col = word_col_five
    sheet_name = sheet13_name
    start_row = start_row_five
    end_row = end_row_five
    jsonfile.Write ("""add_liab"":{")
    If Not (WorksheetFunction.CountA(Sheets("PT V").Range("D6:J20")) = 0) Then
        jsonfile.Write ("""tax_pay"":")
        Set jsonItems = Nothing
        
        For s = start_row To end_row
    
            jsonDictionary("val") = Sheets(sheet_name).Cells(s, tcol)
            jsonDictionary("igst") = Sheets(sheet_name).Cells(s, icol)
            jsonDictionary("cgst") = Sheets(sheet_name).Cells(s, ccol)
            jsonDictionary("sgst") = Sheets(sheet_name).Cells(s, scol)
            jsonDictionary("cess") = Sheets(sheet_name).Cells(s, cecol)
             
            If Not (Sheets(sheet_name).Cells(s, tcol) = vbNullString And Sheets(sheet_name).Cells(s, ccol) = vbNullString And Sheets(sheet_name).Cells(s, scol) = vbNullString And Sheets(sheet_name).Cells(s, icol) = vbNullString And Sheets(sheet_name).Cells(s, cecol) = vbNullString) Then
                desc = Application.VLookup(Sheets(sheet_name).Cells(s, Chr(Asc(tcol) - 1)), Sheets("Master").Range("L14:M28"), 2, False)
                jsonDictionary("desc") = desc
                jsonItems.Add jsonDictionary
            End If
            
            Set jsonDictionary = Nothing
        Next
         
        jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonItems, Whitespace:=3))
        jsonfile.Write (",")
        Set jsonItems = Nothing
        Set jsonDictionary = Nothing
    End If
    irow = word_start_row_five
    
    json = (("""place"":""") & Trim(Sheets(sheet_name).Cells(irow, col).value))
    json = json & ((""",""signatory"":""") & Trim(Sheets(sheet_name).Cells(irow + 1, col).value))
    json = json & ((""",""mem_no"":""") & Trim(Sheets(sheet_name).Cells(irow + 2, col).value))
    json = json & ((""",""date"":""") & Trim(Sheets(sheet_name).Cells(irow + 3, col).value))
    json = json & ((""",""pan_no"":""") & Trim(Sheets(sheet_name).Cells(irow + 9, col).value))
    jsonfile.Write json
    json = ""
      
    irow = irow + 4
    
    jsonfile.Write (""",""audit_addr"":")
    
    jsonDictionary("bno") = CStr(Sheets(sheet_name).Cells(irow, col).value)
    jsonDictionary("building") = CStr(Sheets(sheet_name).Cells(irow + 1, col).value)
    jsonDictionary("city") = Sheets(sheet_name).Cells(irow + 2, col).value
    jsonDictionary("state") = Sheets(sheet_name).Cells(irow + 3, col).value
    jsonDictionary("fno") = CStr(Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value)
    jsonDictionary("road") = CStr(Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value)
    jsonDictionary("district") = Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value
    jsonDictionary("pin_code") = Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value
    jsonfile.WriteLine (JsonConverter.ConvertToJson(jsonDictionary, Whitespace:=3))
    
    
    
    
    jsonfile.Write ("}")
    Set jsonDictionary = Nothing
    
End Sub


Attribute VB_Name = "FileUtil"
'Macro to open a dialog box in excel to generate json
Public Function openFile(multiSelect As Boolean) As Variant
    Dim fileName(5) As String
    Dim fd As Office.FileDialog
    Dim count As Integer: count = 0
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

    With fd
        .AllowMultiSelect = multiSelect
        .Title = "Please select the file."
        .Filters.Clear
        .Filters.Add "JSON file", "*.json?"
    
        If .Show = True Then
            For Each vrtSelectedItem In .SelectedItems
                fileName(count) = Dir(vrtSelectedItem)
                count = count + 1
            Next
        End If
    End With
    openFile = fileName
End Function

'Opens and checks if the selected JSON is a valid one
Public Function openJSON(sFilePath As String) As Object
On Error GoTo ERR_HANDLER
    Dim fileText As String, r As Integer
    
    Open sFilePath For Input As #1
    Do Until EOF(1)
        Line Input #1, strLine
        fileText = fileText & strLine
        r = r + 1
    Loop
    Close #1
    Set openJSON = JsonConverter.ParseJson(fileText)
CLEAN_UP:
    Exit Function
ERR_HANDLER:
    MsgBox ("Error loading JSON file. Invalid JSON file/format."), vbCritical
    Set openJSON = Nothing
    GoTo CLEAN_UP
End Function



Attribute VB_Name = "Hashing_JSON"
Public Function SHA256function(sMessage As String)

    Dim clsX As CSHA256
    Set clsX = New CSHA256

    SHA256function = clsX.SHA256(sMessage)

    Set clsX = Nothing

End Function


Public Function final_string() As String
    
    
    'Dim final_string As String
    Dim value As String
    Dim count As Integer
    
    
    
    value = "value"
    final_string = "audited_data=act_name=" & Sheets(home_sheet).Cells(start_row_home + 4, fixed_col_home) & ",add_liab=audit_addr=bno=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 4, word_col_five).value) _
    & ",building=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 5, word_col_five).value) & ",city=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 6, word_col_five).value) & ",district=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 6, Chr(Asc(word_col_five) + 2)).value) & ",fno=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 4, Chr(Asc(word_col_five) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 7, Chr(Asc(word_col_five) + 2)).value) & ",road=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 5, Chr(Asc(word_col_five) + 2)).value) & ",state=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 7, word_col_five).value) _
    & ",date=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 3, word_col_five).value) & ",mem_no=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 2, word_col_five).value) & ",pan_no=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 9, word_col_five).value) & ",place=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five, word_col_five).value) & ",signatory=" & CStr(Sheets(sheet13_name).Cells(word_start_row_five + 1, word_col_five).value) & ",tax_pay="
    
    
    For s = start_row_five To end_row_five
        temp = ""
        If s <> start_row_five Then
            temp = ","
        End If
        desc = Application.VLookup(CStr(Sheets(sheet13_name).Cells(s, Chr(Asc(taxv_col_five) - 1)).value), Sheets("Master").Range("L14:M28"), 2, False)

        temp = temp & "cess=" & CStr(Sheets(sheet13_name).Cells(s, cetax_col_five).value) & ",cgst=" & CStr(Sheets(sheet13_name).Cells(s, ctax_col_five).value) & ",desc=" & desc & ",igst=" & CStr(Sheets(sheet13_name).Cells(s, itax_col_five).value) & ",sgst=" & CStr(Sheets(sheet13_name).Cells(s, stax_col_five).value) & ",val=" & CStr(Sheets(sheet13_name).Cells(s, taxv_col_five).value)
        final_string = final_string & temp
    Next
    
    fy = "0320" & Right(Sheets(home_sheet).Cells(start_row_home + 1, fixed_col_home), 2)
    If Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home) = "Yes" Then
        ia = "Y"
    ElseIf Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home) = "No" Then
        ia = "N"
    End If
    final_string = final_string & ",fp=" & fy & ",gstin=" & Sheets(home_sheet).Cells(start_row_home, fixed_col_home) & ",isauditor=" & ia
    
    count = Common_Module.Count_Reasons_sheet(sheet6_name, start_row_three_ten, fixed_col_three_ten)
    If count > 0 Then
        final_string = final_string & ",table10=rsn="
        i = 1
        For s = start_row_three_ten To end_row_three_ten
            temp = ""
            If s <> start_row_three_ten Then
                temp = ","
            End If
            temp = temp & "desc=" & Sheets(sheet6_name).Cells(s, fixed_col_three_ten) & ",number=" & "RSN" & CStr(i)
            final_string = final_string & temp
            i = i + 1
        Next
    End If
    
    final_string = final_string & ",table11=inter=cess=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 3, cetax_col_three_eleven) & ",cgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 3, ctax_col_three_eleven) & ",igst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 3, itax_col_three_eleven) & ",sgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 3, stax_col_three_eleven) & ",late_fee=cess=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 2, cetax_col_three_eleven) & ",cgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 2, ctax_col_three_eleven) & ",igst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 2, itax_col_three_eleven) & ",sgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 2, stax_col_three_eleven) & ",oth=cess=" & Sheets(sheet7_name).Cells(end_row_three_eleven, cetax_col_three_eleven) & ",cgst=" _
    & Sheets(sheet7_name).Cells(end_row_three_eleven, ctax_col_three_eleven) & ",igst=" & Sheets(sheet7_name).Cells(end_row_three_eleven, itax_col_three_eleven) & ",sgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven, stax_col_three_eleven) & ",pen=cess=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 1, cetax_col_three_eleven) & ",cgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 1, ctax_col_three_eleven) & ",igst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 1, itax_col_three_eleven) & ",sgst=" & Sheets(sheet7_name).Cells(end_row_three_eleven - 1, stax_col_three_eleven) _
    & ",rate="
    
    For s = start_row_three_eleven To end_row_three_eleven - 4
        temp = ""
        If s <> start_row_three_eleven Then
            temp = ","
        End If
        desc = Application.VLookup(Sheets(sheet7_name).Cells(s, Chr(Asc(taxv_col_three_eleven) - 1)), Sheets("Master").Range("H14:I20"), 2, False)

        temp = temp & "cess=" & Sheets(sheet7_name).Cells(s, cetax_col_three_eleven) & ",cgst=" & Sheets(sheet7_name).Cells(s, ctax_col_three_eleven) & ",desc=" & desc & ",igst=" & Sheets(sheet7_name).Cells(s, itax_col_three_eleven) & ",sgst=" & Sheets(sheet7_name).Cells(s, stax_col_three_eleven) & ",tax_val=" & Sheets(sheet7_name).Cells(s, taxv_col_three_eleven)
        final_string = final_string & temp
    Next
    
    final_string = final_string & ",table12=itc_avail=" & Sheets(sheet8_name).Cells(start_row_four_twelve, fixed_col_four_twelve) & ",itc_avail_audited=" & Sheets(sheet8_name).Cells(start_row_four_twelve + 3, fixed_col_four_twelve) & ",itc_book_curr=" & Sheets(sheet8_name).Cells(start_row_four_twelve + 2, fixed_col_four_twelve) & ",itc_book_earl=" & Sheets(sheet8_name).Cells(start_row_four_twelve + 1, fixed_col_four_twelve) & ",itc_claim=" & Sheets(sheet8_name).Cells(end_row_four_twelve - 1, fixed_col_four_twelve) & ",unrec_itc=" & Sheets(sheet8_name).Cells(end_row_four_twelve, fixed_col_four_twelve)
    
    count = Common_Module.Count_Reasons_sheet(sheet9_name, start_row_four_thirt, fixed_col_four_thirt)
    If count > 0 Then
        final_string = final_string & ",table13=rsn="
        i = 1
        For s = start_row_four_thirt To end_row_four_thirt
            temp = ""
            If s <> start_row_four_thirt Then
                temp = ","
            End If
            temp = temp & "desc=" & Sheets(sheet9_name).Cells(s, fixed_col_four_thirt) & ",number=" & "RSN" & CStr(i)
            final_string = final_string & temp
            i = i + 1
        Next
    End If
    final_string = final_string & ",table14=itc_claim=itc_avail=" & Sheets(sheet10_name).Cells(end_row_four_fourt - 1, amte_col_four_fourt) & ",items="
    
    For s = start_row_four_fourt To end_row_four_fourt - 3
        temp = ""
        If s <> start_row_four_fourt Then
            temp = ","
        End If
        desc = Application.VLookup(Sheets(sheet10_name).Cells(s, Chr(Asc(value_col_four_fourt) - 2)), Sheets("Master").Range("P14:Q33"), 2, False)

        temp = temp & "desc=" & desc & ",itc_amt=" & Sheets(sheet10_name).Cells(s, amt_col_four_fourt) & ",itc_avail=" & Sheets(sheet10_name).Cells(s, amte_col_four_fourt) & ",val=" & Sheets(sheet10_name).Cells(s, value_col_four_fourt)
        final_string = final_string & temp
    Next
    final_string = final_string & ",tot_elig_itc=itc_avail=" & Sheets(sheet10_name).Cells(end_row_four_fourt - 2, amte_col_four_fourt) & ",unrec_itc=itc_avail=" & Sheets(sheet10_name).Cells(end_row_four_fourt, amte_col_four_fourt)
    count = Common_Module.Count_Reasons_sheet(sheet11_name, start_row_four_fift, fixed_col_four_fift)
    If count > 0 Then
        final_string = final_string & ",table15=rsn="
        i = 1
        For s = start_row_four_fift To end_row_four_fift
            temp = ""
            If s <> start_row_four_fift Then
                temp = ","
            End If
            temp = temp & "desc=" & Sheets(sheet11_name).Cells(s, fixed_col_four_fift) & ",number=" & "RSN" & CStr(i)
            final_string = final_string & temp
            i = i + 1
        Next
    End If
    final_string = final_string & ",table16=cess=" & Sheets(sheet12_name).Cells(start_row_four_sixt + 3, fixed_col_four_sixt) & "," & "cgst=" & Sheets(sheet12_name).Cells(start_row_four_sixt, fixed_col_four_sixt) & ",igst=" & Sheets(sheet12_name).Cells(start_row_four_sixt + 2, fixed_col_four_sixt) & ",inter=" & Sheets(sheet12_name).Cells(start_row_four_sixt + 4, fixed_col_four_sixt) & ",pen=" & Sheets(sheet12_name).Cells(end_row_four_sixt, fixed_col_four_sixt) & ",sgst=" & Sheets(sheet12_name).Cells(start_row_four_sixt + 1, fixed_col_four_sixt) _
    & ",table5=adj_dta=" & Sheets(sheet1_name).Cells(start_row_two_five + 10, fixed_col_two_five) & ",adj_turn_fef=" & Sheets(sheet1_name).Cells(start_row_two_five + 13, fixed_col_two_five) & ",adj_turn_othrsn=" & Sheets(sheet1_name).Cells(start_row_two_five + 14, fixed_col_two_five) & ",adj_turn_sec=" & Sheets(sheet1_name).Cells(start_row_two_five + 12, fixed_col_two_five) & ",annul_turn_adj=" & Sheets(sheet1_name).Cells(end_row_two_five - 2, fixed_col_two_five) & ",annul_turn_decl=" & Sheets(sheet1_name).Cells(end_row_two_five - 1, fixed_col_two_five) & ",crd_note_acc=" & Sheets(sheet1_name).Cells(start_row_two_five + 9, fixed_col_two_five) _
    & ",crd_nts_issued=" & Sheets(sheet1_name).Cells(start_row_two_five + 4, fixed_col_two_five) & ",dmd_sup=" & Sheets(sheet1_name).Cells(start_row_two_five + 3, fixed_col_two_five) & ",trd_dis=" & Sheets(sheet1_name).Cells(start_row_two_five + 5, fixed_col_two_five) & ",turnovr=" & Sheets(sheet1_name).Cells(start_row_two_five, fixed_col_two_five) & ",turnovr_apr_jun=" & Sheets(sheet1_name).Cells(start_row_two_five + 6, fixed_col_two_five) & ",turnovr_comp=" & Sheets(sheet1_name).Cells(start_row_two_five + 11, fixed_col_two_five) & ",unadj_adv_beg=" & Sheets(sheet1_name).Cells(start_row_two_five + 8, fixed_col_two_five) _
    & ",unadj_adv_end=" & Sheets(sheet1_name).Cells(start_row_two_five + 2, fixed_col_two_five) & ",unbil_rev_beg=" & Sheets(sheet1_name).Cells(start_row_two_five + 1, fixed_col_two_five) & ",unbil_rev_end=" & Sheets(sheet1_name).Cells(start_row_two_five + 7, fixed_col_two_five) & ",unrec_turnovr=" & Sheets(sheet1_name).Cells(end_row_two_five, fixed_col_two_five)
    
    count = Common_Module.Count_Reasons_sheet(sheet2_name, start_row_two_six, fixed_col_two_six)
    If count > 0 Then
    
        final_string = final_string & ",table6=rsn="
        i = 1
        For s = start_row_two_six To end_row_two_six
            temp = ""
            If s <> start_row_two_six Then
                temp = ","
            End If
            temp = temp & "desc=" & Sheets(sheet2_name).Cells(s, fixed_col_two_six) & ",number=" & "RSN" & CStr(i)
            final_string = final_string & temp
            i = i + 1
        Next
    End If
    'Table 7
    final_string = final_string & ",table7=annul_turn_adj=" & Sheets(sheet3_name).Cells(start_row_two_seven, fixed_col_two_seven) & ",othr_turnovr=" & Sheets(sheet3_name).Cells(start_row_two_seven + 1, fixed_col_two_seven) & ",rev_sup=" & Sheets(sheet3_name).Cells(start_row_two_seven + 3, fixed_col_two_seven) & ",tax_turn_adj=" & Sheets(sheet3_name).Cells(end_row_two_seven - 2, fixed_col_two_seven) & ",tax_turn_annul=" & Sheets(sheet3_name).Cells(end_row_two_seven - 1, fixed_col_two_seven) & ",unrec_tax_turn=" & Sheets(sheet3_name).Cells(end_row_two_seven, fixed_col_two_seven) & ",zero_sup=" & Sheets(sheet3_name).Cells(start_row_two_seven + 2, fixed_col_two_seven)
        
    count = Common_Module.Count_Reasons_sheet(sheet4_name, start_row_two_eight, fixed_col_two_eight)
    If count > 0 Then
        final_string = final_string & ",table8=rsn="
        i = 1
        For s = start_row_two_eight To end_row_two_eight
            temp = ""
            If s <> start_row_two_eight Then
                temp = ","
            End If
            temp = temp & "desc=" & Sheets(sheet4_name).Cells(s, fixed_col_two_eight) & ",number=" & "RSN" & CStr(i)
            final_string = final_string & temp
            i = i + 1
        Next
    End If
    'Table9
    final_string = final_string & ",table9=inter=cess=" & CStr(Sheets(sheet5_name).Cells(end_row_three_nine - 6, cetax_col_three_nine)) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 6, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 6, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 6, stax_col_three_nine) _
    & ",late_fee=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine - 5, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 5, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 5, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 5, stax_col_three_nine) _
    & ",oth=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine - 3, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 3, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 3, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 3, stax_col_three_nine) _
    & ",pen=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine - 4, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 4, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 4, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 4, stax_col_three_nine) _
    & ",rate="
    
    For s = start_row_three_nine To end_row_three_nine - 7
        temp = ""
        If s <> start_row_three_nine Then
            temp = ","
        End If
        desc = Application.VLookup(Sheets(sheet5_name).Cells(s, Chr(Asc(taxv_col_three_nine) - 1)), Sheets("Master").Range("D14:E24"), 2, False)

        temp = temp & "cess=" & Sheets(sheet5_name).Cells(s, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(s, ctax_col_three_nine) & ",desc=" & desc & ",igst=" & Sheets(sheet5_name).Cells(s, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(s, stax_col_three_nine) & ",tax_val=" & Sheets(sheet5_name).Cells(s, taxv_col_three_nine)
        final_string = final_string & temp
    Next
    final_string = final_string & ",tot_amt_paid=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine - 1, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 1, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 1, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 1, stax_col_three_nine) _
    & ",tot_amt_payable=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine - 2, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 2, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 2, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine - 2, stax_col_three_nine) _
    & ",unrec_amt=cess=" & Sheets(sheet5_name).Cells(end_row_three_nine, cetax_col_three_nine) & ",cgst=" & Sheets(sheet5_name).Cells(end_row_three_nine, ctax_col_three_nine) & ",igst=" & Sheets(sheet5_name).Cells(end_row_three_nine, itax_col_three_nine) & ",sgst=" & Sheets(sheet5_name).Cells(end_row_three_nine, stax_col_three_nine)
    'final_string = final_string & ",trd_name=" & Sheets(home_sheet).Cells(start_row_home + 3, fixed_col_home)
    
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
    
        final_string = final_string & ",certificate=cert_data=acc_typ=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 4, Chr(Asc(col_pb1) - 1)).value) & ",addr=bno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 16, col_pb1).value) _
        & ",building=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 17, col_pb1).value) & ",city=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 18, col_pb1).value) & ",district=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 18, Chr(Asc(col_pb1) + 2)).value) & ",fno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 16, Chr(Asc(col_pb1) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 19, Chr(Asc(col_pb1) + 2)).value) & ",road=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 17, Chr(Asc(col_pb1) + 2)).value) & ",state=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 19, col_pb1).value) _
        & ",audit_addr=bno=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 3, col_pb1).value) _
        & ",building=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 2, col_pb1).value) & ",city=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 1, col_pb1).value) & ",district=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 1, Chr(Asc(col_pb1) + 2)).value) & ",fno=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 3, Chr(Asc(col_pb1) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1, Chr(Asc(col_pb1) + 2)).value) & ",road=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 2, Chr(Asc(col_pb1) + 2)).value) & ",state=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1, col_pb1).value)
        
        final_string = final_string & ",bal_sheet_date=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 2, Chr(Asc(col_pb1) - 1)).value) & ",beg_date=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 5, Chr(Asc(col_pb1) - 1)).value) & ",cash_from_date=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 9, Chr(Asc(col_pb1) - 1)).value) & ",cash_to_date=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 10, Chr(Asc(col_pb1) - 1)).value)
        
        
        final_string = final_string & ",cert_textpartb1=add_addr=bno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 29, col_pb1).value) _
        & ",building=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 30, col_pb1).value) & ",city=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 31, col_pb1).value) & ",district=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 31, Chr(Asc(col_pb1) + 2)).value) & ",fno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 29, Chr(Asc(col_pb1) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 32, Chr(Asc(col_pb1) + 2)).value) & ",road=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 30, Chr(Asc(col_pb1) + 2)).value) & ",state=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 32, col_pb1).value) _
        & ",gstin=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 22, Chr(Asc(col_pb1) - 1)).value) & ",isagree="
        final_string = final_string & Sheets(sheet14_name).Cells(start_row_pb1 + 47, Chr(Asc(col_pb1) + 4)).value

        
        final_string = final_string & ",ishave="
        final_string = final_string & Sheets(sheet14_name).Cells(start_row_pb1 + 45, Chr(Asc(col_pb1) + 2)).value
        
        
        final_string = final_string & ",principal_addr=bno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 24, col_pb1).value) _
        & ",building=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 25, col_pb1).value) & ",city=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 26, col_pb1).value) & ",district=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 26, Chr(Asc(col_pb1) + 2)).value) & ",fno=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 24, Chr(Asc(col_pb1) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 27, Chr(Asc(col_pb1) + 2)).value) & ",road=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 25, Chr(Asc(col_pb1) + 2)).value) & ",state=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 27, col_pb1).value) & ",qualifications="
        
        For s = start_row_pb1_qual To end_row_pb1_qual
            temp = ""
            If s <> start_row_pb1_qual Then
                temp = ","
            End If
            qual = Application.VLookup(Sheets(sheet14_name).Cells(s, Chr(Asc(col_pb1) - 2)).value, Sheets("Master").Range("A7:C9"), 3, False)
            temp = temp & "qual_type=" & CStr(qual) & ",value=" & CStr(Sheets(sheet14_name).Cells(s, Chr(Asc(col_pb1) + 2)).value)
            final_string = final_string & temp
        Next

        
        final_string = final_string & ",date=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 4, Chr(Asc(col_pb1) - 1)).value) & ",doc_stat="
        final_string = final_string & Sheets(sheet14_name).Cells(start_row_pb1 + 36, Chr(Asc(col_pb1) - 3)).value
        
        
        
        final_string = final_string & ",end_date=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 6, Chr(Asc(col_pb1) - 1)).value) & ",mem_no=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 5, Chr(Asc(col_pb1) - 1)).value) & ",place=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 7, Chr(Asc(col_pb1) - 1)).value) & ",pronoun=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1, Chr(Asc(col_pb1) - 3)).value)
        
        final_string = final_string & ",signatory=" & CStr(Sheets(sheet14_name).Cells(end_row_pb1 - 6, Chr(Asc(col_pb1) - 1)).value) & ",taxpayer_name=" & CStr(Sheets(sheet14_name).Cells(start_row_pb1 + 14, col_pb1).value)
    
        final_string = final_string & ",cert_text=cert_text_partb1=qualifications="
        
        For s = start_row_pb1_qual To end_row_pb1_qual
            temp = ""
            If s <> start_row_pb1_qual Then
                temp = ","
            End If
            qual = Application.VLookup(Sheets(sheet14_name).Cells(s, Chr(Asc(col_pb1) - 2)).value, Sheets("Master").Range("A7:C9"), 3, False)
            temp = temp & "qual_type=" & CStr(qual) & ",value=" & CStr(Sheets(sheet14_name).Cells(s, Chr(Asc(col_pb1) + 2)).value)
            final_string = final_string & temp
        Next
        
        final_string = final_string & ",section1=line0="
        final_string = final_string & typ
        
    ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
        
         final_string = final_string & ",certificate=cert_data=acc_typ=" & CStr(Trim(Sheets(sheet15_name).Cells(start_row_pb2 + 24, col_pb2).value)) & ",addr=bno=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 4, col_pb2).value) _
        & ",building=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 5, col_pb2).value) & ",city=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 6, col_pb2).value) & ",district=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 6, Chr(Asc(col_pb2) + 2)).value) & ",fno=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 4, Chr(Asc(col_pb2) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 7, Chr(Asc(col_pb2) + 2)).value) & ",road=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 5, Chr(Asc(col_pb2) + 2)).value) & ",state=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 7, col_pb2).value) _
        & ",audit_addr=bno=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 3, Chr(Asc(col_pb2) + 1)).value) _
        & ",building=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 2, Chr(Asc(col_pb2) + 1)).value) & ",city=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 1, Chr(Asc(col_pb2) + 1)).value) & ",district=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 1, Chr(Asc(col_pb2) + 3)).value) & ",fno=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 3, Chr(Asc(col_pb2) + 3)).value) & ",pin_code=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2, Chr(Asc(col_pb2) + 3)).value) & ",road=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 2, Chr(Asc(col_pb2) + 3)).value) & ",state=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2, Chr(Asc(col_pb2) + 1)).value)
        
        final_string = final_string & ",bal_sheet_date=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 22, col_pb2).value) & ",beg_date=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 25, col_pb2).value) & ",cash_from_date=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 29, col_pb2).value) & ",cash_to_date=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 30, col_pb2).value)
        
        
        final_string = final_string & ",cert_textpartb2=audit_date=" & value & ",audit_typ=" & value & ",conducted_by=" & "addr=bno=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 13, col_pb2).value) _
        & ",building=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 14, col_pb2).value) & ",city=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 15, col_pb2).value) & ",district=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 15, Chr(Asc(col_pb2) + 2)).value) & ",fno=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 13, Chr(Asc(col_pb2) + 2)).value) & ",pin_code=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 16, Chr(Asc(col_pb2) + 2)).value) & ",road=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 14, Chr(Asc(col_pb2) + 2)).value) & ",state=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 16, col_pb2).value) _
        & ",name=" & value & ",qualifications="
        
        
        
        For s = start_row_pb2_qual To end_row_pb2_qual
            temp = ""
            If s <> start_row_pb2_qual Then
                temp = ","
            End If
            qual = Application.VLookup(Sheets(sheet15_name).Cells(s, Chr(Asc(col_pb2) - 2)).value, Sheets("Master").Range("B7:D8"), 3, False)
            temp = temp & "qual_type=" & CStr(qual) & ",value=" & CStr(Sheets(sheet15_name).Cells(s, Chr(Asc(col_pb2) + 2)).value)
            final_string = final_string & temp
        Next

        
        final_string = final_string & ",date=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 4, col_pb2).value) & ",doc_stat="
        final_string = final_string & Sheets(sheet15_name).Cells(start_row_pb2 + 36, Chr(Asc(col_pb2) - 3)).value
        
        
        final_string = final_string & ",end_date=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 26, Chr(Asc(col_pb2) - 1)).value) & ",mem_no=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 5, col_pb2).value) & ",place=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 7, col_pb2).value) & ",pronoun=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2, Chr(Asc(col_pb2) - 2)).value)
        
        final_string = final_string & ",signatory=" & CStr(Sheets(sheet15_name).Cells(end_row_pb2 - 6, col_pb2).value) & ",taxpayer_name=" & CStr(Sheets(sheet15_name).Cells(start_row_pb2 + 2, col_pb2).value)
    
        final_string = final_string & ",cert_text=cert_text_partb2=qualifications="
        
        For s = start_row_pb2_qual To end_row_pb2_qual
            temp = ""
            If s <> start_row_pb2_qual Then
                temp = ","
            End If
            qual = Application.VLookup(Sheets(sheet15_name).Cells(s, Chr(Asc(col_pb2) - 2)).value, Sheets("Master").Range("B7:D8"), 3, False)
            temp = temp & "qual_type=" & CStr(qual) & ",value=" & CStr(Sheets(sheet15_name).Cells(s, Chr(Asc(col_pb2) + 2)).value)
            final_string = final_string & temp
        Next
        
        final_string = final_string & ",section1=line0="
        final_string = final_string & typ
        
    End If
    
    
    'Sheets("Master").Cells(2, 10) = final_string
    
    
    'MsgBox final_string
    
    
End Function

Attribute VB_Name = "Import_Error_JSON"
Public Sub Import_Error_JSON()

    'Variable_Initialize.initiali
    Application.ScreenUpdating = False
    Dim jsonData As Object, filePath As Variant, filePaths() As String, fileProcessed As Integer: fileProcessed = 0
    Dim selection As Variant
   
        filePaths = FileUtil.openFile(False)
        
        
        For Each filePath In filePaths
            If Trim(filePath & vbNullString) <> vbNullString Then
                Set jsonData = FileUtil.openJSON(CStr(filePath))
                If Not jsonData Is Nothing Then
                    selection = MsgBox("Please note if there are any data in the excel sheet already, the values will be overwritten.", vbYesNo, "open")
                    If Not selection = 7 Then
                        Variable_Initialize.initiali
                        
                        Call Module1.clear_Reasons_sheet("PT II (6)")
                        Call Module1.clear_Reasons_sheet("PT II (8)")
                        Call Module1.clear_Reasons_sheet("PT III (10)")
                        Call Module1.clear_Reasons_sheet("PT IV(13)")
                        Call Module1.clear_Reasons_sheet("PT IV (15)")
                        Call Module1.clear_qual_pb1
                        Call Module1.clear_qual_pb2
                        Module1.clear_Expenses
                        Module1.clear_all_sheets
                    If Not jsonData.Exists("error_report") Then
                        MsgBox ("Invalid Error JSON file/format.Please check the file and try opening again."), vbCritical
                    Else
                         Call ImportEJsontoHome(jsonData)
                         Call ImportEJsontoReason_sheet(jsonData)
                         Call ImportEJsontoTable5(jsonData)
                         Call ImportEJsontoTable7(jsonData)
                         Call ImportEJsontoTable9(jsonData)
                         Call ImportEJsontoTable11(jsonData)
                         Call ImportEJsontoTable12(jsonData)
                         Call ImportEJsontoTable14(jsonData)
                         Call ImportEJsontoTable16(jsonData)
                         Call ImportEJsontoAdd_Liab(jsonData)
                         If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
                            Call ImportEJsontoB1(jsonData)
                        ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
                            Call ImportEJsontoB2(jsonData)
                        End If
                         
                         
                         'Call ImportEJsontoSingle_sheet(jsonData)
                         
                         'Call ImportEJsontoTax_sheet(jsonData)
                         fileProcessed = fileProcessed + 1
                    End If
                 End If
                End If
            End If
        Next
        If fileProcessed > 0 Then
            MsgBox ("GSTR-9C Error file succesfully imported.")
        Else
            MsgBox ("No files imported")
        End If
        Sheets(home_sheet).Select
    Application.ScreenUpdating = True
End Sub

Public Function ImportEJsontoHome(jsonData As Object)
    importFlag = True
    'Sheets(home_sheet).Unprotect Password
    Dim year, lyear, ryear As String
    Dim month As Integer
    col = fixed_col_home
    irow = start_row_home
    If jsonData("error_report")("audited_data").Exists("gstin") Then
        Sheets(home_sheet).Cells(irow, col).value = jsonData("error_report")("audited_data")("gstin")
    End If
    If jsonData("error_report")("audited_data").Exists("fp") Then
        str_v = "20" & CStr(CInt(Right(jsonData("error_report")("audited_data")("fp"), 2) - 1)) & "-" & Right(jsonData("error_report")("audited_data")("fp"), 2)
        Sheets(home_sheet).Cells(irow + 1, col).value = str_v
    End If
'    If jsonData("error_report")("audited_data").Exists("lgl_name") Then
'        Sheets(home_sheet).Cells(irow + 2, col).value = jsonData("error_report")("audited_data")("lgl_name")
'    End If
'    If jsonData("error_report")("audited_data").Exists("trd_name") Then
'        Sheets(home_sheet).Cells(irow + 3, col).value = jsonData("error_report")("audited_data")("trd_name")
'    End If
'    If jsonData("error_report")("audited_data").Exists("liable") Then
'        Sheets(home_sheet).Cells(irow + 4, col).value = jsonData("error_report")("audited_data")("liable")
'    End If
    If jsonData("error_report")("audited_data").Exists("act_name") Then
        Sheets(home_sheet).Cells(irow + 4, col).value = jsonData("error_report")("audited_data")("act_name")
    End If
    If jsonData("error_report")("audited_data").Exists("isauditor") Then
        If jsonData("error_report")("audited_data")("isauditor") = "Y" Then
            Sheets(home_sheet).Cells(irow + 5, col).value = "Yes"
        ElseIf jsonData("error_report")("audited_data")("isauditor") = "N" Then
            Sheets(home_sheet).Cells(irow + 5, col).value = "No"
        End If
    End If
    If jsonData("error_report").Exists("errors") Then
        For Each Item In jsonData("error_report")("errors")
            If Item("err_attr") = "audited_sign" Then
                MsgBox Item("err_msg")
            ElseIf Item("err_attr") = "gstin" Then
                Sheets(home_sheet).Cells(start_row_home, por_err_col_home).value = Sheets(home_sheet).Cells(start_row_home, por_err_col_home).value & Item("err_msg")
                Worksheets(home_sheet).Range(por_err_col_home & CStr(start_row_home)).WrapText = True
                Worksheets(home_sheet).Range(por_err_col_home & CStr(start_row_home)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "fp" Then
                Sheets(home_sheet).Cells(start_row_home + 1, por_err_col_home).value = Sheets(home_sheet).Cells(start_row_home + 1, por_err_col_home).value & Item("err_msg")
                Worksheets(home_sheet).Range(por_err_col_home & CStr(start_row_home + 1)).WrapText = True
                Worksheets(home_sheet).Range(por_err_col_home & CStr(start_row_home + 1)).EntireRow.AutoFit
            End If
        
        Next
    End If
    'Sheets(home_sheet).Protect Password:=Password, userinterfaceonly:=True
    'importFlag = False
End Function

Public Function ImportEJsontoTable5(jsonData)
    sheet_name = sheet1_name
    irow = start_row_two_five
    col = fixed_col_two_five
    If jsonData("error_report")("audited_data").Exists("table5") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("audited_data")("table5")("turnovr")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("audited_data")("table5")("unbil_rev_beg")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("audited_data")("table5")("unadj_adv_end")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("audited_data")("table5")("dmd_sup")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("error_report")("audited_data")("table5")("crd_nts_issued")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("error_report")("audited_data")("table5")("trd_dis")
        Sheets(sheet_name).Cells(irow + 6, col).value = jsonData("error_report")("audited_data")("table5")("turnovr_apr_jun")
        Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("error_report")("audited_data")("table5")("unbil_rev_end")
        Sheets(sheet_name).Cells(irow + 8, col).value = jsonData("error_report")("audited_data")("table5")("unadj_adv_beg")
        Sheets(sheet_name).Cells(irow + 9, col).value = jsonData("error_report")("audited_data")("table5")("crd_note_acc")
        Sheets(sheet_name).Cells(irow + 10, col).value = jsonData("error_report")("audited_data")("table5")("adj_dta")
        Sheets(sheet_name).Cells(irow + 11, col).value = jsonData("error_report")("audited_data")("table5")("turnovr_comp")
        Sheets(sheet_name).Cells(irow + 12, col).value = jsonData("error_report")("audited_data")("table5")("adj_turn_sec")
        Sheets(sheet_name).Cells(irow + 13, col).value = jsonData("error_report")("audited_data")("table5")("adj_turn_fef")
        Sheets(sheet_name).Cells(irow + 14, col).value = jsonData("error_report")("audited_data")("table5")("adj_turn_othrsn")
        'Sheets(sheet_name).Cells(irow + 15, col).Value = jsonData("table5")("annul_turn_adj")
        Sheets(sheet_name).Cells(irow + 16, col).value = jsonData("error_report")("audited_data")("table5")("annul_turn_decl")
        'Sheets(sheet_name).Cells(irow + 17, col).Value = jsonData("table5")("unrec_turnovr")
   End If
    
    If jsonData("error_report")("audited_data")("table5").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table5")("errors")
            If Item("err_attr") = "annul_turn_decl" Then
                Sheets(sheet_name).Cells(irow + 16, por_err_col_two_five).value = Sheets(sheet_name).Cells(irow + 16, por_err_col_two_five).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 16)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 16)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "annul_turn_adj" Then
                Sheets(sheet_name).Cells(irow + 15, por_err_col_two_five).value = Sheets(sheet_name).Cells(irow + 15, por_err_col_two_five).value & Item("err_msg")
                 Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 15)).WrapText = True
                 Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 15)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "unrec_turnovr" Then
                Sheets(sheet_name).Cells(irow + 17, por_err_col_two_five).value = Sheets(sheet_name).Cells(irow + 17, por_err_col_two_five).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 17)).WrapText = True
                 Worksheets(sheet_name).Range(por_err_col_two_five & CStr(irow + 17)).EntireRow.AutoFit
            End If
        Next
    End If
    
End Function
Public Function ImportEJsontoTable7(jsonData)
    sheet_name = sheet3_name
    irow = start_row_two_seven
    col = fixed_col_two_seven
    If jsonData("error_report")("audited_data").Exists("table7") Then
        'Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("audited_data")("table7")("annul_turn_adj")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("audited_data")("table7")("othr_turnovr")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("audited_data")("table7")("zero_sup")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("audited_data")("table7")("rev_sup")
        'Sheets(sheet_name).Cells(irow + 4, col).Value = jsonData("table7")("tax_turn_adj")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("error_report")("audited_data")("table7")("tax_turn_annul")
        'Sheets(sheet_name).Cells(irow + 6, col).Value = jsonData("table7")("unrec_tax_turn")
   End If
    If jsonData("error_report")("audited_data")("table7").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table7")("errors")
            If Item("err_attr") = "tax_turn_annul" Then
                Sheets(sheet_name).Cells(irow + 5, por_err_col_two_seven).value = Sheets(sheet_name).Cells(irow + 5, por_err_col_two_seven).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow + 5)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow + 5)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "annul_turn_adj" Then
                Sheets(sheet_name).Cells(irow, por_err_col_two_seven).value = Sheets(sheet_name).Cells(irow, por_err_col_two_seven).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "unrec_tax_turn" Then
                Sheets(sheet_name).Cells(irow + 6, por_err_col_two_seven).value = Sheets(sheet_name).Cells(irow + 6, por_err_col_two_seven).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow + 6)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_two_seven & CStr(irow + 6)).EntireRow.AutoFit
            End If
        Next
    End If
End Function
Public Function ImportEJsontoTable9(jsonData)
    sheet_name = sheet5_name
    irow = start_row_three_nine
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    If jsonData("error_report")("audited_data").Exists("table9") Then
        If jsonData("error_report")("audited_data")("table9").Exists("rate") Then
        For Each Item In jsonData("error_report")("audited_data")("table9")("rate")
            desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("E14:F24"), 2, False))
            Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
            Sheets(sheet_name).Cells(irow, tcol) = Item("tax_val")
            Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
            Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
            Sheets(sheet_name).Cells(irow, icol) = Item("igst")
            Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
            irow = irow + 1
        Next
        End If
            irow = end_row_three_nine - 6
            If jsonData("error_report")("audited_data")("table9").Exists("inter") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table9")("inter")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table9")("inter")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table9")("inter")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table9")("inter")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table9").Exists("late_fee") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table9")("late_fee")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table9")("late_fee")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table9")("late_fee")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table9")("late_fee")("cess")
            End If
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table9").Exists("pen") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table9")("pen")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table9")("pen")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table9")("pen")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table9")("pen")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table9").Exists("oth") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table9")("oth")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table9")("oth")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table9")("oth")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table9")("oth")("cess")
            End If
            irow = irow + 1
            
'            Sheets(sheet_name).Cells(irow, ccol) = jsonData("table9")("tot_amt_payable")("cgst")
'            Sheets(sheet_name).Cells(irow, scol) = jsonData("table9")("tot_amt_payable")("sgst")
'            Sheets(sheet_name).Cells(irow, icol) = jsonData("table9")("tot_amt_payable")("igst")
'            Sheets(sheet_name).Cells(irow, cecol) = jsonData("table9")("tot_amt_payable")("cess")
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table9").Exists("tot_amt_paid") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table9")("tot_amt_paid")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table9")("tot_amt_paid")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table9")("tot_amt_paid")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table9")("tot_amt_paid")("cess")
            End If
            irow = irow + 1
            
'            Sheets(sheet_name).Cells(irow, ccol) = jsonData("table9")("unrec_amt")("cgst")
'            Sheets(sheet_name).Cells(irow, scol) = jsonData("table9")("unrec_amt")("sgst")
'            Sheets(sheet_name).Cells(irow, icol) = jsonData("table9")("unrec_amt")("igst")
'            Sheets(sheet_name).Cells(irow, cecol) = jsonData("table9")("unrec_amt")("cess")
            
        
   End If
    end_row = end_row_three_nine
    If jsonData("error_report")("audited_data")("table9").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table9")("errors")
            If Item("err_attr") = "rate" Then
                Sheets(sheet_name).Cells(start_row_three_nine, por_err_col_three_nine).value = Sheets(sheet_name).Cells(start_row_three_nine, por_err_col_three_nine).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(start_row_three_nine)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(start_row_three_nine)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "tot_amt_paid" Then
                Sheets(sheet_name).Cells(end_row - 1, por_err_col_three_nine).value = Sheets(sheet_name).Cells(end_row - 1, por_err_col_three_nine).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row - 1)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row - 1)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "tot_amt_payable" Then
                Sheets(sheet_name).Cells(end_row - 2, por_err_col_three_nine).value = Sheets(sheet_name).Cells(end_row - 2, por_err_col_three_nine).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row - 2)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row - 2)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "unrec_tax_turn" Then
                Sheets(sheet_name).Cells(end_row, por_err_col_three_nine).value = Sheets(sheet_name).Cells(end_row, por_err_col_three_nine).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_three_nine & CStr(end_row)).EntireRow.AutoFit
            End If
        Next
    End If
End Function

Public Function ImportEJsontoTable11(jsonData)
    sheet_name = sheet7_name
    irow = start_row_three_eleven
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    If jsonData("error_report")("audited_data").Exists("table11") Then
        If jsonData("error_report")("audited_data")("table11").Exists("rate") Then
        For Each Item In jsonData("error_report")("audited_data")("table11")("rate")
            desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("I14:J20"), 2, False))
            Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
            Sheets(sheet_name).Cells(irow, tcol) = Item("tax_val")
            Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
            Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
            Sheets(sheet_name).Cells(irow, icol) = Item("igst")
            Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
            irow = irow + 1
        Next
        End If
            irow = end_row_three_eleven - 3
            
            If jsonData("error_report")("audited_data")("table11").Exists("inter") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table11")("inter")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table11")("inter")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table11")("inter")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table11")("inter")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table11").Exists("late_fee") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table11")("late_fee")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table11")("late_fee")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table11")("late_fee")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table11")("late_fee")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table11").Exists("pen") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table11")("pen")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table11")("pen")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table11")("pen")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table11")("pen")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("error_report")("audited_data")("table11").Exists("oth") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("error_report")("audited_data")("table11")("oth")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table11")("oth")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("error_report")("audited_data")("table11")("oth")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("error_report")("audited_data")("table11")("oth")("cess")
            End If
            
            If jsonData("error_report")("audited_data")("table11").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table11")("errors")
            If Item("err_attr") = "rate" Then
                Sheets(sheet_name).Cells(start_row_three_eleven, por_err_col_three_eleven).value = Sheets(sheet_name).Cells(start_row_three_eleven, por_err_col_three_eleven).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_three_eleven & CStr(start_row_three_eleven)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_three_eleven & CStr(start_row_three_eleven)).EntireRow.AutoFit
            End If
        Next
    End If
        
   End If
    

End Function
Public Function ImportEJsontoTable12(jsonData)
    sheet_name = sheet8_name
    irow = start_row_four_twelve
    col = fixed_col_four_twelve
    If jsonData("error_report")("audited_data").Exists("table12") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("audited_data")("table12")("itc_avail")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("audited_data")("table12")("itc_book_earl")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("audited_data")("table12")("itc_book_curr")
        'Sheets(sheet_name).Cells(irow + 3, col).Value = jsonData("table12")("itc_avail_audited")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("error_report")("audited_data")("table12")("itc_claim")
        'Sheets(sheet_name).Cells(irow + 5, col).Value = jsonData("table12")("unrec_itc")
    End If

    If jsonData("error_report")("audited_data")("table12").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table12")("errors")
            If Item("err_attr") = "itc_claim" Then
                Sheets(sheet_name).Cells(irow + 4, por_err_col_four_twelve).value = Sheets(sheet_name).Cells(irow + 4, por_err_col_four_twelve).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 4)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 4)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "itc_avail_audited" Then
                Sheets(sheet_name).Cells(irow + 3, por_err_col_four_twelve).value = Sheets(sheet_name).Cells(irow + 3, por_err_col_four_twelve).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 3)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 3)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "unrec_itc" Then
                Sheets(sheet_name).Cells(irow + 5, por_err_col_four_twelve).value = Sheets(sheet_name).Cells(irow + 5, por_err_col_four_twelve).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 5)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_twelve & CStr(irow + 5)).EntireRow.AutoFit
            End If
        Next
    End If

End Function
Public Function ImportEJsontoTable14(jsonData)
    
    sheet_name = sheet10_name
    irow = start_row_four_fourt
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    If jsonData("error_report")("audited_data").Exists("table14") Then
        If jsonData("error_report")("audited_data")("table14").Exists("items") Then
            For Each Item In jsonData("error_report")("audited_data")("table14")("items")
                'If Item.Exists("other_expenses") Then
                    'For Each Item1 In Item("other_expenses")
                        If irow > 22 Then
                        Common_Module.add_expense
                        End If
                        desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("Q14:R33"), 2, False))
                        Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 2)) = desc
                        Sheets(sheet_name).Cells(irow, tcol) = Item("val")
                        Sheets(sheet_name).Cells(irow, ccol) = Item("itc_amt")
                        Sheets(sheet_name).Cells(irow, scol) = Item("itc_avail")
                        irow = irow + 1
    '                Next
    '            End If
                
                'irow = irow + 1
                
            Next
        End If
        irow = end_row_four_fourt - 2
        
        'Sheets(sheet_name).Cells(irow, scol) = jsonData("table14")("tot_elig_itc")("itc_avail")
        irow = irow + 1
        If jsonData("error_report")("audited_data")("table14").Exists("itc_claim") Then
            Sheets(sheet_name).Cells(irow, scol) = jsonData("error_report")("audited_data")("table14")("itc_claim")("itc_avail")
        End If
        irow = irow + 1
        
        'Sheets(sheet_name).Cells(irow, scol) = jsonData("table14")("unrec_itc")("itc_avail")
    End If
    
    end_row = end_row_four_fourt
    If jsonData("error_report")("audited_data")("table14").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("table14")("errors")
            If Item("err_attr") = "items" Then
                Sheets(sheet_name).Cells(start_row_four_fourt, por_err_col_four_fourt).value = Sheets(sheet_name).Cells(start_row_four_fourt, por_err_col_four_fourt).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(start_row_four_fourt)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(start_row_four_fourt)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "itc_claim" Then
                Sheets(sheet_name).Cells(end_row - 1, por_err_col_four_fourt).value = Sheets(sheet_name).Cells(end_row - 1, por_err_col_four_fourt).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row - 1)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row - 1)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "tot_elig_itc" Then
                Sheets(sheet_name).Cells(end_row - 2, por_err_col_four_fourt).value = Sheets(sheet_name).Cells(end_row - 2, por_err_col_four_fourt).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row - 2)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row - 2)).EntireRow.AutoFit
            ElseIf Item("err_attr") = "unrec_itc" Then
                Sheets(sheet_name).Cells(end_row, por_err_col_four_fourt).value = Sheets(sheet_name).Cells(end_row, por_err_col_four_fourt).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_four_fourt & CStr(end_row)).EntireRow.AutoFit
            End If
        Next
    End If

End Function
Public Function ImportEJsontoTable16(jsonData)
    sheet_name = sheet12_name
    irow = start_row_four_sixt
    col = fixed_col_four_sixt
    If jsonData("error_report")("audited_data").Exists("table16") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("audited_data")("table16")("cgst")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("audited_data")("table16")("sgst")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("audited_data")("table16")("igst")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("audited_data")("table16")("cess")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("error_report")("audited_data")("table16")("inter")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("error_report")("audited_data")("table16")("pen")
    End If
    

End Function
Public Function ImportEJsontoAdd_Liab(jsonData)
    sheet_name = sheet13_name
    irow = start_row_five
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    If jsonData("error_report")("audited_data").Exists("add_liab") Then
        If jsonData("error_report")("audited_data")("add_liab").Exists("tax_pay") Then
            For Each Item In jsonData("error_report")("audited_data")("add_liab")("tax_pay")
                'MsgBox Item("desc")
                desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("M14:N28"), 2, False))
                'If IsError(vTest) Then
                Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
                'Else
                'Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = Item("desc")
                'End If
                'Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
                Sheets(sheet_name).Cells(irow, tcol) = Item("val")
                Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
                Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
                Sheets(sheet_name).Cells(irow, icol) = Item("igst")
                Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
                irow = irow + 1
            Next
        End If
        If jsonData("error_report")("audited_data").Exists("add_liab") Then
        Sheets(sheet_name).Cells(word_start_row_five, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("place")
        Sheets(sheet_name).Cells(word_start_row_five + 1, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("signatory")
        Sheets(sheet_name).Cells(word_start_row_five + 2, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("mem_no")
        Sheets(sheet_name).Cells(word_start_row_five + 3, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("date")
        Sheets(sheet_name).Cells(word_start_row_five + 4, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("bno")
        Sheets(sheet_name).Cells(word_start_row_five + 4, Chr(Asc(word_col_five) + 2)) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("fno")
        Sheets(sheet_name).Cells(word_start_row_five + 5, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("building")
        Sheets(sheet_name).Cells(word_start_row_five + 5, Chr(Asc(word_col_five) + 2)) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("road")
        Sheets(sheet_name).Cells(word_start_row_five + 6, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("city")
        Sheets(sheet_name).Cells(word_start_row_five + 6, Chr(Asc(word_col_five) + 2)) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("district")
        Sheets(sheet_name).Cells(word_start_row_five + 7, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("state")
        Sheets(sheet_name).Cells(word_start_row_five + 7, Chr(Asc(word_col_five) + 2)) = jsonData("error_report")("audited_data")("add_liab")("audit_addr")("pin_code")
        Sheets(sheet_name).Cells(word_start_row_five + 9, word_col_five) = jsonData("error_report")("audited_data")("add_liab")("pan_no")
        End If
    End If

    If jsonData("error_report")("audited_data")("add_liab").Exists("errors") Then
        For Each Item In jsonData("error_report")("audited_data")("add_liab")("errors")
            If Item("err_attr") = "tax_pay" Then
                Sheets(sheet_name).Cells(start_row_five, por_err_col_five).value = Sheets(sheet_name).Cells(start_row_five, por_err_col_five).value & Item("err_msg")
                Worksheets(sheet_name).Range(por_err_col_five & CStr(start_row_five)).WrapText = True
                Worksheets(sheet_name).Range(por_err_col_five & CStr(start_row_five)).EntireRow.AutoFit
            End If
        Next
    End If
End Function
Public Function ImportEJsontoB1(jsonData)
    sheet_name = sheet14_name
    irow = start_row_pb1
    Sheets(sheet14_name).Select
    col = col_pb1
    If jsonData("error_report").Exists("certificate") Then
        If jsonData("error_report")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = jsonData("error_report")("certificate")("cert_data")("pronoun")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("bal_sheet_date")
            Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("acc_typ")
            Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("beg_date")
            Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("end_date")
            Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("cash_from_date")
            Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("cash_to_date")
            Sheets(sheet_name).Cells(irow + 14, col).value = jsonData("error_report")("certificate")("cert_data")("taxpayer_name")
       End If
        irow = irow + 16
        If jsonData("error_report")("certificate")("cert_data").Exists("addr") Then
            Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("bno")
            Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("building")
            Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("city")
            Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("state")
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("fno")
            Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("road")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("district")
            Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("pin_code")
        End If
        irow = irow + 8
        If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb1") Then
                If jsonData("error_report")("certificate")("cert_data")("cert_textpartb1").Exists("principal_addr") Then
                    Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("bno")
                    Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("building")
                    Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("city")
                    Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("state")
                    Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("fno")
                    Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("road")
                    Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("district")
                    Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("pin_code")
                End If
        End If
        irow = irow + 5
        If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb1") Then
            If jsonData("error_report")("certificate")("cert_data")("cert_textpartb1").Exists("add_addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("add_addr")("pin_code")
            End If
        End If
        irow = irow + 7
        
        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = jsonData("error_report")("certificate")("cert_data")("doc_stat")
        If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb1") Then
            Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("ishave")
            Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("isagree")
        End If
        irow = irow + 25
        
        If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb1") Then
            If jsonData("error_report")("certificate")("cert_data")("cert_textpartb1").Exists("qualifications") Then
                For Each Item In jsonData("error_report")("certificate")("cert_data")("cert_textpartb1")("qualifications")
                    If irow > 66 Then
                        Common_Module.add_qual
                    End If
                    If Item("qual_type") = "2" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "2. List of Documents not maintained"
                    ElseIf Item("qual_type") = "3(a)" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "3(a). observations/ comments / discrepancies / inconsistencies in accounts and records maintained"
                    ElseIf Item("qual_type") = "5" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "5.Observation/qualification in Form 9C"
                    End If
                    Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)) = Item("value")
                    irow = irow + 1
                Next
            End If
        End If
        irow = end_row_pb1 - 7
        If jsonData("error_report")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("place")
            Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("signatory")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("mem_no")
            Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value = jsonData("error_report")("certificate")("cert_data")("date")
        End If
        irow = irow + 4
        
        If jsonData("error_report")("certificate").Exists("cert_data") Then
            If jsonData("error_report")("certificate")("cert_data").Exists("audit_addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("pin_code")
            End If
        End If
    End If
    If jsonData("error_report")("certificate")("cert_text").Exists("errors") Then
        For Each Item In jsonData("error_report")("certificate")("cert_text")("errors")
            If Item("err_attr") = "cert_text" Then
                Sheets(sheet_name).Cells(start_row_pb1, pb1_por_err_col).value = Sheets(sheet_name).Cells(start_row_pb1, pb1_por_err_col).value & Item("err_msg")
                Worksheets(sheet_name).Range(pb1_por_err_col & CStr(start_row_pb1)).WrapText = True
                Worksheets(sheet_name).Range(pb1_por_err_col & CStr(start_row_pb1)).EntireRow.AutoFit
            End If
        Next
    End If


End Function
Public Function ImportEJsontoB2(jsonData)
    sheet_name = sheet15_name
    irow = start_row_pb2
    Sheets(sheet15_name).Select
    col = col_pb2
    If jsonData("error_report").Exists("certificate") Then
        If jsonData("error_report")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = jsonData("error_report")("certificate")("cert_data")("pronoun")
            Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("taxpayer_name")
        End If
        irow = irow + 4
        If jsonData("error_report")("certificate").Exists("cert_data") Then
            If jsonData("error_report")("certificate")("cert_data").Exists("addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("addr")("pin_code")
            End If
            If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb2") Then
                If jsonData("error_report")("certificate")("cert_data")("cert_textpartb2").Exists("conducted_by") Then
                    Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("name")
                End If
            End If
        irow = irow + 9
            
            If jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb2") Then
                If jsonData("error_report")("certificate")("cert_data")("cert_textpartb2").Exists("conducted_by") Then
                    If jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by").Exists("addr") Then
                        Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("bno")
                        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("building")
                        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("city")
                        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("state")
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("fno")
                        Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("road")
                        Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("district")
                        Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("pin_code")
                    End If
                End If
                Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("audit_date")
                Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value = jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("audit_typ")
             End If
             Sheets(sheet_name).Cells(irow + 9, col).value = jsonData("error_report")("certificate")("cert_data")("bal_sheet_date")
             Sheets(sheet_name).Cells(irow + 11, col).value = jsonData("error_report")("certificate")("cert_data")("acc_typ")
             Sheets(sheet_name).Cells(irow + 12, col).value = jsonData("error_report")("certificate")("cert_data")("beg_date")
             Sheets(sheet_name).Cells(irow + 13, col).value = jsonData("error_report")("certificate")("cert_data")("end_date")
             Sheets(sheet_name).Cells(irow + 16, col).value = jsonData("error_report")("certificate")("cert_data")("cash_from_date")
             Sheets(sheet_name).Cells(irow + 17, col).value = jsonData("error_report")("certificate")("cert_data")("cash_to_date")
             
            
             irow = irow + 23
             Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = jsonData("error_report")("certificate")("cert_data")("doc_stat")
             irow = irow + 13
             If (jsonData("error_report")("certificate")("cert_data").Exists("cert_textpartb2")) Then
                If (jsonData("error_report")("certificate")("cert_data")("cert_textpartb2").Exists("qualifications")) Then
                    For Each Item In jsonData("error_report")("certificate")("cert_data")("cert_textpartb2")("qualifications")
                        If irow > 54 Then
                            Common_Module.add_qual
                        End If
                        If Item("qual_type") = "2" Then
                            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)) = "2. List of Documents not maintained"
                        ElseIf Item("qual_type") = "4" Then
                            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)) = "4.Observation/qualification in Form 9C"
                        End If
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)) = Item("value")
                        irow = irow + 1
                    Next
                End If
             End If
             irow = end_row_pb2 - 7
             Sheets(sheet_name).Cells(irow, col).value = jsonData("error_report")("certificate")("cert_data")("place")
             Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("error_report")("certificate")("cert_data")("signatory")
             Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("error_report")("certificate")("cert_data")("mem_no")
             Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("error_report")("certificate")("cert_data")("date")
             irow = irow + 4
             
             If (jsonData("error_report")("certificate")("cert_data").Exists("audit_addr")) Then
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 1)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 1)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 1)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 1)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 3)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 3)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 3)).value = jsonData("error_report")("certificate")("cert_data")("audit_addr")("pin_code")
            End If
        End If
    End If
    If jsonData("error_report")("certificate")("cert_text").Exists("errors") Then
        For Each Item In jsonData("error_report")("certificate")("cert_text")("errors")
            If Item("err_attr") = "cert_text" Then
                Sheets(sheet_name).Cells(start_row_pb2, pb2_por_err_col).value = Sheets(sheet_name).Cells(start_row_pb2, pb2_por_err_col).value & Item("err_msg")
                Worksheets(sheet_name).Range(pb2_por_err_col & CStr(start_row_pb2)).WrapText = True
                Worksheets(sheet_name).Range(pb2_por_err_col & CStr(start_row_pb2)).EntireRow.AutoFit
            End If
        Next
    End If


End Function

Public Function ImportEJsontoReason_sheet(jsonData)
    
    Dim json As Object
    If jsonData("error_report")("audited_data").Exists("table6") Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        end_row = end_row_two_six
        sheet_name = sheet2_name
        Sheets(sheet_name).Activate
        Set json = jsonData("error_report")("audited_data")("table6")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
        por_err_col = por_err_col_two_six
        If jsonData("error_report")("audited_data")("table6").Exists("errors") Then
            For Each Item In jsonData("error_report")("audited_data")("table6")("errors")
                If Item("err_attr") = "rsn" Then
                    Sheets(sheet_name).Cells(start_row, por_err_col).value = Sheets(sheet_name).Cells(start_row, por_err_col).value & Item("err_msg")
                    Worksheets(sheet_name).Range(por_err_col & CStr(start_row)).WrapText = True
                End If
            Next
        End If
    End If
    
    If jsonData("error_report")("audited_data").Exists("table8") Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        end_row = end_row_two_eight
        sheet_name = sheet4_name
        Sheets(sheet_name).Activate
        Set json = jsonData("error_report")("audited_data")("table8")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
        por_err_col = por_err_col_two_eight
        If jsonData("error_report")("audited_data")("table8").Exists("errors") Then
            For Each Item In jsonData("error_report")("audited_data")("table8")("errors")
                If Item("err_attr") = "rsn" Then
                    Sheets(sheet_name).Cells(start_row, por_err_col).value = Sheets(sheet_name).Cells(start_row, por_err_col).value & Item("err_msg")
                    Worksheets(sheet_name).Range(por_err_col & CStr(start_row)).WrapText = True
                End If
            Next
        End If
    End If
    
    If jsonData("error_report")("audited_data").Exists("table10") Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        end_row = end_row_three_ten
        sheet_name = sheet6_name
        Sheets(sheet_name).Activate
        Set json = jsonData("error_report")("audited_data")("table10")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
        por_err_col = por_err_col_three_ten
        If jsonData("error_report")("audited_data")("table10").Exists("errors") Then
            For Each Item In jsonData("error_report")("audited_data")("table10")("errors")
                If Item("err_attr") = "rsn" Then
                    Sheets(sheet_name).Cells(start_row, por_err_col).value = Sheets(sheet_name).Cells(start_row, por_err_col).value & Item("err_msg")
                    Worksheets(sheet_name).Range(por_err_col & CStr(start_row)).WrapText = True
                End If
            Next
        End If
    End If
    
    If jsonData("error_report")("audited_data").Exists("table13") Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        end_row = end_row_four_thirt
        sheet_name = sheet9_name
        Sheets(sheet_name).Activate
        Set json = jsonData("error_report")("audited_data")("table13")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
        por_err_col = por_err_col_four_thirt
        If jsonData("error_report")("audited_data")("table13").Exists("errors") Then
            For Each Item In jsonData("error_report")("audited_data")("table13")("errors")
                If Item("err_attr") = "rsn" Then
                    Sheets(sheet_name).Cells(start_row, por_err_col).value = Sheets(sheet_name).Cells(start_row, por_err_col).value & Item("err_msg")
                    Worksheets(sheet_name).Range(por_err_col & CStr(start_row)).WrapText = True
                End If
            Next
        End If
    End If
    
    If jsonData("error_report")("audited_data").Exists("table15") Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        end_row = end_row_four_fift
        sheet_name = sheet11_name
        Sheets(sheet_name).Activate
        Set json = jsonData("error_report")("audited_data")("table15")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
        por_err_col = por_err_col_four_fift
        If jsonData("error_report")("audited_data")("table15").Exists("errors") Then
            For Each Item In jsonData("error_report")("audited_data")("table15")("errors")
                If Item("err_attr") = "rsn" Then
                    Sheets(sheet_name).Cells(start_row, por_err_col).value = Sheets(sheet_name).Cells(start_row, por_err_col).value & Item("err_msg")
                    Worksheets(sheet_name).Range(por_err_col & CStr(start_row)).WrapText = True
                End If
            Next
        End If
    End If
    
    
End Function


Public Function Write_Reasons(jsonData, sheet_name, col, start_row, end_row)

    i = start_row
    
    For Each Item In jsonData("rsn")
        
        If i <> start_row Then
            Common_Module.Add_reasons_sheet
        End If
        'Sheets(sheet_name).Cells(i, Chr(Asc(col) - 1)) = Item("number")
        Sheets(sheet_name).Cells(i, col) = Item("desc")
        i = i + 1
       
        'Common_Module.Increment_Last_row (sheet_name)
    Next
    
    
End Function






Attribute VB_Name = "Import_JSON_Module"
Public Sub Import_JSON()

    'Variable_Initialize.initiali
    Application.ScreenUpdating = False
    Dim jsonData As Object, filePath As Variant, filePaths() As String, fileProcessed As Integer: fileProcessed = 0
    Dim selection As Variant
   
        filePaths = FileUtil.openFile(False)
        
        
        For Each filePath In filePaths
            If Trim(filePath & vbNullString) <> vbNullString Then
                Set jsonData = FileUtil.openJSON(CStr(filePath))
                If Not jsonData Is Nothing Then
                    selection = MsgBox("Please note if there are any data in the excel sheet already, the values will be overwritten.", vbYesNo, "open")
                    If Not selection = 7 Then
                        Variable_Initialize.initiali
                        
                        Call Module1.clear_Reasons_sheet("PT II (6)")
                        Call Module1.clear_Reasons_sheet("PT II (8)")
                        Call Module1.clear_Reasons_sheet("PT III (10)")
                        Call Module1.clear_Reasons_sheet("PT IV(13)")
                        Call Module1.clear_Reasons_sheet("PT IV (15)")
                        Call Module1.clear_qual_pb1
                        Call Module1.clear_qual_pb2
                        Module1.clear_Expenses
                         Module1.clear_all_sheets
                    If jsonData.Exists("error_report") Then
                        MsgBox ("Invalid JSON file/format.Please check the file and try opening again."), vbCritical
                    Else
                         Call ImportJsontoHome(jsonData)
                         Call ImportJsontoReason_sheet(jsonData)
                         Call ImportJsontoTable5(jsonData)
                         Call ImportJsontoTable7(jsonData)
                         Call ImportJsontoTable9(jsonData)
                         Call ImportJsontoTable11(jsonData)
                         Call ImportJsontoTable12(jsonData)
                         Call ImportJsontoTable14(jsonData)
                         Call ImportJsontoTable16(jsonData)
                         Call ImportJsontoAdd_Liab(jsonData)
                         If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
                            Call ImportJsontoB1(jsonData)
                        ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
                            Call ImportJsontoB2(jsonData)
                        End If
                         
                         
                         'Call ImportJsontoSingle_sheet(jsonData)
                         
                         'Call ImportJsontoTax_sheet(jsonData)
                         fileProcessed = fileProcessed + 1
                    End If
                 End If
                End If
            End If
        Next
        If fileProcessed > 0 Then
            MsgBox ("Dowloaded GSTR-9C file succesfully imported")
        Else
            MsgBox ("No files imported")
        End If
        Sheets(home_sheet).Select
    Application.ScreenUpdating = True
End Sub


Public Function ImportJsontoHome(jsonData As Object)
    importFlag = True
    'Sheets(home_sheet).Unprotect Password
    Dim year, lyear, ryear As String
    Dim month As Integer
    col = fixed_col_home
    irow = start_row_home
    If jsonData("gstr9cdata")("audited_data").Exists("gstin") Then
        Sheets(home_sheet).Cells(irow, col).value = jsonData("gstr9cdata")("audited_data")("gstin")
    End If
    If jsonData("gstr9cdata")("audited_data").Exists("fp") Then
        str_v = "20" & CStr(CInt(Right(jsonData("gstr9cdata")("audited_data")("fp"), 2) - 1)) & "-" & Right(jsonData("gstr9cdata")("audited_data")("fp"), 2)
        Sheets(home_sheet).Cells(irow + 1, col).value = str_v
    End If
'    If jsonData("gstr9cdata")("audited_data").Exists("lgl_name") Then
'        Sheets(home_sheet).Cells(irow + 2, col).value = jsonData("gstr9cdata")("audited_data")("lgl_name")
'    End If
'    If jsonData("gstr9cdata")("audited_data").Exists("trd_name") Then
'        Sheets(home_sheet).Cells(irow + 3, col).value = jsonData("gstr9cdata")("audited_data")("trd_name")
'    End If
'    If jsonData("gstr9cdata")("audited_data").Exists("liable") Then
'        Sheets(home_sheet).Cells(irow + 4, col).value = jsonData("gstr9cdata")("audited_data")("liable")
'    End If
    If jsonData("gstr9cdata")("audited_data").Exists("act_name") Then
        Sheets(home_sheet).Cells(irow + 4, col).value = jsonData("gstr9cdata")("audited_data")("act_name")
    End If
    If jsonData("gstr9cdata")("audited_data").Exists("isauditor") Then
        If jsonData("gstr9cdata")("audited_data")("isauditor") = "Y" Then
            Sheets(home_sheet).Cells(irow + 5, col).value = "Yes"
        ElseIf jsonData("gstr9cdata")("audited_data")("isauditor") = "N" Then
            Sheets(home_sheet).Cells(irow + 5, col).value = "No"
        End If
    End If
    
    
    'Sheets(home_sheet).Protect Password:=Password, userinterfaceonly:=True
    'importFlag = False
End Function

Public Function ImportJsontoTable5(jsonData)
    sheet_name = sheet1_name
    irow = start_row_two_five
    col = fixed_col_two_five
    If jsonData("gstr9cdata")("audited_data").Exists("table5") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("audited_data")("table5")("turnovr")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("audited_data")("table5")("unbil_rev_beg")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("audited_data")("table5")("unadj_adv_end")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("audited_data")("table5")("dmd_sup")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("gstr9cdata")("audited_data")("table5")("crd_nts_issued")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("gstr9cdata")("audited_data")("table5")("trd_dis")
        Sheets(sheet_name).Cells(irow + 6, col).value = jsonData("gstr9cdata")("audited_data")("table5")("turnovr_apr_jun")
        Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("gstr9cdata")("audited_data")("table5")("unbil_rev_end")
        Sheets(sheet_name).Cells(irow + 8, col).value = jsonData("gstr9cdata")("audited_data")("table5")("unadj_adv_beg")
        Sheets(sheet_name).Cells(irow + 9, col).value = jsonData("gstr9cdata")("audited_data")("table5")("crd_note_acc")
        Sheets(sheet_name).Cells(irow + 10, col).value = jsonData("gstr9cdata")("audited_data")("table5")("adj_dta")
        Sheets(sheet_name).Cells(irow + 11, col).value = jsonData("gstr9cdata")("audited_data")("table5")("turnovr_comp")
        Sheets(sheet_name).Cells(irow + 12, col).value = jsonData("gstr9cdata")("audited_data")("table5")("adj_turn_sec")
        Sheets(sheet_name).Cells(irow + 13, col).value = jsonData("gstr9cdata")("audited_data")("table5")("adj_turn_fef")
        Sheets(sheet_name).Cells(irow + 14, col).value = jsonData("gstr9cdata")("audited_data")("table5")("adj_turn_othrsn")
        'Sheets(sheet_name).Cells(irow + 15, col).Value = jsonData("table5")("annul_turn_adj")
        Sheets(sheet_name).Cells(irow + 16, col).value = jsonData("gstr9cdata")("audited_data")("table5")("annul_turn_decl")
        'Sheets(sheet_name).Cells(irow + 17, col).Value = jsonData("table5")("unrec_turnovr")
   End If

End Function
Public Function ImportJsontoTable7(jsonData)
    sheet_name = sheet3_name
    irow = start_row_two_seven
    col = fixed_col_two_seven
    If jsonData("gstr9cdata")("audited_data").Exists("table7") Then
        'Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("audited_data")("table7")("annul_turn_adj")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("audited_data")("table7")("othr_turnovr")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("audited_data")("table7")("zero_sup")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("audited_data")("table7")("rev_sup")
        'Sheets(sheet_name).Cells(irow + 4, col).Value = jsonData("table7")("tax_turn_adj")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("gstr9cdata")("audited_data")("table7")("tax_turn_annul")
        'Sheets(sheet_name).Cells(irow + 6, col).Value = jsonData("table7")("unrec_tax_turn")
   End If

End Function
Public Function ImportJsontoTable9(jsonData)
    sheet_name = sheet5_name
    irow = start_row_three_nine
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    If jsonData("gstr9cdata")("audited_data").Exists("table9") Then
        If jsonData("gstr9cdata")("audited_data")("table9").Exists("rate") Then
        For Each Item In jsonData("gstr9cdata")("audited_data")("table9")("rate")
            desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("E14:F24"), 2, False))
            Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
            Sheets(sheet_name).Cells(irow, tcol) = Item("tax_val")
            Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
            Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
            Sheets(sheet_name).Cells(irow, icol) = Item("igst")
            Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
            irow = irow + 1
        Next
        End If
            irow = end_row_three_nine - 6
            If jsonData("gstr9cdata")("audited_data")("table9").Exists("inter") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table9")("inter")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table9")("inter")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table9")("inter")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table9")("inter")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table9").Exists("late_fee") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table9")("late_fee")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table9")("late_fee")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table9")("late_fee")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table9")("late_fee")("cess")
            End If
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table9").Exists("pen") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table9")("pen")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table9")("pen")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table9")("pen")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table9")("pen")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table9").Exists("oth") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table9")("oth")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table9")("oth")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table9")("oth")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table9")("oth")("cess")
            End If
            irow = irow + 1
            
'            Sheets(sheet_name).Cells(irow, ccol) = jsonData("table9")("tot_amt_payable")("cgst")
'            Sheets(sheet_name).Cells(irow, scol) = jsonData("table9")("tot_amt_payable")("sgst")
'            Sheets(sheet_name).Cells(irow, icol) = jsonData("table9")("tot_amt_payable")("igst")
'            Sheets(sheet_name).Cells(irow, cecol) = jsonData("table9")("tot_amt_payable")("cess")
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table9").Exists("tot_amt_paid") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table9")("tot_amt_paid")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table9")("tot_amt_paid")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table9")("tot_amt_paid")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table9")("tot_amt_paid")("cess")
            End If
            irow = irow + 1
            
'            Sheets(sheet_name).Cells(irow, ccol) = jsonData("table9")("unrec_amt")("cgst")
'            Sheets(sheet_name).Cells(irow, scol) = jsonData("table9")("unrec_amt")("sgst")
'            Sheets(sheet_name).Cells(irow, icol) = jsonData("table9")("unrec_amt")("igst")
'            Sheets(sheet_name).Cells(irow, cecol) = jsonData("table9")("unrec_amt")("cess")
            
        
   End If

End Function

Public Function ImportJsontoTable11(jsonData)
    sheet_name = sheet7_name
    irow = start_row_three_eleven
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    If jsonData("gstr9cdata")("audited_data").Exists("table11") Then
        If jsonData("gstr9cdata")("audited_data")("table11").Exists("rate") Then
        For Each Item In jsonData("gstr9cdata")("audited_data")("table11")("rate")
            desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("I14:J20"), 2, False))
            Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
            Sheets(sheet_name).Cells(irow, tcol) = Item("tax_val")
            Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
            Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
            Sheets(sheet_name).Cells(irow, icol) = Item("igst")
            Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
            irow = irow + 1
        Next
        End If
            irow = end_row_three_eleven - 3
            
            If jsonData("gstr9cdata")("audited_data")("table11").Exists("inter") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table11")("inter")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table11")("inter")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table11")("inter")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table11")("inter")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table11").Exists("late_fee") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table11")("late_fee")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table11")("late_fee")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table11")("late_fee")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table11")("late_fee")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table11").Exists("pen") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table11")("pen")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table11")("pen")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table11")("pen")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table11")("pen")("cess")
            End If
            
            irow = irow + 1
            
            If jsonData("gstr9cdata")("audited_data")("table11").Exists("oth") Then
                Sheets(sheet_name).Cells(irow, ccol) = jsonData("gstr9cdata")("audited_data")("table11")("oth")("cgst")
                Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table11")("oth")("sgst")
                Sheets(sheet_name).Cells(irow, icol) = jsonData("gstr9cdata")("audited_data")("table11")("oth")("igst")
                Sheets(sheet_name).Cells(irow, cecol) = jsonData("gstr9cdata")("audited_data")("table11")("oth")("cess")
            End If
            
        
   End If
    

End Function
Public Function ImportJsontoTable12(jsonData)
    sheet_name = sheet8_name
    irow = start_row_four_twelve
    col = fixed_col_four_twelve
    If jsonData("gstr9cdata")("audited_data").Exists("table12") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("audited_data")("table12")("itc_avail")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("audited_data")("table12")("itc_book_earl")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("audited_data")("table12")("itc_book_curr")
        'Sheets(sheet_name).Cells(irow + 3, col).Value = jsonData("table12")("itc_avail_audited")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("gstr9cdata")("audited_data")("table12")("itc_claim")
        'Sheets(sheet_name).Cells(irow + 5, col).Value = jsonData("table12")("unrec_itc")
    End If


End Function
Public Function ImportJsontoTable14(jsonData)
    
    sheet_name = sheet10_name
    irow = start_row_four_fourt
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    If jsonData("gstr9cdata")("audited_data").Exists("table14") Then
        If jsonData("gstr9cdata")("audited_data")("table14").Exists("items") Then
            For Each Item In jsonData("gstr9cdata")("audited_data")("table14")("items")
                'If Item.Exists("other_expenses") Then
                    'For Each Item1 In Item("other_expenses")
                        If irow > 22 Then
                        Common_Module.add_expense
                        End If
                        desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("Q14:R33"), 2, False))
                        Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 2)) = desc
                        Sheets(sheet_name).Cells(irow, tcol) = Item("val")
                        Sheets(sheet_name).Cells(irow, ccol) = Item("itc_amt")
                        Sheets(sheet_name).Cells(irow, scol) = Item("itc_avail")
                        irow = irow + 1
    '                Next
    '            End If
                
                'irow = irow + 1
                
            Next
        End If
        irow = end_row_four_fourt - 2
        
        'Sheets(sheet_name).Cells(irow, scol) = jsonData("table14")("tot_elig_itc")("itc_avail")
        irow = irow + 1
        If jsonData("gstr9cdata")("audited_data")("table14").Exists("itc_claim") Then
            Sheets(sheet_name).Cells(irow, scol) = jsonData("gstr9cdata")("audited_data")("table14")("itc_claim")("itc_avail")
        End If
        irow = irow + 1
        
        'Sheets(sheet_name).Cells(irow, scol) = jsonData("table14")("unrec_itc")("itc_avail")
    End If
    

End Function
Public Function ImportJsontoTable16(jsonData)
    sheet_name = sheet12_name
    irow = start_row_four_sixt
    col = fixed_col_four_sixt
    If jsonData("gstr9cdata")("audited_data").Exists("table16") Then
        Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("audited_data")("table16")("cgst")
        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("audited_data")("table16")("sgst")
        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("audited_data")("table16")("igst")
        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("audited_data")("table16")("cess")
        Sheets(sheet_name).Cells(irow + 4, col).value = jsonData("gstr9cdata")("audited_data")("table16")("inter")
        Sheets(sheet_name).Cells(irow + 5, col).value = jsonData("gstr9cdata")("audited_data")("table16")("pen")
    End If
    

End Function
Public Function ImportJsontoAdd_Liab(jsonData)
    sheet_name = sheet13_name
    irow = start_row_five
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    If jsonData("gstr9cdata")("audited_data").Exists("add_liab") Then
        If jsonData("gstr9cdata")("audited_data")("add_liab").Exists("tax_pay") Then
            For Each Item In jsonData("gstr9cdata")("audited_data")("add_liab")("tax_pay")
                'MsgBox Item("desc")
                desc = CStr(Application.VLookup(Item("desc"), Sheets("Master").Range("M14:N28"), 2, False))
                'If IsError(vTest) Then
                Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
                'Else
                'Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = Item("desc")
                'End If
                'Sheets(sheet_name).Cells(irow, Chr(Asc(tcol) - 1)) = desc
                Sheets(sheet_name).Cells(irow, tcol) = Item("val")
                Sheets(sheet_name).Cells(irow, ccol) = Item("cgst")
                Sheets(sheet_name).Cells(irow, scol) = Item("sgst")
                Sheets(sheet_name).Cells(irow, icol) = Item("igst")
                Sheets(sheet_name).Cells(irow, cecol) = Item("cess")
                irow = irow + 1
            Next
        End If
        If jsonData("gstr9cdata")("audited_data").Exists("add_liab") Then
        Sheets(sheet_name).Cells(word_start_row_five, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("place")
        Sheets(sheet_name).Cells(word_start_row_five + 1, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("signatory")
        Sheets(sheet_name).Cells(word_start_row_five + 2, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("mem_no")
        Sheets(sheet_name).Cells(word_start_row_five + 3, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("date")
        Sheets(sheet_name).Cells(word_start_row_five + 4, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("bno")
        Sheets(sheet_name).Cells(word_start_row_five + 4, Chr(Asc(word_col_five) + 2)) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("fno")
        Sheets(sheet_name).Cells(word_start_row_five + 5, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("building")
        Sheets(sheet_name).Cells(word_start_row_five + 5, Chr(Asc(word_col_five) + 2)) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("road")
        Sheets(sheet_name).Cells(word_start_row_five + 6, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("city")
        Sheets(sheet_name).Cells(word_start_row_five + 6, Chr(Asc(word_col_five) + 2)) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("district")
        Sheets(sheet_name).Cells(word_start_row_five + 7, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("state")
        Sheets(sheet_name).Cells(word_start_row_five + 7, Chr(Asc(word_col_five) + 2)) = jsonData("gstr9cdata")("audited_data")("add_liab")("audit_addr")("pin_code")
        Sheets(sheet_name).Cells(word_start_row_five + 9, word_col_five) = jsonData("gstr9cdata")("audited_data")("add_liab")("pan_no")
        End If
    End If
    
End Function
Public Function ImportJsontoB1(jsonData)
    sheet_name = sheet14_name
    irow = start_row_pb1
    Sheets(sheet14_name).Select
    col = col_pb1
    If jsonData("gstr9cdata").Exists("certificate") Then
        If jsonData("gstr9cdata")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("pronoun")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("bal_sheet_date")
            Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("acc_typ")
            Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("beg_date")
            Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("end_date")
            Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cash_from_date")
            Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cash_to_date")
            Sheets(sheet_name).Cells(irow + 14, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("taxpayer_name")
       End If
        irow = irow + 16
        If jsonData("gstr9cdata")("certificate")("cert_data").Exists("addr") Then
            Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("bno")
            Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("building")
            Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("city")
            Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("state")
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("fno")
            Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("road")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("district")
            Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("pin_code")
        End If
        irow = irow + 8
        If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb1") Then
                If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1").Exists("principal_addr") Then
                    Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("bno")
                    Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("building")
                    Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("city")
                    Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("state")
                    Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("fno")
                    Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("road")
                    Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("district")
                    Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("principal_addr")("pin_code")
                End If
        End If
        irow = irow + 5
        If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb1") Then
            If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1").Exists("add_addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("add_addr")("pin_code")
            End If
        End If
        irow = irow + 7
        
        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("doc_stat")
        If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb1") Then
            Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("ishave")
            Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("isagree")
        End If
        irow = irow + 25
        
        If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb1") Then
            If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1").Exists("qualifications") Then
                For Each Item In jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb1")("qualifications")
                    If irow > 66 Then
                        Common_Module.add_qual
                    End If
                    If Item("qual_type") = "2" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "2. List of Documents not maintained"
                    ElseIf Item("qual_type") = "3(a)" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "3(a). observations/ comments / discrepancies / inconsistencies in accounts and records maintained"
                    ElseIf Item("qual_type") = "5" Then
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "5.Observation/qualification in Form 9C"
                    End If
                    Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)) = Item("value")
                    irow = irow + 1
                Next
            End If
        End If
        irow = end_row_pb1 - 7
        If jsonData("gstr9cdata")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("place")
            Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("signatory")
            Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("mem_no")
            Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) - 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("date")
        End If
        irow = irow + 4
        
        If jsonData("gstr9cdata")("certificate").Exists("cert_data") Then
            If jsonData("gstr9cdata")("certificate")("cert_data").Exists("audit_addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("pin_code")
            End If
        End If
    End If
    


End Function
Public Function ImportJsontoB2(jsonData)
    sheet_name = sheet15_name
    irow = start_row_pb2
    Sheets(sheet15_name).Select
    col = col_pb2
    If jsonData("gstr9cdata").Exists("certificate") Then
        If jsonData("gstr9cdata")("certificate").Exists("cert_data") Then
            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("pronoun")
            Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("taxpayer_name")
        End If
        irow = irow + 4
        If jsonData("gstr9cdata")("certificate").Exists("cert_data") Then
            If jsonData("gstr9cdata")("certificate")("cert_data").Exists("addr") Then
                Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("building")
                Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("city")
                Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("addr")("pin_code")
            End If
            If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb2") Then
                If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2").Exists("conducted_by") Then
                    Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("name")
                End If
            End If
        irow = irow + 9
            
            If jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb2") Then
                If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2").Exists("conducted_by") Then
                    If jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by").Exists("addr") Then
                        Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("bno")
                        Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("building")
                        Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("city")
                        Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("state")
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("fno")
                        Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("road")
                        Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("district")
                        Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("conducted_by")("addr")("pin_code")
                    End If
                End If
                Sheets(sheet_name).Cells(irow + 7, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("audit_date")
                Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("audit_typ")
             End If
             Sheets(sheet_name).Cells(irow + 9, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("bal_sheet_date")
             Sheets(sheet_name).Cells(irow + 11, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("acc_typ")
             Sheets(sheet_name).Cells(irow + 12, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("beg_date")
             Sheets(sheet_name).Cells(irow + 13, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("end_date")
             Sheets(sheet_name).Cells(irow + 16, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cash_from_date")
             Sheets(sheet_name).Cells(irow + 17, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("cash_to_date")
             
            
             irow = irow + 23
             Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = jsonData("gstr9cdata")("certificate")("cert_data")("doc_stat")
             irow = irow + 13
             If (jsonData("gstr9cdata")("certificate")("cert_data").Exists("cert_textpartb2")) Then
                If (jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2").Exists("qualifications")) Then
                    For Each Item In jsonData("gstr9cdata")("certificate")("cert_data")("cert_textpartb2")("qualifications")
                        If irow > 54 Then
                            Common_Module.add_qual
                        End If
                        If Item("qual_type") = "2" Then
                            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)) = "2. List of Documents not maintained"
                        ElseIf Item("qual_type") = "4" Then
                            Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)) = "4.Observation/qualification in Form 9C"
                        End If
                        Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)) = Item("value")
                        irow = irow + 1
                    Next
                End If
             End If
             irow = end_row_pb2 - 7
             Sheets(sheet_name).Cells(irow, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("place")
             Sheets(sheet_name).Cells(irow + 1, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("signatory")
             Sheets(sheet_name).Cells(irow + 2, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("mem_no")
             Sheets(sheet_name).Cells(irow + 3, col).value = jsonData("gstr9cdata")("certificate")("cert_data")("date")
             irow = irow + 4
             
             If (jsonData("gstr9cdata")("certificate")("cert_data").Exists("audit_addr")) Then
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("bno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("building")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("city")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 1)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("state")
                Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("fno")
                Sheets(sheet_name).Cells(irow + 1, Chr(Asc(col) + 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("road")
                Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) + 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("district")
                Sheets(sheet_name).Cells(irow + 3, Chr(Asc(col) + 3)).value = jsonData("gstr9cdata")("certificate")("cert_data")("audit_addr")("pin_code")
            End If
        End If
    End If


End Function

Public Function ImportJsontoReason_sheet(jsonData)
    
    Dim json As Object
    If jsonData("gstr9cdata")("audited_data").Exists("table6") Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        end_row = end_row_two_six
        sheet_name = sheet2_name
        Sheets(sheet_name).Activate
        Set json = jsonData("gstr9cdata")("audited_data")("table6")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
    End If
    
    If jsonData("gstr9cdata")("audited_data").Exists("table8") Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        end_row = end_row_two_eight
        sheet_name = sheet4_name
        Sheets(sheet_name).Activate
        Set json = jsonData("gstr9cdata")("audited_data")("table8")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
    End If
    
    If jsonData("gstr9cdata")("audited_data").Exists("table10") Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        end_row = end_row_three_ten
        sheet_name = sheet6_name
        Sheets(sheet_name).Activate
        Set json = jsonData("gstr9cdata")("audited_data")("table10")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
    End If
    
    If jsonData("gstr9cdata")("audited_data").Exists("table13") Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        end_row = end_row_four_thirt
        sheet_name = sheet9_name
        Sheets(sheet_name).Activate
        Set json = jsonData("gstr9cdata")("audited_data")("table13")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
    End If
    
    If jsonData("gstr9cdata")("audited_data").Exists("table15") Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        end_row = end_row_four_fift
        sheet_name = sheet11_name
        Sheets(sheet_name).Activate
        Set json = jsonData("gstr9cdata")("audited_data")("table15")
        Call Write_Reasons(json, sheet_name, col, start_row, end_row)
    End If
    
    
End Function


Public Function Write_Reasons(jsonData, sheet_name, col, start_row, end_row)

    i = start_row
    
    For Each Item In jsonData("rsn")
        
        If i <> start_row Then
            Common_Module.Add_reasons_sheet
        End If
        'Sheets(sheet_name).Cells(i, Chr(Asc(col) - 1)) = Item("number")
        Sheets(sheet_name).Cells(i, col) = Item("desc")
        i = i + 1
       
        'Common_Module.Increment_Last_row (sheet_name)
    Next
    
    
End Function





Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v2.3.0
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' === VBA-UTC Headers
#If Mac Then

#If VBA7 Then

' 64-bit Mac (2016)
Private Declare PtrSafe Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As LongPtr
Private Declare PtrSafe Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As LongPtr, ByVal utc_Number As LongPtr, ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As LongPtr) As LongPtr

#Else

' 32-bit Mac
Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#End If

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

#If VBA7 Then
Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As LongPtr
End Type

#Else

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#End If

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal JsonString As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    JsonString = VBA.Replace(VBA.Replace(VBA.Replace(JsonString, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")

    json_SkipSpaces JsonString, json_Index
    
    Select Case VBA.Mid$(JsonString, json_Index, 1)
    
    Case "{"
        Set ParseJson = json_ParseObject(JsonString, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(JsonString, json_Index)
    Case Else
        ' Error: Invalid JSON string
         Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(JsonString, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} JsonValue (Dictionary, Collection, or Array)
' @param {Integer|String} Whitespace "Pretty" print json with given number of spaces per indentation (Integer) or given string
' @return {String}
''
Public Function ConvertToJson(ByVal JsonValue As Variant, Optional ByVal Whitespace As Variant, Optional ByVal json_CurrentIndentation As Long = 0) As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    Dim json_Converted As String
    Dim json_SkipItem As Boolean
    Dim json_PrettyPrint As Boolean
    Dim json_Indentation As String
    Dim json_InnerIndentation As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True
    json_PrettyPrint = Not IsMissing(Whitespace)

    Select Case VBA.VarType(JsonValue)
    Case VBA.vbNull
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(JsonValue))

        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(JsonValue) Then
            ConvertToJson = JsonValue
        Else
            ConvertToJson = """" & json_Encode(JsonValue) & """"
        End If
    Case VBA.vbBoolean
        If JsonValue Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
                json_InnerIndentation = VBA.String$(json_CurrentIndentation + 2, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
                json_InnerIndentation = VBA.Space$((json_CurrentIndentation + 2) * Whitespace)
            End If
        End If

        ' Array
        json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(JsonValue, 1)
        json_UBound = UBound(JsonValue, 1)
        json_LBound2D = LBound(JsonValue, 2)
        json_UBound2D = UBound(JsonValue, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    ' Append comma to previous line
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    ' 2D Array
                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If
                    json_BufferAppend json_Buffer, json_Indentation & "[", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                        End If

                        json_Converted = ConvertToJson(JsonValue(json_Index, json_Index2D), Whitespace, json_CurrentIndentation + 2)

                        ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                        If json_Converted = "" Then
                            ' (nest to only check if converted = "")
                            If json_IsUndefined(JsonValue(json_Index, json_Index2D)) Then
                                json_Converted = "null"
                            End If
                        End If

                        If json_PrettyPrint Then
                            json_Converted = vbNewLine & json_InnerIndentation & json_Converted
                        End If

                        json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    If json_PrettyPrint Then
                        json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If

                    json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    ' 1D Array
                    json_Converted = ConvertToJson(JsonValue(json_Index), Whitespace, json_CurrentIndentation + 1)

                    ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                    If json_Converted = "" Then
                        ' (nest to only check if converted = "")
                        If json_IsUndefined(JsonValue(json_Index)) Then
                            json_Converted = "null"
                        End If
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        If json_PrettyPrint Then
            json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
            Else
                json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
            End If
        End If

        json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)

    ' Dictionary or Collection
    Case VBA.vbObject
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
            End If
        End If

        ' Dictionary
        If VBA.TypeName(JsonValue) = "Dictionary" Then
            json_BufferAppend json_Buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In JsonValue.Keys
                ' For Objects, undefined (Empty/Nothing) is not added to object
                json_Converted = ConvertToJson(JsonValue(json_Key), Whitespace, json_CurrentIndentation + 1)
                If json_Converted = "" Then
                    json_SkipItem = json_IsUndefined(JsonValue(json_Key))
                Else
                    json_SkipItem = False
                End If

                If Not json_SkipItem Then
                    If json_IsFirstItem Then
                        json_IsFirstItem = False
                    Else
                        json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & """" & json_Key & """: " & json_Converted
                    Else
                        json_Converted = """" & json_Key & """:" & json_Converted
                    End If

                    json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Key

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "}", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(JsonValue) = "Collection" Then
            json_BufferAppend json_Buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In JsonValue
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_Buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_Converted = ConvertToJson(json_Value, Whitespace, json_CurrentIndentation + 1)

                ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                If json_Converted = "" Then
                    ' (nest to only check if converted = "")
                    If json_IsUndefined(json_Value) Then
                        json_Converted = "null"
                    End If
                End If

                If json_PrettyPrint Then
                    json_Converted = vbNewLine & json_Indentation & json_Converted
                End If

                json_BufferAppend json_Buffer, json_Converted, json_BufferPosition, json_BufferLength
            Next json_Value

            If json_PrettyPrint Then
                json_BufferAppend json_Buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_Buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_Buffer, json_BufferPosition)
    Case VBA.vbInteger, VBA.vbLong, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency, VBA.vbDecimal
        ' Number (use decimals for numbers)
        ConvertToJson = VBA.Replace(JsonValue, ",", ".")
    Case Else
        ' vbEmpty, vbError, vbDataObject, vbByte, vbUserDefinedType
        ' Use VBA's built-in to-string
        On Error Resume Next
        ConvertToJson = JsonValue
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.Add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_Buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_Buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_Buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_Buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_Buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_Buffer, VBA.ChrW(VBA.val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_Buffer, json_BufferPosition)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    Dim json_IsLargeNumber As Boolean

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15/16 characters containing only numbers and decimal points -> Number
            ' (decimal doesn't factor into significant digit count, so if present check for 15 digits + decimal = 16)
            json_IsLargeNumber = IIf(InStr(json_Value, "."), Len(json_Value) >= 17, Len(json_Value) >= 16)
            If Not JsonOptions.UseDoubleForLargeNumbers And json_IsLargeNumber Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_IsUndefined(ByVal json_Value As Variant) As Boolean
    ' Empty / Nothing -> undefined
    Select Case VBA.VarType(json_Value)
    Case VBA.vbEmpty
        json_IsUndefined = True
    Case VBA.vbObject
        Select Case VBA.TypeName(json_Value)
        Case "Empty", "Nothing"
            json_IsUndefined = True
        End Select
    End Select
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_Buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, ", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_Buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_Buffer, json_BufferPosition)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_Buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Put "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp
    '
    ' and clsStringAppend from Philip Swannell
    ' https://github.com/VBA-tools/VBA-JSON/pull/82

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.Len(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunk
        ' (double buffer length or append length, whichever is bigger)
        Dim json_AddedLength As Long
        json_AddedLength = IIf(json_AppendLength > json_BufferLength, json_AppendLength, json_BufferLength)

        json_Buffer = json_Buffer & VBA.Space$(json_AddedLength)
        json_BufferLength = json_BufferLength + json_AddedLength
    End If

    ' Note: Namespacing with VBA.Mid$ doesn't work properly here, throwing compile error:
    ' Function call on left-hand side of assignment must return Variant or Object
    Mid$(json_Buffer, json_BufferPosition + 1, json_AppendLength) = CStr(json_Append)
    json_BufferPosition = json_BufferPosition + json_AppendLength
End Sub

Private Function json_BufferToString(ByRef json_Buffer As String, ByVal json_BufferPosition As Long) As String
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_Buffer, json_BufferPosition)
    End If
End Function

''
' VBA-UTC v1.0.5
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), Int(VBA.val(utc_OffsetParts(2))))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), Int(VBA.val(utc_TimeParts(2))))
        End Select

        ParseIso = ParseUtc(ParseIso)

        If utc_HasOffset Then
            ParseIso = ParseIso - utc_Offset
        End If
    End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")

    Exit Function

utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
#If VBA7 Then
    Dim utc_File As LongPtr
    Dim utc_Read As LongPtr
#Else
    Dim utc_File As Long
    Dim utc_Read As Long
#End If

    Dim utc_Chunk As String

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = CLng(utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File))
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, CLng(utc_Read))
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = CLng(utc_pclose(utc_File))
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If


Attribute VB_Name = "Module1"
Public Sub insert_sheet()
    Dim s As Worksheet, t As String
    Dim i As Long, K As Long
    K = Sheets.count
    Sheets("Table 2").Visible = xlSheetHidden
    Sheets("Table 1").Visible = xlSheetHidden
    Sheets("Table 3").Visible = xlSheetHidden
    Sheets("Table 4").Visible = xlSheetHidden
    Sheets("Table 1").Visible = xlSheetVisible
    For i = K To 1 Step -1
        t = Sheets(i).Name
        If t = "Table 1" Or t = "Table 4" Then
                Application.DisplayAlerts = False
                Sheets(i).Delete
                Application.DisplayAlerts = True
                'Exit For
        End If
    Next i
    Dim ws1 As Worksheet
    Sheets("Table 2").Visible = xlSheetVisible
    Set ws1 = ThisWorkbook.Worksheets("Table 2")
    ws1.Copy ThisWorkbook.Sheets(Sheets.count)
    Sheets("Table 3").Visible = xlSheetVisible
    Set ws1 = ThisWorkbook.Worksheets("Table 3")
    ws1.Copy ThisWorkbook.Sheets(Sheets.count)
    K = Sheets.count

    For i = K To 1 Step -1
        t = Sheets(i).Name
        If t = "Table 2 (2)" Then
                Application.DisplayAlerts = False
                Sheets(i).Name = "Table 1"
                Application.DisplayAlerts = True
                'Exit For
        ElseIf t = "Table 3 (2)" Then
                Application.DisplayAlerts = False
                Sheets(i).Name = "Table 4"
                Application.DisplayAlerts = True
                'Exit For
        End If
    Next i
    Sheets("Table 2").Visible = xlSheetVeryHidden
    Sheets("Table 1").Visible = xlSheetVeryHidden
    Sheets("Table 3").Visible = xlSheetVeryHidden
    Sheets("Table 4").Visible = xlSheetVeryHidden
End Sub
Public Sub count_prev_Reasons_sheet(sheet_name)
    If sheet_name = sheet2_name Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        sheet_name = sheet2_name
    ElseIf sheet_name = sheet4_name Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        sheet_name = sheet4_name
    ElseIf sheet_name = sheet6_name Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        sheet_name = sheet6_name
    ElseIf sheet_name = sheet9_name Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        sheet_name = sheet9_name
    
    ElseIf sheet_name = sheet11_name Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        sheet_name = sheet11_name
    End If
    count = Common_Module.Count_Reasons_sheet(sheet_name, start_row, Chr(Asc(col) - 1)) - 1
    If sheet_name = sheet2_name Then
        end_row_two_six = end_row_two_six + count
    ElseIf sheet_name = sheet4_name Then
        end_row_two_eight = end_row_two_eight
    ElseIf sheet_name = sheet6_name Then
        end_row_three_ten = end_row_three_ten + count
    ElseIf sheet_name = sheet9_name Then
        end_row_four_thirt = end_row_four_thirt + count
    ElseIf sheet_name = sheet11_name Then
        end_row_four_fift = end_row_four_fift + count
    End If
    
    
End Sub


Public Sub clear_Reasons_sheet(sheet_name)
    Sheets(sheet_name).Cells(5, "C").value = vbNullString
    Sheets(sheet_name).Cells(5, "C").Interior.ColorIndex = 0
    Sheets(sheet_name).Range("J5:J14").ClearContents
    Sheets(sheet_name).Range("K5:K14").ClearContents
    i = 6
    j = 14
    For s = i To j
        Sheets(sheet_name).Rows(i).EntireRow.Delete
    Next
End Sub

Public Sub clear_Expenses()
    
    For i = 6 To 37
        If Sheets(sheet10_name).Cells(i, "A") = "Q" Then
            start_i = i
        ElseIf Sheets(sheet10_name).Cells(i, "A") = "R" Then
            end_i = i
            Exit For
        End If
    
    Next
    count = start_i + 1
    Do While count < end_i
        Sheets(sheet10_name).Rows(start_i + 1).EntireRow.Delete
        count = count + 1
    Loop
End Sub
Public Sub count_prev_Expenses()
    
    For i = 6 To 37
        If Sheets(sheet10_name).Cells(i, "A") = "Q" Then
            start_i = i
        ElseIf Sheets(sheet10_name).Cells(i, "A") = "R" Then
            end_i = i
            Exit For
        End If
    
    Next
    end_row_four_fourt_exp = i - 1
    end_row_four_fourt = end_row_four_fourt + end_i - start_i - 1
    
End Sub
Public Sub clear_qual_pb1()
    
    For i = 66 To 81
        If Sheets(sheet14_name).Cells(i, "B") = 1 Then
            start_i = i
        ElseIf Sheets(sheet14_name).Cells(i, "B") = vbNullString Then
            end_i = i
            Exit For
        End If
    
    Next
    count = start_i + 1
    Do While count < end_i
        Sheets(sheet14_name).Rows(start_i + 1).EntireRow.Delete
        count = count + 1
    Loop
End Sub
Public Sub count_prev_qual_pb1()
    
    For i = 66 To 81
        If Sheets(sheet14_name).Cells(i, "B") = 1 Then
            start_i = i
        ElseIf Sheets(sheet14_name).Cells(i, "B") = vbNullString Then
            end_i = i
            Exit For
        End If
    
    Next
    end_row_pb1_qual = i - 1
    end_row_pb1 = end_row_pb1 + end_i - start_i - 1
End Sub
Public Sub clear_qual_pb2()
    
    For i = 54 To 69
        If Sheets(sheet15_name).Cells(i, "B") = 1 Then
            start_i = i
        ElseIf Sheets(sheet15_name).Cells(i, "B") = vbNullString Then
            end_i = i
            Exit For
        End If
    
    Next
    count = start_i + 1
    Do While count < end_i
        Sheets(sheet15_name).Rows(start_i + 1).EntireRow.Delete
        count = count + 1
    Loop
End Sub
Public Sub count_prev_qual_pb2()
    
    For i = 54 To 69
        If Sheets(sheet15_name).Cells(i, "B") = 1 Then
            start_i = i
        ElseIf Sheets(sheet15_name).Cells(i, "B") = vbNullString Then
            end_i = i
            Exit For
        End If
    
    Next
    end_row_pb2_qual = i - 1
    end_row_pb2 = end_row_pb2 + end_i - start_i - 1
End Sub
Public Sub clear_all_sheets()
    Variable_Initialize.initiali
    Application.EnableEvents = False
    sheet_name = home_sheet
    start_row = start_row_home
    col = fixed_col_home
    
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 1, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 2, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 3, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 4, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 5, col).Interior.ColorIndex = 0
    
    Sheets(sheet_name).Range(fixed_col_home & CStr(start_row) & ":" & fixed_col_home & CStr(start_row + 5)).ClearContents
    Sheets(sheet_name).Range(sv_col_home & CStr(start_row) & ":" & sv_col_home & CStr(start_row + 5)).ClearContents
    Sheets(sheet_name).Range(por_err_col_home & CStr(start_row) & ":" & por_err_col_home & CStr(start_row + 5)).ClearContents
    sheet_name = sheet1_name
    start_row = start_row_two_five
    end_row = end_row_two_five
    col = fixed_col_two_five
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    
    'Sheets(sheet_name).Range(sv_col_two_five & CStr(start_row) & ":" & sv_col_two_five & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(col & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(sv_col_two_five & CStr(start_row) & ":" & sv_col_two_five & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_two_five & CStr(start_row) & ":" & por_err_col_two_five & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    sheet_name = sheet3_name
    start_row = start_row_two_seven
    end_row = end_row_two_seven
    col = fixed_col_two_seven
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(col & CStr(start_row + 1) & ":" & col & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(col & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(sv_col_two_seven & CStr(start_row) & ":" & sv_col_two_seven & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_two_seven & CStr(start_row) & ":" & por_err_col_two_seven & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    sheet_name = sheet8_name
    start_row = start_row_four_twelve
    end_row = end_row_four_twelve
    col = fixed_col_four_twelve
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(col & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(sv_col_four_twelve & CStr(start_row) & ":" & sv_col_four_twelve & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_four_twelve & CStr(start_row) & ":" & por_err_col_four_twelve & CStr(end_row)).ClearContents
    For i = start_row To end_row - 1
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
        
    Next
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    sheet_name = sheet12_name
    start_row = start_row_four_sixt
    end_row = end_row_four_sixt
    col = fixed_col_four_sixt
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_sixt) & ":" & tcol & CStr(end_row_four_sixt)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Value2 = vbNullString
    Sheets(sheet_name).Range(sv_col_four_twelve & CStr(start_row) & ":" & sv_col_four_twelve & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_four_twelve & CStr(start_row) & ":" & por_err_col_four_twelve & CStr(end_row)).ClearContents
    
    start_row = start_row_pb1
    end_row = end_row_pb1
    sheet_name = sheet14_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    'Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(pb1_sv_col & CStr(start_row) & ":" & pb1_sv_col & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(pb1_por_err_col & CStr(start_row) & ":" & pb1_por_err_col & CStr(end_row)).ClearContents
    start_row = start_row_pb2
    end_row = end_row_pb2
    sheet_name = sheet15_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(pb2_sv_col & CStr(start_row) & ":" & pb2_sv_col & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(pb2_por_err_col & CStr(start_row) & ":" & pb2_por_err_col & CStr(end_row)).ClearContents
    
    sheet_name = sheet5_name
    start_row = start_row_three_nine
    end_row = end_row_three_nine
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    Sheets(sheet_name).Range(tcol & CStr(start_row) & ":" & tcol & CStr(end_row - 7)).Value2 = vbNullString
    Sheets(sheet_name).Range(ccol & CStr(start_row) & ":" & ccol & CStr(end_row - 3)).ClearContents
    Sheets(sheet_name).Range(scol & CStr(start_row) & ":" & scol & CStr(end_row - 3)).ClearContents
    Sheets(sheet_name).Range(icol & CStr(start_row) & ":" & icol & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(cecol & CStr(start_row) & ":" & cecol & CStr(end_row - 3)).ClearContents
    Sheets(sheet_name).Range(ccol & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(scol & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(icol & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(cecol & CStr(end_row - 1)).Value2 = vbNullString
    Sheets(sheet_name).Range(ccol & CStr(start_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_nine) & ":" & tcol & CStr(end_row_three_nine - 7)).Interior.ColorIndex = 0
        
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 15
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine - 2) & ":" & cecol & CStr(end_row_three_nine - 2)).Interior.ColorIndex = 15
    
    Sheets(sheet_name).Range(sv_col_three_nine & CStr(start_row) & ":" & sv_col_three_nine & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_three_nine & CStr(start_row) & ":" & por_err_col_three_nine & CStr(end_row)).ClearContents
    
    sheet_name = sheet7_name
    start_row = start_row_three_eleven
    end_row = end_row_three_eleven
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    Sheets(sheet_name).Range(tcol & CStr(start_row) & ":" & tcol & CStr(end_row - 4)).Value2 = vbNullString
    Sheets(sheet_name).Range(ccol & CStr(start_row) & ":" & ccol & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(scol & CStr(start_row) & ":" & scol & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(icol & CStr(start_row) & ":" & icol & CStr(end_row)).Value2 = vbNullString
    Sheets(sheet_name).Range(cecol & CStr(start_row) & ":" & cecol & CStr(end_row)).ClearContents
     Sheets(sheet_name).Range(ccol & CStr(start_row_three_eleven) & ":" & cecol & CStr(end_row_three_eleven)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_eleven) & ":" & tcol & CStr(end_row_three_eleven - 4)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_three_eleven & CStr(start_row) & ":" & sv_col_three_eleven & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(por_err_col_three_eleven & CStr(start_row) & ":" & por_err_col_three_eleven & CStr(end_row)).ClearContents
    
    sheet_name = sheet10_name
    start_row = start_row_four_fourt
    end_row = end_row_four_fourt
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_fourt) & ":" & ccol & CStr(end_row_four_fourt - 3)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(scol & CStr(start_row_four_fourt) & ":" & scol & CStr(end_row_four_fourt)).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(end_row - 2, scol).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, scol).Interior.ColorIndex = 15
    
    Sheets(sheet_name).Range(por_err_col_four_fourt & CStr(start_row) & ":" & por_err_col_four_fourt & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(sv_col_four_fourt & CStr(start_row) & ":" & sv_col_four_fourt & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(tcol & CStr(start_row) & ":" & tcol & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(ccol & CStr(start_row) & ":" & ccol & CStr(end_row - 3)).Value2 = vbNullString
    Sheets(sheet_name).Range(scol & CStr(start_row) & ":" & scol & CStr(end_row)).Value2 = vbNullString
    
    sheet_name = sheet13_name
    start_row = start_row_five
    end_row = end_row_five
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    
    Sheets(sheet_name).Range(tcol & CStr(start_row_five) & ":" & cecol & CStr(end_row_five)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_five & CStr(start_row) & ":" & sv_col_five & CStr(word_end_row_five + 2)).ClearContents
    Sheets(sheet_name).Range(por_err_col_five & CStr(start_row) & ":" & por_err_col_five & CStr(word_end_row_five + 2)).ClearContents
    Sheets(sheet_name).Range(tcol & CStr(start_row) & ":" & tcol & CStr(end_row)).Value2 = vbNullString
    Sheets(sheet_name).Range(ccol & CStr(start_row) & ":" & ccol & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(scol & CStr(start_row) & ":" & scol & CStr(end_row)).Value2 = vbNullString
    Sheets(sheet_name).Range(icol & CStr(start_row) & ":" & icol & CStr(end_row)).Value2 = vbNullString
    Sheets(sheet_name).Range(cecol & CStr(start_row) & ":" & cecol & CStr(end_row)).ClearContents
    
    
    start_row = word_start_row_five
    end_row = word_end_row_five
    col = word_col_five
    Sheets(sheet_name).Cells(start_row + 6, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 7, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 10, col).Interior.ColorIndex = 0

    For i = start_row To start_row + 10
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
    Next
    For i = start_row + 4 To start_row + 7
        Sheets(sheet_name).Cells(i, Chr(Asc(col) + 2)).Interior.ColorIndex = 0
    Next
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row + 2)).Value2 = vbNullString
    Sheets(sheet_name).Cells(start_row + 3, col).value = "DD/MM/YYYY"
    col = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col & CStr(start_row + 4) & ":" & col & CStr(end_row)).ClearContents
    
    sheet_name = sheet14_name
    irow = start_row_pb1
    end_row = end_row_pb1
    col = col_pb1
    
    Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = "I"
    Sheets(sheet_name).Cells(irow + 2, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Cells(irow + 4, Chr(Asc(col) - 1)).value = "profit and loss account"
    Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Cells(irow + 9, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Cells(irow + 10, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Cells(irow + 14, col).value = vbNullString
    irow = irow + 16
    Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
    Sheets(sheet_name).Cells(irow + 6, Chr(Asc(col) - 1)).value = "GSTIN"
    
    irow = irow + 8
    Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
    irow = irow + 5
    Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
    irow = irow + 7
    Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 3)).value = "has maintained the books of accounts, records and documents"
    Sheets(sheet_name).Cells(irow + 11, Chr(Asc(col) + 4)).value = "in agreement"
    irow = irow + 25
    Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)) = "2. List of Documents not maintained"
    Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 2)) = vbNullString
    irow = end_row_pb1 - 7
    Sheets(sheet_name).Range(Chr(Asc(col) - 1) & CStr(irow) & ":" & Chr(Asc(col) - 1) & CStr(irow + 3)).ClearContents
    irow = irow + 4
    Sheets(sheet_name).Cells(irow - 1, Chr(Asc(col) - 1)).value = "DD/MM/YYYY"
    Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
        
    sheet_name = sheet15_name
    irow = start_row_pb2
    col = col_pb2
        
     Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = "I"
        
     Sheets(sheet_name).Cells(irow + 2, col).value = vbNullString
     irow = irow + 4
     Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
     
     Sheets(sheet_name).Cells(irow + 7, col).value = vbNullString
     irow = irow + 9
     Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 2)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
     
     Sheets(sheet_name).Cells(irow + 7, col).value = "DD/MM/YYYY"
     Sheets(sheet_name).Cells(irow + 5, Chr(Asc(col) + 1)).value = "Institute of Chartered Accountants of India"
     
     Sheets(sheet_name).Cells(irow + 9, col).value = "DD/MM/YYYY"
     Sheets(sheet_name).Cells(irow + 11, col).value = "profit and loss account"
     Sheets(sheet_name).Cells(irow + 12, col).value = "DD/MM/YYYY"
     Sheets(sheet_name).Cells(irow + 13, col).value = "DD/MM/YYYY"
     Sheets(sheet_name).Cells(irow + 16, col).value = "DD/MM/YYYY"
     Sheets(sheet_name).Cells(irow + 17, col).value = "DD/MM/YYYY"
     
    
     irow = irow + 23

     Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 2)).value = "has maintained the books of accounts, records and documents"
     irow = irow + 13
     Sheets(sheet_name).Cells(irow, Chr(Asc(col) - 1)) = "2. List of Documents not maintained"
     Sheets(sheet_name).Cells(irow, Chr(Asc(col) + 3)) = vbNullString
     
     irow = end_row_pb2 - 7
     Sheets(sheet_name).Range(col & CStr(irow) & ":" & col & CStr(irow + 3)).ClearContents
    irow = irow + 4
    Sheets(sheet_name).Cells(irow - 1, col).value = "DD/MM/YYYY"
    Sheets(sheet_name).Range(Chr(Asc(col) + 1) & CStr(irow) & ":" & Chr(Asc(col) + 1) & CStr(irow + 3)).ClearContents
    col1 = Chr(Asc(col) + 3)
    Sheets(sheet_name).Range(col1 & CStr(irow) & ":" & col1 & CStr(irow + 3)).ClearContents
    Application.EnableEvents = True
    
End Sub

Attribute VB_Name = "PDF_Module"



Public Sub PDF_View()
    Application.ScreenUpdating = False
    flag = True
    If Not Validate_Functions.ValidateFunc_Home Then
        MsgBox "Please enter/correct mandatory fields before Generating PDF file."
        Exit Sub
    End If
    If Not Validate_Functions.ValidateFunc_Home Then
        MsgBox "Please enter/correct mandatory fields before Generating JSON file(s)."
        Exit Sub
    End If
    Call Validate_Functions.ValidateFunc_Table5
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table7
    If validate = False Then
        flag = False
    End If
        Call Validate_Functions.ValidateFunc_Table9
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table11
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table12
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table14
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_Table16
    If validate = False Then
        flag = False
    End If
    Call Validate_Functions.ValidateFunc_TableFive
    If validate = False Then
        flag = False
    End If
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
        Call Validate_Functions.ValidateFunc_PB1
        If validate = False Then
            flag = False
        End If
    ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
        Call Validate_Functions.ValidateFunc_PB2
        If validate = False Then
            flag = False
        End If
    End If
    Sheets(sheet2_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet4_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet6_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet9_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    Sheets(sheet11_name).Select
    Call Validate_Functions.ValidateFunc_Reasons
    If validate = False Then
        flag = False
    End If
    
    If flag = False Then
        MsgBox EM17
        Sheets(home_sheet).Select
        Application.ScreenUpdating = True
        Exit Sub
    End If
    'Variable_Initialize.initiali
    Module1.insert_sheet
    If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
        pdf_sheet = "Table 1"
    ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
        pdf_sheet = "Table 4"
    End If
    Dim i, row_no As Integer: i = start_row_pdf_sheet
    j = start_row_home
    col = fixed_col_home
    
    Sheets(pdf_sheet).Cells(i, 4).value = Sheets(home_sheet).Cells(j + 1, col).value
    i = i + 1
    Sheets(pdf_sheet).Cells(i, 4).value = Sheets(home_sheet).Cells(j, col).value
    i = i + 1
    Sheets(pdf_sheet).Cells(i, 4).value = Sheets(home_sheet).Cells(j + 2, col).value
    i = i + 1
    Sheets(pdf_sheet).Cells(i, 4).value = Sheets(home_sheet).Cells(j + 3, col).value
    i = i + 3
    Sheets(pdf_sheet).Cells(i, 8).value = Sheets(home_sheet).Cells(j + 4, col).value
    i = i + 1
    Sheets(pdf_sheet).Cells(i, 8).value = Sheets(home_sheet).Cells(j + 5, col).value
    p = i + 5
    j = start_row_two_five
    col = fixed_col_two_five
    K = 0
    For s = p To p + (end_row_two_five - start_row_two_five)
        Sheets(pdf_sheet).Cells(s, 9).value = Sheets(sheet1_name).Cells(j + K, col).value
        K = K + 1
    Next s

    row_no = Common_Module.Count_Reasons_sheet(sheet2_name, start_row_two_six, fixed_col_two_six)
    If row_no = 0 Then
        row_no = 1
    End If
    
    i = s
    te = i + 1
    If row_no > 1 Then
        For V = 1 To row_no - 1
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("A" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            te = te + 1
        Next
    End If
    p = i + 1
    col = fixed_col_two_six
    j = start_row_two_six
    K = 0
    For s = p To p + row_no - 1
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 2)).value
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 1)).value
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet2_name).Cells(j + K, col).value
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).WrapText = True
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).EntireRow.AutoFit
        K = K + 1
    Next s
    
    i = s
    
    p = i + 2
    j = start_row_two_seven
    col = fixed_col_two_seven
    K = 0
    
    For s = p To p + (end_row_two_seven - start_row_two_seven)
        Sheets(pdf_sheet).Cells(s, 9).value = Sheets(sheet3_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    row_no = Common_Module.Count_Reasons_sheet(sheet4_name, start_row_two_eight, fixed_col_two_eight)
     If row_no = 0 Then
        row_no = 1
    End If
    i = s
    te = i + 1
    If row_no > 1 Then
        For V = 1 To row_no - 1
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("A" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            te = te + 1
        Next
    End If
    p = i + 1
    col = fixed_col_two_eight
    j = start_row_two_eight
    K = 0
    For s = p To p + row_no - 1
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 2)).value
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 1)).value
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet4_name).Cells(j + K, col).value
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).WrapText = True
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).EntireRow.AutoFit
        K = K + 1
    Next s
    
    
    i = s
    
    p = i + 4
    j = start_row_three_nine
    col = taxv_col_three_nine
    K = 0
    
    For s = p To p + (end_row_three_nine - start_row_three_nine) - 3
        Sheets(pdf_sheet).Cells(s, 4).value = Sheets(sheet5_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = ctax_col_three_nine
    K = 0
    
    For s = p To p + (end_row_three_nine - start_row_three_nine)
        Sheets(pdf_sheet).Cells(s, 6).value = Sheets(sheet5_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = stax_col_three_nine
    K = 0
    
    For s = p To p + (end_row_three_nine - start_row_three_nine)
        Sheets(pdf_sheet).Cells(s, 7).value = Sheets(sheet5_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = itax_col_three_nine
    K = 0
    
    For s = p To p + (end_row_three_nine - start_row_three_nine)
        Sheets(pdf_sheet).Cells(s, 8).value = Sheets(sheet5_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = cetax_col_three_nine
    K = 0
   
    For s = p To p + (end_row_three_nine - start_row_three_nine)
        Sheets(pdf_sheet).Cells(s, 10).value = Sheets(sheet5_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    
    row_no = Common_Module.Count_Reasons_sheet(sheet6_name, start_row_three_ten, fixed_col_three_ten)
     If row_no = 0 Then
        row_no = 1
    End If
    i = s
    te = i + 1
    If row_no > 1 Then
        For V = 1 To row_no - 1
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("A" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            te = te + 1
        Next
    End If
    p = i + 1
    col = fixed_col_three_ten
    j = start_row_three_ten
    K = 0
    For s = p To p + row_no - 1
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 2)).value
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 1)).value
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet6_name).Cells(j + K, col).value
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).WrapText = True
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).EntireRow.AutoFit
        K = K + 1
    Next s
    
    
    i = s
        
    p = i + 3
    j = start_row_three_eleven
    col = taxv_col_three_eleven
    K = 0
    
    For s = p To p + (end_row_three_eleven - start_row_three_eleven) - 4
        Sheets(pdf_sheet).Cells(s, 4).value = Sheets(sheet7_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = ctax_col_three_eleven
    K = 0
    
    For s = p To p + (end_row_three_eleven - start_row_three_eleven)
        Sheets(pdf_sheet).Cells(s, 6).value = Sheets(sheet7_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = stax_col_three_eleven
    K = 0
    
    For s = p To p + (end_row_three_eleven - start_row_three_eleven)
        Sheets(pdf_sheet).Cells(s, 7).value = Sheets(sheet7_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = itax_col_three_eleven
    K = 0
    
    For s = p To p + (end_row_three_eleven - start_row_three_eleven)
        Sheets(pdf_sheet).Cells(s, 8).value = Sheets(sheet7_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = cetax_col_three_eleven
    K = 0
   
    For s = p To p + (end_row_three_eleven - start_row_three_eleven)
        Sheets(pdf_sheet).Cells(s, 10).value = Sheets(sheet7_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    
    
    
    i = s
    p = i + 4
    j = start_row_four_twelve
    col = fixed_col_four_twelve
    K = 0
    
    For s = p To p + (end_row_four_twelve - start_row_four_twelve)
        Sheets(pdf_sheet).Cells(s, 9).value = Sheets(sheet8_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    
    
        
    row_no = Common_Module.Count_Reasons_sheet(sheet9_name, start_row_four_thirt, fixed_col_four_thirt)
     If row_no = 0 Then
        row_no = 1
    End If
    i = s
    te = i + 1
    If row_no > 1 Then
        For V = 1 To row_no - 1
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("A" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            te = te + 1
            
        Next
    End If
    p = i + 1
    col = fixed_col_four_thirt
    j = start_row_four_thirt
    K = 0
    For s = p To p + row_no - 1
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 2)).value
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet2_name).Cells(j + K, Chr(Asc(col) - 1)).value
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet9_name).Cells(j + K, col).value
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).WrapText = True
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).EntireRow.AutoFit
        K = K + 1
    Next s
    
    
    i = s
        
    p = i + 2
    te = p + 16
    If (end_row_four_fourt) - (start_row_four_fourt) > 19 Then
        count = (end_row_four_fourt) - (start_row_four_fourt) - 19
        For V = 1 To count
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":F" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("G" & CStr(te + 1) & ":H" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("I" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            
            te = te + 1
        Next
    End If
    j = start_row_four_fourt
    
    col = Chr(Asc(value_col_four_fourt) - 3)
    K = 0
    
    For s = p To p + (end_row_four_fourt - start_row_four_fourt) - 3
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet10_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = Chr(Asc(value_col_four_fourt) - 2)
    K = 0
    
    For s = p To p + (end_row_four_fourt - start_row_four_fourt) - 3
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet10_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = value_col_four_fourt
    K = 0
    
    For s = p To p + (end_row_four_fourt - start_row_four_fourt) - 3
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet10_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = amt_col_four_fourt
    K = 0
    
    For s = p To p + (end_row_four_fourt - start_row_four_fourt) - 3
        Sheets(pdf_sheet).Cells(s, 7).value = Sheets(sheet10_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    
    
    
    col = amte_col_four_fourt
    K = 0
    
    For s = p To p + (end_row_four_fourt - start_row_four_fourt)
        Sheets(pdf_sheet).Cells(s, 9).value = Sheets(sheet10_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
   
    
    row_no = Common_Module.Count_Reasons_sheet(sheet11_name, start_row_four_fift, fixed_col_four_fift)
     If row_no = 0 Then
        row_no = 1
    End If
    i = s
    te = i + 1
    If row_no > 1 Then
        For V = 1 To row_no - 1
            Sheets(pdf_sheet).Range("E" & CStr(te + 1)).EntireRow.Insert
            Sheets(pdf_sheet).Range("E" & CStr(te + 1) & ":K" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":D" & CStr(te + 1)).Merge
            Sheets(pdf_sheet).Range("A" & CStr(te + 1) & ":K" & CStr(te + 1)).Borders.LineStyle = xlContinuous
            te = te + 1
        Next
    End If
    p = i + 1
    col = fixed_col_four_fift
    j = start_row_four_fift
    K = 0
    For s = p To p + row_no - 1
        Sheets(pdf_sheet).Cells(s, 1).value = Sheets(sheet11_name).Cells(j + K, Chr(Asc(col) - 2)).value
        Sheets(pdf_sheet).Cells(s, 2).value = Sheets(sheet11_name).Cells(j + K, Chr(Asc(col) - 1)).value
        Sheets(pdf_sheet).Cells(s, 5).value = Sheets(sheet11_name).Cells(j + K, col).value
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).WrapText = True
'        Worksheets(pdf_sheet).Range("E" & CStr(s)).EntireRow.AutoFit
        K = K + 1
    Next s
    
    
    i = s
    p = i + 2
    j = start_row_four_sixt
    col = fixed_col_four_sixt
    K = 0
    
    For s = p To p + (end_row_four_sixt - start_row_four_sixt)
        Sheets(pdf_sheet).Cells(s, 4).value = Sheets(sheet12_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    
    
    i = s
        
    p = i + 3
    j = start_row_five
    col = taxv_col_five
    K = 0
    
    For s = p To p + (end_row_five - start_row_five)
        Sheets(pdf_sheet).Cells(s, 4).value = Sheets(sheet13_name).Cells(j + K, col).value
        K = K + 1
    Next s
    
    col = ctax_col_five
    K = 0
    
    For s = p To p + (end_row_five - start_row_five)
        Sheets(pdf_sheet).Cells(s, 6).value = Sheets(sheet13_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = stax_col_five
    K = 0
    
    For s = p To p + (end_row_five - start_row_five)
        Sheets(pdf_sheet).Cells(s, 7).value = Sheets(sheet13_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = itax_col_five
    K = 0
    
    For s = p To p + (end_row_five - start_row_five)
        Sheets(pdf_sheet).Cells(s, 8).value = Sheets(sheet13_name).Cells(j + K, col).value
        K = K + 1
    Next s
    col = cetax_col_five
    K = 0
   
    For s = p To p + (end_row_five - start_row_five)
        Sheets(pdf_sheet).Cells(s, 10).value = Sheets(sheet13_name).Cells(j + K, col).value
        K = K + 1
    Next s
    Sheets(pdf_sheet).Cells(s - 1, 2).value = Sheets(sheet13_name).Cells(end_row_five, "C").value
    'Sheets(pdf_sheet).Cells(s + 12, 6).value = Sheets(sheet13_name).Cells(34, "E").value
    i = s + 2
    If pdf_sheet = "Table 1" Then
        sheet_name = sheet14_name
        col = qual_col_pb1
        start_row = start_row_pb1_qual
        end_row = end_row_pb1_qual
        
        p = i + 1
        te = p + 85
        If end_row = start_row Then
                Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(start_row, Chr(Asc(col) - 1))
                Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(start_row, col)
                Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(start_row, Chr(Asc(col) + 4))
        Else
            For V = start_row To end_row - 1
                Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(V, Chr(Asc(col) - 1))
                Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(V, col)
                Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(V, Chr(Asc(col) + 4))
'                Worksheets(pdf_sheet).Range("C" & CStr(te)).WrapText = True
'                Worksheets(pdf_sheet).Range("C" & CStr(te)).EntireRow.AutoFit
'                Worksheets(pdf_sheet).Range("G" & CStr(te)).WrapText = True
'                Worksheets(pdf_sheet).Range("G" & CStr(te)).EntireRow.AutoFit
                Sheets(pdf_sheet).Range("C" & CStr(te + 1)).EntireRow.Insert
                Sheets(pdf_sheet).Range("C" & CStr(te + 1) & ":F" & CStr(te + 1)).Merge
                Sheets(pdf_sheet).Range("G" & CStr(te + 1) & ":I" & CStr(te + 1)).Merge
                Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":I" & CStr(te + 1)).Borders.LineStyle = xlContinuous
                te = te + 1
                If V = end_row - 1 Then
                    Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(V + 1, Chr(Asc(col) - 1))
                    Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(V + 1, col)
                    Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(V + 1, Chr(Asc(col) + 4))
                End If
                
            Next
        End If
        s = te + 12
    ElseIf pdf_sheet = "Table 4" Then
        'i = s
        's = te
        
        sheet_name = sheet15_name
        col = qual_col_pb2
        start_row = start_row_pb2_qual
        end_row = end_row_pb2_qual
        
        p = i + 1
        te = p + 65
        If end_row = start_row Then
            Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(start_row, Chr(Asc(col) - 1))
            Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(start_row, col)
            Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(start_row, Chr(Asc(col) + 4))
        Else
            For V = start_row To end_row - 1
                
                Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(V, Chr(Asc(col) - 1))
                Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(V, col)
                Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(V, Chr(Asc(col) + 4))
'                Worksheets(pdf_sheet).Range("C" & CStr(te)).WrapText = True
'                Worksheets(pdf_sheet).Range("C" & CStr(te)).EntireRow.AutoFit
'                Worksheets(pdf_sheet).Range("G" & CStr(te)).WrapText = True
'                Worksheets(pdf_sheet).Range("G" & CStr(te)).EntireRow.AutoFit
                Sheets(pdf_sheet).Range("C" & CStr(te + 1)).EntireRow.Insert
                Sheets(pdf_sheet).Range("C" & CStr(te + 1) & ":F" & CStr(te + 1)).Merge
                Sheets(pdf_sheet).Range("G" & CStr(te + 1) & ":I" & CStr(te + 1)).Merge
                Sheets(pdf_sheet).Range("B" & CStr(te + 1) & ":I" & CStr(te + 1)).Borders.LineStyle = xlContinuous
                te = te + 1
                If V = end_row - 1 Then
                    Sheets(pdf_sheet).Cells(te, "B") = Sheets(sheet_name).Cells(V + 1, Chr(Asc(col) - 1))
                    Sheets(pdf_sheet).Cells(te, "C") = Sheets(sheet_name).Cells(V + 1, col)
                    Sheets(pdf_sheet).Cells(te, "G") = Sheets(sheet_name).Cells(V + 1, Chr(Asc(col) + 4))
                End If
                
            Next
        End If
        s = te + 12
    End If
    
    end_row_pdf_sheet = s
    Sheets(pdf_sheet).Visible = xlSheetVisible
    Sheets(pdf_sheet).Select
    Call PDFActiveSheet1
    Sheets(pdf_sheet).Visible = xlSheetVeryHidden
    Sheets(home_sheet).Select
    Application.ScreenUpdating = True
End Sub


Sub PDFActiveSheet1()
'www.contextures.com
'for Excel 2010 and later
Dim wsA As Worksheet
Dim wbA As Workbook
Dim strTime As String
Dim strName As String
Dim strPath As String
Dim strFile As String
Dim strPathFile As String
Dim myFile As Variant
On Error GoTo errHandler

Set wbA = ActiveWorkbook
Set wsA = ActiveSheet
strTime = Format(Now(), "ddmmyyyy")

myRange = "A2:K" & CStr(end_row_pdf_sheet)
With wsA.PageSetup
    .PrintArea = myRange
    '.FitToPagesTall = 1
    '.FitToPagesWide = 1     'Set FitToPagesWide to 1
    .LeftMargin = Application.CentimetersToPoints(0.64)
    .RightMargin = Application.CentimetersToPoints(0.2)
    .TopMargin = Application.CentimetersToPoints(1.91)
    .BottomMargin = Application.CentimetersToPoints(1.91)
End With
'get active workbook folder, if saved
strPath = wbA.path
If strPath = "" Then
  strPath = Application.DefaultFilePath
End If
strPath = strPath & "\"

'replace spaces and periods in sheet name
strName = "GSTR9C"

'create default name for savng file
strFile = strName & "_" & strTime & "_" & Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value & ".pdf"
strPathFile = strPath & strFile

'use can enter name and
' select folder for file
myFile = Application.GetSaveAsFilename _
    (InitialFileName:=strPathFile, _
        FileFilter:="PDF Files (*.pdf), *.pdf", _
        Title:="Select Folder and FileName to save")



'export to PDF if a folder was selected
If myFile <> "False" Then
    wsA.Range("A2:K" & CStr(end_row_pdf_sheet)).ExportAsFixedFormat _
        Type:=xlTypePDF, _
        fileName:=myFile, _
        Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=True, _
        OpenAfterPublish:=False
    'confirmation message with file info
    MsgBox "PDF file has been created: " _
      & vbCrLf _
      & myFile
End If

exitHandler:
    Exit Sub
errHandler:
    MsgBox "Could not create PDF file"
    Resume exitHandler
End Sub





Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


'Private Sub worksheet_change(ByVal target As Range)
'
'    'Variable_Initialize.initiali
'    flag = False
'    sum_four_twelve = 0
'    For i = start_row_four_twelve To end_row_four_twelve - 3
'        If Trim(Sheets(sheet8_name).Cells(i, fixed_col_four_twelve).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        sum_four_twelve = sum_four_twelve + Sheets(sheet8_name).Cells(i, fixed_col_four_twelve).Value * Sheets(sheet8_name).Cells(i, "M").Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet8_name).Cells(end_row_four_twelve - 2, fixed_col_four_twelve).Value = sum_four_twelve
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet8_name).Cells(end_row_four_twelve - 2, fixed_col_four_twelve).Value <> vbNullString) And Trim(Sheets(sheet8_name).Cells(end_row_four_twelve - 1, fixed_col_four_twelve).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet8_name).Cells(end_row_four_twelve, fixed_col_four_twelve).Value = Sheets(sheet8_name).Cells(end_row_four_twelve - 1, fixed_col_four_twelve).Value - Sheets(sheet8_name).Cells(end_row_four_twelve - 2, fixed_col_four_twelve).Value
'        Application.EnableEvents = True
'    End If
'
'
'
'
'End Sub


Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

    'Variable_Initialize.initiali
    
    
    Application.EnableEvents = False
    Range(amte_col_four_fourt & CStr(end_row_four_fourt - 2)).Formula = "=SUM(" & Range(amte_col_four_fourt & CStr(start_row_four_fourt) & ":" & amte_col_four_fourt & CStr(end_row_four_fourt - 3)).Address(False, False) & ")"
    Range(amte_col_four_fourt & CStr(end_row_four_fourt)).Formula = "=" & amte_col_four_fourt & CStr(end_row_four_fourt - 1) & "-" & amte_col_four_fourt & CStr(end_row_four_fourt - 2)
    Application.EnableEvents = True
'    flag = False
'    ssum_four_fourt = 0
'    For i = start_row_four_fourt To end_row_four_fourt - 3
'        If Trim(Sheets(sheet10_name).Cells(i, amte_col_four_fourt).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        ssum_four_fourt = ssum_four_fourt + Sheets(sheet10_name).Cells(i, amte_col_four_fourt).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet10_name).Cells(end_row_four_fourt - 2, amte_col_four_fourt).Value = ssum_four_fourt
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet10_name).Cells(end_row_four_fourt - 2, amte_col_four_fourt).Value <> vbNullString) And Trim(Sheets(sheet10_name).Cells(end_row_four_fourt - 1, amte_col_four_fourt).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet10_name).Cells(end_row_four_fourt, amte_col_four_fourt).Value = Sheets(sheet10_name).Cells(end_row_four_fourt - 1, amte_col_four_fourt).Value - Sheets(sheet10_name).Cells(end_row_four_fourt - 2, amte_col_four_fourt).Value
'        Application.EnableEvents = True
'    End If
    


End Sub


Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value & vbNullString) <> vbNullString And Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value), GSTIN_REGEX_HOME) Then
        Application.EnableEvents = False
        Sheets(sheet14_name).Cells(27, "D") = Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value
        Application.EnableEvents = True
    Else
        Application.EnableEvents = False
        Sheets(sheet14_name).Cells(27, "D") = vbNullString
        Application.EnableEvents = True
    End If
End Sub
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    'Variable_Initialize.initiali
    If importFlag = True Then Exit Sub
    If (Target.Column = Asc(fixed_col_home) - 64 And Target.Row = start_row_home) Then
        
        Sheets(home_sheet).Cells(start_row_home, fixed_col_home).Interior.ColorIndex = 0
        Sheets(home_sheet).Cells(start_row_home, sv_col_home) = ""
        'If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value), GSTIN_REGEX_HOME) Then
            'Call Common_Module.display_error(home_sheet, start_row_home, fixed_col_home, EM3)
            
        'End If
    
    End If

    If (Target.Column = Asc(fixed_col_home) - 64 And Target.Row = start_row_home + 5) Then
        
        If Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "Yes" Then
            Sheets(sheet14_name).Visible = xlSheetVisible
            Sheets(sheet15_name).Visible = xlSheetHidden
        ElseIf Trim(Sheets(home_sheet).Cells(start_row_home + 5, fixed_col_home).value) = "No" Then
            Sheets(sheet15_name).Visible = xlSheetVisible
            Sheets(sheet14_name).Visible = xlSheetHidden
        End If
    
    End If
End Sub
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Change(ByVal Target As Range)
'    'Variable_Initialize.initiali
'    If Trim(Sheets(sheet1_name).Cells(end_row_two_five - 2, fixed_col_two_five).value <> vbNullString) Then
'        Sheets(sheet3_name).Cells(start_row_two_seven, fixed_col_two_seven).value = Sheets(sheet1_name).Cells(end_row_two_five - 2, fixed_col_two_five).value
'    End If
'End Sub

Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub worksheet_change(ByVal target As Range)
'
'    'Variable_Initialize.initiali
'    flag = False
'    tsum_three_nine = 0
'    For i = start_row_three_nine To end_row_three_nine - 7
'        If Trim(Sheets(sheet5_name).Cells(i, taxv_col_three_nine).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        tsum_three_nine = tsum_three_nine + Sheets(sheet5_name).Cells(i, taxv_col_three_nine).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        'Sheets(sheet5_name).Cells(end_row_three_nine - 2, taxv_col_three_nine).Value = tsum_three_nine
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 2, taxv_col_three_nine).Value <> vbNullString) And Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 1, taxv_col_three_nine).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        'Sheets(sheet5_name).Cells(end_row_three_nine, taxv_col_three_nine).Value = Sheets(sheet5_name).Cells(end_row_three_nine - 1, taxv_col_three_nine).Value - Sheets(sheet5_name).Cells(end_row_three_nine - 2, taxv_col_three_nine).Value
'        Application.EnableEvents = True
'    End If
'
'    flag = False
'    csum_three_nine = 0
'    For i = start_row_three_nine To end_row_three_nine - 3
'        If Trim(Sheets(sheet5_name).Cells(i, ctax_col_three_nine).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        csum_three_nine = csum_three_nine + Sheets(sheet5_name).Cells(i, ctax_col_three_nine).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine - 2, ctax_col_three_nine).Value = csum_three_nine
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 2, ctax_col_three_nine).Value <> vbNullString) And Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 1, ctax_col_three_nine).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine, ctax_col_three_nine).Value = Sheets(sheet5_name).Cells(end_row_three_nine - 1, ctax_col_three_nine).Value - Sheets(sheet5_name).Cells(end_row_three_nine - 2, ctax_col_three_nine).Value
'        Application.EnableEvents = True
'    End If
'
'    flag = False
'    ssum_three_nine = 0
'    For i = start_row_three_nine To end_row_three_nine - 3
'        If Trim(Sheets(sheet5_name).Cells(i, stax_col_three_nine).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        ssum_three_nine = ssum_three_nine + Sheets(sheet5_name).Cells(i, stax_col_three_nine).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine - 2, stax_col_three_nine).Value = ssum_three_nine
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 2, stax_col_three_nine).Value <> vbNullString) And Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 1, stax_col_three_nine).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine, stax_col_three_nine).Value = Sheets(sheet5_name).Cells(end_row_three_nine - 1, stax_col_three_nine).Value - Sheets(sheet5_name).Cells(end_row_three_nine - 2, stax_col_three_nine).Value
'        Application.EnableEvents = True
'    End If
'
'    flag = False
'    isum_three_nine = 0
'    For i = start_row_three_nine To end_row_three_nine - 3
'        If Trim(Sheets(sheet5_name).Cells(i, itax_col_three_nine).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        isum_three_nine = isum_three_nine + Sheets(sheet5_name).Cells(i, itax_col_three_nine).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine - 2, itax_col_three_nine).Value = isum_three_nine
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 2, itax_col_three_nine).Value <> vbNullString) And Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 1, itax_col_three_nine).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine, itax_col_three_nine).Value = Sheets(sheet5_name).Cells(end_row_three_nine - 1, itax_col_three_nine).Value - Sheets(sheet5_name).Cells(end_row_three_nine - 2, itax_col_three_nine).Value
'        Application.EnableEvents = True
'    End If
'
'    flag = False
'    cesum_three_nine = 0
'    For i = start_row_three_nine To end_row_three_nine - 3
'        If Trim(Sheets(sheet5_name).Cells(i, cetax_col_three_nine).Value = vbNullString) Then
'            flag = True
'            Exit For
'        End If
'        cesum_three_nine = cesum_three_nine + Sheets(sheet5_name).Cells(i, cetax_col_three_nine).Value
'    Next i
'    If flag = False Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine - 2, cetax_col_three_nine).Value = cesum_three_nine
'        Application.EnableEvents = True
'    End If
'    If Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 2, cetax_col_three_nine).Value <> vbNullString) And Trim(Sheets(sheet5_name).Cells(end_row_three_nine - 1, cetax_col_three_nine).Value <> vbNullString) Then
'        Application.EnableEvents = False
'        Sheets(sheet5_name).Cells(end_row_three_nine, cetax_col_three_nine).Value = Sheets(sheet5_name).Cells(end_row_three_nine - 1, cetax_col_three_nine).Value - Sheets(sheet5_name).Cells(end_row_three_nine - 2, cetax_col_three_nine).Value
'        Application.EnableEvents = True
'    End If
'
'End Sub


Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Signing_Module"
Option Explicit
Dim fileName As String

#If VBA7 Then
Private Declare PtrSafe Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal fileName As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMinimizedFocus _
  ) As Long

Private Declare PtrSafe Sub Sleep Lib "kernel32.dll" (ByVal dwMilliseconds As Long)

#Else
Private Declare Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal fileName As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMinimizedFocus _
  ) As Long

Private Declare Sub Sleep Lib "kernel32.dll" (ByVal dwMilliseconds As Long)

#End If


Public Function invokeSigning(inputData As String) As String
    On Error GoTo Signing_error
    Dim sign As String, signstatus As Integer, url As String, outfile As String, count As Integer, stringForHash As String, hash As String, auditorPan As String, json As String
    Dim ie As SHDocVw.InternetExplorer
    Dim objFSO As Object, objFile As Variant
    Set ie = New InternetExplorerMedium
    url = ThisWorkbook.path & "\wsweb.html"
    ie.navigate url
    ie.Visible = False
    
    ' Make browser look like an Application
    ie.MenuBar = False
    ie.AddressBar = False
    ie.Toolbar = False
    ie.resizable = True
    ie.StatusBar = False
    
    count = 1
    signstatus = 0
        
    'inputData = "{}"
   
    'mention Auditor PAN here for signing purposes.
    auditorPan = CStr(Sheets(sheet13_name).Cells(word_start_row_five + 9, word_col_five).value) 'ABCDE1234T for testing purposes.
    'Below handling added as object's connection goes away at times.
    Do
        DoEvents
    Loop Until ie.readyState = 4  '4 = READYSTATE_COMPLETE
    ie.Visible = True
    
    Do While ie.document.getElementById("startflag").Checked = False
    Sleep 1 * 1000
    Loop
     
    '11-feb-2019 - Code to update html text box with input json once html DOM is ready
    If ie.document.getElementById("stringflag").Checked = False Then
    ie.document.getElementById("inputForHash").value = inputData
    End If
    ie.document.getElementById("startflag").Checked = False
    '11-feb-2019 - Code to extract string required for generating SHA 256 hash from html
     
    Do While ie.document.getElementById("stringflag").Checked = False
    Sleep 1 * 1000
    Loop
    stringForHash = ie.document.getElementById("stringForHash").value
    
    
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    
    ' How to write file
    outfile = ThisWorkbook.path & "\string.txt"
    Set objFile = objFSO.CreateTextFile(outfile, True)
    objFile.Write stringForHash
    objFile.Close
    Sheets("Master").Cells(5, 10) = stringForHash
    '11-feb-2019 - Hash of the payload needs to be entered here -- Calling hash function
    hash = Hashing_JSON.SHA256function(stringForHash)
    outfile = ThisWorkbook.path & "\hash.txt"
    Set objFile = objFSO.CreateTextFile(outfile, True)
    objFile.Write hash
    objFile.Close
    Sheets("Master").Cells(9, 10) = hash
    'hash = "YWJjZGVmZ2g=" 'Temporary value put as of now
    
    'Checking connection with emsigner
    Do While ie.document.getElementById("connflag").Checked = False
        Sleep 1 * 1000
    Loop
    ie.document.getElementById("setupconnbutton").disabled = True
        
    'connection is not established
    'If ie.document.getElementById("connflag").Checked = False Then
    'MsgBox ("Please try signing after some time, there seems to be some issue with the Emsigner connection")
    'End If
    
    ie.document.getElementById("name").value = "action=sign" & vbCrLf & "tobesigned=" & hash & vbCrLf & "panNo=" & auditorPan & vbCrLf & "signtype=1" & vbCrLf & "expirycheck=true" & vbCrLf & "issuername=" & vbCrLf & "certclass=2|3" & vbCrLf & "certtype=DSC" & vbCrLf & "certdetails="
    Do
        If ie.document.getElementById("signflag").Checked = True Then
            signstatus = 1
            sign = ie.document.getElementById("signature").value
        Else
            Sleep 1 * 1000
            count = count + 1
        End If
        If count >= 3 And signstatus <> 1 Then
        count = 0
        End If
    Loop Until signstatus = 1 Or count > 3
    
    On Error GoTo Signing_error
    If signstatus = 1 Then
        Sleep 3 * 1000
        ie.Quit
        invokeSigning = sign
'        json = CollateJsonData(inputData, sign)
'        Call CreateJsonFile(json)
'        MsgBox ("Output json file is present at " & fileName)
    Else
    ie.Quit
    End If
    Set ie = Nothing
    Exit Function
Signing_error:
    'ie.Quit
    Set ie = Nothing
    invokeSigning = "problem"
    MsgBox "There was an error while signing the json. Please click on Generate json again."
End Function

'Public Function invokeSigning(hash As String) As String
'
'    Dim sign As String, signstatus As Integer, url As String, count As Integer, auditorPan As String, json As String
'    Dim ie As SHDocVw.InternetExplorer
'    Set ie = New InternetExplorerMedium
'    url = ThisWorkbook.path & "\wsweb.html"
'    ie.navigate url
'    ie.Visible = False
'
'    ' Make browser look like an Application
'    ie.MenuBar = False
'    ie.AddressBar = False
'    ie.Toolbar = False
'    ie.resizable = True
'    ie.StatusBar = False
'
'    count = 1
'    signstatus = 0
'
'    'inputData = "{unsigned json}"
'    ''Hash of the payload needs to be entered here
'    'hash = "hash of the unsigned json"
'
'    'mention Auditor PAN here for signing purposes.
'    auditorPan = CStr(Sheets(sheet13_name).Cells(word_start_row_five + 9, word_col_five).value)
'    'auditorPan = "ACXPK3463A" 'ABCDE1234T for testing purposes.
'    'Below handling added as object's connection goes away at times.
'    Do
'        DoEvents
'    Loop Until ie.readyState = 4  '4 = READYSTATE_COMPLETE
'    ie.Visible = True
'
'    'Checking connection with emsigner
'    Do While ie.document.getElementById("connflag").Checked = False
'        Sleep 1 * 1000
'    Loop
'    ie.document.getElementById("setupconnbutton").disabled = True
'
'    'connection is not established
'    'If ie.document.getElementById("connflag").Checked = False Then
'    'MsgBox ("Please try signing after some time, there seems to be some issue with the Emsigner connection")
'    'End If
'
'    ie.document.getElementById("name").value = "action=sign" & vbCrLf & "tobesigned=" & hash & "" & vbCrLf & "panNo=" & auditorPan & vbCrLf & "signtype=1" & vbCrLf & "expirycheck=true" & vbCrLf & "issuername=" & vbCrLf & "certclass=2|3" & vbCrLf & "certtype=DSC" & vbCrLf & "certdetails="
'    Do
'        If ie.document.getElementById("signflag").Checked = True Then
'            signstatus = 1
'            sign = ie.document.getElementById("signature").value
'        Else
'            Sleep 1 * 1000
'            count = count + 1
'        End If
'        If count >= 3 And signstatus <> 1 Then
'        count = 0
'        End If
'    Loop Until signstatus = 1 Or count > 3
'
'    On Error GoTo ErrorHandling
'    If signstatus = 1 Then
'        Sleep 3 * 1000
'        ie.Quit
'        invokeSigning = sign
'        'json = CollateJsonData(inputData, sign, hash)
'        'Call CreateJsonFile(json)
'        'MsgBox ("Output json file is present at " & fileName)
'    Else
'    ie.Quit
'    End If
'    Set ie = Nothing
'ErrorHandling:
'    Set ie = Nothing
'End Function

Public Function CollateJsonData(inputData As String, sign As String, hash As String)
'TODO - Generate data in the format that we need.
Dim collatedjson As String
collatedjson = "{data:" & inputData & "audited_data:{" & """ad_data"":""" & hash & """,""ad_sign"":""" & sign & """" & "}}"
CollateJsonData = collatedjson
End Function


Public Sub CreateJsonFile(json As String)
fileName = ThisWorkbook.path & "\outputjson.txt"
Open fileName For Output As #1
Write #1, json
Close #1
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    On Error Resume Next
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    

      'Loop through all sheets in the workbook

      For i = 1 To Sheets.count
        t = ThisWorkbook.Sheets(i).Name
        If Not (t = "Table 1" Or t = "Table 2" Or t = "Table 3" Or t = "Table 4" Or t = "Master" Or t = "State dropdown") Then
            ThisWorkbook.Sheets(i).Unprotect Password:="pass"
            ThisWorkbook.Sheets(i).Protect Password:="pass", UserInterFaceOnly:=True
         
        End If
      Next i

   
   Variable_Initialize.initiali
   Call Module1.insert_sheet
   Dim selection As Variant
   
   Sheets(home_sheet).Select
   If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value & vbNullString) <> vbNullString Then
        selection = MsgBox("Open saved version? ", vbYesNo, "Note")
         'Clears all sheet is No is selected
        If selection = 7 Then
            Sheets(sheet15_name).Visible = xlSheetVisible
            Sheets(sheet14_name).Visible = xlSheetVisible
            Call Module1.clear_Reasons_sheet("PT II (6)")
            Call Module1.clear_Reasons_sheet("PT II (8)")
            Call Module1.clear_Reasons_sheet("PT III (10)")
            Call Module1.clear_Reasons_sheet("PT IV(13)")
            Call Module1.clear_Reasons_sheet("PT IV (15)")
            Call Module1.clear_qual_pb1
            Call Module1.clear_qual_pb2
            Call Module1.clear_Expenses
            Call Module1.clear_all_sheets
        Else
start:
         Call Module1.count_prev_Reasons_sheet("PT II (6)")
         Call Module1.count_prev_Reasons_sheet("PT II (8)")
         Call Module1.count_prev_Reasons_sheet("PT III (10)")
         Call Module1.count_prev_Reasons_sheet("PT IV(13)")
         Call Module1.count_prev_Reasons_sheet("PT IV (15)")
        Call Module1.count_prev_qual_pb1
        Call Module1.count_prev_qual_pb2
        Call Module1.count_prev_Expenses
        End If
    End If
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
End Sub




Attribute VB_Name = "ValidateMod"
Public Sub Validate_Reasons()
    validate = True
    
    sheet_name = ActiveSheet.Name
    'MsgBox sheet_name
    If sheet_name = sheet2_name Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        end_row = end_row_two_six
        sheet_name = sheet2_name
        sv_col = sv_col_two_six
    ElseIf sheet_name = sheet4_name Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        end_row = end_row_two_eight
        sheet_name = sheet4_name
        sv_col = sv_col_two_eight
    ElseIf sheet_name = sheet6_name Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        end_row = end_row_three_ten
        sheet_name = sheet6_name
        sv_col = sv_col_three_ten
    ElseIf sheet_name = sheet9_name Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        end_row = end_row_four_thirt
        sheet_name = sheet9_name
        sv_col = sv_col_four_thirt
    
    ElseIf sheet_name = sheet11_name Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        end_row = end_row_four_fift
        sheet_name = sheet11_name
        sv_col = sv_col_four_fift
    End If
    For i = start_row To end_row
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
        Sheets(sheet_name).Cells(i, sv_col).ClearContents
    Next
    Call Delete_reasons(sheet_name, start_row, end_row, col)

    
    For i = start_row To end_row
        Sheets(sheet_name).Cells(i, col) = Trim(Sheets(sheet_name).Cells(i, col))
        If (Sheets(sheet_name).Cells(i, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex((Sheets(sheet_name).Cells(i, col).value), char_REGEX) Then
        
            Call Common_Module.display_error(sheet_name, i, col, EM1)
        
        End If
    Next
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Function Delete_reasons(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To start_row + 9
        If (Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And (Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If (Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString Then
            Rows(i).EntireRow.Delete
            'Sheets(sheet_name).Range(fixed_col & CStr(i)).Delete Shift:=xlUp
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = start_row + 9
    Do While i <= j
        If (Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 1)).value) <> vbNullString Then
            Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    'end_row = last_value
    Call Common_Module.Arrange_Reasons(sheet_name, start_row, end_row, fixed_col)
    
End Function
Public Function Delete_expense(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To end_row
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 2)).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And Trim(Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 2)).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 2), EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 4), EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 2)).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            Rows(i).EntireRow.Delete
'            Sheets(sheet_name).Range(fixed_col & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) + 2) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) + 4) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 2) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 3) & CStr(i)).Delete Shift:=xlUp
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = end_row + 1
    Do While i < j
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 2)).value) <> vbNullString Then
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            Rows(i).EntireRow.Delete
            
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    
    Call Common_Module.Arrange_Expense(sheet_name, start_row, end_row, fixed_col)
End Function
Public Function Delete_qual(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To end_row
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And Trim(Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 4), EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
            Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = end_row + 1
    Do While i < j
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 1)).value) <> vbNullString Then
            Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    
    Call Common_Module.Arrange_qual(sheet_name, start_row, end_row, fixed_col)
End Function
Public Sub Validate_Table5()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet1_name
    start_row = start_row_two_five
    end_row = end_row_two_five
    col = fixed_col_two_five
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    
    Sheets(sheet_name).Range(sv_col_two_five & CStr(start_row) & ":" & sv_col_two_five & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    If Trim(Sheets(sheet_name).Cells(start_row, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, start_row, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 6, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, start_row + 6, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(end_row - 1, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, col, EM2)
    End If
    
    For i = start_row To start_row + 5
        validate1 = Common_Module.Positive_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(start_row + 6, col, sheet_name)
    For i = start_row + 7 To start_row + 11
        validate1 = Common_Module.Positive_Amt(i, col, sheet_name)
    Next
    For i = start_row + 12 To start_row + 14
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_Table7()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet3_name
    start_row = start_row_two_seven
    end_row = end_row_two_seven
    col = fixed_col_two_seven
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_two_seven & CStr(start_row) & ":" & sv_col_two_seven & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    If Trim(Sheets(sheet_name).Cells(end_row - 1, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, col, EM2)
    End If
    For i = start_row + 1 To start_row + 3
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
    
End Sub
Public Sub Validate_Table9()
    Dim i As Integer, irow As Integer
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    validate = True
    sheet_name = sheet5_name
    irow = start_row_three_nine
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    end_row = end_row_three_nine
    Sheets(sheet_name).Range(ccol & CStr(start_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_nine) & ":" & tcol & CStr(end_row_three_nine - 7)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_three_nine & CStr(irow) & ":" & sv_col_three_nine & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 15
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine - 2) & ":" & cecol & CStr(end_row_three_nine - 2)).Interior.ColorIndex = 15
    validate1 = Common_Module.Negative_Amt(irow, tcol, sheet_name)
    For s = irow To end_row_three_nine - 7
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    
    For i = irow + 1 To end_row_three_nine - 7
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
       If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
        End If
    Next
    For s = 0 To 4
        If s <> 3 Then
            If Sheets(sheet_name).Cells(end_row_three_nine - 1, Chr(Asc(ccol) + s)).value = vbNullString Then
                Common_Module.display_error sheet_name, end_row_three_nine - 1, Chr(Asc(ccol) + s), EM2
            End If
        End If
    Next
    validate1 = Common_Module.Negative_Amt(end_row_three_nine - 1, ccol, sheet_name)
    validate1 = Common_Module.Negative_Amt(end_row_three_nine - 1, scol, sheet_name)
    validate1 = Common_Module.Negative_Amt(end_row_three_nine - 1, icol, sheet_name)
    validate1 = Common_Module.Negative_Amt(end_row_three_nine - 1, cecol, sheet_name)
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_Table11()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet7_name
    irow = start_row_three_eleven
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    end_row = end_row_three_eleven
    Sheets(sheet_name).Range(ccol & CStr(start_row_three_eleven) & ":" & cecol & CStr(end_row_three_eleven)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_eleven) & ":" & tcol & CStr(end_row_three_eleven - 4)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_three_eleven & CStr(irow) & ":" & sv_col_three_eleven & CStr(end_row)).ClearContents
    
    For s = irow To end_row_three_eleven - 4
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    For i = irow To end_row_three_eleven - 4
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
    Next
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_Table12()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet8_name
    start_row = start_row_four_twelve
    end_row = end_row_four_twelve
    col = fixed_col_four_twelve
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_four_twelve & CStr(start_row) & ":" & sv_col_four_twelve & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    For i = start_row To end_row - 1
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
    Next
    For i = start_row To end_row - 1
        If Trim(Sheets(sheet_name).Cells(i, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, col, EM2)
        End If
    Next
    For i = start_row To start_row + 2
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_Table16()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet12_name
    irow = start_row_four_sixt
    tcol = fixed_col_four_sixt
    end_row = end_row_four_sixt
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_sixt) & ":" & tcol & CStr(end_row_four_sixt)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_four_sixt & CStr(irow) & ":" & sv_col_four_sixt & CStr(end_row)).ClearContents
    
    
    For i = irow To end_row_four_sixt
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_TableFive()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    sheet_name = sheet13_name
    validate = True
    
    irow = start_row_five
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    end_row = end_row_five
    
    Sheets(sheet_name).Range(tcol & CStr(start_row_five) & ":" & cecol & CStr(end_row_five)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_five & CStr(irow) & ":" & sv_col_five & CStr(end_row)).ClearContents
    
     For s = irow To end_row_five
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
    Next
    
    
    sheet_name = sheet13_name
    start_row = word_start_row_five
    end_row = word_end_row_five
    col = word_col_five
    Sheets(sheet_name).Cells(start_row + 6, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 7, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 10, col).Interior.ColorIndex = 0
    
    
    For i = start_row To start_row + 7
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
    Next
    For i = start_row + 4 To start_row + 7
        Sheets(sheet_name).Cells(i, Chr(Asc(col) + 2)).Interior.ColorIndex = 0
    Next
    Sheets(sheet_name).Cells(end_row + 2, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_five & CStr(start_row) & ":" & sv_col_five & CStr(end_row + 2)).ClearContents
    
   
    
    For i = start_row To start_row + 4
        If Trim(Sheets(sheet_name).Cells(i, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, col, EM2)
        End If
    Next
    If Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) = "DD/MM/YYYY" Then
        Call Common_Module.display_error(sheet_name, start_row + 3, col, EM2)
    End If
 
    If Trim(Sheets(sheet_name).Cells(start_row + 6, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row + 6, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 7, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row + 7, col, EM2)
    End If
    For i = start_row + 5 To start_row + 7
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(col) + 2)).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, Chr(Asc(col) + 2), EM2)
        End If
    Next
    If Trim(Sheets(sheet_name).Cells(end_row + 2, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, end_row + 2, col, EM2)
    End If
    
    If Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) <> vbNullString And Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) <> "DD/MM/YYYY" Then
            If Not Common_Module.matchRegex(Trim(Sheets(sheet_name).Cells(start_row + 3, col).value), DATE_REGEX) Then
                Call Common_Module.display_error(sheet_name, start_row + 3, col, EM4)
            Else
                Application.EnableEvents = False
                Sheets(sheet_name).Cells(start_row + 3, col).value = Replace(Sheets(sheet_name).Cells(start_row + 3, col).value, "-", "/")
                Sheets(sheet_name).Cells(start_row + 3, col).value = Replace(Sheets(sheet_name).Cells(start_row + 3, col).value, ".", "/")
                Sheets(sheet_name).Cells(start_row + 3, col).value = Common_Module.ConvertDate(Trim(Sheets(sheet_name).Cells(start_row + 3, col).value))
                Application.EnableEvents = True
            End If
    End If
    Sheets(sheet_name).Cells(end_row - 7, "E") = Trim(Sheets(sheet_name).Cells(end_row - 7, "E"))
    Call check_reg_val(sheet_name, end_row - 7, "E", ADDRESS_REGEX, EM6)
    Call check_reg_val(sheet_name, end_row - 6, "E", NAME_REGEX, EM5)
    Call check_reg_val(sheet_name, end_row - 5, "E", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    
    End If
    Call check_reg_val(sheet_name, end_row + 2, "E", PAN_REGEX, EM16)
    
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
End Sub
Public Sub Validate_Table14()
    
    Sheets(sheet10_name).Cells(end_row_four_fourt - 1, amte_col_four_fourt).Interior.ColorIndex = 0
    Sheets(sheet10_name).Cells(end_row_four_fourt - 1, sv_col_four_fourt).ClearContents
    Call Check_Mandatory(sheet10_name, end_row_four_fourt - 1, amte_col_four_fourt)
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet10_name
    irow = start_row_four_fourt
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    end_row = end_row_four_fourt
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_fourt) & ":" & ccol & CStr(end_row_four_fourt - 3)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(scol & CStr(start_row_four_fourt) & ":" & scol & CStr(end_row_four_fourt)).Interior.ColorIndex = 0


    
    Sheets(sheet_name).Range(sv_col_four_fourt & CStr(irow) & ":" & sv_col_four_fourt & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row - 2, scol).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, scol).Interior.ColorIndex = 15
    
    Call Delete_expense(sheet10_name, start_row_four_fourt_exp, end_row_four_fourt_exp, value_col_four_fourt)
    end_row = end_row_four_fourt
    If Trim(Sheets(sheet_name).Cells(end_row - 1, scol).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, scol, EM2)
    End If
    For s = irow To end_row_four_fourt - 3
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM14
        End If
    Next
    For i = irow To end_row_four_fourt - 3
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_four_fourt - 3
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_four_fourt
        If Not (i = end_row_four_fourt Or i = end_row_four_fourt - 2 Or i = end_row_four_fourt - 1) Then
            validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
        End If
    Next
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
    
End Sub
Public Sub Validate_PB1()
   Call Delete_qual(sheet14_name, start_row_pb1_qual, end_row_pb1_qual, qual_col_pb1)
    validate = True
    start_row = start_row_pb1
    end_row = end_row_pb1
    sheet_name = sheet14_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(pb1_sv_col & CStr(start_row) & ":" & pb1_sv_col & CStr(end_row)).ClearContents
    Call Check_Mandatory(sheet_name, start_row, "B")
    Call Check_Mandatory(sheet_name, start_row + 2, "D")
    Call Check_Mandatory(sheet_name, start_row + 4, "D")
    Call Check_Mandatory(sheet_name, start_row + 5, "D")
    Call Check_Mandatory(sheet_name, start_row + 6, "D")
    Call Check_Mandatory(sheet_name, start_row + 9, "D")
    Call Check_Mandatory(sheet_name, start_row + 10, "D")
    Call Check_Mandatory(sheet_name, start_row + 14, "E")
    Call Check_Mandatory(sheet_name, start_row + 16, "E")
    Call Check_Mandatory(sheet_name, start_row + 17, "G")
    Call Check_Mandatory(sheet_name, start_row + 18, "E")
    Call Check_Mandatory(sheet_name, start_row + 18, "G")
    Call Check_Mandatory(sheet_name, start_row + 19, "E")
    Call Check_Mandatory(sheet_name, start_row + 19, "G")
    Call Check_Mandatory(sheet_name, start_row + 22, "D")
    Call Check_Mandatory(sheet_name, start_row + 24, "E")
    Call Check_Mandatory(sheet_name, start_row + 25, "G")
    Call Check_Mandatory(sheet_name, start_row + 26, "E")
    Call Check_Mandatory(sheet_name, start_row + 26, "G")
    Call Check_Mandatory(sheet_name, start_row + 27, "E")
    Call Check_Mandatory(sheet_name, start_row + 27, "G")
    Call Check_Mandatory(sheet_name, start_row + 36, "B")
    Call Check_Mandatory(sheet_name, start_row + 47, "F")
    Call Check_Mandatory(sheet_name, start_row + 47, "I")
    Call Check_Mandatory(sheet_name, start_row + 61, "C")
    Call Check_Mandatory(sheet_name, end_row - 7, "D")
    Call Check_Mandatory(sheet_name, end_row - 6, "D")
    Call Check_Mandatory(sheet_name, end_row - 5, "D")
    Call Check_Mandatory(sheet_name, end_row - 4, "D")
    Call Check_Mandatory(sheet_name, end_row - 3, "E")
    Call Check_Mandatory(sheet_name, end_row - 2, "G")
    Call Check_Mandatory(sheet_name, end_row - 1, "E")
    Call Check_Mandatory(sheet_name, end_row - 1, "G")
    Call Check_Mandatory(sheet_name, end_row, "E")
    Call Check_Mandatory(sheet_name, end_row, "G")
    
    Dim rg As Range
    Dim cg As Range
    Set rg = Range("AdAdrs")
    For Each cg In rg
    If Not cg.value = vbNullString Then
        Call Check_Mandatory(sheet_name, start_row + 29, "E")
        Call Check_Mandatory(sheet_name, start_row + 30, "G")
        Call Check_Mandatory(sheet_name, start_row + 31, "E")
        Call Check_Mandatory(sheet_name, start_row + 31, "G")
        Call Check_Mandatory(sheet_name, start_row + 32, "E")
        Call Check_Mandatory(sheet_name, start_row + 32, "G")
    End If
    Next cg
    
    Set rg = Range("AddAdrs")
    For Each cg In rg
    If Not cg.value = vbNullString Then
        Call Check_Mandatory(sheet_name, start_row + 29, "E")
        Call Check_Mandatory(sheet_name, start_row + 30, "G")
        Call Check_Mandatory(sheet_name, start_row + 31, "E")
        Call Check_Mandatory(sheet_name, start_row + 31, "G")
        Call Check_Mandatory(sheet_name, start_row + 32, "E")
        Call Check_Mandatory(sheet_name, start_row + 32, "G")
    End If
    Next cg
    
    Call Validate_Date(sheet_name, start_row + 2, "D")
    Call Validate_Date(sheet_name, start_row + 5, "D")
    Call Validate_Date(sheet_name, start_row + 6, "D")
    Call Validate_Date(sheet_name, start_row + 9, "D")
    Call Validate_Date(sheet_name, start_row + 10, "D")
    Call Validate_Date(sheet_name, end_row - 4, "D")
    Dim check_reg As String
    
    
    Call check_reg_val(sheet_name, start_row + 14, "E", NAME_REGEX, EM5)
    Sheets(sheet_name).Cells(start_row + 16, "G") = Trim(Sheets(sheet_name).Cells(start_row + 16, "G"))
    Call check_reg_val(sheet_name, start_row + 16, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 16, "E") = Trim(Sheets(sheet_name).Cells(start_row + 16, "E"))
    Call check_reg_val(sheet_name, start_row + 16, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 17, "G") = Trim(Sheets(sheet_name).Cells(start_row + 17, "G"))
    Call check_reg_val(sheet_name, start_row + 17, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 17, "E") = Trim(Sheets(sheet_name).Cells(start_row + 17, "E"))
    Call check_reg_val(sheet_name, start_row + 17, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 18, "G") = Trim(Sheets(sheet_name).Cells(start_row + 18, "G"))
    Call check_reg_val(sheet_name, start_row + 18, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 18, "E") = Trim(Sheets(sheet_name).Cells(start_row + 18, "E"))
    Call check_reg_val(sheet_name, start_row + 18, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(start_row + 19, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 19, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 19, "E", EM12
                    
                    End If
            End With
    End If
    'Call check_reg_val(sheet_name, start_row + 19, "G", PIN_REGEX, EM10)
    If Sheets(sheet_name).Cells(start_row + 19, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(start_row + 19, "G") < 110001 Then
        Common_Module.display_error sheet_name, start_row + 19, "G", EM10
    Else
    Call check_reg_val(sheet_name, start_row + 19, "G", PIN_REGEX, EM10)
   End If
   End If
    
    irow = start_row + 24
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    irow = start_row + 29
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    Sheets(sheet_name).Cells(end_row - 7, "D") = Trim(Sheets(sheet_name).Cells(end_row - 7, "D"))
    Call check_reg_val(sheet_name, end_row - 7, "D", ADDRESS_REGEX, EM6)
    Call check_reg_val(sheet_name, end_row - 6, "D", NAME_REGEX, EM5)
    Call check_reg_val(sheet_name, end_row - 5, "D", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    For s = start_row_pb1_qual To end_row_pb1_qual
        Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb1) + 4)) = Trim(Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb1) + 4)))
        Call Check_Mandatory(sheet_name, s, qual_col_pb1)
        Call Check_Mandatory(sheet_name, s, Chr(Asc(qual_col_pb1) + 4))
        Call check_reg_val(sheet_name, s, Chr(Asc(qual_col_pb1) + 4), QUAL_REGEX, EM11)
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb1) + 4) & CStr(s)).WrapText = True
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb1) + 4) & CStr(s)).EntireRow.AutoFit
    Next
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
    
End Sub
Public Sub Validate_PB2()
    Call Delete_qual(sheet15_name, start_row_pb2_qual, end_row_pb2_qual, qual_col_pb2)
    validate = True
    start_row = start_row_pb2
    end_row = end_row_pb2
    sheet_name = sheet15_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(pb2_sv_col & CStr(start_row) & ":" & pb2_sv_col & CStr(end_row)).ClearContents
    Call Check_Mandatory(sheet_name, start_row, "B")
    Call Check_Mandatory(sheet_name, start_row + 2, "D")
    Call Check_Mandatory(sheet_name, start_row + 4, "D")
    Call Check_Mandatory(sheet_name, start_row + 5, "F")
    Call Check_Mandatory(sheet_name, start_row + 6, "F")
    Call Check_Mandatory(sheet_name, start_row + 6, "D")
    Call Check_Mandatory(sheet_name, start_row + 7, "D")
    Call Check_Mandatory(sheet_name, start_row + 7, "F")
    Call Check_Mandatory(sheet_name, start_row + 11, "D")
    Call Check_Mandatory(sheet_name, start_row + 13, "D")
    Call Check_Mandatory(sheet_name, start_row + 14, "F")
    Call Check_Mandatory(sheet_name, start_row + 15, "D")
    Call Check_Mandatory(sheet_name, start_row + 15, "F")
    Call Check_Mandatory(sheet_name, start_row + 16, "D")
    Call Check_Mandatory(sheet_name, start_row + 16, "F")
    Call Check_Mandatory(sheet_name, start_row + 18, "E")
    Call Check_Mandatory(sheet_name, start_row + 20, "D")
    Call Check_Mandatory(sheet_name, start_row + 22, "D")
    Call Check_Mandatory(sheet_name, start_row + 24, "D")
    Call Check_Mandatory(sheet_name, start_row + 25, "D")
    Call Check_Mandatory(sheet_name, start_row + 26, "D")
    Call Check_Mandatory(sheet_name, start_row + 29, "D")
    Call Check_Mandatory(sheet_name, start_row + 30, "D")
    
    Call Check_Mandatory(sheet_name, start_row + 36, "B")
    Call Check_Mandatory(sheet_name, start_row + 49, "C")
    
    Call Check_Mandatory(sheet_name, end_row - 7, "D")
    Call Check_Mandatory(sheet_name, end_row - 6, "D")
    Call Check_Mandatory(sheet_name, end_row - 5, "D")
    Call Check_Mandatory(sheet_name, end_row - 4, "D")
    Call Check_Mandatory(sheet_name, end_row - 3, "E")
    Call Check_Mandatory(sheet_name, end_row - 2, "G")
    Call Check_Mandatory(sheet_name, end_row - 1, "E")
    Call Check_Mandatory(sheet_name, end_row - 1, "G")
    Call Check_Mandatory(sheet_name, end_row, "E")
    Call Check_Mandatory(sheet_name, end_row, "G")
    
    Call Validate_Date(sheet_name, start_row + 20, "D")
    Call Validate_Date(sheet_name, start_row + 22, "D")
    Call Validate_Date(sheet_name, start_row + 25, "D")
    Call Validate_Date(sheet_name, start_row + 26, "D")
    Call Validate_Date(sheet_name, start_row + 29, "D")
    Call Validate_Date(sheet_name, start_row + 30, "D")
    Call Validate_Date(sheet_name, end_row - 4, "D")
    
    Call check_reg_val(sheet_name, start_row + 2, "D", NAME_REGEX, EM5)
    irow = start_row + 4
    Sheets(sheet_name).Cells(irow, "D") = Trim(Sheets(sheet_name).Cells(irow, "D"))
    Call check_reg_val(sheet_name, irow, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "F") = Trim(Sheets(sheet_name).Cells(irow, "F"))
    Call check_reg_val(sheet_name, irow, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "D") = Trim(Sheets(sheet_name).Cells(irow + 1, "D"))
    Call check_reg_val(sheet_name, irow + 1, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "F") = Trim(Sheets(sheet_name).Cells(irow + 1, "F"))
    Call check_reg_val(sheet_name, irow + 1, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "D") = Trim(Sheets(sheet_name).Cells(irow + 2, "D"))
    Call check_reg_val(sheet_name, irow + 2, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "F") = Trim(Sheets(sheet_name).Cells(irow + 2, "F"))
    Call check_reg_val(sheet_name, irow + 2, "F", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "D").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "D").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "D", EM12
                    
                    End If
            End With
    End If
   
    If Sheets(sheet_name).Cells(irow + 3, "F").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "F") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "F", EM10
    Else
         Call check_reg_val(sheet_name, irow + 3, "F", PIN_REGEX, EM10)
    End If
    End If
    
    Call check_reg_val(sheet_name, start_row + 11, "D", NAME_REGEX, EM5)
    irow = start_row + 13
    Sheets(sheet_name).Cells(irow, "D") = Trim(Sheets(sheet_name).Cells(irow, "D"))
    Call check_reg_val(sheet_name, irow, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "F") = Trim(Sheets(sheet_name).Cells(irow, "F"))
    Call check_reg_val(sheet_name, irow, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "D") = Trim(Sheets(sheet_name).Cells(irow + 1, "D"))
    Call check_reg_val(sheet_name, irow + 1, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "F") = Trim(Sheets(sheet_name).Cells(irow + 1, "F"))
    Call check_reg_val(sheet_name, irow + 1, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "D") = Trim(Sheets(sheet_name).Cells(irow + 2, "D"))
    Call check_reg_val(sheet_name, irow + 2, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "F") = Trim(Sheets(sheet_name).Cells(irow + 2, "F"))
    Call check_reg_val(sheet_name, irow + 2, "F", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "D").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "D").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "D", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "F").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "F") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "F", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "F", PIN_REGEX, EM10)
    End If
    
    End If
    
    Sheets(sheet_name).Cells(end_row - 7, "D") = Trim(Sheets(sheet_name).Cells(end_row - 7, "D"))
    Call check_reg_val(sheet_name, end_row - 7, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(end_row - 6, "D") = Trim(Sheets(sheet_name).Cells(end_row - 6, "D"))
    Call check_reg_val(sheet_name, end_row - 6, "D", NAME_REGEX, EM5)
    Sheets(sheet_name).Cells(end_row - 5, "D") = Trim(Sheets(sheet_name).Cells(end_row - 5, "D"))
    Call check_reg_val(sheet_name, end_row - 5, "D", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    For s = start_row_pb2_qual To end_row_pb2_qual
        Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb2) + 4)) = Trim(Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb2) + 4)))
        Call Check_Mandatory(sheet_name, s, qual_col_pb2)
        Call Check_Mandatory(sheet_name, s, Chr(Asc(qual_col_pb2) + 4))
        Call check_reg_val(sheet_name, s, Chr(Asc(qual_col_pb2) + 4), QUAL_REGEX, EM11)
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb2) + 4) & CStr(s)).WrapText = True
    Next
    
    If validate = False Then
        MsgBox "There are Validation error(s) in the sheet.Correct them to proceed."
    Else
        MsgBox "Sheet Successfully validated."
    End If
    
End Sub
Public Function Validate_Home()
    sheet_name = home_sheet
    start_row = start_row_home
    col = fixed_col_home
    Validate_Home = True
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 0
        Sheets(sheet_name).Cells(start_row + 1, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 2, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 3, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 4, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 5, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 6, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_home & CStr(start_row) & ":" & sv_col_home & CStr(start_row + 6)).ClearContents
    
    If Trim(Sheets(sheet_name).Cells(start_row, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row, col, EM2)
            Validate_Home = False
    End If
    
    Cells(start_row_home, fixed_col_home) = Trim(Cells(start_row_home, fixed_col_home))  '*******trim spaces
    
     If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row, col, EM2)
            Validate_Home = False
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 1, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row + 1, col, EM2)
            Validate_Home = False
    End If
    
    If Trim(Sheets(home_sheet).Cells(start_row + 2, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 2, col).value), HNAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 2, col, EM15)
            Validate_Home = False
    End If
    If Trim(Sheets(home_sheet).Cells(start_row + 3, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 3, col).value), HNAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 3, col, EM15)
            Validate_Home = False
    End If
    
    
    
    If Trim(Sheets(home_sheet).Cells(start_row + 4, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 4, col).value), ANAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 4, col, EM18)
            Validate_Home = False
    End If
    
    
    If Trim(Sheets(sheet_name).Cells(start_row + 5, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row + 5, col, EM2)
            Validate_Home = False
    End If
    
    If Trim(Sheets(sheet_name).Cells(start_row + 1, col).value) <> vbNullString Then
            With Sheets("Master").Range("=Master!$A$23:$A$24")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 1, col).value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 1, col, EM12
                    Validate_Home = False
                    End If
            End With
    End If
    
    
    If Trim(Sheets(sheet_name).Cells(start_row + 5, col).value) <> vbNullString Then
            With Sheets("Master").Range("=Master!$A$19:$A$20")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 5, col).value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 5, col, EM12
                    Validate_Home = False
                    End If
            End With
    End If
    
    
End Function

Public Function Validate_Date(sheet_name, rowNo, col)
    If Trim(Sheets(sheet_name).Cells(rowNo, col).value) <> vbNullString And Trim(Sheets(sheet_name).Cells(rowNo, col).value) <> "DD/MM/YYYY" Then
            If Not Common_Module.matchRegex(Trim(Sheets(sheet_name).Cells(rowNo, col).value), DATE_REGEX) Then
                Call Common_Module.display_error(sheet_name, rowNo, col, EM4)
            Else
                Application.EnableEvents = False
                Sheets(sheet_name).Cells(rowNo, col).value = Replace(Sheets(sheet_name).Cells(rowNo, col).value, ".", "/")
                Sheets(sheet_name).Cells(rowNo, col).value = Replace(Sheets(sheet_name).Cells(rowNo, col).value, "-", "/")
                Sheets(sheet_name).Cells(rowNo, col).value = Common_Module.ConvertDate(Trim(Sheets(sheet_name).Cells(rowNo, col).value))
                Application.EnableEvents = True
            End If
    End If
End Function
Public Function Check_Mandatory(sheet_name, rowNo, col)
    If Trim(Sheets(sheet_name).Cells(rowNo, col).value) = vbNullString Or Trim(Sheets(sheet_name).Cells(rowNo, col).value) = "DD/MM/YYYY" Then
            Call Common_Module.display_error(sheet_name, rowNo, col, EM2)
    End If

End Function

Public Function check_reg_val(sheet_name, rowNo, col, check_reg As String, Error_Message)
    Dim sim_regex As String
    sim_regex = check_reg
    If (Sheets(sheet_name).Cells(rowNo, col).value) <> vbNullString And Not Common_Module.matchRegex((Sheets(sheet_name).Cells(rowNo, col).value), sim_regex) Then
        Call Common_Module.display_error(sheet_name, rowNo, col, Error_Message)
    End If
End Function
Attribute VB_Name = "Validate_Functions"
Public Function ValidateFunc_Reasons()
    validate = True
    
    sheet_name = ActiveSheet.Name
    'MsgBox sheet_name
    If sheet_name = sheet2_name Then
        col = fixed_col_two_six
        start_row = start_row_two_six
        end_row = end_row_two_six
        sheet_name = sheet2_name
        sv_col = sv_col_two_six
    ElseIf sheet_name = sheet4_name Then
        col = fixed_col_two_eight
        start_row = start_row_two_eight
        end_row = end_row_two_eight
        sheet_name = sheet4_name
        sv_col = sv_col_two_eight
    ElseIf sheet_name = sheet6_name Then
        col = fixed_col_three_ten
        start_row = start_row_three_ten
        end_row = end_row_three_ten
        sheet_name = sheet6_name
        sv_col = sv_col_three_ten
    ElseIf sheet_name = sheet9_name Then
        col = fixed_col_four_thirt
        start_row = start_row_four_thirt
        end_row = end_row_four_thirt
        sheet_name = sheet9_name
        sv_col = sv_col_four_thirt
    
    ElseIf sheet_name = sheet11_name Then
        col = fixed_col_four_fift
        start_row = start_row_four_fift
        end_row = end_row_four_fift
        sheet_name = sheet11_name
        sv_col = sv_col_four_fift
    End If
    For i = start_row To end_row
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
        Sheets(sheet_name).Cells(i, sv_col).ClearContents
    Next
    Call Delete_reasons(sheet_name, start_row, end_row, col)

    
    For i = start_row To end_row
        Sheets(sheet_name).Cells(i, col) = Trim(Sheets(sheet_name).Cells(i, col))
        If (Sheets(sheet_name).Cells(i, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex((Sheets(sheet_name).Cells(i, col).value), char_REGEX) Then
        
            Call Common_Module.display_error(sheet_name, i, col, EM1)
        
        End If
    Next
    
End Function
Public Function Delete_reasons(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To start_row + 9
        If (Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And (Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If (Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString Then
            Sheets(sheet_name).Rows(i).EntireRow.Delete
            'Sheets(sheet_name).Range(fixed_col & CStr(i)).Delete Shift:=xlUp
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = start_row + 9
    Do While i <= j
        If (Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 1)).value) <> vbNullString Then
            Sheets(sheet_name).Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    'end_row = last_value
    Call Common_Module.Arrange_Reasons(sheet_name, start_row, end_row, fixed_col)
    
End Function
Public Function Delete_expense(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To end_row
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 2)).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And Trim(Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 2)).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 2), EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 4), EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 2)).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            Sheets(sheet_name).Rows(i).EntireRow.Delete
'            Sheets(sheet_name).Range(fixed_col & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) + 2) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) + 4) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 2) & CStr(i)).Delete Shift:=xlUp
'            Sheets(sheet_name).Range(Chr(Asc(fixed_col) - 3) & CStr(i)).Delete Shift:=xlUp
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = end_row + 1
    Do While i < j
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 2)).value) <> vbNullString Then
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            Sheets(sheet_name).Rows(i).EntireRow.Delete
            
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    
    Call Common_Module.Arrange_Expense(sheet_name, start_row, end_row, fixed_col)
End Function
Public Function Delete_qual(sheet_name, start_row, end_row, fixed_col)
    last_value = start_row
    For i = start_row + 1 To end_row
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) <> vbNullString Or Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) <> vbNullString Then
            last_value = i
        End If
    Next
    If last_value = start_row Then
        GoTo s
    End If
    If last_value > start_row And Trim(Sheets(sheet_name).Cells(start_row, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(start_row, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
        Common_Module.display_error sheet_name, start_row, fixed_col, EM9
        Common_Module.display_error sheet_name, start_row, Chr(Asc(fixed_col) + 4), EM9
    End If
    i = start_row + 1
    Do While i <= last_value
        If Trim(Sheets(sheet_name).Cells(i, fixed_col).value) = vbNullString And Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) + 4)).value) = vbNullString Then
            Sheets(sheet_name).Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            last_value = last_value - 1
            end_row = end_row - 1
            GoTo h
        End If
        i = i + 1
h:
    Loop
s:
    i = last_value + 1
    j = end_row + 1
    Do While i < j
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(fixed_col) - 1)).value) <> vbNullString Then
            Sheets(sheet_name).Rows(i).EntireRow.Delete
            Common_Module.Decrement_Last_row (sheet_name)
            end_row = end_row - 1
            j = j - 1
            GoTo n
        End If
        i = i + 1
n:
    Loop
    
    Call Common_Module.Arrange_qual(sheet_name, start_row, end_row, fixed_col)
End Function
Public Function ValidateFunc_Table5()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet1_name
    start_row = start_row_two_five
    end_row = end_row_two_five
    col = fixed_col_two_five
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    
    Sheets(sheet_name).Range(sv_col_two_five & CStr(start_row) & ":" & sv_col_two_five & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    If Trim(Sheets(sheet_name).Cells(start_row, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, start_row, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 6, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, start_row + 6, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(end_row - 1, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, col, EM2)
    End If
    
    For i = start_row To start_row + 5
        validate1 = Common_Module.Positive_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(start_row + 6, col, sheet_name)
    For i = start_row + 7 To start_row + 11
        validate1 = Common_Module.Positive_Amt(i, col, sheet_name)
    Next
    For i = start_row + 12 To start_row + 14
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    
End Function
Public Function ValidateFunc_Table7()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet3_name
    start_row = start_row_two_seven
    end_row = end_row_two_seven
    col = fixed_col_two_seven
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_two_seven & CStr(start_row) & ":" & sv_col_two_seven & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    
    If Trim(Sheets(sheet_name).Cells(end_row - 1, col).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, col, EM2)
    End If
    For i = start_row + 1 To start_row + 3
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    
    
    
End Function
Public Function ValidateFunc_Table9()
    Dim i As Integer, irow As Integer
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    validate = True
    sheet_name = sheet5_name
    irow = start_row_three_nine
    tcol = taxv_col_three_nine
    ccol = ctax_col_three_nine
    scol = stax_col_three_nine
    icol = itax_col_three_nine
    cecol = cetax_col_three_nine
    end_row = end_row_three_nine
    Sheets(sheet_name).Range(ccol & CStr(start_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_nine) & ":" & tcol & CStr(end_row_three_nine - 7)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_three_nine & CStr(irow) & ":" & sv_col_three_nine & CStr(end_row)).ClearContents
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine) & ":" & cecol & CStr(end_row_three_nine)).Interior.ColorIndex = 15
    Sheets(sheet_name).Range(ccol & CStr(end_row_three_nine - 2) & ":" & cecol & CStr(end_row_three_nine - 2)).Interior.ColorIndex = 15
    validate1 = Common_Module.Negative_Amt(irow, tcol, sheet_name)
    For s = irow To end_row_three_nine - 7
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    
    For i = irow + 1 To end_row_three_nine - 7
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
       If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
        End If
    Next
    For i = irow To end_row_three_nine
        If Not (i = end_row_three_nine Or i = end_row_three_nine - 2 Or i = end_row_three_nine - 1) Then
            validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
        End If
    Next
    For s = 0 To 4
        If s <> 3 Then
            If Sheets(sheet_name).Cells(end_row_three_nine - 1, Chr(Asc(ccol) + s)).value = vbNullString Then
                Common_Module.display_error sheet_name, end_row_three_nine - 1, Chr(Asc(ccol) + s), EM2
            End If
        End If
    Next
    
End Function
Public Function ValidateFunc_Table11()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet7_name
    irow = start_row_three_eleven
    tcol = taxv_col_three_eleven
    ccol = ctax_col_three_eleven
    scol = stax_col_three_eleven
    icol = itax_col_three_eleven
    cecol = cetax_col_three_eleven
    end_row = end_row_three_eleven
    Sheets(sheet_name).Range(ccol & CStr(start_row_three_eleven) & ":" & cecol & CStr(end_row_three_eleven)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(tcol & CStr(start_row_three_eleven) & ":" & tcol & CStr(end_row_three_eleven - 4)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_three_eleven & CStr(irow) & ":" & sv_col_three_eleven & CStr(end_row)).ClearContents
    
    For s = irow To end_row_three_eleven - 4
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    For i = irow To end_row_three_eleven - 4
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
    Next
    For i = irow To end_row_three_eleven
        validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
    Next
    
End Function
Public Function ValidateFunc_Table12()
    Dim i As Integer
    Dim col As String, sheet_name As String
    validate = True
    
    sheet_name = sheet8_name
    start_row = start_row_four_twelve
    end_row = end_row_four_twelve
    col = fixed_col_four_twelve
    Sheets(sheet_name).Range(col & CStr(start_row) & ":" & col & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_four_twelve & CStr(start_row) & ":" & sv_col_four_twelve & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row, col).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row - 2, col).Interior.ColorIndex = 15
    For i = start_row To end_row - 1
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
    Next
    For i = start_row To end_row - 1
        If Trim(Sheets(sheet_name).Cells(i, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, col, EM2)
        End If
    Next
    For i = start_row To start_row + 2
        validate1 = Common_Module.Negative_Amt(i, col, sheet_name)
    Next
    validate1 = Common_Module.Negative_Amt(end_row - 1, col, sheet_name)
    
End Function
Public Function ValidateFunc_Table16()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet12_name
    irow = start_row_four_sixt
    tcol = fixed_col_four_sixt
    end_row = end_row_four_sixt
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_sixt) & ":" & tcol & CStr(end_row_four_sixt)).Interior.ColorIndex = 0
    

    Sheets(sheet_name).Range(sv_col_four_sixt & CStr(irow) & ":" & sv_col_four_sixt & CStr(end_row)).ClearContents
    
    
    For i = irow To end_row_four_sixt
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    
    
End Function
Public Function ValidateFunc_TableFive()
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    sheet_name = sheet13_name
    validate = True
    
    irow = start_row_five
    tcol = taxv_col_five
    ccol = ctax_col_five
    scol = stax_col_five
    icol = itax_col_five
    cecol = cetax_col_five
    end_row = end_row_five
    
    Sheets(sheet_name).Range(tcol & CStr(start_row_five) & ":" & cecol & CStr(end_row_five)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_five & CStr(irow) & ":" & sv_col_five & CStr(end_row)).ClearContents
    
     For s = irow To end_row_five
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, icol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM13
        End If
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, icol, sheet_name)
    Next
    For i = irow To end_row_five
        validate1 = Common_Module.Positive_Amt(i, cecol, sheet_name)
    Next
    
    
    sheet_name = sheet13_name
    start_row = word_start_row_five
    end_row = word_end_row_five
    col = word_col_five
    Sheets(sheet_name).Cells(start_row + 6, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 7, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 10, col).Interior.ColorIndex = 0
    
    
    For i = start_row To start_row + 7
        Sheets(sheet_name).Cells(i, col).Interior.ColorIndex = 0
    Next
    For i = start_row + 4 To start_row + 7
        Sheets(sheet_name).Cells(i, Chr(Asc(col) + 2)).Interior.ColorIndex = 0
    Next
    Sheets(sheet_name).Cells(end_row + 2, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_five & CStr(start_row) & ":" & sv_col_five & CStr(end_row + 2)).ClearContents
    
   
    
    For i = start_row To start_row + 4
        If Trim(Sheets(sheet_name).Cells(i, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, col, EM2)
        End If
    Next
    If Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) = "DD/MM/YYYY" Then
        Call Common_Module.display_error(sheet_name, start_row + 3, col, EM2)
    End If
 
    If Trim(Sheets(sheet_name).Cells(start_row + 6, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row + 6, col, EM2)
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 7, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row + 7, col, EM2)
    End If
    For i = start_row + 5 To start_row + 7
        If Trim(Sheets(sheet_name).Cells(i, Chr(Asc(col) + 2)).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, i, Chr(Asc(col) + 2), EM2)
        End If
    Next
    If Trim(Sheets(sheet_name).Cells(end_row + 2, col).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, end_row + 2, col, EM2)
    End If
    
    If Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) <> vbNullString And Trim(Sheets(sheet_name).Cells(start_row + 3, col).value) <> "DD/MM/YYYY" Then
            If Not Common_Module.matchRegex(Trim(Sheets(sheet_name).Cells(start_row + 3, col).value), DATE_REGEX) Then
                Call Common_Module.display_error(sheet_name, start_row + 3, col, EM4)
            Else
                Application.EnableEvents = False
                Sheets(sheet_name).Cells(start_row + 3, col).value = Replace(Sheets(sheet_name).Cells(start_row + 3, col).value, "-", "/")
                Sheets(sheet_name).Cells(start_row + 3, col).value = Replace(Sheets(sheet_name).Cells(start_row + 3, col).value, ".", "/")
                Sheets(sheet_name).Cells(start_row + 3, col).value = Common_Module.ConvertDate(Trim(Sheets(sheet_name).Cells(start_row + 3, col).value))
                Application.EnableEvents = True
            End If
    End If
    Sheets(sheet_name).Cells(end_row - 7, "E") = Trim(Sheets(sheet_name).Cells(end_row - 7, "E"))
    Call check_reg_val(sheet_name, end_row - 7, "E", ADDRESS_REGEX, EM6)
    Call check_reg_val(sheet_name, end_row - 6, "E", NAME_REGEX, EM5)
    Call check_reg_val(sheet_name, end_row - 5, "E", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
        
    End If
    Call check_reg_val(sheet_name, end_row + 2, "E", PAN_REGEX, EM16)
    
End Function
Public Function ValidateFunc_Table14()
    
    Sheets(sheet10_name).Cells(end_row_four_fourt - 1, amte_col_four_fourt).Interior.ColorIndex = 0
    Sheets(sheet10_name).Cells(end_row_four_fourt - 1, sv_col_four_fourt).ClearContents
    Call Check_Mandatory(sheet10_name, end_row_four_fourt - 1, amte_col_four_fourt)
    Dim tcol As String, ccol As String, scol As String, cecol As String, icol As String, sheet_name As String
    Dim i As Integer
    validate = True
    sheet_name = sheet10_name
    irow = start_row_four_fourt
    tcol = value_col_four_fourt
    ccol = amt_col_four_fourt
    scol = amte_col_four_fourt
    end_row = end_row_four_fourt
    Sheets(sheet_name).Range(tcol & CStr(start_row_four_fourt) & ":" & ccol & CStr(end_row_four_fourt - 3)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(scol & CStr(start_row_four_fourt) & ":" & scol & CStr(end_row_four_fourt)).Interior.ColorIndex = 0


    Sheets(sheet_name).Range(sv_col_four_fourt & CStr(irow) & ":" & sv_col_four_fourt & CStr(end_row)).ClearContents
    Sheets(sheet_name).Cells(end_row - 2, scol).Interior.ColorIndex = 15
    Sheets(sheet_name).Cells(end_row, scol).Interior.ColorIndex = 15
    
    Call Delete_expense(sheet10_name, start_row_four_fourt_exp, end_row_four_fourt_exp, value_col_four_fourt)
    end_row = end_row_four_fourt
    If Trim(Sheets(sheet_name).Cells(end_row - 1, scol).value) = vbNullString Then
        Call Common_Module.display_error(sheet_name, end_row - 1, scol, EM2)
    End If
    For s = irow To end_row_four_fourt - 3
        If (Sheets(sheet_name).Cells(s, scol).value <> vbNullString Or Sheets(sheet_name).Cells(s, ccol).value <> vbNullString) And Sheets(sheet_name).Cells(s, tcol).value = vbNullString Then
            Common_Module.display_error sheet_name, s, tcol, EM14
        End If
    Next
    For i = irow To end_row_four_fourt - 3
        validate1 = Common_Module.Positive_Amt(i, tcol, sheet_name)
    Next
    For i = irow To end_row_four_fourt - 3
        validate1 = Common_Module.Positive_Amt(i, ccol, sheet_name)
    Next
    For i = irow To end_row_four_fourt
        If Not (i = end_row_four_fourt Or i = end_row_four_fourt - 2 Or i = end_row_four_fourt - 1) Then
            validate1 = Common_Module.Positive_Amt(i, scol, sheet_name)
        End If
    Next

    
End Function
Public Function ValidateFunc_PB1()
    Call Delete_qual(sheet14_name, start_row_pb1_qual, end_row_pb1_qual, qual_col_pb1)
    validate = True
    start_row = start_row_pb1
    end_row = end_row_pb1
    sheet_name = sheet14_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(pb1_sv_col & CStr(start_row) & ":" & pb1_sv_col & CStr(end_row)).ClearContents
    Call Check_Mandatory(sheet_name, start_row, "B")
    Call Check_Mandatory(sheet_name, start_row + 2, "D")
    Call Check_Mandatory(sheet_name, start_row + 4, "D")
    Call Check_Mandatory(sheet_name, start_row + 5, "D")
    Call Check_Mandatory(sheet_name, start_row + 6, "D")
    Call Check_Mandatory(sheet_name, start_row + 9, "D")
    Call Check_Mandatory(sheet_name, start_row + 10, "D")
    Call Check_Mandatory(sheet_name, start_row + 14, "E")
    Call Check_Mandatory(sheet_name, start_row + 16, "E")
    Call Check_Mandatory(sheet_name, start_row + 17, "G")
    Call Check_Mandatory(sheet_name, start_row + 18, "E")
    Call Check_Mandatory(sheet_name, start_row + 18, "G")
    Call Check_Mandatory(sheet_name, start_row + 19, "E")
    Call Check_Mandatory(sheet_name, start_row + 19, "G")
    Call Check_Mandatory(sheet_name, start_row + 22, "D")
    Call Check_Mandatory(sheet_name, start_row + 24, "E")
    Call Check_Mandatory(sheet_name, start_row + 25, "G")
    Call Check_Mandatory(sheet_name, start_row + 26, "E")
    Call Check_Mandatory(sheet_name, start_row + 26, "G")
    Call Check_Mandatory(sheet_name, start_row + 27, "E")
    Call Check_Mandatory(sheet_name, start_row + 27, "G")
    Call Check_Mandatory(sheet_name, start_row + 36, "B")
    Call Check_Mandatory(sheet_name, start_row + 47, "F")
    Call Check_Mandatory(sheet_name, start_row + 47, "I")
    Call Check_Mandatory(sheet_name, start_row + 61, "C")
    Call Check_Mandatory(sheet_name, end_row - 7, "D")
    Call Check_Mandatory(sheet_name, end_row - 6, "D")
    Call Check_Mandatory(sheet_name, end_row - 5, "D")
    Call Check_Mandatory(sheet_name, end_row - 4, "D")
    Call Check_Mandatory(sheet_name, end_row - 3, "E")
    Call Check_Mandatory(sheet_name, end_row - 2, "G")
    Call Check_Mandatory(sheet_name, end_row - 1, "E")
    Call Check_Mandatory(sheet_name, end_row - 1, "G")
    Call Check_Mandatory(sheet_name, end_row, "E")
    Call Check_Mandatory(sheet_name, end_row, "G")
    
    Dim rge As Range
    Dim cge As Range
    Set rge = Range("AdAdrs")
    For Each cge In rge
    If Not cge.value = vbNullString Then
        Call Check_Mandatory(sheet_name, start_row + 29, "E")
        Call Check_Mandatory(sheet_name, start_row + 30, "G")
        Call Check_Mandatory(sheet_name, start_row + 31, "E")
        Call Check_Mandatory(sheet_name, start_row + 31, "G")
        Call Check_Mandatory(sheet_name, start_row + 32, "E")
        Call Check_Mandatory(sheet_name, start_row + 32, "G")
    End If
    Next cge
    
    Set rge = Range("AddAdrs")
    For Each cge In rge
    If Not cge.value = vbNullString Then
        Call Check_Mandatory(sheet_name, start_row + 29, "E")
        Call Check_Mandatory(sheet_name, start_row + 30, "G")
        Call Check_Mandatory(sheet_name, start_row + 31, "E")
        Call Check_Mandatory(sheet_name, start_row + 31, "G")
        Call Check_Mandatory(sheet_name, start_row + 32, "E")
        Call Check_Mandatory(sheet_name, start_row + 32, "G")
    End If
    Next cge
    
    Call Validate_Date(sheet_name, start_row + 2, "D")
    Call Validate_Date(sheet_name, start_row + 5, "D")
    Call Validate_Date(sheet_name, start_row + 6, "D")
    Call Validate_Date(sheet_name, start_row + 9, "D")
    Call Validate_Date(sheet_name, start_row + 10, "D")
    Call Validate_Date(sheet_name, end_row - 4, "D")
    Dim check_reg As String
    
    
    Call check_reg_val(sheet_name, start_row + 14, "E", NAME_REGEX, EM5)
    Sheets(sheet_name).Cells(start_row + 16, "G") = Trim(Sheets(sheet_name).Cells(start_row + 16, "G"))
    Call check_reg_val(sheet_name, start_row + 16, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 16, "E") = Trim(Sheets(sheet_name).Cells(start_row + 16, "E"))
    Call check_reg_val(sheet_name, start_row + 16, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 17, "G") = Trim(Sheets(sheet_name).Cells(start_row + 17, "G"))
    Call check_reg_val(sheet_name, start_row + 17, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 17, "E") = Trim(Sheets(sheet_name).Cells(start_row + 17, "E"))
    Call check_reg_val(sheet_name, start_row + 17, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 18, "G") = Trim(Sheets(sheet_name).Cells(start_row + 18, "G"))
    Call check_reg_val(sheet_name, start_row + 18, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(start_row + 18, "E") = Trim(Sheets(sheet_name).Cells(start_row + 18, "E"))
    Call check_reg_val(sheet_name, start_row + 18, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(start_row + 19, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 19, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 19, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(start_row + 19, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(start_row + 19, "G") < 110001 Then
        Common_Module.display_error sheet_name, start_row + 19, "G", EM10
    Else
        Call check_reg_val(sheet_name, start_row + 19, "G", PIN_REGEX, EM10)
    End If
    End If
    
    irow = start_row + 24
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    irow = start_row + 29
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    Sheets(sheet_name).Cells(end_row - 7, "D") = Trim(Sheets(sheet_name).Cells(end_row - 7, "D"))
    Call check_reg_val(sheet_name, end_row - 7, "D", ADDRESS_REGEX, EM6)
    Call check_reg_val(sheet_name, end_row - 6, "D", NAME_REGEX, EM5)
    Call check_reg_val(sheet_name, end_row - 5, "D", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "G") = Trim(Sheets(sheet_name).Cells(irow + 1, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    For s = start_row_pb1_qual To end_row_pb1_qual
        Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb1) + 4)) = Trim(Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb1) + 4)))
        Call Check_Mandatory(sheet_name, s, qual_col_pb1)
        Call Check_Mandatory(sheet_name, s, Chr(Asc(qual_col_pb1) + 4))
        Call check_reg_val(sheet_name, s, Chr(Asc(qual_col_pb1) + 4), QUAL_REGEX, EM11)
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb1) + 4) & CStr(s)).WrapText = True
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb1) + 4) & CStr(s)).EntireRow.AutoFit
    Next
    
End Function
Public Function ValidateFunc_PB2()
    Call Delete_qual(sheet15_name, start_row_pb2_qual, end_row_pb2_qual, qual_col_pb2)
    validate = True
    start_row = start_row_pb2
    end_row = end_row_pb2
    sheet_name = sheet15_name
    Sheets(sheet_name).Range("B" & CStr(start_row) & ":" & "J" & CStr(end_row)).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(pb2_sv_col & CStr(start_row) & ":" & pb2_sv_col & CStr(end_row)).ClearContents
    Call Check_Mandatory(sheet_name, start_row, "B")
    Call Check_Mandatory(sheet_name, start_row + 2, "D")
    Call Check_Mandatory(sheet_name, start_row + 4, "D")
    Call Check_Mandatory(sheet_name, start_row + 5, "F")
    Call Check_Mandatory(sheet_name, start_row + 6, "F")
    Call Check_Mandatory(sheet_name, start_row + 6, "D")
    Call Check_Mandatory(sheet_name, start_row + 7, "D")
    Call Check_Mandatory(sheet_name, start_row + 7, "F")
    Call Check_Mandatory(sheet_name, start_row + 11, "D")
    Call Check_Mandatory(sheet_name, start_row + 13, "D")
    Call Check_Mandatory(sheet_name, start_row + 14, "F")
    Call Check_Mandatory(sheet_name, start_row + 15, "D")
    Call Check_Mandatory(sheet_name, start_row + 15, "F")
    Call Check_Mandatory(sheet_name, start_row + 16, "D")
    Call Check_Mandatory(sheet_name, start_row + 16, "F")
    Call Check_Mandatory(sheet_name, start_row + 18, "E")
    Call Check_Mandatory(sheet_name, start_row + 20, "D")
    Call Check_Mandatory(sheet_name, start_row + 22, "D")
    Call Check_Mandatory(sheet_name, start_row + 24, "D")
    Call Check_Mandatory(sheet_name, start_row + 25, "D")
    Call Check_Mandatory(sheet_name, start_row + 26, "D")
    Call Check_Mandatory(sheet_name, start_row + 29, "D")
    Call Check_Mandatory(sheet_name, start_row + 30, "D")
    
    Call Check_Mandatory(sheet_name, start_row + 36, "B")
    Call Check_Mandatory(sheet_name, start_row + 49, "C")
    
    Call Check_Mandatory(sheet_name, end_row - 7, "D")
    Call Check_Mandatory(sheet_name, end_row - 6, "D")
    Call Check_Mandatory(sheet_name, end_row - 5, "D")
    Call Check_Mandatory(sheet_name, end_row - 4, "D")
    Call Check_Mandatory(sheet_name, end_row - 3, "E")
    Call Check_Mandatory(sheet_name, end_row - 2, "G")
    Call Check_Mandatory(sheet_name, end_row - 1, "E")
    Call Check_Mandatory(sheet_name, end_row - 1, "G")
    Call Check_Mandatory(sheet_name, end_row, "E")
    Call Check_Mandatory(sheet_name, end_row, "G")
    
    Call Validate_Date(sheet_name, start_row + 20, "D")
    Call Validate_Date(sheet_name, start_row + 22, "D")
    Call Validate_Date(sheet_name, start_row + 25, "D")
    Call Validate_Date(sheet_name, start_row + 26, "D")
    Call Validate_Date(sheet_name, start_row + 29, "D")
    Call Validate_Date(sheet_name, start_row + 30, "D")
    Call Validate_Date(sheet_name, end_row - 4, "D")
    
    Call check_reg_val(sheet_name, start_row + 2, "D", NAME_REGEX, EM5)
    irow = start_row + 4
    Sheets(sheet_name).Cells(irow, "D") = Trim(Sheets(sheet_name).Cells(irow, "D"))
    Call check_reg_val(sheet_name, irow, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "F") = Trim(Sheets(sheet_name).Cells(irow, "F"))
    Call check_reg_val(sheet_name, irow, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "D") = Trim(Sheets(sheet_name).Cells(irow + 1, "D"))
    Call check_reg_val(sheet_name, irow + 1, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "F") = Trim(Sheets(sheet_name).Cells(irow + 1, "F"))
    Call check_reg_val(sheet_name, irow + 1, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "D") = Trim(Sheets(sheet_name).Cells(irow + 2, "D"))
    Call check_reg_val(sheet_name, irow + 2, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "F") = Trim(Sheets(sheet_name).Cells(irow + 2, "F"))
    Call check_reg_val(sheet_name, irow + 2, "F", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "D").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "D").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "D", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "F").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "F") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "F", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "F", PIN_REGEX, EM10)
    End If
    End If
    
    Call check_reg_val(sheet_name, start_row + 11, "D", NAME_REGEX, EM5)
    irow = start_row + 13
    Sheets(sheet_name).Cells(irow, "D") = Trim(Sheets(sheet_name).Cells(irow, "D"))
    Call check_reg_val(sheet_name, irow, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "F") = Trim(Sheets(sheet_name).Cells(irow, "F"))
    Call check_reg_val(sheet_name, irow, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "D") = Trim(Sheets(sheet_name).Cells(irow + 1, "D"))
    Call check_reg_val(sheet_name, irow + 1, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "F") = Trim(Sheets(sheet_name).Cells(irow + 1, "F"))
    Call check_reg_val(sheet_name, irow + 1, "F", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "D") = Trim(Sheets(sheet_name).Cells(irow + 2, "D"))
    Call check_reg_val(sheet_name, irow + 2, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "F") = Trim(Sheets(sheet_name).Cells(irow + 2, "F"))
    Call check_reg_val(sheet_name, irow + 2, "F", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "D").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "D").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "D", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "F").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "F") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "F", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "F", PIN_REGEX, EM10)
    End If
    End If
    
    Sheets(sheet_name).Cells(end_row - 7, "D") = Trim(Sheets(sheet_name).Cells(end_row - 7, "D"))
    Call check_reg_val(sheet_name, end_row - 7, "D", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(end_row - 6, "D") = Trim(Sheets(sheet_name).Cells(end_row - 6, "D"))
    Call check_reg_val(sheet_name, end_row - 6, "D", NAME_REGEX, EM5)
    Sheets(sheet_name).Cells(end_row - 5, "D") = Trim(Sheets(sheet_name).Cells(end_row - 5, "D"))
    Call check_reg_val(sheet_name, end_row - 5, "D", MEM_REGEX, EM7)
    irow = end_row - 3
    Sheets(sheet_name).Cells(irow, "E") = Trim(Sheets(sheet_name).Cells(irow, "E"))
    Call check_reg_val(sheet_name, irow, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 1, "E") = Trim(Sheets(sheet_name).Cells(irow + 1, "E"))
    Call check_reg_val(sheet_name, irow + 1, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow, "G") = Trim(Sheets(sheet_name).Cells(irow, "G"))
    Call check_reg_val(sheet_name, irow + 1, "G", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "E") = Trim(Sheets(sheet_name).Cells(irow + 2, "E"))
    Call check_reg_val(sheet_name, irow + 2, "E", ADDRESS_REGEX, EM6)
    Sheets(sheet_name).Cells(irow + 2, "G") = Trim(Sheets(sheet_name).Cells(irow + 2, "G"))
    Call check_reg_val(sheet_name, irow + 2, "G", ADDRESS_REGEX, EM6)
    If Trim(Sheets(sheet_name).Cells(irow + 3, "E").value) <> vbNullString Then
            With Sheets("State dropdown").Range("='State dropdown'!$A$1:$A$37")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(irow + 3, "E").value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, irow + 3, "E", EM12
                    
                    End If
            End With
    End If
    
    If Sheets(sheet_name).Cells(irow + 3, "G").value <> vbNullString Then
    If Sheets(sheet_name).Cells(irow + 3, "G") < 110001 Then
        Common_Module.display_error sheet_name, irow + 3, "G", EM10
    Else
        Call check_reg_val(sheet_name, irow + 3, "G", PIN_REGEX, EM10)
    End If
    End If
    
    For s = start_row_pb2_qual To end_row_pb2_qual
        Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb2) + 4)) = Trim(Sheets(sheet_name).Cells(s, Chr(Asc(qual_col_pb2) + 4)))
        Call Check_Mandatory(sheet_name, s, qual_col_pb2)
        Call Check_Mandatory(sheet_name, s, Chr(Asc(qual_col_pb2) + 4))
        Call check_reg_val(sheet_name, s, Chr(Asc(qual_col_pb2) + 4), QUAL_REGEX, EM11)
        Worksheets(sheet_name).Range(Chr(Asc(qual_col_pb2) + 4) & CStr(s)).WrapText = True
    Next

    
End Function
Public Function ValidateFunc_Home()
    sheet_name = home_sheet
    start_row = start_row_home
    col = fixed_col_home
    ValidateFunc_Home = True
    Sheets(sheet_name).Cells(start_row, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 1, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 2, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 3, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 4, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 5, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Cells(start_row + 6, col).Interior.ColorIndex = 0
    Sheets(sheet_name).Range(sv_col_home & CStr(start_row) & ":" & sv_col_home & CStr(start_row + 6)).ClearContents
    
    If Trim(Sheets(sheet_name).Cells(start_row, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row, col, EM2)
            ValidateFunc_Home = False
    End If
    
    Cells(start_row_home, fixed_col_home) = Trim(Cells(start_row_home, fixed_col_home))  '*******trim spaces
    
   If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value) = vbNullString Then
            Call Common_Module.display_error(sheet_name, start_row, col, EM2)
            ValidateFunc_Home = False
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 1, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row + 1, col, EM2)
            ValidateFunc_Home = False
    End If
    
    'Debug.Print Cells(start_row_home, fixed_col_home).value
    
    If Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row_home, fixed_col_home).value), GSTIN_REGEX_HOME) Then
    Call Common_Module.display_error(home_sheet, start_row_home, fixed_col_home, EM3)
    ValidateFunc_Home = False
    End If
    Cells(start_row + 2, col) = Trim(Cells(start_row + 2, col))  '*******trim spaces
    
    If Trim(Sheets(home_sheet).Cells(start_row + 2, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 2, col).value), HNAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 2, col, EM15)
            ValidateFunc_Home = False
    End If
    
    Cells(start_row + 3, col) = Trim(Cells(start_row + 3, col))               '*******trim spaces
    If Trim(Sheets(home_sheet).Cells(start_row + 3, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 3, col).value), HNAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 3, col, EM15)
            ValidateFunc_Home = False
    End If
    
    
    
    Cells(start_row + 4, col) = Trim(Cells(start_row + 4, col))               '*******trim spaces
    
    If Trim(Sheets(home_sheet).Cells(start_row + 4, col).value & vbNullString) <> vbNullString And Not Common_Module.matchRegex(Trim(Sheets(home_sheet).Cells(start_row + 4, col).value), ANAME_REGEX) Then
            
            Call Common_Module.display_error(sheet_name, start_row + 4, col, EM18)
            ValidateFunc_Home = False
    End If
    If Trim(Sheets(sheet_name).Cells(start_row + 5, col).value) = vbNullString Then
            
            Call Common_Module.display_error(sheet_name, start_row + 5, col, EM2)
            ValidateFunc_Home = False
    End If
    
    If Trim(Sheets(sheet_name).Cells(start_row + 1, col).value) <> vbNullString Then
            With Sheets("Master").Range("=Master!$A$23:$A$24")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 1, col).value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 1, col, EM12
                    ValidateFunc_Home = False
                    End If
            End With
    End If
    
    
    If Trim(Sheets(sheet_name).Cells(start_row + 5, col).value) <> vbNullString Then
            With Sheets("Master").Range("=Master!$A$19:$A$20")
               Set c = .Find(What:=(Sheets(sheet_name).Cells(start_row + 5, col).value))
    '
                    If c Is Nothing Then
                    Common_Module.display_error sheet_name, start_row + 5, col, EM12
                    ValidateFunc_Home = False
                    End If
            End With
    End If
    
    
End Function

Public Function ValidateFunc_Date(sheet_name, rowNo, col)
    If Trim(Sheets(sheet_name).Cells(rowNo, col).value) <> vbNullString Then
            If Not Common_Module.matchRegex(Trim(Sheets(sheet_name).Cells(rowNo, col).value), DATE_REGEX) Then
                Call Common_Module.display_error(sheet_name, rowNo, col, EM4)
            Else
                Application.EnableEvents = False
                Sheets(sheet_name).Cells(rowNo, col).value = Replace(Sheets(sheet_name).Cells(rowNo, col).value, ".", "/")
                Sheets(sheet_name).Cells(rowNo, col).value = Replace(Sheets(sheet_name).Cells(rowNo, col).value, "-", "/")
                Sheets(sheet_name).Cells(rowNo, col).value = Common_Module.ConvertDate(Trim(Sheets(sheet_name).Cells(rowNo, col).value))
                Application.EnableEvents = True
            End If
    End If
End Function
Public Function Check_Mandatory(sheet_name, rowNo, col)
    If Trim(Sheets(sheet_name).Cells(rowNo, col).value) = vbNullString Or Trim(Sheets(sheet_name).Cells(rowNo, col).value) = "DD/MM/YYYY" Then
            Call Common_Module.display_error(sheet_name, rowNo, col, EM2)
    End If

End Function

Public Function check_reg_val(sheet_name, rowNo, col, check_reg As String, Error_Message)
    Dim sim_regex As String
    sim_regex = check_reg
    If (Sheets(sheet_name).Cells(rowNo, col).value) <> vbNullString And Not Common_Module.matchRegex((Sheets(sheet_name).Cells(rowNo, col).value), sim_regex) Then
        Call Common_Module.display_error(sheet_name, rowNo, col, Error_Message)
    End If
End Function

Attribute VB_Name = "Variable_Initialize"
Public Const GSTIN_REGEX_HOME = "^[0-9]{2}[A-Z]{4}[0-9A-Z]{1}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z1-9A-J]{1}[0-9A-Z]{1}$"
Public Const char_REGEX = "^.{1,1000}$"
Public Const NAME_REGEX = "^[A-Za-z0-9\s\.]{1,99}$"
Public Const HNAME_REGEX = "^.{1,100}$"
Public Const ANAME_REGEX = "^.{1,30}$"
Public Const ADDRESS_REGEX = "^.{1,60}$"
Public Const QUAL_REGEX = "^.{1,1000}$"
Public Const DATE_REGEX = "^(0?[1-9]|[12][0-9]|3[01])[./-](0?[1-9]|1[012])[./-](19|20)?\d\d$"
Public Const MEM_REGEX = "^[0-9]{1,8}$"
Public Const PIN_REGEX = "^[0-9]{6}$"
Public Const AMT_REGEX = "^\d{1,13}\.?\d{0,2}$"
Public Const PAN_REGEX = "^[A-Z]{5}[0-9]{4}[A-Z]{1}$"
Public Const HASH_REGEX = "^[a-zA-Z0-9(),""'.+-_&/ ]*$"
Public Const EM1 = "Length exceeds 1000 character limit or line break present. "
Public Const EM2 = "Mandatory field cannot be left blank. "
Public Const EM3 = "Invalid GSTIN. "
Public Const EM4 = "Please enter date in DD/MM/YYYY format. "
Public Const EM5 = "Name should be alphanumeric and within 99 character limit. "
Public Const EM6 = "Length exceeds 60 character limit. "
Public Const EM7 = "Membership number can be numeric only, with maximum length of 8 characters. "
Public Const EM8 = "There are Validation Error(s) in other sheets. Please correct it before generating JSON file. "
Public Const EM9 = "Please enter First row before entering values in the subsequent rows. "
Public Const EM10 = "Please Enter a Valid Pin Code. "
Public Const EM11 = "Length exceeds 1000 character limit or line break present. "
Public Const EM12 = "Please select a valid value from the dropdown. "
Public Const EM13 = "Taxable value cannot be left empty when tax columns are present. "
Public Const EM14 = "Value cannot be left empty when Amount of Total ITC or Amount of eligible ITC availed are present. "
Public Const EM15 = "Length exceeds 100 characters. "
Public Const EM16 = "Please enter a valid PAN number. "
Public Const EM17 = "There are Validation Error(s) in other sheets. Please correct it before generating PDF file. "
Public Const EM18 = "Length exceeds 30 characters. "
Public typ As String
Public read_me As String
Public home_sheet As String
Public pdf_sheet As String:
Public sheet1_name As String
Public sheet2_name As String
Public sheet3_name As String
Public sheet4_name As String
Public sheet5_name As String
Public sheet6_name As String
Public sheet7_name As String
Public sheet8_name As String
Public sheet9_name As String
Public sheet10_name As String
Public sheet11_name As String
Public sheet12_name As String
Public sheet13_name As String
Public sheet14_name As String
Public sheet15_name As String

Public start_row_pdf_sheet As Integer
Public end_row_pdf_sheet As Integer



Public start_row_home As Integer
Public end_row_home As Integer
Public fixed_col_home As String
Public sv_col_home As String
Public por_err_col_home As String


Public start_row_two_five As Integer
Public end_row_two_five As Integer
Public fixed_col_two_five As String
Public sv_col_two_five As String
Public por_err_col_two_five As String

Public start_row_two_six As Integer
Public end_row_two_six As Integer
Public fixed_col_two_six As String
Public sv_col_two_six As String
Public por_err_col_two_six As String

Public start_row_two_seven As Integer
Public end_row_two_seven As Integer
Public fixed_col_two_seven As String
Public sv_col_two_seven As String
Public por_err_col_two_seven As String

Public start_row_two_eight As Integer
Public end_row_two_eight As Integer
Public fixed_col_two_eight As String
Public sv_col_two_eight As String
Public por_err_col_two_eight As String

Public start_row_three_nine As Integer
Public end_row_three_nine As Integer
Public taxv_col_three_nine As String
Public ctax_col_three_nine As String
Public stax_col_three_nine As String
Public itax_col_three_nine As String
Public cetax_col_three_nine As String
Public sv_col_three_nine As String
Public por_err_col_three_nine As String

Public start_row_three_ten As Integer
Public end_row_three_ten As Integer
Public fixed_col_three_ten As String
Public sv_col_three_ten As String
Public por_err_col_three_ten As String

Public start_row_three_eleven As Integer
Public end_row_three_eleven As Integer
Public taxv_col_three_eleven As String
Public ctax_col_three_eleven As String
Public stax_col_three_eleven As String
Public itax_col_three_eleven As String
Public cetax_col_three_eleven As String
Public sv_col_three_eleven As String
Public por_err_col_three_eleven As String

Public start_row_four_twelve As Integer
Public end_row_four_twelve As Integer
Public fixed_col_four_twelve As String
Public sv_col_four_twelve As String
Public por_err_col_four_twelve As String

Public start_row_four_thirt As Integer
Public end_row_four_thirt As Integer
Public fixed_col_four_thirt As String
Public sv_col_four_thirt As String
Public por_err_col_four_thirt As String

Public start_row_four_fourt As Integer
Public end_row_four_fourt As Integer
Public value_col_four_fourt As String
Public amt_col_four_fourt As String
Public amte_col_four_fourt As String
Public sv_col_four_fourt As String
Public por_err_col_four_fourt As String
Public start_row_four_fourt_exp As Integer
Public end_row_four_fourt_exp As Integer

Public start_row_four_fift As Integer
Public end_row_four_fift As Integer
Public fixed_col_four_fift As String
Public sv_col_four_fift As String
Public por_err_col_four_fift As String

Public start_row_four_sixt As Integer
Public end_row_four_sixt As Integer
Public fixed_col_four_sixt As String
Public sv_col_four_sixt As String
Public por_err_col_four_sixt As String

Public start_row_five As Integer
Public end_row_five As Integer
Public taxv_col_five As String
Public ctax_col_five As String
Public stax_col_five As String
Public itax_col_five As String
Public cetax_col_five As String
Public word_start_row_five As Integer
Public word_end_row_five As Integer
Public word_col_five As String
Public sv_col_five As String
Public por_err_col_five As String

Public pb1_sv_col As String
Public pb1_por_err_col As String
Public pb2_sv_col As String
Public pb2_por_err_col As String

Public qual_col_pb1 As String
Public start_row_pb1_qual As Integer
Public end_row_pb1_qual As Integer
Public qual_col_pb2 As String
Public start_row_pb2_qual As Integer
Public end_row_pb2_qual As Integer
Public start_row_pb1 As Integer
Public end_row_pb1 As Integer
Public start_row_pb2 As Integer
Public end_row_pb2 As Integer
Public col_pb1 As String
Public col_pb2 As String

Public validate As Boolean




Public Sub initiali()
    home_sheet = "Home"
    read_me = "Read Me"
    start_row_home = 9
    fixed_col_home = "D"
    pdf_sheet = "Table 1"
    sheet1_name = "PT II (5)"
    sheet2_name = "PT II (6)"
    sheet3_name = "PT II (7)"
    sheet4_name = "PT II (8)"
    sheet5_name = "PT III (9)"
    sheet6_name = "PT III (10)"
    sheet7_name = "PT III (11)"
    sheet8_name = "PT IV (12)"
    sheet9_name = "PT IV(13)"
    sheet10_name = "PT IV (14)"
    sheet11_name = "PT IV (15)"
    sheet12_name = "PT IV (16)"
    sheet13_name = "PT V"
    sheet14_name = "Part B (i)"
    sheet15_name = "Part B (ii)"
    end_row_home = 14
    
    sv_col_home = "J"
    por_err_col_home = "K"
    sv_col_two_five = "J"
    por_err_col_two_five = "K"
    sv_col_two_six = "J"
    por_err_col_two_six = "K"
    sv_col_two_seven = "I"
    por_err_col_two_seven = "J"
    sv_col_two_eight = "J"
    por_err_col_two_eight = "K"
    sv_col_three_nine = "J"
    por_err_col_three_nine = "K"
    sv_col_three_ten = "J"
    por_err_col_three_ten = "K"
    sv_col_three_eleven = "J"
    por_err_col_three_eleven = "K"
    sv_col_four_twelve = "J"
    por_err_col_four_twelve = "K"
    sv_col_four_thirt = "J"
    por_err_col_four_thirt = "K"
    sv_col_four_fourt = "J"
    por_err_col_four_fourt = "K"
    sv_col_four_fift = "J"
    por_err_col_four_fift = "K"
    sv_col_four_sixt = "H"
    por_err_col_four_sixt = "I"
    sv_col_five = "K"
    por_err_col_five = "L"
    pb1_sv_col = "K"
    pb1_por_err_col = "L"
    pb2_sv_col = "K"
    pb2_por_err_col = "L"
    
    start_row_pdf_sheet = 4
    'end_row_pdf_sheet=
    start_row_two_five = 6
    end_row_two_five = 23
    fixed_col_two_five = "H"
    
    
    start_row_two_six = 5
    end_row_two_six = 5
    fixed_col_two_six = "C"
    
    start_row_two_seven = 6
    end_row_two_seven = 12
    fixed_col_two_seven = "G"
    
    start_row_two_eight = 5
    end_row_two_eight = 5
    fixed_col_two_eight = "C"
    
    start_row_three_nine = 7
    end_row_three_nine = 24
    taxv_col_three_nine = "C"
    ctax_col_three_nine = "E"
    stax_col_three_nine = "F"
    itax_col_three_nine = "G"
    cetax_col_three_nine = "I"
    
    start_row_three_ten = 5
    end_row_three_ten = 5
    fixed_col_three_ten = "C"
    
    start_row_three_eleven = 7
    end_row_three_eleven = 17
    taxv_col_three_eleven = "C"
    ctax_col_three_eleven = "E"
    stax_col_three_eleven = "F"
    itax_col_three_eleven = "G"
    cetax_col_three_eleven = "I"
    
    start_row_four_twelve = 6
    end_row_four_twelve = 11
    fixed_col_four_twelve = "H"
    
    start_row_four_thirt = 5
    end_row_four_thirt = 5
    fixed_col_four_thirt = "C"
    
    typ = ""
    
    start_row_four_fourt = 6
    end_row_four_fourt = 25
    value_col_four_fourt = "D"
    amt_col_four_fourt = "F"
    amte_col_four_fourt = "H"
    start_row_four_fourt_exp = 22
    end_row_four_fourt_exp = 22
    
    start_row_four_fift = 5
    end_row_four_fift = 5
    fixed_col_four_fift = "C"
    
    start_row_four_sixt = 6
    end_row_four_sixt = 11
    fixed_col_four_sixt = "C"
    
    start_row_five = 6
    end_row_five = 20
    taxv_col_five = "D"
    ctax_col_five = "F"
    stax_col_five = "G"
    itax_col_five = "H"
    cetax_col_five = "J"
    word_start_row_five = 25
    word_end_row_five = 32
    word_col_five = "E"
    
    
    start_row_pb1 = 5
    qual_col_pb1 = "C"
    start_row_pb1_qual = 66
    end_row_pb1_qual = 66
    end_row_pb1 = 77
    
    start_row_pb2 = 5
    qual_col_pb2 = "C"
    start_row_pb2_qual = 54
    end_row_pb2_qual = 54
    end_row_pb2 = 65
    
    col_pb1 = "E"
    col_pb2 = "D"
    
    validate = True
    
End Sub

Public Sub Unprotect_all_sheet()
'Loop through all sheets in the workbook

      For i = 1 To Sheets.count
        t = Sheets(i).Name
        If Not (t = "Table 1" Or t = "Table 2" Or t = "Table 3" Or t = "Table 4" Or t = "Master" Or t = "State dropdown") Then
            Sheets(i).Unprotect Password:="pass"
            'Sheets(i).Protect Password:="pass", UserInterFaceOnly:=True
         
        End If
      Next i
End Sub
 

' InQuest injected base64 decoded content
' K+-zd
' xZ+-

INQUEST-PP=macro
