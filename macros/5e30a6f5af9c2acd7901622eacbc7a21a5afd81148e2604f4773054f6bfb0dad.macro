Attribute VB_Name = "FileHelper"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private oFs As Object
Private vars As New GlobaleVariabeln

'// Sammelt alle Files zusammen, welche sich in einem Directory befinden
'// doc und docx und docm datein
Public Function GetFilesFromDirectory(ByVal directoryPath As String) As String()

    Dim sAns() As String
    Dim oFolder As Object
    Dim oFile As Object
    Dim lElement As Long
    
    ReDim sAns(0) As String
    If oFs.FolderExists(directoryPath) Then
        Set oFolder = oFs.GetFolder(directoryPath)
        For Each oFile In oFolder.Files
            If IsValidFileExtensionForImport(oFile.name) Then
                lElement = IIf(sAns(0) = "", 0, lElement + 1)
                ReDim Preserve sAns(lElement) As String
                sAns(lElement) = directoryPath & "\" & oFile.name
            End If
        Next
    End If

    GetFilesFromDirectory = sAns

ErrHandler:
    Set oFolder = Nothing
    Set oFile = Nothing
End Function

Public Function IsFolderExisting(ByVal folderPath As String) As Boolean
    If oFs.FolderExists(folderPath) Then
        IsFolderExisting = True
    Else
        IsFolderExisting = False
    End If
End Function

'// Pr|fffd|ft anhand eines File-Namens, ob die File-Extension f|fffd|r den Import g|fffd|ltig ist
Private Function IsValidFileExtensionForImport(ByVal fileName As String) As Boolean
    If LCase(InStr(fileName, "~$")) Then
        'w|fffd|re tempor|fffd|re Word Datei -> nicht verwenden
        IsValidFileExtensionForImport = False
        Exit Function
    End If
    If LCase(oFs.GetExtensionName(fileName)) = "docx" Then
        IsValidFileExtensionForImport = True
        Exit Function
    End If
    If LCase(oFs.GetExtensionName(fileName)) = "doc" Then
        IsValidFileExtensionForImport = True
        Exit Function
    End If
    If LCase(oFs.GetExtensionName(fileName)) = "docm" Then
        IsValidFileExtensionForImport = True
        Exit Function
    End If
    IsValidFileExtensionForImport = False
End Function

Public Function GetFileExtension(ByVal fileName As String) As String
    GetFileExtension = LCase(oFs.GetExtensionName(fileName))
End Function

Public Function GetFileName(ByVal fileName As String) As String
    Dim sFile As String
    sFile = fileName
    GetFileName = Left(sFile, InStr(1, sFile, ".") - 1)
    'GetFileName = fileName
End Function


Private Sub Class_Initialize()
    Set oFs = CreateObject("Scripting.FileSystemObject")
End Sub

Private Sub Class_Terminate()
End Sub

Attribute VB_Name = "GlobaleVariabeln"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Der Root-Node-Name des Xml-Files
Public XmlImportFile_RootNodeName As String
'Der ComboBox-Node-Name
Public XmlImportFile_ComboBoxNodeName As String
'Der Hierarchiestufen-Node-Name des Xml-Files
Public XmlImportFile_HierarchieStufenNodeName As String
'Der Beilagen-Node-Name des Xml-Files
Public XmlImportFile_BeilagenNodeName As String
'Attribut im Root-Node -> enth|fffd|lt die File-Version
Public XmlImportFile_FileVersionAttribut As String
'Attribut im Root-Node -> enth|fffd|lt das Aktualisierungs-Datum
Public XmlImportFile_AktualisierungsDatumAttribut As String
'Attribut mit dem lokalen Pfad, in dem das XML-File auch gespeichert werden kann
Public XmlImportFile_LokalerXmlPfad As String
'Dateiname der XML Datei
Public XmlImportFile_FileName As String
'Name der Dokumenten-Variable, welche im Word-Dokument erzeugt wird und das XML-File enth|fffd|lt
Public WordDocumentVariableName As String
'Es sind nur docx-Files erlaubt
Public DocxExtension As String
'Variable Name f|fffd|r Wiederaufruf der Versionspr|fffd|fung
Public AskAgainVariableName As String
'Der Node mit den |fffd|bersetzungen f|fffd|r die Controls
Public XmlImportFile_ControlsNodeName As String

'// Initialisierungs-Methode - in allen Variabeln g|fffd|ltige Werte abf|fffd|llen
Private Sub Class_Initialize()
    XmlImportFile_RootNodeName = "AuswahlFelderRoot"
    XmlImportFile_ComboBoxNodeName = "AuswahlFelderRoot/ComboBoxen"
    XmlImportFile_HierarchieStufenNodeName = "AuswahlFelderRoot/ComboBoxen/cboHierarchieStufen"
    XmlImportFile_BeilagenNodeName = "AuswahlFelderRoot/ComboBoxen/cboBeilagen"
    XmlImportFile_ControlsNodeName = "AuswahlFelderRoot/Controls"
    XmlImportFile_FileVersionAttribut = "fileVersion"
    XmlImportFile_AktualisierungsDatumAttribut = "aktualisierungsDatum"
    XmlImportFile_LokalerXmlPfad = "lokalerXmlPfad"
    XmlImportFile_FileName = "Auswahlfelder.xml"
    WordDocumentVariableName = "XmlInput"
    DocxExtension = "docm"
    AskAgainVariableName = "AskAgain"
End Sub

Private Sub Class_Terminate()
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private Sub Document_Close()
    Templates(ActiveDocument.AttachedTemplate).Saved = True

End Sub

Private Sub Document_Open()
    modVersionCheck.CheckVersion
    modBuildDropDowns.BuildDropDowns

End Sub
Attribute VB_Name = "XmlFileManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private vars As New GlobaleVariabeln

Private xmlDom As Object
Private xmlRootNode As Object
Private xmlComboBoxNode As Object
Private xmlBeilagenNode As Object
Private xmlHierarchieStufeNode As Object
Private xmlControlsNode As Object
Private fileVersion As String
Private fileAktualisierungsDatum As String
Private fileLokalerXmlPfad As String
'Collections mit Controls-Texten
Private controlsTexteDE As Object
Private controlsTexteFR As Object
Private controlsTexteIT As Object

Private Sub Class_Initialize()
    Set xmlDom = CreateObject("MSXML.DOMDocument")
End Sub

'// die Version des Xml
Public Property Get XmlFileVersion() As String
    XmlFileVersion = fileVersion
End Property

'// das Aktualiserungs-Datum des Xml
Public Property Get XmlFileAktualisierungsDatum() As String
    XmlFileAktualisierungsDatum = fileAktualisierungsDatum
End Property

'// der lokale Pfad des Xml
Public Property Get XmlFileLokalerXmlPfad() As String
    XmlFileLokalerXmlPfad = fileLokalerXmlPfad
End Property

'// der Beilagen Node
Public Property Get BeilagenNode() As Object
    Set BeilagenNode = xmlBeilagenNode
End Property

'// der Hierarchiestufe Node
Public Property Get HierarchieStufeNode() As Object
    Set HierarchieStufeNode = xmlHierarchieStufeNode
End Property

'// der Hierarchiestufe Node
Public Property Get Xml() As String
    Xml = xmlDom.Xml
End Property

'// L|fffd|dt die XML-Datei anhand eines Pfades
Public Function LoadXmlFileFromFileSystem(ByVal xmlFilePath As String) As Boolean
    Set xmlDom = CreateObject("MSXML.DOMDocument")
    xmlDom.async = False
    xmlDom.Load xmlFilePath

    LoadXmlFileFromFileSystem = InitializeDom
End Function

'// L|fffd|dt das XML anhand eines Strings
Public Function LoadXmlAsString(ByVal xmlString As String) As Boolean
    Set xmlDom = CreateObject("MSXML.DOMDocument")
    xmlDom.async = False
    xmlDom.LoadXML xmlString
    
    LoadXmlAsString = InitializeDom
End Function

'// pr|fffd|ft das Xml-File, Initialisiert die Properties
Private Function InitializeDom() As Boolean
    'Parsen ging in die Hose, File scheint korrupt zu sein
    If xmlDom.parseError <> 0 Then
        MsgBox "Parsen des XML ist fehlerhaft und scheint korrupt zu sein - Verarbeitung wird abgebrochen", vbCritical, "Parse-Error"
        InitializeDom = False
        Exit Function
    End If
    
    Dim node As Object
    For Each node In xmlDom.ChildNodes
        'das File muss den RootNodeName enthalten, sonst ist es ein falsches!
        If node.nodeName = vars.XmlImportFile_RootNodeName Then
            fileVersion = node.Attributes.getNamedItem(vars.XmlImportFile_FileVersionAttribut).nodeValue
            fileAktualisierungsDatum = node.Attributes.getNamedItem(vars.XmlImportFile_AktualisierungsDatumAttribut).nodeValue
            fileLokalerXmlPfad = node.Attributes.getNamedItem(vars.XmlImportFile_LokalerXmlPfad).nodeValue
        End If
    Next
    
    'Root-Node merken
    Set xmlRootNode = xmlDom.SelectSingleNode(vars.XmlImportFile_RootNodeName)
    'ComboBox-Node merken
    Set xmlComboBoxNode = xmlDom.SelectSingleNode(vars.XmlImportFile_ComboBoxNodeName)
    'Beilagen-Node merken
    Set xmlBeilagenNode = xmlDom.SelectSingleNode(vars.XmlImportFile_BeilagenNodeName)
    'Hierarchiestufen-Node merken
    Set xmlHierarchieStufeNode = xmlDom.SelectSingleNode(vars.XmlImportFile_HierarchieStufenNodeName)
    
    'Controls-Node merken und die Listen zum |fffd|bersetzen vorbereiten
    Set xmlControlsNode = xmlDom.SelectSingleNode(vars.XmlImportFile_ControlsNodeName)
    SetupControlsTexte
    
    InitializeDom = True
End Function

'//****************************************************************************************************************************
'// Bereitet das Controls-Dictionary auf
'//****************************************************************************************************************************
Private Sub SetupControlsTexte()
    
    Set controlsTexteDE = CreateObject("Scripting.Dictionary")
    Set controlsTexteFR = CreateObject("Scripting.Dictionary")
    Set controlsTexteIT = CreateObject("Scripting.Dictionary")
        
    If IsNull(xmlControlsNode) Or xmlControlsNode.ChildNodes.Length = 0 Then
        Exit Sub
    End If
    
    Dim childNode As Object
    For Each childNode In xmlControlsNode.ChildNodes
        controlsTexteDE.Add childNode.nodeName, childNode.Attributes.getNamedItem("de").nodeValue
        controlsTexteFR.Add childNode.nodeName, childNode.Attributes.getNamedItem("fr").nodeValue
        controlsTexteIT.Add childNode.nodeName, childNode.Attributes.getNamedItem("it").nodeValue
    Next

End Sub

'//****************************************************************************************************************************
'// Gibt anhand des Control-Namens ein Label oder Caption zur|fffd|ck
'//****************************************************************************************************************************
Public Function GetControlText(ByVal controlName As String) As String

    On Error GoTo err_handler
    
    Dim text As String
    Select Case Application.Language
        Case 4108   'French/Switzerland
            text = controlsTexteFR(controlName)
        Case 2064   'Italian/Switzerland
            text = controlsTexteIT(controlName)
        Case Else   'sonst deutsch
            text = controlsTexteDE(controlName)
    End Select
    
    GetControlText = Replace(text, "Chr(13)", Chr(13))
        
exit_handler:
    Exit Function
    
err_handler:
    GetControlText = "<not found>" 'Es wurde nichts gefunden
    Resume exit_handler

End Function

'// L|fffd|scht die XML-Variabel aus dem Word-Dokument
Public Sub VariabeleLoeschen(ByRef dok As Document)
    Dim var As Variable
    For Each var In dok.Variables
        If var.name = vars.WordDocumentVariableName Then
            var.Delete
        End If
    Next
    For Each var In dok.Variables
        If var.name = vars.AskAgainVariableName Then
            var.Delete
        End If
    Next
End Sub

'// Schreibt die XML-Variabel ins Word-Dokument
Public Sub WriteDocumentVariable(ByRef dok As Document)
    dok.Variables.Add vars.WordDocumentVariableName, xmlDom.Xml
    dok.Variables.Add vars.AskAgainVariableName, "True"
End Sub

Public Function GetBeilagen(ByVal spracheCode As String) As Variant
    GetBeilagen = LoadArray(vars.XmlImportFile_BeilagenNodeName, spracheCode)
End Function

Public Function GetHierarchieStufen(ByVal spracheCode As String) As Variant
    GetHierarchieStufen = LoadArray(vars.XmlImportFile_HierarchieStufenNodeName, spracheCode)
End Function

Private Function LoadArray(ByVal nodeName As String, ByVal spracheCode As String) As Variant

    Dim parentNode As Object
    Set parentNode = xmlDom.SelectSingleNode(nodeName)
    
    Dim childNode As Object
    Dim blDimensioned As Boolean
    blDimensioned = False
    Dim arr() As String
    Dim counter As Integer
    counter = 0
    For Each childNode In parentNode.ChildNodes
        If blDimensioned = True Then
            'der Array wird pro neuem Item redimensoniert
            ReDim Preserve arr(0 To UBound(arr) + 1) As String
        Else
            ReDim arr(0 To 0) As String
            blDimensioned = True
        End If
        
        arr(counter) = childNode.Attributes.getNamedItem(LCase(spracheCode)).nodeValue
        counter = counter + 1
    Next
    
    LoadArray = arr

End Function

Public Sub SetVersionAndDate(ByVal version As String, ByVal datum As String)
    xmlRootNode.Attributes.getNamedItem(vars.XmlImportFile_AktualisierungsDatumAttribut).nodeValue = datum
    xmlRootNode.Attributes.getNamedItem(vars.XmlImportFile_FileVersionAttribut).nodeValue = version
End Sub

Public Sub AddBeilagenNode(ByRef newNode As Object)
    DeleteBeilagenNode
    xmlComboBoxNode.appendChild newNode
End Sub

Public Sub AddHierarchieStufeNode(ByRef newNode As Object)
    DeleteHierarchieNode
    xmlComboBoxNode.appendChild newNode
End Sub

Private Sub DeleteBeilagenNode()
    DeleteNode vars.XmlImportFile_BeilagenNodeName
End Sub

Private Sub DeleteHierarchieNode()
    DeleteNode vars.XmlImportFile_HierarchieStufenNodeName
End Sub

Private Sub DeleteNode(ByVal nodeName As String)
    Dim node As Object
    Set node = xmlDom.SelectSingleNode(nodeName)
    xmlComboBoxNode.RemoveChild node
End Sub

Private Sub Class_Terminate()
    Set xmlDom = Nothing
    Set vars = Nothing
End Sub



Attribute VB_Name = "frmVersionCheck"
Attribute VB_Base = "0{CF66442D-BC86-4C80-A5DE-476AA26C98C7}{886BF14B-D75A-4036-BACC-CE2E4590E57D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private fileHelper As New fileHelper
Private variableHelper As New GlobaleVariabeln
Private varXmlHelper As XmlFileManager
Private fileXmlHelper As XmlFileManager

Public Sub InizializeVersionChek(ByRef XmlHelperVar As XmlFileManager, ByRef XmlHelperFile As XmlFileManager)
    Set varXmlHelper = XmlHelperVar
    Set fileXmlHelper = XmlHelperFile
    
    SetControlsTexts
End Sub

Private Sub cmdUeberspringen_Click()
    'Schreibe Variable f|fffd|r Wiederaufruf des Assistenten
    ActiveDocument.Variables(variableHelper.AskAgainVariableName).Delete
    ActiveDocument.Variables.Add variableHelper.AskAgainVariableName, CStr(chkAskAgain.Value)
    
    Unload Me
End Sub

Private Sub cmdImport_Click()
    Dim message As String
    message = "Import erfolgreich:" & Chr(13)
    
    If chkImportBeilagen Then
        varXmlHelper.AddBeilagenNode fileXmlHelper.BeilagenNode
        message = message & "Beilagen" & Chr(13)
    End If
    
    If chkImportHS Then
        varXmlHelper.AddHierarchieStufeNode fileXmlHelper.HierarchieStufeNode
        message = message & "Hierarchiestufen" & Chr(13)
    End If
    
    If chkImportBeilagen And chkImportHS Then
        varXmlHelper.SetVersionAndDate fileXmlHelper.XmlFileVersion, fileXmlHelper.XmlFileAktualisierungsDatum
        ActiveDocument.Variables(variableHelper.WordDocumentVariableName).Value = varXmlHelper.Xml
        message = message & "Update erfolgreich auf Version: " & fileXmlHelper.XmlFileVersion
    End If

    'Schreibe Variable f|fffd|r Wiederaufruf des Assistenten
    ActiveDocument.Variables(variableHelper.AskAgainVariableName).Delete
    ActiveDocument.Variables.Add variableHelper.AskAgainVariableName, CStr(chkAskAgain.Value)
    
    Unload Me
End Sub


Private Sub SetControlsTexts()
    'Form Titel
    Me.Caption = fileXmlHelper.GetControlText(Me.name)
    
    'Controls
    Dim ctrl As control
    For Each ctrl In Me.Controls
        ctrl.Caption = fileXmlHelper.GetControlText(ctrl.name)
    Next
    
    'Versions-Label
    lblCurrVers.Caption = varXmlHelper.XmlFileVersion
    lblCurrDate.Caption = varXmlHelper.XmlFileAktualisierungsDatum
    lblNewVers.Caption = fileXmlHelper.XmlFileVersion
    lblNewDate.Caption = fileXmlHelper.XmlFileAktualisierungsDatum
End Sub
Attribute VB_Name = "modBuildDropDowns"
Public Sub BuildDropDowns()
    Dim vars As New GlobaleVariabeln

    Dim xmlMgr As New XmlFileManager
    xmlMgr.LoadXmlAsString ActiveDocument.Variables(vars.WordDocumentVariableName)
    
    Dim arrHierarchieStufen As Variant
    Dim arrBeilagen As Variant
    Dim cc As ContentControl
    Dim ccHierarchieStufen As ContentControl
    For Each cc In ActiveDocument.ContentControls
        If Len(cc.tag) > 0 Then
            Dim ccType As String
            Dim i As Integer
            If GetCcType(cc.tag) = "HStufe" Then
                cc.DropdownListEntries.Clear
                arrHierarchieStufen = xmlMgr.GetHierarchieStufen(GetCcSprache(cc.tag))
                For i = 0 To UBound(arrHierarchieStufen)
                    cc.DropdownListEntries.Add (Replace(arrHierarchieStufen(i), "Chr(32)", Chr(32)))
                Next
            End If
            If GetCcType(cc.tag) = "Beilagen" Then
                cc.DropdownListEntries.Clear
                arrBeilagen = xmlMgr.GetBeilagen(GetCcSprache(cc.tag))
                For i = 0 To UBound(arrBeilagen)
                    cc.DropdownListEntries.Add (Replace(arrBeilagen(i), "Chr(32)", Chr(32)))
                Next
            End If
        End If
    Next
End Sub

Private Function GetCcType(ByVal tag As String) As String
    Dim arr() As String
    arr = Split(tag, ";")
    'Position 0 ist der Name des CC
    GetCcType = arr(0)
End Function

Private Function GetCcSprache(ByVal tag As String) As String
    Dim arr() As String
    arr = Split(tag, ";")
    'Position 1 enth|fffd|lt den Sprach-Code des CC
    GetCcSprache = arr(1)
End Function
Attribute VB_Name = "modError"
Option Explicit

'// Membervariablen
Private m_strLastErrNumber As Integer

'// Methode: sbClearLastError
'// L|fffd|schen der zuletzt gespeicherten Error-Nummer
'// Parameter: -
'// Return: -
'// pvd 22.04.2004

Public Sub sbClearLastError()
    '// Reset der gespeicherten Error-Nummer
    m_strLastErrNumber = 0
End Sub

'// Methode: sbDisplayErrorMessage
'// Pr|fffd|ft anhand des control-types ob der Wert den Anforderungen entspricht
'// Parameter: strCallerName: Bezeichnung der aufrufenden Methode oder Funktion, err: Error object
'//            InfoType: Typ der anzuzeigenden Fehlermedung (optional), strAdditionalInfo: Weitere Informatioenen als string (optional)
'// Return: -
'// pvd 16.04.2004
Public Sub sbDisplayErrorMessage(strCallerName As String, err As ErrObject, Optional InfoType As String, Optional strAdditionalInfo As String)

    Dim strError As String
    
    '// Wird kein spezifischer Message-Type |fffd|bergeben wird die Meldung als kritisch eingestuft
    If IsEmpty(InfoType) Then
        InfoType = vbCritical
    End If
    
    '// Bei repetierenden Fehlern wird nur die erste Meldung angezeigt
    If err.Number = m_strLastErrNumber Then
        Exit Sub
    End If
    
    'strError = "Es ereignete sich der folgende Fehler:" & Chr(13) & "--> " & strCallerName & Chr(13) & "      " & err.Description & _
    '           Chr(13) & "      " & strAdditionalInfo

    MsgBox err.Description, InfoType, ActiveDocument.name
    
    '// Speichern der Error-Nummer
    m_strLastErrNumber = err.Number

End Sub


Attribute VB_Name = "modFolderHelper"
Private Declare Function SHGetFolderPath Lib "shfolder" Alias "SHGetFolderPathA" _
    (ByVal hWndOwner As Long, ByVal Folder As Long, ByVal hToken As Long, ByVal Flags As Long, ByVal strPath As String) As Long

Private Const CSIDL_FLAG_DONT_VERIFY As Long = &H4000&
Private Const CSIDL_FLAG_CREATE   As Long = &H8000&
Private Const CSIDL_FLAG_MASK  As Long = &HFF00&
Private Const SHGFP_TYPE_CURRENT As Long = 0&
Private Const SHGFP_TYPE_DEFAULT As Long = 1&
Private Const MAX_PATH As Long = 260&
Private Const S_OK   As Long = 0&
Private Const S_FALSE   As Long = 1&
Private Const E_INVALIDARG As Long = &H80070057

'//Die Enums die Verwendet werden k|fffd|nnen um einen Special-Folder zu laden
Public Enum CSIDLS
  CSIDL_DESKTOP = &H0&                  'Desktop
  CSIDL_INTERNET = &H1&                 'Internet
  CSIDL_PROGRAMS = &H2&                 'Startmen|fffd|: Programme
  CSIDL_CONTROLS = &H3&                 'Systemsteuerung
  CSIDL_PRINTERS = &H4&                 'Drucker
  CSIDL_PERSONAL = &H5&                 'Eigene Dateien
  CSIDL_FAVORITES = &H6&                'IE: Favoriten
  CSIDL_STARTUP = &H7&                  'Autostart
  CSIDL_RECENT = &H8&                   'Zuletzt benutzte Dokumente
  CSIDL_SENDTO = &H9&                   'Senden an / SendTo
  CSIDL_BITBUCKET = &HA&                'Papierkorb
  CSIDL_STARTMENU = &HB&                'Startmen|fffd|
  CSIDL_MYMUSIC = &HD                   'Eigene Musik
  CSIDL_MYVIDEO = &HE                   'Eigene Videos
  CSIDL_DESKTOPDIRECTORY = &H10&        'Desktopverzeichnis
  CSIDL_DRIVES = &H11&                  'Mein Computer
  CSIDL_NETWORK = &H12&                 'Netzwerk
  CSIDL_NETHOOD = &H13&                 'Netzwerkumgebung
  CSIDL_FONTS = &H14&                   'Windows\Fonts
  CSIDL_TEMPLATES = &H15&               'Vorlagen
  CSIDL_COMMON_STARTMENU = &H16&        '"All Users" - Startmen|fffd|
  CSIDL_COMMON_PROGRAMS = &H17&         '"All Users" - Programme
  CSIDL_COMMON_STARTUP = &H18&          '"All Users" - Autostart
  CSIDL_COMMON_DESKTOPDIRECTORY = &H19& '"All Users" - Desktop
  CSIDL_APPDATA = &H1A&                 'Anwendungsdaten
  CSIDL_PRINTHOOD = &H1B&               'Druckumgebung
  CSIDL_LOCAL_APPDATA = &H1C&           'Lokale Einstellungen\Anwendungsdaten
  CSIDL_COMMON_FAVORITES = &H1F&        '"All Users" - Favoriten
  CSIDL_INTERNET_CACHE = &H20&          'IE: Tempor|fffd|re Internetdateien
  CSIDL_COOKIES = &H21&                 'IE: Cookies
  CSIDL_HISTORY = &H22&                 'IE: Verlauf
  CSIDL_COMMON_APPDATA = &H23&          '"All Users" - Anwendungsdaten
  CSIDL_WINDOWS = &H24&                 'Windows
  CSIDL_SYSTEM = &H25&                  'Windows\System32
  CSIDL_PROGRAM_FILES = &H26&           'C:\Programme
  CSIDL_MYPICTURES = &H27&              'Eigene Bilder
  CSIDL_PROFILE = &H28&                 'Anwenderprofil (Benutzername)
  CSIDL_SYSTEMX86 = &H29&               'Windows\System32
  CSIDL_PROGRAM_FILES_COMMON = &H2B&    'Gemeinsame Dateien
  CSIDL_COMMON_TEMPLATES = &H2D&        '"All Users" - Vorlagen
  CSIDL_COMMON_DOCUMENTS = &H2E&        '"All Users" - Dokumente
  CSIDL_COMMON_ADMINTOOLS = &H2F&       '"All Users" - Verwaltung
  CSIDL_ADMINTOOLS = &H30&              'Startmen|fffd|\Programme\Verwaltung
End Enum

'//Liefert den Pfad zu einem speziellen Verzeichnis zur|fffd|ck. Im Fehlerfall
'//wird ein leerer String returniert.
'//Bei Create True, wird abgefragtes Verzeichnis bei Bedarf automatisch angelegt
'//Bei Verify True, wird vor der R|fffd|ckgabe eines Pfades eine Pr|fffd|fung durchgef|fffd|hrt, ob der Pfad tats|fffd|chlich existiert
Public Function GetSpecialFolder(ByVal CSIDL As CSIDLS, Optional ByVal Create As Boolean = False, Optional ByVal Verify As Boolean = False) As String
    
    Dim sPath As String ' Zu ermittelnder Pfad
    Dim RetVal As Long  ' R|fffd|ckgabewert
    Dim lFlags As Long  ' Eigenschaften
  
    ' Stringbuffer f|fffd|llen
    sPath = Space$(MAX_PATH)
    
    ' Flags-Parameter zusammenstellen
    lFlags = CSIDL
  
    If Create Then ' Bei Bedarf automatisch erzeugen
        lFlags = lFlags Or CSIDL_FLAG_CREATE
    End If
  
    If Not Verify Then ' Existenz nicht |fffd|berpr|fffd|fen
        lFlags = lFlags Or CSIDL_FLAG_DONT_VERIFY
    End If
  
    ' Pfad zum Verzeichnis ermitteln
    RetVal = SHGetFolderPath(0, lFlags, 0, SHGFP_TYPE_CURRENT, sPath)
  
    ' Erfolgskontrolle und R|fffd|ckgabe des Ergebnisses
    Select Case RetVal
        Case S_OK
            ' G|fffd|ltiges Verzeichnis gefunden
            GetSpecialFolder = Left$(sPath, InStr(1, sPath, vbNullChar) - 1) & "\"
        Case S_FALSE
            ' lCSIDL ist g|fffd|ltig, aber das Verzeichnis existiert nicht
        Case E_INVALIDARG
            ' Ung|fffd|ltiges Verzeichnis
    End Select

End Function



Attribute VB_Name = "modRibbon"
Private Sub StartForm(control As IRibbonControl)
    frmImport.Show
End Sub
Attribute VB_Name = "modVersionCheck"
Private fileHelper As New fileHelper
Private variableHelper As New GlobaleVariabeln
Private varXmlHelper As New XmlFileManager
Private fileXmlHelper As New XmlFileManager

Public Sub CheckVersion()
    On Error GoTo err_handler
    
    If ShowDialogAgain = False Then Exit Sub

    varXmlHelper.LoadXmlAsString ActiveDocument.Variables(variableHelper.WordDocumentVariableName)
            
    If VariableExists(variableHelper.WordDocumentVariableName, ActiveDocument) Then
        If FileExists(varXmlHelper.XmlFileLokalerXmlPfad & "\" & variableHelper.XmlImportFile_FileName) Then
            fileXmlHelper.LoadXmlFileFromFileSystem varXmlHelper.XmlFileLokalerXmlPfad & "\" & variableHelper.XmlImportFile_FileName
        End If
        CompareXmlVersions
    End If
        
exit_handler:
    Exit Sub
    
err_handler:
    sbDisplayErrorMessage "Migrate Styles", err, vbInformation
    sbClearLastError
    Resume exit_handler
End Sub

Private Function ShowDialogAgain() As Boolean
    Dim var As Variable
    For Each var In ActiveDocument.Variables
        If var.name = variableHelper.AskAgainVariableName Then
            ShowDialogAgain = CBool(var.Value)
            Exit Function
        End If
    Next
    ShowDialogAgain = True
End Function

Private Sub CompareXmlVersions()
    Dim curVersion As Double
    Dim newVersion As Double
    
    If Not IsNull(fileXmlHelper.XmlFileVersion) And fileXmlHelper.XmlFileVersion <> "" Then
        curVersion = CDbl(varXmlHelper.XmlFileVersion)
        newVersion = CDbl(fileXmlHelper.XmlFileVersion)
        
        If curVersion < newVersion Then
            frmVersionCheck.InizializeVersionChek varXmlHelper, fileXmlHelper
            frmVersionCheck.Show
        End If
    End If
End Sub

Private Function FileExists(ByVal directory As String) As Boolean
    If Dir(directory) <> "" Then
        FileExists = True
    Else
        FileExists = False
    End If
End Function

Function VariableExists(strVarName As String, wrdDoc As Word.Document) As Boolean
    Dim wrdVar As Word.Variable
    For Each wrdVar In wrdDoc.Variables
        If LCase(strVarName) = LCase(wrdVar.name) Then
            VariableExists = True
            Exit For
        End If
    Next wrdVar
End Function



' InQuest injected base64 decoded content
' KnjX
' EzW^
' EzW^
' EzW^
' EzW^
' by+n}
' KnjX
' by+n}

INQUEST-PP=macro
