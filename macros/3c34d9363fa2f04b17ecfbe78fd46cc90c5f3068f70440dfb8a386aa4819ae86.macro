Attribute VB_Name = "Apttus"

Sub BuildApttusTab()
'OBSOLETE: NEeds to be replaced with import from Apttus - all automated:
'Import config line items with headers
'Set List Prices
'Set category: Software, ITPS, HW, Other
'Qty Formula on Apttus tab is: =IF(ISNA(MATCH(C12,C$9:C11,0)),SUMIFS(Items!$B$6:$B$427,Items!$C$6:$C$427,$C12),0)
'(If item is not already listed above, get total quantity from all matching catalog rows on Items tab)
'Find missing items, price discrepancies

'Input: Range("ApttusRawData")
Const FirstDataRowTarget = 9
Const ApttusInputRange = "ApttusRawData"

Dim BundleStartRow As Integer
Dim BundleTabStartRow As Integer
Dim t As Integer 'target row
Dim i As Integer 'input row
Dim BundleName As String
Dim BundleTabName As String
Dim PartNumber As String
Dim foundcell As Range
Dim aRng As Range
Set aRng = Range(ApttusInputRange)

Sheets("Apttus").Select
Range("A" & FirstDataRowTarget & ":C1200").ClearContents
Range("B:B").ClearComments
t = FirstDataRowTarget   'starting row on Apttus tab (Target)
BundleName = aRng(1, 1).Text
BundleTabName = aRng(1, 2).Text

For i = 2 To aRng.Rows.Count 'read in target data

    'New BUNDLE on this row
    If BundleName <> aRng(i, 1).Text Then
        BundleName = aRng(i, 1).Text
        Cells(t, 3).Formula = BundleName 'Enter Bundle
        Cells(t, 3).Style = "Bundle"
        'Sum prev Bundle above, if not first Bundle
        If i > 2 Then
                Cells(BundleStartRow, 1).Formula = "=Sum($D" & BundleStartRow + 1 & ":$D" & t - 1 & ")"
        End If
        BundleStartRow = t
        t = t + 1
    End If
        
    'New BUNDLE TAB name on this row
    If BundleTabName <> aRng(i, 2).Text Then 'new tab name
            BundleTabName = aRng(i, 2).Text
            Cells(t, 3).Formula = BundleTabName 'Enter BundleTab name
            Cells(t, 3).Style = "BundleTab"
            'Sum prev Bundle above, if not first Bundle
               If i > 2 Then
                   Cells(BundleTabStartRow, 1).Formula = "=Sum($D" & BundleTabStartRow + 1 & ":$D" & t - 1 & ")"
               End If
               BundleTabStartRow = t
               t = t + 1
    End If
    
    'Enter part line items & formulas
    PartNumber = aRng(i, 4).Text
    Cells(t, 1).Formula = "=D" & t 'filter column if qty entered
    Cells(t, 2) = PartNumber
    Cells(t, 3).Formula = aRng(i, 3).Text & ": " & aRng(i, 5).Text 'Description
    Cells(t, 3).Style = "ApttusDescription"
    
    'If P/N has already been entered on this page, don't fill Qty to avoid duplicates, add Comment to explain
        Set foundcell = Range("B1:B" & t - 1).Find(PartNumber, , xlFormulas, xlWhole)
        If foundcell Is Nothing Then
             Cells(t, 4).Formula = "=SUMIFS(Items!$B$6:$B$400,Items!$C$6:$C$400,$B" & t & ")"
             Cells(t, 5).Formula = aRng(i, 6).Value 'Unit Price
             Cells(t, 6).Formula = "=SUMIFS(Items!$F$6:$F$450,Items!$C$6:$C$450,$B" & t & ")" 'Total Price
        Else
             Cells(t, 4).Formula = ""
             Cells(t, 5).Formula = aRng(i, 6).Value 'Unit Price
             Cells(t, 6).Formula = "=D" & t & "*E" & t
             
             With Cells(t, 2)
                    .AddComment "See row " & foundcell.Row & Chr(10) & _
                            "This is a duplicate"
                        .Comment.Shape.TextFrame.AutoSize = True
                        .Comment.Shape.Placement = xlMove
                        '.ScaleWidth 0.83, msoFalse, msoScaleFromTopLeft
                       ' .ShapeRange.ScaleHeight 0.84, msoFalse, msoScaleFromTopLeft
                       ' .ShapeRange.IncrementLeft -18#
                       .Comment.Shape.IncrementTop 56.25
            End With
        End If

    t = t + 1
    Cells(t, 1).Select
Next i

'Final subtotal formulas
    Cells(BundleStartRow, 1).Formula = "=Sum($D" & BundleStartRow + 1 & ":$D" & t - 1 & ")"
    Cells(BundleTabStartRow, 1).Formula = "=Sum($D" & BundleTabStartRow + 1 & ":$D" & t - 1 & ")"

End Sub


Attribute VB_Name = "CVIT"
Public Const TemplatePath = "C:\CVITQuote\"
Public Const TemplateFile = "CVIT Quote.xltm"
Public Const MaxCCISoftwareDiscount = 0.5
Public Const MaxCCWSoftwareDiscount = 0.5
Public Const MaxTomTecDiscount = 0.15
Public Const MaxCCWServiceDiscount = 0.1
Public Const MaxCCIServiceDiscount = 0.1
Public ctl As Control

Sub DontPreviewQuote()
    If Not IsQuote Then Exit Sub
    Application.Calculation = xlCalculationAutomatic
    'IdentifyManualQuanties 'peach color code the Qty or Ext. Price cells where formula has been overtyped by user
    FilterItems
End Sub

Sub FilterItems()
Application.ScreenUpdating = False
    
    With Worksheets("Items")
    'Show selected items & headers based on Column A
    .Range("A1:K1000").AutoFilter Field:=5 'clear if still hidden after SOW
    .Range("A1:K1000").AutoFilter Field:=1, Criteria1:="<>0", Operator:=xlAnd
    
    'If Options hidden, show them, toggle - has no effect on old quotes
        If .AutoFilter.Filters(4).On Then
            .Range("A1:K1000").AutoFilter Field:=4 'Clear filter, show OPTIONAL rows
        Else
            'Hide Options
            .Range("A1:K1000").AutoFilter Field:=4, Criteria1:="<>1"
        End If
    End With
    
    With Worksheets("Apttus")
        .Range("A1:K1000").AutoFilter Field:=1, Criteria1:="<>0", Operator:=xlAnd
        .AutoFilter.ApplyFilter
    End With

If ActiveSheet.Name = "Items" Then Cells(6, 2).Select

Application.ScreenUpdating = True
End Sub

Sub ShowAllRows()
    If Not IsQuote Then Exit Sub
' Keyboard Shortcut: Alt+A
    With Worksheets("Items")
        .Range("B1").AutoFilter
        Cells(6, 2).Select
    End With
    
    With Worksheets("Apttus")
        .Range("B9").AutoFilter
        Cells(6, 2).Select
    End With
End Sub

Sub ReapplyConditionalFormatting()
With Worksheets("Items")
        BottomRow = Range("GrandTotal").Row
        ' 1 - turn orange if formula cells have been overwritten or formulas removed
        ApplyOrangetoNonformulas .Range("B9:B" & BottomRow & ",G9:I" & BottomRow) 'Orange if Qty, Unit & Ext price not a formula
End With

With Worksheets("Apttus")
        BottomRow = .UsedRange.SpecialCells(xlCellTypeLastCell).Row
        ' 1 - turn orange if formula cells have been overwritten or formulas removed
        ApplyOrangetoNonformulas .Range("B12:B" & BottomRow & ",F12:F" & BottomRow)  'Qty, Ext price columns
        
End With
End Sub


Sub ApplyOrangetoNonformulas(rng As Range)
'Deletes & replaces ONE conditional format for the range, keeps it tidy
  
    Dim FirstCell As String
    FirstCell = Replace(rng(1).Address, "$", "") 'No $ signs so it isn't fixed, can apply to other columns too
    FirstRow = rng(1).Row
    'C is the column with Item Numbers in it. Thus, $ before "C".
    CondFormula = "=NOT(ISFORMULA(" & FirstCell & "))*LEN($C" & FirstRow & ")>0" 'If cell is not a formula & Item Number entered in C

    If rng.Cells.FormatConditions.Count > 0 Then
        rng.Cells.FormatConditions(1).Delete
    End If
    
    rng.FormatConditions.Add Type:=xlExpression, Formula1:=CondFormula
    For Each Brdr In rng.FormatConditions(1).Borders
        With Brdr
        .LineStyle = xlContinuous
        .Color = vbRed
        .TintAndShade = 0
        End With
    Next Brdr
    With rng.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent6
        .TintAndShade = 0.399945066682943
    End With
    rng.FormatConditions(1).StopIfTrue = False

End Sub

Sub OpenNewCVITQuote()
    Workbooks.Add(Template:=TemplatePath & TemplateFile).RunAutoMacros Which:=xlAutoOpen
End Sub

Sub OpenCustomer()
    OpenForm "frmCustomer"
End Sub

Sub OpenCCI_Classic()
    OpenForm "frmCCI_Classic"
End Sub

Sub OpenCCI_Addon()
    OpenForm "frmCCI_Addon"
End Sub

Sub OpenUpgradeCCItoUV()
    OpenForm "frmUpgradeCCItoUV"
End Sub

Sub OpenCCI_Services()
    OpenForm "frmCCI_Services"
End Sub

Sub OpenUV()
    OpenForm "frmUniversalViewer"
End Sub

Sub OpenZFP()
    OpenForm "frmZFP"
End Sub

Sub OpenUpgradeCCW()
    OpenForm "frmUpgradeCCW"
End Sub

Sub OpenAddCCWLocation()
   OpenForm "frmAddCCWLocation"
End Sub

Sub OpenSOW()
    OpenForm "frmSOW"
End Sub

Sub OpenEA()
    OpenForm "frmEA"
End Sub

Sub OpenUpgrade()
    OpenForm "frmUpgradeCCW"
End Sub

Sub OpenCCI_Hardware()
    OpenForm "frmCCI_Hardware"
End Sub

Sub OpenCCW()
    OpenForm "frmCCW"
End Sub

Sub OpenCCWINV()
    OpenForm "frmCCWINV"
End Sub

Sub IdentifyManualQuanties()
    'LastRow = Range("SSA_total").Row
    Dim LastRow As Integer
    LastRow = Range("B7").CurrentRegion.SpecialCells(xlLastCell).Row
    Dim rng As Range
    Set rng = Range("B7:B" & LastRow)
    UpdateColors rng, False
    Set rng = Range("F7:F" & LastRow)
    UpdateColors rng, True
    Set rng = Nothing
End Sub

Sub UpdateColors(rng As Range, FlagText As Boolean)
'Color any manually entered quantities (not formulas or blanks) with light orange
    For Each cl In rng.Cells
        If Left(cl.Formula, 1) = "=" Then   'if a true formula then return to white
            If cl.Interior.ColorIndex = vPeach Then
                cl.Interior.ColorIndex = vWhite
            End If
        ElseIf cl.Formula <> "" And WorksheetFunction.IsNumber(cl.Value) Then
        'if not a formula, but is a number
            If cl.Interior.ColorIndex = vWhite Then
                cl.Interior.ColorIndex = vPeach
            End If
        ElseIf FlagText Then
        'if not a formula or a number, but is text
            If Len(cl.Text) > 1 And Val(cl.Value) = 0 Then
                cl.Interior.ColorIndex = vPeach
            ElseIf cl.Interior.ColorIndex = vPeach Then
                cl.Interior.ColorIndex = vWhite
            Else
                'cl.Interior.ColorIndex = cl.Offset(0, -1).Interior.ColorIndex
            End If
        End If
    Next cl

End Sub

Function IsCVITQuote() As Boolean
    On Error GoTo Nope
    For Each sht In ActiveWorkbook.Sheets
        If sht.Name = "Items" Then
            If InStr(1, sht.Range("E1").Text, "Centricity Cardio") > 0 Then
                IsCVITQuote = True
                Exit Function
            End If
        End If
    Next sht
Nope:
End Function

Public Sub FixComments()
    For Each C In ActiveSheet.Comments
        C.Shape.Height = 50
        C.Shape.Width = 115
    Next C
End Sub

Sub ShortRowsQuote()
    ActiveWorkbook.Sheets("Items").Rows.RowHeight = 14
    ActiveWorkbook.Sheets("Items").Rows(2).AutoFit
    For Each cl In Range("B6:B" & Range("SSA_total").Row).Cells
        If Left(cl.Style, 7) = "Heading" Then
            ActiveWorkbook.Sheets("Items").Rows(cl.Row).AutoFit
        End If
    Next cl
End Sub

Sub TallRowsQuote()
    ActiveWorkbook.Sheets("Items").Rows.AutoFit
End Sub

Public Sub DiskSpacePDF()
    ActiveWorkbook.Sheets("DiskSpaceCalculator").ExportAsFixedFormat Type:=xlTypePDF, Filename:= _
        "C:\Temp\GE CCE Disk Space Estimate.pdf", Quality:=xlQualityStandard, _
        IncludeDocProperties:=False, IgnorePrintAreas:=False, OpenAfterPublish:= _
        True
End Sub

Sub testtest()
MsgBox ActiveCell.Interior.ColorIndex
End Sub

Sub FixExtendedTotColors()
    For Each cl In Selection.Cells
        If cl.Interior.ColorIndex = 20 Then
            cl.Copy
            cl.Offset(0, 1).PasteSpecial (xlPasteFormats)
            Application.CutCopyMode = False
        End If
    Next cl
End Sub

Sub ConfigNotes()
    If Not IsCVITQuote Then Exit Sub
    Load frmNotes
    frmNotes.Show
    Unload frmNotes
End Sub

Sub CombineOptionalNotes()
        For lItem = 1 To Range("Optional_Project_Notes").Rows.Count
            If Range("Optional_Project_Notes").Cells(lItem, 3) Then Boilerplate_Notes = Boilerplate_Notes & Range("Optional_Project_Notes").Cells(lItem, 2)
        Next
        Range("Boilerplate_Notes") = Boilerplate_Notes
End Sub

Function CustomerCityState() As String
    Customer_String = Range("strHosp_Name")
    If Customer_String = "" Then Customer_String = "CUSTOMER UNSPECIFIED - Enter in Customer menu"
    Customer_String = Customer_String & " " & Range("strHosp_City") & " " & Range("strHosp_State")
    CustomerCityState = Customer_String
End Function

Sub RequestServiceQuoteByMail()
    If Range("strHosp_Name") = "" Then 'Unspecificed, open the form
        OpenCustomer
    End If

    Dim OutApp As Object
    Dim OutMail As Object
    
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    
    DueDate = WorksheetFunction.WorkDay(Date, 2) + WorksheetFunction.Ceiling(Time(), 1 / 24)
    If Not Range("chkCCWInv") Then
    'If WorksheetFunction.CountIf(Range("CCWINV_Device_Int_Table"), ">0") = 0 Then ''obsolete 7/16/2019
        CCWType = "Single"
    Else
        CCWType = "Multisite"
    End If
    
    With OutMail
        .To = "InvasiveHCITSupport@ge.com" '@HEALTH Invasive HCIT Support
        .CC = "lori.marler@ge.com; Ronda.Bartlett@ge.com"
        .BCC = ""
        .Subject = "Service Quote Request:" & CustomerCityState
        
        BodyText = "The Centricity team is quoting Centricity to:   <b>" & CustomerCityState & "</b>"
        BodyText = BodyText & "<br>" & "Please return a quote by <b>" & Format(DueDate, "ddd m/d/yy h:mm") & "</b> (2 business days, 48 hrs)"
        BodyText = BodyText & "<br>" & "We need to quote Invasive Field Engineering services for the following scope."
        
        BodyText = BodyText & "<br>" & "Travel time one way to the Site(s) below for your nearest Field Engineer is: "
        If CCWType = "Single" Then
            BodyText = BodyText & RangetoHTML(Sheets("Ref_Tables").Range("TravelTimeCCWsingle"))
        Else
            'Filter list by ADT to show only sites needing travel estimate
            Sheets("Ref_Tables").ListObjects("tblTravelTimeCCWINV").Range.AutoFilter Field:=4, Criteria1:="TRUE"
            BodyText = BodyText & RangetoHTML(Sheets("Ref_Tables").Range("TravelTimeCCWINV"))
        End If
        BodyText = BodyText & "<br>" & "Scope of Invasive FE time to be quoted on the Centricity Quote:"
        BodyText = BodyText & "<ol>"
        BodyText = BodyText & "<li>" & "<b>Trip 1 - End to End Testing.</b>  Travel to and from the site plus 2 hours of work effort to place a system in and out of replication so that the Centricity team can perform End to End testing. <br>FE can leave after taking the system out of replication and return later to put back into replication.</li>"
        BodyText = BodyText & "<li>" & "<b>Trip 2 - Final change to CCW</b> as the production database.   Travel to and from the site, and 30 minutes per system to move the below invasive devices currently connected to DMS over to CCW.  <br>An additional hour is included for general issues that arise with the turnover. </li>"
        BodyText = BodyText & "<li>" & "<b>Trip 3 - [Optional: add any other required scope to quote] </li>"
        BodyText = BodyText & "</ol>"
        
    'Count # of installed ML devices & estimate cutover hours
        xSystems = 0
        If CCWType = "Single" Then
            xSystems = Range("txtHemo_GE") + Range("txtEP_GE")
        Else
            xSystems = Range("txtInv_MacLabIntegrationA_GE") 'Why this for MULTI but not for SINGLE CCW?
        End If
        xxHours = WorksheetFunction.RoundUp((xSystems * 0.5), 0) + 1
        BodyText = BodyText & "<br>" & "We calculate " & xSystems & " systems will require " & _
            xxHours & " hours for cutover.  Please indicate if this does not match your records & requirements."
    
    'No table needed any more
    'BodyText = BodyText & RangetoHTML(Sheets("Ref_Tables").Range(rngName))
                        
        BodyText = BodyText & "<br>" & "<i>Any other services required...</i>"
        
        .HTMLBody = BodyText
        .Display 'instead of immediate .Send
    End With

    Set OutMail = Nothing
    Set OutApp = Nothing

End Sub

Sub DueIn48Hours()
    
    DueDate = WorksheetFunction.WorkDay(Date, 2) + WorksheetFunction.Ceiling(Time(), 1 / 24)
    
End Sub


Function RangetoHTML(rng As Range)
' Changed by Ron de Bruin 28-Oct-2006
' Working in Office 2000-2016
    Dim fso As Object
    Dim ts As Object
    Dim TempFile As String
    Dim TempWB As Workbook

    TempFile = Environ$("temp") & "\" & Format(Now, "dd-mm-yy h-mm-ss") & ".htm"

    'Copy the range and create a new workbook to past the data in
    rng.Copy
    Set TempWB = Workbooks.Add(1)
    With TempWB.Sheets(1)
        .Cells(1).PasteSpecial Paste:=8
        .Cells(1).PasteSpecial xlPasteValues, , False, False
        .Cells(1).PasteSpecial xlPasteFormats, , False, False
        .Cells(1).Select
        Application.CutCopyMode = False
        On Error Resume Next
        .DrawingObjects.Visible = True
        .DrawingObjects.Delete
        On Error GoTo 0
    End With

    'Publish the sheet to a htm file
    With TempWB.PublishObjects.Add( _
         SourceType:=xlSourceRange, _
         Filename:=TempFile, _
         Sheet:=TempWB.Sheets(1).Name, _
         Source:=TempWB.Sheets(1).UsedRange.Address, _
         HtmlType:=xlHtmlStatic)
        .Publish (True)
    End With

    'Read all data from the htm file into RangetoHTML
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(TempFile).OpenAsTextStream(1, -2)
    RangetoHTML = ts.readall
    ts.Close
    RangetoHTML = Replace(RangetoHTML, "align=center x:publishsource=", _
                          "align=left x:publishsource=")

    'Close TempWB
    TempWB.Close savechanges:=False

    'Delete the htm file we used in this function
    Kill TempFile

    Set ts = Nothing
    Set fso = Nothing
    Set TempWB = Nothing
End Function

Attribute VB_Name = "Cedaron"
Sub OpenCedaronRequest()

    Workbooks.Add Template:=TemplatePath & "Cedaron Registry Quote Request from GE Healthcare.xltm"
        'Shouldn't need to run macros on open:
        '.RunAutoMacros Which:=xlAutoOpen

End Sub
Attribute VB_Name = "Copying"
'PRODUCTION
   Public Const sConnect = "DRIVER={MySQL ODBC 5.3 Unicode Driver};UID=dory;Password=Pa55word;PORT=3306;Database=shdw01;SERVER={ps-lamp-poc2.eng.med.ge.com};Option=3"
'TEST:
'  Public Const sConnect = "DRIVER={MySQL ODBC 5.3 Unicode Driver};UID=dory;Password=Pa55word;PORT=3306;Database=shdwtst01;SERVER={ps-lamp-poc2.eng.med.ge.com};Option=3"
Public Const sServer = "ps-lamp-poc2.eng.med.ge.com"
Public cn As ADODB.Connection
Public rst As ADODB.Recordset
Public CancelAction As Boolean
Public bCopying As Boolean
Public AtCurrentVersion As Boolean
Public PublishedVersion As Date
Public Importing As Boolean
Public oStatusCell As Object
Dim QuoteTemplate As String

Sub GetPublishedVersion()
    AtCurrentVersion = True
    ConfigType = "CVITquote"
    
    On Error GoTo AllDone:  'if error
    If Not TestServerIP(sServer) Then GoTo AllDone 'or not on VPN...skip it
'compare version date on network with this version date, if difference then prompt user to upgrade
    Set cn = CreateObject("ADODB.Connection")
    cn.Open sConnect
    Set rst = CreateObject("ADODB.Recordset")
    strSQL = "SELECT Max(VersionDate) AS LastVersionDate, VersionNum FROM VersionHistory WHERE App = '" & ConfigType & "'"
    rst.Open strSQL, cn, adOpenKeyset, adLockReadOnly

'what if not found
If rst.EOF Then
    GoTo AllDone
End If
    VersionDate = Int(CVIT_Quote.ThisWorkbook.BuiltinDocumentProperties("Last save time")) 'strip time from date
    PublishedVersion = rst!LastVersionDate
    If rst!LastVersionDate > VersionDate Then
        ret = MsgBox("A new version of the Configurator is available at http://sc.ge.com/*" & ConfigType & Chr(10) & _
        "  Would you like to download it now?" & Chr(10) & _
        "  Your version: " & VersionDate & Chr(10) & _
        "  Latest version available to download: " & rst!LastVersionDate _
        , vbYesNo + vbQuestion, "New version: " & Format(rst!LastVersionDate, "mm.dd.yy"))
        If ret = vbYes Then
            AtCurrentVersion = False
            GotoDownloadPage
        End If
    End If
    On Error Resume Next
    rst.Close:    Set rst = Nothing
    cn.Close:    Set cn = Nothing
AllDone:
End Sub

Sub GotoDownloadPage()
    Set ie = CreateObject("InternetExplorer.Application")
    ie.Visible = True
    ie.Navigate "http://sc.ge.com/*CVITquote"
    Set ie = Nothing
End Sub

Sub CopyData(Oldbk As Workbook, Newbk As Workbook, KeepPrices As Boolean, KeepQuantities As Boolean)
Dim rng As Range
Dim nm As Name 'Old workbook name
'cont = MsgBox("Copying can take over a minute...", vbOKCancel, "Copy To New Workbook")
If cont = vbCancel Then GoTo Done:

'bCopying TO a new workbook:  Oldbk = ActiveWorkbook, Newbk = new file
'Importing old book to current book (SLX): Oldbk = selected file; Newbk = ActiveWorkbook
QuoteTemplate = "C:\CVITquote\CVIT Quote.xltm"
'If Application.Version = "14.0" Then QuoteTemplate = "C:\CVITquote\CVIT Quote.XLTM"

'Open a fresh copy of the template
If Newbk Is Nothing Then
    Set Newbk = Workbooks.Add(QuoteTemplate)
    'OldDate = Oldbk.Sheets("FormData").Range("Quote_created")  '*******************************************
End If

Application.Calculation = xlCalculationManual

'Copy any range name value on the Customer or Data tab
For Each nm In Oldbk.Names
    nName = nm.Name
    nSheet = Mid(nm, 2, Application.Max(1, InStr(1, nm, "!") - 2))
    'Copy all ranges where formula = "=Customer!*" or  "=Data!*"
    If nSheet = "FormData" Or nSheet = "Ref_Tables" Then
        For Each strRngName In Newbk.Names
            If strRngName.NameLocal = nName Then GoTo UseThisName
        Next strRngName
        GoTo Skipit  'if range name not found in new worksheet
        
UseThisName:
        On Error Resume Next
        If Oldbk.Sheets(nSheet).Range(nName).Cells(1).Text <> "" Then
            DTotal = Left(Oldbk.Sheets(nSheet).Range(nName).Cells(1).Formula, 4) 'Get first 4 chars of formula in named range
        End If
        On Error Resume Next

        If InStr(1, nm, "#REF!") > 0 Then  'is already screwed up, don't copy
        ElseIf Left(DTotal, 1) = "=" Then 'any other formula, don't copy
        Else
            On Error Resume Next
            Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
            On Error GoTo 0
        End If
        On Error GoTo 0
    Else
    'Not an item to copy
Skipit:
    End If
    If nm = Empty Then GoTo Finish
Next nm

nName = "txtRevision"
Newbk.Sheets("FormData").Range(nName) = Oldbk.Sheets("FormData").Range(nName).Formula + 1

Finish:
Newbk.Sheets("Ref_Tables").Range("Quote_Created") = VBA.Date & " " & VBA.Time
Newbk.Activate
DontPreviewQuote

Discounts:
nSheet = "Discount"
DiscountExists = False
For i = 1 To Oldbk.Worksheets.Count
    If Oldbk.Sheets(i).Name = nSheet Then DiscountExists = True
Next i
If DiscountExists Then
If Oldbk.Sheets("Ref_Tables").Range("optDiscountsAlternate").Value Then
    nName = "I11"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "I12"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "I17"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "I18"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "I19"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "I28"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    Newbk.Sheets("Ref_Tables").Range("optDiscountsAlternate") = True
      
ElseIf Oldbk.Sheets("Ref_Tables").Range("optDiscountsTarget").Value Then
    nName = "DiscTargetTotal_CCWServices"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "DiscTargetTotal_TomTec"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "DiscTargetTotal_UVServices"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    nName = "N28"
    Newbk.Sheets(nSheet).Range(nName) = Oldbk.Sheets(nSheet).Range(nName).Value
    Newbk.Sheets("Ref_Tables").Range("optDiscountsTarget") = True
End If
End If

MsgBox "Complete", , "Copy To New Workbook"
Done:

End Sub
Public Function RangeExists(s As String) As Boolean
    On Error GoTo Nope
    RangeExists = Range(s).Count > 0
Nope:
End Function

Function RngNameExists(strName As String, Optional wkbook As Workbook) As Boolean
    If IsMissing(wkbook) Then Set wkbook = Application.ActiveWorkbook
    RngNameExists = False
    For Each rname In wkbook.Names
        If InStr(1, rname.NameLocal, strName) > 0 Then
            RngNameExists = True
            Exit Function
        End If
    Next rname
    Set sss = Nothing
End Function

Sub ImportLegacyQuote(OldFile As String)
'Turn off calculation to improve performance
Application.Calculation = xlCalculationManual
Set oStatusCell = Range("D" & Range("SSA_Total").Row + 3)
'Copy file to local drive for performance
Dim TmpFile As String

SSO = Environ("USERNAME")
USERPROFILE = Environ("USERPROFILE") ' "[drive]:\Documents and Settings\" & SSO
TmpFile = USERPROFILE & "\My Documents\temp.xls"
On Error Resume Next
FileCopy OldFile, TmpFile
If Err.Description <> "" Then
    MsgBox Err.Description
End If
'Dept array on rows with '=SUM' on Data page
GetDeptArrays TmpFile
'Specific named ranges on Data page only
DataFromClosedFile TmpFile
  
Application.Calculate

DontPreviewQuote
oStatusCell = "Import done. Last quote date: " & Range("Quote_Date_c")
Kill TmpFile 'delete temp.xls so can't be accidentally imported again on copy failure
ShortRowsQuote
Importing = True
End Sub

Sub UpdatePriceQty(sDataFile As String, UpdatePrices As Boolean, UpdateQtys As Boolean)
'Update non-matching quantities or net prices
Dim strConnect As String
Dim strSQL As String
Dim rsCon As Object
Dim rsQtys As Object
Dim rsPNs As Object
Dim rsPrices As Object
Dim rsArray
Dim whatrow As Integer

FirstRow = 9
On Error GoTo 0

strConnect = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
    "Data Source=" & sDataFile & ";" & _
    "Extended Properties=""Excel 8.0;HDR=NO"";"
Set rsCon = CreateObject("ADODB.Connection")
rsCon.Open strConnect
'Find the last row of Data page
    Range("Data!A1").Formula = "=ROW(Data!SSA_total)"
    whatrow = Range("Data!A1")
    Range("Data!A1").ClearContents
ReDim itms(2, whatrow - 9)
'itms: qty, pn, price

'Store Qty col to recordset...itms(0,n)
    Set rsQtys = CreateObject("ADODB.Recordset")
    strSQL = "SELECT * FROM [Items$B9:B" & whatrow & "];"
    rsQtys.Open strSQL, rsCon, 0, 1, 1
    rsArray = rsQtys.GetRows()
    nr = UBound(rsArray, 2)
    For n = LBound(rsArray, 2) To nr
        If IsNull(rsArray(0, n)) Then 'if Null then store a blank Qty
            itms(0, n) = ""
        Else
            itms(0, n) = Val(rsArray(0, n))
        End If
    Next n
    rsQtys.Close
'Store P/N col to recordset...itms(1,n)
    Set rsPNs = CreateObject("ADODB.Recordset")
    strSQL = "SELECT * FROM [Items$C9:C" & whatrow & "];"
    rsPNs.Open strSQL, rsCon, 0, 1, 1
    rsArray = rsPNs.GetRows()
    nr = UBound(rsArray, 2)
    For n = LBound(rsArray, 2) To nr
        If IsNull(rsArray(0, n)) Then
            itms(1, n) = ""
        Else
            itms(1, n) = rsArray(0, n)
        End If
    Next n
    rsPNs.Close
oStatusCell = "Comparing Quantities and/or Unit Prices"
'Store Unit Price to recordset...itms(2,n)
    Set rsPrices = CreateObject("ADODB.Recordset")
    strSQL = "SELECT * FROM [Items$E9:E" & whatrow & "];"
    rsPrices.Open strSQL, rsCon, 0, 1, 1
    rsArray = rsPrices.GetRows()
    nr = UBound(rsArray, 2)
    For n = LBound(rsArray, 2) To nr
        If IsNull(rsArray(0, n)) Then
            itms(2, n) = ""
        Else
            itms(2, n) = rsArray(0, n)
        End If
    Next n
    rsPrices.Close
rsCon.Close
Sheets("Items").Activate
ShowAllRows
'    find matching PN line on this wkbk
For n = 0 To whatrow
    Qty = itms(0, n)
    PN = itms(1, n)
    Price = itms(2, n)
    If PN = "" Then GoTo Skipit
    If Price = "" Then GoTo Skipit
    
    'unless one of the duplicate item numbers, skip those
     If PN = "2014150-009" Or _
        PN = "2014150-010" Or _
        PN = "2014345-009" Or _
        PN = "2014345-010" Or _
        PN = "2020526-003" Or _
        PN = "2000225-017" Or _
        PN = "2014149-009" Or _
        PN = "2014342-009" Or _
        PN = "2015128-004-CSE" Or _
        PN = "2000362-001-CSE" Or _
        PN = "2020526-003" Or _
        PN = "2023493-010" Or _
        PN = "2045995-001" Or _
        PN = "CSE Back-Up Svr" Or _
        PN = "CSE Primary Svr" Or _
        PN = "EXISTING_EQPMT" Or _
        PN = "EXISTING_SFW" Or _
        PN = "EXISTING_SVR" Then GoTo Skipit
    
    'If OBSOLETE PN has been replaced with something new do that here
    If PN = "2014150-009" Then PN = "2014150-010"   ' Server
    If PN = "2014345-009" Then PN = "2014345-010"   ' Loadshare/TS Server
    If PN = "03001.003.LEX" Then PN = "2049489-001" ' USB Keyboard
    If PN = "2014348-016" Then PN = "2014348-017-1EN" ' Manuals
    If PN = "2002033-059B" Then PN = "2002033-059-1EN"
    If PN = "2002033-023I" Then PN = "2002033-023-1EN"
    If PN = "2002033-061B" Then PN = "2002033-061-1EN"
    If PN = "2002033-060B" Then PN = "2002033-060-1EN"
    If PN = "2002033-062B" Then PN = "2002033-062-1EN"
    If PN = "2002033-055B" Then PN = "2002033-055-1EN"
    If PN = "2002033-064B" Then PN = "2002033-064-1EN"
    If PN = "2006710-001J" Then PN = "2006710-001-1EN"
    If PN = "2002033-063B" Then PN = "2002033-063-1EN"
    If PN = "2002033-045J" Then PN = "2002033-045-1EN"
    If PN = "2013485-001" Then PN = "2013485-002"  'Workstation standalone UPS
    
    Set fnd = Range("C:C").Find(What:=PN, LookIn:=xlValues, lookat:=xlWhole)
    resetfind = ActiveSheet.Cells.Find("", lookat:=xlPart)
    If Not fnd Is Nothing Then
        'if not same Qty, replace qty
        'compare net prices, too.  If not matching update and lock w/red?
        If UpdateQtys And fnd.Offset(0, -1) <> Qty Then
            fnd.Offset(0, -1) = Qty
            Application.Calculate
        End If
        If UpdatePrices And fnd.Offset(0, 2) <> Price Then
            If Qty > 0 Then
                fnd.Offset(0, 2) = Price
                fnd.Offset(0, 2).Font.Color = vbRed
                Application.Calculate
            End If
        End If
    End If
Skipit:
Next n

End Sub

Sub DataFromClosedFile(sDataFile As String)
sShtName = "Data"
Dim strConnect As String
Dim strSQL As String
Dim rsCon As Object 'ADODB.Connection
Dim rsData As Object 'ADODB.Recordset
   
'Connect String for ADO
strConnect = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
    "Data Source=" & sDataFile & ";" & _
    "Extended Properties=""Excel 8.0;HDR=NO"";"

'On Error GoTo errExit
Set rsCon = CreateObject("ADODB.Connection")
rsCon.Open strConnect
Set rsData = CreateObject("ADODB.Recordset")
    
On Error GoTo 0
'Loop through all Range names on Items page (only those existing in new file will be copied)
For Each nm In ActiveWorkbook.Names
    rngName = nm.Name
    ShtName = Mid(nm, 2, InStr(1, nm, "!") - 2)
    'Copy all ranges where formula = "=Data!*"
    If ShtName = "Data" Then
        If InStr(1, nm, "#REF!") > 0 Then  'is already screwed up, don't copy
        ElseIf InStr(1, nm, ":") > 0 Then  'ref contains a ":" so it's a multicell range, don't copy
        ElseIf Left(Range(rngName).Formula, 4) = "=SUM" Then 'skip it till we do Dept Totals
        ElseIf Left(Range(rngName).Formula, 4) = "=" Then 'any other formula, don't copy
        Else
            rngFound = 0
            strSQL = "SELECT * FROM [" & rngName & "];"
            On Error Resume Next
            rsData.Open strSQL, rsCon, 0, 1, 1
            rngFound = rsData.Fields.Count
            On Error GoTo 0
            If rngFound = 1 Then
                'GET THE RANGE NAME AND STORE IT
                oStatusCell = "SAVING DATA TO " & rngName
                Range(rngName).Cells(1, 1).CopyFromRecordset rsData
                rsData.Close
            End If
        End If
    ElseIf ShtName = "Customer" And Right(rngName, 2) <> "_c" Then
            rngFound = 0
            strSQL = "SELECT * FROM [" & rngName & "];"
            On Error Resume Next
            rsData.Open strSQL, rsCon, 0, 1, 1
            rngFound = rsData.Fields.Count
            If rngFound = 1 Then
                'GET THE RANGE NAME AND STORE IT to range with "_c" appended...the archive ranges
                oStatusCell = "SAVING DATA TO " & rngName
                Range(rngName & "_c").Cells(1, 1).CopyFromRecordset rsData
                rsData.Close
            End If
            On Error GoTo 0
    End If
skipthisrng:
Next nm

Cleanup:
rsCon.Close
Set rsCon = Nothing
Set rsData = Nothing
Exit Sub

errExit:
MsgBox Err.Description
Resume Cleanup
End Sub


Sub GetDeptArrays(sDataFile As String)
Dim rngRows(200, 1)
sShtName = "Data"

'Loop through all Range names on Items page (only those existing in new file will be copied)
For Each nm In ActiveWorkbook.Names
    rngName = nm.Name
    ShtName = Mid(nm, 2, InStr(1, nm, "!") - 2)
    'Copy all ranges where formula = "=Data!*"
    If ShtName = "Data" Then
        If InStr(1, nm, "#REF!") > 0 Then  'is already screwed up, don't copy
        ElseIf InStr(1, nm, ":") > 0 Then  'ref contains a ":" so it's a multicell range, don't copy
        ElseIf Left(Range(rngName).Formula, 4) = "=SUM" Then
            If Left(Range(rngName).Offset(0, 1), 1) <> "=" Then 'only update non formula arrays
                oStatusCell = "Getting ROW # for Dept " & rngName
                Range("Data!A1").Formula = "=ROW('" & sDataFile & "'!" & rngName & ")"
                On Error GoTo skipthisone
                whatrow = Val(Range("Data!A1"))
                On Error GoTo 0
                Range("Data!A1").ClearContents
                rngRows(i, 0) = rngName
                rngRows(i, 1) = whatrow
                i = i + 1
            End If
        End If
    End If
skipthisone:
Next nm

Dim strConnect As String
Dim strSQL As String
Dim rsCon As Object 'ADODB.Connection
Dim rsData As Object 'ADODB.Recordset
   
oStatusCell = "Copying Dept data"
'Connect String for ADO
strConnect = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
    "Data Source=" & sDataFile & ";" & _
    "Extended Properties=""Excel 8.0;HDR=NO"";"
Set rsCon = CreateObject("ADODB.Connection")
Set rsData = CreateObject("ADODB.Recordset")
rsCon.Open strConnect

'Loop through all Range names on Items page (only those existing in new file will be copied)
For X = 0 To i - 1
        DeptRngName = "Data$C" & rngRows(X, 1) & ":P" & rngRows(X, 1)
        rngFound = 0
        strSQL = "SELECT * FROM [" & DeptRngName & "];"
        'On Error Resume Next
        rsData.Open strSQL, rsCon, 0, 1, 1
        rngFound = rsData.Fields.Count
        'On Error GoTo 0
        If rngFound = 14 Then
            'GET THE RANGE NAME AND STORE IT
            Range(Range(rngRows(X, 0)).Offset(0, 1), Range(rngRows(X, 0)).Offset(0, 14)).CopyFromRecordset rsData
            rsData.Close
        End If
Next X
rsCon.Close
Set rsCon = Nothing
Set rsData = Nothing
oStatusCell = "Done with Dept"
Exit Sub

errExit:
MsgBox Err.Description

End Sub



Attribute VB_Name = "ExportWord"
Option Explicit
'Public Const ExcelTemplatePath = "C:\CVITquote\"
Public Const TemplateName = "CVIT Project SOW Template.dotm"
Dim CopyRange As Range
Dim wd As Object
Dim doc As Object
Dim rw As Object

'Word constants because we are late binding for backwards compatibility with Word 2010
'Do not select Word in References.
Public Const wdBorderTop = -1
Public Const wdColorAutomatic = -16777216
Public Const wdColorBlack = 0
Public Const wdDeleteCellsEntireRow = 2
Public Const wdDialogFileSummaryInfo = 86
Public Const wdFieldRef = 3
Public Const wdGoToBookmark = -1
Public Const wdInLine = 0
Public Const wdLine = 5
Public Const wdLineStyleDouble = 7
Public Const wdLineStyleNone = 0
Public Const wdLineStyleSingle = 1
Public Const wdLineWidth050pt = 4
Public Const wdPageBreak = 7
Public Const wdSelection = 6
Public Const wdStory = 6
Public Const wdWindowStateMaximize = 1

Sub CreateSOW()

Sheets("Items").Select
'Filter to show only quoted items, not Optional items
ShowAllRows
FilterItems
If Range("D6") = "Option" Then Columns(4).Hidden = True
    
'******* CHECK DATE OF QUOTE TEMPLATE *************
Dim CreateDate As Date
Dim QuoteNumRev As String
Dim DescCol As String
CreateDate = Range("Quote_Created").Value
If Not (CreateDate >= Date - 60) Then
    Dim cont As Integer
    cont = MsgBox("This quote file is over 60 days old.  *IF* you want to ensure that all current changes are in effect, Copy To New Config in the Customer menu. " & _
    Chr(10) & "Click OK to continue with SOW.", vbOKCancel, "Just a suggestion, not an error")
    If cont = vbCancel Then Exit Sub
End If

'Is this a Revision **********************************************************
If Val(Range("txtRevision")) > 0 Then
    QuoteNumRev = " REV" & Range("txtRevision")
Else
    QuoteNumRev = ""
End If

' *****  START TALKING TO WORD *****************************************
On Error Resume Next
    Set wd = GetObject(, "Word.Application")
    If Err.Number <> 0 Then Set wd = GetObject("", "Word.Application")
WordStarted:
  On Error GoTo 0
  wd.Documents.Add Template:=TemplatePath & TemplateName, NewTemplate:=False
  Set doc = wd.ActiveDocument
  wd.Application.ScreenUpdating = True
  wd.Visible = True

'******** CUSTOMIZE THE Signature Page ***********************************
 doc.FormFields("CustomerName").Result = Range("strHosp_Name")
 doc.FormFields("CustomerCity").Result = Range("strHosp_City")
 doc.FormFields("CustomerState").Result = Range("strHosp_State")
 doc.FormFields("PreparedBy").Result = Range("strPreparedBy") 'SOW menu
 doc.FormFields("PreparedByTitle").Result = Range("strPreparedByTitle") 'SOW menu
 If Range("strProposal_ID").Text <> "" Then doc.FormFields("ProposalID").Result = Range("strProposal_ID").Text
    
    wd.Selection.GoTo wdGoToBookmark, Name:="ProjectGoals"
    wd.Selection.TypeText Trim(Range("strProjectGoals"))
    wd.Selection.TypeParagraph

'Print optional project notes
    On Error GoTo AfterNotes
        For Each rw In Range("Ref_Tables!Optional_Project_Notes").Rows
            If rw.Cells(1, 1).Offset(0, 2) Then wd.Selection.TypeText rw.Cells(1, 2).Text & Chr(10)
        Next rw
       
AfterNotes:
On Error GoTo 0
'Remove conditional formatting on Items column B (Qty) - replaced at the end
    Worksheets("Items").Range("B9:B" & Range("GrandTotal").Row).FormatConditions(1).Delete
    
'Copy/Paste Image of line items, no summary or prices
    Dim ServicesHeaderRow As Integer
    ServicesHeaderRow = Range("Total_EA_Hardware").Row + 1
    wd.Selection.GoTo What:=-1, Name:="Section1" '********PRODUCTS_SECTION
    
'Hide totals rows
    With Worksheets("Items").Range("A1:K1000")
        .AutoFilter Field:=5, Criteria1:="<>*Total:*" 'Hide totals rows from copy/paste
    End With
    
    Select Case Sheets("Items").Range("D6")
     Case "Option", "Opt", "Optional"
        DescCol = "E"
     Case Else
        DescCol = "D"
    End Select
    Set CopyRange = Sheets("Items").Range("B7:" & DescCol & ServicesHeaderRow - 1)
    If WorksheetFunction.Subtotal(3, CopyRange) > 0 Then
        CopyRange.Copy
        PasteTableAndTidyUp wd.Selection
    End If

'Insert items that don't trigger quoted lines with prices, just for project doc
With wd.Selection
    .TypeParagraph
    If Range("chkEMRlaunch") Then .TypeText "URL-based EMR Launch Integration": .TypeParagraph
    If Range("chkOutboundAPIGE") Then .TypeText "Outbound API GE (Xeleris) Configuration": .TypeParagraph
    If Range("chkOutboundAPI3rd") Then .TypeText "Outbound API 3rd Party Configuration": .TypeParagraph
    If Range("txtImages") > 0 Then .TypeText "An estimated " & Range("txtImages") & "Image Studies will be migrated.": .TypeParagraph
End With

'Insert Training section
    wd.Selection.GoTo What:=-1, Name:="Training"

    Set CopyRange = Range("B" & ServicesHeaderRow & ":" & DescCol & Range("Total_UV_Services_Price").Row - 1)
    If WorksheetFunction.Subtotal(3, CopyRange) > 0 Then
        CopyRange.Copy
        PasteTableAndTidyUp wd.Selection
    End If
'Force an update of the REF fields in the doc with a quick preview and close
   Dim aStory As Object
   Dim aField As Object
   For Each aStory In doc.StoryRanges
      For Each aField In aStory.Fields
        If aField.Type = wdFieldRef Then
            aField.Update
        End If
      Next aField
   Next aStory

wd.Selection.GoTo What:=-1, Name:="TableOfContents"
wd.Selection.Fields.Update
wd.Selection.WholeStory
wd.Selection.Fields.Unlink
wd.Selection.HomeKey Unit:=wdStory
Range("A1").Select
Application.CutCopyMode = False
wd.Visible = True

'********** NAME THE WORD FILE ******************
Dim ProposedFileName As String
'if file hasn't been named yet, get the file name
    If Left(ActiveWorkbook.Name, 12) = "CVIT Project" Then
        ProposedFileName = Trim(Range("Hosp_Name")) & " " & Range("Hosp_State") & " SOW " & QuoteNumRev
        ProposedFileName = CharReplace(ProposedFileName)
    Else
        ProposedFileName = Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 4)
    End If
    
    With wd.Dialogs(wdDialogFileSummaryInfo)
      .Title = ProposedFileName
      .Execute
    End With
    'wd.Options.DefaultFilePath(wdDocumentsPath) = QuoteSavePath

AllDone:
  wd.Selection.HomeKey Unit:=wdStory 'cursor to top of Word doc
    
'Send Word file over to local environment
    wd.WindowState = wdWindowStateMaximize
    wd.Application.ScreenUpdating = True
    wd.Visible = True
    wd.ScreenRefresh
    wd.Activate

  Set doc = Nothing
  Set wd = Nothing

'Replace conditional formatting
    ReapplyConditionalFormatting
    If Range("D6") = "Option" Then Columns(4).Hidden = False
End Sub
Sub PasteTableAndTidyUp(objWordSelection As Object)
    With objWordSelection
        'Insert table by pasting as RTF
          .PasteSpecial Link:=False, DataType:=1, Placement:=wdInLine, DisplayAsIcon:=False
        'Select Table and set font size
          .MoveUp Unit:=wdLine, Count:=1
          .Tables(1).Select
          .Font.Size = 9
        'Repeat header row
          .Rows(1).HeadingFormat = True
        'Merge cells if color is yellow (subheaders) so don't wrap in first column
        For Each rw In .Tables(1).Rows
            If rw.Cells.Count > 1 And rw.Cells.Count < 3 Then
                'If rw.Cells(2).Range.Shading.ForegroundPatternColor = 13434879 Then rw.Cells.Merge
                rw.Cells.Merge
            End If
        Next rw
        
        'Place cursor back down below table to continue
        .Tables(1).Select
        .MoveDown Unit:=5, Count:=1
        
    End With

End Sub

Attribute VB_Name = "PingNet"
Private Declare PtrSafe Function OpenProcess _
    Lib "kernel32" ( _
    ByVal dwDesiredAccess As Long, _
    ByVal bInheritHandle As Long, _
    ByVal dwProcessId As Long) _
    As Long
Private Declare PtrSafe Function WaitForSingleObject _
    Lib "kernel32" ( _
    ByVal hHandle As Long, _
    ByVal dwMilliseconds As Long) _
    As Long
Private Declare PtrSafe Function CloseHandle _
    Lib "kernel32" ( _
    ByVal hObject As Long) _
    As Long
Private Const SYNCHRONIZE = &H100000
Private Const INFINITE = &HFFFF

Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long

' "Pause" code execution for "Timeout" seconds.
' Excel will continue to process the keyboard and mouse clicks at least once a second.
' This Pause function will not take up lots of CPU resources.
' 2015.02.04 -- Chaim Gewirtz
'2018.08.09 -- Dory O. from 1000 to 100 of a second, faster
Public Sub Pause(Optional Seconds As Single = 5)
    Dim EndTick

    ' There are 1000 'ticks' in a second.
    EndTick = GetTickCount() + Seconds * 100
    Do While GetTickCount() <= EndTick
        ' Process keyboard and mouse events while waiting.
        DoEvents

        ' If there is at least one more second to pause then...
        If EndTick - GetTickCount() > 100 Then
            ' "Wait" for one second without using CPU resources.
            Sleep 100
        End If
    Loop
End Sub

Public Function TestVPN() As Boolean
    If Not TestServerIP(sServer) Then
        MsgBox "Connect to VPN to use online resources."
        TestVPN = False
    Else
        TestVPN = True
    End If
End Function

Sub ShellAndWait(CommandLine As String)
    Dim ShellId As Long
    Dim ShellHandle As Long
    ShellId = Shell(CommandLine, vbHide)
    ShellHandle = OpenProcess(SYNCHRONIZE, 0, ShellId)
    If ShellHandle <> 0 Then
        WaitForSingleObject ShellHandle, INFINITE
        CloseHandle ShellHandle
    End If
End Sub

Function TestServerIP(ServerIP As String) As Boolean
    Dim NextFile As Integer
    Dim PingText As String
    Dim PingPath As String
    
    'set path using workbook location
    PingPath = Replace(ThisWorkbook.FullName, ThisWorkbook.Name, "PingTest.txt")
    'test connection (calls cmd window using 'c' arg to close when done 1 ping)
    ShellAndWait "C:\WINDOWS\system32\cmd.exe /c ping -n 1 " & ServerIP & " > """ & PingPath
    'open the ping output and look for "Request timed out"
    NextFile = FreeFile
    Open PingPath For Input As NextFile
    PingText = Input$(LOF(NextFile), NextFile)
    TestServerIP = Not InStr(PingText, "could not find host")
    Close #NextFile
    Kill PingPath
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    modToolbar.fixToolbar
    Application.CommandBars("CVIT Quote").Visible = True
End Sub
Attribute VB_Name = "frmAddCCWLocation"
Attribute VB_Base = "0{A6572228-54E4-4936-8A1D-930251F57FBA}{B32CC8DC-0A34-4B2C-935E-80501268A651}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Sub ValidateModes()
    ColorCodeSelections Me
End Sub

Private Sub chkCUnivCCW_Click()
    ValidateTraining
End Sub

Private Sub ValidateTraining()
    For Each ctrl In fraTraining.Controls
        Select Case Left(ctrl.Name, 3)
          Case "txt", "Spi"
            If chkCUnivCCW Then ctrl = 0
            ctrl.Enabled = (Not chkCUnivCCW)
          Case Else
            ctrl.Enabled = True
        End Select
    Next ctrl
    ColorCodeSelections Me
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
    chkAddLocationCCW = True
    If strAddLocCCWnotes = "" Then strAddLocCCWnotes = "New CCW Site"
End Sub

Private Sub cmdSave_Click()
    SetFormattedControls Me 'pct,dat,cur
    Hide
End Sub

Private Sub chkUpgradeCCW_Click()
    ColorCode Me.ActiveControl
End Sub

Private Sub optExistingCATH_None_Click()
    ValidateModes
End Sub

Private Sub optExistingCATH_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingCATH_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingEcho_None_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEcho_PC_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEcho_Rep_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEP_None_Click()
    ValidateModes
End Sub

Private Sub optExistingEP_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingEP_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingFollowup_None_Click()
    ValidateModes
End Sub

Private Sub optExistingFollowup_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingImplant_None_Click()
    ValidateModes
End Sub

Private Sub optExistingImplant_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingIPV_None_Click()
    ValidateModes
End Sub

Private Sub optExistingIPV_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingNIPV_None_Click()
    ValidateModes
End Sub

Private Sub optExistingNIPV_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingNIPV_Rep_Click()
    ValidateModes
End Sub

Private Sub optExistingNucMed_None_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingNucMed_Rep_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingPedEcho_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingPedEcho_Rep_Click()
    ValidateModes
End Sub

Private Sub SpinAddedPMtime_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdjustOnsiteDaysCCW_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdvRptWriting1_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdvRptWriting2_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdvStatsClass_Change()
    IncrSpinner Me.SpinAdvStatsClass
End Sub

Private Sub SpinAFIBreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBaseFoundation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinBillingSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCASE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCatalogMgmt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCRMint_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCustomCrystalReports_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMS_PCI_ICD_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMSdays_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingADT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingBillingInt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingCPACSint_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingDICOM_PDF_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingLabInterface_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingMatlMgmt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingMedOUT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingOrdersIN_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingOrdersOUT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingPDFout_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingResultsOUT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFuncAppOverview_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHISsystems_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinHQclinical_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinICDreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinInvSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinINWs_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMUSE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinOnsiteFEdays_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinParkNIPV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinPCIreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinRegistrySupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinRemoteSpecWebinar_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinSchedSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSTSreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinSysAdmin_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinVM_Server_Apps_Install_Change()
    IncrSpinner Me.ActiveControl
End Sub
Sub DefaultStressMode()
With Me
    EchoOrNucQuoted = (.optExistingEcho_PC Or .optExistingEcho_Rep Or .optExistingNucMed_Rep)
    .chkExistingStressMode.Visible = EchoOrNucQuoted
    If .Tag = "Activating" Then
            Exit Sub 'Not if just opening form
    Else
            .chkExistingStressMode = EchoOrNucQuoted
    End If
End With
End Sub

Private Sub UserForm_Activate()
    GetFormattedControls Me
    ValidateModes
    ValidateTraining
    Me.Tag = "Activating"
        DefaultStressMode
    Me.Tag = ""
    If strAddLocCCWnotes = "" Then strAddLocCCWnotes = "New CCW Site"
    strAddLocCCWnotes.SetFocus
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub
Attribute VB_Name = "frmCCI_Hardware"
Attribute VB_Base = "0{B98442E0-3328-4C1F-A3DD-1C287E466488}{BA39A8FA-7FBB-4F72-9826-47DD5AC2EA82}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdClear_Click()
        ClearControls Me
End Sub

Private Sub cmdSave_Click()
    Hide
End Sub



Private Sub optWkstn3YrWarranty_Change()
 '   If optWkstn3YrWarranty + optWkstn5YrWarranty = 0 Then Me.ActiveControl.ActiveControl = True 'workaround bug: 1st click doesn't work
    ColorCode optWkstn3YrWarranty
    ColorCode optWkstn5YrWarranty
End Sub

Private Sub optWkstn5YrWarranty_Change()
  '  If optWkstn3YrWarranty + optWkstn5YrWarranty = 0 Then Me.ActiveControl.ActiveControl = True
    ColorCode optWkstn3YrWarranty
    ColorCode optWkstn5YrWarranty
End Sub

Private Sub Spin4kMonitor_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBarcoColor_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCIHW_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDellDual_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDellHCA_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDellSingle_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDellWorkstation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMC28001yr_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMC28003yr_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMC5501yr_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMC5503yr_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACache18TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACache27TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACache36TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACache9TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACacheLg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACacheMed_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEACacheSmall_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEIZO21display_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEIZOdisplay_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEZDicomQCMod_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHP1Monitor_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHP2Monitors_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPCPU_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPDual_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPmemory_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPSingle_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNAS1800_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNAS4TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNAS9TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNASTray10TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNASTray20TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNASTray5TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNASTray30TB_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPServerLarge_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPServerMedium_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPServerSmall_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHPworkstation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNECMonitor_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSASRaid_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinStreamingEngSvr_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinUVserver_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinVideoCard_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinWkstnsGEconfig_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinZ420Workstation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinZFPserver_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtBarcoColor_Change()
    ColorCode txtBarcoColor
End Sub

Private Sub txtEACache18TB_Change()
    ColorCode txtEACache18TB
End Sub

Private Sub txtEACache27TB_Change()
    ColorCode txtEACache27TB
End Sub

Private Sub txtEACache36TB_Change()
    ColorCode txtEACache36TB
End Sub

Private Sub txtEACache9TB_Change()
    ColorCode txtEACache9TB
End Sub

Private Sub txtDMC28001yr_Change()
    ColorCode txtDMC28001yr
End Sub

Private Sub txtDMC28003yr_Change()
    ColorCode txtDMC28003yr
End Sub

Private Sub txtDMC5501yr_Change()
    ColorCode txtDMC5501yr
End Sub

Private Sub txtDMC5503yr_Change()
    ColorCode txtDMC5503yr
End Sub

Private Sub txtEZDicomQCMod_Change()
    ColorCode txtEZDicomQCMod
End Sub

Private Sub txtHPDual_Change()
    ColorCode txtHPDual
End Sub

Private Sub txtNECMonitor_Change()
    ColorCode txtNECMonitor
End Sub

Private Sub UserForm_Activate()
    ColorCodeSelections Me
End Sub

Private Sub RAID_default()
    With Me
'    If (.txtEACache9TB + .txtEACache18TB + .txtEACache27TB + .txtEACache36TB) > 0 And Me.txtSASRaid = 0 Then
'        txtSASRaid.Value = 1
'    End If
    End With
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub


Private Sub UserForm_Click()
    FilterItems
End Sub

Attribute VB_Name = "frmCCI_Services"
Attribute VB_Base = "0{9A90CA47-0885-4C50-91B8-85E4FD216F8D}{0D1280F1-24E6-4A18-A3FF-D31AA83E7BF2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub chkAPI_Click()
    ColorCode chkAPI
End Sub

Private Sub chkCCOW_Click()
    ColorCode chkCCOW
End Sub

Private Sub chkCVIS_Click()
    ColorCode chkCVIS
End Sub

Private Sub chkCVweb_Click()
    ColorCode chkCVweb
End Sub

Private Sub chkEAReportIntegration_Click()
    ColorCode chkEAReportIntegration
End Sub

Private Sub chkMUSE_Click()
    ColorCode chkMUSE
End Sub

Private Sub chkSSL_Click()
    ColorCode chkSSL
End Sub

Private Sub chkWADO_Click()
    ColorCode chkWADO
End Sub
Private Sub chkWFConsulting_Click()
    ColorCode chkWFConsulting
End Sub

Private Sub chkZFP_Click()
    ColorCode chkZFP
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
End Sub

Private Sub cmdSave_Click()
    Hide
'AllCCI_Integration_Config
    Dim AllCCI_Integration_Config As Integer
    For Each ctl In Me.fraInterfaceConfiguration.Controls
         If Left(ctl.Name, 6) = "chk" Then AllCCI_Integration_Config = AllCCI_Integration_Config + Int(ctl.Value)
    Next ctl
    Range("AllCCI_Integration_Config").Value = Abs(AllCCI_Integration_Config)

End Sub

Private Sub pctDiscount_CCIService_AfterUpdate()
    TxtToPct pctDiscount_CCIService, MaxCCIServiceDiscount
End Sub

Private Sub Spin2dayOnsiteSupport_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin3dayOnsiteSupport_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCI_VM_Server_Install_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCIAddlPMdays_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEDaysAfter_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEdaysMonFri_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEDaysSunHol_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEHoursAfter_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEHoursMonFri_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinFEHoursSunHol_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinTomTecClassAdj_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinUVessentials_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinUVResourceMgmt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinUVUserMaint_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txt2dayOnsiteSupport_Change()
    ColorCode txt2dayOnsiteSupport
End Sub

Private Sub txtTomTecClassAdj_Change()
    CalcTomTecTrainingDays
End Sub

Private Sub UserForm_Activate()
    ColorCodeSelections Me
End Sub

Private Sub CalcTomTecTrainingDays()
    Dim AllTomTecmodules As Integer
    txtAdjTotalTomTecClasses.Value = Val(txtRecommendedTomTecClasses) + Val(txtTomTecClassAdj)
    
'Adjust if negative
    If txtAdjTotalTomTecClasses < 0 Then
        txtAdjTotalTomTecClasses = 0
        txtTomTecClassAdj = -Val(txtRecommendedTomTecClasses)
    End If

End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmCCW"
Attribute VB_Base = "0{0542F099-BE2C-4B2E-B586-964770B54060}{D684BF13-31B7-4C2B-A341-416CE823244F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim X As Integer 'all purpose counter
Dim ctrltxt As Control
Dim ctrlspn As Control
Dim CtlName As String
Dim modename As String
Dim IsBundle As String
Dim ValidationMode As Boolean
Dim EchoOrNucQuoted As Boolean

Sub UpdateMacLabService()
    txtMacLabIntegration_GE = Int((Val(txtHemo_GE) + Val(txtEP_GE)) / 5) 'One per every 5 GE Hemo & GE EP
    ColorCode txtMacLabIntegration_GE
End Sub

Private Sub chkCUnivCCW_Click()
    ValidateCentUniv
    ColorCodeSelections Me
End Sub

Sub ValidateCentUniv()
Exit Sub 'TEMP: Chris Smedstad error with Office v1908
    For Each ctrl In Me.fraTraining.Controls
        Select Case Left(ctrl.Name, 3)
          Case "txt", "Spi"
            If chkCUnivCCW Then ctrl = 0
            ctrl.Enabled = (Not chkCUnivCCW)
          Case Else
            ctrl.Enabled = True
        End Select
    Next ctrl
End Sub

Private Sub cmdRefilter_Click()
    FilterItems
End Sub

Private Sub cmdRegistryHelp_Click()
    MsgBox "Carry Forward only applies to registries that existed on a prior DMS." & _
    Chr(10) & "Select Net New Registries if the customer did NOT have this registry on an existing DMS system", vbInformation, "New or Carry Forward Registries"
End Sub

Private Sub cmdCedaron_Click()
    cmdSave_Click
    OpenCedaronRequest
End Sub

Private Sub cmdSvcQuote_Click()
    RequestServiceQuoteByMail
End Sub

Private Sub fraExamModules_Click()
    FilterItems
End Sub

Private Sub fraHardware_Click()
    FilterItems
End Sub

Private Sub fraHL7_Click()
    FilterItems
End Sub

Private Sub optCCWLowVolCath_Click()
    If Not ValidationMode Then CCW_Config_Validation "LowVolCath"
    LowVolSitesDefault
End Sub

Private Sub optCCWLowVolEcho_Click()
    If Not ValidationMode Then
        CCW_Config_Validation "LowVolEcho"
    End If
    LowVolSitesDefault
    ShowHideExamModes
End Sub

Sub LowVolSitesDefault()
    If Me.optNetNewCCW Or optCCWLowVolCath Or optCCWLowVolEcho Then
        If txtCCWSites = 0 Then txtCCWSites = 1
        If txtHISsystems = 0 Then txtHISsystems = 1
    End If
End Sub

Private Sub optCCWNone_Click()
    If optCCWNone Then
        Range("txtCCWSites") = 0 'to avoid error
        CCW_Config_Validation "None"
        cmdClear_Click
    End If
End Sub

Private Sub optNetNewCCW_Click()
    If Not ValidationMode Then CCW_Config_Validation "NetNew"
End Sub

Private Sub optAddFeaturesCCW_Click()
    If Not ValidationMode Then CCW_Config_Validation "AddFeatures"
End Sub

Private Sub optAddLocationCCW_Click()
    If Not ValidationMode Then CCW_Config_Validation "AddLocation"
End Sub

Private Sub optIPV_PC_Click()
    ShowHideExamModes
End Sub

Private Sub optNucMed_PC_Click()
    ShowHideExamModes
End Sub

Private Sub optStress_None_Click()
    ShowHideExamModes
End Sub

Private Sub optStress_PC_Click()
    ShowHideExamModes
End Sub

Private Sub optStructHrt_None_Click()
    ShowHideExamModes
End Sub

Private Sub optStructHrt_PC_Click()
    ShowHideExamModes
End Sub

Private Sub optUpgradeCCW_Click()
    If Not ValidationMode Then CCW_Config_Validation "Upgrade"
End Sub

Sub ValidateConfigTypes()
    If optAddFeaturesCCW Then
         CCW_Config_Validation "AddFeatures"
    ElseIf optAddLocationCCW Then
         CCW_Config_Validation "AddLocation"
    ElseIf optUpgradeCCW Then
        CCW_Config_Validation "Upgrade"
    ElseIf optNetNewCCW Then
        CCW_Config_Validation "NetNew"
    ElseIf Me.optCCWLowVolCath Then
        CCW_Config_Validation "LowVolCath"
    ElseIf Me.optCCWLowVolEcho Then
        CCW_Config_Validation "LowVolEcho"
    ElseIf optUpgrCCWtoRptg Then
        CCW_Config_Validation "UpgrToReporting"
    ElseIf Me.optCCWNone Then
        CCW_Config_Validation "None"
        'cmdClear_Click
    End If
End Sub

Sub CCW_Config_Validation(Config As String)
If HoldUpdates Or Me.Tag = "Activating" Then Exit Sub
   
    'Make sure Net New is selected if no options are already chosen
    If optNetNewCCW + optAddFeaturesCCW + optAddLocationCCW + optUpgradeCCW + optCCWLowVolCath + optCCWLowVolEcho + optUpgrCCWtoRptg + optCCWNone _
        = False Then optNetNewCCW = True
     
    cmdAddCCWLoc.Enabled = optAddLocationCCW
    cmdUpgradeCCW.Enabled = optUpgradeCCW
    txtCCWSites.Visible = Not optUpgradeCCW And Not optUpgrCCWtoRptg
    SpinCCWsites.Visible = Not optUpgradeCCW And Not optUpgrCCWtoRptg
    lblCCWsites.Visible = Not optUpgradeCCW And Not optUpgrCCWtoRptg
          
    txtUpgrCCWtoRptg.Visible = optUpgradeCCW Or optUpgrCCWtoRptg
    SpinUpgrCCWtoRptg.Visible = optUpgradeCCW Or optUpgrCCWtoRptg
    lblUpgrCCWtoRptg.Visible = optUpgradeCCW Or optUpgrCCWtoRptg
    If Not txtUpgrCCWtoRptg.Visible Then txtUpgrCCWtoRptg = 0
    
   'Hide frames that are not appropriate to Config type
    If Config = "AddLocation" Then
        Range("txtADT") = "0" 'Don't need additional ADT
            fraExamModules.Visible = False
            HideClearFrame fraExamModules 'must clear any New mode selections, will select them on frmAddCCWlocation
            fraHL7.Visible = False
            'fraRegistries.Visible = False
            fraTraining.Visible = False
            fraInstallServices.Visible = False
            fraDMSmigration.Visible = False
    ElseIf Left(Config, 4) = "Upgr" Then
        txtCCWSites = 0
        If txtUpgrCCWtoRptg = 0 Then txtUpgrCCWtoRptg = 1
        Range("txtADT") = "0"
        fraExamModules.Visible = Me.optUpgrCCWtoRptg 'Hide if not Upgrade to Reporting which needs to select modes
        fraHL7.Visible = True
        'fraRegistries.Visible = True
        fraTraining.Visible = True
        fraInstallServices.Visible = True
        fraDMSmigration.Visible = True
    Else 'Net New or Add Features
        If txtCCWSites = 0 Then txtCCWSites = 1
        fraExamModules.Visible = True
        fraHL7.Visible = True
        'fraRegistries.Visible = True
        fraTraining.Visible = True
        fraInstallServices.Visible = True
        fraDMSmigration.Visible = True
        If Config <> "NetNew" Then
            Range("txtADT") = "0" 'Don't need additional ADT
        Else
            If Range("txtADT") = "0" Then Range("txtADT") = 1
        End If
    End If

'Select Bundle items if bundle, but skip this if not
    With Me
        IsBundle = optCCWLowVolCath + optCCWLowVolEcho
        'Disable & select Cath & IPV Reporting
            .optCATH_None.Enabled = (Not .optCCWLowVolCath)
            .optCATH_PC.Enabled = (Not .optCCWLowVolCath)
            .optIPV_None.Enabled = (Not .optCCWLowVolCath)
            .txtHemo_NonGE.Tag = IIf(.optCCWLowVolCath, "Required", "")
        'Disable & select Echo & Stress Mode
            .optEcho_None.Enabled = (Not optCCWLowVolEcho)
            .optEcho_PC.Enabled = (Not optCCWLowVolEcho)
            .optStress_None.Enabled = (Not optCCWLowVolEcho)
            .optStress_PC.Enabled = (Not optCCWLowVolEcho)
            .txtUltrasound_NonGE.Tag = IIf(.optCCWLowVolEcho, "Required", "")
        
        If IsBundle Then
                'Disable & select Cath & IPV Reporting
'                .optCATH_None.Enabled = (Not .optCCWLowVolCath)
'                .optCATH_PC.Enabled = (Not .optCCWLowVolCath)
'                .optIPV_None.Enabled = (Not .optCCWLowVolCath)
'                .txtHemo_NonGE.Tag = IIf(.optCCWLowVolCath, "Required", "")
                'Disable & select Echo & Stress Mode
'                .optEcho_None.Enabled = (Not optCCWLowVolEcho)
'                .optEcho_PC.Enabled = (Not optCCWLowVolEcho)
'                .optStress_PC.Enabled = (Not optCCWLowVolEcho)
'                .txtUltrasound_NonGE.Tag = IIf(.optCCWLowVolEcho, "Required", "")
            If Not Me.Tag = "Activating" Then
                'Force base selections
                If .optCCWLowVolCath Then
                    .optCATH_Rep = True
                    .optIPV_Rep = True
                ElseIf .optCCWLowVolEcho Then
                    .optEcho_Rep = True
                    .optStress_Rep = True
                End If
                'Trigger bundled Interfaces
                If .optCCWLowVolCath And .txtMacLabIntegrationA_GE = 0 Then .txtMacLabIntegrationA_GE = Abs(.optCCWLowVolCath)
                .txtOrdersIN = 1
                .txtResultsOUT = 1
                .txtPDFout = 1
                .txtBillingInt = Abs(.optCCWLowVolCath)
                .txtSysAdmin = 1
            End If
        Else
            .txtHemo_NonGE.Tag = ""
            .txtUltrasound_NonGE.Tag = ""
        End If
       
        .SpinOrdersIN.Enabled = (Not IsBundle)
        .txtOrdersIN.Enabled = (Not IsBundle)
        .SpinResultsOUT.Enabled = (Not IsBundle)
        .txtResultsOUT.Enabled = (Not IsBundle)
        .SpinPDFout.Enabled = (Not IsBundle)
        .txtPDFout.Enabled = (Not IsBundle)
        
        .SpinBillingInt.Enabled = (Not .optCCWLowVolCath)
        .txtBillingInt.Enabled = (Not .optCCWLowVolCath)
        
    End With
    
    ColorCodeSelections Me
    
End Sub

Sub HideClearFrame(fra As Control)
        'If redundant with subform, hide and wipe out selections
    HoldUpdates = True
        'Reset controls: txt = 0, Defaults to TRUE
            For Each ctrl In fra.Controls
                Select Case LCase(Left(ctrl.Name, 3))
                Case "chk", "opt"
                    Range(ctrl.Name) = (ctrl.Tag = "Default") 'Default=TRUE
                Case "txt" 'spinner textbox hold a number, default =0
                    Range(ctrl.Name) = 0
                Case "str", "cmb", "cbo", "lst", "dat" 'Text fields
                    Range(ctrl.Name) = ""
                    If ctrl.Tag <> "" Then Range(ctrl.Name) = ctrl.Tag 'Default text
                Case "pct" 'percentage text
                    If ctrl.Tag <> "" Then
                        Range(ctrl.Name) = ctrl.Tag 'Default text
                    Else
                        Range(ctrl.Name) = "0.00%"
                    End If
                    ctrl = Range(ctrl.Name).Text
                End Select
            Next ctrl
        HoldUpdates = False
    
End Sub

Private Sub chkRDP_Click()
    ColorCode chkRDP
End Sub

Private Sub cmdAddCCWLoc_Click()
        'cmdSave_Click
        OpenAddCCWLocation
End Sub

Private Sub cmdUpgradeCCW_Click()
        'cmdSave_Click
        OpenUpgradeCCW
End Sub

Private Sub optStress_Rep_Click()
    TriggerRptSites "Stress"
    ShowHideExamModes
End Sub

Private Sub optEP_Rep_Click()
    TriggerRptSites "EP"
    ShowHideExamModes
End Sub

Private Sub optFollowup_None_Click()
    ShowHideExamModes
End Sub

Private Sub optFollowup_Rep_Click()
    TriggerRptSites "Followup"
    ShowHideExamModes
End Sub

Private Sub optUpgrCCWtoRptg_Click()
    If Not ValidationMode Then CCW_Config_Validation "UpgrCCWtoRptg"
End Sub

Private Sub pctDiscount_CCW_AfterUpdate()
    TxtToPct pctDiscount_CCW, MaxCCWSoftwareDiscount
End Sub

Private Sub SpinACCreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub pctDiscount_CCWService_AfterUpdate()
    TxtToPct pctDiscount_CCWService, MaxCCWServiceDiscount
End Sub

Private Sub pctDiscount_DMSLoyalty_AfterUpdate()
    TxtToPct pctDiscount_DMSLoyalty, 0.75
End Sub

Private Sub SpinAdvStatsClass_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCA1000Integ_GE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAFIBreg_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinAFIBregCF_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinBostonZscores_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinButton1_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinCASE_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinCCGLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCatalogClass_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub spinCCWsites_Change()
    IncrSpinner SpinCCWsites
    If (Val(txtCCWSites) > 0) And optCCWNone Then Me.optNetNewCCW = True
    If Val(txtCCWSites > 3) Then Me.chkRDP = True
End Sub

Private Sub SpinClinicalAdminRept_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinCPACSint_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinCRMConnectConfig_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinCRMint_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinDICOM_PDF_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinDMSADTrpts_Change()
    IncrSpinner SpinDMSADTrpts
End Sub

Private Sub SpinFollowup_Sites_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinFuncAppOverview_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinHISsystems_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinICDregCF_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinINWs_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinLabInterface_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinLargeServer_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinMacLabIntegration_GE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMacLabIntegrationA_GE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMediumServer_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinMedOUT_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinMUSE_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinUUencode_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinNonGEDeviceLic_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinOrdersOUT_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinParkNIPV_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinPCIregCF_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinSmallServer_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinStructHrt_Sites_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinStructRptgClass_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinSTSregCF_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinSysAdminRPT_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinTemplateDesign_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinUpgrCCWtoRptg_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinVM_Server_Apps_Install_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub SpinXMLexport_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub txtBostonZscores_Change()
    ColorCode txtBostonZscores
End Sub

Private Sub txtCASE_Change()
    ShowHideCASEbtn
    If txtCASE = 1 Then cmdCASEnote_Click
End Sub

Sub ShowHideCASEbtn()
    cmdCASEnote.Visible = (Int(txtCASE) > 0)
End Sub

Private Sub cmdCASEnote_Click()
    Dim CaseNote As String
    Dim ret As Integer
    CaseNote = "Please be sure that each case unit has:" & Chr(10)
    CaseNote = CaseNote & Chr(10) & "i. CASE SW version 6.71 or higher"
    CaseNote = CaseNote & Chr(10) & "ii. Options:  DICOM, XML export, and PDF export"
    CaseNote = CaseNote & Chr(10) & "iii. If not, Contact DCAR rep to quote an upgrade"
    CaseNote = CaseNote & Chr(10) & Chr(10) & "As of 8/1/19 CASE integration = 8 hrs for 1st cart at EACH site + 2 hrs/cart for add'l carts"
    
    ret = MsgBox(CaseNote, vbExclamation, "CASE Requires add'l information")
End Sub

Private Sub txtCCWSites_Change()
    If txtCCWSites > 0 And txtHISsystems < 1 Then txtHISsystems = 1
    If txtCCWSites > 0 And ((Not optPedEcho_None) Or (txtBostonZscores > 0)) Then txtBostonZscores = txtCCWSites
    ColorCodeSelections Me
End Sub

Private Sub optLargeServer_AfterUpdate()
    ColorCodeSelections Me
End Sub

Private Sub SpinCatalogMgmt_Change()
    IncrSpinner ActiveControl
End Sub

Private Sub txtHISsystems_AfterUpdate()
   If Me.Tag <> "Activating" Then
        If txtADT.Visible Then Range("txtADT") = Me.txtHISsystems   '5/13/2019 was txtCCWSites
        ColorCode txtADT
   End If
End Sub

Private Sub txtICDreg_Change()
    ValidateDMS_PCI_ICD
End Sub

Private Sub txtPCIreg_Change()
    ValidateDMS_PCI_ICD
End Sub

Private Sub txtSTSreg_Change()
    ValidateDMS_PCI_ICD
End Sub

Private Sub txtAFIBreg_Change()
    ValidateDMS_PCI_ICD
End Sub

Private Sub ValidateDMS_PCI_ICD()
'REMOVED 8/28/19 when CF Registries & Migration removed from menus
'    If Me.Tag <> "Activating" Then
'        Dim TotalCFregistries As Integer 'Carry Forward Registries
'        TotalCFregistries = Int(txtPCIregCF) + Int(txtICDregCF) + Int(txtSTSregCF) + Int(txtAFIBregCF)
'        txtDMS_PCI_ICD = TotalCFregistries
'        ColorCode txtDMS_PCI_ICD
        
'Add new rule here: 5/29/18  'CarryForward only? 5/13/2019
'        Dim TotalPCI_ICDregistries As Integer 'PCI or ICD Registries
'        TotalPCI_ICDregistries = Int(txtPCIregCF) + Int(txtICDregCF) '+ Int(txtPCIreg) + Int(txtICDreg)
'        If TotalPCI_ICDregistries > 0 And txtDMSADTrpts = 0 Then txtDMSADTrpts = 1
'        ColorCode txtDMSADTrpts
'    End If
End Sub

Private Sub UserForm_Activate()
    Me.Caption = Me.Tag & "             Customer: " & CustomerCityState
'Validation
    GetFormattedControls Me
    ValidateCentUniv
    ValidateCustSuppliedSvrs
    ShowHideCASEbtn 'show/hide CASE note btn
    ShowHideExamModes
Me.Tag = "Activating"
    ValidateConfigTypes
Me.Tag = ""
    ColorCodeSelections Me
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
'    optCATH_None = True
    ClearControls frmUpgradeCCW
    ClearControls frmAddCCWLocation
    cmdAddCCWLoc.Enabled = False
    cmdUpgradeCCW.Enabled = False
'    txtCCWSites = 1
'    txtCCWSites_Change
End Sub

Sub ShowHideExamModes()
Dim modename As String
Dim isRptg As Boolean

'CRM Implant must be selected with EP
'Disable & select CRM Implant Reporting
With fraExamModules
    optImplant_None.Enabled = Not .optEP_Rep
    If optEP_Rep Then optImplant_Rep = True
End With

'Validate exam modes and their display
Dim ExamModes(10) As String
ExamModes(0) = "CATH"
ExamModes(1) = "IPV"
ExamModes(2) = "ECHO"
ExamModes(3) = "PedEcho"
ExamModes(4) = "NIPV"
ExamModes(5) = "Implant"
ExamModes(6) = "EP"
ExamModes(7) = "NucMed"
ExamModes(8) = "Followup"
ExamModes(9) = "StructHrt"
ExamModes(10) = "Stress"

For X = 0 To UBound(ExamModes)
    modename = ExamModes(X)
    isRptg = fraExamModules.Controls("opt" & modename & "_rep") 'is Physician Reporting selected?
    'Bold label if None is not selected
    fraExamModules.Controls("lbl" & modename).Font.Bold = (Not fraExamModules.Controls("opt" & modename & "_None"))
    'onsite support visible if not None
    fraExamModules.Controls("chk" & modename & "_onsite").Visible = (Not fraExamModules.Controls("opt" & modename & "_None"))
    'Show Sites to config reports
    fraExamModules.Controls("txt" & modename & "_Sites").Visible = isRptg 'show if Rptg only
    If Not fraExamModules.Controls("txt" & modename & "_Sites").Visible Then fraExamModules.Controls("txt" & modename & "_Sites") = 0
    fraExamModules.Controls("spin" & modename & "_Sites").Visible = isRptg 'show if Rptg only
Next X

If Tag = "Activating" Then Exit Sub

'UpdateInventoryCheckbox
ColorCodeSelections Me
End Sub

Sub DefaultSitesToConfigReports()
    
    If optCATH_Rep.Value = True Then
        txtCath_Sites.Enabled = True
        If txtCath_Sites > 1 Then
            txtCath_Sites = txtCCWSites
        Else
            txtCath_Sites.Value = 1
        End If
        chkCATH_onsite.Enabled = True
    Else
        txtCath_Sites.Enabled = False
        txtCath_Sites.Value = 0
    End If
End Sub

Private Sub SpinAdjustOnsiteDaysCCW_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAddedPMtime_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdvRptWriting1_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinAdvRptWriting2_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCustomCrystalReports_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinHQclinical_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMS_PCI_ICD_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinDMSdays_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinOnsiteFEdays_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinRemoteSpecWebinar_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinSysAdmin_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBaseFoundation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub chkCustomerHW_Change()
    ValidateCustSuppliedSvrs
End Sub

Private Sub ValidateCustSuppliedSvrs()
    Dim ShowHW As Integer
    ShowHW = Not chkCustomerHW
    
    txtLargeServer.Enabled = ShowHW
    SpinLargeServer.Enabled = ShowHW
    txtMediumServer.Enabled = ShowHW
    SpinMediumServer.Enabled = ShowHW
    txtSmallServer.Enabled = ShowHW
    SpinSmallServer.Enabled = ShowHW
    
    'Default servers if GE-supplied
    If ShowHW Then
        If Val(txtLargeServer) + Val(txtMediumServer) + Val(txtSmallServer) = 0 Then
            If optCCWLowVolCath Or optCCWLowVolEcho Then
                txtMediumServer = 1
            ElseIf Not optCCWNone Then txtLargeServer = 1
            End If
        End If
    Else
        'if Customer-supplied, then zero out
        txtLargeServer.Value = 0
        txtMediumServer.Value = 0
        txtSmallServer.Value = 0
    End If
    
    ColorCodeSelections Me
End Sub

Private Sub cmdSave_Click()
'AllOnsiteGoLive
    
'    Dim AllOnsiteGoLive As String
'    For Each ctl In Me.fraExamModules.Controls
'         If Right(ctl.Name, 6) = "onsite" Then AllOnsiteGoLive = AllOnsiteGoLive & ",--" & ctl.Name
'    Next ctl
'    Range("AllOnsiteGoLive").Formula = "=SUM(" & Mid(AllOnsiteGoLive, 2, 200) & ")"

    TotalExamModes
    TotalServers
    Dim TotalGEModalities As String
    Dim TotalNonGEModalities As String
    Dim Total_CCW_Rpt_Sites As String
    For Each ctl In fraModality.Controls
        If Left(ctl.Name, 3) = "txt" Then 'text boxes
            If Right(ctl.Name, 3) = "_GE" Then
                TotalGEModalities = TotalGEModalities & "," & ctl.Name
            Else
                TotalNonGEModalities = TotalNonGEModalities & "," & ctl.Name
            End If
        End If
    Next ctl
    For Each ctl In fraExamModules.Controls
        If Left(ctl.Name, 3) = "txt" And Right(ctl.Name, 6) = "_Sites" Then
            Total_CCW_Rpt_Sites = Total_CCW_Rpt_Sites & "," & ctl.Name
        End If
    Next ctl
    
    Range("TotalGEModalities").Formula = "=SUM(" & Mid(TotalGEModalities, 2, 200) & ")"
    Range("TotalNonGEModalities").Formula = "=SUM(" & Mid(TotalNonGEModalities, 2, 200) & ")"
    Range("Total_CCW_Rpt_Sites").Formula = "=SUM(" & Mid(Total_CCW_Rpt_Sites, 2, 200) & ")"
    
    On Error Resume Next
    Range("CCW7_24in_Monitors").Offset(0, 1) = (Range("optUpgradeCCW") And Range("strUpgCCWtoVersion") > "7.")
    CombineOptionalNotes
    On Error GoTo 0
        
    SetFormattedControls Me 'pct, dat, cur
    Hide

End Sub

Sub TotalExamModes()
    Dim Total_CCW_PC_Modes As String
    Dim Total_CCW_Rep_Modes As String
    For Each ctl In fraExamModules.Controls
        If Left(ctl.Name, 3) = "opt" Then 'option buttons
            Select Case Right(ctl.Name, 3)
            Case "_PC"
                Total_CCW_PC_Modes = Total_CCW_PC_Modes & ",--" & ctl.Name
            Case "Rep"
                Total_CCW_Rep_Modes = Total_CCW_Rep_Modes & ",--" & ctl.Name
            End Select
        End If
    Next ctl
    Range("Total_CCW_PC_Modes").Formula = "=SUM(" & Mid(Total_CCW_PC_Modes, 2, 200) & ")"
    Range("Total_CCW_Rep_Modes").Formula = "=SUM(" & Mid(Total_CCW_Rep_Modes, 2, 200) & ")"
End Sub

Sub TotalServers()
    If Not Me.chkCustomerHW And Val(Me.txtMediumServer) + Val(Me.txtLargeServer) = 0 And Not Me.optCCWNone Then
        MsgBox "Customer-supplied Hardware is NOT selected " & Chr(10) & _
               "But no GE supplied servers were selected." & Chr(10) & _
                "One Server will be selected automatically for you now.", vbQuestion, "Resolve GE-supplied server quantity"
        ValidateCustSuppliedSvrs
        Pause 1
    End If
            
End Sub

Sub TriggerRptSites(modename As String)
'If clicking, not initializing form, select 1 site by default for Phys Rptg
    If fraExamModules.Controls("opt" & modename & "_Rep") Then
            fraExamModules.Controls("txt" & modename & "_Sites") = 1
    Else
            fraExamModules.Controls("txt" & modename & "_Sites") = 0
    End If
End Sub


Private Sub optCATH_none_Change()
    ShowHideExamModes
End Sub

Private Sub optCATH_Rep_Click()
    TriggerRptSites "CATH"
    ShowHideExamModes
End Sub

Private Sub optCATH_PC_Change()
    ShowHideExamModes
End Sub

Private Sub optEcho_None_Change()
    ShowHideExamModes
End Sub

Private Sub optEcho_Rep_Click()
    TriggerRptSites "Echo"
    ShowHideExamModes
End Sub

Private Sub optEcho_PC_Change()
    ShowHideExamModes
End Sub

Private Sub optEP_None_Change()
    ShowHideExamModes
End Sub

Private Sub optEP_PC_Change()
    ShowHideExamModes
End Sub

Private Sub optImplant_None_Change()
    ShowHideExamModes
End Sub

Private Sub optImplant_Rep_Click()
    TriggerRptSites "Implant"
    ShowHideExamModes
End Sub

Private Sub optImplant_PC_Change()
    ShowHideExamModes
End Sub

Private Sub optIPV_None_Change()
    ShowHideExamModes
End Sub

Private Sub optIPV_Rep_Click()
   TriggerRptSites "IPV"
    ShowHideExamModes
End Sub

Private Sub optNIPV_None_Change()
    ShowHideExamModes
End Sub

Private Sub optNIPV_Rep_Click()
   TriggerRptSites "NIPV"
    ShowHideExamModes
End Sub

Private Sub optNIPV_PC_Change()
    ShowHideExamModes
End Sub

Private Sub optNucMed_None_Change()
    ShowHideExamModes
End Sub

Private Sub optNucMed_Rep_Click()
    TriggerRptSites "NucMed"
    ShowHideExamModes
End Sub

Private Sub optStructHrt_Rep_Click()
    TriggerRptSites "StructHrt"
    ShowHideExamModes
End Sub

Private Sub optPedEcho_None_Click()
    ShowHideExamModes
    'chkBostonZscores = (Not optPedEcho_None)
    txtBostonZscores = Abs(Not optPedEcho_None) * txtCCWSites
End Sub

Private Sub optPedEcho_Rep_Click()
    TriggerRptSites "PedEcho"
    ShowHideExamModes
    'chkBostonZscores = (Not optPedEcho_None)
    txtBostonZscores = Abs(Not optPedEcho_None) * txtCCWSites
End Sub

Private Sub optPedEcho_PC_Click()
    ShowHideExamModes
    'chkBostonZscores = (Not optPedEcho_None)
    txtBostonZscores = Abs(Not optPedEcho_None) * txtCCWSites
End Sub

Private Sub SpinADT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBarcodeReader_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinBarcodeReaderBlue_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinBarcodeReaderWireless_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBillingInt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinBillingSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCath_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCath_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinClinicalSysAdm_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCrystalRpt1_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCrystalRpt10_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCrystalRpt5_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinDICOMimage_GE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinDICOMimage_NonGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinDICOMxray_GE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinDICOMxray_NONGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinEcho_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinEcho_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinEP_GE_Change()
   IncrSpinner Me.ActiveControl
   UpdateMacLabService
End Sub

Private Sub spinEP_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinEP_NonGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinEP_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinHemo_GE_Change()
   IncrSpinner Me.ActiveControl
   UpdateMacLabService
End Sub

Private Sub spinHemo_NonGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinICDreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinImplant_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinImplant_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinInvSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinIPV_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinIPV_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinITSysAdm_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMatlMgmt_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinNIPV_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinNIPV_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinNonDICOM_NonGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinNucMed_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinNucMed_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinOrdersIN_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinPACS_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinPCIreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinPDFout_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinPedEcho_MT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinPedEcho_Sites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinRegistrySupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinResultsOUT_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinSchedSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinSites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSTSreg_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinTestInterfaceServers_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinUltrasound_GE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinUltrasound_NonGE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinWkstnInteg_GE_Change()
   IncrSpinner Me.ActiveControl
End Sub

Private Sub spinCath_SiteNum_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub spinDMSremoteServerQty_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMaclabOut_Change()
    IncrSpinner Me.ActiveControl
End Sub


Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmCCWINV"
Attribute VB_Base = "0{70B1ED5A-63BA-45D0-8396-C2C1A38CB072}{496BF2D2-4B47-4B9B-851E-0C1732D0CC2B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim TotalCFregistries As Integer

Private Sub chkCalculateMacLabDays_Click()
    If chkCalculateMacLabDays Then TotalConcurrentUsers
End Sub

Private Sub chkInv_CUnivCCW_Click()
    'Hide other training?
End Sub

Private Sub chkInv_Results_Click()
    ShowInterfaceCheckboxes chkInv_Results
End Sub

Private Sub chkInv_SameDeploy1_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy2_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy3_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy4_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy6_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy7_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy8_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_SameDeploy9_Click()
    ShowAddlServiceWarning
End Sub

Private Sub chkInv_XML_Click()
    ShowInterfaceCheckboxes chkInv_XML
End Sub

Private Sub cmbInv_HIS0_Change()
    ShowAddlServiceWarning
End Sub

Sub ShowAddlServiceWarning()
    If HoldUpdates Then Exit Sub
    lblAddlDaysWarning.Visible = False
    For i = 1 To 9
        If Me.Controls("cmbInv_HIS" & i).Visible Then
            If Me.Controls("cmbInv_HIS" & i) > 1 Or Me.Controls("chkInv_SameDeploy" & i) Then
                lblAddlDaysWarning.Visible = True
                Exit Sub
            Else
                lblAddlDaysWarning.Visible = False
            End If
        End If
    Next i
End Sub

Sub StoreHISIDinTip(i As Integer)
    If HoldUpdates Then Exit Sub
    With Controls("cmbInv_HIS" & i)
        .ControlTipText = Format(.Value, "#")
    End With
End Sub

Private Sub cmbInv_HIS1_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS2_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS3_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS4_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS5_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS6_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS7_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS8_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmbInv_HIS9_Change()
    ShowAddlServiceWarning
End Sub

Private Sub cmdHISlist_Click()
    OpenForm "frmHISlist"
End Sub

Private Sub cmdSave_Click()
'Store vars that are also on other menus before clearing out controls if not CCWINV...
    var1 = pctDiscount_CCW
    var2 = pctDiscount_CCWService
    var3 = chkeDelivery
    'Clear all
    If Not Me.chkCCWInv Then ClearControls Me
    '...then put them back
    Range("pctDiscount_CCW") = var1
    Range("pctDiscount_CCWService") = var2
    Range("chkeDelivery") = var3
    
    'Save totals to VM sheet
    If chkCopyTotalsToVM Then
        Range("VM_AmtStudies") = Int(txtInv_CathVolTot) + Int(txtInv_EPVolTot)
        For i = 0 To 9
            Range("VM_SiteNames")(i + 1) = Controls("strInv_Site" & i)
            Range("VM_ConcurrentUsers")(i + 1) = Int(Controls("txtInv_CCusers" & i))
            Range("VM_OrgDeviceCounts")(i + 1) = Int(Controls("txtInv_CCusers" & i)) + Int(txtInv_DICOM_MWL)
        Next i
    End If
    Hide
End Sub

Private Sub cmdSvcQuote_Click()
    RequestServiceQuoteByMail
End Sub

Private Sub pctDiscount_CCW_AfterUpdate()
    TxtToPct pctDiscount_CCW, MaxCCWSoftwareDiscount
End Sub

Private Sub pctDiscount_CCWService_AfterUpdate()
    TxtToPct pctDiscount_CCWService, MaxCCWServiceDiscount
End Sub

Private Sub SpinBarcodeReader_Change()
    IncrSpinner SpinBarcodeReader
End Sub

Private Sub SpinInv_DMSADTrpts_Change()
    IncrSpinner SpinInv_DMSADTrpts
End Sub

Private Sub SpinInv_DMSdays_Change()
    IncrSpinner SpinInv_DMSdays
End Sub

Private Sub SpinInv_MacLabIntegrationA_GE_Change()
    IncrSpinner SpinInv_MacLabIntegrationA_GE
End Sub

Private Sub SpinInv_Sites_SpinUp()
    'for additional new site, check all interfaces based on top level
    For Each ctl In Me.Controls
        If TypeName(ctl) = "CheckBox" Then
            If ctl.GroupName = "InterfaceParents" Then
                Range(ctl.Name & Int(txtInv_Sites) - 1) = ctl
            End If
        End If
    Next ctl
End Sub

Private Sub SpinInv_Sites_Change()
    IncrSpinner Me.ActiveControl
    HoldUpdates = True
        ShowHideSiteRows
    HoldUpdates = False
    TotalEPCathVolumes
    TotalConcurrentUsers
    ColorCodeSelections Me
End Sub

Sub ShowHideSiteRows()
    'For each Pg in Tabs, hide controls with Int() > SiteCount
    'Zero out the values while you're at it.
    If chkCCWInv And Me.txtInv_Sites < 2 Then _
        Me.txtInv_Sites = "2" 'Set default # of sites if EP or Cath
    Range("chkInv_ADT") = Me.chkCCWInv
    'HoldUpdates = False 'has to be set to true to allow next step to run
    ShowInterfaceCheckboxes Me.chkInv_ADT
    SiteCount = Int(txtInv_Sites)
    
    For Each pg In Me.tabInv_Sites.Pages
        Select Case pg.Caption
        Case "Options": GoTo NextPage
        Case Else
            For Each ctl In pg.Controls
                RowNum = Right(ctl.Name, 1)
                If TypeName(ctl) <> "Label" And IsNumeric(RowNum) Then
                    'Hide or show
                    ctl.Visible = (Int(RowNum) < SiteCount) 'Hide if no Site
                    HideShowInterfaceCheckbox ctl
                    HideEPCathSpinner ctl
                    
                    'Reset values of hidden controls
                    If Not ctl.Visible Then
                        Select Case Left(ctl.Name, 3)
                            Case "Spi", "txt": ctl.Value = 0
                            Case "str"
                                If Left(ctl.Tag, 8) = "Default:" Then
                                   If ctl = "" Then Range(ctl.Name) = Mid(ctl.Tag, 9, 100)
                                End If
                            Case "chk": ctl.Value = False
                            Case Else
                        End Select
                    End If
                    
                End If
            Next ctl
        End Select
NextPage:
    Next pg
    
    TotalEPCathVolumes
    TotalConcurrentUsers
End Sub
                
Private Sub HideShowInterfaceCheckbox(ctl As Control)
'Hide if checkbox, visible, in group, top box not selected
    If ctl.Visible Then
        If TypeName(ctl) = "CheckBox" Then 'GroupName is only available for certain types
            If ctl.GroupName = "Interfaces" Then
                ctl.Visible = Controls(Left(ctl.Name, Len(ctl.Name) - 1))
            End If
        End If
    End If
End Sub
Private Sub HideEPCathSpinner(ctl As Control)
'Hide if spinner, visible, in group, top box not selected
    If ctl.Visible Then
        Select Case ctl.Tag 'Can't use GroupName for textboxes, spinners so use Tag
            Case "CathVolume": ctl.Visible = Me.chkInv_Cath
            Case "EPVolume": ctl.Visible = Me.chkInv_EP
        End Select
    End If
End Sub
Private Sub HideEPCathVolumes()
'Hide interface checkboxes if not selected above Multipage control
    For Each ctl In Me.tabInv_Sites.Pages("pgVolume").Controls
        HideEPCathSpinner ctl
    Next ctl
End Sub
                
Sub HideInterfaceRows()
'Hide interface checkboxes if not selected above Multipage control
    For Each ctl In Me.tabInv_Sites.Pages("pgInterfaces").Controls
        HideShowInterfaceCheckbox ctl
    Next ctl
End Sub

Private Sub SpinMacLabIntegrationA_GE_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinMacLabIntegrationA_GE_SpinDown()
    Me.chkCalculateMacLabDays = False
End Sub

Private Sub SpinMacLabIntegrationA_GE_SpinUp()
    Me.chkCalculateMacLabDays = False
End Sub

Private Sub tabInv_Sites_Change()
    ShowAddlServiceWarning
End Sub

Private Sub tabInv_Sites_DblClick(ByVal Index As Long, ByVal Cancel As MSForms.ReturnBoolean)
    FilterItems
End Sub

Private Sub txtInv_IntDays0_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays1_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays2_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays3_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays4_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays5_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays6_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays7_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays8_Change()
    TotalInterfaceDays
End Sub

Private Sub txtInv_IntDays9_Change()
    TotalInterfaceDays
End Sub

Private Sub ValidateDMS_PCI_ICD()
'REMOVED 8/28/19 when CF Registries & Migration removed from menus
'    If Me.Tag <> "Activating" Then
'        Dim TotalCFregistries As Integer 'Carry Forward Registries
'        TotalCFregistries = Int(Me.txtInv_PCIregCF) + Int(txtInv_ICDregCF) + Int(txtInv_STSregCF) + Int(txtInv_AFIBregCF)
'        txtInv_DMS_PCI_ICD = TotalCFregistries
'        ColorCode txtInv_DMS_PCI_ICD
''Add new rule here: 5/29/18
'        Dim TotalPCI_ICDregistries As Integer 'PCI or ICD Registries
'        TotalPCI_ICDregistries = Int(txtInv_PCIregCF) + Int(txtInv_ICDregCF) + Int(txtInv_PCIreg) + Int(txtInv_ICDreg)
'        If TotalPCI_ICDregistries > 0 And txtInv_DMSADTrpts = 0 Then txtInv_DMSADTrpts = 1
'        ColorCode txtInv_DMSADTrpts
'    End If
End Sub

Private Sub txtInv_MacLabIntegrationA_GE_Change()
    ColorCode txtInv_MacLabIntegrationA_GE
End Sub

Private Sub UserForm_Activate()
    Me.Caption = Me.Tag & "             Customer: " & CustomerCityState
    HoldUpdates = True
    GetFormattedControls Me
    GetLegacyData
'    tabInv_Sites.Enabled = False
    ValidateInvForm
    TotalInterfaceDays
    ShowAddlServiceWarning
    HoldUpdates = False
    ColorCodeSelections Me
'    tabInv_Sites.Enabled = True

End Sub

Sub GetLegacyData()
    
    If Not RangeExists("txtInv_DMSADTrpts") Then 'new item on 5/17/2018, didn't exist before
        MsgBox "This workbook may be out of date. The CCWINV Options tab has changed." & Chr(10) & _
            "Copy to New Quote and verify the selections."
        With Me
        If chkCCWInv Then
            .chkInv_CUnivCCW = Range("chkCUnivCCW").Value: ActiveWorkbook.Names.Add Name:="chkInv_CUnivCCW", RefersTo:="chkCUnivCCW"
            .txtInv_AdvRptWriting1 = Range("txtAdvRptWriting1").Value
            .txtInv_AdvRptWriting2 = Range("txtAdvRptWriting2").Value
            .txtInv_AdvStatsClass = Range("txtAdvStatsClass").Value
            .txtInv_BillingSupUser = Range("txtBillingSupUser").Value
'            .txtInv_DMS_PCI_ICD = Range("txtDMS_PCI_ICD").Value
            .txtInv_DMSADTrpts = Range("txtDMSADTrpts").Value
            .txtInv_DMSdays = Range("txtDMSdays").Value
        End If
        End With
    End If

End Sub

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    FilterItems
End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub

Private Sub chkInv_EP_AfterUpdate()
    ValidateInvForm
End Sub

Private Sub chkInv_Cath_AfterUpdate()
    ValidateInvForm
End Sub

Private Sub ValidateInvForm()
    Range("chkCCWInv") = (chkInv_EP Or chkInv_Cath)
    'Hide all controls if no EP or Cath
    For Each ctrl In Me.Controls
        ctrl.Visible = chkCCWInv
    Next ctrl
    
    'Always show these controls
    lblSelectOne.Visible = True
    chkInv_EP.Visible = True
    chkInv_Cath.Visible = True
    pctDiscount_CCW.Visible = True
    pctDiscount_CCWService.Visible = True
    cmdSave.Visible = True
    cmdClear.Visible = True
    
    ShowHideSiteRows
    ColorCodeSelections Me
End Sub

Private Sub cmdClear_Click()
'Only for this tab
    ClearControls Me
    ValidateInvForm
End Sub

Private Sub TotalConcurrentUsers()
    If HoldUpdates Then Exit Sub
    Dim NewTotal As Integer
    Dim InstalledTotal As Integer
    Dim pg As Object
    Set pg = tabInv_Sites.Pages("pgVolume")
    
    Dim ColNames(5) As String
    ColNames(0) = "txtInv_MLnew"
    ColNames(1) = "txtInv_MLexist"
    ColNames(2) = "txtInv_CLnew"
    ColNames(3) = "txtInv_CLexist"
    ColNames(4) = "txtInv_NWnew"
    ColNames(5) = "txtInv_NWexist"

    InstalledTotal = 0
    
    'For each name in array, get total for row number
    For i = 0 To 9
        'Reset row total
        NewTotal = 0
        For Each col In ColNames
            'if control is visible, add it to total
            Set ctrl = pg.Controls(col & i)
            If ctrl.Visible Then
                NewTotal = NewTotal + ctrl
                InstalledTotal = InstalledTotal + Abs(InStr(ctrl.Name, "exist") > 0) * ctrl
            End If
        Next col
        Controls("txtInv_CCusers" & i) = NewTotal
        ColorCode Controls("txtInv_CCusers" & i)
        GrandTotal = GrandTotal + NewTotal
    Next i
    txtInv_CCusersTot = GrandTotal
    ColorCode txtInv_CCusersTot
    If Me.chkCalculateMacLabDays Then Range("txtInv_MacLabIntegrationA_GE") = InstalledTotal
    ColorCode Me.txtInv_MacLabIntegrationA_GE
End Sub

Private Sub TotalEPCathVolumes()
    If HoldUpdates Then Exit Sub
    
    Dim NewTotal As Integer
    Dim pg As Object
    Set pg = tabInv_Sites.Pages("pgVolume")
    
    'CATH
    NewTotal = 0
    If Me.chkInv_Cath Then
        For i = 0 To 9
            'if control is visible, add it's value to total
            If pg.Controls("txtInv_CathVol" & i).Visible Then
                NewTotal = NewTotal + pg.Controls("SpinInv_CathVol" & i)
            End If
        Next i
    End If
    txtInv_CathVolTot = NewTotal
    ColorCode txtInv_CathVolTot
    
    'EP
    NewTotal = 0
    If Me.chkInv_EP Then
        For i = 0 To 9
            'if control is visible, add it's value to total
            If pg.Controls("txtInv_EPVol" & i).Visible Then
                NewTotal = NewTotal + pg.Controls("SpinInv_EPVol" & i)
            End If
        Next i
    End If
    txtInv_EPVolTot = NewTotal
    ColorCode txtInv_EPVolTot
End Sub

Private Sub TotalInterfaceDays()
    If HoldUpdates Then Exit Sub
    Dim pg As Object
    Set pg = tabInv_Sites.Pages("pgInterfaces")
    PrimaryTotal = 0
    SecondaryTotal = 0
'Count up hours for Primary HIS, 2 per Interface (+1 for Meds)
    For Each ctl In Me.Controls
      If TypeName(ctl) = "CheckBox" Then
        If ctl.GroupName = "InterfaceParents" Then
            'Count 1 towards Primary Interface days
            PrimaryTotal = PrimaryTotal + Abs(ctl)
            'If a site is delayed, count number of interfaces
        End If
      End If
    Next ctl
    PrimaryTotal = (PrimaryTotal * 2) + Abs(chkInv_Meds) '2 days each, plus 1 extra for Meds
    txtInv_IntDays = PrimaryTotal

'Additional Days
    For i = 0 To 9
        SecondaryTotal = SecondaryTotal + Val(pg.Controls("txtInv_IntDays" & i))
    Next i
    txtInv_IntDaysTot = PrimaryTotal + SecondaryTotal
'    ColorCode txtInv_InterfaceTotal
End Sub

Sub ShowInterfaceCheckboxes(TopCheckBox As Control) 'when checkbox being clicked at top of form
    If HoldUpdates = True Then Exit Sub
    HoldUpdates = True 'while we modify values, don't run code behind each control
    Dim ctl As Control
    
    'Unselect or select corresponding checkboxes on visible rows in Site Table
    CtlName = "chk" & Mid(TopCheckBox.Name, 4)
    SelectedIntCount = 0
    For i = 0 To 9
        Set ctl = tabInv_Sites.Pages("pgInterfaces").Controls(CtlName & i)
        'Me.txtInv_IntDays0
        If i < Int(txtInv_Sites) Then
            ctl.Visible = TopCheckBox
            ctl = TopCheckBox
        Else
            ctl = False
            ctl.Visible = False
        End If
    Next i
    HoldUpdates = False
    
    TotalInterfaceDays

End Sub

Private Sub chkInv_GEPACS_Click()
    ShowInterfaceCheckboxes chkInv_GEPACS
End Sub

Private Sub chkInv_Meds_Click()
    ShowInterfaceCheckboxes chkInv_Meds
End Sub

Private Sub chkInv_OrdersIn_Change()
    ShowInterfaceCheckboxes chkInv_OrdersIn
End Sub

Private Sub chkInv_Charges_Click()
    ShowInterfaceCheckboxes chkInv_Charges
End Sub

Private Sub chkInv_CRM_Click()
    ShowInterfaceCheckboxes chkInv_CRM
End Sub

Private Sub chkInv_OrdersOut_Click()
    ShowInterfaceCheckboxes chkInv_OrdersOut
End Sub

Private Sub chkInv_PDFOut_Click()
    ShowInterfaceCheckboxes chkInv_PDFOut
End Sub

Private Sub chkInv_BiDirInv_Click()
    ShowInterfaceCheckboxes chkInv_BiDirInv
End Sub

Private Sub chkInv_Lab_Click()
    ShowInterfaceCheckboxes chkInv_Lab
End Sub

Private Sub SpinInv_CathVol0_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol0_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol1_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol1_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol2_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol2_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol3_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol3_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol4_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol4_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol5_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol5_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol6_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol6_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol7_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol7_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol8_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol8_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_EPvol9_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_CathVol9_Change()
    IncrSpinner Me.ActiveControl
    TotalEPCathVolumes
End Sub
Private Sub SpinInv_MLnew0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLnew9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLexist9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWexist9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_MLexist9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_CLnew9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew0_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew1_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew2_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew3_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew4_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew5_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew6_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew7_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew8_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub
Private Sub SpinInv_NWnew9_Change()
    IncrSpinner Me.ActiveControl
    TotalConcurrentUsers
End Sub

Private Sub SpinInv_XtraDaysTraining_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_AdvRptWriting1_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_AdvRptWriting2_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_AdvStatsClass_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_BillingSupUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_DICOM_MWL_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_Workflow_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinInv_RemoteSuperUser_Change()
    IncrSpinner Me.ActiveControl
End Sub

'STRING FIELDS GET COLOR CODED
Private Sub strInv_SiteDesc0_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site0_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site2_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site3_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site8_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site5_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site6_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site7_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site9_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_Site4_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc2_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc5_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc3_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc4_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc8_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc6_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc7_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub
Private Sub strInv_SiteDesc9_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    ColorCode ActiveControl
End Sub

'** TOTAL COLUMNS ****
Attribute VB_Name = "frmCustomer"
Attribute VB_Base = "0{0C96CD49-7C1F-44BB-95B2-052AF2950791}{153E2536-F79E-4113-B520-FD4CFC80EE92}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim repfax As String

Private Sub cmbGE_Rep_Name_Change()
If Tag = "Activating" Then Exit Sub
strGE_Rep_Phone = ""
strGE_Rep_Email = ""
On Error Resume Next
    strGE_Rep_Phone = WorksheetFunction.VLookup(cmbGE_Rep_Name, Range("CVIT_Reps"), 2, False)
    strGE_Rep_Email = WorksheetFunction.VLookup(cmbGE_Rep_Name, Range("CVIT_Reps"), 3, False)
On Error GoTo 0
End Sub

Private Sub cmdCopydata_Click()
    bCopying = True
    cmdSave_Click
    'copydata
    Dim NoBk As Workbook
    CopyData ActiveWorkbook, NoBk, False, False
End Sub

Private Sub cmdNotes_Click()
    cmdSave_Click
    Unload Me
    ConfigNotes
End Sub

Private Sub cmdSave_Click()
    SetFormattedControls Me 'pct,dat,cur
    On Error Resume Next
        Sheets("Apttus").Rows("7:7").EntireRow.AutoFit
    On Error GoTo 0
    Unload Me
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
End Sub

Private Sub cmdContact1_Click()
    frmImportContact.ContactNum = 1
    frmImportContact.Show
End Sub
Private Sub cmdContact2_Click()
    frmImportContact.ContactNum = 2
    frmImportContact.Show
End Sub
Private Sub cmdContact3_Click()
    frmImportContact.ContactNum = 3
    frmImportContact.Show
End Sub
Private Sub cmdContact4_Click()
    frmImportContact.ContactNum = 4
    frmImportContact.Show
End Sub
Private Sub cmdSaveRepInfo_Click()
    SaveRepInfo
End Sub

Sub SaveRepInfo()
'On Error Resume Next
    
    SaveSetting "CVITQuote", "RepInfo", "GE_Rep_Name", Controls("cmbGE_Rep_Name").Value
    SaveSetting "CVITQuote", "RepInfo", "GE_Rep_Phone", Controls("strGE_Rep_Phone").Value
    SaveSetting "CVITQuote", "RepInfo", "GE_Rep_Email", Controls("strGE_Rep_Email").Value
    
    SaveSetting "CVITQuote", "RepInfo", "Inside_Rep_Name", Controls("cmbInside_Rep_Name").Value
    SaveSetting "CVITQuote", "RepInfo", "Inside_Rep_Phone", Controls("strInside_Rep_Phone").Value
    SaveSetting "CVITQuote", "RepInfo", "Inside_Rep_Email", Controls("strInside_Rep_Email").Value
    
    SaveSetting "CVITQuote", "RepInfo", "DCAR_Rep_Name", Controls("cmbDCAR_Rep_Name").Value
    SaveSetting "CVITQuote", "RepInfo", "DCAR_Rep_Phone", Controls("strDCAR_Rep_Phone").Value
    SaveSetting "CVITQuote", "RepInfo", "DCAR_Rep_Email", Controls("strDCAR_Rep_Email").Value
    
    SaveSetting "CVITQuote", "RepInfo", "PM_Name", Controls("cmbPM_Rep_Name").Value
    SaveSetting "CVITQuote", "RepInfo", "PM_Phone", Controls("strPM_Rep_Phone").Value
    SaveSetting "CVITQuote", "RepInfo", "PM_Email", Controls("strPM_Rep_Email").Value
End Sub


Private Sub SpinRevision_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtCVIT_Mgr_Name_Change()
If Tag = "Activating" Then Exit Sub
txtCVIT_Mgr_Phone = ""
txtCVIT_Mgr_Email = ""
On Error Resume Next
    txtCVIT_Mgr_Phone = WorksheetFunction.VLookup(txtCVIT_Mgr_Name, Range("CVITmgrs"), 2, False)
    txtCVIT_Mgr_Email = WorksheetFunction.VLookup(txtCVIT_Mgr_Name, Range("CVITmgrs"), 3, False)
End Sub

Private Sub txtGE_Rep_Name_Change()
If Tag = "Activating" Then Exit Sub
txtGE_Rep_Phone = ""
txtGE_Rep_Email = ""
On Error Resume Next
    txtGE_Rep_Phone = WorksheetFunction.VLookup(txtGE_Rep_Name, Range("CVITreps"), 2, False)
    txtGE_Rep_Email = WorksheetFunction.VLookup(txtGE_Rep_Name, Range("CVITreps"), 3, False)
End Sub

Private Sub txtInside_Rep_Name_Change()
If Tag = "Activating" Then Exit Sub
txtInside_Rep_Phone = ""
txtInside_Rep_Email = ""
On Error Resume Next
    txtInside_Rep_Phone = WorksheetFunction.VLookup(txtInside_Rep_Name, Range("InsideReps"), 2, False)
    txtInside_Rep_Email = WorksheetFunction.VLookup(txtInside_Rep_Name, Range("InsideReps"), 3, False)
End Sub

Sub txtDCAR_Rep_Name_Change()
If Tag = "Activating" Then Exit Sub
txtDCAR_Rep_Phone = ""
txtDCAR_Rep_Email = ""
On Error Resume Next
    txtDCAR_Rep_Phone = WorksheetFunction.VLookup(txtDCAR_Rep_Name, Range("DCARreps"), 2, False)
    txtDCAR_Rep_Email = WorksheetFunction.VLookup(txtDCAR_Rep_Name, Range("DCARreps"), 3, False)
End Sub

Private Sub txtPM_Rep_Name_Change()
If Tag = "Activating" Then Exit Sub
txtPM_Rep_Phone = ""
txtPM_Rep_Email = ""
On Error Resume Next
    txtPM_Rep_Phone = WorksheetFunction.VLookup(txtPM_Rep_Name, Range("PMreps"), 2, False)
    txtPM_Rep_Email = WorksheetFunction.VLookup(txtPM_Rep_Name, Range("PMreps"), 3, False)
End Sub

Private Sub txtRevision_Change()
    txtQuote_Date = Date
End Sub

Private Sub UserForm_Activate()
Tag = "Activating"
GetFormattedControls Me 'pct,dat,cur
Repaint
On Error Resume Next
If strQuote_Number = "" Then
    If cmbCVIT_Rep_Name = "" Then
        Range("cmbCVIT_Rep_Name") = GetSetting("CVITQuote", "RepInfo", "strCVIT_Rep_Name")
        Range("strCVIT_Rep_Phone") = GetSetting("CVITQuote", "RepInfo", "strCVIT_Rep_Phone")
        Range("strCVIT_Rep_Email") = GetSetting("CVITQuote", "RepInfo", "strCVIT_Rep_Email")
    End If
End If
On Error GoTo 0
If datQuote_Date = "" Then datQuote_Date = Date
Tag = "Done"

End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub



Attribute VB_Name = "frmEA"
Attribute VB_Base = "0{948FCB19-F1B5-483A-9832-2DEADA44C8BF}{18638938-831D-4192-9E68-72EB6179B5D8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub chkCCACT100_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkCCIBaseEAUpgrade_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkCCIConnectstoRADCPACSEA_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkCustSQL_CCI_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkEARCA201_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkEARCA202_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkEAupgrNoSWOP_Click()
    If chkEAupgrNoSWOP And Range("txtFEDaysAfter") = 0 Then Range("txtFEDaysAfter") = 1  'July 10 2019
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
End Sub

Private Sub cmdSave_Click()
    Hide
End Sub

Private Sub pctDiscount_CCIService_AfterUpdate()
    TxtToPct pctDiscount_CCIService, MaxCCIServiceDiscount
End Sub

Private Sub Spin25kLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin5kLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEAShadowSW_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEAVirtualArchive_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEntBroadLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinHL7toSR_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinILMgreater250k_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinILMLess250k_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinILMlic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinLoadBalancing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinPIXIntegration_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSQLserver2016_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSQLserver2core_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinTagMorphing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinWindowsServerSW_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinXDSDeptAddLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinXDSLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtImages_AfterUpdate()
    ColorCode txtImages
End Sub

Private Sub txtSQLserver2core_Change()
    ColorCode txtSQLserver2core
End Sub

Private Sub txtWindowsServerSW_Change()
    ColorCode txtWindowsServerSW
End Sub

Private Sub UserForm_Activate()
    GetFormattedControls Me
    ColorCodeSelections Me
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub


Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmHISlist"
Attribute VB_Base = "0{B28605B1-77E6-4C68-A770-9E8BA54B9E75}{117AB572-71E5-4109-BFB8-D1426A81D4D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdSave_Click()
'for each Site row, update HIS sys name on CCI-Inv menu
    Hide
End Sub

Private Sub lstHIS_Systems_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim newName As String
    oldName = lstHIS_Systems
    If IsNull(oldName) Then oldName = ""
    newName = InputBox("Modify HIS System Name", "Edit HIS System", oldName)
    
    If StrPtr(newName) = 0 Then
        'User hit Cancel...don't change anything
    Else
        If lstHIS_Systems.ListIndex = -1 Then
            ItemCount = WorksheetFunction.CountA(Range("HIS_Systems").Columns(1))
            Range("HIS_Systems")(ItemCount + 1, 1) = newName
            Me.lstHIS_Systems.Selected(ItemCount) = True
        Else
            ItemCount = lstHIS_Systems.ListIndex
            Range("HIS_Systems")(ItemCount + 1, 1) = newName
            Me.lstHIS_Systems.Selected(ItemCount) = True
        End If
    End If
End Sub

Attribute VB_Name = "frmNotes"
Attribute VB_Base = "0{97D7F1CF-B594-4078-9EA7-959D486C4800}{418681E3-4807-48DC-A5F0-20067E761FE0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdCopydata_Click()
    bCopying = True
    cmdSave_Click
    
    Dim NoBk As Workbook
    CopyData ActiveWorkbook, NoBk, False, False
    Debug.Print "Done with CopyData " & Time()
End Sub

Private Sub cmdSave_Click()
    RemoveBlankLines
    SetFormattedControls Me 'pct,dat,cur
    SaveOptionalNotes
    Sheets("Apttus").Rows("7:7").EntireRow.AutoFit
    Hide
End Sub

Sub RemoveBlankLines()
    findText = Chr(10)
    Debug.Print Replace(strProjectGoals, findText, "")
    Debug.Print Replace(strInsideIsPrimary, findText, "")
End Sub

Private Sub UserForm_Activate()
    Tag = "Activating"
    X = 0
    GetFormattedControls Me 'pct,dat,cur
    With Me.lstOptionalNotes
        For lItem = 0 To .ListCount - 1
            .Selected(lItem) = Range("Optional_Project_Notes").Cells(1, 1).Offset(lItem, 2)
        Next
    End With
    
    Tag = "Done"
End Sub

Sub SaveOptionalNotes()
    With Me.lstOptionalNotes
        For lItem = 0 To .ListCount - 1
            Range("Optional_Project_Notes").Cells(1, 1).Offset(lItem, 2) = .Selected(lItem)
        Next
    End With
    CombineOptionalNotes 'from ranges not controls, reusable
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub


Attribute VB_Name = "frmSOW"
Attribute VB_Base = "0{BA69F259-E6D0-4331-86E2-20432721FBCC}{451B9722-1B97-45FA-AD61-075049227ED8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdSave_Click()
    Hide
End Sub

Private Sub cmdSOW_Click()
    Hide
    CreateSOW
End Sub
Attribute VB_Name = "frmServerSizing"
Attribute VB_Base = "0{D01E0477-0C62-4E4B-BBFD-9425FFB424AF}{36354A21-A7EF-40A8-AFA4-76BA9461D6D4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdClear_Click()
    ClearControls Me
End Sub

Private Sub cmdClose_Click()
    SetFormattedControls Me
    Hide
End Sub

Private Sub cmdSave_Click()
    Range("txtUVWebNodes").Formula = txtTotalWebNodes
    SetFormattedControls Me
    Hide
End Sub

Private Sub SpinSS_CCI_ConcUsers1_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "1"
End Sub

Sub SS_CalculateTotals(RowNum As String)
    If HoldUpdates Then Exit Sub 'If clearing form don't keep running this
    If Me.ActiveControl = 0 Then
        Controls("txtSS_Node" & RowNum) = 0
    Else
        Controls("txtSS_Node" & RowNum) = WorksheetFunction.RoundUp(Controls("txtSS_CCI_ConcUsers" & RowNum) / 15, 0)
    End If
    SS_CalcTotalNodes
End Sub

Private Sub SpinSS_CCI_ConcUsers2_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "2"
End Sub

Private Sub SpinSS_CCI_ConcUsers3_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "3"
End Sub

Private Sub SpinSS_CCI_ConcUsers4_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "4"
End Sub

Private Sub SpinSS_CCI_ConcUsers5_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "5"
End Sub

Private Sub SpinSS_CCI_ConcUsers6_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "6"
End Sub

Private Sub SpinSS_CCI_ConcUsers7_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "7"
End Sub

Private Sub SpinSS_CCI_ConcUsers8_Change()
    IncrSpinner Me.ActiveControl
    SS_CalculateTotals "8"
End Sub

Private Sub SpinSS_CCI_EA1_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSS_CCI_EA2_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSS_CCI_EA3_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSS_CCI_EA8_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtSS_CCI_EA6_Change()
    IncrSpinner Me.ActiveControl
End Sub

Sub SS_CalcTotalNodes()
    SS_TotalNodes = 0
    For Each ctrl In Me.Controls
        If Left(ctrl.Name, 10) = "txtSS_Node" Then SS_TotalNodes = SS_TotalNodes + ctrl
    Next ctrl
    txtTotalWebNodes = SS_TotalNodes
    ColorCodeSelections Me
End Sub

Private Sub strSS_CCI_Loc1_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc2_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc3_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc4_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc5_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc6_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc7_Change()
    ColorCode Me.ActiveControl
End Sub

Private Sub strSS_CCI_Loc8_Change()
    ColorCode Me.ActiveControl
End Sub


Private Sub UserForm_Activate()
    GetFormattedControls Me 'Get pct, dat, cur
    ColorCodeSelections Me
End Sub
Attribute VB_Name = "frmUniversalViewer"
Attribute VB_Base = "0{C9D141E6-EE4A-4DEE-8FC7-FC5DA2859C6F}{773FA2CF-B13B-4A7C-949D-99568CF61B46}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub chkEATest_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkEpic_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkExistingUV_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkUV_Change()
    If chkUV Then
            Range("chkCCIclassic") = False 'don't select old CCI stuff
            'Defaults to at least 1
            If txtCCISites = 0 Then txtCCISites = 1
            If Me.txtCCIDepts = 0 Then txtCCIDepts = 1 'make sure Depts <> 0
    End If
    ColorCode chkUV
End Sub

Private Sub chkCVISintegration_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkEMRlaunch_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkOutboundAPI3rd_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkOutboundAPIGE_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkUVControllerNeeded_Change()
    ColorCode chkUVControllerNeeded
End Sub

Private Sub cmdEA_Click()
    OpenForm "frmEA"
End Sub

Private Sub cmdServerSizing_Click()
    OpenForm "frmServerSizing"
    ColorCode Me.txtUVWebNodes
End Sub


Private Sub optCathLicenseUsers_Change()
    ValidateCath
    ColorCode txtCathLicenseUsers
End Sub

Private Sub optCathStudies_Change()
    ValidateCath
    ColorCode txtCathStudies
End Sub

Private Sub CommandButton1_Click()
    MsgBox "Coming soon"
End Sub

Private Sub optCPACS_Change()
    ValidateUVtypes
End Sub

Private Sub optCPACS_Exists_Click()
    ValidateUVtypes
End Sub

Private Sub optCPACS_PVP_Click()
    ValidateUVtypes
End Sub

Private Sub optCPACS_Separately_Click()
    ValidateUVtypes
End Sub

Private Sub optCVPACS_Change()
    If optCVPACS Then chkUVControllerNeeded = True
    ValidateUVtypes
End Sub

Sub ValidateUVtypes()
    optCVPACS_IB.Visible = optCVPACS
    optCVPACS_NetNew.Visible = optCVPACS
    
    optCPACS_Exists.Visible = optCPACS
    optCPACS_PVP.Visible = optCPACS
    optCPACS_Separately.Visible = optCPACS
    
    If Not optCVPACS_IB.Visible Then optCVPACS_IB = False
    If Not optCVPACS_NetNew.Visible Then optCVPACS_NetNew = False
    If optCVPACS And Not (optCVPACS_IB + optCVPACS_NetNew) Then optCVPACS_NetNew = True 'Default
    
    If Not optCPACS_Exists.Visible Then optCPACS_Exists = False
    If Not optCPACS_PVP.Visible Then optCPACS_PVP = False
    If Not optCPACS_Separately.Visible Then optCPACS_Separately = False
    If optCPACS And Not (optCPACS_Exists + optCPACS_PVP + optCPACS_Separately) Then optCPACS_Exists = True 'Default
    
    'If optCVPACS_NetNew Then Me.chkEATest = True 'Removed because sometimes it is declined, don't keep selecting it
    
    ColorCodeSelections Me
End Sub

Private Sub optCVPACS_IB_Click()
    If HoldUpdates Then Exit Sub
    ValidateUVtypes
End Sub

Private Sub optCVPACS_NetNew_Click()
    If HoldUpdates Then Exit Sub
    If optCVPACS_NetNew Then chkEATest = True 'force EA Test only when clicked
    ValidateUVtypes
End Sub

Private Sub optEchoAdvanced_Click()
    ValidateEcho
    'ValidateAutoCalc
    'ShowHideTomtec
    CalcTomTecTrainingDays
End Sub

Private Sub optEchoBasic_Click()
    ValidateEcho
    'ValidateAutoCalc
    'ShowHideTomtec
    CalcTomTecTrainingDays
End Sub

Private Sub optEchoLicenseUsers_Click()
    optEchoBasic = True
    ValidateEcho
    'ShowHideTomtec
End Sub

Private Sub optEchoNone_Click()
    ValidateEcho
    'ShowHideTomtec
End Sub

Private Sub optEchoStudies_Click()
    ValidateEcho
    'ShowHideTomtec
End Sub

Private Sub optUVaddon_Change()
    chkUV = (Me.optCPACS Or Me.optCVPACS)
    ColorCodeSelections Me
End Sub

Private Sub optNoUVneeded_Change()
    chkUV = (Me.optCPACS Or Me.optCVPACS)
    ColorCodeSelections Me
End Sub

Private Sub optNoUVneeded_Click()
    If optNoUVneeded Then
        ret = MsgBox("Clear ALL selections on this menu?", vbOKCancel, "No UV, Clear Menu?")
        If ret = vbOK Then cmdClear_Click
    End If
End Sub

Private Sub optUVControllerNone_Change()
    ColorCodeSelections Me
End Sub

Private Sub optUVControllerSQLEnt_Change()
    ColorCodeSelections Me
End Sub

Private Sub optUVControllerSQLStd_Change()
    ColorCodeSelections Me
End Sub

Private Sub pctDiscount_CCI_AfterUpdate()
    TxtToPct pctDiscount_CCI, MaxCCISoftwareDiscount   'max disc
End Sub

Private Sub pctDiscount_CCIService_AfterUpdate()
    TxtToPct pctDiscount_CCIService, MaxCCIServiceDiscount
End Sub

Private Sub pctDiscount_TomTec_AfterUpdate()
    TxtToPct pctDiscount_TomTec, MaxTomTecDiscount  'max disc
End Sub

Private Sub Spin25kLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin2dayOnsiteSupport_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin3dayOnsiteSupport_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin5kLic_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCA1000ToNativeCath_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCathLicenseUsers_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEchoAutoCalc_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEchoAutoCalcVolume_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEchoLicenseUsers_Change()
    IncrSpinner Me.ActiveControl
End Sub

Sub ValidateEchoPac()
'Obsolete as of 3/15/18
Exit Sub
'With Me
'    .txtEPPC_Total = Int(.txtEPPC_Existing) + Int(.txtEPPC_New)
'    .txtEPPC_LV_Total = Int(.txtEPPC_LV_Existing) + Int(.txtEPPC_LV_New)
'    .txtEPPC_RV_Total = Int(.txtEPPC_RV_Existing) + Int(.txtEPPC_RV_New)
'    .txtEPPC_MV_Total = Int(.txtEPPC_MV_Existing) + Int(.txtEPPC_MV_New)
'End With
End Sub

Private Sub SpinEchoPacClassAdj_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEchoStudiesPremium_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_Existing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_LV_Existing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_LV_New_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_MV_Existing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_MV_New_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_New_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_RV_Existing_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_RV_New_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_Upgrade_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNativeCath_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinNativeCath_SpinUp()
    If Me.txt2dayOnsiteSupport = 0 Then Range("txt2dayOnsiteSupport") = 1
    ColorCode txt2dayOnsiteSupport
End Sub

Private Sub SpinUVWebNodes_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txt25kLic_Change()
    ColorCode ActiveControl
End Sub

Private Sub txt2DStrain_UV_Change()
    'ValidateAutoCalc
    CalcTomTecTrainingDays
    ColorCodeSelections Me
End Sub

Private Sub txt4DCardio_UV_Change()
    'ValidateAutoCalc
    CalcTomTecTrainingDays
    ColorCodeSelections Me
End Sub

Private Sub txt4DLV_UV_Change()
   'ValidateAutoCalc
   CalcTomTecTrainingDays
   ColorCodeSelections Me
End Sub

Private Sub txt4DMV_UV_Change()
    CalcTomTecTrainingDays
    ColorCodeSelections Me
End Sub

Private Sub txt4DRV_UV_Change()
    CalcTomTecTrainingDays
    ColorCodeSelections Me
End Sub

Private Sub txt5kLic_Change()
    ColorCode ActiveControl
End Sub

Private Sub txtCathLicenseUsers_Change()
    ShowCombinedEchoCathCheckbox
    ColorCode txtCathLicenseUsers
End Sub


Private Sub txtEchoAutoCalc_Change()
    CalcTomTecTrainingDays
End Sub

Private Sub txtEchoAutoCalcVolume_Change()
    CalcTomTecTrainingDays
    ColorCode txtEchoAutoCalcVolume
End Sub

Private Sub txtEchoLicenseUsers_Change()
    ShowCombinedEchoCathCheckbox
    CalcTomTecTrainingDays
    ColorCode txtEchoLicenseUsers
End Sub

Private Sub txtEchoPacClassAdj_Change()
    CalcEchoPacTrainingDays
End Sub

Private Sub txtEchoStudiesPremium_Change()
    CalcTomTecTrainingDays
    ColorCode txtEchoStudiesPremium
End Sub

Private Sub txtEPPC_Existing_Change()
    CalcEchoPacTrainingDays
End Sub

Private Sub txtEPPC_New_Change()
    CalcEchoPacTrainingDays
End Sub

Private Sub txtImages_Change()
    ColorCode ActiveControl
End Sub

Private Sub txtUVWebNodes_AfterUpdate()
    ColorCodeSelections Me
End Sub

Private Sub CalcEchoPacTrainingDays()
'One rec per EPPC new or IB
    Me.txtRecommendedEchoPacClasses = Int(Me.txtEPPC_New) + Int(Me.txtEPPC_Existing) * Range("txtCCISites").Value
       
'Stop zeroing out the Adjustment 7-22-2019
    'If Me.txtRecommendedEchoPacClasses = 0 Then Me.txtAdjTotalEchoPacClasses = 0
    'If Me.txtRecommendedTomTecClasses = 0 Then Me.txtAdjTotalTomTecClasses = 0
    
    'Calc total of Recommended & Adjusted
    Range("txtAdjTotalEchoPacClasses") = Val(txtRecommendedEchoPacClasses) + Val(txtEchoPacClassAdj)
    Pause 1

    'Adjust if negative
    If txtAdjTotalEchoPacClasses < 0 Then
        txtAdjTotalEchoPacClasses = 0
        If Val(txtRecommendedEchoPacClasses) > 0 Then txtEchoPacClassAdj = -Val(txtRecommendedEchoPacClasses)
    End If
    
    ColorCodeSelections Me
End Sub

Private Sub CalcTomTecTrainingDays()
Dim AllTomTecmodules As Integer
'2 if Echo Premium Volume
'else, 1 per TomTec Echo a la carte tools
'Multiply by # of sites

If Me.txtEchoStudiesPremium > 0 Then AllTomTecmodules = 2  'FOUR days onsite, default for PREMIUM Echo(includes all TomTec)

If AllTomTecmodules = 0 Then
    For Each ctrl In fraTomTecConc.Controls
        If Left(ctrl.Name, 3) = "txt" And ctrl.Tag = "TomTecApps" Then
             AllTomTecmodules = AllTomTecmodules + Int(ctrl)
        End If
    Next ctrl
End If

txtRecommendedTomTecClasses = AllTomTecmodules * Range("txtCCISites").Value * 2
Pause 1

'Calc total of Recommended & Adjusted
txtAdjTotalTomTecClasses.Value = Val(txtRecommendedTomTecClasses) + Val(txtTomTecClassAdj)
    
'Adjust if negative
    If Val(txtAdjTotalTomTecClasses) < 0 Then
        txtAdjTotalTomTecClasses = 0
        txtTomTecClassAdj = -Val(txtRecommendedTomTecClasses)
    End If

End Sub

Sub ShowHideTomtec()
    grp = "TomTecApps"
    For Each ctrl In fraTomTecConc.Controls
        If ctrl.Tag = grp Then
            ctrl.Enabled = (optEchoBasic)
            If Not ctrl.Enabled Then ctrl = 0
        End If
    Next ctrl
    Me.Repaint
End Sub

Private Sub chkEchoAutoCalc_Click()
    ColorCode txtEchoAutoCalc
End Sub

Private Sub chkUWTestSoftware_Click()
    ColorCode ActiveControl
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
    chkEATest = False
    ColorCode chkEATest
End Sub

Private Sub ShowCombinedEchoCathCheckbox()
   With Me
     'Display Combined Echo Basic conc user + CATH?
      .chkCombineECHOCATHapps.Enabled = Val(.txtCathLicenseUsers) > 0 And Val(.txtEchoLicenseUsers) > 0
      If Not .chkCombineECHOCATHapps.Enabled Then .chkCombineECHOCATHapps = False
      .txtCombineEchoCathApps = WorksheetFunction.Min(.txtEchoLicenseUsers, .txtCathLicenseUsers)
      ColorCode .txtCombineEchoCathApps
   End With
End Sub

Private Sub ValidateCath()
With Me
    ShowCombinedEchoCathCheckbox
'    .txtCathStudies.Visible = .optCathStudies
'    .SpinCathStudies.Visible = .optCathStudies
    
'    .txtCathLicenseUsers.Visible = .optCathLicenseUsers
'    .SpinCathLicenseUsers.Visible = .optCathLicenseUsers
    
'    .txtCathLicenseUsers.Tag = IIf(.optCathLicenseUsers, "Required", "")
'    .txtCathStudies.Tag = IIf(.optCathStudies, "Required", "")

'    ShowMedis = Not .optCCI_Cath_None
'    For Each ctrl In .fraCATH.Controls
'        If Left(ctrl.Tag, 9) = "MedisApps" Then ctrl.Visible = ShowMedis
'    Next ctrl

End With
ColorCodeSelections Me
End Sub

Private Sub ValidateAutoCalc()
'As of 4/24/17 don't hide Autocalc, obsolete below
'With Me
'    If .optEchoAdvanced Or (.optEchoBasic And Val(.txt4DCardio_UV) + Val(.txt4DLV_UV) + Val(.txt2DStrain_UV) > 0) Then
'        chkEchoAutoCalc.Visible = True
'    Else
'        chkEchoAutoCalc.Visible = False
'        chkEchoAutoCalc.Value = False
'    End If
'End With
End Sub

Private Sub ValidateEcho()
With Me
    
    ShowCombinedEchoCathCheckbox
    
'    .optEchoAdvanced.Visible = .optEchoStudies
'    .optEchoBasic.Visible = .optEchoStudies
           
'    .txtEchoStudies.Visible = .optEchoStudies
'    .SpinEchoStudies.Visible = .optEchoStudies
    
'    .txtEchoLicenseUsers.Visible = .optEchoLicenseUsers
'    .SpinEchoLicenseUsers.Visible = .optEchoLicenseUsers
        
'    txtEchoLicenseUsers.Tag = IIf(optEchoLicenseUsers, "Required", "")
'    txtEchoStudies.Tag = IIf(optEchoStudies, "Required", "")
'    ColorCodeSelections Me

End With

End Sub

Private Sub cmdSave_Click()
          
    'Default training for Net New CVPACS, if all 3 training items not already selected
    If Me.chkUV And Me.optCVPACS_NetNew Then
        If (Int(txt5kLic) + Int(txt25kLic) = 0) Or Int(txtImages) = 0 Then
            OpenForm "frmEA"
        End If
    End If
    
    CalcOptionalModuleTotals
    CalcTomTecTrainingDays
    SetFormattedControls Me
    
    Hide
End Sub

Private Sub CalcOptionalModuleTotals()
'Save total modules
    Dim AllQAngioUV As Integer
    Dim AllTomTecUV As Integer
    
    Range("AllQAngioUV") = 0
    Range("AllTomTecUV") = 0
    Range("AllCCIUVmodules") = 0
    
    For Each ctrl In Me.Controls
         If Me.Tag = "TomTecApps" Then AllTomTecUV = AllTomTecUV + ctrl.Value
         If Me.Tag = "MedisApps" Then AllQAngioUV = AllQAngioUV + ctrl.Value
    Next ctrl
    
    If Me.chkUV Then
        Range("AllQAngioUV") = AllQAngioUV
        Range("AllTomTecUV") = AllTomTecUV
        Range("AllCCIUVmodules").Value = AllQAngioUV + AllTomTecUV + txtReviewMod + txtImageAnalysis
    End If
End Sub

Private Sub optCCI_Cath_Medis_Click()
    ValidateCath
    'ShowHideMedis
End Sub

Private Sub optCCI_Cath_None_Click()
    ValidateCath
    'ShowHideMedis
 End Sub

Private Sub optCCI_Cath_TomTec_Click()
'hide/show # of exams
'    ShowHideMedis
    ValidateCath
End Sub

Sub ShowHideMedis()
    grp = "MedisApps"
    For Each ctrl In fraTomTecConc.Controls
        If ctrl.Tag = grp Then
            ctrl.Enabled = (optCCI_Cath_Medis)
            If ctrl.Enabled = False Then ctrl = 0
        End If
    Next ctrl
    Me.Repaint
End Sub

'System Config scenarios
'------------
    Private Sub optNetNew_CVPACS_Change()
        ColorCodeSelections Me
    End Sub
    
    Private Sub optNetNew_Enterprise_Change()
        ColorCodeSelections Me
    End Sub
    
Private Sub Spin2DStrain_UV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin4DCardio_UV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin4DLV_UV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin4DMV_UV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub Spin4DRV_UV_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinBifurcation_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCardioExams_Change()
    chkUV = (txtCardioExams > 0)
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCathStudies_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCIDepts_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCISites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCoroQCA_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCoroQCAadv_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEchoStudies_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinSatelliteSites_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinTomTecClassAdj_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinUWturnkeyServers_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinVascQCAadv_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinVascQVA_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtAdjTotalTomTecClasses_Change()
    ColorCode txtAdjTotalTomTecClasses
End Sub

Private Sub txtBifurcation_Change()
    ColorCode txtBifurcation
End Sub

Private Sub txtCardioExams_Change()
    chkUV = txtCardioExams > 0 'check box to quote UV if # of exams is entered
    If optNoUVneeded And txtCardioExams > 0 Then Me.optCVPACS = True 'Don't forget config type, default is Net New
    CalcTomTecTrainingDays
    ColorCode txtCardioExams
End Sub

Private Sub txtCathStudies_Change()
    ColorCode txtCathStudies
End Sub

Private Sub txtCCIDepts_Change()
    ColorCode txtCCIDepts
End Sub

Private Sub txtCCISites_Change()
    CalcTomTecTrainingDays
    ColorCode txtCCISites
End Sub

Private Sub txtCoroQCA_Change()
    ColorCode txtCoroQCA
End Sub

Private Sub txtCoroQCAadv_Change()
    ColorCode txtCoroQCAadv
End Sub

Private Sub txtEchoStudies_Change()
    CalcTomTecTrainingDays
    ColorCode txtEchoStudies
End Sub

Private Sub txtTomTecClassAdj_Change()
    CalcTomTecTrainingDays
    ColorCode txtTomTecClassAdj
End Sub

Private Sub txtVascQCAadv_Change()
    ColorCode txtVascQCAadv
End Sub

Private Sub txtVascQVA_Change()
    ColorCode txtVascQVA
End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub
Private Sub UserForm_Initialize()
Me.Caption = Me.Tag & "             Customer: " & CustomerCityState
'Enforce validation, hide/show as appropriate
HoldUpdates = True
    GetFormattedControls Me 'Get pct, dat, cur
    ValidateUVtypes
    'ValidateSQLController
    ValidateEcho
    ValidateCath
    CalcTomTecTrainingDays
    'ShowHideTomtec
HoldUpdates = False
    ColorCodeSelections Me
    
'Backwards compatibility with old quotes using checkbox for Autocalc
If Not RangeExists("txtEchoAutoCalc") Then
    MsgBox "Echo Autocalc configuration has changed. " & Chr(10) & _
    "Please copy to a new configuration workbook (on CUSTOMER menu) to get the latest features."
End If
    
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmUpgradeCCItoUV"
Attribute VB_Base = "0{85AA411F-2D53-4551-AE12-4514BE378684}{142874AF-B6AC-428F-8B15-56CFB7BB0D5E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub chkCCItoUV_Click()
'*
    ColorCode ActiveControl
End Sub

Private Sub chkCCItoUVafterHours_Click()
'*
    ColorCode ActiveControl
End Sub

Private Sub chkEchoPACupgrTraining_Click()
'*
    ColorCode ActiveControl
End Sub

Private Sub chkUVControllerNeeded_Change()
'*
    ValidateSQLController
    ColorCode chkUVControllerNeeded
End Sub

Sub ValidateSQLController()
    optUVControllerNone.Visible = chkUVControllerNeeded
    optUVControllerSQLStd.Visible = chkUVControllerNeeded
    optUVControllerSQLEnt.Visible = chkUVControllerNeeded
End Sub

Private Sub cmdFilter_Click()
    FilterItems
End Sub

Private Sub optNoUVneeded_Change()
    chkUV = Not (optNoUVneeded)
    ColorCodeSelections Me
End Sub

Private Sub cmdMigration_Click()
    'CCI to UV License Migration
Dim siteURL As String
siteURL = "http://supportcentral.ge.com/ProcessMaps/LaunchProcess.asp?prod_id=298904&proc_id=2137035"
On Error Resume Next
    Err.Clear
    ActiveWorkbook.FollowHyperlink siteURL, , True, False
    If Err <> 0 Then InputBox "Copy/paste to your browser to download the update:", "Unable to load browser", siteURL
    Err.Clear
On Error GoTo 0
End Sub

Private Sub cmdZFP_Click()
    'Set defaults
    Range("chkZFPbase") = True
    Range("chkZFPOtherGEAPI") = True
    Range("strZFPOtherGEAPI") = "Encapsulate PDF"
    If Range("txtZFPWebNodes") = 0 Then Range("txtZFPWebNodes") = 1
    'Open form
    OpenForm "frmZFP"
End Sub

Private Sub optUVControllerNone_Change()
'*
    ColorCodeSelections Me
End Sub

Private Sub optUVControllerSQLEnt_Change()
'*
    ColorCodeSelections Me
End Sub

Private Sub optUVControllerSQLStd_Change()
'*
ColorCodeSelections Me
End Sub

Private Sub pctDiscount_CCIService_AfterUpdate()
'*
    TxtToPct pctDiscount_CCIService, MaxCCIServiceDiscount
End Sub

Private Sub SpinCCItoUVcardtrain_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCItoUVExistingAPIs_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCItoUVsupertrain_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_Existing_Change()
'*
IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_LV_Existing_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_LV_New_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_MV_Existing_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinEPPC_RV_Existing_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinExistingWebNodes_Change()
'*
IncrSpinner Me.ActiveControl
End Sub

Private Sub UserForm_Initialize()
'Enforce validation, hide/show as appropriate
HoldUpdates = True
    GetFormattedControls Me 'Get pct, dat, cur
    ValidateSQLController
HoldUpdates = False
    ColorCodeSelections Me
End Sub

Private Sub cmdClear_Click()
'*
    ClearControls Me
End Sub

Private Sub cmdSave_Click()
'*
    SetFormattedControls Me
    Hide
End Sub
  
Private Sub pctDiscount_CCI_AfterUpdate()
'*
    TxtToPct pctDiscount_CCI, MaxCCISoftwareDiscount 'max disc
End Sub

Private Sub SpinCardioExams_Change()
'*
    chkUV = (txtCardioExams > 0)
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCIDepts_Change()
'*
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinCCISites_Change()
'*
IncrSpinner Me.ActiveControl
End Sub

Private Sub txtCardioExams_Change()
'*
    ColorCode txtCardioExams
End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmUpgradeCCW"
Attribute VB_Base = "0{B62B1636-9AE6-4363-9809-8E7C3E7D9F8A}{24F8EA3D-8EEA-49CE-B5CC-FD689B39C0D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub pctDiscount_CCWService_AfterUpdate()
    TxtToPct pctDiscount_CCWService, MaxCCWServiceDiscount
End Sub

Private Sub SpinCCWUpgAppConfigDays_Change()
    IncrSpinner SpinCCWUpgAppConfigDays
End Sub

Private Sub SpinCCWUpgProdDeplDays_Change()
    IncrSpinner SpinCCWUpgProdDeplDays
End Sub

Private Sub SpinExistingCathPCI_Change()
    IncrSpinner SpinExistingCathPCI
End Sub

Private Sub SpinExistingSTS_Change()
    IncrSpinner SpinExistingSTS
End Sub

Private Sub SpinRefreshOS_Change()
    IncrSpinner SpinRefreshOS
End Sub

Private Sub strUpgCCWfromVersion_Change()
    If Me.Tag = "Activating" Then Exit Sub
    TriggerAfterHrsDay
End Sub

Private Sub strUpgCCWtoVersion_Change()
    If Me.Tag = "Activating" Then Exit Sub
    TriggerAfterHrsDay
End Sub

Sub TriggerAfterHrsDay()
    If strUpgCCWfromVersion.Text <> "" And Me.strUpgCCWtoVersion <> "" Then
    
        If txtCCWDaysAfter < 1 And strUpgCCWtoVersion = "7.2" Then
            txtCCWDaysAfter = 1
            ColorCode txtCCWDaysAfter
        ElseIf txtCCWDaysAfter < 2 And strUpgCCWtoVersion = "7.3" Then
            txtCCWDaysAfter = 2
            ColorCode txtCCWDaysAfter
        End If
        
        If Left(strUpgCCWtoVersion, 1) = "7" Then
            'chkCCWUpgrWebinar = True 'default REMOVED 9/18/2019
            chkUpgr3DayEduc = True
        End If
        
        RequireHWAssessment = (Left(strUpgCCWfromVersion, 1) = "6" And Left(strUpgCCWtoVersion, 1) = "7")
        chkCCWupgrHWassessment.Visible = RequireHWAssessment
        If Not chkCCWupgrHWassessment.Visible Then chkCCWupgrHWassessment = False
        lblUpgradeDisplayNote.Visible = chkCCWupgrHWassessment.Visible
    End If
End Sub

Private Sub UserForm_Activate()
    ValidateVersionNumbers
    ValidateModes
    Me.Tag = "Activating"
        DefaultStressMode
    Me.Tag = ""
End Sub

Sub ValidateVersionNumbers()
     Dim SWtypes(10) As String
        SWtypes(X) = "5.1.1 or less": X = X + 1
        SWtypes(X) = "5.1.2.x": X = X + 1
        SWtypes(X) = "6.0": X = X + 1
        SWtypes(X) = "6.0 SP4": X = X + 1
        SWtypes(X) = "6.0 SP5": X = X + 1
        SWtypes(X) = "6.0 SP6": X = X + 1
        SWtypes(X) = "6.0 SP6.2": X = X + 1
        SWtypes(X) = "7.0": X = X + 1
        SWtypes(X) = "7.01": X = X + 1
        SWtypes(X) = "7.0 SP1": X = X + 1
        SWtypes(X) = "7.0 SP2": X = X + 1
        X = 0
    strUpgCCWfromVersion.List = SWtypes
    strUpgCCWtoVersion.AddItem "6.0 SP6.2"
    strUpgCCWtoVersion.AddItem "7.2" ' <--- CURRENT VERSION
    strUpgCCWtoVersion.AddItem "7.3"
    If strUpgCCWtoVersion = "" Then strUpgCCWtoVersion = "7.3"
End Sub

Private Sub strUpgCCWfromVersion_AfterUpdate()
    TriggerAfterHrsDay
    ColorCodeSelections Me
End Sub

Sub ValidateModes()
With Me
    .chkCATH_Live.Visible = .optExistingCATH_Rep
    .chkEcho_Live.Visible = .optExistingEcho_Rep
    .chkEP_Live.Visible = .optExistingEP_Rep
    .chkFollowup_Live.Visible = .optExistingFollowup_Rep
    .chkImplant_Live.Visible = .optExistingImplant_Rep
    .chkIPV_Live.Visible = .optExistingIPV_Rep
    .chkNIPV_Live.Visible = .optExistingNIPV_Rep
    .chkNucMed_Live.Visible = .optExistingNucMed_Rep
    .chkPedEcho_Live.Visible = .optExistingPedEcho_Rep

    If Not .optExistingCATH_Rep Then .chkCATH_Live = False
    If Not .optExistingEcho_Rep Then .chkEcho_Live = False
    If Not .optExistingEP_Rep Then .chkEP_Live = False
    If Not .optExistingFollowup_Rep Then .chkFollowup_Live = False
    If Not .optExistingImplant_Rep Then .chkImplant_Live = False
    If Not .optExistingIPV_Rep Then .chkIPV_Live = False
    If Not .optExistingNIPV_Rep Then .chkNIPV_Live = False
    If Not .optExistingNucMed_Rep Then .chkNucMed_Live = False
    If Not .optExistingPedEcho_Rep Then .chkPedEcho_Live = False

End With
ColorCodeSelections Me
End Sub

Private Sub chkUpgr3DayEduc_Click()
    ColorCode Me.ActiveControl
End Sub

Private Sub cmdClear_Click()
    ClearControls Me
    chkUpgradeCCW = True
End Sub

Private Sub cmdSave_Click()
    With Me
         If .strUpgCCWfromVersion = "" And .strUpgCCWtoVersion = "" Then GoTo Done 'if nothing selected, don't force validation
         If .strUpgCCWfromVersion = "" Or .strUpgCCWtoVersion = "" Then 'incomplete entry
            MsgBox "Select the version to upgrade FROM"
            .strUpgCCWfromVersion.SetFocus
            .strUpgCCWfromVersion.DropDown
            Exit Sub
        End If
        
        Dim LiveCheckCount As Integer
        Dim RepCount As Integer
        For Each ctrl In .fraExamModules.Controls
            If Right(ctrl.Name, 3) = "Rep" Then RepCount = RepCount + Abs(ctrl)
            If Right(ctrl.Name, 4) = "Live" Then LiveCheckCount = LiveCheckCount + Abs(ctrl)
        Next ctrl
        
        If Range("optUpgradeCCW") = True Then
            Days = Val(.txtCCWDaysAfter) + Val(.txtCCWdaysMonFri) + Val(.txtCCWDaysSunHol)
            Hours = Val(.txtCCWHoursAfter) + Val(.txtCCWHoursMonFri) + Val(.txtCCWHoursSunHol)
            
            If strUpgCCWfromVersion = "5.1.2.1" Then MinimumHours = 8
            If strUpgCCWfromVersion = "5.1.1" Then MinimumHours = 8
            If Days < 1 And Hours < 4 Then MsgBox "Don't forget Installation services if no SWOP!" & Chr(10) & MinimumHours & " hrs recommended."
        End If
    End With
Done:
    SetFormattedControls Me 'pct,dat,cur
    Hide
End Sub

Private Sub chkUpgradeCCW_Click()
    ColorCode Me.ActiveControl
End Sub

Private Sub optExistingCATH_None_Click()
    ValidateModes
End Sub

Private Sub optExistingCATH_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingCATH_Rep_Click()
    If optExistingCATH_Rep Then chkCATH_Live = True
    ValidateModes
End Sub

Private Sub optExistingEcho_None_Click()
    ValidateModes
    DefaultStressMode
End Sub

Sub DefaultStressMode()
With Me
    EchoOrNucQuoted = (.optExistingEcho_PC Or .optExistingEcho_Rep Or .optExistingNucMed_Rep)
    .chkExistingStressMode.Visible = EchoOrNucQuoted
    If .Tag = "Activating" Then
            Exit Sub 'Not if just opening form
    Else
            .chkExistingStressMode = EchoOrNucQuoted
    End If
End With
End Sub

Private Sub optExistingEcho_PC_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEcho_Rep_Click()
    'First time as True, make Live by default
    If optExistingEcho_Rep Then chkEcho_Live = True
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEP_None_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingEP_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingEP_Rep_Click()
    If optExistingEP_Rep Then chkEP_Live = True
    ValidateModes
End Sub

Private Sub optExistingFollowup_None_Click()
    ValidateModes
End Sub

Private Sub optExistingFollowup_Rep_Click()
    If optExistingFollowup_Rep Then chkFollowup_Live = True
    ValidateModes
End Sub

Private Sub optExistingImplant_None_Click()
    ValidateModes
End Sub

Private Sub optExistingImplant_Rep_Click()
    If optExistingImplant_Rep Then chkImplant_Live = True
    ValidateModes
End Sub

Private Sub optExistingIPV_None_Click()
    ValidateModes
End Sub

Private Sub optExistingIPV_Rep_Click()
    If optExistingIPV_Rep Then chkIPV_Live = True
    ValidateModes
End Sub

Private Sub optExistingNIPV_None_Click()
    ValidateModes
    End Sub

Private Sub optExistingNIPV_PC_Click()
    ValidateModes
    End Sub

Private Sub optExistingNIPV_Rep_Click()
    If optExistingNIPV_Rep Then chkNIPV_Live = True
    ValidateModes
End Sub

Private Sub optExistingNucMed_None_Click()
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingNucMed_Rep_Click()
    If optExistingNucMed_Rep Then chkNucMed_Live = True
    ValidateModes
    DefaultStressMode
End Sub

Private Sub optExistingPedEcho_None_Click()
    ValidateModes
End Sub

Private Sub optExistingPedEcho_PC_Click()
    ValidateModes
End Sub

Private Sub optExistingPedEcho_Rep_Click()
    If optExistingPedEcho_Rep Then chkPedEcho_Live = True
    ValidateModes
End Sub

Private Sub SpinCCWDaysAfter_Change()
        IncrSpinner SpinCCWDaysAfter
End Sub

Private Sub SpinCCWdaysMonFri_Change()
        IncrSpinner SpinCCWdaysMonFri
End Sub

Private Sub SpinCCWDaysSunHol_Change()
        IncrSpinner SpinCCWDaysSunHol
End Sub

Private Sub SpinCCWHoursAfter_Change()
        IncrSpinner SpinCCWHoursAfter
End Sub

Private Sub SpinCCWHoursMonFri_Change()
        IncrSpinner SpinCCWHoursMonFri
End Sub

Private Sub SpinCCWHoursSunHol_Change()
        IncrSpinner SpinCCWHoursSunHol
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        cmdSave_Click
        Cancel = False
    End If
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "frmZFP"
Attribute VB_Base = "0{610840BA-0539-46A0-8582-0FF1094B9832}{10B43D1C-C9BB-429A-B56E-CF267E2C4030}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()
HoldUpdates = True
    GetFormattedControls Me 'Get pct, dat, cur
HoldUpdates = False
    ColorCodeSelections Me
End Sub

Private Sub UserForm_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    'FilterItems
End Sub

Private Sub cmdClear_Click()
        ClearControls Me
End Sub

Private Sub cmdSave_Click()
    SetFormattedControls Me
    Hide
End Sub

Private Sub chkZFPbase_Click()
    ColorCode ActiveControl
    If chkZFPbase And txtZFPWebNodes = 0 Then
        txtZFPWebNodes = 1
    End If
End Sub

Private Sub chkZFPCCW_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPDMS_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPEMRlaunch_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPMUSE_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPnonGEAPI_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPOtherGEAPI_Click()
    ColorCode ActiveControl
End Sub

Private Sub chkZFPtest_Click()
    ColorCode ActiveControl
End Sub

Private Sub SpinCardioExams_Change()
    chkUV = (txtCardioExams > 0)
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinZFPAPILinks_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub SpinZFPWebNodes_Change()
    IncrSpinner Me.ActiveControl
End Sub

Private Sub txtZFPAPILinks_Change()
    ColorCode ActiveControl
End Sub

Private Sub UserForm_Click()
    FilterItems
End Sub


Attribute VB_Name = "modFormSupport"
Public ctrl As Control
Public fctrl As Control
Public HoldUpdates As Boolean
Dim txtControl As Object
Dim spinControl As Object
Public Const RequiredColor = 33023  'Orange
'Public Const RequiredColor = 12632319  'pink - Required but zero

Sub BuildDataTab()
' ** For each UserForm in this add-in save name of these control types to Column A of Sheet "Data"
'**   chk, opt, txt, cmb, cbo, lst

'Ask if you want dependencies shown on FormData page
bShowDependencies = (MsgBox("Show dependencies?", vbYesNo) = vbYes)

'Clear Optional column & save template
Workbooks("CVIT Quote.xltm").Activate
CVIT_Quote.ThisWorkbook.Save
Worksheets("Items").Range("D7:D" & Range("GrandTotal").Row).ClearContents

Dim TimeDiff As Date
TimeDiff = (Now() - CVIT_Quote.ThisWorkbook.BuiltinDocumentProperties("Last save time"))
If TimeDiff > #12:01:00 AM# Then MsgBox CVIT_Quote.ThisWorkbook.BuiltinDocumentProperties("Last save time"), , "Add-In Last Saved Date"

'Clear the version date
Range("Quote_Created") = ""

Dim dSht As Worksheet
Dim colA As Range
Dim ctrl As MSForms.Control
Dim r As Integer
Dim frm As Object
Dim found As Object

'Delete FormData worksheet and recreate it from scratch
Application.Calculation = xlCalculationManual
Application.DisplayAlerts = False
For Each dSht In ActiveWorkbook.Sheets
    If dSht.Name = "FormData" Then dSht.Delete
Next dSht
Application.DisplayAlerts = True
ActiveWorkbook.Sheets.Add After:=Sheets(Sheets.Count)
ActiveSheet.Name = "FormData"
Set dSht = ActiveSheet
Set colA = dSht.Columns(1)
r = 1 'row counter increments as we fill in the sheet

For Each frm In ThisWorkbook.VBProject.VBComponents
    If Left(frm.Name, 3) = "frm" Then
        r = r + 1
        colA.Cells(r).Value = frm.Name
        colA.Cells(r).Font.Bold = True
        r = r + 1
'List all relevant controls on each form in column A of FormData sheet.
        For Each ctrl In frm.Designer.Controls
            Select Case Left(ctrl.Name, 3)
            Case "chk", "opt", "txt", "cmb", "cbo", "lst", "str", "dat", "pct", "int"
              'if same name is not already on the sheet, type control name into column A (don't need a duplicate)
              Set found = Range("A:A").Find(What:=ctrl.Name, After:=ActiveCell, LookIn:=xlFormulas, _
                lookat:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
                MatchCase:=False, SearchFormat:=False)
              If found Is Nothing Then
                colA.Cells(r).Value = ctrl.Name
                r = r + 1
              Else
                'name already used
                'colA.Cells(r).Value = ctrl.Name
                'r = r + 1
                'found.Offset(0, 2) = "Duplicate"
              End If
            End Select
        Next ctrl
        
'Sort control names, create Range names based on the control names
        ActiveWorkbook.Worksheets("FormData").Sort.SortFields.Add Key:=colA.Cells(r - 1).CurrentRegion, SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With ActiveWorkbook.Worksheets("FormData").Sort
            .SetRange colA.Cells(r - 1).CurrentRegion
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        Application.DisplayAlerts = False
        Range(colA.Cells(r - 1).CurrentRegion, colA.Cells(r - 1).CurrentRegion.Offset(0, 1)).CreateNames Top:=False, Left:=True, Bottom:=False, Right:=False
        Application.DisplayAlerts = True
        
'Assign new range name to ControlSource of control
        For Each ctrl In frm.Designer.Controls
            Select Case LCase(Left(ctrl.Name, 3))
            Case "chk", "opt"
                Range(ctrl.Name) = (ctrl.Tag = "Default")
                ctrl.ControlSource = ctrl.Name
            Case "cmb", "cbo", "lst"
                Range(ctrl.Name) = ""
                ctrl.ControlSource = ctrl.Name
            Case "str"
                Range(ctrl.Name) = ""
                Range(ctrl.Name).NumberFormat = "@"
                ctrl.ControlSource = ctrl.Name
                If Left(ctrl.Tag, 8) = "Default:" Then Range(ctrl.Name) = Mid(ctrl.Tag, 9, 100)
            Case "txt", "int"
                Range(ctrl.Name) = 0
                ctrl.ControlSource = ctrl.Name
            Case "pct"
                Range(ctrl.Name) = "0.00%"
                ctrl.ControlSource = ""
            Case "dat"
                Range(ctrl.Name) = ""
                ctrl.ControlSource = ""
            Case "cur" 'currency
                Range(ctrl.Name) = "$0.00"
                ctrl.ControlSource = ""
            Case "spi"
                'spinner is linked to corresponding txt control, both share same range name
                Range("txt" & Mid(ctrl.Name, 5, 100)).Value = WorksheetFunction.Max(0, ctrl.Min) 'set Spinner's Positive Min value to source (CCWINV site = 2)
                ctrl.ControlSource = "txt" & Mid(ctrl.Name, 5, 100)
                ctrl.Delay = 100 'prevent speeding increases
            End Select
        Next ctrl
       
    End If
Next frm

If bShowDependencies Then
    'Show which Control/Ranges are not referenced by formulas
    Application.ScreenUpdating = False
    Dim rng As Range
    For Each rng In Range("B3:B" & r - 1).Cells
        With rng
            .Select
            .ShowDependents
            .NavigateArrow False, 1
            If rng.Offset(0, -1) = "" Or Left(rng.Offset(0, -1), 3) = "frm" Or _
            .Parent.Name & .Address <> Selection.Parent.Name & Selection.Address Then
                rng.Offset(0, 1) = ""
            Else
                rng.Offset(0, 1) = "No dependents"
                rng.Offset(0, -1).Font.Bold = True
            End If
            Sheets(rng.Parent.Name).Activate
            ActiveSheet.ClearArrows
        End With
    Next rng
End If

CombineOptionalNotes 'Clears out any checked notes

Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic

Range("A:C").ColumnWidth = 30
Sheets("Items").Activate
End Sub

Public Sub ClearControls(frm As Object)
    HoldUpdates = True
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
'Reset controls: txt = 0, Defaults to TRUE
    For Each ctrl In frm.Controls
        Select Case LCase(Left(ctrl.Name, 3))
        Case "chk", "opt"
            Range(ctrl.Name) = (ctrl.Tag = "Default") 'Default=TRUE
        Case "txt" 'spinner textbox hold a number, default =0
            Range(ctrl.Name) = 0
            On Error Resume Next
                If Left(ctrl.Tag, 8) = "Default:" Then Range(ctrl.Name) = Int(Mid(ctrl.Tag, 9, 100)) ' e.g. "Default:2"
            On Error GoTo OldQuote
        Case "str", "cmb", "cbo", "lst", "dat" 'Text fields
            Range(ctrl.Name) = ""
            If Left(ctrl.Tag, 8) = "Default:" Then Range(ctrl.Name) = Mid(ctrl.Tag, 9, 100)   ' e.g. "Default:100"
        Case "pct" 'percentage text
            If ctrl.Tag <> "" Then
                Range(ctrl.Name) = ctrl.Tag 'Default text
            Else
                Range(ctrl.Name) = "0.00%"
            End If
            ctrl = Range(ctrl.Name).Text
        End Select
    Next ctrl
Done:
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    HoldUpdates = False
    ColorCodeSelections frm
Exit Sub
OldQuote:
    MsgBox "This workbook may be out of date. The CCWINV menu has changed." & Chr(10) & _
    "Copy to New Quote for compatibility with the latest version."
    On Error GoTo 0
    GoTo Done
End Sub

Public Sub IncrSpinner(ctrl As Object)
If HoldUpdates Then Exit Sub
On Error GoTo Skipit
'For controls within other controls, dig down and assign txtControl object
    Select Case LCase(Left(ctrl.Name, 3))
        Case "spi" 'if an unframed spinner
            Set spinControl = ctrl
            Set txtControl = ctrl.Parent.Controls("txt" & Mid(ctrl.Name, 5))
        Case "fra" 'if control is in a frame, must go one level deeper
            If LCase(Left(ctrl.ActiveControl.Name, 4)) = "spin" Then
                Set spinControl = ctrl.ActiveControl
                Set txtControl = ctrl.Controls("txt" & Mid(ctrl.ActiveControl.Name, 5))
            Else
                GoTo Skipit
            End If
        Case "tab" 'multipage control
            If LCase(Left(ctrl.Pages(ctrl.Value).ActiveControl.Name, 4)) = "spin" Then
                Set spinControl = ctrl.Pages(ctrl.Value).ActiveControl
                Set txtControl = ctrl.Pages(ctrl.Value).Controls("txt" & Mid(ctrl.Pages(ctrl.Value).ActiveControl.Name, 5))
            Else
                GoTo Skipit
            End If
        Case Else
            GoTo Skipit
    End Select
    
    UpdTxt spinControl, txtControl
    ColorCode txtControl
    
    Set txtControl = Nothing
Skipit:
End Sub

Public Sub UpdTxt(spinCtl As Object, txtCtl As Object)
    txtCtl = spinCtl.Value
End Sub

Public Sub ColorCodeSelections(frm As Object)
'color check the whole form
If HoldUpdates Then Exit Sub
    For Each ctl In frm.Controls
        If ctl.Visible Then ColorCode ctl
    Next ctl
End Sub

Public Sub ColorCode(ctl As Object)
'Skip during reset
If HoldUpdates Then Exit Sub
On Error GoTo Done
If Left(ctl.Name, 3) = "tab" Then Set ctl = ctl.Pages(ctl.Value).ActiveControl
If Left(ctl.Name, 3) = "fra" Then Set ctl = ctl.ActiveControl
'just check one control
        Select Case Left(ctl.Name, 3)
            Case "cmb", "txt", "cbo", "str"
                If ctl.Value = 0 Or ctl.Text = "" Then
                    If ctl.Tag = "Required" And ctl.Enabled Then
                        ctl.BackColor = RequiredColor
                    Else
                        ctl.BackColor = &HFFFFFF 'white
                    End If
                Else
                    ctl.BackColor = &HFFFFC0 'light blue
                End If
            Case "pct"
                If PctToValue(ctl.Text) = 0 Or ctl.Text = "" Then
                    If ctl.Tag = "Required" And ctl.Enabled Then
                        ctl.BackColor = RequiredColor 'Required but zero
                    Else
                        ctl.BackColor = &HFFFFFF 'white
                    End If
                Else
                    ctl.BackColor = &HFFFFC0 'light blue
                End If
            Case "chk", "opt"
                ctl.Font.Bold = False 'ctl.Value
                If ctl Then
                    ctl.ForeColor = vbBlue
                Else
                    ctl.ForeColor = vbBlack
                End If
            Case Else
        End Select
Done:
End Sub

Public Sub GetFormattedControls(frm As Object)
On Error Resume Next
    For Each ctrl In frm.Controls
        Select Case LCase(Left(ctrl.Name, 3))
            Case "pct" 'pct
                ctrl.Text = Format(Range(ctrl.Name).Value, "0.0%")
            Case "cur" 'currency
                ctrl.Text = Format(Range(ctrl.Name).Value, "$0.00")
            Case "dat" 'date
                ctrl.Text = Format(Range(ctrl.Name).Value, "mm/dd/yyyy")
            Case "opt"
                If ctrl Then
                    ctrl = True
                    Range(ctrl.Name) = True
                End If
            Case Else
        End Select
    Next ctrl
End Sub

Public Sub SetFormattedControls(frm As Object)
    On Error Resume Next
    For Each ctrl In frm.Controls
        Select Case LCase(Left(ctrl.Name, 3))
            Case "pct", "cur"
                Range(ctrl.Name).Value = ctrl.Value
            Case "dat" 'date
                Range(ctrl.Name).Value = DateValue(ctrl.Value)
            Case Else
        End Select
    Next ctrl
    On Error GoTo 0
End Sub


Public Sub CtrlFormat(ctrl As Object)
'    On Error GoTo done
    If LCase(Left(ctrl.Name, 3)) = "fra" Then Set ctrl = ctrl.ActiveControl
    Select Case LCase(Left(ctrl.Name, 3))
        Case "pct" 'pct
            ctrl.Text = Format(Range(ctrl.Name).Value, "0.0%")
        Case "cur" 'currency
            ctrl.Text = Format(ctrl.Value, "$0.00")
        Case "dat" 'date
            ctrl.Text = Format(ctrl.Value, "mm/dd/yyyy")
        Case Else
    End Select
Done:
End Sub

Public Sub TxtToPct(ctrl As Control, MaxDisc As Double)
    'Run in AfterUpdate event of textbox controls needing formatting: pctWhatever, curSaleTotal
    If Len(ctrl) = 0 Then ctrl = ctrl.Tag
    
    Dim ctrlVal As Double
    'remove % from string before validating
    If InStr(1, ctrl, "%") > 0 Then
        ctrlVal = Left(ctrl, InStr(1, ctrl, "%") - 1)
    Else
        ctrlVal = Trim(ctrl)
    End If
    
    'if whole number provided, convert to percentage
    If ctrlVal > 0.99 Then ctrlVal = ctrlVal / 100
    
    If ctrlVal > MaxDisc Then
        ctrlVal = MaxDisc
    ElseIf ctrlVal < 0 Then
        ctrlVal = 0
    Else
    End If
        
'Format value as percentage
    Range(ctrl.Name) = Format(ctrlVal, "0.0%")
    ctrl.Text = Format(ctrlVal, "0.0%")

'ColorCode
    If ctrlVal = 0 Then
        If ctrl.Tag = "Required" Then
            ctrl.BackColor = RequiredColor '&HC0C0FF 'pink - Required but zero
        Else
            ctrl.BackColor = &HFFFFFF 'white
        End If
    Else
        ctrl.BackColor = &HFFFFC0 'blue
    End If
End Sub

Public Function PctToValue(txt As String)
    If Right(txt, 1) <> "%" Then
        PctToValue = Val(txt)
        Exit Function
    End If
    PctToValue = Val(Left(txt, Len(txt) - 1)) / 100
End Function

Sub OpenForm(frmName As String)
    If Not IsQuote Then Exit Sub
    Dim frm As Object
    Set frm = VBA.UserForms.Add(frmName)
    If Not IsQuote Then Exit Sub
    With frm 'for users with dual monitor, centers within Excel window
      .StartUpPosition = 0
      .Left = Application.Left + (Application.Width - .Width) / 2
      .Top = Application.Top + (Application.Height - .Height) / 2
      .Show
    End With
    Unload frm
   DontPreviewQuote
End Sub

Sub RenameControlsFromUserForm()
TopPOS = 36    'Top row of table must be same position
stdHeight = 18 'All affected controls must be same height
tableRows = 10
'each column of controls must have same Left position

Dim VBP As Object
Dim VBC As Object
Dim cntrls As Controls
Dim cntrl As Control

Set VBP = ThisWorkbook.VBProject
For Each VBC In VBP.VBComponents
    With VBC
        If .Name = "frmCCWINV" Then
            For Each cntrl In .Designer.Controls
            If cntrl.Name = "tabInv_Sites" Then
                For Each pg In cntrl.Pages       'EACH PAGE
                For Each ctl In pg.Controls
                    'Write code for spinners
'                        If TypeName(ctl) = "SpinButton" Then CodeForSpinners (ctl.Name)
'                        If Left(ctl.Name, 3) = "str" Then CodeForStringFields ctl.Name
                         If pg.Caption = "Interfaces" Then
'                             If Left(ctl.Name, 3) = "chk" And IsNumeric(Right(ctl.Name, 1)) Then CodeForTotaledTxt ctl.Name
                             'If ctl.Name = "txtInv_CLexist4" Then Exit Sub
                         End If
                    'Find any control ending in 0
                    If Right(ctl.Name, 1) = "0" And _
                      ctl.Top = TopPOS And _
                      TypeName(ctl) <> "Label" Then 'Top Level item
                        'Debug.Print pg.Name & "." & ctl.Name & " : " & ctl.Top
                        'Get the left POS of ctl
                        LeftPOS = ctl.Left
                        'Find all other ctl with same LEFT POS and store Name & TOP POS to array
                        For Each OtherCtl In pg.Controls
                            If OtherCtl.Left = LeftPOS And OtherCtl.Top > ctl.Top And OtherCtl.Top <= (stdHeight * (tableRows - 1)) + TopPOS _
                              And OtherCtl.Name <> ctl.Name And TypeName(OtherCtl) <> "Label" Then
                                'Debug.Print OtherCtl.Name
                                newName = Left(ctl.Name, Len(ctl.Name) - 1) & (OtherCtl.Top - TopPOS) / stdHeight
                                'On Error Resume Next
                                OtherCtl.Name = newName
                            End If
                        Next OtherCtl
                    End If
                Next ctl
                Next pg
            End If
            Next cntrl
        End If
    End With
Next VBC
End Sub

Sub CodeForSpinners(ctrlName As String)
   'Write spinner code to Immediate window, IncrSpinner already includes ColorCode
    Debug.Print "Private Sub " & ctrlName & "_Change()"
    Debug.Print "    IncrSpinner Me.ActiveControl"
    Debug.Print "End Sub"
End Sub

Sub CodeForStringFields(ctrlName As String)
    Debug.Print "Private Sub " & ctrlName & "_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)"
    Debug.Print "    ColorCode ActiveControl"
    Debug.Print "End Sub"
End Sub

Sub CodeForTotaledTxt(ctrlName As String)
    Debug.Print "Private Sub " & ctrlName & "_Click()"
    Debug.Print "    TotalColumn"
    Debug.Print "End Sub"
End Sub

Attribute VB_Name = "modToolbar"
Public Function IsQuote() As Boolean
    IsQuote = (ActiveWorkbook.Sheets(1).Name = "Items") And (ActiveWorkbook.BuiltinDocumentProperties("Subject") = "CVIT Quote")
End Function

Public Sub fixToolbar()
'alert user if new version available, only if on VPN
Dim newbar As CommandBar
tbname = "CVIT Quote"

Dim CCWINVbutton As Boolean
'ValidSSOs = "500875078,212000158,212042174,212041800"
'NotValidYet = "212004425,212002253,212024828,212069340,212001949,212012040,212019681"
'If InStr(1, ValidSSOs, Environ("USERNAME")) Then CCWINVbutton = True

MakeToolBar:
'Delete existing toolbar
For Each bar In Application.CommandBars
    If bar.Name = tbname Then
        On Error Resume Next
        Application.CommandBars(tbname).Delete
        On Error GoTo 0
    End If
Next bar

'Create a new toolbar
Application.CommandBars.Add(Name:=tbname).Visible = True
Set newbar = CommandBars(tbname)
newbar.Position = msoBarTop

n = 1
AddButton newbar, n, "New CVIT Config", "OpenNewCVITQuote", 142, False, "Open a New Quote": n = n + 1
AddButton newbar, n, "&Cust", "OpenCustomer", 2141, False, "Customer Info": n = n + 1
AddButton newbar, n, "CCW", "OpenCCW", 102, False, "": n = n + 1
'If CCWINVbutton Then
    AddButton newbar, n, "CCW-Multi", "OpenCCWINV", 465, False, "Invasive Multisite Solution": n = n + 1
'End If
AddButton newbar, n, "UV", "OpenUV", 100, False, "": n = n + 1
AddButton newbar, n, "ZFP", "OpenZFP", 105, False, "": n = n + 1
AddButton newbar, n, "EA", "OpenEA", 84, False, "": n = n + 1
AddButton newbar, n, "Registry", "OpenCedaron", 97, False, "": n = n + 1
AddButton newbar, n, "UV Svcs", "OpenCCI_Services", 98, False, "": n = n + 1
AddButton newbar, n, "Hardware", "OpenCCI_Hardware", 87, False, "": n = n + 1
AddButton newbar, n, "CCI to UV", "OpenUpgradeCCItoUV", 82, False, "": n = n + 1
'AddButton newbar, n, "CCI Addons", "OpenCCI_AddOn", 0, False, "": n = n + 1
AddButton newbar, n, "Notes", "ConfigNotes", 175, False, "": n = n + 1
'AddButton newbar, n, "SOW", "OpenSOW", 42, False, "Create SOW in Word": n = n + 1
AddButton newbar, n, "Filter Items", "DontPreviewQuote", 188, False, "Show Selected and/or Optional items": n = n + 1
AddButton newbar, n, "Show All", "ShowAllRows", 123, False, "Show all items": n = n + 1
AddButton newbar, n, "Save", "SaveQuoteFile", 3, False, "Save using Quote Number": n = n + 1

'GetPublishedVersion 'if network connection to database fails don't sweat it
AddinDate = GetDateLastModified(TemplatePath & TemplateFile)
Dim VersionDate As Date
VersionDate = WorksheetFunction.Max(CVIT_Quote.ThisWorkbook.BuiltinDocumentProperties("Last save time"), AddinDate)

If PublishedVersion = 0 Then 'Unknown, not online
    AddButton newbar, n, Format(VersionDate, "mm.dd.yy"), "LaunchCardioWebsite", 926, _
        False, "Connect to VPN and click to download new CVIT Configurator.": n = n + 1
ElseIf VersionDate >= PublishedVersion Then 'Current
    AddButton newbar, n, Format(VersionDate, "mm.dd.yy"), "LaunchCardioWebsite", 161, _
        False, "Your Configurator version is current: " & Format(VersionDate, "mm/dd/yy"): n = n + 1
Else 'NOT current
    AddButton newbar, n, Format(VersionDate, "mm.dd.yy"), "LaunchCardioWebsite", 964, _
        False, "UPDATE! Click to get latest CVIT Configurator. Latest version is " & Format(PublishedVersion, "mm/dd/yy"): n = n + 1
End If
End Sub

Private Sub AddButton(bar As CommandBar, pos, xCaption, xOnAction, xFaceID, BuiltIn As Boolean, xTooltip As String)
    If BuiltIn Then
      bar.Controls.Add msoControlButton, xFaceID
        With bar.Controls(pos)
        .BeginGroup = True
        .Style = msoButtonCaption
        End With
    Else
      bar.Controls.Add msoControlButton
        With bar.Controls(pos)
        .BeginGroup = True
        .Caption = xCaption
        .OnAction = xOnAction
        .Style = msoButtonIconAndCaption
        If xFaceID = 0 Then .Style = msoButtonCaption
        .FaceId = xFaceID
        .TooltipText = xTooltip
        End With
    End If
End Sub

Function GetDateLastModified(strFilePathName As String) As Date
    Dim oFS As Object    'MS Scripting Runtime FileSystemObject class
    Set oFS = CreateObject("Scripting.FileSystemObject")
    GetDateLastModified = oFS.GetFile(strFilePathName).Datelastmodified
    Set oFS = Nothing
End Function


Sub LaunchCardioWebsite()
fixToolbar 'to refresh the version date display on button if necessary
Dim siteURL As String
ret = MsgBox("Remember to exit from Excel now so you can run the installer and update the CVIT macros", vbOKOnly)
If ret = vbNo Then Exit Sub
siteURL = "http://usmkeeamslsv01.logon.ds.ge.com/CVIT/"
On Error Resume Next
    Err.Clear
    ActiveWorkbook.FollowHyperlink siteURL, , True, False
    If Err <> 0 Then InputBox "Copy/paste to your browser to download the update:", "Unable to load Internet Explorer", siteURL
    Err.Clear
On Error GoTo 0
End Sub

Sub SaveQuoteFile()
If Not IsQuote Then Exit Sub

Dim ProposedFileName As String
    ProjName = Range("strProjName").Text
    If ProjName = "" Then
        OpenForm "frmCustomer"
        ProjName = Range("strProjName").Text
    End If
    If Trim(Range("txtRevision").Text) <> "" Then
        Revision = " REV" & Range("txtRevision").Text
    Else
        Revision = ""
    End If
    ProposedFileName = Trim(Range("strHosp_Name")) & " " & Range("strHosp_City") & " " & Range("strHosp_State") & " " & Format(Date, "MMYY") & "-" & ProjName & Revision
    ProposedFileName = CharReplace(ProposedFileName)
    
    If Len(ProposedFileName) > 100 Then
        MsgBox "This filename might be TOO LONG for Outlook to handle.  Adjust the filename to shorten it by about " & Len(ProposedFileName) - 100 & " characters" & Chr(10) & _
            "or shorten the REFERENCE field text on the Customer menu to fix this permanently for this file."
    End If
    
    dlg = Application.Dialogs(xlDialogSaveAs).Show(ProposedFileName, xlOpenXMLWorkbookMacroEnabled)
End Sub

Function CharReplace(Text As String)
'Replaces invalid characters with spaces
'Used to cleanup proposed file name in SaveWorkbook subroutine
Dim BadChar(1 To 20) As String
CharReplace = Text

BadChar(1) = "\"
BadChar(2) = ","
BadChar(3) = "."
BadChar(4) = "*"
BadChar(5) = "/"
BadChar(6) = "?"
BadChar(7) = ":"
BadChar(8) = "["
BadChar(9) = "]"
BadChar(10) = "&" 'changed from hyphen 5/24/11
BadChar(11) = ")"
BadChar(12) = "("
BadChar(13) = ";"
BadChar(14) = "'"
BadChar(15) = "-"

pos = 0

SetBadChar:
    X = X + 1
    If X > 15 Then GoTo AllDone
ReplaceChars:
    pos = InStr(pos + 1, CharReplace, BadChar(X))
    If pos > 0 Then
        CharReplace = Left(CharReplace, pos - 1) + " " + Mid(CharReplace, pos + 1, 100)
        GoTo ReplaceChars
    End If
    GoTo SetBadChar
AllDone:
End Function


' InQuest injected base64 decoded content
' jT.j{bz
' *'jQh
' -"{^
' zj-y'
' 0"{^
' x(^rF
' *'~(

INQUEST-PP=macro
