Attribute VB_Name = "Module1"
'Option Explicit
Const row_count = 503
Global business_incm As String
Global sole As String
Dim varr As String
Global ERR_COUNT As Integer
Public Const MsgDate = "Please enter date in dd-mon-yyyy format only."
Public Const MsgMandat = "Please Enter data as the Field marked with * is mandatory."
Global acc_cnt As Integer
Global err_flag As Boolean
Global err_flg As Boolean
Global err_flg2 As Boolean
Global err_flg3 As Boolean
Global var1 As String

Private Sub MyMacro()
    For i = 1 To 10
        If (ActiveSheet.Cells(i, 1).Locked = False) Then
            ActiveSheet.Cells(i, 1).Select
            Exit Sub
        End If
    Next i
End Sub

'Public Sub Generate_upload()
'On Error GoTo Errorhandle
'Dim fname, curbook, cursheet, totr, totc, bigmsg
'Dim filesavename As String, Encrypt As String
'Dim filename As String
'Dim path As String
'Dim row_count As Integer
'Dim i As Integer
'Dim newbook, newbook1 As Object
'Application.EnableEvents = False
'Application.ScreenUpdating = False
'
'row_count = Sheets("Sheet1").UsedRange.Rows.count
'
'curbook = ActiveWorkbook.Name
'cursheet = "Details"
'
'Set newbook = CreateObject("Excel.sheet")
' filesavename = Application.GetSaveAsFilename( _
'        filefilter:="Excel Files (*.xls), *.xls")
'
'path = Mid(filesavename, 1, Len(filesavename) - InStr(1, StrReverse(filesavename), "\"))
'filename = Mid(filesavename, Len(filesavename) - InStr(1, StrReverse(filesavename), "\") + 2)
'filename = Left(filename, Len(filename) - 4) & "_upload.csv"
' ChDir path
' ' Code to handle MS Excel Version issue
'    If Application.Version >= 12 Then
'     newbook.SaveAs filename:=filename, FileFormat:=xlCSV, CreateBackup:=False
'   Else
'    newbook.SaveAs filename:=filename
'   End If
'
''newbook.SaveAs filename:=filename
'Set newbook = Nothing
'Set newbook1 = GetObject(filename)
'Workbooks(curbook).Activate
'Worksheets(cursheet).Activate
'ActiveSheet.Unprotect Password:="ITC@2011"
''ActiveSheet.Range("A1").Value = "ITC"
''ActiveSheet.Range("A2").Value = "v1ITC"
''ActiveSheet.Range("A3").Value = "Y"
'Range(Cells(1, 1), Cells(row_count, 1)).Select
'Selection.Copy
'Windows(filename).Activate
'Selection.PasteSpecial Paste:=xlValues
'Selection.ColumnWidth = 0
'
'With Selection.Validation
'        .Delete
'        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
'        :=xlBetween
'        .IgnoreBlank = True
'        .InCellDropdown = True
'        .ShowInput = True
'        .ShowError = True
'    End With
'ActiveSheet.Columns("A:A").ColumnWidth = 0
'ActiveSheet.Columns("L:L").ColumnWidth = 0
'ActiveSheet.Columns("K:K").ColumnWidth = 0
'ActiveSheet.Columns("M:M").ColumnWidth = 0
'ActiveSheet.Name = "Sheet1"
'' encryption function
''    For i = 1 To row_count
''        'Encrypt = EncryptDecrypt(ActiveSheet.Cells(i, 1).Value)
''        Encrypt = ActiveSheet.Cells(i, 1).Value
''        ActiveSheet.Cells(i, 1).Value = Encrypt
''    Next i
'
''    ActiveSheet.Cells(1, 11).Value = "ITC"
''    ActiveSheet.Cells(1, 12).Value = "v1ITC"
''ActiveSheet.Cells(1, 13).Value = "Y"
''ActiveSheet.Cells(1, 2).Value = "This sheet have hidden data please do not try to alter this file."
'ActiveSheet.Cells(1, 2).Activate
'ActiveSheet.Cells.Locked = True
'ActiveSheet.Protect Password:="ITC@2011"
'ActiveWorkbook.Close savechanges:=True
'
'Sheet1.Visible = xlSheetVeryHidden
''Sheet8.Activate
'ActiveWindow.WindowState = xlMaximized
'MsgBox ("No Error Found,Upload file is saved : """ & path & "\" & filename & """.")
'
'Exit Sub
'
'Errorhandle:
'Sheet1.Visible = xlSheetVeryHidden
'
'    MsgBox ("Modifications Are Not Saved,Upload File Not Generated") '& Err.Description)
'    ActiveWindow.WindowState = xlMaximized
'
'    Exit Sub
'    Resume
'
'   Application.EnableEvents = True
'    Application.ScreenUpdating = True
'End Sub
Public Sub gen_csv()
Dim cnts As Long
'cnts = Sheet1.UsedRange.Rows.count

'If (cnts > 2) Then
On Error GoTo Errorhandle
Dim fname, curbook, cursheet, totr, totc, bigmsg
Dim filesavename As String, Encrypt As String
Dim filename As String
Dim path As String
Dim i As Integer
Dim newbook, newbook1 As Object
curbook = ActiveWorkbook.Name
cursheet = "Details"
'Sheet1.Visible = xlSheetVisible
Set newbook = CreateObject("Excel.sheet")
filesavename = Application.GetSaveAsFilename( _
filefilter:="Excel Files (*.xls),*.xls")
path = Mid(filesavename, 1, Len(filesavename) - InStr(1, StrReverse(filesavename), "\"))
filename = Mid(filesavename, Len(filesavename) - InStr(1, StrReverse(filesavename), "\") + 2)
filename = Left(filename, Len(filename) - 4) & "_upload.csv"

ActiveWorkbook.SaveAs filename:=filename, FileFormat:=xlCSV, CreateBackup:=False
'ActiveSheet.Name = "Details"
MsgBox ("No Error Found, Upload File is saved at : """ & path & "\" & filename & """.")
ActiveWorkbook.Close savechanges:=True
Exit Sub
Errorhandle:
    MsgBox ("Modifications Are Not Saved,Upload File Not Generated") '& Err.Description)
    ActiveWindow.WindowState = xlMaximized

    Exit Sub
    Resume
'Else
'MsgBox ("You Can Not Upload Blank Excel Sheet,Upload File Not Generated")
'End If
End Sub
Public Function rowCount(sheet As String)
Application.EnableEvents = False
Sheet3.Unprotect Password:="ITC@2011"
Sheet3.Activate
Sheet3.Columns("A:A").Select
        Selection.Find(What:="Sheet1 ends here", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
        count1 = ActiveCell.row - 2
Sheet3.Protect Password:="ITC@2011"

'Sheet5.Unprotect Password:="ITC@2011"
'Sheet5.Activate
'Sheet5.Columns("A:A").Select
'        Selection.Find(What:="Sheet5 ends here", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
'        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
'        False, SearchFormat:=False).Activate
'        count2 = ActiveCell.row - 2
'Sheet5.Protect Password:="ITC@2011"


End Function
Public Sub InsertRowsAndFillFormulas2(sht_name As String, start_row As Long, row_no As Long, insert_sheet_nm As String, row_insert As Long, Optional vrows As Long = 0)

Sheets(sht_name).Unprotect Password:="ITC@2011"
   Dim x As Long
   Dim z As Long
Sheets(sht_name).Activate

ActiveSheet.Cells(row_no, 1).Select
   ActiveCell.EntireRow.Select
       If vrows = 0 Then
    vrows = Application.InputBox(prompt:= _
      "How many rows do you want to add?", Title:="Add Rows", _
      Default:=1, Type:=1) 'Default for 1 row, type 1 is number
End If

  z = 40000 - vrows + 2
    If vrows <= 0 Then
        MsgBox ("The number of rows to be added should be greater than 0.")
        ActiveSheet.Protect Password:="ITC@2011"
        Exit Sub
    End If
    If vrows > z Then
        MsgBox ("Maximum number of data rows allowed is 40000." & vbCrLf & "You can add only " & z & " more rows.")
        ActiveSheet.Protect Password:="ITC@2011"
        Exit Sub
    End If
    
    If vrows = False Then
        ActiveSheet.Protect Password:="ITC@2011"
        Exit Sub
    End If


   Dim Sht As Worksheet, shts() As String, i As Long
   ReDim shts(1 To Worksheets.Application.ActiveWorkbook. _
       Windows(1).SelectedSheets.count)
   i = 0

   For Each Sht In _
       Application.ActiveWorkbook.Windows(1).SelectedSheets
    Sheets(Sht.Name).Select
    i = i + 1
    shts(i) = Sht.Name

 ' On Error GoTo Errorcatch
Application.EnableEvents = False
    Selection.Resize(rowsize:=2).Rows(2).EntireRow. _
     Resize(rowsize:=vrows).Insert Shift:=xlDown


    Application.EnableEvents = False
Sheets(sht_name).Unprotect Password:="ITC@2011"

    Selection.AutoFill Selection.Resize( _
     rowsize:=vrows + 1), xlFillDefault

On Error Resume Next


    Range("A" & CStr(row_no + 1) & ":J" & CStr(row_no + vrows)).Select
    Selection.SpecialCells(xlConstants).ClearContents

   Next Sht

    'Call InsertRowsAndFillFormula2(insert_sheet_nm, vrows, row_insert)

   Sheets(sht_name).Activate
   Cells(row_no, 1).Select
   ActiveSheet.Protect Password:="ITC@2011"


End Sub
'Public Sub InsertRowsAndFillFormula2(insert_sheet_nm As String, vrows As Long, row_insert As Long)
'Dim str As String
'Sheets(insert_sheet_nm).Activate
'ActiveSheet.Unprotect Password:="ITC@2011"
'Sheets(insert_sheet_nm).Visible = xlSheetVisible
'ActiveSheet.Cells(row_insert, 1).Select
'ActiveCell.EntireRow.Select   'So you do not have to preselect entire row
'Dim Sht As Worksheet, shts() As String, i As Long
'ReDim shts(1 To Worksheets.Application.ActiveWorkbook. _
'Windows(1).SelectedSheets.count)
'i = 0
'For Each Sht In _
'       Application.ActiveWorkbook.Windows(1).SelectedSheets
'    Sheets("Sheet1").Select
'     i = i + 1
'    shts(i) = Sht.Name
'    Selection.Resize(rowsize:=2).Rows(2).EntireRow. _
'     Resize(rowsize:=vrows).Insert Shift:=xlDown
'
'    Selection.AutoFill Selection.Resize( _
'     rowsize:=vrows + 1), xlFillDefault
'    On Error Resume Next
'    Selection.Offset(1).Resize(vrows).EntireRow. _
'     SpecialCells(xlConstants).ClearContents
'   Next Sht
'      ActiveSheet.Protect Password:=excelVAT
'      Sheets(insert_sheet_nm).Visible = xlSheetHidden
'End Sub

Public Sub Deleterows(sht_name As String, start_row As Long, row_no As Long, insert_sheet_nm As String, row_insert As Long, Optional vrows As Long = 0)
   Dim x As Long
   Dim y As Long
   Dim z As Long
   Dim count As Long
   Dim flag As String

ActiveSheet.Unprotect Password:="ITC@2011"
    If vrows = 0 Then
        vrows = Application.InputBox(prompt:= _
        "How many rows do you want to delete?", Title:="Delete Rows", _
        Default:=1, Type:=1) 'Default for 1 row, type 1 is number
    End If
    If vrows < 0 Or vrows = 0 Then
        MsgBox ("The number of rows to be deleted should be greater than 0. ")
        ActiveSheet.Protect Password:="ITC@2011"
        Exit Sub
    End If

Sheet3.Activate
'Sheet3.Columns("A:A").Select
'        Selection.Find(What:="Sheet1 ends here", After:=ActiveCell, LookIn:=xlFormulas, LookAt _
'        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
'        False, SearchFormat:=False).Activate
count1 = Range("totalAddRow").Rows.count + 1
        'count1 = ActiveCell.row - 2
Sheet3.Protect Password:="ITC@2011"


    Sheets(sht_name).Activate
  If sht_name = "Details" Then
    x = count1
    ElseIf sht_name = "PART-II" Then
    x = count2
   End If
    

 z = x - 50
    If x - vrows < 50 Then
        MsgBox ("Minimum Number of data rows has to be 50." & vbCrLf & "You can delete only " & z & " more rows.")
        ActiveSheet.Protect Password:="ITC@2011"
        Exit Sub
 End If
 If vrows = False Then
        ActiveSheet.Protect Password:="ITC@2011"
      Cells((row_no - vrows), 1).Select

        Exit Sub
    End If
count = 0
    For count = row_no - vrows + 1 To row_no
        If (Len(Trim(ActiveSheet.Cells(count, 1))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 2))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 3))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 9))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 4))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 5))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 6))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 7))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 8))) <> 0 Or Len(Trim(ActiveSheet.Cells(count, 10))) <> 0) Then
            flag = "yes"
        End If
    Next count
    If flag = "yes" Then
    Sheets(sht_name).Unprotect Password:="ITC@2011"
        If MsgBox("You have entered Data in the rows selected for deletion. " & vbCrLf & "Do you want to proceed?", vbYesNo + vbQuestion) = vbYes Then
             Range("A" & CStr(row_no - vrows + 1) & ":J" & CStr(row_no)).Select
            Selection.Delete Shift:=xlUp
    
            'Call Deleterows1(insert_sheet_nm, vrows, row_insert)
            Sheets(sht_name).Protect Password:="ITC@2011"
            Sheets(sht_name).Activate
            Cells((row_no - vrows), 1).Select
            Exit Sub
        End If
    Else
    ActiveSheet.Unprotect Password:="ITC@2011"
        Range("A" & CStr(row_no - vrows + 1) & ":J" & CStr(row_no)).Select
        Selection.Delete Shift:=xlUp
Range("A" & CStr((row_no - vrows) + 3) & ":j" & CStr(ActiveSheet.UsedRange.Rows.count)).Select
     Selection.ClearContents
       Selection.EntireRow.Hidden = True
        'Call Deleterows1(insert_sheet_nm, vrows, row_insert)
        ActiveSheet.Protect Password:="ITC@2011"
    End If

 Sheets(sht_name).Activate
 ActiveSheet.Protect Password:="ITC@2011"
Cells((row_no - vrows), 1).Select
End Sub
'Public Sub Deleterows1(insert_sheet_nm As String, vrows As Long, row_insert As Long)
'   Sheets(insert_sheet_nm).Activate
'    ActiveSheet.Unprotect Password:="ITC@2011"
'    ActiveSheet.Visible = xlSheetVisible
'    ActiveSheet.Range("A" & CStr(row_insert - vrows + 1) & ":B" & CStr(row_insert)).Select
'    Selection.Delete Shift:=xlUp
'    ActiveSheet.Protect Password:="ITC@2011"
'    ActiveSheet.Visible = xlSheetHidden
'End Sub
Public Function Validate_Date1(dat As String) As Boolean

Dim a As Integer
a = 0
Dim b As Integer
b = 0
Dim C As String
C = 0
Dim dt As String
Dim yr As String

Validate_Date1 = False
If IsDate(dat) = True Then
    a = InStr(dat, "-")
    b = InStr(a + 1, dat, "-")
    
If a > 0 And b > 0 Then
        C = Mid(dat, a + 1, b - a - 1)
        dt = Mid(dat, 1, a - 1)
        yr = Mid(dat, b + 1, Len(dat) - b)
If Len(yr) = 4 And TestNumber(yr) = True Then
            If Len(dt) = 2 And TestNumber(dt) = True And dt > 0 And dt < 32 Then
            If TestAlphabate(C) = True And Len(C) = 3 Then
                    Validate_Date1 = True
                Else
                    Validate_Date1 = False
            End If
            End If
        End If
    Else
        Validate_Date1 = False
    End If
End If
End Function
Public Function TestAlphanumeric(lstr_check As String) As Boolean
'allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphanumeric = True
Else
    TestAlphanumeric = False
End If

End Function


Public Function Validate_Date(dat As String) As Boolean
Dim a As Integer
a = 0
Dim b As Integer
b = 0
Dim C As String
C = 0
Dim dt As String
Dim yr As String

Validate_Date = False
If IsDate(dat) = True Then
    a = InStr(dat, "-")
    b = InStr(a + 1, dat, "-")

    If a > 0 And b > 0 Then
        C = Mid(dat, a + 1, b - a - 1)
        dt = Mid(dat, 1, a - 1)
        yr = Mid(dat, b + 1, Len(dat) - b)
        If Len(yr) = 4 And TestNumber(yr) = True Then
            If Len(dt) = 2 And TestNumber(dt) = True And dt > 0 And dt < 32 Then
                If TestAlphabate(C) = True And Len(C) = 3 Then
                    Validate_Date = True
                Else
                    Validate_Date = False
                End If
            End If
        End If
    Else
        Validate_Date = False
    End If
End If
End Function
Public Function TestAlphabatewithSpace(lstr_check As String) As Boolean
'allowed characters A to Z, a to z
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer
stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabatewithSpace = True
Else
    TestAlphabatewithSpace = False
End If

End Function

Public Function TestAlphabateSellingDealer(lstr_check As String) As Boolean
'allowed characters A to Z, a to z
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer
stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case "."                 ' .
            ia = ia + 1
        Case "/"                 ' /
            ia = ia + 1
        Case "\"                 ' \
            ia = ia + 1
        Case "-"                 ' -
            ia = ia + 1
        Case "&"                 ' &
            ia = ia + 1
         Case ","                 ' ,
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabateSellingDealer = True
Else
    TestAlphabateSellingDealer = False
End If

End Function
Public Function TestAlphabate(lstr_check As String) As Boolean
'allowed characters A to Z, a to z
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer
stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphabate = True
Else
    TestAlphabate = False
End If

End Function
Public Sub error_final()
If (err_flag = True) Then
 Sheet1.Activate
 MsgBox "Error found! Please check ""Error"" sheet for error."
Sheet1.Visible = xlSheetVisible
Sheet1.Activate
Sheet1.Protect Password:="ITC@2011"

Else
   'Sheet4.Activate
   Sheet1.Visible = xlSheetVeryHidden

    If MsgBox("No error found in sheet. " & vbCrLf & "Do you want to generate Upload file?", vbYesNo + vbQuestion) = vbYes Then
    Application.ScreenUpdating = False
    
    Call gen_csv
    End If
  End If
End Sub

Public Function printErrorStack_2(errline_index As Long, col_no As Long, field As String, err_disc As String) As Integer
      Sheet1.Cells(errline_index, 4) = ERR_COUNT
      Sheet1.Cells(errline_index, 5) = col_no
      Sheet1.Cells(errline_index, 6) = field
      Sheet1.Cells(errline_index, 7) = err_disc
      printErrorStack_2 = errline_index + 1
        ERR_COUNT = ERR_COUNT + 1
      err_flag = True
End Function
Public Sub module_change_color(sheet_name As String, row As Integer, col As Integer, target_col As Integer)

   If (StrConv(Mid(Worksheets(sheet_name).Cells(row, col).Value, 1, 5), vbUpperCase) = "OTHER") Then
                Worksheets(sheet_name).Cells(row, target_col).Locked = False
                Worksheets(sheet_name).Cells(row, target_col).Select
                With Selection.Interior
                  .Pattern = 1
                End With


Else

                Worksheets(sheet_name).Cells(row, target_col).Locked = True
                Worksheets(sheet_name).Cells(row, target_col) = ""
                Worksheets(sheet_name).Cells(row, target_col).Select
                With Selection.Interior
                .Pattern = 16
                End With
 End If
End Sub
Public Function TestAlphanumericWithspce(lstr_check As String) As Boolean
'allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphanumericWithspce = True
Else
    TestAlphanumericWithspce = False
End If

End Function
Public Function TestAlphanumericVatInvoice(lstr_check As String) As Boolean
'allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case "/"                 ' /
            ia = ia + 1
        Case "\"                 ' \
            ia = ia + 1
        Case "-"                 ' -
            ia = ia + 1
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphanumericVatInvoice = True
Else
    TestAlphanumericVatInvoice = False
End If

End Function
Public Function TestAlphanumericsellingdealer(lstr_check As String) As Boolean
'allowed characters A to Z, a to z And Blank
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "A" To "Z"          'A to Z
            ia = ia + 1
        Case "a" To "z"          'a to z
            ia = ia + 1
        Case " "                 ' Blank
            ia = ia + 1
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        Case "."                 '.
        ia = ia + 1
        Case ","                 ',
        ia = ia + 1
        Case "/"                 '/
        ia = ia + 1
        Case "'"                 ''
        ia = ia + 1
        Case ":"                 ':
        ia = ia + 1
        Case ";"                 ';
        ia = ia + 1
        Case "\"                 '\
        ia = ia + 1
        Case "-"                 '-
        ia = ia + 1
        Case ")"                 ')
        ia = ia + 1
        Case "("                 '(
        ia = ia + 1
        Case "*"                 '*
        ia = ia + 1
        Case "&"                 '&
        ia = ia + 1
        Case "^"                 '^
        ia = ia + 1
        Case "%"                 '%
        ia = ia + 1
        Case "$"                 '$
        ia = ia + 1
        Case "#"                 '#
        ia = ia + 1
        Case "@"                 '@
        ia = ia + 1
        Case "!"                 '!
        ia = ia + 1
        Case "`"                 '`
        ia = ia + 1
        Case "~"                 '~
        ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestAlphanumericsellingdealer = True
Else
    TestAlphanumericsellingdealer = False
End If

End Function

Public Function TestCurrency(lstr_check As String) As Boolean
'allowed characters 0 to 9 and .
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
       Case "."
        ia = ia + 1
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestCurrency = True
Else
    TestCurrency = False
End If

End Function

Public Function Chk_Dropdown(cursheet As String, Cur_row_num As Long, Cur_clm_num As Integer, Clm_num As Integer, start_row As Integer, End_row As Integer) As Boolean
Chk_Dropdown = False
Worksheets(cursheet).Activate
For i = start_row To End_row
            If ActiveSheet.Cells(Cur_row_num, Cur_clm_num) = Sheet7.Cells(i, Clm_num) Then
            Chk_Dropdown = True
            End If
Next i

End Function
Public Function Chk_Dropdown_1(curval As String, Clm_num As Integer, start_row As Integer, End_row As Integer) As Boolean
Chk_Dropdown_1 = False
Dim i As Integer
For i = start_row To End_row
            If curval = Sheet7.Cells(i, Clm_num) Then
            Chk_Dropdown_1 = True
            End If
Next i

End Function
Public Function TestNumber(lstr_check As String) As Boolean
'allowed characters 0 to 9 and .
Dim i As Integer
Dim ia As Integer
Dim ina As Integer
Dim stlen As Integer

stlen = Len(lstr_check)
ia = 0
ina = 0
For i = 1 To stlen
    Select Case (Mid(lstr_check, i, 1))
        Case "0" To "9"          '0 to 9
        ia = ia + 1
        Case Else
            ina = ina + 1
    End Select
Next i
If ina = 0 Then
    TestNumber = True
Else
    TestNumber = False
End If

End Function

'Function compareDates(date1 As String, date2 As String, date3 As String) As Boolean
'compareDates = True
'
'Dim date1Cmp As String
'Dim date2Cmp As String
'
'date1Cmp = UCase(Format(date1, "dd/mm/yyyy")) 'period from
'date2Cmp = UCase(Format(date2, "dd/mm/yyyy"))  'period to
'date3Cmp = UCase(Format(date3, "dd/mm/yyyy")) 'target cell value
'
'If DateValue(date3Cmp) > DateValue(date1Cmp) Then
'compareDates = False
'ElseIf DateValue(date3Cmp) < DateValue(date2Cmp) Then
'compareDates = False
'Else
'compareDates = True
'End If
'
'
'End Function
Function compareDates(date1 As String, date2 As String, date3 As String) As Boolean
compareDates = True



If UCase(date3) < UCase(date1) Then
compareDates = False
Else
If UCase(date3) > UCase(date2) Then
compareDates = False
End If
End If


End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
        Option Explicit
Sub validate_PARTI()
Dim int_val(90) As String
Dim et As Double
Dim et1 As Double
Dim counter_val As Long
Dim v_sec_prod As String
Dim err_ind As Long
Dim v2 As String
ERR_COUNT = 1
Dim mydate As Date
mydate = Day(Date) & "/" & Month(Date) & "/" & Year(Date)
Dim x As Long
err_flag = False
Sheet3.Unprotect Password:="ITC@2011"
Application.EnableEvents = False
Application.ScreenUpdating = False

'MsgBox Range("totalAddRow").Rows.count
x = Range("totalAddRow").Rows.count + 1
'x = Application.WorksheetFunction.Match("Sheet1 ends here", Sheet3.Range("A1:A" & Sheet3.UsedRange.Rows.count), 0) - 2
err_ind = 6

Sheet1.Unprotect Password:="ITC@2011"

Sheet1.Visible = xlSheetVisible
With Sheet1
.Range("C4:G" & Sheet1.UsedRange.Rows.count).ClearContents
.Cells(err_ind, 3) = "Details"
err_ind = err_ind + 1
    End With
    


If (Len(Trim(Sheet3.Cells(3, 6))) = 0 And Len(Trim(Sheet3.Cells(3, 2))) = 0 And Len(Trim(Sheet3.Cells(3, 3))) = 0 And Len(Trim(Sheet3.Cells(3, 4))) = 0 And Len(Trim(Sheet3.Cells(3, 5))) = 0) Then
'err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 1), MsgMandat)
err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 2), MsgMandat)
err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 3), MsgMandat)
err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 4), MsgMandat)
err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 5), MsgMandat)
err_ind = printErrorStack_2(err_ind, 3, Sheet3.Cells(2, 6), MsgMandat)
End If

For counter_val = 3 To x
Select Case counter_val

Case 3 To x

If (Len(Trim(Sheet3.Cells(counter_val, 6))) = 0 And Len(Trim(Sheet3.Cells(counter_val, 2))) = 0 And Len(Trim(Sheet3.Cells(counter_val, 3))) = 0 And Len(Trim(Sheet3.Cells(counter_val, 4))) = 0 And Len(Trim(Sheet3.Cells(counter_val, 5))) = 0) Then
Else


'TIN
        If (Len(Trim(Sheet3.Cells(counter_val, 2))) = 0) Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 2), MsgMandat)
        ElseIf (TestNumber(Sheet3.Cells(counter_val, 2)) = False) Or Len(Sheet3.Cells(counter_val, 2)) <> 11 Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 2), "Please enter correct TIN of 11 Digits.")
        End If

        If (Mid(Sheet3.Cells(counter_val, 2), 1, 2) <> "08") Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 2), "Please enter only TIN of Rajasthan.")
        End If

'VAT Invoice No

        If (Len(Trim(Sheet3.Cells(counter_val, 3))) = 0) Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 3), MsgMandat)
        ElseIf TestAlphanumericVatInvoice(Sheet3.Cells(counter_val, 3)) = False Or Len(Sheet3.Cells(counter_val, 3)) > 50 Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 3), "Please enter alphanumeric data of length less than equal to 50 characters.Special characters are not allowed except space and (\-/)")
        End If


'Date of VAT Invoice
   If Len(Sheet3.Cells(counter_val, 4)) = 0 Then
    err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 4), MsgMandat)
    ElseIf (Validate_Date(Sheet3.Cells(counter_val, 4).Value) = False) Then
    err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 4), MsgDate)
    ElseIf (DateDiff("d", Format(Format(Sheet3.Cells(counter_val, 4), "dd/mm/yyyy"), "dd/mm/yyyy"), Format(mydate, "dd/mm/yyyy"))) < 0 Then
    err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 4), "Please do not enter future date.")
'''''''''''''''''''''''''''''''''''''''Future date
'    ElseIf ((CDate(Sheet3.Cells(counter_val, 3))) < (CDate(Sheet2.Cells(7, 4)))) Or ((CDate(Sheet3.Cells(counter_val, 3))) > (CDate(Sheet2.Cells(8, 4)))) Then
'    err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 3), "Please enter date in mentioned quarter only.")
   End If


'    ElseIf compareDates(Sheet2.Cells(8, 4), Sheet2.Cells(9, 4), Sheet3.Cells(counter_val, 6)) = False Then
'    err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 6), "Please enter date in mentioned quarter only.")
'    End If


   'Purchase value
    If (Len(Trim(Sheet3.Cells(counter_val, 5))) = 0) Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 5), MsgMandat)
        ElseIf TestCurrency(Sheet3.Cells(counter_val, 5)) = False Or Len(Sheet3.Cells(counter_val, 5)) > 16 Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 5), "Enter numeric value of length less than or equal to 16 digits including 2 decimal places.")
    End If

    'Tax
    If (Len(Trim(Sheet3.Cells(counter_val, 6))) = 0) Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 6), MsgMandat)
        ElseIf TestCurrency(Sheet3.Cells(counter_val, 6)) = False Or Len(Sheet3.Cells(counter_val, 6)) > 16 Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 6), "Enter numeric value of length less than or equal to 16 digits including 2 decimal places.")
        ElseIf (Sheet3.Cells(counter_val, 6).Value > Sheet3.Cells(counter_val, 5).Value) Then
            err_ind = printErrorStack_2(err_ind, counter_val, Sheet3.Cells(2, 6), "Amount of tax paid can not be greater than purchase amount.")
    End If

    et = Application.WorksheetFunction.CountIfs(Sheet3.Range("D" & counter_val + 1 & ":D" & Sheet3.UsedRange.Rows.count), Sheet3.Cells(counter_val, 4), Sheet3.Range("B" & counter_val + 1 & ":B" & Sheet3.UsedRange.Rows.count), Sheet3.Cells(counter_val, 2), Sheet3.Range("C" & counter_val + 1 & ":C" & Sheet3.UsedRange.Rows.count), Sheet3.Cells(counter_val, 3))
    If (et > 0) Then
        err_ind = printErrorStack_2(err_ind, counter_val, "TIN", "Please do not enter Duplicate Invoice no. and Invoice Date for same TIN")
    End If


End If
End Select


    If (ERR_COUNT >= 40) Then
      Sheet3.Visible = xlSheetVisible
      Sheet3.Activate

     MsgBox "Error found! Please check ""Error"" sheet for error."
Application.EnableEvents = True
Sheet3.Protect Password:="ITC@2011"
      Exit Sub
      End If
Next counter_val


Sheet3.Protect Password:="ITC@2011"
Call error_final
Sheet3.Protect Password:="ITC@2011"

Application.EnableEvents = True
Application.ScreenUpdating = True

End Sub
'add
Sub button9_click()
Sheet3.Unprotect Password:="ITC@2011"
Application.ScreenUpdating = False
Application.EnableEvents = False

Call AddDelete(1)

Application.EnableEvents = True
Application.ScreenUpdating = True
Sheet3.Protect Password:="ITC@2011"
End Sub
'delete
Sub button14_click()
Sheet3.Unprotect Password:="ITC@2011"
Application.ScreenUpdating = False
Application.EnableEvents = False

Call AddDelete(0)

Application.EnableEvents = True
Application.ScreenUpdating = True
Sheet3.Protect Password:="ITC@2011"
End Sub
Sub AddDelete(flg As Integer)
Application.ScreenUpdating = False
Application.EnableEvents = False

Dim row_insert   As Long
Dim start_row As Long
Dim count_info As Long
Dim FIND_ROW As Long
'Call rowCount("Details")
start_row = 3


Sheet3.Unprotect Password:="ITC@2011"
Application.ScreenUpdating = False
Application.EnableEvents = False

count_info = 1
FIND_ROW = Range("totalAddRow").Rows.count + 1
'FIND_ROW = Application.WorksheetFunction.Match("Sheet1 ends here", Sheet3.Range("A1:A" & Sheet3.UsedRange.Rows.count), 0) - 2


   row_insert = count_info + FIND_ROW + 3

If flg = 1 Then
    Call InsertRowsAndFillFormulas2(Sheet3.Name, start_row, FIND_ROW, "Details", row_insert)
Else
    Call Deleterows(Sheet3.Name, start_row, FIND_ROW, "Details", row_insert)
End If
Sheet3.Unprotect Password:="ITC@2011"
Application.EnableEvents = False
Application.ScreenUpdating = False
'Call Sum1

Application.EnableEvents = True
Application.ScreenUpdating = True
Sheet3.Protect Password:="ITC@2011"
End Sub

'Private Sub Worksheet_Activate()
'Sheet2.Visible = xlSheetVisible
'
'End Sub



Private Sub Sum1()
Dim x As Integer
Dim y As Integer
Sheet3.Unprotect Password:="ITC@2011"
Application.EnableEvents = False

 x = Application.WorksheetFunction.Match("Sheet1 ends here", Sheet3.Range("A1:A" & Sheet3.UsedRange.Rows.count), 0) - 1
y = x - 1
Sheet3.Cells(x, 4) = Application.WorksheetFunction.Sum(Sheet3.Range("D3:D" & y))
Sheet3.Cells(x, 5) = Application.WorksheetFunction.Sum(Sheet3.Range("E3:E" & y))
Sheet3.Cells(x, 6) = Application.WorksheetFunction.Sum(Sheet3.Range("F3:F" & y))
Application.EnableEvents = True
Sheet3.Protect Password:="ITC@2011"

End Sub



Private Sub Sum(ByVal Target As Range)
Dim x As Integer, EvalRange As Range, y As Integer, EvalRange1 As Range
Sheet3.Unprotect Password:="ITC@2011"
Application.EnableEvents = False
x = Application.WorksheetFunction.Match("Sheet1 ends here", Sheet3.Range("A1:A" & Sheet3.UsedRange.Rows.count), 0) - 1

Set EvalRange = Range("D3:D" & x)
Set EvalRange1 = Range("E3:E" & x)
If IsEmpty(Target) Then
    If (Len(Trim(Sheet3.Cells(Target.row, 4))) = 0 Or Len(Trim(Sheet3.Cells(Target.row, 5))) = 0) Then
        Sheet3.Cells(Target.row, 6) = Sheet3.Cells(Target.row, 4) + Sheet3.Cells(Target.row, 5)
    End If
Else

    If Not Intersect(Target, EvalRange) Is Nothing Then
        Sheet3.Cells(Target.row, 6) = Sheet3.Cells(Target.row, 4) + Sheet3.Cells(Target.row, 5)
    End If

    If Not Intersect(Target, EvalRange1) Is Nothing Then
        Sheet3.Cells(Target.row, 6) = Sheet3.Cells(Target.row, 4) + Sheet3.Cells(Target.row, 5)
    End If
End If
Application.EnableEvents = True
Sheet3.Protect Password:="ITC@2011"

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
UserForm1.Show
End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{FD2BDDE2-6DC8-4772-8854-20601D412A5A}{005BA838-2240-415F-AACC-FB3BBE6C6695}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub Frame1_Click()

End Sub

Private Sub Instructions_Click()

End Sub

' InQuest injected base64 decoded content
' Zaj{
' Zaj{

INQUEST-PP=macro
