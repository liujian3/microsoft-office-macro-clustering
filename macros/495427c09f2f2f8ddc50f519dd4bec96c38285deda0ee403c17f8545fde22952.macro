Attribute VB_Name = "BMECatClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim item As New Collection        'collection of all BMECat elements
Dim outputItem As New Collection  'BMECat Tree collection

Dim defsTable As Range      'ref to BMECat Table on shRules sheet
Dim blockCol As Integer
Dim commentCol As Integer
Dim fieldNameCol As Integer
Dim typeCol As Integer
Dim modeCol As Integer
Dim otherCol As Integer
Dim directCol As Variant
Dim sMandatoryCol As Integer
Dim uMandatoryCol As Integer
Dim mapCol As Integer
Public mapFieldCol As Integer
Dim mapBlockCol As Integer
Dim header As BMECatElemClass
Dim article As BMECatElemClass

'initializes BMECat element
Public Function addItem(rowNo, block, comment, name, typ, mode, _
  otherParams, directOutput, mandatory, map, mapBlock) As BMECatElemClass
  Dim el As BMECatElemClass
  Dim foundFlag As Boolean
  Dim xxflag As Boolean
  Dim catEl As BMECatElemClass
  Dim field As FieldClass
      
  On Error GoTo error_handler
  xxflag = False
  
  Set el = New BMECatElemClass
  With el
    If IsEmpty(block) Then
      .block = name
    Else
      .block = block & "|" & name
    End If
    If Not IsEmpty(comment) Then
      .block = .block & "(" & comment & ")"
    End If
    .rowNo = rowNo
    .mode = mode
    .typ = typ
    .name = name
    .comment = comment
    .otherParams = otherParams
    .mandatory = mandatory
    .outputFlag = mandatory
    .map = map
    .directOutput = directOutput
    .mapBlock = mapBlock
    Select Case .map
      Case "$$$_NOW"
        .value = Now
      Case "$$$_NOW"
        .value = Now
      Case "$$$_GEN"
        .value = GetMessage("PROGRAM_NAME") & " " & _
          GetMessage("PROGRAM_VERSION")
      Case Else
        Set field = GetFieldByName(.map)
        If Not field Is Nothing Then
          If field.colNo > 0 Then
            Set .field = field
          '  If .field.sheet = shBMEHeader.name Then
          '    .value = shBMEHeader.Cells(field.colNo, 2).value
          '  End If
          End If
        Else
        End If
    End Select
    Select Case .name
      Case "HEADER"
        Set header = el
      Case "ARTICLE"
        Set article = el
    End Select
  
    foundFlag = True
    If item.Count > 0 Then
'checks for unique node block
      For Each catEl In item
        If catEl.block = el.block Then
'key not unique
          Report F_ERR, "E_BMECAT_ELEMENT_NOT_UNIQUE", _
             defsTable.Cells(rowNo, 1)
          GoTo error_handler
        End If
      Next catEl

'checks for parent node
      If Not IsEmpty(block) Then
        foundFlag = False
        For Each catEl In item
          If catEl.block = block Then
            Set el.parent = catEl
            foundFlag = True
            Exit For
          End If
        Next catEl
      Else
        foundFlag = True
      End If
    End If
    If foundFlag = False Then
'element without parent
      Report F_ERR, "E_BMECAT_ELEMENT_WITHOUT_PARENT", _
        defsTable.Cells(rowNo, 1)
      GoTo error_handler
    Else
      item.Add el
    
      foundFlag = False
      For Each catEl In item
        If catEl.block = block Then
          If catEl.item Is Nothing Then
            Set catEl.item = New Collection
          End If
          catEl.item.Add el
          foundFlag = True
        End If
      Next catEl
      If foundFlag = False Then
        outputItem.Add el
      End If
'checks for parent node
      If Not IsEmpty(map) Then
        .outputFlag = "1"
        Set catEl = el.parent
        Do While Not catEl Is Nothing
          catEl.outputFlag = "1"
          Set catEl = catEl.parent
        Loop
      End If
    End If
  End With
  
  Set addItem = el
  Exit Function
error_handler:
  Report INFO, "F_ERR_TEMPLATE"
  StopTest
End Function
'outputs PSX-Toolset Template Data in BMECat XML file form
Sub OutputToFile(fileName)
  Dim el As BMECatElemClass
  On Error GoTo error_handler
  
  statusBarText = GetMessage("BMECAT_GEN_HEADER")
  Application.StatusBar = statusBarText
  Open fileName For Binary As #1
  'Dim i As Integer
 ' i = outputItem.Count
 ' For i = 6 To outputItem.Count
  
 ' el = outputItem.item(i)
 ' el.OutputToFile
 ' Next i
  
  For Each el In outputItem
 el.OutputToFile
  Next el
'1.502

  Application.StatusBar = ""
  InfoMsgBox PrepMsg("BMECAT_GEN_SAVED", fileName)
  
error_handler:
  Application.StatusBar = ""
  Close #1
End Sub
'initializes BMECat object
Private Sub Class_Initialize()
  Dim block As Variant
  Dim comment As Variant
  Dim name As Variant
  Dim typ As Variant
  Dim mode As Variant
  Dim otherParams As Variant
  Dim directOutput As Variant
  Dim mandatoryFlag As Variant
  Dim map As Variant
  Dim mapBlock As Variant
  Dim i As Long
  Dim j As Long
  Dim el As BMECatElemClass
  Dim field As FieldClass
  
  Set defsTable = GetDefsTable
  If defsTable Is Nothing Then
    Report INFO, "F_ERR_TEMPLATE"
    StopTest
  Else
    For j = 1 To UBound(BMECatColNoTable)
      Select Case BMECatColNoTable(j)(2)
        Case "Block"
          blockCol = BMECatColNoTable(j)(1)
        Case "FieldName"
          fieldNameCol = BMECatColNoTable(j)(1)
        Case "Comment"
          commentCol = BMECatColNoTable(j)(1)
        Case "Type"
          typeCol = BMECatColNoTable(j)(1)
        Case "Mode"
          modeCol = BMECatColNoTable(j)(1)
        Case "StandardMandatory"
          sMandatoryCol = BMECatColNoTable(j)(1)
        Case "UserDefMandatory"
          uMandatoryCol = BMECatColNoTable(j)(1)
        Case "MapFieldName"
          mapCol = BMECatColNoTable(j)(1)
        Case "MapBlock"
          mapBlockCol = BMECatColNoTable(j)(1)
        Case "OtherParams"
          otherCol = BMECatColNoTable(j)(1)
        Case "DirectOutput"
          directCol = BMECatColNoTable(j)(1)
      End Select
    Next j
  End If
'1.507
'  If Len(BMECatTransaction) = 0 Then
    Set field = GetFieldByCodeName("Transaction")
    If Not field Is Nothing Then
      If field.colNo > 0 Then
        BMECatTransaction = BMECatHeader.datasheet.Cells(field.colNo, 2).value
      End If
    Else
    BMECatTransaction = T_NEW
    End If
'  End If
  BMECatContext = Mid(BMECatTransaction, 3)
  With defsTable
    mapFieldCol = .Cells(4, mapCol).Column
    For i = 4 To UBound(.Formula)
      
      If Not IsEmpty(.Cells(i, blockCol).value) Then
        block = Replace(.Cells(i, blockCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
      Else
        block = .Cells(i, blockCol).value
      End If
      
      comment = .Cells(i, commentCol).value
      
      If Not IsEmpty(.Cells(i, fieldNameCol).value) Then
        name = Replace(.Cells(i, fieldNameCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
      Else
        name = .Cells(i, fieldNameCol).value
      End If
      
      If Not IsEmpty(.Cells(i, typeCol).value) Then
        typ = Replace(.Cells(i, typeCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
      Else
        typ = .Cells(i, typeCol).value
      End If
      
      If Not IsEmpty(.Cells(i, modeCol).value) Then
        mode = Replace(.Cells(i, modeCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
      Else
        mode = .Cells(i, modeCol).value
      End If
      
      If Not IsEmpty(.Cells(i, directCol).value) Then
        directOutput = Replace(.Cells(i, directCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
'1.503
        directOutput = Replace(.Cells(i, directCol).value, lCaseContextMask, _
          LCase(BMECatContext), 1, , vbTextCompare)
      Else
        directOutput = .Cells(i, directCol).value
      End If
      
      If Not IsEmpty(.Cells(i, otherCol).value) Then
        otherParams = Replace(.Cells(i, otherCol).value, contextMask, _
          BMECatContext, 1, , vbTextCompare)
      Else
        otherParams = .Cells(i, otherCol).value
      End If
'checks MapBlock's value
      mapBlock = .Cells(i, mapBlockCol).value
      If Not IsEmpty(.Cells(i, mapBlockCol).value) Then
        Select Case .Cells(i, mapBlockCol).value
          Case "HEADER", "ARTICLE"
          Case Else
'1.504
              Report F_ERR, "E_BMECAT_MAP_BLOCK", _
                .Cells(i, mapBlockCol), .Cells(i, mapBlockCol).value
        End Select
      End If

'checks value of standard mandatory
      mandatoryFlag = .Cells(i, sMandatoryCol).value
      If Len(mandatoryFlag) <> 3 Then
'1.504
        Report F_ERR, "E_BMECAT_MANDATORY_VALUE", _
          .Cells(i, sMandatoryCol), .Cells(i, sMandatoryCol).value
      Else
        For j = 1 To 3
          Select Case Mid(mandatoryFlag, j, 1)
            Case "0", "1", "-"
            Case Else
'1.504
              Report F_ERR, "E_BMECAT_MANDATORY_VALUE", _
              .Cells(i, sMandatoryCol), .Cells(i, sMandatoryCol).value
          End Select
        Next j
      End If
      
      If Not IsEmpty(.Cells(i, uMandatoryCol).value) Then
'checks value of user mandatory
        mandatoryFlag = .Cells(i, uMandatoryCol).value
        If Len(mandatoryFlag) <> 3 Then
'1.504
          Report F_ERR, "E_BMECAT_USER_MANDATORY_VALUE", _
            .Cells(i, uMandatoryCol), .Cells(i, uMandatoryCol).value
        Else
          For j = 1 To 3
            Select Case Mid(mandatoryFlag, j, 1)
              Case "0", "1", "-"
              Case Else
'1.504
                  Report F_ERR, "E_BMECAT_USER_MANDATORY_VALUE", _
                  .Cells(i, uMandatoryCol), .Cells(i, uMandatoryCol).value
            End Select
          Next j
        End If
      End If
      
      Select Case BMECatTransaction
        Case T_NEW
          mandatoryFlag = Left(mandatoryFlag, 1)
        Case T_PRO
          mandatoryFlag = Mid(mandatoryFlag, 2, 1)
        Case T_PRI
          mandatoryFlag = Right(mandatoryFlag, 1)
      End Select
      
      If mandatoryFlag <> "-" Then
        map = .Cells(i, mapCol).value
        addItem i, block, comment, name, typ, mode, otherParams, _
          directOutput, mandatoryFlag, map, mapBlock
      End If
    Next i
  End With
  
  For Each el In outputItem
    el.SetLineOffset
  Next el
End Sub
'tests BMECat object
Public Sub BMECatCheck()
  Dim el As BMECatElemClass
  For Each el In outputItem
    el.CheckElement
  Next el
End Sub
'Builds BMECatFields List
Public Sub FieldsToMap(fieldsList As Object, mapBlock)
  If mapBlock = "HEADER" Then
    header.FieldsToMap fieldsList, -1
  Else
    article.FieldsToMap fieldsList, -1
  End If
End Sub
'Builds BMECatFields List
Public Sub MapField(rowNo, Optional mapFieldName As Variant = Empty)
  Dim el As BMECatElemClass
  For Each el In item
    If el.rowNo = rowNo Then
      If el.item Is Nothing Then
        el.map = mapFieldName
      End If
      Exit For
    End If
  Next el
End Sub
'Builds BMECatFields List
Public Sub MappedFields(MapList As Object, mapBlock)
  If mapBlock = "HEADER" Then
    header.MappedFields MapList
  Else
    article.MappedFields MapList
  End If
End Sub

'Builds BMECatFields List
Public Function isMapped(mapBlock, fieldName)
  If mapBlock = "HEADER" Then
    isMapped = header.isMapped(fieldName)
  Else
    isMapped = article.isMapped(fieldName)
  End If
End Function
'saves mapping to BMECat table
Public Sub saveMappings()
  Dim el As BMECatElemClass
  
  Application.EnableEvents = False
  With defsTable
    For Each el In item
      .Cells(el.rowNo, mapCol).value = el.map
    Next el
  End With
  ThisTemplate.tested = False
  Application.EnableEvents = True

End Sub
'checks if BMECatFields is simple type
Public Function isSimple(rowNo) As Boolean
  Dim el As BMECatElemClass
  For Each el In item
    If el.rowNo = rowNo Then
      If el.item Is Nothing Then
        isSimple = True
      End If
      Exit For
    End If
  Next el
End Function


Attribute VB_Name = "BMECatElemClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Option Base 1
'if directOutput is not empty
' directOutput
'if directOutput is empty
'<name[ type="typ"][ mode="mode"][ otherParams]>
Public parent As Object 'ref to parent BMECat element
Public name As Variant  'element name
Public comment As Variant
Public value As Variant 'element value
Public typ As Variant   'string with type value (type="typ")
Public mode As Variant  'string with mode value (mode="mode")
Public block As Variant 'BMECat block name
Public otherParams As Variant '<name[ type="typ"][ mode="mode"][ otherParams]>
Public mandatory As Variant 'standartd BMECat mandatory in transaction context
Public map As Variant   'map string contains field name or pseudoname for automatic mappings
Public outputFlag As Variant
Public field As FieldClass  'ref to mapping field
Public notEmptyElementFlag As Boolean
Public startFilePos As Long 'absolute start position in output file
Public directOutput As Variant
Public item As Collection   'collection that contains all possible fields on the data worksheet
Public rowNo As Integer
Public lineOffset As String 'element output line tab offset
Public mapBlock As String
Dim actionRange As Range
Const XML_START_TAG_LEFT As String = "<"
Const XML_START_TAG_RIGHT As String = ">"
Const XML_END_TAG_LEFT As String = "</"
Const XML_END_TAG_RIGHT As String = ">"
Const BMECAT_DATE_FORMAT As String = "yyyy-mm-dd"
Const BMECAT_TIME_FORMAT As String = "hh:mm:ss"
Const BMECAT_ARTICLE_MODE_NEW As String = "new"
'outputs BMECat element to file
Public Sub OutputToFile(Optional currRow As Long)
  Dim i As Integer
  Dim outputLine As String
  Dim field As FieldClass
  
  Select Case name
    Case "ARTICLE"
      OutputItems
    Case "ARTICLE_PRICE"
      OutputPrices currRow
    Case "CATALOG_STRUCTURE"
      OutputCGS
    Case "ARTICLE_TO_CATALOGGROUP_MAP"
      OutputArticleToCGS
    Case Else
      Select Case name
        Case T_PRO, T_PRI
          Set field = GetFieldByCodeName("prev_version")
          If Not field Is Nothing Then
            otherParams = "prev_version=""" & _
              BMECatHeader.datasheet.Cells(field.colNo, 2).value & """"
          Else
            otherParams = ""
          End If
        Case "DATE"
          If Not IsEmpty(value) Then
            value = Format(value, BMECAT_DATE_FORMAT)
          End If
        Case "TIME"
          If Not IsEmpty(value) Then
            value = Format(value, BMECAT_TIME_FORMAT)
          End If
      End Select
      OutputElement currRow
  End Select
End Sub
'outputs BMECat element to file
'if directOutput is not empty
' output =directOutput
'if directOutput is empty
' output=<name[ type="typ"][ mode="mode"][ otherParams]>value<\name>
'or
' output=<name[ type="typ"][ mode="mode"][ otherParams]>
'        ...
'        <\name>
Public Sub OutputElement(Optional currRow As Long)
  Dim i As Integer
  Dim outputLine As String   'output line buffer
  
  
  If outputFlag = "1" Then
    If IsEmpty(directOutput) Then
    
      If Not IsEmpty(name) Then
        outputLine = lineOffset & XML_START_TAG_LEFT & name
        If Len(typ) > 0 Then
          outputLine = outputLine & " type=""" & typ & """"
        End If
        If Len(mode) > 0 Then
          outputLine = outputLine & " mode=""" & mode & """"
        End If
        If Len(otherParams) > 0 Then
          outputLine = outputLine & " " & otherParams
        End If
        outputLine = outputLine & XML_START_TAG_RIGHT
      End If
        notEmptyElementFlag = False
      If item Is Nothing Then
'BMECat element is simple type
        If Not IsEmpty(name) Then
          If TypeName(value) = "String" Then
            value = maskIllegalCharacters(value)
'1.503
            value = ConvToUTF8(value)
          Else
            If Not IsEmpty(value) Then
              Select Case field.typ
                Case "UN", "N"
                  value = Replace(CStr(value), ",", ".")
              End Select
            End If
          
          End If
          outputLine = outputLine & value & XML_END_TAG_LEFT & name & XML_END_TAG_RIGHT
          If Not IsEmpty(value) Then
            notEmptyElementFlag = True
            PrintLine outputLine
          End If
        End If
      Else
'BMECat element is agregate type
        startFilePos = Loc(1)
        PrintLine outputLine
        For i = 1 To item.Count
          item(i).OutputToFile currRow
          If item(i).notEmptyElementFlag = True Then
            notEmptyElementFlag = True
          End If
        Next i
        If notEmptyElementFlag = True Then
          If Not parent Is Nothing Then
          End If
          outputLine = lineOffset & XML_END_TAG_LEFT & name & _
            XML_END_TAG_RIGHT
          PrintLine outputLine
        Else
        
          Seek #1, startFilePos + 1
        End If
      End If
    Else
'if directOutput is not null
      outputLine = directOutput
      PrintLine outputLine
    End If
  End If
End Sub
'output routine for ARTICLE BMECat Block
Private Sub OutputItems()
  Dim currRowNo As Long
  Dim itemkeys As Range
  Dim oldKey
  Dim keyColNo As Integer
  Dim modeVal
  
  With items
    keyColNo = .dataFieldsCount + 1
    Set itemkeys = .datasheet.Columns(items.dataFieldsCount + 1)
    If .actionFieldColNo > 0 Then
      Set actionRange = .datasheet.Columns(.actionFieldColNo)
    Else
      modeVal = BMECAT_ARTICLE_MODE_NEW
    End If
  oldKey = "@@@@@"
  statusBarText = GetMessage("BMECAT_GEN_ARTICLE")
  itemRowsCount = items.lastItemRowNo - ITEMS_DATA_FIRST_ROW + 1
  progress5Percent = Int(itemRowsCount / 20)
  For currRowNo = ITEMS_DATA_FIRST_ROW To .lastItemRowNo
    ShowRuleProgress currRowNo
    If oldKey <> itemkeys.Cells(currRowNo).value Then
      notEmptyElementFlag = False
      If .actionFieldColNo > 0 Then
'1.502
        modeVal = GetActionCode(actionRange.Cells(currRowNo).value)
        If modeVal = ACTION_ADD Then
          modeVal = BMECAT_ARTICLE_MODE_NEW
        End If
      End If
      SetItemValues currRowNo
      mode = modeVal
      OutputElement currRowNo
      oldKey = itemkeys.Cells(currRowNo).value
    End If
'1.505
    If ThisTemplate.GUID = DEMO_GUID Then
      If currRowNo >= ITEMS_DATA_FIRST_ROW + DEMO_BMECAT_ITEMS_LIMIT - 1 Then
        Exit For
      End If
    End If
  Next currRowNo
  End With
End Sub
'output routine for ARTICLE_PRICES_DETAILS BMECat Block
Private Sub OutputPrices(currRow)
  Dim currRowNo As Long
  Dim itemkeys As Range

  Set itemkeys = items.datasheet.Columns(items.dataFieldsCount + 1)
  
  For currRowNo = currRow To items.lastItemRowNo
    If itemkeys.Cells(currRow).value = itemkeys.Cells(currRowNo).value Then
      notEmptyElementFlag = False
      SetItemValues currRowNo
      OutputElement
    Else
      Exit For
    End If
  Next currRowNo

End Sub
'output routine for CATALOG_GROUP_SYSTEM BMECat Block
Private Sub OutputCGS()
  Dim typeField As FieldClass
  Dim currRowNo As Long
  Dim typeColNo As Integer
  
  Set typeField = GetFieldByCodeName("GroupType")
  typeColNo = typeField.colNo
  
  If CGS_DATA_FIRST_ROW < cgs.lastItemRowNo Then
    statusBarText = GetMessage("BMECAT_GEN_CGS")
    itemRowsCount = cgs.lastItemRowNo - CGS_DATA_FIRST_ROW + 1
    progress5Percent = Int(itemRowsCount / 20)
    For currRowNo = CGS_DATA_FIRST_ROW To cgs.lastItemRowNo
      ShowRuleProgress currRowNo
      notEmptyElementFlag = False
      typ = cgs.datasheet.Cells(currRowNo, typeColNo).value
      SetCGSValues currRowNo
      OutputElement
    Next currRowNo
  End If
End Sub
'output routine for ARTICLE_TO_CATALOGGROUP_MAP BMECat Block
Private Sub OutputArticleToCGS()
  Dim typeField As FieldClass
  Dim currRowNo As Long
  Dim typeColNo As Integer
  Dim modeVal
  
  
  If CGS_DATA_FIRST_ROW < cgs.lastItemRowNo Then
    statusBarText = GetMessage("BMECAT_GEN_ARTICLE_TO_CGS")
    itemRowsCount = items.lastItemRowNo - ITEMS_DATA_FIRST_ROW + 1
    progress5Percent = Int(itemRowsCount / 20)
    With items
      If .actionFieldColNo > 0 Then
        Set actionRange = .datasheet.Columns(.actionFieldColNo)
      Else
        modeVal = BMECAT_ARTICLE_MODE_NEW
      End If
      For currRowNo = ITEMS_DATA_FIRST_ROW To .lastItemRowNo
        notEmptyElementFlag = False
        If BMECatTransaction = T_PRO Then
          If .actionFieldColNo > 0 Then
            modeVal = GetActionCode(actionRange.Cells(currRowNo).value)
            If modeVal = ACTION_ADD Then
              modeVal = BMECAT_ARTICLE_MODE_NEW
            End If
          End If
          If modeVal <> ACTION_UPDATE Then
            SetArticleToCGSValues currRowNo
            mode = modeVal
            OutputElement
          End If
        Else
          SetArticleToCGSValues currRowNo
          mode = modeVal
          OutputElement
        End If
'1.505
        If ThisTemplate.GUID = DEMO_GUID Then
          If currRowNo >= ITEMS_DATA_FIRST_ROW + DEMO_BMECAT_ITEMS_LIMIT - 1 Then
            Exit For
          End If
        End If
      Next currRowNo
    End With
  End If
End Sub
'sets values for ARTICLE BMECat Block
Public Sub SetItemValues(currRowNo As Long)
  Dim i As Integer
  
  If Not field Is Nothing Then
    If field.sheet = ThisTemplate.shData.name Then
      If field.colNo > 0 Then
        value = ThisTemplate.shData.Cells(currRowNo, field.colNo).value
      End If
    End If
  Else
    If Not item Is Nothing Then
      For i = 1 To item.Count
        item(i).SetItemValues currRowNo
      Next i
    End If
  End If

End Sub
'sets values for CGS BMECat output (CATALOG_STRUCTURE)
Public Sub SetCGSValues(currRowNo As Long)
  Dim i As Integer
  
  If Not field Is Nothing Then
    If field.sheet = ThisTemplate.shCGS.name Then
      If field.colNo > 0 Then
        value = ThisTemplate.shCGS.Cells(currRowNo, field.colNo).value
      End If
    End If
  Else
    If Not item Is Nothing Then
      For i = 1 To item.Count
        item(i).SetCGSValues currRowNo
      Next i
    End If
  End If

End Sub
'sets values for Atricle to CGS mapping BMECat output
Public Sub SetArticleToCGSValues(currRowNo As Long)
  Dim i As Integer
  
  If Not field Is Nothing Then
    If field.sheet = ThisTemplate.shData.name Then
      If field.colNo > 0 Then
        value = ThisTemplate.shData.Cells(currRowNo, field.colNo).value
      End If
    End If
  Else
    If Not item Is Nothing Then
      For i = 1 To item.Count
        item(i).SetArticleToCGSValues currRowNo
      Next i
    End If
  End If

End Sub
'tests BMEcat element
Public Sub CheckElement()
  Dim i As Integer
  
  
  If outputFlag = "1" Then
    If IsEmpty(directOutput) Then
      If item Is Nothing Then
'BMECat element is simple type
        If Not IsEmpty(name) Then
          If Not IsEmpty(map) Then
            If Left(map, 3) = "$$$" Then
              If IsEmpty(value) Then
                Report F_ERR, "E_BMECAT_AUTO_VALUE", _
                  ThisTemplate.shRules.Cells(rowNo, BMEDoc.mapFieldCol), block, map
              End If
            Else
              If field Is Nothing Then
                Report F_ERR, "E_BMECAT_FIELD_NAME", _
                  ThisTemplate.shRules.Cells(rowNo, BMEDoc.mapFieldCol), block, map
              Else
                If field.colNo = 0 Then
                  Report F_ERR, "E_BMECAT_FIELD_NAME", _
                    ThisTemplate.shRules.Cells(rowNo, BMEDoc.mapFieldCol), block, map
                End If
              End If
            End If
          Else
            If mandatory = "1" Then
              Report F_ERR, "E_BMECAT_MANDATORY_NOT_MAPPED", _
                ThisTemplate.shRules.Cells(rowNo, BMEDoc.mapFieldCol), block, map
            End If
          End If
        Else
        End If
      Else
'BMECat element is complex type
'1.504
        If Not IsEmpty(map) Then
          Report F_ERR, "E_BMECAT_COMPLEX_MAPPED", _
            ThisTemplate.shRules.Cells(rowNo, BMEDoc.mapFieldCol), block, map
        Else
          For i = 1 To item.Count
            item(i).CheckElement
          Next i
        End If
      End If
    Else
    End If
  End If
End Sub
'sets element output line offset (n x tab)
Public Sub SetLineOffset(Optional parentOffset As String = "")
  Dim i As Integer
  
  
  If outputFlag = "1" Then
    lineOffset = parentOffset
    If Not item Is Nothing Then
      For i = 1 To item.Count
        item(i).SetLineOffset lineOffset & vbTab
      Next i
    End If
  End If
End Sub
Sub FieldsToMap(fieldsList As Object, level)
  Dim i As Integer
  Dim j As Integer
  Dim listText As String
  
  
  If Len(mapBlock) > 0 Then
    If Len(map) = 0 Then
      listText = ""
      For j = 1 To level + 1
        listText = listText & Space(8)
      Next j
      listText = listText & name
      If Not IsEmpty(comment) Then
        listText = listText & " (" & comment & ")"
      End If
      With fieldsList
        .addItem listText
        .List(.ListCount - 1, 1) = rowNo
      End With
      If Not item Is Nothing Then
        For i = 1 To item.Count
          item(i).FieldsToMap fieldsList, level + 1
        Next i
      End If
    End If
  End If
End Sub
Sub MappedFields(MapList As Object)
  Dim i As Integer
  Dim j As Integer
  Dim listText As String
  Dim listText1 As String
  Dim arr_block As Variant
  
  
  If Len(mapBlock) > 0 Then
    If Len(map) > 0 Then
      If Left(map, 3) <> "$$$" Then
        arr_block = Split(block, "|")
        For i = 0 To UBound(arr_block)
          If arr_block(i) = mapBlock Then
            Exit For
          End If
        Next i
        For j = i + 1 To UBound(arr_block) - 1
          listText1 = listText1 & arr_block(j) & "|"
        Next j
        listText = map
        listText1 = listText1 & name
        If Not IsEmpty(comment) Then
          listText1 = listText1 & " (" & comment & ")"
        End If
        With MapList
          .addItem listText
          .List(.ListCount - 1, 1) = listText1
          .List(.ListCount - 1, 2) = rowNo
        End With
      End If
    End If
  End If
      If Not item Is Nothing Then
        For i = 1 To item.Count
          item(i).MappedFields MapList
        Next i
      End If
End Sub
Public Function isMapped(fieldName) As Boolean
  Dim i As Integer
  
  isMapped = False
  If map = fieldName Then
    isMapped = True
  Else
    If Not item Is Nothing Then
      For i = 1 To item.Count
        If isMapped = False Then
          isMapped = item(i).isMapped(fieldName)
        Else
          Exit For
        End If
      Next i
   End If
  End If
End Function

Function maskIllegalCharacters(elementValue)
  maskIllegalCharacters = Replace(elementValue, "&", "&amp;")
  maskIllegalCharacters = Replace(maskIllegalCharacters, "<", "&lt;")
  maskIllegalCharacters = Replace(maskIllegalCharacters, ">", "&gt;")
  maskIllegalCharacters = Replace(maskIllegalCharacters, "'", "&apos;")
  maskIllegalCharacters = Replace(maskIllegalCharacters, """", "&quot;")
End Function
Attribute VB_Name = "BMECat_Utils"
Option Explicit

Public Const contextMask = "???"
'1.503
Public Const lCaseContextMask = "!!!"
Public BMECatTransaction As String
Public BMECatContext As String

Sub BMECatMapCheck(runFlag As Boolean)
  Dim field As FieldClass
  Dim mapFields As Range
'1.507
  Dim defsTable As Range
  Dim findResult As Variant
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  If ThisTemplate.BMECatMode = False Then
    Exit Sub
  End If
  
  Set field = GetFieldByCodeName("Transaction")
'1.507
  Set defsTable = GetDefsTable
  Set mapFields = defsTable.Columns(BMEDoc.mapFieldCol - _
      defsTable.Column + 1)
  BMECatTransaction = BMECatHeader.datasheet.Cells(field.colNo, 2).value
  BMECatContext = Mid(BMECatTransaction, 3)
  For Each field In BMECatHeader.dataFields
    With field
      Select Case .codeName
        Case "Transaction", "prev_version"
        Case Else
          Set findResult = mapFields.Find(.name, LookIn:=xlValues, _
            lookat:=xlWhole, MatchCase:=True)
          If findResult Is Nothing Then  'if no match is found
            Report WARN, "E_HEADER_FIELD_NO_MAP", BMECatHeader.datasheet.Cells(field.colNo, 1), .name
          End If 'If findResult Is Nothing Then
      End Select
    End With
  Next field
  For Each field In items.dataFields
    With field
      Select Case .codeName
        Case "Action"
        Case Else
          Set findResult = mapFields.Find(.name, LookIn:=xlValues, _
            lookat:=xlWhole, MatchCase:=True)
          If findResult Is Nothing Then  'if no match is found
            Report WARN, "E_ITEM_FIELD_NO_MAP", items.datasheet.Cells(1, field.colNo), .name
          End If 'If findResult Is Nothing Then
      End Select
    End With
          
  Next field
  BMEDoc.BMECatCheck
End Sub
'Returns BMECat defs Range
Function GetDefsTable() As Range
  On Error GoTo error_handler
  Dim tabStartColNo As Long
  Dim tabEndColNo As Long
  Dim lastTableRow As Long
  Dim i As Long
  Dim xxel As BMECatElemClass
  Dim mandatoryColNo As Integer
  
  With ThisTemplate.shRules
    tabStartColNo = SearchNamePos("BMECat", _
      .Range(.Cells(RULES_TABLE_NAME_ROW, 1), _
      .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
    If tabStartColNo > 0 Then
      tabEndColNo = SearchNamePos("*", _
        .Range(.Cells(RULES_TABLE_NAME_ROW, tabStartColNo + 1), _
        .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
      If tabEndColNo = 0 Then
        tabEndColNo = EXCEL_MAX_COLUMN_NO
        For i = tabEndColNo To tabStartColNo Step -1
          If Not IsEmpty(.Cells(RULES_TABLE_NAME_ROW + 1, i).value) Then
            Exit For
          End If
        Next i
        tabEndColNo = i
      End If
      mandatoryColNo = SearchNamePos("StandardMandatory", _
        .Range(.Cells(RULES_TABLE_NAME_ROW + 1, tabStartColNo), _
        .Cells(RULES_TABLE_NAME_ROW + 1, EXCEL_MAX_COLUMN_NO)))
      For lastTableRow = RULES_DATA_FIRST_ROW To EXCEL_MAX_ROW_NO
        If IsEmpty(.Cells(lastTableRow, tabStartColNo + mandatoryColNo - 1).value) Then
          lastTableRow = lastTableRow - 1
          Exit For
        End If
      Next lastTableRow
      Set GetDefsTable = .Range(.Cells(1, tabStartColNo), _
        .Cells(lastTableRow, tabEndColNo))
    End If
  End With
  Exit Function

error_handler:

End Function

Attribute VB_Name = "CGS_Utils"
Option Explicit
Const ID_COL_NO = 1
Const NAME_COL_NO = 2
Const DESC_COL_NO = 3
Const TYPE_COL_NO = 4
Const PARENT_COL_NO = 5
Const LEVEL_COL_NO = 6
Const ORDER_COL_NO = 7
Const LIST_TEXT_COL_NO = 7
Const ROW_COL_NO = 7
Const COL_OFFSET = 9

Const TEMP_CATCODE_COL_NO = 9
Const TEMP_CGS_FIRST_COL = 10
Const TEMP_CGS_LAST_COL = 16

Dim PartNumColNo As Integer
Dim shortDescColNo As Integer
Dim catCodeColNo As Integer

Dim lastRowNo As Long
Dim firstRowNo As Long
Dim cgsDataRange As Range

'--------------------------------------------
'CommodityGroupCheck rule
'--------------------------------------------
Public Sub CommodityGroupCheck(runFlag As Boolean)
  On Error GoTo error_handler
  Dim i As Long
  Dim j As Long
  Dim l As Integer
  Dim lastRowNo As Long
  Dim keyData As Range
  Dim firstRowNo As Long
  Dim currRowNo As Long
  Dim repeatedKeysFlag As Boolean
  Dim kommaTxt As String
  Dim rowsTxt As String
  Dim rootCount As Integer
  Dim CGSData As Worksheet
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  If ThisTemplate.BMECatMode = False Then
    Exit Sub
  End If
  Set CGSData = ThisTemplate.shCGS
  lastRowNo = cgs.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  Set keyData = copyCGSData
  If lastRowNo < firstRowNo Then
    Report WARN, "E_CGS_NO_DATA", CGSData.Cells(firstRowNo, 1)
    Exit Sub
  End If
  With keyData
    .Sort Key1:=.Cells(1, 1), Order1:=xlAscending, _
       header:=xlNo

'checks root node
    rootCount = 0
    kommaTxt = ""
    rowsTxt = ""
    For i = 1 To lastRowNo - 1
      If .Cells(i, TYPE_COL_NO).value = CGS_ROOT Then
        rowsTxt = rowsTxt & kommaTxt & .Cells(i, ORDER_COL_NO).value
        kommaTxt = ","
        rootCount = rootCount + 1
      End If
    Next i
    If rootCount = 0 Then
      Report ERR, "E_CGS_WITHOUT_ROOT", CGSData.Cells(firstRowNo, 1)
      Exit Sub
    ElseIf rootCount > 1 Then
      Report ERR, "E_CGS_MULTIPLE_ROOTS", CGSData.Cells(firstRowNo, 4), rowsTxt
      Exit Sub
    End If
'loops over item data set
    Do
      repeatedKeysFlag = False
      currRowNo = firstRowNo + 1
      ShowRuleProgress currRowNo

'searches for repeated keys
      kommaTxt = ","
      rowsTxt = .Cells(firstRowNo, ORDER_COL_NO).value
      Do While .Cells(firstRowNo, ID_COL_NO).value = _
        .Cells(currRowNo, ID_COL_NO).value
        rowsTxt = rowsTxt & kommaTxt & .Cells(currRowNo, ORDER_COL_NO).value
        repeatedKeysFlag = True
        currRowNo = currRowNo + 1
        If currRowNo >= lastRowNo Then
          currRowNo = lastRowNo + 1
          Exit Do
        End If
      Loop
      If repeatedKeysFlag = True Then
        Report ERR, "E_CGS_KEYUNIQUE", CGSData.Cells(.Cells(firstRowNo, _
          ORDER_COL_NO).value, 1), rowsTxt, .Cells(firstRowNo, ID_COL_NO).value
      End If
      
      If currRowNo >= lastRowNo Then
        Exit Do
      End If
      
      firstRowNo = currRowNo
    Loop
    .Sort Key1:=.Cells(1, ORDER_COL_NO), Order1:=xlAscending, _
       header:=xlNo
    firstRowNo = ITEMS_DATA_FIRST_ROW
    For i = 1 To lastRowNo - 1
      Select Case .Cells(i, TYPE_COL_NO).value
        Case CGS_ROOT
          If .Cells(i, ID_COL_NO).value <> 1 Then
            Report ERR, "E_CGS_ROOT_ID", CGSData.Cells(.Cells(i, ORDER_COL_NO).value, 1)
          End If
          If .Cells(i, PARENT_COL_NO).value <> 0 Then
            Report ERR, "E_CGS_ROOT_PARENT", CGSData.Cells(.Cells(i, ORDER_COL_NO).value, 5)
          End If
        Case CGS_LEAF
          For j = 1 To lastRowNo - 1
            If .Cells(i, ID_COL_NO).value = .Cells(j, PARENT_COL_NO).value Then
              Report ERR, "E_CGS_LEAF_PARENT", CGSData.Cells(.Cells(j, ORDER_COL_NO).value, 5)
            End If
          Next j
        Case CGS_NODE
          l = 0
          For j = 1 To lastRowNo - 1
            If .Cells(i, ID_COL_NO).value = .Cells(j, PARENT_COL_NO).value Then
              l = l + 1
            End If
          Next j
          If l = 0 Then
            Report WARN, "E_CGS_NODE_WITHOUT_LEAFS", CGSData.Cells(.Cells(i, ORDER_COL_NO).value, 1)
          End If
      End Select
      Select Case .Cells(i, TYPE_COL_NO).value
        Case CGS_NODE, CGS_LEAF
          l = 0
          For j = 1 To lastRowNo - 1
            If .Cells(i, PARENT_COL_NO).value = .Cells(j, ID_COL_NO).value Then
              l = l + 1
            End If
          Next j
          If l = 0 Then
            Report ERR, "E_CGS_NODE_WITHOUT_PARENT", CGSData.Cells(.Cells(i, ORDER_COL_NO).value, 5)
          End If
      End Select
    Next i
  End With
error_handler:
End Sub
Public Sub ArticleToCGSMapCheck(runFlag As Boolean)
  On Error GoTo error_handler
  Dim i As Long
  Dim lastRowNo As Long
  Dim itemCGS As Range
  Dim groupID As Range
  Dim groupType As Range
  Dim firstRowNo As Long
  Dim field As FieldClass
  Dim catCodefield As FieldClass
  Dim itemCGSCol As Long
  Dim findResult As Variant  'used to return result of find method
  Dim noCGSDataFlag As Boolean
  Dim rule As RuleClass
  Dim actionRange As Range
  Dim actionVal
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  If ThisTemplate.BMECatMode = False Then
    Exit Sub
  End If
  If cgs.lastItemRowNo >= ITEMS_DATA_FIRST_ROW Then
    noCGSDataFlag = False
  Else
    noCGSDataFlag = True
  End If
  For Each rule In rulesList
    If rule.codeName = "CommodityGroupCheck" Then
      If rule.errorsCount > 0 Then
        activeRule.status = RULE_STATUS_NOT_APPLICABLE
        Exit Sub
      End If
    End If
  Next rule
  lastRowNo = items.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  Set catCodefield = GetFieldByCodeName("CatCode")
  If catCodefield.colNo > 0 Then
    itemCGSCol = catCodefield.colNo
    Set itemCGS = ThisTemplate.shData.Columns(itemCGSCol)
  Else
    Exit Sub
  End If
  With ThisTemplate.shCGS
    Set field = GetFieldByCodeName("GroupID")
    If field.colNo > 0 Then
      Set groupID = .Range(.Cells(ITEMS_DATA_FIRST_ROW, field.colNo), _
        .Cells(cgs.lastItemRowNo, field.colNo))
    Else
      Exit Sub
    End If
    Set field = GetFieldByCodeName("GroupType")
    If field.colNo > 0 Then
      Set groupType = .Range(.Cells(1, field.colNo), _
        .Cells(cgs.lastItemRowNo, field.colNo))
    Else
      Exit Sub
    End If
  End With
  With items
    If .actionFieldColNo > 0 Then
      Set actionRange = .datasheet.Columns(.actionFieldColNo)
    Else
      actionVal = ACTION_ADD
    End If
  End With
  With itemCGS
    For i = ITEMS_DATA_FIRST_ROW To lastRowNo
      ShowRuleProgress i
      If items.actionFieldColNo > 0 Then
        actionVal = GetActionCode(actionRange.Cells(i).value)
      End If
      If IsEmpty(.Cells(i).value) Then
        If noCGSDataFlag = False Then
          If actionVal = ACTION_ADD Then
            Report ERR, "E_ITEM_CGS_EMPTY", .Cells(i)
          Else
            Report WARN, "E_ITEM_CGS_EMPTY", .Cells(i)
          End If
        End If
      Else
        If noCGSDataFlag = False Then
          Set findResult = groupID.Find(.Cells(i).value, _
            LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
          If findResult Is Nothing Then  'if no match is found
            Report ERR, "E_ITEM_CGS_NO_MATCH", .Cells(i), _
              .Cells(i).value
          Else
            If groupType.Cells(findResult.Row).value <> CGS_LEAF Then
              Report ERR, "E_ITEM_CGS_NOT_LEAF", .Cells(i), _
                .Cells(i).value, groupType.Cells(findResult.Row).value
            End If
          End If 'If findResult Is Nothing Then
        Else
          Report WARN, "E_ITEM_NO_CGS_DATA", .Cells(i), _
            catCodefield.name
        End If
      End If
    Next i
  End With
error_handler:
End Sub

Function copyCGSData() As Range
  Dim i As Integer
  Dim idColNo
  Dim nameColNo
  Dim descColNo
  Dim typeColNo
  Dim parentColNo
  Dim field As FieldClass
  
  lastRowNo = cgs.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  
  Set field = GetFieldByCodeName("GroupID")
  idColNo = field.colNo
  Set field = GetFieldByCodeName("GroupName")
  nameColNo = field.colNo
  Set field = GetFieldByCodeName("GroupDescription")
  descColNo = field.colNo
  Set field = GetFieldByCodeName("GroupType")
  typeColNo = field.colNo
  Set field = GetFieldByCodeName("ParentID")
  parentColNo = field.colNo
  With shTemp
    For i = ID_COL_NO + COL_OFFSET To ORDER_COL_NO + COL_OFFSET
    .Columns(i).Clear
    Next i
    For i = firstRowNo To lastRowNo
      If idColNo > 0 Then
        .Cells(i, ID_COL_NO + COL_OFFSET).value = shCGS.Cells(i, idColNo).value
      End If
      If nameColNo > 0 Then
        .Cells(i, NAME_COL_NO + COL_OFFSET).value = shCGS.Cells(i, nameColNo).value
      End If
      If descColNo > 0 Then
        .Cells(i, DESC_COL_NO + COL_OFFSET).value = shCGS.Cells(i, descColNo).value
      End If
      If typeColNo > 0 Then
        .Cells(i, TYPE_COL_NO + COL_OFFSET).value = shCGS.Cells(i, typeColNo).value
      End If
      If parentColNo > 0 Then
        .Cells(i, PARENT_COL_NO + COL_OFFSET).value = shCGS.Cells(i, parentColNo).value
      End If
      .Cells(i, ORDER_COL_NO + COL_OFFSET).value = i
    Next i
    Set cgsDataRange = .Range(.Cells(firstRowNo, ID_COL_NO + COL_OFFSET), _
      .Cells(lastRowNo, ORDER_COL_NO + COL_OFFSET))
  End With
  With cgsDataRange
    .Sort Key1:=.Cells(1, ID_COL_NO), Order1:=xlAscending, _
       header:=xlNo
  End With
  Set copyCGSData = cgsDataRange
End Function
Sub makeLevelTemp(level As Variant, groupID As Variant)
  Dim i
  
  For i = firstRowNo To lastRowNo
    If CStr(cgsDataRange.Cells(i, PARENT_COL_NO).value) = CStr(groupID) Then
      cgsDataRange.Cells(i, LEVEL_COL_NO).value = level
      makeLevelTemp level + 1, cgsDataRange.Cells(i, ID_COL_NO).value
    End If
  Next i
End Sub
Sub buildCGSTree(CGSTree As Object)
  On Error GoTo error_handler
  Dim i As Long
  Dim j As Long
  Dim l As Integer
  Dim rowNo As Integer
  Dim nodeChar As String
  
  
  If cgsDataRange Is Nothing Then
    lastRowNo = cgs.lastItemRowNo
    firstRowNo = CGS_DATA_FIRST_ROW
    With ThisTemplate.shTemp
    Set cgsDataRange = .Range(.Cells(firstRowNo, _
      TEMP_CGS_FIRST_COL), .Cells(lastRowNo, TEMP_CGS_LAST_COL))
    End With
  End If
  lastRowNo = lastRowNo - CGS_DATA_FIRST_ROW + 1
  firstRowNo = 1
  
  With cgsDataRange
    .Sort Key1:=.Cells(1, LEVEL_COL_NO), Order1:=xlAscending, _
       Key2:=.Cells(1, NAME_COL_NO), Order2:=xlAscending, _
       header:=xlNo
    makeLevelTemp 0, "0"
    rowNo = 0
    sortCGS rowNo, 0, lastRowNo
    .Sort Key1:=.Cells(1, ORDER_COL_NO), Order1:=xlAscending, _
       header:=xlNo
    
    CGSTree.Clear
    
    For i = firstRowNo To lastRowNo
      j = i - 1
      CGSTree.addItem .Cells(i, ID_COL_NO).value, j
      CGSTree.List(j, NAME_COL_NO - 1) = .Cells(i, NAME_COL_NO).value
      CGSTree.List(j, DESC_COL_NO - 1) = .Cells(i, DESC_COL_NO).value
      CGSTree.List(j, TYPE_COL_NO - 1) = .Cells(i, TYPE_COL_NO).value
      CGSTree.List(j, PARENT_COL_NO - 1) = .Cells(i, PARENT_COL_NO).value
      CGSTree.List(j, LEVEL_COL_NO - 1) = .Cells(i, LEVEL_COL_NO).value
      If .Cells(i, TYPE_COL_NO).value = CGS_LEAF Then
        nodeChar = "- "
      Else
        nodeChar = "+ "
      End If
      CGSTree.List(j, LIST_TEXT_COL_NO - 1) = Space(.Cells(i, LEVEL_COL_NO).value * 8) & _
        nodeChar & .Cells(i, NAME_COL_NO).value
      CGSTree.List(j, ROW_COL_NO) = i
    Next i
  End With
  For i = ID_COL_NO + COL_OFFSET To ORDER_COL_NO + COL_OFFSET
    shTemp.Columns(i).Clear
  Next i
  
error_handler:
End Sub
Sub sortCGS(ByRef rowNo As Integer, groupID As Variant, lastRowNo As Long)
  Dim i
  
  For i = firstRowNo To lastRowNo
    If CStr(cgsDataRange.Cells(i, PARENT_COL_NO).value) = CStr(groupID) Then
      rowNo = rowNo + 1
      cgsDataRange.Cells(i, ORDER_COL_NO).value = rowNo
      If CStr(cgsDataRange.Cells(i, TYPE_COL_NO).value) <> CGS_LEAF Then
        sortCGS rowNo, cgsDataRange.Cells(i, ID_COL_NO).value, lastRowNo
      End If
    End If
  Next i
End Sub
Sub countMappedItems(CGSTree As Object)
  Dim dataCol As Range
  Dim i As Long
  Dim itemCount
  
  lastRowNo = items.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  With ThisTemplate.shTemp
    Set dataCol = .Range(.Cells(firstRowNo, TEMP_CATCODE_COL_NO), _
      .Cells(lastRowNo, TEMP_CATCODE_COL_NO))
  End With
  With CGSTree
    For i = 0 To .ListCount - 1
      If .List(i, TYPE_COL_NO - 1) = CGS_LEAF Then
        itemCount = Application.WorksheetFunction.CountIf(dataCol, _
          .List(i, ID_COL_NO - 1))
        If itemCount > 0 Then
          .List(i, LIST_TEXT_COL_NO - 1) = Space(.List(i, LEVEL_COL_NO - 1) * 8) & _
            "- " & .List(i, NAME_COL_NO - 1) & "*(" & itemCount & ")"
        Else
          .List(i, LIST_TEXT_COL_NO - 1) = Space(.List(i, LEVEL_COL_NO - 1) * 8) & _
            "- " & .List(i, NAME_COL_NO - 1)
        End If
      End If
    Next i
  End With

End Sub
Sub saveCGSTree(CGSTree As Object)
  Dim dataRow As Range
  Dim i As Long
  Dim field As FieldClass
  Dim idColNo
  Dim nameColNo
  Dim descColNo
  Dim typeColNo
  Dim parentColNo
  
  With cgs
   .datasheet.Range("A2:G" & .lastItemRowNo).ClearContents
  End With
  Set field = GetFieldByCodeName("GroupID")
  idColNo = field.colNo
  Set field = GetFieldByCodeName("GroupName")
  nameColNo = field.colNo
  Set field = GetFieldByCodeName("GroupDescription")
  descColNo = field.colNo
  Set field = GetFieldByCodeName("GroupType")
  typeColNo = field.colNo
  Set field = GetFieldByCodeName("ParentID")
  parentColNo = field.colNo
    
  With CGSTree
    For i = 0 To .ListCount - 1
      Set dataRow = shCGS.Rows(i + 2)
      If idColNo > 0 Then
        dataRow.Cells(idColNo).value = .List(i, ID_COL_NO - 1)
      End If
      If nameColNo > 0 Then
        dataRow.Cells(nameColNo).value = .List(i, NAME_COL_NO - 1)
      End If
      If descColNo > 0 Then
        dataRow.Cells(descColNo).value = .List(i, DESC_COL_NO - 1)
      End If
      If typeColNo > 0 Then
        dataRow.Cells(typeColNo).value = .List(i, TYPE_COL_NO - 1)
      End If
      If parentColNo > 0 Then
        dataRow.Cells(parentColNo).value = .List(i, PARENT_COL_NO - 1)
      End If
    Next i
  End With
'1.503
  SaveArticleMapData
End Sub
Sub saveTempCGSTree(CGSTree As Object)
  Dim dataRow As Range
  Dim i As Long
  Dim j As Long
  
  firstRowNo = CGS_DATA_FIRST_ROW
  lastRowNo = CGSTree.ListCount + firstRowNo - 1
  
  With ThisTemplate.shTemp
    Set cgsDataRange = .Range(.Cells(firstRowNo, _
      TEMP_CGS_FIRST_COL), .Cells(lastRowNo, TEMP_CGS_LAST_COL))
  End With
  cgsDataRange.Clear
  With CGSTree
    For i = 0 To .ListCount - 1
      j = i + 1
      cgsDataRange.Cells(j, ID_COL_NO).value = .List(i, ID_COL_NO - 1)
      cgsDataRange.Cells(j, NAME_COL_NO).value = .List(i, NAME_COL_NO - 1)
      cgsDataRange.Cells(j, DESC_COL_NO).value = .List(i, DESC_COL_NO - 1)
      cgsDataRange.Cells(j, TYPE_COL_NO).value = .List(i, TYPE_COL_NO - 1)
      cgsDataRange.Cells(j, PARENT_COL_NO).value = .List(i, PARENT_COL_NO - 1)
      cgsDataRange.Cells(j, LEVEL_COL_NO).value = .List(i, LEVEL_COL_NO - 1)
      cgsDataRange.Cells(j, ORDER_COL_NO).value = .List(i, ORDER_COL_NO - 1)
    Next i
  End With

End Sub
Sub selectCGSItem(CGSTree As Object, txtID)
  Dim i As Long
  With CGSTree
    For i = 0 To .ListCount - 1
      If .List(i, ID_COL_NO - 1) = txtID Then
        .listIndex = i
        Exit For
      End If
    Next i
  End With
End Sub
Function CopyArticleMapData()
  Dim field As FieldClass
  
  Set field = GetFieldByCodeName("CatCode")
  catCodeColNo = field.colNo
  shData.Columns(catCodeColNo).Copy shTemp.Columns(TEMP_CATCODE_COL_NO)
End Function
Function SaveArticleMapData()
  Dim field As FieldClass
  
  Set field = GetFieldByCodeName("CatCode")
  catCodeColNo = field.colNo
  shTemp.Columns(TEMP_CATCODE_COL_NO).Copy shData.Columns(catCodeColNo)
End Function
Function DeleteArticleMapData()
  shTemp.Columns(TEMP_CATCODE_COL_NO).Clear
End Function
'1.503
Sub deleteArticleToCGSMap(id)
  Dim i
  Dim catCodeRange As Range
  lastRowNo = items.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  Set catCodeRange = shTemp.Columns(TEMP_CATCODE_COL_NO)
  For i = ITEMS_DATA_FIRST_ROW To lastRowNo
    If catCodeRange.Cells(i).Formula = id Then
      catCodeRange.Cells(i).Clear
    End If
  Next i
End Sub
Sub ArticleWithoutMap(ArticleListBox As Object)
  Dim i As Long
  Dim j As Long
  Dim field As FieldClass
  
  Set field = GetFieldByCodeName("PartNum")
  PartNumColNo = field.colNo
  Set field = GetFieldByCodeName("ShortDesc")
  shortDescColNo = field.colNo
  lastRowNo = items.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  With items.datasheet
    ArticleListBox.enabled = True
    ArticleListBox.Clear
    j = 0
    For i = firstRowNo To lastRowNo
      If IsEmpty(shTemp.Cells(i, TEMP_CATCODE_COL_NO).value) Then
'1.502
        ArticleListBox.addItem Trim(.Cells(i, PartNumColNo).value), j
        ArticleListBox.List(j, 1) = i
        ArticleListBox.List(j, 2) = Trim(.Cells(i, shortDescColNo).value)
        j = j + 1
      End If
    Next i
    If j = 0 Then
      ArticleListBox.addItem GetMessage("FORM_CGS_MAP_NO_ITEMS_TO_MAP")
'      ArticleListBox.ColumnWidths = "150 pt;0 pt;0 pt"
      ArticleListBox.enabled = False
    End If
  End With
  
End Sub
Sub GroupMapping(ArticleListBox As Object, groupID)
  Dim i As Long
  Dim j As Long
  Dim field As FieldClass
  
  Set field = GetFieldByCodeName("PartNum")
  PartNumColNo = field.colNo
  Set field = GetFieldByCodeName("ShortDesc")
  shortDescColNo = field.colNo
  
  lastRowNo = items.lastItemRowNo
  firstRowNo = ITEMS_DATA_FIRST_ROW
  ArticleListBox.Clear
  ArticleListBox.enabled = True
  With items.datasheet
    j = 0
    For i = firstRowNo To lastRowNo
      If CStr(shTemp.Cells(i, TEMP_CATCODE_COL_NO).value) = CStr(groupID) Then
'1.502
        ArticleListBox.addItem Trim(.Cells(i, PartNumColNo).value), j
        ArticleListBox.List(j, 1) = i
        ArticleListBox.List(j, 2) = Trim(.Cells(i, shortDescColNo).value)
        j = j + 1
      End If
    Next i
    If j = 0 Then
      ArticleListBox.addItem GetMessage("FORM_CGS_MAP_NO_MAPPED_ITEMS")
      ArticleListBox.enabled = False
    End If
  End With
End Sub
Sub SaveArticleMapping(ArticleListBox As Object, groupID)
  Dim i As Long

  With ArticleListBox
    For i = 0 To .ListCount - 1
      If .Selected(i) = True Then
        shTemp.Cells(.List(i, 1), TEMP_CATCODE_COL_NO).value = CStr(groupID)
      End If
    Next i
  End With
End Sub
Sub SaveArticleUnmapping(ArticleListBox As Object)
  Dim i As Long

  With ArticleListBox
    For i = 0 To .ListCount - 1
      If .Selected(i) = True Then
        shTemp.Cells(.List(i, 1), TEMP_CATCODE_COL_NO).Clear
      End If
    Next i
  End With
End Sub

Attribute VB_Name = "DataSetClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1

Public fields As New Collection      'collection that contains all possible fields on the data worksheet
Public dataFields As New Collection  'collection that contains fields they occur on the data worksheet
Public mandatoryFields As New Collection 'collection that contains all mandatory fields
Public keyFields As New Collection   'collection that contains all key fields
Public datasheet As Worksheet        'reference to worksheet with data
Public itemsInRows As Boolean        '
Public dataFieldsCount As Integer    'count of fields in dataFields collection
Public lastItemRowNo As Long         'absolute row number of last item on sheet
'1.05.03
Public isReplacement As Variant      '
Public actionFieldColNo As Integer   'absolute column number of "Action" field
'1.0
Public emptyRowsInDataSet As Boolean '
'Initializes DataSetClass object
Public Sub Init(sheetObject As Worksheet, rowFlag As Boolean)
  On Error GoTo error_handler
  
  dataFieldsCount = 0
  
  Set datasheet = sheetObject
  itemsInRows = rowFlag
  
  
  ReadFieldsProperties
  ReadSheetHeadings
  
'1.04 before GetItemLastRow
  dataFieldsCount = dataFields.Count
  
  If itemsInRows Then
    lastItemRowNo = GetItemLastRowNo
'1.501
    If ThisTemplate.shData.name = sheetObject.name Then
      itemRowsCount = lastItemRowNo - ITEMS_DATA_FIRST_ROW + 1
      progress5Percent = Int(itemRowsCount / 20)
    End If
  Else
    lastItemRowNo = 2
  End If
  
  
  Exit Sub
  
error_handler:

End Sub
'1.04 first empty row - 1
'1.0
'Searchs for last item row (first empty cell - 1 in PartNum column)
Private Function GetItemLastRowNo()
  Dim i As Long
  
  With datasheet.Columns(1)
    For i = ITEMS_DATA_FIRST_ROW To EXCEL_MAX_ROW_NO
      If IsEmpty(.Cells(i).value) Then
        If Application.WorksheetFunction.CountA(datasheet.Range( _
          datasheet.Cells(i, 1), datasheet.Cells(i, dataFieldsCount))) = 0 Then
          GetItemLastRowNo = i - 1
          Exit For
        End If
      End If
    Next i
  End With

End Function

'Reads fields definitions from shRules sheet and build fields collection
Private Sub ReadFieldsProperties()
  On Error GoTo error_handler
  
  Dim i As Integer
  Dim j As Integer
  Dim colDef As Range     'column definitions range
  Dim field As FieldClass
  Dim propertyRef As Range
  Dim columnsTable As Range
  Dim colHeadings As Range
  
  Dim nameCol As Integer
  Dim codeNameCol As Integer
  Dim sheetCol As Integer
  Dim entityCol As Integer
  Dim keyCol As Integer
  Dim scaleCol As Integer
  Dim lengthCol As Integer
  Dim typeCol As Integer
  Dim mandatoryCol As Integer
  Dim defaultCol As Integer
  Dim formatCol As Integer
  Dim refListCol As Integer
  
  Dim findResult As Variant
'1.04
  Dim fieldValue As Variant
  Dim messageId

'1.05.03 default value type and length check
  Dim typeError As Variant
  
  Set columnsTable = GetRulesTableHeadings("Columns")
  If columnsTable Is Nothing Then
    Report INFO, "F_ERR_TEMPLATE"
    StopTest
  Else
    Set colHeadings = columnsTable.Rows(3)
    For j = 1 To UBound(colNoTable)
      Select Case colNoTable(j)(2)
        Case "Column Heading"
          nameCol = colNoTable(j)(1)
        Case "Code Name"
          codeNameCol = colNoTable(j)(1)
        Case "Sheet"
          sheetCol = colNoTable(j)(1)
        Case "Entity"
          entityCol = colNoTable(j)(1)
        Case "Key"
          keyCol = colNoTable(j)(1)
        Case "Length"
          lengthCol = colNoTable(j)(1)
        Case "Scale"
          scaleCol = colNoTable(j)(1)
        Case "Type"
          typeCol = colNoTable(j)(1)
        Case "Mandatory"
          mandatoryCol = colNoTable(j)(1)
        Case "Default"
          defaultCol = colNoTable(j)(1)
        Case "Format"
          formatCol = colNoTable(j)(1)
        Case "Reference list"
          refListCol = colNoTable(j)(1)
      End Select
    Next j
'loops thru field definitions
    For i = RULES_DATA_FIRST_ROW To UBound(columnsTable.Formula, 1)
      
      Set colDef = columnsTable.Rows(i) 'single column definitions range
      
'sheet name must be shData or shHeader sheet name in template
      Set propertyRef = colDef.Cells(sheetCol)
      If Not IsEmpty(propertyRef.value) Then
'1.501
        If ThisTemplate.shData.name <> propertyRef.value And _
          ThisTemplate.shHeader.name <> propertyRef.value And _
          ThisTemplate.shBMEHeader.name <> propertyRef.value And _
          ThisTemplate.shCGS.name <> propertyRef.value Then
'to report one time only for Header
          If Me.itemsInRows = False Then
            Report F_ERR, "F_ERR_SHEET_NAME", propertyRef, propertyRef.value
            Exit Sub
          End If
        End If
      Else
        Report F_ERR, "F_ERR_EMPTY_VALUE", propertyRef, "Sheet"
      End If
      
'checks if belong field to data set sheet
      If propertyRef.value = datasheet.name Then
          
        For j = 1 To UBound(colNoTable)
          Set propertyRef = colDef.Cells(colNoTable(j)(1))
          Select Case colNoTable(j)(2)
            Case "Mandatory", "Column Heading", "Length", "Entity", "Type"
              If IsEmpty(propertyRef.value) Then
                Report F_ERR, "F_ERR_EMPTY_VALUE", propertyRef, colNoTable(j)(2)
              End If
            Case Else
          End Select
        Next j
        dataFieldsCount = dataFieldsCount + 1
        
        Set propertyRef = colDef.Cells(sheetCol)
          
        Set field = New FieldClass 'initializes field description
        
        With field
          .sheet = propertyRef.value
          .rowNo = i
'initializes field properties with values from "columns table" values
'checks "columns table" values
          .name = colDef.Cells(nameCol).value
          
          .codeName = colDef.Cells(codeNameCol).value
          
          Set propertyRef = colDef.Cells(entityCol)
            .entity = propertyRef.value
'checks entity for valid value
'1.501
          If ThisTemplate.BMECatMode = True Then
            If datasheet.name <> ThisTemplate.shCGS.name Then
              If Len(.entity) > 0 Then
                IsPropertyValueIn Array("E1", "E2", "E3"), _
                  propertyRef, .name, "F_ERR_ENTITY"
              End If
            End If
          End If
          Set propertyRef = colDef.Cells(keyCol)
          .key = propertyRef.value
'checks key for valid value (must be integer number)
'1.505
             If Not IsEmpty(.key) Then
                IsPropertyValueIn Array(1, 2, 3), _
                  propertyRef, .name, "F_ERR_KEY"
             End If
          Set propertyRef = colDef.Cells(lengthCol)
          .length = propertyRef.value
'checks length for valid value (must be integer number)
'1.504
          If IsPropertyInteger(propertyRef, .name, "F_ERR_LENGTH") Then
            If .length < 0 And .length <> -1 Then
              Report F_ERR, "F_ERR_LENGTH", propertyRef, .name, .length
            End If
          End If
          
         
          Set propertyRef = colDef.Cells(typeCol)
          .typ = propertyRef.value
'checks column type for valid value
          If Len(.typ) > 0 Then
            IsPropertyValueIn Array(TYPE_DATE, TYPE_FILE, TYPE_CHAR, TYPE_INTEGER, TYPE_UINTEGER, TYPE_NUMBER, TYPE_UNUMBER), _
              propertyRef, .name, "F_ERR_FIELD_TYPE"
          End If
          
          Set propertyRef = colDef.Cells(scaleCol)
          .scal = propertyRef.value
'checks scale for valid value (must be integer number)
          If .typ = TYPE_NUMBER Or .typ = TYPE_UNUMBER Then
'1.504
            If IsPropertyInteger(propertyRef, .name, "F_ERR_SCALE") Then
              If Not IsEmpty(.scal) And .scal <= 0 Then
                Report F_ERR, "F_ERR_SCALE", propertyRef, .name, .scal
              End If
            End If
          Else
            If Len(.scal) > 0 Then
              Report F_ERR, "F_ERR_SCALE_TYPE", propertyRef, .name
            End If
          End If
          
          Set propertyRef = colDef.Cells(mandatoryCol)
          .mandatory = propertyRef.value
'checks mandatory for valid value
          If Len(.mandatory) > 0 Then
            IsPropertyValueIn Array(1, 2, 3), _
              propertyRef, .name, "F_ERR_MANDATORY_TYPE"
          End If
          
          Set propertyRef = colDef.Cells(formatCol)
          .formatString = propertyRef.value
'checks format for valid value
          If Not IsEmpty(.formatString) Then
            If .length > 0 And .length < Len(.formatString) Then
              Report F_ERR, "F_ERR_FORMAT_LENGTH", propertyRef, .name, _
                .formatString
            End If
            For j = 1 To Len(.formatString)
              Select Case Mid(.formatString, j, 1)
                Case TYPE_CHAR, TYPE_NUMBER
                Case Else
                  Report F_ERR, "F_ERR_FORMAT", propertyRef, _
                    .formatString, .name
                  Exit For
              End Select
            Next j
          End If
           
          Set propertyRef = colDef.Cells(refListCol)
          .refListName = propertyRef.value
'checks reflist for valid value
          If Len(.refListName) > 0 Then
            Set .refList = GetReferenceList(.refListName)
            If .refList Is Nothing Then
              Report F_ERR, "F_ERR_REFLIST", propertyRef, _
                .refListName, .name
            End If
          End If
          
          Set propertyRef = colDef.Cells(defaultCol)
          .default = propertyRef.value
          If Len(.default) > 0 Then
            If Not .refList Is Nothing Then
'1.04
              If .typ = TYPE_FILE Then
                fieldValue = GetFileExtension(.default)
                If Len(fieldValue) > 0 Then
                  messageId = "F_ERR_DEFAULT_EXT"
                Else
                  messageId = "F_ERR_DEFAULT_EXT_FILE"
                End If
              Else
                messageId = "F_ERR_DEFAULT"
                fieldValue = .default
              End If
'1.05.03 MatchCase:=True
              Set findResult = .refList.Find(fieldValue, _
                LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
              If findResult Is Nothing Then  'if no match is found
                Report F_ERR, messageId, propertyRef, _
                  .default, .name, .refListName
              End If
            Else
'1.05.03 default value type and length check
              typeError = IsTypeError(propertyRef, field)
              If IsEmpty(typeError) Then
                If Len(.length) > 0 Then
                  If .length <> -1 And Len(.default) > .length Then
                    Report F_ERR, "F_ERR_DEFAULT_LENGTH", propertyRef, .name
                  End If
                End If
              Else
'1.505
                If typeError = "E_FORMAT" Then
                  Report F_ERR, "F_ERR_DEFAULT_FORMAT", propertyRef, .default, .name, .typ
                Else
                  Report F_ERR, "F_ERR_DEFAULT_TYPE", propertyRef, .default, .name, .typ
                End If
              End If
            End If
          End If
          
        End With 'With field
        fields.Add field 'add field to collection
      End If
    Next i
  End If
  Exit Sub
  
error_handler:
End Sub

Private Function IsPropertyInteger(refToValue As Range, valueName As Variant, _
  messageId As String)
  
  IsPropertyInteger = True
  
  With refToValue
    If Not IsEmpty(.value) Then
      If Not IsNumeric(.value) Then
        Report F_ERR, messageId, refToValue, valueName, .value
        IsPropertyInteger = False
      Else
        If Int(.value) <> .value Then
          Report F_ERR, messageId, refToValue, valueName, .value
          IsPropertyInteger = False
        End If
      End If
    End If
  End With

End Function

Private Function IsPropertyValueIn(valuesArr As Variant, refToValue As Range, _
  valueName As Variant, messageId As String) As Boolean
  
  Dim i As Integer
  
  
  With refToValue
    For i = 1 To UBound(valuesArr)
      If .value = valuesArr(i) Then
        IsPropertyValueIn = True
        Exit For
      End If
    Next i
    If IsPropertyValueIn = False Then
      Report F_ERR, messageId, refToValue, valueName, .value
    End If
  End With

End Function

'Reads column/row headings from data sheet and bind columns/rows with
'fields in fields collection.
'Builds keyFields and mandatoryfields collections.
'Determines "Action" field column
'Determines "IsReplacement" field value
Private Sub ReadSheetHeadings()
  On Error GoTo error_handler
  
  Dim sortArr() As Integer 'used to sort dataFields
  Dim field
  Dim headings As Range    'range (column/row) with headings
  Dim i
  Dim foundFlag
  Dim lastCol As Integer
  Dim doubleflag As Boolean
  
  If itemsInRows = True Then  'determines heading names range
    Set headings = datasheet.Rows(1)
  Else
    Set headings = datasheet.Columns(1)
  End If
  
'determines last heading column number
  For i = EXCEL_MAX_COLUMN_NO To 1 Step -1
    If Not IsEmpty(headings.Cells(i).value) Then
      lastCol = i
      Exit For
    End If
  Next i
  
  For i = 1 To lastCol
    foundFlag = False
    doubleflag = False
    If Not IsEmpty(headings.Cells(i).value) Then
      For Each field In fields    'trys to bind with field in fields collection
        With field
        If headings.Cells(i).value = .name Then
          If .colNo = 0 Then
'field exists in fields collection
            .colNo = i
            foundFlag = True
          Else
            doubleflag = True
            foundFlag = False
          End If
          Exit For
        End If
        End With
      Next field 'For Each field In fields
    End If
    If foundFlag = False Then 'unknown/or empty field name
'adds field to fields collection
      dataFieldsCount = dataFieldsCount + 1
      Set field = New FieldClass
      With field
        .name = headings.Cells(i).value
'1.04
        .mandatory = MANDATORY_USER
        .ignore = True
        .colNo = i
        .doubleNameErr = doubleflag
      End With
      fields.Add field 'adds field to collection
    End If 'If foundFlag = False Then
  Next i
  i = 0
'determines order of dataFields
'builds keysFields and mandatoryFields collections
  ReDim sortArr(fields.Count)
  For Each field In fields
    i = i + 1
    
    If field.colNo <> 0 Then
      sortArr(field.colNo) = i
      If field.codeName = "IsReplacement" Then
        If field.colNo <> 0 Then 'if "IsReplacemant" field exists
          isReplacement = datasheet.Cells(field.colNo, HEADER_DATA_COLUMN).value
        End If
      End If
    End If 'If field.colNo <> 0 Then
    
    If field.key <> 0 Then 'if key field adds field to keyFields collection
      keyFields.Add field
    End If
    
    If field.mandatory = MANDATORY_REQUIRED Then 'if required field adds field to mandatoryFields collection
      mandatoryFields.Add field
    End If
    
    If field.codeName = "Action" Then 'determines "Action" field column number
      actionFieldColNo = field.colNo
    End If
  
  Next field 'For Each field In fields

'builds dataFields collection
  For i = 1 To fields.Count
    If sortArr(i) <> 0 Then
      dataFields.Add fields(sortArr(i))
    Else
      Exit For
    End If
  Next i
  Exit Sub
  
error_handler:
End Sub



Attribute VB_Name = "FieldClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1

Public name As String 'language dependent field name
Public sheet As String
Public entity As String
Public codeName As String  'language independent field name
Public key As Variant
Public length As Variant
Public typ As Variant       'type
Public scal As Variant     'scale
Public mandatory As Variant
Public default As String
Public formatString As String
Public refList As Range    'ref to reference list

Public refListName As String    'reference list name
Public rowNo As Integer 'absolute row number in "Columns table"
Public colNo As Integer      'absolute field's column number
Public ignore As Boolean   'true for additional fields
Public doubleNameErr As Boolean   'true for additional fields
Public prevValue 'for reference list checking
Public prevValueOK As Boolean  'true if previous value was valid

'counts how many times empty value was replaced with default value
Public emptyDefaultCounter As Long
Public mandatoryColumnMissingError As Boolean


Attribute VB_Name = "Globals"
'----------------------------------------------------------------------------
' This code is written by Slawomir Krygowski (slawomir@krygowski.net)
'   version 1.507
'   last revision 24.03.2004
'----------------------------------------------------------------------------
Option Explicit
Option Base 1
Option Private Module
'Public Constants
'Excel limits constants
Public Const EXCEL_MAX_ROW_NO As Long = 65536 'Excel max row number on sheet
Public Const EXCEL_MAX_COLUMN_NO As Long = 256 'Excel max column number on sheet


'data place constants
Public Const RULES_DATA_FIRST_ROW = 4 'first row of data on shRules sheet
Public Const RULES_TABLE_NAME_ROW = 2 'row with table names on shRules sheet
Public Const RULES_COLUMN_NAME_ROW = 3 'row with table column names on shRules sheet
Public Const DEFS_DATA_FIRST_ROW = 3 'first row of data on shDefs sheet
Public Const HEADER_DATA_COLUMN = 2   'column with header data on shHeader sheet
Public Const ITEMS_DATA_FIRST_ROW = 2 'first row of items data on shData sheet
'1.501
Public Const CGS_DATA_FIRST_ROW = ITEMS_DATA_FIRST_ROW 'first row of CGS data on shCGS sheet
Public Const FIRST_ERROR_LINE = 3     'start row for error messages on shReport sheet

Public Const MAX_ERRORS_REPORTED As Long = 65000 'max errors\warnings count limit
'must be < EXCEL_MAX_ROW_NO - FIRST_ERROR_LINE

Public Const MAX_ERRORS_REPORTED_DEFAULT As Long = 1000 'default errors\warnings count limit

'error types constants
Public Const F_ERR As Integer = 1
Public Const F_WARN As Integer = 2
Public Const ERR As Integer = 3
Public Const WARN As Integer = 4
Public Const INFO  As Integer = 5

'field mandatory constants
Public Const MANDATORY_REQUIRED = 1
Public Const MANDATORY_RECOMMENDED = 2
Public Const MANDATORY_OPTIONAL = 3
'1.04
Public Const MANDATORY_USER = -1

Public Const ENTITY_1 As String = "E1"
Public Const ENTITY_2 As String = "E2"
Public Const ENTITY_3 As String = "E3"

'action code constants
Public Const ACTION_ADD As String = "add"
Public Const ACTION_DELETE As String = "delete"
Public Const ACTION_UPDATE As String = "update"
Public Const ACTION_MODIFY As String = "modify"

'color index to sign that hyperlink was followed
Public Const FOLLOWED_COLOR_INDEX = 54 '16

'rule status values
Public Const RULE_STATUS_TO_RUN = 0
Public Const RULE_STATUS_RUNNING = 1
Public Const RULE_STATUS_OK = 2
Public Const RULE_STATUS_ERRORS = 3
Public Const RULE_STATUS_WARNINGS = 4
Public Const RULE_STATUS_DISABLED = 5
Public Const RULE_STATUS_INTERRUPTED = 6
Public Const RULE_STATUS_NOT_APPLICABLE = 7

Public Const RULE_TEST As Boolean = False
Public Const RULE_EXECUTE As Boolean = True

'shTemp columns number definitions
Public Const TEMP_NOT_UNIQUE_KEYS_COL_NO = 1
Public Const TEMP_REF_CODES_COL_NO = 2
Public Const TEMP_ROW_NO_COL_NO = 3
Public Const TEMP_ERROR_COL_NO = 4
Public Const TEMP_ACTION_COL_NO = 5

'parameter variant constants
Public Const PARAMS_FIELD_FIELD = 1
Public Const PARAMS_FIELD_CONST = 2
Public Const PARAMS_FIELD_EMPTY = 3

'Field type constants
Public Const TYPE_DATE As String = "D"
Public Const TYPE_CHAR As String = "C"
Public Const TYPE_FILE As String = "F"
Public Const TYPE_INTEGER As String = "I"
Public Const TYPE_UINTEGER As String = "UI"
Public Const TYPE_NUMBER As String = "N"
Public Const TYPE_UNUMBER As String = "UN"

'1.04
Public Const NAME_FALSE As String = "=0"
Public Const NAME_TRUE As String = "=1"


'user defined types
Public Type actionCodeType
  languageName As Variant 'language dependent action code
  codeName As Variant     'language independent action code
End Type


'Global Variables
Public header As DataSetClass 'reference to Header data set
Public items As DataSetClass  'reference to Item Data data set
'1.501
Public cgs As DataSetClass  'reference to Catalog Group System data set
Public BMECatHeader As DataSetClass  'reference to BMECat Header data set

Public currErrorLineNo As Long 'current error line number (absolute row number on shReport)

Public rulesList As Collection 'collection of all rules to execute
Public activeRule As RuleClass 'reference to currently executing rule

Public itemsAreSorted As Boolean 'true if item data are sorted
Public runTestFlag As Boolean 'true if cmdButtonStart is pressed
Public maxLinesReported As Long 'current errors/warnings count limit
Public errorsCounter As Long 'errors/warnings counter

Public passwordString As String
Public nothingRange As Range 'Nothing used with Report

Public colNoTable
'1.501
Public BMECatColNoTable

Public ThisTemplate As New TemplateClass

Public statusBarText As String
Public itemRowsCount As Long
Public progress5Percent As Long

'1.04
Public noMessagesOutput As Boolean 'if true then no messages output to shReport

'Colors constants for headings
Public Const MANDATORY_REQUIRED_INTERIOR_COLOR = 14
Public Const MANDATORY_RECOMMENDED_INTERIOR_COLOR = 12
Public Const MANDATORY_OPTIONAL_INTERIOR_COLOR = 19
Public Const MANDATORY_USER_INTERIOR_COLOR = 35
Public Const MANDATORY_REQUIRED_FONT_COLOR = 5
Public Const MANDATORY_RECOMMENDED_FONT_COLOR = 3
Public Const MANDATORY_OPTIONAL_FONT_COLOR = 54
Public Const MANDATORY_USER_FONT_COLOR = 10

'CGS node type constants
Public Const CGS_ROOT = "root"
Public Const CGS_NODE = "node"
Public Const CGS_LEAF = "leaf"

'BMECat constants
Public Const T_NEW = "T_NEW_CATALOG"
Public Const T_PRO = "T_UPDATE_PRODUCTS"
Public Const T_PRI = "T_UPDATE_PRICES"

Public BMEDoc As BMECatClass
'1.505
Public Const DEMO_BMECAT_ITEMS_LIMIT = 10
Public Const DEMO_GUID = "CAAFFD30-7584-443b-B4EF-14E87EE0136F"
Public Const HEILER_GUID = "FD2C5E21-D432-42f0-8F6A-8DA166DBAAB0"

'revisions
'1.01 08.09.2003 SK
'Test dialog heigth for Windows XP
'Template Version text error
'1.02 08.09.2003 SK
'Mandatory rule E3 error
'Excel Caption
'1.03 08.09.2003
'Names value problem
'1.04 09.09-30.09.2003 SK
'Mandatory rule ADD and UPDATE bug
'Items last row ("first empty row" -1 instead _
'"first row with empty 'PartNum' cell" - 1)
'PriceDataRange bug
'Redundant bug
'GetSupplier implementation
'shReport headings reading from shMessages
'shHeader and shData headings colored proper to field's mandatory

'09.12.2003-09.01.2004 SK version 1.501
'BMECat Implementation
'1.502
'02.02.2003-04.02.2004 SK 1.503
'keyUnique bug
'GetItemKeyText bug
'BMECat table "!!!" is converted to lower case catalog context
'remove mappings to deleted CGS node
'UTF-8
'1.505 27.02.2004
'set faceId error handler
'demo version
'columns table key - test report error
'columns table format - test report error
'1.506 12.03.2004 SK
'CommodityGroupCheck bug
'1.507 24.03.2004 SK
'BMECatTransaction bug

Attribute VB_Name = "Main"
Option Explicit
Option Base 1
Option Private Module

#If perfTest = 1 Then
Dim tstart
Dim rulestart
#End If
'Clears contents of shReport
'1.04 Report sheet headings texts saved in _shMessages
Sub ClearReport()

  On Error GoTo error_handler
  Dim clearRange As Range
  Application.ScreenUpdating = False
  ThisTemplate.shReport.Unprotect
  currErrorLineNo = FIRST_ERROR_LINE
'1.04
  InitErrorTypeMessages
  
  With ThisTemplate.shReport
    Set clearRange = .Range(.Cells(FIRST_ERROR_LINE, 1), _
    .Cells(UBound(.UsedRange.Formula, 1), _
    UBound(.UsedRange.Formula, 2)))
'1.04
    .Cells(1, 1).value = GetMessage("REPORT_TITLE")
    .Cells(1, 2).value = GetMessage("REPORT_CLICK")
    .Cells(FIRST_ERROR_LINE - 1, 1).value = GetMessage("REPORT_CELL")
    .Cells(FIRST_ERROR_LINE - 1, 2).value = GetMessage("REPORT_RULE")
    .Cells(FIRST_ERROR_LINE - 1, 3).value = GetMessage("REPORT_ERROR")
    .Cells(FIRST_ERROR_LINE - 1, 4).value = GetMessage("REPORT_MESSAGE")
  End With
  With clearRange
    .ClearContents
    .Font.ColorIndex = xlAutomatic
  End With
    
  ThisTemplate.shReport.Cells(FIRST_ERROR_LINE, 4).Select
  Exit Sub
  
error_handler:

End Sub

'stop test execution. Used when template test fatal errors occurs
'or errors limit is exceeded.
Sub StopTest(Optional errorLimit As Boolean = False)
  On Error GoTo error_handler
  
  DeleteSortKeys
  If Not activeRule Is Nothing Then
    activeRule.status = RULE_STATUS_INTERRUPTED
  End If
  ThisTemplate.shReport.Activate
  Application.ScreenUpdating = True

'if error limit
  If errorLimit = True Then
    TestDialog.TestResult
    ReportInfo GetMessage("TEST_INTERRUPTED")
    Application.StatusBar = GetMessage("TEST_INTERRUPTED")
    MarkLastCheckStatus 0
  End If
  Application.StatusBar = ""
  Application.DisplayStatusBar = ThisTemplate.isStatusBarVisible

error_handler:
  End 'stops program execution

End Sub

'main test procedure
Private Sub StartTest()
  On Error GoTo error_handler
  
  'H+K Customizing
  'hide the exampleitems, should not be testet or exported
  'shData.Rows("2:6").Hidden = True
  shDefs.Unprotect ("E_Cat1!")
  shDefs.Columns("A:AL").Hidden = False
  shData.Unprotect ("E_Cat1!")
  Dim i As Integer
  Dim ruleReturnValue

'1.04
  noMessagesOutput = False
  maxLinesReported = MAX_ERRORS_REPORTED_DEFAULT
  errorsCounter = 0
  ClearReport
  Application.ScreenUpdating = False
  Application.DisplayStatusBar = True
  
'test template definitions and other things
  If IsTemplateOK Then
  
'others required data structures and variables initializations
    
    If items.lastItemRowNo < ITEMS_DATA_FIRST_ROW Then
      For i = 2 To rulesList.Count
        rulesList.Remove 2
      Next i
      Report ERR, "E_NO_ITEMS_DATA"
    Else
      InitActionCodesArray
      InitItemsKeysArray
    End If

    ThisTemplate.shReport.Activate

'displays TestDialog
    
    Application.ScreenUpdating = True
    Application.StatusBar = ""
'clears all temp data
'1.501
    ThisTemplate.shTemp.Columns("A:Z").Clear
'set reference to not unique keys range
    Set notUniqueKeys = ThisTemplate.shTemp.Columns(TEMP_NOT_UNIQUE_KEYS_COL_NO)
'set reference to action code range
    Set actionTemp = ThisTemplate.shTemp.Columns(TEMP_ACTION_COL_NO)
    TestDialog.Show
    Application.ScreenUpdating = True
    If runTestFlag = True Then

#If perfTest = 1 Then
Debug.Print
Debug.Print "Total time", "Rule time", "Rule name"
Debug.Print "---------------------------------------"
tstart = Timer
#End If
      
      Application.ScreenUpdating = False
      SortByItemDataKey

#If perfTest = 1 Then
Debug.Print Format(Timer - tstart, "0.0"), Format(Timer - tstart, "0.0"), "sort"
#End If
'main loop thru rules collection
      
      For i = 1 To rulesList.Count
#If perfTest = 1 Then
rulestart = Timer
#End If
        
        ruleReturnValue = rulesList(i).Execute

#If perfTest = 1 Then
Debug.Print Format(Timer - tstart, "0.0"), Format(Timer - rulestart, "0.0"), rulesList(i).codeName
#End If

      
      Next i
      
'1.501
      ThisTemplate.shTemp.Columns("A:Z").Clear
      
      Set activeRule = Nothing
'delete our sort columns
      DeleteSortKeys
'show raport sheet
      ThisTemplate.shReport.Activate
      ActiveWindow.ScrollRow = FIRST_ERROR_LINE
      ActiveWindow.ScrollColumn = 1
        
      ThisTemplate.tested = True
      If errorsCounter > 0 Then
        Report INFO, "TEST_COMPLETED_ERRORS"
        Application.StatusBar = GetMessage("TEST_COMPLETED_ERRORS")
        MarkLastCheckStatus 0
      Else
        Report INFO, "TEST_COMPLETED_NO_ERRORS"
        Application.StatusBar = GetMessage("TEST_COMPLETED_NO_ERRORS")
        MarkLastCheckStatus 1
      End If
      
      Application.ScreenUpdating = True
'displays test status dialog
      TestDialog.TestResult
      Application.DisplayStatusBar = ThisTemplate.isStatusBarVisible
    End If
  
    Application.StatusBar = ""
    Application.ScreenUpdating = True

      
  End If
'delete our sort columns
  DeleteSortKeys
  
    'H+K Customizing
  'Unhide the exampleitems so that the user can see them again
 ' shData.Rows("2:6").Hidden = False
  shDefs.Columns("A:AL").Hidden = True
  shDefs.Protect ("E_Cat1!")
  shData.Protect Password:="E_Cat1!", Contents:=True, AllowFormattingCells:=True, AllowDeletingRows:=True, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowSorting:=True, AllowInsertingRows:=True
  shCGS.Visible = xlSheetHidden
  shBMEHeader.Visible = xlSheetHidden
  Exit Sub
error_handler:
End Sub

'Builds "Item data key" column on shData sheet with (PartNum+PartNumExt+UOM)
'Sorts Item Data by "Item data key"
'key elements are separated by special character "|"
'sorts only by present key columns,
'fixed sort columns order
'independent from "Columns table" Key and Entity columns values
'PartNum, PartNumExt, UOM, Effective Date, QtyMin
Private Sub SortByItemDataKey()
  On Error GoTo error_handler
  
  Dim dataSet As Range
  Dim itemKeyColNo  '"Item data key" column number
  Dim lastItemRowNo 'row number for last item
  Dim field
  Dim concatString
  Dim itemKeyFormula 'concatenation "Item data key" formula
  Dim priceKeyFormula 'concatenation "Price data key" formula
  Dim i
  Dim qtyMinColNo 'column number of QtyMin column on shData
  Dim effectiveDateColNo 'column number of Effective Date column on shData
  
  Application.StatusBar = GetMessage("SORTING") & " " & GetMessage("RULE_STATUS_RUNNING")
  lastItemRowNo = items.lastItemRowNo
  itemKeyColNo = items.dataFieldsCount + 1
   
  

'builds concatenation formula for "Item data key"
'key elements are separated by special character "|"
  Application.EnableEvents = False
  concatString = "=RC"
  Set field = GetFieldByCodeName("PartNum")
  If field.colNo > 0 Then
    itemKeyFormula = itemKeyFormula & concatString & field.colNo
    concatString = "&""|""&RC"
  End If
  Set field = GetFieldByCodeName("PartNumExt")
  If field.colNo > 0 Then
    itemKeyFormula = itemKeyFormula & concatString & field.colNo
    concatString = "&""|""&RC"
  End If
'  Set field = GetFieldByCodeName("UOM")
'  If field.colNo > 0 Then
'    itemKeyFormula = itemKeyFormula & concatString & field.colNo
'    concatString = "&""|""&RC"
'  End If
  
'builds concatenation formula for "Price data key"
  concatString = "=RC"
  Set field = GetFieldByCodeName("EffectiveDate")
  If field.colNo > 0 Then
    effectiveDateColNo = field.colNo
    priceKeyFormula = priceKeyFormula & concatString & field.colNo
    concatString = "&""|""&RC"
  End If
  Set field = GetFieldByCodeName("QtyMin")
  If field.colNo > 0 Then
    qtyMinColNo = field.colNo
    priceKeyFormula = priceKeyFormula & concatString & field.colNo
  End If
  
  If Len(itemKeyFormula) <> 0 Then

'builds "Item data key"
    With items.datasheet
      .Range(.Cells(6, itemKeyColNo), .Cells(lastItemRowNo, _
        itemKeyColNo)).FormulaR1C1 = itemKeyFormula

'sorts by "Item data key" and
      Set dataSet = .Range(.Cells(6, 1), .Cells(lastItemRowNo, _
        itemKeyColNo))
    End With
    
    With dataSet
      If qtyMinColNo > 0 Then
        If effectiveDateColNo > 0 Then
'all keys columns are present
            .Sort Key1:=.Cells(6, itemKeyColNo), Order1:=xlAscending, _
              Key2:=.Cells(6, effectiveDateColNo), Order2:=xlAscending, _
              key3:=.Cells(6, qtyMinColNo), order3:=xlAscending, _
              header:=xlYes
        Else
'Effective Date column is missing
            .Sort Key1:=.Cells(6, itemKeyColNo), Order1:=xlAscending, _
              Key2:=.Cells(6, qtyMinColNo), Order2:=xlAscending, _
              header:=xlYes
        End If
      Else
        If effectiveDateColNo > 0 Then
'QytMin column is missing
            .Sort Key1:=.Cells(6, itemKeyColNo), Order1:=xlAscending, _
              Key2:=.Cells(6, effectiveDateColNo), Order2:=xlAscending, _
              header:=xlYes
        Else
'Effective Date and QytMin columns are missing
            .Sort Key1:=.Cells(6, itemKeyColNo), Order1:=xlAscending, _
              header:=xlYes
        End If
      End If
    End With

'builds "Price data key"
    With items.datasheet
      
      .Range(.Cells(6, itemKeyColNo + 1), .Cells(lastItemRowNo, _
        itemKeyColNo + 1)).FormulaR1C1 = priceKeyFormula
    
    End With
    
    itemsAreSorted = True
  End If
finally:
  Application.EnableEvents = True
  Exit Sub
  
error_handler:
  GoTo finally
End Sub

'Deletes "Item data key" and "Price data key" columns from shData sheet
Private Sub DeleteSortKeys()
  On Error GoTo error_handler
  Dim itemKeyColNo  '"Item data key" column number
  
  If itemsAreSorted = True Then 'if item data are sorted
    Application.EnableEvents = False
    With items
      itemKeyColNo = .dataFieldsCount + 1 'determines "Item data key" column number
      .datasheet.Columns(itemKeyColNo).Delete Shift:=xlToLeft 'deletes "Item data key" column
      .datasheet.Columns(itemKeyColNo).Delete Shift:=xlToLeft 'deletes "Price data key" column
    End With
    itemsAreSorted = False
  
  End If 'If itemsAreSorted = True Then

finally:
  Application.EnableEvents = True
  Exit Sub
  
error_handler:
  GoTo finally

End Sub

'creates PSX Toolset Menu
Sub CreatePSXToolsetMenu() 'Optional hideMacro As Variant = "")
  Dim myControl1
  Dim myControl2
  Dim menu As CommandBar
'1.501
  Dim mButtonProp(2)  'menu button properties array
  Dim i
  Dim j
  Dim menuexists
  
  Const BMECAT_VISIBLE = 1
  Const BMECAT_INVISIBLE = 0
  Const BMECAT_INDEPENDENT = 2
  Const BMECAT_SUPERVISOR = 3
  Const SUPERVISOR_DEPENDENT = 4
'1.03
  If Names("TemplateCorrupted").value = NAME_FALSE Then
    menuexists = False
  
    For Each menu In CommandBars
      If menu.name = "PSX Toolset" Then
        menu.Delete
        Exit For
      End If
    Next menu
  
'menu button definitions

    mButtonProp(1) = Array(0, msoControlButton, "MENU_BAR", "", "", msoButtonCaption, 0, BMECAT_INDEPENDENT)
  
    mButtonProp(2) = Array(0, msoControlButton, "MENU_BUTTON_TEST", "MENU_BUTTON_TEST_TIP", _
      "StartTest", msoButtonIconAndCaption, 186, BMECAT_INDEPENDENT)
  
    'mButtonProp(3) = Array(0, msoControlButton, "MENU_BUTTON_HELP", "MENU_BUTTON_HELP_TIP", _
    '  "ShowInstructions", msoButtonIconAndCaption, 1954, BMECAT_INDEPENDENT)
  
   ' mButtonProp(4) = Array(0, msoControlButton, "MENU_BUTTON_REPORT", _
   '   "MENU_BUTTON_REPORT_TIP", "ShowReport", msoButtonIconAndCaption, _
   '   172, BMECAT_INDEPENDENT)
  
   ' mButtonProp(5) = Array(0, msoControlButton, "MENU_BUTTON_HEADER", _
   '   "MENU_BUTTON_HEADER_TIP", "ShowHeader", msoButtonIconAndCaption, _
   '   995, BMECAT_INDEPENDENT)
  
   ' mButtonProp(6) = Array(0, msoControlButton, "MENU_BUTTON_DATA", _
   '   "MENU_BUTTON_DATA_TIP", "ShowItemData", msoButtonIconAndCaption, _
   '   993, BMECAT_INDEPENDENT)
  
   ' mButtonProp(7) = Array(0, msoControlPopup, "MENU_POPUP_BMECAT", "", _
   '   "", msoButtonCaption, , BMECAT_VISIBLE)
  
   ' mButtonProp(8) = Array(0, msoControlButton, "MENU_BUTTON_UPLOAD", _
   '   "MENU_BUTTON_UPLOAD_TIP", "UploadData", msoButtonIconAndCaption, _
   '   2934, BMECAT_INVISIBLE)
  
   ' mButtonProp(9) = Array(0, msoControlButton, "MENU_BUTTON_HOME", _
   '   "MENU_BUTTON_HOME_TIP", "GoHome", msoButtonIconAndCaption, _
   '   1016, BMECAT_INDEPENDENT)
    
   ' mButtonProp(10) = Array(7, msoControlButton, "MENU_BUTTON_CGS", _
   '   "MENU_BUTTON_CGS_TIP", "ShowCGS", msoButtonIconAndCaption, _
   '   702, BMECAT_VISIBLE)
   ' mButtonProp(11) = Array(7, msoControlButton, "MENU_BUTTON_CGS_MAP", _
   '   "MENU_BUTTON_CGS_MAP_TIP", "ShowArticleMap", _
   '   msoButtonIconAndCaption, 2170, BMECAT_VISIBLE)
      
   ' mButtonProp(12) = Array(7, msoControlButton, _
   '   "MENU_BUTTON_BMECAT_ITEM_MAP", "MENU_BUTTON_BMECAT_ITEM_MAP_TIP", _
   ' "ShowBMECATItemMap", msoButtonIconAndCaption, 989, BMECAT_SUPERVISOR)
      
   ' mButtonProp(13) = Array(7, msoControlButton, _
   '   "MENU_BUTTON_BMECAT_HEADER_MAP", "MENU_BUTTON_BMECAT_HEADER_MAP_TIP", _
   '   "ShowBMECATHeaderMap", msoButtonIconAndCaption, 988, BMECAT_SUPERVISOR)
      
    'mButtonProp(14) = Array(0, msoControlButton, _
    '  "MENU_BUTTON_BMECAT_GEN", "MENU_BUTTON_BMECAT_GEN_TIP", _
    '  "GenBMECAT", msoButtonIconAndCaption, 44, BMECAT_VISIBLE)
  
    
'creates menu bar
    Set menu = CommandBars.Add(name:="PSX Toolset", _
      Position:=msoBarTop, MenuBar:=False, Temporary:=True)
    menu.Protection = msoBarNoCustomize

'adds and initializes buttons to menu bar
'1.501
    For i = 1 To 2
      If mButtonProp(i)(1) = 0 Then
        Set myControl1 = menu.Controls.Add(Type:=mButtonProp(i)(2))
        With myControl1
          .BeginGroup = True
          Select Case mButtonProp(i)(8)
            Case BMECAT_VISIBLE
              .Visible = ThisTemplate.BMECatMode
            Case BMECAT_INVISIBLE
              .Visible = Not ThisTemplate.BMECatMode
            Case SUPERVISOR_DEPENDENT
              If Names("SupervisorMode").value = NAME_TRUE Then
                .Visible = True
              Else
                .Visible = False
              End If
            Case BMECAT_SUPERVISOR
              If ThisTemplate.BMECatMode = True Then
                If Names("SupervisorMode").value = NAME_TRUE Then
                  .Visible = True
                Else
                  .Visible = False
                End If
              Else
                .Visible = False
              End If
            Case Else
              .Visible = True
          End Select
          .Caption = GetMessage(mButtonProp(i)(3))
          .TooltipText = GetMessage(mButtonProp(i)(4))
          .OnAction = mButtonProp(i)(5)
          If mButtonProp(i)(2) = msoControlButton Then
            .Style = mButtonProp(i)(6)
            If .Style = msoButtonIconAndCaption Then
'1.505
              setFaceId myControl1, mButtonProp(i)(7)
            End If
          End If
        End With
        For j = 1 To 2
          If mButtonProp(j)(1) = i Then
            Set myControl2 = myControl1.Controls.Add(Type:=mButtonProp(j)(2))
            With myControl2
              Select Case mButtonProp(j)(8)
                Case BMECAT_VISIBLE
                  .Visible = ThisTemplate.BMECatMode
                Case BMECAT_INVISIBLE
                  .Visible = Not ThisTemplate.BMECatMode
                Case SUPERVISOR_DEPENDENT
                  If Names("SupervisorMode").value = NAME_TRUE Then
                    .Visible = True
                  Else
                    .Visible = False
                  End If
                Case BMECAT_SUPERVISOR
                  If ThisTemplate.BMECatMode = True Then
                    If Names("SupervisorMode").value = NAME_TRUE Then
                      .Visible = True
                    Else
                      .Visible = False
                    End If
                  Else
                    .Visible = False
                  End If
                Case Else
                  .Visible = True
              End Select
              .Caption = GetMessage(mButtonProp(j)(3))
              .TooltipText = GetMessage(mButtonProp(j)(4))
              .OnAction = mButtonProp(j)(5)
              If mButtonProp(j)(2) = msoControlButton Then
                .Style = mButtonProp(j)(6)
                If .Style = msoButtonIconAndCaption Then
'1.505
                  setFaceId myControl2, mButtonProp(j)(7)
                End If
              End If
            End With
          End If
        Next j
      End If
    Next i
  
    menu.Visible = True
  
  End If
End Sub

'deletes PSX Toolset Menu
Sub DeletePSXToolsetMenu() 'Optional hideMacro As Variant = "")
  On Error GoTo error_handler
  CommandBars("PSX Toolset").Delete
error_handler:
End Sub
Function ZOOM_FACTOR() As Integer
    ZOOM_FACTOR = Application.UsableWidth / 597 * 100
End Function
'1.505
Sub setFaceId(control, faceid As Variant)
  On Error GoTo error_handler
  control.faceid = faceid
  Exit Sub
error_handler:
End Sub
'Goes to Heiler Home Web Site
Private Sub GoHome()
  
  startComponent GetMessage("SUPPLIER_PORTAL_URL")

End Sub

'Shows shInstruction sheet
Private Sub ShowInstructions()
  On Error GoTo error_handler
  ThisTemplate.shInstructions.Activate
error_handler:
End Sub

'Shows shReport sheet
Private Sub ShowReport()
  On Error GoTo error_handler
  ThisTemplate.shReport.Activate
error_handler:
End Sub
'1.501
'Shows cgsForm
Private Sub ShowCGS()
  On Error GoTo error_handler
  Dim ruleReturnValue
'1.506
  Dim checkRule As RuleClass
  Dim foundRule As Boolean
  
  noMessagesOutput = True

'create and initialize header data set
  TemplateInit
  noMessagesOutput = False
  maxLinesReported = MAX_ERRORS_REPORTED_DEFAULT
  errorsCounter = 0
  ClearReport
'1.506
  foundRule = False
  For Each checkRule In rulesList
    If checkRule.codeName = "CommodityGroupCheck" Then
      ruleReturnValue = checkRule.Execute
      foundRule = True
      Exit For
    End If
  Next checkRule
  If errorsCounter = 0 And foundRule = True Then
    Application.StatusBar = ""
    Application.ScreenUpdating = True
    If cgs.lastItemRowNo > 1 Then
'1.503
      CopyArticleMapData
      frmCGS.saved = True
      frmCGS.ShowTree
      frmCGS.Show
    Else
     If QuestionMsgBox(GetMessage("CGS_NO_DATA") & vbCr & _
       GetMessage("CGS_CREATE_ROOT")) Then
'1.503
       CopyArticleMapData
       frmCGS.saved = False
       frmCGS.AddRoot
       frmCGS.Show
     End If
    End If
  Else
    ShowReport
  End If
error_handler:
  ThisTemplate.shTemp.Columns("A:Z").Clear
End Sub
Private Sub ShowArticleMap()
  On Error GoTo error_handler
  Dim ruleReturnValue
  Dim field As FieldClass
'1.506
  Dim checkRule As RuleClass
  Dim foundRule As Boolean
  noMessagesOutput = True

'create and initialize header data set
  TemplateInit
  noMessagesOutput = False
  maxLinesReported = MAX_ERRORS_REPORTED_DEFAULT
  errorsCounter = 0
  ClearReport
'1.506
  foundRule = False
  For Each checkRule In rulesList
    If checkRule.codeName = "CommodityGroupCheck" Then
      ruleReturnValue = checkRule.Execute
      foundRule = True
      Exit For
    End If
  Next checkRule
  If errorsCounter = 0 And foundRule = True Then
    Application.StatusBar = ""
    Set field = GetFieldByCodeName("CatCode")
    If field Is Nothing Then
      ErrorMsgBox PrepMsg("NO_ITEM_TO_CGS_MAP_COLUMN", "CatCode")
    ElseIf field.colNo = 0 Then
      ErrorMsgBox PrepMsg("NO_ITEM_TO_CGS_MAP_COLUMN", field.name)
    Else
      Application.ScreenUpdating = True
      CopyArticleMapData
      If cgs.lastItemRowNo > 1 Then
        frmArticleMap.Show
      Else
        InfoMsgBox GetMessage("CGS_NO_DATA")
      End If
    End If
  Else
    ShowReport
  End If
error_handler:
  ThisTemplate.shTemp.Columns("A:Z").Clear
End Sub
Sub showBMECatItemMap()
  ShowBMECatMap "ITEM"
End Sub
Sub showBMECatHeaderMap()
  ShowBMECatMap "HEADER"
End Sub
Private Sub ShowBMECatMap(mapMode)
  On Error GoTo error_handler
  Dim ruleReturnValue
  noMessagesOutput = True

'create and initialize header data set
  BMECatTransaction = T_NEW
  BMECatContext = Mid(BMECatTransaction, 3)
  TemplateInit
  noMessagesOutput = False
  If mapMode = "HEADER" Then
    frmMapItemToBME.ShowHeaderMapping
  Else
    frmMapItemToBME.ShowItemMapping
  End If
  frmMapItemToBME.Show
error_handler:
  ThisTemplate.shTemp.Columns("A:Z").Clear
End Sub
Sub GenBMECat()
  Dim ruleReturnValue
  Dim field As FieldClass
  Dim genFlag As Boolean
  Dim currentSheet As Worksheet
  On Error GoTo error_handler

    'H+K Customizing
  'hide the exampleitems so that the user can see them again
  shData.Rows("2:6").Hidden = True
  
  If Names("TemplateCorrupted").value = NAME_FALSE Then
    If ThisTemplate.tested = False Then
      InfoMsgBox GetMessage("BMECAT_GEN_NOT_TESTED")
    Else
      If Names("LastCheckOk").value <> NAME_TRUE Then
        InfoMsgBox GetMessage("BMECAT_GEN_NOT_CORRECT")
      Else
        Set currentSheet = ActiveSheet
        maxLinesReported = MAX_ERRORS_REPORTED_DEFAULT
        errorsCounter = 0
        ClearReport
        Application.ScreenUpdating = False
        Application.DisplayStatusBar = True
        noMessagesOutput = False
        TemplateInit
        noMessagesOutput = True
        InitActionCodesArray
        Application.DisplayStatusBar = True
        SortByItemDataKey
        Set field = GetFieldByCodeName("Transaction")
        BMECatTransaction = BMECatHeader.datasheet.Cells(field.colNo, 2).value
        BMECatContext = Mid(BMECatTransaction, 3)
        Application.StatusBar = ""
        Application.ScreenUpdating = True
'1.505
        If ThisTemplate.GUID = DEMO_GUID Then
          InfoMsgBox GetMessage("DEMO_BMECAT_EXPORT")
        ElseIf ThisTemplate.GUID <> HEILER_GUID Then
          InfoMsgBox GetMessage("BMECAT_EXPORT_DENIED")
          GoTo after_Export
        End If
        frmSaveXML.Show
        If frmSaveXML.OKFlag Then
          BMEDoc.OutputToFile frmSaveXML.TextFileName.value
        End If
after_Export:
'delete our sort columns
        DeleteSortKeys
        Application.DisplayStatusBar = ThisTemplate.isStatusBarVisible
        currentSheet.Activate
        Application.ScreenUpdating = True
      End If
    End If
  End If
  
  'H+K Customizing
  'Unhide the exampleitems so that the user can see them again
  'shData.Rows("2:6").Hidden = False
error_handler:
End Sub
'Shows shData sheet
Private Sub ShowItemData()
  On Error GoTo error_handler
  ThisTemplate.shData.Activate
error_handler:
End Sub

'Shows shHeader sheet
Private Sub ShowHeader()
  On Error GoTo error_handler
'1.501
  If ThisTemplate.BMECatMode = True Then
    ThisTemplate.shBMEHeader.Activate
  Else
    ThisTemplate.shHeader.Activate
  End If
error_handler:
End Sub

'Uploads template
Private Sub UploadData()
  On Error GoTo error_handler
  Dim uploadFlag As Boolean
  Dim supplier As Variant
  
'1.04
  If Names("TemplateCorrupted").value = NAME_FALSE Then
    If ThisTemplate.tested = False Then
      InfoMsgBox GetMessage("UPLOAD_NOT_TESTED")
    Else
      If Names("LastCheckOk").value <> NAME_TRUE Then
        If QuestionMsgBox(GetMessage("UPLOAD_NOT_CORRECT")) Then
          uploadFlag = True
        End If
      Else
        uploadFlag = True
      End If
    End If
'1.04  End If
    If uploadFlag = True Then
      supplier = GetSupplier
      If Not IsEmpty(supplier) Then
        ThisWorkbook.Save
        startComponent PrepMsg("UPLOAD_COMMAND", supplier, ThisWorkbook.FullName)
      Else
        ErrorMsgBox GetMessage("UPLOAD_IMPOSSIBLE")
      End If
    End If
  End If
error_handler:
End Sub

'!!!!!!!!!!!!!!!!!!!!!!!!!
'needs implemantation
'!!!!!!!!!!!!!!!!!!!!!!!!!
'1.04
Function GetSupplier() As Variant
  On Error GoTo error_handler
  Dim field As FieldClass
  Dim supplierText As Variant
  
  noMessagesOutput = True

'create and initialize header data set
  TemplateInit
  
  Set field = GetFieldByCodeName("Supplier Name")
  If Not field Is Nothing Then
    With field
      If .colNo > 0 Then
        If Not IsEmpty(Sheets(.sheet).Cells(.colNo, HEADER_DATA_COLUMN).value) Then
          If IsEmpty(IsTypeError(Sheets(.sheet).Cells(.colNo, 2), field)) Then
            supplierText = Sheets(.sheet).Cells(.colNo, 2).value
          Else
            Exit Function
          End If
        Else
          Exit Function
        End If
      End If
    End With
  End If
  
  Set field = GetFieldByCodeName("Contract Number")
  If Not field Is Nothing Then
    With field
      If .colNo > 0 Then
        If Not IsEmpty(Sheets(.sheet).Cells(.colNo, HEADER_DATA_COLUMN).value) Then
          If IsEmpty(IsTypeError(Sheets(.sheet).Cells(.colNo, 2), field)) Then
            supplierText = supplierText & " - " & Sheets(.sheet).Cells(.colNo, 2).value
          Else
            Exit Function
          End If
        Else
          Exit Function
        End If
      End If
    End With
  End If
  GetSupplier = supplierText
  Exit Function

error_handler:
  
End Function

'executes shell command
Function startComponent(sComponent As String)
  Dim objShell As Object
  
  Set objShell = CreateObject("WScript.Shell")
  objShell.Run sComponent
  Set objShell = Nothing
End Function

'Switch on or turn off supervisor mode
Sub SupervisorModeOnOff(Optional hideMacro As Variant = "")
  On Error GoTo error_handler
  
  SetPassword
'Workbook unprotect must be call with pass if omitted an error occur
' VHX 11/05/2003 removed because problems with jExcelAPI in PCM 2.0
'ThisWorkbook.Unprotect "PSX_" & passwordString
  If ThisTemplate.shRules.Visible <> xlSheetVisible Then
    
    If UnprotectTemplateSheets Then
      Names("SupervisorMode").value = NAME_TRUE
      Application.ScreenUpdating = False
      ThisTemplate.shRules.Visible = xlSheetVisible
      ThisTemplate.shMessages.Visible = xlSheetVisible
      ThisTemplate.shRules.Cells(1, 1).value = GetMessage("TEMPLATE_VERSION")
      ThisTemplate.shRules.Activate
      ActiveWindow.ScrollRow = RULES_DATA_FIRST_ROW
      ActiveWindow.ScrollColumn = 1
      ThisTemplate.shRules.Cells(RULES_DATA_FIRST_ROW, 1).Select
    End If
  Else
'1.04
    Names("SupervisorMode").value = NAME_FALSE
    ProtectTemplateSheets
    ThisTemplate.shRules.Visible = xlSheetVeryHidden
    ThisTemplate.shMessages.Visible = xlSheetVeryHidden
    ThisTemplate.shInstructions.Activate
  End If
finally:
'1.501
  CreatePSXToolsetMenu
  ' VHX 11/05/2003 removed because problems with jExcelAPI
  ' ThisWorkbook.Protect "PSX_" & passwordString
  Application.ScreenUpdating = True
  
  Exit Sub
error_handler:
  GoTo finally
End Sub

'unprotects template sheets
Private Function UnprotectTemplateSheets(Optional hideOnMacroList As Variant = "")
  On Error GoTo error_handler
  
  ThisTemplate.shRules.Unprotect
'1.502
  If ThisTemplate.shRules.ProtectContents = False Then
    ThisTemplate.shDefs.Unprotect passwordString
    ThisTemplate.shMessages.Unprotect passwordString
    ThisTemplate.shInstructions.Unprotect passwordString
    UnprotectTemplateSheets = True
  Else
    UnprotectTemplateSheets = False
  End If
  
  Exit Function

error_handler:
  
  UnprotectTemplateSheets = False
  ErrorMsgBox GetMessage("BAD_PASSWORD")
End Function

'protects template sheets
Private Function ProtectTemplateSheets()
  On Error GoTo error_handler
  
  ThisTemplate.shRules.Protect passwordString
  ThisTemplate.shDefs.Protect passwordString
  ThisTemplate.shMessages.Protect passwordString
  ThisTemplate.shInstructions.Protect passwordString
  Exit Function

error_handler:

End Function

'sets global variable passwordString to sheet protect password
Public Function SetPassword()
  Dim passChars(7) As String
  
  passChars(6) = "1"
  passChars(4) = "a"
  passChars(1) = "E"
  passChars(5) = "t"
  passChars(2) = "_"
  passChars(7) = "!"
  passChars(3) = "C"
  
  passwordString = Join(passChars, "")

End Function

'sets data test status
Sub MarkLastCheckStatus(checkOk As Integer)
  
  Names("LastCheck").value = "=""" & Format(Now, "yyyy-mm-dd hh:mm:ss") & """"
  Names("LastCheckOk").value = checkOk

End Sub

Attribute VB_Name = "RuleClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public ruleNo As Variant 'rule number
Public codeName As Variant  'language independent rule macro name
Public params As Variant 'parameters string for rule
Public opt As Variant 'optional flag
Public shortDesc As Variant 'short description - test form checkBox text
Public comment As Variant 'comment - test form checkBox tip text
Public status As Variant 'rule status
Public errorsCount As Variant 'count of errors
Public warningsCount As Variant 'count of warnings
Public enabled As Variant 'test form check box value
Public paramsOK As Variant 'true if by rule params are ok, set by "Rule name"&ParamsCheck routine
Public impossible As Boolean

'rule parameters
Public fieldParam1 As FieldClass 'ref to field used as first rule parameter
Public fieldParam2 As FieldClass 'ref to field used as second rule parameter
Public constParam2 As Variant 'constant used as second rule parameter
Public constParam3 As Variant 'constant used as third rule parameter
Public refListParam As Range 'ref to range with reference list
Public paramsVariant As Integer 'used to determine with variant of parameters is used

Public Sub Init(ruleNumber As Integer, parRange As Range)
  
  With parRange
    Me.codeName = .Cells(GetRulesColumnNo("Rules", "Code Name")).value
    Me.params = .Cells(GetRulesColumnNo("Rules", "Params")).value
    Me.opt = .Cells(GetRulesColumnNo("Rules", "Opt")).value
    Me.shortDesc = .Cells(GetRulesColumnNo("Rules", "Name*")).value
    Me.comment = .Cells(GetRulesColumnNo("Rules", "Comment")).value
    Me.ruleNo = ruleNumber 'is better number rules oneself
    Me.errorsCount = 0
    Me.warningsCount = 0
    Me.impossible = False
    Me.status = RULE_STATUS_TO_RUN
    Test 'check macro, macro parameters and other requirements to run rule
  End With

End Sub
'Executes rule
Public Function Execute()
  On Error GoTo error_handler
  
  Set activeRule = Me
  If enabled = True Then ' And impossible = False Then
    
    Me.status = RULE_STATUS_RUNNING

'set global variable statusBarText
    statusBarText = Me.shortDesc ' & " - " & GetMessage("RULE_STATUS_RUNNING") & " "
    Application.StatusBar = statusBarText
    
    Execute = Application.Run(Me.codeName, RULE_EXECUTE) 'executes rule procedure
    
    If Me.errorsCount > 0 Then
      Me.status = RULE_STATUS_ERRORS
    ElseIf warningsCount > 0 Then
      Me.status = RULE_STATUS_WARNINGS
    Else
      If Me.status <> RULE_STATUS_NOT_APPLICABLE Then
        Me.status = RULE_STATUS_OK
      End If
    End If
'1.502
  Else
    Me.status = RULE_STATUS_DISABLED
  End If
  
  Exit Function

error_handler:
  Me.status = RULE_STATUS_ERRORS
  Report F_ERR, "F_ERR_RULE_NAME", RuleAddress, Me.codeName

End Function
'Tests if rule macro exists
Private Function Test()
  On Error GoTo error_handler
  
  Set activeRule = Me
    
    Test = Application.Run(Me.codeName, RULE_TEST) 'tests if rule procedure exists
    Me.paramsOK = TestParams
    If Me.paramsOK = False Then
      Me.status = RULE_STATUS_NOT_APPLICABLE
      Me.impossible = True
      Me.enabled = False
    Else
      Me.enabled = True
    End If
    Set activeRule = Nothing
  Exit Function

error_handler:
  Test = False
  Report F_ERR, "F_ERR_RULE_NAME", RuleAddress, Me.codeName

End Function

'Tests if rule macro exists
Private Function TestParams() As Boolean
  On Error GoTo error_handler
  Dim paramArr
  
  If Len(Me.params) > 0 Then
    paramArr = Split(params, ",")
  End If

'tests if rule procedure exists
  TestParams = Application.Run(Me.codeName & "ParamsCheck", paramArr)
  
  Exit Function

error_handler:

End Function


Attribute VB_Name = "Rules"
Option Explicit
Option Base 1
Option Private Module
'----------------------------------
'Template test routines
'----------------------------------

'Any rule routine must have "sister" routine for parameters checking
'with name "rule routine name" & "ParamsCheck" in Template Module

  
Dim keys()      'array with keys name and column number
Dim keysCount   'count of keys

'fields used by QtyMinCheck, PriceDataRange
Dim fieldQtyMin As FieldClass
Dim fieldMinOrder As FieldClass
Dim fieldEffectiveDate As FieldClass
Dim fieldExpireDate As FieldClass

'ranges used by QtyMinCheck, PriceDataRange
Dim keyQtyMin As Range 'ref to range with QtyMin key
Dim minOrder As Range 'ref to range with MinOrder
Dim keyEffectiveDate As Range 'ref to range with EffectiveDate key
Dim expireDate As Range 'ref to range with ExpireDate

'reference to temp range on shTemp
'if duplicate key in row(nn) notUniqueKeys.cell(nn).Value=1
Public notUniqueKeys As Range 'reference to temp range on shTemp

'reference to temp range on shTemp
'with language independent action code for each row
'if in row(nn) action code is wrong actionTemp.cell(nn).Value is empty
Public actionTemp As Range

'--------------------------------------------
'CheckHeadings rule
'--------------------------------------------
'Tests if all column/row headings contain valid names that correspond
'to an entry in the list of all possible column headings.
'CheckHeadings rule main routine
Public Sub CheckHeadings(runFlag As Boolean)
  On Error GoTo error_handler
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
'1.501
  If ThisTemplate.BMECatMode = False Then
    CheckHeaders header
  Else
    CheckHeaders BMECatHeader
    CheckHeaders cgs
  End If
  CheckHeaders items
error_handler:

End Sub
'HK Customizing
Private Sub CheckMime()
MsgBox "Test"
End Sub
'Checks headings for data set
Private Sub CheckHeaders(dataSet As DataSetClass)

  On Error GoTo error_handler
  Dim field
  
  For Each field In dataSet.dataFields 'searchs for user fileds in fields collection
    With field
      
      If .doubleNameErr = True Then
        If dataSet.itemsInRows = True Then
          Report WARN, _
            "F_ERR_DOUBLE_COLUMN", dataSet.datasheet.Cells(1, .colNo), .name
        Else
          Report WARN, _
            "F_ERR_DOUBLE_ROW", dataSet.datasheet.Cells(.colNo, 1), .name
        End If
      Else
        If Len(.name) > 0 Then
          If .ignore = True And Left(.name, 1) <> "!" Then 'if field's name don't start with "!" character
            If dataSet.itemsInRows = True Then
              Report WARN, _
                "E_COL_HEADING", dataSet.datasheet.Cells(1, .colNo), .name
            Else
              Report WARN, _
                "E_ROW_HEADING", dataSet.datasheet.Cells(.colNo, 1), .name
            End If 'If dataSet.itemsInRows = True Then
          End If 'if .ignore = True And Left(.name, 1) <> "!" Then
        Else
          If dataSet.itemsInRows = True Then
            Report WARN, _
              "E_COL_HEADING_EMPTY", dataSet.datasheet.Cells(1, .colNo), .colNo
          Else
            Report WARN, _
              "E_ROW_HEADING_EMPTY", dataSet.datasheet.Cells(.colNo, 1), .colNo
          End If 'If dataSet.itemsInRows = True Then
        End If 'If Len(.name) > 0 Then
      End If 'If .doubleNameErr Then
'1.04
      If dataSet.itemsInRows = True Then
        SetHeadingColors .mandatory, dataSet.datasheet.Cells(1, .colNo)
      Else
        SetHeadingColors .mandatory, dataSet.datasheet.Cells(.colNo, 1)
      End If
      
    End With
  Next field
  Exit Sub

error_handler:

End Sub
Sub SetHeadingColors(mandatory As Variant, headingRange As Range)

  On Error GoTo error_handler
  
  With headingRange
    Select Case mandatory
      Case MANDATORY_REQUIRED
        .Interior.ColorIndex = MANDATORY_REQUIRED_INTERIOR_COLOR
        .Font.ColorIndex = MANDATORY_REQUIRED_FONT_COLOR
      Case MANDATORY_RECOMMENDED
        .Interior.ColorIndex = MANDATORY_RECOMMENDED_INTERIOR_COLOR
        .Font.ColorIndex = MANDATORY_RECOMMENDED_FONT_COLOR
      Case MANDATORY_OPTIONAL
        .Interior.ColorIndex = MANDATORY_OPTIONAL_INTERIOR_COLOR
        .Font.ColorIndex = MANDATORY_OPTIONAL_FONT_COLOR
      Case MANDATORY_USER
        .Interior.ColorIndex = MANDATORY_USER_INTERIOR_COLOR
        .Font.ColorIndex = MANDATORY_USER_FONT_COLOR
    End Select
  End With

error_handler:

End Sub
'--------------------------------------------
'Field type check rule
'--------------------------------------------
'Tests Max Field length and data types, incl. special format for character
'columns. Performs the data validation with reference list.
Public Sub FieldTypeCheck(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim i
  Dim hd As DataSetClass

'ignores activeRule.paramsOK flag
  If runFlag = RULE_TEST Then
    Exit Sub
  End If

'checks header data
'1.501
  If ThisTemplate.BMECatMode = True Then
    Set hd = BMECatHeader
  Else
    Set hd = header
  End If
  With hd
    FieldCheck .datasheet.Range(.datasheet.Cells(1, 2), .datasheet.Cells(.dataFieldsCount, 2)), .dataFields
'info message - empty values replacement by default value for each field
    For i = 1 To .dataFieldsCount
      With .dataFields(i)
        If .emptyDefaultCounter > 0 Then
          Report INFO, "I_EMPTY_DEFAULT", , .name, _
            .emptyDefaultCounter, .default
        End If
      End With
    Next i
  End With
'checks item data
  With items
    For i = ITEMS_DATA_FIRST_ROW To .lastItemRowNo
      ShowRuleProgress i
      FieldCheck .datasheet.Range(.datasheet.Cells(i, 1), .datasheet.Cells(i, .dataFieldsCount)), .dataFields
    Next i
'info message - empty values replacement by default value for each field
    For i = 1 To .dataFieldsCount
      With .dataFields(i)
        If .emptyDefaultCounter > 0 Then
          Report INFO, "I_EMPTY_DEFAULT", , .name, _
            .emptyDefaultCounter, .default
        End If
      End With
    Next i
  End With

'1.501
  If ThisTemplate.BMECatMode = True Then
'checks Catalog Group System data
    With cgs
      For i = ITEMS_DATA_FIRST_ROW To .lastItemRowNo
        ShowRuleProgress i
        FieldCheck .datasheet.Range(.datasheet.Cells(i, 1), .datasheet.Cells(i, .dataFieldsCount)), .dataFields
      Next i
'info message - empty values replacement by default value for each field
      For i = 1 To .dataFieldsCount
        With .dataFields(i)
          If .emptyDefaultCounter > 0 Then
            Report INFO, "I_EMPTY_DEFAULT", , .name, _
              .emptyDefaultCounter, .default
          End If
        End With
      Next i
    End With
  End If
  Exit Sub
  
error_handler:

End Sub

'One Item check procedure
'Tests Max Field length and data types, incl. special format for character
'columns. Performs the data validation with reference list.
Private Sub FieldCheck(dataRow As Range, dataFields As Collection)
  On Error GoTo error_handler
  
  Dim fieldRef As Range   'reference to data field
  Dim i
  Dim findResult          'used to return result of reflist.find method
  Dim fieldValue          'data field value
  Dim typeError As Variant
  
  For i = 1 To dataRow.Count
    Set fieldRef = dataRow.Cells(i)
    fieldValue = fieldRef.value
    
    With dataFields(i)
      If IsEmpty(fieldValue) Then 'if data is empty
        If Len(.default) > 0 Then
          .emptyDefaultCounter = .emptyDefaultCounter + 1
          fieldRef.value = .default
        End If
      Else  'if data is not empty
        typeError = IsTypeError(fieldRef, dataFields(i))
        If Not IsEmpty(typeError) Then
          Select Case typeError
            Case "E_MAX_LEN"
              Report ERR, typeError, fieldRef, .length, .name
            Case "E_VALUE_EXT"
              Report ERR, typeError, fieldRef, GetFileExtension(fieldValue), .name, _
                .refListName
            Case "E_VALUE_REFLIST"
              Report ERR, typeError, fieldRef, fieldValue, .name, _
                .refListName
            Case "E_VALUE_EXT_FILE"
              Report ERR, typeError, fieldRef, fieldValue
            Case Else
              Report ERR, typeError, fieldRef, fieldValue, .name
          End Select
        End If
      End If
    End With 'With dataFields(i)
  Next i 'For i = 1 To dataRow.count
  Exit Sub
error_handler:

End Sub
'one field check type function
'returns error message id if error, empty if ok
Public Function IsTypeError(valueRef As Range, field As FieldClass) As Variant
  On Error GoTo error_handler
  
  Dim findResult          'used to return result of reflist.find method
  Dim fieldValue          'data field value
  Dim messageId As String
    
  fieldValue = valueRef.value
    
  With field

    If IsEmpty(fieldValue) Then 'if data is empty
      If Len(.default) > 0 Then
        .emptyDefaultCounter = .emptyDefaultCounter + 1
        valueRef.value = .default
      End If
    Else  'if data is not empty

      If Not .refList Is Nothing Then  'if reflist definition exists
'reference list check
        If .typ = TYPE_FILE Then
          fieldValue = GetFileExtension(fieldValue)
          If Len(fieldValue) > 0 Then
            messageId = "E_VALUE_EXT"
          Else
            messageId = "E_VALUE_EXT_FILE"
          End If
        Else
          messageId = "E_VALUE_REFLIST"
        End If
        If fieldValue <> .prevValue Then  'if value in data field is differ from previous row value
'1.05.03 MatchCase:=True
          Set findResult = .refList.Find(fieldValue, LookIn:=xlValues, _
            lookat:=xlWhole, MatchCase:=True)
          If findResult Is Nothing Then  'if no match is found
            .prevValueOK = False
            IsTypeError = messageId
          Else
            .prevValueOK = True
          End If 'If findResult Is Nothing Then
          .prevValue = fieldValue
        ElseIf .prevValueOK = False Then 'if previous row value was incorrect
          IsTypeError = messageId
        End If 'If fieldValue <> .prevValue Then
      End If

'field type check
      Select Case .typ
        Case TYPE_CHAR, TYPE_FILE

'all numeric types
        Case TYPE_NUMBER, TYPE_UNUMBER, TYPE_INTEGER, TYPE_UINTEGER
          If Application.WorksheetFunction.IsNumber(fieldValue) Then 'if data is a number
            Select Case .typ
              Case TYPE_NUMBER, TYPE_UNUMBER
                If Len(.scal) > 0 Then 'if scale definition exists
                  If Not IsScaleOK(fieldValue, .scal) Then 'if scale is wrong
                    IsTypeError = "E_SCALE"
                  End If
                End If
                If .typ = TYPE_UNUMBER Then
                  If fieldValue < 0 Then 'if data is less than zero
                    IsTypeError = "E_UNSIGNED_NUMBER"
                  End If
                End If
'integer
              Case TYPE_INTEGER, TYPE_UINTEGER
                If Int(fieldValue) <> fieldValue Then 'if data is not integer
                  IsTypeError = "E_INTEGER"
                End If
                If .typ = TYPE_UINTEGER Then
                  If fieldValue < 0 Then 'if data is less than zero
                    IsTypeError = "E_UNSIGNED_INTEGER"
                  End If
                End If
            End Select
          Else  'if data is not a number
            IsTypeError = "E_NUMBER"
          End If 'If Application.WorksheetFunction.IsNumber(fieldValue) Then
            
'date
        Case TYPE_DATE
'1.503
          If Not TypeName(fieldValue) = "Date" Then
            IsTypeError = "E_DATE"
          End If
        Case Else
      End Select
'fomat check
      Select Case .typ
        Case TYPE_CHAR
          If Len(.formatString) > 0 Then 'if format string exists
            If Not IsFormatOK(fieldValue, .formatString, .typ) Then
'if format is wrong
              IsTypeError = "E_FORMAT"
            End If
          End If
      End Select

'field length check
      If IsEmpty(IsTypeError) Then
        If .length > 0 Then 'if length definition exists
          If Len(fieldValue) > .length Then 'if max field data length is exceeded
            IsTypeError = "E_MAX_LEN"
          End If
        End If
      End If
    End If 'If IsEmpty(fieldValue) Then
      
  End With 'With field
  Exit Function
error_handler:

End Function

'--------------------------------------------
'CheckAcionCode rule
'--------------------------------------------
'IsReplacement=1: Action Codes must be ADD,
'IsReplacement=0: code may be ADD, UPDATE, DELETE, MODIFY
'1.0 save valid action codes on shTemp sheet for future use
Public Sub CheckActionCode(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim field As FieldClass
  Dim i As Long
  Dim fieldValue As Variant         'data field value
  Dim fieldRef As Range   'reference to data field
  Dim isReplacement
  Dim findResult As Variant
  Dim addActionCode As Variant
  Dim colNo As Integer
  Dim actionCode As Range
  
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If

  If ThisTemplate.BMECatMode = True Then
    Set field = GetFieldByCodeName("Transaction")
    BMECatTransaction = BMECatHeader.datasheet.Cells(field.colNo, 2).value
    BMECatContext = Mid(BMECatTransaction, 3)
    isReplacement = BMECatTransaction
'1.502
    If isReplacement <> T_NEW And isReplacement <> T_PRO And _
      isReplacement <> T_PRI Then
      Report ERR, "E_VALUE", _
        BMECatHeader.datasheet.Cells(field.colNo, HEADER_DATA_COLUMN), _
          isReplacement, field.name
    End If
  Else
    isReplacement = header.isReplacement
    If isReplacement <> 0 And isReplacement <> 1 Then
      Set field = GetFieldByCodeName("IsReplacement")
      Report ERR, "E_VALUE", _
        header.datasheet.Cells(field.colNo, HEADER_DATA_COLUMN), _
          isReplacement, field.name
    End If
  End If
  If activeRule.errorsCount > 0 Then
    activeRule.status = RULE_STATUS_INTERRUPTED
    For i = 1 To rulesList.Count
      If rulesList(i).status = RULE_STATUS_TO_RUN Then
        rulesList(i).enabled = False
        rulesList(i).status = RULE_STATUS_DISABLED
      End If
    Next i
    Exit Sub
  End If
  Set actionTemp = ThisTemplate.shTemp.Columns(TEMP_ACTION_COL_NO)
  If items.actionFieldColNo > 0 Then 'if "Action" column exists
    colNo = items.actionFieldColNo
    addActionCode = GetAddActionCode 'determines leanguage dependent "add" action code
    Set field = items.dataFields(colNo)
    Set actionCode = items.datasheet.Columns(colNo)
    With field
      .prevValue = ""
      .prevValueOK = False
      If .refList Is Nothing Then  'if refList definition not exists
'1.05.03
        Set .refList = GetReferenceList("Action Codes")
      End If

      For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
        ShowRuleProgress i
        Set fieldRef = actionCode.Cells(i)
        fieldValue = fieldRef.value
        If IsEmpty(fieldValue) Then 'empty is good????
          actionTemp.Cells(i).value = ACTION_ADD
        Else 'not empty
          If fieldValue <> .prevValue Then  'if value in data field is differ from previous row value
'1.05.03 MatchCase:=True
            Set findResult = .refList.Find(fieldValue, LookIn:=xlValues, _
              lookat:=xlWhole, MatchCase:=True)
            If findResult Is Nothing Then  'if no match is found
              .prevValueOK = True
            Else
              If ThisTemplate.BMECatMode = True Then
                Select Case isReplacement
                  Case T_PRO
                    If GetActionCode(fieldValue) = ACTION_MODIFY Then
                      .prevValueOK = False
                    Else
                      actionTemp.Cells(i).value = GetActionCode(fieldValue)
                      .prevValueOK = True
                    End If
                  Case T_PRI
                    If ACTION_UPDATE <> GetActionCode(fieldValue) Then
                      .prevValueOK = False
                    Else
                      actionTemp.Cells(i).value = GetActionCode(fieldValue)
                      .prevValueOK = True
                    End If
                  Case T_NEW
                    If fieldValue <> addActionCode Then
                      .prevValueOK = False
                    Else
                      actionTemp.Cells(i).value = ACTION_ADD
                      .prevValueOK = True
                    End If
                End Select
                If .prevValueOK = False Then
                  Report ERR, "E_BMECAT_TRANS", fieldRef, fieldValue, _
                    isReplacement, .name
                End If
              Else
                If isReplacement = 0 Then
                  actionTemp.Cells(i).value = GetActionCode(fieldValue)
                  .prevValueOK = True
                ElseIf isReplacement = 1 Then
                  If fieldValue <> addActionCode Then
                    .prevValueOK = False
                    Report ERR, "E_ISREPLACEMENT1", fieldRef, fieldValue, _
                      .name, addActionCode
                  Else
                    actionTemp.Cells(i).value = ACTION_ADD
                    .prevValueOK = True
                  End If
                End If
              End If
            End If 'If findResult Is Nothing Then
            .prevValue = fieldValue
          Else
            If ThisTemplate.BMECatMode = True Then
              If .prevValueOK = False Then 'if previous row value was incorrect
                  Report ERR, "E_BMECAT_TRANS", fieldRef, fieldValue, _
                    isReplacement, .name
              Else
                actionTemp.Cells(i).value = GetActionCode(fieldValue)
              End If
'            End If
          Else
            If .prevValueOK = False Then 'if previous row value was incorrect
              If isReplacement = 0 Then
                Report ERR, "E_ISREPLACEMENT0", fieldRef, fieldValue, .name
              ElseIf isReplacement = 1 Then
                Report ERR, "E_ISREPLACEMENT1", fieldRef, fieldValue, _
                  .name, addActionCode
              End If 'If fieldValue <> .prevValue Then
            Else
              actionTemp.Cells(i).value = GetActionCode(fieldValue)
            End If
          End If
          End If
        End If 'If IsEmpty(fieldValue) Then
      Next i 'For i = ITEMS_DATA_FIRST_ROW To Items.lastItemRowNo
    
    End With 'With Items.dataFields(colNo)
  Else
'set actions codes on shTemp for future use
    With ThisTemplate.shTemp
      .Range(.Cells(ITEMS_DATA_FIRST_ROW, TEMP_ACTION_COL_NO), _
      .Cells(items.lastItemRowNo, TEMP_ACTION_COL_NO)).value = ACTION_ADD
    End With
  End If 'If Items.actionFieldColNo > 0 Then
  Exit Sub
  
error_handler:

End Sub

'--------------------------------------------
'Mandatory rule
'--------------------------------------------
Public Sub mandatory(runFlag As Boolean)
  On Error GoTo error_handler

  If runFlag = RULE_TEST Then
    Exit Sub
  End If
'1.501
  If ThisTemplate.BMECatMode = True Then
    BMECatHeaderMandatory
  Else
    HeaderMandatory
  End If
  ItemMandatory
'1.501
  If ThisTemplate.BMECatMode = True Then
    CGSMandatory
  End If
  Exit Sub
  
error_handler:
  
End Sub

'Mandatory check for Header
Private Sub HeaderMandatory()
  On Error GoTo error_handler
  
  Dim field As FieldClass
  Dim dataRow As Range
  Dim datasheet As Worksheet
  
  Set datasheet = header.datasheet
  Set dataRow = datasheet.Range(datasheet.Cells(1, HEADER_DATA_COLUMN), _
    datasheet.Cells(header.dataFieldsCount, HEADER_DATA_COLUMN))
  
  For Each field In header.mandatoryFields
    With field
      If .colNo <> 0 Then 'field is present
        If IsEmpty(dataRow.Cells(.colNo).value) Then 'if empty
          Report ERR, "E_MANDATORY", dataRow.Cells(.colNo), .name
        End If
      Else 'field is omitted
        Report ERR, "E_MANDATORY_OMITTED", datasheet.Cells(1, 1), .name
      End If
    End With
  Next field
  Exit Sub
  
error_handler:

End Sub
'Mandatory check for Header
Private Sub BMECatHeaderMandatory()
  On Error GoTo error_handler
  
  Dim field As FieldClass
  Dim dataRow As Range
  Dim datasheet As Worksheet
  
  Set datasheet = BMECatHeader.datasheet
  Set dataRow = datasheet.Range(datasheet.Cells(1, HEADER_DATA_COLUMN), _
    datasheet.Cells(BMECatHeader.dataFieldsCount, HEADER_DATA_COLUMN))
  
  For Each field In BMECatHeader.mandatoryFields
    With field
      If .colNo <> 0 Then 'field is present
        If IsEmpty(dataRow.Cells(.colNo).value) Then 'if empty
          Report ERR, "E_MANDATORY", dataRow.Cells(.colNo), .name
        End If
      Else 'field is omitted
        Report ERR, "E_MANDATORY_OMITTED", datasheet.Cells(1, 1), .name
      End If
    End With
  Next field
  Exit Sub
  
error_handler:
End Sub
'Mandatory check for Item Data
'Action Codes ADD+UPDATE: All mandatory fields have a value.
'Action Code: DELETE+MODIFY: All mandatory key columns must be filled
Private Sub ItemMandatory()
  On Error GoTo error_handler
  
  Dim dataRow As Range
  Dim datasheet As Worksheet
  Dim i As Long
  
  Set datasheet = items.datasheet
  Set actionTemp = ThisTemplate.shTemp.Columns(TEMP_ACTION_COL_NO)
  For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
    ShowRuleProgress i
    Set dataRow = datasheet.Range(datasheet.Cells(i, 1), datasheet.Cells(i, items.dataFieldsCount))

    Select Case actionTemp.Cells(i).value
      Case ACTION_ADD, ACTION_UPDATE
        RowMandatory ENTITY_2, dataRow
'1.04
'1.02
'        If IsPriceKeyRequired(dataRow) Then
          RowMandatory ENTITY_3, dataRow
'        End If
      Case ACTION_DELETE, ACTION_MODIFY
        OnlyKeysMandatory ENTITY_2, dataRow
        If actionTemp.Cells(i).value = ACTION_MODIFY Then
          If IsPriceKeyRequired(dataRow) Then
            OnlyKeysMandatory ENTITY_3, dataRow
          End If
        End If
    End Select
  Next i
  Exit Sub
  
error_handler:
End Sub
'Checks item mandatory for ACTION_ADD and ACTION_UPDATE
Private Sub RowMandatory(entityValue As String, dataRow As Range)
  On Error GoTo error_handler
  
  Dim field As FieldClass
  
  For Each field In items.fields
    With field
      If .entity = entityValue And .mandatory = MANDATORY_REQUIRED Then 'key field is present
        If .colNo <> 0 Then 'key field is present
          If IsEmpty(dataRow.Cells(.colNo).value) Then 'if empty
            Report ERR, "E_MANDATORY", dataRow.Cells(.colNo), .name
          End If
        Else 'field is omitted
          If .mandatoryColumnMissingError = False Then
            .mandatoryColumnMissingError = True
             Report ERR, "E_MANDATORY_OMITTED", Sheets(.sheet).Cells(1, 1), _
               .name
          End If
        End If
      End If
    End With
  Next field
  
  Exit Sub
  
error_handler:
             
End Sub
'Checks item mandatory for ACTION_DELETE and ACTION_MODIFY
Private Sub OnlyKeysMandatory(entityValue As String, dataRow As Range)
  On Error GoTo error_handler
  
  Dim field As FieldClass
  Dim checkFlag As Boolean
  
  For Each field In items.keyFields
    With field
      checkFlag = False
      If .entity = entityValue Then 'key field is present
        Select Case entityValue
          Case ENTITY_2
            If .mandatory = MANDATORY_REQUIRED Then
              checkFlag = True
            End If
          Case ENTITY_3
            If .mandatory = MANDATORY_REQUIRED Or _
              .mandatory = MANDATORY_RECOMMENDED Then
              checkFlag = True
            End If
        End Select
        If checkFlag = True Then
          If .colNo <> 0 Then 'key field is present
            If IsEmpty(dataRow.Cells(.colNo).value) Then 'if empty
              Report ERR, "E_MANDATORY", dataRow.Cells(.colNo), .name
            End If
          Else 'field is omitted
            If .mandatoryColumnMissingError = False Then
              .mandatoryColumnMissingError = True
              Report ERR, "E_MANDATORY_OMITTED", Sheets(.sheet).Cells(1, 1), _
                .name
            End If
          End If
        End If
      End If
    End With
  Next field
  
  Exit Sub
  
error_handler:
             
End Sub
'1.501
'Mandatory check for Catalog Group System Data
Private Sub CGSMandatory()
  On Error GoTo error_handler
  
  Dim dataRow As Range
  Dim datasheet As Worksheet
  Dim i As Long
  Dim field As FieldClass
  
  Set datasheet = cgs.datasheet
  For i = ITEMS_DATA_FIRST_ROW To cgs.lastItemRowNo
    ShowRuleProgress i
    Set dataRow = datasheet.Range(datasheet.Cells(i, 1), datasheet.Cells(i, items.dataFieldsCount))
    For Each field In cgs.fields
      With field
        If .mandatory = MANDATORY_REQUIRED Then
          If .colNo <> 0 Then
            If IsEmpty(dataRow.Cells(.colNo).value) Then 'if empty
              Report ERR, "E_MANDATORY", dataRow.Cells(.colNo), .name
            End If
          Else 'field is omitted
            If .mandatoryColumnMissingError = False Then
              .mandatoryColumnMissingError = True
              Report ERR, "E_MANDATORY_OMITTED", Sheets(.sheet).Cells(1, 1), _
                .name
            End If
          End If
        End If
      End With
    Next field

  Next i
  Exit Sub
  
error_handler:
End Sub

'--------------------------------------------
'KeyUnique rule
'--------------------------------------------
'1.0 Saves unique key flag = 1 on shTemp sheet for future use
'1.503
Public Sub KeyUnique(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim firstRowNo As Long 'first compared row number
  Dim currRowNo As Long 'second compared row number
  Dim itemKeyCol  As Integer 'column number with items data keys
  Dim itemkeys As Range 'ref to range with "Item data key"
  Dim priceKeys As Range 'ref to range with "Price data key"
  Dim repeatedKeysFlag As Boolean
  Dim lastItemRowNo As Long
  Dim fRowNo As Long 'first compared row number

'ignores activeRule.paramsOK flag
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  

  itemKeyCol = items.dataFieldsCount + 1
  Set itemkeys = ThisTemplate.shData.Columns(itemKeyCol)
  ' HK Customizing Set priceKeys = ThisTemplate.shData.Columns(itemKeyCol + 1)
  lastItemRowNo = items.lastItemRowNo
  
  With itemkeys
    
    firstRowNo = ITEMS_DATA_FIRST_ROW + 5 'HK Customizing
    
'loops over item data set
    Do
      repeatedKeysFlag = False
      currRowNo = firstRowNo + 1
      ShowRuleProgress currRowNo

'searches for repeated keys
Dim abc As String
abc = .Cells(firstRowNo).value
Dim xyz As String
xyz = .Cells(currRowNo).value

      Do While .Cells(firstRowNo).value = .Cells(currRowNo).value
       ' And priceKeys.Cells(firstRowNo).value = priceKeys.Cells(currRowNo).value
'1.503  If priceKeys.Cells(firstRowNo).value = priceKeys.Cells(currRowNo).value Then
'if found sets flag
          repeatedKeysFlag = True
'1.503    End If
        currRowNo = currRowNo + 1
        If currRowNo > lastItemRowNo Then
'1.503  If currRowNo >= lastItemRowNo Then
'1.503    currRowNo = lastItemRowNo + 1
          Exit Do
        End If
      Loop
      If repeatedKeysFlag = True Then
        keyUniqueError firstRowNo, currRowNo - 1
      End If
      
      If currRowNo >= lastItemRowNo Then
        Exit Do
      End If
      
      firstRowNo = currRowNo
    Loop
  
  End With
  
  Exit Sub

error_handler:
End Sub

'Reports unique key error message
Private Sub keyUniqueError(startRowNo As Long, endRowNo As Long)
    
  Dim repeatedKeysRange As Range
  Dim i As Long
  
  With items.datasheet
    Set repeatedKeysRange = .Range(.Cells(startRowNo, 1), _
      .Cells(endRowNo, items.dataFieldsCount))
  End With
  Report ERR, "E_KEYUNIQUE", repeatedKeysRange, startRowNo, _
    endRowNo, GetFullItemKeyText(startRowNo)
  For i = startRowNo + 1 To endRowNo
    ThisTemplate.shTemp.Cells(i, TEMP_NOT_UNIQUE_KEYS_COL_NO).value = 1
  Next i

End Sub

'keys Code Names are used
Public Sub InitItemsKeysArray(Optional hideMacro As Variant = "")
  Dim keyfield As Variant
  Dim i As Integer
  Dim keysCodeNames As Variant
  
  keysCodeNames = Array("PartNum") 'HK Customizing
  keysCount = 1
  
  ReDim keys(keysCount)
  
  For i = 1 To keysCount
    Set keyfield = GetFieldByCodeName(keysCodeNames(i))
    With keyfield
      keys(i) = Array(.name, .colNo)
    End With
  Next i

End Sub

'--------------------------------------------
'RedundantCheck rule
'--------------------------------------------
Public Sub RedundantCheck(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim itemKeyCol  'column number with items data keys
  Dim itemkeys As Range 'ref to range with item data key
  Dim repeatedKeysFlag As Boolean
  Dim lastItemRowNo As Long
  Dim firstRowNo As Long 'first compared row number
  Dim currRowNo As Long 'second compared row number
  Dim j As Integer
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  itemKeyCol = items.dataFieldsCount + 1
  
  Set itemkeys = ThisTemplate.shData.Columns(itemKeyCol)
  Set fieldEffectiveDate = GetFieldByCodeName("EffectiveDate")
  Set fieldExpireDate = GetFieldByCodeName("ExpireDate")
  If fieldEffectiveDate.colNo > 0 Then
    Set keyEffectiveDate = items.datasheet.Columns(fieldEffectiveDate.colNo)
  End If
  If fieldExpireDate.colNo > 0 Then
    Set expireDate = items.datasheet.Columns(fieldExpireDate.colNo)
  End If
  
  lastItemRowNo = items.lastItemRowNo
  
  With itemkeys
    
    firstRowNo = ITEMS_DATA_FIRST_ROW + 5 'HK Customizing
    
'loops over item data set
    Do
      repeatedKeysFlag = False
      currRowNo = firstRowNo + 1
      ShowRuleProgress currRowNo
      If ActionUniqueTest(firstRowNo) Then
'searches for repeated keys
        Do While .Cells(firstRowNo).value = .Cells(currRowNo).value
          If ActionUniqueTest(currRowNo) Then
            repeatedKeysFlag = True
            currRowNo = currRowNo + 1
            If currRowNo >= lastItemRowNo Then
              currRowNo = lastItemRowNo + 1
             Exit Do
            End If
          Else
            Exit Do
          End If
        Loop
      
        If repeatedKeysFlag = True Then
          If currRowNo - firstRowNo > 1 Then
            BlockRedundantCheck firstRowNo, _
              currRowNo - 1
          End If
        End If
      End If
      
      If currRowNo >= lastItemRowNo Then
        Exit Do
      End If
      
      firstRowNo = currRowNo
    Loop
  
  End With
  
  
  Exit Sub
error_handler:
'Debug.Print "Redundant error"
End Sub

'Check redundant in item data price block for every columns
'Entity "E3" ist checked only if EffectiveDate and ExpireDate are present
'on shData sheet

Private Sub BlockRedundantCheck(startRowNo As Long, endRowNo As Long)
  
  Dim datasheet   'ref to item.dataSheet
  Dim field As FieldClass 'ref to field
  Dim dataSet As Range  'ref to RepeatedKeysRange column
  Dim expireDateField As FieldClass  'ref to RepeatedKeysRange column
  Dim iStart As Long
  Dim iEnd As Long
    
'Entity E2
  For Each field In items.dataFields
    If IsEmpty(field.key) And field.entity = ENTITY_2 And field.colNo > 0 Then
      FieldRedundantCheck field, startRowNo, endRowNo
    End If
    If field.codeName = "EffectiveDate" And field.colNo > 0 Then

'Entity E3
      If fieldExpireDate.colNo > 0 Then
        
'looks for blocks with equal item key + EffectiveDate
'there is redundant only for Expire Date checked
        iStart = startRowNo
        iEnd = iStart + 1
        With keyEffectiveDate
'1.04
          Do While iEnd <= endRowNo
            If .Cells(iStart).value <> .Cells(iEnd).value Then
              FieldRedundantCheck fieldExpireDate, iStart, iEnd - 1
              iStart = iEnd
            ElseIf iEnd = endRowNo Then
              FieldRedundantCheck fieldExpireDate, iStart, iEnd
              Exit Do
            End If
            iEnd = iEnd + 1
        Loop
        End With
      End If
    End If
  Next field
    
End Sub

'Check redundant in price block data for one column
Private Sub FieldRedundantCheck(field As FieldClass, startRowNo As Long, _
  endRowNo As Long)
      
  Dim currRowNo As Long
  Dim dataSet As Range
  
  With items.datasheet
    Set dataSet = .Range(.Cells(startRowNo, field.colNo), _
      .Cells(endRowNo, field.colNo))
  End With
  With dataSet
    If IsEmpty(IsTypeError(.Cells(1), field)) Then
      For currRowNo = 2 To endRowNo - startRowNo + 1
        If IsEmpty(IsTypeError(.Cells(currRowNo), field)) Then
          If .Cells(1).value <> .Cells(currRowNo).value Then
            Report ERR, "E_REDUNDANT", dataSet, startRowNo, endRowNo, _
              field.name
            Exit For
          End If
        End If
      Next currRowNo
    End If
  End With

End Sub

'--------------------------------------------
'PriceDateRange rule
'--------------------------------------------
Public Sub PriceDateRange(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim firstRowNo As Long 'price block first row number
  Dim currRowNo As Long 'price block last row number
  Dim itemKeyCol  'column number with items data keys
  Dim itemkeys As Range 'ref to range with our sort key
'  Dim effectiveDate As Range 'ref to range with EffectiveDate key
'  Dim expireDate As Range 'ref to range with ExpireDate key


  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  Set fieldExpireDate = GetFieldByCodeName("ExpireDate")
  Set fieldEffectiveDate = GetFieldByCodeName("EffectiveDate")
  Set keyEffectiveDate = items.datasheet.Columns(fieldEffectiveDate.colNo)
  Set expireDate = items.datasheet.Columns(fieldExpireDate.colNo)
  
  itemKeyCol = items.dataFieldsCount + 1
  
  Set itemkeys = items.datasheet.Columns(itemKeyCol)
  
  
  With itemkeys
 
    firstRowNo = ITEMS_DATA_FIRST_ROW
    currRowNo = firstRowNo
 
    Do While firstRowNo < items.lastItemRowNo
      currRowNo = currRowNo + 1
      ShowRuleProgress currRowNo
'only for not unique keys
      If ActionUniqueTest(firstRowNo) Then
        If ActionUniqueTest(currRowNo) Then
'items keys are equal
          If .Cells(firstRowNo).value = .Cells(currRowNo).value Then
'1.04
            If Not IsEmpty(keyEffectiveDate.Cells(currRowNo).value) And _
              keyEffectiveDate.Cells(firstRowNo).value <> _
              keyEffectiveDate.Cells(currRowNo).value Then
'end of price block
              DateRangeCheck firstRowNo, currRowNo - 1
              firstRowNo = currRowNo
            End If
          Else
            firstRowNo = currRowNo
          End If
        Else
          currRowNo = currRowNo + 1
          firstRowNo = currRowNo
        End If
      Else
'not unique key
        firstRowNo = currRowNo
      End If
    Loop
  End With
  
  Exit Sub
error_handler:

End Sub

'tests price date range
'uses module keyEffectiveDate and expireDate ranges
Function DateRangeCheck(startRowNo As Long, endRowNo As Long)
  
  Dim i As Long
  Dim RedundantOK As Boolean
  Dim priceData As Range
  
  With keyEffectiveDate
    If Not IsEmpty(.Cells(startRowNo).value) Then
      If Not IsEmpty(.Cells(endRowNo).value) Then
        If Not IsEmpty(expireDate.Cells(startRowNo).value) Then
          RedundantOK = True
          For i = startRowNo + 1 To endRowNo
            If expireDate.Cells(startRowNo).value <> expireDate.Cells(i).value Then
              RedundantOK = False
              Exit For
            End If
          Next i
          If RedundantOK = True Then
'1.04 checks if EffectiveDate and ExpiteDate values are correct
            If IsEmpty(IsTypeError(expireDate.Cells(startRowNo), fieldExpireDate)) And _
              IsEmpty(IsTypeError(.Cells(endRowNo + 1), fieldEffectiveDate)) Then
              
              If expireDate.Cells(startRowNo).value >= .Cells(endRowNo + 1).value Then
                Set priceData = items.datasheet.Range(items.datasheet.Cells(endRowNo, keyEffectiveDate.Column), _
                  items.datasheet.Cells(endRowNo + 1, expireDate.Column))
                Report ERR, "E_DATERANGE", priceData, GetItemKeyText(startRowNo)
              End If
            
            End If
          End If
        End If
      End If
    End If
  End With
End Function

'--------------------------------------------
'TestQtyMin rule
'--------------------------------------------
Public Sub TestQtyMin(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim firstRowNo As Long 'price block first row number
  Dim currRowNo As Long 'price block last row number
  Dim itemKeyCol As Integer 'column number with items data keys
  Dim itemkeys As Range 'ref to range with our sort key
'  Dim keyEffectiveDate As Range 'ref to range with EffectiveDate key
'  Dim keyQtyMin As Range 'ref to range with QtyMin key
'  Dim minOrder As Range 'ref to range with EffectiveDate key
'  Dim expireDate As Range
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  Set fieldMinOrder = GetFieldByCodeName("MinOrder")
  Set fieldQtyMin = GetFieldByCodeName("QtyMin")
  Set keyQtyMin = items.datasheet.Columns(fieldQtyMin.colNo)
  Set minOrder = items.datasheet.Columns(fieldMinOrder.colNo)
  
  Set fieldEffectiveDate = GetFieldByCodeName("EffectiveDate")
  Set fieldExpireDate = GetFieldByCodeName("ExpireDate")
  If fieldEffectiveDate.colNo > 0 Then
    Set keyEffectiveDate = items.datasheet.Columns(fieldEffectiveDate.colNo)
  End If
  If fieldExpireDate.colNo > 0 Then
    Set expireDate = items.datasheet.Columns(fieldExpireDate.colNo)
  End If
    
  itemKeyCol = items.dataFieldsCount + 1
 
  Set itemkeys = items.datasheet.Columns(itemKeyCol)
'  Set priceKeys = items.datasheet.Columns(itemKeyCol + 1)
 
  With itemkeys
 
    firstRowNo = ITEMS_DATA_FIRST_ROW
    currRowNo = firstRowNo
 
    Do While firstRowNo < items.lastItemRowNo ' - 1
      currRowNo = currRowNo + 1
      ShowRuleProgress currRowNo
'only for not unique keys
      If ActionUniqueTest(firstRowNo) Then
        If ActionUniqueTest(currRowNo) Then
'items keys are equal
          If .Cells(firstRowNo).value = .Cells(currRowNo).value Then
            If keyEffectiveDate.Cells(firstRowNo).value <> _
              keyEffectiveDate.Cells(currRowNo).value Then
'end of price block
              QtyMinCheck firstRowNo, currRowNo - 1, keyQtyMin, minOrder, expireDate
              firstRowNo = currRowNo
            End If
          Else
'end of price block
             QtyMinCheck firstRowNo, currRowNo - 1, keyQtyMin, minOrder, expireDate
             firstRowNo = currRowNo
          End If
        Else
'end of price block
          QtyMinCheck firstRowNo, currRowNo - 1, keyQtyMin, minOrder, expireDate
          firstRowNo = currRowNo
        End If
      Else
'not unique key
          firstRowNo = currRowNo
      End If
    Loop
  End With
  Exit Sub
error_handler:

End Sub


'returns true if OtyMin in block is correct
Function QtyMinCheck(startRowNo As Long, endRowNo As Long, _
  keyQtyMin As Range, minOrder As Range, expireDate As Range)
  
  Dim i As Long
  Dim RedundantOK As Boolean
  Dim QtyMinOK As Boolean
  Dim minOrderValue As Variant
  Dim qtyMinValue As Variant
  Dim priceData As Range
  Dim minQtyMin As Double
  
  
  minOrderValue = minOrder.Cells(startRowNo).value
  If endRowNo > startRowNo Then
'price data block
'checks for correct minOrder value and redundant for price block
    RedundantOK = True
    If IsEmpty(minOrderValue) Then
      RedundantOK = False
    ElseIf Not IsEmpty(IsTypeError(minOrder.Cells(startRowNo), _
      fieldMinOrder)) Then
      RedundantOK = False
    Else
'checks redundant of minOrder for price block
      With minOrder
        For i = startRowNo To endRowNo
          If .Cells(startRowNo).value <> .Cells(i).value Then
            RedundantOK = False
            Exit For
          End If
        Next i
      End With
      If fieldExpireDate.colNo > 0 Then
'checks redundant of expireDate for price block
        If Not IsEmpty(IsTypeError(expireDate.Cells(startRowNo), _
          fieldExpireDate)) Then
          RedundantOK = False
        Else
          With expireDate
            For i = startRowNo To endRowNo
              If .Cells(startRowNo).value <> .Cells(i).value Then
                RedundantOK = False
                Exit For
              End If
            Next i
          End With
        End If
      End If
    End If
    
    If RedundantOK = True Then
      minQtyMin = 1E+21
'checks minOrder >= QtyMin
      With keyQtyMin
        For i = startRowNo To endRowNo
          If Not IsEmpty(.Cells(i).value) Then
            If IsEmpty(IsTypeError(.Cells(i), fieldQtyMin)) Then
              If minOrderValue >= .Cells(i).value Then
                QtyMinCheck = True
                Exit For
              End If
              If .Cells(i).value < minQtyMin Then
                minQtyMin = .Cells(i).value
              End If
            Else
'incorrect qtyMin type
              QtyMinCheck = True
            End If
          Else
'empty qtyMin type
            QtyMinCheck = True
          End If
        Next i
      End With
      If QtyMinCheck = False Then
        With items.datasheet
          Set priceData = .Range(.Cells(startRowNo, fieldQtyMin.colNo), _
            .Cells(endRowNo, fieldMinOrder.colNo))
          Report ERR, "E_TESTQTYMIN_BLOCK", priceData, minQtyMin, _
            fieldQtyMin.name, minOrderValue, fieldMinOrder.name
        End With
      End If
    End If
  Else
'single row check
    qtyMinValue = keyQtyMin.Cells(startRowNo).value
    If IsEmpty(minOrderValue) Or IsEmpty(qtyMinValue) Then
'if QtyMin or MinOrder is empty
      QtyMinCheck = False
    ElseIf Not IsEmpty(IsTypeError(minOrder.Cells(startRowNo), _
      fieldMinOrder)) Or Not IsEmpty(IsTypeError(keyQtyMin.Cells(startRowNo), _
        fieldQtyMin)) Then
'if QtyMin or MinOrder is incorrect
      QtyMinCheck = False
    ElseIf minOrderValue < qtyMinValue Then
      QtyMinCheck = False
      With items.datasheet
        Set priceData = .Cells(startRowNo, fieldQtyMin.colNo)
        Report ERR, "E_TESTQTYMIN_ITEM", priceData, _
          keyQtyMin.Cells(startRowNo).value, fieldQtyMin.name, _
          minOrder.Cells(startRowNo).value, fieldMinOrder.name
      End With
    End If
  End If
End Function

'--------------------------------------------
'ExistsIf rule
'--------------------------------------------
Public Sub ExistsIf(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim field1 As FieldClass
  Dim field2 As FieldClass
  Dim constValue As Variant
  Dim i As Long
  Dim dataRow As Range
  Dim messageId As String

  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  With activeRule
    Set field1 = .fieldParam1
    Set field2 = .fieldParam2
    constValue = .constParam3
  End With
  If IsEmpty(constValue) Then
    messageId = "E_EXISTSIF_EMPTY"
  Else
    messageId = "E_EXISTSIF"
  End If
  
  If field1.sheet = field2.sheet Then
    If field1.sheet = items.datasheet.name Then 'fields on item data sheet
      For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
        ShowRuleProgress i
        If ActionUniqueTest(i) Then
          With items.datasheet
            Set dataRow = .Range(.Cells(i, 1), .Cells(i, items.dataFieldsCount))
          End With
          With dataRow
            If .Cells(field2.colNo).value = constValue Then
              If IsEmpty(.Cells(field1.colNo).value) Then
                Report ERR, messageId, .Cells(field1.colNo), field1.name, _
                  field2.name, constValue
              End If
            End If
          End With
        End If
      Next i
    Else 'fields on Header sheet
      With header.datasheet
        Set dataRow = .Range(.Cells(1, HEADER_DATA_COLUMN), _
          .Cells(header.dataFieldsCount, HEADER_DATA_COLUMN))
      End With
      With dataRow
        If .Cells(field2.colNo).value = constValue Then
          If IsEmpty(.Cells(field1.colNo).value) Then
            Report ERR, messageId, .Cells(field1.colNo), field1.name, _
              field2.name, constValue
          End If
        End If
      End With
    End If 'If Sheets(field1.sheet) = items.dataSheet Then
  Else 'field1 and field2 are on different sheets
    If field1.sheet = items.datasheet.name Then 'fields on item data sheet
      Set dataRow = items.datasheet.Columns(field1.colNo)
      If constValue = header.datasheet.Cells(field2.colNo, _
        HEADER_DATA_COLUMN) Then
        With dataRow
          For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
            If ActionUniqueTest(i) Then
              If IsEmpty(.Cells(i).value) Then
                Report ERR, messageId, .Cells(i), field1.name, _
                  field2.name, constValue
              End If
            End If
          Next i
        End With
      End If
    End If
  End If 'If field1.sheet = items.dataSheet.name Then
  Exit Sub

error_handler:

End Sub

'--------------------------------------------
'RefList rule
'--------------------------------------------
'1.0 Find optimalization
'Values to test are copy and sort on hiden shTemp sheet
Public Sub TestRef(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim paramArr As Variant
  Dim field As FieldClass
  Dim refListRange As Range
  Dim dataCol As Range  'reference to data column
  Dim i As Long
  Dim findResult As Variant  'used to return result of reflist.find method
  Dim refCodes As Range
  Dim errorCol As Range
  Dim rowCol As Range
  Dim sortArr As Range
  Dim prevValue As Variant
'1.502
  Dim currErrorNo
  
  If runFlag = RULE_TEST Or activeRule.paramsOK = False Then
    Exit Sub
  End If
  
'1.502
  currErrorNo = errorsCounter
  paramArr = Split(activeRule.params, ",")
'lastItemRowNo = items.lastItemRowNo
  With activeRule
    Set field = .fieldParam1
    Set refListRange = .refListParam
  End With
'checks header data
  If field.sheet = ThisTemplate.shHeader.name Then
    With header.datasheet
'1.05.03 MatchCase:=True
      Set findResult = refListRange.Find(.Cells(field.colNo, 2).value, _
        LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
      If findResult Is Nothing Then  'if no match is found
        Report ERR, "E_TESTREF", .Cells(field.colNo, 2), _
          .Cells(field.colNo, 2).value, field.name, paramArr(1)
      End If 'If findResult Is Nothing Then
    End With
  ElseIf field.sheet = ThisTemplate.shData.name Then
'checks item data
      
    With items.datasheet
      Set dataCol = .Range(.Cells(1, field.colNo), .Cells(items.lastItemRowNo, field.colNo))
    End With
    With ThisTemplate.shTemp
      Set refCodes = .Range(.Cells(1, TEMP_REF_CODES_COL_NO), _
        .Cells(items.lastItemRowNo, TEMP_REF_CODES_COL_NO))
      Set rowCol = .Range(.Cells(1, TEMP_ROW_NO_COL_NO), _
        .Cells(items.lastItemRowNo, TEMP_ROW_NO_COL_NO))
      Set errorCol = .Range(.Cells(1, TEMP_ERROR_COL_NO), _
        .Cells(items.lastItemRowNo, TEMP_ERROR_COL_NO))
      Set sortArr = .Range(.Cells(1, TEMP_REF_CODES_COL_NO), _
        .Cells(items.lastItemRowNo, TEMP_ERROR_COL_NO))
    End With
'copy values to check on hiden shTemp sheet
    dataCol.Copy refCodes
'numbers values to check
    With rowCol
      .FormulaR1C1 = "=ROW()"
      .Formula = .value
    End With
'sorts values to test
    With sortArr
      .Sort Key1:=.Cells(1, 1), Order1:=xlAscending, _
        header:=xlYes
    End With
    With refCodes
      Set findResult = Nothing

'loops thru values to check
'value is tested with reflist
      For i = 2 To items.lastItemRowNo

        ShowRuleProgress i
'test only rows with unique key and valid action code
        If ActionUniqueTest(i) Then
          If Not IsEmpty(.Cells(i)) And IsEmpty(IsTypeError(.Cells(i), field)) Then
'only correct values are tested with reflist (type, length)
            If prevValue <> .Cells(i).value Then
'only different values are tested with reflist
              If findResult Is Nothing Then
'start find at first element on refList
'1.05.03 MatchCase:=True
                Set findResult = refListRange.Find(.Cells(i).value, _
                  LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
              Else
'start find at last found element on refList
'1.05.03 MatchCase:=True
                Set findResult = refListRange.Find(.Cells(i).value, _
                  after:=findResult, LookIn:=xlValues, _
                  lookat:=xlWhole, MatchCase:=True)
              End If
            End If
'1.502
            prevValue = .Cells(i).value
            If findResult Is Nothing Then  'if no match is found
              currErrorNo = currErrorNo + 1
              errorCol(i).value = 1
              If currErrorNo >= maxLinesReported Then
                Exit For
              End If
            End If
          End If
        End If
      Next i
    End With
'sorts tested values by error, rowNo
    With sortArr
      .Sort Key1:=.Cells(1, 3), Order1:=xlDescending, _
        Key2:=.Cells(1, 2), Order1:=xlAscending, header:=xlYes
    End With
'loops until first empty cell in error column
    For i = 2 To items.lastItemRowNo
      If Not IsEmpty(errorCol(i).value) Then
        Report ERR, "E_TESTREF", dataCol(rowCol(i)), dataCol(rowCol(i)).value, field.name, _
          paramArr(1)
      Else
        Exit For
      End If
    Next i
  End If 'If field.sheet = shHeader.name Then
  Exit Sub

error_handler:

End Sub

'--------------------------------------------
'Replace rule
'--------------------------------------------
Public Sub ReplaceRule(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim paramArr As Variant 'array used to hold rule parameters
  Dim field As FieldClass 'ref to field
  Dim valueToReplace As Variant
  Dim replaceValue As Variant
  Dim replaceCount As Long 'replace counter
  Dim dataSet As Range
  Dim i As Long
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  replaceCount = 0
  
  With activeRule
    Set field = .fieldParam1
    valueToReplace = .constParam2
    replaceValue = .constParam3
  End With
  If field.sheet = items.datasheet.name Then 'fields on item data sheet
    With items.datasheet
      Set dataSet = .Range(.Cells(1, field.colNo), .Cells(items.lastItemRowNo, field.colNo))
    End With
    With dataSet
      For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
        ShowRuleProgress i
        If ActionUniqueTest(i) Then
          If .Cells(i).value = valueToReplace Then
            .Cells(i).value = replaceValue
            replaceCount = replaceCount + 1
          End If
        End If
      Next i
    End With
  Else 'fields on Header sheet
'1.501
    If ThisTemplate.BMECatMode = True Then
      With BMECatHeader.datasheet
        Set dataSet = .Range(.Cells(1, HEADER_DATA_COLUMN), _
          .Cells(BMECatHeader.dataFieldsCount, HEADER_DATA_COLUMN))
      End With
    Else
      With header.datasheet
        Set dataSet = .Range(.Cells(1, HEADER_DATA_COLUMN), _
          .Cells(header.dataFieldsCount, HEADER_DATA_COLUMN))
      End With
    End If
    With dataSet
      If .Cells(field.colNo).value = valueToReplace Then
        .Cells(field.colNo).value = replaceValue
        replaceCount = replaceCount + 1
      End If
    End With
  End If 'If Sheets(field1.sheet) = items.dataSheet Then
  If replaceCount <> 0 Then
    If IsEmpty(valueToReplace) Then
      Report INFO, "I_REPLACE_EMPTY_COUNT", , field.name, _
        replaceCount, replaceValue
    Else
      If IsEmpty(replaceValue) Then
        Report INFO, "I_REPLACE_COUNT_EMPTY", , valueToReplace, _
          field.name, replaceCount
      Else
        Report INFO, "I_REPLACE_COUNT", , valueToReplace, _
          field.name, replaceCount, replaceValue
      End If
    End If
  End If
  Exit Sub
error_handler:
End Sub

'--------------------------------------------
'TestMULT rule
'--------------------------------------------
Public Sub TestMULT(runFlag As Boolean)
  On Error GoTo error_handler
  
  Dim paramArr 'used to hold rule parameters
  Dim field As FieldClass
  Dim dataCol As Range    'reference to data column
  Dim i As Long
  Dim constValue As Variant
  
  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
  'paramArr = Split(activeRule.params, ",")
  With activeRule
    Set field = .fieldParam1
    constValue = .constParam2
'    constValue = ConvertConst(GetConst(paramArr(1)), field.typ)
  End With
'checks header data
    If field.sheet = ThisTemplate.shHeader.name Then
      With header.datasheet
        If .Cells(field.colNo, 2).value <> 1 And _
          Application.WorksheetFunction.Mod( _
            .Cells(field.colNo, 2).value, constValue) <> 0 Then
            Report ERR, "E_TESTMULT", .Cells(field.colNo, 2), _
              .Cells(field.colNo, 2).value, field.name, paramArr(1)
        End If
      End With
    ElseIf field.sheet = ThisTemplate.shData.name Then
'checks item data
      Set dataCol = items.datasheet.Columns(field.colNo)
      With dataCol
        For i = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
          ShowRuleProgress i
          If ActionUniqueTest(i) Then
            If Not IsEmpty(.Cells(i).value) Then
              If IsEmpty(IsTypeError(.Cells(i), field)) Then
                If .Cells(i).value <> 1 And _
                  .Cells(i).value Mod constValue <> 0 Then
                  Report ERR, "E_TESTMULT", .Cells(i), .Cells(i).value, _
                    field.name, constValue
                End If
              End If
            End If
          End If
        Next i
      End With
    End If 'If field.sheet = shHeader.name Then
  Exit Sub
error_handler:

End Sub

'--------------------------------------------
'TestEQ rule
'--------------------------------------------
Public Sub TestEQ(runFlag As Boolean)

  TestAll runFlag, "TestEQ", "E_TESTEQ", "E_TESTEQ_CONST", "E_TESTEQ_EMPTY"

End Sub

'--------------------------------------------
'TestLT rule
'--------------------------------------------
Public Sub TestNE(runFlag As Boolean)
  
  TestAll runFlag, "TestNE", "E_TESTNE", "E_TESTNE_CONST", "E_TESTNE_EMPTY"

End Sub

'--------------------------------------------
'TestLT rule
'--------------------------------------------
Public Sub TestLT(runFlag As Boolean)
  
  TestAll runFlag, "TestLT", "E_TESTLT", "E_TESTLT_CONST"

End Sub

'--------------------------------------------
'TestLE rule
'--------------------------------------------
Public Sub TestLE(runFlag As Boolean)
  
  TestAll runFlag, "TestLE", "E_TESTLE", "E_TESTLE_CONST"

End Sub

'--------------------------------------------
'TestGT rule
'--------------------------------------------
Public Sub TestGT(runFlag As Boolean)
  
  TestAll runFlag, "TestGT", "E_TESTGT", "E_TESTGT_CONST"

End Sub

'--------------------------------------------
'TestGE rule
'--------------------------------------------
Public Sub TestGE(runFlag As Boolean)
  
  TestAll runFlag, "TestGE", "E_TESTGE", "E_TESTGE_CONST"

End Sub

'internal subrutine that performs all two fields or field-constant
'compare rules (TestEQ,TestNE,TestLT,TestTE,TestGT,TestGE).
Private Sub TestAll(runFlag As Boolean, rulename As String, _
  errorId As String, errorConstId As String, Optional errorEmptyId As String)
  On Error GoTo error_handler
  
  Dim paramArr As Variant
  Dim field1 As FieldClass
  Dim field2 As FieldClass
  Dim constValue As Variant
  Dim i As Long
  Dim dataRow As Range
  Dim messageId As String

  If runFlag = RULE_TEST Then
    Exit Sub
  End If
  
      
  With activeRule
    
    Set field1 = .fieldParam1
    Set field2 = .fieldParam2
    constValue = .constParam2
  
    Select Case .paramsVariant
      
      Case PARAMS_FIELD_CONST, PARAMS_FIELD_EMPTY
        
        If IsEmpty(constValue) Then
          messageId = errorEmptyId
        Else
          messageId = errorConstId
        End If
        
        If field1.sheet = items.datasheet.name Then 'fields on item data sheet
          CompareItemFieldWithConst field1, constValue, rulename, messageId, constValue
        Else 'fields on Header sheet
          CompareHeaderFieldWithConst field1, constValue, rulename, messageId
        End If 'If Sheets(field1.sheet) = items.dataSheet Then
      
      Case PARAMS_FIELD_FIELD
        
        If field1.sheet = field2.sheet Then
          If field1.sheet = items.datasheet.name Then 'fields on item data sheet
            CompareItemFieldWithField field1, field2, rulename, errorId
          Else 'fields on Header sheet
            CompareHeaderFieldWithField field1, field2, rulename, errorId
          End If 'If Sheets(field1.sheet) = items.dataSheet Then
        Else 'field1 and field2 are on different sheets
          If field1.sheet = items.datasheet.name Then 'fields on item data sheet
            constValue = header.datasheet.Cells(field2.colNo, HEADER_DATA_COLUMN).value
            CompareItemFieldWithConst field1, constValue, rulename, errorId, field2.name
          End If
        End If 'If field1.sheet = field2.sheet Then
    
    End Select
  End With 'With activeRule
  Exit Sub

error_handler:

End Sub

'compare item field with constant
Private Sub CompareItemFieldWithConst(field As FieldClass, _
  constValue As Variant, rulename, messageId As String, constName As Variant)
  
  Dim currRowNo As Long
  Dim dataColumn As Range
      
  Set dataColumn = items.datasheet.Columns(field.colNo)
  With dataColumn
    If IsEmpty(constValue) Then
'for TestEQ and TestNE with empty
      For currRowNo = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
        ShowRuleProgress currRowNo
        If ActionUniqueTest(currRowNo) Then
          If IsEmpty(IsTypeError(.Cells(currRowNo), field)) Then
            Select Case rulename
              Case "TestNE"
                If IsEmpty(.Cells(currRowNo)) Then
                  Report ERR, messageId, .Cells(currRowNo), field.name, constName
                End If
              Case "TestEQ"
                If Not IsEmpty(.Cells(currRowNo)) Then
                  Report ERR, messageId, .Cells(currRowNo), field.name, constName
                End If
            End Select
          End If
        End If
      Next currRowNo
    Else
      For currRowNo = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
        ShowRuleProgress currRowNo
        If ActionUniqueTest(currRowNo) Then
          If Not IsEmpty(.Cells(currRowNo)) Then
            If IsEmpty(IsTypeError(.Cells(currRowNo), field)) Then
              If Not testValues(.Cells(currRowNo).value, field.typ, _
                constValue, "CONST", rulename) Then
                Report ERR, messageId, .Cells(currRowNo), field.name, constName
              End If
           End If
         End If
        End If
      Next currRowNo
    End If
  End With
End Sub

'compare header field with constant
Private Sub CompareHeaderFieldWithConst(field As FieldClass, _
  constValue As Variant, rulename, messageId As String)
  
  With header.datasheet
    If IsEmpty(IsTypeError(.Cells(field.colNo, HEADER_DATA_COLUMN), _
          field)) Then
      If Not testValues(.Cells(field.colNo, HEADER_DATA_COLUMN).value, _
        field.typ, constValue, "CONST", rulename) Then
        Report ERR, messageId, .Cells(field.colNo, HEADER_DATA_COLUMN), _
          field.name, constValue
      End If
    End If
  End With

End Sub

'compare two item fields
Private Sub CompareItemFieldWithField(field1 As FieldClass, _
  field2 As FieldClass, rulename, errorId As String)
  
  Dim currRowNo As Long
  Dim dataRow As Range
  Dim field1ColNo As Integer
  Dim field2ColNo As Integer
  
  field1ColNo = field1.colNo
  field2ColNo = field2.colNo
  
  For currRowNo = ITEMS_DATA_FIRST_ROW To items.lastItemRowNo
    ShowRuleProgress currRowNo
    If ActionUniqueTest(currRowNo) Then
      With items.datasheet
        Set dataRow = .Range(.Cells(currRowNo, 1), _
          .Cells(currRowNo, items.dataFieldsCount))
      End With
      With dataRow
            
        If IsEmpty(.Cells(field1ColNo).value) Or _
          IsEmpty(.Cells(field2ColNo).value) Then
        Else
          If IsEmpty(IsTypeError(.Cells(field1ColNo), field1)) And _
            IsEmpty(IsTypeError(.Cells(field2ColNo), field2)) Then
            If Not testValues(.Cells(field1ColNo).value, field1.typ, _
              .Cells(field2ColNo).value, field2.typ, rulename) Then
              With items.datasheet
                Report ERR, errorId, .Range(.Cells(currRowNo, field1ColNo), _
                  .Cells(currRowNo, field2ColNo)), field1.name, field2.name
              End With
            End If
          End If
        End If
      End With
    End If
  Next currRowNo

End Sub

'compare to Header fields
Private Sub CompareHeaderFieldWithField(field1 As FieldClass, _
  field2 As FieldClass, rulename, errorId As String)
  
  Dim dataRow As Range
  
  With header.datasheet
    Set dataRow = .Range(.Cells(1, HEADER_DATA_COLUMN), _
      .Cells(header.dataFieldsCount, HEADER_DATA_COLUMN))
  End With
  With dataRow
    If IsEmpty(IsTypeError(.Cells(field1.colNo), field1)) And _
      IsEmpty(IsTypeError(.Cells(field2.colNo), field2)) Then
        If Not testValues(.Cells(field1.colNo).value, field1.typ, _
          .Cells(field2.colNo).value, field2.typ, rulename) Then
          Report ERR, errorId, .Cells(field1.colNo), field1.name, _
            field2.name
        End If
    End If
  End With

End Sub


'returns true if row(i) has unique key and valid action code
'ACTION_ADD or ACTION_MODIFY ACTION_UPDATE if isReplacement = 0
'ACTION_ADD if IsReplacement = 1
Private Function ActionUniqueTest(currRowNo) As Boolean
  If IsEmpty(notUniqueKeys.Cells(currRowNo).value) Then
    Select Case actionTemp.Cells(currRowNo).value
      Case ACTION_ADD
        ActionUniqueTest = True
      Case ACTION_DELETE
        ActionUniqueTest = False
      Case ACTION_MODIFY
        ActionUniqueTest = True
      Case ACTION_UPDATE
        ActionUniqueTest = True 'HK Customizing
      Case Else
        ActionUniqueTest = True
    End Select
  Else
    ActionUniqueTest = False
  End If
End Function

'returns full item key string with columns names and values
Private Function GetFullItemKeyText(rowNo As Long)
  Dim k As Integer
  Dim commaString As String
  
  With items.datasheet
    For k = 1 To keysCount
      If keys(k)(2) > 0 Then
        If Not IsEmpty(.Cells(rowNo, keys(k)(2)).value) Then 'if key value not empty
          GetFullItemKeyText = GetFullItemKeyText & commaString & keys(k)(1) & "='" & _
            .Cells(rowNo, keys(k)(2)) & "'"
            commaString = ", "
        End If
      End If
    Next k
  End With
End Function

'returns item data key string with columns names and values
Private Function GetItemKeyText(rowNo As Long)
  Dim k As Integer
  Dim commaString As String
  
  With items.datasheet
    For k = 1 To 3
'1.503
      If keys(k)(2) > 0 Then 'if key exists
        If Not IsEmpty(.Cells(rowNo, keys(k)(2)).value) Then 'if key value not empty
          GetItemKeyText = GetItemKeyText & commaString & keys(k)(1) & "='" & _
            .Cells(rowNo, keys(k)(2)) & "'"
            commaString = ", "
        End If
      End If
  Next k
  End With
End Function


Sub ShowRuleProgress(currRowNo As Variant)
  Static lastRow As Variant
'1.501
  Dim percent As Integer
  
  If lastRow > currRowNo Or currRowNo - lastRow >= progress5Percent Then
    lastRow = currRowNo
    percent = Int((currRowNo / itemRowsCount) * 100)
    If percent > 100 Then
      percent = 100
    End If
    Application.StatusBar = statusBarText & " - " & percent & " %"
  End If
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

On Error GoTo errHandler

'Is selected cell within the editable range of cells?
If Not Intersect(Range("C2:I6"), Target) Is Nothing Then
    'Variable declaration
    Dim Discription1 As String
    Dim Discription2 As String
    Dim Discription3 As String
    Dim Discription4 As String
    Dim OrderUnitCount As Integer
    Dim OrderUnit As String
    Dim ContentUnit As String
    Dim OrderUnitPresent As Boolean
    Dim ContentUnitPresent As Boolean
 'Unhide Cells to perfom the check
 
 'shDefs.Columns(0, 38).Hidden = False
 
        OrderUnitCount = IIf(IsEmpty(shDefs.Cells(shDefs.Rows.Count, 41)), shDefs.Cells(shDefs.Rows.Count, 41).End(xlUp).Row, shDefs.Rows.Count)
        OrderUnitPresent = False
        ContentUnitPresent = False

         For i = 2 To OrderUnitCount
              If Cells(Target.Row, 3).value = shDefs.Cells(i, 41).value Then
                 OrderUnit = shDefs.Cells(i, 42).value
                 OrderUnitPresent = True
                 Exit For
             End If
         Next i
         
         For i = 2 To OrderUnitCount
                If Cells(Target.Row, 4).value = shDefs.Cells(i, 41).value Then
                    ContentUnit = shDefs.Cells(i, 42).value
                    ContentUnitPresent = True
                    Exit For
                End If
        Next i
    
    If OrderUnitPresent = False Then
        MsgBox Cells(Target.Row, 3).value + " ist keine g|fffd|ltige Bestelleinheit!"
        Cells(Target.Row, 3).Select
        GoTo errHandler
    End If
    
    If ContentUnitPresent = False Then
        MsgBox Cells(Target.Row, 4).value + " ist keine g|fffd|ltige Inhaltseinheit!"
        Cells(Target.Row, 4).Select
        GoTo errHandler
    End If
    
            Discription1 = shDefs.Cells(3, 36).value
            Discription2 = shDefs.Cells(4, 36).value
            Discription3 = shDefs.Cells(5, 36).value
            Discription4 = shDefs.Cells(6, 36).value

            Discription1 = Replace(Discription1, "{PriceAmount}", Cells(Target.Row, 9).value)
            Discription1 = Replace(Discription1, "{PriceQuantity}", Cells(Target.Row, 6).value)
            Discription1 = Replace(Discription1, "{OrderUnit}", OrderUnit)

            Discription2 = Replace(Discription2, "{OrderUnit}", OrderUnit)
            Discription2 = Replace(Discription2, "{ContentAmount}", Cells(Target.Row, 5).value)
            Discription2 = Replace(Discription2, "{ContentUnit}", ContentUnit)

            Discription3 = Replace(Discription3, "{QuantityMin}", Cells(Target.Row, 7).value)
            Discription3 = Replace(Discription3, "{OrderUnit}", OrderUnit)

            Discription4 = Replace(Discription4, "{OrderInterval}", Cells(Target.Row, 8).value)
            Discription4 = Replace(Discription4, "{OrderUnit}", OrderUnit)
            ActiveSheet.Unprotect ("E_Cat1!")
            Cells(Target.Row, 10).Locked = False
            Cells(Target.Row, 10).value = Discription1
            Cells(Target.Row, 10).Locked = True
            Cells(Target.Row, 11).Locked = False
            Cells(Target.Row, 11).value = Discription2
            Cells(Target.Row, 11).Locked = True
            Cells(Target.Row, 12).Locked = False
            Cells(Target.Row, 12).value = Discription3
            Cells(Target.Row, 12).Locked = True
            Cells(Target.Row, 13).Locked = False
            Cells(Target.Row, 13).value = Discription4
            Cells(Target.Row, 13).Locked = True
            ActiveSheet.Protect = True
'shDefs.Rows("0:38").Hidden = True
End If

errHandler:
    Application.DisplayAlerts = False
    Application.StatusBar = False
    Application.EnableEvents = True

End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Template"
Option Explicit
Option Base 1
Option Private Module

'----------------------------------
'Template test routines
'----------------------------------
'Any rule routine must have "sister" routine for parameters checking
'with name "rule routine name" & "ParamsCheck"

'Returns false if template is not correct
Function IsTemplateOK()
  On Error GoTo error_handler
  
  Dim sheetsNames
  Dim i
  
  
  ThisTemplate.Update
  shMessagesCheck
  shReportCheck
  
  IsTemplateOK = True
  
  Application.StatusBar = GetMessage("TESTING_TEMPLATE") & " " & _
    GetMessage("RULE_STATUS_RUNNING")
  
'1.03
  Names("TemplateCorrupted").value = NAME_FALSE
  Names("TemplateDefsOk").value = NAME_TRUE

'checks all required sheets in template
'1.05.03
'1.501
  sheetsNames = Array("shRules", "shHeader", "shData", _
    "shInstructions", "shTemp", "shDefs", "shCGS", "shBMEHeader", "shIdent")
  
  For i = 1 To UBound(sheetsNames)
    If IsSheetCodeName(sheetsNames(i)) = False Then
      Report F_ERR, "F_ERR_SHEET", , sheetsNames(i)
      IsTemplateOK = True
    End If
  Next i
  If IsTemplateOK = True Then
    TemplateInit
  End If
  
  If errorsCounter > 0 Then
    Report INFO, "F_ERR_TEMPLATE"
    IsTemplateOK = True
    ThisTemplate.shReport.Activate
  End If

finally:
'1.03
  If IsTemplateOK = True Then
    Names("TemplateDefsOk").value = NAME_TRUE
  Else
    Names("TemplateDefsOk").value = NAME_FALSE
  End If
  Exit Function

error_handler:
  
  IsTemplateOK = True
  Resume Next
  GoTo finally

End Function
Public Sub TemplateInit()
'  Dim BMEDoc As BMECatClass
  CheckColumnsTable

'1.501
'create and initialize items data set
  Set items = New DataSetClass
  items.Init ThisTemplate.shData, True
  
  If ThisTemplate.BMECatMode = True Then
    CheckBMECatTable
'create and initialize BMECat Header data set
    Set BMECatHeader = New DataSetClass
    BMECatHeader.Init ThisTemplate.shBMEHeader, False
    
'create and initialize CatalogGroupSystem data set
    Set cgs = New DataSetClass
    cgs.Init ThisTemplate.shCGS, True
'initialize BMECat XML object
    Set BMEDoc = New BMECatClass
  Else
'create and initialize header data set
    Set header = New DataSetClass
    header.Init ThisTemplate.shHeader, False
  End If
  
  CheckSpecialFields
'initialize rules collection
  ReadRulesList
End Sub
'checks if shReport exists, if not stops program execution
Sub shReportCheck()
  On Error GoTo error_handler
    If IsSheetCodeName("shReport") = False Then
      MsgBox "Template is corrupted! Cannot find shReport sheet." & Chr(10) _
        & "Program execution is stopped!", vbCritical
      GoTo error_handler
    End If
    Exit Sub
error_handler:
'1.03
  Names("TemplateCorrupted").value = NAME_TRUE
  End
End Sub

'checks if shMessages exists, if not stops program execution
Sub shMessagesCheck()
  On Error GoTo error_handler
    If IsSheetCodeName("shMessages") = False Then
      MsgBox "Template is corrupted! Cannot find shMessages sheet." & Chr(10) _
        & "Program execution is stopped!", vbCritical
      GoTo error_handler
    End If
    Exit Sub
error_handler:
  Names("TemplateCorrupted").value = NAME_TRUE
  DeletePSXToolsetMenu
  End
End Sub

'Checks Columns table
'if any error stop template test
Private Sub CheckColumnsTable()
  On Error GoTo error_handler
  Dim colTable As Range
  Dim i As Integer
  Dim colNames As Variant
  Dim colNo
  
  Set colTable = GetRulesTableHeadings("Columns")
  If colTable Is Nothing Then
    GoTo error_handler
  Else
    colNames = Array("Column Heading", "Code Name", "Sheet", "Key", _
      "Entity", "Length", "Scale", "Type", "Mandatory", "Default", _
      "Format", "Reference list")
    ReDim colNoTable(UBound(colNames))
    For i = 1 To UBound(colNames)
      colNoTable(i) = Array(GetRulesColumnNo("Columns", colNames(i)) _
        - colTable.Column + 1, colNames(i))
      If colNoTable(i)(1) = 0 Then
        GoTo error_handler
      End If
    Next i
  End If
  Exit Sub
error_handler:
  Report INFO, "F_ERR_TEMPLATE"
  StopTest
End Sub
'1.501
'Checks Columns table
'if any error stop template test
Private Sub CheckBMECatTable()
  On Error GoTo error_handler
  Dim colTable As Range
  Dim i As Integer
  Dim colNames As Variant
  Dim colNo
  
  Set colTable = GetRulesTableHeadings("BMEcat")
  If colTable Is Nothing Then
    GoTo error_handler
  Else
    colNames = Array("FieldName", "Comment", "Type", "Mode", _
      "Block", "StandardMandatory", "UserDefMandatory", "MapFieldName", _
      "MapBlock", "OtherParams", "DirectOutput")
    ReDim BMECatColNoTable(UBound(colNames))
    For i = 1 To UBound(colNames)
      BMECatColNoTable(i) = Array(GetRulesColumnNo("BMECat", colNames(i)) _
        - colTable.Column + 1, colNames(i))
      If BMECatColNoTable(i)(1) = 0 Then
        GoTo error_handler
      End If
    Next i
  End If
  Exit Sub
error_handler:
  Report INFO, "F_ERR_TEMPLATE"
  StopTest
End Sub

'Reads rules to execute from shRules sheet
Sub ReadRulesList(Optional hideOnMacroList As Variant = "")
  On Error GoTo error_handler
  Dim colNo As Integer
  Dim i As Integer
  Dim j As Integer
  Dim rule As RuleClass
  
  Set rulesList = New Collection
  colNo = GetRulesColumnNo("Rules")
  
  If colNo = 0 Then
    Report INFO, "F_ERR_TEMPLATE"
    StopTest
  Else
  
    i = RULES_DATA_FIRST_ROW
  
    With ThisTemplate.shRules

'loop rules table on shRules sheet while rule codeName column is not empty
      Do While Not IsEmpty(.Cells(i, GetRulesColumnNo("Rules", "Code Name")).value)
        Set rule = New RuleClass
        rule.Init i - RULES_DATA_FIRST_ROW + 1, .Rows(i)
        rulesList.Add rule
        i = i + 1
      Loop
    End With
  End If
  Exit Sub
error_handler:

End Sub

'Checks for special fields code names which are directly used in program code
Function CheckSpecialFields()
On Error GoTo error_handler
  Dim fieldsCodeNames
  Dim field As FieldClass
  Dim colNo
  Dim i
  
'this fields must be present
'1.501
  If ThisTemplate.BMECatMode = True Then
    fieldsCodeNames = Array("Transaction", "prev_version", "PartNum", "UOM", "GroupID", _
      "GroupName", "GroupType", "ParentID", "BuyerName", "SupplierName")
  Else
    fieldsCodeNames = Array("IsReplacement", "PartNum", "UOM")
  End If
  
  colNo = GetRulesColumnNo("Columns", "Column Heading")
  If colNo > 0 Then
    For i = 1 To UBound(fieldsCodeNames)
      Set field = GetFieldByCodeName(fieldsCodeNames(i))
      With field
        If field Is Nothing Then
          Report F_ERR, "F_ERR_CODE_NAME", ThisTemplate.shRules.Cells(1, colNo), _
            fieldsCodeNames(i), ThisTemplate.shRules.name
        ElseIf .colNo = 0 Then
          Report F_ERR, "F_ERR_COLUMN_NAME", ThisTemplate.shRules.Cells(.rowNo, colNo), _
            .name, .sheet
        End If
      End With
    Next i
  End If
  
'this fields should be present
'1.501
  If ThisTemplate.BMECatMode = True Then
    fieldsCodeNames = Array("EffectiveDate", "ExpireDate", _
      "Action", "QtyMin", "MinOrder", "CatCode")
  Else
    fieldsCodeNames = Array("PartNumExt", "EffectiveDate", "ExpireDate", _
      "Action", "QtyMin", "MinOrder")
  End If
  colNo = GetRulesColumnNo("Columns", "Code Name")
  If colNo > 0 Then
    For i = 1 To UBound(fieldsCodeNames)
      Set field = GetFieldByCodeName(fieldsCodeNames(i))
      With field
        If field Is Nothing Then
          Report F_ERR, "F_ERR_CODE_NAME", ThisTemplate.shRules.Cells(1, colNo), _
            fieldsCodeNames(i), ThisTemplate.shRules.name
        End If
      End With
    Next i
'this fields shouldn't be present
'1.501
    If ThisTemplate.BMECatMode = True Then
      Set field = GetFieldByCodeName("PartNumExt")
      With field
        If Not field Is Nothing Then
          If field.colNo > 0 Then
            Report F_ERR, "F_ERR_BMECAT_PARTNUMEXT", _
              ThisTemplate.shData.Cells(1, field.colNo), _
              field.name, ThisTemplate.shData.name
          End If
        End If
      End With
    End If
  End If
  Exit Function
error_handler:
End Function
'--------------------------------
'rules parameters check routines
'--------------------------------
'these routines are used to check if rules parameters are correct and
'to check if required columns are present on sheet
Public Function TestGTParamsCheck(paramArr)
  TestGTParamsCheck = TestAllParamsCheck(paramArr)
End Function

Public Function TestGEParamsCheck(paramArr)
  TestGEParamsCheck = TestAllParamsCheck(paramArr)
End Function

Public Function TestLTParamsCheck(paramArr)
  TestLTParamsCheck = TestAllParamsCheck(paramArr)
End Function

Public Function TestLEParamsCheck(paramArr)
  TestLEParamsCheck = TestAllParamsCheck(paramArr)
End Function

Public Function TestNEParamsCheck(paramArr)
  TestNEParamsCheck = TestAllParamsCheck(paramArr, False)
End Function

Public Function TestEQParamsCheck(paramArr)
  TestEQParamsCheck = TestAllParamsCheck(paramArr, False)
End Function

Public Function TestQtyMinParamsCheck(paramArr)
  Dim i
  Dim requiredFieldsNames
  Dim field As FieldClass
  
  requiredFieldsNames = Array("MinOrder", "QtyMin")
  CheckParamsCount paramArr, 0
  TestQtyMinParamsCheck = True
  For i = 1 To UBound(requiredFieldsNames)
    Set field = GetFieldByCodeName(requiredFieldsNames(i))
    If field Is Nothing Then
      TestQtyMinParamsCheck = False
    ElseIf field.colNo = 0 Then
      TestQtyMinParamsCheck = False
    Else
    End If
  Next i
End Function

'Performs all parameter checks for all TestXX rules
'TestEQ, TestNE, TestLT, TestLE, TestGT, TestGE
'TestXX(fieldName1,fieldName2)
'TestXX(fieldName1,constValue2)
'fieldName1 - must be valid "Item data" column name
'             must be present on "Item data" sheet
'fieldName2 - must be valid Header/"Item data" column name
'             must be present on Header/"Item data" sheet
'             must be comparable with fieldName1
'constValue2- must be integer or string type enclosed in double quotes.
'             type must be comparable with fieldName1.
'             only for TestNE and TESTEQ can be empty
Private Function TestAllParamsCheck(paramArr As Variant, _
  Optional disableEmptyConst As Boolean = True) As Boolean
  
  With activeRule
 
    If CheckParamsCount(paramArr, 2) Then
'parameters count is correct
'checks first field parameter
      Set .fieldParam1 = GetParamField(paramArr(0))
    
'checks second parameter
      If IsConst(paramArr(1)) Then 'if second parameter is constant
        If .fieldParam1.typ = TYPE_DATE Then
          Report F_WARN, "F_ERR_PARAMS_COLUMN_DATE", RuleParamsAddress, _
            .codeName, .params, .fieldParam1.name
        Else
          .constParam2 = GetConst(paramArr(1))
          If Len(.constParam2) > 0 Then
            .paramsVariant = PARAMS_FIELD_CONST
            If Not .fieldParam1 Is Nothing Then
              If Not IsConstTypeCorrect(.constParam2, .fieldParam1.typ) Then 'if wrong type of constant
                Report F_WARN, "F_ERR_PARAMS_CONST_TYPE", RuleParamsAddress, _
                  .codeName, .params, .constParam2
              Else
                .constParam2 = ConvertConst(.constParam2, .fieldParam1.typ)
              End If
            End If
          Else
            .paramsVariant = PARAMS_FIELD_EMPTY
            If disableEmptyConst = True Then
              Report F_WARN, "F_ERR_PARAMS_CONST_EMPTY", RuleParamsAddress, _
                .codeName, .params
            End If
          End If
        End If
      Else 'if second parameter is field name
'checks second field parameter
        .paramsVariant = PARAMS_FIELD_FIELD
        Set .fieldParam2 = GetParamField(paramArr(1))
        If Not .fieldParam1 Is Nothing And Not .fieldParam2 Is Nothing Then
          If .fieldParam1.name = .fieldParam2.name Then
            Report F_WARN, "F_ERR_PARAMS_EQUAL", RuleParamsAddress, _
              .codeName, .params
          Else
            If Not areTypesComparable(.fieldParam1.typ, .fieldParam2.typ) Then 'fields types are differ
              Report F_WARN, "F_ERR_PARAMS_TYPES", RuleParamsAddress, _
                .codeName, .params
            End If
            If .fieldParam1.sheet = ThisTemplate.shHeader.name And .fieldParam2.sheet = ThisTemplate.shData.name Then
              Report F_WARN, "F_ERR_PARAMS_TYPES", RuleParamsAddress, _
                .codeName, .params
            End If
          End If
        End If
      End If
    End If
    If .errorsCount = 0 And .warningsCount = 0 Then
      TestAllParamsCheck = True
    Else
      TestAllParamsCheck = False
    End If
  End With
  Exit Function
error_handler:

End Function


'Performs all parameter checks for ExistsIf rule
'ExistsIf(fieldName1,fieldName2,constValue3)
'fieldName1 - must be valid "Item data" column name
'             must be present on "Item data" sheet
'fieldName2 - must be valid Header/"Item data" column name
'             must be present on Header/"Item data" sheet
'             cannot be date type
'constValue3 - must be string or integer enclosed in double quotes.
'             must be in type of fieldName2
'             a empty ("") matches empty cell
Private Function ExistsIfParamsCheck(paramArr)
  On Error GoTo error_handler
  
  With activeRule
    If CheckParamsCount(paramArr, 3) Then
'checks first field parameter
      Set .fieldParam1 = GetParamField(paramArr(0))

'checks second field parameter
      Set .fieldParam2 = GetParamField(paramArr(1))
      If Not .fieldParam1 Is Nothing And Not .fieldParam2 Is Nothing Then
        If .fieldParam1.name = .fieldParam2.name Then
          Report F_WARN, "F_ERR_PARAMS_EQUAL", RuleParamsAddress, _
            .codeName, .params
        Else
'checks third constant parameter
          If .fieldParam2.typ <> TYPE_DATE Then
            If IsConst(paramArr(2)) Then
              .constParam3 = GetConst(paramArr(2))
              If Len(.constParam3) > 0 Then
                If Not .fieldParam2 Is Nothing Then
                  CheckConstantType .constParam3, .fieldParam2
                End If
              End If
            End If
          Else
            Report F_WARN, "F_ERR_PARAMS_COLUMN_DATE", RuleParamsAddress, _
              .codeName, .params, .fieldParam2.name
          End If 'If IsConst(paramArr(2)) Then
        End If
      End If
    End If
    If .errorsCount = 0 And .warningsCount = 0 Then
      ExistsIfParamsCheck = True
    Else
      ExistsIfParamsCheck = False
    End If
  
  End With
  Exit Function

error_handler:
  ExistsIfParamsCheck = False
End Function

'Performs all parameter checks for TestRef rule
'TestRef(fieldName1,refList)
'fieldName1 - must be valid Header/"Item data" column name
'            must be present on Header/"Item data" sheet
'refList   - must be valid reference list name
'            must be present on definition sheet
Private Function TestRefParamsCheck(paramArr) As Boolean
  On Error GoTo error_handler
  
  With activeRule
    If CheckParamsCount(paramArr, 2) Then
      Set .fieldParam1 = GetParamField(paramArr(0))
      Set .refListParam = GetReferenceList(paramArr(1))
      If .refListParam Is Nothing Then
        Report F_WARN, "F_ERR_PARAMS_REFLIST", RuleParamsAddress, _
          .codeName, .params, paramArr(1)
      End If
    End If
    If .errorsCount = 0 And .warningsCount = 0 Then
      TestRefParamsCheck = True
    Else
      TestRefParamsCheck = False
    End If
  End With
  Exit Function
error_handler:
  TestRefParamsCheck = False
End Function

'Performs all parameter checks for rule
'Replace(fieldName1,valueToReplace,replaceValue)
'When a column "fieldName" value matches "valueToReplace" is replaced
'with "replaceValue"
'fieldName - must be valid Header/"Item data" column name
'            must be present on Header/"Item data" sheet
'            cannot be date type
'valueToReplace - must be string or integer enclosed in double quotes.
'            A empty ("") valueToReplace matches empty cell.
'replaceValue - must be string or integer enclosed in double quotes.
'            Must be in type of field.
'????If a empty ("") replaceValue - values matches valueToReplace will be clear.
Private Function ReplaceRuleParamsCheck(paramArr As Variant) As Boolean
  On Error GoTo error_handler
  
  With activeRule
  
    If CheckParamsCount(paramArr, 3) Then
'parameters count is correct
'checks first field parameter
      Set .fieldParam1 = GetParamField(paramArr(0))
'field cannot be of date type
       
      If Not .fieldParam1 Is Nothing Then
        If .fieldParam1.typ = TYPE_DATE Then
          Report F_WARN, "F_ERR_PARAMS_COLUMN_DATE", RuleParamsAddress, _
            .codeName, .params, .fieldParam1.name
        Else
          If IsConst(paramArr(1)) Then
            .constParam2 = GetConst(paramArr(1))
          Else 'If IsConst(paramArr(1)) Then
            Report F_WARN, "F_ERR_PARAMS_CONST", RuleParamsAddress, _
              .codeName, .params, paramArr(1)
          End If
    
          If IsConst(paramArr(2)) Then
            .constParam3 = GetConst(paramArr(2))
            If Len(.constParam3) > 0 Then
              If Not .fieldParam1 Is Nothing Then
                CheckConstantType .constParam3, .fieldParam1
              End If
            Else 'If IsConst(paramArr(2)) Then
              Report F_WARN, "F_ERR_PARAMS_CONST", RuleParamsAddress, _
                .codeName, .params, paramArr(2)
            End If
          End If
        End If
        If .errorsCount = 0 And .warningsCount = 0 Then
          If IsEmpty(.constParam2) And IsEmpty(.constParam3) Then
            Report F_WARN, "F_ERR_PARAMS_EQUAL", RuleParamsAddress, _
              .codeName, .params
            ReplaceRuleParamsCheck = False
          Else
            ReplaceRuleParamsCheck = True
          End If
        Else
          ReplaceRuleParamsCheck = False
        End If
      End If 'If fieldParam1.typ = TYPE_DATE Then
    End If 'If Not .fieldParam1 Is Nothing Then
    If .errorsCount = 0 And .warningsCount = 0 Then
      If IsEmpty(.constParam2) And IsEmpty(.constParam3) Then
        Report F_WARN, "F_ERR_PARAMS_EQUAL", RuleParamsAddress, _
          .codeName, .params
        ReplaceRuleParamsCheck = False
      Else
        ReplaceRuleParamsCheck = True
      End If
    Else
      ReplaceRuleParamsCheck = False
    End If
  End With
  Exit Function
error_handler:
  ReplaceRuleParamsCheck = False
End Function
'Checks constant parameter value with field definition
Private Sub CheckConstantType(constValue As Variant, field As FieldClass)
  Dim typeError
  
  With activeRule
    ThisTemplate.shTemp.Cells(1, 1).value = constValue
    If Not IsEmpty(IsTypeError(ThisTemplate.shTemp.Cells(1, 1), field)) Then
      Report F_WARN, "F_ERR_PARAMS_CONST_TYPE", RuleParamsAddress, _
       .codeName, .params, constValue
    End If
    ThisTemplate.shTemp.Cells(1, 1).Clear
  End With
End Sub
'Performs all parameter checks for rule
'TestMULT(fieldName1,constValue2)
'
'fieldName1  - must be valid Header/"Item data" column name
'             must be present on Header/"Item data" sheet
'             must be numeric type
'constValue2 - must be integer enclosed in double quotes.
Private Function TestMultParamsCheck(paramArr As Variant) As Boolean
  On Error GoTo error_handler
  Dim i As Integer
  Const PARAM_COUNT = 2
  
  With activeRule
    If CheckParamsCount(paramArr, 2) Then
'parameters count is correct
      For i = 0 To PARAM_COUNT - 1
        paramArr(i) = Trim(paramArr(i))
      Next i
'checks first field parameter
      Set .fieldParam1 = GetParamField(paramArr(0))
  
      If Not .fieldParam1 Is Nothing Then
        If .fieldParam1.colNo <> 0 Then 'if field on data sheet
          Select Case .fieldParam1.typ
            Case TYPE_CHAR, TYPE_DATE, TYPE_FILE
              Report F_WARN, "F_ERR_PARAMS_FIELD_TYPE", RuleParamsAddress, _
                .codeName, .params, paramArr(0)
          End Select
        End If
      End If
    
'checks second constant parameter (must be a number)
      If IsConst(paramArr(1)) Then
        .constParam2 = GetConst(paramArr(1))
        If Len(.constParam2) > 0 Then
          If Not IsConstTypeCorrect(.constParam2, TYPE_NUMBER) Then 'if wrong type of constant
            Report F_WARN, "F_ERR_PARAMS_CONST_TYPE", RuleParamsAddress, _
              .codeName, .params, .constParam2
          End If
        Else
          Report F_WARN, "F_ERR_PARAMS_CONST_EMPTY", RuleParamsAddress, _
            .codeName, .params
        End If
      End If
    End If
    If .errorsCount = 0 And .warningsCount = 0 Then
      TestMultParamsCheck = True
    Else
      TestMultParamsCheck = False
    End If
  End With
  Exit Function

error_handler:
  TestMultParamsCheck = False
End Function

Private Function CheckHeadingsParamsCheck(paramArr As Variant) As Boolean
  CheckParamsCount paramArr, 0
  CheckHeadingsParamsCheck = True
End Function

Private Function FieldTypeCheckParamsCheck(paramArr As Variant) As Boolean
  CheckParamsCount paramArr, 0
  FieldTypeCheckParamsCheck = True
End Function

Private Function KeyUniqueParamsCheck(paramArr As Variant) As Boolean
  Dim i
  Dim requiredFieldsNames
  Dim field As FieldClass
  
  CheckParamsCount paramArr, 0
  KeyUniqueParamsCheck = True
  requiredFieldsNames = Array("PartNum", "UOM")
  For i = 1 To UBound(requiredFieldsNames)
    Set field = GetFieldByCodeName(requiredFieldsNames(i))
    If field Is Nothing Then
      KeyUniqueParamsCheck = False
    ElseIf field.colNo = 0 Then
      KeyUniqueParamsCheck = False
    End If
  Next i
End Function

Private Function MandatoryParamsCheck(paramArr As Variant) As Boolean
  CheckParamsCount paramArr, 0
  MandatoryParamsCheck = True
End Function

Private Function PriceDateRangeParamsCheck(paramArr As Variant) As Boolean
  Dim i
  Dim requiredFieldsNames
  Dim field As FieldClass
  
  CheckParamsCount paramArr, 0
  PriceDateRangeParamsCheck = True
  requiredFieldsNames = Array("EffectiveDate", "ExpireDate")
  For i = 1 To UBound(requiredFieldsNames)
    Set field = GetFieldByCodeName(requiredFieldsNames(i))
    If field Is Nothing Then
      PriceDateRangeParamsCheck = False
    ElseIf field.colNo = 0 Then
      PriceDateRangeParamsCheck = False
    End If
  Next i
End Function

Private Function RedundantCheckParamsCheck(paramArr As Variant) As Boolean
  Dim i
  Dim requiredFieldsNames
  Dim field As FieldClass
  Dim keysflag As Boolean
  Dim fieldsflag As Boolean
  
  CheckParamsCount paramArr, 0
  RedundantCheckParamsCheck = True
'1.501
  If ThisTemplate.BMECatMode = True Then
    requiredFieldsNames = Array("Transaction", "PartNum", "UOM")
  Else
    requiredFieldsNames = Array("IsReplacement", "PartNum", "UOM")
  End If
  For i = 1 To UBound(requiredFieldsNames)
    Set field = GetFieldByCodeName(requiredFieldsNames(i))
    If field Is Nothing Then
      RedundantCheckParamsCheck = False
    ElseIf field.colNo = 0 Then
      RedundantCheckParamsCheck = False
    End If
  Next i
  If RedundantCheckParamsCheck = True Then
'checks for fields to redundant check
    For Each field In items.dataFields
      With field
        If Not IsEmpty(.key) And .entity = ENTITY_3 And .colNo > 0 Then
          keysflag = True
        End If
        If IsEmpty(.key) And .entity = ENTITY_2 And .colNo > 0 Then
          fieldsflag = True
        End If
      End With
    Next field
    If keysflag = False Or fieldsflag = False Then
      RedundantCheckParamsCheck = False
    End If
  End If
End Function

Private Function CheckActionCodeParamsCheck(paramArr As Variant) As Boolean
  Dim i
  Dim requiredFieldsNames
  Dim field As FieldClass
  
  CheckParamsCount paramArr, 0
  CheckActionCodeParamsCheck = True
'1.501
  If ThisTemplate.BMECatMode = True Then
    requiredFieldsNames = Array("Transaction", "PartNum", "UOM")
  Else
    requiredFieldsNames = Array("IsReplacement", "PartNum", "UOM")
  End If
  For i = 1 To UBound(requiredFieldsNames)
    Set field = GetFieldByCodeName(requiredFieldsNames(i))
    If field Is Nothing Then
      CheckActionCodeParamsCheck = False
    ElseIf field.colNo = 0 Then
      CheckActionCodeParamsCheck = False
    End If
  Next i
End Function
'checks parameters count
Private Function CheckParamsCount(ByRef paramArr As Variant, pCount As Integer) As Boolean
  On Error GoTo error_handler
  Dim parCount As Integer
  Dim messageId As String
  Dim i As Integer
  
  If IsEmpty(paramArr) Then
    If pCount > 0 Then
      messageId = "F_ERR_PARAMS_TO_FEW"
    Else
      CheckParamsCount = True
    End If
  Else
    If pCount > 0 Then
      parCount = UBound(paramArr) + 1
  
      If parCount < pCount Then 'if incorrect parameters count
        messageId = "F_ERR_PARAMS_TO_FEW"
      ElseIf parCount > pCount Then
        messageId = "F_ERR_PARAMS_TO_MANY"
      Else
        For i = 0 To pCount - 1
          paramArr(i) = Trim(paramArr(i))
        Next i
        CheckParamsCount = True
      End If
    Else
      messageId = "F_ERR_PARAMS_NO_PARAMS"
    End If
  End If
  If messageId <> "" Then
    Report F_WARN, messageId, RuleParamsAddress, activeRule.codeName, _
      activeRule.params
  End If
  Exit Function
error_handler:
End Function
'check field by name and return reference to field if name is correct
Private Function GetParamField(fieldName) As FieldClass
  
  Set GetParamField = GetFieldByName(fieldName)
  If GetParamField Is Nothing Then
    Report F_WARN, "F_ERR_PARAMS_FIELD_NAME", RuleParamsAddress, _
      activeRule.codeName, activeRule.params, fieldName
  ElseIf GetParamField.colNo = 0 Then 'if field on data sheet
    Report F_WARN, "F_ERR_PARAMS_FIELD_MISSING", RuleParamsAddress, _
      activeRule.codeName, activeRule.params, fieldName, GetParamField.sheet
  End If

End Function

Function RuleParamsAddress() As Range
  Set RuleParamsAddress = ThisTemplate.shRules.Cells(activeRule.ruleNo + 3, 3)
End Function

Function RuleAddress() As Range
  Set RuleAddress = ThisTemplate.shRules.Cells(activeRule.ruleNo + 3, 2)
End Function

'1.501
Private Function CommodityGroupCheckParamsCheck(paramArr As Variant) As Boolean
  If ThisTemplate.BMECatMode = True Then
    CheckParamsCount paramArr, 0
    CommodityGroupCheckParamsCheck = True
  Else
    CommodityGroupCheckParamsCheck = False
  End If
End Function

Private Function ArticleToCGSMapCheckParamsCheck(paramArr As Variant) As Boolean
  Dim field As FieldClass
  
  If ThisTemplate.BMECatMode = True Then
    CheckParamsCount paramArr, 0
  
    Set field = GetFieldByCodeName("CatCode")
    If field Is Nothing Then
      ArticleToCGSMapCheckParamsCheck = False
    ElseIf field.colNo = 0 Then
      ArticleToCGSMapCheckParamsCheck = False
      Report WARN, "E_NO_ITEM_TO_CGS_MAP_COLUMN", _
      ThisTemplate.shData.Cells(1, 1), field.name
    Else
      ArticleToCGSMapCheckParamsCheck = True
    End If
  Else
    ArticleToCGSMapCheckParamsCheck = False
  End If
End Function

Private Function BMECatMapCheckParamsCheck(paramArr As Variant) As Boolean
  If ThisTemplate.BMECatMode = True Then
    CheckParamsCount paramArr, 0
    BMECatMapCheckParamsCheck = True
  Else
    BMECatMapCheckParamsCheck = False
  End If
End Function




Attribute VB_Name = "TemplateClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public shData As Worksheet
Public shDefs As Worksheet
Public shInstructions As Worksheet
Public shReport As Worksheet
Public shHeader As Worksheet
Public shMessages As Worksheet
Public shRules As Worksheet
Public shTemp As Worksheet
'1.05.03
Public shIdent As Worksheet
'1.501
Public shBMEHeader As Worksheet
Public shCGS As Worksheet
Public isStatusBarVisible As Boolean 'hold status bar state before open
Public BMECatMode As Boolean
Public tested As Boolean 'false if data are not tested,
'1.505
Public GUID As Variant
'is set to false for every change on shData od shHeader
Private Sub Class_Initialize()
  Update
  isStatusBarVisible = Application.DisplayStatusBar
End Sub
Public Sub Update()
  Dim templateSheet As Worksheet
  
  Set shData = Nothing
  Set shDefs = Nothing
  Set shInstructions = Nothing
  Set shReport = Nothing
  Set shHeader = Nothing
  Set shMessages = Nothing
  Set shRules = Nothing
  Set shTemp = Nothing
'1.501
  Set shCGS = Nothing
  Set shBMEHeader = Nothing
  BMECatMode = False
  
  For Each templateSheet In ThisWorkbook.Worksheets
    Select Case templateSheet.codeName
      Case "shDefs"
        Set shDefs = templateSheet
      Case "shReport"
        Set shReport = templateSheet
      Case "shInstructions"
        Set shInstructions = templateSheet
      Case "shMessages"
        Set shMessages = templateSheet
      Case "shHeader"
        Set shHeader = templateSheet
      Case "shRules"
        Set shRules = templateSheet
        If ThisWorkbook.Names("BMECat").RefersToRange.value = "ON" Then
          BMECatMode = True
        End If
      Case "shData"
        Set shData = templateSheet
      Case "shTemp"
        Set shTemp = templateSheet
'1.05.03
      Case "shIdent"
        Set shIdent = templateSheet
'1.505
        GUID = ThisWorkbook.Names("GUID").RefersToRange.value
'1.501
      Case "shBMEHeader"
        Set shBMEHeader = templateSheet
      Case "shCGS"
        Set shCGS = templateSheet
    End Select
  Next templateSheet
  If BMECatMode = True Then
    If Not shHeader Is Nothing Then
      shHeader.Visible = xlSheetVeryHidden
    End If
    If Not shBMEHeader Is Nothing Then
      shBMEHeader.Visible = xlSheetVisible
    End If
    If Not shCGS Is Nothing Then
      shCGS.Visible = xlSheetVisible
    End If
  Else
    If Not shHeader Is Nothing Then
      shHeader.Visible = xlSheetVisible
    End If
    If Not shBMEHeader Is Nothing Then
      shBMEHeader.Visible = xlSheetVeryHidden
    End If
    If Not shCGS Is Nothing Then
      shCGS.Visible = xlSheetVeryHidden
    End If
  End If
End Sub


Attribute VB_Name = "TestDialog"
Attribute VB_Base = "0{E1B08915-3303-4DFE-9A01-F074D487CD4B}{D23E553B-3545-4DBC-868D-24B52FBAC9EC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Const STATUS_INT_COLOR = &HFF&
Const STATUS_OK_COLOR = &H8000&
Const STATUS_ERRORS_COLOR = &HFF&
Const STATUS_DISABLED_COLOR = &H808080
Const STATUS_WARNINGS_COLOR = &HFF0000

Const FORM_WIDTH = 420
Const CHECK_BOX_LEFT = 20
Const CHECK_BOX_LABEL_LEFT = CHECK_BOX_LEFT + 14
Const STATUS_LABEL_LEFT = FORM_WIDTH - 80
Const CHECK_BOX_LABEL_WIDTH = FORM_WIDTH - 120

Const RULE_OFFSET = 15
Const FIRST_RULE_TOP = 38
Const LIMIT_TOP_OFFSET = 78
Const BUTTONS_OFFSET = 45

'Cancels test procedure
Private Sub CmdButtonCancel_Click()
  runTestFlag = False
  Unload Me
End Sub

'Starts test procedure
'Unload "Status" TestDialog after test procedure
Private Sub CmdButtonOK_Click()
  Dim i As Integer
  Dim ruleReturnValue
  
  If runTestFlag = True Then
    Unload Me
    Application.ScreenUpdating = True
  Else
    For i = 1 To rulesList.Count
      rulesList(i).enabled = Controls("RuleNo" & i).value
    Next i
    maxLinesReported = CLng(TextBoxErrors.value)
    If maxLinesReported > MAX_ERRORS_REPORTED Then
      ErrorMsgBox GetMessage("TO_BIG_ERRORS_LIMIT")
      TextBoxErrors.value = MAX_ERRORS_REPORTED_DEFAULT
      TextBoxErrors.SetFocus
    Else
      runTestFlag = True
    End If
    Me.Hide
  End If
End Sub

'Test TextBoxErrors.Value with MAX_ERRORS_REPORTED
Private Sub TextBoxErrors_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
  
  maxLinesReported = CLng(TextBoxErrors.value)
  If maxLinesReported > MAX_ERRORS_REPORTED Then
    ErrorMsgBox GetMessage("TO_BIG_ERRORS_LIMIT")
    TextBoxErrors.value = MAX_ERRORS_REPORTED_DEFAULT
    Cancel = True
    TextBoxErrors.SetFocus
  End If

End Sub

'Builds and initializes TestDialog
Private Sub UserForm_Initialize()
  Dim i
  Dim formHeight
  Dim rulesCount
  Dim myCheckBox
  Dim myLabel
  
  rulesCount = rulesList.Count
  runTestFlag = False
'resizes form proper to rules count
  formHeight = rulesCount * RULE_OFFSET + 118
  Me.Height = formHeight
  Me.Width = FORM_WIDTH
'initializes buttons, captions, labels and moves on form proper to rules count
'1.505
  Me.Caption = GetDemoMessage("FORM_CAPTION_START")
'  Image2.Width = FORM_WIDTH
  With LabelErrors1
    .Caption = GetMessage("FORM_LABEL_ERRORS1")
    .Top = 8
    .Left = CHECK_BOX_LEFT + 3
  End With
  With LabelErrors2
    .Caption = GetMessage("FORM_LABEL_ERRORS2")
    .Top = 8
  End With
  With TextBoxErrors
    .Top = 5
    .value = MAX_ERRORS_REPORTED_DEFAULT
    .enabled = True
  End With
  With CmdButtonCancel
    .Caption = GetMessage("FORM_CMD_BUTTON_CANCEL")
    .Left = FORM_WIDTH - 80
    .Top = formHeight - BUTTONS_OFFSET
  End With
  With CmdButtonOK
    .Caption = GetMessage("FORM_CMD_BUTTON_OK")
    .Left = FORM_WIDTH - 155
    .Top = formHeight - BUTTONS_OFFSET
  End With
  With ErrorsFrame
    .Top = formHeight - LIMIT_TOP_OFFSET
    .Width = FORM_WIDTH
  End With

  For i = 1 To rulesCount
'Adds and initialize status labels for each rule on ruleList
    Set myLabel = Me.Controls.Add("Forms.Label.1", "RuleStatus" & i, True)
    With myLabel
      .Left = STATUS_LABEL_LEFT
      .Top = FIRST_RULE_TOP + (i - 1) * RULE_OFFSET
      .Width = 66
    End With
'Adds and initialize checkBox controls for each rule on ruleList to form
    Set myCheckBox = Me.Controls.Add("Forms.CheckBox.1", "RuleNo" & i, True)
    With myCheckBox
      .Left = CHECK_BOX_LEFT
      .Top = FIRST_RULE_TOP - 3 + (i - 1) * RULE_OFFSET
      .Width = 18
      .Height = 18
'if used enabled=false for obligatory rules
'checkBox.ControlTipText with rule comment doesn't appear
      If rulesList(i).impossible = False Then
        .value = True
        If IsEmpty(rulesList(i).opt) Then
          .enabled = False
        Else
          .enabled = True
        End If
      Else
        .value = False
        .enabled = False
        Me.Controls("RuleStatus" & i).Caption = GetMessage("RULE_STATUS_NOT_APPLICABLE")
        Me.Controls("RuleStatus" & i).ForeColor = STATUS_DISABLED_COLOR
      End If
   End With
'Adds and initialize status labels for each rule on ruleList
    Set myLabel = Me.Controls.Add("Forms.Label.1", "RuleText" & i, True)
    With myLabel
      .Left = CHECK_BOX_LEFT + 14
      .Top = FIRST_RULE_TOP + (i - 1) * RULE_OFFSET
      .Width = CHECK_BOX_LABEL_WIDTH
      If Len(rulesList(i).shortDesc) > 0 Then
        .Caption = rulesList(i).shortDesc
      Else
        .Caption = rulesList(i).codeName
      End If
      .ControlTipText = rulesList(i).comment
    End With

  Next i
'1.01
  If InStr(1, Application.OperatingSystem, "NT 5") > 0 Then
    formHeight = rulesCount * RULE_OFFSET + 118 + 6
    Me.Height = formHeight
  End If
'1.04
  CmdButtonOK.SetFocus
End Sub

'Displays rules test status in TestDialog form
Public Sub TestResult()
  Dim i As Integer

  For i = 1 To rulesList.Count
'sets status label color proper to rule end status
    ShowRuleStatus (i)
  Next i
  
  TextBoxErrors.enabled = False
  CmdButtonOK.SetFocus

'changes form caption
'1.505
  Me.Caption = GetDemoMessage("FORM_CAPTION_END")
  Me.Show

End Sub

Public Sub ShowRuleStatus(i As Integer)
  Dim statusText As String
  Dim statusTextColor As Long
    
    Select Case rulesList(i).status
      Case RULE_STATUS_RUNNING
        statusTextColor = STATUS_OK_COLOR
        statusText = GetMessage("RULE_STATUS_RUNNING")
      Case RULE_STATUS_OK
        statusTextColor = STATUS_OK_COLOR
        statusText = GetMessage("RULE_STATUS_OK")
      Case RULE_STATUS_DISABLED
        statusTextColor = STATUS_DISABLED_COLOR
        statusText = GetMessage("RULE_STATUS_DISABLED")
      Case RULE_STATUS_NOT_APPLICABLE
        statusTextColor = STATUS_DISABLED_COLOR
        statusText = GetMessage("RULE_STATUS_NOT_APPLICABLE")
      Case RULE_STATUS_INTERRUPTED
        statusTextColor = STATUS_INT_COLOR
        statusText = GetMessage("RULE_STATUS_INTERRUPTED")
      Case RULE_STATUS_ERRORS
        statusTextColor = STATUS_ERRORS_COLOR
        statusText = GetMessage("RULE_STATUS_ERRORS")
      Case RULE_STATUS_WARNINGS
        statusTextColor = STATUS_WARNINGS_COLOR
        statusText = GetMessage("RULE_STATUS_WARNINGS")
      Case RULE_STATUS_TO_RUN
        statusText = ""
        statusTextColor = STATUS_OK_COLOR
    End Select
    
    Controls("RuleStatus" & i).Caption = statusText
    Controls("RuleStatus" & i).ForeColor = statusTextColor

End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Activate()
  
'1.03
  If Names("TemplateCorrupted").value = NAME_FALSE Then
'creates menu bar
    CreatePSXToolsetMenu
'1.04
    Application.OnKey "+^x", "SupervisorModeOnOff"
  End If

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Dim savedFlag As Boolean

'if shMessages not exists only deletes menu bar and closes workbook
  If IsSheetCodeName("shMessages") = True Then
'1.04
    If Names("SupervisorMode").value = NAME_TRUE Then
      If QuestionMsgBox(GetMessage("SUPERVISOR_MODE")) Then
        SupervisorModeOnOff
        Me.Save
      End If
    End If
  End If
'remove hot key to supervisor mode macro
  If ThisWorkbook.saved = True Then
    savedFlag = True
  End If
  Application.OnKey "+^x"
  Application.Caption = ""
  DeletePSXToolsetMenu
  If savedFlag = True Then
    ThisWorkbook.saved = True
  End If
End Sub

Private Sub Workbook_Open()

'if shMessages not exists stops program execution
  
  shMessagesCheck
  shReportCheck
'1.03
  Names("TemplateCorrupted").value = NAME_FALSE
  ThisTemplate.tested = False
'1.02
'  Application.Caption = AppName
  Application.ScreenUpdating = False
  
  SetPassword
  ThisTemplate.shInstructions.Activate
'1.505
  If ThisTemplate.GUID <> HEILER_GUID Then
    ActiveWindow.Caption = ActiveWindow.Caption & " - Demo"
  End If
  With ThisTemplate.shInstructions
    .Unprotect passwordString
    .Shapes("ProgramVersionText").TextFrame.Characters.Text = AppName
'1.01
    .Shapes("TemplateVersionText").TextFrame.Characters.Text = _
      GetMessage("TEMPLATE_VERSION_TEXT") & " " & GetMessage("TEMPLATE_VERSION")
    .Protect passwordString
  End With
'creates menu bar
  CreatePSXToolsetMenu
'define hot key to supervisor mode macro
  Application.OnKey "+^x", "SupervisorModeOnOff"
  ThisWorkbook.saved = True
  shCGS.Visible = xlSheetHidden
  shBMEHeader.Visible = xlSheetHidden
End Sub

Attribute VB_Name = "Util"
Option Explicit
Option Base 1
Option Private Module

Const MESSAGE_ROW As Integer = 3
Const MESSAGE_ID_COL As Integer = 1
Const MESSAGE_TEXT_COL As Integer = 2

Dim errorTypeMessages As Variant


Dim actionCodes() As actionCodeType
'Returns application name
Function AppName()
  
  AppName = GetMessage("PROGRAM_NAME") & " " & GetMessage("PROGRAM_VERSION")

End Function


'Returns column number on shRules sheet for given column name
Function GetRulesColumnNo(tableName As String, Optional colName As Variant = "")
  On Error GoTo error_handler
  Dim tabStartColNo
  Dim tabEndColNo
  Dim tabRowNo
  
  With ThisTemplate.shRules
    If colName <> "" Then
      tabStartColNo = SearchNamePos(tableName, _
        .Range(.Cells(RULES_TABLE_NAME_ROW, 1), _
        .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
      If tabStartColNo <> 0 Then
        tabEndColNo = SearchNamePos("*", .Range(.Cells(RULES_TABLE_NAME_ROW, _
          tabStartColNo + 1), .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
        If tabEndColNo = 0 Then
          tabEndColNo = EXCEL_MAX_COLUMN_NO
        Else
          tabEndColNo = tabStartColNo + tabEndColNo - 1
        End If
      Else
        Report F_ERR, "F_ERR_RULES_TABLE", ThisTemplate.shRules.Cells(1, 1), tableName, _
          ThisTemplate.shRules.name
        tabStartColNo = 1
      End If
      tabRowNo = RULES_COLUMN_NAME_ROW
      GetRulesColumnNo = SearchNamePos(colName, _
        .Range(.Cells(tabRowNo, tabStartColNo), _
        .Cells(tabRowNo, tabEndColNo)))
      If GetRulesColumnNo = 0 Then
        Report F_ERR, "F_ERR_RULES_COL", ThisTemplate.shRules.Cells(1, tabStartColNo), _
          colName, tableName, ThisTemplate.shRules.name
      Else
        GetRulesColumnNo = GetRulesColumnNo + tabStartColNo - 1
      End If
    Else
      tabStartColNo = 1
      tabEndColNo = EXCEL_MAX_COLUMN_NO
      tabRowNo = RULES_TABLE_NAME_ROW
      GetRulesColumnNo = SearchNamePos(tableName, _
        .Range(.Cells(tabRowNo, tabStartColNo), _
        .Cells(tabRowNo, tabEndColNo)))
      If GetRulesColumnNo = 0 Then
        Report F_ERR, "F_ERR_RULES_TABLE", ThisTemplate.shRules.Cells(1, 1), _
          tableName, ThisTemplate.shRules.name
      End If
    End If
  End With
  Exit Function

error_handler:
  GetRulesColumnNo = 0

End Function
'Returns column number on shRules sheet for given column name
Function GetRulesTableHeadings(tableName As String) As Range
  On Error GoTo error_handler
  Dim tabStartColNo As Long
  Dim tabEndColNo As Long
  Dim lastTableRow As Long
  Dim i As Long
  
  With ThisTemplate.shRules
    tabStartColNo = SearchNamePos(tableName, _
      .Range(.Cells(RULES_TABLE_NAME_ROW, 1), _
      .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
    If tabStartColNo = 0 Then
      Report F_ERR, "F_ERR_RULES_TABLE", ThisTemplate.shRules.Cells(1, 1), _
        tableName, ThisTemplate.shRules.name
    Else
      tabEndColNo = SearchNamePos("*", _
        .Range(.Cells(RULES_TABLE_NAME_ROW, tabStartColNo + 1), _
        .Cells(RULES_TABLE_NAME_ROW, EXCEL_MAX_COLUMN_NO)))
      If tabEndColNo = 0 Then
        tabEndColNo = EXCEL_MAX_COLUMN_NO
'1.501
        For i = tabEndColNo To tabStartColNo Step -1
          If Not IsEmpty(.Cells(RULES_TABLE_NAME_ROW + 1, i).value) Then
            Exit For
          End If
        Next i
        tabEndColNo = i
      End If
      For lastTableRow = RULES_DATA_FIRST_ROW To EXCEL_MAX_ROW_NO
        If IsEmpty(.Cells(lastTableRow, tabStartColNo).value) Then
          lastTableRow = lastTableRow - 1
          Exit For
        End If
      Next lastTableRow
      Set GetRulesTableHeadings = .Range(.Cells(1, tabStartColNo), _
        .Cells(lastTableRow, tabStartColNo + tabEndColNo - 1))
    End If
  End With
  Exit Function

error_handler:

End Function
Function SearchNamePos(searchName As Variant, searchRange As Range)
  On Error GoTo error_handler
  SearchNamePos = Application.WorksheetFunction.Match(searchName, searchRange, 0)
  Exit Function
error_handler:
  SearchNamePos = 0
End Function
'Returns column number on shDefs sheet for given column name
Function GetDefsColumnNo(colName)
  On Error GoTo error_handler
  
  With ThisTemplate.shDefs
    GetDefsColumnNo = Application.WorksheetFunction.Match(colName, _
      .Range(.Cells(1, 1), .Cells(1, EXCEL_MAX_COLUMN_NO)), 0)
  End With
  Exit Function

error_handler:
  GetDefsColumnNo = 0

End Function

'Returns true if sheetCodeName is valid sheet "CodeName" in this workbook
Function IsSheetCodeName(sheetCodeName) As Boolean
  On Error GoTo error_handler
  
  Dim datasheet As Worksheet
  IsSheetCodeName = False
  For Each datasheet In ThisWorkbook.Sheets
    If datasheet.codeName = sheetCodeName Then
      IsSheetCodeName = True
      Exit Function
    End If
  Next datasheet
  Exit Function
error_handler:
  IsSheetCodeName = False

End Function
'Returns true if sheetName is valid sheet "Name" in this workbook
Function IsSheetName(sheetName) As Boolean
  On Error GoTo error_handler
  
  Dim datasheet As Worksheet
  For Each datasheet In ThisWorkbook.Sheets
    If datasheet.name = sheetName Then
      IsSheetName = True
      Exit Function
    End If
  Next datasheet
  IsSheetName = False
  
error_handler:

End Function


'Report utilities

'Returns message text for given messageId from shMessages sheet
Function GetMessage(messageId)
  On Error GoTo error_handler
  
  Dim row_number 'row number for given message
  If Len(messageId) > 0 Then
    With ThisTemplate.shMessages
      row_number = Application.WorksheetFunction.Match(messageId, _
        .Range(.Cells(1, MESSAGE_ID_COL), _
        .Cells(UBound(.UsedRange.Formula, MESSAGE_ID_COL), MESSAGE_ID_COL)), 0)
      GetMessage = .Cells(row_number, MESSAGE_TEXT_COL).value
    End With
  End If
  Exit Function

error_handler:
  GetMessage = ""
End Function
'1.505
Function GetDemoMessage(messageId)
  On Error GoTo error_handler
  
  GetDemoMessage = GetMessage(messageId)
  If ThisTemplate.GUID <> HEILER_GUID Then
    GetDemoMessage = GetDemoMessage & " - Demo"
  End If
  Exit Function
error_handler:
GetDemoMessage = ""
End Function
'Returns prepared message text. %1,%2,%3 substrings in message text
'are replaced with par1,par2,par3 values.
Function PrepMsg(messageId As Variant, Optional par1 As Variant = "", _
  Optional par2 As Variant = "", Optional par3 As Variant = "", _
  Optional par4 As Variant = "") As String
  
  On Error GoTo error_handler
  
  Dim messageText As String
  Dim i
  Dim parPos 'parameter substring position within message
  Dim par
  
  messageText = GetMessage(messageId)
  For i = 1 To 4
    parPos = InStr(messageText, "%") 'determines parameter position in message
    If parPos > 0 Then 'if found
      Select Case Mid(messageText, parPos + 1, 1) 'determines parameter number
        Case 1
          par = par1
        Case 2
          par = par2
        Case 3
          par = par3
        Case 4
          par = par4
        Case Else
      End Select
      messageText = Mid(messageText, 1, parPos - 1) & par & Mid(messageText, parPos + 2)
    Else
      Exit For
    End If
  Next i
  PrepMsg = messageText
  Exit Function
  
error_handler:
  PrepMsg = ""
  
End Function

'Writes error/warning message in currErrorLineNo on shReport sheet
'Test total error counter and calls StopTest procedure
'if error limit is exceeded.
'error counter counts only ERR and F_ERR
Sub Report(errorType As Integer, messageId As Variant, Optional errorRange As Range, _
  Optional par1 As Variant, Optional par2 As Variant, Optional par3 As Variant, _
  Optional par4 As Variant)
  
  On Error GoTo error_handler
  Dim errorRangeAddress As String
  
'1.04
  If noMessagesOutput = True Then
    Exit Sub
  End If
'1.04 InitErrorTypeMessages instead
'  If IsEmpty(errorTypeMessages) Then
'    errorTypeMessages = Array(GetMessage("FATAL_ERROR"), _
'      GetMessage("WARNING"), GetMessage("ERROR"), GetMessage("WARNING"), _
'      GetMessage("INFO"))
'  End If
  
  With ThisTemplate.shReport
    If Not activeRule Is Nothing Then
      Select Case errorType
        Case ERR, F_ERR
'actualizes activeRule errors count
          activeRule.errorsCount = activeRule.errorsCount + 1
          errorsCounter = errorsCounter + 1
        Case WARN, F_WARN
'actualizes activeRule warnings count
          activeRule.warningsCount = activeRule.warningsCount + 1
        Case INFO
      End Select
      .Cells(currErrorLineNo, 2).value = activeRule.ruleNo
    Else
      Select Case errorType
        Case ERR, F_ERR
          errorsCounter = errorsCounter + 1
        Case F_WARN
      End Select
    End If
    
    .Cells(currErrorLineNo, 3).value = errorTypeMessages(errorType)
    .Cells(currErrorLineNo, 4).value = _
      PrepMsg(messageId, par1, par2, par3, par4)
'if errorRange is not Nothing then adds hyperlink
'to errorRange in current report line
    Select Case errorType
      Case F_WARN, F_ERR
'hyperlinks only in supervisor mode
'1.04
        If Names("SupervisorMode").value = NAME_TRUE Then
          If Not errorRange Is Nothing Then
            errorRangeAddress = cellAddress(errorRange)
            ThisTemplate.shReport.Hyperlinks.Add Anchor:=.Cells(currErrorLineNo, 1), _
              Address:="", SubAddress:=errorRangeAddress, _
              TextToDisplay:=errorRangeAddress
          End If
        End If
      Case Else
        If Not errorRange Is Nothing Then
          errorRangeAddress = cellAddress(errorRange)
          ThisTemplate.shReport.Hyperlinks.Add Anchor:=.Cells(currErrorLineNo, 1), _
            Address:="", SubAddress:=errorRangeAddress, _
            TextToDisplay:=errorRangeAddress
        End If
    End Select

  End With
  
'actualizes current error line
  currErrorLineNo = currErrorLineNo + 1

'actualizes total errors\warnings counter
  
  If currErrorLineNo - 3 >= maxLinesReported Then
    StopTest True
  End If
  Exit Sub
error_handler:
End Sub
'1.04
Sub InitErrorTypeMessages()
  errorTypeMessages = Array(GetMessage("FATAL_ERROR"), _
    GetMessage("WARNING"), GetMessage("ERROR"), GetMessage("WARNING"), _
    GetMessage("INFO"))
End Sub
'Writes info message in currErrorLineNo on shReport sheet
Sub ReportInfo(infoText)
  On Error GoTo error_handler
  Dim foundFlag As Boolean
  Dim templateSheet As Worksheet
  
  For Each templateSheet In ThisWorkbook.Worksheets
    If templateSheet.codeName = "shReport" Then
      foundFlag = True
      Exit For
    End If
  Next templateSheet
  If foundFlag = True Then
    With templateSheet
      .Cells(currErrorLineNo, 3).value = errorTypeMessages(INFO)
      .Cells(currErrorLineNo, 4).value = infoText
    End With
  currErrorLineNo = currErrorLineNo + 1
  End If

error_handler:
  
End Sub

'ulilities for action code
'Returns language dependent "add" Action Code
Function GetAddActionCode()
  On Error GoTo error_handler
  
  Dim i
  For i = 1 To UBound(actionCodes)
    If actionCodes(i).codeName = "add" Then
      GetAddActionCode = actionCodes(i).languageName
      Exit For
    End If
  Next i

error_handler:
End Function

'----------------------------------
'message box utilities
'----------------------------------

'Displays given text in message box with info icon
Sub InfoMsgBox(txt As String)
  On Error GoTo error_handler
  Beep
  MsgBox txt, vbOKOnly + vbInformation, AppName & " - " & _
    GetMessage("INFORMATION")
error_handler:
End Sub

'Displays given text in message box with error icon
Sub ErrorMsgBox(txt As String)
  Beep
  MsgBox txt, vbOKOnly + vbCritical, AppName & " - " & _
    GetMessage("ERROR")
error_handler:
End Sub

'Displays given text in message box with exclamation icon
Sub ExclamationMsgBox(txt As String)
  On Error GoTo error_handler
  Beep
  MsgBox txt, vbOKOnly + vbExclamation, AppName & " - " & _
    GetMessage("WARRNING")
error_handler:
End Sub

'Displays given text in message box with Question icon
Function QuestionMsgBox(txt As String) As Boolean
  On Error GoTo error_handler
  Dim odp As Integer
  Beep
  odp = MsgBox(txt, vbYesNo + vbQuestion + vbDefaultButton2, AppName & " - " & _
    GetMessage("QUESTION"))
  If odp = vbYes Then
    QuestionMsgBox = True
  Else
    QuestionMsgBox = False
  End If
error_handler:
End Function

'----------------------------------
'Rules utilities
'----------------------------------


'Returns language independent Action Code
Function GetActionCode(actionCode)
  On Error GoTo error_handler
  
  Dim i
  For i = 1 To UBound(actionCodes)
    If actionCodes(i).languageName = actionCode Then
      GetActionCode = actionCodes(i).codeName
      Exit For
    End If
  Next i

error_handler:

End Function

'Inits action codes array
Sub InitActionCodesArray(Optional hideOnMacroList As Variant = "")
  On Error GoTo error_handler
  
  Dim colNo 'start column number of "Action Codes" table on shDefs sheet
  Dim i
  Dim j
  
'1.05.03
  colNo = GetDefsColumnNo("Action Codes")
  i = DEFS_DATA_FIRST_ROW
  Do While Not IsEmpty(ThisTemplate.shDefs.Cells(i, colNo).value)
    j = j + 1
    ReDim Preserve actionCodes(j)
    actionCodes(j).languageName = ThisTemplate.shDefs.Cells(i, colNo).value
    actionCodes(j).codeName = ThisTemplate.shDefs.Cells(i, colNo + 1).value
    i = i + 1
  Loop

error_handler:

End Sub

'Types & formats utilities

'Compares data value with pattern in format string
'Returns true if format is correct
'only C - for characters and N - for numbers are recognized
Function IsFormatOK(fieldValue, formatString, typ) As Boolean
  On Error GoTo error_handler
  
  Dim i
  
  Select Case typ
    Case TYPE_CHAR 'character values
      If Len(formatString) <> Len(fieldValue) Then
        Exit Function
      End If
      For i = 1 To Len(formatString)
        Select Case Mid(formatString, i, 1)
          Case TYPE_CHAR
            If IsNumeric(Mid(fieldValue, i, 1)) Then
              Exit Function
            End If
          Case TYPE_NUMBER
            If Not IsNumeric(Mid(fieldValue, i, 1)) Then
              Exit Function
            End If
        End Select
      Next i
    Case TYPE_FILE
    Case TYPE_NUMBER
    Case TYPE_DATE
    Case Else
  End Select
  IsFormatOK = True
  Exit Function

error_handler:
  IsFormatOK = False

End Function

'Returns true if scale of number value is correct (less or equal scal)
Function IsScaleOK(numberValue, scal) As Boolean
  On Error GoTo error_handler
  
  Dim textValue 'string representation of number
  Dim decPointPos 'decimal point position
  
  IsScaleOK = True
  textValue = Str(numberValue) 'number to string
  decPointPos = InStr(textValue, ".") 'determine decimal point position
  
  If decPointPos > 0 Then 'if decimal point is present
    If Len(textValue) - decPointPos > scal Then 'if scale is wrong
      IsScaleOK = False
    End If
  End If

error_handler:

End Function

'Returns file extension string
Function GetFileExtension(fileNameString) As String
  On Error GoTo error_handler
  
  Dim pointPos
  
  pointPos = InStrRev(fileNameString, ".") 'finds "." position
  If pointPos > 0 Then
    GetFileExtension = UCase(Mid(fileNameString, pointPos + 1))
  Else
    GetFileExtension = ""
  End If
  Exit Function

error_handler:
  GetFileExtension = ""
End Function
'Returns reference list range object
'given reference list column name
'1.0
'SheetName!Column name - refListName format supported
'SheetName - if omitted "Definitions" sheet is used
'Column name
Function GetReferenceList(refListName) As Range
  On Error GoTo error_handler
  Dim workbookName 'workbook with reflist
  Dim sheetName    'worksheet with reflist
  Dim colName 'column name with reflist values
  Dim colNo  'absolute column number of reference list sheetName sheet
  Dim lastRowNo As Long 'reference last row numer
  Dim pos As Variant
  
  If refListName <> "" Then
'tests worksheetname
    pos = InStr(refListName, "!")
    If pos > 0 Then
      sheetName = Mid(refListName, 1, pos - 1)
      refListName = Mid(refListName, pos + 1)
    Else
      sheetName = ThisTemplate.shDefs.name '1.04
      refListName = refListName
    End If
'sets reference list range
    With ThisWorkbook.Sheets(sheetName)
      colNo = Application.WorksheetFunction.Match(refListName, _
        .Range(.Cells(1, 1), .Cells(1, EXCEL_MAX_COLUMN_NO)), 0)
      lastRowNo = Application.WorksheetFunction.CountA( _
          .Range(.Cells(3, colNo), .Cells(EXCEL_MAX_ROW_NO, colNo)))
      Set GetReferenceList = .Range(.Cells(3, colNo), _
         .Cells(lastRowNo + 2, colNo))
    End With
  End If
  Exit Function
error_handler:
  Set GetReferenceList = Nothing
End Function

'Returns formated cell address string 'SheetName'!A1
Function cellAddress(r As Variant) As String
  On Error GoTo error_handler
  
  cellAddress = "'" & r.Worksheet.name & "'!" & r.Address(RowAbsolute:=False, _
    ColumnAbsolute:=False)

error_handler:

End Function

'Used in TestXX rules
'Compares two values proper to testType
'returns true if value1 or value2 type is incorrect
'returns true if value1 or value2 are empty
Function testValues(value1, value1Type, value2, value2Type, testType) As Boolean
  On Error GoTo error_handler
  
      
  If Not IsEmpty(value2) Then 'value1 and value2 are not empty
      
    Select Case testType
      Case "TestEQ"
        If value1 = value2 Then
          testValues = True
        End If
      Case "TestNE"
        If value1 <> value2 Then
          testValues = True
        End If
      Case "TestGT"
        If value1 > value2 Then
          testValues = True
        End If
      Case "TestLT"
        If value1 < value2 Then
          testValues = True
        End If
      Case "TestGE"
        If value1 >= value2 Then
          testValues = True
        End If
      Case "TestLE"
        If value1 <= value2 Then
          testValues = True
        End If
    End Select
  Else 'value2 is empty
    Select Case testType
      Case "TestEQ"
        If IsEmpty(value1) Then
          testValues = True
        End If
      Case "TestNE"
        If Not IsEmpty(value1) Then
          testValues = True
        End If
      Case Else
        testValues = True
    End Select
  End If 'If Not IsEmpty(value2) Then
  Exit Function
error_handler:

End Function

Private Function CheckValueType(fieldValue As Variant, fieldType As Variant)
  
    Select Case fieldType
      Case TYPE_CHAR, TYPE_FILE
        CheckValueType = True
      Case TYPE_NUMBER, TYPE_UNUMBER, TYPE_INTEGER, TYPE_UINTEGER
        CheckValueType = Application.WorksheetFunction.IsNumber(fieldValue)
      Case TYPE_DATE
        CheckValueType = IsDate(fieldValue)
      Case "CONST"
        CheckValueType = True
      Case Else
        CheckValueType = False
    End Select

End Function

'Returns constant value string from constant string.
'Constant must be in double quotes enclosed.
Function GetConst(constString) As Variant
  On Error GoTo error_handler
  Dim quotte
  
  constString = Trim(constString)
  constString = Mid(constString, 2, Len(constString) - 2)
  If Len(constString) > 0 Then
    GetConst = constString
  End If
  Exit Function
error_handler:

End Function

'Tests if constString is correct constant string
'Constant parameters for rules must be in double quotes enclosed
Function IsConst(constString) As Boolean
  On Error GoTo error_handler
  Dim quotte
  
  constString = Trim(constString)
  quotte = Left(constString, 1)
  If quotte = """" Then
    If Right(constString, 1) = quotte Then
      IsConst = True
    End If
  End If
  Exit Function
error_handler:

End Function

'Constant parameters for test rules must be of integer or string type
Function IsConstTypeCorrect(constValue, typ) As Boolean
  On Error GoTo error_handler
  
  Select Case typ
    Case TYPE_NUMBER, TYPE_UNUMBER, TYPE_INTEGER, TYPE_UINTEGER
      If IsNumeric(constValue) Then
        constValue = CDbl(constValue)
        If Int(constValue) = constValue Then 'if number is integer integer
          IsConstTypeCorrect = True
        Else
          IsConstTypeCorrect = False
        End If
      End If
    Case TYPE_CHAR, TYPE_FILE
       IsConstTypeCorrect = True
    Case TYPE_DATE
      IsConstTypeCorrect = False
    Case Else
      IsConstTypeCorrect = False
  End Select
  Exit Function
error_handler:

End Function

'Tests if fields types are comparable
'any two number types ("I","UI","N","UN") are comparable
'any two character types ("C","F") are comparable
Function areTypesComparable(type1, type2) As Boolean
  On Error GoTo error_handler
  
  If Not IsEmpty(type1) And Not IsEmpty(type2) Then
    Select Case type1
      Case TYPE_INTEGER, TYPE_UINTEGER, TYPE_NUMBER, TYPE_UNUMBER
        Select Case type2
          Case TYPE_INTEGER, TYPE_UINTEGER, TYPE_NUMBER, TYPE_UNUMBER
            areTypesComparable = True
          Case Else
            areTypesComparable = False
        End Select
      Case TYPE_CHAR, TYPE_FILE
        Select Case type1
          Case TYPE_CHAR, TYPE_FILE
            areTypesComparable = True
          Case Else
            areTypesComparable = False
        End Select
      Case TYPE_DATE
        If type2 = TYPE_DATE Then
          areTypesComparable = True
        Else
          areTypesComparable = False
        End If
      Case Else
        areTypesComparable = False
    End Select
  Else
    areTypesComparable = True
  End If
  Exit Function

error_handler:
  areTypesComparable = False
End Function

'converts rule string parameter to given field type
Function ConvertConst(constValue, typ) As Variant
  On Error GoTo error_handler
  If Len(constValue) > 0 Then
    Select Case typ
      Case TYPE_INTEGER, TYPE_UINTEGER, TYPE_NUMBER, TYPE_UNUMBER
        ConvertConst = CDbl(constValue)
      Case TYPE_DATE
      Case TYPE_FILE, TYPE_CHAR
        ConvertConst = constValue
    End Select
  End If
error_handler:

End Function

'Returns true if any "E3" field is not empty
Public Function IsPriceKeyRequired(dataRow As Range)
  On Error GoTo error_handler
  Dim field As FieldClass
  
'1.02 datafields not keyfields
  For Each field In items.dataFields
    With field
      If .entity = ENTITY_3 Then
        If Not IsEmpty(dataRow.Cells(.colNo).value) Then 'value is present
          IsPriceKeyRequired = True
          Exit For
        End If
      End If
    End With
  Next field
  Exit Function
  
error_handler:
             
End Function

'Searchs field by name and returns reference to field if exists
Function GetFieldByName(fieldName) As FieldClass
  On Error GoTo error_handler
  Dim foundFlag As Boolean
  Dim field
  
  For Each field In items.fields
    If field.name = fieldName Then
      Set GetFieldByName = field
      Exit For
    End If
  Next field
  If GetFieldByName Is Nothing Then
'1.501
    If ThisTemplate.BMECatMode = True Then
      For Each field In BMECatHeader.fields
        If field.name = fieldName Then
          Set GetFieldByName = field
          Exit For
        End If
      Next field
    Else
      For Each field In header.fields
        If field.name = fieldName Then
          Set GetFieldByName = field
          Exit For
        End If
      Next field
    End If
  End If
'1.501
  If ThisTemplate.BMECatMode = True Then
    If GetFieldByName Is Nothing Then
      For Each field In cgs.fields
        If field.name = fieldName Then
          Set GetFieldByName = field
          Exit For
        End If
      Next field
    End If
  End If
  Exit Function
  
error_handler:
  
End Function
'Searchs field by codename and returns reference to field if exists
Function GetFieldByCodeName(fieldName) As FieldClass
  On Error GoTo error_handler
  Dim foundFlag As Boolean
  Dim field
  
  For Each field In items.fields
    If field.codeName = fieldName Then
      Set GetFieldByCodeName = field
      Exit For
    End If
  Next field
'1.501
  If ThisTemplate.BMECatMode = False Then
    If GetFieldByCodeName Is Nothing Then
      For Each field In header.fields
        If field.codeName = fieldName Then
          Set GetFieldByCodeName = field
          Exit For
        End If
      Next field
    End If
  Else
    If GetFieldByCodeName Is Nothing Then
      For Each field In BMECatHeader.fields
        If field.codeName = fieldName Then
          Set GetFieldByCodeName = field
          Exit For
        End If
      Next field
    End If
    If GetFieldByCodeName Is Nothing Then
      For Each field In cgs.fields
        If field.codeName = fieldName Then
          Set GetFieldByCodeName = field
          Exit For
        End If
      Next field
    End If
  End If
  Exit Function
  
error_handler:
  
End Function

Sub PrintLine(textBuff As String)
  Put #1, , textBuff
  Put #1, , vbNewLine
End Sub
Function ConvToUTF8(s As Variant) As String
  Dim unicode() As Byte
  Dim i As Long
  Dim xx As Byte
  Dim yy As Byte
  Dim zz As Byte
  
  For i = 1 To Len(s)
    unicode = Mid(s, i, 1)
    If unicode(1) = 0 And unicode(0) < 127 Then
      ConvToUTF8 = ConvToUTF8 & Chr(unicode(0))
    ElseIf unicode(1) < 8 Then
      xx = &H80 + (unicode(0) And &H3F)
      yy = &HC0 + unicode(1) * 4 + (unicode(0) And &HC0) / 64
      ConvToUTF8 = ConvToUTF8 & Chr(yy) & Chr(xx)
    ElseIf unicode(1) < 8 Then
      xx = &H80 + (unicode(0) And &H3F)
      yy = &H80 + (unicode(1) And &HF) * 4 + (unicode(0) And &HC0) / 64
      zz = &HE0 + (unicode(1) And &HF0) / 16
      ConvToUTF8 = ConvToUTF8 & Chr(zz) & Chr(yy) & Chr(xx)
    End If
  Next i
End Function
Attribute VB_Name = "frmArticleMap"
Attribute VB_Base = "0{AA91A313-199C-4E68-9B05-BD8378B15C59}{32E22884-4391-439A-ABD8-A8A11CA94480}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Const GROUP_ID_COL As Integer = 0
Const GROUP_NAME_COL As Integer = 1
Const GROUP_DESC_COL As Integer = 2
Const GROUP_TYPE_COL As Integer = 3
Const GROUP_PARENT_COL As Integer = 4
Const GROUP_LEVEL_COL As Integer = 5
Const GROUP_LIST_TEXT_COL As Integer = 6

Dim mappingFlag As Boolean
'1.502
Dim saved As Boolean

Private Sub ArticleList_Click()
  enableMapButton
End Sub

Private Sub cbView_Click()
  mappingFlag = cbView.value
  cmdUnmap.Visible = mappingFlag
  cmdUnmap.enabled = False
  cmdMap.enabled = False
  cmdMap.Visible = Not mappingFlag
  If cbView.value = False Then
    ArticleWithoutMap ArticleList
    scaleListWidth ArticleList, "$$$ pt;0 pt;$$$ pt"
    L_ArticleList.Caption = GetMessage("FORM_CGS_MAP_UNMAPPED_ARTICLES")
  Else
    CGSList_Change
    L_ArticleList.Caption = GetMessage("FORM_CGS_MAP_MAPPED_ARTICLES")
  End If
End Sub

Private Sub CGSList_Click()
  enableMapButton
End Sub

Private Sub cmdClose_Click()
  If saved = False Then
    If QuestionMsgBox(GetMessage("CLOSE_WITHOUT_SAVING")) Then
      DeleteArticleMapData
      Me.Hide
    End If
  Else
    DeleteArticleMapData
    Me.Hide
  End If
End Sub

Private Sub cmdHelp_Click()
  startComponent GetMessage("FORM_CGS_MAP_HELP_DOC")
End Sub

Private Sub cmdMap_Click()
  With CGSList
    If .listIndex >= 0 Then
      If .List(.listIndex, GROUP_TYPE_COL) = CGS_LEAF Then
        SaveArticleMapping ArticleList, .value
        ArticleWithoutMap ArticleList
'1.503
        scaleListWidth ArticleList, "$$$ pt;0 pt;$$$ pt"
        countMappedItems CGSList
        saved = False
      End If
    End If
  End With
  cmdMap.enabled = False
End Sub

Private Sub cmdSave_Click()
  SaveArticleMapData
  DeleteArticleMapData
  Me.Hide
End Sub

Private Sub cmdUnmap_Click()
  Dim i As Integer
  With CGSList
    If .listIndex >= 0 Then
      If .List(.listIndex, GROUP_TYPE_COL) = CGS_LEAF Then
        SaveArticleUnmapping ArticleList
          GroupMapping ArticleList, .value
          scaleListWidth ArticleList, "$$$ pt;0 pt;$$$ pt"
          countMappedItems CGSList
          saved = False
      End If
    End If
  End With
  cmdUnmap.enabled = False
End Sub

Private Sub CGSList_Change()
  Dim x
  Dim i As Integer
  If mappingFlag = True Then
    ArticleList.Clear
    With CGSList
      If .listIndex >= 0 Then
        If .List(.listIndex, GROUP_TYPE_COL) = CGS_LEAF Then
          GroupMapping ArticleList, .value
          scaleListWidth ArticleList, "$$$ pt;0 pt;$$$ pt"
        End If
      End If
    End With
  End If
End Sub

Private Sub ArticleList_Change()
  enableMapButton
End Sub

Private Sub UserForm_Activate()
  Dim i As Integer
  Dim maxItemLength As Integer
  
  mappingFlag = False
  cmdUnmap.Visible = False
  cmdMap.Visible = True
  cmdMap.enabled = False
  buildCGSTree CGSList
  scaleListWidth CGSList, "0 pt;0 pt;0 pt;0 pt;0 pt;0 pt;$$$ pt"
  ArticleWithoutMap ArticleList
'1.502
  scaleListWidth ArticleList, "$$$ pt;0 pt;$$$ pt"
  countMappedItems CGSList
  cbView.value = False
  saved = True
End Sub

Private Sub UserForm_Initialize()
  If ZOOM_FACTOR > 100 Then
    Me.Width = 690
    ArticleList.Width = 348
    cmdClose.Left = 612
    cmdSave.Left = 540
    L_ArticleList.Width = 348
    Image2.Width = 690
  Else
    Me.Width = 594
    ArticleList.Width = 250
    cmdClose.Left = 514
    cmdSave.Left = 442
    L_ArticleList.Width = 250
    Image2.Width = 594
  End If
  Image2.Width = Me.Width - 168
'1.505
  Me.Caption = GetDemoMessage("FORM_CGS_MAP_CAPTION")
  cmdClose.Caption = GetMessage("FORM_CMD_BUTTON_CLOSE")
  cmdSave.Caption = GetMessage("FORM_CMD_BUTTON_SAVE")
  cbView.Caption = GetMessage("FORM_CGS_MAP_MAPPINGS")
  cmdMap.Caption = GetMessage("FORM_CMD_BUTTON_MAP")
  cmdUnmap.Caption = GetMessage("FORM_CMD_BUTTON_UNMAP")
  cmdHelp.Caption = GetMessage("FORM_CMD_BUTTON_HELP")
  L_GroupList.Caption = GetMessage("FORM_CGS_MAP_GROUPS")
  L_ArticleList.Caption = GetMessage("FORM_CGS_MAP_UNMAPPED_ARTICLES")
End Sub
'1.502
Private Sub scaleListWidth(lBox As Object, colWidths As String)
  Dim i As Integer
  Dim ja As Integer
  Dim maxItemLength As Integer
  Dim widthStr
  
  widthStr = Split(colWidths, ";")
  With lBox
    For j = 0 To UBound(widthStr)
      maxItemLength = 0
      If Left(widthStr(j), 3) = "$$$" Then
        For i = 0 To .ListCount - 1
          If Len(.List(i, j)) > maxItemLength Then
            maxItemLength = Len(.List(i, j))
          End If
        Next i
        i = 30 + maxItemLength * 35 / 10
        If i > 0 Then
          widthStr(j) = Str(i) & " pt"
        Else
          widthStr(j) = Str(CInt(.Width / 5)) & " pt"
        End If
      End If
    Next j
    .ColumnWidths = Join(widthStr, ";")
  End With
End Sub
Sub enableMapButton()
  Dim i As Integer
  
  If cmdMap.Visible Then
    cmdMap.enabled = False
  Else
    cmdUnmap.enabled = False
  End If
  With CGSList
    If .listIndex >= 0 Then
      If .List(.listIndex, GROUP_TYPE_COL) = CGS_LEAF Then
        For i = 0 To ArticleList.ListCount - 1
          If ArticleList.Selected(i) = True Then
            If cmdMap.Visible Then
              cmdMap.enabled = True
            Else
              cmdUnmap.enabled = True
            End If
          End If
        Next i
      End If
    End If
  End With
End Sub
Attribute VB_Name = "frmCGS"
Attribute VB_Base = "0{36EB04C9-6FBB-4E65-90A3-7F75B104492B}{85E2B3E4-A11F-4D61-8F55-036FB9B2D166}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Const GROUP_ID_COL As Integer = 0
Const GROUP_NAME_COL As Integer = 1
Const GROUP_DESC_COL As Integer = 2
Const GROUP_TYPE_COL As Integer = 3
Const GROUP_PARENT_COL As Integer = 4
Const GROUP_LEVEL_COL As Integer = 5
Const GROUP_LIST_TEXT_COL As Integer = 6
Const ROW_COL As Integer = 7

Public saved As Boolean

Private Sub CGSList_Click()
  enabledButtons
End Sub

Private Sub CGSList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
  cmdEdit_Click
End Sub

Private Sub cmdClose_Click()
  If saved = False Then
    If QuestionMsgBox(GetMessage("CLOSE_WITHOUT_SAVING")) Then
      Me.Hide
    End If
  Else
    Me.Hide
  End If
End Sub

Private Sub cmdCreate_Click()
  With CGSList
    If .listIndex >= 0 Then
      If .Column(GROUP_TYPE_COL, .listIndex) <> CGS_LEAF Then
        frmCGSCreate.NewNode
      End If
    End If
  End With
End Sub
Private Sub cmdEdit_Click()
  Dim childrenFlag As Boolean
  
  With CGSList
    If .listIndex >= 0 Then
      If .listIndex + 1 < .ListCount Then
        If .List(.listIndex, GROUP_ID_COL) = _
          .List(.listIndex + 1, GROUP_PARENT_COL) Then
          childrenFlag = True
        End If
      Else
      End If
      frmCGSCreate.EditNode .List(.listIndex, GROUP_ID_COL), _
        .List(.listIndex, GROUP_NAME_COL), _
        .List(.listIndex, GROUP_DESC_COL), _
        .List(.listIndex, GROUP_TYPE_COL), childrenFlag
    End If
  End With
End Sub

Private Sub cmdDelete_Click()
  With CGSList
    If .listIndex >= 0 Then
      saved = False
      If .Column(GROUP_TYPE_COL, .listIndex) = CGS_LEAF Then
'1.503
        deleteArticleToCGSMap .Column(GROUP_ID_COL, .listIndex)
        .RemoveItem .listIndex
      ElseIf .Column(GROUP_TYPE_COL, .listIndex) = CGS_NODE Then
        deleteNode .listIndex
      End If
    End If
  End With
End Sub
Sub deleteNode(listIndex)
  Dim level
  With CGSList
    level = .Column(GROUP_LEVEL_COL, .listIndex)
    .RemoveItem .listIndex
    Do While .Column(GROUP_LEVEL_COL, .listIndex) > level And _
      .listIndex >= listIndex
'1.503
      If .Column(GROUP_TYPE_COL, .listIndex) = CGS_LEAF Then
        deleteArticleToCGSMap .Column(GROUP_ID_COL, .listIndex)
      End If
      .RemoveItem .listIndex
    Loop
  End With
End Sub

Private Sub cmdHelp_Click()
  startComponent GetMessage("FORM_CGS_HELP_DOC")
End Sub

Private Sub cmdSave_Click()
  saveCGSTree CGSList
  Me.Hide
End Sub

Private Sub UserForm_Initialize()
'1.505
  Me.Caption = GetDemoMessage("FORM_CGS_CAPTION")
  cmdClose.Caption = GetMessage("FORM_CMD_BUTTON_CLOSE")
  cmdSave.Caption = GetMessage("FORM_CMD_BUTTON_SAVE")
  cmdCreate.Caption = GetMessage("FORM_CGS_CREATE_NODE")
  cmdDelete.Caption = GetMessage("FORM_CGS_DELETE_NODE")
  cmdEdit.Caption = GetMessage("FORM_CGS_EDIT_NODE")
  cmdHelp.Caption = GetMessage("FORM_CMD_BUTTON_HELP")
End Sub

Public Sub AddNode(groupID, groupName, groupDesc, groupType)
  Dim j As Integer
  Dim i As Integer
  Dim nodeChar As String
  Dim level As String
  
  saved = False
  With CGSList
    i = .listIndex
    level = .List(i, GROUP_LEVEL_COL) + 1
    For j = i + 1 To .ListCount - 1
      If .List(j, GROUP_LEVEL_COL) = level Then
        If StrComp(.List(j, GROUP_NAME_COL), groupName, vbTextCompare) > 0 Then
          Exit For
        End If
      ElseIf .List(j, GROUP_LEVEL_COL) < level Then
        Exit For
      End If
    Next j
    If groupType = CGS_LEAF Then
      nodeChar = "- "
    Else
      nodeChar = "+ "
    End If
    
    .addItem , j
    .List(j, GROUP_ID_COL) = groupID
    .List(j, GROUP_NAME_COL) = groupName
    .List(j, GROUP_DESC_COL) = groupDesc
    .List(j, GROUP_TYPE_COL) = groupType
    .List(j, GROUP_PARENT_COL) = .List(i, GROUP_ID_COL)
    .List(j, GROUP_LEVEL_COL) = level
    .List(j, GROUP_LIST_TEXT_COL) = Space(level * 8) & nodeChar & _
       groupName
  End With
  selectCGSItem CGSList, groupID
  enabledButtons
End Sub
Public Sub AddRoot()
  
  With CGSList
    .Clear
    .addItem
    .List(0, GROUP_ID_COL) = 1
    .List(0, GROUP_NAME_COL) = "Root"
    .List(0, GROUP_TYPE_COL) = CGS_ROOT
    .List(0, GROUP_PARENT_COL) = 0
    .List(0, GROUP_LEVEL_COL) = 0
    .List(0, GROUP_LIST_TEXT_COL) = "+ Root"
  End With
  selectCGSItem CGSList, 1
  enabledButtons
End Sub
Public Sub UpdateNode(groupID, groupName, groupDesc, groupType)
  Dim nodeChar As String
  Dim level As String
  Dim oldGroupId
  Dim i As Long
  
  On Error GoTo error_handler
  
  saved = False
  If groupType = CGS_LEAF Then
    nodeChar = "- "
  Else
    nodeChar = "+ "
  End If
  With CGSList
    oldGroupId = .List(.listIndex, GROUP_ID_COL)
    .List(.listIndex, GROUP_ID_COL) = groupID
    .List(.listIndex, GROUP_NAME_COL) = groupName
    .List(.listIndex, GROUP_TYPE_COL) = groupType
    .List(.listIndex, GROUP_DESC_COL) = groupDesc
    level = .List(.listIndex, GROUP_LEVEL_COL)
    .List(.listIndex, GROUP_LIST_TEXT_COL) = Space(level * 8) & nodeChar & _
       groupName
    If oldGroupId <> groupID Then
      For i = 0 To .ListCount - 1
        If .List(i, GROUP_PARENT_COL) = oldGroupId Then
          .List(i, GROUP_PARENT_COL) = groupID
        End If
      Next i
    End If
  End With
  saveTempCGSTree CGSList
  buildCGSTree CGSList
  selectCGSItem CGSList, groupID
  enabledButtons
error_handler:
End Sub
Public Sub ShowTree()
  buildCGSTree CGSList
  enabledButtons
  CGSList.SetFocus
End Sub
Sub enabledButtons()
  With CGSList
    If .listIndex >= 0 Then
      cmdEdit.enabled = True
      Select Case .Column(GROUP_TYPE_COL, .listIndex)
        Case CGS_ROOT
          cmdDelete.enabled = False
          cmdCreate.enabled = True
        Case CGS_LEAF
          cmdDelete.enabled = True
          cmdCreate.enabled = False
        Case CGS_NODE
          cmdDelete.enabled = True
          cmdCreate.enabled = True
      End Select
    Else
      cmdEdit.enabled = False
      cmdCreate.enabled = False
      cmdDelete.enabled = False
    End If
  End With
End Sub
Attribute VB_Name = "frmCGSCreate"
Attribute VB_Base = "0{AA78FB9F-4D48-4960-B05E-88E66672F427}{2C5934C3-CB4F-454C-B1A7-7FD3A5D00DCB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim editFlag As Boolean
Dim lastNodeType

Private Sub cmdCancel_Click()
  Me.Hide
End Sub


Private Sub cmdCreate_Click()
  If Len(txtID.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupID.Caption)
    txtID.SetFocus
  ElseIf Len(cmbType.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupType.Caption)
    cmbType.SetFocus
  ElseIf Len(txtName.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupName.Caption)
    txtName.SetFocus
  Else
    lastNodeType = cmbType.value
    frmCGS.AddNode txtID.value, txtName.value, _
      txtDescription.value, cmbType.value
    Me.Hide
  End If
End Sub
Private Sub cmd_Save_Click()
  If Len(txtID.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupID.Caption)
    txtID.SetFocus
  ElseIf Len(cmbType.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupType.Caption)
    cmbType.SetFocus
  ElseIf Len(txtName.value) = 0 Then
    ErrorMsgBox PrepMsg("FORM_ERROR_EMPTY_FIELD", L_GroupName.Caption)
    txtName.SetFocus
  Else
    With frmCGS.CGSList
      frmCGS.UpdateNode txtID.value, txtName.value, _
        txtDescription.value, cmbType.value
    End With
    Me.Hide
  End If
End Sub

Public Sub NewNode()
'1.505
  Me.Caption = GetDemoMessage("FORM_CGS_CREATE_CAPTION")
  txtID.value = ""
  txtName.value = ""
  txtDescription.value = ""
  cmbType.value = ""
  editFlag = False
  cmd_Save.Visible = False
  cmdCreate.Visible = True
  txtID.enabled = True
  cmbType.enabled = True
  cmbType.Clear
  cmbType.addItem CGS_NODE
  cmbType.addItem CGS_LEAF
  cmbType.value = lastNodeType
  txtID.SetFocus
  Me.Show
End Sub
Public Sub EditNode(idValue, nameValue, descValue, typeValue, childrenFlag As Boolean)
  editFlag = True
  
'1.505
  Me.Caption = GetDemoMessage("FORM_CGS_EDIT_CAPTION")
  If typeValue <> CGS_ROOT Then
    cmbType.Clear
    cmbType.addItem CGS_NODE
    cmbType.addItem CGS_LEAF
    txtID.enabled = True
    cmbType.enabled = Not childrenFlag
  Else
    txtID.enabled = False
    cmbType.enabled = False
  End If
  txtID.value = idValue
  txtName.value = nameValue
  txtDescription.value = descValue
  cmbType.value = typeValue
  cmd_Save.Visible = True
  cmdCreate.Visible = False
  txtName.SetFocus
  Me.Show
End Sub

Private Sub cmdHelp_Click()
  startComponent GetMessage("FORM_CGS_CREATE_HELP_DOC")
End Sub

Private Sub txtID_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)

  Dim i
  If editFlag = False Then
    If Me.Visible = True Then
    For i = 0 To frmCGS.CGSList.ListCount - 1
      If CStr(frmCGS.CGSList.List(i, 0)) = txtID.value Then
        ErrorMsgBox PrepMsg("FORM_CGS_CREATE_GROUPID_ERROR", txtID.value)
        Cancel = True
        Exit For
      End If
    Next i
    End If
  End If
End Sub


Private Sub UserForm_Initialize()
  cmdCreate.Caption = GetMessage("FORM_CMD_BUTTON_CREATE")
  cmdCancel.Caption = GetMessage("FORM_CMD_BUTTON_CANCEL")
  L_GroupID.Caption = GetMessage("FORM_CGS_CREATE_LABEL_ID")
  L_GroupName.Caption = GetMessage("FORM_CGS_CREATE_LABEL_NAME")
  L_GroupDesc.Caption = GetMessage("FORM_CGS_CREATE_LABEL_DESC")
  L_GroupType.Caption = GetMessage("FORM_CGS_CREATE_LABEL_TYPE")
  cmd_Save.Caption = GetMessage("FORM_CMD_BUTTON_SAVE")
  cmdHelp.Caption = GetMessage("FORM_CMD_BUTTON_HELP")
  lastNodeType = CGS_LEAF
End Sub

Attribute VB_Name = "frmMapItemToBME"
Attribute VB_Base = "0{01168E60-D366-4ACC-9ACA-4D414576E33E}{3246E22F-3456-4507-BBC7-980813579606}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1

Dim mapMode As String
Dim saved As Boolean

Private Sub BMECatFields_Click()
  enableButtons
End Sub

Private Sub cmdClose_Click()
  If saved = False Then
    If QuestionMsgBox(GetMessage("CLOSE_WITHOUT_SAVING")) Then
      Me.Hide
    End If
  Else
    Me.Hide
  End If
End Sub

Private Sub cmdDelete_Click()
  If MapList.listIndex >= 0 Then
    saved = False
    BMEDoc.MapField CInt(MapList.value)
    UpdateLists
  End If
End Sub

Private Sub cmdHelp_Click()
  startComponent GetMessage("FORM_BMECAT_HELP_DOC")
End Sub

Private Sub cmdMap_Click()
  If ItemFields.listIndex >= 0 Then
    If BMECatFields.listIndex >= 0 Then
      If BMECatFields.value > 0 Then
        saved = False
        BMEDoc.MapField CInt(BMECatFields.value), ItemFields.value
        UpdateLists
      End If
    End If
  End If
End Sub

Private Sub cmdSave_Click()
  SaveBMECatMap
  Me.Hide
End Sub

'shows item fields mapping form
Public Sub ShowItemMapping()
  mapMode = "ARTICLE"
  saved = True
  UpdateLists
  L_ItemFields.Caption = GetMessage("FORM_BMECAT_ITEM_FIELDS_LABEL")
'1.505
  Me.Caption = GetDemoMessage("FORM_BMECAT_ITEM_CAPTION")
End Sub

'shows header fields mapping form
Public Sub ShowHeaderMapping()
  mapMode = "HEADER"
  saved = True
  UpdateLists
  L_ItemFields.Caption = GetMessage("FORM_BMECAT_HEADER_FIELDS_LABEL")
'1.505
  Me.Caption = GetDemoMessage("FORM_BMECAT_HEADER_CAPTION")
End Sub

'refreshes form lists
Sub UpdateLists()
  If mapMode = "HEADER" Then
    ShowHeaderFields
  Else
    ShowItemFields
  End If
  ShowBMECatFields
  ShowMapList
  enableButtons
End Sub

'builds and shows unmapped Item Data fields list
Sub ShowItemFields()
  Dim itemfield As FieldClass
  
  ItemFields.Clear
  ItemFields.enabled = True
  For Each itemfield In items.dataFields
    Select Case itemfield.codeName
      Case "Action"
      Case Else
        If BMEDoc.isMapped(mapMode, itemfield.name) = False Then
          ItemFields.addItem itemfield.name
        End If
    End Select
  Next itemfield
  If ItemFields.ListCount = 0 Then
     ItemFields.addItem GetMessage("NO_FIELDS_TO_MAP")
     ItemFields.enabled = False
  End If
End Sub

'builds and shows unmapped BMECatHeader fields list
Sub ShowHeaderFields()
  Dim headerField As FieldClass
  
  ItemFields.Clear
  ItemFields.enabled = True
  For Each headerField In BMECatHeader.dataFields
    Select Case headerField.codeName
      Case "prev_version", "Transaction"
      Case Else
        If BMEDoc.isMapped(mapMode, headerField.name) = False Then
          ItemFields.addItem headerField.name
        End If
    End Select
  Next headerField
  If ItemFields.ListCount = 0 Then
     ItemFields.addItem GetMessage("FORM_BMECAT_NO_FIELDS_TO_MAP")
     ItemFields.enabled = False
  End If
End Sub

'builds and shows unmapped BMECat fields list
Sub ShowBMECatFields()
  
  BMECatFields.Clear
  BMEDoc.FieldsToMap BMECatFields, mapMode

End Sub

'builds and shows items/header to bmecat mapping list
Sub ShowMapList()
  
  MapList.Clear
  BMEDoc.MappedFields MapList, mapMode

End Sub

Sub SaveBMECatMap()
  BMEDoc.saveMappings
End Sub

Private Sub ItemFields_Click()
  enableButtons
End Sub

Private Sub MapList_Click()
  enableButtons
End Sub

Private Sub UserForm_Initialize()
  L_Mapping.Caption = GetMessage("FORM_BMECAT_MAPPING_CAPTION")
  L_BMECatFields.Caption = GetMessage("FORM_BMECAT_BMECAT_FIELDS")
  cmdDelete.Caption = GetMessage("FORM_BMECAT_BUTTON_DEL_MAP")
  cmdSave.Caption = GetMessage("FORM_CMD_BUTTON_SAVE")
  cmdMap.Caption = GetMessage("FORM_CMD_BUTTON_MAP")
  cmdClose.Caption = GetMessage("FORM_CMD_BUTTON_CLOSE")
  cmdHelp.Caption = GetMessage("FORM_CMD_BUTTON_HELP")
  cmdMap.enabled = False
End Sub

'enabled or disabled cmdMap button
Private Sub enableButtons()
  cmdMap.enabled = False
  If ItemFields.listIndex >= 0 Then
    If BMECatFields.listIndex >= 0 Then
      If BMEDoc.isSimple(CInt(BMECatFields.value)) Then
        cmdMap.enabled = True
      End If
    End If
  End If
  If MapList.listIndex >= 0 Then
    cmdDelete.enabled = True
  Else
    cmdDelete.enabled = False
  End If
End Sub

Attribute VB_Name = "frmSaveXML"
Attribute VB_Base = "0{B02BAD2A-8FB9-4409-B3A3-45E52AF1F010}{BCB8B081-4FF4-43E9-A716-5D202826CBBE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim currFolder As String
Dim currFile
Public OKFlag As Boolean

'don't work in Excel 2000
Private Sub cmdBrowse_Click()
    Dim fd As Object

    'Create a FileDialog object as a File Picker dialog box.
    SplitFolderAndFile
    Set fd = Application.FileDialog(4)
    With fd
      .InitialFileName = currFolder
      .Title = GetMessage("FORM_SAVE_BROWSE_TITLE")
      If .Show = -1 Then
        TextFileName.value = .SelectedItems.item(1) & "\" & currFile
        currFolder = .SelectedItems.item(1) & "\"
      End If
    End With
    Set fd = Nothing

End Sub

Private Sub CmdOK_Click()
  On Error GoTo error_handler
  Dim arr_s As Variant
  Dim i As Integer
  Dim j As Integer
  Dim fs
  
'closes all opened files
  Reset
  SplitFolderAndFile
  Set fs = CreateObject("Scripting.FileSystemObject")
'checks folder
  If fs.folderexists(currFolder) Then
'checks file
    If currFile <> "" Then
      If fs.fileexists(Trim(TextFileName.value)) Then
        If QuestionMsgBox(GetMessage("E_BMECAT_GEN_FILE_EXISTS")) Then
          Kill TextFileName.value
          OKFlag = True
          Me.Hide
        End If
      Else
        OKFlag = True
        Me.Hide
      End If
    Else
      ErrorMsgBox GetMessage("E_BMECAT_GEN_WRONG_PATH")
    End If
  Else
    ErrorMsgBox GetMessage("E_BMECAT_GEN_WRONG_PATH")
  End If
  
  Exit Sub
error_handler:
End Sub

Private Sub UserForm_Activate()
  If Application.Version = "9.0" Then
'don't work in Excel 2000
    Me.Height = 86
    cmdOK.Top = cmdBrowse.Top
    cmdBrowse.Visible = False
  Else
    Me.Height = 114
    cmdOK.Top = cmdBrowse.Top + 30
    cmdBrowse.Visible = True
  End If
  cmdBrowse.Caption = GetMessage("FORM_CMD_BUTTON_BROWSE")
  cmdOK.Caption = GetMessage("FORM_CMD_BUTTON_OK")
  currFolder = ThisWorkbook.Path & "\"
  currFile = getBMECatFileName
  TextFileName.value = currFolder & currFile
'1.505
  Me.Caption = GetDemoMessage("FORM_BMECAT_SAVE_CAPTION")
  OKFlag = False
End Sub
'returns default BMECat file name
Function getBMECatFileName()
  Dim field As FieldClass
  
  Set field = GetFieldByCodeName("SupplierName")
  getBMECatFileName = BMECatHeader.datasheet.Cells(field.colNo, 2).value
  Set field = GetFieldByCodeName("BuyerName")
  getBMECatFileName = getBMECatFileName & "_" & BMECatHeader.datasheet.Cells(field.colNo, 2).value
  Set field = GetFieldByCodeName("prev_version")
  Select Case BMECatTransaction
    Case T_NEW
      getBMECatFileName = getBMECatFileName & "_NEW"
    Case T_PRO
      getBMECatFileName = getBMECatFileName & "_PRO_" & BMECatHeader.datasheet.Cells(field.colNo, 2).value
    Case T_PRI
      getBMECatFileName = getBMECatFileName & "_PRI_" & BMECatHeader.datasheet.Cells(field.colNo, 2).value
  End Select
  getBMECatFileName = getBMECatFileName & ".xml"
End Function
'splits full file name to folder name and file name
Sub SplitFolderAndFile()
  Dim arr_s As Variant
  Dim i As Integer
  Dim j As Integer
  
  currFolder = ""
  currFile = ""
  arr_s = Split(Trim(TextFileName.value), "\")
  i = UBound(arr_s)
  If i > 0 Then
    currFile = arr_s(i)
    currFolder = arr_s(0)
    For j = 1 To i - 1
      currFolder = currFolder & "\" & arr_s(j)
    Next j
  End If
End Sub
Attribute VB_Name = "shBMEHeader"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shCGS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shDefs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shHeader"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
  ActiveWindow.ScrollColumn = 1
  ActiveWindow.ScrollRow = 1
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
  ThisTemplate.tested = False
End Sub

Attribute VB_Name = "shIdent"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shInstructions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
  With ActiveWindow
    .ScrollColumn = 1
    .ScrollRow = 1
'1.02
'    .DisplayGridlines = False
    .DisplayHeadings = False
  End With
End Sub
Attribute VB_Name = "shMessages"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shReport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit
Private Sub Worksheet_Activate()
  ActiveWindow.ScrollColumn = 1
End Sub

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
  On Error GoTo error_handler
  ThisTemplate.shReport.Range(Cells(Target.Range.Row, 1), _
    Cells(Target.Range.Row, 4)).Font.ColorIndex = FOLLOWED_COLOR_INDEX
  Application.ScreenUpdating = True
error_handler:
End Sub


Attribute VB_Name = "shRules"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
  On Error GoTo error_handler
  
  With ThisWorkbook.Names("BMECat").RefersToRange
    If Target.Row = .Row And Target.Column = .Column Then
      Application.EnableEvents = False
      .value = UCase(.value)
      If .value <> "ON" Then
        .value = "OFF"
      End If
      Application.ScreenUpdating = False
      ThisTemplate.Update
      DeletePSXToolsetMenu
      CreatePSXToolsetMenu
      Application.ScreenUpdating = True
    End If
  End With
  ThisTemplate.tested = False
error_handler:
  Application.EnableEvents = True
End Sub

Attribute VB_Name = "shTemp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' y(^z

INQUEST-PP=macro
