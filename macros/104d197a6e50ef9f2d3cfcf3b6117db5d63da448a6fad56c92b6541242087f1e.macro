Attribute VB_Name = "Add_Menu"

'Sub auto_open()
'    Menu
'End Sub

Sub Menu()
Dim a, b, ga, gb, gc, P
Set a = ActiveMenuBar.Menus
For Each P In a
    If P.Caption = "Sequetrol compact LCD" Then
        ActiveMenuBar.Reset
    End If
Next
Set b = a.Add("Sequetrol compact LCD")
Set ga = b.MenuItems.Add("Export to Program MCH File")
    ga.OnAction = "Export_to_Program_MCH_File"
Set gb = b.MenuItems.Add(Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption)
    gb.OnAction = "button_2_Activate"
Set gc = b.MenuItems.Add("Export to Message MCH File")
    gc.OnAction = "Export_to_Message_MCH_File"
End Sub


Attribute VB_Name = "Export_to_Dialog_File"
Option Private Module
Option Explicit

Const Number_of_row = 128
Const Export_Area = "Export_Dialog_Area"
Const Size_String_Area = "Size_Dialog_String_Area"
Const RETLW_PIC_Instruction_Code = "34"
Const Null_Terminated_String_Char_Code = "00"
Const Space_Char_Code = "20"

Function Export_to_Dialog_MCH_File(Optional argFileNameToSave As Variant, Optional argAppendFile As Boolean) As Boolean
':::::::::::::::::::::::::::::::::::::::::::::::::
Dim fileSaveName As Variant
Dim i As Integer
Dim j  As Integer
Dim k  As Integer
':::::::::::::::::::::::::::::::::::::::::::::::::
If (IsMissing(argFileNameToSave) = True) _
    Then
        fileSaveName = Application.GetSaveAsFilename( _
            InitialFileName:=ActiveWorkbook.Path & "\" & "Dialog", _
            fileFilter:="MCH Files (*.MCH), *.MCH,Text Files (*.txt), *.txt,All files (*.*),*.*", _
            Title:="Export to Dialog MCH File")
    Else
        fileSaveName = argFileNameToSave
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
If fileSaveName <> False Then
    On Error GoTo HandleError1
'    Open fileSaveName For Output As #1
    If (IsMissing(argAppendFile) = True) _
        Then
            Open fileSaveName For Output As #1
        Else
            If argAppendFile Then
                Open fileSaveName For Append As #1
            Else
                Open fileSaveName For Output As #1
            End If
    End If
    On Error GoTo HandleError1
    For i = 1 To Number_of_row
        For j = 1 To Len(Names(Export_Area).RefersToRange(i, 1).Value)
            'Print #1, Sheets(1).Range(StartColumn & i).Value
            If j > Names(Size_String_Area).RefersToRange(i, 1).Value Then
                Exit For
            End If
                'Simple conversion of German special characters according to the specifications for the Winstar1602B display character set
                'For any additional conversions just copy and paste one ElseIf & Print rows, change the character in the first "" to that one you need, take a look in the LCD_Winstar1602B_font sheet and fit the Hex-code in the second ""
                If Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "84"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8E"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "94"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "99"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "81"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9A"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A0"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "41"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "85"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "41"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "83"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "86"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "80"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "87"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "82"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "90"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8A"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "45"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "88"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8D"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A1"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9B"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9C"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A2"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "93"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "95"
                Else
                   '111120 Print #1, RETLW_PIC_Instruction_Code & Hex(AscB(Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1)))
                    Print #1, Hex(AscB(Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1)))
                End If
        Next j
        For k = j To Names(Size_String_Area).RefersToRange(i, 1).Value
            '111120 Print #1, RETLW_PIC_Instruction_Code & Space_Char_Code
            Print #1, Space_Char_Code
        Next k
        '111120 Print #1, RETLW_PIC_Instruction_Code & Null_Terminated_String_Char_Code
        Print #1, Null_Terminated_String_Char_Code
    Next i
    Close #1
    If (IsMissing(argFileNameToSave) = True) Then MsgBox "Dialog MCH file export OK."
    Export_to_Dialog_MCH_File = True
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
Exit Function
':::::::::::::::::::::::::::::::::::::::::::::::::
HandleError1:
    Export_to_Dialog_MCH_File = False
    MsgBox "Error # " & Str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
    End
End Function


Attribute VB_Name = "Export_to_Merged_File"
Option Private Module
Option Explicit

Sub ExportProgramAndMessage_MCM_File()
    Dim fileSaveName As Variant
    fileSaveName = Application.GetSaveAsFilename( _
        InitialFileName:=ActiveWorkbook.Path & "\" & "ProgramAndMessages", _
        fileFilter:="MCH Files (*.MCM), *.MCM,Text Files (*.txt), *.txt,All files (*.*),*.*", _
        Title:="Export to Merged Program & Message MCM File")
    If fileSaveName <> False Then
        If Export_to_Program_MCH_File(fileSaveName) And Export_to_Message_MCH_File(fileSaveName, True) _
            Then
                MsgBox "Program & Message MCM file export OK."
            Else
                Stop
        End If
    End If
End Sub

Attribute VB_Name = "Export_to_Message_File"
Option Private Module
Option Explicit

Const Export_Area = "Export_Message_Area"
Const Size_String_Area = "Size_String_Area"
Const RETLW_PIC_Instruction_Code = "34"
Const Null_Terminated_String_Char_Code = "00"
Const Space_Char_Code = "20"

Function Export_to_Message_MCH_File(Optional argFileNameToSave As Variant, Optional argAppendFile As Boolean) As Boolean
':::::::::::::::::::::::::::::::::::::::::::::::::
Dim fileSaveName As Variant
Dim i As Integer
Dim j  As Integer
Dim k  As Integer
':::::::::::::::::::::::::::::::::::::::::::::::::
If (IsMissing(argFileNameToSave) = True) _
    Then
        fileSaveName = Application.GetSaveAsFilename( _
            InitialFileName:=ActiveWorkbook.Path & "\" & "Message", _
            fileFilter:="MCH Files (*.MCH), *.MCH,Text Files (*.txt), *.txt,All files (*.*),*.*", _
            Title:="Export to Message MCH File")
    Else
        fileSaveName = argFileNameToSave
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
If fileSaveName <> False Then
    On Error GoTo HandleError1
'    Open fileSaveName For Output As #1
    If (IsMissing(argAppendFile) = True) _
        Then
            Open fileSaveName For Output As #1
        Else
            If argAppendFile Then
                Open fileSaveName For Append As #1
            Else
                Open fileSaveName For Output As #1
            End If
    End If
    On Error GoTo HandleError1
    For i = 1 To 56
        For j = 1 To Len(Names(Export_Area).RefersToRange(i, 1).Value)
            'Print #1, Sheets(1).Range(StartColumn & i).Value
            If j > Names(Size_String_Area).RefersToRange(i, 1).Value Then
                Exit For
            End If
                'Simple conversion of German special characters according to the specifications for the Winstar1602B display character set
                'For any additional conversions just copy and paste one ElseIf & Print rows, change the character in the first "" to that one you need, take a look in the LCD_Winstar1602B_font sheet and fit the Hex-code in the second ""
                If Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "84"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8E"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "94"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "99"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "81"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9A"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A0"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "41"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "85"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "41"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "83"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "86"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "80"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "87"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "82"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "90"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8A"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "45"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "88"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "8D"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A1"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9B"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "9C"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "A2"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "93"
                ElseIf Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1) = "|fffd|" Then
                    Print #1, "95"
                Else
                   '111120 Print #1, RETLW_PIC_Instruction_Code & Hex(AscB(Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1)))
                    Print #1, Hex(AscB(Mid(Names(Export_Area).RefersToRange(i, 1).Value, j, 1)))
                End If
        Next j
        For k = j To Names(Size_String_Area).RefersToRange(i, 1).Value
            '111120 Print #1, RETLW_PIC_Instruction_Code & Space_Char_Code
            Print #1, Space_Char_Code
        Next k
        '111120 Print #1, RETLW_PIC_Instruction_Code & Null_Terminated_String_Char_Code
        Print #1, Null_Terminated_String_Char_Code
    Next i
    Close #1
    If (IsMissing(argFileNameToSave) = True) Then MsgBox "Message MCH file export OK."
    Export_to_Message_MCH_File = True
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
Exit Function
':::::::::::::::::::::::::::::::::::::::::::::::::
HandleError1:
    Export_to_Message_MCH_File = False
    MsgBox "Error # " & Str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
    End
End Function
Attribute VB_Name = "Export_to_Program_File"
Option Private Module
Option Explicit

Const Export_Area = "Export_Program_Area"
Const StartRow = 18
Const StartColumn = "C"

Function Export_to_Program_MCH_File(Optional argFileNameToSave As Variant) As Boolean
':::::::::::::::::::::::::::::::::::::::::::::::::
Dim ExportSheet As String
Dim fileSaveName As Variant
Dim i As Integer
Dim valueToSave As String
':::::::::::::::::::::::::::::::::::::::::::::::::
If (IsMissing(argFileNameToSave) = True) _
    Then
        fileSaveName = Application.GetSaveAsFilename( _
            InitialFileName:=ActiveWorkbook.Path & "\" & "Program", _
            fileFilter:="MCH Files (*.MCH), *.MCH,Text Files (*.txt), *.txt,All files (*.*),*.*", _
            Title:="Export to Program MCH File")
    Else
        fileSaveName = argFileNameToSave
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
If fileSaveName <> False Then
    On Error GoTo HandleError1
    Open fileSaveName For Output As #1
    On Error GoTo HandleError1
    '::::::::::::::::::
    For i = 1 To 1024
        
        
        valueToSave = CStr(Names(Export_Area).RefersToRange(i, 1).Value)
        
        
        If valueToSave <> "" _
            Then
                Print #1, valueToSave
            Else
                Exit For
        End If
    Next i
    Close #1
    If (IsMissing(argFileNameToSave) = True) Then MsgBox "Program MCH file export OK."
    Export_to_Program_MCH_File = True
End If
':::::::::::::::::::::::::::::::::::::::::::::::::
Exit Function
':::::::::::::::::::::::::::::::::::::::::::::::::
HandleError1:
    Export_to_Program_MCH_File = False
    MsgBox "Error # " & Str(Err.Number) & " was generated by " & Err.Source & Chr(13) & Err.Description
    End
End Function

Attribute VB_Name = "Functions"
Option Explicit

Public Const Yes = -1
Public Const No = 0

Function DecToHex(ByVal argNumber As Double, ByVal argNumOfDigits As Integer) As String
Dim numberToConvert As Long
Dim hexStr, data1, data2 As String
numberToConvert = Fix(argNumber)
hexStr = Hex(numberToConvert)
hexStr = String(argNumOfDigits - Len(hexStr), "0") & hexStr
DecToHex = hexStr
End Function

Sub DecToHexTest()
Dim hexStr As String
hexStr = DecToHex(1, 4)
Stop
End Sub

Function HexToDec(ByVal argHex As String) As String
Dim Number As Long
Dim hexStr, data1, data2 As String
argHex = "&H" & argHex
Number = CDec(argHex)
hexStr = Hex(Number)    'Pro kontrolu
HexToDec = Number
End Function

Sub HexToDecTest()
Dim num As Long
num = HexToDec("028A")
Stop
End Sub

Function StrLen(ByVal argString As String) As Integer
StrLen = Len(argString)
End Function
':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
':::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Sub test()
':::::::::::::::::::::::::::::::::::::::::::::::::
Dim i As Integer
Dim formula, stringToFind, stringToReplace, cell, workSheetName As String
':::::::::::::::::::::::::::::::::::::::::::::::::
'workSheetName = "Message_table"
'stringToFind = "LEN"
'stringToReplace = "StrLen"
'cell = "D"
'For i = 11 To 58
'    formula = Worksheets(workSheetName).Range(cell & i).formula
'    formula = Replace(formula, stringToFind, stringToReplace)
'    Worksheets(workSheetName).Range(cell & i).formula = formula
'Next
':::::::::::::::::::::::::::::::::::::::::::::::::
workSheetName = "Program_table"
cell = "C"
For i = 18 To 697
    formula = Worksheets(workSheetName).Range(cell & i).formula
'    stringToFind = "DEZINHEX"
'    stringToReplace = "DecToHex"
    stringToFind = "HEXINDEZ"
    stringToReplace = "HexToDec"
    formula = Replace(formula, stringToFind, stringToReplace)
'    Stop
    Worksheets(workSheetName).Range(cell & i).formula = formula
Next
':::::::::::::::::::::::::::::::::::::::::::::::::
Stop
End Sub














Sub D2CZ_CZ2D()
Stop

Dim nms As Names
Dim wks As Worksheet
Dim r As Long
Dim formula As String

'Worksheets(1).Range("C20").
formula = Worksheets(1).Range("C20").formula
'Worksheets(1).Range("C5:C10").Cells(1, 1).formula = "=Rand()"

Stop

'Set nms = ActiveWorkbook.Names
'Set wks = Worksheets(1)
'For r = 1 To nms.Count
'    wks.Cells(StartRow - 1 + r, 8).Value = "'" & nms(r).Name
'    wks.Cells(StartRow - 1 + r, 9).Value = "'" & nms(r).RefersTo
'Next

'Worksheets("Sheet1").Activate
'Range(Cells(1, 1), Cells(5, 3)).Font.Italic = True
'
'Set r = Range("myRange")
'For n = 1 To r.Rows.Count
'    If r.Cells(n, 1) = r.Cells(n + 1, 1) Then
'        MsgBox "Duplicate data in " & r.Cells(n + 1, 1).Address
'    End If
'Next n
'
'Worksheets("Sheet1").Cells(5, 3).Font.Size = 14
'Worksheets("Sheet1").Cells(1).ClearContents
'With Worksheets("Sheet1").Cells.Font
'    .Name = "Arial"
'    .Size = 8
'End With

'Do While ActiveWorkbook.Names.Count > 0
'    ActiveWorkbook.Names(1).Delete
'Loop
'Dim wks As Worksheet
'Dim r As Long
'Dim Name As String
'Dim RefersTo As String
'
'Set wks = Worksheets(1)
'For r = StartRow To EndRow
'    Name = wks.Cells(r, 8).Value
'    RefersTo = wks.Cells(r, 9).Value
'    ActiveWorkbook.Names.Add Name:=Name, RefersTo:=RefersTo
'Next
'
'Dim RangeStrStartPos1, RangeStrStartPos2, RangeStrStopPos1, RangeStrStopPos2  As Long
'Dim RangeStr1, RangeStr2, SubRangeStr1, SubRangeStr2 As String
'Dim Value
'RangeStrStartPos1 = 2
'RangeStrStartPos2 = 2
'RangeStr1 = Names(Name1).RefersTo
'RangeStr2 = Names(Name2).RefersTo
'Do
'    RangeStrStopPos1 = InStr(RangeStrStartPos1, RangeStr1, ",")
'    RangeStrStopPos2 = InStr(RangeStrStartPos2, RangeStr2, ",")
'    If RangeStrStopPos1 = 0 Then RangeStrStopPos1 = Len(RangeStr1) + 1
'    If RangeStrStopPos2 = 0 Then RangeStrStopPos2 = Len(RangeStr2) + 1
'
'    SubRangeStr1 = Mid(RangeStr1, RangeStrStartPos1, RangeStrStopPos1 - RangeStrStartPos1)
'    SubRangeStr2 = Mid(RangeStr2, RangeStrStartPos2, RangeStrStopPos2 - RangeStrStartPos2)
'    RangeStrStartPos1 = RangeStrStopPos1 + 1
'    RangeStrStartPos2 = RangeStrStopPos2 + 1
'
'    If (WorksheetFunction.IsNumber(Range(SubRangeStr1).Value) And Range(SubRangeStr1).Value <= HighLimit And Range(SubRangeStr1).Value >= LowLimit) Then
'        If (WorksheetFunction.IsNumber(Range(SubRangeStr2).Value) And Range(SubRangeStr2).Value <= HighLimit And Range(SubRangeStr2).Value >= LowLimit) Then
'            If (Range(SubRangeStr1).Value = 1) And (Range(SubRangeStr2).Value = 0) Then
'                Range(SubRangeStr1).Activate
'                If MsgBox("If the value of the cell """ + SubRangeStr2 + """ is 0, the value of the cell """ + SubRangeStr1 + """ must be 0 as well.", _
'                            vbOKCancel) = vbCancel Then End
'            End If
'        End If
'    End If
'
'Loop While (RangeStrStopPos1 < Len(RangeStr1)) Or (RangeStrStopPos2 < Len(RangeStr2))

End Sub
Attribute VB_Name = "List1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Zavola se, kdyz se cokoliv zmeni na listu

Private Sub Workbook_Open()

    ' Inicializace modu
    If Worksheets(1).Range(CELL4STORE).Value = 1 Then
        Worksheets(1).Shapes("button_4").OLEFormat.Object.Caption = "switch to Total Time Mode"
        isTotalTimeMode = False
        Worksheets(1).Range("N:P").Columns.Hidden = False
        Worksheets(1).Range("M").Columns.Hidden = True
    Else
        Worksheets(1).Shapes("button_4").OLEFormat.Object.Caption = "switch to Repeat Mode"
        Worksheets(1).Range("N:P").Columns.Hidden = False
        Worksheets(1).Range("M").Columns.Hidden = True
        isTotalTimeMode = True
    End If

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

    Call Program_Check.ChangeCell(Target)
    
End Sub

Attribute VB_Name = "List2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "List3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Manage_Excel_Names"
Option Private Module
Option Explicit
Const StartRow = 800        'Start row of Excel sheet to write / read names
Const EndRow = 853          'Last row  of Excel sheet to reas names

Sub Read_Names_To_Excel_Sheet()
    Dim nms As Names
    Dim wks As Worksheet
    Dim r As Long
    
    Set nms = ActiveWorkbook.Names
    Set wks = Worksheets(1)
    For r = 1 To nms.Count
        wks.Cells(StartRow - 1 + r, 8).Value = "'" & nms(r).name
        wks.Cells(StartRow - 1 + r, 9).Value = "'" & nms(r).RefersTo
    Next
End Sub

Sub Delete_All_Names()
    Do While ActiveWorkbook.Names.Count > 0
        ActiveWorkbook.Names(1).Delete
    Loop
End Sub

Sub Add_Names_From_Excel_Sheet()
    Dim wks As Worksheet
    Dim r As Long
    Dim name As String
    Dim RefersTo As String
    
    Set wks = Worksheets(1)
    
    For r = StartRow To EndRow
        name = wks.Cells(r, 8).Value
        RefersTo = wks.Cells(r, 9).Value
        ActiveWorkbook.Names.Add name:=name, RefersTo:=RefersTo
    Next
End Sub


Attribute VB_Name = "Program_Check"
' ====================================================================
' ====================================================================
' Program Check konzisteci for Bonnel BonBlock compact programer maker
' Vytvoril 08/2012 for Bonnel Technologie
' Lukas ZDENEK
' ====================================================================
' ====================================================================

Option Private Module
Option Explicit

' Definice polozek v nabidce vazany do jednotlivych sloupcu
' Pro lepsi prehlednost kodu a orientaci
Const RELAY_H = "G"
Const RELAY_M = "H"
Const RELAY_S = "I"

Const PAUSE_S = "L"
Const PAUSE_M = "K"
Const PAUSE_H = "J"

Const REPEAT = "M"

Const TOTAL_TIME_S = "P"
Const TOTAL_TIME_M = "O"
Const TOTAL_TIME_H = "N"

Const DIG_IN_1_JUMP = "Q"
Const DIG_IN_1_CHECK = "R"
Const DIG_IN_2_JUMP = "S"
Const DIG_IN_2_CHECK = "T"
Const DIG_IN_3_JUMP = "U"
Const DIG_IN_3_CHECK = "V"

Const VALVE_1 = "X"
Const VALVE_2 = "Y"
Const VALVE_3 = "Z"
Const VALVE_4 = "AA"

Const COMPRESOR = "AB"
Const RELAY_OUT_2 = "AC"
Const RELAY_OUT_3 = "AD"
Const RELAY_OUT_5 = "AF"

Const COUNTER = "AJ"

Const ADDR_NEXT = "AK"
Const ADDR_DIG_IN = "AL"
Const ADDR_COUNTER = "AM"
Const ADDR_LEVEL = "AN"

Const LEVEL_CALIB = "AQ"
Const EVAL_LEVEL = "AR"

Const BIO_BUILD_UP = "BA"

Const RESET_COUNTER = "BI"



Const BIO_BUILD_UP_VALUE = "G989"

Const COUNTER_1_VALUE = "G978"
Const COUNTER_2_VALUE = "G979"
Const COUNTER_3_VALUE = "G980"
Const COUNTER_4_VALUE = "G981"


Const MSG_EVAL = "Step time has to be longer then 22 sec!"
Const MSG_TIME = "Step need Time!"
Const MSG_VALVE = "This step must have at least one open valve!"
Const MSG_COMPRESOR = "Activate the compressor!"
Const MSG_ADDCOUNTER = "You must enter the adress of counter!"
Const MSG_VALUE_OF_COUNTER = "You must enter the limit value of the counter!"
Const MSG_BIO_BUILD_UP_VALUE = "You must enter the days for bio build up mode!"
Const MSG_COUNTER_NEED_SET = "Counter must be set!"
Const MSG_TOTAL_TIME = "Total time must be higher as Relay_On_Time + Pause!"
Const MSG_DIGADDRES = "You must enter the addres for jump!"

Dim waitingMode As Boolean
Dim cell4Repair As Variant
Dim checkedSteps As Integer
Dim isChecked As Boolean            ' pomocna promenna pro zobrazeni dialogu ukonceni



'Zvyrazneni.... ale neni to moc dobre. :|
Sub Highlight()

    With ActiveCell
         
        .Font.ColorIndex = 11
        .Interior.ColorIndex = 34
        .Font.Bold = True
         
    End With
     
End Sub



Sub CheckEvaluation(index As String)

    Dim strTmpA, strTmpB, strTmpC, strTmpD, strTmpE, strTmpF As String        ' temporerni strings pro urceni policka
    Dim strTmpG, strTmpH, strTmpI As String                                   ' temporerni strings pro urceni policka
    Dim tmpTime, tmpTotalTime As Long                                         ' zda si ukladam cas jednoho cyklu
    Dim iRet As Integer                                                       ' navratova hodnota msg boxu
    
    Dim needDigAddr As Boolean                                                ' tmp variable pro potrebu dig. adresy
    
    Dim stepIsEnabled As Boolean
    
    
    stepIsEnabled = False
    needDigAddr = False
    
    
    '----------------------------------------------------------
    ' Total Time mode
    If isTotalTimeMode = 1 Then
    
        strTmpA = RELAY_H + index
        strTmpA = Replace(strTmpA, " ", "")
        strTmpB = RELAY_M + index
        strTmpB = Replace(strTmpB, " ", "")
        strTmpC = RELAY_S + index
        strTmpC = Replace(strTmpC, " ", "")
        
        tmpTime = Range(strTmpA).Value * 3600 + Range(strTmpB).Value * 60 + Range(strTmpC).Value
        
        strTmpD = PAUSE_H + index
        strTmpD = Replace(strTmpD, " ", "")
        strTmpE = PAUSE_M + index
        strTmpE = Replace(strTmpE, " ", "")
        strTmpF = PAUSE_S + index
        strTmpF = Replace(strTmpF, " ", "")
        
        tmpTime = tmpTime + Range(strTmpD).Value * 3600 + Range(strTmpE).Value * 60 + Range(strTmpF).Value
        
        strTmpG = TOTAL_TIME_H + index
        strTmpG = Replace(strTmpG, " ", "")
        strTmpH = TOTAL_TIME_M + index
        strTmpH = Replace(strTmpH, " ", "")
        strTmpI = TOTAL_TIME_S + index
        strTmpI = Replace(strTmpI, " ", "")
        
        tmpTotalTime = Range(strTmpG).Value * 3600 + Range(strTmpH).Value * 60 + Range(strTmpI).Value
        
        If tmpTotalTime < tmpTime Then
        
            Range(strTmpB).Select
               
                 iRet = MsgBox(MSG_TOTAL_TIME, vbYesNo + vbExclamation, "TIMER FAILURE")
                 
                 ' uzivatel si vybral, ze zmeni polozku
                 If iRet = vbYes Then
                 
                     waitingMode = True
                     cell4Repair = Empty
                     cell4Repair = Array(strTmpA, strTmpB, strTmpC, strTmpD, strTmpE, strTmpF, strTmpG, strTmpH, strTmpI)
                     
                     Exit Sub
        
                 End If
                 
        End If
    
    End If
    
    '----------------------------------------------------------
    
    ' Je v kroku spusteno mereni hladiny? Poukud ano, podivej se na ostatni parametry
    strTmpA = EVAL_LEVEL + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value <> 0 Then
    
        stepIsEnabled = True
        
        ' Ceknu jestli je zapnuty krok
        strTmpB = RELAY_H + index
        strTmpB = Replace(strTmpB, " ", "")
        
        If Range(strTmpB).Value <= 0 Then
        
            strTmpC = RELAY_M + index
            strTmpC = Replace(strTmpC, " ", "")
          
            
            If Range(strTmpC).Value <= 0 Then
            
                strTmpD = RELAY_S + index
                strTmpD = Replace(strTmpD, " ", "")
            
                'If Range(strTmpD).Value <= 0 Then
                '    stepIsEnabled = False
                'End If
            
                If Range(strTmpD).Value < 23 Then   ' podminka minimalni doby trvani kroku pro mereni hladiny
                
                    Range(strTmpD).Select
                    'Call Highlight
                    
                    iRet = MsgBox(MSG_EVAL, vbYesNo + vbExclamation, "EVALUATION IS ENABLED")
                    
                    ' uzivatel si vybral, ze zmeni polozku
                    If iRet = vbYes Then
                    
                        waitingMode = True
                        cell4Repair = Empty
                        cell4Repair = Array(strTmpB, strTmpC, strTmpD)
                        
                        Exit Sub

                    End If
                    
                End If
            
            End If
        
        End If
        
        ' Ceknu jestil je pusteny alespon jeden ventil
        strTmpB = VALVE_1 + index
        strTmpB = Replace(strTmpB, " ", "")
        
        If Range(strTmpB).Value <> 1 Then
        
            strTmpC = VALVE_2 + index
            strTmpC = Replace(strTmpC, " ", "")
            If Range(strTmpC).Value <> 1 Then
            
                strTmpD = VALVE_3 + index
                strTmpD = Replace(strTmpD, " ", "")
                If Range(strTmpD).Value <> 1 Then
                
                    strTmpE = VALVE_4 + index
                    strTmpE = Replace(strTmpE, " ", "")
                    If Range(strTmpE).Value <> 1 Then
                    
                        Range(strTmpB).Select
                        iRet = MsgBox(MSG_VALVE, vbYesNo + vbExclamation, "EVALUATION IS ENABLED")
                        
                        ' uzivatel si vybral, ze zmeni polozku
                        If iRet = vbYes Then
                        
                            waitingMode = True
                            cell4Repair = Empty
                            cell4Repair = Array(strTmpB, strTmpC, strTmpD, strTmpE)
                            
                            Exit Sub
    
                        End If
                        
                    End If
                End If
            End If
        End If
        
       ' Ceknu jestli je pusteny kompresor
        strTmpB = COMPRESOR + index
        strTmpB = Replace(strTmpB, " ", "")
        If Range(strTmpB).Value <> 1 Then
        
            Range(strTmpB).Select
             iRet = MsgBox(MSG_COMPRESOR, vbYesNo + vbExclamation, "EVALUATION IS ENABLED")
             
             ' uzivatel si vybral, ze zmeni polozku
             If iRet = vbYes Then
             
                 waitingMode = True
                 cell4Repair = Empty
                 cell4Repair = Array(strTmpB)
                 
                 Exit Sub
    
             End If
             
        End If
        
    End If         'END IF LEVEL EVALUATION
    '----------------------------------------------------------
    
    ' Je v kroku spustena kalibrace? Poukud ano, podivej se na ostatni parametry
    strTmpA = LEVEL_CALIB + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value <> 0 Then
    
        stepIsEnabled = True
        
        ' Ceknu jestli je zapnuty krok
        strTmpB = RELAY_H + index
        strTmpB = Replace(strTmpB, " ", "")
        
        If Range(strTmpB).Value <= 0 Then
        
            strTmpC = RELAY_M + index
            strTmpC = Replace(strTmpC, " ", "")
          
            
            If Range(strTmpC).Value <= 0 Then
            
                strTmpD = RELAY_S + index
                strTmpD = Replace(strTmpD, " ", "")
            
                If Range(strTmpD).Value < 1 Then
                
                    Range(strTmpD).Select
                    'Call Highlight
                    
                    iRet = MsgBox(MSG_TIME, vbYesNo + vbExclamation, "CALIBRATION IS ENABLED")
                    
                    ' uzivatel si vybral, ze zmeni polozku
                    If iRet = vbYes Then
                    
                        waitingMode = True
                        cell4Repair = Empty
                        cell4Repair = Array(strTmpB, strTmpC, strTmpD)
                        
                        Exit Sub

                    End If
                    
                End If
            
            End If
        
        End If
        
        ' Ceknu jestil je pusteny alespon jeden ventil
        strTmpB = VALVE_1 + index
        strTmpB = Replace(strTmpB, " ", "")
        
        If Range(strTmpB).Value <> 1 Then
        
            strTmpC = VALVE_2 + index
            strTmpC = Replace(strTmpC, " ", "")
            If Range(strTmpC).Value <> 1 Then
            
                strTmpD = VALVE_3 + index
                strTmpD = Replace(strTmpD, " ", "")
                If Range(strTmpD).Value <> 1 Then
                
                    strTmpE = VALVE_4 + index
                    strTmpE = Replace(strTmpE, " ", "")
                    If Range(strTmpE).Value <> 1 Then
                    
                        Range(strTmpB).Select
                        iRet = MsgBox(MSG_VALVE, vbYesNo + vbExclamation, "CALIBRATION IS ENABLED")
                        
                        ' uzivatel si vybral, ze zmeni polozku
                        If iRet = vbYes Then
                        
                            waitingMode = True
                            cell4Repair = Empty
                            cell4Repair = Array(strTmpB, strTmpC, strTmpD, strTmpE)
                            
                            Exit Sub
    
                        End If
                        
                    End If
                End If
            End If
        End If
        
       ' Ceknu jestli je pusteny kompresor
        strTmpB = COMPRESOR + index
        strTmpB = Replace(strTmpB, " ", "")
        If Range(strTmpB).Value <> 1 Then
        
            Range(strTmpB).Select
             iRet = MsgBox(MSG_COMPRESOR, vbYesNo + vbExclamation, "CALIBRATION IS ENABLED")
             
             ' uzivatel si vybral, ze zmeni polozku
             If iRet = vbYes Then
             
                 waitingMode = True
                 cell4Repair = Empty
                 cell4Repair = Array(strTmpB)
                 
                 Exit Sub
    
             End If
             
        End If
        
    End If         'END IF LEVEL CALIBRATION
    
    '----------------------------------------------------------
    
    ' Pokud je zapnut reset counteru, musi byt counter nastaven
    Dim counterNeedSet As Boolean
    counterNeedSet = False
            
    strTmpA = RESET_COUNTER + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value = 1 Then
    
        stepIsEnabled = True
        counterNeedSet = True
    
    End If

    '----------------------------------------------------------
    
    ' Je urcen jeden z counteru? Pokud ano, tak musi byt urcena adresa skoku
    strTmpA = COUNTER + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value <> 0 Then
    
        stepIsEnabled = True
            
        strTmpB = ADDR_COUNTER + index
        strTmpB = Replace(strTmpB, " ", "")
        If Range(strTmpB).Value = 0 Then
        
            Range(strTmpB).Select
            iRet = MsgBox(MSG_ADDCOUNTER, vbYesNo + vbExclamation, "COUNTER IS ENABLED")
            
            ' uzivatel si vybral, ze zmeni polozku
            If iRet = vbYes Then
            
                waitingMode = True
                cell4Repair = Empty
                cell4Repair = Array(strTmpB)
                
                Exit Sub
                
            End If
                        
        End If
       
        ' Zkontroluji, jestli je nastavena hodnota v danem kroku ... konstanty pod programem. ;)
        strTmpC = Switch(Range(strTmpA).Value = 1, COUNTER_1_VALUE, _
                    Range(strTmpA).Value = 2, COUNTER_2_VALUE, _
                    Range(strTmpA).Value = 3, COUNTER_2_VALUE, _
                    Range(strTmpA).Value = 4, COUNTER_2_VALUE)
                    
        If Range(strTmpC).Value <= 0 Then
        
            Range(strTmpC).Select
            iRet = MsgBox(MSG_VALUE_OF_COUNTER, vbYesNo + vbExclamation, "COUNTER IS ENABLED")
        
            ' uzivatel si vybral, ze zmeni polozku
            If iRet = vbYes Then
        
                waitingMode = True
                cell4Repair = Empty
                cell4Repair = Array(strTmpC)
                
                Exit Sub
                
            End If
            
        End If
        
    Else    ' Counter neni nastaven
    
        If counterNeedSet Then          ' counter musi byt nastaven
        
            Range(strTmpA).Select
            iRet = MsgBox(MSG_COUNTER_NEED_SET, vbYesNo + vbExclamation, "RESTART OF COUNTER IS SET")
        
            ' uzivatel si vybral, ze zmeni polozku
            If iRet = vbYes Then
        
                waitingMode = True
                cell4Repair = Empty
                cell4Repair = Array(strTmpA)
                
                Exit Sub
                
            End If
            
        End If
    
    End If
    
    '----------------------------------------------------------
    
    ' Pokud je urcen bioBuild Up, tak by mel byt definovat v konstantach. Slouzi k rustu bakterii, pri prvotni fazy spousteni. Neodsava sev prvotni fazy kal X dni.
    strTmpA = BIO_BUILD_UP + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value = 1 Then
        If Range(BIO_BUILD_UP_VALUE) <= 0 Then
        
            Range(BIO_BUILD_UP_VALUE).Select
            iRet = MsgBox(MSG_BIO_BUILD_UP_VALUE, vbYesNo + vbExclamation, "BIO-BUILD-UP IS ENABLED")
        
            ' uzivatel si vybral, ze zmeni polozku
            If iRet = vbYes Then
        
                waitingMode = True
                cell4Repair = Empty
                cell4Repair = Array(BIO_BUILD_UP_VALUE)
                
                Exit Sub
                
            End If
            
        End If
    End If          ' END IF FOR BIO BUILD UP
    
    '----------------------------------------------------------
    
    ' Zjistuji, zdali je aktivovany libovolny dig. vstup a nasledne zdali je vyplnena adersa pro skok
    strTmpA = DIG_IN_1_CHECK + index
    strTmpA = Replace(strTmpA, " ", "")
    
    If Range(strTmpA).Value = 1 Then
        needDigAddr = True
    Else
        
        strTmpA = DIG_IN_2_CHECK + index
        strTmpA = Replace(strTmpA, " ", "")
        If Range(strTmpA).Value = 1 Then
            needDigAddr = True
        Else

            strTmpA = DIG_IN_3_CHECK + index
            strTmpA = Replace(strTmpA, " ", "")
            If Range(strTmpA).Value = 1 Then
                needDigAddr = True
            End If
            
        End If
    End If
    
    
    If needDigAddr Then
        strTmpB = ADDR_DIG_IN + index
        strTmpB = Replace(strTmpB, " ", "")
        
        If Range(strTmpB).Value = 0 Then
            Range(strTmpB).Select
            iRet = MsgBox(MSG_DIGADDRES, vbYesNo + vbExclamation, "DIG. JUMP IS ENABLED")
            
            ' uzivatel si vybral, ze zmeni polozku
            If iRet = vbYes Then
            
                waitingMode = True
                cell4Repair = Empty
                cell4Repair = Array(strTmpB, strTmpC, strTmpD, strTmpE)
                
                Exit Sub

            End If
        End If
        
    End If      ' END FOR DIGITAL INPUT .. JUMP
        
    '----------------------------------------------------------
    
    
    If isChecked Then
        MsgBox (" PROGRAM IS CHECKED ")
    End If
    
    
End Sub
' Hlavni sub rutina pro kontrolu jednotlivych kroku. Tady je vicemene prochazim jeden po druhe. Offset je 22 radek. Mezi stepy je 32 radku volnych. Kroku je 30!
Sub ProgramCheck()

     'Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Enable Syntax Check"
     
     Dim strTmp As String
     Dim index As Integer
     Dim i
    
     waitingMode = False
     isChecked = False
     
     For i = (checkedSteps + 1) To 30 Step 1
     
        If Not waitingMode Then
                        
            index = (i - 1) * 32 + 22
            strTmp = "G" & Str(index)                       ' vznikne mezera mezi stringem a cislem. Proc, nezjistil jsem
            strTmp = Replace(strTmp, " ", "")               ' odstranuje mezery
       
            CheckEvaluation (Str(index))
        
            checkedSteps = i - 1
            
        End If
        
        
     Next i
     
     isChecked = True
     
     If Not waitingMode Then
        MsgBox (" PROGRAM IS CHECKED ")
     End If
        
     
End Sub



' Tahle fce se zavola ze souboru ProgramTable pres Event pro zmenu cells a zjisti, zdali uzivatel zeditoval spravnou kolonku
' Pokud jo, tak spusti kontrolu aktualniho kroku. Tj, prekontroluje hodnoty

Sub ChangeCell(ByVal Target As Range)
    
    If waitingMode Then
    
        Dim tmpAddr As String
        Dim tmpRepair As Variant
        Dim tmp As Boolean
        
        tmp = False
        tmpAddr = Replace(Target.Address, "$", "")

        For Each tmpRepair In cell4Repair
            If tmpAddr = tmpRepair Then
                tmp = True
                Exit For
            End If
        Next
        
        If tmp Then Call ProgramCheck               ' pokud uzivatel upravil spravnou kolonku, tak pokracuji ... pokud ne, tak neresim
        
    End If
    
End Sub


' Zahajeni kontroly konzistence programu. Aktivace skrze tlacitko -> Toto je event On Button Click
Sub button_3_Activate()

    Application.EnableEvents = True
    checkedSteps = 0
    waitingMode = False
    cell4Repair = Empty
        
    Call ProgramCheck
        
End Sub

Attribute VB_Name = "Syntax_Check"
Option Private Module
Option Explicit

Const Time_H = "Time_H"
Const Time_M = "Time_M"
Const Time_S = "Time_S"
Const PAUSE_H = "Pause_H"
Const PAUSE_M = "Pause_M"
Const PAUSE_S = "Pause_S"
Const TotalTime_H = "TotalTime_H"
Const TotalTime_M = "TotalTime_M"
Const TotalTime_S = "TotalTime_S"
Const Repeats = "Repeats"
Const Bin_Buzzer = "Bin_Buzzer"
Const Bin01 = "Bin01"
Const Bin02 = "Bin02"
Const Bin03 = "Bin03"
Const Bin04 = "Bin04"
Const Bin05 = "Bin05"
Const Bin06 = "Bin06"
Const Bin07 = "Bin07"
Const Bin08 = "Bin08"
Const Bin09 = "Bin09"
Const Bin10 = "Bin10"
Const Bin11 = "Bin11"
Const Bin12 = "Bin12"
Const Bin13 = "Bin13"
Const Bin14 = "Bin14"
Const Bin15 = "Bin15"
Const Bin16 = "Bin16"
Const Bin17 = "Bin17"
Const Bin18 = "Bin18"
Const Bin19 = "Bin19"
Const Bin20 = "Bin20"
Const COUNTER = "Counter"
Const AddrNext = "AddrNext"
Const AddrDigIn = "AddrDigIn"
Const AddrCounter = "AddrCounter"
Const AddrLevel = "AddrLevel"
Const ChTimeEn = "ChTimeEn"
Const ChTimeNr = "ChTimeNr"
Const LevelCalibr = "LevelCalibr"
Const LevelEval = "LevelEval"
Const UserAlarms = "UserAlarms"
Const CompDelay = "CompDelay"

Const CntStartValue = "CntStartValue"
Const CompressorTime = "CompressorTime"
Const ServiceAlarmTime = "ServiceAlarmTime"
Const ServiceAlarmSuppress = "ServiceAlarmSuppress"

Const ProgramVersionMaj = "ProgramVersionMaj"
Const ProgramVersionMin = "ProgramVersionMin"
Const OverfillAlarmEn = "OverfillAlarmEn"
Const OverfillAlarmValue = "OverfillAlarmValue"
Const CurrentStepEn = "CurrentStepEn"
Const BiologyTime = "BiologyTime"
Const NominalVersion = "NominalVersion"
Const AutoCalActiv = "AutoCalActiv"
Const AutoCalValve = "AutoCalValve"
Const AutoCalValue = "AutoCalValue"
Const AutoCalOffset = "AutoCalOffset"
Const Password = "Password"
Const PressMax = "PressMax"
Const PressMin = "PressMin"
Const PressHigh = "PressHigh"
Const PressLow = "PressLow"
Const PressNominal = "PressNominal"
Const CurrentMax = "CurrentMax"
Const CurrentMin = "CurrentMin"
Const Baterie = "Baterie"
Const RelayAlarm = "RelayAlarm"
Const Serial2 = "Serial2"
Const Serial6 = "Serial6"

Private Sub CheckCellsNumber(name As String, LowLimit As Long, HighLimit As Double)

    Dim RangeStrStartPos, RangeStrStopPos  As Long
    Dim RangeStr, SubRangeStr As String
    Dim Value
    RangeStrStartPos = 2
    RangeStr = Names(name).RefersTo
    
    Debug.Print RangeStr
    
    Do
        RangeStrStopPos = InStr(RangeStrStartPos, RangeStr, ",")
        If RangeStrStopPos = 0 Then RangeStrStopPos = Len(RangeStr) + 1
        SubRangeStr = Mid(RangeStr, RangeStrStartPos, RangeStrStopPos - RangeStrStartPos)
        RangeStrStartPos = RangeStrStopPos + 1
        
        If Not WorksheetFunction.IsNumber(Range(SubRangeStr).Value) Then
            Range(SubRangeStr).Activate
            If MsgBox("Cell """ + SubRangeStr + """ must be a number.", vbOKCancel) = vbCancel Then End
        ElseIf Range(SubRangeStr).Value > HighLimit Then
            Range(SubRangeStr).Activate
            If MsgBox("Value of the cell """ + SubRangeStr + """ must be <=" + Str(HighLimit) + ".", vbOKCancel) = vbCancel Then End
        ElseIf Range(SubRangeStr).Value < LowLimit Then
            Range(SubRangeStr).Activate
            If MsgBox("Value of the cell """ + SubRangeStr + """ must be >=" + Str(LowLimit) + ".", vbOKCancel) = vbCancel Then End
        End If

    Loop While RangeStrStopPos < Len(RangeStr)
    
End Sub

Private Sub CheckCellsSetCounter(Name1 As String, Name2 As String, LowLimit As Long, HighLimit As Long)
    Dim RangeStrStartPos1, RangeStrStartPos2, RangeStrStopPos1, RangeStrStopPos2  As Long
    Dim RangeStr1, RangeStr2, SubRangeStr1, SubRangeStr2 As String
    Dim Value
    RangeStrStartPos1 = 2
    RangeStrStartPos2 = 2
    RangeStr1 = Names(Name1).RefersTo
    RangeStr2 = Names(Name2).RefersTo
    Do
        RangeStrStopPos1 = InStr(RangeStrStartPos1, RangeStr1, ",")
        RangeStrStopPos2 = InStr(RangeStrStartPos2, RangeStr2, ",")
        If RangeStrStopPos1 = 0 Then RangeStrStopPos1 = Len(RangeStr1) + 1
        If RangeStrStopPos2 = 0 Then RangeStrStopPos2 = Len(RangeStr2) + 1
        
        SubRangeStr1 = Mid(RangeStr1, RangeStrStartPos1, RangeStrStopPos1 - RangeStrStartPos1)
        SubRangeStr2 = Mid(RangeStr2, RangeStrStartPos2, RangeStrStopPos2 - RangeStrStartPos2)
        RangeStrStartPos1 = RangeStrStopPos1 + 1
        RangeStrStartPos2 = RangeStrStopPos2 + 1
        
        If (WorksheetFunction.IsNumber(Range(SubRangeStr1).Value) And Range(SubRangeStr1).Value <= HighLimit And Range(SubRangeStr1).Value >= LowLimit) Then
            If (WorksheetFunction.IsNumber(Range(SubRangeStr2).Value) And Range(SubRangeStr2).Value <= HighLimit And Range(SubRangeStr2).Value >= LowLimit) Then
                If (Range(SubRangeStr1).Value = 1) And (Range(SubRangeStr2).Value = 0) Then
                    Range(SubRangeStr1).Activate
                    If MsgBox("If the value of the cell """ + SubRangeStr2 + """ is 0, the value of the cell """ + SubRangeStr1 + """ must be 0 as well.", _
                                vbOKCancel) = vbCancel Then End
                End If
            End If
        End If

    Loop While (RangeStrStopPos1 < Len(RangeStr1)) Or (RangeStrStopPos2 < Len(RangeStr2))
End Sub

Private Sub CheckCellValue(name As String, LowLimit As Long, HighLimit As Double, DefaultValue As Long)
    Call CheckCellsNumber(name, LowLimit, HighLimit)
    If Range(name).Value <> DefaultValue Then
        Range(name).Activate
        If MsgBox("Default value should be " + Str(DefaultValue) + ". Cell: " + Mid(Names(name).RefersTo, 2) + ".", vbOKCancel) = vbCancel Then End
    End If
End Sub

Private Sub CheckLimitedValues(Name1 As String, Name2 As String, LowLimit As Long, HighLimit As Double)
    Call CheckCellsNumber(Name1, LowLimit, HighLimit)
    Call CheckCellsNumber(Name2, LowLimit, HighLimit)
    If Range(Name1).Value <> Range(Name2).Value Then
        Range(Name1, Name2).Activate
        If MsgBox("Values actual count and limit should be the same. Cells: " + Mid(Names(Name1).RefersTo, 2) + "; " + _
                    Mid(Names(Name2).RefersTo, 2), vbOKCancel) = vbCancel Then End
    End If
End Sub

Private Function ArrayToString(InArray As Variant) As String
    Dim Item As Variant
    Dim ItemStr As String
        
    For Each Item In InArray
        ItemStr = Item
        ArrayToString = ArrayToString + ItemStr + ", "
    Next
    ArrayToString = Mid(ArrayToString, 1, Len(ArrayToString) - 2)
End Function

Private Sub CheckTimeValues(name As String, LowLimit As Long, HighLimit As Long)
    Dim RangeStrStartPos, RangeStrStopPos, i As Long
    Dim RangeStr, SubRangeStr, TimeSubRangeStr As String
    Dim TimeValueSec As Variant
    Dim TimeToSecArray As Variant
    Dim ErrorDetected As Boolean
    
    TimeToSecArray = Array(3600, 60, 1)
    RangeStrStartPos = 2
    RangeStr = Names(name).RefersTo
'    Debug.Print RangeStr
'    Stop
    Do
        TimeValueSec = 0
        TimeSubRangeStr = ""
        ErrorDetected = False
        
        For i = 0 To 2
            RangeStrStopPos = InStr(RangeStrStartPos, RangeStr, ",")
            If RangeStrStopPos = 0 Then RangeStrStopPos = Len(RangeStr) + 1
            SubRangeStr = Mid(RangeStr, RangeStrStartPos, RangeStrStopPos - RangeStrStartPos)
            
            If Not WorksheetFunction.IsNumber(Range(SubRangeStr).Value) Then
                ErrorDetected = True
                Range(SubRangeStr).Activate
                If MsgBox("Cell """ + SubRangeStr + """ must be a number.", vbOKCancel) = vbCancel Then End
            ElseIf (Range(SubRangeStr).Value > 59) And (i > 0) Then
                ErrorDetected = True
                Range(SubRangeStr).Activate
                If MsgBox("Value of the cell """ + SubRangeStr + """ must be <=59" + ".", vbOKCancel) = vbCancel Then End
            ElseIf (Range(SubRangeStr).Value < 0) And (i > 0) Then
                ErrorDetected = True
                Range(SubRangeStr).Activate
                If MsgBox("Value of the cell """ + SubRangeStr + """ must be >=0" + ".", vbOKCancel) = vbCancel Then End
            End If
            
            TimeSubRangeStr = TimeSubRangeStr + SubRangeStr
            If i < 2 Then TimeSubRangeStr = TimeSubRangeStr + ":"
            RangeStrStartPos = RangeStrStopPos + 1
            If Not ErrorDetected Then TimeValueSec = TimeValueSec + Range(SubRangeStr).Value * TimeToSecArray(i)
        Next i
        
        If Not ErrorDetected Then
            If TimeValueSec > HighLimit Then
                Range(TimeSubRangeStr).Activate
                If MsgBox("Time value """ + TimeSubRangeStr + """ must be <=" + Format(DateAdd("s", HighLimit, "00:00:00"), "HH:mm:ss") + ".", vbOKCancel) = vbCancel Then End
            ElseIf TimeValueSec < LowLimit Then
                Range(TimeSubRangeStr).Activate
                If MsgBox("Time value """ + TimeSubRangeStr + """ must be >=" + Format(DateAdd("s", LowLimit, "00:00:00"), "HH:mm:ss") + ".", vbOKCancel) = vbCancel Then End
            End If
        End If

    Loop While RangeStrStopPos < Len(RangeStr)
End Sub


Sub SyntaxCheck()
    
    If Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption <> "Disable Syntax Check" Then Exit Sub
    Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Enable Syntax Check"
    Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Disable Syntax Check"

    
    Call CheckCellsNumber(Time_H, 0, 18)
    Call CheckCellsNumber(Time_M, 0, 59)
    Call CheckCellsNumber(Time_S, 0, 59)
    Call CheckCellsNumber(PAUSE_H, 0, 18)
    Call CheckCellsNumber(PAUSE_M, 0, 59)
    Call CheckCellsNumber(PAUSE_S, 0, 59)
    Call CheckCellsNumber(TotalTime_H, 0, 18)
    Call CheckCellsNumber(TotalTime_M, 0, 59)
    Call CheckCellsNumber(TotalTime_S, 0, 59)
    Call CheckCellsNumber(Repeats, 0, 999)
    Call CheckCellsNumber(Bin_Buzzer, 0, 1)
    Call CheckCellsNumber(Bin01, 0, 1)
    Call CheckCellsNumber(Bin02, 0, 1)
    Call CheckCellsNumber(Bin03, 0, 1)
    Call CheckCellsNumber(Bin04, 0, 1)
    Call CheckCellsNumber(Bin05, 0, 1)
    Call CheckCellsNumber(Bin06, 0, 1)
    Call CheckCellsNumber(Bin07, 0, 1)
    Call CheckCellsNumber(Bin08, 0, 1)
    Call CheckCellsNumber(Bin09, 0, 1)
    Call CheckCellsNumber(Bin10, 0, 1)
    Call CheckCellsNumber(Bin11, 0, 1)
    Call CheckCellsNumber(Bin12, 0, 1)
    Call CheckCellsNumber(Bin13, 0, 1)
    Call CheckCellsNumber(Bin14, 0, 1)
    Call CheckCellsNumber(Bin15, 0, 1)
    Call CheckCellsNumber(Bin16, 0, 1)
    Call CheckCellsNumber(Bin17, 0, 1)
    Call CheckCellsNumber(Bin18, 0, 1)
    Call CheckCellsNumber(Bin19, 0, 1)
    Call CheckCellsNumber(Bin20, 0, 1)
    Call CheckCellsNumber(COUNTER, 0, 4)
    Call CheckCellsNumber(AddrNext, 0, 30)
    Call CheckCellsNumber(AddrDigIn, 0, 30)
    Call CheckCellsNumber(AddrCounter, 0, 30)
    Call CheckCellsNumber(AddrLevel, 0, 30)
    Call CheckCellsNumber(ChTimeEn, 0, 30)
    Call CheckCellsNumber(ChTimeNr, 0, 30)
    Call CheckCellsNumber(LevelCalibr, 0, 2)
    Call CheckCellsNumber(LevelEval, 0, 2)
    Call CheckCellsNumber(UserAlarms, 0, 8)
    Call CheckCellsNumber(CompDelay, 0, 15)
    
    Call CheckCellsNumber(CntStartValue, 0, 255)
    Call CheckCellsNumber(CompressorTime, 0, 65535)
    Call CheckCellsNumber(ServiceAlarmTime, 0, 65535)
    Call CheckCellsNumber(ProgramVersionMaj, 0, 99)
    Call CheckCellsNumber(ProgramVersionMin, 0, 99)
    Call CheckCellsNumber(OverfillAlarmEn, 0, 1)
    Call CheckCellsNumber(OverfillAlarmValue, 0, 127)
    Call CheckCellsNumber(CurrentStepEn, 0, 1)
    Call CheckCellsNumber(BiologyTime, 0, 999)
    Call CheckCellsNumber(NominalVersion, 1, 2)
    Call CheckCellsNumber(AutoCalActiv, 0, 1)
 
    Call CheckCellsNumber(AutoCalValve, 0, 4)
    Call CheckCellsNumber(AutoCalValue, 0, 100)
    Call CheckCellsNumber(AutoCalOffset, 0, 400)
    Call CheckCellsNumber(Password, 0, 9998)
    Call CheckCellsNumber(PressMax, 0, 400)
    Call CheckCellsNumber(PressMin, 0, 400)
    Call CheckCellsNumber(PressHigh, 0, 400)
 
    Call CheckCellsNumber(PressLow, 0, 400)
    Call CheckCellsNumber(PressNominal, 0, 400)
    Call CheckCellsNumber(CurrentMax, 0, 999)
    Call CheckCellsNumber(CurrentMin, 0, 999)
    Call CheckCellsNumber(Baterie, 0, 1)
    Call CheckCellsNumber(RelayAlarm, 0, 5)
    Call CheckCellsNumber(Serial2, 0, 99)
    Call CheckCellsNumber(Serial6, 0, 999999)
    
' Tohle neni moje!
'    Call CheckTimeValues(Times_Values_01, 0, [18 * 3600])
'    Call CheckTimeValues(Times_Values_02, 0, [18 * 3600])
'    Call CheckTimeValues(Times_Values_03, 0, [18 * 3600])
'    Call CheckCellsNumber(Bit_Values_16, 0, 1)
'    Call CheckCellsNumber(Byte_Values_01, 0, 255)
'    Call CheckCellsNumber(Word_Values_01, 0, 65535)
'    Call CheckCellsNumber(Byte_Values_02, 0, 255)
'    Call CheckCellsNumber(Step_Repeat_Values, 0, 999)
'    Call CheckTimeValues(Times_Values_04, 0, [18 * 3600])
'    Call CheckTimeValues(Times_Values_05, 0, [18 * 3600])
'    Call CheckTimeValues(Times_Values_06, 0, [18 * 3600])
'    Call CheckCellsNumber(Address_Values_01, 0, 30)
'    Call CheckCellsNumber(Address_Values_02, 0, 30)
'    Call CheckCellsNumber(Address_Values_03, 0, 30)
'    Call CheckCellsNumber(Compressor_Delays, 0, 7)
'    Call CheckCellsNumber(Bit_Values_17, 0, 1)
'    Call CheckCellsNumber(Bit_Values_18, 0, 1)
'    Call CheckCellsNumber(Bit_Values_19, 0, 1)
'    Call CheckCellsSetCounter(Bit_Values_18, Bit_Values_19, 0, 1)
'    Call CheckCellsNumber(Bit_Values_20, 0, 1)
'    Call CheckCellsNumber(Bit_Values_21, 0, 1)
'    Call CheckLimitedValues(Counter_CNT1, Counter_Limit, 0, 15)
'    Call CheckCellValue(Compressor_Service_Hours, 0, 999999, 0)
'    Call CheckLimitedValues(Alarm_Actual_Count, Alarm_Limit, 0, 65535)
'    Call CheckCellsNumber(Time_Suppression, 0, 255)
'    Call CheckCellsNumber(Program_Version, 0, 99)
'    Call CheckCellsNumber(Activate_OverFill_Alarm, 0, 1)
'    Call CheckCellsNumber(OverFill_Alarm_Hours, 0, 127)
'    Call CheckCellsNumber(Enable_Save_Actual_Step, 0, 1)
'    Call CheckCellValue(Restore_Actual_Step, 0, 1, 0)
'    Call CheckCellValue(Actual_Step, 1, 30, 1)
'    Call CheckCellsNumber(Biology_Aufbau_Value, 1, 999)
'    Call CheckCellsNumber(Login_Value, 0, 65535)
'    Call CheckCellsNumber(Serial_Number_Value, 0, [2^32 - 1])
'    Call CheckCellsNumber(Pressure_Values, 0, 500)
End Sub
Sub button_2_Activate()
    If Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Disable Syntax Check" Then
        Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Enable Syntax Check"
        Call Menu
    ElseIf Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Enable Syntax Check" Then
        Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Disable Syntax Check"
        Call Menu
        Call SyntaxCheck
    Else
        Worksheets(1).Shapes("button_2").OLEFormat.Object.Caption = "Disable Syntax Check"
        Call Menu
        Call SyntaxCheck
    End If
End Sub




Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Call Menu
End Sub
Sub Workbook_SheetChange(ByVal Sh As Object, _
       ByVal Source As Range)
    Call SyntaxCheck
End Sub


Attribute VB_Name = "Time_Modes"

Global Const CELL4STORE = "BR5"               ' sem ukladam v jakem modu se program nachazi

Global isTotalTimeMode As Boolean

Option Explicit



Sub buton_4_Activate()

    Dim iRet As Integer
    
    iRet = MsgBox("You are sure?", vbOKCancel + vbExclamation, "Change Mode")

    If iRet = 1 Then
      
      isTotalTimeMode = Not isTotalTimeMode
    
      If isTotalTimeMode Then
          Worksheets(1).Shapes("button_4").OLEFormat.Object.Caption = "switch to Repeat Mode"
          Range("N:P").Columns.Hidden = False
          Range("M:M").Columns.Hidden = True
          Range(CELL4STORE).Value = 1
      Else
          Worksheets(1).Shapes("button_4").OLEFormat.Object.Caption = "switch to Total Time Mode"
          Range("N:P").Columns.Hidden = True
          Range("M:M").Columns.Hidden = False
          Range(CELL4STORE).Value = 0
      End If

    End If

End Sub


INQUEST-PP=macro
