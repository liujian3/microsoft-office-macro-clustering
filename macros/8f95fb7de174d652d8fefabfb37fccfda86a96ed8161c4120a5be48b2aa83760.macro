Attribute VB_Name = "A_FAIRE"


Attribute VB_Name = "Aide"
Attribute VB_Base = "0{0514D186-223E-4E59-8C16-DBBD4A6443B0}{D02CAD62-9346-4304-B423-35C57ABA31DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()

'Fermeture de l'|fffd|cran d'aide
 Unload Aide

End Sub

Private Sub Label1_Click()

End Sub

Private Sub TextBox2_Change()

End Sub
Attribute VB_Name = "AutoOpen"


Public message_copie, chemin_stockage As Boolean

'D|fffd|clartion de la fonction ShellExecute pour l'ouverture du prg QLogigramme
Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
(ByVal hwnd As Long, ByVal lpOperation As String, _
ByVal lpFile As String, ByVal lpParameters As String, _
ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long

'D|fffd|claration de la fonction FindExecutable pour le lancement de QLOGINIT.EXE
Declare Function FindExecutable Lib "shell32.dll" _
        Alias "FindExecutableA" (ByVal lpFile As String, _
        ByVal lpDirectory As String, ByVal lpResult As String) As Long

Declare Function apifindWindow Lib "User32" Alias "findWindowA" _
   (ByVal lpclassname As Any, ByVal lpCaption As Any) As Long


Global Const SW_SHOWNORMAL = 1

Sub main()


Dim valeur As Integer
Dim ViaQlogigramme As Boolean   'variable permettant de savoir si on vient de QLogigramme
Dim lecture_flw, largeur, hauteur  As Variant
Dim nomchamp$, exemple, chemin, nom_document
Dim nom_fic As String

Set fs = CreateObject("Scripting.FileSystemObject")


'La macro AutoOpen prend en charge les cas de figure suivants :
'     - .DOC ouvert directement par QLogigra : insertion d'un FLW dans le DOC
'     - .DOC d|fffd|j|fffd| param|fffd|tr|fffd| avec un .FLW
'     - .DOC vierge sans objet FLW

'-------------------------------------------------------------------
'Traitement du cas du .DOC ouvert par QLogigramme : int|fffd|gration de l'objet AddFlow
' et chargement du FLW (m|fffd|me nom que le .DOC) avec la taille sp|fffd|cifi|fffd|e

ViaQlogigramme = False
'Recherche de la chaine de caract|fffd|re INSERELOGIGRAMME dans le document actif

With Selection.Find
    .ClearFormatting
    If .Execute(findtext:="INSERELOGIGRAMME") Then
        ViaQlogigramme = True
    End If
End With

'D|fffd|termination du r|fffd|pertoire de QALITEL logigramme
 repertoire = rep_QLogigramme()

'Lancement de l'EXE pour d|fffd|sencapsulage du .LIC
 If Len(repertoire) > 1 Then
    startdoc = Shell(repertoire & "qloginit.exe Deblob=1", 0)
 End If


If ViaQlogigramme Then
'Le .DOC est ouvert via Qlogigramme : Nouvelle insertion

    indice_valeur = 0
    
    'Reconstitution de la chaine compl|fffd|te INSERELOGIGRAMME
    'Affectation des 2 variables largeur et Hauteur
    Do
        Selection.MoveRight unit:=wdCharacter, Count:=1, Extend:=wdExtend
        
        Select Case indice_valeur
            Case 1
                If Right(Selection.Text, 1) <> "," Then
                    largeur = largeur & Right(Selection.Text, 1)
                End If
            Case 2
                If Right(Selection.Text, 1) <> ")" Then
                    hauteur = hauteur & Right(Selection.Text, 1)
                End If
        End Select
    
        
        If Right(Selection.Text, 1) = "(" Then
            indice_valeur = 1
        End If
        If Right(Selection.Text, 1) = "," Then
            indice_valeur = indice_valeur + 1
        End If
        
    Loop Until Right(Selection.Text, 1) = ")"
    
    'Suppression de la s|fffd|lection INSERELOGIGRAMME....
    Selection.Delete
    
    
    'Basculer en mode Cr|fffd|ation pour insertion du FLW
    'ActiveDocument.ToggleFormsDesign
    
    'Insertion du logigramme
    Selection.InlineShapes.AddOLEControl ClassType:="ADDFLOW.AddFlowCtrl.1"
    
    ActiveDocument.InlineShapes(numero_ctrl_addflow()).Height = Val(hauteur)
    ActiveDocument.InlineShapes(numero_ctrl_addflow()).Width = Val(largeur)
    
    
    'D|fffd|termination du nom du fichier FLW
    sfilename = Mid(ActiveDocument.Name, 1, Len(ActiveDocument.Name) - 3) & "flw"
        
    'Test d'existence du fihcier FLW sur le disque
     If Dir(ActiveDocument.Path & Application.PathSeparator & sfilename) <> "" Then
        'Chargement du FLW
        ActiveDocument.AddFlow1.LoadFile ActiveDocument.Path & Application.PathSeparator & sfilename
        Else
            message = MsgBox("Le fichier " & sfilename & " n'existe pas ! Vous devez le cr|fffd|er dans le m|fffd|me r|fffd|pertoire que votre document word.", vbOKOnly + vbExclamation, "Fichier" & sfilename & " n'existe pas")
     End If

    'Affectation de la variable DISSOCIER |fffd| False
    If Variable_Dissocier_Existe() Then
    ActiveDocument.Variables("DISSOCIER").Value = False
        Else
        ActiveDocument.Variables.Add Name:="DISSOCIER", Value:=False
    End If
    
    'D|fffd|termination de l'existence des variables FICHIER et REP
    valeurvariable = VariableExiste(valeur)
    
    'Stockage dans une variable Document du nom du fichier FLW
        
        'les 2 variables FICHIER et REP existent
        If valeurvariable = 11 Then
                ActiveDocument.Variables("FICHIER").Value = sfilename
                If chemin_stockage Then
                    ActiveDocument.Variables("REP").Value = chemin & Application.PathSeparator
                End If
        End If
        
        'La variable REP n'existe pas
        If valeurvariable = 1 Then
            ActiveDocument.Variables.Add Name:="REP"
            If chemin_stockage Then
                    ActiveDocument.Variables("REP").Value = chemin & Application.PathSeparator
            End If
            ActiveDocument.Variables("FICHIER").Value = sfilename
        End If
        
        'La variable FICHIER n'existe pas
        If valeurvariable = 10 Then
            ActiveDocument.Variables.Add Name:="FICHIER", Value:=sfilename
            If chemin_stockage Then
                    ActiveDocument.Variables("REP").Value = chemin & Application.PathSeparator
            End If
        End If
        
        'Aucune des 2 variables n'existe : Cr|fffd|ation des 2 variables
        If valeurvariable = 0 Then
            ActiveDocument.Variables.Add Name:="FICHIER", Value:=sfilename
            ActiveDocument.Variables.Add Name:="REP"
            If chemin_stockage Then
                    ActiveDocument.Variables("REP").Value = chemin & Application.PathSeparator
            End If
        End If
    
    'Test existence de la variable CHEMIN
    If Not VarCheminExiste Then
        'Cr|fffd|ation et initialisation de la variable (pas prise en compte du chemin de stockage)
        ActiveDocument.Variables.Add Name:="CHEMIN", Value:=False
    End If
    
    'Test existence de la variable MESSAGE*
    If Not VarMessageExiste Then
        'Cr|fffd|ation et initialisation de la variable
        ActiveDocument.Variables.Add Name:="MESSAGE", Value:=True
    End If
        
        
    'D|fffd|sactivation de la barre d'outils QLogigramme
    'Call desactivation_bouton
    
    ActiveDocument.AddFlow1.xZoom = 0
    ActiveDocument.AddFlow1.yZoom = 0
    ActiveDocument.AddFlow1.BorderStyle = 0
    ActiveDocument.AddFlow1.ReadOnly = True
    

    'Les commandes de suppression du .LIC sont plac|fffd|es avant le basculement en mode
    'non cr|fffd|ation parce que la routine est quitt|fffd|e aussitot apr|fffd|s l'instruction
    'ActiveDocument.ToggleFormsDesign
    'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire de l'OCX
     If Len(repertoire) > 1 Then
        startdoc = Shell(repertoire & "qloginit.exe Deblob=2", 1)
     End If
    'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire du .DOC
     If FileExiste(ActiveDocument.Path & Application.PathSeparator & "addflow4.lic") Then
        fs.deletefile ActiveDocument.Path & Application.PathSeparator & "addflow4.lic", True
     End If

    
    'Basculer en mode Non Cr|fffd|ation apr|fffd|s insertion du logigramme
     ActiveDocument.ToggleFormsDesign



'----------------------------------------------------------------------------
'Ouverture du .DOC sans QLogigramme
    Else
    'Ne traiter ce cas de figure que s'il y a un Ctrl AddFlow de pr|fffd|sent dans le document
    'Condition pour |fffd|viter erreur notamment en cas de dissociation du CTRL pour en faire
    'un SHAPE
     If numero_ctrl_addflow > 0 Then
    
        'Affectation des valeurs aux variables publiques : Les valeurs des variables sont
        'stock|fffd|es dans le mod|fffd|le Addflow.dot
        'Chemin_stockage : True  = Chemin r|fffd|els de stockage des logigrammes
        '                : False = Logigrammes plac|fffd|s avec le document Word
        'Message_copie   : True  = Affiche la fen|fffd|tre pr|fffd|venant que le logigramme va |fffd|tre copi|fffd|
        '                          dans le r|fffd|pertoire du document Word
        '                : False = N'afficha pas la fen|fffd|tre
                                
        'Test d'existence des variables CHEMIN et MESSAGE dans le document actif
        'pour affectation aux variables globales message_copie et chemin_stockage
        
        If VarCheminExiste() Then
            chemin_stockage = ActiveDocument.Variables("CHEMIN").Value
        End If
        If VarMessageExiste() Then
            message_copie = ActiveDocument.Variables("MESSAGE").Value
        End If
        
        'Chargement au d|fffd|marrage du logigramme dans le document Word
               
        'Recherche de l'existance des 2 variables
           If VariableExiste(valeur) = 11 Then
                'Test sur la localisation du FLW
                If chemin_stockage Then
                    nom_fic = ActiveDocument.Variables("REP").Value & _
                    ActiveDocument.Variables("FICHIER").Value
                    Else
                        nom_fic = ActiveDocument.Path & Application.PathSeparator & _
                        ActiveDocument.Variables("FICHIER").Value
                End If
                
                If FileExiste(nom_fic) Then
                    ActiveDocument.AddFlow1.LoadFile nom_fic
                    'rafraichir
                End If
               
                'Les commandes de suppression du .LIC sont plac|fffd|es avant le basculement en mode
                'non cr|fffd|ation parce que la routine est quitt|fffd|e aussitot apr|fffd|s l'instruction
                'ActiveDocument.ToggleFormsDesign
                'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire de l'OCX
                 If Len(repertoire) > 1 Then
                    startdoc = Shell(repertoire & "qloginit.exe Deblob=2", 1)
                 End If
                'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire du .DOC
                 If FileExiste(ActiveDocument.Path & Application.PathSeparator & "addflow4.lic") Then
                    fs.deletefile ActiveDocument.Path & Application.PathSeparator & "addflow4.lic", True
                 End If
                
                'Redimensionnement du controle pour affichage du logigramme
                 ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height + 1
                 ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width + 1
                 ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height - 1
                 ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width - 1
                
                'Quitter le mode Cr|fffd|ation pour retirer les ascenseurs
                 ActiveDocument.ToggleFormsDesign

              End If   'Fin du test de l'existence des 2 variables FICHIER et REP
        
        End If   'Fin du test de pr|fffd|sence d'un ctrl AddFlow dans le .DOC
        
    End If




'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire de l'OCX
 If Len(repertoire) > 1 Then
    startdoc = Shell(repertoire & "qloginit.exe Deblob=2", 1)
 End If
'Suppression du .LIC pr|fffd|sent dans le r|fffd|pertoire du .DOC
 If FileExiste(ActiveDocument.Path & Application.PathSeparator & "addflow4.lic") Then
    fs.deletefile ActiveDocument.Path & Application.PathSeparator & "addflow4.lic", True
 End If
 

End Sub
Attribute VB_Name = "F_AproposDe"
Attribute VB_Base = "0{76CF7EB2-DD25-4065-AC56-24CAE9A335D5}{8B1616CF-30D7-4BF0-AB7E-B096AD55516A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub OK_Click()

Unload F_AproposDe

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "Fonctions"
Function rep_QLogigramme() As String
Dim compteur, longueur_chaine As Integer
Dim repertoire, sfilename As String

'Recherche du r|fffd|pertoire d'installation de QALITEL Logigramme
'Utilisation de l'API FindExecutable

'D|fffd|termination du fichier FLW |fffd| rechercher
 sfilename = Mid(ActiveDocument.Name, 1, Len(ActiveDocument.Name) - 3) & "flw"

'Appel de la fonction FichierAssocie qui retourne le chemin complet de l'EXE
 repertoire = FichierAssocie(sfilename, ActiveDocument.Path)
 longueur_chaine = Len(repertoire)
 
'Test de l'existence du fichier de r|fffd|f|fffd|rence .FLW
 If FileExiste(ActiveDocument.Path & Application.PathSeparator & sfilename) Then
 
    'Extraction du chemin r|fffd|el de la valeur de la variable REPERTOIRE
     Do
        If Right(repertoire, 1) <> "\" Then
            compteur = compteur + 1
            repertoire = Mid(repertoire, 1, longueur_chaine - compteur)
        Else
            Exit Do
        End If
     Loop Until Len(repertoire) = 1
     
 End If

 rep_QLogigramme = repertoire

End Function
Private Function FichierAssocie(stFichier As String, stChemin As String) As String
' Retour l'application associ|fffd| au fichier pass|fffd| en argument.
Dim stRep As String
Dim lgRep As Long
' Initialisation du buffer de retour
stRep = Space$(250)
' Appel |fffd| la fonction
lgRep = FindExecutable(stFichier, stChemin, stRep)
' Traitement de la valeur de retour
stRep = Left$(stRep, InStr(1, stRep, vbNullChar) - 1)
' Retourne le r|fffd|sultat
FichierAssocie = stRep
End Function

Function VariableExiste(Inum As Integer)
Dim avar As Variant

'Fonction d|fffd|terminant la pr|fffd|sence de la variable FICHIER

'Initialisation de la variable
Inum = 0

For Each avar In ActiveDocument.Variables
   If avar.Name = "FICHIER" Then Inum = Inum + 1
   If avar.Name = "REP" Then Inum = Inum + 10
Next avar

'A l"issue de ce test 4 valeurs sont alors possibles
' 0 = Aucune variable n'existe
' 1 = La var FICHIER existe
'10 = La variable REP existe
'11 = Les variables FICHIER et REP existent

VariableExiste = Inum

End Function

Function Variable_Dissocier_Existe() As Boolean

Dim valeur As Boolean
valeur = False

'Fonction d|fffd|terminant la pr|fffd|sence de la variable DISSOCIER

For Each avar In ActiveDocument.Variables
   If avar.Name = "DISSOCIER" Then valeur = True
Next avar


Variable_Dissocier_Existe = valeur

End Function

Function VarCheminExiste() As Boolean
Dim avar As Variant
Dim PresenceChemin As Boolean

chemin = False

'Fonction d|fffd|terminant la pr|fffd|sence de la variable CHEMIN dans le document actif

For Each avar In ActiveDocument.Variables
    If avar.Name = "CHEMIN" Then PresenceChemin = True
Next avar

VarCheminExiste = PresenceChemin

End Function

Function VarMessageExiste() As Boolean
Dim avar As Variant
Dim PresenceMessage As Boolean

chemin = False

'Fonction d|fffd|terminant la pr|fffd|sence de la variable CHEMIN dans le document actif

For Each avar In ActiveDocument.Variables
    If avar.Name = "MESSAGE" Then PresenceMessage = True
Next avar

VarMessageExiste = PresenceMessage

End Function

Function numero_ctrl_addflow()
Dim compteur

For Each s In ActiveDocument.InlineShapes
compteur = compteur + 1
       If s.OLEFormat.ClassType = "ADDFLOW.AddFlowCtrl.1" Then
       numero = compteur
        End If
Next
numero_ctrl_addflow = numero

End Function
Function numero_controleaddflow_shape()
Dim compteur

For Each s In ActiveDocument.Shapes
compteur = compteur + 1
       If s.OLEFormat.ClassType = "ADDFLOW.AddFlowCtrl.1" Then
       numero = compteur
       End If
Next
numero_controleaddflow_shape = numero

End Function
Function numero_shape_SCOQI()

Dim compteur, numero As Integer
compteur = 0

For Each s In ActiveDocument.Shapes
compteur = compteur + 1
       If s.AlternativeText = "SCOQI" Then
       numero = compteur
       End If
 
Next

numero_shape_SCOQI = numero

End Function

Function FileExiste(FileName As String) As Boolean
FileExiste = Dir(FileName) <> ""
End Function


Attribute VB_Name = "Include"
Sub rafraichissement()

Dim valeurcontroleAddFlow, valeurcontroleAddflow_shape As Integer

    'D|fffd|termination du N|fffd| de l'objet InlineShapes ou Shape d'AddFlow
     valeurcontroleAddFlow = numero_ctrl_addflow()
     valeurcontroleAddflow_shape = numero_controleaddflow_shape()
     
    'Test pour savoir si l'objet AddFlow est un InLineShapes et lui appliquer le redimensionnement
    'Plante si on tente de redimensionner et que AddFlow a |fffd|t|fffd| encr|fffd| : plus consid|fffd|r|fffd| comme InLineShapes
    If valeurcontroleAddFlow <> 0 Then
        ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height + 1
        ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width + 1
        ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height - 1
        ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width - 1
        Else
        If valeurcontroleAddflow_shape <> 0 Then
            ActiveDocument.Shapes(valeurcontroleAddflow_shape).Height = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Height + 1
            ActiveDocument.Shapes(valeurcontroleAddflow_shape).Width = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Width + 1
            ActiveDocument.Shapes(valeurcontroleAddflow_shape).Height = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Height - 1
            ActiveDocument.Shapes(valeurcontroleAddflow_shape).Width = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Width - 1
        End If
     End If

End Sub
Attribute VB_Name = "Macros"
Sub Modifier()

Dim startdoc
Dim chemin_fichierFLW
Dim largeur, hauteur, mode_acces As Integer


'Prend en compte l'ouverture directe du FLW pos|fffd| dans le controle
'ET
'le cas d'un SHAPE (Dissociation de l'image avec le FLW d'origine

'Si on est dans le cas d'un SHAPE
'R|fffd|cup|fffd|ration des dimensions - Suppression du Shape - Insertion du CTRL AddFlow
'avec les m|fffd|mes caract|fffd|ristiques et lancement de QALITEL logigramme

If numero_shape_SCOQI > 0 Then   'Il y a un SHAPE
    'R|fffd|cup|fffd|ration des dimensions du SHAPE
    largeur = ActiveDocument.Shapes(numero_shape_SCOQI).Width
    hauteur = ActiveDocument.Shapes(numero_shape_SCOQI).Height
    ActiveDocument.Shapes(numero_shape_SCOQI).Delete
    'Insertion du Ctrl AddFlow
    Selection.InlineShapes.AddOLEControl ClassType:="ADDFLOW.AddFlowCtrl.1"
    ActiveDocument.InlineShapes(numero_ctrl_addflow()).Height = Val(hauteur)
    ActiveDocument.InlineShapes(numero_ctrl_addflow()).Width = Val(largeur)
    ActiveDocument.AddFlow1.LoadFile ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value
    ActiveDocument.AddFlow1.ReadOnly = True
                 
    'Affectation de la variable DISSOCIER |fffd| False
    If Variable_Dissocier_Existe() Then
    ActiveDocument.Variables("DISSOCIER").Value = False
        Else
        ActiveDocument.Variables.Add Name:="DISSOCIER", Value:=False
    End If
                 
    mode_acces = 1   'Param|fffd|tre pour indiquer que l'on vient de basculer de SHAPE |fffd| Ctrl AddFlow
    'Lancement du FLW
    lancement_flw (mode_acces)
    
    Else
    If numero_ctrl_addflow > 0 Then    'Il existe au moins un Ctrl AddFlow
        lancement_flw (mode_acces)
        Else
            message = MsgBox("Aucun logigramme d'ins|fffd|rer dans ce document. Cette op|fffd|ration ne peut donc aboutir.", vbExclamation + vbOKOnly, "Logigramme inexistant")
     End If  ' Fin du test de la rp|fffd|sence d'un Ctrl AddFlow
End If   'Fin du test sur le SHAPE ou le Ctrl AddFlow
    
End Sub

Sub Rafraichir()
Dim valeurcontroleAddFlow, valeurcontroleAddflow_shape As Integer

'Tester le cas o|fffd| le Ctrl AddFlow a |fffd|t|fffd| converti en SHAPE
'Ne pas  donner acc|fffd|s |fffd| cette fonction - Afficher message d'avertissement

If numero_ctrl_addflow = 0 And ActiveDocument.Variables("DISSOCIER").Value Then
    'Il n'y a pas de Ctrl AddFlow dans le .DOC
    message = MsgBox("Le logigramme a |fffd|t|fffd| dissoci|fffd| du fichier d'origine. Vous ne pouvez donc pas l'actualiser. Si vous souhaitez r|fffd|tablir la liaison avec le fichier .FLW de r|fffd|f|fffd|rence, utilisez le bouton 'Modifier'.", vbExclamation + vbOKOnly, "Image dissoci|fffd|e du fichier .FLW de r|fffd|f|fffd|rence")
    Else

    If Dir(ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value) <> "" Then
    
         'Basculer en mode Non Cr|fffd|ation apr|fffd|s insertion du logigramme
         ActiveDocument.ToggleFormsDesign
    
        ActiveDocument.AddFlow1.ReadOnly = False
    
       ' Commande ne fonctionne pas
       ' ActiveDocument.AddFlow1.Refresh
        
        ActiveDocument.AddFlow1.Nodes.Clear
        
        
        'If chemin_stockage Then
        '    ActiveDocument.AddFlow1.LoadFile ActiveDocument.Variables("REP").Value & ActiveDocument.Variables("FICHIER").Value
        'Else
            ActiveDocument.AddFlow1.LoadFile ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value
        'End If
    
        'Ajustement du logigramme a la taille de la fen|fffd|tre
        ActiveDocument.AddFlow1.xZoom = 0
        ActiveDocument.AddFlow1.yZoom = 0
        ActiveDocument.AddFlow1.ReadOnly = True
        
        rafraichissement

        'Basculer en mode Non Cr|fffd|ation apr|fffd|s insertion du logigramme
        ActiveDocument.ToggleFormsDesign
         
         
        Else
            message = MsgBox("Le fichier de r|fffd|f|fffd|rence '" & ActiveDocument.Variables("FICHIER").Value & "' n'est pas pr|fffd|sent dans le r|fffd|pertoire '" & ActiveDocument.Path & Application.PathSeparator & "'. Cette op|fffd|ration ne peut donc aboutir.", vbExclamation + vbOKOnly, "Fichier inexistant")
    
    End If    ' Fin du test de l'existence du fichier externe FLW

End If   'Fin du test de la pr|fffd|sence d'un SHAPE pour ne pas lancer la routine de rafraichissement

End Sub

Sub Aide_QLogigramme()

'Affichage de l'|fffd|cran "Aide"
Load Aide
Aide.Show


End Sub

Sub Dissocier()
 
    'Basculer en mode Non Cr|fffd|ation apr|fffd|s insertion du logigramme
     ActiveDocument.ToggleFormsDesign
    'Sauvegarde du logigramme qu format EMF
     ActiveDocument.AddFlow1.SaveImage 1, 1, "essai.emf"


    'Suppression de l'objet AddFlow
    'D|fffd|termination du N|fffd| de l'objet InlineShapes ou Shape d'AddFlow
     valeurcontroleAddFlow = numero_ctrl_addflow()
     valeurcontroleAddflow_shape = numero_controleaddflow_shape()
     If valeurcontroleAddFlow <> 0 Then
        largeur_ctrl = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Width
        hauteur_ctrl = ActiveDocument.InlineShapes(valeurcontroleAddFlow).Height
        ActiveDocument.InlineShapes(valeurcontroleAddFlow).Delete
        Else
            If valeurcontroleAddflow_shape <> 0 Then
              largeur_ctrl = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Width
              hauteur_ctrl = ActiveDocument.Shapes(valeurcontroleAddflow_shape).Height
              ActiveDocument.Shapes(valeurcontroleAddflow_shape).Delete
            End If
     End If

    Selection.Paste
     
    'Affectation de la variable DISSOCIER |fffd| True
    If Variable_Dissocier_Existe() Then
    ActiveDocument.Variables("DISSOCIER").Value = True
        Else
        ActiveDocument.Variables.Add Name:="DISSOCIER", Value:=True
    End If
        
     'D|fffd|finition des caract|fffd|ristiques du SHAPE
    ActiveDocument.InlineShapes(1).Width = largeur_ctrl
    ActiveDocument.InlineShapes(1).Height = hauteur_ctrl
    ActiveDocument.InlineShapes(1).AlternativeText = "SCOQI"
    
    ActiveDocument.InlineShapes(1).converttoshape
 
End Sub


Attribute VB_Name = "Preferences"
Attribute VB_Base = "0{1B2EFA32-B989-4C52-A920-1D1A23A27CB7}{3EAD87D4-D097-4A03-84C0-30CED6CB2D81}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub userform_initialize()

Mode_Stockage.Value = chemin_stockage
message_lecture.Value = message_copie

End Sub


Private Sub Annuler_Click()


'Fermeture de la fen|fffd|tre
Unload Preferences

End Sub

Private Sub message_lecture_Click()

End Sub



Private Sub Mode_Stockage_Click()

'Si la case est coch|fffd|e, invalider la case relative |fffd| Message_Lecture
If Mode_Stockage.Value Then
    message_lecture.Value = False
    message_lecture.Enabled = False
    
    Else
    'Activer la case |fffd| cocher de Message_Lecture
    message_lecture.Enabled = True
    
End If


End Sub

Private Sub UserForm_Click()

End Sub

Private Sub Valider_Click()

'Validation de la fen|fffd|tre - Affectation des valeurs des cases |fffd| cocher
'aux variables globales stock|fffd|es dans le document actif et en m|fffd|moire

chemin_stockage = Mode_Stockage.Value
If VarCheminExiste() Then
    ActiveDocument.Variables("CHEMIN").Value = Mode_Stockage.Value
    Else
    'cr|fffd|ation de la variable CHEMIN fichier et affectation de la valeur
    ActiveDocument.Variables.Add Name:="CHEMIN"
    ActiveDocument.Variables("CHEMIN").Value = Mode_Stockage.Value
End If


message_copie = message_lecture.Value
If VarMessageExiste() Then
    ActiveDocument.Variables("MESSAGE").Value = message_lecture.Value
    Else
    'Cr|fffd|ation de la varaible MESSAGE et affectation de la valeur
    ActiveDocument.Variables.Add Name:="MESSAGE"
    ActiveDocument.Variables("MESSAGE").Value = message_lecture.Value
End If


'Fermeture du formulaire Pr|fffd|f|fffd|rences
Unload Preferences

End Sub
Attribute VB_Name = "Procedure"
Sub desactivation_bouton()

'D|fffd|sactive tous les boutons de la barre d'outils QLogigramme :
'Passage en mode non cr|fffd|ation

CommandBars("Logigramme").Controls(1).Enabled = False
CommandBars("Logigramme").Controls(2).Enabled = False
CommandBars("Logigramme").Controls(3).Enabled = False
CommandBars("Logigramme").Controls(4).Enabled = False
CommandBars("Logigramme").Controls(5).Enabled = False

End Sub

Sub activation_bouton()

'Active tous les boutons de la barre d'outils QLogigramme :
'Passage en mode cr|fffd|ation

CommandBars("Logigramme").Controls(1).Enabled = True
CommandBars("Logigramme").Controls(2).Enabled = True
CommandBars("Logigramme").Controls(3).Enabled = True
CommandBars("Logigramme").Controls(4).Enabled = True
CommandBars("Logigramme").Controls(5).Enabled = True

End Sub

Sub lancement_flw(mode_acces)

    If Dir(ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value) <> "" Then
        chemin_fichierFLW = ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value
        'Ouverture du fichier FLW
        startdoc = ShellExecute(0, "Open", chemin_fichierFLW, "", "C:\", SW_SHOWNORMAL)
        'Quitter le mode cr|fffd|ation que si l'on vient de basculer de SHAPE en CTRL AddFlow
        If mode_acces = 1 Then
            'Basculer en mode Non Cr|fffd|ation apr|fffd|s insertion du logigramme
            ActiveDocument.ToggleFormsDesign
        End If
        Else
            message = MsgBox("Le fichier de r|fffd|f|fffd|rence '" & ActiveDocument.Variables("FICHIER").Value & "' n'est pas pr|fffd|sent dans le r|fffd|pertoire '" & ActiveDocument.Path & Application.PathSeparator & "'. Cette op|fffd|ration ne peut donc aboutir.", vbExclamation + vbOKOnly, "Fichier inexistant")
    End If

End Sub
Attribute VB_Name = "SauveFLW"
Attribute VB_Base = "0{E1B5D84F-EF03-4202-A0E1-C36737D27861}{0B2D3FA2-B83F-4BC5-9B55-F106535B8829}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Annuler_Click()

'Fermeture de la fen|fffd|tre
Unload SauveFLW

End Sub


Private Sub CommandButton1_Click()
Dim reponse As String

    'Sauvegarde du nom du fichier FLW dans la variable FICHIER
    ActiveDocument.Variables("FICHIER").Value = NomLogigramme.Value
        
    'La gestion du r|fffd|pertoire du fichier FLW n'est pas activ|fffd|
    'ActiveDocument.Variables.Add Name:="REP", Value:=ActiveDocument.Path & Application.PathSeparator

    'Sauvegarde du fichier FLW
    ActiveDocument.AddFlow1.SaveFile ActiveDocument.Path & Application.PathSeparator & ActiveDocument.Variables("FICHIER").Value
    
    'Fermeture de la fen|fffd|tre
    Unload SauveFLW
        
End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Document_New()

End Sub

Private Sub Document_Open()


End Sub


INQUEST-PP=macro
