Attribute VB_Name = "DDBHAFromADV"

Function DDBHAComponentImport(BHAR_IDENTIFIER As String)
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
WhtSt = "BHAC_SEQUENCE_POSITION, BHTC_NAME, BHA_COMPONENT.BHAC_NAME, BHAC_MANUF, BHAC_SERIAL_NUM, BHAC_GAUGE_OD, BHAC_OD, BHAC_ID, BHAC_ACTUAL_LENGTH,BHAC_TOP_CONNECTION_THREAD, BHAC_BOT_CONNECTION_THREAD, REF_TOOL_CLASS.BHTC_GRAPHIC_FILENAME, BHAC_IDENTIFIER, BHAC_WEIGHT_PER_LENGTH, BHAC_YIELD_STRENGTH, BHA_COMPONENT.BHAC_DESCRIPTION"
FromSt = "REF_TOOL_CLASS, BHA_COMPONENT"
WhereSt = "REF_TOOL_CLASS.BHTC_IDENTIFIER = BHA_COMPONENT.BHTC_IDENTIFIER AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHAC_SEQUENCE_POSITION DESC"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHARep", Rqst
'DDBITRep
WhtSt = "DBIT.DBIT_IADC_NO, DBIT.BHAC_IDENTIFIER, DBIT.DBIT_TFA , BIT_JETS.BIJE_NUMBER, BIT_JETS.BIJE_DIAM, BIT_JETS.BIJE_SET_NUMBER, BIT_JETS.BIJE_IDENTIFIER, DBIT_IADC_NO, DBIT_GAUGE_LEN, DBIT_DISCHARGE_COEFF"
FromSt = "DBIT, BHA_COMPONENT, BIT_JETS"
WhereSt = "BIT_JETS.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND DBIT.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND BIJE_SET_NUMBER<>'2' AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'ORDER BY  BIT_JETS.BIJE_NUMBER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBITRep", Rqst
'MotorRep
WhtSt = "MOTOR.*"
FromSt = "MOTOR, BHA_COMPONENT"
WhereSt = "MOTOR.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDMotoRep", Rqst
' Bends
WhtSt = "BENDS.*"
FromSt = "BENDS, BHA_COMPONENT"
WhereSt = "BHA_COMPONENT.BHAC_IDENTIFIER=BENDS.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBendsRep", Rqst
' Pipe
WhtSt = "DRILLPIPE.*"
FromSt = "DRILLPIPE, BHA_COMPONENT"
WhereSt = "BHA_COMPONENT.BHAC_IDENTIFIER=DRILLPIPE.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDPipe", Rqst
' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst
' For Sensors
WhtSt = "BHA_COMPONENT.BHAC_SEQUENCE_POSITION, REF_TOOL_CLASS.BHTC_NAME,  REF_SENSOR_TYPE.REST_TYPE,  BHA_COMPONENT_SENSORS.BHCS_OFFSET_FROM_BTM_COMP, BHA_COMPONENT_SENSORS.BHCS_OFFSET_FROM_BTM_BIT"
FromSt = "BHA_COMPONENT, REF_TOOL_CLASS, BHA_COMPONENT_SENSORS, REF_SENSOR_TYPE"
WhereSt = "REF_SENSOR_TYPE.REST_IDENTIFIER=BHA_COMPONENT_SENSORS.REST_IDENTIFIER  AND BHA_COMPONENT_SENSORS.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND REF_TOOL_CLASS.BHTC_IDENTIFIER = BHA_COMPONENT.BHTC_IDENTIFIER AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHAC_SEQUENCE_POSITION DESC"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHASens", Rqst
End Function
Sub Translate_BHTC_NAME(Sh As Worksheet, ClmnIndex As Integer) 'Translat BHTC_NAME to RUS
' Sh - WorkSheet with BHTC_NAME column and ClmnIndex - Column number (with BHTC_NAME)
Dim Wb As Workbook: Set Wb = Sh.Parent
Dim Col As Collection
Dim i As Integer
If Not ShIsExist(Sh.Name, Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
If Not ShIsExist("RusCat", Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
RowNmb = 0
Set CatSh = Wb.Sheets("RusCat") '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BHA,
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Set Coll = New Collection
i = 1
Do While CatSh.Cells(i, 3) <> ""
    Coll.Add CatSh.Cells(i, 3)
i = i + 1
Loop
i = 2
Do While Sh.Cells(i, ClmnIndex) <> ""
    ClsValue = Sh.Cells(i, ClmnIndex)
    j = 1
    For Each Itm In Coll
        If Itm = ClsValue And CatSh.Cells(j, 4) <> "" Then
            Sh.Cells(i, ClmnIndex) = CatSh.Cells(j, 4)
            Exit For
        End If
    j = j + 1
    Next Itm
i = i + 1
Loop
Set Col = Nothing
End Sub
Sub UserFormFor6AxisShow()
UserFormFor6Axis.Show
End Sub
Function SensInsert(ByVal LstRow As Integer, ByRef WSh As Worksheet) As Integer
Dim TWb As Workbook: Set TWb = ThisWorkbook

Dim i As Integer
LstRow = LstRow + 3
'|fffd||fffd||fffd||fffd||fffd|
SensInsert = LstRow
If Not ShIsExist("Translate", TWb) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "Translate" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
If Not ShIsExist("DDBHASens", TWb) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "DDBHASens" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
WSh.Cells(LstRow, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd|"
WSh.Cells(LstRow, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
WSh.Cells(LstRow, 3) = "|fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd|"
WSh.Cells(LstRow, 4) = "|fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|"
WSh.Rows(LstRow).RowHeight = 60
WSh.Cells.WrapText = True
FrmtBorders WSh.Range("A" & LstRow & ":D" & LstRow)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Dim TrlSh As Worksheet: Set TrlSh = TWb.Sheets("Translate")
Dim DDBHASens As Worksheet: Set DDBHASens = TWb.Sheets("DDBHASens")

LstRow = LstRow + 1
i = 2
Do While DDBHASens.Cells(i, 1) <> "" And i < 100
    WSh.Cells(LstRow, 1) = DDBHASens.Cells(i, 1)
    WSh.Cells(LstRow, 2) = TrlSens(DDBHASens.Cells(i, 3))
    WSh.Cells(LstRow, 3) = DDBHASens.Cells(i, 4)
    WSh.Cells(LstRow, 4) = DDBHASens.Cells(i, 5)
    LstRow = LstRow + 1
i = i + 1
Loop
SensInsert = LstRow
FrmtBorders WSh.Range("A" & LstRow - i + 2 & ":D" & LstRow - 1)
End Function
Sub DDBHAHeader(ByRef WSh As Worksheet)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
WSh.Rows("1:10").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
FrmtBorders WSh.Range("B5:D9")
For i = 5 To 9
WSh.Range("C" & i & ":D" & i).Merge
Next i
WSh.Cells(5, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(6, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(7, 2) = "|fffd||fffd||fffd||fffd|:"
WSh.Cells(8, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(9, 2) = "|fffd||fffd||fffd||fffd| |fffd|"
WSh.Range("B5:C9").HorizontalAlignment = xlLeft
With WSh.Range("B2:M2")
    .Merge
    .Font.Name = "Calibri"
    .Font.Size = 14
    .Font.Bold = True
End With
WSh.Range("B2:M2") = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & TWb.Sheets("DDSetup").Cells(2, 6)
If Not ShIsExist("DDBHAHeader", TWb) Then
    Exit Sub
End If
Dim BHAHeaderSh As Worksheet: Set BHAHeaderSh = TWb.Sheets("DDBHAHeader")
Dim opr As String
Dim fld As String
Dim pad As String
Dim well As String
well = BHAHeaderSh.Cells(2, 1)
pad = BHAHeaderSh.Cells(2, 2)
fld = BHAHeaderSh.Cells(2, 3)
opr = BHAHeaderSh.Cells(2, 4)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
WSh.Cells(5, 3) = Trlt2(opr, 7)
WSh.Cells(6, 3) = Trlt2(fld, 10)
WSh.Cells(7, 3) = Trlt2(pad, 13, True)
WSh.Cells(8, 3) = Trlt2(well, 16, True)
End Sub
Sub AddShapeWithMacroatSh(ByRef Sh As Worksheet, MacroName As String, BtmnName As String, x As Integer, y As Integer, Lns As Integer, Hght As Integer)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SaveBHARus (|fffd||fffd||fffd||fffd||fffd||fffd| SaveBHA, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep"
Dim Shp As Shape
Set Shp = Sh.Shapes.AddShape(msoShapeRoundedRectangle, x, y, Lns, Hght)
Shp.TextFrame2.TextRange.Characters.Text = BtmnName
Shp.TextFrame2.TextRange.Font.Size = 18
Shp.TextFrame2.VerticalAnchor = msoAnchorMiddle
Shp.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
Shp.Placement = xlFreeFloating
Shp.OnAction = MacroName
Shp.Name = BtmnName
End Sub
Public Function ColFromDatabase(Command As String) As Collection
' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim Col As Collection
Set Col = New Collection
Dim sHostName As String ' Get Host Name / Get Computer Name
sHostName = Environ$("computername")

'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i, j As Integer
Dim PrnStr As String
Dim TxtStr As String
Dim KeySt As String
Dim flag As Boolean
Dim Str As String
Dim sCon As String
'On Error Resume Next
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
Else
    For i = 1 To rs.RecordCount
            j = 1
            For Each gf In rs.Fields
            
                     If IsNull(gf.Value) = False Then
                        If j <> 1 Then
                            Str = Col(i)
                            Col.Remove (i)
                            Col.Add Str & "-" & CStr(Replace(gf.Value, "-", "_"))
                        Else
                            Col.Add CStr(Replace(gf.Value, "-", "_"))
                        End If
                    Else
                        If j <> 1 Then
                            Str = Col(i)
                            Col.Remove (i)
                            Col.Add Str & "-" & " "
                        Else
                            Col.Add " "
                        End If
                    End If
               j = j + 1
            Next gf
        rs.MoveNext
    Next i
End If
cn.Close
Set ColFromDatabase = Col
Set Col = Nothing
Set cn = Nothing
Set rs = Nothing
End Function
Public Function Separator(Arg As String, SepCr As String, Ind As Integer) As String
If Arg = "" Then Exit Function
If SepCr = "" Then Exit Function
If Ind > Len(Arg) Then Exit Function
Dim i As Integer
Dim Chr As String
Dim IndCount As Integer
Chr = ""
IndCount = 0
For i = 1 To Len(Arg)
    Cr = mid(Arg, i, 1)
    If Cr = SepCr Then IndCount = IndCount + 1
If IndCount = Ind And Cr <> SepCr Then Separator = Separator & Cr
Next i
End Function
Sub AddShapeForDDBHARepSave()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SaveBHARus
Dim Shp As Shape
Set Shp = ThisWorkbook.Sheets("DDBHARep").Shapes.AddShape(msoShapeRoundedRectangle, 495, 18.75, 221.25, 60)
Shp.TextFrame2.TextRange.Characters.Text = "Save BHArus Report"
Shp.TextFrame2.TextRange.Font.Size = 18
Shp.TextFrame2.VerticalAnchor = msoAnchorMiddle
Shp.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
Shp.Placement = xlFreeFloating
Shp.OnAction = "SaveDDBHARus"
Shp.Name = "SaveBtmn"
End Sub
Attribute VB_Name = "For_Data_6_Axis"

Sub ImportData6Axis(StartTime As String, EndTime As String)
Dim StrCon As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim AxisSh As Worksheet: Set AxisSh = TWb.Sheets("6 Axis")
Dim SurveySh As Worksheet: Set SurveySh = TWb.Sheets("Survey")
Dim surveyhorSh As Worksheet: Set surveyhorSh = TWb.Sheets("survey hor")
Dim i As Integer
Dim j As Integer
Dim m As Integer

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Dim sHostName As String
'sHostName = Environ$("computername")

'StrCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
StrCon = StrComCheck()
If StrCon = "" Then Exit Sub
6 AxisDataFromSURVEY_DRAWSURVEY_STATIONWithTime StartTime, EndTime, StrCon

AxisSh.Range("B4:H100000").ClearContents

i = 2
j = 19
m = 4
Do While SurveySh.Cells(i, 1) <> "" And j < 10000

    If surveyhorSh.Cells(j, 2) = SurveySh.Cells(i, 1) Then
        AxisSh.Cells(m, 2) = SurveySh.Cells(i, 1)
        AxisSh.Cells(m, 3) = SurveySh.Cells(i, 2)
        AxisSh.Cells(m, 4) = SurveySh.Cells(i, 3)
        AxisSh.Cells(m, 5) = SurveySh.Cells(i, 4)
        AxisSh.Cells(m, 6) = SurveySh.Cells(i, 5)
        AxisSh.Cells(m, 7) = SurveySh.Cells(i, 6)
        AxisSh.Cells(m, 8) = SurveySh.Cells(i, 7)
        
        m = m + 1
        i = i + 1
        j = 18
    End If
j = j + 1
If j = 10000 Then
    i = i + 1
    j = 19
End If
Loop

End Sub
Function StrComCheck() As String
On Error Resume Next:
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim cn As ADODB.Connection 'declare connaction
Set cn = New ADODB.Connection
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| W7
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;User ID=adv;Initial Catalog=advantage;Data Source= ADVMWD2\ADVANTAGE2012"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If

Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD1\ADVANTAGE2012"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XP
Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD2\advantage2005"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If


Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD1\advantage2005"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If
MsgBox "Connection is not exist!"
StrComCheck = ""
Set cn = Nothing
End Function


Function RigActivity(Cd As Integer) As String
Select Case Cd
Case 0
    RigActivity = " No monitor"
Case 110
    RigActivity = " No monitor"
Case 100
    RigActivity = " No monitor"
Case 4
    RigActivity = " In Slips"
Case 6
    RigActivity = " Tripping In (devil)"
Case 116
    RigActivity = " Tripping In w rotation w circ"
Case 106
    RigActivity = " Tripping In w rotation wo circ"
Case 16
    RigActivity = " Tripping In wo rotation w circ"
Case 7
    RigActivity = " Tripping Out"
Case 14
    RigActivity = " Circulation (in slips)"
Case 12
    RigActivity = " Rimming wo rotation"
Case 3
    RigActivity = " Off Bottom"
Case 13
    RigActivity = " Off Bottom (rotation w circ wo rotating)"
Case 103
    RigActivity = " Off Bottom (rotation wo circ w rotating)"
Case 112
    RigActivity = "  rotating, circulating, reaming "
Case 104
    RigActivity = " In Slips wo cirk w rotation"

Case 111
    RigActivity = " Drilling rotation"
Case 5
    RigActivity = " Connection"
Case 11
    RigActivity = " Drilling slide"
Case 114
    RigActivity = " InSlips Circ Rot"
Case 105
    RigActivity = " Rimming w rotation wo circ"
Case 113
    RigActivity = " Off Bottom w rot and w circ"
Case 117
    RigActivity = " Back Rimming w rotation"
Case 107
    RigActivity = " Back Rimming w rotation wo circ"
Case 17
    RigActivity = " Back Rimming wo rotation w circ"
Case Else
    RigActivity = CStr(Cd)
End Select
End Function
Sub GetDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Wht = "c.Time, c.Depth, c.RigActivityCode, d.BITDEP, b.RunNo"
Frm = "GenDataSet b, GenDataIndex c, GenGenTime d"
Wher = "b.id = c.GenDataSetId AND c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ThisWorkbook.Sheets("GenGenTime").Range("A1:G20000").ClearContents
GetOneShWhithCommandtoWbDepthTime "GenGenTime", Command, ThisWorkbook, sCon
End Sub

Sub GetOneShWhithCommandtoWbDepthTime(TabName As String, Command As String, Wb As Workbook, sCon As String) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim sSql As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Double
Dim j As Double
Dim k As Double
Dim RgActCode As Integer
sSql = TabName

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox "There is not DATA for this time interval!"
Else
    Dim MyArray()
    MyArray = rs.GetRows()
    MyArray = TransposeArray(MyArray)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    j = 0
    RgActCode = MyArray(0, 2)
    For i = 1 To UBound(MyArray, 1)
        If MyArray(i, 2) <> RgActCode Then
            j = j + 1
            RgActCode = MyArray(i, 2)
        End If
    Next i
    MsgBox CStr(i) & "to" & CStr(j)
    ReDim TempArray(LBound(MyArray, 1) To j, LBound(MyArray, 2) To UBound(MyArray, 2))
    For k = LBound(MyArray, 2) To UBound(MyArray, 2)
        If k = 2 Then
            TempArray(0, k) = RigActivity(CStr(MyArray(0, k)))
        Else
            TempArray(0, k) = MyArray(0, k)
        End If
    Next k
    j = LBound(MyArray, 1) + 1
    RgActCode = MyArray(0, 2)
    For i = LBound(MyArray, 1) + 1 To UBound(MyArray, 1)
        If MyArray(i, 2) <> RgActCode Then
            For k = LBound(MyArray, 2) To UBound(MyArray, 2)
                If k = 2 Then
                    TempArray(j, k) = RigActivity(CStr(MyArray(i, k)))
                Else
                    TempArray(j, k) = MyArray(i, k)
                End If
            Next k
            j = j + 1
            RgActCode = MyArray(i, 2)
        End If
    Next i
    ReDim MyArray1(LBound(TempArray, 1) To UBound(TempArray, 1) - 1, LBound(TempArray, 2) To UBound(TempArray, 2) + 2)
    For i = LBound(TempArray, 1) To UBound(TempArray, 1) - 1
        MyArray1(i, 0) = TempArray(i, 0)
        MyArray1(i, 1) = TempArray(i + 1, 0)
        MyArray1(i, 2) = TempArray(i + 1, 0) - TempArray(i, 0)
        MyArray1(i, 3) = TempArray(i, 1)
        MyArray1(i, 4) = TempArray(i, 3)
        MyArray1(i, 5) = TempArray(i, 2)
    Next i
    Array2worksheet Wb.Sheets(sSql), MyArray1
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Function StTimeFromBox(StartTime As String) As String
If StartTime = "" Then Exit Function
Dim i As Integer
Dim Cr As String
For i = 5 To Len(StartTime)
Cr = mid(StartTime, i, 1)
If mid(StartTime, i + 1, 3) <> "to " Then
    If Cr <> "/" Then
        StTimeFromBox = StTimeFromBox & Cr
    Else
        StTimeFromBox = StTimeFromBox & "-"
    End If
Else
    Exit For
End If
Next i
StTimeFromBox = Format(CDate(StTimeFromBox), "yyyy-mm-dd Hh:Nn:Ss")
End Function

Function EndTimeFromBox(EndTime As String) As String
If EndTime = "" Then Exit Function
'ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
'Format(CStr(DTPicker1.Value + DTPicker2.Value - Date), "yyyy-mm-dd Hh:Nn:Ss"
Dim i As Integer
Dim Cr As String
For i = 5 To Len(EndTime)
If mid(EndTime, i + 1, 4) = " to " Then Exit For
Next i
If i + 5 = Len(EndTime) Then
    EndTimeFromBox = "2025-01-01 00:00:00"
Else
i = i + 5
    EndTimeFromBox = mid(EndTime, i)
    EndTimeFromBox = Format(CDate(EndTimeFromBox), "yyyy-mm-dd Hh:Nn:Ss")
End If
End Function
Sub Array2worksheet(ByRef Sh As Worksheet, ByVal Arr)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Arr |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColumnsNames.
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| sh
    If UBound(Arr, 1) > Sh.Rows.Count - 1 Or UBound(Arr, 2) > Sh.Columns.Count Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| " & Sh.Name, vbCritical, _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(Arr, 1) & "*" & UBound(Arr, 2): End
    End If
    With Sh
        .Range("a2").Resize(UBound(Arr, 1), UBound(Arr, 2)).Value = Arr
        .UsedRange.EntireColumn.AutoFit
    End With
End Sub
Function TransposeArray(ByVal Arr As Variant) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim TempArray As Variant
    ReDim TempArray(LBound(Arr, 2) To UBound(Arr, 2), LBound(Arr, 1) To UBound(Arr, 1))
    For x = LBound(Arr, 2) To UBound(Arr, 2)
        For y = LBound(Arr, 1) To UBound(Arr, 1)
            TempArray(x, y) = Arr(y, x)
        Next y
    Next x
    TransposeArray = TempArray
End Function
Sub TimeBalance()
Dim Sh As Worksheet: Set Sh = ThisWorkbook.Sheets("GenGenTime")
Dim DataArray()
Dim TempArray()
Dim SumTimeArr()
Dim i As Double
Dim j As Double
Dim Summ

Sh.Range("H2:J50000").ClearContents
DataArray = Sh.Range("A2:A100000")
For i = LBound(DataArray, 1) To UBound(DataArray, 1)
    If DataArray(i, 1) = "" Then Exit For
Next i
i = i - 1
ReDim DataArray(0 To i, 0 To 5)
DataArray = Sh.Range("A2:F" & CStr(i + 1))
TempArray = Sh.Range("A2:F" & CStr(i + 1))
TempArray = RemuveDuplicateFromArray(TempArray, 6)
ReDim SumTimeArr(0 To UBound(TempArray, 1))

For i = LBound(DataArray, 1) To UBound(DataArray, 1)
    For j = LBound(TempArray, 1) To UBound(TempArray, 1)
        If DataArray(i, 6) = TempArray(j) Then
            SumTimeArr(j) = SumTimeArr(j) + DataArray(i, 3)
        
        End If
    Next j
Next i

For i = LBound(TempArray, 1) To UBound(TempArray, 1)
    Sh.Cells(i + 2, 10) = TempArray(i)
    Sh.Cells(i + 2, 9) = SumTimeArr(i)
    Summ = Summ + SumTimeArr(i)
Next i
Sh.Cells(i + 2, 8) = Summ
Set Sh = Nothing
End Sub
Function RemuveDuplicateFromArray(ByVal Arr As Variant, Ind As Integer) As Variant

Dim TempArray(0 To 1000)
Dim TempArray1()
Dim i As Double
Dim j As Double
Dim k As Double
Dim flag As Boolean
Dim Tmp
k = 0
TempArray(0) = Arr(1, Ind)
For i = LBound(Arr, 1) To UBound(Arr, 1)
    flag = True
    For j = LBound(TempArray, 1) To UBound(TempArray, 1)
        If TempArray(j) = Arr(i, Ind) Then
        flag = False
        Exit For
        End If
    Next j
    If flag Then
        k = k + 1
        TempArray(k) = Arr(i, Ind)
    End If
Next i
ReDim TempArray1(0 To k)
For i = 0 To k
    TempArray1(i) = TempArray(i)
Next i
RemuveDuplicateFromArray = TempArray1
End Function

Function GetArrayWithCommand(Command As String) As Variant
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i As Integer
Dim MyArray()
ReDim tmpArr(0 To 1, 0 To 1)
tmpArr(0, 0) = ""

Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon

Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox "There is not DATA for this time interval!"
    MyArray = tmpArr
    GetArrayWithCommand = MyArray
Else
    
    MyArray = rs.GetRows()
    GetArrayWithCommand = TransposeArray(MyArray)
End If
cn.Close


Set cn = Nothing
Set rs = Nothing
End Function
Function GetArrayFromSQLByTime(Command As String, StartTime As String, EndTime As String, sCon As String) As Variant
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim gf As Field
Dim i As Double
Dim MyArray()
ReDim tmpArr(0 To 1, 0 To 1)
tmpArr(0, 0) = ""
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText

If rs.EOF Then
    MyArray = tmpArr
    GetArrayFromSQLByTime = MyArray
Else
    MyArray = rs.GetRows()
    GetArrayFromSQLByTime = TransposeArray(MyArray)
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Function

Sub AxisDataFromSURVEY_DRAWSURVEY_STATIONWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "Round(a.SRSP_MDEPTH,2), b.SUDR_GXBX, b.SUDR_GYBX, b.SUDR_GZBX, b.SUDR_HXBX*1000000000, b.SUDR_HYBX*1000000000, b.SUDR_HZBX*1000000000"
Frm = "SURVEY_STATION a, SURVEY_DRAW b"
Wher = "a.SUCA_IDENTIFIER = b.SUDR_IDENTIFIER and (a.SRSP_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY a.SRSP_TIME"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ThisWorkbook.Sheets("Survey").Range("A1:CD20000").ClearContents
GetOneShWhithCommandtoWbSURVEY_DRAWSURVEY_STATION "Survey", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbSURVEY_DRAWSURVEY_STATION(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 1).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Attribute VB_Name = "Main"
Option Base 1

Function WinVersion() As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| MSQL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2005 |fffd||fffd||fffd| 2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| getVersion |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (Option Explicit) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| WVG
If CStr(getVersion()) = "Version is 6.1" Or CStr(getVersion()) = "Version is 10.0" Then
WinVersion = "2012"
Else
WinVersion = "2005"
End If
End Function


Sub RunInfoGetOneSh(TabName As String, Collmns As String)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(-|fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| #1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Wb As Workbook
Dim Lst As Collection
Dim i As Integer
Set Wb = ThisWorkbook
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
sSqlCommand = "SELECT " & Collmns & " FROM " & TabName
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)
Range("a1").Select
Dim coloffset As Integer
coloffset = 0
For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If

rs.MoveFirst
Sheets(sSql).Cells(2, 1).CopyFromRecordset rs
Sheets(sSql).Visible = CInt(0)
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Sub RunInfoGetOneShWhithCommand(TabName As String, Command As String)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Wb As Workbook
Dim Lst As Collection
Dim i As Integer

Set Wb = ThisWorkbook
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
'sSql = "SURVEY_STATION"
'sSql = "BHA_RUN"
'sSql = "APP_CASE_BHA_RUN"
'sSql = "BHA_LIFE_BUCKET"
'sSql = "plan_survey_program"
sSqlCommand = Command
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText

If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)

Range("a1").Select
Dim coloffset As Integer
coloffset = 0


For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If

rs.MoveFirst
Sheets(sSql).Cells(2, 1).CopyFromRecordset rs

End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Public Function CollFromRs(Command As String, FildIndex As Integer, sCon As String) As Collection
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Set CollFromRs = New Collection

Dim sHostName As String ' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i As Integer

If sCon = "" Then sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Else
    For i = 1 To rs.RecordCount
        If IsNull(rs.Fields(FildIndex).Value) = False Then
        CollFromRs.Add CStr(rs.Fields(FildIndex).Value)
        End If
        rs.MoveNext
    Next i
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Function


Sub GoToTabs()
Attribute GoToTabs.VB_ProcData.VB_Invoke_Func = "q\n14"
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Worksheets("Tabls").Select
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub


Sub UnhideSheets()
Dim Sh As Worksheet
For Each Sh In ThisWorkbook.Sheets
Sh.Visible = CInt(-1)
Next
ThisWorkbook.Sheets("Tabls").Select
End Sub



Sub RunInfoGetOneShWhithCommandtoWb(TabName As String, Command As String, Wb As Workbook)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Integer
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Wb.Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
'sSql = "SURVEY_STATION"
'sSql = "BHA_RUN"
'sSql = "APP_CASE_BHA_RUN"
'sSql = "BHA_LIFE_BUCKET"
'sSql = "plan_survey_program"
sSqlCommand = Command
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Wb.Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)
Range("a1").Select
Dim coloffset As Integer
coloffset = 0
For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If
rs.MoveFirst
Wb.Sheets(sSql).Cells(2, 1).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Attribute VB_Name = "Maths"
'=======================================================================
' Module        : Maths
'-----------------------------------------------------------------------
' Type          : Code Module
'-----------------------------------------------------------------------
' Description   : Math function
'-----------------------------------------------------------------------
' Properties    :
'-----------------------------------------------------------------------
' Events        :
'-----------------------------------------------------------------------
' LIBRARY       :
' References    :
'-----------------------------------------------------------------------
' OTHER         :
' References    :
'-----------------------------------------------------------------------
' Author        : Andrey Valchuk
'-----------------------------------------------------------------------
' Created       : Dec 14, 2015
'-----------------------------------------------------------------------
' Edited        :
'=======================================================================

Public Function Arccos(x) As Double
    If RoundMath(x, 8) = 1# Then Arccos = 0#: Exit Function
    If RoundMath(x, 8) = -1# Then Arccos = Pi: Exit Function
    Arccos = Atn(-x / Sqr(-x * x + 1)) + 2 * Atn(1)
End Function
Public Function Arcsin(x As Double) As Double
    If (Sqr(1 - x * x) <= 0.000000000001) And (Sqr(1 - x * x) >= -0.000000000001) Then
                                                                                      Arcsin = Pi / 2
    Else
        Arcsin = Atn(x / Sqr(-x * x + 1))
    End If
End Function
Public Function Log10(x As Variant)
    Log10 = Log(x) / Log(10#)
End Function

'*******
'******* Improve Excel RoundMathing function so that it works according to math principles
'*******
Public Function RoundMath(ByVal AnyNumber, ByVal Digits)
    RoundMath = Round((AnyNumber + 1E-99), Digits)
End Function
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserFormFor6Axis"
Attribute VB_Base = "0{60D2C84F-D749-432C-9EF2-963A46347083}{5F201EB3-7CE0-447A-8769-3E52E979D88C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton15_Click()
ImportData6Axis StTimeFromBox(ComboBox2.Value), EndTimeFromBox(ComboBox2.Value)
MsgBox "Done"
End Sub
Private Sub UserForm_Initialize()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim i As Integer
Dim j As Integer
Dim flag As Boolean
Dim Col As Collection
Dim ColDefoult As Collection
Dim ColRuns As Collection
Set Col = New Collection
Set ColDefoult = New Collection
Set ColRuns = New Collection
Set Col = ColFromDatabase("SELECT WLBR_SHORT_NAME, WLBR_IDENTIFIER FROM WELLBORE")
Set ColDefoult = ColFromDatabase("SELECT WLBR_IDENTIFIER FROM USER_DEFAULTS")
For i = 1 To Col.Count
    ComboBox1.AddItem Separator(Col(i), "-", 0)
    If ColDefoult(1) = Separator(Col(i), "-", 1) Then ComboBox1.ListIndex = i - 1
Next i
Set ColRuns = ColFromDatabase("SELECT BHAR_PICKUP_TIME,BHAR_LAYDOWN_TIME, BHAR_IDENTIFIER, BHAR_START_MDEPTH, BHAR_END_MDEPTH, BHAR_OBJECTIVE, BHAR_OBSERVATIONS FROM BHA_RUN WHERE WLBR_IDENTIFIER = '" & ColDefoult(1) & "'")
For i = 1 To ColRuns.Count
    ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
Next i
i = i - 1
ComboBox2.ListIndex = i - 1
Set Col = Nothing
Set ColDefoult = Nothing
Set ColRuns = Nothing

End Sub
Private Sub ComboBox1_Change()
If Label1.Visible Or ComboBox1.ListIndex = -1 Then
Label1.Visible = False
Exit Sub
End If
Dim i As Integer
Dim Col As Collection
Dim ColDefoult As Collection
Dim ColRuns As Collection
Set Col = New Collection
Set ColDefoult = New Collection
Set ColRuns = New Collection
Set ColRuns = ColFromDatabase("SELECT BHAR_PICKUP_TIME,BHAR_LAYDOWN_TIME, BHAR_IDENTIFIER, BHAR_START_MDEPTH, BHAR_END_MDEPTH, BHAR_OBJECTIVE, BHAR_OBSERVATIONS FROM BHA_RUN WHERE WLBR_IDENTIFIER = '" & Separator(ComboBox1_2.List(ComboBox1.ListIndex), "-", 1) & "'")
ComboBox2.ListIndex = -1
For i = 1 To ComboBox2.ListCount - 1
ComboBox2.RemoveItem (0)
Next i
For i = 1 To ColRuns.Count
    ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
Next i
i = i - 1
ComboBox2.ListIndex = i - 1
Set Col = Nothing
Set ColDefoult = Nothing
Set ColRuns = Nothing
End Sub
Private Sub ComboBox2_Change()
If ComboBox2.ListIndex = -1 Then Exit Sub
Dim i As Integer
Dim Run As String
i = ComboBox2.ListIndex
Label1.Caption = Separator(Run, "-", 2)
Label2.Caption = "From " & Separator(Run, "-", 3) & " to " & Separator(Run, "-", 4) & " m"
Label3.Caption = Separator(Run, "-", 5)
Label4.Caption = Separator(Run, "-", 6)
Label5.Caption = Separator(Run, "-", 2)
End Sub

Private Sub CommandButton2_Click()
Dim Sh As Worksheet
Dim trsls As String

Application.ScreenUpdating = True
Application.DisplayAlerts = True
Unload Me
End Sub

Attribute VB_Name = "WVG"
'FUNCTION TO DETERMINE WINDOWS VERSION NUMBER
'Windows 7 should be 6.1 (Windows Vista = 6.0, Windows 7 = 6.1 and Windows 8 = 6.2),  5.1, the internal version number of Windows XP
 Option Explicit
Private Type OSVERSIONINFO
   dwOSVersionInfoSize As Long
   dwMajorVersion As Long
   dwMinorVersion As Long
   dwBuildNumber As Long
   dwPlatformId As Long
   szCSDVersion As String * 128
 End Type

Public Declare Function GetVersionExA Lib "kernel32" (lpVersionInformation As OSVERSIONINFO) As Integer

Public Function getVersion() As String
  Dim osinfo As OSVERSIONINFO
   Dim retvalue As Integer
  osinfo.dwOSVersionInfoSize = 148
   osinfo.szCSDVersion = Space$(128)
   retvalue = GetVersionExA(osinfo)
  getVersion = "Version is " & osinfo.dwMajorVersion & "." & osinfo.dwMinorVersion
End Function

Attribute VB_Name = "????1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "????2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
