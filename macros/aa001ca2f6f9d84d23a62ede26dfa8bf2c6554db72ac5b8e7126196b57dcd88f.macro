Attribute VB_Name = "Chart1"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Option Explicit

Function Compass(Course, Language) As String
Dim a, b, N, S, E, W

If Language = 1 Then b = "b": N = "N": S = "S": E = "E": W = "W"     'English
If Language = 2 Then b = "b": N = "N": S = "S": E = "E": W = "W"     'Italiano - as English
If Language = 3 Then b = "b": N = "N": S = "S": E = "E": W = "W"     'Espanol - as English
If Language = 4 Then b = "z": N = "N": S = "S": E = "O": W = "W"     'Deutsch
If Language = 5 Then b = "t": N = "N": S = "Z": E = "O": W = "W"     'Hollands

a = Int(Course / 360 * 32 + 0.5)
If a = 0 Then Compass = N
If a = 1 Then Compass = N + b + E
If a = 2 Then Compass = N + N + E
If a = 3 Then Compass = N + E + b + N
If a = 4 Then Compass = N + E
If a = 5 Then Compass = N + E + b + E
If a = 6 Then Compass = E + N + E
If a = 7 Then Compass = E + b + N
If a = 8 Then Compass = E
If a = 9 Then Compass = E + b + S
If a = 10 Then Compass = E + S + E
If a = 11 Then Compass = S + E + b + E
If a = 12 Then Compass = S + E
If a = 13 Then Compass = S + E + b + S
If a = 14 Then Compass = S + S + E
If a = 15 Then Compass = S + b + E
If a = 16 Then Compass = S
If a = 17 Then Compass = S + b + W
If a = 18 Then Compass = S + S + W
If a = 19 Then Compass = S + W + b + S
If a = 20 Then Compass = S + W
If a = 21 Then Compass = S + W + b + W
If a = 22 Then Compass = W + S + W
If a = 23 Then Compass = W + b + S
If a = 24 Then Compass = W
If a = 25 Then Compass = W + b + N
If a = 26 Then Compass = W + N + W
If a = 27 Then Compass = N + W + b + W
If a = 28 Then Compass = N + W
If a = 29 Then Compass = N + W + b + N
If a = 30 Then Compass = N + N + W
If a = 31 Then Compass = N + b + W
If a = 32 Then Compass = N
End Function

Function LatLongPosSep(LatA, LongA, Language) As Variant            'Range Output Function
Dim DGLat, MinLat, SecLat, DirLat, DGLongOrg, DGLong, MinLong, SecLong, DirLong
Dim N, S, E, W
Dim NavRes(1 To 1, 1 To 2)

If Language = 1 Then N = "n": S = "s": E = "e": W = "w"     'English
If Language = 2 Then N = "n": S = "s": E = "e": W = "w"     'Italiano
If Language = 3 Then N = "n": S = "s": E = "e": W = "w"     'Espanol
If Language = 4 Then N = "n": S = "s": E = "o": W = "w"     'Deutsch
If Language = 5 Then N = "n": S = "z": E = "o": W = "w"     'Hollands

DGLat = Int(Abs(LatA))
MinLat = Round((Abs(LatA) - DGLat) * 60, 1)
If MinLat = 60 Then MinLat = 0: DGLat = DGLat + 1
If LatA >= 0 Then DirLat = N Else DirLat = S

DGLong = Int(Abs(LongA))
MinLong = Round((Abs(LongA) - DGLong) * 60, 1)
If MinLong = 60 Then MinLong = 0: DGLong = DGLong + 1
If LongA >= 0 Then DirLong = E Else DirLong = W

NavRes(1, 1) = DGLat & "|fffd| " & MinLat & "' " & DirLat
NavRes(1, 2) = DGLong & "|fffd| " & MinLong & "' " & DirLong
LatLongPosSep = NavRes

End Function

Function DirectionQ(LatA, LongA, LatB, LongB)
If LongA = LongB Then LongB = LongB + 0.000000001
If Abs(LongB - LongA) > 180 And LongA < 0 Then LongA = LongA + 360
If Abs(LongB - LongA) > 180 And LongB < 0 Then LongB = LongB + 360

DirectionQ = 4
If LatB >= LatA And LongB > LongA Then DirectionQ = 1
If LatB >= LatA And LongB < LongA Then DirectionQ = 2
If LatB <= LatA And LongB < LongA Then DirectionQ = 3
End Function

Function CorrectBearing(CellValue)
If CellValue > 360 Then CellValue = CellValue - 360
If CellValue < 0 Then CellValue = CellValue + 360
CorrectBearing = CellValue
End Function

Function TravelTime(Distance, AvgSpeed, Language) As String
Dim Day, Hour, Min, d, h, m                     '1 = English, 2 = Italian, 3 = Spanish, 4 = German, 5 = Dutch
If Language = 1 Or Language = 3 Then d = "d": h = "h": m = "m" 'English & Spanish
If Language = 2 Then d = "g": h = "h": m = "m" 'Italian
If Language = 4 Then d = "t": h = "u": m = "m" 'German
If Language = 5 Then d = "d": h = "u": m = "m" 'Dutch

Day = Int(Distance / AvgSpeed / 24)
Hour = Int(Distance / AvgSpeed - Day * 24)
Min = Round((Distance / AvgSpeed - Day * 24 - Hour) * 60, 0)
TravelTime = Day & d & " " & Hour & h & " " & Min & m
End Function

Function RhumbDistDirEllipsRI(LatA, LongA, LatB, LongB, Options) As Variant    'Roberto formula
Dim a, b, Lati, Longi, MLatiA, MLatiB, DirRhumbAB, pi, DirQ
Dim NavRes(1 To 1, 1 To 2) As Double
pi = Atn(1) * 4

'For Area with Meridians +/- 180 dg
If LatA = 90 Then LatA = 89.9999
If LatA = -90 Then LatA = -89.9999
If LatB = 90 Then LatB = 89.9999
If LatB = -90 Then LatB = -89.9999
If LongA = LongB Then LongB = LongB + 0.000000001
If Abs(LongB - LongA) = 0 Then LongA = LongA + 0.000000001
If Abs(LongB - LongA) > 180 And LongA < 0 Then LongA = LongA + 360
If Abs(LongB - LongA) > 180 And LongB < 0 Then LongB = LongB + 360

'Direction in Quarter
DirQ = 4
If LatB >= LatA And LongB > LongA Then DirQ = 1
If LatB >= LatA And LongB < LongA Then DirQ = 2
If LatB <= LatA And LongB < LongA Then DirQ = 3

Longi = (LongB - LongA) * 60    'In minutes
If Longi >= 10800 Then Longi = Longi - 21600
If Longi < -10800 Then Longi = Longi + 21600

'Mercator Latitude Increment: - Note: Log in VB = LN in Excel!
MLatiA = Log(Tan((LatA / 2 + 45) * pi / 180)) * 3437.74483 _
    - 23.11094 * Sin((LatA) * pi / 180)                         'Ellipsoid part
MLatiB = Log(Tan((LatB / 2 + 45) * pi / 180)) * 3437.74483 _
    - 23.11094 * Sin((LatB) * pi / 180)                         'Ellipsoid part
     Lati = MLatiB - MLatiA + 0.04

'Rhumb.Dir in Q1:
    DirRhumbAB = Abs(Atn(Longi / Lati)) * 180 / pi

'Distance corrections:
    a = DirRhumbAB * pi / 180: b = (LatA + LatB) / 2 * pi / 180
    RhumbDistDirEllipsRI = Abs((LatB - LatA) * 60 * Tan(a) / Sin(a))

If Longi = 0 Then RhumbDistDirEllipsRI = Abs(LatB - LatA) * 60
If DirRhumbAB < 45.001 Then RhumbDistDirEllipsRI = Abs((LatB - LatA) * 60 / Cos(a))
If DirRhumbAB > 87.001 Then RhumbDistDirEllipsRI = Abs(Longi * Cos(b) / Sin(a))

If DirQ = 2 Then DirRhumbAB = 360 - DirRhumbAB
If DirQ = 3 Then DirRhumbAB = 180 + DirRhumbAB
If DirQ = 4 Then DirRhumbAB = 180 - DirRhumbAB

NavRes(1, 1) = RhumbDistDirEllipsRI: NavRes(1, 2) = DirRhumbAB

If Options = 0 Then RhumbDistDirEllipsRI = NavRes
If Options = 1 Then RhumbDistDirEllipsRI = RhumbDistDirEllipsRI
If Options = 2 Then RhumbDistDirEllipsRI = DirRhumbAB

End Function


Function GCLatLong(LatA, LongA, Dist, Bearing) As Variant
Dim LatB, LongB, DirQ, pi, R, c, a, TanA, Tanb
Dim NavRes(1 To 2, 1 To 2) As Double        'Note: 1 To 3 if DirQ included!
pi = Atn(1) * 4: R = 180 * 60 / pi          'R Earth in miles

'Direction in Quarter:
DirQ = 1
If Bearing > 270 And Bearing <= 360 Then DirQ = 2
If Bearing > 180 And Bearing <= 270 Then DirQ = 3
If Bearing > 90 And Bearing <= 180 Then DirQ = 4

'Lat/Long/Bearing in Radians
LatA = LatA * pi / 180: LongA = LongA * pi / 180
Dist = Dist / R                             'Angular Distance
Bearing = Bearing * pi / 180

LatB = Application.WorksheetFunction.Asin(Sin(LatA) * Cos(60 / R) _
        + Cos(LatA) * Sin(60 / R) * Cos(Bearing)) 'LatB
c = Cos(60 / R) - Sin(LatA) * Sin(LatB)
a = Sin(Bearing) * Sin(60 / R) * Cos(LatA)
LongB = (Atn(a / c))   'Longitude in dg

NavRes(1, 1) = Application.WorksheetFunction.Asin(Sin(LatA) * Cos(Dist) _
        + Cos(LatA) * Sin(Dist) * Cos(Bearing)) 'LatB
c = Cos(Dist) - Sin(LatA) * Sin(NavRes(1, 1))
a = Sin(Bearing) * Sin(Dist) * Cos(LatA)

NavRes(1, 1) = NavRes(1, 1) * 180 / pi          'Latitude in dg
NavRes(1, 2) = (Atn(a / c) + LongA) * 180 / pi  'Longitude in dg

'MsgBox "atn(a/c) = " & Atn(a / c) & " LongB = " & LongB
If Atn(a / c) / LongB < 0 Then
    If DirQ = 1 Or DirQ = 4 Then NavRes(1, 2) = NavRes(1, 2) + 180
    If DirQ = 2 Or DirQ = 3 Then NavRes(1, 2) = NavRes(1, 2) - 180
End If
If Dist > pi Then NavRes(1, 2) = 180 + NavRes(1, 2)

If NavRes(1, 2) > 180 Then NavRes(1, 2) = NavRes(1, 2) - 360
If NavRes(1, 2) < -180 Then NavRes(1, 2) = NavRes(1, 2) + 360
'NavRes(1, 3) = DirQ
GCLatLong = NavRes
End Function

Function GCDistance(LatA, LongA, LatB, LongB)
Dim pi, R
pi = Atn(1) * 4: R = 180 * 60 / pi                          'R Earth in miles
'For Area with Meridians +/- 180 dg
If LongA < 0 And Abs(LongB - LongA) > 180 Then LongA = LongA + 360
If LongB < 0 And Abs(LongB - LongA) > 180 Then LongB = LongB + 360
If LatA = LatB Then LatB = LatB + 0.000001
'Lat/Long/Bearing in Radians
LatA = LatA * pi / 180: LongA = LongA * pi / 180
LatB = LatB * pi / 180: LongB = LongB * pi / 180

GCDistance = Application.WorksheetFunction.Acos(Sin(LatA) * Sin(LatB) + _
            Cos(LatA) * Cos(LatB) * Cos(LongB - LongA)) * R

End Function

Function GCBearing(LatA, LongA, LatB, LongB)
Dim DirQ, pi, R, c, a
pi = Atn(1) * 4: R = 180 * 60 / pi                          'R Earth in miles

'For Area with Meridians +/- 180 dg
If LongA < 0 And Abs(LongB - LongA) > 180 Then LongA = LongA + 360
If LongB < 0 And Abs(LongB - LongA) > 180 Then LongB = LongB + 360
If Abs(LongB - LongA) = 0 Then LongA = LongA - 0.000001

'Direction in Quarter
DirQ = 4
If LatB >= LatA And LongB > LongA Then DirQ = 1
If LatB >= LatA And LongB < LongA Then DirQ = 2
If LatB <= LatA And LongB < LongA Then DirQ = 3
'Lat/Long/Bearing in Radians
LatA = LatA * pi / 180: LongA = LongA * pi / 180
LatB = LatB * pi / 180: LongB = LongB * pi / 180

c = Cos(LatA) * Sin(LatB) - Sin(LatA) * Cos(LatB) * Cos(LongB - LongA)
a = Sin(LongB - LongA) * Cos(LatB)

GCBearing = Atn(c / a) * 180 / pi
If DirQ = 1 Or DirQ = 4 Then GCBearing = 90 - GCBearing _
        Else GCBearing = 270 - GCBearing
If GCBearing > 360 Then GCBearing = GCBearing - 360
If GCBearing < 0 Then GCBearing = GCBearing + 360

End Function

Function GCLatAtLong(LatA, LongA, BearingA, AtLong) As Variant
Dim pi, a, b, LA, LB    ', GCLatPole, GCLongPole
Dim CoordRes(1 To 2, 1 To 2) As Double
pi = Atn(1) * 4: a = BearingA

If AtLong > 180 Then AtLong = AtLong - 360
If AtLong < -180 Then AtLong = AtLong + 360
LatA = LatA * pi / 180: BearingA = BearingA * pi / 180
CoordRes(1, 1) = Application.WorksheetFunction.Acos _
    (Abs(Sin(BearingA) * Cos(LatA)))
If a > 90 And a < 270 Then CoordRes(1, 1) = -CoordRes(1, 1)
CoordRes(1, 2) = Application.WorksheetFunction.Acos(Tan(LatA) / Tan(CoordRes(1, 1)))
'MsgBox "Long = " & CoordRes(1, 2) * 180 / pi
CoordRes(1, 1) = CoordRes(1, 1) * 180 / pi      'Lat Pole
'If a <= 180 Then CoordRes(1, 2) = LongA + CoordRes(1, 2) * 180 / pi
If a > 180 Then CoordRes(1, 2) = LongA - CoordRes(1, 2) * 180 / pi _
    Else CoordRes(1, 2) = LongA + CoordRes(1, 2) * 180 / pi

If CoordRes(1, 2) > 180 Then CoordRes(1, 2) = CoordRes(1, 2) - 360
If CoordRes(1, 2) < -180 Then CoordRes(1, 2) = CoordRes(1, 2) + 360
CoordRes(2, 1) = -CoordRes(1, 1)
If CoordRes(1, 2) < 0 Then CoordRes(2, 2) = CoordRes(1, 2) + 180 _
    Else CoordRes(2, 2) = CoordRes(1, 2) - 180
'Reverse Max/Min Latitudes & Longitudes
If CoordRes(2, 1) > CoordRes(1, 1) Then
    CoordRes(1, 1) = -CoordRes(1, 1)
    CoordRes(2, 1) = -CoordRes(2, 1)
    b = CoordRes(1, 2)
    CoordRes(1, 2) = CoordRes(2, 2)
    CoordRes(2, 2) = b
End If

LA = CoordRes(1, 1): LB = CoordRes(1, 2)
GCLatAtLong = Atn(Cos((LB - AtLong) * pi / 180) * Tan(LA * pi / 180)) * 180 / pi
End Function

Function GCLatLongPole(LatA, LongA, BearingA) As Variant
Dim pi, a, b      ', GCLatPole, GCLongPole
Dim CoordRes(1 To 2, 1 To 2) As Double
pi = Atn(1) * 4: a = BearingA
LatA = LatA * pi / 180: BearingA = BearingA * pi / 180
CoordRes(1, 1) = Application.WorksheetFunction.Acos _
    (Abs(Sin(BearingA) * Cos(LatA)))
If a > 90 And a < 270 Then CoordRes(1, 1) = -CoordRes(1, 1)
CoordRes(1, 2) = Application.WorksheetFunction.Acos(Tan(LatA) / Tan(CoordRes(1, 1)))
'MsgBox "Long = " & CoordRes(1, 2) * 180 / pi
CoordRes(1, 1) = CoordRes(1, 1) * 180 / pi      'Lat Pole
'If a <= 180 Then CoordRes(1, 2) = LongA + CoordRes(1, 2) * 180 / pi
If a > 180 Then CoordRes(1, 2) = LongA - CoordRes(1, 2) * 180 / pi _
    Else CoordRes(1, 2) = LongA + CoordRes(1, 2) * 180 / pi

If CoordRes(1, 2) > 180 Then CoordRes(1, 2) = CoordRes(1, 2) - 360
If CoordRes(1, 2) < -180 Then CoordRes(1, 2) = CoordRes(1, 2) + 360
CoordRes(2, 1) = -CoordRes(1, 1)
If CoordRes(1, 2) < 0 Then CoordRes(2, 2) = CoordRes(1, 2) + 180 _
    Else CoordRes(2, 2) = CoordRes(1, 2) - 180
'Reverse Max/Min Latitudes & Longitudes
If CoordRes(2, 1) > CoordRes(1, 1) Then
    CoordRes(1, 1) = -CoordRes(1, 1)
    CoordRes(2, 1) = -CoordRes(2, 1)
    b = CoordRes(1, 2)
    CoordRes(1, 2) = CoordRes(2, 2)
    CoordRes(2, 2) = b
End If

GCLatLongPole = CoordRes
End Function

Function GCRhumbDistEllips(LatA, LongA, LatB, LongB, Steps)
Dim pi, DirQ, Q, R, a, b, c, TanA, Tanb, i, LatStepsInit, LongStepsInit, Dphi
Dim LatSteps, LongSteps, DLat, DLong, RhumbDistEllips, GCDistance, GCBearing
Dim Lati, Longi, MLatiA, MLatiB, DirRhumbAB
pi = Atn(1) * 4: R = 180 * 60 / pi                          'R Earth in miles

'GCDistance
'For Area with Meridians +/- 180 dg
If LatA = 90 Then LatA = 89.9999
If LatA = -90 Then LatA = -89.9999
If LatB = 90 Then LatB = 89.9999
If LatB = -90 Then LatB = -89.9999
If LatA = LatB Then LatB = LatB + 0.000001
If Abs(LatB - LatA) = 0 Then LatA = LatA - 0.0001
If Abs(LongB - LongA) = 0 Then LongA = LongA + 0.0001
If Abs(LongB - LongA) = 180 Then LongA = LongA + 0.0001

If LongA < 0 And Abs(LongB - LongA) > 180 Then LongA = LongA + 360
If LongB < 0 And Abs(LongB - LongA) > 180 Then LongB = LongB + 360

'Direction in Quarter
DirQ = 4
If LatB >= LatA And LongB > LongA Then DirQ = 1
If LatB >= LatA And LongB < LongA Then DirQ = 2
If LatB <= LatA And LongB < LongA Then DirQ = 3

'Lat/Long/Bearing in Radians
LatA = LatA * pi / 180: LongA = LongA * pi / 180
LatB = LatB * pi / 180: LongB = LongB * pi / 180

'GCDistance in miles
GCDistance = Application.WorksheetFunction.Acos(Sin(LatA) * Sin(LatB) + _
            Cos(LatA) * Cos(LatB) * Cos(LongB - LongA)) * R
'GCLatLong Steps calculation
GCDistance = GCDistance / Steps / R                           'Angular Step Distance

'GCBearing
c = Cos(LatA) * Sin(LatB) - Sin(LatA) * Cos(LatB) * Cos(LongB - LongA)
a = Sin(LongB - LongA) * Cos(LatB)

GCBearing = Atn(c / a) * 180 / pi
If DirQ = 1 Or DirQ = 4 Then GCBearing = 90 - GCBearing _
        Else GCBearing = 270 - GCBearing
If GCBearing > 360 Then GCBearing = GCBearing - 360
If GCBearing < 0 Then GCBearing = GCBearing + 360

GCBearing = GCBearing * pi / 180                              'GCBearing in dg

'Initial Direction data C & A at distance = 60 miles
LatStepsInit = Application.WorksheetFunction.Asin(Sin(LatA) * Cos(60 / R) _
        + Cos(LatA) * Sin(60 / R) * Cos(GCBearing)) 'LatB
c = Cos(60 / R) - Sin(LatA) * Sin(LatStepsInit)
a = Sin(GCBearing) * Sin(60 / R) * Cos(LatA)
LongStepsInit = (Atn(a / c))                                  'Longitude in dg sign (+/-)

'=====================

For i = 1 To Steps
'GCBearing
c = Cos(LatA) * Sin(LatB) - Sin(LatA) * Cos(LatB) * Cos(LongB - LongA)
a = Sin(LongB - LongA) * Cos(LatB)

GCBearing = Atn(c / a) * 180 / pi
If DirQ = 1 Or DirQ = 4 Then GCBearing = 90 - GCBearing _
        Else GCBearing = 270 - GCBearing
If GCBearing > 360 Then GCBearing = GCBearing - 360
If GCBearing < 0 Then GCBearing = GCBearing + 360
GCBearing = GCBearing * pi / 180                              'GCBearing in dg


'Step Lat & Long Note: All variables in radians
LatSteps = Application.WorksheetFunction.Asin(Sin(LatA) * Cos(GCDistance) _
        + Cos(LatA) * Sin(GCDistance) * Cos(GCBearing)) 'LatB
c = Cos(GCDistance) - Sin(LatA) * Sin(LatSteps)
a = Sin(GCBearing) * Sin(GCDistance) * Cos(LatA)

LatSteps = LatSteps * 180 / pi               'Latitude in dg
LongSteps = (Atn(a / c) + LongA) * 180 / pi  'Longitude in dg
'Long Range Adjustment based on sign (+/-) of LongStepsInit
If Atn(a / c) / LongStepsInit < 0 Then
    If DirQ = 1 Or DirQ = 4 Then LongSteps = LongSteps + 180
    If DirQ = 2 Or DirQ = 3 Then LongSteps = LongSteps - 180
End If

If LongSteps > 180 Then LongSteps = LongSteps - 360
If LongSteps < -180 Then LongSteps = LongSteps + 360

'MsgBox "LatA " & Round(LatA * 180 / pi, 2) & " LongA " & Round(LongA * 180 / pi, 2) & _
    " LatB " & Round(LatSteps, 2) & " LongB " & Round(LongSteps, 2)

'Rhumb Distance from LatA & LongA to LatSteps & LongSteps
'For Area with Meridians +/- 180 dg
LatA = LatA * 180 / pi                 'LatA in dg
LongA = LongA * 180 / pi               'LongA in dg
If LongA < 0 And Abs(LongSteps - LongA) > 180 Then LongA = LongA + 360
If LongSteps < 0 And Abs(LongSteps - LongA) > 180 Then LongSteps = LongSteps + 360

Longi = (LongSteps - LongA) * 60    'In minutes
If Longi >= 10800 Then Longi = Longi - 21600
If Longi < -10800 Then Longi = Longi + 21600

'Mercator Latitude Increment: - Note: Log in VB = LN in Excel!
MLatiA = Log(Tan((LatA / 2 + 45) * pi / 180)) * 3437.74483 _
    - 23.11094 * Sin((LatA) * pi / 180)                         'Ellipsoid part
MLatiB = Log(Tan((LatSteps / 2 + 45) * pi / 180)) * 3437.74483 _
    - 23.11094 * Sin((LatSteps) * pi / 180)                         'Ellipsoid part

     Lati = MLatiB - MLatiA + 0.04

'Rhumb.Dir in Q1:
    DirRhumbAB = Abs(Atn(Longi / Lati)) * 180 / pi

'Distance corrections:
    a = DirRhumbAB * pi / 180: b = (LatA + LatSteps) / 2 * pi / 180
    RhumbDistEllips = Abs((LatSteps - LatA) * 60 * Tan(a) / Sin(a))

If Longi = 0 Then RhumbDistEllips = Abs(LatSteps - LatA) * 60
If DirRhumbAB < 45.001 Then RhumbDistEllips = Abs((LatSteps - LatA) * 60 / Cos(a))
If DirRhumbAB > 87.001 Then RhumbDistEllips = Abs(Longi * Cos(b) / Sin(a))


GCRhumbDistEllips = GCRhumbDistEllips + RhumbDistEllips

LatA = LatA * pi / 180                 'LatA in radians
LongA = LongA * pi / 180               'LongA in radians
LatSteps = LatSteps * pi / 180         'Latitude in radians
LongSteps = LongSteps * pi / 180       'Longitude in radians

LatA = LatSteps: LongA = LongSteps
Next i

End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Change(ByVal Target As Range)
Dim N

'New Waypoints:
If Target.Address = "$N$9" Then
Application.ScreenUpdating = False
    Sheets("RouteData").Select
    N = Range("N9")
    Range("M22").Select
    ActiveCell.Offset(N, 0).Range("A1:F60").Select
    Selection.ClearContents
    
    Range("N9").Select
Application.ScreenUpdating = True
Beep
End If

'Manual Lat is zero
Dim MRangeLat As Range
    Set MRangeLat = Range("M23:M81")
If Not Intersect(Target, MRangeLat) Is Nothing Then
If ActiveCell > 0 Or ActiveCell = "" Then GoTo EndingLat
    N = Right(Target.Address, 2)
    Range("N" & N) = 0.001: Range("O" & N) = "n"
EndingLat:
End If

'Manual Long is zero
Dim MRangeLong As Range
    Set MRangeLong = Range("P23:P81")
If Not Intersect(Target, MRangeLong) Is Nothing Then
If ActiveCell > 0 Or ActiveCell = "" Then GoTo EndingLong
    N = Right(Target.Address, 2)
    Range("Q" & N) = 0.001: Range("R" & N) = "w"
EndingLong:
End If

End Sub

Private Sub Worksheet_BeforeDoubleClick _
   (ByVal Target As Excel.Range, Cancel As Boolean)
Dim a, b, c
    Cancel = True
On Error GoTo Ending
ActiveSheet.Unprotect Password:="JS&RI"
    
If Not Application.Intersect(Target, Range("d13:d16")) _
        Is Nothing Then
    Target.Font.Bold = Not Target.Font.Bold
    Target.Font.Size = 10
    Target.Font.Italic = True
    Target.Font.Color = RGB(255, 255, 0)
    Target.Cells.Interior.Color = RGB(255, 0, 0)
    GoSub Distances
End If
If Not Application.Intersect(Target, Range("h22:i82")) _
        Is Nothing Then
    Target.Font.Size = 10
    Target.Font.Color = RGB(0, 0, 0)
    Target.Cells.Interior.Color = RGB(215, 210, 205)
    GoSub Distances
End If

Application.ScreenUpdating = "True"
    Target.Font.Bold = False
    Target.Font.Size = 10
    Target.Font.Italic = False
    Target.Font.Color = RGB(0, 0, 0)
    Target.Cells.Interior.Color = xlNone

ActiveSheet.Protect Password:="JS&RI"
Exit Sub
'Color Red Value Green Value Blue Value Value from 0 - 255
'Black 0 0 0
'Blue 0 0 255
'Green 0 255 0
'Cyan 0 255 255
'Red 255 0 0
'Magenta 255 0 255
'Yellow 255 255 0
'White 255 255 255
'Note: The lower the figure, the darker the color

Ending:
'MsgBox "Invalid Data Input!"
    Target.Font.Bold = Not Target.Font.Bold
    Target.Font.Size = 10
    Target.Font.Italic = False
    Target.Font.Color = RGB(0, 0, 0)
    Target.Cells.Interior.Color = xlNone

'Application.Speech.Speak ActiveCell
ActiveSheet.Protect
Exit Sub

Distances:
Application.ScreenUpdating = "False"
    a = ActiveCell / 60                     'Distance degrees
    b = ActiveCell * 1.15077944802354       'Distance Statute miles
    c = ActiveCell * 1.852                  'Distance km
    
MsgBox "Dist to Dest = " & Round(ActiveCell, 1) & " Nautical miles" _
    & Chr(13) & Chr(13) & "Dist to Dest = " & Round(a, 3) & "|fffd|" _
    & Chr(13) & Chr(13) & "Dist to Dest = " & Round(b, 1) & " Statute miles" _
    & Chr(13) & Chr(13) & "Dist to Dest = " & Round(c, 1) & " km" _
    & Chr(13) & Chr(13) & "Time to Dest = " & TravelTime(ActiveCell, Range("D9"), Range("U2"))

Return

End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
