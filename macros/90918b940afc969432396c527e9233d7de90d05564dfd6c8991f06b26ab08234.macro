Attribute VB_Name = "Module1"
' Global Declarations:
Public superProApp As Designer.Application
Public superProDoc As Designer.Document

' Module 1 Declarations
Dim var1 As Variant

 
' The functions in the module are used to set AOT, solve, and get the value of a variable
'==============================================================================================
Function MainProductCost(aot As Double) As Double
    Dim dblVal As Double 'declare a double datatype
       
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new main revenue cost ($ /kg)
    superProDoc.GetFlowsheetVarVal VarID.mainRevenueCost_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    MainProductCost = var1
    
End Function

Function ROI(aot As Double) As Double
    Dim dblVal As Double 'declare a double datatype
    
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.ROI_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    ROI = var1
End Function
Function IRRBeforeTaxes(aot) As Double
    Dim dblVal As Double 'declare a double datatype
    
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.IRR_BeforeTaxes_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    IRRBeforeTaxes = var1
End Function
Function IRRAfterTaxes(aot As Double) As Double
    Dim dblVal As Double 'declare a double datatype
    
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.IRR_AfterTaxes_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    IRRAfterTaxes = var1
End Function
Function NetProfit(aot As Double) As Double
    Dim dblVal As Double 'declare a double datatype
    
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.netProfit_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    NetProfit = var1
End Function

Function Revenue(aot As Double) As Double
    Dim dblVal As Double 'declare a double datatype
    
    var1 = dblVal
    
    'Set Annual Operating Time & Solve
    var1 = aot * 3600 'internally AOT is in sec
    superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1
    
    'Solve Simulation Case (Mass and Energy Balances)
    superProDoc.DoMEBalances var1
    
    'Perform Economic Calculations
    superProDoc.DoEconomicCalculations
    
    'Get the new ROI
    superProDoc.GetFlowsheetVarVal VarID.revenue_VID, var1
    dblVal = CDbl(var1) 'double or float
    
    Revenue = var1
    
End Function

Attribute VB_Name = "Module2"
' Module 2 Declarations
Dim var1 As Variant
Dim var2 As Variant
Dim var3 As Variant
Dim str As String
Dim str2 As String
' These functions are used for exchanging operation specific data
'=============================================================================================
Function RejectionCoeff(componentName As String) As Double
    str = CStr("P-13")  'procedure
    str2 = CStr("Ultrafilter")
    
    var2 = CStr(componentName)
    
    superProDoc.GetOperVarVal2 str, str2, VarID.rejectionCoefficient_VID, var1, var2
    RejectionCoeff = CDbl(var1)
End Function

Function SetAndGetDenaturedProduct(componentName As String) As String
    str = CStr("P-13")  'procedure
    str2 = CStr("Ultrafilter")
        
    var1 = CStr(componentName)
    
    superProDoc.SetOperVarVal str, str2, VarID.denaturedProductName_VID, var1
    superProDoc.GetOperVarVal str, str2, VarID.denaturedProductName_VID, var2
    SetAndGetDenaturedProduct = CStr(var2)
End Function

'Functions for Consumable Related Variables
'=============================================================================
Function ConsumableCost(consName As String, consNameType As String) As Double
    var2 = CStr(consName)
    var3 = CStr(consNameType)
    superProDoc.GetFlowsheetVarVal3 VarID.consumableUnitCost_VID, var1, var2, var3
    ConsumableCost = CDbl(var1)
End Function

Function ConsumableBasis(consName As String, consNameType As String) As String
    var2 = CStr(consName)
    var3 = CStr(consNameType)
    
    superProDoc.GetFlowsheetVarVal3 VarID.consumableBasis_VID, var1, var2, var3
    ConsumableBasis = CStr(var1)
End Function

Function SetAndGetConsumableCost(consName As String, consNameType As String, consCost As Double) As Double
    var1 = CDbl(consCost)
    var2 = CStr(consName)
    var3 = CStr(consNameType)
    
    superProDoc.SetFlowsheetVarVal3 VarID.consumableUnitCost_VID, var1, var2, var3
    superProDoc.GetFlowsheetVarVal3 VarID.consumableUnitCost_VID, var1, var2, var3
    SetAndGetConsumableCost = CDbl(var1)
End Function

Function ConsumableReplFreq(equipName As String, consName As String, consNameType As String) As Double
    var2 = CStr(consName)
    var3 = CStr(consNameType)
    str = CStr(equipName)
    
    superProDoc.GetEquipVarVal3 str, VarID.consumableReplFreq_VID, var1, var2, var3
    ConsumableReplFreq = CDbl(var1)
End Function

Function ConsumableReplFreqBasis(equipName As String, consName As String, consNameType As String) As String
    var2 = consName
    var3 = consNameType
    str = CStr(equipName)
    
    superProDoc.GetEquipVarVal3 str, VarID.consumableReplFreqBasis_VID, var1, var2, var3
    ConsumableReplFreqBasis = var1
End Function
Function SetAndGetConsReplFreq(equipName As String, consName As String, consNameType As String, consFrequency As Double) As Double
    
    var1 = CDbl(consFrequency)
    var2 = CStr(consName)
    var3 = CStr(consNameType)
    str = CStr(equipName)
    superProDoc.SetEquipVarVal3 str, VarID.consumableReplFreq_VID, var1, var2, var3
    var1 = 0 ' Reset to 0 so as for testing purposes
    superProDoc.GetEquipVarVal3 str, VarID.consumableReplFreq_VID, var1, var2, var3
    SetAndGetConsReplFreq = CDbl(var1)
End Function

'===================================================================================
'Functions For Stream Related Variables
'===================================================================================
Function GetIngredientFlow(streamName As String, componentName As String) As Double
    
    str = CStr(streamName)
    str2 = CStr(componentName)
    
    superProDoc.GetStreamVarVal str, VarID.componentMassFlow_VID, var1, str2
    GetIngredientFlow = var1
End Function
Function SetAndGetIngredientFlow(streamName As String, componentName As String, compFlow As Double) As Double
    
    str = CStr(streamName)
    str2 = CStr(componentName)
    var1 = CDbl(compFlow)
    superProDoc.SetStreamVarVal str, VarID.componentMassFlow_VID, var1, str2
    superProDoc.GetStreamVarVal str, VarID.componentMassFlow_VID, var2, str2
    SetAndGetIngredientFlow = CDbl(var2)
End Function

Function GetStreamMassFlow(streamName As String) As Double

str = CStr(streamName)

superProDoc.GetStreamVarVal str, VarID.massFlow_VID, var1, str
GetStreamMassFlow = CDbl(var1)
End Function
Function SetAndGetStreamMassFlow(streamName As String, massFlow As Double) As Double

str = CStr(streamName)
var1 = CDbl(massFlow)
superProDoc.SetStreamVarVal str, VarID.massFlow_VID, var1, str
superProDoc.GetStreamVarVal str, VarID.massFlow_VID, var2, str
SetAndGetStreamMassFlow = CDbl(var2)
End Function

'===================================================================================
'General Functions
'===================================================================================
Function RecipeBatchTime() As Double

superProDoc.GetFlowsheetVarVal VarID.batchTime_VID, var1
'Convert from seconds to hours
RecipeBatchTime = var1 / 3600#
End Function
Function GetStreamVolFlow(streamName As String) As Double

str = CStr(streamName)

superProDoc.GetStreamVarVal str, VarID.volFlow_VID, var1, str
GetStreamVolFlow = CDbl(var1)
End Function
Function SetAndGetStreamVolFlow(streamName As String, volFlow As Double) As Double

str = CStr(streamName)
var1 = CDbl(volFlow)
superProDoc.SetStreamVarVal str, VarID.volFlow_VID, var1, str
superProDoc.GetStreamVarVal str, VarID.volFlow_VID, var2, str
SetAndGetStreamVolFlow = CDbl(var2)
End Function

Function SetAndGetThroughput(throughput As Double) As Double
Dim dblVal As Double 'declare a double datatype

var1 = CDbl(throughput)

superProDoc.SetFlowsheetVarVal VarID.annualThroughput_VID, var1

superProDoc.DoMEBalances var1
superProDoc.DoEconomicCalculations

superProDoc.GetFlowsheetVarVal VarID.annualThroughput_VID, var1
SetAndGetThroughput = CDbl(var1)

End Function
Function GetThroughput(InDouble) As Double
Dim dblVal As Double 'declare a double datatype

superProDoc.DoMEBalances var1
superProDoc.DoEconomicCalculations

superProDoc.GetFlowsheetVarVal VarID.annualThroughput_VID, var1
GetThroughput = CDbl(var1)

End Function
Function SetAndGetAOT(aot As Double) As Double
Dim dblVal As Double 'declare a double datatype

var1 = aot * 3600#  'internally AOT is in sec

superProDoc.SetFlowsheetVarVal VarID.AOTAvailable_VID, var1

superProDoc.DoMEBalances var1
superProDoc.DoEconomicCalculations

superProDoc.GetFlowsheetVarVal VarID.AOTAvailable_VID, var1
SetAndGetAOT = var1 / 3600#

End Function
Function errorMsg(variable) As String
var1 = variable

superProDoc.GetCOMErrorMsg var1
errorMsg = var1
End Function



Attribute VB_Name = "Module3"
' Module 3 Declarations
Dim var1 As Variant
Dim var2 As Variant
Dim var3 As Variant
Dim str1 As String
Dim str2 As String
'More Functions for Operation Related Variables
'===============================================================================
Function SetAndGetLinearVelocity(procName As String, opName As String, velocity As Double) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    
    var1 = CDbl(velocity)
    
    superProDoc.SetOperVarVal str1, str2, VarID.linearVelocity_VID, var1
    superProDoc.GetOperVarVal str1, str2, VarID.linearVelocity_VID, var2
    SetAndGetLinearVelocity = CDbl(var2)
End Function

Function SetAndGetRelWashVolume(procName As String, opName As String, relVolume As Double) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var1 = CDbl(relVolume)
    
    superProDoc.SetOperVarVal str1, str2, VarID.relativeWashVolume_VID, var1
    superProDoc.GetOperVarVal str1, str2, VarID.relativeWashVolume_VID, var2
    SetAndGetRelWashVolume = CDbl(var2)
End Function
Function SetAndGetAgentVolumePerL(procName As String, opName As String, stepName As String, volume As Double) As Double
    
    str1 = CStr(procName)
    str2 = CStr(opName)
    var3 = CStr(stepName)
    
    var1 = CDbl(volume)
    
    superProDoc.SetOperVarVal2 str1, str2, VarID.agentVolumePerEquipmentVolume_VID, var1, var3
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentVolumePerEquipmentVolume_VID, var2, var3
    SetAndGetAgentVolumePerL = CDbl(var2)
End Function
Function GetAgentVolumePerVol(procName As String, opName As String, stepName As String) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(stepName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentVolumePerEquipmentVolume_VID, var1, var2
    GetAgentVolumePerVol = CDbl(var1)
End Function

Function GetAgentRate(procName As String, opName As String, stepName As String) As Double
    
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(stepName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentFlowrate_VID, var1, var2
    GetAgentRate = CDbl(var1) * 60 * 1000
End Function
Function GetAgentVolume(procName As String, opName As String, stepName As String) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(stepName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentVolume_VID, var1, var2
    GetAgentVolume = CDbl(var1) * 1000
End Function
Function GetAgentRatePerArea(procName As String, opName As String, stepName As String) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(stepName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentFlowratePerSurface_VID, var1, var2
    GetAgentRatePerArea = CDbl(var1) * 60 * 1000
End Function
Function GetAgentRatePerCircum(procName As String, opName As String, stepName As String) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(stepName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.agentFlowratePerCircumference_VID, var1, var2
    GetAgentRatePerCircum = CDbl(var1) * 60 * 1000
End Function
Function GetLaborNeed(procName As String, opName As String, laborName As String) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(laborName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.laborNeed_VID, var1, var2
    GetLaborNeed = CDbl(var1)
End Function
Function SetAndGetLaborNeed(procName As String, opName As String, laborName As String, laborNeed As Double) As Double
    str1 = CStr(procName)
    str2 = CStr(opName)
    var1 = CDbl(laborNeed)
    var2 = CStr(laborName)
    
    superProDoc.SetOperVarVal2 str1, str2, VarID.laborNeed_VID, var1, var2
    var1 = 0
    superProDoc.GetOperVarVal2 str1, str2, VarID.laborNeed_VID, var1, var2
    SetAndGetLaborNeed = CDbl(var1)
End Function
Function GetLaborUnits(procName As String, opName As String, laborName As String) As String
    str1 = CStr(procName)
    str2 = CStr(opName)
    var2 = CStr(laborName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.laborUnits_VID, var1, var2
    GetLaborUnits = CStr(var1)
End Function
Function GetReactionConversion(procName As String, opName As String, rxnName As String) As Double
    var2 = CStr(rxnName)
    str1 = CStr(procName)
    str2 = CStr(opName)
    
    superProDoc.GetOperVarVal2 str1, str2, VarID.conversion_VID, var1, var2
    GetReactionConversion = CDbl(var1)
End Function


Attribute VB_Name = "Module4"
'Module 4 Declarations
Dim var1 As Variant
Dim var2 As Variant
Dim str1 As String
Dim str2 As String
'Functions for Equipment Related Variables
'===========================================================
Function SetAndGetDiameter(equipName As String, diameter As Double) As Double
    var1 = CDbl(diameter)
    str1 = CStr(equipName)
    superProDoc.SetEquipVarVal str1, VarID.columnDiameter_VID, var1
    var1 = 0 ' Reset to 0 so as for testing purposes
    superProDoc.GetEquipVarVal str1, VarID.columnDiameter_VID, var1
    SetAndGetDiameter = CDbl(var1)
End Function

'======================================================================
' Functions for Flowsheet Variables
'=========================================================================
Function GetSectionElectricityCost(branchName As String, sectionName As String) As Double
    str1 = CStr(branchName)
    str2 = CStr(sectionName)
    
    superProDoc.GetSectionVarVal str1, str2, VarID.annualElectricityCost_VID, var1
    GetSectionElectricityCost = CDbl(var1)
End Function

Function GetSectionLaborCost(branchName As String, sectionName As String) As Double
    str1 = CStr(branchName)
    str2 = CStr(sectionName)
    
    superProDoc.GetSectionVarVal str1, str2, VarID.laborCost_VID, var1
    GetSectionLaborCost = CDbl(var1)
End Function


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Run, 21, 0, MSForms, CommandButton"

Sub Run_Click()
  Dim ws As Worksheet
  Dim aot As Double, increase As Double
  
  If superProApp Is Nothing Then
     MsgBox "First open a SuperPro Designer case file."
     Exit Sub
  End If
  
  Set ws = Worksheets("Parametric Study")
  
  aot = ws.Range("B13")
  increase = ws.Range("B14")
  
  Application.Cursor = xlWait
  Application.DisplayStatusBar = True
  Application.StatusBar = "Please wait while script is running ..."
 
  ws.Range("A20") = "Performing Calculations for"
  ws.Range("A19:A23").Interior.Color = RGB(255, 128, 0)
  ws.Range("A22") = "Annual Operating Time " & aot & " h"
  
  Dim dCell As Range
  For Each dCell In Range("C9:C25")
    
    dCell = aot
    aot = aot + increase
    ws.Range("A22") = "Annual Operating Time " & aot & " h"
    
  Next dCell
  
  ws.Range("A20") = Empty
  ws.Range("A22") = Empty
  ws.Range("A19:A23").Interior.ColorIndex = xlNone
  Application.Cursor = xlDefault
  Application.StatusBar = False
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub OpenSPDFile()
   
    If Not superProApp Is Nothing Then
       Exit Sub
    End If
    Set superProApp = New Designer.Application
    Dim spfFileOne As String
    spfFileOne = Range("B2")
    superProApp.ShowApp
    Set superProDoc = superProApp.OpenDoc(spfFileOne)
End Sub


Sub CloseSPDFile()
    
    If superProDoc Is Nothing Then
        Exit Sub
    End If
    superProDoc.CloseDoc False
    superProApp.CloseApp
    Set superProDoc = Nothing
    Set superProApp = Nothing
    
End Sub


Sub GetErrorMsg()
    Dim var1 As Variant
    var1 = variable

    superProDoc.GetCOMErrorMsg var1
    Dim errorMsg As String
    errorMsg = var1
    Range("B90") = errorMsg
End Sub




' InQuest injected base64 decoded content
' bz{E

INQUEST-PP=macro
