Attribute VB_Name = "Module1"
Dim webArray() As String
Dim webStringSaved As String
Dim historyIndex As Long
Dim calcNwordsSave As Long
Dim randomDictSeqOk As Long
Dim errFirstRandomize As String
Dim lastButtonName As String

Function webService2010(urlAndPars As String)
  Dim xml As Object
  Dim result As String
  Set xml = CreateObject("MSXML2.XMLHTTP.6.0")
  xml.Open "GET", urlAndPars, False
  xml.Send
  webService2010 = xml.responsetext
End Function
Function webService2007(urlAndPars As String)
webService2007 = webService2010(urlAndPars)
End Function

Public Sub excelVersionMy()
   ' fill execell version year code in spreadsheet
   Dim major, pos As Long
   major = "=" & Int(Application.Version) & ","
   convertString = Range("excelVersionInYearCode")
   pos = InStr(1, convertString, major, vbTextCompare)
   If (pos <> 0) Then
      Range("inpExcelVersion") = Mid(convertString, pos - 4, 4)
   Else
      Range("inpExcelVersion") = "-"      ' does not work on Mac Str(Range("ExcelVersionNull"))
   End If
End Sub
Sub setExcelVersionInp(versionYearPar As String)

End Sub
Sub TestRND()
randomDictSeqOkSave = randomDictSeqOk
randomDictSeqOk = 1
Call startWerp
randomDictSeqOk = randomDictSeqOkSave
End Sub


Sub startWerp()
'Dim t0 As Shape
Application.Calculation = xlCalculationManual
Call clearMessages
   If (randomDictSeqOk = 1) Then
      If historyIndex = 99 Then
         historyIndex = 0          'dont store first one
      Else
         historyIndex = historyIndex + 1
         nPlaces = Range("HistoryArray").count
         If (historyIndex > nPlaces) Then
            historyIndex = 1
         End If
         Set currentPlaceCell = Cells(Range("HistoryArray").Row + historyIndex - 1, Range("HistoryArray").Column)
         currentPlaceCell.Value = Range("phraseChosen")
      End If
      If (Range("caseRunLocalOnly") <> 1) Then
          Range("callWebTrigger") = "1"              ' web trigger
      Else
          Range("inpManualThrow") = historyIndex     ' loacl trigger for random
      End If
      If (Range("calcNwords") <> calcNwordsSave) Then
         ' n words in phrase changed, change butoon labels
         'butName = "helpStrengthH3"
         'Set t0 = ActiveWorkbook.Worksheets("Phrase").Shapes(butName)
         ActiveWorkbook.Worksheets("Phrase").Shapes("helpStrengthH1").DrawingObject.Caption = Range("butLabNowWords")
         calcNwordsSave = Range("calcNwords")


      End If
      
   Else
      Range("errMsgWerp") = Range("MsgFirstRandomize")
      Range("errMsgRandom") = Range("MsgErrFirstRand")
   End If
Application.Calculate   'Full
Application.Calculation = xlCalculationAutomatic
End Sub

Sub stopWerp()
Call clearMessages
Range("callWebTrigger") = ""
End Sub

Function CellIsNotVisible(cell As Range)
CellIsNotVisible = Intersect(ActiveWindow.VisibleRange, cell) Is Nothing
End Function

Public Sub helpMy(helpRef As String, Optional msgNum As Integer = -1)
'displays help text in the help message area

If (msgNum = -1) Then
   ' just a single message
   Range("HelpTopic") = helpRef
   Range("HelpWindow") = Range(helpRef).Offset(0, Range("helpLangOffset"))
Else
   ' and array of help buttons, msgNum gives position of help text
   Range("HelpTopic") = helpRef & " " & msgNum
   Range("HelpWindow") = Range(helpRef).Offset(msgNum, Range("helpLangOffset"))
End If
If (CellIsNotVisible(Range("helpFirstM1Cell"))) Then
   Range("helpFirstM1Cell").Activate
   ActiveCell.Show ' make cell visible on screen
End If
End Sub

Sub SetLangNL()
Call helpMy("MsgLangNLset")
Range("inpLanguage") = "NL"
Call butCreate
End Sub
Sub SetLangUK()
Call helpMy("MsgLangUkNotYet")
Range("inpLanguage") = "US"
Call butCreate
End Sub

Public Function setStandardModeX(yesNoPar As String)   ' not working yet see calc
setStandardModeX = Range("AdvancedModeInp")
Call setStandardMode
End Function

Sub setStandardMode()
If (Range("caseAdvancedMode") = 1) Then
   'Range("modeStandardArea").EntireRow.Hidden = False    ' we are in advanced, switch to standard mode
   Range("modeAdvancedArea").EntireRow.Hidden = True
   Range("modeAdvancedTestArea").Font.ColorIndex = 2              ' white make invisible
   On Error Resume Next                    ' delete old button if it exixtst
   ActiveWorkbook.Worksheets("Phrase").Shapes("helpTestModeArea1").Delete
   On Error GoTo 0
   Range("AdvancedModeInp") = Range("langNo")
Else
   'Range("modeStandardArea").EntireRow.Hidden = True    ' we are in standard, switch to advanced mode
   Range("modeAdvancedArea").EntireRow.Hidden = False
      
   '   a = Range("inpTestMode").Font.ColorIndex   ' 56 gray 2= white modeAdvancedTest werkt niet op eclls Range("modeAdvancedTest").Hidden = False
   Range("modeAdvancedTestArea").Font.ColorIndex = 56
   Call butCreateGo("helpTestModeArea", 9, "h")
   Range("AdvancedModeInp") = Range("langYes")
End If
End Sub
Public Function clearMessages()
' clear all system messages
'split string and save it in a VB array globa
Range("errMsgSystem") = ""
Range("errMsgSystem2") = ""
'Range("errMsgRandom") = ""
Range("errMsgWerp") = ""
End Function


Public Function splitAndSave(webString As String)
'split string and save it in a VB array globa
webArray = Split(webString)
webStringSaved = webString
splitAndSave = webStringSaved
End Function


Public Function getSplitArrayVal(index As Long)
' get an element form the saved array, or saved string if index is zero
If (index = 0) Then
   If webStringSaved = "" Then
      getSplitArrayVal = "<" & Range("noneStringForInit") & ">"
   Else
      getSplitArrayVal = "<" & webStringSaved & ">"
   End If
Else
   If (webStringSaved = "") Then       ' for some reason webstring sometimes is not initialized, so do it
      Call splitAndSave(Range("noneStringForInit"))   ' 7777 non existent entry 'none'
   End If
   getSplitArrayVal = webArray(index - 1)
End If

End Function

Public Function splitMy(stringMy As String, indexMy As Integer, sepaMy As String)
' get an element form a splited string
splitAr = Split((stringMy & sepaMy), sepaMy)
If (indexMy = 0) Then
      splitMy = UBound(splitAr)
   Else
      If (indexMy - 1) > UBound(splitAr) Then
         splitMy = ""
      Else
        splitMy = splitAr(indexMy - 1)
      End If
End If
End Function


Public Function ConcatenateAll(rangeMy As Range, charMy As String, Optional ByVal lenMy As Long = 32000) As String
' concatenate strings either N elements or thewhole single range
Dim cell As Range, count As Long
x = ""
count = 0
With ActiveSheet
   For Each cell In rangeMy
      If (count < lenMy) Then
         x = x & cell.Value & charMy
         count = count + 1
      End If
   Next
   ConcatenateAll = Left(x, Len(x) - Len(charMy))
End With
End Function

Public Sub clearonSaves()
' on exit: clear passphrases and words when exiting
Call clearMessages
Application.Calculation = xlCalculationManual
Call clearWords("callWebTrigger", 0)           ' no trigger to get a random numbers  from the web
Call splitAndSave(Range("noneStringForInit")) ' 7777 non existent entry 'none'
Call clearWords("inpNwords", "4")
Call clearWords("HistoryArray", "None")       ' clear history
Call clearWords("PhraseTestx", "")       ' test input, only for debugging
Application.Calculate   'Full
Application.Calculation = xlCalculationAutomatic
randomDictSeqOk = 0
Range("errMsgRandom") = Range("MsgFirstRandomize")
End Sub

Sub initvars()
' called when workbook opened
webString = "7777 7777 7777 7777 7777 7777 7777 7777 7777 7777"    ' 7777 non existent entry 'none'
webArray = Split(webString)                    ' set buffer in VB so excell will copy those values
End Sub


Sub clearWords(toClear As String, clearVal)
' clear a range with a value supplied
If (Range("testSaveOnClose") <> 99999) Then    ' debug
    For Each c In Range(toClear).Cells
        'myCol = c.Column
        'myRow = c.Row
       If (c.HasFormula) Then               ' don't clear cells that have formulas
          Range("errMsgSystem") = Range("errCannotClearFormula")
       Else
          c.Value = clearVal                 ' and clear a cell at a time
        End If
    Next
End If
End Sub


      
       'To initialize an array a of n elements to a randomly shuffled copy of source, both 0-based:
  'a[0] ? source[0]
  'for i from 1 to n - 1 do
      'j ? random integer with 0 ? j ? i
      'if j ? i
          'a[i] ? a[j]
      'a[j] ? source[i]

Sub fillRand()
' fill random column in dictionary and sort it accordingly to random values
Call clearMessages
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False         'turn off screen for speed
Randomize
' fill random number column
If (Range("testSortOnLen") = 1) Then
   For index = 1 To 7776        '=6^5  for testing use length collumn
      Range("randStart").Offset(index, 0) = Range("randStart").Offset(index, 1)
   Next index
Else
   For index = 1 To 7776        '=6^5
      Range("randStart").Offset(index, 0) = Rnd
   Next index
  ' not yet operational                                            'To shuffle an array a of n elements (indices 0..n-1):
'  For index = Range("NumWordsInDicewareDict") - 1 To 1 Step -1    'for i from n - 1 downto 1 do
'     randIndex = Int(Rnd * index)                                             'j ? random integer with 0 <= j <= i
'     t = Range("randStart").Offset(randIndex, 0)                      'exchange a[j] and a[i]
'     Range("randStart").Offset(randIndex, 0) = Range("randStart").Offset(index, 0)
'     Range("randStart").Offset(index, 0) = t
'  Next index
'for (ulong k=n; k>1; --k)
'{
'const ulong i = rand_idx(k);
'swap2(f[k-1], f[i]);
'}

End If

' sort on random collumn (recorded macro)
ActiveWorkbook.Worksheets("Dict").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Dict").Sort.SortFields.Add Key:=Range("dictWordsKey") _
    , SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("Dict").Sort
    .SetRange Range("dictWordsTable")
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With

' and set screen and calculations on again
Application.ScreenUpdating = True        'turn on screen
Application.Calculate   'Full
Application.Calculation = xlCalculationAutomatic
randomDictSeqOk = 1
historyIndex = 99
Range("errMsgRandom") = Range("msgOkNowRandom")
End Sub



Attribute VB_Name = "Module2"
Sub dummy()
If CellIsInVisibleRange(ActiveSheet.Range("A35")) Then
    MsgBox "Cell is visible"
Else
    MsgBox "Cell isn't visible"
End If
' fill in macro to test
End Function
Sub copyStrengthData()
' copyStrengthData Macro
    Range("strengthtable").Select
    Selection.Copy
    Range("strengthTableCopy").Select
    Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _
        , SkipBlanks:=False, Transpose:=False
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
End Sub
Sub butCreate()
Call butCreateGo("ButRandomArea", 12, "h", "fillRand", 80, 1, 2, 0, 1)
Call butCreateGo("ButExitArea", 10, "h", "setStandardMode", 100, 0, 1, 1, 0)
'Call butCreateGo("ButExitArea", 10, "h", "clearonSaves", 100, 0, 1, 1, 0)
Call butCreateGo("ButThrowArea", 12, "h", "startWerp", 65, 1, 1, 0, 1)
Call butCreateGo("ButDoneArea", 12, "h", "stopWerp", 65, 1, 1, 0, 1)
Call butCreateGo("ButLangNLArea", 10, "h", "SetLangNL", 50, 0, 0, 0, 0)
Call butCreateGo("ButLangUKArea", 10, "h", "SetLangUK", 50, 0, 0, 0, 0)
Call butCreateGo("butMakeButArea", 10, "h", "butCreate", 100, 1, 0, 0, 0)
Call butCreateGo("helpStrengthH", 9, "h", , , , , , , 1)
Call butCreateGo("helpTestModeArea", 9, "h")
Call butCreateGo("helpStrengthV", 9, "v", , 100, 1, 0, 0, 0)
Call butCreateGo("helpSentLenth", 9, "h")
Call butCreateGo("HelpSentAnal", 9, "h")
End Sub

Function butDisEnable(disOrEnablePar As Integer)
Call butDisEnableGo("ButRandomArea1", disOrEnablePar)
Call butDisEnableGo("ButThrowArea1", disOrEnablePar)
Call butDisEnableGo("ButDoneArea1", disOrEnablePar)
Call butDisEnableGo("ButExitArea1", disOrEnablePar)
butDisEnable = disOrEnablePar
End Function

Sub butDisEnableGo(butName As String, disOrEnablePar As Integer)
Dim disOrEnable As Boolean

If (disOrEnablePar <> 0) Then
   disOrEnable = True
Else
   disOrEnable = False
End If
On Error Resume Next                    ' if button does not exist
ActiveWorkbook.Worksheets("Phrase").Shapes(butName).Visible = disOrEnable
On Error GoTo 0
End Sub


Sub butCreateGo(cellNamePar As String, fontSizePar As Integer, HorVertPar As String, Optional actionPar As String = "", _
   Optional widenScalePar As Long = 100, _
   Optional widenLeftPar As Long = 0, Optional widenRightPar As Long = 0, _
   Optional widenAbovePar As Long = 0, Optional widenBelowPar As Long = 0, _
   Optional colorPar As Long = 0)
' create buton after deleting if it exists
Dim currentButton As Button
Dim currentCell, currentButtonCells, tfirst As Range
Dim quoteChar, helpID, ButtonName As String
Dim nButtons, widenLeft, widenRight, ScaledLeft, ScaledWidth As Integer
quoteChar = "'"

With ActiveWorkbook.Worksheets("Phrase")
   helpID = cellNamePar & "Text"
   nButtons = .Range(cellNamePar).count        ' number of buttons in range
   Set currentButtonFirstCell = Cells(.Range(cellNamePar).Row, .Range(cellNamePar).Column)
   For butNum = 1 To nButtons
      ButtonName = cellNamePar & butNum
      If (HorVertPar = "h") Then                 ' get next cell either horizontol or vertical area
         Set currentCell = Cells(currentButtonFirstCell.Row, currentButtonFirstCell.Column).Offset(0, butNum - 1)
         Else
         Set currentCell = Cells(currentButtonFirstCell.Row, currentButtonFirstCell.Column).Offset(butNum - 1, 0)
      End If
      If ((currentCell.Value <> "") And (currentCell.Height <> 0)) Then             ' dont put bottons in a range of cells that are empty
         On Error Resume Next                    ' delete old button if it exixtst
         .Shapes(ButtonName).Delete
         On Error GoTo 0
   '     make a button on the current (one) cell in the range
         Set currentButtonCells = .Range(Cells(currentCell.Row - widenAbovePar, currentCell.Column - widenLeftPar), _
                                        Cells(currentCell.Row + widenBelowPar, currentCell.Column + widenRightPar))
         
         tL = currentButtonCells.Left
         tW = currentButtonCells.Width
         ScaledWidth = (widenScalePar * currentButtonCells.Width) / 100
         ScaledLeft = currentButtonCells.Left + (currentButtonCells.Width - ScaledWidth) / 2
         Set currentButton = .Buttons.Add(ScaledLeft, currentButtonCells.Top, ScaledWidth, currentButtonCells.Height)
         currentButton.Font.Size = fontSizePar
         currentButton.Name = ButtonName
         currentButton.Caption = currentCell.Value
         If actionPar = "" Then                             ' add an action macro or help macaro if none specified
            helpIDstr = " """ & helpID & """," & butNum - 1
            Action = quoteChar & "helpMy" & helpIDstr & quoteChar
            Else
            Action = actionPar
         End If
         currentButton.OnAction = Action
         If (butNum = 1 And colorPar = 1) Then
            With currentButton
   
               '.Interior.Color = RGB(0, 255, 0) not suppoted
               '.Font.Bold = True
               .Font.Color = 1
               .Font.ColorIndex = 32 ' 32=blue 31=green
            End With
         End If
       End If
   Next butNum
End With
End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
' clear since we have active macros while openimg
' set macro dependent matters in worksheet, if not default is  manual/non-macro mode
Call excelVersionMy             ' fill excell version info if available
Call butDisEnable(1)            ' make burrons visiable, since macro's  are workong
Range("inpMacrosOn") = Range("langYes")           ' ok we have active macros
Range("inpTestMode") = Range("langNo")
Range("PhraseTestx") = ""                  ' test phrase
Range("errMsgSystem") = ""
Range("errMsgSystem2") = ""
Range("inplocalOnly") = "Internet"
Range("inpManualThrow") = ""
Range("RNDuserDictLenTest") = ""           ' be sure RNT test mode if off (on psuedo user dict len)
Worksheets("Phrase").Activate
Range("inpNwords").Activate
Range("HelpWindow") = Range("errMsgUitlegStartUp")
Call initvars
'Sheets("Phrase")
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
' clear next time we may not have active macros. On exit: clear passphrases and words when exiting
Call butDisEnable(1)            ' disable (hide) buttons, should this sheet be opened without macro's next time
Call clearonSaves
Range("inpMacrosOn") = Range("langNo")
Range("inplocalOnly") = "Off line"               ' als geen macro's geen split Internet werkt dan net
Range("inpTestMode") = Range("langNo")
Range("inpExcelVersion") = Range("ExcelVersionNull") ' clear excel version
Range("PhraseTestx") = ""                         ' test phrase
Range("errMsgSystem") = Range("msgMacroUnavailable")
Range("errMsgSystem2") = Range("msgMacroUnavailable2")
Range("RNDuserDictLenTest") = ""           ' be sure RNT test mode if off (on psuedo user dict len)
Range("inpManualThrow") = ""
Worksheets("Phrase").Activate
Range("inpNwords").Activate
Range("HelpWindow") = Range("errMsgUitlegStartUp")
'Call Workbook_Open
End Sub



' InQuest injected base64 decoded content
' *'"v

INQUEST-PP=macro
