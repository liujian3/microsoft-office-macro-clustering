Attribute VB_Name = "Blad2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Blad3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Blad4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Blad7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Common"
Option Explicit

Sub Status(ByVal sText As String)
  If sText = vbNullString Then
    sText = "Klaar"
  End If
  Range("Status").Offset(0, 0) = sText
  DoEvents
End Sub

Public Sub wait(piSeconds As Integer)
  Dim vNewHour As Variant
  Dim vNewMinute As Variant
  Dim vNewSecond As Variant
  Dim vWaitTime As Variant
  Dim vNowTime As Variant

  vNewHour = Hour(Now())
  vNewMinute = Minute(Now())
  vNewSecond = Second(Now())

  vNowTime = TimeSerial(vNewHour, vNewMinute, vNewSecond)
  vWaitTime = TimeSerial(vNewHour, vNewMinute, vNewSecond + piSeconds)


  While (vNowTime < vWaitTime)
    vNowTime = TimeSerial(Hour(Now()), Minute(Now()), Second(Now()))
    DoEvents
  Wend

End Sub

Public Function chkStr(pvString As Variant) As String
  chkStr = Trim(IIf(IsNull(pvString), "", pvString))
End Function

Public Function chkInt(pvValue As Variant) As Integer
  If (pvValue = "") Then
    pvValue = "0"
  End If
  chkInt = IIf(IsNull(pvValue), 0, pvValue)

End Function

Public Function chkDbl(pvValue As Variant) As Double
  If (Trim(pvValue) = "") Then
    pvValue = "0"
  End If
  chkDbl = IIf(IsNull(pvValue), 0, pvValue)
End Function
Public Function fmtNum(pvNum As Variant) As String

  pvNum = IIf(IsNull(pvNum), 0, pvNum)
  pvNum = IIf(pvNum = "", 0, pvNum)
  fmtNum = VBA.Replace(CStr(pvNum), ",", ".")

End Function

Public Function file2bag(plFile As Long) As Scripting.Dictionary
  Dim bag      As Scripting.Dictionary
  Dim sLine    As String
  Dim sParam   As String
  Dim sValue   As String
  Dim iIdx     As Integer

  Set bag = New Scripting.Dictionary

  Do While Not EOF(plFile)
    Line Input #plFile, sLine

    sLine = Trim(sLine)


    If (Len(sLine) > 0) And (InStr(sLine, "=") > 0) Then
      iIdx = InStr(sLine, "=")
      sParam = Left(sLine, iIdx - 1)
      sParam = Trim(sParam)
      sValue = Right(sLine, Len(sLine) - iIdx)
      sValue = Trim(sValue)

      If (Not bag.exists(sParam)) Then
        Call bag.add(sParam, sValue)
      End If

    End If
  Loop

  Set file2bag = bag
End Function

Public Function getBagValue(pBag As Scripting.Dictionary, psValue As String) As String
  getBagValue = ""
  Dim sLine    As String

  If (pBag.exists(psValue)) Then
    getBagValue = pBag(psValue)
  End If

End Function

Public Function list2collection(psList As String, psSep As String) As ValueCollection
  Dim sList    As String
  Dim sItem    As String
  Dim iPos     As Integer

  Set list2collection = New ValueCollection
  sList = chkStr(psList)
  iPos = 1

  While (iPos > 0)
    iPos = InStr(1, sList, psSep)
    If (iPos = 0) Then
      sItem = sList
    Else
      sItem = Left(sList, iPos - 1)
    End If
    Call list2collection.add(list2collection.Count, sItem)
    sList = Right(sList, Len(sList) - iPos)
  Wend


End Function

Public Function collection2str(pColl As ValueCollection, psSeperator As String, _
                               psItemPrefix As String, psItemPostFix As String) As String
  Dim vItem    As Variant
  Dim i        As Integer

  collection2str = ""

  If (pColl Is Nothing) Then Exit Function

  i = 0

  For Each vItem In pColl
    collection2str = collection2str & psItemPrefix & pColl.getX(vItem) & psItemPostFix & IIf(i < pColl.Count - 1, psSeperator, "")
    i = i + 1
  Next

End Function

Public Function calcPercentage(pdVolT1 As Double, pdVolT2 As Double, pdPercT1 As Double, _
                               pdPercT2 As Double) As Double


  If (pdVolT1 = 0) And (pdVolT2 = 0) Then
    calcPercentage = 0
  Else
    calcPercentage = ((pdVolT1 * pdPercT1) + (pdVolT2 * pdPercT2)) / (pdVolT1 + pdVolT2)
  End If
End Function


Public Function loadFile(psDirectory As String, psFileName As String, pbMultiSelect As Boolean) As String
  Dim fd       As Office.FileDialog
  Set fd = Application.FileDialog(Office.msoFileDialogFilePicker)

  fd.AllowMultiSelect = pbMultiSelect
  fd.Filters.Clear
  Call fd.Filters.add("Sattline-bestanden", "*.csv")
  Call fd.Filters.add("Alle bestanden", "*.*")
  fd.InitialFileName = psDirectory & psFileName
  Call fd.Show

  loadFile = ""
  If (fd.SelectedItems.Count = 0) Then Exit Function

  loadFile = fd.SelectedItems.Item(1)
End Function

Public Sub setValue(pvSheedId As Variant, pRow As Integer, pCol As Variant, pValue As Variant)
  Worksheets(pvSheedId).Cells(pRow, pCol) = pValue
End Sub

Public Function getValue(pvSheedId As Variant, pRow As Integer, pCol As Integer) As Variant
  getValue = Worksheets(pvSheedId).Cells(pRow, pCol)
End Function




Attribute VB_Name = "ConnectionCredentials"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public msDSN   As String
Public msDB    As String
Public msServer As String
Public msUser  As String
Public msPwd   As String
Public msPort  As String
Public msTableSpace As String
Public msCompany As String
Public msDivision As String

Public Function initDB2(psDsn As String, psUser As String, psPwd As String, psTableSpace As String)
  msDSN = psDsn
  msUser = psUser
  msPwd = psPwd
  msTableSpace = psTableSpace
End Function

Public Function initSqlSrv(psServer As String, psDB As String, psUser As String, psPwd As String, psTableSpace As String)
  msServer = psServer
  msDB = psDB
  msUser = psUser
  msPwd = psPwd
  msTableSpace = psTableSpace
End Function

Public Function initAPI(psServer As String, psPort As String, psUser As String, psPwd As String)
  msServer = psServer
  msPort = psPort
  msUser = psUser
  msPwd = psPwd
End Function

Public Function initMWS(psServiceRoot As String, psNSBase As String, psUser As String, psPwd As String, _
                        psCompany As String, psDivision As String)
  msServer = psServiceRoot
  msPort = psNSBase
  msUser = psUser
  msPwd = psPwd
  msCompany = psCompany
  msDivision = psDivision
End Function









Attribute VB_Name = "Error"
Option Explicit

Public Sub handleError(plErrorNumber As Long, psErrorLine As String, psErrorDescription As String, _
                       psForm As String, psFunction As String)
  On Error GoTo APP_Error

  Dim sMsg     As String

  sMsg = " Artikelnummer bestaat niet."

  MsgBox sMsg, vbCritical, "Application Error"

  Exit Sub
APP_Error:
  MsgBox Err.Description
End Sub

'Public Function chkStr(pvString As Variant) As String
'    chkStr = Trim(IIf(IsNull(pvString), "", pvString))
'End Function




Attribute VB_Name = "FrmM3LogIn"
Attribute VB_Base = "0{2F17C80F-007A-4804-BDB0-6BA15E663B38}{EFE4922D-F6A4-46FC-A958-98AB854EAD35}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub Cancel_Click_Click()
  Unload Me
  ThisWorkbook.Close False
End Sub

Private Sub Ok_Click_Click()
  Range("rUserName") = StrUserName
  Range("rPassword") = StrPassword
  Unload Me
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "Languages"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MWS"
Option Explicit

'Public Const MWS_HEADER_NS = "http://mws.intentia.net/mws2"
Public Const MWS_HEADER_NS = "http://lawson.com/ws/credentials"
Public Const WS_TYPE_M3 = "M3"
Public Const WS_TYPE_API = "API"
Public Const WS_TYPE_SQL = "SQL"

Public Const WS_PostFix_API = "Item"

Public mEnv
Public mHdr
Public mBdy
Public mPgm

Public mCredM3 As ConnectionCredentials
Public mCredDB As ConnectionCredentials

Public msMWS   As String
Public msFunction As String
Public msProgram As String
Public msError As String

Private msRequest As String
Private msResponse As String

Private msType As String

Public Function initM3(psMWSName As String, psFunction As String, psProgram As String, _
                       pCredM3 As ConnectionCredentials) As Boolean

  initM3 = init(psMWSName, psFunction, psProgram, WS_TYPE_M3, pCredM3)
End Function

Public Function initAPI(psMWSName As String, psFunction As String, _
                        pCredM3 As ConnectionCredentials) As Boolean

  initAPI = init(psMWSName, psFunction, psFunction & WS_PostFix_API, WS_TYPE_API, pCredM3)
End Function

Public Function initSQL(psMWSName As String, psFunction As String, _
                        pCredM3 As ConnectionCredentials, pCredDB As ConnectionCredentials) As Boolean

  initSQL = init(psMWSName, psFunction, "", WS_TYPE_SQL, pCredM3, pCredDB)
End Function

Private Function init(psMWSName As String, psFunction As String, psProgram As String, _
                      psTYPE As String, pCredM3 As ConnectionCredentials, Optional pCredDB As ConnectionCredentials = Nothing) As Boolean

  init = False

  If (Not checkType(psTYPE)) Then Exit Function

  Set mCredM3 = pCredM3
  Set mCredDB = pCredDB

  msMWS = psMWSName
  msFunction = psFunction
  msProgram = psProgram

  msError = ""
  msRequest = ""
  msResponse = ""

  msType = psTYPE

  Set mEnv = CreateObject("pocketSOAP.Envelope.11")
  mEnv.EncodingStyle = ""

  mEnv.SetMethod psFunction, mCredM3.msPort & msMWS & "/" & msFunction

  Set mHdr = mEnv.Headers.Create("mws", Empty, MWS_HEADER_NS)

  If (isSQL() And Not mCredDB Is Nothing) Then
    mHdr.Nodes.Create "user", pCredDB.msUser, MWS_HEADER_NS
    mHdr.Nodes.Create "password", pCredDB.msPwd, MWS_HEADER_NS
  Else
    mHdr.Nodes.Create "user", pCredM3.msUser, MWS_HEADER_NS
    mHdr.Nodes.Create "password", pCredM3.msPwd, MWS_HEADER_NS
  End If

  '    mHdr.Nodes.Create "company", pCredM3.msCompany, MWS_HEADER_NS
  '    mHdr.Nodes.Create "division", pCredM3.msDivision, MWS_HEADER_NS

  If isAPI() Or isM3() Then
    Set mPgm = mEnv.Parameters.Create(msProgram, Null, mEnv.Uri)
  Else
    Set mPgm = Nothing
  End If

  init = True
End Function


Public Function addParameter(pvParam As Variant, pvValue As Variant)
  If (isM3() Or isAPI()) Then
    mPgm.Nodes.Create pvParam, pvValue, mEnv.Uri
  Else
    mEnv.Parameters.Create pvParam, pvValue, mEnv.Uri
  End If
End Function

Public Function getLastError() As String
  getLastError = msError
End Function

Public Function execute(Optional pbShowError As Boolean = True) As Boolean
  Dim http
  Dim mc       As Variant
  Dim sMsg     As String
  On Error GoTo MWS_Error

  Set http = CreateObject("pocketSOAP.HTTPTransport")
  http.Authentication mCredM3.msUser, mCredM3.msPwd
  http.SOAPAction = ""


  msRequest = mEnv.Serialize
  'Debug.Print msRequest
  http.Timeout = 300000
  http.Send mCredM3.msServer & msMWS, mEnv.Serialize

  mEnv.Parse (http)

  msResponse = mEnv.Serialize

  execute = True
  Exit Function
MWS_Error:
  execute = False

  msResponse = mEnv.Serialize
  msError = Err.Description
  '    Debug.Print msError
  If (pbShowError) Then

    'Call Error.handleError(Err.Number, Err.Source, Err.Description, "MWS", "execute")
  End If
End Function

Private Function getMWSError(psErrStr As String) As String
  Dim iStart   As Integer
  Dim iEnd     As Integer
  iStart = InStr(psErrStr, "<faultstring")
  iEnd = InStr(psErrStr, "</faultstring>")

  getMWSError = Mid(psErrStr, iStart, Len(psErrStr) - iEnd)

End Function

Private Function checkType(psTYPE As String) As Boolean
  checkType = (psTYPE = WS_TYPE_M3) Or (psTYPE = WS_TYPE_API) Or (psTYPE = WS_TYPE_SQL)
End Function

Private Function isAPI() As Boolean
  isAPI = (msType = WS_TYPE_API)
End Function

Private Function isSQL() As Boolean
  isSQL = (msType = WS_TYPE_SQL)
End Function

Private Function isM3() As Boolean
  isM3 = (msType = WS_TYPE_M3)
End Function

Public Function getRequest() As String
  getRequest = msRequest
End Function

Public Function getResponse() As String
  getResponse = msResponse
End Function

Public Function getXMLString() As String
  getXMLString = mEnv.Serialize
End Function

Public Function CredentialsM3() As ConnectionCredentials
  Set CredentialsM3 = mCredM3
End Function

Public Function CredentialsDB() As ConnectionCredentials
  Set CredentialsDB = mCredDB
End Function

Public Function response2collection() As WSResultList
  Dim mtx      As New WSResultList

  Dim doc      As New DOMDocument
  Dim body
  Dim Response
  Dim collection
  Dim Item
  Dim element

  Dim sField   As String
  Dim vValue   As Variant

  On Error GoTo XML_Error
  Call doc.LoadXML(msResponse)

  Call mtx.init(msFunction, msMWS)

  Set response2collection = mtx

  Set body = doc.DocumentElement.FirstChild
  Set Response = body.FirstChild

  If (msType = MWS.WS_TYPE_API) Then
    Set collection = body.FirstChild
  End If

  If (msType = MWS.WS_TYPE_SQL) Then
    Set collection = Response.FirstChild
  End If

  For Each Item In collection.ChildNodes()

    For Each element In Item.ChildNodes()
      sField = chkStr(element.BaseName)
      vValue = element.Text

      Call mtx.addField(sField, vValue)
    Next

    Call mtx.addFields2Item

  Next

  Set response2collection = mtx
  Exit Function
XML_Error:
  Set response2collection = Nothing
End Function


Attribute VB_Name = "ObjectCollection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mbagData As Scripting.Dictionary

Public Function add(pvKey As Variant, pobjData As Variant) As Boolean
  add = False

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (Not mbagData.exists(pvKey)) Then
    If Not (pobjData Is Nothing) Then
      Call mbagData.add(pvKey, pobjData)
      add = True
    End If
  End If
End Function

Public Function update(pvKey As Variant, pOjbData As Variant)
  If (exists(pvKey)) Then
    Call remove(pvKey)
  End If

  Call add(pvKey, pOjbData)

End Function

Public Function remove(pvKey As Variant)
  If mbagData Is Nothing Then Exit Function

  If (mbagData.exists(pvKey)) Then
    Call mbagData.remove(pvKey)
  End If
End Function

Public Function Data() As Scripting.Dictionary
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  Set Data = mbagData
End Function

Public Function Count() As Integer
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  Count = mbagData.Count
End Function

Public Function getX(pvKey) As Variant
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData.exists(pvKey)) Then
    Set getX = mbagData(pvKey)
  Else
    Set getX = Nothing
  End If

End Function

Public Function exists(pvKey) As Boolean
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData Is Nothing) Then
    exists = False
  Else
    exists = mbagData.exists(pvKey)
  End If
End Function

Public Function toString() As String
  Dim vKey     As Variant

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  toString = ""

  For Each vKey In mbagData
    toString = toString & vKey & vbCrLf
  Next
End Function

Attribute VB_Name = "RDNCodes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "R_LWS"
Option Explicit
Private Const csNameSpace As String = "ExcelReturnOrder"
Public Function In_Confirm(psORNO As String, _
                           pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "Confirm", pCredM3)
  Call MWS.addParameter("ORNO", psORNO)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_Confirm = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: Confirm")
End Function

Public Function GetFinancial( _
       pcCONO As String, _
       psCUNO As String, _
       psDIVI As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "GetFinancial", pCredM3)
  Call MWS.addParameter("CONO", pcCONO)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("DIVI", psDIVI)
  If (Not MWS.execute(False)) Then
    Exit Function
  End If

  Set GetFinancial = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function

Public Function GetOrderInfo( _
       pcCONO As String, _
       psCUNO As String, _
       psDIVI As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "GetOrderInfo", pCredM3)
  Call MWS.addParameter("CONO", pcCONO)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("DIVI", psDIVI)
  If (Not MWS.execute(False)) Then
    Exit Function
  End If

  Set GetOrderInfo = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "GetOrderInfo")
End Function

Public Function In_AddBatchText(psCONO As String, _
                                psORNO As String, _
                                psTYPE As String, _
                                psTYTR As String, _
                                psPARM As String, _
                                psTXEI As String, _
                                pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "AddBatchText", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("ORNO", psORNO)
  Call MWS.addParameter("TYPE", psTYPE)
  Call MWS.addParameter("TYTR", psTYTR)
  Call MWS.addParameter("PARM", psPARM)
  Call MWS.addParameter("TXEI", psTXEI)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_AddBatchText = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: AddBatchText")
End Function
Public Function LstAddressNumbers( _
       psCONO As String, _
       psCUNO As String, _
       pCredM3 As ConnectionCredentials, _
       pCredDB As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "LstAddressNumbers", pCredM3, pCredDB)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("CONO", psCONO)
  If (Not MWS.execute()) Then
    Exit Function
  End If

  Set LstAddressNumbers = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function
Public Function In_AddBatchLine(psORNO As String, _
                                psITNO As String, _
                                psORQP As String, _
                                psSAPR As String, _
                                psRSCD As String, _
                                pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "AddBatchLine", pCredM3)
  Call MWS.addParameter("ORNO", psORNO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("ORQT", psORQP)
  Call MWS.addParameter("SAPR", psSAPR)
  Call MWS.addParameter("RSCD", psRSCD)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_AddBatchLine = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: AddBatchLine")
End Function

Public Function In_AddBatchHead(psCONO As String, _
                                psCUNO As String, _
                                psORTP As String, _
                                psFACI As String, _
                                psADID As String, _
                                psWCON As String, _
                                pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "AddBatchHead", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ORTP", psORTP)
  'Call MWS.addParameter("RLDT", psRLDT)
  Call MWS.addParameter("FACI", psFACI)
  Call MWS.addParameter("ADID", psADID)
  Call MWS.addParameter("WCON", psWCON)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_AddBatchHead = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: AddBatchHead")
End Function

Public Function GetSalesPriceSalesStat1(psCONO As String, _
                                        psDIVI As String, _
                                        psFACI As String, _
                                        psCUCD As String, _
                                        psCUNO As String, _
                                        psITNO As String, _
                                        psIVQT As String, _
                                        psIVDT As String, _
                                        pCredM3 As ConnectionCredentials, _
                                        pCredDB As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "GetSalesPriceSalesStat1", pCredM3, pCredDB)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("DIVI", psDIVI)
  Call MWS.addParameter("FACI", psFACI)
  Call MWS.addParameter("CUCD", psCUCD)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("IVQT", psIVQT)
  Call MWS.addParameter("IVDT", psIVDT)

  If (Not MWS.execute(True)) Then Exit Function

  Set GetSalesPriceSalesStat1 = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetSalesPriceSalesStat1")
End Function
Public Function GetSalesPriceSalesStat2(psCONO As String, _
                                        psDIVI As String, _
                                        psFACI As String, _
                                        psCUCD As String, _
                                        psCUNO As String, _
                                        psITNO As String, _
                                        psIVDT As String, _
                                        pCredM3 As ConnectionCredentials, _
                                        pCredDB As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "GetSalesPriceSalesStat2", pCredM3, pCredDB)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("DIVI", psDIVI)
  Call MWS.addParameter("FACI", psFACI)
  Call MWS.addParameter("CUCD", psCUCD)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("IVDT", psIVDT)

  If (Not MWS.execute(True)) Then Exit Function

  Set GetSalesPriceSalesStat2 = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetSalesPriceSalesStat2")
End Function

Public Function GetSalesPriceSalesStat3(psCONO As String, _
                                        psDIVI As String, _
                                        psFACI As String, _
                                        psCUCD As String, _
                                        psCUNO As String, _
                                        psITNO As String, _
                                        psIVQT As String, _
                                        psIVDT As String, _
                                        pCredM3 As ConnectionCredentials, _
                                        pCredDB As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "GetSalesPriceSalesStat3", pCredM3, pCredDB)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("DIVI", psDIVI)
  Call MWS.addParameter("FACI", psFACI)
  Call MWS.addParameter("CUCD", psCUCD)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("IVQT", psIVQT)
  Call MWS.addParameter("IVDT", psIVDT)

  If (Not MWS.execute(True)) Then Exit Function

  Set GetSalesPriceSalesStat3 = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetSalesPriceSalesStat3")
End Function
Public Function GetSalesPriceSalesStat4(psCONO As String, _
                                        psDIVI As String, _
                                        psFACI As String, _
                                        psCUCD As String, _
                                        psCUNO As String, _
                                        psITNO As String, _
                                        psIVQT As String, _
                                        psIVDT As String, _
                                        pCredM3 As ConnectionCredentials, _
                                        pCredDB As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "GetSalesPriceSalesStat4", pCredM3, pCredDB)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("DIVI", psDIVI)
  Call MWS.addParameter("FACI", psFACI)
  Call MWS.addParameter("CUCD", psCUCD)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("IVQT", psIVQT)
  Call MWS.addParameter("IVDT", psIVDT)

  If (Not MWS.execute(True)) Then Exit Function

  Set GetSalesPriceSalesStat4 = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetSalesPriceSalesStat4")
End Function
Public Function In_GetAddress(psCONO As String, _
                              psCUNO As String, _
                              psADRT As String, _
                              psADID As String, _
                              pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "GetAddress", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ADRT", psADRT)
  Call MWS.addParameter("ADID", psADID)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_GetAddress = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetAddress")
End Function

Public Function In_Get(psCONO As String, _
                       psITNO As String, _
                       psLNCD As String, _
                       pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "GetItmBasic", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("ITNO", psITNO)
  Call MWS.addParameter("LNCD", psLNCD)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_Get = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: In_Get")
End Function
Public Function Confirm( _
       psORNO As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error
  Call MWS.initAPI(csNameSpace, "Confirm", pCredM3)
  Call MWS.addParameter("ORNO", psORNO)

  If (Not MWS.execute(False)) Then
    Exit Function
  End If

  Set Confirm = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function
Public Function GetOrderNo( _
       psCONO As String, _
       psORNO As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error
  Call MWS.initAPI(csNameSpace, "GetOrderNo", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("ORNO", psORNO)

  If (Not MWS.execute()) Then
    Exit Function
  End If

  Set GetOrderNo = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function

Public Function GetOrderLineData( _
       psCONO As String, _
       psORNO As String, _
       psPONR As String, _
       psPOSX As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error
  Call MWS.initAPI(csNameSpace, "GetOrderLineData", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("ORNO", psORNO)
  Call MWS.addParameter("PONR", psPONR)
  Call MWS.addParameter("POSX", psPOSX)
  If (Not MWS.execute()) Then
    Exit Function
  End If

  Set GetOrderLineData = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function
Public Function In_GetAddressNummers(psCONO As String, _
                                     psCUNO As String, _
                                     psADRT As String, _
                                     pCredM3 As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initAPI(csNameSpace, "GetAddress", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("CUNO", psCUNO)
  Call MWS.addParameter("ADRT", psADRT)
  ' Call MWS.addParameter("ADID", psADID)

  If (Not MWS.execute(True)) Then Exit Function

  Set In_GetAddressNummers = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetAddress")
End Function

Public Function GetBatchHead( _
       psCONO As String, _
       psORNO As String, _
       pCredM3 As ConnectionCredentials) As WSResultList
  On Error GoTo LWS_Error
  Call MWS.initAPI(csNameSpace, "GetBatchHead", pCredM3)
  Call MWS.addParameter("CONO", psCONO)
  Call MWS.addParameter("ORNO", psORNO)

  If (Not MWS.execute(False)) Then
    Exit Function
  End If

  Set GetBatchHead = MWS.response2collection()
  Exit Function
LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "LWS", "loadItemData")
End Function
Public Function GetLevNr(psRIDN As String, _
                         pCredM3 As ConnectionCredentials, _
                         pCredDB As ConnectionCredentials) As WSResultList

  On Error GoTo LWS_Error

  Call MWS.initSQL(csNameSpace, "GetLevNr", pCredM3, pCredDB)
  Call MWS.addParameter("RIDN", psRIDN)

  If (Not MWS.execute(True)) Then Exit Function

  Set GetLevNr = MWS.response2collection()
  Exit Function

LWS_Error:
  Call Error.handleError(Err.Number, Err.Source, Err.Description, "Ter info: module LWS", "Ter info: GetLevNr")
End Function
Attribute VB_Name = "R_NL"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
  If Target.address = "$C$24" Then [c26].Select
  If Target.address = "$C$29" Then [B43].Select
  If Target.address = "$J$26" Then [h27].Select
  On Error GoTo Einde
  'If ActiveCell.Validation.InCellDropdown = True Then ActiveCell.Offset(1, 0).Select
Einde:
End Sub

Attribute VB_Name = "R_OphalenM3"
Option Explicit
Sub ResetImportM3()
  Dim Msg, Style, Title, Help, Ctxt, Response, MyString
  Msg = "Je gaat nu alle ingevoerde gegevens wissen. Wilt je doorgaan?"
  Style = vbYesNo + vbCritical + vbDefaultButton2
  Title = "Formulier wissen"
  Help = "DEMO.HLP"
  Ctxt = 1000

  Response = MsgBox(Msg, Style, Title, Help, Ctxt)
  If Response = vbYes Then          ' Gebruiker koos Ja.
    ActiveSheet.Unprotect
    [d2:d4,d6:d8,d12:d33,j27,i28:j28,h30:k32].ClearContents
    Range("d44:d" & 44 + [a44].Value).Interior.Color = RGB(192, 192, 192)
    Range("g44:g" & 44 + [a44].Value).Interior.Color = ColorConstants.vbYellow
    Range("b44:l" & 44 + [a44].Value).ClearContents
    [LNDC].Clear
    [d13].Select
    ActiveSheet.Protect
  Else          ' Gebruiker koos Nee.

  End If
End Sub
Sub ImportM3()
  '[i43:i500,k43:k500].ClearContents

  ArtikelNummer
  Uit_GetAddress
  Uit_GetCustomerInfo  'fetch customer info first
  Uit_GetCustomerOrderInfo
  Uit_Get  'customer language dependent
  Uit_GetSalesPrice  'fetch prices and checks
  Status vbNullString
End Sub
Sub OphalenAdresNummers()
  [z:aa].ClearContents
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim aa        As Range
  Call GeneralInit
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")
  Set wsResult = R_LWS.LstAddressNumbers("1", [CUNO], credM3, credDB)
  If (wsResult Is Nothing) Then
  Else
    [z1] = wsResult.getItemCnt
    For Each aa In Range("aa1:aa" & [z1])
      aa = wsResult.getCurrField("ADID")
      wsResult.nextResult
    Next
  End If
  If msError <> "" Then
    MsgBox msError, vbInformation, "Information"
    Exit Sub
  End If
  
  Set wsResult = Nothing
End Sub

Sub Uit_GetCustomerInfo()
  ActiveSheet.Unprotect
  Status "Klantinfo ophalen..."
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim mc       As Range
  Dim DatumText As String
  Dim Telitems As Range
  R_Settings.GeneralInit
  If [CUNO] = "" Then
    MsgBox ("Geen klant nummer")
    Exit Sub
  End If
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")
  [i44:i500,k44:k500].ClearContents
  Set wsResult = GetFinancial("1", [CUNO], "001", credM3)   'Valuta ophalen
  If Not (wsResult Is Nothing) Then
    [CUCD] = wsResult.getCurrField("CUCD")
    [LNCD] = wsResult.getCurrField("LNCD")
    [CONO] = wsResult.getCurrField("CUNM")
    Set wsResult = Nothing
  Else
    [CONO] = "Onbekende klant"
    Exit Sub
  End If
  ActiveSheet.Protect
End Sub

Sub Uit_GetCustomerOrderInfo()
  ActiveSheet.Unprotect
  Status "Klantinfo ophalen..."
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim mc       As Range
  Dim DatumText As String
  Dim Telitems As Range
  R_Settings.GeneralInit
  If [CUNO] = "" Then
    MsgBox ("Geen klant nummer")
    Exit Sub
  End If
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")
  Set wsResult = GetOrderInfo("1", [CUNO], "001", credM3)   'Retourrecht ophalen
  If Not (wsResult Is Nothing) Then
    [DIGC] = wsResult.getCurrField("DISY")
    
    If ([DIGC] = "RMA DISCOU") Then
      [DIGC].Interior.Color = ColorConstants.vbRed
    Else
      [DIGC] = ""
      [DIGC].Interior.Color = RGB(255, 255, 0)
    End If
    
    Set wsResult = Nothing
  End If
  ActiveSheet.Protect
End Sub

Sub Uit_GetSalesPrice()
  ActiveSheet.Unprotect
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim mc       As Range
  Dim DatumText As String
  Dim Telitems As Range
  R_Settings.GeneralInit
  Dim dCount   As Long

  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")

  DatumText = Format(Date - 730, "YYYYMMDD")
  For Each mc In Range("s_ITNO").Resize([a44])   '1
    Status "Artikel prijs " + mc.Text
    If mc <> "" Then
      'added 121018 Hdk
      dCount = Abs(CLng(mc.Offset(, 4)))

      Set wsResult = GetSalesPriceSalesStat1("1", "100", "100", [CUCD], [CUNO], mc.Text, Trim(Str(dCount)), DatumText, credM3, credDB)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 7) = wsResult.getCurrField("SAPR")
        End If
      End If
    End If
  Next
  Set wsResult = Nothing

  For Each mc In Range("s_ITNO").Resize([a44])   '2
    Status "Levering info " + mc.Text
    If mc <> "" And mc.Offset(, 7) = "" Then
      Set wsResult = GetSalesPriceSalesStat2("1", "100", "100", [CUCD], [CUNO], mc.Text, DatumText, credM3, credDB)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 7) = wsResult.getCurrField("SAPR")
          mc.Offset(, 9) = "Levering in de afgelopen 2 jaar, met te kleine hoeveelheid"
          'mc.Offset(, 6) = ""
        End If
      End If
    End If
  Next
  Set wsResult = Nothing

  For Each mc In Range("s_ITNO").Resize([a44])   '3
    Status "Levering info 2: " + mc.Text
    If mc <> "" And mc.Offset(, 7) = "" And mc.Offset(, 9) = "" Then

      dCount = Abs(CLng(mc.Offset(, 4)))
      Set wsResult = GetSalesPriceSalesStat3("1", "100", "100", [CUCD], [CUNO], mc.Text, Trim(Str(dCount)), DatumText, credM3, credDB)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 7) = wsResult.getCurrField("SAPR")
          mc.Offset(, 9) = "Levering met voldoende hoeveelheid, maar ouder dan 2 jaar"
          'mc.Offset(, 6) = ""
        End If
      End If
    End If
  Next
  Set wsResult = Nothing

  For Each mc In Range("s_ITNO").Resize([a44])    '4
    Status "Levering info 3 " + mc.Text
    If mc <> "" And mc.Offset(, 7) = "" And mc.Offset(, 9) = "" Then
      dCount = Abs(CLng(mc.Offset(, 4)))
      Set wsResult = GetSalesPriceSalesStat4("1", "100", "100", [CUCD], [CUNO], mc.Text, Trim(Str(dCount)), DatumText, credM3, credDB)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 7) = wsResult.getCurrField("SAPR")
          mc.Offset(, 9) = "Geen levering aanwezig van voldoende omvang"
          'mc.Offset(, 6) = ""
        End If
      End If
    End If
  Next
  Set wsResult = Nothing

  Status "Eind controle..."
  For Each mc In Range("s_ITNO").Resize([a44])    '4
    If mc <> "" And mc.Offset(, 7) = "" And mc.Offset(, 9) = "" Then
      mc.Offset(, 9) = "Geen levering aanwezig"
    Else
    End If
  Next
  For Each mc In Range("s_ITNO").Resize([a44])   '4
    If mc <> "" And mc.Offset(, 1) = "" Then
      mc.Offset(, 9) = "NOK"
    Else
    End If
  Next
  For Each mc In Range("s_ITNO").Resize([a44])   '4
    If mc <> "" And mc.Offset(, 1) <> "" And mc.Offset(, 9) = "NOK" Then
      mc.Offset(, 9) = ""
    Else
    End If
  Next
  CheckReason
  OphalenAdresNummers
  ActiveSheet.Protect
End Sub

Sub Uit_GetAddress()
  If Range("ADID") > 0 Then
    Dim wsResult As WSResultList
    Dim credM3 As New ConnectionCredentials
    Dim credDB As New ConnectionCredentials

    R_Settings.GeneralInit
    Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
    Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")

    Set wsResult = R_LWS.In_GetAddress(R_Settings.msCONO, Range("CUNO"), "1", Range("ADID"), credM3)
    If Not (wsResult Is Nothing) Then  'lus is eigenlijk niet nodig omdat het slechts 1 klant betreft
      If (wsResult.getItemCnt > 0) Then
        Range("CUNM") = wsResult.getCurrField("CUNM")
        Range("CUA1") = wsResult.getCurrField("CUA1")
        Range("PONO") = wsResult.getCurrField("PONO")
        Range("TOWN") = wsResult.getCurrField("TOWN")
        Range("CSCD") = wsResult.getCurrField("CSCD")
        wsResult.nextResult
      End If
    End If
    Set wsResult = Nothing
  Else
  End If
End Sub

Sub Uit_Get()
  ActiveSheet.Unprotect
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim mc       As Range

  R_Settings.GeneralInit
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")

  For Each mc In Range("s_ITNO").Resize([a44])
    If mc <> "" Then
      Status "Artikel omschrijving voor " + mc.Text
      Set wsResult = R_LWS.In_Get(R_Settings.msCONO, mc.Text, [LNCD], credM3)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 1) = wsResult.getCurrField("STAT")
          mc.Offset(, 2) = wsResult.getCurrField("ITDS")
          wsResult.nextResult
        End If
      End If
      Set wsResult = R_LWS.In_Get(R_Settings.msCONO, mc.Text, "NL", credM3)
      If Not (wsResult Is Nothing) Then
        If (wsResult.getItemCnt > 0) Then
          mc.Offset(, 3) = wsResult.getCurrField("ITDS")
          wsResult.nextResult
        End If
      End If
      If mc.Offset(, 2) = "" Then
        mc.Offset(, 2) = "ARTIKELNUMMER BESTAAT NIET"
        mc.Offset(, 2).Interior.Color = ColorConstants.vbRed
      Else
        mc.Offset(, 2).Interior.Color = RGB(192, 192, 192)
      End If
    
    End If
  Next
  Set wsResult = Nothing
  ActiveSheet.Protect
End Sub
Sub ArtikelNummer()
  'Application.ScreenUpdating = False
  Dim mc As Range, DatumText As String
  Dim Telitems As Range
  Status "Controle artikelnummers..."
  For Each mc In Range("s_ITNO").Resize([a44])    '1
    If Len(mc.Offset(0, 0)) = 5 Then mc.Offset(0, 0) = "8711252" & mc.Offset(0, 0)
  Next mc
End Sub

Attribute VB_Name = "R_Settings"
Option Explicit
Public msServiceRoot As String
Public msNSBase As String
Public msUserName As String
Public msPswd  As String
Public msCONO  As String
Public msFACI  As String
Public msDIVI  As String
Public msITNO  As String
Public msPLPN  As String
Public pPath   As String
Public msTXVR  As String
Public msContinental As String
Public Function GeneralInit()
  msServiceRoot = Range("DEF_WSROOT")
  msNSBase = Range("DEF_NSBASE")
  msUserName = Range("rUserName")
  msPswd = Range("rPassword")
  msFACI = Range("DEF_FACILITY")
  msCONO = Range("DEF_CONO")
  msDIVI = Range("DEF_DIVISION")
  '   msPRRF = "00"
  '    msFVDT = "20100101"
  '    msWCON = "002"
  '    msStartEDCOEAN = "8711252"
  '    StrTargetFolder = "F:\uitwissel\STOOM\Verkoop\"
End Function



Attribute VB_Name = "R_WegschrijvenM3"

Option Explicit
Private credM3 As New ConnectionCredentials, wsResult As New WSResultList, wsResult2 As New WSResultList


Public Function ConnectionTest() As Boolean
  Call GeneralInit
  ConnectionTest = False
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Set wsResult = R_LWS.GetFinancial(msCONO, [CUNO], msDIVI, credM3)
  Set wsResult = Nothing
  If (InStr(UCase(msError), "LOGON") = 0) And (InStr(UCase(msError), "FAILED") = 0) Then ConnectionTest = True
  msError = ""
End Function
Function CheckReason() As Boolean
  Dim bRet     As Boolean
  Dim mc       As Range
  bRet = True
  For Each mc In Range("s_ITNO").Resize([a44])  '4
    Status "Controle reden artikel:  " + CStr(mc.Offset(0, 0))
    If mc <> "" And UCase(mc.Offset(, 5)) = "" Then
      mc.Offset(, 5).Interior.Color = ColorConstants.vbRed
      bRet = False
    Else
      mc.Offset(, 5).Interior.Color = ColorConstants.vbYellow
    End If
  Next
  If bRet = False Then
    MsgBox ("E|fffd|n of meer velden in de kolom reden van retour is leeg")
  End If
  CheckReason = bRet
End Function

Sub ExportM3()
  Dim sOrderType As String
  Dim wsResult As WSResultList
  Dim credM3   As New ConnectionCredentials
  Dim credDB   As New ConnectionCredentials
  Dim DatumText As String, msORQP As String, msSAPR As String, msRSCD As String, TEDL As String, ORNO As String, ORNR As String, mc As Range, StrError As String
  'added hdk120712 ordertype is changable
  sOrderType = Range("DEF_ORDERTYPE")
  If [b42] > [j42] Then
    MsgBox "Je hebt niet voor elk artikel Akkoord Ja/Nee gekozen."
    Exit Sub
  End If
  If sOrderType = vbNullString Then
    MsgBox ("Kies een ordertype.")
    Exit Sub
  End If

  ActiveSheet.Unprotect
  If Not CheckReason Then Exit Sub    '' added hdk check if all reasons are filled
  R_Settings.GeneralInit
  Call credM3.initMWS(msServiceRoot, msNSBase, msUserName, msPswd, msCONO, msDIVI)
  Call credDB.initDB2("", "ODBCEX", "ODBCEX", "M3JDTA01")

  DatumText = Format(Range("RLDT"), "yyyymmdd")
  'If Range("TEDL") = "Ja" Then TEDL = "EXW" Else TEDL = "CFR"
  Set wsResult = R_LWS.In_AddBatchHead(R_Settings.msCONO, Range("CUNO"), sOrderType, "100", Range("ADID"), "002", credM3)
  ORNO = wsResult.getCurrField("ORNO")
  Range("ORNO") = "00" & ORNO
  Range("D6:D8").FormulaR1C1 = "=ORNR"
  Set wsResult = Nothing

  For Each mc In Range("s_ITNO").Resize([a44])    '4
    If mc <> "" And UCase(mc.Offset(, 8)) = "JA" Then
      Status "Verwerken artikel:  " + CStr(mc.Offset(0, 0))
      msORQP = mc.Offset(, 4) * -1
      msSAPR = Replace(mc.Offset(, 7), ",", ".")
      msRSCD = mc.Offset(, 5).Text
      Set wsResult = R_LWS.In_AddBatchLine(ORNO, mc.Text, mc.Offset(, 4) * -1, Replace(mc.Offset(, 7), ",", "."), mc.Offset(, 5).Text, credM3)
      'Set wsResult = R_LWS.In_AddBatchText(R_Settings.msCONO, ORNO, "1", "3", Range("PARM1") & "," & Range("PARM2"), "0", credM3)'Deze hoort niet in een loop
    End If
  Next
  Set wsResult = Nothing
  Set wsResult = R_LWS.In_AddBatchText(R_Settings.msCONO, ORNO, "1", "3", [PARM1] & [f30] & "," & [PARM2] & [F31] & "," & [Tekst1] & " " & [Tekst2] & " " & [Tekst3], "0", credM3)    'Uit de loop gehaald


  Set wsResult = Nothing
  'changed HdK for timeout on large number of products
  'server times out with error message (mvxtimeout) after one minute.
  'Keep repeating until status is availble
  Dim iAniCount As Integer
  iAniCount = 1
  Status "Confirm order..."

  On Error GoTo Opnieuw
  Set wsResult = R_LWS.Confirm(ORNO, credM3)
  If msError <> "" Then
    'changed HDK, will give an timout after one min, wait for processing to complete
    If InStr(UCase(msError), "COMMUNICATION FAILURE") = 0 Then StrError = msError
    msError = ""
  End If
  Set wsResult = Nothing

  Do
    Status "Wacht op verwerken order" + String(iAniCount, ".")
    Set wsResult = R_LWS.GetOrderNo(msCONO, ORNO, credM3)
    If msError <> "" Then
      StrError = msError
      msError = ""
    Else
      Range("ORNR") = wsResult.getCurrField("ORNR")
    End If
    Set wsResult = Nothing
    Set wsResult = R_LWS.GetBatchHead(msCONO, ORNO, credM3)
    If msError = vbNullString Then    'if we can get headinfo then something is wrong, otherwise it has successfully processed
     Exit Do
    End If
Opnieuw:
    If Range("ORNR") = vbNullString Then wait (2)    'let the server process
    iAniCount = iAniCount + 1
    If iAniCount > 3 Then iAniCount = 1
  Loop Until Val(Range("ORNR")) > 0

  'added 121016 hdk get levering nummer
  Set wsResult = R_LWS.GetLevNr(Range("ORNR"), credM3, credDB)
  Dim sLevNr   As String
  If msError = vbNullString Then
    sLevNr = sLevNr + wsResult.getCurrField("OQDLIX")
    Do While wsResult.hasNextResult
      wsResult.nextResult
      If sLevNr <> vbNullString Then sLevNr = sLevNr + ","
      sLevNr = sLevNr + wsResult.getCurrField("OQDLIX")
    Loop
    Range("LEVNO") = sLevNr
  Else
    MsgBox "Failed to get delivery order number.", vbExclamation, "Fail"
  End If

  'added check status because when timeout on confirm status is returned
  'If StrError = vbNullString Then
  ' always get
  Set wsResult = R_LWS.GetBatchHead(msCONO, ORNO, credM3)
  If msError = vbNullString Then    'if we can get headinfo then something is wrong, otherwise it has successfully processed
    StrError = wsResult.getCurrField("STAT")
    MsgBox "The order has status: " & StrError & vbNewLine & _
           "Please solve this in OIS275." & vbTab, vbInformation, "Information"

  End If
  msError = vbNullString
  StrError = vbNullString

  '    Do
  '    Set wsResult = R_LWS.Confirm(ORNO, credM3)
  '        If msError <> "" Then
  '            StrError = msError
  '            msError = ""
  '        End If
  '        Set wsResult = Nothing
  '
  '        Set wsResult = R_LWS.GetOrderNo(msCONO, ORNO, credM3)
  '        If msError <> "" Then
  '            StrError = msError
  '            msError = ""
  '        End If
  '        Range("ORNR") = wsResult.getCurrField("ORNR")
  '        Set wsResult = Nothing
  '
  '        Application.ScreenUpdating = False
  '        Call SaveM3Entry
  '        Application.ScreenUpdating = True
  '
  '        If StrError <> "" Then MsgBox _
           '            "The order has status: " & Right(Trim(StrError), 2) & vbNewLine & _
           '            "Please solve this in OIS275." & vbTab, vbInformation, "Information"
  Status vbNullString
  ActiveSheet.Protect

End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Workbook_BeforePrint(Cancel As Boolean)
  ActiveSheet.PageSetup.PrintArea = "$B$1:$K$" & (43 + [a44])
End Sub

Private Sub Workbook_Open()
  'added HDK, when sheet(0) is not selected
  R_NL.Activate
  ActiveSheet.Shapes.Range(Array("Button 251", "Button 252", "Button 253")).Visible = False
  ActiveSheet.Unprotect 'for setting numberformat
  [h33:g33].Cells.NumberFormat = ";;;"
  ActiveSheet.Protect
  RDNCodes.Visible = xlSheetVeryHidden
  [z:aa].ClearContents
  [u2:u65536].ClearContents
  DataBestandenHalen
  If [v2] = 1 Then  'unlocker present
    [r1] = 0
    FrmM3LogIn.Show
    If Not ConnectionTest Then
      MsgBox "The UserName and/ or Password is not correct." & vbTab, vbInformation, "Important"
      ThisWorkbook.Close False
    End If
    'UserForm1.Show
    ActiveSheet.Unprotect 'needed for setting numberformat
    ActiveSheet.Shapes.Range(Array("Button 251", "Button 252", "Button 253")).Visible = True
    [h32:i32].Cells.NumberFormat = "General"
    RDNCodes.Visible = xlSheetVisible
    ActiveSheet.Protect
  Else
    AskLanguage
  End If
End Sub

Attribute VB_Name = "Translate"
Public Sub AskLanguage()
  frmSelectLang.Show
End Sub
Public Sub SetNL()
  SwitchLang ("R_NL")
End Sub
Public Sub SetDU()
  SwitchLang ("R_DU")
End Sub
Public Sub SetGB()
  SwitchLang ("R_GB")
End Sub
Public Sub SetES()
  SwitchLang ("R_ES")
End Sub
Public Sub SetFR()
  SwitchLang ("R_FR")
End Sub
Private Sub SwitchLang(ByVal lang As String)
  ActiveSheet.Unprotect
  For Each Cell In Languages.Range("TR_ADDRESS")
    If Cell.Value = vbNullString Then Exit For
    R_NL.Range(Cell.Value).Value = Languages.Range("T" + lang).Cells(Cell.row, 1).Value
  Next
  ActiveSheet.Protect
End Sub

Private Sub GetLang()
  Dim Cell     As Range
  Dim sheets() As Worksheet
  R_NL.Select
  DoSheet
  R_DU.Select
  DoSheet
  R_GB.Select
  DoSheet
  R_FR.Select
  DoSheet
  R_ES.Select
  DoSheet
  Application.StatusBar = "Done"
End Sub
Private Sub DoSheet()
  Application.StatusBar = Application.ActiveSheet.Name
  HandleRange ThisWorkbook.ActiveSheet.Range("B1", "B36")
  HandleRange ThisWorkbook.ActiveSheet.Range("D1")
  HandleRange ThisWorkbook.ActiveSheet.Range("F20")
  HandleRange ThisWorkbook.ActiveSheet.Range("H27", "H29")
  HandleRange ThisWorkbook.ActiveSheet.Range("H35", "H36")
  HandleRange ThisWorkbook.ActiveSheet.Range("K35", "K36")
  HandleRange ThisWorkbook.ActiveSheet.Range("B43", "K43")
  HandleRange ThisWorkbook.ActiveSheet.Range("J1", "J26")
End Sub
Private Sub HandleRange(ByVal theRange As Range)
  For Each Cell In theRange
    If Trim(Cell.Value) <> vbNullString Then
      AddToTranslation ThisWorkbook.ActiveSheet.CodeName, Cell.address, Cell.Value
    End If
  Next
End Sub
Private Sub AddToTranslation(ByVal lang As String, ByVal address As String, ByVal sText As String)
  With sheets("Languages").Range("TR_ADDRESS")
    Set rng = .Find(What:=address, _
                    After:=.Cells(.Cells.Count), _
                    LookIn:=xlValues, _
                    LookAt:=xlWhole, _
                    SearchOrder:=xlByRows, _
                    SearchDirection:=xlNext, _
                    MatchCase:=False)
    If Not rng Is Nothing Then
      'found, set value
      sheets("Languages").Range("T" + lang).Cells(rng.row, 1).Value = sText

    Else
      'find first empty cell
      Set rng = .Find(What:=vbNullString, _
                      After:=.Cells(.Cells.Count), _
                      LookIn:=xlValues, _
                      LookAt:=xlWhole, _
                      SearchOrder:=xlByRows, _
                      SearchDirection:=xlNext, _
                      MatchCase:=False)
      rng.Value = address
      sheets("Languages").Range("T" + lang).Cells(rng.row, 1).Value = sText
    End If
  End With
End Sub

Attribute VB_Name = "VBATest"
Sub SaveM3Entry()
  'Dim LngSheets As Long, TargetFile As Workbook
  'LngSheets = Application.SheetsInNewWorkbook
  'Application.SheetsInNewWorkbook = 1
  'Set TargetFile = Workbooks.add
  'Application.SheetsInNewWorkbook = LngSheets
  'ThisWorkbook.Sheets(1).Cells.Copy TargetFile.Sheets(1).Range("A1")
  'Application.DisplayAlerts = False
  'TargetFile.SaveAs StrTargetFolder & ThisWorkbook.Sheets(1).Range("rORNO"), xlExcel8
  'Application.DisplayAlerts = True
  'TargetFile.Close False
  'Set TargetFile = Nothing
End Sub
Sub DataBestandenHalen()
  Application.ScreenUpdating = False
  Dim AntWrd   As Variant
  Dim mTmp     As Variant
  Dim sMp      As String

  sMp = ThisWorkbook.Path & Application.PathSeparator

  'bestandsnamen ophalen in dezelfde map
  ReDim mTmp(1 To 1)
  AntWrd = Dir(sMp & "*.xls")
  Do Until AntWrd = ""
    If AntWrd <> ThisWorkbook.Name Then
      If mTmp(UBound(mTmp)) <> "" Then
        ReDim Preserve mTmp(1 To UBound(mTmp) + 1)
      End If
      mTmp(UBound(mTmp)) = AntWrd
    End If
    AntWrd = Dir
  Loop

  'bestandsnamen op blad2!DataBestandenData plaatsen
  If UBound(mTmp) = 1 And mTmp(UBound(mTmp)) = "" Then
    MsgBox "Geen bestanden aangetroffen", vbCritical, " Dienstmededeling"
    Exit Sub
  Else
    With [DataBestandenData]
      .Offset(1, 0).ClearContents
      Range(.Cells(1, 1), .Cells(UBound(mTmp), 1)) = Application.WorksheetFunction.Transpose(mTmp)
    End With
  End If
End Sub
Sub Knoppenweg()
  ActiveSheet.Shapes.Range(Array("Button 251", "Button 252", "Button 253")).Visible = False
End Sub

Attribute VB_Name = "ValueCollection"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mbagData As Scripting.Dictionary

Public Function add(pvID As Variant, pvData As Variant) As Boolean
  add = False

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (Not mbagData.exists(pvID)) Then
    Call mbagData.add(pvID, pvData)
  Else
    Exit Function
  End If

  add = True
End Function

Public Function exists(pvID As Variant) As Boolean
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  exists = mbagData.exists(pvID)
End Function

Public Function remove(pvID As Variant)
  If Not (mbagData Is Nothing) Then
    mbagData.remove (pvID)
  End If
End Function

Public Function Replace(pvID As Variant, pvData As Variant)
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData.exists(pvID)) Then
    Call remove(pvID)
    Call add(pvID, pvData)
  End If
End Function

Public Function update(pvID As Variant, pvData As Variant)
  Dim vVal     As Variant

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData.exists(pvID)) Then
    vVal = mbagData(pvID)

    Call Replace(pvID, vVal + pvData)
  Else
    Call add(pvID, pvData)
  End If
End Function

Public Function updateStr(pvID As Variant, pvData As Variant, psSep As String)
  Dim vVal     As Variant

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData.exists(pvID)) Then
    vVal = mbagData(pvID)
    remove (pvID)
    Call add(pvID, vVal & psSep & pvData)
  Else
    Call add(pvID, pvData)
  End If
End Function



Public Function getX(pvID As Variant) As Variant
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  If (mbagData.exists(pvID)) Then
    getX = mbagData(pvID)
  Else
    getX = ""
  End If

End Function

Public Function elementIndex(pvID As Variant) As Integer
  Dim vKey     As Variant
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  elementIndex = -1
  For Each vKey In mbagData
    elementIndex = elementIndex + 1
    If (vKey = pvID) Then
      Exit Function
    End If
  Next

End Function

Public Function getKeyByIndex(piIdx As Integer) As Variant
  Dim vKey     As Variant
  Dim idx      As Integer
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  getKeyByIndex = -1

  idx = 0
  For Each vKey In mbagData
    If (idx = piIdx) Then
      getKeyByIndex = vKey
      Exit Function
    End If
    idx = idx + 1
  Next
End Function


Public Function Data() As Scripting.Dictionary
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  Set Data = mbagData
End Function

Public Function Count() As Integer
  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  Count = mbagData.Count
End Function

Public Function printMe() As String
  Dim vKey     As Variant
  Dim sStr     As String

  If (mbagData Is Nothing) Then
    Set mbagData = New Scripting.Dictionary
  End If

  For Each vKey In mbagData
    sStr = sStr & "[" & vKey & "]=[" & mbagData(vKey) & "] "
  Next

  printMe = sStr
End Function

Attribute VB_Name = "WSResultList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public mItems  As ObjectCollection
Public mFields As ValueCollection
Public mFieldIndex As ValueCollection

Public msWSName As String
Public msWSFunction As String

Private miCnt  As Integer
Private miFieldCnt As Integer

Private miCurrCnt As Integer

Public Function init(psWSName As String, psWSFunction As String) As Boolean
  Set mItems = New ObjectCollection
  Set mFields = New ValueCollection
  Set mFieldIndex = New ValueCollection

  msWSName = psWSName
  msWSFunction = psWSFunction

  miCnt = 0
  miCurrCnt = 0
End Function

Public Function addField(psField As String, pvValue As Variant) As Boolean
  addField = mFields.add(psField, pvValue)

  If (addField) Then
    Call mFieldIndex.add(miFieldCnt, psField)
    miFieldCnt = miFieldCnt + 1
  End If
End Function

Public Function addFields2Item() As Boolean
  addFields2Item = mItems.add(miCnt, mFields)
  If (addFields2Item) Then
    '        Debug.Print mFields.printMe()

    Set mFields = New ValueCollection
    miFieldCnt = 0
    miCnt = miCnt + 1
  End If

End Function

Public Function hasNextResult() As Boolean
  hasNextResult = miCurrCnt < miCnt - 1
End Function

Public Function nextResult()
  miCurrCnt = miCurrCnt + 1
End Function

Public Function getItemCnt() As Integer
  getItemCnt = miCnt
End Function

Public Function getFieldCnt() As Integer
  getFieldCnt = miFieldCnt
End Function

Public Function getFieldCountList() As ValueCollection
  Set getFieldCountList = mFieldIndex
End Function

Public Function getCurrItem() As ValueCollection
  Set getCurrItem = mFields.getX(miCurrCnt)
End Function

Public Function getCurrField(psField As String) As Variant
  getCurrField = mItems.getX(miCurrCnt).getX(psField)
End Function

Public Function getCurrFieldByIdx(piIdx As Integer) As Variant
  Dim sName    As String
  sName = chkStr(getFieldCountList().getX(piIdx))

  getCurrFieldByIdx = getCurrField(sName)
End Function
Attribute VB_Name = "frmSelectLang"
Attribute VB_Base = "0{8D37084D-7B48-49FF-93C6-DACCD1710EE0}{56ABA936-5E8B-4FA2-92C6-2103A5EE83E0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub imgCancel_Click()
  Unload Me
End Sub

Private Sub imgDU_Click()
  SetDU
  Unload Me
End Sub

Private Sub imgES_Click()
  SetES
  Unload Me
End Sub

Private Sub imgFR_Click()
  SetFR
  Unload Me
End Sub

Private Sub imgGB_Click()
  SetGB
  Unload Me
End Sub

Private Sub imgNL_Click()
  SetNL
  Unload Me
End Sub

Private Sub UserForm_Click()

End Sub


INQUEST-PP=macro
