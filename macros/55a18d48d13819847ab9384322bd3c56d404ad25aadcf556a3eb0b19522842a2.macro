Attribute VB_Name = "A_CodeModules"
Sub New_Employee()
False_All
    S_Dvp.[A1] = 0
    Add_Emp.Show
True_All
End Sub
Sub New_Student()
False_All
    S_Dvp.[A1] = 0
    Add_Std.Show
True_All
End Sub
Sub New_Batch()
False_All
    klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    Act = 0: Act = WorksheetFunction.CountIf(DB_Emp.Range("H2:H" & klrow), "Yes")
    If klrow > 1 Then
        If Act > 0 Then
            Add_Batch.Show
        Else
            MsgBox "No Active Employees exists in Database for assigning.", vbInformation, "Invalid Selection"
        End If
    Else
        MsgBox "No Employees exists in Database for assigning.", vbInformation, "Invalid Selection"
    End If
True_All
End Sub
Sub Close_Batches()
False_All
    klrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    If klrow = 1 Or WorksheetFunction.CountA(DB_Emp_Batches.Range("A2:A" & klrow)) = WorksheetFunction.CountIf(DB_Emp_Batches.Range("J2:J" & klrow), "YES") Then
        MsgBox "No Active batches exists.", vbInformation, "Invalid Selection"
    Else
        Close_Batch.Show
    End If
True_All
End Sub
Sub Mrk_Attendance()
False_All
    klrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    If klrow = 1 Or WorksheetFunction.CountA(DB_Emp_Batches.Range("A2:A" & klrow)) = WorksheetFunction.CountIf(DB_Emp_Batches.Range("J2:J" & klrow), "YES") Then
        MsgBox "No Active batches exists.", vbInformation, "Invalid Selection"
    Else
        Attendance.Show
    End If
True_All
End Sub
Sub Enquiry_Std()
False_All
    Enquiry.Show
True_All
End Sub
Sub Del_Employee()
False_All
    klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    If klrow > 1 Then
        Del_Emp.Show
    Else
        MsgBox "No Employees exists in Database for deletion.", vbInformation, "Invalid Selection"
    End If
True_All
End Sub
Sub Del_Student()
False_All
    klrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
    If klrow > 1 Then
        Del_Std.Show
    Else
        MsgBox "No Students exists in Database for deletion.", vbInformation, "Invalid Selection"
    End If
True_All
End Sub
Sub Report_Gen()
False_All
    klrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    If klrow = 1 Then
        MsgBox "No batches exists.", vbInformation, "Invalid Selection"
    Else
        Reports.Show
    End If
True_All
End Sub
Sub View_EmpDB()
    Dim lrow As Long
    lrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    If lrow > 1 Then
        DB_Emp.Visible = xlSheetVisible
        DB_Emp.Activate
    Else
        MsgBox "No Employee details exists in Database.", vbInformation, "Invalid Selection"
    End If
End Sub
Sub View_BatchDB()
    Dim lrow As Long
    lrow = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
    If lrow > 1 Then
        DB_Batch.Visible = xlSheetVisible
        DB_Batch.Activate
    Else
        MsgBox "No Batch details exists in Database.", vbInformation, "Invalid Selection"
    End If
End Sub
Sub View_EnquiryDB()
    Dim lrow As Long
    lrow = DB_Enquiry.Range("A" & Rows.count).End(xlUp).Row
    If lrow > 1 Then
        DB_Enquiry.Visible = xlSheetVisible
        DB_Enquiry.Activate
    Else
        MsgBox "No student details exists in Database.", vbInformation, "Invalid Selection"
    End If
End Sub
Attribute VB_Name = "Add_Batch"
Attribute VB_Base = "0{E71CD7BD-E5D8-4019-8264-E02DA64F0952}{5DFED0E8-3CCA-462B-A0C9-A891D4044F09}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_Grade_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.CB_Grade.Value = vbNullString Then Exit Sub
    count = 0
    For i = 0 To Me.CB_Grade.ListCount - 1
        If UCase(Trim(Me.CB_Grade.Value)) = UCase(Trim(Me.CB_Grade.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Grade.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
        Exit Sub
    End If
    S_Dvp.[A2] = 0
    S_Dvp.[A2] = Me.CB_Grade.Value
End Sub

Private Sub CB_Prgms_Change()
    If Me.CB_Prgms.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_Prgms.ListCount - 1
        If UCase(Trim(Me.CB_Prgms.Value)) = UCase(Trim(Me.CB_Prgms.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Prgms.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub

Private Sub CB_Subjects_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.CB_Subjects.Value = vbNullString Then Exit Sub
    count = 0
    For i = 0 To Me.CB_Subjects.ListCount - 1
        If UCase(Trim(Me.CB_Subjects.Value)) = UCase(Trim(Me.CB_Subjects.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Subjects.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub

Private Sub Cmd_Btch_Duration_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.Cmd_Btch_Duration.Value = vbNullString Then
        Me.lbl_Btch_Endtime = ""
        Me.Cmd_Btch_Teacher = vbNullString
        If Me.Cmd_Btch_Start_Time.Text <> "" Then lbl_Btch_Endtime = "Max duration: " & 1440 - ((Hour(TimeValue(Me.Cmd_Btch_Start_Time)) * 60) + Minute(TimeValue(Me.Cmd_Btch_Start_Time))) & " mins"
        Exit Sub
    End If
    With Me.Cmd_Btch_Duration
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
            Exit Sub
        End If
    End With
    count = 0
    For i = 0 To Me.Cmd_Btch_Duration.ListCount - 1
        If Replace(Me.Cmd_Btch_Duration.Value, """", "", 1) = Me.Cmd_Btch_Duration.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.Cmd_Btch_Duration.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
        
    If ((Hour(TimeValue(Me.Cmd_Btch_Start_Time)) * 60) + Minute(TimeValue(Me.Cmd_Btch_Start_Time))) + Replace(Me.Cmd_Btch_Duration.Value, """", "", 1) > 1440 Then
        MsgBox "End time cannot exceed 12:00 AM", vbInformation, "Invalid Selection"
        lbl_Btch_Endtime = "Max duration: " & 1440 - ((Hour(TimeValue(Me.Cmd_Btch_Start_Time)) * 60) + Minute(TimeValue(Me.Cmd_Btch_Start_Time))) & " mins"
        Me.Cmd_Btch_Duration.Value = vbNullString
        Exit Sub
    End If
'    lbl_Btch_Endtime = ""
'    lbl_Btch_Endtime = "Max duration: " & 1440 - ((Hour(TimeValue(Me.Cmd_Btch_Start_Time)) * 60) + Minute(TimeValue(Me.Cmd_Btch_Start_Time))) & " mins"
    lbl_Btch_Endtime = ""
    If Me.Cmd_Btch_Start_Time <> "" And Me.Cmd_Btch_Duration <> "" Then
        Me.lbl_Btch_Endtime = "End time " & Format(TimeValue(Me.Cmd_Btch_Start_Time) + TimeSerial(0, Me.Cmd_Btch_Duration, 0), "HH:MM AM/PM")
    End If
End Sub

Private Sub Cmd_Btch_Start_Time_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.Cmd_Btch_Start_Time.Value = vbNullString Then
        Me.Cmd_Btch_Duration.Visible = False
        Exit Sub
    Else
        Me.Cmd_Btch_Duration.Visible = True
    End If
    count = 0
    For i = 0 To Me.Cmd_Btch_Start_Time.ListCount - 1
        If Me.Cmd_Btch_Start_Time.Value = Me.Cmd_Btch_Start_Time.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.Cmd_Btch_Start_Time.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
        Exit Sub
    End If
    Me.Cmd_Btch_Duration.Visible = True
    Me.Cmd_Btch_Duration.Value = vbNullString
    lbl_Btch_Endtime = ""
    lbl_Btch_Endtime = "Max duration: " & 1440 - ((Hour(TimeValue(Me.Cmd_Btch_Start_Time)) * 60) + Minute(TimeValue(Me.Cmd_Btch_Start_Time))) & " mins"
End Sub


Private Sub Cmd_Btch_Teacher_Enter()
Me.Cmd_Btch_Teacher.Clear
If Me.Txt_Btch_StDt.Text <> "" And Me.Txt_Btch_EnDt.Text <> "" And _
    Me.Cmd_Btch_Start_Time.Value <> "" And Me.Cmd_Btch_Duration <> "" Then
    
    Me.Cmd_Btch_Teacher.Clear
    count = 1: S_Dvp.[A2] = 0


    Dim lrow As Long:       lrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    Dim St_Dt As Date:      Dim End_Dt As Date:
    Dim St_time As Date:    Dim End_time As Date
    
    If Me.CB_Grade.Value <> "" Then S_Dvp.[A2] = Me.CB_Grade.Value
    
    Dim dict As Object:     Set dict = CreateObject("Scripting.Dictionary")
    For i = 2 To lrow
        If Not dict.Exists(UCase(DB_Emp.Range("B" & i))) And UCase(DB_Emp.Range("H" & i)) = "YES" _
                And UCase(DB_Emp.Range("I" & i)) = UCase(Me.CB_Subjects.Value) And CDate(Txt_Btch_StDt) >= CDate(DB_Emp.Range("F" & i)) _
                     And S_Dvp.[A2].Value >= DB_Emp.Range("J" & i).Value And S_Dvp.[A2].Value <= DB_Emp.Range("K" & i).Value Then
            dict.Add key:=UCase(DB_Emp.Range("B" & i)), Item:=count
            count = count + 1
        End If
    Next i
    
    St_Dt = DateValue(Me.Txt_Btch_StDt.Value):          End_Dt = DateValue(Me.Txt_Btch_EnDt.Value)
    St_time = TimeValue(Me.Cmd_Btch_Start_Time.Value):  End_time = TimeValue(TimeValue(Me.Cmd_Btch_Start_Time) + TimeSerial(0, Me.Cmd_Btch_Duration, 0))
    
    lrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    DB_Emp_Batches.Range("M1:T" & lrow) = ""
    
    If lrow > 1 Then
        DB_Emp_Batches.Range("M1") = St_Dt:     DB_Emp_Batches.Range("N1") = End_Dt
        DB_Emp_Batches.Range("O1") = St_time:   DB_Emp_Batches.Range("P1") = End_time
        
        DB_Emp_Batches.Range("M1:N1").NumberFormat = "DD-MMM-YYYY"
        DB_Emp_Batches.Range("D1:E1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        DB_Emp_Batches.Range("O1:P1").NumberFormat = "HH:MM AM/PM"
        DB_Emp_Batches.Range("F1:G1").EntireColumn.NumberFormat = "HH:MM AM/PM"
        
        
        DB_Emp_Batches.Range("M2:M" & lrow).FormulaR1C1 = _
        "=Iferror(IF(And(VLOOKUP(RC2,Employees_DB!C2:C6,5,0)<=R1C13,Upper(RC3)= """ & UCase(Me.CB_Subjects.Value) & _
                """),DateTime_Overlap(RC4,RC5,RC6,RC7,R1C13,R1C14,R1C15,R1C16),TRUE),"""")"
    End If
    '    DB_Emp_Batches.Range("M2:M" & lrow) = DB_Emp_Batches.Range("M2:M" & lrow).Value
        On Error Resume Next
        For i = 2 To lrow
            If Trim(UCase(DB_Emp_Batches.Range("B" & i))) <> "" Then
                If dict.Exists(UCase(DB_Emp_Batches.Range("B" & i))) And UCase(DB_Emp_Batches.Range("M" & i)) = UCase(True) Then
                    dict.Remove key:=UCase(DB_Emp.Range("B" & i))
                End If
            End If
        Next
    Me.Cmd_Btch_Teacher.Clear
    Set dict = SortDictionaryByKey(dict)
    If dict.count = 0 Then
        Me.Cmd_Btch_Teacher.AddItem ("No Availability")
    Else
        For Each k In dict.Keys
            Me.Cmd_Btch_Teacher.AddItem (k)
        Next
    End If
    
End If

End Sub


Private Sub Cmd_Cancel_Click()
Application.EnableEvents = False
    MsgBox "Operation cancelled.", vbInformation, "Cancelled"
    Unload Me
Application.EnableEvents = True
End Sub

Private Sub Cmd_Del_Click()
rmv = False
If Me.Lst_Std.ListCount > 0 Then
    For i = 0 To Me.Lst_Std.ListCount - 1
        On Error Resume Next
        If Me.Lst_Std.Selected(i) Then
              Me.Lst_Std.RemoveItem (i)
              rmv = True
        End If
    Next i
    If rmv = True Then
        MsgBox "Removed selected students in list.", vbInformation, "Operation complete"
    Else
        MsgBox "No items are selected students in list.", vbInformation, "Invalid Selection"
    End If
Else
    MsgBox "No records to delete.", vbInformation, "Invalid selection"
End If
End Sub

Private Sub Cmd_Reset_Click()
    Call Reset_Userform
End Sub

Private Sub Cmd_Std_Add_Click()
    If Me.Txt_Std_ID.Text <> "" And Me.Txt_Std_Name.Text <> "" And Me.Txt_Std_Mob.Text <> "" And Me.Txt_Std_Email.Text <> "" Then
        Lst_Std.ColumnCount = 5
        Lst_Std.AddItem
        Lst_Std.List(Lst_Std.ListCount - 1, 0) = Me.Txt_Std_ID.Text
        Lst_Std.List(Lst_Std.ListCount - 1, 1) = UCase(Me.Txt_Std_Name.Text)
        Lst_Std.List(Lst_Std.ListCount - 1, 2) = Me.Txt_Std_Mob.Text
        Lst_Std.List(Lst_Std.ListCount - 1, 3) = LCase(Me.Txt_Std_Email.Text)
        Lst_Std.List(Lst_Std.ListCount - 1, 4) = Me.Txt_Std_Address.Text
        '"S" & Trim(Mid(Me.Txt_Std_ID.Value, 2, Len(Me.Txt_Std_ID.Value) - 1) + 1)
        Me.Txt_Std_ID.Value = "S" & Trim(Mid(Me.Txt_Std_ID.Value, 2, Len(Me.Txt_Std_ID.Value) - 1) + 1)
        Me.Txt_Std_Name.Text = "": Me.Txt_Std_Mob.Text = "": Me.Txt_Std_Email.Text = "": Me.Txt_Std_Address.Text = ""
        Me.Txt_Std_Name.SetFocus
    Else
        MsgBox "Fill all mandatory fields and retry.", vbInformation, "Invalid Entry"
    End If
End Sub

Private Sub Cmd_Std_Reset_Click()
Me.Txt_Std_Name.Text = "": Me.Txt_Std_Mob.Text = "": Me.Txt_Std_Email.Text = "": Me.Txt_Std_Address.Text = ""
Me.Txt_Std_Name.SetFocus
End Sub

Private Sub Cmd_Submit_Click()
    If Me.Lst_Std.ListCount > 0 And Trim(Me.Txt_Btch_ID) <> "" And Trim(Me.Txt_Btch_StDt) <> "" And Trim(Me.Txt_Btch_EnDt) <> "" _
        And Trim(Me.CB_Subjects) <> "" And Trim(Me.Cmd_Btch_Start_Time) <> "" And Trim(Me.Cmd_Btch_Duration) <> "" And Trim(Me.Cmd_Btch_Teacher) <> "" _
             And Trim(Me.CB_Grade) <> "" And Trim(Me.CB_Prgms) <> "" And UCase(Trim(Me.Cmd_Btch_Teacher)) <> UCase("No Availability") And Trim(Me.Txt_Btch_Periods) <> "" Then
    
        Call Folder_Creation
        Call CreateAttendanceExcel(Trim(UCase(Me.Txt_Btch_ID.Text)))
    
        lrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
        DB_Emp_Batches.Range("A" & lrow + 1) = UCase(Me.Txt_Btch_ID.Text)
        DB_Emp_Batches.Range("B" & lrow + 1) = UCase(Me.Cmd_Btch_Teacher.Text)
        DB_Emp_Batches.Range("C" & lrow + 1) = Me.CB_Subjects.Text
        DB_Emp_Batches.Range("D1:E1").NumberFormat = "DD-MMM-YYYY"
        DB_Emp_Batches.Range("F1:G1").NumberFormat = "HH:MM AM/PM"
        DB_Emp_Batches.Range("D" & lrow + 1) = Me.Txt_Btch_StDt.Text
        DB_Emp_Batches.Range("E" & lrow + 1) = Me.Txt_Btch_EnDt.Text
        DB_Emp_Batches.Range("F" & lrow + 1) = Me.Cmd_Btch_Start_Time.Text
        DB_Emp_Batches.Range("G" & lrow + 1) = Format(TimeValue(Me.Cmd_Btch_Start_Time) + TimeSerial(0, Me.Cmd_Btch_Duration, 0), "HH:MM AM/PM")
        DB_Emp_Batches.Range("H" & lrow + 1) = Me.Txt_Btch_Periods.Text
        DB_Emp_Batches.Range("I" & lrow + 1) = Me.Txt_Btch_Periods.Text
        DB_Emp_Batches.Range("K" & lrow + 1) = Me.CB_Grade.Text
        DB_Emp_Batches.Range("L" & lrow + 1) = Me.CB_Prgms.Text
        
        If lrow = 1 Then
            DB_Emp_Batches.Range("Z" & lrow + 1) = 10001
        Else
            DB_Emp_Batches.Range("Z" & lrow + 1) = WorksheetFunction.Max(DB_Emp_Batches.Range("Z2:Z" & lrow)) + 1
        End If
        
        For i = 0 To Me.Lst_Std.ListCount - 1
            lrow = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
            DB_Batch.Range("A" & lrow + 1) = UCase(Me.Txt_Btch_ID.Text)
            DB_Batch.Range("B" & lrow + 1) = Me.Txt_Btch_StDt.Text
            DB_Batch.Range("C" & lrow + 1) = Me.Txt_Btch_EnDt.Text
            DB_Batch.Range("B1:C1").NumberFormat = "DD-MMM-YYYY"
            DB_Batch.Range("F1:G1").NumberFormat = "HH:MM AM/PM"
            DB_Batch.Range("D" & lrow + 1) = Me.CB_Subjects.Text
            DB_Batch.Range("E" & lrow + 1) = UCase(Me.Cmd_Btch_Teacher.Text)
            DB_Batch.Range("F" & lrow + 1) = Me.Cmd_Btch_Start_Time.Text
            DB_Batch.Range("G" & lrow + 1) = Format(TimeValue(Me.Cmd_Btch_Start_Time) + TimeSerial(0, Me.Cmd_Btch_Duration, 0), "HH:MM AM/PM")
            DB_Batch.Range("H" & lrow + 1) = Me.Txt_Btch_Periods.Text
            DB_Batch.Range("I" & lrow + 1) = Me.Txt_Btch_Periods.Text
            DB_Batch.Range("J" & lrow + 1) = Me.Lst_Std.List(i, 0)
            DB_Batch.Range("K" & lrow + 1) = UCase(Me.Lst_Std.List(i, 1))
            DB_Batch.Range("L" & lrow + 1) = Me.Lst_Std.List(i, 2)
            DB_Batch.Range("M" & lrow + 1) = LCase(Me.Lst_Std.List(i, 3))
            DB_Batch.Range("N" & lrow + 1) = Me.Lst_Std.List(i, 4)
            DB_Batch.Range("P" & lrow + 1) = Me.CB_Grade.Text
            DB_Batch.Range("Q" & lrow + 1) = Me.CB_Prgms.Text
        Next i
        
        Call Reset_Userform
        Unload Me
        DB_Batch.Range("A1:N1").EntireColumn.AutoFit
        MsgBox "Batch added successfully.", vbInformation, "Operation complete"
    Else
        MsgBox "Add records to student list and retry.", vbInformation, "Invalid selection"
    End If
    
End Sub

Private Sub Txt_Btch_EnDt_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.Txt_Btch_EnDt.Value = "" Then Exit Sub
    If Not IsDate(Me.Txt_Btch_EnDt.Value) Then
        Me.Txt_Btch_EnDt.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.Txt_Btch_StDt.Value = "" Or Me.Txt_Btch_EnDt.Value = "" Then Exit Sub
    If DateValue(Me.Txt_Btch_EnDt.Value) < DateValue(Me.Txt_Btch_StDt.Value) Then
        Me.Txt_Btch_EnDt.Text = ""
        MsgBox "End date should be greater than Start date.", vbCritical, "Invalid Selection"
        Me.Txt_Btch_EnDt.Locked = False
        Me.Txt_Btch_EnDt.Value = ""
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.Txt_Btch_EnDt.Value = sGetDate
'        Me.Txt_Btch_EnDt.Locked = True
    End If
End Sub


Private Sub Txt_Btch_StDt_Change()
    Me.Cmd_Btch_Teacher.Value = vbNullString
    If Me.Txt_Btch_StDt.Value = "" Then
        Me.Txt_Btch_EnDt.Value = ""
        Exit Sub
    End If
    If Not IsDate(Me.Txt_Btch_StDt.Value) Then
        Me.Txt_Btch_StDt.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.Txt_Btch_StDt.Value = "" Or Me.Txt_Btch_EnDt.Value = "" Then Exit Sub
    If DateValue(Me.Txt_Btch_EnDt.Value) < DateValue(Me.Txt_Btch_StDt.Value) Then
        Me.Txt_Btch_StDt.Text = ""
        MsgBox "Start date should be lesser than End date.", vbCritical, "Invalid Selection"
        Me.Txt_Btch_StDt.SetFocus
    End If
End Sub
Private Sub Txt_Btch_EnDt_Enter()
Application.EnableEvents = False
    Me.Txt_Btch_EnDt.Locked = False
    If Me.Txt_Btch_EnDt.Value = "" Then
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.Txt_Btch_EnDt.Value = sGetDate
    End If
'    Me.Txt_Btch_EnDt.Locked = True
Application.EnableEvents = True
End Sub

Private Sub Txt_Btch_Periods_Change()
Application.EnableEvents = False
    With Me.Txt_Btch_Periods
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub Txt_Btch_StDt_Enter()
Application.EnableEvents = False
    Me.Txt_Btch_StDt.Locked = False
    If Me.Txt_Btch_StDt.Value = "" Then
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.Txt_Btch_StDt.Value = sGetDate
    End If
'    Me.Txt_Btch_StDt.Locked = True
    If Me.Txt_Btch_StDt.Value = "" Then
        Me.Txt_Btch_EnDt.Visible = False
    Else
        Me.Txt_Btch_EnDt.Visible = True
'        Me.Txt_Btch_EnDt.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub Txt_Btch_StDt_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Me.Txt_Btch_StDt.Value = "" Then
        Me.Txt_Btch_EnDt.Visible = False
    Else
        Me.Txt_Btch_EnDt.Visible = True
    End If
End Sub

Private Sub Txt_Std_Email_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Trim(Me.Txt_Std_Email.Value) <> vbNullString Then
        If InStr(1, Me.Txt_Std_Email.Value, "@", vbTextCompare) = 0 Or InStr(InStr(1, Me.Txt_Std_Email.Value, "@", vbTextCompare) + 1, Me.Txt_Std_Email.Value, ".", vbTextCompare) = 0 Then
            MsgBox "Invalid Email ID.", vbCritical, "Invalid Entry"
            Me.Txt_Std_Email.Value = vbNullString
            Me.Txt_Std_Email.SetFocus
        End If
    End If
End Sub

Private Sub Txt_Std_Mob_Change()
Application.EnableEvents = False
    With Me.Txt_Std_Mob
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub Txt_Std_Mob_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Application.EnableEvents = False
    If Len(Trim(Me.Txt_Std_Mob.Value)) < 10 And Trim(Me.Txt_Std_Mob.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.Txt_Std_Mob.Value = vbNullString
        Me.Txt_Std_Mob.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub UserForm_Initialize()
Me.Height = 455
Me.Width = 620

    Dim lng_lrow_Batch As Long: Dim lng_lrow_Student As Long: Dim lng_lrow As Long
    lng_lrow_Batch = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    lng_lrow_Student = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
    
    If lng_lrow_Batch = 1 Then
        Me.Txt_Btch_ID.Locked = False: Me.Txt_Btch_ID.Text = "B" & 10001: Me.Txt_Btch_ID.Locked = True
    Else
        Me.Txt_Btch_ID.Locked = False
        DB_Emp_Batches.Range("Z2").EntireColumn.Clear
        DB_Emp_Batches.Range("Z2").EntireColumn.NumberFormat = "General"
        DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch).FormulaR1C1 = "=MID(RC1,2,LEN(RC1)-1)"
        DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch) = DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch).Value
        Me.Txt_Btch_ID.Text = "B" & WorksheetFunction.Max(DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch)) + 1
        Me.Txt_Btch_ID.Locked = True
    End If
    
    If lng_lrow_Student = 1 Then
        Me.Txt_Std_ID.Locked = False: Me.Txt_Std_ID.Text = "S" & 10001: Me.Txt_Std_ID.Locked = True
    Else
        Me.Txt_Std_ID.Locked = False
        DB_Batch.Range("Z2").EntireColumn.Clear
        DB_Batch.Range("Z2").EntireColumn.NumberFormat = "General"
        DB_Batch.Range("Z2:Z" & lng_lrow_Student).FormulaR1C1 = "=MID(RC10,2,LEN(RC1)-1)"
        DB_Batch.Range("Z2:Z" & lng_lrow_Student) = DB_Batch.Range("Z2:Z" & lng_lrow_Student).Value
        Me.Txt_Std_ID.Text = "S" & WorksheetFunction.Max(DB_Batch.Range("Z2:Z" & lng_lrow_Student)) + 1
        Me.Txt_Std_ID.Locked = True
    End If
    Me.CB_Subjects.RowSource = "=Subjects"
    If Me.Txt_Btch_StDt.Value = "" Then
        Me.Txt_Btch_EnDt.Visible = False
    Else
        Me.Txt_Btch_EnDt.Visible = True
    End If
    
    If Trim(Me.Cmd_Btch_Start_Time.Value) = vbNullString Then
        Me.Cmd_Btch_Duration.Visible = False
    Else
        Me.Cmd_Btch_Duration.Visible = True
    End If
    
    Dim dTime As Date
    Cmd_Btch_Start_Time.AddItem Format(TimeValue("5:00"), "HH:MM AM/PM")
    For dTime = TimeValue("5:30 AM") To TimeValue("10:30 PM") Step TimeValue("00:30")
        Cmd_Btch_Start_Time.AddItem Format(dTime, "HH:MM AM/PM")
    Next dTime
    Me.Txt_Btch_ID.SetFocus
    
End Sub
Private Sub Reset_Userform()
    lng_lrow_Batch = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    lng_lrow_Student = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
    
    Add_Batch.Txt_Btch_ID.Locked = False
    If lng_lrow_Batch = 1 Then
        Me.Txt_Btch_ID.Locked = False: Me.Txt_Btch_ID.Text = "B" & 10001: Me.Txt_Btch_ID.Locked = True
    Else
        Me.Txt_Btch_ID.Locked = False
        DB_Emp_Batches.Range("Z2").EntireColumn.Clear
        DB_Emp_Batches.Range("Z2").EntireColumn.NumberFormat = "General"
        DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch).FormulaR1C1 = "=MID(RC1,2,LEN(RC1)-1)"
        DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch) = DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch).Value
        Me.Txt_Btch_ID.Text = "B" & WorksheetFunction.Max(DB_Emp_Batches.Range("Z2:Z" & lng_lrow_Batch)) + 1
        Me.Txt_Btch_ID.Locked = True
    End If
    
    Add_Batch.Txt_Btch_ID.Locked = True
    Add_Batch.Txt_Btch_StDt.Value = "":         Add_Batch.Txt_Btch_EnDt = ""
    Add_Batch.CB_Subjects.Value = "":           Add_Batch.Cmd_Btch_Teacher.Value = ""
    Add_Batch.Cmd_Btch_Start_Time.Value = "":   Add_Batch.Cmd_Btch_Duration.Value = ""
    Add_Batch.Txt_Btch_Periods.Value = "":      Add_Batch.lbl_Btch_Endtime = ""
    Add_Batch.CB_Grade.Value = "":              Add_Batch.CB_Prgms.Value = ""
    Add_Batch.Txt_Std_ID.Locked = False
    
    If lng_lrow_Student = 1 Then
        Me.Txt_Std_ID.Locked = False: Me.Txt_Std_ID.Text = "S" & 10001: Me.Txt_Std_ID.Locked = True
    Else
        Me.Txt_Std_ID.Locked = False
        DB_Batch.Range("Z2").EntireColumn.Clear
        DB_Batch.Range("Z2").EntireColumn.NumberFormat = "General"
        DB_Batch.Range("Z2:Z" & lng_lrow_Student).FormulaR1C1 = "=MID(RC10,2,LEN(RC1)-1)"
        DB_Batch.Range("Z2:Z" & lng_lrow_Student) = DB_Batch.Range("Z2:Z" & lng_lrow_Student).Value
        Me.Txt_Std_ID.Text = "S" & WorksheetFunction.Max(DB_Batch.Range("Z2:Z" & lng_lrow_Student)) + 1
        Me.Txt_Std_ID.Locked = True
    End If
    
    Add_Batch.Txt_Std_ID.Locked = True
    Add_Batch.Txt_Std_Name.Value = "":          Add_Batch.Txt_Std_Mob.Value = ""
    Add_Batch.Txt_Std_Email.Value = "":         Add_Batch.Txt_Std_Address.Value = ""
    Add_Batch.Lst_Std.Clear
    Add_Batch.Txt_Btch_ID.SetFocus
End Sub


Attribute VB_Name = "Add_Emp"
Attribute VB_Base = "0{BDBC90E1-7EDF-4E20-8293-627FD4B51C2F}{76F62F99-850B-4ECC-BF17-7284D3783321}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit
Public sGetDate As String
Public Update As Long

Private Sub CB_MaxGrade_Change()
    If Me.CB_MaxGrade.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_MaxGrade.ListCount - 1
        If Replace(Me.CB_MaxGrade.Value, """", "") = Me.CB_MaxGrade.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_MaxGrade.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
        Exit Sub
    End If
End Sub
Private Sub CB_MinGrade_Change()
    If Me.CB_MinGrade.Value = vbNullString Then
        Me.CB_MaxGrade.RowSource = ""
        Me.CB_MaxGrade.Clear
        Me.CB_MaxGrade.Visible = False
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_MinGrade.ListCount - 1
        If Replace(Me.CB_MinGrade.Value, """", "") = Me.CB_MinGrade.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_MinGrade.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
        Exit Sub
    End If
    Me.CB_MaxGrade.Visible = True
    Me.CB_MaxGrade.RowSource = ""
    Me.CB_MaxGrade.Clear
    For i = Me.CB_MinGrade.Value To 16
        Me.CB_MaxGrade.AddItem (i)
    Next
End Sub

Private Sub CB_MinGrade_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Me.CB_MaxGrade.Value = "" Then Exit Sub
    If Replace(Me.CB_MaxGrade.Value, """", "") < Replace(Me.CB_MinGrade.Value, """", "") Then
        Me.CB_MinGrade.Value = ""
        MsgBox "Min grade should be lesser than Max grade.", vbCritical, "Invalid Selection"
    End If
End Sub

Private Sub CB_Prgms_Change()
    If Me.CB_Prgms.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_Prgms.ListCount - 1
        If UCase(Trim(Me.CB_Prgms.Value)) = UCase(Trim(Me.CB_Prgms.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Prgms.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub

Private Sub CB_Subjects_Change()
    If Me.CB_Subjects.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_Subjects.ListCount - 1
        If UCase(Trim(Me.CB_Subjects.Value)) = UCase(Trim(Me.CB_Subjects.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Subjects.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub

Private Sub Cmd_Add_Click()
Application.EnableEvents = False
Dim lng_lrow As Long
    If Trim(Me.TextBox1.Value) <> "" And Trim(Me.TextBox2.Value) <> "" And Trim(Me.TextBox3.Value) <> "" _
        And Trim(Me.TextBox4.Value) <> "" And Trim(Me.TextBox5.Value) <> "" And Trim(Me.ComboBox1.Value) <> "" _
            And Trim(Me.CB_Subjects) <> "" And Trim(Me.CB_MinGrade) <> "" And Trim(Me.CB_MaxGrade) <> "" _
                And Trim(Me.CB_Prgms) <> "" Then
        lng_lrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
        With DB_Emp
            .Range("A" & lng_lrow + 1 & ":N" & lng_lrow + 1).ClearContents
            .Range("A" & lng_lrow + 1) = Me.TextBox11.Value
            .Range("B" & lng_lrow + 1) = UCase(Me.TextBox1.Value)
            .Range("C" & lng_lrow + 1) = Me.TextBox2.Value
            .Range("D" & lng_lrow + 1) = LCase(Me.TextBox3.Value)
            .Range("E" & lng_lrow + 1) = Me.TextBox4.Value
            .Range("F1:G1").NumberFormat = "DD-MMM-YYYY"
            .Range("F" & lng_lrow + 1) = Me.TextBox5.Value
            .Range("G" & lng_lrow + 1) = Me.TextBox6.Value
            .Range("H" & lng_lrow + 1) = Me.ComboBox1.Value
            .Range("I" & lng_lrow + 1) = UCase(Me.CB_Subjects.Value)
            .Range("J" & lng_lrow + 1) = Me.CB_MinGrade.Value
            .Range("K" & lng_lrow + 1) = Me.CB_MaxGrade.Value
            .Range("L" & lng_lrow + 1) = Me.CB_Prgms.Value
            .Range("M" & lng_lrow + 1) = Me.TextBox8.Value
            .Range("N" & lng_lrow + 1) = Me.TextBox9.Value
            .Range("O" & lng_lrow + 1) = Me.TextBox10.Value
        End With
        MsgBox UCase(Me.TextBox1.Value) & " details added to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.TextBox1.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub Cmd_Cancel_Click()
Application.EnableEvents = False
    MsgBox "Operation cancelled.", vbInformation, "Cancelled"
    Unload Me
Application.EnableEvents = True
End Sub

Private Sub Cmd_Reset_Click()
    Me.TextBox1.Value = ""
    Me.TextBox2.Value = ""
    Me.TextBox3.Value = ""
    Me.TextBox4.Value = ""
    Me.TextBox5.Value = ""
    Me.TextBox6.Value = ""
    Me.ComboBox1.Value = ""
    Me.TextBox8.Value = ""
    Me.TextBox9.Value = ""
    Me.TextBox10.Value = ""
    Me.CB_Subjects.Value = ""
    Me.CB_MinGrade.Value = ""
    Me.CB_MaxGrade.Value = ""
    Me.CB_Prgms.Value = ""
    Me.TextBox1.SetFocus
End Sub

Private Sub Cmd_Update_Click()
Application.EnableEvents = False
    If Trim(Me.TextBox1.Value) <> "" And Trim(Me.TextBox2.Value) <> "" And Trim(Me.TextBox3.Value) <> "" _
        And Trim(Me.TextBox4.Value) <> "" And Trim(Me.TextBox5.Value) <> "" And Trim(Me.ComboBox1.Value) <> "" _
            And Trim(Me.CB_Subjects) <> "" And Trim(Me.CB_MinGrade) <> "" And Trim(Me.CB_MaxGrade) <> "" _
                And Trim(Me.CB_Prgms) <> "" Then
        lng_lrow = S_Dvp.[m5]
        With DB_Emp
            .Range("A" & lng_lrow & ":O" & lng_lrow).ClearContents
            .Range("A" & lng_lrow) = Me.TextBox11.Value
            .Range("B" & lng_lrow) = UCase(Me.TextBox1.Value)
            .Range("C" & lng_lrow) = Me.TextBox2.Value
            .Range("D" & lng_lrow) = LCase(Me.TextBox3.Value)
            .Range("F1:G1").NumberFormat = "DD-MMM-YYYY"
            .Range("E" & lng_lrow) = Me.TextBox4.Value
            .Range("F" & lng_lrow) = Me.TextBox5.Value
            .Range("G" & lng_lrow) = Me.TextBox6.Value
            .Range("H" & lng_lrow) = Me.ComboBox1.Value
            .Range("I" & lng_lrow) = UCase(Me.CB_Subjects.Value)
            .Range("J" & lng_lrow) = Me.CB_MinGrade.Value
            .Range("K" & lng_lrow) = Me.CB_MaxGrade.Value
            .Range("L" & lng_lrow) = Me.CB_Prgms.Value
            .Range("M" & lng_lrow) = Me.TextBox8.Value
            .Range("N" & lng_lrow) = Me.TextBox9.Value
            .Range("O" & lng_lrow) = Me.TextBox10.Value
            
        End With
        MsgBox UCase(Me.TextBox1.Value) & " details updated to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.TextBox1.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub ComboBox1_Change()
    If Me.ComboBox1.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.ComboBox1.ListCount - 1
        If Me.ComboBox1.Value = Me.ComboBox1.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.ComboBox1.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
        Exit Sub
    End If
End Sub

Private Sub TextBox2_Change()
Application.EnableEvents = False
    With Me.TextBox2
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub TextBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Application.EnableEvents = False
    If Len(Trim(Me.TextBox2.Value)) < 10 And Trim(Me.TextBox2.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.TextBox2.Value = vbNullString
        Me.TextBox2.SetFocus
        Exit Sub
    End If
    If Len(Trim(Me.TextBox2.Value)) = 10 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Emp.Range("C" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Emp.Range("C2:C" & Alrow).Find(Me.TextBox2.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Emp.Range("C2:C" & Alrow), Me.TextBox2.Value)
        If count > 0 And UCase(DB_Emp.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Mobile number already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox2.Value = vbNullString
            Me.TextBox2.SetFocus
        End If
        Set cell = Nothing
    End If
Application.EnableEvents = True
End Sub

Private Sub TextBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Trim(Me.TextBox3.Value) <> vbNullString Then
        If InStr(1, Me.TextBox3.Value, "@", vbTextCompare) = 0 Or InStr(InStr(1, Me.TextBox3.Value, "@", vbTextCompare) + 1, Me.TextBox3.Value, ".", vbTextCompare) = 0 Then
            MsgBox "Invalid Email ID.", vbCritical, "Invalid Entry"
            Me.TextBox3.Value = vbNullString
            Me.TextBox3.SetFocus
            Exit Sub
        End If
    End If
    If Len(Trim(Me.TextBox3.Value)) <> 0 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Emp.Range("D" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Emp.Range("D2:D" & Alrow).Find(Me.TextBox3.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Emp.Range("D2:D" & Alrow), Me.TextBox3.Value)
        If count > 0 And UCase(DB_Emp.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Email ID already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox3.Value = vbNullString
            Me.TextBox3.SetFocus
        End If
        Set cell = Nothing
    End If
End Sub

Private Sub TextBox5_Change()
'    Me.TextBox6.Text = ""
    If Me.TextBox5.Value = "" Then Exit Sub
    If Not IsDate(Me.TextBox5.Value) Then
        Me.TextBox5.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.TextBox5.Value = "" Or Me.TextBox6.Value = "" Then Exit Sub
    If DateValue(Me.TextBox6.Value) < DateValue(Me.TextBox5.Value) Then
        Me.TextBox5.Text = ""
        MsgBox "Joining date should be lesser than Relieving date.", vbCritical, "Invalid Selection"
        Me.TextBox5.SetFocus
    End If
End Sub

Private Sub TextBox5_Enter()
Application.EnableEvents = False
    If TextBox5.Text <> "" Then Exit Sub
    Me.TextBox5.Locked = False
    Me.TextBox5.Value = ""
    Call Show_Calendar_New
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
    Me.TextBox5.Value = sGetDate
'    Me.TextBox5.Locked = True
Application.EnableEvents = True
End Sub

Private Sub TextBox6_Change()
    If Me.TextBox6.Text = "" Then Exit Sub
    If Not IsDate(Me.TextBox6.Value) Then
        Me.TextBox6.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.TextBox5.Value = "" Or Me.TextBox6.Value = "" Then Exit Sub

    If DateValue(Me.TextBox6.Value) < DateValue(Me.TextBox5.Value) Then
        Me.TextBox6.Text = ""
        MsgBox "Relieving date should be greater than Joining date.", vbCritical, "Invalid Selection"
        Me.TextBox6.Locked = False
        Me.TextBox6.Value = ""
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.TextBox6.Value = sGetDate
'        Me.TextBox6.Locked = True
    End If
End Sub

Private Sub TextBox6_Enter()
If TextBox6.Text <> "" Then Exit Sub
Application.EnableEvents = False
    Me.TextBox6.Locked = False
    Me.TextBox6.Value = ""
    Call Show_Calendar_New
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
    Me.TextBox6.Value = sGetDate
'    Me.TextBox6.Locked = True
Application.EnableEvents = True
End Sub

Private Sub UserForm_Activate()
Application.EnableEvents = False
    Me.Height = 275
    Me.Width = 630
    Me.CB_Subjects.RowSource = "=Subjects"
    If S_Dvp.[A1] = 1 Then
        Cmd_Update.Visible = True: Cmd_Add.Visible = False
        Dim E_Row As Long
        E_Row = S_Dvp.[m5]
        Me.TextBox11.Locked = False
        Me.TextBox11.Text = DB_Emp.Range("A" & E_Row)
        Me.TextBox11.Locked = True
        Me.TextBox1.Value = DB_Emp.Range("B" & E_Row)
        Me.TextBox2.Value = DB_Emp.Range("C" & E_Row)
        Me.TextBox3.Value = DB_Emp.Range("D" & E_Row)
        Me.TextBox4.Value = DB_Emp.Range("E" & E_Row)
        Me.TextBox5.Value = Format(DB_Emp.Range("F" & E_Row), "DD-MMM-YYYY")
        Me.TextBox6.Value = Format(DB_Emp.Range("G" & E_Row), "DD-MMM-YYYY")
        Me.ComboBox1.Value = DB_Emp.Range("H" & E_Row)
        Me.CB_Subjects.Value = UCase(DB_Emp.Range("I" & E_Row))
        Me.CB_MinGrade.Value = DB_Emp.Range("J" & E_Row)
        Me.CB_MaxGrade.Value = DB_Emp.Range("K" & E_Row)
        Me.CB_Prgms.Value = DB_Emp.Range("L" & E_Row)
        Me.TextBox8.Value = DB_Emp.Range("M" & E_Row)
        Me.TextBox9.Value = DB_Emp.Range("N" & E_Row)
        Me.TextBox10.Value = DB_Emp.Range("O" & E_Row)
        Me.TextBox1.SetFocus
    ElseIf S_Dvp.[A1] = 0 Then
        Cmd_Update.Visible = False: Cmd_Add.Visible = True
        Dim lng_EmpID As Long: Dim lng_lrow As Long
        lng_lrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
        
'        Me.TextBox11.Locked = False
'        Me.TextBox11.Text = "E" & lng_lrow + 10000
'        Me.TextBox11.Locked = True
        
        If lng_lrow = 1 Then
            Me.TextBox11.Locked = False: Me.TextBox11.Text = "E" & 10001: Me.TextBox11.Locked = True
        Else
            Me.TextBox11.Locked = False
            DB_Emp.Range("Z2").EntireColumn.Clear
            DB_Emp.Range("Z2").EntireColumn.NumberFormat = "General"
            DB_Emp.Range("Z2:Z" & lng_lrow).FormulaR1C1 = "=MID(RC1,2,LEN(RC1)-1)"
            DB_Emp.Range("Z2:Z" & lng_lrow) = DB_Emp.Range("Z2:Z" & lng_lrow).Value
            Me.TextBox11.Text = "E" & WorksheetFunction.Max(DB_Emp.Range("Z2:Z" & lng_lrow)) + 1
            Me.TextBox11.Locked = True
        End If
        Me.CB_MaxGrade.Visible = False
        Me.TextBox1.SetFocus
        
    End If
Application.EnableEvents = True
End Sub

Attribute VB_Name = "Add_Std"
Attribute VB_Base = "0{E8CBE955-E6E3-4210-A217-08F83617C55A}{479EBAF0-B23D-499C-8A85-ADACA99076F0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'Option Explicit
Public sGetDate As String
Private Sub Cmd_Add_Click()
Application.EnableEvents = False
Dim lng_lrow As Long
    If Trim(Me.TextBox1.Value) <> "" And Trim(Me.TextBox2.Value) <> "" And Trim(Me.TextBox3.Value) <> "" _
        And Trim(Me.TextBox4.Value) <> "" And Trim(Me.TextBox5.Value) <> "" Then
        lng_lrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
        With DB_Std
            .Range("A" & lng_lrow + 1 & ":N" & lng_lrow + 1).ClearContents
            .Range("A" & lng_lrow + 1) = Me.TextBox11.Value
            .Range("B" & lng_lrow + 1) = UCase(Me.TextBox1.Value)
            .Range("C" & lng_lrow + 1) = Me.TextBox2.Value
            .Range("D" & lng_lrow + 1) = LCase(Me.TextBox3.Value)
            .Range("E" & lng_lrow + 1) = Me.TextBox4.Value
            .Range("F" & lng_lrow + 1) = Me.TextBox5.Value
            .Range("G" & lng_lrow + 1) = Me.ComboBox1.Value
            .Range("H" & lng_lrow + 1) = Me.TextBox7.Value
            .Range("I" & lng_lrow + 1) = Me.TextBox8.Value
            .Range("J" & lng_lrow + 1) = Me.TextBox9.Value
            .Range("K" & lng_lrow + 1) = Me.TextBox10.Value
'            If lng_lrow = 1 Then
'                .Range("Z" & lng_lrow + 1) = 10001
'            Else
'                .Range("Z" & lng_lrow + 1) = WorksheetFunction.Max(.Range("Z2:Z" & lng_lrow)) + 1
'            End If
        End With
        MsgBox UCase(Me.TextBox1.Value) & " details added to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.TextBox1.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub Cmd_Cancel_Click()
Application.EnableEvents = False
    MsgBox "Operation cancelled.", vbInformation, "Cancelled"
    Unload Me
Application.EnableEvents = True
End Sub

Private Sub Cmd_Update_Click()
Application.EnableEvents = False
    If Trim(Me.TextBox1.Value) <> "" And Trim(Me.TextBox2.Value) <> "" And Trim(Me.TextBox3.Value) <> "" _
        And Trim(Me.TextBox4.Value) <> "" And Trim(Me.TextBox5.Value) <> "" Then
        lng_lrow = S_Dvp.[m5]
        With DB_Std
            .Range("A" & lng_lrow & ":N" & lng_lrow).ClearContents
            .Range("A" & lng_lrow) = Me.TextBox11.Value
            .Range("B" & lng_lrow) = UCase(Me.TextBox1.Value)
            .Range("C" & lng_lrow) = Me.TextBox2.Value
            .Range("D" & lng_lrow) = LCase(Me.TextBox3.Value)
            .Range("E" & lng_lrow) = Me.TextBox4.Value
            .Range("F" & lng_lrow) = Me.TextBox5.Value
            .Range("G" & lng_lrow) = Me.ComboBox1.Value
            .Range("H" & lng_lrow) = Me.TextBox7.Value
            .Range("I" & lng_lrow) = Me.TextBox8.Value
            .Range("J" & lng_lrow) = Me.TextBox9.Value
            .Range("K" & lng_lrow) = Me.TextBox10.Value
        End With
        MsgBox UCase(Me.TextBox1.Value) & " details updated to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.TextBox1.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub ComboBox1_Change()
    If Me.ComboBox1.Value = vbNullString Then
        Exit Sub
    End If
    Dim count As Integer: Dim i As Integer
    count = 0
    Dim klrow As Long
    Alrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    count = Application.WorksheetFunction.CountIf(DB_Emp.Range("B2:B" & Alrow), Me.ComboBox1.Value)
    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.ComboBox1.Value = ""
    End If
End Sub


Private Sub TextBox2_Change()
Application.EnableEvents = False
    With Me.TextBox2
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub TextBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Application.EnableEvents = False
    If Len(Trim(Me.TextBox2.Value)) < 10 And Trim(Me.TextBox2.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.TextBox2.Value = vbNullString
        Me.TextBox2.SetFocus
    End If
    If Len(Trim(Me.TextBox2.Value)) = 10 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Std.Range("C" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Std.Range("A2:A" & Alrow).Find(Me.TextBox11.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Std.Range("C2:C" & Alrow), Me.TextBox2.Value)
        If count > 0 And UCase(DB_Std.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Mobile number already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox2.Value = vbNullString
            Me.TextBox2.SetFocus
        End If
        Set cell = Nothing
    End If
Application.EnableEvents = True
End Sub

Private Sub TextBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Trim(Me.TextBox3.Value) <> vbNullString And InStr(1, Me.TextBox3.Value, "@", vbTextCompare) = 0 Then
        MsgBox "Invalid Email ID.", vbCritical, "Invalid Entry"
        Me.TextBox3.Value = vbNullString
        Me.TextBox3.SetFocus
    End If
    If Len(Trim(Me.TextBox3.Value)) <> 0 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Std.Range("D" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Std.Range("A2:A" & Alrow).Find(Me.TextBox11.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Std.Range("D2:D" & Alrow), Me.TextBox3.Value)
        If count > 0 And UCase(DB_Std.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Email ID already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox3.Value = vbNullString
            Me.TextBox3.SetFocus
        End If
        Set cell = Nothing
    End If
End Sub

Private Sub TextBox7_Change()
'    Me.TextBox8.Text = ""
    If Me.TextBox7.Value = "" Then Exit Sub
    If Not IsDate(Me.TextBox7.Value) Then
        Me.TextBox7.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.TextBox7.Value = "" Or Me.TextBox8.Value = "" Then Exit Sub
    If DateValue(Me.TextBox8.Value) < DateValue(Me.TextBox7.Value) Then
        Me.TextBox7.Text = ""
        MsgBox "Start date should be lesser than End date.", vbCritical, "Invalid Selection"
        Me.TextBox7.SetFocus
    End If
End Sub

Private Sub TextBox7_Enter()
Application.EnableEvents = False
    Me.TextBox7.Locked = False
    If Me.TextBox7.Value = "" Then
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.TextBox7.Value = sGetDate
    End If
'    Me.TextBox7.Locked = True
Application.EnableEvents = True
End Sub

Private Sub TextBox8_Change()
    If Me.TextBox8.Value = "" Then Exit Sub
    If Not IsDate(Me.TextBox8.Value) Then
        Me.TextBox8.Value = vbNullString
        MsgBox "Enter date only.", vbInformation, "Invalid Entry"
        Exit Sub
    End If
    If Me.TextBox7.Value = "" Or Me.TextBox8.Value = "" Then Exit Sub
    If DateValue(Me.TextBox8.Value) < DateValue(Me.TextBox7.Value) Then
        Me.TextBox8.Text = ""
        MsgBox "End date should be greater than Start date.", vbCritical, "Invalid Selection"
        Me.TextBox8.Locked = False
        Me.TextBox8.Value = ""
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.TextBox8.Value = sGetDate
'        Me.TextBox8.Locked = True
    End If
End Sub

Private Sub TextBox8_Enter()
Application.EnableEvents = False
    Me.TextBox8.Locked = False
    If Me.TextBox8.Value = "" Then
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.TextBox8.Value = sGetDate
    '    Me.TextBox8.Locked = True
    End If
Application.EnableEvents = True
End Sub

Private Sub UserForm_Activate()
Application.EnableEvents = False
    Me.Height = 275
    Me.Width = 592
    If S_Dvp.[A1] = 1 Then
        Cmd_Update.Visible = True: Cmd_Add.Visible = False
        Dim E_Row As Long
        E_Row = S_Dvp.[m5]
        Me.TextBox11.Locked = False
        Me.TextBox11.Text = DB_Std.Range("A" & E_Row)
        Me.TextBox11.Locked = True
        Me.TextBox1.Value = DB_Std.Range("B" & E_Row)
        Me.TextBox2.Value = DB_Std.Range("C" & E_Row)
        Me.TextBox3.Value = DB_Std.Range("D" & E_Row)
        Me.TextBox4.Value = DB_Std.Range("E" & E_Row)
        Me.TextBox5.Value = DB_Std.Range("F" & E_Row)
        Me.ComboBox1.Value = DB_Std.Range("G" & E_Row)
        Me.TextBox7.Value = DB_Std.Range("H" & E_Row)
        Me.TextBox8.Value = DB_Std.Range("I" & E_Row)
        Me.TextBox9.Value = DB_Std.Range("J" & E_Row)
        Me.TextBox10.Value = DB_Std.Range("K" & E_Row)
        Me.TextBox4.SetFocus
    ElseIf S_Dvp.[A1] = 0 Then
        Cmd_Update.Visible = False: Cmd_Add.Visible = True
        Dim lng_EmpID As Long: Dim lng_lrow As Long
        lng_lrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
        
'            Me.TextBox11.Locked = False
'            Me.TextBox11.Text = "S" & 10000 + lng_lrow
'            Me.TextBox11.Locked = True
            
        If lng_lrow = 1 Then
            Me.TextBox11.Locked = False: Me.TextBox11.Text = "S" & 10001: Me.TextBox11.Locked = True
        Else
            Me.TextBox11.Locked = False
            DB_Std.Range("Z2").EntireColumn.Clear
            DB_Std.Range("Z2").EntireColumn.NumberFormat = "General"
            DB_Std.Range("Z2:Z" & lng_lrow).FormulaR1C1 = "=MID(RC1,2,LEN(RC1)-1)"
            DB_Std.Range("Z2:Z" & lng_lrow) = DB_Std.Range("Z2:Z" & lng_lrow).Value
            Me.TextBox11.Text = "S" & WorksheetFunction.Max(DB_Std.Range("Z2:Z" & lng_lrow)) + 1
            Me.TextBox11.Locked = True
        End If
    End If
Application.EnableEvents = True
End Sub

Attribute VB_Name = "Attendance"
Attribute VB_Base = "0{D38563A3-483E-4C9F-ADB2-417BFE8181A3}{61C60EEF-42F1-453C-87BF-169101BBEFE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_CB_Change()
    If Me.CB_CB.Value = vbNullString Then
        Me.Txt_CB_Tchr.Locked = False:  Me.Txt_CB_Subj.Locked = False:   Me.Txt_CB_StDate.Locked = False
        Me.Txt_CB_EndDate.Locked = False:   Me.Txt_CB_StTime.Locked = False:     Me.Txt_CB_EnTime.Locked = False
        Me.Txt_CB_Online_Link.Locked = False
        
        Me.Txt_CB_Tchr.Text = "":   Me.Txt_CB_Subj.Text = "":   Me.Txt_CB_StDate.Text = ""
        Me.Txt_CB_EndDate.Text = "":    Me.Txt_CB_StTime.Text = "": Me.Txt_CB_EnTime.Text = ""
        Me.Txt_CB_Online_Link.Text = ""
        
        Me.Txt_CB_Tchr.Locked = True:   Me.Txt_CB_Subj.Locked = True:   Me.Txt_CB_StDate.Locked = True
        Me.Txt_CB_EndDate.Locked = True:    Me.Txt_CB_StTime.Locked = True:     Me.Txt_CB_EnTime.Locked = True
        Me.Txt_CB_Online_Link.Locked = True
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Dim count As Integer: Dim i As Integer
    count = 0
    Dim klrow As Long
    Alrow = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
    count = Application.WorksheetFunction.CountIf(DB_Emp_Batches.Range("A2:A" & Alrow), Me.CB_CB.Value)

    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.CB_CB.Value = "": Me.CB_CB.SetFocus
    Else
        Me.Txt_CB_Tchr.Locked = False:  Me.Txt_CB_Subj.Locked = False:   Me.Txt_CB_StDate.Locked = False
        Me.Txt_CB_EndDate.Locked = False:   Me.Txt_CB_StTime.Locked = False:     Me.Txt_CB_EnTime.Locked = False
        Me.Txt_CB_Online_Link.Locked = False
        
        Me.Txt_CB_Tchr.Text = "":   Me.Txt_CB_Subj.Text = "":   Me.Txt_CB_StDate.Text = ""
        Me.Txt_CB_EndDate.Text = "":    Me.Txt_CB_StTime.Text = "": Me.Txt_CB_EnTime.Text = ""
        Me.Txt_CB_Online_Link.Text = ""

        Set cell = Nothing
        Set cell = DB_Emp_Batches.Range("A2:A" & Alrow).Find(Me.CB_CB.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 0
        Else
            cell_Row = cell.Row
        End If
        Set cell = Nothing
        
        If cell_Row > 0 Then
            Me.Txt_CB_Tchr.Text = UCase(DB_Emp_Batches.Range("B" & cell_Row))
            Me.Txt_CB_Subj.Text = UCase(DB_Emp_Batches.Range("C" & cell_Row))
            Me.Txt_CB_StDate.Text = Format(DB_Emp_Batches.Range("D" & cell_Row), "DD-mmm-yyyy")
            Me.Txt_CB_EndDate.Text = Format(DB_Emp_Batches.Range("E" & cell_Row), "DD-mmm-yyyy")
            Me.Txt_CB_StTime.Text = DB_Emp_Batches.Range("F" & cell_Row).Text
            Me.Txt_CB_EnTime.Text = DB_Emp_Batches.Range("G" & cell_Row).Text
        End If
        
        Me.Txt_CB_Tchr.Locked = True:   Me.Txt_CB_Subj.Locked = True:   Me.Txt_CB_StDate.Locked = True
        Me.Txt_CB_EndDate.Locked = True:    Me.Txt_CB_StTime.Locked = True:     Me.Txt_CB_EnTime.Locked = True
         If Me.Opt_ClsCancel Then Me.Txt_CB_Online_Link.Locked = True
        
    End If
    Application.ScreenUpdating = True
End Sub

Private Sub Cmd_Completed_Click()
Application.ScreenUpdating = False

    Dim Allset As String
    Allset = False
    If Opt_Send_Link Then
        If Trim(CB_CB.Text) <> "" And Trim(Me.Txt_CB_Online_Link) <> "" Then Allset = True
    ElseIf Opt_ClsCancel Then
        If Trim(CB_CB.Text) <> "" Then Allset = True
    End If

    If Allset = True Then
        Dim strFile As String
        strFile = ThisWorkbook.Path & "\Attendance\" & Trim(UCase(Me.CB_CB.Value)) & ".xlsx"
        strFile1 = Dir(strFile)
        
        If strFile1 = "" Then
            Call Folder_Creation
            Call CreateAttendanceExcel(Trim(UCase(Me.CB_CB.Value)))
        End If
        
        Dim wkb As Workbook: Dim wkb_lrow As Long
        Set wkb = Workbooks.Open(strFile, False, False)
        wkb_lrow = wkb.ActiveSheet.Range("A" & Rows.count).End(xlUp).Row
        counter = 0
        counter = WorksheetFunction.CountIfs(wkb.ActiveSheet.Range("A1:A" & wkb_lrow), Trim(UCase(Me.CB_CB.Value)), _
        wkb.ActiveSheet.Range("C1:C" & wkb_lrow), Format(Date, "DD-MMM-YYYY"))
    
        If counter = 0 Then
                Alrow = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
                DB_Batch.Range("A1:O" & Alrow).Sort Key1:=DB_Batch.Range("A1"), Order1:=xlAscending, Header:=xlYes
                
                Dim rng As Range
                Set rng = Nothing
                Set rng = DB_Batch.Range("A1:A" & Alrow)
                
                Set find_in_lookup_s = rng.Find(What:=Me.CB_CB.Value, LookIn:=xlValues, _
                        LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
                
                Set find_in_lookup_E = rng.Find(What:=Me.CB_CB.Value, LookIn:=xlValues, _
                        LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False)
                
                If Not find_in_lookup_s Is Nothing And Not find_in_lookup_E Is Nothing Then
                    Dim EMails As String: EMails = ""
                    For loop1 = find_in_lookup_s.Row To find_in_lookup_E.Row
                        If Trim(UCase(DB_Batch.Range("A" & loop1))) = Trim(UCase(Me.CB_CB.Value)) Then
                            If EMails = "" And Trim(LCase(DB_Batch.Range("M" & loop1))) <> "" Then
                                EMails = Trim(LCase(DB_Batch.Range("M" & loop1))) & "; "
                            ElseIf EMails <> "" And Trim(LCase(DB_Batch.Range("M" & loop1))) <> "" Then
                                EMails = EMails & Trim(LCase(DB_Batch.Range("M" & loop1))) & "; "
                            End If
                        End If
                    Next loop1
                    Debug.Print EMails
                End If
                If EMails <> "" Then
                    Allset = 0
                    If Opt_Send_Link Then
                        Allset = 1
                    ElseIf Opt_ClsCancel Then
                        Allset = 2
                    End If
                    On Error GoTo Err_EMail
                    Call Send_Batch_Email(EMails, Allset, Trim(UCase(Me.CB_CB.Value)), Trim(Me.Txt_CB_Online_Link))
                    MsgBox "Email sent successfully.", vbInformation, "Operation complete"
                Else
                    MsgBox "Email not sent. Email ID's doesnot exist.", vbInformation, "Invalid Entry."
                    wkb.Close False
                    Unload Me
                    GoTo Final
                End If
                
                Alrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
                Set cell = Nothing
                Set cell = DB_Emp_Batches.Range("A2:A" & Alrow).Find(Me.CB_CB.Value, LookIn:=xlValues)
                If cell Is Nothing Then
                    cell_Row = 0
                Else
                    cell_Row = cell.Row
                End If
                Set cell = Nothing
                If cell_Row > 0 And Opt_Send_Link Then DB_Emp_Batches.Range("I" & cell_Row).Value = DB_Emp_Batches.Range("I" & cell_Row).Value - 1
                
                DB_Batch.Range("i" & find_in_lookup_s.Row & ":i" & find_in_lookup_E.Row) = _
                DB_Emp_Batches.Range("I" & cell_Row).Value
                
                wkb_lrow = wkb_lrow + 1
                wkb.ActiveSheet.Range("A" & wkb_lrow) = Trim(UCase(Me.CB_CB.Value))
                wkb.ActiveSheet.Range("B" & wkb_lrow) = Trim(UCase(Me.Txt_CB_Tchr.Value))
                wkb.ActiveSheet.Range("C" & wkb_lrow) = Format(Date, "DD-MMM-YYYY")
                wkb.ActiveSheet.Range("C1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
                If Opt_Send_Link Then
                    wkb.ActiveSheet.Range("D" & wkb_lrow) = "Done"
                    wkb.ActiveSheet.Range("E" & wkb_lrow) = Trim(Me.Txt_CB_Online_Link)
                ElseIf Opt_ClsCancel Then
                    wkb.ActiveSheet.Range("D" & wkb_lrow) = "Cancelled"
                    wkb.ActiveSheet.Range("E" & wkb_lrow) = ""
                End If
                wkb.ActiveSheet.Range("F" & wkb_lrow) = " "
                wkb.ActiveSheet.Range("A1:D1").EntireColumn.AutoFit
                wkb.ActiveSheet.Range("E1").ColumnWidth = 25
                wkb.Save:   wkb.Close True
                Unload Me
        Else
            MsgBox "Email already sent today.", vbInformation, "Invalid Selection"
            wkb.Close False
            Unload Me
        End If
    Else
        MsgBox "Fill all Mandatory fields and retry.", vbInformation, "Invalid Selection"
        Me.CB_CB.SetFocus
    End If
Final:
Application.ScreenUpdating = True
Exit Sub
Err_EMail:
MsgBox "Error while sending the Email. Please setup the outlook and retry", vbInformation, "Email Error"
Application.ScreenUpdating = True
End Sub
Private Sub Opt_ClsCancel_Click()
    Me.CB_CB.Locked = False
    Me.CB_CB.Value = ""
    Me.Txt_CB_Tchr.Locked = False:  Me.Txt_CB_Subj.Locked = False:   Me.Txt_CB_StDate.Locked = False
    Me.Txt_CB_EndDate.Locked = False:   Me.Txt_CB_StTime.Locked = False:     Me.Txt_CB_EnTime.Locked = False
    Me.Txt_CB_Online_Link.Locked = False
    
    Me.Txt_CB_Tchr.Text = "":   Me.Txt_CB_Subj.Text = "":   Me.Txt_CB_StDate.Text = ""
    Me.Txt_CB_EndDate.Text = "":    Me.Txt_CB_StTime.Text = "": Me.Txt_CB_EnTime.Text = ""
    Me.Txt_CB_Online_Link.Text = ""
    
    Me.Txt_CB_Tchr.Locked = True:   Me.Txt_CB_Subj.Locked = True:   Me.Txt_CB_StDate.Locked = True
    Me.Txt_CB_EndDate.Locked = True:    Me.Txt_CB_StTime.Locked = True:     Me.Txt_CB_EnTime.Locked = True
    Me.Txt_CB_Online_Link.Locked = True: Me.CB_CB.SetFocus
    Me.Label9.Caption = "Provide ONLINE link in the below text field"
End Sub

Private Sub Opt_Send_Link_Click()
    Me.CB_CB.Locked = False
    Me.CB_CB.Value = ""
    Me.Txt_CB_Tchr.Locked = False:  Me.Txt_CB_Subj.Locked = False:   Me.Txt_CB_StDate.Locked = False
    Me.Txt_CB_EndDate.Locked = False:   Me.Txt_CB_StTime.Locked = False:     Me.Txt_CB_EnTime.Locked = False
    Me.Txt_CB_Online_Link.Locked = False
    
    Me.Txt_CB_Tchr.Text = "":   Me.Txt_CB_Subj.Text = "":   Me.Txt_CB_StDate.Text = ""
    Me.Txt_CB_EndDate.Text = "":    Me.Txt_CB_StTime.Text = "": Me.Txt_CB_EnTime.Text = ""
    Me.Txt_CB_Online_Link.Text = ""
    
    Me.Txt_CB_Tchr.Locked = True:   Me.Txt_CB_Subj.Locked = True:   Me.Txt_CB_StDate.Locked = True
    Me.Txt_CB_EndDate.Locked = True:    Me.Txt_CB_StTime.Locked = True:     Me.Txt_CB_EnTime.Locked = True
    Me.Txt_CB_Online_Link.Locked = True
    Me.Txt_CB_Online_Link.Locked = False: Me.CB_CB.SetFocus
    Me.Label9.Caption = "Provide ONLINE link in the below text field*"
End Sub

Private Sub UserForm_Initialize()
    Me.Height = 260
    Me.Width = 582
    Application.ScreenUpdating = False
    klrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    
        Me.CB_CB.Clear
        Me.Txt_CB_Tchr.Locked = False:  Me.Txt_CB_Subj.Locked = False:   Me.Txt_CB_StDate.Locked = False
        Me.Txt_CB_EndDate.Locked = False:   Me.Txt_CB_StTime.Locked = False:     Me.Txt_CB_EnTime.Locked = False
        Me.Txt_CB_Online_Link.Locked = False
        
        Me.Txt_CB_Tchr.Text = "":   Me.Txt_CB_Subj.Text = "":   Me.Txt_CB_StDate.Text = ""
        Me.Txt_CB_EndDate.Text = "":    Me.Txt_CB_StTime.Text = "": Me.Txt_CB_EnTime.Text = ""
        Me.Txt_CB_Online_Link.Text = ""
        
        Me.Txt_CB_Tchr.Locked = True:   Me.Txt_CB_Subj.Locked = True:   Me.Txt_CB_StDate.Locked = True
        Me.Txt_CB_EndDate.Locked = True:    Me.Txt_CB_StTime.Locked = True:     Me.Txt_CB_EnTime.Locked = True
        Me.Txt_CB_Online_Link.Locked = True
        
        Dim dict As Object:     Set dict = CreateObject("Scripting.Dictionary")
        count = 0
        For i = 2 To klrow
            If Trim(DB_Emp_Batches.Range("A" & i).Value) <> "" And Trim(UCase(DB_Emp_Batches.Range("J" & i).Value)) <> "YES" Then
                If Not dict.Exists(UCase(DB_Emp_Batches.Range("A" & i))) Then
                    dict.Add key:=UCase(DB_Emp_Batches.Range("A" & i)), Item:=count
                    count = count + 1
                End If
            End If
        Next
        Set dict = SortDictionaryByKey(dict)
        For Each k In dict.Keys
            Me.CB_CB.AddItem (k)
    '        Debug.Print k
        Next
        Me.CB_CB.Locked = True
        Me.Opt_Send_Link.SetFocus
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "C_Calendar"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WithEvents Btn_Date As CommandButton
Attribute Btn_Date.VB_VarHelpID = -1
Function sGetDate(Optional sInitDate As String) As String
    If sInitDate <> "" Then
        sSelDate = ToDateCodeFromStr(sInitDate)
    Else
        sSelDate = ToDateCode(Date)
    End If
    boolSelected = False
    Show_Calendar_New
    
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Or sInitDate = "" Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
End Function

Function sGetDateFormula(Optional sInitDate As String) As String
    If sInitDate <> "" Then
        sSelDate = ToDateCodeFromStr(sInitDate)
    Else
        sSelDate = ToDateCode(Date)
    End If
    boolSelected = False
    Show_Calendar_New
    
    If sSelDate <> "" Then
        sGetDateFormula = "=ToStrDate(""" & sSelDate & """)"
    Else
        If boolSelected Or sInitDate = "" Then
            sGetDateFormula = ""
        Else
            sGetDateFormula = "=ToStrDate(""" & ToDateCodeFromStr(sInitDate) & """)"
        End If
    End If
    
End Function


Private Sub Btn_Date_Click()
    sSelDate = ToDateCodeFromStr(Btn_Date.ControlTipText)
    boolSelected = True
    Unload F_Calendar
End Sub

Attribute VB_Name = "Close_Batch"
Attribute VB_Base = "0{B63EC2DA-CC85-406E-A9D9-2E7334BDCE64}{665F1FF0-579C-434C-8FBB-B05EF85D1207}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CB_CB_Change()

    If Me.CB_CB.Value = vbNullString Then
        Me.Txt_CB_Tchr.Locked = False:     Me.Txt_CB_Subj.Locked = False
        Me.Txt_CB_StDate.Locked = False:   Me.Txt_CB_EndDate.Locked = False
        Me.Txt_CB_Tchr.Text = "":       Me.Txt_CB_Subj.Text = ""
        Me.Txt_CB_StDate.Text = "":     Me.Txt_CB_EndDate.Text = ""
        Me.Txt_CB_Tchr.Locked = True:     Me.Txt_CB_Subj.Locked = True
        Me.Txt_CB_StDate.Locked = True:   Me.Txt_CB_EndDate.Locked = True
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Dim count As Integer: Dim i As Integer
    count = 0
    Dim klrow As Long
    Alrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    count = Application.WorksheetFunction.CountIf(DB_Emp_Batches.Range("A2:A" & Alrow), Me.CB_CB.Value)

    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.CB_CB.Value = "": Me.CB_CB.SetFocus
    Else
        Me.Txt_CB_Tchr.Locked = False:     Me.Txt_CB_Subj.Locked = False
        Me.Txt_CB_StDate.Locked = False:   Me.Txt_CB_EndDate.Locked = False
        Me.Txt_CB_Tchr.Text = "":       Me.Txt_CB_Subj.Text = ""
        Me.Txt_CB_StDate.Text = "":     Me.Txt_CB_EndDate.Text = ""

        
        S_Dvp.[I5].Clear
        S_Dvp.[I5] = Trim(Me.CB_CB.Value)
        
        Set cell = Nothing
        Set cell = DB_Emp_Batches.Range("A2:A" & Alrow).Find(Me.CB_CB.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 0
        Else
            cell_Row = cell.Row
        End If
        Set cell = Nothing
        S_Dvp.[m5] = cell_Row
        If cell_Row > 0 Then
            Me.Txt_CB_Tchr.Text = UCase(DB_Emp_Batches.Range("B" & cell_Row))
            Me.Txt_CB_Subj.Text = UCase(DB_Emp_Batches.Range("C" & cell_Row))
            Me.Txt_CB_StDate.Text = Format(DB_Emp_Batches.Range("D" & cell_Row), "DD-mmm-yyyy")
            Me.Txt_CB_EndDate.Text = Format(DB_Emp_Batches.Range("E" & cell_Row), "DD-mmm-yyyy")
        End If
        
        Me.Txt_CB_Tchr.Locked = True:     Me.Txt_CB_Subj.Locked = True
        Me.Txt_CB_StDate.Locked = True:   Me.Txt_CB_EndDate.Locked = True
        
    End If
    Application.ScreenUpdating = True
End Sub

Private Sub Cmd_Completed_Click()
Application.ScreenUpdating = False

    If Trim(UCase(Me.CB_CB.Value)) <> "" Then
        Dim i As Integer:       Dim Alrow As Long
        Dim count As Long:      Dim County As Long
        Alrow = DB_Batch.Range("A" & Rows.count).End(xlUp).Row
        
        DB_Batch.Range("A1:O" & Alrow).Sort Key1:=DB_Batch.Range("A1"), Order1:=xlAscending, Header:=xlYes
        
        Dim rng As Range
        Set rng = Nothing
        Set rng = DB_Batch.Range("A1:A" & Alrow)
        
        Set find_in_lookup_s = rng.Find(What:=Me.CB_CB.Value, LookIn:=xlValues, _
                LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
        
        Set find_in_lookup_E = rng.Find(What:=Me.CB_CB.Value, LookIn:=xlValues, _
                LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, MatchCase:=False)
        
        If Not find_in_lookup_s Is Nothing And Not find_in_lookup_E Is Nothing Then _
            DB_Batch.Range("O" & find_in_lookup_s.Row & ":O" & find_in_lookup_E.Row).Value = "YES"
        
'        For i = 2 To Alrow
'            If Trim(UCase(DB_Batch.Range("A" & i))) = Trim(UCase(Me.CB_CB.Value)) Then
'                DB_Batch.Range("O" & i).Value = "YES"
'            End If
'        Next
        Alrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Emp_Batches.Range("A2:A" & Alrow).Find(Me.CB_CB.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 0
        Else
            cell_Row = cell.Row
        End If
        Set cell = Nothing
        If cell_Row > 0 Then DB_Emp_Batches.Range("J" & cell_Row).Value = "YES"
        
        MsgBox "Marked " & Trim(UCase(Me.CB_CB.Value)) & " batch as completed.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Select the batch and retry.", vbInformation, "Invalid Selection"
        Me.CB_CB.SetFocus
    End If
Application.ScreenUpdating = True
End Sub

Private Sub UserForm_Initialize()
    Me.Height = 190
    Me.Width = 267
    Application.ScreenUpdating = False
    klrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
    
        Me.CB_CB.Clear
        Me.Txt_CB_Tchr.Locked = False:     Me.Txt_CB_Subj.Locked = False
        Me.Txt_CB_StDate.Locked = False:   Me.Txt_CB_EndDate.Locked = False
        Me.Txt_CB_Tchr.Text = "":       Me.Txt_CB_Subj.Text = ""
        Me.Txt_CB_StDate.Text = "":     Me.Txt_CB_EndDate.Text = ""
        Me.Txt_CB_Tchr.Locked = True:     Me.Txt_CB_Subj.Locked = True
        Me.Txt_CB_StDate.Locked = True:   Me.Txt_CB_EndDate.Locked = True
        
        Dim dict As Object:     Set dict = CreateObject("Scripting.Dictionary")
        count = 0
        For i = 2 To klrow
            If Trim(DB_Emp_Batches.Range("A" & i).Value) <> "" And Trim(UCase(DB_Emp_Batches.Range("J" & i).Value)) <> "YES" Then
                If Not dict.Exists(UCase(DB_Emp_Batches.Range("A" & i))) Then
                    dict.Add key:=UCase(DB_Emp_Batches.Range("A" & i)), Item:=count
                    count = count + 1
                End If
            End If
        Next
        Set dict = SortDictionaryByKey(dict)
        For Each k In dict.Keys
            Me.CB_CB.AddItem (k)
    '        Debug.Print k
        Next
        Me.CB_CB.SetFocus
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "DB_Batch"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.ActiveSheet.Name <> Me.Name Then Exit Sub
    Application.EnableEvents = False
        Dim lrow As Long: Dim lcol As Long
        lrow = Me.Range("A" & Rows.count).End(xlUp).Row
        lcol = Me.Range("A1").End(xlToRight).Column
        If lrow > 1 Then
            ThisWorkbook.Sheets("Dvp_Stuff").Range("A5").Copy
            Me.Range(Me.Cells(2, 1), Me.Cells(lrow, lcol)).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
        End If
        Me.Range("A1").Select
        Me.Cells.HorizontalAlignment = xlLeft
        Me.Cells.VerticalAlignment = xlCenter
        Me.Cells.Font.Size = 10
        Me.Cells.Font.Name = "Calibri"
        Me.Cells.WrapText = False
        Me.Range("B1:C1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Me.Range("F1:G1").EntireColumn.NumberFormat = "HH:MM AM/PM"
        Me.Range("A1:M1,O1:Q1").EntireColumn.AutoFit
        Me.Range("Z1").EntireColumn.Hidden = True
        Me.Cells.Rows.AutoFit
        Me.Range("N1").ColumnWidth = 22
        ActiveWindow.Zoom = 90
    Application.EnableEvents = True
End Sub

Private Sub Worksheet_Deactivate()
Me.Visible = xlSheetVeryHidden
End Sub
Attribute VB_Name = "DB_Emp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    If ThisWorkbook.ActiveSheet.Name <> Me.Name Then Exit Sub
    Application.EnableEvents = False
        Dim lrow As Long: Dim lcol As Long
        lrow = Me.Range("A" & Rows.count).End(xlUp).Row
        lcol = Me.Range("A1").End(xlToRight).Column
        If lrow > 1 Then
            ThisWorkbook.Sheets("Dvp_Stuff").Range("A5").Copy
            Me.Range(Me.Cells(2, 1), Me.Cells(lrow, lcol)).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
        End If
        Me.Range("A1").Select
        Me.Cells.HorizontalAlignment = xlLeft
        Me.Cells.VerticalAlignment = xlCenter
        Me.Cells.Font.Size = 10
        Me.Cells.Font.Name = "Calibri"
        Me.Cells.WrapText = False
        Me.Range("F1:G1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Me.Range("A1:D1,F1:L1").EntireColumn.AutoFit
        Me.Range("Z1").EntireColumn.Hidden = True
        Me.Range("E1,M1:O1").ColumnWidth = 22
        Me.Cells.Rows.AutoFit
        ActiveWindow.Zoom = 90
    Application.EnableEvents = True
End Sub
Private Sub Worksheet_Deactivate()
Me.Visible = xlSheetVeryHidden
End Sub
Attribute VB_Name = "DB_Emp_Batches"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    If ThisWorkbook.ActiveSheet.Name <> Me.Name Then Exit Sub
    Application.EnableEvents = False
        Me.Range("A1").Select
        Me.Cells.HorizontalAlignment = xlLeft
        Me.Cells.VerticalAlignment = xlCenter
        Me.Cells.Font.Size = 10
        Me.Cells.Font.Name = "Calibri"
        Me.Cells.WrapText = False
        Me.Range("Z1").EntireColumn.Hidden = True
        Me.Range("D1:E1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Me.Range("F1:G1").EntireColumn.NumberFormat = "HH:MM AM/PM"
        Me.Range("A1:L1").EntireColumn.AutoFit
        Me.Cells.Rows.AutoFit
        ActiveWindow.Zoom = 90
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "DB_Enquiry"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    If ThisWorkbook.ActiveSheet.Name <> Me.Name Then Exit Sub
    Application.EnableEvents = False
        Dim lrow As Long: Dim lcol As Long
        lrow = Me.Range("A" & Rows.count).End(xlUp).Row
        lcol = Me.Range("A1").End(xlToRight).Column
        If lrow > 1 Then
            ThisWorkbook.Sheets("Dvp_Stuff").Range("A5").Copy
            Me.Range(Me.Cells(2, 1), Me.Cells(lrow, lcol)).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
        End If
        Me.Range("A1").Select
        Me.Range("D1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Me.Cells.HorizontalAlignment = xlLeft
        Me.Cells.VerticalAlignment = xlCenter
        Me.Cells.Font.Size = 10
        Me.Cells.Font.Name = "Calibri"
        Me.Range("A1:D1,F1").EntireColumn.AutoFit
        Me.Range("E1").ColumnWidth = 22
        Me.Range("Z1").EntireColumn.Hidden = True
        Me.Cells.Rows.AutoFit
        Me.Cells.Columns.AutoFit
        ActiveWindow.Zoom = 90
    Application.EnableEvents = True
End Sub
Private Sub Worksheet_Deactivate()
Me.Visible = xlSheetVeryHidden
End Sub
Attribute VB_Name = "DB_Std"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Sub Worksheet_Activate()
    If ThisWorkbook.ActiveSheet.Name <> Me.Name Then Exit Sub
    Application.EnableEvents = False
'        Dim lrow As Long: Dim lcol As Long
'        lrow = Me.Range("A" & Rows.count).End(xlUp).Row
'        lcol = Me.Range("A1").End(xlToRight).Column
'        If lrow > 1 Then
'            ThisWorkbook.Sheets("Dvp_Stuff").Range("A5").Copy
'            Me.Range(Me.Cells(2, 1), Me.Cells(lrow, lcol)).PasteSpecial xlPasteFormats
'            Application.CutCopyMode = False
'        End If
        Me.Range("A1").Select
        Me.Range("H1:I1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Me.Cells.HorizontalAlignment = xlLeft
        Me.Cells.VerticalAlignment = xlCenter
        Me.Cells.Columns.AutoFit
        Me.Cells.Font.Size = 10
        Me.Cells.Font.Name = "Calibri"
        Me.Range("Z1").EntireColumn.Hidden = True
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "Del_Emp"
Attribute VB_Base = "0{9BEDED34-2A1A-404A-8EFC-AAC8D0FDBEAE}{5EDF915E-5B03-45C9-9F7A-A4AB917D6E9C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub Del_Emp_Data_Click()

Dim rng As Range
Dim lrow As Long

Application.DisplayAlerts = False
Application.ScreenUpdating = False

klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
DB_Emp.Range("A1:N" & klrow).Sort Key1:=DB_Emp.Range("A1"), Order1:=xlAscending, Header:=xlYes
    
    If Me.ComboBox3.Text <> "" Then
        Dim count As Integer: Dim i As Integer
        count = 0
        Dim Slrow As Long
        klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
        Temp = Trim(Me.ComboBox3.Value)
        Unload Me
        
        For i = 2 To klrow
            If LCase(DB_Emp.Range("A" & i).Value) = LCase(Temp) Then
                DB_Emp.Range("A" & i & ":N" & i).ClearContents
                DB_Emp.Range("A" & i + 1 & ":N" & klrow).Cut DB_Emp.Range("A" & i)
            End If
        Next
    
        MsgBox "User deleted from database.", vbInformation, "New User."
    Else
        If Opt_EmpID.Value Then
            MsgBox "Select Employee ID and retry.", vbInformation, "Inputs missing."
            Me.ComboBox3.SetFocus
        End If
        If Opt_MobNum.Value Then
            MsgBox "Select Mobile number and retry.", vbInformation, "Inputs missing."
            Me.TextBox6.SetFocus
        End If
    End If
    
klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
DB_Emp.Range("A1:N" & klrow).Sort Key1:=DB_Emp.Range("A1"), Order1:=xlAscending, Header:=xlYes
    
Application.DisplayAlerts = True
Application.ScreenUpdating = True
End Sub

Private Sub Emp_Update_Click()
    S_Dvp.[A1] = 1
    Unload Me
    Add_Emp.Show
End Sub

Private Sub Opt_EmpID_Click()
Application.EnableEvents = False
    Me.ComboBox3.Locked = False: Me.TextBox7.Text = "":   Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
    Me.ComboBox3.Value = ""
    Me.Opt_MobNum.Locked = False
    Me.TextBox6.Locked = True
    Me.ComboBox3.SetFocus
Application.EnableEvents = True
End Sub

Private Sub Opt_MobNum_Click()
Application.EnableEvents = False
Me.ComboBox3.Text = "": Me.TextBox7.Text = "":   Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
Me.ComboBox3.Locked = True
Me.TextBox6.Locked = False
Me.TextBox6.SetFocus
Application.EnableEvents = True
End Sub

Private Sub TextBox6_Change()
Application.EnableEvents = False
    With Me.TextBox6
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub
Private Sub TextBox6_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    
Application.EnableEvents = False
    If Len(Trim(Me.TextBox6.Value)) < 10 And Trim(Me.TextBox6.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.TextBox6.Value = vbNullString
        Me.TextBox6.SetFocus
    End If
    If Len(Trim(Me.TextBox6.Value)) = 10 Then
        Dim count As Integer
        count = 0
        Dim Alrow As Long
        Alrow = DB_Emp.Range("C" & Rows.count).End(xlUp).Row
        If Me.TextBox6.Value <> "" Then
            count = Application.WorksheetFunction.CountIf(DB_Emp.Range("C2:C" & Alrow), Me.TextBox6.Value)
            
            If count = 0 Then
                MsgBox "Mobile number doesnot exist.", vbInformation, "No Entry"
                Me.TextBox6.Value = ""
            Else
                Me.TextBox7.Text = "":    Me.ComboBox3.Text = "":    Me.TextBox5.Text = ""
                Set cell = Nothing
                Set cell = DB_Emp.Range("C2:C" & Alrow).Find(Me.TextBox6.Value, LookIn:=xlValues)
                If cell Is Nothing Then
                    cell_Row = 1
                Else
                    cell_Row = cell.Row
                End If
                If Trim(Me.TextBox6.Value) = vbNullString Then GoTo last
                S_Dvp.[m5] = cell_Row
                Me.TextBox7.Locked = False: Me.TextBox7.Text = ""
                Me.TextBox7.Text = UCase(DB_Emp.Range("B" & cell_Row)): Me.TextBox7.Locked = True
                Me.ComboBox3.Locked = False: Me.ComboBox3.Text = ""
                Me.ComboBox3.Text = DB_Emp.Range("A" & cell_Row): Me.ComboBox3.Locked = True
                Me.TextBox5.Locked = False: Me.TextBox5.Text = ""
                Me.TextBox5.Text = DB_Emp.Range("D" & cell_Row): Me.TextBox5.Locked = True
                Set cell = Nothing
            End If
        End If
    End If
last:
Application.EnableEvents = True
End Sub

Private Sub UserForm_Initialize()
    Me.Height = 190
    Me.Width = 272
    Application.ScreenUpdating = False
    klrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    Me.ComboBox3.Clear
    Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
    With ComboBox3
        For i = 2 To klrow
            If Trim(DB_Emp.Range("A" & i).Value) <> "" Then .AddItem DB_Emp.Range("A" & i).Value
        Next
    End With
    Me.ComboBox3.Locked = True
    Me.Opt_EmpID.SetFocus
    Application.ScreenUpdating = True
End Sub
Private Sub ComboBox3_Change()
    If Me.ComboBox3.Value = vbNullString Then
        Me.ComboBox3.Text = ""
        Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
        Exit Sub
    End If
    
    If Me.ComboBox3.Value = "" Then
        Exit Sub
    End If
    Dim count As Integer: Dim i As Integer
    Dim cell As Range
    count = 0
    Dim Alrow As Long
    Alrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row

    count = Application.WorksheetFunction.CountIf(DB_Emp.Range("A2:A" & Alrow), Me.ComboBox3.Value)

    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.ComboBox3.Value = ""
    Else
        Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
        S_Dvp.[I5].Clear
        S_Dvp.[I5] = Trim(Me.ComboBox3.Value)
        Set cell = Nothing
        Set cell = DB_Emp.Range("A2:A" & Alrow).Find(Me.ComboBox3.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        S_Dvp.[m5] = cell_Row
        Me.TextBox7.Locked = False: Me.TextBox7.Text = ""
        Me.TextBox7.Text = UCase(DB_Emp.Range("B" & cell_Row)): Me.TextBox7.Locked = True
        Me.TextBox6.Locked = False: Me.TextBox6.Text = ""
        Me.TextBox6.Text = DB_Emp.Range("C" & cell_Row): Me.TextBox6.Locked = True
        Me.TextBox5.Locked = False: Me.TextBox5.Text = ""
        Me.TextBox5.Text = DB_Emp.Range("D" & cell_Row): Me.TextBox5.Locked = True
        Set cell = Nothing
    End If
End Sub
Attribute VB_Name = "Del_Std"
Attribute VB_Base = "0{A5F033DA-2CD9-4C96-8288-B4E376899161}{75A3D0BB-F490-4A2C-98F8-0059A850143A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Del_Emp_Data_Click()

Dim rng As Range
Dim lrow As Long

Application.DisplayAlerts = False
Application.ScreenUpdating = False

klrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
DB_Std.Range("A1:N" & klrow).Sort Key1:=DB_Std.Range("A1"), Order1:=xlAscending, Header:=xlYes
    
    If Me.ComboBox3.Text <> "" Then
        Dim count As Integer: Dim i As Integer
        count = 0
        Dim Slrow As Long
        klrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
        Temp = Trim(Me.ComboBox3.Value)
        Unload Me
        
        For i = 2 To klrow
            If LCase(DB_Std.Range("A" & i).Value) = LCase(Temp) Then
                DB_Std.Range("A" & i & ":N" & i).ClearContents
                DB_Std.Range("A" & i + 1 & ":N" & klrow).Cut DB_Std.Range("A" & i)
            End If
        Next
    
        MsgBox "User deleted from database.", vbInformation, "New User."
    Else
        If Opt_EmpID.Value Then
            MsgBox "Select Student ID and retry.", vbInformation, "Inputs missing."
            Me.ComboBox3.SetFocus
        End If
        If Opt_MobNum.Value Then
            MsgBox "Select Mobile number and retry.", vbInformation, "Inputs missing."
            Me.TextBox6.SetFocus
        End If
    End If
    
klrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
DB_Std.Range("A1:N" & klrow).Sort Key1:=DB_Std.Range("A1"), Order1:=xlAscending, Header:=xlYes
    
Application.DisplayAlerts = True
Application.ScreenUpdating = True
End Sub

Private Sub Emp_Update_Click()
    S_Dvp.[A1] = 1
    Unload Me
    Add_Std.Show
End Sub

Private Sub Opt_EmpID_Click()
Application.EnableEvents = False
    Me.ComboBox3.Locked = False: Me.TextBox7.Text = "":   Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
    Me.ComboBox3.Value = ""
    Me.Opt_MobNum.Locked = False
    Me.TextBox6.Locked = True
    Me.ComboBox3.SetFocus
Application.EnableEvents = True
End Sub

Private Sub Opt_MobNum_Click()
Application.EnableEvents = False
Me.ComboBox3.Text = "": Me.TextBox7.Text = "":   Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
Me.ComboBox3.Locked = True
Me.TextBox6.Locked = False
Me.TextBox6.SetFocus
Application.EnableEvents = True
End Sub

Private Sub TextBox6_Change()
Application.EnableEvents = False
    With Me.TextBox6
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub
Private Sub TextBox6_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    
Application.EnableEvents = False
    If Len(Trim(Me.TextBox6.Value)) < 10 And Trim(Me.TextBox6.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.TextBox6.Value = vbNullString
        Me.TextBox6.SetFocus
    End If
    If Len(Trim(Me.TextBox6.Value)) = 10 Then
        Dim count As Integer
        count = 0
        Dim Alrow As Long
        Alrow = DB_Std.Range("C" & Rows.count).End(xlUp).Row
        If Me.TextBox6.Value <> "" Then
            count = Application.WorksheetFunction.CountIf(DB_Std.Range("C2:C" & Alrow), Me.TextBox6.Value)
            
            If Opt_MobNum Then
                If count = 0 Then
                    MsgBox "Mobile number doesnot exist.", vbInformation, "No Entry"
                    Me.TextBox6.Value = ""
                Else
                    Me.TextBox7.Text = "":    Me.ComboBox3.Text = "":    Me.TextBox5.Text = ""
                    Set cell = Nothing
                    Set cell = DB_Std.Range("C2:C" & Alrow).Find(Me.TextBox6.Value, LookIn:=xlValues)
                    If cell Is Nothing Then
                        cell_Row = 1
                    Else
                        cell_Row = cell.Row
                    End If
                    If Trim(Me.TextBox6.Value) = vbNullString Then GoTo last
                    S_Dvp.[m5] = cell_Row
                    Me.TextBox7.Locked = False: Me.TextBox7.Text = ""
                    Me.TextBox7.Text = UCase(DB_Std.Range("B" & cell_Row)): Me.TextBox7.Locked = True
                    Me.ComboBox3.Locked = False: Me.ComboBox3.Text = ""
                    Me.ComboBox3.Text = DB_Std.Range("A" & cell_Row): Me.ComboBox3.Locked = True
                    Me.TextBox5.Locked = False: Me.TextBox5.Text = ""
                    Me.TextBox5.Text = DB_Std.Range("D" & cell_Row): Me.TextBox5.Locked = True
                    Set cell = Nothing
                End If
            End If
        End If
    End If
last:
Application.EnableEvents = True
End Sub

Private Sub UserForm_Initialize()
    Me.Height = 190
    Me.Width = 272
    Application.ScreenUpdating = False
    klrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row
    Me.ComboBox3.Clear
    Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
    With ComboBox3
        For i = 2 To klrow
            If Trim(DB_Std.Range("A" & i).Value) <> "" Then .AddItem DB_Std.Range("A" & i).Value
        Next
    End With
    Me.ComboBox3.Locked = True
    Me.Opt_EmpID.SetFocus
    Application.ScreenUpdating = True
End Sub
Private Sub ComboBox3_Change()
    If Me.ComboBox3.Value = "" Then
        Me.ComboBox3.Text = ""
        Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
        Exit Sub
    End If
    
    If Me.ComboBox3.Value = "" Then
        Exit Sub
    End If
    Dim count As Integer: Dim i As Integer
    count = 0
    Dim klrow As Long
    Alrow = DB_Std.Range("A" & Rows.count).End(xlUp).Row

    For i = 2 To Alrow
        If Trim(DB_Std.Range("A" & i).Value) = Trim(Me.ComboBox3.Value) Then
            count = count + 1
            Exit For
        End If
    Next

    count = Application.WorksheetFunction.CountIf(DB_Std.Range("A2:A" & Alrow), Me.ComboBox3.Value)

    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.ComboBox3.Value = ""
    Else
        Me.TextBox7.Text = "":    Me.TextBox6.Text = "":    Me.TextBox5.Text = ""
        S_Dvp.[I5].Clear
        S_Dvp.[I5] = Trim(Me.ComboBox3.Value)
        
        Set cell = Nothing
        Set cell = DB_Std.Range("A2:A" & Alrow).Find(Me.ComboBox3.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        S_Dvp.[m5] = cell_Row
        Me.TextBox7.Locked = False: Me.TextBox7.Text = ""
        Me.TextBox7.Text = UCase(DB_Std.Range("B" & cell_Row)): Me.TextBox7.Locked = True
        Me.TextBox6.Locked = False: Me.TextBox6.Text = ""
        Me.TextBox6.Text = DB_Std.Range("C" & cell_Row): Me.TextBox6.Locked = True
        Me.TextBox5.Locked = False: Me.TextBox5.Text = ""
        Me.TextBox5.Text = DB_Std.Range("D" & cell_Row): Me.TextBox5.Locked = True
        Set cell = Nothing
    End If
End Sub
Attribute VB_Name = "Dvp_Stuff"
Sub True_All()
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.Calculation = True
    Application.DisplayAlerts = True
End Sub
Sub False_All()
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = False
    Application.DisplayAlerts = False
End Sub
Sub Folder_Creation()
    Dim fso As New FileSystemObject
    Attndance_Fold_Path = ThisWorkbook.Path & "\Attendance"
    Reports_Fold_Path = ThisWorkbook.Path & "\Reports"
    Reports_Fold_Path1 = ThisWorkbook.Path & "\Reports\Batch Wise"
    Reports_Fold_Path2 = ThisWorkbook.Path & "\Reports\Teachers Wise"
    If Not fso.FolderExists(Attndance_Fold_Path) Then fso.CreateFolder Attndance_Fold_Path
    If Not fso.FolderExists(Reports_Fold_Path) Then fso.CreateFolder Reports_Fold_Path
    If Not fso.FolderExists(Reports_Fold_Path1) Then fso.CreateFolder Reports_Fold_Path1
    If Not fso.FolderExists(Reports_Fold_Path2) Then fso.CreateFolder Reports_Fold_Path2
End Sub
Sub CreateAttendanceExcel(Batch_ID)
    Dim wkb As Workbook
    Set wkb = Workbooks.Add
    wkb.SaveAs ThisWorkbook.Path & "\Attendance\" & Batch_ID & ".xlsx"
    
    wkb.ActiveSheet.Range("A1") = "Batch_ID": wkb.ActiveSheet.Range("B1") = "Teacher"
    wkb.ActiveSheet.Range("C1") = "Date": wkb.ActiveSheet.Range("D1") = "Status"
    wkb.ActiveSheet.Range("E1") = "Online Link"
    
    S_Dvp.[A4].Copy
    wkb.ActiveSheet.Range("A1:E1").PasteSpecial xlPasteFormats
    wkb.ActiveSheet.Cells.HorizontalAlignment = xlLeft
    wkb.ActiveSheet.Cells.VerticalAlignment = xlCenter
    wkb.ActiveSheet.Cells.Font.Size = 10
    wkb.ActiveSheet.Cells.Font.Name = "Calibri"
    wkb.ActiveSheet.Cells.WrapText = False
    wkb.ActiveSheet.Range("A1:E1").EntireColumn.AutoFit
    wkb.ActiveSheet.Range("C1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
    
    wkb.Close True
    Set wkb = Nothing
End Sub
Sub Send_Batch_Email(EMails, Allset, Batch, Online_Link)
Dim templatePath As String
Dim myOlApp As Object
Dim MailItem As Object
    templatePath = ""
    If Allset = 1 Then
        templatePath = ThisWorkbook.Path & "\Emails\Online_Link.oft"
    ElseIf Allset = 2 Then
        templatePath = ThisWorkbook.Path & "\Emails\Cancelled.oft"
    End If
    
    If Dir(templatePath) <> "" Then
        Set myOlApp = CreateObject("Outlook.Application")   '- Outlook object Created
            Set MailItem = Nothing
            Set MailItem = myOlApp.CreateItemfromtemplate(templatePath)
                If Allset = 1 Then
                    ABCD = "//Link//"
                    def = Online_Link
                    MailItem.HTMLBody = Replace(MailItem.HTMLBody, ABCD, def)
                    MailItem.Subject = "Online link for batch: " & Batch & " (" & Format(Date, "DD-MMM-YYYY") & ")"
                ElseIf Allset = 2 Then
                    MailItem.Subject = "Class cancelled for batch: " & Batch & " (" & Format(Date, "DD-MMM-YYYY") & ")"
                End If
                MailItem.To = EMails
                MailItem.Display
            Set MailItem = Nothing
        Set myOlApp = Nothing
    Else
        MsgBox "Templates missing in Emails folder.", vbInformation, "Missing files"
    End If
ThisWorkbook.Activate
End Sub
Public Function SortDictionaryByKey(dict As Object _
                  , Optional sortorder As XlSortOrder = xlAscending) As Object
    
    Dim arrList As Object
    Set arrList = CreateObject("System.Collections.ArrayList")
    
    ' Put keys in an ArrayList
    Dim key As Variant, coll As New Collection
    For Each key In dict
        arrList.Add key
    Next key
    
    ' Sort the keys
    arrList.Sort
    
    ' For descending order, reverse
    If sortorder = xlDescending Then
        arrList.Reverse
    End If
    
    ' Create new dictionary
    Dim dictNew As Object
    Set dictNew = CreateObject("Scripting.Dictionary")
    
    ' Read through the sorted keys and add to new dictionary
    For Each key In arrList
        dictNew.Add key, dict(key)
    Next key
    
    ' Clean up
    Set arrList = Nothing
    Set dict = Nothing
    
    ' Return the new dictionary
    Set SortDictionaryByKey = dictNew
        
End Function

Sub Generate_Reports(x, Fltr_Value, Fname)
    Dim Wkbs As Workbook:   Dim Wks As Worksheet
    Dim lrow As Long:       Dim lcol As Long
    Dim rng As Range
'    x = 1
    Call Folder_Creation
    
    Set Wkbs = Workbooks.Add
    Set Wks = Wkbs.ActiveSheet
    
    If DB_Emp_Batches.AutoFilterMode Then DB_Emp_Batches.AutoFilter = False
    DB_Emp_Batches.Cells.Copy:  Wks.Cells.PasteSpecial xlPasteAll:  Application.CutCopyMode = False
    Wks.Range("Z1").EntireColumn.Clear
    Wks.Activate: Wks.Range("A1").Select
    ActiveWindow.Zoom = 90
    lrow = Wks.Range("A" & Rows.count).End(xlUp).Row
    lcol = Wks.Range("A1").End(xlToRight).Column - 4
    Set rng = Nothing:  Set rng = Wks.Range(Wks.Cells(1, 1), Wks.Cells(lrow, lcol + 2))
    Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 10)) = ""
    If x = 1 Then
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).FormulaR1C1 = _
            "=IF(AND(YEAR(RC4)=YEAR(TODAY()),MONTH(RC4)=MONTH(TODAY())),TRUE,FALSE)"
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)) = _
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).Value
        Fname = ThisWorkbook.Path & "\Reports\Batch Wise\" & Fname
    
    ElseIf x = 2 Then
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).FormulaR1C1 = _
            "=IF(UPPER(RC10)<>""YES"",TRUE,FALSE)"
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)) = _
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).Value
        Fname = ThisWorkbook.Path & "\Reports\Batch Wise\" & Fname
        
    ElseIf x = 3 Then
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).FormulaR1C1 = _
            "=IF(UPPER(RC2)=""" & UCase(Fltr_Value) & """,TRUE,FALSE)"
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)) = _
        Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 1)).Value
        Fname = ThisWorkbook.Path & "\Reports\Teachers Wise\" & Fname

    End If
    
    rng.AutoFilter field:=lcol + 1, Criteria1:=False
    On Error Resume Next
    Set vsb = Nothing
    Set vsb = Wks.Range(Wks.Cells(2, 1), Wks.Cells(lrow, lcol + 2)).SpecialCells(xlCellTypeVisible)
    If Not vsb Is Nothing Then Wks.Range(Wks.Cells(2, 1), Wks.Cells(lrow, lcol + 2)).SpecialCells(xlCellTypeVisible).Rows.EntireRow.Delete
    rng.AutoFilter
    Set vsb = Nothing
    Wks.Range(Wks.Cells(1, lcol + 1), Wks.Cells(lrow, lcol + 6)) = vbNullString
    
    lrow = Wks.Range("A" & Rows.count).End(xlUp).Row
    lrow_used = Wks.UsedRange.Rows.count
    ThisWorkbook.Sheets("Dvp_Stuff").Range("A4").Copy
    Wks.Range(Wks.Cells(1, 1), Wks.Cells(1, lcol)).PasteSpecial xlPasteFormats
    Application.CutCopyMode = False
    If lrow > 1 Then
        If lrow_used > lrow Then Wks.Range("A" & lrow + 1 & ":A" & lrow_used).EntireRow.Delete
        ThisWorkbook.Sheets("Dvp_Stuff").Range("A5").Copy
        Wks.Range(Wks.Cells(2, 1), Wks.Cells(lrow, lcol)).PasteSpecial xlPasteFormats
        Application.CutCopyMode = False
        Wks.Cells.WrapText = False
        Wks.Range("D1:E1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
        Wks.Range("F1:G1").EntireColumn.NumberFormat = "HH:MM AM/PM"
        Wks.Range(Wks.Cells(1, 1), Wks.Cells(1, lcol)).EntireColumn.AutoFit
        Wks.Cells.Rows.AutoFit
    End If
    Wks.Range("A1").Select
    Set rng = Nothing
    Wkbs.SaveAs Fname
    Wkbs.Close True
    ThisWorkbook.Activate
End Sub

Sub Reset_tool()
    int_Confirm = MsgBox("All data will be erased." & vbNewLine & "Do you want to continue?", vbYesNo, "Tool Reset")
    If int_Confirm = 6 Then
        Str_reset = InputBox("Enter password to reset the tool", "Tool Reset", "")
        If UCase(Str_reset) = "PH@N!_RESET" Then
            Call False_All
                If DB_Emp_Batches.AutoFilterMode Then DB_Emp_Batches.AutoFilter = False
                lrow_used = 0:  lrow_used = DB_Emp_Batches.UsedRange.Rows.count
                If lrow_used > 1 Then DB_Emp_Batches.Range("A2:A" & lrow_used).EntireRow.Clear
                DB_Emp_Batches.Range("M1:Z1").Clear
                
                If DB_Batch.AutoFilterMode Then DB_Batch.AutoFilter = False
                lrow_used = 0:  lrow_used = DB_Batch.UsedRange.Rows.count
                If lrow_used > 1 Then DB_Batch.Range("A2:A" & lrow_used).EntireRow.Clear
                
                If DB_Emp.AutoFilterMode Then DB_Emp.AutoFilter = False
                lrow_used = 0:  lrow_used = DB_Emp.UsedRange.Rows.count
                If lrow_used > 1 Then DB_Emp.Range("A2:A" & lrow_used).EntireRow.Clear
                
                If DB_Enquiry.AutoFilterMode Then DB_Enquiry.AutoFilter = False
                lrow_used = 0:  lrow_used = DB_Enquiry.UsedRange.Rows.count
                If lrow_used > 1 Then DB_Enquiry.Range("A2:A" & lrow_used).EntireRow.Clear
                
                If DB_Std.AutoFilterMode Then DB_Std.AutoFilter = False
                lrow_used = 0:  lrow_used = DB_Std.UsedRange.Rows.count
                If lrow_used > 1 Then DB_Std.Range("A2:A" & lrow_used).EntireRow.Clear
            Call True_All
            Call SetZoom
            MsgBox "Tool reset done successfully.", vbInformation, "Operation complete"
        Else
            MsgBox "Incorrect password. Please try again.", vbInformation, "Invalid entry"
        End If
    Else
        MsgBox "Tool reset cancelled.", vbInformation, "Cancelled"
    End If
End Sub
Function DateTime_Overlap(rng1 As Range _
                    , rng2 As Range _
                    , rng3 As Range _
                    , rng4 As Range _
                    , rng5 As Range _
                    , rng6 As Range _
                    , rng7 As Range _
                    , rng8 As Range) As Boolean

Dim Current_Resource_Start_Date As Date
Dim Current_Resource_End_Date As Date
Dim TaskReportDate As Date
Dim TaskReportDate_End As Date

Dim Current_Resource_Start_DateTime As Date
Dim Current_Resource_End_DateTime As Date
Dim TaskReportDateTime As Date
Dim TaskReportDateTime_End As Date

Current_Resource_Start_Date = rng1.Value
Current_Resource_End_Date = rng2.Value
Current_Resource_Start_DateTime = DateAdd("S", 1, rng3.Value)
Current_Resource_End_DateTime = DateAdd("S", -1, rng4.Value)


TaskReportDate = rng5.Value
TaskReportDate_End = rng6.Value
TaskReportDateTime = rng7.Value
TaskReportDateTime_End = rng8.Value



If (Current_Resource_Start_Date <= TaskReportDate And Current_Resource_End_Date >= TaskReportDate) Or _
    (Current_Resource_Start_Date <= TaskReportDate_End And Current_Resource_End_Date >= TaskReportDate_End) Or _
    (Current_Resource_Start_Date >= TaskReportDate And Current_Resource_Start_Date <= TaskReportDate_End) Or _
    (Current_Resource_End_Date >= TaskReportDate And Current_Resource_Start_Date <= TaskReportDate_End) Or _
    (Current_Resource_Start_Date >= TaskReportDate And Current_Resource_End_Date <= TaskReportDate_End) Then
    
    If (Current_Resource_Start_DateTime <= TaskReportDateTime And Current_Resource_End_DateTime >= TaskReportDateTime) Or _
    (Current_Resource_Start_DateTime <= TaskReportDateTime_End And Current_Resource_End_DateTime >= TaskReportDateTime_End) Or _
    (Current_Resource_Start_DateTime >= TaskReportDateTime And Current_Resource_Start_DateTime <= TaskReportDateTime_End) Or _
    (Current_Resource_End_DateTime >= TaskReportDateTime And Current_Resource_Start_DateTime <= TaskReportDateTime_End) Or _
    (Current_Resource_Start_DateTime >= TaskReportDateTime And Current_Resource_End_DateTime <= TaskReportDateTime_End) Then

        DateTime_Overlap = True
    End If
End If

End Function

Sub SetZoom()
    Dim Wks As Worksheet
    ThisWorkbook.BuiltinDocumentProperties("Author") = ""
    For Each Wks In ThisWorkbook.Worksheets
        If UCase(Wks.Name) <> UCase("Dashboard") Then
            Wks.Visible = xlSheetVeryHidden
        Else
            Wks.Activate
            ActiveWindow.Zoom = 90
        End If
    Next Wks
End Sub
Attribute VB_Name = "Enquiry"
Attribute VB_Base = "0{020646D4-8537-4E70-959A-D06A9E8DEC40}{97FEF158-8464-4B8F-92F8-725E54612305}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit
Public sGetDate As String

Private Sub CB_Subjects_Change()
    If Me.CB_Subjects.Value = vbNullString Then
        Exit Sub
    End If
    count = 0
    For i = 0 To Me.CB_Subjects.ListCount - 1
        If UCase(Trim(Me.CB_Subjects.Value)) = UCase(Trim(Me.CB_Subjects.List(i))) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Subjects.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub

Private Sub Cmd_Add_Click()
Application.EnableEvents = False
Dim lng_lrow As Long
    If Trim(Me.Enq_Txt_Name.Value) <> "" And Trim(Me.Enq_Txt_Mob.Value) <> "" And Trim(Me.Enq_Txt_Email.Value) <> "" _
        And Trim(Me.Enq_Txt_Sdate.Value) <> "" And Trim(Me.CB_Subjects.Value) <> "" And Trim(Me.Enq_Txt_Address.Value) <> "" Then
        lng_lrow = DB_Enquiry.Range("A" & Rows.count).End(xlUp).Row
        With DB_Enquiry
            .Range("A" & lng_lrow + 1 & ":N" & lng_lrow + 1).ClearContents
            .Range("A" & lng_lrow + 1) = UCase(Me.Enq_Txt_Name.Value)
            .Range("B" & lng_lrow + 1) = Me.Enq_Txt_Mob.Value
            .Range("C" & lng_lrow + 1) = LCase(Me.Enq_Txt_Email.Value)
            .Range("D" & lng_lrow + 1) = Format(Me.Enq_Txt_Sdate.Value, "DD-MMM-YYYY")
            .Range("E" & lng_lrow + 1) = Me.Enq_Txt_Address.Value
            .Range("F" & lng_lrow + 1) = Me.CB_Subjects.Value
            S_Dvp.[A5].Copy
            .Range("A" & lng_lrow + 1 & ":F" & lng_lrow + 1).PasteSpecial xlPasteFormats
            Application.CutCopyMode = False
            .Range("A1:N" & lng_lrow + 1).WrapText = False
            .Range("D1").EntireColumn.NumberFormat = "DD-MMM-YYYY"
            .Range("A1:F1").EntireColumn.AutoFit
            .Range("A1:N" & lng_lrow + 1).Rows.AutoFit
        End With
        MsgBox UCase(Me.Enq_Txt_Name.Value) & " details added to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.Enq_Txt_Name.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub Cmd_Cancel_Click()
Application.EnableEvents = False
    MsgBox "Operation cancelled.", vbInformation, "Cancelled"
    Unload Me
Application.EnableEvents = True
End Sub

Private Sub Cmd_Update_Click()
Application.EnableEvents = False
    If Trim(Me.TextBox1.Value) <> "" And Trim(Me.TextBox2.Value) <> "" And Trim(Me.TextBox3.Value) <> "" _
        And Trim(Me.TextBox4.Value) <> "" And Trim(Me.TextBox5.Value) <> "" Then
        lng_lrow = S_Dvp.[m5]
        With DB_Std
            .Range("A" & lng_lrow & ":N" & lng_lrow).ClearContents
            .Range("A" & lng_lrow) = Me.TextBox11.Value
            .Range("B" & lng_lrow) = UCase(Me.TextBox1.Value)
            .Range("C" & lng_lrow) = Me.TextBox2.Value
            .Range("D" & lng_lrow) = LCase(Me.TextBox3.Value)
            .Range("E" & lng_lrow) = Me.TextBox4.Value
            .Range("F" & lng_lrow) = Me.TextBox5.Value
            .Range("G" & lng_lrow) = Me.ComboBox1.Value
            .Range("H" & lng_lrow) = Me.TextBox7.Value
            .Range("I" & lng_lrow) = Me.TextBox8.Value
            .Range("J" & lng_lrow) = Me.TextBox9.Value
            .Range("K" & lng_lrow) = Me.TextBox10.Value
        End With
        MsgBox UCase(Me.TextBox1.Value) & " details updated to Database.", vbInformation, "Operation complete"
        Unload Me
    Else
        MsgBox "Enter Mandatory fields and retry.", vbInformation, "Invalid Entry"
        Me.TextBox1.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub ComboBox1_Change()
    If Me.ComboBox1.Value = "" Then
        Exit Sub
    End If
    Dim count As Integer: Dim i As Integer
    count = 0
    Dim klrow As Long
    Alrow = DB_Emp.Range("A" & Rows.count).End(xlUp).Row
    count = Application.WorksheetFunction.CountIf(DB_Emp.Range("B2:B" & Alrow), Me.ComboBox1.Value)
    If count = 0 Then
        MsgBox "Select from dropdown available.", vbInformation, "Invalid selection"
        Me.ComboBox1.Value = ""
    End If
End Sub


Private Sub TextBox2_Change()
Application.EnableEvents = False
    With Me.TextBox2
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub TextBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Application.EnableEvents = False
    If Len(Trim(Me.TextBox2.Value)) < 10 And Trim(Me.TextBox2.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.TextBox2.Value = vbNullString
        Me.TextBox2.SetFocus
    End If
    If Len(Trim(Me.TextBox2.Value)) = 10 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Std.Range("C" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Std.Range("A2:A" & Alrow).Find(Me.TextBox11.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Std.Range("C2:C" & Alrow), Me.TextBox2.Value)
        If count > 0 And UCase(DB_Std.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Mobile number already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox2.Value = vbNullString
            Me.TextBox2.SetFocus
        End If
        Set cell = Nothing
    End If
Application.EnableEvents = True
End Sub

Private Sub TextBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Trim(Me.TextBox3.Value) <> vbNullString And InStr(1, Me.TextBox3.Value, "@", vbTextCompare) = 0 Then
        MsgBox "Invalid Email ID.", vbCritical, "Invalid Entry"
        Me.TextBox3.Value = vbNullString
        Me.TextBox3.SetFocus
    End If
    If Len(Trim(Me.TextBox3.Value)) <> 0 Then
        Dim count As Integer: count = 0
        Dim Alrow As Long
        Alrow = DB_Std.Range("D" & Rows.count).End(xlUp).Row
        Set cell = Nothing
        Set cell = DB_Std.Range("A2:A" & Alrow).Find(Me.TextBox11.Value, LookIn:=xlValues)
        If cell Is Nothing Then
            cell_Row = 1
        Else
            cell_Row = cell.Row
        End If
        count = Application.WorksheetFunction.CountIf(DB_Std.Range("D2:D" & Alrow), Me.TextBox3.Value)
        If count > 0 And UCase(DB_Std.Range("a" & cell_Row)) <> UCase(Me.TextBox11.Text) Then
            MsgBox "Email ID already exists in Database.", vbInformation, "Duplicate"
            Me.TextBox3.Value = vbNullString
            Me.TextBox3.SetFocus
        End If
        Set cell = Nothing
    End If
End Sub

Private Sub TextBox7_Change()
    Me.TextBox8.Text = ""
    If Me.TextBox7.Value = "" Or Me.TextBox8.Value = "" Then Exit Sub
    If DateValue(Me.TextBox8.Value) < DateValue(Me.TextBox7.Value) Then
        Me.TextBox7.Text = ""
        MsgBox "Start date should be lesser than End date.", vbCritical, "Invalid Selection"
        Me.TextBox7.SetFocus
    End If
End Sub

Private Sub TextBox7_Enter()
Application.EnableEvents = False
    Me.TextBox7.Locked = False
    Me.TextBox7.Value = ""
    Call Show_Calendar_New
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
    Me.TextBox7.Value = sGetDate
    Me.TextBox7.Locked = True
Application.EnableEvents = True
End Sub

Private Sub TextBox8_Change()
    If Me.TextBox7.Value = "" Or Me.TextBox8.Value = "" Then Exit Sub
    If DateValue(Me.TextBox8.Value) < DateValue(Me.TextBox7.Value) Then
        Me.TextBox8.Text = ""
        MsgBox "End date should be greater than Start date.", vbCritical, "Invalid Selection"
        Me.TextBox8.Locked = False
        Me.TextBox8.Value = ""
        Call Show_Calendar_New
        If sSelDate <> "" Then
            sGetDate = ToStrDate(sSelDate)
        Else
            If boolSelected Then
                sGetDate = ""
            Else
                sGetDate = sInitDate
            End If
        End If
        Me.TextBox8.Value = sGetDate
        Me.TextBox8.Locked = True
    End If
End Sub

Private Sub TextBox8_Enter()
Application.EnableEvents = False
    Me.TextBox8.Locked = False
    Me.TextBox8.Value = ""
    Call Show_Calendar_New
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
    Me.TextBox8.Value = sGetDate
    Me.TextBox8.Locked = True
Application.EnableEvents = True
End Sub


Private Sub Cmd_Reset_Click()
Application.EnableEvents = False
    Me.Enq_Txt_Name.Value = "": Me.Enq_Txt_Mob.Value = ""
    Me.Enq_Txt_Email.Value = "": Me.Enq_Txt_Sdate.Value = ""
    Me.Enq_Txt_Address.Value = "": Me.Enq_Txt_Subj.Value = ""
Application.EnableEvents = True
End Sub

Private Sub Enq_Txt_Email_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If Trim(Me.Enq_Txt_Email.Value) <> vbNullString Then
        If InStr(1, Me.Enq_Txt_Email.Value, "@", vbTextCompare) = 0 Or InStr(InStr(1, Me.Enq_Txt_Email.Value, "@", vbTextCompare) + 1, Me.Enq_Txt_Email.Value, ".", vbTextCompare) = 0 Then
            MsgBox "Invalid Email ID.", vbCritical, "Invalid Entry"
            Me.Enq_Txt_Email.Value = vbNullString
            Me.Enq_Txt_Email.SetFocus
        End If
    End If
End Sub

Private Sub Enq_Txt_Mob_Change()
Application.EnableEvents = False
    With Me.Enq_Txt_Mob
        If Not IsNumeric(.Value) And .Value <> vbNullString Then
            MsgBox "Sorry, only numbers allowed.", vbCritical, "Invalid Entry"
            .Value = vbNullString
            .SetFocus
        End If
    End With
Application.EnableEvents = True
End Sub

Private Sub Enq_Txt_Mob_Exit(ByVal Cancel As MSForms.ReturnBoolean)
Application.EnableEvents = False
    If Len(Trim(Me.Enq_Txt_Mob.Value)) < 10 And Trim(Me.Enq_Txt_Mob.Value) <> vbNullString Then
        MsgBox "Mobile number should be 10 digits.", vbCritical, "Invalid Entry"
        Me.Enq_Txt_Mob.Value = vbNullString
        Me.Enq_Txt_Mob.SetFocus
    End If
Application.EnableEvents = True
End Sub

Private Sub Enq_Txt_Sdate_Enter()
Application.EnableEvents = False
    Me.Enq_Txt_Sdate.Locked = False
    Me.Enq_Txt_Sdate.Value = ""
    Call Show_Calendar_New
    If sSelDate <> "" Then
        sGetDate = ToStrDate(sSelDate)
    Else
        If boolSelected Then
            sGetDate = ""
        Else
            sGetDate = sInitDate
        End If
    End If
    Me.Enq_Txt_Sdate.Value = sGetDate
    Me.Enq_Txt_Sdate.Locked = True
Application.EnableEvents = True
End Sub

Private Sub UserForm_Activate()
Application.EnableEvents = False
    Me.Height = 161
    Me.Width = 586
Application.EnableEvents = True
End Sub

Attribute VB_Name = "F_Calendar"
Attribute VB_Base = "0{DED5EE60-F228-4AD0-95FA-DE2D98A48451}{8FF7AF34-1F2E-44A9-86D5-C462812903D5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
    
Dim ThisDay As Date
Dim ThisYear, ThisMth As Date
Dim CreateCal As Boolean
Dim i As Integer
Private Sub btn_Go2Today_Click()
    CB_Mth.ListIndex = Format(Date, "mm") - 1
    CB_Yr.ListIndex = CAL_YEAR_RANGE
End Sub
Private Sub CB_Yr_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    'rebuilds the calendar when the year is changed by the user
    Build_Calendar
End Sub
Private Sub SpinButton1_SpinDown()
    If CB_Mth.ListIndex = CB_Mth.ListCount - 1 Then
        CB_Mth.ListIndex = 0
        CB_Yr.ListIndex = CB_Yr.ListIndex + 1
    Else
        CB_Mth.ListIndex = CB_Mth.ListIndex + 1
    End If
End Sub
Private Sub SpinButton1_SpinUp()
    If CB_Mth.ListIndex = 0 Then
        CB_Mth.ListIndex = CB_Mth.ListCount - 1
        CB_Yr.ListIndex = CB_Yr.ListIndex - 1
    Else
        CB_Mth.ListIndex = CB_Mth.ListIndex - 1
    End If
End Sub
Private Sub SpinButton2_SpinDown()
    If CB_Yr.ListIndex = CB_Yr.ListCount - 1 Then
        CB_Yr.ListIndex = 0
    Else
        CB_Yr.ListIndex = CB_Yr.ListIndex + 1
    End If
    'rebuilds the calendar when the year is changed by the user
    Build_Calendar
End Sub
Private Sub SpinButton2_SpinUp()
    If CB_Yr.ListIndex = 0 Then
        CB_Yr.ListIndex = CB_Yr.ListCount - 1
    Else
        CB_Yr.ListIndex = CB_Yr.ListIndex - 1
    End If
    'rebuilds the calendar when the year is changed by the user
    Build_Calendar
End Sub
Private Sub UserForm_Initialize()
Me.Height = 263
Me.Width = 198.5
'    Application.EnableEvents = False
    
    Load_Months
    'starts the form on todays date
    If sSelDate = "" Then
        ThisDay = Date
    Else
        ThisDay = ToDate(sSelDate)
    End If
    
    ThisMth = Format(ThisDay, "mm")
    ThisYear = Format(ThisDay, "yyyy")
    
    For i = 1 To 12
        CB_Mth.AddItem strMonths(i - 1)
    Next
    
    CB_Mth.ListIndex = Format(ThisDay, "mm") - 1
    
    For i = -CAL_YEAR_RANGE To CAL_YEAR_RANGE
        CB_Yr.AddItem Format((DateAdd("yyyy", i, Date)), "yyyy")
    Next
    
    CB_Yr.ListIndex = ThisYear - Year(Date) + CAL_YEAR_RANGE
    
    'Builds the calendar with todays date
    F_Calendar.Width = F_Calendar.Width
    CreateCal = True
    Call Build_Calendar
'    Application.EnableEvents = True
End Sub
Private Sub CB_Mth_Change()
    'rebuilds the calendar when the month is changed by the user
    Build_Calendar
End Sub
Private Sub CB_Yr_Change()
'    'rebuilds the calendar when the year is changed by the user
'    Build_Calendar
End Sub
Private Sub Build_Calendar()
    'the routine that actually builds the calendar each time
    
    If CreateCal = True Then
        
        F_Calendar.Caption = " " & CB_Mth.Value & " " & CB_Yr.Value
        
        'sets the focus for the todays date button
        CommandButton1.SetFocus
        
        For i = 1 To 42
        
            If i < Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1)) Then
                Controls("D" & (i)).Caption = Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                    (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "d")
                Controls("D" & (i)).ControlTipText = ToStrDate(Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                    (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "YYYY%MM%DD"))
            ElseIf i >= Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1)) Then
                Controls("D" & (i)).Caption = Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "d")
                Controls("D" & (i)).ControlTipText = ToStrDate(Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                    (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "YYYY%MM%DD"))
            End If
            
''            Debug.Print Controls("D" & (i)).ControlTipText, Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.value), (CB_Mth.ListIndex + 1), 1))), (DateSerial((CB_Yr.value), (CB_Mth.ListIndex + 1), 1))), "m"), ((CB_Mth.ListIndex + 1))
            If Month(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1)))) = (CB_Mth.ListIndex + 1) Then
                
                Controls("D" & (i)).Font.Bold = True
            Else
                Controls("D" & (i)).Font.Bold = False
            End If
            
            If Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                    (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "m/d/yy") = Format(ThisDay, "m/d/yy") Then
                Controls("D" & (i)).ForeColor = &HFFFFFF
                Controls("D" & (i)).BackColor = &HDEA100
            ElseIf Format(DateAdd("d", (i - Weekday(DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), _
                    (DateSerial((CB_Yr.Value), (CB_Mth.ListIndex + 1), 1))), "m/d/yy") = Format(Date, "m/d/yy") Then
                
                Controls("D" & (i)).ForeColor = &HFFFFFF
                Controls("D" & (i)).BackColor = &HBC81&
            Else
                Controls("D" & (i)).ForeColor = &H313131
                Controls("D" & (i)).BackColor = &HFFFFFF
            End If
        Next
        
    End If
End Sub

Private Sub Btn_Clear_Click()
    sSelDate = ""
    boolSelected = True
    Unload Me
End Sub

Private Sub UserForm_Terminate()
    If boolSelected = False Then
        sSelDate = ""
    End If
End Sub
Attribute VB_Name = "M_Calendar"
Option Explicit

Public Const CAL_YEAR_RANGE = 1919 '* Change this number to change the range of year to show in dropdown
                                '* it gives n years before and n years after current year
                                '* If current year is 2015 and CAL_YEAR_RANGE=2 then year dropdown on calendar shows years 2013 to 2017

Public sSelDate As String
Public boolSelected As Boolean
'Public ctest As C_Calendar
Public strMonths()

Dim Buttons() As New C_Calendar

'* Function to covert datecode into date
Public Function ToDate(sDCode As String) As Date
    Load_Months
    ToDate = DateSerial(Split(sDCode, "%")(0), Split(sDCode, "%")(1), Split(sDCode, "%")(2))
End Function

'* Function to covert datecode into date
Public Function ToStrDate(sDCode As String) As String
    Load_Months
    ToStrDate = Format(Split(sDCode, "%")(2), "00") & "-" & Left(strMonths(Split(sDCode, "%")(1) - 1), 3) & "-" & Split(sDCode, "%")(0)
End Function

'* Function to covert datecode into date
Public Function ToDateCode(dteDate As Date) As String
    ToDateCode = Year(dteDate) & "%" & Month(dteDate) & "%" & Day(dteDate)
End Function
Public Function ToDateCodeFromStr(strDate As String) As String
    Dim iMon As Integer
    
    Select Case Left(Split(strDate, "-")(1), 3)
        Case "Jan"
            iMon = 1
        Case "Feb"
            iMon = 2
        Case "Mar"
            iMon = 3
        Case "Apr"
            iMon = 4
        Case "May"
            iMon = 5
        Case "Jun"
            iMon = 6
        Case "Jul"
            iMon = 7
        Case "Aug"
            iMon = 8
        Case "Sep"
            iMon = 9
        Case "Oct"
            iMon = 10
        Case "Nov"
            iMon = 11
        Case "Dec"
            iMon = 12
    End Select
    ToDateCodeFromStr = Split(strDate, "-")(2) & "%" & iMon & "%" & Split(strDate, "-")(0)
End Function
Sub Load_Months()

    strMonths() = Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
    
End Sub



'* Procedure to attach all buttons to class event and launch calendar
Sub Show_Calendar_New()
    Dim ButtonCount As Integer
    Dim ctl As Control

'   Create the Button objects
    ButtonCount = 0
    For Each ctl In F_Calendar.Controls
        If TypeName(ctl) = "CommandButton" Then
            If Left(ctl.Name, 1) = "D" Then 'Skip the OKButton
                ButtonCount = ButtonCount + 1
                ReDim Preserve Buttons(1 To ButtonCount)
               Set Buttons(ButtonCount).Btn_Date = ctl
            End If
        End If
    Next ctl
    
    F_Calendar.Show
End Sub


'* example on how to use calendar on user form
'Sub Test()
'
'    F_CalendarExample.Show
'
'End Sub
Attribute VB_Name = "Reports"
Attribute VB_Base = "0{42EE741A-8EBC-4C22-AD45-1D726269B879}{AF3AECB0-208F-4C2A-A714-674E0C702041}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Cmd_Rpt_Click()
    Call False_All
    Dim Fname As String
    Fname = "(" & Format(Time, "HH_MM_SS") & ").xlsx"
    If Trim(CB_RptType) <> vbNullString And Trim(CB_Depend) <> vbNullString Then
'        Fname = CB_Depend.Value & Fname
        If Trim(UCase(CB_RptType.Value)) = Trim(UCase("Batch Wise")) Then
            Fname = CB_Depend.Value & Fname
            If Trim(UCase(CB_Depend.Value)) = Trim(UCase("Current Month")) Then
                Call Generate_Reports(1, CB_Depend.Value, Fname):   Unload Me
                MsgBox "Generated Current Month report successfully.", vbInformation, "Operation complete"
            ElseIf Trim(UCase(CB_Depend.Value)) = Trim(UCase("Active Batches")) Then
                Call Generate_Reports(2, CB_Depend.Value, Fname):   Unload Me
                MsgBox "Generated Active Batches report successfully.", vbInformation, "Operation complete"
            End If
            
        ElseIf Trim(UCase(CB_RptType.Value)) = Trim(UCase("Teacher Wise")) Then
            Fname = CB_Depend.Value & Fname
            Call Generate_Reports(3, CB_Depend.Value, Fname):   Unload Me
            MsgBox "Generated " & CB_Depend.Value & " report successfully.", vbInformation, "Operation complete"
        ElseIf Trim(UCase(CB_RptType.Value)) = Trim(UCase("All")) Then
            Call Generate_Reports(1, CB_Depend.Value, "Current Month" & Fname)
            Call Generate_Reports(2, CB_Depend.Value, "Active Batches" & Fname)
            
            lrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
            Dim dict As Object:     Set dict = CreateObject("Scripting.Dictionary")
            count = 0
            For i = 2 To lrow
                If Trim(UCase(DB_Emp_Batches.Range("B" & i))) <> "" Then
                    If Not dict.Exists(UCase(DB_Emp_Batches.Range("B" & i))) Then
                        dict.Add key:=UCase(DB_Emp_Batches.Range("B" & i)), Item:=count
                        count = count + 1
                    End If
                End If
            Next
            Set dict = SortDictionaryByKey(dict)
            lng_trow = 1
            For Each k In dict.Keys
                Call Generate_Reports(3, k, k & Fname)
            Next
            Unload Me
            MsgBox "Generated all reports successfully.", vbInformation, "Operation complete"
        End If
    Else
        MsgBox "Select both the inputs and retry.", vbInformation, "Invalid Selection"
    End If
    Call True_All
End Sub

Private Sub UserForm_Initialize()
    Me.Height = 124
    Me.Width = 294
    Application.ScreenUpdating = False
    Me.CB_RptType.SetFocus
    Application.ScreenUpdating = True
End Sub
Private Sub Cmd_Cancel_Click()
Application.EnableEvents = False
    MsgBox "Operation cancelled.", vbInformation, "Cancelled"
    Unload Me
Application.EnableEvents = True
End Sub
Private Sub CB_RptType_Change()
    If Me.CB_RptType.Value = vbNullString Then
        Me.CB_Depend.Value = vbNullString
        Exit Sub
    End If
    Me.CB_Depend.Locked = False
    If Me.CB_RptType.Value = Me.CB_RptType.List(0) Then
        Me.CB_Depend.RowSource = ""
        Me.CB_Depend.AddItem ("All")
        Me.CB_Depend.Value = "All"
        Me.CB_Depend.Locked = True
        Me.Cmd_Rpt.SetFocus
    ElseIf Me.CB_RptType.Value = Me.CB_RptType.List(1) Then
        Me.CB_Depend.Locked = False
        Me.CB_Depend.Value = vbNullString
        Me.CB_Depend.RowSource = ""
        Me.CB_Depend.RowSource = "=Btch_Reports"
        Me.CB_Depend.SetFocus
    ElseIf Me.CB_RptType.Value = Me.CB_RptType.List(2) Then
        Me.CB_Depend.Locked = False
        Me.CB_Depend.Value = vbNullString
        Me.CB_Depend.RowSource = ""
        lrow = DB_Emp_Batches.Range("A" & Rows.count).End(xlUp).Row
        Dim dict As Object:     Set dict = CreateObject("Scripting.Dictionary")
        count = 0
        For i = 2 To lrow
            If Trim(UCase(DB_Emp_Batches.Range("B" & i))) <> "" Then
                If Not dict.Exists(UCase(DB_Emp_Batches.Range("B" & i))) Then
                    dict.Add key:=UCase(DB_Emp_Batches.Range("B" & i)), Item:=count
                    count = count + 1
                End If
            End If
        Next
        Set dict = SortDictionaryByKey(dict)
        Me.CB_Depend.RowSource = ""
        For Each k In dict.Keys
            Me.CB_Depend.AddItem (k)
        Next
        Set dict = Nothing
        Me.CB_Depend.SetFocus
    Else
        Me.CB_RptType.Value = vbNullString: Me.CB_Depend.RowSource = ""
        MsgBox "Select from dropdown only.", vbInformation, "Invalid Selection"
        Me.CB_RptType.SetFocus
    End If
    
    Application.ScreenUpdating = True
End Sub
Private Sub CB_Depend_Change()
    If Me.CB_Depend.Value = vbNullString Then Exit Sub
    count = 0
    For i = 0 To Me.CB_Depend.ListCount - 1
        If Me.CB_Depend.Value = Me.CB_Depend.List(i) Then
            count = 1
            Exit For
        End If
    Next
    If count = 0 Then
        Me.CB_Depend.Value = vbNullString
        MsgBox "Select from dropdown only.", vbInformation, "Invalid entry"
    End If
End Sub
Attribute VB_Name = "S_Dvp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call False_All: Call SetZoom: Call True_All
    ThisWorkbook.Sheets("Dashboard").Activate
    ThisWorkbook.Sheets("Dvp_Stuff").Visible = xlSheetVeryHidden
End Sub

Private Sub Workbook_Open()
    On Error Resume Next
    ThisWorkbook.Sheets("Dashboard").Activate
    ThisWorkbook.Sheets("Dvp_Stuff").Visible = xlSheetVeryHidden
    Call False_All
    Call SetZoom
    ActiveWorkbook.BuiltinDocumentProperties("Author") = ""
    ThisWorkbook.Sheets("Dashboard").Activate
    Call True_All
End Sub

Sub UNhide_All()
    For Each Wks In ThisWorkbook.Worksheets
        If Wks.Visible = xlSheetVeryHidden Or Wks.Visible = xlSheetHidden Then
            Wks.Visible = xlSheetVisible
            ThisWorkbook.Sheets("Dashboard").Activate
        End If
    Next Wks
End Sub


INQUEST-PP=macro
