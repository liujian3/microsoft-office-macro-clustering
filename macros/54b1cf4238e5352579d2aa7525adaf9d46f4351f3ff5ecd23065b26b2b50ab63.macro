Attribute VB_Name = "AISBCRibbonCallbacks"
' -------------------------------------------------------------------------
' SBC Ribbon Command Callback Routines
' 122719.1434
' -------------------------------------------------------------------------

Option Explicit

' parameter handlers for callbacks
Function sbcr_GetCallbackString(WkshtVarName As String, ValueIfTrue As String, ValueIfFalse As String)
' extract the boolean parameter from the Stats sheet and return the arg string for true or false state
' if  Stats isnt the active sheet, return the default state
Dim WkshtState As Boolean

WkshtState = vba_GetWorksheetVariable(WkshtVarName, cDefaultButtonState)

If WkshtState = True Then sbcr_GetCallbackString = ValueIfTrue Else sbcr_GetCallbackString = ValueIfFalse
End Function

' callback for Enabled/Disabled state
Sub SBCGetEnable(control As IRibbonControl, ByRef Enabled)
Dim theID As String

If IsEmpty(gMyEnableState) Then 'result of lost ribbon
    Debug.Print "SBCGetEnable: gMyEnableState: Empty State. Set to default of: DL"
    gMyEnableState = "DL"
End If

 If gMyEnableState = "EL" Then Enabled = False Else Enabled = True ' default states

 theID = control.ID
 If gMyEnableState = "DL" Then ' split test so item test wont occur if no DL
        If sbcr_DisabledButtonIDInList(theID) = True Then Enabled = False  ' id match to match for disable from list

    ElseIf gMyEnableState = "EL" Then ' split test so item test wont occur if no EL
        If sbcr_DisabledButtonIDInList(theID) = True Then Enabled = True ' id match to match for enable list
               
    ElseIf gMyEnableState = "EA" Then Enabled = True ' special case for all tabs enabled
            
    ElseIf gMyEnableState = "DA" Then Enabled = False ' special case for all tabs disabled
            
    ElseIf theID Like gMyID And gMyEnableState = "E" Then Enabled = True  ' id match to match for enable
                
    ElseIf theID Like gMyID And gMyEnableState = "D" Then Enabled = False  ' id match for disable
    
 End If
End Sub
' callback for Visible/Hidden state
Sub SBCGetVisible(control As IRibbonControl, ByRef MakeVisible)
Dim theID As String
Dim GEDefaultState As Boolean

If IsEmpty(gMyVisibleState) Then 'result of lost ribbon
    Debug.Print "SBCGetVisible: gMyVisibleState: Empty State. Set to default of: VL"
    gMyVisibleState = "VL"
End If

If gMyVisibleState = "VL" Then MakeVisible = False Else MakeVisible = True  ' default states

 theID = control.ID
    If gMyVisibleState = "HL" Then ' split test so item test wont occur if no HL
        If sbcr_HiddenButtonIDInList(theID) = True Then MakeVisible = False  ' id match to match for hidden from list
                
        ElseIf gMyVisibleState = "VL" Then ' split test so item test wont occur if no VL
            If sbcr_HiddenButtonIDInList(theID) = True Then MakeVisible = True   ' id match to match for visible list
               
        ElseIf gMyVisibleState = "VA" Then MakeVisible = True ' special case for all tabs Visble
            
        ElseIf gMyVisibleState = "HA" Then MakeVisible = False ' special case for all tabs hidden
            
        ElseIf theID Like gMyID And gMyVisibleState = "V" Then MakeVisible = True  ' id match to set visible
             
        ElseIf theID Like gMyID And gMyVisibleState = "H" Then MakeVisible = False  ' id match to set hidden

    End If
End Sub
' special handlers for the QAT and Tabs
Sub SBCGetTabVisible(control As IRibbonControl, ByRef MakeVisible)

 MakeVisible = False
 
Select Case control.ID
    Case "TabSBC", "QATSave", "QATSaveAs", "QATPrint":
     MakeVisible = (ActiveSheet.Name = "SBCR" Or ActiveSheet.Name = cTeamWorksheetTab)  ' only allow on SBC worksheets
    
    Case "TabDebug":
    If ActiveSheet.Name = cTeamWorksheetTab Then
        MakeVisible = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Debug_State()")
    ElseIf ActiveSheet.Name = "SBCR" Then
        MakeVisible = True
    Else
        MakeVisible = False
    End If
    
    Case "TabView", "TabHelp", "GroupWindow", "GroupViewShowHide": MakeVisible = True
    
    Case "TabDeveloper", "TabReview", "FileSave", "TabHelp", "FilePrintQuick", "PrintPreviewAndPrint", _
        "GroupWorkbookViews", "GroupWindow", "GroupMacros", "WindowsArrangeAll":
        If ActiveSheet.Name = cTeamWorksheetTab Then
            MakeVisible = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Debug_State()")
            Else: MakeVisible = True
        End If
 
     Case "ViewFreezePanesGallery", "WindowSplitToggle", "WindowHide", "WindowUnhide", "VW1", "ViewSideBySide", _
        "WindowSideBySideSynchronousScrolling", "WindowResetPosition":
         If ActiveSheet.Name = cTeamWorksheetTab Then
             MakeVisible = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Debug_State()")
            Else: MakeVisible = True
        End If
End Select
End Sub
Sub SBCGetTabEnable(control As IRibbonControl, ByRef Enabled)

'Select Case control.ID
 '   Case "WindowNew": Enabled = False

'Case Else
 ' Enabled = True
'End Select

End Sub

Sub SBCGetImage(control As IRibbonControl, ByRef RibbonImage)

Select Case control.ID
  Case "BoxScoresCalculate": RibbonImage = "Calculator"
  Case "BoxScoresDisplay": RibbonImage = "DiagramStylesClassic"
   Case "BoxScoresDisplayNext":
        RibbonImage = sbcr_GetCallbackString("OSWS_BOX_SCORE_SORT_ORDER", "JotNavUIFindNextHit", "JotNavUIFindPrevHit")
 
  Case "BoxScoresDisplayCopy": RibbonImage = "Copy"
 
  Case "ConfigMenu": RibbonImage = "AddInManager"
  Case "ConfigNewTeam": RibbonImage = "AddInManager"
  Case "ConfigNewSeason": RibbonImage = "AddInManager"
  Case "ConfigWorksheetFormat": RibbonImage = "AddInManager"
  
 ' Case "DisplayInfo": RibbonImage = "ARMPreviewButton"
   Case "DisplayInfo": RibbonImage = "Info"
 
 Case "DisplayPendingNotices": RibbonImage = "MacroSecurity"
    
  Case "GeneralPrefsMenu": RibbonImage = "ButtonAddinDisabled"
  
  Case "GeneralPrefsGameRange": RibbonImage = "ApplyFilter"
 
 ' Case "GeneralPrefsMastheadBanners": RibbonImage = "ButtonAddinDisabled"
  Case "GeneralPrefsMastheadBanners": RibbonImage = "TableRepeatHeaderRows"

  Case "DebugF13": RibbonImage = "MacroPlay"
  Case "DebugEditGlobals": RibbonImage = "AdvancedMode"
  Case "DebugDisplayVariables": RibbonImage = "FormatAsLinkToDisplayForm"
  Case "DebugMacroRuntime": RibbonImage = "CDAudioStartTime"
  Case "DebugTrace": RibbonImage = "AddRulesMenu"
  Case "DebugStep": RibbonImage = "MacroSingleStep"
  Case "DebugPrefsNavBar": RibbonImage = "AddInManager"
  Case "DebugPrefsExtended": RibbonImage = "AddInManager"
  Case "DebugPrefsContent": RibbonImage = "AddInManager"


  Case "DisplayTeamBatting": RibbonImage = "PivotDiagramSort"
  Case "DisplayTeamBattingCopy": RibbonImage = "Copy"
  
  Case "DisplayTeamSummary": RibbonImage = "BlogHomePage"
  Case "DisplayTeamSummaryCopy": RibbonImage = "Copy"

  Case "DisplayUserNotes": RibbonImage = "GroupClipboard"
  Case "DisplayUserNotesFormat": RibbonImage = "GroupCreate"
  Case "DisplayUserNotesCopy": RibbonImage = "Copy"

  Case "ExportActiveWebTheme": RibbonImage = "GroupAllFilesManage"
  Case "ExportMenu": RibbonImage = "GroupAllFilesManage"
  Case "ExportRoster": RibbonImage = "GroupAllFilesManage"
  Case "ExportSchedule": RibbonImage = "GroupAllFilesManage"
  Case "ExportSummary": RibbonImage = "GroupAllFilesManage"

  Case "FormatGridlines": RibbonImage = "GridlinesExcel"
  Case "FormatFormulaBar": RibbonImage = "Formula"
  Case "FormatSelectAll": RibbonImage = "SelectAll"
  Case "FormatFormat": RibbonImage = "FormatTextMore"

  Case "FormatProtect": RibbonImage = "InsertHighPrivilegeBlock" '"FileDocumentEncrypt"
   
  Case "FormatCellsMenuFont": RibbonImage = "FontDialog"
 ' Case "FormatCellsMenuStyle": RibbonImage = "GroupStyleSet"
  Case "FormatCellsMenuStyle": RibbonImage = "StylesPane"
  Case "FormatCellsMenuNumber": RibbonImage = "NumberStyleGallery"
  Case "FormatCellsMenuAlignment": RibbonImage = "GroupAlignmentExcel"
  Case "FormatCellsMenuBorders": RibbonImage = "BordersMoreDialog"
  Case "FormatCellsMenuPatterns": RibbonImage = "LinePatternGallery"
  Case "FormatCellsMenuRowHeight": RibbonImage = "RowHeight"
  Case "FormatCellsMenuColumnWidth": RibbonImage = "ColumnWidth"
  Case "FormatCellsMenuRestoreWidths": RibbonImage = "ColumnWidth"
  
'  Case "FormatGraphicsMenuWebGraphicsInfo": RibbonImage = "ARMPreviewButton"
  Case "FormatGraphicsMenuWebGraphicsInfo": RibbonImage = "Info"
  Case "FormatGraphicsMenuPasteGraphics": RibbonImage = "PasteBitmap"
  Case "FormatGraphicsMenuViewColors": RibbonImage = "MoreHighlightColors" '"ColorMenu"
  Case "FormatGraphicsMenuColorPalleteEditor": RibbonImage = "DataGraphicEditItem"

  Case "ImportActiveWebTheme": RibbonImage = "FileUpdate"
  Case "ImportMenu": RibbonImage = "FileUpdate"
  Case "ImportRoster": RibbonImage = "FileUpdate"
  Case "ImportSchedule": RibbonImage = "FileUpdate"
  Case "ImportStats": RibbonImage = "FileUpdate"
  Case "ImportSummary": RibbonImage = "FileUpdate"
  
  Case "Leaders": RibbonImage = "AnimationCustomEmphasisDialog"
'  Case "LeadersPrefs": RibbonImage = "ButtonAddinDisabled"
  Case "LeadersPrefs": RibbonImage = "FormatCellsDialog"
  Case "LeadersUpdate": RibbonImage = "AnimationCustomEmphasisDialog"
  Case "LeadersCopy": RibbonImage = "Copy"
 
 Case "PrintPageSetup": RibbonImage = "PageSetup"
  Case "PrintPageSetupDefault": RibbonImage = "PageSetup"
  Case "Print": RibbonImage = "FilePrint"
  Case "PrintAll": RibbonImage = "FilePrint"
  
  
  Case "PrinterSetup": RibbonImage = "FilePrintSetup"
  Case "PrintMenu": RibbonImage = "FilePrint"
  Case "PrintSelection": RibbonImage = "FilePrint"
  
  Case "QATPrint": RibbonImage = "FilePrint"
  Case "QATSave": RibbonImage = "FileSave"
  Case "QATSaveAs": RibbonImage = "FilesToolSaveAs"

  Case "Quit": RibbonImage = "BroadcastEnd"
  
  Case "Repeat": RibbonImage = "Redo"
  Case "RefreshRibbon": RibbonImage = "RefreshMeetingDetailsRunning"
'  Case "RefreshRibbon": RibbonImage = "GroupSyncStatus"
 ' Case "RefreshRibbon": RibbonImage = "AccessRefreshAllLists"
  Case "RostersAddPlayer": RibbonImage = "AddUserToPermissionGroup"
  Case "RostersAnalyze": RibbonImage = "JunkEmailSafeListsMenu" '"FormPreview"
  Case "RostersConsolidate": RibbonImage = "VersionsAndCheckout"
  Case "RostersDeleteAllPlayers": RibbonImage = "RtcLeaveSession"
  Case "RostersDeletePlayer": RibbonImage = "DistributionListRemoveMember"
  Case "RostersMenu": RibbonImage = "DelegateAccess"
  Case "RostersMerge": RibbonImage = "TracePrecedents"
  Case "RostersRename": RibbonImage = "Rename"
  Case "RostersTransfer": RibbonImage = "ResourcePoolRefresh"
  
  Case "Save": RibbonImage = "FileSave"
  Case "SaveAllPlayerStatsAsWebPages": RibbonImage = "FilesToolSaveAs"
  Case "SaveAs": RibbonImage = "FilesToolSaveAs"
  Case "SaveCSSStyles": RibbonImage = "FilesToolSaveAs"
 Case "SaveSelectionAsHTMLTable": RibbonImage = "FilesToolSaveAs"
  Case "SaveSelectionAsWebPage": RibbonImage = "FilesToolSaveAs"
  
  Case "SBCHelp": RibbonImage = "ButtonTaskSelfSupport"
  Case "SBCHelpDonate": RibbonImage = "ApplyCurrencyFormat"
' Case "SBCHelpRevision": RibbonImage = "VersionHistory"
  Case "SBCHelpShortcuts": RibbonImage = "HelpKeyboardShortcuts"
  Case "SBCHelpSupport": RibbonImage = "LevelingHelpTopics"
'  Case "SBCHelpSupport": RibbonImage = "Help"
  Case "SBCHelpUM": RibbonImage = "DataTypeLookup"

  Case "ScheduleAnalyze": RibbonImage = "MeetingsToolAppointmentCalendar"
  Case "Schedule": RibbonImage = "CalendarHorizontal"
  Case "ScheduleEdit": RibbonImage = "CalendarHorizontal"
  Case "ScheduleGameNumbers": RibbonImage = "EditListItems"
  Case "ScheduleRefreshDisplay": RibbonImage = "RefreshMeetingDetailsRunning"
  Case "ScheduleCopy": RibbonImage = "Copy"
  Case "StandingsCalculate": RibbonImage = "Calculator"
  Case "StandingsDisplay": RibbonImage = "MeetingsToolAppointmentAgenda"
  Case "StandingsEditTeams": RibbonImage = "MeetingsToolAppointmentInsertAgenda"
  Case "StandingsCopy": RibbonImage = "Copy"

  Case "StatsChangeSeason": RibbonImage = "ReplaceWithAutoText"
  Case "StatsDeleteByGame": RibbonImage = "DataFormDeleteRecord"
'  Case "StatsDeleteByGameRange": RibbonImage = "GroupSqlQuerySetup"
  Case "StatsDeleteByGameRange": RibbonImage = "DataFormDeleteRecord"
  Case "StatsDeleteBySeason": RibbonImage = "DataFormDeleteRecord"
  Case "StatsDeleteBySeasonRange": RibbonImage = "DataFormDeleteRecord"
  Case "StatsDeletePlayer": RibbonImage = "DataFormDeleteRecord"
  Case "StatsDisplayPlayer": RibbonImage = "GroupFields"
  Case "StatsDisplayNextPlayer", "StatsSelectNextPlayer": RibbonImage = "NextPageOneNote"
  Case "StatsDisplayPrevPlayer", "StatsSelectPrevPlayer": RibbonImage = "PreviousPageOneNote"
  Case "StatsDisplayExpPlayers": RibbonImage = "FastForwardLong"
  Case "StatsEdit": RibbonImage = "AppendOnly"
  Case "StatsValidate": RibbonImage = "FormPreview"
  
  Case "WebOSWS": RibbonImage = "FormExportToWeb"
  Case "WebOSWSEditHyperlink": RibbonImage = "BuildHyperlink"
  Case "WebOSWSLinksMenu": RibbonImage = "BuildHyperlink"
 ' Case "WebOSWSNavLinks": RibbonImage = "SearchOnWeb"
  Case "WebOSWSNavLinks": RibbonImage = "HyperlinksVerify"
  Case "WebOSWSSummary": RibbonImage = "SearchCalendarsOnline"
  Case "WebSaveSelectionsMenu": RibbonImage = "FilesToolSaveAs"

  Case "WebPrefsMenu": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsContent": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsGeneral": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsIncludes": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsMasthead": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsNavBar": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsOSWS": RibbonImage = "DataSourceCatalogServerScript"
  Case "WebPrefsTheme": RibbonImage = "DataSourceCatalogServerScript"
  
  Case Else: RibbonImage = "TentativeAcceptInvitation" ' default image
End Select

End Sub

Sub SBCGetLabel(ByVal control As IRibbonControl, ByRef Labeling)
Dim NoticesCount As Integer

Select Case control.ID
 Case "DebugHandleFailures": Labeling = gDebugLostHandleLabel
 Case "DebugHandleReloads": Labeling = gDebugHandleReloadsLabel
 Case "DebugHandleFails": Labeling = gDebugHandleReloadFailsLabel
 Case "BoxScoresDisplayNext":
     Labeling = sbcr_GetCallbackString("OSWS_BOX_SCORE_SORT_ORDER", "Display Next Box Score", "Display Previous Box Score")

 Case "RostersSortOthersAreaByGame":
    If vba_GetWorksheetVariable("WORKSHEET_TYPE_ID", cDefaultWorkbookID) = 2 Then _
     Labeling = "Sort Expansion Rosters By Season" _
     Else Labeling = "Sort Expansion Rosters By Game" ' default

Case "BoxScoreSortOrder":
    Labeling = "Sort Ascending (Web and Print)" ' default
    
Case "DisplayPendingNotices":
    Labeling = "Notices: 0" ' default
    If ActiveSheet.Name = cTeamWorksheetTab Then
    NoticesCount = ExecuteExcel4Macro("SBC_Macros.xlm!Calculate_Pending_Notifications()")
    If NoticesCount > 0 Then Labeling = "Notices: " & NoticesCount
    End If
End Select
End Sub

' -------------------------------------------------------------------------
' Display a description when the mouse hovers over a control
' -------------------------------------------------------------------------
Sub SBCGetScreentip(control As IRibbonControl, ByRef Screentip)

Select Case control.ID
  
  Case "BoxScoresCalculate": Screentip = "Calculate [ ctl+alt+B ]"
  Case "BoxScoresDisplay": Screentip = "Box Scores"
  Case "BoxScoresDisplayCopy": Screentip = "Copy to Clipboard"
    
  Case "BoxScoresDisplayNext":
    Screentip = "Display Previous Box Score [ alt+DOWN ]" ' default
     If ActiveSheet.Name = cTeamWorksheetTab Then
        If ExecuteExcel4Macro("SBC_Macros.xlm!Get_Box_Score_Sort_Direction_State()") = True Then _
            Screentip = "Display Next Box Score [ alt+DOWN ]"
    End If
  
  Case "BoxScoreSortOrder": Screentip = "Box Scores Sort Order (Web and Print)" ' default
  Case "ConfigMenu": Screentip = "Configure"
  Case "ConfigNewSeason": Screentip = "Configure New Season"
  Case "ConfigNewTeam": Screentip = "Configure New Team"
  Case "ConfigWorksheetFormat": Screentip = "Configure Worksheet Format"
  
  Case "DisplayInfo": Screentip = "Info"
  
  Case "DisplayPendingNotices":
        Screentip = "Pending Notices"
    If ActiveSheet.Name = cTeamWorksheetTab Then _
        Screentip = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Warning_Messages_String()")
        
  Case "DisplayTeamSummary": Screentip = "Team Summary"
  Case "DisplayTeamSummaryMenu": Screentip = "Team Summary Commands"
  Case "DisplayTeamSummaryCopy": Screentip = "Copy to Clipboard"
  Case "DisplayUserNotes": Screentip = "User Notes"
  Case "DisplayUserNotesMenu": Screentip = "User Notes Commands"
  Case "DisplayUserNotesFormat": Screentip = " Format"
  Case "DisplayUserNotesCopy": Screentip = "Copy to Clipboard"
   
  Case "GeneralPrefsMenu": Screentip = "Preferences"
'  Case "GeneralPrefsGeneralPreferences": Screentip = "General Preferences"
  Case "GeneralPrefsLauncher": Screentip = "General Preferences Dialog"
  Case "GeneralPrefsExpandedCommands": Screentip = "Expanded Command Set [ ctl+E ]"
  
  Case "GeneralPrefsGameRange": Screentip = "Game Range [ alt+R ]"
  Case "GeneralPrefsDisplayInfoMessages": Screentip = "Display Info Messages"
  Case "GeneralPrefsMastheadBanners": Screentip = "Masthead Banners"

  Case "DisplayTeamBatting": Screentip = "Batting Summary"
  Case "DisplayTeamBattingMenu": Screentip = "Batting Summary Commands"
  Case "DisplayTeamBattingCopy": Screentip = "Copy to Clipboard"

  Case "ExportMenu": Screentip = "Export"
  Case "ExportActiveWebTheme": Screentip = "Export Active Web Theme"
  Case "ExportRoster": Screentip = "Export Roster"
  Case "ExportSchedule": Screentip = "Export Schedule"
  Case "ExportSummary": Screentip = "Export Summary"
  
  Case "FormatCellsMenu": Screentip = "Format Cells"
  Case "FormatGridlines": Screentip = "Gridlines and Headings"
  Case "FormatFormulaBar": Screentip = "Formula Bar"
  Case "FormatSelectAll": Screentip = "Select All"
  Case "FormatFormat": Screentip = "Format"
  Case "FormatProtect": Screentip = "Team Worksheet Protect"
  
  Case "FormatCellsMenuFont": Screentip = "Font"
  Case "FormatCellsMenuStyle": Screentip = "Style"
  Case "FormatCellsMenuNumber": Screentip = "Number"
  Case "FormatCellsMenuAlignment": Screentip = "Alignment"
  Case "FormatCellsMenuBorders": Screentip = "Borders"
  Case "FormatCellsMenuPatterns": Screentip = "Pattern"
  Case "FormatCellsMenuRowHeight": Screentip = "Row Height"
  Case "FormatCellsMenuColumnWidth": Screentip = "Column Width"
  Case "FormatCellsMenuRestoreWidths": Screentip = "Restores all column widths to predefined values"
  
  Case "FormatGraphicsMenu": Screentip = "Web Graphics"
  Case "FormatGraphicsMenuWebGraphicsInfo": Screentip = "Web Graphics Info"
  Case "FormatGraphicsMenuPasteGraphics": Screentip = "Paste Web Graphics"
  Case "FormatGraphicsMenuViewColors": Screentip = "Colors"
  Case "FormatGraphicsMenuColorPalleteEditor": Screentip = "Color Palette Editor"

  Case "ImportMenu": Screentip = "Import"
  Case "ImportActiveWebTheme": Screentip = "Import Active Web Theme"
  Case "ImportRoster": Screentip = "Import Roster"
  Case "ImportSchedule": Screentip = "Import Schedule"
  Case "ImportStats": Screentip = "Import Stats"
  Case "ImportSummary": Screentip = "Import Summary"
  
  Case "Leaders": Screentip = "Batting Leaders"
  Case "DisplayLeadersMenu": Screentip = "Batting Leaders Commands"
  Case "LeadersPrefs": Screentip = "Batting Leaders Preferences"
  Case "LeadersUpdate": Screentip = "Batting Leaders Update [ ctl+alt+L ]"
  Case "LeadersCopy": Screentip = "Copy to Clipboard"
 
  Case "PrintIncludeCompletedGamesBoxScores": Screentip = "Include Completed Games Box Scores"
  Case "PrintIncludeHeaderRows": Screentip = "Include Mastheads"
  Case "PrintIncludeUserNotes": Screentip = "Include User Notes Page"
  Case "PrintPageSetup": Screentip = "Page Setup"
  Case "PrintPageSetupDefault": Screentip = "Default Page Setup"
  Case "Print": Screentip = "Print [ ctl+P ]"
  Case "PrintMenu": Screentip = "Print Commands"
' Case "PrintAll": Screentip = "Structured printing of the visiblea areas of the Team Worksheet. One page per section."
  Case "PrinterSetup": Screentip = "Printer Setup"
  Case "PrintSelection": Screentip = "Print Selection [ ctl+alt+P ]"
  
  Case "QATPrint": Screentip = "Print [ ctl+P ]"
  Case "QATSave": Screentip = "Save [ ctl+S ]"
  Case "QATSaveAs": Screentip = "Save As"
  
  Case "Quit": Screentip = "Quit SBC [ ctl+alt+Q ]"
   
  Case "Repeat":
    Screentip = "Repeat Last SBC Command [ ctl+alt+Y ]"
    If ActiveSheet.Name = cTeamWorksheetTab Then _
        Screentip = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Repeat_Command_String()")
    
  Case "RefreshRibbon": Screentip = "Refresh Ribbon"

  Case "RostersAddPlayer": Screentip = "Add Player [ ctl+alt+A ]"
  Case "RostersAnalyze": Screentip = "Analyze Rosters"
  Case "RostersConsolidate": Screentip = "Consolidate Expansion Roster"
  Case "RostersDeleteAllPlayers": Screentip = "Delete All Players"
  Case "RostersDeletePlayer": Screentip = "Delete Player"
  Case "RostersMenu": Screentip = "Rosters"
  Case "RostersMerge": Screentip = "Merge Players"
  Case "RostersRename": Screentip = "Rename Player"
  Case "RostersTransfer": Screentip = "Transfer Player"
  Case "RostersSortOthersAreaByGame":
       Screentip = "Sort Expansion Roster By Game"
       If vba_GetWorksheetVariable("WORKSHEET_TYPE_ID", cDefaultWorkbookID) = 2 Then _
        Screentip = "Sort Expansion Rosters By Season" ' MS mode

  Case "Save": Screentip = "Save [ ctl+S ]"
  Case "SaveMenu": Screentip = "Save Commands"
  Case "SaveAllPlayerStatsAsWebPages": Screentip = "Save All PlayerStats As Web Pages"
  Case "SaveAs": Screentip = "Save As"
  Case "SaveCSSStyles": Screentip = "Save CSS Styles"
  Case "SaveSelectionsMenu": Screentip = "Save Selections In Web Format"
  Case "SaveSelectionAsHTMLTable": Screentip = "Save Selection As HTML Table"
  Case "SaveSelectionAsWebPage": Screentip = "Save Selection As Web Page"
  
' Case "SBCHelp": Screentip = "ButtonTaskSelfSupport"
  Case "SBCHelpDonate": Screentip = "Donate"
' Case "SBCHelpRevision": Screentip = "Navigates to the SBC web site to display SBC revision history"
  Case "SBCHelpShortcuts": Screentip = "Keyboard Shortcuts [ HELP or ctl+alt+? ]"
  Case "SBCHelpSupport": Screentip = "Support"
  Case "SBCHelpUM": Screentip = "User Manual"
  
  Case "SchedulePageWebPrint": Screentip = "Include Schedule Page"
  Case "ScheduleAnalyze": Screentip = "Analyze"
  Case "Schedule": Screentip = "Schedule"
  Case "ScheduleEdit": Screentip = "Edit Team Names [ ctl+alt+S ]"
  Case "ScheduleGameNumbers": Screentip = "Game Numbers [ ctl+alt+N ]"
  Case "ScheduleRefreshDisplay": Screentip = "Refresh and Display [ shift+alt+S ]"
  Case "ScheduleCopy": Screentip = "Copy to Clipboard"
  Case "ScheduleDisplayGameNumbers": Screentip = "Display Game Numbers"
  Case "ScheduleMarkUplayedGames": Screentip = "Mark Unplayed Games as TBP"
  Case "ScheduleHighlightFirstUnplayedGame": Screentip = "Highlight First Unplayed Game"
  Case "StandingsCalculate": Screentip = "Calculate [ ctl+alt+K ]"
  Case "StandingsDisplay": Screentip = "Standings"
  Case "StandingsEditTeams": Screentip = "Edit Teams"
  Case "StandingsCopy": Screentip = "Copy to Clipboard"
  Case "StandingsAutoCalc": Screentip = "Auto Calculate From Schedule"
  Case "StandingsGBLDisplay": Screentip = "Display GBL"

  Case "StatsChangeSeason": Screentip = "Change Stats Season"
  Case "StatsDeleteByGame": Screentip = "Delete Player Stats By Game"
  Case "StatsDeleteByGameRange": Screentip = "Delete Player Stats By Game Range"
  Case "StatsDeleteBySeason": Screentip = "Delete Player Stats By Season"
  Case "StatsDeleteBySeasonRange": Screentip = "Delete All Player Stats By Season"
  Case "StatsDeletePlayer": Screentip = "Delete Player Stats"
  Case "StatsDisplayPlayer": Screentip = "Display Player"
  Case "StatsTrackFines": Screentip = "Track Fines"
  Case "StatsDisplayNextPlayer": Screentip = "Display Next Player [ PAGE DOWN ] or [ alt+" & ChrW(8595) & " ]"
  Case "StatsDisplayPrevPlayer": Screentip = "Display Previous Player [ PAGE UP ] or [ alt+" & ChrW(8593) & " ]"
  Case "StatsDisplayExpPlayers": Screentip = "Display Expansion Roster Players [ END ]"
  Case "StatsDisplaySeasonTotals": Screentip = "Display Season Totals"

  Case "StatsSelectNextPlayer": Screentip = "Select Next Player [ ctl+" & ChrW(8595) & " ]"
  Case "StatsSelectPrevPlayer": Screentip = "Select Previous Player [ ctl+" & ChrW(8593) & " ]"
  Case "StatsEdit": Screentip = "Stats"
  Case "StatsMenu": Screentip = "Stats Commands"
  Case "StatsValidate": Screentip = "Valdate Stats"
  Case "StatsTrackSPStats": Screentip = "Track Slow Pitch stats only"
  
  Case "WebIncludeUserNotes": Screentip = "Include User Notes Page"
  Case "WebIncludeCompletedGamesBoxScores": Screentip = "Include Completed Games Box Scores"
  Case "WebOSWS": Screentip = "One Step Web Site"
  Case "WebOSWSMenu": Screentip = "One Step Web Site Commands"
  Case "WebOSWSSummary": Screentip = "Summary"
  Case "WebOSWSEditHyperlink": Screentip = "Edit Hyperlink [ ctl+alt+H ]"
  Case "WebOSWSLinksMenu": Screentip = "Links"
  Case "WebOSWSNavLinks": Screentip = "Navigation Links"
  
  Case "WebPrefsMenu": Screentip = "Preferences"
  Case "WebPrefsContent": Screentip = "Content"
  Case "WebPrefsGeneral": Screentip = "General"
  Case "WebPrefsIncludes": Screentip = "Include Files"
  Case "WebPrefsMasthead": Screentip = "Masthead"
  Case "WebPrefsNavBar": Screentip = "Navigation Bar"
  Case "WebPrefsOSWS": Screentip = "One Step Web Site"
  Case "WebPrefsTheme": Screentip = "Web Theme"
  Case "WebPrefsSaveAfterSelect": Screentip = "Save As Web Page After Select"
  Case "WebPrefsPromptForOptions": Screentip = "Prompt For Options on Save"
  Case "WebSaveSelectionsMenu": Screentip = "Selections"
  Case Else: Screentip = " "
' Case Else: Screentip = "[" & control.ID & "]: undefined screentip" ' default message
End Select

End Sub


' -------------------------------------------------------------------------
' Display an extended description when the mouse hovers over a control
' -------------------------------------------------------------------------
Sub SBCGetSupertip(control As IRibbonControl, ByRef Supertip)
'Dim TipStub As String

Select Case control.ID
   
  Case "BoxScoreSortOrder": Supertip = "Sort order of box scores by game number for display plus web and printed pages." & vbCr & _
        "Checked: Ascending" & vbCr & "Unchecked:  Decending "
  Case "BoxScoresSplitButton": Supertip = "Additional Box Score commands"
  Case "BoxScoresCalculate": Supertip = "Calculates a specific game box score"
  Case "BoxScoresDisplay": Supertip = "[ HOME ]" & vbCr & "Displays the current game Box Score"
  Case "BoxScoresDisplayNext":
   Supertip = sbcr_GetCallbackString("OSWS_BOX_SCORE_SORT_ORDER", "Displays the next Box Score", _
    "Displays the previous Box Score")
  Case "BoxScoresDisplayCopy": Supertip = "Selects the current Box Score area and copy to the clipboard"
 
  Case "ConfigMenu": Supertip = "Commands to configure the Team Worksheet"
  
  Case "ConfigNewSeason": Supertip = "Configure for a New Season. This will clear:" & vbCr _
    & "Player stats" & vbCr & "Division WLT records" & vbCr & "Batting Leaders" & vbCr & "Box Score display" _
    & vbCr & "Schedule and Game Results" & vbCr & "Rosters and division teams unchanged."
  
  Case "ConfigNewTeam": Supertip = "Configure for a New Team. This will clear:" & vbCr _
    & "Player rosters and stats" & vbCr & "Division teams and WLT records" & vbCr _
    & "Batting Leaders" & vbCr & "Box Score display" _
    & vbCr & "Schedule and Game Results"
  Case "StatsChangeSeason": Supertip = "Modify a selected season identifier."
  Case "ConfigWorksheetFormat": Supertip = "Change the worksheet format for Single or Multi_Season."
  
  Case "DisplayInfo": Supertip = "Display results of recent major operations. Also displays SBC application information."
  
  Case "DisplayPendingNotices":
    Supertip = "Displays notifications of issues that may need corrective action." & vbCr _
    & "The 'Fix' button directs to the applicable  command to resolve."
    
  Case "GeneralPrefsMenu": Supertip = "Application level preferences"
 ' Case "GeneralPrefsGeneralPreferences": Supertip = "General application-wide preferences"
  Case "GeneralPrefsLauncher": Supertip = "Launches the general application-wide preferences dialog"
  
  Case "GeneralPrefsExpandedCommands": Supertip = "Selects Basic (unchecked) or Expanded (checked) Command sets"
  Case "GeneralPrefsGameRange": Supertip = "Select the stats game range to display. Default is all games."
  Case "GeneralPrefsDisplayInfoMessages": Supertip = "When checked, displays additional informative notes during command operation"
  Case "GeneralPrefsMastheadBanners": Supertip = "Refreshes the masthead banners based on the Summary Page masthead"

  Case "DisplayTeamBatting": Supertip = "[ alt+HOME ] or [ alt+B ]" & vbCr & "Displays the composite stats for each player"
  Case "DisplayTeamBattingSplitButton": Supertip = "Additional Team Batting Summary Area commands."
  Case "DisplayTeamBattingCopy": Supertip = "Selects the Team Batting Summary area and copy to the clipboard"
  
  Case "DisplayTeamSummary": Supertip = "[ HOME ]" & vbCr & "Displays the Notices, Division Standings, Box Score (Single Season mode only) and Batting Leader Summary areas."
  Case "DisplayTeamSummarySplitButton": Supertip = "Additional Summary Area commands."
  Case "DisplayTeamSummaryCopy": Supertip = "Selects the Team Summary area and copy to the clipboard"

  Case "DisplayUserNotes": Supertip = "[ ctl+alt+HOME ] or [ alt+K ]" & vbCr & "Displays the User Notes area"
  Case "DisplayUserNotesSplitButton": Supertip = "Additional User Notes area commands"
  Case "DisplayUserNotesFormat": Supertip = "Selective reformatting of the User Notes area"
  Case "DisplayUserNotesCopy": Supertip = "Selects the User Notes area and copy to the clipboard"

  Case "ExportMenu": Supertip = "Selective exports to external files"
  Case "ExportActiveWebTheme": Supertip = "Exports the current Active Web Theme to a file." & vbCr _
    & "Useful to transfer themes across Team Worksheets."
  Case "ExportRoster": Supertip = "Exports the current Active and Expansion rosters to a file"
  Case "ExportSchedule": Supertip = "Exports the current Game Schedule to a file. Text and Calendar format options."
  Case "ExportSummary": Supertip = "Displays a summary of the last Export operation."
  
  Case "FormatCellsMenu": Supertip = "Commands for structured text formatting of cells or selections including protected areas."
  Case "FormatGridlines": Supertip = "Display gridlines and row/column labels"
  Case "FormatFormulaBar": Supertip = "Show the Excel Formula Bar for editing."
  Case "FormatSelectAll": Supertip = "Structured select of all user-visible areas. Useful for group formatting changes."
  Case "FormatFormat": Supertip = "Structured text formatting of cells or selections including protected areas."
  Case "FormatProtect": Supertip = "When checked, unprotects the locked cells of the Team Worksheet." & vbCr _
    & "USE WITH CAUTION. Best to use structured 'Cells' menu commands to prevent corrupting embedded formulas."
  
  Case "FormatCellsMenuFont": Supertip = "Structured formatting of Font characteristics"
  Case "FormatCellsMenuStyle": Supertip = "Structured formatting of Style characteristics"
  Case "FormatCellsMenuNumber": Supertip = "Structured formatting of Number characteristics"
  Case "FormatCellsMenuAlignment": Supertip = "Structured formatting of Alignment characteristics"
  Case "FormatCellsMenuBorders": Supertip = "Structured formatting of Borders characteristics"
  Case "FormatCellsMenuPatterns": Supertip = "Structured formatting of Pattern characteristics"
  Case "FormatCellsMenuRowHeight": Supertip = "Structured formatting of Row Height characteristics"
  Case "FormatCellsMenuColumnWidth": Supertip = "Structured formatting of Column Width characteristics"
  Case "FormatCellsMenuRestoreWidths": Supertip = "Restores all column widths to predefined values"
  
  Case "FormatGraphicsMenu": Supertip = "Commands to manage graphics that will be part of an SBC-generated web site"
  Case "FormatGraphicsMenuWebGraphicsInfo": Supertip = "Get attributes and hyperlink information for the selected web graphic"
  Case "FormatGraphicsMenuPasteGraphics": Supertip = "Paste the clipboard as a graphic at the current location"
  Case "FormatGraphicsMenuViewColors": Supertip = "View the colors in the active color palette"
  Case "FormatGraphicsMenuColorPalleteEditor":  Supertip = "Allows user modifications to the Color Palette"

  Case "ImportMenu": Supertip = "Selective importing from external files"
  Case "ImportActiveWebTheme": Supertip = "Import a Web Theme from a file to the Active Web Theme." & vbCr _
    & "Useful to transfer themes across Team Worksheets."
  Case "ImportRoster": Supertip = "Imports player names from an external file. Useful to build roster entries from other sources."
  Case "ImportSchedule": Supertip = "Imports a game schedule from an external file. Several formats supported."
  Case "ImportStats": Supertip = "Imports game stats from an external file. Several formats supported including popular mobile stats apps."
  Case "ImportSummary": Supertip = "Displays a summary of the last Import operation."
  
  Case "Leaders": Supertip = "[ alt+L ]" & vbCr & "Displays the current Batting Leaders"
  Case "DisplayLeadersSplitButton": Supertip = "Additional Batting Leaders commands"
  Case "LeadersPrefs": Supertip = "Configure the criteria for the Batting Leaders calcuations"
  Case "LeadersUpdate": Supertip = "Calculates the Batting Leaders"
  Case "LeadersCopy": Supertip = "Selects the Batting Leaders area and copy to the clipboard"
  
  Case "PrintIncludeCompletedGamesBoxScores": Supertip = "Checked: Include completed game box scores only." & vbCr & _
        "Unchecked: Include all games on schedule"
  Case "PrintIncludeHeaderRows": Supertip = "Include the masthead area on each page. " & vbCr & _
        "Unchecking this will save ink"
  Case "Print": Supertip = "Structured printing of the Team Worksheet." & vbCr & "One page per section."
'  Case "PrintMenu": Supertip = "Print setup and structured printing commands."
  Case "PrintSplitButton": Supertip = "Commands for Page Setup, Print Setup and other structured printing commands."
  Case "PrintPageSetup": Supertip = "Standard Page Setup for printing"
  Case "PrintPageSetupDefault": Supertip = "Configures Page Setup with default values"
'  Case "PrintAll": Supertip = "Structured printing of the visiblea areas of the Team Worksheet. One page per section."
  Case "PrinterSetup": Supertip = "Special Printer Setup for Windows operating systems"
  Case "PrintSelection": Supertip = "Print a user-selectable area. The area must be a contiguous range of cells."
  Case "PrintIncludeUserNotes": Supertip = "Checked: Include the contents of the User Notes area" & vbCr & "Unchecked: Don't include"
  
  Case "QATPrint": Supertip = "[ ctl+P ]" & vbCr & "Structured printing of the Team Worksheet." & vbCr & "One page per section."
  Case "QATSave": Supertip = "[ ctl+S ]" & vbCr & "Save the Team Worksheet to the currently open file." & vbCr & "NOTE: Files must be saved in .xls format"
  Case "QATSaveAs": Supertip = "Save the Team Worksheet to a new file. NOTE: Files must be saved in .xls format"
  
  Case "Quit": Supertip = "Quit the SBC and closes Excel. User will be prompted to save any changes." & vbCr & "All SBC customizations are deleted from Excel."
  
  Case "Repeat":
    Supertip = "Repeats the previous SBC command (if allowed)"
   
  Case "RefreshRibbon": Supertip = "If you switch back and forth between the SBC tab and the legacy SBC menus and toolbar under the Addins tab, the Ribbon button states can get out of sync." _
        & vbCr & "Use this to resync the states."
  
  Case "RostersAddPlayer": Supertip = "Add a new player to the Active or Expansion roster"
  Case "RostersAnalyze": Supertip = "Analyze the roster for possible inconsistancies (eg: same player in both rosters)."
  Case "RostersConsolidate": Supertip = "Selectively consolidate Expansion roster player entries and stats for a specific season or all seasons into a single entry."
  Case "RostersDeleteAllPlayers": Supertip = "Deletes all players from the rosters and their stats"
  Case "RostersDeletePlayer": Supertip = "Delete a specific player from the roster and their stats"
  Case "RostersMenu": Supertip = "Commands to manage the Active and Expansion rosters"
  Case "RostersMerge": Supertip = "Merge the roster entries and stats of two players into a single entry"
  Case "RostersRename": Supertip = "Change the name of a player"
  Case "RostersTransfer": Supertip = "transfer a player and their stats between the Active and Expansion rosters"
  Case "RostersSortOthersAreaByGame": Supertip = "Determines the sorting of entries in the Others category." & vbCr & _
        "Checked: Sort by Game (SS) or Season (MS)" & vbCr & _
        "Unchecked: Sort by player name"
        
'  Case "SaveMenu": Supertip = "Commands to save the Team Worksheet or selected areas"
  Case "Save": Supertip = "Save the Team Worksheet to the currently open file." & vbCr & "NOTE: Files must be saved in .xls format"
'  Case "SaveSplitButton": Supertip = "Commands to save the Team Worksheet or selected areas"
  Case "SaveAllPlayerStatsAsWebPages": Supertip = "Save all player stats as individual HTML web page files"
  Case "SaveAs": Supertip = "Save the Team Worksheet to a new file." & vbCr & "NOTE: Files must be saved in .xls format"
   Case "SaveCSSStyles": Supertip = "Save the current web cascading style sheet attributes to a .css file"
  Case "SaveSelectionAsHTMLTable": Supertip = "Save the selected area as an HTML table. The selected area must be a contiguous range of cells"
  Case "SaveSelectionAsWebPage": Supertip = "Generates a web page from the current selection.  The selected area must be a contiguous range of cells"
  
'  Case "SBCHelp": Supertip = "ButtonTaskSelfSupport"
  Case "SBCHelpDonate": Supertip = "Navigates to the SBC web site for user donations via PayPal." & vbCr & "Requires browser and internet connection."
'  Case "SBCHelpRevision": Supertip = "Navigates to the SBC web site to display SBC revision history"
  Case "SBCHelpShortcuts": Supertip = "Display Keyboard Shortcuts for common SBC commands"
  Case "SBCHelpSupport": Supertip = "Navigates to the support area of the SBC web site." & vbCr & "Requires browser and internet connection."
  Case "SBCHelpUM": Supertip = "Navigates to the SBC web site and opens the on-line User Manual." & vbCr & "Requires browser and internet connection."

  Case "ScheduleDisplayGameNumbers": Supertip = "When checked, display the assigned game numbers for each game"
  Case "ScheduleMarkUplayedGames": Supertip = "Any game that has not been played or is not reported " & _
        "(eg: Rainout) will be marked as TBP (To Be Played)."
  Case "ScheduleAnalyze": Supertip = "Analyzes the current schedule for incomplete or conficting entries"
  Case "Schedule": Supertip = "[ alt+S ]" & vbCr & "Displays the current schedule and results"
  Case "ScheduleEdit": Supertip = "Edit the team entries in the standings"
  Case "ScheduleSplitButton": Supertip = "Additional commands for the Schedule"
  Case "ScheduleGameNumbers": Supertip = "Functions to resequence game numbers"
  Case "ScheduleRefreshDisplay": Supertip = "Refreshes and then displays the current schedule and results"
  Case "ScheduleCopy": Supertip = "Selects the current Schedule area and copy to the clipboard"
  Case "SchedulePageWebPrint": Supertip = "Include the schedule for printing and web pages."
  
  Case "StandingsSplitButton": Supertip = "Additional commands for the Division Standings"
  Case "StandingsCalculate": Supertip = "Updates the Division Standings"
  Case "StandingsDisplay": Supertip = "[ HOME ]" & vbCr & "Displays the Division Standings"
  Case "StandingsEditTeams": Supertip = "Add/Edit/Delete team names in the Division Standings"
  Case "StandingsCopy": Supertip = "Select the Division Standings area and copy to the clipboard"
  Case "StandingsAutoCalc": Supertip = "When checked, standings will be automatically calculated from the WLT results posted in the schedule." & vbCr & _
        "Standings are relative to the Main Team Name." & vbCr & _
        "When unchecked, WLT are entered manually. Then run the Calculate command."
   Case "StandingsGBLDisplay": Supertip = "Display the Games Behind Leader values. " & vbCr & _
        "Not useful if Autocalc of Standings is enabled."
   
   Case "StatsTrackFines": Supertip = "When checked, track the Fines category"
   Case "StatsTrackSPStats": Supertip = "Stats category tracking." & vbCr & _
        "Checked: Track stats for Slow Pitch Softball" & vbCr & _
        "Unchecked: Track all stats"
  Case "StatsSplitButton": Supertip = "Additional Stats maintenance commands"
  Case "StatsDeleteByGame": Supertip = "Delete all stats for a selected game"
  Case "StatsDeleteByGameRange": Supertip = "Delete all stats for a range of games"
  Case "StatsDeleteBySeason": Supertip = "Delete all stats for a selected season"
  Case "StatsDeleteBySeasonRange": Supertip = "Delete all stats for a range of seasons"
  Case "StatsDeletePlayer": Supertip = "Delete all stats for a selected player"
  Case "StatsDisplayPlayer": Supertip = "Display detailed stats for a selected player"

  Case "StatsDisplayNextPlayer": Supertip = "Display detailed stats for the next player in the roster"
  Case "StatsDisplayPrevPlayer": Supertip = "Display detailed stats for the previous player in the roster"
  Case "StatsDisplaySeasonTotals": Supertip = "Checked: Displays season totals for each player. Normal setting for Multi-Season Mode." & _
    "Unchecked: Special mode to display total games. This is used when a Multi-Season Mode Team Worksheet is used to aggregate stats " & _
    "for a single season (eg: regular season, playoffs, tournaments)"

  Case "StatsDisplayExpPlayers": Supertip = "Display the stats for the Expansion Roster Players. Stats can be sorted by player name or by Game/Season"
  Case "StatsSelectNextPlayer": Supertip = "Select Next Player stats area and copy to the clipboard. Optionally save the area as a web page."
  Case "StatsSelectPrevPlayer": Supertip = "Select Previous Player stats area and copy to the clipboard. Optionally to save the area as a web page."
  
  Case "StatsEdit": Supertip = "[ ctl+alt+U ]" & vbCr & "Enter or update the game stats for one or more players (Single Season mode only)"
  Case "StatsValidate": Supertip = "Valdate the stats for consistancy. Useful after importing stats from external sources"
  
  Case "WebOSWS": Supertip = "[ ctl+alt+W ]" & vbCr & "Create an integrated web site for desktop and mobile browsers"
  Case "WebOSWSSplitButton": Supertip = "Additional commands for One Step Web Site processing"
  Case "WebOSWSSummary": Supertip = "Displays the processing summary of the last One Step Web Site command"
  Case "WebOSWSLinksMenu": Supertip = "Navigation and hyperlinks commands"
  Case "WebOSWSEditHyperlink": Supertip = "Create/Edit a hyperlink for a selected cell"
  Case "WebOSWSNavLinks": Supertip = "Displays the computed web page navigation links and directory paths"
  
  Case "WebIncludeUserNotes": Supertip = "Checked: Include the contents of the User Notes area" & vbCr & "Unchecked: Don't include"
  Case "WebIncludeCompletedGamesBoxScores": Supertip = "Checked: Include completed game box scores only. " & vbCr & _
        "Unchecked: Include all games on schedule"
  Case "WebPrefsMenu": Supertip = "Configure the charactistics for web site creation"
  Case "WebPrefsContent": Supertip = "Configure the charactistics of the main content areas"
  Case "WebPrefsGeneral": Supertip = "General web page charactistics"
  Case "WebPrefsIncludes": Supertip = "Selects the paths for files/directories that are to be incorporated into web pages"
  Case "WebPrefsMasthead": Supertip = "Configure the charactistics of the masthead areas"
  Case "WebPrefsNavBar": Supertip = "Configure the charactistics of the page navigation bar"
  Case "WebPrefsOSWS": Supertip = "Configure the main charactistics for One Step Web Site processing"
  Case "WebPrefsTheme": Supertip = "Selects a predefined or user-defined theme for the web pages"
  Case "WebPrefsSaveAfterSelect": Supertip = "Option to invoke a web page save after an area has been selected"
  Case "WebPrefsPromptForOptions": Supertip = "Option to invoke keyword selection before the web page is created"
 Case "WebSaveSelectionsMenu": Supertip = "Saves specific areas to a file in various web formats." & _
    " Areas can be a user-defined selection of cells or pre-defined areas."
  Case Else: Supertip = "[" & control.ID & "]: undefined Supertip" ' default message
End Select

End Sub

' -------------------------------------------------------------------------
' Handler for toggleButton and checkBox items
' gxxx vars for standalone SBCR testing
' -------------------------------------------------------------------------
Sub SBCGetPressed(control As IRibbonControl, ByRef returnedVal)

    Select Case control.ID
         Case "BoxScoreSortOrder":
            returnedVal = vba_GetWorksheetVariable("OSWS_BOX_SCORE_SORT_ORDER", cDefaultButtonState)
            Call RefreshRibbon ' so box score dispaly prev/next will get updated also
            
       Case "DebugTrace":
          If ActiveSheet.Name = cTeamWorksheetTab Then _
                returnedVal = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Trace_Mode()") _
              Else returnedVal = True
 
        Case "DebugStep":
         If ActiveSheet.Name = cTeamWorksheetTab Then _
            returnedVal = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Step_Mode()") _
            Else returnedVal = True
         
        Case "FormatProtect":
            If ActiveSheet.Name = cTeamWorksheetTab Then _
                returnedVal = Not (ActiveSheet.ProtectContents) _
            Else: returnedVal = False '  value is TRUE if protected so unpressed
        
        Case "FormatGridlines": returnedVal = ActiveWindow.DisplayGridlines
        
        Case "FormatFormulaBar": returnedVal = Application.DisplayFormulaBar
        
        Case "GeneralPrefsExpandedCommands": ' retrieve local var
           If ActiveSheet.Name = cTeamWorksheetTab Then _
            returnedVal = ExecuteExcel4Macro("SBC_Macros.xlm!Get_Expanded_Menus_State()") _
            Else returnedVal = True
                       
        Case "GeneralPrefsDisplayInfoMessages":
            returnedVal = vba_GetWorksheetVariable("DISPLAY_INFO_MESSAGES", cDefaultButtonState)
            
        Case "PrintIncludeCompletedGamesBoxScores":
            returnedVal = vba_GetWorksheetVariable("PRINT_INCLUDE_COMPLETED_GAMES_BOX_SCORES", cDefaultButtonState)
         
        Case "PrintIncludeUserNotes":
            returnedVal = vba_GetWorksheetVariable("USER_NOTES_AREA_PRINT", cDefaultButtonState)
            
        Case "PrintIncludeHeaderRows":
            returnedVal = vba_GetWorksheetVariable("PRINT_INCLUDE_HEADER_ROWS", cDefaultButtonState)
       
        Case "RostersSortOthersAreaByGame":
            returnedVal = vba_GetWorksheetVariable("SORT_OTHERS_AREA_BY_GAME", cDefaultButtonState)
            
        Case "ScheduleDisplayGameNumbers":
            returnedVal = vba_GetWorksheetVariable("SCHEDULE_DISPLAY_GAME_NUMBERS", cDefaultButtonState)
            
        Case "ScheduleMarkUplayedGames":
            returnedVal = vba_GetWorksheetVariable("MARK_UNPLAYED_GAMES_AS_TBP", cDefaultButtonState)
                       
            Case "ScheduleHighlightFirstUnplayedGame":
            returnedVal = vba_GetWorksheetVariable("SCHEDULE_HIGHLIGHT_FIRST_UNPLAYED_GAME", cDefaultButtonState)
            
        Case "SchedulePageWebPrint":
            returnedVal = vba_GetWorksheetVariable("OSWS_SCHEDULE_PAGE_ENABLE", cDefaultButtonState)
             
        Case "StandingsAutoCalc":
            returnedVal = vba_GetWorksheetVariable("AUTO_CALC_STANDINGS", cDefaultButtonState)
            
        Case "StandingsGBLDisplay":
            returnedVal = vba_GetWorksheetVariable("GBL_DISPLAY_ENABLE", cDefaultButtonState)

        Case "StatsTrackFines":
            returnedVal = vba_GetWorksheetVariable("SHOW_FINES_TRACKING", cDefaultButtonState)

        Case "StatsTrackSPStats":
            returnedVal = vba_GetWorksheetVariable("TRACK_SP_STATS_ONLY", cDefaultButtonState)
            
        Case "StatsDisplaySeasonTotals":
            returnedVal = vba_GetWorksheetVariable("DISPLAY_SEASON_TOTALS", cDefaultButtonState)
             
        Case "WebIncludeCompletedGamesBoxScores":
            returnedVal = vba_GetWorksheetVariable("HTML_INCLUDE_COMPLETED_GAMES_BOX_SCORES", cDefaultButtonState)
        
        Case "WebIncludeUserNotes":
            returnedVal = vba_GetWorksheetVariable("OSWS_USER_NOTES_AREA_WEB", cDefaultButtonState)
           
        Case "WebPrefsPromptForOptions":
                returnedVal = vba_GetWorksheetVariable("WS_PROMPT_FOR_OPTIONS", cDefaultButtonState)
                 
         Case "WebPrefsSaveAfterSelect":
                returnedVal = vba_GetWorksheetVariable("WEB_SAVE_AFTER_SELECT", cDefaultButtonState)
    
    End Select
         Call RefreshControl(control.ID, "SBCGetPressed")
         
    End Sub

    Sub SBCRunPressedMacro(control As IRibbonControl, pressed As Boolean)
       '  gxxx variables for standalone SBCR testing
       Dim theID As String
       
       theID = control.ID
       
        Select Case theID
        Case "BoxScoreSortOrder":
          '  gBoxScoreSortOrderPressed = pressed
          ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("OSWS_BOX_SCORE_SORT_ORDER", pressed, "", "")
            
        Case "DebugTrace":
           ' gTraceMode = pressed
             If ActiveSheet.Name = cTeamWorksheetTab Then ExecuteExcel4Macro ("SBC_Macros.xlm!Set_Trace_Mode(" & pressed & ")")
        
        Case "DebugStep":
          '  gStepMode = pressed
             If ActiveSheet.Name = cTeamWorksheetTab Then ExecuteExcel4Macro ("SBC_Macros.xlm!Set_Step_Mode(" & pressed & ")")
       
       Case "FormatFormulaBar":
            Application.DisplayFormulaBar = pressed
          
        Case "FormatProtect":
        ' gGeneralPrefsLockedPressed = pressed
        If ActiveSheet.Name = cTeamWorksheetTab Then ExecuteExcel4Macro "SBC_Macros.xlm!Toggle_Lock_State_Command()"

        Case "FormatGridlines":
            ActiveWindow.DisplayGridlines = pressed
            ActiveWindow.DisplayHeadings = pressed
            
        Case "GeneralPrefsExpandedCommands": ' set the glocal and local vars
          '  gGeneralPrefsExpandedCommandsPressed = pressed
        If ActiveSheet.Name = cTeamWorksheetTab Then ExecuteExcel4Macro ("SBC_Macros.xlm!Set_Expanded_Menus_State(" & pressed & ")")
         
        Case "GeneralPrefsDisplayInfoMessages":
          '  gGeneralPrefsDisplayInfoMessagesPressed = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("DISPLAY_INFO_MESSAGES", pressed, "Display", "Informational Messages")

        Case "PrintIncludeCompletedGamesBoxScores":
          '  gPrintIncludeCompletedGamesBoxScoresPressed = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("PRINT_INCLUDE_COMPLETED_GAMES_BOX_SCORES", pressed, "", "")
 
        Case "PrintIncludeHeaderRows":
         '   gPrintIncludeHeaderRowsPressed = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("PRINT_INCLUDE_HEADER_ROWS", pressed, "", "")

        Case "PrintIncludeUserNotes":
          '  gPrintIncludeUserNotesPressed = pressed
          '  If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("USER_NOTES_AREA_PRINT", pressed, "", "")
            
        Case "RostersSortOthersAreaByGame":
        ' no need to test for state change as we are here because selection button was toggled, thus state change
          '  gRostersSortOthersAreaByGamePressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("SORT_OTHERS_AREA_BY_GAME", pressed, "", "")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Update_Others_Area_Display(" & pressed & ")")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Process_End_Key()") ' navigate to others area
            End If
            
         Case "ScheduleDisplayGameNumbers":
          '  gScheduleDisplayGameNumbersPressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("SCHEDULE_DISPLAY_GAME_NUMBERS", pressed, "", "")
                ' control refresh not needed here as macro goes through Exit
                ExecuteExcel4Macro ("SBC_Macros.xlm! Refresh_And_Display_Game_Schedule()")
            End If
        Case "ScheduleMarkUplayedGames":
           ' gScheduleMarkUplayedGamesPressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("MARK_UNPLAYED_GAMES_AS_TBP", pressed, "", "")
            ' control refresh not needed here as macro goes through Exit
                ExecuteExcel4Macro ("SBC_Macros.xlm! Refresh_And_Display_Game_Schedule()")
            End If
            
        Case "ScheduleHighlightFirstUnplayedGame":
          '  gScheduleHighlightFirstUnplayedGamePressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("SCHEDULE_HIGHLIGHT_FIRST_UNPLAYED_GAME", pressed, "", "")
                 ' control refresh not needed here as macro goes through Exit
                ExecuteExcel4Macro ("SBC_Macros.xlm! Refresh_And_Display_Game_Schedule()")
              End If
         Case "SchedulePageWebPrint":
          '  gSchedulePageWebPrintPressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then Call vba_SetWorksheetVariable("OSWS_SCHEDULE_PAGE_ENABLE", pressed, "", "")
            
        Case "StandingsAutoCalc":
          '  gStandingsAutoCalcPressed = pressed
             If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("AUTO_CALC_STANDINGS", pressed, "", "")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Process_Auto_Calc_Option()")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Scroll_To_Summary_Page(" & False & ")")
            End If

         Case "StandingsGBLDisplay":
          '  gStandingsGBLDisplayPressed = pressed
            If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("GBL_DISPLAY_ENABLE", pressed, "", "")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Update_GBL_Display(" & pressed & ")")
                ExecuteExcel4Macro ("SBC_Macros.xlm!Scroll_To_Summary_Page(" & False & ")")
            End If
        
        Case "StatsTrackSPStats":
            ' gStatsTrackSPStatsPressed = pressed
            ' XLM handles updating of globarl var and goes to exit
             If ActiveSheet.Name = cTeamWorksheetTab Then _
              ExecuteExcel4Macro ("SBC_Macros.xlm!SBCR_Process_Slow_Pitch_Mode(" & pressed & ")")
                 
        Case "StatsTrackFines":
            ' gStatsTrackFinesPressed = pressed
            ' XLM handles updating of globarl var and goes to exit
             If ActiveSheet.Name = cTeamWorksheetTab Then _
                ExecuteExcel4Macro ("SBC_Macros.xlm!SBCR_Process_Fines_Mode(" & pressed & ")")
            
         Case "StatsDisplaySeasonTotals":
          '  gStatsDisplaySeasonTotalsPressed = pressed
             If ActiveSheet.Name = cTeamWorksheetTab Then
                Call vba_SetWorksheetVariable("DISPLAY_SEASON_TOTALS", pressed, "", "")
                ActiveSheet.ProtectContents = False ' for Set_Worksheet_Mode
                ExecuteExcel4Macro ("SBC_Macros.xlm!Set_Worksheet_Mode(" & 2 & ")") ' easiest way to update the states
                ActiveSheet.ProtectContents = True
            End If
            
        Case "WebPrefsSaveAfterSelect":
          '  gWebPrefsSaveAfterSelect = pressed
          '  If ActiveSheet.Name = cTeamWorksheetTab Then
          Call vba_SetWorksheetVariable("WEB_SAVE_AFTER_SELECT", pressed, "Select", "Invoke Web Page Save After Select")

        Case "WebPrefsPromptForOptions":
          '  gWebPrefsPromptForOptions = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("WS_PROMPT_FOR_OPTIONS", pressed, "Select", "Prompt for Options on Web Page Save")
       
         Case "WebIncludeUserNotes":
           ' gWebIncludeUserNotesPressed = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
           Call vba_SetWorksheetVariable("OSWS_USER_NOTES_AREA_WEB", pressed, "", "")
   
        Case "WebIncludeCompletedGamesBoxScores":
          ' gWebIncludeCompletedGamesBoxScoresPressed = pressed
           ' If ActiveSheet.Name = cTeamWorksheetTab Then
            Call vba_SetWorksheetVariable("HTML_INCLUDE_COMPLETED_GAMES_BOX_SCORES", pressed, "", "")
       
       Case Else
            Debug.Print "[RunPressedMacro] checkbox " & theID & " undefined"
            If ActiveSheet.Name = "SBCR" Then MsgBox "[RunPressedMacro]" & theID & ": command macro not specified"
            Exit Sub
    End Select
  '   Call RefreshRibbon
    Call RefreshControl(theID, "RunPressedMacro")
    
    End Sub

' -------------------------------------------------------------------------
' Command Dispatcher
' -------------------------------------------------------------------------
Sub SBCRunMacro(control As IRibbonControl)

Select Case control.ID

    Case "BoxScoresCalculate": Application.Run "SBC_Macros.xlm!Calculate_Box_Score_Command"
    Case "BoxScoresDisplay": Application.Run "SBC_Macros.xlm!Display_Box_Score"
    Case "BoxScoresDisplayCopy": Application.Run "SBC_Macros.xlm!Select_Box_Score_Table"
    Case "BoxScoresDisplayNext": Application.Run "SBC_Macros.xlm!Display_Next_Box_Score"
    Case "ConfigNewSeason": Application.Run "SBC_Macros.xlm!Configure_New_Season"
    Case "ConfigNewTeam": Application.Run "SBC_Macros.xlm!Configure_New_Team"
    Case "ConfigWorksheetFormat": Application.Run "SBC_Macros.xlm!Convert_Worksheet_Format"
    Case "DebugDisplayVariables": Application.Run "SBC_Macros.xlm!Show_Variable"
    Case "DebugEditGlobals": Application.Run "SBC_Macros.xlm!Edit_Variables"
    Case "DebugF13": Application.Run "SBC_Macros.xlm!aaF13_Key_Handler"
    Case "DebugMacroRuntime": Application.Run "SBC_Macros.xlm!Show_Runtime"
    Case "DebugStep": Application.Run "SBC_Macros.xlm!Toggle_Step_Mode"
    Case "DebugTrace": Application.Run "SBC_Macros.xlm!Toggle_Trace_Mode"
    Case "DebugPrefsNavBar": Application.Run "SBC_Macros.xlm!Config_Extended_Nav_Bar_Prefs_Command"
    Case "DebugPrefsExtended": Application.Run "SBC_Macros.xlm!Config_Extended_Prefs_Command"
    Case "DebugPrefsContent": Application.Run "SBC_Macros.xlm!Config_Extended_Content_Prefs_Command"
    
    Case "DisplayInfo": Application.Run "SBC_Macros.xlm!Info_Tool_Command_Handler"
    Case "DisplayPendingNotices": Application.Run "SBC_Macros.xlm!Display_Pending_Notifications"
    Case "DisplayTeamBatting": Application.Run "SBC_Macros.xlm!Display_Summary_Stats"
    Case "DisplayTeamBattingCopy": Application.Run "SBC_Macros.xlm!Select_Batting_Summary_Table"
    Case "DisplayTeamSummary": Application.Run "SBC_Macros.xlm!Display_Summary_Statistics_Cmd"
    Case "DisplayTeamSummaryCopy": Application.Run "SBC_Macros.xlm!Select_Summary_Statistics"
    Case "DisplayUserNotes": Application.Run "SBC_Macros.xlm!Display_User_Notes_Area"
    Case "DisplayUserNotesCopy": Application.Run "SBC_Macros.xlm!Select_User_Notes_Area"
    Case "DisplayUserNotesFormat": Application.Run "SBC_Macros.xlm!Cleanup_User_Notes_Command"
    Case "ExportActiveWebTheme": Application.Run "SBC_Macros.xlm!WT_Export_Active_Theme_Cmd"
    Case "ExportRoster": Application.Run "SBC_Macros.xlm!ECF_Export_Roster"
    Case "ExportSchedule": Application.Run "SBC_Macros.xlm!SX_Export_Schedule"
    Case "ExportSummary": Application.Run "SBC_Macros.xlm!SX_Display_Export_Schedule_Summary_Command"
    Case "FormatCellsMenuAlignment": Application.Run "SBC_Macros.xlm!Select_Format_Alignment"
    Case "FormatCellsMenuBorders": Application.Run "SBC_Macros.xlm!Select_Format_Borders"
    Case "FormatCellsMenuColumnWidth": Application.Run "SBC_Macros.xlm!Select_Format_Column_Width"
    Case "FormatCellsMenuFont": Application.Run "SBC_Macros.xlm!Select_Format_Cells"
    Case "FormatCellsMenuNumber": Application.Run "SBC_Macros.xlm!Select_Format_Number"
    Case "FormatCellsMenuPatterns": Application.Run "SBC_Macros.xlm!Select_Format_Patterns"
    Case "FormatCellsMenuRestoreWidths": Application.Run "SBC_Macros.xlm!Restore_Column_Widths_Command"
    Case "FormatCellsMenuRowHeight": Application.Run "SBC_Macros.xlm!Select_Format_Row_Height"
    Case "FormatCellsMenuStyle": Application.Run "SBC_Macros.xlm!Select_Format_Style"
    
    Case "FormatGraphicsMenuWebGraphicsInfo": Application.Run "SBC_Macros.xlm!Web_Graphics_Info_Command"
    Case "FormatGraphicsMenuPasteGraphics": Application.Run "SBC_Macros.xlm!Paste_Web_Graphics_Command"
    Case "FormatGraphicsMenuViewColors": Application.Run "SBC_Macros.xlm!View_Colors"
    Case "FormatGraphicsMenuColorPalleteEditor": Application.Run "SBC_Macros.xlm!Color_Palette_Editor"

    Case "FormatProtect": Application.Run "SBC_Macros.xlm!Toggle_Lock_State_Command"
    Case "FormatSelectAll": Application.Run "SBC_Macros.xlm!Select_All_Pages"
    Case "GeneralPrefsDisplayInfoMessages": Application.Run "SBC_Macros.xlm!Toggle_Display_Informational_Messages"
    Case "GeneralPrefsExpandedCommands": Application.Run "SBC_Macros.xlm!Toggle_Expanded_Menus"
    Case "GeneralPrefsGameRange": Application.Run "SBC_Macros.xlm!Config_Game_Range_Display"
  '  Case "GeneralPrefsGeneralPreferences": Application.Run "SBC_Macros.xlm!Config_General_Preferences"
    Case "GeneralPrefsLauncher": Application.Run "SBC_Macros.xlm!Config_General_Preferences"
    Case "GeneralPrefsMastheadBanners": Application.Run "SBC_Macros.xlm!Update_Masthead_Banners_Cmd"
    Case "ImportActiveWebTheme": Application.Run "SBC_Macros.xlm!WT_Import_Active_Theme_Table_Cmd"
    Case "ImportRoster": Application.Run "SBC_Macros.xlm!Import_SBC_Roster"
    Case "ImportSchedule": Application.Run "SBC_Macros.xlm!Import_Schedule"
    Case "ImportStats": Application.Run "SBC_Macros.xlm!File_Import_Stats_Command_Handler"
    Case "ImportSummary": Application.Run "SBC_Macros.xlm!Display_Last_Import_Summary"
    Case "Leaders": Application.Run "SBC_Macros.xlm!Display_Batting_Leaders"
    Case "LeadersCopy": Application.Run "SBC_Macros.xlm!Select_Batting_Leaders_Area"
    Case "LeadersPrefs": Application.Run "SBC_Macros.xlm!Config_Leaders_Preferences"
    Case "LeadersUpdate": Application.Run "SBC_Macros.xlm!Leader_Update_Command"
    Case "Print": Application.Run "SBC_Macros.xlm!Custom_Print_All"
    
    Case "PrinterSetup": Application.Run "SBC_Macros.xlm!Printer_Setup"
    Case "PrintPageSetup": Application.Run "SBC_Macros.xlm!Page_Setup"
    Case "PrintPageSetupDefault": Application.Run "SBC_Macros.xlm!Default_Page_Setup"
    Case "PrintSelection": Application.Run "SBC_Macros.xlm!Custom_Print_Selection_Command"
    
    Case "QATPrint": Application.Run "SBC_Macros.xlm!Custom_Print_All"
    Case "QATSave": Application.Run "SBC_Macros.xlm!Custom_Save"
    Case "QATSaveAs": Application.Run "SBC_Macros.xlm!Custom_Save_As"
  
    Case "Quit": Application.Run "SBC_Macros.xlm!Custom_Quit"
    Case "Repeat": Application.Run "SBC_Macros.xlm!Repeat_Command"
    Case "RefreshRibbon": Call RefreshRibbon
    Case "RostersAddPlayer": Application.Run "SBC_Macros.xlm!Add_Player_Name"
    Case "RostersAnalyze": Application.Run "SBC_Macros.xlm!Check_Roster_Command"
    Case "RostersConsolidate": Application.Run "SBC_Macros.xlm!Consolidate_Expansion_Roster_Command"
    Case "RostersDeleteAllPlayers": Application.Run "SBC_Macros.xlm!Clear_All_Player_Names_And_Stats_Command"
    Case "RostersDeletePlayer": Application.Run "SBC_Macros.xlm!Delete_Player_Name"
    Case "RostersMerge": Application.Run "SBC_Macros.xlm!Merge_Player_Stats"
    Case "RostersRename": Application.Run "SBC_Macros.xlm!Change_Player_Name"
    Case "RostersTransfer": Application.Run "SBC_Macros.xlm!Transfer_Player_Stats"
    Case "Save": Application.Run "SBC_Macros.xlm!Custom_Save"
    Case "SaveAllPlayerStatsAsWebPages": Application.Run "SBC_Macros.xlm!Call_Save_All_Player_Stats_As_Web_Pages"
    Case "SaveAs": Application.Run "SBC_Macros.xlm!Custom_Save_As"
    Case "SaveCSSStyles": Application.Run "SBC_Macros.xlm!Save_CSS_File"
    Case "SaveSelectionAsHTMLTable": Application.Run "SBC_Macros.xlm!Custom_Save_As_HTML_Table_Cmd"
    Case "SaveSelectionAsWebPage": Application.Run "SBC_Macros.xlm!Custom_Save_As_Web_Page_Cmd"
    Case "SBCHelpDonate": Application.Run "SBC_Macros.xlm!SBC_Donation_Command"
    Case "SBCHelpRevision": Application.Run "SBC_Macros.xlm!Open_SBC_Revision_History"
    Case "SBCHelpShortcuts": Application.Run "SBC_Macros.xlm!Display_Keyboard_Shortcuts"
    Case "SBCHelpSupport": Application.Run "SBC_Macros.xlm!Contact_SBC_Support"
    Case "SBCHelpUM": Application.Run "SBC_Macros.xlm!Open_SBC_User_Manual"
    Case "Schedule": Application.Run "SBC_Macros.xlm!Display_Game_Schedule"
    Case "ScheduleEdit": Application.Run "SBC_Macros.xlm!Edit_Schedule_Manager"
    Case "ScheduleAnalyze": Application.Run "SBC_Macros.xlm!Analyze_Schedule_Command"
    Case "ScheduleCopy": Application.Run "SBC_Macros.xlm!Select_Schedule_Area"
    Case "ScheduleGameNumbers": Application.Run "SBC_Macros.xlm!Edit_Game_Numbers"
    Case "ScheduleRefreshDisplay": Application.Run "SBC_Macros.xlm!Refresh_And_Display_Game_Schedule"
    Case "StandingsCalculate": Application.Run "SBC_Macros.xlm!Update_Division_Standings"
    Case "StandingsCopy": Application.Run "SBC_Macros.xlm!Select_Division_Standings_Table"
    Case "StandingsDisplay": Application.Run "SBC_Macros.xlm!Display_Summary_Statistics_Cmd"
    Case "StandingsEditTeams": Application.Run "SBC_Macros.xlm!Edit_Team_Name"
    Case "StatsChangeSeason": Application.Run "SBC_Macros.xlm!Change_Stats_Year"
    Case "StatsDeleteByGame": Application.Run "SBC_Macros.xlm!Clear_Player_Stats_By_Year"
    Case "StatsDeleteByGameRange": Application.Run "SBC_Macros.xlm!Clear_All_Player_Stats_Command"
    Case "StatsDeleteBySeason": Application.Run "SBC_Macros.xlm!Clear_Player_Stats_By_Year"
    Case "StatsDeleteBySeasonRange": Application.Run "SBC_Macros.xlm!Clear_All_Player_Stats_By_Year"
    Case "StatsDeletePlayer": Application.Run "SBC_Macros.xlm!Clear_Player_Stats"
    Case "StatsDisplayNextPlayer": Application.Run "SBC_Macros.xlm!Process_Page_Down_Key"
    Case "StatsDisplayPlayer": Application.Run "SBC_Macros.xlm!Display_Player_Stats"
    Case "StatsDisplayPrevPlayer": Application.Run "SBC_Macros.xlm!Process_Page_Up_Key"
    
    Case "StatsDisplayExpPlayers": Application.Run "SBC_Macros.xlm!Process_End_Key"
  Case "StatsSelectNextPlayer": Application.Run "SBC_Macros.xlm!Select_Next_Player_Page"
  Case "StatsSelectPrevPlayer": Application.Run "SBC_Macros.xlm!Select_Prev_Player_Page"
    
    Case "StatsEdit": Application.Run "SBC_Macros.xlm!Update_Player_Stats"
    Case "StatsValidate": Application.Run "SBC_Macros.xlm!Validate_Player_Stats"
    Case "WebOSWS": Application.Run "SBC_Macros.xlm!One_Step_Web_Site_Command"
    Case "WebOSWSEditHyperlink": Application.Run "SBC_Macros.xlm!Edit_Custom_Hyperlink"
    Case "WebOSWSNavLinks": Application.Run "SBC_Macros.xlm!Display_Computed_URL_Paths"
    Case "WebOSWSSummary": Application.Run "SBC_Macros.xlm!Display_OSWS_Summary_Command"
    Case "WebPrefsContent": Application.Run "SBC_Macros.xlm!Config_WPC_Content_Preferences_Command"
    Case "WebPrefsGeneral": Application.Run "SBC_Macros.xlm!Config_WPC_General_Preferences_Command"
    Case "WebPrefsIncludes": Application.Run "SBC_Macros.xlm!Config_WPC_Include_Files"
    Case "WebPrefsMasthead": Application.Run "SBC_Macros.xlm!Config_WPC_Masthead_Preferences_Command"
    Case "WebPrefsNavBar": Application.Run "SBC_Macros.xlm!Config_WPC_Nav_Bar_Preferences_Command"
    Case "WebPrefsOSWS": Application.Run "SBC_Macros.xlm!Config_OSWS_Preferences_Command"
    Case "WebPrefsPromptForOptions": Application.Run "SBC_Macros.xlm!Prompt_For_Options_On_Web_Page_Save_Command"
    Case "WebPrefsSaveAfterSelect": Application.Run "SBC_Macros.xlm!Invoke_Web_Page_Save_After_Select_Command"
    Case "WebPrefsTheme": Application.Run "SBC_Macros.xlm!Config_WPC_Web_Theme_Preferences"
    
    Case Else:
        Debug.Print "[RunMacro]" & control.ID & ": command macro not specified"
        If ActiveSheet.Name = "SBCR" Then MsgBox "[RunMacro]" & control.ID & ": command macro not specified"
End Select

End Sub

' sample macro run when control pressed. displays the ID of the control
Public Sub DummyMacro(theControlID As String)

MsgBox "[DummyMacro] Control: " & theControlID & " pressed"

End Sub

Attribute VB_Name = "AISBCRibbonGlobals"
Option Explicit
Public gSBCRibbonUI As IRibbonUI

#If VBA7 Then ' routines to save/restore ribbon handle
    Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#Else
    Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef destination As Any, ByRef source As Any, ByVal length As Long)
#End If
Public gLastButtonID As String ' for command chaining
Public gSBCRibbonVersion As Integer
Public gMyID As String ' string to match ID element
Public gMyEnableState As String ' global Enable/Disable state _
    "EA": Enable all _
    "DA": Disable all _
    "E"/"D": for specific item ID based on MyID _
    "DL": Disable if in list, others Enabled _
    "EL": Enable if in list, others Disabled
    
Public gMyVisibleState As String ' global Visible/Hidden state _
    "VA": all Visible _
    "HA": all Hidden _
    "E"/"D" for specific item on MyID _
    "HL"  Hidden if in list, others Visible _
    "VL"  Visible if in list, others Hidden
   
' globals
Public Const cTeamWorksheetTab As String = "Stats"
Public Const cDefaultButtonState As Boolean = True
Public Const cDefaultWorkbookID As Integer = 1 ' single season

' globals no longer used. replaced by direct state extraction from XLM space.
' were in for local SBCR sheet testing only
'Public gGeneralPrefsExpandedCommandsPressed As Boolean
'Public gGeneralPrefsDisplayInfoMessagesPressed As Boolean
'Public gGeneralPrefsLockedPressed As Boolean
'Public gWebPrefsSaveAfterSelect As Boolean
'Public gStepMode As Boolean
'Public gTraceMode As Boolean
' Public gWebPrefsPromptForOptions As Boolean
' Public gDebug As Boolean
'Public gRepeatCommandString As String
' Public gWarningMessagesString As String
'Public gBoxScoreSortOrderPressed As Boolean
'Public gPrintIncludeCompletedGamesBoxScoresPressed As Boolean
'Public gPrintIncludeHeaderRowsPressed As Boolean
'Public gScheduleDisplayGameNumbersPressed As Boolean
'Public gStandingsAutoCalcPressed As Boolean
'Public gStandingsGBLDisplayPressed As Boolean
'Public gRostersSortOthersAreaByGamePressed As Boolean
'Public gStatsTrackFinesPressed As Boolean
'Public gStatsTrackSPStatsPressed As Boolean
'Public gWebIncludeCompletedGamesBoxScoresPressed As Boolean
'Public gSchedulePageWebPrintPressed As Boolean
'Public gScheduleMarkUplayedGamesPressed As Boolean
'Public gScheduleHighlightFirstUnplayedGamePressed As Boolean
'Public gPrintIncludeUserNotesPressed As Boolean
'Public gWebIncludeUserNotesPressed As Boolean
'Public gStatsDisplaySeasonTotalsPressed As Boolean

' state collections
Public RibbonDisabledButtonsList As Collection ' dynamic list of disabled buttons. used by SBCGetEnabled callback
Public RibbonHiddenButtonsList As Collection ' dynamic list of hidden buttonsby SBCGetEnable callback

' counters to track handle processing - vba initializes them to 0 or empty
Public gDebugLostHandleCtr As Integer
Public gDebugHandleReloadsCtr As Integer
Public gDebugHandleReloadFailsCtr As Integer
Public gDebugLostHandleLabel As String
Public gDebugHandleReloadsLabel As String
Public gDebugHandleReloadFailsLabel As String


Attribute VB_Name = "AISBCRibbonListManager"
'
' collection list handlers for the SBC ribbon - 120119.1628
'
Option Explicit ' force strict var casting
Option Compare Text ' forces case-insenitive compares

' callable service routines from macros
' same as routines used for testing without msgbox alerts
' create enable/disable list
Public Sub sbcr_InitEnableDisableList(theState As String)
'Dim RibbonOK As Boolean

'RibbonOK = sbcr_VerifyRibbonHandle()

'If RibbonOK Then
    Set RibbonDisabledButtonsList = New Collection
    gMyEnableState = theState
'Else
 '   MsgBox "sbcr_InitEnableDisableList: Fetal Error - cant restore ribbon handle"
'End If

End Sub
' create visible/hidden list
Public Sub sbcr_InitVisibleHiddenList(theState As String)
'Dim RibbonOK As Boolean

'RibbonOK = sbcr_VerifyRibbonHandle()

'If RibbonOK Then
    Set RibbonHiddenButtonsList = New Collection
    gMyVisibleState = theState
'Else
 '   MsgBox "sbcr_InitVisibleHiddenList: Fetal Error - cant restore ribbon handle"
'End If
End Sub
Public Function sbcr_AddEnableDisableItem(theItem As String)
' returns TRUE: item added FALSE: item already in list

If sbcr_DisabledButtonIDInList(theItem) = True Then
       sbcr_AddEnableDisableItem = False
    Else
    RibbonDisabledButtonsList.Add theItem, theItem
       sbcr_AddEnableDisableItem = True
    End If
End Function
Public Function sbcr_AddVisibleHiddenItem(theItem As String)
' returns TRUE: item added FALSE: item already in list

If sbcr_HiddenButtonIDInList(theItem) = True Then
       sbcr_AddVisibleHiddenItem = False
    Else
    RibbonHiddenButtonsList.Add theItem, theItem
       sbcr_AddVisibleHiddenItem = True
    End If
End Function
Public Sub sbcr_RefreshRibbon()
Call RefreshRibbon
End Sub

' local routines
' create disabled buttons list
Sub sbcr_CreateDisabledButtonStatesList()
    Set RibbonDisabledButtonsList = New Collection
    MsgBox "RibbonDisabledButtonsList initialized" & vbCrLf & "Count set to: " & RibbonDisabledButtonsList.Count
End Sub

' create hidden buttons list
Sub sbcr_CreateHiddenButtonStatesList()
    Set RibbonHiddenButtonsList = New Collection
     MsgBox "RibbonHiddenButtonsList initialized" & vbCrLf & "Count set to: " & RibbonHiddenButtonsList.Count
End Sub


' add a button/group ID item or pattern to  the disabled list. duplicate the name as a key so item can be looked up quicker for a match
Sub sbcr_AddDisabledButtonID(theButtonID As String)

    If sbcr_DisabledButtonIDInList(theButtonID) = True Then
        MsgBox "RibbonDisabledButtonsList: " & vbCr & theButtonID & vbCr & " already in list."
    Else
    RibbonDisabledButtonsList.Add theButtonID, theButtonID
        MsgBox "RibbonDisabledButtonsList: " & vbCr & theButtonID & vbCr & " added to list." & vbCrLf _
        & "Total items: " & RibbonDisabledButtonsList.Count
    End If
End Sub

' add a button/group ID item or pattern to to the hidden list. duplicate the name as a key so item can be looked up quicker for a match
Sub sbcr_AddHiddenButtonID(theButtonID As String)
     If sbcr_HiddenButtonIDInList(theButtonID) = True Then
        MsgBox "RibbonHiddenButtonsList: " & vbCr & theButtonID & vbCr & " already in list."
    Else
        RibbonHiddenButtonsList.Add theButtonID, theButtonID
        MsgBox "RibbonHiddenButtonsList: " & vbCr & theButtonID & vbCr & " added to list." & vbCrLf _
        & "Total items: " & RibbonHiddenButtonsList.Count
    End If
End Sub

' test for match of disabled  button/group ID item  list
Function sbcr_DisabledButtonIDInList(theButtonID As String) As Boolean
Dim CollectionsIndex As Long

sbcr_DisabledButtonIDInList = False ' assume no match

On Error GoTo sbcr_DisabledButtonIDInList100 ' in case Collection list wasnt initialized
For CollectionsIndex = 1 To RibbonDisabledButtonsList.Count
If theButtonID Like RibbonDisabledButtonsList.Item(CollectionsIndex) Then
    sbcr_DisabledButtonIDInList = True ' lookup by key. match found
    Exit For ' early out
End If
Next CollectionsIndex

sbcr_DisabledButtonIDInList100:
End Function

' test for match of hidden button/group ID item  list
Function sbcr_HiddenButtonIDInList(theButtonID As String) As Boolean
Dim CollectionsIndex As Long

sbcr_HiddenButtonIDInList = False ' assume no match

On Error GoTo sbcr_HiddenButtonIDInList100 ' in case Collection list wasnt initialized
For CollectionsIndex = 1 To RibbonHiddenButtonsList.Count
If theButtonID Like RibbonHiddenButtonsList.Item(CollectionsIndex) Then ' lookup by key
    sbcr_HiddenButtonIDInList = True ' key match found
    Exit For ' early out
End If
Next CollectionsIndex

sbcr_HiddenButtonIDInList100:
End Function

' test routines
Sub sbcr_TestAddDisabledButton()
Dim theButtonID As String

theButtonID = InputBox("Enter ButtonGroup ID or pattern:", "Add to Enabled/Disabled List" & vbCr _
& "Wildcard characters acceptable", gLastButtonID)
If Len(theButtonID) = 0 Then: Exit Sub
gLastButtonID = theButtonID

sbcr_AddDisabledButtonID theButtonID
End Sub
Sub sbcr_TestAddHiddenButton()
Dim theButtonID As String

theButtonID = InputBox("Button/Group ID or pattern:", "Add to Visible/Hidden List" & vbCr _
& "Wildcard characters acceptable", gLastButtonID)
If Len(theButtonID) = 0 Then: Exit Sub
gLastButtonID = theButtonID

sbcr_AddHiddenButtonID theButtonID
End Sub

Sub sbcr_TestDisabledButtonInList()
Dim theButtonID As String
Dim ButtonInList As String

theButtonID = InputBox("Enter Button/Group ID:", "Check Enabled/Disabled List", gLastButtonID)
If Len(theButtonID) = 0 Then: Exit Sub
gLastButtonID = theButtonID

If sbcr_DisabledButtonIDInList(theButtonID) = True Then
ButtonInList = " found"
Else
ButtonInList = " not found"
End If

MsgBox "Button/Group ID: " & theButtonID & vbCr & ButtonInList
End Sub

Sub sbcr_TestHiddenButtonInList()
Dim theButtonID As String
Dim ButtonInList As String

theButtonID = InputBox("Enter Button/Group ID:", "Check Visible/Hidden List", gLastButtonID)
If Len(theButtonID) = 0 Then: Exit Sub
gLastButtonID = theButtonID

If sbcr_HiddenButtonIDInList(theButtonID) = True Then
ButtonInList = " found"
Else
ButtonInList = " not found"
End If

MsgBox "Button/Group ID: " & theButtonID & vbCr & ButtonInList
End Sub

Sub sbcr_TestSetEnableState()
Dim theState As String

theState = InputBox("Enter Enable or Disable State (E, EA, EL, D, DA, DL):", "Set Global Enable/Disable State", gMyEnableState)
If Len(theState) = 0 Then Exit Sub
gMyEnableState = UCase(theState)
Call RefreshRibbon
End Sub

Sub sbcr_TestSetVisibleState()
Dim theState As String

theState = InputBox("Enter Visible or Hidden State (V, VA, VL, H, HA, HL):", "Set Global Visible/Hidden State", gMyVisibleState)
If Len(theState) = 0 Then Exit Sub
gMyVisibleState = UCase(theState)

Call RefreshRibbon
End Sub
Attribute VB_Name = "AISBCRibbonServiceRoutines"
Option Explicit
'SBC Ribbon macros 120419.0745
' hidden namespace service routines - vars attached to lifetime of application
Function vba_GetHName(Name As String)
    vba_GetHName = Application.ExecuteExcel4Macro(Name)
End Function

Sub vba_SetHName(Name As String, Value As Variant)
    Application.ExecuteExcel4Macro "SET.NAME(""Name"",""Value"")"
End Sub

Sub vba_DelHName(Name As String)
    Application.ExecuteExcel4Macro "SET.NAME(""" & Name & """)"
End Sub

' active workbook service rotines
' extract a worksheet global var
Function vba_GetWorksheetVariable(VarName As String, DefaultValue As Variant) ' XLM4 VarName without !
    If ActiveSheet.Name = cTeamWorksheetTab Then
        vba_GetWorksheetVariable = Evaluate(ActiveWorkbook.Names(VarName).RefersTo) ' returns the value
    Else
        vba_GetWorksheetVariable = DefaultValue
    End If
' vba_ExtractWorksheetVariable = ActiveWorkbook.Names(VarName).RefersTo ' returns the reference as A1
End Function
 ' set a worksheet global var variable. needs worksheet unprotected
Public Sub vba_SetWorksheetVariable(VarName As String, VarValue As Variant, MenuName As String, MenuItem As String) ' XLM4 VarName without !
Dim ActiveSheetProtectionState As Boolean

If ActiveSheet.Name <> cTeamWorksheetTab Then Exit Sub ' works only if active sheet is SBC worksheet

ActiveSheetProtectionState = ActiveSheet.ProtectContents
If ActiveSheetProtectionState = True Then ExecuteExcel4Macro ("SBC_Macros.xlm!Unprotect_Document()") ' temporary unprotect

ActiveWorkbook.Names(VarName).RefersToRange = VarValue ' update the worksheet variable value
' MsgBox MenuName & vbCr & MenuItem & vbCr & VarValue

' if XLM menu name and item have been specififed, update the check mark
If Len(MenuName) > 0 And Len(MenuItem) > 0 Then _
ExecuteExcel4Macro ("SBC_Macros.xlm!Update_Menu_Checked_Item(""" & MenuName & """,""" & MenuItem & """," & VarValue & ")") ' update the legacy menu item checkmark

If ActiveSheetProtectionState = True Then ExecuteExcel4Macro ("SBC_Macros.xlm!Protect_Document()") ' reprotect if needed
End Sub
Public Function sbcr_GetActiveAddinsCount(OKtoDisable As Boolean) ' get count of active addins
Dim CountIndex As Integer
Dim ActiveAddins As Integer

 ActiveAddins = 0
 For CountIndex = 1 To Application.AddIns.Count
    If Application.AddIns(CountIndex).Installed Then
        Debug.Print "Active Addin Found: " & Application.AddIns(CountIndex).Name
        If OKtoDisable Then Application.AddIns(CountIndex).Installed = False
        ActiveAddins = ActiveAddins + 1
    End If
 Next CountIndex
sbcr_GetActiveAddinsCount = ActiveAddins
End Function

' handle counter routines
Function vba_Get_Counter(CounterName As String)
Dim SBCMacrosWB As Workbook
Set SBCMacrosWB = Application.Workbooks("SBC_Macros.xlm")
MsgBox Evaluate(SBCMacrosWB.Names(CounterName).RefersTo)
End Function

Function vba_Update_Counter(CounterName As String)
Dim SBCMacrosWB As Workbook
Dim CounterValue As Integer
Set SBCMacrosWB = Application.Workbooks("SBC_Macros.xlm")
CounterValue = Evaluate(SBCMacrosWB.Names(CounterName).RefersTo)
CounterValue = CounterValue + 1
SBCMacrosWB.Names(CounterName).RefersTo = CounterValue
vba_Update_Counter = CounterValue ' returns the updated value
End Function

Public Function sbcr_GetSBCRibbonVersion()
sbcr_GetSBCRibbonVersion = ""
On Error Resume Next
sbcr_GetSBCRibbonVersion = gSBCRibbonVersion
End Function

Public Sub vba_ShowRibbonTab()
    SendKeys "%SBC%", True
End Sub

Attribute VB_Name = "AISBCRibbonSetup"
Option Explicit

' routine called by onLoad in ribbon XML.
 Sub CreateSBCRibbonObject(ribbon As IRibbonUI)
    Dim ActiveAddinsCount As Long
    ' Static variables for all routines
    Static gLastButtonID As String ' for command chaining
    Static gSBCRibbonVersion As Integer
    Static gMyID As String ' string to match ID element
    Static gMyEnableState As String ' global Enable/Disable state _
        "EA": Enable all _
        "DA": Disable all _
        "E"/"D": for specific item ID based on MyID _
        "DL": Disable if in list, others Enabled _
        "EL": Enable if in list, others Disabled
    
    Static gMyVisibleState As String ' global Visible/Hidden state _
        "VA": all Visible _
        "HA": all Hidden _
        "E"/"D" for specific item on MyID _
        "HL"  Hidden if in list, others Visible _
        "VL"  Visible if in list, others Hidden
' state collections
    Static RibbonDisabledButtonsList As Collection ' dynamic list of disabled buttons. used by SBCGetEnabled callback
    Static RibbonHiddenButtonsList As Collection ' dynamic list of hidden buttonsby SBCGetEnable callback

' counters to track handle processing - vba initializes them to 0 or empty
    Static gDebugLostHandleCtr As Integer
    Static gDebugHandleReloadsCtr As Integer
    Static gDebugHandleReloadFailsCtr As Integer
    Static gDebugLostHandleLabel As String
    Static gDebugHandleReloadsLabel As String
    Static gDebugHandleReloadFailsLabel As String
 '   Static gSBCRibbonUI As IRibbonUI

    Set gSBCRibbonUI = ribbon

    gSBCRibbonVersion = 1 ' version

    If ActiveSheet.Name = "SBCR" Then
        ActiveSheet.Range("M3").Value = gSBCRibbonVersion
        ActiveSheet.Range("M2").Value = ObjPtr(ribbon) ' store the handle
        Debug.Print "CreateSBCRibbonObject: save handle: " & ObjPtr(ribbon) & " to cell M3"

    End If
    
    If ActiveSheet.Name = cTeamWorksheetTab Then ' only save value on SBC worksheets
        ActiveSheet.Range("SBC_RIBBON_HANDLE").Value = ObjPtr(ribbon) ' store the handle
        Debug.Print "CreateSBCRibbonObject: save handle: " & ObjPtr(ribbon) & " to !SBC_RIBBON_HANDLE"

     End If
  
    'set globals
    gMyID = ""
    Call sbcr_InitEnableDisableList("EA")
    Call sbcr_InitVisibleHiddenList("VA")
    gDebugLostHandleLabel = "Lost: -"
    gDebugHandleReloadsLabel = "Restored: -"
    gDebugHandleReloadFailsLabel = "Restore Fails: -"
    
    If ActiveSheet.Name = "SBCR" Then
        ActiveAddinsCount = sbcr_GetActiveAddinsCount(False) ' dont disable if found
        If ActiveAddinsCount > 0 Then MsgBox "addins count: " & ActiveAddinsCount
    End If
    
     Application.OnTime Now + TimeValue("00:00:01"), "ActivateSBCTab" ' this allows SBC to gain focus
    
End Sub

Sub ActivateSBCTab()
gSBCRibbonUI.ActivateTab ("TabSBC")
End Sub


' retrieve the ribbon handle
#If VBA7 Then
Function GetRibbon(ByVal lRibbonPointer As LongPtr) As Object
#Else
Function GetRibbon(ByVal lRibbonPointer As Long) As Object
#End If
        Dim objRibbon As Object
        CopyMemory objRibbon, lRibbonPointer, LenB(lRibbonPointer)
        Set GetRibbon = objRibbon
        Set objRibbon = Nothing
End Function

' check the handle and restore as needed. This insures routines can set globals with them being destroyed
Function sbcr_VerifyRibbonHandle()
 Dim sbcr_VerifyRibbonHandleStatus As Boolean
 
 sbcr_VerifyRibbonHandleStatus = True ' assume ok

    If gSBCRibbonUI Is Nothing Then
        Debug.Print "VerifyRibbonHandle: handle lost on test"
       
        If ActiveSheet.Name = "SBCR" Then
            MsgBox "VerifyRibbonHandle: handle lost on test"
            gDebugLostHandleCtr = gDebugLostHandleCtr + 1
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("M2").Value)
            
        ElseIf ActiveSheet.Name = cTeamWorksheetTab Then
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("SBC_RIBBON_HANDLE").Value)
            gDebugLostHandleCtr = vba_Update_Counter("DebugLostHandleCtr")
        End If
        
        If gSBCRibbonUI Is Nothing Then
            sbcr_VerifyRibbonHandleStatus = False
            Debug.Print "VerifyRibbonHandle: handle restore failed"
            
            If ActiveSheet.Name = "SBCR" Then
                MsgBox "VerifyRibbonHandle: handle restore failed"
                gDebugHandleReloadFailsCtr = gDebugHandleReloadFailsCtr + 1
            End If
            If ActiveSheet.Name = cTeamWorksheetTab Then gDebugHandleReloadFailsCtr = vba_Update_Counter("DebugHandleReloadFailsCtr")
        Else
            Debug.Print "VerifyRibbonHandle: handle restore ok"
            If ActiveSheet.Name = "SBCR" Then
                MsgBox "VerifyRibbonHandle: handle restore ok"
                gDebugHandleReloadsCtr = gDebugHandleReloadsCtr + 1
            End If
            If ActiveSheet.Name = cTeamWorksheetTab Then gDebugHandleReloadsCtr = vba_Update_Counter("DebugHandleReloadsCtr")
        End If
    End If
 sbcr_VerifyRibbonHandle = sbcr_VerifyRibbonHandleStatus
End Function
' force a full ribbon refresh
Sub RefreshRibbon()
    
   If gSBCRibbonUI Is Nothing Then
        If ActiveSheet.Name = "SBCR" Then
            MsgBox "RefreshRibbon: handle lost on refresh entry"
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("M2").Value)
            gDebugLostHandleCtr = gDebugLostHandleCtr + 1
        ElseIf ActiveSheet.Name = cTeamWorksheetTab Then
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("SBC_RIBBON_HANDLE").Value)
            gDebugLostHandleCtr = vba_Update_Counter("DebugLostHandleCtr")
        End If
        Debug.Print gDebugLostHandleCtr & ":RefreshRibbon: handle lost on refresh entry"
        
        If gSBCRibbonUI Is Nothing Then ' handle restore failed
            If ActiveSheet.Name = "SBCR" Then
                MsgBox "RefreshRibbon: handle restore failed"
                gDebugHandleReloadFailsCtr = gDebugHandleReloadFailsCtr + 1
            ElseIf ActiveSheet.Name = cTeamWorksheetTab Then
                gDebugHandleReloadFailsCtr = vba_Update_Counter("DebugHandleReloadFailsCtr")
            End If
            Debug.Print gDebugHandleReloadFailsCtr & ":RefreshRibbon: handle restore failed"
       
        Else ' handle restore ok
            If ActiveSheet.Name = "SBCR" Then
                MsgBox "RefreshRibbon: handle restore ok"
                gDebugHandleReloadsCtr = gDebugHandleReloadsCtr + 1
            ElseIf ActiveSheet.Name = cTeamWorksheetTab Then ' collections likely lost - need to rebuild
                gDebugHandleReloadsCtr = vba_Update_Counter("DebugHandleReloadsCtr")
                ExecuteExcel4Macro ("SBC_Macros.xlm!SBCRR_Process_Disabled_Items()")
                ExecuteExcel4Macro ("SBC_Macros.xlm!SBCRR_Process_Hidden_Items()")
            End If
            Debug.Print gDebugHandleReloadsCtr & ":RefreshRibbon: handle restore ok"
            gSBCRibbonUI.Invalidate  ' ok to invalidate
        End If
    Else
       gSBCRibbonUI.Invalidate  ' ok to invalidate
    End If
    
    ' rebuild all labels. vba can nuke them on lost handles
    gDebugLostHandleLabel = "Lost: " & gDebugLostHandleCtr
    gDebugHandleReloadFailsLabel = "Restore Fails: " & gDebugHandleReloadFailsCtr
    gDebugHandleReloadsLabel = "Restored: " & gDebugHandleReloadsCtr

    'SendKeys ("%SBC%")
End Sub
' force individual control refresh (enable or disable) based on ID
Sub RefreshControl(ID As String, Caller As String)
     
     If gSBCRibbonUI Is Nothing Then

        If ActiveSheet.Name = "SBCR" Then
            MsgBox Caller & ":RefreshControl: ID=" & ID & " Handle lost on entry"
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("M2").Value) ' restore the handle
            gDebugLostHandleCtr = gDebugLostHandleCtr + 1
        ElseIf ActiveSheet.Name = cTeamWorksheetTab Then
            Set gSBCRibbonUI = GetRibbon(ActiveSheet.Range("SBC_RIBBON_HANDLE").Value) ' restore the handle
            gDebugLostHandleCtr = vba_Update_Counter("DebugLostHandleCtr")
        End If
        Debug.Print gDebugLostHandleCtr & ":" & Caller & ":RefreshControl: ID=" & ID & " Handle lost on entry"

        If gSBCRibbonUI Is Nothing Then ' cant restore handle
            If ActiveSheet.Name = "SBCR" Then
                MsgBox Caller & ":RefreshControl: ID=" & ID & "handle restore failed"
                gDebugHandleReloadFailsCtr = gDebugHandleReloadFailsCtr + 1
            ElseIf ActiveSheet.Name = cTeamWorksheetTab Then
                gDebugHandleReloadFailsCtr = vba_Update_Counter("DebugHandleReloadFailsCtr")
            End If
            Debug.Print gDebugHandleReloadFailsCtr & ":" & Caller & ":RefreshControl: ID=" & ID & " Handle restore failed"
        
        Else    ' handle sucessfully restored
            
            If ActiveSheet.Name = "SBCR" Then
                MsgBox Caller & ":RefreshControl: ID=" & ID & "handle restore ok"
                gDebugHandleReloadsCtr = gDebugHandleReloadsCtr + 1
            ElseIf ActiveSheet.Name = cTeamWorksheetTab Then ' collections likely lost - need to rebuild
                ExecuteExcel4Macro ("SBC_Macros.xlm!SBCRR_Process_Disabled_Items()")
                ExecuteExcel4Macro ("SBC_Macros.xlm!SBCRR_Process_Hidden_Items()")
                gDebugHandleReloadsCtr = vba_Update_Counter("DebugHandleReloadsCtr")
            End If
            Debug.Print gDebugHandleReloadsCtr & ":" & Caller & ":RefreshControl: ID=" & ID & " Handle restore ok"
            gSBCRibbonUI.InvalidateControl (ID) ' ok to invalidate
        End If
    Else
       gSBCRibbonUI.InvalidateControl (ID) ' ok to invalidate
    End If
    
    ' rebuild all labels. vba can nuke them on lost handles
    gDebugLostHandleLabel = "Lost: " & gDebugLostHandleCtr
    gDebugHandleReloadFailsLabel = "Restore Fails: " & gDebugHandleReloadFailsCtr
    gDebugHandleReloadsLabel = "Restored: " & gDebugHandleReloadsCtr
    'SendKeys ("%SBC%")
End Sub

Attribute VB_Name = "AISCRibbonTestRoutines"
Option Explicit
'
' interactive test routines
'

' enable/disable individual button
Public Sub sbcr_RibbonButtonEnableState()
Dim MyID As Variant
Dim MyEnableState As Variant
Dim theID As String
MyID = InputBox("enter buttonID (case-sensitive):", "Enable/Disable Button Test", gLastButtonID)
If MyID = False Or Len(MyID) = 0 Then Exit Sub
gLastButtonID = MyID

MyEnableState = UCase(InputBox("enter state: E or D", "Enable/Disable Button Test"))
If MyEnableState = False Or Len(MyEnableState) = 0 Then Exit Sub

theID = CStr(MyID) ' recast variant to string
gMyEnableState = MyEnableState
Call RefreshControl(theID, "sbcr_RibbonButtonEnableState")
' SendKeys ("%SBC%")
End Sub

' enabble/disable group test
' NOTE: for some reason this only works for disable. sequencing multiple enables only gets the last one in the group enabled
' must be some kind of race condition with the button is enabled

Public Sub sbcr_RibbonGroupEnableState()
Dim MyEnableState As Variant
Dim MyID As Variant
Dim ButtonGroupBase As Collection
Dim ButtonIDStub As Variant
Dim ButtonID As String


MyID = LCase(InputBox("enter GroupID letter A-F :", "Group Enable Test"))
If MyID = False Or Len(MyID) = 0 Then Exit Sub

MyEnableState = UCase(InputBox("enter state: E or D", "Group Enable Test"))
If MyEnableState = False Or Len(MyEnableState) = 0 Then Exit Sub

gMyEnableState = MyEnableState

' load up the collection with stubs of the buttonID values
Set ButtonGroupBase = New Collection
ButtonGroupBase.Add "Button01"
ButtonGroupBase.Add "Button02"
ButtonGroupBase.Add "Button03"
ButtonGroupBase.Add "Button04"
ButtonGroupBase.Add "Button05"
ButtonGroupBase.Add "Button06"
ButtonGroupBase.Add "Button07"
ButtonGroupBase.Add "Button08"
ButtonGroupBase.Add "Button09"
ButtonGroupBase.Add "Button10"

For Each ButtonIDStub In ButtonGroupBase
ButtonID = MyID & ButtonIDStub
Call RefreshControl(ButtonID, "sbcr_RibbonGroupEnableState")
Next

Set ButtonGroupBase = New Collection ' dumps the set
' SendKeys ("%SBC%")
End Sub


Public Sub sbcr_RibbonGlobalEnableState() ' global enable/disable of all buttons
Dim MyEnableState As Variant
Dim RtnStatus As Boolean
MyEnableState = UCase(InputBox("enter state: EA or DA", "Global Enable/Disable Buttons Test"))
If MyEnableState = False Or Len(MyEnableState) = 0 Then Exit Sub
gMyEnableState = MyEnableState

gMyVisibleState = "VA" ' in case the visible test was run and buttons not visibile

Call RefreshRibbon
'    SendKeys ("%SBC%")
End Sub

Sub sbcr_SetSBCRibbonGlobalEnable(theState As String)
If LCase(theState) = "e" Then
    gMyEnableState = True
ElseIf LCase(theState) = "d" Then
    gMyEnableState = False
End If
End Sub

Sub sbcr_UpdateControlState(theControlID As String, theState As String)
If LCase(theState) = "e" Then
    gMyEnableState = True
ElseIf LCase(theState) = "d" Then
    gMyEnableState = False
Else: Exit Sub
End If
If Len(theControlID) > 0 Then: Call RefreshControl(theControlID, "sbcr_UpdateControlState")

End Sub

Sub sbcr_InvalidateRibbonHandle()
Set gSBCRibbonUI = Nothing
End Sub

' visible/hidden individual button
Public Sub sbcr_RibbonButtonVisibleState()
Dim MyVisibleState As Variant
Dim MyID As Variant

MyID = InputBox("enter buttonID (case-sensitive):", "Visible/Hidden Button Test", gLastButtonID)
If Len(MyID) = 0 Then Exit Sub
gLastButtonID = MyID

MyVisibleState = UCase(InputBox("enter state: V or H", "Visible/Hidden Button Test"))
If MyVisibleState = False Or Len(MyVisibleState) = 0 Then Exit Sub

gMyVisibleState = CStr(MyVisibleState) ' recast variant to string

Call RefreshControl(CStr(MyID), "sbcr_RibbonButtonVisibleState") ' recast variant to string
'    SendKeys ("%SBC%")
End Sub

' visible/hidden group test
Public Sub sbcr_RibbonGroupVisibleState()
Dim MyVisibleState As Variant
Dim MyID As Variant

MyID = UCase(InputBox("enter GroupID letter A-F :", "Group Visible/Hidden Test"))
If MyID = False Or Len(MyID) = 0 Then Exit Sub

MyVisibleState = UCase(InputBox("enter state: V or H", "Group Visible/Hidden Test"))
If MyVisibleState = False Or Len(MyVisibleState) = 0 Then Exit Sub

gMyVisibleState = MyVisibleState
gMyID = "Group" & MyID ' will recast variant to string
Call RefreshControl(gMyID, "sbcr_RibbonGroupVisibleState")

' SendKeys ("%SBC%")
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sub Workbook_Open()
'Exit Sub


'Sub Workbook_BeforeClose(Cancel As Boolean)
'Exit Sub
Attribute VB_Name = "XAISBCRibbonCallbacksTemplates"
Option Explicit
' -------------------------------------------------------------------------
' -------------------------------------------------------------------------
' -------------------------------------------------------------------------
' DEACTIVATED ROUTINES - 110619

Sub X_GetScreentip(control As IRibbonControl, ByRef Screentip)
'PURPOSE: Display a specific macro description when the mouse hovers over a button

Select Case control.ID
  
  Case "aButton01": Screentip = "Description"
  Case "aButton02": Screentip = "Description"
  Case "aButton03": Screentip = "Description"
  Case "aButton04": Screentip = "Description"
  Case "aButton05": Screentip = "Description"
  Case "aButton06": Screentip = "Description"
  Case "aButton07": Screentip = "Description"
  Case "aButton08": Screentip = "Description"
  Case "aButton09": Screentip = "Description"
  Case "aButton10": Screentip = "Description"
  
  Case "bButton01": Screentip = "Description"
  Case "bButton02": Screentip = "Description"
  Case "bButton03": Screentip = "Description"
  Case "bButton04": Screentip = "Description"
  Case "bButton05": Screentip = "Description"
  Case "bButton06": Screentip = "Description"
  Case "bButton07": Screentip = "Description"
  Case "bButton08": Screentip = "Description"
  Case "bButton09": Screentip = "Description"
  Case "bButton10": Screentip = "Description"
  
  Case "cButton01": Screentip = "Description"
  Case "cButton02": Screentip = "Description"
  Case "cButton03": Screentip = "Description"
  Case "cButton04": Screentip = "Description"
  Case "cButton05": Screentip = "Description"
  Case "cButton06": Screentip = "Description"
  Case "cButton07": Screentip = "Description"
  Case "cButton08": Screentip = "Description"
  Case "cButton09": Screentip = "Description"
  Case "cButton10": Screentip = "Description"
  
  Case "dButton01": Screentip = "Description"
  Case "dButton02": Screentip = "Description"
  Case "dButton03": Screentip = "Description"
  Case "dButton04": Screentip = "Description"
  Case "dButton05": Screentip = "Description"
  Case "dButton06": Screentip = "Description"
  Case "dButton07": Screentip = "Description"
  Case "dButton08": Screentip = "Description"
  Case "dButton09": Screentip = "Description"
  Case "dButton10": Screentip = "Description"

  Case "eButton01": Screentip = "Description"
  Case "eButton02": Screentip = "Description"
  Case "eButton03": Screentip = "Description"
  Case "eButton04": Screentip = "Description"
  Case "eButton05": Screentip = "Description"
  Case "eButton06": Screentip = "Description"
  Case "eButton07": Screentip = "Description"
  Case "eButton08": Screentip = "Description"
  Case "eButton09": Screentip = "Description"
  Case "eButton10": Screentip = "Description"
  
  Case "fButton01": Screentip = "Description"
  Case "fButton02": Screentip = "Description"
  Case "fButton03": Screentip = "Description"
  Case "fButton04": Screentip = "Description"
  Case "fButton05": Screentip = "Description"
  Case "fButton06": Screentip = "Description"
  Case "fButton07": Screentip = "Description"
  Case "fButton08": Screentip = "Description"
  Case "fButton09": Screentip = "Description"
  Case "fButton10": Screentip = "Description"
  Case Else: Screentip = "Undefined Screentip" ' default
End Select

End Sub

Sub X_RunMacro(control As IRibbonControl)

Dim theButtonID As String
theButtonID = control.ID
Select Case control.ID
  
  Case "aButton01": Application.Run "SBC_Macros.xlm!Custom_Quit"
  Case "aButton02": Call DummyMacro(theButtonID)
  Case "aButton03": Call DummyMacro(theButtonID)
  Case "aButton04": Call DummyMacro(theButtonID)
  Case "aButton05": Call DummyMacro(theButtonID)
  Case "aButton06": Call DummyMacro(theButtonID)
  Case "aButton07": Call DummyMacro(theButtonID)
  Case "aButton08": Call DummyMacro(theButtonID)
  Case "aButton09": Call DummyMacro(theButtonID)
  Case "aButton10": Call DummyMacro(theButtonID)
  
  Case "bButton01": Call DummyMacro(theButtonID)
  Case "bButton02": Call DummyMacro(theButtonID)
  Case "bButton03": Call DummyMacro(theButtonID)
  Case "bButton04": Call DummyMacro(theButtonID)
  Case "bButton05": Call DummyMacro(theButtonID)
  Case "bButton06": Call DummyMacro(theButtonID)
  Case "bButton07": Call DummyMacro(theButtonID)
  Case "bButton08": Call DummyMacro(theButtonID)
  Case "bButton09": Call DummyMacro(theButtonID)
  Case "bButton10": Call DummyMacro(theButtonID)
  
  Case "cButton01": Call DummyMacro(theButtonID)
  Case "cButton02": Call DummyMacro(theButtonID)
  Case "cButton03": Call DummyMacro(theButtonID)
  Case "cButton04": Call DummyMacro(theButtonID)
  Case "cButton05": Call DummyMacro(theButtonID)
  Case "cButton06": Call DummyMacro(theButtonID)
  Case "cButton07": Call DummyMacro(theButtonID)
  Case "cButton08": Call DummyMacro(theButtonID)
  Case "cButton09": Call DummyMacro(theButtonID)
  Case "cButton10": Call DummyMacro(theButtonID)
  
  Case "dButton01": Call DummyMacro(theButtonID)
  Case "dButton02": Call DummyMacro(theButtonID)
  Case "dButton03": Call DummyMacro(theButtonID)
  Case "dButton04": Call DummyMacro(theButtonID)
  Case "dButton05": Call DummyMacro(theButtonID)
  Case "dButton06": Call DummyMacro(theButtonID)
  Case "dButton07": Call DummyMacro(theButtonID)
  Case "dButton08": Call DummyMacro(theButtonID)
  Case "dButton09": Call DummyMacro(theButtonID)
  Case "dButton10": Call DummyMacro(theButtonID)
  
  Case "eButton01": Call DummyMacro(theButtonID)
  Case "eButton02": Call DummyMacro(theButtonID)
  Case "eButton03": Call DummyMacro(theButtonID)
  Case "eButton04": Call DummyMacro(theButtonID)
  Case "eButton05": Call DummyMacro(theButtonID)
  Case "eButton06": Call DummyMacro(theButtonID)
  Case "eButton07": Call DummyMacro(theButtonID)
  Case "eButton08": Call DummyMacro(theButtonID)
  Case "eButton09": Call DummyMacro(theButtonID)
  Case "eButton10": Call DummyMacro(theButtonID)
  
  Case "fButton01": Call DummyMacro(theButtonID)
  Case "fButton02": Call DummyMacro(theButtonID)
  Case "fButton03": Call DummyMacro(theButtonID)
  Case "fButton04": Call DummyMacro(theButtonID)
  Case "fButton05": Call DummyMacro(theButtonID)
  Case "fButton06": Call DummyMacro(theButtonID)
  Case "fButton07": Call DummyMacro(theButtonID)
  Case "fButton08": Call DummyMacro(theButtonID)
  Case "fButton09": Call DummyMacro(theButtonID)
  Case "fButton10": Call DummyMacro(theButtonID)
  Case Else: Call DummyMacro(theButtonID) ' default
 End Select
    
End Sub
Sub X_GetVisible(control As IRibbonControl, ByRef MakeVisible) ' overriden by macro GetVisible
'PURPOSE: Show/Hide buttons based on how many you need (False = Hide/True = Show)

Select Case control.ID
  Case "GroupA": MakeVisible = True
  Case "aButton01": MakeVisible = True
  Case "aButton02": MakeVisible = True
  Case "aButton03": MakeVisible = True
  Case "aButton04": MakeVisible = True
  Case "aButton05": MakeVisible = True
  Case "aButton06": MakeVisible = True
  Case "aButton07": MakeVisible = True
  Case "aButton08": MakeVisible = True
  Case "aButton09": MakeVisible = True
  Case "aButton10": MakeVisible = True
  
  Case "GroupB": MakeVisible = True
  Case "bButton01": MakeVisible = True
  Case "bButton02": MakeVisible = True
  Case "bButton03": MakeVisible = True
  Case "bButton04": MakeVisible = True
  Case "bButton05": MakeVisible = True
  Case "bButton06": MakeVisible = True
  Case "bButton07": MakeVisible = True
  Case "bButton08": MakeVisible = True
  Case "bButton09": MakeVisible = True
  Case "bButton10": MakeVisible = True
  
  Case "GroupC": MakeVisible = True
  Case "cButton01": MakeVisible = True
  Case "cButton02": MakeVisible = True
  Case "cButton03": MakeVisible = True
  Case "cButton04": MakeVisible = True
  Case "cButton05": MakeVisible = True
  Case "cButton06": MakeVisible = True
  Case "cButton07": MakeVisible = True
  Case "cButton08": MakeVisible = True
  Case "cButton09": MakeVisible = True
  Case "cButton10": MakeVisible = True
  
  Case "GroupD": MakeVisible = True
  Case "dButton01": MakeVisible = True
  Case "dButton02": MakeVisible = True
  Case "dButton03": MakeVisible = True
  Case "dButton04": MakeVisible = True
  Case "dButton05": MakeVisible = True
  Case "dButton06": MakeVisible = True
  Case "dButton07": MakeVisible = True
  Case "dButton08": MakeVisible = True
  Case "dButton09": MakeVisible = True
  Case "dButton10": MakeVisible = True
  
  Case "GroupE": MakeVisible = True
  Case "eButton01": MakeVisible = True
  Case "eButton02": MakeVisible = True
  Case "eButton03": MakeVisible = True
  Case "eButton04": MakeVisible = True
  Case "eButton05": MakeVisible = True
  Case "eButton06": MakeVisible = True
  Case "eButton07": MakeVisible = True
  Case "eButton08": MakeVisible = True
  Case "eButton09": MakeVisible = True
  Case "eButton10": MakeVisible = True
  
  Case "GroupF": MakeVisible = True
  Case "fButton01": MakeVisible = True
  Case "fButton02": MakeVisible = True
  Case "fButton03": MakeVisible = True
  Case "fButton04": MakeVisible = True
  Case "fButton05": MakeVisible = True
  Case "fButton06": MakeVisible = True
  Case "fButton07": MakeVisible = True
  Case "fButton08": MakeVisible = True
  Case "fButton09": MakeVisible = True
  Case "fButton10": MakeVisible = True
  
End Select

End Sub

Sub X_GetSize(control As IRibbonControl, ByRef Size)
'PURPOSE: Determine if the button size is large or small

Const Large As Integer = 1
Const Small As Integer = 0

Select Case control.ID
    
  Case "aButton01": Size = Large
  Case "aButton02": Size = Small
  Case "aButton03": Size = Small
  Case "aButton04": Size = Small
  Case "aButton05": Size = Small
  Case "aButton06": Size = Small
  Case "aButton07": Size = Small
  Case "aButton08": Size = Small
  Case "aButton09": Size = Small
  Case "aButton10": Size = Small
  
  Case "bButton01": Size = Large
  Case "bButton02": Size = Small
  Case "bButton03": Size = Small
  Case "bButton04": Size = Small
  Case "bButton05": Size = Small
  Case "bButton06": Size = Small
  Case "bButton07": Size = Small
  Case "bButton08": Size = Small
  Case "bButton09": Size = Small
  Case "bButton10": Size = Small
  
  Case "cButton01": Size = Large
  Case "cButton02": Size = Small
  Case "cButton03": Size = Small
  Case "cButton04": Size = Small
  Case "cButton05": Size = Small
  Case "cButton06": Size = Small
  Case "cButton07": Size = Small
  Case "cButton08": Size = Small
  Case "cButton09": Size = Small
  Case "cButton10": Size = Small
  
  Case "dButton01": Size = Large
  Case "dButton02": Size = Small
  Case "dButton03": Size = Small
  Case "dButton04": Size = Small
  Case "dButton05": Size = Small
  Case "dButton06": Size = Small
  Case "dButton07": Size = Small
  Case "dButton08": Size = Small
  Case "dButton09": Size = Small
  Case "dButton10": Size = Small
  
  Case "eButton01": Size = Large
  Case "eButton02": Size = Small
  Case "eButton03": Size = Small
  Case "eButton04": Size = Small
  Case "eButton05": Size = Small
  Case "eButton06": Size = Small
  Case "eButton07": Size = Small
  Case "eButton08": Size = Small
  Case "eButton09": Size = Small
  Case "eButton10": Size = Small
  
  Case "fButton01": Size = Large
  Case "fButton02": Size = Small
  Case "fButton03": Size = Small
  Case "fButton04": Size = Small
  Case "fButton05": Size = Small
  Case "fButton06": Size = Small
  Case "fButton07": Size = Small
  Case "fButton08": Size = Small
  Case "fButton09": Size = Small
  Case "fButton10": Size = Small
  
    Case "gButton01": Size = Large
  Case "gButton02": Size = Small
  Case "gButton03": Size = Small
  Case "gButton04": Size = Small
  Case "gButton05": Size = Small
  Case "gButton06": Size = Small
  Case "gButton07": Size = Small
  Case "gButton08": Size = Small
  Case "gButton09": Size = Small
  Case "gButton10": Size = Small
  
    Case "hButton01": Size = Large
  Case "hButton02": Size = Small
  Case "hButton03": Size = Small
  Case "hButton04": Size = Small
  Case "hButton05": Size = Small
  Case "hButton06": Size = Small
  Case "hButton07": Size = Small
  Case "hButton08": Size = Small
  Case "hButton09": Size = Small
  Case "hButton10": Size = Small
  
   Case "iButton01": Size = Large
  Case "iButton02": Size = Small
  Case "iButton03": Size = Small
  Case "iButton04": Size = Small
  Case "iButton05": Size = Small
  Case "iButton06": Size = Small
  Case "iButton07": Size = Small
  Case "iButton08": Size = Small
  Case "iButton09": Size = Small
  Case "iButton10": Size = Small
  
  Case "jButton01": Size = Large
  Case "jButton02": Size = Small
  Case "jButton03": Size = Small
  Case "jButton04": Size = Small
  Case "jButton05": Size = Small
  Case "jButton06": Size = Small
  Case "jButton07": Size = Small
  Case "jButton08": Size = Small
  Case "jButton09": Size = Small
  Case "jButton10": Size = Small
End Select

End Sub

Sub X_GetLabel(ByVal control As IRibbonControl, ByRef Labeling)
'PURPOSE: Determine the text to go along with your Tab, Groups, and Buttons
' SBC: hard coded

Select Case control.ID
  
  Case "TabSBC": Labeling = "SBC"
  
  Case "GroupA": Labeling = "A:File"
  Case "aButton01": Labeling = "Quit"
  Case "aButton02": Labeling = "Save"
  Case "aButton03": Labeling = "Save As"
  Case "aButton04": Labeling = "Import"
  Case "aButton05": Labeling = "Export"
  Case "aButton06": Labeling = "Repeat"
 ' Case "aButton07": Labeling = "x"
 ' Case "aButton08": Labeling = "x"
 'Case "aButton09": Labeling = "x"
 ' Case "aButton10": Labeling = "x"
  
  Case "GroupAMenu1": Labeling = "File"
  Case "aMenu1Button1": Labeling = "Save CSS Styles..."
  Case "aMenu1Button2": Labeling = "Save Selection As HTML Table..."
  Case "aMenu1Button3": Labeling = "Save Selection As Web Page..."
  Case "aMenu1Button4": Labeling = "Save All Player Stats As Web Pages..."
 ' Case "aMenu1Button5": Labeling = "x"
 ' Case "aMenu1Button6": Labeling = "x"
  
  Case "GroupG": Labeling = "G:Print"
  Case "gButton01": Labeling = "Print All"
  Case "gButton02": Labeling = "Print Selection"
 ' Case "gButton03": Labeling = "x"
 ' Case "gButton04": Labeling = "x"
 ' Case "gButton05": Labeling = "x"
 ' Case "gButton06": Labeling = "x"
 ' Case "gButton07": Labeling = "x"
 ' Case "gButton08": Labeling = "x"
 ' Case "gButton09": Labeling = "x"
 ' Case "gButton10": Labeling = "x"
  
   Case "GroupGMenu1": Labeling = "Setup"
  Case "gMenu1Button1": Labeling = "Page Setup"
  Case "gMenu1Button2": Labeling = "Default Page Setup"
 Case "gMenu1Button3": Labeling = "Printer Setup"
 ' Case "gMenu1Button4": Labeling = "x"
  'Case "gMenu1Button5": Labeling = "x"
 ' Case "gMenu1Button6": Labeling = "x"
  
  Case "GroupB": Labeling = "B:Display"
  Case "bButton01": Labeling = "Team Summary"
  Case "bButton02": Labeling = "Team Batting"
  Case "bButton03": Labeling = "User Notes"
  Case "bButton04": Labeling = "Game Range"
  Case "bButton05": Labeling = "Player Stats"
  Case "bButton06": Labeling = "Next Player Stats"
  Case "bButton07": Labeling = "Previous Player Stats"
 Case "bButton08": Labeling = "Expanded"
  Case "bButton09": Labeling = "Basic"
  Case "bBox1Label1": Labeling = "Command Set"
 ' Case "bButton10": Labeling = "x"
  
  
  Case "GroupC": Labeling = "C:Schedule"
  Case "cButton01": Labeling = "Display"
  Case "cButton02": Labeling = "Edit"
  Case "cButton03": Labeling = "Analyze"
  Case "cButton04": Labeling = "Renumber"
 ' Case "cButton05": Labeling = "x"
 ' Case "cButton06": Labeling = "x"
 ' Case "cButton07": Labeling = "x"
 ' Case "cButton08": Labeling = "x"
 ' Case "cButton09": Labeling = "x"
 ' Case "cButton10": Labeling = "x"
  
  Case "GroupD": Labeling = "D:Batting Leaders"
  Case "dButton01": Labeling = "Update"
  Case "dButton02": Labeling = "Preferences"
  ' Case "dButton03": Labeling = "x"

  Case "GroupH": Labeling = "H:Box Scores"
  Case "hButton01": Labeling = "Update"
  Case "hButton02": Labeling = "Next"
  Case "hButton03": Labeling = "Previous"
 ' Case "hButton04": Labeling = "x"
 ' Case "hButton04": Labeling = "x"
 ' Case "hButton06": Labeling = "x"
 ' Case "hButton07": Labeling = "x"
  
  Case "GroupI": Labeling = "I:Roster"
  Case "iButton01": Labeling = "Add"
  Case "iButton02": Labeling = "Delete"
  Case "iButton03": Labeling = "Rename"
  Case "iButton04": Labeling = "Transfer"
   Case "iButton05": Labeling = "Merge"
 ' Case "iButton06": Labeling = "x"
 ' Case "iButton07": Labeling = "x"
 ' Case "iButton08": Labeling = "x"
 ' Case "iButton09": Labeling = "x"
 ' Case "iButton10": Labeling = "x"
  
  Case "GroupE": Labeling = "E:Stats"
  Case "eButton01": Labeling = "Update"
  Case "eButton02": Labeling = "Validate"
   Case "eButton03": Labeling = "Consolidate"
  Case "GroupEMenu1": Labeling = "Delete"
  Case "eMenu1Button1": Labeling = "Player Stats By Name"
  Case "eMenu1Button2": Labeling = "Player Stats By Game Range"
  Case "eMenu1Button3": Labeling = "All Players Stats By Game Range"
  Case "eMenu1Button4": Labeling = "Player Stats By Season"
  Case "eMenu1Button5": Labeling = "All Player Stats By Season"
 
  
  Case "GroupF": Labeling = "F:Web Site"
  Case "fButton01": Labeling = "One Step Web Site"
  Case "fButton02": Labeling = "Edit Hyperlink"
  Case "fButton03": Labeling = "Validate Hyperlinks"
 ' Case "fButton04": Labeling = "x"
 ' Case "fButton05": Labeling = "x"
 ' Case "fButton06": Labeling = "x"
 ' Case "fButton07": Labeling = "x"
 ' Case "fButton08": Labeling = "x"
 ' Case "fButton09": Labeling = "x"
 ' Case "fButton10": Labeling = "x"
  
  Case "GroupFMenu1": Labeling = "Preferences"
  Case "fMenu1Button1": Labeling = "One Step Web Site"
  Case "fMenu1Button2": Labeling = "General"
  Case "fMenu1Button3": Labeling = "Web Theme"
  Case "fMenu1Button4": Labeling = "Masthead"
  Case "fMenu1Button5": Labeling = "Navigation Bar"
  Case "fMenu1Button6": Labeling = "Content"
  Case "fMenu1Button7": Labeling = "Include Files"
  
   Case "GroupJ": Labeling = "I:Standings"
  Case "jButton01": Labeling = "Edit"
  Case "jButton02": Labeling = "Validate"
  Case "jButton03": Labeling = ""
  Case "jButton04": Labeling = ""
  ' Case "jButton05": Labeling = "x"
 ' Case "jButton06": Labeling = "x"
 ' Case "jButton07": Labeling = "x"
 ' Case "jButton08": Labeling = "x"
 ' Case "jButton09": Labeling = "x"
 ' Case "jButton10": Labeling = "x"
End Select
   
End Sub

' InQuest injected base64 decoded content
' rJ'^K)
' x	e>V
' *'.+-E
' {fz{BjW
' {fz{H
' Lijw^t*&
' Jek'
' ']zpn
' ' 2'.+-
' r'.+-
' ']zpn
' jQ'i
' 'V+"nW

INQUEST-PP=macro
