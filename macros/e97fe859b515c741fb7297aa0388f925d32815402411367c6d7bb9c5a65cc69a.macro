Attribute VB_Name = "School"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private sName As String
Private sEstab As String
Private sPhase As String

Public Property Get Name() As String
    Name = sName
End Property

Public Property Let Name(Value As String)
    sName = Value
End Property

Public Property Get Estab() As String
    Estab = sEstab
End Property

Public Property Let Estab(Value As String)
    sEstab = Value
End Property

Public Property Get Phase() As String
    Phase = sPhase
End Property

Public Property Let Phase(Value As String)
Select Case UCase$(Value)
    Case "PUPIL REFERRAL UNIT"
        sPhase = "PRU"
    Case "SPECIAL"
        sPhase = "Special"
    Case "HOSPITAL"
        sPhase = "HSP"
    Case ""
        sPhase = ""
    Case Else
        sPhase = "Mainstream"
    End Select
End Property

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "VersionInfo"
Option Explicit

'Version 0.5
'Picked up by SS for VBA work.

'Written: XML output module - LA data, school data, EYC data
'Rewritten: Modifiers of workbook structure
'Pending: Pre-population routine for previous years data
'TODO: Test XML output, verify formats of data

'BRIEF:


'CW: As discussed, please find below a link to the XML Converter folder for S251 Budget 2019-20.

'M:\OperationalDataSupport\S251 Budget\2019-20\XML Converter

'In this folder there is an example XML file from last year (UAT) that I have modified (changed <Year> to 2020 and
'updated <EYtableLine7> <EYChildRecords3>7a and 7b to 7ai, 7aii and 7bi and 7bii). I have also included data items that
'were not included in last year's XML download as the schema was not updated (because there was no need for the users
'to download or facility to upload).

'M:\OperationalDataSupport\S251 Budget\2019-20\XML Converter\XML Structure Example

'Please can you create a macro that produces an XML file from the converter to match the XML example. As a note, we do not
'need the items that are in the grey cells in the converter on the LA Table. These, along with other totals, will be
'calculated by COLLECT.

'None of Brenda's macro are needed. Only the EY table Add and Delete button macros are required.
'Everything else can be commented out/removed.

'There will be a few adjustments to the LA table - I'm expecting to have to insert some rows into the LA table. This extra
'block will populate the LA Table Notes at the bottom of the screen. The three tables (LA, Schools and EY table) all have
'an area for notes. These are to populate the <LATableNote>, <SchoolsTableNote> and <EYTableNote> fields respectively.

'I 'll provide you with more info as soon as I get it.

'SS: Although many of these elements are described as 1..n, it appears that there is a fixed number of data items.  At the
'moment I'm uncertain how many there are but will populate this information when it comes available.  Note also that, as
'the data does not necessarily follow a fixed format, using subprocedures may not be viable.

'<S251Budget>
'       <Collection>S251 Budget</Collection>
'       <Year>2020</Year>
'       <LEA>841</LEA>
'       <LAName>Darlington</LAName>
'       <ContactName></ContactName>
'       <EmailAddress></EmailAddress>
'       <Telephone></Telephone>
'       <LATableNote>CLP some Notes</LATableNote>
'       <SchoolsTableNote></SchoolsTableNote>
'       <EYTableNote></EYTableNote>
'       <DateTime>2018-03-02 18:01:26</DateTime>
'[1..n] <SchoolsBudget>
'            <S251Line>1.0.1</S251Line>
'            <EarlyYears>1.01</EarlyYears>
'            <Primaries>2.01</Primaries>
'            <Secondary>3.01</Secondary>
'            <SpecialAP>4.01</SpecialAP>
'            <PostSchool>123123.00</PostSchool>
'            <Income>11111111111.00</Income>
'       </SchoolsBudget>
'[1..n] <LATotals>
'            <S251Line>2.1.4</S251Line>
'            <EarlyYears>400.01</EarlyYears>
'            <Primaries>-1.00</Primaries>
'            <Secondary>402.01</Secondary>
'            <SpecialAP>403.01</SpecialAP>
'            <PostSchool>405.11</PostSchool>
'            <Income>406.01</Income>
'       </LATotals>
'[1..n] <LATotals2>
'            <S251Line>2.0.1</S251Line>
'            <Gross>1.00</Gross>
'            <Income>1.00</Income>
'       </LATotals2>
'[1..n] <Reconciliation>
'            <S251Line>1.9.3</S251Line>
'            <Gross>22222.00</Gross>
'       </Reconciliation>
'[?]    <SchoolsTable>
'           <Phase>Mainstream</Phase>
'           <SchoolName>Test School 5</SchoolName>
'           <Estab>4004</Estab>
'           <OpenCloseIndicator>Open</OpenCloseIndicator>
'           <OpenCloseDate></OpenCloseDate>
'           <SENPlacesAprAug>1</SENPlacesAprAug>
'           <SENPlacesSepMar>2</SENPlacesSepMar>
'           <SENFunding>3.00</SENFunding>
'           <APPlacesAprAug>4</APPlacesAprAug>
'           <APPlacesSepMar>5</APPlacesSepMar>
'           <APFunding>6.00</APFunding>
'           <HospPlacesAprAug>7</HospPlacesAprAug>
'           <HospPlacesSepMar>8</HospPlacesSepMar>
'           <HospFunding>9.00</HospFunding>
'           <TotalPlaces>18.00</TotalPlaces>
'           <TotalDeductedForServices>10.00</TotalDeductedForServices>
'           <SchoolNote>Test School Note</SchoolNote>
'       </SchoolsTable>
'[1..n] <EYTableLine1>
'           <RowNumber>1</RowNumber>
'           <EYChildRecords1>
'               <Number>1.00</Number>
'               <Description>1</Description>
'               <PVIAmount>26.00</PVIAmount>
'               <NurseryAmount>45.00</NurseryAmount>
'               <NurseryClassAmount>68.00</NurseryClassAmount>
'               <UnitType>PerHour</UnitType>
'               <UnitNumberPVI>5.00</UnitNumberPVI>
'               <UnitNumberNursery>6.00</UnitNumberNursery>
'               <UnitNumberNurseryClass>7.00</UnitNumberNurseryClass>
'               <UnitValuePVI>2.00</UnitValuePVI>
'               <UnitValueNursery>3.00</UnitValueNursery>
'                   <UnitValueNurseryClass>4.00</UnitValueNurseryClass>
'               <AddUnitNumberPVI>8.00</AddUnitNumberPVI>
'               <AddUnitValueNursery>9.00</AddUnitValueNursery>
'               <AddUnitValueNurseryClass>10.00</AddUnitValueNurseryClass>
'           </EYChildRecords1>
'       </EYTableLine1>
'[1..n] <EYTable>   <!--Handles structures 2a-2e/3/4/5/6a/6b-->
'           <RowNumber>2a</RowNumber>
'           <EYChildRecords>
'               <Number>1.00</Number>
'               <Description>11</Description>
'               <PVIAmount>180.00</PVIAmount>
'               <NurseryAmount>208.00</NurseryAmount>
'               <NurseryClassAmount>238.00</NurseryClassAmount>
'               <UnitType>PerChild</UnitType>
'               <UnitNumberPVI>15.00</UnitNumberPVI>
'               <UnitNumberNursery>16.00</UnitNumberNursery>
'               <UnitNumberNurseryClass>17.00</UnitNumberNurseryClass>
'               <UnitValuePVI>12.00</UnitValuePVI>
'               <UnitValueNursery>13.00</UnitValueNursery>
'               <UnitValueNurseryClass>14.00</UnitValueNurseryClass>
'           </EYChildRecords>
'       </EYTable>
'       <EYTableLine7>
'[1..n]     <RowNumber>7ai</RowNumber>
'           <EYChildRecords3>
'               <Description>100</Description>
'               <PVIAmount>101.00</PVIAmount>
'               <NurseryAmount>102.00</NurseryAmount>
'               <NurseryClassAmount>103.00</NurseryClassAmount>
'           </EYChildRecords3>
'[1..n]   </EYTableLine7>
'       <EYTableLine8and9>
'           <RowNumber>8a</RowNumber>
'           <EYChildRecords2>
'               <Description>8a</Description>
'               <TotalBudget>200.00</TotalBudget>
'               </EYChildRecords2>
'       </EYTableLine8and9>
'[1..n] <EYTableLine10and11>
'           <RowNumber>10</RowNumber>
'           <AnticipatedTotalBudget>100.01</AnticipatedTotalBudget>
'       </EYTableLine10and11>
'       <EYTableLine10and11>
'   </S251Budget>


Attribute VB_Name = "basExport"
Option Explicit
'Location where the root data starts - amend as necessary
Public Const sROOTDATA As String = "B13"
Public Const sFilename As String = "Section251Budget.xml"

Public Sub AddDataRow(sRowType As String)
Dim rngTemp As Excel.Range
Dim rngToAdd As Excel.Range
Dim rng2 As Excel.Range
    UnprotectWB
    Set rngTemp = wksEYT.Range("A:A")
    If GetCells(sRowType, rngTemp) <> 0 Then
        Set rngToAdd = rngTemp.Cells(rngTemp.Cells.Count, 1)
        rngToAdd.EntireRow.Copy
        rngToAdd.EntireRow.Insert shift:=xlDown
        rngToAdd.PasteSpecial xlPasteAll
        rngToAdd.Cells(1, 4).Value = rngToAdd.Cells(0, 4).Value + 1
        Range(rngToAdd.Cells(1, 5), rngToAdd.Cells(1, 15)).ClearContents
        If sRowType Like "EY7*" Then
            Range(rngToAdd.Cells(1, 16), rngToAdd.Cells(1, 18)).ClearContents
        End If
        If sRowType Like "EY8*" Or _
            sRowType Like "EY9*" Then
            Range(rngToAdd.Cells(1, 16), rngToAdd.Cells(1, 19)).ClearContents
        End If
    Else
        MsgBox ("Row type (" & sRowType & ") not found.  Please contact DfE support with this error.")
    End If
    ModifyNamedRanges
    ProtectWB
End Sub

Public Sub DeleteDataRow(sRowType As String)
Dim rngTemp As Excel.Range
Dim rngToDel As Excel.Range
Dim lCount As Long
    UnprotectWB
    Set rngTemp = wksEYT.Range("A:A")
    lCount = GetCells(sRowType, rngTemp)
    Select Case lCount
        Case 0
            MsgBox ("Row type (" & sRowType & ") not found.  Please contact DfE support with this error.")
        Case 1
            MsgBox ("You must retain at least one row of type (" & sRowType & ").  Can't delete the last row.")
        Case Else
            Set rngToDel = rngTemp.Cells(rngTemp.Cells.Count, 1).EntireRow
            rngToDel.Delete shift:=xlUp
    End Select
    ModifyNamedRanges
    ProtectWB
End Sub

Public Sub Resize(rngArea As Excel.Range)
Dim row As Excel.Range
    For Each row In rngArea.Rows
        row.EntireRow.AutoFit
    Next row
End Sub

Public Sub ShowForm()
    frmModifyDataAreas.Show
End Sub

Private Sub GetEYTableLine1to6s(sSearch As String, sNodeName As String, oXMLItem As IXMLDOMElement, lFlags As Long)
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
Dim oXMLChild As IXMLDOMElement
    Set rngTemp = wksEYT.Range("a:a")
    If GetCells(sSearch, rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            AppendXMLNode oXMLItem, "RowNumber", Replace(sSearch, "EY", "")
            Set oXMLChild = AppendXMLNode(oXMLItem, sNodeName, , True)
            If lFlags And 1 Then AppendXMLNode oXMLChild, "Number", rngCell.Offset(0, 3).Value   'd
            If lFlags And 2 Then AppendXMLNode oXMLChild, "Description", rngCell.Offset(0, 4).Value  'e
            If lFlags And 4 Then AppendXMLNode oXMLChild, "UnitValuePVI", rngCell.Offset(0, 5).Value    'f
            If lFlags And 8 Then AppendXMLNode oXMLChild, "UnitValueNursery", rngCell.Offset(0, 6).Value    'g
            If lFlags And 16 Then AppendXMLNode oXMLChild, "UnitValueNurseryClass", rngCell.Offset(0, 7).Value  'h
            If lFlags And 32 Then AppendXMLNode oXMLChild, "UnitType", rngCell.Offset(0, 8).Value    'i
            If lFlags And 64 Then AppendXMLNode oXMLChild, "UnitNumberPVI", rngCell.Offset(0, 9).Value   'j
            If lFlags And 128 Then AppendXMLNode oXMLChild, "UnitNumberNursery", rngCell.Offset(0, 10).Value  'k
            If lFlags And 256 Then AppendXMLNode oXMLChild, "UnitNumberNurseryClass", rngCell.Offset(0, 11).Value 'l
            If lFlags And 512 Then AppendXMLNode oXMLChild, "AddUnitNumberPVI", rngCell.Offset(0, 12).Value   'm
            If lFlags And 1024 Then AppendXMLNode oXMLChild, "AddUnitValueNursery", rngCell.Offset(0, 13).Value  'n
            If lFlags And 2048 Then AppendXMLNode oXMLChild, "AddUnitValueNurseryClass", rngCell.Offset(0, 14).Value 'o
        Next rngCell
    End If
    Set oXMLChild = Nothing
    Set rngCell = Nothing
    Set rngTemp = Nothing
End Sub

Private Sub GetEYTableLine7s(sSearch As String, oXMLItem As IXMLDOMElement)
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
Dim oXMLChild As IXMLDOMElement
    Set rngTemp = wksEYT.Range("a:a")
    If GetCells(sSearch, rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            AppendXMLNode oXMLItem, "RowNumber", Replace(sSearch, "EY", "")
            Set oXMLChild = AppendXMLNode(oXMLItem, "EYChildRecords3", , True)
'            AppendXMLNode oXMLChild, "Number", rngCell.Offset(0, 3).Value
            AppendXMLNode oXMLChild, "Description", rngCell.Offset(0, 4).Value  'e
            AppendXMLNode oXMLChild, "PVIAmount", rngCell.Offset(0, 15).Value
            AppendXMLNode oXMLChild, "NurseryAmount", rngCell.Offset(0, 16).Value
            AppendXMLNode oXMLChild, "NurseryClassAmount", rngCell.Offset(0, 17).Value
        Next rngCell
    End If
    Set oXMLChild = Nothing
    Set rngCell = Nothing
    Set rngTemp = Nothing
End Sub

Private Sub GetEYTableLine8and9s(sSearch As String, oXMLItem As IXMLDOMElement)
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
Dim oXMLChild As IXMLDOMElement
    Set rngTemp = wksEYT.Range("a:a")
    If GetCells(sSearch, rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            AppendXMLNode oXMLItem, "RowNumber", Replace(sSearch, "EY", "")
            Set oXMLChild = AppendXMLNode(oXMLItem, "EYChildRecords2", , True)
'            AppendXMLNode oXMLChild, "Number", rngCell.Offset(0, 3).Value
            AppendXMLNode oXMLChild, "Description", rngCell.Offset(0, 4).Value  'e
            AppendXMLNode oXMLChild, "TotalBudget", rngCell.Offset(0, 18).Value
        Next rngCell
    End If
    Set oXMLChild = Nothing
    Set rngCell = Nothing
    Set rngTemp = Nothing
End Sub

Private Sub GetEYTableLine10and11s(sSearch As String, oXMLItem As IXMLDOMElement)
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
    Set rngTemp = wksEYT.Range("a:a")
    If GetCells(sSearch, rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            AppendXMLNode oXMLItem, "RowNumber", Replace(sSearch, "EY", "")
            AppendXMLNode oXMLItem, "AnticipatedTotalBudget", rngCell.Offset(0, 18).Value
        Next rngCell
    End If
    Set rngCell = Nothing
    Set rngTemp = Nothing
End Sub

Private Sub GetEYTables(oXMLItem As IXMLDOMElement)
'1-6 all have flags to switch fields on/off (for tables 3 and 4); all others are a static format and do not need this
'Note that we pass the tablename in, as EY1 is on a separate table to the rest of them
    GetEYTableLine1to6s "EY1", "EYChildRecords1", AppendXMLNode(oXMLItem, "EYTableLine1", , True), 4095
    
'TODO: Check data items come across correctly following changes to XML schema
    GetEYTableLine1to6s "EY2a", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY2b", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY2c", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY2d", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY2e", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY3", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 171
    GetEYTableLine1to6s "EY4", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY5", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY6a", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    GetEYTableLine1to6s "EY6b", "EYChildRecords", AppendXMLNode(oXMLItem, "EYTable", , True), 511
    
'Back to static tables
    GetEYTableLine7s "EY7ai", AppendXMLNode(oXMLItem, "EYTableLine7", , True)
    GetEYTableLine7s "EY7aii", AppendXMLNode(oXMLItem, "EYTableLine7", , True)
    GetEYTableLine7s "EY7bi", AppendXMLNode(oXMLItem, "EYTableLine7", , True)
    GetEYTableLine7s "EY7bii", AppendXMLNode(oXMLItem, "EYTableLine7", , True)
    GetEYTableLine8and9s "EY8a", AppendXMLNode(oXMLItem, "EYTableLine8and9", , True)
    GetEYTableLine8and9s "EY8b", AppendXMLNode(oXMLItem, "EYTableLine8and9", , True)
    GetEYTableLine8and9s "EY9a", AppendXMLNode(oXMLItem, "EYTableLine8and9", , True)
    GetEYTableLine8and9s "EY9b", AppendXMLNode(oXMLItem, "EYTableLine8and9", , True)
    GetEYTableLine10and11s "EY10", AppendXMLNode(oXMLItem, "EYTableLine10and11", , True)
    GetEYTableLine10and11s "EY11", AppendXMLNode(oXMLItem, "EYTableLine10and11", , True)
End Sub

Private Sub GetSchoolRows(oXMLRoot As IXMLDOMElement)
'Assumption: that contiguous rows of data are present in the schools block (check this)
Dim rngTemp As Excel.Range
Dim oXMLSchool As IXMLDOMElement
    Set rngTemp = wksSchools.Range("B10")
    While Len(rngTemp.Value) <> 0
'        Debug.Print rngTemp.Address
'        If rngTemp.Address = "$B$48" Then
'            Debug.Print "Pause"
'        End If
        Set oXMLSchool = AppendXMLNode(oXMLRoot, "SchoolsTable", , True)
        AppendXMLNode oXMLSchool, "Phase", rngTemp.Offset(0, 2).Value   'Not certain if this is where Phase will end up, assuming for now
        AppendXMLNode oXMLSchool, "SchoolName", rngTemp.Value
        AppendXMLNode oXMLSchool, "Estab", rngTemp.Offset(0, 1).Value
        AppendXMLNode oXMLSchool, "OpenCloseIndicator", rngTemp.Offset(0, 3).Value
        AppendXMLNode oXMLSchool, "OpenCloseDate", rngTemp.Offset(0, 4).Value   'Might need force-formatting
        AppendXMLNode oXMLSchool, "SENPlacesAprAug", rngTemp.Offset(0, 5).Value
        AppendXMLNode oXMLSchool, "SENPlacesSepMar", rngTemp.Offset(0, 6).Value
        AppendXMLNode oXMLSchool, "SENFunding", rngTemp.Offset(0, 7).Value
        AppendXMLNode oXMLSchool, "APPlacesAprAug", rngTemp.Offset(0, 8).Value
        AppendXMLNode oXMLSchool, "APPlacesSepMar", rngTemp.Offset(0, 9).Value
        AppendXMLNode oXMLSchool, "APFunding", rngTemp.Offset(0, 10).Value
        AppendXMLNode oXMLSchool, "HospPlacesAprAug", rngTemp.Offset(0, 11).Value
        AppendXMLNode oXMLSchool, "HospPlacesSepMar", rngTemp.Offset(0, 12).Value
        AppendXMLNode oXMLSchool, "HospFunding", rngTemp.Offset(0, 13).Value
        AppendXMLNode oXMLSchool, "TotalPlaces", rngTemp.Offset(0, 14).Value
        AppendXMLNode oXMLSchool, "TotalDeductedForServices", rngTemp.Offset(0, 15).Value
        AppendXMLNode oXMLSchool, "SchoolNote", rngTemp.Offset(0, 16).Value
        Set rngTemp = rngTemp.Offset(1, 0)
        DoEvents
    Wend
End Sub

Private Sub GetLARow(sDesc As String, bFlags As Byte, oXMLItem As IXMLDOMElement)
Dim rngTemp As Excel.Range
    Set rngTemp = wksLA.Range("b:b")
    If GetCells(sDesc, rngTemp) <> 0 Then
        AppendXMLNode oXMLItem, "S251Line", sDesc
        If bFlags And 1 Then AppendXMLNode oXMLItem, "EarlyYears", rngTemp.Offset(0, 3).Value
        If bFlags And 2 Then AppendXMLNode oXMLItem, "Primaries", rngTemp.Offset(0, 4).Value
        If bFlags And 4 Then AppendXMLNode oXMLItem, "Secondary", rngTemp.Offset(0, 5).Value
        If bFlags And 8 Then AppendXMLNode oXMLItem, "SENSpecial", rngTemp.Offset(0, 6).Value
        If bFlags And 16 Then AppendXMLNode oXMLItem, "APPRU", rngTemp.Offset(0, 7).Value
        If bFlags And 32 Then AppendXMLNode oXMLItem, "PostSchool", rngTemp.Offset(0, 8).Value
        If bFlags And 64 Then AppendXMLNode oXMLItem, "Gross", rngTemp.Offset(0, 9).Value
        If bFlags And 128 Then AppendXMLNode oXMLItem, "Income", rngTemp.Offset(0, 10).Value
    End If
    Set rngTemp = Nothing
End Sub

Private Sub GetLARows(oXMLRoot As IXMLDOMElement)
    GetLARow "1.0.1", 7, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.0.2", 31, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.1", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.2", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.3", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.4", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.5", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.6", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.7", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.8", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.9", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.1.10", 134, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.1", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.2", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.3", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.4", 135, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.5", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.6", 152, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.7", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.8", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.9", 152, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.10", 184, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.11", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.12", 144, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.2.13", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.3.1", 129, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.1", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.2", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.3", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.4", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.5", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.6", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.7", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.8", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.9", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.10", 159, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.11", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.12", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.13", 130, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.4.14", 63, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    GetLARow "1.7.1", 191, AppendXMLNode(oXMLRoot, "SchoolsBudget", , True)
    
    GetLARow "1.5.1", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.5.2", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.5.3", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.1", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.2", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.3", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.4", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.5", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    GetLARow "1.6.6", 192, AppendXMLNode(oXMLRoot, "SchoolsBudget2", , True)
    
    GetLARow "2.1.4", 159, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "2.1.5", 159, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "2.1.6", 188, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "2.1.7", 188, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "2.1.8", 188, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "2.3.1", 156, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "3.1.11", 255, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "3.1.8", 159, AppendXMLNode(oXMLRoot, "LATotals", , True)
    GetLARow "7", 159, AppendXMLNode(oXMLRoot, "LATotals", , True)
 
    GetLARow "2.0.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.4", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.5", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.6", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.0.7", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.1.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.1.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.1.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.1.9", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.2.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.3.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.3.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.3.4", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.3.5", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "2.4.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.0.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.0.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.0.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.0.4", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.2a", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.2b", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.4", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.5", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.6", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.7", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.9", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.1.10", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.2.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.3.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.3.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.3.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.4.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.4.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.4.3", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.4.4", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.4.5", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.5.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.5.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "3.6.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "4.0.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "8a.1", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)
    GetLARow "8a.2", 192, AppendXMLNode(oXMLRoot, "LATotals2", , True)

    GetLARow "1.9.1", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.9.2", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.9.3", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.9.4", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.9.5", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.10.1", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
    GetLARow "1.10.2", 64, AppendXMLNode(oXMLRoot, "Reconciliation", , True)
End Sub

Private Function GetAdditionalLAInfo(sSearch As String) As String
Dim sRetVal As String
Dim rngTemp As Excel.Range
    Set rngTemp = wksLA.Range("b:b")
    sRetVal = ""
    If GetCells(sSearch, rngTemp) <> 0 Then
        sRetVal = sRetVal & rngTemp.Offset(0, 1) & " - Allocated " & rngTemp.Offset(0, 3) & "; "
        sRetVal = sRetVal & rngTemp.Offset(0, 1) & " - Planned " & rngTemp.Offset(0, 5) & "; "
    End If
    GetAdditionalLAInfo = sRetVal
End Function

Private Sub GetXMLData(oXMLRoot As IXMLDOMElement)
'DONE: Fix up element sources
Dim rngTemp As Excel.Range
Dim sLANote As String
    sLANote = vbNullString
    Set rngTemp = wksCover.Range(sROOTDATA)
    AppendXMLNode oXMLRoot, "Collection", sCOLLNAME
    AppendXMLNode oXMLRoot, "Year", sCOLLYEAR
    AppendXMLNode oXMLRoot, "LEA", rngTemp.Offset(2, 1).Value
    AppendXMLNode oXMLRoot, "LAName", rngTemp.Offset(0, 1).Value 'Should this be lifted from worksheet or separate function?  Is it even required?
    AppendXMLNode oXMLRoot, "ContactName", rngTemp.Offset(4, 1).Value
    AppendXMLNode oXMLRoot, "EmailAddress", rngTemp.Offset(6, 1).Value
    AppendXMLNode oXMLRoot, "Telephone", rngTemp.Offset(8, 1).Value
    AppendXMLNode oXMLRoot, "DateTime", Format(Now(), "yyyy-MM-ddThh:mm:ss")
    Set rngTemp = wksLA.Range("c:c")
    If GetCells("LA Table Notes:", rngTemp) <> 0 Then
        sLANote = sLANote & GetAdditionalLAInfo("1.8.1a")
        sLANote = sLANote & GetAdditionalLAInfo("1.8.1b")
        sLANote = sLANote & GetAdditionalLAInfo("1.8.1c")
        sLANote = sLANote & GetAdditionalLAInfo("1.8.1d")
        sLANote = sLANote & Left(SanitiseXML(rngTemp.Offset(0, 2).Value), 3500)
        AppendXMLNode oXMLRoot, "LATableNote", sLANote
    End If
    
'Order of operation has been mucked about slightly, to reduce switching between worksheets
'Strictly speaking this is not as per specification, but Collect won't care as long as the
'elements are at the correct level.
    
    GetLARows oXMLRoot
    wksSchools.Activate
    Set rngTemp = wksSchools.Range("b:b")
    If GetCells("Schools Table Notes:", rngTemp) <> 0 Then
        AppendXMLNode oXMLRoot, "SchoolsTableNote", SanitiseXML(rngTemp.Offset(0, 1).Value)
    End If
    GetSchoolRows oXMLRoot
        
    wksEYT.Activate
    Set rngTemp = wksEYT.Range("b:b")
    If GetCells("Early Years Table Notes", rngTemp) <> 0 Then           'Note: no colon in search description.  Look at inserting comment where not found.
        AppendXMLNode oXMLRoot, "EYTableNote", SanitiseXML(rngTemp.Offset(0, 1).Value)
    End If
    GetEYTables oXMLRoot
    Set rngTemp = Nothing
End Sub

Public Sub CreateXML()
Dim oXMLRoot As IXMLDOMElement
Dim oXMLSchool As IXMLDOMElement
Dim oXMLPupils As IXMLDOMElement
'Stub nicked from SCAP to provide a basal entry point.

Dim vFilename As Variant 'Needs to be able to handle bools as return from GetSaveAsFilename
Dim bErrors As Boolean
    wksLA.Activate    'Used during development
    StatusBar "XML Export starting. Please wait..."
    Set objXML = CreateObject("Microsoft.XMLDOM")
    Set oXMLRoot = objXML.createElement("S251Budget")
    objXML.appendChild oXMLRoot
    
'No header in this collection - all return level stuff is set as a node off S251budget
    GetXMLData oXMLRoot
    wksCover.Activate
    
    vFilename = Application.GetSaveAsFilename(sFilename, "XML Files,*.xml", 1, "Save XML as", False)
    If Not (vFilename = False) Then
        objXML.Save CStr(vFilename)
    End If
    
    StatusBar
    Set objXML = Nothing
    Set oXMLRoot = Nothing
End Sub



Attribute VB_Name = "basLibrary"
Option Explicit

Public Const sCOLLNAME As String = "S251 Budget"
Public Const sCOLLYEAR As String = "2020"

'Output object
Public objXML As DOMDocument

'Placeholder for password
Private Const sPassword = ""

Public Sub UnprotectWB()
Dim ws As Worksheet
    For Each ws In Worksheets
        ws.Unprotect Password:=sPassword
    Next ws
    ActiveWorkbook.Unprotect Password:=sPassword
End Sub

Public Sub ProtectWB()
Dim ws As Worksheet
    If wksAdmin.Visible = xlSheetVisible Then wksAdmin.Visible = xlSheetHidden
    For Each ws In Worksheets
        ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:=True, AllowSorting:=True, AllowFormattingRows:=True, Password:=sPassword
    Next ws
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:=sPassword
End Sub

Public Function AppendXMLNode(oXMLParentNode As IXMLDOMElement, _
    sXMLNodeName As String, _
    Optional sXMLNodeValue As String = vbNullString, _
    Optional bXMLStructural As Boolean = False) As IXMLDOMElement

Dim oXMLTemp As IXMLDOMElement
    If Len(sXMLNodeValue) <> 0 Or bXMLStructural Then
        Set oXMLTemp = objXML.createElement(sXMLNodeName)
        oXMLParentNode.appendChild oXMLTemp
        If Len(sXMLNodeValue) Then
            oXMLTemp.Text = sXMLNodeValue
        End If
        Set AppendXMLNode = oXMLTemp
    End If
End Function

Public Sub StatusBar(Optional sMessage As String = vbNullString)
    If Len(sMessage) Then
        Application.StatusBar = sMessage
    Else
        Application.StatusBar = False
    End If
End Sub

Public Function SanitiseXML(sText As String) As String
    sText = Replace(sText, "&", "&amp;")
    sText = Replace(sText, ">", "&gt;")
    sText = Replace(sText, "<", "&lt;")
    sText = Replace(sText, """", "&quot;")
    sText = Replace(sText, "'", "&apos;")
End Function


Public Function RangeHasText(rngTest As Excel.Range) As Boolean
'Selects a number of cells starting from sLocation and tests whether
'any of those in the relevant range have text input within them.
'Added Because Range("A2:F2").text doesn't return anything useful.

Dim vCell As Variant
Dim bRetVal As Boolean
    For Each vCell In rngTest.Cells
        If Len(vCell.Text) Then
            RangeHasText = True
            Exit Function
        End If
    Next vCell
    RangeHasText = False
End Function

Public Function GetCells(sSearchText As String, rngTargets As Excel.Range) As Long
Dim sRef As String
Dim rngCell As Excel.Range
Dim rngColl As Excel.Range
Dim lCount As Long
Dim bFinished As Boolean
    With rngTargets
        Set rngCell = .Find(sSearchText, LookIn:=xlValues, Lookat:=xlWhole)
        If Not rngCell Is Nothing Then
            Set rngColl = rngCell
            sRef = rngCell.Address
            Do
                Set rngColl = Union(rngColl, rngCell)
                Set rngCell = .FindNext(rngCell)
                If rngCell Is Nothing Then
                    bFinished = True
                ElseIf rngCell.Address = sRef Then
                    bFinished = True
                End If
            Loop While Not bFinished
            lCount = rngColl.Cells.Count
        End If
    End With
    Set rngTargets = rngColl
    GetCells = lCount
End Function

Public Sub ModifyNamedRanges()
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
Dim rngCell2 As Excel.Range
Dim rngColl As Excel.Range
Dim i As Long
    Set rngTemp = wksEYT.Range("S:S")
    i = 1
    If GetCells("Total", rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            Set rngCell = rngCell.Offset(1, 0)
            Set rngCell2 = rngCell
            If Len(rngCell.Offset(1, -18)) Then
                Do
                    Set rngCell = rngCell.Offset(1, 0)
                Loop While Len(rngCell.Offset(1, -18)) <> 0
            End If
            ThisWorkbook.Names.Add Name:="Total" & i, RefersTo:=Range(rngCell2, rngCell)
            If i = 1 Then
                ThisWorkbook.Names.Add Name:="Total" & i & "a", RefersTo:=Range(rngCell2.Offset(0, -9), rngCell.Offset(0, -4))
            End If
            i = i + 1
        Next rngCell
    End If
'Finally, the awkward part of the calculation.  We need the following items:
'Total3 (EY3)
'Total7 (EY7ai + EY7aii)
'Total8 (EY8a)
    Set rngTemp = wksEYT.Range("A:A")
    If GetCells("EY3", rngTemp) <> 0 Then
        Set rngColl = rngTemp.Offset(0, 18)
    End If

    Set rngTemp = wksEYT.Range("A:A")
    If GetCells("EY7ai", rngTemp) <> 0 Then
        Set rngColl = Union(rngColl, rngTemp.Offset(0, 18))
    End If

    Set rngTemp = wksEYT.Range("A:A")
    If GetCells("EY7aii", rngTemp) <> 0 Then
        Set rngColl = Union(rngColl, rngTemp.Offset(0, 18))
    End If

    Set rngTemp = wksEYT.Range("A:A")
    If GetCells("EY8a", rngTemp) <> 0 Then
        Set rngColl = Union(rngColl, rngTemp.Offset(0, 18))
    End If
    ThisWorkbook.Names.Add Name:="Total37a8", RefersTo:=rngColl

End Sub

Public Function IsRed(rngCell As Excel.Range)
Dim lRetVal As Long
    lRetVal = 0
    If rngCell.Interior.Color = 4934655 Then
        lRetVal = 1
    End If
    IsRed = lRetVal
End Function
Attribute VB_Name = "basPrepopulate"
Option Explicit

Private Const sSourceFile As String = "s251_Pub_Doctored.xls"
Private Const s251pass As String = "SARc"
Private wbkCurrent As Excel.Workbook
Private wbkTemp As Excel.Workbook
Private Const sVersion As String = "1.3"

Private Const lSchoolRow As Long = 11

Private Sub Unprotect()
Dim wksTemp As Excel.Worksheet
Dim ws As Worksheet
    wbkTemp.Activate
    wbkTemp.Unprotect "SARc"
    For Each wksTemp In ActiveWorkbook.Worksheets
        wksTemp.Unprotect "SARc"
        wksTemp.Visible = xlSheetVisible
        StatusBar wksTemp.Name
    Next wksTemp
End Sub

Private Sub MoveLAData(sLEA As String)
    wbkTemp.Activate
    With Worksheets(sLEA & "_LA_Table")
        .Activate
        .Range("A:Z").EntireColumn.Copy
        wbkCurrent.Activate
        wksPrevLA.Range("A1").PasteSpecial xlPasteAll
    End With
End Sub

Private Sub MoveSchoolData(sLEA As String)
Dim rngTemp As Excel.Range
Dim This As School
Dim sLastSType As String
Dim Schools As New Collection
Dim i As Long
    wbkTemp.Activate
    With Worksheets(sLEA & "_School_Table")
        .Activate
    End With
'Not the optimal way of doing things.  Reason is because we're dealing with formatted output and
'iterating upwards doesn't allow us to 'fill in the blanks' during the output section.
    For i = lSchoolRow To Range("C1000").End(xlUp).row
        Set This = New School
        This.Name = Range("B" & i).Value
        This.Estab = Range("C" & i).Value
        This.Phase = Range("A" & i).Value
        If This.Estab <> "" Then Schools.Add This
    Next i
    wbkCurrent.Activate
    wksSchools.Activate
    Set rngTemp = Range("A10").Offset(Schools.Count - 1, 0)
    For Each This In Schools
        If Len(This.Phase) <> 0 Then
            sLastSType = This.Phase
        End If
        rngTemp.Offset(0, 1).Value = This.Name
        rngTemp.Offset(0, 2).Value = This.Estab
        If Len(This.Phase) <> 0 Then
            rngTemp.Offset(0, 3).Value = This.Phase
        Else
            rngTemp.Offset(0, 3).Value = sLastSType
        End If
        Set rngTemp = rngTemp.Offset(-1, 0)
    Next This
End Sub

Private Sub TransferData(sLEA As String)
    Select Case sLEA
        Case "835", "836", "837"
        'Do nothing for now - these should be suppressed
'        Case "838", "839"
        'Do nothing for now - there will probably be a different method by which these workbooks are generated
        'Probably need to break the procedures below into subprocs as the LA table stuff won't apply to new LEAs but the Schools section might
'            MoveSchoolData (sLEA)
'            wksPrevLA.Visible = xlSheetHidden
        Case Else
            MoveLAData (sLEA)
            MoveSchoolData (sLEA)
    End Select
    wksCover.Activate
    Range("C15").Value = sLEA
End Sub

Private Sub ClearData()
    wbkCurrent.Activate
    wksSchools.Activate
    Range("B10:D210").ClearContents
    wksPrevLA.Activate
    Range("A:Z").EntireColumn.ClearContents
    'Reset LA worksheet (only applies to 838/839)
    wksPrevLA.Visible = xlSheetVisible
End Sub

Public Sub PrepopulateData()
Dim rngCounter As Excel.Range
Dim sFilename As String
Dim bUpdateState As Boolean
    bUpdateState = Application.ScreenUpdating
    Application.ScreenUpdating = False
    Set wbkCurrent = ThisWorkbook
    wbkCurrent.Save 'because this has tripped me up so often...
    Set wbkTemp = Workbooks.Open(ThisWorkbook.Path & "\" & sSourceFile)
    Unprotect
    wbkCurrent.Activate
    UnprotectWB
    wksAdmin.Activate
    Set rngCounter = wksAdmin.Range("D1000").End(xlUp)
    While rngCounter.row <> 1
        TransferData (rngCounter.Text)
        sFilename = ThisWorkbook.Path & "\" & "S251Budget201920_Generator_" & sVersion & "_" & rngCounter.Text & ".xlsm"
        If Len(Dir(sFilename, vbNormal)) <> 0 Then Kill sFilename
        ProtectWB
        wbkCurrent.SaveAs sFilename, xlOpenXMLWorkbookMacroEnabled
        UnprotectWB
        ClearData
        Set rngCounter = rngCounter.Offset(-1, 0)
    Wend
    Application.ScreenUpdating = bUpdateState
End Sub

Attribute VB_Name = "basValidate"
Option Explicit

'Used in 2.10.1
Private Const MinDate As Date = #4/1/2019#   'US date format for VBA
Private Const MaxDate As Date = #3/31/2020#

Public Function NonNull(rngTest As Excel.Range) As Long
Dim lRetVal As Long
Dim rngCell As Range
    lRetVal = 0
    For Each rngCell In rngTest
        If Len(rngCell.Value) <> 0 Then
            lRetVal = 1
            Exit For
        End If
    Next rngCell
    NonNull = lRetVal
End Function

Public Function Threshold(YearC As Currency, YearL As Currency, ThreshU As Integer, ThreshL As Integer) As Long
Dim lRetVal As Long
    lRetVal = 0
    If YearC > YearL * ThreshU / 100 _
        Or YearC < YearL * ThreshL / 100 Then
            lRetVal = 1
    End If
    Threshold = lRetVal
End Function

Public Function SumAllCells(sSearch As String) As Currency
Dim rngTemp As Excel.Range
Dim rngCell As Excel.Range
Dim sTemp As String
Dim cRetVal As Currency
    cRetVal = 0
    Set rngTemp = wksEYT.Range("A:A")
    If GetCells(sSearch, rngTemp) <> 0 Then
        For Each rngCell In rngTemp
            sTemp = rngCell.Offset(0, 18).Value
            If IsNumeric(sTemp) Then
                cRetVal = cRetVal + CCur(sTemp)
            End If
        Next rngCell
    End If
    SumAllCells = cRetVal
End Function

Public Function LockCalc(rngArea As Excel.Range) As Long
Dim lRetVal As Long
Dim lCellVal As Long
Dim rngCell As Excel.Range
    lRetVal = 0
    lCellVal = 1
    For Each rngCell In rngArea
        If Not rngCell.Locked Then
            lRetVal = lRetVal + lCellVal
        End If
        lCellVal = lCellVal * 2
    Next rngCell
    LockCalc = lCellVal
End Function

Public Function ValSP_Data(rngCell As Excel.Range, Optional bIsZero As Boolean = False, Optional bIsNeg As Boolean = False) As String
Dim sTemp As String
    sTemp = rngCell.Value
    If Len(sTemp) = 0 Then
        ValSP_Data = "Value must be entered"    '1.1
        Exit Function
    End If
    If Not IsNumeric(sTemp) Then
        ValSP_Data = "Value should be numeric"  'not present in spec but will be needed
        Exit Function
    End If
    If CCur(sTemp) < 0 And Not bIsNeg And bIsZero Then  '1.3
        ValSP_Data = "Value must be greater than or equal to zero"
        Exit Function
    End If
    If CCur(sTemp) < 0 And Not bIsNeg And Not bIsZero Then  '1.4
        ValSP_Data = "Value must be greater than zero"
        Exit Function
    End If
    If CCur(sTemp) > 0 And bIsNeg And bIsZero Then
        ValSP_Data = "Value should be less than or equal to zero"   '1.5
        Exit Function
    End If
End Function

Public Function ValSP311(YearC As Currency, YearL As Currency) As Long
'Range Check: Flag if change from 2018-19 (ref data) to 2019-20 is not between -15% and 15% and is not between -100000 and +100000, or if expenditure is > 0 in 2019-20 and was 0 in 2018-19
    If YearC > 0 And YearL = 0 Or _
        Threshold(YearC, YearL, 115, 85) = 1 And Abs(YearC - YearL > 100000) Then
            ValSP311 = 1
    End If
End Function

Public Function ValSP1001(YearC As Currency, YearL As Currency) As Long
    ValSP1001 = Threshold(YearC, YearL, 110, 70)
End Function

Public Function ValSP1007(YearC As Currency, YearL As Currency)
Dim lRetVal As Long
    lRetVal = 0
    If YearC = 0 And YearL <> 0 Then
        lRetVal = 1
    End If
    ValSP1007 = lRetVal
End Function

Public Function ValSP509(YearC As Currency) As Long
Dim lRetVal As Long
    If YearC <> SumAllCells("EY8a") + SumAllCells("EY8b") + SumAllCells("EY9a") + SumAllCells("EY9b") Then
        lRetVal = 509
    Else
        lRetVal = 0
    End If
    ValSP509 = lRetVal
End Function

Public Function ValErrMsg(v311 As Integer, _
    v1001 As Integer, _
    Optional v1007 As Integer = 0, _
    Optional vMisc As Integer = 0) As String
Dim sRetVal As String
    sRetVal = vbNullString
    If v311 = 1 Then
        ValErrMsg = "3.1.1: Please check your entry for this line. The change from 2018-19 is outside the expected range (expected range between 15% and -15%) or the value is greater than 0 in 2019-20 and was 0 in 2018-19."
        Exit Function
    End If
    If v1007 = 1 Then
        ValErrMsg = "1007: Zero reported in 2019-20 but spend was reported in 2018-19"
        Exit Function
    End If
    If v1001 = 1 Then
        ValErrMsg = "1001: Check - Value in 2019-20 is between 10% greater or 30% less than in 2018-19"
        Exit Function
    End If
    Select Case vMisc
    Case 1013
        sRetVal = "1013: Please check your entry. The gross figure for 1.2.6 should not include Table 2 hospital education place funding. The expenditure amounts in line 1.2.6 and Table 2 are mutually exclusive."
    Case 1021
        sRetVal = "1021: Net value must be zero."
    Case 1022
        sRetVal = "1022: LA Table line 1.0.2 gross value must be greater than or equal to total place funding on Schools Table (net of any deductions)."
    Case 509
        sRetVal = "5.0.9: The total early years centrally retained spending in section 8 and 9 of the EY Table does not match row 1.3.1 in the LA Table."
    End Select
    ValErrMsg = sRetVal
End Function

'Schools table validation
Public Function ValSP11(sValue As String) As Boolean
    ValSP11 = Len(sValue) = 0
End Function

Public Function ValSP13(cValue As Currency) As Boolean
    ValSP13 = cValue < 0
End Function

Public Function ValSP25(sEstab As String) As Boolean
    ValSP25 = Not (sEstab Like "[1-7][0-9][0-9][0-9]")
End Function

Public Function ValSP211(sEstab As String, cBudget As Currency) As Boolean
    ValSP211 = (Len(sEstab) <> 4 And cBudget <> 0)
End Function

Public Function ValSP212(sSchoolName As String, cPlaces As Currency) As Boolean
    ValSP212 = (Len(sSchoolName) = 0 And cPlaces <> 0)
End Function

Public Function ValSP291(sOCFlag As String, sTestDate As String) As Boolean
    ValSP291 = (Len(sOCFlag) = 0 And Len(sTestDate) <> 0)
End Function

Public Function ValSP2101(dTestDate As Date) As Boolean
    If dTestDate > 0 Then
        ValSP2101 = (dTestDate < MinDate Or dTestDate > MaxDate)
    End If
End Function

Public Function ValSP1002(cPlaces As Currency) As Boolean
    ValSP1002 = cPlaces <= 0
End Function

Public Function ValSP1003(sSchoolType As String, cAprAug As Currency, cSepMar As Currency, cSenPlaces As Currency) As Boolean
Dim bRetVal As Boolean
Dim cTemp As Currency
    bRetVal = False
    If sSchoolType = "Special" Then
        cTemp = (cAprAug * 5 + cSepMar * 7) * 10000 / 12
        If cTemp <> cSenPlaces Then
            bRetVal = True
        End If
    End If
    ValSP1003 = bRetVal
End Function

Public Function ValSP1004(cAprAug As Currency, cSepMar As Currency, cAPPlaces As Currency) As Boolean
Dim bRetVal As Boolean
Dim cTemp As Currency
    bRetVal = False
    cTemp = (cAprAug * 5 + cSepMar * 7) * 10000 / 12
    If cTemp <> cAPPlaces Then
        bRetVal = True
    End If
    ValSP1004 = bRetVal
End Function

Public Function ValSP1005(cAprAug As Currency, cSepMar As Currency, cHospPlaces As Currency) As Boolean
Dim bRetVal As Boolean
Dim cTemp As Currency
    bRetVal = False
    cTemp = (cAprAug * 5 + cSepMar * 7) * 2000 / 12
    If cTemp > cHospPlaces Or cTemp * 25 < cHospPlaces Then
        bRetVal = True
    End If
    ValSP1005 = bRetVal
End Function

Public Function ValSP1011(sEstab As String, sOCFlag As String, sTotalFunding As String) As Boolean
Dim cTotalFunding As Currency
Dim bRetVal As Boolean
    If IsNumeric(sTotalFunding) Then
        cTotalFunding = CCur(sTotalFunding)
        bRetVal = Len(sEstab) <> 0 And (sOCFlag <> "Closed") And (cTotalFunding = 0)
    Else
        bRetVal = True
    End If
    ValSP1011 = bRetVal
End Function

Public Function ValSP1012(cPlaces As Currency, cFunding As Currency) As Boolean
    ValSP1012 = (cPlaces = 0) And (cFunding <> 0) _
        Or (cPlaces <> 0 And cFunding = 0)
End Function

Public Function ValSP1013() As Boolean
    'Placeholder for now, it seems to be an aggregated 'thing'
End Function

Public Function ValSP1020(sSchoolType As String, cTotalDeduction As Currency) As Boolean
    ValSP1020 = (sSchoolType = "Mainstream") And (cTotalDeduction <> 0)
End Function

Public Function ValSP1022() As Boolean
    ValSP1022 = False
End Function

Public Function ValSP1024(sSchoolType As String, cAprAug As Currency, cSepMar As Currency, cSENFunding As Currency) As Boolean
Dim bRetVal As Boolean
Dim cTemp As Currency
    bRetVal = False
    If sSchoolType = "Mainstream" Then
        cTemp = (cAprAug * 5 + cSepMar * 7) * 2000 / 12
        If cSENFunding < cTemp * 3 Or cSENFunding > cTemp * 5 Then
            bRetVal = True
        End If
    End If
    ValSP1024 = bRetVal
End Function

Public Function ValSP_SchoolErrorMessage(bDataEntry As Long, bVal11 As Boolean, Optional bVal12 As Boolean = False, _
    Optional bVal13 As Boolean = False, Optional bVal211 As Boolean = False, Optional bVal212 As Boolean = False, _
    Optional bVal25 As Boolean = False, Optional bVal2101 As Boolean = False, Optional bVal291 As Boolean = False, _
    Optional bVal1002 As Boolean = False, Optional bVal1003 As Boolean = False, Optional bVal1004 As Boolean = False, _
    Optional bVal1005 As Boolean = False, Optional bVal1011 As Boolean = False, Optional bVal1012 As Boolean = False, _
    Optional bVal1013 As Boolean = False, Optional bVal1020 As Boolean = False, Optional bVal1022 As Boolean = False, _
    Optional bVal1024 As Boolean = False) As String
Dim sRetVal As String
    If bDataEntry = 1 Then
        If bVal11 Then
            sRetVal = sRetVal & "1.1: Value is missing. Do not leave any cell blank." & vbNewLine
        End If
        If bVal12 Then
            sRetVal = sRetVal & "Q1.2: This DfE reference number has been duplicated |fffd| please check." & vbNewLine
        End If
        If bVal13 Then
            sRetVal = sRetVal & "1.3: You have entered a negative amount in this cell. Please check your entry as the value in this cell should be zero or a positive amount." & vbNewLine
        End If
        If bVal211 Then
            sRetVal = sRetVal & "2.11: The DfE reference number has not been entered." & vbNewLine
        End If
        If bVal212 Then
            sRetVal = sRetVal & "2.12: The school name has not been entered." & vbNewLine
        End If
        If bVal25 Then
            sRetVal = sRetVal & "2.5: The DfE reference number should be a number in the range: 1000-7999" & vbNewLine
        End If
        If bVal291 Then
            sRetVal = sRetVal & "2.9.1: Date Opening/Closing should be present when, and only when, School Opening/Closing (column (30)) indicator present." & vbNewLine
        End If
        If bVal2101 Then
            sRetVal = sRetVal & "2.10.1: Date Opening/Closing should be a date between 1 April 2019 and 31 March 2020." & vbNewLine
        End If
        If bVal1002 Then
            sRetVal = sRetVal & "1002: Please check your entries for this line.  The sum of places must be greater than zero." & vbNewLine
        End If
        If bVal1003 Then
            sRetVal = sRetVal & "1003: You have entered an amount which is outside the expected tolerance. Please check your SEN place funding." & vbNewLine
        End If
        If bVal1004 Then
            sRetVal = sRetVal & "1004: You have entered an amount which is outside the expected tolerance. Please check your AP place funding." & vbNewLine
        End If
        If bVal1005 Then
            sRetVal = sRetVal & "1005: Please check your entry. Hospital place funding is outside of the expected tolerance." & vbNewLine
        End If
        If bVal1011 Then
            sRetVal = sRetVal & "1011: Value is missing. Do not leave any cell blank. Instead, please enter a zero if that is the amount your authority budgeted for this category." & vbNewLine
        End If
        If bVal1012 Then
            sRetVal = sRetVal & "1012: Data in places but not in funding or vice versa." & vbNewLine
        End If
        If bVal1013 Then
            sRetVal = sRetVal & "1013: Please check your entry. The gross figure for 1.2.6 should not include Table 2 hospital education place funding. The expenditure amounts in line 1.2.6 and Table 2 are mutually exclusive." & vbNewLine
        End If
        If bVal1020 Then
            sRetVal = sRetVal & "1020: Total deduction for services to maintained schools formerly funded through the ESG should be zero for mainstream schools." & vbNewLine
        End If
        If bVal1022 Then
            sRetVal = sRetVal & "1022: LA Table line 1.0.2 gross value must be greater than or equal to total place funding on Schools Table (net of any deductions)." & vbNewLine
        End If
        If bVal1024 Then
            sRetVal = sRetVal & "1024: You have entered an amount which is outside the expected tolerance. Please check your SEN place funding." & vbNewLine
        End If
    End If
    ValSP_SchoolErrorMessage = sRetVal
End Function

'Early Years Validation

Public Function ValSP321(cTotalFunding As Currency) As Boolean
    ValSP321 = (cTotalFunding < 10000) Or (cTotalFunding > 4000000)
End Function

Public Function ValSP500(sNumUnits As String, sTypeUnits As String) As Boolean
    ValSP500 = Len(sNumUnits) <> 0 And Len(sTypeUnits) = 0 _
        Or Len(sNumUnits) = 0 And Len(sTypeUnits) <> 0
End Function

Public Function ValSP507(sTypeUnit As String, sUnitValue As String) As Boolean
Dim cUnitValue As Currency
    If Len(sUnitValue) <> 0 And IsNumeric(sUnitValue) Then
        cUnitValue = CCur(sUnitValue)
        ValSP507 = (sTypeUnit = "PerHour" And (cUnitValue <= 0 Or cUnitValue > 20))
    End If
End Function

Public Function ValSP508(sTypeUnit As String, sUnitValue As String) As Boolean
Dim cUnitValue As Currency
    If Len(sUnitValue) <> 0 And IsNumeric(sUnitValue) Then
        cUnitValue = CCur(sUnitValue)
        ValSP508 = (sTypeUnit = "PerChild" And (cUnitValue <= 100 Or cUnitValue > 11400))
    End If
End Function

Public Function ValSP5010(sNumUnits As String) As Boolean
Dim cNumUnits As Currency
    If Len(sNumUnits) <> 0 And IsNumeric(sNumUnits) Then
        cNumUnits = CCur(sNumUnits)
        ValSP5010 = (cNumUnits < 1 Or cNumUnits > 99000000)
    End If
End Function

Public Function ValSP5011(sTypeUnit As String, sUnitValue As String) As Boolean
Dim cUnitValue As Currency
    If Len(sUnitValue) <> 0 And IsNumeric(sUnitValue) Then
        cUnitValue = CCur(sUnitValue)
        ValSP5011 = (sTypeUnit = "LumpSum" And (cUnitValue <= 1 Or cUnitValue > 1000000))
    End If
End Function

Public Function ValSP5012(sTypeUnit As String, sUnitValue As String) As Boolean
Dim cUnitValue As Currency
    If Len(sUnitValue) <> 0 And IsNumeric(sUnitValue) Then
        cUnitValue = CCur(sUnitValue)
        ValSP5012 = (sTypeUnit = "LumpSum" And (cUnitValue <= 0 Or cUnitValue <> Int(cUnitValue)))
    End If
End Function

Public Function ValSP5013() As Boolean
'There must be at least one description row in section 'EYSFF (three and four year olds) Base Rate(s) per hour, per provider type'.
    'Agreement to leave this out, likely to be fragile.  Is in Collect anyway.
End Function

Public Function ValSP5014() As Boolean
'There must be at least one description row in section 'Supplements (please provide in written format a short explanation of your supplement payments)' sub heading 'Deprivation (Mandatory)'.
    'Agreement to leave this out, likely to be fragile.  Is in Collect anyway.
End Function

Public Function ValSP1009(sValue As String) As Boolean
    ValSP1009 = Len(sValue) = 0
End Function

'The following two work on aggregated data, and so return the error message directly
Public Function ValSP1015(sValue As String) As String
Dim sRetVal As String
    sRetVal = vbNullString
    If IsNumeric(sValue) Then
        If (CCur(sValue) < 0.105) Then
            sRetVal = "1015: The supplementarys cap in the EY table cannot be more than 10%."
        End If
    End If
    ValSP1015 = sRetVal
End Function

Public Function ValSP1023(sValue As String) As String
'Pass-through rate must be greater than or equal to 94.95%.
Dim sRetVal As String
Dim cValue As Currency
    sRetVal = vbNullString
    If IsNumeric(sValue) Then
        If (CCur(sValue) < 0.9495) Then
            sRetVal = sRetVal & "1023: Pass-through rate is too low. The rate must be at least 95%." & vbNewLine
        End If
    End If
    ValSP1023 = sRetVal
End Function

Public Function ValSP14(cValue As Currency) As String
Dim sRetVal As String
    If cValue <= 0 Then
        sRetVal = "1.4: You have entered either a negative or zero amount in this cell. Please check your entry as the value in this cell should be greater than zero."
    End If
    ValSP14 = sRetVal
End Function

Public Function ValSP_EYErrorMessage(Optional bVal321 As Boolean = False, Optional bVal500 As Boolean = False, _
    Optional bVal507 As Boolean = False, Optional bVal508 As Boolean = False, Optional bVal5010 As Boolean = False, _
    Optional bVal5011 As Boolean = False, Optional bVal5012 As Boolean = False, Optional bVal1009 As Boolean = False, _
    Optional bVal1010 As Boolean = False)

Dim sRetVal As String
'    If bDataEntry = 1 Then
    If bVal321 Then
        sRetVal = sRetVal & "3.2.1: The total funding for this setting should be between |fffd|10,000 and |fffd|4,000,000." & vbNewLine
    End If
    If bVal500 Then
        sRetVal = sRetVal & "5.0.0: Unit Values and Number of Units must be both present when data is present in the variable/row." & vbNewLine
    End If
    If bVal507 Then
        sRetVal = sRetVal & "5.0.7: Unit Value is outside the expected per hour range of 0 to |fffd|20 for Early Years spend. Please leave blank if not applicable." & vbNewLine
    End If
    If bVal508 Then
        sRetVal = sRetVal & "5.0.8: Unit Value is outside the expected per pupil range of |fffd|100 to |fffd|11400 for Early Years spend. Please leave blank if not applicable." & vbNewLine
    End If
'    If bVal509 Then
'        sRetVal = sRetVal & "5.0.9: The total early years centrally retained spending in section 8 and 9 of the EY Table does not match row 1.3.1 in the LA Table." & vbNewLine
'    End If
    If bVal5010 Then
        sRetVal = sRetVal & "5.0.10: The Number of Units is outside the expected range of 1 to 99,000,000 for Early Years spend. Please leave blank if not applicable." & vbNewLine
    End If
    If bVal5011 Then
        sRetVal = sRetVal & "5.0.11: Unit Value is outside the expected range of |fffd|1 to |fffd|1,000,000 for a lump sum spend on Early Years. Please leave blank if not applicable." & vbNewLine
    End If
    If bVal5012 Then
        sRetVal = sRetVal & "5.0.12: If Unit Applied = Lump sum then the number of Units must be a whole number greater than zero. Please leave blank if not applicable." & vbNewLine
    End If
    If bVal1009 Then
        sRetVal = sRetVal & "1009: Please enter a description." & vbNewLine
    End If
    If bVal1010 Then
        sRetVal = sRetVal & "1010: Please enter data, or remove this line if it is not going to be used." & vbNewLine
    End If
    ValSP_EYErrorMessage = sRetVal
End Function
Attribute VB_Name = "frmModifyDataAreas"
Attribute VB_Base = "0{C51816A1-1BA1-4FDA-AE02-B1A58DF98C73}{0E292B7F-1F44-4BD3-9296-17EF015655C1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub cboDataArea_Change()
Dim bFlag As Boolean
    bFlag = IsNull(cboDataArea.Value)
'    Debug.Print cboDataArea
    Me.cmdAdd.Enabled = Not bFlag
    Me.cmdDelete.Enabled = Not bFlag
End Sub

Private Sub cmdAdd_Click()
    If Not IsNull(cboDataArea.Value) Then
        AddDataRow (cboDataArea.Value)
    End If
End Sub

Private Sub cmdDelete_Click()
    If Not IsNull(cboDataArea.Value) Then
        DeleteDataRow (cboDataArea.Value)
    End If
End Sub

Private Sub cmdExit_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
'Populate combo box
Dim lCount As Long
Dim rngTemp As Excel.Range
    Set rngTemp = wksAdmin.Range("A1")
    While Len(rngTemp.Text) <> 0
        With Me.cboDataArea
            .AddItem rngTemp.Text
            .List(.ListCount - 1, 1) = rngTemp.Offset(0, 1).Text
        End With
        Set rngTemp = rngTemp.Offset(1, 0)
        DoEvents
    Wend
End Sub
Attribute VB_Name = "wksAdmin"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksCover"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksEYT"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksLA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksPrevLA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wksSchools"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' ^tZ+I
' +Uj[
' {br*Z
' tjwu

INQUEST-PP=macro
