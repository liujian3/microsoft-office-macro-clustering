Attribute VB_Name = "Fields"
Option Private Module

Public TableName As String   'REQ, TEST, TESTSET
Public ArrayFieldsReq
Public ArrayFieldsReqSelected
Public OutputFields
Public Const PWD As String = "dallasatg-qct"

Sub x_GetRegFields()
    Call x_GetFieldValues("REQ", "REQ", "Requirements")
End Sub

Sub x_GetTestFields()
    Call x_GetFieldValues("TEST", "TEST", "Test Plan", "DESSTEPS")
End Sub

Sub x_GetTestSetFields()
    Call x_GetFieldValues("TESTSET", "TEST", "Test Set", "DESSTEPS")
End Sub

Function x_GetFieldValues(Group As String, TableName As String, WKSheet As String, Optional TableName2 As String)

Dim Field 'As TDField
Dim FieldList, FieldList2 'As List
Dim FieldProp 'As FieldProperty
Dim ArrayCounter
Dim Row
Dim ArrayFieldsReq
Dim ArrayFieldsReqSelected

    Call Declare_Variables
    Call x_TDconnect

    ArrayCounter = 0
    If TableName2 <> "" Then
        Set FieldList = TDconnection.Fields(TableName)  'If 2 table names
        Set FieldList2 = TDconnection.Fields(TableName2)
        ReDim ArrayFieldsReq(FieldList.Count + FieldList2.Count - 1, 2) As String
        For Each Field In FieldList 'Get Available Fieleds
            With Field
                Set FieldProp = Field.Property
                If True Then 'fieldProp.IsActive Then
                    ArrayFieldsReq(ArrayCounter, 0) = FieldProp.DBColumnName
                    ArrayFieldsReq(ArrayCounter, 1) = FieldProp.UserLabel
                    ArrayFieldsReq(ArrayCounter, 2) = FieldProp.IsRequired
                    ArrayCounter = ArrayCounter + 1
                End If
            End With
        Next Field
        ArrayCounter = ArrayCounter - 1 'Take 1 away for the last loop
        For Each Field In FieldList2 'Get Available Fieleds
            With Field
                Set FieldProp = Field.Property
                If True Then 'fieldProp.IsActive Then
                    ArrayFieldsReq(ArrayCounter, 0) = FieldProp.DBColumnName
                    ArrayFieldsReq(ArrayCounter, 1) = FieldProp.UserLabel
                    ArrayFieldsReq(ArrayCounter, 2) = FieldProp.IsRequired
                    ArrayCounter = ArrayCounter + 1
                End If
            End With
        Next Field
        
    Else
        Set FieldList = TDconnection.Fields(TableName)  'If only one Tablename
        ReDim ArrayFieldsReq(FieldList.Count - 1, 2) As String
        
        For Each Field In FieldList 'Get Available Fieleds
            With Field
                Set FieldProp = Field.Property
                If True Then 'fieldProp.IsActive Then
                    ArrayFieldsReq(ArrayCounter, 0) = FieldProp.DBColumnName
                    ArrayFieldsReq(ArrayCounter, 1) = FieldProp.UserLabel
                    ArrayFieldsReq(ArrayCounter, 2) = FieldProp.IsRequired
                    ArrayCounter = ArrayCounter + 1
                End If
            End With
        Next Field
    End If
    
    Call x_TDdisconnect
    
    'Get the selected listboxes already present
    ColumnCount = Sheets(WKSheet & " Download").UsedRange.Columns.Count: Row = 0
    ReDim ArrayFieldsReqSelected(ColumnCount, 1)
    For x = 1 To ColumnCount    'Get Current Selected Fields
        ArrayFieldsReqSelected(x - 1, 0) = Sheets(WKSheet & " Download").Cells(1, x).Value
        ArrayFieldsReqSelected(x - 1, 1) = Sheets(WKSheet & " Download").Cells(2, x).Value
    Next x
    
    'Populate the listboxes
    Row = 0: RowSel = 0: Found = 0
    For x = 0 To UBound(ArrayFieldsReq)
        For y = 0 To UBound(ArrayFieldsReqSelected) - 1
            If ArrayFieldsReq(x, 0) = ArrayFieldsReqSelected(y, 0) And ArrayFieldsReq(x, 1) = ArrayFieldsReqSelected(y, 1) Then
                Found = 1
                UpdateFields.ListBox_Selected.AddItem
                If ArrayFieldsReq(x, 2) = "True" Then  'If required true
                    UpdateFields.ListBox_Selected.List(RowSel, 0) = ArrayFieldsReqSelected(y, 1) & " (" & ArrayFieldsReqSelected(y, 0) & ") *"
                Else    'Required set to false
                    UpdateFields.ListBox_Selected.List(RowSel, 0) = ArrayFieldsReqSelected(y, 1) & " (" & ArrayFieldsReqSelected(y, 0) & ")"
                End If
                UpdateFields.ListBox_Selected.List(RowSel, 1) = RowSel + 1
                RowSel = RowSel + 1
                Exit For
            End If
        Next y
        If Found = 0 Then
            If ArrayFieldsReq(x, 1) = "" Then
                'Removed to Avoid displaying fields not used by QC
                'UpdateFields.ListBox_Available.AddItem
                'UpdateFields.ListBox_Available.List(Row, 0) = ArrayFieldsReq(x, 0) & " (" & ArrayFieldsReq(x, 0) & ")"
                'If ArrayFieldsReq(x, 2) = "True" Then   'Add the Required Field if present.
                '    UpdateFields.ListBox_Available.List(Row, 1) = "x"
                'End If
                'Row = Row + 1
            Else
                UpdateFields.ListBox_Available.AddItem
                
                If ArrayFieldsReq(x, 2) = "True" Then   'Add the Required Field if present.
                    UpdateFields.ListBox_Available.List(Row, 0) = ArrayFieldsReq(x, 1) & " (" & ArrayFieldsReq(x, 0) & ") *"
                Else
                    UpdateFields.ListBox_Available.List(Row, 0) = ArrayFieldsReq(x, 1) & " (" & ArrayFieldsReq(x, 0) & ")"
                End If
                Row = Row + 1
            End If
        End If
        Found = 0
    Next x
    
    UpdateFields.Label_Title.Caption = "Update " & WKSheet & " Fields"
    UpdateFields.FieldGroup.Caption = Group
    UpdateFields.Show

End Function

Attribute VB_Name = "Functions"
'Option Explicit
Option Private Module

Public WorkbookName As String                   'Retains the Current Workbook Name
Public CurrentSheet As String                   'Retains the Current Sheet Name
Public ButtonCheck As Integer                   'Retains the last button clicked
Public SaveCheck As Boolean                     'Have settings be saved before close
Public ColorButton As Integer                   'Holds color button clicked, 1 for Required 2 for Optional
Public ColorRequired As Long                    'Save Required background color value
Public ColorOptional As Long                    'Save Optional background color value
Public ListBoxValues() As Variant               'Contains all data on the list boxes
Public UpdateBoxValue() As Variant              'Temp value on list box before update is made
'Public Const PWD As String = "dallasatg-qct"    'Worksheet/workbook password


Private Declare PtrSafe Function FindWindow Lib "User32" _
Alias "FindWindowA" ( _
ByVal lpClassName As String, _
ByVal lpWindowName As String) As Long
 
Private Declare PtrSafe Function GetWindowLong Lib "User32" _
Alias "GetWindowLongA" ( _
ByVal hWnd As Long, _
ByVal nIndex As Long) As Long
 
Private Declare PtrSafe Function SetWindowLong Lib "User32" _
Alias "SetWindowLongA" (ByVal hWnd As Long, _
ByVal nIndex As Long, _
ByVal dwNewLong As Long) As Long
 
Private Declare PtrSafe Function DrawMenuBar Lib "User32" ( _
ByVal hWnd As Long) As Long
 
Sub RemoveCaption(objForm As Object)
     
    Dim lStyle          As Long
    Dim hMenu           As Long
    Dim mhWndForm       As Long
     
    If Val(Application.Version) < 9 Then
        mhWndForm = FindWindow("ThunderXFrame", objForm.Caption) 'XL97
    Else
        mhWndForm = FindWindow("ThunderDFrame", objForm.Caption) 'XL2000+
    End If
    lStyle = GetWindowLong(mhWndForm, -16)
    lStyle = lStyle And Not &HC00000
    SetWindowLong mhWndForm, -16, lStyle
    DrawMenuBar mhWndForm
     
End Sub



Function GetNodesList(ByVal Node, ByRef NodesList) 'Returns a NodesList array for all children of a given node of a Test Plan tree.
    On Error Resume Next
    Dim i
    For i = 1 To Node.Count 'Run on all children nodes
        Dim NewUpper
        NewUpper = UBound(NodesList) + 1 'Add more space to dynamic array
        
        ReDim Preserve NodesList(NewUpper)
        NodesList(NewUpper) = Node.Child(i).Path 'Add node path to array
       
        If Node.Child(i).Count >= 1 Then 'If current node has a child then get path on child nodes too.
            Call GetNodesList(Node.Child(i), NodesList)
        End If
    Next
End Function

Function GetTestSetNodesList(ByVal Node, ByRef NodesList, ByRef NodesIDList) 'Returns a NodesList array for all children of a given node of a Test Set Tree
    Dim i
    For i = 1 To Node.SubNodes.Count 'Run on all children nodes
        Dim NewUpper
        NewUpper = UBound(NodesList) + 1 'Add more space to dynamic array
        
        ReDim Preserve NodesList(NewUpper)
        ReDim Preserve NodesIDList(NewUpper)
        NodesList(NewUpper) = Node.SubNodes.Item(i).Path 'Add node path to array
        NodesIDList(NewUpper) = Node.SubNodes.Item(i).NodeID 'Add node path to array
       
        If Node.SubNodes.Item(i).Count >= 1 Then 'If current node has a child then get path on child nodes too.
            Call GetTestSetNodesList(Node.SubNodes.Item(i), NodesList, NodesIDList)
        End If
    Next
End Function

Function ArraySort(ByRef ArrayName) 'Bubble Sort a 2 dimensional array on 3 columns
Dim SortColumn1, SortColumn2, SortColumn3 As Integer
SortColumn1 = 0: SortColumn2 = 1: SortColumn3 = 2

For i = LBound(ArrayName, 1) To UBound(ArrayName, 1) - 1
    For j = LBound(ArrayName, 1) To UBound(ArrayName, 1) - 1
        Condition1 = ArrayName(j, SortColumn1) > ArrayName(j + 1, SortColumn1)
        Condition2 = ArrayName(j, SortColumn1) = ArrayName(j + 1, SortColumn1) And _
            ArrayName(j, SortColumn2) > ArrayName(j + 1, SortColumn2)
        Condition3 = ArrayName(j, SortColumn1) = ArrayName(j + 1, SortColumn1) And _
            ArrayName(j, SortColumn2) = ArrayName(j + 1, SortColumn2) And _
            ArrayName(j, SortColumn3) > ArrayName(j + 1, SortColumn3)
        
        If Condition1 Or Condition2 Or Condition3 Then
            For y = LBound(ArrayName, 2) To UBound(ArrayName, 2)
                t = ArrayName(j, y)
                ArrayName(j, y) = ArrayName(j + 1, y)
                ArrayName(j + 1, y) = t
            Next y
        End If
    Next
Next

End Function

Public Sub Decode_HTML()
    
    Dim objData As DataObject
    Dim sHTML As String
   
    ColumnCount = ActiveSheet.UsedRange.Columns.Count
    RowCount = ActiveSheet.UsedRange.Rows.Count
    Application.EnableEvents = False
    
    For y = 1 To ColumnCount
        For x = 3 To RowCount
            If LCase(Left(Cells(x, y).Text, 6)) = "<html>" Then
                If InStr(1, Cells(x, y).Text, "<br>", vbTextCompare) > 0 Then
                    Cells(x, y).Value = Replace(Cells(x, y).Value, "<br>", "{;;;}")
                End If
                Set objData = New DataObject
                sHTML = Cells(x, y).Text
                sHTML = Replace(sHTML, "<html>", "<html><style>br{mso-data-placement:same-cell;}</style>")
    
                objData.SetText sHTML
                objData.PutInClipboard
    
                Cells(x, y).PasteSpecial xlPasteAll
                Cells(x, y).Value = Replace(Cells(x, y).Value, "{;;;}", "" & Chr(10) & "")
                'Cells(x, y).Value = Replace(Cells(x, y).Value, "{;;;}", " " & Chr(10) & " ")
                'ActiveCell.Replace What:="{;;;}", Replacement:=" " & Chr(10) & " "
            End If
        Next x
    Next y
    
    Application.EnableEvents = True
    
End Sub

Private Sub Remove_HTML()
Dim CellRange As Range
Dim Obj As Object
Dim RowCount As Integer
    
    Set Obj = CreateObject("vbscript.regexp")
    Obj.IgnoreCase = True
    Obj.Global = True
    Obj.Pattern = "</?[a-z][a-z0-9]*[^<>]*>"
    
    RowCount = ActiveSheet.UsedRange.Rows.Count
    Range(Cells(3, 8), Cells(RowCount, 8)).Select
    For Each CellRange In Selection
            CellRange.Value = Replace(CellRange.Value, "<br>", vbCrLf)
            CellRange.Value = Obj.Replace(CellRange.Value, "")
    Next CellRange
    
End Sub

Public Function HexToLong2()
  Dim HexToLong As Long
  Dim sHex As String
  sHex = "00E0E0E0"
  
  If LenB(sHex) = 0 Then Exit Function  ' don't allow zero length string
  HexToLong = CLng("&H" & sHex)
  MsgBox HexToLong
End Function
Attribute VB_Name = "Logo"
Attribute VB_Base = "0{44E997EA-F04A-445F-9EBC-A817FEC39AE1}{F3FA1577-2D59-4B4B-8DD6-C03FF84FCB7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public DomainChangeValue As Boolean
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Sub ComboBox_Domain_Change()
    If DomainChangeValue = True Then
        Dim a As String
        Dim i, j As Integer
        
        Dim TDconnection 'return the tdconnection object.
        Set TDconnection = CreateObject("tdapiole80.tdconnection")
        TDconnection.InitConnectionEx QCurl '<-- change me.
        TDconnection.Login QClogin, QCpassword
        If (TDconnection.LoggedIn <> True) Then
            a = MsgBox("Quality Center User Authentication Failed", vbOKOnly, "Connection Error...")
            Sheets("Settings").Cells(2, 3).Value = ""   'Clear Invalid Password
            Exit Sub
        End If
                
        Me.ComboBox_Project.Clear
        For j = 1 To TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Count
            Me.ComboBox_Project.AddItem TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Item(j)
        Next
        Me.ComboBox_Project.Locked = False
        Me.ComboBox_Project.Value = TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Item(1)
    
        'Disconnect/Logout of QC
        TDconnection.Disconnect: TDconnection.Logout: TDconnection.ReleaseConnection
        Set TDconnection = Nothing
        
        
    End If
End Sub

Private Sub LoginButton_Click()
                
    Dim a As String
    
    'Initial connection to QC
    Dim TDconnection 'return the tdconnection object.
    Set TDconnection = CreateObject("tdapiole80.tdconnection")
    TDconnection.InitConnectionEx QCurl '<-- change me.
    TDconnection.Login QClogin, QCpassword
    If (TDconnection.LoggedIn <> True) Then
        a = MsgBox("Quality Center User Authentication Failed", vbOKOnly, "Connection Error...")
        Sheets("Settings").Cells(2, 3).Value = ""   'Clear Invalid Password
        Exit Sub
    End If
        
    'Connect to Domain Project - Set values
    Dim sDomain, sProject As String
    sDomain = UCase(Me.ComboBox_Domain.Value)
    sProject = UCase(Me.ComboBox_Project.Value)
    TDconnection.Connect sDomain, sProject
    If (TDconnection.Connected <> True) Then
        a = MsgBox("Quality Center Project Failed to Connect to :" & sProject, vbOKOnly, "Connection Error...")
        Sheets("Settings").Cells(2, 3).Value = ""   'Clear Invalid Password
        Exit Sub
    End If
    
    'Disconnect/Logout of QC
    TDconnection.Disconnect: TDconnection.Logout: TDconnection.ReleaseConnection
    Set TDconnection = Nothing
    
    'Set Domain and Projects
    Sheets("Settings").Cells(5, 4).Value = sDomain
    Sheets("Settings").Cells(6, 4).Value = sProject
    Sheets("Settings").Cells(12, 4).Value = sDomain
    Sheets("Settings").Cells(13, 4).Value = sProject
    Sheets("Settings").Cells(19, 4).Value = sDomain
    Sheets("Settings").Cells(20, 4).Value = sProject
    ActiveSheet.Protect Password:="qcdownload"
    Unload Me
    
End Sub

Private Sub UserForm_Initialize()
    Call RemoveCaption(Me)  'caption removed
    formHandle = FindWindow(vbNullString, Me.Caption) 'Move window forms
    'Application.OnTime Now + TimeValue("00:00:02"), "y_KillForm"
    'Label1.Caption = ActiveWorkbook.BuiltinDocumentProperties.Item("Title")
    'Label2.Caption = ActiveWorkbook.BuiltinDocumentProperties.Item("Revision Number")
    'Label4.Caption = ActiveWorkbook.BuiltinDocumentProperties.Item("Author")
    Me.TextBox_url = Sheets("Settings").Cells(2, 1).Value
End Sub

Private Sub UserForm_QueryClose(cancel As Integer, CloseMode As Integer)
    If CloseMode = 0 Then
      cancel = True
    End If
End Sub

Private Sub OKButton_Click()
    
    Call Declare_Variables
    
    Dim i As Integer
    
    If Me.TextBox_url = "" Then
        MsgBox "Please enter a Quality Center URL"
    Else
        If Me.TextBox_login = "" Then
            MsgBox "Please enter your Quality Center Username"
        Else
            If Me.TextBox_password = "" Then
                MsgBox "Please enter your Quality Center Password"
            Else
                On Error Resume Next
                QClogin = Me.TextBox_login.Value
                QCpassword = Me.TextBox_password.Value
                QCurl = Me.TextBox_url.Value
                Sheets("settings").Unprotect Password:="qcdownload"
                Sheets("settings").Cells(2, 1).Value = QCurl
                Sheets("settings").Cells(2, 2).Value = QClogin
                Sheets("Settings").Cells(2, 3).Value = QCpassword
                
                Dim TDconnection 'return the tdconnection object.
                Set TDconnection = CreateObject("tdapiole80.tdconnection")
                TDconnection.InitConnectionEx QCurl '<-- change me.
                TDconnection.Login QClogin, QCpassword
                
                If (TDconnection.LoggedIn <> True) Then 'Check connection
                    Dim a As String
                    a = MsgBox("Quality Center User Authentication Failed" & Chr(13) & Chr(13) & "        Invalid Username or Password", vbOKOnly, "Connection Error...")
                    Sheets("Settings").Cells(2, 3).Value = ""   'Clear Invalid Password
                    Set TDconnection = Nothing
                    Exit Sub
                End If
                
                DomainChangeValue = False
                Me.ComboBox_Domain.Clear
                For i = 1 To TDconnection.VisibleDomains.Count 'Populate Domain names in Combo Box
                    Me.ComboBox_Domain.AddItem TDconnection.VisibleDomains.Item(i)
                Next
                Me.ComboBox_Domain.Value = TDconnection.VisibleDomains.Item(1)
                Me.ComboBox_Domain.Locked = False
                DomainChangeValue = True
                
                Me.ComboBox_Project.Clear
                Dim j As Integer
                For j = 1 To TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Count
                    Me.ComboBox_Project.AddItem TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Item(j)
                Next
                Me.ComboBox_Project.Value = TDconnection.VisibleProjects(Me.ComboBox_Domain.Value).Item(1)
                Me.ComboBox_Project.Locked = False
                
                'Disconnect/Logout of QC
                TDconnection.Disconnect: TDconnection.Logout: TDconnection.ReleaseConnection
                Set TDconnection = Nothing
            End If
        End If
    End If
End Sub

Private Sub CancelButton_Click()
    Me.TextBox_password.Value = ""
    Sheets("Settings").Unprotect Password:="qcdownload"
    Sheets("Settings").Cells(2, 3).Value = ""   'Clear Password
    Sheets("Settings").Protect Password:="qcdownload"
    
    'Disconnect/Logout of QC - Not Required Here, no connection active
    'TDconnection.Disconnect: TDconnection.Logout: TDconnection.ReleaseConnection
    'Set TDconnection = Nothing
    
    Unload Me
    End
End Sub

Attribute VB_Name = "MainCode"
'''''''''''''''''''''''''''''''''''''''''''''''
'                                             '
'           QC Download to Excel Tool         '
'                   v 5.0                     '
'          Designed by Thomas H Kendall       '
'            thomaskendall@gmail.com          '
'                                             '
'''''''''''''''''''''''''''''''''''''''''''''''
Option Private Module

Public TDconnection
Public sUrl
Public sUserName
Public sPassword
Public sDomain
Public sProject

Public ReqPath As String
Public TestCasePath As String
Public TestSetPath As String
Public TestSetName As String
Public Line As Integer
Public ErrorMsg As Boolean
Public Const PWD As String = "qcdownload"
Public ModifySheet As Boolean
Public array1 As Variant
Public array2 As Variant
Public array3 As Variant
Public array4 As Variant
Public ArrayTS1 As Variant
Public ArrayTS2 As Variant
Public ArrayTS3 As Variant
Public ArrayRL1 As Variant
Public ArrayRL2 As Variant
Public ArrayRL3 As Variant
Public arrayRL4 As Variant
Public pathway As String
Public TGstartRow As Integer
Public TGstartCol As Integer
Public Tgrouprow As Integer
Public TestSetNode As Boolean
Public QClogin As String
Public QCpassword As String
Public QCurl As String


Public Sub Declare_Variables()

    Dim SlashCheck As String
    
    'If No login was successful, Execute logo form
    If Sheets("Settings").Cells(2, 3).Value = "" Then
        If Logo.Visible = False Then
            Logo.Show
        End If
    End If
    
    'QC Login Info
    sUrl = Sheets("Settings").Cells(2, 1).Value
    sUserName = Sheets("Settings").Cells(2, 2).Value
    sPassword = Sheets("Settings").Cells(2, 3).Value
    sDomain = Sheets("Settings").Cells(12, 4).Value
    sProject = Sheets("Settings").Cells(13, 4).Value
    
    Sheets("Settings").Select
    ErrorMsg = False
    
    'Requirements Variables
    Line = 5        'Starting Line of Settings tab, Domain line
    ReqPath = "Requirements\" & Range("D" & Line + 2).Text                         'Requirement Path
        If Left(ReqPath, 1) <> "\" Then                'Check for \ ReqPath
            ReqPath = ReqPath
        End If
        If Right(ReqPath, 1) = "\" Then                'Check for \ ReqPath
            ReqPath = Left(ReqPath, (Len(ReqPath) - 1))
        End If
        
    'TestCase Variables
    Line = 12        'Starting Line of Settings tab, Domain line
    TestCasePath = "Subject\" & Range("D" & Line + 2).Text                       'Test Case Path
        If Left(TestCasePath, 1) <> "\" Then               'Check for \ on TestPath - Left
            TestCasePath = TestCasePath
        End If
        If Right(TestCasePath, 1) = "\" Then               'Check for \ on TestPath - Right
            TestCasePath = Left(TestCasePath, (Len(TestCasePath) - 1))
        End If
        
    'TestSet Variables
     Line = 19        'Starting Line of Settings tab, Domain line
    TestSetName = Range("D" & Line + 3).Text
    TestSetPath = "Root\" & Range("D" & Line + 2).Text                      'Test Case Path
        If Left(TestSetPath, 1) <> "\" Then               'Check for \ on TestSetPath - Left
            TestSetPath = TestSetPath
        End If
        If Right(TestSetPath, 1) = "\" Then               'Check for \ on TestSetPath - Right
            TestSetPath = Left(TestSetPath, (Len(TestSetPath) - 1))
        End If
                    
End Sub

Sub Clear_Requirements()

    On Error GoTo ErrHandler:

    Call Declare_Variables
    Dim strString As String
    
    Application.ScreenUpdating = False
    Sheets("Requirements Download").Select
    ActiveWorkbook.Unprotect Password:=PWD
    Sheets("Requirements Download").Unprotect Password:=PWD
        
    Rows("2:2").Select                      'Clear Filters
        Selection.AutoFilter
        Selection.AutoFilter
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
        Range("A1").Select
    End If
    ActiveWorkbook.Protect Password:=PWD
    Sheets("Settings").Select
    Cells(1, 1).Select
    Application.ScreenUpdating = True
    
ErrHandler:
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Clear Requirements")
    
End Sub

Sub Clear_Testcases()

 On Error GoTo ErrHandler:

    Call Declare_Variables
    Dim strString As String
        
    Application.ScreenUpdating = False
    Sheets("Test Plan Download").Select
    ActiveWorkbook.Unprotect Password:=PWD
    Sheets("Test Plan Download").Unprotect Password:=PWD
    
    Rows("2:2").Select                  'Clear Filters
        Selection.AutoFilter
        Selection.AutoFilter
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
        Range("A1").Select
    End If
    
    ActiveWorkbook.Protect Password:=PWD
    Sheets("Settings").Select
    Cells(1, 1).Select
    Application.ScreenUpdating = True
    
ErrHandler:
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Clear Testcases")
    
End Sub

Sub Clear_TestSets()

 On Error GoTo ErrHandler:

    Call Declare_Variables
    Dim strString As String
        
    Application.ScreenUpdating = False
    Sheets("Test Set Download").Select
    ActiveWorkbook.Unprotect Password:=PWD
    Sheets("Test Set Download").Unprotect Password:=PWD
    
    Rows("2:2").Select                  'Clear Filters
        Selection.AutoFilter
        Selection.AutoFilter
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
        Range("A1").Select
    End If
    
    ActiveWorkbook.Protect Password:=PWD
    Sheets("Settings").Select
    Cells(1, 1).Select
    Application.ScreenUpdating = True
    
ErrHandler:
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Clear Testcases")
    
End Sub


Sub z_ErrorHandler(SubName As String)
    
Dim OLApp As Object
Dim OLEml As Object
    
If Worksheets("Settings").Cells(24, 1).Value = "True" Then

    On Error GoTo OutlookClosed:
        Set OLApp = GetObject(, "Outlook.Application")
        
    On Error GoTo ErrHandler:
        Set OLApp = CreateObject("Outlook.Application")
        Set OLEml = OLApp.CreateItem(olMailItem)
        
        If Err <> 0 Then
            If Right(Err.Description, 45) = "exceeded simultaneous SESSIONS_PER_USER limit" Then
                MsgBox "Another user is currently accessing the database at this time." & _
                    Chr(13) & "Please try again in a few minutes.", vbExclamation, "Database UserID Session Full"
            Else
                Set OLEml = OLApp.CreateItem(olMailItem)
                WBRevisionNum = ActiveWorkbook.BuiltinDocumentProperties("Revision number").Value
                WBFilePath = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
    
                With OLEml
                    .Recipients.Add "thomaskendall@gmail.com"
                    .ReplyRecipients.Add "thomaskendall@gmail.com"
                    .Subject = "Download Quality Center Tool Produced an Error - " & SubName
                    .Body = "Download Quality Center Tool Produced an Error - " & SubName _
                        & Chr(13) & "Error Number: " & Err.Number & Chr(13) & _
                        "Error Description: " & Err.Description _
                        & Chr(13) & Chr(13) & "Tool FilePath: " & WBFilePath _
                        & Chr(13) & "Tool Revision Number: " & WBRevisionNum
                    .Attachments.Add ActiveWorkbook.FullName
                End With
                OLEml.Send
                MsgBox Err.Description
                Err.Clear
            End If
        End If
End If
    
OutlookClosed:
    End
ErrHandler:
    End
End Sub


Sub z_EmailChecker(SubName As String)

Dim OLApp As Object
Dim OLEml As Object
    
If Worksheets("Settings").Cells(24, 1).Value = "True" Then

    On Error GoTo OutlookClosed:
        Set OLApp = GetObject(, "Outlook.Application")
        
    On Error GoTo ErrHandler:
        Set OLApp = CreateObject("Outlook.Application")
        Set OLEml = OLApp.CreateItem(olMailItem)
    
        WBRevisionNum = ActiveWorkbook.BuiltinDocumentProperties("Revision number").Value
        WBFilePath = ActiveWorkbook.Path & "\" & ActiveWorkbook.Name
                    
        With OLEml
            .Recipients.Add "thomaskendall@gmail.com"
            .ReplyRecipients.Add "thomaskendall@gmail.com"
            .Subject = "Download Quality Center Tool Executed - " & SubName
            .Body = "Download Quality Center Tool - " & SubName _
                & Chr(13) & Chr(13) & "Tool FilePath: " & WBFilePath _
                & Chr(13) & "Tool Revision Number: " & WBRevisionNum
        End With
        OLEml.Send
End If
Exit Sub
    
OutlookClosed:
    End
ErrHandler:
    Call z_ErrorHandler("Email Checker")
End Sub

Public Sub z_UpdateCheckBoxes()

    Dim cBox As CheckBox
    
    ActiveSheet.Unprotect Password:=PWD
    Select Case Application.Caller
        Case "Check Box 58"         'Test Set Folder value
            Set cBox = ActiveSheet.CheckBoxes(Application.Caller)
            If cBox = 1 Then
                Sheets("Settings").Cells(23, 1).Value = "TRUE"
                Sheets("Settings").Cells(22, 4).Value = ""
            Else
                Sheets("settings").Cells(23, 1).Value = "FALSE"
            End If
        Case "Check Box 57"         'Email Coder
            Set cBox = ActiveSheet.CheckBoxes(Application.Caller)
            If cBox = 1 Then
                Sheets("settings").Cells(24, 1).Value = "TRUE"
            Else
                Sheets("settings").Cells(24, 1).Value = "FALSE"
            End If
        Case "Check Box 60"         'Enable Tree View
            Set cBox = ActiveSheet.CheckBoxes(Application.Caller)
            If cBox = 1 Then
                Sheets("settings").Cells(25, 1).Value = "TRUE"
            Else
                Sheets("settings").Cells(25, 1).Value = "FALSE"
            End If
    End Select
    
    ActiveSheet.Protect Password:=PWD
    
End Sub


Sub DownloadTestCases_API()
    
    On Error GoTo Err:
    
    Call Declare_Variables
    Call x_TDconnect
    
    Dim WSresults
    
    Sheets("Test Plan Download").Select
    Set WSresults = Excel.ActiveSheet
    ActiveWorkbook.Unprotect Password:=PWD
    WSresults.Unprotect Password:=PWD
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
    End If

    Dim TreeMgr, TestTree, TestFactory, TestList
    
    Set TreeMgr = TDconnection.TreeManager
    Set TestTree = TreeMgr.NodeByPath(TestCasePath) 'specify the folder path in testplan, all the tests under that folder will be exported.
    
    Dim NodesList()
    ReDim Preserve NodesList(0)
    NodesList(0) = TestTree.Path

    Call GetNodesList(TestTree, NodesList) 'Get Node and Sub nodes list
    
    Dim Row, TestCase
    Row = 3
    
    For Each Node In NodesList
    On Error Resume Next
        Set TestTree = TreeMgr.NodeByPath(Node)
        Set TestFactory = TestTree.TestFactory
        Set TestList = TestFactory.newlist("")
        'get a list of all from node.
        'iterate through all the tests.
    
        For Each TestCase In TestList
            Dim DesignStepFactory, DesignStep, DesignStepList
            Set DesignStepFactory = TestCase.DesignStepFactory
            Set DesignStepList = DesignStepFactory.newlist("")
            If DesignStepList.Count > 0 Then 'Only pull test cases with steps
                For Each DesignStep In DesignStepList 'save a specified set of fields.
                    For x = 1 To WSresults.UsedRange.Columns.Count
                        If WSresults.Cells(1, x).Value = "TS_SUBJECT" Then
                            WSresults.Cells(Row, x).Value = TestCase.Field("TS_SUBJECT").Path
                        ElseIf Left(WSresults.Cells(1, x).Value, 2) = "TS" Then
                            WSresults.Cells(Row, x).Value = TestCase.Field(Cells(1, x).Value)
                        ElseIf Left(WSresults.Cells(1, x).Value, 2) = "DS" Then
                            WSresults.Cells(Row, x).Value = DesignStep.Field(Cells(1, x).Value)
                        End If
                    Next x
                Row = Row + 1
                Next
            End If
        Next
    Next

    WSresults.Range("A3").Select
    WSresults.Range("A2").Select

    ActiveWorkbook.Protect Password:=PWD
    WSresults.Protect Password:=PWD, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFiltering:=True
    
    Set WSresults = Nothing
    Set DesignStepList = Nothing
    Set DesignStepFactory = Nothing
    Set TestList = Nothing
    Set TestFactory = Nothing
    Set TestTree = Nothing
    Set TreeMgr = Nothing

    Call x_TDdisconnect
    
    
    'Remove HTML Code
    'Call Decode_HTML
    
    Call z_EmailChecker("TestCase Download")
    End
    
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("TestCase Download")
    End
End Sub


Sub DownloadRequirementsAPI()

    'On Error GoTo Err:
    
    Call Declare_Variables
    Call x_TDconnect
    
    Dim strNodeByPath, WSresults
    Sheets("Requirements Download").Select
    Set WSresults = Excel.ActiveSheet
    ActiveWorkbook.Unprotect Password:=PWD
    WSresults.Unprotect Password:=PWD
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
    End If
        
    '---Requirements download ---
    Dim rsTC As Recordset
    Const delimChar As String = "\"
    
    Dim rFact
    Dim theReq, ParentReq
    Dim reqList
    Dim NodeArray() As String, PathArray() As String
    Dim WorkingDepth As Integer
    Dim RowCount As Long
    
    fullPath = ReqPath
    RowCount = 3
    
    'Trim the fullPath and strip leading and trailing delimiters
        fullPath = Trim(fullPath)
        Dim pos%, ln%
        pos = InStr(1, fullPath, delimChar)
        If pos = 1 Then
            fullPath = Mid(fullPath, 2)
        End If
        ln = Len(fullPath)
        pos = InStr(ln - 1, fullPath, delimChar)
        If pos > 0 Then
            fullPath = Mid(fullPath, 1, ln - 1)
        End If
    ' Get an array of requirements, and the length
    ' of the path
        NodeArray = Split(fullPath, delimChar)
        WorkingDepth = LBound(NodeArray)
    
    ' Walk down the tree
        Set rFact = TDconnection.ReqFactory
        For WorkingDepth = LBound(NodeArray) To UBound(NodeArray)
        'First time, find under the root (-1)
        'After that, under the previous requirement found: ParentReq.ID
            If WorkingDepth = LBound(NodeArray) Then
                Set reqList = rFact.Find(-1, "RQ_REQ_NAME", NodeArray(WorkingDepth), TDREQMODE_FIND_EXACT)
            Else
                Set reqList = rFact.Find(ParentReq.ID, "RQ_REQ_NAME", NodeArray(WorkingDepth), TDREQMODE_FIND_EXACT)
            End If
            ' Delete parent. Each loop has to find it again.
            Set ParentReq = Nothing
            Dim strItem, reqID&, strID$, thePath$
            For Each strItem In reqList
                ' The List returned from ReqFactory.Find is a List
                ' of strings of format ID,Name.
                ' For example "9,Products/Services On Sale"
                ' Extract the ID from the string by splitting the
                ' string at the comma.
                pos = InStr(strItem, ",")
                strID = Mid(strItem, 1, pos - 1)
                ' Convert the ID to a long, and get the object
                reqID = CLng(strID)
                Set theReq = rFact.Item(reqID)
                'Now check that the object is at the correct depth.
                'If so, we've found the requirement. On the next loop,
                'we'll look from here down.
                thePath = theReq.Path
                PathArray = Split(thePath, "\")
                
                If UBound(PathArray) = WorkingDepth Then
                    Set ParentReq = theReq
                    Exit For
                End If

            Next strItem
            If ParentReq Is Nothing Then Exit For
        Next WorkingDepth
    
    'On Error Resume Next
    Dim childReq
    Set ReqListParent = rFact.GetChildrenList(ParentReq.ID)
    For Each Item In ReqListParent
        If Item.TypeId = "Folder" Then
            With Item
                For x = 1 To WSresults.UsedRange.Columns.Count
                    If WSresults.Cells(1, x).Value = "RQ_REQ_PATH" Then
                        WSresults.Cells(RowCount, x).Value = .Path
                    Else
                        WSresults.Cells(RowCount, x).Value = .Field(Cells(1, x).Value)
                    End If
                Next x
            End With
        Else
            With Item
                For x = 1 To WSresults.UsedRange.Columns.Count
                    If WSresults.Cells(1, x).Value = "RQ_REQ_PATH" Then
                        WSresults.Cells(RowCount, x).Value = .Path
                    Else
                        WSresults.Cells(RowCount, x).Value = .Field(Cells(1, x).Value)
                    End If
                Next x
            End With
        End If
        RowCount = RowCount + 1
    Next
    
    '-----------------
    WSresults.Range("A3").Select
    WSresults.Range("A2").Select

    ActiveWorkbook.Protect Password:=PWD
    WSresults.Protect Password:=PWD, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFiltering:=True
    
    Set WSresults = Nothing
    Set DesignStepList = Nothing
    Set DesignStepFactory = Nothing
    Set TestList = Nothing
    Set TestFactory = Nothing
    Set TestTree = Nothing
    Set TreeMgr = Nothing

    Call x_TDdisconnect
    Call z_EmailChecker("Requirement Download")
    End
    
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End

End Sub



Sub DownloadTestSetCases_API()
    
    On Error GoTo Err:
    
    Call Declare_Variables
    Call x_TDconnect
    
    Sheets("Test Set Download").Select
    Set WSresults = Excel.ActiveSheet
    
    ActiveWorkbook.Unprotect Password:=PWD
    WSresults.Unprotect Password:=PWD
    
    CleanRow = ActiveSheet.UsedRange.Rows.Count
    If CleanRow > 2 Then
        Rows("3:" & CleanRow).Delete Shift:=xlUp
    End If
    
    If Sheets("Settings").Cells(23, 1).Value = "False" Then
        If TestSetName = "" Then
            a = MsgBox("Please enter a test set name to download", vbOKOnly, "Error...")
            End
        End If
    End If
    
    Dim TestSetFact, tsTreeMgr, TestSetFlt, TestFiler, TestFilter2
    Dim TestSetFilter, TestSetList, TestList, TestCase, DesignStepFactory, DesignStep, DesignStepList, TestSetID
    Dim NodesList()
    Dim Row: Row = 3
    
    Set TestSetFact = TDconnection.TestSetFactory           ' Get the TDConnection.TestSetFactory
    Set TestFact = TDconnection.TestFactory                 ' Get the test factory object
    
    If Sheets("Settings").Cells(23, 1).Value = "False" Then 'If Test Set only is enabled add this filter.
        'Pull the Test Set from the list, but need to do the reverse
        Set TestSetFactFilter = TestSetFact.Filter
        TestSetFactFilter.Filter("CY_FOLDER_ID") = Chr(34) & TestSetPath & Chr(34)
        TestSetFactFilter.Filter("CY_CYCLE") = Chr(34) & TestSetName & Chr(34)
    Else
        'Grab the NodesList to drill down for each node.
        Set TreeMgr = TDconnection.TestSetTreeManager
        Set TestTree = TreeMgr.NodeByPath(TestSetPath) 'specify the folder path in testplan, all the tests under that folder will be exported.
        ReDim Preserve NodesList(0): Dim NodesListFilter As String
        NodesList(0) = TestTree.Path
        Call GetNodesList(TestTree, NodesList) 'Get Node and Sub nodes list
        
        For x = 0 To UBound(NodesList) 'Build string for NodesListFilter to Grab
            If NodesList(x) <> "" Then
                If x = 0 Then
                    NodesListFilter = Chr(34) & NodesList(x) & Chr(34)
                ElseIf x > 0 Then 'And x < UBound(NodesList) Then
                    NodesListFilter = NodesListFilter & " OR " & Chr(34) & NodesList(x) & Chr(34)
                End If
            End If
        Next x
        
        Set TestSetFactFilter = TestSetFact.Filter
        TestSetFactFilter.Filter("CY_FOLDER_ID") = NodesListFilter
    End If
    
    Set TestFilter = TestFact.Filter
    TestFilter.SetXFilter "TEST-TESTSET", True, TestSetFactFilter.Text
    Set TestSetList = TestFilter.newlist
    
    For Each TestCase In TestSetList
        Set DesignStepFactory = TestCase.DesignStepFactory
        Set DesignStepList = DesignStepFactory.newlist("")
        If DesignStepList.Count > 0 Then 'Only pull test cases with steps
            For Each DesignStep In DesignStepList 'save a specified set of fields.
                For x = 1 To WSresults.UsedRange.Columns.Count
                    If WSresults.Cells(1, x).Value = "TS_SUBJECT" Then
                        WSresults.Cells(Row, x).Value = TestCase.Field("TS_SUBJECT").Path
                    ElseIf Left(WSresults.Cells(1, x).Value, 2) = "TS" Then
                        WSresults.Cells(Row, x).Value = TestCase.Field(Cells(1, x).Value)
                    ElseIf Left(WSresults.Cells(1, x).Value, 2) = "DS" Then
                        WSresults.Cells(Row, x).Value = DesignStep.Field(Cells(1, x).Value)
                    End If
                Next x
                WSresults.Cells(Row, 1).Select
                Row = Row + 1
            Next
        End If
        Set DesignStepFactory = Nothing
        Set DesignStepList = Nothing
    Next TestCase
    
    
    WSresults.Range("A3").Select
    WSresults.Range("A2").Select

    ActiveWorkbook.Protect Password:=PWD
    WSresults.Protect Password:=PWD, AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFiltering:=True
    
    Set WSresults = Nothing
    Set DesignStepList = Nothing
    Set DesignStepFactory = Nothing
    Set TestList = Nothing
    Set TestFactory = Nothing
    Set TestTree = Nothing
    Set TreeMgr = Nothing

    Call x_TDdisconnect
    Call z_EmailChecker("TestCase Download")
    End
    
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("TestCase Download")
    End
End Sub

Public Sub x_TDconnect()

    'If No login was successful, Execute logo form
    If Sheets("Settings").Cells(2, 3).Value = "" Then
        Logo.Show
    End If
    
    'Dim TDconnection 'return the tdconnection object.
    Set TDconnection = CreateObject("tdapiole80.tdconnection")
    
    TDconnection.ReleaseConnection 'Before connecting, release connection if already active.
    TDconnection.InitConnectionEx sUrl 'Connect to url
    TDconnection.Login sUserName, sPassword 'Login with user/password
    If (TDconnection.LoggedIn <> True) Then
        MsgBox "qc user authentication failed"
        WScript.Quit
    End If
    
    TDconnection.Connect sDomain, sProject
    If (TDconnection.Connected <> True) Then
        MsgBox "qc project failed to connect to " & sProject
        WScript.Quit
    End If
    
    TDconnection.IgnoreHtmlFormat = True
    
End Sub

Public Sub x_TDdisconnect()
    TDconnection.Disconnect
    TDconnection.Logout
    TDconnection.ReleaseConnection
    Set TDconnection = Nothing
End Sub

Attribute VB_Name = "ReqTree"
Attribute VB_Base = "0{9768AEFB-8087-4A54-8DDE-AD36337AE19C}{D603839E-6477-46FD-B87E-50D91A6EDF8F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ApplyButton_Click()
    
    Sheets("Settings").Cells(7, 4).Value = pathway
    pathway = ""
    On Error Resume Next
    array1 = Nothing: array2 = Nothing: array3 = Nothing
    ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
    Call x_TDdisconnect
    Unload Me
End Sub
Private Sub DeleteCellButton_Click()
    Sheets("Settings").Cells(7, 4).Value = ""
    Call x_TDdisconnect
    Unload Me
End Sub

Private Sub ExitButton_Click()
    On Error Resume Next
    array1 = Nothing: array2 = Nothing: array3 = Nothing
    ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
    Call x_TDdisconnect
    Unload Me
End Sub

Private Sub TreeView1_Expand(ByVal Node As MSComctlLib.Node)
    
    Dim ReqTree, ReqTree2
On Error GoTo Err
    Set ReqFact = TDconnection.ReqFactory
    Set ReqTree = ReqFact.GetChildrenList(Right(Left(Node.Key, Len(Node.Key) - 1), Len(Node.Key) - 2))
    
    'Level 1
    Dim i
    ReDim array1(ReqTree.Count, 3) As String
    
    For i = 1 To ReqTree.Count 'Run on all children nodes
        array1(i, 0) = ReqTree.Item(i).Name
        array1(i, 1) = ReqTree.Item(i).ID
        array1(i, 2) = ReqTree.Item(i).ParentId
    Next
    
    'Level 2
    ArrayCount = 0
    For i = 1 To UBound(array1, 1)
        Set ReqTree2 = ReqFact.GetChildrenList(array1(i, 1))
        ArrayCount = ArrayCount + ReqTree2.Count
    Next i
    
    ReDim array2(ArrayCount, 3) As String  'Reset array value
    Dim ArrayCount2
    ArrayCount2 = 1
    For i = 1 To UBound(array1, 1)  'Populate array2
        Set ReqTree2 = ReqFact.GetChildrenList(array1(i, 1))
        For u = 1 To ReqTree2.Count
            array2(ArrayCount2, 0) = ReqTree2.Item(u).Name
            array2(ArrayCount2, 1) = ReqTree2.Item(u).ID
            array2(ArrayCount2, 2) = ReqTree2.Item(u).ParentId
            array2(ArrayCount2, 3) = ReqTree2.Item(u).RequirementType.ID
            ArrayCount2 = ArrayCount2 + 1
        Next u
    Next i
    
    If Node.Image = 1 Then
        Node.Image = 2
    Else
        Node.Image = 3
    End If
    
    With Me.TreeView1.Nodes
        For x2 = 1 To UBound(array2, 1)
            If array2(x2, 3) = 1 Then
                .Add relative:=Chr(34) & array2(x2, 2) & Chr(34), relationship:=tvwChild, _
                Key:=Chr(34) & array2(x2, 1) & Chr(34), Text:=array2(x2, 0), Image:=1
            Else
                .Add relative:=Chr(34) & array2(x2, 2) & Chr(34), relationship:=tvwChild, _
                Key:=Chr(34) & array2(x2, 1) & Chr(34), Text:=array2(x2, 0), Image:=3
            End If
        Next x2
    End With
    
    pathway = Node.fullPath
    If Right(Sheets("Settings").Cells(7, 4).Value, 1) = "\" Then
        Me.Label2.Caption = "Requirements Path: " & Node.fullPath
    Else
        Me.Label2.Caption = "Requirements Path: " & Node.fullPath
    End If
    Node.Selected = True
    Exit Sub
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End
    
End Sub

Private Sub TreeView1_Collapse(ByVal Node As MSComctlLib.Node)
    Node.Image = 1
End Sub

Private Sub UserForm_Initialize()
   
    Dim n As Node
    
    Call RemoveCaption(Me)
    formHandle = FindWindow(vbNullString, Me.Caption)
    'Tgrouprow = Sheets("Settings").Cells(9, 3).Value + 3  ' C9 + 3 gives you TestGroup row
    With Me
        .TreeView1.LineStyle = tvwRootLines
        .TreeView1.ImageList = Me.ImageList1
    End With
    Call x_TDconnect
    Call TreeView_Populate
    Set n = Me.TreeView1.Nodes(1) 'Selects the first item in the tree view at load
    Treeview1_NodeClick n
    Set n = Nothing
    Application.Cursor = xlDefault
    
End Sub

Private Sub TreeView_Populate()

    Dim array1, array2, ReqTree, ReqTree2, i, ArrayCount, ArrayCount2, ArrayRL1, ArrayRL2, ArrayRL3

    Set ReqFact = TDconnection.ReqFactory
    Set ReqTree = ReqFact.GetChildrenList(0)
    
    'Level 1
    ReDim array1(ReqTree.Count - 1, 3) As String
    ArrayCount = 0: ArrayCount2 = 0
    ReDim ArrayRL1(0) As Variant: ReDim ArrayRL2(0) As Variant: ReDim ArrayRL3(0) As Variant
    For i = 0 To ReqTree.Count - 1 'Run on all children nodes
        array1(i, 0) = ReqTree.Item(i + 1).Name
        array1(i, 1) = ReqTree.Item(i + 1).ID
        array1(i, 2) = ReqTree.Item(i + 1).ParentId
        
        Set ReqTree2 = ReqFact.GetChildrenList(array1(i, 1)) 'Get Counter for array2 variable
        Dim NewUpper
        NewUpper = UBound(ArrayRL1) + ReqTree2.Count 'Add more space to dynamic array
        ReDim Preserve ArrayRL1(NewUpper): ReDim Preserve ArrayRL2(NewUpper): ReDim Preserve ArrayRL3(NewUpper)
        For u = 0 To ReqTree2.Count - 1
            ArrayRL1(ArrayCount2) = ReqTree2.Item(u + 1).Name
            ArrayRL2(ArrayCount2) = ReqTree2.Item(u + 1).ID
            ArrayRL3(ArrayCount2) = ReqTree2.Item(u + 1).ParentId
            ArrayCount2 = ArrayCount2 + 1
        Next u
    Next
    ReDim array2(ArrayCount2 - 1, 3) As String  'Repopulate the Array2 with the found values outside the loop
    For i = 0 To ArrayCount2 - 1
        array2(i, 0) = ArrayRL1(i)
        array2(i, 1) = ArrayRL2(i)
        array2(i, 2) = ArrayRL3(i)
    Next i
    
    Call ArraySort(array1)
    Call ArraySort(array2)
    
    Dim somevalue As String
    With Me.TreeView1.Nodes
        .Clear
        For x1 = 0 To UBound(array1, 1)
            .Add Key:=Chr(34) & array1(x1, 1) & Chr(34), Text:=array1(x1, 0), Image:=1
            For x2 = 0 To UBound(array2, 1)
                'somevalue = ArrayRL3(x2)
                'If somevalue = array1(x1, 1) Then
                If array2(x2, 2) = array1(x1, 1) Then
                    .Add relative:=Chr(34) & array2(x2, 2) & Chr(34), relationship:=tvwChild, _
                    Key:=Chr(34) & array2(x2, 1) & Chr(34), Text:=array2(x2, 0), Image:=1
                End If
            Next x2
        Next x1
    End With
    
    Set ReqTree = Nothing
    Set ReqTree2 = Nothing
    
End Sub

Private Sub Treeview1_NodeClick(ByVal Node As MSComctlLib.Node)
    Me.Label2.Caption = "Requirements Path: " & Node.fullPath
    pathway = Node.fullPath
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    'If TreeView checkbox is checked then do the following
    If Sheets("Settings").Cells(25, 1).Value = True Then
        'Download Requirements from Requirements Path
        If Target.AddressLocal(False, False) = "D7:E7" Then
            Call Declare_Variables
            ReqTree.Show
        'Download Test Cases from Test Plan Path
        ElseIf Target.AddressLocal(False, False) = "D14:E14" Then
            Call Declare_Variables
            TestPlanTree.Show
        'Download Test Set from Test Lab Path
        ElseIf Target.AddressLocal(False, False) = "D21:E21" _
            Or Target.AddressLocal(False, False) = "D22:E22" Then
            Call Declare_Variables
            TestSetTree.Show
        End If
    End If
        
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet98"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet99"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TestPlanTree"
Attribute VB_Base = "0{65C93012-EF0F-4E23-9BF6-CF09F7AE1B2B}{A1B52D32-5ABA-43CD-A427-E6D1159144D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ApplyButton_Click()
    Sheets("Settings").Cells(14, 4).Value = pathway  'Cell D7 on Settings sheet
    pathway = ""
    On Error Resume Next
    array1 = Nothing: array2 = Nothing: array3 = Nothing
    ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
    Call x_TDdisconnect
    Unload Me
End Sub
Private Sub DeleteCellButton_Click()
    Sheets("Settings").Cells(14, 4).Value = ""
    Unload Me
End Sub

Private Sub ExitButton_Click()
    On Error Resume Next
    array1 = Nothing: array2 = Nothing: array3 = Nothing
    ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
    Call x_TDdisconnect
    Unload Me
End Sub

Private Sub TreeView1_Expand(ByVal Node As MSComctlLib.Node)
    
    Dim check As Variant
    
    Dim array3, array4, i, ArrayCount, ArrayCount2

    Set TreeMgr = TDconnection.TreeManager
    Set TestTree = TreeMgr.NodeById(Right(Left(Node.Key, Len(Node.Key) - 1), Len(Node.Key) - 2)) 'specify the folder path in testplan, all the tests under that folder will be exported.
    
    'Level 2 Count
    ReDim array3(Node.Children - 1, 3) As String
    
    For i = 0 To UBound(array3, 1) 'Run on all children nodes
        array3(i, 0) = TestTree.Child(i + 1).Name
        array3(i, 1) = TestTree.Child(i + 1).NodeID
        array3(i, 2) = TestTree.NodeID
    Next
    
    'Level 3
    ArrayCount = 0
    For i = 0 To UBound(array3, 1)
        Set TestTree2 = TreeMgr.NodeById(array3(i, 1))
        ArrayCount = ArrayCount + TestTree2.Count
    Next i
    
    ReDim array4(ArrayCount, 3) As String 'Reset array value
    ArrayCount2 = 0
    For i = 0 To UBound(array3, 1)
        Set TestTree2 = TreeMgr.NodeById(array3(i, 1))
        For u = 0 To TestTree2.Count - 1
            array4(ArrayCount2, 0) = TestTree2.Child(u + 1).Name
            array4(ArrayCount2, 1) = TestTree2.Child(u + 1).NodeID
            array4(ArrayCount2, 2) = TestTree2.NodeID
            ArrayCount2 = ArrayCount2 + 1
        Next u
        Set TestTree2 = Nothing
    Next i
    
    Node.Image = 2
    
    On Error Resume Next
    With Me.TreeView1.Nodes
        For x2 = 0 To UBound(array4, 1)
            .Add relative:=Chr(34) & array4(x2, 2) & Chr(34), relationship:=tvwChild, _
            Key:=Chr(34) & array4(x2, 1) & Chr(34), Text:=array4(x2, 0), Image:=1
        Next x2
    End With
    
    pathway = Node.fullPath
    If Right(Sheets("Settings").Cells(7, 4).Value, 1) = "\" Then
        Me.Label2.Caption = "Test Plan Path: " & Node.fullPath
    Else
        Me.Label2.Caption = "Test Plan Path: " & Node.fullPath
    End If
    Node.Selected = True
    Exit Sub
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End
End Sub

Private Sub TreeView1_Collapse(ByVal Node As MSComctlLib.Node)
    Node.Image = 1
End Sub

Private Sub UserForm_Initialize()
   
    Dim n As Node
On Error GoTo Err
    Call RemoveCaption(Me)
    formHandle = FindWindow(vbNullString, Me.Caption)
    'Tgrouprow = Sheets("Settings").Cells(9, 3).Value + 3  ' C9 + 3 gives you TestGroup row
    With Me
        .TreeView1.LineStyle = tvwRootLines
        .TreeView1.ImageList = Me.ImageList1
    End With
    Call x_TDconnect
    Call TreeView_Populate
    Set n = Me.TreeView1.Nodes(1) 'Selects the first item in the tree view at load
    Treeview1_NodeClick n
    Set n = Nothing
    Application.Cursor = xlDefault
    Exit Sub
    
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End
End Sub

Private Sub TreeView_Populate()
    
    Dim TreeMgr, TestTree, TestTree2, i, array1, array2
    
    Set TreeMgr = TDconnection.TreeManager
    Set TestTree = TreeMgr.NodeByPath("Subject\") 'specify the folder path in testplan, all the tests under that folder will be exported.
    
    'Level 1
    ReDim array1(TestTree.Count - 1, 3) As String
    For i = 0 To TestTree.Count - 1 'Run on all children nodes
        array1(i, 0) = TestTree.Child(i + 1).Name
        array1(i, 1) = TestTree.Child(i + 1).NodeID
        array1(i, 2) = TestTree.Father.NodeID
    Next
    Call ArraySort(array1) 'Sort array before next level
    
    'Level 2
    ArrayCount = 0
    For i = 0 To UBound(array1, 1)
        Set TestTree2 = TreeMgr.NodeById(array1(i, 1))
        ArrayCount = ArrayCount + TestTree2.Count
    Next i
    
    ReDim array2(ArrayCount, 3) As String 'Reset array value
    Dim ArrayCount2
    ArrayCount2 = 0
    For i = 0 To UBound(array1, 1)  'Populate array2
        Set TestTree2 = TreeMgr.NodeById(array1(i, 1))
        For u = 0 To TestTree2.Count - 1
            array2(ArrayCount2, 0) = TestTree2.Child(u + 1).Name
            array2(ArrayCount2, 1) = TestTree2.Child(u + 1).NodeID
            array2(ArrayCount2, 2) = TestTree2.NodeID
            ArrayCount2 = ArrayCount2 + 1
        Next u
    Next i
    Call ArraySort(array2)
    
    On Error Resume Next
    With Me.TreeView1.Nodes
        .Clear
        For x1 = 0 To UBound(array1, 1)
            .Add Key:=Chr(34) & array1(x1, 1) & Chr(34), Text:=array1(x1, 0), Image:=1
            For x2 = 0 To UBound(array2, 1)
                If array2(x2, 2) = array1(x1, 1) Then
                    .Add relative:=Chr(34) & array1(x1, 1) & Chr(34), relationship:=tvwChild, _
                    Key:=Chr(34) & array2(x2, 1) & Chr(34), Text:=array2(x2, 0), Image:=1
                End If
            Next x2
        Next x1
    End With
    
End Sub

Private Sub Treeview1_NodeClick(ByVal Node As MSComctlLib.Node)
        
    pathway = Node.fullPath
    If Right(Sheets("Settings").Cells(7, 4).Value, 1) = "\" Then
        Me.Label2.Caption = "Test Plan Path: " & Node.fullPath
    Else
        Me.Label2.Caption = "Test Plan Path: " & Node.fullPath
    End If
    
End Sub

Function TestPlan_GetNodesList(ByVal Node, ByRef NodesList) 'Returns a NodesList array for all children of a given node of a Test Plan tree.
    On Error Resume Next
    Dim i
    For i = 1 To Node.Count 'Run on all children nodes
        Dim NewUpper
        NewUpper = UBound(NodesList) + 1 'Add more space to dynamic array
        
        ReDim Preserve NodesList(NewUpper)
        NodesList(NewUpper) = Node.Child(i).Path 'Add node path to array
       
        'If Node.Child(i).Count >= 1 Then 'If current node has a child then get path on child nodes too.
        '    Call GetNodesList(Node.Child(i), NodesList)
        'End If
    Next
End Function

Attribute VB_Name = "TestSetTree"
Attribute VB_Base = "0{D45ED461-9549-4BCC-BB40-BBF3C90FD7B6}{04818EE4-54A8-40CF-AC3E-6968C7D0AA90}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label1_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label2_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label3_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label4_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ApplyButton_Click()

    Dim TestSetName, TestSetPath As String
    
    If TestSetNode = True Then
        TestSetName = Right(pathway, Len(pathway) - InStrRev(pathway, "\")) 'Get test Set Name
        TestSetPath = Left(pathway, InStrRev(pathway, "\") - 1)             'Get Test Set path
        Sheets("Settings").Cells(21, 4).Value = TestSetPath 'Set Path
        Sheets("Settings").Cells(22, 4).Value = TestSetName 'Set Name
        On Error Resume Next
        array1 = Nothing: array2 = Nothing: array3 = Nothing
        ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
        Call x_TDdisconnect
        Unload Me   'Clear Variables
        pathway = ""
    Else
        TestSetPath = pathway          'Get Test Set path
        Sheets("Settings").Cells(21, 4).Value = TestSetPath 'Set Path
        Sheets("Settings").Cells(22, 4).Value = ""
        On Error Resume Next
        array1 = Nothing: array2 = Nothing: array3 = Nothing
        ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
        Call x_TDdisconnect
        Unload Me   'Clear Variables
        pathway = ""
    End If

End Sub

Private Sub ExitButton_Click()
    On Error Resume Next
    array1 = Nothing: array2 = Nothing: array3 = Nothing
    ArrayTS1 = Nothing: ArrayTS2 = Nothing: ArrayTS3 = Nothing
    Call x_TDdisconnect
    Unload Me
End Sub
Private Sub DeleteCellButton_Click()
     Sheets("Settings").Cells(21, 4).Value = ""
     Sheets("Settings").Cells(22, 4).Value = ""
     Call x_TDdisconnect
     Unload Me
End Sub

Private Sub TreeView1_Expand(ByVal Node As MSComctlLib.Node)
    
    Dim TreeMgr, TestTree, TestTree2, TestSets, TestSetsList, ArrayCount, ArrayCount2, ArrayCount3
On Error GoTo Err
    Set TreeMgr = TDconnection.TestSetTreeManager
    Set TestTree = TreeMgr.NodeById(Right(Left(Node.Key, Len(Node.Key) - 1), Len(Node.Key) - 2)) 'specify the folder path in testplan, all the tests under that folder will be exported.

    'Level 1 Test Folders
    Dim i, array1, array2, array3, ArrayTS1, ArrayTS2, ArrayTS3
    
    ArrayCount = 0: ArrayCount2 = 0
    For i = 0 To TestTree.SubNodes.Count - 1  'Get the Count to ReDim array1
        For j = 0 To TestTree.SubNodes.Item(i + 1).SubNodes.Count - 1
            ArrayCount = ArrayCount + 1
        Next j
    Next i
    ReDim array1(ArrayCount, 3) As String
    
    For i = 0 To TestTree.SubNodes.Count - 1  'Write to array 1
        For j = 0 To TestTree.SubNodes.Item(i + 1).SubNodes.Count - 1
            array1(ArrayCount2, 0) = TestTree.SubNodes.Item(i + 1).SubNodes.Item(j + 1).Name
            array1(ArrayCount2, 1) = TestTree.SubNodes.Item(i + 1).SubNodes.Item(j + 1).NodeID
            array1(ArrayCount2, 2) = TestTree.SubNodes.Item(i + 1).NodeID
            ArrayCount2 = ArrayCount2 + 1
        Next j
    Next i
        
    'Level 2 Test Sets for Test Folders
    Set TestSets = TDconnection.TestSetFactory
    ReDim ArrayTS1(0) As Variant
    ReDim ArrayTS2(0) As Variant
    ReDim ArrayTS3(0) As Variant
    ArrayCount3 = 1
    For i = 1 To TestTree.SubNodes.Count  'Count test sets under each folder first
        Set tsFolder = TreeMgr.NodeById(TestTree.SubNodes.Item(i).NodeID)
        Set TestSetsList = tsFolder.FindTestSets("") 'add to next loop
        If TestSetsList Is Nothing Then
        Else
            Dim NewUpper
            NewUpper = UBound(ArrayTS1) + TestSetsList.Count 'Add more space to dynamic array
            ReDim Preserve ArrayTS1(NewUpper)
            ReDim Preserve ArrayTS2(NewUpper)
            ReDim Preserve ArrayTS3(NewUpper)
            For j = 1 To TestSetsList.Count
                ArrayTS1(ArrayCount3) = TestSetsList.Item(j).ID 'Add node path to array
                ArrayTS2(ArrayCount3) = TestSetsList.Item(j).Name
                ArrayTS3(ArrayCount3) = TestSetsList.Item(j).TestSetFolder.NodeID 'Add node path to array
                ArrayCount3 = ArrayCount3 + 1
            Next j
        End If
    Next i
        
    Node.Image = 2
    
On Error Resume Next

    With Me.TreeView1.Nodes 'Export to folders.
        'Test Folders
        For x2 = 0 To UBound(array1, 1)
            .Add relative:=Chr(34) & array1(x2, 2) & Chr(34), relationship:=tvwChild, _
            Key:=Chr(34) & array1(x2, 1) & Chr(34), Text:=array1(x2, 0), Image:=1
        Next x2
        'Test Sets
        For x2 = 1 To UBound(ArrayTS2)
            .Add relative:=Chr(34) & ArrayTS3(x2) & Chr(34), relationship:=tvwChild, _
            Key:=Chr(34) & ArrayTS1(x2) & Chr(34) & ArrayTS2(x2), Text:=ArrayTS2(x2), Image:=3
        Next x2
    End With
    'array3 = Nothing
    'ArrayTS3 = Nothing
    
    pathway = Node.fullPath
    Me.Label2.Caption = "Test Set Path: " & pathway
    Node.Selected = True
    Exit Sub
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End
    
End Sub

Private Sub TreeView1_Collapse(ByVal Node As MSComctlLib.Node)
    Node.Image = 1
End Sub

Private Sub UserForm_Initialize()
   
    Dim n As Node
    Dim TempStr As String
On Error GoTo Err
    Call RemoveCaption(Me)
    formHandle = FindWindow(vbNullString, Me.Caption)
    
    With Me
        .TreeView1.LineStyle = tvwRootLines
        .TreeView1.ImageList = Me.ImageList1
    End With
    Call x_TDconnect    'Connect to QC
    Call TreeView_Populate  'Populate TreeView
    Set n = Me.TreeView1.Nodes(1) 'Selects the first item in the tree view at load
    Treeview1_NodeClick n
    Set n = Nothing
    Application.Cursor = xlDefault
    Exit Sub
    
Err:
    Call x_TDdisconnect
    MsgBox Err.Description
    Application.StatusBar = "Ready"
    Call z_ErrorHandler("Requirement Download")
    End
    
End Sub

Private Sub TreeView_Populate()

    Dim TreeMgr, TestTree, TestTree2, TestSets, TestSetsList, ArrayCount, ArrayCount2, ArrayCount3

    Set TreeMgr = TDconnection.TestSetTreeManager
    Set TestTree = TreeMgr.NodeById(TreeMgr.Root.NodeID) 'specify the folder path in testplan, all the tests under that folder will be exported.

    'Level 1 Test Folders
    Dim i, array1, array2, array3, ArrayTS1, ArrayTS2, ArrayTS3
    ReDim array1(TestTree.Count - 1, 3) As String
    ArrayCount = 0
    For i = 0 To UBound(array1)    'Count sub folders for Level 2
        For j = 0 To TestTree.SubNodes.Item(i + 1).SubNodes.Count - 1
            ArrayCount = ArrayCount + 1
        Next j
    Next i
    ReDim array2(ArrayCount, 3) As String
    ArrayCount = 0 'Reset counter
    'Level 1 Test Folders
    For i = 0 To TestTree.Count - 1 'Run on all children nodes
        array1(i, 0) = TestTree.Child(i + 1).Name
        array1(i, 1) = TestTree.Child(i + 1).NodeID
        array1(i, 2) = TestTree.Father.NodeID
        'Level 2 Test Folders
        For j = 0 To TestTree.SubNodes.Item(i + 1).SubNodes.Count - 1
            array2(ArrayCount, 0) = TestTree.SubNodes.Item(i + 1).SubNodes.Item(j + 1).Name
            array2(ArrayCount, 1) = TestTree.SubNodes.Item(i + 1).SubNodes.Item(j + 1).NodeID
            array2(ArrayCount, 2) = TestTree.SubNodes.Item(i + 1).NodeID
            ArrayCount = ArrayCount + 1
        Next j
    Next
    Call ArraySort(array1)
    Call ArraySort(array2)
    
    'Level 2 Test Sets for Test Folders
    Set TestSets = TDconnection.TestSetFactory
    ReDim ArrayTS1(0) As Variant
    ReDim ArrayTS2(0) As Variant
    ReDim ArrayTS3(0) As Variant
    ArrayCount3 = 1
    For i = 1 To UBound(array1, 1)  'Count test sets under each folder first
        Set tsFolder = TreeMgr.NodeById(array1(i, 1))
        Set TestSetsList = tsFolder.FindTestSets(Chr(34) & tsFolder.Path & Chr(34)) 'add to next loop
        If TestSetsList Is Nothing Then
        Else
            Dim NewUpper
            NewUpper = UBound(ArrayTS1) + TestSetsList.Count 'Add more space to dynamic array
            ReDim Preserve ArrayTS1(NewUpper)
            ReDim Preserve ArrayTS2(NewUpper)
            ReDim Preserve ArrayTS3(NewUpper)
            For j = 1 To TestSetsList.Count
                ArrayTS1(ArrayCount3) = TestSetsList.Item(j).ID 'Add node path to array
                ArrayTS2(ArrayCount3) = TestSetsList.Item(j).Name
                ArrayTS3(ArrayCount3) = TestSetsList.Item(j).TestSetFolder.NodeID 'Add node path to array
                ArrayCount3 = ArrayCount3 + 1
            Next j
        End If
    Next i
    
    With Me.TreeView1.Nodes
        .Clear
        'Test Set Folder Tree
        For x1 = 0 To UBound(array1, 1)
            .Add Key:=Chr(34) & array1(x1, 1) & Chr(34), Text:=array1(x1, 0), Image:=1
            For x2 = 0 To UBound(array2, 1)
                If array2(x2, 2) = array1(x1, 1) Then
                    .Add relative:=Chr(34) & array1(x1, 1) & Chr(34), relationship:=tvwChild, _
                    Key:=Chr(34) & array2(x2, 1) & Chr(34), Text:=array2(x2, 0), Image:=1
                End If
            Next x2
        Next x1

        Dim somevalue As String
        For x1 = 0 To UBound(array1, 1)
            For x2 = 0 To UBound(ArrayTS1)
                somevalue = ArrayTS3(x2)
                If array1(x1, 1) = somevalue Then
                    .Add relative:=Chr(34) & array1(x1, 1) & Chr(34), relationship:=tvwChild, _
                    Key:=Chr(34) & ArrayTS1(x2) & Chr(34), Text:=ArrayTS2(x2), Image:=3
                End If
            Next x2
        Next x1
    End With
    
End Sub

Private Sub Treeview1_NodeClick(ByVal Node As MSComctlLib.Node)
            
    pathway = Node.fullPath
    Me.Label2.Caption = "Test Set Path: " & pathway
    If Node.Image = 3 Then
        TestSetNode = True
    Else
        TestSetNode = False
    End If
    
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Sheets("Settings").Select
    Logo.Show 'Open the logo to login the user.
End Sub

Private Sub Workbook_Close()
    PassW = "qcdownload"
    Sheets("Settings").Select
    Sheets("Settings").Unprotect Password:=PassW
    Sheets("Settings").Cells(2, 2).Value = ""       'B2
    Sheets("Settings").Cells(2, 3).Value = ""       'C2
    Sheets("Settings").Protect Password:=PassW
    'Me.Save = True
    Me.Save
End Sub
Attribute VB_Name = "UpdateFields"
Attribute VB_Base = "0{617456B1-48C2-4754-B4DE-62C2BDCBCFDC}{33AB04F3-5F73-4375-966E-5A41798C2FDC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label_Title_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label_Optional_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
Private Sub Label_Required_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Sub CmdButton_Add_Click()

    i2 = UpdateFields.ListBox_Selected.ListCount
    For i = 0 To UpdateFields.ListBox_Available.ListCount - 1
        If UpdateFields.ListBox_Available.Selected(i) = True Then
            UpdateFields.ListBox_Selected.AddItem
            UpdateFields.ListBox_Selected.List(i2, 0) = UpdateFields.ListBox_Available.List(i, 0)
            'UpdateFields.ListBox_Selected.List(i2, 1) = UpdateFields.ListBox_Selected.ListCount + 1
            UpdateFields.ListBox_Available.RemoveItem (i)
        End If
    Next i
    'TempArray = Me.ListBox_Available.List    'Sort Optional array if changed.
    'Call SortListBox(TempArray, "O")       'Only sort on delete

    For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1 'Recound Column
        UpdateFields.ListBox_Selected.List(i, 1) = i + 1
    Next i
    
End Sub

Private Sub CmdButton_Del_Click()

    i2 = UpdateFields.ListBox_Available.ListCount
    For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1
        If UpdateFields.ListBox_Selected.Selected(i) = True Then
            UpdateFields.ListBox_Available.AddItem
            UpdateFields.ListBox_Available.List(i2, 0) = UpdateFields.ListBox_Selected.List(i, 0)
            UpdateFields.ListBox_Selected.RemoveItem (i)
        End If
    Next i
    
    TempArray = Me.ListBox_Available.List    'Sort Optional array if changed.
    Call SortListBox(TempArray, "O")
    
    For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1 'Recound Column Numbers
        UpdateFields.ListBox_Selected.List(i, 1) = i + 1
    Next i
    
End Sub

Private Sub CmdButton_Exit_Click()
    Unload Me
End Sub

Private Sub CmdButton_Up_Click()
Dim i As Long
Dim leaveAlone As Boolean
Dim pos As Long
Dim Temp As String

pos = 0

For i = 0 To ListBox_Selected.ListCount - 1
leaveAlone = False

If ListBox_Selected.Selected(i) Then
    If i = pos Then
        leaveAlone = True
        End If
        pos = pos + 1
        
        If leaveAlone = False Then
        Temp = ListBox_Selected.List(i - 1)
        ListBox_Selected.List(i - 1) = ListBox_Selected.List(i)
        ListBox_Selected.List(i) = Temp
        ListBox_Selected.ListIndex = i - 1
        ListBox_Selected.Selected(i) = False
        ListBox_Selected.Selected(i - 1) = True
    End If
End If

Next
End Sub

Private Sub CmdButton_Down_Click()
Dim i As Integer
Dim leaveAlone As Boolean
Dim pos As Long
Dim Temp As String

pos = ListBox_Selected.ListCount - 1

For i = ListBox_Selected.ListCount - 1 To 0 Step -1
    leaveAlone = False
    If ListBox_Selected.Selected(i) Then
        If i = pos Then
            leaveAlone = True
        End If
        pos = pos - 1
        If Not leaveAlone Then
            Temp = ListBox_Selected.List(i + 1)
            ListBox_Selected.List(i + 1) = ListBox_Selected.List(i)
            ListBox_Selected.List(i) = Temp
            ListBox_Selected.ListIndex = i + 1
            ListBox_Selected.Selected(i) = False
            ListBox_Selected.Selected(i + 1) = True
        End If
    End If
Next

End Sub

Private Sub ListBox_Available_Click()
    'Remove the selected Required listbox
    For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1
        'If UpdateFields.ListBox_Selected.Selected(i) = True Then
            UpdateFields.ListBox_Selected.Selected(i) = False
        'End If
    Next i
End Sub

Private Sub ListBox_Selected_Click()
    'Removed the selected Optional listbox
    For i = 0 To UpdateFields.ListBox_Available.ListCount - 1
        'If UpdateFields.ListBox_Available.Selected(i) = True Then
            UpdateFields.ListBox_Available.Selected(i) = False
        'End If
    Next i
End Sub
Private Sub CmdButton_Edit_Click()
    Dim SelectedListbox
    For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1 'Recound Column
        If UpdateFields.ListBox_Selected.Selected(i) = True Then
            If Right(Trim(UpdateFields.ListBox_Selected.List(i, 0)), 1) = "*" Then
                UpdateFieldsEdit.TextBox_EditField.Value = Left(UpdateFields.ListBox_Selected.List(i, 0), InStr(1, UpdateFields.ListBox_Selected.List(i, 0), "(") - 2)
                UpdateFieldsEdit.Label_ColField.Caption = Right(Left(UpdateFields.ListBox_Selected.List(i, 0), Len(UpdateFields.ListBox_Selected.List(i, 0)) - 3), Len(UpdateFields.ListBox_Selected.List(i, 0)) - InStr(1, UpdateFields.ListBox_Selected.List(i, 0), "(", vbTextCompare) - 3)
                UpdateFieldsEdit.Label_Required.Caption = "Yes"
                SelectedListbox = 1
                UpdateFieldsEdit.Show
            Else
                UpdateFieldsEdit.TextBox_EditField.Value = Left(UpdateFields.ListBox_Selected.List(i, 0), InStr(1, UpdateFields.ListBox_Selected.List(i, 0), "(") - 2)
                UpdateFieldsEdit.Label_ColField.Caption = Right(Left(UpdateFields.ListBox_Selected.List(i, 0), Len(UpdateFields.ListBox_Selected.List(i, 0)) - 1), Len(UpdateFields.ListBox_Selected.List(i, 0)) - InStr(1, UpdateFields.ListBox_Selected.List(i, 0), "(", vbTextCompare) - 1)
                UpdateFieldsEdit.Label_Required.Caption = "No"
                SelectedListbox = 1
                UpdateFieldsEdit.Show
            End If
        End If
        If i = UpdateFields.ListBox_Selected.ListCount - 1 And SelectedListbox = 0 Then 'If no selected field present
            a = MsgBox("Only Selected Fields Are Editable", vbOKOnly, "Error...")
        End If
    Next i
End Sub


Private Sub UserForm_Activate()
    Call RemoveCaption(Me)
    formHandle = FindWindow(vbNullString, Me.Caption)
    TempArray = Me.ListBox_Available.List    'Sort Optional array if changed.
    Call SortListBox(TempArray, "O")
    
    If UpdateFields.FieldGroup.Caption = "REQ" Then
        Me.CheckBox_Copy.Visible = False
    ElseIf UpdateFields.FieldGroup.Caption = "TEST" Then
        Me.CheckBox_Copy.Visible = True
        Me.CheckBox_Copy.Caption = "Copy fields to Test Set"
    ElseIf UpdateFields.FieldGroup.Caption = "TESTSET" Then
        Me.CheckBox_Copy.Visible = True
        Me.CheckBox_Copy.Caption = "Copy fields to Test Plan"
    End If
    
End Sub

Function SortListBox(ByRef vaItems As Variant, Box As String)
    'Dim vaItems As Variant
    Dim i As Long, j As Long
    Dim vTemp As Variant
    
    'Steal code from John Walkenbach|fffd|s Excel Power Programming
    'with VBA to sort the array
    For i = LBound(vaItems, 1) To UBound(vaItems, 1) - 1
        For j = i + 1 To UBound(vaItems, 1)
            If vaItems(i, 0) > vaItems(j, 0) Then
                vTemp = vaItems(i, 0)
                vaItems(i, 0) = vaItems(j, 0)
                vaItems(j, 0) = vTemp
            End If
        Next j
    Next i

    'Add the sorted array back to the listbox
    If Box = "O" Then
        Me.ListBox_Available.Clear
        For i = LBound(vaItems, 1) To UBound(vaItems, 1)
            Me.ListBox_Available.AddItem vaItems(i, 0)
        Next i
    ElseIf Box = "R" Then
        Me.ListBox_Selected.Clear
        For i = LBound(vaItems, 1) To UBound(vaItems, 1)
            Me.ListBox_Selected.AddItem vaItems(i, 0)
        Next i
    End If
    
End Function

Private Sub CmdButton_Apply_Click()

    SomeValueINeedToLoopThrough = 1
    
    If UpdateFields.FieldGroup.Caption = "REQ" Then
        Sheets("Requirements Download").Select
        Set WSresults = Excel.ActiveSheet
    ElseIf UpdateFields.FieldGroup.Caption = "TEST" Then
        Sheets("Test Plan Download").Select
        Set WSresults = Excel.ActiveSheet
    ElseIf UpdateFields.FieldGroup.Caption = "TESTSET" Then
        Sheets("Test Set Download").Select
        Set WSresults = Excel.ActiveSheet
    End If
    
    If Me.CheckBox_Copy.Value = True Then SomeValueINeedToLoopThrough = 2 'Oh ya set that value +1
    
    For x = 1 To SomeValueINeedToLoopThrough
        If x = 2 Then
            If UpdateFields.FieldGroup.Caption = "TEST" Then
                Sheets("Test Set Download").Select
                Set WSresults = Excel.ActiveSheet
            ElseIf UpdateFields.FieldGroup.Caption = "TESTSET" Then
                Sheets("Test Plan Download").Select
                Set WSresults = Excel.ActiveSheet
            End If
        End If
        
        WSresults.Select
        WSresults.Unprotect Password:="qcdownload"
        Cells.Delete
                
        ColumnCount = 1
        'SelectedFields = Me.ListBox_Selected.List
    
        'For Each Field In SelectedFields
        For i = 0 To Me.ListBox_Selected.ListCount - 1
            Field = UpdateFields.ListBox_Selected.List(i, 0)
            If Right(Field, 1) = "*" Then
                WSresults.Cells(1, ColumnCount).Value = Right(Left(Field, Len(Field) - 3), Len(Field) - InStr(1, Field, "(", vbTextCompare) - 3)
                WSresults.Cells(2, ColumnCount).Value = Left(Field, InStr(1, Field, "(") - 2)
                WSresults.Cells(2, ColumnCount).Interior.ColorIndex = 44
                WSresults.Cells(2, ColumnCount).Font.Bold = True
            Else
                WSresults.Cells(1, ColumnCount).Value = Right(Left(Field, Len(Field) - 1), Len(Field) - InStr(1, Field, "(", vbTextCompare) - 1)
                WSresults.Cells(2, ColumnCount).Value = Left(Field, InStr(1, Field, "(") - 2)
                WSresults.Cells(2, ColumnCount).Interior.ColorIndex = 15
            End If
            ColumnCount = ColumnCount + 1
        Next i
        'Next Field
        
        Rows("1:1").RowHeight = 2
        Rows("2:" & WSresults.UsedRange.Columns.Count).AutoFilter
        Cells.Select
        Cells.EntireColumn.AutoFit
        Cells(3, 1).Select
        ActiveWindow.FreezePanes = False
        ActiveWindow.FreezePanes = True
        WSresults.Protect Password:="qcdownload", AllowFormattingColumns:=True, AllowFormattingRows:=True, AllowFiltering:=True
    Next x
    Unload Me

End Sub

Attribute VB_Name = "UpdateFieldsEdit"
Attribute VB_Base = "0{A1EC5BEF-85E0-4AE8-9799-FBA28E59ED44}{566BE059-6B0C-4290-82A0-8FBF2EC5870E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''Move with click anywhere'''''''''''''''''''''''''''''''''''''''''''''
Private Declare PtrSafe Function FindWindow Lib "User32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Private Declare PtrSafe Function SendMessage Lib "User32" Alias "SendMessageA" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Private Declare PtrSafe Function ReleaseCapture Lib "User32" () As Long

Private formHandle As Long

Private Sub UserForm_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub

Private Sub Label_Title_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    If formHandle = 0 Then Exit Sub
    If Button = 1 And Shift = 0 Then
        ReleaseCapture
        SendMessage formHandle, &HA1, 2, 0
    End If
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Sub UserForm_Activate()
    Call RemoveCaption(Me)
    formHandle = FindWindow(vbNullString, Me.Caption)
End Sub

Private Sub CmdButton_Apply_Click()



    If Trim(UpdateFieldsEdit.TextBox_EditField.Value) = "" Then
        a = MsgBox("Unable to input a blank value", vbOKOnly, "Error...")
    Else
        For i = 0 To UpdateFields.ListBox_Selected.ListCount - 1 'Recound Column
            If UpdateFields.ListBox_Selected.Selected(i) = True Then
                If UpdateFieldsEdit.Label_Required = "Yes" Then
                    UpdateFields.ListBox_Selected.List(i, 0) = Trim(UpdateFieldsEdit.TextBox_EditField) & " (" & UpdateFieldsEdit.Label_ColField & ") *"
                ElseIf UpdateFieldsEdit.Label_Required = "No" Then
                    UpdateFields.ListBox_Selected.List(i, 0) = Trim(UpdateFieldsEdit.TextBox_EditField) & " (" & UpdateFieldsEdit.Label_ColField & ")"
                End If
            End If
        Next i
        Unload Me
    End If



End Sub
    
Private Sub CmdButton_Cancel_Click()
    UpdateFieldsEdit.Hide
    UpdateFieldsEdit.TextBox_EditField.Text = ""
End Sub


INQUEST-PP=macro
