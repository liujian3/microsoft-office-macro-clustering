Attribute VB_Name = "ApiMessageObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim theCode As String
Dim theMessage As String

Public Sub Init(ByVal xmlNode As MSXML2.IXMLDOMElement)
    theCode = xmlNode.SelectSingleNode("Code").Text
    theMessage = xmlNode.SelectSingleNode("Message").Text
End Sub

Public Function code()
    code = theCode
End Function

Public Function Message()
    Message = theMessage
End Function
Attribute VB_Name = "ApiResponseObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim xmldoc As New DOMDocument60

Public Sub Init(ByVal xmlString As String)
    xmldoc.Async = False
    xmldoc.LoadXml (xmlString)
End Sub

Public Function Errors() As ApiMessageObject()
'
'   Set Error XML Response Object
'
    Dim errorNodes, child
    Dim xmlElement As MSXML2.IXMLDOMElement
    Set xmlElement = xmldoc.DocumentElement
    Errors = GetMessageObjects(xmlElement, "/ApiResponse/Errors/ApiError")

End Function

Private Function GetMessageObjects(ByVal xmlNode As MSXML2.IXMLDOMElement, ByVal xpath As String) As ApiMessageObject()
'
'   Get Warning/Error Message Details list
'
    Dim tmp As Object, child
    Set tmp = xmlNode.SelectNodes(xpath)
    
    If (tmp.Length > 0) Then
        Dim returnObj() As ApiMessageObject
        ReDim returnObj(tmp.Length - 1)
        Dim idx As Integer
        idx = 0
        For Each child In tmp
            Dim messageObject As New ApiMessageObject
            messageObject.Init child
            Set returnObj(idx) = messageObject
            idx = idx + 1
        Next child
        GetMessageObjects = returnObj
    End If
End Function

Public Function Data() As MSXML2.IXMLDOMElement
'
'   Set Data XML Response Object
'
    Dim dataNodes, child
    Dim xmlElement As MSXML2.IXMLDOMElement
    Set xmlElement = xmldoc.DocumentElement
    
    Dim tmp As MSXML2.IXMLDOMElement
    Set tmp = xmlElement.SelectSingleNode("/ApiResponse/Data")
    Set Data = tmp
End Function

Public Function Warnings() As ApiMessageObject()
'
'   Set Warning XML Response Object
'
   Dim errorNodes, child
    Dim xmlElement As MSXML2.IXMLDOMElement
    Set xmlElement = xmldoc.DocumentElement
    Set Warnings = GetMessageObjects(xmlElement, "/ApiResponse/Warnings/ApiError")
    
End Function

Public Function HasErrors() As Boolean
'
'   Identfiy Errors with XML Response Object Document
'   Pourpose: Identify if response contains Errors
'   Returns: Boolean
'
    Dim errorNodeList, Result
    Dim xmlElement As MSXML2.IXMLDOMElement
    Result = False
    Set xmlElement = xmldoc.DocumentElement
    If Not xmlElement Is Nothing Then
        Set errorNodeList = xmlElement.SelectNodes("/ApiResponse/Errors/ApiError")
        If errorNodeList.Length > 0 Then
            Result = True
        End If
    End If
    HasErrors = Result
End Function

Public Function HasData() As Boolean
'
'   Identfiy Data with XML Response Object Document
'   Pourpose: Identify if response contains Data
'   Returns: Boolean
'
    Dim dataNodeList, Result
    Dim xmlElement As MSXML2.IXMLDOMElement
    Result = False
    Set xmlElement = xmldoc.DocumentElement
    Set dataNodeList = xmlElement.SelectNodes("/ApiResponse/Data")

    If dataNodeList.Length > 0 Then
        Result = True
    End If
    HasData = Result
End Function

Public Function HasWarnings() As Boolean
'
'   Identfiy Warning with XML Response Object Document
'   Pourpose: Identify if response contains Warnings
'   Returns: Boolean
'
    Dim warningNodeList, Result
    Dim xmlElement As MSXML2.IXMLDOMElement
    Result = False
    Set xmlElement = xmldoc.DocumentElement
    If Not xmlElement Is Nothing Then
        Set warningNodeList = xmlElement.SelectNodes("/ApiResponse/Warnings/Warning")
        If warningNodeList.Length > 0 Then
            Result = True
        End If
    End If
    HasWarnings = Result
End Function
Attribute VB_Name = "CapitalFlow"
Attribute VB_Base = "0{42947564-B82C-457E-BDF3-08DAB4AFC2ED}{0C2C9CB0-3B8D-4DD1-9812-EB433342C316}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public cancelled, lastCode


Private Sub LookupButton_Click()
    Dim retrieved
    
    ' exit if no code entered
    If Trim(SecurityCode) = "" Then
        MsgBox ("Please enter a Security Code")
    Else
        ' don't get again if same security
        If lastCode = SecurityCode.Value Then
            retrieved = True
        Else
            ' refresh the list
            retrieved = getDividendData(SecurityCode.Value)
            If retrieved Then
                DividendLookup.DividendList.RowSource = "Dividends!Dividends"
            End If
        End If
        
        ' Prompt user to select new value
        If retrieved Then
            ' Show the list
            DividendLookup.Show
            If Not DividendLookup.cancelled Then
                EventType = DividendLookup.selectedBaseType
                ExDividendDate = Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
                PaymentDate = Format(DividendLookup.selectedPaymentDate, "dd/mm/yyyy")
                Amount = DividendLookup.selectedAmount
                FrankedPercent = DividendLookup.selectedFrankingPercent * 100
            End If
            
            ' remember the code for next time
            lastCode = SecurityCode.Value
        End If
    End If
End Sub

Private Sub OkButton_Click()
    CapitalFlow.Hide
End Sub

Private Sub cancelButton_Click()
    CapitalFlow.Hide
    cancelled = True
End Sub

Private Sub UserForm_Activate()
    cancelled = False
End Sub

Private Sub UserForm_Initialize()
     
    EventType.AddItem "Capital Call"
    EventType.AddItem "Capital Return"
    
End Sub

Attribute VB_Name = "CorporateAction"
Attribute VB_Base = "0{59F0851F-8620-44EA-973A-B9561ABEE8BB}{DF110EF9-2DF0-4A1B-BA6C-36083A1A0C84}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public cancelled, lastCode

Private Sub ExDividendDate_Change()

End Sub

Private Sub LookupButton_Click()
    Dim retrieved
    
    ' exit if no code entered
    If Trim(SecurityCode) = "" Then
        MsgBox ("Please enter a Security Code")
    Else
        ' don't get again if same security
        If lastCode = SecurityCode.Value Then
            retrieved = True
        Else
            ' refresh the list
            retrieved = getDividendData(SecurityCode.Value)
            If retrieved Then
                DividendLookup.DividendList.RowSource = "Dividends!Dividends"
            End If
        End If
        
        ' Prompt user to select new value
        If retrieved Then
            ' Show the list
            DividendLookup.Show
            If Not DividendLookup.cancelled Then
                EventType = DividendLookup.selectedBaseType
                EntitlementDate = Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
                PaymentDate = Format(DividendLookup.selectedPaymentDate, "dd/mm/yyyy")
                Amount = DividendLookup.selectedAmount
                FrankedPercent = DividendLookup.selectedFrankingPercent * 100
            End If
            
            ' remember the code for next time
            lastCode = SecurityCode.Value
        End If
    End If
End Sub

Private Sub OkButton_Click()
    CorporateAction.Hide
End Sub

Private Sub cancelButton_Click()
    CorporateAction.Hide
    cancelled = True
End Sub

Private Sub UserForm_Activate()
    cancelled = False
End Sub

Private Sub UserForm_Initialize()
     
    EventType.AddItem "Buyback"
    EventType.AddItem "Spin Off/Demerger"
    EventType.AddItem "Split Consolidation"
    EventType.AddItem "Takeover/Merger"
    
End Sub

Attribute VB_Name = "Dictionary"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Dictionary v1.3.0
' (c) Tim Hall - https://github.com/timhall/VBA-Dictionary
'
' Drop-in replacement for Scripting.Dictionary on Mac
'
' @author: tim.hall.engr@gmail.com
' @license: MIT (http://www.opensource.org/licenses/mit-license.php
'
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

#Const UseScriptingDictionaryIfAvailable = True

#If Mac Or Not UseScriptingDictionaryIfAvailable Then

' dict_KeyValue 0: FormattedKey, 1: OriginalKey, 2: Value
Private dict_pKeyValues As Collection
Private dict_pKeys() As Variant
Private dict_pItems() As Variant
Private dict_pObjectKeys As Collection
Private dict_pCompareMode As CompareMethod

#Else

Private dict_pDictionary As Object

#End If

' --------------------------------------------- '
' Types
' --------------------------------------------- '

Public Enum CompareMethod
    BinaryCompare = VBA.vbBinaryCompare
    TextCompare = VBA.vbTextCompare
    DatabaseCompare = VBA.vbDatabaseCompare
End Enum

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public Property Get CompareMode() As CompareMethod
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    CompareMode = dict_pCompareMode
#Else
    CompareMode = dict_pDictionary.CompareMode
#End If
End Property
Public Property Let CompareMode(Value As CompareMethod)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        ' Can't change CompareMode for Dictionary that contains data
        ' http://msdn.microsoft.com/en-us/library/office/gg278481(v=office.15).aspx
        Err.Raise 5 ' Invalid procedure call or argument
    End If

    dict_pCompareMode = Value
#Else
    dict_pDictionary.CompareMode = Value
#End If
End Property

Public Property Get Count() As Long
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Count = dict_pKeyValues.Count
#Else
    Count = dict_pDictionary.Count
#End If
End Property

Public Property Get Item(Key As Variant) As Variant
Attribute Item.VB_UserMemId = 0
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Key)

    If Not IsEmpty(dict_KeyValue) Then
        If VBA.IsObject(dict_KeyValue(2)) Then
            Set Item = dict_KeyValue(2)
        Else
            Item = dict_KeyValue(2)
        End If
    Else
        ' Not found -> Returns Empty
    End If
#Else
    If VBA.IsObject(dict_pDictionary.Item(Key)) Then
        Set Item = dict_pDictionary.Item(Key)
    Else
        Item = dict_pDictionary.Item(Key)
    End If
#End If
End Property
Public Property Let Item(Key As Variant, Value As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Exists(Key) Then
        dict_ReplaceKeyValue dict_GetKeyValue(Key), Key, Value
    Else
        dict_AddKeyValue Key, Value
    End If
#Else
    dict_pDictionary.Item(Key) = Value
#End If
End Property
Public Property Set Item(Key As Variant, Value As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Exists(Key) Then
        dict_ReplaceKeyValue dict_GetKeyValue(Key), Key, Value
    Else
        dict_AddKeyValue Key, Value
    End If
#Else
    Set dict_pDictionary.Item(Key) = Value
#End If
End Property

Public Property Let Key(Previous As Variant, Updated As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Previous)

    If Not VBA.IsEmpty(dict_KeyValue) Then
        dict_ReplaceKeyValue dict_KeyValue, Updated, dict_KeyValue(2)
    End If
#Else
    dict_pDictionary.Key(Previous) = Updated
#End If
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Add an item with the given key
'
' @param {Variant} Key
' @param {Variant} Item
' --------------------------------------------- '
Public Sub Add(Key As Variant, Item As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Not Me.Exists(Key) Then
        dict_AddKeyValue Key, Item
    Else
        ' This key is already associated with an element of this collection
        Err.Raise 457
    End If
#Else
    dict_pDictionary.Add Key, Item
#End If
End Sub

''
' Check if an item exists for the given key
'
' @param {Variant} Key
' @return {Boolean}
' --------------------------------------------- '
Public Function Exists(Key As Variant) As Boolean
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Exists = Not IsEmpty(dict_GetKeyValue(Key))
#Else
    Exists = dict_pDictionary.Exists(Key)
#End If
End Function

''
' Get an array of all items
'
' @return {Variant}
' --------------------------------------------- '
Public Function Items() As Variant
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        Items = dict_pItems
    Else
        ' Split("") creates initialized empty array that matches Dictionary Keys and Items
        Items = VBA.Split("")
    End If
#Else
    Items = dict_pDictionary.Items
#End If
End Function

''
' Get an array of all keys
'
' @return {Variant}
' --------------------------------------------- '
Public Function Keys() As Variant
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    If Me.Count > 0 Then
        Keys = dict_pKeys
    Else
        ' Split("") creates initialized empty array that matches Dictionary Keys and Items
        Keys = VBA.Split("")
    End If
#Else
    Keys = dict_pDictionary.Keys
#End If
End Function

''
' Remove an item for the given key
'
' @param {Variant} Key
' --------------------------------------------- '
Public Sub Remove(Key As Variant)
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Dim dict_KeyValue As Variant
    dict_KeyValue = dict_GetKeyValue(Key)

    If Not VBA.IsEmpty(dict_KeyValue) Then
        dict_RemoveKeyValue dict_KeyValue
    Else
        ' Application-defined or object-defined error
        Err.Raise 32811
    End If
#Else
    dict_pDictionary.Remove Key
#End If
End Sub

''
' Remove all items
' --------------------------------------------- '
Public Sub RemoveAll()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = New Collection

    Erase dict_pKeys
    Erase dict_pItems
#Else
    dict_pDictionary.RemoveAll
#End If
End Sub

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Or Not UseScriptingDictionaryIfAvailable Then

Private Function dict_GetKeyValue(dict_Key As Variant) As Variant
    On Error Resume Next
    dict_GetKeyValue = dict_pKeyValues(dict_GetFormattedKey(dict_Key))
    Err.Clear
End Function

Private Sub dict_AddKeyValue(dict_Key As Variant, dict_Value As Variant, Optional dict_Index As Long = -1)
    If Me.Count = 0 Then
        ReDim dict_pKeys(0 To 0)
        ReDim dict_pItems(0 To 0)
    Else
        ReDim Preserve dict_pKeys(0 To UBound(dict_pKeys) + 1)
        ReDim Preserve dict_pItems(0 To UBound(dict_pItems) + 1)
    End If

    Dim dict_FormattedKey As String
    dict_FormattedKey = dict_GetFormattedKey(dict_Key)

    If dict_Index > 0 And dict_Index <= dict_pKeyValues.Count Then
        Dim dict_i As Long
        For dict_i = UBound(dict_pKeys) To dict_Index Step -1
            dict_pKeys(dict_i) = dict_pKeys(dict_i - 1)
            If VBA.IsObject(dict_pItems(dict_i - 1)) Then
                Set dict_pItems(dict_i) = dict_pItems(dict_i - 1)
            Else
                dict_pItems(dict_i) = dict_pItems(dict_i - 1)
            End If
        Next dict_i

        dict_pKeys(dict_Index - 1) = dict_Key
        If VBA.IsObject(dict_Value) Then
            Set dict_pItems(dict_Index - 1) = dict_Value
        Else
            dict_pItems(dict_Index - 1) = dict_Value
        End If

        dict_pKeyValues.Add Array(dict_FormattedKey, dict_Key, dict_Value), dict_FormattedKey, Before:=dict_Index
    Else
        If VBA.IsObject(dict_Key) Then
            Set dict_pKeys(UBound(dict_pKeys)) = dict_Key
        Else
            dict_pKeys(UBound(dict_pKeys)) = dict_Key
        End If
        If VBA.IsObject(dict_Value) Then
            Set dict_pItems(UBound(dict_pItems)) = dict_Value
        Else
            dict_pItems(UBound(dict_pItems)) = dict_Value
        End If

        dict_pKeyValues.Add Array(dict_FormattedKey, dict_Key, dict_Value), dict_FormattedKey
    End If
End Sub

Private Sub dict_ReplaceKeyValue(dict_KeyValue As Variant, dict_Key As Variant, dict_Value As Variant)
    Dim dict_Index As Long
    Dim dict_i As Integer

    dict_Index = dict_GetKeyIndex(dict_KeyValue(1))

    ' Remove existing dict_Value
    dict_RemoveKeyValue dict_KeyValue, dict_Index

    ' Add new dict_Key dict_Value back
    dict_AddKeyValue dict_Key, dict_Value, dict_Index
End Sub

Private Sub dict_RemoveKeyValue(dict_KeyValue As Variant, Optional ByVal dict_Index As Long = -1)
    Dim dict_i As Long
    If dict_Index = -1 Then
        dict_Index = dict_GetKeyIndex(dict_KeyValue(1))
    Else
        dict_Index = dict_Index - 1
    End If

    If dict_Index >= 0 And dict_Index <= UBound(dict_pKeys) Then
        For dict_i = dict_Index To UBound(dict_pKeys) - 1
            dict_pKeys(dict_i) = dict_pKeys(dict_i + 1)

            If VBA.IsObject(dict_pItems(dict_i + 1)) Then
                Set dict_pItems(dict_i) = dict_pItems(dict_i + 1)
            Else
                dict_pItems(dict_i) = dict_pItems(dict_i + 1)
            End If
        Next dict_i

        If UBound(dict_pKeys) = 0 Then
            Erase dict_pKeys
            Erase dict_pItems
        Else
            ReDim Preserve dict_pKeys(0 To UBound(dict_pKeys) - 1)
            ReDim Preserve dict_pItems(0 To UBound(dict_pItems) - 1)
        End If
    End If

    dict_pKeyValues.Remove dict_KeyValue(0)
    dict_RemoveObjectKey dict_KeyValue(1)
End Sub

Private Function dict_GetFormattedKey(dict_Key As Variant) As String
    If VBA.IsObject(dict_Key) Then
        dict_GetFormattedKey = dict_GetObjectKey(dict_Key)
    ElseIf VarType(dict_Key) = VBA.vbBoolean Then
        dict_GetFormattedKey = IIf(dict_Key, "-1__-1", "0__0")
    ElseIf VarType(dict_Key) = VBA.vbString Then
        dict_GetFormattedKey = dict_Key

        If Me.CompareMode = CompareMethod.BinaryCompare Then
            ' Collection does not have method of setting key comparison
            ' So case-sensitive keys aren't supported by default
            ' -> Approach: Append lowercase characters to original key
            '    AbC -> AbC___b_, abc -> abc__abc, ABC -> ABC_____
            Dim dict_Lowercase As String
            dict_Lowercase = ""

            Dim dict_i As Integer
            Dim dict_Char As String
            Dim dict_Ascii As Integer
            For dict_i = 1 To VBA.Len(dict_GetFormattedKey)
                dict_Char = VBA.Mid$(dict_GetFormattedKey, dict_i, 1)
                dict_Ascii = VBA.Asc(dict_Char)
                If dict_Ascii >= 97 And dict_Ascii <= 122 Then
                    dict_Lowercase = dict_Lowercase & dict_Char
                Else
                    dict_Lowercase = dict_Lowercase & "_"
                End If
            Next dict_i

            If dict_Lowercase <> "" Then
                dict_GetFormattedKey = dict_GetFormattedKey & "__" & dict_Lowercase
            End If
        End If
    Else
        ' For numbers, add duplicate to distinguish from strings
        ' ->  123  -> "123__123"
        '    "123" -> "123"
        dict_GetFormattedKey = VBA.CStr(dict_Key) & "__" & CStr(dict_Key)
    End If
End Function

Private Function dict_GetObjectKey(dict_ObjKey As Variant) As String
    Dim dict_i As Integer
    For dict_i = 1 To dict_pObjectKeys.Count
        If dict_pObjectKeys.Item(dict_i) Is dict_ObjKey Then
            dict_GetObjectKey = "__object__" & dict_i
            Exit Function
        End If
    Next dict_i

    dict_pObjectKeys.Add dict_ObjKey
    dict_GetObjectKey = "__object__" & dict_pObjectKeys.Count
End Function

Private Sub dict_RemoveObjectKey(dict_ObjKey As Variant)
    Dim dict_i As Integer
    For dict_i = 1 To dict_pObjectKeys.Count
        If dict_pObjectKeys.Item(dict_i) Is dict_ObjKey Then
            dict_pObjectKeys.Remove dict_i
            Exit Sub
        End If
    Next dict_i
End Sub

Private Function dict_GetKeyIndex(dict_Key As Variant) As Long
    Dim dict_i As Long
    For dict_i = 0 To UBound(dict_pKeys)
        If VBA.IsObject(dict_pKeys(dict_i)) And VBA.IsObject(dict_Key) Then
            If dict_pKeys(dict_i) Is dict_Key Then
                dict_GetKeyIndex = dict_i
                Exit For
            End If
        ElseIf VBA.IsObject(dict_pKeys(dict_i)) Or VBA.IsObject(dict_Key) Then
            ' Both need to be objects to check equality, skip
        ElseIf dict_pKeys(dict_i) = dict_Key Then
            dict_GetKeyIndex = dict_i
            Exit For
        End If
    Next dict_i
End Function

#End If

Private Sub Class_Initialize()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = New Collection

    Erase dict_pKeys
    Erase dict_pItems
    Set dict_pObjectKeys = New Collection
#Else
    Set dict_pDictionary = CreateObject("Scripting.Dictionary")
#End If
End Sub

Private Sub Class_Terminate()
#If Mac Or Not UseScriptingDictionaryIfAvailable Then
    Set dict_pKeyValues = Nothing
    Set dict_pObjectKeys = Nothing
#Else
    Set dict_pDictionary = Nothing
#End If
End Sub
Attribute VB_Name = "Dividend"
Attribute VB_Base = "0{A3DB1962-CB77-4B38-A314-1DD2E293D4FF}{246B0655-F5F7-425A-9A07-0C2A3D079116}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public cancelled, lastCode


Private Sub EventType_Change()

End Sub

Private Sub LookupButton_Click()
    Dim retrieved
    
    ' exit if no code entered
    If Trim(SecurityCode) = "" Then
        MsgBox ("Please enter a Security Code")
    Else
        ' don't get again if same security
        'If lastCode = SecurityCode.value Then
        '    retrieved = True
        'Else
            ' refresh the list
            retrieved = getDividendData(SecurityCode.Value)
            If retrieved Then
                DividendLookup.DividendList.RowSource = "Dividends!Dividends"
            End If
        'End If
        
        ' Prompt user to select new value
        If retrieved Then
            ' Show the list
            DividendLookup.Show
            If Not DividendLookup.cancelled And DividendLookup.DividendList.ListIndex > 0 Then
                EventType = DividendLookup.selectedBaseType
                ExDividendDate = Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
                PaymentDate = Format(DividendLookup.selectedPaymentDate, "dd/mm/yyyy")
                Amount = DividendLookup.selectedAmount
                FrankedPercent = DividendLookup.selectedFrankingPercent * 100
            End If
            
            ' remember the code for next time
            lastCode = SecurityCode.Value
        End If
    End If
End Sub

Private Sub OkButton_Click()
    ' Validate and Pass Details to TaxStatementBulkEntry Form
    If Dividend.EventType.Text = "Distribution - Tax Statement" Then
        If Me.SecurityCode.Value = "" Then
            MsgBox ("Please Enter a Security Code")
            End
        End If
        
        If IsError(CDate(Me.ExDividendDate.Text)) Then
            MsgBox ("Please Enter a valid date, dd/mm/yyyy")
            End
        Else
            'TaxStatementBulkEntry.tbParticipatingQuantityDate.value = "30/06/" + Trim(Str(Year(Dividend.ExDividendDate.value)))
        End If
        
        'TaxStatementBulkEntry.tbParticipatingQuantityDate.value = Format(TaxStatementBulkEntry.tbParticipatingQuantityDate.value, "dd/mm/yyyy")
            
        TaxStatementBulkEntry.tbTaxEventDescription.Value = "Distribution Tax Statement for " & UCase(CorporateAction.SecurityCode.Value)
        TaxStatementBulkEntry.tbInvestmentAccount.Value = UCase(CorporateAction.SecurityCode.Value)
        TaxStatementBulkEntry.Show
    Else
        Dividend.Hide
    End If
    
End Sub

Private Sub cancelButton_Click()
    Dividend.Hide
    cancelled = True
End Sub

Private Sub UserForm_Activate()
    cancelled = False
End Sub

Private Sub UserForm_Initialize()
     
    EventType.AddItem "Dividend - Cash"
    EventType.AddItem "Distribution - Cash"
    EventType.AddItem "Distribution - Tax Statement"
    
End Sub

Attribute VB_Name = "DividendLookup"
Attribute VB_Base = "0{0FE22861-6315-469B-9724-DAC6265D713B}{CA667AD1-9FA8-401A-B886-86B7C29BCC09}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public cancelled, lastCode

Sub DividendList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call SelectButton_Click
End Sub

Sub SelectButton_Click()
    TaxStatementBulkEntry.individualDistToggled = True
    DividendLookup.Hide
    If DividendList.ListIndex = 0 Then
        cancelled = True
    Else
        cancelled = False
    End If
End Sub

Function selectionIndex()
    selectionIndex = DividendList.ListIndex
End Function

Function selectedExDate()
    selectedExDate = DividendList.List(DividendList.ListIndex, 0)
End Function

Function selectedAmount()
    selectedAmount = DividendList.List(DividendList.ListIndex, 1)
End Function

Function selectedBaseType()
    Dim t
    t = DividendList.List(DividendList.ListIndex, 5)
    If Left(t, 9) = "Dist. Div" Then t = "Dividend - Cash" Else t = "Distribution - Cash"
    
    selectedBaseType = t
End Function

Function selectedFrankingPercent()
    selectedFrankingPercent = DividendList.List(DividendList.ListIndex, 2)
End Function

Function selectedBookClosedDate()
    selectedBookClosedDate = DividendList.List(DividendList.ListIndex, 3)
End Function

Function selectedPaymentDate()
    selectedPaymentDate = DividendList.List(DividendList.ListIndex, 4)
End Function
    
Private Sub cancelButton_Click()
    TaxStatementBulkEntry.individualDistToggled = False
    DividendLookup.Hide
    cancelled = True
End Sub


Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "GlobalVariables"


Global FinancialDateStart As String
Global FinancialDateEnd  As String
Global PromptForLogin As Boolean
Attribute VB_Name = "HttpBasicAuthenticator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' Http Basic Authenticator v3.0.5
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Custom IWebAuthenticator for Http Basic Authenticator
'
' @class HttpBasicAuthenticator
' @implements IWebAuthenticator v4.*
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Implements IWebAuthenticator
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private Const web_HTTPREQUEST_SETCREDENTIALS_FOR_SERVER = 0
Private Const web_HTTPREQUEST_SETCREDENTIALS_FOR_PROXY = 1

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

Public Username As String
Public Password As String

' ============================================= '
' Public Methods
' ============================================= '

''
' Setup
'
' @param {String} Username
' @param {String} Password
''
Public Sub Setup(Username As String, Password As String)
    Me.Username = Username
    Me.Password = Password
End Sub

''
' Hook for taking action before a request is executed
'
' @param {WebClient} Client The client that is about to execute the request
' @param in|out {WebRequest} Request The request about to be executed
''
Private Sub IWebAuthenticator_BeforeExecute(ByVal client As WebClient, ByRef request As WebRequest)
    request.SetHeader "Authorization", "Basic " & WebHelpers.Base64Encode(Me.Username & ":" & Me.Password)
End Sub

''
' Hook for taking action after request has been executed
'
' @param {WebClient} Client The client that executed request
' @param {WebRequest} Request The request that was just executed
' @param in|out {WebResponse} Response to request
''
Private Sub IWebAuthenticator_AfterExecute(ByVal client As WebClient, ByVal request As WebRequest, ByRef response As WebResponse)
    ' e.g. Handle 401 Unauthorized or other issues
End Sub

''
' Hook for updating http before send
'
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {WinHttpRequest} Http
''
Private Sub IWebAuthenticator_PrepareHttp(ByVal client As WebClient, ByVal request As WebRequest, ByRef Http As Object)
    Http.SetCredentials Me.Username, Me.Password, web_HTTPREQUEST_SETCREDENTIALS_FOR_SERVER
End Sub

''
' Hook for updating cURL before send
'
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {String} Curl
''
Private Sub IWebAuthenticator_PrepareCurl(ByVal client As WebClient, ByVal request As WebRequest, ByRef Curl As String)
    ' e.g. Add flags to cURL
    Curl = Curl & " --basic --user " & WebHelpers.PrepareTextForShell(Me.Username) & ":" & WebHelpers.PrepareTextForShell(Me.Password)
End Sub

Attribute VB_Name = "IWebAuthenticator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' IWebAuthenticator v4.0.22
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Interface for creating authenticators for rest client
'
' @class IWebAuthenticator
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' ============================================= '
' Public Methods
' ============================================= '

''
' Hook for taking action before a request is executed
'
' @method BeforeExecute
' @param {WebClient} Client The client that is about to execute the request
' @param in|out {WebRequest} Request The request about to be executed
''
Public Sub BeforeExecute(ByVal client As WebClient, ByRef request As WebRequest)
    ' e.g Add headers, cookies, etc.
End Sub

''
' Hook for taking action after request has been executed
'
' @method AfterExecute
' @param {WebClient} Client The client that executed request
' @param {WebRequest} Request The request that was just executed
' @param in|out {WebResponse} Response to request
''
Public Sub AfterExecute(ByVal client As WebClient, ByVal request As WebRequest, ByRef response As WebResponse)
    ' e.g. Handle 401 Unauthorized or other issues
End Sub

''
' Hook for updating http before send
'
' @method PrepareHttp
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {WinHttpRequest} Http
''
Public Sub PrepareHttp(ByVal client As WebClient, ByVal request As WebRequest, ByRef Http As Object)
    ' e.g. Update option, headers, etc.
End Sub

''
' Hook for updating cURL before send
'
' @method PrepareCurl
' @param {WebClient} Client
' @param {WebRequest} Request
' @param in|out {String} Curl
''
Public Sub PrepareCurl(ByVal client As WebClient, ByVal request As WebRequest, ByRef Curl As String)
    ' e.g. Add flags to cURL
End Sub
Attribute VB_Name = "ImportXML"
Option Explicit

Sub LoadYtdXml()
    Call LoadXml("YTD.")
End Sub

Sub LoadXml(prefix)
'
'   Read the XML from a file and populate it back into the spreadsheet
'
'   This macro will walk the XML nodes call processNode() for each element; for each leaf node it will:
'   - construct a name of the form: <prefix>.<parent>.<child>.<leaf>
'     (note: the root node is not reference as is instead replaced by the prefix)
'   - look to see if there is a range in the spreadsheeet with that name
'   - insert the node text into the spreadsheet at that name
'
'   Repeated items etc. - there are various annotations that can be made to expand the way that data is inserted:
'
'   - REPEAT ROWS/COLUMN: define a non-range name (via Formula.Name Manager)
'     of the form: <prefix>.<parent>.<child>.Col|Row
'     (Note: each occurrence of the child will increment the row|col offset and
'      any 'leaf' nodes will be insert at a corresponding offset)
'
'   - CALCULATIONS/CONSTANTS: define a non-range name of the form: <prefix>.<parent>.<child>.<leaf>.Calc
'     * the <leaf> name is a virtual node - the calculated value will be inserted as if it was an actual node
'     * The CALC name's comment must be an xpath expression (use a literal value for constants) that
'       will be evaluated and inserted in the range named with the virtual leaf name
'
'   - MAPPED VALUES: define a range name of the form: <prefix>.<parent>.<child>.<leaf>.Map
'     * the range of the MAP should contain a 2 column table with the source and target values
'     * the <leaf> name is a real node - but a look up of the node value is done and paired value is inserted
'
    'Declare a variable as a FileDialog object.
    Dim fd As FileDialog
    Dim selectedItem As Variant
    Dim doc As DOMDocument60, node
           
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    ' Reset any column or row offsets
    Call clearOffsets(prefix)
    
    'Create a FileDialog object as a File Picker dialog box.
    Set fd = Application.FileDialog(msoFileDialogFilePicker)

    'Use the Show method to display the File Picker dialog box and return the user's action.
    With fd

        'The user pressed the button.
        If .Show = -1 Then
            'OK so grab the first string in the FileDialog SelectedItems collection.
            selectedItem = .SelectedItems(1)
            Call ProcessFilename(selectedItem)

            Set doc = New MSXML2.DOMDocument60
            doc.Async = False
            doc.Load (selectedItem)
            
            Set node = doc.DocumentElement.SelectNodes("/*").Item(0)
            Call ProcessNodes(prefix, node, 0, 0)
            
            Set doc = Nothing
        
        Else
            'The user pressed Cancel.
        End If
        
    End With
    
    'Set the object variable to Nothing.
    Set fd = Nothing

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    MsgBox (prefix & "XML Loaded " & selectedItem)

End Sub

Sub LoadXmlInternal(prefix, filename)
'
'   Read the XML from a file and populate it back into the spreadsheet
'
'   EXTERNAL API: Used by BGL Adapter etc.
'
    Dim doc As DOMDocument60, node
                
    ' Reset any column or row offsets
    Call clearOffsets(prefix)
    
    Call ProcessFilename(filename)
    
    Set doc = New MSXML2.DOMDocument60
    doc.Async = False
    doc.Load (filename)
    
    Set node = doc.DocumentElement.SelectNodes("/*").Item(0)
    Call ProcessNodes(prefix, node, 0, 0)
    
    Set doc = Nothing

End Sub

Sub ProcessFilename(filename)
'
'   Custom handling of the filename
'
    ' We are interested in anything prior to the first "_" as we expect
    ' filenames of the form: <fundcode>_abcd.xml
    Dim n
    n = Split(filename, "\")
    n = n(UBound(n))
    n = Split(n, "_")
    
    ' We will store the fundcode in a non-range name for reference within the spreadsheet
    If n(0) = "" Then n(0) = "<FundCode>"
    Call setNameComment("YTD.FundIntraYearCash.CashItem.Fund.Calc", """" & n(0) & """")
    Call setNameComment("YTD.FundIntraYearPortfolio.PortfolioItem.Fund.Calc", """" & n(0) & """")
    
End Sub




Function ProcessNodes(prefix, node, rowOffset, colOffset)
'
'   Recursively process nodes and find their range if applicable
'
    Dim r, row, col, nodeList, o, n 'As IXMLDOMElement
    
    Set nodeList = node.ChildNodes
    
    ' check if we need to use an offset
    o = rowOffsetFor(prefix, node)
    If o > -1 Then
        row = o
    Else
        row = rowOffset
    End If
    
    o = colOffsetFor(prefix, node)
    If o > -1 Then
        col = o
    Else
        col = colOffset
    End If
    
    ' fill in inherited or parent positional values
    Call calculations(prefix, node, row, col)
    
    For Each n In nodeList
        If n.ChildNodes.Length = 0 Then
            ' Nothing to do
        Else
            Dim nodeName
            nodeName = n.FirstChild.nodeName
            If nodeName = "#text" Or nodeName = "#cdata-section" Then
                ' if node is text then see it should be pushed into the spreadsheet
                Set r = Nothing
                On Error Resume Next
                ' Search for a named cell with the node name and drop in data if found
                Set r = Range(prefix & n.nodeName)
                On Error GoTo 0
                If Not r Is Nothing Then
                    Dim t
                    t = decodedText(prefix, n)
                    If t = "" Or (IsNumeric(t) And t = 0) Then
                        r.Cells(1 + row, 1 + col).ClearContents
                    Else
                        r.Cells(1 + row, 1 + col) = t
                    End If
                End If
            Else
                Call ProcessNodes(prefix & n.nodeName & ".", n, row, col)
            End If
        End If
    Next n
    
    ' Call clearOffsets(prefix)
End Function

Sub setNameComment(Name, Text)
'
'   lookup a formula name and set the comment
'
    Dim m As Name
    
    On Error Resume Next
    Set m = Names(Name)
    On Error GoTo 0
    
    If Not m Is Nothing Then
        ' set the comment
        m.Comment = Text
    End If
    
End Sub

Function decodedText(prefix, node)
'
'   Return data value from the node and decode it if required
'
    Dim m As Name, r As Range, i, t
    
    t = node.Text
    decodedText = t
    
    On Error Resume Next
    Set m = Names(prefix & node.nodeName & ".Map")
    On Error GoTo 0
    
    If Not m Is Nothing Then
        ' Lookup the node value and return the decoded value
        Set r = m.RefersToRange
        For i = 1 To r.Rows.Count
            If r.Cells(i, 2) = node.Text Then
                decodedText = r.Cells(i, 1)
                
                If r.Columns.Count > 2 Then
                    ' Check if we can use a secondary key to get a more precise decode
                    ' eg. MarketType = UN >> UnlistedTrust but with
                    ' UnlistedSecurityTypeCode we can refine to UnlistedCompany or similar
                    Dim j, v, Key
                    On Error Resume Next
                    Set v = node.SelectNodes(m.Comment)
                    Key = v.Item(0).Text
                    On Error GoTo 0
                    
                    For j = i To r.Rows.Count
                        If r.Cells(i, 2) = node.Text And r.Cells(j, 3) = Key Then
                            decodedText = r.Cells(j, 1)
                            Exit For
                            
                        End If
                    Next j
                End If

                Exit For
            End If
        Next i
    End If
    
End Function

Function offsetFor(prefix, suffix, node)
'
'   Return offset to use if required
'
    Dim n As Name, offset, opener, closer, step, counter, v, t, r As Range, c
    
    On Error Resume Next
    Set n = Names(prefix & suffix)
    On Error GoTo 0
    
    If n Is Nothing Then
        ' Now check if there is a key range defined
        On Error Resume Next
        Set n = Names(prefix & suffix & "Key")
        On Error GoTo 0
        If n Is Nothing Then
            offsetFor = -1
        Else
            ' Found a suffix key so work out key value
            On Error Resume Next
            Set v = node.SelectNodes(n.Comment)
            t = v.Item(0).Text
            On Error GoTo 0
            Set r = n.RefersToRange
            offsetFor = -1
            counter = 0
            For Each c In r.Cells
                If c & "" = t Then
                    offsetFor = counter
                End If
                counter = counter + 1
            Next c
            If offsetFor = -1 Then MsgBox ("Error: Key " & t & " Not Found for " & n.Name)
        End If
    Else
        offset = InStr(n.Value, ",")
        If offset > 0 Then
            ' array with step size
            opener = Left(n.RefersTo, offset)
            step = Mid(opener, 3, Len(opener) - 3) + 0
            counter = Mid(n.Value, offset + 1, Len(n.Value) - offset - 1) + 0
            closer = "}"
        Else
            opener = "="
            step = 1
            counter = Mid(n.Value, 2) + 0
            closer = ""
        End If
        
        offsetFor = counter * step
        n.RefersTo = opener & (counter + 1) & closer
    End If
End Function

Function rowOffsetFor(prefix, node)
'
'   Return offset to use if required
'
    rowOffsetFor = offsetFor(prefix, "Row", node)
End Function

Function colOffsetFor(prefix, node)
'
'   Return offset to use if required
'
    colOffsetFor = offsetFor(prefix, "Col", node)
End Function

Sub clearOffsets(prefix)
'
'  Find any Prefixed names with a .Col or .Row offsets and reset them to 0
'
    Dim n As Name, offset, s
    For Each n In Names
        If Left(n.Name, Len(prefix)) = prefix And _
            (Right(n.Name, 4) = ".Col" Or Right(n.Name, 4) = ".Row") And _
            Len(n.Name) > Len(prefix) + 4 Then
            offset = InStr(n.Value, ",")
            If offset > 0 Then
                ' array with step size
                s = Left(n.RefersTo, offset)
                n.RefersTo = s & "0}"
            Else
                ' simple counter
                n.RefersTo = "=0"
            End If
        End If
    Next n
End Sub

Sub calculations(prefix, node, row, col)
'
'  Calculate values
'
    Dim n As Name, r As Range, v As IXMLDOMSelection, t
    
    For Each n In Names
        If Left(n.Name, Len(prefix)) = prefix Then
            If Right(n.Name, 5) = ".Calc" And _
              Len(n.Name) > Len(prefix) + 5 Then
                If InStr(Mid(n.Name, Len(prefix) + 1, Len(n.Name) - Len(prefix) - 5), ".") = 0 Then
                    ' recalc
                    On Error Resume Next
                    If Left(n.Comment, 1) = "#" Then
                        t = Mid(Names(Mid(n.Comment, 2)).RefersTo, 2) + 0
                    ElseIf LCase(Left(n.Comment, 6)) = "=left(" Then
                        Dim p
                        p = Split(Mid(n.Comment, 7, Len(n.Comment) - 7), ",")
                        Set v = node.SelectNodes(p(0))
                        t = Left(v.Item(0).Text, p(1) + 0)
                    ElseIf Left(n.Comment, 1) = """" Then
                        t = Mid(n.Comment, 2, Len(n.Comment) - 2)
                    Else
                        Set v = node.SelectNodes(n.Comment)
                        t = v.Item(0).Text
                    End If
                    ' fill in value
                    Set r = Range(Left(n.Name, Len(n.Name) - 5))
                    If Not r Is Nothing Then
                        r.Cells(1 + row, 1 + col) = t
                    End If
                    On Error GoTo 0
                End If
            End If
        End If
    Next n
End Sub

Sub toggleXMLLoadButtons()
'
'   Show hide the XML Load Buttons
'
    Dim s As Shape
    Set s = ActiveWorkbook.ActiveSheet.Shapes("LoadYtdXml")
    s.Visible = Not s.Visible
End Sub

Sub LoadXmlFromString(prefix, xmlString)
'
'   Read the XML from a file and populate it back into the spreadsheet
'
'   EXTERNAL API: Used by BGL Adapter etc.
'
    Dim doc As DOMDocument60, node
                
    ' Reset any column or row offsets
    Call clearOffsets(prefix)
    
    Set doc = New MSXML2.DOMDocument60
    doc.Async = False
    doc.LoadXml (xmlString)
    
    Set node = doc.DocumentElement.SelectNodes("/*").Item(0)
    Call ProcessNodes(prefix, node, 0, 0)
    
    Set doc = Nothing

End Sub
Attribute VB_Name = "JSonObject"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private ScriptEngine As ScriptControl

Public Function InitScriptEngine()
    
    'Set ScriptEngine = New ScriptControl
    Set ScriptEngine = CreateObjectx86("MSScriptControl.ScriptControl") ' create ActiveX via x86 mshta host
    
    ScriptEngine.Language = "JScript"
    ScriptEngine.AddCode "function getProperty(jsonObj, propertyName) { return jsonObj[propertyName]; } "
    ScriptEngine.AddCode "function getKeys(jsonObj) { var keys = new Array(); for (var i in jsonObj) { keys.push(i); } return keys; } "
End Function

Public Function DecodeJsonString(ByVal JSonString As String)
    Set DecodeJsonString = ScriptEngine.eval("(" + JSonString + ")")
End Function

Public Function GetProperty(ByVal jsonObject As Object, ByVal propertyName As String) 'As Variant
    GetProperty = ScriptEngine.Run("getProperty", jsonObject, propertyName)
End Function

Public Function GetObjectProperty(ByVal jsonObject As Object, ByVal propertyName As String) 'As Object
    Set GetObjectProperty = ScriptEngine.Run("getProperty", jsonObject, propertyName)
End Function

Public Function GetKeys(ByVal jsonObject As Object) As String()
    Dim Length As Integer
    Dim KeysArray() As String
    Dim KeysObject As Object
    Dim Index As Integer
    Dim Key As Variant

    Set KeysObject = ScriptEngine.Run("getKeys", jsonObject)
    Length = GetProperty(KeysObject, "length")
    ReDim KeysArray(Length - 1)
    Index = 0
    For Each Key In KeysObject
        KeysArray(Index) = Key
        Index = Index + 1
    Next
    GetKeys = KeysArray
End Function

Function CreateObjectx86(sProgID)

    Static oWnd As Object
    Dim bRunning As Boolean

    #If Win64 Then
        bRunning = InStr(TypeName(oWnd), "HTMLWindow") > 0
        If IsEmpty(sProgID) Then
            If bRunning Then oWnd.Close
            Exit Function
        End If
        If Not bRunning Then
            Set oWnd = CreateWindow()
            oWnd.execScript "Function CreateObjectx86(sProgID): Set CreateObjectx86 = CreateObject(sProgID): End Function", "VBScript"
        End If
        Set CreateObjectx86 = oWnd.CreateObjectx86(sProgID)
    #Else
        If Not IsEmpty(sProgID) Then Set CreateObjectx86 = CreateObject(sProgID)
    #End If

End Function

Function CreateWindow()

    ' source http://forum.script-coding.com/viewtopic.php?pid=75356#p75356
    Dim sSignature, oShellWnd, oProc

    On Error Resume Next
    sSignature = Left(CreateObject("Scriptlet.TypeLib").GUID, 38)
    CreateObject("WScript.Shell").Run "%systemroot%\syswow64\mshta.exe about:""<head><script>moveTo(-32000,-32000);document.title='x86Host'</script><hta:application showintaskbar=no /><object id='shell' classid='clsid:8856F961-340A-11D0-A96B-00C04FD705A2'><param name=RegisterAsBrowser value=1></object><script>shell.putproperty('" & sSignature & "',document.parentWindow);</script></head>""", 0, False
    Do
        For Each oShellWnd In CreateObject("Shell.Application").Windows
            Set CreateWindow = oShellWnd.GetProperty(sSignature)
            If Err.number = 0 Then Exit Function
            Err.Clear
        Next
    Loop

End Function

Attribute VB_Name = "LogonForm"
Attribute VB_Base = "0{AC7E612A-EC03-4EEE-98EC-96C869360DC5}{2D61C1FD-2754-4AE7-9538-BCF2B7067AEF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
    Utils.UserID = LogonForm.UserID.Text
    LogonForm.Hide
    
End Sub

Private Sub CommandButton2_Click()
    LogonForm.Details = ""
    LogonForm.Hide
End Sub


Attribute VB_Name = "OAuth"
Option Explicit

Public Function GetOAuthAccessToken(ByVal Username As String, ByVal Password As String)
'
'   Requests an Excel resource owner access token
'   Parameters: Username, Password
'
    Dim environment, Business
    environment = Utils.defaultHost
    environment = Replace(environment, "services.", "app.")
    environment = Replace(environment, ".class-test", ".class-test")
    environment = Replace(environment, ".class-preprod", ".class-preprod")
    environment = Replace(environment, ".classsuper", ".class")
    
    GetOAuthAccessToken = getToken(environment, Username, Password, "ec48ee6d-8deb-4c57-8dcf-df67eb652e94", "01d1df14-5a4e-4a51-a9c0-d1ddc5fb63c9")

End Function

Private Function getToken(ByVal rootUrl As String, ByVal Username As String, ByVal Password As String, ByVal ClientId As String, ByVal ClientSecret As String) As String
'
'   OAuth Token Request Authorisation
'
    Dim ScriptEngine As Object
    Set ScriptEngine = CreateObjectx86("MSScriptControl.ScriptControl") ' create ActiveX via x86 mshta host
    
    ScriptEngine.Language = "JScript"
    ScriptEngine.AddCode "function encode(str) {return encodeURIComponent(str);}"
    
    Dim encodedUsername As String
    Dim encodedPassword As String
    Dim fullUrl As String
    Dim requestBody As String
    
    encodedUsername = ScriptEngine.Run("encode", Username)
    encodedPassword = ScriptEngine.Run("encode", Password)

    fullUrl = PrepareUrl(rootUrl) + "connect/token"
    requestBody = "username=" + encodedUsername + "&password=" + encodedPassword + "&grant_type=password"
    

    Dim client As New WebClient
 
    client.TimeoutMs = 180000
    client.BaseUrl = fullUrl
    client.EnableAutoProxy = True
    'Dim Auth As New HttpBasicAuthenticator
    'Auth.Setup Username:=encodedUsername, Password:=encodedPassword
    'Set client.Authenticator = Auth

    Dim request As New WebRequest
    request.Method = HttpPost
    request.Method = WebMethod.HttpPost
    request.ContentType = "application/x-www-form-urlencoded"
    
    Dim AuthHeader As String
    AuthHeader = "Basic " & EncodeBase64(ClientId & ":" & ClientSecret)
    request.AddHeader "Authorization", AuthHeader
    
 
    request.Body = requestBody
    Dim response As New WebResponse
    Set response = client.Execute(request)
    
   
    Dim jsonReader As New jsonObject
    jsonReader.InitScriptEngine
    Dim parsedObject As Object
    Set parsedObject = jsonReader.DecodeJsonString(response.Content)
    getToken = jsonReader.GetProperty(parsedObject, "access_token")
End Function

Function CreateObjectx86(sProgID)

    Static oWnd As Object
    Dim bRunning As Boolean

    #If Win64 Then
        bRunning = InStr(TypeName(oWnd), "HTMLWindow") > 0
        If IsEmpty(sProgID) Then
            If bRunning Then oWnd.Close
            Exit Function
        End If
        If Not bRunning Then
            Set oWnd = CreateWindow()
            oWnd.execScript "Function CreateObjectx86(sProgID): Set CreateObjectx86 = CreateObject(sProgID): End Function", "VBScript"
        End If
        Set CreateObjectx86 = oWnd.CreateObjectx86(sProgID)
    #Else
        If Not IsEmpty(sProgID) Then Set CreateObjectx86 = CreateObject(sProgID)
    #End If

End Function

Function CreateWindow()

    ' source http://forum.script-coding.com/viewtopic.php?pid=75356#p75356
    Dim sSignature, oShellWnd, oProc

    On Error Resume Next
    sSignature = Left(CreateObject("Scriptlet.TypeLib").GUID, 38)
    CreateObject("WScript.Shell").Run "%systemroot%\syswow64\mshta.exe about:""<head><script>moveTo(-32000,-32000);document.title='x86Host'</script><hta:application showintaskbar=no /><object id='shell' classid='clsid:8856F961-340A-11D0-A96B-00C04FD705A2'><param name=RegisterAsBrowser value=1></object><script>shell.putproperty('" & sSignature & "',document.parentWindow);</script></head>""", 0, False
    Do
        For Each oShellWnd In CreateObject("Shell.Application").Windows
            Set CreateWindow = oShellWnd.GetProperty(sSignature)
            If Err.number = 0 Then Exit Function
            Err.Clear
        Next
    Loop

End Function


Function EncodeBase64(Text As String) As String
    Dim arrData() As Byte
    arrData = StrConv(Text, vbFromUnicode)
    Dim objXML
    Dim objNode
    Set objXML = New MSXML2.DOMDocument60
    Set objNode = objXML.createElement("b64")
    objNode.dataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeBase64 = Replace(objNode.Text, vbLf, "")
    Set objNode = Nothing
    Set objXML = Nothing
End Function


Public Function GetApiResponse(ByVal fullUrl As String, ByVal accessToken As String) As ApiResponseObject
'
'   Retreive Data from Class End point using OAuth
'   Parameters: URL, AccessToken
'   Returns: ApiResponseObject
'
    Dim rawResponse As String
    rawResponse = GetRawApiResponse(fullUrl, accessToken)
    Dim myApiResponse As New ApiResponseObject
    myApiResponse.Init rawResponse
    Set GetApiResponse = myApiResponse
    
End Function

Private Function GetRawApiResponse(ByVal fullUrl As String, ByVal accessToken As String) As String
'
'   Retreive Data from Class End point using OAuth
'   Parameters: URL, AccessToken
'   Returns: String
'
    Dim client As New WebClient
    client.BaseUrl = fullUrl
    client.TimeoutMs = 180000
    client.EnableAutoProxy = True
    
    Dim AuthHeader As String
    AuthHeader = "Bearer " & accessToken
       
    Dim request As New WebRequest
    request.Method = HttpGet
    request.ContentType = "application/x-www-form-urlencoded"
    request.AddHeader "Authorization", AuthHeader
    request.Accept = "application/xml"
    request.ResponseFormat = WebFormat.XML
       
      
    Dim response As New WebResponse
    Set response = client.Execute(request)
    
    GetRawApiResponse = response.Content
    
End Function

Public Function ParseResponseErrors(ByVal myApiResponse As ApiResponseObject, Optional silent As Boolean = True)
'
'   Displays error messages and returns a list
'   Parameters: APIresponse, silent
'   Returns: List of Error messages
'
    If (myApiResponse.HasErrors) Then
        Dim errorList, errorItem
        For Each errorItem In myApiResponse.Errors
            errorList = errorList & vbCrLf & errorItem.Message
        Next errorItem
        If Not silent Then
            Call MsgBox("Error: " & errorList, vbOKOnly)
        End If
        ParseResponseErrors = errorList
    End If
End Function

Public Function ParseResponseMessages(ByVal myApiResponse As ApiResponseObject, Optional silent As Boolean = True)
'
'   Displayers Warning messages and returns a list
'   Parameters: APIresponse
'   Returns: List of warning messages
'
    If (myApiResponse.HasWarnings) Then
        Dim warningList, warningItem
        For Each warningItem In myApiResponse.Warnings
            warningList = warningList & vbCrLf & warningItem.Message
        Next warningItem
        If Not silent Then
            Call MsgBox("Error: " & warningList, vbOKOnly)
        End If
        ParseResponseMessages = warningList
    End If
End Function


Private Function getMyResponseData(ByVal myApiResponse As ApiResponseObject)
    ' Get Data for response
    If (myApiResponse.HasData = False) Then
        Return
    End If
    ' Transform data into nodes
    getMyResponseData = myApiResponse.Data
End Function


Attribute VB_Name = "OAuth2"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
 '================================================================================== '
'
' OAuth 2.0 Google Authenticator
' Developed by Kyle Beachill
' licence: MIT (http://www.opensource.org/licenses/mit-license.php)
'
' Inspired loosely by Tim Halls authentication classes in his Excel-Rest library:
' https://github.com/timhall/Excel-REST
'
'
' Features:
'     Simple class to handle Google OAuth 2.0 Authentication
'     Follows the Installed Application Flow
'     Returns Simply the value for the Authorization header in API requests
'
' Gotchas:
'     Tokens are held in plain text in the registry
'
' Required References:
'   - Microsoft Internet Controls
'   - Microsoft XML
'
' ================================================================================== '


Option Explicit

'// Simple enum for current authentication status
Private Enum AuthenticationStatus
    NotAuthenticated = 1
    TokenExpired = 2
    Authenticated = 3
End Enum


'// Application Client ID and Application Secret
Private strClientId As String
Private strClientSecret As String

'// Authentication codes, tokens and expiry date
Private strTokenKey As String
Private strToken As String
Private strRefreshToken As String
Private dtExpiresWhen As Date
Private strAuthCode As String

'// Url End points for the authentication
Private strAuthUrl As String
Private strTokenUrl As String
Private strRedirectUri As String
Private strScope As String
Private PromptUserLogin As Boolean

'// Internet Explorer variables for initial authentication request
Private WithEvents oIExplorer As InternetExplorer
Attribute oIExplorer.VB_VarHelpID = -1
Private blnIeComplete As Boolean

Private strResponseText As String
Private oResponse As Object

'// Save the request object to prevent being created for each token expiry
Private objXMLRequest As MSXML2.ServerXMLHTTP60



'// Since we are persisting the credentials to the registry, we need to read these in each time the class
'// is initialized, if they aren't found - these will be default values, "" for strings and 1900/01/01 for te date
Private Sub Class_Initialize()
    
    Dim sDate As String

    strToken = GetSetting("ClassOAuth", "Tokens", "Token")
    strRefreshToken = GetSetting("ClassOAuth", "Tokens", "RefreshKey")
    sDate = GetSetting("ClassOAuth", "Tokens", "TokenExpiry")
    
    If Len(sDate) > 0 Then
         dtExpiresWhen = CDate(sDate)
    Else
         dtExpiresWhen = #1/1/1900#
    End If
    
End Sub

'// Allows the overriding of the default google EndPoints - these are unlikely to change
Public Sub InitEndPoints( _
    Optional ByVal AuthUrl As String = "https://accounts.google.com/o/oauth2/auth", _
    Optional ByVal scope As String = "", _
    Optional ByVal TokenUrl As String = "https://accounts.google.com/o/oauth2/token", _
    Optional ByVal RedirectUri As String = "urn:ietf:wg:oauth:2.0:oob", _
    Optional ByVal PromptForUserLogin As Boolean = False _
)
    
    strAuthUrl = AuthUrl
    strTokenUrl = TokenUrl
    strRedirectUri = RedirectUri
    strScope = scope
    PromptUserLogin = PromptForUserLogin
    
End Sub

'// Application ID and Secret will always need passing, since they are required for refresh calls
'// Though these *could* be persisted in the registry also
Public Sub InitClientCredentials(ByVal ClientId As String, ByVal ClientSecret As String)

    strClientId = ClientId
    strClientSecret = ClientSecret

End Sub

'// Simple function to return the authentication status of the currently held credentials

Private Function getAuthenticationStatus() As AuthenticationStatus
        
    '// If the Refresh Token Length is 0 then the initial authentication hasn't occurred
'    If Len(strRefreshToken) = 0 Then
'        getAuthenticationStatus = NotAuthenticated
'        Exit Function
'    End If

    If PromptUserLogin Then
       getAuthenticationStatus = NotAuthenticated
       Exit Function
    End If
    
    If Len(strToken) = 0 Then
        getAuthenticationStatus = NotAuthenticated
        Exit Function
    End If
    
    '// If the refresh date is less than now (with a 10 second buffer) then the token has expired
    If dtExpiresWhen < DateAdd("s", 10, Now()) Then
        getAuthenticationStatus = NotAuthenticated 'TokenExpired
        Exit Function
    End If
    
    '// Otherwise the token is valid
    getAuthenticationStatus = Authenticated
    
    
End Function
Private Sub GetNewToken()

    'Set oIExplorer = New InternetExplorer
    Set oIExplorer = CreateObject("InternetExplorer.Application")
 
    With oIExplorer
        .Navigate CreateAuthRequest()
        .AddressBar = False
        .MenuBar = False
        .Resizable = True
        .Visible = True
    End With
    
    '// Wait for userInteraction
    Do: DoEvents: Loop Until blnIeComplete
   
    '// Do we have an Authentication Code?
    If Len(strAuthCode) = 0 Then
        MsgBox ("User Cancelled Authentication")
        CloseIE
        Err.Raise 1, description:="User Cancelled Authentication"
    End If
    
    '// Now Get a new Token
    If objXMLRequest Is Nothing Then Set objXMLRequest = New MSXML2.ServerXMLHTTP60
    
    With objXMLRequest
        .Open "POST", strTokenUrl, False
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        .Send CreateTokenRequest()

        If .Status <> 200 Then
            '// Error getting OAuth2 token
            Err.Raise vbObjectError + .Status, _
                description:="Failed to retrieve OAuth2 Token - " & .Status & ": " & .ResponseText
        End If
        
        '// Get the credentials from the response
        strToken = GetProp("access_token", .ResponseText)
        strRefreshToken = GetProp("refresh_token")
        dtExpiresWhen = DateAdd("s", CLng(GetProp("expires_in")), Now())
    
    End With
    
    '// Persist the Refresh key and expiry - the above should only ever need running once per application
'    SaveSetting "GoogleAuth", "Tokens", "RefreshKey", strRefreshToken
    SaveSetting "ClassOAuth", "Tokens", "Token", strToken
    SaveSetting "ClassOAuth", "Tokens", "TokenExpiry", CStr(dtExpiresWhen)
exit_with_error:
End Sub

Private Sub RefreshToken()

    If objXMLRequest Is Nothing Then Set objXMLRequest = New MSXML2.ServerXMLHTTP60
    
    With objXMLRequest
        .Open "POST", strTokenUrl, False
        .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
        .Send CreateRefreshRequest()
        If .Status <> 200 Then
            '// Error getting OAuth2 token
            Err.Raise vbObjectError + .Status, _
                description:="Failed to retrieve OAuth2 Token - " & .Status & ": " & .ResponseText
        End If
        
        '// Get the credentials from the response
        strToken = GetProp("access_token", .ResponseText)
        dtExpiresWhen = DateAdd("s", CLng(GetProp("expires_in")), Now())
    End With
    
    '// Persist new token in registry
    SaveSetting "ClassOAuth", "Tokens", "Token", strToken
    SaveSetting "ClassOAuth", "Tokens", "TokenExpiry", CStr(dtExpiresWhen)
        
        
End Sub
'// Simple function that gets a propery from a single depth JSON formatted string
'// Requires the property name
'// Requires te JSON string on the first pass
Private Function GetProp(strPropName As String, Optional strJSObject As String = "") As String
    
    Static oScriptControl As Object
    
    If oScriptControl Is Nothing Then Set oScriptControl = CreateObjectx86("MSScriptControl.ScriptControl") 'oScriptControl = CreateObject("ScriptControl")
    
    With oScriptControl
        .Language = "JScript"
        .AddCode "function getProp(json, prop) { return json[prop]; }"
        
        If Len(strJSObject) > 0 Then
            strResponseText = strJSObject
            Set oResponse = .eval("(" & strJSObject & ")")
        End If
        GetProp = .Run("getProp", oResponse, strPropName)
    End With

End Function
'// Public property to return the Authorisation value header for a request
Public Property Get AuthHeader() As String
    
    Dim eAuthStatus As AuthenticationStatus
    
    eAuthStatus = getAuthenticationStatus
    
    If eAuthStatus = NotAuthenticated Then
       GetNewToken
      'MsgBox ("Upload")
       Application.Wait (Now + TimeValue("0:00:05"))
       If strAuthCode = "" Then
         Application.Wait (Now + TimeValue("0:00:05"))
       End If
       If strAuthCode = "" Then
         Application.Wait (Now + TimeValue("0:00:05"))
       End If
       If strAuthCode = "" Then
         MsgBox ("Upload")
       End If
       CloseIE
    ElseIf eAuthStatus = TokenExpired Then
        RefreshToken
    End If
   
    AuthHeader = "Bearer " & strToken
   
    
End Property

'//===========================================================================================================
'// String building functions for the requests

'// Step 1: The initial url for authentication - Note the scope attribute, this sets what the application can access
Private Function CreateAuthRequest() As String
    ' Generate initial Authentication Request
    ' Using installed application flow: https://developers.google.com/accounts/docs/OAuth2InstalledApp
    CreateAuthRequest = strAuthUrl
    If InStr(1, CreateAuthRequest, "?") < 1 Then: CreateAuthRequest = CreateAuthRequest & "?"
    CreateAuthRequest = CreateAuthRequest & "response_type=code"
    CreateAuthRequest = CreateAuthRequest & "&client_id=" & strClientId
    CreateAuthRequest = CreateAuthRequest & "&redirect_uri=" & strRedirectUri
    CreateAuthRequest = CreateAuthRequest & "&scope=" & strScope
End Function

'// Step 2: The initial POST body to get the initial Token and refresh token
Private Function CreateTokenRequest() As String

    CreateTokenRequest = "code=" & strAuthCode
    CreateTokenRequest = CreateTokenRequest & "&client_id=" & strClientId
    CreateTokenRequest = CreateTokenRequest & "&client_secret=" & strClientSecret
    CreateTokenRequest = CreateTokenRequest & "&redirect_uri=" & strRedirectUri
    CreateTokenRequest = CreateTokenRequest & "&grant_type=authorization_code"

End Function

'// Step 3: The POST body to refresh a token after it has expired
Private Function CreateRefreshRequest() As String

    CreateRefreshRequest = "client_id=" & strClientId
    CreateRefreshRequest = CreateRefreshRequest & "&client_secret=" & strClientSecret
    CreateRefreshRequest = CreateRefreshRequest & "&refresh_token=" & strRefreshToken
    CreateRefreshRequest = CreateRefreshRequest & "&grant_type=refresh_token"
    
End Function

'//===========================================================================================================
'// Event handling for Internet Explorer Object
'// OAuth 2.0 Process flow requires a user to provide access through the browser for initial Authentication

'//Break Loop on user Quit of IE
Private Sub oIExplorer_OnQuit()
    blnIeComplete = True
   
End Sub

'//Check the title Window, if Success or Denied Found End the IE interaction
Private Sub oIExplorer_TitleChange(ByVal Text As String)
    Dim doc As Object
    Dim ret As String
    Dim startIndex As Integer
    Dim endIndex As Integer
    Dim iE_Url As String
    
    If InStr(1, Text, "code=") > 0 Or InStr(1, oIExplorer.LocationURL, "code=") > 0 Then
       If InStr(1, Text, "code=") > 0 Then
         iE_Url = Text
       Else
         iE_Url = oIExplorer.LocationURL
       End If
       startIndex = InStr(1, iE_Url, "code=")
       endIndex = InStr(1, iE_Url, "&scope")
       strAuthCode = Mid(iE_Url, startIndex + 5, endIndex - startIndex - 5)
       oIExplorer.Quit
    ElseIf InStr(1, Text, "Denied") > 0 Then
        oIExplorer.Quit
    End If

End Sub

Public Function CloseIE(Optional URL As String)

    Dim oShell As Object
    Dim oShellWindows As Object
    Dim oShellWindow As Object
    Dim sPartialURL As String


    If (URL <> "") Then  'And InStr(1, URL, UCase("my/login/excel/keep")) > 0
       sPartialURL = URL
    Else
       sPartialURL = "my/login/excel/close"
    End If

  

    Set oShell = CreateObject("Shell.Application")
    Set oShellWindows = oShell.Windows

    For Each oShellWindow In oShellWindows
        If oShellWindow.Name = "Internet Explorer" Then
            If InStr(oShellWindow.Document.URL, sPartialURL) > 0 Then
           ' If InStr(oShellWindow.LocationName, "FundReference") > 0 Then
               Exit For
            End If
        End If
    Next oShellWindow
    If Not oShellWindow Is Nothing Then
        oShellWindow.Quit
    Else
       ' MsgBox "The specified Internet Explorer window was not found!", vbExclamation
    End If

    Set oShell = Nothing
    Set oShellWindows = Nothing
    Set oShellWindow = Nothing


 'FindAndTerminate ("IExplore.exe")
 'IEWindowFromTitle ("Do not Close")
 
 End Function
 
Sub FindAndTerminate(ByVal strProcName As String)
    
    Dim objWMIService, objProcess, colProcess
    Dim strComputer, strList
    strComputer = "."
    Set objWMIService = GetObject("winmgmts:" _
    & "{impersonationLevel=impersonate}!\\" _
    & strComputer & "\root\cimv2")
    Set colProcess = objWMIService.ExecQuery _
    ("Select * from Win32_Process Where Name = '" & strProcName & "'")
    If colProcess.Count > 0 Then
    For Each objProcess In colProcess
       objProcess.Terminate
       Exit For
    Next objProcess
    End If
    
End Sub


Function IEWindowFromTitle(sTitle As String)

    Dim objShellWindows As New SHDocVw.ShellWindows
    Dim win As Object, rv As SHDocVw.InternetExplorer

    For Each win In objShellWindows
        If TypeName(win.Document) = "HTMLDocument" Then
            If UCase(win.Document.Title) = UCase(sTitle) Then
                 win.Quit
                 Exit For
            End If
        End If
    Next
End Function
Public Function GetApiResponse(ByVal fullUrl As String, ByVal accessToken As String) As ApiResponseObject
'
'   Retreive Data from Class End point using OAuth
'   Parameters: URL, AccessToken
'   Returns: ApiResponseObject
'
    Dim rawResponse As String
    rawResponse = GetRawApiResponse(fullUrl, accessToken)
    Dim myApiResponse As New ApiResponseObject
    myApiResponse.Init rawResponse
    Set GetApiResponse = myApiResponse

End Function
Private Function GetRawApiResponse(ByVal fullUrl As String, ByVal accessToken As String) As String
'
'   Retreive Data from Class End point using OAuth
'   Parameters: URL, AccessToken
'   Returns: String
'
    Dim client As New WebClient
    client.BaseUrl = fullUrl
    client.TimeoutMs = 180000
    client.EnableAutoProxy = True

    Dim request As New WebRequest
    request.Method = HttpGet
    request.ContentType = "application/x-www-form-urlencoded"
    request.AddHeader "Authorization", accessToken
    request.Accept = "application/xml"
    request.ResponseFormat = WebFormat.XML


    Dim response As New WebResponse
    Set response = client.Execute(request)
    GetRawApiResponse = response.Content

End Function


Public Function ParseResponseErrors(ByVal myApiResponse As ApiResponseObject, Optional silent As Boolean = True)
'
'   Displays error messages and returns a list
'   Parameters: APIresponse, silent
'   Returns: List of Error messages
'
    If (myApiResponse.HasErrors) Then
        Dim errorList, errorItem
        For Each errorItem In myApiResponse.Errors
            errorList = errorList & vbCrLf & errorItem.Message
        Next errorItem
        If Not silent Then
            Call MsgBox("Error: " & errorList, vbOKOnly)
        End If
        ParseResponseErrors = errorList
    End If
End Function

Public Function ParseResponseMessages(ByVal myApiResponse As ApiResponseObject, Optional silent As Boolean = True)
'
'   Displayers Warning messages and returns a list
'   Parameters: APIresponse
'   Returns: List of warning messages
'
    If (myApiResponse.HasWarnings) Then
        Dim warningList, warningItem
        For Each warningItem In myApiResponse.Warnings
            warningList = warningList & vbCrLf & warningItem.Message
        Next warningItem
        If Not silent Then
            Call MsgBox("Error: " & warningList, vbOKOnly)
        End If
        ParseResponseMessages = warningList
    End If
End Function

Public Sub OpenWebPage(URL As String)
            
    Dim IEapp As Object
    Dim WebUrl As String
    
    Set IEapp = CreateObject("InternetExplorer.Application") 'Set IEapp = InternetExplorer
    WebUrl = URL
    'You can't really automate the passing of variables (ie. Login Name and Passwords) using Chrome or FireFox, but the below code will open the desired page
    'Shell ("C:\Program Files (x86)\Google\Chrome\Application\chrome.exe -url " & WebUrl)  'Opens URL in Chrome if installed, replace chrome.exe with FireFox
                                                                                            
    With IEapp
        .silent = True 'No Pop-ups
        .Visible = True 'Set InternetExplorer to Visible
        .Navigate WebUrl 'Load web page
      
    End With
               
End Sub



Attribute VB_Name = "ProgressBar"
Option Explicit

Sub UpdateProgress(Optional ByVal ProgressCounter As Long, _
    Optional ByVal TotalCount As Long, _
    Optional ByVal statusMessage As String = vbNullString, _
    Optional ByVal CloseOnCompletion As Boolean = True, _
    Optional ByVal Title As String = vbNullString)
'
'   Displays a progress bar using the ProgressBar form.
'   If CloseOnCompleteion is set the Form is closed automatically when complete.
'
    
   
    '   ensure that form is visible
    DoEvents

    'Display the Proressbar
    If Not isFormOpen("ProgressBarForm") Then
        ProgressBarForm.Show
        If Not Title = vbNullString Then ProgressBarForm.Caption = Title
    End If
    
    ' Do this to force the screen to refresh properly otherwise the progress bar gets flakey
    ' We do not do this if the window is minimized
    If Application.WindowState <> xlMinimized Then ProgressBarForm.Show
    
    If ProgressCounter = 0 And TotalCount = 0 Then
        ' exception for first run
        Call ProgressBarForm.StatusUpdate(statusMessage)
    Else
        ' update the ProgressCounter and Status
        Call ProgressBarForm.UpdateForm(ProgressCounter, TotalCount, statusMessage)
    End If
    
    If CloseOnCompletion And ProgressCounter >= TotalCount Then Unload ProgressBarForm

End Sub
Attribute VB_Name = "ProgressBarForm"
Attribute VB_Base = "0{4260B8ED-22F6-4241-AAB4-B3A414E6865E}{803D2495-1793-4046-84C6-3F9B134077F7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cancelButton_Click()
Dim OauthObj As New OAuth2
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    

    OauthObj.CloseIE (OAuthHost & "/my/login/excel/close")
    OauthObj.CloseIE (OAuthHost & "/my/login/excel/keep")
    '   ensure protection is on
    Call unprotectWorkbook
    Call toggleProtection
    
    Unload ProgressBarForm
    End
    
End Sub

Sub UpdateForm(ByVal counter As Long, ByVal total As Long, _
                Optional ByVal statusMessage As String = vbNullString)

    Dim Status As String
    
    Status = Format(counter, String(Len(CStr(total)), "0")) & " of " & total
    If Not statusMessage = vbNullString Then
        Status = Left(Status & " | " & statusMessage, 80) & "..."
    End If
    
    statusLabel.Caption = Status
    percentLabel.Caption = CStr(CLng(counter * 100 / total)) & "%"
    barLabel.Width = baseLabel.Width * (counter / total)
    
    If counter = total Then
        CancelButton.Caption = "Close"
        statusLabel.Caption = "Complete. Press Close to exit."
    End If

End Sub

Sub StatusUpdate(ByVal statusMessage As String)
    
    statusLabel.Caption = statusMessage
    
End Sub


Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "SaveModules"
Sub SaveCodeModules()
'This code Exports all VBA modules
Dim i%, sName$
Dim vbaPath As String
vbaPath = ActiveWorkbook.Path & "\" & "ExcelTransactionLoader_vba\"
With CreateObject("Scripting.FileSystemObject")
    If Not .FolderExists(vbaPath) Then .CreateFolder vbaPath
End With

With ThisWorkbook.VBProject
    For i% = 1 To .VBComponents.Count
        If .VBComponents(i%).CodeModule.CountOfLines > 0 Then
            sName$ = .VBComponents(i%).CodeModule.Name
           .VBComponents(i%).Export vbaPath & sName$ & ".vba"
           
        End If
    Next i
End With

End Sub

Sub ImportCodeModules()
With ThisWorkbook.VBProject
    For Each VBComp In .VBComponents
        ModuleName = VBComp.CodeModule.Name
        If ModuleName <> "Module1" Then
           If VBComp.Type = 100 Then
                'Thisworkbook or worksheet module
                'We do nothing
           Else
                .VBComponents.Remove VBComp
                .VBComponents.Import ActiveWorkbook.Path & "\" & "ExcelTransactionLoader_vba\" & ModuleName & ".vba"
           End If
        End If
    Next
End With
End Sub

Attribute VB_Name = "SelectFinancialYear"
Attribute VB_Base = "0{8F394A43-8874-4A5A-87F3-8946451A3711}{EEBB2672-AF42-4CDC-85D4-16868A099D14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Public cancelled


Private Sub btnCancel_Click()
    Me.cancelled = True
    Me.Hide
End Sub



Private Sub btnSecurityTax_Click()
    Me.Hide
    Me.cancelled = False
    Application.ScreenUpdating = False
    FinancialDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yyyy")
    FinancialDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yyyy")
    
    TaxStatementBulkEntry.cbFinancialYear.Text = SelectFinancialYear.cbFinancialYear.Text
    If ThisWorkbook.Worksheets("FundTax").Visible = True Then
        Call unprotectWorkbook
        ThisWorkbook.Worksheets("FundTax").Visible = False
        Call toggleProtection
    End If
    Call sortDistributionsBySecurity
    Application.ScreenUpdating = True
    TaxStatementBulkEntry.cbFinancialYear.Text = SelectFinancialYear.cbFinancialYear.Text ' Added by Navin to pass selected Financial year into TaxStatementBulkEntry Form
    TaxStatementBulkEntry.Show
End Sub

Private Sub btnFundTaxStatement_Click()
    
    ' Get data feed balance Data (unbalanced) store against distribution (fund specific process only, should be included as part of initial data retreival)?
    ' Get Fund Name for list of fund codes(fund specific process only, should be included as part of initial data retreival)?
    FinancialDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yyyy")
    FinancialDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yyyy")
    ThisWorkbook.Worksheets("FundTax").Range("Start_Financial_Date").Value = FinancialDateStart
    ThisWorkbook.Worksheets("FundTax").Range("End_Financial_Date").Value = FinancialDateEnd
    
    Call createFundTaxPivotTable
    ' To Do: format pivot table and expand checks
    
    Application.Wait (Now + TimeValue("0:00:01"))
    Unload Me
    Call ProgressBar.UpdateProgress(4, 4, "Complete...", True, "Fund Tax Data Collection")
    
End Sub

Public Function setPivotFilterValue(pivotTableName, worksheetname, pivotFieldName, Optional fundcode, Optional default As Boolean)
    '
    '   Sets the filter to the first value within the provided field name
    '   parameters: pivotTableName, worksheet, pivotFieldName
    '
    Dim pt As PivotTable
    Dim pf As PivotField
    Dim pi As PivotItem
    Dim filter As String
    
    Call sortDistributionsByFund
    Application.ScreenUpdating = False
    Call unprotectWorkbook
    Set pt = ThisWorkbook.Worksheets(worksheetname).PivotTables(pivotTableName)

    pt.PivotCache.MissingItemsLimit = xlMissingItemsNone
    Set pf = pt.PivotFields(pivotFieldName)
    ' Hide all rows in pivot if not equal to first(default fund) value
       
    If default Then
        filter = pf.PivotItems(1)
        ThisWorkbook.Worksheets(worksheetname).PivotTables(pivotTableName).PivotFields(pivotFieldName).CurrentPage = filter
    ElseIf Not IsMissing(fundcode) Then
        filter = pt.PivotFields(pivotFieldName).PivotItems(fundcode)
        ThisWorkbook.Worksheets(worksheetname).PivotTables(pivotTableName).PivotFields(pivotFieldName).CurrentPage = filter
    End If
           
    If default Then
        For Each pi In pf.PivotItems
            If Not filter = pi.Value Then
                pi.Visible = False
            End If
        Next
    End If

    pt.PivotCache.Refresh
    
    Call toggleProtection
    Application.ScreenUpdating = True
End Function

Function getPivotFilterValue(pivotTableName, worksheetname, pivotFieldName)
    '
    '   Gets the value of a filter used by pivot table
    '   parameters: pivotTableName, worksheet, pivotFieldName
    '   returns: Pivot Table Filter Value
    '
    Dim pt As PivotTable
    Dim pf As PivotField
    Dim pi As PivotItem
    Dim filter As String
        Set pt = ThisWorkbook.Worksheets(worksheetname).PivotTables(pivotTableName)

        pt.PivotCache.MissingItemsLimit = xlMissingItemsNone
        'pt.PivotCache.Refresh

        Set pf = pt.PivotFields(pivotFieldName)
        For Each pi In pf.PivotItems
            If pi.Visible Then
                filter = pi.Value
            End If
        Next

        getPivotFilterValue = filter
End Function

Public Function generateFundTaxStatements(fundcode)

    Dim description As String, yearEnd As Boolean
    Dim security As Variant, securityDate As Variant, holding As Variant, template As Variant
    Dim templates, holdingAccounts, securityList, components, i, templateCount, holdingcount
    Dim numberOfStatements, msg, msgtitle
    ' Get list of funds securities held
    securityList = getDistributionInvestmentCodeList(fundcode)
    ' Get list of funds holding accounts
    holdingAccounts = getDistributionHoldingCodeList(fundcode)
    ' Get list of template components
    templates = getWorkbookTaxTemplatesList()
    
    i = 0
    holdingcount = 0
    numberOfStatements = 0
    For Each holding In holdingAccounts
        For Each security In securityList
            If security = holding Then
                templateCount = 0
                For Each template In templates
                    components = Split(templates(templateCount), "||")
                    If components(0) = security Then
                        ' Save relevant templates to taxtemplate tab
                        Dim ataxstatementpercentages(23), distdate, g
                        g = 0
                        While g < UBound(components) - 8
                            If components(g + 4) = "" Then
                                ' default blank to zero
                                ataxstatementpercentages(g + 2) = 0
                            Else
                                ' convert stored amount to percentage
                                ataxstatementpercentages(g + 2) = components(g + 4) / 100
                            End If
                            g = g + 1
                        Wend
                        'ataxstatementpercentages = Array("", "", ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 5).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 6).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 7).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 8).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 5).value, _
                        ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 8).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 9).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 10).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 11).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 12).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 13).value, _
                        ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 14).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 15).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 16).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 17).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 18).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 19).value, _
                        ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 20).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 21).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 22).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 23).value, ThisWorkbook.Worksheets("TaxTemplates").Range("startTaxTemplate").offset(g, 24).value)
                        distdate = Format(components(1), "dd/mm/yy")
                        If Not (CDate(distdate) >= CDate(FinancialDateStart) And CDate(distdate) <= CDate(FinancialDateEnd)) Then
                           GoTo TemplateLoop
                        End If
                        
                        description = components(3)
                        yearEnd = False ' Always generate individual distribution
                        ataxstatementpercentages(0) = 0 ' TFN witholding
                        ataxstatementpercentages(1) = 0 ' Non resident witholding
                        If (Mid(distdate, 1, 5) = "30/06" Or Mid(distdate, 1, 5) = "30-06") Then
                            If SecurityHasMorethanOneRatio(Trim(UCase(security)), templates) Then
                                numberOfStatements = numberOfStatements + populateTaxStatement(security, description, yearEnd, ataxstatementpercentages, distdate, fundcode)
                            Else
                                numberOfStatements = numberOfStatements + populateTaxStatement(security, description, yearEnd, ataxstatementpercentages, , fundcode)
                            End If
                        Else
                            numberOfStatements = numberOfStatements + populateTaxStatement(security, description, yearEnd, ataxstatementpercentages, distdate, fundcode)
                        End If
                    End If
TemplateLoop:
                    templateCount = templateCount + 1
                Next template
            End If
        Next security
    Next holding

    ' Tell them how many they got
    msg = numberOfStatements & " Tax Statement Event(s) generated."
    msgtitle = "Events Generated"
    
cleanup:
    Call MsgBox(msg, vbOKOnly, msgtitle)
End Function

Private Function SecurityHasMorethanOneRatio(security As String, templates As Variant) As Boolean
    Dim RatioCount, i, templateCount As Integer
    Dim template, components As Variant
    
    RatioCount = 0
    templateCount = 0
    SecurityHasMorethanOneRatio = False
    For Each template In templates
       components = Split(templates(templateCount), "||")
       If components(0) = security Then
         If ((DateValue(components(1)) <= DateValue(FinancialDateEnd)) And _
         (DateValue(components(1)) >= DateValue(FinancialDateStart))) Then
             RatioCount = RatioCount + 1
             If RatioCount > 1 Then
                 SecurityHasMorethanOneRatio = True
                 Exit For
             End If
         End If
     End If
    templateCount = templateCount + 1
    Next template
End Function
Private Function hasDataForYear()
    '
    ' Check if refreshed for date = combo box date and update labels appropriatly
    '
    ' Below line commented by Navin, Incorrect logic as it does not check for previous financial years
    'If Mid(Me.cbFinancialYear.text, 6, 2) = Mid(Me.lblDateRequestedCap.Caption, 7, 2) Or Mid(Format(Utils.getVariable("IncomeRetreived"), "dd/mm/yy"), 7, 2) = Mid(Me.cbFinancialYear.text, 6, 2) Then
    If Mid(Format(Utils.getVariable("TaxTemplateYear"), "dd/mm/yy"), 7, 2) = Mid(Me.cbFinancialYear.Text, 6, 2) Then ' Added by Navin: works for any financia year selected
        If Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "IncomeScope") And Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "IncomeRetreived") And Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "TaxTemplateYear") Then
            Me.lblBrandCodeCap.Caption = Utils.getVariable("IncomeScope")
            Me.lblDateRequestedCap.Caption = Format(Utils.getVariable("IncomeRetreived"), "dd/mm/yy")
            Me.lblLastRefreshedCap.Caption = Format(Utils.getVariable("TaxTemplateYear"), "yyyy") & " Financial Year"
            
            Const SecinDay As Long = 86400
            Dim iSec As Long, MyTime As Date
            iSec = Round(Utils.getVariable("IncomeGenTime"), 0)
            MyTime = iSec / SecinDay
            Me.lblTimeToLoadCap.Caption = Format(MyTime, "h:mm:ss")
            Me.lblNoData.Caption = ""
            Me.btnFundTaxStatement.Enabled = True
            Me.btnSecurityTax.Enabled = True
        End If
    Else
        
        ' No income previously generated
        Me.btnFundTaxStatement.Enabled = False
        Me.btnSecurityTax.Enabled = False
        Me.lblBrandCodeCap.Caption = "N/A"
        Me.lblDateRequestedCap.Caption = "N/A"
        Me.lblLastRefreshedCap.Caption = "N/A"
        Me.lblTimeToLoadCap.Caption = "N/A"
        Me.lblNoData.Caption = "No Data exists, Refresh Data is required"
    End If
End Function

Private Sub btnRefresh_Click()
    ' Below two lines added by Navin to keep selecting financial year after generating data
    Dim selectedFinancialYear As String
    Dim oauth2Obj As New OAuth2
    selectedFinancialYear = SelectFinancialYear.cbFinancialYear.Text
    If ThisWorkbook.Worksheets("Overview").Range("Brand").Value = "" Then
        Call MsgBox("Unable to request tax statement data. " & vbCrLf & vbCrLf & "Please ensure your brand code has been entered on the Overview tab.", vbOKOnly, "Error: Brand Code Required")
        End
    End If
    FinancialDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yyyy")
    FinancialDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yyyy")
    Me.Hide
    PromptForLogin = True
    oauth2Obj.OpenWebPage (OAuthHost & "/my/login/excel/keep")
    GenerateDistributionData
    Call ProgressBar.UpdateProgress(, , "Downloading Tax Components...", False, "Tax Component Retrieval")
    generateRelevantTaxStatementTemplate
    Call ProgressBar.UpdateProgress(, , "Downloading Tax Components...", True, "Tax Component Retrieval")
    UpdateTaxTemplateStatus
    oauth2Obj.CloseIE (OAuthHost & "/my/login/excel/keep")
    Call ProgressBar.UpdateProgress(, , "Updating Tax Template Status...", True, "Tax Template Status")
    Unload Me
    SelectFinancialYear.cbFinancialYear.Text = selectedFinancialYear ' Added by Navin to keep selecting financial year after generating data
    SelectFinancialYear.Show

End Sub
Sub generateRelevantTaxStatementTemplate()
    Dim i, taxTemplatesExist
    Dim xmlhtp As New MSXML2.XMLHTTP60
    Dim xmldoc As New DOMDocument60
    Dim sURL As String
    Dim SEnv As String
    Dim WebService As Object
   
    Dim accessToken As String, URL As String, errormessages As String
    Dim apiresponse As ApiResponseObject
    Dim Data As MSXML2.IXMLDOMElement
    Dim CheckDateStart, CheckDateEnd
    Dim investmentlist
    Dim relevanttemplates() As String, relevantTemplateComponents
    Dim template, OauthHeader
    Dim oauth2Obj As New OAuth2
    
    Me.Hide
    Me.cancelled = False
       
    Call sortDistributionsByFund
    
    CheckDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yyyy")
    CheckDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yyyy")

    ' Get Template Data
    Dim environment
    environment = Utils.defaultHost
    environment = Replace(environment, "services.", "app.")
    environment = Replace(environment, ".class-test", ".class-test")
    environment = Replace(environment, ".class-preprod", ".class-preprod")
    environment = Replace(environment, ".classsuper", ".class")
    
    URL = GetFYTaxTemplates(Replace(environment, "https://app", "https://taxstatement"), DateValue(CheckDateStart), DateValue(CheckDateEnd))
'    ' Post request

    OauthHeader = getOAuthToken
      
    Set apiresponse = oauth2Obj.GetApiResponse(URL, OauthHeader)
'   Show errors on response
    If (apiresponse.HasErrors()) Then
        errormessages = oauth2Obj.ParseResponseErrors(apiresponse, False)
    Else
        errormessages = oauth2Obj.ParseResponseMessages(apiresponse)
        If Not (apiresponse.HasWarnings()) Then
            'Critical error, no api Message
        End If
    End If
    ' Success but 0 results
    Dim dataItem
    Set Data = apiresponse.Data
    If Not Data Is Nothing Then
        If Data.ChildNodes.Length > 0 Then
            For Each dataItem In Data.ChildNodes
                If dataItem.BaseName = "NumberOfTemplates" Then
                    If CInt(dataItem.Text) > 0 Then
                        ' Update Forms
                        Call TaxStatementBulkEntry.UpdateTaxTemplateLookup(Data)
                        Call TaxStatementBulkEntry.UpdateTaxStatementBulKEntry(Data)
                    Else
                        Call MsgBox("There were no stored tax templates for the requested security", vbOKOnly, "No Tax Templates")
                   End If
                End If
            Next dataItem
        End If
    End If
    
    relevanttemplates = getRelevantAPITemplateList(Data)
    relevantTemplateComponents = downloadRelevantTemplateComponents(relevanttemplates(), Data)
       
    ' Save relevant templates to taxtemplate tab
    Dim g
    g = 0
    While relevantTemplateComponents(g, 0) <> ""
        Dim ataxstatementpercentages, distdate, datecheck
        ataxstatementpercentages = Array("", "", relevantTemplateComponents(g, 3), relevantTemplateComponents(g, 4), relevantTemplateComponents(g, 5), relevantTemplateComponents(g, 6), relevantTemplateComponents(g, 7), relevantTemplateComponents(g, 8), relevantTemplateComponents(g, 9), relevantTemplateComponents(g, 10), relevantTemplateComponents(g, 11), relevantTemplateComponents(g, 12), relevantTemplateComponents(g, 13), relevantTemplateComponents(g, 14), relevantTemplateComponents(g, 15), relevantTemplateComponents(g, 16), relevantTemplateComponents(g, 17), relevantTemplateComponents(g, 18), relevantTemplateComponents(g, 19), relevantTemplateComponents(g, 20), relevantTemplateComponents(g, 21), relevantTemplateComponents(g, 22), relevantTemplateComponents(g, 23), relevantTemplateComponents(g, 24))
        distdate = Format(Mid(relevantTemplateComponents(g, 1), 1, InStr(1, relevantTemplateComponents(g, 1), "T") - 1), "dd/mm/yyyy")
        ' Check if template already exists in sheet using code and date
        Dim q, duplicateTemplate
        q = 0
        duplicateTemplate = False
        Do While q < 1000
            If Format(Trim(ThisWorkbook.Worksheets("TaxTemplates").Range("TaxComponentTemplateStart").offset(q, 1).Value), "yyyy-mm-dd") = Mid(Trim(relevantTemplateComponents(g, 1)), 1, 10) Then
                datecheck = True
            Else
                datecheck = False
            End If
            If relevantTemplateComponents(g, 0) = ThisWorkbook.Worksheets("TaxTemplates").Range("TaxComponentTemplateStart").offset(q, 0).Value And datecheck Then
                duplicateTemplate = True
                Exit Do
            End If
            q = q + 1
        Loop
        If Not duplicateTemplate Then
            Call SaveTaxTemplateComponents(relevantTemplateComponents(g, 0), relevantTemplateComponents(g, 2), ataxstatementpercentages, "", distdate)
        End If
        g = g + 1
    Wend
End Sub
Sub GenerateDistributionData()
    ' Generate Distributions using date selected on bulk tax statement
    ' Check vs current date Format(Date, "dd/mm/yy")
    Dim incomeLastRetreived, starttime, FYEnd, IncomeScope, incomeRefreshTimeTaken, fundListCount, fundList
    
    If Format(incomeLastRetreived, "dd/mm/yy") = "" Then
        Application.ScreenUpdating = False
        Call unprotectWorkbook
        
        ThisWorkbook.Worksheets("Distributions").Cells.Clear
        starttime = Timer
        
        FYEnd = "30/06/20" & Mid(SelectFinancialYear.cbFinancialYear.Value, 6, 2)
               
        ' Check if fund list provided
        fundListCount = 0
        If ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value <> "" Then
            While ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value <> ""
                If fundList = "" Then
                    fundList = Trim(ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value)
                Else
                    fundList = fundList & "," & Trim(ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value)
                End If
                fundListCount = fundListCount + 1
            Wend
            Call GenerateSplitIncomeLists(FYEnd, ThisWorkbook.Worksheets("Overview").Range("Brand").Value, fundList, , LogonForm.UserID.Text, LogonForm.Password.Text)
        Else
            ' Use standard calls to get fund lists
            If ThisWorkbook.Worksheets("Overview").Range("Brand").Value = "" Then
                Call GenerateBrandIncomeList(FYEnd)
                IncomeScope = defaultBusiness()
            Else
                Call GenerateBrandIncomeList(FYEnd, ThisWorkbook.Worksheets("Overview").Range("Brand").Value)
                IncomeScope = defaultBusiness() & "/" & ThisWorkbook.Worksheets("Overview").Range("Brand").Value
            End If
    
            Call toggleProtection
            Application.ScreenUpdating = True
            incomeRefreshTimeTaken = Timer - starttime
            incomeLastRetreived = Format(Date, "dd/mm/yy")
            Call Utils.setVariable("IncomeGenTime", incomeRefreshTimeTaken)
            Call Utils.setVariable("IncomeRetreived", incomeLastRetreived)
            Call Utils.setVariable("IncomeScope", IncomeScope)
            Call Utils.setVariable("TaxTemplateYear", FYEnd)
        End If
    End If
    
    Application.StatusBar = ""
End Sub



Private Sub cbFinancialYear_Change()
    Call hasDataForYear
End Sub

Private Sub lblhelppage_Click()
ActiveWorkbook.FollowHyperlink address:="https://app.class.com.au/help/plink_taxstatement_templaterelease", NewWindow:=False

End Sub



Private Sub lblNote_Click()

End Sub




Private Sub txtHelpLink_Enter()

ActiveWorkbook.FollowHyperlink address:="https://app.class.com.au/help/plink_taxstatement_templaterelease", NewWindow:=False

End Sub

Private Sub UserForm_Initialize()
     ' Below lines added by Navin
     Dim intStartYear As Integer
     Dim intYear As Integer
     Dim monthNow As Integer
     Dim intCount As Integer
     intCount = 0
     
    ' Fill Combobox with year until now (starting 2014-2015)
    ' If month is less than June, set financial year as currentYear-1 to current year
     monthNow = Format(Now(), "MM")
     If monthNow < 7 Then
        intYear = Format(Now(), "YYYY") - 1
     Else
        intYear = Format(Now(), "YYYY")
     End If
     
     Me.cbFinancialYear.Clear
     intStartYear = 2014
      Do While intStartYear <= intYear
         Me.cbFinancialYear.AddItem intStartYear & "-" & Mid(intStartYear, 2) + 1 & ": Financial Year"
         'Me.cbFinancialYear.AddItem year(Date) & "-" & Mid(year(Date), 2) + 1 & ": Financial Year" ' Commented by Navin
         intStartYear = intStartYear + 1
         intCount = intCount + 1
     Loop
    ' Select curent Year in box
    ' Me.cbFinancialYear.ListIndex = intCount
    Me.cbFinancialYear.Text = intYear & "-" & Mid(intYear, 2) + 1 & ": Financial Year" ' Added by Navin
 
    ' Below two lines commented by Navin
    ' Me.cbFinancialYear.AddItem year(Date) & "-" & Mid(year(Date), 2) + 1 & ": Financial Year"
    ' Me.cbFinancialYear.AddItem year(Date) - 1 & "-" & Mid(year(Date), 2) - 0 & ": Financial Year"
    ' Me.cbFinancialYear.AddItem year(Date) - 2 & "-" & Mid(year(Date), 2) - 1 & ": Financial Year"
    ' Me.cbFinancialYear.AddItem year(Date) - 3 & "-" & Mid(year(Date), 2) - 2 & ": Financial Year"
    ' Me.cbFinancialYear.AddItem year(Date) - 4 & "-" & Mid(year(Date), 2) - 3 & ": Financial Year"
    ' Default text prior FY year
    ' Below Line commented by Navin
    ' Me.cbFinancialYear.text = year(Date) - 1 & "-" & Mid(year(Date), 2) - 0 & ": Financial Year"
     
    Call hasDataForYear
    ' Default close
    Me.cancelled = True
End Sub


Attribute VB_Name = "SetHostAndBusiness"
Attribute VB_Base = "0{91B640A1-AD14-4233-9662-4EE130DFD569}{91E94889-3BB5-474B-B2C0-7EBAB7942551}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public cancelled

Private Sub OkButton_Click()
    Call setProperty("Host", Host.Value)
    Call setProperty("Business", Business.Value)
    Call setProperty("Brand", Brand.Value)
    Call setProperty("Fund", Fund.Value)
    SetHostAndBusiness.Hide
    
    ' clear cached data for new business
    If InStr(1, Utils.getVariable("IncomeScope"), "/") > 0 Then
        If Utils.getVariable("Business") <> Mid(Utils.getVariable("IncomeScope"), 1, InStr(1, Utils.getVariable("IncomeScope"), "/") - 1) Then
            Call clearCachedUtils
        End If
    Else
        If Utils.getVariable("Business") <> Utils.getVariable("IncomeScope") Then
            Call clearCachedUtils
        End If
    End If
    
End Sub

Private Sub cancelButton_Click()
'
'   Set the properties
'
    Host = ""
    Business = ""
    SetHostAndBusiness.Hide
    cancelled = True
End Sub

Private Sub UserForm_Activate()
    cancelled = False
    fillform
End Sub

Private Sub UserForm_Initialize()
    fillform
End Sub

Sub fillform()
    Host = defaultHost()
    Business = defaultBusiness()
    Brand = defaultBrand()
    Fund = defaultFund()
End Sub
Attribute VB_Name = "SetHostAndBusinessx"
Attribute VB_Base = "0{CADDB072-7A3E-4EAB-BD41-CA969663EB26}{EC302177-1B69-4254-9A7B-F3468550DA59}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public cancelled

Private Sub OkButton_Click()
    Call TransactionLoader.setProperty("Host", Host.Value)
    Call TransactionLoader.setProperty("Business", Business.Value)
    SetHostAndBusiness.Hide
End Sub

Private Sub cancelButton_Click()
'
'   Set the properties
'
    Host = ""
    Business = ""
    SetHostAndBusiness.Hide
    cancelled = True
End Sub

Private Sub UserForm_Activate()
    cancelled = False
End Sub

Private Sub UserForm_Initialize()
     
    Host = defaultHost()
    Business = defaultBusiness()
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TaxStatement"
Attribute VB_Base = "0{5956934C-5277-46FD-B6F5-7DE5A1D3DAFC}{C7598C1C-664A-4F8D-AC10-DA0D5C9452CC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btnOk_Click()
      
    ' Fill in settings based on selections
    If TaxStatement.SecurityCode.Value = "" Then
        MsgBox ("Please Enter a Security Code")
    ElseIf DividendLookup.DividendList.ListIndex < 0 And DividendLookup.DividendList.ListIndex < DividendLookup.DividendList.ListCount Then
        ' Check if individual error
        If TaxStatement.rbCombineIncomeAnnoucements.Value <> True Then
            MsgBox ("Please Select an Income Annoucement from Lookups...")
        Else
            
            TaxStatement.Hide
        End If
    Else
        ' setup submit/convert and validate buttons
        If TaxStatement.rbCombineIncomeAnnoucements.Value = True Then
            TaxStatementBulkEntry.btnSubmit.Enabled = False
        Else
            TaxStatementBulkEntry.btnSubmit.Enabled = True
        End If
        
        TaxStatement.Hide
    End If
    
    
End Sub

Private Sub btnCancel_Click()
    SecurityCode.Value = ""
    TaxStatement.FinancialYear.Value = ""
    End
End Sub

Private Sub LookupButton_Click()
Dim retrieved, oldCancelCaption
' Capture Default
oldCancelCaption = DividendLookup.CancelButton.Caption

' Check Lookup button Visibility
If rbCombineIncomeAnnoucements.Value = True Then
    'DividendLookup.SelectButton.Visible = False
    'DividendLookup.cancelButton.Caption = "Close"
Else
    DividendLookup.SelectButton.Visible = True
End If

' exit if no code entered
If Trim(SecurityCode) = "" Then
    MsgBox ("Please enter a Security Code")
    ' Back to default position
    DividendLookup.CancelButton.Caption = oldCancelCaption
Else
    ' refresh the list
    retrieved = getDividendData(SecurityCode.Value)
    If retrieved Then
        DividendLookup.DividendList.RowSource = "Dividends!Dividends"
        
        ' Filter out distributions in different period
        Dim CheckDateStart, CheckDateEnd
        If TaxStatement.FinancialYear.Value <> "" Then
            ' Given a 3 month buffer either FY and limited to prior FY
            CheckDateStart = Format(DateSerial(TaxStatement.FinancialYear.Value - 1, 7, 1), "dd/mm/yy")
            CheckDateEnd = Format(DateSerial(TaxStatement.FinancialYear.Value, 6, 30), "dd/mm/yy")
            i = 1
            Do While ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value <> ""
                If CDate(ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value) < CheckDateStart Or CheckDateEnd < CDate(ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value) Then
                    ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).EntireRow.Delete
                    DividendLookup.DividendList.RowSource = "Dividends!Dividends"
                Else
                    i = i + 1
                End If
            Loop
        ' Update named range
        ActiveWorkbook.Names("Dividends").RefersToR1C1 = "=Dividends!R1C1:R" & i + 1 & "C8"
        Else
            ' Load standard
            DividendLookup.DividendList.RowSource = "Dividends!Dividends"
        End If
        
    End If
    
    ' Prompt user to select new value
    If retrieved Then
        ' Show the list
        DividendLookup.Show
        TaxStatement.Hide
        
        If Not DividendLookup.cancelled And DividendLookup.DividendList.ListIndex > 0 Then
            EventType = DividendLookup.selectedBaseType
            ExDividendDate = Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
            PaymentDate = Format(DividendLookup.selectedPaymentDate, "dd/mm/yyyy")
            Amount = DividendLookup.selectedAmount
            FrankedPercent = DividendLookup.selectedFrankingPercent * 100
        End If
        
        ' Back to default position
        DividendLookup.CancelButton.Caption = oldCancelCaption
        
        TaxStatement.Enabled = True
        
        TaxStatement.Show
        ' remember the code for next time
        lastCode = SecurityCode.Value

    End If
End If
        


End Sub



Private Sub UserForm_Initialize()
    
FinancialYear.AddItem year(Date) - 3
FinancialYear.AddItem year(Date) - 2
FinancialYear.AddItem year(Date) - 1
FinancialYear.AddItem year(Date)
FinancialYear.AddItem year(Date) + 1

    
' Prepare Dividend Lookup for default combination (non individual select)
DividendLookup.SelectButton.Visible = False
    
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    DividendLookup.SelectButton.Visible = True
End Sub
Attribute VB_Name = "TaxStatementBulkEntry"
Attribute VB_Base = "0{6C85A2A1-3087-4D4C-9699-CBF46EBF659B}{F115EE4A-DF01-4F86-AFB2-3F0A6929BA3C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Public cancelled, lastCode, percentageToggled, individualDistToggled, pageIndex As Integer

Private Sub btnCalcQuantity_Click()
    ' Find funds that hold security on given date
    ' TaxStatementBulkEntry.tbParticipatingQuantity.value = getParticipatingQuantity(TaxStatementBulkEntry.tbInvestmentAccount.value, TaxStatementBulkEntry.tbParticipatingQuantityDate.value)
End Sub

Private Sub btnCancel_Click()

Unload Me

End Sub

Private Sub btnClear_Click()
    Call clearTaxComponents
End Sub

Public Function clearTaxComponents()
    Dim ccontrol As control
    For Each ccontrol In Me.Controls
        If TypeName(ccontrol) = "TextBox" Then
            ' Exception for detail
            If ccontrol.Name = "tbInvestmentAccount" Or ccontrol.Name = "tbFinancialYear" Or ccontrol.Name = "tbParticipatingQuantityDate" Or ccontrol.Name = "tbParticipatingQuantity" Or ccontrol.Name = "tbTaxEventDescription" Or ccontrol.Name = "tbGrossDistribution" Then
            Else
                ccontrol.Value = 0
            End If
        End If
    Next ccontrol
    
    Me.tbGrossDistribution.Text = 0
    Me.lblNetDistValue.Caption = ""
End Function

Private Sub GenerateDistributions()
    
    Dim incomeLastRetreived, incomeRefreshTimeTaken, IncomeScope, starttime, endTime, msgResult, FYEnd, fundListCount, fundList
    ' Get income information if not yet retreived
    incomeLastRetreived = Utils.getVariable("IncomeRetreived")
    incomeRefreshTimeTaken = Utils.getVariable("IncomeGenTime")
    IncomeScope = Utils.getVariable("IncomeScope")
    
'    ' Alert for distribution generation
'    'If Format(incomeLastRetreived, "dd/mm/yy") = Format(Date, "dd/mm/yy") Then
'    If ThisWorkbook.Worksheets("Distributions").Range("A1").value = "" Then
'        ' No income previously generated
'        MsgBox ("Downloading All Distributions and calculating Tax Statements, This may take some time.")
'    Else
'        If IncomeScope = "" Or incomeLastRetreived = "" Or incomeRefreshTimeTaken = "" Then
'            msgResult = MsgBox("Would you like to use existing data?", vbYesNo, "Income Data Refresh")
'            ' set Last retreived date as prior date.
'            incomeLastRetreived = Format(Date - 1, "dd/mm/yy")
'        Else
'            msgResult = MsgBox("All distribution income was loaded for """ & IncomeScope & """ on " & Format(incomeLastRetreived, "dd/mm/yy") & " for FY" & Mid(TaxStatementBulkEntry.cbFinancialYear.value, 6, 2) & " and took " & Round(incomeRefreshTimeTaken, 0) & " seconds ." & vbCrLf & vbCrLf & "Would you like to use existing data?", vbYesNo, "Income Data Refresh")
'        End If
'        If msgResult = vbNo Then
'            incomeLastRetreived = ""
'        End If
'    End If
    
    ' Generate Distributions using date selected on bulk tax statement
    ' Check vs current date Format(Date, "dd/mm/yy")
    If Format(incomeLastRetreived, "dd/mm/yy") = "" Then
        Application.ScreenUpdating = False
        Call unprotectWorkbook
        
        ThisWorkbook.Worksheets("Distributions").Cells.Clear
        starttime = Timer
        
        FYEnd = "30/06/20" & Mid(TaxStatementBulkEntry.cbFinancialYear.Value, 6, 2)
               
        ' Check if fund list provided
        fundListCount = 0
        If ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value <> "" Then
            While ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value <> ""
                If fundList = "" Then
                    fundList = Trim(ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value)
                Else
                    fundList = fundList & "," & Trim(ThisWorkbook.Worksheets("Funds").Range("TaxStatementFundList").offset(fundListCount, 0).Value)
                End If
                fundListCount = fundListCount + 1
            Wend
            Call GenerateSplitIncomeLists(FYEnd, ThisWorkbook.Worksheets("Overview").Range("Brand").Value, fundList, , LogonForm.UserID.Text, LogonForm.Password.Text)
        Else
            ' Use standard calls to get fund lists
            If ThisWorkbook.Worksheets("Overview").Range("Brand").Value = "" Then
                Call GenerateBrandIncomeList(FYEnd)
                IncomeScope = defaultBusiness()
            Else
                Call GenerateBrandIncomeList(FYEnd, ThisWorkbook.Worksheets("Overview").Range("Brand").Value)
                IncomeScope = defaultBusiness() & "/" & ThisWorkbook.Worksheets("Overview").Range("Brand").Value
            End If
    
            Call toggleProtection
            Application.ScreenUpdating = True
            incomeRefreshTimeTaken = Timer - starttime
            incomeLastRetreived = Format(Date, "dd/mm/yy")
            Call Utils.setVariable("IncomeGenTime", incomeRefreshTimeTaken)
            Call Utils.setVariable("IncomeRetreived", incomeLastRetreived)
            Call Utils.setVariable("IncomeScope", IncomeScope)
            Call Utils.setVariable("TaxTemplateYear", FYEnd)
        End If
    End If
    
    Application.StatusBar = ""
    
End Sub


Private Sub btnSaveComponents_Click()
    ' Function to allow Partners to save local coppies of Tax Statement Templates for later review
    
    Dim sdescription As String
    Dim distdate As String
    Dim ataxstatementpercentages
        
    ' Check for % or $ and convert to percentage prior to saving template
    If Not percentageToggled Then
        If Not convertToPercentage Then Exit Sub
    End If
    
    sdescription = Me.tbTaxEventDescription.Value
    ataxstatementpercentages = Array(Me.tbLessTFNAmountWithheld.Value, Me.tbLessForeignWithholdingTax.Value, Me.tbDividendsFranked.Value, Me.tbDividendsUnfranked.Value, Me.tbFrankingCredit.Value, Me.tbInterest.Value, Me.tbOtherIncome.Value, Me.tbInterestIncome.Value, Me.tbModifiedPassiveIncome.Value, Me.tbOtherAssesableIncome.Value, Me.tbTaxCredits.Value, Me.tbDiscountedCapitalGainDomestic.Value, Me.tbDiscountedCapitalGainForeign.Value, Me.tbCGTConcessionAmount.Value, Me.tbGrossedUpCapitalGainsDiscountMethod.Value, Me.tbCapitalGainsIndexationMethodDomestic.Value, Me.tbCapitalGainsIndexationMethodForeign.Value, Me.tbCapitalGainsOtherMethodDomestic.Value, Me.tbCapitalGainsOtherMethodForeign.Value, Me.tbTaxExemptedAmounts.Value, Me.tbTaxFreeAmounts.Value, Me.tbTaxDeferredAmounts.Value, Me.tbCapitalReturns.Value, Me.tbAmitCostBase)
    
    ' Set invidivual date to that selected
    If individualDistToggled Then
        ' check not first row or last row
        If DividendLookup.selectionIndex <> 0 Or DividendLookup.selectionIndex <> DividendLookup.DividendList.ListCount - 1 Then
            ' No Dist. Annoucement selected, use tax template date
            If DividendLookup.selectionIndex = -1 Then
                distdate = Format(TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.selectionIndex, 1), "dd/mm/yy")
            Else
                distdate = Format(DividendLookup.DividendList.List(DividendLookup.selectionIndex), "dd/mm/yy")
            End If
        Else
            MsgBox ("Individual distribution selected, Please select a valid distribution")
            Exit Sub
        End If
    End If

    ' Check for % or $ and convert to percentage prior to saving template
    If Not percentageToggled Then
        If Not convertToPercentage Then Exit Sub
    End If

'    ' Check for duplicate Tax Templates
'    Dim i, countSpecificTemplates, countAnnualTemplates, annualRow, specificRow, msgResult, messageString
'    countSpecificTemplates = 0
'    countAnnualTemplates = 0
'    For i = 0 To 500
'        If ThisWorkbook.Worksheets("TaxTemplates").Range("C2").offset(i, 0).value = UCase(Me.tbInvestmentAccount.value) Then
'            ' Annual tax statement
'            If ThisWorkbook.Worksheets("TaxTemplates").Range("C2").offset(i, 2).value <> "" Then
'                countAnnualTemplates = countAnnualTemplates + 1
'                annualRow = i
'            End If
'            ' Specific tax statement
'            If ThisWorkbook.Worksheets("TaxTemplates").Range("C2").offset(i, 2).value = distDate Then
'                countSpecificTemplates = countSpecificTemplates + 1
'            specificRow = i
'            End If
'        End If
'    Next i

    ' Save to TaxTemplate tab
    If IsEmpty(distdate) Then
        Call SaveTaxTemplateComponents(Me.tbInvestmentAccount.Value, sdescription, ataxstatementpercentages, Me.lblNetDistValue.Caption)
    Else
        Call SaveTaxTemplateComponents(Me.tbInvestmentAccount.Value, sdescription, ataxstatementpercentages, Me.lblNetDistValue.Caption, distdate)
    End If

    Dim response
    response = MsgBox("Tax Template Saved Sucessfully, Click ok to enter another template.", vbOKCancel, "Tax Template:" & Me.tbInvestmentAccount.Value & " saved")
    If response = vbCancel Then
        End
    End If
    
End Sub
Public Function GetSoapRequest()
    Dim strResult As String
    Dim xmlhtp As Object, xmldoc As Object, oRecordSetFromXML As Object
    Set xmlhtp = CreateObject("msxml2.xmlhttp.6.0")
    With xmlhtp
            .Open "get", "http://[server]/ServiceName.svc/FunctionName", False
            .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded"
            .Send
            Set xmldoc = CreateObject("msxml2.DOMDocument.6.0")
            strResult = .ResponseText
            xmldoc.LoadXml strResult
            Set oRecordSetFromXML = AdoFunction.GetRSFromString(xmldoc.Text)
    End With
    Set xmldoc = Nothing
    Set xmlhtp = Nothing
End Function

Public Function setPageIndex(myPageIndex As Integer)
    pageIndex = myPageIndex
End Function

Public Function getPageIndex()
    getPageIndex = pageIndex
End Function


Public Sub btnTaxTemplates_Click()

    Dim i, taxTemplatesExist
    Dim xmlhtp As New MSXML2.XMLHTTP60
    Dim xmldoc As New DOMDocument60
    Dim sURL As String
    Dim SEnv As String
    Dim WebService As Object
    'Dim monString As String
    
    Dim accessToken As String, URL As String, errormessages As String
    Dim apiresponse As ApiResponseObject
    Dim Data As MSXML2.IXMLDOMElement
    Dim CheckDateStart, CheckDateEnd
    Dim investmentlist, OauthHeader
    Dim investmentcodes As String

    Me.btnReview.Enabled = True
    TaxStatementBulkEntry.cbToggleYearEndDate.Enabled = True
    
    CheckDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yyyy")
    CheckDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yyyy")
    
    ' Check if Security Code empty
    If Me.tbInvestmentAccount.Value = "" And Me.cbShowAll.Value = False Then
        Call MsgBox("Investment security code required to lookup Class tax templates", vbOKOnly, "Investment Code Required")
        Exit Sub
    End If
    
    ' Check and assign settings
    If IsEmpty(individualDistToggled) Then
        individualDistToggled = False
    End If
    If IsEmpty(getPageIndex) Or getPageIndex = 0 Then
        Call setPageIndex(1)
    End If
    If Me.tbInvestmentAccount.Text <> "" Then
        investmentcodes = Me.tbInvestmentAccount.Value
    End If
    
    ' Get Template Data
    Dim environment
    environment = Utils.defaultHost
    environment = Replace(environment, "services.", "app.")
    environment = Replace(environment, ".class-test", ".class-test")
    environment = Replace(environment, ".class-preprod", ".class-preprod")
    environment = Replace(environment, ".classsuper", ".class")
    
    If Me.cbShowAll.Value = True Then
        URL = GetTaxTemplatesByDateRange(Replace(environment, "https://app", "https://taxstatement"), DateValue(CheckDateStart), DateValue(CheckDateEnd), pageIndex) 'OAuth.
    Else
        If individualDistToggled Then
            URL = GetTaxTemplatesBySecurityCodes(Replace(environment, "https://app", "https://taxstatement"), investmentcodes, DateValue(CheckDateStart), DateValue(CheckDateEnd), pageIndex) 'OAuth
        Else
            ' Get list of currently held investment codes
            'investmentlist = TransactionLoader.getDistributionInvestmentCodeList
            'investmentCodes = Join(investmentlist, ",")
            
            ' Only display current selected investment
            URL = GetTaxTemplatesBySecurityCodes(Replace(environment, "https://app", "https://taxstatement"), investmentcodes, DateValue(CheckDateStart), DateValue(CheckDateEnd), pageIndex) 'OAuth
        End If
    End If
    ' Success but 0 results
    
    OauthHeader = getOAuthToken
    Dim oauth2Obj As New OAuth2
    
    Set apiresponse = oauth2Obj.GetApiResponse(URL, OauthHeader)
    
    Dim dataItem
    Set Data = apiresponse.Data
        ' Show errors on response
    If (apiresponse.HasErrors()) Then
        errormessages = oauth2Obj.ParseResponseErrors(apiresponse, False)
    Else
        errormessages = oauth2Obj.ParseResponseMessages(apiresponse)
        If Not (apiresponse.HasWarnings()) Then
            'Critical error, no api Message
        End If
    End If
    
    If Not Data Is Nothing Then
        If Data.ChildNodes.Length > 0 Then
            For Each dataItem In Data.ChildNodes
                If dataItem.BaseName = "NumberOfTemplates" Then
                    If CInt(dataItem.Text) > 0 Then
                        ' Update Forms
                        Call UpdateTaxTemplateLookup(Data)
                        TaxTemplateLookup.Show
                        Call UpdateTaxStatementBulKEntry(Data)
                    Else
                        If pageIndex = 1 Then
                            Call MsgBox("There were no stored tax templates for the requested security", vbOKOnly, "No Tax Templates")
                        Else
                            Call MsgBox("There were no additional templates availible", vbOKOnly, "No additional templates")
                            Call setPageIndex(pageIndex - 1)
                        End If
                    End If
                End If
            Next dataItem
        End If
    End If
    
End Sub




Private Sub btnTogglePercentage_Click()

If IsEmpty(percentageToggled) Then
    percentageToggled = False
End If

If Not percentageToggled Then
    convertToPercentage
Else
    convertToDollar
End If

End Sub

Public Function convertToDollar()
   
Dim sumOfStatement, netDistribution As Double, Amount As Double, iPercent As Double
Dim ccontrol As control
Dim controlarray, i

' array of controls for relevant TextBoxes for easy sum
' tbNetDistribution excluded
' tbGrossDistribution
' tbNetCapitalGain
' tbDistributedCapitalGain
' tbNon-primaryProductionIncome
' tbAssesableIncome
controlarray = Array("tbFrankingCredit", "tbTaxCredits", "tbDividendsFranked", "tbDividendsUnfranked", "tbInterest", "tbOtherIncome", "tbNonPrimaryProductionIncome", "tbInterestIncome", "tbModifiedPassiveIncome", "tbOtherAssesableIncome", "tbDiscountedCapitalGainDomestic", "tbDiscountedCapitalGainForeign", "tbCGTConcessionAmount", "tbCapitalGainsIndexationMethodDomestic", "tbCapitalGainsIndexationMethodForeign", "tbCapitalGainsOtherMethodDomestic", "tbCapitalGainsOtherMethodForeign", "tbDistributedCapitalGains", "tbNetCapitalGain", "tbTaxExemptedAmounts", "tbTaxFreeAmounts", "tbTaxDeferredAmounts", "tbCapitalReturns", "tbLessTFNAmountWithheld", "tbLessForeignWithholdingTax", "tbGrossedUpCapitalGainsDiscountMethod", "tbAmitCostBase")

If Format(Me.tbGrossDistribution.Value, "General Number") * 100 = 100 Or Format(Me.tbGrossDistribution.Value, "General Number") * 100 = 1 Then
    Application.ScreenUpdating = False
    
    ' Update form label to give context
    If Me.tbNetDistribution.Value = 0 Or Me.tbNetDistribution.Value = "" Then
        Me.lblNetDistValue.Caption = Me.tbNetDistribution.Value
        Me.lblNetDistValue.Caption = Round(Val(Me.lblNetDistValue.Caption), 6)
    End If
       
    ' Find Sum of statement
    sumOfStatement = 0
    For Each ccontrol In Me.Controls
         If TypeName(ccontrol) = "TextBox" Then
             For i = 0 To UBound(controlarray, 1)
                'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                 If ccontrol.Name = controlarray(i) Then
                        ' Exception calculations for credits
                        If ccontrol.Name = "tbFrankingCredit" Or ccontrol.Name = "tbTaxCredits" Then
                            ' Do nothing
                        Else
                            sumOfStatement = CDec(sumOfStatement) + CDec(Format(ccontrol.Value, "General Number"))
                        End If
                 End If
                'End If
            Next i
        End If
    Next ccontrol
    
    ' Calc % of Net Distribution
    Dim tempFcredit, tempTCredit, tempDividendsFranked, tempAssessableIncome, tempNonPrimaryProductionIncome, tempLessTFN, tempLessForeignTax, tempNetDistribution
    Dim residual, residualtotal
    tempFcredit = CDec(Format(Me.tbFrankingCredit.Value, "General Number"))
    tempTCredit = CDec(Format(Me.tbTaxCredits.Value, "General Number"))
    tempDividendsFranked = CDec(Format(Me.tbDividendsFranked.Value, "General Number"))
    tempAssessableIncome = CDec(Format(Me.tbAssessableIncome.Value, "General Number"))
    tempNonPrimaryProductionIncome = CDec(Format(Me.tbNonPrimaryProductionIncome.Value, "General Number"))
    tempLessTFN = CDec(Format(Me.tbLessTFNAmountWithheld.Value, "General Number"))
    tempLessForeignTax = CDec(Format(Me.tbLessForeignWithholdingTax.Value, "General Number"))
    tempNetDistribution = CDec(Format(Me.tbNetDistribution.Value, "General Number"))
    
    For Each ccontrol In Me.Controls
         If TypeName(ccontrol) = "TextBox" Then
             For i = 0 To UBound(controlarray, 1)
                'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                 If ccontrol.Name = controlarray(i) Then
                        ' Exception calculations for credits and totals
                        If ccontrol.Name = "tbFrankingCredit" Then
'   SAM                     If tempDividendsFranked <> 0 Then
'                                ccontrol.Value = Format(ccontrol.Value, "General Number")
'                                ccontrol.Value = Math.Round(Trim(Me.tbDividendsFranked.Value * ccontrol.Value) * CDec(Me.lblNetDistValue.Caption), 4)
'                            Else
'                                Me.tbFrankingCredit.Value = 0
'                                Me.tbFrankingCredit.Value = Math.Round(Format(Me.tbFrankingCredit.Value, "General Number"), 4)
'                            End If
                            ccontrol.Value = Format(ccontrol.Value, "General Number")
                            ccontrol.Value = Math.Round(Trim(ccontrol.Value) * CDec(Me.lblNetDistValue.Caption), 6) '4
                        ElseIf ccontrol.Name = "tbTaxCredits" Then
'   SAM                      If tempAssessableIncome <> 0 Then
'                                Me.tbTaxCredits.Value = tempTCredit * tempAssessableIncome * CDec(Me.lblNetDistValue.Caption)
'                                Me.tbTaxCredits.Value = Math.Round(Format(Me.tbTaxCredits.Value, "General Number"), 4)
'                            Else
'                                Me.tbTaxCredits.Value = 0
'                                Me.tbTaxCredits.Value = Math.Round(Format(Me.tbTaxCredits.Value, "General Number"), 4)
'                            End If
                            ccontrol.Value = Format(ccontrol.Value, "General Number")
                            ccontrol.Value = Math.Round(Trim(ccontrol.Value) * CDec(Me.lblNetDistValue.Caption), 6) '4
                        Else
                            ' Apply $
                            ccontrol.Value = Format(ccontrol.Value, "General Number")
                            ccontrol.Value = Trim(CDec(Me.lblNetDistValue.Caption) * ccontrol.Value)
                            ccontrol.Value = Format(ccontrol.Value, "General Number")
                        End If
                 End If
                'End If
            Next i
        End If
    Next ccontrol
    

    ' Adjustments for $ totals
    Me.tbAssessableIncome.Value = CDec(Format(Me.tbAssessableIncome.Value, "General Number") * CDec(Format(Me.lblNetDistValue.Caption, "General Number")))
    Me.tbAssessableIncome.Value = Format(Me.tbAssessableIncome.Value, "General Number")
   'Me.tbAssessableIncome.value = Round(Me.tbAssessableIncome.value, 2)
    Me.tbNonPrimaryProductionIncome.Value = CDec(Format(tempNonPrimaryProductionIncome, "General Number")) * CDec(Me.lblNetDistValue.Caption)
    Me.tbNonPrimaryProductionIncome.Value = Format(Me.tbNonPrimaryProductionIncome.Value, "General Number")
   'Me.tbNonPrimaryProductionIncome.value = Round(Me.tbNonPrimaryProductionIncome.value, 2)
    
    ' Check if Net Distribution $ to be adjusted
    If tempLessForeignTax <> 0 Or tempLessTFN <> 0 Then
        If (CDbl(sumOfStatement) + CDbl(tempLessForeignTax) + CDbl(tempLessTFN)) <> CDbl(Format(Me.tbGrossDistribution.Value, "General Number")) Or sumOfStatement <> 1 Then
            MsgBox ("Error: Net Distribution does not Balance up to calculated Gross Distribution, Check your figures")
        Else
            Me.tbGrossDistribution.Value = (CDbl(tempNetDistribution) + CDbl(tempLessForeignTax) + CDbl(tempLessTFN)) * CDbl(Me.lblNetDistValue.Caption)
            Me.tbNetDistribution.Value = Format(Me.tbNetDistribution.Value, "General Number") * CDbl(Me.lblNetDistValue.Caption)
        End If
    Else
        Me.tbNetDistribution.Value = Me.lblNetDistValue.Caption
        Me.tbGrossDistribution.Value = Me.lblNetDistValue.Caption
    End If
    Me.tbNetDistribution.Value = Format(Me.tbNetDistribution.Value, "General Number")
    Me.tbGrossDistribution.Value = Format(Me.tbGrossDistribution.Value, "General Number")
         

    ' Sum Percentages
    ' percentageSum = Me.tbDividendsFranked.value + Me.tbDividendsUnfranked.value + Me.tbInterest.value + Me.tbOtherIncome.value + Me.tbInterestIncome.value + Me.tbModifiedPassiveIncome.value + Me.tbOtherAssesableIncome.value + Me.tbDiscountedCapitalGainDomestic.value + Me.tbDiscountedCapitalGainForeign.value + Me.tbCapitalGainsOtherMethodDomestic.value + Me.tbCapitalGainsOtherMethodForeign.value + Me.tbCGTConcessionAmount.value + Me.tbCapitalGainsIndexationMethodDomestic.value + Me.tbCapitalGainsIndexationMethodForeign.value + Me.tbTaxExemptedAmounts.value + Me.tbTaxFreeAmounts.value + Me.tbTaxDeferredAmounts.value + Me.tbCapitalReturns.value
    
    If IsEmpty(sumOfStatement) Or IsNull(sumOfStatement) Then
        MsgBox ("Please Enter Tax Components")
    End If
    
    ' Check if combination of $ and %?
    Application.ScreenUpdating = True
    
    ' Enable Submit for bulk
    enterWhat1.Caption = "$ amount"
    enterWhat2.Caption = "$ amount"
    
    'Update toggle
    percentageToggled = False
ElseIf Format(Me.tbGrossDistribution.Value, "General Number") = 0 Then
      ' Change all to 0
      For Each ccontrol In Me.Controls
         If TypeName(ccontrol) = "TextBox" Then
             For i = 0 To UBound(controlarray, 1)
                'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                 If ccontrol.Name = controlarray(i) Then
                    ccontrol.Value = Format(0, "General Number")
                 End If
                'End If
            Next i
        End If
    Next ccontrol
    ' Adjust for totals
    Me.tbAssessableIncome.Value = Format(0, "General Number")
    Me.tbAssessableIncome.Value = Format(0, "General Number")
    Me.tbNonPrimaryProductionIncome.Value = Format(0, "General Number")
    Me.tbNonPrimaryProductionIncome.Value = Format(0, "General Number")
    Me.tbNetDistribution.Value = Format(0, "General Number")
    Me.tbGrossDistribution.Value = Format(0, "General Number")
    Me.lblNetDistValue.Caption = 0
    'Update toggle
    percentageToggled = False
Else
    Call MsgBox("Percentages do not sum to 100%. " & vbCrLf & vbCrLf & "Ensure the percentages sum to 100% before converting", vbOKOnly, "Error: Does not sum to 100%")
End If
End Function

Public Function convertToPercentage()
    
Dim sumOfStatement, percentageSum, iPercent As Double
Dim ccontrol As control
Dim controlarray, i

convertToPercentage = False

' array of controls for relevant TextBoxes for easy sum
' tbNetDistribution excluded
' tbGrossDistribution
' tbNetCapitalGain
' tbDistributedCapitalGain
' tbNon-primaryProductionIncome
' tbAssesableIncome
controlarray = Array("tbFrankingCredit", "tbTaxCredits", "tbDividendsFranked", "tbDividendsUnfranked", "tbInterest", "tbOtherIncome", "tbNonPrimaryProductionIncome", "tbInterestIncome", "tbModifiedPassiveIncome", "tbOtherAssesableIncome", "tbDiscountedCapitalGainDomestic", "tbDiscountedCapitalGainForeign", "tbCGTConcessionAmount", "tbCapitalGainsIndexationMethodDomestic", "tbCapitalGainsIndexationMethodForeign", "tbCapitalGainsOtherMethodDomestic", "tbCapitalGainsOtherMethodForeign", "tbDistributedCapitalGains", "tbNetCapitalGain", "tbTaxExemptedAmounts", "tbTaxFreeAmounts", "tbTaxDeferredAmounts", "tbCapitalReturns", "tbLessTFNAmountWithheld", "tbLessForeignWithholdingTax", "tbGrossedUpCapitalGainsDiscountMethod", "tbAmitCostBase")

    Application.ScreenUpdating = False
    ' Update form label to give context
    If Me.tbNetDistribution.Value = 0 Or Me.tbNetDistribution.Value = "" Then
        Me.lblNetDistValue.Caption = Me.tbNetDistribution.Value
        Me.lblNetDistValue.Caption = Round(Val(Me.lblNetDistValue.Caption), 6)
    End If
       
    ' Check if null or ""
    ' Find Sum of statement
    sumOfStatement = 0
    For Each ccontrol In Me.Controls
         If TypeName(ccontrol) = "TextBox" Then
             For i = 0 To UBound(controlarray, 1)
                'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                 If ccontrol.Name = controlarray(i) Then
                        ' Exception calculations for credits
                        If ccontrol.Name = "tbFrankingCredit" Or ccontrol.Name = "tbTaxCredits" Then
                            ' Do nothing
                        Else
                            sumOfStatement = CDec(sumOfStatement) + CDec(ccontrol.Value)
                            ' Add exception for largest item
                        End If
                 End If
                'End If
            Next i
        End If
    Next ccontrol
        
    ' Calc % of Net Distribution
    Dim tempFcredit, tempTCredit, tempDividendsFranked, tempAssessableIncome, tempNonPrimaryProductionIncome, tempLessTFN, tempLessForeignTax, tempNetDistribution
    tempFcredit = Me.tbFrankingCredit.Value
    tempTCredit = Me.tbTaxCredits.Value
    tempDividendsFranked = Me.tbDividendsFranked.Value
    tempAssessableIncome = Me.tbAssessableIncome.Value
    tempNonPrimaryProductionIncome = Me.tbNonPrimaryProductionIncome.Value
    tempLessTFN = Me.tbLessTFNAmountWithheld.Value
    tempLessForeignTax = Me.tbLessForeignWithholdingTax.Value
    tempNetDistribution = Me.tbNetDistribution.Value
    
    ' Replace all empty cells with 0%
    If sumOfStatement = 0 Then
        ' No details entered, allow to enter % instead of $
         For Each ccontrol In Me.Controls
             If TypeName(ccontrol) = "TextBox" Then
                 For i = 0 To UBound(controlarray, 1)
                    'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                     If ccontrol.Name = controlarray(i) Then
                        ccontrol.Value = FormatPercent(0, 6)
                     End If
                 Next i
            End If
        Next ccontrol
        ' Adjustments for % totals
        Me.tbAssessableIncome.Value = FormatPercent(0, 6)
        Me.tbAssessableIncome.Value = FormatPercent(0, 6)
        Me.tbNonPrimaryProductionIncome.Value = FormatPercent(0, 6)
        Me.tbNonPrimaryProductionIncome.Value = FormatPercent(0, 6)
        Me.tbGrossDistribution.Value = FormatPercent(0, 6)
        Me.tbNetDistribution.Value = FormatPercent(0, 6)
        Me.lblNetDistValue.Caption = 1
    Else
        ' Calculate % proportion given the grossdistribution
        For Each ccontrol In Me.Controls
             If TypeName(ccontrol) = "TextBox" Then
                 For i = 0 To UBound(controlarray, 1)
                    'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                     If ccontrol.Name = controlarray(i) Then
                            ' Exception calculations for credits and totals
                            If ccontrol.Name = "tbFrankingCredit" Then
                                If Me.tbGrossDistribution.Value <> 0 Then
                                    Me.tbFrankingCredit.Value = (Me.tbFrankingCredit.Value / Me.tbGrossDistribution.Value)  'SAM (Me.tbFrankingCredit.Value / tempDividendsFranked)
                                    Me.tbFrankingCredit.Value = FormatPercent(Me.tbFrankingCredit.Value, 6)
                                Else
                                    Me.tbFrankingCredit.Value = 0
                                    Me.tbFrankingCredit.Value = FormatPercent(Me.tbFrankingCredit.Value, 6)
                                End If
                            ElseIf ccontrol.Name = "tbTaxCredits" Then
                                If Me.tbGrossDistribution.Value <> 0 Then
                                    Me.tbTaxCredits.Value = Me.tbTaxCredits.Value / Me.tbGrossDistribution.Value 'SAM Me.tbTaxCredits.Value / Me.tbAssessableIncome.Value
                                    Me.tbTaxCredits.Value = FormatPercent(Me.tbTaxCredits.Value, 6)
                                Else
                                    Me.tbTaxCredits.Value = 0
                                    Me.tbTaxCredits.Value = FormatPercent(Me.tbTaxCredits.Value, 6)
                                End If
                            Else
                                ' Apply %
                                iPercent = CDec(ccontrol.Value) / CDec(Me.tbGrossDistribution.Value)
                                percentageSum = percentageSum + iPercent
                                ccontrol.Value = FormatPercent(iPercent, 6)
                            End If
                     End If
                    'End If
                Next i
            End If
        Next ccontrol
        
        ' Adjustments for % totals
        Me.tbAssessableIncome.Value = Me.tbAssessableIncome.Value / Me.tbGrossDistribution.Value
        Me.tbAssessableIncome.Value = FormatPercent(Me.tbAssessableIncome.Value, 6)
        Me.tbNonPrimaryProductionIncome.Value = tempNonPrimaryProductionIncome / Me.tbGrossDistribution.Value
        Me.tbNonPrimaryProductionIncome.Value = FormatPercent(Me.tbNonPrimaryProductionIncome.Value, 6)
        ' Check if Net Distribution % to be adjusted
        If tempLessForeignTax <> 0 Or tempLessTFN <> 0 Then
            If (CDbl(tempNetDistribution) + CDbl(tempLessForeignTax) + CDbl(tempLessTFN)) <> CDbl(Me.tbGrossDistribution.Value) Then
                MsgBox ("Error: Net Distribution does not Balance up to calculated Gross Distribution, Check your figures")
            Else
                Me.tbGrossDistribution.Value = (CDbl(tempNetDistribution) + CDbl(tempLessForeignTax) + CDbl(tempLessTFN)) / 100
                Me.lblNetDistValue.Caption = CDbl(tempNetDistribution) + CDbl(tempLessForeignTax) + CDbl(tempLessTFN)
                Me.lblNetDistValue.Caption = Round(Val(Me.lblNetDistValue.Caption), 6)
                Me.tbNetDistribution.Value = (Me.tbNetDistribution.Value / Me.tbGrossDistribution.Value) / 100
            End If
        Else
            Me.lblNetDistValue.Caption = Me.tbNetDistribution.Value
            Me.lblNetDistValue.Caption = Round(Val(Me.lblNetDistValue.Caption), 6)
            Me.tbNetDistribution.Value = Me.tbNetDistribution.Value / Me.tbGrossDistribution.Value
        End If
        Me.tbNetDistribution.Value = FormatPercent(Me.tbNetDistribution.Value, 6)
        Me.tbGrossDistribution.Value = FormatPercent(1, 6)
             
    End If
    ' Sum Percentages
    ' percentageSum = Me.tbDividendsFranked.value + Me.tbDividendsUnfranked.value + Me.tbInterest.value + Me.tbOtherIncome.value + Me.tbInterestIncome.value + Me.tbModifiedPassiveIncome.value + Me.tbOtherAssesableIncome.value + Me.tbDiscountedCapitalGainDomestic.value + Me.tbDiscountedCapitalGainForeign.value + Me.tbCapitalGainsOtherMethodDomestic.value + Me.tbCapitalGainsOtherMethodForeign.value + Me.tbCGTConcessionAmount.value + Me.tbCapitalGainsIndexationMethodDomestic.value + Me.tbCapitalGainsIndexationMethodForeign.value + Me.tbTaxExemptedAmounts.value + Me.tbTaxFreeAmounts.value + Me.tbTaxDeferredAmounts.value + Me.tbCapitalReturns.value
        
    ' Check if combination of $ and %?
    Application.ScreenUpdating = True
    
    ' Enable Submit for bulk
    enterWhat1.Caption = "% component"
    enterWhat2.Caption = "% component"
    
    'Update toggle
    percentageToggled = True
    convertToPercentage = True
    
End Function

Private Sub btnReview_Click()
    Dim retrieved
    
    ' exit if no code entered
    If Trim(Me.tbInvestmentAccount) = "" Then
        MsgBox ("Please enter a Security Code")
    Else
        ' don't get again if same security
        'If lastCode = Me.tbInvestmentAccount.value Then
        '    retrieved = True
        'Else
            ' refresh the list
            retrieved = getDividendData(Me.tbInvestmentAccount.Value)
            If retrieved Then
                DividendLookup.DividendList.RowSource = "Dividends!Dividends"
                
                 ' Filter out distributions in different period
                Dim CheckDateStart, CheckDateEnd, i
                If Me.cbFinancialYear.Value <> "" Then
                    
                    CheckDateStart = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2) - 1, 7, 1), "dd/mm/yy")
                    CheckDateEnd = Format(DateSerial(Mid(Me.cbFinancialYear.Value, 6, 2), 6, 30), "dd/mm/yy")
                    i = 1
                    Do While ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value <> ""
                        If CDate(ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value) <= CheckDateStart Or CheckDateEnd <= CDate(ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).Value) Then
                            ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(i, 0).EntireRow.Delete
                            DividendLookup.DividendList.RowSource = "Dividends!Dividends"
                        Else
                            i = i + 1
                        End If
                    Loop
                    ' Update named range
                    ActiveWorkbook.Names("Dividends").RefersToR1C1 = "=Dividends!R1C1:R" & i + 1 & "C8"
                Else
                    ' Load standard
                    DividendLookup.DividendList.RowSource = "Dividends!Dividends"
                End If
            End If
        'End If

        ' Prompt user to select new value
        If retrieved Then
            ' Show the list
            DividendLookup.Show
            If Not DividendLookup.cancelled And DividendLookup.DividendList.ListIndex > 0 Then
                'EventType = DividendLookup.selectedBaseType
                'ExDividendDate = Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
                Me.tbTaxEventDescription = "Distribution Tax Statement for " & Format(DividendLookup.selectedExDate, "dd/mm/yyyy") & " " & UCase(Me.tbInvestmentAccount.Value) & " @ " & DividendLookup.selectedAmount
                Me.cbOverrideDesc.Value = True
                'FrankedPercent = DividendLookup.selectedFrankingPercent * 100
                Me.lblDistributionDetail.Caption = "Specific Date Selected : " & Format(DividendLookup.selectedExDate, "dd/mm/yyyy")
            Else
                ' No specific dist selected
                Me.lblDistributionDetail.Caption = ""
            End If
            
            ' remember the code for next time
            lastCode = Me.tbInvestmentAccount.Value
        End If
        
    End If
    
End Sub

Private Sub btnSubmit_Click()

Dim ccontrol As control
Dim ataxstatementpercentages
Dim sdescription, isToggledYearEndDate, distdate

If Me.cbFinancialYear.Value = "" Then
    MsgBox ("Financial year is required for tax statement generation")
    Exit Sub
End If

isToggledYearEndDate = Me.cbToggleYearEndDate.Value
sdescription = Me.tbTaxEventDescription.Value

If Not percentageToggled Then
    If Not convertToPercentage Then Exit Sub
End If

' Set invidivual date to that selected
If individualDistToggled Then
    ' check not first row or last row
    If DividendLookup.selectionIndex <> 0 Or DividendLookup.selectionIndex <> DividendLookup.DividendList.ListCount - 1 Then
        ' No Dist. Annoucement selected, use tax template date
        If DividendLookup.selectionIndex = -1 Then
            distdate = Format(TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.selectionIndex, 1), "dd/mm/yy")
        Else
            distdate = Format(DividendLookup.DividendList.List(DividendLookup.selectionIndex), "dd/mm/yy")
        End If
    Else
        MsgBox ("Individual distribution selected, Please select a valid distribution")
        Exit Sub
    End If
End If

ataxstatementpercentages = Array(Me.tbLessTFNAmountWithheld.Value, Me.tbLessForeignWithholdingTax.Value, Me.tbDividendsFranked.Value, Me.tbDividendsUnfranked.Value, Me.tbFrankingCredit.Value, Me.tbInterest.Value, Me.tbOtherIncome.Value, Me.tbInterestIncome.Value, Me.tbModifiedPassiveIncome.Value, Me.tbOtherAssesableIncome.Value, Me.tbTaxCredits.Value, Me.tbDiscountedCapitalGainDomestic.Value, Me.tbDiscountedCapitalGainForeign.Value, Me.tbCGTConcessionAmount.Value, Me.tbGrossedUpCapitalGainsDiscountMethod.Value, Me.tbCapitalGainsIndexationMethodDomestic.Value, Me.tbCapitalGainsIndexationMethodForeign.Value, Me.tbCapitalGainsOtherMethodDomestic.Value, Me.tbCapitalGainsOtherMethodForeign.Value, Me.tbTaxExemptedAmounts.Value, Me.tbTaxFreeAmounts.Value, Me.tbTaxDeferredAmounts.Value, Me.tbCapitalReturns.Value, Me.tbAmitCostBase.Value)

Me.Hide

' Populate Class distributions to Distributions
Call GenerateDistributions

Dim numberOfStatements, msg, msgtitle
' Populate Income Sheet
If IsEmpty(distdate) Or distdate = "" Then
    numberOfStatements = populateTaxStatement(Me.tbInvestmentAccount.Value, sdescription, isToggledYearEndDate, ataxstatementpercentages)
Else
     If (Left(distdate, 5) = "30/06" Or Left(distdate, 5) = "30-06") Then
        If SecurityHasMorethanOneRatio(Me.tbInvestmentAccount.Value) Then
            numberOfStatements = populateTaxStatement(Me.tbInvestmentAccount.Value, sdescription, isToggledYearEndDate, ataxstatementpercentages, distdate)
        Else
            numberOfStatements = populateTaxStatement(Me.tbInvestmentAccount.Value, sdescription, isToggledYearEndDate, ataxstatementpercentages)
        End If
     Else
        numberOfStatements = populateTaxStatement(Me.tbInvestmentAccount.Value, sdescription, isToggledYearEndDate, ataxstatementpercentages, distdate)
    End If
End If

' Tell them how many they got
msg = numberOfStatements & " Tax Statement Event(s) generated."
msgtitle = "Events Generated"

' Change filename
If ThisWorkbook.Worksheets("Overview").Range("filename").Value = "filename" Then
    ThisWorkbook.Worksheets("Overview").Range("filename").Value = "TaxStatement_" & Me.tbInvestmentAccount.Value
End If

Unload Me

cleanup:
    Call MsgBox(msg, vbOKOnly, msgtitle)

End Sub
Private Function SecurityHasMorethanOneRatio(security As String) As Boolean
    Dim RatioCount, i As Integer
    
    RatioCount = 0
    SecurityHasMorethanOneRatio = False
   
    For i = 1 To TaxTemplateLookup.TaxTemplateList.ListCount - 1
    If TaxTemplateLookup.TaxTemplateList.List(i, 0) = security Then
    
         If ((DateValue(TaxTemplateLookup.TaxTemplateList.List(i, 1)) <= DateValue(FinancialDateEnd)) And _
         (DateValue(TaxTemplateLookup.TaxTemplateList.List(i, 1)) >= DateValue(FinancialDateStart))) Then
        
        ' distdate = Format(TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.selectionIndex, 1), "dd/mm/yy")
             RatioCount = RatioCount + 1
             If RatioCount > 1 Then
                 SecurityHasMorethanOneRatio = True
                 Exit For
             End If
    
         End If
    End If
    Next
   End Function

Private Sub cbFinancialYear_Change()
    ' Update description with Financial year
    UpdateDescription
End Sub

Private Sub cbindividualDistribution_Click()

If Me.cbindividualDistribution.Value Then
    Me.cbToggleYearEndDate.Value = False
    Me.cbToggleYearEndDate.Enabled = False
    Call btnReview_Click
Else
    Me.cbToggleYearEndDate.Enabled = True
End If

End Sub

Private Sub cbOverrideDesc_Click()
    ' Toggle Enabled for description
    If Me.cbOverrideDesc.Value = True Then
        Me.tbTaxEventDescription.Enabled = True
        Me.tbTaxEventDescription.BackColor = &H80000005
    Else
        Me.tbTaxEventDescription.Enabled = False
        Me.tbTaxEventDescription.BackColor = &H8000000F
    End If
End Sub

Sub calculateNetDistribution(fform)
Dim controlarray, validNumbers

controlarray = Array("tbDividendsUnfranked", "tbDividendsFranked", "tbInterest", "tbInterestIncome", "tbModifiedPassiveIncome", "tbOtherAssesableIncome", "tbOtherIncome", "tbTaxCredits", "tbDiscountedCapitalGainDomestic", "tbDiscountedCapitalGainForeign", "tbCapitalGainsIndexationMethodDomestic", "tbCapitalGainsIndexationMethodForeign", "tbCapitalGainsOtherMethodDomestic", "tbCapitalGainsOtherMethodForeign", "tbDiscountedCapitalGainDomestic", "tbDiscountedCapitalGainForeign", "tbCGTConcessionAmount", "tbCapitalGainsIndexationMethodDomestic", "tbCapitalGainsIndexationMethodForeign", "tbCapitalGainsOtherMethodDomestic", "tbCapitalGainsOtherMethodForeign", "tbLessTFNAmountWithheld", "tbLessForeignWithholdingTax", "tbTaxExemptedAmounts", "tbTaxFreeAmounts", "tbTaxDeferredAmounts", "tbCapitalReturns", "tbGrossedUpCapitalGainsDiscountMethod", "tbNonPrimaryProductionIncome", "tbGrossDistribution", "tbFrankingCredit")

' Generate Totals for $
If percentageToggled Then
    If checkControlPercent(controlarray, TaxStatementBulkEntry) Then
        
        ' Calc totals
        TaxStatementBulkEntry.tbAssessableIncome.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbInterestIncome.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbModifiedPassiveIncome.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbOtherAssesableIncome.Value, "General Number")), 10)
        TaxStatementBulkEntry.tbNetCapitalGain.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodForeign.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsOtherMethodDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsOtherMethodForeign.Value, "General Number")), 10)
        TaxStatementBulkEntry.tbDistributedCapitalGains.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCGTConcessionAmount.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodForeign.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsOtherMethodDomestic.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalGainsOtherMethodForeign.Value, "General Number")), 10)
        TaxStatementBulkEntry.tbNonPrimaryProductionIncome.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbDividendsFranked.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbDividendsUnfranked.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbInterest.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbOtherIncome.Value, "General Number")), 10)
        TaxStatementBulkEntry.tbGrossDistribution.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbAssessableIncome.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbNonPrimaryProductionIncome.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbDistributedCapitalGains.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbTaxExemptedAmounts.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbTaxFreeAmounts.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbTaxDeferredAmounts.Value, "General Number")) + CDec(Format(TaxStatementBulkEntry.tbCapitalReturns.Value, "General Number")), 10)
        TaxStatementBulkEntry.tbNetDistribution.Value = FormatPercent(CDec(Format(TaxStatementBulkEntry.tbGrossDistribution.Value, "General Number")) - CDec(Format(TaxStatementBulkEntry.tbLessTFNAmountWithheld.Value, "General Number")) - CDec(Format(TaxStatementBulkEntry.tbLessForeignWithholdingTax.Value, "General Number")), 10)
        
        
        ' Apply Grossed up gain
        TaxStatementBulkEntry.tbGrossedUpCapitalGainsDiscountMethod.Value = FormatPercent((CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value, "General Number")) * 2) + (CDec(Format(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value, "General Number")) * 2), 10)
        
        ' Franking Credit
        If TaxStatementBulkEntry.tbDividendsFranked.Value = 0 Then
            ' skip
        End If
        
        ' Tax Credit
        If TaxStatementBulkEntry.tbDividendsFranked.Value = 0 Then
            ' skip
        End If
    End If
    
Else
        If checkControlNumbers(controlarray, TaxStatementBulkEntry) Then
        ' Calc totals
        TaxStatementBulkEntry.tbAssessableIncome.Value = CDbl(TaxStatementBulkEntry.tbInterestIncome.Value) + CDbl(TaxStatementBulkEntry.tbModifiedPassiveIncome.Value) + CDbl(TaxStatementBulkEntry.tbOtherAssesableIncome.Value)
        TaxStatementBulkEntry.tbNetCapitalGain.Value = CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value) + CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodDomestic.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodForeign.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsOtherMethodDomestic.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsOtherMethodForeign.Value)
        TaxStatementBulkEntry.tbDistributedCapitalGains.Value = CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value) + CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value) + CDbl(TaxStatementBulkEntry.tbCGTConcessionAmount.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodDomestic.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsIndexationMethodForeign.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsOtherMethodDomestic.Value) + CDbl(TaxStatementBulkEntry.tbCapitalGainsOtherMethodForeign.Value)
        TaxStatementBulkEntry.tbNonPrimaryProductionIncome.Value = CDbl(TaxStatementBulkEntry.tbDividendsFranked.Value) + CDbl(TaxStatementBulkEntry.tbDividendsUnfranked.Value) + CDbl(TaxStatementBulkEntry.tbInterest.Value) + CDbl(TaxStatementBulkEntry.tbOtherIncome.Value)
        TaxStatementBulkEntry.tbGrossDistribution.Value = CDbl(TaxStatementBulkEntry.tbAssessableIncome.Value) + CDbl(TaxStatementBulkEntry.tbNonPrimaryProductionIncome.Value) + CDbl(TaxStatementBulkEntry.tbDistributedCapitalGains.Value) + CDbl(TaxStatementBulkEntry.tbTaxExemptedAmounts.Value) + CDbl(TaxStatementBulkEntry.tbTaxFreeAmounts.Value) + CDbl(TaxStatementBulkEntry.tbTaxDeferredAmounts.Value) + CDbl(TaxStatementBulkEntry.tbCapitalReturns.Value)
         
        TaxStatementBulkEntry.tbNetDistribution.Value = CDbl(TaxStatementBulkEntry.tbGrossDistribution.Value) - CDbl(TaxStatementBulkEntry.tbLessTFNAmountWithheld.Value) - CDbl(TaxStatementBulkEntry.tbLessForeignWithholdingTax.Value)
        TaxStatementBulkEntry.lblNetDistValue.Caption = TaxStatementBulkEntry.tbNetDistribution.Value
        
        ' Franking Credit
        If TaxStatementBulkEntry.tbDividendsFranked.Value = 0 Then
            ' skip
        End If
        
        ' Tax Credit
        If TaxStatementBulkEntry.tbDividendsFranked.Value = 0 Then
            ' skip
        End If
        
        ' Apply Grossed up gain
        TaxStatementBulkEntry.tbGrossedUpCapitalGainsDiscountMethod.Value = (CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainDomestic.Value) + CDbl(TaxStatementBulkEntry.tbDiscountedCapitalGainForeign.Value)) * 2
    Else
        'Error msg if error returned
        'MsgBox ("Error: Tax Statment items cannot include text")
    End If
End If

End Sub

Public Function checkControlNumbers(controlarray, form)

' Checks that the numbers in the array are all valid numbers and not characters, null or empty strings accepted

Dim isValidNumbers
Dim ccontrol As control, i

isValidNumbers = True

For Each ccontrol In form.Controls
     If TypeName(ccontrol) = "TextBox" Then
         For i = 0 To UBound(controlarray, 1)
            'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
             If ccontrol.Name = controlarray(i) Then
                On Error GoTo errorHandler
                If ccontrol.Value = "" Then
                    ' Convert to 0
                    ccontrol.Value = 0
                ElseIf IsError(CDbl(ccontrol.Value)) Then
                    isValidNumbers = False
                Else
                    isValidNumbers = True
                End If
             End If
            'End If
        Next i
    End If
Next ccontrol

checkControlNumbers = isValidNumbers

errorHandler:
     If Err = 13 Then        'Type Mismatch
        checkControlNumbers = False
    End If
End Function

Public Function checkControlPercent(controlarray, form)

' Checks that the numbers in the array are all valid numbers and not characters, null or empty strings accepted

Dim isValidPercent
Dim ccontrol As control, i

isValidPercent = True

For Each ccontrol In form.Controls
     If TypeName(ccontrol) = "TextBox" Then
         For i = 0 To UBound(controlarray, 1)
            'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
             If ccontrol.Name = controlarray(i) Then
                On Error GoTo errorHandler
                If ccontrol.Value = "" Then
                    ' Convert to 0
                    ccontrol.Value = 0
                ElseIf ccontrol.Value <> FormatPercent(ccontrol.Value, 10) Then
                    isValidPercent = False
                End If
             End If
            'End If
        Next i
    End If
Next ccontrol

checkControlPercent = isValidPercent

errorHandler:
     If Err = 13 Then        'Type Mismatch
        checkControlPercent = False
    End If
End Function

Sub formatAsPercent(aControlList)
    ' Formats a list of controls as a percentage to 10 decimal places
    
    For Each ccontrol In Me.Controls
             If TypeName(ccontrol) = "TextBox" Then
                 For i = 0 To UBound(aControlList, 1)
                     If ccontrol.Name = aControlList(i) Then
                        ' Convert format to Percentage
                        ccontrol.Value = FormatPercent(ccontrol.Value, 10)
                    End If
                Next i
            End If
    Next control
End Sub

Sub formatAsNumber(aControlList)
    ' Formats a list of controls on a form as a percentage to 10 decimal places
    Dim ccontrol, i
    For Each ccontrol In Me.Controls
             If TypeName(ccontrol) = "TextBox" Then
                 For i = 0 To UBound(aControlList, 1)
                     If ccontrol.Name = aControlList(i) Then
                        ' Convert format to Number
                        ccontrol.Value = Format(ccontrol.Value, "General Number")
                    End If
                Next i
            End If
    Next ccontrol
End Sub

Private Sub cbShowAll_Click()
    Call TaxStatementBulkEntry.setPageIndex(1)
End Sub



Private Sub frComponentToggle_Click()

End Sub

Private Sub Label1_Click()

End Sub

Private Sub rbDollarToggle_Click()
If percentageToggled Then
    convertToDollar
    If percentageToggled Then
        ' Failed - revert radio button
        Me.rbDollarToggle.Value = Null
    End If
End If
End Sub


Private Sub rbPercentToggle_Click()
If Not percentageToggled Then
    convertToPercentage
    ' Check if success
    If Not percentageToggled Then
        ' Failed - revert radio button
        Me.rbPercentToggle.Value = Null
    End If
End If
End Sub

Private Sub tbCapitalGainsIndexationMethodDomestic_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCapitalGainsIndexationMethodDomestic_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbCapitalGainsIndexationMethodForeign_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCapitalGainsIndexationMethodForeign_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbCapitalGainsOtherMethodDomestic_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCapitalGainsOtherMethodDomestic_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub

Private Sub tbCapitalGainsOtherMethodForeign_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCapitalGainsOtherMethodForeign_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbCapitalReturns_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCapitalReturns_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbCGTConcessionAmount_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbCGTConcessionAmount_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbDiscountedCapitalGainDomestic_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbDiscountedCapitalGainDomestic_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbDiscountedCapitalGainForeign_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbDiscountedCapitalGainForeign_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbDividendsFranked_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbDividendsFranked_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbDividendsUnfranked_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbDividendsUnfranked_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbFrankingCredit_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbFrankingCredit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbGrossedUpCapitalGainsDiscountMethod_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbInterest_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbInterest_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbInterestIncome_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbInterestIncome_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbInvestmentAccount_Change()
    ' Update descrption with new Account code
    UpdateDescription
    Me.cbindividualDistribution.Value = False
End Sub


Sub UpdateDescription()
    ' Check radio button for override description
    If Me.cbOverrideDesc.Value = False Then
        'If Me.cbFinancialYear.value = "" Then
        Me.tbTaxEventDescription.Value = "Distribution Tax Statement for " & UCase(Me.tbInvestmentAccount.Value)
        'Else
        '    Me.tbTaxEventDescription.value = "Distribution - Tax Statement for " & UCase(Me.tbInvestmentAccount.value) & " on 30-06-" & Trim(Mid(Me.cbFinancialYear.value, 6, 2))
        'End If
    End If
End Sub

Private Sub tbLessForeignWithholdingTax_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbLessForeignWithholdingTax_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbLessTFNAmountWithheld_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbLessTFNAmountWithheld_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbModifiedPassiveIncome_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbModifiedPassiveIncome_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbOtherAssesableIncome_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbOtherAssesableIncome_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbOtherIncome_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbOtherIncome_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbTaxCredits_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbTaxCredits_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbTaxDeferredAmounts_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbTaxDeferredAmounts_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub tbTaxExemptedAmounts_Change()
    calculateNetDistribution (Me)
End Sub
' Allow Negative tax exempt amounts
'Private Sub tbTaxExemptedAmounts_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
'    Select Case KeyAscii
'      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
'      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
'      Case Else
'        KeyAscii = 0
'        Beep
'    End Select
'End Sub
Private Sub tbTaxFreeAmounts_Change()
    calculateNetDistribution (Me)
End Sub
Private Sub tbTaxFreeAmounts_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9, vbKeyBack, vbKeyClear, vbKeyLeft, _
      vbKeyRight, vbKeyUp, vbKeyDown, vbKeyTab, vbKeyDelete
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub UserForm_Initialize()

Me.cbFinancialYear.AddItem year(Date) & "-" & Mid(year(Date), 2) + 1 & ": Financial Year"
Me.cbFinancialYear.AddItem year(Date) - 1 & "-" & Mid(year(Date), 2) - 0 & ": Financial Year"
Me.cbFinancialYear.AddItem year(Date) - 2 & "-" & Mid(year(Date), 2) - 1 & ": Financial Year"
Me.cbFinancialYear.AddItem year(Date) - 3 & "-" & Mid(year(Date), 2) - 2 & ": Financial Year"
Me.cbFinancialYear.AddItem year(Date) - 4 & "-" & Mid(year(Date), 2) - 3 & ": Financial Year"
Me.cbFinancialYear.Text = SelectFinancialYear.cbFinancialYear.Text
percentageToggled = False

If Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "toggleSaveTemplates") Then
    If Not IsEmpty(Utils.getVariable("toggleSaveTemplates")) Then
        If getVariable("toggleSaveTemplates") Then
            Call AllowSaveTemplate
        End If
    End If
End If

End Sub

Private Function AllowSaveTemplate()
    If Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "togglesavetemplates") Then
        TaxStatementBulkEntry.btnSaveComponents.Visible = Not Me.btnSaveComponents.Visible
        TaxStatementBulkEntry.cbShowAll.Visible = Not Me.cbShowAll.Visible
        Application.ScreenUpdating = False
        Call TransactionLoader.unprotectWorkbook
        ThisWorkbook.Worksheets("TaxTemplates").Visible = Not ThisWorkbook.Worksheets("TaxTemplates").Visible
        Call TransactionLoader.toggleProtection
        Application.ScreenUpdating = True
    End If
End Function

'Private Sub GetTaxstatementBycode(ByVal xmltoload As String)
' Dim xmlDoc As New DOMDocument60
' Dim securitycode As Object
'    xmlDoc.LoadXml xmltoload
'     On Error GoTo 0
'Dim ClassTaxNode As IXMLDOMNodeList
'
'     Set securitycode = xmlDoc.SelectSingleNode("ClassTaxTemplate/SecurityCode")
'     Set ClassTaxNode = xmlDoc.SelectNodes("/ArrayOfClassTaxTemplate/ClassTaxTemplate")
'
'    If Not securitycode Is Nothing Then
'        Me.tbTaxEventDescription.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/Description").text
'        Me.tbInvestmentAccount.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/SecurityCode").text
'        Me.tbDividendsFranked.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/FrankedAmount").text
'        Me.tbDividendsUnfranked.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/UnFrankedAmount").text
'        Me.tbFrankingCredit.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/FrankingCredit").text
'        Me.tbGrossDistribution.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/NetAmount").text
'
'        Me.tbInterest.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/Interest").text
'        Me.tbOtherIncome.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/OtherIncome").text
'        Me.tbInterestIncome.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/ForeignInterest").text
'        Me.tbModifiedPassiveIncome.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/ForeignModifiedPassive").text
'        Me.tbOtherAssesableIncome.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/ForeiginOther").text
'        Me.tbTaxCredits.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/ForeignTaxCredit").text
'        Me.tbDiscountedCapitalGainDomestic.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/DiscountedCapGainsDomestic").text
'        Me.tbDiscountedCapitalGainForeign.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/DiscountedCapGainsForeign").text
'        Me.tbCGTConcessionAmount.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/CGTConcessionalAmount").text
'        Me.tbGrossedUpCapitalGainsDiscountMethod.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/GrossedUpCapitalGainsDiscountMethod").text
'        Me.tbCapitalGainsIndexationMethodDomestic.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/IndexedCapGainsDomestic").text
'        Me.tbCapitalGainsIndexationMethodForeign.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/IndexedCapGainsForeign").text
'        Me.tbCapitalGainsOtherMethodDomestic.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/OtherCapGainsDomestic").text
'        Me.tbCapitalGainsOtherMethodForeign.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/OtherCapGainsForeign").text
'        Me.tbTaxExemptedAmounts.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/TaxExempt").text
'        Me.tbTaxFreeAmounts.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/TaxFree").text
'        Me.tbTaxDeferredAmounts.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/TaxDeferred").text
'        Me.tbCapitalReturns.value = xmlDoc.SelectSingleNode("ClassTaxTemplate/CapitalReturns").text
'    ElseIf (ClassTaxNode.Length > 1) Then
'       UpdateTaxStatementBulKEntry xmlDoc
'        TaxTemplateLookup.Show
'        PopulateScreen xmlDoc
'    Else
'       MsgBox "No Data found Please enter a valid Security code", vbCritical, "Tax Template Web Service Error"
'    End If
'
'End Sub

Public Sub UpdateTaxTemplateLookup(ByVal apiresponse As MSXML2.IXMLDOMElement)
    Dim xmlhtp As New MSXML2.XMLHTTP60
    Dim ClassTaxNode As IXMLDOMNode
    Dim i As Integer
    Dim TotalAmount
    Dim foreignInterest, ForeignModifiedPassive, ForeignOther
    Dim dateTime
    i = 0
    TaxTemplateLookup.TaxTemplateList.Clear
    
    With TaxTemplateLookup.TaxTemplateList
              .AddItem
              .List(i, 0) = "Security Code"
              .List(i, 1) = "Ex Date"
              .List(i, 2) = "Description"
              .List(i, 3) = "Franked Amount"
              .List(i, 4) = "Unfranked Amount"
              .List(i, 5) = "Franking Credit"
              .List(i, 6) = "Tax Free Income"
              .List(i, 7) = "Tax Deferred Income"
              .List(i, 8) = "Total Foreign Income"
              .List(i, 9) = "AMIT Cost Base Net Amount"
               i = i + 1
    End With
             
    For Each ClassTaxNode In apiresponse.SelectNodes("Templates/ClassTaxTemplate")
        With TaxTemplateLookup.TaxTemplateList
              .AddItem
                .List(i, 0) = ClassTaxNode.SelectSingleNode("SecurityCode").Text
                If InStr(1, "30/06", Format(ClassTaxNode.SelectSingleNode("DistributionDate").Text, "dd/mm/yyyy")) > 0 Then
                    .List(i, 1) = "Annual"
                Else
                    dateTime = DateValue(Left(ClassTaxNode.SelectSingleNode("DistributionDate").Text, 10)) + TimeValue(Replace(Mid(ClassTaxNode.SelectSingleNode("DistributionDate").Text, 12, 8), "-", ":"))
                    .List(i, 1) = Format(dateTime, "dd/mm/yyyy")
                End If
                .List(i, 2) = ClassTaxNode.SelectSingleNode("Description").Text
                .List(i, 3) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text)
                .List(i, 4) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text)
                .List(i, 5) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankingCredit").Text)
                .List(i, 6) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxFree").Text)
                .List(i, 7) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxDeferred").Text)
                foreignInterest = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text)
                ForeignModifiedPassive = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text)
                ForeignOther = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text)
                TotalAmount = CDbl(foreignInterest) + CDbl(ForeignModifiedPassive) + CDbl(ForeignOther)
                .List(i, 8) = TotalAmount / 10
                .List(i, 9) = PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("AMITCostBase").Text)
            i = i + 1
            TotalAmount = 0
     End With
   Next
End Sub

Public Sub UpdateTaxStatementBulKEntry(ByVal apiresponse As MSXML2.IXMLDOMElement)
   Dim ClassTaxNode As IXMLDOMNode
   Dim dateTime
        If Not TaxTemplateLookup.taxTemplateCancelled And TaxTemplateLookup.TaxTemplateList.ListIndex > 0 Then            ' Select tax componenets from selected item and apply to form
            ' Ensure not overwriting percentages
            If TaxStatementBulkEntry.percentageToggled Then
                convertToDollar
                Me.rbDollarToggle.Value = True
            End If

            ' Populate form from array
            Me.tbInvestmentAccount.Value = UCase(TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.TaxTemplateList.ListIndex, 0))
            For Each ClassTaxNode In apiresponse.SelectNodes("Templates/ClassTaxTemplate")
                If UCase(ClassTaxNode.SelectSingleNode("SecurityCode").Text) = UCase(TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.TaxTemplateList.ListIndex, 0)) And TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.TaxTemplateList.ListIndex, 1) = Format(Left((ClassTaxNode.SelectSingleNode("DistributionDate").Text), 10), "dd/mm/yyyy") Then
                    If TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.TaxTemplateList.ListIndex, 1) <> "" Then
                        Me.lblDistributionDetail.Caption = "Specific Date Selected : " & TaxTemplateLookup.TaxTemplateList.List(TaxTemplateLookup.TaxTemplateList.ListIndex, 1)
                    End If
                    Me.tbTaxEventDescription.Value = ClassTaxNode.SelectSingleNode("Description").Text
                    Me.tbInvestmentAccount.Value = ClassTaxNode.SelectSingleNode("SecurityCode").Text
                    Me.tbDividendsFranked.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text) / 100, 6)
                    Me.tbDividendsUnfranked.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text) / 100, 6)
                    Me.tbFrankingCredit.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankingCredit").Text) / 100, 6)
                    Me.tbInterest.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("Interest").Text) / 100, 6)
                    Me.tbOtherIncome.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherIncome").Text) / 100, 6)
                    Me.tbInterestIncome.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text) / 100, 6)
                    Me.tbModifiedPassiveIncome.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text) / 100, 6)
                    Me.tbOtherAssesableIncome.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text) / 100, 6)
                    Me.tbTaxCredits.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignTaxCredit").Text) / 100, 6)
                    Me.tbDiscountedCapitalGainDomestic.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text) / 100, 6)
                    Me.tbDiscountedCapitalGainForeign.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text) / 100, 6)
                    Me.tbCGTConcessionAmount.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CGTConcessionalAmount").Text) / 100, 6)
                    Me.tbGrossedUpCapitalGainsDiscountMethod.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("GrossedUpCapitalGainsDiscountMethod").Text) / 100, 6)
                    Me.tbCapitalGainsIndexationMethodDomestic.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text) / 100, 6)
                    Me.tbCapitalGainsIndexationMethodForeign.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text) / 100, 6)
                    Me.tbCapitalGainsOtherMethodDomestic.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text) / 100, 6)
                    Me.tbCapitalGainsOtherMethodForeign.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text) / 100, 6)
                    Me.tbTaxExemptedAmounts.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxExempt").Text) / 100, 6)
                    Me.tbTaxFreeAmounts.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxFree").Text) / 100, 6)
                    Me.tbTaxDeferredAmounts.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxDeferred").Text) / 100, 6)
                    Me.tbCapitalReturns.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CapitalReturns").Text) / 100, 6)
                    Me.tbAmitCostBase.Value = FormatPercent(PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("AMITCostBase").Text) / 100, 6)
                    Exit For
                End If
             Next
             
             ' Sum totals
            Me.tbNonPrimaryProductionIncome.Value = FormatPercent((PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("Interest").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherIncome").Text)) / 100, 6)
            Me.tbAssessableIncome.Value = FormatPercent((PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text)) / 100, 6)
            Me.tbDistributedCapitalGains.Value = FormatPercent((PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CGTConcessionalAmount").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text)) / 100, 6)
            Me.tbNetCapitalGain.Value = FormatPercent((PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text) + PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text)) / 100, 6)
            Me.tbGrossDistribution.Value = FormatPercent((PrepareNumberAsDouble(Format(Me.tbNonPrimaryProductionIncome.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbAssessableIncome.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbDistributedCapitalGains.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbTaxFreeAmounts.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbTaxExemptedAmounts.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbTaxDeferredAmounts.Value, "General Number")) + PrepareNumberAsDouble(Format(Me.tbCapitalReturns.Value, "General Number"))), 6)
            Me.tbNetDistribution.Value = Me.tbGrossDistribution.Value
            
            Me.lblNetDistValue.Caption = 1
            percentageToggled = True
            Me.rbPercentToggle.Value = True

        End If
End Sub

Public Function PrepareNumberAsDouble(number)
    ' Prepares data and sets default to ensure figures are in correct format for consumption
    Dim defaultNumber As Double
    If IsEmpty(number) Or IsNull(number) Or number = "" Then
        defaultNumber = CDbl("0.0000")
    Else
        defaultNumber = CDbl(number)
    End If
    PrepareNumberAsDouble = defaultNumber
End Function


Attribute VB_Name = "TaxTemplateLookup"
Attribute VB_Base = "0{3FF32FDF-876C-47A2-9AF9-58DC96814AE7}{DAA0D778-E1CB-4F69-9D77-A46310943E25}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public taxTemplateCancelled, taxTemplateLastCode

Private Sub btnCancel_Click()
    TaxTemplateLookup.Hide
    taxTemplateCancelled = True
End Sub

Private Sub btnNextPage_Click()
Me.Hide
Call TaxStatementBulkEntry.setPageIndex(TaxStatementBulkEntry.getPageIndex + 1)
TaxStatementBulkEntry.btnTaxTemplates_Click
End Sub

Private Sub btnPreviousPage_Click()
Me.Hide
Call TaxStatementBulkEntry.setPageIndex(TaxStatementBulkEntry.pageIndex - 1)
TaxStatementBulkEntry.btnTaxTemplates_Click
End Sub
Public Function NumberOfRecordsIncludedinFinancialYear() As Integer
 Dim numberofList, i
 numberofList = 0
 For i = 1 To TaxTemplateLookup.TaxTemplateList.ListCount - 1
    If ((DateValue(TaxTemplateLookup.TaxTemplateList.List(i, 1)) <= DateValue(FinancialDateEnd)) And (DateValue(TaxTemplateLookup.TaxTemplateList.List(i, 1)) >= DateValue(FinancialDateStart))) Then
         numberofList = numberofList + 1

    End If
 Next i
NumberOfRecordsIncludedinFinancialYear = numberofList
End Function


Private Sub btnOk_Click()

    TaxTemplateLookup.Hide
    If TaxTemplateList.ListIndex = 0 Then
        taxTemplateCancelled = True
    Else
        taxTemplateCancelled = False
    End If
    
    If DividendLookup.DividendList.ListIndex <> 0 Then
        TaxStatementBulkEntry.individualDistToggled = True
    Else
        ' No distribution selected
        TaxStatementBulkEntry.individualDistToggled = False
    End If
    
    Dim NumberRecordsIncludedinSelectedFinYear
    NumberRecordsIncludedinSelectedFinYear = NumberOfRecordsIncludedinFinancialYear()
    
    ' Disable specific distribution button if two specific templates and mark as specific
    'If TaxStatementBulkEntry.cbShowAll.Value = False And TaxTemplateLookup.TaxTemplateList.ListCount > 2 Then
  
    If TaxStatementBulkEntry.cbShowAll.Value = False And (NumberRecordsIncludedinSelectedFinYear >= 2) Then 'count only the records in the taxttemplatelist which their exdate is included in the selected financial year
        If Not taxTemplateCancelled Then
            TaxStatementBulkEntry.btnReview.Enabled = False
            TaxStatementBulkEntry.cbToggleYearEndDate.Value = False
            TaxStatementBulkEntry.cbToggleYearEndDate.Enabled = False
        End If
    End If
    
    ' Clear current tax statement components
    TaxStatementBulkEntry.clearTaxComponents
    
End Sub

Function selectionIndex()
    selectionIndex = TaxTemplateLookup.TaxTemplateList.ListIndex
End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Dim iyd As String

    If CustomPropExist(CustomDocumentProperties, "IYDData") Then
        iyd = CustomDocumentProperties("IYDData").Value
        'Open (ActiveWorkbook.Path & "\" & "_iyd_loaded.xml") For Output As 100
        'Print #100, iyd
        'Close 100
        Call LoadXmlInternal("YTD.", ActiveWorkbook.Path & "\" & iyd)
        CustomDocumentProperties("IYDData").Delete
        
        Dim fundcode As String
        fundcode = CustomDocumentProperties("Fund").Value
        For i = 4 To 500
            If ActiveWorkbook.Sheets("Cash").Range("F" & i).Value <> vbNullString Then
                ActiveWorkbook.Sheets("Cash").Range("B" & i).Value = fundcode
            End If
            
            If ActiveWorkbook.Sheets("Custom").Range("F" & i).Value <> vbNullString Then
                ActiveWorkbook.Sheets("Custom").Range("B" & i).Value = fundcode
            End If
            
            If ActiveWorkbook.Sheets("Expense").Range("F" & i).Value <> vbNullString Then
                ActiveWorkbook.Sheets("Expense").Range("B" & i).Value = fundcode
            End If
            
            If ActiveWorkbook.Sheets("Income").Range("E" & i).Value <> vbNullString Then
                ActiveWorkbook.Sheets("Income").Range("B" & i).Value = fundcode
            End If
            
            If ActiveWorkbook.Sheets("Portfolio").Range("G" & i).Value <> vbNullString Then
                ActiveWorkbook.Sheets("Portfolio").Range("B" & i).Value = fundcode
            End If
            
        Next
    End If
    
  
End Sub
Attribute VB_Name = "TransactionLoader"
Option Explicit
Option Compare Text

' The mapping range for each XSD MUST follow the following structure ie
' The XSD metadata for the XML structure is mapped to columns
' as defined here.
Const tagCol = 1
Const typeCol = 2
Const occursCol = 3
Const enumCol = 4
Const keyCol = 6
Const labelCol = 7
Const valueCol = 9
Const indentStep = "  "

'Dim req As WinHttpRequest
'Dim request As WebRequest
Dim response As WebResponse
Dim errorCount As Integer
Dim errorRange As Range
Private InitDone  As Boolean
Private Map1(0 To 63)  As Byte
Private Map2(0 To 127) As Byte

Sub testGetHoldingsList()
'
'   Test...
'
    Call getHoldingsList("BHP", "01/01/2013")
End Sub

Sub testGetDivdendData()
'
'   Test...
'
    Call getDividendData("BHP")
End Sub

Public Function getDistributionInvestmentCodeList(Optional fundcode)
    '
    '   Returns a unique array of distributions investment codes from distribution tab
    '
    Dim investmentlist(), investmentlistTemp(), i, investmentcode, investmentcount
    i = 1
    investmentcount = 0
    investmentcode = ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 3).Value
    ReDim investmentlist(1)
    
    ' adjust for fund check
    If Not IsMissing(fundcode) Then
        If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(0, 0).Value) <> fundcode Then
            investmentcount = investmentcount - 1
        End If
    End If
    investmentlist(0) = investmentcode
    
    While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 0).Value <> ""
        investmentcode = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i - 1, 3).Value)
        If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 3).Value) <> investmentcode Then
            If IsMissing(fundcode) Then
                investmentcount = investmentcount + 1
                ReDim Preserve investmentlist(investmentcount)
                investmentlist(investmentcount) = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 3).Value)
            Else
                If fundcode = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 0).Value) Then
                    investmentcount = investmentcount + 1
                    ReDim Preserve investmentlist(investmentcount)
                    investmentlist(investmentcount) = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 3).Value)
                End If
            End If
        End If
        i = i + 1
    Wend
    getDistributionInvestmentCodeList = investmentlist
End Function

Public Function getDistributionHoldingCodeList(fundcode)
    '
    '   Returns a unique array of holding accounts from distribution tab for a fund
    '
    Dim holdinglist(), i, holdingcode, holdingcount
    i = 1
    holdingcount = 0
    holdingcode = ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 5).Value
    
    ' adjust for fund check
    If Not IsMissing(fundcode) Then
        If ThisWorkbook.Worksheets("Distributions").Range("a1").offset(0, 0).Value <> fundcode Then
            holdingcount = holdingcount - 1
        End If
    End If
    
    ReDim holdinglist(1)
    holdinglist(0) = holdingcode
    While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 0).Value <> ""
        holdingcode = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i - 1, 5).Value)
        If ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 5).Value <> holdingcode Then
            If IsEmpty(fundcode) Then
                holdingcount = holdingcount + 1
                ReDim Preserve holdinglist(holdingcount)
                holdinglist(holdingcount) = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 5).Value)
            Else
                If fundcode = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 0).Value) Then
                    holdingcount = holdingcount + 1
                    ReDim Preserve holdinglist(holdingcount)
                    holdinglist(holdingcount) = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 5).Value)
                End If
            End If
        End If
        i = i + 1
    Wend
    getDistributionHoldingCodeList = holdinglist
End Function


Public Function downloadRelevantTemplateComponents(templateCodes() As String, ByVal apiresponse As MSXML2.IXMLDOMElement)
    '
    ' Get array of tax components for all relevant security codes from API Response
    ' Parameter: Array of investment codes
    ' Returns: MultiDimentionalArray of tax components
    ' Limit: 1000 Tax Templates (500 managed funds, 500 asx)
    '
    Dim components(2000, 24) As Variant, investment
    Dim xmlhtp As New MSXML2.XMLHTTP60
    Dim ClassTaxNode As IXMLDOMNode
    Dim code, exdate, description, franked, unfranked, frankingcredit, interest, otherIncome, foreignInterest, foreignModPass, ForeignOther, foreignTaxCred, discountCapGainDomestic, discountCapGainForeign, cgtConcessional, amitCostBase
    Dim grossedUpCapGain, indexCapGainDomestic, indexCapGainForeign, otherCapGainDomestic, otherCapGainForeign, taxExempt, taxFree, taxDeferred, capitalReturns
    Dim i
    i = 0
    
    
    For Each ClassTaxNode In apiresponse.SelectNodes("Templates/ClassTaxTemplate")
        ' Added by Navin
        If Len(Join(templateCodes, "")) <> 0 Then
        For Each investment In templateCodes
            If investment = ClassTaxNode.SelectSingleNode("SecurityCode").Text Then
                ' Assign response
                code = ClassTaxNode.SelectSingleNode("SecurityCode").Text
                exdate = ClassTaxNode.SelectSingleNode("DistributionDate").Text
                description = ClassTaxNode.SelectSingleNode("Description").Text
                franked = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text)
                unfranked = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text)
                frankingcredit = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankingCredit").Text)
                interest = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("Interest").Text)
                otherIncome = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherIncome").Text)
                foreignInterest = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text)
                foreignModPass = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text)
                ForeignOther = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text)
                foreignTaxCred = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignTaxCredit").Text)
                discountCapGainDomestic = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text)
                discountCapGainForeign = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text)
                cgtConcessional = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CGTConcessionalAmount").Text)
                grossedUpCapGain = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("GrossedUpCapitalGainsDiscountMethod").Text)
                indexCapGainDomestic = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text)
                indexCapGainForeign = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text)
                otherCapGainDomestic = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text)
                otherCapGainForeign = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text)
                taxExempt = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxExempt").Text)
                taxFree = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxFree").Text)
                taxDeferred = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxDeferred").Text)
                capitalReturns = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CapitalReturns").Text)
                amitCostBase = TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("AMITCostBase").Text)
                ' Store response
                components(i, 0) = code
                components(i, 1) = exdate
                components(i, 2) = description
                components(i, 3) = franked
                components(i, 4) = unfranked
                components(i, 5) = frankingcredit
                components(i, 6) = interest
                components(i, 7) = otherIncome
                components(i, 8) = foreignInterest
                components(i, 9) = foreignModPass
                components(i, 10) = ForeignOther
                components(i, 11) = foreignTaxCred
                components(i, 12) = discountCapGainDomestic
                components(i, 13) = discountCapGainForeign
                components(i, 14) = cgtConcessional
                components(i, 15) = grossedUpCapGain
                components(i, 16) = indexCapGainDomestic
                components(i, 17) = indexCapGainForeign
                components(i, 18) = otherCapGainDomestic
                components(i, 19) = otherCapGainForeign
                components(i, 20) = taxExempt
                components(i, 21) = taxFree
                components(i, 22) = taxDeferred
                components(i, 23) = capitalReturns
                components(i, 24) = amitCostBase
                i = i + 1
            End If
        Next investment
        End If
    Next ClassTaxNode
    
    downloadRelevantTemplateComponents = components
End Function

Public Function getRelevantAPITemplateList(Optional ByVal apiresponse As MSXML2.IXMLDOMElement)
    '
    ' Get array of investment codes of templates that have details on distribution or annoucements
    '
    Dim relevanttemplates() As String, template, investmentcodes, investmentcode, templateComponents, relevantNumber
    Dim t
    
    If IsEmpty(apiresponse) Then
        ' Use spreadhseet templates
        template = getWorkbookTaxTemplatesList
    Else
        ' Use API request templates
        template = getAPITaxTemplatesList(apiresponse)
    End If
    
    t = 0
    relevantNumber = 0
    While t <= UBound(template)
        templateComponents = Split(template(t), ",")
        investmentcodes = getDistributionInvestmentCodeList
        If (UBound(templateComponents)) >= 0 Then
        
            For Each investmentcode In investmentcodes
                If Trim(templateComponents(0)) = Trim(investmentcode) Then
                    If IsEmpty(relevanttemplates) Then
                        ReDim relevanttemplates(1)
                        relevanttemplates(0) = Trim(templateComponents(0))
                    Else
                        relevantNumber = relevantNumber + 1
                        ReDim Preserve relevanttemplates(relevantNumber)
                        relevanttemplates(relevantNumber) = Trim(templateComponents(0))
                        Exit For
                    End If
                End If
            Next investmentcode
        End If
        t = t + 1
    Wend
    getRelevantAPITemplateList = relevanttemplates
End Function


Public Function getWorkbookTaxTemplatesList()
    '
    '   Returns an array of Tax Template components from TaxTemplates tab
    '
    Dim templateList(), templateListTemp(), i, y
    Dim investmentcode, templateComponents
    i = 0

    While ThisWorkbook.Worksheets("TaxTemplates").Range("TaxComponentTemplateStart").offset(i, 0).Value <> ""
        ReDim Preserve templateList(i)
        y = 1
        templateComponents = ThisWorkbook.Worksheets("TaxTemplates").Range("TaxComponentTemplateStart").offset(i, 0).Value
        While y < 31
            templateComponents = templateComponents & "||" & ThisWorkbook.Worksheets("TaxTemplates").Range("TaxComponentTemplateStart").offset(i, y).Value
            y = y + 1
        Wend
        templateList(i) = templateComponents
        i = i + 1
    Wend
    getWorkbookTaxTemplatesList = templateList
    
End Function

Public Function getAPITaxTemplatesList(ByVal apiresponse As MSXML2.IXMLDOMElement)
    '
    '   Returns an array of Tax Template components from a provided api response tab
    '
    Dim xmlhtp As New MSXML2.XMLHTTP60
    Dim ClassTaxNode As IXMLDOMNode
    Dim componentList(), i, component
    i = 0
    ReDim componentList(1)
    componentList(1) = component
    For Each ClassTaxNode In apiresponse.SelectNodes("Templates/ClassTaxTemplate")
        If i = 0 Then
            component = ClassTaxNode.SelectSingleNode("SecurityCode").Text & "," & ClassTaxNode.SelectSingleNode("DistributionDate").Text & "," & ClassTaxNode.SelectSingleNode("Description").Text & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankingCredit").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("Interest").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherIncome").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text) & "," & _
            TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignTaxCredit").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CGTConcessionalAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("GrossedUpCapitalGainsDiscountMethod").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text) & "," & _
            TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxExempt").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxFree").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxDeferred").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CapitalReturns").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("AMITCostBase").Text)
            componentList(0) = component
            i = i + 1
        Else
            ReDim Preserve componentList(i)
            component = ClassTaxNode.SelectSingleNode("SecurityCode").Text & "," & ClassTaxNode.SelectSingleNode("DistributionDate").Text & "," & ClassTaxNode.SelectSingleNode("Description").Text & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankedAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("UnFrankedAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("FrankingCredit").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("Interest").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherIncome").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignInterest").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignModifiedPassive").Text) & "," & _
            TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeiginOther").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("ForeignTaxCredit").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsDomestic").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("DiscountedCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CGTConcessionalAmount").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("GrossedUpCapitalGainsDiscountMethod").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsDomestic").Text) & "," & _
            TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("IndexedCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsDomestic").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("OtherCapGainsForeign").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxExempt").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxFree").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("TaxDeferred").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("CapitalReturns").Text) & "," & TaxStatementBulkEntry.PrepareNumberAsDouble(ClassTaxNode.SelectSingleNode("AMITCostBase").Text)
            componentList(i) = component
            i = i + 1
        End If
    Next ClassTaxNode
    getAPITaxTemplatesList = componentList
End Function

Sub GenerateBrandIncomeList(FYEnd, Optional Brand)
    Dim rowCounter, brands, Username, Password, brandsCompleted
    
    ' skips heading row
    rowCounter = 2
    While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(rowCounter - 1, 0).Value <> ""
        rowCounter = rowCounter + 1
    Wend
    
    ' Check is Business level report
    If IsMissing(Brand) Then
        'rowCounter = GenerateIncomeList(FYEnd, , rowCounter,,, username, Password)
        ' for each brand in business
        brands = Split(getBrandList(), ",") 'Username, Password
        brandsCompleted = 0
        For Each Brand In brands
            If Brand = "" Then
                'skip code
            Else
                rowCounter = rowCounter + GenerateSplitIncomeLists(FYEnd, Brand, , rowCounter, Username, Password)
                brandsCompleted = brandsCompleted + 1
                Application.ScreenUpdating = True
                Application.StatusBar = "Brand Income Generated: " & brandsCompleted & "/ " & UBound(brands)
                Application.ScreenUpdating = False
            End If
        Next Brand
    Else
        ' 1 Brand Only
        rowCounter = GenerateSplitIncomeLists(FYEnd, Brand, , rowCounter, Username, Password)
        brandsCompleted = 1
    End If
    
End Sub

Function GenerateSplitIncomeLists(FinancialYearEnd, Optional Brand, Optional fundList, Optional baseRow, Optional Username, Optional Password)
'
'   Generates Distribution Income and Tax Statements for each Fund/Security/Date
'
    Dim distributionIncome, distributionRec, distributionIncomeItem, distributionRecItem, funds, Fund, base, successful
    Dim distributionIncomeCount As Long, distributionIncomeItemCount As Long, distributionRecCount As Long, distributionRecItemItemCount As Long, Count As Long
    Dim excludeCount, excludefund
    
    ' Progess Bar...
    Dim fundCounter As Long
    Dim totalFundCount As Long
    fundCounter = 0
    Count = 0
    totalFundCount = 0
    
    Call ProgressBar.UpdateProgress(, , "Retrieving Fund list...", False, "Fund List Retrieval")
    
    If IsMissing(Brand) And (Not IsMissing(Username) Or Not IsMissing(Password)) Then
        funds = Split(getFundList(, Username, Password), ",")
    ElseIf Not IsMissing(Username) Or Not IsMissing(Password) Then
        If IsEmpty(fundList) Or IsMissing(fundList) Then
            funds = Split(getFundList(Brand, Username, Password), ",")
        Else
            funds = Split(fundList, ",")
        End If
    Else
        funds = Split(getFundList(), ",")
    End If
    
    If IsMissing(baseRow) Then
        ' 500000 Limit Distribution items
        baseRow = findInsertPoint("Distributions!a" & 500000)
    End If
    Set base = Range("Distributions!a" & baseRow)
    
    Call unprotectWorkbook
    
    ' Headers
    Set base = ThisWorkbook.Worksheets("Distributions").Range("Distributions!A1")
    base.offset(0, 0) = "Fund"
    base.offset(0, 1) = "Date"
    base.offset(0, 2) = "Type"
    base.offset(0, 3) = "Security"
    base.offset(0, 4) = "HoldingDescription"
    base.offset(0, 5) = "HoldingAccountCode"
    base.offset(0, 6) = "TransactionDescription"
    base.offset(0, 7) = "NetDistribution"
    base.offset(0, 8) = "FrankedCredits"
    base.offset(0, 9) = "AnnouncementDescription"
    base.offset(0, 10) = "AnnouncementIncome"
    base.offset(0, 11) = "NetTaxStatements"
    base.offset(0, 12) = "IsAPIR"
    base.offset(0, 13) = "isZero"
    base.offset(0, 14) = "Matches"
    base.offset(0, 15) = "TaxTemplateExists"
    base.offset(0, 16) = "Status"
    'ThisWorkbook.Worksheets("Distributions").Range("Distributions!j1")
    
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = True
    Application.StatusBar = "Retrieving Distributions data, please wait..."
    Application.ScreenUpdating = False
   
    totalFundCount = UBound(funds) + 1
    If totalFundCount > 0 Then
        Call ProgressBar.UpdateProgress(fundCounter, totalFundCount, "Retrieving distribution data...", False, "Distribution Data Retrieval")
    
        For Each Fund In funds
            If Fund = "" Then
                'Ignore invalid fund code
            Else
                If excludefund Then
                    'Ignore Excluded fund
                Else
                    ' Get income for Brand per fund in fundlist
                    If IsMissing(Brand) Then
                        'distributionIncome = Split(getIncomeList(FinancialYearEnd, Fund, , username, Password), vbCrLf)
                    Else
                        'distributionIncome = Split(getIncomeList(FinancialYearEnd, Fund, Brand, username, Password), vbCrLf)
                        distributionRec = Split(getDistributionRec(FinancialYearEnd, Fund, Brand, Username, Password), vbCrLf)
                        distributionIncome = Split(getInvestmentIncome(FinancialYearEnd, Fund, Brand, Username, Password), vbCrLf)
                    End If
                 
                    distributionRecCount = UBound(distributionRec)
                    distributionIncomeCount = UBound(distributionIncome)
                
                    ' No holdings found
                    If distributionIncomeCount = -1 Then
                    ' Ignore
                    Else
                    ' Populate Income sheet with info
                    Dim i, u, f, x, y
                    i = 0
                     
                    Do While i < distributionIncomeCount
                        x = 0
                        distributionIncomeItem = Split(distributionIncome(i), "|")
                        distributionIncomeItemCount = UBound(distributionIncomeItem)
                        ' combine distribution Rec results
                        u = 0
                        While u < distributionRecCount
                             distributionRecItem = Split(distributionRec(u), "|")
                             distributionRecItemItemCount = UBound(distributionIncomeItem)
                             
                             If Trim(distributionRecItem(0)) = Trim(distributionIncomeItem(4)) Then
                                 ' Join Distribution tax statement to distribution item array
                                 Dim combineDist(0 To 10)
                                 For y = 0 To UBound(distributionIncomeItem)
                                     combineDist(y) = distributionIncomeItem(y)
                                 Next y
                                 combineDist(UBound(combineDist)) = distributionRecItem(1)
                                 distributionIncomeItem = combineDist
                             End If
                             u = u + 1
                        Wend
                         
                        ' Check if missing distribution Type?
                        If UBound(distributionIncomeItem) < 1 Or UBound(distributionIncomeItem) < 10 Then
                            ' skip distribution type missing or data missing
                        Else
                            If Not (Trim(distributionIncomeItem(6)) <> "" And Trim(distributionIncomeItem(6)) <> 0) And Not (Trim(distributionIncomeItem(9)) <> "" And Trim(distributionIncomeItem(9)) <> 0) Then
                                ' Ignore
                            Else
                                ' Prune income to include only Distributions
                                If Trim(distributionIncomeItem(1)) = "Distribution" Then
                                    ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 0) = Fund
                                    Do While x <= distributionIncomeItemCount
                                        ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, x + 1) = Trim(distributionIncomeItem(x))
                                        x = x + 1
                                    Loop
                                 
                                     ' Calculate Additional fields for validations
                                     Dim isAPIR, isZero, matches, TaxTemplateExists, StatusNumber
                                     If Len(Trim(ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 3))) = 9 Then
                                         isAPIR = "APIR"
                                     Else
                                         isAPIR = "ASX"
                                     End If
                                     If ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) > 0 Then
                                         isZero = "Distribution Expected"
                                     Else
                                         isZero = "No Dist. Expected"
                                     End If
                                     If ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 7) Then
                                         matches = "Matches"
                                     ElseIf ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 7) > 0 Or ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) > 0 Then
                                         matches = "Doesn't Match"
                                     Else
                                         matches = "Missing Event"
                                     End If
                                     ' Check 500 tax templates from tab
                                     ' TaxTemplateExists = "=if(isna(MATCH(""" & Trim(distributionIncomeItem(2)) & """,TaxTemplates!$C$3:$C$503,0)),""False"",if(MATCH(""" & Trim(distributionIncomeItem(2)) & """,TaxTemplates!$C$3:$C$503,0)>0,""True"",""False""))"
                                     
                                     ' below line added by Navin
                                     TaxTemplateExists = Application.Evaluate("=if(isna(MATCH(""" & Trim(distributionIncomeItem(2)) & """,TaxTemplates!$C$3:$C$503,0)),""False"",if(MATCH(""" & Trim(distributionIncomeItem(2)) & """,TaxTemplates!$C$3:$C$503,0)>0,""True"",""False""))")
                                    'SAM
                                     Dim indexVar, lookupRange1, lookupRange2, myval1
                                     Dim indx As Variant
                                     If TaxTemplateExists = True Then
                     
                                         Set lookupRange1 = ThisWorkbook.Worksheets("TaxTemplates").Range("C1:C503")
                                         Set lookupRange2 = ThisWorkbook.Worksheets("TaxTemplates").Range("D1:D503")
                                         
                                         indx = -1
                                         Worksheets("Distributions").Range("R1").Value = Trim(distributionIncomeItem(2))
                                         Worksheets("Distributions").Range("R2").FormulaArray = "=SMALL(IF(TaxTemplates!R[-1]C[-15]:R[500]C[-15]=R[-1]C,ROW(TaxTemplates!R[-1]C[-15]:R[500]C[-15])),ROW(R[" & indx & "]))"
                                         Do
                                         Set indexVar = Worksheets("Distributions").Range("R2")
                                         Set myval1 = Application.Index(lookupRange2, indexVar)
                                         If (CDate(myval1) >= CDate(FinancialDateStart) And CDate(myval1) <= CDate(FinancialDateEnd)) Then
                                           TaxTemplateExists = True
                                           Exit Do
                                         End If
                                         TaxTemplateExists = False
    
                                         indx = indx + 1
                                         Worksheets("Distributions").Range("R2").FormulaArray = "=SMALL(IF(TaxTemplates!R[-1]C[-15]:R[500]C[-15]=R[-1]C,ROW(TaxTemplates!R[-1]C[-15]:R[500]C[-15])),ROW(R[" & indx & "]))"
                                         Loop Until IsError(Worksheets("Distributions").Range("R2")) = True
                                     End If
                                     
                                     
                                     With ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow)
                                         .offset(Count, 12) = isAPIR
                                         .offset(Count, 13) = isZero
                                         .offset(Count, 14) = matches
                                         .offset(Count, 15) = TaxTemplateExists
                                     End With
                                     
                                    ' Calculate additional Status Column
                                    ' Status lookup
                                    ' No| Status Text            | Calculation                                                                                                                        | Colour |
                                    ' 1 | No Action              | Income Event processed, tax Statement Processed and within Tolerance of distribution                                               | Grey   |
                                    ' 2 | Manual Tax Statement   | Income Entitlement does not exist (0), income event processed, tax statement not processed                                         | Red    |
                                    ' 3 | Manual Tax Statement   | Income Entitlement Exists, Income Event processed and within tolerance of entiltement, no tax statement and template avalible = no | Red    |
                                    ' 4 | Generate Income        | Income Entitlement Exists, Income Event missing                                                                                    | Yellow |
                                    ' 5 | Generate Tax Statement | Income Entitlement Exists, Income Event Exists and within tolerance of entitlement, no tax statement and template avalible = yes   | Yellow |
                                    ' 6 | Reconciliation Issue   | Income Entitlement Exists, Income Event Exists, Income Event not within tolerance of entitlement                                   | Red    |
                                    ' 7 | Reconciliation Issue   | Tax Statement Exists, Income Event Exists, Income Event not within tolerance of Tax Statement                                      | Red    |
                                    ' 8 | Complete               | Income Event Exists, Tax Statement Exists, Tax statement within tolerance of Income Event                                          | Green  |
                                     
                                     ' Update cells for following calculation
                                     ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 15).Calculate
                                     
                                     Dim IncomeAmount
                                     Dim entitlementAmount
                                     Dim taxStatementAmount
                                     Dim taxStatementTemplate
                                     Dim tolerance
                                     StatusNumber = ""
                                     IncomeAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 7)
                                     entitlementAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10)
                                     taxStatementAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 11)
                                     taxStatementTemplate = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 15)
                                     tolerance = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) * 0.01 ' 1% of entitlement
                                     
                                     ' Manual Tax Statement
                                     If taxStatementAmount = 0 Or taxStatementAmount = "" Then
                                         If entitlementAmount = "" Or entitlementAmount = 0 And IncomeAmount <> 0 Then
                                             StatusNumber = "Manual Tax Statement"
                                         End If
                                         If entitlementAmount <> 0 And entitlementAmount <> "" Then
                                             If Abs(IncomeAmount - entitlementAmount) <= tolerance Then
                                                If taxStatementTemplate = "False" Then
                                                    StatusNumber = "Manual Tax Statement"
                                                End If
                                             End If
                                         End If
                                     End If
                                     
                                     ' Generate Income
                                     If entitlementAmount <> 0 And entitlementAmount <> "" Then
                                         If IncomeAmount = 0 Or IncomeAmount = "" Then
                                            StatusNumber = "Generate Income"
                                         End If
                                     End If
        
                                     ' Generate Tax Statement
                                     If entitlementAmount <> 0 And entitlementAmount <> "" Then
                                         If IncomeAmount <> 0 And IncomeAmount <> "" Then
                                             If Abs(IncomeAmount - entitlementAmount) <= tolerance Then
                                                If taxStatementAmount = 0 Or taxStatementAmount = "" Then
                                                    If taxStatementTemplate = "True" Then
                                                        StatusNumber = "Generate Tax Statement"
                                                    End If
                                                End If
                                             End If
                                         End If
                                     End If
                                     
                                     ' Reconciliation Issue
                                     If IncomeAmount <> 0 And IncomeAmount <> "" Then
                                         If entitlementAmount <> 0 And entitlementAmount <> "" Then
                                             If Abs(IncomeAmount - entitlementAmount) >= tolerance Then
                                                 StatusNumber = "Reconciliation Issue"
                                             End If
                                         End If
                                         If taxStatementAmount <> 0 And taxStatementAmount <> "" Then
                                             If Not Abs(IncomeAmount - taxStatementAmount) <= tolerance Then
                                                 StatusNumber = "Reconciliation Issue"
                                             End If
                                         End If
                                     Else
                                        If taxStatementAmount <> 0 And taxStatementAmount = "" Then
                                            If entitlementAmount <> 0 And entitlementAmount = "" Then
                                                StatusNumber = "Reconciliation Issue"
                                            End If
                                        End If
                                     End If
                                     
                                     ' Complete
                                     If IncomeAmount <> 0 And IncomeAmount <> "" Then
                                         If taxStatementAmount <> 0 And taxStatementAmount <> "" Then
                                             If Abs(IncomeAmount - taxStatementAmount) <= tolerance Then
                                                 StatusNumber = "Complete"
                                             End If
                                         End If
                                     End If
                                     
                                     ' No Action
                                     If IncomeAmount <> 0 Then
                                         If Abs(taxStatementAmount - IncomeAmount) <= tolerance Then
                                             StatusNumber = "No Action"
                                         End If
                                         If taxStatementAmount > 0 Then
                                            ' Unable to sum all distributions to check total tax = distribution if annual statement
                                            StatusNumber = "No Action"
                                         End If
                                     End If
                                     
                                     ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 16) = StatusNumber
                                     
                                     Count = Count + 1
                                 End If
                            End If
                        End If
                        i = i + 1
                     Loop
                 End If
                End If
            End If
            
            ' Update counter
            fundCounter = fundCounter + 1
            Call ProgressBar.UpdateProgress(fundCounter, totalFundCount, _
                    "Retrieving distribution data for fund " & Fund, True)

        Next Fund
    
    ' Sort output
    Call sortDistributionsBySecurity
    
    End If
    
    ' turn off calc
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = "Distributions Received: " & Count & " items"
    Application.ScreenUpdating = True
    Call toggleProtection
    
    GenerateSplitIncomeLists = Count
    
End Function
Function UpdateTaxTemplateStatus()
    Dim TaxTemplateExists, i, investmentcode, StatusNumber
    Dim indexVar, lookupRange1, lookupRange2, myval1, baseRow
    Dim indx As Variant
    baseRow = 2
    i = 0
  
    Application.ScreenUpdating = False
    Call unprotectWorkbook
    While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(i, 0).Value <> ""
    
        investmentcode = Trim(ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 3).Value)
      
        TaxTemplateExists = Application.Evaluate("=if(isna(MATCH(""" & Trim(investmentcode) & """,TaxTemplates!$C$3:$C$503,0)),""False"",if(MATCH(""" & Trim(investmentcode) & """,TaxTemplates!$C$3:$C$503,0)>0,""True"",""False""))")

        
        If TaxTemplateExists = True Then

            Set lookupRange1 = ThisWorkbook.Worksheets("TaxTemplates").Range("C1:C503")
            Set lookupRange2 = ThisWorkbook.Worksheets("TaxTemplates").Range("D1:D503")

            indx = -1
            Worksheets("Distributions").Range("R1").Value = Trim(investmentcode)
            Worksheets("Distributions").Range("R2").FormulaArray = "=SMALL(IF(TaxTemplates!R[-1]C[-15]:R[500]C[-15]=R[-1]C,ROW(TaxTemplates!R[-1]C[-15]:R[500]C[-15])),ROW(R[" & indx & "]))"
            Do
            Set indexVar = Worksheets("Distributions").Range("R2")
            Set myval1 = Application.Index(lookupRange2, indexVar)
            If (CDate(myval1) >= CDate(FinancialDateStart) And CDate(myval1) <= CDate(FinancialDateEnd)) Then
              TaxTemplateExists = True
              Exit Do
            End If
            TaxTemplateExists = False

            indx = indx + 1
            Worksheets("Distributions").Range("R2").FormulaArray = "=SMALL(IF(TaxTemplates!R[-1]C[-15]:R[500]C[-15]=R[-1]C,ROW(TaxTemplates!R[-1]C[-15]:R[500]C[-15])),ROW(R[" & indx & "]))"
            Loop Until IsError(Worksheets("Distributions").Range("R2")) = True
        End If
        ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 15).Value = TaxTemplateExists  'TaxTemplate

            ' Update cells for following calculation
           ' ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 15).Calculate

            Dim IncomeAmount
            Dim entitlementAmount
            Dim taxStatementAmount
            Dim taxStatementTemplate
            Dim tolerance
            StatusNumber = ""
            IncomeAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 7)
            entitlementAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 10)
            taxStatementAmount = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 11)
            taxStatementTemplate = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 15)
            tolerance = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 10) * 0.01 ' 1% of entitlement
'
            ' Manual Tax Statement
            If taxStatementAmount = 0 Or taxStatementAmount = "" Then
                If entitlementAmount = "" Or entitlementAmount = 0 And IncomeAmount <> 0 Then
                    StatusNumber = "Manual Tax Statement"
                End If
                If entitlementAmount <> 0 And entitlementAmount <> "" Then
                    If Abs(IncomeAmount - entitlementAmount) <= tolerance Then
                       If taxStatementTemplate = "False" Then
                           StatusNumber = "Manual Tax Statement"
                       End If
                    End If
                End If
            End If
    
    
             ' Generate Tax Statement
             If entitlementAmount <> 0 And entitlementAmount <> "" Then
                 If IncomeAmount <> 0 And IncomeAmount <> "" Then
                     If Abs(IncomeAmount - entitlementAmount) <= tolerance Then
                        If taxStatementAmount = 0 Or taxStatementAmount = "" Then
                            If taxStatementTemplate = "True" Then
                                StatusNumber = "Generate Tax Statement"
                            End If
                        End If
                     End If
                 End If
             End If

    
        If (StatusNumber <> "") Then
            ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(i, 16).Value = StatusNumber  'Status
        End If
        i = i + 1
        Application.StatusBar = "Updating: " & i & " items"
    Wend
    Call toggleProtection
    Application.ScreenUpdating = True
   
 
End Function

Function GenerateIncomeList(FinancialYearEnd, Optional Brand, Optional baseRow, Optional Username, Optional Password)
'
'   Generates Distribution Income and Tax Statements for each Fund/Security/Date
'
    Dim distributionIncome, distributionIncomeItem, funds, Fund, base, successful
    Dim distributionIncomeCount As Long, distributionIncomeItemCount As Long, Count As Long
    
    ' Progess Bar...
    Dim fundCounter As Long
    Dim totalFundCount As Long
    fundCounter = 0
    Count = 0
    totalFundCount = 0
    
    Call ProgressBar.UpdateProgress(, , "Retrieving Fund list...", False, "Fund List Retrieval")
    
    If IsMissing(Brand) And (Not IsMissing(Username) Or Not IsMissing(Password)) Then
        funds = Split(getFundList(, Username, Password), ",")
    ElseIf Not IsMissing(Username) Or Not IsMissing(Password) Then
        funds = Split(getFundList(Brand, Username, Password), ",")
    Else
        funds = Split(getFundList(), ",")
    End If
    
    If IsMissing(baseRow) Then
        ' 500000 Limit Distribution items
        baseRow = findInsertPoint("Distributions!a" & 500000)
    End If
    Set base = Range("Distributions!a" & baseRow)
    
    ' Headers
    Set base = ThisWorkbook.Worksheets("Distributions").Range("Distributions!A1")
    base.offset(0, 0) = "Fund"
    base.offset(0, 1) = "Date"
    base.offset(0, 2) = "Type"
    base.offset(0, 3) = "Security"
    base.offset(0, 4) = "HoldingDescription"
    base.offset(0, 5) = "HoldingAccountCode"
    base.offset(0, 6) = "TransactionDescription"
    base.offset(0, 7) = "NetDistribution"
    base.offset(0, 8) = "FrankedCredits"
    base.offset(0, 9) = "AnnouncementDescription"
    base.offset(0, 10) = "AnnouncementIncome"
    base.offset(0, 11) = "NetTaxStatements"
    base.offset(0, 12) = "IsAPIR"
    base.offset(0, 13) = "isZero"
    base.offset(0, 14) = "Matches"
    'ThisWorkbook.Worksheets("Distributions").Range("Distributions!j1")
    
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = True
    Application.StatusBar = "Retrieving Distributions data, please wait..."
    Application.ScreenUpdating = False
   
    
    totalFundCount = UBound(funds) + 1
    If totalFundCount > 0 Then
        Call ProgressBar.UpdateProgress(fundCounter, totalFundCount, "Retrieving distribution data...", False, "Distribution Data Retrieval")
    
        For Each Fund In funds
            If Fund = "" Then
                'Ignore invalid fund code
            Else
                ' Get income for Brand per fund in fundlist
                If IsMissing(Brand) Then
                    'distributionIncome = Split(getIncomeList(FinancialYearEnd, Fund, , username, Password), vbCrLf)
                Else
                    'distributionIncome = Split(getIncomeList(FinancialYearEnd, Fund, Brand, username, Password), vbCrLf)
                    distributionIncome = Split(getTaxStatements(FinancialYearEnd, Fund, Brand, Username, Password), vbCrLf)
                End If
             
                distributionIncomeCount = UBound(distributionIncome)
                
                ' No holdings found
                If distributionIncomeCount = -1 Then
                    ' Ignore
                Else
                    ' Populate Income sheet with info
                    Dim i, x
                    i = 0
                    Do While i < distributionIncomeCount
                        distributionIncomeItem = Split(distributionIncome(i), "|")
                        distributionIncomeItemCount = UBound(distributionIncomeItem)
                        x = 0
                        ' Check if missing distribution Type?
                        If UBound(distributionIncomeItem) < 1 Or UBound(distributionIncomeItem) < 11 Then
                            ' skip distribution type missing or data missing
                        Else
                            ' Prune income to include only Distributions
                            If Trim(distributionIncomeItem(1)) = "Distribution" Then
                                If Trim(distributionIncomeItem(6)) = "" Or Trim(distributionIncomeItem(6)) = 0 Then
                                    ' Ignore if 0 Distribution
                                Else
                                    ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 0) = Fund
                                    Do While x < distributionIncomeItemCount
                                        ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, x + 1) = Trim(distributionIncomeItem(x))
                                        x = x + 1
                                    Loop
                                    
                                    ' Calculate Additional fields for validations
                                    Dim isAPIR, isZero, matches, TaxTemplateExists
                                    If Len(Trim(ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 3))) = 9 Then
                                        isAPIR = "APIR"
                                    Else
                                        isAPIR = "ASX"
                                    End If
                                    If ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) > 0 Then
                                        isZero = "Distribution Expected"
                                    Else
                                        isZero = "No Dist. Expected"
                                    End If
                                    If ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) = ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 7) Then
                                        matches = "Matches"
                                    ElseIf ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 7) > 0 Or ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow).offset(Count, 10) > 0 Then
                                        matches = "Doesn't Match"
                                    Else
                                        matches = "Missing Event"
                                    End If
                                    
                                    With ThisWorkbook.Worksheets("Distributions").Range("Distributions!a" & baseRow)
                                        .offset(Count, 12) = isAPIR
                                        .offset(Count, 13) = isZero
                                        .offset(Count, 14) = matches
                                    End With
                                    Count = Count + 1
                                End If
                            End If
                        End If
                        i = i + 1
                    Loop
                End If
            End If
            
            ' Update counter
            fundCounter = fundCounter + 1
            Call ProgressBar.UpdateProgress(fundCounter, totalFundCount, _
                    "Retrieving distribution data for fund " & Fund, True)
    
        Next Fund
    
    ' Sort output
    Call sortDistributionsBySecurity
    
    End If
    
    ' turn off calc
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = "Distributions Received: " & Count & " items"
    Application.ScreenUpdating = True
    
    GenerateIncomeList = Count
    
End Function


Private Function getHoldingsList(secCode, targetDate, Optional logon = "", Optional pw = "")
    Dim sendUrl, reqType, resultString
    
    reqType = "Security Holdings"
    sendUrl = "<host>/system/class/<business>/<brand>/components/investment-register/reports/holding-quantity-for-scope?secisscode=" & secCode & "&date=" & Format(targetDate, "dd/mm/yyyy")
    resultString = getWebServiceData(sendUrl, reqType, logon, pw)
    
    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getHoldingsList = transformHoldings(resultString)
    
End Function

Private Function getIncomeList(FinancialYearEnd, Fund, Optional Brand, Optional logon = "", Optional pw = "")
    Dim sendUrl, reqType, resultString, funds, FinancialYearStart, year
      
    ' "date="&Format(targetDate, "dd/mm/yyyy")
    ' "periodCalendarId=91f41836-4f86-41f3-a21d-680262dc4af2"
    If FinancialYearEnd = Format(FinancialYearEnd, "dd/mm/yyyy") Then
        FinancialYearEnd = Format(FinancialYearEnd, "yyyy-mm-dd")
    End If
    
    year = Mid(FinancialYearEnd, 3, 2)
    FinancialYearStart = "20" & year - 1 & "-07-01"
    reqType = "Distributions"
    If Not IsMissing(Brand) Then
        sendUrl = "<host>/system/class/<business>/" & Brand & "/" & Fund & "/components/report-data/investment-income-comparison?start=" & FinancialYearStart & "&end=" & FinancialYearEnd
    Else
        sendUrl = "<host>/system/class/<business>/<brand>/" & Fund & "/components/report-data/investment-income-comparison?start=" & FinancialYearStart & "&end=" & FinancialYearEnd
    End If
    resultString = getWebServiceData(sendUrl, reqType, logon, pw)
    
    ' if canceled
    
    
    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getIncomeList = transformIncomeComparison(resultString)
    
End Function

Private Function getFundList(Optional Brand, Optional logon = "", Optional pw = "")
    ' Retreives Fundcode from report-data/fund-summary.xml
    
    Dim sendUrl, reqType, resultString
    
    ' get list of fund codes
    reqType = "FundList"
    If IsMissing(Brand) Then
        sendUrl = "<host>/system/class/<business>/components/report-data/fund-summary"
    Else
        sendUrl = "<host>/system/class/<business>/" & Brand & "/components/report-data/fund-summary"
    End If
    resultString = getWebServiceData(sendUrl, reqType, logon, pw)
    
    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getFundList = transformFundList(resultString)
    
End Function

Private Function getBrandList(Optional logon = "", Optional pw = "")
    ' Retreives Brandcode from brand-register/brand.xml
    
    Dim sendUrl, reqType, resultString
    
    ' get list of fund codes
    reqType = "BrandList"
    sendUrl = "<host>/system/class/<business>/components/brand-register/brand"
    resultString = getWebServiceData(sendUrl, reqType, logon, pw)
    
    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getBrandList = transformBrandList(resultString)
    
End Function

Private Function getTaxStatements(taxDate, Fund, Brand, Optional logon = "", Optional pw = "")
    ' Calls combine Excel/TaxStatement service to return all tax information for fund within one web service call
    
    Dim sendUrl, reqType, resultString, funds, fundcode

    taxDate = Format(taxDate, "yyyy-mm-dd")

    reqType = "Tax Details"
    sendUrl = "<host>/system/class/<business>/" & Brand & "/" & Fund & "/components/report-data/excel/tax-statement?" & "atDate=" & taxDate
    resultString = getWebServiceData(sendUrl, reqType) ', logon, pw

    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getTaxStatements = transformTaxReconsilliation(resultString)
End Function



Private Function getDistributionRec(taxDate, Fund, Brand, Optional logon = "", Optional pw = "")
    ' Calls individual web services to return tax information for fund
    
    Dim sendUrl, reqType, resultString, funds, fundcode, combineResult, startDate, endDate, LookupCalendarID

    taxDate = Format(taxDate, "yyyy-mm-dd")
    startDate = "20" & Mid(taxDate, 3, 2) - 1 & "-07-01"
    startDate = Format(startDate, "yyyy-mm-dd")
    endDate = taxDate
    
    ' Use hard coded calendarID
    LookupCalendarID = Utils.LookupCalendarID(year(endDate))
    
    reqType = "Tax Details"
    sendUrl = "<host>/system/class/<business>/" & Brand & "/" & Fund & "/components/report-data/distribution-reconciliation?periodCalendarId=" & LookupCalendarID
    resultString = getWebServiceData(sendUrl, reqType) ', logon, pw

    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getDistributionRec = transformDistributionReconciliation(resultString)
    
End Function

Private Function getInvestmentIncome(taxDate, Fund, Brand, Optional logon = "", Optional pw = "")
    ' Calls individual web services to return tax information for fund
    
    Dim sendUrl, reqType, resultString, funds, fundcode, combineResult, startDate, endDate

    taxDate = Format(taxDate, "yyyy-mm-dd")
    startDate = "20" & Mid(taxDate, 3, 2) - 1 & "-07-01"
    startDate = Format(startDate, "yyyy-mm-dd")
    endDate = taxDate

    reqType = "Tax Details"
    sendUrl = "<host>/system/class/<business>/" & Brand & "/" & Fund & "/components/report-data/investment-income-comparison?" & "start=" & startDate & "&end=" & endDate
    resultString = getWebServiceData(sendUrl, reqType) ', logon, pw

    ' skip funny chars
    If Left(resultString, 1) <> "<" Then
        resultString = Mid(resultString, 4)
    End If
    
    ' Transform the XML returned
    getInvestmentIncome = transformIncomeComparison(resultString)
End Function

Private Function getScopeId()
    Dim sendUrl, reqType, resultString
    
    reqType = "Scope"
    sendUrl = "<host>/system/class/<business>/<brand>/components/scope-register/scope"
    resultString = getWebServiceData(sendUrl, reqType)
    
    ' if resultString is empty then user cancelled
    If resultString = "" Then Exit Function
    
    ' Get the ID
    Dim o
    o = InStr(1, resultString, "</Id>")
    If o < 37 Then
      Call MsgBox(response.Content, vbOKOnly, "Error: Scope ID could not be retrieved")
    
    End If
    
    getScopeId = Mid(resultString, o - 36, 36)

End Function



Public Function convertToZero(controlarray, form)
    Dim ccontrol As control, i
    
    For Each ccontrol In form.Controls
        If TypeName(ccontrol) = "TextBox" Then
            For i = 0 To UBound(controlarray, 1)
                'If Not Ctl.tag = "" Then ' If omitted, all controls in form must have a TAG value
                 If ccontrol.Name = controlarray(i) Then
                        If ccontrol.Value = "" Or Not IsNumeric(ccontrol.Value) Then
                            ccontrol.Value = 0
                        End If
                    Else
                 End If
                'End If
            Next i
        End If
    Next ccontrol

End Function
Public Function getOAuthToken() As String

    Dim OauthObj As New OAuth2
    Dim OauthScope As String
    Dim OauthBusiness As String
    
    OauthObj.InitClientCredentials "ec48ee6d-8deb-4c57-8dcf-df67eb652e94", "01d1df14-5a4e-4a51-a9c0-d1ddc5fb63c9"
    OauthBusiness = defaultBusiness()
    If OauthBusiness = "" Then
      Err.Raise 1, _
         description:="Please Fill in the required Business Code in the Excel"
    End If
    If (PromptForLogin) Then
       OauthScope = "target:b/" & OauthBusiness & " fund.maintain&prompt=login"
    Else
       OauthScope = "target:b/" & OauthBusiness & " fund.maintain"
    End If
    OauthObj.InitEndPoints OAuthHost & "/connect/authorize", OauthScope, OAuthHost & "/connect/token", encodeURL(OAuthHost & "/my/login/excel/close"), PromptForLogin
    getOAuthToken = OauthObj.AuthHeader
    PromptForLogin = False
End Function
    
Public Function OAuthHost() As String

Dim OauthlocalUrl As String
Dim OauthTestUrl As String
Dim OauthProdUrl As String
Dim OauthPreProdUrl As String
Dim OauthPieUrl As String
Dim CurrentHost As String

OauthlocalUrl = "http://app.localhost"
OauthTestUrl = "https://app.class-test.com.au"
OauthPreProdUrl = "https://app.class-preprod.com.au"
OauthPieUrl = "https://app.class-pie.com.au"
OauthProdUrl = "https://app.class.com.au"
CurrentHost = LCase(defaultHost())

If (InStr(1, CurrentHost, "test") > 1) Then
   OAuthHost = OauthTestUrl
ElseIf (InStr(1, CurrentHost, "preprod") > 1) Then
    OAuthHost = OauthPreProdUrl
ElseIf (InStr(1, CurrentHost, "pie") > 1) Then
    OAuthHost = OauthPieUrl
ElseIf (InStr(1, CurrentHost, "local") > 1) Then
    OAuthHost = OauthlocalUrl
Else 'prod
    OAuthHost = OauthProdUrl
End If
End Function

Public Function encodeURL(str As String)
    Dim ScriptEngine As Object
    Dim Encoded As String

    'Set ScriptEngine = CreateObject("scriptcontrol")
    Set ScriptEngine = CreateObjectx86("MSScriptControl.ScriptControl")
    ScriptEngine.Language = "JScript"

    Encoded = ScriptEngine.Run("encodeURIComponent", str)

    encodeURL = Encoded
End Function

Private Function getWebServiceData(sendUrl, reqType, Optional logon = "", Optional pw = "")

    Dim Host, Brand, Fund, tempUrl, resultString, OauthHeader
    Dim successful, attempts
    
    Brand = Range("Brand").Text
        
    successful = False
    attempts = 0
    OauthHeader = getOAuthToken
    
    'Do While Not successful

    tempUrl = Replace(sendUrl, "<HOST>", defaultHost())
    tempUrl = Replace(tempUrl, "<BUSINESS>", defaultBusiness())
    tempUrl = Replace(tempUrl, "<BRAND>", Brand)
        

   
    Dim client As New WebClient
    client.BaseUrl = tempUrl
    client.TimeoutMs = 180000
    client.EnableAutoProxy = True

    Dim request As WebRequest
    Set request = New WebRequest
    request.Method = WebMethod.HttpGet
    
    request.ContentType = "text/xml"
    request.AddHeader "Authorization", OauthHeader
    request.RequestFormat = WebFormat.XML
    request.ResponseFormat = WebFormat.XML
            
    ' If no connect, too bad
    Application.StatusBar = "Sending SOAP to Server: this may take a few moments..."
            
    ' If no connect, too bad
     On Error Resume Next
       Application.StatusBar = "Sending " & reqType & " Request to Server: this may take a few minutes..."
                    
     Set response = client.Execute(request)
   
         
            
            ' log response for debugging
        Open (ThisWorkbook.Path & "\" & "_Response.html") For Output As 100
        Print #100, response.Content 'ORG req.ResponseText
        Close 100
        
        If Err.number <> 0 Then
            Call MsgBox("Your data could not be submitted." & vbCrLf _
                & vbCrLf _
                & "You may retry but if problems persist please save this file and" & vbCrLf _
                & "retry when a connection is available" _
                , vbOKOnly, "ERROR: Could not connect to the Class Super Server")
        ElseIf response.StatusCode = 200 Then
        If InStr(response.Content, "SOME_ERROR_CODE") > 0 Then
                    Call MsgBox("Your data could not be submitted." & vbCrLf _
                    & vbCrLf _
                    & "The Fund Code ( " & Fund & " ) is already in use." & vbCrLf _
                    & vbCrLf & "Change the Fund Code and resubmit." _
                    , vbOKOnly, "ERROR: Duplicate Fund Code")
            Else
                successful = True
            End If
       
       ElseIf response.StatusCode = 400 Then
            Call MsgBox("Your data could not be submitted." & vbCrLf _
                & vbCrLf _
                & "This may because the host server ( " & defaultHost() & " )" & vbCrLf _
                & "is incorrect or parameter is incorrect." & vbCrLf _
                & vbCrLf & "Save your file and retry when the host server has been corrected." _
                , vbOKOnly, "ERROR: Invalid Host")
       
       ElseIf response.StatusCode = 401 Then
            Call MsgBox("Your data could not be submitted." & vbCrLf _
                & vbCrLf _
                & "This may because your user id or password are incorrect." & vbCrLf _
                & vbCrLf & "Check your credentials and retry." _
                , vbOKOnly, "ERROR: Invalid User or Password")
    
        ElseIf response.StatusCode = 404 Then
            Call MsgBox("Your data could not be submitted." & vbCrLf _
                & vbCrLf _
                & "This may because the business code ( " & defaultBusiness() & " )" & vbCrLf _
                & "or brand code ( " & Brand & " )" & vbCrLf _
                & "is incorrect." & vbCrLf _
                & vbCrLf & "Save your file and retry when the codes have been corrected." _
                , vbOKOnly, "ERROR: Invalid Codes")
    
        ElseIf response.StatusCode = 500 Then
          
               If InStr(response.Content, "SoapException: Principal") > 0 Then
                    Call MsgBox("Your data could not be submitted." & vbCrLf _
                    & vbCrLf _
                    & "This may because the username and password are incorrect." & vbCrLf _
                    & "You may retry but if problems persist please save this file and" & vbCrLf _
                    & vbCrLf & "retry when the credentials are confirmed." _
                    , vbOKOnly, "ERROR: Invalid User Name or Password")
                Else
             
                    Call MsgBox(response.Content, vbOKOnly, "Response (" & response.StatusCode & " " & response.StatusDescription & ")")
                End If
        Else
          
           Call MsgBox(response.Content, vbOKOnly, "Response (" & response.StatusCode & " " & response.StatusDescription & ")")
        End If
       'End If
    'Loop
     
    getWebServiceData = response.Content
End Function


Public Function buildCsv(aRange)
'
'   Build a CSV file by reading a range of schema info and values
'
    ' currently assumes that a title and a checksum row are required - these should be set by options!
    
    Dim csvString, csvRow, currentRow, rowOffset
    
    ' header
    csvRow = Trim(aRange.Cells(1, tagCol).Text)
    For currentRow = 2 To aRange.Rows.Count
        csvRow = csvRow & "," & Trim(aRange.Cells(currentRow, tagCol).Text)
    Next currentRow
    csvString = csvString & csvRow & vbCrLf
    
    ' body
    For rowOffset = 0 To 500
        Application.StatusBar = "Building CSV: record " _
            & "(" & rowOffset + 1 & ")"
        
        csvString = csvString & buildCsvRow(aRange, rowOffset)
        
    Next rowOffset
    
    ' checksum row ... but no actual summing :)
    csvRow = "999999,""CHECKSUM"""
    For currentRow = 3 To aRange.Rows.Count
        csvRow = csvRow & ","
    Next currentRow
    csvString = csvString & csvRow & vbCrLf
    
    buildCsv = csvString

End Function

Function buildCsvRow(aRange, aRowOffset)
'
'   Build up a single CSV line including vbCrLf
'
    Dim csvRow, currentRow, tag, labelStr, dataType, enumStr, occurs, Value, _
    isSuppressed, isKey, isNonBlankable, isBlank, isWrong, isInvalid, isOptional, _
    refStr, errStr
    
    isSuppressed = False
    csvRow = ""
    
    For currentRow = 1 To aRange.Rows.Count
            
        ' Grab the CSV meta data for the current row
        tag = Trim(aRange.Cells(currentRow, tagCol).Text)
        labelStr = Trim(aRange.Cells(currentRow, labelCol).Text)
        dataType = Trim(aRange.Cells(currentRow, typeCol).Text)
        enumStr = Trim(aRange.Cells(currentRow, enumCol).Text)
        occurs = Trim(aRange.Cells(currentRow, occursCol).Text)
        
        Value = getValue(aRange.Cells(currentRow, valueCol), dataType, aRowOffset, 0)
        
        isKey = Trim(aRange.Cells(currentRow, keyCol).Text) <> ""
    
        ' Deal with blank fields
        isNonBlankable = (InStr(1, "date|datetime|boolean|decimal|", dataType, 1) > 0)
        isBlank = (Value = "" Or Value = 0)
        If isBlank Then
            ' If dataType = "decimal" Then
                ' value = "0"
                ' isBlank = False
            ' Else
                Value = ""
            ' End If
        End If
        
        ' Check enumerated and boolean values
        If dataType = "boolean" Then Value = LCase(Value)
        If dataType = "date" Then Value = Format(Value, "dd/mm/yyyy")
        If dataType = "datetime" Then Value = Format(Value, "dd/mm/yyyy hh:mm:ss")
        If dataType = "string" Then Value = """" & Value & """"
    
        isInvalid = (enumStr <> "" And InStr(1, enumStr, "|" & Value & "|", 1) = 0) _
            Or (dataType = "boolean" And Value <> "true" And Value <> "false") _
            Or ((dataType = "date" Or dataType = "datetime") And Not IsDate(Value))
                
        ' Check applicability of this element
        isWrong = isInvalid Or (isNonBlankable And isBlank)
        isOptional = (InStr(1, occurs, "0..") > 0)
        isSuppressed = isBlank And isKey
            
        ' Check if this element's parent group should be suppressed
        If isSuppressed Then
            ' we need to skip this row...
            Exit For
        ElseIf isBlank Then
            ' Deal with blank elements
            If isWrong Then
                                    
                ' log/add diagnostic comment for the error
                refStr = Mid(aRange.Cells(currentRow, valueCol).Formula, 2)
                If aRowOffset > 0 Then
                    refStr = refStr & "+" & aRowOffset
                End If
                
                errStr = labelStr & " -- shouldn't be blank" & " (" _
                & refStr & ")"
                errorCount = errorCount + 1
                errorRange.Cells(errorCount, 1).Value = errStr
            End If
        
        ElseIf isInvalid Then
            ' log/add diagnostic comment for the error
            refStr = Mid(aRange.Cells(currentRow, valueCol).Formula, 2)
            If aRowOffset > 0 Then
                refStr = refStr & "+" & aRowOffset
            End If
            
            errStr = labelStr & " -- invalid value """ & Value & """" & " (" _
                & refStr & ")"
            errorCount = errorCount + 1
            errorRange.Cells(errorCount, 1).Value = errStr
            Value = ""
        End If
        
        If csvRow = "" Then
            csvRow = Value
        Else
            csvRow = csvRow & "," & Value
        End If
    Next currentRow
    
    ' supress the row due to errors etc.
    If isSuppressed Then csvRow = ""
    
    ' only add line separator for actual lines
    If csvRow <> "" Then csvRow = csvRow & vbCrLf
    
    buildCsvRow = csvRow
    
End Function


Public Function buildXml(aRange, Optional aRow = 1, Optional aDepth = 0, _
    Optional rowOffset = 0, Optional colOffset = 0, Optional repeatStr = "")

'
'   Build an XML string by reading a range of schema info and values
'
'   Recursively invoke this method for each nested structure
'
    Dim depth, indentStr, currentRow, inGroup, suppressGroup, errGroupStart, xmlString, _
        tag, labelStr, dataType, enumStr, occurs, Value, isKey, endTag, isComment, _
        isEndGroup, isGroup, isElement, isNonBlankable, isBlank, isInvalid, isOptional, _
        isSuppressed, isWrong, refStr, errStr, repeats, whereStr, splitPos, hasWhere, _
        outerAddress, outerValue, innerAddress, inc, c, included, r, errRow
        
    ' Keep track of nesting depth for indenting, suppressing nodes etc.
    depth = aDepth
    indentStr = String(depth, indentStep)
    
    ' We Track where we're up to
    currentRow = aRow
    
    inGroup = True
    suppressGroup = False
    errGroupStart = errorCount
    
    ' xmlString is build by tail recursion so that node groups can be discarded based
    ' on the failure of nested items
    xmlString = ""
    
    ' Repeated nodes require us to go over the same mapping multiple times for each
    ' repeated row or column.  The number, the direction (row or column), step size
    ' (number or rows columns to skip for each repetition) and an option
    ' "where" filter for the repeated element are defined in a string of the form:
    '   repeat(500).row(1).where('Holding Balances'!B5=Acquisitions!C5)
    ' 0-based offsets are used to keep track of which row or column the repeated
    ' values are in.
    repeatStr = Trim(aRange.Cells(currentRow, labelCol).Text)
    If repeatStr <> "" Then
        Application.StatusBar = "Building XML: " & Trim(aRange.Cells(currentRow, tagCol).Text) _
            & "(" & rowOffset + 1 & ", " & colOffset + 1 & ")"
    End If
    
    ' Loop through rows until we reach the either the end of the XSD or
    ' the end of the current group (thanks to recursion we could be in a lower level node)
    While currentRow <= aRange.Rows.Count And inGroup

        ' Grab the XSD meta data for the current row
        tag = Trim(aRange.Cells(currentRow, tagCol).Text)
        labelStr = Trim(aRange.Cells(currentRow, labelCol).Text)
        dataType = Trim(aRange.Cells(currentRow, typeCol).Text)
        enumStr = Trim(aRange.Cells(currentRow, enumCol).Text)
        occurs = Trim(aRange.Cells(currentRow, occursCol).Text)
        
        Value = getValue(aRange.Cells(currentRow, valueCol), dataType, rowOffset, colOffset)
        
        isKey = Trim(aRange.Cells(currentRow, keyCol).Text) <> ""
        endTag = ""
        
        isComment = (Left(tag, 4) = "<!--")
        isEndGroup = (Left(tag, 2) = "</" Or Left(tag, 5) = "<!--/")
        isGroup = Not (isEndGroup) _
            And enumStr = "" _
            And (InStr(1, "|string|date|datetime|boolean|decimal|attribute|", "|" & dataType & "|", 1) = 0)
        isElement = Not (isGroup Or isEndGroup)
        
        If isElement Then
            ' Deal with blank fields
            isNonBlankable = (InStr(1, "date|datetime|boolean|decimal|", dataType, 1) > 0)
            isBlank = (Value = "" Or Value = 0)
            If isBlank Then
                ' If dataType = "decimal" Then
                 '    value = "0"
                  '   isBlank = False
                ' Else
                    Value = ""
                ' End If
            End If
            
            ' Check enumerated and boolean values
            If dataType = "boolean" Then Value = LCase(Value)
            If dataType = "date" Then Value = Format(Value, "yyyy-mm-dd")
            If dataType = "datetime" Then Value = Format(Value, "yyyy-mm-dd hh:mm:ss")
            ' attribute data gets substituted into the element string
            If dataType = "attribute" Then
                tag = Replace(tag, "?", Value)
                Value = ""
            End If
                
            isInvalid = (enumStr <> "" And InStr(1, enumStr, "|" & Value & "|", 1) = 0) _
                Or (dataType = "boolean" And Value <> "true" And Value <> "false") _
                Or ((dataType = "date" Or dataType = "datetime") And Not IsDate(Value))
                
            ' Check applicability of this element
            isWrong = isInvalid Or (isNonBlankable And isBlank)
            isOptional = (InStr(1, occurs, "0..") > 0)
            isSuppressed = isBlank And isKey
            
            ' Use tag name if no label mapped
            If labelStr = "" Then labelStr = Mid(tag, 2, Len(tag) - 2)
            
            ' Check if this element's parent group should be suppressed
            If isSuppressed Then
                ' Diagnostic comment explain that this triggered suppression
                tag = "<!--SUPPRESS: key field " _
                    & labelStr _
                    & " is blank; parent will be suppressed -->"
                    
                ' flag that the containing group can be discarded!
                suppressGroup = True
                
            ElseIf isBlank Or dataType = "attribute" Then
                ' Deal with blank and attribute value elements
                If isOptional Then
                    tag = ""
                    
                ElseIf isWrong Then
                                        
                    ' log/add diagnostic comment for the error
                    refStr = Mid(aRange.Cells(currentRow, valueCol).Formula, 2)
                    If rowOffset > 0 Or colOffset > 0 Then
                        refStr = refStr & "+" & rowOffset & "," & colOffset
                    End If
                    
                    errStr = labelStr & " -- shouldn't be blank" & " (" _
                    & refStr & ")"
                    errorCount = errorCount + 1
                    errorRange.Cells(errorCount, 1).Value = errStr
                    tag = "<!--ERROR: " & errStr & " -->"
                Else
                    ' Make element tag empty
                    tag = Left(tag, Len(tag) - 1) & "/>"
                End If
            
            ElseIf isInvalid Then
                ' log/add diagnostic comment for the error
                refStr = Mid(aRange.Cells(currentRow, valueCol).Formula, 2)
                If rowOffset > 0 Or colOffset > 0 Then
                    refStr = refStr & "+" & rowOffset & "," & colOffset
                End If
                
                errStr = labelStr & " -- invalid value """ & Value & """" & " (" _
                    & refStr & ")"
                errorCount = errorCount + 1
                errorRange.Cells(errorCount, 1).Value = errStr
                tag = "<!--ERROR: " & errStr & " -->"
                Value = ""
            Else
                ' Make and end tag
                endTag = "</" & Mid(tag, 2)
            End If
        
        ElseIf isEndGroup Then
            ' It wasn't an element!
            depth = depth - 1
            indentStr = String(depth, indentStep)
            
            inGroup = (depth > aDepth)
        End If
            
        ' If this is the start of a nested group then recurse
        If depth > aDepth And isGroup Then
            Dim subXmlString
            
            ' recurse and repeat as applies
            repeatStr = Trim(aRange.Cells(currentRow, labelCol).Text)
            
            ' check if we need to pickup repeated groups in offset columns and/or rows
            repeats = Val(getParam("repeat", repeatStr)) * 1
            If repeats = 0 Or suppressGroup Then
                ' just do it once!
                subXmlString = buildXml(aRange, currentRow, depth, rowOffset, colOffset)
                xmlString = xmlString & subXmlString
            Else
                ' Check for a where clause in the form: address1=address2
                whereStr = getParam("where", repeatStr)
                splitPos = InStr(1, whereStr, "=")
                hasWhere = (splitPos > 0)
                If hasWhere Then
                    ' outerAddress: uses the outer loop offset
                    outerAddress = Left(whereStr, splitPos - 1)
                    outerValue = getAddressValue(outerAddress, dataType, rowOffset, colOffset)
                    ' innerAddress: is incremented by innner loop offset
                    innerAddress = Mid(whereStr, splitPos + 1)
                End If
                
                ' look across columns
                inc = Val(getParam("column", repeatStr)) * 1
                If inc > 0 Then
                
                    ' TODO: optimise this loop and the following one by noting where the last non-blank
                    ' column/row is
                    subXmlString = ""
                    For c = 0 To (repeats * inc) Step inc
                        included = True
                        
                        ' check where condition
                        If hasWhere Then
                            included = (outerValue = getAddressValue(innerAddress, dataType, rowOffset, c))
                        End If
                        
                        If included Then
                            ' recurse but force pass by value for aRow and aDepth
                            subXmlString = subXmlString & buildXml(aRange, currentRow + 0, depth + 0, rowOffset, c)
                        End If
                    Next c
                    xmlString = xmlString & subXmlString
                
                End If
        
                ' look down rows
                inc = Val(getParam("row", repeatStr)) * 1
                If inc > 0 Then
                    For r = 0 To (repeats * inc) Step inc
                        included = True
                        
                        ' check where condition
                        If hasWhere Then
                            included = (outerValue = getAddressValue(innerAddress, dataType, r, colOffset))
                        End If
                        
                        If included Then
                            ' recurse but force pass by value for aRow and aDepth
                            subXmlString = subXmlString & buildXml(aRange, currentRow + 0, depth + 0, r, colOffset)
                        End If
                    Next r
                    xmlString = xmlString & subXmlString
                    
                End If
                
                ' do this just to skip the XSD rows now not very performant
                ' TODO: get the incremented values from the calls above, store them and then restore them here...
                ' row and column can't both be 0 or we don't get here.
                Call buildXml(aRange, currentRow, depth, rowOffset, colOffset)
            End If
            
           ' Is it a empty "key group" i.e. if this group is suppressed then suppress the outer group as well
            If isKey And subXmlString = "" Then
                ' Diagnostic comment explain that this triggered suppression
                tag = "<!--SUPPRESS: key group " _
                    & labelStr _
                    & " is empty; parent will be suppressed -->"
                    
                ' flag that the containing group can be discarded!
                suppressGroup = True
            End If
        
        Else
        
            ' Build up our XML string
            If tag <> "" And Not (isComment) Then
                ' wrap in a cdata string to hide ampersands etc.
                If Value <> "" Then Value = "<![CDATA[" & Value & "]]>"
                
                xmlString = xmlString & indentStr & tag & Value & endTag & vbCrLf
            End If
            
            ' NB: We only get here for the root of the current node
            If isGroup Then
                depth = depth + 1
                indentStr = String(depth, indentStep)
            End If
            
            currentRow = currentRow + 1
        End If
    Wend

    ' Got to the end of a group (could be the root one!) so return XML or nothing if suppressed
    If suppressGroup Then
        xmlString = ""
        For errRow = errGroupStart + 1 To errorCount
            errorRange.Cells(errRow, 1).Clear
        Next errRow
        errorCount = errGroupStart
    End If
        
    ' update what we've covered
    aRow = currentRow
    aDepth = depth
    
    buildXml = xmlString
    
End Function


Public Function LogError(errorStr)

'
'   Build up an error list
'
    errorText = errorText & errorStr & vbCrLf
End Function


Function getParam(paramName, paramStr)

'
'   Extract the string value of a 'parameter' in the source string
'   Parameters are named values in the form: name(value)
'
    Dim paramPos, startPos, endPos
    
    ' default to empty string
    getParam = ""
    
    paramPos = InStr(1, paramStr, paramName & "(", vbTextCompare)
    If (paramName <> "" And paramPos > 0) Then
        startPos = paramPos + Len(paramName) + 1
        endPos = InStr(startPos, paramStr, ")", vbTextCompare)
        If endPos > 0 Then
            getParam = Mid(paramStr, startPos, endPos - startPos)
        End If
    End If
End Function


Function getValue(aCell, dataType, Optional rowOffset = 0, Optional colOffset = 0)

'
'   Get a cells value after applying offsets if specified
'
    Dim formulaStr
    
    ' simple/default case with no offsets!
    getValue = Trim(aCell.Text)
    
    ' Value needs to be adjusted if an offset is in use
    If colOffset > 0 Or rowOffset > 0 Then
        formulaStr = aCell.Formula
        If InStr(1, formulaStr, "=", vbTextCompare) = 1 Then
            getValue = getAddressValue(Mid(formulaStr, 2), dataType, rowOffset, colOffset)
        End If
    End If
End Function


Function getAddressValue(addressStr, dataType, Optional rowOffset = 0, Optional colOffset = 0)

'
'   Formula has to be a simple address so we can convert to a range
'   $ signs indicate absolute addresses so we don't offset those
'   if there's no "!" then it's probably a constant so no offset again
'
    Dim r, c
    
    If InStr(1, addressStr, "$", vbTextCompare) = 0 Then
        ' relative
        r = rowOffset + 1
        c = colOffset + 1
    Else
        ' absolute; ignore offsets (TODO: should work out if col or row only fixed!!)
        r = 1
        c = 1
    End If
    
    Dim valueRange As Range
    Set valueRange = Range(addressStr)
    If dataType = "decimal" Then
        getAddressValue = Trim(valueRange.Cells(r, c).Value)
    Else
        getAddressValue = Trim(valueRange.Cells(r, c).Text)
    End If
    
End Function



Private Sub generateEnumValues()
'
'   This routine should be rerun if the XSD's change
'
    Dim typeColStart As Integer
    
    typeColStart = 3
    typeColStart = generateEnumValuesTab("frdXml", typeColStart)
    typeColStart = generateEnumValuesTab("obXml", typeColStart)
    
End Sub
    
Function generateEnumValuesTab(aRangeName As String, typeColStart As Integer) As Integer
'
'   This routine should be rerun if the XSD's change
'
    Dim r, c As Range
    Dim enumTab As Worksheet
    Dim typeCount, valCount, nameRow As Integer
    Dim valStr As String
    
    Set enumTab = Worksheets("Enums")
    ' start in column 3, row 1
    typeCount = typeColStart
    nameRow = 1
    
    Set r = Range(aRangeName)
    For Each c In r.Columns(4).Cells
        If c.Value <> "" And c.offset(0, -2) <> "" Then
            ' define name str
            Dim nameStr As String
            nameStr = c.offset(0, -2)
            
            ' checkif already in the list
            If findName(nameStr, enumTab, 1, 3, typeCount - 1) = 0 Then
                ' Insert the type name
                enumTab.Cells(nameRow, typeCount) = nameStr
                
                ' Insert values and define a range over the enumerate values
                valCount = 2
                valStr = ""
                Dim v As Variant
                For Each v In Split(Mid(c.Value, 2, Len(c.Value) - 2), "|")
                    enumTab.Cells(valCount, typeCount).Value = "'" & v
                    
                    If v <> "" Then
                        ' build up the string for hints
                        If valStr = "" Then
                            valStr = v
                        Else
                            valStr = valStr & ", " & v
                        End If
                    End If
                    
                    ' increase value row counter
                    valCount = valCount + 1
                Next v
                
                ' Define a string with the values in it for hints etc.
                ActiveWorkbook.Names.Add Name:=nameStr & "Hint", RefersToR1C1:="=""" & valStr & """"
                
                ' Define a range name over the type values
                ActiveWorkbook.Names.Add Name:=nameStr, RefersToR1C1:= _
                    "=Enums!R2C" & typeCount & ":R" & valCount - 1 & "C" & typeCount
                
                typeCount = typeCount + 1
            End If
        End If
    Next c
    
    generateEnumValuesTab = typeCount
End Function

Function findName(aStr As String, aTab As Worksheet, aRow, startCol, endCol As Integer) As Integer
'
'  Check if name already defined and if so return column number
'
    Dim c As Integer
    
    findName = 0
    For c = startCol To endCol
        If aTab.Cells(aRow, c).Value = aStr Then
            findName = c
            Exit Function
        End If
    Next c
    
End Function
    
Sub unprotectWorkbook()
'   ensure protection is off
    privateToggleProtection (True)
End Sub
    
Sub toggleProtection()
'
'   No paramater version so that it appears in macro list
'
    privateToggleProtection
End Sub
    
Private Sub privateToggleProtection(Optional forceUnprotect As Boolean = False)
    ' if workbook is protected turn if off otherwise turn in on
    Dim protected As Boolean
    Dim w As Worksheet
    
    protected = ActiveWorkbook.ProtectStructure
    If protected Then
        ActiveWorkbook.Unprotect
        For Each w In Worksheets
            w.Unprotect
        Next w
    ElseIf Not forceUnprotect Then
        ActiveWorkbook.Protect Structure:=True, Windows:=False
        For Each w In Worksheets
            If w.Name <> "Errors" And w.Name <> "Dividends" Then
                w.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False
            End If
            ' Exception for pivot tables
            If w.Name = "FundTax" Then
                w.Protect AllowUsingPivotTables:=True
            End If
        Next w
    End If
    
End Sub

Private Sub loadXSD()
'
'   Provide an XSD file and this function will adapt it to the format
'   we need for mapping and write it the cell starting from the current selection
'
    ' Declare a variable as a FileDialog object.
    Dim fd As FileDialog

    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    
    With fd
        .AllowMultiSelect = False
        If .Show = -1 Then
                Dim x As Integer, y As Integer, l, c, _
                  schema As String, r As Range
                schema = transform(.SelectedItems(1))
                Set r = Selection
                y = 0
                For Each l In Split(schema, "###")
                    x = 0
                    For Each c In Split(l, ",")
                        r.offset(y, x) = c
                        x = x + 1
                    Next c
                    y = y + 1
                Next l
        Else
            ' The user pressed Cancel.
        End If
    End With

    Set fd = Nothing

End Sub

Function transformFundList(xmlin)
    '
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.LoadXml (xmlin)
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "  <xsl:template match=""FundSummary""> " & _
        "    <xsl:value-of select=""./Code""/>," & _
        "</xsl:template> " & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformFundList = xslProc.Output
End Function


Function transformBrandList(xmlin)
    '
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.LoadXml (xmlin)
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "  <xsl:template match=""BrandSummary""> " & _
        "    <xsl:value-of select=""@Code""/>," & _
        "</xsl:template> " & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformBrandList = xslProc.Output
End Function

Function transformIncomeComparison(xmlin)
'
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    ' Removing new carriage returns in xml (descriptions) to ensure carriage return is end of record
    xmldoc.LoadXml (Replace(xmlin, vbCrLf, " "))
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "  <xsl:template match=""ComparisonDetail""> " & _
        "    <xsl:value-of select=""Date""/>|" & _
        "    <xsl:value-of select=""IncomeType""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/SecurityCode""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/Name""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/Code""/>|" & _
        "    <xsl:value-of select=""translate(TransactionDetail/Description, '|', '')""/>|" & _
        "    <xsl:value-of select=""TransactionDetail/IncomeDetail/TotalIncome""/>|" & _
        "    <xsl:value-of select=""TransactionDetail/IncomeDetail/FrankingCredit""/>|" & _
        "    <xsl:value-of select=""AnnouncementDetail/Description""/>|" & _
        "    <xsl:value-of select=""AnnouncementDetail/EstimatedIncome/TotalIncome""/>|" & vbCrLf & _
        "</xsl:template> " & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformIncomeComparison = xslProc.Output
End Function

Function transformDistributionReconciliation(xmlin)
'
'   Apply an XSLT to the specified file and return the resultant text as CSV
'

    Dim distRec
    distRec = "  <xsl:template match=""DistHoldingSummary""> " & _
        "    <xsl:value-of select=""./HoldingAccountCode""/>|" & _
        "    <xsl:value-of select=""./GrossTrustAccounting""/>|" & vbCrLf & _
        "  </xsl:template> "
        
' Additional mapping
'        "    <xsl:value-of select=""./NonPrimaryProductionIncome""/>|" & _
'        "    <xsl:value-of select=""./FrankingCredits""/>|" & _
'        "    <xsl:value-of select=""./WithholdingTax""/>|" & _
'        "    <xsl:value-of select=""./TaxExempt""/>|" & _
'        "    <xsl:value-of select=""./TaxFree""/>|" & _
'        "    <xsl:value-of select=""./TaxDeferred""/>|" & _
'        "    <xsl:value-of select=""./CapitalReturns""/>|" & _
'        "    <xsl:value-of select=""./AssessableAmounts""/>|" & _
'        "    <xsl:value-of select=""./ForeignTaxCredits""/>|" & _
'        "    <xsl:value-of select=""./DiscountedCapGains""/>|" & _
'        "    <xsl:value-of select=""./CGTConcessionAmount""/>|" & _
'        "    <xsl:value-of select=""./IndexedCapGains""/>|" & _
'        "    <xsl:value-of select=""./OtherCapGains""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustAccounting""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustTax""/>|" & _

    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    ' Removing new carriage returns in xml (descriptions) to ensure carriage return is end of record
    xmldoc.LoadXml (Replace(xmlin, vbCrLf, " "))
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        distRec & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformDistributionReconciliation = xslProc.Output
End Function


Function transformHoldings(xmlin)
'
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.LoadXml (xmlin)
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "  <xsl:template match=""HoldingQuantitiesSummary""> " & _
        "    <xsl:value-of select=""./Brand""/>," & _
        "    <xsl:value-of select=""./Fund""/>," & _
        "    <xsl:value-of select=""./HoldingCode""/>," & _
        "    <xsl:value-of select=""./ExternalIdentifierType""/>," & _
        "    <xsl:value-of select=""./ExternalIdentifier""/>," & _
        "    <xsl:value-of select=""./Quantity""/>," & vbCrLf & _
        "</xsl:template> " & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformHoldings = xslProc.Output

End Function

Function transformTaxReconsilliation(xmlin)
'
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim DistHoldingSummaryXSLT, ReconciliationXSLT, InvestmentGroupXSLT, InvestmentIncomeComparisonReportXSLT
    
    ' Format strings to be readable XSLT blocks and pull out security issue code
    ' Give the distribution tax statement total per investment holding
'    DistHoldingSummaryXSLT = "  <xsl:template match=""DistHoldingSummary""> " & _
'        "    <xsl:value-of select=""./HoldingAccountCode""/>|" & _
'        "    <xsl:value-of select=""./NetTrustDistribution""/>|" & _
'        "    <xsl:value-of select=""./NonPrimaryProductionIncome""/>|" & _
'        "    <xsl:value-of select=""./FrankingCredits""/>|" & _
'        "    <xsl:value-of select=""./WithholdingTax""/>|" & _
'        "    <xsl:value-of select=""./TaxExempt""/>|" & _
'        "    <xsl:value-of select=""./TaxFree""/>|" & _
'        "    <xsl:value-of select=""./TaxDeferred""/>|" & _
'        "    <xsl:value-of select=""./CapitalReturns""/>|" & _
'        "    <xsl:value-of select=""./AssessableAmounts""/>|" & _
'        "    <xsl:value-of select=""./ForeignTaxCredits""/>|" & _
'        "    <xsl:value-of select=""./DiscountedCapGains""/>|" & _
'        "    <xsl:value-of select=""./CGTConcessionAmount""/>|" & _
'        "    <xsl:value-of select=""./IndexedCapGains""/>|" & _
'        "    <xsl:value-of select=""./OtherCapGains""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustAccounting""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustTax""/>|" & _
'        "  </xsl:template> "
       
'    ' Total tax statement total for all securities
'    ReconciliationXSLT = "  <xsl:template match=""Reconciliation""> " & _
'        "    <xsl:value-of select=""./GrossTrustNonPrimaryProduction""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustFrankingCredits""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustWithholdingTax""/>|" & _
'        "    <xsl:value-of select=""./GrossTrustTotal""/>|" & _
'        "    <xsl:value-of select=""./ForeignAssessable""/>|" & _
'        "    <xsl:value-of select=""./ForeignTaxCredits""/>|" & _
'        "    <xsl:value-of select=""./ForeignTotal""/>|" & _
'        "    <xsl:value-of select=""./CapGainsDiscountable""/>|" & _
'        "    <xsl:value-of select=""./CapGainsIndexed""/>|" & _
'        "    <xsl:value-of select=""./CapGainsOther""/>|" & _
'        "    <xsl:value-of select=""./CapGainsTotal""/>|" & _
'        "</xsl:template> "
    
    ' Get each distribution income annoucement and distribution details with additional Tax Statement Total for Security
    InvestmentIncomeComparisonReportXSLT = "  <xsl:template match=""ComparisonDetail""> " & _
        "    <xsl:value-of select=""Date""/>|" & _
        "    <xsl:value-of select=""IncomeType""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/SecurityCode""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/Name""/>|" & _
        "    <xsl:value-of select=""HoldingDetail/Code""/>|" & _
        "    <xsl:variable name=""ClassHolding"" select=""HoldingDetail/Code"" />" & _
        "    <xsl:value-of select=""TransactionDetail/Description""/>|" & _
        "    <xsl:value-of select=""TransactionDetail/IncomeDetail/TotalIncome""/>|" & _
        "    <xsl:value-of select=""TransactionDetail/IncomeDetail/FrankingCredit""/>|" & _
        "    <xsl:value-of select=""AnnouncementDetail/Description""/>|" & _
        "    <xsl:value-of select=""AnnouncementDetail/EstimatedIncome/TotalIncome""/>|" & _
        "    <xsl:value-of select=""../../DistributionReconciliationReport/Summaries/DistHoldingSummary[HoldingAccountCode=$ClassHolding]/NetTrustDistribution""/>|" & vbCrLf & _
        "</xsl:template>"
        

    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.LoadXml (Replace(xmlin, vbCrLf, " "))

    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "" & InvestmentIncomeComparisonReportXSLT & "" & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformTaxReconsilliation = xslProc.Output
End Function

Function transformDividends(xmlin)
'
'   Apply an XSLT to the specified file and return the resultant text as CSV
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.LoadXml (xmlin)
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.LoadXml ( _
        "<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">" & _
        "  <xsl:output method=""text""/> " & _
        "  <xsl:template match=""node()|@*""> " & _
        "    <xsl:apply-templates select=""@*""/> " & _
        "    <xsl:apply-templates/>" & _
        "  </xsl:template> " & _
        "  <xsl:template match=""IncomeAnnouncement2""> " & _
        "    <xsl:value-of select=""substring(./ExDate,1,10)""/>," & _
        "    <xsl:value-of select=""./AUDPrice""/>," & _
        "    <xsl:value-of select=""./FrankedPercentage""/>," & _
        "    <xsl:value-of select=""substring(./ExDate,1,10)""/>," & _
        "    <xsl:value-of select=""substring(./PaymentDate,1,10)""/>," & _
        "    <xsl:value-of select=""./Type""/>," & _
        "    <xsl:value-of select=""./Description""/>," & _
        "    <xsl:value-of select=""./@*""/>," & vbCrLf & _
        "</xsl:template> " & _
        "</xsl:stylesheet> ")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transformDividends = xslProc.Output

End Function

Function transform(aFilename) As String
'
'   Apply an XSLT to the specified XSD and return the resultant text
'
    Dim xmldoc As DOMDocument60
    Set xmldoc = New DOMDocument60
    xmldoc.Async = False
    xmldoc.Load (aFilename)
    
    Dim XSLDoc As New FreeThreadedDOMDocument60
    XSLDoc.Async = False
    XSLDoc.Load ("C:\Projects\XSLT\Source\xsd2csv.xslt")
    
    Dim XSLT As New XSLTemplate60
    Set XSLT.stylesheet = XSLDoc
    
    Dim xslProc As IXSLProcessor
    Set xslProc = XSLT.createProcessor()
    xslProc.Input = xmldoc
    xslProc.transform
    
    transform = xslProc.Output

End Function

Private Sub getFormatIds()
'
'   Talk to the server to collect the ID's need to specify the file format etc.
'
    Dim formatId, sourceId, catId
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "1804f67a-78f9-4ca1-8f27-9c8e19f89cdf"
    sourceId = "8182e8fb-9b4a-4c4d-9cd9-801bb09571ec"
    catId = "9e962a0f-1162-4595-afd6-4e5e0cf59e72"

' POST /ClientServices/ClassificationItemTransferWebService.asmx

' SOAPAction: "http://SuperIP/webservices/GetAllClassificationItems"

' <?xml version="1.0" encoding="utf-8"?> _
  <soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" _
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" _
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"> _
    <soap:Body> _
        <GetAllClassificationItems xmlns="http://SuperIP/webservices/" /> _
    </soap:Body> _
  </soap:Envelope>
  
End Sub

Sub sendGenericCashSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "13e83765-dbaa-45ab-85ac-e884016aac23"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!cashFile").Value
         
    Call sendLoadSOAP("Cash XML", "XML", "StagedGenericCash", filename)
    
End Sub
Sub sendGenericCashSOAP1()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "13e83765-dbaa-45ab-85ac-e884016aac23"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!customfile").Value
         
    Call sendLoadSOAP("Custom XML", "XML", "StagedGenericCash", filename)
    
End Sub
Sub sendGenericExpenseSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "13e83765-dbaa-45ab-85ac-e884016aac23"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!expenseFile").Value
         
    Call sendLoadSOAP("Expense XML", "XML", "StagedGenericCash", filename)
    
End Sub

Sub sendGenericPortfolioSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "4518a216-aa5b-4c17-9131-8730b6dc5ef9"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!portfolioFile").Value

         
    Call sendLoadSOAP("Portfolio XML", "XML", "StagedGenericStockMovement", filename)
    
End Sub
Sub sendGenericIncomeSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "a2f0b83b-be2d-4b68-aaf3-d270fcd59511"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!incomeFile").Value

         
    Call sendLoadSOAP("Income XML", "XML", "StagedGenericIncome", filename)
    
End Sub
Sub sendGenericCorpActionSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "6D63238E-A11A-42cb-AFCF-9B21CCC97F9A"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!corpactionFile").Value

         
    Call sendLoadSOAP("CorpAction XML", "XML", "StagedGenericCorporateAction", filename)
    
End Sub

Sub sendGenericTermDepositSOAP()
'
'   Sends specified XML (XML) to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
    Dim formatId, sourceId, catId, filename
    
    ' Magic ID - need to get these from somewhere else!!
    formatId = "6D63238E-A11A-42cb-AFCF-9B21CCC97F9A"
    sourceId = "3b2d449c-9109-4bf3-a125-b8d73bc146fd"
    catId = "0136D535-77AF-434c-8FAC-F8D4FCE3AF1A"
    filename = Range("'Overview'!termdepositfile").Value

         
    Call sendLoadSOAP("TermDeposit XML", "XML", "StagedGenericTermDeposit", filename)
    
End Sub

Sub sendLoadSOAP(aSchemaName, aType, interfaceCode, filename)
'
'   Sends specified XML/CSV data to the specified URL (URL) using the specified method (Method)
'   If the ranges are not found it displays an error
'
'   Note: this code assumes that this spreadsheet has properties defining the server, business
'   and optional brand to be used
'
    Dim tempUrl, xmlString, dataString, sheet, overview, _
        methodString, source, actionString, _
        dataFile, responseFile, scopeId, Brand
    
    Dim OauthHeader
    'ScreenUpdating = False
    Application.ScreenUpdating = False
    
    Set sheet = Worksheets(aSchemaName)
    Set overview = Worksheets("Overview")
    Set errorRange = Worksheets("Errors").Range("ErrorList")
    
    Brand = Range("Brand").Text
    If IsMissing(Brand) Then
        tempUrl = defaultHost() & "/system/class/" & defaultBusiness() & "/components/staging/excel/LoadFileRequest"
    Else
        tempUrl = defaultHost() & "/system/class/" & defaultBusiness() & "/" & Brand & "/components/staging/excel/LoadFileRequest"
    End If
    actionString = "http://SuperIP/webservices/LoadFileRequest"
    
    ' retrieve the scopeId NB: this trigger logon detail collection as well
    scopeId = getScopeId()
    
    ' if scopeId is empty then we can't proceed (e.g. if user cancelled logon)
    If scopeId = "" Then Exit Sub
    
    OauthHeader = getOAuthToken
    Dim client As New WebClient
    client.BaseUrl = tempUrl
    client.TimeoutMs = 180000
    client.EnableAutoProxy = True
    Dim request As New WebRequest
    request.Method = WebMethod.HttpPost
    request.ContentType = "application/xml; charset=utf-8"

  
    ' If no connect, too bad
    Application.StatusBar = "Sending SOAP to Server: this may take a few moments..."
    
    If aType = "CSV" Then
        dataString = buildCsv(sheet.Range(aType))
        
    Else
        dataString = buildXml(sheet.Range(aType))
        
    End If
    
    ' log data file for debugging
    dataFile = ThisWorkbook.Path & "\" & "_" & aSchemaName & " Data." & aType
    Open (dataFile) For Output As 100
    Print #100, dataString
    Close 100
 
    xmlString = buildLoadXmlString(dataString, interfaceCode, scopeId, filename)
    request.Body = xmlString
    request.ContentType = "text/xml"
    request.AddHeader "Authorization", OauthHeader
    request.RequestFormat = WebFormat.XML
    request.ResponseFormat = WebFormat.XML
    Dim response As WebResponse
    Set response = client.Execute(request)
 
    
    Application.StatusBar = ""
    
    ' log response for debugging
    responseFile = ThisWorkbook.Path & "\" & "_" & aSchemaName & " Response.xml"
    Open (responseFile) For Output As 100
    Print #100, response.Content
    Close 100
    
   
    If InStr(response.Content, "STAGED_DATA_REQUEST_FILE_ALREADY_LOADED") Then
         Call MsgBox("Error: That data (" & filename & ") was previously submitted to the server!")
    Else
        Call MsgBox("Your file has been submitted to the server (" & response.StatusDescription & ")", vbOKOnly, "Response (" & response.StatusCode & ")")
    End If
End Sub

Function buildLoadXmlFile(dataFile, interfaceCode, scopeId, filename)
' build a load request for the specified data file

    Dim encodedString
    encodedString = encodeFile(dataFile)
    buildLoadXmlFile = buildLoadXml(encodedString, interfaceCode, scopeId, filename)
    
End Function

Function buildLoadXmlString(dataString, interfaceCode, scopeId, filename)
'
' build a load request for the specified data string
'
    Dim encodedString
    
    encodedString = Base64Encode(ConvertStringToBytes(dataString))
    buildLoadXmlString = buildLoadXml(encodedString, interfaceCode, scopeId, filename)
End Function

Function buildLoadXml(encodedString, interfaceCode, scopeId, filename)
'
' build a load request for the specified encoded data string
'
    Dim requestDate
    requestDate = Format(Now(), "yyyy-mm-ddThh:mm:ss+10:00") ' "2009-04-17T08:19:19.0000000+10:00"
    
  buildLoadXml = "<?xml version=""1.0"" encoding=""utf-8""?>" & vbCrLf & _
"        <LoadFileRequest>" & vbCrLf & _
"            <request>" & vbCrLf & _
"                <EffectiveStatusCode>Active</EffectiveStatusCode>" & vbCrLf & _
"                <ScopeId>" & scopeId & "</ScopeId>" & vbCrLf & _
"                <RequestURL>" & filename & "</RequestURL>" & vbCrLf & _
"                <InterfaceCode>" & interfaceCode & "</InterfaceCode>" & vbCrLf & _
"                <AdditionalInfo />" & vbCrLf & _
"                <RequestDate>" & requestDate & "</RequestDate>" & vbCrLf & _
"                <RequestStatus>Initial</RequestStatus>" & vbCrLf & _
"            </request>" & vbCrLf & _
"            <fileToLoad>" _
            & encodedString & _
            "</fileToLoad>" & vbCrLf & _
"            <allowDuplicateLoads>true</allowDuplicateLoads>" & vbCrLf & _
"        </LoadFileRequest>"

End Function

Function encodeFile(dataFile)
'
' base 64 encode the specified file
'
    Dim dataString
    ' Read data from file
    On Error Resume Next
    Open (dataFile) For Input As #100
    dataString = Input$(LOF(100), 100)
    Close 100
    On Error GoTo 0
    
    If (dataString = "") Then
        MsgBox ("The file specified is missing, locked or empty.  Please check the filename.")
        End
    End If
    
    encodeFile = Base64Encode(ConvertStringToBytes(dataString))
End Function

' TODO: we only need one method for base 64 encoding!
Function EncodeBase64(Text As String) As String
    Dim arrData() As Byte
    arrData = StrConv(Text, vbFromUnicode)
    Dim objXML
    Dim objNode
    Set objXML = New MSXML2.DOMDocument60
    Set objNode = objXML.createElement("b64")
    objNode.dataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    EncodeBase64 = objNode.Text
    Set objNode = Nothing
    Set objXML = Nothing
End Function

' Encodes a byte array into Base64 format.
' No blanks or line breaks are inserted.
' Parameters:
'   InData    an array containing the data bytes to be encoded.
' Returns:    a string with the Base64 encoded data.
Public Function Base64Encode(InData() As Byte)
   Base64Encode = Base64Encode2(InData, UBound(InData) - LBound(InData) + 1)
   End Function

' Encodes a byte array into Base64 format.
' No blanks or line breaks are inserted.
' Parameters:
'   InData    an array containing the data bytes to be encoded.
'   InLen     number of bytes to process in InData.
' Returns:    a string with the Base64 encoded data.
Public Function Base64Encode2(InData() As Byte, ByVal InLen As Long) As String
   If Not InitDone Then Init
   If InLen = 0 Then Base64Encode2 = "": Exit Function
   Dim ODataLen As Long: ODataLen = (InLen * 4 + 2) \ 3     ' output length without padding
   Dim OLen As Long: OLen = ((InLen + 2) \ 3) * 4           ' output length including padding
   Dim Out() As Byte
   ReDim Out(0 To OLen - 1) As Byte
   Dim ip0 As Long: ip0 = LBound(InData)
   Dim ip As Long
   Dim op As Long
   Do While ip < InLen
      Dim i0 As Byte: i0 = InData(ip0 + ip): ip = ip + 1
      Dim i1 As Byte: If ip < InLen Then i1 = InData(ip0 + ip): ip = ip + 1 Else i1 = 0
      Dim i2 As Byte: If ip < InLen Then i2 = InData(ip0 + ip): ip = ip + 1 Else i2 = 0
      Dim o0 As Byte: o0 = i0 \ 4
      Dim o1 As Byte: o1 = ((i0 And 3) * &H10) Or (i1 \ &H10)
      Dim o2 As Byte: o2 = ((i1 And &HF) * 4) Or (i2 \ &H40)
      Dim o3 As Byte: o3 = i2 And &H3F
      Out(op) = Map1(o0): op = op + 1
      Out(op) = Map1(o1): op = op + 1
      Out(op) = IIf(op < ODataLen, Map1(o2), Asc("=")): op = op + 1
      Out(op) = IIf(op < ODataLen, Map1(o3), Asc("=")): op = op + 1
      Loop
   Base64Encode2 = ConvertBytesToString(Out)
   End Function

Private Sub Init()
   Dim c As Integer, i As Integer
   ' set Map1
   i = 0
   For c = Asc("A") To Asc("Z"): Map1(i) = c: i = i + 1: Next
   For c = Asc("a") To Asc("z"): Map1(i) = c: i = i + 1: Next
   For c = Asc("0") To Asc("9"): Map1(i) = c: i = i + 1: Next
   Map1(i) = Asc("+"): i = i + 1
   Map1(i) = Asc("/"): i = i + 1
   ' set Map2
   For i = 0 To 127: Map2(i) = 255: Next
   For i = 0 To 63: Map2(Map1(i)) = i: Next
   InitDone = True
   End Sub

Private Function ConvertStringToBytes(ByVal s As String) As Byte()
   Dim b1() As Byte: b1 = s
   Dim l As Long: l = (UBound(b1) + 1) \ 2
   If l = 0 Then ConvertStringToBytes = b1: Exit Function
   Dim b2() As Byte
   ReDim b2(0 To l - 1) As Byte
   Dim p As Long
   For p = 0 To l - 1
      Dim c As Long: c = b1(2 * p) + 256 * CLng(b1(2 * p + 1))
      If c >= 256 Then c = Asc("?")
      b2(p) = c
      Next
   ConvertStringToBytes = b2
   End Function

Private Function ConvertBytesToString(b() As Byte) As String
   Dim l As Long: l = UBound(b) - LBound(b) + 1
   Dim b2() As Byte
   ReDim b2(0 To (2 * l) - 1) As Byte
   Dim p0 As Long: p0 = LBound(b)
   Dim p As Long
   For p = 0 To l - 1: b2(2 * p) = b(p0 + p): Next
   Dim s As String: s = b2
   ConvertBytesToString = s
End Function

Function findInsertPoint(address)
'
'   Find the first blank row after all data and 'skipped' rows
'
    findInsertPoint = Range(address).End(xlUp).row + 1

End Function

Sub getParticipatingQuantity(securityIssueCode, quantityDate)

     holdinglist = Split(getHoldingsList(securityIssueCode, quantityDate), vbCrLf)
     
     ' For item in list find date
     i = 0
     While i > holdinglist.Index - 1
        If holdinglist.Date = quantityDate Then
            getParticipatingQuantity = holdinglist.quantity
        End If
        i = i + 1
     Loop
    
End Sub

Sub generateDividends()
   Dim code, sheet, msg, msgtitle
   
   msg = ""
   msgtitle = ""
   
 
   ' Allow user to pick or enter a Dividend
    Dividend.Show
    If Dividend.cancelled Or Dividend.SecurityCode = "" Then
        Exit Sub
    End If
    code = Dividend.SecurityCode
    Set sheet = Worksheets("Dividends")
   
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Retrieving data, please wait..."
    Application.ScreenUpdating = False
    On Error Resume Next
    
    If code <> "" Then
        Dim EntitlementDate, exdate, perShare, frankedPerc, PaymentDate, EventType
        
        EventType = Dividend.EventType.Value
        exdate = DateValue(Dividend.ExDividendDate.Value)
        
        ' hard-code guess that this is a managed fund code
        If Len(code) = 9 Then
            EntitlementDate = exdate
        Else
            EntitlementDate = exdate - 1
        End If
        
        PaymentDate = DateValue(Dividend.PaymentDate.Value)
        perShare = Dividend.Amount.Value
        frankedPerc = Dividend.FrankedPercent.Value
        If frankedPerc <> 0 Then frankedPerc = frankedPerc / 100
        
        Dim holdings, holding, base, i, j, balanceissues
        ' Check if we have any holdings
        holdings = Split(getHoldingsList(code, EntitlementDate), vbCrLf)
        balanceissues = 0
            
        ' Populate the spreadsheet
        Dim baseRow, holdingcount, rowCount, Amount, franked
        baseRow = 4
        holdingcount = UBound(holdings)
        
        ' No holdings found
        If holdingcount = -1 Then
            msg = "No Holdings found for Security " & code & " at the entitlement date (" & Format(EntitlementDate, "dd mmm yyyy") & ")"
            msgtitle = "No Holdings"
            GoTo cleanup
        End If
        
        ' check that row is blank and advance up to row 500 if required
        baseRow = findInsertPoint("Income!d" & 500)
        Set base = Range("Income!b" & baseRow)
        
        ' too many rows
        If (baseRow + rowCount - 4) > 500 Then
            msg = "Error: Can't generate rows due to 500 row upload limit.  Try Loading the data in smaller groups"
            msgtitle = "Data Row Limit Exceeded"
            GoTo cleanup
        End If
    
        i = 0
        For j = 0 To holdingcount - 1
            
            holding = Split(holdings(j), ",")
            
            ' Reference
            Dim refType
            refType = Trim(holding(3))
            
            If refType = "WrapAccount" And Dividend.ExcludeWraps Then
                ' Skip Wrap Holdings
            Else
                Select Case refType
                Case "ExternalId", "Srn", "Hin"
                    If refType = "Hin" Then
                        base.offset(i, 2) = "HIN/SRN"
                    ElseIf refType = "ExternalId" Then
                        base.offset(i, 2) = "AccountNumber"
                    Else
                        base.offset(i, 2) = refType
                    End If
                    base.offset(i, 3) = Trim(holding(4))
                Case Else
                    base.offset(i, 2) = "HoldingAccount"
                    base.offset(i, 3) = Trim(holding(2))
                End Select
                
                ' Fund
                base.offset(i, 0) = Trim(holding(1))
                
                ' Event
                base.offset(i, 4) = EventType
                
                ' Code??
                base.offset(i, 5) = code
                
                ' Effective Date
                base.offset(i, 6) = exdate
                
                ' Payment Date
                base.offset(i, 7) = PaymentDate
                
                
                If holding(5) <= 0 Then
                    balanceissues = balanceissues + 1
                End If
                
                ' Maybe should skip if balance issue??
                
                ' Precalc
                Amount = Application.WorksheetFunction.Round(holding(5) * perShare, 2)
                franked = Round(Amount * frankedPerc, 2)
                
                ' Amount = quantity * perShare
                base.offset(i, 8).FormulaR1C1 = "=Round(" & Trim(holding(5)) & "*" & perShare & ", 2)"
                
                ' Franked amount
                base.offset(i, 12) = franked
            
                ' unfranked amount
                base.offset(i, 13) = Round(Amount - franked, 2)
                
                ' franking credits
                base.offset(i, 14) = Round((3 / 7) * franked, 2)
                
                ' increment generation counter
                i = i + 1
            End If
        Next j
        
        ' Tell them how many they got
        msg = i & " Income Event(s) generated."
        msgtitle = "Events Generated"
        If balanceissues > 0 Then
            msg = msg & vbCrLf & vbCrLf & _
            "Warning: " & balanceissues & " Event(s) generated with $0 or negative amounts due to 0 or negative holdings."
        End If
    End If
   
cleanup:
    ' restore calc etc.
    On Error GoTo 0
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
        
    Call MsgBox(msg, vbOKOnly, msgtitle)
End Sub

Public Function generateNetDistribution(Optional fundcode)
    
' Get all distributions, DistDates
' Sum all Distributions
' Use DistDates to find quanity for holdings per Distribution
'
Dim code, sheet, msg, msgtitle
Dim holdingcount, holdinglist, holdings, holding, i
Dim DistDates As Variant, dDate, numDist, distPerUnit, holdingQuantity, fundNetDist, wrongfundcode, error
Dim summedHoldings, summedDistribution

msg = ""
msgtitle = ""
summedDistribution = 0
' Find Net Distributions
numDist = 0
' Get date for each dist
Do While ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(numDist + 1, 0).Value <> ""
    dDate = ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(numDist + 1, 0).Value
    'FundCode = Trim(TaxStatement.tbFundCode.value)
    distPerUnit = ThisWorkbook.Worksheets("Dividends").Range("Dividends_Ex_Date").offset(numDist + 1, 1).Value
    holdinglist = Split(getHoldingsList(TaxStatement.SecurityCode.Value, dDate), vbCrLf)
    holdingcount = UBound(holdinglist)
    
    
    ' Get Funds with holdings
    i = 0
    Do While i <= holdingcount - 1
        holding = Split(holdinglist(i), ",")
        If IsError(fundcode) Then
            ' Error with Fund Code
        Else
            If fundcode = Trim(holding(1)) Then
            
                ' Net Distributions
                summedHoldings = CDbl(summedHoldings) + CDbl(Trim(holding(5)))
                summedDistribution = CDbl(summedDistribution) + (CDbl(holding(5)) * CDbl(distPerUnit))
                
                ' Capture current holding quantity
                If holdingQuantity = 0 Or IsEmpty(holdingQuantity) Then
                    holdingQuantity = CDbl(holding(5))
                End If
            Else
                ' Track if Fund code with no distribution at any date
                If IsEmpty(holdingQuantity) Then
                    ' Assume not held at Exdate
                    holdingQuantity = 0
                End If
            End If
        End If
        
        i = i + 1
    Loop
       
    numDist = numDist + 1
Loop

generateNetDistribution = summedDistribution & "," & holdingQuantity
    
End Function

Sub generateTaxStatements()
    Dim code, sheet

    SelectFinancialYear.Show
    If TaxStatementBulkEntry.cancelled Or TaxStatementBulkEntry.tbInvestmentAccount = "" Then
        Exit Sub
    End If
    Unload (TaxStatementBulkEntry)
    
End Sub

Public Sub generateFTS()
    Dim msgresponse, fundcode
    fundcode = SelectFinancialYear.getPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund")
    FinancialDateStart = ThisWorkbook.Worksheets("FundTax").Range("Start_Financial_Date").Value
    FinancialDateEnd = ThisWorkbook.Worksheets("FundTax").Range("End_Financial_Date").Value
    
    
    If IsEmpty(fundcode) Or fundcode = "" Then
        ' Set as default
        msgresponse = MsgBox("No fund was selected to generate tax statements for." & vbCrLf & vbCrLf & "Ensure you select a fund using the pivot table filter." & vbCrLf & "Your first fund has been selected as the default", vbOK, "Fund Selection Required")
    End If
    
    If msgresponse = vbCancel Then
        End
    Else
        If fundcode = "" Then
            Call SelectFinancialYear.setPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund", , True)
        Else
            Call SelectFinancialYear.setPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund", fundcode)
        End If
    End If
    
    Application.ScreenUpdating = False
    Call SelectFinancialYear.generateFundTaxStatements(fundcode)
    Application.ScreenUpdating = True
End Sub

Public Function populateTaxStatement(code, description, ToggledYearEnd, aPercentage, Optional distdate, Optional Fund)
    '
    '   Uses tax components provided to apply distribution data and populate income tab
    '   Parameters: Code, Description, YearEnd, ArrayOfTaxPercentages, DistributionDate
    '   Returns: Number of Tax statements Generated
    '
    Dim baseRow, base, row, distributionLineNo, msg, msgtitle, isSpecificDistribution, isMatchingspecificDistribtuion, netDistribution
    Dim countDist, ignorerow
    ' For fixing combine and use last distribution date not generating the expected number of Tax statements
    Dim lastFundCodeToCombine
    
    Application.ScreenUpdating = False
    Application.StatusBar = ""
    Application.Calculation = xlCalculationManual
    
    baseRow = findInsertPoint("Income!b" & 500)
    Set base = Range("Income!b" & baseRow)
    
    ' For each income with SecurityCode apply percentage
    row = 0
    distributionLineNo = 1
    countDist = 0
    ' Pre-check if distribution count will fit sheet 500 limit
    Do While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value <> ""
        ' Check if income Distribtions for security
        If Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 3).Value)) = Trim(UCase(code)) Then
            If isSpecificDistribution And isMatchingspecificDistribtuion = False Then
                ' Specific distribution selected does not match current distribution
                ' skip row
            Else
                If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) = "" Or ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value = 0 Then
                    ' No Distribution
                    ' Skip row
                Else
                    If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 11).Value) <> 0 Or Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 11).Value) = "" Then
                        ' Ignore if Tax Statement Exists (!0) for holding
                    Else
                        ' Check if distributions will be combine
                        If ToggledYearEnd Then
                            If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value) <> Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo - 1, 0).Value) Then
                                countDist = countDist + 1
                                ' For fixing combine and use last distribution date not generating the expected number of Tax statements
                                lastFundCodeToCombine = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value)
                            ' If only one Fund type exists
                            Else
                                If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value) = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo - 1, 0).Value) Then
                                    lastFundCodeToCombine = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value)
                                End If
                            End If
                        Else
                            countDist = countDist + 1
                        End If
                    End If
                End If
            End If
        End If
        distributionLineNo = distributionLineNo + 1
    Loop
    If baseRow + countDist > 500 Then
        MsgBox ("Error: Exceeded Sheet limit " & vbCrLf & "Please submit exiting data, clear sheet and re-enter data.")
        Exit Function
    End If
    
    ' Populate Data
    Dim percentage, g, j, u, statementSum, MaxValue, residual, residualCell, aAusIncome, aForeignIncome, extraRun, tolerance, Flag
    Flag = False
    tolerance = 0.01
    distributionLineNo = 1
    If ToggledYearEnd Then
        ' Combine all distributions for the FY for security into 1 summed figure
        Dim sumNetDist, resetSum, latestDistDate, previousFund, previousHoldingCode
        sumNetDist = 0
        resetSum = False
        ' Sum distributions before populating
        
        Do While Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 3).Value)) <> ""
            residualCell = ""
            ' Check if income Distribtions for security
            If Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 3).Value)) = Trim(UCase(code)) Then
                ' Ignore $0 Net Distributions
                If isSpecificDistribution And isMatchingspecificDistribtuion = False Then
                    ' Specific distribution selected does not match current distribution
                    ' skip row
                Else
                    If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) = "" Or ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value = 0 Then
                        ' No Distribution
                        ' Skip row
                    Else
                        
                        If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 11).Value) <> 0 Then
                            ' Ignore if Tax Statement Exists (!0) for holding
                        Else
                            ' Sum distributions
                            If sumNetDist = 0 Then
                                ' add distribution $amount
                                sumNetDist = CDbl(Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value)))
                                previousFund = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value))
                                previousHoldingCode = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 5).Value))
                                latestDistDate = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value))
                                netDistribution = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) ' NetDistribution Added by Navin
                            Else
                                ' Check if should be added to existing distribution
                                If previousFund = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value)) And previousHoldingCode = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 5).Value)) Then
                                    sumNetDist = CDbl(sumNetDist) + CDbl(Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value)))
                                    netDistribution = sumNetDist ' Added by Navin
                                    Flag = True ' SAM
                                    If CDate(latestDistDate) < Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value)) Then
                                        latestDistDate = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value))
                                    End If
                                Else
                                    ' Check fund filter
                                    If IsMissing(Fund) Then
                                        ignorerow = False
                                    Else
                                        ignorerow = True
                                        If Fund = previousFund Then
                                            tolerance = 0.01
                                            If Not (IsEmpty(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) Then
                                                tolerance = tolerance * Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)
                                                If Abs(Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) - Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) <= tolerance Then
                                                    ignorerow = False
                                                Else
                                                    ignorerow = True
                                                End If
                                            End If
                                        End If
                                    End If
                                    If Not ignorerow Then
                                        ' Create new Distribution after populating existing
                                        
                                        ' Populate distribution
                                        base.offset(row, 0) = previousFund ' FundCode
                                        base.offset(row, 2) = "HoldingAccount" ' Holding Reference Type
                                        base.offset(row, 3) = previousHoldingCode ' Holding Reference Code
                                        base.offset(row, 4) = "Distribution - Tax Statement" ' EventType
                                        base.offset(row, 5) = UCase(code) ' SecurityCode
                                        ' if set use 30 June date for event
                                        If isSpecificDistribution Then
                                            base.offset(row, 6) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Date
                                            base.offset(row, 7) = Format(ThisWorkbook.Worksheets("Dividends").Range("a1").offset(DividendLookup.selectionIndex, 4).Value, "dd/mm/yyyy") ' Payment Date
                                        Else
                                            'base.offset(row, 6) = Format("30/06/" & Mid(TaxStatementBulkEntry.cbFinancialYear.value, 6, 2), "dd/mm/yyyy") ' Date
                                            base.offset(row, 6) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Date
                                            base.offset(row, 7) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Payment Date
                                        End If
                                        base.offset(row, 8) = sumNetDist ' NetDistribution
                                        base.offset(row, 9) = description
                                        
                                        ' Set for current dist
                                        'sumNetDist = CDbl(Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value)))

                                        If Flag Then
                                           sumNetDist = CDbl(Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value)))
                                        End If
                                        If (Not Flag) Then  ' SAM
                                           netDistribution = sumNetDist
                                        End If
                                        sumNetDist = CDbl(Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value)))
                                        Flag = False
                                        previousFund = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value))
                                        previousHoldingCode = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 5).Value))
                                        latestDistDate = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value))
                                        ' netDistribution = sumNetDist ' Added by Navin
                                        ' Calculate tax $ figures using percentages and apply
                                        MaxValue = 0
                                        statementSum = 0
                                        ' convert aPercentage to numerical
                                        For g = 0 To UBound(aPercentage)
                                            If netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))) <> 0 Then
                                                ' Exception for TaxCredit and Franking Credit and Grossed up Capital Gains discount method
                                                If g = 4 Then ' Franking Credit
                                                    base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Franking Credit 'Math.Round(netDistribution * Trim(CDec(Format(aPercentage(2), "General Number"))) * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Franking Credit
                                                ElseIf g = 10 Then ' Foreign Tax Credits
                                                    base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Tax Percentage
                                                Else
                                                    ' Apply values to sheet
                                                    base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2)
                                                    
                                                    ' Work out residual
                                                    ' Find Residual cell based off any largest value
                                                    If netDistribution = "" Then
                                                        ' no distribution
                                                    Else
                                                        ' Tax deferred residual
                                                        If Format(aPercentage(21), "General Number") <> 0 Then
                                                            MaxValue = Format(aPercentage(21), "General Number") * netDistribution
                                                            residualCell = base.offset(row, 10 + 21).address
                                                        ' Tax exempt residual
                                                        ElseIf Format(aPercentage(19), "General Number") <> 0 Then
                                                            MaxValue = Format(aPercentage(19), "General Number") * netDistribution
                                                            residualCell = base.offset(row, 10 + 19).address
                                                        Else
                                                            ' Find largest Aus Income
                                                            aAusIncome = Array(aPercentage(2), aPercentage(3), aPercentage(5), aPercentage(6))
                                                            For j = 0 To UBound(aAusIncome)
                                                                If Format(aAusIncome(j), "General Number") <> 0 Then
                                                                    If Format(aAusIncome(j), "General Number") * netDistribution > CDec(MaxValue) Then
                                                                        MaxValue = Trim(Format(aAusIncome(j), "General Number") * netDistribution)
                                                                        ' find approriate address
                                                                        Select Case j
                                                                        Case 0
                                                                            residualCell = base.offset(row, 10 + 2).address ' Div Franked
                                                                        Case 1
                                                                            residualCell = base.offset(row, 10 + 3).address ' Div Unfranked
                                                                        Case 2
                                                                            residualCell = base.offset(row, 10 + 5).address ' Interest
                                                                        Case 3
                                                                            residualCell = base.offset(row, 10 + 6).address ' Other Income
                                                                        Case Else
                                                                            ' Find largest Foreign Income
                                                                            aAusIncome = Array(aPercentage(8), aPercentage(9), aPercentage(10))
                                                                            For u = 0 To UBound(aAusIncome)
                                                                                If Format(aAusIncome(u), "General Number") <> 0 Then
                                                                                    If Format(aAusIncome(u), "General Number") * netDistribution > MaxValue Then
                                                                                        MaxValue = Trim(Format(aAusIncome(u), "General Number") * netDistribution)
                                                                                        ' find approriate address
                                                                                        Select Case u
                                                                                        Case 0
                                                                                            residualCell = base.offset(row, 10 + 8).address ' Interest Income
                                                                                        Case 1
                                                                                            residualCell = base.offset(row, 10 + 9).address ' Modified Passive Income
                                                                                        Case 2
                                                                                            residualCell = base.offset(row, 10 + 10).address ' Other Assessable Income
                                                                                        End Select
                                                                                    End If
                                                                                End If
                                                                            Next u
                                                                        End Select
                                                                    End If
                                                                End If
                                                            Next j
                                                        End If
                                                    End If
                                                                               
                                                    ' Exception for Grossed up cap gains
                                                    If g = 14 Then ' grossed up capital gains
                                                        ' ignore in total
                                                    Else
                                                        statementSum = statementSum + base.offset(row, 10 + g).Value
                                                    End If
                                                End If
                                            End If
                                        Next g
                                        row = row + 1
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            
            distributionLineNo = distributionLineNo + 1

            ' Apply residual to largest figure if required
            If row > 0 Then
                If statementSum - base.offset(row - 1, 8) <> 0 Then
                    If residualCell <> "" Then
                        ' Calc Residual
                        residual = base.offset(row - 1, 8) - statementSum
                        ' Apply Residual
                        Range(residualCell).Value = residual + Range(residualCell).Value
                    End If
                End If
            End If
        Loop
        
        If IsMissing(Fund) Then
            ignorerow = False
        Else
            ignorerow = True
            If Fund = previousFund Then
                tolerance = 0.01
                If Not (IsEmpty(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) Then
                    tolerance = tolerance * Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)
                    If Abs(Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) - Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) <= tolerance Then
                        ignorerow = False
                    Else
                        ignorerow = True
                    End If
                End If
            End If
        End If
        If Not ignorerow Then
            ' Run Once for last Distribution
            ' If previousFund = Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo - 1, 0).value)) Then
            ' For fixing combine and use last distribution date not generating the expected number of Tax statements
            If previousFund = lastFundCodeToCombine And previousFund <> "" And lastFundCodeToCombine <> "" Then
                ' Populate details
                base.offset(row, 0) = previousFund ' FundCode
                base.offset(row, 2) = "HoldingAccount" ' Holding Reference Type
                base.offset(row, 3) = previousHoldingCode ' Holding Reference Code
                base.offset(row, 4) = "Distribution - Tax Statement" ' EventType
                base.offset(row, 5) = UCase(code) ' SecurityCode
                ' if set use 30 June date for event
                If isSpecificDistribution Then
                    base.offset(row, 6) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Date
                    base.offset(row, 7) = Format(ThisWorkbook.Worksheets("Dividends").Range("a1").offset(DividendLookup.selectionIndex, 4).Value, "dd/mm/yyyy") ' Payment Date
                Else
                    'base.offset(row, 6) = Format("30/06/" & Mid(TaxStatementBulkEntry.cbFinancialYear.value, 6, 2), "dd/mm/yyyy") ' Date
                    base.offset(row, 6) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Date
                    base.offset(row, 7) = CDate(Format(latestDistDate, "dd/mm/yyyy")) ' Payment Date
                End If
                base.offset(row, 8) = sumNetDist ' NetDistribution
                base.offset(row, 9) = description
                netDistribution = sumNetDist 'SAM
                ' Calculate tax $ figures using percentages and apply
                MaxValue = 0
                statementSum = 0
                ' convert aPercentage to numerical
                For g = 0 To UBound(aPercentage)
                    If netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))) <> 0 Then
                        ' Exception for TaxCredit and Franking Credit and Grossed up Capital Gains discount method
                        If g = 4 Then ' Franking Credit
                            base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2)  ' Franking Credit
                        ElseIf g = 10 Then ' Foreign Tax Credits
                            base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2)  '  Tax Percentage
                        Else
                            ' Apply values to sheet
                            base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2)
                                                       
                            ' Work out residual
                            ' Find Residual cell based off any largest value
                            If netDistribution = "" Then
                                ' no distribution
                            Else
                                ' Tax deferred residual
                                If Format(aPercentage(21), "General Number") <> 0 Then
                                    MaxValue = Format(aPercentage(21), "General Number") * netDistribution
                                    residualCell = base.offset(row, 10 + 21).address
                                ' Tax exempt residual
                                ElseIf Format(aPercentage(19), "General Number") <> 0 Then
                                    MaxValue = Format(aPercentage(19), "General Number") * netDistribution
                                    residualCell = base.offset(row, 10 + 19).address
                                Else
                                    ' Find largest Aus Income
                                    aAusIncome = Array(aPercentage(2), aPercentage(3), aPercentage(5), aPercentage(6))
                                    For j = 0 To UBound(aAusIncome)
                                        If Format(aAusIncome(j), "General Number") <> 0 Then
                                            If Format(aAusIncome(j), "General Number") * netDistribution > CDec(MaxValue) Then
                                                MaxValue = Trim(Format(aAusIncome(j), "General Number") * netDistribution)
                                                ' find approriate address
                                                Select Case j
                                                Case 0
                                                    residualCell = base.offset(row, 10 + 2).address ' Div Franked
                                                Case 1
                                                    residualCell = base.offset(row, 10 + 3).address ' Div Unfranked
                                                Case 2
                                                    residualCell = base.offset(row, 10 + 5).address ' Interest
                                                Case 3
                                                    residualCell = base.offset(row, 10 + 6).address ' Other Income
                                                Case Else
                                                    ' Find largest Foreign Income
                                                    aAusIncome = Array(aPercentage(8), aPercentage(9), aPercentage(10))
                                                    For u = 0 To UBound(aAusIncome)
                                                        If Format(aAusIncome(u), "General Number") <> 0 Then
                                                            If Format(aAusIncome(u), "General Number") * netDistribution > MaxValue Then
                                                                MaxValue = Trim(Format(aAusIncome(u), "General Number") * netDistribution)
                                                                ' find approriate address
                                                                Select Case u
                                                                Case 0
                                                                    residualCell = base.offset(row, 10 + 8).address ' Interest Income
                                                                Case 1
                                                                    residualCell = base.offset(row, 10 + 9).address ' Modified Passive Income
                                                                Case 2
                                                                    residualCell = base.offset(row, 10 + 10).address ' Other Assessable Income
                                                                End Select
                                                            End If
                                                        End If
                                                    Next u
                                                End Select
                                            End If
                                        End If
                                    Next j
                                End If
                            End If
                                                       
                            ' Exception for Grossed up cap gains
                            If g = 14 Then ' grossed up capital gains
                                ' ignore in total
                            Else
                                statementSum = statementSum + base.offset(row, 10 + g).Value
                            End If
                        End If
                    End If
                Next g
                row = row + 1
                
                ' Apply residual to largest figure if required
                If row > 0 Then
                    If statementSum - base.offset(row - 1, 8) <> 0 Then
                        If residualCell <> "" Then
                            ' Calc Residual
                            residual = base.offset(row - 1, 8) - statementSum
                            ' Apply Residual
                            Range(residualCell).Value = residual + Range(residualCell).Value
                        End If
                    End If
                End If
            End If
        End If
    Else
        ' Invididual distribution events/tax statements
        ' Work out sheet population based off distribution details
        Do While ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value <> ""
            
            ' Identify non-matching distributions if specificly dated
            isSpecificDistribution = False
            isMatchingspecificDistribtuion = True
            If Not IsMissing(distdate) Then
                isSpecificDistribution = True
                ' Check matching dates with 10 day buffer
                If CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yy")) < (CDate(distdate) + 10) And CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yy")) > (CDate(distdate) - 10) Then
                    isMatchingspecificDistribtuion = True
                Else
                    isMatchingspecificDistribtuion = False
                End If
            End If
            ' Check if income Distribtions for security
            If Trim(UCase(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 3).Value)) = Trim(UCase(code)) Then
                ' Ignore $0 Net Distributions
                If isSpecificDistribution And isMatchingspecificDistribtuion = False Then
                    ' Specific distribution selected does not match current distribution
                    ' skip row
                Else
                    If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) = "" Or ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value = 0 Then
                        ' No Distribution
                        ' Skip row
                    Else
                        If Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 11).Value) <> 0 Then
                            ' Ignore if Tax Statement Exists (!0) for holding
                        Else
                            If IsMissing(Fund) Then
                                ignorerow = False
                            Else
                                ignorerow = True
                                If Fund = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value) Then
                                    tolerance = 0.01
                                    If Not (IsEmpty(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) Then
                                        tolerance = tolerance * Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)
                                        If Abs(Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) - Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 10).Value)) <= tolerance Then
                                            ignorerow = False
                                        Else
                                            ignorerow = True
                                        End If
                                    End If
                                End If
                            End If
                            If Not ignorerow Then
                                ' Apply Percentage and move to tax statement if security code matches
                                base.offset(row, 0) = ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 0).Value ' FundCode
                                base.offset(row, 2) = "HoldingAccount" ' Holding Reference Type
                                base.offset(row, 3) = ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 5).Value ' Holding Reference Code
                                base.offset(row, 4) = "Distribution - Tax Statement" ' EventType
                                base.offset(row, 5) = UCase(code) ' SecurityCode
                                ' if set use 30 June date for event
                                If ToggledYearEnd Then
                                    base.offset(row, 6) = CDate(Format("30/06/" & Mid(TaxStatementBulkEntry.cbFinancialYear.Value, 6, 2), "dd/mm/yyyy")) ' Date
                                    base.offset(row, 7) = CDate(Format("30/06/" & Mid(TaxStatementBulkEntry.cbFinancialYear.Value, 6, 2), "dd/mm/yyyy")) ' Payment Date
                                ElseIf isSpecificDistribution Then
                                    If Not IsEmpty(distdate) Then
                                        If IsMissing(Fund) Then
                                            base.offset(row, 6) = CDate(Format(distdate, "dd/mm/yyyy")) ' Date
                                            base.offset(row, 7) = CDate(Format(distdate, "dd/mm/yyyy")) ' Payment Date
                                        Else
                                            base.offset(row, 6) = CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yyyy")) ' Date
                                            base.offset(row, 7) = CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yyyy")) ' Payment Date
                                        End If
                                    Else
                                        base.offset(row, 6) = CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yyyy")) ' Date
                                        base.offset(row, 7) = CDate(Format(ThisWorkbook.Worksheets("Dividends").Range("a1").offset(DividendLookup.selectionIndex, 4).Value, "dd/mm/yyyy")) ' Payment Date
                                    End If
                                Else
                                    base.offset(row, 6) = CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yyyy")) ' Date
                                    base.offset(row, 7) = CDate(Format(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 1).Value, "dd/mm/yyyy")) ' Payment Date
                                End If
                                
                                netDistribution = Trim(ThisWorkbook.Worksheets("Distributions").Range("a1").offset(distributionLineNo, 7).Value) ' NetDistribution
                                base.offset(row, 8) = Format(netDistribution, "General Number")
                                base.offset(row, 9) = description
     
                                ' Calculate tax $ figures using percentages and apply
                                statementSum = 0
                                MaxValue = 0
                                ' convert aPercentage to numerical
                                For g = 0 To UBound(aPercentage)
                                    If netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))) <> 0 Then
                                        ' Exception for TaxCredit and Franking Credit
                                        If g = 4 Then ' Franking Credit
                                            base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Franking Credit 'Math.Round(netDistribution * Trim(CDec(Format(aPercentage(2), "General Number"))) * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Franking Credit
                                        ElseIf g = 10 Then ' Foreign Tax Credits
                                            base.offset(row, 10 + g).Value = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) 'Tax Percentage ' Math.Round(netDistribution * (CDec(Format(aPercentage(7), "General Number")) + CDec(Format(aPercentage(8), "General Number")) + CDec(Format(aPercentage(9), "General Number"))) * Trim(CDec(Format(aPercentage(g), "General Number"))), 2) ' Assessable Income * Tax Percentage
                                        Else
                                            ' Apply values to sheet
                                            Dim tempValue
                                            tempValue = Math.Round(netDistribution * Trim(CDec(Format(aPercentage(g), "General Number"))), 2)
                                            base.offset(row, 10 + g).Value = tempValue
                                            'ignore Grossed up CG Discount Method
                                            If g <> 23 Then
                                                If g <> 14 Then
                                                    statementSum = statementSum + tempValue
                                                End If
                                            End If
                                        End If
                                    End If
                                Next g
                                ' Find residual cell based off proprity
                                ' Tax deferred residual
                                If Format(aPercentage(21), "General Number") <> 0 Then
                                    MaxValue = Format(aPercentage(21), "General Number") * netDistribution
                                    residualCell = base.offset(row, 10 + 21).address
                                ' Tax exempt residual
                                ElseIf Format(aPercentage(19), "General Number") <> 0 Then
                                    MaxValue = Format(aPercentage(19), "General Number") * netDistribution
                                    residualCell = base.offset(row, 10 + 19).address
                                Else
                                    ' Find largest Aus Income
                                    aAusIncome = Array(aPercentage(2), aPercentage(3), aPercentage(5), aPercentage(6))
                                    For j = 0 To UBound(aAusIncome)
                                        If Format(aAusIncome(j), "General Number") <> 0 Then
                                            If Format(aAusIncome(j), "General Number") * netDistribution > CDec(MaxValue) Then
                                                MaxValue = Trim(Format(aAusIncome(j), "General Number") * netDistribution)
                                                ' find approriate address
                                                Select Case j
                                                Case 0
                                                    residualCell = base.offset(row, 10 + 2).address ' Div Franked
                                                Case 1
                                                    residualCell = base.offset(row, 10 + 3).address ' Div Unfranked
                                                Case 2
                                                    residualCell = base.offset(row, 10 + 5).address ' Interest
                                                Case 3
                                                    residualCell = base.offset(row, 10 + 6).address ' Other Income
                                                Case Else
                                                    ' Find largest Foreign Income
                                                    aAusIncome = Array(aPercentage(8), aPercentage(9), aPercentage(10))
                                                    For u = 0 To UBound(aAusIncome)
                                                        If Format(aAusIncome(u), "General Number") <> 0 Then
                                                            If Format(aAusIncome(u), "General Number") * netDistribution > MaxValue Then
                                                                MaxValue = Trim(Format(aAusIncome(u), "General Number") * Trim(netDistribution))
                                                                ' find approriate address
                                                                Select Case u
                                                                Case 0
                                                                    residualCell = base.offset(row, 10 + 8).address ' Interest Income
                                                                Case 1
                                                                    residualCell = base.offset(row, 10 + 9).address ' Modified Passive Income
                                                                Case 2
                                                                    residualCell = base.offset(row, 10 + 10).address ' Other Assessable Income
                                                                End Select
                                                            End If
                                                        End If
                                                    Next u
                                                End Select
                                            End If
                                        End If
                                    Next j
    
                                End If
                                
                                
                                ' Apply residual to largest figure if required
                                If statementSum <> CDbl(netDistribution) Then
                                    ' Calc Residual
                                    residual = netDistribution - statementSum
                                    
                                    ' Apply Residual
                                    If Not IsEmpty(residualCell) Then
                                        ThisWorkbook.Worksheets("Income").Range(residualCell).Value = residual + ThisWorkbook.Worksheets("Income").Range(residualCell).Value
                                    End If
                                    
                                End If
                                row = row + 1
                            End If
                        End If
                    End If
                End If
            End If

            distributionLineNo = distributionLineNo + 1
        Loop
    End If
    
        ' check if any tax already entered
        
'        ' Fund Holding vs Distribution announcement Qnty
'        If CDbl(ppUnit(1)) <> CDbl(holding(5)) Then
'            If ppUnit(1) = 0 Then
'                ' No units held at Exdate
'                base.offset(row, 0).EntireRow.Delete
'                deletedRows = deletedRows + 1
'                row = i - deletedRows
'            End If
'        End If
    
    populateTaxStatement = row

'    If balanceissues > 0 Then
'        msg = msg & vbCrLf & vbCrLf & _
'        "Warning: " & balanceissues & " Event(s) generated with $0 or negative amounts due to 0 or negative holdings."
'    End If

cleanup:
    ' restore calc etc.
    On Error GoTo 0
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
    
End Function


Sub SaveTaxTemplateComponents(code, description, aPercentage, netAmount, Optional effectiveDate, Optional row)
    
    Dim base, g
    
    ' unprotect
    Application.ScreenUpdating = False
    Call unprotectWorkbook
    
    ' Find insert point
    Dim i
    i = 2
    While Range("TaxTemplates!C" & i) <> ""
        i = i + 1
    Wend
    
    ' Use selected row
    If Not IsMissing(row) Then
        i = row + 2
    End If
    
    Set base = Range("TaxTemplates!B" & i)
    
    ' Apply component percentages to TaxTemplates
    For g = 2 To UBound(aPercentage)
        ' adjust for removal of first two elements in array, and adjust for column number offset
        base.offset(0, g - 2 + 5).Value = Trim(CDec(Format(aPercentage(g), "General Number")))
    Next g
    
    ' Fill in additional details
    ' date
    base.Value = Format(Now, "dd/mm/yy hh:mm")
    ' code
    base.offset(0, 1).Value = UCase(code)
    ' Net amount
    base.offset(0, 3).Value = netAmount
    ' description
    base.offset(0, 4).Value = description
    ' ex date (effectivedate/accounting date)
    base.offset(0, 2).Value = effectiveDate
    
    ' re-protect
    If Not IsEmpty(getVariable("togglesavetemplates")) Then
        If getVariable("togglesavetemplates") = "" Then
            ThisWorkbook.Worksheets("TaxTemplates").Visible = False
        Else
            ' default, toggle off
            If getVariable("togglesavetemplates") Then
                ThisWorkbook.Worksheets("TaxTemplates").Visible = Not ThisWorkbook.Worksheets("TaxTemplates").Visible
            End If
        End If
    End If
    Call toggleProtection
    Application.ScreenUpdating = True
End Sub

Sub generateCapitalFlows()
   Dim code, sheet, msg, msgtitle
   
   msg = ""
   msgtitle = ""
   
   ' Allow user to pick or enter a Dividend
    CapitalFlow.Show
    If CapitalFlow.cancelled Then
        Exit Sub
    End If
    code = CapitalFlow.SecurityCode
    Set sheet = Worksheets("Dividends")
   
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Retrieving data, please wait..."
    Application.ScreenUpdating = False
    On Error Resume Next
    
    If code <> "" Then
        Dim EntitlementDate, recordDate, perShare, PaymentDate, EventType
        
        EventType = CapitalFlow.EventType.Value
        recordDate = DateValue(CapitalFlow.ExDividendDate.Value)
        EntitlementDate = recordDate - 1
        PaymentDate = DateValue(CapitalFlow.PaymentDate.Value)
        perShare = CapitalFlow.Amount.Value
        
        Dim holdings, holding, base, i, balanceissues
        ' Check if we have any holdings
        holdings = Split(getHoldingsList(code, EntitlementDate), vbCrLf)
        balanceissues = 0
            
        ' Populate the spreadsheet
        Dim baseRow, holdingcount, rowCount, Amount
        baseRow = 4
        holdingcount = UBound(holdings)
        
        ' No holdings found
        If holdingcount = -1 Then
            msg = "No Holdings found for Security " & code & " at the entitlement date (" & Format(EntitlementDate, "dd mmm yyyy") & ")"
            msgtitle = "No Holdings"
            GoTo cleanup
        End If
        
        ' check that row is blank and advance up to row 500 if required
        baseRow = findInsertPoint("Portfolio!b" & 500)
        Set base = Range("Portfolio!b" & baseRow)
        
        ' too many rows
        If (baseRow + rowCount - 4) > 500 Then
            msg = "Error: Can't generate rows due to 500 row upload limit.  Try Loading the data in smaller groups"
            msgtitle = "Data Row Limit Exceeded"
            GoTo cleanup
        End If
    
        For i = 0 To holdingcount - 1
            holding = Split(holdings(i), ",")
            
            ' Fund
            base.offset(i, 0) = Trim(holding(1))
            
            ' Reference
            Dim refType
            refType = Trim(holding(3))
            Select Case refType
            Case "ExternalId", "Srn", "Hin"
                If refType = "Hin" Then
                    base.offset(i, 2) = "HIN/SRN"
                ElseIf refType = "ExternalId" Then
                    base.offset(i, 2) = "AccountNumber"
                Else
                    base.offset(i, 2) = refType
                End If
                base.offset(i, 3) = Trim(holding(4))
            Case Else
                base.offset(i, 2) = "HoldingAccount"
                base.offset(i, 3) = Trim(holding(2))
            End Select
            
            ' Event
            base.offset(i, 4) = EventType
            
            ' Code??
            base.offset(i, 5) = code
            
            ' Record Date
            ' base.Offset(i, 6) = recordDate
            
            ' Effective Date
            base.offset(i, 6) = PaymentDate
            
            
            ' Maybe should skip if balance issue??
            If holding(5) <= 0 Then
                balanceissues = balanceissues + 1
            End If
            
            ' Precalc
            Amount = Application.WorksheetFunction.Round(holding(5) * perShare, 2)
            
            ' Participating Units
            base.offset(i, 9) = holding(5)
            
            ' Amount = quantity * perShare
            base.offset(i, 10).Formula = "=Round(K" & (baseRow + i) & "*" & perShare & ", 2)"
            
            balanceissues = 0
            ' Maybe should skip if balance issue??
            If holding(5) <= 0 Then
                balanceissues = balanceissues + 1
            End If
            
        Next i
        
        ' Tell them how many they got
        msg = holdingcount & " Capital Event(s) generated."
        msgtitle = "Events Generated"
        If balanceissues > 0 Then
            msg = msg & vbCrLf & vbCrLf & _
            "Warning: " & balanceissues & " Event(s) generated with $0 or negative amounts due to 0 or negative holdings."
        End If
    End If
   
cleanup:
    ' restore calc etc.
    On Error GoTo 0
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
        
    Call MsgBox(msg, vbOKOnly, msgtitle)
End Sub

Sub generateCorporateActions()
   Dim code, sheet, msg, msgtitle
   
   msg = ""
   msgtitle = ""
   
  
   ' Allow user to pick or enter a Dividend
    CorporateAction.Show
    If CorporateAction.cancelled Then
        Exit Sub
    End If
    code = CorporateAction.SecurityCode
    Set sheet = Worksheets("CorpAction")
   
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Retrieving data, please wait..."
    Application.ScreenUpdating = False
    On Error Resume Next
    
    If code <> "" Then
        Dim entitledDate, payDate, actionType
        
        actionType = CorporateAction.EventType.Value
        entitledDate = DateValue(CorporateAction.EntitlementDate.Value)
        payDate = DateValue(CorporateAction.PaymentDate.Value)
        
        Dim holdings, holding, base, i, balanceissues
        ' Check if we have any holdings
        holdings = Split(getHoldingsList(code, entitledDate), vbCrLf)
        balanceissues = 0
            
        ' Populate the spreadsheet
        Dim baseRow, holdingcount, rowCount, Amount
        baseRow = 4
        holdingcount = UBound(holdings)
        
        ' No holdings found
        If holdingcount = -1 Then
            msg = "No Holdings found for Security " & code & " at the entitlement date (" & Format(entitledDate, "dd mmm yyyy") & ")"
            msgtitle = "No Holdings"
            GoTo cleanup
        End If
        
        ' check that row is blank and advance up to row 500 if required
        baseRow = findInsertPoint("CorpAction!b" & 500)
        Set base = Range("CorpAction!b" & baseRow)
        
        ' too many rows
        If (baseRow + rowCount - 4) > 500 Then
            msg = "Error: Can't generate rows due to 500 row upload limit.  Try Loading the data in smaller groups"
            msgtitle = "Data Row Limit Exceeded"
            GoTo cleanup
        End If
    
        For i = 0 To holdingcount - 1
            holding = Split(holdings(i), ",")
            
            ' Fund
            If Trim(Range("Brand").Text) = "" Then
                base.offset(i, 2) = Trim(holding(0)) & "/" & Trim(holding(1))
            Else
                base.offset(i, 2) = Trim(holding(1))
            End If
            
            ' Reference
            Dim refType
            refType = Trim(holding(3))
            Select Case refType
            Case "ExternalId", "Srn", "Hin"
                If refType = "Hin" Then
                    base.offset(i, 1) = "HIN/SRN"
                ElseIf refType = "ExternalId" Then
                    base.offset(i, 1) = "AccountNumber"
                Else
                    base.offset(i, 1) = refType
                End If
                base.offset(i, 3) = Trim(holding(4))
            Case Else
                base.offset(i, 1) = "HoldingAccount"
                base.offset(i, 3) = Trim(holding(2))
            End Select
            
            ' Event
            base.offset(i, 0) = actionType
            
            ' Security Code
            base.offset(i, 4) = code
            
            ' Record Date
            base.offset(i, 8) = entitledDate
            
            ' Effective Date
            base.offset(i, 9) = payDate
            
            
            ' Maybe should skip if balance issue??
            If holding(5) <= 0 Then
                balanceissues = balanceissues + 1
            End If
            
            ' Precalc
            ' Amount = Application.WorksheetFunction.Round(holding(5) * perShare, 2)
            
            ' Participating Units
            base.offset(i, 11) = holding(5)
            
            ' Amount = quantity * perShare
            ' base.Offset(i, 9).Formula = "=Round(J" & (baseRow + i) & "*" & perShare & ", 2)"
            
        Next i
        
        ' Tell them how many they got
        msg = holdingcount & " Corporate Action Event(s) generated."
        msgtitle = "Events Generated"
        If balanceissues > 0 Then
            msg = msg & vbCrLf & vbCrLf & _
            "Warning: " & balanceissues & " Event(s) generated with $0 or negative amounts due to 0 or negative holdings."
        End If
    End If
   
cleanup:
    ' restore calc etc.
    On Error GoTo 0
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
        
    Call MsgBox(msg, vbOKOnly, msgtitle)
End Sub


Public Function getDividendData(secCode, Optional logon = "", Optional pw = "")
    Dim sendUrl, reqType, resultString
    Dim sheet As Worksheet
    
    ' Clear somespace :)
    Set sheet = Worksheets("Dividends")
    sheet.Cells.Clear
    
    ' pessimistic :(
    getDividendData = False

    If secCode <> "" Then
        
        ' Retrieve data
        reqType = "Dividend/Distribution Data"
        sendUrl = "<host>/system/class/<Business>/<Brand>/components/security-register/income-announcement-table.xml?securityissuecode=" & secCode
        resultString = getWebServiceData(sendUrl, reqType)
        
        ' skip funny chars
        If Left(resultString, 1) <> "<" Then
            resultString = Mid(resultString, 4)
        End If
        
        ' Transform the XML returned
        resultString = transformDividends(resultString)
        
        Application.ScreenUpdating = False
        Application.Calculation = xlCalculationManual
        Application.StatusBar = "Retrieving Data, please wait..."
        
        ' logic to loop and populate the Dividend range
        Dim dividends, Dividend, base, i
        ' Check if we have any dividends
        dividends = Split("Ex Date,Amount,Franking %,Book Close Date,Payment Date,Event Type,Comment," & vbCrLf & resultString, vbCrLf)
            
        ' Populate the spreadsheet
        Dim dividendCount, rowCount, msg, msgtitle, t
        dividendCount = UBound(dividends)
        
        ' No dividends found
        If dividendCount = 1 Then
            msg = "No dividends/distributions found for Security " & secCode
            msgtitle = "No Dividends/Distributions"
        End If
        
        ' check that row is blank and advance up to row 500 if required
        Set base = Range("Dividends!A1")
        
        For i = 0 To dividendCount - 1
            Dividend = Split(dividends(i), ",")
            
            ' ExDate
            base.offset(i, 0) = Trim(Dividend(0))
            
            ' Amount - convert from cents to dollars
            t = Trim(Dividend(1))
            If IsNumeric(t) Then
                t = t + 0
                If t <> 0 Then t = t / 100
            End If
            base.offset(i, 1) = t
            
            ' Franking
            t = Trim(Dividend(2))
            If IsNumeric(t) Then t = t & "%"
            base.offset(i, 2) = t
            
            ' Book Close Date
            base.offset(i, 3) = Trim(Dividend(3))
            
            ' Payment Date
            base.offset(i, 4) = Trim(Dividend(4))
            
            ' Type
            t = Trim(Dividend(7))
            If t <> "" Then
                If Left(t, 8) = "Dividend" Then
                    t = "Div. "
                Else
                    t = "Dist. "
                End If
            End If
            
            base.offset(i, 5) = t & Trim(Dividend(5))
            
            ' Comment
            base.offset(i, 6) = Trim(Dividend(6))
        Next i
        
        ' set range name to cover all new dividends
        ActiveWorkbook.Names("Dividends").RefersToR1C1 = "=Dividends!R1C1:R" & i + 1 & "C8"
        
        getDividendData = True
                
    End If

cleanup:
    ' restore calc etc.
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
        
End Function

Public Sub UpdateVersion()
    overview.Protect = False
    If ThisWorkbook.Saved = True Then
        overview.Range("versionNumber").Value = Format(Date, yyyy.mm.dd)
    End If
    overview.Protect = True
End Sub

Sub emptyLoaderCells()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.StatusBar = "Clearing Cells, please wait..."
    
    Call toggleProtection
    ThisWorkbook.Worksheets("Cash").Range("B4:L498").ClearContents
    ThisWorkbook.Worksheets("Custom").Range("B4:L498").ClearContents
    ThisWorkbook.Worksheets("Expense").Range("B4:k498").ClearContents
    ThisWorkbook.Worksheets("Income").Range("B4:AN499").ClearContents
    ThisWorkbook.Worksheets("Portfolio").Range("B4:O498").ClearContents
    ThisWorkbook.Worksheets("CorpAction").Range("B4:U498").ClearContents
    Call toggleProtection
    
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    Application.Calculation = xlCalculationAutomatic
End Sub

Function ColorTaxStatusCells()
    Dim Data As Range, Data2 As Range, cell As Range
    Dim currentsheet As Worksheet
    Dim Pvttbl As PivotTable
    
    Set currentsheet = ThisWorkbook.Worksheets("FundTax")
    Set Pvttbl = currentsheet.PivotTables("FundTaxPivotTable")
   
    For Each cell In Pvttbl.PivotFields("Status").dataRange
        If cell.Text = "No Action" Then
           cell.Interior.ColorIndex = 15
        End If
        If cell.Text = "Manual Tax Statement" Then
           cell.Interior.ColorIndex = 3
        End If
        If cell.Text = "Generate Income" Then
           cell.Interior.ColorIndex = 44
        End If
        If cell.Text = "Generate Tax Statement" Then
           cell.Interior.ColorIndex = 44
        End If
        If cell.Text = "Reconciliation Issue" Then
           cell.Interior.ColorIndex = 3
        End If
        If cell.Text = "Complete" Then
           cell.Interior.ColorIndex = 43
        End If
    Next
    
'    Status                  | Colour| Colour index
'    No Action               | Grey  | 15,16,48
'    Manual Tax Statement    | Red   | 9,30,3
'    Manual Tax Statement    | Red   | 9,30,3
'    Generate Income         | Yellow| 6,27,44
'    Generate Tax Statement  | Yellow| 6,27,44
'    Reconciliation Issue    | Red   | 9,30,3
'    Reconciliation Issue    | Red   | 9,30,3
'    Complete                | Green | 50,43

End Function

Sub PivotTableClassic(worksheetname)
    
    Dim pt As PivotTable
    Dim pf As PivotField
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Worksheets(worksheetname)
    
    For Each pt In ws.PivotTables
         On Error Resume Next
             Set pt = ActiveCell.PivotTable
         On Error GoTo 0
        
         If Not pt Is Nothing Then
             With pt
                 .InGridDropZones = True
                 .RowAxisLayout xlTabularRow
             End With
            
             For Each pf In pt.PivotFields
                 If pf.Orientation = xlRowField Then
                     pf.Subtotals = Array(False, False, False, False, False, False, False, False, False, False, False, False)
                     pf.RepeatLabels = True
                 End If
             Next pf
         End If
    Next pt
    
End Sub

Public Function createFundTaxPivotTable()
    ' Refresh pivot table data on FundTax Tab
    Dim Pvttbl As PivotTable
    Dim dataRange As Range, priorRange As Range
    Dim priorSheet As Worksheet
    Dim pf As PivotField
    
    Call unprotectWorkbook
    Application.ScreenUpdating = False
    ' Delete prior pivot
    On Error Resume Next
    If Not ThisWorkbook.Worksheets("FundTax").PivotTables("FundTaxPivotTable") Is Nothing Then
        ThisWorkbook.Worksheets("FundTax").PivotTables("FundTaxPivotTable").TableRange2.Clear
        On Error GoTo 0
    End If
        
    ' Create new pivot using data
    'Set priorRange = Selection
    'Set priorSheet = ActiveSheet
    ThisWorkbook.Worksheets("Distributions").Activate
    Set dataRange = ThisWorkbook.Worksheets("Distributions").Range("a1").CurrentRegion
    ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:=dataRange, Version:=xlPivotTableVersion12).CreatePivotTable TableDestination:=ThisWorkbook.Worksheets("FundTax").Range("C3"), TableName:="FundTaxPivotTable", DefaultVersion:=xlPivotTableVersion12
    
    If ThisWorkbook.Worksheets("FundTax").Visible = False Then
        ThisWorkbook.Worksheets("FundTax").Visible = True
    End If
    ThisWorkbook.Worksheets("FundTax").Select
    ThisWorkbook.Worksheets("FundTax").Range("d1").Select
    'priorSheet.Select
    'priorRange.Select
    
    Set Pvttbl = ThisWorkbook.Worksheets("FundTax").PivotTables("FundTaxPivotTable")
    With Pvttbl
        'for empty cells in the data area of a PivotTable report, show a specified value, using the PivotTable.NullString Property:
        .NullString = "0"
        .DisplayNullString = True

        With .PivotFields("Fund")
            .Orientation = xlPageField
            .Position = 1
            .Caption = "Fund"
        End With
        With .PivotFields("IsAPIR")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Position = 1
            .Caption = "MarketType"
        End With
        With .PivotFields("Security")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Position = 2
            .Caption = "Security Code"
        End With
        With .PivotFields("HoldingAccountCode")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Position = 3
            .Caption = "Holding Code"
        End With
        With .PivotFields("TaxTemplateExists")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Position = 4
            .Caption = "Template Available"
        End With
        With Pvttbl.PivotFields("Status")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Caption = "Status"
            .Position = 5
        End With
        With .PivotFields("Date")
            .Orientation = xlRowField
            .Subtotals(1) = False
            .Position = 6
            .Caption = "ExDate"
        End With
        
        With Pvttbl.PivotFields("AnnouncementIncome")
            .Orientation = xlDataField
            .Function = xlSum
            .NumberFormat = "0"
            .Caption = "Income Entitlement"
            .Position = 1
        End With
        With Pvttbl.PivotFields("NetDistribution")
            .Orientation = xlDataField
            .Function = xlSum
            .NumberFormat = "0"
            .Caption = "Income Event"
            .Position = 2
        End With
        With Pvttbl.PivotFields("NetTaxStatements")
            .Orientation = xlDataField
            .Function = xlSum
            .NumberFormat = "0"
            .Caption = "Tax Statement Event"
            .Position = 3
        End With
        
        'set calculated field and add to pivot
'        .CalculatedFields.Add name:="Variance", Formula:="=IF(OR(NetDistribution=0,AnnouncementIncome=0),0,if(NetDistribution>AnnouncementIncome,+NetDistribution-AnnouncementIncome,AnnouncementIncome-NetDistribution))"
'        With .PivotFields("Variance")
'            .Orientation = xlDataField
'            .Caption = "Difference"
'            .Position = 3
'            .NumberFormat = "0"
'        End With
    
    Call ColorTaxStatusCells
    Call PivotTableClassic("FundTax")
    
    ' Setup default filter
    Dim fundcode
    fundcode = SelectFinancialYear.getPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund")
    If IsEmpty(fundcode) Or fundcode = "" Then
        Call SelectFinancialYear.setPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund", True)
        fundcode = SelectFinancialYear.getPivotFilterValue("FundTaxPivotTable", "FundTax", "Fund")
    End If

    Pvttbl.PivotFields("Fund").CurrentPage = fundcode
    
    ' Set to Classic View
    Pvttbl.InGridDropZones = True
    Pvttbl.RowAxisLayout xlTabularRow
    
    ' Hide filter buttons
    For Each pf In Pvttbl.PivotFields
        If pf.Name <> "Fund" Then
            pf.EnableItemSelection = False
        End If
    Next
  
    End With
    Application.ScreenUpdating = False
    Call toggleProtection
    Application.ScreenUpdating = True
End Function

Public Function BrowseFundList(ByVal apiUrl As String, ByVal accessToken As String, ByVal businessCode As String) As String
    ' Get fundlist url for end point for use with OAuth
    Dim fullUrl As String
    fullUrl = PrepareUrl(apiUrl) + "api/1.0/b/" + businessCode + "/fund-data/fund-list"
    BrowseFundList = fullUrl
End Function

Public Function GetFYTaxTemplates(ByVal rootUrl As String, ByVal startDate As Date, ByVal endDate As Date) As String
    ' Get Tax Template by dates URL end point for use with OAuth
    Dim fullUrl As String
    fullUrl = PrepareUrl(rootUrl) + "taxtemplates/GetTaxTemplatesByDateRange?startDate=" + UrlEncodeDate(startDate) + "&endDate=" + UrlEncodeDate(endDate)
    GetFYTaxTemplates = fullUrl
End Function

Public Function GetTaxTemplatesByDateRange(ByVal rootUrl As String, ByVal startDate As Date, ByVal endDate As Date, ByVal startPageIndex As Integer) As String
    ' Get Tax Template by dates URL end point for use with OAuth
    Dim fullUrl As String
    fullUrl = PrepareUrl(rootUrl) + "taxtemplates/GetTaxTemplatesByDateRange?startDate=" + UrlEncodeDate(startDate) + "&endDate=" + UrlEncodeDate(endDate) + "&startPageIndex=" + CStr(startPageIndex)
    GetTaxTemplatesByDateRange = fullUrl
End Function

Public Function GetTaxTemplatesBySecurityCodes(ByVal rootUrl As String, ByVal securitycodes As String, ByVal startDate As Date, ByVal endDate As Date, ByVal startPageIndex As Integer) As String
    ' Get Tax Template by security and dates end point for use with OAuth
    Dim fullUrl As String
    securitycodes = Replace(securitycodes, ",", "%2C")
    fullUrl = PrepareUrl(rootUrl) + "taxtemplates/GetTaxTemplatesBySecurityCodes?securityCodes=" + securitycodes + "&startDate=" + UrlEncodeDate(startDate) + "&endDate=" + UrlEncodeDate(endDate) + "&startPageIndex=" + CStr(startPageIndex)
    GetTaxTemplatesBySecurityCodes = fullUrl
End Function

Private Function PrepareUrl(ByVal URL As String)

'   Ensure Url in correct format for OAuth request
    If (Right(URL, 1) = "/") Then
        PrepareUrl = URL
    Else
        PrepareUrl = URL + "/"
    End If
End Function
Private Function UrlEncodeDate(ByVal theDate As Date) As String
    UrlEncodeDate = Format(theDate, "yyyy-mm-dd")
End Function

Public Sub toggleSwitchButton()

    Dim s As Shape
    Set s = ActiveWorkbook.Sheets("Overview").Shapes("SwitchUser")
    s.Visible = Not s.Visible
   
End Sub
Sub SwitchOauthUser()
   PromptForLogin = True
   MsgBox ("Login credentials will be required on next submission")
 
End Sub
Attribute VB_Name = "Utils"
Option Explicit
Option Compare Text

Public UserID

' --- Utils Module ---
'
' Base level utility functions for Class Super spreadsheets including property, variable and connection management
'
'   Note this code should work in both Word and Excel but you need to change:
'   -- Excel --         -- Word --
'   ThisWorkbook        ThisDocument
'



Sub setHostAndBusinessNames()
    SetHostAndBusiness.Show
End Sub


Function defaultHost()
'
'  Returns the Default host address for this spreadsheet.
'
    defaultHost = defaultProperty("Host")
    
End Function

Function defaultBusiness()
'
'  Returns the Default business name for this spreadsheet.
'
    defaultBusiness = defaultProperty("Business")
    
End Function

Function defaultBrand()
'
'  Returns the Default brand code for this spreadsheet.  The user may overwrite it
'
    defaultBrand = defaultProperty("Brand")
    
End Function


Function defaultFund()
'
'  Returns the Default fund code for this spreadsheet.  The user may overwrite it
'
    defaultFund = defaultProperty("Fund")
    
End Function


Function defaultUser()
'
'  Returns the Default user ID for this document.  The user may overwrite it
'
    defaultUser = getVariable("User")
    
End Function


Function getVariable(aName)
'
'  Returns the default value for the named variable for this document
'
    getVariable = ""
    On Error Resume Next
    getVariable = ThisWorkbook.CustomDocumentProperties(aName).Value
    On Error GoTo 0
    
End Function


Function setVariable(aName, aValue)
'
'  sets the default value for the named variable for this document
'
    Dim errNo
    On Error Resume Next
        ThisWorkbook.CustomDocumentProperties(aName).Value = aValue
        errNo = Err.number
    On Error GoTo 0
        ' Error will be non-zero if the new property is to be added
        If errNo <> 0 Then
            ThisWorkbook.CustomDocumentProperties.Add _
                Name:=aName, LinkToContent:=False, Value:=aValue, _
                Type:=msoPropertyTypeString
        End If
        
End Function


Private Function defaultProperty(aName)
'
'  Returns the default value for the named property for this spreadsheet
'
    defaultProperty = ""
    On Error Resume Next
    defaultProperty = ThisWorkbook.CustomDocumentProperties(aName)
    On Error GoTo 0
    
End Function


Function setProperty(aName, aValue)
'
'  Sets the default value for the named property for this spreadsheet
'
    On Error Resume Next
        ThisWorkbook.CustomDocumentProperties(aName).Value = Trim(aValue)
        ' should be -2147024809 : Unknown name...
        If Err.number <> 0 Then
            ThisWorkbook.CustomDocumentProperties.Add _
                Name:=aName, LinkToContent:=False, Value:=aValue, _
                Type:=msoPropertyTypeString
        End If
    On Error GoTo 0
    
End Function

Sub exportRangeNames()
'
'   Setting up ranges is hard; this will produce a list of them
'
    Dim n As Name, s As Worksheet, i
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Set s = ActiveWorkbook.Sheets.Add
    
    For i = 1 To ActiveWorkbook.Names.Count
        Set n = ActiveWorkbook.Names(i)
        s.Cells(i, 1).Value = "'" & n.Name
        s.Cells(i, 2).Value = "'" & n.RefersTo
        s.Cells(i, 3).Value = "'" & n.Comment
    Next i
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = ""

End Sub

Sub importRangeNames()
'
'   Setting up ranges is hard; this will generate them from a list
'
    Dim n As Name, s, i
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    Set s = ActiveWorkbook.ActiveSheet
    
    i = 1
    While s.Cells(i, 1) <> ""
        ' skip error if it already exists!
        On Error Resume Next
        Set n = ActiveWorkbook.Names.Add(s.Cells(i, 1).Value, s.Cells(i, 2).Value)
        Set n = ActiveWorkbook.Names(s.Cells(i, 1).Value)
        On Error GoTo 0
        n.RefersTo = s.Cells(i, 2).Value
        n.Comment = s.Cells(i, 3).Value
        i = i + 1
    Wend
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    
End Sub

Sub showNames()
Attribute showNames.VB_ProcData.VB_Invoke_Func = "n\n14"
'
'   Display a list of all the range names for the selection
'
    Dim r As Range, rLastR, rLastC, _
        here, hereLastR, hereLastC, _
        s, i
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    Set here = Selection
    hereLastR = here.row + here.Rows.Count
    hereLastC = here.Column + here.Columns.Count

    s = "Range Names:"
    
    For i = 1 To ActiveWorkbook.Names.Count
        Set r = Nothing
        On Error Resume Next
        Set r = ActiveWorkbook.Names(i).RefersToRange
        On Error GoTo 0
        If Not r Is Nothing Then
            rLastR = r.row + r.Rows.Count
            rLastC = r.Column + r.Columns.Count
            If r.row >= here.row And rLastR <= hereLastR And _
                r.Column >= here.Column And rLastC <= hereLastC _
                And r.Worksheet.Name = here.Worksheet.Name Then
                    s = s & vbCrLf & ActiveWorkbook.Names(i).Name
            End If
        End If
    Next i
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = ""
    
    MsgBox (s)

End Sub


Function isFormOpen(ByVal FormName As String) As Boolean
'
'   Check if a form is open
'
    Dim f As Object
    isFormOpen = False

    For Each f In VBA.UserForms
        If f.Name = FormName Then
            isFormOpen = True
            Exit For
        End If
    Next f
End Function

Function LookupCalendarID(FYyear)
    ' Given a FY year in the format yyyy provide Class calendar ID
    ' calendar/calendar-data used to source id's
    Dim CalendarIdSelected As Boolean
    CalendarIdSelected = False
    
    While Not CalendarIdSelected
        CalendarIdSelected = True
        Select Case FYyear
            Case "2005"
                FYyear = "3cb57ea8-e1dd-469c-8f8e-ced9a1f0dc74"
            Case "2006"
                FYyear = "91ac0d62-7219-4c07-93d3-c42eeceb6f61"
            Case "2007"
                FYyear = "86f9a4bb-8a33-4a26-9d9d-87c1a9506e8a"
            Case "2008"
                FYyear = "6a7e48ba-7d6d-4a77-9f07-1bd88a4ca33c"
            Case "2009"
                FYyear = "4630baaf-f475-4ad6-9a5c-fc6150476370"
            Case "2010"
                FYyear = "d759a48c-9dd9-457d-8ad0-5d348d8b050f"
            Case "2011"
                FYyear = "143bb639-ad4a-4d97-837b-a3e2dea73fd9"
            Case "2012"
                FYyear = "0f0de425-1333-4d9b-95b4-3fba93443314"
            Case "2013"
                FYyear = "e1996411-873c-4320-87d7-f305ad1ec7f5"
            Case "2014"
                FYyear = "91f41836-4f86-41f3-a21d-680262dc4af2"
            Case "2015"
                FYyear = "3612c075-b0f9-4291-82a2-40c894ae8751"
            Case "2016"
                FYyear = "f3720bb3-1fbf-47db-9a30-a0790b46de65"
            Case "2017"
                FYyear = "3dda19d1-0081-44f9-baa6-1cae315b27bd"
            Case "2018"
                FYyear = "034c4433-5b9a-4690-b7ab-dbf76ab24a73"
            Case "2019"
                FYyear = "6b9050bf-a113-487d-addf-99e17bae9775"
            Case "2020"
                FYyear = "e58ac693-ab05-4271-bf53-193957123c5a"
            Case Else
                FYyear = Format(Date, "yyyy")
                CalendarIdSelected = False
        End Select
    Wend
    LookupCalendarID = FYyear
End Function


Function clearCachedUtils()
    
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Application.StatusBar = ""
    
    ' clear data sheets
    Call unprotectWorkbook
    ThisWorkbook.Worksheets("Dividends").Cells.Clear
    ThisWorkbook.Worksheets("Distributions").Cells.Clear
    Call toggleProtection
    
    ' clear utils
    Call setVariable("IncomeGenTime", "")
    Call setVariable("IncomeRetreived", "")
    Call setVariable("IncomeScope", "")
    Call Utils.setVariable("TaxTemplateYear", "")

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.StatusBar = ""

End Function

Sub SortMe(Worksheet, rangeStart, sortKeyRangeSheet, sortKeyRange)
    Dim lastRow, lastColumn, rangeEnd
    'Ctrl + Shift + Down (Range should be first cell in data set)
    lastRow = ActiveWorkbook.Worksheets(Worksheet).Range(rangeStart).CurrentRegion.Rows.Count
    lastColumn = ActiveWorkbook.Worksheets(Worksheet).Range(rangeStart).CurrentRegion.Columns.Count
    rangeEnd = Cells(lastRow, lastColumn).address
    
    Sheets(Worksheet).Range(rangeStart & ":" & rangeEnd).Sort Key1:=Sheets(sortKeyRangeSheet).Range(sortKeyRange), _
    Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:=False, _
    Orientation:=xlTopToBottom, DataOption1:=xlSortNormal
End Sub

Sub sortDistributionsBySecurity()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim rngFund, rngHoldingAccountCode, rngSecurity
    
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Call unprotectWorkbook
    
    Set ws = ThisWorkbook.Worksheets("Distributions")
    With ws
        ' find column for Fund
        Set rngFund = .Range("1:1").Find(What:="Fund", MatchCase:=False)
        Set rngHoldingAccountCode = .Range("1:1").Find(What:="HoldingAccountCode", MatchCase:=False)
        Set rngSecurity = .Range("1:1").Find(What:="Security", MatchCase:=False)
        If Not rngFund Is Nothing Then
            lastRow = .Cells(.Rows.Count, rngFund.Column).End(xlUp).row
        End If
        
        With .Sort
            .SortFields.Clear
            ' Sort column with "Fund" title
            If Not rngSecurity Is Nothing Then
                .SortFields.Add Key:=rngSecurity, _
                SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            ' Sort column with "HoldingAccountcode" title
            If Not rngFund Is Nothing Then
                .SortFields.Add Key:=rngFund, _
                    SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            ' Sort column with "Security" title"
            If Not rngHoldingAccountCode Is Nothing Then
                .SortFields.Add Key:=rngHoldingAccountCode, _
                    SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            .SetRange ws.Cells
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End With
    
    ' turn oon calc
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Call toggleProtection
End Sub

Sub sortDistributionsByFund()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim rngFund, rngHoldingAccountCode, rngSecurity
    
    ' turn off calc
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    Call unprotectWorkbook
    
    Set ws = ThisWorkbook.Worksheets("Distributions")
    With ws
        ' find column for Fund
        Set rngFund = .Range("1:1").Find(What:="Fund", MatchCase:=False)
        Set rngHoldingAccountCode = .Range("1:1").Find(What:="HoldingAccountCode", MatchCase:=False)
        Set rngSecurity = .Range("1:1").Find(What:="Security", MatchCase:=False)
        If Not rngFund Is Nothing Then
            lastRow = .Cells(.Rows.Count, rngFund.Column).End(xlUp).row
        End If
        
        With .Sort
            .SortFields.Clear
            ' Sort column with "HoldingAccountcode" title
            If Not rngFund Is Nothing Then
                .SortFields.Add Key:=rngFund, _
                    SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            ' Sort column with "Security" title"
            If Not rngHoldingAccountCode Is Nothing Then
                .SortFields.Add Key:=rngHoldingAccountCode, _
                    SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            ' Sort column with "Fund" title
            If Not rngSecurity Is Nothing Then
                .SortFields.Add Key:=rngSecurity, _
                SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
            End If
            .SetRange ws.Cells
            .Header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End With
    
    ' turn oon calc
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Call toggleProtection
    
End Sub

Sub sortTaxStatements()

    ThisWorkbook.Worksheets("TaxTemplates").Sort.SortFields.Clear
    ThisWorkbook.Worksheets("TaxTemplates").Sort.SortFields.Add Key:=Range( _
        "C3:C500"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    ThisWorkbook.Worksheets("TaxTemplates").Sort.SortFields.Add Key:=Range( _
        "D3:D500"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortTextAsNumbers
    With ThisWorkbook.Worksheets("TaxTemplates").Sort
        .SetRange Range("B2:AG500")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Function CustomPropExist(CustomDocumentProperties, NameOfProp)
    Dim prop As DocumentProperty
    Dim ret As Boolean
    ret = False
    For Each prop In CustomDocumentProperties
        If LCase(prop.Name) = LCase(NameOfProp) Then
            ret = True
            Exit For
        End If
    Next
    CustomPropExist = ret
End Function


Sub toggleWriteTaxTemplate()
'
'   Enable Form buttons to save tax templates in local sheet
'   Enable show all templates button
'
    Dim toggleValue As String
    toggleValue = "False"
    If Utils.CustomPropExist(ThisWorkbook.CustomDocumentProperties, "toggleSaveTemplates") Then
        If IsEmpty(getVariable("togglesavetemplates")) Then
            ' default, toggle off
            Call setVariable("toggleSaveTemplates", toggleValue)
        End If
        toggleValue = CStr(Not getVariable("toggleSaveTemplates"))
        Call setVariable("toggleSaveTemplates", toggleValue)
    Else
        toggleValue = "True"
        Call setVariable("toggleSaveTemplates", toggleValue)
    End If
    
    If Not TaxStatementBulkEntry Is Nothing Then
        Unload TaxStatementBulkEntry
    End If
End Sub
Attribute VB_Name = "WebClient"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebClient v4.0.22
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' `WebClient` executes requests and handles response and is responsible for functionality shared between requests,
'  such as authentication, proxy configuration, and security.
'
' Usage:
'
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://www.example.com/api/"
'
' Dim Auth As New HttpBasicAuthenticator
' Auth.Setup Username, Password
' Set Client.Authenticator = Auth
'
' Dim Request As New WebRequest
' Dim Response As WebResponse
' ' Setup WebRequest...
'
' Set Response = Client.Execute(Request)
' ' -> Uses Http Basic authentication and appends Request.Resource to BaseUrl
' ```
'
' Errors:
' 11010 / 80042b02 / -2147210494 - cURL error in Execute
' 11011 / 80042b03 / -2147210493 - Error in Execute
' 11012 / 80042b04 / -2147210492 - Error preparing http request
' 11013 / 80042b05 / -2147210491 - Error preparing cURL request
'
' @class WebClient
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private Const web_DefaultTimeoutMs As Long = 5000

Private Const web_HttpRequest_SetCredentials_ForServer = 0
Private Const web_HttpRequest_SetCredentials_ForProxy = 1

Private Const web_HttpRequest_ProxySetting_Default = 0
Private Const web_HttpRequest_ProxySetting_PreConfig = 0
Private Const web_HttpRequest_ProxySetting_Direct = 1
Private Const web_HttpRequest_ProxySetting_Proxy = 2

Private Enum web_WinHttpRequestOption
    web_WinHttpRequestOption_UserAgentString = 0
    web_WinHttpRequestOption_URL = 1
    web_WinHttpRequestOption_URLCodePage = 2
    web_WinHttpRequestOption_EscapePercentInURL = 3
    web_WinHttpRequestOption_SslErrorIgnoreFlags = 4
    web_WinHttpRequestOption_SelectCertificate = 5
    web_WinHttpRequestOption_EnableRedirects = 6
    web_WinHttpRequestOption_UrlEscapeDisable = 7
    web_WinHttpRequestOption_UrlEscapeDisableQuery = 8
    web_WinHttpRequestOption_SecureProtocols = 9
    web_WinHttpRequestOption_EnableTracing = 10
    web_WinHttpRequestOption_RevertImpersonationOverSsl = 11
    web_WinHttpRequestOption_EnableHttpsToHttpRedirects = 12
    web_WinHttpRequestOption_EnablePassportAuthentication = 13
    web_WinHttpRequestOption_MaxAutomaticRedirects = 14
    web_WinHttpRequestOption_MaxResponseHeaderSize = 15
    web_WinHttpRequestOption_MaxResponseDrainSize = 16
    web_WinHttpRequestOption_EnableHttp1_1 = 17
    web_WinHttpRequestOption_EnableCertificateRevocationCheck = 18
End Enum

Private web_pProxyServer As String
Private web_pAutoProxyDomain As String

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Set the base url that is shared by all requests
' and that the request `Resource` is appended to.
'
' @example
' ```VB.net
' ' Desired URLs
' ' https://api.example.com/v1/messages
' ' https://api.example.com/v1/users/id
' '                BaseUrl <- ^ -> Resource
'
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages"
' Request.Resource = "users/{id}"
' ```
'
' @property BaseUrl
' @type String
''
Public BaseUrl As String

''
' Attach an authenticator to the client for authentication requests.
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Auth As New OAuth1Authenticator
' Auth.Setup ...
'
' Set Client.Authenticator = Auth
' ' -> All requests use Auth to add "Authorization" header
' ```
'
' @property Authenticator
' @type IWebAuthenticator
''
Public Authenticator As IWebAuthenticator

''
' Timeout (in milliseconds) to wait for timeout in each request phase
' (Resolve, Connect, Send, Receive).

'
' @property TimeoutMs
' @type Long
' @default 5000
''
Public TimeoutMs As Long

''
' Comma separated list of domains to bypass the proxy.
'
' @property ProxyBypassList
' @type String
''
Public ProxyBypassList As String

''
' Username for proxy.
'
' @property ProxyUsername
' @type String
''
Public ProxyUsername As String

''
' Password for proxy.
'
' @property ProxyPassword
' @type String
''
Public ProxyPassword As String

''
' Load proxy server and bypass list automatically (`False` by default).
'
' @property EnableAutoProxy
' @type Boolean
' @default False
''
Public EnableAutoProxy As Boolean

''
' Turn off SSL validation (`False` by default).
' Useful for self-signed certificates and should only be used with trusted servers.
'
' @property Insecure
' @type Boolean
' @default False
''
Public Insecure As Boolean

''
' Follow redirects (301, 302, 307) using Location header
'
' @property FollowRedirects
' @type Boolean
' @default True
''
Public FollowRedirects As Boolean

''
' Proxy server to pass requests through (except for those that match `ProxyBypassList`).
'
' @property ProxyServer
' @type String
''
Public Property Get ProxyServer() As String
    ProxyServer = web_pProxyServer
End Property
Public Property Let ProxyServer(Value As String)
    Me.EnableAutoProxy = False
    web_pProxyServer = Value
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Execute the given request
' (append the request's `FormattedResource` to the `BaseUrl`)
' and return the response.
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages/{id}"
' Request.AddUrlSegment "id", 123
'
' ' Add querystring, body, headers, cookies, etc. for request
'
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' ' -> GET https://api.example/com/v1/messages/123
' '    headers, cookies, and body...
' ```
'
' @method Execute
' @param {WebRequest} request The request to execute
' @return {WebResponse} Wrapper of server response for request
' @throws 11010 / 80042b02 / -2147210494 - cURL error in Execute
' @throws 11011 / 80042b03 / -2147210493 - Error in Execute
''
Public Function Execute(request As WebRequest) As WebResponse
    Dim web_Http As Object
    Dim web_Response As New WebResponse

    On Error GoTo web_ErrorHandling

#If Mac Then
    Dim web_Curl As String
    Dim web_Result As ShellResult

    web_Curl = Me.PrepareCurlRequest(request)
    web_Result = WebHelpers.ExecuteInShell(web_Curl)

    ' Handle cURL errors
    '
    ' Map to WinHttp error number, as possible
    ' https://msdn.microsoft.com/en-us/library/aa383770(VS.85).aspx
    If web_Result.ExitCode > 0 Then
        Dim web_ErrorNumber As Long
        Dim web_ErrorMessage As String
        Dim web_ErrorDetails As String
        web_ErrorNumber = web_Result.ExitCode / 256

        Select Case web_ErrorNumber
        Case 1
            ' 1 = CURLE_UNSUPPORTED_PROTOCOL
            ' 12006 = ERROR_WINHTTP_UNRECOGNIZED_SCHEME
            Err.Raise 12006 + &H30000 + vbObjectError, "The URL does not use a recognized protocol (1: CURLE_UNSUPPORTED_PROTOCOL)" & vbNewLine & _
                "URL: " & Me.GetFullUrl(request) & vbNewLine & _
                "Protocol: " & WebHelpers.GetUrlParts(Me.GetFullUrl(request))("Protocol")
        Case 3
            ' 3 = CURLE_URL_MALFORMAT
            ' 12005 = ERROR_WINHTTP_INVALID_URL
            Err.Raise 12005 + &H30000 + vbObjectError, "The URL is invalid (3: CURLE_URL_MALFORMAT)" & _
                "URL: " & Me.GetFullUrl(request)
        Case 5, 6
            ' 5 = CURLE_COULDNT_RESOLVE_PROXY
            ' 6 = CURLE_COULDNT_RESOLVE_HOST
            ' 12007 = ERROR_WINHTTP_NAME_NOT_RESOLVED
            If web_ErrorNumber = 5 Then
                web_ErrorDetails = "(5: CURLE_COULDNT_RESOLVE_PROXY)"
            Else
                web_ErrorDetails = "(6: CURLE_COULDNT_RESOLVE_HOST)"
            End If
            
            Err.Raise 12007 + &H30000 + vbObjectError, "WebClient.Execute", "The server name or address could not be resolved " & web_ErrorDetails
        Case 7
            ' 7 = CURLE_COULDNT_CONNECT
            ' 12029 = ERROR_WINHTTP_CANNOT_CONNECT
            Err.Raise 12029 + &H30000 + vbObjectError, "WebClient.Execute", "A connection with the server could not be established (7: CURLE_COULDNT_CONNECT)"
        Case 12, 28
            ' 12 = CURLE_FTP_ACCEPT_TIMEOUT
            ' 28 = CURLE_OPERATION_TIMEDOUT
            ' 12002 = ERROR_WINHTTP_TIMEOUT
            If web_ErrorNumber = 12 Then
                web_ErrorDetails = "(12: CURLE_FTP_ACCEPT_TIMEOUT)"
            Else
                web_ErrorDetails = "(28: CURLE_OPERATION_TIMEDOUT)"
            End If

            Err.Raise 12002 + &H30000 + vbObjectError, "WebClient.Execute", "The operation timed out " & web_ErrorDetails
        Case 47
            ' 47 = CURLE_TOO_MANY_REDIRECTS
            ' 12156 = ERROR_WINHTTP_REDIRECT_FAILED
            Err.Raise 12156 + &H30000 + vbObjectError, "WebClient.Execute", "Too many redirects (47: CURLE_TOO_MANY_REDIRECTS)"
        Case Else
            Err.Raise 11010 + vbObjectError, "WebClient.Execute", "An unknown cURL error occured, #" & web_ErrorNumber & vbNewLine & _
                "Find details at http://curl.haxx.se/libcurl/c/libcurl-errors.html"
        End Select
    End If

    web_Response.CreateFromCurl Me, request, web_Result.Output

#Else
    Set web_Http = Me.PrepareHttpRequest(request)

    web_Http.Send request.Body
    Do While Not web_Http.WaitForResponse(0.025)
        VBA.DoEvents
    Loop

    web_Response.CreateFromHttp Me, request, web_Http

#End If

    WebHelpers.LogResponse Me, request, web_Response

    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.AfterExecute Me, request, web_Response
    End If

    Set web_Http = Nothing
    Set Execute = web_Response
    Exit Function

web_ErrorHandling:

    Set web_Http = Nothing
    Dim web_ErrorDescription As String

    ' Check lower 16 bits from error
    ' (e.g. 80072EE2 -> 2EE2 -> 12002)
    Select Case Err.number And 65535
    Case 12002, 12007, 12029
        ' Treat timeout-related errors as 408: timeout, name not resolved, cannot connect
        web_Response.StatusCode = WebStatusCode.RequestTimeout
        web_Response.StatusDescription = "Request Timeout: " & Err.description

        WebHelpers.LogResponse Me, request, web_Response
        Set Execute = web_Response
        Err.Clear
    Case Else
        ' Error
        web_ErrorDescription = "An error occurred during execute" & vbNewLine & _
            Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

        WebHelpers.LogError web_ErrorDescription, "WebClient.Execute", 11011 + vbObjectError
        Err.Raise 11011 + vbObjectError, "WebClient.Execute", web_ErrorDescription
    End Select
End Function

''
' Get JSON from the given URL
' (with options for Headers, Cookies, QuerystringParams, and UrlSegments).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Url As String
' Url = "https://api.example.com/v1/messages/1"
'
' Dim Response As WebResponse
' Set Response = Client.GetJson(Url)
'
' Dim Headers As New Collection
' Headers.Add WebHelpers.CreateKeyValue("Authorization", "Bearer ...")
'
' Dim Options As New Dictionary
' Options.Add "Headers", Headers
'
' Set Response = Client.GetJson(Url, Options)
' ```
'
' @method GetJson
' @param {String} Url (appended to `BaseUrl`, if set)
' @param {Dictionary} [Options]
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
' @return {WebResponse} Response
''
Public Function GetJson(URL As String, Optional Options As Dictionary) As WebResponse
    Dim web_Request As New WebRequest
    web_Request.CreateFromOptions Options
    web_Request.Resource = URL
    web_Request.Format = WebFormat.Json
    web_Request.Method = WebMethod.HttpGet

    Set GetJson = Me.Execute(web_Request)
End Function

''
' Post JSON Body (`Array`, `Collection`, `Dictionary`) to the given URL
' (with options for Headers, Cookies, QuerystringParams, and UrlSegments).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Dim Url As String
' Url = "https://api.example.com/v1/messages/1"
'
' ' Body
' ' Array, Collection, or Dictionary
' Dim Body As New Dictionary
' Body.Add "message", "Howdy!"
'
' Dim Response As WebResponse
' Set Response = Client.PostJson(Url, Body)
'
' Dim Headers As New Collection
' Headers.Add WebHelpers.CreateKeyValue("Authorization", "Bearer ...")
'
' Dim Options As New Dictionary
' Options.Add "Headers", Headers
'
' Set Response = Client.PostJson(Url, Body, Options)
' ```
'
' @method PostJson
' @param {String} Url (appended to `BaseUrl`, if set)
' @param {Dictionary} Body
' @param {Dictionary} [Options]
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
' @return {WebResponse} Response
''
Public Function PostJson(URL As String, Body As Variant, Optional Options As Dictionary) As WebResponse
    Dim web_Request As New WebRequest
    web_Request.CreateFromOptions Options
    web_Request.Resource = URL
    web_Request.Format = WebFormat.Json
    web_Request.Method = WebMethod.HttpPost
    If VBA.IsObject(Body) Then
        Set web_Request.Body = Body
    Else
        web_Request.Body = Body
    End If

    Set PostJson = Me.Execute(web_Request)
End Function

''
' Set proxy for all requests
'
' @example
' ```VB.net
' Dim Client As New RestClient
'
' ' Just Server
' Client.SetProxy "proxy_server:80"
'
' ' Server + Username and Password
' Client.SetProxy "proxy_server:80", "Tim", "Password"
'
' ' Server + Username and Password + BypassList
' Client.SetProxy "proxy_server:80", "Tim", "Password", "<local>,*.bypass.com"
' ```
'
' @method SetProxy
' @param {String} ProxyServer Proxy server to pass requests through
' @param {String} [Username=""] Username for proxy
' @param {String} [Password=""] Password for proxy
' @param {String} [BypassList=""] Comma-separated list of servers that should bypass proxy
''
Public Sub SetProxy(ProxyServer As String, _
    Optional Username As String = "", Optional Password As String = "", Optional BypassList As String = "")

    Me.ProxyServer = ProxyServer
    Me.ProxyUsername = Username
    Me.ProxyPassword = Password
    Me.ProxyBypassList = BypassList
End Sub

''
' Get full url by joining given `WebRequest.FormattedResource` and `BaseUrl`.
'
' @method GetFullUrl
' @param {WebRequest} Request
' @return {String}
''
Public Function GetFullUrl(request As WebRequest) As String
    GetFullUrl = WebHelpers.JoinUrl(Me.BaseUrl, request.FormattedResource)
End Function

''
' Prepare Http request for given WebRequest
'
' @internal
' @method PrepareHttpRequest
' @param {WebRequest} Request
' @return {WinHttpRequest}
' @throws 11012 / 80042b04 / -2147210492 - Error preparing http request
''
Public Function PrepareHttpRequest(request As WebRequest, Optional Async As Boolean = True) As Object
    Dim web_Http As Object
    Dim web_KeyValue As Dictionary

    On Error GoTo web_ErrorHandling

    Set web_Http = CreateObject("WinHttp.WinHttpRequest.5.1")

    ' Prepare request (before open)
    web_BeforeExecute request

    ' Open http request
    web_Http.Open WebHelpers.MethodToName(request.Method), Me.GetFullUrl(request), Async

    ' Set timeouts
    web_Http.SetTimeouts Me.TimeoutMs, Me.TimeoutMs, Me.TimeoutMs, Me.TimeoutMs

    ' Load auto-proxy (if needed)
    If Me.EnableAutoProxy Then
        web_LoadAutoProxy request
    End If

    ' Setup proxy
    ' See http://msdn.microsoft.com/en-us/library/windows/desktop/aa384059(v=vs.85).aspx for details
    If Me.ProxyServer <> "" Then
        WebHelpers.LogDebug "SetProxy: " & Me.ProxyServer, "WebClient.PrepareHttpRequest"
        web_Http.SetProxy web_HttpRequest_ProxySetting_Proxy, Me.ProxyServer, Me.ProxyBypassList

        If Me.ProxyUsername <> "" Then
            WebHelpers.LogDebug "SetProxyCredentials: " & Me.ProxyUsername & ", " & WebHelpers.Obfuscate(Me.ProxyPassword), "WebClient.PrepareHttpRequest"
            web_Http.SetCredentials Me.ProxyUsername, Me.ProxyPassword, web_HttpRequest_SetCredentials_ForProxy
        End If
    Else
        ' Attempt to get proxy setup with Proxycfg.exe, otherwise direct
        web_Http.SetProxy web_HttpRequest_ProxySetting_PreConfig
    End If

    ' Setup security
    If Me.Insecure Then
        ' - Disable certifcate revocation check
        ' - Ignore all SSL errors
        '   Unknown certification authority (CA) or untrusted root, 0x0100
        '   Wrong usage, 0x0200
        '   Invalid common name (CN), 0x1000
        '   Invalid date or certificate expired, 0x2000
        '   = 0x3300 = 13056
        ' - Enable https-to-http redirects
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableCertificateRevocationCheck) = False
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_SslErrorIgnoreFlags) = 13056
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableHttpsToHttpRedirects) = True
    Else
        ' By default:
        ' - Enable certificate revocation check (especially useful after HeartBleed)
        ' - Ignore no SLL erros
        ' - Disable https-to-http redirects
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableCertificateRevocationCheck) = True
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_SslErrorIgnoreFlags) = 0
        web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableHttpsToHttpRedirects) = False
    End If

    ' Setup redirects
    web_Http.Option(web_WinHttpRequestOption.web_WinHttpRequestOption_EnableRedirects) = Me.FollowRedirects

    ' Set headers on http request (after open)
    For Each web_KeyValue In request.Headers
        web_Http.SetRequestHeader web_KeyValue("Key"), web_KeyValue("Value")
    Next web_KeyValue

    For Each web_KeyValue In request.Cookies
        web_Http.SetRequestHeader "Cookie", web_KeyValue("Key") & "=" & web_KeyValue("Value")
    Next web_KeyValue

    ' Give authenticator opportunity to update Http
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.PrepareHttp Me, request, web_Http
    End If

    ' Log request and return
    WebHelpers.LogRequest Me, request
    Set PrepareHttpRequest = web_Http
    Exit Function

web_ErrorHandling:

    Set web_Http = Nothing
    Err.Raise 11012 + vbObjectError, "WebClient.PrepareHttpRequest", _
        "An error occurred while preparing http request" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description
End Function

''
' Prepare cURL request for given WebRequest
'
' @internal
' @method PrepareCurlRequest
' @param {WebRequest} Request
' @return {String}
' @throws 11013 / 80042b05 / -2147210491 - Error preparing cURL request
''
Public Function PrepareCurlRequest(request As WebRequest) As String
    Dim web_Curl As String
    Dim web_KeyValue As Dictionary
    Dim web_CookieString As String

    On Error GoTo web_ErrorHandling

    web_Curl = "curl -i"

    ' Setup authenticator
    web_BeforeExecute request

    ' Set timeouts
    ' (max time = resolve + sent + receive)
    web_Curl = web_Curl & " --connect-timeout " & Me.TimeoutMs / 1000
    web_Curl = web_Curl & " --max-time " & 3 * Me.TimeoutMs / 1000

    ' Setup proxy
    If Me.ProxyServer <> "" Then
        web_Curl = web_Curl & " --proxy " & Me.ProxyServer

        If Me.ProxyBypassList <> "" Then
            web_Curl = web_Curl & " --noproxy " & Me.ProxyBypassList
        End If
        If Me.ProxyUsername <> "" Then
            web_Curl = web_Curl & " --proxy-user " & Me.ProxyUsername & ":" & Me.ProxyPassword
        End If
    End If

    ' Setup security
    If Me.Insecure Then
        web_Curl = web_Curl & " --insecure"
    End If

    ' Setup redirects
    If Me.FollowRedirects Then
        web_Curl = web_Curl & " --location"
    End If

    ' Set headers and cookies
    For Each web_KeyValue In request.Headers
        web_Curl = web_Curl & " -H '" & web_KeyValue("Key") & ": " & web_KeyValue("Value") & "'"
    Next web_KeyValue

    For Each web_KeyValue In request.Cookies
        web_CookieString = web_CookieString & web_KeyValue("Key") & "=" & web_KeyValue("Value") & ";"
    Next web_KeyValue
    If web_CookieString <> "" Then
        web_Curl = web_Curl & " --cookie '" & web_CookieString & "'"
    End If

    ' Add method, data, and url
    web_Curl = web_Curl & " -X " & WebHelpers.MethodToName(request.Method)
    web_Curl = web_Curl & " -d '" & request.Body & "'"
    web_Curl = web_Curl & " '" & Me.GetFullUrl(request) & "'"

    ' Give authenticator opportunity to update cURL
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.PrepareCurl Me, request, web_Curl
    End If

    ' Log request and return
    WebHelpers.LogRequest Me, request
    PrepareCurlRequest = web_Curl
    Exit Function

web_ErrorHandling:

    Err.Raise 11013 + vbObjectError, "WebClient.PrepareCURLRequest", _
        "An error occurred while preparing cURL request" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description
End Function

''
' Clone client
'
' @internal
' @method Clone
' @return {WebClient}
''
Public Function Clone() As WebClient
    Set Clone = New WebClient
    Clone.BaseUrl = Me.BaseUrl
    Clone.ProxyServer = Me.ProxyServer
    Clone.ProxyBypassList = Me.ProxyBypassList
    Clone.ProxyUsername = Me.ProxyUsername
    Clone.ProxyPassword = Me.ProxyPassword
    Clone.EnableAutoProxy = Me.EnableAutoProxy
    Clone.TimeoutMs = Me.TimeoutMs
    Clone.Insecure = Me.Insecure
    Set Clone.Authenticator = Me.Authenticator
End Function

' ============================================= '
' Private Methods
' ============================================= '

Private Sub web_BeforeExecute(web_Request As WebRequest)
    If Not Me.Authenticator Is Nothing Then
        Me.Authenticator.BeforeExecute Me, web_Request
    End If

    ' Preparing request includes adding headers
    ' -> Needs to happen after BeforeExecute in case headers were changed
    web_Request.Prepare
End Sub

Private Sub web_LoadAutoProxy(web_Request As WebRequest)
#If Win32 Or Win64 Then
    On Error GoTo web_ErrorHandling

    Dim web_Parts As Dictionary
    Dim web_Domain As String
    Dim web_ProxyServer As String
    Dim web_ProxyBypassList As String

    Set web_Parts = WebHelpers.GetUrlParts(Me.GetFullUrl(web_Request))
    web_Domain = VBA.IIf(web_Parts("Protocol") <> "", web_Parts("Protocol") & "://", "") & _
        web_Parts("Host") & ":" & web_Parts("Port")

    ' Cache auto-proxy by domain
    If web_Domain <> web_pAutoProxyDomain Then
        ' Cache first to store error as no proxy
        web_pAutoProxyDomain = web_Domain

        WebHelpers.GetAutoProxy web_Domain, web_ProxyServer, web_ProxyBypassList

        WebHelpers.LogDebug "Loaded auto-proxy for " & web_Domain & ":" & vbNewLine & _
            "Server = " & web_ProxyServer & vbNewLine & _
            "Bypass List = " & web_ProxyBypassList

        ' Store proxy server in underlying to avoid turning off auto-proxy
        web_pProxyServer = web_ProxyServer
        Me.ProxyBypassList = web_ProxyBypassList
    End If

    Exit Sub

web_ErrorHandling:

    WebHelpers.LogError "An error occurred while loading auto-proxy" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description, _
        "WebClient.LoadAutoProxy", Err.number
#End If
End Sub

Private Sub Class_Initialize()
    Me.TimeoutMs = web_DefaultTimeoutMs
    Me.EnableAutoProxy = False
    Me.Insecure = False
    Me.FollowRedirects = True
End Sub
Attribute VB_Name = "WebHelpers"
''
' WebHelpers v4.0.22
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Contains general-purpose helpers that are used throughout VBA-Web. Includes:
'
' - Logging
' - Converters and encoding
' - Url handling
' - Object/Dictionary/Collection/Array helpers
' - Request preparation / handling
' - Timing
' - Mac
' - Cryptography
' - Converters (JSON, XML, Url-Encoded)
'
' Errors:
' 11000 - Error during parsing
' 11001 - Error during conversion
' 11002 - No matching converter has been registered
' 11003 - Error while getting url parts
' 11099 - XML format is not currently supported
'
' @module WebHelpers
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' Contents:
' 1. Logging
' 2. Converters and encoding
' 3. Url handling
' 4. Object/Dictionary/Collection/Array helpers
' 5. Request preparation / handling
' 6. Timing
' 7. Mac
' 8. Cryptography
' 9. Converters
' VBA-JSON
' VBA-UTC
' AutoProxy
' --------------------------------------------- '

' Custom formatting uses the standard version of Application.Run,
' which is incompatible with some Office applications (e.g. Word 2011 for Mac)
'
' If you have compilation errors in ParseByFormat or ConvertToFormat,
' you can disable custom formatting by setting the following compiler flag to False
#Const EnableCustomFormatting = True

' === AutoProxy Headers
#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub AutoProxy_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (ByVal AutoProxy_lpDest As LongPtr, ByVal AutoProxy_lpSource As LongPtr, ByVal AutoProxy_cbCopy As Long)
Private Declare PtrSafe Function AutoProxy_SysAllocString Lib "oleaut32" Alias "SysAllocString" _
    (ByVal AutoProxy_pwsz As LongPtr) As LongPtr
Private Declare PtrSafe Function AutoProxy_GlobalFree Lib "kernel32" Alias "GlobalFree" _
    (ByVal AutoProxy_p As LongPtr) As LongPtr
Private Declare PtrSafe Function AutoProxy_GetIEProxy Lib "WinHTTP.dll" Alias "WinHttpGetIEProxyConfigForCurrentUser" _
    (ByRef AutoProxy_proxyConfig As AUTOPROXY_IE_PROXY_CONFIG) As Long
Private Declare PtrSafe Function AutoProxy_GetProxyForUrl Lib "WinHTTP.dll" Alias "WinHttpGetProxyForUrl" _
    (ByVal AutoProxy_hSession As LongPtr, ByVal AutoProxy_pszUrl As LongPtr, ByRef AutoProxy_pAutoProxyOptions As AUTOPROXY_OPTIONS, ByRef AutoProxy_pProxyInfo As AUTOPROXY_INFO) As Long
Private Declare PtrSafe Function AutoProxy_HttpOpen Lib "WinHTTP.dll" Alias "WinHttpOpen" _
    (ByVal AutoProxy_pszUserAgent As LongPtr, ByVal AutoProxy_dwAccessType As Long, ByVal AutoProxy_pszProxyName As LongPtr, ByVal AutoProxy_pszProxyBypass As LongPtr, ByVal AutoProxy_dwFlags As Long) As LongPtr
Private Declare PtrSafe Function AutoProxy_HttpClose Lib "WinHTTP.dll" Alias "WinHttpCloseHandle" _
    (ByVal AutoProxy_hInternet As LongPtr) As Long

Private Type AUTOPROXY_IE_PROXY_CONFIG
    AutoProxy_fAutoDetect As Long
    AutoProxy_lpszAutoConfigUrl As LongPtr
    AutoProxy_lpszProxy As LongPtr
    AutoProxy_lpszProxyBypass As LongPtr
End Type
Private Type AUTOPROXY_OPTIONS
    AutoProxy_dwFlags As Long
    AutoProxy_dwAutoDetectFlags As Long
    AutoProxy_lpszAutoConfigUrl As LongPtr
    AutoProxy_lpvReserved As LongPtr
    AutoProxy_dwReserved As Long
    AutoProxy_fAutoLogonIfChallenged As Long
End Type
Private Type AUTOPROXY_INFO
    AutoProxy_dwAccessType As Long
    AutoProxy_lpszProxy As LongPtr
    AutoProxy_lpszProxyBypass As LongPtr
End Type

#Else

Private Declare Sub AutoProxy_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (ByVal AutoProxy_lpDest As Long, ByVal AutoProxy_lpSource As Long, ByVal AutoProxy_cbCopy As Long)
Private Declare Function AutoProxy_SysAllocString Lib "oleaut32" Alias "SysAllocString" _
    (ByVal AutoProxy_pwsz As Long) As Long
Private Declare Function AutoProxy_GlobalFree Lib "kernel32" Alias "GlobalFree" _
    (ByVal AutoProxy_p As Long) As Long
Private Declare Function AutoProxy_GetIEProxy Lib "WinHTTP.dll" Alias "WinHttpGetIEProxyConfigForCurrentUser" _
    (ByRef AutoProxy_proxyConfig As AUTOPROXY_IE_PROXY_CONFIG) As Long
Private Declare Function AutoProxy_GetProxyForUrl Lib "WinHTTP.dll" Alias "WinHttpGetProxyForUrl" _
    (ByVal AutoProxy_hSession As Long, ByVal AutoProxy_pszUrl As Long, ByRef AutoProxy_pAutoProxyOptions As AUTOPROXY_OPTIONS, ByRef AutoProxy_pProxyInfo As AUTOPROXY_INFO) As Long
Private Declare Function AutoProxy_HttpOpen Lib "WinHTTP.dll" Alias "WinHttpOpen" _
    (ByVal AutoProxy_pszUserAgent As Long, ByVal AutoProxy_dwAccessType As Long, ByVal AutoProxy_pszProxyName As Long, ByVal AutoProxy_pszProxyBypass As Long, ByVal AutoProxy_dwFlags As Long) As Long
Private Declare Function AutoProxy_HttpClose Lib "WinHTTP.dll" Alias "WinHttpCloseHandle" _
    (ByVal AutoProxy_hInternet As Long) As Long

Private Type AUTOPROXY_IE_PROXY_CONFIG
    AutoProxy_fAutoDetect As Long
    AutoProxy_lpszAutoConfigUrl As Long
    AutoProxy_lpszProxy As Long
    AutoProxy_lpszProxyBypass As Long
End Type
Private Type AUTOPROXY_OPTIONS
    AutoProxy_dwFlags As Long
    AutoProxy_dwAutoDetectFlags As Long
    AutoProxy_lpszAutoConfigUrl As Long
    AutoProxy_lpvReserved As Long
    AutoProxy_dwReserved As Long
    AutoProxy_fAutoLogonIfChallenged As Long
End Type
Private Type AUTOPROXY_INFO
    AutoProxy_dwAccessType As Long
    AutoProxy_lpszProxy As Long
    AutoProxy_lpszProxyBypass As Long
End Type

#End If

#If Mac Then
#Else
' Constants for dwFlags of AUTOPROXY_OPTIONS
Const AUTOPROXY_AUTO_DETECT = 1
Const AUTOPROXY_CONFIG_URL = 2

' Constants for dwAutoDetectFlags
Const AUTOPROXY_DETECT_TYPE_DHCP = 1
Const AUTOPROXY_DETECT_TYPE_DNS = 2
#End If
' === End AutoProxy

' === VBA-JSON Headers
' === VBA-UTC Headers
#If Mac Then

Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#Else

Private Declare Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#End If

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options
' === End VBA-JSON

#If Mac Then
Private Declare Function web_popen Lib "libc.dylib" Alias "popen" (ByVal Command As String, ByVal mode As String) As Long
Private Declare Function web_pclose Lib "libc.dylib" Alias "pclose" (ByVal File As Long) As Long
Private Declare Function web_fread Lib "libc.dylib" Alias "fread" (ByVal outStr As String, ByVal size As Long, ByVal Items As Long, ByVal stream As Long) As Long
Private Declare Function web_feof Lib "libc.dylib" Alias "feof" (ByVal File As Long) As Long
#End If

Public Const WebUserAgent As String = "VBA-Web v4.0.22 (https://github.com/VBA-tools/VBA-Web)"

' @internal
Public Type ShellResult
    Output As String
    ExitCode As Long
End Type

Private web_pDocumentHelper As Object
Private web_pElHelper As Object
Private web_pConverters As Dictionary

' --------------------------------------------- '
' Types and Properties
' --------------------------------------------- '

''
' Helper for common http status codes. (Use underlying status code for any codes not listed)
'
' @example
' ```VB.net
' Dim Response As WebResponse
'
' If Response.StatusCode = WebStatusCode.Ok Then
'   ' Ok
' ElseIf Response.StatusCode = 418 Then
'   ' I'm a teapot
' End If
' ```
'
' @property WebStatusCode
' @param Ok `200`
' @param Created `201`
' @param NoContent `204`
' @param NotModified `304`
' @param BadRequest `400`
' @param Unauthorized `401`
' @param Forbidden `403`
' @param NotFound `404`
' @param RequestTimeout `408`
' @param UnsupportedMediaType `415`
' @param InternalServerError `500`
' @param BadGateway `502`
' @param ServiceUnavailable `503`
' @param GatewayTimeout `504`
''
Public Enum WebStatusCode
    OK = 200
    Created = 201
    NoContent = 204
    NotModified = 304
    BadRequest = 400
    Unauthorized = 401
    Forbidden = 403
    NotFound = 404
    RequestTimeout = 408
    UnsupportedMediaType = 415
    InternalServerError = 500
    BadGateway = 502
    ServiceUnavailable = 503
    GatewayTimeout = 504
End Enum

''
' @property WebMethod
' @param HttpGet
' @param HttpPost
' @param HttpGet
' @param HttpGet
' @param HttpGet
' @default HttpGet
''
Public Enum WebMethod
    HttpGet = 0
    HttpPost = 1
    HttpPut = 2
    HttpDelete = 3
    HttpPatch = 4
    HttpHead = 5
End Enum

''
' @property WebFormat
' @param PlainText
' @param Json
' @param FormUrlEncoded
' @param Xml
' @param Custom
' @default PlainText
''
Public Enum WebFormat
    PlainText = 0
    Json = 1
    FormUrlEncoded = 2
    XML = 3
    Custom = 9
End Enum

''
' Enable logging of requests and responses and other internal messages from VBA-Web.
' Should be the first step in debugging VBA-Web if something isn't working as expected.
' (Logs display in Immediate Window (`View > Immediate Window` or `ctrl+g`)
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/v1/"
'
' Dim RequestWithTypo As New WebRequest
' RequestWithTypo.Resource = "peeple/{id}"
' RequestWithType.AddUrlSegment "idd", 123
'
' ' Enable logging before the request is executed
' WebHelpers.EnableLogging = True
'
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' ' Immediate window:
' ' --> Request - (Time)
' ' GET https://api.example.com/v1/peeple/{id}
' ' Headers...
' '
' ' <-- Response - (Time)
' ' 404 ...
' ```
'
' @property EnableLogging
' @type Boolean
' @default False
''
Public EnableLogging As Boolean

''
' Store currently running async requests
'
' @property AsyncRequests
' @type Dictionary
''
Public AsyncRequests As Dictionary

' ============================================= '
' 1. Logging
' ============================================= '

''
' Log message (when logging is enabled with `EnableLogging`)
' with optional location where the message is coming from.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' LogDebug "Executing request..."
' ' -> VBA-Web: Executing request...
'
' LogDebug "Executing request...", "Module.Function"
' ' -> Module.Function: Executing request...
' ```
'
' @method LogDebug
' @param {String} Message
' @param {String} [From="VBA-Web"]
''
Public Sub LogDebug(Message As String, Optional From As String = "VBA-Web")
    If EnableLogging Then
        Debug.Print From & ": " & Message
    End If
End Sub

''
' Log warning (even when logging is disabled with `EnableLogging`)
' with optional location where the message is coming from.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' WebHelpers.LogWarning "Something could go wrong"
' ' -> WARNING - VBA-Web: Something could go wrong
'
' WebHelpers.LogWarning "Something could go wrong", "Module.Function"
' ' -> WARNING - Module.Function: Something could go wrong
' ```
'
' @method LogWarning
' @param {String} Message
' @param {String} [From="VBA-Web"]
''
Public Sub LogWarning(Message As String, Optional From As String = "VBA-Web")
    Debug.Print "WARNING - " & From & ": " & Message
End Sub

''
' Log error (even when logging is disabled with `EnableLogging`)
' with optional location where the message is coming from and error number.
' Useful when writing extensions to VBA-Web (like an `IWebAuthenticator`).
'
' @example
' ```VB.net
' WebHelpers.LogError "Something went wrong"
' ' -> ERROR - VBA-Web: Something went wrong
'
' WebHelpers.LogError "Something went wrong", "Module.Function"
' ' -> ERROR - Module.Function: Something went wrong
'
' WebHelpers.LogError "Something went wrong", "Module.Function", 100
' ' -> ERROR - Module.Function: 100, Something went wrong
' ```
'
' @method LogError
' @param {String} Message
' @param {String} [From="VBA-Web"]
' @param {Long} [ErrNumber=0]
''
Public Sub LogError(Message As String, Optional From As String = "VBA-Web", Optional ErrNumber As Long = 0)
    Dim web_ErrorValue As String
    If ErrNumber <> 0 Then
        web_ErrorValue = ErrNumber

        If ErrNumber < 0 Then
            web_ErrorValue = web_ErrorValue & " (" & (ErrNumber - vbObjectError) & " / " & VBA.LCase$(VBA.Hex$(ErrNumber)) & ")"
        End If

        web_ErrorValue = web_ErrorValue & ", "
    End If

    Debug.Print "ERROR - " & From & ": " & web_ErrorValue & Message
End Sub

''
' Log details of the request (Url, headers, cookies, body, etc.).
'
' @method LogRequest
' @param {WebClient} Client
' @param {WebRequest} Request
''
Public Sub LogRequest(client As WebClient, request As WebRequest)
    If EnableLogging Then
        Debug.Print "--> Request - " & Format(Now, "Long Time")
        Debug.Print MethodToName(request.Method) & " " & client.GetFullUrl(request)

        Dim web_KeyValue As Dictionary
        For Each web_KeyValue In request.Headers
            Debug.Print web_KeyValue("Key") & ": " & web_KeyValue("Value")
        Next web_KeyValue

        For Each web_KeyValue In request.Cookies
            Debug.Print "Cookie: " & web_KeyValue("Key") & "=" & web_KeyValue("Value")
        Next web_KeyValue

        If Not IsEmpty(request.Body) Then
            Debug.Print vbNewLine & CStr(request.Body)
        End If

        Debug.Print
    End If
End Sub

''
' Log details of the response (Status, headers, content, etc.).
'
' @method LogResponse
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {WebResponse} Response
''
Public Sub LogResponse(client As WebClient, request As WebRequest, response As WebResponse)
    If EnableLogging Then
        Dim web_KeyValue As Dictionary

        Debug.Print "<-- Response - " & Format(Now, "Long Time")
        Debug.Print response.StatusCode & " " & response.StatusDescription

        For Each web_KeyValue In response.Headers
            Debug.Print web_KeyValue("Key") & ": " & web_KeyValue("Value")
        Next web_KeyValue

        For Each web_KeyValue In response.Cookies
            Debug.Print "Cookie: " & web_KeyValue("Key") & "=" & web_KeyValue("Value")
        Next web_KeyValue

        Debug.Print vbNewLine & response.Content & vbNewLine
    End If
End Sub

''
' Obfuscate any secure information before logging.
'
' @example
' ```VB.net
' Dim Password As String
' Password = "Secret"
'
' WebHelpers.LogDebug "Password = " & WebHelpers.Obfuscate(Password)
' -> Password = ******
' ```
'
' @param {String} Secure Message to obfuscate
' @param {String} [Character = *] Character to obfuscate with
' @return {String}
''
Public Function Obfuscate(Secure As String, Optional Character As String = "*") As String
    Obfuscate = VBA.String$(VBA.Len(Secure), Character)
End Function

' ============================================= '
' 2. Converters and encoding
' ============================================= '

'
' Parse JSON value to `Dictionary` if it's an object or `Collection` if it's an array.
'
' @method ParseJson
' @param {String} Json JSON value to parse
' @return {Dictionary|Collection}
'
' (Implemented in VBA-JSON embedded below)

'
' Convert `Dictionary`, `Collection`, or `Array` to JSON string.
'
' @method ConvertToJson
' @param {Dictionary|Collection|Array} Obj
' @return {String}
'
' (Implemented in VBA-JSON embedded below)

''
' Parse Url-Encoded value to `Dictionary`.
'
' @method ParseUrlEncoded
' @param {String} UrlEncoded Url-Encoded value to parse
' @return {Dictionary} Parsed
''
Public Function ParseUrlEncoded(Encoded As String) As Dictionary
    Dim web_Items As Variant
    Dim web_i As Integer
    Dim web_Parts As Variant
    Dim web_Key As String
    Dim web_Value As Variant
    Dim web_Parsed As New Dictionary

    web_Items = VBA.Split(Encoded, "&")
    For web_i = LBound(web_Items) To UBound(web_Items)
        web_Parts = VBA.Split(web_Items(web_i), "=")

        If UBound(web_Parts) - LBound(web_Parts) >= 1 Then
            ' TODO: Handle numbers, arrays, and object better here
            web_Key = UrlDecode(VBA.CStr(web_Parts(LBound(web_Parts))))
            web_Value = UrlDecode(VBA.CStr(web_Parts(LBound(web_Parts) + 1)))

            web_Parsed(web_Key) = web_Value
        End If
    Next web_i

    Set ParseUrlEncoded = web_Parsed
End Function

''
' Convert `Dictionary`/`Collection` to Url-Encoded string.
'
' @method ConvertToUrlEncoded
' @param {Dictionary|Collection|Variant} Obj Value to convert to Url-Encoded string
' @return {String} UrlEncoded string (e.g. a=123&b=456&...)
''
Public Function ConvertToUrlEncoded(obj As Variant) As String
    Dim web_Encoded As String

    If TypeOf obj Is Collection Then
        Dim web_KeyValue As Dictionary

        For Each web_KeyValue In obj
            If VBA.Len(web_Encoded) > 0 Then: web_Encoded = web_Encoded & "&"
            web_Encoded = web_Encoded & web_GetUrlEncodedKeyValue(web_KeyValue("Key"), web_KeyValue("Value"))
        Next web_KeyValue
    Else
        Dim web_Key As Variant

        For Each web_Key In obj.Keys()
            If Len(web_Encoded) > 0 Then: web_Encoded = web_Encoded & "&"
            web_Encoded = web_Encoded & web_GetUrlEncodedKeyValue(web_Key, obj(web_Key))
        Next web_Key
    End If

    ConvertToUrlEncoded = web_Encoded
End Function

''
' Parse XML value to `Dictionary`.
'
' _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
' An updated parser is being created that supports Mac and Windows,
' but in order to avoid future breaking changes, ParseXml and ConvertToXml are not currently implemented.
'
' See https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0 for details on how to use XML in Windows in the meantime.
'
' @param {String} Encoded XML value to parse
' @return {Dictionary|Object} Parsed
' @throws 11099 - XML format is not currently supported
''
Public Function ParseXml(Encoded As String) As Object
    Dim web_ErrorMsg As String

    web_ErrorMsg = "XML is not currently supported (An updated parser is being created that supports Mac and Windows)." & vbNewLine & _
        "To use XML parsing for Windows currently, use the instructions found here:" & vbNewLine & _
        vbNewLine & _
        "https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0"

    LogError web_ErrorMsg, "WebHelpers.ParseXml", 11099
    Err.Raise 11099, "WebHeleprs.ParseXml", web_ErrorMsg
End Function

''
' Convert `Dictionary` to XML string.
'
' _Note_ Currently, XML is not supported in 4.0.0 due to lack of Mac support.
' An updated parser is being created that supports Mac and Windows,
' but in order to avoid future breaking changes, ParseXml and ConvertToXml are not currently implemented.
'
' See https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0 for details on how to use XML in Windows in the meantime.
'
' @param {Dictionary|Variant} XML
' @return {String} XML string
' @throws 11099 / 80042b5b / -2147210405 - XML format is not currently supported
''
Public Function ConvertToXml(obj As Variant) As String
    Dim web_ErrorMsg As String

    web_ErrorMsg = "XML is not currently supported (An updated parser is being created that supports Mac and Windows)." & vbNewLine & _
        "To use XML parsing for Windows currently, use the instructions found here:" & vbNewLine & _
        vbNewLine & _
        "https://github.com/VBA-tools/VBA-Web/wiki/XML-Support-in-4.0"

    LogError web_ErrorMsg, "WebHelpers.ParseXml", 11099 + vbObjectError
    Err.Raise 11099 + vbObjectError, "WebHeleprs.ParseXml", web_ErrorMsg
End Function

''
' Helper for parsing value to given `WebFormat` or custom format.
' Returns `Dictionary` or `Collection` based on given `Value`.
'
' @method ParseByFormat
' @param {String} Value Value to parse
' @param {WebFormat} Format
' @param {String} [CustomFormat=""] Name of registered custom converter
' @param {Variant} [Bytes] Bytes for custom convert (if `ParseType = "Binary"`)
' @return {Dictionary|Collection|Object}
' @throws 11000 - Error during parsing
''
Public Function ParseByFormat(Value As String, Format As WebFormat, _
    Optional CustomFormat As String = "", Optional Bytes As Variant) As Object

    On Error GoTo web_ErrorHandling

    ' Don't attempt to parse blank values
    If Value = "" And CustomFormat = "" Then
        Exit Function
    End If

    Select Case Format
    Case WebFormat.Json
        Set ParseByFormat = ParseJson(Value)
    Case WebFormat.FormUrlEncoded
        Set ParseByFormat = ParseUrlEncoded(Value)
    Case WebFormat.XML
        Set ParseByFormat = ParseXml(Value)
    Case WebFormat.Custom
#If EnableCustomFormatting Then
        Dim web_Converter As Dictionary
        Dim web_Callback As String

        Set web_Converter = web_GetConverter(CustomFormat)
        web_Callback = web_Converter("ParseCallback")

        If web_Converter.Exists("Instance") Then
            Dim web_Instance As Object
            Set web_Instance = web_Converter("Instance")

            If web_Converter("ParseType") = "Binary" Then
                Set ParseByFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, Bytes)
            Else
                Set ParseByFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, Value)
            End If
        Else
            If web_Converter("ParseType") = "Binary" Then
                Set ParseByFormat = Application.Run(web_Callback, Bytes)
            Else
                Set ParseByFormat = Application.Run(web_Callback, Value)
            End If
        End If
#Else
    LogWarning "Custom formatting is disabled. To use WebFormat.Custom, enable custom formatting with the EnableCustomFormatting flag in WebHelpers"
#End If
    End Select
    Exit Function

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred during parsing" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    LogError web_ErrorDescription, "WebHelpers.ParseByFormat", 11000
    Err.Raise 11000, "WebHelpers.ParseByFormat", web_ErrorDescription
End Function

''
' Helper for converting value to given `WebFormat` or custom format.
'
' _Note_ Only some converters handle `Collection` or `Array`.
'
' @method ConvertToFormat
' @param {Dictionary|Collection|Variant} Obj
' @param {WebFormat} Format
' @param {String} [CustomFormat] Name of registered custom converter
' @return {Variant}
' @throws 11001 - Error during conversion
''
Public Function ConvertToFormat(obj As Variant, Format As WebFormat, Optional CustomFormat As String = "") As Variant
    On Error GoTo web_ErrorHandling

    Select Case Format
    Case WebFormat.Json
        ConvertToFormat = ConvertToJson(obj)
    Case WebFormat.FormUrlEncoded
        ConvertToFormat = ConvertToUrlEncoded(obj)
    Case WebFormat.XML
        ConvertToFormat = ConvertToXml(obj)
    Case WebFormat.Custom
#If EnableCustomFormatting Then
        Dim web_Converter As Dictionary
        Dim web_Callback As String

        Set web_Converter = web_GetConverter(CustomFormat)
        web_Callback = web_Converter("ConvertCallback")

        If web_Converter.Exists("Instance") Then
            Dim web_Instance As Object
            Set web_Instance = web_Converter("Instance")
            ConvertToFormat = VBA.CallByName(web_Instance, web_Callback, VBA.vbMethod, obj)
        Else
            ConvertToFormat = Application.Run(web_Callback, obj)
        End If
#Else
    LogWarning "Custom formatting is disabled. To use WebFormat.Custom, enable custom formatting with the EnableCustomFormatting flag in WebHelpers"
#End If
    Case Else
        If VBA.VarType(obj) = vbString Then
            ' Plain text
            ConvertToFormat = obj
        End If
    End Select
    Exit Function

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred during conversion" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    LogError web_ErrorDescription, "WebHelpers.ConvertToFormat", 11001
    Err.Raise 11001, "WebHelpers.ConvertToFormat", web_ErrorDescription
End Function

''
' Encode string for URLs
' Reference:
' - http://www.blooberry.com/indexdot/html/topics/urlencoding.htm
' - https://www.ietf.org/rfc/rfc1738.txt
'
' From RFC 1738:
' > Thus, only alphanumerics, the special characters "$-_.+!*'(),", and
' reserved characters used for their reserved purposes may be used
' unencoded within a URL.
'
' @method UrlEncode
' @param {Variant} Text Text to encode
' @param {Boolean} [SpaceAsPlus = False] `%20` if `False` / `+` if `True`
' @param {Boolean} [EncodeUnsafe = True] Encode characters that could be misunderstood within URLs.
'   (``SPACE, ", <, >, #, %, {, }, |, \, ^, ~, `, [, ]``)
' @return {String} Encoded string
''
Public Function UrlEncode(Text As Variant, Optional SpaceAsPlus As Boolean = False, Optional EncodeUnsafe As Boolean = True) As String
    Dim web_UrlVal As String
    Dim web_StringLen As Long

    web_UrlVal = VBA.CStr(Text)
    web_StringLen = VBA.Len(web_UrlVal)

    If web_StringLen > 0 Then
        Dim web_Result() As String
        Dim web_i As Long
        Dim web_CharCode As Integer
        Dim web_Char As String
        Dim web_Space As String
        ReDim web_Result(web_StringLen)

        ' Set space value
        If SpaceAsPlus Then
            web_Space = "+"
        Else
            web_Space = "%20"
        End If

        ' Loop through string characters
        For web_i = 1 To web_StringLen
            ' Get character and ascii code
            web_Char = VBA.Mid$(web_UrlVal, web_i, 1)
            web_CharCode = VBA.Asc(web_Char)

            Select Case web_CharCode
                Case 33, 36, 39, 40, 41, 42, 44, 45, 46, 48 To 57, 65 To 90, 95, 97 To 122
                    ' Unencoded:
                    ' alphanumeric - 48-57, 65-90, 97-122
                    ' $-_.!*'(), - 33, 36, 39, 40, 41, 42, 43, 44, 45, 46, 95
                    web_Result(web_i) = web_Char
                Case 34, 35, 37, 60, 62, 91 To 94, 96, 123 To 126
                    ' Unsafe characters: <>"#%{}|\^~[]`
                    If EncodeUnsafe Then
                        web_Result(web_i) = "%" & VBA.Hex(web_CharCode)
                    Else
                        web_Result(web_i) = web_Char
                    End If
                Case 32
                    If EncodeUnsafe Then
                        web_Result(web_i) = web_Space
                    Else
                        web_Result(web_i) = web_Char
                    End If
                Case 43
                    ' + is considered safe special character
                    ' but in space-as-plus cases, it's encoded to differentiate with space
                    If EncodeUnsafe And SpaceAsPlus Then
                        web_Result(web_i) = "%" & VBA.Hex(web_CharCode)
                    Else
                        web_Result(web_i) = web_Char
                    End If
                Case 0 To 15
                    web_Result(web_i) = "%0" & VBA.Hex(web_CharCode)
                Case Else
                    web_Result(web_i) = "%" & VBA.Hex(web_CharCode)
            End Select
        Next web_i
        UrlEncode = VBA.Join$(web_Result, "")
    End If
End Function

''
' Decode Url-encoded string.
'
' @method UrlDecode
' @param {String} Encoded Text to decode
' @param {Boolean} [PlusAsSpace = True] Decode plus as space
'   DEPRECATED: Default = True to align with existing behavior, will be changed to False in v5
' @return {String} Decoded string
''
Public Function UrlDecode(Encoded As String, Optional PlusAsSpace As Boolean = True) As String
    Dim web_StringLen As Long
    web_StringLen = VBA.Len(Encoded)

    If web_StringLen > 0 Then
        Dim web_i As Long
        Dim web_Result As String
        Dim web_Temp As String

        For web_i = 1 To web_StringLen
            web_Temp = VBA.Mid$(Encoded, web_i, 1)

            If web_Temp = "+" And PlusAsSpace Then
                web_Temp = " "
            ElseIf web_Temp = "%" And web_StringLen >= web_i + 2 Then
                web_Temp = VBA.Mid$(Encoded, web_i + 1, 2)
                web_Temp = VBA.Chr(VBA.CInt("&H" & web_Temp))

                web_i = web_i + 2
            End If

            web_Result = web_Result & web_Temp
        Next web_i

        UrlDecode = web_Result
    End If
End Function

''
' Base64-encode text.
'
' @param {Variant} Text Text to encode
' @return {String} Encoded string
''
Public Function Base64Encode(Text As String) As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl base64"
    Base64Encode = ExecuteInShell(web_Command).Output
#Else
    Dim web_Bytes() As Byte

    web_Bytes = VBA.StrConv(Text, vbFromUnicode)
    Base64Encode = web_AnsiBytesToBase64(web_Bytes)
#End If

    Base64Encode = VBA.Replace$(Base64Encode, vbLf, "")
End Function

''
' Decode Base64-encoded text
'
' @param {Variant} Encoded Text to decode
' @return {String} Decoded string
''
Public Function Base64Decode(Encoded As Variant) As String
    ' Add trailing padding, if necessary
    If (VBA.Len(Encoded) Mod 4 > 0) Then
        Encoded = Encoded & VBA.Left("====", 4 - (VBA.Len(Encoded) Mod 4))
    End If

#If Mac Then
    Dim web_Command As String
    web_Command = "echo " & PrepareTextForShell(Encoded) & " | openssl base64 -d"
    Base64Decode = ExecuteInShell(web_Command).Output
#Else
    Dim web_XmlObj As Object
    Dim web_Node As Object

    Set web_XmlObj = CreateObject("MSXML2.DOMDocument")
    Set web_Node = web_XmlObj.createElement("b64")

    web_Node.dataType = "bin.base64"
    web_Node.Text = Encoded
    Base64Decode = VBA.StrConv(web_Node.nodeTypedValue, vbUnicode)

    Set web_Node = Nothing
    Set web_XmlObj = Nothing
#End If
End Function

''
' Register custom converter for converting request `Body` and response `Content`.
' If the `ConvertCallback` or `ParseCallback` are object methods,
' pass in an object instance.
' If the `ParseCallback` needs the raw binary response value (e.g. file download),
' set `ParseType = "Binary"`, otherwise `"String"` is used.
'
' - `ConvertCallback` signature: `Function ...(Value As Variant) As String`
' - `ParseCallback` signature: `Function ...(Value As String) As Object`
'
' @example
' ```VB.net
' ' 1. Use global module functions for Convert and Parse
' ' ---
' ' Module: CSVConverter
' Function ParseCSV(Value As String) As Object
'   ' ...
' End Function
' Function ConvertToCSV(Value As Variant) As String
'   ' ...
' End Function
'
' WebHelpers.RegisterConverter "csv", "text/csv", _
'   "CSVConverter.ConvertToCSV", "CSVConverter.ParseCSV"
'
' ' 2. Use object instance functions for Convert and Parse
' ' ---
' ' Object: CSVConverterClass
' ' same as above...
'
' Dim Converter As New CSVConverterClass
' WebHelpers.RegisterConverter "csv", "text/csv", _
'   "ConvertToCSV", "ParseCSV", Instance:=Converter
'
' ' 3. Pass raw binary value to ParseCallback
' ' ---
' ' Module: ImageConverter
' Function ParseImage(Bytes As Variant) As Object
'   ' ...
' End Function
' Function ConvertToImage(Value As Variant) As String
'   ' ...
' End Function
'
' WebHelpers.RegisterConverter "image", "image/jpeg", _
'   "ImageConverter.ConvertToImage", "ImageConverter.ParseImage", _
'   ParseType:="Binary"
' ```
'
' @method RegisterConverter
' @param {String} Name
'   Name of converter for use with `CustomRequestFormat` or `CustomResponseFormat`
' @param {String} MediaType
'   Media type to use for `Content-Type` and `Accept` headers
' @param {String} ConvertCallback Global or object function name for converting
' @param {String} ParseCallback Global or object function name for parsing
' @param {Object} [Instance]
'   Use instance methods for `ConvertCallback` and `ParseCallback`
' @param {String} [ParseType="String"]
'   "String"` (default) or `"Binary"` to pass raw binary response to `ParseCallback`
''
Public Sub RegisterConverter( _
    Name As String, MediaType As String, ConvertCallback As String, ParseCallback As String, _
    Optional Instance As Object, Optional ParseType As String = "String")

    Dim web_Converter As New Dictionary
    web_Converter("MediaType") = MediaType
    web_Converter("ConvertCallback") = ConvertCallback
    web_Converter("ParseCallback") = ParseCallback
    web_Converter("ParseType") = ParseType

    If Not Instance Is Nothing Then
        Set web_Converter("Instance") = Instance
    End If

    If web_pConverters Is Nothing Then: Set web_pConverters = New Dictionary
    Set web_pConverters(Name) = web_Converter
End Sub

' Helper for getting custom converter
' @throws 11002 - No matching converter has been registered
Private Function web_GetConverter(web_CustomFormat As String) As Dictionary
    If web_pConverters.Exists(web_CustomFormat) Then
        Set web_GetConverter = web_pConverters(web_CustomFormat)
    Else
        LogError "No matching converter has been registered for custom format: " & web_CustomFormat, _
            "WebHelpers.web_GetConverter", 11002
        Err.Raise 11002, "WebHelpers.web_GetConverter", _
            "No matching converter has been registered for custom format: " & web_CustomFormat
    End If
End Function

' ============================================= '
' 3. Url handling
' ============================================= '

''
' Join Url with /
'
' @example
' ```VB.net
' Debug.Print WebHelpers.JoinUrl("a/", "/b")
' Debug.Print WebHelpers.JoinUrl("a", "b")
' Debug.Print WebHelpers.JoinUrl("a/", "b")
' Debug.Print WebHelpers.JoinUrl("a", "/b")
' -> a/b
' ```
'
' @param {String} LeftSide
' @param {String} RightSide
' @return {String} Joined url
''
Public Function JoinUrl(LeftSide As String, RightSide As String) As String
    If Left(RightSide, 1) = "/" Then
        RightSide = Right(RightSide, Len(RightSide) - 1)
    End If
    If Right(LeftSide, 1) = "/" Then
        LeftSide = Left(LeftSide, Len(LeftSide) - 1)
    End If

    If LeftSide <> "" And RightSide <> "" Then
        JoinUrl = LeftSide & "/" & RightSide
    Else
        JoinUrl = LeftSide & RightSide
    End If
End Function

''
' Get relevant parts of the given url.
' Returns `Protocol`, `Host`, `Port`, `Path`, `Querystring`, and `Hash`
'
' @example
' ```VB.net
' WebHelpers.GetUrlParts "https://www.google.com/a/b/c.html?a=1&b=2#hash"
' ' -> Protocol = "https"
' '    Host = "www.google.com"
' '    Port = "443"
' '    Path = "/a/b/c.html"
' '    Querystring = "a=1&b=2"
' '    Hash = "hash"
'
' WebHelpers.GetUrlParts "localhost:3000/a/b/c"
' ' -> Protocol = ""
' '    Host = "localhost"
' '    Port = "3000"
' '    Path = "/a/b/c"
' '    Querystring = ""
' '    Hash = ""
' ```
'
' @method GetUrlParts
' @param {String} Url
' @return {Dictionary} Parts of url
'   Protocol, Host, Port, Path, Querystring, Hash
' @throws 11003 - Error while getting url parts
''
Public Function GetUrlParts(URL As String) As Dictionary
    Dim web_Parts As New Dictionary

    On Error GoTo web_ErrorHandling

#If Mac Then
    ' Run perl script to parse url

    Dim web_AddedProtocol As Boolean
    Dim web_Command As String
    Dim web_Results As Variant
    Dim web_ResultPart As Variant
    Dim web_EqualsIndex As Long
    Dim web_Key As String
    Dim web_Value As String

    ' Add Protocol if missing
    If InStr(1, URL, "://") <= 0 Then
        web_AddedProtocol = True
        If InStr(1, URL, "//") = 1 Then
            URL = "http" & URL
        Else
            URL = "http://" & URL
        End If
    End If

    web_Command = "perl -e '{use URI::URL;" & vbNewLine & _
        "$url = new URI::URL """ & URL & """;" & vbNewLine & _
        "print ""Protocol="" . $url->scheme;" & vbNewLine & _
        "print "" | Host="" . $url->host;" & vbNewLine & _
        "print "" | Port="" . $url->port;" & vbNewLine & _
        "print "" | FullPath="" . $url->full_path;" & vbNewLine & _
        "print "" | Hash="" . $url->frag;" & vbNewLine & _
    "}'"

    web_Results = Split(ExecuteInShell(web_Command).Output, " | ")
    For Each web_ResultPart In web_Results
        web_EqualsIndex = InStr(1, web_ResultPart, "=")
        web_Key = Trim(VBA.Mid$(web_ResultPart, 1, web_EqualsIndex - 1))
        web_Value = Trim(VBA.Mid$(web_ResultPart, web_EqualsIndex + 1))

        If web_Key = "FullPath" Then
            ' For properly escaped path and querystring, need to use full_path
            ' But, need to split FullPath into Path...?Querystring
            Dim QueryIndex As Integer

            QueryIndex = InStr(1, web_Value, "?")
            If QueryIndex > 0 Then
                web_Parts.Add "Path", Mid$(web_Value, 1, QueryIndex - 1)
                web_Parts.Add "Querystring", Mid$(web_Value, QueryIndex + 1)
            Else
                web_Parts.Add "Path", web_Value
                web_Parts.Add "Querystring", ""
            End If
        Else
            web_Parts.Add web_Key, web_Value
        End If
    Next web_ResultPart

    If web_AddedProtocol And web_Parts.Exists("Protocol") Then
        web_Parts("Protocol") = ""
    End If
#Else
    ' Create document/element is expensive, cache after creation
    If web_pDocumentHelper Is Nothing Or web_pElHelper Is Nothing Then
        Set web_pDocumentHelper = CreateObject("htmlfile")
        Set web_pElHelper = web_pDocumentHelper.createElement("a")
    End If

    web_pElHelper.href = URL
    web_Parts.Add "Protocol", Replace(web_pElHelper.Protocol, ":", "", Count:=1)
    web_Parts.Add "Host", web_pElHelper.hostname
    web_Parts.Add "Port", web_pElHelper.port
    web_Parts.Add "Path", web_pElHelper.pathname
    web_Parts.Add "Querystring", Replace(web_pElHelper.Search, "?", "", Count:=1)
    web_Parts.Add "Hash", Replace(web_pElHelper.Hash, "#", "", Count:=1)
#End If

    If web_Parts("Protocol") = "localhost" Then
        ' localhost:port/... was passed in without protocol
        Dim PathParts As Variant
        PathParts = Split(web_Parts("Path"), "/")

        web_Parts("Port") = PathParts(0)
        web_Parts("Protocol") = ""
        web_Parts("Host") = "localhost"
        web_Parts("Path") = Replace(web_Parts("Path"), web_Parts("Port"), "", Count:=1)
    End If
    If Left(web_Parts("Path"), 1) <> "/" Then
        web_Parts("Path") = "/" & web_Parts("Path")
    End If

    Set GetUrlParts = web_Parts
    Exit Function

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while getting url parts" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    LogError web_ErrorDescription, "WebHelpers.GetUrlParts", 11003
    Err.Raise 11003, "WebHelpers.GetUrlParts", web_ErrorDescription
End Function

' ============================================= '
' 4. Object/Dictionary/Collection/Array helpers
' ============================================= '

''
' Create a cloned copy of the `Dictionary`.
' This is not a deep copy, so children objects are copied by reference.
'
' @method CloneDictionary
' @param {Dictionary} Original
' @return {Dictionary} Clone
''
Public Function CloneDictionary(Original As Dictionary) As Dictionary
    Dim web_Key As Variant

    Set CloneDictionary = New Dictionary
    For Each web_Key In Original.Keys
        CloneDictionary.Add VBA.CStr(web_Key), Original(web_Key)
    Next web_Key
End Function

''
' Create a cloned copy of the `Collection`.
' This is not a deep copy, so children objects are copied by reference.
'
' _Note_ Keys are not transferred to clone
'
' @method CloneCollection
' @param {Collection} Original
' @return {Collection} Clone
''
Public Function CloneCollection(Original As Collection) As Collection
    Dim web_Item As Variant

    Set CloneCollection = New Collection
    For Each web_Item In Original
        CloneCollection.Add web_Item
    Next web_Item
End Function

''
' Helper for creating `Key-Value` pair with `Dictionary`.
' Used in `WebRequest`/`WebResponse` `Cookies`, `Headers`, and `QuerystringParams`
'
' @example
' ```VB.net
' WebHelpers.CreateKeyValue "abc", 123
' ' -> {"Key": "abc", "Value": 123}
' ```
'
' @method CreateKeyValue
' @param {String} Key
' @param {Variant} Value
' @return {Dictionary}
''
Public Function CreateKeyValue(Key As String, Value As Variant) As Dictionary
    Dim web_KeyValue As New Dictionary

    web_KeyValue("Key") = Key
    web_KeyValue("Value") = Value
    Set CreateKeyValue = web_KeyValue
End Function

''
' Search a `Collection` of `KeyValue` and retrieve the value for the given key.
'
' @example
' ```VB.net
' Dim KeyValues As New Collection
' KeyValues.Add WebHelpers.CreateKeyValue("abc", 123)
'
' WebHelpers.FindInKeyValues KeyValues, "abc"
' ' -> 123
'
' WebHelpers.FindInKeyValues KeyValues, "unknown"
' ' -> Empty
' ```
'
' @method FindInKeyValues
' @param {Collection} KeyValues
' @param {Variant} Key to find
' @return {Variant}
''
Public Function FindInKeyValues(KeyValues As Collection, Key As Variant) As Variant
    Dim web_KeyValue As Dictionary

    For Each web_KeyValue In KeyValues
        If web_KeyValue("Key") = Key Then
            FindInKeyValues = web_KeyValue("Value")
            Exit Function
        End If
    Next web_KeyValue
End Function

''
' Helper for adding/replacing `KeyValue` in `Collection` of `KeyValue`
' - Add if key not found
' - Replace if key is found
'
' @example
' ```VB.net
' Dim KeyValues As New Collection
' KeyValues.Add WebHelpers.CreateKeyValue("a", 123)
' KeyValues.Add WebHelpers.CreateKeyValue("b", 456)
' KeyValues.Add WebHelpers.CreateKeyValue("c", 789)
'
' WebHelpers.AddOrReplaceInKeyValues KeyValues, "b", "abc"
' WebHelpers.AddOrReplaceInKeyValues KeyValues, "d", "def"
'
' ' -> [
' '      {"Key":"a","Value":123},
' '      {"Key":"b","Value":"abc"},
' '      {"Key":"c","Value":789},
' '      {"Key":"d","Value":"def"}
' '    ]
' ```
'
' @method AddOrReplaceInKeyValues
' @param {Collection} KeyValues
' @param {Variant} Key
' @param {Variant} Value
' @return {Variant}
''
Public Sub AddOrReplaceInKeyValues(KeyValues As Collection, Key As Variant, Value As Variant)
    Dim web_KeyValue As Dictionary
    Dim web_Index As Long
    Dim web_NewKeyValue As Dictionary

    Set web_NewKeyValue = CreateKeyValue(CStr(Key), Value)

    web_Index = 1
    For Each web_KeyValue In KeyValues
        If web_KeyValue("Key") = Key Then
            ' Replace existing
            KeyValues.Remove web_Index

            If KeyValues.Count = 0 Then
                KeyValues.Add web_NewKeyValue
            ElseIf web_Index > KeyValues.Count Then
                KeyValues.Add web_NewKeyValue, After:=web_Index - 1
            Else
                KeyValues.Add web_NewKeyValue, Before:=web_Index
            End If
            Exit Sub
        End If

        web_Index = web_Index + 1
    Next web_KeyValue

    ' Add
    KeyValues.Add web_NewKeyValue
End Sub

' ============================================= '
' 5. Request preparation / handling
' ============================================= '

''
' Get the media-type for the given format / custom format.
'
' @method FormatToMediaType
' @param {WebFormat} Format
' @param {String} [CustomFormat] Needed if `Format = WebFormat.Custom`
' @return {String}
''
Public Function FormatToMediaType(Format As WebFormat, Optional CustomFormat As String) As String
    Select Case Format
    Case WebFormat.FormUrlEncoded
        FormatToMediaType = "application/x-www-form-urlencoded;charset=UTF-8"
    Case WebFormat.Json
        FormatToMediaType = "application/json"
    Case WebFormat.XML
        FormatToMediaType = "application/xml"
    Case WebFormat.Custom
        FormatToMediaType = web_GetConverter(CustomFormat)("MediaType")
    Case Else
        FormatToMediaType = "text/plain"
    End Select
End Function

''
' Get the method name for the given `WebMethod`
'
' @example
' ```VB.net
' WebHelpers.MethodToName WebMethod.HttpPost
' ' -> "POST"
' ```
'
' @method MethodToName
' @param {WebMethod} Method
' @return {String}
''
Public Function MethodToName(Method As WebMethod) As String
    Select Case Method
    Case WebMethod.HttpDelete
        MethodToName = "DELETE"
    Case WebMethod.HttpPut
        MethodToName = "PUT"
    Case WebMethod.HttpPatch
        MethodToName = "PATCH"
    Case WebMethod.HttpPost
        MethodToName = "POST"
    Case WebMethod.HttpGet
        MethodToName = "GET"
    Case WebMethod.HttpHead
        MethodToName = "HEAD"
    End Select
End Function

' ============================================= '
' 6. Timing
' ============================================= '

''
' Handle timeout timers expiring
'
' @internal
' @method OnTimeoutTimerExpired
' @param {String} RequestId
''
Public Sub OnTimeoutTimerExpired(web_RequestId As String)
    If Not AsyncRequests Is Nothing Then
        If AsyncRequests.Exists(web_RequestId) Then
            Dim web_AsyncWrapper As Object
            Set web_AsyncWrapper = AsyncRequests(web_RequestId)
            web_AsyncWrapper.TimedOut
        End If
    End If
End Sub

' ============================================= '
' 7. Mac
' ============================================= '

''
' Execute the given command
'
' @internal
' @method ExecuteInShell
' @param {String} Command
' @return {ShellResult}
''
Public Function ExecuteInShell(web_Command As String) As ShellResult
#If Mac Then
    Dim web_File As Long
    Dim web_Chunk As String
    Dim web_Read As Long

    On Error GoTo web_Cleanup

    web_File = web_popen(web_Command, "r")

    If web_File = 0 Then
        ' TODO Investigate why this could happen and what should be done if it happens
        Exit Function
    End If

    Do While web_feof(web_File) = 0
        web_Chunk = VBA.Space$(50)
        web_Read = web_fread(web_Chunk, 1, Len(web_Chunk) - 1, web_File)
        If web_Read > 0 Then
            web_Chunk = VBA.Left$(web_Chunk, web_Read)
            ExecuteInShell.Output = ExecuteInShell.Output & web_Chunk
        End If
    Loop

web_Cleanup:

    ExecuteInShell.ExitCode = web_pclose(web_File)
#End If
End Function

''
' Prepare text for shell
' - Wrap in "..."
' - Replace ! with '!' (reserved in bash)
' - Escape \, `, $, %, and "
'
' @internal
' @method PrepareTextForShell
' @param {String} Text
' @return {String}
''
Public Function PrepareTextForShell(ByVal web_Text As String) As String
    ' Escape special characters (except for !)
    web_Text = VBA.Replace(web_Text, "\", "\\")
    web_Text = VBA.Replace(web_Text, "`", "\`")
    web_Text = VBA.Replace(web_Text, "$", "\$")
    web_Text = VBA.Replace(web_Text, "%", "\%")
    web_Text = VBA.Replace(web_Text, """", "\""")

    ' Wrap in quotes
    web_Text = """" & web_Text & """"

    ' Escape !
    web_Text = VBA.Replace(web_Text, "!", """'!'""")

    ' Guard for ! at beginning or end (""'!'"..." or "..."'!'"" -> '!'"..." or "..."'!')
    If VBA.Left$(web_Text, 3) = """""'" Then
        web_Text = VBA.Right$(web_Text, VBA.Len(web_Text) - 2)
    End If
    If VBA.Right$(web_Text, 3) = "'""""" Then
        web_Text = VBA.Left$(web_Text, VBA.Len(web_Text) - 2)
    End If

    PrepareTextForShell = web_Text
End Function

' ============================================= '
' 8. Cryptography
' ============================================= '

''
' Determine the HMAC for the given text and secret using the SHA1 hash algorithm.
'
' Reference:
' - http://stackoverflow.com/questions/8246340/does-vba-have-a-hash-hmac
'
' @example
' ```VB.net
' WebHelpers.HMACSHA1 "Howdy!", "Secret"
' ' -> c8fdf74a9d62aa41ac8136a1af471cec028fb157
' ```
'
' @method HMACSHA1
' @param {String} Text
' @param {String} Secret
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} HMAC-SHA1
''
Public Function HMACSHA1(Text As String, Secret As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -sha1 -hmac " & PrepareTextForShell(Secret)

    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If

    HMACSHA1 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_SecretBytes() As Byte
    Dim web_Bytes() As Byte

    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)
    web_SecretBytes = VBA.StrConv(Secret, vbFromUnicode)

    Set web_Crypto = CreateObject("System.Security.Cryptography.HMACSHA1")
    web_Crypto.Key = web_SecretBytes
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)

    Select Case Format
    Case "Base64"
        HMACSHA1 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        HMACSHA1 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Determine the HMAC for the given text and secret using the SHA256 hash algorithm.
'
' @example
' ```VB.net
' WebHelpers.HMACSHA256 "Howdy!", "Secret"
' ' -> fb5d65...
' ```
'
' @method HMACSHA256
' @param {String} Text
' @param {String} Secret
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} HMAC-SHA256
''
Public Function HMACSHA256(Text As String, Secret As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -sha256 -hmac " & PrepareTextForShell(Secret)

    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If

    HMACSHA256 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_SecretBytes() As Byte
    Dim web_Bytes() As Byte

    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)
    web_SecretBytes = VBA.StrConv(Secret, vbFromUnicode)

    Set web_Crypto = CreateObject("System.Security.Cryptography.HMACSHA256")
    web_Crypto.Key = web_SecretBytes
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)

    Select Case Format
    Case "Base64"
        HMACSHA256 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        HMACSHA256 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Determine the MD5 hash of the given text.
'
' Reference:
' - http://www.di-mgt.com.au/src/basMD5.bas.html
'
' @example
' ```VB.net
' WebHelpers.MD5 "Howdy!"
' ' -> 7105f32280940271293ee00ac97da5a7
' ```
'
' @method MD5
' @param {String} Text
' @param {String} [Format="Hex"] "Hex" or "Base64" encoding for result
' @return {String} MD5 Hash
''
Public Function MD5(Text As String, Optional Format As String = "Hex") As String
#If Mac Then
    Dim web_Command As String
    web_Command = "printf " & PrepareTextForShell(Text) & " | openssl dgst -md5"

    If Format = "Base64" Then
        web_Command = web_Command & " -binary | openssl enc -base64"
    End If

    MD5 = VBA.Replace(ExecuteInShell(web_Command).Output, vbLf, "")
#Else
    Dim web_Crypto As Object
    Dim web_TextBytes() As Byte
    Dim web_Bytes() As Byte

    web_TextBytes = VBA.StrConv(Text, vbFromUnicode)

    Set web_Crypto = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
    web_Bytes = web_Crypto.ComputeHash_2(web_TextBytes)

    Select Case Format
    Case "Base64"
        MD5 = web_AnsiBytesToBase64(web_Bytes)
    Case Else
        MD5 = web_AnsiBytesToHex(web_Bytes)
    End Select
#End If
End Function

''
' Create random alphanumeric nonce (0-9a-zA-Z)
'
' @method CreateNonce
' @param {Integer} [NonceLength=32]
' @return {String} Randomly generated nonce
''
Public Function CreateNonce(Optional NonceLength As Integer = 32) As String
    Dim web_Str As String
    Dim web_Count As Integer
    Dim web_Result As String
    Dim web_Random As Integer

    web_Str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUIVWXYZ"
    web_Result = ""

    VBA.Randomize
    For web_Count = 1 To NonceLength
        web_Random = VBA.Int(((VBA.Len(web_Str) - 1) * VBA.Rnd) + 1)
        web_Result = web_Result & VBA.Mid$(web_Str, web_Random, 1)
    Next
    CreateNonce = web_Result
End Function

''
' Convert string to ANSI bytes
'
' @internal
' @method StringToAnsiBytes
' @param {String} Text
' @return {Byte()}
''
Public Function StringToAnsiBytes(web_Text As String) As Byte()
    Dim web_Bytes() As Byte
    Dim web_AnsiBytes() As Byte
    Dim web_ByteIndex As Long
    Dim web_AnsiIndex As Long

    If VBA.Len(web_Text) > 0 Then
        ' Take first byte from unicode bytes
        ' VBA.Int is used for floor instead of round
        web_Bytes = web_Text
        ReDim web_AnsiBytes(VBA.Int(UBound(web_Bytes) / 2))

        web_AnsiIndex = LBound(web_Bytes)
        For web_ByteIndex = LBound(web_Bytes) To UBound(web_Bytes) Step 2
            web_AnsiBytes(web_AnsiIndex) = web_Bytes(web_ByteIndex)
            web_AnsiIndex = web_AnsiIndex + 1
        Next web_ByteIndex
    End If

    StringToAnsiBytes = web_AnsiBytes
End Function

#If Mac Then
#Else
Private Function web_AnsiBytesToBase64(web_Bytes() As Byte)
    ' Use XML to convert to Base64
    Dim web_XmlObj As Object
    Dim web_Node As Object

    Set web_XmlObj = CreateObject("MSXML2.DOMDocument")
    Set web_Node = web_XmlObj.createElement("b64")

    web_Node.dataType = "bin.base64"
    web_Node.nodeTypedValue = web_Bytes
    web_AnsiBytesToBase64 = web_Node.Text

    Set web_Node = Nothing
    Set web_XmlObj = Nothing
End Function

Private Function web_AnsiBytesToHex(web_Bytes() As Byte)
    Dim web_i As Long
    For web_i = LBound(web_Bytes) To UBound(web_Bytes)
        web_AnsiBytesToHex = web_AnsiBytesToHex & VBA.LCase$(VBA.Right$("0" & VBA.Hex$(web_Bytes(web_i)), 2))
    Next web_i
End Function
#End If

' ============================================= '
' 9. Converters
' ============================================= '

' Helper for url-encoded to create key=value pair
Private Function web_GetUrlEncodedKeyValue(Key As Variant, Value As Variant) As String
    Select Case VBA.VarType(Value)
    Case VBA.vbBoolean
        ' Convert boolean to lowercase
        If Value Then
            Value = "true"
        Else
            Value = "false"
        End If
    Case VBA.vbDate
        ' Use region invariant date (ISO-8601)
        Value = WebHelpers.ConvertToIso(CDate(Value))
    Case VBA.vbDecimal, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency
        ' Use region invariant number encoding ("." for decimal separator)
        Value = VBA.Replace(VBA.CStr(Value), ",", ".")
    End Select

    ' Url encode key and value (using + for spaces)
    web_GetUrlEncodedKeyValue = UrlEncode(Key, SpaceAsPlus:=True) & "=" & UrlEncode(Value, SpaceAsPlus:=True)
End Function

''
' VBA-JSON v2.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal json_String As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    json_String = VBA.Replace(VBA.Replace(VBA.Replace(json_String, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")

    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(json_String, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(json_String, json_Index)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} json_DictionaryCollectionOrArray (Dictionary, Collection, or Array)
' @return {String}
''
Public Function ConvertToJson(ByVal json_DictionaryCollectionOrArray As Variant) As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True

    Select Case VBA.VarType(json_DictionaryCollectionOrArray)
    Case VBA.vbNull, VBA.vbEmpty
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(json_DictionaryCollectionOrArray))

        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(json_DictionaryCollectionOrArray) Then
            ConvertToJson = json_DictionaryCollectionOrArray
        Else
            ConvertToJson = """" & json_Encode(json_DictionaryCollectionOrArray) & """"
        End If
    Case VBA.vbBoolean
        If json_DictionaryCollectionOrArray Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        ' Array
        json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(json_DictionaryCollectionOrArray, 1)
        json_UBound = UBound(json_DictionaryCollectionOrArray, 1)
        json_LBound2D = LBound(json_DictionaryCollectionOrArray, 2)
        json_UBound2D = UBound(json_DictionaryCollectionOrArray, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                        End If

                        json_BufferAppend json_buffer, _
                            ConvertToJson(json_DictionaryCollectionOrArray(json_Index, json_Index2D)), _
                            json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    json_BufferAppend json_buffer, _
                        ConvertToJson(json_DictionaryCollectionOrArray(json_Index)), _
                        json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)

    ' Dictionary or Collection
    Case VBA.vbObject
        ' Dictionary
        If VBA.TypeName(json_DictionaryCollectionOrArray) = "Dictionary" Then
            json_BufferAppend json_buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In json_DictionaryCollectionOrArray.Keys
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_BufferAppend json_buffer, _
                    """" & json_Key & """:" & ConvertToJson(json_DictionaryCollectionOrArray(json_Key)), _
                    json_BufferPosition, json_BufferLength
            Next json_Key
            json_BufferAppend json_buffer, "}", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(json_DictionaryCollectionOrArray) = "Collection" Then
            json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In json_DictionaryCollectionOrArray
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_BufferAppend json_buffer, _
                    ConvertToJson(json_Value), _
                    json_BufferPosition, json_BufferLength
            Next json_Value
            json_BufferAppend json_buffer, "]", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    Case Else
        ' Number
        On Error Resume Next
        ConvertToJson = VBA.Replace(json_DictionaryCollectionOrArray, ",", ".")
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.Item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.Add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_buffer, VBA.ChrW(VBA.Val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15 characters containing only numbers and decimal points -> Number
            If Not JsonOptions.UseDoubleForLargeNumbers And Len(json_Value) >= 16 Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.Val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, ", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String
        Dim json_Index As Long

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
#If Mac Then
    json_buffer = json_buffer & json_Append
#Else
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Copy memory for "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.LenB(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunks until buffer is long enough
        Dim json_TemporaryLength As Long

        json_TemporaryLength = json_BufferLength
        Do While json_TemporaryLength < json_LengthPlusPosition
            ' Initially, initialize string with 255 characters,
            ' then add large chunks (8192) after that
            '
            ' Size: # Characters x 2 bytes / character
            If json_TemporaryLength = 0 Then
                json_TemporaryLength = json_TemporaryLength + 510
            Else
                json_TemporaryLength = json_TemporaryLength + 16384
            End If
        Loop

        json_buffer = json_buffer & VBA.Space$((json_TemporaryLength - json_BufferLength) \ 2)
        json_BufferLength = json_TemporaryLength
    End If

    ' Copy memory from append to buffer at buffer position
    json_CopyMemory ByVal json_UnsignedAdd(StrPtr(json_buffer), _
                    json_BufferPosition), _
                    ByVal StrPtr(json_Append), _
                    json_AppendLength

    json_BufferPosition = json_BufferPosition + json_AppendLength
#End If
End Sub

Private Function json_BufferToString(ByRef json_buffer As String, ByVal json_BufferPosition As Long, ByVal json_BufferLength As Long) As String
#If Mac Then
    json_BufferToString = json_buffer
#Else
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_buffer, json_BufferPosition \ 2)
    End If
#End If
End Function

#If VBA7 Then
Private Function json_UnsignedAdd(json_Start As LongPtr, json_Increment As Long) As LongPtr
#Else
Private Function json_UnsignedAdd(json_Start As Long, json_Increment As Long) As Long
#End If

    If json_Start And &H80000000 Then
        json_UnsignedAdd = json_Start + json_Increment
    ElseIf (json_Start Or &H80000000) < -json_Increment Then
        json_UnsignedAdd = json_Start + json_Increment
    Else
        json_UnsignedAdd = (json_Start + &H80000000) + (json_Increment + &H80000000)
    End If
End Function

''
' VBA-UTC v1.0.1
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.number & " - " & Err.description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.number & " - " & Err.description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), VBA.CInt(utc_OffsetParts(2)))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), VBA.CInt(utc_TimeParts(2)))
        End Select

        If utc_HasOffset Then
            ParseIso = ParseIso + utc_Offset
        Else
            ParseIso = ParseUtc(ParseIso)
        End If
    End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.number & " - " & Err.description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")

    Exit Function

utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.number & " - " & Err.description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
    Dim utc_File As Long
    Dim utc_Chunk As String
    Dim utc_Read As Long

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File)
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, utc_Read)
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = utc_pclose(utc_File)
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If

''
' AutoProxy 1.0.2
' (c) Damien Thirion
'
' Auto configure proxy server
'
' Based on code shared by Stephen Sulzer
' https://groups.google.com/d/msg/microsoft.public.winhttp/ZeWN2Xig82g/jgHIBDSfBwsJ
'
' Errors:
' 11020 - Unknown error while detecting proxy
' 11021 - WPAD detection failed
' 11022 - Unable to download proxy auto-config script
' 11023 - Error in proxy auto-config script
' 11024 - No proxy can be located for the specified URL
' 11025 - Specified URL is not valid
'
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

''
' Returns IE proxy settings
' including auto-detection and auto-config scripts results
'
' @param {String} Url
' @param[out] {String} ProxyServer
' @param[out] {String} ProxyBypass
''
Public Sub GetAutoProxy(ByVal URL As String, ByRef ProxyServer As String, ByRef ProxyBypass As String)
#If Mac Then
    ' (Windows only)
#ElseIf VBA7 Then
    Dim AutoProxy_ProxyStringPtr As LongPtr
    Dim AutoProxy_ptr As LongPtr
    Dim AutoProxy_hSession As LongPtr
#Else
    Dim AutoProxy_ProxyStringPtr As Long
    Dim AutoProxy_ptr As Long
    Dim AutoProxy_hSession As Long
#End If
#If Mac Then
#Else
    Dim AutoProxy_IEProxyConfig As AUTOPROXY_IE_PROXY_CONFIG
    Dim AutoProxy_AutoProxyOptions As AUTOPROXY_OPTIONS
    Dim AutoProxy_ProxyInfo As AUTOPROXY_INFO
    Dim AutoProxy_doAutoProxy As Boolean
    Dim AutoProxy_Error As Long
    Dim AutoProxy_ErrorMsg As String

    AutoProxy_AutoProxyOptions.AutoProxy_fAutoLogonIfChallenged = 1
    ProxyServer = ""
    ProxyBypass = ""

    ' WinHttpGetProxyForUrl returns unexpected errors if Url is empty
    If URL = "" Then URL = " "

    On Error GoTo AutoProxy_Cleanup

    ' Check IE's proxy configuration
    If (AutoProxy_GetIEProxy(AutoProxy_IEProxyConfig) > 0) Then
        ' If IE is configured to auto-detect, then we will too.
        If (AutoProxy_IEProxyConfig.AutoProxy_fAutoDetect <> 0) Then
            AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = AUTOPROXY_AUTO_DETECT
            AutoProxy_AutoProxyOptions.AutoProxy_dwAutoDetectFlags = _
                AUTOPROXY_DETECT_TYPE_DHCP + AUTOPROXY_DETECT_TYPE_DNS
            AutoProxy_doAutoProxy = True
        End If

        ' If IE is configured to use an auto-config script, then
        ' we will use it too
        If (AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl <> 0) Then
            AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = _
                AutoProxy_AutoProxyOptions.AutoProxy_dwFlags + AUTOPROXY_CONFIG_URL
            AutoProxy_AutoProxyOptions.AutoProxy_lpszAutoConfigUrl = AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl
            AutoProxy_doAutoProxy = True
        End If
    Else
        ' If the IE proxy config is not available, then
        ' we will try auto-detection
        AutoProxy_AutoProxyOptions.AutoProxy_dwFlags = AUTOPROXY_AUTO_DETECT
        AutoProxy_AutoProxyOptions.AutoProxy_dwAutoDetectFlags = _
            AUTOPROXY_DETECT_TYPE_DHCP + AUTOPROXY_DETECT_TYPE_DNS
        AutoProxy_doAutoProxy = True
    End If

    If AutoProxy_doAutoProxy Then
        On Error GoTo AutoProxy_TryIEFallback

        ' Need to create a temporary WinHttp session handle
        ' Note: Performance of this GetProxyInfoForUrl function can be
        '       improved by saving this AutoProxy_hSession handle across calls
        '       instead of creating a new handle each time
        AutoProxy_hSession = AutoProxy_HttpOpen(0, 1, 0, 0, 0)

        If (AutoProxy_GetProxyForUrl( _
            AutoProxy_hSession, StrPtr(URL), AutoProxy_AutoProxyOptions, AutoProxy_ProxyInfo) > 0) Then

            AutoProxy_ProxyStringPtr = AutoProxy_ProxyInfo.AutoProxy_lpszProxy
        Else
            AutoProxy_Error = Err.LastDllError
            Select Case AutoProxy_Error
            Case 12180
                AutoProxy_ErrorMsg = "WPAD detection failed"
                AutoProxy_Error = 10021
            Case 12167
                AutoProxy_ErrorMsg = "Unable to download proxy auto-config script"
                AutoProxy_Error = 10022
            Case 12166
                AutoProxy_ErrorMsg = "Error in proxy auto-config script"
                AutoProxy_Error = 10023
            Case 12178
                AutoProxy_ErrorMsg = "No proxy can be located for the specified URL"
                AutoProxy_Error = 10024
            Case 12005, 12006
                AutoProxy_ErrorMsg = "Specified URL is not valid"
                AutoProxy_Error = 10025
            Case Else
                AutoProxy_ErrorMsg = "Unknown error while detecting proxy"
                AutoProxy_Error = 10020
            End Select
        End If

        AutoProxy_HttpClose AutoProxy_hSession
        AutoProxy_hSession = 0
    End If

AutoProxy_TryIEFallback:
    On Error GoTo AutoProxy_Cleanup

    ' If we don't have a proxy server from WinHttpGetProxyForUrl,
    ' then pick one up from the IE proxy config (if given)
    If (AutoProxy_ProxyStringPtr = 0) Then
        AutoProxy_ProxyStringPtr = AutoProxy_IEProxyConfig.AutoProxy_lpszProxy
    End If

    ' If there's a proxy string, convert it to a Basic string
    If (AutoProxy_ProxyStringPtr <> 0) Then
        AutoProxy_ptr = AutoProxy_SysAllocString(AutoProxy_ProxyStringPtr)
        AutoProxy_CopyMemory VarPtr(ProxyServer), VarPtr(AutoProxy_ptr), 4
    End If

    ' Pick up any bypass string from the IEProxyConfig
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_ptr = AutoProxy_SysAllocString(AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass)
        AutoProxy_CopyMemory VarPtr(ProxyBypass), VarPtr(AutoProxy_ptr), 4
    End If

    ' Ensure WinHttp session is closed, an error might have occurred
    If (AutoProxy_hSession <> 0) Then
        AutoProxy_HttpClose AutoProxy_hSession
    End If

AutoProxy_Cleanup:
    On Error GoTo 0

    ' Free any strings received from WinHttp APIs
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl
        AutoProxy_IEProxyConfig.AutoProxy_lpszAutoConfigUrl = 0
    End If
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxy <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszProxy
        AutoProxy_IEProxyConfig.AutoProxy_lpszProxy = 0
    End If
    If (AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_GlobalFree AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass
        AutoProxy_IEProxyConfig.AutoProxy_lpszProxyBypass = 0
    End If
    If (AutoProxy_ProxyInfo.AutoProxy_lpszProxy <> 0) Then
        AutoProxy_GlobalFree AutoProxy_ProxyInfo.AutoProxy_lpszProxy
        AutoProxy_ProxyInfo.AutoProxy_lpszProxy = 0
    End If
    If (AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass <> 0) Then
        AutoProxy_GlobalFree AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass
        AutoProxy_ProxyInfo.AutoProxy_lpszProxyBypass = 0
    End If

    ' Error handling
    If Err.number <> 0 Then
        ' Unmanaged error
        Err.Raise Err.number, "AutoProxy:" & Err.source, Err.description, Err.HelpFile, Err.HelpContext
    ElseIf AutoProxy_Error <> 0 Then
        Err.Raise AutoProxy_Error, "AutoProxy", AutoProxy_ErrorMsg
    End If
#End If
End Sub
Attribute VB_Name = "WebRequest"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebRequest v4.0.22
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' `WebRequest` is used to create detailed requests
' (including formatting, querystrings, headers, cookies, and much more).
'
' Usage:
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "users/{Id}"
'
' Request.Method = WebMethod.HttpPut
' Request.RequestFormat = WebFormat.UrlEncoded
' Request.ResponseFormat = WebFormat.Json
'
' Dim Body As New Dictionary
' Body.Add "name", "Tim"
' Body.Add "project", "VBA-Web"
' Set Request.Body = Body
'
' Request.AddUrlSegment "Id", 123
' Request.AddQuerystringParam "api_key", "abcd"
' Request.AddHeader "Authorization", "Token ..."
'
' ' -> PUT (Client.BaseUrl)users/123?api_key=abcd
' '    Authorization: Token ...
' '
' '    name=Tim&project=VBA-Web
' ```
'
' Errors:
' 11020 / 80042b0c / -2147210484 - Cannot add body parameter to non-Dictionary
'
' @class WebRequest
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' --------------------------------------------- '
' Constants and Private Variables
' --------------------------------------------- '

Private web_pRequestFormat As WebFormat
Private web_pResponseFormat As WebFormat
Private web_pCustomRequestFormat As String
Private web_pCustomResponseFormat As String
Private web_pBody As Variant
Private web_pConvertedBody As Variant
Private web_pContentType As String
Private web_pAccept As String
Private web_pContentLength As Long
Private web_pId As String

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Set the request's portion of the url to be appended to the client's BaseUrl.
' Can include Url Segments for dynamic values
' and Querystring parameters are smart enough to be appended to existing querystring
' (or added to resource if there isn't an existing querystring).
'
' @example
' ```VB.net
' Dim Client As New WebClient
' Client.BaseUrl = "https://api.example.com/"
'
' Dim Request As New WebRequest
' Request.Resource = "messages"
'
' ' -> Url: https://api.example.com/messages
'
' Request.Resource = "messages/{id}?a=1"
' Request.AddUrlSegment "id", 123
' Request.AddQuerystringParam "b", 2
'
' ' -> Url: https://api.example.com/messages/123?a=1&b=2
' ```
'
' @property Resource
' @type String
''
Public Resource As String

''
' Set the HTTP method to be used for the request:
' GET, POST, PUT, PATCH, DELETE
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Method = WebMethod.HttpGet
' Request.Method = WebMethod.HttpPost
' ' or HttpPut / HttpPatch / HttpDelete
' ```
'
' @property Method
' @type WebMethod
''
Public Method As WebMethod

''
' _Note_ To add headers, use [`AddHeader`](#/WebRequest/AddHeader).
'
' `Collection` of Headers to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property Headers
' @type Collection
''
Public Headers As Collection

''
' _Note_ To add querystring parameters, use [`AddQuerystringParam`](#/WebRequest/AddQuerystringParam).
'
' `Collection` of querystring parameters to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property QuerystringParams
' @type Collection
''
Public QuerystringParams As Collection

''
' _Note_ To add Url Segments, use [`AddUrlSegment`](#/WebRequest/AddUrlSegment)
'
' Url Segments are used to easily add dynamic values to `Resource`.
' Create a Url Segement in `Resource` with curly brackets and then
' replace with dynamic value with [`AddUrlSegment`](#AddUrlSegment).
'
' @example
' ```VB.net
' Dim Request As New WebRequest
'
' Dim User As String
' Dim Id As Long
' User = "Tim"
' Id = 123
'
' ' OK: Use string concatenation for dynamic values
' Request.Resource = User & "/messages/" & Id
'
' ' BETTER: Use Url Segments for dynamic values
' Request.Resource = "{User}/messages/{Id}"
' Request.AddUrlSegment "User", User
' Request.AddUrlSegment "Id", Id
'
' Request.FormattedResource ' = "Tim/messages/123"
' ```
'
' @property UrlSegments
' @type Dictionary
''
Public UrlSegments As Dictionary

''
' _Note_ To add cookies, use [`AddCookie`](#/WebRequest/AddCookie).
'
' `Collection` of cookies to include with request,
' stored as `KeyValue` (`Dictionary: {Key: "...", Value: "..."}`).
'
' @property Cookies
' @type Collection
''
Public Cookies As Collection

''
' User agent to use with request
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.UserAgent = "Mozilla/5.0"
'
' ' -> (Header) User-Agent: Mozilla/5.0
' ```
'
' @property UserAgent
' @type String
' @default "VBA-Web v#.#.# (https://github.com/VBA-tools/VBA-Web)"
''
Public UserAgent As String

''
' Set `RequestFormat`, `ResponseFormat`, and `Content-Type` and `Accept`
' headers for the `WebRequest`
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Format = WebFormat.Json
' ' -> Request.RequestFormat = WebFormat.Json
' '    Request.ResponseFormat = WebFormat.Json
' '    (Header) Content-Type: application/json
' '    (Header) Accept: application/json
' ```
'
' @property Format
' @type WebFormat
''
Public Property Get Format() As WebFormat
    Format = RequestFormat
End Property
Public Property Let Format(Value As WebFormat)
    Me.RequestFormat = Value
    Me.ResponseFormat = Value
End Property

''
' Set the format to use for converting the response `Body` to string and for the `Content-Type` header
'
' _Note_ If `WebFormat.Custom` is used, the [`CustomRequestFormat`](#/WebRequest/CustomRequestFormat) must be set.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Body = Array("A", "B", "C")
'
' Request.RequestFormat = WebFormat.Json
'
' ' -> (Header) Content-Type: application/json
' ' -> Convert Body to JSON string
' Request.Body ' = "["A","B","C"]"
' ```
'
' @property RequestFormat
' @type WebFormat
' @default WebFormat.Json
''
Public Property Get RequestFormat() As WebFormat
    RequestFormat = web_pRequestFormat
End Property
Public Property Let RequestFormat(Value As WebFormat)
    If Value <> web_pRequestFormat Then
        web_pRequestFormat = Value

        ' Clear cached converted body
        web_pConvertedBody = Empty
    End If
End Property

''
' Set the format to use for converting the response `Content` to `Data` and for the `Accept` header
'
' _Note_ If `WebFormat.Custom` is used, the [`CustomResponseFormat`](#/WebRequest/CustomResponseFormat) must be set.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ResponseFormat = WebFormat.Json
'
' ' -> (Header) Accept: application/json
'
' Dim Response As WebResponse
' ' ... from Execute
' Response.Content = "{""message"":""Howdy!""}"
'
' ' -> Parse Content to JSON Dictionary
' Debug.Print Response.Data("message") ' -> "Howdy!"
' ```
'
' @property ResponseFormat
' @type WebFormat
' @default WebFormat.Json
''
Public Property Get ResponseFormat() As WebFormat
    ResponseFormat = web_pResponseFormat
End Property
Public Property Let ResponseFormat(Value As WebFormat)
    If Value <> web_pResponseFormat Then
        web_pResponseFormat = Value

        ' Clear cached converted body
        web_pConvertedBody = Empty
    End If
End Property

''
' Use converter registered with [`WebHelpers.RegisterConverter`](#/WebHelpers/RegisterConverter)
' to convert `Body` to string and set `Content-Type` header.
'
' (Automatically sets `RequestFormat` to `WebFormat.Custom`)
'
' @example
' ```VB.net
' WebHelpers.RegisterConverter "csv", "text/csv", "Module.ConvertToCsv", "Module.ParseCsv"
'
' Dim Request As New WebRequest
' Request.CustomRequestFormat = "csv"
'
' ' -> (Header) Content-Type: text/csv
' ' -> Body converted to string with Module.ConvertToCsv
' ```
'
' @property CustomRequestFormat
' @type String
''
Public Property Get CustomRequestFormat() As String
    CustomRequestFormat = web_pCustomRequestFormat
End Property
Public Property Let CustomRequestFormat(Value As String)
    If Value <> web_pCustomRequestFormat Then
        web_pCustomRequestFormat = Value

        ' Clear cached converted body
        web_pConvertedBody = Empty

        If Value <> "" Then
            web_pRequestFormat = WebFormat.Custom
        End If
    End If
End Property

''
' Use converter registered with [`WebHelpers.RegisterConverter`](#/WebHelpers/RegisterConverter)
' to convert the response `Content` to `Data` and set `Accept` header.
'
' (Automatically sets `ResponseFormat` to `WebFormat.Custom`)
'
' @example
' ```VB.net
' WebHelpers.RegisterConverter "csv", "text/csv", "Module.ConvertToCsv", "Module.ParseCsv"
'
' Dim Request As New WebRequest
' Request.CustomResponseFormat = "csv"
'
' ' -> (Header) Accept: text/csv
' ' -> WebResponse Content converted Data with Module.ParseCsv
' ```
'
' @property CustomResponseFormat
' @type String
''
Public Property Get CustomResponseFormat() As String
    CustomResponseFormat = web_pCustomResponseFormat
End Property
Public Property Let CustomResponseFormat(Value As String)
    If Value <> web_pCustomResponseFormat Then
        web_pCustomResponseFormat = Value

        ' Clear cached converted body
        web_pConvertedBody = Empty

        If Value <> "" Then
            ResponseFormat = WebFormat.Custom
        End If
    End If
End Property

''
' Set automatically from `RequestFormat` or `CustomRequestFormat`,
' but can be overriden to set `Content-Type` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ContentType = "text/csv"
'
' ' -> (Header) Content-Type: text/csv
' ```
'
' @property ContentType
' @type String
' @default Media-type of request format
''
Public Property Get ContentType() As String
    If web_pContentType <> "" Then
        ContentType = web_pContentType
    Else
        ContentType = WebHelpers.FormatToMediaType(Me.RequestFormat, Me.CustomRequestFormat)
    End If
End Property
Public Property Let ContentType(Value As String)
    web_pContentType = Value
End Property

''
' Set automatically from `ResponseFormat` or `CustomResponseFormat`,
' but can be overriden to set `Accept` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Accept = "text/csv"
'
' ' -> (Header) Accept: text/csv
' ```
'
' @property Accept
' @type String
' @default Media-type of response format
''
Public Property Get Accept() As String
    If web_pAccept <> "" Then
        Accept = web_pAccept
    Else
        Accept = WebHelpers.FormatToMediaType(Me.ResponseFormat, Me.CustomResponseFormat)
    End If
End Property
Public Property Let Accept(Value As String)
    web_pAccept = Value
End Property

''
' Set automatically by length of `Body`,
' but can be overriden to set `Content-Length` header for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.ContentLength = 200
'
' ' -> (Header) Content-Length: 200
' ```
'
' @property ContentLength
' @type Long
' @default Length of `Body`
''
Public Property Get ContentLength() As Long
    If web_pContentLength >= 0 Then
        ContentLength = web_pContentLength
    Else
        ContentLength = Len(Me.Body)
    End If
End Property
Public Property Let ContentLength(Value As Long)
    web_pContentLength = Value
End Property

''
' - Get: Body value converted to string using `RequestFormat` or `CustomRequestFormat`
' - Let: Use `String` or `Array` for Body
' - Set: Use `Collection`, `Dictionary`, or `Object` for Body
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.RequestFormat = WebFormat.Json
'
' ' Let: String|Array
' Request.Body = "text"
' Debug.Print Request.Body ' -> "text"
'
' Request.Body = Array("A", "B", "C")
' Debug.Print Request.Body ' -> "["A","B","C"]"
'
' ' Set: Collection|Dictionary|Object
' Dim Body As Object
' Set Body = New Collection
' Body.Add "Howdy!"
' Set Request.Body = Body
' Debug.Print Request.Body ' -> "["Howdy!"]"
'
' Set Body = New Dictionary
' Body.Add "a", 123
' Body.Add "b", 456
' Set Request.Body = Body
' Debug.Print Request.Body ' -> "{"a":123,"b":456}"
' ```
'
' @property Body
' @type String|Array|Collection|Dictionary|Variant
''
Public Property Get Body() As Variant
    If Not VBA.IsEmpty(web_pBody) Then
        If VBA.VarType(web_pBody) = vbString Then
            Body = web_pBody
        ElseIf IsEmpty(web_pConvertedBody) Then
            ' Convert body and cache
            Body = WebHelpers.ConvertToFormat(web_pBody, Me.RequestFormat, Me.CustomRequestFormat)
            web_pConvertedBody = Body
        Else
            Body = web_pConvertedBody
        End If
    End If
End Property
Public Property Let Body(Value As Variant)
    web_pConvertedBody = Empty
    web_pBody = Value
End Property
Public Property Set Body(Value As Variant)
    web_pConvertedBody = Empty
    Set web_pBody = Value
End Property

''
' Get `Resource` with Url Segments replaced and Querystring added.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "examples/{Id}"
' Request.AddUrlSegment "Id", 123
' Request.AddQuerystringParam "message", "Hello"
'
' Debug.Print Request.FormattedResource ' -> "examples/123?message=Hello"
' ```
'
' @property FormattedResource
' @type String
''
Public Property Get FormattedResource() As String
    Dim web_Segment As Variant

    FormattedResource = Me.Resource

    ' Replace url segments
    For Each web_Segment In Me.UrlSegments.Keys
        FormattedResource = VBA.Replace(FormattedResource, "{" & web_Segment & "}", WebHelpers.UrlEncode(Me.UrlSegments(web_Segment)))
    Next web_Segment

    ' Add querystring
    If Me.QuerystringParams.Count > 0 Then
        If VBA.InStr(FormattedResource, "?") <= 0 Then
            FormattedResource = FormattedResource & "?"
        Else
            FormattedResource = FormattedResource & "&"
        End If

        FormattedResource = FormattedResource & WebHelpers.ConvertToUrlEncoded(Me.QuerystringParams)
    End If
End Property

''
' @internal
' @property Id
' @type String
''
Public Property Get Id() As String
    If web_pId = "" Then: web_pId = WebHelpers.CreateNonce
    Id = web_pId
End Property

' ============================================= '
' Public Methods
' ============================================= '

''
' Add header to be sent with request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddHeader "Authentication", "Bearer ..."
'
' ' -> (Header) Authorization: Bearer ...
' ```
'
' @method AddHeader
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddHeader(Key As String, Value As Variant)
    Me.Headers.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add/replace header to be sent with request.
' `SetHeader` should be used for headers that can only be included once with a request
' (e.g. Authorization, Content-Type, etc.).
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddHeader "Authorization", "A..."
' Request.AddHeader "Authorization", "B..."
'
' ' -> Headers:
' '    Authorization: A...
' '    Authorization: B...
'
' Request.SetHeader "Authorization", "C..."
'
' ' -> Headers:
' '    Authorization: C...
' ```
'
' @method SetHeader
' @param {String} Key
' @param {Variant} Value
''
Public Sub SetHeader(Key As String, Value As Variant)
    WebHelpers.AddOrReplaceInKeyValues Me.Headers, Key, Value
End Sub

''
' Url Segments are used to easily add dynamic values to `Resource`.
' Create a Url Segement in `Resource` with curly brackets and then
' replace with dynamic value with `AddUrlSegment`.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Dim User As String
' Dim Id As Long
'
' User = "Tim"
' Id = 123
'
' ' OK: Use string concatenation for dynamic values
' Request.Resource = User & "/messages/" & Id
'
' ' BETTER: Use Url Segments for dynamic values
' Request.Resource = "{User}/messages/{Id}"
' Request.AddUrlSegment "User", User
' Request.AddUrlSegment "Id", Id
'
' Debug.Print Request.FormattedResource ' > "Tim/messages/123"
' ```
'
' @method AddUrlSegment
' @param {String} Key
' @param {String} Value
''
Public Sub AddUrlSegment(Segment As String, Value As Variant)
    Me.UrlSegments.Item(Segment) = Value
End Sub

''
' Add querysting parameter to be used in `FormattedResource` for request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Resource = "messages"
' Request.AddQuerystringParam "from", "Tim"
'
' Request.FormattedResource ' = "messages?from=Tim"
' ```
'
' @method AddQuerystringParam
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddQuerystringParam(Key As String, Value As Variant)
    Me.QuerystringParams.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add cookie to be sent with request.
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.AddCookie "a", "abc"
' Request.AddCookie "b", 123
'
' ' -> (Header) Cookie: a=abc; b=123;
' ```
'
' @method AddCookie
' @param {String} Key
' @param {Variant} Value
''
Public Sub AddCookie(Key As String, Value As Variant)
    Me.Cookies.Add WebHelpers.CreateKeyValue(Key, Value)
End Sub

''
' Add `Key-Value` to `Body`.
' `Body` must be a `Dictionary` (if it's an `Array` or `Collection` an error is thrown)
'
' @example
' ```VB.net
' Dim Request As New WebRequest
' Request.Format = WebFormat.Json
'
' Request.AddBodyParameter "a", 123
' Debug.Print Request.Body ' -> "{"a":123}"
'
' ' Can add parameters to existing Dictionary
' Dim Body As New Dictionary
' Body.Add "a", 123
'
' Set Request.Body = Body
' Request.AddBodyParameter "b", 456
'
' Debug.Print Request.Body ' -> "{"a":123,"b":456}"
' ```
'
' @method AddBodyParameter
' @param {Variant} Key
' @param {Variant} Value
' @throws 11020 / 80042b0c / -2147210484 - Cannot add body parameter to non-Dictionary
''
Public Sub AddBodyParameter(Key As Variant, Value As Variant)
    If VBA.IsEmpty(web_pBody) Then
        Set web_pBody = New Dictionary
    ElseIf Not TypeOf web_pBody Is Dictionary Then
        Dim web_ErrorDescription As String
        web_ErrorDescription = "Cannot add body parameter to non-Dictionary Body (existing Body must be of type Dictionary)"

        WebHelpers.LogError web_ErrorDescription, "WebRequest.AddBodyParameter", 11020 + vbObjectError
        Err.Raise 11020 + vbObjectError, "WebRequest.AddBodyParameter", web_ErrorDescription
    End If

    If VBA.IsObject(Value) Then
        Set web_pBody(Key) = Value
    Else
        web_pBody(Key) = Value
    End If

    ' Clear cached converted body
    web_pConvertedBody = Empty
End Sub

''
' Prepare request for execution
'
' @internal
' @method Prepare
''
Public Sub Prepare()
    ' Add/replace general headers for request
    SetHeader "User-Agent", Me.UserAgent
    SetHeader "Content-Type", Me.ContentType
    SetHeader "Accept", Me.Accept
    SetHeader "Content-Length", VBA.CStr(Me.ContentLength)
End Sub

''
' Clone request
'
' @internal
' @method Clone
' @return {WebRequest}
''
Public Function Clone() As WebRequest
    Set Clone = New WebRequest

    ' Note: Clone underlying for properties with default values
    Clone.Resource = Me.Resource
    Clone.Method = Me.Method
    Clone.UserAgent = Me.UserAgent
    Clone.Accept = web_pAccept
    Clone.ContentType = web_pContentType
    Clone.ContentLength = web_pContentLength
    Clone.RequestFormat = Me.RequestFormat
    Clone.ResponseFormat = Me.ResponseFormat
    Clone.CustomRequestFormat = Me.CustomRequestFormat
    Clone.CustomResponseFormat = Me.CustomResponseFormat

    Set Clone.Headers = WebHelpers.CloneCollection(Me.Headers)
    Set Clone.QuerystringParams = WebHelpers.CloneCollection(Me.QuerystringParams)
    Set Clone.UrlSegments = WebHelpers.CloneDictionary(Me.UrlSegments)
    Set Clone.Cookies = WebHelpers.CloneCollection(Me.Cookies)

    If VBA.IsObject(web_pBody) Then
        Set Clone.Body = web_pBody
    Else
        Clone.Body = web_pBody
    End If
End Function

''
' Create WebRequest from options
'
' @method CreateFromOptions
' @param {Dictionary} Options
' @param {Collection} [Options.Headers] Collection of `KeyValue`
' @param {Collection} [Options.Cookies] Collection of `KeyValue`
' @param {Collection} [Options.QuerystringParams] Collection of `KeyValue`
' @param {Dictionary} [Options.UrlSegments]
''
Public Sub CreateFromOptions(Options As Dictionary)
    If Not Options Is Nothing Then
        If Options.Exists("Headers") Then
            Set Me.Headers = Options("Headers")
        End If
        If Options.Exists("Cookies") Then
            Set Me.Cookies = Options("Cookies")
        End If
        If Options.Exists("QuerystringParams") Then
            Set Me.QuerystringParams = Options("QuerystringParams")
        End If
        If Options.Exists("UrlSegments") Then
            Set Me.UrlSegments = Options("UrlSegments")
        End If
    End If
End Sub

' ============================================= '
' Private Functions
' ============================================= '

Private Sub Class_Initialize()
    ' Set default values
    Me.RequestFormat = WebFormat.Json
    Me.ResponseFormat = WebFormat.Json
    Me.UserAgent = WebUserAgent

    Set Me.Headers = New Collection
    Set Me.QuerystringParams = New Collection
    Set Me.UrlSegments = New Dictionary
    Set Me.Cookies = New Collection
    Me.ContentLength = -1
End Sub
Attribute VB_Name = "WebResponse"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
''
' WebResponse v4.0.22
' (c) Tim Hall - https://github.com/VBA-tools/VBA-Web
'
' Wrapper for http/cURL responses that includes parsed Data based on WebRequest.ResponseFormat.
'
' Usage:
' ```VB.net
' Dim Response As WebResponse
' Set Response = Client.Execute(Request)
'
' If Response.StatusCode = WebStatusCode.Ok Then
'   ' Response.Headers, Response.Cookies
'   ' Response.Data -> Parsed Response.Content based on Request.ResponseFormat
'   ' Response.Body -> Raw response bytes
' Else
'   Debug.Print "Error: " & Response.StatusCode & " - " & Response.Content
' End If
' ```
'
' Errors:
' 11030 / 80042b16 / -2147210474 - Error creating from http
' 11031 / 80042b17 / -2147210473 - Error creating from cURL
' 11032 / 80042b18 / -2147210472 - Error extracting headers
'
' @class WebResponse
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

Private web_CrLf As String

' --------------------------------------------- '
' Properties
' --------------------------------------------- '

''
' Status code that the server returned (e.g. 200).
'
' @property StatusCode
' @type WebStatusCode
''
Public StatusCode As WebStatusCode

''
' Status string that the server returned (e.g. `404 -> "Not Found"`)
'
' @property StatusDescription
' @type String
''
Public StatusDescription As String

''
' Content string that the server returned.
'
' @property Content
' @type String
''
Public Content As String

''
' Raw bytes for the response.
'
' @property Body
' @type Byte()
''
Public Body As Variant

''
' Parsed `Content` or `Body` based on the `WebRequest.ResponseFormat`.
'
' @property Data
' @type Dictionary|Collection
''
Public Data As Object

''
' Headers that were included with the response.
' (`Collection` of `KeyValue`)
'
' @property Headers
' @type Collection
''
Public Headers As Collection

''
' Cookies that were included with the response.
' (`Collection` of `KeyValue`)
'
' @property Cookies
' @type Collection
''
Public Cookies As Collection

' ============================================= '
' Public Methods
' ============================================= '

''
' Helper for updating the response with the given updated response values.
' Useful for `ByRef` cases to update response in place.
'
' @method Update
' @param Updated {WebResponse} Updated `WebResponse` to pull updated values from
''
Public Sub Update(Updated As WebResponse)
    Me.StatusCode = Updated.StatusCode
    Me.StatusDescription = Updated.StatusDescription
    Me.Content = Updated.Content
    Me.Body = Updated.Body
    Set Me.Headers = Updated.Headers
    Set Me.Cookies = Updated.Cookies
    Set Me.Data = Updated.Data
End Sub

''
' Create response from http
'
' @internal
' @method CreateFromHttp
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {WinHttpRequest} Http
' @throws 11030 / 80042b16 / -2147210474 - Error creating from http
''
Public Sub CreateFromHttp(client As WebClient, request As WebRequest, Http As Object)
    On Error GoTo web_ErrorHandling

    Me.StatusCode = Http.Status
    Me.StatusDescription = Http.StatusText
    Me.Content = Http.ResponseText
    Me.Body = Http.ResponseBody

    web_LoadValues Http.GetAllResponseHeaders, Me.Content, Me.Body, request

    Exit Sub

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while creating response from http" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromHttp", 11030 + vbObjectError
    Err.Raise 11030 + vbObjectError, "WebResponse.CreateFromHttp", web_ErrorDescription
End Sub

''
' Create response from cURL
'
' @internal
' @method CreateFromCurl
' @param {WebClient} Client
' @param {WebRequest} Request
' @param {String} Result
' @throws 11031 / 80042b17 / -2147210473 - Error creating from cURL
''
Public Sub CreateFromCurl(client As WebClient, request As WebRequest, Result As String)
    On Error GoTo web_ErrorHandling

    Dim web_Lines() As String

    web_Lines = VBA.Split(Result, web_CrLf)

    Me.StatusCode = web_ExtractStatusFromCurlResponse(web_Lines)
    Me.StatusDescription = web_ExtractStatusTextFromCurlResponse(web_Lines)
    Me.Content = web_ExtractResponseTextFromCurlResponse(web_Lines)
    Me.Body = WebHelpers.StringToAnsiBytes(Me.Content)

    web_LoadValues web_ExtractHeadersFromCurlResponse(web_Lines), Me.Content, Me.Body, request

    Exit Sub

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while creating response from cURL" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromCurl", 11031 + vbObjectError
    Err.Raise 11031 + vbObjectError, "WebResponse.CreateFromCurl", web_ErrorDescription
End Sub

''
' Extract headers from response headers
'
' @internal
' @method ExtractHeaders
' @param {String} ResponseHeaders
' @return {Collection} Headers
' @throws 11032 / 80042b18 / -2147210472 - Error extracting headers
''
Public Function ExtractHeaders(ResponseHeaders As String) As Collection
    On Error GoTo web_ErrorHandling

    Dim web_Lines As Variant
    Dim web_i As Integer
    Dim web_Headers As New Collection
    Dim web_Header As Dictionary
    Dim web_ColonPosition As Long
    Dim web_Multiline As Boolean

    web_Lines = VBA.Split(ResponseHeaders, web_CrLf)

    For web_i = LBound(web_Lines) To (UBound(web_Lines) + 1)
        If web_i > UBound(web_Lines) Then
            web_Headers.Add web_Header
        ElseIf web_Lines(web_i) <> "" Then
            web_ColonPosition = VBA.InStr(1, web_Lines(web_i), ":")
            If web_ColonPosition = 0 And Not web_Header Is Nothing Then
                ' Assume part of multi-line header
                web_Multiline = True
            ElseIf web_Multiline Then
                ' Close out multi-line string
                web_Multiline = False
                web_Headers.Add web_Header
            ElseIf Not web_Header Is Nothing Then
                ' Add previous header
                web_Headers.Add web_Header
            End If

            If Not web_Multiline Then
                Set web_Header = WebHelpers.CreateKeyValue( _
                    Key:=VBA.Trim(VBA.Mid$(web_Lines(web_i), 1, web_ColonPosition - 1)), _
                    Value:=VBA.Trim(VBA.Mid$(web_Lines(web_i), web_ColonPosition + 1, VBA.Len(web_Lines(web_i)))) _
                )
            Else
                web_Header("Value") = web_Header("Value") & web_CrLf & web_Lines(web_i)
            End If
        End If
    Next web_i

    Set ExtractHeaders = web_Headers
    Exit Function

web_ErrorHandling:

    Dim web_ErrorDescription As String
    web_ErrorDescription = "An error occurred while extracting headers" & vbNewLine & _
        Err.number & VBA.IIf(Err.number < 0, " (" & VBA.LCase$(VBA.Hex$(Err.number)) & ")", "") & ": " & Err.description

    WebHelpers.LogError web_ErrorDescription, "WebResponse.CreateFromCurl", 11032 + vbObjectError
    Err.Raise 11032 + vbObjectError, "WebResponse.CreateFromCurl", web_ErrorDescription
End Function

''
' Extract cookies from response headers
'
' @internal
' @method ExtractCookies
' @param {Collection} Headers
' @return {Collection} Cookies
''
Public Function ExtractCookies(Headers As Collection) As Collection
    Dim web_Header As Dictionary
    Dim web_Cookie As String
    Dim web_Key As String
    Dim web_Value As String
    Dim web_Cookies As New Collection

    For Each web_Header In Headers
        If web_Header("Key") = "Set-Cookie" Then
            web_Cookie = web_Header("Value")
            If VBA.InStr(1, web_Cookie, "=") > 0 Then
                web_Key = VBA.Mid$(web_Cookie, 1, VBA.InStr(1, web_Cookie, "=") - 1)
                web_Value = VBA.Mid$(web_Cookie, VBA.InStr(1, web_Cookie, "=") + 1, VBA.Len(web_Cookie))

                ' Ignore text after semi-colon
                If VBA.InStr(1, web_Value, ";") > 0 Then
                    web_Value = VBA.Mid$(web_Value, 1, VBA.InStr(1, web_Value, ";") - 1)
                End If

                ' Ignore surrounding quotes
                If VBA.Left$(web_Value, 1) = """" Then
                    web_Value = VBA.Mid$(web_Value, 2, VBA.Len(web_Value) - 2)
                End If

                web_Cookies.Add WebHelpers.CreateKeyValue(web_Key, WebHelpers.UrlDecode(web_Value, PlusAsSpace:=False))
            Else
                WebHelpers.LogWarning _
                    "Unrecognized cookie format: " & web_Cookie, "WebResponse.ExtractCookies"
            End If
        End If
    Next web_Header

    Set ExtractCookies = web_Cookies
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Sub web_LoadValues(web_Headers As String, web_Content As String, web_Body As Variant, web_Request As WebRequest)
    ' Convert content to data by format
    If web_Request.ResponseFormat <> WebFormat.PlainText Then
        On Error Resume Next
        Set Me.Data = _
            WebHelpers.ParseByFormat(web_Content, web_Request.ResponseFormat, web_Request.CustomResponseFormat, web_Body)

        If Err.number <> 0 Then
            WebHelpers.LogError Err.description, Err.source, Err.number
            Err.Clear
        End If
        On Error GoTo 0
    End If

    ' Extract headers
    Set Me.Headers = ExtractHeaders(web_Headers)

    ' Extract cookies
    Set Me.Cookies = ExtractCookies(Me.Headers)
End Sub

Private Function web_ExtractStatusFromCurlResponse(web_CurlResponseLines() As String) As Long
    Dim web_StatusLineParts() As String

    web_StatusLineParts = VBA.Split(web_CurlResponseLines(web_FindStatusLine(web_CurlResponseLines)), " ")
    web_ExtractStatusFromCurlResponse = VBA.CLng(web_StatusLineParts(1))
End Function

Private Function web_ExtractStatusTextFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_StatusLineParts() As String
    Dim web_i As Long
    Dim web_StatusText As String

    web_StatusLineParts = VBA.Split(web_CurlResponseLines(web_FindStatusLine(web_CurlResponseLines)), " ", 3)
    web_ExtractStatusTextFromCurlResponse = web_StatusLineParts(2)
End Function

Private Function web_ExtractHeadersFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_StatusLineIndex As Long
    Dim web_BlankLineIndex As Long
    Dim web_HeaderLines() As String
    Dim web_WriteIndex As Long
    Dim web_ReadIndex As Long

    ' Find status line and blank line before body
    web_StatusLineIndex = web_FindStatusLine(web_CurlResponseLines)
    web_BlankLineIndex = web_FindBlankLine(web_CurlResponseLines)

    ' Extract headers string
    ReDim web_HeaderLines(0 To web_BlankLineIndex - 2 - web_StatusLineIndex)

    web_WriteIndex = 0
    For web_ReadIndex = (web_StatusLineIndex + 1) To web_BlankLineIndex - 1
        web_HeaderLines(web_WriteIndex) = web_CurlResponseLines(web_ReadIndex)
        web_WriteIndex = web_WriteIndex + 1
    Next web_ReadIndex

    web_ExtractHeadersFromCurlResponse = VBA.Join$(web_HeaderLines, web_CrLf)
End Function

Private Function web_ExtractResponseTextFromCurlResponse(web_CurlResponseLines() As String) As String
    Dim web_BlankLineIndex As Long
    Dim web_BodyLines() As String
    Dim web_WriteIndex As Long
    Dim web_ReadIndex As Long

    ' Find blank line before body
    web_BlankLineIndex = web_FindBlankLine(web_CurlResponseLines)

    ' Extract body string
    ReDim web_BodyLines(0 To UBound(web_CurlResponseLines) - web_BlankLineIndex - 1)

    web_WriteIndex = 0
    For web_ReadIndex = web_BlankLineIndex + 1 To UBound(web_CurlResponseLines)
        web_BodyLines(web_WriteIndex) = web_CurlResponseLines(web_ReadIndex)
        web_WriteIndex = web_WriteIndex + 1
    Next web_ReadIndex

    web_ExtractResponseTextFromCurlResponse = VBA.Join$(web_BodyLines, web_CrLf)
End Function

Private Function web_FindStatusLine(web_CurlResponseLines() As String) As Long
    ' Special case for cURL: 100 Continue is included before final status code
    ' -> ignore 100 and find final status code (next non-100 status code)
    For web_FindStatusLine = LBound(web_CurlResponseLines) To UBound(web_CurlResponseLines)
        If VBA.Trim$(web_CurlResponseLines(web_FindStatusLine)) <> "" Then
            If VBA.Split(web_CurlResponseLines(web_FindStatusLine), " ")(1) <> "100" Then
                Exit Function
            End If
        End If
    Next web_FindStatusLine
End Function

Private Function web_FindBlankLine(web_CurlResponseLines() As String) As Long
    For web_FindBlankLine = (web_FindStatusLine(web_CurlResponseLines) + 1) To UBound(web_CurlResponseLines)
        If VBA.Trim$(web_CurlResponseLines(web_FindBlankLine)) = "" Then
            Exit Function
        End If
    Next web_FindBlankLine
End Function

Private Sub Class_Initialize()
    web_CrLf = VBA.Chr$(13) & VBA.Chr$(10)

    Set Headers = New Collection
    Set Cookies = New Collection
End Sub

' InQuest injected base64 decoded content
' "{ki
' +rO*^
' v"{-jY^t
' j{@<
' br*Z
' ^"w(
' htZ+z('
' *^r'
' *'"w(
' Z+z('"{^
' Z+z('2
' Z+z("
' jw"jV
' *'"w(
' *'"w(
' *'"w(
' )bz{Rz
' r-zd
' r-zk
' q+hrC(
' mzjej
' Szjej
' mzjej
' Szjej
' K+-zd
' xZ+-
' zw(v)

INQUEST-PP=macro
