Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
Application.ScreenUpdating = False
On Error GoTo Err_Worksheet_Change

' If the user changes the Shared Tools Indicator from Yes to No or vice versa,
'   then adjust the New Tools and Modified Delete worksheets to either show or
'   hide the LCR and Cost Allocation sections
  
  If Target.Row = 6 And Target.Column = 13 Then
    If UCase(Target.Value) = "YES" Then
      Worksheets(3).Columns("AA:BU").EntireColumn.Hidden = False
      Worksheets(4).Columns("W:BQ").EntireColumn.Hidden = False
    Else
      Worksheets(3).Columns("AA:BU").EntireColumn.Hidden = True
      Worksheets(4).Columns("W:BQ").EntireColumn.Hidden = True
    End If
  End If

Exit_Worksheet_Change:
    Application.ScreenUpdating = True
    Exit Sub

Err_Worksheet_Change:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Worksheet_Change" & vbCrLf & "SHEET : EZ1810 Welcome Screen"
    Application.ScreenUpdating = True
    Resume Exit_Worksheet_Change
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const CON_COL_TC = 5            ' TOOL CATEGORY
Const CON_COL_TT = 6            ' TOOL TYPE
Const CON_COL_CURR = 10         ' CURRENCY
Const CON_COL_CM = 10           ' COUNTRY OF TOOL MANUFACTURER
Const CON_COL_TL = 11           ' TOOL LOCATION COUNTRY
Const CON_COL_GMML = 13         ' COUNTRY OF GM MANUFACTURING LOCATION
Const CON_COL_PP = 17           ' PROGRESSIVE PAYMENT

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
On Error GoTo Err_Worksheet_BeforeDoubleClick
  
  Dim bolValid As Boolean
  Dim intLCV As Integer
  Dim intMax As Integer
  
  gblRow = Target.Row
  gblCol = Target.Column
  gblSheet = "New Tools EZ1810 R6.5"

  bolValid = False
  intLCV = 22

  While (ActiveSheet.Cells(intLCV, 2).Value <> "" And ActiveSheet.Cells(intLCV, 2).Value <> "END")
    intLCV = intLCV + 1
  Wend
  intMax = intLCV - 1

  If gblRow > intMax Then
    Cancel = True
  Else
    If gblRow > 21 Then
      Select Case gblCol
      Case CON_COL_TC
        gblDataStart = 2
        gblDataEnd = 7
        gblDataColumn = 13
        gblTitle = "Select Tool Category"
        gblCaption = "Please select the Tool Category from the options below."
        bolValid = True
      Case CON_COL_TT
        If ActiveSheet.Cells(gblRow, 5).Value = "" Then
          MsgBox "ERROR : Please select a Tool Category prior to selecting a Tool Type.", vbCritical + vbOKOnly, "ERROR"
          Cancel = True
        Else
          With frmToolingType
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
            .Show
          End With
          Cancel = True
        End If
      Case CON_COL_CM
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Country of Tool Manufacturer"
        gblCaption = "Please select the Country of Tool Manufacturer from the options below."
        bolValid = True
      Case CON_COL_TL
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Tool Location Country"
        gblCaption = "Please select the Tool Location Country from the options below."
        bolValid = True
      Case CON_COL_GMML
        gblDataStart = 2
        gblDataEnd = 23
        gblDataColumn = 8
        gblTitle = "Select Country of GM Manufacturing Location"
        gblCaption = "Please select the Country of GM Manufacturing Location from the options below."
        bolValid = True
      Case CON_COL_PP
        With frmProgressPayment
          .StartUpPosition = 0
          .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
          .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
          .Show
        End With
        Cancel = True
      End Select
    Else
      If (gblRow = 8 And gblCol = CON_COL_CURR) Then
        gblDataStart = 2
        gblDataEnd = 192
        gblDataColumn = 10
        gblTitle = "Select Currency"
        gblCaption = "Please select the Currency from the options below."
        bolValid = True
      End If
    End If
    If bolValid Then
      With frmGeneric
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
      End With
      Cancel = True
    End If
  End If
  
Exit_Worksheet_BeforeDoubleClick:
    Exit Sub

Err_Worksheet_BeforeDoubleClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Worksheet_BeforeDoubleClick" & vbCrLf & "SHEET : New Tools EZ1810"
    Resume Exit_Worksheet_BeforeDoubleClick
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error GoTo Err_Worksheet_BeforeRightClick

  Dim bolValid As Boolean
  Dim intLCV As Integer
  Dim intMax As Integer
  
  gblRow = Target.Row
  gblCol = Target.Column
  gblSheet = "New Tools EZ1810 R6.5"
  
  bolValid = False
  intLCV = 22

  While (ActiveSheet.Cells(intLCV, 2).Value <> "" And ActiveSheet.Cells(intLCV, 2).Value <> "END")
    intLCV = intLCV + 1
  Wend
  intMax = intLCV - 1

  If gblRow > intMax Then
    Cancel = True
  Else
    If gblRow > 21 Then
      Select Case gblCol
      Case CON_COL_TC
        gblDataStart = 2
        gblDataEnd = 7
        gblDataColumn = 13
        gblTitle = "Select Tool Category"
        gblCaption = "Please select the Tool Category from the options below."
        bolValid = True
      Case CON_COL_TT
        If ActiveSheet.Cells(gblRow, 5).Value = "" Then
          MsgBox "ERROR : Please select a Tool Category prior to selecting a Tool Type.", vbCritical + vbOKOnly, "ERROR"
          Cancel = True
        Else
          With frmToolingType
            .StartUpPosition = 0
            .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
            .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
            .Show
          End With
          Cancel = True
        End If
      Case CON_COL_CM
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Country of Tool Manufacturer"
        gblCaption = "Please select the Country of Tool Manufacturer from the options below."
        bolValid = True
      Case CON_COL_TL
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Tool Location Country"
        gblCaption = "Please select the Tool Location Country from the options below."
        bolValid = True
      Case CON_COL_GMML
        gblDataStart = 2
        gblDataEnd = 23
        gblDataColumn = 8
        gblTitle = "Select Country of GM Manufacturing Location"
        gblCaption = "Please select the Country of GM Manufacturing Location from the options below."
        bolValid = True
      Case CON_COL_PP
        With frmProgressPayment
          .StartUpPosition = 0
          .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
          .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
          .Show
        End With
        Cancel = True
      End Select
    Else
      If (gblRow = 8 And gblCol = CON_COL_CURR) Then
        gblDataStart = 2
        gblDataEnd = 192
        gblDataColumn = 10
        gblTitle = "Select Currency"
        gblCaption = "Please select the Currency from the options below."
        bolValid = True
      End If
    End If
    If bolValid Then
      With frmGeneric
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
      End With
      Cancel = True
    End If
  End If

Exit_Worksheet_BeforeRightClick:
    Exit Sub

Err_Worksheet_BeforeRightClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Worksheet_BeforeRightClick" & vbCrLf & "SHEET : New Tools EZ1810"
    Resume Exit_Worksheet_BeforeRightClick
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Application.ScreenUpdating = False
Application.EnableEvents = False
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets(3)
ws.Columns("AA").ColumnWidth = 0.0625
ws.Columns("AM").ColumnWidth = 0.0625
ws.Columns("AX").ColumnWidth = 0.0625


Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const CON_COL_MD = 4            ' MODIFY DELETE
Const CON_COL_BSOT = 7          ' BUILD STATUS OF TOOL
Const CON_COL_CLOT = 8          ' CURRENT LOCATION OF TOOL
Const CON_COL_CURR = 10         ' CURRENCY
Const CON_COL_TMD = 11          ' COUNTRY OF TOOL MODIFICATION / DELETE
Const CON_COL_GMML = 12         ' COUNTRY OF GM MANUFACTURING LOCATION

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
On Error GoTo Err_Worksheet_BeforeDoubleClick

  Dim bolValid As Boolean
  Dim intLCV As Integer
  Dim intMax As Integer
  
  gblRow = Target.Row
  gblCol = Target.Column
  gblSheet = "Modified Delete EZ1810 R6.5"
  
  bolValid = False
  intLCV = 22

  While (ActiveSheet.Cells(intLCV, 2).Value <> "" And ActiveSheet.Cells(intLCV, 2).Value <> "END")
    intLCV = intLCV + 1
  Wend
  intMax = intLCV - 1

  If gblRow > intMax Then
    Cancel = True
  Else
    If gblRow > 21 Then
      Select Case gblCol
      Case CON_COL_MD
        gblTitle = "Select Modify / Delete"
        gblCaption = "Please select Modify / Delete from the options below."
        bolValid = True
      Case CON_COL_BSOT
        gblDataStart = 41
        gblDataEnd = 44
        gblDataColumn = 13
        gblTitle = "Select Current Build Status of Tool"
        gblCaption = "Please select the Current Build Status of Tool from the options below."
        bolValid = True
      Case CON_COL_CLOT
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Country of Current Location of Tool"
        gblCaption = "Please select the Country of Current Location of Tool from the options below."
        bolValid = True
      Case CON_COL_TMD
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Tool Location Country"
        gblCaption = "Please select the Tool Location Country from the options below."
        bolValid = True
      Case CON_COL_GMML
        gblDataStart = 2
        gblDataEnd = 24
        gblDataColumn = 8
        gblTitle = "Select Country of GM Manufacturing Location"
        gblCaption = "Please select the Country of GM Manufacturing Location from the options below."
        bolValid = True
      End Select
    Else
      If (gblRow = 8 And gblCol = CON_COL_CURR) Then
        gblDataStart = 2
        gblDataEnd = 192
        gblDataColumn = 10
        gblTitle = "Select Currency"
        gblCaption = "Please select the Currency from the options below."
        bolValid = True
      End If
    End If
    If bolValid Then
      With frmGeneric
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
      End With
      Cancel = True
    End If
  End If

Exit_Worksheet_BeforeDoubleClick:
    Exit Sub

Err_Worksheet_BeforeDoubleClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Worksheet_BeforeDoubleClick" & vbCrLf & "SHEET : Modify Delete EZ1810"
    Resume Exit_Worksheet_BeforeDoubleClick
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
On Error GoTo Err_Worksheet_BeforeRightClick

  Dim bolValid As Boolean
  Dim intLCV As Integer
  Dim intMax As Integer
  
  gblRow = Target.Row
  gblCol = Target.Column
  gblSheet = "Modified Delete EZ1810 R6.5"
  
  bolValid = False
  intLCV = 22

  While (ActiveSheet.Cells(intLCV, 2).Value <> "" And ActiveSheet.Cells(intLCV, 2).Value <> "END")
    intLCV = intLCV + 1
  Wend
  intMax = intLCV - 1

  If gblRow > intMax Then
    Cancel = True
  Else
    If gblRow > 21 Then
      Select Case gblCol
      Case CON_COL_MD
        gblTitle = "Select Modify / Delete"
        gblCaption = "Please select Modify / Delete from the options below."
        bolValid = True
      Case CON_COL_BSOT
        gblDataStart = 41
        gblDataEnd = 44
        gblDataColumn = 13
        gblTitle = "Select Current Build Status of Tool"
        gblCaption = "Please select the Current Build Status of Tool from the options below."
        bolValid = True
      Case CON_COL_CLOT
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Country of Current Location of Tool"
        gblCaption = "Please select the Country of Current Location of Tool from the options below."
        bolValid = True
      Case CON_COL_TMD
        gblDataStart = 2
        gblDataEnd = 54
        gblDataColumn = 7
        gblTitle = "Select Tool Location Country"
        gblCaption = "Please select the Tool Location Country from the options below."
        bolValid = True
      Case CON_COL_GMML
        gblDataStart = 2
        gblDataEnd = 24
        gblDataColumn = 8
        gblTitle = "Select Country of GM Manufacturing Location"
        gblCaption = "Please select the Country of GM Manufacturing Location from the options below."
        bolValid = True
      End Select
    Else
      If (gblRow = 8 And gblCol = CON_COL_CURR) Then
        gblDataStart = 2
        gblDataEnd = 192
        gblDataColumn = 10
        gblTitle = "Select Currency"
        gblCaption = "Please select the Currency from the options below."
        bolValid = True
      End If
    End If
    If bolValid Then
      With frmGeneric
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
      End With
      Cancel = True
    End If
  End If

Exit_Worksheet_BeforeRightClick:
    Exit Sub

Err_Worksheet_BeforeRightClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Worksheet_BeforeRightClick" & vbCrLf & "SHEET : Modify Delete EZ1810"
    Resume Exit_Worksheet_BeforeRightClick
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)

Application.ScreenUpdating = False
Application.EnableEvents = False
Dim ws As Worksheet
Set ws = ThisWorkbook.Sheets(4)
ws.Columns("W").ColumnWidth = 0.0625
ws.Columns("AI").ColumnWidth = 0.0625
ws.Columns("AT").ColumnWidth = 0.0625


Application.ScreenUpdating = True
Application.EnableEvents = True

End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
On Error GoTo Err_Workbook_BeforeSave

  Dim shpOption1 As Shape
  Dim shpOption2 As Shape
  Dim shpOption3 As Shape
  Dim shpOption4 As Shape
  Dim strError As String
  
  Set shpOption1 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 1")
  Set shpOption2 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 2")
  Set shpOption3 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 3")
  Set shpOption4 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 4")
  
  If Worksheets("EZ1810 Welcome Screen").Range("L10") <> Null Then
    If shpOption1.ControlFormat.Value = xlOn Then
      strError = fncCheckNew
      If strError <> "" Then
        If (6 <> MsgBox("There are Errors on the 1810.  Save anyways?", vbQuestion + vbYesNo, "ERRORS IDENTIFIED")) Then
          Cancel = True
        End If
      End If
    End If
  
    If shpOption2.ControlFormat.Value = xlOn Then
      strError = fncCheckMD
      If strError <> "" Then
        If (6 <> MsgBox("There are Errors on the 1810.  Save anyways?", vbQuestion + vbYesNo, "ERRORS IDENTIFIED")) Then
          Cancel = True
        End If
      End If
    End If
  
    If shpOption3.ControlFormat.Value = xlOn Then
      strError = fncCheckNew & fncCheckMD
      If strError <> "" Then
        If (6 <> MsgBox("There are Errors on the 1810.  Save anyways?", vbQuestion + vbYesNo, "ERRORS IDENTIFIED")) Then
          Cancel = True
        End If
      End If
    End If
  
    If shpOption4.ControlFormat.Value = xlOn Then
      strError = fncCheckNew & fncCheckMD
      If strError <> "" Then
        If (6 <> MsgBox("There are Errors on the 1810.  Save anyways?", vbQuestion + vbYesNo, "ERRORS IDENTIFIED")) Then
          Cancel = True
        End If
      End If
    End If
  End If

Exit_Workbook_BeforeSave:
    Exit Sub

Err_Workbook_BeforeSave:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : Workbook_BeforeSave" & vbCrLf & "SHEET : All"
    Resume Exit_Workbook_BeforeSave
End Sub

Private Sub Workbook_Open()
On Error GoTo Err_Workbook_Open

  Worksheets(1).Protect Password:=gblPassword, UserInterfaceOnly:=True
  Worksheets(2).Protect Password:=gblPassword, UserInterfaceOnly:=True
  Worksheets(3).Protect Password:=gblPassword, UserInterfaceOnly:=True
  Worksheets(4).Protect Password:=gblPassword, UserInterfaceOnly:=True
  Worksheets(5).Visible = xlVeryHidden
  Worksheets(6).Visible = xlVeryHidden
  Sheets(2).Activate
  Application.DisplayCommentIndicator = xlCommentIndicatorOnly
  
Exit_Workbook_Open:
    Exit Sub

Err_Workbook_Open:
'Suppress Errors from Displaying as they are due to either Enabling Macros or exiting Read Only Mode and had no effect on the functionality
    Resume Exit_Workbook_Open
End Sub
Attribute VB_Name = "frmGeneric"
Attribute VB_Base = "0{B0644F5E-4A2E-4438-A1E0-2ED7D2B22F66}{7782CDED-E33A-4DB7-B787-C02875F06E71}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Function fncSelect()
On Error GoTo Err_fncSelect

  Dim strR1US, strR2US As String
  Dim strR1MX, strR2MX As String
  Dim strR1CA, strR2CA As String
  Dim strR1TC As String
  Dim strReset As String
  Dim intCC As Integer
  
  Select Case gblSheet
  Case "New Tools EZ1810 R6.5"
    strR1US = "AA" & gblRow & ":AE" & gblRow
    strR2US = "AG" & gblRow & ":AK" & gblRow
    strR1MX = "AA" & gblRow & ":AF" & gblRow
    strR2MX = "AH" & gblRow & ":AK" & gblRow
    strR1CA = "AA" & gblRow & ":AG" & gblRow
    strR2CA = "AI" & gblRow & ":AK" & gblRow
    strR1TC = "AK" & gblRow & ":AK" & gblRow
    strReset = "AA" & gblRow & ":AK" & gblRow
    intCC = 14
    
    Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value
    If gblCol = 5 Then
      gblCol = gblCol + 1
      ActiveSheet.Range("D" & gblRow).Value = ""
      With frmToolingType
        .StartUpPosition = 0
        .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
        .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
        .Show
      End With
    End If
' If Country of Tool Manufacturer is the same as the Tool Location Country, then Customs
' defaults to 0.000% and is not editable
    If Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 10).Value = Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 11).Value Then
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Value = 0
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Locked = True
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.ThemeColor = xlThemeColorAccent3
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.TintAndShade = 0.599993896298105
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.PatternTintAndShade = 0
    Else
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Locked = False
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.Pattern = xlNone
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.TintAndShade = 0
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, 16).Interior.PatternTintAndShade = 0
    End If
  Case "Modified Delete EZ1810 R6.5"
    strR1US = "W" & gblRow & ":AA" & gblRow
    strR2US = "AC" & gblRow & ":AG" & gblRow
    strR1MX = "W" & gblRow & ":AB" & gblRow
    strR2MX = "AD" & gblRow & ":AG" & gblRow
    strR1CA = "W" & gblRow & ":AC" & gblRow
    strR2CA = "AE" & gblRow & ":AG" & gblRow
    strR1TC = "AG" & gblRow & ":AG" & gblRow
    strReset = "W" & gblRow & ":AG" & gblRow
    intCC = 12
    
    Worksheets("Modified Delete EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value
  End Select
  frmGeneric.Hide
  
  With Range(strReset).Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
  End With
  Range(strReset).ClearContents
  Range(strReset).Locked = False
  
  Select Case Worksheets(gblSheet).Cells(gblRow, intCC).Value
  Case "1000"
    Range(strR1US).Locked = True
    Range(strR2US).Locked = True
    With Range(strR1US).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
    With Range(strR2US).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
  Case "3000"
    Range(strR1CA).Locked = True
    Range(strR2CA).Locked = True
    With Range(strR1CA).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
    With Range(strR2CA).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
  Case "7090"
    Range(strR1MX).Locked = True
    Range(strR2MX).Locked = True
    With Range(strR1MX).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
    With Range(strR2MX).Interior
      .ThemeColor = xlThemeColorAccent3
      .TintAndShade = 0.599993896298105
      .PatternTintAndShade = 0
    End With
  Case "TBD"
    If gblSheet = "New Tools EZ1810 R6.5" Then
      If Worksheets(gblSheet).Cells(gblRow, 11).Value = "Mexico" And Worksheets(gblSheet).Cells(gblRow, 13).Value = "Multiple" Then
        Range(strR1TC).Locked = True
        With Range(strR1TC).Interior
          .ThemeColor = xlThemeColorAccent3
          .TintAndShade = 0.599993896298105
         .PatternTintAndShade = 0
        End With
      End If
    Else
      If Worksheets(gblSheet).Cells(gblRow, 11).Value = "Mexico" And Worksheets(gblSheet).Cells(gblRow, 12).Value = "Multiple" Then
        Range(strR1TC).Locked = True
        With Range(strR1TC).Interior
          .ThemeColor = xlThemeColorAccent3
          .TintAndShade = 0.599993896298105
         .PatternTintAndShade = 0
        End With
      End If
    End If
  End Select

Exit_fncSelect:
    Exit Function

Err_fncSelect:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncSelect" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_fncSelect
End Function

Private Sub cmdCancel_Click()
On Error GoTo Err_cmdCancel_Click

  frmGeneric.Hide

Exit_cmdCancel_Click:
    Exit Sub

Err_cmdCancel_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdCancel_Click" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_cmdCancel_Click
End Sub

Private Sub cmdOK_Click()
On Error GoTo Err_cmdOK_Click

  fncSelect

Exit_cmdOK_Click:
    Exit Sub

Err_cmdOK_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdOK_Click" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_cmdOK_Click
End Sub

Private Sub lstData_Click()
On Error GoTo Err_lstData_Click

  cmdOK.Enabled = True
 
Exit_lstData_Click:
    Exit Sub

Err_lstData_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_Click" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_lstData_Click
End Sub

Private Sub lstData_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_lstData_DblClick
  
  fncSelect

Exit_lstData_DblClick:
    Exit Sub

Err_lstData_DblClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_DblClick" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_lstData_DblClick
End Sub

Private Sub UserForm_Activate()
On Error GoTo Err_UserForm_Activate

  Dim intLCV As Integer

  cmdOK.Enabled = False
  
  For intLCV = 1 To lstData.ListCount
    lstData.RemoveItem 0
  Next intLCV
  
  frmGeneric.Caption = gblTitle
  lblTitle.Caption = gblCaption

  If (gblRow = 8) Then
    lstData.ColumnCount = 2
    lstData.ColumnWidths = "30;125"
  Else
    lstData.ColumnCount = 1
    lstData.ColumnWidths = "155"
  End If
  
  Select Case gblSheet
  Case "New Tools EZ1810 R6.5"
    For intLCV = gblDataStart To gblDataEnd
      If gblTitle = "Select Country of GM Manufacturing Location" And Worksheets("Data").Cells(intLCV, gblDataColumn) = "Multiple" And Worksheets("EZ1810 Welcome Screen").Cells(6, 13) = "No" Then
      Else
        If (gblRow = 8) Then
          lstData.AddItem Worksheets("Data").Cells(intLCV, gblDataColumn)
          lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, gblDataColumn + 1)
        Else
          lstData.AddItem Worksheets("Data").Cells(intLCV, gblDataColumn)
        End If
      End If
    Next intLCV
  Case "Modified Delete EZ1810 R6.5"
    If (gblCol = 4) Then
      lstData.AddItem "Modify"
      lstData.AddItem "Delete"
      lstData.AddItem "Decrease"
    Else
      For intLCV = 1 To lstData.ListCount
        lstData.RemoveItem 0
      Next intLCV
    
      frmGeneric.Caption = gblTitle
      lblTitle.Caption = gblCaption

      For intLCV = gblDataStart To gblDataEnd
        If gblTitle = "Select Country of GM Manufacturing Location" And Worksheets("Data").Cells(intLCV, gblDataColumn) = "Multiple" And Worksheets("EZ1810 Welcome Screen").Cells(6, 13) = "No" Then
        Else
          If (gblRow = 8) Then
            lstData.AddItem Worksheets("Data").Cells(intLCV, gblDataColumn)
            lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, gblDataColumn + 1)
          Else
            lstData.AddItem Worksheets("Data").Cells(intLCV, gblDataColumn)
          End If
        End If
      Next intLCV
    End If
  End Select
  cmdCancel.SetFocus

Exit_UserForm_Activate:
    Exit Sub

Err_UserForm_Activate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : UserForm_Activate" & vbCrLf & "SHEET : frmGeneric"
    Resume Exit_UserForm_Activate
End Sub
Attribute VB_Name = "frmModifyDelete"
Attribute VB_Base = "0{68FF7CFB-F7A9-49B8-A335-D7D60B60351D}{6AD10BC8-8B67-430A-975B-987C5851BC17}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
On Error GoTo Err_cmdCancel_Click

  frmModifyDelete.Hide
  gblCancel = -1

Exit_cmdCancel_Click:
    Exit Sub

Err_cmdCancel_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdCancel_Click" & vbCrLf & "SHEET : frmModifyDelete"
    Resume Exit_cmdCancel_Click
End Sub

Private Sub cmdOK_Click()
On Error GoTo Err_cmdOK_Click
  
  If txtWBS = "" Then
    lblError.Visible = True
  Else
    If txtGL = "" Then
      lblError.Visible = True
    Else
      lblError.Visible = False
      gblWBS = txtWBS
      gblGL = txtGL
      frmModifyDelete.Hide
    End If
  End If
  
Exit_cmdOK_Click:
    Exit Sub

Err_cmdOK_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdOK_Click" & vbCrLf & "SHEET : frmModifyDelete"
    Resume Exit_cmdOK_Click
End Sub

Private Sub UserForm_Activate()
On Error GoTo Err_UserForm_Activate

  gblWBS = ""
  gblGL = ""
  lblError.Caption = "WBS and G/L Numbers are required to proceed."
  lblError.Visible = False
  
Exit_UserForm_Activate:
    Exit Sub

Err_UserForm_Activate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : UserForm_Activate" & vbCrLf & "SHEET : frmModifyDelete"
    Resume Exit_UserForm_Activate
End Sub

Attribute VB_Name = "frmProgressPayment"
Attribute VB_Base = "0{26F23819-D45C-46C1-B2DA-E46D2869C357}{55685D00-2FDF-44BC-B725-7A04A173A0A0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function fncAdditionalData()
On Error GoTo Err_fncAdditionalData
    
  lbl2.Visible = False
  txt2.Visible = False
  lbl3.Visible = False
  txt3.Visible = False
  
  Select Case lstData.Value
  Case "Pull ahead tooling"
    lbl2.Visible = True
    lbl2.Caption = "Quantity Pulled Ahead"
    txt2.Visible = True
    lbl3.Visible = True
    lbl3.Caption = "Unit Cost of Pull Ahead"
    txt3.Visible = True
  End Select
  
Exit_fncAdditionalData:
    Exit Function

Err_fncAdditionalData:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncAdditionalData" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_fncAdditionalData
End Function

Private Function fncSelect()
On Error GoTo Err_fncSelect

  If lstData.Value = "Pull ahead tooling" Then
    If txt2.Value = "" Or txt3.Value = "" Then
      MsgBox "Quantity Pulled Ahead and Unit Cost of Pull Ahead are required.", vbCritical + vbOKOnly, "ERROR"
    Else
      Select Case gblSheet
      Case "New Tools EZ1810 R6.5"
        Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt2.Value & "/" & txt3.Value
      Case "Modified Delete EZ1810 R6.5"
        Worksheets("Modified Delete EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt2.Value & "/" & txt3.Value
      End Select
      frmProgressPayment.Hide
    End If
  Else
    Select Case gblSheet
    Case "New Tools EZ1810 R6.5"
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value
    Case "Modified Delete EZ1810 R6.5"
      Worksheets("Modified Delete EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value
    End Select
    frmProgressPayment.Hide
  End If
  
Exit_fncSelect:
    Exit Function

Err_fncSelect:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncSelect" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_fncSelect
End Function

Private Sub cmdCancel_Click()
On Error GoTo Err_cmdCancel_Click

  Unload frmProgressPayment

Exit_cmdCancel_Click:
    Exit Sub

Err_cmdCancel_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdCancel_Click" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_cmdCancel_Click
End Sub

Private Sub cmdOK_Click()
On Error GoTo Err_cmdOK_Click

  fncSelect
  
Exit_cmdOK_Click:
    Exit Sub

Err_cmdOK_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdOK_Click" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_cmdOK_Click
End Sub

Private Sub lstData_Click()
On Error GoTo Err_lstData_Click

  fncAdditionalData
  cmdOK.Enabled = True
 
Exit_lstData_Click:
    Exit Sub

Err_lstData_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_Click" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_lstData_Click
End Sub

Private Sub lstData_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_lstData_DblClick
  
  fncSelect

Exit_lstData_DblClick:
    Exit Sub

Err_lstData_DblClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_DblClick" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_lstData_DblClick
End Sub

Private Sub txt2_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txt2_BeforeUpdate

  If Not IsNumeric(txt2.Value) Then
    MsgBox "ERROR : Value must be Numeric.", vbCritical + vbOKOnly, "ERROR"
    Cancel = True
  End If
  
Exit_txt2_BeforeUpdate:
    Exit Sub

Err_txt2_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txt2_BeforeUpdate" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_txt2_BeforeUpdate
End Sub

Private Sub txt3_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txt3_BeforeUpdate

  If Not IsNumeric(txt3.Value) Then
    MsgBox "ERROR : Value must be Numeric.", vbCritical + vbOKOnly, "ERROR"
    Cancel = True
  End If
  
Exit_txt3_BeforeUpdate:
    Exit Sub

Err_txt3_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txt3_BeforeUpdate" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_txt3_BeforeUpdate
End Sub

Private Sub UserForm_Activate()
On Error GoTo Err_UserForm_Activate

  Dim intLCV As Integer
   
  For intLCV = 1 To lstData.ListCount
    lstData.RemoveItem 0
  Next intLCV
 
  frmToolingType.Caption = "Select Progress Payment Type"
  lblTitle.Caption = "Please select the Progress Payment Type from the options below."
  lstData.ColumnWidths = "200"
  
    For intLCV = 35 To 38
      lstData.AddItem Worksheets("Data").Cells(intLCV, 13)
    Next intLCV
  cmdCancel.SetFocus
  
Exit_UserForm_Activate:
    Exit Sub

Err_UserForm_Activate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : UserForm_Activate" & vbCrLf & "SHEET : frmProgressPayment"
    Resume Exit_UserForm_Activate
End Sub
Attribute VB_Name = "frmToolingType"
Attribute VB_Base = "0{24451709-9685-43C7-B933-9F7545E45E69}{8B322F81-4F7C-40AA-B065-1E31FAE35352}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Function fncAdditionalData()
On Error GoTo Err_fncAdditionalData

  lblOther.Visible = False
  txtOther.Visible = False
  lbl1.Visible = False
  txt1.Visible = False
  lbl2.Visible = False
  txt2.Visible = False
  lbl3.Visible = False
  txt3.Visible = False

  Select Case Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol - 1).Value
  Case "Jig_or_Fixture"
    Select Case lstData.Value
    Case "Other"
      lblOther.Visible = True
      txtOther.Visible = True
    End Select
  Case "Mold"
    Select Case lstData.Value
    Case "Blow Mold"
      lbl1.Visible = True
      lbl1.Caption = "Total Number of Cavities"
      txt1.Visible = True
    Case "InjectionPlastic", "Injection Rubber", "Inj2shotRotation", "Inj2shotRetrCore"
      lbl1.Visible = True
      lbl1.Caption = "Total Number of Cavities"
      txt1.Visible = True
      lbl2.Visible = True
      lbl2.Caption = "Total Number of Injection Points"
      txt2.Visible = True
      lbl3.Visible = True
      lbl3.Caption = "Total Number of Mechanisms"
      txt3.Visible = True
    Case "Other"
      lblOther.Visible = True
      txtOther.Visible = True
    End Select
  Case "Casting"
    Select Case lstData.Value
    Case "Other"
      lblOther.Visible = True
      txtOther.Visible = True
    Case Else
      lbl1.Visible = True
      lbl1.Caption = "Total Number of Cavities"
      txt1.Visible = True
    End Select
  Case "Stamping"
    Select Case lstData.Value
    Case "Progressive Die"
      lbl1.Visible = True
      lbl1.Caption = "Coil Width (mm)"
      txt1.Visible = True
      lbl2.Visible = True
      lbl2.Caption = "Number of Stations"
      txt2.Visible = True
    Case "Other"
      lblOther.Visible = True
      txtOther.Visible = True
    Case Else
      lbl1.Visible = True
      lbl1.Caption = "Material Width (mm)"
      txt1.Visible = True
      lbl2.Visible = True
      lbl2.Caption = "Material Length (mm)"
      txt2.Visible = True
    End Select
  Case "Forming", "Misc"
    Select Case lstData.Value
    Case "Other"
      lblOther.Visible = True
      txtOther.Visible = True
    End Select
  End Select

Exit_fncAdditionalData:
    Exit Function

Err_fncAdditionalData:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncAdditionalData" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_fncAdditionalData
End Function

Private Function fncSelect()
On Error GoTo Err_fncSelect

  Dim intCode As Integer
  Dim strAdditional As String
  
  If (txtAdditional <> "") Then
    strAdditional = "-" & Left(txtAdditional, 15)
  Else
    strAdditional = ""
  End If
  
  intCode = 0
  If txt1.Visible Then
    intCode = intCode + 1
  End If
  If txt2.Visible Then
    intCode = intCode + 2
  End If
  If txt3.Visible Then
    intCode = intCode + 4
  End If
  If txtOther.Visible Then
    intCode = intCode + 8
  End If

  If ((txt1.Visible = True) And (txt1.Value = "")) Or ((txt2.Visible = True) And (txt2.Value = "")) Or ((txt3.Visible = True) And (txt3.Value = "")) Or ((txtOther.Visible = True) And (txtOther.Value = "")) Then
     MsgBox "ERROR : Please enter all required fields.", vbCritical + vbOKOnly, "ERROR"
  Else
    Select Case intCode
    Case 0
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & strAdditional
    Case 1
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & strAdditional
    Case 3
      If (Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol - 1).Value = "Stamping") Then
        If (lstData.Value = "Progressive Die") Then
          Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & "/" & txt2.Value & strAdditional
        Else
          Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & "x" & txt2.Value & strAdditional
        End If
        Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & "x" & txt2.Value & strAdditional
      Else
        Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & "/" & txt2.Value & strAdditional
      End If
    Case 7
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & " " & txt1.Value & "/" & txt2.Value & "/" & txt3.Value & strAdditional
    Case 8
      Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol).Value = lstData.Value & "-" & txtOther.Value & strAdditional
    End Select
    Unload frmToolingType
  End If
  
Exit_fncSelect:
    Exit Function

Err_fncSelect:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncSelect" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_fncSelect
End Function

Private Sub cmdCancel_Click()
On Error GoTo Err_cmdCancel_Click

  Unload frmToolingType

Exit_cmdCancel_Click:
    Exit Sub

Err_cmdCancel_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdCancel_Click" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_cmdCancel_Click
End Sub

Private Sub cmdOK_Click()
On Error GoTo Err_cmdOK_Click

  fncSelect
  
Exit_cmdOK_Click:
    Exit Sub

Err_cmdOK_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : cmdOK_Click" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_cmdOK_Click
End Sub

Private Sub lstData_Click()
On Error GoTo Err_lstData_Click
  
  fncAdditionalData
  cmdOK.Enabled = True
 
Exit_lstData_Click:
    Exit Sub

Err_lstData_Click:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_Click" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_lstData_Click
End Sub

Private Sub lstData_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_lstData_DblClick
  
  fncSelect

Exit_lstData_DblClick:
    Exit Sub

Err_lstData_DblClick:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : lstData_DblClick" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_lstData_DblClick
End Sub

Private Sub txt1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txt1_BeforeUpdate

  If Not IsNumeric(txt1.Value) Then
    MsgBox "ERROR : Value must be Numeric.", vbCritical + vbOKOnly, "ERROR"
    Cancel = True
  End If

Exit_txt1_BeforeUpdate:
    Exit Sub

Err_txt1_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txt1_BeforeUpdate" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_txt1_BeforeUpdate
End Sub

Private Sub txt2_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txt2_BeforeUpdate

  If Not IsNumeric(txt2.Value) Then
    MsgBox "ERROR : Value must be Numeric.", vbCritical + vbOKOnly, "ERROR"
    Cancel = True
  End If
  
Exit_txt2_BeforeUpdate:
    Exit Sub

Err_txt2_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txt2_BeforeUpdate" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_txt2_BeforeUpdate
End Sub

Private Sub txt3_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txt3_BeforeUpdate

  If Not IsNumeric(txt3.Value) Then
    MsgBox "ERROR : Value must be Numeric.", vbCritical + vbOKOnly, "ERROR"
    Cancel = True
  End If
  
Exit_txt3_BeforeUpdate:
    Exit Sub

Err_txt3_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txt3_BeforeUpdate" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_txt3_BeforeUpdate
End Sub

Private Sub txtAdditional_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
On Error GoTo Err_txtAdditional_BeforeUpdate

  If Len(txtAdditional) > 15 Then
    MsgBox "WARNING : Fifteen (15) character maximum allowed, any extra characterd will be truncated.", vbInformation + vbOKOnly, "WARNING"
  End If

Exit_txtAdditional_BeforeUpdate:
    Exit Sub

Err_txtAdditional_BeforeUpdate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : txtAdditional_BeforeUpdate" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_txtAdditional_BeforeUpdate
End Sub

Private Sub UserForm_Activate()
On Error GoTo Err_UserForm_Activate

  Dim intLCV As Integer
   
  lstData.ColumnWidths = "150;0"
  frmToolingType.Caption = "Select Tool Type"
  lblTitle.Caption = "Please select the Tool Type from the options below."
    
  Select Case Worksheets("New Tools EZ1810 R6.5").Cells(gblRow, gblCol - 1).Value
  Case "Jig_or_Fixture"
    For intLCV = 2 To 19
      lstData.AddItem Worksheets("Data").Cells(intLCV, 15)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 16)
    Next intLCV
  Case "Mold"
    For intLCV = 2 To 13
      lstData.AddItem Worksheets("Data").Cells(intLCV, 18)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 19)
    Next intLCV
  Case "Casting"
    For intLCV = 2 To 9
      lstData.AddItem Worksheets("Data").Cells(intLCV, 21)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 22)
    Next intLCV
  Case "Stamping"
    For intLCV = 2 To 16
      lstData.AddItem Worksheets("Data").Cells(intLCV, 24)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 25)
    Next intLCV
  Case "Forming"
    For intLCV = 2 To 12
      lstData.AddItem Worksheets("Data").Cells(intLCV, 27)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 28)
    Next intLCV
  Case "Misc"
    For intLCV = 2 To 6
      lstData.AddItem Worksheets("Data").Cells(intLCV, 30)
      lstData.List(lstData.ListCount - 1, 1) = Worksheets("Data").Cells(intLCV, 31)
    Next intLCV
  Case Else
  End Select
  
  cmdCancel.SetFocus
  
Exit_UserForm_Activate:
    Exit Sub

Err_UserForm_Activate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : UserForm_Activate" & vbCrLf & "SHEET : frmToolingType"
    Resume Exit_UserForm_Activate
End Sub
Attribute VB_Name = "modBOM"
Option Explicit

Sub subBOMNT()
On Error GoTo Err_subBOMNT

  Const conUsgInd = "V"
  Const conQty = "1"

  Dim objSheet As Worksheet
  Dim sapSheet As Worksheet
  Dim sapWorkbook As Workbook
  Dim intRow As Integer
  Dim intSAPRow As Integer
  Dim intLCV As Integer
  Dim intComma As Integer
  Dim strPart As String
  Dim bolDone As Boolean
     
  intRow = 22
  intSAPRow = 2
  If (ActiveSheet.Range("B22").Value = "") Then
    MsgBox "Please ensure that there is data in the first row of the SMART 1810.", vbCritical + vbOKOnly, "ERROR"
  Else
    Set objSheet = ActiveSheet
    Set sapWorkbook = Workbooks.Add
    Set sapSheet = sapWorkbook.ActiveSheet
    sapSheet.Columns("A:B").ColumnWidth = 25
    sapSheet.Range("A1").Value = "Usage Factor"
    sapSheet.Range("B1").Value = "Part"
    sapSheet.Range("C1").Value = ""
    sapSheet.Range("D1").Value = "Quantity"
    While (objSheet.Cells(intRow, 2) <> "") And (objSheet.Cells(intRow, 2) <> "END")
      strPart = ""
      For intLCV = 1 To Len(objSheet.Cells(intRow, 3).Value)
        If (Mid(objSheet.Cells(intRow, 3).Value, intLCV, 1) <> " ") Then
          strPart = strPart & Mid(objSheet.Cells(intRow, 3).Value, intLCV, 1)
        End If
      Next intLCV
      intComma = InStr(strPart, ",")
      bolDone = False
      While Not bolDone
        If (intComma = 0) Then
          sapSheet.Cells(intSAPRow, 1).Value = conUsgInd
          sapSheet.Cells(intSAPRow, 2).Value = strPart
          sapSheet.Cells(intSAPRow, 3).Value = ""
          sapSheet.Cells(intSAPRow, 4).Value = conQty
          intSAPRow = intSAPRow + 1
          bolDone = True
        Else
          sapSheet.Cells(intSAPRow, 1).Value = conUsgInd
          sapSheet.Cells(intSAPRow, 2).Value = Left(strPart, intComma - 1)
          sapSheet.Cells(intSAPRow, 3).Value = ""
          sapSheet.Cells(intSAPRow, 4).Value = conQty
          strPart = Right(strPart, (Len(strPart) - intComma))
          Debug.Print strPart
          intComma = InStr(strPart, ",")
          intSAPRow = intSAPRow + 1
        End If
      Wend
      intRow = intRow + 1
    Wend
    sapSheet.Range("A:D").RemoveDuplicates Columns:=Array(1, 2, 3, 4), Header:=xlYes
  End If
  
Exit_subBOMNT:
    Exit Sub

Err_subBOMNT:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subBOMNT" & vbCrLf & "SHEET : modBOM"
    Resume Exit_subBOMNT
End Sub

Sub subBOMMD()
On Error GoTo Err_subBOMMD

  Const conUsgInd = "V"
  Const conQty = "1"

  Dim objSheet As Worksheet
  Dim sapSheet As Worksheet
  Dim sapWorkbook As Workbook
  Dim intRow As Integer
  Dim intSAPRow As Integer
  Dim intLCV As Integer
  Dim intComma As Integer
  Dim strPart As String
  Dim bolDone As Boolean
     
  intRow = 22
  intSAPRow = 2
  If (ActiveSheet.Range("B22").Value = "") Then
    MsgBox "Please ensure that there is data in the first row of the SMART 1810.", vbCritical + vbOKOnly, "ERROR"
  Else
    Set objSheet = ActiveSheet
    Set sapWorkbook = Workbooks.Add
    Set sapSheet = sapWorkbook.ActiveSheet
    sapSheet.Columns("A:B").ColumnWidth = 25
    sapSheet.Range("A1").Value = "Usage Factor"
    sapSheet.Range("B1").Value = "Part"
    sapSheet.Range("C1").Value = ""
    sapSheet.Range("D1").Value = "Quantity"
    While (objSheet.Cells(intRow, 2) <> "") And (objSheet.Cells(intRow, 2) <> "END")
      strPart = ""
      For intLCV = 1 To Len(objSheet.Cells(intRow, 5).Value)
        If (Mid(objSheet.Cells(intRow, 5).Value, intLCV, 1) <> " ") Then
          strPart = strPart & Mid(objSheet.Cells(intRow, 5).Value, intLCV, 1)
        End If
      Next intLCV
      intComma = InStr(strPart, ",")
      bolDone = False
      While Not bolDone
        If (intComma = 0) Then
          sapSheet.Cells(intSAPRow, 1).Value = conUsgInd
          sapSheet.Cells(intSAPRow, 2).Value = strPart
          sapSheet.Cells(intSAPRow, 3).Value = ""
          sapSheet.Cells(intSAPRow, 4).Value = conQty
          intSAPRow = intSAPRow + 1
          bolDone = True
        Else
          sapSheet.Cells(intSAPRow, 1).Value = conUsgInd
          sapSheet.Cells(intSAPRow, 2).Value = Left(strPart, intComma - 1)
          sapSheet.Cells(intSAPRow, 3).Value = ""
          sapSheet.Cells(intSAPRow, 4).Value = conQty
          strPart = Right(strPart, (Len(strPart) - intComma))
          Debug.Print strPart
          intComma = InStr(strPart, ",")
          intSAPRow = intSAPRow + 1
        End If
      Wend
      intRow = intRow + 1
    Wend
    sapSheet.Range("A:D").RemoveDuplicates Columns:=Array(1, 2, 3, 4), Header:=xlYes
  End If
  
Exit_subBOMMD:
    Exit Sub

Err_subBOMMD:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subBOMMD" & vbCrLf & "SHEET : modBOM"
    Resume Exit_subBOMMD
End Sub
Attribute VB_Name = "modCopyToDetail"
Option Explicit

Function fncPad(strString As String, intLength As Integer, strLR As String) As String
On Error GoTo Err_fncPad

  Dim tempString As String
  
  tempString = strString
  If Len(tempString) > intLength Then
    tempString = Left(tempString, intLength)
  Else
    While Len(tempString) < intLength
      If strLR = "L" Then
        tempString = " " & tempString
      Else
        tempString = tempString & " "
      End If
    Wend
  End If
  
  fncPad = tempString
  
Exit_fncPad:
    Exit Function

Err_fncPad:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncPad" & vbCrLf & "SHEET : modCopyToDetail"
    Resume Exit_fncPad
End Function

Sub subExportGPSNew()
On Error GoTo Err_subExportGPSNew

  Dim obj As New DataObject
  Dim objSheet As Object
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intRow As Integer
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim strOutput As String
  Dim rngRange As Excel.Range
  
  Worksheets("New Tools EZ1810 R6.5").Activate
  Set objSheet = ActiveSheet
  
  strOutput = "********** New Tools EZ1810 R6.0 **********" & vbCrLf
  strOutput = strOutput & "Curr : " & objSheet.Cells(8, 10) & vbCrLf
  strOutput = strOutput & "Total Cost      QTY   Part Name      Part#      Tool Description    Tax Rate  Tax Amount     " & vbCrLf
  
  intLCV = 22
  intRow = 4
  Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
    strRefPartTemp = ""
    For intLCV2 = 1 To Len(objSheet.Cells(intLCV, 3).Value)
      If (Mid(objSheet.Cells(intLCV, 3).Value, intLCV2, 1) <> " ") Then
        strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 3).Value, intLCV2, 1)
      End If
    Next intLCV2
    If InStr(strRefPartTemp, ",") = 0 Then
      strRefPart = strRefPartTemp
    Else
      strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
    End If
    
    strOutput = strOutput & fncPad(objSheet.Cells(intLCV, 15).Value, 15, "L") & " " & _
                "(" & fncPad(objSheet.Cells(intLCV, 9).Value, 3, "R") & ") " & _
                fncPad(objSheet.Cells(intLCV, 2).Value, 15, "R") & " " & _
                fncPad(strRefPart, 10, "R") & " " & fncPad(objSheet.Cells(intLCV, 6).Value, 20, "R") & _
                fncPad(objSheet.Cells(intLCV, 18).Value, 10, "R") & fncPad(objSheet.Cells(intLCV, 19).Value, 15, "R") & vbCrLf
    intRow = intRow + 1
    intLCV = intLCV + 1
  Loop
      
  obj.SetText strOutput
  obj.PutInClipboard
  
  MsgBox "You can now paste the data into GPS."
  
Exit_subExportGPSNew:
    Exit Sub

Err_subExportGPSNew:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subExportGPSNew" & vbCrLf & "SHEET : modCopyToDetail"
    Resume Exit_subExportGPSNew
End Sub

Sub subExportGPSMD()
On Error GoTo Err_subExportGPSMD

  Dim obj As New DataObject
  Dim objSheet As Object
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intRow As Integer
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim strOutput As String
  Dim rngRange As Excel.Range
  
  Worksheets("Modified Delete EZ1810 R6.5").Activate
  Set objSheet = ActiveSheet
  
  strOutput = "********** Modify Delete EZ1810 R5.0 **********" & vbCrLf
  strOutput = strOutput & "Curr : " & objSheet.Cells(8, 10) & vbCrLf
  strOutput = strOutput & "Modified  Total Cost      eSAP Equipment#   Part#      Tool Modification Description    Tax Rate  Tax Amount     " & vbCrLf
  
  intLCV = 22
  intRow = 4
  Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
    strRefPartTemp = ""
    For intLCV2 = 1 To Len(objSheet.Cells(intLCV, 5).Value)
      If (Mid(objSheet.Cells(intLCV, 5).Value, intLCV2, 1) <> " ") Then
        strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 5).Value, intLCV2, 1)
      End If
    Next intLCV2
    If InStr(strRefPartTemp, ",") = 0 Then
      strRefPart = strRefPartTemp
    Else
      strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
    End If
    
    strOutput = strOutput & fncPad(objSheet.Cells(intLCV, 4).Value, 9, "R") & " " & _
                fncPad(objSheet.Cells(intLCV, 9).Value, 15, "R") & " " & _
                fncPad(objSheet.Cells(intLCV, 2).Value, 17, "R") & " " & _
                fncPad(strRefPart, 10, "R") & " " & _
                fncPad(objSheet.Cells(intLCV, 6).Value, 33, "R") & fncPad(objSheet.Cells(intLCV, 18).Value, 14, "R") & fncPad(objSheet.Cells(intLCV, 15).Value, 15, "R") & vbCrLf
    intRow = intRow + 1
    intLCV = intLCV + 1
  Loop
      
  obj.SetText strOutput
  obj.PutInClipboard
  
  MsgBox "You can now paste the data into GPS."

Exit_subExportGPSMD:
    Exit Sub

Err_subExportGPSMD:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subExportGPSMD" & vbCrLf & "SHEET : modCopyToDetail"
    Resume Exit_subExportGPSMD
End Sub


Attribute VB_Name = "modErrorCheck"
Option Explicit

Function fncHighlight(strCell As String, intError As Integer)
On Error GoTo Err_fncHighlight

    Dim varPattern As Variant
    Dim lngColor As Long
    Dim lngFont As Long
        
    Select Case intError
    Case 0
      lngColor = 16777215
      varPattern = xlNone
      lngFont = 0
    Case 1
      lngColor = 255
      varPattern = xlSolid
      lngFont = -16777216
    End Select
    
    With ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Interior
        .Pattern = varPattern
        .PatternColorIndex = xlAutomatic
        .Color = lngColor
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Font
        .Color = lngFont
        .TintAndShade = 0
    End With

Exit_fncHighlight:
    Exit Function

Err_fncHighlight:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncHighlight" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncHighlight
End Function

Function fncPartNumber(strName As String, strCell As String) As String
On Error GoTo Err_fncPartNumber

  Dim strError As String
  Dim varValue As Variant
  Dim intLCV As Integer
  Dim intCount As Integer
  Dim bolError As Boolean
  Dim bolInNum As Boolean
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value

'# Check to see if the value is Null or Empty
  If IsNull(varValue) Or varValue = "" Then
    fncPartNumber = vbCrLf & "ERROR : " & strName & " is a required field."
    Call fncHighlight(strCell, 1)
  Else
    intCount = 0
    bolError = False
    For intLCV = 1 To Len(varValue)
      Select Case UCase(Mid(varValue, intLCV, 1))
      Case "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
        intCount = intCount + 1
        bolInNum = True
      Case " ", ","
        If intCount < 4 Then
          If bolInNum Then
            bolError = True
          End If
        Else
          intCount = 0
        End If
        bolInNum = False
      Case Else
        bolError = True
      End Select
    Next intLCV
    If intCount < 4 Then
      bolError = True
    End If
    If bolError Then
      fncPartNumber = vbCrLf & "ERROR : " & strName & " contains illegal characters or a Part Number less than 4 digits."
      Call fncHighlight(strCell, 1)
    Else
      fncPartNumber = ""
      Call fncHighlight(strCell, 0)
    End If
  End If

Exit_fncPartNumber:
    Exit Function

Err_fncPartNumber:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncPartNumber" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncPartNumber
End Function

Function fncCheckLine(intLine As Integer, strCol As String) As Boolean
On Error GoTo Err_fncCheckLine

  Dim rngTemp As Range
  Dim bolBlank As Boolean
  
  bolBlank = True
  
  If ActiveSheet.Cells(intLine, 2).Value <> "END" Then
    For Each rngTemp In Range("B" & intLine & ":" & strCol & intLine)
      If rngTemp.Value <> "" Then
        bolBlank = False
      End If
    Next rngTemp
    fncCheckLine = bolBlank
  Else
    fncCheckLine = True
  End If

Exit_fncCheckLine:
    Exit Function

Err_fncCheckLine:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCheckLine" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncCheckLine
End Function

Function fncDate(strName As String, strCell As String) As String
On Error GoTo Err_fncDate

  Dim strError As String
  Dim varValue As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value

'# Check to see that a Date has been entered
  If IsNull(varValue) Or varValue = "" Then
    fncDate = vbCrLf & "ERROR : " & strName & " is a required field."
    Call fncHighlight(strCell, 1)
  Else
'# Check to see if the Date is a valid Date
    If Not IsDate(varValue) Then
      fncDate = vbCrLf & "ERROR : " & strName & " must be a valid date."
      Call fncHighlight(strCell, 1)
    Else
'# Check to see if the Date is greater than or equal to Today
      If DateDiff("d", varValue, Now()) > 0 Then
        fncDate = vbCrLf & "ERROR : " & strName & " must be greater than or equal to Current Date."
        Call fncHighlight(strCell, 1)
      Else
        fncDate = ""
        Call fncHighlight(strCell, 0)
      End If
    End If
  End If

Exit_fncDate:
    Exit Function

Err_fncDate:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncDate" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncDate
End Function

Function fncPercent(strName As String, strCell As String) As String
On Error GoTo Err_fncPercent

  Dim strError As String
  Dim bolError As Boolean
  Dim varValue As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value
  bolError = False

'# Check to see if the value is numeric
  If Not IsNumeric(varValue) Or IsNull(varValue) Or varValue = "" Then
    bolError = True
    strError = "ERROR : " & strName & " needs to be a numeric value."
  Else
'# Check to see if the value is between 0 and 1
    If CDbl(varValue) > 1 Or CDbl(varValue) < 0 Then
      bolError = True
      strError = "ERROR : " & strName & " is not between 0 and 1."
    End If
  End If
  If bolError Then
    fncPercent = vbCrLf & strError
    Call fncHighlight(strCell, 1)
  Else
    fncPercent = ""
    Call fncHighlight(strCell, 0)
  End If

Exit_fncPercent:
    Exit Function

Err_fncPercent:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncPercent" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncPercent
End Function

Function fncNotNull(strName As String, strCell As String) As String
On Error GoTo Err_fncNotNull

  Dim strError As String
  Dim varValue As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value

'# Check to see if the value is Null or Empty
  If IsNull(varValue) Or varValue = "" Then
    fncNotNull = vbCrLf & "ERROR : " & strName & " is a required field."
    Call fncHighlight(strCell, 1)
  Else
    fncNotNull = ""
    Call fncHighlight(strCell, 0)
  End If

Exit_fncNotNull:
    Exit Function

Err_fncNotNull:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncNotNull" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncNotNull
End Function

Function fncPositiveNumeric(strName As String, strCell As String, Optional intDecimals As Integer = 0, Optional strType As String = "N") As String
On Error GoTo Err_fncPositiveNumeric

  Dim intLCV As Integer
  Dim strError As String
  Dim bolError As Boolean
  Dim varValue As Variant
  Dim varType As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value
  bolError = False

'# Check to see if the value is numeric
  If Not IsNumeric(varValue) Then
    bolError = True
    strError = "ERROR : " & strName & " needs to be a numeric value."
  Else
'# Check to see if the value is positive
    If CDbl(varValue) <= 0 Then
'# Check to see if the type is MD
      If (strType = "MD") Then
        varType = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), 4).Value
        If Not ((varType = "Decrease") Or (varType = "Delete")) Then
          bolError = True
          strError = "ERROR : " & strName & " is not a positive value."
        End If
      Else
        bolError = True
        strError = "ERROR : " & strName & " is not a positive value."
      End If
    Else
'# Check to see if the value has less than the number of Decimals Allowed
      If InStr(1, CStr(varValue), ".", vbTextCompare) <> 0 And intDecimals < Len(Right(CStr(varValue), Len(CStr(varValue)) - InStr(1, CStr(varValue), ".", vbTextCompare))) Then
        bolError = True
        strError = "ERROR : " & strName & " has more than " & intDecimals & " decimal places."
      End If
    End If
  End If
  If bolError Then
    fncPositiveNumeric = vbCrLf & strError
    Call fncHighlight(strCell, 1)
  Else
    fncPositiveNumeric = ""
    Call fncHighlight(strCell, 0)
  End If
  
Exit_fncPositiveNumeric:
    Exit Function

Err_fncPositiveNumeric:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncPositiveNumeric" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncPositiveNumeric
End Function

Function fncPositiveInteger(strName As String, strCell As String, Optional intLength As Integer = 0, Optional intMax As Integer = 0) As String
On Error GoTo Err_fncPositiveInteger

  Dim intLCV As Integer
  Dim strError As String
  Dim bolError As Boolean
  Dim varValue As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value
  
  bolError = False

'# Check to see if the value is less than or equal to the specified Length, if provided
  If intLength > 0 Then
    If Len(varValue) > intLength Then
      bolError = True
      strError = "ERROR : " & strName & " has a length greater than " & intLength & " characters."
    End If
  Else
'# Check to see if the value exceeds the maximum, if provided
    If intMax > 0 Then
      If CLng(varValue) > intMax Then
        bolError = True
        strError = "ERROR : " & strName & " has a value greater than " & intMax & "."
      End If
    End If
  End If
  
  If Not bolError Then
'# Check to see if the value is numeric
    If Not IsNumeric(varValue) Then
      bolError = True
      strError = "ERROR : " & strName & " needs to be a numeric value."
    Else
'# Check to see if the value is an Integer
      If InStr(1, CStr(varValue), ".", vbTextCompare) <> 0 Then
        bolError = True
        strError = "ERROR : " & strName & " is not an Integer value."
      Else
'# Check to see if the value is positive
        If CLng(varValue) <= 0 Then
          bolError = True
          strError = "ERROR : " & strName & " is not a positive value."
        Else
'# Check to see if the value is less than or equal to the specified Length, if provided
          If intLength > 0 Then
            If Len(varValue) > intLength Then
              bolError = True
              strError = "ERROR : " & strName & " has a length greater than " & intLength & " characters."
            End If
          Else
'# Check to see if the value exceeds the maximum, if provided
            If intMax > 0 Then
              If CLng(varValue) > intMax Then
                bolError = True
                strError = "ERROR : " & strName & " has a value greater than " & intMax & "."
              End If
            End If
          End If
        End If
      End If
    End If
  End If
  
  If bolError Then
    fncPositiveInteger = vbCrLf & strError
    Call fncHighlight(strCell, 1)
  Else
    fncPositiveInteger = ""
    Call fncHighlight(strCell, 0)
  End If
  
Exit_fncPositiveInteger:
    Exit Function

Err_fncPositiveInteger:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncPositiveInteger" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncPositiveInteger
End Function

Function fncNonNegativeInteger(strName As String, strCell As String, Optional intLength As Integer = 0, Optional intMax As Integer = 0) As String
On Error GoTo Err_fncNonNegativeInteger

  Dim intLCV As Integer
  Dim strError As String
  Dim bolError As Boolean
  Dim varValue As Variant
  
  varValue = ActiveSheet.Cells(CLng(Left(strCell, Len(strCell) - 3)), CLng(Right(strCell, 2))).Value
  
  bolError = False

'# Check to see if the value is numeric
  If Not IsNumeric(varValue) Then
    bolError = True
    strError = "ERROR : " & strName & " needs to be a numeric value."
  Else
'# Check to see if the value is an Integer
    If CLng(varValue) <> CDbl(varValue) Then
      bolError = True
      strError = "ERROR : " & strName & " is not an Integer value."
    Else
'# Check to see if the value is non negative
      If CLng(varValue) < 0 Then
        bolError = True
        strError = "ERROR : " & strName & " is not a positive value."
      Else
'# Check to see if the value is less than or equal to the specified Length, if provided
        If intLength > 0 Then
          If Len(varValue) > intLength Then
            bolError = True
            strError = "ERROR : " & strName & " has a length greater than " & intLength & " characters."
          End If
        Else
'# Check to see if the value exceeds the maximum, if provided
          If intMax > 0 Then
            If CLng(varValue) > intMax Then
              bolError = True
              strError = "ERROR : " & strName & " has a value greater than " & intMax & "."
            End If
          End If
        End If
      End If
    End If
  End If
  If bolError Then
    fncNonNegativeInteger = vbCrLf & strError
    Call fncHighlight(strCell, 1)
  Else
    fncNonNegativeInteger = ""
    Call fncHighlight(strCell, 0)
  End If
  
Exit_fncNonNegativeInteger:
    Exit Function

Err_fncNonNegativeInteger:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncNonNegativeInteger" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncNonNegativeInteger
End Function

Function fncCheckPartial() As String
On Error GoTo Err_fncCheckPartial

  Const CON_MFG_DUNS = "11,03"
  Const CON_SPD = "10,08"
  Const CON_ANN_CAP = "7,10"
  Const CON_DPY = "10,10"
  Const CON_TC = ",05"
  Const CON_TT = ",06"
  Const CON_QOT = ",09"
  Const CON_TOOL_DUNS = ",12"
  
  Dim strError As String
  Dim strCCError As String
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  
  strCCError = ""
  Sheets("New Tools EZ1810 R6.5").Activate
    
  strError = fncPositiveInteger("Manufacturing DUNS", CON_MFG_DUNS, 9)
  strError = strError & fncPositiveInteger("Shifts Per Day", CON_SPD, , 3)
  strError = strError & fncPositiveInteger("Annual Capacity", CON_ANN_CAP)
  strError = strError & fncPositiveInteger("Days / Year", CON_DPY, , 366)
  
  intLCV = 22
  While Not fncCheckLine(intLCV, "M")
' IF SHARED TOOLING = YES, THEN CHECK LCRS
    If (Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value = "Yes") Then
      For intLCV2 = 24 To 34
      If Cells(intLCV, intLCV2).Interior.TintAndShade = 0 Then
        strError = strError & fncNonNegativeInteger("LCR", intLCV & "," & intLCV2)
      End If
      Next intLCV2
    End If
  
    strError = strError & fncNotNull("Tool Category", intLCV & CON_TC)
    strError = strError & fncNotNull("Tool Type", intLCV & CON_TT)
    strError = strError & fncPositiveInteger("Quantity of Tools", intLCV & CON_QOT)
    strError = strError & fncPositiveInteger("Tool Location DUNS", intLCV & CON_TOOL_DUNS, 9)
    intLCV = intLCV + 1
  Wend
  strError = strError & strCCError
  fncCheckPartial = strError

Exit_fncCheckPartial:
    Exit Function

Err_fncCheckPartial:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCheckPartial" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncCheckPartial
End Function

Function fncCheckNew() As String
On Error GoTo Err_fncCheckNew

  Const CON_PROGRAM = "12,10"
  Const CON_MFG_DUNS = "11,03"
  Const CON_TYPE = "09,10"
  Const CON_EWO = "09,11"
  Const CON_SPD = "10,08"
  Const CON_ANN_CAP = "07,10"
  Const CON_LW = "07,11"
  Const CON_DPY = "10,10"
  Const CON_CURR = "08,10"
  Const CON_PPAP = "11,10"
  Const CON_PN = ",02"
  Const CON_PART_NUM = ",03"
  Const CON_TC = ",05"
  Const CON_TT = ",06"
  Const CON_TCT = ",07"
  Const CON_PPC = ",08"
  Const CON_QOT = ",09"
  Const CON_CTM = ",10"
  Const CON_TLC = ",11"
  Const CON_TOOL_DUNS = ",12"
  Const CON_GMML = ",13"
  Const CON_TTC = ",15"
  Const CON_DUTY = ",16"
  Const CON_PPT = ",17"
  Const CON_TAX = ",18"
  Const CON_TAX_REC = ",21"
  
  Dim strError As String
  Dim strCCError As String
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  
  strCCError = ""
  Sheets("New Tools EZ1810 R6.5").Activate
    
  strError = fncPositiveInteger("Manufacturing DUNS", CON_MFG_DUNS, 9)
  strError = strError & fncPositiveInteger("Shifts Per Day", CON_SPD, , 3)
  strError = strError & fncPositiveInteger("Annual Capacity", CON_ANN_CAP)
  strError = strError & fncPositiveInteger("Lead Weeks", CON_LW)
  strError = strError & fncPositiveInteger("Days / Year", CON_DPY, , 366)
  strError = strError & fncNotNull("Currency", CON_CURR)
  strError = strError & fncNotNull("Type", CON_TYPE)
  If ActiveSheet.Cells(9, 10).Value = "EWO" Then
    strError = strError & fncNotNull("EWO", CON_EWO)
  End If
  If ActiveSheet.Cells(9, 10).Value = "Sourcing" Then
    strError = strError & fncNotNull("RFQ Number", CON_EWO)
  End If
  If ActiveSheet.Cells(9, 10).Value = "TKO" Then
    strError = strError & fncNotNull("P Release Number", CON_EWO)
  End If
  strError = strError & fncNotNull("Program / Model Year / Part Description", CON_PROGRAM)
  strError = strError & fncDate("PPAP Date", CON_PPAP)
  
  intLCV = 22
  While Not fncCheckLine(intLCV, "M")
' IF SHARED TOOLING = YES, THEN CHECK LCRS
    If (Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value = "Yes") Then
      For intLCV2 = 27 To 37
      If Cells(intLCV, intLCV2).Interior.TintAndShade = 0 Then
        strError = strError & fncNonNegativeInteger("LCR", intLCV & "," & intLCV2)
      End If
      Next intLCV2
    End If
  
    strError = strError & fncNotNull("Part Name", intLCV & CON_PN)
    strError = strError & fncPartNumber("Part Number", intLCV & CON_PART_NUM)
    strError = strError & fncNotNull("Tool Category", intLCV & CON_TC)
    strError = strError & fncNotNull("Tool Type", intLCV & CON_TT)
    strError = strError & fncPositiveNumeric("Tool Cycle Time", intLCV & CON_TCT)
    strError = strError & fncPositiveInteger("Pieces Per Cycle", intLCV & CON_PPC)
    strError = strError & fncPositiveInteger("Quantity of Tools", intLCV & CON_QOT)
    strError = strError & fncNotNull("Country of Tool Manufacturer", intLCV & CON_CTM)
    strError = strError & fncNotNull("Tool Location Country", intLCV & CON_TLC)
    strError = strError & fncPositiveInteger("Tool Location DUNS", intLCV & CON_TOOL_DUNS, 9)
    strError = strError & fncNotNull("Country of GM Manufacturing Location", intLCV & CON_GMML)
    strError = strError & fncPositiveNumeric("Total Tool Cost", intLCV & CON_TTC, 2, "MD")
    strError = strError & fncPercent("Customs Duties", intLCV & CON_DUTY)
    strError = strError & fncNotNull("Progress Payment Type", intLCV & CON_PPT)
    strError = strError & fncPercent("Transactional Tax Rate", intLCV & CON_TAX)
    strError = strError & fncNotNull("Transactional Tax Rate Recoverable", intLCV & CON_TAX_REC)
    intLCV = intLCV + 1
  Wend
  strError = strError & strCCError
  fncCheckNew = strError

Exit_fncCheckNew:
    Exit Function

Err_fncCheckNew:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCheckNew" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncCheckNew
End Function

Function fncCheckMD() As String
On Error GoTo Err_fncCheckMD

  Const CON_PROGRAM = "12,10"
  Const CON_MFG_DUNS = "11,03"
  Const CON_SPD = "10,08"
  Const CON_ANN_CAP = "7,10"
  Const CON_LW = "7,11"
  Const CON_DPY = "10,10"
  Const CON_CURR = "8,10"
  Const CON_EWO = "9,10"
  Const CON_PPAP = "11,10"
  Const CON_EN = ",02"
  Const CON_MD = ",04"
  Const CON_PPAP_PART = ",05"
  Const CON_DOT = ",06"
  Const CON_BST = ",07"
  Const CON_LOT = ",08"
  Const CON_TOOL_COST = ",09"
  Const CON_PRIOR_TOOL_COST = ",10"
  Const CON_CMP = ",11"
  Const CON_GMML = ",12"
  Const CON_TAX = ",14"

  Dim strError As String
  Dim strCCError As String
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  
  Sheets("Modified Delete EZ1810 R6.5").Activate
  strError = fncPositiveInteger("Manufacturing DUNS", CON_MFG_DUNS, 9)
  strError = strError & fncPositiveInteger("Shifts Per Day", CON_SPD, , 3)
  strError = strError & fncPositiveInteger("Annual Capacity", CON_ANN_CAP)
  strError = strError & fncPositiveInteger("Lead Weeks", CON_LW)
  strError = strError & fncPositiveInteger("Days / Year", CON_DPY, , 366)
  strError = strError & fncNotNull("Currency", CON_CURR)
  strError = strError & fncNotNull("Program / Model Year / Part Description", CON_PROGRAM)
  strError = strError & fncNotNull("EWO", CON_EWO)
  strError = strError & fncDate("PPAP Date", CON_PPAP)
  
  intLCV = 22
  While Not fncCheckLine(intLCV, "K")
  ' IF SHARED TOOLING = YES, THEN CHECK LCRS
    If (Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value = "Yes") Then
      For intLCV2 = 21 To 13
      If Cells(intLCV, intLCV2).Interior.TintAndShade = 0 Then
        strError = strError & fncNonNegativeInteger("LCR", intLCV & "," & intLCV2)
      End If
      Next intLCV2
    End If

    strError = strError & fncPositiveInteger("eSAP Equipment Number", intLCV & CON_EN, 10)
    strError = strError & fncNotNull("Modify / Delete", intLCV & CON_MD)
    strError = strError & fncPartNumber("New PPAP Part", intLCV & CON_PPAP_PART)
    strError = strError & fncNotNull("Description of Tool", intLCV & CON_DOT)
    strError = strError & fncNotNull("Build Status of Tool", intLCV & CON_BST)
    strError = strError & fncNotNull("Current Location of Tool", intLCV & CON_LOT)
    strError = strError & fncPositiveNumeric("Total Tool Cost", intLCV & CON_TOOL_COST, 2, "MD")
    strError = strError & fncPositiveNumeric("Prior Tool Cost", intLCV & CON_PRIOR_TOOL_COST, 2, "MD")
    strError = strError & fncNotNull("Country Modification Performed", intLCV & CON_CMP)
    strError = strError & fncNotNull("Country of GM Manufacturing Location", intLCV & CON_GMML)
    strError = strError & fncPercent("Transactional Tax Rate", intLCV & CON_TAX)
    intLCV = intLCV + 1
  Wend
  strError = strError & strCCError
  fncCheckMD = strError

Exit_fncCheckMD:
    Exit Function

Err_fncCheckMD:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCheckMD" & vbCrLf & "SHEET : modErrorCheck"
    Resume Exit_fncCheckMD
End Function
Attribute VB_Name = "modExportMD"
Option Explicit
Global strCompanyCode As String
Global strCompanyCodes() As String

Function fncCreateColumnHeaders(ByVal objSheet As Object)
On Error GoTo Err_fncCreateColumnHeaders

  With objSheet
    .Columns("A:AK").ColumnWidth = 15
    .Range("A1").Value = "Document Type (M)"
    .Range("B1").Value = "Vendor DUNS (M)"
    .Range("C1").Value = "Purch Organization"
    .Range("D1").Value = "Purch Group (M)"
    .Range("E1").Value = "Company Code (M)"
    .Range("F1").Value = "Validity Start Date"
    .Range("G1").Value = "Validity End Date(M)"
    .Range("H1").Value = "Reference Part Number (M)"
    .Range("I1").Value = "Purchase Type (M)"
    .Range("J1").Value = "Request Type (M)"
    .Range("K1").Value = "Tooling capacity (qty/day)"
    .Range("L1").Value = "Tooling capacity (Hrs/day)"
    .Range("M1").Value = "Equipment Number (M)"
    .Range("N1").Value = "Progress Payment"
    .Range("O1").Value = "Approver Email ID (M)"
    .Range("P1").Value = "Payment Terms"
    .Range("Q1").Value = "Currency (M)"
    .Range("R1").Value = "Delivery Date"
    .Range("S1").Value = "Account Assignment Category (M)"
    .Range("T1").Value = "PO Quantity (M)"
    .Range("U1").Value = "Unit Price (M)"
    .Range("V1").Value = "Per (M)"
    .Range("W1").Value = "Item Category"
    .Range("X1").Value = "Plant (M)"
    .Range("Y1").Value = "G/L Account"
    .Range("Z1").Value = "Cost Center"
    .Range("AA1").Value = "Internal Order Number"
    .Range("AB1").Value = "WBS Element Number"
    .Range("AC1").Value = "Service Text (M)"
    .Range("AD1").Value = "Tax Usage Indicator"
    .Range("AE1").Value = "EWO Number (M)"
    .Range("AF1").Value = "PO Number (Output)"
    .Range("AG1").Value = "ZEWO PO Result (Output)"
  End With

Exit_fncCreateColumnHeaders:
    Exit Function

Err_fncCreateColumnHeaders:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCreateColumnHeaders" & vbCrLf & "SHEET : modExportMD"
    Resume Exit_fncCreateColumnHeaders
End Function

Sub subModifiedDelete()
On Error GoTo Err_subModifiedDelete

  Dim strPurGroup As String
  Dim strError As String
  Dim bolCancel As Boolean
    
  strError = fncCheckMD
  If strError = "" Then
    bolCancel = False
    strPurGroup = InputBox("Please enter a value for Purchasing Group", "Purchasing Group")
    While Len(strPurGroup) <> 3 And Not bolCancel
      If Len(strPurGroup) = 0 Then
        bolCancel = True
      Else
        MsgBox "The Purchasing Group cannot be Blank and must be exactly three (3) characters.", vbCritical + vbOKOnly, "ERROR"
        strPurGroup = InputBox("Please enter a value for Purchasing Group", "Purchasing Group")
      End If
    Wend
    
    If Not bolCancel Then
      Select Case Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value
      Case "Yes"
        fncModifiedDeleteST (strPurGroup)
      Case "No"
        fncModifiedDeleteNoST (strPurGroup)
      End Select
    End If
  Else
    MsgBox strError, vbCritical + vbOKOnly, "ERROR"
  End If

Exit_subModifiedDelete:
    Exit Sub

Err_subModifiedDelete:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subModifiedDelete" & vbCrLf & "SHEET : modExportMD"
    Resume Exit_subModifiedDelete
End Sub

Function fncModifiedDeleteNoST(strPurGroup As String)
On Error GoTo Err_fncModifiedDeleteNoST

'# CONSTANTS
  Const constDocType = "ZEWO"
  Const constPurchOrg = "GDIR"
  Const constPurchType = "Regular Purchase"
  Const constReqType = "Tool Modification"
  Const constAAC = "Y"
  Const constPer = "1"
  
  Dim strPPAP As String
  Dim strValidityStart As String
  Dim strValidityEnd As String
  Dim strDUNS As String
  Dim strCurr As String
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim objWorkbook As Workbook
  Dim objSheet As Object
  Dim objWorking As Object
  Dim intCount As Integer
  Dim intSheet As Integer
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intLCV3 As Integer
  Dim intNewLCV As Integer
  Dim intToolCap As Double
  Dim intToolCapHPD As Integer
  Dim strPP As String
  Dim strPath As String
  Dim strID As String
  
  gblCancel = 0
  With frmModifyDelete
    .StartUpPosition = 0
    .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
    .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    .Show
  End With

  If gblCancel <> -1 Then
    Worksheets("Modified Delete EZ1810 R6.5").Activate
    Set objSheet = ActiveSheet
    Set objWorking = Worksheets("Working")
   
    Call fncCountCompanyCodes(objSheet, CC_MD, 0)
    intCount = objWorking.Cells(1, 1).Value
    ReDim objNewWorkbook(intCount) As Workbook
    ReDim objNewSheet(intCount) As Object
    
    strValidityStart = Format(Now(), "YYYYMMDD")
    strValidityEnd = Format(DateAdd("YYYY", 3, Now()), "YYYYMMDD")
    strDUNS = objSheet.Range("C11").Value2
    strCurr = objSheet.Range("J8").Value
    intToolCap = WorksheetFunction.RoundDown(objSheet.Range("J7").Value / objSheet.Range("J10").Value, 0)
    intToolCapHPD = 8 * objSheet.Range("H10").Value
    strPPAP = Format(objSheet.Range("J11").Value, "YYYYMMDD")
    
    Set objWorkbook = ActiveWorkbook
    For intLCV2 = 1 To intCount
      Set objNewWorkbook(intLCV2) = Workbooks.Add
      Set objNewSheet(intLCV2) = objNewWorkbook(intLCV2).ActiveSheet
      Call fncCreateColumnHeaders(objNewSheet(intLCV2))
    Next intLCV2
    
    intLCV = 22
    
    Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      Select Case objSheet.Cells(intLCV, 9)
      Case Is < 0
        strPP = "NEG"
      Case Else
        strPP = "POS"
      End Select
      
      strRefPartTemp = ""
      For intLCV3 = 1 To Len(objSheet.Cells(intLCV, 5).Value)
        If (Mid(objSheet.Cells(intLCV, 5).Value, intLCV3, 1) <> " ") Then
          strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 5).Value, intLCV3, 1)
        End If
      Next intLCV3
      
      If InStr(strRefPartTemp, ",") = 0 Then
        strRefPart = strRefPartTemp
      Else
        strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
      End If
      
      For intLCV2 = 1 To intCount
        If objWorking.Cells(intLCV2 + 1, 1).Value = objSheet.Cells(intLCV, 13).Value2 & strPP Then
          intSheet = intLCV2
          intNewLCV = objWorking.Cells(intLCV2 + 1, 3).Value
          objWorking.Cells(intLCV2 + 1, 3).Value = objWorking.Cells(intLCV2 + 1, 3).Value + 1
        End If
      Next intLCV2
      
      objNewSheet(intSheet).Cells(intNewLCV, 1).Value = constDocType
      objNewSheet(intSheet).Cells(intNewLCV, 2).Value = strDUNS
      objNewSheet(intSheet).Cells(intNewLCV, 3).Value = constPurchOrg
      objNewSheet(intSheet).Cells(intNewLCV, 4).Value = strPurGroup & "'"
      objNewSheet(intSheet).Cells(intNewLCV, 5).Value = objSheet.Cells(intLCV, 13).Value2 & "'"
      objNewSheet(intSheet).Cells(intNewLCV, 6).Value = strValidityStart
      objNewSheet(intSheet).Cells(intNewLCV, 7).Value = strValidityEnd
      objNewSheet(intSheet).Cells(intNewLCV, 8).Value = strRefPart
      objNewSheet(intSheet).Cells(intNewLCV, 9).Value = constPurchType
      objNewSheet(intSheet).Cells(intNewLCV, 10).Value = constReqType
      objNewSheet(intSheet).Cells(intNewLCV, 11).Value = intToolCap
      objNewSheet(intSheet).Cells(intNewLCV, 12).Value = intToolCapHPD
      objNewSheet(intSheet).Cells(intNewLCV, 13).Value = objSheet.Cells(intLCV, 2).Value
      objNewSheet(intSheet).Cells(intNewLCV, 17).Value = strCurr
      objNewSheet(intSheet).Cells(intNewLCV, 18).Value = strPPAP
      objNewSheet(intSheet).Cells(intNewLCV, 19).Value = constAAC
      objNewSheet(intSheet).Cells(intNewLCV, 20).Value = "1"
      objNewSheet(intSheet).Cells(intNewLCV, 21).Value = objSheet.Cells(intLCV, 9).Value
      objNewSheet(intSheet).Cells(intNewLCV, 22).Value = constPer
      objNewSheet(intSheet).Cells(intNewLCV, 23).Value = "D"
      objNewSheet(intSheet).Cells(intNewLCV, 24).Value = fncDeterminePlant(objSheet.Cells(intLCV, 13).Value2)
      objNewSheet(intSheet).Cells(intNewLCV, 25).Value = gblGL
      objNewSheet(intSheet).Cells(intNewLCV, 28).Value = gblWBS
      objNewSheet(intSheet).Cells(intNewLCV, 29).Value = objSheet.Cells(intLCV, 6).Value
      objNewSheet(intSheet).Cells(intNewLCV, 31).Value = objSheet.Cells(9, 10).Value
      intLCV = intLCV + 1
    Loop

    strID = Environ("Username")
    strPath = "C:\Users\" & strID & "\Desktop\" & Left(objWorkbook.Name, Len(objWorkbook.Name) - 5)
    
    For intLCV = 1 To intCount
      If InStr(1, objWorking.Cells(intLCV + 1, 1).Value, "NEG", vbTextCompare) = 0 Then
        objNewWorkbook(intLCV).SaveAs Filename:=strPath & "-MD-" & objWorking.Cells(intLCV + 1, 1).Value & ".csv", FileFormat:=xlCSVMSDOS, CreateBackup:=False
        objNewWorkbook(intLCV).Close False
      Else
        objNewWorkbook(intLCV).Close False
      End If
    Next intLCV
  
    If intCount > 1 Then
      MsgBox "NOTICE : " & intCount & " CSV Files were generated due to multiple Comapny Codes on the SMART 1810.  Please refer to Column H on the Output CSV File to identify the Company Code.  NOTE : Negative Value line items are excluded from output.", vbInformation + vbOKOnly, "NOTICE"
    End If
  End If
  
Exit_fncModifiedDeleteNoST:
    Exit Function

Err_fncModifiedDeleteNoST:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncModifiedDeleteNoST" & vbCrLf & "SHEET : modExportMD"
    Resume Exit_fncModifiedDeleteNoST
End Function

Function fncModifiedDeleteST(strPurGroup As String)
On Error GoTo Err_fncModifiedDeleteST

'# CONSTANTS
  Const constDocType = "ZEWO"
  Const constPurchOrg = "GDIR"
  Const constPurchType = "Regular Purchase"
  Const constReqType = "Tool Modification"
  Const constAAC = "Y"
  Const constPer = "1"
  
  Dim strPPAP As String
  Dim strValidityStart As String
  Dim strValidityEnd As String
  Dim strDUNS As String
  Dim strCurr As String
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim strCC As String
  Dim objWorkbook As Workbook
  Dim objSheet As Object
  Dim objWorking As Object
  Dim intCount As Integer
  Dim intSheet As Integer
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intLCV3 As Integer
  Dim intLCV4 As Integer
  Dim intNewLCV As Integer
  Dim intToolCap As Double
  Dim intToolCapHPD As Integer
  Dim strPP As String
  Dim strPath As String
  Dim strID As String
  
  gblCancel = 0
  With frmModifyDelete
    .StartUpPosition = 0
    .Left = Application.Left + (0.5 * Application.Width) - (0.5 * .Width)
    .Top = Application.Top + (0.5 * Application.Height) - (0.5 * .Height)
    .Show
  End With


  If gblCancel <> -1 Then
    Worksheets("Modified Delete EZ1810 R6.5").Activate
    Set objSheet = ActiveSheet
    Set objWorking = Worksheets("Working")
   
    Call fncCountCompanyCodes(objSheet, CC_MD, 0)
    intCount = objWorking.Cells(1, 1).Value
    ReDim objNewWorkbook(intCount) As Workbook
    ReDim objNewSheet(intCount) As Object
    
    strValidityStart = Format(Now(), "YYYYMMDD")
    strValidityEnd = Format(DateAdd("YYYY", 3, Now()), "YYYYMMDD")
    strDUNS = objSheet.Range("C11").Value2
    strCurr = objSheet.Range("J8").Value
    intToolCap = WorksheetFunction.RoundDown(objSheet.Range("J7").Value / objSheet.Range("J10").Value, 0)
    intToolCapHPD = 8 * objSheet.Range("H10").Value
    strPPAP = Format(objSheet.Range("J11").Value, "YYYYMMDD")
    
    Set objWorkbook = ActiveWorkbook
    For intLCV2 = 1 To intCount
      Set objNewWorkbook(intLCV2) = Workbooks.Add
      Set objNewSheet(intLCV2) = objNewWorkbook(intLCV2).ActiveSheet
      Call fncCreateColumnHeaders(objNewSheet(intLCV2))
    Next intLCV2
    
    intLCV = 22
    
    objSheet.Activate
    objSheet.Calculate
    
    Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      Select Case objSheet.Cells(intLCV, 9)
      Case Is < 0
        strPP = "NEG"
      Case Else
        strPP = "POS"
      End Select
      
      strRefPartTemp = ""
      For intLCV3 = 1 To Len(objSheet.Cells(intLCV, 5).Value)
        If (Mid(objSheet.Cells(intLCV, 5).Value, intLCV3, 1) <> " ") Then
          strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 5).Value, intLCV3, 1)
        End If
      Next intLCV3
      If InStr(strRefPartTemp, ",") = 0 Then
        strRefPart = strRefPartTemp
      Else
        strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
      End If
      
      For intLCV4 = 59 To 65
        If objSheet.Cells(intLCV, intLCV4).Value <> 0 Then
          Select Case intLCV4
          Case 59
            strCC = "5K20"
          Case 61
            strCC = "2C70"
          Case 62
            strCC = "1000"
          Case 63
            strCC = "7090"
          Case 64
            strCC = "3000"
          Case 65
            strCC = "4C00"
          End Select
          For intLCV2 = 1 To intCount
            If objWorking.Cells(intLCV2 + 1, 1).Value = strCC & strPP Then
              intSheet = intLCV2
              intNewLCV = objWorking.Cells(intLCV2 + 1, 3).Value
              objWorking.Cells(intLCV2 + 1, 3).Value = objWorking.Cells(intLCV2 + 1, 3).Value + 1
            End If
          Next intLCV2
          objNewSheet(intSheet).Cells(intNewLCV, 1).Value = constDocType
          objNewSheet(intSheet).Cells(intNewLCV, 2).Value = strDUNS
          objNewSheet(intSheet).Cells(intNewLCV, 3).Value = constPurchOrg
          objNewSheet(intSheet).Cells(intNewLCV, 4).Value = strPurGroup & "'"
          objNewSheet(intSheet).Cells(intNewLCV, 5).Value = strCC
          objNewSheet(intSheet).Cells(intNewLCV, 6).Value = strValidityStart
          objNewSheet(intSheet).Cells(intNewLCV, 7).Value = strValidityEnd
          objNewSheet(intSheet).Cells(intNewLCV, 8).Value = strRefPart
          objNewSheet(intSheet).Cells(intNewLCV, 9).Value = constPurchType
          objNewSheet(intSheet).Cells(intNewLCV, 10).Value = constReqType
          objNewSheet(intSheet).Cells(intNewLCV, 11).Value = intToolCap
          objNewSheet(intSheet).Cells(intNewLCV, 12).Value = intToolCapHPD
          objNewSheet(intSheet).Cells(intNewLCV, 13).Value = objSheet.Cells(intLCV, 2).Value
          objNewSheet(intSheet).Cells(intNewLCV, 17).Value = strCurr
          objNewSheet(intSheet).Cells(intNewLCV, 18).Value = strPPAP
          objNewSheet(intSheet).Cells(intNewLCV, 19).Value = constAAC
          objNewSheet(intSheet).Cells(intNewLCV, 20).Value = "1"
          objNewSheet(intSheet).Cells(intNewLCV, 21).Value = Format(objSheet.Cells(intLCV, intLCV4).Value, "0.00")
          objNewSheet(intSheet).Cells(intNewLCV, 22).Value = constPer
          objNewSheet(intSheet).Cells(intNewLCV, 23).Value = "D"
          objNewSheet(intSheet).Cells(intNewLCV, 24).Value = fncDeterminePlant(strCC)
          objNewSheet(intSheet).Cells(intNewLCV, 25).Value = gblGL
          objNewSheet(intSheet).Cells(intNewLCV, 28).Value = gblWBS
          objNewSheet(intSheet).Cells(intNewLCV, 29).Value = objSheet.Cells(intLCV, 6).Value
          objNewSheet(intSheet).Cells(intNewLCV, 31).Value = objSheet.Cells(9, 10).Value
        End If
      Next intLCV4
      intLCV = intLCV + 1
    Loop

    strID = Environ("Username")
    strPath = "C:\Users\" & strID & "\Desktop\" & Left(objWorkbook.Name, Len(objWorkbook.Name) - 5)
    
    For intLCV = 1 To intCount
      If InStr(1, objWorking.Cells(intLCV + 1, 1).Value, "NEG", vbTextCompare) = 0 Then
        objNewWorkbook(intLCV).SaveAs Filename:=strPath & "-MD-" & objWorking.Cells(intLCV + 1, 1).Value & ".csv", FileFormat:=xlCSVMSDOS, CreateBackup:=False
        objNewWorkbook(intLCV).Close False
      Else
        objNewWorkbook(intLCV).Close False
      End If
    Next intLCV
  
    If intCount > 1 Then
      MsgBox "NOTICE : " & intCount & " CSV Files were generated due to multiple Comapny Codes on the SMART 1810.  Please refer to Column H on the Output CSV File to identify the Company Code.  NOTE : Negative Value line items are excluded from output.", vbInformation + vbOKOnly, "NOTICE"
    End If
  End If
  
Exit_fncModifiedDeleteST:
    Exit Function

Err_fncModifiedDeleteST:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncModifiedDeleteST" & vbCrLf & "SHEET : modExportMD"
    Resume Exit_fncModifiedDeleteST
End Function
Attribute VB_Name = "modExportNew"
Option Explicit
Global strCompanyCode As String
Global strCompanyCodes() As String

Function fncCreateColumnHeaders(ByVal objSheet As Object)
On Error GoTo Err_fncCreateColumnHeaders

  With objSheet
    .Columns("A:AK").ColumnWidth = 15
    .Range("A1").Value = "Tool Material Number"
    .Range("B1").Value = "Tool Description (M)"
    .Range("C1").Value = "Tool Category (M)"
    .Range("D1").Value = "Document Type (M)"
    .Range("E1").Value = "Vendor DUNS (M)"
    .Range("F1").Value = "Purch Organization"
    .Range("G1").Value = "Purch Group (M)"
    .Range("H1").Value = "Company Code (M)"
    .Range("I1").Value = "Validity Start"
    .Range("J1").Value = "Validity End (M)"
    .Range("K1").Value = "Reference Part Number (M)"
    .Range("L1").Value = "Purchase Type (M)"
    .Range("M1").Value = "Request Type (M)"
    .Range("N1").Value = "Parent Equipment Number (M)"
    .Range("O1").Value = "Progress Payment"
    .Range("P1").Value = "Payment Terms"
    .Range("Q1").Value = "Currency (M)"
    .Range("R1").Value = "Estimated Delivery Date"
    .Range("S1").Value = "Tooling capacity (qty/day)"
    .Range("T1").Value = "Tooling capacity (Hrs/day)"
    .Range("U1").Value = "Tier 2 Vendor"
    .Range("V1").Value = "Account Assignment Category (M)"
    .Range("W1").Value = "Target Quantity (M)"
    .Range("X1").Value = "Unit Price (M)"
    .Range("Y1").Value = "Per (M)"
    .Range("Z1").Value = "Item Category"
    .Range("AA1").Value = "Plant (M for Material Master)"
    .Range("AB1").Value = "G/L Account"
    .Range("AC1").Value = "Cost Center"
    .Range("AD1").Value = "Internal Order Number"
    .Range("AE1").Value = "WBS Element Number"
    .Range("AF1").Value = "Service Text"
    .Range("AG1").Value = "Tax Usage Indicator"
    .Range("AH1").Value = "Contract Number (Output)"
    .Range("AI1").Value = "Contract Item (Output)"
    .Range("AJ1").Value = "Material Result (Output)"
    .Range("AK1").Value = "Contract Result (Output)"
  End With

Exit_fncCreateColumnHeaders:
    Exit Function

Err_fncCreateColumnHeaders:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCreateColumnHeaders" & vbCrLf & "SHEET : modExportNew"
    Resume Exit_fncCreateColumnHeaders
End Function

Sub subPartialNewTool()
On Error GoTo Err_subPartialNewTool

'# User wants to create a CSV for the purpose of creating eSAP Equipment IDs ONLY, no Contract
'# or POs will be generated, so certain liberties can be taken, specifically omitting certain
'# fields on the CSV.

'# Per Michael Garbarz, these are the only required fields :
'#   Tool Description (M)
'#   Tool Category (M)
'#   Vendor DUNS (M)
'#   Tooling capacity (qty/day)
'#   Tooling capacity (Hrs/day)
'#   Tier 2 Vendor
'#   Target Quantity (M)
'#   Per (M)
'#   Plant (M for Material Master)

'# CONSTANTS
  Const constPer = "1"
  Const constPlant = "USNA"
  
  Dim strDUNS As String
  Dim objWorkbook As Workbook
  Dim objNewWorkbook As Workbook
  Dim objNewSheet As Object
  Dim objSheet As Object
  Dim intCount As Integer
  Dim intSheet As Integer
  Dim intLCV As Integer
  Dim intToolCap As Double
  Dim intToolCapHPD As Integer
  Dim strError As String
  Dim strID As String
  Dim strPath As String
  
'# CHECK FOR ERRORS
  strError = fncCheckPartial
  
  If strError = "" Then
    Worksheets("New Tools EZ1810 R6.5").Activate
    
    Set objSheet = ActiveSheet
    
    strDUNS = objSheet.Range("C11").Value2
    intToolCap = WorksheetFunction.RoundDown(objSheet.Range("J7").Value / objSheet.Range("J10").Value, 0)
    intToolCapHPD = 8 * objSheet.Range("H10").Value
        
    Set objWorkbook = ActiveWorkbook
    Set objNewWorkbook = Workbooks.Add
    Set objNewSheet = objNewWorkbook.ActiveSheet
    Call fncCreateColumnHeaders(objNewSheet)
    
    intLCV = 22
    
    Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      objNewSheet.Cells(intLCV - 20, 2).Value = objSheet.Cells(intLCV, 6).Value
      objNewSheet.Cells(intLCV - 20, 3).Value = objSheet.Cells(intLCV, 5).Value
      objNewSheet.Cells(intLCV - 20, 5).Value = strDUNS
      objNewSheet.Cells(intLCV - 20, 19).Value = intToolCap
      objNewSheet.Cells(intLCV - 20, 20).Value = intToolCapHPD
      objNewSheet.Cells(intLCV - 20, 21).Value = objSheet.Cells(intLCV, 12).Value
      objNewSheet.Cells(intLCV - 20, 23).Value = objSheet.Cells(intLCV, 9).Value
      objNewSheet.Cells(intLCV - 20, 25).Value = constPer
      objNewSheet.Cells(intLCV - 20, 27).Value = constPlant
      intLCV = intLCV + 1
    Loop

    strID = Environ("Username")
    strPath = "C:\Users\" & strID & "\Desktop\" & Left(objWorkbook.Name, Len(objWorkbook.Name) - 5)
    objNewWorkbook.SaveAs Filename:=strPath & "-PARTIAL.csv", FileFormat:=xlCSVMSDOS, CreateBackup:=False
    objNewWorkbook.Close False
  Else
    MsgBox strError, vbCritical + vbOKOnly, "ERROR"
  End If

Exit_subPartialNewTool:
    Exit Sub

Err_subPartialNewTool:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subPartialNewTool" & vbCrLf & "SHEET : modExportNew"
    Resume Exit_subPartialNewTool
End Sub

Sub subNewTool()
On Error GoTo Err_subNewTool

  Dim strPurGroup As String
  Dim strError As String
  Dim bolCancel As Boolean
    
  strError = fncCheckNew
  If strError = "" Then
    bolCancel = False
    strPurGroup = InputBox("Please enter a value for Purchasing Group", "Purchasing Group")
    While Len(strPurGroup) <> 3 And Not bolCancel
      If Len(strPurGroup) = 0 Then
        bolCancel = True
      Else
        MsgBox "The Purchasing Group cannot be Blank and must be exactly three (3) characters.", vbCritical + vbOKOnly, "ERROR"
        strPurGroup = InputBox("Please enter a value for Purchasing Group", "Purchasing Group")
      End If
    Wend
    
    If Not bolCancel Then
      Select Case Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value
      Case "Yes"
        fncNewToolST (strPurGroup)
      Case "No"
        fncNewToolNoST (strPurGroup)
      End Select
    End If
  Else
    MsgBox strError, vbCritical + vbOKOnly, "ERROR"
  End If
  
Exit_subNewTool:
    Exit Sub

Err_subNewTool:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subNewTool" & vbCrLf & "SHEET : modExportNew"
    Resume Exit_subNewTool
End Sub

Function fncNewToolNoST(strPurGroup As String)
On Error GoTo Err_fncNewToolNoST

'# CONSTANTS
  Const constDocType = "ZVTC"
  Const constPurchOrg = "GDIR"
  Const constPurchType = "Regular Purchase"
  Const constReqType = "Initial Tool"
  Const constAAC = "U"
  Const constPer = "1"
  
  Dim strPPAP As String
  Dim strValidityStart As String
  Dim strValidityEnd As String
  Dim strDUNS As String
  Dim strCurr As String
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim objWorkbook As Workbook
  Dim objSheet As Object
  Dim objWorking As Object
  Dim intCount As Integer
  Dim intSheet As Integer
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intLCV3 As Integer
  Dim intNewLCV As Integer
  Dim intToolCap As Double
  Dim intToolCapHPD As Integer
  Dim strPP As String
  Dim strPath As String
  Dim strID As String

    Worksheets("New Tools EZ1810 R6.5").Activate
    Set objSheet = ActiveSheet
    Set objWorking = Worksheets("Working")
  
    Call fncCountCompanyCodes(objSheet, CC_NT, PP_NT)
    intCount = objWorking.Cells(1, 1).Value
    ReDim objNewWorkbook(intCount) As Workbook
    ReDim objNewSheet(intCount) As Object
    
    strValidityStart = Format(Now(), "YYYYMMDD")
    strValidityEnd = Format(DateAdd("YYYY", 3, Now()), "YYYYMMDD")
    strDUNS = objSheet.Range("C11").Value2
    strCurr = objSheet.Range("J8").Value
    intToolCap = WorksheetFunction.RoundDown(objSheet.Range("J7").Value / objSheet.Range("J10").Value, 0)
    intToolCapHPD = 8 * objSheet.Range("H10").Value
    strPPAP = Format(objSheet.Range("J11").Value, "YYYYMMDD")
    
    Set objWorkbook = ActiveWorkbook
    For intLCV2 = 1 To intCount
      Set objNewWorkbook(intLCV2) = Workbooks.Add
      Set objNewSheet(intLCV2) = objNewWorkbook(intLCV2).ActiveSheet
      Call fncCreateColumnHeaders(objNewSheet(intLCV2))
    Next intLCV2
    
    intLCV = 22
    
    Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      Select Case UCase(Left(objSheet.Cells(intLCV, 17), 4))
      Case "NONE"
        strPP = "NO PP"
      Case "PULL", "M1 M", "CAPI"
        strPP = "PP"
      End Select
      
      strRefPartTemp = ""
      For intLCV3 = 1 To Len(objSheet.Cells(intLCV, 3).Value)
        If (Mid(objSheet.Cells(intLCV, 3).Value, intLCV3, 1) <> " ") Then
          strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 3).Value, intLCV3, 1)
        End If
      Next intLCV3
      If InStr(strRefPartTemp, ",") = 0 Then
        strRefPart = strRefPartTemp
      Else
        strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
      End If
      
      For intLCV2 = 1 To intCount
        If objWorking.Cells(intLCV2 + 1, 1).Value = objSheet.Cells(intLCV, 14).Value2 & strPP Then
          intSheet = intLCV2
          intNewLCV = objWorking.Cells(intLCV2 + 1, 3).Value
          objWorking.Cells(intLCV2 + 1, 3).Value = objWorking.Cells(intLCV2 + 1, 3).Value + 1
        End If
      Next intLCV2
      objNewSheet(intSheet).Cells(intNewLCV, 1).Value = objSheet.Cells(intLCV, 4).Value
      objNewSheet(intSheet).Cells(intNewLCV, 2).Value = objSheet.Cells(intLCV, 6).Value
      objNewSheet(intSheet).Cells(intNewLCV, 3).Value = objSheet.Cells(intLCV, 5).Value
      objNewSheet(intSheet).Cells(intNewLCV, 4).Value = constDocType
      objNewSheet(intSheet).Cells(intNewLCV, 5).Value = strDUNS
      objNewSheet(intSheet).Cells(intNewLCV, 6).Value = constPurchOrg
      objNewSheet(intSheet).Cells(intNewLCV, 7).Value = strPurGroup & "'"
      objNewSheet(intSheet).Cells(intNewLCV, 8).Value = objSheet.Cells(intLCV, 14).Value2 & "'"
      objNewSheet(intSheet).Cells(intNewLCV, 9).Value = strValidityStart
      objNewSheet(intSheet).Cells(intNewLCV, 10).Value = strValidityEnd
      objNewSheet(intSheet).Cells(intNewLCV, 11).Value = strRefPart
      objNewSheet(intSheet).Cells(intNewLCV, 12).Value = constPurchType
      objNewSheet(intSheet).Cells(intNewLCV, 13).Value = constReqType
      If strPP <> "NO PP" Then
        objNewSheet(intSheet).Cells(intNewLCV, 15).Value = "X"
      End If
      objNewSheet(intSheet).Cells(intNewLCV, 17).Value = strCurr
      objNewSheet(intSheet).Cells(intNewLCV, 18).Value = strPPAP
      objNewSheet(intSheet).Cells(intNewLCV, 19).Value = intToolCap
      objNewSheet(intSheet).Cells(intNewLCV, 20).Value = intToolCapHPD
      objNewSheet(intSheet).Cells(intNewLCV, 21).Value = objSheet.Cells(intLCV, 12).Value
      objNewSheet(intSheet).Cells(intNewLCV, 22).Value = constAAC
      objNewSheet(intSheet).Cells(intNewLCV, 23).Value = objSheet.Cells(intLCV, 9).Value
      objNewSheet(intSheet).Cells(intNewLCV, 24).Value = Format(objSheet.Cells(intLCV, 15).Value / objSheet.Cells(intLCV, 9).Value, "0.00")
      objNewSheet(intSheet).Cells(intNewLCV, 25).Value = constPer
      objNewSheet(intSheet).Cells(intNewLCV, 27).Value = fncDeterminePlant(objSheet.Cells(intLCV, 14).Value2)
      intLCV = intLCV + 1
    Loop

    strID = Environ("Username")
    strPath = "C:\Users\" & strID & "\Desktop\" & Left(objWorkbook.Name, Len(objWorkbook.Name) - 5)
    
    For intLCV = 1 To intCount
      objNewWorkbook(intLCV).SaveAs Filename:=strPath & "-NEW-" & objWorking.Cells(intLCV + 1, 1).Value & ".csv", FileFormat:=xlCSVMSDOS, CreateBackup:=False
      objNewWorkbook(intLCV).Close False
    Next intLCV
  
    If intCount > 1 Then
      MsgBox "NOTICE : " & intCount & " CSV Files were generated due to multiple Comapny Codes and/or Progress Payment Types on the SMART 1810.  " & _
             "Please refer to Columns H and O on the Output CSV File to identify the Company Code.", vbInformation + vbOKOnly, "NOTICE"
    End If

Exit_fncNewToolNoST:
    Exit Function

Err_fncNewToolNoST:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncNewToolNoST" & vbCrLf & "SHEET : modExportNew"
    Resume Exit_fncNewToolNoST
End Function

Function fncNewToolST(strPurGroup As String)
On Error GoTo Err_fncNewToolST

'# CONSTANTS
  Const constDocType = "ZVTC"
  Const constPurchOrg = "GDIR"
  Const constPurchType = "Regular Purchase"
  Const constReqType = "Initial Tool"
  Const constAAC = "U"
  Const constPer = "1"
  
  Dim strPPAP As String
  Dim strValidityStart As String
  Dim strValidityEnd As String
  Dim strDUNS As String
  Dim strCurr As String
  Dim strRefPart As String
  Dim strRefPartTemp As String
  Dim strCC As String
  Dim objWorkbook As Workbook
  Dim objSheet As Object
  Dim objWorking As Object
  Dim intCount As Integer
  Dim intSheet As Integer
  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intLCV3 As Integer
  Dim intLCV4 As Integer
  Dim intNewLCV As Integer
  Dim intToolCap As Double
  Dim intToolCapHPD As Integer
  Dim strPP As String
  Dim strPath As String
  Dim strID As String

    Worksheets("New Tools EZ1810 R6.5").Activate
    Set objSheet = ActiveSheet
    Set objWorking = Worksheets("Working")
  
    Call fncCountCompanyCodes(objSheet, CC_NT, PP_NT)
    intCount = objWorking.Cells(1, 1).Value
    ReDim objNewWorkbook(intCount) As Workbook
    ReDim objNewSheet(intCount) As Object
    
    strValidityStart = Format(Now(), "YYYYMMDD")
    strValidityEnd = Format(DateAdd("YYYY", 3, Now()), "YYYYMMDD")
    strDUNS = objSheet.Range("C11").Value2
    strCurr = objSheet.Range("J8").Value
    intToolCap = WorksheetFunction.RoundDown(objSheet.Range("J7").Value / objSheet.Range("J10").Value, 0)
    intToolCapHPD = 8 * objSheet.Range("H10").Value
    strPPAP = Format(objSheet.Range("J11").Value, "YYYYMMDD")
    
    Set objWorkbook = ActiveWorkbook
    For intLCV2 = 1 To intCount
      Set objNewWorkbook(intLCV2) = Workbooks.Add
      Set objNewSheet(intLCV2) = objNewWorkbook(intLCV2).ActiveSheet
      Call fncCreateColumnHeaders(objNewSheet(intLCV2))
    Next intLCV2
    
    intLCV = 22
    
    objSheet.Activate
    objSheet.Calculate
    
    Do While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      Select Case UCase(Left(objSheet.Cells(intLCV, 17), 4))
      Case "NONE"
        strPP = "NO PP"
      Case "PULL", "M1 M", "CAPI"
        strPP = "PP"
      End Select
      
      strRefPartTemp = ""
      For intLCV3 = 1 To Len(objSheet.Cells(intLCV, 3).Value)
        If (Mid(objSheet.Cells(intLCV, 3).Value, intLCV3, 1) <> " ") Then
          strRefPartTemp = strRefPartTemp & Mid(objSheet.Cells(intLCV, 3).Value, intLCV3, 1)
        End If
      Next intLCV3
      If InStr(strRefPartTemp, ",") = 0 Then
        strRefPart = strRefPartTemp
      Else
        strRefPart = Left(strRefPartTemp, InStr(strRefPartTemp, ",") - 1)
      End If
      
      For intLCV4 = 63 To 69
        If objSheet.Cells(intLCV, intLCV4).Value <> 0 Then
          Select Case intLCV4
          Case 63
            strCC = "5K20"
          Case 65
            strCC = "2C70"
          Case 66
            strCC = "1000"
          Case 67
            strCC = "7090"
          Case 68
            strCC = "3000"
          Case 69
            strCC = "4C00"
          End Select
          
          For intLCV2 = 1 To intCount
            If objWorking.Cells(intLCV2 + 1, 1).Value = strCC & strPP Then
              intSheet = intLCV2
              intNewLCV = objWorking.Cells(intLCV2 + 1, 3).Value
              objWorking.Cells(intLCV2 + 1, 3).Value = objWorking.Cells(intLCV2 + 1, 3).Value + 1
            End If
          Next intLCV2
          objNewSheet(intSheet).Cells(intNewLCV, 1).Value = objSheet.Cells(intLCV, 4).Value
          objNewSheet(intSheet).Cells(intNewLCV, 2).Value = objSheet.Cells(intLCV, 6).Value
          objNewSheet(intSheet).Cells(intNewLCV, 3).Value = objSheet.Cells(intLCV, 5).Value
          objNewSheet(intSheet).Cells(intNewLCV, 4).Value = constDocType
          objNewSheet(intSheet).Cells(intNewLCV, 5).Value = strDUNS
          objNewSheet(intSheet).Cells(intNewLCV, 6).Value = constPurchOrg
          objNewSheet(intSheet).Cells(intNewLCV, 7).Value = strPurGroup & "'"
          objNewSheet(intSheet).Cells(intNewLCV, 8).Value = strCC & "'"
          objNewSheet(intSheet).Cells(intNewLCV, 9).Value = strValidityStart
          objNewSheet(intSheet).Cells(intNewLCV, 10).Value = strValidityEnd
          objNewSheet(intSheet).Cells(intNewLCV, 11).Value = strRefPart
          objNewSheet(intSheet).Cells(intNewLCV, 12).Value = constPurchType
          objNewSheet(intSheet).Cells(intNewLCV, 13).Value = constReqType
          If strPP <> "NO PP" Then
            objNewSheet(intSheet).Cells(intNewLCV, 15).Value = "X"
          End If
          objNewSheet(intSheet).Cells(intNewLCV, 17).Value = strCurr
          objNewSheet(intSheet).Cells(intNewLCV, 18).Value = strPPAP
          objNewSheet(intSheet).Cells(intNewLCV, 19).Value = intToolCap
          objNewSheet(intSheet).Cells(intNewLCV, 20).Value = intToolCapHPD
          objNewSheet(intSheet).Cells(intNewLCV, 21).Value = objSheet.Cells(intLCV, 12).Value 'value used to be strDUNS, should have been Tier 2 DUNS
          objNewSheet(intSheet).Cells(intNewLCV, 22).Value = constAAC
          objNewSheet(intSheet).Cells(intNewLCV, 23).Value = objSheet.Cells(intLCV, 9).Value
          objNewSheet(intSheet).Cells(intNewLCV, 24).Value = Format(objSheet.Cells(intLCV, intLCV4).Value / objSheet.Cells(intLCV, 9).Value, "0.00")
          objNewSheet(intSheet).Cells(intNewLCV, 25).Value = constPer
          objNewSheet(intSheet).Cells(intNewLCV, 27).Value = fncDeterminePlant(strCC)
        End If
      Next intLCV4
      intLCV = intLCV + 1
    Loop
    
    strID = Environ("Username")
    strPath = "C:\Users\" & strID & "\Desktop\" & Left(objWorkbook.Name, Len(objWorkbook.Name) - 5)
    
    For intLCV = 1 To intCount
      objNewWorkbook(intLCV).SaveAs Filename:=strPath & "-NEW-" & objWorking.Cells(intLCV + 1, 1).Value & ".csv", FileFormat:=xlCSVMSDOS, CreateBackup:=False
      objNewWorkbook(intLCV).Close False
    Next intLCV
  
    If intCount > 1 Then
      MsgBox "NOTICE : " & intCount & " CSV Files were generated due to multiple Comapny Codes and/or Progress Payment Types on the SMART 1810.  Please refer to Columns H and O on the Output CSV File to identify the Company Code.", vbInformation + vbOKOnly, "NOTICE"
    End If

Exit_fncNewToolST:
    Exit Function

Err_fncNewToolST:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncNewToolST" & vbCrLf & "SHEET : modExportNew"
    Stop
    Resume Exit_fncNewToolST
End Function
Attribute VB_Name = "modGlobal"
Option Explicit

Global Const CC_MD = 13
Global Const CC_NT = 14
Global Const PP_NT = 17

Global gblRow, gblCol, gblDataStart, gblDataEnd, gblDataColumn As Integer
Global gblSheet As String
Global gblTitle, gblCaption As String
Global gblWBS, gblGL As String
Global gblCancel As Integer
Global Const gblPassword = "volt16"
Attribute VB_Name = "modSupport"
Option Explicit

Public Function fncCalc(intSheet As Integer, strTLC As String, strGMML As String, strCC As String, lngCol As Long, lngRow As Long, rngRange As Range, bolMD As Boolean) As Double
'On Error GoTo Err_fncCalc
  
  Const badcol = "1, 2, 4, 5, 6, 7, 8, 9, 11"
  Dim iterator As Variant
  Dim counter As Long
  Dim GMK_CKD As String ' values in this column should always be 0, but decision was made not to remove this variable 1/24/2018
  Dim GM_KOREA As String 'renamed from GMK_NON_CKD since this column has been repurposed in Q1 2018 for Korea project
  Dim GME As String
  Dim GMI As String
  Dim GMLAAM As String
  Dim GMNA_US As String
  Dim GMNA_MEX As String
  Dim GMNA_CAN As String
  Dim GMTH As String
  Dim SGM As String
  Dim TOOLCO_US As String
  Dim TOTAL As String
  
  If bolMD Then
    GMK_CKD = "AT"
    GM_KOREA = "AU"
    GME = "AV"
    GMI = "AW"
    GMLAAM = "AX"
    GMNA_US = "AY"
    GMNA_MEX = "AZ"
    GMNA_CAN = "BA"
    GMTH = "BB"
    SGM = "BC"
    TOOLCO_US = "BD"
    TOTAL = "BE"
  Else
    GMK_CKD = "AX"
    GM_KOREA = "AY"
    GME = "AZ"
    GMI = "BA"
    GMLAAM = "BB"
    GMNA_US = "BC"
    GMNA_MEX = "BD"
    GMNA_CAN = "BE"
    GMTH = "BF"
    SGM = "BG"
    TOOLCO_US = "BH"
    TOTAL = "BI"
  End If
  
  Application.Volatile True
  Const strEurope = "Austria, Belgium, Bulgaria, Croatia, Czech Republic, Denmark, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Netherlands, Norway, Poland, Portugal Romania, Slovak Republic, Slovenia, Spain, Sweden, Switzerland, UK"
  Dim intLCV As Integer
  Dim lngTot As Double
  Dim intCount As Integer
If intSheet = 4 Then
  If lngCol = 61 Then
      If lngRow = 22 Then
      '    Stop
      End If
  End If
End If
  If (strTLC = "Canada" And strGMML = "Multiple") Then
    If (strCC = "3000") Then

' SCENARIO 1
'   This will generate 1 CSV for CC3000
      fncCalc = Sheets(intSheet).Range(TOTAL & lngRow).Value - Sheets(intSheet).Range(SGM & lngRow).Value - Sheets(intSheet).Range(GME & lngRow).Value
    End If
  Else
    If (strTLC = "Mexico" And strGMML = "Multiple") Then

' SCENARIO 2
'   This will generate up to 4 CSVs for CC1000,7090,3000, 4C00 also Grey out Toolco US LCR
      Select Case strCC
      Case "1000" ' Add in GMI and GMTH and GMLAAM (If any of these individual values are > 30% then indicate it somehow
' = GMNA US + GMI + GMTH + GM LAAM
        fncCalc = Sheets(intSheet).Range(GMNA_US & lngRow).Value + Sheets(intSheet).Range(GMI & lngRow).Value + Sheets(intSheet).Range(GMTH & lngRow).Value + Sheets(intSheet).Range(GMLAAM & lngRow).Value
      Case "7090"
' = GMNA MEX
        fncCalc = Sheets(intSheet).Range(GMNA_MEX & lngRow).Value
      Case "3000"
' = GMNA CAN
        fncCalc = Sheets(intSheet).Range(GMNA_CAN & lngRow).Value
      Case "4C00"
' = GMK
        fncCalc = Sheets(intSheet).Range(GM_KOREA & lngRow).Value
        'Change to have GMK 4C00 calculate 1_22_2018 Gary Bellia
      End Select
    Else
      If InStr(1, strEurope, strTLC, vbTextCompare) = 0 And InStr(1, "Mexico, Canada", strGMML, vbTextCompare) = 0 And strGMML = "Multiple" Then
      'All three of these : 1) Tool Location/Country of Modification is NOT EUROPE, 2) Mfg location is NOT MEXICO OR CANADA, and 3) Mfg Loc. = Multiple

' SCENARIO 3
'   MODIFIED BY ADRIANA 02172016
        lngTot = 0
        intCount = 0
        For intLCV = 1 To rngRange.Columns.Count
            If InStr(1, badcol, intLCV) > 0 And rngRange.Cells(1, intLCV) <> 0 Then
                counter = counter + 1
            End If
        Next intLCV
        
        For intLCV = 1 To rngRange.Columns.Count
          If intLCV <> 10 Then
            If IsNumeric(rngRange.Cells(1, intLCV)) Then
                If strCC <> "2C70" And strCC <> "1000" And strCC <> "7090" And strCC <> "3000" Then
                    lngTot = lngTot + CDbl(rngRange.Cells(1, intLCV))
                  
                ElseIf strCC = "7090" And counter = 1 And rngRange(1, 7) <> 0 Then
                    fncCalc = rngRange(1, 7)
                    Exit Function
                ElseIf strCC = "3000" And counter = 1 And rngRange(1, 8) <> 0 Then
                    fncCalc = rngRange(1, 8)
                    Exit Function
                Else
                    If counter > 1 Then
                       If intLCV <> 3 And intLCV <> 10 Then
                         lngTot = lngTot + CDbl(rngRange.Cells(1, intLCV))
                       End If
                    Else
                        If strCC = "1000" And counter = 1 And rngRange.Cells(1, 6) <> 0 Then
                            fncCalc = CDbl(rngRange.Cells(1, 6))
                            Exit Function
                        Else
                            fncCalc = 0
                            Exit Function
                        End If
                    End If
                End If
            End If
            If rngRange.Cells(1, intLCV) <> 0 Then
              intCount = intCount + 1
            End If
          End If
        Next intLCV
        If lngTot = CLng(rngRange.Cells(1, 6)) And strCC = "1000" Then
          fncCalc = rngRange.Cells(1, 6)
        Else
          If lngTot = CLng(rngRange.Cells(1, 7)) And strCC = "7090" Then
            fncCalc = rngRange.Cells(1, 7)
          Else
            If lngTot = CLng(rngRange.Cells(1, 8)) And strCC = "3000" Then
              fncCalc = rngRange.Cells(1, 8)
            Else
              If intCount > 1 And strCC = "2C70" Then
                fncCalc = lngTot
              End If
            End If
          End If
        End If
      Else
        If InStr(1, strEurope, strTLC, vbTextCompare) <> 0 And InStr(1, "United States, Mexico, Canada, Multiple", strGMML, vbTextCompare) <> 0 Then
' SCENARIO 4 - This will generate 1 CSV for CCode 02C8
' = GMK CKD + GMK NON CKD + GME + GMNA US + GMNA MEX + GMNA CAN
          If strCC = "5K20" Then 'Updated to 5K20 from 02C8 9/18/2019 XXXXXX
            fncCalc = Sheets(intSheet).Range(GMK_CKD & lngRow).Value + Sheets(intSheet).Range(GM_KOREA & lngRow).Value + Sheets(intSheet).Range(GMNA_US & lngRow).Value + Sheets(intSheet).Range(GMNA_MEX & lngRow).Value + Sheets(intSheet).Range(GMNA_CAN & lngRow).Value
            'fncCalc = Sheets(intSheet).Range(GMK_CKD & lngRow).Value + Sheets(intSheet).Range(GMK_NON_CKD & lngRow).Value + Sheets(intSheet).Range(GME & lngRow).Value + Sheets(intSheet).Range(GMNA_US & lngRow).Value + Sheets(intSheet).Range(GMNA_MEX & lngRow).Value + Sheets(intSheet).Range(GMNA_CAN & lngRow).Value
          End If
        Else
' DEFAULT SCENARIO
          Select Case strCC
          Case "2C70"
            fncCalc = Sheets(intSheet).Range(TOOLCO_US & lngRow).Value
          Case "1000"
            fncCalc = Sheets(intSheet).Range(GMNA_US & lngRow).Value
          Case "7090"
            fncCalc = Sheets(intSheet).Range(GMNA_MEX & lngRow).Value
          Case "3000"
            fncCalc = Sheets(intSheet).Range(GMNA_CAN & lngRow).Value
          Case "4C00"
            fncCalc = Sheets(intSheet).Range(GM_KOREA & lngRow).Value
          End Select
        End If
      End If
    End If
  End If

Exit_fncCalc:
    Exit Function

Err_fncCalc:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCalc" & vbCrLf & "SHEET : modSupport"
    Resume 'Exit_fncCalc
End Function

Function fncAddCompanyCode(strCC, strPP As String, ByRef intCount As Integer)
On Error GoTo Err_fncAddCompanyCode

  Dim bolRepeat As Boolean
  Dim intLCV As Integer
    
  bolRepeat = False
  For intLCV = 2 To intCount + 1
    If Sheets("Working").Cells(intLCV, 1).Value = strCC & strPP Then
      bolRepeat = True
    End If
  Next intLCV
    
  If Not bolRepeat Then
    Sheets("Working").Cells(intCount + 1, 1).Value = strCC & strPP
    Sheets("Working").Cells(intCount + 1, 2).Value = intCount
    Sheets("Working").Cells(intCount + 1, 3).Value = 2
    intCount = intCount + 1
  End If

Exit_fncAddCompanyCode:
    Exit Function

Err_fncAddCompanyCode:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncAddCompanyCode" & vbCrLf & "SHEET : modSupport"
    Resume Exit_fncAddCompanyCode
End Function

Function fncCountCompanyCodes(objSheet As Object, intColCC As Integer, intColPP As Integer)
On Error GoTo Err_fncCountCompanyCodes

  Const CC_5K20 = 63
  Const CC_2C70 = 65
  Const CC_1000 = 66
  Const CC_7090 = 67
  Const CC_3000 = 68
  Const CC_4C00 = 69
  Const CC_MD_OFFSET = -4
  
  Dim intCount As Integer
  Dim intLCV As Integer
  Dim intRow As Integer
  Dim intOffset As Integer
  Dim strPP As String
  Dim strCC As String
  Dim bolST As Boolean
  Dim bolRepeat As Boolean
  
'# Clear existing data
  For intLCV = 1 To 25
    Sheets("Working").Cells(intLCV, 1).Value = ""
    Sheets("Working").Cells(intLCV, 2).Value = ""
  Next intLCV

  intLCV = 22
  intCount = 0
  
  If (Sheets("EZ1810 Welcome Screen").Cells(6, 13).Value = "Yes") Then
    bolST = True
  Else
    bolST = False
  End If
  
  Select Case objSheet.Name
  Case "New Tools EZ1810 R6.5"
    intOffset = 0
  Case "Modified Delete EZ1810 R6.5"
    intOffset = CC_MD_OFFSET
  End Select


  If bolST Then
    intCount = intCount + 1
    While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
' Modified Delete does not use Progressive Payments so instead use this for negative vs positive numbers in the
' total supplier tool cost.
      If intColPP = 0 Then
        Select Case objSheet.Cells(intLCV, 9).Value
        Case Is < 0
          strPP = "NEG"
        Case Else
          strPP = "POS"
        End Select
      Else
        Select Case Left(objSheet.Cells(intLCV, intColPP), 4)
        Case "None"
          strPP = "NO PP"
        Case "Pull", "M1 m", "Capi"
          strPP = "PP"
        End Select
      End If
    
      If objSheet.Cells(intLCV, CC_5K20 + intOffset).Value2 <> 0 Then
        strCC = "5K20"
        fncAddCompanyCode strCC, strPP, intCount
      End If
    
      If objSheet.Cells(intLCV, CC_2C70 + intOffset).Value2 <> 0 Then
        strCC = "2C70"
        fncAddCompanyCode strCC, strPP, intCount
      End If
      
      If objSheet.Cells(intLCV, CC_1000 + intOffset).Value2 <> 0 Then
        strCC = "1000"
        fncAddCompanyCode strCC, strPP, intCount
      End If
        
      If objSheet.Cells(intLCV, CC_7090 + intOffset).Value2 <> 0 Then
        strCC = "7090"
        fncAddCompanyCode strCC, strPP, intCount
      End If
        
      If objSheet.Cells(intLCV, CC_3000 + intOffset).Value2 <> 0 Then
        strCC = "3000"
        fncAddCompanyCode strCC, strPP, intCount
      End If
      
      If objSheet.Cells(intLCV, CC_4C00 + intOffset).Value2 <> 0 Then
        strCC = "4C00"
        fncAddCompanyCode strCC, strPP, intCount
      End If
      
      intLCV = intLCV + 1
    Wend
    Sheets("Working").Cells(1, 1).Value = intCount - 1
  Else
    While (objSheet.Cells(intLCV, 2).Value <> "") And (objSheet.Cells(intLCV, 2).Value <> "END")
      intCount = intCount + 1
      If intColPP = 0 Then
' Modified Delete does not use Progressive Payments so instead use this for negative vs positive numbers in the
' total supplier tool cost.
        Select Case objSheet.Cells(intLCV, 9).Value
          Case Is < 0
            strPP = "NEG"
          Case Else
            strPP = "POS"
        End Select
      Else
        Select Case Left(objSheet.Cells(intLCV, intColPP), 4)
          Case "None"
            strPP = "NO PP"
          Case "Pull", "M1 m", "Capi"
            strPP = "PP"
        End Select
      End If
      bolRepeat = False
      For intRow = 2 To intCount + 1
        If Sheets("Working").Cells(intRow, 1).Value = objSheet.Cells(intLCV, intColCC) & strPP Then
          bolRepeat = True
        End If
      Next intRow
      
      If Not bolRepeat Then
        Sheets("Working").Cells(intCount + 1, 1).Value = objSheet.Cells(intLCV, intColCC) & strPP
        Sheets("Working").Cells(intCount + 1, 2).Value = intCount
        Sheets("Working").Cells(intCount + 1, 3).Value = 2
      Else
        intCount = intCount - 1
      End If
      intLCV = intLCV + 1
    Wend
    Sheets("Working").Cells(1, 1).Value = intCount
  End If
    
Exit_fncCountCompanyCodes:
    Exit Function

Err_fncCountCompanyCodes:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncCountCompanyCodes" & vbCrLf & "SHEET : modSupport"
    Resume Exit_fncCountCompanyCodes
End Function

Sub subPaste()
On Error GoTo Err_subPaste

  Dim objClipboard As New MSForms.DataObject
  Dim varRows As Variant
  Dim intLCV As Integer

  intLCV = 0
  objClipboard.GetFromClipboard
  varRows = objClipboard.GetText
  varRows = Split(varRows, vbCrLf)

  If ActiveCell.Row < 22 Then
    MsgBox "Pasting only allowed in the detail section", vbCritical + vbOKOnly, "ERROR"
  Else
    While ActiveSheet.Cells(ActiveCell.Row + intLCV, 2).Value <> "END" Or intLCV > 100
      intLCV = intLCV + 1
    Wend
    
    If intLCV < UBound(varRows) Then
      MsgBox "Not enough empty rows, please add rows to the 1810", vbCritical + vbOKOnly, "ERROR"
    Else
      ActiveSheet.Paste
    End If
  End If

Exit_subPaste:
    Exit Sub

Err_subPaste:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subPaste" & vbCrLf & "SHEET : modSupport"
    Resume Exit_subPaste
End Sub

Function fncUpdateTotals(strSheet As String, intRow As Integer, strRow As String)
On Error GoTo Err_fncUpdateTotals

  Select Case strSheet
  Case "NT"
    ActiveSheet.Range("O" & intRow).Formula = "=SUM(O22:O" & strRow & ")"
    ActiveSheet.Range("S" & intRow).Formula = "=SUM(S22:S" & strRow & ")"
    ActiveSheet.Range("T" & intRow).Formula = "=SUM(T22:T" & strRow & ")"
    ActiveSheet.Range("V" & intRow).Formula = "=SUM(V22:V" & strRow & ")"
    ActiveSheet.Range("Y" & intRow).Formula = "=SUM(Y22:Y" & strRow & ")"
    ActiveSheet.Range("Z" & intRow).Formula = "=SUM(Z22:Z" & strRow & ")"
    ActiveSheet.Range("AA" & intRow).Formula = "=SUM(AA22:AA" & strRow & ")"
    ActiveSheet.Range("AB" & intRow).Formula = "=SUM(AB22:AB" & strRow & ")"
    ActiveSheet.Range("AC" & intRow).Formula = "=SUM(AC22:AC" & strRow & ")"
    ActiveSheet.Range("AD" & intRow).Formula = "=SUM(AD22:AD" & strRow & ")"
    ActiveSheet.Range("AE" & intRow).Formula = "=SUM(AE22:AE" & strRow & ")"
    ActiveSheet.Range("AF" & intRow).Formula = "=SUM(AF22:AF" & strRow & ")"
    ActiveSheet.Range("AG" & intRow).Formula = "=SUM(AG22:AG" & strRow & ")"
    ActiveSheet.Range("AH" & intRow).Formula = "=SUM(AH22:AH" & strRow & ")"
    ActiveSheet.Range("AI" & intRow).Formula = "=SUM(AI22:AI" & strRow & ")"
    ActiveSheet.Range("AJ" & intRow).Formula = "=SUM(AJ22:AJ" & strRow & ")"
    ActiveSheet.Range("AK" & intRow).Formula = "=SUM(AK22:AK" & strRow & ")"
    ActiveSheet.Range("AL" & intRow).Formula = "=SUM(AL22:AL" & strRow & ")"
    ActiveSheet.Range("AX" & intRow).Formula = "=SUM(AX22:AX" & strRow & ")"
    ActiveSheet.Range("AY" & intRow).Formula = "=SUM(AY22:AY" & strRow & ")"
    ActiveSheet.Range("AZ" & intRow).Formula = "=SUM(AZ22:AZ" & strRow & ")"
    ActiveSheet.Range("BA" & intRow).Formula = "=SUM(BA22:BA" & strRow & ")"
    ActiveSheet.Range("BB" & intRow).Formula = "=SUM(BB22:BB" & strRow & ")"
    ActiveSheet.Range("BC" & intRow).Formula = "=SUM(BC22:BC" & strRow & ")"
    ActiveSheet.Range("BD" & intRow).Formula = "=SUM(BD22:BD" & strRow & ")"
    ActiveSheet.Range("BE" & intRow).Formula = "=SUM(BE22:BE" & strRow & ")"
    ActiveSheet.Range("BF" & intRow).Formula = "=SUM(BF22:BF" & strRow & ")"
    ActiveSheet.Range("BG" & intRow).Formula = "=SUM(BG22:BG" & strRow & ")"
    ActiveSheet.Range("BH" & intRow).Formula = "=SUM(BH22:BH" & strRow & ")"
    ActiveSheet.Range("BI" & intRow).Formula = "=SUM(BI22:BI" & strRow & ")"
    ActiveSheet.Range("BK" & intRow).Formula = "=SUM(BK22:BK" & strRow & ")"
    ActiveSheet.Range("BM" & intRow).Formula = "=SUM(BM22:BM" & strRow & ")"
    ActiveSheet.Range("BN" & intRow).Formula = "=SUM(BN22:BN" & strRow & ")"
    ActiveSheet.Range("BO" & intRow).Formula = "=SUM(BO22:BO" & strRow & ")"
    ActiveSheet.Range("BP" & intRow).Formula = "=SUM(BP22:BP" & strRow & ")"
    ActiveSheet.Range("BQ" & intRow).Formula = "=SUM(BQ22:BQ" & strRow & ")"
    ActiveSheet.Range("BS" & intRow).Formula = "=SUM(BS22:BS" & strRow & ")"
  Case "MD"
    ActiveSheet.Range("I" & intRow).Formula = "=SUM(I22:I" & strRow & ")"
    ActiveSheet.Range("J" & intRow).Formula = "=SUM(J22:J" & strRow & ")"
    ActiveSheet.Range("O" & intRow).Formula = "=SUM(O22:O" & strRow & ")"
    ActiveSheet.Range("P" & intRow).Formula = "=SUM(P22:P" & strRow & ")"
    ActiveSheet.Range("R" & intRow).Formula = "=SUM(R22:R" & strRow & ")"
    ActiveSheet.Range("S" & intRow).Formula = "=SUM(S22:S" & strRow & ")"
    ActiveSheet.Range("T" & intRow).Formula = "=SUM(T22:T" & strRow & ")"
    ActiveSheet.Range("U" & intRow).Formula = "=SUM(U22:U" & strRow & ")"
    ActiveSheet.Range("V" & intRow).Formula = "=SUM(V22:V" & strRow & ")"
    ActiveSheet.Range("W" & intRow).Formula = "=SUM(W22:W" & strRow & ")"
    ActiveSheet.Range("X" & intRow).Formula = "=SUM(X22:X" & strRow & ")"
    ActiveSheet.Range("Y" & intRow).Formula = "=SUM(Y22:Y" & strRow & ")"
    ActiveSheet.Range("Z" & intRow).Formula = "=SUM(Z22:Z" & strRow & ")"
    ActiveSheet.Range("AA" & intRow).Formula = "=SUM(AA22:AA" & strRow & ")"
    ActiveSheet.Range("AB" & intRow).Formula = "=SUM(AB22:AB" & strRow & ")"
    ActiveSheet.Range("AC" & intRow).Formula = "=SUM(AC22:AC" & strRow & ")"
    ActiveSheet.Range("AD" & intRow).Formula = "=SUM(AD22:AD" & strRow & ")"
    ActiveSheet.Range("AE" & intRow).Formula = "=SUM(AE22:AE" & strRow & ")"
    ActiveSheet.Range("AF" & intRow).Formula = "=SUM(AF22:AF" & strRow & ")"
    ActiveSheet.Range("AR" & intRow).Formula = "=SUM(AR22:AR" & strRow & ")"
    ActiveSheet.Range("AS" & intRow).Formula = "=SUM(AS22:AS" & strRow & ")"
    ActiveSheet.Range("AT" & intRow).Formula = "=SUM(AT22:AT" & strRow & ")"
    ActiveSheet.Range("AU" & intRow).Formula = "=SUM(AU22:AU" & strRow & ")"
    ActiveSheet.Range("AV" & intRow).Formula = "=SUM(AV22:AV" & strRow & ")"
    ActiveSheet.Range("AW" & intRow).Formula = "=SUM(AW22:AW" & strRow & ")"
    ActiveSheet.Range("AX" & intRow).Formula = "=SUM(AX22:AX" & strRow & ")"
    ActiveSheet.Range("AY" & intRow).Formula = "=SUM(AY22:AY" & strRow & ")"
    ActiveSheet.Range("AZ" & intRow).Formula = "=SUM(AZ22:AZ" & strRow & ")"
    ActiveSheet.Range("BA" & intRow).Formula = "=SUM(BA22:BA" & strRow & ")"
    ActiveSheet.Range("BB" & intRow).Formula = "=SUM(BB22:BB" & strRow & ")"
    ActiveSheet.Range("BC" & intRow).Formula = "=SUM(BC22:BC" & strRow & ")"
    ActiveSheet.Range("BE" & intRow).Formula = "=SUM(BE22:BE" & strRow & ")"
    ActiveSheet.Range("BG" & intRow).Formula = "=SUM(BG22:BG" & strRow & ")"
    ActiveSheet.Range("BH" & intRow).Formula = "=SUM(BH22:BH" & strRow & ")"
    ActiveSheet.Range("BI" & intRow).Formula = "=SUM(BI22:BI" & strRow & ")"
    ActiveSheet.Range("BJ" & intRow).Formula = "=SUM(BJ22:BJ" & strRow & ")"
    ActiveSheet.Range("BK" & intRow).Formula = "=SUM(BK22:BK" & strRow & ")"
    ActiveSheet.Range("BM" & intRow).Formula = "=SUM(BM22:BM" & strRow & ")"
  End Select

Exit_fncUpdateTotals:
    Exit Function

Err_fncUpdateTotals:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncUpdateTotals" & vbCrLf & "SHEET : modSupport"
    Resume Exit_fncUpdateTotals
End Function

Sub subAddRow()
On Error GoTo Err_subAddRow

  Dim intLCV As Integer
  Dim intLCV2 As Integer
  Dim intRow As Integer
  Dim strRow As String
  Dim bolFull As Boolean
  
  intLCV = 22
  bolFull = False
    
  For intLCV2 = 1 To ActiveSheet.Range("A21").Value
    While (ActiveSheet.Range("B" & intLCV).Value <> "") And Not bolFull
      If ActiveSheet.Range("B" & intLCV).Value = "END" Then
        bolFull = True
        intRow = intLCV - 1
      Else
        intLCV = intLCV + 1
      End If
    Wend
  
    If ActiveSheet.Range("B" & intLCV).Value = "" Then
      intRow = intLCV
    End If

    ActiveSheet.Range(intRow & ":" & intRow).Select
    Selection.Copy
    ActiveSheet.Range(intRow & ":" & intRow).Select
    Selection.Insert Shift:=xlDown
    Select Case ActiveSheet.Range("A2").Value
    Case "New Tools"
      ActiveSheet.Range("B" & intRow + 1 & ":" & "M" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("O" & intRow + 1 & ":" & "R" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("W" & intRow + 1 & ":" & "AK" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("B" & intRow).Select
      intRow = 22
      While (ActiveSheet.Range("B" & intRow).Value <> "END")
        intRow = intRow + 1
      Wend
      strRow = intRow - 1
      fncUpdateTotals "NT", intRow, strRow
    Case "Modified Delete Tools"
      ActiveSheet.Range("B" & intRow + 1 & ":" & "L" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("N" & intRow + 1 & ":" & "N" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("S" & intRow + 1 & ":" & "AG" & intRow + 1).Select
      Selection.ClearContents
      ActiveSheet.Range("B" & intRow).Select
      intRow = 22
      While (ActiveSheet.Range("B" & intRow).Value <> "END")
        intRow = intRow + 1
      Wend
      strRow = intRow - 1
      fncUpdateTotals "MD", intRow, strRow
    End Select
  Next intLCV2
  
  Select Case ActiveSheet.Range("A2").Value
  Case "New Tools"
    fncUpdateTotals "NT", intRow, strRow
  Case "Modified Delete Tools"
    fncUpdateTotals "MD", intRow, strRow
  End Select
  
Exit_subAddRow:
    Exit Sub

Err_subAddRow:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subAddRow" & vbCrLf & "SHEET : modSupport"
    Resume Exit_subAddRow
End Sub

Sub subDelRow()
On Error GoTo Err_subDelRow

  Dim intLCV As Integer
  Dim intCount As Integer
  Dim bolFull As Boolean
  
  intCount = 0
  intLCV = 22
  bolFull = False
  
  While (ActiveSheet.Range("B" & intLCV).Value <> "END")
    intCount = intCount + 1
    intLCV = intLCV + 1
  Wend
  
  intLCV = 22
  While (ActiveSheet.Range("B" & intLCV).Value <> "") And Not bolFull
    If ActiveSheet.Range("B" & intLCV).Value = "END" Then
      bolFull = True
    Else
      intLCV = intLCV + 1
    End If
  Wend
  
  If Not bolFull Then
    If intCount > 2 Then
      ActiveSheet.Range("B" & intLCV).Select
      ActiveCell.EntireRow.Delete
    Else
      Select Case ActiveSheet.Range("A2").Value
      Case "New Tools"
        ActiveSheet.Range("B" & intLCV & ":" & "M" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("O" & intLCV & ":" & "R" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("W" & intLCV & ":" & "AK" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("B" & intLCV).Select
      Case "Modified Delete Tools"
        ActiveSheet.Range("B" & intLCV & ":" & "L" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("N" & intLCV & ":" & "N" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("Q" & intLCV & ":" & "AE" & intLCV).Select
        Selection.ClearContents
        ActiveSheet.Range("B" & intLCV).Select
      End Select
    End If
  Else
    MsgBox "ERROR : There are no blank records to delete.", vbCritical + vbOKOnly, "ERROR"
  End If
  
Exit_subDelRow:
    Exit Sub

Err_subDelRow:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subDelRow" & vbCrLf & "SHEET : modSupport"
    Resume Exit_subDelRow
End Sub

Public Function fncDeterminePlant(strCC As String) As String
On Error GoTo Err_fncDeterminePlant

  Select Case strCC
  Case "3000"
    fncDeterminePlant = "CA65"
  Case "7090"
    fncDeterminePlant = "MX2A"
  Case "1000"
    fncDeterminePlant = "USNA"
  Case "2C70"
    fncDeterminePlant = "US1J"
  Case "7530"
    fncDeterminePlant = "ARWB"
  Case "4C00"
    fncDeterminePlant = "KR05"
  Case "5K20"
    fncDeterminePlant = "GB07"
  End Select

Exit_fncDeterminePlant:
    Exit Function

Err_fncDeterminePlant:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : fncDeterminePlant" & vbCrLf & "SHEET : modSupport"
    Resume Exit_fncDeterminePlant
End Function
Attribute VB_Name = "modWelcomeScreen"
Option Explicit

Sub subSelection()
On Error GoTo Err_subSelection

  Dim shpOption1 As Shape
  Dim shpOption2 As Shape
  Dim shpOption3 As Shape
  Dim shpOption4 As Shape
  
  Set shpOption1 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 1")
  Set shpOption2 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 2")
  Set shpOption3 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 3")
  Set shpOption4 = Worksheets("EZ1810 Welcome Screen").Shapes("Option Button 4")
  
  ' #NEW TOOLS
  If shpOption1.ControlFormat.Value = xlOn Then
    Worksheets(3).Visible = xlSheetVisible
    Worksheets(4).Visible = xlSheetHidden
    Worksheets("EZ1810 Welcome Screen").Select
    Range("A21").FormulaR1C1 = "SHEET(S) REQUIRED : New Tools EZ1810 R6.5"
    Range("A23").FormulaR1C1 = "The New Tools sheet will be used by the buyer to upload into SAP to create your Purchase Order.  In order for"
    Range("A24").FormulaR1C1 = "the buyer to generate your Purchase Order in a timely manner, please ensure that all required fields are filled in correctly."
    Range("A25").FormulaR1C1 = ""
    Range("A26").FormulaR1C1 = "When you attempt to save the document, the SMART EZ1810 will attempt to do some basic Error Checking and"
    Range("A27").FormulaR1C1 = "give you a visual cue to any fields that may be filled out incorrectly along with some verbiage on what may be incorrect."
    Range("A28").FormulaR1C1 = ""
    Range("A29").FormulaR1C1 = ""
    Range("A30").FormulaR1C1 = ""
    Range("A31").FormulaR1C1 = ""
    Range("K20").FormulaR1C1 = "FULL PROCESS (eSAP) / Regional System Process"
  End If

  ' #MODIFY DELETE
  If shpOption2.ControlFormat.Value = xlOn Then
    Worksheets(3).Visible = xlSheetHidden
    Worksheets(4).Visible = xlSheetVisible
    Worksheets("EZ1810 Welcome Screen").Select
    Range("A21").FormulaR1C1 = "SHEET(S) REQUIRED : Modified Delete EZ1810 R6.5"
    Range("A23").FormulaR1C1 = "The Modify Delete Tools sheet will be used by the buyer to upload into SAP to create your Purchase Order.  In order for the buyer to generate"
    Range("A24").FormulaR1C1 = " your Purchase Order in a timely manner, please ensure that all required fields are filled in correctly."
    Range("A25").FormulaR1C1 = ""
    Range("A26").FormulaR1C1 = "Please utilize your eSAP generated Equipment Numbers to identify which tools need modification/ refurbishment.  If you currently only have"
    Range("A27").FormulaR1C1 = "GQTS Asset IDs, they have been converted to eSAP Equipment Numbers for you and can be found by accessing the SAP Vendor Tooling Portal."
    Range("A28").FormulaR1C1 = ""
    Range("A29").FormulaR1C1 = "When you attempt to save the document, the SMART EZ1810 will attempt to do some basic Error Checking and give you a visual cue to any fields"
    Range("A30").FormulaR1C1 = " that may be filled out incorrectly along with some verbiage on what may be incorrect."
    Range("A31").FormulaR1C1 = ""
    Range("K20").FormulaR1C1 = "EWO PROCESS"
  End If

  ' #NEW TOOLS / MODIFY DELETE
  If shpOption3.ControlFormat.Value = xlOn Then
    Worksheets(3).Visible = xlSheetVisible
    Worksheets(4).Visible = xlSheetVisible
    Worksheets("EZ1810 Welcome Screen").Select
    Range("A21").FormulaR1C1 = "SHEET(S) REQUIRED : New Tools EZ1810 R6.0 / Modified Delete EZ1810 R6.5"
    Range("A23").FormulaR1C1 = "The New Tools sheet will be used by the buyer to upload into SAP to create your Purchase Order.  In order for the buyer to generate"
    Range("A24").FormulaR1C1 = " your Purchase Order in a timely manner, please ensure that all required fields are filled in correctly."
    Range("A25").FormulaR1C1 = ""
    Range("A26").FormulaR1C1 = "The Modify Delete Tools sheet will be used by the buyer to upload into SAP to create a second Purchase Order for the tools being"
    Range("A27").FormulaR1C1 = "modified which already have eSAP Equipment Numbers created and referenced."
    Range("A28").FormulaR1C1 = ""
    Range("A29").FormulaR1C1 = ""
    Range("A30").FormulaR1C1 = ""
    Range("A31").FormulaR1C1 = ""
    Range("K20").FormulaR1C1 = "FULL PROCESS (eSAP) / Regional System Process / EWO PROCESS"
  End If

  ' #NEW TOOLS / MODIFY DELETE
  If shpOption4.ControlFormat.Value = xlOn Then
    Worksheets(3).Visible = xlSheetVisible
    Worksheets(4).Visible = xlSheetVisible
    Worksheets("EZ1810 Welcome Screen").Select
    Range("A21").FormulaR1C1 = "SHEET(S) REQUIRED : New Tools EZ1810 R6.0 / Modified Delete EZ1810 R6.5"
    Range("A23").FormulaR1C1 = "The New Tools sheet will be used by the buyer to upload into eSAP to create new eSAP Equipment Record Numbers."
    Range("A24").FormulaR1C1 = ""
    Range("A25").FormulaR1C1 = "Once the buyer has created the new eSAP Equipment Numbers for your tools, he or she may contact you to ensure"
    Range("A26").FormulaR1C1 = "that they use the correct eSAP Equipment Numbers on the Modified/Delete Tools tab."
    Range("A27").FormulaR1C1 = ""
    Range("A28").FormulaR1C1 = "The modified tab will be used by the buyer to upload into eSAP to create your new Purchase Order. In order for"
    Range("A29").FormulaR1C1 = "the buyer to generate your Purchase Order and Equipment Records in a timely manner, please ensure that all"
    Range("A30").FormulaR1C1 = "required fields are filled out correctly."
    Range("A31").FormulaR1C1 = ""
    Range("K20").FormulaR1C1 = "PARTIAL / EWO PROCESS"
  End If

  Set shpOption1 = Nothing
  Set shpOption2 = Nothing
  Set shpOption3 = Nothing
  Set shpOption4 = Nothing
  
Exit_subSelection:
    Exit Sub

Err_subSelection:
    MsgBox "ERROR : " & Err.Number & " " & Err.Description & vbCrLf & "CODE : subSelection" & vbCrLf & "SHEET : modWelcomeScreen"
    Resume Exit_subSelection
End Sub


INQUEST-PP=macro
