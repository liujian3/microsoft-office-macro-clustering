Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function


Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ResizeTableBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CreateOptionsBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Sub generateOptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    Range("NX_" & Me.Name & "_M_OptionDefs").Clear
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_OptionDefs")
    Dim ID$
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue")
    Dim equityVal$: equityVal = Range("NX_" & asn & "_M_EquityName")
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_CommentValue")
    Dim flavor$: flavor = Range("NX_" & asn & "_M_Flavor")
    
    ' fill in the European options
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".EuroOpt" & counter
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentEQEuropean(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",NX_" & asn & "_M_VolCurveID," _
                    & rngOt.Cells(counter, 1).Address & ",," & rngOt.Cells(counter, 2).Address _
                    & ",,,NX_" & asn & "_M_ConventionValue)"
            End If
        Next
    Next
    Dim numOfEuroOpt As Integer: numOfEuroOpt = counter
    'Fill in the American options
    Set rngIn = Range("NX_" & asn & "_M_AmerSelectionGrid")
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If i <> 1 And j <> 1 And (Not rngIn.Cells(j, i).Value = vbNullString) And IsNumeric(rngIn.Cells(j, i)) Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                ID = prefixVal & "." & equityVal & "." & modelVal & ".AmerOpt" & counter
                rngOt.Cells(counter, 3) = "=nxInstrEQAmericanByDate(" & invCom & ID & invCom _
                    & ",NX_" & asn & "_M_CurrencyValue," _
                    & invCom & flavor & invCom _
                    & ",," & rngOt.Cells(counter, 1).Address & "," & rngOt.Cells(counter, 2).Address _
                    & ",NX_" & asn & "_M_ConventionValue,,,,,,," _
                    & rngIn.Cells(j, i).Address & ")"
                                        
                    
            End If
        Next
    Next
       
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_OptionDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        Selection.Font.Name = "Tahoma"
        Selection.Font.Size = 10
        
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & invCom _
            & prefixVal & "." & equityVal & "." & modelVal & ".Collection" & invCom & "," & CcyAdd & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
        
        Range("A1").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO OPTIONS"
    End If
End Sub

Private Sub ResizeTable(optionType$)
    Dim midName$
    If optionType = "European" Then
        midName = ""
    Else
        midName = "Amer"
    End If
    
    Dim rngOptionTable As Range: Set rngOptionTable = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid")
    Range(rngOptionTable(1, 0), rngOptionTable.Cells(rngOptionTable.Rows.Count, rngOptionTable.Columns.Count)) = ""
            
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_" & midName & "SelectionGrid").Cells(1, 1)
    
    Dim strMatrixID$: strMatrixID = GetVolDataMatrixID
    If strMatrixID = "" Then
        GoTo ResizeTable_BadVolCurve
    End If
    
    Dim temp: temp = Application.Run("NxLibView", strMatrixID)
        
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        dateCounter = dateCounter + 1
        If VBA.Right(temp(i, 1), 1) = "D" Or VBA.Right(temp(i, 1), 1) = "M" Then
            anchor.Offset(dateCounter, -1) = temp(i, 1)
            anchor.Offset(dateCounter, 0).Formula = "=nxLibAddTenor(nxLibView(" & Chr(34) & "TODAY" & Chr(34) & "," & Chr(34) & "TODAY" & Chr(34) & ")," _
                                                    & anchor.Offset(dateCounter, -1).Address & "," & Chr(34) & "NONE" & Chr(34) & "," & Chr(34) & "NONE" & Chr(34) & ")"
        Else
            anchor.Offset(dateCounter, 0) = temp(i, 1)
        End If
        anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
    Next i
    Dim strikeStep As Double: strikeStep = Range("NX_" & Me.Name & "_M_StrikeStep").Value
    Dim strikeEachSide As Integer: strikeEachSide = Range("NX_" & Me.Name & "_M_StrikeEachSide").Value
    On Error GoTo ResizeTable_BadSpotPrice
    Dim spotPrice As Double: spotPrice = Range("NX_" & Me.Name & "_M_SpotPrice").Value
    On Error GoTo 0
    
    For i = 1 To strikeEachSide * 2 + 1
        If optionType = "European" And i = strikeEachSide + 1 Then
            anchor.Offset(0, i) = "ATM"
        Else
            anchor.Offset(0, i) = spotPrice + (i - 1 - strikeEachSide) * strikeStep
        End If
        
    Next i

    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_" & midName & "SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeEachSide * 2 + 1))
    Exit Sub
    
ResizeTable_BadSpotPrice:
    MsgBox "Spot price error : object " & Range("NX_" & Me.Name & "_M_EquityName") & ".Quote does not exist", vbExclamation, "Numerix Object Not Found"
Exit Sub
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub


Private Sub CreateOptionsBtn_Click()
    generateOptions
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable ("European")
    ResizeTable ("American")

End Sub

Private Function GetVolDataMatrixID() As String
    Dim asn$: asn = ActiveSheet.Name
    Dim strDataMatrixID As String: strDataMatrixID = ""
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & asn & "_M_VolCurveID"))
    On Error GoTo errorHandler_BadVol
    Dim rowStartIndex As Integer, rowEndIndex As Integer, colStartIndex As Integer, colEndIndex As Integer, i As Integer, depColIndex As Integer
    rowStartIndex = LBound(temp, 1)
    rowEndIndex = UBound(temp, 1)
    colStartIndex = LBound(temp, 2)
    colEndIndex = UBound(temp, 2)
    depColIndex = -1
    For i = colStartIndex To colEndIndex
        If UCase(temp(rowStartIndex, i)) = "DEPENDENCIES" Then
            depColIndex = i
            Exit For
        End If
    Next i
    If depColIndex = -1 Then
        GoTo errorHandler_BadVol
    End If
    For i = rowStartIndex To rowEndIndex
        If VBA.InStr(1, (temp(i, depColIndex)), "VOLDATA") <> 0 Then
            strDataMatrixID = temp(i, depColIndex)
            Exit For
        End If
    Next i
    
errorHandler_BadVol:
    GetVolDataMatrixID = strDataMatrixID
End Function




Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
