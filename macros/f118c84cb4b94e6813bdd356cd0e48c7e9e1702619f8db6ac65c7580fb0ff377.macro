Attribute VB_Name = "DQAbout"
Option Explicit

' Release Version Number
Const AddInVer = "010"           ' should be incremented for each build


'*******************************************************************************
' Add-In History
'
' v7.0.010    MH    10/09/12    Released for v7.0
'
' v6.00.009   MH    20/06/07    Rebuilt after help stopped working due to an MS Office Update
'
' v5.71.008   HM    21/11/06    Released for v5.71
'
' v5.70.008   MH    28/07/05    Rebranded for IRIS Enterprise/Exchequer
'
' v5.61.007   HM    02/02/05    Released for v5.61
'
' v5.60.007   HM    14/05/04    Released for v5.60
'
' v5.52.007   HM    18/07/03    Released for v5.52
'
' v5.51.007   HM    27/06/03    Released for v5.51
'
' b551.006    HM    08/05/03    Made a couple of public functions private to hide them
'                               from the function list.
'
'                               Added code to automatically remove the menu options and
'                               menu's when unloaded where OK
'
' b551.005    HM    07/05/03    Changed menu's to co-operate with the Drill-Down Add-In
'
' v5.50.004   HM    24/03/03    Released for v5.50
'
' b550.004    HM    04/02/03    Removed an accidental reference to the ADO 2.5 library
'
' b550.003    HM    31/01/03    Released with v5.50 Beta
'
' b501.002    HM    18/11/02    Removed reference to EntFuncs.Xla
'
' b501.001    HM    15/11/02    Created from scratch
'

'------------------------------------------------------------------------------------------------

Public Sub AboutDialog()
Attribute AboutDialog.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim EntServer As Object
    
    ' Create DataQuery OLE Object
    Set EntServer = GetObject("", "Enterprise.DataQuery")
    
    With EntServer
        ' Display About Dialog
        .ExecuteAbout (AddInVer)
    End With ' EntServer
    
    ' Remove reference to object to destroy it
    Set EntServer = Nothing
End Sub
Attribute VB_Name = "DQMenus"
Option Explicit

' Constants for enum TDataQueryLicencing
Private Const dqlStock = 0
Private Const dqlJobCosting = 1

' Local reference to 'Exchequer' menu on worksheets
Dim ExchMenu As Menu
' Local reference to 'About' sub-menu on worksheets
Dim ExchAboutMenu As Menu
' Flag to indicate whether this Add-In created the 'Exchequer' menu
Dim ExchMenuCreated As Boolean
' Menu items added by this Add-In
Dim CCMenuOpt As MenuItem
Dim CustMenuOpt As MenuItem
Dim DeptMenuOpt As MenuItem
Dim GLMenuOpt As MenuItem
Dim JobMenuOpt As MenuItem
Dim LocMenuOpt As MenuItem
Dim StkMenuOpt As MenuItem
Dim SuppMenuOpt As MenuItem
Dim SepBarMenuOpt As MenuItem
Dim AboutMenuOpt As MenuItem

'------------------------------------------------------------------------------------------------

Private Function FindExchMenu() As Menu
    Dim oMenu As Menu
    Dim GotExchMenu As Boolean
    
    ' Look for pre-existing 'Exchequer' menu
    GotExchMenu = False
    For Each oMenu In MenuBars(xlWorksheet).Menus
        If oMenu.Caption = "E&xchequer" Then
            Set FindExchMenu = oMenu
            GotExchMenu = True
        End If
    Next
    
    '-----------------------------------------------------
    
    If (Not GotExchMenu) Then
        ' Exchequer Menu doesn't already exist - add a new one
        Set FindExchMenu = MenuBars(xlWorksheet).Menus.Add(Caption:="E&xchequer", Before:="Window")
        ExchMenuCreated = True
    End If ' Not GotExchMenu
End Function

'------------------------------------------------------------------------------------------------

Private Function FindExchAboutMenu(ExMenuCreated As Boolean) As Menu
    Dim oMenu As Object
    Dim GotExchSubMenu As Boolean

    GotExchSubMenu = False
    If (Not ExMenuCreated) Then
        ' Look for 'About' sub-menu in the pre-existing 'Exchequer' menu
        For Each oMenu In ExchMenu.MenuItems
            If oMenu.Caption = "About" Then
                Set FindExchAboutMenu = oMenu
                GotExchSubMenu = True
            End If ' oMenu.Caption = "About"
        Next
    End If ' Not ExMenuCreated
    
    '-----------------------------------------------------
    
    If (Not GotExchSubMenu) Then
        ' Exchequer About sub-menu doesn't already exist - add it
        Set FindExchAboutMenu = ExchMenu.MenuItems.AddMenu(Caption:="About")
    End If ' Not GotExchSubMenu
End Function

'------------------------------------------------------------------------------------------------

Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim EntServer As Object
    
    ' This flag indicates whether this Add-In created the Exchequer menu and is
    ' responsible for deleting it when unloaded
    ExchMenuCreated = False
    
    ' Look for a pre-existing 'Exchequer' menu to re-use or create it if it
    ' doesn't exist
    Set ExchMenu = FindExchMenu
    
    ' Look for a pre-existing 'About' sub-menu within the 'Exchequer' menu to
    ' re-use or create it if it doesn't exist
    Set ExchAboutMenu = FindExchAboutMenu(ExchMenuCreated)
       
    ' Add 'About Drilldown' menu option
    Set AboutMenuOpt = ExchAboutMenu.MenuItems.Add(Caption:="Data Query", OnAction:=ThisWorkbook.Name & "!DQAbout.AboutDialog")
    
    '-----------------------------------------------------
    
    ' Add Data Import options

    ' Run up an instance of the Data Query Object to identify the supported options
    ' for the active installation of Exchequer
    Set EntServer = GetObject("", "Enterprise.DataQuery")

    With EntServer
        ' Cost Centres always available - wizard check System Setup flag once Company Data Set is selected
        Set CCMenuOpt = ExchMenu.MenuItems.Add(Caption:="Cos&t Centres", OnAction:=ThisWorkbook.Name & "!Query.ImportCostCentres", Before:=1)

        ' Customers always available
        Set CustMenuOpt = ExchMenu.MenuItems.Add(Caption:="&Customers", OnAction:=ThisWorkbook.Name & "!Query.ImportCustomers", Before:=2)

        ' Departments always available - wizard check System Setup flag once Company Data Set is selected
        Set DeptMenuOpt = ExchMenu.MenuItems.Add(Caption:="&Departments", OnAction:=ThisWorkbook.Name & "!Query.ImportDepartments", Before:=3)

        ' GL Codes always available
        Set GLMenuOpt = ExchMenu.MenuItems.Add(Caption:="&GL Codes", OnAction:=ThisWorkbook.Name & "!Query.ImportGLCodes", Before:=4)

        ' Check for Job Costing Release Code
        If .dqLicencing(dqlJobCosting) Then
            Set JobMenuOpt = ExchMenu.MenuItems.Add(Caption:="&Jobs", OnAction:=ThisWorkbook.Name & "!Query.ImportJobs", Before:=5)
        End If ' .dqLicencing(dqlJobCosting)

        ' Check for Stock version of Exchequer
        If .dqLicencing(dqlStock) Then
            Set LocMenuOpt = ExchMenu.MenuItems.Add(Caption:="&Locations", OnAction:=ThisWorkbook.Name & "!Query.ImportLocations", Before:=6)
            Set StkMenuOpt = ExchMenu.MenuItems.Add(Caption:="&Stock", OnAction:=ThisWorkbook.Name & "!Query.ImportStock", Before:=7)
        End If ' .dqLicencing(dqlStock)

        ' Suppliers always available
        Set SuppMenuOpt = ExchMenu.MenuItems.Add(Caption:="S&uppliers", OnAction:=ThisWorkbook.Name & "!Query.ImportSuppliers", Before:=8)
        
        ' About always available
        Set SepBarMenuOpt = ExchMenu.MenuItems.Add(Caption:="-", OnAction:=ThisWorkbook.Name & "!Query.ImportSuppliers", Before:=9)
    End With ' EntServer

    ' Remove reference to object to destroy it
    Set EntServer = Nothing
End Sub

'------------------------------------------------------------------------------------------------

'Sub Auto_Open()
'    Dim EntServer As Object
'
'    ' Run up an instance of the Data Query Object to identify the supported options
'    ' for the active installation of Exchequer
'    Set EntServer = GetObject("", "Enterprise.DataQuery")
'
'    With EntServer
'        Set ExchMenu = MenuBars(xlWorksheet).Menus.Add(Caption:="E&xchequer", Before:="Window")
'
'        ' Cost Centres always available - wizard check System Setup flag once Company Data Set is selected
'        ExchMenu.MenuItems.Add Caption:="Cos&t Centres", OnAction:=ThisWorkbook.Name & "!Query.ImportCostCentres"
'
'        ' Customers always available
'        ExchMenu.MenuItems.Add Caption:="&Customers", OnAction:=ThisWorkbook.Name & "!Query.ImportCustomers"
'
'        ' Departments always available - wizard check System Setup flag once Company Data Set is selected
'        ExchMenu.MenuItems.Add Caption:="&Departments", OnAction:=ThisWorkbook.Name & "!Query.ImportDepartments"
'
'        ' GL Codes always available
'        ExchMenu.MenuItems.Add Caption:="&GL Codes", OnAction:=ThisWorkbook.Name & "!Query.ImportGLCodes"
'
'        ' Check for Job Costing Release Code
'        If .dqLicencing(dqlJobCosting) Then
'            ExchMenu.MenuItems.Add Caption:="&Jobs", OnAction:=ThisWorkbook.Name & "!Query.ImportJobs"
'        End If ' .dqLicencing(dqlJobCosting)
'
'        ' Check for Stock version of Exchequer
'        If .dqLicencing(dqlStock) Then
'            ExchMenu.MenuItems.Add Caption:="&Locations", OnAction:=ThisWorkbook.Name & "!Query.ImportLocations"
'            ExchMenu.MenuItems.Add Caption:="&Stock", OnAction:=ThisWorkbook.Name & "!Query.ImportStock"
'        End If ' .dqLicencing(dqlStock)
'
'        ' Suppliers always available
'        ExchMenu.MenuItems.Add Caption:="S&uppliers", OnAction:=ThisWorkbook.Name & "!Query.ImportSuppliers"
'
'        ' About always available
'        ExchMenu.MenuItems.Add Caption:="-"
'        ExchMenu.MenuItems.Add Caption:="&About", OnAction:=ThisWorkbook.Name & "!About.AboutDialog"
'    End With ' EntServer
'
'    ' Remove reference to object to destroy it
'    Set EntServer = Nothing
'End Sub

'------------------------------------------------------------------------------------------------

Sub Auto_Close()
Attribute Auto_Close.VB_ProcData.VB_Invoke_Func = " \n14"
On Error GoTo Auto_Close_Fini
    ' Delete menu options when add-in removed - checking for existance of optional
    ' entries.
    CCMenuOpt.Delete
    CustMenuOpt.Delete
    DeptMenuOpt.Delete
    GLMenuOpt.Delete
    If Not (JobMenuOpt Is Nothing) Then JobMenuOpt.Delete
    If Not (LocMenuOpt Is Nothing) Then LocMenuOpt.Delete
    If Not (StkMenuOpt Is Nothing) Then StkMenuOpt.Delete
    SuppMenuOpt.Delete
    SepBarMenuOpt.Delete
    AboutMenuOpt.Delete
    
    ' Check to see if the About sub-menu can be removed
    If (ExchAboutMenu.MenuItems.Count = 0) Then ExchAboutMenu.Delete
    
    ' Check to see if the Exchequer Menu can be removed
    If (ExchMenu.MenuItems.Count = 0) Then ExchMenu.Delete
    
Auto_Close_Fini:

End Sub

'------------------------------------------------------------------------------------------------
Attribute VB_Name = "Query"
Option Explicit

' Constants for enum TDataQueryMode
Private Const dqmCostCentre = 0
Private Const dqmCustomer = 1
Private Const dqmDepartment = 2
Private Const dqmGLCode = 3
Private Const dqmJob = 4
Private Const dqmLocation = 5
Private Const dqmStock = 6
Private Const dqmSupplier = 7

' Constants for enum TDataQueryDirection
Private Const dqoHorizontalRight = 0
Private Const dqoVerticalDown = 1

'------------------------------------------------------------------------------------------------

Public Sub ImportCostCentres()
Attribute ImportCostCentres.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmCostCentre
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportCustomers()
Attribute ImportCustomers.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmCustomer
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportDepartments()
Attribute ImportDepartments.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmDepartment
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportGLCodes()
Attribute ImportGLCodes.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmGLCode
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportJobs()
Attribute ImportJobs.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmJob
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportLocations()
Attribute ImportLocations.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmLocation
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportStock()
Attribute ImportStock.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmStock
End Sub

'------------------------------------------------------------------------------------------------

Public Sub ImportSuppliers()
Attribute ImportSuppliers.VB_ProcData.VB_Invoke_Func = " \n14"
    DataQueryWizard dqmSupplier
End Sub

'------------------------------------------------------------------------------------------------

Private Sub DataQueryWizard(DataMode%)
    Dim EntServer As Object
    Dim Res&, I&, ImportRow&, ImportCol&
    
    ' Create DataQuery OLE Object
    Set EntServer = GetObject("", "Enterprise.DataQuery")
    
    With EntServer
        ' Initialise the DataQuery object with details from Excel
        .dqExcelStartRow = ActiveCell.Row
        .dqExcelStartCol = ActiveCell.Column
        
        ' Execute the DataQuery Wizard in the OLE object
        Res& = .Execute(DataMode%)
        
        If (Res& = 0) Then
            ' Wizard Completed - Import Results
            If (.dqResultCount > 0) Then
                ' Set starting co-ordinates
                ImportRow& = .dqExcelStartRow
                ImportCol& = .dqExcelStartCol
                
                ' Run through the results
                For I& = 0 To (.dqResultCount - 1)
                    ' Import the results into the current cell
                    ActiveSheet.Cells(ImportRow&, ImportCol&) = .dqResults(I&)
                
                    ' Move to next Cell depending on the selected mode
                    Select Case .dqImportDirection
                        Case dqoHorizontalRight
                            ImportCol& = ImportCol& + 1
                            
                        Case dqoVerticalDown
                            ImportRow& = ImportRow& + 1
                            
                        Case Else
                            MsgBox "Unknown Import Direction (" + Trim(Str(.dqImportDirection)) + "), Please contact your Technical Support"
                            Exit For
                    End Select ' .dqImportDirection
                Next I&
            Else
                ' No Results
                MsgBox "No Results were returned by the Query"
            End If
        End If ' Res& = 0
    End With ' EntServer
    
    ' Remove reference to object to destroy it
    Set EntServer = Nothing
End Sub ' DataQueryWizard

'------------------------------------------------------------------------------------------------

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
