Attribute VB_Name = "Print2WinFax"
'**************************************
'      Symantec WinFax PRO and        '
'        TalkWorks PRO Add-In         '
'    for Microsoft Excel(tm)97/2000   '
'    Symantec (Canada) Corporation    '
'             EC 11/19/99             '
'**************************************

' ** Version Information **

Public Const VER_PLATFORM_WIN32s = 0   ' Not used
Public Const VER_PLATFORM_WIN32_WINDOWS = 1  ' Win 95/98
Public Const VER_PLATFORM_WIN32_NT = 2 ' Win NT/2000
 
Type OSVERSIONINFO
         dwOSVersionInfoSize As Long
         dwMajorVersion As Long
         dwMinorVersion As Long
         dwBuildNumber As Long
         dwPlatformId As Long
         szCSDVersion As String * 128   ' Maintenance string for PSS usage.
End Type

' Define International strings
Global sError1, sError2, sError3, sError4
Global sPrinterName, sCommandBar, sCommandBarCaption
Global sDriverName
Global sErrLoading
Global sErrReg
Global sMacroDirectory
Global WfxPath$

Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long

Public Declare Function FindWindowA Lib "User32" (ByVal lpClassName As Any, ByVal lpWindowName As Any) As Integer
Public Declare Function GetPrivateProfileStringA Lib "kernel32" (ByVal lpAppName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Integer, ByVal lpFileName As String) As Integer

Public Declare Function RegOpenKey& Lib "ADVAPI32" Alias "RegOpenKeyA" (ByVal hkeyOpen&, ByVal szSubKey$, ByRef hkeyResult&)
Attribute RegOpenKey.VB_ProcData.VB_Invoke_Func = " \n14"
Public Declare Function RegQueryValue& Lib "ADVAPI32" Alias "RegQueryValueExA" (ByVal hkey&, ByVal szValueName$, ByVal lReserved&, ByRef lType&, sValue As Any, ByRef lcbData&)
Attribute RegQueryValue.VB_ProcData.VB_Invoke_Func = " \n14"
Public Const HCU As Long = &H80000001
Public Const HLM As Long = &H80000002

Public Sub CheckIfWinFaxIsActive()
    
     On Error GoTo ErrLoading
     
     If FindWindowA("cFaxMng", 0&) = 0 Then

'        lResult& = RegOpenKey&(HCU, "Software\Delrina\WinFax\7.0\Printer Driver", hkeyWfx&)
'        lResult& = RegQueryValue&(hkeyWfx&, "AlwaysPrintToFaxmng", 0&, lType&, ByVal 0&, lcbValue&)
'        lResult& = RegQueryValue&(hkeyWfx&, "AlwaysPrintToFaxmng", 0&, lType&, PrintToFaxmng&, lcbValue&)
        
        WfxPath$ = Space(256)
        
        lResult& = RegOpenKey&(HLM, "Software\Delrina\WinFax\7.0\WinFax", hkeyWfx&)
        lResult& = RegQueryValue&(hkeyWfx&, "ExePath", 0&, lType&, ByVal 0&, lcbValue&)
        lResult& = RegQueryValue&(hkeyWfx&, "Exepath", 0&, lType&, ByVal WfxPath$, lcbValue&)
                
'        If PrintToFaxmng& = 0 Then
        WfxPath$ = Left$(WfxPath$, lcbValue& - 1) & "wfxctl32.exe"
'        Else
'            WfxPath$ = Left$(WfxPath$, lcbValue& - 1) & "faxmng32.exe"
'        End If
        
        X = Shell(WfxPath$, 6)
        newHour = Hour(Now())
        newMinute = Minute(Now())
        newSecond = Second(Now()) + 10
        waitTime = TimeSerial(newHour, newMinute, newSecond)
        Application.Wait waitTime
    End If
ErrLoading:
     If Err <> 0 Then
       
       ErrMsg = sErrLoading & Chr$(13)
       
       If WfxPath$ = "" Then
         ErrMsg = ErrMsg & sErrReg & Chr$(13)
       Else
         ErrMsg = ErrMsg & WfxPath$ & Chr$(13)
       End If
       
       ErrMsg = ErrMsg & Chr$(13) & Err.Number & " - " & Err.Description
       MsgBox ErrMsg
       End
     
     End If
End Sub
Public Sub GetLanguage()
    
    ' Determine the Excel language used.
    
    ' Define the default macro directory name.
    ' for German, use MAKROS
    sMacroDirectory = "MACROS"   ' North American/English versions
    
    Select Case Application.International(xlCountryCode)
        
    Case 1:   'English (USA/UK)
    
    sError1 = "No active document to fax."
    sError2 = "WinFax Error: "
    sError3 = "The WinFax/Talkworks Printer Driver does not appear to be installed"
    sError4 = "You must re-install the printer driver for WinFax/Talkworks."

    sPrinterName = "WinFax on "  ' printer name with "on" reference
    sCommandBar = "Win&Fax..."  ' command bar option with hot key reference
    sCommandBarCaption = "Print To WinFax" ' caption for macro icon
    sDriverName = "WinFax" ' ie: driver name, DelFax or WinFax
    sErrLoading = "Error loading Controller."
    sErrReg = "Cannot find reference to controller in registry."
    
    
    Case 33:  'French

    sError1 = "No active document to fax."
    sError2 = "WinFax Error: "
    sError3 = "The WinFax/Talkworks Printer Driver does not appear to be installed"
    sError4 = "You must re-install the printer driver for WinFax/Talkworks."

    sPrinterName = "WinFax on "  ' printer name with "on" reference
    sCommandBar = "Del&Fax..."  ' command bar option with hot key reference
    sCommandBarCaption = "Print To DelFax" ' caption for macro icon
    sDriverName = "DelFax" ' ie: driver name, DelFax or WinFax
    
    Case 39:   'Italian
    
    sError1 = "Nessun documento attivo da inviare via fax."
    sError2 = "Errore di WinFax: "
    sError3 = "Il driver della stampante di WinFax/Talkworks non |fffd| installato."
    sError4 = "Reinstallare il driver della stampante di WinFax/Talkworks."

    sPrinterName = "WinFax su "  ' nome stampante con riferimento "su"
    sCommandBar = "Win&Fax..."  ' opzione della barra di comando con riferimento al tasto di scelta rapida
    sCommandBarCaption = "Stampa su WinFax" ' didascalia dell'icona della macro
    sDriverName = "WinFax" ' ad esempio: nome del driver, DelFax o WinFax
    sErrLoading = "Errore di caricamento del Controller."
    sErrReg = "Impossibile trovare il riferimento al controller nel registro."

    Case 49:   'German
    
    ' Italian, spanish, dutch, portugese goes here...
    
    sError1 = "Kein aktives Dokument zum Faxen."
    sError2 = "WinFax-Fehler: "
    sError3 = "Der WinFax/Talkworks-Druckertreiber ist offensichtlich nicht installiert."
    sError4 = "Sie m|fffd|ssen den Druckertreiber f|fffd|r WinFax/Talkworks erneut installieren."

    sPrinterName = "WinFax auf "  ' printer name with "on" reference
    sCommandBar = "Win&Fax..."  ' command bar option with hot key reference
    sCommandBarCaption = "Drucken an WinFax" ' caption for macro icon
    sDriverName = "WinFax" ' ie: driver name, DelFax or WinFax
    sErrLoading = "Fehler beim Laden des Controllers."
    sErrReg = "In der Registrierung wurde kein Verweis auf den Controller gefunden."
                 
    Case Else    ' English default.
     
    sError1 = "No active document to fax."
    sError2 = "WinFax Error: "
    sError3 = "The WinFax/Talkworks Printer Driver does not appear to be installed"
    sError4 = "You must re-install the printer driver for WinFax/Talkworks."

    sPrinterName = "WinFax on "  ' printer name with "on" reference
    sCommandBar = "Win&Fax..."  ' command bar option with hot key reference
    sCommandBarCaption = "Print To WinFax" ' caption for macro icon
    sDriverName = "WinFax" ' ie: driver name, DelFax or WinFax
      
    End Select
       

End Sub

Sub WinFaxMacro()
Attribute WinFaxMacro.VB_ProcData.VB_Invoke_Func = " \n14"
   
    On Error GoTo MainErrHandler

    ' Get the language strings
    GetLanguage
   
    ' check to see if any documents are active.
    If Windows.Count <= 0 Then
       MsgBox sError1  ' no active document to fax
       Exit Sub
    End If
    
    ' Define Winfax object and create instance of WinFax
    
    CheckIfWinFaxIsActive
    
    Dim objWfx As Object
    Set objWfx = CreateObject("WinFax.SDKSend8.0")
    objWfx.SetClientID ("Client Name")
          
    Dim RName(25)
    
    RName(0) = "wfxFaxNum"
    RName(1) = "wfxTime"
    RName(2) = "wfxDate"
    RName(3) = "wfxRecipient"
    RName(4) = "wfxCompany"
    RName(5) = "wfxSubject"
    RName(6) = "wfxBillCode"
    RName(7) = "wfxKeyword"
    
    RName(8) = "wfxSetHold"
    RName(9) = "wfxResolution"
    RName(10) = "wfxDeleteAfterSend"
    RName(11) = "wfxUseCreditCard"
    RName(12) = "wfxShowSendScreen"
    RName(13) = "wfxCoverPageCVP"
    RName(14) = "wfxAttachmentFile"
    RName(15) = "wfxShowCallProgress"
    RName(16) = "wfxSetOffPeak"
    RName(17) = "wfxPriority"
    RName(18) = "wfxSetTypeByName"
    RName(19) = "wfxSetCoverText"
    RName(20) = "wfxAreaCode"
    RName(21) = "wfxCountryCode"
    
    CurPrinter$ = Application.ActivePrinter
    
    Port$ = GetWfxPort$
    
    Application.ActivePrinter = sPrinterName & Port$
    
    Dim PrintRange As Range
    
    Set PrintRange = ActiveWindow.RangeSelection
      
    ' Recipient Properties
    sWfxFaxNum = " "
    sWfxRecipient = " "
    sWfxTime = ""
    sWfxDate = ""
    sWfxCompany = ""
    sWfxSubject = ""
    sWfxKeyword = ""
    sWfxBillingCode = ""
    
    ' Send Properties
    sWfxShowSendscreen = "1"  ' default ON
    sWfxSetHold = "0"  ' default OFF
    sWfxResolution = "1" ' default FINE/HIGH
    sWfxDeleteAfterSend = "0" ' default is NO
    sWfxUseCreditCard = "0" ' default is NO
    sWfxCoverPageCVP = "" ' default is none specified
    sWfxAttachmentFile = "" ' default is none specified
    sWfxShowCallProgress = "" ' default is program setup
    sWfxSetOffPeak = "" ' default is no
    sWfxPriority = "" ' default is none
    sWfxSetTypeByName = "" ' default is by fax.
    
    X = FindRange(RName(0))  ' Search for "wfxFaxNumber"
     
    ' X returns non zero value if the named cell "wfxFaxNumber" is found
     If X <> 0 Then
         
        ' search for all the named cells
        For Counter = 0 To 21
   
        X = FindRange(RName(Counter))
        
        If X <> 0 Then    ' found named range
         Select Case Counter
         Case 0: sWfxFaxNum = Range(RName(0))
         Case 3: sWfxRecipient = Range(RName(3))
         Case 1: sWfxTime = Range(RName(1))
         Case 2: sWfxDate = Range(RName(2))
         Case 4: sWfxCompany = Range(RName(4))
         Case 5: sWfxSubject = Range(RName(5))
         Case 6: sWfxKeyword = Range(RName(6))
         Case 7: sWfxBillingCode = Range(RName(7))
         Case 8: sWfxSetHold = Range(RName(8))
         Case 9: sWfxResolution = Range(RName(9))
         Case 10: sWfxDeleteAfterSend = Range(RName(10))
         Case 11: sWfxUseCreditCard = Range(RName(11))
         Case 12: sWfxShowSendscreen = Range(RName(12))
         Case 13: sWfxCoverPageCVP = Range(RName(13))
         Case 14: sWfxAttachmentFile = Range(RName(14))
         Case 15: sWfxShowCallProgress = Range(RName(15))
         Case 16: sWfxSetOffPeak = Range(RName(16))
         Case 17: sWfxPriority = Range(RName(17))
         Case 18: sWfxSetTypeByName = Range(RName(18))
         Case 21: sWfxCountryCode = Range(RName(21))
         Case 20: sWfxAreaCode = Range(RName(20))
         
         End Select
        
        End If
    
    Next Counter
    
    End If
        
    ' FindRange returns 0 or 1 if "style" is found.
    ' look for fax number (wfxfaxnum named range)
    
    X = FindRange(RName(0))
        
    If X <> 0 Then   ' wfxfaxnum named cell has been found.
         
         ' set recipient methods for WinFax
         With objWfx
         
         .SetTo (sWfxRecipient)
         .SetNumber (sWfxFaxNum)
         
         If sWfxAreaCode <> "" Then
           .SetAreaCode (sWfxAreaCode)
         End If
         
         If sWfxCountryCode <> "" Then
           .SetCountryCode (sWfxCountryCode)
         End If
         
         If sWfxTime <> "" Then
           Call VerifyTimeFormat(sWfxTime)
           .SetTime (sWfxTime)
         End If
         
         If sWfxDate <> "" Then
           Call VerifyDateFormat(sWfxDate)
           .SetDate (sWfxDate)
         End If
         
         .SetCompany (sWfxCompany)
         .SetSubject (sWfxSubject)
         
         ' check if you need to hold the fax
         If sWfxSetHold = "1" Then
            .SetHold (1)
         End If
                 
         ' check if off peak selected
         If sWfxSetOffPeak = "1" Then
            .SetOffPeak (1)
         End If
                  
         ' check if priority is selected
        ' If sWfxPriority <> "" Then
        '     Select Case UCase$(sWfxPriority)
        '     Case "HIGH", "1"
        '     .SetPriority (1)
        '     Case "LOW", "3"
        '     .SetPriority (3)
        '     Case "MED", "2", "MEDIUM", "NORMAL"
        '     .SetPriority (2)
        '     Case Else  ' High default
        '     .SetPriority (1)
        '     End Select
        ' End If
         
         ' check if billing or keywords are selected
         If sWfxKeyword <> "" Or sWfxBillingCode <> "" Then
             .EnableBillingCodeKeywords (1)
             .SetKeywords (sWfxKeyword)
             .SetBillingCode (sWfxBillingCode)
         End If
         
         ' Send Job Methods
         
         retCode = .AddRecipient()
                        
         .LeaveRunning
                 
         .SetPrintFromApp (1)
         
         ' check if low resolution selected
         If sWfxResolution = "0" Then
             .SetResolution (0)
         End If
          
          ' check if delete after send selected
         If sWfxDeleteAfterSend = "1" Then
             .SetDeleteAfterSend (1)
         End If
         
         ' check if use credit card selected
         If sWfxUseCreditCard = "1" Then
             .SetUseCreditCard (1)
         End If
         
         ' check if fax, internet etc.
      '   If sWfxSetTypeByName <> "" Then
      '
      '      Select Case UCase$(sWfxSetTypeByName)
      '
      '      Case "FAX"
      '       .SetType (0)
      '      Case "INTERNET", "INTERNET FAX"
      '       .SetType (1)
      '      Case Else
      '       .SetType (0)
      '      End Select
      '   End If
                  
         .Send (0)
               
         ' check if we need to turn off show call progress dialog
         If sWfxShowCallProgress = "0" Then
            .ShowCallProgress (0)
           Else
            .ShowCallProgress (1)
         End If
               
         ' Display send screen to allow adding of attachments,
         ' cover page etc.
         ' default is showsendscreen = on "1"
         
         If sWfxShowSendscreen = "0" Then
             .ShowSendScreen (0)
         Else
             .ShowSendScreen (1)
         End If
                 
         
         End With
    
         ' Print the active workbook without displaying the printer
         ' dialog box.
         
         ActiveWorkbook.PrintOut
        
    Else
        ' no named cells are found, so we
        ' display the printer dialog box
         Application.Dialogs(xlDialogPrint).Show
    
    End If
        
    ' Return printer to its original settings
    If CurPrinter$ <> "" Then
        Application.ActivePrinter = CurPrinter$
    End If
    
    GoTo MainBye:

MainErrHandler:
    ' Trap errors
    
    Select Case Err
        Case 1004
            GoTo MainBye
        Case Else
            MsgBox sError2 & Str$(Err) & " - " & Err.Description
    End Select
MainBye:
End Sub
Function VerifyDateFormat(sWfxDate)
   ' set the date format to MM/DD/YY regardless of the original format
  sWfxDate = Format$(sWfxDate, "MM/DD/YY")
  VerifyDateFormat = sWfxDate
  
End Function
Function VerifyTimeFormat(sWfxTime)
   ' set time to HH:MM:SS format
   sWfxTime = Format$(sWfxTime, "HH:MM:SS")
   VerifyTimeFormat = sWfxTime
End Function
Function FindRange(RangeName)
Attribute FindRange.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error GoTo Errhandler
    Application.GoTo Reference:=RangeName
    FindRange = 1
    GoTo Bye
Errhandler:
    FindRange = 0
Bye:
End Function

Function SysVersions32()
    ' Function determines Windows NT/2000 or 98/95

    Dim v As OSVERSIONINFO, retval As Long
    Dim WindowsVersion As String, BuildVersion As String
    Dim PlatformName As String
          
    v.dwOSVersionInfoSize = Len(v)
    retval = GetVersionEx(v)
    
    WindowsVersion = v.dwMajorVersion & "." & v.dwMinorVersion
    BuildVersion = v.dwBuildNumber And &HFFFF&
 
    Select Case v.dwPlatformId
        Case VER_PLATFORM_WIN32_WINDOWS
            PlatformName = "Windows 95/98"
        Case VER_PLATFORM_WIN32_NT
            PlatformName = "Windows NT/2000"
    End Select
         
    'Return the Platform ID number
    SysVersions32 = v.dwPlatformId
    
End Function

Function GetWfxPort$()
Attribute GetWfxPort.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error GoTo Errhandler
    Dim Version
    Version = SysVersions32()
    
    'If the Version is Windows 95/98 get reg entry from one location, if it is Windows NT
    'get the key from another location
  
    If Version = 1 Then
        WfxPort$ = Space(256)
        lResult& = RegOpenKey&(HLM, "System\CurrentControlSet\Control\Print\Printers\WinFax", hkeyWfx&)
        lResult& = RegQueryValue&(hkeyWfx&, "Port", 0&, lType&, ByVal 0&, lcbValue&)
        lResult& = RegQueryValue&(hkeyWfx&, "Port", 0&, lType&, ByVal WfxPort$, lcbValue&)
        WfxPort$ = Left$(WfxPort$, lcbValue& - 1)
        GetWfxPort$ = WfxPort$
    Else
        ' Windows NT/2000
        WfxPort$ = Space(256)
        lResult& = RegOpenKey&(HCU, "Software\Microsoft\Windows NT\CurrentVersion\Devices", hkeyWfx&)
        lResult& = RegQueryValue&(hkeyWfx&, sDriverName, 0&, lType&, ByVal 0&, lcbValue&)
        lResult& = RegQueryValue&(hkeyWfx&, sDriverName, 0&, lType&, ByVal WfxPort$, lcbValue&)
        WfxPort$ = Left$(WfxPort$, lcbValue& - 1)
        ' WfxPort$ = Right$(WfxPort$, 5)
        Position = InStr(1, WfxPort$, ",")
        WfxPort$ = Mid$(WfxPort$, Position + 1, Len(WfxPort$))
        GetWfxPort$ = WfxPort$
End If
Exit Function

Errhandler:
    'If the WinFax Printer entry is not found Stop
    ' the Macro and inform the user to
    ' re-install the printer driver
    
    MsgBox sError3 & Chr$(13) & Chr$(10) & sError4
    ' Error message that appears,
    ' "The printer Driver does not appear to be installed"
    ' + CRLF + "You must re-install the printer driver")
    End

End Function




Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
     
   GetLanguage
   
   ' On Error GoTo Errhandler

 ' Added code to check for the presence of WinFax on the system
   WfxPath$ = Space(256)
   lResult& = RegOpenKey&(HLM, "Software\Delrina\WinFax\7.0\WinFax", hkeyWfx&)
   lResult& = RegQueryValue&(hkeyWfx&, "Exepath", 0&, lType&, ByVal 0&, lcbValue&)
   lResult& = RegQueryValue&(hkeyWfx&, "Exepath", 0&, lType&, ByVal WfxPath$, lcbValue&)
   If lcbValue& > 0 Then
     WfxPath$ = Left$(WfxPath$, lcbValue& - 1)
   Else
       ' no Exepath key in registry, so we exit macro.
       End
   
   End If
            
 
   Dim Count
   Dim Max
    
    'Check to see if the WinFax PRO 7.0 Add-In for Excel 7.0 is installed and disable it.
    'This will prevent two WinFax options from appearing unde the File Menu
    For count_1 = 1 To AddIns.Count
        If AddIns.Item(count_1).Name = "WFX7_XL7.XLA" Then
            AddIns("Macro di WinFax PRO per Excel 7.0").Installed = False
        End If
    Next
    
    'Check to see if the add in wfxxl97.xla is installed.
    For count_1 = 1 To AddIns.Count
        If AddIns.Item(count_1).Name = "WFXXL97.XLA" Then
            AddIns("Macro di WinFax PRO per Excel 97").Installed = False
        End If
    Next
    
    'Check to see if WinFax is already on the File Menu and remove it.
    Max = CommandBars("File").Controls.Count
    Count = 1
    While Count <= Max
        If CommandBars("File").Controls(Count).Caption = sCommandBar Then
            CommandBars("File").Controls(sCommandBar).Delete
            Max = Max - 1
        End If
        Count = Count + 1
    Wend
    
    'Add WinFax to the File Menu before the Print option
    Set filemenu = CommandBars("File")
    Set winfaxmenu = filemenu.Controls.Add(Before:="10")
        winfaxmenu.Caption = sCommandBar ' "Win&Fax..."
        winfaxmenu.FaceId = 1707
        winfaxmenu.OnAction = "WinFaxMacro"
    
    'Check to see if there is a Print To WinFax button on the Standard ToolBar and Remove it
    Max = CommandBars("Standard").Controls.Count
    Count = 1
    While Count <= Max
        If UCase$(CommandBars("Standard").Controls(Count).Caption) = UCase$(sCommandBarCaption) Then
            CommandBars("Standard").Controls(sCommandBarCaption).Delete
            Max = Max - 1
        End If
        Count = Count + 1
    Wend
    
    'Add a Print To WinFax button on the Standard ToolBar after the Print Button
    Set standardBar = CommandBars("Standard")
        standardBar.Visible = True
    Set winfaxBtn = standardBar.Controls.Add(Before:=5)
        winfaxBtn.FaceId = 1707
        winfaxBtn.Caption = sCommandBarCaption
        winfaxBtn.OnAction = "WinFaxMacro"

Errhandler:
  
  If Err.Number = 9 Then
     Err.Clear
     Resume Next
  Else
    ' Exit from here
    ' MsgBox sError2 & Str$(Err) & " - " & Err.Description
     
     Exit Sub
  
  End If
  
End Sub
Sub Auto_Close()
Attribute Auto_Close.VB_ProcData.VB_Invoke_Func = " \n14"
    
    GetLanguage
    
    ' if the toolbar is modified to not include the WinFax icon
    ' or dropdown menu option then we need to
    ' peacefully exit this subroutine
    On Error GoTo Errhandler
    
    'When Closing the Add-In remove WinFax from the File Menu
    ' that was added in the
    ' Auto_Open module
    CommandBars("File").Controls(sCommandBar).Delete
    
    'When Closing the Add-In remove the Print to WinFax button
    ' that was added in the
    ' Auto_Open module
    CommandBars("Standard").Controls(sCommandBarCaption).Delete
    
Errhandler:
     Exit Sub
     
End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()

End Sub


INQUEST-PP=macro
