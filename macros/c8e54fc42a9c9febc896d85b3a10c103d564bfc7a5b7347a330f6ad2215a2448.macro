Attribute VB_Name = "EditorialMacros"
Option Explicit

Public Sub InitForEditorial()
  '
  ' Code for editorial special setups that need to be called
  '  after saving or on worksheet initialization.
  '
End Sub

Public Sub Workbook_BeforeClose_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  before close.
  '
End Sub

Attribute VB_Name = "EditorialMacros_Deactivate"
Option Explicit

Public Sub Workbook_Deactivate_Editorial()
  '
  ' Code for editorial special setups that need to be called
  '  when leaving the workbook without closing it. This, will
  '  also run when closing workbook.
  '
End Sub

Attribute VB_Name = "PPC_CodeModule"
Public Sub MacroCheck()
'Do nothing. This sub will be called from .NET code to check macro is enabled or not
End Sub


Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "TBWorkDoc, 21, 1, MSForms, TextBox"
Sub Clear()
'
' clear Macro
' Macro recorded 5/03/98 by Practitioners Publishing Company
'

'Clears entries on the Analyticals spreadsheet.

Msg = "Are you sure you want to clear all of the input items?"
ans = MsgBox(Msg, vbYesNo, "PPC's Workpapers")

    If ans = vbNo Then  ' User chose No.
    Exit Sub
    End If
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    Range("InputClear").ClearContents
    If TBWorkDoc.Value <> "" Then
        TBWorkDoc.Activate
        TBWorkDoc.Value = ""
        Range("TBWorkDocBegin").Select
'   ****For some reason the WorkDoc textbox must be entered a second time
'       for the box to shrink back to the default size.
        TBWorkDoc.Activate
        Range("TBWorkDocBegin").Select
'   *********
    End If
    Range("A1").Select
    Range("YearEnd").Value = "=PPC_GetBalanceSheetDate()"
    Range("Client").Value = "=PPC_GetClientName()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name") = "[Client Name]"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub

Sub Rollforward()
'
' Rollforward Macro
' Macro recorded 5/3/08 by Practitioners Publishing Company
'

'
    Dim Msg, Style, TITLE, Response
    
    Beep
    Msg = "Prior period amounts will be replaced with the later " & vbCrLf
    Msg = Msg & "period amounts. Do you want to continue?"       ' Define message.
    Style = vbOKCancel + vbQuestion + vbDefaultButton1 ' Define buttons.
    TITLE = "PPC's Workpapers"  ' Define title.
    Response = MsgBox(Msg, Style, TITLE)
    If Response = vbCancel Then    ' User chose Cancel.
        GoTo Quit
    End If

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Range("MonthlyExpTotalsPY").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("MonthlyExpTotalsPY2").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("MonthlyExpTotalsPY13").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("MonthlyExpTotalsPY213").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("MonthlyExpTotalsCY").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("MonthlyExpTotalsPY").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("MonthlyExpTotalsCY13").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("MonthlyExpTotalsPY13").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("ExpensesRoll").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("ExpensesRollTo").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("BudgetRoll").Select
    Application.CutCopyMode = False
    Selection.Copy
    Range("BudgetRollTo").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("RollClear").ClearContents
    If TBWorkDoc.Value <> "" Then
        TBWorkDoc.Activate
        TBWorkDoc.Value = ""
        Range("TBWorkDocBegin").Select

'   ****For some reason the WorkDoc textbox must be entered a second time
'       for the box to shrink back to the default size.
        TBWorkDoc.Activate
        Range("TBWorkDocBegin").Select
'   *********
    End If
    Range("YearEnd").Value = "=PPC_GetBalanceSheetDate()"
    Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date") = ""
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = False
    Application.ActiveWorkbook.ActiveSheet.EnableCalculation = True
    Range("A1").Select
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Sub
Quit:
End Sub

Private Static Sub TBWorkDoc_GotFocus()

Dim BegText As String

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    If TBWorkDoc.Activate = False Then
        Exit Sub
    End If
    TBWorkDoc.BorderColor = &H8000& ''green border to show textbox has focus
    
    BegText = TBWorkDoc.Text           'the next 3 lines used to force the green border to appear
    TBWorkDoc.Text = TBWorkDoc.Text & vbCrLf
    TBWorkDoc.Text = BegText

    Application.ScreenUpdating = True

End Sub

Private Sub TBWorkDoc_Change()

    Application.EnableEvents = False
    Application.EnableEvents = True

End Sub

Private Sub TBWorkDoc_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    
    Dim MoveBack As Boolean
        
    Select Case KeyCode
            ''' This is the only key necessary.
        Case vbKeyTab
            Application.ScreenUpdating = False
                ''' Determine if need to move backwards.
            MoveBack = CBool(Shift And 1)
                ''' Activate appropriate control based on key(s) pressed.
            If MoveBack Then
                Call TBWorkDoc_LostFocus
            Else
                Call TBWorkDoc_LostFocus
            End If
                
            Application.ScreenUpdating = True
        End Select

End Sub

Private Sub TBWorkDoc_LostFocus()

    Dim TargetCellTBWorkDoc As Range
    Dim AnchorSheet As Worksheet
    Set TargetCellTBWorkDoc = ActiveCell
    Set AnchorSheet = ActiveSheet
    Application.EnableEvents = False
   
'    If AnchorSheet.Name = "Disclosure" Then
'        Sheet1.Activate
'    Else
'        TBWorkDoc.Activate
'    End If
    TBWorkDoc.BorderColor = &HC0C0C0 'grey border to show no focus
    TBWorkDoc.Width = 555
    If TBWorkDoc.Height < 408 Then
        TBWorkDoc.ScrollBars = fmScrollBarsNone
    End If
    If TBWorkDoc.LineCount <= 4 Then
        TBWorkDoc.Height = 52.5
        Range("TBWorkDocBegin").RowHeight = 51
    ElseIf TBWorkDoc.LineCount > 4 And TBWorkDoc.LineCount <= 9 Then
        TBWorkDoc.Height = ((TBWorkDoc.LineCount) * 1.02) * 12.75
        Range("TBWorkDocBegin").RowHeight = ((TBWorkDoc.LineCount) * 1.02) * 12.75
    ElseIf TBWorkDoc.LineCount > 9 And TBWorkDoc.LineCount <= 20 Then
        TBWorkDoc.Height = ((TBWorkDoc.LineCount) * 0.99) * 12.75
        Range("TBWorkDocBegin").RowHeight = ((TBWorkDoc.LineCount) * 0.99) * 12.75
    ElseIf TBWorkDoc.LineCount > 20 And TBWorkDoc.LineCount <= 30 Then
        TBWorkDoc.Height = ((TBWorkDoc.LineCount) * 0.98) * 12.75
        Range("TBWorkDocBegin").RowHeight = ((TBWorkDoc.LineCount) * 0.98) * 12.75
    ElseIf TBWorkDoc.LineCount > 30 And TBWorkDoc.LineCount <= 33 Then
        TBWorkDoc.Height = ((TBWorkDoc.LineCount) * 0.97) * 12.75
        Range("TBWorkDocBegin").RowHeight = ((TBWorkDoc.LineCount) * 0.97) * 12.75
    ElseIf TBWorkDoc.LineCount > 33 Then
        With TBWorkDoc
            .Height = 408
            .ScrollBars = fmScrollBarsVertical
        End With
        Range("TBWorkDocBegin").RowHeight = 408
    End If
'    If AnchorSheet.Name = "Disclosure" Then
'        Range("TBWorkDocBegin").Offset(-1, 0).Select
'        Application.EnableEvents = True
'        Sheet2.Activate
'        Exit Sub
'    Else
        TargetCellTBWorkDoc.Select
'    End If
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'
' This code is protected and passworded when complete.
'

Private Const XL4MACRO As String = "PPCSecurityMacro"
Private Const INFORMATION As String = "INFORMATION"

Private Const bIsIDxR As Boolean = False        ' Set True if Interactive Disclosure Library
#Const IDxR = 0                                 ' Set 1 if Interactive Disclosure Library

      ' Declare security class

Private Sub Workbook_Activate()

  
  InitForEditorial
  
  On Error GoTo 0
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
  Workbook_BeforeClose_Editorial
End Sub



Public Function bIsSaving() As Boolean
  bIsSaving = False
End Function



INQUEST-PP=macro
