Attribute VB_Name = "EFBAR128"

Private BarTextOut As String
Private BarTextIn As String
Private BarTextInA As String
Private BarTextInB As String
Private TempString As String
Private BarCodeOut As String
Private Sum As Long
Private II As Integer
Private ThisChar As String
Private CharValue As Long
Private CheckSumValue As Integer
Private CheckSum As String
Private Subset As Integer
Private StartChar As String
Private Weighting As Integer
Private UCC As Integer

'Functions in this file:
' Bar128A(Text)     -> convert text to bar code 128 subset A
' Bar128Aucc(Text)  -> convert text to bar code 128 subset A, UCC/EAN
' Bar128B(Text)     -> convert text to bar code 128 subset B
' Bar128Bucc(Text)  -> convert text to bar code 128 subset B, UCC/EAN
' Bar128C(Text)     -> convert text to bar code 128 subset C
' Bar128Cucc(Text)  -> convert text to bar code 128 subset C, UCC/EAN

'------------------------------------------------------
Public Function Bar128A(BarTextInA As String) As String
  Bar128A = Bar128AB(BarTextInA, 0)
End Function

'---------------------------------------------------------
Public Function Bar128Aucc(BarTextInA As String) As String
  ' Add FNC1 to beginning of string
  TempString = Chr(172) & BarTextInA
  Bar128Aucc = Bar128AB(TempString, 0)
End Function

'------------------------------------------------------
Public Function Bar128B(BarTextInB As String) As String
  Bar128B = Bar128AB(BarTextInB, 1)
End Function

'---------------------------------------------------------
Public Function Bar128Bucc(BarTextInB As String) As String
  ' Add FNC1 to beginning of string
  TempString = Chr(172) & BarTextInB
  Bar128Bucc = Bar128AB(TempString, 1)
End Function


'-----------------------------------------------------------------------------
' Convert input string to bar code 128 A or B format, Pass Subset 0 = A, 1 = B
'-----------------------------------------------------------------------------
Public Function Bar128AB(BarTextIn As String, Subset As Integer) As String

' Initialize input and output strings
BarTextOut = ""
BarTextIn = RTrim(LTrim(BarTextIn))

' Set up for the subset we are in
If Subset = 0 Then
  Sum = 103
  StartChar = "{"
Else
  Sum = 104
  StartChar = "|"
End If

' Calculate the checksum, mod 103 and build output string
For II = 1 To Len(BarTextIn)
  'Find the ASCII value of the current character
  ThisChar = (Asc(Mid(BarTextIn, II, 1)))
  'Calculate the bar code 128 value
  If ThisChar < 123 Then
    CharValue = ThisChar - 32
  Else
    CharValue = ThisChar - 70
  End If
  'add this value to sum for checksum work
  Sum = Sum + (CharValue * II)

  'Now work on output string, no spaces in TrueType fonts
  If Mid(BarTextIn, II, 1) = " " Then
    BarTextOut = BarTextOut & Chr(174)
  Else
    BarTextOut = BarTextOut & Mid(BarTextIn, II, 1)
  End If
Next II

' Find the remainder when Sum is divided by 103
CheckSumValue = (Sum Mod 103)
' Translate that value to an ASCII character
If CheckSumValue > 90 Then
  CheckSum = Chr(CheckSumValue + 70)
ElseIf CheckSumValue > 0 Then
  CheckSum = Chr(CheckSumValue + 32)
Else
  CheckSum = Chr(174)
End If

'Build ouput string, trailing space is for Windows rasterization bug
BarCodeOut = StartChar & BarTextOut & CheckSum & "~ "

'Return the string
Bar128AB = BarCodeOut
End Function

'-----------------------------------------------------
Public Function Bar128C(BarTextIn As String) As String
  Bar128C = Bar128SubsetC(BarTextIn, 0)
End Function

'--------------------------------------------------------
Public Function Bar128Cucc(BarTextIn As String) As String
  Bar128Cucc = Bar128SubsetC(BarTextIn, 1)
End Function

'---------------------------------------------------------------------------
' Convert input string to bar code 128 C format, Pass UCC 0 = no, 1 = yes
'---------------------------------------------------------------------------
Public Function Bar128SubsetC(BarTextIn As String, UCC As Integer) As String

' Initialize input and output strings
BarTextOut = ""
BarTextIn = RTrim(LTrim(BarTextIn))

' Throw away non-numeric data
TempString = ""
For i = 1 To Len(BarTextIn)
  If IsNumeric(Mid(BarTextIn, i, 1)) Then
    TempString = TempString & Mid(BarTextIn, i, 1)
  End If
Next i

' If not an even number of digits, add a leading 0
If (Len(TempString) Mod 2) = 1 Then
  TempString = "0" & TempString
End If

' If UCC = 0, then normal start, otherwise UCC/EAN start
If UCC = 0 Then
  Sum = 105
  StartChar = "}"
  Weighting = 1
Else
  Sum = 207
  StartChar = "}|fffd|"
  Weighting = 2
End If

' Calculate the checksum, mod 103 and build output string
For i = 1 To Len(TempString) Step 2
    'Break string into pairs of digits and get value
    CharValue = Mid(TempString, i, 2)
    'Multiply value times weighting and add to sum
    Sum = Sum + (CharValue * Weighting)
    Weighting = Weighting + 1

    'translate value to ASCII and save in BarTextOut
    If CharValue < 90 Then
      BarTextOut = BarTextOut & Chr(CharValue + 33)
    ElseIf CharValue < 171 Then
      BarTextOut = BarTextOut & Chr(CharValue + 71)
    Else
      BarTextOut = BarTextOut & Chr(CharValue + 76)
    End If
Next i

' Find the remainder when Sum is divided by 103
CheckSumValue = (Sum Mod 103)
' Translate that value to an ASCII character
If CheckSumValue < 90 Then
  CheckSum = Chr(CheckSumValue + 33)
ElseIf CheckSumValue < 100 Then
  CheckSum = Chr(CheckSumValue + 71)
Else
  CheckSum = Chr(CheckSumValue + 76)
End If

'Build ouput string, trailing space for Windows rasterization bug
BarCodeOut = StartChar & BarTextOut & CheckSum & "~ "

'Return the string
Bar128SubsetC = BarCodeOut
End Function

Attribute VB_Name = "Module1"
Attribute VB_Name = "Module2"
Attribute VB_Name = "Module3"
Attribute VB_Name = "Module4"
Attribute VB_Name = "Module5"
Option Explicit
Attribute VB_Name = "Module6"
Attribute VB_Name = "Module7"
Attribute VB_Name = "Module8"
Attribute VB_Name = "Module9"
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
