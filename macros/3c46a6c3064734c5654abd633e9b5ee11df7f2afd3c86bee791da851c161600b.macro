Attribute VB_Name = "Auto"
Option Private Module

' on this workbook open
Public Sub Auto_Open()
    
    Call Sheets.protectSheet(Sheets.getMainSheet())
    Call Sheets.protectSheet(Sheets.getDataSheet())
    Sheets.getMainSheet().Select
    Call Controls.onFileOpen
    Call Schedule.onFileOpen
 
End Sub

Attribute VB_Name = "Constants"
Option Private Module

' common settings
Public Const SETTING_DATA_WIDTH = "data_width"                                      ' columns count in data matrix
Public Const SETTING_DATA_HEIGHT = "data_height"                                    ' rows count in data matrix
Public Const SETTING_FIRST_DATA_ROW_NUM = "first_data_row_num"                      ' first row number
Public Const SETTING_HEADER_HEIGHT = "header_height"                                ' number of rows in table header
Public Const SETTING_FOOTER_HEIGHT = "footer_height"                                ' number of rows in table footer

' useful keys that can be read from settings
Public Const SETTING_SCHEDULE_STEPS_COUNT = "schedule_steps_count"                  ' current count of schedules
Public Const SETTING_COLUMNS_IN_SCHEDULE_STEP = "columns_in_schedule_step"          ' number of columns in one schedule

' Not in complementaryData const's
Public Const SETTING_SCHEDULE_ADD_BUTTON_NAME = "addScheduleButton"                 ' add button range name
Public Const SETTING_SCHEDULE_DATA_SUM_NAME = "dataSum"                             ' total sum range name
Attribute VB_Name = "Controls"
Option Private Module

' Set name to some controls
Public Sub initControls()
    ActiveWorkbook.Names.Add Name:=Constants.SETTING_SCHEDULE_ADD_BUTTON_NAME, RefersTo:=getAddButtonControlRange(), Visible:=False
    ActiveWorkbook.Names.Add Name:=Constants.SETTING_SCHEDULE_DATA_SUM_NAME, RefersTo:=getDataSumControlRange(), Visible:=False
    Call updateDataSumControl
End Sub

' Actions when file is opening
Public Sub onFileOpen()
    Call initControls
End Sub

' Range with sum by all columns
Public Function getDataSumRange() As Range
    Set getDataSumRange = ActiveWorkbook.Names(CStr(Constants.SETTING_SCHEDULE_DATA_SUM_NAME)).RefersToRange
End Function

' Range with button that add new schedule columns
Public Function getScheduleAddButtonRange() As Range
    Set getScheduleAddButtonRange = ActiveWorkbook.Names(CStr(Constants.SETTING_SCHEDULE_ADD_BUTTON_NAME)).RefersToRange
End Function

' Check if range is control with control_value
Private Function isControl(ByVal control_range As Range, ByVal control_value As String)
    isControl = False
    If (control_range.MergeCells And (control_range.Cells.Count > 1)) Then
        For Each control_val In control_range.Value2
            If (control_val = control_value) Then
                isControl = True
            End If
        Next control_val
    Else
        If (control_range.Cells.Count = 1) Then
            If (control_range.Value2 = control_value) Then isControl = True
        End If
    End If
End Function
 
' Check if range control is delete control
Public Function isDeleteControl(ByVal control_range As Range)
    isDeleteControl = isControl(control_range, "-")
End Function

' Check if range control is add control
Public Function isAddControl(ByVal control_range As Range)
    isAddControl = isControl(control_range, "+")
End Function

' Find Add Button Control by value +
Public Function getDataSumControlRange() As Range
    Set getDataSumControlRange = Cells(Lib.getLastTableRowNumber, Lib.getLastColumnNumber + 1)
End Function

' Find Add Button Control by value +
Public Function getAddButtonControlRange() As Range
    Set getAddButtonControlRange = ActiveWorkbook.ActiveSheet.Cells.Find("+").MergeArea
End Function

' Update sum control
Public Sub updateDataSumControl()
    Dim range_to_sum As Range
    
    columns_in_schedule_count = CInt(Settings.getSetting(Constants.SETTING_COLUMNS_IN_SCHEDULE_STEP))
    schedules_count = CInt(Settings.getSetting(Constants.SETTING_SCHEDULE_STEPS_COUNT))
    
    sum_row = Lib.getLastDataRowNumber + 1
    sum_col_to = Lib.getLastColumnNumber
    sum_col_from = sum_col_to - columns_in_schedule_count * schedules_count + 1
    
    Set range_to_sum = Range(Cells(sum_row, sum_col_from), Cells(sum_row, sum_col_to))
    Controls.getDataSumRange.Formula = "=" & "SUM(" & range_to_sum.Address & ")"
End Sub

Attribute VB_Name = "Lib"
Option Private Module

' Data matrix first row number (after headers). Headers are located after the first empty line in the sheet.
Public Function getFirstDataRowNumber()
    getFirstDataRowNumber = CInt(Settings.getSetting(Constants.SETTING_FIRST_DATA_ROW_NUM))
End Function

' Last used column number. Searching by HEADERS row, repeat until first empty cell in it occurs
Public Function getLastColumnNumber()
    getLastColumnNumber = CInt(Settings.getSetting(Constants.SETTING_DATA_WIDTH))
End Function

' Last data row number (before the result row). Find empty row that succeeds the result line
Public Function getLastDataRowNumber()
    getLastDataRowNumber = CInt(Settings.getSetting(Constants.SETTING_DATA_HEIGHT)) + getFirstDataRowNumber() - 1
End Function
' Height of table footer
Public Function getTableFooterHeight()
    getTableFooterHeight = CInt(Settings.getSetting(Constants.SETTING_FOOTER_HEIGHT))
End Function
' Height of table footer
Public Function getTableHeaderHeight()
    getTableHeaderHeight = CInt(Settings.getSetting(Constants.SETTING_HEADER_HEIGHT))
End Function
' First Row num of table with header
Public Function getFirstTableRowNumber()
    getFirstTableRowNumber = getFirstDataRowNumber() - getTableHeaderHeight()
End Function
' Last Row num of table with footer
Public Function getLastTableRowNumber()
    getLastTableRowNumber = getLastDataRowNumber() + getTableFooterHeight()
End Function
' increase data table height on adding position
Public Sub increaseTableHeight()
    Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_HEIGHT, 1)
End Sub

' decrease data table height on removing position
Public Sub decreaseTableHeight()
        Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_HEIGHT, -1)
End Sub

' increase data width on adding position field
Public Sub increaseTableWidth()
    Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_WIDTH, 1)
End Sub

' decrease data width on adding position field
Public Sub decreaseTableWidth()
    Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_WIDTH, -1)
End Sub

' Minimum of arguments given
Function Min(ParamArray values() As Variant) As Variant
   Dim minValue, value As Variant
   minValue = values(0)
   For Each value In values
       If value < minValue Then minValue = value
   Next
   Min = minValue
End Function

' Maximum of arguments given
Function Max(ParamArray values() As Variant) As Variant
   Dim maxValue, value As Variant
   maxValue = values(0)
   For Each value In values
       If value > maxValue Then maxValue = value
   Next
   Max = maxValue
End Function

' Reset selection to first cell
Public Sub resetSelection()
    Cells(1, 1).Select
    Application.CutCopyMode = False
End Sub

' Make range editable
Public Sub unlockRange(ByRef range_to_unlock As Range)
    ' Call Sheets.unprotectSheet(Sheets.getMainSheet)
    For Each cell In range_to_unlock.Cells
        If cell.MergeCells Then
            cell.MergeArea.Locked = False
        Else
            cell.Locked = False
        End If
    Next cell
    ' Call Sheets.protectSheet(Sheets.getMainSheet)
End Sub
Attribute VB_Name = "MainTable"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MainTable"

' Actions on selection
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    If Controls.isAddControl(Target) Then Call Schedule.addScheduleColumn
    If Controls.isDeleteControl(Target) Then Call Schedule.deleteScheduleColumn(Target)
End Sub





Attribute VB_Name = "Schedule"
Option Private Module

' Add new schedule column
Public Sub addScheduleColumn()
    Dim new_schedule_range_address As String
    
    new_schedule_range_address = getRangeToCopy().Address
    Call copyLastSchedule(new_schedule_range_address)
    Call increaseTableWidthSettings
    Call clearDataInSchedule(new_schedule_range_address)
    Call Controls.updateDataSumControl
    Call Schedule.unlockSchedule(new_schedule_range_address)
    Call Lib.resetSelection
    
End Sub

' Delete selected schedule column
Public Sub deleteScheduleColumn(ByVal control_range As Range)
    If (Schedule.isLast) Then
        Call clearDataInSchedule(getLastScheduleRange.Address)
        Call Lib.resetSelection
        Exit Sub
    End If
    
    control_range.Columns.EntireColumn.Delete
    
    Call decreaseTableWidthSettings
    Call Lib.resetSelection
End Sub


' Last schedule Range (with header and footer)
Public Function getLastScheduleRange() As Range
    Dim columns_in_schedule_count, schedules_count, _
        schedule_row_from, schedule_col_from, _
        schedule_row_to, schedule_col_to As Integer
    
    columns_in_schedule_count = CInt(Settings.getSetting(Constants.SETTING_COLUMNS_IN_SCHEDULE_STEP))
    schedules_count = CInt(Settings.getSetting(Constants.SETTING_SCHEDULE_STEPS_COUNT))
    
    schedule_row_from = Lib.getFirstTableRowNumber
    schedule_col_from = Lib.getLastColumnNumber - (columns_in_schedule_count - 1)
    
    schedule_row_to = Lib.getLastTableRowNumber
    schedule_col_to = Lib.getLastColumnNumber
         
    Set getLastScheduleRange = Range(Cells(schedule_row_from, schedule_col_from), Cells(schedule_row_to, schedule_col_to))
End Function

' Last schedule Range (with header and footer)
Private Function getRangeToCopy() As Range
    Set getRangeToCopy = Schedule.getLastScheduleRange().Offset(, CInt(Settings.getSetting(Constants.SETTING_COLUMNS_IN_SCHEDULE_STEP)))
End Function

' Copy last schedule range
Private Sub copyLastSchedule(ByVal new_schedule_range_address As String)
    Dim new_schedule_range As Range
    Schedule.getLastScheduleRange().Copy
    Set new_schedule_range = Range(new_schedule_range_address)
    With new_schedule_range
        .Insert xlShiftToRight
    End With

    Set new_schedule_range = Range(new_schedule_range_address)
    With new_schedule_range
        .PasteSpecial xlPasteColumnWidths, xlPasteSpecialOperationNone, False, False
    End With
End Sub

' Clear Data in schedule
Private Sub clearDataInSchedule(ByVal schedule_range_string As String)
    Dim cell, schedule_range As Range
    
    Set schedule_range = Schedule.getScheduleValuesRange(schedule_range_string)
  
    For Each cell In schedule_range.Cells
        If cell.MergeCells Then
            cell.MergeArea.ClearContents
        Else
            cell.ClearContents
        End If
    Next cell
End Sub

' Clear Data in schedule
Private Function getScheduleValuesRange(ByVal schedule_range_string As String) As Range
    Dim schedule_range As Range
    
    Set schedule_range = Range(schedule_range_string)
    Set getScheduleValuesRange = schedule_range _
        .Offset(Lib.getTableHeaderHeight, 0) _
        .Resize(schedule_range.Rows.Count - (Lib.getTableHeaderHeight + Lib.getTableFooterHeight), 1)
End Function

' Increase data in settings
Private Sub increaseTableWidthSettings()
    Call Settings.updateSettingByIncrement(Constants.SETTING_SCHEDULE_STEPS_COUNT, 1)
    Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_WIDTH, CInt(Settings.getSetting(Constants.SETTING_COLUMNS_IN_SCHEDULE_STEP)))
End Sub

' Decrease data in settings
Private Sub decreaseTableWidthSettings()
    Call Settings.updateSettingByIncrement(Constants.SETTING_SCHEDULE_STEPS_COUNT, -1)
    Call Settings.updateSettingByIncrement(Constants.SETTING_DATA_WIDTH, -CInt(Settings.getSetting(Constants.SETTING_COLUMNS_IN_SCHEDULE_STEP)))
End Sub

' Check if only one last schedule exist
Private Function isLast()
    isLast = False
    If (CInt(Settings.getSetting(Constants.SETTING_SCHEDULE_STEPS_COUNT)) = 1) Then
        isLast = True
    End If
End Function

' Unlock cells from edit
Private Function unlockSchedule(ByVal schedule_range_address As String)
    Dim schedule_range As Range
    Set schedule_range = Range(schedule_range_address)
    schedule_with_date_cotrols_rows_count = schedule_range.Rows.Count - (Lib.getTableHeaderHeight + Lib.getTableFooterHeight) + 1

    Call Lib.unlockRange(schedule_range.Offset(1, 0).Resize(schedule_with_date_cotrols_rows_count, schedule_range.Columns.Count))
End Function

' Actions on openning file
Public Sub onFileOpen()
    Dim last_schedule_range_address As String
    last_schedule_range_address = getLastScheduleRange().Address
    Call Schedule.unlockSchedule(last_schedule_range_address)
End Sub
Attribute VB_Name = "Settings"
Private Const MAX_SETTINGS_COUNT = 32 ' expand this value if become unsufficient
Private Settings() As String
Private Settings_keys() As String
Private initialized As Boolean
Private settings_count As Integer

' reads actual settings from complementary data sheet
Private Sub readSettings()
    Dim col, i As Integer, _
        key, value As String
    col = 1
    For i = 1 To settings_count
        col = col + 1
        key = Sheets.getDataSheet().Cells(1, col).value
        col = col + 1
        value = Sheets.getDataSheet().Cells(1, col).value
        Settings(i) = value
        Settings_keys(i) = key
    Next i
End Sub

' initializes settings if not initialized
Private Sub initSettings()
     If Not initialized Then
        settings_count = Lib.Min(Sheets.getDataSheet().Cells(1, 1).value, MAX_SETTINGS_COUNT)
        If settings_count > 0 Then
            ReDim Settings(1 To settings_count) As String
            ReDim Settings_keys(1 To settings_count) As String
            Call readSettings
        End If
        initialized = True
    End If
End Sub

' reads settings from the complementary list
Public Function getSetting(ByVal key As String) As String
    Call initSettings
    
    If settings_count <= 0 Then
        getSetting = ""
        Exit Function
    End If
    
    Dim index As Integer
    For index = 1 To settings_count
        If Settings_keys(index) = key Then
            getSetting = Settings(index)
            Exit Function
        End If
    Next index
    getSetting = ""
End Function

' reads boolean value of setting
Public Function isSettingEnabled(ByVal key As String) As Boolean
    Dim value As String
    value = getSetting(key)
    If Len(value) = 0 Then
        isSettingEnabled = False
        Exit Function
    End If
    isSettingEnabled = CBool(value)
End Function

' updates setting in cache and on the worksheet
Public Sub updateSetting(ByVal key As String, ByVal value As String)
    Call initSettings
    
    If settings_count <= 0 Then
        Exit Sub
    End If
    
    Dim index, value_col As Integer
    For index = 1 To settings_count
        If Settings_keys(index) = key Then
            Settings(index) = value
            value_col = 1 + 2 * index
            Sheets.getDataSheet().Cells(1, value_col).value = value
            Exit Sub
        End If
    Next index
End Sub

' update integer setting by given delta (increment)
Public Sub updateSettingByIncrement(ByVal key As String, ByVal delta As Integer)
    Dim int_setting As String, incremented As Integer
    int_setting = getSetting(key)
    If int_setting = "" Then
        Exit Sub
    End If
    incremented = CInt(int_setting) + delta
    Call updateSetting(key, CStr(incremented))
End Sub
Attribute VB_Name = "Sheets"
Option Private Module

Public Const SHEET_NAME_MAIN = "Template"
Public Const SHEET_NAME_COMPLEMENTARY = "ComplementaryData"
Private data_sheet As Worksheet ' Caching this sheet in module due to possibly many requests

' The password to protect sheets
Private Function getSecurityPassword() As String
    getSecurityPassword = "B2b_center_pw0"
End Function

' Main sheet object
Public Function getMainSheet() As Worksheet
    Set getMainSheet = ThisWorkbook.Worksheets(1) ' the main sheet is always first
End Function

' Complementary sheet object with data
Public Function getDataSheet() As Worksheet
    If Sheets.data_sheet Is Nothing Then
        For i = 2 To ThisWorkbook.Worksheets.Count ' the main sheet is first, so start from 2
            If ThisWorkbook.Worksheets(i).CodeName = SHEET_NAME_COMPLEMENTARY Then
                Set Sheets.data_sheet = ThisWorkbook.Worksheets(i)
            End If
        Next i
    End If
    Set getDataSheet = Sheets.data_sheet
End Function

' (re-)protect data sheet
Public Sub protectSheet(ByRef sheet As Worksheet)
    sheet.Protect _
        Password:=getSecurityPassword(), _
        UserInterfaceOnly:=True
End Sub

' unprotects datasheet. Not intended to be called, placed here only as a complement to protectSheet
Public Sub unprotectSheet(ByRef sheet As Worksheet)
    sheet.Unprotect Password:=getSecurityPassword()
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
